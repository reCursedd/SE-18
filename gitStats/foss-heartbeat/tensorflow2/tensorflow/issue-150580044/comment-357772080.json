{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/357772080", "html_url": "https://github.com/tensorflow/tensorflow/issues/2075#issuecomment-357772080", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2075", "id": 357772080, "node_id": "MDEyOklzc3VlQ29tbWVudDM1Nzc3MjA4MA==", "user": {"login": "mehmetbasbug", "id": 1459541, "node_id": "MDQ6VXNlcjE0NTk1NDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1459541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mehmetbasbug", "html_url": "https://github.com/mehmetbasbug", "followers_url": "https://api.github.com/users/mehmetbasbug/followers", "following_url": "https://api.github.com/users/mehmetbasbug/following{/other_user}", "gists_url": "https://api.github.com/users/mehmetbasbug/gists{/gist_id}", "starred_url": "https://api.github.com/users/mehmetbasbug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mehmetbasbug/subscriptions", "organizations_url": "https://api.github.com/users/mehmetbasbug/orgs", "repos_url": "https://api.github.com/users/mehmetbasbug/repos", "events_url": "https://api.github.com/users/mehmetbasbug/events{/privacy}", "received_events_url": "https://api.github.com/users/mehmetbasbug/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-15T19:40:09Z", "updated_at": "2018-01-15T20:06:32Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=890531\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ibab\">@ibab</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22214696\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/meijun\">@meijun</a></p>\n<p>In fact, the implementation must depend on the parity of the rank of the shape.</p>\n<p>Following modification works for both cases and runs smoothly on cpu and gpu.</p>\n<pre><code>def unravel_index(indices, shape):\n    indices = tf.expand_dims(indices, 0)\n    shape = tf.expand_dims(shape, 1)\n    shape = tf.cast(shape, tf.float32)\n    strides = tf.cumprod(shape, reverse=True)\n    strides_shifted = tf.cumprod(shape, exclusive=True, reverse=True)\n    strides = tf.cast(strides, tf.int32)\n    strides_shifted = tf.cast(strides_shifted, tf.int32)\n    def even():\n        rem = indices - (indices // strides) * strides\n        return rem // strides_shifted\n    def odd():\n        div = indices // strides_shifted\n        return div - (div // strides) * strides\n    rank = tf.rank(shape)\n    return tf.cond(tf.equal(rank - (rank // 2) * 2, 0), even, odd)\n</code></pre>", "body_text": "@ibab @meijun\nIn fact, the implementation must depend on the parity of the rank of the shape.\nFollowing modification works for both cases and runs smoothly on cpu and gpu.\ndef unravel_index(indices, shape):\n    indices = tf.expand_dims(indices, 0)\n    shape = tf.expand_dims(shape, 1)\n    shape = tf.cast(shape, tf.float32)\n    strides = tf.cumprod(shape, reverse=True)\n    strides_shifted = tf.cumprod(shape, exclusive=True, reverse=True)\n    strides = tf.cast(strides, tf.int32)\n    strides_shifted = tf.cast(strides_shifted, tf.int32)\n    def even():\n        rem = indices - (indices // strides) * strides\n        return rem // strides_shifted\n    def odd():\n        div = indices // strides_shifted\n        return div - (div // strides) * strides\n    rank = tf.rank(shape)\n    return tf.cond(tf.equal(rank - (rank // 2) * 2, 0), even, odd)", "body": "@ibab @meijun \r\n\r\nIn fact, the implementation must depend on the parity of the rank of the shape. \r\n\r\nFollowing modification works for both cases and runs smoothly on cpu and gpu.\r\n```\r\ndef unravel_index(indices, shape):\r\n    indices = tf.expand_dims(indices, 0)\r\n    shape = tf.expand_dims(shape, 1)\r\n    shape = tf.cast(shape, tf.float32)\r\n    strides = tf.cumprod(shape, reverse=True)\r\n    strides_shifted = tf.cumprod(shape, exclusive=True, reverse=True)\r\n    strides = tf.cast(strides, tf.int32)\r\n    strides_shifted = tf.cast(strides_shifted, tf.int32)\r\n    def even():\r\n        rem = indices - (indices // strides) * strides\r\n        return rem // strides_shifted\r\n    def odd():\r\n        div = indices // strides_shifted\r\n        return div - (div // strides) * strides\r\n    rank = tf.rank(shape)\r\n    return tf.cond(tf.equal(rank - (rank // 2) * 2, 0), even, odd)\r\n```\r\n\r\n"}