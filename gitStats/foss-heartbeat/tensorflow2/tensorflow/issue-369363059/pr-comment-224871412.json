{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224871412", "pull_request_review_id": 164344611, "id": 224871412, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDg3MTQxMg==", "diff_hunk": "@@ -571,6 +573,80 @@ def testCond_7(self):\n       r = control_flow_ops.cond(pred, fn1, fn2)\n       self.assertAllEqual([11, 12], sess.run(r))\n \n+  # Test for list\n+  def testCond_8(self):\n+    with self.cached_session() as sess:\n+      x = constant_op.constant(10)\n+      y = constant_op.constant(200)\n+      pred = math_ops.less(1, 2)\n+      fn1 = lambda: [math_ops.add(x, y), math_ops.add(x, y)]\n+      fn2 = lambda: [y, y]\n+      r = control_flow_ops.cond(pred, fn1, fn2)\n+      test_result = sess.run(r)\n+      self.assertListEqual([210, 210], test_result)\n+\n+  #Test for tuple\n+  def testCond_9(self):\n+    with self.cached_session() as sess:\n+      x = constant_op.constant(10)\n+      y = constant_op.constant(200)\n+      pred = math_ops.less(1, 2)\n+      fn1 = lambda: (math_ops.add(x, y), math_ops.add(x, y))\n+      fn2 = lambda: (y, y)\n+      r = control_flow_ops.cond(pred, fn1, fn2)\n+      test_result = sess.run(r)\n+      self.assertAllEqual((210, 210), test_result)\n+\n+  #Test for dicts\n+  def testCond_10(self):\n+    with self.cached_session() as sess:\n+      x = constant_op.constant(10)\n+      y = constant_op.constant(200)\n+      pred = math_ops.less(1, 2)\n+      fn1 = lambda: {\"a\": math_ops.add(x, y), \"b\": math_ops.add(x, y)}\n+      fn2 = lambda: {\"a\": y, \"b\": y}\n+      r = control_flow_ops.cond(pred, fn1, fn2)\n+      test_result = sess.run(r)\n+      self.assertAllEqual({\"a\": 210, \"b\": 210}, test_result)\n+\n+  #Test for embedded list \n+  def testCond_11(self):\n+    with self.cached_session() as sess:\n+      x = constant_op.constant(10)\n+      y = constant_op.constant(200)\n+      pred = math_ops.less(1, 2)\n+      fn1 = lambda: [[math_ops.add(x, y), math_ops.add(x, y)]]\n+      fn2 = lambda: [[y, y]]\n+      #Pass strict=True flag as cond_v2 allows for tensors to be\n+      #in nested output structures as singletons\n+      r = control_flow_ops.cond(pred, fn1, fn2, strict=True)\n+      test_case = sess.run(r)\n+      self.assertListEqual([[210, 210]], sess.run(r))\n+\n+  #Test for embedded tuple\n+  def testCond_12(self):\n+    with self.cached_session() as sess:\n+      x = constant_op.constant(10)\n+      y = constant_op.constant(200)\n+      pred = math_ops.less(1, 2)\n+      fn1 = lambda: ((math_ops.add(x, y), math_ops.add(x, y)))\n+      fn2 = lambda: ((y, y))\n+      r = control_flow_ops.cond(pred, fn1, fn2)\n+      test_case = sess.run(r)\n+      self.assertAllEqual(((210, 210)), sess.run(r))\n+\n+  #Test for embedded dict\n+  def testCond_13(self):\n+    with self.cached_session() as sess:\n+      x = constant_op.constant(10)\n+      y = constant_op.constant(200)\n+      pred = math_ops.less(1, 2)\n+      fn1 = lambda: {\"a\": {\"c\": math_ops.add(x, y)}, \"b\": {\"d\": math_ops.add(x, y)}}\n+      fn2 = lambda: {\"a\": {\"c\": y}, \"b\": {\"d\": y}}\n+      r = control_flow_ops.cond(pred, fn1, fn2)\n+      test_result = sess.run(r)\n+      self.assertAllEqual({\"a\": {\"c\": 210}, \"b\": {\"d\": 210}}, test_result)\n+", "path": "tensorflow/python/kernel_tests/control_flow_ops_py_test.py", "position": 93, "original_position": 93, "commit_id": "5a7aed60f356e207feead09cdc29d82d0912fc01", "original_commit_id": "5a7aed60f356e207feead09cdc29d82d0912fc01", "user": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "body": "Can you add a test checking that a clear error message is raised if the branch output structures don't match? Search for assertRaisesRegexp for examples of how to do this.", "created_at": "2018-10-12T18:05:49Z", "updated_at": "2018-10-12T18:11:55Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22916#discussion_r224871412", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22916", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224871412"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22916#discussion_r224871412"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22916"}}, "body_html": "<p>Can you add a test checking that a clear error message is raised if the branch output structures don't match? Search for assertRaisesRegexp for examples of how to do this.</p>", "body_text": "Can you add a test checking that a clear error message is raised if the branch output structures don't match? Search for assertRaisesRegexp for examples of how to do this."}