{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13359", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13359/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13359/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13359/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13359", "id": 261266158, "node_id": "MDU6SXNzdWUyNjEyNjYxNTg=", "number": 13359, "title": "Sess.list_devices() get  swig/python detected a memory leak error.", "user": {"login": "gauss-clb", "id": 11674304, "node_id": "MDQ6VXNlcjExNjc0MzA0", "avatar_url": "https://avatars2.githubusercontent.com/u/11674304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gauss-clb", "html_url": "https://github.com/gauss-clb", "followers_url": "https://api.github.com/users/gauss-clb/followers", "following_url": "https://api.github.com/users/gauss-clb/following{/other_user}", "gists_url": "https://api.github.com/users/gauss-clb/gists{/gist_id}", "starred_url": "https://api.github.com/users/gauss-clb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gauss-clb/subscriptions", "organizations_url": "https://api.github.com/users/gauss-clb/orgs", "repos_url": "https://api.github.com/users/gauss-clb/repos", "events_url": "https://api.github.com/users/gauss-clb/events{/privacy}", "received_events_url": "https://api.github.com/users/gauss-clb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-28T10:17:40Z", "updated_at": "2017-09-28T14:17:45Z", "closed_at": "2017-09-28T14:17:45Z", "author_association": "NONE", "body_html": "<p>Look at the code:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">different_graph_session_test</span>():\n\t<span class=\"pl-s\"><span class=\"pl-pds\">'''</span></span>\n<span class=\"pl-s\">\t\ta_0 is in graph g_0, a_1 is in graph g_1,a_2 is in default graph,</span>\n<span class=\"pl-s\">\t\tso a_0 can only run on session of g_0, a_1 can only run on session of g_1,</span>\n<span class=\"pl-s\">\t\ta_2 can only run on session of tf.get_default_graph()</span>\n<span class=\"pl-s\">\t<span class=\"pl-pds\">'''</span></span>\n\tg_0 <span class=\"pl-k\">=</span> tf.Graph()\n\tg_1 <span class=\"pl-k\">=</span> tf.Graph()\n\t<span class=\"pl-k\">with</span> g_0.as_default():\n\t\ta_0 <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">1</span>)\n\t<span class=\"pl-k\">with</span> g_1.as_default():\n\t\ta_1 <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">1</span>)\n\ta_2 <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">1</span>)\n\n\t<span class=\"pl-k\">assert</span> <span class=\"pl-k\">not</span> a_0.graph <span class=\"pl-k\">is</span> a_1.graph, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>different_graph_session_test wrong!<span class=\"pl-pds\">'</span></span>\n\t<span class=\"pl-k\">assert</span> a_2.graph <span class=\"pl-k\">is</span> tf.get_default_graph(), <span class=\"pl-s\"><span class=\"pl-pds\">'</span>different_graph_session_test wrong!<span class=\"pl-pds\">'</span></span>\n\t\n\t<span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">graph</span><span class=\"pl-k\">=</span>g_0) <span class=\"pl-k\">as</span> sess:\n\t\tsess.run(a_0)\n\t\tdevices <span class=\"pl-k\">=</span> sess.list_devices()\n\t\t<span class=\"pl-k\">for</span> d <span class=\"pl-k\">in</span> devices:\n\t\t\t<span class=\"pl-c1\">print</span>(d.name)\n\t<span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">graph</span><span class=\"pl-k\">=</span>g_1) <span class=\"pl-k\">as</span> sess:\n\t\tsess.run(a_1)\n\t\tdevices <span class=\"pl-k\">=</span> sess.list_devices()\n\t\t<span class=\"pl-k\">for</span> d <span class=\"pl-k\">in</span> devices:\n\t\t\t<span class=\"pl-c1\">print</span>(d.name)\n\t<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n\t\tsess.run(a_2)\n\t\tdevices <span class=\"pl-k\">=</span> sess.list_devices()\n\t\t<span class=\"pl-k\">for</span> d <span class=\"pl-k\">in</span> devices:\n\t\t\t<span class=\"pl-c1\">print</span>(d.name)</pre></div>\n<p>It will print</p>\n<pre><code>swig/python detected a memory leak of type 'int64_t *', no destructor found.\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\n/job:localhost/replica:0/task:0/device:CPU:0\n/job:localhost/replica:0/task:0/device:GPU:0\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\n</code></pre>\n<p>Is it a bug or something wrong?</p>", "body_text": "Look at the code:\ndef different_graph_session_test():\n\t'''\n\t\ta_0 is in graph g_0, a_1 is in graph g_1,a_2 is in default graph,\n\t\tso a_0 can only run on session of g_0, a_1 can only run on session of g_1,\n\t\ta_2 can only run on session of tf.get_default_graph()\n\t'''\n\tg_0 = tf.Graph()\n\tg_1 = tf.Graph()\n\twith g_0.as_default():\n\t\ta_0 = tf.constant(1)\n\twith g_1.as_default():\n\t\ta_1 = tf.constant(1)\n\ta_2 = tf.constant(1)\n\n\tassert not a_0.graph is a_1.graph, 'different_graph_session_test wrong!'\n\tassert a_2.graph is tf.get_default_graph(), 'different_graph_session_test wrong!'\n\t\n\twith tf.Session(graph=g_0) as sess:\n\t\tsess.run(a_0)\n\t\tdevices = sess.list_devices()\n\t\tfor d in devices:\n\t\t\tprint(d.name)\n\twith tf.Session(graph=g_1) as sess:\n\t\tsess.run(a_1)\n\t\tdevices = sess.list_devices()\n\t\tfor d in devices:\n\t\t\tprint(d.name)\n\twith tf.Session() as sess:\n\t\tsess.run(a_2)\n\t\tdevices = sess.list_devices()\n\t\tfor d in devices:\n\t\t\tprint(d.name)\nIt will print\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\n/job:localhost/replica:0/task:0/device:CPU:0\n/job:localhost/replica:0/task:0/device:GPU:0\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\n\nIs it a bug or something wrong?", "body": "Look at the code:\r\n\r\n```python\r\ndef different_graph_session_test():\r\n\t'''\r\n\t\ta_0 is in graph g_0, a_1 is in graph g_1,a_2 is in default graph,\r\n\t\tso a_0 can only run on session of g_0, a_1 can only run on session of g_1,\r\n\t\ta_2 can only run on session of tf.get_default_graph()\r\n\t'''\r\n\tg_0 = tf.Graph()\r\n\tg_1 = tf.Graph()\r\n\twith g_0.as_default():\r\n\t\ta_0 = tf.constant(1)\r\n\twith g_1.as_default():\r\n\t\ta_1 = tf.constant(1)\r\n\ta_2 = tf.constant(1)\r\n\r\n\tassert not a_0.graph is a_1.graph, 'different_graph_session_test wrong!'\r\n\tassert a_2.graph is tf.get_default_graph(), 'different_graph_session_test wrong!'\r\n\t\r\n\twith tf.Session(graph=g_0) as sess:\r\n\t\tsess.run(a_0)\r\n\t\tdevices = sess.list_devices()\r\n\t\tfor d in devices:\r\n\t\t\tprint(d.name)\r\n\twith tf.Session(graph=g_1) as sess:\r\n\t\tsess.run(a_1)\r\n\t\tdevices = sess.list_devices()\r\n\t\tfor d in devices:\r\n\t\t\tprint(d.name)\r\n\twith tf.Session() as sess:\r\n\t\tsess.run(a_2)\r\n\t\tdevices = sess.list_devices()\r\n\t\tfor d in devices:\r\n\t\t\tprint(d.name)\r\n```\r\n\r\nIt will print\r\n\r\n```\r\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\r\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\r\n/job:localhost/replica:0/task:0/device:CPU:0\r\n/job:localhost/replica:0/task:0/device:GPU:0\r\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\r\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\r\n```\r\nIs it a bug or something wrong?"}