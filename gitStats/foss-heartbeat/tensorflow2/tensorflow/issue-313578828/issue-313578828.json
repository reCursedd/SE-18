{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18447", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18447/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18447/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18447/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18447", "id": 313578828, "node_id": "MDU6SXNzdWUzMTM1Nzg4Mjg=", "number": 18447, "title": "Numerically safe cross_entropy for tfd.Bernoulli?", "user": {"login": "jiamings", "id": 8085263, "node_id": "MDQ6VXNlcjgwODUyNjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/8085263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiamings", "html_url": "https://github.com/jiamings", "followers_url": "https://api.github.com/users/jiamings/followers", "following_url": "https://api.github.com/users/jiamings/following{/other_user}", "gists_url": "https://api.github.com/users/jiamings/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiamings/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiamings/subscriptions", "organizations_url": "https://api.github.com/users/jiamings/orgs", "repos_url": "https://api.github.com/users/jiamings/repos", "events_url": "https://api.github.com/users/jiamings/events{/privacy}", "received_events_url": "https://api.github.com/users/jiamings/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jvdillon", "id": 1137078, "node_id": "MDQ6VXNlcjExMzcwNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1137078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvdillon", "html_url": "https://github.com/jvdillon", "followers_url": "https://api.github.com/users/jvdillon/followers", "following_url": "https://api.github.com/users/jvdillon/following{/other_user}", "gists_url": "https://api.github.com/users/jvdillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvdillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvdillon/subscriptions", "organizations_url": "https://api.github.com/users/jvdillon/orgs", "repos_url": "https://api.github.com/users/jvdillon/repos", "events_url": "https://api.github.com/users/jvdillon/events{/privacy}", "received_events_url": "https://api.github.com/users/jvdillon/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jvdillon", "id": 1137078, "node_id": "MDQ6VXNlcjExMzcwNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1137078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvdillon", "html_url": "https://github.com/jvdillon", "followers_url": "https://api.github.com/users/jvdillon/followers", "following_url": "https://api.github.com/users/jvdillon/following{/other_user}", "gists_url": "https://api.github.com/users/jvdillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvdillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvdillon/subscriptions", "organizations_url": "https://api.github.com/users/jvdillon/orgs", "repos_url": "https://api.github.com/users/jvdillon/repos", "events_url": "https://api.github.com/users/jvdillon/events{/privacy}", "received_events_url": "https://api.github.com/users/jvdillon/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-04-12T05:08:18Z", "updated_at": "2018-07-24T06:18:27Z", "closed_at": "2018-07-24T06:18:27Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: MacOS</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.7</li>\n<li><strong>Python version</strong>: 3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<pre lang=\"[python]\"><code>import tensorflow as tf\nfrom tensorflow import distributions as tfd\n\ntf.enable_eager_execution()\n\ndef test_bernoulli_cross_entropy():\n    logits = tf.random_normal(shape=[3, 4])\n    labels = tf.cast(tf.random_normal(shape=[3, 4]) &gt; 0.0, tf.float32)\n    p = tfd.Bernoulli(logits=logits)\n    q = tfd.Bernoulli(probs=labels)\n\n    ce1 = tf.nn.sigmoid_cross_entropy_with_logits(logits=p.logits, labels=q.probs)\n    ce2 = q.cross_entropy(p)\n    print(ce1)\n    print(ce2)\n</code></pre>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<p>v1.7.0-3-g024aecf414 1.7.0</p>\n<h3>Describe the problem</h3>\n<p>The Bernoulli in Tensorflow distributions does not seem to have a numerically safe cross entropy operation. See code above -- it should produce the same results as tf.nn.sigmoid_cross_entropy_with_logits, but produces NaN. If I set probs to be not exactly zero or one, then ce1 = ce2. So it seems to be a numerical stability issue.</p>\n<p>Example output:</p>\n<pre><code>tf.Tensor(\n[[0.88931024 1.4332782  0.47688866 0.48566538]\n [0.93064773 0.39325503 1.1308188  1.5703993 ]\n [0.09037975 0.1828385  0.39422417 0.839576  ]], shape=(3, 4), dtype=float32)\ntf.Tensor(\n[[nan nan nan nan]\n [nan nan nan nan]\n [nan nan nan nan]], shape=(3, 4), dtype=float32)\n</code></pre>\n<h3>Source code / logs</h3>\n<pre lang=\"[python]\"><code>import tensorflow as tf\nfrom tensorflow import distributions as tfd\n\ntf.enable_eager_execution()\n\ndef test_bernoulli_cross_entropy():\n    logits = tf.random_normal(shape=[3, 4])\n    labels = tf.cast(tf.random_normal(shape=[3, 4]) &gt; 0.0, tf.float32)\n    p = tfd.Bernoulli(logits=logits)\n    q = tfd.Bernoulli(probs=labels)\n\n    ce1 = tf.nn.sigmoid_cross_entropy_with_logits(logits=p.logits, labels=q.probs)\n    ce2 = q.cross_entropy(p)\n    print(ce1)\n    print(ce2)\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): 1.7\nPython version: 3.5\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce:\n\nimport tensorflow as tf\nfrom tensorflow import distributions as tfd\n\ntf.enable_eager_execution()\n\ndef test_bernoulli_cross_entropy():\n    logits = tf.random_normal(shape=[3, 4])\n    labels = tf.cast(tf.random_normal(shape=[3, 4]) > 0.0, tf.float32)\n    p = tfd.Bernoulli(logits=logits)\n    q = tfd.Bernoulli(probs=labels)\n\n    ce1 = tf.nn.sigmoid_cross_entropy_with_logits(logits=p.logits, labels=q.probs)\n    ce2 = q.cross_entropy(p)\n    print(ce1)\n    print(ce2)\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nv1.7.0-3-g024aecf414 1.7.0\nDescribe the problem\nThe Bernoulli in Tensorflow distributions does not seem to have a numerically safe cross entropy operation. See code above -- it should produce the same results as tf.nn.sigmoid_cross_entropy_with_logits, but produces NaN. If I set probs to be not exactly zero or one, then ce1 = ce2. So it seems to be a numerical stability issue.\nExample output:\ntf.Tensor(\n[[0.88931024 1.4332782  0.47688866 0.48566538]\n [0.93064773 0.39325503 1.1308188  1.5703993 ]\n [0.09037975 0.1828385  0.39422417 0.839576  ]], shape=(3, 4), dtype=float32)\ntf.Tensor(\n[[nan nan nan nan]\n [nan nan nan nan]\n [nan nan nan nan]], shape=(3, 4), dtype=float32)\n\nSource code / logs\nimport tensorflow as tf\nfrom tensorflow import distributions as tfd\n\ntf.enable_eager_execution()\n\ndef test_bernoulli_cross_entropy():\n    logits = tf.random_normal(shape=[3, 4])\n    labels = tf.cast(tf.random_normal(shape=[3, 4]) > 0.0, tf.float32)\n    p = tfd.Bernoulli(logits=logits)\n    q = tfd.Bernoulli(probs=labels)\n\n    ce1 = tf.nn.sigmoid_cross_entropy_with_logits(logits=p.logits, labels=q.probs)\n    ce2 = q.cross_entropy(p)\n    print(ce1)\n    print(ce2)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: MacOS\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: 1.7\r\n- **Python version**: 3.5\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**:\r\n```[python]\r\nimport tensorflow as tf\r\nfrom tensorflow import distributions as tfd\r\n\r\ntf.enable_eager_execution()\r\n\r\ndef test_bernoulli_cross_entropy():\r\n    logits = tf.random_normal(shape=[3, 4])\r\n    labels = tf.cast(tf.random_normal(shape=[3, 4]) > 0.0, tf.float32)\r\n    p = tfd.Bernoulli(logits=logits)\r\n    q = tfd.Bernoulli(probs=labels)\r\n\r\n    ce1 = tf.nn.sigmoid_cross_entropy_with_logits(logits=p.logits, labels=q.probs)\r\n    ce2 = q.cross_entropy(p)\r\n    print(ce1)\r\n    print(ce2)\r\n```\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\nv1.7.0-3-g024aecf414 1.7.0\r\n\r\n### Describe the problem\r\nThe Bernoulli in Tensorflow distributions does not seem to have a numerically safe cross entropy operation. See code above -- it should produce the same results as tf.nn.sigmoid_cross_entropy_with_logits, but produces NaN. If I set probs to be not exactly zero or one, then ce1 = ce2. So it seems to be a numerical stability issue.\r\n\r\nExample output:\r\n```\r\ntf.Tensor(\r\n[[0.88931024 1.4332782  0.47688866 0.48566538]\r\n [0.93064773 0.39325503 1.1308188  1.5703993 ]\r\n [0.09037975 0.1828385  0.39422417 0.839576  ]], shape=(3, 4), dtype=float32)\r\ntf.Tensor(\r\n[[nan nan nan nan]\r\n [nan nan nan nan]\r\n [nan nan nan nan]], shape=(3, 4), dtype=float32)\r\n```\r\n\r\n### Source code / logs\r\n```[python]\r\nimport tensorflow as tf\r\nfrom tensorflow import distributions as tfd\r\n\r\ntf.enable_eager_execution()\r\n\r\ndef test_bernoulli_cross_entropy():\r\n    logits = tf.random_normal(shape=[3, 4])\r\n    labels = tf.cast(tf.random_normal(shape=[3, 4]) > 0.0, tf.float32)\r\n    p = tfd.Bernoulli(logits=logits)\r\n    q = tfd.Bernoulli(probs=labels)\r\n\r\n    ce1 = tf.nn.sigmoid_cross_entropy_with_logits(logits=p.logits, labels=q.probs)\r\n    ce2 = q.cross_entropy(p)\r\n    print(ce1)\r\n    print(ce2)\r\n```\r\n"}