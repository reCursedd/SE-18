{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/437090587", "html_url": "https://github.com/tensorflow/tensorflow/issues/23591#issuecomment-437090587", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23591", "id": 437090587, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzA5MDU4Nw==", "user": {"login": "sjain-stanford", "id": 19234106, "node_id": "MDQ6VXNlcjE5MjM0MTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/19234106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjain-stanford", "html_url": "https://github.com/sjain-stanford", "followers_url": "https://api.github.com/users/sjain-stanford/followers", "following_url": "https://api.github.com/users/sjain-stanford/following{/other_user}", "gists_url": "https://api.github.com/users/sjain-stanford/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjain-stanford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjain-stanford/subscriptions", "organizations_url": "https://api.github.com/users/sjain-stanford/orgs", "repos_url": "https://api.github.com/users/sjain-stanford/repos", "events_url": "https://api.github.com/users/sjain-stanford/events{/privacy}", "received_events_url": "https://api.github.com/users/sjain-stanford/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-08T17:40:29Z", "updated_at": "2018-11-08T17:40:29Z", "author_association": "NONE", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1112263\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/facaiy\">@facaiy</a> for the pointer to <a href=\"https://github.com/tensorflow/tensorflow/issues/22648\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/22648/hovercard\">#22648</a>. Yes definitely related, but I'm having trouble understanding the conclusion there. Was there a proposed solution/workaround to handle such inheritances of <code>tf.Variable</code> in TF1.11 onward?</p>\n<p>As <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8785797\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/leandro-gracia-gil\">@leandro-gracia-gil</a> <a href=\"https://github.com/tensorflow/community/pull/11/files#r215829467\">pointed out</a>, we highly depend on restoring models which were serialized to graph_defs, without having the variable objects / python code that generated them. So it's crucial that any infrastructure changes made to variables in 1.xx (to support 2.0) don't break existing workflows in our production code. Please suggest a workaround that I may be able to test on our end.</p>", "body_text": "Thanks @facaiy for the pointer to #22648. Yes definitely related, but I'm having trouble understanding the conclusion there. Was there a proposed solution/workaround to handle such inheritances of tf.Variable in TF1.11 onward?\nAs @leandro-gracia-gil pointed out, we highly depend on restoring models which were serialized to graph_defs, without having the variable objects / python code that generated them. So it's crucial that any infrastructure changes made to variables in 1.xx (to support 2.0) don't break existing workflows in our production code. Please suggest a workaround that I may be able to test on our end.", "body": "Thanks @facaiy for the pointer to [#22648](https://github.com/tensorflow/tensorflow/issues/22648). Yes definitely related, but I'm having trouble understanding the conclusion there. Was there a proposed solution/workaround to handle such inheritances of `tf.Variable` in TF1.11 onward?\r\n\r\nAs @leandro-gracia-gil [pointed out](https://github.com/tensorflow/community/pull/11/files#r215829467), we highly depend on restoring models which were serialized to graph_defs, without having the variable objects / python code that generated them. So it's crucial that any infrastructure changes made to variables in 1.xx (to support 2.0) don't break existing workflows in our production code. Please suggest a workaround that I may be able to test on our end."}