{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/439251187", "html_url": "https://github.com/tensorflow/tensorflow/issues/23591#issuecomment-439251187", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23591", "id": 439251187, "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTI1MTE4Nw==", "user": {"login": "sjain-stanford", "id": 19234106, "node_id": "MDQ6VXNlcjE5MjM0MTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/19234106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjain-stanford", "html_url": "https://github.com/sjain-stanford", "followers_url": "https://api.github.com/users/sjain-stanford/followers", "following_url": "https://api.github.com/users/sjain-stanford/following{/other_user}", "gists_url": "https://api.github.com/users/sjain-stanford/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjain-stanford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjain-stanford/subscriptions", "organizations_url": "https://api.github.com/users/sjain-stanford/orgs", "repos_url": "https://api.github.com/users/sjain-stanford/repos", "events_url": "https://api.github.com/users/sjain-stanford/events{/privacy}", "received_events_url": "https://api.github.com/users/sjain-stanford/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-16T01:32:56Z", "updated_at": "2018-11-16T01:32:56Z", "author_association": "NONE", "body_html": "<p>Aah makes sense. Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a>. I guess to conclude we can say:<br>\nThe <code>from_proto</code> method is not as useful when metagraph is available (which already contains collections of variables to be restored). The real use-case is when just the graphdef (.pb) is available (no metagraph). In this case, the (seemingly) only way to restore a variable is to create an empty <code>variable_def</code>, populate its proto fields, and use <code>tf.Variable.from_proto(variable_def)</code>. Correct?</p>", "body_text": "Aah makes sense. Thanks @alextp. I guess to conclude we can say:\nThe from_proto method is not as useful when metagraph is available (which already contains collections of variables to be restored). The real use-case is when just the graphdef (.pb) is available (no metagraph). In this case, the (seemingly) only way to restore a variable is to create an empty variable_def, populate its proto fields, and use tf.Variable.from_proto(variable_def). Correct?", "body": "Aah makes sense. Thanks @alextp. I guess to conclude we can say:\r\nThe `from_proto` method is not as useful when metagraph is available (which already contains collections of variables to be restored). The real use-case is when just the graphdef (.pb) is available (no metagraph). In this case, the (seemingly) only way to restore a variable is to create an empty `variable_def`, populate its proto fields, and use `tf.Variable.from_proto(variable_def)`. Correct?"}