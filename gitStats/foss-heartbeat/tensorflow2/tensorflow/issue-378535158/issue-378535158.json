{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23591", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23591/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23591/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23591/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23591", "id": 378535158, "node_id": "MDU6SXNzdWUzNzg1MzUxNTg=", "number": 23591, "title": "tf.Variable.load() raises NotImplementedError on TF1.11 but works okay in TF1.10 (RefVariable changes)", "user": {"login": "sjain-stanford", "id": 19234106, "node_id": "MDQ6VXNlcjE5MjM0MTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/19234106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjain-stanford", "html_url": "https://github.com/sjain-stanford", "followers_url": "https://api.github.com/users/sjain-stanford/followers", "following_url": "https://api.github.com/users/sjain-stanford/following{/other_user}", "gists_url": "https://api.github.com/users/sjain-stanford/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjain-stanford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjain-stanford/subscriptions", "organizations_url": "https://api.github.com/users/sjain-stanford/orgs", "repos_url": "https://api.github.com/users/sjain-stanford/repos", "events_url": "https://api.github.com/users/sjain-stanford/events{/privacy}", "received_events_url": "https://api.github.com/users/sjain-stanford/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2018-11-08T01:03:20Z", "updated_at": "2018-11-16T15:21:19Z", "closed_at": "2018-11-09T01:09:00Z", "author_association": "NONE", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No</li>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04</li>\n<li>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: n/a</li>\n<li>TensorFlow installed from (source or binary): binary</li>\n<li>TensorFlow version (use command below): v1.11.0-0-gc19e29306c 1.11.0</li>\n<li>Python version: 3.5</li>\n<li>Bazel version (if compiling from source): n/a</li>\n<li>GCC/Compiler version (if compiling from source): n/a</li>\n<li>CUDA/cuDNN version: n/a</li>\n<li>GPU model and memory: n/a</li>\n</ul>\n<p><strong>Describe the current behavior</strong><br>\nccing <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> as it seemed relevant.</p>\n<p>There had been some changes to <a href=\"https://github.com/tensorflow/tensorflow/blob/e1fb7a248bb2d932a0bed6fc1d2d9e3d91b50e89/tensorflow/python/ops/variables.py#L473-L506\">variables.py</a> which separate RefVariable from default Variable (see <a href=\"https://github.com/tensorflow/tensorflow/commit/e1fb7a248bb2d932a0bed6fc1d2d9e3d91b50e89\">this commit</a> which was released to TF1.11 build). However, some of these changes seem to break backward compatibility.</p>\n<p>For instance, if I create a variable using <code>tf.get_variable</code>, and within a session load a value into it using <code>.load(value, sess)</code> method, it worked fine in TF1.10. However with TF1.11 this results in <code>NotImplementedError</code>:</p>\n<pre><code>  File \"test.py\", line 41, in &lt;module&gt;\n    my_var.load(1.2, sess)\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/ops/variables.py\", line 789, in load\n    raise NotImplementedError\nNotImplementedError\n</code></pre>\n<p>The error points to line 789 in <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.11/tensorflow/python/ops/variables.py#L789\">variables.py</a></p>\n<p><strong>[UPDATE]</strong><br>\nHere's a sample code snippet to reproduce the issue.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> test.py</span>\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">RestoredVariable</span>(<span class=\"pl-e\">tf</span>.<span class=\"pl-e\">Variable</span>):\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">  A variable restored from disk</span>\n<span class=\"pl-s\">  <span class=\"pl-pds\">\"\"\"</span></span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-smi\">collections</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">graph</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n    <span class=\"pl-k\">if</span> graph <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n      graph <span class=\"pl-k\">=</span> tf.get_default_graph()\n    <span class=\"pl-k\">if</span> collections <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n      collections <span class=\"pl-k\">=</span> [tf.GraphKeys.<span class=\"pl-c1\">GLOBAL_VARIABLES</span>]\n    <span class=\"pl-k\">if</span> trainable <span class=\"pl-k\">and</span> tf.GraphKeys.<span class=\"pl-c1\">TRAINABLE_VARIABLES</span> <span class=\"pl-k\">not</span> <span class=\"pl-k\">in</span> collections:\n      collections <span class=\"pl-k\">=</span> collections <span class=\"pl-k\">+</span> [tf.GraphKeys.<span class=\"pl-c1\">TRAINABLE_VARIABLES</span>]\n    <span class=\"pl-c1\">self</span>._variable <span class=\"pl-k\">=</span> graph.as_graph_element(name).outputs[<span class=\"pl-c1\">0</span>]\n    <span class=\"pl-c1\">self</span>._snapshot <span class=\"pl-k\">=</span> graph.as_graph_element(name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/read<span class=\"pl-pds\">'</span></span>).outputs[<span class=\"pl-c1\">0</span>]\n    <span class=\"pl-c1\">self</span>._initializer_op <span class=\"pl-k\">=</span> graph.as_graph_element(name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/Assign<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-c1\">self</span>._constraint <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span>\n    <span class=\"pl-c1\">self</span>._trainable <span class=\"pl-k\">=</span> trainable\n    i_name <span class=\"pl-k\">=</span> name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/Initializer/<span class=\"pl-pds\">'</span></span>\n    keys <span class=\"pl-k\">=</span> [ k <span class=\"pl-k\">for</span> k <span class=\"pl-k\">in</span> graph._nodes_by_name.keys() <span class=\"pl-k\">if</span> k.startswith(i_name) <span class=\"pl-k\">and</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">not</span> <span class=\"pl-k\">in</span> k[<span class=\"pl-c1\">len</span>(i_name):] ]\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">len</span>(keys) <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">1</span>:\n      <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">ValueError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Could not find initializer for variable<span class=\"pl-pds\">'</span></span>, keys)\n    <span class=\"pl-c1\">self</span>._initial_value <span class=\"pl-k\">=</span> graph.as_graph_element(keys[<span class=\"pl-c1\">0</span>]).outputs[<span class=\"pl-c1\">0</span>]\n    <span class=\"pl-k\">for</span> key <span class=\"pl-k\">in</span> collections:\n      graph.add_to_collection(key, <span class=\"pl-c1\">self</span>)\n    <span class=\"pl-c1\">self</span>._save_slice_info <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span>\n\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Create a variable `my_var`</span>\nvar_temp <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>my_var<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Restore `my_var` as a `RestoredVariable` object which derives from `tf.Variable`.</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> This is useful when the python handle `var_temp` isn't available in current session</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> as may be the case when a loading from a serialized graph.pb or metagraph.</span>\nmy_var <span class=\"pl-k\">=</span> RestoredVariable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>my_var<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n  my_var.load(<span class=\"pl-c1\">1.2</span>, sess)\n  <span class=\"pl-c1\">print</span>(sess.run(my_var))</pre></div>\n<p><strong>Output on TF1.10:</strong></p>\n<pre><code>(tensorflow) $ python test.py\n...\n1.2\n</code></pre>\n<p><strong>ERROR on TF1.11:</strong></p>\n<pre><code>(tensorflow) $ python test.py\n...\nTraceback (most recent call last):\n  File \"test.py\", line 43, in &lt;module&gt;\n    print(var)\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1547, in __exit__\n    self._default_graph_context_manager.__exit__(exec_type, exec_value, exec_tb)\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 5227, in get_controller\n    yield g\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 5035, in get_controller\n    yield default\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 5227, in get_controller\n    yield g\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/eager/context.py\", line 357, in _mode\n    yield\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 5227, in get_controller\n    yield g\n  File \"test.py\", line 41, in &lt;module&gt;\n    my_var.load(1.2, sess)\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/ops/variables.py\", line 789, in load\n    raise NotImplementedError\nNotImplementedError\n</code></pre>\n<p>Is there a change in the method to load variables within a session? Or am I missing something here. Please help.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: n/a\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.11.0-0-gc19e29306c 1.11.0\nPython version: 3.5\nBazel version (if compiling from source): n/a\nGCC/Compiler version (if compiling from source): n/a\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\n\nDescribe the current behavior\nccing @alextp as it seemed relevant.\nThere had been some changes to variables.py which separate RefVariable from default Variable (see this commit which was released to TF1.11 build). However, some of these changes seem to break backward compatibility.\nFor instance, if I create a variable using tf.get_variable, and within a session load a value into it using .load(value, sess) method, it worked fine in TF1.10. However with TF1.11 this results in NotImplementedError:\n  File \"test.py\", line 41, in <module>\n    my_var.load(1.2, sess)\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/ops/variables.py\", line 789, in load\n    raise NotImplementedError\nNotImplementedError\n\nThe error points to line 789 in variables.py\n[UPDATE]\nHere's a sample code snippet to reproduce the issue.\n# test.py\nimport tensorflow as tf\n\nclass RestoredVariable(tf.Variable):\n  \"\"\"\n  A variable restored from disk\n  \"\"\"\n  def __init__(self, name, trainable=True, collections=None, graph=None):\n    if graph is None:\n      graph = tf.get_default_graph()\n    if collections is None:\n      collections = [tf.GraphKeys.GLOBAL_VARIABLES]\n    if trainable and tf.GraphKeys.TRAINABLE_VARIABLES not in collections:\n      collections = collections + [tf.GraphKeys.TRAINABLE_VARIABLES]\n    self._variable = graph.as_graph_element(name).outputs[0]\n    self._snapshot = graph.as_graph_element(name + '/read').outputs[0]\n    self._initializer_op = graph.as_graph_element(name + '/Assign')\n    self._constraint = None\n    self._trainable = trainable\n    i_name = name + '/Initializer/'\n    keys = [ k for k in graph._nodes_by_name.keys() if k.startswith(i_name) and '/' not in k[len(i_name):] ]\n    if len(keys) != 1:\n      raise ValueError('Could not find initializer for variable', keys)\n    self._initial_value = graph.as_graph_element(keys[0]).outputs[0]\n    for key in collections:\n      graph.add_to_collection(key, self)\n    self._save_slice_info = None\n\n\n# Create a variable `my_var`\nvar_temp = tf.get_variable('my_var', shape=[], dtype=tf.float32)\n\n# Restore `my_var` as a `RestoredVariable` object which derives from `tf.Variable`.\n# This is useful when the python handle `var_temp` isn't available in current session\n# as may be the case when a loading from a serialized graph.pb or metagraph.\nmy_var = RestoredVariable('my_var', trainable=True)\n\n\nwith tf.Session() as sess:\n  my_var.load(1.2, sess)\n  print(sess.run(my_var))\nOutput on TF1.10:\n(tensorflow) $ python test.py\n...\n1.2\n\nERROR on TF1.11:\n(tensorflow) $ python test.py\n...\nTraceback (most recent call last):\n  File \"test.py\", line 43, in <module>\n    print(var)\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1547, in __exit__\n    self._default_graph_context_manager.__exit__(exec_type, exec_value, exec_tb)\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 5227, in get_controller\n    yield g\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 5035, in get_controller\n    yield default\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 5227, in get_controller\n    yield g\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/eager/context.py\", line 357, in _mode\n    yield\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 5227, in get_controller\n    yield g\n  File \"test.py\", line 41, in <module>\n    my_var.load(1.2, sess)\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/ops/variables.py\", line 789, in load\n    raise NotImplementedError\nNotImplementedError\n\nIs there a change in the method to load variables within a session? Or am I missing something here. Please help.", "body": "**System information**\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: n/a\r\n- TensorFlow installed from (source or binary): binary\r\n- TensorFlow version (use command below): v1.11.0-0-gc19e29306c 1.11.0\r\n- Python version: 3.5\r\n- Bazel version (if compiling from source): n/a\r\n- GCC/Compiler version (if compiling from source): n/a\r\n- CUDA/cuDNN version: n/a \r\n- GPU model and memory: n/a\r\n\r\n**Describe the current behavior**\r\nccing @alextp as it seemed relevant.\r\n\r\nThere had been some changes to [variables.py](https://github.com/tensorflow/tensorflow/blob/e1fb7a248bb2d932a0bed6fc1d2d9e3d91b50e89/tensorflow/python/ops/variables.py#L473-L506) which separate RefVariable from default Variable (see [this commit](https://github.com/tensorflow/tensorflow/commit/e1fb7a248bb2d932a0bed6fc1d2d9e3d91b50e89) which was released to TF1.11 build). However, some of these changes seem to break backward compatibility.\r\n\r\nFor instance, if I create a variable using `tf.get_variable`, and within a session load a value into it using `.load(value, sess)` method, it worked fine in TF1.10. However with TF1.11 this results in `NotImplementedError`:\r\n\r\n```\r\n  File \"test.py\", line 41, in <module>\r\n    my_var.load(1.2, sess)\r\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/ops/variables.py\", line 789, in load\r\n    raise NotImplementedError\r\nNotImplementedError\r\n```\r\n\r\nThe error points to line 789 in [variables.py](https://github.com/tensorflow/tensorflow/blob/r1.11/tensorflow/python/ops/variables.py#L789)\r\n\r\n**[UPDATE]**\r\nHere's a sample code snippet to reproduce the issue.\r\n```python\r\n# test.py\r\nimport tensorflow as tf\r\n\r\nclass RestoredVariable(tf.Variable):\r\n  \"\"\"\r\n  A variable restored from disk\r\n  \"\"\"\r\n  def __init__(self, name, trainable=True, collections=None, graph=None):\r\n    if graph is None:\r\n      graph = tf.get_default_graph()\r\n    if collections is None:\r\n      collections = [tf.GraphKeys.GLOBAL_VARIABLES]\r\n    if trainable and tf.GraphKeys.TRAINABLE_VARIABLES not in collections:\r\n      collections = collections + [tf.GraphKeys.TRAINABLE_VARIABLES]\r\n    self._variable = graph.as_graph_element(name).outputs[0]\r\n    self._snapshot = graph.as_graph_element(name + '/read').outputs[0]\r\n    self._initializer_op = graph.as_graph_element(name + '/Assign')\r\n    self._constraint = None\r\n    self._trainable = trainable\r\n    i_name = name + '/Initializer/'\r\n    keys = [ k for k in graph._nodes_by_name.keys() if k.startswith(i_name) and '/' not in k[len(i_name):] ]\r\n    if len(keys) != 1:\r\n      raise ValueError('Could not find initializer for variable', keys)\r\n    self._initial_value = graph.as_graph_element(keys[0]).outputs[0]\r\n    for key in collections:\r\n      graph.add_to_collection(key, self)\r\n    self._save_slice_info = None\r\n\r\n\r\n# Create a variable `my_var`\r\nvar_temp = tf.get_variable('my_var', shape=[], dtype=tf.float32)\r\n\r\n# Restore `my_var` as a `RestoredVariable` object which derives from `tf.Variable`.\r\n# This is useful when the python handle `var_temp` isn't available in current session\r\n# as may be the case when a loading from a serialized graph.pb or metagraph.\r\nmy_var = RestoredVariable('my_var', trainable=True)\r\n\r\n\r\nwith tf.Session() as sess:\r\n  my_var.load(1.2, sess)\r\n  print(sess.run(my_var))\r\n```\r\n\r\n**Output on TF1.10:**\r\n```\r\n(tensorflow) $ python test.py\r\n...\r\n1.2\r\n```\r\n\r\n**ERROR on TF1.11:**\r\n```\r\n(tensorflow) $ python test.py\r\n...\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 43, in <module>\r\n    print(var)\r\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1547, in __exit__\r\n    self._default_graph_context_manager.__exit__(exec_type, exec_value, exec_tb)\r\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 5227, in get_controller\r\n    yield g\r\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 5035, in get_controller\r\n    yield default\r\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 5227, in get_controller\r\n    yield g\r\n  File \"/usr/lib/python3.5/contextlib.py\", line 77, in __exit__\r\n    self.gen.throw(type, value, traceback)\r\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/eager/context.py\", line 357, in _mode\r\n    yield\r\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 5227, in get_controller\r\n    yield g\r\n  File \"test.py\", line 41, in <module>\r\n    my_var.load(1.2, sess)\r\n  File \"/scratch/tensorflow/lib/python3.5/site-packages/tensorflow/python/ops/variables.py\", line 789, in load\r\n    raise NotImplementedError\r\nNotImplementedError\r\n```\r\n\r\nIs there a change in the method to load variables within a session? Or am I missing something here. Please help."}