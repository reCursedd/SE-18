{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6633", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6633/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6633/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6633/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6633", "id": 198680928, "node_id": "MDU6SXNzdWUxOTg2ODA5Mjg=", "number": 6633, "title": "CudnnRnnSequenceTensorDescriptor should support different sequence lengths", "user": {"login": "albertz", "id": 59132, "node_id": "MDQ6VXNlcjU5MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/59132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertz", "html_url": "https://github.com/albertz", "followers_url": "https://api.github.com/users/albertz/followers", "following_url": "https://api.github.com/users/albertz/following{/other_user}", "gists_url": "https://api.github.com/users/albertz/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertz/subscriptions", "organizations_url": "https://api.github.com/users/albertz/orgs", "repos_url": "https://api.github.com/users/albertz/repos", "events_url": "https://api.github.com/users/albertz/events{/privacy}", "received_events_url": "https://api.github.com/users/albertz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2017-01-04T10:56:09Z", "updated_at": "2018-09-18T22:50:56Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>According to the cuDNN docs, the functions <code>cudnnRNNForwardInference</code> / <code>cudnnRNNForwardTraining</code> get the argument <code>cudnnTensorDescriptor_t* xDesc</code>, where:</p>\n<p>xDesc: Array of tensor descriptors. Each must have the same second dimension. The first dimension may decrease from element n to element n + 1 but may not increase.</p>\n<p>The usage of <code>xDesc</code> is a bit non-straight-forward. I wrote about that in more detail <a href=\"http://stackoverflow.com/questions/41461670/cudnnrnnforwardtraining-seqlength-xdesc-usage\" rel=\"nofollow\">here</a>.<br>\nAccording to a <a href=\"https://github.com/Microsoft/CNTK/blob/7c5fb2d7d806148b5cbd795407f7c7b6a1a64520/Source/Math/CuDnnRNN.cpp\">comment in the CNTK code</a> about the dimensions of each <code>xDesc[t]</code>:</p>\n<blockquote>\n<p>these dimensions are what CUDNN expects: (the minibatch dimension, the data dimension, and the number 1 (because each descriptor describes one frame of data)</p>\n</blockquote>\n<p>TensorFlow sets the same minibatch dimension for each <code>xDesc[t]</code> in <code>CudnnRnnSequenceTensorDescriptor</code>:</p>\n<pre><code>int dims[] = {batch_size, data_size, 1};\nint strides[] = {dims[1] * dims[2], dims[2], 1};\nstatus = dynload::cudnnSetTensorNdDescriptor(\n    parent, handle /*tensorDesc*/, data_type /*dataType*/,\n    sizeof(dims) / sizeof(dims[0]) /*nbDims*/, dims /*dimA*/,\n    strides /*strideA*/);\nCUDNN_RETURN_IF_FAIL(status, \"Failed to update tensor descriptor\");\n// Replicate handle across the number of steps.\nhandles_.assign(seq_length, handle);\n</code></pre>\n<p>Also <code>createRnnSequenceTensorDescriptor</code> needs a new API to allow for that.</p>\n<p>And I'm not sure if there are ways to prepare the input <code>x</code> for <code>cudnnRNNForwardTraining</code> so that it has all sequences contiguously behind each other, and the sequences are sorted by sequences length.<br>\nSimilar as <a href=\"https://github.com/Microsoft/CNTK/blob/4472649412929543d4dfe553f50be5d9b3102521/Source/ComputationNetworkLib/RNNNodes.cpp#L265\"><code>PackSequencesForCuDNN</code> in CNTK</a>.</p>", "body_text": "According to the cuDNN docs, the functions cudnnRNNForwardInference / cudnnRNNForwardTraining get the argument cudnnTensorDescriptor_t* xDesc, where:\nxDesc: Array of tensor descriptors. Each must have the same second dimension. The first dimension may decrease from element n to element n + 1 but may not increase.\nThe usage of xDesc is a bit non-straight-forward. I wrote about that in more detail here.\nAccording to a comment in the CNTK code about the dimensions of each xDesc[t]:\n\nthese dimensions are what CUDNN expects: (the minibatch dimension, the data dimension, and the number 1 (because each descriptor describes one frame of data)\n\nTensorFlow sets the same minibatch dimension for each xDesc[t] in CudnnRnnSequenceTensorDescriptor:\nint dims[] = {batch_size, data_size, 1};\nint strides[] = {dims[1] * dims[2], dims[2], 1};\nstatus = dynload::cudnnSetTensorNdDescriptor(\n    parent, handle /*tensorDesc*/, data_type /*dataType*/,\n    sizeof(dims) / sizeof(dims[0]) /*nbDims*/, dims /*dimA*/,\n    strides /*strideA*/);\nCUDNN_RETURN_IF_FAIL(status, \"Failed to update tensor descriptor\");\n// Replicate handle across the number of steps.\nhandles_.assign(seq_length, handle);\n\nAlso createRnnSequenceTensorDescriptor needs a new API to allow for that.\nAnd I'm not sure if there are ways to prepare the input x for cudnnRNNForwardTraining so that it has all sequences contiguously behind each other, and the sequences are sorted by sequences length.\nSimilar as PackSequencesForCuDNN in CNTK.", "body": "According to the cuDNN docs, the functions `cudnnRNNForwardInference` / `cudnnRNNForwardTraining` get the argument `cudnnTensorDescriptor_t* xDesc`, where:\r\n\r\nxDesc: Array of tensor descriptors. Each must have the same second dimension. The first dimension may decrease from element n to element n + 1 but may not increase.\r\n\r\nThe usage of `xDesc` is a bit non-straight-forward. I wrote about that in more detail [here](http://stackoverflow.com/questions/41461670/cudnnrnnforwardtraining-seqlength-xdesc-usage).\r\nAccording to a [comment in the CNTK code](https://github.com/Microsoft/CNTK/blob/7c5fb2d7d806148b5cbd795407f7c7b6a1a64520/Source/Math/CuDnnRNN.cpp) about the dimensions of each `xDesc[t]`:\r\n\r\n> these dimensions are what CUDNN expects: (the minibatch dimension, the data dimension, and the number 1 (because each descriptor describes one frame of data)\r\n\r\nTensorFlow sets the same minibatch dimension for each `xDesc[t]` in `CudnnRnnSequenceTensorDescriptor`:\r\n\r\n    int dims[] = {batch_size, data_size, 1};\r\n    int strides[] = {dims[1] * dims[2], dims[2], 1};\r\n    status = dynload::cudnnSetTensorNdDescriptor(\r\n        parent, handle /*tensorDesc*/, data_type /*dataType*/,\r\n        sizeof(dims) / sizeof(dims[0]) /*nbDims*/, dims /*dimA*/,\r\n        strides /*strideA*/);\r\n    CUDNN_RETURN_IF_FAIL(status, \"Failed to update tensor descriptor\");\r\n    // Replicate handle across the number of steps.\r\n    handles_.assign(seq_length, handle);\r\n\r\nAlso `createRnnSequenceTensorDescriptor` needs a new API to allow for that.\r\n\r\nAnd I'm not sure if there are ways to prepare the input `x` for `cudnnRNNForwardTraining` so that it has all sequences contiguously behind each other, and the sequences are sorted by sequences length.\r\nSimilar as [`PackSequencesForCuDNN` in CNTK](https://github.com/Microsoft/CNTK/blob/4472649412929543d4dfe553f50be5d9b3102521/Source/ComputationNetworkLib/RNNNodes.cpp#L265).\r\n"}