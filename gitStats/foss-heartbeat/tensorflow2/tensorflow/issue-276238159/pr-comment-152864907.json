{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/152864907", "pull_request_review_id": 78792696, "id": 152864907, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mjg2NDkwNw==", "diff_hunk": "@@ -0,0 +1,105 @@\n+# Copyright 2017 The TensorFlow Authors. All rights reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"Utilities for defining TensorFlow Bazel dependencies.\"\"\"\n+\n+_SINGLE_URL_WHITELIST = depset([\n+    \"arm_compiler\",\n+    \"ortools_archive\",\n+])\n+\n+def _repos_are_siblings():\n+  return Label(\"@foo//bar\").workspace_root.startswith(\"../\")\n+\n+def _is_windows(repository_ctx):\n+  return repository_ctx.os.name.lower().find(\"windows\") != -1\n+\n+def _get_env_var(repository_ctx, name):\n+  if name in repository_ctx.os.environ:\n+    return repository_ctx.os.environ[name]\n+  else:\n+    return None\n+\n+# Executes specified command with arguments and calls 'fail' if it exited with\n+# non-zero code\n+def _execute_and_check_ret_code(repo_ctx, cmd_and_args):\n+  result = repo_ctx.execute(cmd_and_args, timeout=10)\n+  if result.return_code != 0:\n+    fail((\"Non-zero return code({1}) when executing '{0}':\\n\" + \"Stdout: {2}\\n\"\n+          + \"Stderr: {3}\").format(\" \".join(cmd_and_args), result.return_code,\n+                                  result.stdout, result.stderr))\n+\n+# Apply a patch_file to the repository root directory\n+# Runs 'patch -p1'\n+def _apply_patch(ctx, patch_file):\n+  # Don't check patch on Windows, because patch is only available under bash.\n+  if not _is_windows(ctx) and not ctx.which(\"patch\"):\n+    fail(\"patch command is not found, please install it\")\n+  cmd = [\"patch\", \"-p1\", \"-d\", ctx.path(\".\"), \"-i\", ctx.path(patch_file)]\n+  if _is_windows(ctx):\n+    bazel_sh = _get_env_var(ctx, \"BAZEL_SH\")\n+    if not bazel_sh:\n+      fail(\"BAZEL_SH environment variable is not set\")\n+    cmd = [bazel_sh, \"-c\", \" \".join(cmd)]\n+  _execute_and_check_ret_code(ctx, cmd)\n+\n+def _apply_delete(ctx, paths):\n+  for path in paths:\n+    if path.startswith(\"/\"):\n+      fail(\"refusing to rm -rf path starting with '/': \" + path)\n+    if \"..\" in path:\n+      fail(\"refusing to rm -rf path containing '..': \" + path)\n+  _execute_and_check_ret_code(\n+      ctx, [\"rm\", \"-rf\"] + [ctx.path(path) for path in paths])\n+\n+def _tf_http_archive(ctx):\n+  if (\"mirror.bazel.build\" not in ctx.attr.urls[0] or\n+      (len(ctx.attr.urls) < 2 and\n+       ctx.attr.name not in _SINGLE_URL_WHITELIST)):\n+    fail(\"tf_http_archive(urls) must have redundant URLs. The Bazel Mirror \" +\n+         \"URL must come first. Please note mirroring happens after merge\")\n+  ctx.download_and_extract(\n+      ctx.attr.urls,\n+      \"\",\n+      ctx.attr.sha256,\n+      ctx.attr.type,\n+      ctx.attr.strip_prefix)\n+  if ctx.attr.delete:\n+    _apply_delete(ctx, ctx.attr.delete)\n+  if ctx.attr.patch_file != None:\n+    _apply_patch(ctx, ctx.attr.patch_file)\n+  if ctx.attr.build_file != None:\n+    ctx.template(\"BUILD\", ctx.attr.build_file, {\n+        \"%prefix%\": \"..\" if _repos_are_siblings() else \"external\",\n+        \"%ws%\": ctx.attr.repository", "path": "third_party/repo.bzl", "position": 85, "original_position": 85, "commit_id": "b05fb1cbde953e8693a4c678f24dfce7d337a86e", "original_commit_id": "acdddf8a5a95bdd8e9382d9b57f379d598bec882", "user": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "body": "Do we need this %ws% hack anymore? Can we just write `@org_tensorflow` wherever we need this from now on\r\n@damienmg ?", "created_at": "2017-11-23T19:43:46Z", "updated_at": "2017-11-28T17:58:22Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14813#discussion_r152864907", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14813", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/152864907"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14813#discussion_r152864907"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14813"}}, "body_html": "<p>Do we need this %ws% hack anymore? Can we just write <code>@org_tensorflow</code> wherever we need this from now on<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3721087\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/damienmg\">@damienmg</a> ?</p>", "body_text": "Do we need this %ws% hack anymore? Can we just write @org_tensorflow wherever we need this from now on\n@damienmg ?"}