{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/263298752", "html_url": "https://github.com/tensorflow/tensorflow/issues/5834#issuecomment-263298752", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5834", "id": 263298752, "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzI5ODc1Mg==", "user": {"login": "gilberthendry", "id": 18124217, "node_id": "MDQ6VXNlcjE4MTI0MjE3", "avatar_url": "https://avatars0.githubusercontent.com/u/18124217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilberthendry", "html_url": "https://github.com/gilberthendry", "followers_url": "https://api.github.com/users/gilberthendry/followers", "following_url": "https://api.github.com/users/gilberthendry/following{/other_user}", "gists_url": "https://api.github.com/users/gilberthendry/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilberthendry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilberthendry/subscriptions", "organizations_url": "https://api.github.com/users/gilberthendry/orgs", "repos_url": "https://api.github.com/users/gilberthendry/repos", "events_url": "https://api.github.com/users/gilberthendry/events{/privacy}", "received_events_url": "https://api.github.com/users/gilberthendry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-28T15:22:31Z", "updated_at": "2016-11-28T15:22:31Z", "author_association": "NONE", "body_html": "<p>My bad, the parameter is called just 'steps', not max_steps. Try that.</p>\n<p>Fit works fine because TensorForestEstimator (like many estimators) doesn't rely on the input being exhausted to complete.  It uses TensorForestLossHook (or a custom hook) to terminate training when the forest stops growing.</p>\n<p>The way to indicate that input is exhausted is to raise StopIteration.  The problem with your input_fn is that there's no place to raise StopIteration, because it isn't based on a get_feed_fn like data_feeder.py uses.</p>\n<p>You might be able to pass a separate input_fn for export (that maybe returns an appropriately typed and sized placeholder?), and use x=, y= for training and evaluation.  Not sure about that, just something to think about.</p>\n<p>Overall, one way to go is to convert your data into tf.Examples, then using input_fn's is much more natural. Another way is to always evaluate with steps=1, and maybe exporting/predict will work fine.</p>", "body_text": "My bad, the parameter is called just 'steps', not max_steps. Try that.\nFit works fine because TensorForestEstimator (like many estimators) doesn't rely on the input being exhausted to complete.  It uses TensorForestLossHook (or a custom hook) to terminate training when the forest stops growing.\nThe way to indicate that input is exhausted is to raise StopIteration.  The problem with your input_fn is that there's no place to raise StopIteration, because it isn't based on a get_feed_fn like data_feeder.py uses.\nYou might be able to pass a separate input_fn for export (that maybe returns an appropriately typed and sized placeholder?), and use x=, y= for training and evaluation.  Not sure about that, just something to think about.\nOverall, one way to go is to convert your data into tf.Examples, then using input_fn's is much more natural. Another way is to always evaluate with steps=1, and maybe exporting/predict will work fine.", "body": "My bad, the parameter is called just 'steps', not max_steps. Try that.\r\n\r\nFit works fine because TensorForestEstimator (like many estimators) doesn't rely on the input being exhausted to complete.  It uses TensorForestLossHook (or a custom hook) to terminate training when the forest stops growing.\r\n\r\nThe way to indicate that input is exhausted is to raise StopIteration.  The problem with your input_fn is that there's no place to raise StopIteration, because it isn't based on a get_feed_fn like data_feeder.py uses. \r\n\r\nYou might be able to pass a separate input_fn for export (that maybe returns an appropriately typed and sized placeholder?), and use x=, y= for training and evaluation.  Not sure about that, just something to think about.\r\n\r\n\r\nOverall, one way to go is to convert your data into tf.Examples, then using input_fn's is much more natural. Another way is to always evaluate with steps=1, and maybe exporting/predict will work fine. "}