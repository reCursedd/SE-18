{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/263289850", "html_url": "https://github.com/tensorflow/tensorflow/issues/5834#issuecomment-263289850", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5834", "id": 263289850, "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzI4OTg1MA==", "user": {"login": "martarek", "id": 8918580, "node_id": "MDQ6VXNlcjg5MTg1ODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8918580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martarek", "html_url": "https://github.com/martarek", "followers_url": "https://api.github.com/users/martarek/followers", "following_url": "https://api.github.com/users/martarek/following{/other_user}", "gists_url": "https://api.github.com/users/martarek/gists{/gist_id}", "starred_url": "https://api.github.com/users/martarek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martarek/subscriptions", "organizations_url": "https://api.github.com/users/martarek/orgs", "repos_url": "https://api.github.com/users/martarek/repos", "events_url": "https://api.github.com/users/martarek/events{/privacy}", "received_events_url": "https://api.github.com/users/martarek/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-28T14:49:46Z", "updated_at": "2016-11-28T14:49:46Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11547801\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/prb12\">@prb12</a> Thanks for the feedback. My <code>training_input_fn</code> is only called once for fit and once for evaluate. However, if I add an print statement with and increasing integer in  <code>run_feeds_iter</code> mentioned earlier, it just prints, <em>ad infinitum</em>, which leads me to believe that <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=18124217\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gilberthendry\">@gilberthendry</a> might be right about the exception never being raised.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=18124217\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gilberthendry\">@gilberthendry</a> Thanks for the clarification. I tried passing \"max_steps=1\" to evaluate, but the argument does not exist for evaluate. Also, I believe you may be right about the exception never being raised. What is the proper way of raising that exception in an <code>input_fn</code>? And the strangest, why does my training ( <code>fit</code> function) works while it fails on <code>predict</code> and <code>evaluate</code> ... They are using the same <code>input_fn</code>, with the exception of the data used being different. There is something I am missing here...</p>\n<p>On a side note, I was using x and y inputs before, but now I get a Warning message saying the x= and y= inputs will be deprecated and to use input_fn instead (or SKCompat). The resulting input_fn came from this <a href=\"https://www.tensorflow.org/versions/r0.11/tutorials/input_fn/index.html#building-the-input-fn\" rel=\"nofollow\">tutorial</a>. As I want to be able to export my trained model on Android, I want to use the <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/api_docs/python/functions_and_classes/shard2/tf.contrib.learn.BaseEstimator.md#tfcontriblearnbaseestimatorexportargs-kwargs-baseestimatorexport\">export</a> function to save my model. Since this function is not part of the SKCompat wrapper, I thought I had to convert my <code>x</code> and <code>y</code> to an <code>input_fn</code> to be compatible with future versions and with the <code>export</code> function itself which requires an <code>input_fn</code>. I still am struggling at understanding how I am suppose to pass an input to get a prediction out of the trained model once it is exported on Android, but I understand if this might be better posted on stackoverflow for support!</p>", "body_text": "@prb12 Thanks for the feedback. My training_input_fn is only called once for fit and once for evaluate. However, if I add an print statement with and increasing integer in  run_feeds_iter mentioned earlier, it just prints, ad infinitum, which leads me to believe that @gilberthendry might be right about the exception never being raised.\n@gilberthendry Thanks for the clarification. I tried passing \"max_steps=1\" to evaluate, but the argument does not exist for evaluate. Also, I believe you may be right about the exception never being raised. What is the proper way of raising that exception in an input_fn? And the strangest, why does my training ( fit function) works while it fails on predict and evaluate ... They are using the same input_fn, with the exception of the data used being different. There is something I am missing here...\nOn a side note, I was using x and y inputs before, but now I get a Warning message saying the x= and y= inputs will be deprecated and to use input_fn instead (or SKCompat). The resulting input_fn came from this tutorial. As I want to be able to export my trained model on Android, I want to use the export function to save my model. Since this function is not part of the SKCompat wrapper, I thought I had to convert my x and y to an input_fn to be compatible with future versions and with the export function itself which requires an input_fn. I still am struggling at understanding how I am suppose to pass an input to get a prediction out of the trained model once it is exported on Android, but I understand if this might be better posted on stackoverflow for support!", "body": "@prb12 Thanks for the feedback. My `training_input_fn` is only called once for fit and once for evaluate. However, if I add an print statement with and increasing integer in  `run_feeds_iter` mentioned earlier, it just prints, _ad infinitum_, which leads me to believe that @gilberthendry might be right about the exception never being raised.\r\n\r\n@gilberthendry Thanks for the clarification. I tried passing \"max_steps=1\" to evaluate, but the argument does not exist for evaluate. Also, I believe you may be right about the exception never being raised. What is the proper way of raising that exception in an `input_fn`? And the strangest, why does my training ( `fit` function) works while it fails on `predict` and `evaluate` ... They are using the same `input_fn`, with the exception of the data used being different. There is something I am missing here... \r\n\r\nOn a side note, I was using x and y inputs before, but now I get a Warning message saying the x= and y= inputs will be deprecated and to use input_fn instead (or SKCompat). The resulting input_fn came from this [tutorial](https://www.tensorflow.org/versions/r0.11/tutorials/input_fn/index.html#building-the-input-fn). As I want to be able to export my trained model on Android, I want to use the [export](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/api_docs/python/functions_and_classes/shard2/tf.contrib.learn.BaseEstimator.md#tfcontriblearnbaseestimatorexportargs-kwargs-baseestimatorexport) function to save my model. Since this function is not part of the SKCompat wrapper, I thought I had to convert my `x` and `y` to an `input_fn` to be compatible with future versions and with the `export` function itself which requires an `input_fn`. I still am struggling at understanding how I am suppose to pass an input to get a prediction out of the trained model once it is exported on Android, but I understand if this might be better posted on stackoverflow for support!"}