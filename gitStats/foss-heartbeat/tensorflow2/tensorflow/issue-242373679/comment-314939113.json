{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/314939113", "html_url": "https://github.com/tensorflow/tensorflow/issues/11456#issuecomment-314939113", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11456", "id": 314939113, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDkzOTExMw==", "user": {"login": "MtDersvan", "id": 7069222, "node_id": "MDQ6VXNlcjcwNjkyMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7069222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MtDersvan", "html_url": "https://github.com/MtDersvan", "followers_url": "https://api.github.com/users/MtDersvan/followers", "following_url": "https://api.github.com/users/MtDersvan/following{/other_user}", "gists_url": "https://api.github.com/users/MtDersvan/gists{/gist_id}", "starred_url": "https://api.github.com/users/MtDersvan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MtDersvan/subscriptions", "organizations_url": "https://api.github.com/users/MtDersvan/orgs", "repos_url": "https://api.github.com/users/MtDersvan/repos", "events_url": "https://api.github.com/users/MtDersvan/events{/privacy}", "received_events_url": "https://api.github.com/users/MtDersvan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-13T00:57:21Z", "updated_at": "2017-07-25T17:29:46Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for a quick reply <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>.<br>\nIf I understand you correctly, here are my steps:</p>\n<p><strong>Container I: port:8000</strong><br>\n1] Launch <code>tf_worker_0</code>:</p>\n<pre><code>sudo NV_GPU=0 nvidia-docker run -it --name tf_worker_0 -p 8000:8000 -v /$(pwd)/repo:/notebooks/repo gcr.io/tensorflow/tensorflow:latest-gpu-py3 /bin/bash\n</code></pre>\n<p>2] Install dependencies and establish a loopback connection:</p>\n<pre><code>apt-get update &amp;&amp; apt-get upgrade &amp;&amp;  apt-get install net-tools\necho $(netstat -nr | grep '^0\\.0\\.0\\.0' | awk '{print $2}') dockerhost &gt;&gt; /etc/hosts\n</code></pre>\n<p>3] In <code>tf_worker_0</code> run and launch a local server:</p>\n<pre><code>import tensorflow as tf\ncluster = tf.train.ClusterSpec({\"local\": [\"dockerhost:8000\", \"dockerhost:8001\"]})\nserver = tf.train.Server(cluster, job_name=\"local\", task_index=0)\n</code></pre>\n<p>Out: <code>... Started server with target: grpc://localhost:8000 ...</code></p>\n<p><strong>Container II: port:8001</strong><br>\n1] Launch <code>tf_worker_1</code>:</p>\n<pre><code>sudo NV_GPU=1 nvidia-docker run -it --name tf_worker_1 -p 8001:8001 -v /$(pwd)/repo:/notebooks/repo gcr.io/tensorflow/tensorflow:latest-gpu-py3 /bin/bash\n</code></pre>\n<p>2] Install dependencies and establish a loopback connection:</p>\n<pre><code>apt-get update &amp;&amp; apt-get upgrade &amp;&amp;  apt-get install net-tools\necho $(netstat -nr | grep '^0\\.0\\.0\\.0' | awk '{print $2}') dockerhost &gt;&gt; /etc/hosts\n</code></pre>\n<p>3] In <code>tf_worker_1</code> launch:</p>\n<pre><code>import tensorflow as tf\ncluster = tf.train.ClusterSpec({\"local\": [\"dockerhost:8000\", \"dockerhost:8001\"]})\nserver = tf.train.Server(cluster, job_name=\"local\", task_index=1)\n</code></pre>\n<p>Out: <code>... Started server with target: grpc://localhost:8001 ...</code></p>\n<p>4] Run an op on a Container I:</p>\n<pre><code>with tf.Session('grpc://dockerhost:8000'.encode()) as sess:\n    print(sess.run(tf.constant(0)))\n</code></pre>\n<p>Out: <code>0</code>.</p>\n<p>So it looks like they reach each other properly.</p>\n<p>Meanwhile the issue persists. Here are the commands to reproduce issue from <code>repr.py</code> toy example:</p>\n<pre><code>CUDA_VISIBLE_DEVICES='' python3 repr.py --ps_hosts=dockerhost:7000 --worker_hosts=dockerhost:8000,dockerhost:8001 --job_name=ps --task_index=0\npython3 repr.py --ps_hosts=dockerhost:7000 --worker_hosts=dockerhost:8000,dockerhost:8001 --job_name=worker --task_index=0\npython3 repr.py --ps_hosts=dockerhost:7000 --worker_hosts=dockerhost:8000,dockerhost:8001 --job_name=worker --task_index=1\n</code></pre>", "body_text": "Thanks for a quick reply @mrry.\nIf I understand you correctly, here are my steps:\nContainer I: port:8000\n1] Launch tf_worker_0:\nsudo NV_GPU=0 nvidia-docker run -it --name tf_worker_0 -p 8000:8000 -v /$(pwd)/repo:/notebooks/repo gcr.io/tensorflow/tensorflow:latest-gpu-py3 /bin/bash\n\n2] Install dependencies and establish a loopback connection:\napt-get update && apt-get upgrade &&  apt-get install net-tools\necho $(netstat -nr | grep '^0\\.0\\.0\\.0' | awk '{print $2}') dockerhost >> /etc/hosts\n\n3] In tf_worker_0 run and launch a local server:\nimport tensorflow as tf\ncluster = tf.train.ClusterSpec({\"local\": [\"dockerhost:8000\", \"dockerhost:8001\"]})\nserver = tf.train.Server(cluster, job_name=\"local\", task_index=0)\n\nOut: ... Started server with target: grpc://localhost:8000 ...\nContainer II: port:8001\n1] Launch tf_worker_1:\nsudo NV_GPU=1 nvidia-docker run -it --name tf_worker_1 -p 8001:8001 -v /$(pwd)/repo:/notebooks/repo gcr.io/tensorflow/tensorflow:latest-gpu-py3 /bin/bash\n\n2] Install dependencies and establish a loopback connection:\napt-get update && apt-get upgrade &&  apt-get install net-tools\necho $(netstat -nr | grep '^0\\.0\\.0\\.0' | awk '{print $2}') dockerhost >> /etc/hosts\n\n3] In tf_worker_1 launch:\nimport tensorflow as tf\ncluster = tf.train.ClusterSpec({\"local\": [\"dockerhost:8000\", \"dockerhost:8001\"]})\nserver = tf.train.Server(cluster, job_name=\"local\", task_index=1)\n\nOut: ... Started server with target: grpc://localhost:8001 ...\n4] Run an op on a Container I:\nwith tf.Session('grpc://dockerhost:8000'.encode()) as sess:\n    print(sess.run(tf.constant(0)))\n\nOut: 0.\nSo it looks like they reach each other properly.\nMeanwhile the issue persists. Here are the commands to reproduce issue from repr.py toy example:\nCUDA_VISIBLE_DEVICES='' python3 repr.py --ps_hosts=dockerhost:7000 --worker_hosts=dockerhost:8000,dockerhost:8001 --job_name=ps --task_index=0\npython3 repr.py --ps_hosts=dockerhost:7000 --worker_hosts=dockerhost:8000,dockerhost:8001 --job_name=worker --task_index=0\npython3 repr.py --ps_hosts=dockerhost:7000 --worker_hosts=dockerhost:8000,dockerhost:8001 --job_name=worker --task_index=1", "body": "Thanks for a quick reply @mrry.\r\nIf I understand you correctly, here are my steps:\r\n\r\n**Container I: port:8000**\r\n1] Launch `tf_worker_0`:\r\n```\r\nsudo NV_GPU=0 nvidia-docker run -it --name tf_worker_0 -p 8000:8000 -v /$(pwd)/repo:/notebooks/repo gcr.io/tensorflow/tensorflow:latest-gpu-py3 /bin/bash\r\n```\r\n2] Install dependencies and establish a loopback connection:\r\n```\r\napt-get update && apt-get upgrade &&  apt-get install net-tools\r\necho $(netstat -nr | grep '^0\\.0\\.0\\.0' | awk '{print $2}') dockerhost >> /etc/hosts\r\n```\r\n3] In `tf_worker_0` run and launch a local server:\r\n```\r\nimport tensorflow as tf\r\ncluster = tf.train.ClusterSpec({\"local\": [\"dockerhost:8000\", \"dockerhost:8001\"]})\r\nserver = tf.train.Server(cluster, job_name=\"local\", task_index=0)\r\n```\r\nOut: `... Started server with target: grpc://localhost:8000 ...`\r\n\r\n**Container II: port:8001**\r\n1] Launch `tf_worker_1`:\r\n```\r\nsudo NV_GPU=1 nvidia-docker run -it --name tf_worker_1 -p 8001:8001 -v /$(pwd)/repo:/notebooks/repo gcr.io/tensorflow/tensorflow:latest-gpu-py3 /bin/bash\r\n```\r\n2] Install dependencies and establish a loopback connection:\r\n```\r\napt-get update && apt-get upgrade &&  apt-get install net-tools\r\necho $(netstat -nr | grep '^0\\.0\\.0\\.0' | awk '{print $2}') dockerhost >> /etc/hosts\r\n```\r\n3] In `tf_worker_1` launch:\r\n```\r\nimport tensorflow as tf\r\ncluster = tf.train.ClusterSpec({\"local\": [\"dockerhost:8000\", \"dockerhost:8001\"]})\r\nserver = tf.train.Server(cluster, job_name=\"local\", task_index=1)\r\n```\r\nOut: `... Started server with target: grpc://localhost:8001 ...`\r\n\r\n4] Run an op on a Container I:\r\n```\r\nwith tf.Session('grpc://dockerhost:8000'.encode()) as sess:\r\n    print(sess.run(tf.constant(0)))\r\n```\r\nOut: `0`. \r\n\r\nSo it looks like they reach each other properly.\r\n\r\nMeanwhile the issue persists. Here are the commands to reproduce issue from `repr.py` toy example:\r\n```\r\nCUDA_VISIBLE_DEVICES='' python3 repr.py --ps_hosts=dockerhost:7000 --worker_hosts=dockerhost:8000,dockerhost:8001 --job_name=ps --task_index=0\r\npython3 repr.py --ps_hosts=dockerhost:7000 --worker_hosts=dockerhost:8000,dockerhost:8001 --job_name=worker --task_index=0\r\npython3 repr.py --ps_hosts=dockerhost:7000 --worker_hosts=dockerhost:8000,dockerhost:8001 --job_name=worker --task_index=1\r\n```"}