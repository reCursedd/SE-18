{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/299278117", "html_url": "https://github.com/tensorflow/tensorflow/issues/9633#issuecomment-299278117", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9633", "id": 299278117, "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTI3ODExNw==", "user": {"login": "concretevitamin", "id": 592670, "node_id": "MDQ6VXNlcjU5MjY3MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/592670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/concretevitamin", "html_url": "https://github.com/concretevitamin", "followers_url": "https://api.github.com/users/concretevitamin/followers", "following_url": "https://api.github.com/users/concretevitamin/following{/other_user}", "gists_url": "https://api.github.com/users/concretevitamin/gists{/gist_id}", "starred_url": "https://api.github.com/users/concretevitamin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/concretevitamin/subscriptions", "organizations_url": "https://api.github.com/users/concretevitamin/orgs", "repos_url": "https://api.github.com/users/concretevitamin/repos", "events_url": "https://api.github.com/users/concretevitamin/events{/privacy}", "received_events_url": "https://api.github.com/users/concretevitamin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-04T18:59:16Z", "updated_at": "2017-05-04T18:59:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for the report <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3949136\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tpet\">@tpet</a>.</p>\n<p>I am submitting a \"fix\" that instead of segfaulting, return a proper error status that requires both operands have matching shapes.  This has always been the assumption in the <code>SparseTensorDenseAddOp</code>, but was <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sparse_tensor_dense_add_op.cc#L56\">not enforced</a>.  The patch should show up in master within a day or two.</p>\n<p>Do you exactly require the functionality of \"sparse + dense -&gt; dense, with dense-to-sparse broadcast\"?  If so, I'd like to mark this as contributions welcome (the current kernels do not support this broadcast pattern).</p>\n<p>However, if you can get away with \"sparse + dense -&gt; sparse, with dense-to-sparse broadcast\", we already have <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/sparse_ops.py#L316\"><code>sparse_dense_cwise_add()</code></a> that does this.  Let us know, and we can expose this function as a public method.</p>", "body_text": "Thanks for the report @tpet.\nI am submitting a \"fix\" that instead of segfaulting, return a proper error status that requires both operands have matching shapes.  This has always been the assumption in the SparseTensorDenseAddOp, but was not enforced.  The patch should show up in master within a day or two.\nDo you exactly require the functionality of \"sparse + dense -> dense, with dense-to-sparse broadcast\"?  If so, I'd like to mark this as contributions welcome (the current kernels do not support this broadcast pattern).\nHowever, if you can get away with \"sparse + dense -> sparse, with dense-to-sparse broadcast\", we already have sparse_dense_cwise_add() that does this.  Let us know, and we can expose this function as a public method.", "body": "Thanks for the report @tpet.\r\n\r\nI am submitting a \"fix\" that instead of segfaulting, return a proper error status that requires both operands have matching shapes.  This has always been the assumption in the `SparseTensorDenseAddOp`, but was [not enforced](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/sparse_tensor_dense_add_op.cc#L56).  The patch should show up in master within a day or two.\r\n\r\nDo you exactly require the functionality of \"sparse + dense -> dense, with dense-to-sparse broadcast\"?  If so, I'd like to mark this as contributions welcome (the current kernels do not support this broadcast pattern).\r\n\r\nHowever, if you can get away with \"sparse + dense -> sparse, with dense-to-sparse broadcast\", we already have [`sparse_dense_cwise_add()`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/sparse_ops.py#L316) that does this.  Let us know, and we can expose this function as a public method."}