{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/299434066", "html_url": "https://github.com/tensorflow/tensorflow/issues/9633#issuecomment-299434066", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9633", "id": 299434066, "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTQzNDA2Ng==", "user": {"login": "tpet", "id": 3949136, "node_id": "MDQ6VXNlcjM5NDkxMzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3949136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tpet", "html_url": "https://github.com/tpet", "followers_url": "https://api.github.com/users/tpet/followers", "following_url": "https://api.github.com/users/tpet/following{/other_user}", "gists_url": "https://api.github.com/users/tpet/gists{/gist_id}", "starred_url": "https://api.github.com/users/tpet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tpet/subscriptions", "organizations_url": "https://api.github.com/users/tpet/orgs", "repos_url": "https://api.github.com/users/tpet/repos", "events_url": "https://api.github.com/users/tpet/events{/privacy}", "received_events_url": "https://api.github.com/users/tpet/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-05T10:40:45Z", "updated_at": "2017-05-05T10:40:45Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=592670\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/concretevitamin\">@concretevitamin</a> I agree raising an exception is much better. The \"sparse + dense -&gt; dense, with dense-to-sparse broadcast\" really seems not that much useful, compared to \"sparse + dense -&gt; sparse, with dense-to-sparse broadcast\". Now I actually don't need this particular thing.</p>\n<p>My initial use case was a bit different. In the process of trying to get some reasonable behavior I happened to find the segfault and created this example.<br>\nMy use case is this:<br>\nD + reduce_sum(a * S)<br>\nwhere D and the result is dense [1 n2 n3 n4]<br>\nS is sparse [n1 n2 n3 n4]<br>\na is dense [n1 1 1 1] and broadcasts to S.<br>\nSo far I hasn't been able to get to some reasonable performance with this.</p>", "body_text": "@concretevitamin I agree raising an exception is much better. The \"sparse + dense -> dense, with dense-to-sparse broadcast\" really seems not that much useful, compared to \"sparse + dense -> sparse, with dense-to-sparse broadcast\". Now I actually don't need this particular thing.\nMy initial use case was a bit different. In the process of trying to get some reasonable behavior I happened to find the segfault and created this example.\nMy use case is this:\nD + reduce_sum(a * S)\nwhere D and the result is dense [1 n2 n3 n4]\nS is sparse [n1 n2 n3 n4]\na is dense [n1 1 1 1] and broadcasts to S.\nSo far I hasn't been able to get to some reasonable performance with this.", "body": "@concretevitamin I agree raising an exception is much better. The \"sparse + dense -> dense, with dense-to-sparse broadcast\" really seems not that much useful, compared to \"sparse + dense -> sparse, with dense-to-sparse broadcast\". Now I actually don't need this particular thing.\r\n\r\nMy initial use case was a bit different. In the process of trying to get some reasonable behavior I happened to find the segfault and created this example.\r\nMy use case is this:\r\nD + reduce_sum(a * S)\r\nwhere D and the result is dense [1 n2 n3 n4]\r\nS is sparse [n1 n2 n3 n4]\r\na is dense [n1 1 1 1] and broadcasts to S.\r\nSo far I hasn't been able to get to some reasonable performance with this."}