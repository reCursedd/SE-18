{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/306815625", "html_url": "https://github.com/tensorflow/tensorflow/issues/9481#issuecomment-306815625", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9481", "id": 306815625, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNjgxNTYyNQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-07T14:39:33Z", "updated_at": "2017-06-07T14:39:33Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It would be great to fix this problem, but I'll first need to clarify what API guarantees we make about character set.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=70511\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/girving\">@girving</a>: Does the fact that we use of <code>'utf-8'</code> as the default encoding in <code>compat.as_bytes()</code> imply that we should treat all user-provided strings as UTF-8 encoded? Do you know if we do anything special on Linux?</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22941064\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/guschmue\">@guschmue</a>: Have you run into this problem with the Windows port? My reading of the API is that we can switch all calls to <code>CreateFileA()</code> (etc.) to <code>CreateFileW()</code> by using <code>MultiByteToWideChar()</code> to translate incoming <code>std::string</code> values into the necessary <code>LPCWSTR</code> argument. However, I tend to assume that handling Unicode properly is \"more complicated than you'd think\", so it would be great to get a second opinion!</p>", "body_text": "It would be great to fix this problem, but I'll first need to clarify what API guarantees we make about character set.\n@girving: Does the fact that we use of 'utf-8' as the default encoding in compat.as_bytes() imply that we should treat all user-provided strings as UTF-8 encoded? Do you know if we do anything special on Linux?\n@guschmue: Have you run into this problem with the Windows port? My reading of the API is that we can switch all calls to CreateFileA() (etc.) to CreateFileW() by using MultiByteToWideChar() to translate incoming std::string values into the necessary LPCWSTR argument. However, I tend to assume that handling Unicode properly is \"more complicated than you'd think\", so it would be great to get a second opinion!", "body": "It would be great to fix this problem, but I'll first need to clarify what API guarantees we make about character set. \r\n\r\n@girving: Does the fact that we use of `'utf-8'` as the default encoding in `compat.as_bytes()` imply that we should treat all user-provided strings as UTF-8 encoded? Do you know if we do anything special on Linux?\r\n\r\n@guschmue: Have you run into this problem with the Windows port? My reading of the API is that we can switch all calls to `CreateFileA()` (etc.) to `CreateFileW()` by using `MultiByteToWideChar()` to translate incoming `std::string` values into the necessary `LPCWSTR` argument. However, I tend to assume that handling Unicode properly is \"more complicated than you'd think\", so it would be great to get a second opinion!"}