{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/118635942", "pull_request_review_id": 40447359, "id": 118635942, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODYzNTk0Mg==", "diff_hunk": "@@ -857,5 +857,88 @@ TEST_F(LiteralUtilTest, ConvertR4) {\n   EXPECT_TRUE(LiteralUtil::Equal(*expected, *converted));\n }\n \n+TEST_F(LiteralUtilTest, ConvertIfTypesMatch) {\n+  // clang-format off\n+auto s8 = LiteralUtil::CreateR4WithLayout<int8>({{\n+    {{10, 0, 12, 0}, {0, 15, 0, 17}},\n+    {{0, 19, 0, 21}, {22, 0, 24, 0}},\n+    {{26, 0, 28, 0}, {0, 31, 0, 33}},\n+  }}, layout_r4_dim0major_);\n+auto s32 = LiteralUtil::CreateR4WithLayout<int32>({{\n+    {{10, 0, 12, 0}, {0, 15, 0, 17}},\n+    {{0, 19, 0, 21}, {22, 0, 24, 0}},\n+    {{26, 0, 28, 0}, {0, 31, 0, 33}},\n+  }}, layout_r4_dim0major_);\n+auto u32 = LiteralUtil::CreateR4WithLayout<uint32>({{\n+    {{10, 0, 12, 0}, {0, 15, 0, 17}},\n+    {{0, 19, 0, 21}, {22, 0, 24, 0}},\n+    {{26, 0, 28, 0}, {0, 31, 0, 33}},\n+  }}, layout_r4_dim0major_);\n+auto s64 = LiteralUtil::CreateR4WithLayout<int64>({{\n+    {{10, 0, 12, 0}, {0, 15, 0, 17}},\n+    {{0, 19, 0, 21}, {22, 0, 24, 0}},\n+    {{26, 0, 28, 0}, {0, 31, 0, 33}},\n+  }}, layout_r4_dim0major_);\n+auto u64 = LiteralUtil::CreateR4WithLayout<uint64>({{\n+    {{10, 0, 12, 0}, {0, 15, 0, 17}},\n+    {{0, 19, 0, 21}, {22, 0, 24, 0}},\n+    {{26, 0, 28, 0}, {0, 31, 0, 33}},\n+  }}, layout_r4_dim0major_);\n+auto pred = LiteralUtil::CreateR4WithLayout<bool>({{\n+    {{true, false, true, false}, {false, true, false, true}},\n+    {{false, true, false, true}, {true, false, true, false}},\n+    {{true, false, true, false}, {false, true, false, true}},\n+  }}, layout_r4_dim0major_);\n+auto int32_pred = LiteralUtil::CreateR4WithLayout<int32>({{\n+    {{1, 0, 1, 0}, {0, 1, 0, 1}},\n+    {{0, 1, 0, 1}, {1, 0, 1, 0}},\n+    {{1, 0, 1, 0}, {0, 1, 0, 1}},\n+  }}, layout_r4_dim0major_);\n+auto f32 = LiteralUtil::CreateR4WithLayout<float>({{\n+    {{10.0f, 0.0f, 12.0f, 0.0f}, {0.0f, 15.0f, 0.0f, 17.0f}},\n+    {{0.0f, 19.0f, 0.0f, 21.0f}, {22.0f, 0.0f, 24.0f, 0.0f}},\n+    {{26.0f, 0.0f, 28.0f, 0.0f}, {0.0f, 31.0f, 0.0f, 33.0f}},\n+  }}, layout_r4_dim0major_);\n+auto f64 = LiteralUtil::CreateR4WithLayout<double>({{\n+    {{10.0, 0.0, 12.0, 0.0}, {0.0, 15.0, 0.0, 17.0}},\n+    {{0.0, 19.0, 0.0, 21.0}, {22.0, 0.0, 24.0, 0.0}},\n+    {{26.0, 0.0, 28.0, 0.0}, {0.0, 31.0, 0.0, 33.0}},\n+  }}, layout_r4_dim0major_);\n+  // clang-format on\n+  std::unique_ptr<Literal> conv;\n+\n+  conv = LiteralUtil::ConvertIfSrcTypeMatches(*s8, U32).ConsumeValueOrDie();\n+  EXPECT_TRUE(LiteralUtil::Equal(*conv, *u32));\n+\n+  conv = LiteralUtil::ConvertIfSrcTypeMatches(*s8, S32).ConsumeValueOrDie();\n+  EXPECT_TRUE(LiteralUtil::Equal(*conv, *s32));\n+\n+  conv = LiteralUtil::ConvertIfSrcTypeMatches(*s8, U64).ConsumeValueOrDie();\n+  EXPECT_TRUE(LiteralUtil::Equal(*conv, *u64));\n+\n+  conv = LiteralUtil::ConvertIfSrcTypeMatches(*s8, S64).ConsumeValueOrDie();\n+  EXPECT_TRUE(LiteralUtil::Equal(*conv, *s64));\n+\n+  conv = LiteralUtil::ConvertIfSrcTypeMatches(*s8, PRED).ConsumeValueOrDie();\n+  EXPECT_TRUE(LiteralUtil::Equal(*conv, *pred));\n+\n+  conv = LiteralUtil::ConvertIfSrcTypeMatches(*pred, S32).ConsumeValueOrDie();\n+  EXPECT_TRUE(LiteralUtil::Equal(*conv, *int32_pred));\n+\n+  conv = LiteralUtil::ConvertIfSrcTypeMatches(*f32, S32).ConsumeValueOrDie();\n+  EXPECT_TRUE(LiteralUtil::Equal(*conv, *s32));\n+\n+  conv = LiteralUtil::ConvertIfSrcTypeMatches(*f64, S32).ConsumeValueOrDie();\n+  EXPECT_TRUE(LiteralUtil::Equal(*conv, *s32));\n+\n+  conv = LiteralUtil::ConvertIfSrcTypeMatches(*s32, F32).ConsumeValueOrDie();\n+  EXPECT_TRUE(LiteralUtil::Equal(*conv, *f32));\n+\n+  EXPECT_FALSE(LiteralUtil::ConvertIfSrcTypeMatches(*s32, TUPLE).ok());", "path": "tensorflow/compiler/xla/literal_util_test.cc", "position": null, "original_position": 81, "commit_id": "3de19e7c277174de7d3917d2a77c3e02a89d7193", "original_commit_id": "9a89c1c4421b4706e988d526fbcc74f2991e4067", "user": {"login": "DavidNorman", "id": 606831, "node_id": "MDQ6VXNlcjYwNjgzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/606831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidNorman", "html_url": "https://github.com/DavidNorman", "followers_url": "https://api.github.com/users/DavidNorman/followers", "following_url": "https://api.github.com/users/DavidNorman/following{/other_user}", "gists_url": "https://api.github.com/users/DavidNorman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidNorman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidNorman/subscriptions", "organizations_url": "https://api.github.com/users/DavidNorman/orgs", "repos_url": "https://api.github.com/users/DavidNorman/repos", "events_url": "https://api.github.com/users/DavidNorman/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidNorman/received_events", "type": "User", "site_admin": false}, "body": "Oh.  I can only find this in the source base:\r\n```\r\n// There are no EXPECT_NOT_OK/ASSERT_NOT_OK macros since they would not\r\n// provide much value (when they fail, they would just print the OK status\r\n// which conveys no more information than EXPECT_FALSE(status.ok());\r\n```", "created_at": "2017-05-26T05:25:58Z", "updated_at": "2017-06-09T16:07:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10164#discussion_r118635942", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10164", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/118635942"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10164#discussion_r118635942"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10164"}}, "body_html": "<p>Oh.  I can only find this in the source base:</p>\n<pre><code>// There are no EXPECT_NOT_OK/ASSERT_NOT_OK macros since they would not\n// provide much value (when they fail, they would just print the OK status\n// which conveys no more information than EXPECT_FALSE(status.ok());\n</code></pre>", "body_text": "Oh.  I can only find this in the source base:\n// There are no EXPECT_NOT_OK/ASSERT_NOT_OK macros since they would not\n// provide much value (when they fail, they would just print the OK status\n// which conveys no more information than EXPECT_FALSE(status.ok());", "in_reply_to_id": 118545569}