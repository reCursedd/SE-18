{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16464", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16464/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16464/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16464/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16464", "id": 291975834, "node_id": "MDU6SXNzdWUyOTE5NzU4MzQ=", "number": 16464, "title": "AssignAddVariableOp has no output", "user": {"login": "is8ac", "id": 8010041, "node_id": "MDQ6VXNlcjgwMTAwNDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/8010041?v=4", "gravatar_id": "", "url": "https://api.github.com/users/is8ac", "html_url": "https://github.com/is8ac", "followers_url": "https://api.github.com/users/is8ac/followers", "following_url": "https://api.github.com/users/is8ac/following{/other_user}", "gists_url": "https://api.github.com/users/is8ac/gists{/gist_id}", "starred_url": "https://api.github.com/users/is8ac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/is8ac/subscriptions", "organizations_url": "https://api.github.com/users/is8ac/orgs", "repos_url": "https://api.github.com/users/is8ac/repos", "events_url": "https://api.github.com/users/is8ac/events{/privacy}", "received_events_url": "https://api.github.com/users/is8ac/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 284443156, "node_id": "MDU6TGFiZWwyODQ0NDMxNTY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:docs", "name": "type:docs", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-01-26T17:33:42Z", "updated_at": "2018-02-01T06:41:53Z", "closed_at": "2018-02-01T06:41:53Z", "author_association": "NONE", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Arch Linux</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.5.0-rc1</li>\n<li><strong>Python version</strong>: NA (Using Go bindings)</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.9.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 7.2.1</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.1 / 7.0</li>\n<li><strong>GPU model and memory</strong>: GTX 1060 6GB</li>\n<li><strong>Exact command to reproduce</strong>: See below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>According to the docs, AssignAddVariableOp \"Outputs the incremented value, which can be used to totally order the increments to this variable.\". Without this feature, I get non deterministic behavior when reading the value of the variable at the same time as I update it. However, at least in the Go bindings, it returns an operation which has no outputs. I can work around this problem by using two calls to <code>sess.Run()</code>, but this is inelegant.</p>\n<h3>Source code / logs</h3>\n<pre><code>package main\n\nimport (\n\t\"fmt\"\n\n\ttf \"github.com/tensorflow/tensorflow/tensorflow/go\"\n\t\"github.com/tensorflow/tensorflow/tensorflow/go/op\"\n)\n\nfunc main() {\n\ts := op.NewScope()\n\tvalue1 := op.Const(s.SubScope(\"zero\"), float32(0))\n\tvalue2 := op.Const(s, float32(3.1415))\n\thandle := op.VarHandleOp(s, tf.Float, tf.ScalarShape())\n\tinit := op.AssignVariableOp(s, handle, value1)\n\tupdate := op.AssignAddVariableOp(s, handle, value2)\n\tfmt.Println(\"NumOutputs:\", update.NumOutputs())\n\tgraph, err := s.Finalize()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsess, err := tf.NewSession(graph, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t_, err = sess.Run(nil, nil, []*tf.Operation{init})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t_, err = sess.Run(nil, []tf.Output{update.Output(0)}, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n</code></pre>\n<pre><code>$ go run assign_demo.go \nNumOutputs: 0\npanic: Tried to fetch data for 'AssignAddVariableOp:0', which produces no output.  To run to a node but not fetch any data, pass 'AssignAddVariableOp:0' as an argument to the 'target_node_names' argument of the Session::Run API.\n\ngoroutine 1 [running]:\nmain.main()\n\t/home/isaac/go/src/github.com/is8ac/gotf/assign_demo.go:32 +0x448\nexit status 2\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): 1.5.0-rc1\nPython version: NA (Using Go bindings)\nBazel version (if compiling from source): 0.9.0\nGCC/Compiler version (if compiling from source): 7.2.1\nCUDA/cuDNN version: 9.1 / 7.0\nGPU model and memory: GTX 1060 6GB\nExact command to reproduce: See below\n\nDescribe the problem\nAccording to the docs, AssignAddVariableOp \"Outputs the incremented value, which can be used to totally order the increments to this variable.\". Without this feature, I get non deterministic behavior when reading the value of the variable at the same time as I update it. However, at least in the Go bindings, it returns an operation which has no outputs. I can work around this problem by using two calls to sess.Run(), but this is inelegant.\nSource code / logs\npackage main\n\nimport (\n\t\"fmt\"\n\n\ttf \"github.com/tensorflow/tensorflow/tensorflow/go\"\n\t\"github.com/tensorflow/tensorflow/tensorflow/go/op\"\n)\n\nfunc main() {\n\ts := op.NewScope()\n\tvalue1 := op.Const(s.SubScope(\"zero\"), float32(0))\n\tvalue2 := op.Const(s, float32(3.1415))\n\thandle := op.VarHandleOp(s, tf.Float, tf.ScalarShape())\n\tinit := op.AssignVariableOp(s, handle, value1)\n\tupdate := op.AssignAddVariableOp(s, handle, value2)\n\tfmt.Println(\"NumOutputs:\", update.NumOutputs())\n\tgraph, err := s.Finalize()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsess, err := tf.NewSession(graph, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t_, err = sess.Run(nil, nil, []*tf.Operation{init})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t_, err = sess.Run(nil, []tf.Output{update.Output(0)}, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n$ go run assign_demo.go \nNumOutputs: 0\npanic: Tried to fetch data for 'AssignAddVariableOp:0', which produces no output.  To run to a node but not fetch any data, pass 'AssignAddVariableOp:0' as an argument to the 'target_node_names' argument of the Session::Run API.\n\ngoroutine 1 [running]:\nmain.main()\n\t/home/isaac/go/src/github.com/is8ac/gotf/assign_demo.go:32 +0x448\nexit status 2", "body": "\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Arch Linux\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: 1.5.0-rc1\r\n- **Python version**: NA (Using Go bindings)\r\n- **Bazel version (if compiling from source)**: 0.9.0\r\n- **GCC/Compiler version (if compiling from source)**: 7.2.1\r\n- **CUDA/cuDNN version**: 9.1 / 7.0\r\n- **GPU model and memory**: GTX 1060 6GB\r\n- **Exact command to reproduce**: See below\r\n\r\n\r\n### Describe the problem\r\nAccording to the docs, AssignAddVariableOp \"Outputs the incremented value, which can be used to totally order the increments to this variable.\". Without this feature, I get non deterministic behavior when reading the value of the variable at the same time as I update it. However, at least in the Go bindings, it returns an operation which has no outputs. I can work around this problem by using two calls to `sess.Run()`, but this is inelegant.\r\n\r\n### Source code / logs\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\r\n\ttf \"github.com/tensorflow/tensorflow/tensorflow/go\"\r\n\t\"github.com/tensorflow/tensorflow/tensorflow/go/op\"\r\n)\r\n\r\nfunc main() {\r\n\ts := op.NewScope()\r\n\tvalue1 := op.Const(s.SubScope(\"zero\"), float32(0))\r\n\tvalue2 := op.Const(s, float32(3.1415))\r\n\thandle := op.VarHandleOp(s, tf.Float, tf.ScalarShape())\r\n\tinit := op.AssignVariableOp(s, handle, value1)\r\n\tupdate := op.AssignAddVariableOp(s, handle, value2)\r\n\tfmt.Println(\"NumOutputs:\", update.NumOutputs())\r\n\tgraph, err := s.Finalize()\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tsess, err := tf.NewSession(graph, nil)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\t_, err = sess.Run(nil, nil, []*tf.Operation{init})\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\t_, err = sess.Run(nil, []tf.Output{update.Output(0)}, nil)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n```\r\n```\r\n$ go run assign_demo.go \r\nNumOutputs: 0\r\npanic: Tried to fetch data for 'AssignAddVariableOp:0', which produces no output.  To run to a node but not fetch any data, pass 'AssignAddVariableOp:0' as an argument to the 'target_node_names' argument of the Session::Run API.\r\n\r\ngoroutine 1 [running]:\r\nmain.main()\r\n\t/home/isaac/go/src/github.com/is8ac/gotf/assign_demo.go:32 +0x448\r\nexit status 2\r\n```"}