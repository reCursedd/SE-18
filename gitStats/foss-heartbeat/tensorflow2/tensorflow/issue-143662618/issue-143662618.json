{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1651", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1651/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1651/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1651/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1651", "id": 143662618, "node_id": "MDU6SXNzdWUxNDM2NjI2MTg=", "number": 1651, "title": "Support for inter-example-dependent labels?", "user": {"login": "eriophora", "id": 6423093, "node_id": "MDQ6VXNlcjY0MjMwOTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6423093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eriophora", "html_url": "https://github.com/eriophora", "followers_url": "https://api.github.com/users/eriophora/followers", "following_url": "https://api.github.com/users/eriophora/following{/other_user}", "gists_url": "https://api.github.com/users/eriophora/gists{/gist_id}", "starred_url": "https://api.github.com/users/eriophora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eriophora/subscriptions", "organizations_url": "https://api.github.com/users/eriophora/orgs", "repos_url": "https://api.github.com/users/eriophora/repos", "events_url": "https://api.github.com/users/eriophora/events{/privacy}", "received_events_url": "https://api.github.com/users/eriophora/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-03-26T04:34:54Z", "updated_at": "2016-03-28T18:56:43Z", "closed_at": "2016-03-28T18:56:43Z", "author_association": "NONE", "body_html": "<p>This is likely the wrong place for this, but I've run into a dead end on other websites.</p>\n<p>I have a somewhat unusual learning task: the \"labels\" for my examples (i.e., images) are actually relations between specific images. For instance, suppose each batch consists of 2*n images, where the pair (i, j) has label 1 while the pair (j, i) has label -1. Suppose most (i.e., the vast majority) pairs possible from the set of images lack any label, and as such random sampling will only rarely yield even a single relation to train on. Therefore, in this example, each batch consists of a set 2N images, N pairs of which are known to have some relation.</p>\n<p>TensorFlow is so flexible it's easy to design a net that can compute the appropriate loss function. However, creating the input is problematic,requiring many queue objects (why do readers only accept queues in TensorFlow instead of outputs from previous nodes?!). Assuming that I have some set of files which are serialized examples, each a list of the form {file1: &lt;...&gt;, file2: &lt;...&gt;, label: &lt;...&gt;}, is there a simple way to serve them to the net as a tensor of shape 2N * W * H * C (with image i and image i + 1 belonging to a single relation, where i is (0, 2, 4, 6, ...) i.e., [relation_n_image_1, relation_n_image_2, relation_m_image_1, ...])? My current creation, individual components of which work but works as a whole only in theory, employs 5 queue objects of various kinds and does not shuffle perfectly.</p>\n<p>Will more flexible readers be implemented in the future, or is there something I'm missing?</p>", "body_text": "This is likely the wrong place for this, but I've run into a dead end on other websites.\nI have a somewhat unusual learning task: the \"labels\" for my examples (i.e., images) are actually relations between specific images. For instance, suppose each batch consists of 2*n images, where the pair (i, j) has label 1 while the pair (j, i) has label -1. Suppose most (i.e., the vast majority) pairs possible from the set of images lack any label, and as such random sampling will only rarely yield even a single relation to train on. Therefore, in this example, each batch consists of a set 2N images, N pairs of which are known to have some relation.\nTensorFlow is so flexible it's easy to design a net that can compute the appropriate loss function. However, creating the input is problematic,requiring many queue objects (why do readers only accept queues in TensorFlow instead of outputs from previous nodes?!). Assuming that I have some set of files which are serialized examples, each a list of the form {file1: <...>, file2: <...>, label: <...>}, is there a simple way to serve them to the net as a tensor of shape 2N * W * H * C (with image i and image i + 1 belonging to a single relation, where i is (0, 2, 4, 6, ...) i.e., [relation_n_image_1, relation_n_image_2, relation_m_image_1, ...])? My current creation, individual components of which work but works as a whole only in theory, employs 5 queue objects of various kinds and does not shuffle perfectly.\nWill more flexible readers be implemented in the future, or is there something I'm missing?", "body": "This is likely the wrong place for this, but I've run into a dead end on other websites.\n\nI have a somewhat unusual learning task: the \"labels\" for my examples (i.e., images) are actually relations between specific images. For instance, suppose each batch consists of 2*n images, where the pair (i, j) has label 1 while the pair (j, i) has label -1. Suppose most (i.e., the vast majority) pairs possible from the set of images lack any label, and as such random sampling will only rarely yield even a single relation to train on. Therefore, in this example, each batch consists of a set 2N images, N pairs of which are known to have some relation.\n\nTensorFlow is so flexible it's easy to design a net that can compute the appropriate loss function. However, creating the input is problematic,requiring many queue objects (why do readers only accept queues in TensorFlow instead of outputs from previous nodes?!). Assuming that I have some set of files which are serialized examples, each a list of the form {file1: <...>, file2: <...>, label: <...>}, is there a simple way to serve them to the net as a tensor of shape 2N \\* W \\* H \\* C (with image i and image i + 1 belonging to a single relation, where i is (0, 2, 4, 6, ...) i.e., [relation_n_image_1, relation_n_image_2, relation_m_image_1, ...])? My current creation, individual components of which work but works as a whole only in theory, employs 5 queue objects of various kinds and does not shuffle perfectly.\n\nWill more flexible readers be implemented in the future, or is there something I'm missing?\n"}