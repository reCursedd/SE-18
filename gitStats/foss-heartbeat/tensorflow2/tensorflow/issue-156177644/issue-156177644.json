{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2467", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2467/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2467/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2467/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2467", "id": 156177644, "node_id": "MDU6SXNzdWUxNTYxNzc2NDQ=", "number": 2467, "title": "conv3d_backprop_input", "user": {"login": "daeyun", "id": 1250682, "node_id": "MDQ6VXNlcjEyNTA2ODI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1250682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daeyun", "html_url": "https://github.com/daeyun", "followers_url": "https://api.github.com/users/daeyun/followers", "following_url": "https://api.github.com/users/daeyun/following{/other_user}", "gists_url": "https://api.github.com/users/daeyun/gists{/gist_id}", "starred_url": "https://api.github.com/users/daeyun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daeyun/subscriptions", "organizations_url": "https://api.github.com/users/daeyun/orgs", "repos_url": "https://api.github.com/users/daeyun/repos", "events_url": "https://api.github.com/users/daeyun/events{/privacy}", "received_events_url": "https://api.github.com/users/daeyun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "mjanusz", "id": 328443, "node_id": "MDQ6VXNlcjMyODQ0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/328443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjanusz", "html_url": "https://github.com/mjanusz", "followers_url": "https://api.github.com/users/mjanusz/followers", "following_url": "https://api.github.com/users/mjanusz/following{/other_user}", "gists_url": "https://api.github.com/users/mjanusz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjanusz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjanusz/subscriptions", "organizations_url": "https://api.github.com/users/mjanusz/orgs", "repos_url": "https://api.github.com/users/mjanusz/repos", "events_url": "https://api.github.com/users/mjanusz/events{/privacy}", "received_events_url": "https://api.github.com/users/mjanusz/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mjanusz", "id": 328443, "node_id": "MDQ6VXNlcjMyODQ0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/328443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjanusz", "html_url": "https://github.com/mjanusz", "followers_url": "https://api.github.com/users/mjanusz/followers", "following_url": "https://api.github.com/users/mjanusz/following{/other_user}", "gists_url": "https://api.github.com/users/mjanusz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjanusz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjanusz/subscriptions", "organizations_url": "https://api.github.com/users/mjanusz/orgs", "repos_url": "https://api.github.com/users/mjanusz/repos", "events_url": "https://api.github.com/users/mjanusz/events{/privacy}", "received_events_url": "https://api.github.com/users/mjanusz/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2016-05-22T22:43:13Z", "updated_at": "2017-03-08T18:25:44Z", "closed_at": "2017-03-08T18:25:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'm using <code>conv3d_backprop_input</code> to implement a 3d version of <code>tf.nn.conv2d_transpose</code>. Unlike <code>conv2d_backprop_input</code>, <code>conv3d_backprop_input</code> requires an <code>input</code> tensor (rather than just <code>input_shape</code>), and this seems a little inconsistent. I don't have the input tensor because it is actually the deconvolution output in this case. My current solution is to create a dummy tensor like the following:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">conv3d_transpose</span>(<span class=\"pl-smi\">value</span>, <span class=\"pl-smi\">filter</span>, <span class=\"pl-smi\">output_shape</span>, <span class=\"pl-smi\">strides</span>, <span class=\"pl-smi\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>SAME<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">name</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n  dummy_tensor <span class=\"pl-k\">=</span> tf.zeros(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>output_shape, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>value.dtype)\n\n  deconv <span class=\"pl-k\">=</span> tf.nn.conv3d_backprop_input(<span class=\"pl-v\">input</span><span class=\"pl-k\">=</span>dummy_tensor, <span class=\"pl-v\">filter</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">filter</span>,\n      <span class=\"pl-v\">out_backprop</span><span class=\"pl-k\">=</span>value, <span class=\"pl-v\">strides</span><span class=\"pl-k\">=</span>strides, <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span>padding, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>name)\n\n  <span class=\"pl-k\">return</span> deconv</pre></div>\n<p>So my question is, in <code>conv3d_backprop_input</code>, do the values of <code>input</code> actually matter or is it only used to infer the shape of the output <code>deconv</code>?</p>", "body_text": "I'm using conv3d_backprop_input to implement a 3d version of tf.nn.conv2d_transpose. Unlike conv2d_backprop_input, conv3d_backprop_input requires an input tensor (rather than just input_shape), and this seems a little inconsistent. I don't have the input tensor because it is actually the deconvolution output in this case. My current solution is to create a dummy tensor like the following:\ndef conv3d_transpose(value, filter, output_shape, strides, padding='SAME', name=None):\n  dummy_tensor = tf.zeros(shape=output_shape, dtype=value.dtype)\n\n  deconv = tf.nn.conv3d_backprop_input(input=dummy_tensor, filter=filter,\n      out_backprop=value, strides=strides, padding=padding, name=name)\n\n  return deconv\nSo my question is, in conv3d_backprop_input, do the values of input actually matter or is it only used to infer the shape of the output deconv?", "body": "I'm using `conv3d_backprop_input` to implement a 3d version of `tf.nn.conv2d_transpose`. Unlike `conv2d_backprop_input`, `conv3d_backprop_input` requires an `input` tensor (rather than just `input_shape`), and this seems a little inconsistent. I don't have the input tensor because it is actually the deconvolution output in this case. My current solution is to create a dummy tensor like the following:\n\n``` python\ndef conv3d_transpose(value, filter, output_shape, strides, padding='SAME', name=None):\n  dummy_tensor = tf.zeros(shape=output_shape, dtype=value.dtype)\n\n  deconv = tf.nn.conv3d_backprop_input(input=dummy_tensor, filter=filter,\n      out_backprop=value, strides=strides, padding=padding, name=name)\n\n  return deconv\n```\n\nSo my question is, in `conv3d_backprop_input`, do the values of `input` actually matter or is it only used to infer the shape of the output `deconv`?\n"}