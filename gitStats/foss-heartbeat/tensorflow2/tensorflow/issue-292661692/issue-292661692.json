{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16572", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16572/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16572/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16572/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16572", "id": 292661692, "node_id": "MDU6SXNzdWUyOTI2NjE2OTI=", "number": 16572, "title": "tf.dynamic_placeholder gives inconsistent results in Tensorflow 1.5", "user": {"login": "PuchatekwSzortach", "id": 13689310, "node_id": "MDQ6VXNlcjEzNjg5MzEw", "avatar_url": "https://avatars2.githubusercontent.com/u/13689310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PuchatekwSzortach", "html_url": "https://github.com/PuchatekwSzortach", "followers_url": "https://api.github.com/users/PuchatekwSzortach/followers", "following_url": "https://api.github.com/users/PuchatekwSzortach/following{/other_user}", "gists_url": "https://api.github.com/users/PuchatekwSzortach/gists{/gist_id}", "starred_url": "https://api.github.com/users/PuchatekwSzortach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PuchatekwSzortach/subscriptions", "organizations_url": "https://api.github.com/users/PuchatekwSzortach/orgs", "repos_url": "https://api.github.com/users/PuchatekwSzortach/repos", "events_url": "https://api.github.com/users/PuchatekwSzortach/events{/privacy}", "received_events_url": "https://api.github.com/users/PuchatekwSzortach/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "itsmeolivia", "id": 2469592, "node_id": "MDQ6VXNlcjI0Njk1OTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2469592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itsmeolivia", "html_url": "https://github.com/itsmeolivia", "followers_url": "https://api.github.com/users/itsmeolivia/followers", "following_url": "https://api.github.com/users/itsmeolivia/following{/other_user}", "gists_url": "https://api.github.com/users/itsmeolivia/gists{/gist_id}", "starred_url": "https://api.github.com/users/itsmeolivia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itsmeolivia/subscriptions", "organizations_url": "https://api.github.com/users/itsmeolivia/orgs", "repos_url": "https://api.github.com/users/itsmeolivia/repos", "events_url": "https://api.github.com/users/itsmeolivia/events{/privacy}", "received_events_url": "https://api.github.com/users/itsmeolivia/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "itsmeolivia", "id": 2469592, "node_id": "MDQ6VXNlcjI0Njk1OTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2469592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itsmeolivia", "html_url": "https://github.com/itsmeolivia", "followers_url": "https://api.github.com/users/itsmeolivia/followers", "following_url": "https://api.github.com/users/itsmeolivia/following{/other_user}", "gists_url": "https://api.github.com/users/itsmeolivia/gists{/gist_id}", "starred_url": "https://api.github.com/users/itsmeolivia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itsmeolivia/subscriptions", "organizations_url": "https://api.github.com/users/itsmeolivia/orgs", "repos_url": "https://api.github.com/users/itsmeolivia/repos", "events_url": "https://api.github.com/users/itsmeolivia/events{/privacy}", "received_events_url": "https://api.github.com/users/itsmeolivia/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-01-30T05:56:58Z", "updated_at": "2018-09-28T20:45:56Z", "closed_at": "2018-09-28T20:45:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'm seeing inconsistencies when calling tf.dynamic_partition(...) with Tensorflow 1.5.</p>\n<p>I'm using tf.dynamic_partition(...) to select rows from two tensors. First is a 1D tensor of spare logits, second is a 2D tensor of one-hot encoded labels. My selector is a 1D tensor with entries made of 0s and 1s.</p>\n<p>Say <code>matches_mask</code> has shape (268800,) and 320 of its elements are set to 1, rest are 0.<br>\n<code>scalar_labels</code> has shape(268800,) and <code>one_hot_encoded_logits</code> has shape (268800, 2).</p>\n<p>The expected behaviour for</p>\n<div class=\"highlight highlight-source-python\"><pre>_, selected_scalar_labels <span class=\"pl-k\">=</span> tf.dynamic_partition(scalar_labels, matches_mask, <span class=\"pl-v\">num_partitions</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\n_, selected_one_hot_encoded_logits <span class=\"pl-k\">=</span> tf.dynamic_partition(one_hot_encoded_logits, matches_mask, <span class=\"pl-v\">num_partitions</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\n</pre></div>\n<p>is that <code>selected_scalar_labels</code> has shape (320, ) and <code>selected_one_hot_encoded_logits</code> has shape (320, 2).</p>\n<p>This code works perfectly fine on two machines, one running Ubuntu 16.4, Tensorflow 1.3 and Tensorflow 1.4 (tested both versions) and CUDA 8 and the other running Ubuntu 16.4, Tensorflow 1.4 and CUDA 8.<br>\nHowever today I upgraded first machine to Ubuntu 16.4, Tensorflow 1.5 and CUDA 9 and above breaks.<br>\nFor some reason while <code>selected_scalar_labels</code> are as expected, <code>selected_one_hot_encoded_logits</code> have some strange shapes, such as (268352, 2).</p>\n<p>I tried writing a minimal test script, such as</p>\n<div class=\"highlight highlight-source-python\"><pre>labels_placeholder <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>])\nlogits_placeholder <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">2</span>])\n\nmask_placeholder <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>])\n\n_, selected_labels_op <span class=\"pl-k\">=</span> tf.dynamic_partition(labels_placeholder, mask_placeholder, <span class=\"pl-v\">num_partitions</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\n_, selected_logits_op <span class=\"pl-k\">=</span> tf.dynamic_partition(logits_placeholder, mask_placeholder, <span class=\"pl-v\">num_partitions</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> session:\n\n    <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100</span>):\n\n        <span class=\"pl-c1\">print</span>()\n\n        size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">268800</span>\n\n        labels <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>size)\n        logits <span class=\"pl-k\">=</span> np.random.uniform(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>(size, <span class=\"pl-c1\">2</span>))\n\n        mask <span class=\"pl-k\">=</span> np.random.binomial(<span class=\"pl-c1\">1</span>, np.random.uniform(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>), size)\n\n        feed_dictionary <span class=\"pl-k\">=</span> {labels_placeholder: labels, logits_placeholder: logits, mask_placeholder: mask}\n\n        selected_labels, selected_logits <span class=\"pl-k\">=</span> session.run([selected_labels_op, selected_logits_op], feed_dictionary)\n\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>selected_labels: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(selected_labels.shape))\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>selected_logits: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(selected_logits.shape))</pre></div>\n<p>but that gave correct results.<br>\nProblem occurs in a more complicated pipeline that is a part of Single Shot Detector's loss computations.<br>\nUnfortunately computing <code>matches_mask</code> is a complex task that depends on image being used on input and SSD configuration, so I can't really provide here a complete test case without posting a few hundreds lines of code that isn't for public use + images. <code>matches_mask</code> itself is very simple though, just a 1D tensor of 0s and 1s.</p>\n<p>I appreciate that without presenting a test case that fails it's unlikely anyone will look into this problem, but I decided to post the issue in case someone else sees similar behaviour - from my point of view it seems to be a new bug introduced by Tensorflow 1.5 or its dependencies.</p>\n<p>I have of course double checked that my<code>matches_mask</code>, <code>scalar_labels</code> and <code>one_hot_encoded_logits</code> have expected dimensions and dtypes before <code>dynamic_partition</code> is called and that <code>matches_mask</code> is made of 0s and 1s only.</p>\n<p>Environments on which code works as expected:</p>\n<ol>\n<li>Ubuntu 16.04, tensorflow 1.3 installed with <code>pip install tensorflow-gpu</code>, CUDA 8.0, cuDNN 6.0, GPU: Tesla V100</li>\n<li>Ubuntu 16.04, tensorflow 1.4 installed with <code>pip install tensorflow-gpu</code>, CUDA 8.0, cuDNN 6.0, GPU: GTX 1080 Ti<br>\ntf.GIT_VERSION: v1.4.0-19-ga52c8d9<br>\ntf.VERSION: 1.4.1</li>\n<li>Ubuntu 16.04, tensorflow 1.4 installed with <code>pip install tensorflow-gpu</code>, CUDA 8.0, cuDNN 6.0, GPU: Tesla V100<br>\ntf.GIT_VERSION: v1.4.0-rc1-11-g130a514<br>\ntf.VERSION: 1.4.0</li>\n</ol>\n<p>Environments on which code fails:<br>\n4) Ubuntu 16.04, tensorflow 1.5 installed with <code>pip install tensorflow-gpu</code>, CUDA 9.0, cuDNN 7.0, GPU: Tesla V100<br>\ntf.GIT_VERSION: v1.5.0-0-g37aa430d84<br>\ntf.VERSION: 1.5.0</p>\n<p>Environments 1, 3 and 4 are the same machine, the only differences are in Tensorflow and CUDA versions and dependencies they install.</p>", "body_text": "I'm seeing inconsistencies when calling tf.dynamic_partition(...) with Tensorflow 1.5.\nI'm using tf.dynamic_partition(...) to select rows from two tensors. First is a 1D tensor of spare logits, second is a 2D tensor of one-hot encoded labels. My selector is a 1D tensor with entries made of 0s and 1s.\nSay matches_mask has shape (268800,) and 320 of its elements are set to 1, rest are 0.\nscalar_labels has shape(268800,) and one_hot_encoded_logits has shape (268800, 2).\nThe expected behaviour for\n_, selected_scalar_labels = tf.dynamic_partition(scalar_labels, matches_mask, num_partitions=2)\n_, selected_one_hot_encoded_logits = tf.dynamic_partition(one_hot_encoded_logits, matches_mask, num_partitions=2)\n\nis that selected_scalar_labels has shape (320, ) and selected_one_hot_encoded_logits has shape (320, 2).\nThis code works perfectly fine on two machines, one running Ubuntu 16.4, Tensorflow 1.3 and Tensorflow 1.4 (tested both versions) and CUDA 8 and the other running Ubuntu 16.4, Tensorflow 1.4 and CUDA 8.\nHowever today I upgraded first machine to Ubuntu 16.4, Tensorflow 1.5 and CUDA 9 and above breaks.\nFor some reason while selected_scalar_labels are as expected, selected_one_hot_encoded_logits have some strange shapes, such as (268352, 2).\nI tried writing a minimal test script, such as\nlabels_placeholder = tf.placeholder(dtype=tf.int32, shape=[None])\nlogits_placeholder = tf.placeholder(dtype=tf.float32, shape=[None, 2])\n\nmask_placeholder = tf.placeholder(dtype=tf.int32, shape=[None])\n\n_, selected_labels_op = tf.dynamic_partition(labels_placeholder, mask_placeholder, num_partitions=2)\n_, selected_logits_op = tf.dynamic_partition(logits_placeholder, mask_placeholder, num_partitions=2)\n\nwith tf.Session() as session:\n\n    for _ in range(100):\n\n        print()\n\n        size = 268800\n\n        labels = np.random.randint(0, 2, size=size)\n        logits = np.random.uniform(0, 1, size=(size, 2))\n\n        mask = np.random.binomial(1, np.random.uniform(0, 1), size)\n\n        feed_dictionary = {labels_placeholder: labels, logits_placeholder: logits, mask_placeholder: mask}\n\n        selected_labels, selected_logits = session.run([selected_labels_op, selected_logits_op], feed_dictionary)\n\n        print(\"selected_labels: {}\".format(selected_labels.shape))\n        print(\"selected_logits: {}\".format(selected_logits.shape))\nbut that gave correct results.\nProblem occurs in a more complicated pipeline that is a part of Single Shot Detector's loss computations.\nUnfortunately computing matches_mask is a complex task that depends on image being used on input and SSD configuration, so I can't really provide here a complete test case without posting a few hundreds lines of code that isn't for public use + images. matches_mask itself is very simple though, just a 1D tensor of 0s and 1s.\nI appreciate that without presenting a test case that fails it's unlikely anyone will look into this problem, but I decided to post the issue in case someone else sees similar behaviour - from my point of view it seems to be a new bug introduced by Tensorflow 1.5 or its dependencies.\nI have of course double checked that mymatches_mask, scalar_labels and one_hot_encoded_logits have expected dimensions and dtypes before dynamic_partition is called and that matches_mask is made of 0s and 1s only.\nEnvironments on which code works as expected:\n\nUbuntu 16.04, tensorflow 1.3 installed with pip install tensorflow-gpu, CUDA 8.0, cuDNN 6.0, GPU: Tesla V100\nUbuntu 16.04, tensorflow 1.4 installed with pip install tensorflow-gpu, CUDA 8.0, cuDNN 6.0, GPU: GTX 1080 Ti\ntf.GIT_VERSION: v1.4.0-19-ga52c8d9\ntf.VERSION: 1.4.1\nUbuntu 16.04, tensorflow 1.4 installed with pip install tensorflow-gpu, CUDA 8.0, cuDNN 6.0, GPU: Tesla V100\ntf.GIT_VERSION: v1.4.0-rc1-11-g130a514\ntf.VERSION: 1.4.0\n\nEnvironments on which code fails:\n4) Ubuntu 16.04, tensorflow 1.5 installed with pip install tensorflow-gpu, CUDA 9.0, cuDNN 7.0, GPU: Tesla V100\ntf.GIT_VERSION: v1.5.0-0-g37aa430d84\ntf.VERSION: 1.5.0\nEnvironments 1, 3 and 4 are the same machine, the only differences are in Tensorflow and CUDA versions and dependencies they install.", "body": "I'm seeing inconsistencies when calling tf.dynamic_partition(...) with Tensorflow 1.5.\r\n\r\nI'm using tf.dynamic_partition(...) to select rows from two tensors. First is a 1D tensor of spare logits, second is a 2D tensor of one-hot encoded labels. My selector is a 1D tensor with entries made of 0s and 1s.\r\n\r\nSay `matches_mask` has shape (268800,) and 320 of its elements are set to 1, rest are 0.\r\n`scalar_labels` has shape(268800,) and `one_hot_encoded_logits` has shape (268800, 2).\r\n\r\nThe expected behaviour for\r\n\r\n```python\r\n_, selected_scalar_labels = tf.dynamic_partition(scalar_labels, matches_mask, num_partitions=2)\r\n_, selected_one_hot_encoded_logits = tf.dynamic_partition(one_hot_encoded_logits, matches_mask, num_partitions=2)\r\n\r\n```\r\n\r\nis that `selected_scalar_labels` has shape (320, ) and `selected_one_hot_encoded_logits` has shape (320, 2).\r\n\r\nThis code works perfectly fine on two machines, one running Ubuntu 16.4, Tensorflow 1.3 and Tensorflow 1.4 (tested both versions) and CUDA 8 and the other running Ubuntu 16.4, Tensorflow 1.4 and CUDA 8.\r\nHowever today I upgraded first machine to Ubuntu 16.4, Tensorflow 1.5 and CUDA 9 and above breaks.\r\nFor some reason while `selected_scalar_labels` are as expected, `selected_one_hot_encoded_logits` have some strange shapes, such as (268352, 2).\r\n\r\nI tried writing a minimal test script, such as \r\n\r\n```python\r\nlabels_placeholder = tf.placeholder(dtype=tf.int32, shape=[None])\r\nlogits_placeholder = tf.placeholder(dtype=tf.float32, shape=[None, 2])\r\n\r\nmask_placeholder = tf.placeholder(dtype=tf.int32, shape=[None])\r\n\r\n_, selected_labels_op = tf.dynamic_partition(labels_placeholder, mask_placeholder, num_partitions=2)\r\n_, selected_logits_op = tf.dynamic_partition(logits_placeholder, mask_placeholder, num_partitions=2)\r\n\r\nwith tf.Session() as session:\r\n\r\n    for _ in range(100):\r\n\r\n        print()\r\n\r\n        size = 268800\r\n\r\n        labels = np.random.randint(0, 2, size=size)\r\n        logits = np.random.uniform(0, 1, size=(size, 2))\r\n\r\n        mask = np.random.binomial(1, np.random.uniform(0, 1), size)\r\n\r\n        feed_dictionary = {labels_placeholder: labels, logits_placeholder: logits, mask_placeholder: mask}\r\n\r\n        selected_labels, selected_logits = session.run([selected_labels_op, selected_logits_op], feed_dictionary)\r\n\r\n        print(\"selected_labels: {}\".format(selected_labels.shape))\r\n        print(\"selected_logits: {}\".format(selected_logits.shape))\r\n```\r\n\r\nbut that gave correct results.\r\nProblem occurs in a more complicated pipeline that is a part of Single Shot Detector's loss computations.\r\nUnfortunately computing `matches_mask` is a complex task that depends on image being used on input and SSD configuration, so I can't really provide here a complete test case without posting a few hundreds lines of code that isn't for public use + images. `matches_mask` itself is very simple though, just a 1D tensor of 0s and 1s.\r\n\r\nI appreciate that without presenting a test case that fails it's unlikely anyone will look into this problem, but I decided to post the issue in case someone else sees similar behaviour - from my point of view it seems to be a new bug introduced by Tensorflow 1.5 or its dependencies.\r\n\r\nI have of course double checked that my`matches_mask`, `scalar_labels` and `one_hot_encoded_logits` have expected dimensions and dtypes before `dynamic_partition` is called and that `matches_mask` is made of 0s and 1s only.\r\n\r\nEnvironments on which code works as expected:\r\n1) Ubuntu 16.04, tensorflow 1.3 installed with `pip install tensorflow-gpu`, CUDA 8.0, cuDNN 6.0, GPU: Tesla V100\r\n2) Ubuntu 16.04, tensorflow 1.4 installed with `pip install tensorflow-gpu`, CUDA 8.0, cuDNN 6.0, GPU: GTX 1080 Ti\r\n\ttf.GIT_VERSION: v1.4.0-19-ga52c8d9\r\n\ttf.VERSION: 1.4.1\r\n3) Ubuntu 16.04, tensorflow 1.4 installed with `pip install tensorflow-gpu`, CUDA 8.0, cuDNN 6.0, GPU: Tesla V100\r\n\ttf.GIT_VERSION: v1.4.0-rc1-11-g130a514\r\n\ttf.VERSION: 1.4.0\r\n\r\nEnvironments on which code fails:\r\n4) Ubuntu 16.04, tensorflow 1.5 installed with `pip install tensorflow-gpu`, CUDA 9.0, cuDNN 7.0, GPU: Tesla V100\r\n\ttf.GIT_VERSION: v1.5.0-0-g37aa430d84\r\n\ttf.VERSION: 1.5.0\r\n\r\nEnvironments 1, 3 and 4 are the same machine, the only differences are in Tensorflow and CUDA versions and dependencies they install."}