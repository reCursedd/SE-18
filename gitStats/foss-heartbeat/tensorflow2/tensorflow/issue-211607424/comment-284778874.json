{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/284778874", "html_url": "https://github.com/tensorflow/tensorflow/issues/8047#issuecomment-284778874", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8047", "id": 284778874, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDc3ODg3NA==", "user": {"login": "j-wilson", "id": 6174242, "node_id": "MDQ6VXNlcjYxNzQyNDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6174242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/j-wilson", "html_url": "https://github.com/j-wilson", "followers_url": "https://api.github.com/users/j-wilson/followers", "following_url": "https://api.github.com/users/j-wilson/following{/other_user}", "gists_url": "https://api.github.com/users/j-wilson/gists{/gist_id}", "starred_url": "https://api.github.com/users/j-wilson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/j-wilson/subscriptions", "organizations_url": "https://api.github.com/users/j-wilson/orgs", "repos_url": "https://api.github.com/users/j-wilson/repos", "events_url": "https://api.github.com/users/j-wilson/events{/privacy}", "received_events_url": "https://api.github.com/users/j-wilson/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-07T16:41:06Z", "updated_at": "2017-03-07T16:41:06Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16824702\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/caisq\">@caisq</a> Any updates regarding this issue? I've tried using <code>offline_analyzer</code> per your suggestion; but, keep running into <code>ValueError: Duplicate node name</code> as in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"202980468\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/7051\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/7051/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/7051\">#7051</a>. Unlike <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"202980468\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/7051\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/7051/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/7051\">#7051</a>, I'm running locally on CPU. The problem seems to stem from repeated calls to <code>sess.run()</code>, where <code>sess</code> is an instance of <code>DumpingDebugWrapperSession</code>; but, I'm not sure how to get around this issue when using <code>tf.get_variable()</code> given that a call to an initializer seems necessary. Included below is a code snippet.</p>\n<pre><code># Dependencies\nimport subprocess\nimport tensorflow as tf\nfrom tempfile import TemporaryDirectory\nfrom tensorflow.python import debug as tf_debug\n\ndump_dir = TemporaryDirectory() #temp. directory for demo\nwith tf.Session() as _sess:\n  # Create 'DumpingDebugWrapperSession' wrapper\n  def watch_fn(fetches, feed_dict):\n    node_name_regex_whitelist = '(watch_[0-9]+)'\n    debug_ops, op_type_regex_whitelist = None, None\n    return debug_ops, node_name_regex_whitelist, op_type_regex_whitelist\n  sess = tf_debug.DumpingDebugWrapperSession(_sess,\n                  dump_dir.name, watch_fn=watch_fn)\n\n  # Declare TensorFlow variables\n  tf_vars = [tf.get_variable('watch_0', shape=[32], dtype='float32'),\n             tf.get_variable('ignore_0', shape=[32], dtype='float32')]\n\n  # Calls sess.run()\n  init_op = tf.global_variables_initializer()\n  sess.run(init_op)\n  # &lt;stuff goes here&gt;\n  fetches = sess.run(tf_vars, feed_dict={})\n\n# Call to offline_analyzer\nargv = ['python3.5', '-m', 'tensorflow.python.debug.cli.offline_analyzer',\n        '--ui_type', 'readline', '--dump_dir', dump_dir.name]\ncmdline = \" \".join(argv)\ntry:\n  proc = subprocess.Popen(cmdline, shell=True)\n  proc.wait()\nfinally:\n  dump_dir.cleanup()\n</code></pre>", "body_text": "@caisq Any updates regarding this issue? I've tried using offline_analyzer per your suggestion; but, keep running into ValueError: Duplicate node name as in #7051. Unlike #7051, I'm running locally on CPU. The problem seems to stem from repeated calls to sess.run(), where sess is an instance of DumpingDebugWrapperSession; but, I'm not sure how to get around this issue when using tf.get_variable() given that a call to an initializer seems necessary. Included below is a code snippet.\n# Dependencies\nimport subprocess\nimport tensorflow as tf\nfrom tempfile import TemporaryDirectory\nfrom tensorflow.python import debug as tf_debug\n\ndump_dir = TemporaryDirectory() #temp. directory for demo\nwith tf.Session() as _sess:\n  # Create 'DumpingDebugWrapperSession' wrapper\n  def watch_fn(fetches, feed_dict):\n    node_name_regex_whitelist = '(watch_[0-9]+)'\n    debug_ops, op_type_regex_whitelist = None, None\n    return debug_ops, node_name_regex_whitelist, op_type_regex_whitelist\n  sess = tf_debug.DumpingDebugWrapperSession(_sess,\n                  dump_dir.name, watch_fn=watch_fn)\n\n  # Declare TensorFlow variables\n  tf_vars = [tf.get_variable('watch_0', shape=[32], dtype='float32'),\n             tf.get_variable('ignore_0', shape=[32], dtype='float32')]\n\n  # Calls sess.run()\n  init_op = tf.global_variables_initializer()\n  sess.run(init_op)\n  # <stuff goes here>\n  fetches = sess.run(tf_vars, feed_dict={})\n\n# Call to offline_analyzer\nargv = ['python3.5', '-m', 'tensorflow.python.debug.cli.offline_analyzer',\n        '--ui_type', 'readline', '--dump_dir', dump_dir.name]\ncmdline = \" \".join(argv)\ntry:\n  proc = subprocess.Popen(cmdline, shell=True)\n  proc.wait()\nfinally:\n  dump_dir.cleanup()", "body": "@caisq Any updates regarding this issue? I've tried using `offline_analyzer` per your suggestion; but, keep running into `ValueError: Duplicate node name` as in #7051. Unlike #7051, I'm running locally on CPU. The problem seems to stem from repeated calls to `sess.run()`, where `sess` is an instance of `DumpingDebugWrapperSession`; but, I'm not sure how to get around this issue when using `tf.get_variable()` given that a call to an initializer seems necessary. Included below is a code snippet.\r\n\r\n\r\n```\r\n# Dependencies\r\nimport subprocess\r\nimport tensorflow as tf\r\nfrom tempfile import TemporaryDirectory\r\nfrom tensorflow.python import debug as tf_debug\r\n\r\ndump_dir = TemporaryDirectory() #temp. directory for demo\r\nwith tf.Session() as _sess:\r\n  # Create 'DumpingDebugWrapperSession' wrapper\r\n  def watch_fn(fetches, feed_dict):\r\n    node_name_regex_whitelist = '(watch_[0-9]+)'\r\n    debug_ops, op_type_regex_whitelist = None, None\r\n    return debug_ops, node_name_regex_whitelist, op_type_regex_whitelist\r\n  sess = tf_debug.DumpingDebugWrapperSession(_sess,\r\n                  dump_dir.name, watch_fn=watch_fn)\r\n\r\n  # Declare TensorFlow variables\r\n  tf_vars = [tf.get_variable('watch_0', shape=[32], dtype='float32'),\r\n             tf.get_variable('ignore_0', shape=[32], dtype='float32')]\r\n\r\n  # Calls sess.run()\r\n  init_op = tf.global_variables_initializer()\r\n  sess.run(init_op)\r\n  # <stuff goes here>\r\n  fetches = sess.run(tf_vars, feed_dict={})\r\n\r\n# Call to offline_analyzer\r\nargv = ['python3.5', '-m', 'tensorflow.python.debug.cli.offline_analyzer',\r\n        '--ui_type', 'readline', '--dump_dir', dump_dir.name]\r\ncmdline = \" \".join(argv)\r\ntry:\r\n  proc = subprocess.Popen(cmdline, shell=True)\r\n  proc.wait()\r\nfinally:\r\n  dump_dir.cleanup()\r\n```"}