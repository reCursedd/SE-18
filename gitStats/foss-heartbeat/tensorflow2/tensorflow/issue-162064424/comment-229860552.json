{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/229860552", "html_url": "https://github.com/tensorflow/tensorflow/issues/3017#issuecomment-229860552", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3017", "id": 229860552, "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTg2MDU1Mg==", "user": {"login": "hartsantler", "id": 764882, "node_id": "MDQ6VXNlcjc2NDg4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/764882?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hartsantler", "html_url": "https://github.com/hartsantler", "followers_url": "https://api.github.com/users/hartsantler/followers", "following_url": "https://api.github.com/users/hartsantler/following{/other_user}", "gists_url": "https://api.github.com/users/hartsantler/gists{/gist_id}", "starred_url": "https://api.github.com/users/hartsantler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hartsantler/subscriptions", "organizations_url": "https://api.github.com/users/hartsantler/orgs", "repos_url": "https://api.github.com/users/hartsantler/repos", "events_url": "https://api.github.com/users/hartsantler/events{/privacy}", "received_events_url": "https://api.github.com/users/hartsantler/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-01T05:59:26Z", "updated_at": "2016-07-01T05:59:26Z", "author_association": "NONE", "body_html": "<p><code>bazel build tensorflow/cc::cc_ops</code> may work, didn't get a chance to try it because it trigger a full rebuild of tensorflow, which takes forever on my machine.</p>\n<p>I noticed this ugly code in <code>cc_op_gen.cc</code></p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Converts:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span>   bazel-out/.../genfiles/(external/YYY/)?XX</span>\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> to: XX.</span>\nstring <span class=\"pl-en\">GetPath</span>(<span class=\"pl-k\">const</span> std::string&amp; dot_h_fname) {\n  <span class=\"pl-k\">auto</span> pos = dot_h_fname.<span class=\"pl-c1\">find</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/genfiles/<span class=\"pl-pds\">\"</span></span>);\n  string result = dot_h_fname;\n  <span class=\"pl-k\">if</span> (pos != string::npos) {\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> - 1 account for the terminating null character (\\0) in \"/genfiles/\".</span>\n    result = dot_h_fname.<span class=\"pl-c1\">substr</span>(pos + <span class=\"pl-k\">sizeof</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/genfiles/<span class=\"pl-pds\">\"</span></span>) - <span class=\"pl-c1\">1</span>);\n  }\n  <span class=\"pl-k\">if</span> (result.<span class=\"pl-c1\">size</span>() &gt; <span class=\"pl-k\">sizeof</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>external/<span class=\"pl-pds\">\"</span></span>) &amp;&amp;\n      result.<span class=\"pl-c1\">compare</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-k\">sizeof</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>external/<span class=\"pl-pds\">\"</span></span>) - <span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>external/<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>) {\n    result = result.<span class=\"pl-c1\">substr</span>(<span class=\"pl-k\">sizeof</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>external/<span class=\"pl-pds\">\"</span></span>) - <span class=\"pl-c1\">1</span>);\n    pos = result.<span class=\"pl-c1\">find</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>);\n    <span class=\"pl-k\">if</span> (pos != string::npos) {\n      result = result.<span class=\"pl-c1\">substr</span>(pos + <span class=\"pl-c1\">1</span>);\n    }\n  }\n  <span class=\"pl-k\">return</span> result;\n}</pre></div>\n<p>by ugly i mean, generating header files from a script-like c++ program that is hard coded to the bazel build system.</p>", "body_text": "bazel build tensorflow/cc::cc_ops may work, didn't get a chance to try it because it trigger a full rebuild of tensorflow, which takes forever on my machine.\nI noticed this ugly code in cc_op_gen.cc\n// Converts:\n//   bazel-out/.../genfiles/(external/YYY/)?XX\n// to: XX.\nstring GetPath(const std::string& dot_h_fname) {\n  auto pos = dot_h_fname.find(\"/genfiles/\");\n  string result = dot_h_fname;\n  if (pos != string::npos) {\n    // - 1 account for the terminating null character (\\0) in \"/genfiles/\".\n    result = dot_h_fname.substr(pos + sizeof(\"/genfiles/\") - 1);\n  }\n  if (result.size() > sizeof(\"external/\") &&\n      result.compare(0, sizeof(\"external/\") - 1, \"external/\") == 0) {\n    result = result.substr(sizeof(\"external/\") - 1);\n    pos = result.find(\"/\");\n    if (pos != string::npos) {\n      result = result.substr(pos + 1);\n    }\n  }\n  return result;\n}\nby ugly i mean, generating header files from a script-like c++ program that is hard coded to the bazel build system.", "body": "`bazel build tensorflow/cc::cc_ops` may work, didn't get a chance to try it because it trigger a full rebuild of tensorflow, which takes forever on my machine.\n\nI noticed this ugly code in `cc_op_gen.cc`\n\n``` c++\n// Converts:\n//   bazel-out/.../genfiles/(external/YYY/)?XX\n// to: XX.\nstring GetPath(const std::string& dot_h_fname) {\n  auto pos = dot_h_fname.find(\"/genfiles/\");\n  string result = dot_h_fname;\n  if (pos != string::npos) {\n    // - 1 account for the terminating null character (\\0) in \"/genfiles/\".\n    result = dot_h_fname.substr(pos + sizeof(\"/genfiles/\") - 1);\n  }\n  if (result.size() > sizeof(\"external/\") &&\n      result.compare(0, sizeof(\"external/\") - 1, \"external/\") == 0) {\n    result = result.substr(sizeof(\"external/\") - 1);\n    pos = result.find(\"/\");\n    if (pos != string::npos) {\n      result = result.substr(pos + 1);\n    }\n  }\n  return result;\n}\n```\n\nby ugly i mean, generating header files from a script-like c++ program that is hard coded to the bazel build system. \n"}