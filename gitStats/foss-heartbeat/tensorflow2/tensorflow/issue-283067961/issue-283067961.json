{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15463", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15463/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15463/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15463/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15463", "id": 283067961, "node_id": "MDU6SXNzdWUyODMwNjc5NjE=", "number": 15463, "title": "Bug: StagingArea.size() always return 0 when placed on a different device", "user": {"login": "ppwwyyxx", "id": 1381301, "node_id": "MDQ6VXNlcjEzODEzMDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1381301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppwwyyxx", "html_url": "https://github.com/ppwwyyxx", "followers_url": "https://api.github.com/users/ppwwyyxx/followers", "following_url": "https://api.github.com/users/ppwwyyxx/following{/other_user}", "gists_url": "https://api.github.com/users/ppwwyyxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppwwyyxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppwwyyxx/subscriptions", "organizations_url": "https://api.github.com/users/ppwwyyxx/orgs", "repos_url": "https://api.github.com/users/ppwwyyxx/repos", "events_url": "https://api.github.com/users/ppwwyyxx/events{/privacy}", "received_events_url": "https://api.github.com/users/ppwwyyxx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "ekelsen", "id": 2533174, "node_id": "MDQ6VXNlcjI1MzMxNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2533174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekelsen", "html_url": "https://github.com/ekelsen", "followers_url": "https://api.github.com/users/ekelsen/followers", "following_url": "https://api.github.com/users/ekelsen/following{/other_user}", "gists_url": "https://api.github.com/users/ekelsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekelsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekelsen/subscriptions", "organizations_url": "https://api.github.com/users/ekelsen/orgs", "repos_url": "https://api.github.com/users/ekelsen/repos", "events_url": "https://api.github.com/users/ekelsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ekelsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ekelsen", "id": 2533174, "node_id": "MDQ6VXNlcjI1MzMxNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2533174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekelsen", "html_url": "https://github.com/ekelsen", "followers_url": "https://api.github.com/users/ekelsen/followers", "following_url": "https://api.github.com/users/ekelsen/following{/other_user}", "gists_url": "https://api.github.com/users/ekelsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekelsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekelsen/subscriptions", "organizations_url": "https://api.github.com/users/ekelsen/orgs", "repos_url": "https://api.github.com/users/ekelsen/repos", "events_url": "https://api.github.com/users/ekelsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ekelsen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-12-19T00:39:07Z", "updated_at": "2018-11-14T19:14:19Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: ubuntu 14.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:source</li>\n<li><strong>TensorFlow version (use command below)</strong>:b'v1.3.0-rc1-6044-g0b80606' 1.4.0</li>\n<li><strong>Python version</strong>:  3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:9.0/7.0</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.python.ops.data_flow_ops <span class=\"pl-k\">import</span> StagingArea\n\nareas <span class=\"pl-k\">=</span> []\nstage_ops <span class=\"pl-k\">=</span> []\nsizes <span class=\"pl-k\">=</span> []\n<span class=\"pl-k\">for</span> idx, d <span class=\"pl-k\">in</span> <span class=\"pl-c1\">enumerate</span>([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/gpu:0<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/gpu:1<span class=\"pl-pds\">'</span></span>]):\n    <span class=\"pl-k\">with</span> tf.device(d):\n        inputs <span class=\"pl-k\">=</span> [tf.constant(<span class=\"pl-c1\">1.0</span>), tf.constant(<span class=\"pl-c1\">2</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.uint8)]\n        dtypes <span class=\"pl-k\">=</span> [k.dtype <span class=\"pl-k\">for</span> k <span class=\"pl-k\">in</span> inputs]\n        stage <span class=\"pl-k\">=</span> StagingArea(dtypes, <span class=\"pl-v\">shapes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>)\n        stage_ops.append(stage.put(inputs))\n        areas.append(stage)\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> sizes.append(stage.size())   # this gives correct result</span>\n\nsizes <span class=\"pl-k\">=</span> [k.size() <span class=\"pl-k\">for</span> k <span class=\"pl-k\">in</span> areas]    <span class=\"pl-c\"><span class=\"pl-c\">#</span> this gives wrong result</span>\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    <span class=\"pl-c1\">print</span>(sess.run(sizes))    <span class=\"pl-c\"><span class=\"pl-c\">#</span> [0, 0]</span>\n    sess.run(stage_ops[<span class=\"pl-c1\">0</span>])\n    sess.run(stage_ops[<span class=\"pl-c1\">1</span>])\n    sess.run(stage_ops[<span class=\"pl-c1\">0</span>])\n    sess.run(stage_ops[<span class=\"pl-c1\">1</span>])\n    <span class=\"pl-c1\">print</span>(sess.run(sizes))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> expected: [2,2]; actual: [2,0]</span></pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): ubuntu 14.04\nTensorFlow installed from (source or binary):source\nTensorFlow version (use command below):b'v1.3.0-rc1-6044-g0b80606' 1.4.0\nPython version:  3.6\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:9.0/7.0\nGPU model and memory:\nExact command to reproduce:\n\nimport tensorflow as tf\nfrom tensorflow.python.ops.data_flow_ops import StagingArea\n\nareas = []\nstage_ops = []\nsizes = []\nfor idx, d in enumerate(['/gpu:0', '/gpu:1']):\n    with tf.device(d):\n        inputs = [tf.constant(1.0), tf.constant(2, dtype=tf.uint8)]\n        dtypes = [k.dtype for k in inputs]\n        stage = StagingArea(dtypes, shapes=None)\n        stage_ops.append(stage.put(inputs))\n        areas.append(stage)\n        # sizes.append(stage.size())   # this gives correct result\n\nsizes = [k.size() for k in areas]    # this gives wrong result\nwith tf.Session() as sess:\n    print(sess.run(sizes))    # [0, 0]\n    sess.run(stage_ops[0])\n    sess.run(stage_ops[1])\n    sess.run(stage_ops[0])\n    sess.run(stage_ops[1])\n    print(sess.run(sizes))  # expected: [2,2]; actual: [2,0]", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: ubuntu 14.04\r\n- **TensorFlow installed from (source or binary)**:source\r\n- **TensorFlow version (use command below)**:b'v1.3.0-rc1-6044-g0b80606' 1.4.0\r\n- **Python version**:  3.6\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:9.0/7.0\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n```python\r\nimport tensorflow as tf\r\nfrom tensorflow.python.ops.data_flow_ops import StagingArea\r\n\r\nareas = []\r\nstage_ops = []\r\nsizes = []\r\nfor idx, d in enumerate(['/gpu:0', '/gpu:1']):\r\n    with tf.device(d):\r\n        inputs = [tf.constant(1.0), tf.constant(2, dtype=tf.uint8)]\r\n        dtypes = [k.dtype for k in inputs]\r\n        stage = StagingArea(dtypes, shapes=None)\r\n        stage_ops.append(stage.put(inputs))\r\n        areas.append(stage)\r\n        # sizes.append(stage.size())   # this gives correct result\r\n\r\nsizes = [k.size() for k in areas]    # this gives wrong result\r\nwith tf.Session() as sess:\r\n    print(sess.run(sizes))    # [0, 0]\r\n    sess.run(stage_ops[0])\r\n    sess.run(stage_ops[1])\r\n    sess.run(stage_ops[0])\r\n    sess.run(stage_ops[1])\r\n    print(sess.run(sizes))  # expected: [2,2]; actual: [2,0]\r\n```"}