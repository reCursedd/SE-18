{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10267", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10267/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10267/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10267/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10267", "id": 231945609, "node_id": "MDU6SXNzdWUyMzE5NDU2MDk=", "number": 10267, "title": "Unnecessary label division at tf.nn.nce_loss?", "user": {"login": "shuuki4", "id": 12455653, "node_id": "MDQ6VXNlcjEyNDU1NjUz", "avatar_url": "https://avatars2.githubusercontent.com/u/12455653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shuuki4", "html_url": "https://github.com/shuuki4", "followers_url": "https://api.github.com/users/shuuki4/followers", "following_url": "https://api.github.com/users/shuuki4/following{/other_user}", "gists_url": "https://api.github.com/users/shuuki4/gists{/gist_id}", "starred_url": "https://api.github.com/users/shuuki4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shuuki4/subscriptions", "organizations_url": "https://api.github.com/users/shuuki4/orgs", "repos_url": "https://api.github.com/users/shuuki4/repos", "events_url": "https://api.github.com/users/shuuki4/events{/privacy}", "received_events_url": "https://api.github.com/users/shuuki4/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-29T07:22:49Z", "updated_at": "2017-05-30T19:36:29Z", "closed_at": "2017-05-30T19:36:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p>As far as I know, NCE Loss is a sampling-based loss that converts large-scale multiclass loss into a sum of binary loss for sampled classes. Each binary classification infers a probability where the given context and word is from the proxy corpus (real distribution) or noise distribution. Therefore, I guess each binary classification of word should be hard binary classification with label 0.0 or 1.0.</p>\n<p>However, the documentation and the implementation of <code>tf.nn.nce_loss</code> (<a href=\"https://www.tensorflow.org/api_docs/python/tf/nn/nce_loss\" rel=\"nofollow\">https://www.tensorflow.org/api_docs/python/tf/nn/nce_loss</a>, <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/nn_impl.py#L1044\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/nn_impl.py#L1044</a>) indicates that <em>the target probability is assigned to <code>1 / num_true</code> to make target probabilities sum to 1</em>. Implementation of <code>tf.nn.nce_loss</code> uses the helper function <code>_compute_sampled_logits</code> in same file, which always returns true label divided by the number of true examples (Line 1044).</p>\n<p>Is this division necessary for NCE Loss? Isn't the label of <code>&lt;1.0</code> for positive examples generates the unnecessary opposite-direction loss <code>(1-y)log(1-y')</code>? Is there any other reason that I missed for this label division?</p>", "body_text": "As far as I know, NCE Loss is a sampling-based loss that converts large-scale multiclass loss into a sum of binary loss for sampled classes. Each binary classification infers a probability where the given context and word is from the proxy corpus (real distribution) or noise distribution. Therefore, I guess each binary classification of word should be hard binary classification with label 0.0 or 1.0.\nHowever, the documentation and the implementation of tf.nn.nce_loss (https://www.tensorflow.org/api_docs/python/tf/nn/nce_loss, https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/nn_impl.py#L1044) indicates that the target probability is assigned to 1 / num_true to make target probabilities sum to 1. Implementation of tf.nn.nce_loss uses the helper function _compute_sampled_logits in same file, which always returns true label divided by the number of true examples (Line 1044).\nIs this division necessary for NCE Loss? Isn't the label of <1.0 for positive examples generates the unnecessary opposite-direction loss (1-y)log(1-y')? Is there any other reason that I missed for this label division?", "body": "As far as I know, NCE Loss is a sampling-based loss that converts large-scale multiclass loss into a sum of binary loss for sampled classes. Each binary classification infers a probability where the given context and word is from the proxy corpus (real distribution) or noise distribution. Therefore, I guess each binary classification of word should be hard binary classification with label 0.0 or 1.0.\r\n\r\nHowever, the documentation and the implementation of `tf.nn.nce_loss` (https://www.tensorflow.org/api_docs/python/tf/nn/nce_loss, https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/nn_impl.py#L1044) indicates that *the target probability is assigned to `1 / num_true` to make target probabilities sum to 1*. Implementation of `tf.nn.nce_loss` uses the helper function `_compute_sampled_logits` in same file, which always returns true label divided by the number of true examples (Line 1044).\r\n\r\nIs this division necessary for NCE Loss? Isn't the label of `<1.0` for positive examples generates the unnecessary opposite-direction loss `(1-y)log(1-y')`? Is there any other reason that I missed for this label division?\r\n"}