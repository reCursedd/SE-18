{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/241927775", "html_url": "https://github.com/tensorflow/tensorflow/issues/3985#issuecomment-241927775", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3985", "id": 241927775, "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTkyNzc3NQ==", "user": {"login": "davidzchen", "id": 5283042, "node_id": "MDQ6VXNlcjUyODMwNDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5283042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidzchen", "html_url": "https://github.com/davidzchen", "followers_url": "https://api.github.com/users/davidzchen/followers", "following_url": "https://api.github.com/users/davidzchen/following{/other_user}", "gists_url": "https://api.github.com/users/davidzchen/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidzchen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidzchen/subscriptions", "organizations_url": "https://api.github.com/users/davidzchen/orgs", "repos_url": "https://api.github.com/users/davidzchen/repos", "events_url": "https://api.github.com/users/davidzchen/events{/privacy}", "received_events_url": "https://api.github.com/users/davidzchen/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-24T00:56:43Z", "updated_at": "2016-08-24T00:56:43Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=112599\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Mistobaan\">@Mistobaan</a> Yes, you need to run <code>./configure</code> again if you run <code>bazel clean</code> since running <code>clean</code> will also delete the <code>@local_config_cuda</code> repository generated by <code>cuda_configure</code>, though in general, you should need to run <code>bazel clean</code> due to Bazel's incremental rebuilds. If you find an issue that is causing your workspace to become inconsistent, feel free to bring it to our attention. As mentioned in the documentation on <a href=\"http://bazel.io/docs/bazel-user-manual.html#the-clean-command\" rel=\"nofollow\"><code>bazel clean</code></a>:</p>\n<blockquote>\n<p>The clean command is provided primarily as a means of reclaiming disk space for workspaces that are no longer needed. However, we recognize that Bazel's incremental rebuilds might not be perfect; clean may be used to recover a consistent state when problems arise.</p>\n<p>Bazel's design is such that these problems are fixable; we consider such bugs a high priority, and will do our best fix them. If you ever find an incorrect incremental build, please file a bug report. We encourage developers to get out of the habit of using clean and into that of reporting bugs in the tools.</p>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=18412448\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Mazecreator\">@Mazecreator</a> It seems likely that the reason why the undeclared inclusions error is appearing if the CUDA version is not set is due to the symlink-resolved include path of the CUDA headers not matching any of the <code>cxx_builtin_include_directory</code> entries in the CROSSTOOL config. While <code>/usr/local/cuda</code> is a symlink to <code>/usr/local/cuda-&lt;version&gt;</code>, the build only works if we have a <code>cxx_builtin_include_directory</code> entry for the <code>/usr/local/cuda-&lt;version&gt;</code> but not <code>/usr/local/cuda</code>.</p>\n<p>I'll look into whether we can add support for resolving symlinks for the <code>cxx_builtin_include_directory</code> entries in Bazel or whether the correct fix is to <code>readlink</code> and add the resolved directory to the CROSSTOOL config.</p>", "body_text": "@Mistobaan Yes, you need to run ./configure again if you run bazel clean since running clean will also delete the @local_config_cuda repository generated by cuda_configure, though in general, you should need to run bazel clean due to Bazel's incremental rebuilds. If you find an issue that is causing your workspace to become inconsistent, feel free to bring it to our attention. As mentioned in the documentation on bazel clean:\n\nThe clean command is provided primarily as a means of reclaiming disk space for workspaces that are no longer needed. However, we recognize that Bazel's incremental rebuilds might not be perfect; clean may be used to recover a consistent state when problems arise.\nBazel's design is such that these problems are fixable; we consider such bugs a high priority, and will do our best fix them. If you ever find an incorrect incremental build, please file a bug report. We encourage developers to get out of the habit of using clean and into that of reporting bugs in the tools.\n\n@Mazecreator It seems likely that the reason why the undeclared inclusions error is appearing if the CUDA version is not set is due to the symlink-resolved include path of the CUDA headers not matching any of the cxx_builtin_include_directory entries in the CROSSTOOL config. While /usr/local/cuda is a symlink to /usr/local/cuda-<version>, the build only works if we have a cxx_builtin_include_directory entry for the /usr/local/cuda-<version> but not /usr/local/cuda.\nI'll look into whether we can add support for resolving symlinks for the cxx_builtin_include_directory entries in Bazel or whether the correct fix is to readlink and add the resolved directory to the CROSSTOOL config.", "body": "@Mistobaan Yes, you need to run `./configure` again if you run `bazel clean` since running `clean` will also delete the `@local_config_cuda` repository generated by `cuda_configure`, though in general, you should need to run `bazel clean` due to Bazel's incremental rebuilds. If you find an issue that is causing your workspace to become inconsistent, feel free to bring it to our attention. As mentioned in the documentation on [`bazel clean`](http://bazel.io/docs/bazel-user-manual.html#the-clean-command):\n\n> The clean command is provided primarily as a means of reclaiming disk space for workspaces that are no longer needed. However, we recognize that Bazel's incremental rebuilds might not be perfect; clean may be used to recover a consistent state when problems arise.\n> \n> Bazel's design is such that these problems are fixable; we consider such bugs a high priority, and will do our best fix them. If you ever find an incorrect incremental build, please file a bug report. We encourage developers to get out of the habit of using clean and into that of reporting bugs in the tools.\n\n@Mazecreator It seems likely that the reason why the undeclared inclusions error is appearing if the CUDA version is not set is due to the symlink-resolved include path of the CUDA headers not matching any of the `cxx_builtin_include_directory` entries in the CROSSTOOL config. While `/usr/local/cuda` is a symlink to `/usr/local/cuda-<version>`, the build only works if we have a `cxx_builtin_include_directory` entry for the `/usr/local/cuda-<version>` but not `/usr/local/cuda`.\n\nI'll look into whether we can add support for resolving symlinks for the `cxx_builtin_include_directory` entries in Bazel or whether the correct fix is to `readlink` and add the resolved directory to the CROSSTOOL config.\n"}