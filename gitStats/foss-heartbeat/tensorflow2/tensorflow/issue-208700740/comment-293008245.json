{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/293008245", "html_url": "https://github.com/tensorflow/tensorflow/issues/7662#issuecomment-293008245", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7662", "id": 293008245, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzAwODI0NQ==", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-10T16:44:53Z", "updated_at": "2017-04-10T16:48:50Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=70511\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/girving\">@girving</a> Yes, in the case of <code>sum</code> it is, but I don't think it is a good idea to implement it this way. Let's say you have a tensor containing 10000 rows, each row have value about <code>~1</code>, and you want the sum of row number 5000 to 5005, then computationally speaking, implementing using scan, gather and subtract, you are doing a <code>5005-5000</code>, which has less precision than <code>1+1+1+1+1</code>.</p>\n<p>In the case of product, it is not, because <code>0 * something / 0</code> is <code>NaN</code>. Neither does max and min.  In my application, I only use sum, so it might be OK to use scan-gather-subtraction for me. But I'm not sure if other reduction operations like prod, min, max would be useful to others.</p>\n<p>By the way, there are similar thing as the Op I'm implementing named <code>tf.segment_sum</code>, written in C++, see:<br>\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/segment_sum\" rel=\"nofollow\">https://www.tensorflow.org/api_docs/python/tf/segment_sum</a><br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/segment_reduction_ops.cc\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/segment_reduction_ops.cc</a></p>", "body_text": "@girving Yes, in the case of sum it is, but I don't think it is a good idea to implement it this way. Let's say you have a tensor containing 10000 rows, each row have value about ~1, and you want the sum of row number 5000 to 5005, then computationally speaking, implementing using scan, gather and subtract, you are doing a 5005-5000, which has less precision than 1+1+1+1+1.\nIn the case of product, it is not, because 0 * something / 0 is NaN. Neither does max and min.  In my application, I only use sum, so it might be OK to use scan-gather-subtraction for me. But I'm not sure if other reduction operations like prod, min, max would be useful to others.\nBy the way, there are similar thing as the Op I'm implementing named tf.segment_sum, written in C++, see:\nhttps://www.tensorflow.org/api_docs/python/tf/segment_sum\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/segment_reduction_ops.cc", "body": "@girving Yes, in the case of `sum` it is, but I don't think it is a good idea to implement it this way. Let's say you have a tensor containing 10000 rows, each row have value about `~1`, and you want the sum of row number 5000 to 5005, then computationally speaking, implementing using scan, gather and subtract, you are doing a `5005-5000`, which has less precision than `1+1+1+1+1`.\r\n\r\nIn the case of product, it is not, because `0 * something / 0` is `NaN`. Neither does max and min.  In my application, I only use sum, so it might be OK to use scan-gather-subtraction for me. But I'm not sure if other reduction operations like prod, min, max would be useful to others.\r\n\r\nBy the way, there are similar thing as the Op I'm implementing named `tf.segment_sum`, written in C++, see: \r\nhttps://www.tensorflow.org/api_docs/python/tf/segment_sum\r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/segment_reduction_ops.cc"}