{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/343450794", "html_url": "https://github.com/tensorflow/tensorflow/pull/13495#issuecomment-343450794", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13495", "id": 343450794, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzQ1MDc5NA==", "user": {"login": "Timmmm", "id": 376842, "node_id": "MDQ6VXNlcjM3Njg0Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/376842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Timmmm", "html_url": "https://github.com/Timmmm", "followers_url": "https://api.github.com/users/Timmmm/followers", "following_url": "https://api.github.com/users/Timmmm/following{/other_user}", "gists_url": "https://api.github.com/users/Timmmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Timmmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Timmmm/subscriptions", "organizations_url": "https://api.github.com/users/Timmmm/orgs", "repos_url": "https://api.github.com/users/Timmmm/repos", "events_url": "https://api.github.com/users/Timmmm/events{/privacy}", "received_events_url": "https://api.github.com/users/Timmmm/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-10T11:34:43Z", "updated_at": "2017-11-10T11:34:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>So, I had a look, and as far as I understand the process, here is how it currently works:</p>\n<p>In <code>tensorflow/tools/git/gen_git_source.py</code> there is a function <code>generate()</code> which writes <code>version_info.cc</code> containing this function: <code>const char* tf_git_version() {return \"%s\";}</code> where <code>%s</code> is the result of <code>git describe --long --tags</code>, e.g. <code>v1.3.0-rc1-4901-gd4c5301d52</code>. <code>generate()</code> is called when you run <code>python gen_git_source.py --generate</code>.</p>\n<p>This is called by a <a href=\"https://docs.bazel.build/versions/master/be/general.html#genrule\" rel=\"nofollow\">genrule</a> defined by <code>tf_version_info_genrule()</code> in <code>tensorflow.bzl</code> which is called in <code>core/BUILD</code>. The genrule has these sources:</p>\n<pre><code>      srcs=[\n          clean_dep(\"//tensorflow/tools/git:gen/spec.json\"),\n          clean_dep(\"//tensorflow/tools/git:gen/head\"),\n          clean_dep(\"//tensorflow/tools/git:gen/branch_ref\"),\n      ],\n</code></pre>\n<p><code>head</code> is symlinked to <code>.git/HEAD</code> which I guess means it is run every time the head or branch changes. There is a function in <code>configure.py</code> that calls <code>gen_git_source.py --configure</code> which writes <code>spec.json</code> and symlinks <code>head</code> and <code>branch_ref</code> to <code>.git/HEAD</code> and the current branch ref in <code>.git</code>. <code>spec.json</code> contains a flag to say if <code>git</code> is present, the name of the current branch and the full path to the repo.</p>\n<p>So here's what I think happens:</p>\n<ol>\n<li>You <code>git clone tensorflow</code></li>\n<li>You run <code>./configure</code>. This calls <code>gen_git_source.py --configure</code> which symlinks <code>gen/head</code> to <code>.git/HEAD</code>, and generates <code>spec.json</code> which contains the current branch name.</li>\n<li>You run a Bazel command. Some target somewhere depends on <code>version_info.cc</code> which is generated by the <code>tf_version_info_genrule()</code> genrule. This genrule calls <code>gen_git_source.py --generate</code> which checks that the current branch is the same as the one in <code>spec.json</code>. If so it writes out <code>version_info.cc</code> using <code>git describe</code> and everyone is happy.</li>\n<li>You switch branches. This causes <code>gen/head</code> to change.</li>\n<li>You run a Bazel command. Since <code>gen/head</code> changed, <code>gen_git_source.py --generate</code> is called which checks the current branch vs <code>spec.json</code> and finds that it has changed! It makes you run <code>./configure</code> again.</li>\n</ol>\n<p>This seems silly. I can't even see that the branch is used anywhere! I think a simpler design would be like this:</p>\n<ol>\n<li>Remove the current branch from <code>spec.json</code>.</li>\n<li>Remove the branch check from <code>generate()</code>.</li>\n<li>Get rid of <code>gen/branch_ref</code>.</li>\n<li>That's it.</li>\n</ol>\n<p>If head changes, then <code>//tensorflow/tools/git:gen/head</code> should change, and <code>gen_git_source.py --generate</code> will be called again by the genrule and write a new <code>version_info.cc</code>. Nothing needs to know the branch name.</p>\n<p>By the way as far as I can tell none of this will work on Windows anyway because it copies files rather than creating symlinks.</p>\n<p>Let me know if I have totally misunderstood things!</p>", "body_text": "So, I had a look, and as far as I understand the process, here is how it currently works:\nIn tensorflow/tools/git/gen_git_source.py there is a function generate() which writes version_info.cc containing this function: const char* tf_git_version() {return \"%s\";} where %s is the result of git describe --long --tags, e.g. v1.3.0-rc1-4901-gd4c5301d52. generate() is called when you run python gen_git_source.py --generate.\nThis is called by a genrule defined by tf_version_info_genrule() in tensorflow.bzl which is called in core/BUILD. The genrule has these sources:\n      srcs=[\n          clean_dep(\"//tensorflow/tools/git:gen/spec.json\"),\n          clean_dep(\"//tensorflow/tools/git:gen/head\"),\n          clean_dep(\"//tensorflow/tools/git:gen/branch_ref\"),\n      ],\n\nhead is symlinked to .git/HEAD which I guess means it is run every time the head or branch changes. There is a function in configure.py that calls gen_git_source.py --configure which writes spec.json and symlinks head and branch_ref to .git/HEAD and the current branch ref in .git. spec.json contains a flag to say if git is present, the name of the current branch and the full path to the repo.\nSo here's what I think happens:\n\nYou git clone tensorflow\nYou run ./configure. This calls gen_git_source.py --configure which symlinks gen/head to .git/HEAD, and generates spec.json which contains the current branch name.\nYou run a Bazel command. Some target somewhere depends on version_info.cc which is generated by the tf_version_info_genrule() genrule. This genrule calls gen_git_source.py --generate which checks that the current branch is the same as the one in spec.json. If so it writes out version_info.cc using git describe and everyone is happy.\nYou switch branches. This causes gen/head to change.\nYou run a Bazel command. Since gen/head changed, gen_git_source.py --generate is called which checks the current branch vs spec.json and finds that it has changed! It makes you run ./configure again.\n\nThis seems silly. I can't even see that the branch is used anywhere! I think a simpler design would be like this:\n\nRemove the current branch from spec.json.\nRemove the branch check from generate().\nGet rid of gen/branch_ref.\nThat's it.\n\nIf head changes, then //tensorflow/tools/git:gen/head should change, and gen_git_source.py --generate will be called again by the genrule and write a new version_info.cc. Nothing needs to know the branch name.\nBy the way as far as I can tell none of this will work on Windows anyway because it copies files rather than creating symlinks.\nLet me know if I have totally misunderstood things!", "body": "So, I had a look, and as far as I understand the process, here is how it currently works:\r\n\r\nIn `tensorflow/tools/git/gen_git_source.py` there is a function `generate()` which writes `version_info.cc` containing this function: `const char* tf_git_version() {return \"%s\";}` where `%s` is the result of `git describe --long --tags`, e.g. `v1.3.0-rc1-4901-gd4c5301d52`. `generate()` is called when you run `python gen_git_source.py --generate`.\r\n\r\nThis is called by a [genrule](https://docs.bazel.build/versions/master/be/general.html#genrule) defined by `tf_version_info_genrule()` in `tensorflow.bzl` which is called in `core/BUILD`. The genrule has these sources:\r\n\r\n```\r\n      srcs=[\r\n          clean_dep(\"//tensorflow/tools/git:gen/spec.json\"),\r\n          clean_dep(\"//tensorflow/tools/git:gen/head\"),\r\n          clean_dep(\"//tensorflow/tools/git:gen/branch_ref\"),\r\n      ],\r\n```\r\n\r\n`head` is symlinked to `.git/HEAD` which I guess means it is run every time the head or branch changes. There is a function in `configure.py` that calls `gen_git_source.py --configure` which writes `spec.json` and symlinks `head` and `branch_ref` to `.git/HEAD` and the current branch ref in `.git`. `spec.json` contains a flag to say if `git` is present, the name of the current branch and the full path to the repo.\r\n\r\nSo here's what I think happens:\r\n\r\n1. You `git clone tensorflow`\r\n2. You run `./configure`. This calls `gen_git_source.py --configure` which symlinks `gen/head` to `.git/HEAD`, and generates `spec.json` which contains the current branch name.\r\n3. You run a Bazel command. Some target somewhere depends on `version_info.cc` which is generated by the `tf_version_info_genrule()` genrule. This genrule calls `gen_git_source.py --generate` which checks that the current branch is the same as the one in `spec.json`. If so it writes out `version_info.cc` using `git describe` and everyone is happy.\r\n4. You switch branches. This causes `gen/head` to change.\r\n5. You run a Bazel command. Since `gen/head` changed, `gen_git_source.py --generate` is called which checks the current branch vs `spec.json` and finds that it has changed! It makes you run `./configure` again.\r\n\r\nThis seems silly. I can't even see that the branch is used anywhere! I think a simpler design would be like this:\r\n\r\n1. Remove the current branch from `spec.json`.\r\n2. Remove the branch check from `generate()`.\r\n3. Get rid of `gen/branch_ref`.\r\n3. That's it.\r\n\r\nIf head changes, then `//tensorflow/tools/git:gen/head` should change, and `gen_git_source.py --generate` will be called again by the genrule and write a new `version_info.cc`. Nothing needs to know the branch name.\r\n\r\nBy the way as far as I can tell none of this will work on Windows anyway because it copies files rather than creating symlinks.\r\n\r\nLet me know if I have totally misunderstood things!"}