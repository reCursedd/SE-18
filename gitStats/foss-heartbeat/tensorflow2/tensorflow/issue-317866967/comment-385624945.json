{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/385624945", "html_url": "https://github.com/tensorflow/tensorflow/issues/18886#issuecomment-385624945", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18886", "id": 385624945, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTYyNDk0NQ==", "user": {"login": "aburgm", "id": 5033091, "node_id": "MDQ6VXNlcjUwMzMwOTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5033091?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aburgm", "html_url": "https://github.com/aburgm", "followers_url": "https://api.github.com/users/aburgm/followers", "following_url": "https://api.github.com/users/aburgm/following{/other_user}", "gists_url": "https://api.github.com/users/aburgm/gists{/gist_id}", "starred_url": "https://api.github.com/users/aburgm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aburgm/subscriptions", "organizations_url": "https://api.github.com/users/aburgm/orgs", "repos_url": "https://api.github.com/users/aburgm/repos", "events_url": "https://api.github.com/users/aburgm/events{/privacy}", "received_events_url": "https://api.github.com/users/aburgm/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-01T08:32:00Z", "updated_at": "2018-05-01T08:32:00Z", "author_association": "NONE", "body_html": "<p>I have observed a similar behavior which looks fairly related, although with TensorFlow 1.5. Linking a cc_library rule fails with various undefined references, including \"undefined reference to main\", with bazel 0.12 or greater but works with 0.11.1. I have looked at the command lines it invokes.</p>\n<p>With bazel 0.13 (fails with similar error as in original issue):</p>\n<pre><code>external/local_config_cuda/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc -shared -o bazel-out/k8-opt/bin/exp/vmu/common/libcommon.so -Wl,-no-as-needed -B/usr/bin/ -pie -Wl,-z,relro,-z,now -no-canonical-prefixes -pass-exit-codes '-Wl,--build-id=md5' '-Wl,--hash-style=gnu' -Wl,--gc-sections -Wl,@bazel-out/k8-opt/bin/exp/vmu/common/libcommon.so-2.params\n</code></pre>\n<p>With bazel 0.11.1 (links fine):</p>\n<pre><code>external/local_config_cuda/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc -shared -o bazel-out/k8-opt/bin/exp/vmu/common/libcommon.so -Wl,-no-as-needed -B/usr/bin/ -Wl,-z,relro,-z,now -no-canonical-prefixes -pass-exit-codes '-Wl,--build-id=md5' '-Wl,--hash-style=gnu' -Wl,--gc-sections -Wl,@bazel-out/k8-opt/bin/exp/vmu/common/libcommon.so-2.params\n</code></pre>\n<p>The difference is the <code>-pie</code> flag that is added in the later version and indeed also when I run these commands manually the presence of the flag makes the linker invocation fail.</p>", "body_text": "I have observed a similar behavior which looks fairly related, although with TensorFlow 1.5. Linking a cc_library rule fails with various undefined references, including \"undefined reference to main\", with bazel 0.12 or greater but works with 0.11.1. I have looked at the command lines it invokes.\nWith bazel 0.13 (fails with similar error as in original issue):\nexternal/local_config_cuda/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc -shared -o bazel-out/k8-opt/bin/exp/vmu/common/libcommon.so -Wl,-no-as-needed -B/usr/bin/ -pie -Wl,-z,relro,-z,now -no-canonical-prefixes -pass-exit-codes '-Wl,--build-id=md5' '-Wl,--hash-style=gnu' -Wl,--gc-sections -Wl,@bazel-out/k8-opt/bin/exp/vmu/common/libcommon.so-2.params\n\nWith bazel 0.11.1 (links fine):\nexternal/local_config_cuda/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc -shared -o bazel-out/k8-opt/bin/exp/vmu/common/libcommon.so -Wl,-no-as-needed -B/usr/bin/ -Wl,-z,relro,-z,now -no-canonical-prefixes -pass-exit-codes '-Wl,--build-id=md5' '-Wl,--hash-style=gnu' -Wl,--gc-sections -Wl,@bazel-out/k8-opt/bin/exp/vmu/common/libcommon.so-2.params\n\nThe difference is the -pie flag that is added in the later version and indeed also when I run these commands manually the presence of the flag makes the linker invocation fail.", "body": "I have observed a similar behavior which looks fairly related, although with TensorFlow 1.5. Linking a cc_library rule fails with various undefined references, including \"undefined reference to main\", with bazel 0.12 or greater but works with 0.11.1. I have looked at the command lines it invokes.\r\n\r\nWith bazel 0.13 (fails with similar error as in original issue):\r\n\r\n```\r\nexternal/local_config_cuda/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc -shared -o bazel-out/k8-opt/bin/exp/vmu/common/libcommon.so -Wl,-no-as-needed -B/usr/bin/ -pie -Wl,-z,relro,-z,now -no-canonical-prefixes -pass-exit-codes '-Wl,--build-id=md5' '-Wl,--hash-style=gnu' -Wl,--gc-sections -Wl,@bazel-out/k8-opt/bin/exp/vmu/common/libcommon.so-2.params\r\n```\r\n\r\nWith bazel 0.11.1 (links fine):\r\n\r\n```\r\nexternal/local_config_cuda/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc -shared -o bazel-out/k8-opt/bin/exp/vmu/common/libcommon.so -Wl,-no-as-needed -B/usr/bin/ -Wl,-z,relro,-z,now -no-canonical-prefixes -pass-exit-codes '-Wl,--build-id=md5' '-Wl,--hash-style=gnu' -Wl,--gc-sections -Wl,@bazel-out/k8-opt/bin/exp/vmu/common/libcommon.so-2.params\r\n```\r\n\r\nThe difference is the `-pie` flag that is added in the later version and indeed also when I run these commands manually the presence of the flag makes the linker invocation fail."}