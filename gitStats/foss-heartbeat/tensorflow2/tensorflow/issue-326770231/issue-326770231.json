{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19578", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19578/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19578/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19578/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19578", "id": 326770231, "node_id": "MDU6SXNzdWUzMjY3NzAyMzE=", "number": 19578, "title": "Latest NonMaxSuppression breaks backward compatiblity", "user": {"login": "ppwwyyxx", "id": 1381301, "node_id": "MDQ6VXNlcjEzODEzMDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1381301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppwwyyxx", "html_url": "https://github.com/ppwwyyxx", "followers_url": "https://api.github.com/users/ppwwyyxx/followers", "following_url": "https://api.github.com/users/ppwwyyxx/following{/other_user}", "gists_url": "https://api.github.com/users/ppwwyyxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppwwyyxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppwwyyxx/subscriptions", "organizations_url": "https://api.github.com/users/ppwwyyxx/orgs", "repos_url": "https://api.github.com/users/ppwwyyxx/repos", "events_url": "https://api.github.com/users/ppwwyyxx/events{/privacy}", "received_events_url": "https://api.github.com/users/ppwwyyxx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-05-26T22:02:21Z", "updated_at": "2018-06-15T22:08:53Z", "closed_at": "2018-06-15T22:08:49Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: N/A</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: N/A</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: N/A</li>\n<li><strong>TensorFlow version (use command below)</strong>: N/A</li>\n<li><strong>Python version</strong>:  N/A</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<p>The latest changes <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/1a300437cecfae36f7584694dac523851f1cd931/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/1a300437cecfae36f7584694dac523851f1cd931\"><tt>1a30043</tt></a> to the NonMaxSuppression op have two issues:</p>\n<ol>\n<li>\n<p>It breaks backward compatibility. It removes all boxes whose scores are below a threshold, and the threshold is default to 0. However, the old API does not require that the scores have to be &gt;= 0. Boxes with negative scores will be removed by default after this change.<br>\nOn <a href=\"https://github.com/ppwwyyxx/tensorpack/tree/master/examples/FasterRCNN\">my implementation of Mask RCNN</a> this decreases mAP by 0.2.</p>\n</li>\n<li>\n<p>It has a potential bug. This loop:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/1a300437cecfae36f7584694dac523851f1cd931/tensorflow/core/kernels/non_max_suppression_op.cc#L137-L142\">tensorflow/tensorflow/core/kernels/non_max_suppression_op.cc</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 137 to 142\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/1a300437cecfae36f7584694dac523851f1cd931\">1a30043</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L137\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"137\"></td>\n          <td id=\"LC137\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> j = selected.<span class=\"pl-c1\">size</span>() - <span class=\"pl-c1\">1</span>; j &gt;= <span class=\"pl-c1\">0</span>; --j) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L138\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"138\"></td>\n          <td id=\"LC138\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   iou = <span class=\"pl-c1\">IOU</span>(boxes_data, next_candidate.<span class=\"pl-smi\">box_index</span>, selected[j]); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L139\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"139\"></td>\n          <td id=\"LC139\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (iou == <span class=\"pl-c1\">0.0</span>) <span class=\"pl-k\">continue</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L140\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"140\"></td>\n          <td id=\"LC140\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   next_candidate.<span class=\"pl-smi\">score</span> *= <span class=\"pl-c1\">suppress_func</span>(iou); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L141\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"141\"></td>\n          <td id=\"LC141\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> (next_candidate.<span class=\"pl-smi\">score</span> &lt;= score_threshold) <span class=\"pl-k\">break</span>; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L142\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"142\"></td>\n          <td id=\"LC142\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n</li>\n</ol>\n<p>triggers an integer underflow when <code>selected</code> is empty, because <code>size()</code> is unsigned. It happens to cause no bugs in this case, but should better be fixed. If the loop order is reversed like <code>for (int j = 0; j &lt;= selected.size() - 1; ++j)</code>, this would become a bug immediately.</p>\n<p>EDIT: From <a href=\"https://en.cppreference.com/w/cpp/language/implicit_conversion\" rel=\"nofollow\">https://en.cppreference.com/w/cpp/language/implicit_conversion</a>:</p>\n<blockquote>\n<p>If the destination type is signed, the value does not change if the source integer can be represented in the destination type. Otherwise the result is implementation-defined. (Note that this is different from signed integer arithmetic overflow, which is undefined).</p>\n</blockquote>\n<p>So the above code relies on implementation-defined behavior.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): N/A\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): N/A\nTensorFlow installed from (source or binary): N/A\nTensorFlow version (use command below): N/A\nPython version:  N/A\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A\n\nThe latest changes 1a30043 to the NonMaxSuppression op have two issues:\n\n\nIt breaks backward compatibility. It removes all boxes whose scores are below a threshold, and the threshold is default to 0. However, the old API does not require that the scores have to be >= 0. Boxes with negative scores will be removed by default after this change.\nOn my implementation of Mask RCNN this decreases mAP by 0.2.\n\n\nIt has a potential bug. This loop:\n\n  \n    \n      tensorflow/tensorflow/core/kernels/non_max_suppression_op.cc\n    \n    \n        Lines 137 to 142\n      in\n      1a30043\n    \n    \n    \n    \n\n        \n          \n           for (int j = selected.size() - 1; j >= 0; --j) { \n        \n\n        \n          \n             iou = IOU(boxes_data, next_candidate.box_index, selected[j]); \n        \n\n        \n          \n             if (iou == 0.0) continue; \n        \n\n        \n          \n             next_candidate.score *= suppress_func(iou); \n        \n\n        \n          \n             if (next_candidate.score <= score_threshold) break; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\n\n\ntriggers an integer underflow when selected is empty, because size() is unsigned. It happens to cause no bugs in this case, but should better be fixed. If the loop order is reversed like for (int j = 0; j <= selected.size() - 1; ++j), this would become a bug immediately.\nEDIT: From https://en.cppreference.com/w/cpp/language/implicit_conversion:\n\nIf the destination type is signed, the value does not change if the source integer can be represented in the destination type. Otherwise the result is implementation-defined. (Note that this is different from signed integer arithmetic overflow, which is undefined).\n\nSo the above code relies on implementation-defined behavior.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: N/A\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: N/A\r\n- **TensorFlow installed from (source or binary)**: N/A\r\n- **TensorFlow version (use command below)**: N/A\r\n- **Python version**:  N/A\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: N/A\r\n\r\nThe latest changes https://github.com/tensorflow/tensorflow/commit/1a300437cecfae36f7584694dac523851f1cd931 to the NonMaxSuppression op have two issues:\r\n\r\n1. It breaks backward compatibility. It removes all boxes whose scores are below a threshold, and the threshold is default to 0. However, the old API does not require that the scores have to be >= 0. Boxes with negative scores will be removed by default after this change.\r\nOn [my implementation of Mask RCNN](https://github.com/ppwwyyxx/tensorpack/tree/master/examples/FasterRCNN) this decreases mAP by 0.2.\r\n\r\n2. It has a potential bug. This loop:\r\nhttps://github.com/tensorflow/tensorflow/blob/1a300437cecfae36f7584694dac523851f1cd931/tensorflow/core/kernels/non_max_suppression_op.cc#L137-L142\r\n\r\ntriggers an integer underflow when `selected` is empty, because `size()` is unsigned. It happens to cause no bugs in this case, but should better be fixed. If the loop order is reversed like `for (int j = 0; j <= selected.size() - 1; ++j)`, this would become a bug immediately.\r\n\r\nEDIT: From https://en.cppreference.com/w/cpp/language/implicit_conversion:\r\n\r\n> If the destination type is signed, the value does not change if the source integer can be represented in the destination type. Otherwise the result is implementation-defined. (Note that this is different from signed integer arithmetic overflow, which is undefined).\r\n\r\nSo the above code relies on implementation-defined behavior."}