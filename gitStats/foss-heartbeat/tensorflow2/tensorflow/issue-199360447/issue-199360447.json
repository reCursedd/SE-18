{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6713", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6713/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6713/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6713/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6713", "id": 199360447, "node_id": "MDU6SXNzdWUxOTkzNjA0NDc=", "number": 6713, "title": "Queues don't support enqueuing SparseTensor?", "user": {"login": "standy66", "id": 1818586, "node_id": "MDQ6VXNlcjE4MTg1ODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1818586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/standy66", "html_url": "https://github.com/standy66", "followers_url": "https://api.github.com/users/standy66/followers", "following_url": "https://api.github.com/users/standy66/following{/other_user}", "gists_url": "https://api.github.com/users/standy66/gists{/gist_id}", "starred_url": "https://api.github.com/users/standy66/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/standy66/subscriptions", "organizations_url": "https://api.github.com/users/standy66/orgs", "repos_url": "https://api.github.com/users/standy66/repos", "events_url": "https://api.github.com/users/standy66/events{/privacy}", "received_events_url": "https://api.github.com/users/standy66/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-01-07T12:58:38Z", "updated_at": "2017-10-09T11:41:41Z", "closed_at": "2017-01-07T20:48:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It seems that right now RandomShuffleQueue doesn't support SparseTensor. When I run this minimal example</p>\n<pre><code>import tensorflow as tf\nvalues = tf.constant([0, 1, 2], dtype=tf.int32)\nindices = tf.constant([[0, 0], [0, 1], [0, 2]], dtype=tf.int64)\nshape = tf.constant([1, 3], dtype=tf.int64)\n\nsparse = tf.SparseTensor(values=values, indices=indices, shape=shape)\nqueue = tf.RandomShuffleQueue(2, 1, [tf.int32])\nqueue.enqueue([sparse])\n</code></pre>\n<p>I get the following error:</p>\n<pre><code>TypeError                                 Traceback (most recent call last)\n&lt;ipython-input-12-a8e6053e53cf&gt; in &lt;module&gt;()\n----&gt; 1 queue.enqueue([sparse])\n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/ops/data_flow_ops.py in enqueue(self, vals, name)\n    320     with ops.name_scope(name, \"%s_enqueue\" % self._name,\n    321                         self._scope_vals(vals)) as scope:\n--&gt; 322       vals = self._check_enqueue_dtypes(vals)\n    323 \n    324       # NOTE(mrry): Not using a shape function because we need access to\n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/ops/data_flow_ops.py in _check_enqueue_dtypes(self, vals)\n    275     for i, (val, dtype) in enumerate(zip(vals, self._dtypes)):\n    276       tensors.append(ops.convert_to_tensor(val, dtype=dtype,\n--&gt; 277                                            name=\"component_%d\" % i))\n    278 \n    279     return tensors\n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py in convert_to_tensor(value, dtype, name, as_ref, preferred_dtype)\n    667 \n    668         if ret is None:\n--&gt; 669           ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n    670 \n    671         if ret is NotImplemented:\n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)\n    174                                          as_ref=False):\n    175   _ = as_ref\n--&gt; 176   return constant(v, dtype=dtype, name=name)\n    177 \n    178 \n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)\n    163   tensor_value = attr_value_pb2.AttrValue()\n    164   tensor_value.tensor.CopyFrom(\n--&gt; 165       tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape, verify_shape=verify_shape))\n    166   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)\n    167   const_tensor = g.create_op(\n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)\n    365       nparray = np.empty(shape, dtype=np_dt)\n    366     else:\n--&gt; 367       _AssertCompatible(values, dtype)\n    368       nparray = np.array(values, dtype=np_dt)\n    369       # check to them.\n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py in _AssertCompatible(values, dtype)\n    300     else:\n    301       raise TypeError(\"Expected %s, got %s of type '%s' instead.\" %\n--&gt; 302                       (dtype.name, repr(mismatch), type(mismatch).__name__))\n    303 \n    304 \n\nTypeError: Expected int32, got &lt;tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x105fedef0&gt; of type 'SparseTensor' instead.\n</code></pre>", "body_text": "It seems that right now RandomShuffleQueue doesn't support SparseTensor. When I run this minimal example\nimport tensorflow as tf\nvalues = tf.constant([0, 1, 2], dtype=tf.int32)\nindices = tf.constant([[0, 0], [0, 1], [0, 2]], dtype=tf.int64)\nshape = tf.constant([1, 3], dtype=tf.int64)\n\nsparse = tf.SparseTensor(values=values, indices=indices, shape=shape)\nqueue = tf.RandomShuffleQueue(2, 1, [tf.int32])\nqueue.enqueue([sparse])\n\nI get the following error:\nTypeError                                 Traceback (most recent call last)\n<ipython-input-12-a8e6053e53cf> in <module>()\n----> 1 queue.enqueue([sparse])\n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/ops/data_flow_ops.py in enqueue(self, vals, name)\n    320     with ops.name_scope(name, \"%s_enqueue\" % self._name,\n    321                         self._scope_vals(vals)) as scope:\n--> 322       vals = self._check_enqueue_dtypes(vals)\n    323 \n    324       # NOTE(mrry): Not using a shape function because we need access to\n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/ops/data_flow_ops.py in _check_enqueue_dtypes(self, vals)\n    275     for i, (val, dtype) in enumerate(zip(vals, self._dtypes)):\n    276       tensors.append(ops.convert_to_tensor(val, dtype=dtype,\n--> 277                                            name=\"component_%d\" % i))\n    278 \n    279     return tensors\n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py in convert_to_tensor(value, dtype, name, as_ref, preferred_dtype)\n    667 \n    668         if ret is None:\n--> 669           ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n    670 \n    671         if ret is NotImplemented:\n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)\n    174                                          as_ref=False):\n    175   _ = as_ref\n--> 176   return constant(v, dtype=dtype, name=name)\n    177 \n    178 \n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)\n    163   tensor_value = attr_value_pb2.AttrValue()\n    164   tensor_value.tensor.CopyFrom(\n--> 165       tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape, verify_shape=verify_shape))\n    166   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)\n    167   const_tensor = g.create_op(\n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)\n    365       nparray = np.empty(shape, dtype=np_dt)\n    366     else:\n--> 367       _AssertCompatible(values, dtype)\n    368       nparray = np.array(values, dtype=np_dt)\n    369       # check to them.\n\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py in _AssertCompatible(values, dtype)\n    300     else:\n    301       raise TypeError(\"Expected %s, got %s of type '%s' instead.\" %\n--> 302                       (dtype.name, repr(mismatch), type(mismatch).__name__))\n    303 \n    304 \n\nTypeError: Expected int32, got <tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x105fedef0> of type 'SparseTensor' instead.", "body": "It seems that right now RandomShuffleQueue doesn't support SparseTensor. When I run this minimal example\r\n```\r\nimport tensorflow as tf\r\nvalues = tf.constant([0, 1, 2], dtype=tf.int32)\r\nindices = tf.constant([[0, 0], [0, 1], [0, 2]], dtype=tf.int64)\r\nshape = tf.constant([1, 3], dtype=tf.int64)\r\n\r\nsparse = tf.SparseTensor(values=values, indices=indices, shape=shape)\r\nqueue = tf.RandomShuffleQueue(2, 1, [tf.int32])\r\nqueue.enqueue([sparse])\r\n```\r\nI get the following error:\r\n```\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-12-a8e6053e53cf> in <module>()\r\n----> 1 queue.enqueue([sparse])\r\n\r\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/ops/data_flow_ops.py in enqueue(self, vals, name)\r\n    320     with ops.name_scope(name, \"%s_enqueue\" % self._name,\r\n    321                         self._scope_vals(vals)) as scope:\r\n--> 322       vals = self._check_enqueue_dtypes(vals)\r\n    323 \r\n    324       # NOTE(mrry): Not using a shape function because we need access to\r\n\r\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/ops/data_flow_ops.py in _check_enqueue_dtypes(self, vals)\r\n    275     for i, (val, dtype) in enumerate(zip(vals, self._dtypes)):\r\n    276       tensors.append(ops.convert_to_tensor(val, dtype=dtype,\r\n--> 277                                            name=\"component_%d\" % i))\r\n    278 \r\n    279     return tensors\r\n\r\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py in convert_to_tensor(value, dtype, name, as_ref, preferred_dtype)\r\n    667 \r\n    668         if ret is None:\r\n--> 669           ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\r\n    670 \r\n    671         if ret is NotImplemented:\r\n\r\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)\r\n    174                                          as_ref=False):\r\n    175   _ = as_ref\r\n--> 176   return constant(v, dtype=dtype, name=name)\r\n    177 \r\n    178 \r\n\r\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)\r\n    163   tensor_value = attr_value_pb2.AttrValue()\r\n    164   tensor_value.tensor.CopyFrom(\r\n--> 165       tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape, verify_shape=verify_shape))\r\n    166   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)\r\n    167   const_tensor = g.create_op(\r\n\r\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)\r\n    365       nparray = np.empty(shape, dtype=np_dt)\r\n    366     else:\r\n--> 367       _AssertCompatible(values, dtype)\r\n    368       nparray = np.array(values, dtype=np_dt)\r\n    369       # check to them.\r\n\r\n/Users/astepanov/.virtualenvs/py_asr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py in _AssertCompatible(values, dtype)\r\n    300     else:\r\n    301       raise TypeError(\"Expected %s, got %s of type '%s' instead.\" %\r\n--> 302                       (dtype.name, repr(mismatch), type(mismatch).__name__))\r\n    303 \r\n    304 \r\n\r\nTypeError: Expected int32, got <tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x105fedef0> of type 'SparseTensor' instead.\r\n```"}