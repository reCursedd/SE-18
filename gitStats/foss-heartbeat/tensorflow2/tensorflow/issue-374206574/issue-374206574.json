{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23279", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23279/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23279/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23279/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/23279", "id": 374206574, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI1OTYxMTYz", "number": 23279, "title": "Prevent memory leak by storing strings instead of StringPiece in vector", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 390482148, "node_id": "MDU6TGFiZWwzOTA0ODIxNDg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20review", "name": "awaiting review", "color": "fef2c0", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "open", "locked": false, "assignee": {"login": "protoget", "id": 5117188, "node_id": "MDQ6VXNlcjUxMTcxODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5117188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/protoget", "html_url": "https://github.com/protoget", "followers_url": "https://api.github.com/users/protoget/followers", "following_url": "https://api.github.com/users/protoget/following{/other_user}", "gists_url": "https://api.github.com/users/protoget/gists{/gist_id}", "starred_url": "https://api.github.com/users/protoget/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/protoget/subscriptions", "organizations_url": "https://api.github.com/users/protoget/orgs", "repos_url": "https://api.github.com/users/protoget/repos", "events_url": "https://api.github.com/users/protoget/events{/privacy}", "received_events_url": "https://api.github.com/users/protoget/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "protoget", "id": 5117188, "node_id": "MDQ6VXNlcjUxMTcxODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5117188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/protoget", "html_url": "https://github.com/protoget", "followers_url": "https://api.github.com/users/protoget/followers", "following_url": "https://api.github.com/users/protoget/following{/other_user}", "gists_url": "https://api.github.com/users/protoget/gists{/gist_id}", "starred_url": "https://api.github.com/users/protoget/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/protoget/subscriptions", "organizations_url": "https://api.github.com/users/protoget/orgs", "repos_url": "https://api.github.com/users/protoget/repos", "events_url": "https://api.github.com/users/protoget/events{/privacy}", "received_events_url": "https://api.github.com/users/protoget/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-10-26T02:53:01Z", "updated_at": "2018-11-10T18:48:18Z", "closed_at": null, "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23279", "html_url": "https://github.com/tensorflow/tensorflow/pull/23279", "diff_url": "https://github.com/tensorflow/tensorflow/pull/23279.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/23279.patch"}, "body_html": "<p>This fixes a memory leak where a <code>StringPiece</code> stored in a vector, hence the <code>AttrVec</code> here, outlives the <code>const char*</code> buffer he has been initialized with.</p>\n<p>I observed this behaviour by adding an attribute value to the <code>AttrBuilder</code> from JNI code (Java Native), where the buffer has to be released before switching back to the JVM, e.g.</p>\n<pre><code>const char* cname = env-&gt;GetStringUTFChars(attr_name, nullptr);\nTFE_OpSetAttrInt(op, cname, static_cast&lt;int64_t&gt;(value));\nenv-&gt;ReleaseStringUTFChars(attr_name, cname);\n</code></pre>\n<p>This bug was only observable for the <code>Int/Float/Bool/DataType</code> attributes, others were falling directly into the <code>SetInAttrValueMap</code> which was already converting the <code>StringPiece</code> into a <code>string</code> before adding it into the <code>AttrValueMap</code>.</p>", "body_text": "This fixes a memory leak where a StringPiece stored in a vector, hence the AttrVec here, outlives the const char* buffer he has been initialized with.\nI observed this behaviour by adding an attribute value to the AttrBuilder from JNI code (Java Native), where the buffer has to be released before switching back to the JVM, e.g.\nconst char* cname = env->GetStringUTFChars(attr_name, nullptr);\nTFE_OpSetAttrInt(op, cname, static_cast<int64_t>(value));\nenv->ReleaseStringUTFChars(attr_name, cname);\n\nThis bug was only observable for the Int/Float/Bool/DataType attributes, others were falling directly into the SetInAttrValueMap which was already converting the StringPiece into a string before adding it into the AttrValueMap.", "body": "This fixes a memory leak where a `StringPiece` stored in a vector, hence the `AttrVec` here, outlives the `const char*` buffer he has been initialized with.\r\n\r\nI observed this behaviour by adding an attribute value to the `AttrBuilder` from JNI code (Java Native), where the buffer has to be released before switching back to the JVM, e.g.\r\n```\r\nconst char* cname = env->GetStringUTFChars(attr_name, nullptr);\r\nTFE_OpSetAttrInt(op, cname, static_cast<int64_t>(value));\r\nenv->ReleaseStringUTFChars(attr_name, cname);\r\n```\r\nThis bug was only observable for the `Int/Float/Bool/DataType` attributes, others were falling directly into the `SetInAttrValueMap` which was already converting the `StringPiece` into a `string` before adding it into the `AttrValueMap`.\r\n"}