{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/355208432", "html_url": "https://github.com/tensorflow/tensorflow/issues/11250#issuecomment-355208432", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11250", "id": 355208432, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTIwODQzMg==", "user": {"login": "vishalghor", "id": 23045660, "node_id": "MDQ6VXNlcjIzMDQ1NjYw", "avatar_url": "https://avatars1.githubusercontent.com/u/23045660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishalghor", "html_url": "https://github.com/vishalghor", "followers_url": "https://api.github.com/users/vishalghor/followers", "following_url": "https://api.github.com/users/vishalghor/following{/other_user}", "gists_url": "https://api.github.com/users/vishalghor/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishalghor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishalghor/subscriptions", "organizations_url": "https://api.github.com/users/vishalghor/orgs", "repos_url": "https://api.github.com/users/vishalghor/repos", "events_url": "https://api.github.com/users/vishalghor/events{/privacy}", "received_events_url": "https://api.github.com/users/vishalghor/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-04T06:27:34Z", "updated_at": "2018-01-04T06:29:49Z", "author_association": "NONE", "body_html": "<p>Hi all,</p>\n<p>I was finally able to  inference mobilenet successfully using the label_image.py with slight modifications.<br>\nI have modified the part where image is loaded with load_image() function.<br>\nThe code of label_image.py which i had modified.<br>\nHopefully it will help others in resolving the errors.:)<br>\n`</p>\n<pre><code>from __future__ import division\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nimport argparse\nimport sys\nimport PIL\nfrom PIL import Image\nimport tensorflow as tf\nimport numpy as np\nfrom numpy import array\n'''\nparser = argparse.ArgumentParser()\nparser.add_argument(\n    '--image', required=True, type=str, help='Absolute path to image file.')\nparser.add_argument(\n    '--num_top_predictions',\n    type=int,\n    default=5,\n    help='Display this many predictions.')\nparser.add_argument(\n    '--graph',\n    required=True,\n    type=str,\n    help='Absolute path to graph file (.pb)')\nparser.add_argument(\n    '--labels',\n    required=True,\n    type=str,\n    help='Absolute path to labels file (.txt)')\nparser.add_argument(\n    '--output_layer',\n    type=str,\n    default='final_result:0',\n    help='Name of the result operation')\nparser.add_argument(\n    '--input_layer',\n    type=str,\n    default='DecodeJpeg/contents:0',\n    help='Name of the input operation')\n\n'''\ndef load_image(filename):\n  \"\"\"Read in the image_data to be classified.\"\"\"\n  #return tf.gfile.FastGFile(filename, 'rb').read()\n  \n\n  im=Image.open(filename)\n  image=np.asarray(im, dtype=\"float32\")\n  img=(image-128.0)/128.0\n  \n  img=array(img).reshape(1,224,224,3)\n  return img\n\ndef load_labels(filename):\n  \"\"\"Read in labels, one label per line.\"\"\"\n  return [line.rstrip() for line in tf.gfile.GFile(filename)]\n\n\ndef load_graph(filename):\n  \"\"\"Unpersists graph from file as default graph.\"\"\"\n  with tf.gfile.FastGFile('/home/ubuntu/ML_GIT/TensorFlow/MobileNet_Multi_label/output_graph.pb', 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    tf.import_graph_def(graph_def, name='')\n\n\ndef run_graph(image_data, labels, input_layer_name, output_layer_name,\n              num_top_predictions):\n\n\n  with tf.Session() as sess:\n    # Feed the image_data as input to the graph.\n    #   predictions  will contain a two-dimensional array, where one\n    #   dimension represents the input image count, and the other has\n    #   predictions per class\n    input_node = sess.graph.get_tensor_by_name('input:0')\n    output_node = sess.graph.get_tensor_by_name('final_result:0')\n\n    softmax_tensor = sess.graph.get_tensor_by_name(output_layer_name)\n    predictions, = sess.run(softmax_tensor, {input_layer_name: image_data})\n    \n    # Sort to show labels in order of confidence\n    top_k = predictions.argsort()[-num_top_predictions:][::-1]\n    for node_id in top_k:\n      human_string = labels[node_id]\n      score = predictions[node_id]\n      print('%s (score = %.5f)' % (human_string, score))\n\n    return 0\n\n\ndef main(argv):\n  \"\"\"Runs inference on an image.\"\"\"\n  '''\n  if argv[1:]:\n    raise ValueError('Unused Command Line Args: %s' % argv[1:])\n\n  if not tf.gfile.Exists(FLAGS.image):\n    tf.logging.fatal('image file does not exist %s', FLAGS.image)\n\n  if not tf.gfile.Exists(FLAGS.labels):\n    tf.logging.fatal('labels file does not exist %s', FLAGS.labels)\n\n  if not tf.gfile.Exists(FLAGS.graph):\n    tf.logging.fatal('graph file does not exist %s', FLAGS.graph)\n  '''\n  input_layer='input:0'\n  output_layer='final_result:0'\n  num_top_predictions=5\n  # load image\n  image_data = load_image('path-to-image/9_56.JPG')\n\n  # load labels\n  labels = load_labels('path-to/labels.txt')\n\n  # load graph, which is stored in the default session\n  load_graph('path-to/output_graph.pb')\n\n  run_graph(image_data, labels,input_layer,output_layer,\n            num_top_predictions)\n\n\nif __name__ == '__main__':\n  #FLAGS, unparsed = parser.parse_known_args()\n  tf.app.run(main=main)\n</code></pre>\n<p>`</p>\n<p>The remaining step remains the same as inceptionv3.</p>\n<p>Thanks and regards</p>", "body_text": "Hi all,\nI was finally able to  inference mobilenet successfully using the label_image.py with slight modifications.\nI have modified the part where image is loaded with load_image() function.\nThe code of label_image.py which i had modified.\nHopefully it will help others in resolving the errors.:)\n`\nfrom __future__ import division\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nimport argparse\nimport sys\nimport PIL\nfrom PIL import Image\nimport tensorflow as tf\nimport numpy as np\nfrom numpy import array\n'''\nparser = argparse.ArgumentParser()\nparser.add_argument(\n    '--image', required=True, type=str, help='Absolute path to image file.')\nparser.add_argument(\n    '--num_top_predictions',\n    type=int,\n    default=5,\n    help='Display this many predictions.')\nparser.add_argument(\n    '--graph',\n    required=True,\n    type=str,\n    help='Absolute path to graph file (.pb)')\nparser.add_argument(\n    '--labels',\n    required=True,\n    type=str,\n    help='Absolute path to labels file (.txt)')\nparser.add_argument(\n    '--output_layer',\n    type=str,\n    default='final_result:0',\n    help='Name of the result operation')\nparser.add_argument(\n    '--input_layer',\n    type=str,\n    default='DecodeJpeg/contents:0',\n    help='Name of the input operation')\n\n'''\ndef load_image(filename):\n  \"\"\"Read in the image_data to be classified.\"\"\"\n  #return tf.gfile.FastGFile(filename, 'rb').read()\n  \n\n  im=Image.open(filename)\n  image=np.asarray(im, dtype=\"float32\")\n  img=(image-128.0)/128.0\n  \n  img=array(img).reshape(1,224,224,3)\n  return img\n\ndef load_labels(filename):\n  \"\"\"Read in labels, one label per line.\"\"\"\n  return [line.rstrip() for line in tf.gfile.GFile(filename)]\n\n\ndef load_graph(filename):\n  \"\"\"Unpersists graph from file as default graph.\"\"\"\n  with tf.gfile.FastGFile('/home/ubuntu/ML_GIT/TensorFlow/MobileNet_Multi_label/output_graph.pb', 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    tf.import_graph_def(graph_def, name='')\n\n\ndef run_graph(image_data, labels, input_layer_name, output_layer_name,\n              num_top_predictions):\n\n\n  with tf.Session() as sess:\n    # Feed the image_data as input to the graph.\n    #   predictions  will contain a two-dimensional array, where one\n    #   dimension represents the input image count, and the other has\n    #   predictions per class\n    input_node = sess.graph.get_tensor_by_name('input:0')\n    output_node = sess.graph.get_tensor_by_name('final_result:0')\n\n    softmax_tensor = sess.graph.get_tensor_by_name(output_layer_name)\n    predictions, = sess.run(softmax_tensor, {input_layer_name: image_data})\n    \n    # Sort to show labels in order of confidence\n    top_k = predictions.argsort()[-num_top_predictions:][::-1]\n    for node_id in top_k:\n      human_string = labels[node_id]\n      score = predictions[node_id]\n      print('%s (score = %.5f)' % (human_string, score))\n\n    return 0\n\n\ndef main(argv):\n  \"\"\"Runs inference on an image.\"\"\"\n  '''\n  if argv[1:]:\n    raise ValueError('Unused Command Line Args: %s' % argv[1:])\n\n  if not tf.gfile.Exists(FLAGS.image):\n    tf.logging.fatal('image file does not exist %s', FLAGS.image)\n\n  if not tf.gfile.Exists(FLAGS.labels):\n    tf.logging.fatal('labels file does not exist %s', FLAGS.labels)\n\n  if not tf.gfile.Exists(FLAGS.graph):\n    tf.logging.fatal('graph file does not exist %s', FLAGS.graph)\n  '''\n  input_layer='input:0'\n  output_layer='final_result:0'\n  num_top_predictions=5\n  # load image\n  image_data = load_image('path-to-image/9_56.JPG')\n\n  # load labels\n  labels = load_labels('path-to/labels.txt')\n\n  # load graph, which is stored in the default session\n  load_graph('path-to/output_graph.pb')\n\n  run_graph(image_data, labels,input_layer,output_layer,\n            num_top_predictions)\n\n\nif __name__ == '__main__':\n  #FLAGS, unparsed = parser.parse_known_args()\n  tf.app.run(main=main)\n\n`\nThe remaining step remains the same as inceptionv3.\nThanks and regards", "body": "Hi all,\r\n\r\nI was finally able to  inference mobilenet successfully using the label_image.py with slight modifications.\r\nI have modified the part where image is loaded with load_image() function.\r\nThe code of label_image.py which i had modified. \r\nHopefully it will help others in resolving the errors.:)  \r\n`\r\n\r\n    from __future__ import division\r\n    from __future__ import absolute_import\r\n    from __future__ import print_function\r\n    \r\n    import argparse\r\n    import sys\r\n    import PIL\r\n    from PIL import Image\r\n    import tensorflow as tf\r\n    import numpy as np\r\n    from numpy import array\r\n    '''\r\n    parser = argparse.ArgumentParser()\r\n    parser.add_argument(\r\n        '--image', required=True, type=str, help='Absolute path to image file.')\r\n    parser.add_argument(\r\n        '--num_top_predictions',\r\n        type=int,\r\n        default=5,\r\n        help='Display this many predictions.')\r\n    parser.add_argument(\r\n        '--graph',\r\n        required=True,\r\n        type=str,\r\n        help='Absolute path to graph file (.pb)')\r\n    parser.add_argument(\r\n        '--labels',\r\n        required=True,\r\n        type=str,\r\n        help='Absolute path to labels file (.txt)')\r\n    parser.add_argument(\r\n        '--output_layer',\r\n        type=str,\r\n        default='final_result:0',\r\n        help='Name of the result operation')\r\n    parser.add_argument(\r\n        '--input_layer',\r\n        type=str,\r\n        default='DecodeJpeg/contents:0',\r\n        help='Name of the input operation')\r\n    \r\n    '''\r\n    def load_image(filename):\r\n      \"\"\"Read in the image_data to be classified.\"\"\"\r\n      #return tf.gfile.FastGFile(filename, 'rb').read()\r\n      \r\n    \r\n      im=Image.open(filename)\r\n      image=np.asarray(im, dtype=\"float32\")\r\n      img=(image-128.0)/128.0\r\n      \r\n      img=array(img).reshape(1,224,224,3)\r\n      return img\r\n    \r\n    def load_labels(filename):\r\n      \"\"\"Read in labels, one label per line.\"\"\"\r\n      return [line.rstrip() for line in tf.gfile.GFile(filename)]\r\n    \r\n    \r\n    def load_graph(filename):\r\n      \"\"\"Unpersists graph from file as default graph.\"\"\"\r\n      with tf.gfile.FastGFile('/home/ubuntu/ML_GIT/TensorFlow/MobileNet_Multi_label/output_graph.pb', 'rb') as f:\r\n        graph_def = tf.GraphDef()\r\n        graph_def.ParseFromString(f.read())\r\n        tf.import_graph_def(graph_def, name='')\r\n    \r\n    \r\n    def run_graph(image_data, labels, input_layer_name, output_layer_name,\r\n                  num_top_predictions):\r\n    \r\n    \r\n      with tf.Session() as sess:\r\n        # Feed the image_data as input to the graph.\r\n        #   predictions  will contain a two-dimensional array, where one\r\n        #   dimension represents the input image count, and the other has\r\n        #   predictions per class\r\n        input_node = sess.graph.get_tensor_by_name('input:0')\r\n        output_node = sess.graph.get_tensor_by_name('final_result:0')\r\n    \r\n        softmax_tensor = sess.graph.get_tensor_by_name(output_layer_name)\r\n        predictions, = sess.run(softmax_tensor, {input_layer_name: image_data})\r\n        \r\n        # Sort to show labels in order of confidence\r\n        top_k = predictions.argsort()[-num_top_predictions:][::-1]\r\n        for node_id in top_k:\r\n          human_string = labels[node_id]\r\n          score = predictions[node_id]\r\n          print('%s (score = %.5f)' % (human_string, score))\r\n    \r\n        return 0\r\n    \r\n    \r\n    def main(argv):\r\n      \"\"\"Runs inference on an image.\"\"\"\r\n      '''\r\n      if argv[1:]:\r\n        raise ValueError('Unused Command Line Args: %s' % argv[1:])\r\n    \r\n      if not tf.gfile.Exists(FLAGS.image):\r\n        tf.logging.fatal('image file does not exist %s', FLAGS.image)\r\n    \r\n      if not tf.gfile.Exists(FLAGS.labels):\r\n        tf.logging.fatal('labels file does not exist %s', FLAGS.labels)\r\n    \r\n      if not tf.gfile.Exists(FLAGS.graph):\r\n        tf.logging.fatal('graph file does not exist %s', FLAGS.graph)\r\n      '''\r\n      input_layer='input:0'\r\n      output_layer='final_result:0'\r\n      num_top_predictions=5\r\n      # load image\r\n      image_data = load_image('path-to-image/9_56.JPG')\r\n    \r\n      # load labels\r\n      labels = load_labels('path-to/labels.txt')\r\n    \r\n      # load graph, which is stored in the default session\r\n      load_graph('path-to/output_graph.pb')\r\n    \r\n      run_graph(image_data, labels,input_layer,output_layer,\r\n                num_top_predictions)\r\n    \r\n    \r\n    if __name__ == '__main__':\r\n      #FLAGS, unparsed = parser.parse_known_args()\r\n      tf.app.run(main=main)\r\n    \r\n`  \r\n \r\n  The remaining step remains the same as inceptionv3.\r\n\r\nThanks and regards"}