{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/300227874", "html_url": "https://github.com/tensorflow/tensorflow/issues/9781#issuecomment-300227874", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9781", "id": 300227874, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDIyNzg3NA==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-09T16:47:32Z", "updated_at": "2017-05-09T16:47:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It's not clear this new default would be a net benefit. People seem to care a lot about training models on GPU fast. This change would double default shape transfer costs, so benchmarking would be needed to make this doesn't introduce a bottleneck that makes some model unexpectedly slow.</p>\n<p>Fortunately in Python, there's a general technique you can use to create your own set of custom defaults, called monkey-patching.</p>\n<p>You could have a module that rewrites TensorFlow Python public API functions with sane defaults for your applications, and because of TensorFlow API compatibility requirements, this would be easy to maintain.</p>\n<p>Here's a fun example of monkey-patching I used to figure out who is adding 'Mul' ops to my graph.</p>\n<pre><code>def intersept_op_creation(op_type_name_to_intercept):\n  \"\"\"Drops into PDB when particular op type is added to graph.\"\"\"\n  from tensorflow.python.framework import op_def_library\n  old_apply_op = op_def_library.OpDefLibrary.apply_op\n  def my_apply_op(obj, op_type_name, name=None, **keywords):\n    print(op_type_name+\"-\"+str(name))\n    if op_type_name == op_type_name_to_intercept:\n      print(\"Why dost though add %s to my graph!!\" %(op_type_name_to_intercept,))\n      import pdb; pdb.set_trace()\n    return(old_apply_op(obj, op_type_name, name=name, **keywords))\n  op_def_library.OpDefLibrary.apply_op=my_apply_op\nintercept_op_creation('Mul')\n\n</code></pre>", "body_text": "It's not clear this new default would be a net benefit. People seem to care a lot about training models on GPU fast. This change would double default shape transfer costs, so benchmarking would be needed to make this doesn't introduce a bottleneck that makes some model unexpectedly slow.\nFortunately in Python, there's a general technique you can use to create your own set of custom defaults, called monkey-patching.\nYou could have a module that rewrites TensorFlow Python public API functions with sane defaults for your applications, and because of TensorFlow API compatibility requirements, this would be easy to maintain.\nHere's a fun example of monkey-patching I used to figure out who is adding 'Mul' ops to my graph.\ndef intersept_op_creation(op_type_name_to_intercept):\n  \"\"\"Drops into PDB when particular op type is added to graph.\"\"\"\n  from tensorflow.python.framework import op_def_library\n  old_apply_op = op_def_library.OpDefLibrary.apply_op\n  def my_apply_op(obj, op_type_name, name=None, **keywords):\n    print(op_type_name+\"-\"+str(name))\n    if op_type_name == op_type_name_to_intercept:\n      print(\"Why dost though add %s to my graph!!\" %(op_type_name_to_intercept,))\n      import pdb; pdb.set_trace()\n    return(old_apply_op(obj, op_type_name, name=name, **keywords))\n  op_def_library.OpDefLibrary.apply_op=my_apply_op\nintercept_op_creation('Mul')", "body": "It's not clear this new default would be a net benefit. People seem to care a lot about training models on GPU fast. This change would double default shape transfer costs, so benchmarking would be needed to make this doesn't introduce a bottleneck that makes some model unexpectedly slow.\r\n\r\nFortunately in Python, there's a general technique you can use to create your own set of custom defaults, called monkey-patching.\r\n\r\nYou could have a module that rewrites TensorFlow Python public API functions with sane defaults for your applications, and because of TensorFlow API compatibility requirements, this would be easy to maintain.\r\n\r\nHere's a fun example of monkey-patching I used to figure out who is adding 'Mul' ops to my graph. \r\n```\r\ndef intersept_op_creation(op_type_name_to_intercept):\r\n  \"\"\"Drops into PDB when particular op type is added to graph.\"\"\"\r\n  from tensorflow.python.framework import op_def_library\r\n  old_apply_op = op_def_library.OpDefLibrary.apply_op\r\n  def my_apply_op(obj, op_type_name, name=None, **keywords):\r\n    print(op_type_name+\"-\"+str(name))\r\n    if op_type_name == op_type_name_to_intercept:\r\n      print(\"Why dost though add %s to my graph!!\" %(op_type_name_to_intercept,))\r\n      import pdb; pdb.set_trace()\r\n    return(old_apply_op(obj, op_type_name, name=name, **keywords))\r\n  op_def_library.OpDefLibrary.apply_op=my_apply_op\r\nintercept_op_creation('Mul')\r\n\r\n```"}