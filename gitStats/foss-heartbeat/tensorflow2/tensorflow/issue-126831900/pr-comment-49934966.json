{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/49934966", "pull_request_review_id": null, "id": 49934966, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM0OTY2", "diff_hunk": "@@ -0,0 +1,75 @@\n+/* Copyright 2015 Google Inc. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#ifndef TENSORFLOW_KERNELS_SCATTER_OP_H_\n+#define TENSORFLOW_KERNELS_SCATTER_OP_H_\n+\n+// Functor definitions for Scatter ops, must be compilable by nvcc.\n+\n+#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n+#include \"tensorflow/core/framework/tensor_types.h\"\n+\n+namespace tensorflow {\n+\n+class OpKernelContext;\n+\n+namespace scatter_op {\n+\n+enum class UpdateOp { ASSIGN, ADD, SUB };\n+\n+template <UpdateOp Op>\n+struct Assign {};\n+template <>\n+struct Assign<UpdateOp::ASSIGN> {\n+  template <typename Params, typename Update>\n+  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n+  static void Run(Params&& p, const Update& u) {\n+    p = u;\n+  }\n+};\n+template <>\n+struct Assign<UpdateOp::ADD> {\n+  template <typename Params, typename Update>\n+  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE\n+  static void Run(Params&& p, const Update& u) {\n+    p += u;", "path": "tensorflow/core/kernels/scatter_op.h", "position": null, "original_position": 47, "commit_id": "a864d2497ef4926138d69a320cc3ac6a02f6e3a4", "original_commit_id": "9e93e19c6f134b970a01332ee11f2059436563e5", "user": {"login": "keveman", "id": 229914, "node_id": "MDQ6VXNlcjIyOTkxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/229914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keveman", "html_url": "https://github.com/keveman", "followers_url": "https://api.github.com/users/keveman/followers", "following_url": "https://api.github.com/users/keveman/following{/other_user}", "gists_url": "https://api.github.com/users/keveman/gists{/gist_id}", "starred_url": "https://api.github.com/users/keveman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keveman/subscriptions", "organizations_url": "https://api.github.com/users/keveman/orgs", "repos_url": "https://api.github.com/users/keveman/repos", "events_url": "https://api.github.com/users/keveman/events{/privacy}", "received_events_url": "https://api.github.com/users/keveman/received_events", "type": "User", "site_admin": false}, "body": "I am not sure about your intention of making the type of 'p' an rvalue reference. We don't use rvalue references at all in rest of TensorFlow. Also, it's counter intuitive when reading this code to see an argument taken as a Rvalue (even though a reference) and mutating it. This template would match a call like `Run(10, x)`, and that is bizarre. Why not simply `Params* p`? Also, the following is the semantics of scatter_add : \n\n> Duplicate entries are handled correctly: if multiple indices reference the same location, their contributions add.\n\nThis code when called from many threads concurrently will lose most of the updates. Please consider reading up on how to do scatter operations in cuda. [Thrust](https://github.com/thrust/thrust/blob/master/testing/backend/cuda/scatter.cu) has some examples.\n", "created_at": "2016-01-16T17:57:33Z", "updated_at": "2016-02-09T07:50:18Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/782#discussion_r49934966", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/782", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/49934966"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/782#discussion_r49934966"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/782"}}, "body_html": "<p>I am not sure about your intention of making the type of 'p' an rvalue reference. We don't use rvalue references at all in rest of TensorFlow. Also, it's counter intuitive when reading this code to see an argument taken as a Rvalue (even though a reference) and mutating it. This template would match a call like <code>Run(10, x)</code>, and that is bizarre. Why not simply <code>Params* p</code>? Also, the following is the semantics of scatter_add :</p>\n<blockquote>\n<p>Duplicate entries are handled correctly: if multiple indices reference the same location, their contributions add.</p>\n</blockquote>\n<p>This code when called from many threads concurrently will lose most of the updates. Please consider reading up on how to do scatter operations in cuda. <a href=\"https://github.com/thrust/thrust/blob/master/testing/backend/cuda/scatter.cu\">Thrust</a> has some examples.</p>", "body_text": "I am not sure about your intention of making the type of 'p' an rvalue reference. We don't use rvalue references at all in rest of TensorFlow. Also, it's counter intuitive when reading this code to see an argument taken as a Rvalue (even though a reference) and mutating it. This template would match a call like Run(10, x), and that is bizarre. Why not simply Params* p? Also, the following is the semantics of scatter_add :\n\nDuplicate entries are handled correctly: if multiple indices reference the same location, their contributions add.\n\nThis code when called from many threads concurrently will lose most of the updates. Please consider reading up on how to do scatter operations in cuda. Thrust has some examples."}