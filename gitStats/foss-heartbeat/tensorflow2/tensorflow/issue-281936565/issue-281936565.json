{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15351", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15351/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15351/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15351/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15351", "id": 281936565, "node_id": "MDU6SXNzdWUyODE5MzY1NjU=", "number": 15351, "title": "questions about shared variables between CPU and GPU ", "user": {"login": "Emerald01", "id": 31748898, "node_id": "MDQ6VXNlcjMxNzQ4ODk4", "avatar_url": "https://avatars2.githubusercontent.com/u/31748898?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emerald01", "html_url": "https://github.com/Emerald01", "followers_url": "https://api.github.com/users/Emerald01/followers", "following_url": "https://api.github.com/users/Emerald01/following{/other_user}", "gists_url": "https://api.github.com/users/Emerald01/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emerald01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emerald01/subscriptions", "organizations_url": "https://api.github.com/users/Emerald01/orgs", "repos_url": "https://api.github.com/users/Emerald01/repos", "events_url": "https://api.github.com/users/Emerald01/events{/privacy}", "received_events_url": "https://api.github.com/users/Emerald01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-13T23:50:48Z", "updated_at": "2017-12-13T23:58:58Z", "closed_at": "2017-12-13T23:58:58Z", "author_association": "NONE", "body_html": "<p>Dear developers:</p>\n<p>I looked at cifar10_multi_gpu_train.py, the idea about sharing model params among CPU and GPUs is inspiring. However, I have a few questions that I want to understand well before I can apply to my own problem.</p>\n<p>As far as I can tell, the model params are stored in CPU by looking into the tower_loss() function since cifar10.py explicitly pinned down all variables at \"/cpu:0\". Then function train() wraps up tower_loss() with gpu device like this:</p>\n<p><code>for i in xrange(FLAGS.num_gpus):</code><br>\n<code>       with tf.device('/gpu:%d' % i):</code><br>\n<code>           loss = tower_loss(scope)</code><br>\n<code>           tf.get_variable_scope().reuse_variables()</code></p>\n<p>Using this way, I bet model params are stored in CPU and there is no extra copy anywhere because it is set to just reuse the same variables in the scope, while GPU stored gradient operations written in tower_loss(). In the way, I believe the model params have to transfer from CPU to GPU whenever GPU calls for these params to operate upon. It would be inefficient if doing multiple transfer to GPU I believe. I notice \"identity\" operation in the end of tower_loss(). Is \"tf.identity(total_loss)\" doing the trick so CPU transfers model params to the GPU only once, then GPU just holds the local copy from then on?</p>", "body_text": "Dear developers:\nI looked at cifar10_multi_gpu_train.py, the idea about sharing model params among CPU and GPUs is inspiring. However, I have a few questions that I want to understand well before I can apply to my own problem.\nAs far as I can tell, the model params are stored in CPU by looking into the tower_loss() function since cifar10.py explicitly pinned down all variables at \"/cpu:0\". Then function train() wraps up tower_loss() with gpu device like this:\nfor i in xrange(FLAGS.num_gpus):\n       with tf.device('/gpu:%d' % i):\n           loss = tower_loss(scope)\n           tf.get_variable_scope().reuse_variables()\nUsing this way, I bet model params are stored in CPU and there is no extra copy anywhere because it is set to just reuse the same variables in the scope, while GPU stored gradient operations written in tower_loss(). In the way, I believe the model params have to transfer from CPU to GPU whenever GPU calls for these params to operate upon. It would be inefficient if doing multiple transfer to GPU I believe. I notice \"identity\" operation in the end of tower_loss(). Is \"tf.identity(total_loss)\" doing the trick so CPU transfers model params to the GPU only once, then GPU just holds the local copy from then on?", "body": "Dear developers:\r\n\r\nI looked at cifar10_multi_gpu_train.py, the idea about sharing model params among CPU and GPUs is inspiring. However, I have a few questions that I want to understand well before I can apply to my own problem. \r\n\r\nAs far as I can tell, the model params are stored in CPU by looking into the tower_loss() function since cifar10.py explicitly pinned down all variables at \"/cpu:0\". Then function train() wraps up tower_loss() with gpu device like this:\r\n\r\n`for i in xrange(FLAGS.num_gpus):`\r\n`       with tf.device('/gpu:%d' % i):`\r\n`           loss = tower_loss(scope)`\r\n`           tf.get_variable_scope().reuse_variables()`\r\n\r\nUsing this way, I bet model params are stored in CPU and there is no extra copy anywhere because it is set to just reuse the same variables in the scope, while GPU stored gradient operations written in tower_loss(). In the way, I believe the model params have to transfer from CPU to GPU whenever GPU calls for these params to operate upon. It would be inefficient if doing multiple transfer to GPU I believe. I notice \"identity\" operation in the end of tower_loss(). Is \"tf.identity(total_loss)\" doing the trick so CPU transfers model params to the GPU only once, then GPU just holds the local copy from then on?\r\n\r\n"}