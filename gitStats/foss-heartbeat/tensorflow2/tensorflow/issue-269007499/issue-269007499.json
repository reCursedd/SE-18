{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14021", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14021/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14021/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14021/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14021", "id": 269007499, "node_id": "MDU6SXNzdWUyNjkwMDc0OTk=", "number": 14021, "title": "tf.train.start_queue_runners cannot run under GPU\uff1f", "user": {"login": "juventi", "id": 30011671, "node_id": "MDQ6VXNlcjMwMDExNjcx", "avatar_url": "https://avatars3.githubusercontent.com/u/30011671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juventi", "html_url": "https://github.com/juventi", "followers_url": "https://api.github.com/users/juventi/followers", "following_url": "https://api.github.com/users/juventi/following{/other_user}", "gists_url": "https://api.github.com/users/juventi/gists{/gist_id}", "starred_url": "https://api.github.com/users/juventi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juventi/subscriptions", "organizations_url": "https://api.github.com/users/juventi/orgs", "repos_url": "https://api.github.com/users/juventi/repos", "events_url": "https://api.github.com/users/juventi/events{/privacy}", "received_events_url": "https://api.github.com/users/juventi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-27T07:03:51Z", "updated_at": "2017-10-27T17:37:23Z", "closed_at": "2017-10-27T17:37:23Z", "author_association": "NONE", "body_html": "<p>Please go to Stack Overflow for help and support:</p>\n<p><a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">https://stackoverflow.com/questions/tagged/tensorflow</a></p>\n<p>If you open a GitHub issue, here is our policy:</p>\n<ol>\n<li>It must be a bug or a feature request.</li>\n<li>The form below must be filled out.</li>\n<li>It shouldn't be a TensorBoard issue. Those go <a href=\"https://github.com/tensorflow/tensorboard/issues\">here</a>.</li>\n</ol>\n<p><strong>Here's why we have that policy</strong>: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:</li>\n<li><strong>TensorFlow version (use command below)</strong>:</li>\n<li><strong>Python version</strong>:</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<p>python 3.5<br>\ncuda 8.0 / cudnn 5.1<br>\ntensorflow 1.2.1<br>\ngpu memory Usage &gt; 95%<br>\ngpu Load &lt; 30%<br>\ncpu load &gt; 85%</p>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<p>When using tf.train.start_queue_runners in trainning,  the trainning process automatically<br>\ngoes into cpu mode, when use tf.device('/gpu:0') an error accur thats could not find the data in queue;<br>\nso, how should i use queue_runners+tfrecords in GPU?</p>\n<h3>Source code / logs</h3>\n<p>Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.</p>\n<p>Main Trainning Code:</p>\n<p>with tf.Session() as sess:<br>\n#with tf.device('/gpu:0')<br>\nsess.run(init)<br>\nsaver = tf.train.Saver()</p>\n<pre><code>coord = tf.train.Coordinator() \nthreads = tf.train.start_queue_runners(sess=sess, coord = coord)\n\nglobal_step = 1\n\nif isTrain: \n    tf.train.write_graph(sess.graph_def, './MaxoutModel/', \"model.pb\", as_text=True)\n    ckpt = tf.train.get_checkpoint_state('./MaxoutModel/')\n    \n    if ckpt and ckpt.model_checkpoint_path:\n        saver.restore(sess, ckpt.model_checkpoint_path)\n        print('Load Model OK!')\n    else:\n        print('Load Model Error!!')\n        pass\n\n    for i in range(100):\n        \n        # learning rate decay\n        max_learning_rate = 0.02\n        min_learning_rate = 0.0001\n        decay_speed = 16000\n        learning_rate = min_learning_rate + (max_learning_rate - min_learning_rate) * math.exp(-i/decay_speed)\n\n        tra_images, tra_labels = sess.run([img_batch, label_batch])\n        sess.run(train_step, {X: batch_X, Y_: batch_Y, lr: learning_rate,  keep_prob: 0.75})\n\n        if i%20 == 0:\n            cost = sess.run(cross_entropy, \n                    {X: tra_images, Y_: tra_labels , keep_prob: 1.0})\n        if i%20 == 0 and i !=0 :    \n            saver.save(sess,save_path='./BNModel/model.ckpt',global_step=global_step+1)\n    saver.save(sess,save_path='./BNModel/model.ckpt',global_step=global_step+1)\n</code></pre>", "body_text": "Please go to Stack Overflow for help and support:\nhttps://stackoverflow.com/questions/tagged/tensorflow\nIf you open a GitHub issue, here is our policy:\n\nIt must be a bug or a feature request.\nThe form below must be filled out.\nIt shouldn't be a TensorBoard issue. Those go here.\n\nHere's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nTensorFlow installed from (source or binary):\nTensorFlow version (use command below):\nPython version:\nBazel version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\npython 3.5\ncuda 8.0 / cudnn 5.1\ntensorflow 1.2.1\ngpu memory Usage > 95%\ngpu Load < 30%\ncpu load > 85%\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\nWhen using tf.train.start_queue_runners in trainning,  the trainning process automatically\ngoes into cpu mode, when use tf.device('/gpu:0') an error accur thats could not find the data in queue;\nso, how should i use queue_runners+tfrecords in GPU?\nSource code / logs\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\nMain Trainning Code:\nwith tf.Session() as sess:\n#with tf.device('/gpu:0')\nsess.run(init)\nsaver = tf.train.Saver()\ncoord = tf.train.Coordinator() \nthreads = tf.train.start_queue_runners(sess=sess, coord = coord)\n\nglobal_step = 1\n\nif isTrain: \n    tf.train.write_graph(sess.graph_def, './MaxoutModel/', \"model.pb\", as_text=True)\n    ckpt = tf.train.get_checkpoint_state('./MaxoutModel/')\n    \n    if ckpt and ckpt.model_checkpoint_path:\n        saver.restore(sess, ckpt.model_checkpoint_path)\n        print('Load Model OK!')\n    else:\n        print('Load Model Error!!')\n        pass\n\n    for i in range(100):\n        \n        # learning rate decay\n        max_learning_rate = 0.02\n        min_learning_rate = 0.0001\n        decay_speed = 16000\n        learning_rate = min_learning_rate + (max_learning_rate - min_learning_rate) * math.exp(-i/decay_speed)\n\n        tra_images, tra_labels = sess.run([img_batch, label_batch])\n        sess.run(train_step, {X: batch_X, Y_: batch_Y, lr: learning_rate,  keep_prob: 0.75})\n\n        if i%20 == 0:\n            cost = sess.run(cross_entropy, \n                    {X: tra_images, Y_: tra_labels , keep_prob: 1.0})\n        if i%20 == 0 and i !=0 :    \n            saver.save(sess,save_path='./BNModel/model.ckpt',global_step=global_step+1)\n    saver.save(sess,save_path='./BNModel/model.ckpt',global_step=global_step+1)", "body": "Please go to Stack Overflow for help and support:\r\n\r\nhttps://stackoverflow.com/questions/tagged/tensorflow\r\n\r\nIf you open a GitHub issue, here is our policy:\r\n\r\n1. It must be a bug or a feature request.\r\n2. The form below must be filled out.\r\n3. It shouldn't be a TensorBoard issue. Those go [here](https://github.com/tensorflow/tensorboard/issues).\r\n\r\n**Here's why we have that policy**: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\n- **TensorFlow installed from (source or binary)**:\r\n- **TensorFlow version (use command below)**:\r\n- **Python version**: \r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\npython 3.5\r\ncuda 8.0 / cudnn 5.1\r\ntensorflow 1.2.1\r\ngpu memory Usage > 95%\r\ngpu Load < 30%\r\ncpu load > 85%\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n\r\nWhen using tf.train.start_queue_runners in trainning,  the trainning process automatically \r\ngoes into cpu mode, when use tf.device('/gpu:0') an error accur thats could not find the data in queue;\r\nso, how should i use queue_runners+tfrecords in GPU?\r\n\r\n### Source code / logs\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\r\n\r\nMain Trainning Code:\r\n\r\nwith tf.Session() as sess:\r\n    #with tf.device('/gpu:0')\r\n    sess.run(init)\r\n    saver = tf.train.Saver()\r\n\r\n    coord = tf.train.Coordinator() \r\n    threads = tf.train.start_queue_runners(sess=sess, coord = coord)\r\n    \r\n    global_step = 1\r\n   \r\n    if isTrain: \r\n        tf.train.write_graph(sess.graph_def, './MaxoutModel/', \"model.pb\", as_text=True)\r\n        ckpt = tf.train.get_checkpoint_state('./MaxoutModel/')\r\n        \r\n        if ckpt and ckpt.model_checkpoint_path:\r\n            saver.restore(sess, ckpt.model_checkpoint_path)\r\n            print('Load Model OK!')\r\n        else:\r\n            print('Load Model Error!!')\r\n            pass\r\n    \r\n        for i in range(100):\r\n            \r\n            # learning rate decay\r\n            max_learning_rate = 0.02\r\n            min_learning_rate = 0.0001\r\n            decay_speed = 16000\r\n            learning_rate = min_learning_rate + (max_learning_rate - min_learning_rate) * math.exp(-i/decay_speed)\r\n\r\n            tra_images, tra_labels = sess.run([img_batch, label_batch])\r\n            sess.run(train_step, {X: batch_X, Y_: batch_Y, lr: learning_rate,  keep_prob: 0.75})\r\n\r\n            if i%20 == 0:\r\n                cost = sess.run(cross_entropy, \r\n                        {X: tra_images, Y_: tra_labels , keep_prob: 1.0})\r\n            if i%20 == 0 and i !=0 :    \r\n                saver.save(sess,save_path='./BNModel/model.ckpt',global_step=global_step+1)\r\n        saver.save(sess,save_path='./BNModel/model.ckpt',global_step=global_step+1)\r\n\r\n"}