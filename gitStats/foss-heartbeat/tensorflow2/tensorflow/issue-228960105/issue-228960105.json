{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9932", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9932/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9932/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9932/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9932", "id": 228960105, "node_id": "MDU6SXNzdWUyMjg5NjAxMDU=", "number": 9932, "title": "Incorrect Timing Stats Reported by tfprof", "user": {"login": "utkarsh39", "id": 10495099, "node_id": "MDQ6VXNlcjEwNDk1MDk5", "avatar_url": "https://avatars3.githubusercontent.com/u/10495099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/utkarsh39", "html_url": "https://github.com/utkarsh39", "followers_url": "https://api.github.com/users/utkarsh39/followers", "following_url": "https://api.github.com/users/utkarsh39/following{/other_user}", "gists_url": "https://api.github.com/users/utkarsh39/gists{/gist_id}", "starred_url": "https://api.github.com/users/utkarsh39/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/utkarsh39/subscriptions", "organizations_url": "https://api.github.com/users/utkarsh39/orgs", "repos_url": "https://api.github.com/users/utkarsh39/repos", "events_url": "https://api.github.com/users/utkarsh39/events{/privacy}", "received_events_url": "https://api.github.com/users/utkarsh39/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-16T08:56:13Z", "updated_at": "2017-08-07T18:35:00Z", "closed_at": "2017-08-07T18:35:00Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>\n<p><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: I have added profiling code as shown below to the cifar10 code ([https://github.com/tensorflow/models/tree/master/tutorials/image/cifar10]).</p>\n</li>\n<li>\n<p><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</p>\n</li>\n<li>\n<p><strong>TensorFlow installed from (source or binary)</strong>: Source</p>\n</li>\n<li>\n<p><strong>TensorFlow version (use command below)</strong>: ('v1.1.0-rc2-773-g7fa0cf3', '1.1.0-rc2')</p>\n</li>\n<li>\n<p><strong>Bazel version (if compiling from source)</strong>:</p>\n</li>\n<li>\n<p><strong>CUDA/cuDNN version</strong>:8.0/6.0</p>\n</li>\n<li>\n<p><strong>GPU model and memory</strong>:NVIDIA Quadra K1200 4GB</p>\n</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>While doing profiling by tfprof I get the following stats</p>\n<p>Timing and Memory</p>\n<p>conv1/weights (19.20KB/76.80KB, 8us/18us)<br>\nconv1/weights/ExponentialMovingAverage (19.20KB/38.40KB, 6us/8us)<br>\nconv1/weights/ExponentialMovingAverage/read (19.20KB/19.20KB, 2us/2us)<br>\nconv1/weights/read (19.20KB/19.20KB, 2us/2us)<br>\nconv2/BiasAdd (4.72MB/4.72MB, 225us/225us)<br>\nconv2/Conv2D (4.72MB/4.72MB, 2.34ms/2.34ms)<br>\nconv2/L2Loss (4B/4B, 21us/21us)<br>\nconv2/biases (256B/1.02KB, 8us/58us)<br>\nconv2/biases/ExponentialMovingAverage (256B/512B, 7us/49us)<br>\nconv2/biases/ExponentialMovingAverage/read (256B/256B, 42us/42us)</p>\n<p>Floating Point Operations</p>\n<p>_TFProfRoot (0/5.23b flops)<br>\nconv2/Conv2D (3.77b/3.77b flops)<br>\nconv1/Conv2D (707.79m/707.79m flops)<br>\ngradients/local3/MatMul_grad/MatMul (226.49m/226.49m flops)<br>\ngradients/local3/MatMul_grad/MatMul_1 (226.49m/226.49m flops)<br>\nlocal3/MatMul (226.49m/226.49m flops)<br>\ngradients/local4/MatMul_grad/MatMul (18.87m/18.87m flops)<br>\ngradients/local4/MatMul_grad/MatMul_1 (18.87m/18.87m flops)<br>\nlocal4/MatMul (18.87m/18.87m flops)<br>\nconv1/BiasAdd (4.72m/4.72m flops)<br>\nconv2/BiasAdd (1.18m/1.18m flops)<br>\ngradients/softmax_linear/MatMul_grad/MatMul (491.52k/491.52k flops)<br>\ngradients/softmax_linear/MatMul_grad/MatMul_1 (491.52k/491.52k flops)<br>\nsoftmax_linear/MatMul (491.52k/491.52k flops)</p>\n<p>Computing Floating Point Performance for Conv2D operation gives surprising results: It comes out to be 3.77b/2.34ms = 1618 GFLOPS which is more than the manufacturer prescribed peak performance of 1052 GFLOPS. The timing stats seem to be wrong. This is impossible.</p>\n<h3>Source code / logs</h3>\n<pre><code> run_metadata = tf.RunMetadata()\n    with tf.train.MonitoredTrainingSession(\n        checkpoint_dir=FLAGS.train_dir,\n        hooks=[tf.train.StopAtStepHook(last_step=FLAGS.max_steps),\n               tf.train.NanTensorHook(loss),\n               _LoggerHook()],\n        config=tf.ConfigProto(\n            log_device_placement=FLAGS.log_device_placement, \n            graph_options=tf.GraphOptions(build_cost_model=1))) as mon_sess:\n      while not mon_sess.should_stop():\n        #Disable Profiling \n        # mon_sess.run(train_op)\n\n        #Enable Profiling \n        mon_sess.run(train_op, options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE), \n        run_metadata=run_metadata)\n        analysis = tf.contrib.tfprof.model_analyzer.print_model_analysis(\n        tf.get_default_graph(),\n        run_meta=run_metadata,\n        tfprof_options=tf.contrib.tfprof.model_analyzer.PRINT_ALL_TIMING_MEMORY)``\n</code></pre>", "body_text": "System information\n\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): I have added profiling code as shown below to the cifar10 code ([https://github.com/tensorflow/models/tree/master/tutorials/image/cifar10]).\n\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\n\n\nTensorFlow installed from (source or binary): Source\n\n\nTensorFlow version (use command below): ('v1.1.0-rc2-773-g7fa0cf3', '1.1.0-rc2')\n\n\nBazel version (if compiling from source):\n\n\nCUDA/cuDNN version:8.0/6.0\n\n\nGPU model and memory:NVIDIA Quadra K1200 4GB\n\n\nDescribe the problem\nWhile doing profiling by tfprof I get the following stats\nTiming and Memory\nconv1/weights (19.20KB/76.80KB, 8us/18us)\nconv1/weights/ExponentialMovingAverage (19.20KB/38.40KB, 6us/8us)\nconv1/weights/ExponentialMovingAverage/read (19.20KB/19.20KB, 2us/2us)\nconv1/weights/read (19.20KB/19.20KB, 2us/2us)\nconv2/BiasAdd (4.72MB/4.72MB, 225us/225us)\nconv2/Conv2D (4.72MB/4.72MB, 2.34ms/2.34ms)\nconv2/L2Loss (4B/4B, 21us/21us)\nconv2/biases (256B/1.02KB, 8us/58us)\nconv2/biases/ExponentialMovingAverage (256B/512B, 7us/49us)\nconv2/biases/ExponentialMovingAverage/read (256B/256B, 42us/42us)\nFloating Point Operations\n_TFProfRoot (0/5.23b flops)\nconv2/Conv2D (3.77b/3.77b flops)\nconv1/Conv2D (707.79m/707.79m flops)\ngradients/local3/MatMul_grad/MatMul (226.49m/226.49m flops)\ngradients/local3/MatMul_grad/MatMul_1 (226.49m/226.49m flops)\nlocal3/MatMul (226.49m/226.49m flops)\ngradients/local4/MatMul_grad/MatMul (18.87m/18.87m flops)\ngradients/local4/MatMul_grad/MatMul_1 (18.87m/18.87m flops)\nlocal4/MatMul (18.87m/18.87m flops)\nconv1/BiasAdd (4.72m/4.72m flops)\nconv2/BiasAdd (1.18m/1.18m flops)\ngradients/softmax_linear/MatMul_grad/MatMul (491.52k/491.52k flops)\ngradients/softmax_linear/MatMul_grad/MatMul_1 (491.52k/491.52k flops)\nsoftmax_linear/MatMul (491.52k/491.52k flops)\nComputing Floating Point Performance for Conv2D operation gives surprising results: It comes out to be 3.77b/2.34ms = 1618 GFLOPS which is more than the manufacturer prescribed peak performance of 1052 GFLOPS. The timing stats seem to be wrong. This is impossible.\nSource code / logs\n run_metadata = tf.RunMetadata()\n    with tf.train.MonitoredTrainingSession(\n        checkpoint_dir=FLAGS.train_dir,\n        hooks=[tf.train.StopAtStepHook(last_step=FLAGS.max_steps),\n               tf.train.NanTensorHook(loss),\n               _LoggerHook()],\n        config=tf.ConfigProto(\n            log_device_placement=FLAGS.log_device_placement, \n            graph_options=tf.GraphOptions(build_cost_model=1))) as mon_sess:\n      while not mon_sess.should_stop():\n        #Disable Profiling \n        # mon_sess.run(train_op)\n\n        #Enable Profiling \n        mon_sess.run(train_op, options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE), \n        run_metadata=run_metadata)\n        analysis = tf.contrib.tfprof.model_analyzer.print_model_analysis(\n        tf.get_default_graph(),\n        run_meta=run_metadata,\n        tfprof_options=tf.contrib.tfprof.model_analyzer.PRINT_ALL_TIMING_MEMORY)``", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: I have added profiling code as shown below to the cifar10 code ([https://github.com/tensorflow/models/tree/master/tutorials/image/cifar10]).\r\n\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: Source\r\n- **TensorFlow version (use command below)**: ('v1.1.0-rc2-773-g7fa0cf3', '1.1.0-rc2')\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:8.0/6.0\r\n- **GPU model and memory**:NVIDIA Quadra K1200 4GB\r\n\r\n### Describe the problem\r\n\r\nWhile doing profiling by tfprof I get the following stats\r\n\r\nTiming and Memory\r\n\r\n  conv1/weights (19.20KB/76.80KB, 8us/18us)\r\n    conv1/weights/ExponentialMovingAverage (19.20KB/38.40KB, 6us/8us)\r\n      conv1/weights/ExponentialMovingAverage/read (19.20KB/19.20KB, 2us/2us)\r\n    conv1/weights/read (19.20KB/19.20KB, 2us/2us)\r\n  conv2/BiasAdd (4.72MB/4.72MB, 225us/225us)\r\n  conv2/Conv2D (4.72MB/4.72MB, 2.34ms/2.34ms)\r\n  conv2/L2Loss (4B/4B, 21us/21us)\r\n  conv2/biases (256B/1.02KB, 8us/58us)\r\n    conv2/biases/ExponentialMovingAverage (256B/512B, 7us/49us)\r\n      conv2/biases/ExponentialMovingAverage/read (256B/256B, 42us/42us)\r\n\r\nFloating Point Operations\r\n\r\n_TFProfRoot (0/5.23b flops)\r\n  conv2/Conv2D (3.77b/3.77b flops)\r\n  conv1/Conv2D (707.79m/707.79m flops)\r\n  gradients/local3/MatMul_grad/MatMul (226.49m/226.49m flops)\r\n  gradients/local3/MatMul_grad/MatMul_1 (226.49m/226.49m flops)\r\n  local3/MatMul (226.49m/226.49m flops)\r\n  gradients/local4/MatMul_grad/MatMul (18.87m/18.87m flops)\r\n  gradients/local4/MatMul_grad/MatMul_1 (18.87m/18.87m flops)\r\n  local4/MatMul (18.87m/18.87m flops)\r\n  conv1/BiasAdd (4.72m/4.72m flops)\r\n  conv2/BiasAdd (1.18m/1.18m flops)\r\n  gradients/softmax_linear/MatMul_grad/MatMul (491.52k/491.52k flops)\r\n  gradients/softmax_linear/MatMul_grad/MatMul_1 (491.52k/491.52k flops)\r\n  softmax_linear/MatMul (491.52k/491.52k flops)\r\n\r\nComputing Floating Point Performance for Conv2D operation gives surprising results: It comes out to be 3.77b/2.34ms = 1618 GFLOPS which is more than the manufacturer prescribed peak performance of 1052 GFLOPS. The timing stats seem to be wrong. This is impossible.\r\n\r\n### Source code / logs\r\n```\r\n run_metadata = tf.RunMetadata()\r\n    with tf.train.MonitoredTrainingSession(\r\n        checkpoint_dir=FLAGS.train_dir,\r\n        hooks=[tf.train.StopAtStepHook(last_step=FLAGS.max_steps),\r\n               tf.train.NanTensorHook(loss),\r\n               _LoggerHook()],\r\n        config=tf.ConfigProto(\r\n            log_device_placement=FLAGS.log_device_placement, \r\n            graph_options=tf.GraphOptions(build_cost_model=1))) as mon_sess:\r\n      while not mon_sess.should_stop():\r\n        #Disable Profiling \r\n        # mon_sess.run(train_op)\r\n\r\n        #Enable Profiling \r\n        mon_sess.run(train_op, options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE), \r\n        run_metadata=run_metadata)\r\n        analysis = tf.contrib.tfprof.model_analyzer.print_model_analysis(\r\n        tf.get_default_graph(),\r\n        run_meta=run_metadata,\r\n        tfprof_options=tf.contrib.tfprof.model_analyzer.PRINT_ALL_TIMING_MEMORY)``\r\n```"}