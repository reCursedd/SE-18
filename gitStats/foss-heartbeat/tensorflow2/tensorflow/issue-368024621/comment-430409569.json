{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/430409569", "html_url": "https://github.com/tensorflow/tensorflow/issues/22825#issuecomment-430409569", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22825", "id": 430409569, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDQwOTU2OQ==", "user": {"login": "vipinpillai", "id": 1018780, "node_id": "MDQ6VXNlcjEwMTg3ODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1018780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipinpillai", "html_url": "https://github.com/vipinpillai", "followers_url": "https://api.github.com/users/vipinpillai/followers", "following_url": "https://api.github.com/users/vipinpillai/following{/other_user}", "gists_url": "https://api.github.com/users/vipinpillai/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipinpillai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipinpillai/subscriptions", "organizations_url": "https://api.github.com/users/vipinpillai/orgs", "repos_url": "https://api.github.com/users/vipinpillai/repos", "events_url": "https://api.github.com/users/vipinpillai/events{/privacy}", "received_events_url": "https://api.github.com/users/vipinpillai/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-16T21:35:33Z", "updated_at": "2018-10-16T21:35:33Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=42785337\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/wt-huang\">@wt-huang</a> In the API <code>tf.gradients(cross_entropy_mean, arg1)</code> , arg1 can be a list of tensors or simply a tensor. There is no restriction on the dimensionality of the <em>arg1</em> tensor as long as the tensor is connected to <em>cross_entropy_mean</em> in the graph. Could you please clarify as to what exactly do you mean by:</p>\n<blockquote>\n<p>You would need to define the shape for arg1 such that its elements are included in cross_entropy_mean.</p>\n</blockquote>\n<p>There is no restriction anywhere in the <code>tf.gradients</code> method as to the LHS shape to match with arg1.</p>\n<p>Also, I don't exactly understand as to what you mean by</p>\n<blockquote>\n<p>After  fixing <code>tf.gradients(cross_entropy_mean, arg1)</code>.</p>\n</blockquote>\n<p>What should be fixed here? Is it not possible to take a simple gradient of the loss with respect to the input? The important point to note here is that there is no error if we don't use <code>tf.nn.lrn</code> suggesting that the problem lies in the underlying implementation of <code>tf.nn.lrn</code> itself.</p>", "body_text": "@wt-huang In the API tf.gradients(cross_entropy_mean, arg1) , arg1 can be a list of tensors or simply a tensor. There is no restriction on the dimensionality of the arg1 tensor as long as the tensor is connected to cross_entropy_mean in the graph. Could you please clarify as to what exactly do you mean by:\n\nYou would need to define the shape for arg1 such that its elements are included in cross_entropy_mean.\n\nThere is no restriction anywhere in the tf.gradients method as to the LHS shape to match with arg1.\nAlso, I don't exactly understand as to what you mean by\n\nAfter  fixing tf.gradients(cross_entropy_mean, arg1).\n\nWhat should be fixed here? Is it not possible to take a simple gradient of the loss with respect to the input? The important point to note here is that there is no error if we don't use tf.nn.lrn suggesting that the problem lies in the underlying implementation of tf.nn.lrn itself.", "body": "@wt-huang In the API `tf.gradients(cross_entropy_mean, arg1)` , arg1 can be a list of tensors or simply a tensor. There is no restriction on the dimensionality of the _arg1_ tensor as long as the tensor is connected to _cross_entropy_mean_ in the graph. Could you please clarify as to what exactly do you mean by:\r\n> You would need to define the shape for arg1 such that its elements are included in cross_entropy_mean.\r\n\r\nThere is no restriction anywhere in the `tf.gradients` method as to the LHS shape to match with arg1. \r\n\r\nAlso, I don't exactly understand as to what you mean by \r\n> After  fixing `tf.gradients(cross_entropy_mean, arg1)`.\r\n\r\nWhat should be fixed here? Is it not possible to take a simple gradient of the loss with respect to the input? The important point to note here is that there is no error if we don't use `tf.nn.lrn` suggesting that the problem lies in the underlying implementation of `tf.nn.lrn` itself. "}