{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/223080077", "html_url": "https://github.com/tensorflow/tensorflow/pull/2440#issuecomment-223080077", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2440", "id": 223080077, "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzA4MDA3Nw==", "user": {"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-01T18:18:18Z", "updated_at": "2016-06-01T18:18:18Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=17724266\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/timbrucks\">@timbrucks</a> thanks for the update on your progress! Unfortunately that's a problem I know well, and the summary is that the linker is stripping out global constructors it mistakenly thinks aren't needed.</p>\n<p>The longer version is that most components in TF are registered using C++ macros that look like REGISTER_KERNEL(\"SomeOp\", SomeKernelClass).</p>\n<p>Under the hood, those create a global variable of a C++ class that registers the component with the main registry as part of its constructor. The problem is, that global is just an implementation detail, and is never referenced by any code. This leads many linkers to conclude that it's not needed and can be removed, even though its constructor has an important side-effect.</p>\n<p>The only reliable solution we have is to force the linker to avoid stripping any code from the library, even if it thinks it's not used. There are a variety of different ways to specify that, depending on your platform. On OS X/iOS you use -force_load with the path to the static library. On Ubuntu, we use --whole-archive:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/makefile/Makefile#L124\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/makefile/Makefile#L124</a></p>\n<p>In your case, you should be able to pick the correct linker flags for the platform and it will avoid stripping the global that does the factory registration that's causing your error. Hopefully the linker flags in the makefile should help there.</p>", "body_text": "@timbrucks thanks for the update on your progress! Unfortunately that's a problem I know well, and the summary is that the linker is stripping out global constructors it mistakenly thinks aren't needed.\nThe longer version is that most components in TF are registered using C++ macros that look like REGISTER_KERNEL(\"SomeOp\", SomeKernelClass).\nUnder the hood, those create a global variable of a C++ class that registers the component with the main registry as part of its constructor. The problem is, that global is just an implementation detail, and is never referenced by any code. This leads many linkers to conclude that it's not needed and can be removed, even though its constructor has an important side-effect.\nThe only reliable solution we have is to force the linker to avoid stripping any code from the library, even if it thinks it's not used. There are a variety of different ways to specify that, depending on your platform. On OS X/iOS you use -force_load with the path to the static library. On Ubuntu, we use --whole-archive:\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/makefile/Makefile#L124\nIn your case, you should be able to pick the correct linker flags for the platform and it will avoid stripping the global that does the factory registration that's causing your error. Hopefully the linker flags in the makefile should help there.", "body": "@timbrucks thanks for the update on your progress! Unfortunately that's a problem I know well, and the summary is that the linker is stripping out global constructors it mistakenly thinks aren't needed.\n\nThe longer version is that most components in TF are registered using C++ macros that look like REGISTER_KERNEL(\"SomeOp\", SomeKernelClass).\n\nUnder the hood, those create a global variable of a C++ class that registers the component with the main registry as part of its constructor. The problem is, that global is just an implementation detail, and is never referenced by any code. This leads many linkers to conclude that it's not needed and can be removed, even though its constructor has an important side-effect.\n\nThe only reliable solution we have is to force the linker to avoid stripping any code from the library, even if it thinks it's not used. There are a variety of different ways to specify that, depending on your platform. On OS X/iOS you use -force_load with the path to the static library. On Ubuntu, we use --whole-archive:\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/makefile/Makefile#L124\n\nIn your case, you should be able to pick the correct linker flags for the platform and it will avoid stripping the global that does the factory registration that's causing your error. Hopefully the linker flags in the makefile should help there.\n"}