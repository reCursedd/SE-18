{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/269856489", "html_url": "https://github.com/tensorflow/tensorflow/issues/6568#issuecomment-269856489", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6568", "id": 269856489, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTg1NjQ4OQ==", "user": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-31T09:03:25Z", "updated_at": "2016-12-31T09:03:25Z", "author_association": "MEMBER", "body_html": "<p>/CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20959853\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/drpngx\">@drpngx</a></p>\n<p>I think I like the idea of wrapping pywrap_tensorflow with a different module, and importing that wrapper in all locations pywrap_tensorflow is needed. I think this approach has some parallels with <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20959853\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/drpngx\">@drpngx</a> 's approach for sealing the python API. Moreover, I think pywrap_tensorflow is still not sealed, so the wrapper can also do the job to seal it. What do you think?</p>\n<p>However, once we replace big monolithic swig with a nicer mechanism that lets us split up the wrapped library, I am not sure how much work wrapping approach will need, as we will potentially have many wrapped libraries now.</p>\n<p>For the 2nd issue <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=49262\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jart\">@jart</a> raised, bazel magic scares me a little, but it is quite powerful. So I think the solution you suggested can work, but I am not sure I like it.</p>", "body_text": "/CC @drpngx\nI think I like the idea of wrapping pywrap_tensorflow with a different module, and importing that wrapper in all locations pywrap_tensorflow is needed. I think this approach has some parallels with @drpngx 's approach for sealing the python API. Moreover, I think pywrap_tensorflow is still not sealed, so the wrapper can also do the job to seal it. What do you think?\nHowever, once we replace big monolithic swig with a nicer mechanism that lets us split up the wrapped library, I am not sure how much work wrapping approach will need, as we will potentially have many wrapped libraries now.\nFor the 2nd issue @jart raised, bazel magic scares me a little, but it is quite powerful. So I think the solution you suggested can work, but I am not sure I like it.", "body": "/CC @drpngx \r\n\r\nI think I like the idea of wrapping pywrap_tensorflow with a different module, and importing that wrapper in all locations pywrap_tensorflow is needed. I think this approach has some parallels with @drpngx 's approach for sealing the python API. Moreover, I think pywrap_tensorflow is still not sealed, so the wrapper can also do the job to seal it. What do you think?\r\n\r\nHowever, once we replace big monolithic swig with a nicer mechanism that lets us split up the wrapped library, I am not sure how much work wrapping approach will need, as we will potentially have many wrapped libraries now.\r\n\r\nFor the 2nd issue @jart raised, bazel magic scares me a little, but it is quite powerful. So I think the solution you suggested can work, but I am not sure I like it.\r\n"}