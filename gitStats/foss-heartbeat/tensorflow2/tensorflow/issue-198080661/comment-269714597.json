{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/269714597", "html_url": "https://github.com/tensorflow/tensorflow/issues/6568#issuecomment-269714597", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6568", "id": 269714597, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTcxNDU5Nw==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-30T00:26:11Z", "updated_at": "2016-12-30T00:38:24Z", "author_association": "MEMBER", "body_html": "<p>Another thing we need to figure out how to do is situations like these:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> tensorflow.python <span class=\"pl-k\">import</span> pywrap_tensorflow\n<span class=\"pl-k\">from</span> tensorflow.contrib.tfprof.python.tools.tfprof <span class=\"pl-k\">import</span> pywrap_tensorflow_print_model_analysis_lib</pre></div>\n<p>The first swig module needs to be loaded in order for the second one to load. So we need to be able to generate code inside <code>pywrap_tensorflow_print_model_analysis_lib.py</code> that imports <code>pywrap_tensorflow</code>.</p>\n<p>Now this seems like a build system issue. Maybe we could change our swig Bazel rule to mangle the <code>.i</code> input file to inject the code we want into the generated <code>.py</code> binding.</p>", "body_text": "Another thing we need to figure out how to do is situations like these:\nfrom tensorflow.python import pywrap_tensorflow\nfrom tensorflow.contrib.tfprof.python.tools.tfprof import pywrap_tensorflow_print_model_analysis_lib\nThe first swig module needs to be loaded in order for the second one to load. So we need to be able to generate code inside pywrap_tensorflow_print_model_analysis_lib.py that imports pywrap_tensorflow.\nNow this seems like a build system issue. Maybe we could change our swig Bazel rule to mangle the .i input file to inject the code we want into the generated .py binding.", "body": "Another thing we need to figure out how to do is situations like these:\r\n\r\n```python\r\nfrom tensorflow.python import pywrap_tensorflow\r\nfrom tensorflow.contrib.tfprof.python.tools.tfprof import pywrap_tensorflow_print_model_analysis_lib\r\n```\r\n\r\nThe first swig module needs to be loaded in order for the second one to load. So we need to be able to generate code inside `pywrap_tensorflow_print_model_analysis_lib.py` that imports `pywrap_tensorflow`.\r\n\r\nNow this seems like a build system issue. Maybe we could change our swig Bazel rule to mangle the `.i` input file to inject the code we want into the generated `.py` binding."}