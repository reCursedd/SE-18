{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/269707598", "html_url": "https://github.com/tensorflow/tensorflow/issues/6568#issuecomment-269707598", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6568", "id": 269707598, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTcwNzU5OA==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-29T23:06:00Z", "updated_at": "2016-12-29T23:06:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Passing on the assignment to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=229914\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/keveman\">@keveman</a>, since he came up with the library-loading code in the first place.</p>\n<p>I don't understand why <code>setdlopenflags()</code> needs to appear in so many test files in the first place.<br>\nIt seems (at least superficially) that the problem is easy to fix: we just need to ensure that all imports of <code>tensorflow.python.pywrap_tensorflow</code> are guarded by the same flag-setting-and-unsetting logic that appears in <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/__init__.py#L58\"><code>tensorflow/python/__init__.py</code></a>. So we can either:</p>\n<ol>\n<li>Add the logic to the approximately 20 places where this module is imported, or</li>\n<li>Add a new wrapper module that is the only module allowed to import <code>tensorflow.python.pywrap_tensorflow</code> (perhaps there's a cunning way to enforce this?), implement the flag-setting logic in there, and then replace the 20 direct imports of <code>tensorflow.python.pywrap_tensorflow</code> with an import of the wrapper module.</li>\n</ol>", "body_text": "Passing on the assignment to @keveman, since he came up with the library-loading code in the first place.\nI don't understand why setdlopenflags() needs to appear in so many test files in the first place.\nIt seems (at least superficially) that the problem is easy to fix: we just need to ensure that all imports of tensorflow.python.pywrap_tensorflow are guarded by the same flag-setting-and-unsetting logic that appears in tensorflow/python/__init__.py. So we can either:\n\nAdd the logic to the approximately 20 places where this module is imported, or\nAdd a new wrapper module that is the only module allowed to import tensorflow.python.pywrap_tensorflow (perhaps there's a cunning way to enforce this?), implement the flag-setting logic in there, and then replace the 20 direct imports of tensorflow.python.pywrap_tensorflow with an import of the wrapper module.", "body": "Passing on the assignment to @keveman, since he came up with the library-loading code in the first place.\r\n\r\nI don't understand why `setdlopenflags()` needs to appear in so many test files in the first place.\r\nIt seems (at least superficially) that the problem is easy to fix: we just need to ensure that all imports of `tensorflow.python.pywrap_tensorflow` are guarded by the same flag-setting-and-unsetting logic that appears in [`tensorflow/python/__init__.py`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/__init__.py#L58). So we can either:\r\n\r\n1. Add the logic to the approximately 20 places where this module is imported, or\r\n2. Add a new wrapper module that is the only module allowed to import `tensorflow.python.pywrap_tensorflow` (perhaps there's a cunning way to enforce this?), implement the flag-setting logic in there, and then replace the 20 direct imports of `tensorflow.python.pywrap_tensorflow` with an import of the wrapper module."}