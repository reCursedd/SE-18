{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/373925960", "html_url": "https://github.com/tensorflow/tensorflow/pull/17767#issuecomment-373925960", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17767", "id": 373925960, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzkyNTk2MA==", "user": {"login": "Kejie-Wang", "id": 10304029, "node_id": "MDQ6VXNlcjEwMzA0MDI5", "avatar_url": "https://avatars0.githubusercontent.com/u/10304029?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kejie-Wang", "html_url": "https://github.com/Kejie-Wang", "followers_url": "https://api.github.com/users/Kejie-Wang/followers", "following_url": "https://api.github.com/users/Kejie-Wang/following{/other_user}", "gists_url": "https://api.github.com/users/Kejie-Wang/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kejie-Wang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kejie-Wang/subscriptions", "organizations_url": "https://api.github.com/users/Kejie-Wang/orgs", "repos_url": "https://api.github.com/users/Kejie-Wang/repos", "events_url": "https://api.github.com/users/Kejie-Wang/events{/privacy}", "received_events_url": "https://api.github.com/users/Kejie-Wang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-17T14:54:17Z", "updated_at": "2018-03-17T14:54:17Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7946809\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gunan\">@gunan</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3731025\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/allenlavoie\">@allenlavoie</a><br>\nThe reason why I do not use libtensorflow_framework.so is that it also exports some symbols which will conflict with OpenCV which has been described in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"148131185\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1924\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1924/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/1924\">#1924</a>. So I use monolithic build a single <code>libtensorflow_cc.so</code> linked to my project. But there will be some undefined reference to protobuf error if I only link <code>libtensorflow_cc.so</code> and therefore I add a <code>-lprotobuf</code> to manage to compile my project. And this solution will cause that wired bugs in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"290515004\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/16291\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/16291/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/16291\">#16291</a>. So I export the protobuf related symbol and everything works fine.</p>\n<p>I am sorry I am not familiar with the protobuf implementation details and what you said about linking against only protobuf header and avoiding including my own copy of the arena allocator. The solution I adopted is wrong? What's the right way for this situation?  Many thanks!</p>", "body_text": "@gunan @allenlavoie\nThe reason why I do not use libtensorflow_framework.so is that it also exports some symbols which will conflict with OpenCV which has been described in #1924. So I use monolithic build a single libtensorflow_cc.so linked to my project. But there will be some undefined reference to protobuf error if I only link libtensorflow_cc.so and therefore I add a -lprotobuf to manage to compile my project. And this solution will cause that wired bugs in #16291. So I export the protobuf related symbol and everything works fine.\nI am sorry I am not familiar with the protobuf implementation details and what you said about linking against only protobuf header and avoiding including my own copy of the arena allocator. The solution I adopted is wrong? What's the right way for this situation?  Many thanks!", "body": "@gunan @allenlavoie \r\nThe reason why I do not use libtensorflow_framework.so is that it also exports some symbols which will conflict with OpenCV which has been described in #1924. So I use monolithic build a single `libtensorflow_cc.so` linked to my project. But there will be some undefined reference to protobuf error if I only link `libtensorflow_cc.so` and therefore I add a `-lprotobuf` to manage to compile my project. And this solution will cause that wired bugs in #16291. So I export the protobuf related symbol and everything works fine.\r\n\r\nI am sorry I am not familiar with the protobuf implementation details and what you said about linking against only protobuf header and avoiding including my own copy of the arena allocator. The solution I adopted is wrong? What's the right way for this situation?  Many thanks!"}