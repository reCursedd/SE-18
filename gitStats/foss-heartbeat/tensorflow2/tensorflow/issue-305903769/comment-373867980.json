{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/373867980", "html_url": "https://github.com/tensorflow/tensorflow/pull/17767#issuecomment-373867980", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17767", "id": 373867980, "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzg2Nzk4MA==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-16T23:05:16Z", "updated_at": "2018-03-16T23:05:16Z", "author_association": "MEMBER", "body_html": "<p>This would force everyone to use our protobuf symbols when linking against the C++ API, which I believe has already caused problems for people when linking against libtensorflow_framework.so.</p>\n<p>Which raises the question: why not use libtensorflow_framework.so (build the C++ API without --config=monolithic) for this behavior? Currently that will include all of the protocol buffer symbols since we don't run a linker script on it.</p>\n<p>I'd note though that the \"string sharing\" issue in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"290515004\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/16291\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/16291/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/16291\">#16291</a> came up for me when sharing un-serialized protocol buffers across two shared objects which both have their own protocol buffer arena allocators. So the reason this PR fixes the issue may be just that it allows TensorFlow to clobber your protocol buffer symbols. If you're passing un-serialized protocol buffers to TensorFlow, you should avoid including your own copy of the arena allocator (i.e. you should link against only protocol buffer headers).</p>", "body_text": "This would force everyone to use our protobuf symbols when linking against the C++ API, which I believe has already caused problems for people when linking against libtensorflow_framework.so.\nWhich raises the question: why not use libtensorflow_framework.so (build the C++ API without --config=monolithic) for this behavior? Currently that will include all of the protocol buffer symbols since we don't run a linker script on it.\nI'd note though that the \"string sharing\" issue in #16291 came up for me when sharing un-serialized protocol buffers across two shared objects which both have their own protocol buffer arena allocators. So the reason this PR fixes the issue may be just that it allows TensorFlow to clobber your protocol buffer symbols. If you're passing un-serialized protocol buffers to TensorFlow, you should avoid including your own copy of the arena allocator (i.e. you should link against only protocol buffer headers).", "body": "This would force everyone to use our protobuf symbols when linking against the C++ API, which I believe has already caused problems for people when linking against libtensorflow_framework.so.\r\n\r\nWhich raises the question: why not use libtensorflow_framework.so (build the C++ API without --config=monolithic) for this behavior? Currently that will include all of the protocol buffer symbols since we don't run a linker script on it.\r\n\r\nI'd note though that the \"string sharing\" issue in https://github.com/tensorflow/tensorflow/issues/16291 came up for me when sharing un-serialized protocol buffers across two shared objects which both have their own protocol buffer arena allocators. So the reason this PR fixes the issue may be just that it allows TensorFlow to clobber your protocol buffer symbols. If you're passing un-serialized protocol buffers to TensorFlow, you should avoid including your own copy of the arena allocator (i.e. you should link against only protocol buffer headers)."}