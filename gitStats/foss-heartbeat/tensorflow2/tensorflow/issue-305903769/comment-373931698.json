{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/373931698", "html_url": "https://github.com/tensorflow/tensorflow/pull/17767#issuecomment-373931698", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17767", "id": 373931698, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzkzMTY5OA==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-17T16:08:52Z", "updated_at": "2018-03-17T16:08:52Z", "author_association": "MEMBER", "body_html": "<p>Ah, yes, you're in a bit of a pickle then with OpenCV.</p>\n<p>On the TensorFlow side the preferred solution would be to split out a shared object with just our protocol buffer symbols (giving us three in a C++ API package: libtensorflow_cc, libtensorflow_framework, libtensorflow_protobuf). That way people using the C++ API who don't need them don't run into conflicts with them, and people who want them but don't want the rest of TensorFlow's C++ symbols (OpenCV conflict) can link to that but not libtensorflow_framework. This is a somewhat tricky change. I don't think anyone's actively working on it, but it is planned.</p>\n<p>This could be worked around on your end too. Basically you'd have your own shared object which wraps either your interaction with OpenCV or with TensorFlow (libtensorflow_cc.so + libtensorflow_framework.so). This would avoid code calling into OpenCV seeing TensorFlow symbols, and so avoid the symbol conflict.</p>", "body_text": "Ah, yes, you're in a bit of a pickle then with OpenCV.\nOn the TensorFlow side the preferred solution would be to split out a shared object with just our protocol buffer symbols (giving us three in a C++ API package: libtensorflow_cc, libtensorflow_framework, libtensorflow_protobuf). That way people using the C++ API who don't need them don't run into conflicts with them, and people who want them but don't want the rest of TensorFlow's C++ symbols (OpenCV conflict) can link to that but not libtensorflow_framework. This is a somewhat tricky change. I don't think anyone's actively working on it, but it is planned.\nThis could be worked around on your end too. Basically you'd have your own shared object which wraps either your interaction with OpenCV or with TensorFlow (libtensorflow_cc.so + libtensorflow_framework.so). This would avoid code calling into OpenCV seeing TensorFlow symbols, and so avoid the symbol conflict.", "body": "Ah, yes, you're in a bit of a pickle then with OpenCV.\r\n\r\nOn the TensorFlow side the preferred solution would be to split out a shared object with just our protocol buffer symbols (giving us three in a C++ API package: libtensorflow_cc, libtensorflow_framework, libtensorflow_protobuf). That way people using the C++ API who don't need them don't run into conflicts with them, and people who want them but don't want the rest of TensorFlow's C++ symbols (OpenCV conflict) can link to that but not libtensorflow_framework. This is a somewhat tricky change. I don't think anyone's actively working on it, but it is planned.\r\n\r\nThis could be worked around on your end too. Basically you'd have your own shared object which wraps either your interaction with OpenCV or with TensorFlow (libtensorflow_cc.so + libtensorflow_framework.so). This would avoid code calling into OpenCV seeing TensorFlow symbols, and so avoid the symbol conflict."}