{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/161459721", "html_url": "https://github.com/tensorflow/tensorflow/issues/386#issuecomment-161459721", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/386", "id": 161459721, "node_id": "MDEyOklzc3VlQ29tbWVudDE2MTQ1OTcyMQ==", "user": {"login": "NickShahML", "id": 14891677, "node_id": "MDQ6VXNlcjE0ODkxNjc3", "avatar_url": "https://avatars2.githubusercontent.com/u/14891677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NickShahML", "html_url": "https://github.com/NickShahML", "followers_url": "https://api.github.com/users/NickShahML/followers", "following_url": "https://api.github.com/users/NickShahML/following{/other_user}", "gists_url": "https://api.github.com/users/NickShahML/gists{/gist_id}", "starred_url": "https://api.github.com/users/NickShahML/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NickShahML/subscriptions", "organizations_url": "https://api.github.com/users/NickShahML/orgs", "repos_url": "https://api.github.com/users/NickShahML/repos", "events_url": "https://api.github.com/users/NickShahML/events{/privacy}", "received_events_url": "https://api.github.com/users/NickShahML/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-02T22:53:53Z", "updated_at": "2015-12-02T23:05:13Z", "author_association": "NONE", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=706666\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/adder\">@adder</a>! <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7943790\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zffchen78\">@zffchen78</a>, thanks for your help in this matter. I will do my best to answer your questions. The ultimate goal is to replicate this paper: <a href=\"http://arxiv.org/pdf/1511.06464v1.pdf\" rel=\"nofollow\">http://arxiv.org/pdf/1511.06464v1.pdf</a></p>\n<p>To do so, I was planning on making a new class in RNN_cell.py. Therefore, I believe with need complex to complex along with 2d support.</p>\n<p>The reason why I wanted a pythonic tensorflow op is so that we can assign multiple gpu's to multiple unitary RNN's when the whole integration is complete. So one uRNN would be on gpu 1, and another uRNN would be on gpu 2.</p>\n<p>I don't know how hard it is for you to implement these fft's and ifft's but I think 3d support would be nice for future users who may try unitary conv nets. I certainly don't want to ask too much of you though!</p>\n<p>If this is of any help to you, the goal is to replicate \"Complex_RNN\" here: <a href=\"https://github.com/amarshah/complex_RNN/blob/master/models.py#L532\">https://github.com/amarshah/complex_RNN/blob/master/models.py#L532</a></p>", "body_text": "Thanks @adder! @zffchen78, thanks for your help in this matter. I will do my best to answer your questions. The ultimate goal is to replicate this paper: http://arxiv.org/pdf/1511.06464v1.pdf\nTo do so, I was planning on making a new class in RNN_cell.py. Therefore, I believe with need complex to complex along with 2d support.\nThe reason why I wanted a pythonic tensorflow op is so that we can assign multiple gpu's to multiple unitary RNN's when the whole integration is complete. So one uRNN would be on gpu 1, and another uRNN would be on gpu 2.\nI don't know how hard it is for you to implement these fft's and ifft's but I think 3d support would be nice for future users who may try unitary conv nets. I certainly don't want to ask too much of you though!\nIf this is of any help to you, the goal is to replicate \"Complex_RNN\" here: https://github.com/amarshah/complex_RNN/blob/master/models.py#L532", "body": "Thanks @adder! @zffchen78, thanks for your help in this matter. I will do my best to answer your questions. The ultimate goal is to replicate this paper: http://arxiv.org/pdf/1511.06464v1.pdf \n\nTo do so, I was planning on making a new class in RNN_cell.py. Therefore, I believe with need complex to complex along with 2d support. \n\nThe reason why I wanted a pythonic tensorflow op is so that we can assign multiple gpu's to multiple unitary RNN's when the whole integration is complete. So one uRNN would be on gpu 1, and another uRNN would be on gpu 2. \n\nI don't know how hard it is for you to implement these fft's and ifft's but I think 3d support would be nice for future users who may try unitary conv nets. I certainly don't want to ask too much of you though!\n\nIf this is of any help to you, the goal is to replicate \"Complex_RNN\" here: https://github.com/amarshah/complex_RNN/blob/master/models.py#L532\n"}