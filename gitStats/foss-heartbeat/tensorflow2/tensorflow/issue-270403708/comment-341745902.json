{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/341745902", "html_url": "https://github.com/tensorflow/tensorflow/issues/14162#issuecomment-341745902", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14162", "id": 341745902, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTc0NTkwMg==", "user": {"login": "ybsave", "id": 26417094, "node_id": "MDQ6VXNlcjI2NDE3MDk0", "avatar_url": "https://avatars0.githubusercontent.com/u/26417094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ybsave", "html_url": "https://github.com/ybsave", "followers_url": "https://api.github.com/users/ybsave/followers", "following_url": "https://api.github.com/users/ybsave/following{/other_user}", "gists_url": "https://api.github.com/users/ybsave/gists{/gist_id}", "starred_url": "https://api.github.com/users/ybsave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ybsave/subscriptions", "organizations_url": "https://api.github.com/users/ybsave/orgs", "repos_url": "https://api.github.com/users/ybsave/repos", "events_url": "https://api.github.com/users/ybsave/events{/privacy}", "received_events_url": "https://api.github.com/users/ybsave/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-03T15:57:14Z", "updated_at": "2017-11-03T15:57:14Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1381301\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ppwwyyxx\">@ppwwyyxx</a> Thank you so much for your quick response. To clarify my question, I am using slim.learning.train to perform the training, where the global_step increment was performed inside the function.</p>\n<p>However, when I define my loss, it is defined before any session is created. Thus, when I use the global_step variable, I cannot get the correct value as tf.train.global_step requires a session as input. If I just use tf.where(tf.greater(global_step, 2), loss, tf.stop_gradient(loss)) instead of your codes like tf.where(tf.greater(gs_inc, 2), loss, tf.stop_gradient(loss)), I cannot get the correct global_step. Therefore, I wonder whether there is any method to perform the tf.where for defining the loss without using operators like \"gs_inc = tf.assign_add(gs, 1)\"?</p>\n<p>I am currently testing it in a big program. I will try to write a small program to show the problem soon. I appreciate your kind help.</p>", "body_text": "@ppwwyyxx Thank you so much for your quick response. To clarify my question, I am using slim.learning.train to perform the training, where the global_step increment was performed inside the function.\nHowever, when I define my loss, it is defined before any session is created. Thus, when I use the global_step variable, I cannot get the correct value as tf.train.global_step requires a session as input. If I just use tf.where(tf.greater(global_step, 2), loss, tf.stop_gradient(loss)) instead of your codes like tf.where(tf.greater(gs_inc, 2), loss, tf.stop_gradient(loss)), I cannot get the correct global_step. Therefore, I wonder whether there is any method to perform the tf.where for defining the loss without using operators like \"gs_inc = tf.assign_add(gs, 1)\"?\nI am currently testing it in a big program. I will try to write a small program to show the problem soon. I appreciate your kind help.", "body": "@ppwwyyxx Thank you so much for your quick response. To clarify my question, I am using slim.learning.train to perform the training, where the global_step increment was performed inside the function.\r\n\r\nHowever, when I define my loss, it is defined before any session is created. Thus, when I use the global_step variable, I cannot get the correct value as tf.train.global_step requires a session as input. If I just use tf.where(tf.greater(global_step, 2), loss, tf.stop_gradient(loss)) instead of your codes like tf.where(tf.greater(gs_inc, 2), loss, tf.stop_gradient(loss)), I cannot get the correct global_step. Therefore, I wonder whether there is any method to perform the tf.where for defining the loss without using operators like \"gs_inc = tf.assign_add(gs, 1)\"?\r\n\r\nI am currently testing it in a big program. I will try to write a small program to show the problem soon. I appreciate your kind help."}