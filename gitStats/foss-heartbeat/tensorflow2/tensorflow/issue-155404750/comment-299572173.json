{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/299572173", "html_url": "https://github.com/tensorflow/tensorflow/issues/2412#issuecomment-299572173", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2412", "id": 299572173, "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTU3MjE3Mw==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-05T20:49:41Z", "updated_at": "2017-05-05T20:49:41Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=495399\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lababidi\">@lababidi</a> : There are no docs about this yet since it is not something we currently support. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=88808\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/skye\">@skye</a> is looking into packaging, but this not something that has gotten priority at the moment given all the other pursuits. In particular, the built shared library and all the header files need to be packaged.</p>\n<p>Note though, you can still use bazel to build C++ programs as in <a href=\"https://www.tensorflow.org/api_guides/cc/guide\" rel=\"nofollow\">https://www.tensorflow.org/api_guides/cc/guide</a></p>\n<p>I sincerely apologize, but I don't have a good answer for how to package all the required header files and for now we'd have to just encourage folks out there to figure it out and share their ideas.</p>\n<p>One possible starting point might be to look at the <code>g++</code> commands that bazel executes and learn the include directories from there. For example, I did the following:</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Followed the instructions in https://www.tensorflow.org/api_guides/cc/guide to build</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> an example C++ program using bazel</span>\nbazel build -c opt //tensorflow/cc/example:example\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Delete the generated files</span>\nrm -rf ./bazel-out/local-opt/tensorflow/cc/example\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Recompile the example program and get the GCC command used:</span>\nbazel build -s -c opt //tensorflow/cc/example:example</pre></div>\n<p>That showed me something like the following:</p>\n<div class=\"highlight highlight-source-shell\"><pre>(cd /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow <span class=\"pl-k\">&amp;&amp;</span> \\\n  <span class=\"pl-c1\">exec</span> env - \\\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \\\n  /usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -B/usr/bin -B/usr/bin -Wunused-but-set-parameter -Wno-free-nonheap-object -fno-omit-frame-pointer -g0 -O2 '-D_FORTIFY_SOURCE=1' -DNDEBUG -ffunction-sections -fdata-sections '-std=c++0x' -MD -MF bazel-out/local-opt/bin/tensorflow/cc/example/_objs/example/tensorflow/cc/example/example.d '-frandom-seed=bazel-out/local-opt/bin/tensorflow/cc/example/_objs/example/tensorflow/cc/example/example.o' -DEIGEN_MPL2_ONLY -DTENSORFLOW_USE_JEMALLOC -iquote . -iquote bazel-out/local-opt/genfiles -iquote external/jemalloc -iquote bazel-out/local-opt/genfiles/external/jemalloc -iquote external/bazel_tools -iquote bazel-out/local-opt/genfiles/external/bazel_tools -iquote external/protobuf -iquote bazel-out/local-opt/genfiles/external/protobuf -iquote external/eigen_archive -iquote bazel-out/local-opt/genfiles/external/eigen_archive -iquote external/local_config_sycl -iquote bazel-out/local-opt/genfiles/external/local_config_sycl -iquote external/gif_archive -iquote bazel-out/local-opt/genfiles/external/gif_archive -iquote external/jpeg -iquote bazel-out/local-opt/genfiles/external/jpeg -iquote external/com_googlesource_code_re2 -iquote bazel-out/local-opt/genfiles/external/com_googlesource_code_re2 -iquote external/farmhash_archive -iquote bazel-out/local-opt/genfiles/external/farmhash_archive -iquote external/highwayhash -iquote bazel-out/local-opt/genfiles/external/highwayhash -iquote external/png_archive -iquote bazel-out/local-opt/genfiles/external/png_archive -iquote external/zlib_archive -iquote bazel-out/local-opt/genfiles/external/zlib_archive -iquote external/local_config_cuda -iquote bazel-out/local-opt/genfiles/external/local_config_cuda -iquote external/gemmlowp -iquote bazel-out/local-opt/genfiles/external/gemmlowp -isystem external/jemalloc/include -isystem bazel-out/local-opt/genfiles/external/jemalloc/include -isystem external/bazel_tools/tools/cpp/gcc3 -isystem external/protobuf/src -isystem bazel-out/local-opt/genfiles/external/protobuf/src -isystem external/eigen_archive -isystem bazel-out/local-opt/genfiles/external/eigen_archive -isystem external/gif_archive/lib -isystem bazel-out/local-opt/genfiles/external/gif_archive/lib -isystem external/farmhash_archive/src -isystem bazel-out/local-opt/genfiles/external/farmhash_archive/src -isystem external/png_archive -isystem bazel-out/local-opt/genfiles/external/png_archive -isystem external/zlib_archive -isystem bazel-out/local-opt/genfiles/external/zlib_archive -isystem external/local_config_cuda/cuda -isystem bazel-out/local-opt/genfiles/external/local_config_cuda/cuda -isystem external/local_config_cuda/cuda/include -isystem bazel-out/local-opt/genfiles/external/local_config_cuda/cuda/include -fno-canonical-system-headers -Wno-builtin-macro-redefined '-D__DATE__=\"redacted\"' '-D__TIMESTAMP__=\"redacted\"' '-D__TIME__=\"redacted\"' -c tensorflow/cc/example/example.cc -o bazel-out/local-opt/bin/tensorflow/cc/example/_objs/example/tensorflow/cc/example/example.o)</pre></div>\n<p>So under the bazel cache root directory: <code>/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow</code> (will be different on your machine) one can find all the include files and the directories needed are the arguments to the <code>-iquote</code> and <code>-isystem</code> flags in the <code>gcc</code> command. So all of those will have to be included.</p>\n<p>Again, I provide this as a possible starting point. I realize that use of the C++ API without bazel at this time is inconvenient to say the least. It's something we'd like get done, but haven't gotten around to at this point an contributions (in terms of say bazel rules or scripts that can package the <code>.so</code> and all headers files into a single tarball) would be welcome</p>", "body_text": "@lababidi : There are no docs about this yet since it is not something we currently support. @skye is looking into packaging, but this not something that has gotten priority at the moment given all the other pursuits. In particular, the built shared library and all the header files need to be packaged.\nNote though, you can still use bazel to build C++ programs as in https://www.tensorflow.org/api_guides/cc/guide\nI sincerely apologize, but I don't have a good answer for how to package all the required header files and for now we'd have to just encourage folks out there to figure it out and share their ideas.\nOne possible starting point might be to look at the g++ commands that bazel executes and learn the include directories from there. For example, I did the following:\n# Followed the instructions in https://www.tensorflow.org/api_guides/cc/guide to build\n# an example C++ program using bazel\nbazel build -c opt //tensorflow/cc/example:example\n\n# Delete the generated files\nrm -rf ./bazel-out/local-opt/tensorflow/cc/example\n\n# Recompile the example program and get the GCC command used:\nbazel build -s -c opt //tensorflow/cc/example:example\nThat showed me something like the following:\n(cd /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow && \\\n  exec env - \\\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \\\n  /usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -B/usr/bin -B/usr/bin -Wunused-but-set-parameter -Wno-free-nonheap-object -fno-omit-frame-pointer -g0 -O2 '-D_FORTIFY_SOURCE=1' -DNDEBUG -ffunction-sections -fdata-sections '-std=c++0x' -MD -MF bazel-out/local-opt/bin/tensorflow/cc/example/_objs/example/tensorflow/cc/example/example.d '-frandom-seed=bazel-out/local-opt/bin/tensorflow/cc/example/_objs/example/tensorflow/cc/example/example.o' -DEIGEN_MPL2_ONLY -DTENSORFLOW_USE_JEMALLOC -iquote . -iquote bazel-out/local-opt/genfiles -iquote external/jemalloc -iquote bazel-out/local-opt/genfiles/external/jemalloc -iquote external/bazel_tools -iquote bazel-out/local-opt/genfiles/external/bazel_tools -iquote external/protobuf -iquote bazel-out/local-opt/genfiles/external/protobuf -iquote external/eigen_archive -iquote bazel-out/local-opt/genfiles/external/eigen_archive -iquote external/local_config_sycl -iquote bazel-out/local-opt/genfiles/external/local_config_sycl -iquote external/gif_archive -iquote bazel-out/local-opt/genfiles/external/gif_archive -iquote external/jpeg -iquote bazel-out/local-opt/genfiles/external/jpeg -iquote external/com_googlesource_code_re2 -iquote bazel-out/local-opt/genfiles/external/com_googlesource_code_re2 -iquote external/farmhash_archive -iquote bazel-out/local-opt/genfiles/external/farmhash_archive -iquote external/highwayhash -iquote bazel-out/local-opt/genfiles/external/highwayhash -iquote external/png_archive -iquote bazel-out/local-opt/genfiles/external/png_archive -iquote external/zlib_archive -iquote bazel-out/local-opt/genfiles/external/zlib_archive -iquote external/local_config_cuda -iquote bazel-out/local-opt/genfiles/external/local_config_cuda -iquote external/gemmlowp -iquote bazel-out/local-opt/genfiles/external/gemmlowp -isystem external/jemalloc/include -isystem bazel-out/local-opt/genfiles/external/jemalloc/include -isystem external/bazel_tools/tools/cpp/gcc3 -isystem external/protobuf/src -isystem bazel-out/local-opt/genfiles/external/protobuf/src -isystem external/eigen_archive -isystem bazel-out/local-opt/genfiles/external/eigen_archive -isystem external/gif_archive/lib -isystem bazel-out/local-opt/genfiles/external/gif_archive/lib -isystem external/farmhash_archive/src -isystem bazel-out/local-opt/genfiles/external/farmhash_archive/src -isystem external/png_archive -isystem bazel-out/local-opt/genfiles/external/png_archive -isystem external/zlib_archive -isystem bazel-out/local-opt/genfiles/external/zlib_archive -isystem external/local_config_cuda/cuda -isystem bazel-out/local-opt/genfiles/external/local_config_cuda/cuda -isystem external/local_config_cuda/cuda/include -isystem bazel-out/local-opt/genfiles/external/local_config_cuda/cuda/include -fno-canonical-system-headers -Wno-builtin-macro-redefined '-D__DATE__=\"redacted\"' '-D__TIMESTAMP__=\"redacted\"' '-D__TIME__=\"redacted\"' -c tensorflow/cc/example/example.cc -o bazel-out/local-opt/bin/tensorflow/cc/example/_objs/example/tensorflow/cc/example/example.o)\nSo under the bazel cache root directory: /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow (will be different on your machine) one can find all the include files and the directories needed are the arguments to the -iquote and -isystem flags in the gcc command. So all of those will have to be included.\nAgain, I provide this as a possible starting point. I realize that use of the C++ API without bazel at this time is inconvenient to say the least. It's something we'd like get done, but haven't gotten around to at this point an contributions (in terms of say bazel rules or scripts that can package the .so and all headers files into a single tarball) would be welcome", "body": "@lababidi : There are no docs about this yet since it is not something we currently support. @skye is looking into packaging, but this not something that has gotten priority at the moment given all the other pursuits. In particular, the built shared library and all the header files need to be packaged.\r\n\r\nNote though, you can still use bazel to build C++ programs as in https://www.tensorflow.org/api_guides/cc/guide\r\n\r\nI sincerely apologize, but I don't have a good answer for how to package all the required header files and for now we'd have to just encourage folks out there to figure it out and share their ideas.\r\n\r\nOne possible starting point might be to look at the `g++` commands that bazel executes and learn the include directories from there. For example, I did the following:\r\n\r\n```sh\r\n# Followed the instructions in https://www.tensorflow.org/api_guides/cc/guide to build\r\n# an example C++ program using bazel\r\nbazel build -c opt //tensorflow/cc/example:example\r\n\r\n# Delete the generated files\r\nrm -rf ./bazel-out/local-opt/tensorflow/cc/example\r\n\r\n# Recompile the example program and get the GCC command used:\r\nbazel build -s -c opt //tensorflow/cc/example:example\r\n```\r\n\r\nThat showed me something like the following:\r\n\r\n```sh\r\n(cd /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow && \\\r\n  exec env - \\\r\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \\\r\n  /usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -B/usr/bin -B/usr/bin -Wunused-but-set-parameter -Wno-free-nonheap-object -fno-omit-frame-pointer -g0 -O2 '-D_FORTIFY_SOURCE=1' -DNDEBUG -ffunction-sections -fdata-sections '-std=c++0x' -MD -MF bazel-out/local-opt/bin/tensorflow/cc/example/_objs/example/tensorflow/cc/example/example.d '-frandom-seed=bazel-out/local-opt/bin/tensorflow/cc/example/_objs/example/tensorflow/cc/example/example.o' -DEIGEN_MPL2_ONLY -DTENSORFLOW_USE_JEMALLOC -iquote . -iquote bazel-out/local-opt/genfiles -iquote external/jemalloc -iquote bazel-out/local-opt/genfiles/external/jemalloc -iquote external/bazel_tools -iquote bazel-out/local-opt/genfiles/external/bazel_tools -iquote external/protobuf -iquote bazel-out/local-opt/genfiles/external/protobuf -iquote external/eigen_archive -iquote bazel-out/local-opt/genfiles/external/eigen_archive -iquote external/local_config_sycl -iquote bazel-out/local-opt/genfiles/external/local_config_sycl -iquote external/gif_archive -iquote bazel-out/local-opt/genfiles/external/gif_archive -iquote external/jpeg -iquote bazel-out/local-opt/genfiles/external/jpeg -iquote external/com_googlesource_code_re2 -iquote bazel-out/local-opt/genfiles/external/com_googlesource_code_re2 -iquote external/farmhash_archive -iquote bazel-out/local-opt/genfiles/external/farmhash_archive -iquote external/highwayhash -iquote bazel-out/local-opt/genfiles/external/highwayhash -iquote external/png_archive -iquote bazel-out/local-opt/genfiles/external/png_archive -iquote external/zlib_archive -iquote bazel-out/local-opt/genfiles/external/zlib_archive -iquote external/local_config_cuda -iquote bazel-out/local-opt/genfiles/external/local_config_cuda -iquote external/gemmlowp -iquote bazel-out/local-opt/genfiles/external/gemmlowp -isystem external/jemalloc/include -isystem bazel-out/local-opt/genfiles/external/jemalloc/include -isystem external/bazel_tools/tools/cpp/gcc3 -isystem external/protobuf/src -isystem bazel-out/local-opt/genfiles/external/protobuf/src -isystem external/eigen_archive -isystem bazel-out/local-opt/genfiles/external/eigen_archive -isystem external/gif_archive/lib -isystem bazel-out/local-opt/genfiles/external/gif_archive/lib -isystem external/farmhash_archive/src -isystem bazel-out/local-opt/genfiles/external/farmhash_archive/src -isystem external/png_archive -isystem bazel-out/local-opt/genfiles/external/png_archive -isystem external/zlib_archive -isystem bazel-out/local-opt/genfiles/external/zlib_archive -isystem external/local_config_cuda/cuda -isystem bazel-out/local-opt/genfiles/external/local_config_cuda/cuda -isystem external/local_config_cuda/cuda/include -isystem bazel-out/local-opt/genfiles/external/local_config_cuda/cuda/include -fno-canonical-system-headers -Wno-builtin-macro-redefined '-D__DATE__=\"redacted\"' '-D__TIMESTAMP__=\"redacted\"' '-D__TIME__=\"redacted\"' -c tensorflow/cc/example/example.cc -o bazel-out/local-opt/bin/tensorflow/cc/example/_objs/example/tensorflow/cc/example/example.o)\r\n```\r\n\r\nSo under the bazel cache root directory: `/root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow` (will be different on your machine) one can find all the include files and the directories needed are the arguments to the `-iquote` and `-isystem` flags in the `gcc` command. So all of those will have to be included.\r\n\r\nAgain, I provide this as a possible starting point. I realize that use of the C++ API without bazel at this time is inconvenient to say the least. It's something we'd like get done, but haven't gotten around to at this point an contributions (in terms of say bazel rules or scripts that can package the `.so` and all headers files into a single tarball) would be welcome"}