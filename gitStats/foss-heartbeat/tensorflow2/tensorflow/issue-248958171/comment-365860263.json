{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/365860263", "html_url": "https://github.com/tensorflow/tensorflow/issues/12132#issuecomment-365860263", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12132", "id": 365860263, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTg2MDI2Mw==", "user": {"login": "stengoes", "id": 17768094, "node_id": "MDQ6VXNlcjE3NzY4MDk0", "avatar_url": "https://avatars2.githubusercontent.com/u/17768094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stengoes", "html_url": "https://github.com/stengoes", "followers_url": "https://api.github.com/users/stengoes/followers", "following_url": "https://api.github.com/users/stengoes/following{/other_user}", "gists_url": "https://api.github.com/users/stengoes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stengoes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stengoes/subscriptions", "organizations_url": "https://api.github.com/users/stengoes/orgs", "repos_url": "https://api.github.com/users/stengoes/repos", "events_url": "https://api.github.com/users/stengoes/events{/privacy}", "received_events_url": "https://api.github.com/users/stengoes/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-15T08:45:46Z", "updated_at": "2018-02-15T08:45:46Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=14067630\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/AustinVan\">@AustinVan</a> I still believe that my implementation is right.</p>\n<p>The number of output channels of the depthwise-conv does NOT necessarily have to be equal to the number input channels. See the documentation of the seperable conv here:<br>\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d\" rel=\"nofollow\">https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d</a></p>\n<p>It says that the pointwise filter has dimensions:<br>\n<code>[1, 1, channel_multiplier * in_channels, out_channels]</code>.</p>\n<p>This means that the number of input channels of the pointwise-conv (which is the same as the number of output channels of the depthwise-conv) is channel_multiplier * in_channels. So unless channel_multiplier equals 1 your claim is wrong.</p>\n<p>The channel multiplier comes from the number of depthwise filters which has dimensions:<br>\n<code>[filter_height, filter_width, in_channels, channel_multiplier]</code></p>\n<p>Moreover the implementation also checks for equality between my implementation and the seperable conv:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Assert equality of the different methods</span>\nnorm, sep <span class=\"pl-k\">=</span> sess.run([normal, separable])\nnp.testing.assert_almost_equal(norm, sep, <span class=\"pl-v\">decimal</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)</pre></div>\n<p>However, I did just notice that with the newer versions of tensorflow the implementation of the seperable conv layer <a href=\"https://github.com/tensorflow/tensorflow/blob/c959ec71e8a06a9a4a20fc3fce0511f4316d337d/tensorflow/python/ops/nn_impl.py#L453-L547\">(see here)</a>  has changed. So the new implementation might be faster now. I will check it later this week.</p>", "body_text": "@AustinVan I still believe that my implementation is right.\nThe number of output channels of the depthwise-conv does NOT necessarily have to be equal to the number input channels. See the documentation of the seperable conv here:\nhttps://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d\nIt says that the pointwise filter has dimensions:\n[1, 1, channel_multiplier * in_channels, out_channels].\nThis means that the number of input channels of the pointwise-conv (which is the same as the number of output channels of the depthwise-conv) is channel_multiplier * in_channels. So unless channel_multiplier equals 1 your claim is wrong.\nThe channel multiplier comes from the number of depthwise filters which has dimensions:\n[filter_height, filter_width, in_channels, channel_multiplier]\nMoreover the implementation also checks for equality between my implementation and the seperable conv:\n# Assert equality of the different methods\nnorm, sep = sess.run([normal, separable])\nnp.testing.assert_almost_equal(norm, sep, decimal=3)\nHowever, I did just notice that with the newer versions of tensorflow the implementation of the seperable conv layer (see here)  has changed. So the new implementation might be faster now. I will check it later this week.", "body": "@AustinVan I still believe that my implementation is right. \r\n\r\nThe number of output channels of the depthwise-conv does NOT necessarily have to be equal to the number input channels. See the documentation of the seperable conv here:\r\nhttps://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d\r\n\r\nIt says that the pointwise filter has dimensions: \r\n```[1, 1, channel_multiplier * in_channels, out_channels]```. \r\n\r\nThis means that the number of input channels of the pointwise-conv (which is the same as the number of output channels of the depthwise-conv) is channel_multiplier * in_channels. So unless channel_multiplier equals 1 your claim is wrong. \r\n\r\nThe channel multiplier comes from the number of depthwise filters which has dimensions:\r\n```[filter_height, filter_width, in_channels, channel_multiplier]```\r\n\r\nMoreover the implementation also checks for equality between my implementation and the seperable conv: \r\n```python \r\n# Assert equality of the different methods\r\nnorm, sep = sess.run([normal, separable])\r\nnp.testing.assert_almost_equal(norm, sep, decimal=3)\r\n```\r\n\r\nHowever, I did just notice that with the newer versions of tensorflow the implementation of the seperable conv layer [(see here)](https://github.com/tensorflow/tensorflow/blob/c959ec71e8a06a9a4a20fc3fce0511f4316d337d/tensorflow/python/ops/nn_impl.py#L453-L547)  has changed. So the new implementation might be faster now. I will check it later this week.\r\n\r\n"}