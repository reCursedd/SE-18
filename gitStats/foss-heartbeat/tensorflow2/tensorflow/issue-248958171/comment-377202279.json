{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/377202279", "html_url": "https://github.com/tensorflow/tensorflow/issues/12132#issuecomment-377202279", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12132", "id": 377202279, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzIwMjI3OQ==", "user": {"login": "showgood163", "id": 6279367, "node_id": "MDQ6VXNlcjYyNzkzNjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/6279367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/showgood163", "html_url": "https://github.com/showgood163", "followers_url": "https://api.github.com/users/showgood163/followers", "following_url": "https://api.github.com/users/showgood163/following{/other_user}", "gists_url": "https://api.github.com/users/showgood163/gists{/gist_id}", "starred_url": "https://api.github.com/users/showgood163/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/showgood163/subscriptions", "organizations_url": "https://api.github.com/users/showgood163/orgs", "repos_url": "https://api.github.com/users/showgood163/repos", "events_url": "https://api.github.com/users/showgood163/events{/privacy}", "received_events_url": "https://api.github.com/users/showgood163/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-29T11:10:18Z", "updated_at": "2018-04-20T07:22:19Z", "author_association": "NONE", "body_html": "<p>For me the tf.nn.depthwise_conv2d_native function is really annoying.<br>\nI ran the code <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=17768094\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/stengoes\">@stengoes</a> provided and added the time test for tf.nn.depthwise_conv2d_native.<br>\nIn tensorflow v1.6.0 with cuda 9.1.85.2 and cudnn 7.1.2 on the gtx 1080, I get:<br>\n<code>Normal method: 4ms       Depthwise method: 31ms          Separable method: 28ms</code></p>\n<p>The code is as follow:</p>\n<pre><code>\nimport tensorflow as tf\nimport numpy as np\nimport time\n\n# Define a scenario\nbatch_size = 64\nchannels = 32\nimage_size = 32\nfeature_maps = 64\nfilter_size = 15\ndepthwise_filters = 8\n\n# Dummy images\nimages = tf.random_normal(shape=[batch_size, channels, image_size, image_size], \n                          dtype=tf.float32)\n\n# Filter definitions\nbasis_filters = tf.random_normal(shape=[filter_size, filter_size, channels, depthwise_filters], \n                                 dtype=tf.float32)\ncoeffs = tf.random_normal(shape=[channels, depthwise_filters, feature_maps], \n                          dtype=tf.float32)\n\n# Normal method\neffective_filters = tf.einsum('hwcm,cmn-&gt;hwcn', basis_filters, coeffs)\nnormal = tf.nn.conv2d(images, \n                      effective_filters, \n                      strides=[1, 1, 1, 1], \n                      padding=\"SAME\", \n                      use_cudnn_on_gpu=True, \n                      data_format=\"NCHW\")\n\n# Separable method\ndepthwise = tf.nn.depthwise_conv2d_native(images, \n                                          basis_filters, \n                                          strides=[1, 1, 1, 1], \n                                          padding=\"SAME\", \n                                          data_format=\"NCHW\")\n\ncoeffs = tf.reshape(coeffs, [1, 1, channels*depthwise_filters, feature_maps])\nseparable = tf.nn.conv2d(depthwise, \n                         coeffs, \n                         strides=[1, 1, 1, 1], \n                         padding=\"VALID\", \n                         use_cudnn_on_gpu=True, \n                         data_format=\"NCHW\")\n\n\nwith tf.Session() as sess:\n\n    # Assert equality of the different methods\n    norm, sep = sess.run([normal, separable])\n    np.testing.assert_almost_equal(norm, sep, decimal=3)\n\n    repeats = 256\n\n    # Benchmark normal method\n    start = time.time()\n    for _ in range(repeats):\n        _ = sess.run(normal)\n    end = time.time()\n    d1 = int((end - start) / repeats * 1000)\n\n    # Benchmark depthwise method\n    start = time.time()\n    for _ in range(repeats):\n        _ = sess.run(depthwise)\n    end = time.time()\n    d2 = int((end - start) / repeats * 1000)\n\n    # Benchmark seperable method\n    start = time.time()\n    for _ in range(repeats):\n        _ = sess.run(separable)\n    end = time.time()\n    d3 = int((end - start) / repeats * 1000)\n\n    # Print results\n    print(\"Normal method: {}ms \\t Depthwise method: {}ms \\t Separable method: {}ms\".format(d1, d2, d3))\n\n</code></pre>", "body_text": "For me the tf.nn.depthwise_conv2d_native function is really annoying.\nI ran the code @stengoes provided and added the time test for tf.nn.depthwise_conv2d_native.\nIn tensorflow v1.6.0 with cuda 9.1.85.2 and cudnn 7.1.2 on the gtx 1080, I get:\nNormal method: 4ms       Depthwise method: 31ms          Separable method: 28ms\nThe code is as follow:\n\nimport tensorflow as tf\nimport numpy as np\nimport time\n\n# Define a scenario\nbatch_size = 64\nchannels = 32\nimage_size = 32\nfeature_maps = 64\nfilter_size = 15\ndepthwise_filters = 8\n\n# Dummy images\nimages = tf.random_normal(shape=[batch_size, channels, image_size, image_size], \n                          dtype=tf.float32)\n\n# Filter definitions\nbasis_filters = tf.random_normal(shape=[filter_size, filter_size, channels, depthwise_filters], \n                                 dtype=tf.float32)\ncoeffs = tf.random_normal(shape=[channels, depthwise_filters, feature_maps], \n                          dtype=tf.float32)\n\n# Normal method\neffective_filters = tf.einsum('hwcm,cmn->hwcn', basis_filters, coeffs)\nnormal = tf.nn.conv2d(images, \n                      effective_filters, \n                      strides=[1, 1, 1, 1], \n                      padding=\"SAME\", \n                      use_cudnn_on_gpu=True, \n                      data_format=\"NCHW\")\n\n# Separable method\ndepthwise = tf.nn.depthwise_conv2d_native(images, \n                                          basis_filters, \n                                          strides=[1, 1, 1, 1], \n                                          padding=\"SAME\", \n                                          data_format=\"NCHW\")\n\ncoeffs = tf.reshape(coeffs, [1, 1, channels*depthwise_filters, feature_maps])\nseparable = tf.nn.conv2d(depthwise, \n                         coeffs, \n                         strides=[1, 1, 1, 1], \n                         padding=\"VALID\", \n                         use_cudnn_on_gpu=True, \n                         data_format=\"NCHW\")\n\n\nwith tf.Session() as sess:\n\n    # Assert equality of the different methods\n    norm, sep = sess.run([normal, separable])\n    np.testing.assert_almost_equal(norm, sep, decimal=3)\n\n    repeats = 256\n\n    # Benchmark normal method\n    start = time.time()\n    for _ in range(repeats):\n        _ = sess.run(normal)\n    end = time.time()\n    d1 = int((end - start) / repeats * 1000)\n\n    # Benchmark depthwise method\n    start = time.time()\n    for _ in range(repeats):\n        _ = sess.run(depthwise)\n    end = time.time()\n    d2 = int((end - start) / repeats * 1000)\n\n    # Benchmark seperable method\n    start = time.time()\n    for _ in range(repeats):\n        _ = sess.run(separable)\n    end = time.time()\n    d3 = int((end - start) / repeats * 1000)\n\n    # Print results\n    print(\"Normal method: {}ms \\t Depthwise method: {}ms \\t Separable method: {}ms\".format(d1, d2, d3))", "body": "For me the tf.nn.depthwise_conv2d_native function is really annoying.\r\nI ran the code @stengoes provided and added the time test for tf.nn.depthwise_conv2d_native.\r\nIn tensorflow v1.6.0 with cuda 9.1.85.2 and cudnn 7.1.2 on the gtx 1080, I get:\r\n`Normal method: 4ms       Depthwise method: 31ms          Separable method: 28ms`\r\n\r\nThe code is as follow:\r\n```\r\n\r\nimport tensorflow as tf\r\nimport numpy as np\r\nimport time\r\n\r\n# Define a scenario\r\nbatch_size = 64\r\nchannels = 32\r\nimage_size = 32\r\nfeature_maps = 64\r\nfilter_size = 15\r\ndepthwise_filters = 8\r\n\r\n# Dummy images\r\nimages = tf.random_normal(shape=[batch_size, channels, image_size, image_size], \r\n                          dtype=tf.float32)\r\n\r\n# Filter definitions\r\nbasis_filters = tf.random_normal(shape=[filter_size, filter_size, channels, depthwise_filters], \r\n                                 dtype=tf.float32)\r\ncoeffs = tf.random_normal(shape=[channels, depthwise_filters, feature_maps], \r\n                          dtype=tf.float32)\r\n\r\n# Normal method\r\neffective_filters = tf.einsum('hwcm,cmn->hwcn', basis_filters, coeffs)\r\nnormal = tf.nn.conv2d(images, \r\n                      effective_filters, \r\n                      strides=[1, 1, 1, 1], \r\n                      padding=\"SAME\", \r\n                      use_cudnn_on_gpu=True, \r\n                      data_format=\"NCHW\")\r\n\r\n# Separable method\r\ndepthwise = tf.nn.depthwise_conv2d_native(images, \r\n                                          basis_filters, \r\n                                          strides=[1, 1, 1, 1], \r\n                                          padding=\"SAME\", \r\n                                          data_format=\"NCHW\")\r\n\r\ncoeffs = tf.reshape(coeffs, [1, 1, channels*depthwise_filters, feature_maps])\r\nseparable = tf.nn.conv2d(depthwise, \r\n                         coeffs, \r\n                         strides=[1, 1, 1, 1], \r\n                         padding=\"VALID\", \r\n                         use_cudnn_on_gpu=True, \r\n                         data_format=\"NCHW\")\r\n\r\n\r\nwith tf.Session() as sess:\r\n\r\n    # Assert equality of the different methods\r\n    norm, sep = sess.run([normal, separable])\r\n    np.testing.assert_almost_equal(norm, sep, decimal=3)\r\n\r\n    repeats = 256\r\n\r\n    # Benchmark normal method\r\n    start = time.time()\r\n    for _ in range(repeats):\r\n        _ = sess.run(normal)\r\n    end = time.time()\r\n    d1 = int((end - start) / repeats * 1000)\r\n\r\n    # Benchmark depthwise method\r\n    start = time.time()\r\n    for _ in range(repeats):\r\n        _ = sess.run(depthwise)\r\n    end = time.time()\r\n    d2 = int((end - start) / repeats * 1000)\r\n\r\n    # Benchmark seperable method\r\n    start = time.time()\r\n    for _ in range(repeats):\r\n        _ = sess.run(separable)\r\n    end = time.time()\r\n    d3 = int((end - start) / repeats * 1000)\r\n\r\n    # Print results\r\n    print(\"Normal method: {}ms \\t Depthwise method: {}ms \\t Separable method: {}ms\".format(d1, d2, d3))\r\n\r\n```"}