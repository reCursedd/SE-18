{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1545", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1545/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1545/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1545/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1545", "id": 141865553, "node_id": "MDU6SXNzdWUxNDE4NjU1NTM=", "number": 1545, "title": "why I use conv2d with padding='VALID' is more slow than SAME?", "user": {"login": "brantbzhang", "id": 1318167, "node_id": "MDQ6VXNlcjEzMTgxNjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1318167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brantbzhang", "html_url": "https://github.com/brantbzhang", "followers_url": "https://api.github.com/users/brantbzhang/followers", "following_url": "https://api.github.com/users/brantbzhang/following{/other_user}", "gists_url": "https://api.github.com/users/brantbzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/brantbzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brantbzhang/subscriptions", "organizations_url": "https://api.github.com/users/brantbzhang/orgs", "repos_url": "https://api.github.com/users/brantbzhang/repos", "events_url": "https://api.github.com/users/brantbzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/brantbzhang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "zheng-xq", "id": 15736910, "node_id": "MDQ6VXNlcjE1NzM2OTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/15736910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zheng-xq", "html_url": "https://github.com/zheng-xq", "followers_url": "https://api.github.com/users/zheng-xq/followers", "following_url": "https://api.github.com/users/zheng-xq/following{/other_user}", "gists_url": "https://api.github.com/users/zheng-xq/gists{/gist_id}", "starred_url": "https://api.github.com/users/zheng-xq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zheng-xq/subscriptions", "organizations_url": "https://api.github.com/users/zheng-xq/orgs", "repos_url": "https://api.github.com/users/zheng-xq/repos", "events_url": "https://api.github.com/users/zheng-xq/events{/privacy}", "received_events_url": "https://api.github.com/users/zheng-xq/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "zheng-xq", "id": 15736910, "node_id": "MDQ6VXNlcjE1NzM2OTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/15736910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zheng-xq", "html_url": "https://github.com/zheng-xq", "followers_url": "https://api.github.com/users/zheng-xq/followers", "following_url": "https://api.github.com/users/zheng-xq/following{/other_user}", "gists_url": "https://api.github.com/users/zheng-xq/gists{/gist_id}", "starred_url": "https://api.github.com/users/zheng-xq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zheng-xq/subscriptions", "organizations_url": "https://api.github.com/users/zheng-xq/orgs", "repos_url": "https://api.github.com/users/zheng-xq/repos", "events_url": "https://api.github.com/users/zheng-xq/events{/privacy}", "received_events_url": "https://api.github.com/users/zheng-xq/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2016-03-18T13:28:10Z", "updated_at": "2016-06-28T18:25:56Z", "closed_at": "2016-06-28T18:25:56Z", "author_association": "NONE", "body_html": "<p>I use cnn for text classification.Document max len:200;Embedding size:120<br>\nWhen I use conv2d with padding='VALID'.  127.6 examples/sec<br>\nWhen I use conv2d with padding='SAME'.  333.3 examples/sec</p>\n<p>def cnn_model(X,prefix,is_train=False):<br>\nwith tf.variable_scope(prefix):<br>\nwith tf.device('/gpu:0'):<br>\nembeddings = tf.Variable(<br>\ntf.random_uniform([WORDS_NUM, EMBEDDING_SIZE], -1.0, 1.0))<br>\nembed = tf.nn.embedding_lookup(embeddings, X)<br>\nword_vectors = tf.expand_dims(embed, 3)<br>\nwith tf.variable_scope('CNN_Layer1'):<br>\nconv1=skflow.ops.conv2d(word_vectors,64,(2,EMBEDDING_SIZE),(1,1,1,1),padding='VALID')<br>\nconv1=tf.nn.relu(conv1)<br>\npool1=tf.nn.max_pool(conv1,ksize=[1,2,1,1],strides=[1,2,1,1],padding='SAME')<br>\nnet=tf.reshape(pool1,[BATCH_SIZE,-1])<br>\nif is_train:<br>\nnet=tf.nn.dropout(net, 0.7)<br>\nnet = slim.ops.fc(net, NUM_LABELS, activation=None, scope='fc8')<br>\nreturn net</p>", "body_text": "I use cnn for text classification.Document max len:200;Embedding size:120\nWhen I use conv2d with padding='VALID'.  127.6 examples/sec\nWhen I use conv2d with padding='SAME'.  333.3 examples/sec\ndef cnn_model(X,prefix,is_train=False):\nwith tf.variable_scope(prefix):\nwith tf.device('/gpu:0'):\nembeddings = tf.Variable(\ntf.random_uniform([WORDS_NUM, EMBEDDING_SIZE], -1.0, 1.0))\nembed = tf.nn.embedding_lookup(embeddings, X)\nword_vectors = tf.expand_dims(embed, 3)\nwith tf.variable_scope('CNN_Layer1'):\nconv1=skflow.ops.conv2d(word_vectors,64,(2,EMBEDDING_SIZE),(1,1,1,1),padding='VALID')\nconv1=tf.nn.relu(conv1)\npool1=tf.nn.max_pool(conv1,ksize=[1,2,1,1],strides=[1,2,1,1],padding='SAME')\nnet=tf.reshape(pool1,[BATCH_SIZE,-1])\nif is_train:\nnet=tf.nn.dropout(net, 0.7)\nnet = slim.ops.fc(net, NUM_LABELS, activation=None, scope='fc8')\nreturn net", "body": "I use cnn for text classification.Document max len:200;Embedding size:120\nWhen I use conv2d with padding='VALID'.  127.6 examples/sec\nWhen I use conv2d with padding='SAME'.  333.3 examples/sec\n\ndef cnn_model(X,prefix,is_train=False):\n    with tf.variable_scope(prefix):\n        with tf.device('/gpu:0'):\n            embeddings = tf.Variable(\n                tf.random_uniform([WORDS_NUM, EMBEDDING_SIZE], -1.0, 1.0))\n            embed = tf.nn.embedding_lookup(embeddings, X)\n        word_vectors = tf.expand_dims(embed, 3)\n        with tf.variable_scope('CNN_Layer1'):\n            conv1=skflow.ops.conv2d(word_vectors,64,(2,EMBEDDING_SIZE),(1,1,1,1),padding='VALID')\n            conv1=tf.nn.relu(conv1)\n            pool1=tf.nn.max_pool(conv1,ksize=[1,2,1,1],strides=[1,2,1,1],padding='SAME')\n        net=tf.reshape(pool1,[BATCH_SIZE,-1])\n        if is_train:\n            net=tf.nn.dropout(net, 0.7)\n        net = slim.ops.fc(net, NUM_LABELS, activation=None, scope='fc8')\n        return net\n"}