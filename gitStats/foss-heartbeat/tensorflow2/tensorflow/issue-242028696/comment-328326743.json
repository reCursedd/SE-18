{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/328326743", "html_url": "https://github.com/tensorflow/tensorflow/issues/11431#issuecomment-328326743", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11431", "id": 328326743, "node_id": "MDEyOklzc3VlQ29tbWVudDMyODMyNjc0Mw==", "user": {"login": "shahidhs-ibm", "id": 13886965, "node_id": "MDQ6VXNlcjEzODg2OTY1", "avatar_url": "https://avatars3.githubusercontent.com/u/13886965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shahidhs-ibm", "html_url": "https://github.com/shahidhs-ibm", "followers_url": "https://api.github.com/users/shahidhs-ibm/followers", "following_url": "https://api.github.com/users/shahidhs-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/shahidhs-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/shahidhs-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shahidhs-ibm/subscriptions", "organizations_url": "https://api.github.com/users/shahidhs-ibm/orgs", "repos_url": "https://api.github.com/users/shahidhs-ibm/repos", "events_url": "https://api.github.com/users/shahidhs-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/shahidhs-ibm/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-10T08:06:42Z", "updated_at": "2017-09-10T08:06:42Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Correcting the fix given in the above comment:</p>\n<pre><code>--- a/tensorflow/python/framework/tensor_util.py\n+++ b/tensorflow/python/framework/tensor_util.py\n@@ -617,7 +617,7 @@ def _ConstantValue(tensor):\n   elif tensor.op.type == \"Rank\":\n     input_shape = tensor.op.inputs[0].get_shape()\n     if input_shape.ndims is not None:\n-      return np.ndarray(shape=(), buffer=np.array([input_shape.ndims]),\n+      return np.ndarray(shape=(), buffer=np.array([input_shape.ndims], dtype=np.int32),\n                         dtype=np.int32)\n     else:\n       return None\n</code></pre>\n<p>The missing data type in the nparray is behaving differently on the big endian machines. This solution works fine for Intel as well zSystems architecture. Will create a PR for same.</p>", "body_text": "Correcting the fix given in the above comment:\n--- a/tensorflow/python/framework/tensor_util.py\n+++ b/tensorflow/python/framework/tensor_util.py\n@@ -617,7 +617,7 @@ def _ConstantValue(tensor):\n   elif tensor.op.type == \"Rank\":\n     input_shape = tensor.op.inputs[0].get_shape()\n     if input_shape.ndims is not None:\n-      return np.ndarray(shape=(), buffer=np.array([input_shape.ndims]),\n+      return np.ndarray(shape=(), buffer=np.array([input_shape.ndims], dtype=np.int32),\n                         dtype=np.int32)\n     else:\n       return None\n\nThe missing data type in the nparray is behaving differently on the big endian machines. This solution works fine for Intel as well zSystems architecture. Will create a PR for same.", "body": "Correcting the fix given in the above comment:\r\n```\r\n--- a/tensorflow/python/framework/tensor_util.py\r\n+++ b/tensorflow/python/framework/tensor_util.py\r\n@@ -617,7 +617,7 @@ def _ConstantValue(tensor):\r\n   elif tensor.op.type == \"Rank\":\r\n     input_shape = tensor.op.inputs[0].get_shape()\r\n     if input_shape.ndims is not None:\r\n-      return np.ndarray(shape=(), buffer=np.array([input_shape.ndims]),\r\n+      return np.ndarray(shape=(), buffer=np.array([input_shape.ndims], dtype=np.int32),\r\n                         dtype=np.int32)\r\n     else:\r\n       return None\r\n```\r\nThe missing data type in the nparray is behaving differently on the big endian machines. This solution works fine for Intel as well zSystems architecture. Will create a PR for same. "}