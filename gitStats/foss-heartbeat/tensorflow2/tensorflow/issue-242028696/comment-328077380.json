{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/328077380", "html_url": "https://github.com/tensorflow/tensorflow/issues/11431#issuecomment-328077380", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11431", "id": 328077380, "node_id": "MDEyOklzc3VlQ29tbWVudDMyODA3NzM4MA==", "user": {"login": "namrata-ibm", "id": 21953668, "node_id": "MDQ6VXNlcjIxOTUzNjY4", "avatar_url": "https://avatars3.githubusercontent.com/u/21953668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/namrata-ibm", "html_url": "https://github.com/namrata-ibm", "followers_url": "https://api.github.com/users/namrata-ibm/followers", "following_url": "https://api.github.com/users/namrata-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/namrata-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/namrata-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/namrata-ibm/subscriptions", "organizations_url": "https://api.github.com/users/namrata-ibm/orgs", "repos_url": "https://api.github.com/users/namrata-ibm/repos", "events_url": "https://api.github.com/users/namrata-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/namrata-ibm/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-08T11:19:26Z", "updated_at": "2017-09-08T11:19:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>, I was looking at the statically inferred rank vs statically unknown rank calculation.<br>\nFrom the <a href=\"https://github.com/tensorflow/tensorflow/blob/v1.2.1/tensorflow/python/ops/array_ops.py#L1276\">code</a> :</p>\n<pre><code>  with ops.name_scope(name, \"transpose\", [a]) as name: \n      if perm is None: \n        rank = gen_array_ops.rank(a) \n        perm = (rank - 1) - gen_math_ops._range(0, rank, 1) \n</code></pre>\n<p>I printed the <code>range</code> calculated above, in 2 scenarios</p>\n<ol>\n<li>when , rank = gen_array_ops.rank(a)</li>\n</ol>\n<pre><code>(Pdb) p gen_math_ops._range(0, rank, 1)\n&lt;tf.Tensor 'transpose/Range:0' shape=(0,) dtype=int32&gt;\n</code></pre>\n<p>whereas<br>\n2. If we change,  rank_a = rank(a)</p>\n<pre><code>(Pdb) p gen_math_ops._range(0, rank_a, 1)\n&lt;tf.Tensor 'transpose/Range:0' shape=(2,) dtype=int32&gt;\n</code></pre>\n<p>In both cases, <strong>rank / rank_a</strong> is:</p>\n<pre><code>(Pdb) p rank\n&lt;tf.Tensor 'transpose/Rank:0' shape=() dtype=int32&gt;\n(Pdb) p rank.shape\nTensorShape([])\n(Pdb) p rank.eval()\n2\n(Pdb) p (gen_math_ops._range(0, rank, 1)).eval()\narray([0, 1], dtype=int32)\n</code></pre>\n<p>Is there some other property of rank tensor which I haven't printed and is affecting the calaculation of shape of <code>Range</code>?</p>", "body_text": "@mrry, I was looking at the statically inferred rank vs statically unknown rank calculation.\nFrom the code :\n  with ops.name_scope(name, \"transpose\", [a]) as name: \n      if perm is None: \n        rank = gen_array_ops.rank(a) \n        perm = (rank - 1) - gen_math_ops._range(0, rank, 1) \n\nI printed the range calculated above, in 2 scenarios\n\nwhen , rank = gen_array_ops.rank(a)\n\n(Pdb) p gen_math_ops._range(0, rank, 1)\n<tf.Tensor 'transpose/Range:0' shape=(0,) dtype=int32>\n\nwhereas\n2. If we change,  rank_a = rank(a)\n(Pdb) p gen_math_ops._range(0, rank_a, 1)\n<tf.Tensor 'transpose/Range:0' shape=(2,) dtype=int32>\n\nIn both cases, rank / rank_a is:\n(Pdb) p rank\n<tf.Tensor 'transpose/Rank:0' shape=() dtype=int32>\n(Pdb) p rank.shape\nTensorShape([])\n(Pdb) p rank.eval()\n2\n(Pdb) p (gen_math_ops._range(0, rank, 1)).eval()\narray([0, 1], dtype=int32)\n\nIs there some other property of rank tensor which I haven't printed and is affecting the calaculation of shape of Range?", "body": "@mrry, I was looking at the statically inferred rank vs statically unknown rank calculation. \r\nFrom the [code](https://github.com/tensorflow/tensorflow/blob/v1.2.1/tensorflow/python/ops/array_ops.py#L1276) : \r\n```\r\n  with ops.name_scope(name, \"transpose\", [a]) as name: \r\n      if perm is None: \r\n        rank = gen_array_ops.rank(a) \r\n        perm = (rank - 1) - gen_math_ops._range(0, rank, 1) \r\n```\r\n\r\nI printed the `range` calculated above, in 2 scenarios\r\n1.  when , rank = gen_array_ops.rank(a) \r\n```\r\n(Pdb) p gen_math_ops._range(0, rank, 1)\r\n<tf.Tensor 'transpose/Range:0' shape=(0,) dtype=int32>\r\n```\r\nwhereas \r\n2. If we change,  rank_a = rank(a)\r\n```\r\n(Pdb) p gen_math_ops._range(0, rank_a, 1)\r\n<tf.Tensor 'transpose/Range:0' shape=(2,) dtype=int32>\r\n```\r\n\r\nIn both cases, **rank / rank_a** is:\r\n```\r\n(Pdb) p rank\r\n<tf.Tensor 'transpose/Rank:0' shape=() dtype=int32>\r\n(Pdb) p rank.shape\r\nTensorShape([])\r\n(Pdb) p rank.eval()\r\n2\r\n(Pdb) p (gen_math_ops._range(0, rank, 1)).eval()\r\narray([0, 1], dtype=int32)\r\n```\r\n\r\nIs there some other property of rank tensor which I haven't printed and is affecting the calaculation of shape of `Range`? \r\n\r\n\r\n"}