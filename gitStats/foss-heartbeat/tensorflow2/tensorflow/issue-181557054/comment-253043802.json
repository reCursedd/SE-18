{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/253043802", "html_url": "https://github.com/tensorflow/tensorflow/issues/4809#issuecomment-253043802", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4809", "id": 253043802, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MzA0MzgwMg==", "user": {"login": "prb12", "id": 11547801, "node_id": "MDQ6VXNlcjExNTQ3ODAx", "avatar_url": "https://avatars1.githubusercontent.com/u/11547801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prb12", "html_url": "https://github.com/prb12", "followers_url": "https://api.github.com/users/prb12/followers", "following_url": "https://api.github.com/users/prb12/following{/other_user}", "gists_url": "https://api.github.com/users/prb12/gists{/gist_id}", "starred_url": "https://api.github.com/users/prb12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prb12/subscriptions", "organizations_url": "https://api.github.com/users/prb12/orgs", "repos_url": "https://api.github.com/users/prb12/repos", "events_url": "https://api.github.com/users/prb12/events{/privacy}", "received_events_url": "https://api.github.com/users/prb12/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-11T20:57:41Z", "updated_at": "2016-10-11T20:59:34Z", "author_association": "MEMBER", "body_html": "<p>For historical reasons, it actually happens in <code>ExecutorState::NodeDone</code> <a href=\"https://github.com/tensorflow/tensorflow/blob/0a4f5b6bda405814af59803829216762e030728d/tensorflow/core/common_runtime/executor.cc#L1603\">here</a></p>\n<p>... and the test being done inside <code>SetTimelineLabel</code> makes very little sense any more.</p>\n<pre><code>bool ExecutorState::NodeDone(const Status&amp; s, const Node* node,\n                             const TaggedNodeSeq&amp; ready, NodeExecStats* stats,\n                             TaggedNodeReadyQueue* inline_ready) {\n  if (stats) {\n    nodestats::SetAllEnd(stats);\n    if (!SetTimelineLabel(node, stats)) {\n      // Only record non-transfer nodes.\n      stats_collector_-&gt;Save(impl_-&gt;params_.device-&gt;name(), stats);\n    } else {\n      delete stats;\n    }\n  }\n</code></pre>\n<p>I personally would prefer to see the Send op and both halves of the async Recv op in the timeline, with an arrow from the Send to RecvDone so that you can see the transfer latency.  However, last time I tried to change this lots of people complained ;-)</p>", "body_text": "For historical reasons, it actually happens in ExecutorState::NodeDone here\n... and the test being done inside SetTimelineLabel makes very little sense any more.\nbool ExecutorState::NodeDone(const Status& s, const Node* node,\n                             const TaggedNodeSeq& ready, NodeExecStats* stats,\n                             TaggedNodeReadyQueue* inline_ready) {\n  if (stats) {\n    nodestats::SetAllEnd(stats);\n    if (!SetTimelineLabel(node, stats)) {\n      // Only record non-transfer nodes.\n      stats_collector_->Save(impl_->params_.device->name(), stats);\n    } else {\n      delete stats;\n    }\n  }\n\nI personally would prefer to see the Send op and both halves of the async Recv op in the timeline, with an arrow from the Send to RecvDone so that you can see the transfer latency.  However, last time I tried to change this lots of people complained ;-)", "body": "For historical reasons, it actually happens in `ExecutorState::NodeDone` [here](https://github.com/tensorflow/tensorflow/blob/0a4f5b6bda405814af59803829216762e030728d/tensorflow/core/common_runtime/executor.cc#L1603)\n\n... and the test being done inside `SetTimelineLabel` makes very little sense any more.\n\n```\nbool ExecutorState::NodeDone(const Status& s, const Node* node,\n                             const TaggedNodeSeq& ready, NodeExecStats* stats,\n                             TaggedNodeReadyQueue* inline_ready) {\n  if (stats) {\n    nodestats::SetAllEnd(stats);\n    if (!SetTimelineLabel(node, stats)) {\n      // Only record non-transfer nodes.\n      stats_collector_->Save(impl_->params_.device->name(), stats);\n    } else {\n      delete stats;\n    }\n  }\n```\n\nI personally would prefer to see the Send op and both halves of the async Recv op in the timeline, with an arrow from the Send to RecvDone so that you can see the transfer latency.  However, last time I tried to change this lots of people complained ;-)\n"}