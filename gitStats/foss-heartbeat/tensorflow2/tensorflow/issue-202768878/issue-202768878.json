{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7034", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7034/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7034/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7034/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7034", "id": 202768878, "node_id": "MDU6SXNzdWUyMDI3Njg4Nzg=", "number": 7034, "title": "QueueRunner hanging", "user": {"login": "plooney", "id": 5527810, "node_id": "MDQ6VXNlcjU1Mjc4MTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5527810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plooney", "html_url": "https://github.com/plooney", "followers_url": "https://api.github.com/users/plooney/followers", "following_url": "https://api.github.com/users/plooney/following{/other_user}", "gists_url": "https://api.github.com/users/plooney/gists{/gist_id}", "starred_url": "https://api.github.com/users/plooney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plooney/subscriptions", "organizations_url": "https://api.github.com/users/plooney/orgs", "repos_url": "https://api.github.com/users/plooney/repos", "events_url": "https://api.github.com/users/plooney/events{/privacy}", "received_events_url": "https://api.github.com/users/plooney/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-24T09:44:38Z", "updated_at": "2017-02-13T17:42:18Z", "closed_at": "2017-02-13T17:42:18Z", "author_association": "NONE", "body_html": "<p>I find the queuerunner is hanging in the code below unless I uncomment the line</p>\n<p><code>#threads = tf.train.start_queue_runners(sess=sess, coord=coord)</code></p>\n<p>This isn't mentioned on the documentation<br>\n[https://www.tensorflow.org/versions/r0.10/how_tos/threading_and_queues/]</p>\n<pre><code>import time\nimport tensorflow as tf\nimport numpy as np\nimport string\n\ndef run_training():\n  # Tell TensorFlow that the model will be built into the default Graph.\n  with tf.Graph().as_default():\n    with tf.name_scope('input'):\n      alph_initializer = tf.placeholder(\n          dtype=tf.string,\n          shape=[26,1])\n      input_alph = tf.Variable(\n          alph_initializer, trainable=False, collections=[])\n\n      alph = tf.train.slice_input_producer(\n          [input_alph], shuffle=False, capacity=1,num_epochs=1)\n      alphs = tf.PaddingFIFOQueue(26,\n                              tf.string,\n                              [[1]])\n\n      alphs_qr = tf.train.QueueRunner(queue=alphs,enqueue_ops=[alphs.enqueue(alph)] )\n\n    my_list_val = np.array(list(string.ascii_lowercase)).reshape(26,1)\n\n\n    # Create the op for initializing variables.\n    init_op = tf.initialize_all_variables()\n\n    # Create a session for running Ops on the Graph.\n    sess = tf.Session()\n\n    # the Op to initialize the variables.\n    sess.run(init_op)\n\n    sess.run(tf.local_variables_initializer())\n    sess.run(tf.global_variables_initializer())\n    # Start input enqueue threads.\n\n    coord = tf.train.Coordinator()\n\n    sess.run(input_alph.initializer,\n             feed_dict={alph_initializer: my_list_val})\n    collection = []\n    #If I uncomment the below line then \n    #threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n    enqueue_threads = alphs_qr.create_threads(sess, coord=coord, start=True)\n    try:\n        while not coord.should_stop():\n            char =  sess.run(alphs.dequeue())\n            collection.append(char[0])\n            print(\"String val\", char)\n    except tf.errors.OutOfRangeError:\n        print('here')\n    finally:\n        coord.request_stop()\n    coord.join(enqueue_threads)\n\n    sess.close()\n\n\ndef main(_):\n  run_training()\n\n\nif __name__ == '__main__':\n    tf.app.run()\n</code></pre>", "body_text": "I find the queuerunner is hanging in the code below unless I uncomment the line\n#threads = tf.train.start_queue_runners(sess=sess, coord=coord)\nThis isn't mentioned on the documentation\n[https://www.tensorflow.org/versions/r0.10/how_tos/threading_and_queues/]\nimport time\nimport tensorflow as tf\nimport numpy as np\nimport string\n\ndef run_training():\n  # Tell TensorFlow that the model will be built into the default Graph.\n  with tf.Graph().as_default():\n    with tf.name_scope('input'):\n      alph_initializer = tf.placeholder(\n          dtype=tf.string,\n          shape=[26,1])\n      input_alph = tf.Variable(\n          alph_initializer, trainable=False, collections=[])\n\n      alph = tf.train.slice_input_producer(\n          [input_alph], shuffle=False, capacity=1,num_epochs=1)\n      alphs = tf.PaddingFIFOQueue(26,\n                              tf.string,\n                              [[1]])\n\n      alphs_qr = tf.train.QueueRunner(queue=alphs,enqueue_ops=[alphs.enqueue(alph)] )\n\n    my_list_val = np.array(list(string.ascii_lowercase)).reshape(26,1)\n\n\n    # Create the op for initializing variables.\n    init_op = tf.initialize_all_variables()\n\n    # Create a session for running Ops on the Graph.\n    sess = tf.Session()\n\n    # the Op to initialize the variables.\n    sess.run(init_op)\n\n    sess.run(tf.local_variables_initializer())\n    sess.run(tf.global_variables_initializer())\n    # Start input enqueue threads.\n\n    coord = tf.train.Coordinator()\n\n    sess.run(input_alph.initializer,\n             feed_dict={alph_initializer: my_list_val})\n    collection = []\n    #If I uncomment the below line then \n    #threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n    enqueue_threads = alphs_qr.create_threads(sess, coord=coord, start=True)\n    try:\n        while not coord.should_stop():\n            char =  sess.run(alphs.dequeue())\n            collection.append(char[0])\n            print(\"String val\", char)\n    except tf.errors.OutOfRangeError:\n        print('here')\n    finally:\n        coord.request_stop()\n    coord.join(enqueue_threads)\n\n    sess.close()\n\n\ndef main(_):\n  run_training()\n\n\nif __name__ == '__main__':\n    tf.app.run()", "body": "I find the queuerunner is hanging in the code below unless I uncomment the line \r\n\r\n`#threads = tf.train.start_queue_runners(sess=sess, coord=coord)`\r\n\r\nThis isn't mentioned on the documentation \r\n[https://www.tensorflow.org/versions/r0.10/how_tos/threading_and_queues/]\r\n\r\n```\r\nimport time\r\nimport tensorflow as tf\r\nimport numpy as np\r\nimport string\r\n\r\ndef run_training():\r\n  # Tell TensorFlow that the model will be built into the default Graph.\r\n  with tf.Graph().as_default():\r\n    with tf.name_scope('input'):\r\n      alph_initializer = tf.placeholder(\r\n          dtype=tf.string,\r\n          shape=[26,1])\r\n      input_alph = tf.Variable(\r\n          alph_initializer, trainable=False, collections=[])\r\n\r\n      alph = tf.train.slice_input_producer(\r\n          [input_alph], shuffle=False, capacity=1,num_epochs=1)\r\n      alphs = tf.PaddingFIFOQueue(26,\r\n                              tf.string,\r\n                              [[1]])\r\n\r\n      alphs_qr = tf.train.QueueRunner(queue=alphs,enqueue_ops=[alphs.enqueue(alph)] )\r\n\r\n    my_list_val = np.array(list(string.ascii_lowercase)).reshape(26,1)\r\n\r\n\r\n    # Create the op for initializing variables.\r\n    init_op = tf.initialize_all_variables()\r\n\r\n    # Create a session for running Ops on the Graph.\r\n    sess = tf.Session()\r\n\r\n    # the Op to initialize the variables.\r\n    sess.run(init_op)\r\n\r\n    sess.run(tf.local_variables_initializer())\r\n    sess.run(tf.global_variables_initializer())\r\n    # Start input enqueue threads.\r\n\r\n    coord = tf.train.Coordinator()\r\n\r\n    sess.run(input_alph.initializer,\r\n             feed_dict={alph_initializer: my_list_val})\r\n    collection = []\r\n    #If I uncomment the below line then \r\n    #threads = tf.train.start_queue_runners(sess=sess, coord=coord)\r\n    enqueue_threads = alphs_qr.create_threads(sess, coord=coord, start=True)\r\n    try:\r\n        while not coord.should_stop():\r\n            char =  sess.run(alphs.dequeue())\r\n            collection.append(char[0])\r\n            print(\"String val\", char)\r\n    except tf.errors.OutOfRangeError:\r\n        print('here')\r\n    finally:\r\n        coord.request_stop()\r\n    coord.join(enqueue_threads)\r\n\r\n    sess.close()\r\n\r\n\r\ndef main(_):\r\n  run_training()\r\n\r\n\r\nif __name__ == '__main__':\r\n    tf.app.run()\r\n```"}