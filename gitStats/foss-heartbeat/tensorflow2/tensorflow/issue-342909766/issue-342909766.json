{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20980", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20980/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20980/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20980/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20980", "id": 342909766, "node_id": "MDU6SXNzdWUzNDI5MDk3NjY=", "number": 20980, "title": "High loss of accuracy when using TFLite on Android", "user": {"login": "jbuisson1", "id": 5951281, "node_id": "MDQ6VXNlcjU5NTEyODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/5951281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbuisson1", "html_url": "https://github.com/jbuisson1", "followers_url": "https://api.github.com/users/jbuisson1/followers", "following_url": "https://api.github.com/users/jbuisson1/following{/other_user}", "gists_url": "https://api.github.com/users/jbuisson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbuisson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbuisson1/subscriptions", "organizations_url": "https://api.github.com/users/jbuisson1/orgs", "repos_url": "https://api.github.com/users/jbuisson1/repos", "events_url": "https://api.github.com/users/jbuisson1/events{/privacy}", "received_events_url": "https://api.github.com/users/jbuisson1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 750616506, "node_id": "MDU6TGFiZWw3NTA2MTY1MDY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:lite", "name": "comp:lite", "color": "0052cc", "default": false}, {"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "shashishekhar", "id": 1162712, "node_id": "MDQ6VXNlcjExNjI3MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1162712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shashishekhar", "html_url": "https://github.com/shashishekhar", "followers_url": "https://api.github.com/users/shashishekhar/followers", "following_url": "https://api.github.com/users/shashishekhar/following{/other_user}", "gists_url": "https://api.github.com/users/shashishekhar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shashishekhar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shashishekhar/subscriptions", "organizations_url": "https://api.github.com/users/shashishekhar/orgs", "repos_url": "https://api.github.com/users/shashishekhar/repos", "events_url": "https://api.github.com/users/shashishekhar/events{/privacy}", "received_events_url": "https://api.github.com/users/shashishekhar/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shashishekhar", "id": 1162712, "node_id": "MDQ6VXNlcjExNjI3MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1162712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shashishekhar", "html_url": "https://github.com/shashishekhar", "followers_url": "https://api.github.com/users/shashishekhar/followers", "following_url": "https://api.github.com/users/shashishekhar/following{/other_user}", "gists_url": "https://api.github.com/users/shashishekhar/gists{/gist_id}", "starred_url": "https://api.github.com/users/shashishekhar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shashishekhar/subscriptions", "organizations_url": "https://api.github.com/users/shashishekhar/orgs", "repos_url": "https://api.github.com/users/shashishekhar/repos", "events_url": "https://api.github.com/users/shashishekhar/events{/privacy}", "received_events_url": "https://api.github.com/users/shashishekhar/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-07-19T22:22:45Z", "updated_at": "2018-07-21T23:29:11Z", "closed_at": "2018-07-21T23:29:11Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Only on Android (modified the TFLiteClassifier.java class to output the results in a more convenient manner and commented the call to applyFilter() so the model doesn't base its detection on other images than the one I am giving to it)</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: OSX 10.13.3</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: Samsung Galaxy S6</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.8.0-0-g93bc2e2072 1.8.0</li>\n<li><strong>Python version</strong>: Python 3.6.0 :: Anaconda 4.3.1 (x86_64)</li>\n<li><strong>Bazel version (if compiling from source)</strong>: Build label: 0.14.1-homebrew</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: Apple LLVM version 9.1.0 (clang-902.0.39.2)</li>\n<li><strong>CUDA/cuDNN version</strong>: NA</li>\n<li><strong>GPU model and memory</strong>:  NVIDIA GeForce GT 650M 1 GB</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<pre><code>cd ../tensorflow-for-poets-2/\npython -m scripts.retrain --bottleneck_dir=bottlenecks --how_many_training_steps=$STEPS --model_dir=/Users/jean-baptistebuisson/new_training_dir/model/ --summaries_dir=/Users/jean-baptistebuisson/new_training_dir/training_summaries/mobilenet_1.0_224 --output_graph=/Users/jean-baptistebuisson/new_training_dir/$NAME.pb --output_labels=/Users/jean-baptistebuisson/new_training_dir/retrained_labels.txt --architecture=mobilenet_1.0_224 --image_dir=/Users/jean-baptistebuisson/tf_files/tw --tfhub_module https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/feature_vector/1\ncd ../new_training_dir/\ncd ../tensorflow/\nbazel-bin/tensorflow/contrib/lite/toco/toco --input_file=../new_training_dir/$NAME.pb --input_format=TENSORFLOW_GRAPHDEF --output_format=TFLITE --output_file=$NAME.tflite --inference_type=FLOAT --inference_input_type=FLOAT --input_arrays=input --output_array=final_result --input_shapes=1,224,224,3\ncd ../new_training_dir/\n</code></pre>\n<h3>Describe the problem</h3>\n<p>The above commands let me retrain a Mobilenet model with 2 categories (positive and negative) and outputs a .pb and a .tflite model that both work fine when tested with label_image with the same data (100 positive images and 100 negative):<br>\nFor the .pb model:<br>\n<code>True positive: 97; true negative: 98; false positive: 2; false negative: 3</code><br>\nFor the .tflite model:<br>\n<code>True positive: 100; true negative: 100; false positive: 0; false negative: 0</code></p>\n<p>Then I import the model on Android and run on the same images I get the following result:<br>\n<code>True Positive: 100; True Negative: 0; False Positive: 100; False Negative: 0</code></p>\n<p>I don't know what is messing with the detection but on Android everything is detected as positive.<br>\nHere are the .pb and .tflite models I am using:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/2211815/retrainedMNetV1_7_8000.pb.zip\">retrainedMNetV1_7_8000.pb.zip</a><br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/2211816/retrainedMNetV1_7_8000.tflite.zip\">retrainedMNetV1_7_8000.tflite.zip</a></p>\n<p>And here is my modified TFLiteClassifier.java class:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/2211823/TFLiteClassifier.java.zip\">TFLiteClassifier.java.zip</a></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Only on Android (modified the TFLiteClassifier.java class to output the results in a more convenient manner and commented the call to applyFilter() so the model doesn't base its detection on other images than the one I am giving to it)\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): OSX 10.13.3\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: Samsung Galaxy S6\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): v1.8.0-0-g93bc2e2072 1.8.0\nPython version: Python 3.6.0 :: Anaconda 4.3.1 (x86_64)\nBazel version (if compiling from source): Build label: 0.14.1-homebrew\nGCC/Compiler version (if compiling from source): Apple LLVM version 9.1.0 (clang-902.0.39.2)\nCUDA/cuDNN version: NA\nGPU model and memory:  NVIDIA GeForce GT 650M 1 GB\nExact command to reproduce:\n\ncd ../tensorflow-for-poets-2/\npython -m scripts.retrain --bottleneck_dir=bottlenecks --how_many_training_steps=$STEPS --model_dir=/Users/jean-baptistebuisson/new_training_dir/model/ --summaries_dir=/Users/jean-baptistebuisson/new_training_dir/training_summaries/mobilenet_1.0_224 --output_graph=/Users/jean-baptistebuisson/new_training_dir/$NAME.pb --output_labels=/Users/jean-baptistebuisson/new_training_dir/retrained_labels.txt --architecture=mobilenet_1.0_224 --image_dir=/Users/jean-baptistebuisson/tf_files/tw --tfhub_module https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/feature_vector/1\ncd ../new_training_dir/\ncd ../tensorflow/\nbazel-bin/tensorflow/contrib/lite/toco/toco --input_file=../new_training_dir/$NAME.pb --input_format=TENSORFLOW_GRAPHDEF --output_format=TFLITE --output_file=$NAME.tflite --inference_type=FLOAT --inference_input_type=FLOAT --input_arrays=input --output_array=final_result --input_shapes=1,224,224,3\ncd ../new_training_dir/\n\nDescribe the problem\nThe above commands let me retrain a Mobilenet model with 2 categories (positive and negative) and outputs a .pb and a .tflite model that both work fine when tested with label_image with the same data (100 positive images and 100 negative):\nFor the .pb model:\nTrue positive: 97; true negative: 98; false positive: 2; false negative: 3\nFor the .tflite model:\nTrue positive: 100; true negative: 100; false positive: 0; false negative: 0\nThen I import the model on Android and run on the same images I get the following result:\nTrue Positive: 100; True Negative: 0; False Positive: 100; False Negative: 0\nI don't know what is messing with the detection but on Android everything is detected as positive.\nHere are the .pb and .tflite models I am using:\nretrainedMNetV1_7_8000.pb.zip\nretrainedMNetV1_7_8000.tflite.zip\nAnd here is my modified TFLiteClassifier.java class:\nTFLiteClassifier.java.zip", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Only on Android (modified the TFLiteClassifier.java class to output the results in a more convenient manner and commented the call to applyFilter() so the model doesn't base its detection on other images than the one I am giving to it)\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: OSX 10.13.3\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: Samsung Galaxy S6\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: v1.8.0-0-g93bc2e2072 1.8.0\r\n- **Python version**: Python 3.6.0 :: Anaconda 4.3.1 (x86_64)\r\n- **Bazel version (if compiling from source)**: Build label: 0.14.1-homebrew\r\n- **GCC/Compiler version (if compiling from source)**: Apple LLVM version 9.1.0 (clang-902.0.39.2)\r\n- **CUDA/cuDNN version**: NA\r\n- **GPU model and memory**:  NVIDIA GeForce GT 650M 1 GB\r\n- **Exact command to reproduce**: \r\n```\r\ncd ../tensorflow-for-poets-2/\r\npython -m scripts.retrain --bottleneck_dir=bottlenecks --how_many_training_steps=$STEPS --model_dir=/Users/jean-baptistebuisson/new_training_dir/model/ --summaries_dir=/Users/jean-baptistebuisson/new_training_dir/training_summaries/mobilenet_1.0_224 --output_graph=/Users/jean-baptistebuisson/new_training_dir/$NAME.pb --output_labels=/Users/jean-baptistebuisson/new_training_dir/retrained_labels.txt --architecture=mobilenet_1.0_224 --image_dir=/Users/jean-baptistebuisson/tf_files/tw --tfhub_module https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/feature_vector/1\r\ncd ../new_training_dir/\r\ncd ../tensorflow/\r\nbazel-bin/tensorflow/contrib/lite/toco/toco --input_file=../new_training_dir/$NAME.pb --input_format=TENSORFLOW_GRAPHDEF --output_format=TFLITE --output_file=$NAME.tflite --inference_type=FLOAT --inference_input_type=FLOAT --input_arrays=input --output_array=final_result --input_shapes=1,224,224,3\r\ncd ../new_training_dir/\r\n```\r\n\r\n### Describe the problem\r\n\r\nThe above commands let me retrain a Mobilenet model with 2 categories (positive and negative) and outputs a .pb and a .tflite model that both work fine when tested with label_image with the same data (100 positive images and 100 negative):\r\nFor the .pb model:\r\n`True positive: 97; true negative: 98; false positive: 2; false negative: 3`\r\nFor the .tflite model:\r\n`True positive: 100; true negative: 100; false positive: 0; false negative: 0`\r\n\r\nThen I import the model on Android and run on the same images I get the following result:\r\n`True Positive: 100; True Negative: 0; False Positive: 100; False Negative: 0`\r\n\r\n\r\nI don't know what is messing with the detection but on Android everything is detected as positive.\r\nHere are the .pb and .tflite models I am using:\r\n[retrainedMNetV1_7_8000.pb.zip](https://github.com/tensorflow/tensorflow/files/2211815/retrainedMNetV1_7_8000.pb.zip)\r\n[retrainedMNetV1_7_8000.tflite.zip](https://github.com/tensorflow/tensorflow/files/2211816/retrainedMNetV1_7_8000.tflite.zip)\r\n\r\nAnd here is my modified TFLiteClassifier.java class:\r\n[TFLiteClassifier.java.zip](https://github.com/tensorflow/tensorflow/files/2211823/TFLiteClassifier.java.zip)\r\n\r\n"}