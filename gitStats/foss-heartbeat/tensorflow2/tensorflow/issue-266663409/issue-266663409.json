{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13822", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13822/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13822/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13822/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13822", "id": 266663409, "node_id": "MDU6SXNzdWUyNjY2NjM0MDk=", "number": 13822, "title": "Convolutional layers cannot be used multiple times", "user": {"login": "vishvananda", "id": 142222, "node_id": "MDQ6VXNlcjE0MjIyMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/142222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishvananda", "html_url": "https://github.com/vishvananda", "followers_url": "https://api.github.com/users/vishvananda/followers", "following_url": "https://api.github.com/users/vishvananda/following{/other_user}", "gists_url": "https://api.github.com/users/vishvananda/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishvananda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishvananda/subscriptions", "organizations_url": "https://api.github.com/users/vishvananda/orgs", "repos_url": "https://api.github.com/users/vishvananda/repos", "events_url": "https://api.github.com/users/vishvananda/events{/privacy}", "received_events_url": "https://api.github.com/users/vishvananda/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2017-10-18T22:31:43Z", "updated_at": "2018-04-13T06:39:29Z", "closed_at": "2017-11-01T16:54:25Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: no</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source (branch 1.4)</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4.0-dev</li>\n<li><strong>Python version</strong>: 3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 5.4.0</li>\n<li><strong>CUDA/cuDNN version</strong>: 8.0/6.0</li>\n<li><strong>GPU model and memory</strong>: nVidia 1080Ti 11G</li>\n<li><strong>Exact command to reproduce</strong>: run the script below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Keras convolutional layers cannot be used multiple times without creating a name conflict. This is especially bad when trying to copy layers from one model to another (See the second example below). This was working a few weeks ago. Here is a simple test case that used to work:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span>!/usr/bin/env python</span>\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">from</span> tensorflow.contrib.keras.api.keras.layers <span class=\"pl-k\">import</span> Conv2D\n<span class=\"pl-k\">from</span> tensorflow.contrib.keras.api.keras.layers <span class=\"pl-k\">import</span> Input\n\na <span class=\"pl-k\">=</span> Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">3</span>))\nc <span class=\"pl-k\">=</span> Conv2D(<span class=\"pl-c1\">32</span>, (<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>))\nc(a)\nc(a)</pre></div>\n<p>I added some print statement to different versions of the code. It looks like the convolutional ops are created with the following names in the old code:</p>\n<ol>\n<li>conv2d/convolution/</li>\n<li>conv2d/convolution_1/</li>\n</ol>\n<p>In the new code they are:</p>\n<ol>\n<li>conv2d/convolution/</li>\n<li>conv2d/convolution/</li>\n</ol>\n<p>It looks like the name scope code was changed recently. I specifically notice that some of the scope handling was moved to <strong>init</strong> where it used to happen when the function was called.</p>\n<p>This is a slightly more complex version of the code that shows that copying convolutional layers doesn't work:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span>!/usr/bin/env python</span>\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">from</span> tensorflow.contrib.keras.api.keras.layers <span class=\"pl-k\">import</span> Conv2D\n<span class=\"pl-k\">from</span> tensorflow.contrib.keras.api.keras.layers <span class=\"pl-k\">import</span> Input\n<span class=\"pl-k\">from</span> tensorflow.contrib.keras.api.keras.models <span class=\"pl-k\">import</span> Model\n\na <span class=\"pl-k\">=</span> Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">3</span>))\nb <span class=\"pl-k\">=</span> a\nb <span class=\"pl-k\">=</span> Conv2D(<span class=\"pl-c1\">32</span>, (<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>))(b)\nmod1 <span class=\"pl-k\">=</span> Model(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>a, <span class=\"pl-v\">outputs</span><span class=\"pl-k\">=</span>b)\na <span class=\"pl-k\">=</span> Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">3</span>))\nb <span class=\"pl-k\">=</span> a\n<span class=\"pl-k\">for</span> layer <span class=\"pl-k\">in</span> mod1.layers[<span class=\"pl-c1\">1</span>:]:\n    b <span class=\"pl-k\">=</span> layer(b)\nmod2 <span class=\"pl-k\">=</span> Model(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>a, <span class=\"pl-v\">outputs</span><span class=\"pl-k\">=</span>b)</pre></div>\n<p>This is an example of the traceback:</p>\n<pre><code>Traceback (most recent call last):\n  File \"/root/vish/test.py\", line 16, in &lt;module&gt;\n    b = layer(b)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line 252, in __call__\n    output = super(Layer, self).__call__(inputs, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/layers/base.py\", line 577, in __call__\n    outputs = self.call(inputs, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/layers/convolutional.py\", line 172, in call\n    outputs = self._convolution_op(inputs, self.kernel)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py\", line 841, in __call__\n    return self.conv_op(inp, filter)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py\", line 503, in __call__\n    return self.call(inp, filter)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py\", line 191, in __call__\n    name=self.name)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/ops/gen_nn_ops.py\", line 631, in conv2d\n    data_format=data_format, name=name)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\n    op_def=op_def)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 2959, in create_op\n    self._add_op(ret)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 2599, in _add_op\n    \"is already used\" % op.name)\nValueError: cannot add op with name conv2d/convolution as that name is already used\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): source (branch 1.4)\nTensorFlow version (use command below): 1.4.0-dev\nPython version: 3.5\nBazel version (if compiling from source): 5.4.0\nCUDA/cuDNN version: 8.0/6.0\nGPU model and memory: nVidia 1080Ti 11G\nExact command to reproduce: run the script below\n\nDescribe the problem\nKeras convolutional layers cannot be used multiple times without creating a name conflict. This is especially bad when trying to copy layers from one model to another (See the second example below). This was working a few weeks ago. Here is a simple test case that used to work:\n#!/usr/bin/env python\n\nimport tensorflow as tf\n\nfrom tensorflow.contrib.keras.api.keras.layers import Conv2D\nfrom tensorflow.contrib.keras.api.keras.layers import Input\n\na = Input(shape=(None, 32, 3))\nc = Conv2D(32, (3, 3))\nc(a)\nc(a)\nI added some print statement to different versions of the code. It looks like the convolutional ops are created with the following names in the old code:\n\nconv2d/convolution/\nconv2d/convolution_1/\n\nIn the new code they are:\n\nconv2d/convolution/\nconv2d/convolution/\n\nIt looks like the name scope code was changed recently. I specifically notice that some of the scope handling was moved to init where it used to happen when the function was called.\nThis is a slightly more complex version of the code that shows that copying convolutional layers doesn't work:\n#!/usr/bin/env python\n\nimport tensorflow as tf\n\nfrom tensorflow.contrib.keras.api.keras.layers import Conv2D\nfrom tensorflow.contrib.keras.api.keras.layers import Input\nfrom tensorflow.contrib.keras.api.keras.models import Model\n\na = Input(shape=(None, 32, 3))\nb = a\nb = Conv2D(32, (3, 3))(b)\nmod1 = Model(inputs=a, outputs=b)\na = Input(shape=(None, 32, 3))\nb = a\nfor layer in mod1.layers[1:]:\n    b = layer(b)\nmod2 = Model(inputs=a, outputs=b)\nThis is an example of the traceback:\nTraceback (most recent call last):\n  File \"/root/vish/test.py\", line 16, in <module>\n    b = layer(b)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line 252, in __call__\n    output = super(Layer, self).__call__(inputs, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/layers/base.py\", line 577, in __call__\n    outputs = self.call(inputs, *args, **kwargs)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/layers/convolutional.py\", line 172, in call\n    outputs = self._convolution_op(inputs, self.kernel)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py\", line 841, in __call__\n    return self.conv_op(inp, filter)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py\", line 503, in __call__\n    return self.call(inp, filter)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py\", line 191, in __call__\n    name=self.name)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/ops/gen_nn_ops.py\", line 631, in conv2d\n    data_format=data_format, name=name)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\n    op_def=op_def)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 2959, in create_op\n    self._add_op(ret)\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 2599, in _add_op\n    \"is already used\" % op.name)\nValueError: cannot add op with name conv2d/convolution as that name is already used", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: no\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: source (branch 1.4)\r\n- **TensorFlow version (use command below)**: 1.4.0-dev\r\n- **Python version**: 3.5\r\n- **Bazel version (if compiling from source)**: 5.4.0\r\n- **CUDA/cuDNN version**: 8.0/6.0\r\n- **GPU model and memory**: nVidia 1080Ti 11G\r\n- **Exact command to reproduce**: run the script below\r\n\r\n### Describe the problem\r\nKeras convolutional layers cannot be used multiple times without creating a name conflict. This is especially bad when trying to copy layers from one model to another (See the second example below). This was working a few weeks ago. Here is a simple test case that used to work:\r\n\r\n```python\r\n#!/usr/bin/env python\r\n\r\nimport tensorflow as tf\r\n\r\nfrom tensorflow.contrib.keras.api.keras.layers import Conv2D\r\nfrom tensorflow.contrib.keras.api.keras.layers import Input\r\n\r\na = Input(shape=(None, 32, 3))\r\nc = Conv2D(32, (3, 3))\r\nc(a)\r\nc(a)\r\n```\r\n\r\nI added some print statement to different versions of the code. It looks like the convolutional ops are created with the following names in the old code:\r\n\r\n1. conv2d/convolution/\r\n2. conv2d/convolution_1/\r\n\r\nIn the new code they are:\r\n\r\n1. conv2d/convolution/\r\n2. conv2d/convolution/\r\n\r\nIt looks like the name scope code was changed recently. I specifically notice that some of the scope handling was moved to __init__ where it used to happen when the function was called. \r\n\r\nThis is a slightly more complex version of the code that shows that copying convolutional layers doesn't work:\r\n\r\n```python\r\n#!/usr/bin/env python\r\n\r\nimport tensorflow as tf\r\n\r\nfrom tensorflow.contrib.keras.api.keras.layers import Conv2D\r\nfrom tensorflow.contrib.keras.api.keras.layers import Input\r\nfrom tensorflow.contrib.keras.api.keras.models import Model\r\n\r\na = Input(shape=(None, 32, 3))\r\nb = a\r\nb = Conv2D(32, (3, 3))(b)\r\nmod1 = Model(inputs=a, outputs=b)\r\na = Input(shape=(None, 32, 3))\r\nb = a\r\nfor layer in mod1.layers[1:]:\r\n    b = layer(b)\r\nmod2 = Model(inputs=a, outputs=b)\r\n```\r\nThis is an example of the traceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/root/vish/test.py\", line 16, in <module>\r\n    b = layer(b)\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line 252, in __call__\r\n    output = super(Layer, self).__call__(inputs, **kwargs)\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/layers/base.py\", line 577, in __call__\r\n    outputs = self.call(inputs, *args, **kwargs)\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/layers/convolutional.py\", line 172, in call\r\n    outputs = self._convolution_op(inputs, self.kernel)\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py\", line 841, in __call__\r\n    return self.conv_op(inp, filter)\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py\", line 503, in __call__\r\n    return self.call(inp, filter)\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/ops/nn_ops.py\", line 191, in __call__\r\n    name=self.name)\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/ops/gen_nn_ops.py\", line 631, in conv2d\r\n    data_format=data_format, name=name)\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\r\n    op_def=op_def)\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 2959, in create_op\r\n    self._add_op(ret)\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 2599, in _add_op\r\n    \"is already used\" % op.name)\r\nValueError: cannot add op with name conv2d/convolution as that name is already used\r\n```"}