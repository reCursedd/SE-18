{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/338122853", "html_url": "https://github.com/tensorflow/tensorflow/issues/13822#issuecomment-338122853", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13822", "id": 338122853, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODEyMjg1Mw==", "user": {"login": "antifriz", "id": 6382271, "node_id": "MDQ6VXNlcjYzODIyNzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/6382271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antifriz", "html_url": "https://github.com/antifriz", "followers_url": "https://api.github.com/users/antifriz/followers", "following_url": "https://api.github.com/users/antifriz/following{/other_user}", "gists_url": "https://api.github.com/users/antifriz/gists{/gist_id}", "starred_url": "https://api.github.com/users/antifriz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antifriz/subscriptions", "organizations_url": "https://api.github.com/users/antifriz/orgs", "repos_url": "https://api.github.com/users/antifriz/repos", "events_url": "https://api.github.com/users/antifriz/events{/privacy}", "received_events_url": "https://api.github.com/users/antifriz/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-20T07:00:32Z", "updated_at": "2017-10-20T07:00:32Z", "author_association": "NONE", "body_html": "<p>Also to note that when using keras-2.0.8 the same code creates convolutional ops with following names:</p>\n<ol>\n<li>conv2d_1/convolution</li>\n<li>conv2d_1_1/convolution</li>\n</ol>\n<p>Moreover, when nesting scopes, the differences became even more apparent. A slightly modified code that calls the other copy in some scope behaves much differently in keras vs. tf.keras (1.3.0).</p>\n<pre><code>a = Input(shape=(None, 32, 3))\nc = Conv2D(32, (3, 3))\nc(a)\n\nwith tf.name_scope('my_scope'):\n    c(a)\n</code></pre>\n<p>keras names:</p>\n<ol>\n<li>conv2d_1/convolution</li>\n<li>my_scope/conv2d_1/convolution</li>\n</ol>\n<p>tf.keras names:</p>\n<ol>\n<li>conv2d/convolution</li>\n<li>conv2d/convolution_1</li>\n</ol>\n<p>Although the functionality is the same, keras way of scoping does not interfere with the name scope concept and therefore it behaves as expected.</p>", "body_text": "Also to note that when using keras-2.0.8 the same code creates convolutional ops with following names:\n\nconv2d_1/convolution\nconv2d_1_1/convolution\n\nMoreover, when nesting scopes, the differences became even more apparent. A slightly modified code that calls the other copy in some scope behaves much differently in keras vs. tf.keras (1.3.0).\na = Input(shape=(None, 32, 3))\nc = Conv2D(32, (3, 3))\nc(a)\n\nwith tf.name_scope('my_scope'):\n    c(a)\n\nkeras names:\n\nconv2d_1/convolution\nmy_scope/conv2d_1/convolution\n\ntf.keras names:\n\nconv2d/convolution\nconv2d/convolution_1\n\nAlthough the functionality is the same, keras way of scoping does not interfere with the name scope concept and therefore it behaves as expected.", "body": "Also to note that when using keras-2.0.8 the same code creates convolutional ops with following names:\r\n\r\n1. conv2d_1/convolution\r\n2. conv2d_1_1/convolution\r\n\r\nMoreover, when nesting scopes, the differences became even more apparent. A slightly modified code that calls the other copy in some scope behaves much differently in keras vs. tf.keras (1.3.0).\r\n\r\n```\r\na = Input(shape=(None, 32, 3))\r\nc = Conv2D(32, (3, 3))\r\nc(a)\r\n\r\nwith tf.name_scope('my_scope'):\r\n    c(a)\r\n```\r\n\r\nkeras names:\r\n\r\n1. conv2d_1/convolution\r\n2. my_scope/conv2d_1/convolution\r\n\r\ntf.keras names:\r\n\r\n1. conv2d/convolution\r\n2. conv2d/convolution_1\r\n\r\nAlthough the functionality is the same, keras way of scoping does not interfere with the name scope concept and therefore it behaves as expected."}