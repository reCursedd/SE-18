{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/424922358", "html_url": "https://github.com/tensorflow/tensorflow/issues/22524#issuecomment-424922358", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22524", "id": 424922358, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDkyMjM1OA==", "user": {"login": "David-Mao", "id": 12476624, "node_id": "MDQ6VXNlcjEyNDc2NjI0", "avatar_url": "https://avatars3.githubusercontent.com/u/12476624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/David-Mao", "html_url": "https://github.com/David-Mao", "followers_url": "https://api.github.com/users/David-Mao/followers", "following_url": "https://api.github.com/users/David-Mao/following{/other_user}", "gists_url": "https://api.github.com/users/David-Mao/gists{/gist_id}", "starred_url": "https://api.github.com/users/David-Mao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/David-Mao/subscriptions", "organizations_url": "https://api.github.com/users/David-Mao/orgs", "repos_url": "https://api.github.com/users/David-Mao/repos", "events_url": "https://api.github.com/users/David-Mao/events{/privacy}", "received_events_url": "https://api.github.com/users/David-Mao/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-27T01:16:15Z", "updated_at": "2018-09-27T01:17:48Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=42781361\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/harshini-gadige\">@harshini-gadige</a></p>\n<blockquote>\n<p>Make sure the value given in tf.assign_add() has the same shape as the reference(in this case it is Z).<br>\nPlease change the scalar value 0.0 to the matrix of same dimension as Z. It should be something as shown below.</p>\n<p>import tensorflow as tf<br>\nimport tensorflow.contrib.eager as tfe<br>\ntf.enable_eager_execution()<br>\nZ = tfe.Variable([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])<br>\nY = tfe.Variable([[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]])<br>\nprint(Z.numpy())<br>\ntf.assign_add(Z, Y)<br>\nprint(Z.numpy())</p>\n</blockquote>\n<p>Obviously that would work. My points are:</p>\n<p>a) people would easily assume <code>Z.assign_add(0.0)</code> works. (because <code>Z = Z + 0.0</code> works. and it's not hard to implement this broadcasting anyway.)</p>\n<p>b) given a), even if the team decides to leave it not working, it should raise an error, not silently give unpredictable result, which apparently leads to bugs that are hard to find.</p>", "body_text": "@harshini-gadige\n\nMake sure the value given in tf.assign_add() has the same shape as the reference(in this case it is Z).\nPlease change the scalar value 0.0 to the matrix of same dimension as Z. It should be something as shown below.\nimport tensorflow as tf\nimport tensorflow.contrib.eager as tfe\ntf.enable_eager_execution()\nZ = tfe.Variable([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\nY = tfe.Variable([[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]])\nprint(Z.numpy())\ntf.assign_add(Z, Y)\nprint(Z.numpy())\n\nObviously that would work. My points are:\na) people would easily assume Z.assign_add(0.0) works. (because Z = Z + 0.0 works. and it's not hard to implement this broadcasting anyway.)\nb) given a), even if the team decides to leave it not working, it should raise an error, not silently give unpredictable result, which apparently leads to bugs that are hard to find.", "body": "@harshini-gadige\r\n> \r\n> Make sure the value given in tf.assign_add() has the same shape as the reference(in this case it is Z).\r\n> Please change the scalar value 0.0 to the matrix of same dimension as Z. It should be something as shown below.\r\n> \r\n> import tensorflow as tf\r\n> import tensorflow.contrib.eager as tfe\r\n> tf.enable_eager_execution()\r\n> Z = tfe.Variable([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\r\n> Y = tfe.Variable([[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]])\r\n> print(Z.numpy())\r\n> tf.assign_add(Z, Y)\r\n> print(Z.numpy())\r\n\r\nObviously that would work. My points are:\r\n\r\na) people would easily assume `Z.assign_add(0.0)` works. (because `Z = Z + 0.0` works. and it's not hard to implement this broadcasting anyway.)\r\n\r\nb) given a), even if the team decides to leave it not working, it should raise an error, not silently give unpredictable result, which apparently leads to bugs that are hard to find."}