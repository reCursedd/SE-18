{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/409249775", "html_url": "https://github.com/tensorflow/tensorflow/issues/21277#issuecomment-409249775", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21277", "id": 409249775, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTI0OTc3NQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-31T14:52:46Z", "updated_at": "2018-07-31T14:52:46Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for the report and for diving into the details... this definitely sounds like a bug, although my understanding is the same as yours: <code>tf_session.TF_DeleteSession(self._session)</code> should release the GIL because of this SWIG code block here:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/2826d123a017bc5f1a2cc7b969e275c5a63c326c/tensorflow/python/client/tf_session.i#L106-L111\">tensorflow/tensorflow/python/client/tf_session.i</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 106 to 111\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/2826d123a017bc5f1a2cc7b969e275c5a63c326c\">2826d12</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L106\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"106\"></td>\n          <td id=\"LC106\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> // Release the Python GIL for the duration of most methods. </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L107\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"107\"></td>\n          <td id=\"LC107\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> %exception { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L108\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"108\"></td>\n          <td id=\"LC108\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   Py_BEGIN_ALLOW_THREADS; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L109\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"109\"></td>\n          <td id=\"LC109\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   $action </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L110\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"110\"></td>\n          <td id=\"LC110\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   Py_END_ALLOW_THREADS; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L111\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"111\"></td>\n          <td id=\"LC111\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>In terms of a reproduction, would you be able to capture a dump of <em>all</em> thread stacks when the problem occurs?  One thing I've found useful in debugging this kind of problem is to set <code>config=tf.ConfigProto(inter_op_parallelism=1, intra_op_parallelism=1)</code> when creating the session. This makes the set of threads less unwieldy, and can sometimes tease out deadlock bugs that are less likely to happen with larger threadpools.</p>", "body_text": "Thanks for the report and for diving into the details... this definitely sounds like a bug, although my understanding is the same as yours: tf_session.TF_DeleteSession(self._session) should release the GIL because of this SWIG code block here:\n\n  \n    \n      tensorflow/tensorflow/python/client/tf_session.i\n    \n    \n        Lines 106 to 111\n      in\n      2826d12\n    \n    \n    \n    \n\n        \n          \n           // Release the Python GIL for the duration of most methods. \n        \n\n        \n          \n           %exception { \n        \n\n        \n          \n             Py_BEGIN_ALLOW_THREADS; \n        \n\n        \n          \n             $action \n        \n\n        \n          \n             Py_END_ALLOW_THREADS; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nIn terms of a reproduction, would you be able to capture a dump of all thread stacks when the problem occurs?  One thing I've found useful in debugging this kind of problem is to set config=tf.ConfigProto(inter_op_parallelism=1, intra_op_parallelism=1) when creating the session. This makes the set of threads less unwieldy, and can sometimes tease out deadlock bugs that are less likely to happen with larger threadpools.", "body": "Thanks for the report and for diving into the details... this definitely sounds like a bug, although my understanding is the same as yours: `tf_session.TF_DeleteSession(self._session)` should release the GIL because of this SWIG code block here:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/2826d123a017bc5f1a2cc7b969e275c5a63c326c/tensorflow/python/client/tf_session.i#L106-L111\r\n\r\nIn terms of a reproduction, would you be able to capture a dump of *all* thread stacks when the problem occurs?  One thing I've found useful in debugging this kind of problem is to set `config=tf.ConfigProto(inter_op_parallelism=1, intra_op_parallelism=1)` when creating the session. This makes the set of threads less unwieldy, and can sometimes tease out deadlock bugs that are less likely to happen with larger threadpools."}