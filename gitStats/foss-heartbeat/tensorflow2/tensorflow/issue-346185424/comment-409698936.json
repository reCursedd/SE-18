{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/409698936", "html_url": "https://github.com/tensorflow/tensorflow/issues/21277#issuecomment-409698936", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21277", "id": 409698936, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTY5ODkzNg==", "user": {"login": "nfergu", "id": 1291583, "node_id": "MDQ6VXNlcjEyOTE1ODM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1291583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nfergu", "html_url": "https://github.com/nfergu", "followers_url": "https://api.github.com/users/nfergu/followers", "following_url": "https://api.github.com/users/nfergu/following{/other_user}", "gists_url": "https://api.github.com/users/nfergu/gists{/gist_id}", "starred_url": "https://api.github.com/users/nfergu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nfergu/subscriptions", "organizations_url": "https://api.github.com/users/nfergu/orgs", "repos_url": "https://api.github.com/users/nfergu/repos", "events_url": "https://api.github.com/users/nfergu/events{/privacy}", "received_events_url": "https://api.github.com/users/nfergu/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-01T19:47:58Z", "updated_at": "2018-08-01T19:47:58Z", "author_association": "NONE", "body_html": "<p>Yes, the process is terminating when we see the hang. In fact we can see from the original thread dump that the destructor appears to be called as a consequence of a garbage collection which happens as part of shut-down:</p>\n<pre><code>frame #31: 0x000000010075f8d4 Python`_PyObject_FastCallDict + 180\n    frame #32: 0x00000001007d6579 Python`slot_tp_finalize + 121\n    frame #33: 0x000000010089b18a Python`collect + 1418\n    frame #34: 0x000000010089b8c3 Python`_PyGC_CollectIfEnabled + 99\n    frame #35: 0x000000010087af57 Python`Py_FinalizeEx + 119\n    frame #36: 0x000000010087b0e0 Python`Py_Exit + 16\n    frame #37: 0x000000010087ef4c Python`handle_system_exit + 252\n    frame #38: 0x000000010087f1a5 Python`PyErr_PrintEx + 437\n</code></pre>\n<p>The docs for <code>Py_FinalizeEx</code> say \"Undo all initializations made by Py_Initialize() and subsequent use of Python/C API functions\" so this could well be why <code>PyThreadState_New</code> subsequently fails.</p>\n<p>I think this is may be why my simplified test case does not reproduce the problem: it looks like the destructor is called as part of a \"regular\" GC in this test case.</p>", "body_text": "Yes, the process is terminating when we see the hang. In fact we can see from the original thread dump that the destructor appears to be called as a consequence of a garbage collection which happens as part of shut-down:\nframe #31: 0x000000010075f8d4 Python`_PyObject_FastCallDict + 180\n    frame #32: 0x00000001007d6579 Python`slot_tp_finalize + 121\n    frame #33: 0x000000010089b18a Python`collect + 1418\n    frame #34: 0x000000010089b8c3 Python`_PyGC_CollectIfEnabled + 99\n    frame #35: 0x000000010087af57 Python`Py_FinalizeEx + 119\n    frame #36: 0x000000010087b0e0 Python`Py_Exit + 16\n    frame #37: 0x000000010087ef4c Python`handle_system_exit + 252\n    frame #38: 0x000000010087f1a5 Python`PyErr_PrintEx + 437\n\nThe docs for Py_FinalizeEx say \"Undo all initializations made by Py_Initialize() and subsequent use of Python/C API functions\" so this could well be why PyThreadState_New subsequently fails.\nI think this is may be why my simplified test case does not reproduce the problem: it looks like the destructor is called as part of a \"regular\" GC in this test case.", "body": "Yes, the process is terminating when we see the hang. In fact we can see from the original thread dump that the destructor appears to be called as a consequence of a garbage collection which happens as part of shut-down:\r\n\r\n```\r\nframe #31: 0x000000010075f8d4 Python`_PyObject_FastCallDict + 180\r\n    frame #32: 0x00000001007d6579 Python`slot_tp_finalize + 121\r\n    frame #33: 0x000000010089b18a Python`collect + 1418\r\n    frame #34: 0x000000010089b8c3 Python`_PyGC_CollectIfEnabled + 99\r\n    frame #35: 0x000000010087af57 Python`Py_FinalizeEx + 119\r\n    frame #36: 0x000000010087b0e0 Python`Py_Exit + 16\r\n    frame #37: 0x000000010087ef4c Python`handle_system_exit + 252\r\n    frame #38: 0x000000010087f1a5 Python`PyErr_PrintEx + 437\r\n```\r\n\r\nThe docs for `Py_FinalizeEx` say \"Undo all initializations made by Py_Initialize() and subsequent use of Python/C API functions\" so this could well be why `PyThreadState_New` subsequently fails. \r\n\r\nI think this is may be why my simplified test case does not reproduce the problem: it looks like the destructor is called as part of a \"regular\" GC in this test case."}