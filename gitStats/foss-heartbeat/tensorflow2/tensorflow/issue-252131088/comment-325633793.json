{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/325633793", "html_url": "https://github.com/tensorflow/tensorflow/pull/12509#issuecomment-325633793", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12509", "id": 325633793, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTYzMzc5Mw==", "user": {"login": "byronyi", "id": 2613663, "node_id": "MDQ6VXNlcjI2MTM2NjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2613663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/byronyi", "html_url": "https://github.com/byronyi", "followers_url": "https://api.github.com/users/byronyi/followers", "following_url": "https://api.github.com/users/byronyi/following{/other_user}", "gists_url": "https://api.github.com/users/byronyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/byronyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/byronyi/subscriptions", "organizations_url": "https://api.github.com/users/byronyi/orgs", "repos_url": "https://api.github.com/users/byronyi/repos", "events_url": "https://api.github.com/users/byronyi/events{/privacy}", "received_events_url": "https://api.github.com/users/byronyi/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-29T11:21:02Z", "updated_at": "2017-08-29T11:21:02Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Sorry, I shall be fine with the changes here. As a side note, there could be three different cases here:</p>\n<ol>\n<li>There's a valid table entry (the happy path)</li>\n<li>There's no <em>valid</em> table entry, because the corresponding device attributes can't be found</li>\n<li>There's no table entry at all, as the RPC has not returned from the remote</li>\n</ol>\n<p>Correct me if I'm wrong, but now it seems the 2nd and 3rd cases could not be differentiated. Like you said, an early implementation could mark the 2nd case with an <em>invalid</em> table entry, and return false from GetDeviceLocalityNonBlocking (and thus we might need what will be removed in this PR). And for the current implementation, would there be any chances for the caller to keep refreshing the table for nonexistent device attributes, i.e. mistaken case 2 as case 3?</p>", "body_text": "Sorry, I shall be fine with the changes here. As a side note, there could be three different cases here:\n\nThere's a valid table entry (the happy path)\nThere's no valid table entry, because the corresponding device attributes can't be found\nThere's no table entry at all, as the RPC has not returned from the remote\n\nCorrect me if I'm wrong, but now it seems the 2nd and 3rd cases could not be differentiated. Like you said, an early implementation could mark the 2nd case with an invalid table entry, and return false from GetDeviceLocalityNonBlocking (and thus we might need what will be removed in this PR). And for the current implementation, would there be any chances for the caller to keep refreshing the table for nonexistent device attributes, i.e. mistaken case 2 as case 3?", "body": "Sorry, I shall be fine with the changes here. As a side note, there could be three different cases here:\r\n\r\n1. There's a valid table entry (the happy path)\r\n2. There's no _valid_ table entry, because the corresponding device attributes can't be found\r\n3. There's no table entry at all, as the RPC has not returned from the remote\r\n\r\nCorrect me if I'm wrong, but now it seems the 2nd and 3rd cases could not be differentiated. Like you said, an early implementation could mark the 2nd case with an _invalid_ table entry, and return false from GetDeviceLocalityNonBlocking (and thus we might need what will be removed in this PR). And for the current implementation, would there be any chances for the caller to keep refreshing the table for nonexistent device attributes, i.e. mistaken case 2 as case 3?"}