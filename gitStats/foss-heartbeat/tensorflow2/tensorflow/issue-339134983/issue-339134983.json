{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20613", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20613/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20613/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20613/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20613", "id": 339134983, "node_id": "MDU6SXNzdWUzMzkxMzQ5ODM=", "number": 20613, "title": "[bug] May be a bug of gradients calculation.", "user": {"login": "nianyou", "id": 40913376, "node_id": "MDQ6VXNlcjQwOTEzMzc2", "avatar_url": "https://avatars0.githubusercontent.com/u/40913376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nianyou", "html_url": "https://github.com/nianyou", "followers_url": "https://api.github.com/users/nianyou/followers", "following_url": "https://api.github.com/users/nianyou/following{/other_user}", "gists_url": "https://api.github.com/users/nianyou/gists{/gist_id}", "starred_url": "https://api.github.com/users/nianyou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nianyou/subscriptions", "organizations_url": "https://api.github.com/users/nianyou/orgs", "repos_url": "https://api.github.com/users/nianyou/repos", "events_url": "https://api.github.com/users/nianyou/events{/privacy}", "received_events_url": "https://api.github.com/users/nianyou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-07-07T10:18:56Z", "updated_at": "2018-09-28T21:04:21Z", "closed_at": "2018-09-28T21:04:21Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:NO</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:binary</li>\n<li><strong>TensorFlow version (use command below)</strong>:1.9</li>\n<li><strong>Python version</strong>: 2.7</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>I write a test case to test operation ops::Square and it's gradient function SquareGrad, here is the code:</p>\n<pre><code>TEST(MathTest, SingleComplex64Function) {\n //\n //data prepare\n Scope root = Scope::NewRootScope();\n DataType x_type = DataTypeToEnum&lt;complex64&gt;::v();\n TensorShape shape({1});\n\n Tensor x_data(x_type, shape);\n auto x_data_flat = x_data.flat&lt;complex64&gt;();\n x_data_flat(0) = {1,2};\n \n //\n //graph construct: y = x*x, x and y are complex64\n auto x = ops::Placeholder(root, x_type, Placeholder::Shape(shape));\n auto y = ops::Square(root, x);\n\n ClientSession session(root);\n std::vector&lt;Tensor&gt; outputs;\n\n //\n //calculate y\n Status s = session.Run({{x, x_data}} , {y}, &amp;outputs);\n ASSERT_TRUE(s.ok());\n ASSERT_TRUE(outputs.size() == 1);\n ASSERT_TRUE(outputs[0].dtype() == DT_COMPLEX64);\n ASSERT_TRUE(outputs[0].flat&lt;complex64&gt;()(0) == complex64(-3,4));\n\n std::vector&lt;Output&gt; grads;\n s = AddSymbolicGradients(root, {y}, {x}, &amp;grads);\n ASSERT_TRUE(s.ok());\n \n //\n //calculate gradients of y w.r.t x\n std::vector&lt;Tensor&gt; grad_outputs;\n s = session.Run({{x, x_data}}, grads, &amp;grad_outputs);\n ASSERT_TRUE(s.ok());\n ASSERT_TRUE(grad_outputs.size() == 1);\n ASSERT_TRUE(grad_outputs[0].dtype() == DT_COMPLEX64);\n ASSERT_TRUE(grad_outputs[0].flat&lt;complex64&gt;()(0) == complex64(2,4));\n}\n</code></pre>\n<p>when i run it, i get this error:</p>\n<pre><code>[ RUN      ] MathTest.SingleComplex64Function\ntensorflow/cc/gradients/math_grad_test.cc:84: Failure\nValue of: grad_outputs[0].flat&lt;complex64&gt;()(0) == complex64(2,4)\n  Actual: false\n  Expected: true\n[  FAILED  ] MathTest.SingleComplex64Function (39 ms)\n</code></pre>\n<p>I find the calculated value of grad_outputs[0] is (2, -4) , is this correct?</p>\n<p>According to my knowledge, i have defined a function R -&gt; R : y = x^2 (x and y are complex64),  the first derived function of it should be : dy/dx = 2x, and according to the definition of gradient: grad y(x) = [dy/dx], so if z=1+2i, y should be (1+2i)(1+2i)=1+4i+4i*i =1+4i-4=-3+4i,  and dy/dx = 2(1+2i)=2+4i, so theoretically grad y should be [(2,4)].</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):NO\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):Linux Ubuntu 16.04\nTensorFlow installed from (source or binary):binary\nTensorFlow version (use command below):1.9\nPython version: 2.7\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nI write a test case to test operation ops::Square and it's gradient function SquareGrad, here is the code:\nTEST(MathTest, SingleComplex64Function) {\n //\n //data prepare\n Scope root = Scope::NewRootScope();\n DataType x_type = DataTypeToEnum<complex64>::v();\n TensorShape shape({1});\n\n Tensor x_data(x_type, shape);\n auto x_data_flat = x_data.flat<complex64>();\n x_data_flat(0) = {1,2};\n \n //\n //graph construct: y = x*x, x and y are complex64\n auto x = ops::Placeholder(root, x_type, Placeholder::Shape(shape));\n auto y = ops::Square(root, x);\n\n ClientSession session(root);\n std::vector<Tensor> outputs;\n\n //\n //calculate y\n Status s = session.Run({{x, x_data}} , {y}, &outputs);\n ASSERT_TRUE(s.ok());\n ASSERT_TRUE(outputs.size() == 1);\n ASSERT_TRUE(outputs[0].dtype() == DT_COMPLEX64);\n ASSERT_TRUE(outputs[0].flat<complex64>()(0) == complex64(-3,4));\n\n std::vector<Output> grads;\n s = AddSymbolicGradients(root, {y}, {x}, &grads);\n ASSERT_TRUE(s.ok());\n \n //\n //calculate gradients of y w.r.t x\n std::vector<Tensor> grad_outputs;\n s = session.Run({{x, x_data}}, grads, &grad_outputs);\n ASSERT_TRUE(s.ok());\n ASSERT_TRUE(grad_outputs.size() == 1);\n ASSERT_TRUE(grad_outputs[0].dtype() == DT_COMPLEX64);\n ASSERT_TRUE(grad_outputs[0].flat<complex64>()(0) == complex64(2,4));\n}\n\nwhen i run it, i get this error:\n[ RUN      ] MathTest.SingleComplex64Function\ntensorflow/cc/gradients/math_grad_test.cc:84: Failure\nValue of: grad_outputs[0].flat<complex64>()(0) == complex64(2,4)\n  Actual: false\n  Expected: true\n[  FAILED  ] MathTest.SingleComplex64Function (39 ms)\n\nI find the calculated value of grad_outputs[0] is (2, -4) , is this correct?\nAccording to my knowledge, i have defined a function R -> R : y = x^2 (x and y are complex64),  the first derived function of it should be : dy/dx = 2x, and according to the definition of gradient: grad y(x) = [dy/dx], so if z=1+2i, y should be (1+2i)(1+2i)=1+4i+4i*i =1+4i-4=-3+4i,  and dy/dx = 2(1+2i)=2+4i, so theoretically grad y should be [(2,4)].", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:NO\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**:binary\r\n- **TensorFlow version (use command below)**:1.9\r\n- **Python version**: 2.7\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\nI write a test case to test operation ops::Square and it's gradient function SquareGrad, here is the code:\r\n\r\n    TEST(MathTest, SingleComplex64Function) {\r\n     //\r\n     //data prepare\r\n     Scope root = Scope::NewRootScope();\r\n     DataType x_type = DataTypeToEnum<complex64>::v();\r\n     TensorShape shape({1});\r\n\r\n     Tensor x_data(x_type, shape);\r\n     auto x_data_flat = x_data.flat<complex64>();\r\n     x_data_flat(0) = {1,2};\r\n     \r\n     //\r\n     //graph construct: y = x*x, x and y are complex64\r\n     auto x = ops::Placeholder(root, x_type, Placeholder::Shape(shape));\r\n     auto y = ops::Square(root, x);\r\n\r\n     ClientSession session(root);\r\n     std::vector<Tensor> outputs;\r\n\r\n     //\r\n     //calculate y\r\n     Status s = session.Run({{x, x_data}} , {y}, &outputs);\r\n     ASSERT_TRUE(s.ok());\r\n     ASSERT_TRUE(outputs.size() == 1);\r\n     ASSERT_TRUE(outputs[0].dtype() == DT_COMPLEX64);\r\n     ASSERT_TRUE(outputs[0].flat<complex64>()(0) == complex64(-3,4));\r\n\r\n     std::vector<Output> grads;\r\n     s = AddSymbolicGradients(root, {y}, {x}, &grads);\r\n     ASSERT_TRUE(s.ok());\r\n     \r\n     //\r\n     //calculate gradients of y w.r.t x\r\n     std::vector<Tensor> grad_outputs;\r\n     s = session.Run({{x, x_data}}, grads, &grad_outputs);\r\n     ASSERT_TRUE(s.ok());\r\n     ASSERT_TRUE(grad_outputs.size() == 1);\r\n     ASSERT_TRUE(grad_outputs[0].dtype() == DT_COMPLEX64);\r\n     ASSERT_TRUE(grad_outputs[0].flat<complex64>()(0) == complex64(2,4));\r\n    }\r\n\r\nwhen i run it, i get this error:\r\n\r\n    [ RUN      ] MathTest.SingleComplex64Function\r\n    tensorflow/cc/gradients/math_grad_test.cc:84: Failure\r\n    Value of: grad_outputs[0].flat<complex64>()(0) == complex64(2,4)\r\n      Actual: false\r\n      Expected: true\r\n    [  FAILED  ] MathTest.SingleComplex64Function (39 ms)\r\n\r\nI find the calculated value of grad_outputs[0] is (2, -4) , is this correct?\r\n\r\n\r\nAccording to my knowledge, i have defined a function R -> R : y = x^2 (x and y are complex64),  the first derived function of it should be : dy/dx = 2x, and according to the definition of gradient: grad y(x) = [dy/dx], so if z=1+2i, y should be (1+2i)(1+2i)=1+4i+4i*i =1+4i-4=-3+4i,  and dy/dx = 2(1+2i)=2+4i, so theoretically grad y should be [(2,4)].\r\n"}