{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/156183061", "pull_request_review_id": 82619660, "id": 156183061, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NjE4MzA2MQ==", "diff_hunk": "@@ -0,0 +1,86 @@\n+# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Tests for broadcast_to ops.\"\"\"\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import numpy as np\n+\n+from tensorflow.python.framework import constant_op\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import test_util\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.platform import test as test_lib\n+\n+\n+class BroadcastToTest(test_util.TensorFlowTestCase):\n+\n+  def testBroadcastToBasic(self):\n+    for dtype in [np.uint8, np.uint16, np.int8, np.int16, np.int32, np.int64]:\n+      with self.test_session():\n+        x = np.array([1, 2, 3], dtype=dtype)\n+        v_tf = array_ops.broadcast_to(constant_op.constant(x), [3, 3])\n+        v_np = np.broadcast_to(x, [3, 3])\n+        self.assertAllEqual(v_tf.eval(), v_np)\n+\n+  def testBroadcastToString(self):\n+    with self.test_session():\n+      x = np.array([\"1\", \"2\", \"3\"], dtype=np.str)\n+      v_tf = array_ops.broadcast_to(constant_op.constant(x), [3, 3])\n+      v_np = np.broadcast_to(x, [3, 3])\n+      self.assertAllEqual(v_tf.eval(), v_np)\n+\n+  def testBroadcastToBool(self):\n+    with self.test_session():\n+      x = np.array([True, False, True], dtype=np.bool)\n+      v_tf = array_ops.broadcast_to(constant_op.constant(x), [3, 3])\n+      v_np = np.broadcast_to(x, [3, 3])\n+      self.assertAllEqual(v_tf.eval(), v_np)\n+\n+  def testBroadcastToShape(self):\n+    for input_dim in range(1, 6):\n+      for output_dim in range(input_dim, 6):\n+        with self.test_session():\n+          input_shape = [2] * input_dim\n+          output_shape = [2] * output_dim\n+          x = np.array(np.random.randint(5, size=input_shape), dtype=np.int32)\n+          v_tf = array_ops.broadcast_to(constant_op.constant(x), output_shape)\n+          v_np = np.broadcast_to(x, output_shape)\n+          self.assertAllEqual(v_tf.eval(), v_np)\n+\n+  def testBroadcastToShapeTypeAndInference(self):\n+    for dtype in [dtypes.int32, dtypes.int64]:\n+      with self.test_session():\n+        x = np.array([1, 2, 3])\n+        v_tf = array_ops.broadcast_to(\n+            constant_op.constant(x),\n+            constant_op.constant([3, 3], dtype=dtype))\n+        shape = v_tf.get_shape().as_list()\n+        v_np = np.broadcast_to(x, [3, 3])\n+        self.assertAllEqual(v_tf.eval(), v_np)\n+        # check shape inference when shape input is constant\n+        self.assertAllEqual(shape, v_np.shape)\n+\n+  def testBroadcastToScalar(self):\n+    with self.test_session():\n+      x = np.array(1, dtype=np.int32)\n+      v_tf = array_ops.broadcast_to(constant_op.constant(x), [3, 3])\n+      v_np = np.broadcast_to(x, [3, 3])\n+      self.assertAllEqual(v_tf.eval(), v_np)\n+", "path": "tensorflow/python/kernel_tests/broadcast_to_ops_test.py", "position": 70, "original_position": 83, "commit_id": "9ec1539c35a0b94afdc89b2fb96a6cd856b962f8", "original_commit_id": "eb357a10acd255414067568e18ed5b52c5615e11", "user": {"login": "shoyer", "id": 1217238, "node_id": "MDQ6VXNlcjEyMTcyMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoyer", "html_url": "https://github.com/shoyer", "followers_url": "https://api.github.com/users/shoyer/followers", "following_url": "https://api.github.com/users/shoyer/following{/other_user}", "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions", "organizations_url": "https://api.github.com/users/shoyer/orgs", "repos_url": "https://api.github.com/users/shoyer/repos", "events_url": "https://api.github.com/users/shoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/shoyer/received_events", "type": "User", "site_admin": false}, "body": "Please take a look at NumPy's tests for `broadcast_to` as an example of what good coverage for shapes looks like:\r\nhttps://github.com/numpy/numpy/blob/4f4b0a43c2c5c1441a507a214045a50a1bfc03ed/numpy/lib/tests/test_stride_tricks.py#L222-L265", "created_at": "2017-12-11T19:59:53Z", "updated_at": "2018-04-12T01:49:10Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/15243#discussion_r156183061", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15243", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/156183061"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/15243#discussion_r156183061"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15243"}}, "body_html": "<p>Please take a look at NumPy's tests for <code>broadcast_to</code> as an example of what good coverage for shapes looks like:<br>\n<a href=\"https://github.com/numpy/numpy/blob/4f4b0a43c2c5c1441a507a214045a50a1bfc03ed/numpy/lib/tests/test_stride_tricks.py#L222-L265\">https://github.com/numpy/numpy/blob/4f4b0a43c2c5c1441a507a214045a50a1bfc03ed/numpy/lib/tests/test_stride_tricks.py#L222-L265</a></p>", "body_text": "Please take a look at NumPy's tests for broadcast_to as an example of what good coverage for shapes looks like:\nhttps://github.com/numpy/numpy/blob/4f4b0a43c2c5c1441a507a214045a50a1bfc03ed/numpy/lib/tests/test_stride_tricks.py#L222-L265"}