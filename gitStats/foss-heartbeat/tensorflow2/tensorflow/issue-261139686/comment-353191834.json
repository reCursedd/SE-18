{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/353191834", "html_url": "https://github.com/tensorflow/tensorflow/issues/13351#issuecomment-353191834", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13351", "id": 353191834, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzE5MTgzNA==", "user": {"login": "josh11b", "id": 15258583, "node_id": "MDQ6VXNlcjE1MjU4NTgz", "avatar_url": "https://avatars0.githubusercontent.com/u/15258583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josh11b", "html_url": "https://github.com/josh11b", "followers_url": "https://api.github.com/users/josh11b/followers", "following_url": "https://api.github.com/users/josh11b/following{/other_user}", "gists_url": "https://api.github.com/users/josh11b/gists{/gist_id}", "starred_url": "https://api.github.com/users/josh11b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josh11b/subscriptions", "organizations_url": "https://api.github.com/users/josh11b/orgs", "repos_url": "https://api.github.com/users/josh11b/repos", "events_url": "https://api.github.com/users/josh11b/events{/privacy}", "received_events_url": "https://api.github.com/users/josh11b/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-20T21:47:31Z", "updated_at": "2017-12-20T21:47:31Z", "author_association": "MEMBER", "body_html": "<p>I agree with your analysis that <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/07adc2ea910de715d31e16a019fcbcccb575e931/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/07adc2ea910de715d31e16a019fcbcccb575e931\"><tt>07adc2e</tt></a> is the culprit and that introduced likely multiple bugs.  The description of that commit \"when a variable w is initialized with the value of another variable v, make sure that the initializer of v is run first.\" would have been fine, but the actual code change instead redirects references to v in w's initializer to v's initial value graph. This has at least a couple of problems:</p>\n<ul>\n<li>there are some bugs in the code, e.g. if there is a while loop it can follow the cycle in the graph forever</li>\n<li>if v was already initialized and has since been updated, w should get the new value not the original value</li>\n</ul>\n<p>Ideally, we would rewrite the logic to be less buggy:</p>\n<ul>\n<li>scan w's initializer init_w for references to variables, being careful to avoid visiting nodes in a graph cycle more than once</li>\n<li>replace w's initialize_op with: if v has not been initialized, run v's initialization op; once that is done run \"w = w's initialization expression\" without changes (in particular, without the rewrite to use v's initial value)</li>\n</ul>", "body_text": "I agree with your analysis that 07adc2e is the culprit and that introduced likely multiple bugs.  The description of that commit \"when a variable w is initialized with the value of another variable v, make sure that the initializer of v is run first.\" would have been fine, but the actual code change instead redirects references to v in w's initializer to v's initial value graph. This has at least a couple of problems:\n\nthere are some bugs in the code, e.g. if there is a while loop it can follow the cycle in the graph forever\nif v was already initialized and has since been updated, w should get the new value not the original value\n\nIdeally, we would rewrite the logic to be less buggy:\n\nscan w's initializer init_w for references to variables, being careful to avoid visiting nodes in a graph cycle more than once\nreplace w's initialize_op with: if v has not been initialized, run v's initialization op; once that is done run \"w = w's initialization expression\" without changes (in particular, without the rewrite to use v's initial value)", "body": "I agree with your analysis that https://github.com/tensorflow/tensorflow/commit/07adc2ea910de715d31e16a019fcbcccb575e931 is the culprit and that introduced likely multiple bugs.  The description of that commit \"when a variable w is initialized with the value of another variable v, make sure that the initializer of v is run first.\" would have been fine, but the actual code change instead redirects references to v in w's initializer to v's initial value graph. This has at least a couple of problems:\r\n* there are some bugs in the code, e.g. if there is a while loop it can follow the cycle in the graph forever\r\n* if v was already initialized and has since been updated, w should get the new value not the original value\r\n\r\nIdeally, we would rewrite the logic to be less buggy:\r\n* scan w's initializer init_w for references to variables, being careful to avoid visiting nodes in a graph cycle more than once\r\n* replace w's initialize_op with: if v has not been initialized, run v's initialization op; once that is done run \"w = w's initialization expression\" without changes (in particular, without the rewrite to use v's initial value)\r\n"}