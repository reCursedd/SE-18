{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/136205140", "pull_request_review_id": 59711897, "id": 136205140, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjIwNTE0MA==", "diff_hunk": "@@ -258,8 +258,11 @@ def _streaming_confusion_matrix(labels, predictions, num_classes, weights=None):\n     total_cm: A `Tensor` representing the confusion matrix.\n     update_op: An operation that increments the confusion matrix.\n   \"\"\"\n+  # TODO: This should be int64 when weights is None, but legacy bug-\n+  # compatibility requires keeping this as float64 in that case.\n+  cm_dtype = dtypes.float64", "path": "tensorflow/python/ops/metrics_impl.py", "position": null, "original_position": 6, "commit_id": "e2a98faff959c79ebab7097ab189495e393949f9", "original_commit_id": "4b521d0992fbdd7d9f18a708111e2501689f7994", "user": {"login": "taion", "id": 3112159, "node_id": "MDQ6VXNlcjMxMTIxNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3112159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taion", "html_url": "https://github.com/taion", "followers_url": "https://api.github.com/users/taion/followers", "following_url": "https://api.github.com/users/taion/following{/other_user}", "gists_url": "https://api.github.com/users/taion/gists{/gist_id}", "starred_url": "https://api.github.com/users/taion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taion/subscriptions", "organizations_url": "https://api.github.com/users/taion/orgs", "repos_url": "https://api.github.com/users/taion/repos", "events_url": "https://api.github.com/users/taion/events{/privacy}", "received_events_url": "https://api.github.com/users/taion/received_events", "type": "User", "site_admin": false}, "body": "The more straightforward fix would be to just invert the branches.\r\n\r\nHowever, if anybody is importing this function from here, and is e.g. dividing this by whatever in Python 2 without doing a float cast, this would then change the numerical results that they see.\r\n\r\nGiven that this bug has been around for a while, I think it'd perhaps be justifiable to keep the old behavior for cases where weights aren't specified.\r\n\r\nI personally wouldn't be affected by a correct fix of just inverting the branches, though, and would be happy to amend this PR if such a fix would be better.", "created_at": "2017-08-30T22:22:42Z", "updated_at": "2017-09-07T18:03:10Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12714#discussion_r136205140", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12714", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/136205140"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12714#discussion_r136205140"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12714"}}, "body_html": "<p>The more straightforward fix would be to just invert the branches.</p>\n<p>However, if anybody is importing this function from here, and is e.g. dividing this by whatever in Python 2 without doing a float cast, this would then change the numerical results that they see.</p>\n<p>Given that this bug has been around for a while, I think it'd perhaps be justifiable to keep the old behavior for cases where weights aren't specified.</p>\n<p>I personally wouldn't be affected by a correct fix of just inverting the branches, though, and would be happy to amend this PR if such a fix would be better.</p>", "body_text": "The more straightforward fix would be to just invert the branches.\nHowever, if anybody is importing this function from here, and is e.g. dividing this by whatever in Python 2 without doing a float cast, this would then change the numerical results that they see.\nGiven that this bug has been around for a while, I think it'd perhaps be justifiable to keep the old behavior for cases where weights aren't specified.\nI personally wouldn't be affected by a correct fix of just inverting the branches, though, and would be happy to amend this PR if such a fix would be better."}