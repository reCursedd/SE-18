{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/239686907", "html_url": "https://github.com/tensorflow/tensorflow/issues/3760#issuecomment-239686907", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3760", "id": 239686907, "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTY4NjkwNw==", "user": {"login": "falcondai", "id": 997426, "node_id": "MDQ6VXNlcjk5NzQyNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/997426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/falcondai", "html_url": "https://github.com/falcondai", "followers_url": "https://api.github.com/users/falcondai/followers", "following_url": "https://api.github.com/users/falcondai/following{/other_user}", "gists_url": "https://api.github.com/users/falcondai/gists{/gist_id}", "starred_url": "https://api.github.com/users/falcondai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/falcondai/subscriptions", "organizations_url": "https://api.github.com/users/falcondai/orgs", "repos_url": "https://api.github.com/users/falcondai/repos", "events_url": "https://api.github.com/users/falcondai/events{/privacy}", "received_events_url": "https://api.github.com/users/falcondai/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-14T17:54:11Z", "updated_at": "2016-08-14T21:32:23Z", "author_association": "CONTRIBUTOR", "body_html": "<p>@sungjin712 look at the CI build folder here: <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/ci_build\">https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/ci_build</a><br>\n(i do not recommend trying the build without docker which defeats the whole purpose)</p>\n<p>The main idea is that we run a standard CI (Continuous Integration) build in a docker image (clean, standard environment) and then copy out the pip wheel file:</p>\n<ul>\n<li>install docker and nvidia-docker. have the docker daemon running</li>\n<li>make sure you have checkout the intended tensorflow version in your cloned git repo, e.g. <code>git checkout v0.10.0rc0</code>.</li>\n<li>go to the ci_build folder and copy this file from my gist: <a href=\"https://gist.github.com/falcondai/7e159cc3cfa1529996f567ca284b00a7#file-docker_build-sh\">https://gist.github.com/falcondai/7e159cc3cfa1529996f567ca284b00a7#file-docker_build-sh</a> (the original build script removes the container after each build)</li>\n<li>make sure <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/ci_build/Dockerfile.gpu#L1\">the first line in Dockerifle.gpu</a> is the cuda + cudnn version you want: for cuda 8 and cudnn 5, it should be <code>FROM nvidia/cuda:8.0-cudnn5-devel</code>. (Note that this image uses ubuntu 14.04 as base, but i think the wheel file will likely work for ubuntu 16.04. if you really want to <em>build</em> in ubuntu 16.04, you need to look into first building your own cuda image, which should be a matter of changing a line in the cuda image Dockerfile and then building, since all public nvidia/cuda images are built on 14.04: <a href=\"https://hub.docker.com/r/nvidia/cuda/\" rel=\"nofollow\">https://hub.docker.com/r/nvidia/cuda/</a>)</li>\n<li><code>$ ./docker_build.sh gpu bash</code>.</li>\n<li>now you should be inside a container at <code>/workspace</code>, execute <code>$ ./tensorflow/tools/ci_build/builds/pip.sh gpu</code> (this will take a while). <strong>DO NOT close this session!</strong></li>\n<li>open another session and look up the container id of your <code>tf_ci.gpu</code> by <code>docker ps</code></li>\n<li>copy the built wheel file from that container, e.g. <code>$ docker cp &lt;container_id&gt;:/workspace/pip_test/whl/tensorflow-0.10.0rc0-cp27-none-linux_x86_64.whl .</code></li>\n<li>pip install this wheel file <code>$ pip install -U &lt;host-path&gt;</code></li>\n</ul>", "body_text": "@sungjin712 look at the CI build folder here: https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/ci_build\n(i do not recommend trying the build without docker which defeats the whole purpose)\nThe main idea is that we run a standard CI (Continuous Integration) build in a docker image (clean, standard environment) and then copy out the pip wheel file:\n\ninstall docker and nvidia-docker. have the docker daemon running\nmake sure you have checkout the intended tensorflow version in your cloned git repo, e.g. git checkout v0.10.0rc0.\ngo to the ci_build folder and copy this file from my gist: https://gist.github.com/falcondai/7e159cc3cfa1529996f567ca284b00a7#file-docker_build-sh (the original build script removes the container after each build)\nmake sure the first line in Dockerifle.gpu is the cuda + cudnn version you want: for cuda 8 and cudnn 5, it should be FROM nvidia/cuda:8.0-cudnn5-devel. (Note that this image uses ubuntu 14.04 as base, but i think the wheel file will likely work for ubuntu 16.04. if you really want to build in ubuntu 16.04, you need to look into first building your own cuda image, which should be a matter of changing a line in the cuda image Dockerfile and then building, since all public nvidia/cuda images are built on 14.04: https://hub.docker.com/r/nvidia/cuda/)\n$ ./docker_build.sh gpu bash.\nnow you should be inside a container at /workspace, execute $ ./tensorflow/tools/ci_build/builds/pip.sh gpu (this will take a while). DO NOT close this session!\nopen another session and look up the container id of your tf_ci.gpu by docker ps\ncopy the built wheel file from that container, e.g. $ docker cp <container_id>:/workspace/pip_test/whl/tensorflow-0.10.0rc0-cp27-none-linux_x86_64.whl .\npip install this wheel file $ pip install -U <host-path>", "body": "@sungjin712 look at the CI build folder here: https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/ci_build\n(i do not recommend trying the build without docker which defeats the whole purpose)\n\nThe main idea is that we run a standard CI (Continuous Integration) build in a docker image (clean, standard environment) and then copy out the pip wheel file:\n- install docker and nvidia-docker. have the docker daemon running\n- make sure you have checkout the intended tensorflow version in your cloned git repo, e.g. `git checkout v0.10.0rc0`.\n- go to the ci_build folder and copy this file from my gist: https://gist.github.com/falcondai/7e159cc3cfa1529996f567ca284b00a7#file-docker_build-sh (the original build script removes the container after each build)\n- make sure [the first line in Dockerifle.gpu](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/ci_build/Dockerfile.gpu#L1) is the cuda + cudnn version you want: for cuda 8 and cudnn 5, it should be `FROM nvidia/cuda:8.0-cudnn5-devel`. (Note that this image uses ubuntu 14.04 as base, but i think the wheel file will likely work for ubuntu 16.04. if you really want to _build_ in ubuntu 16.04, you need to look into first building your own cuda image, which should be a matter of changing a line in the cuda image Dockerfile and then building, since all public nvidia/cuda images are built on 14.04: https://hub.docker.com/r/nvidia/cuda/)\n- `$ ./docker_build.sh gpu bash`. \n- now you should be inside a container at `/workspace`, execute `$ ./tensorflow/tools/ci_build/builds/pip.sh gpu` (this will take a while). **DO NOT close this session!**\n- open another session and look up the container id of your `tf_ci.gpu` by `docker ps`\n- copy the built wheel file from that container, e.g. `$ docker cp <container_id>:/workspace/pip_test/whl/tensorflow-0.10.0rc0-cp27-none-linux_x86_64.whl .`\n- pip install this wheel file `$ pip install -U <host-path>`\n"}