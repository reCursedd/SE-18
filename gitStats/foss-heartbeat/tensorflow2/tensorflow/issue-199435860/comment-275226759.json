{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/275226759", "html_url": "https://github.com/tensorflow/tensorflow/issues/6729#issuecomment-275226759", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6729", "id": 275226759, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTIyNjc1OQ==", "user": {"login": "damienmg", "id": 3721087, "node_id": "MDQ6VXNlcjM3MjEwODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3721087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/damienmg", "html_url": "https://github.com/damienmg", "followers_url": "https://api.github.com/users/damienmg/followers", "following_url": "https://api.github.com/users/damienmg/following{/other_user}", "gists_url": "https://api.github.com/users/damienmg/gists{/gist_id}", "starred_url": "https://api.github.com/users/damienmg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/damienmg/subscriptions", "organizations_url": "https://api.github.com/users/damienmg/orgs", "repos_url": "https://api.github.com/users/damienmg/repos", "events_url": "https://api.github.com/users/damienmg/events{/privacy}", "received_events_url": "https://api.github.com/users/damienmg/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-25T20:41:28Z", "updated_at": "2017-01-25T20:41:28Z", "author_association": "MEMBER", "body_html": "<p>/cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9567293\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/aehlig\">@aehlig</a>: Is it normal that action_env is not passed to test?</p>\n<p>--action_env tell which environment variable to pass to compile action<br>\n--test_env tell which environment variable to set to test action</p>\n<p>Default value for action_env is LD_LIBRARY_PATH and PATH, we do not put DYLD_LIBRARY_PATH by default. So if explicitely set from the command line you want to add PATH and LD_LIBRARY_PATH too.</p>\n<p>From the help of Bazel exactly:</p>\n<pre><code>  --action_env (a 'name=value' assignment with an optional value part; may be used multiple times)\n    Specifies the set of environment variables available available to actions. \n    Variables can be either specified by name, in which case the value will be \n    taken from the invocation environment, or by the name=value pair which sets \n    the value independent of the invocation environment. This option can be \n    used multiple times; for options given for the same variable, the latest \n    wins, options for different variables accumulate.\n  --test_env (a 'name=value' assignment with an optional value part; may be used multiple times)\n    Specifies additional environment variables to be injected into the test \n    runner environment. Variables can be either specified by name, in which \n    case its value will be read from the Bazel client environment, or by the \n    name=value pair. This option can be used multiple times to specify several \n    variables. Used only by the 'bazel test' command.\n</code></pre>", "body_text": "/cc @aehlig: Is it normal that action_env is not passed to test?\n--action_env tell which environment variable to pass to compile action\n--test_env tell which environment variable to set to test action\nDefault value for action_env is LD_LIBRARY_PATH and PATH, we do not put DYLD_LIBRARY_PATH by default. So if explicitely set from the command line you want to add PATH and LD_LIBRARY_PATH too.\nFrom the help of Bazel exactly:\n  --action_env (a 'name=value' assignment with an optional value part; may be used multiple times)\n    Specifies the set of environment variables available available to actions. \n    Variables can be either specified by name, in which case the value will be \n    taken from the invocation environment, or by the name=value pair which sets \n    the value independent of the invocation environment. This option can be \n    used multiple times; for options given for the same variable, the latest \n    wins, options for different variables accumulate.\n  --test_env (a 'name=value' assignment with an optional value part; may be used multiple times)\n    Specifies additional environment variables to be injected into the test \n    runner environment. Variables can be either specified by name, in which \n    case its value will be read from the Bazel client environment, or by the \n    name=value pair. This option can be used multiple times to specify several \n    variables. Used only by the 'bazel test' command.", "body": "/cc @aehlig: Is it normal that action_env is not passed to test?\r\n\r\n--action_env tell which environment variable to pass to compile action\r\n--test_env tell which environment variable to set to test action\r\n\r\nDefault value for action_env is LD_LIBRARY_PATH and PATH, we do not put DYLD_LIBRARY_PATH by default. So if explicitely set from the command line you want to add PATH and LD_LIBRARY_PATH too.\r\n\r\nFrom the help of Bazel exactly:\r\n```\r\n  --action_env (a 'name=value' assignment with an optional value part; may be used multiple times)\r\n    Specifies the set of environment variables available available to actions. \r\n    Variables can be either specified by name, in which case the value will be \r\n    taken from the invocation environment, or by the name=value pair which sets \r\n    the value independent of the invocation environment. This option can be \r\n    used multiple times; for options given for the same variable, the latest \r\n    wins, options for different variables accumulate.\r\n  --test_env (a 'name=value' assignment with an optional value part; may be used multiple times)\r\n    Specifies additional environment variables to be injected into the test \r\n    runner environment. Variables can be either specified by name, in which \r\n    case its value will be read from the Bazel client environment, or by the \r\n    name=value pair. This option can be used multiple times to specify several \r\n    variables. Used only by the 'bazel test' command.\r\n```\r\n"}