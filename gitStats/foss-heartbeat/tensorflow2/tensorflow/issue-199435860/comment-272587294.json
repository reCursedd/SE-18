{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/272587294", "html_url": "https://github.com/tensorflow/tensorflow/issues/6729#issuecomment-272587294", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6729", "id": 272587294, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjU4NzI5NA==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-14T00:57:51Z", "updated_at": "2017-01-14T00:57:51Z", "author_association": "MEMBER", "body_html": "<p>Where is TensorFlow loading libraries by relative path? I know with op libraries get_path_to_datafile() turns relative .so paths into absolute paths before passing them along to dlopen. I'm not sure where cuda is being loaded, but I'd like to know more. If TensorFlow is being insecure, it should be fixed.</p>\n<p>Re: Cuda dep, that program is <a href=\"https://github.com/tensorflow/tensorflow/blob/1f5d61d0b4a2ae08319650ae78c5609c515615db/tensorflow/tensorflow.bzl#L219\">passed</a> to genrule via tools so Bazel is guaranteed to build it with host configuration, which seems to be a result of the internal issue you mentioned. So my best guess is Cuda is being superfluously linked because the tool depends on core:lib_internal and core:lib_internal depends on everything. Hopefully someday we can get rid of all of these hourglasses in the build graph. They make builds so slow.</p>", "body_text": "Where is TensorFlow loading libraries by relative path? I know with op libraries get_path_to_datafile() turns relative .so paths into absolute paths before passing them along to dlopen. I'm not sure where cuda is being loaded, but I'd like to know more. If TensorFlow is being insecure, it should be fixed.\nRe: Cuda dep, that program is passed to genrule via tools so Bazel is guaranteed to build it with host configuration, which seems to be a result of the internal issue you mentioned. So my best guess is Cuda is being superfluously linked because the tool depends on core:lib_internal and core:lib_internal depends on everything. Hopefully someday we can get rid of all of these hourglasses in the build graph. They make builds so slow.", "body": "Where is TensorFlow loading libraries by relative path? I know with op libraries get_path_to_datafile() turns relative .so paths into absolute paths before passing them along to dlopen. I'm not sure where cuda is being loaded, but I'd like to know more. If TensorFlow is being insecure, it should be fixed.\r\n\r\nRe: Cuda dep, that program is [passed](https://github.com/tensorflow/tensorflow/blob/1f5d61d0b4a2ae08319650ae78c5609c515615db/tensorflow/tensorflow.bzl#L219) to genrule via tools so Bazel is guaranteed to build it with host configuration, which seems to be a result of the internal issue you mentioned. So my best guess is Cuda is being superfluously linked because the tool depends on core:lib_internal and core:lib_internal depends on everything. Hopefully someday we can get rid of all of these hourglasses in the build graph. They make builds so slow."}