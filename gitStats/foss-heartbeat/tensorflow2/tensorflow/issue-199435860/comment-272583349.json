{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/272583349", "html_url": "https://github.com/tensorflow/tensorflow/issues/6729#issuecomment-272583349", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6729", "id": 272583349, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjU4MzM0OQ==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-14T00:23:14Z", "updated_at": "2017-01-14T00:25:09Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=49262\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jart\">@jart</a> The way TensorFlow loads dynamic libraries is not secure (loading by relative path means someone could trick TF to load malicious code from an all-writeable location). So MacOS disables it <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"112425891\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/BVLC/caffe/issues/3227\" data-hovercard-type=\"issue\" data-hovercard-url=\"/BVLC/caffe/issues/3227/hovercard\" href=\"https://github.com/BVLC/caffe/issues/3227\">BVLC/caffe#3227</a></p>\n<p>As far to why <code>gen_decode_audio_op_py_py_wrappers_cc</code> needs CUDA, a possibility is that is it built in in the wrong mode. Bazel builds in <a href=\"https://bazel.build/versions/master/docs/be/general.html#cross-compilation-considerations\" rel=\"nofollow\">two configurations</a> \"host\" configuration and \"target\" configuration. The tool is a <code>cc_binary</code> <a href=\"https://github.com/tensorflow/tensorflow/blob/ec7929b878926c39255254e9aea992f0bc65aa68/tensorflow/tensorflow.bzl#L146\">target</a> which I suspect implies target mode. The proper fix would be to force it to be built in host mode, which shouldn't need GPU. One way of forcing host mode\u00a0is to introduce dependency on the binary through <code>tools</code> property of genrule , ie like <a href=\"https://github.com/tensorflow/tensorflow/blob/f94e20f2c704f037a113d350fd7c431e3fd75df8/tensorflow/compiler/aot/tfcompile.bzl#L140\">tensorflow/compiler/aot/tfcompile.bzl</a></p>\n<p>There's an internal issue if you search for \"avx2\", \"ppluzhnikov\" and \"tool\" that addressed similar problem in TF build</p>", "body_text": "@jart The way TensorFlow loads dynamic libraries is not secure (loading by relative path means someone could trick TF to load malicious code from an all-writeable location). So MacOS disables it BVLC/caffe#3227\nAs far to why gen_decode_audio_op_py_py_wrappers_cc needs CUDA, a possibility is that is it built in in the wrong mode. Bazel builds in two configurations \"host\" configuration and \"target\" configuration. The tool is a cc_binary target which I suspect implies target mode. The proper fix would be to force it to be built in host mode, which shouldn't need GPU. One way of forcing host mode\u00a0is to introduce dependency on the binary through tools property of genrule , ie like tensorflow/compiler/aot/tfcompile.bzl\nThere's an internal issue if you search for \"avx2\", \"ppluzhnikov\" and \"tool\" that addressed similar problem in TF build", "body": "@jart The way TensorFlow loads dynamic libraries is not secure (loading by relative path means someone could trick TF to load malicious code from an all-writeable location). So MacOS disables it https://github.com/BVLC/caffe/issues/3227 \r\n\r\nAs far to why `gen_decode_audio_op_py_py_wrappers_cc` needs CUDA, a possibility is that is it built in in the wrong mode. Bazel builds in [two configurations](https://bazel.build/versions/master/docs/be/general.html#cross-compilation-considerations) \"host\" configuration and \"target\" configuration. The tool is a `cc_binary` [target](https://github.com/tensorflow/tensorflow/blob/ec7929b878926c39255254e9aea992f0bc65aa68/tensorflow/tensorflow.bzl#L146) which I suspect implies target mode. The proper fix would be to force it to be built in host mode, which shouldn't need GPU. One way of forcing host mode\u00a0is to introduce dependency on the binary through `tools` property of genrule , ie like [tensorflow/compiler/aot/tfcompile.bzl](https://github.com/tensorflow/tensorflow/blob/f94e20f2c704f037a113d350fd7c431e3fd75df8/tensorflow/compiler/aot/tfcompile.bzl#L140)\r\n\r\nThere's an internal issue if you search for \"avx2\", \"ppluzhnikov\" and \"tool\" that addressed similar problem in TF build"}