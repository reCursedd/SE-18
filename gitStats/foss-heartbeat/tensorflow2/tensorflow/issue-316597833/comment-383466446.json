{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/383466446", "html_url": "https://github.com/tensorflow/tensorflow/issues/18777#issuecomment-383466446", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18777", "id": 383466446, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzQ2NjQ0Ng==", "user": {"login": "arassadin", "id": 3072128, "node_id": "MDQ6VXNlcjMwNzIxMjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3072128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arassadin", "html_url": "https://github.com/arassadin", "followers_url": "https://api.github.com/users/arassadin/followers", "following_url": "https://api.github.com/users/arassadin/following{/other_user}", "gists_url": "https://api.github.com/users/arassadin/gists{/gist_id}", "starred_url": "https://api.github.com/users/arassadin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arassadin/subscriptions", "organizations_url": "https://api.github.com/users/arassadin/orgs", "repos_url": "https://api.github.com/users/arassadin/repos", "events_url": "https://api.github.com/users/arassadin/events{/privacy}", "received_events_url": "https://api.github.com/users/arassadin/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-23T06:18:26Z", "updated_at": "2018-04-23T06:18:26Z", "author_association": "NONE", "body_html": "<p>And when I say that it works with <code>TensorFlow</code> itself, I mean</p>\n<pre><code>INPUT_LAYERS = ['input_1']\nOUTPUT_LAYERS = ['reshape_2/Reshape']\n\ndef get_graph_and_session(graphdef, name=''):\n    graph = tf.get_default_graph()\n    tf.import_graph_def(graphdef, name=name)\n    sess = tf.Session(graph=graph, config=config)\n    return graph, sess\n\ndef get_io(graph, name=''):\n    if name != '':\n        inp = graph.get_tensor_by_name('{}/{}:0'.format(name, INPUT_LAYERS[0]))\n        out = graph.get_tensor_by_name('{}/{}:0'.format(name, OUTPUT_LAYERS[0]))\n    else:\n        inp = graph.get_tensor_by_name('{}:0'.format(INPUT_LAYERS[0]))\n        out = graph.get_tensor_by_name('{}:0'.format(OUTPUT_LAYERS[0]))\n    return inp, out\n\ndef run(sess, inp, out, data):\n    return sess.run(out, feed_dict={inp: data})\n\ngraph_orig, sess_orig = get_graph_and_session(graph_def)\ninp_orig, out_orig = get_io(graph_orig)\nres_orig = run(sess_orig, inp_orig, out_orig, np.zeros((1, INPUT_H, INPUT_W, 3)))\n</code></pre>", "body_text": "And when I say that it works with TensorFlow itself, I mean\nINPUT_LAYERS = ['input_1']\nOUTPUT_LAYERS = ['reshape_2/Reshape']\n\ndef get_graph_and_session(graphdef, name=''):\n    graph = tf.get_default_graph()\n    tf.import_graph_def(graphdef, name=name)\n    sess = tf.Session(graph=graph, config=config)\n    return graph, sess\n\ndef get_io(graph, name=''):\n    if name != '':\n        inp = graph.get_tensor_by_name('{}/{}:0'.format(name, INPUT_LAYERS[0]))\n        out = graph.get_tensor_by_name('{}/{}:0'.format(name, OUTPUT_LAYERS[0]))\n    else:\n        inp = graph.get_tensor_by_name('{}:0'.format(INPUT_LAYERS[0]))\n        out = graph.get_tensor_by_name('{}:0'.format(OUTPUT_LAYERS[0]))\n    return inp, out\n\ndef run(sess, inp, out, data):\n    return sess.run(out, feed_dict={inp: data})\n\ngraph_orig, sess_orig = get_graph_and_session(graph_def)\ninp_orig, out_orig = get_io(graph_orig)\nres_orig = run(sess_orig, inp_orig, out_orig, np.zeros((1, INPUT_H, INPUT_W, 3)))", "body": "And when I say that it works with `TensorFlow` itself, I mean\r\n```\r\nINPUT_LAYERS = ['input_1']\r\nOUTPUT_LAYERS = ['reshape_2/Reshape']\r\n\r\ndef get_graph_and_session(graphdef, name=''):\r\n    graph = tf.get_default_graph()\r\n    tf.import_graph_def(graphdef, name=name)\r\n    sess = tf.Session(graph=graph, config=config)\r\n    return graph, sess\r\n\r\ndef get_io(graph, name=''):\r\n    if name != '':\r\n        inp = graph.get_tensor_by_name('{}/{}:0'.format(name, INPUT_LAYERS[0]))\r\n        out = graph.get_tensor_by_name('{}/{}:0'.format(name, OUTPUT_LAYERS[0]))\r\n    else:\r\n        inp = graph.get_tensor_by_name('{}:0'.format(INPUT_LAYERS[0]))\r\n        out = graph.get_tensor_by_name('{}:0'.format(OUTPUT_LAYERS[0]))\r\n    return inp, out\r\n\r\ndef run(sess, inp, out, data):\r\n    return sess.run(out, feed_dict={inp: data})\r\n\r\ngraph_orig, sess_orig = get_graph_and_session(graph_def)\r\ninp_orig, out_orig = get_io(graph_orig)\r\nres_orig = run(sess_orig, inp_orig, out_orig, np.zeros((1, INPUT_H, INPUT_W, 3)))\r\n```"}