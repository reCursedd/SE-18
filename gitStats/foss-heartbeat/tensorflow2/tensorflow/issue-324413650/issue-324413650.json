{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19382", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19382/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19382/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19382/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19382", "id": 324413650, "node_id": "MDU6SXNzdWUzMjQ0MTM2NTA=", "number": 19382, "title": "Tensor Forest generates TWO sets of files while training", "user": {"login": "iuliakhomenko", "id": 17955642, "node_id": "MDQ6VXNlcjE3OTU1NjQy", "avatar_url": "https://avatars1.githubusercontent.com/u/17955642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iuliakhomenko", "html_url": "https://github.com/iuliakhomenko", "followers_url": "https://api.github.com/users/iuliakhomenko/followers", "following_url": "https://api.github.com/users/iuliakhomenko/following{/other_user}", "gists_url": "https://api.github.com/users/iuliakhomenko/gists{/gist_id}", "starred_url": "https://api.github.com/users/iuliakhomenko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iuliakhomenko/subscriptions", "organizations_url": "https://api.github.com/users/iuliakhomenko/orgs", "repos_url": "https://api.github.com/users/iuliakhomenko/repos", "events_url": "https://api.github.com/users/iuliakhomenko/events{/privacy}", "received_events_url": "https://api.github.com/users/iuliakhomenko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-18T13:35:59Z", "updated_at": "2018-05-22T09:34:50Z", "closed_at": "2018-05-22T09:34:50Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: MacOS</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Tensorflow CPU installed with pip</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.8.0</li>\n<li><strong>Python version</strong>:  3.6.4</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I am building a simple classification model using pre-made Tensor Forest Estimator. While training, my classifier generates one graph and one file with checkpoints but TWO sets of model data, here are the files generated after model fitting the training data:</p>\n<pre><code>checkpoint                      \nevents.out.tfevents.1526645293.Iulias-MacBook-Air.local \ngraph.pbtxt \nmodel.ckpt-1.data-00000-of-00002\nmodel.ckpt-1.data-00001-of-00002\nmodel.ckpt-1.index\nmodel.ckpt-1.meta\nmodel.ckpt-299.data-00000-of-00002                  \nmodel.ckpt-299.data-00001-of-00002          \nmodel.ckpt-299.index            \nmodel.ckpt-299.meta\n</code></pre>\n<p>While training I'm also getting multiple warnings from TF about errors during serializing, like:</p>\n<p>WARNING:tensorflow:Error encountered when serializing resources. Type is unsupported, or the types of the items don't match field type in CollectionDef. '_Resource' object has no attribute 'name'</p>\n<p>Could it be the reason?</p>\n<p>My code is below:</p>\n<pre><code>import pickle\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nimport tensorflow as tf\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nfrom tensorflow.contrib.tensor_forest.client import eval_metrics\nimport itertools\nresale_postback_df = pd.read_pickle('./stats')\n\nfeatures_list = ['feature_1', 'feature_2','feature_3','feature_4','feature_6', 'feature_7', 'feature_8']\nlabels_list = ['tf_labels']\n\nprint(labels_test.values)\n\nfeatures_train, features_test, labels_train, labels_test = train_test_split(resale_postback_df[features_list], \n                                                                            resale_postback_df.tf_labels,\n                                                                           test_size=0.3,random_state = 42, shuffle = True)\n#defining custom input function for Tensor Forest\ndef generate_tf_input_fn(x_input,y_input,num_epochs=None):\n    #this is the function we are generating\n    def _input_fn_():\n        # generate a standard input function\n        train_input_fn = tf.estimator.inputs.pandas_input_fn(\n            x= x_input,  \n            y= y_input,\n            num_epochs=num_epochs,\n            shuffle=True\n        )\n        #execute the standard input function \n        x, y = train_input_fn()\n        # expand the shape of the results (necessary for Tensor Forest)\n        for name in x:\n            x[name] = tf.expand_dims(x[name], 1, name= name) \n        return x, y\n\n    return _input_fn_\n\ntrain_input_fn = generate_tf_input_fn(features_train,labels_train,num_epochs=None)\ntest_input_fn = generate_tf_input_fn(features_test, labels_test, num_epochs=None)\n\ntf.logging.set_verbosity(0)\nhparams = tf.contrib.tensor_forest.python.tensor_forest.ForestHParams(num_classes=len(resale_postback_df.tf_labels.unique()),\n                                          regression= False,\n                                          num_features=len(features_list),\n                                          num_trees=50,\n                                          min_split_samples=2,\n                                          verbose = 0).fill()\n\nSAVE_PATH = './save'\n\nclassifier = tf.contrib.tensor_forest.client.random_forest.TensorForestEstimator(hparams,model_dir = SAVE_PATH)\nclassifier.fit(input_fn = train_input_fn)\n</code></pre>\n<p>Can somebody explain to me hpw to solve this problem ?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS\nTensorFlow installed from (source or binary): Tensorflow CPU installed with pip\nTensorFlow version (use command below): 1.8.0\nPython version:  3.6.4\n\nDescribe the problem\nI am building a simple classification model using pre-made Tensor Forest Estimator. While training, my classifier generates one graph and one file with checkpoints but TWO sets of model data, here are the files generated after model fitting the training data:\ncheckpoint                      \nevents.out.tfevents.1526645293.Iulias-MacBook-Air.local \ngraph.pbtxt \nmodel.ckpt-1.data-00000-of-00002\nmodel.ckpt-1.data-00001-of-00002\nmodel.ckpt-1.index\nmodel.ckpt-1.meta\nmodel.ckpt-299.data-00000-of-00002                  \nmodel.ckpt-299.data-00001-of-00002          \nmodel.ckpt-299.index            \nmodel.ckpt-299.meta\n\nWhile training I'm also getting multiple warnings from TF about errors during serializing, like:\nWARNING:tensorflow:Error encountered when serializing resources. Type is unsupported, or the types of the items don't match field type in CollectionDef. '_Resource' object has no attribute 'name'\nCould it be the reason?\nMy code is below:\nimport pickle\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nimport tensorflow as tf\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nfrom tensorflow.contrib.tensor_forest.client import eval_metrics\nimport itertools\nresale_postback_df = pd.read_pickle('./stats')\n\nfeatures_list = ['feature_1', 'feature_2','feature_3','feature_4','feature_6', 'feature_7', 'feature_8']\nlabels_list = ['tf_labels']\n\nprint(labels_test.values)\n\nfeatures_train, features_test, labels_train, labels_test = train_test_split(resale_postback_df[features_list], \n                                                                            resale_postback_df.tf_labels,\n                                                                           test_size=0.3,random_state = 42, shuffle = True)\n#defining custom input function for Tensor Forest\ndef generate_tf_input_fn(x_input,y_input,num_epochs=None):\n    #this is the function we are generating\n    def _input_fn_():\n        # generate a standard input function\n        train_input_fn = tf.estimator.inputs.pandas_input_fn(\n            x= x_input,  \n            y= y_input,\n            num_epochs=num_epochs,\n            shuffle=True\n        )\n        #execute the standard input function \n        x, y = train_input_fn()\n        # expand the shape of the results (necessary for Tensor Forest)\n        for name in x:\n            x[name] = tf.expand_dims(x[name], 1, name= name) \n        return x, y\n\n    return _input_fn_\n\ntrain_input_fn = generate_tf_input_fn(features_train,labels_train,num_epochs=None)\ntest_input_fn = generate_tf_input_fn(features_test, labels_test, num_epochs=None)\n\ntf.logging.set_verbosity(0)\nhparams = tf.contrib.tensor_forest.python.tensor_forest.ForestHParams(num_classes=len(resale_postback_df.tf_labels.unique()),\n                                          regression= False,\n                                          num_features=len(features_list),\n                                          num_trees=50,\n                                          min_split_samples=2,\n                                          verbose = 0).fill()\n\nSAVE_PATH = './save'\n\nclassifier = tf.contrib.tensor_forest.client.random_forest.TensorForestEstimator(hparams,model_dir = SAVE_PATH)\nclassifier.fit(input_fn = train_input_fn)\n\nCan somebody explain to me hpw to solve this problem ?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: MacOS\r\n- **TensorFlow installed from (source or binary)**: Tensorflow CPU installed with pip\r\n- **TensorFlow version (use command below)**: 1.8.0\r\n- **Python version**:  3.6.4\r\n\r\n### Describe the problem\r\nI am building a simple classification model using pre-made Tensor Forest Estimator. While training, my classifier generates one graph and one file with checkpoints but TWO sets of model data, here are the files generated after model fitting the training data:\r\n\r\n```\r\ncheckpoint                      \r\nevents.out.tfevents.1526645293.Iulias-MacBook-Air.local \r\ngraph.pbtxt \r\nmodel.ckpt-1.data-00000-of-00002\r\nmodel.ckpt-1.data-00001-of-00002\r\nmodel.ckpt-1.index\r\nmodel.ckpt-1.meta\r\nmodel.ckpt-299.data-00000-of-00002                  \r\nmodel.ckpt-299.data-00001-of-00002          \r\nmodel.ckpt-299.index            \r\nmodel.ckpt-299.meta\r\n```\r\nWhile training I'm also getting multiple warnings from TF about errors during serializing, like:\r\n\r\nWARNING:tensorflow:Error encountered when serializing resources. Type is unsupported, or the types of the items don't match field type in CollectionDef. '_Resource' object has no attribute 'name'\r\n\r\nCould it be the reason?\r\n\r\nMy code is below:\r\n\r\n```\r\nimport pickle\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.metrics import f1_score\r\nimport tensorflow as tf\r\nfrom sklearn.metrics import f1_score\r\nfrom sklearn.metrics import confusion_matrix\r\nimport matplotlib.pyplot as plt\r\nfrom tensorflow.contrib.tensor_forest.client import eval_metrics\r\nimport itertools\r\nresale_postback_df = pd.read_pickle('./stats')\r\n\r\nfeatures_list = ['feature_1', 'feature_2','feature_3','feature_4','feature_6', 'feature_7', 'feature_8']\r\nlabels_list = ['tf_labels']\r\n\r\nprint(labels_test.values)\r\n\r\nfeatures_train, features_test, labels_train, labels_test = train_test_split(resale_postback_df[features_list], \r\n                                                                            resale_postback_df.tf_labels,\r\n                                                                           test_size=0.3,random_state = 42, shuffle = True)\r\n#defining custom input function for Tensor Forest\r\ndef generate_tf_input_fn(x_input,y_input,num_epochs=None):\r\n    #this is the function we are generating\r\n    def _input_fn_():\r\n        # generate a standard input function\r\n        train_input_fn = tf.estimator.inputs.pandas_input_fn(\r\n            x= x_input,  \r\n            y= y_input,\r\n            num_epochs=num_epochs,\r\n            shuffle=True\r\n        )\r\n        #execute the standard input function \r\n        x, y = train_input_fn()\r\n        # expand the shape of the results (necessary for Tensor Forest)\r\n        for name in x:\r\n            x[name] = tf.expand_dims(x[name], 1, name= name) \r\n        return x, y\r\n\r\n    return _input_fn_\r\n\r\ntrain_input_fn = generate_tf_input_fn(features_train,labels_train,num_epochs=None)\r\ntest_input_fn = generate_tf_input_fn(features_test, labels_test, num_epochs=None)\r\n\r\ntf.logging.set_verbosity(0)\r\nhparams = tf.contrib.tensor_forest.python.tensor_forest.ForestHParams(num_classes=len(resale_postback_df.tf_labels.unique()),\r\n                                          regression= False,\r\n                                          num_features=len(features_list),\r\n                                          num_trees=50,\r\n                                          min_split_samples=2,\r\n                                          verbose = 0).fill()\r\n\r\nSAVE_PATH = './save'\r\n\r\nclassifier = tf.contrib.tensor_forest.client.random_forest.TensorForestEstimator(hparams,model_dir = SAVE_PATH)\r\nclassifier.fit(input_fn = train_input_fn)\r\n```\r\nCan somebody explain to me hpw to solve this problem ?\r\n"}