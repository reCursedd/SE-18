{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/275848619", "html_url": "https://github.com/tensorflow/tensorflow/issues/1269#issuecomment-275848619", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1269", "id": 275848619, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTg0ODYxOQ==", "user": {"login": "chrisrn", "id": 12279420, "node_id": "MDQ6VXNlcjEyMjc5NDIw", "avatar_url": "https://avatars1.githubusercontent.com/u/12279420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisrn", "html_url": "https://github.com/chrisrn", "followers_url": "https://api.github.com/users/chrisrn/followers", "following_url": "https://api.github.com/users/chrisrn/following{/other_user}", "gists_url": "https://api.github.com/users/chrisrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisrn/subscriptions", "organizations_url": "https://api.github.com/users/chrisrn/orgs", "repos_url": "https://api.github.com/users/chrisrn/repos", "events_url": "https://api.github.com/users/chrisrn/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisrn/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-28T13:38:03Z", "updated_at": "2017-01-29T17:46:02Z", "author_association": "NONE", "body_html": "<p>I have successfully run the inception5h model on my android 5 device. I have trained the inception-v3 network and I have successfully loaded the model to the device, but the predictions I am getting are wrong. Basically, the output classes are \"Food\" and \"Non-food\" but the model seems to be very slow. In some cases it predicts well but in others it's wrong. I have also run the strip_unused.py script but nothing has changed. The model can predict with high accuracy because I have tested it, but it fails as an application. The code is the following:</p>\n<pre><code>with tf.Graph().as_default(): \n      \n        images = tf.placeholder(dtype=tf.float32, shape=[None, 299, 299, 3], name='inputs')\n        labels = tf.placeholder(dtype=tf.int32, shape=[None])\n\n        # Number of classes in the Dataset label set plus 1.\n        # Label 0 is reserved for an (unused) background class.\n        num_classes = dataset.num_classes() + 1\n        \n        logits, softmax_weights, convoluted = inception.inference(images, num_classes)    \n\n        final_tensor = tf.nn.softmax(logits, name='final_result')\n        prediction = tf.argmax(final_tensor, 1)\n        top_2_op = tf.nn.in_top_k(logits, labels, 2)\n        activation_map = heat_map(convoluted, softmax_weights, labels)\n        \n        saver = tf.train.Saver()\n        # Build an initialization operation to run below.\n        init = tf.initialize_all_variables()\n        sess = tf.Session()\n        sess.run(init)\n        \n        assert tf.gfile.Exists(FLAGS.pretrained_model_checkpoint_path)\n        saver.restore(sess, FLAGS.pretrained_model_checkpoint_path)\n        print('%s: Pre-trained model restored from %s' %\n                    (datetime.now(), FLAGS.pretrained_model_checkpoint_path))\n        \n         \n        output_graph_def = graph_util.convert_variables_to_constants(\n        sess, sess.graph.as_graph_def(), ['final_result'])\n        with gfile.FastGFile(FLAGS.output_graph, 'wb') as f:\n            f.write(output_graph_def.SerializeToString())\n</code></pre>", "body_text": "I have successfully run the inception5h model on my android 5 device. I have trained the inception-v3 network and I have successfully loaded the model to the device, but the predictions I am getting are wrong. Basically, the output classes are \"Food\" and \"Non-food\" but the model seems to be very slow. In some cases it predicts well but in others it's wrong. I have also run the strip_unused.py script but nothing has changed. The model can predict with high accuracy because I have tested it, but it fails as an application. The code is the following:\nwith tf.Graph().as_default(): \n      \n        images = tf.placeholder(dtype=tf.float32, shape=[None, 299, 299, 3], name='inputs')\n        labels = tf.placeholder(dtype=tf.int32, shape=[None])\n\n        # Number of classes in the Dataset label set plus 1.\n        # Label 0 is reserved for an (unused) background class.\n        num_classes = dataset.num_classes() + 1\n        \n        logits, softmax_weights, convoluted = inception.inference(images, num_classes)    \n\n        final_tensor = tf.nn.softmax(logits, name='final_result')\n        prediction = tf.argmax(final_tensor, 1)\n        top_2_op = tf.nn.in_top_k(logits, labels, 2)\n        activation_map = heat_map(convoluted, softmax_weights, labels)\n        \n        saver = tf.train.Saver()\n        # Build an initialization operation to run below.\n        init = tf.initialize_all_variables()\n        sess = tf.Session()\n        sess.run(init)\n        \n        assert tf.gfile.Exists(FLAGS.pretrained_model_checkpoint_path)\n        saver.restore(sess, FLAGS.pretrained_model_checkpoint_path)\n        print('%s: Pre-trained model restored from %s' %\n                    (datetime.now(), FLAGS.pretrained_model_checkpoint_path))\n        \n         \n        output_graph_def = graph_util.convert_variables_to_constants(\n        sess, sess.graph.as_graph_def(), ['final_result'])\n        with gfile.FastGFile(FLAGS.output_graph, 'wb') as f:\n            f.write(output_graph_def.SerializeToString())", "body": "I have successfully run the inception5h model on my android 5 device. I have trained the inception-v3 network and I have successfully loaded the model to the device, but the predictions I am getting are wrong. Basically, the output classes are \"Food\" and \"Non-food\" but the model seems to be very slow. In some cases it predicts well but in others it's wrong. I have also run the strip_unused.py script but nothing has changed. The model can predict with high accuracy because I have tested it, but it fails as an application. The code is the following:\r\n\r\n```\r\nwith tf.Graph().as_default(): \r\n      \r\n        images = tf.placeholder(dtype=tf.float32, shape=[None, 299, 299, 3], name='inputs')\r\n        labels = tf.placeholder(dtype=tf.int32, shape=[None])\r\n\r\n        # Number of classes in the Dataset label set plus 1.\r\n        # Label 0 is reserved for an (unused) background class.\r\n        num_classes = dataset.num_classes() + 1\r\n        \r\n        logits, softmax_weights, convoluted = inception.inference(images, num_classes)    \r\n\r\n        final_tensor = tf.nn.softmax(logits, name='final_result')\r\n        prediction = tf.argmax(final_tensor, 1)\r\n        top_2_op = tf.nn.in_top_k(logits, labels, 2)\r\n        activation_map = heat_map(convoluted, softmax_weights, labels)\r\n        \r\n        saver = tf.train.Saver()\r\n        # Build an initialization operation to run below.\r\n        init = tf.initialize_all_variables()\r\n        sess = tf.Session()\r\n        sess.run(init)\r\n        \r\n        assert tf.gfile.Exists(FLAGS.pretrained_model_checkpoint_path)\r\n        saver.restore(sess, FLAGS.pretrained_model_checkpoint_path)\r\n        print('%s: Pre-trained model restored from %s' %\r\n                    (datetime.now(), FLAGS.pretrained_model_checkpoint_path))\r\n        \r\n         \r\n        output_graph_def = graph_util.convert_variables_to_constants(\r\n        sess, sess.graph.as_graph_def(), ['final_result'])\r\n        with gfile.FastGFile(FLAGS.output_graph, 'wb') as f:\r\n            f.write(output_graph_def.SerializeToString())\r\n``` "}