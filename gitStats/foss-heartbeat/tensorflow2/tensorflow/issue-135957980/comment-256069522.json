{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/256069522", "html_url": "https://github.com/tensorflow/tensorflow/issues/1269#issuecomment-256069522", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1269", "id": 256069522, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjA2OTUyMg==", "user": {"login": "nikogamulin", "id": 1803701, "node_id": "MDQ6VXNlcjE4MDM3MDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikogamulin", "html_url": "https://github.com/nikogamulin", "followers_url": "https://api.github.com/users/nikogamulin/followers", "following_url": "https://api.github.com/users/nikogamulin/following{/other_user}", "gists_url": "https://api.github.com/users/nikogamulin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikogamulin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikogamulin/subscriptions", "organizations_url": "https://api.github.com/users/nikogamulin/orgs", "repos_url": "https://api.github.com/users/nikogamulin/repos", "events_url": "https://api.github.com/users/nikogamulin/events{/privacy}", "received_events_url": "https://api.github.com/users/nikogamulin/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-25T15:29:30Z", "updated_at": "2016-10-25T15:29:30Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=292790\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bafu\">@bafu</a> Thank you, your suggestion solved the problem. By the way, when testing original demo app (using inception v1), the detection ran smoothly - there was almost no latency, whereas the retrained model I just tested is supposed to detect just two categories and the delay is really large (1 - 2 seconds).<br>\nFor each category, I used a little less than 200 photos. With time I plan to extend the dataset and include more categories. Anyway, I would appreciate if anyone shared his experience using retrained model in terms of latency and also, any suggestions for possible speed-up would be really helpful.</p>", "body_text": "@bafu Thank you, your suggestion solved the problem. By the way, when testing original demo app (using inception v1), the detection ran smoothly - there was almost no latency, whereas the retrained model I just tested is supposed to detect just two categories and the delay is really large (1 - 2 seconds).\nFor each category, I used a little less than 200 photos. With time I plan to extend the dataset and include more categories. Anyway, I would appreciate if anyone shared his experience using retrained model in terms of latency and also, any suggestions for possible speed-up would be really helpful.", "body": "@bafu Thank you, your suggestion solved the problem. By the way, when testing original demo app (using inception v1), the detection ran smoothly - there was almost no latency, whereas the retrained model I just tested is supposed to detect just two categories and the delay is really large (1 - 2 seconds).\nFor each category, I used a little less than 200 photos. With time I plan to extend the dataset and include more categories. Anyway, I would appreciate if anyone shared his experience using retrained model in terms of latency and also, any suggestions for possible speed-up would be really helpful.\n"}