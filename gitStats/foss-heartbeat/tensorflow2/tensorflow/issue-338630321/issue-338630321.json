{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20570", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20570/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20570/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20570/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20570", "id": 338630321, "node_id": "MDU6SXNzdWUzMzg2MzAzMjE=", "number": 20570, "title": "Slow tf.hessians slicing", "user": {"login": "Hoeze", "id": 1200058, "node_id": "MDQ6VXNlcjEyMDAwNTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1200058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hoeze", "html_url": "https://github.com/Hoeze", "followers_url": "https://api.github.com/users/Hoeze/followers", "following_url": "https://api.github.com/users/Hoeze/following{/other_user}", "gists_url": "https://api.github.com/users/Hoeze/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hoeze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hoeze/subscriptions", "organizations_url": "https://api.github.com/users/Hoeze/orgs", "repos_url": "https://api.github.com/users/Hoeze/repos", "events_url": "https://api.github.com/users/Hoeze/events{/privacy}", "received_events_url": "https://api.github.com/users/Hoeze/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-07-05T15:47:42Z", "updated_at": "2018-11-19T23:25:46Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Hi, I'd like to calculate the diagonal matrix of some hessian:</p>\n<p>I've got some variables <code>a, b</code> of shape <code>(5, &lt;num_features&gt;)</code> and I'd need for each feature the hessian's diagonal:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> [<span class=\"pl-c1\">self</span>.a, <span class=\"pl-c1\">self</span>.b]\n[<span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Linear_Batch_Model/a/concat:0<span class=\"pl-pds\">'</span></span> shape=(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">10000</span>) dtype=float32<span class=\"pl-k\">&gt;</span>,\n <span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Linear_Batch_Model/b/concat:0<span class=\"pl-pds\">'</span></span> shape=(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">10000</span>) dtype=float32<span class=\"pl-k\">&gt;</span>]\n\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> tf.hessians(<span class=\"pl-c1\">self</span>.full_loss, [<span class=\"pl-c1\">self</span>.a, <span class=\"pl-c1\">self</span>.b])\n[<span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Reshape_1:0<span class=\"pl-pds\">'</span></span> shape=(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">10000</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">10000</span>) dtype=float32<span class=\"pl-k\">&gt;</span>,\n <span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Reshape_3:0<span class=\"pl-pds\">'</span></span> shape=(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">10000</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">10000</span>) dtype=float32<span class=\"pl-k\">&gt;</span>]\n\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> [tf.diag_part(t) <span class=\"pl-k\">for</span> t <span class=\"pl-k\">in</span> tf.hessians(<span class=\"pl-c1\">self</span>.full_loss, [<span class=\"pl-c1\">self</span>.a, <span class=\"pl-c1\">self</span>.b])]\n[<span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>DiagPart_3:0<span class=\"pl-pds\">'</span></span> shape=(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">10000</span>) dtype=float32<span class=\"pl-k\">&gt;</span>,\n <span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>DiagPart_4:0<span class=\"pl-pds\">'</span></span> shape=(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">10000</span>) dtype=float32<span class=\"pl-k\">&gt;</span>]</pre></div>\n<p><strong>However, this calculation seems to run infinitely:</strong><br>\nThe full hessian matrices are huge, but since I only take the diagonal elements, they should never be calculated explicitly.</p>\n<ul>\n<li>I can calculate the diagonal by hand (<code>gradient(gradient(loss, [a,b]), [a,b])</code>), but I always expected tensorflow to optimize such operations implicitely...</li>\n<li>Also, this trick does not work if I'd need other parts of the Hessian matrix, e.g. if I need for each independent gene the <code>parm x parm</code>-shaped hessian:<br>\nTF does not allow to differentiate only slices of a and b (e.g. <code>tf.hessians(loss, [a[:, 0], b[:,0]])</code>)</li>\n</ul>\n<p>.</p>\n<h3>The problem</h3>\n<p>Tensorflow seems to explicitly calculate the full hessian matrix</p>\n<h3>What I'd expect</h3>\n<p>Fast calculation since I only request the diagonal</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 18.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.9.0</li>\n<li><strong>Python version</strong>: 3.6.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: none</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: none</li>\n<li><strong>CUDA/cuDNN version</strong>: none</li>\n<li><strong>GPU model and memory</strong>: none</li>\n<li><strong>Exact command to reproduce</strong>: none</li>\n</ul>", "body_text": "Hi, I'd like to calculate the diagonal matrix of some hessian:\nI've got some variables a, b of shape (5, <num_features>) and I'd need for each feature the hessian's diagonal:\n>>> [self.a, self.b]\n[<tf.Tensor 'Linear_Batch_Model/a/concat:0' shape=(5, 10000) dtype=float32>,\n <tf.Tensor 'Linear_Batch_Model/b/concat:0' shape=(5, 10000) dtype=float32>]\n\n>>> tf.hessians(self.full_loss, [self.a, self.b])\n[<tf.Tensor 'Reshape_1:0' shape=(5, 10000, 5, 10000) dtype=float32>,\n <tf.Tensor 'Reshape_3:0' shape=(5, 10000, 5, 10000) dtype=float32>]\n\n>>> [tf.diag_part(t) for t in tf.hessians(self.full_loss, [self.a, self.b])]\n[<tf.Tensor 'DiagPart_3:0' shape=(5, 10000) dtype=float32>,\n <tf.Tensor 'DiagPart_4:0' shape=(5, 10000) dtype=float32>]\nHowever, this calculation seems to run infinitely:\nThe full hessian matrices are huge, but since I only take the diagonal elements, they should never be calculated explicitly.\n\nI can calculate the diagonal by hand (gradient(gradient(loss, [a,b]), [a,b])), but I always expected tensorflow to optimize such operations implicitely...\nAlso, this trick does not work if I'd need other parts of the Hessian matrix, e.g. if I need for each independent gene the parm x parm-shaped hessian:\nTF does not allow to differentiate only slices of a and b (e.g. tf.hessians(loss, [a[:, 0], b[:,0]]))\n\n.\nThe problem\nTensorflow seems to explicitly calculate the full hessian matrix\nWhat I'd expect\nFast calculation since I only request the diagonal\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.9.0\nPython version: 3.6.5\nBazel version (if compiling from source): none\nGCC/Compiler version (if compiling from source): none\nCUDA/cuDNN version: none\nGPU model and memory: none\nExact command to reproduce: none", "body": "Hi, I'd like to calculate the diagonal matrix of some hessian:\r\n\r\nI've got some variables `a, b` of shape `(5, <num_features>)` and I'd need for each feature the hessian's diagonal:\r\n\r\n```python3\r\n>>> [self.a, self.b]\r\n[<tf.Tensor 'Linear_Batch_Model/a/concat:0' shape=(5, 10000) dtype=float32>,\r\n <tf.Tensor 'Linear_Batch_Model/b/concat:0' shape=(5, 10000) dtype=float32>]\r\n\r\n>>> tf.hessians(self.full_loss, [self.a, self.b])\r\n[<tf.Tensor 'Reshape_1:0' shape=(5, 10000, 5, 10000) dtype=float32>,\r\n <tf.Tensor 'Reshape_3:0' shape=(5, 10000, 5, 10000) dtype=float32>]\r\n\r\n>>> [tf.diag_part(t) for t in tf.hessians(self.full_loss, [self.a, self.b])]\r\n[<tf.Tensor 'DiagPart_3:0' shape=(5, 10000) dtype=float32>,\r\n <tf.Tensor 'DiagPart_4:0' shape=(5, 10000) dtype=float32>]\r\n```\r\n\r\n**However, this calculation seems to run infinitely:**\r\nThe full hessian matrices are huge, but since I only take the diagonal elements, they should never be calculated explicitly.\r\n\r\n- I can calculate the diagonal by hand (`gradient(gradient(loss, [a,b]), [a,b])`), but I always expected tensorflow to optimize such operations implicitely...\r\n- Also, this trick does not work if I'd need other parts of the Hessian matrix, e.g. if I need for each independent gene the `parm x parm`-shaped hessian:\r\nTF does not allow to differentiate only slices of a and b (e.g. `tf.hessians(loss, [a[:, 0], b[:,0]])`)\r\n\r\n.\r\n\r\n### The problem\r\nTensorflow seems to explicitly calculate the full hessian matrix\r\n\r\n### What I'd expect\r\nFast calculation since I only request the diagonal\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 18.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.9.0\r\n- **Python version**: 3.6.5\r\n- **Bazel version (if compiling from source)**: none\r\n- **GCC/Compiler version (if compiling from source)**: none\r\n- **CUDA/cuDNN version**: none\r\n- **GPU model and memory**: none\r\n- **Exact command to reproduce**: none"}