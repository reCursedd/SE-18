{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18787", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18787/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18787/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18787/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18787", "id": 316657869, "node_id": "MDU6SXNzdWUzMTY2NTc4Njk=", "number": 18787, "title": "Default arguments of tensorflow.contrib.signal.inverse_stft do not invert tensorflow.contrib.signal.stft", "user": {"login": "boeddeker", "id": 13744128, "node_id": "MDQ6VXNlcjEzNzQ0MTI4", "avatar_url": "https://avatars3.githubusercontent.com/u/13744128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boeddeker", "html_url": "https://github.com/boeddeker", "followers_url": "https://api.github.com/users/boeddeker/followers", "following_url": "https://api.github.com/users/boeddeker/following{/other_user}", "gists_url": "https://api.github.com/users/boeddeker/gists{/gist_id}", "starred_url": "https://api.github.com/users/boeddeker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boeddeker/subscriptions", "organizations_url": "https://api.github.com/users/boeddeker/orgs", "repos_url": "https://api.github.com/users/boeddeker/repos", "events_url": "https://api.github.com/users/boeddeker/events{/privacy}", "received_events_url": "https://api.github.com/users/boeddeker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-04-23T04:27:27Z", "updated_at": "2018-11-21T18:59:40Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>This issue is a suggestion to modify <code>tensorflow.contrib.signal.inverse_stft</code> such that the default arguments invert the <code>stft</code></p>\n<h2>Background</h2>\n<p>Currently the correct call to <code>inverse_stft</code> is:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">...</span> <span class=\"pl-k\">=</span> tf.contrib.signal.inverse_stft(\n    <span class=\"pl-v\">stfts</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">...</span>,\n    <span class=\"pl-v\">frame_length</span><span class=\"pl-k\">=</span>frame_length,\n    <span class=\"pl-v\">frame_step</span><span class=\"pl-k\">=</span>frame_step,\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> forward_window_fn</span>\n    <span class=\"pl-v\">window_fn</span><span class=\"pl-k\">=</span>tf.contrib.signal.inverse_stft_window_fn(\n        <span class=\"pl-v\">frame_step</span><span class=\"pl-k\">=</span>frame_step,\n        <span class=\"pl-v\">forward_window_fn</span><span class=\"pl-k\">=</span>functools.partial(tf.contrib.signal.hann_window, <span class=\"pl-v\">periodic</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>),\n    )\n)</pre></div>\n<p>but the default value for <code>window_fn</code> is <code>functools.partial(tf.contrib.signal.hann_window, periodic=True)</code> so the call to <code>inverse_stft_window_fn</code> is missing, because the <code>frame_step</code> is unknown for the default argument.</p>\n<p>Note: Because the hann window has some special properties, it can happen, that the inverse stft only introduces an amplitude error.</p>\n<h2>Suggestion</h2>\n<p>Introduce <code>forward_window_fn</code> in <code>tensorflow.contrib.signal.inverse_stft</code> and change the defaults to <code>window_fn=None, forward_window_fn=functools.partial(tf.contrib.signal.hann_window, periodic=True)</code>.<br>\nThe code inside would then be:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">if</span> window_fn <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n    window_fn <span class=\"pl-k\">=</span> tf.contrib.signal.inverse_stft_window_fn(frame_step, forward_window_fn)</pre></div>\n<h2>Example code (Demonstration)</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> functools\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow.contrib\n<span class=\"pl-k\">import</span> matplotlib.pyplot <span class=\"pl-k\">as</span> plt\n\nframe_length <span class=\"pl-k\">=</span> <span class=\"pl-c1\">32</span>\nframe_step <span class=\"pl-k\">=</span> <span class=\"pl-c1\">16</span>\n\nx <span class=\"pl-k\">=</span> tf.placeholder(tf.float32)\nX <span class=\"pl-k\">=</span> tf.contrib.signal.stft(\n    x,\n    <span class=\"pl-v\">frame_length</span><span class=\"pl-k\">=</span>frame_length,\n    <span class=\"pl-v\">frame_step</span><span class=\"pl-k\">=</span>frame_step,\n)\nx_hat <span class=\"pl-k\">=</span> tf.contrib.signal.inverse_stft(\n    X,\n    <span class=\"pl-v\">frame_length</span><span class=\"pl-k\">=</span>frame_length,\n    <span class=\"pl-v\">frame_step</span><span class=\"pl-k\">=</span>frame_step,\n)\nx_hat_2 <span class=\"pl-k\">=</span> tf.contrib.signal.inverse_stft(\n    X,\n    <span class=\"pl-v\">frame_length</span><span class=\"pl-k\">=</span>frame_length,\n    <span class=\"pl-v\">frame_step</span><span class=\"pl-k\">=</span>frame_step,\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> forward_window_fn</span>\n    <span class=\"pl-v\">window_fn</span><span class=\"pl-k\">=</span>tf.contrib.signal.inverse_stft_window_fn(\n        frame_step,\n        functools.partial(tf.contrib.signal.hann_window, <span class=\"pl-v\">periodic</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>),\n        \n    )\n)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">normalize</span>(<span class=\"pl-smi\">x</span>):\n    <span class=\"pl-k\">return</span> x <span class=\"pl-k\">/</span> (<span class=\"pl-k\">-</span>np.min(x))\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    t <span class=\"pl-k\">=</span> np.linspace(<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">10</span>,<span class=\"pl-c1\">128</span>)\n    x_np <span class=\"pl-k\">=</span> np.sin(t)\n    x_hat_np, x_hat_2_np <span class=\"pl-k\">=</span> sess.run([x_hat, x_hat_2], {x: x_np})\n  \n    plt.plot(t, x_np, <span class=\"pl-v\">label</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>orig<span class=\"pl-pds\">'</span></span>)\n    plt.plot(t, x_hat_np, <span class=\"pl-v\">label</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>default<span class=\"pl-pds\">'</span></span>)\n    plt.plot(t, x_hat_2_np, <span class=\"pl-v\">label</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>fixed<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>     plt.plot(t, normalize(x_np), label='orig', linewidth=8)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>     plt.plot(t, normalize(x_hat_np), label='default', linewidth=6)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>     plt.plot(t, normalize(x_hat_2_np), label='fixed', linewidth=4)</span>\n    plt.legend()\n</pre></div>\n<p><code>frame_step == 8</code>:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/13744128/39106793-5e78d87a-46be-11e8-9e88-d0c101f4b8de.png\"><img src=\"https://user-images.githubusercontent.com/13744128/39106793-5e78d87a-46be-11e8-9e88-d0c101f4b8de.png\" alt=\"frame_step8\" style=\"max-width:100%;\"></a></p>\n<p><code>frame_step == 16</code>:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/13744128/39106796-61da9b52-46be-11e8-8c1f-de64c10e4f2d.png\"><img src=\"https://user-images.githubusercontent.com/13744128/39106796-61da9b52-46be-11e8-8c1f-de64c10e4f2d.png\" alt=\"frame_step16\" style=\"max-width:100%;\"></a></p>\n<p>While the example with <code>frame_step == 8</code> introduces \"only\" a scaling error, the <code>frame_step == 16</code> example introduces distortions.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: Name: tf-nightly<br>\nVersion: 1.8.0.dev20180331<br>\nSummary: TensorFlow helps the tensors flow<br>\nHome-page: <a href=\"https://www.tensorflow.org/\" rel=\"nofollow\">https://www.tensorflow.org/</a><br>\nAuthor: Google Inc.<br>\nAuthor-email: <a href=\"mailto:opensource@google.com\">opensource@google.com</a><br>\nLicense: Apache 2.0<br>\nLocation: /opt/anaconda/lib/python3.6/site-packages<br>\nRequires: grpcio, astor, gast, termcolor, six, absl-py, numpy, wheel, protobuf, tb-nightly</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>", "body_text": "This issue is a suggestion to modify tensorflow.contrib.signal.inverse_stft such that the default arguments invert the stft\nBackground\nCurrently the correct call to inverse_stft is:\n... = tf.contrib.signal.inverse_stft(\n    stfts=...,\n    frame_length=frame_length,\n    frame_step=frame_step,\n    # forward_window_fn\n    window_fn=tf.contrib.signal.inverse_stft_window_fn(\n        frame_step=frame_step,\n        forward_window_fn=functools.partial(tf.contrib.signal.hann_window, periodic=True),\n    )\n)\nbut the default value for window_fn is functools.partial(tf.contrib.signal.hann_window, periodic=True) so the call to inverse_stft_window_fn is missing, because the frame_step is unknown for the default argument.\nNote: Because the hann window has some special properties, it can happen, that the inverse stft only introduces an amplitude error.\nSuggestion\nIntroduce forward_window_fn in tensorflow.contrib.signal.inverse_stft and change the defaults to window_fn=None, forward_window_fn=functools.partial(tf.contrib.signal.hann_window, periodic=True).\nThe code inside would then be:\nif window_fn is None:\n    window_fn = tf.contrib.signal.inverse_stft_window_fn(frame_step, forward_window_fn)\nExample code (Demonstration)\nimport functools\nimport tensorflow as tf\nimport tensorflow.contrib\nimport matplotlib.pyplot as plt\n\nframe_length = 32\nframe_step = 16\n\nx = tf.placeholder(tf.float32)\nX = tf.contrib.signal.stft(\n    x,\n    frame_length=frame_length,\n    frame_step=frame_step,\n)\nx_hat = tf.contrib.signal.inverse_stft(\n    X,\n    frame_length=frame_length,\n    frame_step=frame_step,\n)\nx_hat_2 = tf.contrib.signal.inverse_stft(\n    X,\n    frame_length=frame_length,\n    frame_step=frame_step,\n    # forward_window_fn\n    window_fn=tf.contrib.signal.inverse_stft_window_fn(\n        frame_step,\n        functools.partial(tf.contrib.signal.hann_window, periodic=True),\n        \n    )\n)\n\ndef normalize(x):\n    return x / (-np.min(x))\n\nwith tf.Session() as sess:\n    t = np.linspace(0,10,128)\n    x_np = np.sin(t)\n    x_hat_np, x_hat_2_np = sess.run([x_hat, x_hat_2], {x: x_np})\n  \n    plt.plot(t, x_np, label='orig')\n    plt.plot(t, x_hat_np, label='default')\n    plt.plot(t, x_hat_2_np, label='fixed')\n#     plt.plot(t, normalize(x_np), label='orig', linewidth=8)\n#     plt.plot(t, normalize(x_hat_np), label='default', linewidth=6)\n#     plt.plot(t, normalize(x_hat_2_np), label='fixed', linewidth=4)\n    plt.legend()\n\nframe_step == 8:\n\nframe_step == 16:\n\nWhile the example with frame_step == 8 introduces \"only\" a scaling error, the frame_step == 16 example introduces distortions.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): Name: tf-nightly\nVersion: 1.8.0.dev20180331\nSummary: TensorFlow helps the tensors flow\nHome-page: https://www.tensorflow.org/\nAuthor: Google Inc.\nAuthor-email: opensource@google.com\nLicense: Apache 2.0\nLocation: /opt/anaconda/lib/python3.6/site-packages\nRequires: grpcio, astor, gast, termcolor, six, absl-py, numpy, wheel, protobuf, tb-nightly\nPython version: 3.6\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:", "body": "This issue is a suggestion to modify `tensorflow.contrib.signal.inverse_stft` such that the default arguments invert the `stft`\r\n\r\n## Background\r\nCurrently the correct call to `inverse_stft` is:\r\n```python\r\n... = tf.contrib.signal.inverse_stft(\r\n    stfts=...,\r\n    frame_length=frame_length,\r\n    frame_step=frame_step,\r\n    # forward_window_fn\r\n    window_fn=tf.contrib.signal.inverse_stft_window_fn(\r\n        frame_step=frame_step,\r\n        forward_window_fn=functools.partial(tf.contrib.signal.hann_window, periodic=True),\r\n    )\r\n)\r\n```\r\nbut the default value for `window_fn` is `functools.partial(tf.contrib.signal.hann_window, periodic=True)` so the call to `inverse_stft_window_fn` is missing, because the `frame_step` is unknown for the default argument.\r\n\r\nNote: Because the hann window has some special properties, it can happen, that the inverse stft only introduces an amplitude error.\r\n\r\n## Suggestion\r\nIntroduce `forward_window_fn` in `tensorflow.contrib.signal.inverse_stft` and change the defaults to `window_fn=None, forward_window_fn=functools.partial(tf.contrib.signal.hann_window, periodic=True)`.\r\nThe code inside would then be:\r\n```python\r\nif window_fn is None:\r\n    window_fn = tf.contrib.signal.inverse_stft_window_fn(frame_step, forward_window_fn)\r\n```\r\n\r\n## Example code (Demonstration)\r\n\r\n```python\r\nimport functools\r\nimport tensorflow as tf\r\nimport tensorflow.contrib\r\nimport matplotlib.pyplot as plt\r\n\r\nframe_length = 32\r\nframe_step = 16\r\n\r\nx = tf.placeholder(tf.float32)\r\nX = tf.contrib.signal.stft(\r\n    x,\r\n    frame_length=frame_length,\r\n    frame_step=frame_step,\r\n)\r\nx_hat = tf.contrib.signal.inverse_stft(\r\n    X,\r\n    frame_length=frame_length,\r\n    frame_step=frame_step,\r\n)\r\nx_hat_2 = tf.contrib.signal.inverse_stft(\r\n    X,\r\n    frame_length=frame_length,\r\n    frame_step=frame_step,\r\n    # forward_window_fn\r\n    window_fn=tf.contrib.signal.inverse_stft_window_fn(\r\n        frame_step,\r\n        functools.partial(tf.contrib.signal.hann_window, periodic=True),\r\n        \r\n    )\r\n)\r\n\r\ndef normalize(x):\r\n    return x / (-np.min(x))\r\n\r\nwith tf.Session() as sess:\r\n    t = np.linspace(0,10,128)\r\n    x_np = np.sin(t)\r\n    x_hat_np, x_hat_2_np = sess.run([x_hat, x_hat_2], {x: x_np})\r\n  \r\n    plt.plot(t, x_np, label='orig')\r\n    plt.plot(t, x_hat_np, label='default')\r\n    plt.plot(t, x_hat_2_np, label='fixed')\r\n#     plt.plot(t, normalize(x_np), label='orig', linewidth=8)\r\n#     plt.plot(t, normalize(x_hat_np), label='default', linewidth=6)\r\n#     plt.plot(t, normalize(x_hat_2_np), label='fixed', linewidth=4)\r\n    plt.legend()\r\n\r\n```\r\n\r\n`frame_step == 8`:\r\n![frame_step8](https://user-images.githubusercontent.com/13744128/39106793-5e78d87a-46be-11e8-9e88-d0c101f4b8de.png)\r\n\r\n`frame_step == 16`:\r\n![frame_step16](https://user-images.githubusercontent.com/13744128/39106796-61da9b52-46be-11e8-8c1f-de64c10e4f2d.png)\r\n\r\nWhile the example with `frame_step == 8` introduces \"only\" a scaling error, the `frame_step == 16` example introduces distortions.\r\n\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: Name: tf-nightly\r\nVersion: 1.8.0.dev20180331\r\nSummary: TensorFlow helps the tensors flow\r\nHome-page: https://www.tensorflow.org/\r\nAuthor: Google Inc.\r\nAuthor-email: opensource@google.com\r\nLicense: Apache 2.0\r\nLocation: /opt/anaconda/lib/python3.6/site-packages\r\nRequires: grpcio, astor, gast, termcolor, six, absl-py, numpy, wheel, protobuf, tb-nightly\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n"}