{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/391271720", "html_url": "https://github.com/tensorflow/tensorflow/issues/2838#issuecomment-391271720", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2838", "id": 391271720, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTI3MTcyMA==", "user": {"login": "carlthome", "id": 1595907, "node_id": "MDQ6VXNlcjE1OTU5MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1595907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlthome", "html_url": "https://github.com/carlthome", "followers_url": "https://api.github.com/users/carlthome/followers", "following_url": "https://api.github.com/users/carlthome/following{/other_user}", "gists_url": "https://api.github.com/users/carlthome/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlthome/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlthome/subscriptions", "organizations_url": "https://api.github.com/users/carlthome/orgs", "repos_url": "https://api.github.com/users/carlthome/repos", "events_url": "https://api.github.com/users/carlthome/events{/privacy}", "received_events_url": "https://api.github.com/users/carlthome/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-23T08:52:17Z", "updated_at": "2018-05-23T08:52:23Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Here's a cleaner alternative relying more on <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a>'s <code>nest</code>:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> tensorflow.contrib.framework <span class=\"pl-k\">import</span> nest\n\nstate <span class=\"pl-k\">=</span> nest.map_structure(\n    <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: tf.placeholder_with_default(x, x.shape, x.op.name),\n    cell.zero_state(batch_size, tf.float32))\n\n<span class=\"pl-k\">for</span> tensor <span class=\"pl-k\">in</span> nest.flatten(state):\n    tf.add_to_collection(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>rnn_state_input<span class=\"pl-pds\">'</span></span>, tensor)\n\nx, new_state <span class=\"pl-k\">=</span> tf.nn.dynamic_rnn(<span class=\"pl-c1\">...</span>)\n\n<span class=\"pl-k\">for</span> tensor <span class=\"pl-k\">in</span> nest.flatten(new_state):\n    tf.add_to_collection(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>rnn_state_output<span class=\"pl-pds\">'</span></span>, tensor)</pre></div>", "body_text": "Here's a cleaner alternative relying more on @ebrevdo's nest:\nfrom tensorflow.contrib.framework import nest\n\nstate = nest.map_structure(\n    lambda x: tf.placeholder_with_default(x, x.shape, x.op.name),\n    cell.zero_state(batch_size, tf.float32))\n\nfor tensor in nest.flatten(state):\n    tf.add_to_collection('rnn_state_input', tensor)\n\nx, new_state = tf.nn.dynamic_rnn(...)\n\nfor tensor in nest.flatten(new_state):\n    tf.add_to_collection('rnn_state_output', tensor)", "body": "Here's a cleaner alternative relying more on @ebrevdo's `nest`:\r\n\r\n```python\r\nfrom tensorflow.contrib.framework import nest\r\n\r\nstate = nest.map_structure(\r\n    lambda x: tf.placeholder_with_default(x, x.shape, x.op.name),\r\n    cell.zero_state(batch_size, tf.float32))\r\n\r\nfor tensor in nest.flatten(state):\r\n    tf.add_to_collection('rnn_state_input', tensor)\r\n\r\nx, new_state = tf.nn.dynamic_rnn(...)\r\n\r\nfor tensor in nest.flatten(new_state):\r\n    tf.add_to_collection('rnn_state_output', tensor)\r\n```"}