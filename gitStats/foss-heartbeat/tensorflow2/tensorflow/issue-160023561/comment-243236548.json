{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/243236548", "html_url": "https://github.com/tensorflow/tensorflow/issues/2838#issuecomment-243236548", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2838", "id": 243236548, "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzIzNjU0OA==", "user": {"login": "danijar", "id": 2111293, "node_id": "MDQ6VXNlcjIxMTEyOTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2111293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danijar", "html_url": "https://github.com/danijar", "followers_url": "https://api.github.com/users/danijar/followers", "following_url": "https://api.github.com/users/danijar/following{/other_user}", "gists_url": "https://api.github.com/users/danijar/gists{/gist_id}", "starred_url": "https://api.github.com/users/danijar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danijar/subscriptions", "organizations_url": "https://api.github.com/users/danijar/orgs", "repos_url": "https://api.github.com/users/danijar/repos", "events_url": "https://api.github.com/users/danijar/events{/privacy}", "received_events_url": "https://api.github.com/users/danijar/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-29T19:56:56Z", "updated_at": "2016-08-29T19:58:18Z", "author_association": "MEMBER", "body_html": "<p>I'm current solving this by holding the state in a non-trainable variable that I initialize from the default state. The variable name is prefixed by <code>state/</code> and I have helper functions to return a dictionary from name to tensor containing all variables matching this prefix. Similarly, I have a helper function to assign variable values from this dictionary.</p>\n<p>This is a general way to handle context, but it's not straight forward using the existing TensorFlow features. Moreover, it doesn't work with the new decision to represent LSTM states as tuples.</p>\n<p>I can contribute code to TensorFlow for a feature like this, but we should think this through first, and see that it matches TensorFlow's preferred way to handle states.</p>", "body_text": "I'm current solving this by holding the state in a non-trainable variable that I initialize from the default state. The variable name is prefixed by state/ and I have helper functions to return a dictionary from name to tensor containing all variables matching this prefix. Similarly, I have a helper function to assign variable values from this dictionary.\nThis is a general way to handle context, but it's not straight forward using the existing TensorFlow features. Moreover, it doesn't work with the new decision to represent LSTM states as tuples.\nI can contribute code to TensorFlow for a feature like this, but we should think this through first, and see that it matches TensorFlow's preferred way to handle states.", "body": "I'm current solving this by holding the state in a non-trainable variable that I initialize from the default state. The variable name is prefixed by `state/` and I have helper functions to return a dictionary from name to tensor containing all variables matching this prefix. Similarly, I have a helper function to assign variable values from this dictionary.\n\nThis is a general way to handle context, but it's not straight forward using the existing TensorFlow features. Moreover, it doesn't work with the new decision to represent LSTM states as tuples.\n\nI can contribute code to TensorFlow for a feature like this, but we should think this through first, and see that it matches TensorFlow's preferred way to handle states.\n"}