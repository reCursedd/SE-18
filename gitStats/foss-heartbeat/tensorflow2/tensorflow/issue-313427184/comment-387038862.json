{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/387038862", "html_url": "https://github.com/tensorflow/tensorflow/issues/18429#issuecomment-387038862", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18429", "id": 387038862, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NzAzODg2Mg==", "user": {"login": "pwuertz", "id": 1819283, "node_id": "MDQ6VXNlcjE4MTkyODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1819283?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pwuertz", "html_url": "https://github.com/pwuertz", "followers_url": "https://api.github.com/users/pwuertz/followers", "following_url": "https://api.github.com/users/pwuertz/following{/other_user}", "gists_url": "https://api.github.com/users/pwuertz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pwuertz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pwuertz/subscriptions", "organizations_url": "https://api.github.com/users/pwuertz/orgs", "repos_url": "https://api.github.com/users/pwuertz/repos", "events_url": "https://api.github.com/users/pwuertz/events{/privacy}", "received_events_url": "https://api.github.com/users/pwuertz/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-07T11:40:58Z", "updated_at": "2018-05-07T11:40:58Z", "author_association": "NONE", "body_html": "<p>Ok so here is the basic idea of what I did. I was planning on adding the required bits to build TF on Ubuntu to the configure scripts but didn't have the time yet.. so here is my crude setup:</p>\n<p>Basically, the current TF build system only supports the CUDA development kit file/folder layout as given by the NVIDIA installer (e.g. the lib folder must be in <code>lib64/</code> relative to a CUDA base dir). The new Ubuntu packages (<code>nvidia-cuda-toolkit</code> and friends) however follow the distribution standard of splitting everything up into include, lib, bin. So I created a fake CUDA base dir with symlinks to all required dev files:</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ ls -l /usr/local/cuda-symlink/\ntotal 4\nlrwxrwxrwx 1 root root    8 Apr 24 11:33 bin -<span class=\"pl-k\">&gt;</span> /usr/bin\nlrwxrwxrwx 1 root root   12 Apr 24 11:24 include -<span class=\"pl-k\">&gt;</span> /usr/include\nlrwxrwxrwx 1 root root   25 Apr 24 11:21 lib64 -<span class=\"pl-k\">&gt;</span> /usr/lib/x86_64-linux-gnu\ndrwxr-xr-x 2 root root 4096 Apr 24 11:37 nvvm</pre></div>\n<div class=\"highlight highlight-source-shell\"><pre>$ ls -l /usr/local/cuda-symlink/nvvm\ntotal 0\nlrwxrwxrwx 1 root root 38 Apr 24 11:37 libdevice -<span class=\"pl-k\">&gt;</span> /usr/lib/nvidia-cuda-toolkit/libdevice</pre></div>\n<p>So now the folder <code>/usr/local/cuda-symlink</code> (almost) looks like a normal CUDA base directory to TF's configure, with the exception of the CUPTI header files. Luckily, TF already has a mechanism for providing alternative relative locations for those, so I just added the one for my approach:</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-c1\">diff --git a/third_party/gpus/cuda_configure.bzl b/third_party/gpus/cuda_configure.bzl</span>\nindex ede7e31897..14c7a363b9 100644\n<span class=\"pl-md\">--- a/third_party/gpus/cuda_configure.bzl</span>\n<span class=\"pl-mi1\">+++ b/third_party/gpus/cuda_configure.bzl</span>\n<span class=\"pl-mdr\">@@ -57,6 +57,7 @@</span> CUDA_LIB_PATHS = [\n # On most systems, the cupti library is not installed in the same directory as\n # the other CUDA libraries but rather in a special extras/CUPTI directory.\n CUPTI_HEADER_PATHS = [\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  \"include/\",</span>\n   \"extras/CUPTI/include/\",\n   \"include/cuda/CUPTI/\",\n ]</pre></div>\n<p>I guess for proper Ubuntu support you would rather add the path-alternatives feature that exists for CUPTI_HEADER_PATHS to other places in the build system too and enable building TF with <code>/usr</code> as CUDA base directory.</p>", "body_text": "Ok so here is the basic idea of what I did. I was planning on adding the required bits to build TF on Ubuntu to the configure scripts but didn't have the time yet.. so here is my crude setup:\nBasically, the current TF build system only supports the CUDA development kit file/folder layout as given by the NVIDIA installer (e.g. the lib folder must be in lib64/ relative to a CUDA base dir). The new Ubuntu packages (nvidia-cuda-toolkit and friends) however follow the distribution standard of splitting everything up into include, lib, bin. So I created a fake CUDA base dir with symlinks to all required dev files:\n$ ls -l /usr/local/cuda-symlink/\ntotal 4\nlrwxrwxrwx 1 root root    8 Apr 24 11:33 bin -> /usr/bin\nlrwxrwxrwx 1 root root   12 Apr 24 11:24 include -> /usr/include\nlrwxrwxrwx 1 root root   25 Apr 24 11:21 lib64 -> /usr/lib/x86_64-linux-gnu\ndrwxr-xr-x 2 root root 4096 Apr 24 11:37 nvvm\n$ ls -l /usr/local/cuda-symlink/nvvm\ntotal 0\nlrwxrwxrwx 1 root root 38 Apr 24 11:37 libdevice -> /usr/lib/nvidia-cuda-toolkit/libdevice\nSo now the folder /usr/local/cuda-symlink (almost) looks like a normal CUDA base directory to TF's configure, with the exception of the CUPTI header files. Luckily, TF already has a mechanism for providing alternative relative locations for those, so I just added the one for my approach:\ndiff --git a/third_party/gpus/cuda_configure.bzl b/third_party/gpus/cuda_configure.bzl\nindex ede7e31897..14c7a363b9 100644\n--- a/third_party/gpus/cuda_configure.bzl\n+++ b/third_party/gpus/cuda_configure.bzl\n@@ -57,6 +57,7 @@ CUDA_LIB_PATHS = [\n # On most systems, the cupti library is not installed in the same directory as\n # the other CUDA libraries but rather in a special extras/CUPTI directory.\n CUPTI_HEADER_PATHS = [\n+  \"include/\",\n   \"extras/CUPTI/include/\",\n   \"include/cuda/CUPTI/\",\n ]\nI guess for proper Ubuntu support you would rather add the path-alternatives feature that exists for CUPTI_HEADER_PATHS to other places in the build system too and enable building TF with /usr as CUDA base directory.", "body": "Ok so here is the basic idea of what I did. I was planning on adding the required bits to build TF on Ubuntu to the configure scripts but didn't have the time yet.. so here is my crude setup:\r\n\r\nBasically, the current TF build system only supports the CUDA development kit file/folder layout as given by the NVIDIA installer (e.g. the lib folder must be in `lib64/` relative to a CUDA base dir). The new Ubuntu packages (`nvidia-cuda-toolkit` and friends) however follow the distribution standard of splitting everything up into include, lib, bin. So I created a fake CUDA base dir with symlinks to all required dev files:\r\n```bash\r\n$ ls -l /usr/local/cuda-symlink/\r\ntotal 4\r\nlrwxrwxrwx 1 root root    8 Apr 24 11:33 bin -> /usr/bin\r\nlrwxrwxrwx 1 root root   12 Apr 24 11:24 include -> /usr/include\r\nlrwxrwxrwx 1 root root   25 Apr 24 11:21 lib64 -> /usr/lib/x86_64-linux-gnu\r\ndrwxr-xr-x 2 root root 4096 Apr 24 11:37 nvvm\r\n```\r\n\r\n```bash\r\n$ ls -l /usr/local/cuda-symlink/nvvm\r\ntotal 0\r\nlrwxrwxrwx 1 root root 38 Apr 24 11:37 libdevice -> /usr/lib/nvidia-cuda-toolkit/libdevice\r\n```\r\nSo now the folder `/usr/local/cuda-symlink` (almost) looks like a normal CUDA base directory to TF's configure, with the exception of the CUPTI header files. Luckily, TF already has a mechanism for providing alternative relative locations for those, so I just added the one for my approach:\r\n```diff\r\ndiff --git a/third_party/gpus/cuda_configure.bzl b/third_party/gpus/cuda_configure.bzl\r\nindex ede7e31897..14c7a363b9 100644\r\n--- a/third_party/gpus/cuda_configure.bzl\r\n+++ b/third_party/gpus/cuda_configure.bzl\r\n@@ -57,6 +57,7 @@ CUDA_LIB_PATHS = [\r\n # On most systems, the cupti library is not installed in the same directory as\r\n # the other CUDA libraries but rather in a special extras/CUPTI directory.\r\n CUPTI_HEADER_PATHS = [\r\n+  \"include/\",\r\n   \"extras/CUPTI/include/\",\r\n   \"include/cuda/CUPTI/\",\r\n ]\r\n```\r\n\r\nI guess for proper Ubuntu support you would rather add the path-alternatives feature that exists for CUPTI_HEADER_PATHS to other places in the build system too and enable building TF with `/usr` as CUDA base directory."}