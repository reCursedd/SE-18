{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/356045744", "html_url": "https://github.com/tensorflow/tensorflow/issues/7868#issuecomment-356045744", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7868", "id": 356045744, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjA0NTc0NA==", "user": {"login": "makoeppel", "id": 15772570, "node_id": "MDQ6VXNlcjE1NzcyNTcw", "avatar_url": "https://avatars3.githubusercontent.com/u/15772570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/makoeppel", "html_url": "https://github.com/makoeppel", "followers_url": "https://api.github.com/users/makoeppel/followers", "following_url": "https://api.github.com/users/makoeppel/following{/other_user}", "gists_url": "https://api.github.com/users/makoeppel/gists{/gist_id}", "starred_url": "https://api.github.com/users/makoeppel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/makoeppel/subscriptions", "organizations_url": "https://api.github.com/users/makoeppel/orgs", "repos_url": "https://api.github.com/users/makoeppel/repos", "events_url": "https://api.github.com/users/makoeppel/events{/privacy}", "received_events_url": "https://api.github.com/users/makoeppel/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-08T18:06:13Z", "updated_at": "2018-01-08T18:19:30Z", "author_association": "NONE", "body_html": "<p>For one of my projects I created a gridsearch similar to the one from  scikit-learn (<a href=\"http://scikit-learn.org/stable/modules/grid_search.html\" rel=\"nofollow\">http://scikit-learn.org/stable/modules/grid_search.html</a>).</p>\n<p>You can have a look at <a href=\"https://github.com/makoeppel/hyperParameterSearchTF/tree/master\">https://github.com/makoeppel/hyperParameterSearchTF/tree/master</a><br>\n--&gt; Please take in mind that for now the classes are not filled with a specific model and the repo is still under contraction (I will add a mnist example soon). If you want to test it you just need to fill the empty classes with your specific model.</p>\n<p><strong>The program works like this:</strong></p>\n<p>The idea here is that you configure your search in the main.py. There you load your someClf.clfHandler and your evaluator.evaluatorHandler. With some default values. In the example code it is:</p>\n<p><code>someClf = someClf.clfHandler(outputDir, outputName, layers=[5, 5, 1], feature_func=difference, weight_func=summed_weight, cost_func=weighted_least_square, optimizer=tf.train.AdamOptimizer(0.01), activation=tf.nn.tanh, use_bias=False, kernel_initializer=tf.random_normal_initializer(), steps=20, max_iters=2000, n_samples=1000, max_samples=3000)</code></p>\n<p>and</p>\n<p><code>clfEvaluator = evaluator.evalHandler(inputDir=outputDir, inputName=outputName, feature_func=difference, weight_func=summed_weight )</code></p>\n<p>After this you pass everything to the multimodelsearch.MultiModelSearch. This class will generate for every parameter in your parameter dict clfHandler and evalHandler classes with the default values and will replace the default ones  with the ones from the dict.</p>\n<p>The function MultiModelSearch.fit_and_eval() is using the multiprocessing library and will train and evaluate all generated models and after this it will return a dict with the results.</p>\n<p>At the end I used this file (<a href=\"http://scikit-learn.org/stable/auto_examples/model_selection/plot_multi_metric_evaluation.html#sphx-glr-auto-examples-model-selection-plot-multi-metric-evaluation-py\" rel=\"nofollow\">http://scikit-learn.org/stable/auto_examples/model_selection/plot_multi_metric_evaluation.html#sphx-glr-auto-examples-model-selection-plot-multi-metric-evaluation-py</a>) for plotting the results.</p>\n<p>If you need more informations please ask me. I am open for contribution.</p>", "body_text": "For one of my projects I created a gridsearch similar to the one from  scikit-learn (http://scikit-learn.org/stable/modules/grid_search.html).\nYou can have a look at https://github.com/makoeppel/hyperParameterSearchTF/tree/master\n--> Please take in mind that for now the classes are not filled with a specific model and the repo is still under contraction (I will add a mnist example soon). If you want to test it you just need to fill the empty classes with your specific model.\nThe program works like this:\nThe idea here is that you configure your search in the main.py. There you load your someClf.clfHandler and your evaluator.evaluatorHandler. With some default values. In the example code it is:\nsomeClf = someClf.clfHandler(outputDir, outputName, layers=[5, 5, 1], feature_func=difference, weight_func=summed_weight, cost_func=weighted_least_square, optimizer=tf.train.AdamOptimizer(0.01), activation=tf.nn.tanh, use_bias=False, kernel_initializer=tf.random_normal_initializer(), steps=20, max_iters=2000, n_samples=1000, max_samples=3000)\nand\nclfEvaluator = evaluator.evalHandler(inputDir=outputDir, inputName=outputName, feature_func=difference, weight_func=summed_weight )\nAfter this you pass everything to the multimodelsearch.MultiModelSearch. This class will generate for every parameter in your parameter dict clfHandler and evalHandler classes with the default values and will replace the default ones  with the ones from the dict.\nThe function MultiModelSearch.fit_and_eval() is using the multiprocessing library and will train and evaluate all generated models and after this it will return a dict with the results.\nAt the end I used this file (http://scikit-learn.org/stable/auto_examples/model_selection/plot_multi_metric_evaluation.html#sphx-glr-auto-examples-model-selection-plot-multi-metric-evaluation-py) for plotting the results.\nIf you need more informations please ask me. I am open for contribution.", "body": "For one of my projects I created a gridsearch similar to the one from  scikit-learn (http://scikit-learn.org/stable/modules/grid_search.html).\r\n\r\nYou can have a look at https://github.com/makoeppel/hyperParameterSearchTF/tree/master\r\n--> Please take in mind that for now the classes are not filled with a specific model and the repo is still under contraction (I will add a mnist example soon). If you want to test it you just need to fill the empty classes with your specific model.\r\n\r\n**The program works like this:**\r\n\r\nThe idea here is that you configure your search in the main.py. There you load your someClf.clfHandler and your evaluator.evaluatorHandler. With some default values. In the example code it is: \r\n\r\n`someClf = someClf.clfHandler(outputDir, outputName, layers=[5, 5, 1], feature_func=difference,\r\n                                         weight_func=summed_weight, cost_func=weighted_least_square,\r\n                                         optimizer=tf.train.AdamOptimizer(0.01), activation=tf.nn.tanh,\r\n                                         use_bias=False, kernel_initializer=tf.random_normal_initializer(),\r\n                                         steps=20, max_iters=2000, n_samples=1000, max_samples=3000)`\r\n\r\nand \r\n\r\n`clfEvaluator = evaluator.evalHandler(inputDir=outputDir,\r\n                                         inputName=outputName,\r\n                                         feature_func=difference,\r\n                                         weight_func=summed_weight\r\n                                         )`\r\n\r\nAfter this you pass everything to the multimodelsearch.MultiModelSearch. This class will generate for every parameter in your parameter dict clfHandler and evalHandler classes with the default values and will replace the default ones  with the ones from the dict.\r\n\r\nThe function MultiModelSearch.fit_and_eval() is using the multiprocessing library and will train and evaluate all generated models and after this it will return a dict with the results. \r\n\r\nAt the end I used this file (http://scikit-learn.org/stable/auto_examples/model_selection/plot_multi_metric_evaluation.html#sphx-glr-auto-examples-model-selection-plot-multi-metric-evaluation-py) for plotting the results. \r\n\r\nIf you need more informations please ask me. I am open for contribution.\r\n\r\n  \r\n  "}