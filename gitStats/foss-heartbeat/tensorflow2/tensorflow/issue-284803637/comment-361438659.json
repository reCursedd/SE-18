{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/361438659", "html_url": "https://github.com/tensorflow/tensorflow/issues/15669#issuecomment-361438659", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15669", "id": 361438659, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTQzODY1OQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-30T00:50:05Z", "updated_at": "2018-01-30T00:50:05Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>Does it do a deep copy of the old graph+weights but persists the unoptimized graph somewhere?</p>\n</blockquote>\n<p>Yes, it does. There's currently no API to release the unoptimized graph, which must be kept around because the Session API allows the user to execute node in the graph. The current <code>ConstantOp</code> implementation also keeps two copies of the constant data in memory, in the <code>NodeDef</code> and in a <code>Tensor</code> object.</p>\n<p>To avoid this blowup in memory consumption, you might be better off using the <a href=\"https://github.com/tensorflow/tensorflow/blob/4ab2d8531c461169cd6a33bc0fef1129b419e9df/tensorflow/contrib/util/convert_graphdef_memmapped_format_lib.h#L28\"><code>ConvertConstantsToImmutable()</code> utility</a>, which removes large constants from the graph and replaces them with a mmappable form.</p>\n<p>/cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7946809\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gunan\">@gunan</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=326106\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/aselle\">@aselle</a></p>", "body_text": "Does it do a deep copy of the old graph+weights but persists the unoptimized graph somewhere?\n\nYes, it does. There's currently no API to release the unoptimized graph, which must be kept around because the Session API allows the user to execute node in the graph. The current ConstantOp implementation also keeps two copies of the constant data in memory, in the NodeDef and in a Tensor object.\nTo avoid this blowup in memory consumption, you might be better off using the ConvertConstantsToImmutable() utility, which removes large constants from the graph and replaces them with a mmappable form.\n/cc @gunan @aselle", "body": "> Does it do a deep copy of the old graph+weights but persists the unoptimized graph somewhere?\r\n\r\nYes, it does. There's currently no API to release the unoptimized graph, which must be kept around because the Session API allows the user to execute node in the graph. The current `ConstantOp` implementation also keeps two copies of the constant data in memory, in the `NodeDef` and in a `Tensor` object.\r\n\r\nTo avoid this blowup in memory consumption, you might be better off using the [`ConvertConstantsToImmutable()` utility](https://github.com/tensorflow/tensorflow/blob/4ab2d8531c461169cd6a33bc0fef1129b419e9df/tensorflow/contrib/util/convert_graphdef_memmapped_format_lib.h#L28), which removes large constants from the graph and replaces them with a mmappable form.\r\n\r\n/cc @gunan @aselle "}