{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15669", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15669/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15669/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15669/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15669", "id": 284803637, "node_id": "MDU6SXNzdWUyODQ4MDM2Mzc=", "number": 15669, "title": "Session::Run() allocates a lot of memory after the first call", "user": {"login": "zo7", "id": 3229244, "node_id": "MDQ6VXNlcjMyMjkyNDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3229244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zo7", "html_url": "https://github.com/zo7", "followers_url": "https://api.github.com/users/zo7/followers", "following_url": "https://api.github.com/users/zo7/following{/other_user}", "gists_url": "https://api.github.com/users/zo7/gists{/gist_id}", "starred_url": "https://api.github.com/users/zo7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zo7/subscriptions", "organizations_url": "https://api.github.com/users/zo7/orgs", "repos_url": "https://api.github.com/users/zo7/repos", "events_url": "https://api.github.com/users/zo7/events{/privacy}", "received_events_url": "https://api.github.com/users/zo7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-12-27T22:03:04Z", "updated_at": "2018-02-06T23:53:06Z", "closed_at": "2018-02-06T23:35:58Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: macOS Sierra 10.12.6</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary (<a href=\"https://www.tensorflow.org/install/install_c\" rel=\"nofollow\">CPU C API</a>)</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4.0</li>\n<li><strong>Python version</strong>: N/A</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I am working on an application that deploys several TensorFlow models using TensorFlow's C API. I have noticed that there seems to be a behavior where TensorFlow takes a long time to run the first time <code>TF_SessionRun()</code> is called, and it allocates a lot of extra memory that hangs around until the session is destroyed. In my case, my program's memory footprint is ~85MB after all of the models are loaded (which makes sense, that's about how large the model .pb files are on disk) but after the first call to <code>TF_SessionRun()</code> it jumps to ~250MB. After profiling my code it appears that TensorFlow is the culprit, and I've observed similar behavior on Android as well.</p>\n<p>TensorFlow seems to be doing some lazy initialization, but there doesn't appear to be much documentation or discussion about this. Could someone shed some light on what is happening here? Why does it require so much memory? Is this a bug or expected behavior?</p>\n<h3>Source code / logs</h3>\n<p>Here's a memory call tree from Xcode showing <em>persistent</em> memory allocations after the first call to <code>TF_SessionRun()</code> for one of my models:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/3229244/34394457-1af8625c-eb0e-11e7-8cd8-ff61737dcb50.png\"><img width=\"996\" alt=\"screen shot 2017-12-27 at 1 14 59 pm\" src=\"https://user-images.githubusercontent.com/3229244/34394457-1af8625c-eb0e-11e7-8cd8-ff61737dcb50.png\" style=\"max-width:100%;\"></a></p>\n<p>Let me know if there is any more information that I can provide. I'm curious what's going on here.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Sierra 10.12.6\nTensorFlow installed from (source or binary): Binary (CPU C API)\nTensorFlow version (use command below): 1.4.0\nPython version: N/A\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A\n\nDescribe the problem\nI am working on an application that deploys several TensorFlow models using TensorFlow's C API. I have noticed that there seems to be a behavior where TensorFlow takes a long time to run the first time TF_SessionRun() is called, and it allocates a lot of extra memory that hangs around until the session is destroyed. In my case, my program's memory footprint is ~85MB after all of the models are loaded (which makes sense, that's about how large the model .pb files are on disk) but after the first call to TF_SessionRun() it jumps to ~250MB. After profiling my code it appears that TensorFlow is the culprit, and I've observed similar behavior on Android as well.\nTensorFlow seems to be doing some lazy initialization, but there doesn't appear to be much documentation or discussion about this. Could someone shed some light on what is happening here? Why does it require so much memory? Is this a bug or expected behavior?\nSource code / logs\nHere's a memory call tree from Xcode showing persistent memory allocations after the first call to TF_SessionRun() for one of my models:\n\nLet me know if there is any more information that I can provide. I'm curious what's going on here.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: macOS Sierra 10.12.6\r\n- **TensorFlow installed from (source or binary)**: Binary ([CPU C API](https://www.tensorflow.org/install/install_c))\r\n- **TensorFlow version (use command below)**: 1.4.0\r\n- **Python version**: N/A\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: N/A\r\n\r\n### Describe the problem\r\n\r\nI am working on an application that deploys several TensorFlow models using TensorFlow's C API. I have noticed that there seems to be a behavior where TensorFlow takes a long time to run the first time `TF_SessionRun()` is called, and it allocates a lot of extra memory that hangs around until the session is destroyed. In my case, my program's memory footprint is ~85MB after all of the models are loaded (which makes sense, that's about how large the model .pb files are on disk) but after the first call to `TF_SessionRun()` it jumps to ~250MB. After profiling my code it appears that TensorFlow is the culprit, and I've observed similar behavior on Android as well.\r\n\r\nTensorFlow seems to be doing some lazy initialization, but there doesn't appear to be much documentation or discussion about this. Could someone shed some light on what is happening here? Why does it require so much memory? Is this a bug or expected behavior?\r\n\r\n### Source code / logs\r\n\r\nHere's a memory call tree from Xcode showing *persistent* memory allocations after the first call to `TF_SessionRun()` for one of my models:\r\n\r\n<img width=\"996\" alt=\"screen shot 2017-12-27 at 1 14 59 pm\" src=\"https://user-images.githubusercontent.com/3229244/34394457-1af8625c-eb0e-11e7-8cd8-ff61737dcb50.png\">\r\n\r\nLet me know if there is any more information that I can provide. I'm curious what's going on here."}