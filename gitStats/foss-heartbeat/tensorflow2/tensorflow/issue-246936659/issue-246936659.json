{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11927", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11927/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11927/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11927/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/11927", "id": 246936659, "node_id": "MDExOlB1bGxSZXF1ZXN0MTMzMzc1NDU3", "number": 11927, "title": "Add bool type supports for GPU kernels", "user": {"login": "taehoonlee", "id": 4445535, "node_id": "MDQ6VXNlcjQ0NDU1MzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/4445535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taehoonlee", "html_url": "https://github.com/taehoonlee", "followers_url": "https://api.github.com/users/taehoonlee/followers", "following_url": "https://api.github.com/users/taehoonlee/following{/other_user}", "gists_url": "https://api.github.com/users/taehoonlee/gists{/gist_id}", "starred_url": "https://api.github.com/users/taehoonlee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taehoonlee/subscriptions", "organizations_url": "https://api.github.com/users/taehoonlee/orgs", "repos_url": "https://api.github.com/users/taehoonlee/repos", "events_url": "https://api.github.com/users/taehoonlee/events{/privacy}", "received_events_url": "https://api.github.com/users/taehoonlee/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ekelsen", "id": 2533174, "node_id": "MDQ6VXNlcjI1MzMxNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2533174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekelsen", "html_url": "https://github.com/ekelsen", "followers_url": "https://api.github.com/users/ekelsen/followers", "following_url": "https://api.github.com/users/ekelsen/following{/other_user}", "gists_url": "https://api.github.com/users/ekelsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekelsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekelsen/subscriptions", "organizations_url": "https://api.github.com/users/ekelsen/orgs", "repos_url": "https://api.github.com/users/ekelsen/repos", "events_url": "https://api.github.com/users/ekelsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ekelsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ekelsen", "id": 2533174, "node_id": "MDQ6VXNlcjI1MzMxNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2533174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekelsen", "html_url": "https://github.com/ekelsen", "followers_url": "https://api.github.com/users/ekelsen/followers", "following_url": "https://api.github.com/users/ekelsen/following{/other_user}", "gists_url": "https://api.github.com/users/ekelsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekelsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekelsen/subscriptions", "organizations_url": "https://api.github.com/users/ekelsen/orgs", "repos_url": "https://api.github.com/users/ekelsen/repos", "events_url": "https://api.github.com/users/ekelsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ekelsen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2017-08-01T02:20:18Z", "updated_at": "2017-08-11T04:14:52Z", "closed_at": "2017-08-11T04:00:13Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11927", "html_url": "https://github.com/tensorflow/tensorflow/pull/11927", "diff_url": "https://github.com/tensorflow/tensorflow/pull/11927.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/11927.patch"}, "body_html": "<p>This PR adds bool type supports for GPU kernels (<code>reshape</code>, <code>concat</code>, and <code>stack</code>). The problem is originally described in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"244798375\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/11676\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/11676/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/11676\">#11676</a>. Following is a minimum code snippet, which runs on CPU but not on GPU:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\na <span class=\"pl-k\">=</span> tf.placeholder(tf.bool, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>])\nb <span class=\"pl-k\">=</span> tf.placeholder(tf.bool, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>])\n<span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/gpu:0<span class=\"pl-pds\">'</span></span>):\n    <span class=\"pl-k\">try</span>:\n        <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n            result <span class=\"pl-k\">=</span> tf.reshape(a, [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">4</span>])\n            sess.run(tf.global_variables_initializer())\n    <span class=\"pl-k\">except</span> <span class=\"pl-c1\">Exception</span> <span class=\"pl-k\">as</span> e:\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>---reshape---<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">str</span>(e))\n    <span class=\"pl-k\">try</span>:\n        <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n            result <span class=\"pl-k\">=</span> tf.concat([a, b], <span class=\"pl-c1\">0</span>)\n            sess.run(tf.global_variables_initializer())\n    <span class=\"pl-k\">except</span> <span class=\"pl-c1\">Exception</span> <span class=\"pl-k\">as</span> e:\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>---concat---<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">str</span>(e))\n    <span class=\"pl-k\">try</span>:\n        <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n            result <span class=\"pl-k\">=</span> tf.stack([a, b], <span class=\"pl-c1\">1</span>)\n            sess.run(tf.global_variables_initializer())\n    <span class=\"pl-k\">except</span> <span class=\"pl-c1\">Exception</span> <span class=\"pl-k\">as</span> e:\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>---stack---<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">str</span>(e))</pre></div>\n<p>As far as I know, there is no reason not to have boolean supports for these operations. Thus I propose the boolean supports.</p>", "body_text": "This PR adds bool type supports for GPU kernels (reshape, concat, and stack). The problem is originally described in #11676. Following is a minimum code snippet, which runs on CPU but not on GPU:\nimport tensorflow as tf\nimport numpy as np\na = tf.placeholder(tf.bool, shape=[2, 2])\nb = tf.placeholder(tf.bool, shape=[2, 2])\nwith tf.device('/gpu:0'):\n    try:\n        with tf.Session() as sess:\n            result = tf.reshape(a, [1, 4])\n            sess.run(tf.global_variables_initializer())\n    except Exception as e:\n        print('---reshape---\\n' + str(e))\n    try:\n        with tf.Session() as sess:\n            result = tf.concat([a, b], 0)\n            sess.run(tf.global_variables_initializer())\n    except Exception as e:\n        print('---concat---\\n' + str(e))\n    try:\n        with tf.Session() as sess:\n            result = tf.stack([a, b], 1)\n            sess.run(tf.global_variables_initializer())\n    except Exception as e:\n        print('---stack---\\n' + str(e))\nAs far as I know, there is no reason not to have boolean supports for these operations. Thus I propose the boolean supports.", "body": "This PR adds bool type supports for GPU kernels (`reshape`, `concat`, and `stack`). The problem is originally described in #11676. Following is a minimum code snippet, which runs on CPU but not on GPU:\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\na = tf.placeholder(tf.bool, shape=[2, 2])\r\nb = tf.placeholder(tf.bool, shape=[2, 2])\r\nwith tf.device('/gpu:0'):\r\n    try:\r\n        with tf.Session() as sess:\r\n            result = tf.reshape(a, [1, 4])\r\n            sess.run(tf.global_variables_initializer())\r\n    except Exception as e:\r\n        print('---reshape---\\n' + str(e))\r\n    try:\r\n        with tf.Session() as sess:\r\n            result = tf.concat([a, b], 0)\r\n            sess.run(tf.global_variables_initializer())\r\n    except Exception as e:\r\n        print('---concat---\\n' + str(e))\r\n    try:\r\n        with tf.Session() as sess:\r\n            result = tf.stack([a, b], 1)\r\n            sess.run(tf.global_variables_initializer())\r\n    except Exception as e:\r\n        print('---stack---\\n' + str(e))\r\n```\r\n\r\nAs far as I know, there is no reason not to have boolean supports for these operations. Thus I propose the boolean supports."}