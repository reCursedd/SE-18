{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/406457307", "html_url": "https://github.com/tensorflow/tensorflow/issues/20983#issuecomment-406457307", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20983", "id": 406457307, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjQ1NzMwNw==", "user": {"login": "sabhiram", "id": 2693144, "node_id": "MDQ6VXNlcjI2OTMxNDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2693144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sabhiram", "html_url": "https://github.com/sabhiram", "followers_url": "https://api.github.com/users/sabhiram/followers", "following_url": "https://api.github.com/users/sabhiram/following{/other_user}", "gists_url": "https://api.github.com/users/sabhiram/gists{/gist_id}", "starred_url": "https://api.github.com/users/sabhiram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sabhiram/subscriptions", "organizations_url": "https://api.github.com/users/sabhiram/orgs", "repos_url": "https://api.github.com/users/sabhiram/repos", "events_url": "https://api.github.com/users/sabhiram/events{/privacy}", "received_events_url": "https://api.github.com/users/sabhiram/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-20T00:57:08Z", "updated_at": "2018-07-20T00:57:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For what its worth, I think this would be easy enough to fix in the <code>core.ops.script_ops.py</code> file by keeping track of the tf output types when the py_func gets registered (similar to how <code>EagerFunc</code>s are stored).</p>\n<p>Then during graph exec time, after we have results in an array (or scalar) - we can query the Tout list and convert to ndarrays correctly.  I was able to crudely implement this just to unblock my use case.</p>\n<p>One other w/a from the client side is to be explicit with the list in the py_func like so:</p>\n<pre><code>def test_func(x):\n    arr = np.array([], dtype=np.int64)\n    for i in range(x):\n        arr = np.append(arr, i)\n    return arr,\n</code></pre>", "body_text": "For what its worth, I think this would be easy enough to fix in the core.ops.script_ops.py file by keeping track of the tf output types when the py_func gets registered (similar to how EagerFuncs are stored).\nThen during graph exec time, after we have results in an array (or scalar) - we can query the Tout list and convert to ndarrays correctly.  I was able to crudely implement this just to unblock my use case.\nOne other w/a from the client side is to be explicit with the list in the py_func like so:\ndef test_func(x):\n    arr = np.array([], dtype=np.int64)\n    for i in range(x):\n        arr = np.append(arr, i)\n    return arr,", "body": "For what its worth, I think this would be easy enough to fix in the `core.ops.script_ops.py` file by keeping track of the tf output types when the py_func gets registered (similar to how `EagerFunc`s are stored). \r\n\r\nThen during graph exec time, after we have results in an array (or scalar) - we can query the Tout list and convert to ndarrays correctly.  I was able to crudely implement this just to unblock my use case.\r\n\r\nOne other w/a from the client side is to be explicit with the list in the py_func like so:\r\n```\r\ndef test_func(x):\r\n    arr = np.array([], dtype=np.int64)\r\n    for i in range(x):\r\n        arr = np.append(arr, i)\r\n    return arr,\r\n```\r\n"}