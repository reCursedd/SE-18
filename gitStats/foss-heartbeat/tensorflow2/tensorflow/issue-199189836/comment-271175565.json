{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/271175565", "html_url": "https://github.com/tensorflow/tensorflow/issues/6692#issuecomment-271175565", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6692", "id": 271175565, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTE3NTU2NQ==", "user": {"login": "szb0", "id": 12994143, "node_id": "MDQ6VXNlcjEyOTk0MTQz", "avatar_url": "https://avatars3.githubusercontent.com/u/12994143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/szb0", "html_url": "https://github.com/szb0", "followers_url": "https://api.github.com/users/szb0/followers", "following_url": "https://api.github.com/users/szb0/following{/other_user}", "gists_url": "https://api.github.com/users/szb0/gists{/gist_id}", "starred_url": "https://api.github.com/users/szb0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/szb0/subscriptions", "organizations_url": "https://api.github.com/users/szb0/orgs", "repos_url": "https://api.github.com/users/szb0/repos", "events_url": "https://api.github.com/users/szb0/events{/privacy}", "received_events_url": "https://api.github.com/users/szb0/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-08T20:07:08Z", "updated_at": "2017-01-08T20:07:08Z", "author_association": "NONE", "body_html": "<p>Basically a way to easily apply binary masks to the gradients for each parameter matrix/vector. In particular a nice to have would be a way that allows for a sparse representation of the masks (non-zero or zero indices). I think this is already possible to do if you make a modification between the optimizers compute_gradients and apply_gradients call. Maybe just by defining placeholders for the indices at that will be zeroed out at each step and applying these masks to the gradients before applying them.</p>", "body_text": "Basically a way to easily apply binary masks to the gradients for each parameter matrix/vector. In particular a nice to have would be a way that allows for a sparse representation of the masks (non-zero or zero indices). I think this is already possible to do if you make a modification between the optimizers compute_gradients and apply_gradients call. Maybe just by defining placeholders for the indices at that will be zeroed out at each step and applying these masks to the gradients before applying them.", "body": "Basically a way to easily apply binary masks to the gradients for each parameter matrix/vector. In particular a nice to have would be a way that allows for a sparse representation of the masks (non-zero or zero indices). I think this is already possible to do if you make a modification between the optimizers compute_gradients and apply_gradients call. Maybe just by defining placeholders for the indices at that will be zeroed out at each step and applying these masks to the gradients before applying them. "}