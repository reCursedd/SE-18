{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23176", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23176/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23176/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23176/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23176", "id": 372758478, "node_id": "MDU6SXNzdWUzNzI3NTg0Nzg=", "number": 23176, "title": "keras.layers.Concatenate could support list inputs with length 1", "user": {"login": "hartikainen", "id": 2308543, "node_id": "MDQ6VXNlcjIzMDg1NDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2308543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hartikainen", "html_url": "https://github.com/hartikainen", "followers_url": "https://api.github.com/users/hartikainen/followers", "following_url": "https://api.github.com/users/hartikainen/following{/other_user}", "gists_url": "https://api.github.com/users/hartikainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/hartikainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hartikainen/subscriptions", "organizations_url": "https://api.github.com/users/hartikainen/orgs", "repos_url": "https://api.github.com/users/hartikainen/repos", "events_url": "https://api.github.com/users/hartikainen/events{/privacy}", "received_events_url": "https://api.github.com/users/hartikainen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1097546578, "node_id": "MDU6TGFiZWwxMDk3NTQ2NTc4", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:keras", "name": "comp:keras", "color": "0052cc", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-10-23T00:56:01Z", "updated_at": "2018-11-22T18:59:56Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>TensorFlow version (you are using):</li>\n</ul>\n<pre><code>$ pip freeze | grep tensorflow\ntensorflow==1.12.0rc1\ntensorflow-estimator==1.10.12\n</code></pre>\n<ul>\n<li>Are you willing to contribute it (Yes/No): Yes</li>\n</ul>\n<p><strong>Describe the feature and the current behavior/state.</strong><br>\nCurrently, the <code>tf.keras.layers.Concatenate</code> only supports <a href=\"https://github.com/tensorflow/tensorflow/blob/e5c17aef836f8b85591cdcae31fbb66ddcf8185a/tensorflow/python/keras/layers/merge.py#L378\">list inputs with length &gt;= 2</a>.</p>\n<p>Considering that the vanilla <code>tf.concat</code> works with inputs of length 1, it would be nice if the keras layers implemented the same behavior.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_tensorflow_concatenate</span>(<span class=\"pl-smi\">inputs</span>):\n    tf.concat(inputs, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tf.concat works with <span class=\"pl-c1\">{}</span> inputs<span class=\"pl-pds\">\"</span></span>.format(<span class=\"pl-c1\">len</span>(inputs)))\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_concatenate_layer_with_inputs</span>(<span class=\"pl-smi\">inputs</span>):\n    model <span class=\"pl-k\">=</span> tf.keras.Sequential((\n        tf.keras.layers.Concatenate(<span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>),\n        tf.keras.layers.Dense(<span class=\"pl-c1\">32</span>)))\n\n    feed_dict <span class=\"pl-k\">=</span> {\n        input_: np.random.uniform(\n            <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, (<span class=\"pl-c1\">3</span>, <span class=\"pl-k\">*</span>input_.shape[<span class=\"pl-c1\">1</span>:].as_list()))\n        <span class=\"pl-k\">for</span> input_ <span class=\"pl-k\">in</span> inputs\n    }\n    output <span class=\"pl-k\">=</span> model(inputs)\n    output_eval <span class=\"pl-k\">=</span> tf.keras.backend.get_session().run(\n        output, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>feed_dict)\n    output_np <span class=\"pl-k\">=</span> model.predict([feed_dict[key] <span class=\"pl-k\">for</span> key <span class=\"pl-k\">in</span> inputs])\n\n    <span class=\"pl-k\">assert</span> np.allclose(output_eval, output_np)\n\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tf.keras.layers.Concatenate with <span class=\"pl-c1\">{}</span> inputs<span class=\"pl-pds\">\"</span></span>.format(<span class=\"pl-c1\">len</span>(inputs)))\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>():\n    input1 <span class=\"pl-k\">=</span> tf.keras.layers.Input((<span class=\"pl-c1\">1</span>, ))\n    input2 <span class=\"pl-k\">=</span> tf.keras.layers.Input((<span class=\"pl-c1\">2</span>, ))\n\n    test_tensorflow_concatenate([input1, input2])\n    test_tensorflow_concatenate([input1])\n\n    test_concatenate_layer_with_inputs([input1, input2])\n    test_concatenate_layer_with_inputs([input1])\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    main()</pre></div>\n<p><strong>Will this change the current api? How?</strong><br>\nNo ValueErrors would be raised when calling the <code>tf.keras.layers.Concatenate</code> with input list of length 1.</p>\n<p><strong>Who will benefit with this feature?</strong><br>\nAnyone who dynamically creates multi-input/-output keras models.</p>\n<p><strong>Any Other info.</strong><br>\nn/a</p>", "body_text": "System information\n\nTensorFlow version (you are using):\n\n$ pip freeze | grep tensorflow\ntensorflow==1.12.0rc1\ntensorflow-estimator==1.10.12\n\n\nAre you willing to contribute it (Yes/No): Yes\n\nDescribe the feature and the current behavior/state.\nCurrently, the tf.keras.layers.Concatenate only supports list inputs with length >= 2.\nConsidering that the vanilla tf.concat works with inputs of length 1, it would be nice if the keras layers implemented the same behavior.\nimport numpy as np\nimport tensorflow as tf\n\n\ndef test_tensorflow_concatenate(inputs):\n    tf.concat(inputs, axis=-1)\n\n    print(\"tf.concat works with {} inputs\".format(len(inputs)))\n\n\ndef test_concatenate_layer_with_inputs(inputs):\n    model = tf.keras.Sequential((\n        tf.keras.layers.Concatenate(axis=-1),\n        tf.keras.layers.Dense(32)))\n\n    feed_dict = {\n        input_: np.random.uniform(\n            0, 1, (3, *input_.shape[1:].as_list()))\n        for input_ in inputs\n    }\n    output = model(inputs)\n    output_eval = tf.keras.backend.get_session().run(\n        output, feed_dict=feed_dict)\n    output_np = model.predict([feed_dict[key] for key in inputs])\n\n    assert np.allclose(output_eval, output_np)\n\n    print(\"tf.keras.layers.Concatenate with {} inputs\".format(len(inputs)))\n\n\ndef main():\n    input1 = tf.keras.layers.Input((1, ))\n    input2 = tf.keras.layers.Input((2, ))\n\n    test_tensorflow_concatenate([input1, input2])\n    test_tensorflow_concatenate([input1])\n\n    test_concatenate_layer_with_inputs([input1, input2])\n    test_concatenate_layer_with_inputs([input1])\n\n\nif __name__ == '__main__':\n    main()\nWill this change the current api? How?\nNo ValueErrors would be raised when calling the tf.keras.layers.Concatenate with input list of length 1.\nWho will benefit with this feature?\nAnyone who dynamically creates multi-input/-output keras models.\nAny Other info.\nn/a", "body": "**System information**\r\n- TensorFlow version (you are using):\r\n```\r\n$ pip freeze | grep tensorflow\r\ntensorflow==1.12.0rc1\r\ntensorflow-estimator==1.10.12\r\n```\r\n- Are you willing to contribute it (Yes/No): Yes\r\n\r\n**Describe the feature and the current behavior/state.**\r\nCurrently, the `tf.keras.layers.Concatenate` only supports [list inputs with length >= 2](https://github.com/tensorflow/tensorflow/blob/e5c17aef836f8b85591cdcae31fbb66ddcf8185a/tensorflow/python/keras/layers/merge.py#L378).\r\n\r\nConsidering that the vanilla `tf.concat` works with inputs of length 1, it would be nice if the keras layers implemented the same behavior.\r\n\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n\r\ndef test_tensorflow_concatenate(inputs):\r\n    tf.concat(inputs, axis=-1)\r\n\r\n    print(\"tf.concat works with {} inputs\".format(len(inputs)))\r\n\r\n\r\ndef test_concatenate_layer_with_inputs(inputs):\r\n    model = tf.keras.Sequential((\r\n        tf.keras.layers.Concatenate(axis=-1),\r\n        tf.keras.layers.Dense(32)))\r\n\r\n    feed_dict = {\r\n        input_: np.random.uniform(\r\n            0, 1, (3, *input_.shape[1:].as_list()))\r\n        for input_ in inputs\r\n    }\r\n    output = model(inputs)\r\n    output_eval = tf.keras.backend.get_session().run(\r\n        output, feed_dict=feed_dict)\r\n    output_np = model.predict([feed_dict[key] for key in inputs])\r\n\r\n    assert np.allclose(output_eval, output_np)\r\n\r\n    print(\"tf.keras.layers.Concatenate with {} inputs\".format(len(inputs)))\r\n\r\n\r\ndef main():\r\n    input1 = tf.keras.layers.Input((1, ))\r\n    input2 = tf.keras.layers.Input((2, ))\r\n\r\n    test_tensorflow_concatenate([input1, input2])\r\n    test_tensorflow_concatenate([input1])\r\n\r\n    test_concatenate_layer_with_inputs([input1, input2])\r\n    test_concatenate_layer_with_inputs([input1])\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n\r\n**Will this change the current api? How?**\r\nNo ValueErrors would be raised when calling the `tf.keras.layers.Concatenate` with input list of length 1.\r\n\r\n**Who will benefit with this feature?**\r\nAnyone who dynamically creates multi-input/-output keras models.\r\n\r\n**Any Other info.**\r\nn/a"}