{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/281861081", "html_url": "https://github.com/tensorflow/tensorflow/issues/7782#issuecomment-281861081", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7782", "id": 281861081, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTg2MTA4MQ==", "user": {"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-23T01:27:03Z", "updated_at": "2017-02-23T01:27:03Z", "author_association": "MEMBER", "body_html": "<p>Interesting.   I modified your program as follows:</p>\n<pre><code>import tensorflow as tf\n\nx = tf.Variable(\n    [], \n    dtype=tf.int32,\n    validate_shape=False,\n    trainable=False\n)\nx_alias = tf.Print(x, data=[x], message=\"x_alias\")\nconcat = tf.concat([x_alias, [0]], 0)\nconcat_alias = tf.Print(concat, data=[concat], message=\"concat_alias\")\nassign_op = tf.assign(x, concat_alias, validate_shape=False)\n\nwith tf.control_dependencies([assign_op]):\n    y = assign_op\n    # y = x\n    print_op_dep = tf.Print(y, data=[y], message=\"print_op_dep:\")\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    for i in range(3):\n        print sess.run(print_op_dep)\n</code></pre>\n<p>If \"y = x\" is used instead of \"y = assign_op\", I get this output:</p>\n<pre><code>I tensorflow/core/kernels/logging_ops.cc:79] x_alias[]\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0]\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[]\n[]\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[0]\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0]\n[0]\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0 0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0 0]\n[0 0]\n</code></pre>\n<p>Setting \"y = assign_op\", I get what you expected.</p>\n<pre><code>I tensorflow/core/kernels/logging_ops.cc:79] x_alias[]\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0]\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0]\n[0]\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[0]\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0 0]\n[0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0 0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0 0 0]\n[0 0 0]\n\n</code></pre>\n<p>It appears as though the control_dependencies construct correctly forces assign_op to execute, but the new value isn't really accessible to an evaluation of x until later.  This surpasses my understanding.  Summon <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>.</p>", "body_text": "Interesting.   I modified your program as follows:\nimport tensorflow as tf\n\nx = tf.Variable(\n    [], \n    dtype=tf.int32,\n    validate_shape=False,\n    trainable=False\n)\nx_alias = tf.Print(x, data=[x], message=\"x_alias\")\nconcat = tf.concat([x_alias, [0]], 0)\nconcat_alias = tf.Print(concat, data=[concat], message=\"concat_alias\")\nassign_op = tf.assign(x, concat_alias, validate_shape=False)\n\nwith tf.control_dependencies([assign_op]):\n    y = assign_op\n    # y = x\n    print_op_dep = tf.Print(y, data=[y], message=\"print_op_dep:\")\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    for i in range(3):\n        print sess.run(print_op_dep)\n\nIf \"y = x\" is used instead of \"y = assign_op\", I get this output:\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[]\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0]\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[]\n[]\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[0]\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0]\n[0]\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0 0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0 0]\n[0 0]\n\nSetting \"y = assign_op\", I get what you expected.\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[]\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0]\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0]\n[0]\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[0]\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0 0]\n[0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0 0 0]\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0 0 0]\n[0 0 0]\n\n\nIt appears as though the control_dependencies construct correctly forces assign_op to execute, but the new value isn't really accessible to an evaluation of x until later.  This surpasses my understanding.  Summon @mrry.", "body": "Interesting.   I modified your program as follows:\r\n\r\n```\r\nimport tensorflow as tf\r\n\r\nx = tf.Variable(\r\n    [], \r\n    dtype=tf.int32,\r\n    validate_shape=False,\r\n    trainable=False\r\n)\r\nx_alias = tf.Print(x, data=[x], message=\"x_alias\")\r\nconcat = tf.concat([x_alias, [0]], 0)\r\nconcat_alias = tf.Print(concat, data=[concat], message=\"concat_alias\")\r\nassign_op = tf.assign(x, concat_alias, validate_shape=False)\r\n\r\nwith tf.control_dependencies([assign_op]):\r\n    y = assign_op\r\n    # y = x\r\n    print_op_dep = tf.Print(y, data=[y], message=\"print_op_dep:\")\r\n\r\nwith tf.Session() as sess:\r\n    sess.run(tf.global_variables_initializer())\r\n    for i in range(3):\r\n        print sess.run(print_op_dep)\r\n```\r\n\r\nIf \"y = x\" is used instead of \"y = assign_op\", I get this output:\r\n```\r\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[]\r\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0]\r\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[]\r\n[]\r\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[0]\r\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0 0]\r\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0]\r\n[0]\r\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[0 0]\r\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0 0 0]\r\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0 0]\r\n[0 0]\r\n```\r\nSetting \"y = assign_op\", I get what you expected.  \r\n```\r\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[]\r\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0]\r\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0]\r\n[0]\r\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[0]\r\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0 0]\r\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0 0]\r\n[0 0]\r\nI tensorflow/core/kernels/logging_ops.cc:79] x_alias[0 0]\r\nI tensorflow/core/kernels/logging_ops.cc:79] concat_alias[0 0 0]\r\nI tensorflow/core/kernels/logging_ops.cc:79] print_op_dep:[0 0 0]\r\n[0 0 0]\r\n\r\n```\r\nIt appears as though the control_dependencies construct correctly forces assign_op to execute, but the new value isn't really accessible to an evaluation of x until later.  This surpasses my understanding.  Summon @mrry.\r\n"}