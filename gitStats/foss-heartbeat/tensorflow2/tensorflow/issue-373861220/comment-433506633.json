{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/433506633", "html_url": "https://github.com/tensorflow/tensorflow/pull/23250#issuecomment-433506633", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23250", "id": 433506633, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzUwNjYzMw==", "user": {"login": "sleighsoft", "id": 9438971, "node_id": "MDQ6VXNlcjk0Mzg5NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9438971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sleighsoft", "html_url": "https://github.com/sleighsoft", "followers_url": "https://api.github.com/users/sleighsoft/followers", "following_url": "https://api.github.com/users/sleighsoft/following{/other_user}", "gists_url": "https://api.github.com/users/sleighsoft/gists{/gist_id}", "starred_url": "https://api.github.com/users/sleighsoft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sleighsoft/subscriptions", "organizations_url": "https://api.github.com/users/sleighsoft/orgs", "repos_url": "https://api.github.com/users/sleighsoft/repos", "events_url": "https://api.github.com/users/sleighsoft/events{/privacy}", "received_events_url": "https://api.github.com/users/sleighsoft/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-26T18:44:34Z", "updated_at": "2018-10-26T19:11:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p>No, this does not work right now without doing the same approach that is build into this PR.</p>\n<p>Running the following code for example prints:<br>\n<strong>1</strong> will actually be created as <code>abs_inner/FloatOutput</code><br>\n<strong>2</strong> will actually be created as <code>abs_inner/FloatOutput_1</code><br>\nExtra:<br>\n<strong>3</strong> Removing the slash from the first <code>abs_outer</code> yields <code>abs_inner/FloatOutput</code><br>\n<strong>4</strong> Removing the slash from the first <code>abs_inner</code> yields <code>abs_outer/abs_inner/FloatOutput</code><br>\nBUT: The second <code>with</code> scope will create <code>abs_outer/abs_inner_1/FloatOutput</code></p>\n<div class=\"highlight highlight-source-python\"><pre>g <span class=\"pl-k\">=</span> ops.Graph()\n    <span class=\"pl-k\">with</span> g.as_default():\n      <span class=\"pl-k\">with</span> g.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>abs_outer/<span class=\"pl-pds\">'</span></span>):\n        <span class=\"pl-k\">with</span> g.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>abs_inner/<span class=\"pl-pds\">'</span></span>):\n          <span class=\"pl-c1\">print</span>(g.create_op(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>FloatOutput<span class=\"pl-pds\">\"</span></span>, [], [dtypes.float32]).name) <span class=\"pl-c\"><span class=\"pl-c\">#</span> 1</span>\n      <span class=\"pl-k\">with</span> g.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>abs_outer/<span class=\"pl-pds\">'</span></span>):\n        <span class=\"pl-k\">with</span> g.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>abs_inner/<span class=\"pl-pds\">'</span></span>):\n          <span class=\"pl-c1\">print</span>(g.create_op(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>FloatOutput<span class=\"pl-pds\">\"</span></span>, [], [dtypes.float32]).name) <span class=\"pl-c\"><span class=\"pl-c\">#</span> 2</span></pre></div>\n<p>In general, once you start using <code>/</code> and try to \"reuse\" name scopes it quickly becomes a mess.</p>", "body_text": "No, this does not work right now without doing the same approach that is build into this PR.\nRunning the following code for example prints:\n1 will actually be created as abs_inner/FloatOutput\n2 will actually be created as abs_inner/FloatOutput_1\nExtra:\n3 Removing the slash from the first abs_outer yields abs_inner/FloatOutput\n4 Removing the slash from the first abs_inner yields abs_outer/abs_inner/FloatOutput\nBUT: The second with scope will create abs_outer/abs_inner_1/FloatOutput\ng = ops.Graph()\n    with g.as_default():\n      with g.name_scope('abs_outer/'):\n        with g.name_scope('abs_inner/'):\n          print(g.create_op(\"FloatOutput\", [], [dtypes.float32]).name) # 1\n      with g.name_scope('abs_outer/'):\n        with g.name_scope('abs_inner/'):\n          print(g.create_op(\"FloatOutput\", [], [dtypes.float32]).name) # 2\nIn general, once you start using / and try to \"reuse\" name scopes it quickly becomes a mess.", "body": "No, this does not work right now without doing the same approach that is build into this PR.\r\n\r\nRunning the following code for example prints:\r\n**1** will actually be created as `abs_inner/FloatOutput`\r\n**2** will actually be created as `abs_inner/FloatOutput_1`\r\nExtra:\r\n**3** Removing the slash from the first `abs_outer` yields `abs_inner/FloatOutput`\r\n**4** Removing the slash from the first `abs_inner` yields `abs_outer/abs_inner/FloatOutput`\r\nBUT: The second `with` scope will create `abs_outer/abs_inner_1/FloatOutput`\r\n```python\r\ng = ops.Graph()\r\n    with g.as_default():\r\n      with g.name_scope('abs_outer/'):\r\n        with g.name_scope('abs_inner/'):\r\n          print(g.create_op(\"FloatOutput\", [], [dtypes.float32]).name) # 1\r\n      with g.name_scope('abs_outer/'):\r\n        with g.name_scope('abs_inner/'):\r\n          print(g.create_op(\"FloatOutput\", [], [dtypes.float32]).name) # 2\r\n```\r\n\r\nIn general, once you start using `/` and try to \"reuse\" name scopes it quickly becomes a mess."}