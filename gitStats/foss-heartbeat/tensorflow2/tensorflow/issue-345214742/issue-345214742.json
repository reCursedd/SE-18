{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21185", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21185/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21185/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21185/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21185", "id": 345214742, "node_id": "MDU6SXNzdWUzNDUyMTQ3NDI=", "number": 21185, "title": "tf.shape output is wrong when net input shape is changed during import", "user": {"login": "tazr", "id": 29096027, "node_id": "MDQ6VXNlcjI5MDk2MDI3", "avatar_url": "https://avatars1.githubusercontent.com/u/29096027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tazr", "html_url": "https://github.com/tazr", "followers_url": "https://api.github.com/users/tazr/followers", "following_url": "https://api.github.com/users/tazr/following{/other_user}", "gists_url": "https://api.github.com/users/tazr/gists{/gist_id}", "starred_url": "https://api.github.com/users/tazr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tazr/subscriptions", "organizations_url": "https://api.github.com/users/tazr/orgs", "repos_url": "https://api.github.com/users/tazr/repos", "events_url": "https://api.github.com/users/tazr/events{/privacy}", "received_events_url": "https://api.github.com/users/tazr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-07-27T12:53:06Z", "updated_at": "2018-11-17T06:14:10Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 7</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.8.0</li>\n<li><strong>Python version</strong>: 3.6.6</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Bazel version</strong>: N/A</li>\n<li><strong>Mobile device</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: see below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p><code>tf.shape</code> returns an inconsistent result when a network is imported from file and its input is changed during the import. Let me create a simple net with a <code>batch_size</code> of 128, and save it to disk</p>\n<pre><code>import tensorflow as tf\n\nbatch_size = 128\nx = tf.placeholder(tf.float32, shape=(batch_size, 10), name='x')\nb = tf.Variable(tf.zeros((10)))\ny = tf.add(x, b, name='y')\n\nsaver = tf.train.Saver()\nwith tf.Session() as sess:\n  tf.global_variables_initializer().run()\n  saver.save(sess, './foo')\n</code></pre>\n<p>Later, I reload this model, and replace the input placeholder with a more flexible one, with an undefined <code>batch_size</code>.</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\nx = tf.placeholder(tf.float32, shape=(None, 10))\nrestorer = tf.train.import_meta_graph('./foo.meta', input_map={'x:0': x})\ny = tf.get_default_graph().get_tensor_by_name('y:0')\ny_shape = tf.shape(y)\nsess = tf.Session()\nrestorer.restore(sess, './foo')\n[y_, y_shape_] = sess.run(['y:0', y_shape], {x: np.zeros((1, 10), np.float32)})\nassert np.all(y_.shape == y_shape_), 'inconsistent sizes'\n</code></pre>\n<p>This results in an <code>AssertionError: inconsistent sizes</code>, because <code>y_shape_</code> still returns the old batch size of 128, despite the output <code>y</code> being computed as expected with a batch size of 1.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 7\nTensorFlow installed from (source or binary): pip\nTensorFlow version (use command below): 1.8.0\nPython version: 3.6.6\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nBazel version: N/A\nMobile device: N/A\nExact command to reproduce: see below\n\nDescribe the problem\ntf.shape returns an inconsistent result when a network is imported from file and its input is changed during the import. Let me create a simple net with a batch_size of 128, and save it to disk\nimport tensorflow as tf\n\nbatch_size = 128\nx = tf.placeholder(tf.float32, shape=(batch_size, 10), name='x')\nb = tf.Variable(tf.zeros((10)))\ny = tf.add(x, b, name='y')\n\nsaver = tf.train.Saver()\nwith tf.Session() as sess:\n  tf.global_variables_initializer().run()\n  saver.save(sess, './foo')\n\nLater, I reload this model, and replace the input placeholder with a more flexible one, with an undefined batch_size.\nimport numpy as np\nimport tensorflow as tf\n\nx = tf.placeholder(tf.float32, shape=(None, 10))\nrestorer = tf.train.import_meta_graph('./foo.meta', input_map={'x:0': x})\ny = tf.get_default_graph().get_tensor_by_name('y:0')\ny_shape = tf.shape(y)\nsess = tf.Session()\nrestorer.restore(sess, './foo')\n[y_, y_shape_] = sess.run(['y:0', y_shape], {x: np.zeros((1, 10), np.float32)})\nassert np.all(y_.shape == y_shape_), 'inconsistent sizes'\n\nThis results in an AssertionError: inconsistent sizes, because y_shape_ still returns the old batch size of 128, despite the output y being computed as expected with a batch size of 1.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 7\r\n- **TensorFlow installed from (source or binary)**: pip\r\n- **TensorFlow version (use command below)**: 1.8.0\r\n- **Python version**: 3.6.6\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Bazel version**: N/A\r\n- **Mobile device**: N/A\r\n- **Exact command to reproduce**: see below\r\n\r\n### Describe the problem\r\n\r\n`tf.shape` returns an inconsistent result when a network is imported from file and its input is changed during the import. Let me create a simple net with a `batch_size` of 128, and save it to disk\r\n\r\n    import tensorflow as tf\r\n\r\n    batch_size = 128\r\n    x = tf.placeholder(tf.float32, shape=(batch_size, 10), name='x')\r\n    b = tf.Variable(tf.zeros((10)))\r\n    y = tf.add(x, b, name='y')\r\n\r\n    saver = tf.train.Saver()\r\n    with tf.Session() as sess:\r\n      tf.global_variables_initializer().run()\r\n      saver.save(sess, './foo')\r\n\r\nLater, I reload this model, and replace the input placeholder with a more flexible one, with an undefined `batch_size`. \r\n\r\n    import numpy as np\r\n    import tensorflow as tf\r\n\r\n    x = tf.placeholder(tf.float32, shape=(None, 10))\r\n    restorer = tf.train.import_meta_graph('./foo.meta', input_map={'x:0': x})\r\n    y = tf.get_default_graph().get_tensor_by_name('y:0')\r\n    y_shape = tf.shape(y)\r\n    sess = tf.Session()\r\n    restorer.restore(sess, './foo')\r\n    [y_, y_shape_] = sess.run(['y:0', y_shape], {x: np.zeros((1, 10), np.float32)})\r\n    assert np.all(y_.shape == y_shape_), 'inconsistent sizes'\r\n\r\nThis results in an `AssertionError: inconsistent sizes`, because `y_shape_` still returns the old batch size of 128, despite the output `y` being computed as expected with a batch size of 1."}