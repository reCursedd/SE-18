{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/364698235", "html_url": "https://github.com/tensorflow/tensorflow/issues/16213#issuecomment-364698235", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16213", "id": 364698235, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDY5ODIzNQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-10T21:59:50Z", "updated_at": "2018-02-10T21:59:50Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think the answer here is to use an external solution (e.g. a cluster manager like Kubernetes or Mesos) to notice that the chief has terminated and bring down the other replicas. As far as I know there is no signaling built into the <code>tf.train.Supervisor</code> or its descendants (<code>tf.train.MonitoredSession</code>, <code>tf.estimator.Estimator</code>) that will cause the non-chief replicas to exit reliably.</p>\n<p>/cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=19293677\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ispirmustafa\">@ispirmustafa</a> in case he knows of any approaches that might work with <code>tf.train.MonitoredSession</code> or <code>tf.estimator.Estimator</code>.</p>", "body_text": "I think the answer here is to use an external solution (e.g. a cluster manager like Kubernetes or Mesos) to notice that the chief has terminated and bring down the other replicas. As far as I know there is no signaling built into the tf.train.Supervisor or its descendants (tf.train.MonitoredSession, tf.estimator.Estimator) that will cause the non-chief replicas to exit reliably.\n/cc @ispirmustafa in case he knows of any approaches that might work with tf.train.MonitoredSession or tf.estimator.Estimator.", "body": "I think the answer here is to use an external solution (e.g. a cluster manager like Kubernetes or Mesos) to notice that the chief has terminated and bring down the other replicas. As far as I know there is no signaling built into the `tf.train.Supervisor` or its descendants (`tf.train.MonitoredSession`, `tf.estimator.Estimator`) that will cause the non-chief replicas to exit reliably.\r\n\r\n/cc @ispirmustafa in case he knows of any approaches that might work with `tf.train.MonitoredSession` or `tf.estimator.Estimator`."}