{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20497", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20497/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20497/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20497/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/20497", "id": 337744599, "node_id": "MDExOlB1bGxSZXF1ZXN0MTk4ODQ5MDQ4", "number": 20497, "title": "Fix int64 to int truncation in std::accumulate", "user": {"login": "rongjiecomputer", "id": 13115060, "node_id": "MDQ6VXNlcjEzMTE1MDYw", "avatar_url": "https://avatars2.githubusercontent.com/u/13115060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rongjiecomputer", "html_url": "https://github.com/rongjiecomputer", "followers_url": "https://api.github.com/users/rongjiecomputer/followers", "following_url": "https://api.github.com/users/rongjiecomputer/following{/other_user}", "gists_url": "https://api.github.com/users/rongjiecomputer/gists{/gist_id}", "starred_url": "https://api.github.com/users/rongjiecomputer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rongjiecomputer/subscriptions", "organizations_url": "https://api.github.com/users/rongjiecomputer/orgs", "repos_url": "https://api.github.com/users/rongjiecomputer/repos", "events_url": "https://api.github.com/users/rongjiecomputer/events{/privacy}", "received_events_url": "https://api.github.com/users/rongjiecomputer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}, {"id": 987666414, "node_id": "MDU6TGFiZWw5ODc2NjY0MTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/ready%20to%20pull", "name": "ready to pull", "color": "2cd643", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-07-03T04:50:01Z", "updated_at": "2018-08-09T01:15:29Z", "closed_at": "2018-08-09T01:03:55Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20497", "html_url": "https://github.com/tensorflow/tensorflow/pull/20497", "diff_url": "https://github.com/tensorflow/tensorflow/pull/20497.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/20497.patch"}, "body_html": "<p>From <a href=\"https://en.cppreference.com/w/cpp/algorithm/accumulate\" rel=\"nofollow\">https://en.cppreference.com/w/cpp/algorithm/accumulate</a></p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">template</span>&lt; <span class=\"pl-k\">class</span> <span class=\"pl-en\">InputIt</span>, <span class=\"pl-k\">class</span> <span class=\"pl-en\">T</span>, <span class=\"pl-k\">class</span> <span class=\"pl-en\">BinaryOperation</span> &gt;\nT <span class=\"pl-en\">accumulate</span>( InputIt first, InputIt last, T init,\n              BinaryOperation op );</pre></div>\n<p>Return type of <code>std::accumulate</code> (and hence <code>{xla,absl}::c_accumulate</code>) is determined by the type of third parameter, not the lambda/function or the iterator.</p>\n<p>For <code>std::accumulate(sizes_.begin(), sizes_.end(), /*int*=/1, std::multiplies&lt;int64&gt;())</code>, compiler will always cast the element of <code>sizes_</code> from <code>int64</code> to <code>int</code>, pass it to <code>std::multiplies&lt;int64&gt;()</code> which will cast it to <code>int64</code> for multiplication and cast the result back to <code>int</code>.</p>\n<p>Writing <code>1LL</code> instead of <code>1</code> will tell compiler the third parameter is 64-bit, making the function works as expected.</p>\n<p>Please spread awareness about this to the internal team. <code>&lt;algorithm&gt;</code> and <code>&lt;numeric&gt;</code> template can be pretty counter-intuitive sometime.</p>", "body_text": "From https://en.cppreference.com/w/cpp/algorithm/accumulate\ntemplate< class InputIt, class T, class BinaryOperation >\nT accumulate( InputIt first, InputIt last, T init,\n              BinaryOperation op );\nReturn type of std::accumulate (and hence {xla,absl}::c_accumulate) is determined by the type of third parameter, not the lambda/function or the iterator.\nFor std::accumulate(sizes_.begin(), sizes_.end(), /*int*=/1, std::multiplies<int64>()), compiler will always cast the element of sizes_ from int64 to int, pass it to std::multiplies<int64>() which will cast it to int64 for multiplication and cast the result back to int.\nWriting 1LL instead of 1 will tell compiler the third parameter is 64-bit, making the function works as expected.\nPlease spread awareness about this to the internal team. <algorithm> and <numeric> template can be pretty counter-intuitive sometime.", "body": "From https://en.cppreference.com/w/cpp/algorithm/accumulate\r\n\r\n```cpp\r\ntemplate< class InputIt, class T, class BinaryOperation >\r\nT accumulate( InputIt first, InputIt last, T init,\r\n              BinaryOperation op );\r\n```\r\n\r\nReturn type of `std::accumulate` (and hence `{xla,absl}::c_accumulate`) is determined by the type of third parameter, not the lambda/function or the iterator.\r\n\r\nFor `std::accumulate(sizes_.begin(), sizes_.end(), /*int*=/1, std::multiplies<int64>())`, compiler will always cast the element of `sizes_` from `int64` to `int`, pass it to `std::multiplies<int64>()` which will cast it to `int64` for multiplication and cast the result back to `int`.\r\n\r\nWriting `1LL` instead of `1` will tell compiler the third parameter is 64-bit, making the function works as expected.\r\n\r\nPlease spread awareness about this to the internal team. `<algorithm>` and `<numeric>` template can be pretty counter-intuitive sometime."}