{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17399", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17399/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17399/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17399/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17399", "id": 301998515, "node_id": "MDU6SXNzdWUzMDE5OTg1MTU=", "number": 17399, "title": "Eager: Using tfe.gradients_function with the params keyword returns a function which cannot be called with lists of values", "user": {"login": "gab50000", "id": 4570206, "node_id": "MDQ6VXNlcjQ1NzAyMDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4570206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gab50000", "html_url": "https://github.com/gab50000", "followers_url": "https://api.github.com/users/gab50000/followers", "following_url": "https://api.github.com/users/gab50000/following{/other_user}", "gists_url": "https://api.github.com/users/gab50000/gists{/gist_id}", "starred_url": "https://api.github.com/users/gab50000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gab50000/subscriptions", "organizations_url": "https://api.github.com/users/gab50000/orgs", "repos_url": "https://api.github.com/users/gab50000/repos", "events_url": "https://api.github.com/users/gab50000/events{/privacy}", "received_events_url": "https://api.github.com/users/gab50000/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-03-03T13:32:56Z", "updated_at": "2018-04-27T22:29:38Z", "closed_at": "2018-04-27T22:29:38Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Debian Stretch</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.6.0</li>\n<li><strong>Python version</strong>: 3.6.2</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow.contrib.eager <span class=\"pl-k\">as</span> tfe\n\ntfe.enable_eager_execution()\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">f</span>(<span class=\"pl-smi\">a</span>, <span class=\"pl-smi\">b</span>):\n    <span class=\"pl-k\">return</span> a<span class=\"pl-k\">**</span><span class=\"pl-c1\">2</span> <span class=\"pl-k\">+</span> b<span class=\"pl-k\">**</span><span class=\"pl-c1\">3</span>\n\npartial_grad <span class=\"pl-k\">=</span> tfe.gradients_function(f, <span class=\"pl-v\">params</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">0</span>])\npartial_grad([<span class=\"pl-c1\">1</span>., <span class=\"pl-c1\">2</span>., <span class=\"pl-c1\">3</span>.], [<span class=\"pl-c1\">1</span>., <span class=\"pl-c1\">2</span>., <span class=\"pl-c1\">3</span>.])</pre></div>\n<p>When I try to use <code>tfe.gradients_function</code> with the keyword params, it is not possible to call the resulting function <code>partial_grad</code>with a list of values.</p>\n<h2>Workarounds:</h2>\n<p>Using np.array([1., 2., 3.]) as input for partial_grad works.</p>\n<h2>Traceback:</h2>\n<pre><code>---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-4-cb367c5f1046&gt; in &lt;module&gt;()\n      1 partial_grad = tfe.gradients_function(f, params=[0])\n----&gt; 2 partial_grad([1., 2., 3.], [1., 2., 3.])\n\n~/programs/miniconda3/envs/gym/lib/python3.6/site-packages/tensorflow/python/eager/backprop.py in decorated(*args, **kwds)\n    512     \"\"\"Computes the gradient of the decorated function.\"\"\"\n    513 \n--&gt; 514     _, grad = val_and_grad_function(f, params=params)(*args, **kwds)\n    515     return grad\n    516 \n\n~/programs/miniconda3/envs/gym/lib/python3.6/site-packages/tensorflow/python/eager/backprop.py in decorated(*args, **kwds)\n    611       raise ValueError(\"Functions to be differentiated cannot \"\n    612                        \"receive keyword arguments.\")\n--&gt; 613     val, vjp = make_vjp(f, params)(*args, **kwds)\n    614     return val, vjp(dy=dy)\n    615 \n\n~/programs/miniconda3/envs/gym/lib/python3.6/site-packages/tensorflow/python/eager/backprop.py in decorated(*args, **kwds)\n    665         sources.append(args[i])\n    666         tape.watch(args[i])\n--&gt; 667       result = f(*args)\n    668       if result is None:\n    669         raise ValueError(\"Cannot differentiate a function that returns None; \"\n\n&lt;ipython-input-2-159855d98f00&gt; in f(a, b)\n      1 def f(a, b):\n----&gt; 2     return a**2 + b**3\n\nTypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Debian Stretch\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.6.0\nPython version: 3.6.2\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nBazel version (if compiling from source): N/A\nExact command to reproduce:\n\nimport tensorflow as tf\nimport tensorflow.contrib.eager as tfe\n\ntfe.enable_eager_execution()\n\ndef f(a, b):\n    return a**2 + b**3\n\npartial_grad = tfe.gradients_function(f, params=[0])\npartial_grad([1., 2., 3.], [1., 2., 3.])\nWhen I try to use tfe.gradients_function with the keyword params, it is not possible to call the resulting function partial_gradwith a list of values.\nWorkarounds:\nUsing np.array([1., 2., 3.]) as input for partial_grad works.\nTraceback:\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-4-cb367c5f1046> in <module>()\n      1 partial_grad = tfe.gradients_function(f, params=[0])\n----> 2 partial_grad([1., 2., 3.], [1., 2., 3.])\n\n~/programs/miniconda3/envs/gym/lib/python3.6/site-packages/tensorflow/python/eager/backprop.py in decorated(*args, **kwds)\n    512     \"\"\"Computes the gradient of the decorated function.\"\"\"\n    513 \n--> 514     _, grad = val_and_grad_function(f, params=params)(*args, **kwds)\n    515     return grad\n    516 \n\n~/programs/miniconda3/envs/gym/lib/python3.6/site-packages/tensorflow/python/eager/backprop.py in decorated(*args, **kwds)\n    611       raise ValueError(\"Functions to be differentiated cannot \"\n    612                        \"receive keyword arguments.\")\n--> 613     val, vjp = make_vjp(f, params)(*args, **kwds)\n    614     return val, vjp(dy=dy)\n    615 \n\n~/programs/miniconda3/envs/gym/lib/python3.6/site-packages/tensorflow/python/eager/backprop.py in decorated(*args, **kwds)\n    665         sources.append(args[i])\n    666         tape.watch(args[i])\n--> 667       result = f(*args)\n    668       if result is None:\n    669         raise ValueError(\"Cannot differentiate a function that returns None; \"\n\n<ipython-input-2-159855d98f00> in f(a, b)\n      1 def f(a, b):\n----> 2     return a**2 + b**3\n\nTypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Debian Stretch\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.6.0\r\n- **Python version**: 3.6.2\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **Exact command to reproduce**:\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow.contrib.eager as tfe\r\n\r\ntfe.enable_eager_execution()\r\n\r\ndef f(a, b):\r\n    return a**2 + b**3\r\n\r\npartial_grad = tfe.gradients_function(f, params=[0])\r\npartial_grad([1., 2., 3.], [1., 2., 3.])\r\n```\r\n\r\nWhen I try to use ```tfe.gradients_function``` with the keyword params, it is not possible to call the resulting function ```partial_grad```with a list of values.\r\n\r\n## Workarounds:\r\n\r\nUsing np.array([1., 2., 3.]) as input for partial_grad works.\r\n\r\n## Traceback:\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-4-cb367c5f1046> in <module>()\r\n      1 partial_grad = tfe.gradients_function(f, params=[0])\r\n----> 2 partial_grad([1., 2., 3.], [1., 2., 3.])\r\n\r\n~/programs/miniconda3/envs/gym/lib/python3.6/site-packages/tensorflow/python/eager/backprop.py in decorated(*args, **kwds)\r\n    512     \"\"\"Computes the gradient of the decorated function.\"\"\"\r\n    513 \r\n--> 514     _, grad = val_and_grad_function(f, params=params)(*args, **kwds)\r\n    515     return grad\r\n    516 \r\n\r\n~/programs/miniconda3/envs/gym/lib/python3.6/site-packages/tensorflow/python/eager/backprop.py in decorated(*args, **kwds)\r\n    611       raise ValueError(\"Functions to be differentiated cannot \"\r\n    612                        \"receive keyword arguments.\")\r\n--> 613     val, vjp = make_vjp(f, params)(*args, **kwds)\r\n    614     return val, vjp(dy=dy)\r\n    615 \r\n\r\n~/programs/miniconda3/envs/gym/lib/python3.6/site-packages/tensorflow/python/eager/backprop.py in decorated(*args, **kwds)\r\n    665         sources.append(args[i])\r\n    666         tape.watch(args[i])\r\n--> 667       result = f(*args)\r\n    668       if result is None:\r\n    669         raise ValueError(\"Cannot differentiate a function that returns None; \"\r\n\r\n<ipython-input-2-159855d98f00> in f(a, b)\r\n      1 def f(a, b):\r\n----> 2     return a**2 + b**3\r\n\r\nTypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'\r\n```\r\n"}