{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23207", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23207/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23207/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23207/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23207", "id": 373333625, "node_id": "MDU6SXNzdWUzNzMzMzM2MjU=", "number": 23207, "title": "Add an option to apply SavedModel via command line ", "user": {"login": "gautamkmr", "id": 3092152, "node_id": "MDQ6VXNlcjMwOTIxNTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3092152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gautamkmr", "html_url": "https://github.com/gautamkmr", "followers_url": "https://api.github.com/users/gautamkmr/followers", "following_url": "https://api.github.com/users/gautamkmr/following{/other_user}", "gists_url": "https://api.github.com/users/gautamkmr/gists{/gist_id}", "starred_url": "https://api.github.com/users/gautamkmr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gautamkmr/subscriptions", "organizations_url": "https://api.github.com/users/gautamkmr/orgs", "repos_url": "https://api.github.com/users/gautamkmr/repos", "events_url": "https://api.github.com/users/gautamkmr/events{/privacy}", "received_events_url": "https://api.github.com/users/gautamkmr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-10-24T07:03:18Z", "updated_at": "2018-11-16T01:19:56Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>TensorFlow version (you are using): TF-1.11</li>\n<li>Are you willing to contribute it (Yes/No): Yes</li>\n</ul>\n<p><strong>Describe the feature and the current behavior/state.</strong><br>\nBy default TensorFlow has an option to store checkpoint by adding '--train_dir'. However this is good when we want to continue training, but if we want to perform inference using TensorFlowServing it becomes a challenge.  Is it possible to add some flag which will store the variables, graph, in/output signature by just providing an option similar to '--train_dir'?</p>\n<p><strong>Will this change the current api? How?</strong><br>\nYes, but nothing will break</p>\n<p>for e.g. <strong>Old API</strong> will store only checkpoints<br>\ntf_cnn_benchmarks.py --model resnet50 --num_epochs=2 --batch_size 64 --data_name=imagenet  --data_dir=/mnt/data <strong>--train_dir=/mnt/checkpoint</strong>  --variable_update horovod --horovod_device gpu --weight_decay=1e-4 --use_fp16</p>\n<p><strong>New API</strong> should store using SaveModel<br>\ntf_cnn_benchmarks.py --model resnet50 --num_epochs=2 --batch_size 64 --data_name=imagenet  --data_dir=/mnt/data <strong>--train_dir_save_model=/mnt/checkpoint</strong>  --variable_update horovod --horovod_device gpu --weight_decay=1e-4 --use_fp16</p>\n<p><strong>Who will benefit with this feature?</strong><br>\nBy having such option, deploying the model to production will be super fast, even for the people who doesn't know anything about training code. Currently we have to either change the training code to use SaveModel or figure out a way to export graph along with variables.</p>\n<p><strong>Any Other info.</strong><br>\nN/A</p>", "body_text": "System information\n\nTensorFlow version (you are using): TF-1.11\nAre you willing to contribute it (Yes/No): Yes\n\nDescribe the feature and the current behavior/state.\nBy default TensorFlow has an option to store checkpoint by adding '--train_dir'. However this is good when we want to continue training, but if we want to perform inference using TensorFlowServing it becomes a challenge.  Is it possible to add some flag which will store the variables, graph, in/output signature by just providing an option similar to '--train_dir'?\nWill this change the current api? How?\nYes, but nothing will break\nfor e.g. Old API will store only checkpoints\ntf_cnn_benchmarks.py --model resnet50 --num_epochs=2 --batch_size 64 --data_name=imagenet  --data_dir=/mnt/data --train_dir=/mnt/checkpoint  --variable_update horovod --horovod_device gpu --weight_decay=1e-4 --use_fp16\nNew API should store using SaveModel\ntf_cnn_benchmarks.py --model resnet50 --num_epochs=2 --batch_size 64 --data_name=imagenet  --data_dir=/mnt/data --train_dir_save_model=/mnt/checkpoint  --variable_update horovod --horovod_device gpu --weight_decay=1e-4 --use_fp16\nWho will benefit with this feature?\nBy having such option, deploying the model to production will be super fast, even for the people who doesn't know anything about training code. Currently we have to either change the training code to use SaveModel or figure out a way to export graph along with variables.\nAny Other info.\nN/A", "body": "**System information**\r\n- TensorFlow version (you are using): TF-1.11\r\n- Are you willing to contribute it (Yes/No): Yes\r\n\r\n**Describe the feature and the current behavior/state.**\r\nBy default TensorFlow has an option to store checkpoint by adding '--train_dir'. However this is good when we want to continue training, but if we want to perform inference using TensorFlowServing it becomes a challenge.  Is it possible to add some flag which will store the variables, graph, in/output signature by just providing an option similar to '--train_dir'?\r\n\r\n\r\n**Will this change the current api? How?**\r\nYes, but nothing will break \r\n\r\nfor e.g. **Old API** will store only checkpoints\r\ntf_cnn_benchmarks.py --model resnet50 --num_epochs=2 --batch_size 64 --data_name=imagenet  --data_dir=/mnt/data **--train_dir=/mnt/checkpoint**  --variable_update horovod --horovod_device gpu --weight_decay=1e-4 --use_fp16\r\n\r\n**New API** should store using SaveModel\r\ntf_cnn_benchmarks.py --model resnet50 --num_epochs=2 --batch_size 64 --data_name=imagenet  --data_dir=/mnt/data **--train_dir_save_model=/mnt/checkpoint**  --variable_update horovod --horovod_device gpu --weight_decay=1e-4 --use_fp16\r\n\r\n\r\n**Who will benefit with this feature?**\r\nBy having such option, deploying the model to production will be super fast, even for the people who doesn't know anything about training code. Currently we have to either change the training code to use SaveModel or figure out a way to export graph along with variables. \r\n\r\n**Any Other info.**\r\nN/A"}