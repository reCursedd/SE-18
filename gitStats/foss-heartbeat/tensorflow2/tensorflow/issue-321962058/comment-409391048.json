{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/409391048", "html_url": "https://github.com/tensorflow/tensorflow/issues/19200#issuecomment-409391048", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19200", "id": 409391048, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTM5MTA0OA==", "user": {"login": "annemenini", "id": 13631130, "node_id": "MDQ6VXNlcjEzNjMxMTMw", "avatar_url": "https://avatars0.githubusercontent.com/u/13631130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/annemenini", "html_url": "https://github.com/annemenini", "followers_url": "https://api.github.com/users/annemenini/followers", "following_url": "https://api.github.com/users/annemenini/following{/other_user}", "gists_url": "https://api.github.com/users/annemenini/gists{/gist_id}", "starred_url": "https://api.github.com/users/annemenini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/annemenini/subscriptions", "organizations_url": "https://api.github.com/users/annemenini/orgs", "repos_url": "https://api.github.com/users/annemenini/repos", "events_url": "https://api.github.com/users/annemenini/events{/privacy}", "received_events_url": "https://api.github.com/users/annemenini/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-31T22:39:46Z", "updated_at": "2018-07-31T22:50:00Z", "author_association": "NONE", "body_html": "<h3>Issue with tf.transpose &amp; tf.conj on GPU:</h3>\n<p>I have finally managed to reproduce a problem very similar from the initial post into a simple test case below. The problem seems to be linked to the <code>tf.transpose</code> and <code>tf.conj</code> in my case. Indeed, in the test case below, the <code>conjugate</code> argument of the <code>tf.transpose</code> is ignored when executed on GPU.</p>\n<h3>Source:</h3>\n<pre><code>import os\n\nimport numpy as np\nimport tensorflow as tf\n\n#os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"\"\n\ninput1 = tf.placeholder(tf.complex64, shape=[None, None, None, None], name=\"input1\")\ninput2 = tf.placeholder(tf.complex64, shape=[None, None, None, None], name=\"input2\")\ninput3 = tf.placeholder(tf.complex64, shape=[None, None, None, None], name=\"input3\")\n\ninput1 = tf.transpose(input1, perm=[0, 3, 1, 2], conjugate=False)\ninput2 = tf.transpose(input2, perm=[0, 3, 1, 2], conjugate=True)\ninput3 = tf.transpose(input3, perm=[0, 3, 1, 2])\ninput3 = tf.conj(input3)\n\noutput1 = tf.Print(input1, [tf.real(input1), tf.imag(input1)], \"output1: \", name=\"output1\")\noutput2 = tf.Print(input2, [tf.real(input2), tf.imag(input2)], \"output2: \", name=\"output2\")\noutput3 = tf.Print(input3, [tf.real(input3), tf.imag(input3)], \"output3: \", name=\"output3\")\n\nnp.random.seed(seed=0)\na = np.random.rand(1, 16, 32, 8) + 1j * np.random.rand(1, 16, 32, 8)\n\nsess = tf.InteractiveSession()\n\nb, c, d = sess.run([\"output1:0\", \"output2:0\", \"output3:0\"], {\"input1:0\": a, \"input2:0\": a, \"input3:0\": a})\n</code></pre>\n<h3>Console output with GPU execution:</h3>\n<pre><code>output2: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[0.318294257 0.612427294 0.152561143]]]...]\noutput3: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[-0.318294257 -0.612427294 -0.152561143]]]...]\noutput1: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[0.318294257 0.612427294 0.152561143]]]...]\n</code></pre>\n<p>Note the signs of the imaginary part of output2, it should be the opposite of output1, and the same as output3 (the imaginary part is the second half of each printed line).</p>\n<h3>Console output with CPU execution:</h3>\n<pre><code>output2: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[-0.318294257 -0.612427294 -0.152561143]]]...]\noutput3: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[-0.318294257 -0.612427294 -0.152561143]]]...]\noutput1: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[0.318294257 0.612427294 0.152561143]]]...]\n</code></pre>\n<p>CPU execution was obtained from the same machine, just by uncommenting the line <code>os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"\"</code><br>\nIn this case, the signs are correct.</p>\n<h3>Additional notes:</h3>\n<ul>\n<li>\n<p>I could reproduce the problem in another machine with the following config: tensorflow-gpu 1.7.0 (previsouly tensorflow-gpu 1.9.0), device: Tesla V100-SXM2-32GB (previously GeForce GTX 1080 Ti)</p>\n</li>\n<li>\n<p>In the original source code where the issue was discovered, even the graph corresponding to <code>ouput3</code> in the test case above is failing to properly process the conjugate operation, I don't manage to reproduce that problem in the test case.</p>\n</li>\n</ul>", "body_text": "Issue with tf.transpose & tf.conj on GPU:\nI have finally managed to reproduce a problem very similar from the initial post into a simple test case below. The problem seems to be linked to the tf.transpose and tf.conj in my case. Indeed, in the test case below, the conjugate argument of the tf.transpose is ignored when executed on GPU.\nSource:\nimport os\n\nimport numpy as np\nimport tensorflow as tf\n\n#os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"\"\n\ninput1 = tf.placeholder(tf.complex64, shape=[None, None, None, None], name=\"input1\")\ninput2 = tf.placeholder(tf.complex64, shape=[None, None, None, None], name=\"input2\")\ninput3 = tf.placeholder(tf.complex64, shape=[None, None, None, None], name=\"input3\")\n\ninput1 = tf.transpose(input1, perm=[0, 3, 1, 2], conjugate=False)\ninput2 = tf.transpose(input2, perm=[0, 3, 1, 2], conjugate=True)\ninput3 = tf.transpose(input3, perm=[0, 3, 1, 2])\ninput3 = tf.conj(input3)\n\noutput1 = tf.Print(input1, [tf.real(input1), tf.imag(input1)], \"output1: \", name=\"output1\")\noutput2 = tf.Print(input2, [tf.real(input2), tf.imag(input2)], \"output2: \", name=\"output2\")\noutput3 = tf.Print(input3, [tf.real(input3), tf.imag(input3)], \"output3: \", name=\"output3\")\n\nnp.random.seed(seed=0)\na = np.random.rand(1, 16, 32, 8) + 1j * np.random.rand(1, 16, 32, 8)\n\nsess = tf.InteractiveSession()\n\nb, c, d = sess.run([\"output1:0\", \"output2:0\", \"output3:0\"], {\"input1:0\": a, \"input2:0\": a, \"input3:0\": a})\n\nConsole output with GPU execution:\noutput2: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[0.318294257 0.612427294 0.152561143]]]...]\noutput3: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[-0.318294257 -0.612427294 -0.152561143]]]...]\noutput1: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[0.318294257 0.612427294 0.152561143]]]...]\n\nNote the signs of the imaginary part of output2, it should be the opposite of output1, and the same as output3 (the imaginary part is the second half of each printed line).\nConsole output with CPU execution:\noutput2: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[-0.318294257 -0.612427294 -0.152561143]]]...]\noutput3: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[-0.318294257 -0.612427294 -0.152561143]]]...]\noutput1: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[0.318294257 0.612427294 0.152561143]]]...]\n\nCPU execution was obtained from the same machine, just by uncommenting the line os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"\"\nIn this case, the signs are correct.\nAdditional notes:\n\n\nI could reproduce the problem in another machine with the following config: tensorflow-gpu 1.7.0 (previsouly tensorflow-gpu 1.9.0), device: Tesla V100-SXM2-32GB (previously GeForce GTX 1080 Ti)\n\n\nIn the original source code where the issue was discovered, even the graph corresponding to ouput3 in the test case above is failing to properly process the conjugate operation, I don't manage to reproduce that problem in the test case.", "body": "### Issue with tf.transpose & tf.conj on GPU:\r\nI have finally managed to reproduce a problem very similar from the initial post into a simple test case below. The problem seems to be linked to the `tf.transpose` and `tf.conj` in my case. Indeed, in the test case below, the `conjugate` argument of the `tf.transpose` is ignored when executed on GPU.\r\n\r\n### Source:\r\n```\r\nimport os\r\n\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n#os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"\"\r\n\r\ninput1 = tf.placeholder(tf.complex64, shape=[None, None, None, None], name=\"input1\")\r\ninput2 = tf.placeholder(tf.complex64, shape=[None, None, None, None], name=\"input2\")\r\ninput3 = tf.placeholder(tf.complex64, shape=[None, None, None, None], name=\"input3\")\r\n\r\ninput1 = tf.transpose(input1, perm=[0, 3, 1, 2], conjugate=False)\r\ninput2 = tf.transpose(input2, perm=[0, 3, 1, 2], conjugate=True)\r\ninput3 = tf.transpose(input3, perm=[0, 3, 1, 2])\r\ninput3 = tf.conj(input3)\r\n\r\noutput1 = tf.Print(input1, [tf.real(input1), tf.imag(input1)], \"output1: \", name=\"output1\")\r\noutput2 = tf.Print(input2, [tf.real(input2), tf.imag(input2)], \"output2: \", name=\"output2\")\r\noutput3 = tf.Print(input3, [tf.real(input3), tf.imag(input3)], \"output3: \", name=\"output3\")\r\n\r\nnp.random.seed(seed=0)\r\na = np.random.rand(1, 16, 32, 8) + 1j * np.random.rand(1, 16, 32, 8)\r\n\r\nsess = tf.InteractiveSession()\r\n\r\nb, c, d = sess.run([\"output1:0\", \"output2:0\", \"output3:0\"], {\"input1:0\": a, \"input2:0\": a, \"input3:0\": a})\r\n```\r\n### Console output with GPU execution:\r\n```\r\noutput2: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[0.318294257 0.612427294 0.152561143]]]...]\r\noutput3: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[-0.318294257 -0.612427294 -0.152561143]]]...]\r\noutput1: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[0.318294257 0.612427294 0.152561143]]]...]\r\n```\r\nNote the signs of the imaginary part of output2, it should be the opposite of output1, and the same as output3 (the imaginary part is the second half of each printed line).\r\n### Console output with CPU execution:\r\n```\r\noutput2: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[-0.318294257 -0.612427294 -0.152561143]]]...]\r\noutput3: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[-0.318294257 -0.612427294 -0.152561143]]]...]\r\noutput1: [[[[0.548813522 0.963662744 0.0202183966]]]...][[[[0.318294257 0.612427294 0.152561143]]]...]\r\n```\r\nCPU execution was obtained from the same machine, just by uncommenting the line `os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"\"`\r\nIn this case, the signs are correct.\r\n### Additional notes:\r\n\r\n- I could reproduce the problem in another machine with the following config: tensorflow-gpu 1.7.0 (previsouly tensorflow-gpu 1.9.0), device: Tesla V100-SXM2-32GB (previously GeForce GTX 1080 Ti)\r\n\r\n- In the original source code where the issue was discovered, even the graph corresponding to `ouput3` in the test case above is failing to properly process the conjugate operation, I don't manage to reproduce that problem in the test case. "}