{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/404499210", "html_url": "https://github.com/tensorflow/tensorflow/issues/19200#issuecomment-404499210", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19200", "id": 404499210, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDQ5OTIxMA==", "user": {"login": "trungpx", "id": 37993448, "node_id": "MDQ6VXNlcjM3OTkzNDQ4", "avatar_url": "https://avatars1.githubusercontent.com/u/37993448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trungpx", "html_url": "https://github.com/trungpx", "followers_url": "https://api.github.com/users/trungpx/followers", "following_url": "https://api.github.com/users/trungpx/following{/other_user}", "gists_url": "https://api.github.com/users/trungpx/gists{/gist_id}", "starred_url": "https://api.github.com/users/trungpx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trungpx/subscriptions", "organizations_url": "https://api.github.com/users/trungpx/orgs", "repos_url": "https://api.github.com/users/trungpx/repos", "events_url": "https://api.github.com/users/trungpx/events{/privacy}", "received_events_url": "https://api.github.com/users/trungpx/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-12T12:44:17Z", "updated_at": "2018-07-12T12:44:17Z", "author_association": "NONE", "body_html": "<p>Hello everyone,</p>\n<p>I got the same issue. When I tried to train and test a simple CNN model (code below) with keras. Then when I run model on CPU it got the validation accuracy max: 78%, while GPU gave the result: 75% only. I run it with 25 epochs.<br>\nSource code as following:</p>\n<h1>Importing the Keras libraries and packages</h1>\n<p>from keras.models import Sequential<br>\nfrom keras.layers import Conv2D<br>\nfrom keras.layers import MaxPooling2D<br>\nfrom keras.layers import Flatten<br>\nfrom keras.layers import Dense</p>\n<h1>Part 1 - Creating the model</h1>\n<h1>Initialising the CNN</h1>\n<p>classifier = Sequential()</p>\n<h1>Step 1 - Convolution</h1>\n<p>classifier.add(Conv2D(32,(3,3),input_shape=(64,64,3),activation='relu'))</p>\n<h1>Step 2 - Pooling</h1>\n<p>classifier.add(MaxPooling2D(pool_size=(2,2)))</p>\n<h1>Adding a second convolutional layer</h1>\n<p>classifier.add(Conv2D(32,(3,3),activation='relu'))<br>\nclassifier.add(MaxPooling2D(pool_size=(2,2)))</p>\n<h1>Step 3 - Flattening</h1>\n<p>classifier.add(Flatten())</p>\n<h1>Step 4 - Full connection</h1>\n<p>classifier.add(Dense(units=128,activation='relu'))<br>\nclassifier.add(Dense(units=1,activation='sigmoid'))</p>\n<h1>Compiling the CNN</h1>\n<p>classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])</p>\n<h1>Part 2 - Fitting the CNN to the images</h1>\n<p>from keras.preprocessing.image import ImageDataGenerator<br>\ntrain_datagen = ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)<br>\ntest_datagen = ImageDataGenerator(rescale=1./255)<br>\ntraining_set = train_datagen.flow_from_directory('dataset/training_set',target_size=(64,64),batch_size=32,class_mode='binary')<br>\ntest_set = test_datagen.flow_from_directory('dataset/test_set',target_size=(64,64),batch_size=32,class_mode='binary')</p>\n<h1>Let's fit the data to our model</h1>\n<p>classifier.fit_generator(training_set,steps_per_epoch=8000,epochs=25,validation_data=test_set,validation_steps=2000)</p>\n<h1>Part 3 - Making new predictions from our trained model</h1>\n<p>import numpy as np<br>\nfrom keras.preprocessing import image<br>\ntest_image = image.load_img('dataset/single_prediction/cat_or_dog_1.jpg',target_size=(64,64))<br>\ntest_image = image.img_to_array(test_image)<br>\ntest_image = np.expand_dims(test_image,axis=0)<br>\nresult = classifier.predict(test_image)<br>\ntraining_set.class_indices<br>\nif result[0][0]==1:<br>\nprediction = 'dog'<br>\nprint('This is a dog!')<br>\nelse:<br>\nprediction = 'cat'<br>\nprint('This is a cat')</p>\n<h1>End CNN example</h1>\n<p>The difference is about 3-4%.  I have tried serveral times but the behaviour is unchanged.<br>\nSo, If you want to try an image classification model (cats vs dogs), then I invite you to use code and try run on your CPU, GPU to verify. The data for model <a href=\"https://drive.google.com/drive/folders/1XaFM8BJFligrqeQdE-_5Id0V_SubJAZe?usp=sharing\" rel=\"nofollow\">here </a>and the origional source code <a href=\"https://becominghuman.ai/building-an-image-classifier-using-deep-learning-in-python-totally-from-a-beginners-perspective-be8dbaf22dd8\" rel=\"nofollow\">here</a>.</p>", "body_text": "Hello everyone,\nI got the same issue. When I tried to train and test a simple CNN model (code below) with keras. Then when I run model on CPU it got the validation accuracy max: 78%, while GPU gave the result: 75% only. I run it with 25 epochs.\nSource code as following:\nImporting the Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nPart 1 - Creating the model\nInitialising the CNN\nclassifier = Sequential()\nStep 1 - Convolution\nclassifier.add(Conv2D(32,(3,3),input_shape=(64,64,3),activation='relu'))\nStep 2 - Pooling\nclassifier.add(MaxPooling2D(pool_size=(2,2)))\nAdding a second convolutional layer\nclassifier.add(Conv2D(32,(3,3),activation='relu'))\nclassifier.add(MaxPooling2D(pool_size=(2,2)))\nStep 3 - Flattening\nclassifier.add(Flatten())\nStep 4 - Full connection\nclassifier.add(Dense(units=128,activation='relu'))\nclassifier.add(Dense(units=1,activation='sigmoid'))\nCompiling the CNN\nclassifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\nPart 2 - Fitting the CNN to the images\nfrom keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1./255)\ntraining_set = train_datagen.flow_from_directory('dataset/training_set',target_size=(64,64),batch_size=32,class_mode='binary')\ntest_set = test_datagen.flow_from_directory('dataset/test_set',target_size=(64,64),batch_size=32,class_mode='binary')\nLet's fit the data to our model\nclassifier.fit_generator(training_set,steps_per_epoch=8000,epochs=25,validation_data=test_set,validation_steps=2000)\nPart 3 - Making new predictions from our trained model\nimport numpy as np\nfrom keras.preprocessing import image\ntest_image = image.load_img('dataset/single_prediction/cat_or_dog_1.jpg',target_size=(64,64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image,axis=0)\nresult = classifier.predict(test_image)\ntraining_set.class_indices\nif result[0][0]==1:\nprediction = 'dog'\nprint('This is a dog!')\nelse:\nprediction = 'cat'\nprint('This is a cat')\nEnd CNN example\nThe difference is about 3-4%.  I have tried serveral times but the behaviour is unchanged.\nSo, If you want to try an image classification model (cats vs dogs), then I invite you to use code and try run on your CPU, GPU to verify. The data for model here and the origional source code here.", "body": "Hello everyone,\r\n\r\nI got the same issue. When I tried to train and test a simple CNN model (code below) with keras. Then when I run model on CPU it got the validation accuracy max: 78%, while GPU gave the result: 75% only. I run it with 25 epochs.\r\nSource code as following:\r\n# Importing the Keras libraries and packages\r\nfrom keras.models import Sequential\r\nfrom keras.layers import Conv2D\r\nfrom keras.layers import MaxPooling2D\r\nfrom keras.layers import Flatten\r\nfrom keras.layers import Dense\r\n\r\n# Part 1 - Creating the model\r\n# Initialising the CNN\r\nclassifier = Sequential()\r\n# Step 1 - Convolution\r\nclassifier.add(Conv2D(32,(3,3),input_shape=(64,64,3),activation='relu'))\r\n# Step 2 - Pooling\r\nclassifier.add(MaxPooling2D(pool_size=(2,2)))\r\n# Adding a second convolutional layer\r\nclassifier.add(Conv2D(32,(3,3),activation='relu'))\r\nclassifier.add(MaxPooling2D(pool_size=(2,2)))\r\n# Step 3 - Flattening\r\nclassifier.add(Flatten())\r\n# Step 4 - Full connection\r\nclassifier.add(Dense(units=128,activation='relu'))\r\nclassifier.add(Dense(units=1,activation='sigmoid'))\r\n# Compiling the CNN\r\nclassifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\r\n\r\n# Part 2 - Fitting the CNN to the images\r\nfrom keras.preprocessing.image import ImageDataGenerator\r\ntrain_datagen = ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)\r\ntest_datagen = ImageDataGenerator(rescale=1./255)\r\ntraining_set = train_datagen.flow_from_directory('dataset/training_set',target_size=(64,64),batch_size=32,class_mode='binary')\r\ntest_set = test_datagen.flow_from_directory('dataset/test_set',target_size=(64,64),batch_size=32,class_mode='binary')\r\n\r\n# Let's fit the data to our model\r\nclassifier.fit_generator(training_set,steps_per_epoch=8000,epochs=25,validation_data=test_set,validation_steps=2000)\r\n\r\n# Part 3 - Making new predictions from our trained model\r\nimport numpy as np\r\nfrom keras.preprocessing import image\r\ntest_image = image.load_img('dataset/single_prediction/cat_or_dog_1.jpg',target_size=(64,64))\r\ntest_image = image.img_to_array(test_image)\r\ntest_image = np.expand_dims(test_image,axis=0)\r\nresult = classifier.predict(test_image)\r\ntraining_set.class_indices\r\nif result[0][0]==1:\r\n    prediction = 'dog'\r\n    print('This is a dog!')\r\nelse:\r\n    prediction = 'cat'\r\n    print('This is a cat')\r\n\r\n# End CNN example\r\n\r\nThe difference is about 3-4%.  I have tried serveral times but the behaviour is unchanged. \r\nSo, If you want to try an image classification model (cats vs dogs), then I invite you to use code and try run on your CPU, GPU to verify. The data for model [here ](https://drive.google.com/drive/folders/1XaFM8BJFligrqeQdE-_5Id0V_SubJAZe?usp=sharing)and the origional source code [here](https://becominghuman.ai/building-an-image-classifier-using-deep-learning-in-python-totally-from-a-beginners-perspective-be8dbaf22dd8).\r\n"}