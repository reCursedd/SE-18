{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/274751836", "html_url": "https://github.com/tensorflow/tensorflow/issues/252#issuecomment-274751836", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/252", "id": 274751836, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDc1MTgzNg==", "user": {"login": "classner", "id": 731387, "node_id": "MDQ6VXNlcjczMTM4Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/731387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/classner", "html_url": "https://github.com/classner", "followers_url": "https://api.github.com/users/classner/followers", "following_url": "https://api.github.com/users/classner/following{/other_user}", "gists_url": "https://api.github.com/users/classner/gists{/gist_id}", "starred_url": "https://api.github.com/users/classner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/classner/subscriptions", "organizations_url": "https://api.github.com/users/classner/orgs", "repos_url": "https://api.github.com/users/classner/repos", "events_url": "https://api.github.com/users/classner/events{/privacy}", "received_events_url": "https://api.github.com/users/classner/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-24T09:27:13Z", "updated_at": "2017-01-24T09:27:13Z", "author_association": "NONE", "body_html": "<p>Great news from the side of PyPy: since version 5.6.0 (released in November) the devs included a compatibility layer for the CPython C-API (cpyext) (see also <a href=\"https://morepypy.blogspot.de/2016/11/pypy27-v56-released-stdlib-2712-support.html\" rel=\"nofollow\">here</a>). With this, I was able to build numpy, scipy and sklearn out-of-the box, so finally machine learning with pypy gets interesting.</p>\n<p>Of course I wanted to then also check tensorflow, with pretty good results! The build completes successfully out-of-the box (!!), so no need to adapt any interfaces. However, <code>import tensorflow</code> then fails with the well-known \"ImportError: No module named _pywrap_tensorflow\" (of course not from the tensorflow directory). Looking into it, <code>ldd -r _pywrap_tensorflow.so</code> gave me some \"undefined symbol: PyPy....\" errors, indicating that just an additional link command during the build could fix the issue! Since I'm not so familiar with bazel, I didn't go further to resolve it...</p>", "body_text": "Great news from the side of PyPy: since version 5.6.0 (released in November) the devs included a compatibility layer for the CPython C-API (cpyext) (see also here). With this, I was able to build numpy, scipy and sklearn out-of-the box, so finally machine learning with pypy gets interesting.\nOf course I wanted to then also check tensorflow, with pretty good results! The build completes successfully out-of-the box (!!), so no need to adapt any interfaces. However, import tensorflow then fails with the well-known \"ImportError: No module named _pywrap_tensorflow\" (of course not from the tensorflow directory). Looking into it, ldd -r _pywrap_tensorflow.so gave me some \"undefined symbol: PyPy....\" errors, indicating that just an additional link command during the build could fix the issue! Since I'm not so familiar with bazel, I didn't go further to resolve it...", "body": "Great news from the side of PyPy: since version 5.6.0 (released in November) the devs included a compatibility layer for the CPython C-API (cpyext) (see also [here](https://morepypy.blogspot.de/2016/11/pypy27-v56-released-stdlib-2712-support.html)). With this, I was able to build numpy, scipy and sklearn out-of-the box, so finally machine learning with pypy gets interesting.\r\n\r\nOf course I wanted to then also check tensorflow, with pretty good results! The build completes successfully out-of-the box (!!), so no need to adapt any interfaces. However, `import tensorflow` then fails with the well-known \"ImportError: No module named _pywrap_tensorflow\" (of course not from the tensorflow directory). Looking into it, `ldd -r _pywrap_tensorflow.so` gave me some \"undefined symbol: PyPy....\" errors, indicating that just an additional link command during the build could fix the issue! Since I'm not so familiar with bazel, I didn't go further to resolve it..."}