{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/276466677", "html_url": "https://github.com/tensorflow/tensorflow/issues/252#issuecomment-276466677", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/252", "id": 276466677, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjQ2NjY3Nw==", "user": {"login": "classner", "id": 731387, "node_id": "MDQ6VXNlcjczMTM4Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/731387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/classner", "html_url": "https://github.com/classner", "followers_url": "https://api.github.com/users/classner/followers", "following_url": "https://api.github.com/users/classner/following{/other_user}", "gists_url": "https://api.github.com/users/classner/gists{/gist_id}", "starred_url": "https://api.github.com/users/classner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/classner/subscriptions", "organizations_url": "https://api.github.com/users/classner/orgs", "repos_url": "https://api.github.com/users/classner/repos", "events_url": "https://api.github.com/users/classner/events{/privacy}", "received_events_url": "https://api.github.com/users/classner/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-31T19:31:55Z", "updated_at": "2017-01-31T19:31:55Z", "author_association": "NONE", "body_html": "<p>Alright, managed to build with bazel and cmake successfully (v1.0.0-rc0). The trick to make it work is to rename the generated <code>_pywrap_tensorflow.so</code> to <code>_pywrap_tensorflow.pypy-XX.so</code>, where XX is the pypy version code (in my case 41 for pypy 5.6.0). With this naming scheme, <code>import tensorflow</code> works nicely. So second base touched.</p>\n<p>This part of the 'get started' code runs:</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\n# Create 100 phony x, y data points in NumPy, y = x * 0.1 + 0.3\nx_data = np.random.rand(100).astype(np.float32)\ny_data = x_data * 0.1 + 0.3\n\n# Try to find values for W and b that compute y_data = W * x_data + b\n# (We know that W should be 0.1 and b 0.3, but TensorFlow will\n# figure that out for us.)\nW = tf.Variable(tf.random_uniform([1], -1.0, 1.0))\nb = tf.Variable(tf.zeros([1]))\ny = W * x_data + b\n\n# Minimize the mean squared errors.\nloss = tf.reduce_mean(tf.square(y - y_data))\noptimizer = tf.train.GradientDescentOptimizer(0.5)\ntrain = optimizer.minimize(loss)\n\n# Before starting, initialize the variables.  We will 'run' this first.\ninit = tf.global_variables_initializer()\n\n# Launch the graph.\nsess = tf.Session()\n</code></pre>\n<p><code>sess.run(init)</code> fails with a <code>TypeError</code>:</p>\n<p><code>TypeError: in method 'TF_DeleteBuffer', argument 1 of type 'TF_Buffer *'</code>.</p>", "body_text": "Alright, managed to build with bazel and cmake successfully (v1.0.0-rc0). The trick to make it work is to rename the generated _pywrap_tensorflow.so to _pywrap_tensorflow.pypy-XX.so, where XX is the pypy version code (in my case 41 for pypy 5.6.0). With this naming scheme, import tensorflow works nicely. So second base touched.\nThis part of the 'get started' code runs:\nimport tensorflow as tf\nimport numpy as np\n\n# Create 100 phony x, y data points in NumPy, y = x * 0.1 + 0.3\nx_data = np.random.rand(100).astype(np.float32)\ny_data = x_data * 0.1 + 0.3\n\n# Try to find values for W and b that compute y_data = W * x_data + b\n# (We know that W should be 0.1 and b 0.3, but TensorFlow will\n# figure that out for us.)\nW = tf.Variable(tf.random_uniform([1], -1.0, 1.0))\nb = tf.Variable(tf.zeros([1]))\ny = W * x_data + b\n\n# Minimize the mean squared errors.\nloss = tf.reduce_mean(tf.square(y - y_data))\noptimizer = tf.train.GradientDescentOptimizer(0.5)\ntrain = optimizer.minimize(loss)\n\n# Before starting, initialize the variables.  We will 'run' this first.\ninit = tf.global_variables_initializer()\n\n# Launch the graph.\nsess = tf.Session()\n\nsess.run(init) fails with a TypeError:\nTypeError: in method 'TF_DeleteBuffer', argument 1 of type 'TF_Buffer *'.", "body": "Alright, managed to build with bazel and cmake successfully (v1.0.0-rc0). The trick to make it work is to rename the generated `_pywrap_tensorflow.so` to `_pywrap_tensorflow.pypy-XX.so`, where XX is the pypy version code (in my case 41 for pypy 5.6.0). With this naming scheme, `import tensorflow` works nicely. So second base touched.\r\n\r\nThis part of the 'get started' code runs:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\n# Create 100 phony x, y data points in NumPy, y = x * 0.1 + 0.3\r\nx_data = np.random.rand(100).astype(np.float32)\r\ny_data = x_data * 0.1 + 0.3\r\n\r\n# Try to find values for W and b that compute y_data = W * x_data + b\r\n# (We know that W should be 0.1 and b 0.3, but TensorFlow will\r\n# figure that out for us.)\r\nW = tf.Variable(tf.random_uniform([1], -1.0, 1.0))\r\nb = tf.Variable(tf.zeros([1]))\r\ny = W * x_data + b\r\n\r\n# Minimize the mean squared errors.\r\nloss = tf.reduce_mean(tf.square(y - y_data))\r\noptimizer = tf.train.GradientDescentOptimizer(0.5)\r\ntrain = optimizer.minimize(loss)\r\n\r\n# Before starting, initialize the variables.  We will 'run' this first.\r\ninit = tf.global_variables_initializer()\r\n\r\n# Launch the graph.\r\nsess = tf.Session()\r\n```\r\n\r\n`sess.run(init)` fails with a `TypeError`:\r\n\r\n`TypeError: in method 'TF_DeleteBuffer', argument 1 of type 'TF_Buffer *'`.\r\n\r\n\r\n"}