{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19407", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19407/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19407/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19407/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19407", "id": 324567549, "node_id": "MDU6SXNzdWUzMjQ1Njc1NDk=", "number": 19407, "title": "Using estimators created by `tf.keras.estimator.model_to_estimator` in `tf.estimator.train_and_evaluate` causes a memory leak of sorts", "user": {"login": "zmjjmz", "id": 1694612, "node_id": "MDQ6VXNlcjE2OTQ2MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1694612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmjjmz", "html_url": "https://github.com/zmjjmz", "followers_url": "https://api.github.com/users/zmjjmz/followers", "following_url": "https://api.github.com/users/zmjjmz/following{/other_user}", "gists_url": "https://api.github.com/users/zmjjmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmjjmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmjjmz/subscriptions", "organizations_url": "https://api.github.com/users/zmjjmz/orgs", "repos_url": "https://api.github.com/users/zmjjmz/repos", "events_url": "https://api.github.com/users/zmjjmz/events{/privacy}", "received_events_url": "https://api.github.com/users/zmjjmz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-05-18T22:17:38Z", "updated_at": "2018-11-10T18:48:58Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes, see provided gist</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Debian Jessie</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: ('v1.8.0-0-g93bc2e2072', '1.8.0')</li>\n<li><strong>Python version</strong>: 2.7.9</li>\n<li><strong>Bazel version (if compiling from source)</strong>: n/a</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: n/a</li>\n<li><strong>CUDA/cuDNN version</strong>: n/a</li>\n<li><strong>GPU model and memory</strong>: n/a</li>\n<li><strong>Exact command to reproduce</strong>: Run provided gist</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When using keras models with <code>train_and_evaluate</code>, you need to convert them into estimators first. The best way to do this is <code>tf.keras.estimator.model_to_estimator</code>. However, when <code>train_and_evaluate</code> is called with those estimators, the default graphs that are created end up referenced in <code>_GRAPH_LEARNING_PHASES</code> and never deallocated (so sort of a memory leak). This is due to a call to <code>keras.backend.set_learning_phase</code> that's done as part of the created <code>model_fn</code>, which uses the default graph as a key into <code>_GRAPH_LEARNING_PHASES</code>. Since that graph changes every so often in <code>train_and_evaluate</code>, that key changes so there's a new key inserted without the old ones being removed.</p>\n<p>Or at leas, I'm 80% certain that's what's going on. You can see in the provided code a very simple Keras model turned into an estimator and then run with a hook that prints out memory usage and the size of <code>_GRAPH_LEARNING_PHASES</code>. It increases over time!</p>\n<p>While the leak is small in the provided example, it has caused me great strife in real usage.</p>\n<h3>Source code / logs</h3>\n<p>The source code and a sample run are provided in <a href=\"https://gist.github.com/zmjjmz/392ead713f19db025390f6d8de17bde2\">this gist</a>. It should be easy to run the python script yourself however you'll need to have <code>numpy</code> and <code>psutil</code> installed.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes, see provided gist\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Debian Jessie\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): ('v1.8.0-0-g93bc2e2072', '1.8.0')\nPython version: 2.7.9\nBazel version (if compiling from source): n/a\nGCC/Compiler version (if compiling from source): n/a\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\nExact command to reproduce: Run provided gist\n\nDescribe the problem\nWhen using keras models with train_and_evaluate, you need to convert them into estimators first. The best way to do this is tf.keras.estimator.model_to_estimator. However, when train_and_evaluate is called with those estimators, the default graphs that are created end up referenced in _GRAPH_LEARNING_PHASES and never deallocated (so sort of a memory leak). This is due to a call to keras.backend.set_learning_phase that's done as part of the created model_fn, which uses the default graph as a key into _GRAPH_LEARNING_PHASES. Since that graph changes every so often in train_and_evaluate, that key changes so there's a new key inserted without the old ones being removed.\nOr at leas, I'm 80% certain that's what's going on. You can see in the provided code a very simple Keras model turned into an estimator and then run with a hook that prints out memory usage and the size of _GRAPH_LEARNING_PHASES. It increases over time!\nWhile the leak is small in the provided example, it has caused me great strife in real usage.\nSource code / logs\nThe source code and a sample run are provided in this gist. It should be easy to run the python script yourself however you'll need to have numpy and psutil installed.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes, see provided gist\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Debian Jessie\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: ('v1.8.0-0-g93bc2e2072', '1.8.0')\r\n- **Python version**: 2.7.9\r\n- **Bazel version (if compiling from source)**: n/a\r\n- **GCC/Compiler version (if compiling from source)**: n/a\r\n- **CUDA/cuDNN version**: n/a\r\n- **GPU model and memory**: n/a\r\n- **Exact command to reproduce**: Run provided gist\r\n\r\n\r\n### Describe the problem\r\nWhen using keras models with `train_and_evaluate`, you need to convert them into estimators first. The best way to do this is `tf.keras.estimator.model_to_estimator`. However, when `train_and_evaluate` is called with those estimators, the default graphs that are created end up referenced in `_GRAPH_LEARNING_PHASES` and never deallocated (so sort of a memory leak). This is due to a call to `keras.backend.set_learning_phase` that's done as part of the created `model_fn`, which uses the default graph as a key into `_GRAPH_LEARNING_PHASES`. Since that graph changes every so often in `train_and_evaluate`, that key changes so there's a new key inserted without the old ones being removed.\r\n\r\nOr at leas, I'm 80% certain that's what's going on. You can see in the provided code a very simple Keras model turned into an estimator and then run with a hook that prints out memory usage and the size of `_GRAPH_LEARNING_PHASES`. It increases over time!\r\n\r\nWhile the leak is small in the provided example, it has caused me great strife in real usage.\r\n### Source code / logs\r\n\r\nThe source code and a sample run are provided in [this gist](https://gist.github.com/zmjjmz/392ead713f19db025390f6d8de17bde2). It should be easy to run the python script yourself however you'll need to have `numpy` and `psutil` installed."}