{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/88146284", "pull_request_review_id": 8651756, "id": 88146284, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MTQ2Mjg0", "diff_hunk": "@@ -121,25 +142,47 @@ def setup_train_data_feeder(\n def _batch_data(x, batch_size=None):\n   if (batch_size is not None) and (batch_size <= 0):\n     raise ValueError('Invalid batch_size %d.' % batch_size)\n-  chunk = []\n+\n+  x_first_el = six.next(x)\n+  x = itertools.chain([x_first_el], x)\n+\n+  chunk = dict([(k, []) for k in x_first_el.keys()]) if isinstance(x_first_el, dict) else []\n+  chunk_filled = False\n   for data in x:\n-    chunk.append(data)\n-    if (batch_size is not None) and (len(chunk) >= batch_size):\n-      yield np.matrix(chunk)\n-      chunk = []\n-  yield np.matrix(chunk)\n+    if isinstance(data, dict):\n+      for k, v in data.items():\n+        chunk[k].append(v)\n+        if (batch_size is not None) and (len(chunk[k]) >= batch_size):\n+          chunk[k] = np.matrix(chunk[k])\n+          chunk_filled = True\n+      if chunk_filled:\n+        yield chunk\n+        chunk = dict([(k, []) for k in x_first_el.keys()]) if isinstance(x_first_el, dict) else []\n+        chunk_filled = False\n+    else:\n+      chunk.append(data)\n+      if (batch_size is not None) and (len(chunk) >= batch_size):\n+        yield np.matrix(chunk)\n+        chunk = []\n+\n+  if isinstance(x_first_el, dict):\n+    for k, v in data.items():\n+      chunk[k] = np.matrix(chunk[k])\n+    yield chunk\n+  else:\n+    yield np.matrix(chunk)\n \n \n def setup_predict_data_feeder(x, batch_size=None):\n   \"\"\"Returns an iterable for feeding into predict step.\n \n   Args:\n-    x: numpy, pandas, Dask array or iterable.\n+    x: numpy, pandas, Dask array or dictionary of aforementioned. Also supports iterable.\n     batch_size: Size of batches to split data into.\n       If `None`, returns one batch of full size.\n \n   Returns:\n-    List or iterator of parts of data to predict on.\n+    List or iterator ( or dictionary there of) of parts of data to predict on.", "path": "tensorflow/contrib/learn/python/learn/learn_io/data_feeder.py", "position": null, "original_position": 119, "commit_id": "5655df3757d891180842b5c34072d089867778f4", "original_commit_id": "78e9ff272e31f18def8b0c95ffe474d34671509c", "user": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "body": "no space after (, no space in thereof\n", "created_at": "2016-11-16T00:34:10Z", "updated_at": "2016-11-23T19:04:48Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/5546#discussion_r88146284", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5546", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/88146284"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/5546#discussion_r88146284"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5546"}}, "body_html": "<p>no space after (, no space in thereof</p>", "body_text": "no space after (, no space in thereof"}