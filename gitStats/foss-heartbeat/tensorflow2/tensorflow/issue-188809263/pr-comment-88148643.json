{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/88148643", "pull_request_review_id": 8651756, "id": 88148643, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MTQ4NjQz", "diff_hunk": "@@ -224,58 +267,77 @@ def __init__(\n     \"\"\"Initializes a DataFeeder instance.\n \n     Args:\n-      x: Feature Nd numpy matrix of shape `[n_samples, n_features, ...]`.\n-      y: Label vector, either floats for regression or class id for\n+      x: Feature Nd numpy matrix of shape `[n_samples, n_features, ...]` or dictionary of aforementioned.\n+      y: label vector, either floats for regression or class id for\n         classification. If matrix, will consider as a sequence\n-        of labels. Can be `None` for unsupervised setting.\n+        of labels. Can be `None` for unsupervised setting. Also supports dictionary of labels.\n       n_classes: Number of classes, 0 and 1 are considered regression, `None`\n-        will pass through the input labels without one-hot conversion.\n+        will pass through the input labels without one-hot conversion. Also, if y is dict, then\n+        n_classes must be dict such that n_classes[key] = n_classes for label y[key], None otherwise.\n       batch_size: Mini-batch size to accumulate.\n       shuffle: Whether to shuffle `x`.\n       random_state: Numpy `RandomState` object to reproduce sampling.\n       epochs: Number of times to iterate over input data before raising\n         `StopIteration` exception.\n \n     Attributes:\n-      x: Input features.\n-      y: Input label.\n+      x: Input features (ndarray or dictionary of ndarrays).\n+      y: Input label (ndarray or dictionary of ndarrays).\n       n_classes: Number of classes (if `None`, pass through indices without\n         one-hot conversion).\n       batch_size: Mini-batch size to accumulate.\n-      input_shape: Shape of the input.\n-      output_shape: Shape of the output.\n-      input_dtype: DType of input.\n-      output_dtype: DType of output.\n+      input_shape: Shape of the input ( or dictionary of shapes).\n+      output_shape: Shape of the output ( or dictionary of shapes).\n+      input_dtype: DType of input (or dictionary of shapes).\n+      output_dtype: DType of output (or dictionary of shapes.\n     \"\"\"\n-    self._x = check_array(x, dtype=x.dtype)\n-    # self.n_classes is None means we're passing in raw label indices.\n-    y_dtype = (\n-        np.int64 if n_classes is not None and n_classes > 1 else np.float32)\n+    x_is_dict, y_is_dict = isinstance(x, dict), y is not None and isinstance(y, dict)\n+    if isinstance(y, list):\n+      y = np.array(y)\n+\n+    self._x = dict([(k, check_array(v, v.dtype)) for k, v in x.items()]) if x_is_dict else check_array(x, x.dtype)\n+    self._y = None if y is None else \\\n+      dict([(k, check_array(v, v.dtype)) for k, v in y.items()]) if x_is_dict else check_array(y, y.dtype)\n+\n+    # self.n_classes is not None means we're converting raw target indices to one-hot.\n     if n_classes is not None:\n-      self._y = (None if y is None else check_array(y, dtype=y_dtype))\n-    elif isinstance(y, list):\n-      self._y = np.array(y)\n-    else:\n-      self._y = y\n+      if not y_is_dict:\n+        assert (not isinstance(n_classes, dict))", "path": "tensorflow/contrib/learn/python/learn/learn_io/data_feeder.py", "position": null, "original_position": 181, "commit_id": "5655df3757d891180842b5c34072d089867778f4", "original_commit_id": "78e9ff272e31f18def8b0c95ffe474d34671509c", "user": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "body": "I think this assert is implied by the above code. Please remove it.\n", "created_at": "2016-11-16T00:54:20Z", "updated_at": "2016-11-23T19:04:48Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/5546#discussion_r88148643", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5546", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/88148643"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/5546#discussion_r88148643"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5546"}}, "body_html": "<p>I think this assert is implied by the above code. Please remove it.</p>", "body_text": "I think this assert is implied by the above code. Please remove it."}