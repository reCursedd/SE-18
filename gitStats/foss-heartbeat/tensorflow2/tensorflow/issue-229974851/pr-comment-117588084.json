{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/117588084", "pull_request_review_id": 39313742, "id": 117588084, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzU4ODA4NA==", "diff_hunk": "@@ -109,14 +110,52 @@ inline Cuda2DLaunchConfig GetCuda2DLaunchConfig(int xdim, int ydim,\n \n   config.thread_per_block = dim3(block_cols, block_rows, 1);\n \n-  int grid_x = std::min((xdim + block_cols - 1) / block_cols, max_blocks);\n+  int grid_x = std::min(DIV_UP(xdim, block_cols), max_blocks);\n \n   config.block_count = dim3(\n       grid_x, std::min(max_blocks / grid_x, std::max(ydim / block_rows, 1)), 1);\n \n   return config;\n }\n \n+// Calculate the Cuda 2D and 3D launch config we should use for a kernel launch.\n+// This variant takes the resource limits of func into account to maximize occupancy.\n+using Cuda3DLaunchConfig = Cuda2DLaunchConfig;\n+\n+template <typename DeviceFunc>\n+inline Cuda3DLaunchConfig GetCuda3DLaunchConfig(int xdim, int ydim, int zdim,\n+                                                const GPUDevice& d, DeviceFunc func,\n+                                                size_t dynamic_shared_memory_size = 0) {\n+  int block_count = 0;\n+  int thread_per_block = 0;\n+  cudaOccupancyMaxPotentialBlockSize(&block_count, &thread_per_block, func,\n+                                     dynamic_shared_memory_size,\n+                                     xdim * ydim * zdim);\n+\n+  int threadsx = std::min(xdim, thread_per_block);\n+  int threadsy = std::min(ydim, std::max(thread_per_block / threadsx, 1));\n+  int threadsz = std::min(zdim, std::max(thread_per_block / (threadsx * threadsy), 1));", "path": "tensorflow/core/util/cuda_kernel_helper.h", "position": null, "original_position": 65, "commit_id": "7405ef3598bf8a255f1b027448f887d6ff8bafe3", "original_commit_id": "3f8963c63420291f70cb1ee6ea3c41b1006b75c8", "user": {"login": "zasdfgbnm", "id": 1032377, "node_id": "MDQ6VXNlcjEwMzIzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1032377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zasdfgbnm", "html_url": "https://github.com/zasdfgbnm", "followers_url": "https://api.github.com/users/zasdfgbnm/followers", "following_url": "https://api.github.com/users/zasdfgbnm/following{/other_user}", "gists_url": "https://api.github.com/users/zasdfgbnm/gists{/gist_id}", "starred_url": "https://api.github.com/users/zasdfgbnm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zasdfgbnm/subscriptions", "organizations_url": "https://api.github.com/users/zasdfgbnm/orgs", "repos_url": "https://api.github.com/users/zasdfgbnm/repos", "events_url": "https://api.github.com/users/zasdfgbnm/events{/privacy}", "received_events_url": "https://api.github.com/users/zasdfgbnm/received_events", "type": "User", "site_admin": false}, "body": "fixed", "created_at": "2017-05-19T22:38:20Z", "updated_at": "2017-06-06T06:12:28Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10032#discussion_r117588084", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10032", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/117588084"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10032#discussion_r117588084"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10032"}}, "body_html": "<p>fixed</p>", "body_text": "fixed", "in_reply_to_id": 117505352}