{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/157866538", "pull_request_review_id": 83376373, "id": 157866538, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg2NjUzOA==", "diff_hunk": "@@ -0,0 +1,266 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#ifndef TENSORFLOW_JAVA_SRC_GEN_CC_JAVA_DEFS_H_\n+#define TENSORFLOW_JAVA_SRC_GEN_CC_JAVA_DEFS_H_\n+\n+#include <string>\n+#include <vector>\n+#include <deque>\n+\n+#include \"tensorflow/core/platform/env.h\"\n+\n+namespace tensorflow {\n+namespace java {\n+\n+/// \\brief An enumeration of different modifiers commonly used in Java\n+enum Modifier {\n+  PUBLIC    = (1 << 0),\n+  PROTECTED = (1 << 1),\n+  PRIVATE   = (1 << 2),\n+  STATIC    = (1 << 3),\n+  FINAL     = (1 << 4),\n+};\n+\n+class Annotation;\n+\n+/// \\brief A definition of any kind of Java type (classes, interfaces...)\n+///\n+/// Note that most of the data fields of this class are only useful in specific\n+/// contexts and are not required in many cases. For example, annotations and\n+/// supertypes are only useful when declaring a type.\n+class Type {\n+ public:\n+  enum Kind {\n+    PRIMITIVE, CLASS, INTERFACE, ENUM, GENERIC, ANNOTATION\n+  };\n+  struct Comparator {\n+    bool operator() (const Type& type1, const Type& type2) {\n+      return type1.name_ < type2.name_ || type1.package_ < type2.package_;\n+    }\n+  };\n+  static Type Primitive(const string& name) {\n+    return Type(Type::PRIMITIVE, name, \"\");\n+  }\n+  static Type Class(const string& name, const string& package = \"\") {\n+    return Type(Type::CLASS, name, package);\n+  }\n+  static Type Interface(const string& name, const string& package = \"\") {\n+    return Type(Type::INTERFACE, name, package);\n+  }\n+  static Type Enum(const string& name, const string& package = \"\") {\n+    return Type(Type::ENUM, name, package);\n+  }\n+  static Type Generic(const string& name) {\n+    return Type(Type::GENERIC, name, \"\");\n+  }\n+  static Type Wildcard() {\n+    return Type(Type::GENERIC, \"\", \"\");\n+  }\n+  static Type ClassOf(const Type& type) {\n+    return Class(\"Class\").param(type);\n+  }\n+  static Type ListOf(const Type& type) {\n+    return Interface(\"List\", \"java.util\").param(type);\n+  }\n+  static Type IterableOf(const Type& type) {\n+    return Interface(\"Iterable\").param(type);\n+  }\n+  const Kind& kind() const { return kind_; }\n+  const string& name() const { return name_; }\n+  const string& package() const { return package_; }\n+  const string& descr() const { return descr_; }\n+  Type& descr(const string& descr) { descr_ = descr; return *this; }\n+  const std::vector<Type>& params() const { return params_; }\n+  Type& param(const Type& param) {\n+    params_.push_back(param);\n+    return *this;\n+  }\n+  const std::vector<Annotation>& annotations() const { return annotations_; }\n+  Type& annotation(const Annotation& annotation) {\n+    annotations_.push_back(annotation);\n+    return *this;\n+  }\n+  const std::deque<Type>& supertypes() const { return supertypes_; }\n+  Type& supertype(const Type& type) {\n+    if (type.kind_ == CLASS) {\n+      supertypes_.push_front(type);  // keep superclass at the front of the list\n+    } else if (type.kind_ == INTERFACE) {\n+      supertypes_.push_back(type);\n+    }\n+    return *this;\n+  }\n+  /// Returns true if \"type\" is of a known collection type (only a few for now)\n+  bool IsCollection() const {\n+    return name_ == \"List\" || name_ == \"Iterable\";\n+  }\n+  /// Returns true if this instance is a wildcard (<?>)\n+  bool IsWildcard() const {\n+    return kind_ == GENERIC && name_.empty();\n+  }\n+  bool operator==(const Type& type) const {\n+      return name_ == type.name_ && package_ == type.package_;\n+  }\n+  bool operator!=(const Type& type) const { return !(*this == type); }\n+\n+ protected:\n+  Type(Kind kind, const string& name, const string& package)\n+    : kind_(kind), name_(name), package_(package) {}\n+\n+ private:\n+  Kind kind_;\n+  string name_;\n+  string package_;\n+  string descr_;\n+  std::vector<Type> params_;\n+  std::vector<Annotation> annotations_;\n+  std::deque<Type> supertypes_;\n+};\n+\n+/// \\brief Definition of a Java annotation\n+///\n+/// This class only defines the usage of an annotation in a specific context,\n+/// giving optionally a set of attributes to initialize.\n+class Annotation : public Type {\n+ public:\n+  static Annotation Of(const string& type_name, const string& package = \"\") {\n+    return Annotation(type_name, package);\n+  }\n+  const string& attrs() const { return attrs_; }\n+  Annotation& attrs(const string& attrs) { attrs_ = attrs; return *this; }\n+\n+ private:\n+  string attrs_;\n+\n+  Annotation(const string& name, const string& package)\n+    : Type(Kind::ANNOTATION, name, package) {}\n+};\n+\n+/// \\brief A definition of a Java variable\n+///\n+/// This class defines an instance of a type, which could be documented.\n+class Variable {\n+ public:\n+  static Variable Of(const string& name, const Type& type) {", "path": "tensorflow/java/src/gen/cc/java_defs.h", "position": null, "original_position": 156, "commit_id": "da52ece97d0f0b090e6da2d191d3a8ef03ba2756", "original_commit_id": "24964556b0091f97f3ae5bd1a923d742a296353d", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "The \"Of\" here was a little confusing to me. This creates a \"variable of type `type` named `name`\", right?\r\nPerhaps call it `Variable::Create(const string& name, const Type& type)`?", "created_at": "2017-12-19T20:28:03Z", "updated_at": "2017-12-28T21:22:39Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14094#discussion_r157866538", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14094", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/157866538"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14094#discussion_r157866538"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14094"}}, "body_html": "<p>The \"Of\" here was a little confusing to me. This creates a \"variable of type <code>type</code> named <code>name</code>\", right?<br>\nPerhaps call it <code>Variable::Create(const string&amp; name, const Type&amp; type)</code>?</p>", "body_text": "The \"Of\" here was a little confusing to me. This creates a \"variable of type type named name\", right?\nPerhaps call it Variable::Create(const string& name, const Type& type)?"}