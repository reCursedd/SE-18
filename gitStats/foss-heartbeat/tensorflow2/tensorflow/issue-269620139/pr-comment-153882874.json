{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/153882874", "pull_request_review_id": 74981544, "id": 153882874, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mzg4Mjg3NA==", "diff_hunk": "@@ -0,0 +1,262 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include <string>\n+#include <set>\n+#include <vector>\n+#include <deque>\n+\n+#include \"tensorflow/core/lib/core/status.h\"\n+#include \"tensorflow/java/src/gen/cc/source_writer.h\"\n+#include \"tensorflow/java/src/gen/cc/java_defs.h\"\n+#include \"tensorflow/java/src/gen/cc/java_writer.h\"\n+\n+namespace tensorflow {\n+namespace java {\n+namespace {\n+\n+/// \\brief A function used to collect generic type parameters discovered while\n+///        scanning an object for types (e.g. JavaMethod::ScanTypes)\n+class GenericTypeScanner {\n+ public:\n+  explicit GenericTypeScanner(std::set<string>* declared_names)\n+    : declared_names_(declared_names) {}\n+  const std::vector<const JavaType*>& discoveredTypes() const {\n+    return discovered_types_;\n+  }\n+  void operator()(const JavaType* type) {\n+    if (type->kind() == JavaType::GENERIC && !type->name().empty()\n+        && (declared_names_->find(type->name()) == declared_names_->end())) {\n+      discovered_types_.push_back(type);\n+      declared_names_->insert(type->name());\n+    }\n+  }\n+ private:\n+  std::vector<const JavaType*> discovered_types_;\n+  std::set<string>* declared_names_;\n+};\n+\n+void WriteModifiers(int modifiers, SourceWriter* src_writer) {\n+  if (modifiers & PUBLIC) {\n+    src_writer->Write(\"public \");\n+  } else if (modifiers & PROTECTED) {\n+    src_writer->Write(\"protected \");\n+  } else if (modifiers & PRIVATE) {\n+    src_writer->Write(\"private \");\n+  }\n+  if (modifiers & STATIC) {\n+    src_writer->Write(\"static \");\n+  }\n+  if (modifiers & FINAL) {\n+    src_writer->Write(\"final \");\n+  }\n+}\n+\n+void WriteType(const JavaType& type, SourceWriter* src_writer) {\n+  src_writer->Write(Java::IsWildcard(type) ? \"?\" : type.name());\n+  if (!type.params().empty()) {\n+    src_writer->Write(\"<\");\n+    std::vector<JavaType>::const_iterator it;\n+    for (it = type.params().cbegin(); it != type.params().cend(); ++it) {\n+      if (it != type.params().cbegin()) {\n+        src_writer->Write(\", \");\n+      }\n+      WriteType(*it, src_writer);\n+    }\n+    src_writer->Write(\">\");\n+  }\n+}\n+\n+void WriteGenerics(const std::vector<const JavaType*>& generics,\n+    SourceWriter* src_writer) {\n+  src_writer->Write(\"<\");\n+  for (std::vector<const JavaType*>::const_iterator it = generics.cbegin();\n+      it != generics.cend(); ++it) {\n+    if (it != generics.cbegin()) {\n+      src_writer->Write(\", \");\n+    }\n+    src_writer->Write((*it)->name());\n+    if (!(*it)->supertypes().empty()) {\n+      src_writer->Write(\" extends \");\n+      WriteType((*it)->supertypes().front(), src_writer);\n+    }\n+  }\n+  src_writer->Write(\">\");\n+}\n+\n+void WriteAnnotations(const std::vector<JavaAnnot>& annotations,\n+    SourceWriter* src_writer) {\n+  std::vector<JavaAnnot>::const_iterator it;", "path": "tensorflow/java/src/gen/cc/java_writer.cc", "position": null, "original_position": 101, "commit_id": "da52ece97d0f0b090e6da2d191d3a8ef03ba2756", "original_commit_id": "0bc3a8478cda7b65a9ce8e70ef8a95146800e09c", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Use range-based loop here too?\r\n\r\n```c++\r\nfor (const JavaAnnot& a : annotations) {\r\n  src_writer->Write(\"@\" + a.type().name());\r\n  if (!a.attrs().empty()) {\r\n    src_writer->Write(\"(\");\r\n    src_writer->Write(a.attrs());\r\n    src_writer->Write(\")\");\r\n  }\r\n  src_writer->EndOfLine();\r\n}", "created_at": "2017-11-29T18:59:05Z", "updated_at": "2017-12-28T21:22:39Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14094#discussion_r153882874", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14094", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/153882874"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14094#discussion_r153882874"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14094"}}, "body_html": "<p>Use range-based loop here too?</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">for</span> (<span class=\"pl-k\">const</span> JavaAnnot&amp; a : annotations) {\n  src_writer-&gt;<span class=\"pl-c1\">Write</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@<span class=\"pl-pds\">\"</span></span> + a.<span class=\"pl-c1\">type</span>().<span class=\"pl-c1\">name</span>());\n  <span class=\"pl-k\">if</span> (!a.<span class=\"pl-c1\">attrs</span>().<span class=\"pl-c1\">empty</span>()) {\n    src_writer-&gt;<span class=\"pl-c1\">Write</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>(<span class=\"pl-pds\">\"</span></span>);\n    src_writer-&gt;<span class=\"pl-c1\">Write</span>(a.<span class=\"pl-c1\">attrs</span>());\n    src_writer-&gt;<span class=\"pl-c1\">Write</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>)<span class=\"pl-pds\">\"</span></span>);\n  }\n  src_writer-&gt;<span class=\"pl-c1\">EndOfLine</span>();\n}</pre></div>", "body_text": "Use range-based loop here too?\nfor (const JavaAnnot& a : annotations) {\n  src_writer->Write(\"@\" + a.type().name());\n  if (!a.attrs().empty()) {\n    src_writer->Write(\"(\");\n    src_writer->Write(a.attrs());\n    src_writer->Write(\")\");\n  }\n  src_writer->EndOfLine();\n}"}