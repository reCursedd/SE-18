{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154560184", "pull_request_review_id": 80738907, "id": 154560184, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDU2MDE4NA==", "diff_hunk": "@@ -0,0 +1,319 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#ifndef TENSORFLOW_JAVA_SRC_GEN_CC_JAVA_DEFS_H_\n+#define TENSORFLOW_JAVA_SRC_GEN_CC_JAVA_DEFS_H_\n+\n+#include <string>\n+#include <vector>\n+#include <set>\n+#include <deque>\n+\n+#include \"tensorflow/core/platform/types.h\"\n+#include \"tensorflow/core/platform/env.h\"\n+#include \"tensorflow/core/lib/core/stringpiece.h\"\n+\n+namespace tensorflow {\n+namespace java {\n+\n+/// \\brief An enumeration of different modifiers commonly used in Java\n+enum JavaModifier {\n+  PUBLIC    = (1 << 0),\n+  PROTECTED = (1 << 1),\n+  PRIVATE   = (1 << 2),\n+  STATIC    = (1 << 3),\n+  FINAL     = (1 << 4),\n+};\n+\n+/// \\brief A definition of a Java documentation block\n+///\n+/// Any vector of parameters (@param) that should be included in this block\n+/// can be provided separately (e.g. a vector of documented variables, see\n+/// JavaVariable).\n+class JavaDoc {\n+ public:\n+  const string& descr() const { return descr_; }\n+  JavaDoc& descr(const string& txt) { descr_ = txt; return *this; }\n+  const string& value() const { return value_; }\n+  JavaDoc& value(const string& value) { value_ = value; return *this; }\n+  bool empty() const {\n+    return descr().empty() && value().empty();\n+  }\n+\n+ private:\n+  string descr_;\n+  string value_;\n+};\n+\n+/// \\brief A piece of code to read from a file.\n+class JavaSnippet {\n+ public:\n+  explicit JavaSnippet(const string& fname, Env* env = Env::Default()) {\n+    TF_CHECK_OK(ReadFileToString(env, fname, &data_));\n+  }\n+  const string& data() const { return data_; }\n+\n+ private:\n+  string data_;\n+};\n+\n+class JavaAnnot;\n+\n+/// \\brief A definition of any kind of Java type (classes, interfaces...)\n+///\n+/// Note that most of the data fields of this class are only useful in specific\n+/// contexts and are not required in many cases. For example, annotations and\n+/// supertypes are only useful when declaring a type.\n+class JavaType {\n+ public:\n+  enum Kind {\n+    PRIMITIVE, CLASS, INTERFACE, GENERIC, ANNOTATION, NONE\n+  };\n+  JavaType() = default;\n+  const Kind& kind() const { return kind_; }\n+  const string& name() const { return name_; }\n+  const string& package() const { return package_; }\n+  const JavaDoc& doc() const { return doc_; }\n+  JavaDoc* doc_ptr() { return &doc_; }\n+  JavaType& doc(const JavaDoc& doc) { doc_ = doc; return *this; }\n+  const std::vector<JavaType>& params() const { return params_; }\n+  JavaType& param(const JavaType& param) {\n+    params_.push_back(param);\n+    return *this;\n+  }\n+  const std::vector<JavaAnnot>& annotations() const { return annotations_; }\n+  JavaType& annotation(const JavaAnnot& annt) {\n+    annotations_.push_back(annt);\n+    return *this;\n+  }\n+  const std::deque<JavaType>& supertypes() const { return supertypes_; }\n+  JavaType& supertype(const JavaType& type) {\n+    if (type.kind_ == CLASS) {\n+      supertypes_.push_front(type);  // keep superclass at the front of the list\n+    } else if (type.kind_ == INTERFACE) {\n+      supertypes_.push_back(type);\n+    }\n+    return *this;\n+  }\n+  bool empty() const { return kind_ == NONE; }\n+\n+  /// Scans this type and any of its parameter types.\n+  template <class TypeScanner>\n+  void Scan(TypeScanner* scanner) const;\n+\n+  /// For sets\n+  bool operator<(const JavaType& type) const { return name() < type.name(); }\n+\n+ private:\n+  Kind kind_ = NONE;\n+  string name_;\n+  string package_;\n+  std::vector<JavaType> params_;\n+  std::vector<JavaAnnot> annotations_;\n+  std::deque<JavaType> supertypes_;\n+  JavaDoc doc_;\n+\n+  explicit JavaType(Kind kind, const string& name = \"\", const string& pkg = \"\")\n+    : kind_(kind), name_(name), package_(pkg) {}\n+\n+  friend class Java;\n+};\n+\n+/// \\brief Definition of a Java annotation\n+///\n+/// This class only defines the usage of an annotation in a specific context,\n+/// giving optionally a set of attributes to initialize.\n+class JavaAnnot {", "path": "tensorflow/java/src/gen/cc/java_defs.h", "position": null, "original_position": 138, "commit_id": "da52ece97d0f0b090e6da2d191d3a8ef03ba2756", "original_commit_id": "0bc3a8478cda7b65a9ce8e70ef8a95146800e09c", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "body": "Once again a result from packing up a little bit too much to fit easily in 80 characters, haha! But agreed!", "created_at": "2017-12-04T05:03:46Z", "updated_at": "2017-12-28T21:22:39Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14094#discussion_r154560184", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14094", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154560184"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14094#discussion_r154560184"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14094"}}, "body_html": "<p>Once again a result from packing up a little bit too much to fit easily in 80 characters, haha! But agreed!</p>", "body_text": "Once again a result from packing up a little bit too much to fit easily in 80 characters, haha! But agreed!", "in_reply_to_id": 153605888}