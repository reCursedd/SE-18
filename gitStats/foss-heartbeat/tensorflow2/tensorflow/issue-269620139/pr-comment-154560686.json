{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154560686", "pull_request_review_id": 80739486, "id": 154560686, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDU2MDY4Ng==", "diff_hunk": "@@ -0,0 +1,319 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#ifndef TENSORFLOW_JAVA_SRC_GEN_CC_JAVA_DEFS_H_\n+#define TENSORFLOW_JAVA_SRC_GEN_CC_JAVA_DEFS_H_\n+\n+#include <string>\n+#include <vector>\n+#include <set>\n+#include <deque>\n+\n+#include \"tensorflow/core/platform/types.h\"\n+#include \"tensorflow/core/platform/env.h\"\n+#include \"tensorflow/core/lib/core/stringpiece.h\"\n+\n+namespace tensorflow {\n+namespace java {\n+\n+/// \\brief An enumeration of different modifiers commonly used in Java\n+enum JavaModifier {\n+  PUBLIC    = (1 << 0),\n+  PROTECTED = (1 << 1),\n+  PRIVATE   = (1 << 2),\n+  STATIC    = (1 << 3),\n+  FINAL     = (1 << 4),\n+};\n+\n+/// \\brief A definition of a Java documentation block\n+///\n+/// Any vector of parameters (@param) that should be included in this block\n+/// can be provided separately (e.g. a vector of documented variables, see\n+/// JavaVariable).\n+class JavaDoc {\n+ public:\n+  const string& descr() const { return descr_; }\n+  JavaDoc& descr(const string& txt) { descr_ = txt; return *this; }\n+  const string& value() const { return value_; }\n+  JavaDoc& value(const string& value) { value_ = value; return *this; }\n+  bool empty() const {\n+    return descr().empty() && value().empty();\n+  }\n+\n+ private:\n+  string descr_;\n+  string value_;\n+};\n+\n+/// \\brief A piece of code to read from a file.\n+class JavaSnippet {\n+ public:\n+  explicit JavaSnippet(const string& fname, Env* env = Env::Default()) {\n+    TF_CHECK_OK(ReadFileToString(env, fname, &data_));\n+  }\n+  const string& data() const { return data_; }\n+\n+ private:\n+  string data_;\n+};\n+\n+class JavaAnnot;\n+\n+/// \\brief A definition of any kind of Java type (classes, interfaces...)\n+///\n+/// Note that most of the data fields of this class are only useful in specific\n+/// contexts and are not required in many cases. For example, annotations and\n+/// supertypes are only useful when declaring a type.\n+class JavaType {\n+ public:\n+  enum Kind {\n+    PRIMITIVE, CLASS, INTERFACE, GENERIC, ANNOTATION, NONE\n+  };\n+  JavaType() = default;\n+  const Kind& kind() const { return kind_; }\n+  const string& name() const { return name_; }\n+  const string& package() const { return package_; }\n+  const JavaDoc& doc() const { return doc_; }\n+  JavaDoc* doc_ptr() { return &doc_; }\n+  JavaType& doc(const JavaDoc& doc) { doc_ = doc; return *this; }\n+  const std::vector<JavaType>& params() const { return params_; }\n+  JavaType& param(const JavaType& param) {\n+    params_.push_back(param);\n+    return *this;\n+  }\n+  const std::vector<JavaAnnot>& annotations() const { return annotations_; }\n+  JavaType& annotation(const JavaAnnot& annt) {\n+    annotations_.push_back(annt);\n+    return *this;\n+  }\n+  const std::deque<JavaType>& supertypes() const { return supertypes_; }\n+  JavaType& supertype(const JavaType& type) {\n+    if (type.kind_ == CLASS) {\n+      supertypes_.push_front(type);  // keep superclass at the front of the list\n+    } else if (type.kind_ == INTERFACE) {\n+      supertypes_.push_back(type);\n+    }\n+    return *this;\n+  }\n+  bool empty() const { return kind_ == NONE; }\n+\n+  /// Scans this type and any of its parameter types.\n+  template <class TypeScanner>\n+  void Scan(TypeScanner* scanner) const;\n+\n+  /// For sets\n+  bool operator<(const JavaType& type) const { return name() < type.name(); }\n+\n+ private:\n+  Kind kind_ = NONE;\n+  string name_;\n+  string package_;\n+  std::vector<JavaType> params_;\n+  std::vector<JavaAnnot> annotations_;\n+  std::deque<JavaType> supertypes_;\n+  JavaDoc doc_;\n+\n+  explicit JavaType(Kind kind, const string& name = \"\", const string& pkg = \"\")\n+    : kind_(kind), name_(name), package_(pkg) {}\n+\n+  friend class Java;\n+};\n+\n+/// \\brief Definition of a Java annotation\n+///\n+/// This class only defines the usage of an annotation in a specific context,\n+/// giving optionally a set of attributes to initialize.\n+class JavaAnnot {\n+ public:\n+  JavaAnnot() = default;\n+  const JavaType& type() const { return type_; }\n+  const string& attrs() const { return attrs_; }\n+  JavaAnnot& attrs(const string& attrs) { attrs_ = attrs; return *this; }\n+\n+ private:\n+  JavaType type_;\n+  string attrs_;\n+\n+  explicit JavaAnnot(const JavaType& type) : type_(type) {}\n+\n+  friend class Java;\n+};\n+\n+/// \\brief A definition of a Java variable\n+///\n+/// This class defines an instance of a type, which could be documented.\n+class JavaVar {\n+ public:\n+  JavaVar() = default;\n+  const string& name() const { return name_; }\n+  const JavaType& type() const { return type_; }\n+  bool periodic() const { return periodic_; }\n+  const JavaDoc& doc() const { return doc_; }\n+  JavaDoc* doc_ptr() { return &doc_; }\n+  JavaVar& doc(const JavaDoc& doc) { doc_ = doc; return *this; }\n+\n+ private:\n+  string name_;\n+  JavaType type_;\n+  bool periodic_ = false;\n+  JavaDoc doc_;\n+\n+  JavaVar(const string& name, const JavaType& type, bool periodic = false)\n+    : name_(name), type_(type), periodic_(periodic) {}\n+\n+  friend class Java;\n+};\n+\n+/// \\brief A definition of a Java class method\n+///\n+/// This class defines the signature of a method, including its name, return\n+/// type and arguments.\n+class JavaMethod {\n+ public:\n+  JavaMethod() = default;\n+  const string& name() const { return name_; }\n+  const JavaType& type() const { return type_; }\n+  const JavaDoc& doc() const { return doc_; }\n+  JavaDoc* doc_ptr() { return &doc_; }\n+  JavaMethod& doc(const JavaDoc& doc) { doc_ = doc; return *this; }\n+  const std::vector<JavaVar>& args() const { return args_; }\n+  JavaMethod& args(const std::vector<JavaVar>& args) {\n+    args_.insert(args_.cend(), args.cbegin(), args.cend());\n+    return *this;\n+  }\n+  JavaMethod& arg(const JavaVar& var) { args_.push_back(var); return *this; }\n+  const std::vector<JavaAnnot>& annotations() const { return annotations_; }\n+  JavaMethod& annotation(const JavaAnnot& annt) {\n+    annotations_.push_back(annt);\n+    return *this;\n+  }\n+\n+  /// Scans all types found in the signature of this method.\n+  template <class TypeScanner>\n+  void ScanTypes(TypeScanner* scanner, bool scan_return_type) const;\n+\n+ private:\n+  string name_;\n+  JavaType type_;\n+  std::vector<JavaVar> args_;\n+  std::vector<JavaAnnot> annotations_;\n+  JavaDoc doc_;\n+\n+  explicit JavaMethod(const string& name) : name_(name) {}\n+  JavaMethod(const string& name, const JavaType& type)\n+    : name_(name), type_(type) {}\n+\n+  friend class Java;\n+};\n+\n+/// \\brief A factory of common Java definitions and other utilities.\n+class Java {\n+ public:\n+  /// Returns the definition of a Java primitive type\n+  static JavaType Type(const string& name) {\n+    return JavaType(JavaType::PRIMITIVE, name);\n+  }\n+  /// Returns the definition of a Java class\n+  static JavaType Class(const string& name, const string& package = \"\") {\n+    return JavaType(JavaType::CLASS, name, package);\n+  }\n+  /// Returns the definition of a Java interface\n+  static JavaType Interface(const string& name, const string& package = \"\") {\n+    return JavaType(JavaType::INTERFACE, name, package);\n+  }\n+  /// Returns the definition of Java generic type parameter\n+  static JavaType Generic(const string& name) {\n+    return JavaType(JavaType::GENERIC, name);\n+  }\n+  /// Returns the definition of a Java wildcard type parameter (<?>)\n+  static JavaType Wildcard() {\n+    return JavaType(JavaType::GENERIC);\n+  }\n+  /// Returns the definition of a Java annotation\n+  static JavaAnnot Annot(const string& type_name, const string& pkg = \"\") {\n+    return JavaAnnot(JavaType(JavaType::ANNOTATION, type_name, pkg));\n+  }\n+  /// Returns the definition of Java variable\n+  static JavaVar Var(const string& name, const JavaType& type) {\n+    return JavaVar(name, type);\n+  }\n+  /// Returns the definition of periodic Java variable\n+  static JavaVar PeriodicVar(const string& name, const JavaType& type) {\n+    return JavaVar(name, type, true);\n+  }\n+  /// Returns the definition of Java class method\n+  static JavaMethod Method(const string& name, const JavaType& return_type) {\n+    return JavaMethod(name, return_type);\n+  }\n+  /// Returns the definition of a Java class constructor\n+  static JavaMethod ConstructorFor(const JavaType& clazz) {\n+    return JavaMethod(clazz.name());\n+  }\n+  /// Returns the definition of the class of \"type\" (Class<type>)\n+  static JavaType ClassOf(const JavaType& type) {\n+    return Class(\"Class\").param(type);\n+  }\n+  /// Returns the definition of a list of \"type\" (List<type>)\n+  static JavaType ListOf(const JavaType& type) {\n+    return Interface(\"List\", \"java.util\").param(type);\n+  }\n+  /// Returns the definition of a iteration of \"type\" (Iterable<type>)\n+  static JavaType IterableOf(const JavaType& type) {\n+    return Interface(\"Iterable\").param(type);\n+  }\n+  /// Returns true if \"type\" is a wildcard type parameter (<?>)\n+  static bool IsWildcard(const JavaType& type) {\n+    return type.kind() == JavaType::GENERIC && type.name().empty();\n+  }\n+  /// Returns true if \"type\" is of a known collection type (only a few for now)\n+  static bool IsCollection(const JavaType& type) {\n+    return type.name() == \"List\" || type.name() == \"Iterable\";\n+  }\n+};\n+\n+// Templates implementation\n+\n+template <class TypeScanner>", "path": "tensorflow/java/src/gen/cc/java_defs.h", "position": null, "original_position": 288, "commit_id": "da52ece97d0f0b090e6da2d191d3a8ef03ba2756", "original_commit_id": "0bc3a8478cda7b65a9ce8e70ef8a95146800e09c", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "body": "In fact, the ```GenericTypeScanner``` should be defined in the ```java_defs.h``` file and can be moved as a private utility in ```java_writer.cc```. There are others implementations (or there will) but are declared by simply using lambdas instead of a named type.", "created_at": "2017-12-04T05:11:32Z", "updated_at": "2017-12-28T21:22:39Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14094#discussion_r154560686", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14094", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154560686"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14094#discussion_r154560686"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14094"}}, "body_html": "<p>In fact, the <code>GenericTypeScanner</code> should be defined in the <code>java_defs.h</code> file and can be moved as a private utility in <code>java_writer.cc</code>. There are others implementations (or there will) but are declared by simply using lambdas instead of a named type.</p>", "body_text": "In fact, the GenericTypeScanner should be defined in the java_defs.h file and can be moved as a private utility in java_writer.cc. There are others implementations (or there will) but are declared by simply using lambdas instead of a named type.", "in_reply_to_id": 153873002}