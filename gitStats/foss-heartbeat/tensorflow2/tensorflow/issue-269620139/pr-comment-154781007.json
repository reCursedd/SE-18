{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154781007", "pull_request_review_id": 80995972, "id": 154781007, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDc4MTAwNw==", "diff_hunk": "@@ -0,0 +1,138 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#ifndef TENSORFLOW_JAVA_SRC_GEN_CC_SOURCE_WRITER_H_\n+#define TENSORFLOW_JAVA_SRC_GEN_CC_SOURCE_WRITER_H_\n+\n+#include <memory>\n+#include <string>\n+#include <algorithm>\n+\n+#include \"tensorflow/core/platform/types.h\"\n+#include \"tensorflow/core/platform/env.h\"\n+#include \"tensorflow/core/lib/core/stringpiece.h\"\n+\n+namespace tensorflow {\n+\n+/// \\brief A utility class for writing source code, often generated at\n+/// compile-time.\n+///\n+/// Source writers are language-agnostic and therefore only expose generic\n+/// methods common to most languages. Use a decorator class to implement\n+/// language-specific features.\n+class SourceWriter {\n+ public:\n+  SourceWriter() : new_line(true) {}\n+  virtual ~SourceWriter() {}\n+\n+  /// \\brief Appends a piece of code or text.\n+  ///\n+  /// It is expected that no newline character is present in the data provided,\n+  /// otherwise Inline() must be used.\n+  SourceWriter* Write(const StringPiece& str);\n+\n+  /// \\brief Appends a block of code or text.\n+  ///\n+  /// The data might potentially contain newline characters, therefore it will\n+  /// be scanned to ensure that each line is indented and prefixed properly,\n+  /// making it a bit slower that Write().\n+  SourceWriter* Inline(const string& text);\n+\n+  /// \\brief Appends a newline character.\n+  SourceWriter* EndOfLine();\n+\n+  /// \\brief Indents following lines with white spaces.\n+  ///\n+  /// Indentation is cumulative, i.e. the provided tabulation is added to the\n+  /// current indentation value. If the tabulation is negative, the operation\n+  /// will outdent the source code, until the indentation reaches 0 again.\n+  ///\n+  /// For example, calling Indent(2) twice will indent code with 4 white\n+  /// spaces. Then calling Indent(-2) will outdent the code back to 2 white\n+  /// spaces.\n+  SourceWriter* Indent(int tab) {\n+    left_margin.resize(\n+        std::max(static_cast<int>(left_margin.size() + tab), 0), ' ');\n+    return this;\n+  }\n+\n+  /// \\brief Prefixes following lines with character(s).\n+  ///\n+  /// A common use case of a prefix is for commenting or documenting the code.\n+  ///\n+  /// The prefix is written after the indentation, For example, invoking\n+  /// Indent(2)->Prefix(\"//\") will result in prefixing lines with \"  //\".\n+  SourceWriter* LinePrefix(const char* line_prefix) {\n+    this->line_prefix = line_prefix;\n+    return this;\n+  }\n+\n+  /// \\brief Removes the actual line prefix, if any.\n+  SourceWriter* RemoveLinePrefix() {\n+    this->line_prefix.clear();\n+    return this;\n+  }\n+\n+ protected:\n+  virtual void Append(const StringPiece& str) = 0;\n+\n+ private:\n+  string left_margin;\n+  string line_prefix;\n+  bool new_line;\n+};\n+\n+/// \\brief A writer outputing source code into a file.\n+///\n+/// Note: the writer does not acquire the ownership of the file being passed in\n+/// parameter.\n+class SourceFileWriter : public SourceWriter {", "path": "tensorflow/java/src/gen/cc/source_writer.h", "position": null, "original_position": 101, "commit_id": "da52ece97d0f0b090e6da2d191d3a8ef03ba2756", "original_commit_id": "da51a5e19d6caf38f5ef32812807a1246c407160", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "body": "In practice, it is this implementation that will be used by the op generator at compile time, the in-memory one (```SourceBufferWriter```) is mainly used for test.", "created_at": "2017-12-04T21:31:07Z", "updated_at": "2017-12-28T21:22:39Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14094#discussion_r154781007", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14094", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154781007"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14094#discussion_r154781007"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14094"}}, "body_html": "<p>In practice, it is this implementation that will be used by the op generator at compile time, the in-memory one (<code>SourceBufferWriter</code>) is mainly used for test.</p>", "body_text": "In practice, it is this implementation that will be used by the op generator at compile time, the in-memory one (SourceBufferWriter) is mainly used for test.", "in_reply_to_id": 150661568}