{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/265800179", "html_url": "https://github.com/tensorflow/tensorflow/issues/6153#issuecomment-265800179", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6153", "id": 265800179, "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTgwMDE3OQ==", "user": {"login": "michaelisard", "id": 5376757, "node_id": "MDQ6VXNlcjUzNzY3NTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5376757?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelisard", "html_url": "https://github.com/michaelisard", "followers_url": "https://api.github.com/users/michaelisard/followers", "following_url": "https://api.github.com/users/michaelisard/following{/other_user}", "gists_url": "https://api.github.com/users/michaelisard/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelisard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelisard/subscriptions", "organizations_url": "https://api.github.com/users/michaelisard/orgs", "repos_url": "https://api.github.com/users/michaelisard/repos", "events_url": "https://api.github.com/users/michaelisard/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelisard/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-08T17:25:47Z", "updated_at": "2016-12-08T17:25:47Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1837393\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Mojusko\">@Mojusko</a> I'm sorry, this is frustrating for you. Unfortunately it's hard to guess from this level of detail what the root cause might be. I'm afraid the best next step might be for you to divide and conquer to see where the computations are differing, i.e. fetch tensors from the middle of your model, and locate the first place where the CPU/GPU results start to differ substantially.</p>\n<p>One place you might focus on is reductions, since the order of reduction is known to be very different on CPU/GPU. Is it possible that your model has tensors laid out in some way that CPU reduction order consistently leads to faster training? (If so, that in itself might be interesting to understand from a model perspective.)</p>\n<p>Sorry not to have more concrete solutions.</p>", "body_text": "@Mojusko I'm sorry, this is frustrating for you. Unfortunately it's hard to guess from this level of detail what the root cause might be. I'm afraid the best next step might be for you to divide and conquer to see where the computations are differing, i.e. fetch tensors from the middle of your model, and locate the first place where the CPU/GPU results start to differ substantially.\nOne place you might focus on is reductions, since the order of reduction is known to be very different on CPU/GPU. Is it possible that your model has tensors laid out in some way that CPU reduction order consistently leads to faster training? (If so, that in itself might be interesting to understand from a model perspective.)\nSorry not to have more concrete solutions.", "body": "@Mojusko I'm sorry, this is frustrating for you. Unfortunately it's hard to guess from this level of detail what the root cause might be. I'm afraid the best next step might be for you to divide and conquer to see where the computations are differing, i.e. fetch tensors from the middle of your model, and locate the first place where the CPU/GPU results start to differ substantially.\r\n\r\nOne place you might focus on is reductions, since the order of reduction is known to be very different on CPU/GPU. Is it possible that your model has tensors laid out in some way that CPU reduction order consistently leads to faster training? (If so, that in itself might be interesting to understand from a model perspective.)\r\n\r\nSorry not to have more concrete solutions."}