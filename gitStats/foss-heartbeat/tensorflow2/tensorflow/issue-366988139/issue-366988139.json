{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22750", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22750/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22750/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22750/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22750", "id": 366988139, "node_id": "MDU6SXNzdWUzNjY5ODgxMzk=", "number": 22750, "title": "Segmentation fault with small repro", "user": {"login": "ppwwyyxx", "id": 1381301, "node_id": "MDQ6VXNlcjEzODEzMDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1381301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppwwyyxx", "html_url": "https://github.com/ppwwyyxx", "followers_url": "https://api.github.com/users/ppwwyyxx/followers", "following_url": "https://api.github.com/users/ppwwyyxx/following{/other_user}", "gists_url": "https://api.github.com/users/ppwwyyxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppwwyyxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppwwyyxx/subscriptions", "organizations_url": "https://api.github.com/users/ppwwyyxx/orgs", "repos_url": "https://api.github.com/users/ppwwyyxx/repos", "events_url": "https://api.github.com/users/ppwwyyxx/events{/privacy}", "received_events_url": "https://api.github.com/users/ppwwyyxx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "harshini-gadige", "id": 42781361, "node_id": "MDQ6VXNlcjQyNzgxMzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/42781361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshini-gadige", "html_url": "https://github.com/harshini-gadige", "followers_url": "https://api.github.com/users/harshini-gadige/followers", "following_url": "https://api.github.com/users/harshini-gadige/following{/other_user}", "gists_url": "https://api.github.com/users/harshini-gadige/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshini-gadige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshini-gadige/subscriptions", "organizations_url": "https://api.github.com/users/harshini-gadige/orgs", "repos_url": "https://api.github.com/users/harshini-gadige/repos", "events_url": "https://api.github.com/users/harshini-gadige/events{/privacy}", "received_events_url": "https://api.github.com/users/harshini-gadige/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "harshini-gadige", "id": 42781361, "node_id": "MDQ6VXNlcjQyNzgxMzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/42781361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshini-gadige", "html_url": "https://github.com/harshini-gadige", "followers_url": "https://api.github.com/users/harshini-gadige/followers", "following_url": "https://api.github.com/users/harshini-gadige/following{/other_user}", "gists_url": "https://api.github.com/users/harshini-gadige/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshini-gadige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshini-gadige/subscriptions", "organizations_url": "https://api.github.com/users/harshini-gadige/orgs", "repos_url": "https://api.github.com/users/harshini-gadige/repos", "events_url": "https://api.github.com/users/harshini-gadige/events{/privacy}", "received_events_url": "https://api.github.com/users/harshini-gadige/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-10-04T22:03:44Z", "updated_at": "2018-11-16T15:38:07Z", "closed_at": "2018-10-18T23:07:12Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: archlinux</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:n/a</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:binary</li>\n<li><strong>TensorFlow version (use command below)</strong>:b'v1.9.0-rc2-5276-ge57874169f' 1.12.0-dev20181004</li>\n<li><strong>Python version</strong>:3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:n/a</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:n/a</li>\n<li><strong>CUDA/cuDNN version</strong>:9.0</li>\n<li><strong>GPU model and memory</strong>:1080Ti</li>\n<li><strong>Exact command to reproduce</strong>:below</li>\n</ul>\n<p>This code:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">f</span>(<span class=\"pl-smi\">boxes</span>, <span class=\"pl-smi\">scores</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">f</span>(<span class=\"pl-smi\">X</span>):\n        prob, box <span class=\"pl-k\">=</span> X\n        output_shape <span class=\"pl-k\">=</span> tf.shape(prob)\n        ids <span class=\"pl-k\">=</span> tf.reshape(tf.where(prob <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0.05</span>), [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\n        prob <span class=\"pl-k\">=</span> tf.gather(prob, ids)\n        box <span class=\"pl-k\">=</span> tf.gather(box, ids)\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> prob = tf.Print(prob, [box, prob], summarize=100, message='boxandprob')</span>\n        selection <span class=\"pl-k\">=</span> tf.image.non_max_suppression(box, prob, <span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">0.5</span>)\n        selection <span class=\"pl-k\">=</span> tf.to_int32(tf.gather(ids, selection))\n        selection <span class=\"pl-k\">=</span> tf.Print(selection, [ids, selection], <span class=\"pl-v\">summarize</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">100</span>, <span class=\"pl-v\">message</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>ids_selection_2<span class=\"pl-pds\">'</span></span>)\n        sorted_selection <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span>tf.nn.top_k(<span class=\"pl-k\">-</span>selection, <span class=\"pl-v\">k</span><span class=\"pl-k\">=</span>tf.size(selection))[<span class=\"pl-c1\">0</span>]\n        mask <span class=\"pl-k\">=</span> tf.sparse_to_dense(\n            <span class=\"pl-v\">sparse_indices</span><span class=\"pl-k\">=</span>sorted_selection,\n            <span class=\"pl-v\">output_shape</span><span class=\"pl-k\">=</span>output_shape,\n            <span class=\"pl-v\">sparse_values</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n            <span class=\"pl-v\">default_value</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n        <span class=\"pl-k\">return</span> mask\n\n    masks <span class=\"pl-k\">=</span> tf.map_fn(f, (scores, boxes), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.bool, <span class=\"pl-v\">parallel_iterations</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>)     <span class=\"pl-c\"><span class=\"pl-c\">#</span> #cat x N</span>\n    <span class=\"pl-k\">return</span> masks\n\n<span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/gpu:0<span class=\"pl-pds\">'</span></span>):\n    boxes <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, (<span class=\"pl-c1\">80</span>, <span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">4</span>), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>boxes<span class=\"pl-pds\">'</span></span>)\n    scores <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, (<span class=\"pl-c1\">80</span>, <span class=\"pl-c1\">None</span>), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>scores<span class=\"pl-pds\">'</span></span>)\n    outs <span class=\"pl-k\">=</span> f(boxes, scores)\n\nconfig <span class=\"pl-k\">=</span> tf.ConfigProto()\nconfig.allow_soft_placement <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\nsess <span class=\"pl-k\">=</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>config)\ndata <span class=\"pl-k\">=</span> <span class=\"pl-c1\">dict</span>(np.load(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>debug.npz<span class=\"pl-pds\">'</span></span>))\n<span class=\"pl-k\">for</span> k <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1000</span>):\n    sess.run(outs, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{boxes: data[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>boxes<span class=\"pl-pds\">'</span></span>].transpose(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>)[<span class=\"pl-c1\">1</span>:, :, :], scores: data[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>scores<span class=\"pl-pds\">'</span></span>][:, <span class=\"pl-c1\">1</span>:].T})\n    <span class=\"pl-c1\">print</span>(k)</pre></div>\n<p>causes segmentation fault on tf-nightly-gpu, as well as tensorflow-gpu==1.11.0. It works on 1.10.<br>\nIt needs the data file <code>debug.npz</code> here:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/2448247/debug.zip\">debug.zip</a></p>\n<p>Note:</p>\n<ol>\n<li>I tested on two machines, an error happen in &gt;90% runs.</li>\n<li>The code was distilled from the bug report about MaskRCNN evaluation <a href=\"https://github.com/tensorpack/tensorpack/issues/919\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorpack/tensorpack/issues/919/hovercard\">here</a>. The original bug report does not always segfault, but occasionally crash with other <strong>different</strong> unreasonable TF internal errors, such as:</li>\n</ol>\n<pre><code>InvalidArgumentError (see above for traceback): scores has incompatible shape\n         [[node map/while/non_max_suppression/NonMaxSuppressionV3 (defined at bug.py:15)  = NonMaxSuppressionV3[T=DT_FLOAT, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](map/while/Gather\nV2_1/_29, map/while/GatherV2/_31, map/while/non_max_suppression/NonMaxSuppressionV3/max_output_size/_33, map/while/non_max_suppression/iou_threshold/_35, map/while/non_max_suppression/score_thresh\nold/_37)]]\n</code></pre>\n<pre><code>2018-10-04 14:59:14.736180: F tensorflow/core/common_runtime/bfc_allocator.cc:458] Check failed: c-&gt;in_use() &amp;&amp; (c-&gt;bin_num == kInvalidBinNum)                                                     \n</code></pre>\n<pre><code>2018-10-04 14:59:49.523436: F tensorflow/core/common_runtime/bfc_allocator.cc:380] Check failed: h != kInvalidChunkHandle \n</code></pre>\n<pre><code>2018-10-05 00:12:03.720295: F ./tensorflow/core/framework/tensor.h:643] Check failed: new_num_elements == NumElements() (39 vs. 0)\n</code></pre>\n<pre><code>\nInvalidArgumentError (see above for traceback): indices[1] = [0] is repeated\n         [[{{node map/while/SparseToDense}} = SparseToDense[T=DT_BOOL, Tindices=DT_INT32, _class=[\"loc:@map/while/TensorArrayWrite/TensorArrayWriteV3\"], validate_indices=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](map/while/Neg_1/_51, map/while/Shape/_53, map/while/SparseToDense/sparse_values/_55, map/while/SparseToDense/default_value/_57)]]\n         [[{{node map/while/SparseToDense/sparse_values/_54}} = _Send[T=DT_BOOL, client_terminated=false, recv_device=\"/job:localhost/replica:0/task:0/device:CPU:0\", send_device=\"/job:localhost/replica:0/task:0/device:GPU:0\", send_device_incarnation=1, tensor_name=\"edge_111_map/while/SparseToDense/sparse_values\", _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"](map/while/SparseToDense/sparse_values)]]\n</code></pre>\n<p>After distilled to this small repro, it seems to mostly do segfault. But the above error messages might help. Seems like a memory corruption.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): archlinux\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:n/a\nTensorFlow installed from (source or binary):binary\nTensorFlow version (use command below):b'v1.9.0-rc2-5276-ge57874169f' 1.12.0-dev20181004\nPython version:3.6\nBazel version (if compiling from source):n/a\nGCC/Compiler version (if compiling from source):n/a\nCUDA/cuDNN version:9.0\nGPU model and memory:1080Ti\nExact command to reproduce:below\n\nThis code:\nimport tensorflow as tf\nimport numpy as np\n\ndef f(boxes, scores):\n    def f(X):\n        prob, box = X\n        output_shape = tf.shape(prob)\n        ids = tf.reshape(tf.where(prob > 0.05), [-1])\n        prob = tf.gather(prob, ids)\n        box = tf.gather(box, ids)\n        # prob = tf.Print(prob, [box, prob], summarize=100, message='boxandprob')\n        selection = tf.image.non_max_suppression(box, prob, 100, 0.5)\n        selection = tf.to_int32(tf.gather(ids, selection))\n        selection = tf.Print(selection, [ids, selection], summarize=100, message='ids_selection_2')\n        sorted_selection = -tf.nn.top_k(-selection, k=tf.size(selection))[0]\n        mask = tf.sparse_to_dense(\n            sparse_indices=sorted_selection,\n            output_shape=output_shape,\n            sparse_values=True,\n            default_value=False)\n        return mask\n\n    masks = tf.map_fn(f, (scores, boxes), dtype=tf.bool, parallel_iterations=10)     # #cat x N\n    return masks\n\nwith tf.device('/gpu:0'):\n    boxes = tf.placeholder(tf.float32, (80, None, 4), name='boxes')\n    scores = tf.placeholder(tf.float32, (80, None), name='scores')\n    outs = f(boxes, scores)\n\nconfig = tf.ConfigProto()\nconfig.allow_soft_placement = True\nsess = tf.Session(config=config)\ndata = dict(np.load('debug.npz'))\nfor k in range(1000):\n    sess.run(outs, feed_dict={boxes: data['boxes'].transpose(1, 0, 2)[1:, :, :], scores: data['scores'][:, 1:].T})\n    print(k)\ncauses segmentation fault on tf-nightly-gpu, as well as tensorflow-gpu==1.11.0. It works on 1.10.\nIt needs the data file debug.npz here:\ndebug.zip\nNote:\n\nI tested on two machines, an error happen in >90% runs.\nThe code was distilled from the bug report about MaskRCNN evaluation here. The original bug report does not always segfault, but occasionally crash with other different unreasonable TF internal errors, such as:\n\nInvalidArgumentError (see above for traceback): scores has incompatible shape\n         [[node map/while/non_max_suppression/NonMaxSuppressionV3 (defined at bug.py:15)  = NonMaxSuppressionV3[T=DT_FLOAT, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](map/while/Gather\nV2_1/_29, map/while/GatherV2/_31, map/while/non_max_suppression/NonMaxSuppressionV3/max_output_size/_33, map/while/non_max_suppression/iou_threshold/_35, map/while/non_max_suppression/score_thresh\nold/_37)]]\n\n2018-10-04 14:59:14.736180: F tensorflow/core/common_runtime/bfc_allocator.cc:458] Check failed: c->in_use() && (c->bin_num == kInvalidBinNum)                                                     \n\n2018-10-04 14:59:49.523436: F tensorflow/core/common_runtime/bfc_allocator.cc:380] Check failed: h != kInvalidChunkHandle \n\n2018-10-05 00:12:03.720295: F ./tensorflow/core/framework/tensor.h:643] Check failed: new_num_elements == NumElements() (39 vs. 0)\n\n\nInvalidArgumentError (see above for traceback): indices[1] = [0] is repeated\n         [[{{node map/while/SparseToDense}} = SparseToDense[T=DT_BOOL, Tindices=DT_INT32, _class=[\"loc:@map/while/TensorArrayWrite/TensorArrayWriteV3\"], validate_indices=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](map/while/Neg_1/_51, map/while/Shape/_53, map/while/SparseToDense/sparse_values/_55, map/while/SparseToDense/default_value/_57)]]\n         [[{{node map/while/SparseToDense/sparse_values/_54}} = _Send[T=DT_BOOL, client_terminated=false, recv_device=\"/job:localhost/replica:0/task:0/device:CPU:0\", send_device=\"/job:localhost/replica:0/task:0/device:GPU:0\", send_device_incarnation=1, tensor_name=\"edge_111_map/while/SparseToDense/sparse_values\", _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"](map/while/SparseToDense/sparse_values)]]\n\nAfter distilled to this small repro, it seems to mostly do segfault. But the above error messages might help. Seems like a memory corruption.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: archlinux\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:n/a\r\n- **TensorFlow installed from (source or binary)**:binary\r\n- **TensorFlow version (use command below)**:b'v1.9.0-rc2-5276-ge57874169f' 1.12.0-dev20181004\r\n- **Python version**:3.6\r\n- **Bazel version (if compiling from source)**:n/a\r\n- **GCC/Compiler version (if compiling from source)**:n/a\r\n- **CUDA/cuDNN version**:9.0\r\n- **GPU model and memory**:1080Ti\r\n- **Exact command to reproduce**:below\r\n\r\nThis code:\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ndef f(boxes, scores):\r\n    def f(X):\r\n        prob, box = X\r\n        output_shape = tf.shape(prob)\r\n        ids = tf.reshape(tf.where(prob > 0.05), [-1])\r\n        prob = tf.gather(prob, ids)\r\n        box = tf.gather(box, ids)\r\n        # prob = tf.Print(prob, [box, prob], summarize=100, message='boxandprob')\r\n        selection = tf.image.non_max_suppression(box, prob, 100, 0.5)\r\n        selection = tf.to_int32(tf.gather(ids, selection))\r\n        selection = tf.Print(selection, [ids, selection], summarize=100, message='ids_selection_2')\r\n        sorted_selection = -tf.nn.top_k(-selection, k=tf.size(selection))[0]\r\n        mask = tf.sparse_to_dense(\r\n            sparse_indices=sorted_selection,\r\n            output_shape=output_shape,\r\n            sparse_values=True,\r\n            default_value=False)\r\n        return mask\r\n\r\n    masks = tf.map_fn(f, (scores, boxes), dtype=tf.bool, parallel_iterations=10)     # #cat x N\r\n    return masks\r\n\r\nwith tf.device('/gpu:0'):\r\n    boxes = tf.placeholder(tf.float32, (80, None, 4), name='boxes')\r\n    scores = tf.placeholder(tf.float32, (80, None), name='scores')\r\n    outs = f(boxes, scores)\r\n\r\nconfig = tf.ConfigProto()\r\nconfig.allow_soft_placement = True\r\nsess = tf.Session(config=config)\r\ndata = dict(np.load('debug.npz'))\r\nfor k in range(1000):\r\n    sess.run(outs, feed_dict={boxes: data['boxes'].transpose(1, 0, 2)[1:, :, :], scores: data['scores'][:, 1:].T})\r\n    print(k)\r\n```\r\ncauses segmentation fault on tf-nightly-gpu, as well as tensorflow-gpu==1.11.0. It works on 1.10.\r\nIt needs the data file `debug.npz` here: \r\n[debug.zip](https://github.com/tensorflow/tensorflow/files/2448247/debug.zip)\r\n\r\nNote:\r\n1. I tested on two machines, an error happen in >90% runs.\r\n2. The code was distilled from the bug report about MaskRCNN evaluation [here](https://github.com/tensorpack/tensorpack/issues/919). The original bug report does not always segfault, but occasionally crash with other __different__ unreasonable TF internal errors, such as:\r\n```\r\nInvalidArgumentError (see above for traceback): scores has incompatible shape\r\n         [[node map/while/non_max_suppression/NonMaxSuppressionV3 (defined at bug.py:15)  = NonMaxSuppressionV3[T=DT_FLOAT, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](map/while/Gather\r\nV2_1/_29, map/while/GatherV2/_31, map/while/non_max_suppression/NonMaxSuppressionV3/max_output_size/_33, map/while/non_max_suppression/iou_threshold/_35, map/while/non_max_suppression/score_thresh\r\nold/_37)]]\r\n``` \r\n```\r\n2018-10-04 14:59:14.736180: F tensorflow/core/common_runtime/bfc_allocator.cc:458] Check failed: c->in_use() && (c->bin_num == kInvalidBinNum)                                                     \r\n```\r\n```\r\n2018-10-04 14:59:49.523436: F tensorflow/core/common_runtime/bfc_allocator.cc:380] Check failed: h != kInvalidChunkHandle \r\n```\r\n```\r\n2018-10-05 00:12:03.720295: F ./tensorflow/core/framework/tensor.h:643] Check failed: new_num_elements == NumElements() (39 vs. 0)\r\n```\r\n```\r\n\r\nInvalidArgumentError (see above for traceback): indices[1] = [0] is repeated\r\n         [[{{node map/while/SparseToDense}} = SparseToDense[T=DT_BOOL, Tindices=DT_INT32, _class=[\"loc:@map/while/TensorArrayWrite/TensorArrayWriteV3\"], validate_indices=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](map/while/Neg_1/_51, map/while/Shape/_53, map/while/SparseToDense/sparse_values/_55, map/while/SparseToDense/default_value/_57)]]\r\n         [[{{node map/while/SparseToDense/sparse_values/_54}} = _Send[T=DT_BOOL, client_terminated=false, recv_device=\"/job:localhost/replica:0/task:0/device:CPU:0\", send_device=\"/job:localhost/replica:0/task:0/device:GPU:0\", send_device_incarnation=1, tensor_name=\"edge_111_map/while/SparseToDense/sparse_values\", _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"](map/while/SparseToDense/sparse_values)]]\r\n```\r\nAfter distilled to this small repro, it seems to mostly do segfault. But the above error messages might help. Seems like a memory corruption."}