{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/430781259", "html_url": "https://github.com/tensorflow/tensorflow/issues/22750#issuecomment-430781259", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22750", "id": 430781259, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDc4MTI1OQ==", "user": {"login": "ppwwyyxx", "id": 1381301, "node_id": "MDQ6VXNlcjEzODEzMDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1381301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppwwyyxx", "html_url": "https://github.com/ppwwyyxx", "followers_url": "https://api.github.com/users/ppwwyyxx/followers", "following_url": "https://api.github.com/users/ppwwyyxx/following{/other_user}", "gists_url": "https://api.github.com/users/ppwwyyxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppwwyyxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppwwyyxx/subscriptions", "organizations_url": "https://api.github.com/users/ppwwyyxx/orgs", "repos_url": "https://api.github.com/users/ppwwyyxx/repos", "events_url": "https://api.github.com/users/ppwwyyxx/events{/privacy}", "received_events_url": "https://api.github.com/users/ppwwyyxx/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-17T20:40:33Z", "updated_at": "2018-10-17T20:40:33Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10927929\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tayo\">@tayo</a> I think the fix is not correct and does not fix the problem. (It may avoid the crash, but may end up giving wrong results).<br>\nThe bug still exists: <code>Compute()</code> should be thread-safe. It may be called concurrently by many callers, as quoted from tensorflow's source code:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/4a51abb1f935818b6a130f71b340b29379e52a07/tensorflow/core/framework/op_kernel.h#L90-L93\">tensorflow/tensorflow/core/framework/op_kernel.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 90 to 93\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/4a51abb1f935818b6a130f71b340b29379e52a07\">4a51abb</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L90\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"90\"></td>\n          <td id=\"LC90\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> An OpKernel's computation can be either synchronous or</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L91\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"91\"></td>\n          <td id=\"LC91\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> asynchronous. All OpKernel Compute() methods must be thread-safe as they</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L92\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"92\"></td>\n          <td id=\"LC92\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> may be called concurrently (e.g. by multiple executions of the same graph</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L93\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"93\"></td>\n          <td id=\"LC93\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> concurrently).</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>When you store a pointer to a Tensor in <code>OpKernel::Compute</code>, the <code>Compute</code> method become not thread-safe. If called concurrently by many threads, thread A set pointer to input A, then thread B might overwrite the pointer to input B, then thread A will access the wrong input B.</p>", "body_text": "@tayo I think the fix is not correct and does not fix the problem. (It may avoid the crash, but may end up giving wrong results).\nThe bug still exists: Compute() should be thread-safe. It may be called concurrently by many callers, as quoted from tensorflow's source code:\n\n  \n    \n      tensorflow/tensorflow/core/framework/op_kernel.h\n    \n    \n        Lines 90 to 93\n      in\n      4a51abb\n    \n    \n    \n    \n\n        \n          \n           // An OpKernel's computation can be either synchronous or \n        \n\n        \n          \n           // asynchronous. All OpKernel Compute() methods must be thread-safe as they \n        \n\n        \n          \n           // may be called concurrently (e.g. by multiple executions of the same graph \n        \n\n        \n          \n           // concurrently). \n        \n    \n  \n\n\nWhen you store a pointer to a Tensor in OpKernel::Compute, the Compute method become not thread-safe. If called concurrently by many threads, thread A set pointer to input A, then thread B might overwrite the pointer to input B, then thread A will access the wrong input B.", "body": "@tayo I think the fix is not correct and does not fix the problem. (It may avoid the crash, but may end up giving wrong results).\r\nThe bug still exists: `Compute()` should be thread-safe. It may be called concurrently by many callers, as quoted from tensorflow's source code:\r\nhttps://github.com/tensorflow/tensorflow/blob/4a51abb1f935818b6a130f71b340b29379e52a07/tensorflow/core/framework/op_kernel.h#L90-L93\r\n\r\nWhen you store a pointer to a Tensor in `OpKernel::Compute`, the `Compute` method become not thread-safe. If called concurrently by many threads, thread A set pointer to input A, then thread B might overwrite the pointer to input B, then thread A will access the wrong input B. "}