{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/438549315", "html_url": "https://github.com/tensorflow/tensorflow/pull/23468#issuecomment-438549315", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23468", "id": 438549315, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODU0OTMxNQ==", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-14T06:08:09Z", "updated_at": "2018-11-14T06:08:09Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Ok, things are unfortunately getting complicated:</p>\n<ol>\n<li>\n<p>I can't validate duplicated attribute values in <code>TFE_Execute</code> since setting more than once the same attribute results in replacing the former value by the later. You can see this happening <a href=\"https://github.com/tensorflow/tensorflow/blob/37b4d2ef3f90f53f8050f557038b65ff6d1a06bc/tensorflow/core/common_runtime/eager/attr_builder.h#L135\">here</a>. I can replace that logic by validating at the same spot that duplicate attributes must all have the same value (btw, I don't know if there are real cases of duplicate attributes right now).</p>\n</li>\n<li>\n<p>I think we forgot something when we've decided to enable input attrs inference by default. Inference of input list attributes can only work if the client adds it using the new <code>TFE_OpAddInputList</code>. Currently, clients call <code>TFE_OpAddInput</code> for each element of an input list instead. That makes it impossible for us to detect when ends the list or when starts the next input, and we lose track of the input attributes (we actually assume each input is a single one). Possible workarounds are:</p>\n<ul>\n<li>Disable automatically input attribute inference when we detect (easily) that an input list is being fed by calling <code>TFE_OpAddInput</code> multiple times.</li>\n<li>Have a distinct methods to support attribute inference (e.g. <code>TFE_OpAddInferableInput</code> and <code>TFE_OpAddInferableInputList</code>).</li>\n<li>Restore the option to enable/disable input attribute inference at <code>TFE_Op</code> construction, so the client knows that <code>TFE_OpAddInput</code> should be used exclusively for adding single inputs.</li>\n</ul>\n</li>\n</ol>\n<p>Any other suggestion?</p>", "body_text": "Ok, things are unfortunately getting complicated:\n\n\nI can't validate duplicated attribute values in TFE_Execute since setting more than once the same attribute results in replacing the former value by the later. You can see this happening here. I can replace that logic by validating at the same spot that duplicate attributes must all have the same value (btw, I don't know if there are real cases of duplicate attributes right now).\n\n\nI think we forgot something when we've decided to enable input attrs inference by default. Inference of input list attributes can only work if the client adds it using the new TFE_OpAddInputList. Currently, clients call TFE_OpAddInput for each element of an input list instead. That makes it impossible for us to detect when ends the list or when starts the next input, and we lose track of the input attributes (we actually assume each input is a single one). Possible workarounds are:\n\nDisable automatically input attribute inference when we detect (easily) that an input list is being fed by calling TFE_OpAddInput multiple times.\nHave a distinct methods to support attribute inference (e.g. TFE_OpAddInferableInput and TFE_OpAddInferableInputList).\nRestore the option to enable/disable input attribute inference at TFE_Op construction, so the client knows that TFE_OpAddInput should be used exclusively for adding single inputs.\n\n\n\nAny other suggestion?", "body": "Ok, things are unfortunately getting complicated:\r\n\r\n1. I can't validate duplicated attribute values in `TFE_Execute` since setting more than once the same attribute results in replacing the former value by the later. You can see this happening [here](https://github.com/tensorflow/tensorflow/blob/37b4d2ef3f90f53f8050f557038b65ff6d1a06bc/tensorflow/core/common_runtime/eager/attr_builder.h#L135). I can replace that logic by validating at the same spot that duplicate attributes must all have the same value (btw, I don't know if there are real cases of duplicate attributes right now).\r\n\r\n2. I think we forgot something when we've decided to enable input attrs inference by default. Inference of input list attributes can only work if the client adds it using the new `TFE_OpAddInputList`. Currently, clients call `TFE_OpAddInput` for each element of an input list instead. That makes it impossible for us to detect when ends the list or when starts the next input, and we lose track of the input attributes (we actually assume each input is a single one). Possible workarounds are:\r\n    - Disable automatically input attribute inference when we detect (easily) that an input list is being fed by calling `TFE_OpAddInput` multiple times.\r\n    - Have a distinct methods to support attribute inference (e.g. `TFE_OpAddInferableInput` and `TFE_OpAddInferableInputList`).\r\n    - Restore the option to enable/disable input attribute inference at `TFE_Op` construction, so the client knows that `TFE_OpAddInput` should be used exclusively for adding single inputs.\r\n\r\nAny other suggestion?"}