{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/438440838", "html_url": "https://github.com/tensorflow/tensorflow/pull/23468#issuecomment-438440838", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23468", "id": 438440838, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQ0MDgzOA==", "user": {"login": "akshaym", "id": 122911, "node_id": "MDQ6VXNlcjEyMjkxMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/122911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akshaym", "html_url": "https://github.com/akshaym", "followers_url": "https://api.github.com/users/akshaym/followers", "following_url": "https://api.github.com/users/akshaym/following{/other_user}", "gists_url": "https://api.github.com/users/akshaym/gists{/gist_id}", "starred_url": "https://api.github.com/users/akshaym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akshaym/subscriptions", "organizations_url": "https://api.github.com/users/akshaym/orgs", "repos_url": "https://api.github.com/users/akshaym/repos", "events_url": "https://api.github.com/users/akshaym/events{/privacy}", "received_events_url": "https://api.github.com/users/akshaym/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-13T21:19:18Z", "updated_at": "2018-11-13T21:19:18Z", "author_association": "MEMBER", "body_html": "<p>There are 2 python paths where this happens.</p>\n<p>One is here (which your code should simplify): <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/0cfa4c157d317ccb4ccd1f6c85773f973d628695/tensorflow/python/eager/pywrap_tfe_src.cc#L2590\">tensorflow/tensorflow/python/eager/pywrap_tfe_src.cc</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 2590\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/0cfa4c157d317ccb4ccd1f6c85773f973d628695\">0cfa4c1</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L2590\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2590\"></td>\n          <td id=\"LC2590\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">//</span> Add inferred attrs and inputs.</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>The other happens in the generated python code for op binding. For example (copy pasted from the generated code):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">accumulate_nv2_eager_fallback</span>(<span class=\"pl-smi\">inputs</span>, <span class=\"pl-smi\">shape</span>, <span class=\"pl-smi\">name</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">ctx</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n  <span class=\"pl-s\"><span class=\"pl-k\">r</span><span class=\"pl-pds\">\"\"\"</span>This is the slowpath function for Eager mode.</span>\n<span class=\"pl-s\">  This is for function accumulate_nv2</span>\n<span class=\"pl-s\">  <span class=\"pl-pds\">\"\"\"</span></span>\n  _ctx <span class=\"pl-k\">=</span> ctx <span class=\"pl-k\">if</span> ctx <span class=\"pl-k\">else</span> _context.context()\n  <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">isinstance</span>(inputs, (<span class=\"pl-c1\">list</span>, <span class=\"pl-c1\">tuple</span>)):\n    <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">TypeError</span>(\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Expected list for 'inputs' argument to <span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>'accumulate_nv2' Op, not <span class=\"pl-c1\">%r</span>.<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> inputs)\n  _attr_N <span class=\"pl-k\">=</span> <span class=\"pl-c1\">len</span>(inputs)  <span class=\"pl-c\"><span class=\"pl-c\">#</span>#### &lt;- Length inference</span>\n  shape <span class=\"pl-k\">=</span> _execute.make_shape(shape, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shape<span class=\"pl-pds\">\"</span></span>)\n  _attr_T, inputs <span class=\"pl-k\">=</span> _execute.args_to_matching_eager(<span class=\"pl-c1\">list</span>(inputs), _ctx)  <span class=\"pl-c\"><span class=\"pl-c\">#</span>##### &lt;- Type inference</span>\n  _inputs_flat <span class=\"pl-k\">=</span> <span class=\"pl-c1\">list</span>(inputs)\n  _attrs <span class=\"pl-k\">=</span> (<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>N<span class=\"pl-pds\">\"</span></span>, _attr_N, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>T<span class=\"pl-pds\">\"</span></span>, _attr_T, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shape<span class=\"pl-pds\">\"</span></span>, shape)\n  _result <span class=\"pl-k\">=</span> _execute.execute(<span class=\"pl-s\"><span class=\"pl-k\">b</span><span class=\"pl-pds\">\"</span>AccumulateNV2<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>_inputs_flat,\n                             <span class=\"pl-v\">attrs</span><span class=\"pl-k\">=</span>_attrs, <span class=\"pl-v\">ctx</span><span class=\"pl-k\">=</span>_ctx, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>name)\n  _execute.record_gradient(\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>AccumulateNV2<span class=\"pl-pds\">\"</span></span>, _inputs_flat, _attrs, _result, name)\n  _result, <span class=\"pl-k\">=</span> _result\n  <span class=\"pl-k\">return</span> _result</pre></div>\n<p>The code generator is this file: <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/python_op_gen.cc\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/python_op_gen.cc</a></p>\n<p>We pass these attrs when calling the backward function (hence they are included in the call to record_gradient), but I don't <em>think</em> they are necessary.</p>", "body_text": "There are 2 python paths where this happens.\nOne is here (which your code should simplify): \n  \n    \n      tensorflow/tensorflow/python/eager/pywrap_tfe_src.cc\n    \n    \n         Line 2590\n      in\n      0cfa4c1\n    \n    \n    \n    \n\n        \n          \n           // Add inferred attrs and inputs. \n        \n    \n  \n\n\nThe other happens in the generated python code for op binding. For example (copy pasted from the generated code):\ndef accumulate_nv2_eager_fallback(inputs, shape, name=None, ctx=None):\n  r\"\"\"This is the slowpath function for Eager mode.\n  This is for function accumulate_nv2\n  \"\"\"\n  _ctx = ctx if ctx else _context.context()\n  if not isinstance(inputs, (list, tuple)):\n    raise TypeError(\n        \"Expected list for 'inputs' argument to \"\n        \"'accumulate_nv2' Op, not %r.\" % inputs)\n  _attr_N = len(inputs)  ##### <- Length inference\n  shape = _execute.make_shape(shape, \"shape\")\n  _attr_T, inputs = _execute.args_to_matching_eager(list(inputs), _ctx)  ###### <- Type inference\n  _inputs_flat = list(inputs)\n  _attrs = (\"N\", _attr_N, \"T\", _attr_T, \"shape\", shape)\n  _result = _execute.execute(b\"AccumulateNV2\", 1, inputs=_inputs_flat,\n                             attrs=_attrs, ctx=_ctx, name=name)\n  _execute.record_gradient(\n      \"AccumulateNV2\", _inputs_flat, _attrs, _result, name)\n  _result, = _result\n  return _result\nThe code generator is this file: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/python_op_gen.cc\nWe pass these attrs when calling the backward function (hence they are included in the call to record_gradient), but I don't think they are necessary.", "body": "There are 2 python paths where this happens.\r\n\r\nOne is here (which your code should simplify): https://github.com/tensorflow/tensorflow/blob/0cfa4c157d317ccb4ccd1f6c85773f973d628695/tensorflow/python/eager/pywrap_tfe_src.cc#L2590\r\n\r\nThe other happens in the generated python code for op binding. For example (copy pasted from the generated code):\r\n```python\r\ndef accumulate_nv2_eager_fallback(inputs, shape, name=None, ctx=None):\r\n  r\"\"\"This is the slowpath function for Eager mode.\r\n  This is for function accumulate_nv2\r\n  \"\"\"\r\n  _ctx = ctx if ctx else _context.context()\r\n  if not isinstance(inputs, (list, tuple)):\r\n    raise TypeError(\r\n        \"Expected list for 'inputs' argument to \"\r\n        \"'accumulate_nv2' Op, not %r.\" % inputs)\r\n  _attr_N = len(inputs)  ##### <- Length inference\r\n  shape = _execute.make_shape(shape, \"shape\")\r\n  _attr_T, inputs = _execute.args_to_matching_eager(list(inputs), _ctx)  ###### <- Type inference\r\n  _inputs_flat = list(inputs)\r\n  _attrs = (\"N\", _attr_N, \"T\", _attr_T, \"shape\", shape)\r\n  _result = _execute.execute(b\"AccumulateNV2\", 1, inputs=_inputs_flat,\r\n                             attrs=_attrs, ctx=_ctx, name=name)\r\n  _execute.record_gradient(\r\n      \"AccumulateNV2\", _inputs_flat, _attrs, _result, name)\r\n  _result, = _result\r\n  return _result\r\n```\r\n\r\nThe code generator is this file: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/python_op_gen.cc\r\n\r\nWe pass these attrs when calling the backward function (hence they are included in the call to record_gradient), but I don't *think* they are necessary. "}