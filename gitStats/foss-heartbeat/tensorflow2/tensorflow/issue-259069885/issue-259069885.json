{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13175", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13175/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13175/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13175/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13175", "id": 259069885, "node_id": "MDU6SXNzdWUyNTkwNjk4ODU=", "number": 13175, "title": "BUG: same feature column creates duplicate tensors for DNNLinearCombinedRegressor", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-09-20T07:44:43Z", "updated_at": "2018-01-04T04:10:50Z", "closed_at": "2018-01-04T04:10:00Z", "author_association": "MEMBER", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Mac OS X 10.11.6</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.3.0</li>\n<li><strong>Python version</strong>: 3.5.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>It seems that the same feature column creates two tensors for <code>DNNLinearCombinedRegressor</code> (see <code>voc_embed</code> in graph below). Is this the right behavior we expected?</p>\n<p>The behavior stems from that feature column is processed by DNN and Linear independently, see code: <a href=\"https://github.com/tensorflow/tensorflow/blob/b46340f40fe5e2ec9bfcd385b07cfb914055fb51/tensorflow/python/estimator/canned/dnn_linear_combined.py#L154\">dnn</a> and <a href=\"https://github.com/tensorflow/tensorflow/blob/b46340f40fe5e2ec9bfcd385b07cfb914055fb51/tensorflow/python/estimator/canned/dnn_linear_combined.py#L196\">linear</a></p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> coding: utf-8</span>\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow <span class=\"pl-k\">import</span> feature_column <span class=\"pl-k\">as</span> fc\n\nf <span class=\"pl-k\">=</span> fc.embedding_column(\n        fc.categorical_column_with_vocabulary_list(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>voc<span class=\"pl-pds\">\"</span></span>, [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b<span class=\"pl-pds\">\"</span></span>]),\n        <span class=\"pl-v\">dimension</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">8</span>)\ne <span class=\"pl-k\">=</span> tf.estimator.DNNLinearCombinedRegressor(\n        <span class=\"pl-v\">model_dir</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/tmp/tf/test_dnn<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-v\">linear_feature_columns</span><span class=\"pl-k\">=</span>[f],\n        <span class=\"pl-v\">dnn_feature_columns</span><span class=\"pl-k\">=</span>[f],\n        <span class=\"pl-v\">dnn_hidden_units</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>])\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">input_fn</span>():\n    <span class=\"pl-k\">return</span> ({<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>voc<span class=\"pl-pds\">\"</span></span>: tf.identity(\n                        tf.constant([<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>voc_input<span class=\"pl-pds\">\"</span></span>),\n                        <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>identity<span class=\"pl-pds\">\"</span></span>)},\n            tf.constant([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>]))\n\ne.train(input_fn, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>)</pre></div>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/1112263/30632078-63853988-9e19-11e7-94c8-c660c6ed55e2.png\"><img src=\"https://user-images.githubusercontent.com/1112263/30632078-63853988-9e19-11e7-94c8-c660c6ed55e2.png\" alt=\"graph-large_attrs_key _too_large_attrs limit_attr_size 1024 run 1\" style=\"max-width:100%;\"></a></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS X 10.11.6\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.3.0\nPython version: 3.5.2\nBazel version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nIt seems that the same feature column creates two tensors for DNNLinearCombinedRegressor (see voc_embed in graph below). Is this the right behavior we expected?\nThe behavior stems from that feature column is processed by DNN and Linear independently, see code: dnn and linear\nSource code / logs\n# coding: utf-8\nimport tensorflow as tf\nfrom tensorflow import feature_column as fc\n\nf = fc.embedding_column(\n        fc.categorical_column_with_vocabulary_list(\"voc\", [\"a\", \"b\"]),\n        dimension=8)\ne = tf.estimator.DNNLinearCombinedRegressor(\n        model_dir=\"/tmp/tf/test_dnn\",\n        linear_feature_columns=[f],\n        dnn_feature_columns=[f],\n        dnn_hidden_units=[10])\n\ndef input_fn():\n    return ({\"voc\": tf.identity(\n                        tf.constant([\"a\", \"b\", \"a\"], name=\"voc_input\"),\n                        name=\"identity\")},\n            tf.constant([1, 0, 1]))\n\ne.train(input_fn, steps=10)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Mac OS X 10.11.6\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.3.0\r\n- **Python version**: 3.5.2\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n\r\n### Describe the problem\r\n\r\nIt seems that the same feature column creates two tensors for `DNNLinearCombinedRegressor` (see `voc_embed` in graph below). Is this the right behavior we expected?\r\n\r\nThe behavior stems from that feature column is processed by DNN and Linear independently, see code: [dnn](https://github.com/tensorflow/tensorflow/blob/b46340f40fe5e2ec9bfcd385b07cfb914055fb51/tensorflow/python/estimator/canned/dnn_linear_combined.py#L154) and [linear](https://github.com/tensorflow/tensorflow/blob/b46340f40fe5e2ec9bfcd385b07cfb914055fb51/tensorflow/python/estimator/canned/dnn_linear_combined.py#L196)\r\n\r\n### Source code / logs\r\n\r\n```python\r\n# coding: utf-8\r\nimport tensorflow as tf\r\nfrom tensorflow import feature_column as fc\r\n\r\nf = fc.embedding_column(\r\n        fc.categorical_column_with_vocabulary_list(\"voc\", [\"a\", \"b\"]),\r\n        dimension=8)\r\ne = tf.estimator.DNNLinearCombinedRegressor(\r\n        model_dir=\"/tmp/tf/test_dnn\",\r\n        linear_feature_columns=[f],\r\n        dnn_feature_columns=[f],\r\n        dnn_hidden_units=[10])\r\n\r\ndef input_fn():\r\n    return ({\"voc\": tf.identity(\r\n                        tf.constant([\"a\", \"b\", \"a\"], name=\"voc_input\"),\r\n                        name=\"identity\")},\r\n            tf.constant([1, 0, 1]))\r\n\r\ne.train(input_fn, steps=10)\r\n```\r\n\r\n![graph-large_attrs_key _too_large_attrs limit_attr_size 1024 run 1](https://user-images.githubusercontent.com/1112263/30632078-63853988-9e19-11e7-94c8-c660c6ed55e2.png)\r\n"}