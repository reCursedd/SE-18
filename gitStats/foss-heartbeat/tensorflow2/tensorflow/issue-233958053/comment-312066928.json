{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/312066928", "html_url": "https://github.com/tensorflow/tensorflow/issues/10468#issuecomment-312066928", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10468", "id": 312066928, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjA2NjkyOA==", "user": {"login": "nojvek", "id": 1018196, "node_id": "MDQ6VXNlcjEwMTgxOTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1018196?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nojvek", "html_url": "https://github.com/nojvek", "followers_url": "https://api.github.com/users/nojvek/followers", "following_url": "https://api.github.com/users/nojvek/following{/other_user}", "gists_url": "https://api.github.com/users/nojvek/gists{/gist_id}", "starred_url": "https://api.github.com/users/nojvek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nojvek/subscriptions", "organizations_url": "https://api.github.com/users/nojvek/orgs", "repos_url": "https://api.github.com/users/nojvek/repos", "events_url": "https://api.github.com/users/nojvek/events{/privacy}", "received_events_url": "https://api.github.com/users/nojvek/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-29T18:55:35Z", "updated_at": "2017-06-29T18:55:55Z", "author_association": "NONE", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4228246\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gsabran\">@gsabran</a>.</p>\n<p>Is that the official pip package source or just a clone. I see apple mentions it in their docs. <a href=\"https://developer.apple.com/machine-learning/\" rel=\"nofollow\">https://developer.apple.com/machine-learning/</a></p>\n<p>I do like that Apple just didn't invent their own crazy format but built it on protobuf.</p>\n<p>As far as I'm aware keras can load from 'json + h5'.</p>\n<pre><code># serialize model to JSON\nmodel_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\n# serialize weights to HDF5\nmodel.save_weights(\"model.h5\")\nprint(\"Saved model to disk\")\n \n# later...\n \n# load json and create model\njson_file = open('model.json', 'r')\nloaded_model_json = json_file.read()\njson_file.close()\nloaded_model = model_from_json(loaded_model_json)\n# load weights into new model\nloaded_model.load_weights(\"model.h5\")\n</code></pre>\n<p>This should be relatively straightforward to achieve to write a converter for right?</p>", "body_text": "Thanks @gsabran.\nIs that the official pip package source or just a clone. I see apple mentions it in their docs. https://developer.apple.com/machine-learning/\nI do like that Apple just didn't invent their own crazy format but built it on protobuf.\nAs far as I'm aware keras can load from 'json + h5'.\n# serialize model to JSON\nmodel_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\n# serialize weights to HDF5\nmodel.save_weights(\"model.h5\")\nprint(\"Saved model to disk\")\n \n# later...\n \n# load json and create model\njson_file = open('model.json', 'r')\nloaded_model_json = json_file.read()\njson_file.close()\nloaded_model = model_from_json(loaded_model_json)\n# load weights into new model\nloaded_model.load_weights(\"model.h5\")\n\nThis should be relatively straightforward to achieve to write a converter for right?", "body": "Thanks @gsabran.\r\n\r\nIs that the official pip package source or just a clone. I see apple mentions it in their docs. https://developer.apple.com/machine-learning/\r\n\r\nI do like that Apple just didn't invent their own crazy format but built it on protobuf.\r\n\r\nAs far as I'm aware keras can load from 'json + h5'. \r\n\r\n```\r\n# serialize model to JSON\r\nmodel_json = model.to_json()\r\nwith open(\"model.json\", \"w\") as json_file:\r\n    json_file.write(model_json)\r\n# serialize weights to HDF5\r\nmodel.save_weights(\"model.h5\")\r\nprint(\"Saved model to disk\")\r\n \r\n# later...\r\n \r\n# load json and create model\r\njson_file = open('model.json', 'r')\r\nloaded_model_json = json_file.read()\r\njson_file.close()\r\nloaded_model = model_from_json(loaded_model_json)\r\n# load weights into new model\r\nloaded_model.load_weights(\"model.h5\")\r\n```\r\n\r\nThis should be relatively straightforward to achieve to write a converter for right?"}