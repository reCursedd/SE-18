{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/301087493", "html_url": "https://github.com/tensorflow/tensorflow/issues/2732#issuecomment-301087493", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2732", "id": 301087493, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTA4NzQ5Mw==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-12T14:11:58Z", "updated_at": "2017-05-12T14:15:42Z", "author_association": "CONTRIBUTOR", "body_html": "<p>You could try a simple feed-forward network with squared loss. Training can be implemented with only <code>matmul</code> and <code>reduce_sum</code>, if there's non-determinism there, then pretty much everything is potentially non-deterministic. Addition of floating point numbers is not-associative, so if the other of summing things together in matmul/reduce_sum changes, that can affect results. Typically this is not considered a bug as long as relative error of results stays within machine epsilon (1e-7 for float32). Note that multiplication changes the scale of relative error -- ie, if you have an initial error in result of 1e-7, and multiply result by 10^6, the absolute error blows up, but relative error stays the same</p>", "body_text": "You could try a simple feed-forward network with squared loss. Training can be implemented with only matmul and reduce_sum, if there's non-determinism there, then pretty much everything is potentially non-deterministic. Addition of floating point numbers is not-associative, so if the other of summing things together in matmul/reduce_sum changes, that can affect results. Typically this is not considered a bug as long as relative error of results stays within machine epsilon (1e-7 for float32). Note that multiplication changes the scale of relative error -- ie, if you have an initial error in result of 1e-7, and multiply result by 10^6, the absolute error blows up, but relative error stays the same", "body": "You could try a simple feed-forward network with squared loss. Training can be implemented with only `matmul` and `reduce_sum`, if there's non-determinism there, then pretty much everything is potentially non-deterministic. Addition of floating point numbers is not-associative, so if the other of summing things together in matmul/reduce_sum changes, that can affect results. Typically this is not considered a bug as long as relative error of results stays within machine epsilon (1e-7 for float32). Note that multiplication changes the scale of relative error -- ie, if you have an initial error in result of 1e-7, and multiply result by 10^6, the absolute error blows up, but relative error stays the same"}