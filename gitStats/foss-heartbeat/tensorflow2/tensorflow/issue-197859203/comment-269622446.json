{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/269622446", "html_url": "https://github.com/tensorflow/tensorflow/issues/6540#issuecomment-269622446", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6540", "id": 269622446, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTYyMjQ0Ng==", "user": {"login": "sjperkins", "id": 3530212, "node_id": "MDQ6VXNlcjM1MzAyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3530212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjperkins", "html_url": "https://github.com/sjperkins", "followers_url": "https://api.github.com/users/sjperkins/followers", "following_url": "https://api.github.com/users/sjperkins/following{/other_user}", "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions", "organizations_url": "https://api.github.com/users/sjperkins/orgs", "repos_url": "https://api.github.com/users/sjperkins/repos", "events_url": "https://api.github.com/users/sjperkins/events{/privacy}", "received_events_url": "https://api.github.com/users/sjperkins/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-29T12:17:46Z", "updated_at": "2016-12-29T12:45:35Z", "author_association": "CONTRIBUTOR", "body_html": "<p><strong>tl;dr</strong> Just use <code>pip</code> for everything, rather than <code>python setup.py ...</code> (a.k.a. <code>easy_install</code>) which is deprecated</p>\n<p>Feel free to close if you don't want to support the legacy <code>easy_install</code> stuff.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1192265\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yifeif\">@yifeif</a> My use case for placing <code>tensorflow-gpu</code> in <code>setup_requires</code> is compiling custom ops into a shared library (python extension) during the installation process of a module I'm building. So I wanted  tensorflow to be installed after the setup.py is run but before the extension was compiled.</p>\n<p>For others encountering this issue, just use pip. I was using  <code>python setup.py ...</code> calls which invoke easy_install (see below), but this is <a href=\"https://docs.python.org/2/install/\" rel=\"nofollow\">legacy</a> behaviour and <a href=\"https://docs.python.org/2/installing/index.html\" rel=\"nofollow\">pip</a> is now the way forward. So this issue arose out of different module install methods.</p>\n<p>I made a small module <a href=\"https://github.com/tensorflow/tensorflow/files/677030/testsetup.zip\">(testsetup.zip)</a>  to test things out for future reference:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> ez_setup\nez_setup.use_setuptools()\n\n<span class=\"pl-k\">from</span> setuptools <span class=\"pl-k\">import</span> setup, find_packages\n<span class=\"pl-k\">from</span> setuptools.command.install <span class=\"pl-k\">import</span> install\n<span class=\"pl-k\">from</span> setuptools.command.develop <span class=\"pl-k\">import</span> develop\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">DevelopCommand</span>(<span class=\"pl-e\">develop</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span>import tensorflow</span>\n        develop.run(<span class=\"pl-c1\">self</span>)\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">InstallCommand</span>(<span class=\"pl-e\">install</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">run</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span>import tensorflow</span>\n        install.run(<span class=\"pl-c1\">self</span>)\n\nsetup(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>testsetup<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>setup_requires=['tensorflow-gpu'],</span>\n    <span class=\"pl-v\">install_requires</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>tensorflow-gpu<span class=\"pl-pds\">'</span></span>],\n    <span class=\"pl-v\">packages</span><span class=\"pl-k\">=</span>find_packages(),\n    <span class=\"pl-v\">cmdclass</span><span class=\"pl-k\">=</span>{\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>install<span class=\"pl-pds\">'</span></span> : InstallCommand,\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>develop<span class=\"pl-pds\">'</span></span> : DevelopCommand,\n     },\n)\n</pre></div>\n<p>Within the install directory if one calls:</p>\n<ul>\n<li><code>python setup.py install</code> it succeeds without installing dependencies!</li>\n<li><code>python setup.py develop</code> it defers to easy_install and fails because <code>easy_install</code> can't find an egg.</li>\n<li><code>pip install .</code> it succeeds if setup_requires is commented out, but fails otherwise. However, <code>setup_requires</code> isn't strictly required since <code>install_requires</code> will be run before it and the tensorflow dependency will be inplace before the bulk of the setup() code is run. Its certainly installed before InstallCommand.run() is called.</li>\n<li><code>pip install -e .</code> it succeeds if setup_requires is commented out, but fails otherwise.</li>\n</ul>", "body_text": "tl;dr Just use pip for everything, rather than python setup.py ... (a.k.a. easy_install) which is deprecated\nFeel free to close if you don't want to support the legacy easy_install stuff.\n@yifeif My use case for placing tensorflow-gpu in setup_requires is compiling custom ops into a shared library (python extension) during the installation process of a module I'm building. So I wanted  tensorflow to be installed after the setup.py is run but before the extension was compiled.\nFor others encountering this issue, just use pip. I was using  python setup.py ... calls which invoke easy_install (see below), but this is legacy behaviour and pip is now the way forward. So this issue arose out of different module install methods.\nI made a small module (testsetup.zip)  to test things out for future reference:\nimport ez_setup\nez_setup.use_setuptools()\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\nfrom setuptools.command.develop import develop\n\nclass DevelopCommand(develop):\n    def run(self):\n        #import tensorflow\n        develop.run(self)\n\nclass InstallCommand(install):\n    def run(self):\n        #import tensorflow\n        install.run(self)\n\nsetup(name=\"testsetup\",\n    #setup_requires=['tensorflow-gpu'],\n    install_requires=['tensorflow-gpu'],\n    packages=find_packages(),\n    cmdclass={\n        'install' : InstallCommand,\n        'develop' : DevelopCommand,\n     },\n)\n\nWithin the install directory if one calls:\n\npython setup.py install it succeeds without installing dependencies!\npython setup.py develop it defers to easy_install and fails because easy_install can't find an egg.\npip install . it succeeds if setup_requires is commented out, but fails otherwise. However, setup_requires isn't strictly required since install_requires will be run before it and the tensorflow dependency will be inplace before the bulk of the setup() code is run. Its certainly installed before InstallCommand.run() is called.\npip install -e . it succeeds if setup_requires is commented out, but fails otherwise.", "body": "**tl;dr** Just use `pip` for everything, rather than `python setup.py ...` (a.k.a. `easy_install`) which is deprecated\r\n\r\nFeel free to close if you don't want to support the legacy `easy_install` stuff.\r\n\r\n@yifeif My use case for placing `tensorflow-gpu` in `setup_requires` is compiling custom ops into a shared library (python extension) during the installation process of a module I'm building. So I wanted  tensorflow to be installed after the setup.py is run but before the extension was compiled.\r\n\r\nFor others encountering this issue, just use pip. I was using  `python setup.py ...` calls which invoke easy_install (see below), but this is [legacy](https://docs.python.org/2/install/) behaviour and [pip](https://docs.python.org/2/installing/index.html) is now the way forward. So this issue arose out of different module install methods.\r\n\r\nI made a small module [(testsetup.zip)](https://github.com/tensorflow/tensorflow/files/677030/testsetup.zip)  to test things out for future reference:\r\n\r\n```python\r\nimport ez_setup\r\nez_setup.use_setuptools()\r\n\r\nfrom setuptools import setup, find_packages\r\nfrom setuptools.command.install import install\r\nfrom setuptools.command.develop import develop\r\n\r\nclass DevelopCommand(develop):\r\n    def run(self):\r\n        #import tensorflow\r\n        develop.run(self)\r\n\r\nclass InstallCommand(install):\r\n    def run(self):\r\n        #import tensorflow\r\n        install.run(self)\r\n\r\nsetup(name=\"testsetup\",\r\n    #setup_requires=['tensorflow-gpu'],\r\n    install_requires=['tensorflow-gpu'],\r\n    packages=find_packages(),\r\n    cmdclass={\r\n        'install' : InstallCommand,\r\n        'develop' : DevelopCommand,\r\n     },\r\n)\r\n\r\n```\r\n\r\nWithin the install directory if one calls:\r\n\r\n- `python setup.py install` it succeeds without installing dependencies!\r\n- `python setup.py develop` it defers to easy_install and fails because `easy_install` can't find an egg.\r\n- `pip install .` it succeeds if setup_requires is commented out, but fails otherwise. However, `setup_requires` isn't strictly required since `install_requires` will be run before it and the tensorflow dependency will be inplace before the bulk of the setup() code is run. Its certainly installed before InstallCommand.run() is called.\r\n- `pip install -e .` it succeeds if setup_requires is commented out, but fails otherwise.\r\n\r\n"}