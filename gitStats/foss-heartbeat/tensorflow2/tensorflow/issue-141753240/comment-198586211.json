{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/198586211", "html_url": "https://github.com/tensorflow/tensorflow/issues/1539#issuecomment-198586211", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1539", "id": 198586211, "node_id": "MDEyOklzc3VlQ29tbWVudDE5ODU4NjIxMQ==", "user": {"login": "jlebar", "id": 150663, "node_id": "MDQ6VXNlcjE1MDY2Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/150663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlebar", "html_url": "https://github.com/jlebar", "followers_url": "https://api.github.com/users/jlebar/followers", "following_url": "https://api.github.com/users/jlebar/following{/other_user}", "gists_url": "https://api.github.com/users/jlebar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlebar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlebar/subscriptions", "organizations_url": "https://api.github.com/users/jlebar/orgs", "repos_url": "https://api.github.com/users/jlebar/repos", "events_url": "https://api.github.com/users/jlebar/events{/privacy}", "received_events_url": "https://api.github.com/users/jlebar/received_events", "type": "User", "site_admin": false}, "created_at": "2016-03-18T23:51:28Z", "updated_at": "2016-03-18T23:51:28Z", "author_association": "MEMBER", "body_html": "<blockquote>\n<p>use --platform_suffix=clang_cuda so bazel chooses different output directories for temp files</p>\n</blockquote>\n<p>Thanks, that's an improvement.  :)</p>\n<p>But, sigh, bazel test seems to be stripping out LD_LIBRARY_PATH, even though the docs [1] say it doesn't.  So</p>\n<pre><code>$ bazel test --config=cuda --platform_suffix=cuda -c opt //tensorflow/tensorboard/backend:server_test\n</code></pre>\n<p>fails because it can't find libcudart.so.7.0, but <code>bazel run</code> works fine.  --spawn_strategy=standalone doesn't help.</p>\n<p>So for running all the CUDA tests, I'm down to using xargs to bazel run them all.  Is that right?</p>\n<p>When I do so, many fail even with nvcc, including ops_array_grad_test -- I guess these just shouldn't be built with --config=cuda with or without clang.  (Which I should have figured out earlier, but eluded me because my base test run was missing --config=cuda -- sorry.)</p>\n<p>Running all the tests with --config=cuda and --config=cuda_clang, the only differences in test success/failure are in six tests.</p>\n<p>These fail with nvcc but not with clang:</p>\n<ul>\n<li>models/embedding:word2vec_optimized_test</li>\n<li>python:control_flow_ops_py_test</li>\n<li>python:gradients_test</li>\n<li>python:graph_util_test</li>\n</ul>\n<p>And these fail with clang but not nvcc:</p>\n<ul>\n<li>python:decode_raw_op_test</li>\n<li>python:slice_op_test</li>\n</ul>\n<p>But since none of these tests match the glob from above, am I right in concluding that we're in the clear here?  If so we can close this bug.</p>\n<p>[1] <a href=\"http://bazel.io/docs/test-encyclopedia.html\" rel=\"nofollow\">http://bazel.io/docs/test-encyclopedia.html</a></p>", "body_text": "use --platform_suffix=clang_cuda so bazel chooses different output directories for temp files\n\nThanks, that's an improvement.  :)\nBut, sigh, bazel test seems to be stripping out LD_LIBRARY_PATH, even though the docs [1] say it doesn't.  So\n$ bazel test --config=cuda --platform_suffix=cuda -c opt //tensorflow/tensorboard/backend:server_test\n\nfails because it can't find libcudart.so.7.0, but bazel run works fine.  --spawn_strategy=standalone doesn't help.\nSo for running all the CUDA tests, I'm down to using xargs to bazel run them all.  Is that right?\nWhen I do so, many fail even with nvcc, including ops_array_grad_test -- I guess these just shouldn't be built with --config=cuda with or without clang.  (Which I should have figured out earlier, but eluded me because my base test run was missing --config=cuda -- sorry.)\nRunning all the tests with --config=cuda and --config=cuda_clang, the only differences in test success/failure are in six tests.\nThese fail with nvcc but not with clang:\n\nmodels/embedding:word2vec_optimized_test\npython:control_flow_ops_py_test\npython:gradients_test\npython:graph_util_test\n\nAnd these fail with clang but not nvcc:\n\npython:decode_raw_op_test\npython:slice_op_test\n\nBut since none of these tests match the glob from above, am I right in concluding that we're in the clear here?  If so we can close this bug.\n[1] http://bazel.io/docs/test-encyclopedia.html", "body": "> use --platform_suffix=clang_cuda so bazel chooses different output directories for temp files\n\nThanks, that's an improvement.  :)\n\nBut, sigh, bazel test seems to be stripping out LD_LIBRARY_PATH, even though the docs [1] say it doesn't.  So\n\n```\n$ bazel test --config=cuda --platform_suffix=cuda -c opt //tensorflow/tensorboard/backend:server_test\n```\n\nfails because it can't find libcudart.so.7.0, but `bazel run` works fine.  --spawn_strategy=standalone doesn't help.\n\nSo for running all the CUDA tests, I'm down to using xargs to bazel run them all.  Is that right?\n\nWhen I do so, many fail even with nvcc, including ops_array_grad_test -- I guess these just shouldn't be built with --config=cuda with or without clang.  (Which I should have figured out earlier, but eluded me because my base test run was missing --config=cuda -- sorry.)\n\nRunning all the tests with --config=cuda and --config=cuda_clang, the only differences in test success/failure are in six tests.\n\nThese fail with nvcc but not with clang:\n- models/embedding:word2vec_optimized_test\n- python:control_flow_ops_py_test\n- python:gradients_test\n- python:graph_util_test\n\nAnd these fail with clang but not nvcc:\n- python:decode_raw_op_test\n- python:slice_op_test\n\nBut since none of these tests match the glob from above, am I right in concluding that we're in the clear here?  If so we can close this bug.\n\n[1] http://bazel.io/docs/test-encyclopedia.html\n"}