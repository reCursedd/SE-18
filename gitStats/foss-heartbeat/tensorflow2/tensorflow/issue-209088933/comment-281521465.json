{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/281521465", "html_url": "https://github.com/tensorflow/tensorflow/pull/7730#issuecomment-281521465", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7730", "id": 281521465, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTUyMTQ2NQ==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-21T23:53:26Z", "updated_at": "2017-02-21T23:53:26Z", "author_association": "MEMBER", "body_html": "<p>Thanks for the change. Though, looking at the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#clone()\" rel=\"nofollow\">API contract for <code>Object.clone()</code></a>, I'm not sure if this is appropriate. Particularly, the line:</p>\n<p>By convention, the object returned by this method should be independent of this object (which is being cloned).</p>\n<p>I realize that currently Tensor objects are essentially immutable, so it may not matter yet. But I suspect that this will change in the future (folks wanting to write directly to portions of the buffer) and then the fact that two clones share the same underlying buffer may become confusing.</p>\n<p>IIRC, your motivation to do this stems from making scala bindings more idiomatic, where there are no <code>try-with-resources</code> blocks? Would a lightweight reference counting class over Tensor be something you could use in your code instead?</p>\n<p>(FYI <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=170179\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jhseu\">@jhseu</a>)</p>", "body_text": "Thanks for the change. Though, looking at the API contract for Object.clone(), I'm not sure if this is appropriate. Particularly, the line:\nBy convention, the object returned by this method should be independent of this object (which is being cloned).\nI realize that currently Tensor objects are essentially immutable, so it may not matter yet. But I suspect that this will change in the future (folks wanting to write directly to portions of the buffer) and then the fact that two clones share the same underlying buffer may become confusing.\nIIRC, your motivation to do this stems from making scala bindings more idiomatic, where there are no try-with-resources blocks? Would a lightweight reference counting class over Tensor be something you could use in your code instead?\n(FYI @jhseu)", "body": "Thanks for the change. Though, looking at the [API contract for `Object.clone()`](https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#clone()), I'm not sure if this is appropriate. Particularly, the line:\r\n\r\nBy convention, the object returned by this method should be independent of this object (which is being cloned).\r\n\r\nI realize that currently Tensor objects are essentially immutable, so it may not matter yet. But I suspect that this will change in the future (folks wanting to write directly to portions of the buffer) and then the fact that two clones share the same underlying buffer may become confusing.\r\n\r\nIIRC, your motivation to do this stems from making scala bindings more idiomatic, where there are no `try-with-resources` blocks? Would a lightweight reference counting class over Tensor be something you could use in your code instead?\r\n\r\n(FYI @jhseu)"}