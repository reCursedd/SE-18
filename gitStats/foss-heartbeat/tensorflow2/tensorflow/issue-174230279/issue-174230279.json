{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4121", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4121/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4121/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4121/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4121", "id": 174230279, "node_id": "MDU6SXNzdWUxNzQyMzAyNzk=", "number": 4121, "title": "Lack of 'name' argument in the tf.contrib.learn.Classifier.evaluate method", "user": {"login": "kodrzywolek", "id": 11957164, "node_id": "MDQ6VXNlcjExOTU3MTY0", "avatar_url": "https://avatars2.githubusercontent.com/u/11957164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kodrzywolek", "html_url": "https://github.com/kodrzywolek", "followers_url": "https://api.github.com/users/kodrzywolek/followers", "following_url": "https://api.github.com/users/kodrzywolek/following{/other_user}", "gists_url": "https://api.github.com/users/kodrzywolek/gists{/gist_id}", "starred_url": "https://api.github.com/users/kodrzywolek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kodrzywolek/subscriptions", "organizations_url": "https://api.github.com/users/kodrzywolek/orgs", "repos_url": "https://api.github.com/users/kodrzywolek/repos", "events_url": "https://api.github.com/users/kodrzywolek/events{/privacy}", "received_events_url": "https://api.github.com/users/kodrzywolek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2016-08-31T09:48:21Z", "updated_at": "2016-09-01T04:56:11Z", "closed_at": "2016-09-01T04:56:11Z", "author_association": "NONE", "body_html": "<p>Tensorflow version 0.10.0rc0 (Installed today by pip from <a href=\"https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.10.0rc0-cp27-none-linux_x86_64.whl\" rel=\"nofollow\">https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.10.0rc0-cp27-none-linux_x86_64.whl</a>)</p>\n<p>I'm working with examples from <a href=\"https://www.tensorflow.org/versions/r0.10/tutorials/tflearn/index.html\" rel=\"nofollow\">here</a> and <a href=\"https://www.tensorflow.org/versions/r0.10/tutorials/monitors/index.html\" rel=\"nofollow\">here</a>:</p>\n<pre><code>from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\nimport numpy as np\n\ntf.logging.set_verbosity(tf.logging.INFO)\n\n# Data sets\nIRIS_TRAINING = \"iris_training.csv\"\nIRIS_TEST = \"iris_test.csv\"\n\n# Load datasets.\ntraining_set = tf.contrib.learn.datasets.base.load_csv(filename=IRIS_TRAINING,\n                                                       target_dtype=np.int)\ntest_set = tf.contrib.learn.datasets.base.load_csv(filename=IRIS_TEST,\n                                                   target_dtype=np.int)\n\n# Specify that all features have real-value data\nfeature_columns = [tf.contrib.layers.real_valued_column(\"\", dimension=4)]\n\n# Build 3 layer DNN with 10, 20, 10 units respectively.\nclassifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10, 20, 10],\n                                            n_classes=3,\n                                            model_dir=\"/tmp/iris_model\",\n                                            config=tf.contrib.learn.RunConfig(\n                                                save_checkpoints_secs=1))\n\nvalidation_metrics = {(\"metrics/accuracy\", \"classes\"): tf.contrib.metrics.streaming_accuracy,\n                      (\"metrics/precision\", \"classes\"): tf.contrib.metrics.streaming_precision,\n                      (\"metrics/recall\", \"classes\"): tf.contrib.metrics.streaming_recall}\n\nvalidation_monitor = tf.contrib.learn.monitors.ValidationMonitor(\n    test_set.data,\n    test_set.target,\n    every_n_steps=50,\n    metrics=validation_metrics)\n\n# Fit model.\nclassifier.fit(x=training_set.data,\n               y=training_set.target,\n               steps=2000,\n               monitors=[validation_monitor])\n\n# Evaluate accuracy.\naccuracy_score = classifier.evaluate(x=test_set.data,\n                                     y=test_set.target)[\"accuracy\"]\nprint('Accuracy: {0:f}'.format(accuracy_score))\n\n# Classify two new flower samples.\nnew_samples = np.array(\n    [[6.4, 3.2, 4.5, 1.5], [5.8, 3.1, 5.0, 1.7]], dtype=float)\ny = classifier.predict(new_samples)\nprint('Predictions: {}'.format(str(y)))\n</code></pre>\n<p>and everything is fine for now, but if I use my own model:</p>\n<pre><code>def my_model(x, y, mode):\n    net = tf.contrib.layers.fully_connected(x, num_outputs=10)\n    net = tf.contrib.layers.fully_connected(net, num_outputs=20)\n    net = tf.contrib.layers.fully_connected(net, num_outputs=10)\n\n    logits = tf.contrib.layers.fully_connected(net, 3)\n    prediction = tf.nn.softmax(logits)\n\n    if mode == tf.contrib.learn.ModeKeys.INFER:\n        return prediction, None, None\n\n    loss = tf.contrib.losses.softmax_cross_entropy(logits, tf.one_hot(y, 3))\n    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)\n    train_op = tf.contrib.slim.learning.create_train_op(loss, optimizer)\n\n    return prediction, loss, train_op\n\n\nclassifier = tf.contrib.learn.Classifier(model_fn=my_model,\n                                         n_classes=3,\n                                         model_dir=\"/tmp/iris_model\",\n                                         config=tf.contrib.learn.RunConfig(\n                                            save_checkpoints_secs=1))\n</code></pre>\n<p>instead of:</p>\n<pre><code>classifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10, 20, 10],\n                                            n_classes=3,\n                                            model_dir=\"/tmp/iris_model\",\n                                            config=tf.contrib.learn.RunConfig(\n                                                save_checkpoints_secs=1))\n</code></pre>\n<p>Following error occurs:</p>\n<pre><code>Traceback (most recent call last):\n  File \"/mnt/nfs/dnn/workspace/deep-learning/test/minimal_working_example.py\", line 70, in &lt;module&gt;\n    monitors=[validation_monitor])\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 240, in fit\n    max_steps=max_steps)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 578, in _train_model\n    max_steps=max_steps)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/graph_actions.py\", line 280, in _supervised_train\n    None)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/supervised_session.py\", line 270, in run\n    run_metadata=run_metadata)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/recoverable_session.py\", line 54, in run\n    run_metadata=run_metadata)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/coordinated_session.py\", line 70, in run\n    self._coord.join(self._coordinated_threads_to_join)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/python/training/coordinator.py\", line 357, in join\n    six.reraise(*self._exc_info_to_raise)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/coordinated_session.py\", line 66, in run\n    return self._sess.run(*args, **kwargs)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/monitored_session.py\", line 107, in run\n    induce_stop = monitor.step_end(monitors_step, monitor_outputs)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/monitors.py\", line 396, in step_end\n    return self.every_n_step_end(step, output)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/monitors.py\", line 687, in every_n_step_end\n    steps=self.eval_steps, metrics=self.metrics, name=self.name)\nTypeError: evaluate() got an unexpected keyword argument 'name'\n</code></pre>\n<h3>Solution</h3>\n<p>Add <code>name</code> argument to the Classifier.evaluate method.</p>", "body_text": "Tensorflow version 0.10.0rc0 (Installed today by pip from https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.10.0rc0-cp27-none-linux_x86_64.whl)\nI'm working with examples from here and here:\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\nimport numpy as np\n\ntf.logging.set_verbosity(tf.logging.INFO)\n\n# Data sets\nIRIS_TRAINING = \"iris_training.csv\"\nIRIS_TEST = \"iris_test.csv\"\n\n# Load datasets.\ntraining_set = tf.contrib.learn.datasets.base.load_csv(filename=IRIS_TRAINING,\n                                                       target_dtype=np.int)\ntest_set = tf.contrib.learn.datasets.base.load_csv(filename=IRIS_TEST,\n                                                   target_dtype=np.int)\n\n# Specify that all features have real-value data\nfeature_columns = [tf.contrib.layers.real_valued_column(\"\", dimension=4)]\n\n# Build 3 layer DNN with 10, 20, 10 units respectively.\nclassifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10, 20, 10],\n                                            n_classes=3,\n                                            model_dir=\"/tmp/iris_model\",\n                                            config=tf.contrib.learn.RunConfig(\n                                                save_checkpoints_secs=1))\n\nvalidation_metrics = {(\"metrics/accuracy\", \"classes\"): tf.contrib.metrics.streaming_accuracy,\n                      (\"metrics/precision\", \"classes\"): tf.contrib.metrics.streaming_precision,\n                      (\"metrics/recall\", \"classes\"): tf.contrib.metrics.streaming_recall}\n\nvalidation_monitor = tf.contrib.learn.monitors.ValidationMonitor(\n    test_set.data,\n    test_set.target,\n    every_n_steps=50,\n    metrics=validation_metrics)\n\n# Fit model.\nclassifier.fit(x=training_set.data,\n               y=training_set.target,\n               steps=2000,\n               monitors=[validation_monitor])\n\n# Evaluate accuracy.\naccuracy_score = classifier.evaluate(x=test_set.data,\n                                     y=test_set.target)[\"accuracy\"]\nprint('Accuracy: {0:f}'.format(accuracy_score))\n\n# Classify two new flower samples.\nnew_samples = np.array(\n    [[6.4, 3.2, 4.5, 1.5], [5.8, 3.1, 5.0, 1.7]], dtype=float)\ny = classifier.predict(new_samples)\nprint('Predictions: {}'.format(str(y)))\n\nand everything is fine for now, but if I use my own model:\ndef my_model(x, y, mode):\n    net = tf.contrib.layers.fully_connected(x, num_outputs=10)\n    net = tf.contrib.layers.fully_connected(net, num_outputs=20)\n    net = tf.contrib.layers.fully_connected(net, num_outputs=10)\n\n    logits = tf.contrib.layers.fully_connected(net, 3)\n    prediction = tf.nn.softmax(logits)\n\n    if mode == tf.contrib.learn.ModeKeys.INFER:\n        return prediction, None, None\n\n    loss = tf.contrib.losses.softmax_cross_entropy(logits, tf.one_hot(y, 3))\n    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)\n    train_op = tf.contrib.slim.learning.create_train_op(loss, optimizer)\n\n    return prediction, loss, train_op\n\n\nclassifier = tf.contrib.learn.Classifier(model_fn=my_model,\n                                         n_classes=3,\n                                         model_dir=\"/tmp/iris_model\",\n                                         config=tf.contrib.learn.RunConfig(\n                                            save_checkpoints_secs=1))\n\ninstead of:\nclassifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10, 20, 10],\n                                            n_classes=3,\n                                            model_dir=\"/tmp/iris_model\",\n                                            config=tf.contrib.learn.RunConfig(\n                                                save_checkpoints_secs=1))\n\nFollowing error occurs:\nTraceback (most recent call last):\n  File \"/mnt/nfs/dnn/workspace/deep-learning/test/minimal_working_example.py\", line 70, in <module>\n    monitors=[validation_monitor])\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 240, in fit\n    max_steps=max_steps)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 578, in _train_model\n    max_steps=max_steps)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/graph_actions.py\", line 280, in _supervised_train\n    None)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/supervised_session.py\", line 270, in run\n    run_metadata=run_metadata)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/recoverable_session.py\", line 54, in run\n    run_metadata=run_metadata)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/coordinated_session.py\", line 70, in run\n    self._coord.join(self._coordinated_threads_to_join)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/python/training/coordinator.py\", line 357, in join\n    six.reraise(*self._exc_info_to_raise)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/coordinated_session.py\", line 66, in run\n    return self._sess.run(*args, **kwargs)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/monitored_session.py\", line 107, in run\n    induce_stop = monitor.step_end(monitors_step, monitor_outputs)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/monitors.py\", line 396, in step_end\n    return self.every_n_step_end(step, output)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/monitors.py\", line 687, in every_n_step_end\n    steps=self.eval_steps, metrics=self.metrics, name=self.name)\nTypeError: evaluate() got an unexpected keyword argument 'name'\n\nSolution\nAdd name argument to the Classifier.evaluate method.", "body": "Tensorflow version 0.10.0rc0 (Installed today by pip from https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.10.0rc0-cp27-none-linux_x86_64.whl)\n\nI'm working with examples from [here](https://www.tensorflow.org/versions/r0.10/tutorials/tflearn/index.html) and [here](https://www.tensorflow.org/versions/r0.10/tutorials/monitors/index.html):\n\n```\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\nimport numpy as np\n\ntf.logging.set_verbosity(tf.logging.INFO)\n\n# Data sets\nIRIS_TRAINING = \"iris_training.csv\"\nIRIS_TEST = \"iris_test.csv\"\n\n# Load datasets.\ntraining_set = tf.contrib.learn.datasets.base.load_csv(filename=IRIS_TRAINING,\n                                                       target_dtype=np.int)\ntest_set = tf.contrib.learn.datasets.base.load_csv(filename=IRIS_TEST,\n                                                   target_dtype=np.int)\n\n# Specify that all features have real-value data\nfeature_columns = [tf.contrib.layers.real_valued_column(\"\", dimension=4)]\n\n# Build 3 layer DNN with 10, 20, 10 units respectively.\nclassifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10, 20, 10],\n                                            n_classes=3,\n                                            model_dir=\"/tmp/iris_model\",\n                                            config=tf.contrib.learn.RunConfig(\n                                                save_checkpoints_secs=1))\n\nvalidation_metrics = {(\"metrics/accuracy\", \"classes\"): tf.contrib.metrics.streaming_accuracy,\n                      (\"metrics/precision\", \"classes\"): tf.contrib.metrics.streaming_precision,\n                      (\"metrics/recall\", \"classes\"): tf.contrib.metrics.streaming_recall}\n\nvalidation_monitor = tf.contrib.learn.monitors.ValidationMonitor(\n    test_set.data,\n    test_set.target,\n    every_n_steps=50,\n    metrics=validation_metrics)\n\n# Fit model.\nclassifier.fit(x=training_set.data,\n               y=training_set.target,\n               steps=2000,\n               monitors=[validation_monitor])\n\n# Evaluate accuracy.\naccuracy_score = classifier.evaluate(x=test_set.data,\n                                     y=test_set.target)[\"accuracy\"]\nprint('Accuracy: {0:f}'.format(accuracy_score))\n\n# Classify two new flower samples.\nnew_samples = np.array(\n    [[6.4, 3.2, 4.5, 1.5], [5.8, 3.1, 5.0, 1.7]], dtype=float)\ny = classifier.predict(new_samples)\nprint('Predictions: {}'.format(str(y)))\n```\n\nand everything is fine for now, but if I use my own model:\n\n```\ndef my_model(x, y, mode):\n    net = tf.contrib.layers.fully_connected(x, num_outputs=10)\n    net = tf.contrib.layers.fully_connected(net, num_outputs=20)\n    net = tf.contrib.layers.fully_connected(net, num_outputs=10)\n\n    logits = tf.contrib.layers.fully_connected(net, 3)\n    prediction = tf.nn.softmax(logits)\n\n    if mode == tf.contrib.learn.ModeKeys.INFER:\n        return prediction, None, None\n\n    loss = tf.contrib.losses.softmax_cross_entropy(logits, tf.one_hot(y, 3))\n    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)\n    train_op = tf.contrib.slim.learning.create_train_op(loss, optimizer)\n\n    return prediction, loss, train_op\n\n\nclassifier = tf.contrib.learn.Classifier(model_fn=my_model,\n                                         n_classes=3,\n                                         model_dir=\"/tmp/iris_model\",\n                                         config=tf.contrib.learn.RunConfig(\n                                            save_checkpoints_secs=1))\n```\n\ninstead of:\n\n```\nclassifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10, 20, 10],\n                                            n_classes=3,\n                                            model_dir=\"/tmp/iris_model\",\n                                            config=tf.contrib.learn.RunConfig(\n                                                save_checkpoints_secs=1))\n```\n\nFollowing error occurs:\n\n```\nTraceback (most recent call last):\n  File \"/mnt/nfs/dnn/workspace/deep-learning/test/minimal_working_example.py\", line 70, in <module>\n    monitors=[validation_monitor])\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 240, in fit\n    max_steps=max_steps)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 578, in _train_model\n    max_steps=max_steps)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/graph_actions.py\", line 280, in _supervised_train\n    None)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/supervised_session.py\", line 270, in run\n    run_metadata=run_metadata)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/recoverable_session.py\", line 54, in run\n    run_metadata=run_metadata)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/coordinated_session.py\", line 70, in run\n    self._coord.join(self._coordinated_threads_to_join)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/python/training/coordinator.py\", line 357, in join\n    six.reraise(*self._exc_info_to_raise)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/coordinated_session.py\", line 66, in run\n    return self._sess.run(*args, **kwargs)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/monitored_session.py\", line 107, in run\n    induce_stop = monitor.step_end(monitors_step, monitor_outputs)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/monitors.py\", line 396, in step_end\n    return self.every_n_step_end(step, output)\n  File \"/***/deep-learning/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/monitors.py\", line 687, in every_n_step_end\n    steps=self.eval_steps, metrics=self.metrics, name=self.name)\nTypeError: evaluate() got an unexpected keyword argument 'name'\n```\n### Solution\n\nAdd `name` argument to the Classifier.evaluate method.\n"}