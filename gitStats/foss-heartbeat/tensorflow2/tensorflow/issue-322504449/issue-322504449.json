{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19245", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19245/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19245/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19245/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19245", "id": 322504449, "node_id": "MDU6SXNzdWUzMjI1MDQ0NDk=", "number": 19245, "title": "An error occurred while starting the kernel in CNN runing", "user": {"login": "fathi1989", "id": 39053874, "node_id": "MDQ6VXNlcjM5MDUzODc0", "avatar_url": "https://avatars2.githubusercontent.com/u/39053874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fathi1989", "html_url": "https://github.com/fathi1989", "followers_url": "https://api.github.com/users/fathi1989/followers", "following_url": "https://api.github.com/users/fathi1989/following{/other_user}", "gists_url": "https://api.github.com/users/fathi1989/gists{/gist_id}", "starred_url": "https://api.github.com/users/fathi1989/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fathi1989/subscriptions", "organizations_url": "https://api.github.com/users/fathi1989/orgs", "repos_url": "https://api.github.com/users/fathi1989/repos", "events_url": "https://api.github.com/users/fathi1989/events{/privacy}", "received_events_url": "https://api.github.com/users/fathi1989/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-05-12T11:38:16Z", "updated_at": "2018-11-14T19:18:15Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Win 8.1</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>:  1.7.0</li>\n<li><strong>Python version</strong>: 3.6.4</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: anaconda</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.0.0</li>\n<li><strong>GPU model and memory</strong>:GTX 740m</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I can run NN code but i can't run CNN code.<br>\nwhen i run a CNN code, the kernel suddenly dies. I see this error:<br>\n|An error occurred while starting the kernel|</p>\n<h3>Source code / logs</h3>\n<p>from keras.datasets import mnist<br>\ndef plot_history(net_history):<br>\nhistory = net_history.history<br>\nimport matplotlib.pyplot as plt<br>\nlosses = history['loss']<br>\nval_losses = history['val_loss']<br>\naccuracies = history['acc']<br>\nval_accuracies = history['val_acc']<br>\nplt.xlabel('Epochs')<br>\nplt.ylabel('Loss')<br>\nplt.plot(losses)<br>\nplt.plot(val_losses)<br>\nplt.legend(['loss', 'val_loss'])<br>\nplt.figure()<br>\nplt.xlabel('Epochs')<br>\nplt.ylabel('Accuracy')<br>\nplt.plot(accuracies)<br>\nplt.plot(val_accuracies)<br>\nplt.legend(['acc', 'val_acc'])<br>\n#========================Load data<br>\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()</p>\n<p>#================Data attributes<br>\nprint(\"train_images dimentions: \", train_images.ndim)<br>\nprint(\"train_images shape: \", train_images.shape)<br>\nprint(\"train_images type: \", train_images.dtype)</p>\n<p>X_train = train_images.reshape(60000, 784)<br>\nX_test = test_images.reshape(10000, 784)</p>\n<p>X_train = X_train.astype('float32')<br>\nX_test = X_test.astype('float32')</p>\n<p>X_train /= 255<br>\nX_test /= 255</p>\n<p>from keras.utils import np_utils<br>\nY_train = np_utils.to_categorical(train_labels)<br>\nY_test = np_utils.to_categorical(test_labels)</p>\n<p>#==============Creating our model====================================<br>\nfrom keras.models import Sequential<br>\nfrom keras.layers import Dense, Dropout<br>\nfrom keras.optimizers import SGD<br>\nfrom keras.losses import categorical_crossentropy</p>\n<p>myModel = Sequential()<br>\nmyModel.add(Dense(500, activation='relu', input_shape=(784,)))<br>\nmyModel.add(Dropout(20))<br>\nmyModel.add(Dense(100, activation='relu'))<br>\nmyModel.add(Dropout(20))<br>\nmyModel.add(Dense(10, activation='softmax'))</p>\n<p>myModel.summary()<br>\nmyModel.compile(optimizer=SGD(lr=0.001), loss=categorical_crossentropy, metrics=['accuracy'])</p>\n<p>#=====Train our model=============================================<br>\nnetwork_history = myModel.fit(X_train, Y_train, batch_size=128, epochs=20, validation_split=0.2)<br>\nplot_history(network_history)</p>\n<p>#=============Evaluation========================================<br>\ntest_loss, test_acc = myModel.evaluate(X_test, Y_test)<br>\ntest_labels_p = myModel.predict(X_test)<br>\nimport numpy as np<br>\ntest_labels_p = np.argmax(test_labels_p, axis=1)</p>\n<p>#=========== Change layers config================<br>\nmyModel.layers[0].name = 'Layer_0'<br>\nmyModel.layers[0].trainable = False<br>\nmyModel.layers[0].get_config()</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Win 8.1\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below):  1.7.0\nPython version: 3.6.4\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source): anaconda\nCUDA/cuDNN version: 9.0.0\nGPU model and memory:GTX 740m\nExact command to reproduce:\n\nDescribe the problem\nI can run NN code but i can't run CNN code.\nwhen i run a CNN code, the kernel suddenly dies. I see this error:\n|An error occurred while starting the kernel|\nSource code / logs\nfrom keras.datasets import mnist\ndef plot_history(net_history):\nhistory = net_history.history\nimport matplotlib.pyplot as plt\nlosses = history['loss']\nval_losses = history['val_loss']\naccuracies = history['acc']\nval_accuracies = history['val_acc']\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.plot(losses)\nplt.plot(val_losses)\nplt.legend(['loss', 'val_loss'])\nplt.figure()\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.plot(accuracies)\nplt.plot(val_accuracies)\nplt.legend(['acc', 'val_acc'])\n#========================Load data\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n#================Data attributes\nprint(\"train_images dimentions: \", train_images.ndim)\nprint(\"train_images shape: \", train_images.shape)\nprint(\"train_images type: \", train_images.dtype)\nX_train = train_images.reshape(60000, 784)\nX_test = test_images.reshape(10000, 784)\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\nX_train /= 255\nX_test /= 255\nfrom keras.utils import np_utils\nY_train = np_utils.to_categorical(train_labels)\nY_test = np_utils.to_categorical(test_labels)\n#==============Creating our model====================================\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.optimizers import SGD\nfrom keras.losses import categorical_crossentropy\nmyModel = Sequential()\nmyModel.add(Dense(500, activation='relu', input_shape=(784,)))\nmyModel.add(Dropout(20))\nmyModel.add(Dense(100, activation='relu'))\nmyModel.add(Dropout(20))\nmyModel.add(Dense(10, activation='softmax'))\nmyModel.summary()\nmyModel.compile(optimizer=SGD(lr=0.001), loss=categorical_crossentropy, metrics=['accuracy'])\n#=====Train our model=============================================\nnetwork_history = myModel.fit(X_train, Y_train, batch_size=128, epochs=20, validation_split=0.2)\nplot_history(network_history)\n#=============Evaluation========================================\ntest_loss, test_acc = myModel.evaluate(X_test, Y_test)\ntest_labels_p = myModel.predict(X_test)\nimport numpy as np\ntest_labels_p = np.argmax(test_labels_p, axis=1)\n#=========== Change layers config================\nmyModel.layers[0].name = 'Layer_0'\nmyModel.layers[0].trainable = False\nmyModel.layers[0].get_config()", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Win 8.1\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**:  1.7.0 \r\n- **Python version**: 3.6.4\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**: anaconda\r\n- **CUDA/cuDNN version**: 9.0.0  \r\n- **GPU model and memory**:GTX 740m\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nI can run NN code but i can't run CNN code.\r\nwhen i run a CNN code, the kernel suddenly dies. I see this error:\r\n|An error occurred while starting the kernel|\r\n\r\n### Source code / logs\r\nfrom keras.datasets import mnist\r\ndef plot_history(net_history):\r\nhistory = net_history.history\r\nimport matplotlib.pyplot as plt\r\nlosses = history['loss']\r\nval_losses = history['val_loss']\r\naccuracies = history['acc']\r\nval_accuracies = history['val_acc']\r\nplt.xlabel('Epochs')\r\nplt.ylabel('Loss')\r\nplt.plot(losses)\r\nplt.plot(val_losses)\r\nplt.legend(['loss', 'val_loss'])\r\nplt.figure()\r\nplt.xlabel('Epochs')\r\nplt.ylabel('Accuracy')\r\nplt.plot(accuracies)\r\nplt.plot(val_accuracies)\r\nplt.legend(['acc', 'val_acc'])\r\n#========================Load data\r\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\r\n\r\n#================Data attributes\r\nprint(\"train_images dimentions: \", train_images.ndim)\r\nprint(\"train_images shape: \", train_images.shape)\r\nprint(\"train_images type: \", train_images.dtype)\r\n\r\nX_train = train_images.reshape(60000, 784)\r\nX_test = test_images.reshape(10000, 784)\r\n\r\nX_train = X_train.astype('float32')\r\nX_test = X_test.astype('float32')\r\n\r\nX_train /= 255\r\nX_test /= 255\r\n\r\nfrom keras.utils import np_utils\r\nY_train = np_utils.to_categorical(train_labels)\r\nY_test = np_utils.to_categorical(test_labels)\r\n\r\n#==============Creating our model====================================\r\nfrom keras.models import Sequential\r\nfrom keras.layers import Dense, Dropout\r\nfrom keras.optimizers import SGD\r\nfrom keras.losses import categorical_crossentropy\r\n\r\nmyModel = Sequential()\r\nmyModel.add(Dense(500, activation='relu', input_shape=(784,)))\r\nmyModel.add(Dropout(20))\r\nmyModel.add(Dense(100, activation='relu'))\r\nmyModel.add(Dropout(20))\r\nmyModel.add(Dense(10, activation='softmax'))\r\n\r\nmyModel.summary()\r\nmyModel.compile(optimizer=SGD(lr=0.001), loss=categorical_crossentropy, metrics=['accuracy'])\r\n\r\n#=====Train our model=============================================\r\nnetwork_history = myModel.fit(X_train, Y_train, batch_size=128, epochs=20, validation_split=0.2)\r\nplot_history(network_history)\r\n\r\n#=============Evaluation========================================\r\ntest_loss, test_acc = myModel.evaluate(X_test, Y_test)\r\ntest_labels_p = myModel.predict(X_test)\r\nimport numpy as np\r\ntest_labels_p = np.argmax(test_labels_p, axis=1)\r\n\r\n#=========== Change layers config================\r\nmyModel.layers[0].name = 'Layer_0'\r\nmyModel.layers[0].trainable = False\r\nmyModel.layers[0].get_config()"}