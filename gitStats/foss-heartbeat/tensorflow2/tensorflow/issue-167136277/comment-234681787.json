{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/234681787", "html_url": "https://github.com/tensorflow/tensorflow/issues/3470#issuecomment-234681787", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3470", "id": 234681787, "node_id": "MDEyOklzc3VlQ29tbWVudDIzNDY4MTc4Nw==", "user": {"login": "hholst80", "id": 6200749, "node_id": "MDQ6VXNlcjYyMDA3NDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6200749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hholst80", "html_url": "https://github.com/hholst80", "followers_url": "https://api.github.com/users/hholst80/followers", "following_url": "https://api.github.com/users/hholst80/following{/other_user}", "gists_url": "https://api.github.com/users/hholst80/gists{/gist_id}", "starred_url": "https://api.github.com/users/hholst80/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hholst80/subscriptions", "organizations_url": "https://api.github.com/users/hholst80/orgs", "repos_url": "https://api.github.com/users/hholst80/repos", "events_url": "https://api.github.com/users/hholst80/events{/privacy}", "received_events_url": "https://api.github.com/users/hholst80/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-22T23:36:22Z", "updated_at": "2016-07-22T23:40:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a href=\"https://gist.github.com/hholst80/84fb412660b0e2de03e47daec186d094\">https://gist.github.com/hholst80/84fb412660b0e2de03e47daec186d094</a></p>\n<p>You will need a <code>.tmuxinator.yml</code> (and tmuxinator) to launch it and an Anaconda environment called <code>tf-r0.9</code> with TensorFlow r0.9:</p>\n<pre><code>name: cluster\n\n# Runs before everything. Use it to start daemons etc.\npre: rm -rf log\n\n# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.\npre_window: source activate tf-r0.9 &amp;&amp; export CUDA_VISIBLE_DEVICES=''\n\n# Specifies (by name or index) which window will be selected on project startup. If not set, the first window is used.\nstartup_window: ps\n\n# Arrange panes in one of the five preset layouts:\n# even-horizontal, even-vertical, main-horizontal, main-vertical, or tiled.\n\n# If you have installed a GPU-compatible version of TensorFlow, the `ps` will also\n# try to allocate GPU memory although it is not helpful. This could potentially\n# crash the worker on the same machine as it has little to no GPU memory to\n# allocate. To avoid this, you can prepend the previous command to start `ps`\n# with: `CUDA_VISIBLE_DEVICES=''`\n\nwindows:\n  - ps:\n      layout: even-vertical\n      panes:\n              - python cluster.py --job_name=ps --task_index=0\n              - sleep 5 &amp;&amp; tensorboard --logdir log\n  - worker0-3:\n      layout: tiled\n      panes:\n              - python cluster.py --job_name=worker --task_index=0\n              - python cluster.py --job_name=worker --task_index=1\n              - python cluster.py --job_name=worker --task_index=2\n              - python cluster.py --job_name=worker --task_index=3\n  - worker4-7:\n      layout: tiled\n      panes:\n              - python cluster.py --job_name=worker --task_index=4\n              - python cluster.py --job_name=worker --task_index=5\n              - python cluster.py --job_name=worker --task_index=6\n              - python cluster.py --job_name=worker --task_index=7\n  - worker8-11:\n      layout: tiled\n      panes:\n              - python cluster.py --job_name=worker --task_index=8\n              - python cluster.py --job_name=worker --task_index=9\n              - python cluster.py --job_name=worker --task_index=10\n              - python cluster.py --job_name=worker --task_index=11\n  - worker12-15:\n      layout: tiled\n      panes:\n              - python cluster.py --job_name=worker --task_index=12\n              - python cluster.py --job_name=worker --task_index=13\n              - python cluster.py --job_name=worker --task_index=14\n              - python cluster.py --job_name=worker --task_index=15\n</code></pre>\n<p>I can also reproduce a core dump (fail on <code>wait()</code>) using the same source by changing Agent.act line</p>\n<pre><code>self._network.copyin(self._sess)\n</code></pre>\n<p>into</p>\n<pre><code>for _ in range(100):\n  self._network.copyin(self._sess)\n</code></pre>", "body_text": "https://gist.github.com/hholst80/84fb412660b0e2de03e47daec186d094\nYou will need a .tmuxinator.yml (and tmuxinator) to launch it and an Anaconda environment called tf-r0.9 with TensorFlow r0.9:\nname: cluster\n\n# Runs before everything. Use it to start daemons etc.\npre: rm -rf log\n\n# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.\npre_window: source activate tf-r0.9 && export CUDA_VISIBLE_DEVICES=''\n\n# Specifies (by name or index) which window will be selected on project startup. If not set, the first window is used.\nstartup_window: ps\n\n# Arrange panes in one of the five preset layouts:\n# even-horizontal, even-vertical, main-horizontal, main-vertical, or tiled.\n\n# If you have installed a GPU-compatible version of TensorFlow, the `ps` will also\n# try to allocate GPU memory although it is not helpful. This could potentially\n# crash the worker on the same machine as it has little to no GPU memory to\n# allocate. To avoid this, you can prepend the previous command to start `ps`\n# with: `CUDA_VISIBLE_DEVICES=''`\n\nwindows:\n  - ps:\n      layout: even-vertical\n      panes:\n              - python cluster.py --job_name=ps --task_index=0\n              - sleep 5 && tensorboard --logdir log\n  - worker0-3:\n      layout: tiled\n      panes:\n              - python cluster.py --job_name=worker --task_index=0\n              - python cluster.py --job_name=worker --task_index=1\n              - python cluster.py --job_name=worker --task_index=2\n              - python cluster.py --job_name=worker --task_index=3\n  - worker4-7:\n      layout: tiled\n      panes:\n              - python cluster.py --job_name=worker --task_index=4\n              - python cluster.py --job_name=worker --task_index=5\n              - python cluster.py --job_name=worker --task_index=6\n              - python cluster.py --job_name=worker --task_index=7\n  - worker8-11:\n      layout: tiled\n      panes:\n              - python cluster.py --job_name=worker --task_index=8\n              - python cluster.py --job_name=worker --task_index=9\n              - python cluster.py --job_name=worker --task_index=10\n              - python cluster.py --job_name=worker --task_index=11\n  - worker12-15:\n      layout: tiled\n      panes:\n              - python cluster.py --job_name=worker --task_index=12\n              - python cluster.py --job_name=worker --task_index=13\n              - python cluster.py --job_name=worker --task_index=14\n              - python cluster.py --job_name=worker --task_index=15\n\nI can also reproduce a core dump (fail on wait()) using the same source by changing Agent.act line\nself._network.copyin(self._sess)\n\ninto\nfor _ in range(100):\n  self._network.copyin(self._sess)", "body": "https://gist.github.com/hholst80/84fb412660b0e2de03e47daec186d094\n\nYou will need a `.tmuxinator.yml` (and tmuxinator) to launch it and an Anaconda environment called `tf-r0.9` with TensorFlow r0.9:\n\n```\nname: cluster\n\n# Runs before everything. Use it to start daemons etc.\npre: rm -rf log\n\n# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.\npre_window: source activate tf-r0.9 && export CUDA_VISIBLE_DEVICES=''\n\n# Specifies (by name or index) which window will be selected on project startup. If not set, the first window is used.\nstartup_window: ps\n\n# Arrange panes in one of the five preset layouts:\n# even-horizontal, even-vertical, main-horizontal, main-vertical, or tiled.\n\n# If you have installed a GPU-compatible version of TensorFlow, the `ps` will also\n# try to allocate GPU memory although it is not helpful. This could potentially\n# crash the worker on the same machine as it has little to no GPU memory to\n# allocate. To avoid this, you can prepend the previous command to start `ps`\n# with: `CUDA_VISIBLE_DEVICES=''`\n\nwindows:\n  - ps:\n      layout: even-vertical\n      panes:\n              - python cluster.py --job_name=ps --task_index=0\n              - sleep 5 && tensorboard --logdir log\n  - worker0-3:\n      layout: tiled\n      panes:\n              - python cluster.py --job_name=worker --task_index=0\n              - python cluster.py --job_name=worker --task_index=1\n              - python cluster.py --job_name=worker --task_index=2\n              - python cluster.py --job_name=worker --task_index=3\n  - worker4-7:\n      layout: tiled\n      panes:\n              - python cluster.py --job_name=worker --task_index=4\n              - python cluster.py --job_name=worker --task_index=5\n              - python cluster.py --job_name=worker --task_index=6\n              - python cluster.py --job_name=worker --task_index=7\n  - worker8-11:\n      layout: tiled\n      panes:\n              - python cluster.py --job_name=worker --task_index=8\n              - python cluster.py --job_name=worker --task_index=9\n              - python cluster.py --job_name=worker --task_index=10\n              - python cluster.py --job_name=worker --task_index=11\n  - worker12-15:\n      layout: tiled\n      panes:\n              - python cluster.py --job_name=worker --task_index=12\n              - python cluster.py --job_name=worker --task_index=13\n              - python cluster.py --job_name=worker --task_index=14\n              - python cluster.py --job_name=worker --task_index=15\n```\n\nI can also reproduce a core dump (fail on `wait()`) using the same source by changing Agent.act line\n\n```\nself._network.copyin(self._sess)\n```\n\ninto\n\n```\nfor _ in range(100):\n  self._network.copyin(self._sess)\n```\n"}