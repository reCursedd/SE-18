{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/335589772", "html_url": "https://github.com/tensorflow/tensorflow/issues/13591#issuecomment-335589772", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13591", "id": 335589772, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTU4OTc3Mg==", "user": {"login": "ybsave", "id": 26417094, "node_id": "MDQ6VXNlcjI2NDE3MDk0", "avatar_url": "https://avatars0.githubusercontent.com/u/26417094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ybsave", "html_url": "https://github.com/ybsave", "followers_url": "https://api.github.com/users/ybsave/followers", "following_url": "https://api.github.com/users/ybsave/following{/other_user}", "gists_url": "https://api.github.com/users/ybsave/gists{/gist_id}", "starred_url": "https://api.github.com/users/ybsave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ybsave/subscriptions", "organizations_url": "https://api.github.com/users/ybsave/orgs", "repos_url": "https://api.github.com/users/ybsave/repos", "events_url": "https://api.github.com/users/ybsave/events{/privacy}", "received_events_url": "https://api.github.com/users/ybsave/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-10T19:58:46Z", "updated_at": "2017-10-10T19:59:51Z", "author_association": "NONE", "body_html": "<p>Thank you both for your help. After I change the float32 to int32, the number now overflows normally.<br>\nAfter I added the tf.OptimizerOptions.L0 as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6510203\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/reedwm\">@reedwm</a> suggested, I encountered the following weird issues:</p>\n<ol>\n<li>\n<p>Test1() started to show output message \" CUDA_ERROR_OUT_OF_MEMORY\" as soon as NUM_ELEMS is greater than int((4 * GPU_MEMORY_BYTES / 8) / 4); this is reasonable. But it did not crash and still outputs the overflowed value! If the NUM_ELEMS is smaller than that, no \"CUDA_ERROR_OUT_OF_MEMORY\" is shown.</p>\n</li>\n<li>\n<p>Test2() is exactly the same output as Test1()! When NUM_ELEMS is greater than int((4 * GPU_MEMORY_BYTES / 8) / 4), it shows \"CUDA_ERROR_OUT_OF_MEMORY\" but does not crash. When the NUM_ELEMS is greater than GPU_MEMORY_BYTES/4, it started to crash. This is really weird.</p>\n</li>\n</ol>\n<p>I noticed that in both cases, the regular computer memory cost a lot; don't know whether this is related to the problem. I am confused about the outputs. What may cause these weird issues? Thank you.</p>", "body_text": "Thank you both for your help. After I change the float32 to int32, the number now overflows normally.\nAfter I added the tf.OptimizerOptions.L0 as @reedwm suggested, I encountered the following weird issues:\n\n\nTest1() started to show output message \" CUDA_ERROR_OUT_OF_MEMORY\" as soon as NUM_ELEMS is greater than int((4 * GPU_MEMORY_BYTES / 8) / 4); this is reasonable. But it did not crash and still outputs the overflowed value! If the NUM_ELEMS is smaller than that, no \"CUDA_ERROR_OUT_OF_MEMORY\" is shown.\n\n\nTest2() is exactly the same output as Test1()! When NUM_ELEMS is greater than int((4 * GPU_MEMORY_BYTES / 8) / 4), it shows \"CUDA_ERROR_OUT_OF_MEMORY\" but does not crash. When the NUM_ELEMS is greater than GPU_MEMORY_BYTES/4, it started to crash. This is really weird.\n\n\nI noticed that in both cases, the regular computer memory cost a lot; don't know whether this is related to the problem. I am confused about the outputs. What may cause these weird issues? Thank you.", "body": "Thank you both for your help. After I change the float32 to int32, the number now overflows normally. \r\nAfter I added the tf.OptimizerOptions.L0 as @reedwm suggested, I encountered the following weird issues:\r\n\r\n1. Test1() started to show output message \" CUDA_ERROR_OUT_OF_MEMORY\" as soon as NUM_ELEMS is greater than int((4 * GPU_MEMORY_BYTES / 8) / 4); this is reasonable. But it did not crash and still outputs the overflowed value! If the NUM_ELEMS is smaller than that, no \"CUDA_ERROR_OUT_OF_MEMORY\" is shown.\r\n\r\n2. Test2() is exactly the same output as Test1()! When NUM_ELEMS is greater than int((4 * GPU_MEMORY_BYTES / 8) / 4), it shows \"CUDA_ERROR_OUT_OF_MEMORY\" but does not crash. When the NUM_ELEMS is greater than GPU_MEMORY_BYTES/4, it started to crash. This is really weird.\r\n\r\nI noticed that in both cases, the regular computer memory cost a lot; don't know whether this is related to the problem. I am confused about the outputs. What may cause these weird issues? Thank you."}