{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22383", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22383/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22383/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22383/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22383", "id": 361776048, "node_id": "MDU6SXNzdWUzNjE3NzYwNDg=", "number": 22383, "title": "Inconsistency in tf.nn.top_k when using sorted=False and tf.float32 tensor and GPU placement", "user": {"login": "jhultman", "id": 27909223, "node_id": "MDQ6VXNlcjI3OTA5MjIz", "avatar_url": "https://avatars3.githubusercontent.com/u/27909223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhultman", "html_url": "https://github.com/jhultman", "followers_url": "https://api.github.com/users/jhultman/followers", "following_url": "https://api.github.com/users/jhultman/following{/other_user}", "gists_url": "https://api.github.com/users/jhultman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhultman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhultman/subscriptions", "organizations_url": "https://api.github.com/users/jhultman/orgs", "repos_url": "https://api.github.com/users/jhultman/repos", "events_url": "https://api.github.com/users/jhultman/events{/privacy}", "received_events_url": "https://api.github.com/users/jhultman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "qqfish", "id": 1269299, "node_id": "MDQ6VXNlcjEyNjkyOTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1269299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qqfish", "html_url": "https://github.com/qqfish", "followers_url": "https://api.github.com/users/qqfish/followers", "following_url": "https://api.github.com/users/qqfish/following{/other_user}", "gists_url": "https://api.github.com/users/qqfish/gists{/gist_id}", "starred_url": "https://api.github.com/users/qqfish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qqfish/subscriptions", "organizations_url": "https://api.github.com/users/qqfish/orgs", "repos_url": "https://api.github.com/users/qqfish/repos", "events_url": "https://api.github.com/users/qqfish/events{/privacy}", "received_events_url": "https://api.github.com/users/qqfish/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "qqfish", "id": 1269299, "node_id": "MDQ6VXNlcjEyNjkyOTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1269299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qqfish", "html_url": "https://github.com/qqfish", "followers_url": "https://api.github.com/users/qqfish/followers", "following_url": "https://api.github.com/users/qqfish/following{/other_user}", "gists_url": "https://api.github.com/users/qqfish/gists{/gist_id}", "starred_url": "https://api.github.com/users/qqfish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qqfish/subscriptions", "organizations_url": "https://api.github.com/users/qqfish/orgs", "repos_url": "https://api.github.com/users/qqfish/repos", "events_url": "https://api.github.com/users/qqfish/events{/privacy}", "received_events_url": "https://api.github.com/users/qqfish/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-09-19T14:27:58Z", "updated_at": "2018-11-14T21:38:41Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No.</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04.</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: NA.</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary.</li>\n<li><strong>TensorFlow version (use command below)</strong>: 'v1.10.1-0-g4dcfddc5d1', '1.10.1'</li>\n<li><strong>Python version</strong>: Python 3.6.5 :: Anaconda, Inc.</li>\n<li><strong>Bazel version (if compiling from source)</strong>: NA</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: NA</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDAToolkit 9.0, CuDNN 7.1.4</li>\n<li><strong>GPU model and memory</strong>: NVIDIA Quadro P4000, 8GB (driver version 396.37)</li>\n<li><strong>Exact command to reproduce</strong>: See source code below.</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The indices and values returned by top_k(sorted=False) seem to be shuffled with respect to each other when tf.float32 tensors are used, but not when tf.int32 tensors are used. I understand that we can not expect the values to be returned in ascending/descending order since we've set sorted=False, but shouldn't the values and indices at least be consistently ordered with respect to each other? Hope this makes sense. See my minimum working example below.</p>\n<p>Edit: This seems to be a GPU-only problem.</p>\n<h3>Source code / logs</h3>\n<pre><code>import tensorflow as tf\nimport numpy as np\ntf.set_random_seed(21)\n\ndef demo_bug(np_dtype, tf_dtype):\n    np_arr = np.array([3, 2, 8, 1], np_dtype)\n    arr = tf.convert_to_tensor(np_arr, tf_dtype)\n    top_k = tf.nn.top_k(arr, k=3, sorted=False)\n\n    with tf.Session() as sess:\n        vals, inds = sess.run(top_k)\n\n    print('dtype:   ', tf_dtype.__repr__())\n    print('arr:     ', np_arr)\n    print('inds:    ', inds)\n    print('tf_vals: ', vals)\n    print('np_vals: ', np_arr[inds])\n\ndemo_bug(np.int32, tf.int32)\ndemo_bug(np.float32, tf.float32)\n\n&gt;&gt; dtype:    tf.int32\n&gt;&gt; arr:      [3 2 8 1]\n&gt;&gt; inds:     [2 0 1]\n&gt;&gt; tf_vals:  [8 3 2]\n&gt;&gt; np_vals:  [8 3 2]\n\n&gt;&gt; dtype:    tf.float32\n&gt;&gt; arr:      [3. 2. 8. 1.]\n&gt;&gt; inds:     [2 0 1]\n&gt;&gt; tf_vals:  [2. 3. 8.]\n&gt;&gt; np_vals:  [8. 3. 2.]\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No.\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04.\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA.\nTensorFlow installed from (source or binary): Binary.\nTensorFlow version (use command below): 'v1.10.1-0-g4dcfddc5d1', '1.10.1'\nPython version: Python 3.6.5 :: Anaconda, Inc.\nBazel version (if compiling from source): NA\nGCC/Compiler version (if compiling from source): NA\nCUDA/cuDNN version: CUDAToolkit 9.0, CuDNN 7.1.4\nGPU model and memory: NVIDIA Quadro P4000, 8GB (driver version 396.37)\nExact command to reproduce: See source code below.\n\nDescribe the problem\nThe indices and values returned by top_k(sorted=False) seem to be shuffled with respect to each other when tf.float32 tensors are used, but not when tf.int32 tensors are used. I understand that we can not expect the values to be returned in ascending/descending order since we've set sorted=False, but shouldn't the values and indices at least be consistently ordered with respect to each other? Hope this makes sense. See my minimum working example below.\nEdit: This seems to be a GPU-only problem.\nSource code / logs\nimport tensorflow as tf\nimport numpy as np\ntf.set_random_seed(21)\n\ndef demo_bug(np_dtype, tf_dtype):\n    np_arr = np.array([3, 2, 8, 1], np_dtype)\n    arr = tf.convert_to_tensor(np_arr, tf_dtype)\n    top_k = tf.nn.top_k(arr, k=3, sorted=False)\n\n    with tf.Session() as sess:\n        vals, inds = sess.run(top_k)\n\n    print('dtype:   ', tf_dtype.__repr__())\n    print('arr:     ', np_arr)\n    print('inds:    ', inds)\n    print('tf_vals: ', vals)\n    print('np_vals: ', np_arr[inds])\n\ndemo_bug(np.int32, tf.int32)\ndemo_bug(np.float32, tf.float32)\n\n>> dtype:    tf.int32\n>> arr:      [3 2 8 1]\n>> inds:     [2 0 1]\n>> tf_vals:  [8 3 2]\n>> np_vals:  [8 3 2]\n\n>> dtype:    tf.float32\n>> arr:      [3. 2. 8. 1.]\n>> inds:     [2 0 1]\n>> tf_vals:  [2. 3. 8.]\n>> np_vals:  [8. 3. 2.]", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No.\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04.\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: NA.\r\n- **TensorFlow installed from (source or binary)**: Binary.\r\n- **TensorFlow version (use command below)**: 'v1.10.1-0-g4dcfddc5d1', '1.10.1'\r\n- **Python version**: Python 3.6.5 :: Anaconda, Inc.\r\n- **Bazel version (if compiling from source)**: NA\r\n- **GCC/Compiler version (if compiling from source)**: NA\r\n- **CUDA/cuDNN version**: CUDAToolkit 9.0, CuDNN 7.1.4\r\n- **GPU model and memory**: NVIDIA Quadro P4000, 8GB (driver version 396.37)\r\n- **Exact command to reproduce**: See source code below.\r\n\r\n### Describe the problem\r\nThe indices and values returned by top_k(sorted=False) seem to be shuffled with respect to each other when tf.float32 tensors are used, but not when tf.int32 tensors are used. I understand that we can not expect the values to be returned in ascending/descending order since we've set sorted=False, but shouldn't the values and indices at least be consistently ordered with respect to each other? Hope this makes sense. See my minimum working example below.\r\n\r\nEdit: This seems to be a GPU-only problem.\r\n\r\n### Source code / logs\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\ntf.set_random_seed(21)\r\n\r\ndef demo_bug(np_dtype, tf_dtype):\r\n    np_arr = np.array([3, 2, 8, 1], np_dtype)\r\n    arr = tf.convert_to_tensor(np_arr, tf_dtype)\r\n    top_k = tf.nn.top_k(arr, k=3, sorted=False)\r\n\r\n    with tf.Session() as sess:\r\n        vals, inds = sess.run(top_k)\r\n\r\n    print('dtype:   ', tf_dtype.__repr__())\r\n    print('arr:     ', np_arr)\r\n    print('inds:    ', inds)\r\n    print('tf_vals: ', vals)\r\n    print('np_vals: ', np_arr[inds])\r\n\r\ndemo_bug(np.int32, tf.int32)\r\ndemo_bug(np.float32, tf.float32)\r\n\r\n>> dtype:    tf.int32\r\n>> arr:      [3 2 8 1]\r\n>> inds:     [2 0 1]\r\n>> tf_vals:  [8 3 2]\r\n>> np_vals:  [8 3 2]\r\n\r\n>> dtype:    tf.float32\r\n>> arr:      [3. 2. 8. 1.]\r\n>> inds:     [2 0 1]\r\n>> tf_vals:  [2. 3. 8.]\r\n>> np_vals:  [8. 3. 2.]\r\n```"}