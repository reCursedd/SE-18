{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18219", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18219/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18219/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18219/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18219", "id": 311013276, "node_id": "MDU6SXNzdWUzMTEwMTMyNzY=", "number": 18219, "title": "Feature Request:  OutputProjectionWrapper compatible with tf.nn.bidirectional_dynamic_rnn", "user": {"login": "Novak3", "id": 2293807, "node_id": "MDQ6VXNlcjIyOTM4MDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2293807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Novak3", "html_url": "https://github.com/Novak3", "followers_url": "https://api.github.com/users/Novak3/followers", "following_url": "https://api.github.com/users/Novak3/following{/other_user}", "gists_url": "https://api.github.com/users/Novak3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Novak3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Novak3/subscriptions", "organizations_url": "https://api.github.com/users/Novak3/orgs", "repos_url": "https://api.github.com/users/Novak3/repos", "events_url": "https://api.github.com/users/Novak3/events{/privacy}", "received_events_url": "https://api.github.com/users/Novak3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-04-03T21:57:44Z", "updated_at": "2018-11-20T13:26:56Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:  Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:  Tensorflow 1.4 Docker under CentOS 7.3</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:  Tensorflow 1.4 Docker</li>\n<li><strong>TensorFlow version (use command below)</strong>:  1.4</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: 8.0</li>\n<li><strong>GPU model and memory</strong>: Quadro M4000</li>\n<li><strong>Exact command to reproduce</strong>: N/A (feature request, not bug report)</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Feature request:  OutputProjectionWrappers for use with tf.nn.bidirectional_dynamic_rnn.  I don't think this is a bug report, per se, because I don't think the wrapper was designed for Bidirectional RNNs.</p>\n<p>tf.nn.bidirectional_dynamic_rnn wants a forward and backward RNN cell, and provides a tuple of tuples:  forward and backward outputs, forward and backward output_states.</p>\n<p>The outputProjectionWrapper just wants a cell as input, and returns another cell as an output.</p>\n<p>So while we can wrap both the forward and backward layers in their own outputProjectionWrappers and send those on to tf.nn.bidirectional_dynamic_rnn -- syntactically, it works -- it's not at all what we want conceptually.  All we've done is project the forward and backward layers independently.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):  Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):  Tensorflow 1.4 Docker under CentOS 7.3\nTensorFlow installed from (source or binary):  Tensorflow 1.4 Docker\nTensorFlow version (use command below):  1.4\nPython version: 3.6\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: 8.0\nGPU model and memory: Quadro M4000\nExact command to reproduce: N/A (feature request, not bug report)\n\nDescribe the problem\nFeature request:  OutputProjectionWrappers for use with tf.nn.bidirectional_dynamic_rnn.  I don't think this is a bug report, per se, because I don't think the wrapper was designed for Bidirectional RNNs.\ntf.nn.bidirectional_dynamic_rnn wants a forward and backward RNN cell, and provides a tuple of tuples:  forward and backward outputs, forward and backward output_states.\nThe outputProjectionWrapper just wants a cell as input, and returns another cell as an output.\nSo while we can wrap both the forward and backward layers in their own outputProjectionWrappers and send those on to tf.nn.bidirectional_dynamic_rnn -- syntactically, it works -- it's not at all what we want conceptually.  All we've done is project the forward and backward layers independently.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:  Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:  Tensorflow 1.4 Docker under CentOS 7.3\r\n- **TensorFlow installed from (source or binary)**:  Tensorflow 1.4 Docker\r\n- **TensorFlow version (use command below)**:  1.4\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: 8.0\r\n- **GPU model and memory**: Quadro M4000\r\n- **Exact command to reproduce**: N/A (feature request, not bug report)\r\n\r\n### Describe the problem\r\nFeature request:  OutputProjectionWrappers for use with tf.nn.bidirectional_dynamic_rnn.  I don't think this is a bug report, per se, because I don't think the wrapper was designed for Bidirectional RNNs. \r\n\r\ntf.nn.bidirectional_dynamic_rnn wants a forward and backward RNN cell, and provides a tuple of tuples:  forward and backward outputs, forward and backward output_states.  \r\n\r\nThe outputProjectionWrapper just wants a cell as input, and returns another cell as an output.\r\n\r\nSo while we can wrap both the forward and backward layers in their own outputProjectionWrappers and send those on to tf.nn.bidirectional_dynamic_rnn -- syntactically, it works -- it's not at all what we want conceptually.  All we've done is project the forward and backward layers independently.\r\n\r\n"}