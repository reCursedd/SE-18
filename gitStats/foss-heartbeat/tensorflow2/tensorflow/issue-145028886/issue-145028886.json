{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1733", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1733/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1733/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1733/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1733", "id": 145028886, "node_id": "MDU6SXNzdWUxNDUwMjg4ODY=", "number": 1733, "title": "rnn.dynamic_rnn() causes gradients graph building error", "user": {"login": "yaoli", "id": 1051367, "node_id": "MDQ6VXNlcjEwNTEzNjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1051367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaoli", "html_url": "https://github.com/yaoli", "followers_url": "https://api.github.com/users/yaoli/followers", "following_url": "https://api.github.com/users/yaoli/following{/other_user}", "gists_url": "https://api.github.com/users/yaoli/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaoli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaoli/subscriptions", "organizations_url": "https://api.github.com/users/yaoli/orgs", "repos_url": "https://api.github.com/users/yaoli/repos", "events_url": "https://api.github.com/users/yaoli/events{/privacy}", "received_events_url": "https://api.github.com/users/yaoli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2016-03-31T21:52:27Z", "updated_at": "2016-04-05T17:18:04Z", "closed_at": "2016-04-05T17:18:04Z", "author_association": "NONE", "body_html": "<p>I found rnn.dynamic_rnn() that seems to do what I want, but when I modified the following lines<br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/models/rnn/ptb/ptb_word_lm.py#L114-L116\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/models/rnn/ptb/ptb_word_lm.py#L114-L116</a> into</p>\n<pre><code>from tensorflow.models.rnn import rnn\noutputs, state = rnn.dynamic_rnn(cell, inputs, initial_state=self._initial_state)\noutput = tf.reshape(outputs, [-1, size])\n</code></pre>\n<p>It throws out error at the line containing <code>tf.gradients(cost, tvars)</code></p>\n<pre><code>  File \"/data/lisatmp3/yaoli/anaconda/lib/python2.7/site-packages/tensorflow/python/platform/default/_app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"ptb_word_lm.py\", line 304, in main\n    m = PTBModel(is_training=True, config=config)\n  File \"ptb_word_lm.py\", line 148, in __init__\n    grads, _ = tf.clip_by_global_norm(tf.gradients(cost, tvars),\n  File \"/data/lisatmp3/yaoli/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/gradients.py\", line 477, in gradients\n    in_grads = _AsList(grad_fn(op, *out_grads))\n  File \"/data/lisatmp3/yaoli/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/tensor_array_grad.py\", line 137, in _TensorArrayPackGrad\n    grad_source = _GetGradSource(grad)\n  File \"/data/lisatmp3/yaoli/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/tensor_array_grad.py\", line 62, in _GetGradSource\n    % op_or_tensor.name)\nValueError: Expected op/tensor name to start with gradients, got: model/gradients/model/RNN/transpose_grad/transpose:0\nUncaught exception. Entering post mortem debugging\nRunning 'cont' or 'step' will restart the program\n</code></pre>\n<p>I couldn't find any examples in the repo of using dynamic_rnn(), and hope someone could point out where it went wrong. The complete file is attached below (adapted based on <code>tensorflow/tensorflow/models/rnn/ptb/ptb_word_lm.py</code>). LOOP_VERSION=0 and 1 run all right, 2 raises the issue.</p>\n<pre><code># Copyright 2015 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Example / benchmark for building a PTB LSTM model.\n\nTrains the model described in:\n(Zaremba, et. al.) Recurrent Neural Network Regularization\nhttp://arxiv.org/abs/1409.2329\n\nThere are 3 supported model configurations:\n===========================================\n| config | epochs | train | valid  | test\n===========================================\n| small  | 13     | 37.99 | 121.39 | 115.91\n| medium | 39     | 48.45 |  86.16 |  82.07\n| large  | 55     | 37.87 |  82.62 |  78.29\nThe exact results may vary depending on the random initialization.\n\nThe hyperparameters used in the model:\n- init_scale - the initial scale of the weights\n- learning_rate - the initial value of the learning rate\n- max_grad_norm - the maximum permissible norm of the gradient\n- num_layers - the number of LSTM layers\n- num_steps - the number of unrolled steps of LSTM\n- hidden_size - the number of LSTM units\n- max_epoch - the number of epochs trained with the initial learning rate\n- max_max_epoch - the total number of epochs for training\n- keep_prob - the probability of keeping weights in the dropout layer\n- lr_decay - the decay of the learning rate for each epoch after \"max_epoch\"\n- batch_size - the batch size\n\nThe data required for this example is in the data/ dir of the\nPTB dataset from Tomas Mikolov's webpage:\n\n$ wget http://www.fit.vutbr.cz/~imikolov/rnnlm/simple-examples.tgz\n$ tar xvf simple-examples.tgz\n\nTo run:\n\n$ python ptb_word_lm.py --data_path=simple-examples/data/\n\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport time\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom tensorflow.models.rnn.ptb import reader\n\nflags = tf.flags\nlogging = tf.logging\n\nflags.DEFINE_string(\n    \"model\", \"small\",\n    \"A type of model. Possible options are: small, medium, large.\")\nflags.DEFINE_string(\"data_path\", None, \"data_path\")\n\nFLAGS = flags.FLAGS\n\nLOOP_VERSION = 2\n\nclass PTBModel(object):\n  \"\"\"The PTB model.\"\"\"\n\n  def __init__(self, is_training, config):\n    self.batch_size = batch_size = config.batch_size\n    self.num_steps = num_steps = config.num_steps\n    size = config.hidden_size\n    vocab_size = config.vocab_size\n\n    self._input_data = tf.placeholder(tf.int32, [batch_size, num_steps])\n    self._targets = tf.placeholder(tf.int32, [batch_size, num_steps])\n\n    # Slightly better results can be obtained with forget gate biases\n    # initialized to 1 but the hyperparameters of the model would need to be\n    # different than reported in the paper.\n    lstm_cell = tf.nn.rnn_cell.BasicLSTMCell(size, forget_bias=0.0)\n    if is_training and config.keep_prob &lt; 1:\n      lstm_cell = tf.nn.rnn_cell.DropoutWrapper(\n          lstm_cell, output_keep_prob=config.keep_prob)\n    cell = tf.nn.rnn_cell.MultiRNNCell([lstm_cell] * config.num_layers)\n    self._initial_state = cell.zero_state(batch_size, tf.float32)\n\n    with tf.device(\"/cpu:0\"):\n      embedding = tf.get_variable(\"embedding\", [vocab_size, size])\n      inputs = tf.nn.embedding_lookup(embedding, self._input_data) # (b, t, 200)\n\n    if is_training and config.keep_prob &lt; 1:\n      inputs = tf.nn.dropout(inputs, config.keep_prob)\n\n    # Simplified version of tensorflow.models.rnn.rnn.py's rnn().\n    # This builds an unrolled LSTM for tutorial purposes only.\n    # In general, use the rnn() or state_saving_rnn() from rnn.py.\n    #\n    # The alternative version of the code below is:\n    if LOOP_VERSION == 0:\n      from tensorflow.models.rnn import rnn\n      inputs = [tf.squeeze(input_, [1])\n               for input_ in tf.split(1, num_steps, inputs)]\n      outputs, state = rnn.rnn(cell, inputs, initial_state=self._initial_state)\n      output = tf.reshape(tf.concat(1, outputs), [-1, size])\n    if LOOP_VERSION == 1:\n      outputs = []\n      state = self._initial_state\n      with tf.variable_scope(\"RNN\"):\n        for time_step in range(num_steps):\n          if time_step &gt; 0: tf.get_variable_scope().reuse_variables()\n          (cell_output, state) = cell(inputs[:, time_step, :], state)\n          outputs.append(cell_output)\n      output = tf.reshape(tf.concat(1, outputs), [-1, size])\n    if LOOP_VERSION == 2:\n      from tensorflow.models.rnn import rnn\n      # inputs: (b,t,d)\n      outputs, state = rnn.dynamic_rnn(cell, inputs, initial_state=self._initial_state)\n      output = tf.reshape(outputs, [-1, size])\n\n    softmax_w = tf.get_variable(\"softmax_w\", [size, vocab_size])\n    softmax_b = tf.get_variable(\"softmax_b\", [vocab_size])\n    logits = tf.matmul(output, softmax_w) + softmax_b\n    loss = tf.nn.seq2seq.sequence_loss_by_example(\n        [logits],\n        [tf.reshape(self._targets, [-1])],\n        [tf.ones([batch_size * num_steps])])\n    self._cost = cost = tf.reduce_sum(loss) / batch_size\n    self._final_state = state\n\n    if not is_training:\n      return\n\n    self._lr = tf.Variable(0.0, trainable=False)\n    tvars = tf.trainable_variables()\n    grads, _ = tf.clip_by_global_norm(tf.gradients(cost, tvars),\n                                      config.max_grad_norm)\n\n    optimizer = tf.train.GradientDescentOptimizer(self.lr)\n    self._train_op = optimizer.apply_gradients(zip(grads, tvars))\n\n  def assign_lr(self, session, lr_value):\n    session.run(tf.assign(self.lr, lr_value))\n\n  @property\n  def input_data(self):\n    return self._input_data\n\n  @property\n  def targets(self):\n    return self._targets\n\n  @property\n  def initial_state(self):\n    return self._initial_state\n\n  @property\n  def cost(self):\n    return self._cost\n\n  @property\n  def final_state(self):\n    return self._final_state\n\n  @property\n  def lr(self):\n    return self._lr\n\n  @property\n  def train_op(self):\n    return self._train_op\n\n\nclass SmallConfig(object):\n  \"\"\"Small config.\"\"\"\n  init_scale = 0.1\n  learning_rate = 1.0\n  max_grad_norm = 5\n  num_layers = 2\n  num_steps = 20\n  hidden_size = 200\n  max_epoch = 4\n  max_max_epoch = 13\n  keep_prob = 1.0\n  lr_decay = 0.5\n  batch_size = 20\n  vocab_size = 10000\n\n\nclass MediumConfig(object):\n  \"\"\"Medium config.\"\"\"\n  init_scale = 0.05\n  learning_rate = 1.0\n  max_grad_norm = 5\n  num_layers = 2\n  num_steps = 35\n  hidden_size = 650\n  max_epoch = 6\n  max_max_epoch = 39\n  keep_prob = 0.5\n  lr_decay = 0.8\n  batch_size = 20\n  vocab_size = 10000\n\n\nclass LargeConfig(object):\n  \"\"\"Large config.\"\"\"\n  init_scale = 0.04\n  learning_rate = 1.0\n  max_grad_norm = 10\n  num_layers = 2\n  num_steps = 35\n  hidden_size = 1500\n  max_epoch = 14\n  max_max_epoch = 55\n  keep_prob = 0.35\n  lr_decay = 1 / 1.15\n  batch_size = 20\n  vocab_size = 10000\n\n\nclass TestConfig(object):\n  \"\"\"Tiny config, for testing.\"\"\"\n  init_scale = 0.1\n  learning_rate = 1.0\n  max_grad_norm = 1\n  num_layers = 1\n  num_steps = 2\n  hidden_size = 2\n  max_epoch = 1\n  max_max_epoch = 1\n  keep_prob = 1.0\n  lr_decay = 0.5\n  batch_size = 20\n  vocab_size = 10000\n\n\ndef run_epoch(session, m, data, eval_op, verbose=False):\n  \"\"\"Runs the model on the given data.\"\"\"\n  epoch_size = ((len(data) // m.batch_size) - 1) // m.num_steps\n  start_time = time.time()\n  costs = 0.0\n  iters = 0\n  state = m.initial_state.eval()\n  for step, (x, y) in enumerate(reader.ptb_iterator(data, m.batch_size,\n                                                    m.num_steps)):\n    cost, state, _ = session.run([m.cost, m.final_state, eval_op],\n                                 {m.input_data: x,\n                                  m.targets: y,\n                                  m.initial_state: state})\n    costs += cost\n    iters += m.num_steps\n\n    if verbose and step % (epoch_size // 10) == 10:\n      print(\"%.3f perplexity: %.3f speed: %.0f wps\" %\n            (step * 1.0 / epoch_size, np.exp(costs / iters),\n             iters * m.batch_size / (time.time() - start_time)))\n\n  return np.exp(costs / iters)\n\n\ndef get_config():\n  if FLAGS.model == \"small\":\n    return SmallConfig()\n  elif FLAGS.model == \"medium\":\n    return MediumConfig()\n  elif FLAGS.model == \"large\":\n    return LargeConfig()\n  elif FLAGS.model == \"test\":\n    return TestConfig()\n  else:\n    raise ValueError(\"Invalid model: %s\", FLAGS.model)\n\n\ndef main(_):\n  if not FLAGS.data_path:\n    raise ValueError(\"Must set --data_path to PTB data directory\")\n\n  raw_data = reader.ptb_raw_data(FLAGS.data_path)\n  # train: 929589, valid: 73760, test: 82430\n  train_data, valid_data, test_data, _ = raw_data\n\n  config = get_config()\n  eval_config = get_config()\n  eval_config.batch_size = 1\n  eval_config.num_steps = 1\n\n  with tf.Graph().as_default(), tf.Session() as session:\n    initializer = tf.random_uniform_initializer(-config.init_scale,\n                                                config.init_scale)\n    with tf.variable_scope(\"model\", reuse=None, initializer=initializer):\n      m = PTBModel(is_training=True, config=config)\n    with tf.variable_scope(\"model\", reuse=True, initializer=initializer):\n      mvalid = PTBModel(is_training=False, config=config)\n      mtest = PTBModel(is_training=False, config=eval_config)\n\n    tf.initialize_all_variables().run()\n\n    for i in range(config.max_max_epoch):\n      lr_decay = config.lr_decay ** max(i - config.max_epoch, 0.0)\n      m.assign_lr(session, config.learning_rate * lr_decay)\n\n      print(\"Epoch: %d Learning rate: %.3f\" % (i + 1, session.run(m.lr)))\n      train_perplexity = run_epoch(session, m, train_data, m.train_op,\n                                   verbose=True)\n      print(\"Epoch: %d Train Perplexity: %.3f\" % (i + 1, train_perplexity))\n      valid_perplexity = run_epoch(session, mvalid, valid_data, tf.no_op())\n      print(\"Epoch: %d Valid Perplexity: %.3f\" % (i + 1, valid_perplexity))\n\n    test_perplexity = run_epoch(session, mtest, test_data, tf.no_op())\n    print(\"Test Perplexity: %.3f\" % test_perplexity)\n\n\nif __name__ == \"__main__\":\n  tf.app.run()\n\n\n</code></pre>", "body_text": "I found rnn.dynamic_rnn() that seems to do what I want, but when I modified the following lines\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/models/rnn/ptb/ptb_word_lm.py#L114-L116 into\nfrom tensorflow.models.rnn import rnn\noutputs, state = rnn.dynamic_rnn(cell, inputs, initial_state=self._initial_state)\noutput = tf.reshape(outputs, [-1, size])\n\nIt throws out error at the line containing tf.gradients(cost, tvars)\n  File \"/data/lisatmp3/yaoli/anaconda/lib/python2.7/site-packages/tensorflow/python/platform/default/_app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"ptb_word_lm.py\", line 304, in main\n    m = PTBModel(is_training=True, config=config)\n  File \"ptb_word_lm.py\", line 148, in __init__\n    grads, _ = tf.clip_by_global_norm(tf.gradients(cost, tvars),\n  File \"/data/lisatmp3/yaoli/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/gradients.py\", line 477, in gradients\n    in_grads = _AsList(grad_fn(op, *out_grads))\n  File \"/data/lisatmp3/yaoli/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/tensor_array_grad.py\", line 137, in _TensorArrayPackGrad\n    grad_source = _GetGradSource(grad)\n  File \"/data/lisatmp3/yaoli/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/tensor_array_grad.py\", line 62, in _GetGradSource\n    % op_or_tensor.name)\nValueError: Expected op/tensor name to start with gradients, got: model/gradients/model/RNN/transpose_grad/transpose:0\nUncaught exception. Entering post mortem debugging\nRunning 'cont' or 'step' will restart the program\n\nI couldn't find any examples in the repo of using dynamic_rnn(), and hope someone could point out where it went wrong. The complete file is attached below (adapted based on tensorflow/tensorflow/models/rnn/ptb/ptb_word_lm.py). LOOP_VERSION=0 and 1 run all right, 2 raises the issue.\n# Copyright 2015 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Example / benchmark for building a PTB LSTM model.\n\nTrains the model described in:\n(Zaremba, et. al.) Recurrent Neural Network Regularization\nhttp://arxiv.org/abs/1409.2329\n\nThere are 3 supported model configurations:\n===========================================\n| config | epochs | train | valid  | test\n===========================================\n| small  | 13     | 37.99 | 121.39 | 115.91\n| medium | 39     | 48.45 |  86.16 |  82.07\n| large  | 55     | 37.87 |  82.62 |  78.29\nThe exact results may vary depending on the random initialization.\n\nThe hyperparameters used in the model:\n- init_scale - the initial scale of the weights\n- learning_rate - the initial value of the learning rate\n- max_grad_norm - the maximum permissible norm of the gradient\n- num_layers - the number of LSTM layers\n- num_steps - the number of unrolled steps of LSTM\n- hidden_size - the number of LSTM units\n- max_epoch - the number of epochs trained with the initial learning rate\n- max_max_epoch - the total number of epochs for training\n- keep_prob - the probability of keeping weights in the dropout layer\n- lr_decay - the decay of the learning rate for each epoch after \"max_epoch\"\n- batch_size - the batch size\n\nThe data required for this example is in the data/ dir of the\nPTB dataset from Tomas Mikolov's webpage:\n\n$ wget http://www.fit.vutbr.cz/~imikolov/rnnlm/simple-examples.tgz\n$ tar xvf simple-examples.tgz\n\nTo run:\n\n$ python ptb_word_lm.py --data_path=simple-examples/data/\n\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport time\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom tensorflow.models.rnn.ptb import reader\n\nflags = tf.flags\nlogging = tf.logging\n\nflags.DEFINE_string(\n    \"model\", \"small\",\n    \"A type of model. Possible options are: small, medium, large.\")\nflags.DEFINE_string(\"data_path\", None, \"data_path\")\n\nFLAGS = flags.FLAGS\n\nLOOP_VERSION = 2\n\nclass PTBModel(object):\n  \"\"\"The PTB model.\"\"\"\n\n  def __init__(self, is_training, config):\n    self.batch_size = batch_size = config.batch_size\n    self.num_steps = num_steps = config.num_steps\n    size = config.hidden_size\n    vocab_size = config.vocab_size\n\n    self._input_data = tf.placeholder(tf.int32, [batch_size, num_steps])\n    self._targets = tf.placeholder(tf.int32, [batch_size, num_steps])\n\n    # Slightly better results can be obtained with forget gate biases\n    # initialized to 1 but the hyperparameters of the model would need to be\n    # different than reported in the paper.\n    lstm_cell = tf.nn.rnn_cell.BasicLSTMCell(size, forget_bias=0.0)\n    if is_training and config.keep_prob < 1:\n      lstm_cell = tf.nn.rnn_cell.DropoutWrapper(\n          lstm_cell, output_keep_prob=config.keep_prob)\n    cell = tf.nn.rnn_cell.MultiRNNCell([lstm_cell] * config.num_layers)\n    self._initial_state = cell.zero_state(batch_size, tf.float32)\n\n    with tf.device(\"/cpu:0\"):\n      embedding = tf.get_variable(\"embedding\", [vocab_size, size])\n      inputs = tf.nn.embedding_lookup(embedding, self._input_data) # (b, t, 200)\n\n    if is_training and config.keep_prob < 1:\n      inputs = tf.nn.dropout(inputs, config.keep_prob)\n\n    # Simplified version of tensorflow.models.rnn.rnn.py's rnn().\n    # This builds an unrolled LSTM for tutorial purposes only.\n    # In general, use the rnn() or state_saving_rnn() from rnn.py.\n    #\n    # The alternative version of the code below is:\n    if LOOP_VERSION == 0:\n      from tensorflow.models.rnn import rnn\n      inputs = [tf.squeeze(input_, [1])\n               for input_ in tf.split(1, num_steps, inputs)]\n      outputs, state = rnn.rnn(cell, inputs, initial_state=self._initial_state)\n      output = tf.reshape(tf.concat(1, outputs), [-1, size])\n    if LOOP_VERSION == 1:\n      outputs = []\n      state = self._initial_state\n      with tf.variable_scope(\"RNN\"):\n        for time_step in range(num_steps):\n          if time_step > 0: tf.get_variable_scope().reuse_variables()\n          (cell_output, state) = cell(inputs[:, time_step, :], state)\n          outputs.append(cell_output)\n      output = tf.reshape(tf.concat(1, outputs), [-1, size])\n    if LOOP_VERSION == 2:\n      from tensorflow.models.rnn import rnn\n      # inputs: (b,t,d)\n      outputs, state = rnn.dynamic_rnn(cell, inputs, initial_state=self._initial_state)\n      output = tf.reshape(outputs, [-1, size])\n\n    softmax_w = tf.get_variable(\"softmax_w\", [size, vocab_size])\n    softmax_b = tf.get_variable(\"softmax_b\", [vocab_size])\n    logits = tf.matmul(output, softmax_w) + softmax_b\n    loss = tf.nn.seq2seq.sequence_loss_by_example(\n        [logits],\n        [tf.reshape(self._targets, [-1])],\n        [tf.ones([batch_size * num_steps])])\n    self._cost = cost = tf.reduce_sum(loss) / batch_size\n    self._final_state = state\n\n    if not is_training:\n      return\n\n    self._lr = tf.Variable(0.0, trainable=False)\n    tvars = tf.trainable_variables()\n    grads, _ = tf.clip_by_global_norm(tf.gradients(cost, tvars),\n                                      config.max_grad_norm)\n\n    optimizer = tf.train.GradientDescentOptimizer(self.lr)\n    self._train_op = optimizer.apply_gradients(zip(grads, tvars))\n\n  def assign_lr(self, session, lr_value):\n    session.run(tf.assign(self.lr, lr_value))\n\n  @property\n  def input_data(self):\n    return self._input_data\n\n  @property\n  def targets(self):\n    return self._targets\n\n  @property\n  def initial_state(self):\n    return self._initial_state\n\n  @property\n  def cost(self):\n    return self._cost\n\n  @property\n  def final_state(self):\n    return self._final_state\n\n  @property\n  def lr(self):\n    return self._lr\n\n  @property\n  def train_op(self):\n    return self._train_op\n\n\nclass SmallConfig(object):\n  \"\"\"Small config.\"\"\"\n  init_scale = 0.1\n  learning_rate = 1.0\n  max_grad_norm = 5\n  num_layers = 2\n  num_steps = 20\n  hidden_size = 200\n  max_epoch = 4\n  max_max_epoch = 13\n  keep_prob = 1.0\n  lr_decay = 0.5\n  batch_size = 20\n  vocab_size = 10000\n\n\nclass MediumConfig(object):\n  \"\"\"Medium config.\"\"\"\n  init_scale = 0.05\n  learning_rate = 1.0\n  max_grad_norm = 5\n  num_layers = 2\n  num_steps = 35\n  hidden_size = 650\n  max_epoch = 6\n  max_max_epoch = 39\n  keep_prob = 0.5\n  lr_decay = 0.8\n  batch_size = 20\n  vocab_size = 10000\n\n\nclass LargeConfig(object):\n  \"\"\"Large config.\"\"\"\n  init_scale = 0.04\n  learning_rate = 1.0\n  max_grad_norm = 10\n  num_layers = 2\n  num_steps = 35\n  hidden_size = 1500\n  max_epoch = 14\n  max_max_epoch = 55\n  keep_prob = 0.35\n  lr_decay = 1 / 1.15\n  batch_size = 20\n  vocab_size = 10000\n\n\nclass TestConfig(object):\n  \"\"\"Tiny config, for testing.\"\"\"\n  init_scale = 0.1\n  learning_rate = 1.0\n  max_grad_norm = 1\n  num_layers = 1\n  num_steps = 2\n  hidden_size = 2\n  max_epoch = 1\n  max_max_epoch = 1\n  keep_prob = 1.0\n  lr_decay = 0.5\n  batch_size = 20\n  vocab_size = 10000\n\n\ndef run_epoch(session, m, data, eval_op, verbose=False):\n  \"\"\"Runs the model on the given data.\"\"\"\n  epoch_size = ((len(data) // m.batch_size) - 1) // m.num_steps\n  start_time = time.time()\n  costs = 0.0\n  iters = 0\n  state = m.initial_state.eval()\n  for step, (x, y) in enumerate(reader.ptb_iterator(data, m.batch_size,\n                                                    m.num_steps)):\n    cost, state, _ = session.run([m.cost, m.final_state, eval_op],\n                                 {m.input_data: x,\n                                  m.targets: y,\n                                  m.initial_state: state})\n    costs += cost\n    iters += m.num_steps\n\n    if verbose and step % (epoch_size // 10) == 10:\n      print(\"%.3f perplexity: %.3f speed: %.0f wps\" %\n            (step * 1.0 / epoch_size, np.exp(costs / iters),\n             iters * m.batch_size / (time.time() - start_time)))\n\n  return np.exp(costs / iters)\n\n\ndef get_config():\n  if FLAGS.model == \"small\":\n    return SmallConfig()\n  elif FLAGS.model == \"medium\":\n    return MediumConfig()\n  elif FLAGS.model == \"large\":\n    return LargeConfig()\n  elif FLAGS.model == \"test\":\n    return TestConfig()\n  else:\n    raise ValueError(\"Invalid model: %s\", FLAGS.model)\n\n\ndef main(_):\n  if not FLAGS.data_path:\n    raise ValueError(\"Must set --data_path to PTB data directory\")\n\n  raw_data = reader.ptb_raw_data(FLAGS.data_path)\n  # train: 929589, valid: 73760, test: 82430\n  train_data, valid_data, test_data, _ = raw_data\n\n  config = get_config()\n  eval_config = get_config()\n  eval_config.batch_size = 1\n  eval_config.num_steps = 1\n\n  with tf.Graph().as_default(), tf.Session() as session:\n    initializer = tf.random_uniform_initializer(-config.init_scale,\n                                                config.init_scale)\n    with tf.variable_scope(\"model\", reuse=None, initializer=initializer):\n      m = PTBModel(is_training=True, config=config)\n    with tf.variable_scope(\"model\", reuse=True, initializer=initializer):\n      mvalid = PTBModel(is_training=False, config=config)\n      mtest = PTBModel(is_training=False, config=eval_config)\n\n    tf.initialize_all_variables().run()\n\n    for i in range(config.max_max_epoch):\n      lr_decay = config.lr_decay ** max(i - config.max_epoch, 0.0)\n      m.assign_lr(session, config.learning_rate * lr_decay)\n\n      print(\"Epoch: %d Learning rate: %.3f\" % (i + 1, session.run(m.lr)))\n      train_perplexity = run_epoch(session, m, train_data, m.train_op,\n                                   verbose=True)\n      print(\"Epoch: %d Train Perplexity: %.3f\" % (i + 1, train_perplexity))\n      valid_perplexity = run_epoch(session, mvalid, valid_data, tf.no_op())\n      print(\"Epoch: %d Valid Perplexity: %.3f\" % (i + 1, valid_perplexity))\n\n    test_perplexity = run_epoch(session, mtest, test_data, tf.no_op())\n    print(\"Test Perplexity: %.3f\" % test_perplexity)\n\n\nif __name__ == \"__main__\":\n  tf.app.run()", "body": "I found rnn.dynamic_rnn() that seems to do what I want, but when I modified the following lines \nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/models/rnn/ptb/ptb_word_lm.py#L114-L116 into \n\n```\nfrom tensorflow.models.rnn import rnn\noutputs, state = rnn.dynamic_rnn(cell, inputs, initial_state=self._initial_state)\noutput = tf.reshape(outputs, [-1, size])\n```\n\nIt throws out error at the line containing `tf.gradients(cost, tvars)`\n\n```\n  File \"/data/lisatmp3/yaoli/anaconda/lib/python2.7/site-packages/tensorflow/python/platform/default/_app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"ptb_word_lm.py\", line 304, in main\n    m = PTBModel(is_training=True, config=config)\n  File \"ptb_word_lm.py\", line 148, in __init__\n    grads, _ = tf.clip_by_global_norm(tf.gradients(cost, tvars),\n  File \"/data/lisatmp3/yaoli/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/gradients.py\", line 477, in gradients\n    in_grads = _AsList(grad_fn(op, *out_grads))\n  File \"/data/lisatmp3/yaoli/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/tensor_array_grad.py\", line 137, in _TensorArrayPackGrad\n    grad_source = _GetGradSource(grad)\n  File \"/data/lisatmp3/yaoli/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/tensor_array_grad.py\", line 62, in _GetGradSource\n    % op_or_tensor.name)\nValueError: Expected op/tensor name to start with gradients, got: model/gradients/model/RNN/transpose_grad/transpose:0\nUncaught exception. Entering post mortem debugging\nRunning 'cont' or 'step' will restart the program\n```\n\nI couldn't find any examples in the repo of using dynamic_rnn(), and hope someone could point out where it went wrong. The complete file is attached below (adapted based on `tensorflow/tensorflow/models/rnn/ptb/ptb_word_lm.py`). LOOP_VERSION=0 and 1 run all right, 2 raises the issue.  \n\n```\n# Copyright 2015 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Example / benchmark for building a PTB LSTM model.\n\nTrains the model described in:\n(Zaremba, et. al.) Recurrent Neural Network Regularization\nhttp://arxiv.org/abs/1409.2329\n\nThere are 3 supported model configurations:\n===========================================\n| config | epochs | train | valid  | test\n===========================================\n| small  | 13     | 37.99 | 121.39 | 115.91\n| medium | 39     | 48.45 |  86.16 |  82.07\n| large  | 55     | 37.87 |  82.62 |  78.29\nThe exact results may vary depending on the random initialization.\n\nThe hyperparameters used in the model:\n- init_scale - the initial scale of the weights\n- learning_rate - the initial value of the learning rate\n- max_grad_norm - the maximum permissible norm of the gradient\n- num_layers - the number of LSTM layers\n- num_steps - the number of unrolled steps of LSTM\n- hidden_size - the number of LSTM units\n- max_epoch - the number of epochs trained with the initial learning rate\n- max_max_epoch - the total number of epochs for training\n- keep_prob - the probability of keeping weights in the dropout layer\n- lr_decay - the decay of the learning rate for each epoch after \"max_epoch\"\n- batch_size - the batch size\n\nThe data required for this example is in the data/ dir of the\nPTB dataset from Tomas Mikolov's webpage:\n\n$ wget http://www.fit.vutbr.cz/~imikolov/rnnlm/simple-examples.tgz\n$ tar xvf simple-examples.tgz\n\nTo run:\n\n$ python ptb_word_lm.py --data_path=simple-examples/data/\n\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport time\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom tensorflow.models.rnn.ptb import reader\n\nflags = tf.flags\nlogging = tf.logging\n\nflags.DEFINE_string(\n    \"model\", \"small\",\n    \"A type of model. Possible options are: small, medium, large.\")\nflags.DEFINE_string(\"data_path\", None, \"data_path\")\n\nFLAGS = flags.FLAGS\n\nLOOP_VERSION = 2\n\nclass PTBModel(object):\n  \"\"\"The PTB model.\"\"\"\n\n  def __init__(self, is_training, config):\n    self.batch_size = batch_size = config.batch_size\n    self.num_steps = num_steps = config.num_steps\n    size = config.hidden_size\n    vocab_size = config.vocab_size\n\n    self._input_data = tf.placeholder(tf.int32, [batch_size, num_steps])\n    self._targets = tf.placeholder(tf.int32, [batch_size, num_steps])\n\n    # Slightly better results can be obtained with forget gate biases\n    # initialized to 1 but the hyperparameters of the model would need to be\n    # different than reported in the paper.\n    lstm_cell = tf.nn.rnn_cell.BasicLSTMCell(size, forget_bias=0.0)\n    if is_training and config.keep_prob < 1:\n      lstm_cell = tf.nn.rnn_cell.DropoutWrapper(\n          lstm_cell, output_keep_prob=config.keep_prob)\n    cell = tf.nn.rnn_cell.MultiRNNCell([lstm_cell] * config.num_layers)\n    self._initial_state = cell.zero_state(batch_size, tf.float32)\n\n    with tf.device(\"/cpu:0\"):\n      embedding = tf.get_variable(\"embedding\", [vocab_size, size])\n      inputs = tf.nn.embedding_lookup(embedding, self._input_data) # (b, t, 200)\n\n    if is_training and config.keep_prob < 1:\n      inputs = tf.nn.dropout(inputs, config.keep_prob)\n\n    # Simplified version of tensorflow.models.rnn.rnn.py's rnn().\n    # This builds an unrolled LSTM for tutorial purposes only.\n    # In general, use the rnn() or state_saving_rnn() from rnn.py.\n    #\n    # The alternative version of the code below is:\n    if LOOP_VERSION == 0:\n      from tensorflow.models.rnn import rnn\n      inputs = [tf.squeeze(input_, [1])\n               for input_ in tf.split(1, num_steps, inputs)]\n      outputs, state = rnn.rnn(cell, inputs, initial_state=self._initial_state)\n      output = tf.reshape(tf.concat(1, outputs), [-1, size])\n    if LOOP_VERSION == 1:\n      outputs = []\n      state = self._initial_state\n      with tf.variable_scope(\"RNN\"):\n        for time_step in range(num_steps):\n          if time_step > 0: tf.get_variable_scope().reuse_variables()\n          (cell_output, state) = cell(inputs[:, time_step, :], state)\n          outputs.append(cell_output)\n      output = tf.reshape(tf.concat(1, outputs), [-1, size])\n    if LOOP_VERSION == 2:\n      from tensorflow.models.rnn import rnn\n      # inputs: (b,t,d)\n      outputs, state = rnn.dynamic_rnn(cell, inputs, initial_state=self._initial_state)\n      output = tf.reshape(outputs, [-1, size])\n\n    softmax_w = tf.get_variable(\"softmax_w\", [size, vocab_size])\n    softmax_b = tf.get_variable(\"softmax_b\", [vocab_size])\n    logits = tf.matmul(output, softmax_w) + softmax_b\n    loss = tf.nn.seq2seq.sequence_loss_by_example(\n        [logits],\n        [tf.reshape(self._targets, [-1])],\n        [tf.ones([batch_size * num_steps])])\n    self._cost = cost = tf.reduce_sum(loss) / batch_size\n    self._final_state = state\n\n    if not is_training:\n      return\n\n    self._lr = tf.Variable(0.0, trainable=False)\n    tvars = tf.trainable_variables()\n    grads, _ = tf.clip_by_global_norm(tf.gradients(cost, tvars),\n                                      config.max_grad_norm)\n\n    optimizer = tf.train.GradientDescentOptimizer(self.lr)\n    self._train_op = optimizer.apply_gradients(zip(grads, tvars))\n\n  def assign_lr(self, session, lr_value):\n    session.run(tf.assign(self.lr, lr_value))\n\n  @property\n  def input_data(self):\n    return self._input_data\n\n  @property\n  def targets(self):\n    return self._targets\n\n  @property\n  def initial_state(self):\n    return self._initial_state\n\n  @property\n  def cost(self):\n    return self._cost\n\n  @property\n  def final_state(self):\n    return self._final_state\n\n  @property\n  def lr(self):\n    return self._lr\n\n  @property\n  def train_op(self):\n    return self._train_op\n\n\nclass SmallConfig(object):\n  \"\"\"Small config.\"\"\"\n  init_scale = 0.1\n  learning_rate = 1.0\n  max_grad_norm = 5\n  num_layers = 2\n  num_steps = 20\n  hidden_size = 200\n  max_epoch = 4\n  max_max_epoch = 13\n  keep_prob = 1.0\n  lr_decay = 0.5\n  batch_size = 20\n  vocab_size = 10000\n\n\nclass MediumConfig(object):\n  \"\"\"Medium config.\"\"\"\n  init_scale = 0.05\n  learning_rate = 1.0\n  max_grad_norm = 5\n  num_layers = 2\n  num_steps = 35\n  hidden_size = 650\n  max_epoch = 6\n  max_max_epoch = 39\n  keep_prob = 0.5\n  lr_decay = 0.8\n  batch_size = 20\n  vocab_size = 10000\n\n\nclass LargeConfig(object):\n  \"\"\"Large config.\"\"\"\n  init_scale = 0.04\n  learning_rate = 1.0\n  max_grad_norm = 10\n  num_layers = 2\n  num_steps = 35\n  hidden_size = 1500\n  max_epoch = 14\n  max_max_epoch = 55\n  keep_prob = 0.35\n  lr_decay = 1 / 1.15\n  batch_size = 20\n  vocab_size = 10000\n\n\nclass TestConfig(object):\n  \"\"\"Tiny config, for testing.\"\"\"\n  init_scale = 0.1\n  learning_rate = 1.0\n  max_grad_norm = 1\n  num_layers = 1\n  num_steps = 2\n  hidden_size = 2\n  max_epoch = 1\n  max_max_epoch = 1\n  keep_prob = 1.0\n  lr_decay = 0.5\n  batch_size = 20\n  vocab_size = 10000\n\n\ndef run_epoch(session, m, data, eval_op, verbose=False):\n  \"\"\"Runs the model on the given data.\"\"\"\n  epoch_size = ((len(data) // m.batch_size) - 1) // m.num_steps\n  start_time = time.time()\n  costs = 0.0\n  iters = 0\n  state = m.initial_state.eval()\n  for step, (x, y) in enumerate(reader.ptb_iterator(data, m.batch_size,\n                                                    m.num_steps)):\n    cost, state, _ = session.run([m.cost, m.final_state, eval_op],\n                                 {m.input_data: x,\n                                  m.targets: y,\n                                  m.initial_state: state})\n    costs += cost\n    iters += m.num_steps\n\n    if verbose and step % (epoch_size // 10) == 10:\n      print(\"%.3f perplexity: %.3f speed: %.0f wps\" %\n            (step * 1.0 / epoch_size, np.exp(costs / iters),\n             iters * m.batch_size / (time.time() - start_time)))\n\n  return np.exp(costs / iters)\n\n\ndef get_config():\n  if FLAGS.model == \"small\":\n    return SmallConfig()\n  elif FLAGS.model == \"medium\":\n    return MediumConfig()\n  elif FLAGS.model == \"large\":\n    return LargeConfig()\n  elif FLAGS.model == \"test\":\n    return TestConfig()\n  else:\n    raise ValueError(\"Invalid model: %s\", FLAGS.model)\n\n\ndef main(_):\n  if not FLAGS.data_path:\n    raise ValueError(\"Must set --data_path to PTB data directory\")\n\n  raw_data = reader.ptb_raw_data(FLAGS.data_path)\n  # train: 929589, valid: 73760, test: 82430\n  train_data, valid_data, test_data, _ = raw_data\n\n  config = get_config()\n  eval_config = get_config()\n  eval_config.batch_size = 1\n  eval_config.num_steps = 1\n\n  with tf.Graph().as_default(), tf.Session() as session:\n    initializer = tf.random_uniform_initializer(-config.init_scale,\n                                                config.init_scale)\n    with tf.variable_scope(\"model\", reuse=None, initializer=initializer):\n      m = PTBModel(is_training=True, config=config)\n    with tf.variable_scope(\"model\", reuse=True, initializer=initializer):\n      mvalid = PTBModel(is_training=False, config=config)\n      mtest = PTBModel(is_training=False, config=eval_config)\n\n    tf.initialize_all_variables().run()\n\n    for i in range(config.max_max_epoch):\n      lr_decay = config.lr_decay ** max(i - config.max_epoch, 0.0)\n      m.assign_lr(session, config.learning_rate * lr_decay)\n\n      print(\"Epoch: %d Learning rate: %.3f\" % (i + 1, session.run(m.lr)))\n      train_perplexity = run_epoch(session, m, train_data, m.train_op,\n                                   verbose=True)\n      print(\"Epoch: %d Train Perplexity: %.3f\" % (i + 1, train_perplexity))\n      valid_perplexity = run_epoch(session, mvalid, valid_data, tf.no_op())\n      print(\"Epoch: %d Valid Perplexity: %.3f\" % (i + 1, valid_perplexity))\n\n    test_perplexity = run_epoch(session, mtest, test_data, tf.no_op())\n    print(\"Test Perplexity: %.3f\" % test_perplexity)\n\n\nif __name__ == \"__main__\":\n  tf.app.run()\n\n\n```\n"}