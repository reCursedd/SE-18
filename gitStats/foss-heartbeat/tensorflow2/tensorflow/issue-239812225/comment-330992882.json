{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/330992882", "html_url": "https://github.com/tensorflow/tensorflow/issues/11178#issuecomment-330992882", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11178", "id": 330992882, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDk5Mjg4Mg==", "user": {"login": "George-Zhu", "id": 6129796, "node_id": "MDQ6VXNlcjYxMjk3OTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/6129796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/George-Zhu", "html_url": "https://github.com/George-Zhu", "followers_url": "https://api.github.com/users/George-Zhu/followers", "following_url": "https://api.github.com/users/George-Zhu/following{/other_user}", "gists_url": "https://api.github.com/users/George-Zhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/George-Zhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/George-Zhu/subscriptions", "organizations_url": "https://api.github.com/users/George-Zhu/orgs", "repos_url": "https://api.github.com/users/George-Zhu/repos", "events_url": "https://api.github.com/users/George-Zhu/events{/privacy}", "received_events_url": "https://api.github.com/users/George-Zhu/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-20T21:58:15Z", "updated_at": "2017-09-20T22:11:20Z", "author_association": "NONE", "body_html": "<p>I also found that the input arguments order of keras.backend.categorical_crossentropy() and keras.backend.tensorflow_backend.categorical_crossentropy() are not consistent with keras.losses.categorical_crossentropy(). I found this when I try to use the loss function from keras to check the numpy implementation of cross entropy loss function:</p>\n<pre><code>import numpy as np\nimport keras\nimport keras.backend as K\n\nnp.random.seed(666)\ndef categorical_crossentropy_np(y_true, y_pred):\n    _EPSILON = K.epsilon()\n    y_pred = y_pred / np.expand_dims(np.sum(y_pred, axis=-1), axis=-1)\n    y_pred = np.clip(y_pred, _EPSILON, 1.0-_EPSILON)\n    return -np.sum(y_true * np.log(y_pred), axis=-1)\n\ndef check_loss():\n    shape = (6, 8)\n\n    y_a = np.random.random(shape).astype(np.float32)\n    y_b = np.random.random(shape).astype(np.float32)\n\n    # case 1\n    out1 = K.eval(K.categorical_crossentropy(K.variable(y_a), K.variable(y_b)))\n    # case 2\n    # out1 = K.eval(K.categorical_crossentropy(K.variable(y_b), K.variable(y_a))) \n    # case 3\n    # out1 = K.eval(keras.backend.tensorflow_backend.categorical_crossentropy(K.variable(y_a), K.variable(y_b))) \n    # case 4\n    # out1 = K.eval(keras.backend.tensorflow_backend.categorical_crossentropy(K.variable(y_b), K.variable(y_a))) \n    # case 5\n    # out1 = K.eval(keras.losses.categorical_crossentropy(K.variable(y_a), K.variable(y_b))) \n    # case 6\n    out2 = categorical_crossentropy_np(y_a, y_b)\n\n    assert out1.shape == out2.shape\n    assert out1.shape == shape[:-1]\n\n    print out1\n    print out2\n\nif __name__ == '__main__':\n    check_loss()\n\n</code></pre>\n<p>The results are:<br>\n(case 2 = case 4 = case 5 = case 6) \u2260 (case 1 = case 3)</p>", "body_text": "I also found that the input arguments order of keras.backend.categorical_crossentropy() and keras.backend.tensorflow_backend.categorical_crossentropy() are not consistent with keras.losses.categorical_crossentropy(). I found this when I try to use the loss function from keras to check the numpy implementation of cross entropy loss function:\nimport numpy as np\nimport keras\nimport keras.backend as K\n\nnp.random.seed(666)\ndef categorical_crossentropy_np(y_true, y_pred):\n    _EPSILON = K.epsilon()\n    y_pred = y_pred / np.expand_dims(np.sum(y_pred, axis=-1), axis=-1)\n    y_pred = np.clip(y_pred, _EPSILON, 1.0-_EPSILON)\n    return -np.sum(y_true * np.log(y_pred), axis=-1)\n\ndef check_loss():\n    shape = (6, 8)\n\n    y_a = np.random.random(shape).astype(np.float32)\n    y_b = np.random.random(shape).astype(np.float32)\n\n    # case 1\n    out1 = K.eval(K.categorical_crossentropy(K.variable(y_a), K.variable(y_b)))\n    # case 2\n    # out1 = K.eval(K.categorical_crossentropy(K.variable(y_b), K.variable(y_a))) \n    # case 3\n    # out1 = K.eval(keras.backend.tensorflow_backend.categorical_crossentropy(K.variable(y_a), K.variable(y_b))) \n    # case 4\n    # out1 = K.eval(keras.backend.tensorflow_backend.categorical_crossentropy(K.variable(y_b), K.variable(y_a))) \n    # case 5\n    # out1 = K.eval(keras.losses.categorical_crossentropy(K.variable(y_a), K.variable(y_b))) \n    # case 6\n    out2 = categorical_crossentropy_np(y_a, y_b)\n\n    assert out1.shape == out2.shape\n    assert out1.shape == shape[:-1]\n\n    print out1\n    print out2\n\nif __name__ == '__main__':\n    check_loss()\n\n\nThe results are:\n(case 2 = case 4 = case 5 = case 6) \u2260 (case 1 = case 3)", "body": "I also found that the input arguments order of keras.backend.categorical_crossentropy() and keras.backend.tensorflow_backend.categorical_crossentropy() are not consistent with keras.losses.categorical_crossentropy(). I found this when I try to use the loss function from keras to check the numpy implementation of cross entropy loss function:\r\n```\r\nimport numpy as np\r\nimport keras\r\nimport keras.backend as K\r\n\r\nnp.random.seed(666)\r\ndef categorical_crossentropy_np(y_true, y_pred):\r\n    _EPSILON = K.epsilon()\r\n    y_pred = y_pred / np.expand_dims(np.sum(y_pred, axis=-1), axis=-1)\r\n    y_pred = np.clip(y_pred, _EPSILON, 1.0-_EPSILON)\r\n    return -np.sum(y_true * np.log(y_pred), axis=-1)\r\n\r\ndef check_loss():\r\n    shape = (6, 8)\r\n\r\n    y_a = np.random.random(shape).astype(np.float32)\r\n    y_b = np.random.random(shape).astype(np.float32)\r\n\r\n    # case 1\r\n    out1 = K.eval(K.categorical_crossentropy(K.variable(y_a), K.variable(y_b)))\r\n    # case 2\r\n    # out1 = K.eval(K.categorical_crossentropy(K.variable(y_b), K.variable(y_a))) \r\n    # case 3\r\n    # out1 = K.eval(keras.backend.tensorflow_backend.categorical_crossentropy(K.variable(y_a), K.variable(y_b))) \r\n    # case 4\r\n    # out1 = K.eval(keras.backend.tensorflow_backend.categorical_crossentropy(K.variable(y_b), K.variable(y_a))) \r\n    # case 5\r\n    # out1 = K.eval(keras.losses.categorical_crossentropy(K.variable(y_a), K.variable(y_b))) \r\n    # case 6\r\n    out2 = categorical_crossentropy_np(y_a, y_b)\r\n\r\n    assert out1.shape == out2.shape\r\n    assert out1.shape == shape[:-1]\r\n\r\n    print out1\r\n    print out2\r\n\r\nif __name__ == '__main__':\r\n    check_loss()\r\n\r\n```\r\nThe results are:\r\n(case 2 = case 4 = case 5 = case 6) \u2260 (case 1 = case 3)\r\n\r\n\r\n\r\n"}