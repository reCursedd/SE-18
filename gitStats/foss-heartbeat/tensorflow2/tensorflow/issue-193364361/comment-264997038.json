{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/264997038", "html_url": "https://github.com/tensorflow/tensorflow/issues/6067#issuecomment-264997038", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6067", "id": 264997038, "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDk5NzAzOA==", "user": {"login": "hnsl", "id": 948471, "node_id": "MDQ6VXNlcjk0ODQ3MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/948471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hnsl", "html_url": "https://github.com/hnsl", "followers_url": "https://api.github.com/users/hnsl/followers", "following_url": "https://api.github.com/users/hnsl/following{/other_user}", "gists_url": "https://api.github.com/users/hnsl/gists{/gist_id}", "starred_url": "https://api.github.com/users/hnsl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hnsl/subscriptions", "organizations_url": "https://api.github.com/users/hnsl/orgs", "repos_url": "https://api.github.com/users/hnsl/repos", "events_url": "https://api.github.com/users/hnsl/events{/privacy}", "received_events_url": "https://api.github.com/users/hnsl/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-05T22:22:42Z", "updated_at": "2016-12-05T22:22:42Z", "author_association": "NONE", "body_html": "<p>I've already been introduced to TF so I would say that I'm aware of the absolute basics and the things you mention here. You can consider this a bug report of the fit() documentation, rather than a problem I am specifically having. I'm already using fit() today, but mostly through trial and error. I've read most of the TF documentation without finding many examples or explanations that answers my questions, that could improve my use of fit().</p>\n<p>I don't think fit() is on a \"consistent level of detail with the documentation throughout\", unless you  measure consistency in something trivial like \"same amount of characters\". Even in that case I think it should not just be that, it should be great in general.</p>\n<p>In my opinion any API should carefully document:</p>\n<ul>\n<li>Guarantees</li>\n<li>Constraints</li>\n<li>Intended use</li>\n<li>Important design motivations and historical changes</li>\n</ul>\n<p>Considering how important fit() actually is for users to easily implement ML, I can see that it easily need twice as much detail. I think most people would currently need plenty of context to just understand some of the phrases used in the documentation.</p>\n<p>Here's some examples:</p>\n<pre><code>  x: Matrix of shape [n_samples, n_features...] or the dictionary of Matrices.\n     Can be iterator that returns arrays of features or dictionary of arrays of features.\n     The training input samples for fitting the model. If set, `input_fn` must be `None`.\n</code></pre>\n<p>What's n_samples and n_features? Why the ... and how is it obvious how that sequence would continue? What's \"the dictionary of Matrices\"? Where is that term defined? Why \"arrays of features\" and not just \"an array of features\"? Do you mean \"iterator over arrays of features\"? Can the iterator also return a dictionary or do you mean that x can also be a dictionary? Why is that in the same sentence? What is the key in the mentioned dictionaries, how are they indexed? When it says \"The training input samples for fitting the model.\" what exactly is an \"input sample\" and what is it not? Is it a feature or a label? What actual datatypes/values is acceptable for an input matrix contains?</p>\n<p>Throughout the documentation there is also no specified reason why both \"x\" and \"input_fn\" exists. Is x just a historical artifact? Should you always use an input_fn? What is the purpose of \"x\" if you can have an \"input_fn\"?</p>\n<p>That's just the first argument, I could continue, but I think this makes my point clear. Note that I can probably make an educated guess and be right for some of these questions. But I think the documentation should be better than that. I think the documentation should be clear enough that usage doesn't require guesswork or dissecting examples.</p>\n<p>I could accept the argument that the documentation is so general and context-full because the trainable class itself is so general that it's hard to be specific. But in this case classes like DNNRegressor need to have their own documentation on their fit() implementation and not just refer to the trainable documentation.</p>\n<p>That said, I could have missed some topic that describe fit() better. I might also have unrealistic expectations. I apologize if that is the case.</p>", "body_text": "I've already been introduced to TF so I would say that I'm aware of the absolute basics and the things you mention here. You can consider this a bug report of the fit() documentation, rather than a problem I am specifically having. I'm already using fit() today, but mostly through trial and error. I've read most of the TF documentation without finding many examples or explanations that answers my questions, that could improve my use of fit().\nI don't think fit() is on a \"consistent level of detail with the documentation throughout\", unless you  measure consistency in something trivial like \"same amount of characters\". Even in that case I think it should not just be that, it should be great in general.\nIn my opinion any API should carefully document:\n\nGuarantees\nConstraints\nIntended use\nImportant design motivations and historical changes\n\nConsidering how important fit() actually is for users to easily implement ML, I can see that it easily need twice as much detail. I think most people would currently need plenty of context to just understand some of the phrases used in the documentation.\nHere's some examples:\n  x: Matrix of shape [n_samples, n_features...] or the dictionary of Matrices.\n     Can be iterator that returns arrays of features or dictionary of arrays of features.\n     The training input samples for fitting the model. If set, `input_fn` must be `None`.\n\nWhat's n_samples and n_features? Why the ... and how is it obvious how that sequence would continue? What's \"the dictionary of Matrices\"? Where is that term defined? Why \"arrays of features\" and not just \"an array of features\"? Do you mean \"iterator over arrays of features\"? Can the iterator also return a dictionary or do you mean that x can also be a dictionary? Why is that in the same sentence? What is the key in the mentioned dictionaries, how are they indexed? When it says \"The training input samples for fitting the model.\" what exactly is an \"input sample\" and what is it not? Is it a feature or a label? What actual datatypes/values is acceptable for an input matrix contains?\nThroughout the documentation there is also no specified reason why both \"x\" and \"input_fn\" exists. Is x just a historical artifact? Should you always use an input_fn? What is the purpose of \"x\" if you can have an \"input_fn\"?\nThat's just the first argument, I could continue, but I think this makes my point clear. Note that I can probably make an educated guess and be right for some of these questions. But I think the documentation should be better than that. I think the documentation should be clear enough that usage doesn't require guesswork or dissecting examples.\nI could accept the argument that the documentation is so general and context-full because the trainable class itself is so general that it's hard to be specific. But in this case classes like DNNRegressor need to have their own documentation on their fit() implementation and not just refer to the trainable documentation.\nThat said, I could have missed some topic that describe fit() better. I might also have unrealistic expectations. I apologize if that is the case.", "body": "I've already been introduced to TF so I would say that I'm aware of the absolute basics and the things you mention here. You can consider this a bug report of the fit() documentation, rather than a problem I am specifically having. I'm already using fit() today, but mostly through trial and error. I've read most of the TF documentation without finding many examples or explanations that answers my questions, that could improve my use of fit().\r\n\r\nI don't think fit() is on a \"consistent level of detail with the documentation throughout\", unless you  measure consistency in something trivial like \"same amount of characters\". Even in that case I think it should not just be that, it should be great in general.\r\n\r\nIn my opinion any API should carefully document:\r\n- Guarantees\r\n- Constraints\r\n- Intended use\r\n- Important design motivations and historical changes\r\n\r\nConsidering how important fit() actually is for users to easily implement ML, I can see that it easily need twice as much detail. I think most people would currently need plenty of context to just understand some of the phrases used in the documentation.\r\n\r\nHere's some examples:\r\n\r\n      x: Matrix of shape [n_samples, n_features...] or the dictionary of Matrices.\r\n         Can be iterator that returns arrays of features or dictionary of arrays of features.\r\n         The training input samples for fitting the model. If set, `input_fn` must be `None`.\r\n\r\nWhat's n_samples and n_features? Why the ... and how is it obvious how that sequence would continue? What's \"the dictionary of Matrices\"? Where is that term defined? Why \"arrays of features\" and not just \"an array of features\"? Do you mean \"iterator over arrays of features\"? Can the iterator also return a dictionary or do you mean that x can also be a dictionary? Why is that in the same sentence? What is the key in the mentioned dictionaries, how are they indexed? When it says \"The training input samples for fitting the model.\" what exactly is an \"input sample\" and what is it not? Is it a feature or a label? What actual datatypes/values is acceptable for an input matrix contains?\r\n\r\nThroughout the documentation there is also no specified reason why both \"x\" and \"input_fn\" exists. Is x just a historical artifact? Should you always use an input_fn? What is the purpose of \"x\" if you can have an \"input_fn\"?\r\n\r\nThat's just the first argument, I could continue, but I think this makes my point clear. Note that I can probably make an educated guess and be right for some of these questions. But I think the documentation should be better than that. I think the documentation should be clear enough that usage doesn't require guesswork or dissecting examples.\r\n\r\nI could accept the argument that the documentation is so general and context-full because the trainable class itself is so general that it's hard to be specific. But in this case classes like DNNRegressor need to have their own documentation on their fit() implementation and not just refer to the trainable documentation.\r\n\r\nThat said, I could have missed some topic that describe fit() better. I might also have unrealistic expectations. I apologize if that is the case."}