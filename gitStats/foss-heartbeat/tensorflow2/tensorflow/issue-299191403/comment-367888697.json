{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/367888697", "html_url": "https://github.com/tensorflow/tensorflow/issues/17183#issuecomment-367888697", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17183", "id": 367888697, "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzg4ODY5Nw==", "user": {"login": "selcouthlyBlue", "id": 13268675, "node_id": "MDQ6VXNlcjEzMjY4Njc1", "avatar_url": "https://avatars2.githubusercontent.com/u/13268675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/selcouthlyBlue", "html_url": "https://github.com/selcouthlyBlue", "followers_url": "https://api.github.com/users/selcouthlyBlue/followers", "following_url": "https://api.github.com/users/selcouthlyBlue/following{/other_user}", "gists_url": "https://api.github.com/users/selcouthlyBlue/gists{/gist_id}", "starred_url": "https://api.github.com/users/selcouthlyBlue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/selcouthlyBlue/subscriptions", "organizations_url": "https://api.github.com/users/selcouthlyBlue/orgs", "repos_url": "https://api.github.com/users/selcouthlyBlue/repos", "events_url": "https://api.github.com/users/selcouthlyBlue/events{/privacy}", "received_events_url": "https://api.github.com/users/selcouthlyBlue/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-23T02:15:58Z", "updated_at": "2018-02-23T02:20:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I was thinking of creating something like this that assumes all sequence lengths are the same if no sequence_length is passed:</p>\n<pre><code>def ctc_loss(labels, inputs, sequence_length=None, preprocess_collapse_repeated=True,\n             ctc_merge_repeated=True, ignore_longer_outputs_than_inputs=False, time_major=True):\n    if sequence_length is None:\n        if time_major:\n            sequence_length = tf.fill(tf.shape(inputs)[0:1], tf.shape(inputs)[1])\n        else:\n            sequence_length = tf.fill(tf.shape(inputs)[1:2], tf.shape(inputs)[0])\n    return tf.nn.ctc_loss(sparse_labels, inputs, sequence_length,\n                          preprocess_collapse_repeated=preprocess_collapse_repeated,\n                          ctc_merge_repeated=ctc_merge_repeated,\n                          ignore_longer_outputs_than_inputs=ignore_longer_outputs_than_inputs,\n                          time_major=time_major)\n</code></pre>", "body_text": "I was thinking of creating something like this that assumes all sequence lengths are the same if no sequence_length is passed:\ndef ctc_loss(labels, inputs, sequence_length=None, preprocess_collapse_repeated=True,\n             ctc_merge_repeated=True, ignore_longer_outputs_than_inputs=False, time_major=True):\n    if sequence_length is None:\n        if time_major:\n            sequence_length = tf.fill(tf.shape(inputs)[0:1], tf.shape(inputs)[1])\n        else:\n            sequence_length = tf.fill(tf.shape(inputs)[1:2], tf.shape(inputs)[0])\n    return tf.nn.ctc_loss(sparse_labels, inputs, sequence_length,\n                          preprocess_collapse_repeated=preprocess_collapse_repeated,\n                          ctc_merge_repeated=ctc_merge_repeated,\n                          ignore_longer_outputs_than_inputs=ignore_longer_outputs_than_inputs,\n                          time_major=time_major)", "body": "I was thinking of creating something like this that assumes all sequence lengths are the same if no sequence_length is passed:\r\n\r\n```\r\ndef ctc_loss(labels, inputs, sequence_length=None, preprocess_collapse_repeated=True,\r\n             ctc_merge_repeated=True, ignore_longer_outputs_than_inputs=False, time_major=True):\r\n    if sequence_length is None:\r\n        if time_major:\r\n            sequence_length = tf.fill(tf.shape(inputs)[0:1], tf.shape(inputs)[1])\r\n        else:\r\n            sequence_length = tf.fill(tf.shape(inputs)[1:2], tf.shape(inputs)[0])\r\n    return tf.nn.ctc_loss(sparse_labels, inputs, sequence_length,\r\n                          preprocess_collapse_repeated=preprocess_collapse_repeated,\r\n                          ctc_merge_repeated=ctc_merge_repeated,\r\n                          ignore_longer_outputs_than_inputs=ignore_longer_outputs_than_inputs,\r\n                          time_major=time_major)\r\n```"}