{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/257267442", "html_url": "https://github.com/tensorflow/tensorflow/issues/5234#issuecomment-257267442", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5234", "id": 257267442, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzI2NzQ0Mg==", "user": {"login": "greaber", "id": 8763901, "node_id": "MDQ6VXNlcjg3NjM5MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/8763901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/greaber", "html_url": "https://github.com/greaber", "followers_url": "https://api.github.com/users/greaber/followers", "following_url": "https://api.github.com/users/greaber/following{/other_user}", "gists_url": "https://api.github.com/users/greaber/gists{/gist_id}", "starred_url": "https://api.github.com/users/greaber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/greaber/subscriptions", "organizations_url": "https://api.github.com/users/greaber/orgs", "repos_url": "https://api.github.com/users/greaber/repos", "events_url": "https://api.github.com/users/greaber/events{/privacy}", "received_events_url": "https://api.github.com/users/greaber/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-31T11:08:14Z", "updated_at": "2016-10-31T11:08:14Z", "author_association": "NONE", "body_html": "<p>In my case, the writing code is:</p>\n<pre><code>assert cooked_data.shape == (60000,256,16)\nflattened_data = cooked_data.flatten()\nlistized_data = flattened_data.tolist()\ntf_example = tf.train.Example(\n    features = tf.train.Features(\n        feature = {\n            'data': tf.train.Feature(float_list = tf.train.FloatList(value = listized_data)),\n            'subject_id': tf.train.Feature(int64_list = tf.train.Int64List(value = [subject_id])),\n            'example_id': tf.train.Feature(int64_list = tf.train.Int64List(value = [example_id])),\n            'label': tf.train.Feature(float_list = tf.train.FloatList(value = [label]))\n        }\n    )\n)\nwriter.write(tf_example.SerializeToString())\n</code></pre>\n<p>and the reading code is:</p>\n<pre><code>key, record_string = reader.read(queue)\nfeatures = tf.parse_single_example(\n    record_string,\n    features={\n        'data': tf.FixedLenFeature([60000*256*16], tf.float32),\n        'subject_id': tf.FixedLenFeature([1], tf.int64),\n        'example_id': tf.FixedLenFeature([1], tf.int64),\n        'label': tf.FixedLenFeature([1], tf.float32),\n    }\n)\n</code></pre>\n<p>Is the bug in this code?</p>\n<p>Also, what is the rationale for using a non-self-describing format for tfrecords and also for using a non-standard format?  It seems to me hdf5 or a subset would be better.</p>", "body_text": "In my case, the writing code is:\nassert cooked_data.shape == (60000,256,16)\nflattened_data = cooked_data.flatten()\nlistized_data = flattened_data.tolist()\ntf_example = tf.train.Example(\n    features = tf.train.Features(\n        feature = {\n            'data': tf.train.Feature(float_list = tf.train.FloatList(value = listized_data)),\n            'subject_id': tf.train.Feature(int64_list = tf.train.Int64List(value = [subject_id])),\n            'example_id': tf.train.Feature(int64_list = tf.train.Int64List(value = [example_id])),\n            'label': tf.train.Feature(float_list = tf.train.FloatList(value = [label]))\n        }\n    )\n)\nwriter.write(tf_example.SerializeToString())\n\nand the reading code is:\nkey, record_string = reader.read(queue)\nfeatures = tf.parse_single_example(\n    record_string,\n    features={\n        'data': tf.FixedLenFeature([60000*256*16], tf.float32),\n        'subject_id': tf.FixedLenFeature([1], tf.int64),\n        'example_id': tf.FixedLenFeature([1], tf.int64),\n        'label': tf.FixedLenFeature([1], tf.float32),\n    }\n)\n\nIs the bug in this code?\nAlso, what is the rationale for using a non-self-describing format for tfrecords and also for using a non-standard format?  It seems to me hdf5 or a subset would be better.", "body": "In my case, the writing code is:\n\n```\nassert cooked_data.shape == (60000,256,16)\nflattened_data = cooked_data.flatten()\nlistized_data = flattened_data.tolist()\ntf_example = tf.train.Example(\n    features = tf.train.Features(\n        feature = {\n            'data': tf.train.Feature(float_list = tf.train.FloatList(value = listized_data)),\n            'subject_id': tf.train.Feature(int64_list = tf.train.Int64List(value = [subject_id])),\n            'example_id': tf.train.Feature(int64_list = tf.train.Int64List(value = [example_id])),\n            'label': tf.train.Feature(float_list = tf.train.FloatList(value = [label]))\n        }\n    )\n)\nwriter.write(tf_example.SerializeToString())\n```\n\nand the reading code is:\n\n```\nkey, record_string = reader.read(queue)\nfeatures = tf.parse_single_example(\n    record_string,\n    features={\n        'data': tf.FixedLenFeature([60000*256*16], tf.float32),\n        'subject_id': tf.FixedLenFeature([1], tf.int64),\n        'example_id': tf.FixedLenFeature([1], tf.int64),\n        'label': tf.FixedLenFeature([1], tf.float32),\n    }\n)\n```\n\nIs the bug in this code?\n\nAlso, what is the rationale for using a non-self-describing format for tfrecords and also for using a non-standard format?  It seems to me hdf5 or a subset would be better.\n"}