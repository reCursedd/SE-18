{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/260051564", "html_url": "https://github.com/tensorflow/tensorflow/pull/5547#issuecomment-260051564", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5547", "id": 260051564, "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDA1MTU2NA==", "user": {"login": "mkolod", "id": 476135, "node_id": "MDQ6VXNlcjQ3NjEzNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/476135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mkolod", "html_url": "https://github.com/mkolod", "followers_url": "https://api.github.com/users/mkolod/followers", "following_url": "https://api.github.com/users/mkolod/following{/other_user}", "gists_url": "https://api.github.com/users/mkolod/gists{/gist_id}", "starred_url": "https://api.github.com/users/mkolod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mkolod/subscriptions", "organizations_url": "https://api.github.com/users/mkolod/orgs", "repos_url": "https://api.github.com/users/mkolod/repos", "events_url": "https://api.github.com/users/mkolod/events{/privacy}", "received_events_url": "https://api.github.com/users/mkolod/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-11T20:45:31Z", "updated_at": "2016-11-11T20:48:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=49262\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jart\">@jart</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=17151892\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tensorflower-gardener\">@tensorflower-gardener</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=229914\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/keveman\">@keveman</a> BTW, in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"181553295\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/4807\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/4807/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/4807\">#4807</a>, I was asked to provide some benchmarks. When using a jpeg-decode-only graph (<a href=\"https://github.com/mkolod/tf_perf_eval/blob/master/io/jpeg/tensorflow/multithreaded_jpeg_decode.py\">source here</a>) and limiting processing to 1 thread, I got 1,257 images/sec (256x256 JPEG, specifically <a href=\"https://github.com/mkolod/tf_perf_eval/blob/master/io/jpeg/tensorflow/ElCapitan_256_by_256.jpg\">this one</a>) on a machine with an SSD and an Intel Core i7-5930K CPU @ 3.50GHz with libjpeg-turbo, and 632 images/second with libjpeg. This represents a libjpeg-turbo speedup of 1.99x over libjpeg, which is consistent with the expectations based on the <a href=\"http://www.libjpeg-turbo.org/About/Performance\" rel=\"nofollow\">benchmarks</a> provided by the libjpeg-turbo team. The range of speed-up factors for x86-64 provided in the libjpeg-turbo team's benchmarks  is 1.89 to 4.31, depending on image characteristics, and my test shows that the speed-up factor is indeed in that range. For other platforms such as ARM v8, the speed-up factors are basically the same as for x86-64 (see <a href=\"http://www.libjpeg-turbo.org/About/Performance\" rel=\"nofollow\">here</a>). A very exhaustive spreadsheet with lots of benchmark scenarios can be found <a href=\"http://www.libjpeg-turbo.org/pmwiki/uploads/About/libjpegturbo-1.5.ods\" rel=\"nofollow\">here</a>. My finding of a 1.99x speedup with the library called from TensorFlow itself should be convincing enough that this constitutes a major improvement.</p>", "body_text": "@jart @tensorflower-gardener @keveman BTW, in #4807, I was asked to provide some benchmarks. When using a jpeg-decode-only graph (source here) and limiting processing to 1 thread, I got 1,257 images/sec (256x256 JPEG, specifically this one) on a machine with an SSD and an Intel Core i7-5930K CPU @ 3.50GHz with libjpeg-turbo, and 632 images/second with libjpeg. This represents a libjpeg-turbo speedup of 1.99x over libjpeg, which is consistent with the expectations based on the benchmarks provided by the libjpeg-turbo team. The range of speed-up factors for x86-64 provided in the libjpeg-turbo team's benchmarks  is 1.89 to 4.31, depending on image characteristics, and my test shows that the speed-up factor is indeed in that range. For other platforms such as ARM v8, the speed-up factors are basically the same as for x86-64 (see here). A very exhaustive spreadsheet with lots of benchmark scenarios can be found here. My finding of a 1.99x speedup with the library called from TensorFlow itself should be convincing enough that this constitutes a major improvement.", "body": "@jart @tensorflower-gardener @keveman BTW, in #4807, I was asked to provide some benchmarks. When using a jpeg-decode-only graph ([source here](https://github.com/mkolod/tf_perf_eval/blob/master/io/jpeg/tensorflow/multithreaded_jpeg_decode.py)) and limiting processing to 1 thread, I got 1,257 images/sec (256x256 JPEG, specifically [this one](https://github.com/mkolod/tf_perf_eval/blob/master/io/jpeg/tensorflow/ElCapitan_256_by_256.jpg)) on a machine with an SSD and an Intel Core i7-5930K CPU @ 3.50GHz with libjpeg-turbo, and 632 images/second with libjpeg. This represents a libjpeg-turbo speedup of 1.99x over libjpeg, which is consistent with the expectations based on the [benchmarks](http://www.libjpeg-turbo.org/About/Performance) provided by the libjpeg-turbo team. The range of speed-up factors for x86-64 provided in the libjpeg-turbo team's benchmarks  is 1.89 to 4.31, depending on image characteristics, and my test shows that the speed-up factor is indeed in that range. For other platforms such as ARM v8, the speed-up factors are basically the same as for x86-64 (see [here](http://www.libjpeg-turbo.org/About/Performance)). A very exhaustive spreadsheet with lots of benchmark scenarios can be found [here](http://www.libjpeg-turbo.org/pmwiki/uploads/About/libjpegturbo-1.5.ods). My finding of a 1.99x speedup with the library called from TensorFlow itself should be convincing enough that this constitutes a major improvement.\n"}