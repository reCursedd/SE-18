{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350188882", "html_url": "https://github.com/tensorflow/tensorflow/issues/15158#issuecomment-350188882", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15158", "id": 350188882, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDE4ODg4Mg==", "user": {"login": "maxfiedler", "id": 4192637, "node_id": "MDQ6VXNlcjQxOTI2Mzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4192637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxfiedler", "html_url": "https://github.com/maxfiedler", "followers_url": "https://api.github.com/users/maxfiedler/followers", "following_url": "https://api.github.com/users/maxfiedler/following{/other_user}", "gists_url": "https://api.github.com/users/maxfiedler/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxfiedler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxfiedler/subscriptions", "organizations_url": "https://api.github.com/users/maxfiedler/orgs", "repos_url": "https://api.github.com/users/maxfiedler/repos", "events_url": "https://api.github.com/users/maxfiedler/events{/privacy}", "received_events_url": "https://api.github.com/users/maxfiedler/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-08T06:59:50Z", "updated_at": "2017-12-08T07:00:16Z", "author_association": "NONE", "body_html": "<p>As for the problem with creating the string_handles for the feedable iterator, after_create_session could be used to solve it I guess, but then I would have to create an extra hook just for that, that would also make the code much harder to read.<br>\nI am not a great fan of hiding away simple logical algorithmic steps in convoluted constructs. I should be able to recognize all essential steps of the graph evaluation in the session block (so, except for logging and saving stuff, for this hooks are great).<br>\nSo, I would still like to have this structure:</p>\n<pre><code>with MonitoredSession(hooks=hooks) as sess: \n  # everything that needs to be evaluated only once\n  handles = session.run(handles)\n  condition = session.run(some_structural_evaluation_of_the_graph )\n\n  # everything that needs to be evaluated per global step\n  while iter &lt; iter_max and not sess.should_stop():\n    session.run(opt)\n    ...\n</code></pre>", "body_text": "As for the problem with creating the string_handles for the feedable iterator, after_create_session could be used to solve it I guess, but then I would have to create an extra hook just for that, that would also make the code much harder to read.\nI am not a great fan of hiding away simple logical algorithmic steps in convoluted constructs. I should be able to recognize all essential steps of the graph evaluation in the session block (so, except for logging and saving stuff, for this hooks are great).\nSo, I would still like to have this structure:\nwith MonitoredSession(hooks=hooks) as sess: \n  # everything that needs to be evaluated only once\n  handles = session.run(handles)\n  condition = session.run(some_structural_evaluation_of_the_graph )\n\n  # everything that needs to be evaluated per global step\n  while iter < iter_max and not sess.should_stop():\n    session.run(opt)\n    ...", "body": "As for the problem with creating the string_handles for the feedable iterator, after_create_session could be used to solve it I guess, but then I would have to create an extra hook just for that, that would also make the code much harder to read. \r\nI am not a great fan of hiding away simple logical algorithmic steps in convoluted constructs. I should be able to recognize all essential steps of the graph evaluation in the session block (so, except for logging and saving stuff, for this hooks are great).\r\nSo, I would still like to have this structure:\r\n```\r\nwith MonitoredSession(hooks=hooks) as sess: \r\n  # everything that needs to be evaluated only once\r\n  handles = session.run(handles)\r\n  condition = session.run(some_structural_evaluation_of_the_graph )\r\n\r\n  # everything that needs to be evaluated per global step\r\n  while iter < iter_max and not sess.should_stop():\r\n    session.run(opt)\r\n    ...\r\n```"}