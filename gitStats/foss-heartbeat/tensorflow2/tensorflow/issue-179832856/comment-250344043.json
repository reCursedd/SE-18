{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/250344043", "html_url": "https://github.com/tensorflow/tensorflow/issues/4632#issuecomment-250344043", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4632", "id": 250344043, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDM0NDA0Mw==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-29T01:02:29Z", "updated_at": "2016-09-29T01:02:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The <code>shape</code> argument to <code>tf.random_uniform()</code> can be any arbitrary 1-D tensor, so you can use a <code>tf.placeholder()</code> as the shape (or for some component of the shape):</p>\n<div class=\"highlight highlight-source-python\"><pre>shape <span class=\"pl-k\">=</span> tf.placeholder(tf.int32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>])  <span class=\"pl-c\"><span class=\"pl-c\">#</span> `shape` is a 1-D tensor.</span>\nrandom_t <span class=\"pl-k\">=</span> tf.random_uniform(shape)\n\nsess.run(random_t, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{shape: [<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">10</span>]})\nsess.run(random_t, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{shape: [<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">37</span>]})\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Or, if you just want to vary the 0th dimension, which let's call `batch_size`...</span>\nbatch_size <span class=\"pl-k\">=</span> tf.placeholder(tf.int32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[])  <span class=\"pl-c\"><span class=\"pl-c\">#</span> `batch_size` is a scalar (0-D tensor).</span>\nrandom_t <span class=\"pl-k\">=</span> tf.random_uniform([batch_size, <span class=\"pl-c1\">10</span>])\n\nsess.run(random_t, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{batch_size: <span class=\"pl-c1\">5</span>})\nsess.run(random_t, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{batch_size: <span class=\"pl-c1\">17</span>})</pre></div>", "body_text": "The shape argument to tf.random_uniform() can be any arbitrary 1-D tensor, so you can use a tf.placeholder() as the shape (or for some component of the shape):\nshape = tf.placeholder(tf.int32, shape=[None])  # `shape` is a 1-D tensor.\nrandom_t = tf.random_uniform(shape)\n\nsess.run(random_t, feed_dict={shape: [5, 10]})\nsess.run(random_t, feed_dict={shape: [3, 37]})\n\n# Or, if you just want to vary the 0th dimension, which let's call `batch_size`...\nbatch_size = tf.placeholder(tf.int32, shape=[])  # `batch_size` is a scalar (0-D tensor).\nrandom_t = tf.random_uniform([batch_size, 10])\n\nsess.run(random_t, feed_dict={batch_size: 5})\nsess.run(random_t, feed_dict={batch_size: 17})", "body": "The `shape` argument to `tf.random_uniform()` can be any arbitrary 1-D tensor, so you can use a `tf.placeholder()` as the shape (or for some component of the shape):\n\n``` python\nshape = tf.placeholder(tf.int32, shape=[None])  # `shape` is a 1-D tensor.\nrandom_t = tf.random_uniform(shape)\n\nsess.run(random_t, feed_dict={shape: [5, 10]})\nsess.run(random_t, feed_dict={shape: [3, 37]})\n\n# Or, if you just want to vary the 0th dimension, which let's call `batch_size`...\nbatch_size = tf.placeholder(tf.int32, shape=[])  # `batch_size` is a scalar (0-D tensor).\nrandom_t = tf.random_uniform([batch_size, 10])\n\nsess.run(random_t, feed_dict={batch_size: 5})\nsess.run(random_t, feed_dict={batch_size: 17})\n```\n"}