{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/321148542", "html_url": "https://github.com/tensorflow/tensorflow/issues/11974#issuecomment-321148542", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11974", "id": 321148542, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTE0ODU0Mg==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-09T04:19:51Z", "updated_at": "2017-08-09T04:19:51Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1112263\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/facaiy\">@facaiy</a> this is a Python specific issue so it needs to be at Python side. Look at the stack trace of failing reshape to see where it's happening. The Python layer calls tensor_util.make_tensor_proto which calls numpy.asarray on the result. Numpy asarray tries to figure out dtype of the list, and because it doesn't know about tf.Dimension, it makes it type \"np.object\" which corresponds to \"tf.string\".</p>\n<p>The ideal way to fix it would be to figure out how to modify tf.Dimension object so that np.asarray would recognize them as integer. IE, you want</p>\n<p><code>np.asarray([1,tf.Dimension(1)]) </code></p>\n<p>to return</p>\n<p><code>array([1, 1]</code></p>\n<p>instead of</p>\n<p><code>array([1, Dimension(1)], dtype=object)</code></p>\n<p>If that's not possible, the next best thing would be to have special case for tf.Dimension object to convert them to int just before <code>np.asarray</code> call. You would want to special-case this for length &lt;=8  since we don't need larger ranks for shape calculations, and this would avoid performance penalty for more general arrays</p>", "body_text": "@facaiy this is a Python specific issue so it needs to be at Python side. Look at the stack trace of failing reshape to see where it's happening. The Python layer calls tensor_util.make_tensor_proto which calls numpy.asarray on the result. Numpy asarray tries to figure out dtype of the list, and because it doesn't know about tf.Dimension, it makes it type \"np.object\" which corresponds to \"tf.string\".\nThe ideal way to fix it would be to figure out how to modify tf.Dimension object so that np.asarray would recognize them as integer. IE, you want\nnp.asarray([1,tf.Dimension(1)]) \nto return\narray([1, 1]\ninstead of\narray([1, Dimension(1)], dtype=object)\nIf that's not possible, the next best thing would be to have special case for tf.Dimension object to convert them to int just before np.asarray call. You would want to special-case this for length <=8  since we don't need larger ranks for shape calculations, and this would avoid performance penalty for more general arrays", "body": "@facaiy this is a Python specific issue so it needs to be at Python side. Look at the stack trace of failing reshape to see where it's happening. The Python layer calls tensor_util.make_tensor_proto which calls numpy.asarray on the result. Numpy asarray tries to figure out dtype of the list, and because it doesn't know about tf.Dimension, it makes it type \"np.object\" which corresponds to \"tf.string\".\r\n\r\nThe ideal way to fix it would be to figure out how to modify tf.Dimension object so that np.asarray would recognize them as integer. IE, you want\r\n\r\n`np.asarray([1,tf.Dimension(1)])\r\n`\r\n\r\nto return\r\n\r\n`array([1, 1]`\r\n\r\ninstead of\r\n\r\n`array([1, Dimension(1)], dtype=object)`\r\n\r\nIf that's not possible, the next best thing would be to have special case for tf.Dimension object to convert them to int just before `np.asarray` call. You would want to special-case this for length <=8  since we don't need larger ranks for shape calculations, and this would avoid performance penalty for more general arrays"}