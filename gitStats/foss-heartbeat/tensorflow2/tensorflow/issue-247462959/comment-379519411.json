{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/379519411", "html_url": "https://github.com/tensorflow/tensorflow/issues/11974#issuecomment-379519411", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11974", "id": 379519411, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTUxOTQxMQ==", "user": {"login": "Duke-ding", "id": 18624123, "node_id": "MDQ6VXNlcjE4NjI0MTIz", "avatar_url": "https://avatars2.githubusercontent.com/u/18624123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Duke-ding", "html_url": "https://github.com/Duke-ding", "followers_url": "https://api.github.com/users/Duke-ding/followers", "following_url": "https://api.github.com/users/Duke-ding/following{/other_user}", "gists_url": "https://api.github.com/users/Duke-ding/gists{/gist_id}", "starred_url": "https://api.github.com/users/Duke-ding/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Duke-ding/subscriptions", "organizations_url": "https://api.github.com/users/Duke-ding/orgs", "repos_url": "https://api.github.com/users/Duke-ding/repos", "events_url": "https://api.github.com/users/Duke-ding/events{/privacy}", "received_events_url": "https://api.github.com/users/Duke-ding/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-08T04:30:05Z", "updated_at": "2018-04-08T04:30:05Z", "author_association": "NONE", "body_html": "<p>def read_and_decode(filename):<br>\nfilename_quece = tf.train.string_input_producer([filename])#\u8bfb\u5165\u6d41\u4e2d</p>\n<pre><code>reader = tf.TFRecordReader()\n_,serialized_example = reader.read(filename_quece)#\u8fd4\u56de\u6587\u4ef6\u540d\u548c\u6587\u4ef6\nfeatures = tf.parse_single_example(serialized_example,features={\n    'label':tf.FixedLenFeature([],tf.int64),\n    'img_raw' : tf.FixedLenFeature([],tf.string),\n})\nimg = tf.decode_raw(features['img_raw'],tf.uint8)\nimg = tf.reshape(img,[256,256,3])\nimg = tf.cast(img,tf.float32)*(1./255) - 0.5\nlabel = tf.cast(features['label'],tf.int32)\n\nreturn img,label\n</code></pre>\n<p>if <strong>name</strong> == '<strong>main</strong>':<br>\nimg,label = read_and_decode(\"train_data.tfrecords\")</p>\n<h1>print(img.shape)</h1>\n<h1>print(img[0])</h1>\n<pre><code>img_batch,label_batch = tf.train.shuffle_batch([img,label],batch_size=32,capacity=200000,\n                                               min_after_dequeue=100)\n</code></pre>\n<h1>img_batch = tf.reshape(img_batch,[None,256<em>256</em>3])</h1>\n<pre><code>x = tf.placeholder(tf.float32,[None,256*256*3])\n\nw = tf.Variable(tf.zeros([256*256*3,45]))\nb = tf.Variable(tf.zeros([45]))\n\ny = tf.nn.softmax(tf.matmul(x,w)+b)\ny_ = tf.placeholder(tf.float32,[None])\n\ncross_entropy = -tf.reduce_sum(y_*tf.log(y))\n\ntrain_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\n\n\n#\u521d\u59cb\u5316\u6240\u6709\u7684op\ninit = tf.global_variables_initializer()\n</code></pre>\n<h1></h1>\n<pre><code>with tf.Session() as sess:\n    sess.run(init)\n    coord=tf.train.Coordinator()#\u521b\u5efa\u4e00\u4e2a\u534f\u8c03\u5668\uff0c\u7ba1\u7406\u7ebf\u7a0b\n    #\u542f\u52a8\u961f\u5217\n\n    threads = tf.train.start_queue_runners(sess=sess,coord=coord,start=True)\n    for i in range(10):\n        X_train_batch,y_train_batch = sess.run([img_batch,label_batch])\n       \n        sess.run(train_step,feed_dict={x:X_train_batch,y_:y_train_batch})\n        print(X_train_batch.shape,y_train_batch.shape)\n        print(X_train_batch)\n    \n    coord.request_stop()\n    coord.join(threads)\n</code></pre>\n<p>ValueError: Cannot feed value of shape (32, 256, 256, 3) for Tensor 'Placeholder_2:0', which has shape '(?, 196608)'<br>\nI can't  deal with this issue</p>", "body_text": "def read_and_decode(filename):\nfilename_quece = tf.train.string_input_producer([filename])#\u8bfb\u5165\u6d41\u4e2d\nreader = tf.TFRecordReader()\n_,serialized_example = reader.read(filename_quece)#\u8fd4\u56de\u6587\u4ef6\u540d\u548c\u6587\u4ef6\nfeatures = tf.parse_single_example(serialized_example,features={\n    'label':tf.FixedLenFeature([],tf.int64),\n    'img_raw' : tf.FixedLenFeature([],tf.string),\n})\nimg = tf.decode_raw(features['img_raw'],tf.uint8)\nimg = tf.reshape(img,[256,256,3])\nimg = tf.cast(img,tf.float32)*(1./255) - 0.5\nlabel = tf.cast(features['label'],tf.int32)\n\nreturn img,label\n\nif name == 'main':\nimg,label = read_and_decode(\"train_data.tfrecords\")\nprint(img.shape)\nprint(img[0])\nimg_batch,label_batch = tf.train.shuffle_batch([img,label],batch_size=32,capacity=200000,\n                                               min_after_dequeue=100)\n\nimg_batch = tf.reshape(img_batch,[None,2562563])\nx = tf.placeholder(tf.float32,[None,256*256*3])\n\nw = tf.Variable(tf.zeros([256*256*3,45]))\nb = tf.Variable(tf.zeros([45]))\n\ny = tf.nn.softmax(tf.matmul(x,w)+b)\ny_ = tf.placeholder(tf.float32,[None])\n\ncross_entropy = -tf.reduce_sum(y_*tf.log(y))\n\ntrain_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\n\n\n#\u521d\u59cb\u5316\u6240\u6709\u7684op\ninit = tf.global_variables_initializer()\n\n\nwith tf.Session() as sess:\n    sess.run(init)\n    coord=tf.train.Coordinator()#\u521b\u5efa\u4e00\u4e2a\u534f\u8c03\u5668\uff0c\u7ba1\u7406\u7ebf\u7a0b\n    #\u542f\u52a8\u961f\u5217\n\n    threads = tf.train.start_queue_runners(sess=sess,coord=coord,start=True)\n    for i in range(10):\n        X_train_batch,y_train_batch = sess.run([img_batch,label_batch])\n       \n        sess.run(train_step,feed_dict={x:X_train_batch,y_:y_train_batch})\n        print(X_train_batch.shape,y_train_batch.shape)\n        print(X_train_batch)\n    \n    coord.request_stop()\n    coord.join(threads)\n\nValueError: Cannot feed value of shape (32, 256, 256, 3) for Tensor 'Placeholder_2:0', which has shape '(?, 196608)'\nI can't  deal with this issue", "body": "def read_and_decode(filename):\r\n    filename_quece = tf.train.string_input_producer([filename])#\u8bfb\u5165\u6d41\u4e2d\r\n    \r\n    reader = tf.TFRecordReader()\r\n    _,serialized_example = reader.read(filename_quece)#\u8fd4\u56de\u6587\u4ef6\u540d\u548c\u6587\u4ef6\r\n    features = tf.parse_single_example(serialized_example,features={\r\n        'label':tf.FixedLenFeature([],tf.int64),\r\n        'img_raw' : tf.FixedLenFeature([],tf.string),\r\n    })\r\n    img = tf.decode_raw(features['img_raw'],tf.uint8)\r\n    img = tf.reshape(img,[256,256,3])\r\n    img = tf.cast(img,tf.float32)*(1./255) - 0.5\r\n    label = tf.cast(features['label'],tf.int32)\r\n\r\n    return img,label\r\nif __name__ == '__main__':\r\n    img,label = read_and_decode(\"train_data.tfrecords\")\r\n#     print(img.shape)\r\n#     print(img[0])\r\n    img_batch,label_batch = tf.train.shuffle_batch([img,label],batch_size=32,capacity=200000,\r\n                                                   min_after_dequeue=100)\r\n    \r\n    \r\n#     img_batch = tf.reshape(img_batch,[None,256*256*3])\r\n    x = tf.placeholder(tf.float32,[None,256*256*3])\r\n    \r\n    w = tf.Variable(tf.zeros([256*256*3,45]))\r\n    b = tf.Variable(tf.zeros([45]))\r\n    \r\n    y = tf.nn.softmax(tf.matmul(x,w)+b)\r\n    y_ = tf.placeholder(tf.float32,[None])\r\n    \r\n    cross_entropy = -tf.reduce_sum(y_*tf.log(y))\r\n    \r\n    train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\r\n    \r\n\r\n    #\u521d\u59cb\u5316\u6240\u6709\u7684op\r\n    init = tf.global_variables_initializer()\r\n#     \r\n    with tf.Session() as sess:\r\n        sess.run(init)\r\n        coord=tf.train.Coordinator()#\u521b\u5efa\u4e00\u4e2a\u534f\u8c03\u5668\uff0c\u7ba1\u7406\u7ebf\u7a0b\r\n        #\u542f\u52a8\u961f\u5217\r\n\r\n        threads = tf.train.start_queue_runners(sess=sess,coord=coord,start=True)\r\n        for i in range(10):\r\n            X_train_batch,y_train_batch = sess.run([img_batch,label_batch])\r\n           \r\n            sess.run(train_step,feed_dict={x:X_train_batch,y_:y_train_batch})\r\n            print(X_train_batch.shape,y_train_batch.shape)\r\n            print(X_train_batch)\r\n        \r\n        coord.request_stop()\r\n        coord.join(threads)\r\n\r\n\r\n\r\nValueError: Cannot feed value of shape (32, 256, 256, 3) for Tensor 'Placeholder_2:0', which has shape '(?, 196608)'\r\nI can't  deal with this issue\r\n"}