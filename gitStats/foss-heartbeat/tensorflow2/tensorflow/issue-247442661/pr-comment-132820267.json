{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/132820267", "pull_request_review_id": 55104581, "id": 132820267, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjgyMDI2Nw==", "diff_hunk": "@@ -0,0 +1,52 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include <string>\n+\n+#include \"tensorflow/core/lib/core/status.h\"\n+#include \"tensorflow/core/framework/op.h\"\n+#include \"tensorflow/core/platform/env.h\"\n+#include \"tensorflow/java/src/gen/cc/gen_util.h\"\n+#include \"tensorflow/java/src/gen/cc/ops/op_generator.h\"\n+\n+namespace tensorflow {\n+\n+OpGenerator::OpGenerator(const std::string& ops_lib)\n+    : ops_lib(ops_lib) {\n+\n+  const std::string& lib_name = ops_lib.substr(0, ops_lib.find_last_of('_'));\n+  package_name = gen_util::StripChar(\"org.tensorflow.op.\" + lib_name, '_');\n+}\n+\n+OpGenerator::~OpGenerator() {}\n+\n+int OpGenerator::Run(const std::string& output_path) {\n+  tensorflow::Env* env = tensorflow::Env::Default();\n+  std::string package_path(output_path);\n+  package_path += gen_util::ReplaceChar(package_name, '.', '/');\n+\n+  if (!env->FileExists(package_path).ok()) {\n+    TF_CHECK_OK(env->RecursivelyCreateDir(package_path));\n+  }\n+\n+  OpList ops;\n+  OpRegistry::Global()->Export(true, &ops);", "path": "tensorflow/java/src/gen/cc/ops/op_generator.cc", "position": null, "original_position": 45, "commit_id": "daabbf01e8ae2075d472f332411b03f4d5bc6992", "original_commit_id": "a15c1c22d27ee4fa4c99ff123f9ad8234338c54d", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "My recommendation would be for `OpGenerator` to be provided with an `OpList` and the use of the global registry can be moved to `main()`. That would make `OpGenerator` more of a library that doesn't depend on global variables (`OpRegistry::Global`) and keep all the global variables in `main()`, which will be nice.", "created_at": "2017-08-12T15:24:41Z", "updated_at": "2017-09-01T18:01:03Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11973#discussion_r132820267", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11973", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/132820267"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11973#discussion_r132820267"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11973"}}, "body_html": "<p>My recommendation would be for <code>OpGenerator</code> to be provided with an <code>OpList</code> and the use of the global registry can be moved to <code>main()</code>. That would make <code>OpGenerator</code> more of a library that doesn't depend on global variables (<code>OpRegistry::Global</code>) and keep all the global variables in <code>main()</code>, which will be nice.</p>", "body_text": "My recommendation would be for OpGenerator to be provided with an OpList and the use of the global registry can be moved to main(). That would make OpGenerator more of a library that doesn't depend on global variables (OpRegistry::Global) and keep all the global variables in main(), which will be nice."}