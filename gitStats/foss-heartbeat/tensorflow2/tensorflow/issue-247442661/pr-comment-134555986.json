{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/134555986", "pull_request_review_id": 57861066, "id": 134555986, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNDU1NTk4Ng==", "diff_hunk": "@@ -0,0 +1,61 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ ==============================================================================*/\n+\n+#include <string>\n+#include <vector>\n+\n+#include \"tensorflow/core/platform/init_main.h\"\n+#include \"tensorflow/core/platform/env.h\"\n+#include \"tensorflow/core/util/command_line_flags.h\"\n+#include \"tensorflow/core/lib/core/status.h\"\n+#include \"tensorflow/core/framework/op.h\"\n+#include \"tensorflow/java/src/gen/cc/op_generator.h\"\n+\n+namespace tensorflow {\n+namespace op_gen {\n+\n+const char kUsageHeader[] =\n+    \"\\n\\nGenerator of operation wrappers in Java.\\n\\n\"\n+    \"This executable generates wrappers for all operations registered in the\\n\"\n+    \"ops file it has been linked to (i.e. one of the /core/ops/*.o binaries).\\n\"\n+    \"Generated files are output to the path provided as an argument, under\\n\"\n+    \"their appropriate package and using a maven-style directory layout.\\n\\n\";\n+\n+}  // namespace op_gen\n+}  // namespace tensorflow\n+\n+int main(int argc, char* argv[]) {\n+  tensorflow::string ops_file;\n+  tensorflow::string output_dir;\n+  std::vector<tensorflow::Flag> flag_list = {\n+    tensorflow::Flag(\"file\", &ops_file,", "path": "tensorflow/java/src/gen/cc/op_gen_main.cc", "position": null, "original_position": 43, "commit_id": "daabbf01e8ae2075d472f332411b03f4d5bc6992", "original_commit_id": "8db5473bd0ec77a25b80a244f19272ce08ed5f66", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "body": "This sounds like a good idea. But it might lead to some other difficulties, let me explain.\r\n\r\nThe `ops_file` (or let rename it `ops_lib` or `ops_lib_name`) is not only used to produce a package name but also to extract the group name (`@Operator(group=\"...\")`) in a near future, so it could be accessible from the `Ops` API (`ops.groupName().opName()`).\r\n\r\nBut the package and group names uses different naming conventions, the former being flat and the later in pascal/camel case. So by transforming, for instance, the `control_flow_ops` library name to `org.tensorflow.op.controlflow` in the Bazel rule, we won't be able to extract the `controlFlow` group name from it.\r\n\r\nA solution could be to pass the package name as an argument but also the group name as a different argument, e.g. `--group`. The package could be complete or just be the `org.tensorflow.op` root to which we append the flatten group name. What do you think? \r\n\r\nIf we do so, then in addition to remove the `_op[s]` suffix to the lib name, I need to find out an easy way to transform it to camel case from its original underscore form. \r\n\r\nI understand it is probably not easy for you to guess all those details since the code is pretty incomplete at this stage, sorry for the trouble.", "created_at": "2017-08-22T17:55:42Z", "updated_at": "2017-09-01T18:01:03Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11973#discussion_r134555986", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11973", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/134555986"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11973#discussion_r134555986"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11973"}}, "body_html": "<p>This sounds like a good idea. But it might lead to some other difficulties, let me explain.</p>\n<p>The <code>ops_file</code> (or let rename it <code>ops_lib</code> or <code>ops_lib_name</code>) is not only used to produce a package name but also to extract the group name (<code>@Operator(group=\"...\")</code>) in a near future, so it could be accessible from the <code>Ops</code> API (<code>ops.groupName().opName()</code>).</p>\n<p>But the package and group names uses different naming conventions, the former being flat and the later in pascal/camel case. So by transforming, for instance, the <code>control_flow_ops</code> library name to <code>org.tensorflow.op.controlflow</code> in the Bazel rule, we won't be able to extract the <code>controlFlow</code> group name from it.</p>\n<p>A solution could be to pass the package name as an argument but also the group name as a different argument, e.g. <code>--group</code>. The package could be complete or just be the <code>org.tensorflow.op</code> root to which we append the flatten group name. What do you think?</p>\n<p>If we do so, then in addition to remove the <code>_op[s]</code> suffix to the lib name, I need to find out an easy way to transform it to camel case from its original underscore form.</p>\n<p>I understand it is probably not easy for you to guess all those details since the code is pretty incomplete at this stage, sorry for the trouble.</p>", "body_text": "This sounds like a good idea. But it might lead to some other difficulties, let me explain.\nThe ops_file (or let rename it ops_lib or ops_lib_name) is not only used to produce a package name but also to extract the group name (@Operator(group=\"...\")) in a near future, so it could be accessible from the Ops API (ops.groupName().opName()).\nBut the package and group names uses different naming conventions, the former being flat and the later in pascal/camel case. So by transforming, for instance, the control_flow_ops library name to org.tensorflow.op.controlflow in the Bazel rule, we won't be able to extract the controlFlow group name from it.\nA solution could be to pass the package name as an argument but also the group name as a different argument, e.g. --group. The package could be complete or just be the org.tensorflow.op root to which we append the flatten group name. What do you think?\nIf we do so, then in addition to remove the _op[s] suffix to the lib name, I need to find out an easy way to transform it to camel case from its original underscore form.\nI understand it is probably not easy for you to guess all those details since the code is pretty incomplete at this stage, sorry for the trouble.", "in_reply_to_id": 134376389}