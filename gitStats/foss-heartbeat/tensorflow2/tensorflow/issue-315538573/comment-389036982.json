{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/389036982", "html_url": "https://github.com/tensorflow/tensorflow/issues/18660#issuecomment-389036982", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18660", "id": 389036982, "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTAzNjk4Mg==", "user": {"login": "sibyjackgrove", "id": 25213730, "node_id": "MDQ6VXNlcjI1MjEzNzMw", "avatar_url": "https://avatars0.githubusercontent.com/u/25213730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sibyjackgrove", "html_url": "https://github.com/sibyjackgrove", "followers_url": "https://api.github.com/users/sibyjackgrove/followers", "following_url": "https://api.github.com/users/sibyjackgrove/following{/other_user}", "gists_url": "https://api.github.com/users/sibyjackgrove/gists{/gist_id}", "starred_url": "https://api.github.com/users/sibyjackgrove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sibyjackgrove/subscriptions", "organizations_url": "https://api.github.com/users/sibyjackgrove/orgs", "repos_url": "https://api.github.com/users/sibyjackgrove/repos", "events_url": "https://api.github.com/users/sibyjackgrove/events{/privacy}", "received_events_url": "https://api.github.com/users/sibyjackgrove/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-15T04:11:11Z", "updated_at": "2018-05-15T04:11:11Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=32465472\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/angersson\">@angersson</a><br>\nI tried making the custom layer like below:</p>\n<pre><code>class MyLayer(Layer):\n    \n    def compute_output_shape(self, input_shape):\n        shape = list(input_shape)\n        assert len(shape) == 2  # only valid for 2D tensors\n        shape[-1] *= 2\n        return tuple(shape)\n\n    def call(self, x):\n        z_mean, z_log_var = x\n\n        epsilon = tf.random_normal(shape=(batch_size, latent_dim),mean=0., stddev=epsilon_std) \n    \n        return z_mean + tf.exp(z_log_var/2) * epsilon\n</code></pre>\n<p>Then used it within the model like below:<br>\n<code>z = MyLayer()([z_mean, z_log_var]) </code><br>\nHowever it is throwing off an error.<br>\nCould you tell me if I made the custom layer correctly? I was following example of antirectifier custom layer in the Keras repository.</p>", "body_text": "@angersson\nI tried making the custom layer like below:\nclass MyLayer(Layer):\n    \n    def compute_output_shape(self, input_shape):\n        shape = list(input_shape)\n        assert len(shape) == 2  # only valid for 2D tensors\n        shape[-1] *= 2\n        return tuple(shape)\n\n    def call(self, x):\n        z_mean, z_log_var = x\n\n        epsilon = tf.random_normal(shape=(batch_size, latent_dim),mean=0., stddev=epsilon_std) \n    \n        return z_mean + tf.exp(z_log_var/2) * epsilon\n\nThen used it within the model like below:\nz = MyLayer()([z_mean, z_log_var]) \nHowever it is throwing off an error.\nCould you tell me if I made the custom layer correctly? I was following example of antirectifier custom layer in the Keras repository.", "body": "@angersson \r\nI tried making the custom layer like below:\r\n```\r\nclass MyLayer(Layer):\r\n    \r\n    def compute_output_shape(self, input_shape):\r\n        shape = list(input_shape)\r\n        assert len(shape) == 2  # only valid for 2D tensors\r\n        shape[-1] *= 2\r\n        return tuple(shape)\r\n\r\n    def call(self, x):\r\n        z_mean, z_log_var = x\r\n\r\n        epsilon = tf.random_normal(shape=(batch_size, latent_dim),mean=0., stddev=epsilon_std) \r\n    \r\n        return z_mean + tf.exp(z_log_var/2) * epsilon\r\n```\r\nThen used it within the model like below: \r\n`z = MyLayer()([z_mean, z_log_var]) `\r\nHowever it is throwing off an error.\r\nCould you tell me if I made the custom layer correctly? I was following example of antirectifier custom layer in the Keras repository."}