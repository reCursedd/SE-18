{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350502914", "html_url": "https://github.com/tensorflow/tensorflow/issues/15240#issuecomment-350502914", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15240", "id": 350502914, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDUwMjkxNA==", "user": {"login": "DaoodS", "id": 25492993, "node_id": "MDQ6VXNlcjI1NDkyOTkz", "avatar_url": "https://avatars2.githubusercontent.com/u/25492993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DaoodS", "html_url": "https://github.com/DaoodS", "followers_url": "https://api.github.com/users/DaoodS/followers", "following_url": "https://api.github.com/users/DaoodS/following{/other_user}", "gists_url": "https://api.github.com/users/DaoodS/gists{/gist_id}", "starred_url": "https://api.github.com/users/DaoodS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DaoodS/subscriptions", "organizations_url": "https://api.github.com/users/DaoodS/orgs", "repos_url": "https://api.github.com/users/DaoodS/repos", "events_url": "https://api.github.com/users/DaoodS/events{/privacy}", "received_events_url": "https://api.github.com/users/DaoodS/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-09T20:20:22Z", "updated_at": "2017-12-10T00:06:06Z", "author_association": "NONE", "body_html": "<p>The code for which I am facing the issue.</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets('MNIST_data', one_hot = True)\n'''/tmp/data/'''\nn_classes = 10\nbatch_size = 150\n\nx = tf.placeholder(tf.float32, shape=[None, 784])\ny = tf.placeholder(tf.float32, shape=[None, 10])\n\nkeep_rate = 0.8\nkeep_prob = tf.placeholder(tf.float32)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding='SAME')\n\ndef maxpool2d(x):\n    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')\n\n\n\ndef convolutional_neural_network(x):\n    weights = {'W_conv1':tf.Variable(tf.random_normal([5,5,1,32])),\n               'W_conv2':tf.Variable(tf.random_normal([5,5,32,64])),\n               'W_fc':tf.Variable(tf.random_normal([7*7*64,1024])),\n               'out':tf.Variable(tf.random_normal([1024, n_classes]))}\n\n    biases = {'b_conv1':tf.Variable(tf.random_normal([32])),\n               'b_conv2':tf.Variable(tf.random_normal([64])),\n               'b_fc':tf.Variable(tf.random_normal([1024])),\n               'out':tf.Variable(tf.random_normal([n_classes]))}\n\n    x = tf.reshape(x, shape=[-1, 28, 28, 1])\n\n    conv1 = tf.nn.relu(conv2d(x, weights['W_conv1']) + biases['b_conv1'])\n    conv1 = maxpool2d(conv1)\n    \n    conv2 = tf.nn.relu(conv2d(conv1, weights['W_conv2']) + biases['b_conv2'])\n    conv2 = maxpool2d(conv2)\n\n    fc = tf.reshape(conv2,[-1, 7*7*64])\n    fc = tf.nn.relu(tf.matmul(fc, weights['W_fc'])+biases['b_fc'])\n    fc = tf.nn.dropout(fc, keep_rate)\n\n    output = tf.matmul(fc, weights['out'])+biases['out']\n\n    return output\n\ndef train_neural_network(x):\n    prediction = convolutional_neural_network(x)\n    cost = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(labels=prediction,logits=y))\n    optimizer = tf.train.AdamOptimizer(1e-4).minimize(cost)\n    \n    hm_epochs = 10\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n\n        for epoch in range(hm_epochs):\n            epoch_loss = 0\n            for _ in range(int(mnist.train.num_examples/batch_size)):\n                epoch_x, epoch_y = mnist.train.next_batch(batch_size)\n                _, c = sess.run([optimizer, cost], feed_dict={x: epoch_x, y: epoch_y})\n                epoch_loss += c\n\n            print('Epoch', epoch, 'completed out of',hm_epochs,'loss:',epoch_loss)\n\n        correct = tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct, 'float'))\n        print('Accuracy:',accuracy.eval({x:mnist.test.images, y:mnist.test.labels}))\n\ntrain_neural_network(x)\n</code></pre>", "body_text": "The code for which I am facing the issue.\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets('MNIST_data', one_hot = True)\n'''/tmp/data/'''\nn_classes = 10\nbatch_size = 150\n\nx = tf.placeholder(tf.float32, shape=[None, 784])\ny = tf.placeholder(tf.float32, shape=[None, 10])\n\nkeep_rate = 0.8\nkeep_prob = tf.placeholder(tf.float32)\n\ndef conv2d(x, W):\n    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding='SAME')\n\ndef maxpool2d(x):\n    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')\n\n\n\ndef convolutional_neural_network(x):\n    weights = {'W_conv1':tf.Variable(tf.random_normal([5,5,1,32])),\n               'W_conv2':tf.Variable(tf.random_normal([5,5,32,64])),\n               'W_fc':tf.Variable(tf.random_normal([7*7*64,1024])),\n               'out':tf.Variable(tf.random_normal([1024, n_classes]))}\n\n    biases = {'b_conv1':tf.Variable(tf.random_normal([32])),\n               'b_conv2':tf.Variable(tf.random_normal([64])),\n               'b_fc':tf.Variable(tf.random_normal([1024])),\n               'out':tf.Variable(tf.random_normal([n_classes]))}\n\n    x = tf.reshape(x, shape=[-1, 28, 28, 1])\n\n    conv1 = tf.nn.relu(conv2d(x, weights['W_conv1']) + biases['b_conv1'])\n    conv1 = maxpool2d(conv1)\n    \n    conv2 = tf.nn.relu(conv2d(conv1, weights['W_conv2']) + biases['b_conv2'])\n    conv2 = maxpool2d(conv2)\n\n    fc = tf.reshape(conv2,[-1, 7*7*64])\n    fc = tf.nn.relu(tf.matmul(fc, weights['W_fc'])+biases['b_fc'])\n    fc = tf.nn.dropout(fc, keep_rate)\n\n    output = tf.matmul(fc, weights['out'])+biases['out']\n\n    return output\n\ndef train_neural_network(x):\n    prediction = convolutional_neural_network(x)\n    cost = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(labels=prediction,logits=y))\n    optimizer = tf.train.AdamOptimizer(1e-4).minimize(cost)\n    \n    hm_epochs = 10\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n\n        for epoch in range(hm_epochs):\n            epoch_loss = 0\n            for _ in range(int(mnist.train.num_examples/batch_size)):\n                epoch_x, epoch_y = mnist.train.next_batch(batch_size)\n                _, c = sess.run([optimizer, cost], feed_dict={x: epoch_x, y: epoch_y})\n                epoch_loss += c\n\n            print('Epoch', epoch, 'completed out of',hm_epochs,'loss:',epoch_loss)\n\n        correct = tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct, 'float'))\n        print('Accuracy:',accuracy.eval({x:mnist.test.images, y:mnist.test.labels}))\n\ntrain_neural_network(x)", "body": "The code for which I am facing the issue.\r\n\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\nfrom tensorflow.examples.tutorials.mnist import input_data\r\nmnist = input_data.read_data_sets('MNIST_data', one_hot = True)\r\n'''/tmp/data/'''\r\nn_classes = 10\r\nbatch_size = 150\r\n\r\nx = tf.placeholder(tf.float32, shape=[None, 784])\r\ny = tf.placeholder(tf.float32, shape=[None, 10])\r\n\r\nkeep_rate = 0.8\r\nkeep_prob = tf.placeholder(tf.float32)\r\n\r\ndef conv2d(x, W):\r\n    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding='SAME')\r\n\r\ndef maxpool2d(x):\r\n    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')\r\n\r\n\r\n\r\ndef convolutional_neural_network(x):\r\n    weights = {'W_conv1':tf.Variable(tf.random_normal([5,5,1,32])),\r\n               'W_conv2':tf.Variable(tf.random_normal([5,5,32,64])),\r\n               'W_fc':tf.Variable(tf.random_normal([7*7*64,1024])),\r\n               'out':tf.Variable(tf.random_normal([1024, n_classes]))}\r\n\r\n    biases = {'b_conv1':tf.Variable(tf.random_normal([32])),\r\n               'b_conv2':tf.Variable(tf.random_normal([64])),\r\n               'b_fc':tf.Variable(tf.random_normal([1024])),\r\n               'out':tf.Variable(tf.random_normal([n_classes]))}\r\n\r\n    x = tf.reshape(x, shape=[-1, 28, 28, 1])\r\n\r\n    conv1 = tf.nn.relu(conv2d(x, weights['W_conv1']) + biases['b_conv1'])\r\n    conv1 = maxpool2d(conv1)\r\n    \r\n    conv2 = tf.nn.relu(conv2d(conv1, weights['W_conv2']) + biases['b_conv2'])\r\n    conv2 = maxpool2d(conv2)\r\n\r\n    fc = tf.reshape(conv2,[-1, 7*7*64])\r\n    fc = tf.nn.relu(tf.matmul(fc, weights['W_fc'])+biases['b_fc'])\r\n    fc = tf.nn.dropout(fc, keep_rate)\r\n\r\n    output = tf.matmul(fc, weights['out'])+biases['out']\r\n\r\n    return output\r\n\r\ndef train_neural_network(x):\r\n    prediction = convolutional_neural_network(x)\r\n    cost = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(labels=prediction,logits=y))\r\n    optimizer = tf.train.AdamOptimizer(1e-4).minimize(cost)\r\n    \r\n    hm_epochs = 10\r\n    with tf.Session() as sess:\r\n        sess.run(tf.global_variables_initializer())\r\n\r\n        for epoch in range(hm_epochs):\r\n            epoch_loss = 0\r\n            for _ in range(int(mnist.train.num_examples/batch_size)):\r\n                epoch_x, epoch_y = mnist.train.next_batch(batch_size)\r\n                _, c = sess.run([optimizer, cost], feed_dict={x: epoch_x, y: epoch_y})\r\n                epoch_loss += c\r\n\r\n            print('Epoch', epoch, 'completed out of',hm_epochs,'loss:',epoch_loss)\r\n\r\n        correct = tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))\r\n        accuracy = tf.reduce_mean(tf.cast(correct, 'float'))\r\n        print('Accuracy:',accuracy.eval({x:mnist.test.images, y:mnist.test.labels}))\r\n\r\ntrain_neural_network(x)\r\n```\r\n"}