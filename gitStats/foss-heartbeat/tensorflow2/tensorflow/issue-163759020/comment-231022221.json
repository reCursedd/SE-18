{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/231022221", "html_url": "https://github.com/tensorflow/tensorflow/issues/3190#issuecomment-231022221", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3190", "id": 231022221, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTAyMjIyMQ==", "user": {"login": "omgteam", "id": 6995922, "node_id": "MDQ6VXNlcjY5OTU5MjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6995922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omgteam", "html_url": "https://github.com/omgteam", "followers_url": "https://api.github.com/users/omgteam/followers", "following_url": "https://api.github.com/users/omgteam/following{/other_user}", "gists_url": "https://api.github.com/users/omgteam/gists{/gist_id}", "starred_url": "https://api.github.com/users/omgteam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omgteam/subscriptions", "organizations_url": "https://api.github.com/users/omgteam/orgs", "repos_url": "https://api.github.com/users/omgteam/repos", "events_url": "https://api.github.com/users/omgteam/events{/privacy}", "received_events_url": "https://api.github.com/users/omgteam/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-07T08:59:37Z", "updated_at": "2016-07-07T08:59:37Z", "author_association": "NONE", "body_html": "<p>I figure out a simple way, define a IdenticalSparseColumn(_SparseColumn), and transform data into multi-column SparseTensor in data preparation</p>\n<pre><code>1 import tensorflow as tf\n</code></pre>\n<p>2 from tensorflow.python.framework import dtypes<br>\n3 from tensorflow.contrib.layers import feature_column<br>\n4<br>\n5<br>\n6 class IdenticalSparseColumn(feature_column._SparseColumn):<br>\n7   \"\"\"Identical sparse column to support transformation in data layer\"\"\"<br>\n8<br>\n9   def <strong>new</strong>(cls, column_name, bucket_size, combiner=\"sum\"):<br>\n10<br>\n11     return super(IdenticalSparseColumn, cls).<strong>new</strong>(cls,<br>\n12                                                    column_name,<br>\n13                                                    bucket_size=bucket_size,<br>\n14                                                    combiner=combiner,<br>\n15                                                    dtype=dtypes.int32)<br>\n16<br>\n17   def insert_transformed_feature(self, columns_to_tensors):<br>\n18     \"\"\"Handles sparse column to id conversion.\"\"\"<br>\n19     columns_to_tensors[self] = columns_to_tensors[self.name]</p>\n<p>and preprocessing data into SparseTensor</p>", "body_text": "I figure out a simple way, define a IdenticalSparseColumn(_SparseColumn), and transform data into multi-column SparseTensor in data preparation\n1 import tensorflow as tf\n\n2 from tensorflow.python.framework import dtypes\n3 from tensorflow.contrib.layers import feature_column\n4\n5\n6 class IdenticalSparseColumn(feature_column._SparseColumn):\n7   \"\"\"Identical sparse column to support transformation in data layer\"\"\"\n8\n9   def new(cls, column_name, bucket_size, combiner=\"sum\"):\n10\n11     return super(IdenticalSparseColumn, cls).new(cls,\n12                                                    column_name,\n13                                                    bucket_size=bucket_size,\n14                                                    combiner=combiner,\n15                                                    dtype=dtypes.int32)\n16\n17   def insert_transformed_feature(self, columns_to_tensors):\n18     \"\"\"Handles sparse column to id conversion.\"\"\"\n19     columns_to_tensors[self] = columns_to_tensors[self.name]\nand preprocessing data into SparseTensor", "body": "I figure out a simple way, define a IdenticalSparseColumn(_SparseColumn), and transform data into multi-column SparseTensor in data preparation\n\n```\n1 import tensorflow as tf\n```\n\n  2 from tensorflow.python.framework import dtypes\n  3 from tensorflow.contrib.layers import feature_column\n  4\n  5\n  6 class IdenticalSparseColumn(feature_column._SparseColumn):\n  7   \"\"\"Identical sparse column to support transformation in data layer\"\"\"\n  8\n  9   def __new__(cls, column_name, bucket_size, combiner=\"sum\"):\n 10\n 11     return super(IdenticalSparseColumn, cls).**new**(cls,\n 12                                                    column_name,\n 13                                                    bucket_size=bucket_size,\n 14                                                    combiner=combiner,\n 15                                                    dtype=dtypes.int32)\n 16\n 17   def insert_transformed_feature(self, columns_to_tensors):\n 18     \"\"\"Handles sparse column to id conversion.\"\"\"\n 19     columns_to_tensors[self] = columns_to_tensors[self.name]\n\nand preprocessing data into SparseTensor\n"}