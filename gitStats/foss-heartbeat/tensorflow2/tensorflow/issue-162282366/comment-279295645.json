{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/279295645", "html_url": "https://github.com/tensorflow/tensorflow/issues/3043#issuecomment-279295645", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3043", "id": 279295645, "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTI5NTY0NQ==", "user": {"login": "CryKey3", "id": 25624072, "node_id": "MDQ6VXNlcjI1NjI0MDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/25624072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CryKey3", "html_url": "https://github.com/CryKey3", "followers_url": "https://api.github.com/users/CryKey3/followers", "following_url": "https://api.github.com/users/CryKey3/following{/other_user}", "gists_url": "https://api.github.com/users/CryKey3/gists{/gist_id}", "starred_url": "https://api.github.com/users/CryKey3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CryKey3/subscriptions", "organizations_url": "https://api.github.com/users/CryKey3/orgs", "repos_url": "https://api.github.com/users/CryKey3/repos", "events_url": "https://api.github.com/users/CryKey3/events{/privacy}", "received_events_url": "https://api.github.com/users/CryKey3/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-13T05:08:02Z", "updated_at": "2017-02-13T05:08:02Z", "author_association": "NONE", "body_html": "<p>Results:<br>\nrunfile('C:/Users/3/Documents/Python Scripts/TensorFlow/mnist_basic1.py', wdir='C:/Users/3/Documents/Python Scripts/TensorFlow')<br>\nExtracting MNIST_data\\train-images-idx3-ubyte.gz<br>\nExtracting MNIST_data\\train-labels-idx1-ubyte.gz<br>\nExtracting MNIST_data\\t10k-images-idx3-ubyte.gz<br>\nExtracting MNIST_data\\t10k-labels-idx1-ubyte.gz<br>\n0.9199</p>\n<p>Cut and Paste this:</p>\n<p>from tensorflow.examples.tutorials.mnist import input_data<br>\nmnist = input_data.read_data_sets('MNIST_data', one_hot=True)</p>\n<p>import tensorflow as tf<br>\nx = tf.placeholder(tf.float32, [None, 784])<br>\nW = tf.Variable(tf.zeros([784, 10]))<br>\nb = tf.Variable(tf.zeros([10]))<br>\ny = tf.nn.softmax(tf.matmul(x, W) + b)<br>\ny_ = tf.placeholder(tf.float32, [None, 10])<br>\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))<br>\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)<br>\ninit = tf.global_variables_initializer()<br>\nsess = tf.Session()<br>\nsess.run(init)<br>\nfor i in range(1000):<br>\nbatch_xs, batch_ys = mnist.train.next_batch(100)<br>\nsess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})<br>\ncorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))<br>\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))<br>\nprint(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))</p>", "body_text": "Results:\nrunfile('C:/Users/3/Documents/Python Scripts/TensorFlow/mnist_basic1.py', wdir='C:/Users/3/Documents/Python Scripts/TensorFlow')\nExtracting MNIST_data\\train-images-idx3-ubyte.gz\nExtracting MNIST_data\\train-labels-idx1-ubyte.gz\nExtracting MNIST_data\\t10k-images-idx3-ubyte.gz\nExtracting MNIST_data\\t10k-labels-idx1-ubyte.gz\n0.9199\nCut and Paste this:\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets('MNIST_data', one_hot=True)\nimport tensorflow as tf\nx = tf.placeholder(tf.float32, [None, 784])\nW = tf.Variable(tf.zeros([784, 10]))\nb = tf.Variable(tf.zeros([10]))\ny = tf.nn.softmax(tf.matmul(x, W) + b)\ny_ = tf.placeholder(tf.float32, [None, 10])\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\ninit = tf.global_variables_initializer()\nsess = tf.Session()\nsess.run(init)\nfor i in range(1000):\nbatch_xs, batch_ys = mnist.train.next_batch(100)\nsess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\ncorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))", "body": "Results:\r\nrunfile('C:/Users/3/Documents/Python Scripts/TensorFlow/mnist_basic1.py', wdir='C:/Users/3/Documents/Python Scripts/TensorFlow')\r\nExtracting MNIST_data\\train-images-idx3-ubyte.gz\r\nExtracting MNIST_data\\train-labels-idx1-ubyte.gz\r\nExtracting MNIST_data\\t10k-images-idx3-ubyte.gz\r\nExtracting MNIST_data\\t10k-labels-idx1-ubyte.gz\r\n0.9199\r\n\r\nCut and Paste this:\r\n\r\nfrom tensorflow.examples.tutorials.mnist import input_data\r\nmnist = input_data.read_data_sets('MNIST_data', one_hot=True)\r\n\r\nimport tensorflow as tf\r\nx = tf.placeholder(tf.float32, [None, 784])\r\nW = tf.Variable(tf.zeros([784, 10]))\r\nb = tf.Variable(tf.zeros([10]))\r\ny = tf.nn.softmax(tf.matmul(x, W) + b)\r\ny_ = tf.placeholder(tf.float32, [None, 10])\r\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\r\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\r\ninit = tf.global_variables_initializer()\r\nsess = tf.Session()\r\nsess.run(init)\r\nfor i in range(1000):\r\n  batch_xs, batch_ys = mnist.train.next_batch(100)\r\n  sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\r\ncorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\r\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\r\nprint(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))"}