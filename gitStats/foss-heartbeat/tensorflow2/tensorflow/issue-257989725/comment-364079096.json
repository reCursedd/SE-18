{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/364079096", "html_url": "https://github.com/tensorflow/tensorflow/issues/13061#issuecomment-364079096", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13061", "id": 364079096, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDA3OTA5Ng==", "user": {"login": "boegel", "id": 620876, "node_id": "MDQ6VXNlcjYyMDg3Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/620876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boegel", "html_url": "https://github.com/boegel", "followers_url": "https://api.github.com/users/boegel/followers", "following_url": "https://api.github.com/users/boegel/following{/other_user}", "gists_url": "https://api.github.com/users/boegel/gists{/gist_id}", "starred_url": "https://api.github.com/users/boegel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boegel/subscriptions", "organizations_url": "https://api.github.com/users/boegel/orgs", "repos_url": "https://api.github.com/users/boegel/repos", "events_url": "https://api.github.com/users/boegel/events{/privacy}", "received_events_url": "https://api.github.com/users/boegel/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-08T11:07:41Z", "updated_at": "2018-02-08T11:07:41Z", "author_association": "NONE", "body_html": "<p>Since <code>TensorFlow</code> was one of the motivators for a talk I recently gave (at FOSDEM'18), I can't resist to mention it here... (thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15332\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dmacvicar\">@dmacvicar</a> for pointing out this issue to me)</p>\n<p><em>\"How To Make Package Managers Cry\"</em></p>\n<ul>\n<li>abstract + slides at <a href=\"https://fosdem.org/2018/schedule/event/how_to_make_package_managers_cry/\" rel=\"nofollow\">https://fosdem.org/2018/schedule/event/how_to_make_package_managers_cry/</a></li>\n<li>recording at <a href=\"https://www.youtube.com/watch?v=NSemlYagjIU\" rel=\"nofollow\">https://www.youtube.com/watch?v=NSemlYagjIU</a></li>\n</ul>\n<p>I sort of understand the reluctance of the TF developers to switch away from Bazel or trying to maintain two different build systems, but I think it's important to realise that the current build procedure is a significant burden to many people who have tried to build TensorFlow from source for whatever reason (better performance on non-GPU systems, installing TF on an old OS (e.g. CentOS 6), etc.). And then I'm not even talking about getting Bazel installed first...</p>\n<p>Proof:</p>\n<ul>\n<li>\n<p>The EasyBuild project (<a href=\"http://easybuilders.github.io/easybuild/\" rel=\"nofollow\">http://easybuilders.github.io/easybuild/</a>), which already supports over 1,400 different (scientific) software packages (over 2,200 if you're also counting Python packages, R libraries, etc.) is still working on supporting the installation a built-from-source TensorFlow, see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"272570431\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/easybuilders/easybuild-easyblocks/issues/1287\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/easybuilders/easybuild-easyblocks/pull/1287/hovercard\" href=\"https://github.com/easybuilders/easybuild-easyblocks/pull/1287\">easybuilders/easybuild-easyblocks#1287</a>.<br>\nAs one of the lead developers and after spent many hours trying to get tame the TF build procedure using Bazel, I can safely say TensorFlow is in the top-10 of most difficult to install software from source, and that means a lot, trust me...</p>\n</li>\n<li>\n<p>The Spack project (<a href=\"https://spack.io/\" rel=\"nofollow\">https://spack.io/</a>) has looked into adding support for building TensorFlow from source, both with Bazel (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"183722281\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/spack/spack/issues/2043\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/spack/spack/pull/2043/hovercard\" href=\"https://github.com/spack/spack/pull/2043\">spack/spack#2043</a>) and CMake (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"210336178\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/spack/spack/issues/3244\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/spack/spack/pull/3244/hovercard\" href=\"https://github.com/spack/spack/pull/3244\">spack/spack#3244</a>), but has given up on it for now it seems. Spack supports over 2,500 different (scientific) software packages, but has a lot of trouble properly supporting TensorFlow, which is again really telling...</p>\n</li>\n</ul>\n<p>There's a strong incentive to build TensorFlow from source especially on CPU-only systems (not everyone has a fancy expensive GPU): we saw a factor 7 (7x, not 7%) speedup with a TF 1.4 built from source compared to the provided binary wheels on an Intel Haswell system, because our build was using AVX2, while the generically built wheel did not. 7x is <strong>HUGE</strong>, that's like back to the stone age without building from source. Running on GPUs was still significantly faster, but 'only' 8.3x (on a single K40x) rather than 60x. I suspect the different on the new Intel Skylake systems is going to be even bigger (I will try that soon).</p>\n<p>TensorFlow is quickly becoming a running joke in the software packaging/installation community, and I'm fairly sure that's not the intention...</p>", "body_text": "Since TensorFlow was one of the motivators for a talk I recently gave (at FOSDEM'18), I can't resist to mention it here... (thanks @dmacvicar for pointing out this issue to me)\n\"How To Make Package Managers Cry\"\n\nabstract + slides at https://fosdem.org/2018/schedule/event/how_to_make_package_managers_cry/\nrecording at https://www.youtube.com/watch?v=NSemlYagjIU\n\nI sort of understand the reluctance of the TF developers to switch away from Bazel or trying to maintain two different build systems, but I think it's important to realise that the current build procedure is a significant burden to many people who have tried to build TensorFlow from source for whatever reason (better performance on non-GPU systems, installing TF on an old OS (e.g. CentOS 6), etc.). And then I'm not even talking about getting Bazel installed first...\nProof:\n\n\nThe EasyBuild project (http://easybuilders.github.io/easybuild/), which already supports over 1,400 different (scientific) software packages (over 2,200 if you're also counting Python packages, R libraries, etc.) is still working on supporting the installation a built-from-source TensorFlow, see easybuilders/easybuild-easyblocks#1287.\nAs one of the lead developers and after spent many hours trying to get tame the TF build procedure using Bazel, I can safely say TensorFlow is in the top-10 of most difficult to install software from source, and that means a lot, trust me...\n\n\nThe Spack project (https://spack.io/) has looked into adding support for building TensorFlow from source, both with Bazel (see spack/spack#2043) and CMake (spack/spack#3244), but has given up on it for now it seems. Spack supports over 2,500 different (scientific) software packages, but has a lot of trouble properly supporting TensorFlow, which is again really telling...\n\n\nThere's a strong incentive to build TensorFlow from source especially on CPU-only systems (not everyone has a fancy expensive GPU): we saw a factor 7 (7x, not 7%) speedup with a TF 1.4 built from source compared to the provided binary wheels on an Intel Haswell system, because our build was using AVX2, while the generically built wheel did not. 7x is HUGE, that's like back to the stone age without building from source. Running on GPUs was still significantly faster, but 'only' 8.3x (on a single K40x) rather than 60x. I suspect the different on the new Intel Skylake systems is going to be even bigger (I will try that soon).\nTensorFlow is quickly becoming a running joke in the software packaging/installation community, and I'm fairly sure that's not the intention...", "body": "Since `TensorFlow` was one of the motivators for a talk I recently gave (at FOSDEM'18), I can't resist to mention it here... (thanks @dmacvicar for pointing out this issue to me)\r\n\r\n_\"How To Make Package Managers Cry\"_\r\n* abstract + slides at https://fosdem.org/2018/schedule/event/how_to_make_package_managers_cry/\r\n* recording at https://www.youtube.com/watch?v=NSemlYagjIU\r\n\r\nI sort of understand the reluctance of the TF developers to switch away from Bazel or trying to maintain two different build systems, but I think it's important to realise that the current build procedure is a significant burden to many people who have tried to build TensorFlow from source for whatever reason (better performance on non-GPU systems, installing TF on an old OS (e.g. CentOS 6), etc.). And then I'm not even talking about getting Bazel installed first...\r\n\r\nProof:\r\n\r\n* The EasyBuild project (http://easybuilders.github.io/easybuild/), which already supports over 1,400 different (scientific) software packages (over 2,200 if you're also counting Python packages, R libraries, etc.) is still working on supporting the installation a built-from-source TensorFlow, see https://github.com/easybuilders/easybuild-easyblocks/pull/1287.\r\n  As one of the lead developers and after spent many hours trying to get tame the TF build procedure using Bazel, I can safely say TensorFlow is in the top-10 of most difficult to install software from source, and that means a lot, trust me...\r\n\r\n* The Spack project (https://spack.io/) has looked into adding support for building TensorFlow from source, both with Bazel (see https://github.com/spack/spack/pull/2043) and CMake (https://github.com/spack/spack/pull/3244), but has given up on it for now it seems. Spack supports over 2,500 different (scientific) software packages, but has a lot of trouble properly supporting TensorFlow, which is again really telling...\r\n\r\nThere's a strong incentive to build TensorFlow from source especially on CPU-only systems (not everyone has a fancy expensive GPU): we saw a factor 7 (7x, not 7%) speedup with a TF 1.4 built from source compared to the provided binary wheels on an Intel Haswell system, because our build was using AVX2, while the generically built wheel did not. 7x is **HUGE**, that's like back to the stone age without building from source. Running on GPUs was still significantly faster, but 'only' 8.3x (on a single K40x) rather than 60x. I suspect the different on the new Intel Skylake systems is going to be even bigger (I will try that soon).\r\n\r\nTensorFlow is quickly becoming a running joke in the software packaging/installation community, and I'm fairly sure that's not the intention..."}