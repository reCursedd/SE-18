{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10149", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10149/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10149/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10149/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10149", "id": 230896165, "node_id": "MDU6SXNzdWUyMzA4OTYxNjU=", "number": 10149, "title": "tf.contrib.distributions: undocumented behaviour in Multinomial and Categorical", "user": {"login": "goldingn", "id": 4450731, "node_id": "MDQ6VXNlcjQ0NTA3MzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4450731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldingn", "html_url": "https://github.com/goldingn", "followers_url": "https://api.github.com/users/goldingn/followers", "following_url": "https://api.github.com/users/goldingn/following{/other_user}", "gists_url": "https://api.github.com/users/goldingn/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldingn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldingn/subscriptions", "organizations_url": "https://api.github.com/users/goldingn/orgs", "repos_url": "https://api.github.com/users/goldingn/repos", "events_url": "https://api.github.com/users/goldingn/events{/privacy}", "received_events_url": "https://api.github.com/users/goldingn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 284443156, "node_id": "MDU6TGFiZWwyODQ0NDMxNTY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:docs", "name": "type:docs", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-05-24T01:38:57Z", "updated_at": "2017-06-22T21:01:11Z", "closed_at": "2017-06-22T21:01:11Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes?</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: macOS Sierra 10.12.3</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary, via pip</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.1.0 (v1.1.0-rc0-61-g1ec6ed5)</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\ncategorical <span class=\"pl-k\">=</span> tf.contrib.distributions.Categorical(<span class=\"pl-v\">probs</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">0.25</span>, <span class=\"pl-c1\">0.5</span>, <span class=\"pl-c1\">0.25</span>])\nmultinomial <span class=\"pl-k\">=</span> tf.contrib.distributions.Multinomial(<span class=\"pl-v\">total_count</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>., <span class=\"pl-v\">probs</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">0.25</span>, <span class=\"pl-c1\">0.5</span>, <span class=\"pl-c1\">0.25</span>])\nmvn <span class=\"pl-k\">=</span> tf.contrib.distributions.MultivariateNormalDiag(<span class=\"pl-v\">loc</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">0</span>., <span class=\"pl-c1\">0</span>., <span class=\"pl-c1\">0</span>.], <span class=\"pl-v\">scale_diag</span><span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>., <span class=\"pl-c1\">1</span>., <span class=\"pl-c1\">1</span>.])\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> expected values (points 1 and 2)</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> The docs for Categorical say value should be float or double, but it expects an int</span>\ncategorical.log_prob([<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>]) \n<span class=\"pl-c\"><span class=\"pl-c\">#</span> &lt;tf.Tensor 'Categorical_2/log_prob/Neg:0' shape=(3,) dtype=float32&gt;</span>\ncategorical.log_prob([<span class=\"pl-c1\">0</span>., <span class=\"pl-c1\">0</span>., <span class=\"pl-c1\">1</span>.])\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> TypeError: Value passed to parameter 'labels' has DataType float32 not in list of allowed values: int32, int64</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> The docs for Categorical say value should be float or double, which is how it behaves (though this is unlike categorical)</span>\nmultinomial.log_prob([<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>]) \n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ValueError: Tensor conversion requested dtype int32 for Tensor with dtype float32: 'Tensor(\"Multinomial_2/log_prob/Log:0\", shape=(3,), dtype=float32)'</span>\nmultinomial.log_prob([<span class=\"pl-c1\">0</span>., <span class=\"pl-c1\">0</span>., <span class=\"pl-c1\">1</span>.])\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> &lt;tf.Tensor 'Multinomial_1/log_prob/sub:0' shape=() dtype=float32&gt;</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> output shape (points 3 and 4)</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> The docs for both say that the output should be:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> \"a Tensor of 'shape sample_shape(x) + self.batch_shape' with values of type self.dtype\"</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> though sample_shape doesn't seem to be relevant here, it's an argument to param_shapes() and sample()</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> for Categorical (with int value), the result is a vector, matching the shape of value</span>\ncategorical.log_prob([<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>]) \n<span class=\"pl-c\"><span class=\"pl-c\">#</span> &lt;tf.Tensor 'Categorical_2/log_prob/Neg:0' shape=(3,) dtype=float32&gt;</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> for Multinomial (with float value), the result is a scalar</span>\nmultinomial.log_prob([<span class=\"pl-c1\">0</span>., <span class=\"pl-c1\">0</span>., <span class=\"pl-c1\">1</span>.])\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> &lt;tf.Tensor 'Multinomial_1/log_prob/sub:0' shape=() dtype=float32&gt;</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> for Multivariate Normal the result is a scalar</span>\nmvn.log_prob([<span class=\"pl-c1\">0.1</span>, <span class=\"pl-c1\">0.2</span>, <span class=\"pl-c1\">0.3</span>])\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> &lt;tf.Tensor 'MultivariateNormalDiag_2/log_prob/add:0' shape=() dtype=float32&gt;</span></pre></div>\n<h3>Describe the problem</h3>\n<p>There are four related issues:</p>\n<ol>\n<li>\n<p>The expected type of <code>value</code> for the <code>log_prob()</code> method in <code>tf.contrib.distributions.Categorical</code> is inconsistent with the documentation.</p>\n</li>\n<li>\n<p>The expected values for <code>tf.contrib.distributions.Categorical</code> and <code>tf.contrib.distributions.Multinomial</code> are inconsistent with one another, which is odd as the categorical distribution is a special case of the multinomial, with <code>total_count  = 1</code></p>\n</li>\n<li>\n<p>The output dimensions for <code>tf.contrib.distributions.Categorical</code> and <code>tf.contrib.distributions.Multinomial</code> are inconsistent with the documentation</p>\n</li>\n<li>\n<p>The output dimensions for <code>tf.contrib.distributions.Categorical</code> are a vector, which doesn't really make sense for a multivariate distribution, and is inconsistent with <code>tf.contrib.distributions.Multinomial</code> and <code>tf.contrib.distributions.MultivariateNormal*</code></p>\n</li>\n</ol>\n<p>Details are in the code snippet above</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes?\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Sierra 10.12.3\nTensorFlow installed from (source or binary): binary, via pip\nTensorFlow version (use command below): 1.1.0 (v1.1.0-rc0-61-g1ec6ed5)\nBazel version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce:\n\nimport tensorflow as tf\ncategorical = tf.contrib.distributions.Categorical(probs = [0.25, 0.5, 0.25])\nmultinomial = tf.contrib.distributions.Multinomial(total_count = 1., probs = [0.25, 0.5, 0.25])\nmvn = tf.contrib.distributions.MultivariateNormalDiag(loc = [0., 0., 0.], scale_diag= [1., 1., 1.])\n\n# expected values (points 1 and 2)\n\n# The docs for Categorical say value should be float or double, but it expects an int\ncategorical.log_prob([0, 0, 1]) \n# <tf.Tensor 'Categorical_2/log_prob/Neg:0' shape=(3,) dtype=float32>\ncategorical.log_prob([0., 0., 1.])\n# TypeError: Value passed to parameter 'labels' has DataType float32 not in list of allowed values: int32, int64\n\n# The docs for Categorical say value should be float or double, which is how it behaves (though this is unlike categorical)\nmultinomial.log_prob([0, 0, 1]) \n# ValueError: Tensor conversion requested dtype int32 for Tensor with dtype float32: 'Tensor(\"Multinomial_2/log_prob/Log:0\", shape=(3,), dtype=float32)'\nmultinomial.log_prob([0., 0., 1.])\n# <tf.Tensor 'Multinomial_1/log_prob/sub:0' shape=() dtype=float32>\n\n# output shape (points 3 and 4)\n\n# The docs for both say that the output should be:\n# \"a Tensor of 'shape sample_shape(x) + self.batch_shape' with values of type self.dtype\"\n# though sample_shape doesn't seem to be relevant here, it's an argument to param_shapes() and sample()\n\n# for Categorical (with int value), the result is a vector, matching the shape of value\ncategorical.log_prob([0, 0, 1]) \n# <tf.Tensor 'Categorical_2/log_prob/Neg:0' shape=(3,) dtype=float32>\n\n# for Multinomial (with float value), the result is a scalar\nmultinomial.log_prob([0., 0., 1.])\n# <tf.Tensor 'Multinomial_1/log_prob/sub:0' shape=() dtype=float32>\n\n# for Multivariate Normal the result is a scalar\nmvn.log_prob([0.1, 0.2, 0.3])\n# <tf.Tensor 'MultivariateNormalDiag_2/log_prob/add:0' shape=() dtype=float32>\nDescribe the problem\nThere are four related issues:\n\n\nThe expected type of value for the log_prob() method in tf.contrib.distributions.Categorical is inconsistent with the documentation.\n\n\nThe expected values for tf.contrib.distributions.Categorical and tf.contrib.distributions.Multinomial are inconsistent with one another, which is odd as the categorical distribution is a special case of the multinomial, with total_count  = 1\n\n\nThe output dimensions for tf.contrib.distributions.Categorical and tf.contrib.distributions.Multinomial are inconsistent with the documentation\n\n\nThe output dimensions for tf.contrib.distributions.Categorical are a vector, which doesn't really make sense for a multivariate distribution, and is inconsistent with tf.contrib.distributions.Multinomial and tf.contrib.distributions.MultivariateNormal*\n\n\nDetails are in the code snippet above", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes?\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: macOS Sierra 10.12.3\r\n- **TensorFlow installed from (source or binary)**: binary, via pip\r\n- **TensorFlow version (use command below)**: 1.1.0 (v1.1.0-rc0-61-g1ec6ed5)\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**:\r\n\r\n```python\r\nimport tensorflow as tf\r\ncategorical = tf.contrib.distributions.Categorical(probs = [0.25, 0.5, 0.25])\r\nmultinomial = tf.contrib.distributions.Multinomial(total_count = 1., probs = [0.25, 0.5, 0.25])\r\nmvn = tf.contrib.distributions.MultivariateNormalDiag(loc = [0., 0., 0.], scale_diag= [1., 1., 1.])\r\n\r\n# expected values (points 1 and 2)\r\n\r\n# The docs for Categorical say value should be float or double, but it expects an int\r\ncategorical.log_prob([0, 0, 1]) \r\n# <tf.Tensor 'Categorical_2/log_prob/Neg:0' shape=(3,) dtype=float32>\r\ncategorical.log_prob([0., 0., 1.])\r\n# TypeError: Value passed to parameter 'labels' has DataType float32 not in list of allowed values: int32, int64\r\n\r\n# The docs for Categorical say value should be float or double, which is how it behaves (though this is unlike categorical)\r\nmultinomial.log_prob([0, 0, 1]) \r\n# ValueError: Tensor conversion requested dtype int32 for Tensor with dtype float32: 'Tensor(\"Multinomial_2/log_prob/Log:0\", shape=(3,), dtype=float32)'\r\nmultinomial.log_prob([0., 0., 1.])\r\n# <tf.Tensor 'Multinomial_1/log_prob/sub:0' shape=() dtype=float32>\r\n\r\n# output shape (points 3 and 4)\r\n\r\n# The docs for both say that the output should be:\r\n# \"a Tensor of 'shape sample_shape(x) + self.batch_shape' with values of type self.dtype\"\r\n# though sample_shape doesn't seem to be relevant here, it's an argument to param_shapes() and sample()\r\n\r\n# for Categorical (with int value), the result is a vector, matching the shape of value\r\ncategorical.log_prob([0, 0, 1]) \r\n# <tf.Tensor 'Categorical_2/log_prob/Neg:0' shape=(3,) dtype=float32>\r\n\r\n# for Multinomial (with float value), the result is a scalar\r\nmultinomial.log_prob([0., 0., 1.])\r\n# <tf.Tensor 'Multinomial_1/log_prob/sub:0' shape=() dtype=float32>\r\n\r\n# for Multivariate Normal the result is a scalar\r\nmvn.log_prob([0.1, 0.2, 0.3])\r\n# <tf.Tensor 'MultivariateNormalDiag_2/log_prob/add:0' shape=() dtype=float32>\r\n```\r\n\r\n### Describe the problem\r\nThere are four related issues:\r\n\r\n1. The expected type of `value` for the `log_prob()` method in `tf.contrib.distributions.Categorical` is inconsistent with the documentation.\r\n\r\n2. The expected values for `tf.contrib.distributions.Categorical` and `tf.contrib.distributions.Multinomial` are inconsistent with one another, which is odd as the categorical distribution is a special case of the multinomial, with `total_count  = 1`\r\n\r\n3. The output dimensions for `tf.contrib.distributions.Categorical` and `tf.contrib.distributions.Multinomial` are inconsistent with the documentation\r\n\r\n4. The output dimensions for `tf.contrib.distributions.Categorical` are a vector, which doesn't really make sense for a multivariate distribution, and is inconsistent with `tf.contrib.distributions.Multinomial` and `tf.contrib.distributions.MultivariateNormal*`\r\n\r\nDetails are in the code snippet above\r\n"}