{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/355624401", "html_url": "https://github.com/tensorflow/tensorflow/issues/14380#issuecomment-355624401", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14380", "id": 355624401, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTYyNDQwMQ==", "user": {"login": "ilya-biryukov", "id": 809452, "node_id": "MDQ6VXNlcjgwOTQ1Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/809452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilya-biryukov", "html_url": "https://github.com/ilya-biryukov", "followers_url": "https://api.github.com/users/ilya-biryukov/followers", "following_url": "https://api.github.com/users/ilya-biryukov/following{/other_user}", "gists_url": "https://api.github.com/users/ilya-biryukov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilya-biryukov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilya-biryukov/subscriptions", "organizations_url": "https://api.github.com/users/ilya-biryukov/orgs", "repos_url": "https://api.github.com/users/ilya-biryukov/repos", "events_url": "https://api.github.com/users/ilya-biryukov/events{/privacy}", "received_events_url": "https://api.github.com/users/ilya-biryukov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-05T18:09:12Z", "updated_at": "2018-01-05T18:10:52Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1511514\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jiayiliu\">@jiayiliu</a>, you could try applying the following patch locally via <code>git apply &lt;patch-name&gt;</code>:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/1607470/0001-Don-t-use-no-canonical-prefixes-when-getting-include.txt\">0001-Don-t-use-no-canonical-prefixes-when-getting-include.txt</a>. There's a good chance your issue will be fixed by it (see the explanation below).<br>\nAlso, have you considered using a recently added downloadable clang toolchain for cuda_clang configuration? Just configure with <code>TF_NEED_CUDA=1 TF_CUDA_CLANG=1 TF_DOWNLOAD_CLANG=1</code> (or choose the appropriate options when running <code>configure.py</code>).</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7946809\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gunan\">@gunan</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1511514\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jiayiliu\">@jiayiliu</a> I bet the difference is that bazel's <a href=\"https://github.com/bazelbuild/bazel/blob/39a23a0e3d63c538b8aa9f6f94a3a3916998e973/tools/cpp/unix_cc_configure.bzl#L151\">autoconf</a> (in CPU build) does not pass <code>-no-canonical-prefixes</code>, while tensorflow's <a href=\"https://github.com/tensorflow/tensorflow/blob/a1b155b6f51c539974e1bf73d0e0d15b388b9219/third_party/gpus/cuda_configure.bzl#L116\">GPU crosstool</a> passes <code>-no-canonical-prefixes</code>.</p>\n<p>I've checked it locally and it does not seem to break anything for me in gpu builds, so I guess we should just follow what bazel does and don't set <code>-no-canonical-prefixes</code> when getting the list of includes in <code>cuda_configure.bzl</code>. I'll send a patch for review with that change.</p>", "body_text": "@jiayiliu, you could try applying the following patch locally via git apply <patch-name>:\n0001-Don-t-use-no-canonical-prefixes-when-getting-include.txt. There's a good chance your issue will be fixed by it (see the explanation below).\nAlso, have you considered using a recently added downloadable clang toolchain for cuda_clang configuration? Just configure with TF_NEED_CUDA=1 TF_CUDA_CLANG=1 TF_DOWNLOAD_CLANG=1 (or choose the appropriate options when running configure.py).\n@gunan, @jiayiliu I bet the difference is that bazel's autoconf (in CPU build) does not pass -no-canonical-prefixes, while tensorflow's GPU crosstool passes -no-canonical-prefixes.\nI've checked it locally and it does not seem to break anything for me in gpu builds, so I guess we should just follow what bazel does and don't set -no-canonical-prefixes when getting the list of includes in cuda_configure.bzl. I'll send a patch for review with that change.", "body": "@jiayiliu, you could try applying the following patch locally via `git apply <patch-name>`:\r\n[0001-Don-t-use-no-canonical-prefixes-when-getting-include.txt](https://github.com/tensorflow/tensorflow/files/1607470/0001-Don-t-use-no-canonical-prefixes-when-getting-include.txt). There's a good chance your issue will be fixed by it (see the explanation below).\r\nAlso, have you considered using a recently added downloadable clang toolchain for cuda_clang configuration? Just configure with `TF_NEED_CUDA=1 TF_CUDA_CLANG=1 TF_DOWNLOAD_CLANG=1` (or choose the appropriate options when running `configure.py`).\r\n\r\n@gunan, @jiayiliu I bet the difference is that bazel's [autoconf](https://github.com/bazelbuild/bazel/blob/39a23a0e3d63c538b8aa9f6f94a3a3916998e973/tools/cpp/unix_cc_configure.bzl#L151) (in CPU build) does not pass `-no-canonical-prefixes`, while tensorflow's [GPU crosstool](https://github.com/tensorflow/tensorflow/blob/a1b155b6f51c539974e1bf73d0e0d15b388b9219/third_party/gpus/cuda_configure.bzl#L116) passes `-no-canonical-prefixes`.\r\n\r\nI've checked it locally and it does not seem to break anything for me in gpu builds, so I guess we should just follow what bazel does and don't set `-no-canonical-prefixes` when getting the list of includes in `cuda_configure.bzl`. I'll send a patch for review with that change.\r\n\r\n  "}