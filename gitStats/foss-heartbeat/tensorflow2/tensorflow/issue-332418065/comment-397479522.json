{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/397479522", "html_url": "https://github.com/tensorflow/tensorflow/issues/20021#issuecomment-397479522", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20021", "id": 397479522, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzQ3OTUyMg==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-15T00:38:51Z", "updated_at": "2018-06-15T00:38:51Z", "author_association": "MEMBER", "body_html": "<p>Thanks for the report <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10752166\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/DHZS\">@DHZS</a> and investigation <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> .<br>\nWhile we dig into an appropriate fix, a quick workaround would be to explicitly include a <code>with tf.device(\"CPU:0\")</code> in your py func, or just add a <code>.cpu()</code> to the outputs to ensure that the returned tensors are in CPU. So something like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">map_fn</span>(<span class=\"pl-smi\">n</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">fn</span>(<span class=\"pl-smi\">nn</span>):\n        int_tensor <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">1</span>, tf.int32)\n        float_tensor <span class=\"pl-k\">=</span> tf.cast(int_tensor, tf.float32)\n        <span class=\"pl-k\">return</span> float_tensor.cpu()  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Notice the .cpu()</span>\n    <span class=\"pl-k\">return</span> tfe.py_func(fn, [n], [tf.float32])</pre></div>", "body_text": "Thanks for the report @DHZS and investigation @mrry .\nWhile we dig into an appropriate fix, a quick workaround would be to explicitly include a with tf.device(\"CPU:0\") in your py func, or just add a .cpu() to the outputs to ensure that the returned tensors are in CPU. So something like:\ndef map_fn(n):\n    def fn(nn):\n        int_tensor = tf.constant(1, tf.int32)\n        float_tensor = tf.cast(int_tensor, tf.float32)\n        return float_tensor.cpu()  # Notice the .cpu()\n    return tfe.py_func(fn, [n], [tf.float32])", "body": "Thanks for the report @DHZS and investigation @mrry .\r\nWhile we dig into an appropriate fix, a quick workaround would be to explicitly include a `with tf.device(\"CPU:0\")` in your py func, or just add a `.cpu()` to the outputs to ensure that the returned tensors are in CPU. So something like:\r\n\r\n```python\r\ndef map_fn(n):\r\n    def fn(nn):\r\n        int_tensor = tf.constant(1, tf.int32)\r\n        float_tensor = tf.cast(int_tensor, tf.float32)\r\n        return float_tensor.cpu()  # Notice the .cpu()\r\n    return tfe.py_func(fn, [n], [tf.float32])\r\n```"}