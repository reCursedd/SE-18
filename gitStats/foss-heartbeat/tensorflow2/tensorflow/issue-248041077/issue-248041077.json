{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12040", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12040/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12040/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12040/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12040", "id": 248041077, "node_id": "MDU6SXNzdWUyNDgwNDEwNzc=", "number": 12040, "title": "NaNs only on GPU with large convolution kernel", "user": {"login": "sdschulze", "id": 30729315, "node_id": "MDQ6VXNlcjMwNzI5MzE1", "avatar_url": "https://avatars0.githubusercontent.com/u/30729315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdschulze", "html_url": "https://github.com/sdschulze", "followers_url": "https://api.github.com/users/sdschulze/followers", "following_url": "https://api.github.com/users/sdschulze/following{/other_user}", "gists_url": "https://api.github.com/users/sdschulze/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdschulze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdschulze/subscriptions", "organizations_url": "https://api.github.com/users/sdschulze/orgs", "repos_url": "https://api.github.com/users/sdschulze/repos", "events_url": "https://api.github.com/users/sdschulze/events{/privacy}", "received_events_url": "https://api.github.com/users/sdschulze/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-08-04T15:32:52Z", "updated_at": "2018-01-18T19:41:24Z", "closed_at": "2018-01-18T19:41:24Z", "author_association": "NONE", "body_html": "<p>Consider the following (silly) autoencoder-style network, which performs a strided convolution followed by a transposed convolution:</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\nn = 100\nm = 24\nk = 14\n\nW1 = tf.Variable(tf.truncated_normal([1, k, 32, 64], stddev=1e-1,\n                                     dtype=tf.float32))\nb1 = tf.Variable(tf.truncated_normal([64], stddev=1e-1,\n                                     dtype=tf.float32))\nW2 = tf.Variable(tf.truncated_normal([1, k, 32, 64], stddev=1e-1,\n                                     dtype=tf.float32))\nb2 = tf.Variable(tf.truncated_normal([1], stddev=1e-1,\n                                     dtype=tf.float32))\n\nx = tf.placeholder(tf.float32, [n, 1, m, 32])\nx_1 = tf.nn.tanh(tf.nn.conv2d(x, W1,\n                              [1, 1, 8, 1], 'SAME')) + b1\nx_2 = tf.nn.conv2d_transpose(x_1, W2, [n, 1, m, 32],\n                             [1, 1, 8, 1], 'SAME') + b2\n\nloss = tf.nn.l2_loss(x - x_2)\n\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(loss)\ncheck_step = tf.add_check_numerics_ops()\n\nsess = tf.InteractiveSession()\nsess.run(tf.global_variables_initializer())\n\nfor i in range(10000):\n    _, _, loss_val = \\\n        sess.run([train_step, check_step, loss],\n                 feed_dict={x: np.random.randn(n, 1, m, 32)})\n\n    print(\"Iteration: {}; loss: {}\".format(i, loss_val))\n</code></pre>\n<p>On the CPU, this runs fine.  Using CUDA with k &gt;= 14, though, I reproducibly get the following error:</p>\n<pre><code>name: GeForce GTX 1080 Ti\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.582\npciBusID 0000:82:00.0\nTotal memory: 10.91GiB\nFree memory: 10.76GiB\n2017-08-04 17:09:01.683907: I tensorflow/core/common_runtime/gpu/gpu_device.cc:961] DMA: 0\n2017-08-04 17:09:01.683916: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] 0:   Y\n2017-08-04 17:09:01.683927: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Creating TensorFlow device (/gpu:0) -&gt; (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:82:00.0)\n2017-08-04 17:09:03.022214: E tensorflow/core/kernels/check_numerics_op.cc:157] abnormal_detected_host @0x1020d800b00 = {1, 0} gradients/Conv2D_grad/Conv2DBackpropFilter:0\nTraceback (most recent call last):\n  File \"mintrans.py\", line 35, in &lt;module&gt;\n    feed_dict={x: np.random.randn(n, 1, m, 32)})\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 789, in run\n    run_metadata_ptr)\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 997, in _run\n    feed_dict_string, options, run_metadata)\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1132, in _do_run\n    target_list, options, run_metadata)\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1152, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: gradients/Conv2D_grad/Conv2DBackpropFilter:0 : Tensor had NaN values\n         [[Node: CheckNumerics_60 = CheckNumerics[T=DT_FLOAT, message=\"gradients/Conv2D_grad/Conv2DBackpropFilter:0\", _device=\"/job:localhost/replica:0/task:0/gpu:0\"](gradients/Conv2D_grad/Conv2DBackpropFilter, ^CheckNumerics_59)]]\n  \nCaused by op u'CheckNumerics_60', defined at:\n  File \"mintrans.py\", line 27, in &lt;module&gt;\n    check_step = tf.add_check_numerics_ops()\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/ops/numerics.py\", line 68, in add_check_numerics_ops\n    check_op = [array_ops.check_numerics(output, message=message)]\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 415, in check_numerics\n    message=message, name=name)\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 767, in apply_op\n    op_def=op_def)\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 2506, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1269, in __init__\n    self._traceback = _extract_stack()\n  \nInvalidArgumentError (see above for traceback): gradients/Conv2D_grad/Conv2DBackpropFilter:0 : Tensor had NaN values\n         [[Node: CheckNumerics_60 = CheckNumerics[T=DT_FLOAT, message=\"gradients/Conv2D_grad/Conv2DBackpropFilter:0\", _device=\"/job:localhost/replica:0/task:0/gpu:0\"](gradients/Conv2D_grad/Conv2DBackpropFilter, ^CheckNumerics_59)]]\n</code></pre>\n<p>This code is the minimal example that I could reproduce the error with.  I am running tensorflow-gpu 1.2.1, installed via pip on Ubuntu 16.04.2, with Python version 2.7.12.  CUDA is 8.0.61-1 from the nVidia repo, and cuDNN is 5.1.10.  My GPU is an nVidia GTX 1080 Ti with 11172 MiB of memory.</p>\n<p>To reproduce the error, run the above code with CUDA enabled.</p>\n<p>My suspicion is that when the kernel is too large with respect to the input or the output of the strided convolution, a bug is triggered.  I am not entirely sure how the size of the kernel must relate to the other convolution parameters, but I could produce errors both in the conv2d and the conv2d_transpose op.</p>", "body_text": "Consider the following (silly) autoencoder-style network, which performs a strided convolution followed by a transposed convolution:\nimport numpy as np\nimport tensorflow as tf\n\nn = 100\nm = 24\nk = 14\n\nW1 = tf.Variable(tf.truncated_normal([1, k, 32, 64], stddev=1e-1,\n                                     dtype=tf.float32))\nb1 = tf.Variable(tf.truncated_normal([64], stddev=1e-1,\n                                     dtype=tf.float32))\nW2 = tf.Variable(tf.truncated_normal([1, k, 32, 64], stddev=1e-1,\n                                     dtype=tf.float32))\nb2 = tf.Variable(tf.truncated_normal([1], stddev=1e-1,\n                                     dtype=tf.float32))\n\nx = tf.placeholder(tf.float32, [n, 1, m, 32])\nx_1 = tf.nn.tanh(tf.nn.conv2d(x, W1,\n                              [1, 1, 8, 1], 'SAME')) + b1\nx_2 = tf.nn.conv2d_transpose(x_1, W2, [n, 1, m, 32],\n                             [1, 1, 8, 1], 'SAME') + b2\n\nloss = tf.nn.l2_loss(x - x_2)\n\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(loss)\ncheck_step = tf.add_check_numerics_ops()\n\nsess = tf.InteractiveSession()\nsess.run(tf.global_variables_initializer())\n\nfor i in range(10000):\n    _, _, loss_val = \\\n        sess.run([train_step, check_step, loss],\n                 feed_dict={x: np.random.randn(n, 1, m, 32)})\n\n    print(\"Iteration: {}; loss: {}\".format(i, loss_val))\n\nOn the CPU, this runs fine.  Using CUDA with k >= 14, though, I reproducibly get the following error:\nname: GeForce GTX 1080 Ti\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.582\npciBusID 0000:82:00.0\nTotal memory: 10.91GiB\nFree memory: 10.76GiB\n2017-08-04 17:09:01.683907: I tensorflow/core/common_runtime/gpu/gpu_device.cc:961] DMA: 0\n2017-08-04 17:09:01.683916: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] 0:   Y\n2017-08-04 17:09:01.683927: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:82:00.0)\n2017-08-04 17:09:03.022214: E tensorflow/core/kernels/check_numerics_op.cc:157] abnormal_detected_host @0x1020d800b00 = {1, 0} gradients/Conv2D_grad/Conv2DBackpropFilter:0\nTraceback (most recent call last):\n  File \"mintrans.py\", line 35, in <module>\n    feed_dict={x: np.random.randn(n, 1, m, 32)})\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 789, in run\n    run_metadata_ptr)\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 997, in _run\n    feed_dict_string, options, run_metadata)\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1132, in _do_run\n    target_list, options, run_metadata)\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1152, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: gradients/Conv2D_grad/Conv2DBackpropFilter:0 : Tensor had NaN values\n         [[Node: CheckNumerics_60 = CheckNumerics[T=DT_FLOAT, message=\"gradients/Conv2D_grad/Conv2DBackpropFilter:0\", _device=\"/job:localhost/replica:0/task:0/gpu:0\"](gradients/Conv2D_grad/Conv2DBackpropFilter, ^CheckNumerics_59)]]\n  \nCaused by op u'CheckNumerics_60', defined at:\n  File \"mintrans.py\", line 27, in <module>\n    check_step = tf.add_check_numerics_ops()\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/ops/numerics.py\", line 68, in add_check_numerics_ops\n    check_op = [array_ops.check_numerics(output, message=message)]\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 415, in check_numerics\n    message=message, name=name)\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 767, in apply_op\n    op_def=op_def)\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 2506, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1269, in __init__\n    self._traceback = _extract_stack()\n  \nInvalidArgumentError (see above for traceback): gradients/Conv2D_grad/Conv2DBackpropFilter:0 : Tensor had NaN values\n         [[Node: CheckNumerics_60 = CheckNumerics[T=DT_FLOAT, message=\"gradients/Conv2D_grad/Conv2DBackpropFilter:0\", _device=\"/job:localhost/replica:0/task:0/gpu:0\"](gradients/Conv2D_grad/Conv2DBackpropFilter, ^CheckNumerics_59)]]\n\nThis code is the minimal example that I could reproduce the error with.  I am running tensorflow-gpu 1.2.1, installed via pip on Ubuntu 16.04.2, with Python version 2.7.12.  CUDA is 8.0.61-1 from the nVidia repo, and cuDNN is 5.1.10.  My GPU is an nVidia GTX 1080 Ti with 11172 MiB of memory.\nTo reproduce the error, run the above code with CUDA enabled.\nMy suspicion is that when the kernel is too large with respect to the input or the output of the strided convolution, a bug is triggered.  I am not entirely sure how the size of the kernel must relate to the other convolution parameters, but I could produce errors both in the conv2d and the conv2d_transpose op.", "body": "Consider the following (silly) autoencoder-style network, which performs a strided convolution followed by a transposed convolution:\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nn = 100\r\nm = 24\r\nk = 14\r\n\r\nW1 = tf.Variable(tf.truncated_normal([1, k, 32, 64], stddev=1e-1,\r\n                                     dtype=tf.float32))\r\nb1 = tf.Variable(tf.truncated_normal([64], stddev=1e-1,\r\n                                     dtype=tf.float32))\r\nW2 = tf.Variable(tf.truncated_normal([1, k, 32, 64], stddev=1e-1,\r\n                                     dtype=tf.float32))\r\nb2 = tf.Variable(tf.truncated_normal([1], stddev=1e-1,\r\n                                     dtype=tf.float32))\r\n\r\nx = tf.placeholder(tf.float32, [n, 1, m, 32])\r\nx_1 = tf.nn.tanh(tf.nn.conv2d(x, W1,\r\n                              [1, 1, 8, 1], 'SAME')) + b1\r\nx_2 = tf.nn.conv2d_transpose(x_1, W2, [n, 1, m, 32],\r\n                             [1, 1, 8, 1], 'SAME') + b2\r\n\r\nloss = tf.nn.l2_loss(x - x_2)\r\n\r\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(loss)\r\ncheck_step = tf.add_check_numerics_ops()\r\n\r\nsess = tf.InteractiveSession()\r\nsess.run(tf.global_variables_initializer())\r\n\r\nfor i in range(10000):\r\n    _, _, loss_val = \\\r\n        sess.run([train_step, check_step, loss],\r\n                 feed_dict={x: np.random.randn(n, 1, m, 32)})\r\n\r\n    print(\"Iteration: {}; loss: {}\".format(i, loss_val))\r\n```\r\nOn the CPU, this runs fine.  Using CUDA with k >= 14, though, I reproducibly get the following error:\r\n```\r\nname: GeForce GTX 1080 Ti\r\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.582\r\npciBusID 0000:82:00.0\r\nTotal memory: 10.91GiB\r\nFree memory: 10.76GiB\r\n2017-08-04 17:09:01.683907: I tensorflow/core/common_runtime/gpu/gpu_device.cc:961] DMA: 0\r\n2017-08-04 17:09:01.683916: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] 0:   Y\r\n2017-08-04 17:09:01.683927: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:82:00.0)\r\n2017-08-04 17:09:03.022214: E tensorflow/core/kernels/check_numerics_op.cc:157] abnormal_detected_host @0x1020d800b00 = {1, 0} gradients/Conv2D_grad/Conv2DBackpropFilter:0\r\nTraceback (most recent call last):\r\n  File \"mintrans.py\", line 35, in <module>\r\n    feed_dict={x: np.random.randn(n, 1, m, 32)})\r\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 789, in run\r\n    run_metadata_ptr)\r\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 997, in _run\r\n    feed_dict_string, options, run_metadata)\r\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1132, in _do_run\r\n    target_list, options, run_metadata)\r\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1152, in _do_call\r\n    raise type(e)(node_def, op, message)\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: gradients/Conv2D_grad/Conv2DBackpropFilter:0 : Tensor had NaN values\r\n         [[Node: CheckNumerics_60 = CheckNumerics[T=DT_FLOAT, message=\"gradients/Conv2D_grad/Conv2DBackpropFilter:0\", _device=\"/job:localhost/replica:0/task:0/gpu:0\"](gradients/Conv2D_grad/Conv2DBackpropFilter, ^CheckNumerics_59)]]\r\n  \r\nCaused by op u'CheckNumerics_60', defined at:\r\n  File \"mintrans.py\", line 27, in <module>\r\n    check_step = tf.add_check_numerics_ops()\r\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/ops/numerics.py\", line 68, in add_check_numerics_ops\r\n    check_op = [array_ops.check_numerics(output, message=message)]\r\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 415, in check_numerics\r\n    message=message, name=name)\r\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 767, in apply_op\r\n    op_def=op_def)\r\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 2506, in create_op\r\n    original_op=self._default_original_op, op_def=op_def)\r\n  File \"/home/sschulze/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1269, in __init__\r\n    self._traceback = _extract_stack()\r\n  \r\nInvalidArgumentError (see above for traceback): gradients/Conv2D_grad/Conv2DBackpropFilter:0 : Tensor had NaN values\r\n         [[Node: CheckNumerics_60 = CheckNumerics[T=DT_FLOAT, message=\"gradients/Conv2D_grad/Conv2DBackpropFilter:0\", _device=\"/job:localhost/replica:0/task:0/gpu:0\"](gradients/Conv2D_grad/Conv2DBackpropFilter, ^CheckNumerics_59)]]\r\n```\r\n\r\nThis code is the minimal example that I could reproduce the error with.  I am running tensorflow-gpu 1.2.1, installed via pip on Ubuntu 16.04.2, with Python version 2.7.12.  CUDA is 8.0.61-1 from the nVidia repo, and cuDNN is 5.1.10.  My GPU is an nVidia GTX 1080 Ti with 11172 MiB of memory.\r\n\r\nTo reproduce the error, run the above code with CUDA enabled.\r\n\r\nMy suspicion is that when the kernel is too large with respect to the input or the output of the strided convolution, a bug is triggered.  I am not entirely sure how the size of the kernel must relate to the other convolution parameters, but I could produce errors both in the conv2d and the conv2d_transpose op."}