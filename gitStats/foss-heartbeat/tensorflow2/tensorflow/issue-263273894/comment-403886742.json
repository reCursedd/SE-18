{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/403886742", "html_url": "https://github.com/tensorflow/tensorflow/issues/13511#issuecomment-403886742", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13511", "id": 403886742, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzg4Njc0Mg==", "user": {"login": "nataliaponomareva", "id": 4313109, "node_id": "MDQ6VXNlcjQzMTMxMDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4313109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nataliaponomareva", "html_url": "https://github.com/nataliaponomareva", "followers_url": "https://api.github.com/users/nataliaponomareva/followers", "following_url": "https://api.github.com/users/nataliaponomareva/following{/other_user}", "gists_url": "https://api.github.com/users/nataliaponomareva/gists{/gist_id}", "starred_url": "https://api.github.com/users/nataliaponomareva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nataliaponomareva/subscriptions", "organizations_url": "https://api.github.com/users/nataliaponomareva/orgs", "repos_url": "https://api.github.com/users/nataliaponomareva/repos", "events_url": "https://api.github.com/users/nataliaponomareva/events{/privacy}", "received_events_url": "https://api.github.com/users/nataliaponomareva/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-10T16:34:15Z", "updated_at": "2018-07-10T16:34:15Z", "author_association": "NONE", "body_html": "<p>For the contrib (not core version), multi dimensional is supported. Take a look at<br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/boosted_trees/examples/mnist.py\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/boosted_trees/examples/mnist.py</a> - it is a 10-dimensional multiclass problem. If you have any multidimensional problem (but not a multiclass, for which a wrapper already exists), you would need to</p>\n<ul>\n<li>create a custom head with a loss</li>\n<li>pass it into the GradientBoostedTreeEstimator</li>\n</ul>\n<p>Something like this</p>\n<pre><code>loss_fn =  ... per example loss you want, that supports multi dimensional output. \nlearner_config.multi_class_strategy = (\n      learner_pb2.LearnerConfig.DIAGONAL_HESSIAN)\nmetrics_fn =  ... ur metrics fn\n# Use custom loss head\nhead = custom_loss_head.CustomLossHead(\n      loss_fn=loss_fn,\n      link_fn=tf.identity, # or what ever you need\n      logit_dimension=logit_dim, # your dimension of output\n      metrics_fn=metrics_fn)\nestimator = GradientBoostedDecisionTreeEstimator(\n      learner_config=learner_config,\n      head=head,\n....)\n</code></pre>", "body_text": "For the contrib (not core version), multi dimensional is supported. Take a look at\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/boosted_trees/examples/mnist.py - it is a 10-dimensional multiclass problem. If you have any multidimensional problem (but not a multiclass, for which a wrapper already exists), you would need to\n\ncreate a custom head with a loss\npass it into the GradientBoostedTreeEstimator\n\nSomething like this\nloss_fn =  ... per example loss you want, that supports multi dimensional output. \nlearner_config.multi_class_strategy = (\n      learner_pb2.LearnerConfig.DIAGONAL_HESSIAN)\nmetrics_fn =  ... ur metrics fn\n# Use custom loss head\nhead = custom_loss_head.CustomLossHead(\n      loss_fn=loss_fn,\n      link_fn=tf.identity, # or what ever you need\n      logit_dimension=logit_dim, # your dimension of output\n      metrics_fn=metrics_fn)\nestimator = GradientBoostedDecisionTreeEstimator(\n      learner_config=learner_config,\n      head=head,\n....)", "body": "For the contrib (not core version), multi dimensional is supported. Take a look at \r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/boosted_trees/examples/mnist.py - it is a 10-dimensional multiclass problem. If you have any multidimensional problem (but not a multiclass, for which a wrapper already exists), you would need to \r\n- create a custom head with a loss\r\n- pass it into the GradientBoostedTreeEstimator\r\n\r\nSomething like this\r\n```\r\nloss_fn =  ... per example loss you want, that supports multi dimensional output. \r\nlearner_config.multi_class_strategy = (\r\n      learner_pb2.LearnerConfig.DIAGONAL_HESSIAN)\r\nmetrics_fn =  ... ur metrics fn\r\n# Use custom loss head\r\nhead = custom_loss_head.CustomLossHead(\r\n      loss_fn=loss_fn,\r\n      link_fn=tf.identity, # or what ever you need\r\n      logit_dimension=logit_dim, # your dimension of output\r\n      metrics_fn=metrics_fn)\r\nestimator = GradientBoostedDecisionTreeEstimator(\r\n      learner_config=learner_config,\r\n      head=head,\r\n....)\r\n```\r\n\r\n"}