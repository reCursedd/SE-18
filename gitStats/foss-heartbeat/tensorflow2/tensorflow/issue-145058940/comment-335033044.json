{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/335033044", "html_url": "https://github.com/tensorflow/tensorflow/issues/1736#issuecomment-335033044", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1736", "id": 335033044, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTAzMzA0NA==", "user": {"login": "MichelHalmes", "id": 7914219, "node_id": "MDQ6VXNlcjc5MTQyMTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7914219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichelHalmes", "html_url": "https://github.com/MichelHalmes", "followers_url": "https://api.github.com/users/MichelHalmes/followers", "following_url": "https://api.github.com/users/MichelHalmes/following{/other_user}", "gists_url": "https://api.github.com/users/MichelHalmes/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichelHalmes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichelHalmes/subscriptions", "organizations_url": "https://api.github.com/users/MichelHalmes/orgs", "repos_url": "https://api.github.com/users/MichelHalmes/repos", "events_url": "https://api.github.com/users/MichelHalmes/events{/privacy}", "received_events_url": "https://api.github.com/users/MichelHalmes/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-08T19:49:42Z", "updated_at": "2017-10-08T19:56:04Z", "author_association": "NONE", "body_html": "<p>Good day,</p>\n<p>Is there any progress on this?</p>\n<p>As pointed out by carlthome the implementation of <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=324645\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/OlavHN\">@OlavHN</a> does not compute distinct population statistics per timestep. To my understanding, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1595907\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/carlthome\">@carlthome</a>'s implementation neither. To compute the timestep he uses:</p>\n<div class=\"highlight highlight-source-python\"><pre>new_sequences <span class=\"pl-k\">=</span> tf.placeholder(tf.bool)\n<span class=\"pl-c1\">...</span>\nincrement_op <span class=\"pl-k\">=</span> tf.cond(<span class=\"pl-c1\">self</span>._new_sequences,\n                               <span class=\"pl-k\">lambda</span>: tf.assign(timestep, <span class=\"pl-c1\">0</span>),\n                               <span class=\"pl-k\">lambda</span>: tf.add(timestep, <span class=\"pl-c1\">1</span>))</pre></div>\n<p>This basically means that <code>new_sequences</code> is constant per run and <code>timestep</code> will either be 0 or grow indefinitely.</p>\n<p>I've tried to implement it myself but getting a variable to reflect the RNN-timestep in the <code>call()</code>  is tricky. Does anyone have idea on how to overcome this issue?<br>\nIs there maybe a tensor from the outside one could access by name? Or to re-initialize a variable for every run? Or to modify the value of a placeholder from within the graph?<br>\nI'd be happy to take it from there...</p>\n<p>Thanks in advance! :-)</p>", "body_text": "Good day,\nIs there any progress on this?\nAs pointed out by carlthome the implementation of @OlavHN does not compute distinct population statistics per timestep. To my understanding, @carlthome's implementation neither. To compute the timestep he uses:\nnew_sequences = tf.placeholder(tf.bool)\n...\nincrement_op = tf.cond(self._new_sequences,\n                               lambda: tf.assign(timestep, 0),\n                               lambda: tf.add(timestep, 1))\nThis basically means that new_sequences is constant per run and timestep will either be 0 or grow indefinitely.\nI've tried to implement it myself but getting a variable to reflect the RNN-timestep in the call()  is tricky. Does anyone have idea on how to overcome this issue?\nIs there maybe a tensor from the outside one could access by name? Or to re-initialize a variable for every run? Or to modify the value of a placeholder from within the graph?\nI'd be happy to take it from there...\nThanks in advance! :-)", "body": "Good day,\r\n\r\nIs there any progress on this?\r\n\r\nAs pointed out by carlthome the implementation of @OlavHN does not compute distinct population statistics per timestep. To my understanding, @carlthome's implementation neither. To compute the timestep he uses:\r\n```python\r\nnew_sequences = tf.placeholder(tf.bool)\r\n...\r\nincrement_op = tf.cond(self._new_sequences,\r\n                               lambda: tf.assign(timestep, 0),\r\n                               lambda: tf.add(timestep, 1))\r\n```\r\nThis basically means that `new_sequences` is constant per run and `timestep` will either be 0 or grow indefinitely.\r\n\r\nI've tried to implement it myself but getting a variable to reflect the RNN-timestep in the `call()`  is tricky. Does anyone have idea on how to overcome this issue? \r\nIs there maybe a tensor from the outside one could access by name? Or to re-initialize a variable for every run? Or to modify the value of a placeholder from within the graph?\r\nI'd be happy to take it from there...\r\n\r\nThanks in advance! :-)"}