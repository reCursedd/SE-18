{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/266963225", "html_url": "https://github.com/tensorflow/tensorflow/pull/5802#issuecomment-266963225", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5802", "id": 266963225, "node_id": "MDEyOklzc3VlQ29tbWVudDI2Njk2MzIyNQ==", "user": {"login": "thjashin", "id": 5267554, "node_id": "MDQ6VXNlcjUyNjc1NTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5267554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thjashin", "html_url": "https://github.com/thjashin", "followers_url": "https://api.github.com/users/thjashin/followers", "following_url": "https://api.github.com/users/thjashin/following{/other_user}", "gists_url": "https://api.github.com/users/thjashin/gists{/gist_id}", "starred_url": "https://api.github.com/users/thjashin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thjashin/subscriptions", "organizations_url": "https://api.github.com/users/thjashin/orgs", "repos_url": "https://api.github.com/users/thjashin/repos", "events_url": "https://api.github.com/users/thjashin/events{/privacy}", "received_events_url": "https://api.github.com/users/thjashin/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-14T07:30:58Z", "updated_at": "2016-12-14T13:18:03Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> Thanks for the question. <strong>The short answer</strong> is:<br>\nThey cannot do exactly the same thing due to bugs, but to fix bugs touches the design. While using meta_graph, from my view, is the most elegant way to implement and maintain this feature.</p>\n<p><strong>Long answer</strong>:<br>\nI used to rely on <code>tf.contrib.graph_editor</code>. It seems to have everything. But I have to say it's still buggy, and maintenance seems to have stopped for some time. The <code>graph_replace</code> function provided in <code>tf.contrib.graph_editor</code> tries to do similar things with this PR, however, there are big cases it fails, for example, when one node in the given replacements is a descendant of another, the copied subgraph won't cover the uprooting graph of the descendant node when there are target nodes between this two nodes. I tried to fix but it turned out things were not easy under the SubgraphView framework. This is not the only problem, you could see that I had a PR ( <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"187720497\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/5451\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/5451/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/5451\">#5451</a> ) merged on problems about control inputs. It's still an easy one to fix, but there exist much harder ones.</p>\n<p>Though this owes much to lack of extensive tests in <code>tf.contrib</code> modules, I'm still wondering whether <code>tf.contrib.graph_editor</code> is the right way to achieve this clone() ability. Then I found the <code>_control_flow_context</code> problem, which I raised in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"188017183\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/5477\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/5477/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/5477\">#5477</a> . This is because copying operations in <code>tf.contrib.graph_editor</code> is by directly copying members of a python objects. In that issue <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=12770037\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sherrym\">@sherrym</a> pointed out to me that I could use <code>meta_graph</code> utilities to achieve what I want. So I made this trial. Though I still don't succeed in copying control flow contexts, I find the code more elegant in this way, compared to implementations in <code>tf.contrib.graph_editor</code>.</p>\n<p>I believe this is at least a right direction to implement this theano equilvalent. And I also want to point out that <strong>this function is of great value to people building higher level libraries based on Tensorflow, it helps on operation level reuse (which cannot be achieved either by using name scope or by experimental function utilities in TF)</strong>.</p>", "body_text": "@ebrevdo Thanks for the question. The short answer is:\nThey cannot do exactly the same thing due to bugs, but to fix bugs touches the design. While using meta_graph, from my view, is the most elegant way to implement and maintain this feature.\nLong answer:\nI used to rely on tf.contrib.graph_editor. It seems to have everything. But I have to say it's still buggy, and maintenance seems to have stopped for some time. The graph_replace function provided in tf.contrib.graph_editor tries to do similar things with this PR, however, there are big cases it fails, for example, when one node in the given replacements is a descendant of another, the copied subgraph won't cover the uprooting graph of the descendant node when there are target nodes between this two nodes. I tried to fix but it turned out things were not easy under the SubgraphView framework. This is not the only problem, you could see that I had a PR ( #5451 ) merged on problems about control inputs. It's still an easy one to fix, but there exist much harder ones.\nThough this owes much to lack of extensive tests in tf.contrib modules, I'm still wondering whether tf.contrib.graph_editor is the right way to achieve this clone() ability. Then I found the _control_flow_context problem, which I raised in #5477 . This is because copying operations in tf.contrib.graph_editor is by directly copying members of a python objects. In that issue @sherrym pointed out to me that I could use meta_graph utilities to achieve what I want. So I made this trial. Though I still don't succeed in copying control flow contexts, I find the code more elegant in this way, compared to implementations in tf.contrib.graph_editor.\nI believe this is at least a right direction to implement this theano equilvalent. And I also want to point out that this function is of great value to people building higher level libraries based on Tensorflow, it helps on operation level reuse (which cannot be achieved either by using name scope or by experimental function utilities in TF).", "body": "@ebrevdo Thanks for the question. **The short answer** is:\r\nThey cannot do exactly the same thing due to bugs, but to fix bugs touches the design. While using meta_graph, from my view, is the most elegant way to implement and maintain this feature.\r\n\r\n**Long answer**:\r\nI used to rely on `tf.contrib.graph_editor`. It seems to have everything. But I have to say it's still buggy, and maintenance seems to have stopped for some time. The `graph_replace` function provided in `tf.contrib.graph_editor` tries to do similar things with this PR, however, there are big cases it fails, for example, when one node in the given replacements is a descendant of another, the copied subgraph won't cover the uprooting graph of the descendant node when there are target nodes between this two nodes. I tried to fix but it turned out things were not easy under the SubgraphView framework. This is not the only problem, you could see that I had a PR ( #5451 ) merged on problems about control inputs. It's still an easy one to fix, but there exist much harder ones.\r\n\r\nThough this owes much to lack of extensive tests in `tf.contrib` modules, I'm still wondering whether `tf.contrib.graph_editor` is the right way to achieve this clone() ability. Then I found the `_control_flow_context` problem, which I raised in #5477 . This is because copying operations in `tf.contrib.graph_editor` is by directly copying members of a python objects. In that issue @sherrym pointed out to me that I could use `meta_graph` utilities to achieve what I want. So I made this trial. Though I still don't succeed in copying control flow contexts, I find the code more elegant in this way, compared to implementations in `tf.contrib.graph_editor`.\r\n\r\nI believe this is at least a right direction to implement this theano equilvalent. And I also want to point out that **this function is of great value to people building higher level libraries based on Tensorflow, it helps on operation level reuse (which cannot be achieved either by using name scope or by experimental function utilities in TF)**."}