{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20194", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20194/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20194/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20194/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20194", "id": 334586058, "node_id": "MDU6SXNzdWUzMzQ1ODYwNTg=", "number": 20194, "title": "Assigning new values to a protocol buffer frozen model in TensorFlow", "user": {"login": "amirjamez", "id": 8922398, "node_id": "MDQ6VXNlcjg5MjIzOTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8922398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amirjamez", "html_url": "https://github.com/amirjamez", "followers_url": "https://api.github.com/users/amirjamez/followers", "following_url": "https://api.github.com/users/amirjamez/following{/other_user}", "gists_url": "https://api.github.com/users/amirjamez/gists{/gist_id}", "starred_url": "https://api.github.com/users/amirjamez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amirjamez/subscriptions", "organizations_url": "https://api.github.com/users/amirjamez/orgs", "repos_url": "https://api.github.com/users/amirjamez/repos", "events_url": "https://api.github.com/users/amirjamez/events{/privacy}", "received_events_url": "https://api.github.com/users/amirjamez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-06-21T17:22:42Z", "updated_at": "2018-11-19T23:25:42Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: 14.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Source</li>\n<li><strong>TensorFlow version (use command below)</strong>: r1.8</li>\n<li><strong>Python version</strong>:  2.7</li>\n<li><strong>Bazel version (if compiling from source)</strong>: bazel release 0.13.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 4.8</li>\n<li><strong>CUDA/cuDNN version</strong>: 8/7</li>\n<li><strong>GPU model and memory</strong>: NVIDIA-1060</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>I am able to assign new values to a tensor by using <code>tf.assign</code> and <code>tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)</code> when I restore a pretrained model:</p>\n<pre><code> &gt;&gt;&gt;sess.run(tf.assign([v for v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES) if v.name == 'LAYER_NAME'][0], New_Value_FOR_LAYER_NAME))`\n</code></pre>\n<p>However, in the case of a frozen model (<code>.pb</code>) file, the equivalent using <code>tf.assign</code> and <code>tf.get_default_graph().get_operations()</code> does not yeild any results:</p>\n<pre><code>&gt;&gt;&gt;sess.run(tf.assign([v for v in tf.get_default_graph().get_operations() if v.name == LAYER_NAME'][0], New_Value_FOR_LAYER_NAME)). \n</code></pre>\n<p>I guess the underlying reason is that pretrained models have <a href=\"https://www.tensorflow.org/api_docs/python/tf/Tensor\" rel=\"nofollow\">tf.Tensor</a> and frozen models have <a href=\"https://www.tensorflow.org/api_docs/python/tf/Operation\" rel=\"nofollow\">tf.Operation</a>:</p>\n<pre><code>&gt;&gt;&gt;[v for v in tf.get_default_graph().get_operations() if v.name == 'softmax/weights_quint8_const']\n    [&lt;tf.Operation 'softmax/weights_quint8_const' type=Const&gt;]\n</code></pre>\n<p>Then, what is the correct way of assigning new values to a tf.Operation in a frozen model.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): 14.04\nTensorFlow installed from (source or binary): Source\nTensorFlow version (use command below): r1.8\nPython version:  2.7\nBazel version (if compiling from source): bazel release 0.13.0\nGCC/Compiler version (if compiling from source): 4.8\nCUDA/cuDNN version: 8/7\nGPU model and memory: NVIDIA-1060\nExact command to reproduce:\n\nI am able to assign new values to a tensor by using tf.assign and tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES) when I restore a pretrained model:\n >>>sess.run(tf.assign([v for v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES) if v.name == 'LAYER_NAME'][0], New_Value_FOR_LAYER_NAME))`\n\nHowever, in the case of a frozen model (.pb) file, the equivalent using tf.assign and tf.get_default_graph().get_operations() does not yeild any results:\n>>>sess.run(tf.assign([v for v in tf.get_default_graph().get_operations() if v.name == LAYER_NAME'][0], New_Value_FOR_LAYER_NAME)). \n\nI guess the underlying reason is that pretrained models have tf.Tensor and frozen models have tf.Operation:\n>>>[v for v in tf.get_default_graph().get_operations() if v.name == 'softmax/weights_quint8_const']\n    [<tf.Operation 'softmax/weights_quint8_const' type=Const>]\n\nThen, what is the correct way of assigning new values to a tf.Operation in a frozen model.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: 14.04\r\n- **TensorFlow installed from (source or binary)**: Source\r\n- **TensorFlow version (use command below)**: r1.8\r\n- **Python version**:  2.7\r\n- **Bazel version (if compiling from source)**: bazel release 0.13.0\r\n- **GCC/Compiler version (if compiling from source)**: 4.8\r\n- **CUDA/cuDNN version**: 8/7\r\n- **GPU model and memory**: NVIDIA-1060\r\n- **Exact command to reproduce**:\r\n\r\nI am able to assign new values to a tensor by using `tf.assign` and `tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)` when I restore a pretrained model:\r\n\r\n```\r\n >>>sess.run(tf.assign([v for v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES) if v.name == 'LAYER_NAME'][0], New_Value_FOR_LAYER_NAME))`\r\n```\r\n\r\nHowever, in the case of a frozen model (`.pb`) file, the equivalent using `tf.assign` and `tf.get_default_graph().get_operations()` does not yeild any results:\r\n\r\n```\r\n>>>sess.run(tf.assign([v for v in tf.get_default_graph().get_operations() if v.name == LAYER_NAME'][0], New_Value_FOR_LAYER_NAME)). \r\n```\r\nI guess the underlying reason is that pretrained models have [tf.Tensor](https://www.tensorflow.org/api_docs/python/tf/Tensor) and frozen models have [tf.Operation](https://www.tensorflow.org/api_docs/python/tf/Operation):\r\n\r\n\r\n\r\n```\r\n>>>[v for v in tf.get_default_graph().get_operations() if v.name == 'softmax/weights_quint8_const']\r\n    [<tf.Operation 'softmax/weights_quint8_const' type=Const>]\r\n```\r\n\r\nThen, what is the correct way of assigning new values to a tf.Operation in a frozen model. \r\n"}