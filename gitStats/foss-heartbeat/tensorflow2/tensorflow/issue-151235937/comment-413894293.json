{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/413894293", "html_url": "https://github.com/tensorflow/tensorflow/issues/2118#issuecomment-413894293", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2118", "id": 413894293, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzg5NDI5Mw==", "user": {"login": "Datoclement", "id": 14246001, "node_id": "MDQ6VXNlcjE0MjQ2MDAx", "avatar_url": "https://avatars3.githubusercontent.com/u/14246001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Datoclement", "html_url": "https://github.com/Datoclement", "followers_url": "https://api.github.com/users/Datoclement/followers", "following_url": "https://api.github.com/users/Datoclement/following{/other_user}", "gists_url": "https://api.github.com/users/Datoclement/gists{/gist_id}", "starred_url": "https://api.github.com/users/Datoclement/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Datoclement/subscriptions", "organizations_url": "https://api.github.com/users/Datoclement/orgs", "repos_url": "https://api.github.com/users/Datoclement/repos", "events_url": "https://api.github.com/users/Datoclement/events{/privacy}", "received_events_url": "https://api.github.com/users/Datoclement/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-17T15:02:43Z", "updated_at": "2018-08-17T15:02:43Z", "author_association": "NONE", "body_html": "<p>While the integer division is not invertible, we have no information about the pixels that \"belong\" to the residual part. So, the consideration of these extra pixels leads us to padding the output tensor. Am I correct?<br>\n(Not sure if this question/thought should be posted here.)</p>\n<p>e.g.,</p>\n<p>To think about this, I use \"input\" to denote the input of the convolution (non transposed) and \"output\" its output. Since we are only interested in shapes, output -&gt; conv2d_transposed -&gt; input.</p>\n<p>Given input of shape [7, 7], kernel of shape [3, 3]. With valid padding, the output before striding is [5, 5]. If the stride is [3, 3] then the final output is of shape [2, 2].</p>\n<p>The same setting with input of shape [6, 6] gives the same output shape [2, 2], where we find the invertibility of integer division.</p>\n<p>However, we actually do not have any information about the extra pixels in the first case. (extra pixels in [7, 7] compared to [6, 6]). So, when we want to conv2d_transpose back to the input image [7, 7], we can do nothing but zero paddings. (Maybe translated by a bias later?)</p>", "body_text": "While the integer division is not invertible, we have no information about the pixels that \"belong\" to the residual part. So, the consideration of these extra pixels leads us to padding the output tensor. Am I correct?\n(Not sure if this question/thought should be posted here.)\ne.g.,\nTo think about this, I use \"input\" to denote the input of the convolution (non transposed) and \"output\" its output. Since we are only interested in shapes, output -> conv2d_transposed -> input.\nGiven input of shape [7, 7], kernel of shape [3, 3]. With valid padding, the output before striding is [5, 5]. If the stride is [3, 3] then the final output is of shape [2, 2].\nThe same setting with input of shape [6, 6] gives the same output shape [2, 2], where we find the invertibility of integer division.\nHowever, we actually do not have any information about the extra pixels in the first case. (extra pixels in [7, 7] compared to [6, 6]). So, when we want to conv2d_transpose back to the input image [7, 7], we can do nothing but zero paddings. (Maybe translated by a bias later?)", "body": "While the integer division is not invertible, we have no information about the pixels that \"belong\" to the residual part. So, the consideration of these extra pixels leads us to padding the output tensor. Am I correct?\r\n(Not sure if this question/thought should be posted here.)\r\n\r\ne.g.,\r\n\r\nTo think about this, I use \"input\" to denote the input of the convolution (non transposed) and \"output\" its output. Since we are only interested in shapes, output -> conv2d_transposed -> input.\r\n\r\nGiven input of shape [7, 7], kernel of shape [3, 3]. With valid padding, the output before striding is [5, 5]. If the stride is [3, 3] then the final output is of shape [2, 2].\r\n\r\nThe same setting with input of shape [6, 6] gives the same output shape [2, 2], where we find the invertibility of integer division.\r\n\r\nHowever, we actually do not have any information about the extra pixels in the first case. (extra pixels in [7, 7] compared to [6, 6]). So, when we want to conv2d_transpose back to the input image [7, 7], we can do nothing but zero paddings. (Maybe translated by a bias later?)"}