{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22485", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22485/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22485/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22485/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22485", "id": 363174707, "node_id": "MDU6SXNzdWUzNjMxNzQ3MDc=", "number": 22485, "title": "Keras eager execution: multi-output model unexpected behavior", "user": {"login": "nairouz", "id": 10966954, "node_id": "MDQ6VXNlcjEwOTY2OTU0", "avatar_url": "https://avatars0.githubusercontent.com/u/10966954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nairouz", "html_url": "https://github.com/nairouz", "followers_url": "https://api.github.com/users/nairouz/followers", "following_url": "https://api.github.com/users/nairouz/following{/other_user}", "gists_url": "https://api.github.com/users/nairouz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nairouz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nairouz/subscriptions", "organizations_url": "https://api.github.com/users/nairouz/orgs", "repos_url": "https://api.github.com/users/nairouz/repos", "events_url": "https://api.github.com/users/nairouz/events{/privacy}", "received_events_url": "https://api.github.com/users/nairouz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 736653459, "node_id": "MDU6TGFiZWw3MzY2NTM0NTk=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:eager", "name": "comp:eager", "color": "0052cc", "default": false}], "state": "open", "locked": false, "assignee": {"login": "omalleyt12", "id": 29100818, "node_id": "MDQ6VXNlcjI5MTAwODE4", "avatar_url": "https://avatars3.githubusercontent.com/u/29100818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omalleyt12", "html_url": "https://github.com/omalleyt12", "followers_url": "https://api.github.com/users/omalleyt12/followers", "following_url": "https://api.github.com/users/omalleyt12/following{/other_user}", "gists_url": "https://api.github.com/users/omalleyt12/gists{/gist_id}", "starred_url": "https://api.github.com/users/omalleyt12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omalleyt12/subscriptions", "organizations_url": "https://api.github.com/users/omalleyt12/orgs", "repos_url": "https://api.github.com/users/omalleyt12/repos", "events_url": "https://api.github.com/users/omalleyt12/events{/privacy}", "received_events_url": "https://api.github.com/users/omalleyt12/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "omalleyt12", "id": 29100818, "node_id": "MDQ6VXNlcjI5MTAwODE4", "avatar_url": "https://avatars3.githubusercontent.com/u/29100818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omalleyt12", "html_url": "https://github.com/omalleyt12", "followers_url": "https://api.github.com/users/omalleyt12/followers", "following_url": "https://api.github.com/users/omalleyt12/following{/other_user}", "gists_url": "https://api.github.com/users/omalleyt12/gists{/gist_id}", "starred_url": "https://api.github.com/users/omalleyt12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omalleyt12/subscriptions", "organizations_url": "https://api.github.com/users/omalleyt12/orgs", "repos_url": "https://api.github.com/users/omalleyt12/repos", "events_url": "https://api.github.com/users/omalleyt12/events{/privacy}", "received_events_url": "https://api.github.com/users/omalleyt12/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-09-24T14:35:46Z", "updated_at": "2018-11-10T18:51:13Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Colab</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Colab</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.10.1</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: Colab</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: Colab</li>\n<li><strong>CUDA/cuDNN version</strong>: Colab</li>\n<li><strong>GPU model and memory</strong>: Colab</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I have a very simple multi-output model. The model is expected to be trained with respect to the first output only.  You can find the code below.  When I run it, first I get a warning message then it crashes.<br>\nThe warning message is expected since I am intentionally missing considering the second output from the loss function. But the error message is completely contradicting that : <code>No data provided for \"out2\". Need data for each key in: ['out1', 'out2']</code></p>\n<p><code>WARNING:tensorflow:Output \"out2\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"out2\" during training.</code></p>\n<h3>Source code / logs</h3>\n<pre><code>import tensorflow as tf\nimport tensorflow.keras as keras\nimport tensorflow.keras.backend as K\nimport numpy as np\nfrom tensorflow.keras.layers import Dense, Input, Layer\nfrom tensorflow.keras.models import Model\n\ntf.enable_eager_execution()\n\ninput_tensor = Input(shape=(20,), name=\"input\")\nhidden = Dense(100, activation='relu')(input_tensor)\nout1 = Dense(10, activation='relu', name=\"out1\")(hidden)\nout2 = Dense(5, activation='relu', name=\"out2\")(hidden)\nmodel = Model(inputs=input_tensor, outputs=[out1, out2])\nmodel.compile(loss={\"out1\": \"mse\"}, optimizer=tf.train.AdamOptimizer(learning_rate=0.001))\nmodel.summary()\n\nnp.random.seed(0)\nX = np.random.random((3, 20)).astype(np.float32)\nY1 = np.random.random((3, 10)).astype(np.float32)\nY2 = np.random.random((3, 5)).astype(np.float32)\nmodel.fit(x={'input' : X}, y={'out1' : Y1}, batch_size=1, epochs=10)\n\n</code></pre>\n<h3>logs</h3>\n<pre><code>WARNING:tensorflow:Output \"out2\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"out2\" during training.\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training_utils.py in standardize_input_data(data, names, shapes, check_batch_axis, exception_prefix)\n    125           if data[x].__class__.__name__ == 'DataFrame' else data[x]\n--&gt; 126           for x in names\n    127       ]\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training_utils.py in &lt;listcomp&gt;(.0)\n    125           if data[x].__class__.__name__ == 'DataFrame' else data[x]\n--&gt; 126           for x in names\n    127       ]\n\nKeyError: 'out2'\n\nDuring handling of the above exception, another exception occurred:\n\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-6-00a3f18ea48b&gt; in &lt;module&gt;()\n     19 Y1 = np.random.random((3, 5)).astype(np.float32)\n     20 Y1 = np.random.random((3, 10)).astype(np.float32)\n---&gt; 21 model.fit(x={'input' : X}, y={'out1' : Y1}, batch_size=1, epochs=10)\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py in fit(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, **kwargs)\n   1276         steps_name='steps_per_epoch',\n   1277         steps=steps_per_epoch,\n-&gt; 1278         validation_split=validation_split)\n   1279 \n   1280     # Prepare validation data.\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py in _standardize_user_data(self, x, y, sample_weight, class_weight, batch_size, check_steps, steps_name, steps, validation_split)\n    915           feed_output_shapes,\n    916           check_batch_axis=False,  # Don't enforce the batch size.\n--&gt; 917           exception_prefix='target')\n    918 \n    919       # Generate sample-wise weight values given the `sample_weight` and\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training_utils.py in standardize_input_data(data, names, shapes, check_batch_axis, exception_prefix)\n    128     except KeyError as e:\n    129       raise ValueError('No data provided for \"' + e.args[0] + '\". Need data '\n--&gt; 130                        'for each key in: ' + str(names))\n    131   elif isinstance(data, list):\n    132     if isinstance(data[0], list):\n\nValueError: No data provided for \"out2\". Need data for each key in: ['out1', 'out2']\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Colab\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary): Colab\nTensorFlow version (use command below): 1.10.1\nPython version: 3.6\nBazel version (if compiling from source): Colab\nGCC/Compiler version (if compiling from source): Colab\nCUDA/cuDNN version: Colab\nGPU model and memory: Colab\nExact command to reproduce:\n\nDescribe the problem\nI have a very simple multi-output model. The model is expected to be trained with respect to the first output only.  You can find the code below.  When I run it, first I get a warning message then it crashes.\nThe warning message is expected since I am intentionally missing considering the second output from the loss function. But the error message is completely contradicting that : No data provided for \"out2\". Need data for each key in: ['out1', 'out2']\nWARNING:tensorflow:Output \"out2\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"out2\" during training.\nSource code / logs\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport tensorflow.keras.backend as K\nimport numpy as np\nfrom tensorflow.keras.layers import Dense, Input, Layer\nfrom tensorflow.keras.models import Model\n\ntf.enable_eager_execution()\n\ninput_tensor = Input(shape=(20,), name=\"input\")\nhidden = Dense(100, activation='relu')(input_tensor)\nout1 = Dense(10, activation='relu', name=\"out1\")(hidden)\nout2 = Dense(5, activation='relu', name=\"out2\")(hidden)\nmodel = Model(inputs=input_tensor, outputs=[out1, out2])\nmodel.compile(loss={\"out1\": \"mse\"}, optimizer=tf.train.AdamOptimizer(learning_rate=0.001))\nmodel.summary()\n\nnp.random.seed(0)\nX = np.random.random((3, 20)).astype(np.float32)\nY1 = np.random.random((3, 10)).astype(np.float32)\nY2 = np.random.random((3, 5)).astype(np.float32)\nmodel.fit(x={'input' : X}, y={'out1' : Y1}, batch_size=1, epochs=10)\n\n\nlogs\nWARNING:tensorflow:Output \"out2\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"out2\" during training.\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training_utils.py in standardize_input_data(data, names, shapes, check_batch_axis, exception_prefix)\n    125           if data[x].__class__.__name__ == 'DataFrame' else data[x]\n--> 126           for x in names\n    127       ]\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training_utils.py in <listcomp>(.0)\n    125           if data[x].__class__.__name__ == 'DataFrame' else data[x]\n--> 126           for x in names\n    127       ]\n\nKeyError: 'out2'\n\nDuring handling of the above exception, another exception occurred:\n\nValueError                                Traceback (most recent call last)\n<ipython-input-6-00a3f18ea48b> in <module>()\n     19 Y1 = np.random.random((3, 5)).astype(np.float32)\n     20 Y1 = np.random.random((3, 10)).astype(np.float32)\n---> 21 model.fit(x={'input' : X}, y={'out1' : Y1}, batch_size=1, epochs=10)\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py in fit(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, **kwargs)\n   1276         steps_name='steps_per_epoch',\n   1277         steps=steps_per_epoch,\n-> 1278         validation_split=validation_split)\n   1279 \n   1280     # Prepare validation data.\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py in _standardize_user_data(self, x, y, sample_weight, class_weight, batch_size, check_steps, steps_name, steps, validation_split)\n    915           feed_output_shapes,\n    916           check_batch_axis=False,  # Don't enforce the batch size.\n--> 917           exception_prefix='target')\n    918 \n    919       # Generate sample-wise weight values given the `sample_weight` and\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training_utils.py in standardize_input_data(data, names, shapes, check_batch_axis, exception_prefix)\n    128     except KeyError as e:\n    129       raise ValueError('No data provided for \"' + e.args[0] + '\". Need data '\n--> 130                        'for each key in: ' + str(names))\n    131   elif isinstance(data, list):\n    132     if isinstance(data[0], list):\n\nValueError: No data provided for \"out2\". Need data for each key in: ['out1', 'out2']", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Colab\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\n- **TensorFlow installed from (source or binary)**: Colab\r\n- **TensorFlow version (use command below)**: 1.10.1\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: Colab\r\n- **GCC/Compiler version (if compiling from source)**: Colab\r\n- **CUDA/cuDNN version**: Colab\r\n- **GPU model and memory**: Colab\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nI have a very simple multi-output model. The model is expected to be trained with respect to the first output only.  You can find the code below.  When I run it, first I get a warning message then it crashes.\r\nThe warning message is expected since I am intentionally missing considering the second output from the loss function. But the error message is completely contradicting that : `No data provided for \"out2\". Need data for each key in: ['out1', 'out2']`\r\n\r\n`WARNING:tensorflow:Output \"out2\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"out2\" during training.`\r\n\r\n### Source code / logs\r\n\r\n```\r\nimport tensorflow as tf\r\nimport tensorflow.keras as keras\r\nimport tensorflow.keras.backend as K\r\nimport numpy as np\r\nfrom tensorflow.keras.layers import Dense, Input, Layer\r\nfrom tensorflow.keras.models import Model\r\n\r\ntf.enable_eager_execution()\r\n\r\ninput_tensor = Input(shape=(20,), name=\"input\")\r\nhidden = Dense(100, activation='relu')(input_tensor)\r\nout1 = Dense(10, activation='relu', name=\"out1\")(hidden)\r\nout2 = Dense(5, activation='relu', name=\"out2\")(hidden)\r\nmodel = Model(inputs=input_tensor, outputs=[out1, out2])\r\nmodel.compile(loss={\"out1\": \"mse\"}, optimizer=tf.train.AdamOptimizer(learning_rate=0.001))\r\nmodel.summary()\r\n\r\nnp.random.seed(0)\r\nX = np.random.random((3, 20)).astype(np.float32)\r\nY1 = np.random.random((3, 10)).astype(np.float32)\r\nY2 = np.random.random((3, 5)).astype(np.float32)\r\nmodel.fit(x={'input' : X}, y={'out1' : Y1}, batch_size=1, epochs=10)\r\n\r\n```\r\n\r\n### logs\r\n```\r\nWARNING:tensorflow:Output \"out2\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"out2\" during training.\r\n\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training_utils.py in standardize_input_data(data, names, shapes, check_batch_axis, exception_prefix)\r\n    125           if data[x].__class__.__name__ == 'DataFrame' else data[x]\r\n--> 126           for x in names\r\n    127       ]\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training_utils.py in <listcomp>(.0)\r\n    125           if data[x].__class__.__name__ == 'DataFrame' else data[x]\r\n--> 126           for x in names\r\n    127       ]\r\n\r\nKeyError: 'out2'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-6-00a3f18ea48b> in <module>()\r\n     19 Y1 = np.random.random((3, 5)).astype(np.float32)\r\n     20 Y1 = np.random.random((3, 10)).astype(np.float32)\r\n---> 21 model.fit(x={'input' : X}, y={'out1' : Y1}, batch_size=1, epochs=10)\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py in fit(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, **kwargs)\r\n   1276         steps_name='steps_per_epoch',\r\n   1277         steps=steps_per_epoch,\r\n-> 1278         validation_split=validation_split)\r\n   1279 \r\n   1280     # Prepare validation data.\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py in _standardize_user_data(self, x, y, sample_weight, class_weight, batch_size, check_steps, steps_name, steps, validation_split)\r\n    915           feed_output_shapes,\r\n    916           check_batch_axis=False,  # Don't enforce the batch size.\r\n--> 917           exception_prefix='target')\r\n    918 \r\n    919       # Generate sample-wise weight values given the `sample_weight` and\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training_utils.py in standardize_input_data(data, names, shapes, check_batch_axis, exception_prefix)\r\n    128     except KeyError as e:\r\n    129       raise ValueError('No data provided for \"' + e.args[0] + '\". Need data '\r\n--> 130                        'for each key in: ' + str(names))\r\n    131   elif isinstance(data, list):\r\n    132     if isinstance(data[0], list):\r\n\r\nValueError: No data provided for \"out2\". Need data for each key in: ['out1', 'out2']\r\n```\r\n\r\n"}