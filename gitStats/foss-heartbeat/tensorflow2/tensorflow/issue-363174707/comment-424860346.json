{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/424860346", "html_url": "https://github.com/tensorflow/tensorflow/issues/22485#issuecomment-424860346", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22485", "id": 424860346, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDg2MDM0Ng==", "user": {"login": "omalleyt12", "id": 29100818, "node_id": "MDQ6VXNlcjI5MTAwODE4", "avatar_url": "https://avatars3.githubusercontent.com/u/29100818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omalleyt12", "html_url": "https://github.com/omalleyt12", "followers_url": "https://api.github.com/users/omalleyt12/followers", "following_url": "https://api.github.com/users/omalleyt12/following{/other_user}", "gists_url": "https://api.github.com/users/omalleyt12/gists{/gist_id}", "starred_url": "https://api.github.com/users/omalleyt12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omalleyt12/subscriptions", "organizations_url": "https://api.github.com/users/omalleyt12/orgs", "repos_url": "https://api.github.com/users/omalleyt12/repos", "events_url": "https://api.github.com/users/omalleyt12/events{/privacy}", "received_events_url": "https://api.github.com/users/omalleyt12/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-26T20:34:45Z", "updated_at": "2018-09-26T20:34:45Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10966954\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nairouz\">@nairouz</a> Sure, still looking into this but the easiest workaround would be adding a second loss that always returns zero and passing in fake data for 'out2':</p>\n<pre><code>import tensorflow as tf\nimport tensorflow.keras as keras\nimport tensorflow.keras.backend as K\nimport numpy as np\nfrom tensorflow.keras.layers import Dense, Input, Layer\nfrom tensorflow.keras.models import Model\n\ntf.enable_eager_execution()\n\ndef zero_loss(y_true, y_pred):\n  return tf.constant(0.0)\n\ninput_tensor = Input(shape=(20,), name=\"input\")\nhidden = Dense(100, activation='relu')(input_tensor)\nout1 = Dense(10, activation='relu', name=\"out1\")(hidden)\nout2 = Dense(5, activation='relu', name=\"out2\")(hidden)\nmodel = Model(inputs=input_tensor, outputs=[out1, out2])\nmodel.compile(loss={\"out1\": \"mse\", \"out2\": zero_loss}, optimizer=tf.train.AdamOptimizer(learning_rate=0.001))\nmodel.summary()\n\nnp.random.seed(0)\nX = np.random.random((3, 20)).astype(np.float32)\nY1 = np.random.random((3, 10)).astype(np.float32)\nY2 = np.random.random((3, 5)).astype(np.float32)\nmodel.fit(x={'input' : X}, y={'out1' : Y1, 'out2': Y2}, batch_size=1, epochs=10)\n</code></pre>", "body_text": "@nairouz Sure, still looking into this but the easiest workaround would be adding a second loss that always returns zero and passing in fake data for 'out2':\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport tensorflow.keras.backend as K\nimport numpy as np\nfrom tensorflow.keras.layers import Dense, Input, Layer\nfrom tensorflow.keras.models import Model\n\ntf.enable_eager_execution()\n\ndef zero_loss(y_true, y_pred):\n  return tf.constant(0.0)\n\ninput_tensor = Input(shape=(20,), name=\"input\")\nhidden = Dense(100, activation='relu')(input_tensor)\nout1 = Dense(10, activation='relu', name=\"out1\")(hidden)\nout2 = Dense(5, activation='relu', name=\"out2\")(hidden)\nmodel = Model(inputs=input_tensor, outputs=[out1, out2])\nmodel.compile(loss={\"out1\": \"mse\", \"out2\": zero_loss}, optimizer=tf.train.AdamOptimizer(learning_rate=0.001))\nmodel.summary()\n\nnp.random.seed(0)\nX = np.random.random((3, 20)).astype(np.float32)\nY1 = np.random.random((3, 10)).astype(np.float32)\nY2 = np.random.random((3, 5)).astype(np.float32)\nmodel.fit(x={'input' : X}, y={'out1' : Y1, 'out2': Y2}, batch_size=1, epochs=10)", "body": "@nairouz Sure, still looking into this but the easiest workaround would be adding a second loss that always returns zero and passing in fake data for 'out2':\r\n\r\n```\r\nimport tensorflow as tf\r\nimport tensorflow.keras as keras\r\nimport tensorflow.keras.backend as K\r\nimport numpy as np\r\nfrom tensorflow.keras.layers import Dense, Input, Layer\r\nfrom tensorflow.keras.models import Model\r\n\r\ntf.enable_eager_execution()\r\n\r\ndef zero_loss(y_true, y_pred):\r\n  return tf.constant(0.0)\r\n\r\ninput_tensor = Input(shape=(20,), name=\"input\")\r\nhidden = Dense(100, activation='relu')(input_tensor)\r\nout1 = Dense(10, activation='relu', name=\"out1\")(hidden)\r\nout2 = Dense(5, activation='relu', name=\"out2\")(hidden)\r\nmodel = Model(inputs=input_tensor, outputs=[out1, out2])\r\nmodel.compile(loss={\"out1\": \"mse\", \"out2\": zero_loss}, optimizer=tf.train.AdamOptimizer(learning_rate=0.001))\r\nmodel.summary()\r\n\r\nnp.random.seed(0)\r\nX = np.random.random((3, 20)).astype(np.float32)\r\nY1 = np.random.random((3, 10)).astype(np.float32)\r\nY2 = np.random.random((3, 5)).astype(np.float32)\r\nmodel.fit(x={'input' : X}, y={'out1' : Y1, 'out2': Y2}, batch_size=1, epochs=10)\r\n```"}