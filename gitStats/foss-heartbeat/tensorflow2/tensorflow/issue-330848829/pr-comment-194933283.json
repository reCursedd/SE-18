{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/194933283", "pull_request_review_id": 128200970, "id": 194933283, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDkzMzI4Mw==", "diff_hunk": "@@ -29,61 +29,11 @@ namespace tensorflow {\n namespace shape_inference {\n \n tensorflow::Status TRTEngineOpShapeInference(InferenceContext* context) {\n-  tensorflow::tensorrt::Logger logger;\n-  string serialized_engine;\n-  TF_RETURN_IF_ERROR(context->GetAttr(\"serialized_engine\", &serialized_engine));\n-  nvinfer1::IRuntime* infer = nvinfer1::createInferRuntime(logger);\n-  nvinfer1::ICudaEngine* trt_engine = infer->deserializeCudaEngine(\n-      serialized_engine.c_str(), serialized_engine.size(),\n-      tensorrt::PluginFactoryTensorRT::GetInstance());\n-\n-  int num_batch = -1;\n-  std::vector<::tensorflow::DataType> input_type;\n-  TF_RETURN_IF_ERROR(context->GetAttr(\"InT\", &input_type));\n-  for (size_t i = 0; i < context->num_inputs(); i++) {\n-    // Check if input shape is legit\n-    auto input_shape = context->input(i);\n-    for (int j = 0; j < context->Rank(input_shape); j++) {\n-      auto dim_handler = context->Dim(input_shape, j);\n-      if (j == 0) {\n-        if (i == 0) {\n-          num_batch = context->Value(dim_handler);\n-        } else if (num_batch != context->Value(dim_handler)) {\n-          // TODO(jie): TensorRT engine requires consistent batch between inputs\n-          //            tensors. Segmenter should be aware of this.\n-          LOG(FATAL) << \"TensorRT engine requires consistent batch size\";\n-        }\n-      }\n-    }\n-  }\n-\n-  // Arrange input here\n-  std::vector<string> input_nodes;\n-  TF_RETURN_IF_ERROR(context->GetAttr(\"input_nodes\", &input_nodes));\n-\n-  // Arrange output here\n-  std::vector<string> output_nodes;\n-  TF_RETURN_IF_ERROR(context->GetAttr(\"output_nodes\", &output_nodes));\n-  for (size_t i = 0; i < output_nodes.size(); i++) {\n-    int binding_index = trt_engine->getBindingIndex(output_nodes[i].c_str());\n-    ShapeHandle output_shape;\n-    std::vector<DimensionHandle> dim_vec;\n-    dim_vec.emplace_back(context->MakeDim(num_batch));\n-    if (binding_index != -1) {\n-      auto dims = trt_engine->getBindingDimensions(binding_index);\n-      for (int j = 0; j < dims.nbDims; j++) {\n-        dim_vec.emplace_back(context->MakeDim(dims.d[j]));\n-      }\n-    } else {\n-      LOG(FATAL) << \"TensorRT engine cannot find binding: \" << output_nodes[i];\n-    }\n-    output_shape = context->MakeShape(dim_vec);\n-    context->set_output(i, output_shape);\n+  for (int i = 0; i < context->num_outputs(); ++i) {\n+    context->set_output(i, context->UnknownShape());", "path": "tensorflow/contrib/tensorrt/shape_fn/trt_shfn.cc", "position": null, "original_position": 55, "commit_id": "4631936e61651101932073197c08b600006530a3", "original_commit_id": "ae13b0560666df62967d87072e85619083a2f44b", "user": {"login": "samikama", "id": 10539540, "node_id": "MDQ6VXNlcjEwNTM5NTQw", "avatar_url": "https://avatars0.githubusercontent.com/u/10539540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samikama", "html_url": "https://github.com/samikama", "followers_url": "https://api.github.com/users/samikama/followers", "following_url": "https://api.github.com/users/samikama/following{/other_user}", "gists_url": "https://api.github.com/users/samikama/gists{/gist_id}", "starred_url": "https://api.github.com/users/samikama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samikama/subscriptions", "organizations_url": "https://api.github.com/users/samikama/orgs", "repos_url": "https://api.github.com/users/samikama/repos", "events_url": "https://api.github.com/users/samikama/events{/privacy}", "received_events_url": "https://api.github.com/users/samikama/received_events", "type": "User", "site_admin": false}, "body": "If we know that input shapes are the same as at the time of conversion, we can return known output shapes. If we don't care we can return UnknownShape() always. That is the reason this is not removed.", "created_at": "2018-06-13T01:22:14Z", "updated_at": "2018-06-21T22:23:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/19871#discussion_r194933283", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19871", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/194933283"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/19871#discussion_r194933283"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19871"}}, "body_html": "<p>If we know that input shapes are the same as at the time of conversion, we can return known output shapes. If we don't care we can return UnknownShape() always. That is the reason this is not removed.</p>", "body_text": "If we know that input shapes are the same as at the time of conversion, we can return known output shapes. If we don't care we can return UnknownShape() always. That is the reason this is not removed.", "in_reply_to_id": 194828719}