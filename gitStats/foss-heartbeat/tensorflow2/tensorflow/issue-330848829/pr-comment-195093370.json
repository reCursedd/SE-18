{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/195093370", "pull_request_review_id": 128390653, "id": 195093370, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTA5MzM3MA==", "diff_hunk": "@@ -2140,562 +2144,238 @@ void Converter::register_op_converters() {\n \n }  // namespace\n \n-tensorflow::Status ConvertCalibrationNodeToEngineNode(\n-    tensorflow::Graph& graph, tensorflow::Node* c_node) {\n-  const auto ndef = c_node->def();\n-\n-  TFAttrs attrs(ndef);\n-  std::vector<string> segment_nodes(\n-      attrs.get<std::vector<string>>(\"segment_nodes\"));\n-  std::vector<string> output_nodes(\n-      attrs.get<std::vector<string>>(\"segment_output_names\"));\n-  std::vector<string> input_names(\n-      attrs.get<std::vector<string>>(\"input_names\"));\n-  string res_name = attrs.get<string>(\"resource_name\");\n-  VLOG(1) << \"Node name \" << c_node->name() << \" res_name \" << res_name;\n-  string engine_name = \"my_trt_op\";\n-  {\n-    const auto node_id = tensorflow::str_util::Split(res_name, \"_\");\n-    engine_name += node_id.back();\n-  }\n-  std::map<string, tensorflow::Node*> node_maps;\n-\n-  for (auto n : graph.op_nodes()) {\n-    node_maps.insert({n->name(), n});\n-  }\n-  std::set<int> subgraph_ids;\n-  for (const auto internal_node : segment_nodes) {\n-    subgraph_ids.insert(node_maps.at(internal_node)->id());\n-  }\n-  if (VLOG_IS_ON(2)) {\n-    string node_names = StrCat(c_node->name(), \" segment nodes= \");\n-\n-    for (const auto& node_name : segment_nodes) {\n-      StrAppend(&node_names, node_name, \", \");\n-    }\n-    VLOG(2) << node_names;\n+// Converts given subgraph to a TRT engine.\n+tensorflow::Status ConvertSubgraphToEngine(\n+    const tensorflow::GraphDef& gdef, nvinfer1::IBuilder* builder,\n+    const std::vector<tensorflow::PartialTensorShape>& input_shapes,\n+    nvinfer1::ICudaEngine** engine, int precision_mode) {\n+  auto trt_network = infer_object(builder->createNetwork());\n+  if (!trt_network) {\n+    return tensorflow::errors::Internal(\n+        \"Failed to create TensorRT network object\");\n   }\n-\n-  VLOG(1) << \"Output Nodes:\";\n-  std::vector<tensorflow::DataType> out_types;\n-  std::vector<const tensorflow::Edge*> out_edges;\n-\n-  for (auto& i : output_nodes) {\n-    auto node_port = tensorflow::str_util::Split(i, \":\");\n-    VLOG(1) << \" \" << i << \" in graph \" << node_maps.count(i);\n-    auto out_node_name = node_port.at(0);\n-    if (node_port.size() > 1) {\n-      VLOG(1) << \"Multi port output\" << node_port.at(0) << \" \"\n-              << node_port.at(1) << \" size=\" << node_port.size();\n-    }\n-    auto node_it = node_maps.find(out_node_name);\n-    if (node_it != node_maps.end()) {\n-      tensorflow::Node* out_node = node_it->second;\n-      int port = 0;\n-      if (node_port.size() == 2) {\n-        port = std::strtoul(node_port.at(1).c_str(), nullptr, 10);\n-        out_types.push_back(out_node->output_type(port));\n-      } else {\n-        out_types.push_back(out_node->output_type(0));\n+  auto ws = std::unique_ptr<tensorflow::tensorrt::TRTWeightStore>(\n+      new TRTWeightStore());\n+  // Build the network\n+  VLOG(1) << \"Starting engine conversion \";\n+  Converter converter(trt_network.get(), ws.get(), precision_mode == FP16MODE);\n+  std::vector<std::pair<string, string>> output_tensors;\n+  for (const auto& node_def : gdef.node()) {", "path": "tensorflow/contrib/tensorrt/convert/convert_nodes.cc", "position": null, "original_position": 96, "commit_id": "4631936e61651101932073197c08b600006530a3", "original_commit_id": "565640eae327b092edf43613f77ba5ab0747d20d", "user": {"login": "aaroey", "id": 31743510, "node_id": "MDQ6VXNlcjMxNzQzNTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31743510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaroey", "html_url": "https://github.com/aaroey", "followers_url": "https://api.github.com/users/aaroey/followers", "following_url": "https://api.github.com/users/aaroey/following{/other_user}", "gists_url": "https://api.github.com/users/aaroey/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaroey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaroey/subscriptions", "organizations_url": "https://api.github.com/users/aaroey/orgs", "repos_url": "https://api.github.com/users/aaroey/repos", "events_url": "https://api.github.com/users/aaroey/events{/privacy}", "received_events_url": "https://api.github.com/users/aaroey/received_events", "type": "User", "site_admin": false}, "body": "Please add these as comment then.", "created_at": "2018-06-13T14:01:23Z", "updated_at": "2018-06-21T22:23:15Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/19871#discussion_r195093370", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19871", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/195093370"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/19871#discussion_r195093370"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19871"}}, "body_html": "<p>Please add these as comment then.</p>", "body_text": "Please add these as comment then.", "in_reply_to_id": 194909174}