{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/111259512", "pull_request_review_id": 32492732, "id": 111259512, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTI1OTUxMg==", "diff_hunk": "@@ -0,0 +1,775 @@\n+/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+// LRN = Local Response Normalization\n+// See docs in ../ops/nn_ops.cc. This opkernel uses MKL library, create MKL\n+// layout and primitives, use MKL dnn primitives to compute local\n+// response normalization\n+\n+#ifdef INTEL_MKL\n+\n+#define EIGEN_USE_THREADS\n+#include <vector>\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/register_types.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/kernels/bounds_check.h\"\n+#include \"tensorflow/core/kernels/ops_util.h\"\n+#include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/util/mkl_util.h\"\n+#include \"tensorflow/core/util/tensor_format.h\"\n+#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n+#include \"third_party/mkl/include/mkl_dnn.h\"\n+#include \"third_party/mkl/include/mkl_dnn_types.h\"\n+\n+#if !defined(IS_MOBILE_PLATFORM)\n+#include \"tensorflow/core/util/work_sharder.h\"\n+#endif\n+\n+namespace tensorflow {\n+\n+namespace {\n+// Create a depth-by-depth band matrix with 1s along a swath of size (2 *\n+// depth_radius + 1) around the diagonal.\n+template <typename T>\n+void GetBandMatrix(int depth, int depth_radius,\n+                   Eigen::Tensor<T, 2, Eigen::RowMajor>* result) {\n+  result->setZero();\n+  for (int row = 0; row < depth; ++row) {\n+    const int begin = std::max<int>(0, row - depth_radius);\n+    const int end = std::min<int>(depth, row + depth_radius + 1);\n+    Eigen::DSizes<Eigen::DenseIndex, 2> start(row, begin);\n+    Eigen::DSizes<Eigen::DenseIndex, 2> sizes(1, end - begin);\n+    result->slice(start, sizes).setConstant(T(1));\n+  }\n+}\n+\n+}  // namespace\n+\n+template <typename T>\n+class MklLRNOp : public OpKernel {\n+ public:\n+  ~MklLRNOp() {}\n+\n+  explicit MklLRNOp(OpKernelConstruction* context) : OpKernel(context) {\n+    int64 depth_radius64;\n+    OP_REQUIRES_OK(context, context->GetAttr(\"depth_radius\", &depth_radius64));\n+    OP_REQUIRES(context, FastBoundsCheck(depth_radius64,\n+                                         std::numeric_limits<int>::max()),\n+                errors::InvalidArgument(\"depth_radius = \", depth_radius64,\n+                                        \" larger than int max\"));\n+    depth_radius_ = static_cast<size_t>(depth_radius64);\n+\n+    OP_REQUIRES_OK(context, context->GetAttr(\"bias\", &bias_));\n+    OP_REQUIRES_OK(context, context->GetAttr(\"alpha\", &alpha_));\n+    OP_REQUIRES_OK(context, context->GetAttr(\"beta\", &beta_));\n+    workspace_enabled_ = false;\n+    context->GetAttr(\"workspace_enabled\", &workspace_enabled_);\n+  }\n+\n+  void Compute(OpKernelContext* context) override {\n+    MklLRNOpContext mkl_context;\n+\n+    const Tensor& input = MklGetInput(context, 0);\n+    GetMklShape(context, 0, &mkl_context.input_shape);\n+    bool input_in_mkl_format = mkl_context.input_shape.IsMklTensor();\n+\n+    // Sanity checks\n+    mkl_context.in_dims = input_in_mkl_format\n+                              ? mkl_context.input_shape.GetDimension()\n+                              : input.dims();\n+    OP_REQUIRES(context, mkl_context.in_dims == 4,\n+                errors::InvalidArgument(\"input must be 4-dimensional\"));\n+    OP_REQUIRES(context, FastBoundsCheck(input.NumElements(),\n+                                         std::numeric_limits<int>::max()),\n+                errors::InvalidArgument(\"argument to LRN too large\"));\n+\n+    if (!input_in_mkl_format) {\n+      mkl_context.MklDefaultToEigen(context, depth_radius_, bias_, alpha_,\n+                                    beta_, input);\n+      return;\n+    }\n+\n+    if (input_in_mkl_format) {\n+      // MKL supports normalization over channel dimension only\n+      if (mkl_context.input_shape.tf_dim_idx(mkl_context.in_dims - 1) ==\n+          MklDims::C) {\n+        mkl_context.lt_input =\n+            static_cast<dnnLayout_t>(mkl_context.input_shape.GetCurLayout());\n+        workspace_enabled_ = true;\n+        /* std::cout<<\" the mkl lrn is enabled!!!!!!!!!!\"<<std::endl; */", "path": "tensorflow/core/kernels/mkl_lrn_op.cc", "position": null, "original_position": 112, "commit_id": "b5ef5bfcb39a0ba0cef4e1f7e9d766344f918ab2", "original_commit_id": "67f9925ef9ceed02892c200a3122092ab497943a", "user": {"login": "zhangyaobit", "id": 1034716, "node_id": "MDQ6VXNlcjEwMzQ3MTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1034716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhangyaobit", "html_url": "https://github.com/zhangyaobit", "followers_url": "https://api.github.com/users/zhangyaobit/followers", "following_url": "https://api.github.com/users/zhangyaobit/following{/other_user}", "gists_url": "https://api.github.com/users/zhangyaobit/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhangyaobit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhangyaobit/subscriptions", "organizations_url": "https://api.github.com/users/zhangyaobit/orgs", "repos_url": "https://api.github.com/users/zhangyaobit/repos", "events_url": "https://api.github.com/users/zhangyaobit/events{/privacy}", "received_events_url": "https://api.github.com/users/zhangyaobit/received_events", "type": "User", "site_admin": false}, "body": "Clean up? (And a few other places)", "created_at": "2017-04-12T21:01:59Z", "updated_at": "2017-04-13T23:37:54Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8968#discussion_r111259512", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8968", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/111259512"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8968#discussion_r111259512"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8968"}}, "body_html": "<p>Clean up? (And a few other places)</p>", "body_text": "Clean up? (And a few other places)"}