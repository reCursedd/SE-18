{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/111267430", "pull_request_review_id": 32494753, "id": 111267430, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTI2NzQzMA==", "diff_hunk": "@@ -2843,6 +2843,211 @@ NOTE Do not invoke this operator directly in Python. Graph rewrite pass is\n expected to invoke these operators.\n )doc\");\n \n+REGISTER_OP(\"MklLRN\")\n+    .Input(\"input: T\")\n+    .Input(\"mkl_input: uint8\")\n+    .Output(\"output: T\")\n+    .Output(\"workspace: T\")\n+    .Output(\"mkl_output: uint8\")\n+    .Output(\"mkl_workspace: uint8\")\n+    .Attr(\"depth_radius: int = 5\")\n+    .Attr(\"bias: float = 1.0\")\n+    .Attr(\"alpha: float = 1.0\")\n+    .Attr(\"beta: float = 0.5\")\n+    .Attr(\"workspace_enabled: bool = false\")\n+    .Attr(\"T: {float, half} = DT_FLOAT\")\n+    .SetShapeFn([](InferenceContext* c) {\n+      return UnchangedShapeWithRank(c, 4);\n+    })\n+    .Doc(R\"doc(\n+MKL version of LRN operator. Uses MKL DNN APIs to perform local response\n+normalization.\n+\n+NOTE Do not invoke this operator directly in Python. Graph rewrite pass is\n+expected to invoke these operators.\n+)doc\");\n+\n+REGISTER_OP(\"MklLRNGrad\")\n+    .Input(\"input_grads: T\")\n+    .Input(\"input_image: T\")\n+    .Input(\"output_image: T\")\n+    .Input(\"workspace: T\")\n+    .Input(\"mkl_input_grads: uint8\")\n+    .Input(\"mkl_input_image: uint8\")\n+    .Input(\"mkl_output_image: uint8\")\n+    .Input(\"mkl_workspace: uint8\")\n+    .Output(\"output: T\")\n+    .Output(\"mkl_output: uint8\")\n+    .Attr(\"depth_radius: int = 5\")\n+    .Attr(\"bias: float = 1.0\")\n+    .Attr(\"alpha: float = 1.0\")\n+    .Attr(\"beta: float = 0.5\")\n+    .Attr(\"workspace_enabled: bool = false\")\n+    .Attr(\"T: {float, half} = DT_FLOAT\")\n+    .SetShapeFn([](InferenceContext* c) {\n+      ShapeHandle s;\n+      TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 4, &s));  // input_grads\n+      TF_RETURN_IF_ERROR(c->Merge(s, c->input(1), &s));     // input_image\n+      TF_RETURN_IF_ERROR(c->Merge(s, c->input(2), &s));     // output_image\n+      c->set_output(0, s);\n+      return Status::OK();\n+    })\n+    .Doc(R\"doc(\n+MKL version of LRNGrad operator. Uses MKL DNN APIs to compute gradient for\n+local response normalization.\n+\n+NOTE Do not invoke this operator directly in Python. Graph rewrite pass is\n+expected to invoke these operators.\n+)doc\");\n+\n+REGISTER_OP(\"MklFusedBatchNorm\")\n+    .Input(\"x: T\")\n+    .Input(\"scale: T\")\n+    .Input(\"offset: T\")\n+    .Input(\"mean: T\")\n+    .Input(\"variance: T\")\n+    .Input(\"mkl_x: uint8\")\n+    .Input(\"mkl_scale: uint8\")\n+    .Input(\"mkl_offset: uint8\")\n+    .Input(\"mkl_mean: uint8\")\n+    .Input(\"mkl_variance: uint8\")\n+    .Output(\"y: T\")\n+    .Output(\"batch_mean: T\")\n+    .Output(\"batch_variance: T\")\n+    .Output(\"reserve_space_1: T\")\n+    .Output(\"reserve_space_2: T\")\n+    .Output(\"mkl_y: uint8\")\n+    .Output(\"mkl_batch_mean: uint8\")\n+    .Output(\"mkl_batch_variance: uint8\")\n+    .Output(\"mkl_reserve_space_1: uint8\")\n+    .Output(\"mkl_reserve_space_2: uint8\")\n+    .Attr(\"T: numbertype\")\n+    .Attr(\"epsilon: float = 0.0001\")\n+    .Attr(\"data_format: string = 'NHWC'\")\n+    .Attr(\"is_training: bool = true\")\n+    .SetShapeFn([](InferenceContext* c) {\n+      ShapeHandle x;\n+      TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 4, &x));\n+\n+      bool is_training;\n+      c->GetAttr(\"is_training\", &is_training);\n+      int number_inputs = (is_training) ? 3 : 5;\n+      string data_format;\n+      c->GetAttr(\"data_format\", &data_format);\n+      DimensionHandle channel_dim =\n+          (data_format == \"NHWC\") ? c->Dim(x, 3) : c->Dim(x, 1);\n+\n+      // covers scale, offset, and if is_training is false, mean, variance\n+      for (int i = 1; i < number_inputs; ++i) {\n+        ShapeHandle vec;\n+        TF_RETURN_IF_ERROR(c->WithRank(c->input(i), 1, &vec));\n+        TF_RETURN_IF_ERROR(c->Merge(channel_dim, c->Dim(vec, 0), &channel_dim));\n+      }\n+\n+      ShapeHandle y;\n+      if (data_format == \"NHWC\") {\n+        TF_RETURN_IF_ERROR(c->ReplaceDim(x, 3, channel_dim, &y));\n+      } else {\n+        TF_RETURN_IF_ERROR(c->ReplaceDim(x, 1, channel_dim, &y));\n+      }\n+      c->set_output(0, y);\n+      ShapeHandle vector_shape = c->Vector(channel_dim);\n+      c->set_output(1, vector_shape);\n+      c->set_output(2, vector_shape);\n+      c->set_output(3, vector_shape);\n+      c->set_output(4, vector_shape);\n+      return Status::OK();\n+    })\n+    .Doc(R\"doc(\n+MKL version of FusedBatchNorm operator. Uses MKL DNN APIs to perform fused\n+batch normalization.\n+\n+NOTE Do not invoke this operator directly in Python. Graph rewrite pass is\n+expected to invoke these operators.\n+)doc\");\n+\n+REGISTER_OP(\"MklFusedBatchNormGrad\")\n+    .Input(\"y_backprop: T\")\n+    .Input(\"x: T\")\n+    .Input(\"scale: T\")\n+    .Input(\"reserve_space_1: T\")\n+    .Input(\"reserve_space_2: T\")\n+    .Input(\"mkl_y_backprop: uint8\")\n+    .Input(\"mkl_x: uint8\")\n+    .Input(\"mkl_scale: uint8\")\n+    .Input(\"mkl_reserve_space_1: uint8\")\n+    .Input(\"mkl_reserve_space_2: uint8\")\n+    .Output(\"x_backprop: T\")\n+    .Output(\"scale_backprop: T\")\n+    .Output(\"offset_backprop: T\")\n+    .Output(\"reserve_space_3: T\")\n+    .Output(\"reserve_space_4: T\")\n+    .Output(\"mkl_x_backprop: uint8\")\n+    .Output(\"mkl_scale_backprop: uint8\")\n+    .Output(\"mkl_offset_backprop: uint8\")\n+    .Output(\"mkl_reserve_space_3: uint8\")", "path": "tensorflow/core/ops/nn_ops.cc", "position": 250, "original_position": 250, "commit_id": "b5ef5bfcb39a0ba0cef4e1f7e9d766344f918ab2", "original_commit_id": "67f9925ef9ceed02892c200a3122092ab497943a", "user": {"login": "zhangyaobit", "id": 1034716, "node_id": "MDQ6VXNlcjEwMzQ3MTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1034716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhangyaobit", "html_url": "https://github.com/zhangyaobit", "followers_url": "https://api.github.com/users/zhangyaobit/followers", "following_url": "https://api.github.com/users/zhangyaobit/following{/other_user}", "gists_url": "https://api.github.com/users/zhangyaobit/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhangyaobit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhangyaobit/subscriptions", "organizations_url": "https://api.github.com/users/zhangyaobit/orgs", "repos_url": "https://api.github.com/users/zhangyaobit/repos", "events_url": "https://api.github.com/users/zhangyaobit/events{/privacy}", "received_events_url": "https://api.github.com/users/zhangyaobit/received_events", "type": "User", "site_admin": false}, "body": "Maybe remove these two reserve spaces as well. I think they are only needed if to be used with a Python interface. But this is C++ only and handled during graph rewrite, so I guess they are not needed here.", "created_at": "2017-04-12T21:41:46Z", "updated_at": "2017-04-13T23:37:54Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8968#discussion_r111267430", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8968", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/111267430"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8968#discussion_r111267430"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8968"}}, "body_html": "<p>Maybe remove these two reserve spaces as well. I think they are only needed if to be used with a Python interface. But this is C++ only and handled during graph rewrite, so I guess they are not needed here.</p>", "body_text": "Maybe remove these two reserve spaces as well. I think they are only needed if to be used with a Python interface. But this is C++ only and handled during graph rewrite, so I guess they are not needed here."}