{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/110266212", "pull_request_review_id": 31383143, "id": 110266212, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDI2NjIxMg==", "diff_hunk": "@@ -496,23 +568,115 @@ class MklLayoutRewritePass : public GraphOptimizationPass {\n   //         Otherwise, it is not updated.\n   Status RewriteNode(std::unique_ptr<Graph>* g, Node* n, const RewriteInfo* ri);\n \n+  // Create a node that will feed a list of TF tensors to the new\n+  // node that we are constructing.\n+  //\n+  // @input g - input graph,\n+  // @input inputs - inputs to old node that we are using for constructing\n+  //                 new inputs,\n+  // @input input_idx - the index in the 'inputs' vector pointing to the\n+  //                    current input that we have processed so far\n+  // @output input_idx - index will be incremented by the number of nodes\n+  //                     from 'inputs' that are processed\n+  // @input list_length - The expected length of list of TF tensors\n+  // @output output_nodes - the list of new nodes creating TF tensors\n+  //\n+  // @return None\n+  void GetNodesProducingTFTensorList(\n+    const gtl::InlinedVector<std::pair<Node*, int>, 4>& inputs,\n+    int* input_idx, int list_length,\n+    std::vector<NodeBuilder::NodeOut>* output_nodes);\n+\n+  // Create a node that will feed a list of Mkl tensors to the new\n+  // node that we are constructing.\n+  //\n+  // @input g - input graph,\n+  // @input inputs - inputs to old node that we are using for constructing\n+  //                 new inputs,\n+  // @input input_idx - the index in the 'inputs' vector pointing to the\n+  //                    current input that we have processed so far\n+  // @output input_idx - index will be incremented by the number of nodes\n+  //                     from 'inputs' that are processed\n+  // @input list_length - The expected length of list of Mkl tensors\n+  // @output output_nodes - the list of new nodes creating Mkl tensors\n+  //\n+  // @return None\n+  void GetNodesProducingMklTensorList(std::unique_ptr<Graph>* g,\n+    const gtl::InlinedVector<std::pair<Node*, int>, 4>& inputs,\n+    int* input_idx, int list_length,\n+    std::vector<NodeBuilder::NodeOut>* output_nodes);\n+\n+  // Create a node that will feed an Mkl tensor to the new\n+  // node that we are constructing. The output node could be (1) 'n'\n+  // if it is Mkl layer, or (2) a dummy node producing dummy Mkl tensor\n+  // if 'n' is not an Mkl layer.\n+  //\n+  // @input g - input graph,\n+  // @input n - Node based on which we are creating Mkl node,\n+  // @input n_output_slot - the output slot of node 'n'\n+  //            which is feeding to the node that we are constructing\n+  // @output mkl_node - the new node that will feed Mkl tensor\n+  // @output mkl_node_output_slot - the slot number of mkl_node that\n+  //                                will feed the tensor\n+  // @return None\n+  void GetNodeProducingMklTensor(std::unique_ptr<Graph>* g, Node* n,\n+    int n_output_slot, Node** mkl_node, int* mkl_node_output_slot);\n+\n   // Setup new inputs using old inputs 'inputs' for the rewritten node in 'nb'\n-  // in graph 'g'. Original node is input in 'orign'.\n+  // in graph 'g'. Original node is input in 'old_node'. Inputs to 'nb' are\n+  // set up in contiguous fashion. 'workspace_tensors' carry graph nodes\n+  // producing workspace edges if 'are_workspace_tensors_available' is true.\n+  // Otherwise, 'workspace_tensors' is empty vector.\n   //\n-  // For details, refer to 'Number of inputs after rewriting' section in the\n+  // For details, refer to 'Ordering of inputs after rewriting' section in the\n   // documentation above.\n   //\n   // Returns Status::OK() if setting up inputs is successful, otherwise\n   // returns appropriate status code.\n+  int SetUpContiguousInputs(std::unique_ptr<Graph>* g,\n+    const gtl::InlinedVector<std::pair<Node*, int>, 4>& old_node_inputs,\n+    NodeBuilder* nb, Node* old_node,\n+    std::vector<NodeBuilder::NodeOut>* workspace_tensors,\n+    bool are_workspace_tensors_available);\n+\n+#if 0", "path": "tensorflow/core/graph/mkl_layout_pass.cc", "position": null, "original_position": 334, "commit_id": "b5ef5bfcb39a0ba0cef4e1f7e9d766344f918ab2", "original_commit_id": "562d1842de0a50cccfb44597c00c1a30e9483c35", "user": {"login": "zhangyaobit", "id": 1034716, "node_id": "MDQ6VXNlcjEwMzQ3MTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1034716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhangyaobit", "html_url": "https://github.com/zhangyaobit", "followers_url": "https://api.github.com/users/zhangyaobit/followers", "following_url": "https://api.github.com/users/zhangyaobit/following{/other_user}", "gists_url": "https://api.github.com/users/zhangyaobit/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhangyaobit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhangyaobit/subscriptions", "organizations_url": "https://api.github.com/users/zhangyaobit/orgs", "repos_url": "https://api.github.com/users/zhangyaobit/repos", "events_url": "https://api.github.com/users/zhangyaobit/events{/privacy}", "received_events_url": "https://api.github.com/users/zhangyaobit/received_events", "type": "User", "site_admin": false}, "body": "Remove?", "created_at": "2017-04-06T20:59:48Z", "updated_at": "2017-04-13T23:37:54Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8968#discussion_r110266212", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8968", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/110266212"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8968#discussion_r110266212"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8968"}}, "body_html": "<p>Remove?</p>", "body_text": "Remove?"}