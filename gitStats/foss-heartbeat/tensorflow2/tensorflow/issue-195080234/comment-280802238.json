{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/280802238", "html_url": "https://github.com/tensorflow/tensorflow/issues/6268#issuecomment-280802238", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6268", "id": 280802238, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDgwMjIzOA==", "user": {"login": "suharshs", "id": 1450614, "node_id": "MDQ6VXNlcjE0NTA2MTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1450614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suharshs", "html_url": "https://github.com/suharshs", "followers_url": "https://api.github.com/users/suharshs/followers", "following_url": "https://api.github.com/users/suharshs/following{/other_user}", "gists_url": "https://api.github.com/users/suharshs/gists{/gist_id}", "starred_url": "https://api.github.com/users/suharshs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suharshs/subscriptions", "organizations_url": "https://api.github.com/users/suharshs/orgs", "repos_url": "https://api.github.com/users/suharshs/repos", "events_url": "https://api.github.com/users/suharshs/events{/privacy}", "received_events_url": "https://api.github.com/users/suharshs/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-18T00:19:22Z", "updated_at": "2017-02-18T00:19:22Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=756520\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kmalakoff\">@kmalakoff</a> Thank you for your offer to help out with our C++ gradients.</p>\n<p>Here are some instructions for anyone who wants to help out:</p>\n<p>Gradients are currently being ported from<br>\n<a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/python/ops\">python</a><br>\nto C++ (in this directory).</p>\n<p>Contributions are welcome and much appreciated; please follow the instructions<br>\nbelow.</p>\n<ol>\n<li>\n<p>Create the op gradient function in <code>foo_grad.cc</code> corresponding to the<br>\n<code>foo_grad.py</code> file where the op originated (i.e. <code>array_grad.py</code> op<br>\ngradients should be written in <code>array_grad.cc</code>).</p>\n</li>\n<li>\n<p>Write the op gradient with the following naming scheme:</p>\n<pre><code>Status OpNameGrad(const Scope&amp; scope, const Operation&amp; op,\n                  const std::vector&lt;Output&gt;&amp; grad_inputs,\n                  std::vector&lt;Output&gt;* grad_outputs) {\n  ...\n  return scope.status();\n}\nREGISTER_GRADIENT_OP(\"OpName\", OpNameGrad);\n</code></pre>\n</li>\n<li>\n<p>Ops gradients are implemented by using the <a href=\"https://www.tensorflow.org/api_docs/cc/\" rel=\"nofollow\">C++<br>\nAPI</a>.</p>\n</li>\n<li>\n<p>Tests should be included in <code>foo_grad_test.cc</code>. Please see<br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/cc/gradients/array_grad_test.cc\"><code>array_grad_test.cc</code></a><br>\nfor an many examples. Tests are as simple as, creating a placeholder input<br>\nfor the op's inputs and calling <code>RunTest</code> (<code>RunTest</code> uses a <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/cc/framework/gradient_checker.cc\">gradient<br>\nchecker</a><br>\nto verify that the theoretical gradient matches the numeric gradient). For<br>\nexample:</p>\n<pre><code>TEST_F(ArrayGradTest, IdentityGrad) {\n  TensorShape shape({5, 2});\n  auto x = Placeholder(scope_, DT_FLOAT, Placeholder::Shape(shape));\n  auto y = Identity(scope_, x);\n  RunTest(x, shape, y, shape);\n}\n</code></pre>\n</li>\n</ol>\n<p>NOTE: There are some ops that require features from the C++ API that are not yet<br>\nimplemented.</p>\n<ul>\n<li>\n<p>Ops that require PartialTensorShape information cannot yet be implemented.</p>\n</li>\n<li>\n<p>Ops that require SparseTensor or IndexSlices (currently only in python)<br>\ncannot yet be implemented.</p>\n</li>\n<li>\n<p>Maybe more.</p>\n</li>\n</ul>", "body_text": "@kmalakoff Thank you for your offer to help out with our C++ gradients.\nHere are some instructions for anyone who wants to help out:\nGradients are currently being ported from\npython\nto C++ (in this directory).\nContributions are welcome and much appreciated; please follow the instructions\nbelow.\n\n\nCreate the op gradient function in foo_grad.cc corresponding to the\nfoo_grad.py file where the op originated (i.e. array_grad.py op\ngradients should be written in array_grad.cc).\n\n\nWrite the op gradient with the following naming scheme:\nStatus OpNameGrad(const Scope& scope, const Operation& op,\n                  const std::vector<Output>& grad_inputs,\n                  std::vector<Output>* grad_outputs) {\n  ...\n  return scope.status();\n}\nREGISTER_GRADIENT_OP(\"OpName\", OpNameGrad);\n\n\n\nOps gradients are implemented by using the C++\nAPI.\n\n\nTests should be included in foo_grad_test.cc. Please see\narray_grad_test.cc\nfor an many examples. Tests are as simple as, creating a placeholder input\nfor the op's inputs and calling RunTest (RunTest uses a gradient\nchecker\nto verify that the theoretical gradient matches the numeric gradient). For\nexample:\nTEST_F(ArrayGradTest, IdentityGrad) {\n  TensorShape shape({5, 2});\n  auto x = Placeholder(scope_, DT_FLOAT, Placeholder::Shape(shape));\n  auto y = Identity(scope_, x);\n  RunTest(x, shape, y, shape);\n}\n\n\n\nNOTE: There are some ops that require features from the C++ API that are not yet\nimplemented.\n\n\nOps that require PartialTensorShape information cannot yet be implemented.\n\n\nOps that require SparseTensor or IndexSlices (currently only in python)\ncannot yet be implemented.\n\n\nMaybe more.", "body": "@kmalakoff Thank you for your offer to help out with our C++ gradients.\r\n\r\nHere are some instructions for anyone who wants to help out:\r\n\r\nGradients are currently being ported from\r\n[python](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/python/ops)\r\nto C++ (in this directory).\r\n\r\nContributions are welcome and much appreciated; please follow the instructions\r\nbelow.\r\n\r\n1.  Create the op gradient function in `foo_grad.cc` corresponding to the\r\n    `foo_grad.py` file where the op originated (i.e. `array_grad.py` op\r\n    gradients should be written in `array_grad.cc`).\r\n\r\n2.  Write the op gradient with the following naming scheme:\r\n\r\n        Status OpNameGrad(const Scope& scope, const Operation& op,\r\n                          const std::vector<Output>& grad_inputs,\r\n                          std::vector<Output>* grad_outputs) {\r\n          ...\r\n          return scope.status();\r\n        }\r\n        REGISTER_GRADIENT_OP(\"OpName\", OpNameGrad);\r\n\r\n3.  Ops gradients are implemented by using the [C++\r\n    API](https://www.tensorflow.org/api_docs/cc/).\r\n\r\n4.  Tests should be included in `foo_grad_test.cc`. Please see\r\n    [`array_grad_test.cc`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/cc/gradients/array_grad_test.cc)\r\n    for an many examples. Tests are as simple as, creating a placeholder input\r\n    for the op's inputs and calling `RunTest` (`RunTest` uses a [gradient\r\n    checker](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/cc/framework/gradient_checker.cc)\r\n    to verify that the theoretical gradient matches the numeric gradient). For\r\n    example:\r\n\r\n        TEST_F(ArrayGradTest, IdentityGrad) {\r\n          TensorShape shape({5, 2});\r\n          auto x = Placeholder(scope_, DT_FLOAT, Placeholder::Shape(shape));\r\n          auto y = Identity(scope_, x);\r\n          RunTest(x, shape, y, shape);\r\n        }\r\n\r\nNOTE: There are some ops that require features from the C++ API that are not yet\r\nimplemented.\r\n\r\n*   Ops that require PartialTensorShape information cannot yet be implemented.\r\n\r\n*   Ops that require SparseTensor or IndexSlices (currently only in python)\r\n    cannot yet be implemented.\r\n\r\n*   Maybe more."}