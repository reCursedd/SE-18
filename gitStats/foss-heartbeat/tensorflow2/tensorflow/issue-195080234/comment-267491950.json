{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/267491950", "html_url": "https://github.com/tensorflow/tensorflow/issues/6268#issuecomment-267491950", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6268", "id": 267491950, "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzQ5MTk1MA==", "user": {"login": "kmalakoff", "id": 756520, "node_id": "MDQ6VXNlcjc1NjUyMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/756520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmalakoff", "html_url": "https://github.com/kmalakoff", "followers_url": "https://api.github.com/users/kmalakoff/followers", "following_url": "https://api.github.com/users/kmalakoff/following{/other_user}", "gists_url": "https://api.github.com/users/kmalakoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmalakoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmalakoff/subscriptions", "organizations_url": "https://api.github.com/users/kmalakoff/orgs", "repos_url": "https://api.github.com/users/kmalakoff/repos", "events_url": "https://api.github.com/users/kmalakoff/events{/privacy}", "received_events_url": "https://api.github.com/users/kmalakoff/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-16T01:15:27Z", "updated_at": "2016-12-16T01:15:27Z", "author_association": "NONE", "body_html": "<p>Thank you for the information. I will try integrating the gradient functionality for some training cases in C++ over the weekend.</p>\n<p>Quick follow up on the C vs C++ APIs...I was wondering about their internal use at Google and recommendations in general. Specifically: 1) why there are both C variants given the extra work to support multiple APIs? 2) which one I should be focussing on?</p>\n<p>I'm assuming that the C++ API is the most commonly used one internally at Google (ignoring Python for a second) and maybe the C API was developed mainly for porting purposes (eg. more support with a variety of compilers and easier integration across more languages and platforms)? Thank you in advance for any insights into the reasoning and where to focus.</p>\n<p>I'll scan through the \"contributions welcome\" labels after giving the gradients code a try with an eye on porting to other languages.</p>", "body_text": "Thank you for the information. I will try integrating the gradient functionality for some training cases in C++ over the weekend.\nQuick follow up on the C vs C++ APIs...I was wondering about their internal use at Google and recommendations in general. Specifically: 1) why there are both C variants given the extra work to support multiple APIs? 2) which one I should be focussing on?\nI'm assuming that the C++ API is the most commonly used one internally at Google (ignoring Python for a second) and maybe the C API was developed mainly for porting purposes (eg. more support with a variety of compilers and easier integration across more languages and platforms)? Thank you in advance for any insights into the reasoning and where to focus.\nI'll scan through the \"contributions welcome\" labels after giving the gradients code a try with an eye on porting to other languages.", "body": "Thank you for the information. I will try integrating the gradient functionality for some training cases in C++ over the weekend.\r\n\r\nQuick follow up on the C vs C++ APIs...I was wondering about their internal use at Google and recommendations in general. Specifically: 1) why there are both C variants given the extra work to support multiple APIs? 2) which one I should be focussing on?\r\n\r\nI'm assuming that the C++ API is the most commonly used one internally at Google (ignoring Python for a second) and maybe the C API was developed mainly for porting purposes (eg. more support with a variety of compilers and easier integration across more languages and platforms)? Thank you in advance for any insights into the reasoning and where to focus. \r\n\r\nI'll scan through the \"contributions welcome\" labels after giving the gradients code a try with an eye on porting to other languages."}