{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23158", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23158/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23158/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23158/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23158", "id": 372445913, "node_id": "MDU6SXNzdWUzNzI0NDU5MTM=", "number": 23158, "title": "Mysterious infinite run", "user": {"login": "dy-octa", "id": 13358837, "node_id": "MDQ6VXNlcjEzMzU4ODM3", "avatar_url": "https://avatars2.githubusercontent.com/u/13358837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dy-octa", "html_url": "https://github.com/dy-octa", "followers_url": "https://api.github.com/users/dy-octa/followers", "following_url": "https://api.github.com/users/dy-octa/following{/other_user}", "gists_url": "https://api.github.com/users/dy-octa/gists{/gist_id}", "starred_url": "https://api.github.com/users/dy-octa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dy-octa/subscriptions", "organizations_url": "https://api.github.com/users/dy-octa/orgs", "repos_url": "https://api.github.com/users/dy-octa/repos", "events_url": "https://api.github.com/users/dy-octa/events{/privacy}", "received_events_url": "https://api.github.com/users/dy-octa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1097547538, "node_id": "MDU6TGFiZWwxMDk3NTQ3NTM4", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:gpu", "name": "comp:gpu", "color": "0052cc", "default": false}, {"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-10-22T09:11:16Z", "updated_at": "2018-10-23T01:44:22Z", "closed_at": "2018-10-23T01:44:22Z", "author_association": "NONE", "body_html": "<p><em>Please make sure that this is a bug. As per our <a href=\"https://github.com/tensorflow/tensorflow/blob/master/ISSUES.md\">GitHub Policy</a>, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template</em></p>\n<p><strong>System information</strong></p>\n<ul>\n<li>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes</li>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04</li>\n<li>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A</li>\n<li>TensorFlow installed from (source or binary): binary</li>\n<li>TensorFlow version (use command below): 1.9.0</li>\n<li>Python version: 3.6</li>\n<li>Bazel version (if compiling from source): N/A</li>\n<li>GCC/Compiler version (if compiling from source): N/A</li>\n<li>CUDA/cuDNN version: 9.1.85</li>\n<li>GPU model and memory: P100 16GB</li>\n</ul>\n<p>You can collect some of this information using our environment capture <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">script</a><br>\nYou can also obtain the TensorFlow version with<br>\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<p><strong>Describe the current behavior</strong></p>\n<p><strong>Update: I've managed to make a minimal example here: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"372454132\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/23159\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/23159/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/23159\">#23159</a></strong><br>\nPlease close this issue.</p>\n<pre><code>    check_vars = model.trainable_variables()  \n\n    check_grad = tf.cond(cond,  \n\n                              lambda :[g if isinstance(g, tf.Tensor) else 0.0 for g in  \n\n                                       tf.gradients(model.loss, check_vars)],  \n\n                              lambda : [0.0] * len(check_vars))  \n\n    sess.run(check_grad)  \n</code></pre>\n<p>In my own model (a Tacotron2 implementation), the last line will fall into infinite run and never return when tf is run on GPU and cond holds False, i.e. it should directly return a tensor of zeros, while the results will be correct when tf is run on CPU, or cond holds True.<br>\n<strong>Describe the expected behavior</strong></p>\n<p><strong>Code to reproduce the issue</strong><br>\nI didn't manage to reproduce the case on a model simple enough.<br>\n<strong>Other info / logs</strong></p>", "body_text": "Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.9.0\nPython version: 3.6\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: 9.1.85\nGPU model and memory: P100 16GB\n\nYou can collect some of this information using our environment capture script\nYou can also obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the current behavior\nUpdate: I've managed to make a minimal example here: #23159\nPlease close this issue.\n    check_vars = model.trainable_variables()  \n\n    check_grad = tf.cond(cond,  \n\n                              lambda :[g if isinstance(g, tf.Tensor) else 0.0 for g in  \n\n                                       tf.gradients(model.loss, check_vars)],  \n\n                              lambda : [0.0] * len(check_vars))  \n\n    sess.run(check_grad)  \n\nIn my own model (a Tacotron2 implementation), the last line will fall into infinite run and never return when tf is run on GPU and cond holds False, i.e. it should directly return a tensor of zeros, while the results will be correct when tf is run on CPU, or cond holds True.\nDescribe the expected behavior\nCode to reproduce the issue\nI didn't manage to reproduce the case on a model simple enough.\nOther info / logs", "body": "<em>Please make sure that this is a bug. As per our [GitHub Policy](https://github.com/tensorflow/tensorflow/blob/master/ISSUES.md), we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template</em>\r\n\r\n**System information**\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\r\n- TensorFlow installed from (source or binary): binary\r\n- TensorFlow version (use command below): 1.9.0\r\n- Python version: 3.6\r\n- Bazel version (if compiling from source): N/A\r\n- GCC/Compiler version (if compiling from source): N/A\r\n- CUDA/cuDNN version: 9.1.85\r\n- GPU model and memory: P100 16GB\r\n\r\n\r\nYou can collect some of this information using our environment capture [script](https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh)\r\nYou can also obtain the TensorFlow version with\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n**Describe the current behavior**\r\n\r\n**Update: I've managed to make a minimal example here: https://github.com/tensorflow/tensorflow/issues/23159**\r\nPlease close this issue.\r\n\r\n\r\n        check_vars = model.trainable_variables()  \r\n\r\n        check_grad = tf.cond(cond,  \r\n\r\n                                  lambda :[g if isinstance(g, tf.Tensor) else 0.0 for g in  \r\n\r\n                                           tf.gradients(model.loss, check_vars)],  \r\n\r\n                                  lambda : [0.0] * len(check_vars))  \r\n\r\n        sess.run(check_grad)  \r\nIn my own model (a Tacotron2 implementation), the last line will fall into infinite run and never return when tf is run on GPU and cond holds False, i.e. it should directly return a tensor of zeros, while the results will be correct when tf is run on CPU, or cond holds True.\r\n**Describe the expected behavior**\r\n\r\n**Code to reproduce the issue**\r\nI didn't manage to reproduce the case on a model simple enough.\r\n**Other info / logs**\r\n\r\n"}