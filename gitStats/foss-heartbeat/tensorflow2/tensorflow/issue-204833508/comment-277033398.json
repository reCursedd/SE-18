{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/277033398", "html_url": "https://github.com/tensorflow/tensorflow/issues/7214#issuecomment-277033398", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7214", "id": 277033398, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NzAzMzM5OA==", "user": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-02T18:00:57Z", "updated_at": "2017-02-02T18:00:57Z", "author_association": "MEMBER", "body_html": "<p>Good catch. While col_offset isn't perfect, I think using ast is already more reliable than using a regex or other simple search.  In particular, as you discovered, it looks like a bug in col_offset for list comprehensions. Generators, tuples, (even plain lists) work fine.  I can work around this by scanning backward to find the opening [ if it is a list comprehension, but that may be difficult to do in the presence of comments and multilines...</p>\n<div class=\"highlight highlight-source-python\"><pre>tf.concat([       <span class=\"pl-c\"><span class=\"pl-c\">#</span> cool [ ]</span>\nx <span class=\"pl-k\">for</span> x <span class=\"pl-k\">in</span> blah], b)</pre></div>\n<p>so i'll probably limit it to a sole whitespace allowing scan backwards and throw an error otherwise.</p>\n<p>As far as the <code>tf.image.resize_images</code> that happened between 0.10 and 0.11, so it is currently outside the scope of what we targeted with the script. We would welcome a contribution to improve the converter to handle it.</p>", "body_text": "Good catch. While col_offset isn't perfect, I think using ast is already more reliable than using a regex or other simple search.  In particular, as you discovered, it looks like a bug in col_offset for list comprehensions. Generators, tuples, (even plain lists) work fine.  I can work around this by scanning backward to find the opening [ if it is a list comprehension, but that may be difficult to do in the presence of comments and multilines...\ntf.concat([       # cool [ ]\nx for x in blah], b)\nso i'll probably limit it to a sole whitespace allowing scan backwards and throw an error otherwise.\nAs far as the tf.image.resize_images that happened between 0.10 and 0.11, so it is currently outside the scope of what we targeted with the script. We would welcome a contribution to improve the converter to handle it.", "body": "Good catch. While col_offset isn't perfect, I think using ast is already more reliable than using a regex or other simple search.  In particular, as you discovered, it looks like a bug in col_offset for list comprehensions. Generators, tuples, (even plain lists) work fine.  I can work around this by scanning backward to find the opening [ if it is a list comprehension, but that may be difficult to do in the presence of comments and multilines...\r\n```python\r\ntf.concat([       # cool [ ]\r\nx for x in blah], b)\r\n```\r\nso i'll probably limit it to a sole whitespace allowing scan backwards and throw an error otherwise.\r\n\r\nAs far as the `tf.image.resize_images` that happened between 0.10 and 0.11, so it is currently outside the scope of what we targeted with the script. We would welcome a contribution to improve the converter to handle it. "}