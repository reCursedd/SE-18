{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/319419415", "html_url": "https://github.com/tensorflow/tensorflow/issues/11937#issuecomment-319419415", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11937", "id": 319419415, "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTQxOTQxNQ==", "user": {"login": "tampler", "id": 2816743, "node_id": "MDQ6VXNlcjI4MTY3NDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2816743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tampler", "html_url": "https://github.com/tampler", "followers_url": "https://api.github.com/users/tampler/followers", "following_url": "https://api.github.com/users/tampler/following{/other_user}", "gists_url": "https://api.github.com/users/tampler/gists{/gist_id}", "starred_url": "https://api.github.com/users/tampler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tampler/subscriptions", "organizations_url": "https://api.github.com/users/tampler/orgs", "repos_url": "https://api.github.com/users/tampler/repos", "events_url": "https://api.github.com/users/tampler/events{/privacy}", "received_events_url": "https://api.github.com/users/tampler/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-01T16:14:16Z", "updated_at": "2017-08-01T16:14:16Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> &gt; New hardware is typically added through XLA interface<br>\nWell, XLA is a graph compiler and a relatively new feature. It relies on LLVM backend to generate instructions for a (co)processor.  In my case, I need a memory mapped device support with a direct access to local TF memory, e.g shared buffers. TF should directly call my API methods, wrapped as C++ kernels, instead of generating an instruction stream thru LLVM XLA</p>\n<p>My TPU comes into a play when TF launches the session run() method. I need to call my kernels, such as conv2 or add and pass pointers to shared buffers to my DMA implementation.</p>\n<p>Something similar was implemented to support GPUs. However, I need a more lightweight implementation with a limited number of kernels</p>", "body_text": "@yaroslavvb > New hardware is typically added through XLA interface\nWell, XLA is a graph compiler and a relatively new feature. It relies on LLVM backend to generate instructions for a (co)processor.  In my case, I need a memory mapped device support with a direct access to local TF memory, e.g shared buffers. TF should directly call my API methods, wrapped as C++ kernels, instead of generating an instruction stream thru LLVM XLA\nMy TPU comes into a play when TF launches the session run() method. I need to call my kernels, such as conv2 or add and pass pointers to shared buffers to my DMA implementation.\nSomething similar was implemented to support GPUs. However, I need a more lightweight implementation with a limited number of kernels", "body": "@yaroslavvb > New hardware is typically added through XLA interface\r\nWell, XLA is a graph compiler and a relatively new feature. It relies on LLVM backend to generate instructions for a (co)processor.  In my case, I need a memory mapped device support with a direct access to local TF memory, e.g shared buffers. TF should directly call my API methods, wrapped as C++ kernels, instead of generating an instruction stream thru LLVM XLA\r\n\r\nMy TPU comes into a play when TF launches the session run() method. I need to call my kernels, such as conv2 or add and pass pointers to shared buffers to my DMA implementation.\r\n\r\nSomething similar was implemented to support GPUs. However, I need a more lightweight implementation with a limited number of kernels\r\n\r\n"}