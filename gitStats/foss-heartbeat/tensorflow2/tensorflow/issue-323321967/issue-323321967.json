{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19299", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19299/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19299/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19299/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19299", "id": 323321967, "node_id": "MDU6SXNzdWUzMjMzMjE5Njc=", "number": 19299, "title": "resource_mgr.h violates its own thread safety annotations", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-05-15T17:57:09Z", "updated_at": "2018-05-16T20:32:24Z", "closed_at": "2018-05-16T20:32:24Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes.</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: MacOS 10.13.4</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Source (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/ff6be80a1ec3c353ebd0d17e2f0b46d9097310db/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/ff6be80a1ec3c353ebd0d17e2f0b46d9097310db\"><tt>ff6be80</tt></a>)</li>\n<li><strong>TensorFlow version (use command below)</strong>: <code>b'v1.8.0-1663-gb2511764a7' 1.8.0</code></li>\n<li><strong>Python version</strong>: 3.6.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>: <code>0.13.0-homebrew</code></li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: <code>Apple LLVM version 9.1.0 (clang-902.0.39.1)</code></li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Line <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/de4a6e646be56ca59c78dd6f92f8f6bcc7196696/tensorflow/core/framework/resource_mgr.h#L527\">tensorflow/tensorflow/core/framework/resource_mgr.h</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 527\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/de4a6e646be56ca59c78dd6f92f8f6bcc7196696\">de4a6e6</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L527\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"527\"></td>\n          <td id=\"LC527\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> ctx-&gt;<span class=\"pl-c1\">set_output</span>(<span class=\"pl-c1\">0</span>, resource_); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n accesses <code>resource_</code> without holding <code>mutex_</code>.  This is causing a warning for some custom op code of mine:</p>\n<pre><code>Installing collected packages: debate\n  Found existing installation: debate 0.0.1\n    Uninstalling debate-0.0.1:\n      Successfully uninstalled debate-0.0.1\n  Running setup.py develop for debate\n    Complete output from command /Users/irving/anaconda/envs/openai/bin/python -c \"import setuptools, tokenize;__file__='/Users/irving/openai/debate/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" develop --no-deps:\n    running develop\n    running egg_info\n    writing debate.egg-info/PKG-INFO\n    writing dependency_links to debate.egg-info/dependency_links.txt\n    writing requirements to debate.egg-info/requires.txt\n    writing top-level names to debate.egg-info/top_level.txt\n    file debate.py (for module debate) not found\n    reading manifest file 'debate.egg-info/SOURCES.txt'\n    reading manifest template 'MANIFEST.in'\n    writing manifest file 'debate.egg-info/SOURCES.txt'\n    running build_ext\n    building 'debate_ops' extension\n    g++ -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/irving/anaconda/envs/openai/include -arch x86_64 -I/Users/irving/anaconda/envs/openai/include -arch x86_64 -I/Users/irving/anaconda/envs/openai/include/python3.6m -c debate/search.cc -o build/temp.macosx-10.7-x86_64-3.6/debate/search.o -std=c++1z -Wall -Werror -Wno-sign-compare -Wthread-safety -stdlib=libc++ -I/Users/irving/anaconda/envs/openai/lib/python3.6/site-packages/tensorflow/include -D_GLIBCXX_USE_CXX11_ABI=0\n    In file included from debate/search.cc:7:\n    /Users/irving/anaconda/envs/openai/lib/python3.6/site-packages/tensorflow/include/tensorflow/core/framework/resource_mgr.h:527:22: error: passing variable 'resource_' by reference requires holding mutex 'mutex_' [-Werror,-Wthread-safety-reference]\n      ctx-&gt;set_output(0, resource_);\n                         ^\n    /Users/irving/anaconda/envs/openai/lib/python3.6/site-packages/tensorflow/include/tensorflow/core/framework/resource_mgr.h:334:12: note: in instantiation of member function 'tensorflow::ResourceHandleOp&lt;debate::(anonymous namespace)::Search&gt;::Compute' requested here\n      explicit ResourceHandleOp(OpKernelConstruction* context);\n               ^\n    debate/search.cc:463:1: note: in instantiation of member function 'tensorflow::ResourceHandleOp&lt;debate::(anonymous namespace)::Search&gt;::ResourceHandleOp' requested here\n    REGISTER_RESOURCE_HANDLE_KERNEL(Search);\n    ^\n    /Users/irving/anaconda/envs/openai/lib/python3.6/site-packages/tensorflow/include/tensorflow/core/framework/resource_mgr.h:350:27: note: expanded from macro 'REGISTER_RESOURCE_HANDLE_KERNEL'\n                              ResourceHandleOp&lt;Type&gt;)\n                              ^\n    1 error generated.\n    error: command 'g++' failed with exit status 1\n</code></pre>\n<p>The code is at least <em>almost</em> correct, since</p>\n<ol>\n<li>The use of <code>resource_</code> outside the lock is read only</li>\n<li><code>resource_</code> is only written to inside the lock.</li>\n<li>The unlocked read occurs only if <code>initialized_</code> is set to true.</li>\n</ol>\n<p>However, it looks like there is still a race condition:</p>\n<ol>\n<li>Two threads could both detect that <code>initialized_</code> is false at the same time.</li>\n<li>They both try to grab the lock.</li>\n<li>One of them succeeds, does some initialization, and allocates the resource.</li>\n<li>Once the first thread releases the lock, the second thread allocates the resource a second time.</li>\n<li>Possibly (I'm not sure) the two threads see different values when they call <code>set_output</code>.</li>\n</ol>\n<p>The moral of this story is probably to not ignore thread safety warnings.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes.\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.13.4\nTensorFlow installed from (source or binary): Source (ff6be80)\nTensorFlow version (use command below): b'v1.8.0-1663-gb2511764a7' 1.8.0\nPython version: 3.6.2\nBazel version (if compiling from source): 0.13.0-homebrew\nGCC/Compiler version (if compiling from source): Apple LLVM version 9.1.0 (clang-902.0.39.1)\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A\n\nDescribe the problem\nLine \n  \n    \n      tensorflow/tensorflow/core/framework/resource_mgr.h\n    \n    \n         Line 527\n      in\n      de4a6e6\n    \n    \n    \n    \n\n        \n          \n           ctx->set_output(0, resource_); \n        \n    \n  \n\n accesses resource_ without holding mutex_.  This is causing a warning for some custom op code of mine:\nInstalling collected packages: debate\n  Found existing installation: debate 0.0.1\n    Uninstalling debate-0.0.1:\n      Successfully uninstalled debate-0.0.1\n  Running setup.py develop for debate\n    Complete output from command /Users/irving/anaconda/envs/openai/bin/python -c \"import setuptools, tokenize;__file__='/Users/irving/openai/debate/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" develop --no-deps:\n    running develop\n    running egg_info\n    writing debate.egg-info/PKG-INFO\n    writing dependency_links to debate.egg-info/dependency_links.txt\n    writing requirements to debate.egg-info/requires.txt\n    writing top-level names to debate.egg-info/top_level.txt\n    file debate.py (for module debate) not found\n    reading manifest file 'debate.egg-info/SOURCES.txt'\n    reading manifest template 'MANIFEST.in'\n    writing manifest file 'debate.egg-info/SOURCES.txt'\n    running build_ext\n    building 'debate_ops' extension\n    g++ -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/irving/anaconda/envs/openai/include -arch x86_64 -I/Users/irving/anaconda/envs/openai/include -arch x86_64 -I/Users/irving/anaconda/envs/openai/include/python3.6m -c debate/search.cc -o build/temp.macosx-10.7-x86_64-3.6/debate/search.o -std=c++1z -Wall -Werror -Wno-sign-compare -Wthread-safety -stdlib=libc++ -I/Users/irving/anaconda/envs/openai/lib/python3.6/site-packages/tensorflow/include -D_GLIBCXX_USE_CXX11_ABI=0\n    In file included from debate/search.cc:7:\n    /Users/irving/anaconda/envs/openai/lib/python3.6/site-packages/tensorflow/include/tensorflow/core/framework/resource_mgr.h:527:22: error: passing variable 'resource_' by reference requires holding mutex 'mutex_' [-Werror,-Wthread-safety-reference]\n      ctx->set_output(0, resource_);\n                         ^\n    /Users/irving/anaconda/envs/openai/lib/python3.6/site-packages/tensorflow/include/tensorflow/core/framework/resource_mgr.h:334:12: note: in instantiation of member function 'tensorflow::ResourceHandleOp<debate::(anonymous namespace)::Search>::Compute' requested here\n      explicit ResourceHandleOp(OpKernelConstruction* context);\n               ^\n    debate/search.cc:463:1: note: in instantiation of member function 'tensorflow::ResourceHandleOp<debate::(anonymous namespace)::Search>::ResourceHandleOp' requested here\n    REGISTER_RESOURCE_HANDLE_KERNEL(Search);\n    ^\n    /Users/irving/anaconda/envs/openai/lib/python3.6/site-packages/tensorflow/include/tensorflow/core/framework/resource_mgr.h:350:27: note: expanded from macro 'REGISTER_RESOURCE_HANDLE_KERNEL'\n                              ResourceHandleOp<Type>)\n                              ^\n    1 error generated.\n    error: command 'g++' failed with exit status 1\n\nThe code is at least almost correct, since\n\nThe use of resource_ outside the lock is read only\nresource_ is only written to inside the lock.\nThe unlocked read occurs only if initialized_ is set to true.\n\nHowever, it looks like there is still a race condition:\n\nTwo threads could both detect that initialized_ is false at the same time.\nThey both try to grab the lock.\nOne of them succeeds, does some initialization, and allocates the resource.\nOnce the first thread releases the lock, the second thread allocates the resource a second time.\nPossibly (I'm not sure) the two threads see different values when they call set_output.\n\nThe moral of this story is probably to not ignore thread safety warnings.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes.\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: MacOS 10.13.4\r\n- **TensorFlow installed from (source or binary)**: Source (ff6be80a1ec3c353ebd0d17e2f0b46d9097310db)\r\n- **TensorFlow version (use command below)**: `b'v1.8.0-1663-gb2511764a7' 1.8.0`\r\n- **Python version**: 3.6.2\r\n- **Bazel version (if compiling from source)**: `0.13.0-homebrew`\r\n- **GCC/Compiler version (if compiling from source)**: `Apple LLVM version 9.1.0 (clang-902.0.39.1)`\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: N/A\r\n\r\n### Describe the problem\r\n\r\nLine https://github.com/tensorflow/tensorflow/blob/de4a6e646be56ca59c78dd6f92f8f6bcc7196696/tensorflow/core/framework/resource_mgr.h#L527 accesses `resource_` without holding `mutex_`.  This is causing a warning for some custom op code of mine:\r\n\r\n```\r\nInstalling collected packages: debate\r\n  Found existing installation: debate 0.0.1\r\n    Uninstalling debate-0.0.1:\r\n      Successfully uninstalled debate-0.0.1\r\n  Running setup.py develop for debate\r\n    Complete output from command /Users/irving/anaconda/envs/openai/bin/python -c \"import setuptools, tokenize;__file__='/Users/irving/openai/debate/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\\r\\n', '\\n');f.close();exec(compile(code, __file__, 'exec'))\" develop --no-deps:\r\n    running develop\r\n    running egg_info\r\n    writing debate.egg-info/PKG-INFO\r\n    writing dependency_links to debate.egg-info/dependency_links.txt\r\n    writing requirements to debate.egg-info/requires.txt\r\n    writing top-level names to debate.egg-info/top_level.txt\r\n    file debate.py (for module debate) not found\r\n    reading manifest file 'debate.egg-info/SOURCES.txt'\r\n    reading manifest template 'MANIFEST.in'\r\n    writing manifest file 'debate.egg-info/SOURCES.txt'\r\n    running build_ext\r\n    building 'debate_ops' extension\r\n    g++ -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -I/Users/irving/anaconda/envs/openai/include -arch x86_64 -I/Users/irving/anaconda/envs/openai/include -arch x86_64 -I/Users/irving/anaconda/envs/openai/include/python3.6m -c debate/search.cc -o build/temp.macosx-10.7-x86_64-3.6/debate/search.o -std=c++1z -Wall -Werror -Wno-sign-compare -Wthread-safety -stdlib=libc++ -I/Users/irving/anaconda/envs/openai/lib/python3.6/site-packages/tensorflow/include -D_GLIBCXX_USE_CXX11_ABI=0\r\n    In file included from debate/search.cc:7:\r\n    /Users/irving/anaconda/envs/openai/lib/python3.6/site-packages/tensorflow/include/tensorflow/core/framework/resource_mgr.h:527:22: error: passing variable 'resource_' by reference requires holding mutex 'mutex_' [-Werror,-Wthread-safety-reference]\r\n      ctx->set_output(0, resource_);\r\n                         ^\r\n    /Users/irving/anaconda/envs/openai/lib/python3.6/site-packages/tensorflow/include/tensorflow/core/framework/resource_mgr.h:334:12: note: in instantiation of member function 'tensorflow::ResourceHandleOp<debate::(anonymous namespace)::Search>::Compute' requested here\r\n      explicit ResourceHandleOp(OpKernelConstruction* context);\r\n               ^\r\n    debate/search.cc:463:1: note: in instantiation of member function 'tensorflow::ResourceHandleOp<debate::(anonymous namespace)::Search>::ResourceHandleOp' requested here\r\n    REGISTER_RESOURCE_HANDLE_KERNEL(Search);\r\n    ^\r\n    /Users/irving/anaconda/envs/openai/lib/python3.6/site-packages/tensorflow/include/tensorflow/core/framework/resource_mgr.h:350:27: note: expanded from macro 'REGISTER_RESOURCE_HANDLE_KERNEL'\r\n                              ResourceHandleOp<Type>)\r\n                              ^\r\n    1 error generated.\r\n    error: command 'g++' failed with exit status 1\r\n```\r\n\r\nThe code is at least *almost* correct, since\r\n\r\n1. The use of `resource_` outside the lock is read only\r\n2. `resource_` is only written to inside the lock.\r\n3. The unlocked read occurs only if `initialized_` is set to true.\r\n\r\nHowever, it looks like there is still a race condition:\r\n\r\n1. Two threads could both detect that `initialized_` is false at the same time.\r\n2. They both try to grab the lock.\r\n3. One of them succeeds, does some initialization, and allocates the resource.\r\n4. Once the first thread releases the lock, the second thread allocates the resource a second time.\r\n5. Possibly (I'm not sure) the two threads see different values when they call `set_output`.\r\n\r\nThe moral of this story is probably to not ignore thread safety warnings."}