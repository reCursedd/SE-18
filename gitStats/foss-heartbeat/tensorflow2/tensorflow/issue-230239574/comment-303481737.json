{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/303481737", "html_url": "https://github.com/tensorflow/tensorflow/pull/10084#issuecomment-303481737", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10084", "id": 303481737, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzQ4MTczNw==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-23T17:56:43Z", "updated_at": "2017-05-23T17:56:43Z", "author_association": "MEMBER", "body_html": "<p>Thanks for the PR <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=283711\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ctava\">@ctava</a></p>\n<p>Working with multiple-graphs is not an anti-pattern in the Go API (or C++, or Java, or C for that matter) as these APIs do not have an implicit global graph like the Python API does. You should not hesitate from using multiple Graph objects in the same Go program.</p>\n<p>If that is the case, do you still want to pursue this PR?</p>\n<p>If you really need to extend an existing graph, then something like this might be necessary. I'm a bit torn between adding a <code>Scope.ImportGraphDef</code> vs. this approach. Currently, the <code>Scope</code> API makes for a clear separation between construction and use of the graph which will break if you can create a <code>Scope</code> with an arbitrary graph. It may be okay to forgo that property, but still, it is something that we're giving up :). (Adding a <code>Scope.ImportGraphDef</code> won't do that).</p>\n<p>Do let us know if you need this functionality to extend a graph (as opposed to creating a different one) and we can take the PR further.</p>\n<p>Thanks!</p>\n<p>FYI <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=170179\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jhseu\">@jhseu</a></p>", "body_text": "Thanks for the PR @ctava\nWorking with multiple-graphs is not an anti-pattern in the Go API (or C++, or Java, or C for that matter) as these APIs do not have an implicit global graph like the Python API does. You should not hesitate from using multiple Graph objects in the same Go program.\nIf that is the case, do you still want to pursue this PR?\nIf you really need to extend an existing graph, then something like this might be necessary. I'm a bit torn between adding a Scope.ImportGraphDef vs. this approach. Currently, the Scope API makes for a clear separation between construction and use of the graph which will break if you can create a Scope with an arbitrary graph. It may be okay to forgo that property, but still, it is something that we're giving up :). (Adding a Scope.ImportGraphDef won't do that).\nDo let us know if you need this functionality to extend a graph (as opposed to creating a different one) and we can take the PR further.\nThanks!\nFYI @jhseu", "body": "Thanks for the PR @ctava \r\n\r\nWorking with multiple-graphs is not an anti-pattern in the Go API (or C++, or Java, or C for that matter) as these APIs do not have an implicit global graph like the Python API does. You should not hesitate from using multiple Graph objects in the same Go program.\r\n\r\nIf that is the case, do you still want to pursue this PR?\r\n\r\nIf you really need to extend an existing graph, then something like this might be necessary. I'm a bit torn between adding a `Scope.ImportGraphDef` vs. this approach. Currently, the `Scope` API makes for a clear separation between construction and use of the graph which will break if you can create a `Scope` with an arbitrary graph. It may be okay to forgo that property, but still, it is something that we're giving up :). (Adding a `Scope.ImportGraphDef` won't do that).\r\n\r\nDo let us know if you need this functionality to extend a graph (as opposed to creating a different one) and we can take the PR further.\r\n\r\nThanks!\r\n\r\nFYI @jhseu "}