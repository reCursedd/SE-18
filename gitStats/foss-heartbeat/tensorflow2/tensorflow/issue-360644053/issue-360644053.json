{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22297", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22297/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22297/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22297/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22297", "id": 360644053, "node_id": "MDU6SXNzdWUzNjA2NDQwNTM=", "number": 22297, "title": "shared_embedding_columns  with partitioner  is  ERROR", "user": {"login": "qiang2008", "id": 15884651, "node_id": "MDQ6VXNlcjE1ODg0NjUx", "avatar_url": "https://avatars2.githubusercontent.com/u/15884651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qiang2008", "html_url": "https://github.com/qiang2008", "followers_url": "https://api.github.com/users/qiang2008/followers", "following_url": "https://api.github.com/users/qiang2008/following{/other_user}", "gists_url": "https://api.github.com/users/qiang2008/gists{/gist_id}", "starred_url": "https://api.github.com/users/qiang2008/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qiang2008/subscriptions", "organizations_url": "https://api.github.com/users/qiang2008/orgs", "repos_url": "https://api.github.com/users/qiang2008/repos", "events_url": "https://api.github.com/users/qiang2008/events{/privacy}", "received_events_url": "https://api.github.com/users/qiang2008/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-09-16T14:22:58Z", "updated_at": "2018-09-17T22:08:18Z", "closed_at": "2018-09-17T22:08:18Z", "author_association": "NONE", "body_html": "<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>:1.10.1</li>\n<li><strong>Python version</strong>:3.5.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:NO</li>\n<li><strong>GPU model and memory</strong>:NO</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When use shared_embedding_columns without partitioner  to save model ,then import_meta_graph from check_point is success. But use shared_embedding_columns with partitioner, then import_meta_graph from check_point is failed.<br>\nReport error: KeyError:<br>\nThe name 'run_2/input_from_feature_columns/a1_shared_embedding/a1_a1_shared_embedding' refers to an Operation not in the graph</p>\n<h3>Source code / logs</h3>\n<p>code for model<br>\nfirst, mkdir mypath/model</p>\n<pre><code>from tensorflow.contrib.layers.python.layers import feature_column as fc\nfrom tensorflow.python.ops import variable_scope\nfrom tensorflow.python.framework import sparse_tensor as sparse_tensor_lib\nfrom tensorflow.contrib.layers.python.layers import feature_column_ops\nfrom tensorflow.python.training import saver\nimport tensorflow as tf\n\ndef mySharedEmbeddingColumn():\n    a1 = fc.sparse_column_with_keys(\"a1\", [\"marlo\", \"omar\", \"stringer\"])\n    b = fc.shared_embedding_columns([a1, a1], dimension=4, combiner=\"mean\")\n    c = fc.embedding_column(a1, dimension=4, combiner=\"mean\")\n    input_tensor_c1 = sparse_tensor_lib.SparseTensor(\n        indices=[[0, 0], [1, 1], [2, 2]], values=[0, 1, 2], dense_shape=[3, 3])\n    dnn_partitioner = (\n        tf.min_max_variable_partitioner(\n        max_partitions=1))\n    with variable_scope.variable_scope(\"run_2\",partitioner=dnn_partitioner):\n      b2 = feature_column_ops.input_from_feature_columns({\n          b[1]: input_tensor_c1\n      }, [b[1]])\n    with variable_scope.variable_scope(\"run_3\", partitioner=dnn_partitioner):\n      c1 = feature_column_ops.input_from_feature_columns({\n          c: input_tensor_c1\n      }, [c])\n    saver = tf.train.Saver()\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        variable_names = [v.name for v in tf.trainable_variables()]\n        values = sess.run(variable_names)\n        for k,v in zip(variable_names, values):\n            print(\"Variable: \", k)\n            print(\"Shape: \", v.shape)\n            print(v)\n        saver.save(sess,'model/model-ckt')\n\nmySharedEmbeddingColumn()\n</code></pre>\n<p>code for restore</p>\n<pre><code>import tensorflow as tf\n\ngraph = tf.Graph()\nsess = tf.Session(graph=graph)\nwith graph.as_default():\n    del tf.get_collection_ref(tf.GraphKeys.TRAIN_OP)[:]\n    check_point_path = 'model' \n    saver = tf.train.import_meta_graph('model/model-ckt.meta')\n    print(graph.get_operations())\n\n</code></pre>", "body_text": "Have I written custom code (as opposed to using a stock example script provided in TensorFlow):No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below):1.10.1\nPython version:3.5.6\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:NO\nGPU model and memory:NO\nExact command to reproduce:\n\nDescribe the problem\nWhen use shared_embedding_columns without partitioner  to save model ,then import_meta_graph from check_point is success. But use shared_embedding_columns with partitioner, then import_meta_graph from check_point is failed.\nReport error: KeyError:\nThe name 'run_2/input_from_feature_columns/a1_shared_embedding/a1_a1_shared_embedding' refers to an Operation not in the graph\nSource code / logs\ncode for model\nfirst, mkdir mypath/model\nfrom tensorflow.contrib.layers.python.layers import feature_column as fc\nfrom tensorflow.python.ops import variable_scope\nfrom tensorflow.python.framework import sparse_tensor as sparse_tensor_lib\nfrom tensorflow.contrib.layers.python.layers import feature_column_ops\nfrom tensorflow.python.training import saver\nimport tensorflow as tf\n\ndef mySharedEmbeddingColumn():\n    a1 = fc.sparse_column_with_keys(\"a1\", [\"marlo\", \"omar\", \"stringer\"])\n    b = fc.shared_embedding_columns([a1, a1], dimension=4, combiner=\"mean\")\n    c = fc.embedding_column(a1, dimension=4, combiner=\"mean\")\n    input_tensor_c1 = sparse_tensor_lib.SparseTensor(\n        indices=[[0, 0], [1, 1], [2, 2]], values=[0, 1, 2], dense_shape=[3, 3])\n    dnn_partitioner = (\n        tf.min_max_variable_partitioner(\n        max_partitions=1))\n    with variable_scope.variable_scope(\"run_2\",partitioner=dnn_partitioner):\n      b2 = feature_column_ops.input_from_feature_columns({\n          b[1]: input_tensor_c1\n      }, [b[1]])\n    with variable_scope.variable_scope(\"run_3\", partitioner=dnn_partitioner):\n      c1 = feature_column_ops.input_from_feature_columns({\n          c: input_tensor_c1\n      }, [c])\n    saver = tf.train.Saver()\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        variable_names = [v.name for v in tf.trainable_variables()]\n        values = sess.run(variable_names)\n        for k,v in zip(variable_names, values):\n            print(\"Variable: \", k)\n            print(\"Shape: \", v.shape)\n            print(v)\n        saver.save(sess,'model/model-ckt')\n\nmySharedEmbeddingColumn()\n\ncode for restore\nimport tensorflow as tf\n\ngraph = tf.Graph()\nsess = tf.Session(graph=graph)\nwith graph.as_default():\n    del tf.get_collection_ref(tf.GraphKeys.TRAIN_OP)[:]\n    check_point_path = 'model' \n    saver = tf.train.import_meta_graph('model/model-ckt.meta')\n    print(graph.get_operations())", "body": "- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: \r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**:1.10.1\r\n- **Python version**:3.5.6\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:NO\r\n- **GPU model and memory**:NO\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nWhen use shared_embedding_columns without partitioner  to save model ,then import_meta_graph from check_point is success. But use shared_embedding_columns with partitioner, then import_meta_graph from check_point is failed.   \r\nReport error: KeyError: \r\nThe name 'run_2/input_from_feature_columns/a1_shared_embedding/a1_a1_shared_embedding' refers to an Operation not in the graph\r\n\r\n### Source code / logs\r\n\r\ncode for model\r\nfirst, mkdir mypath/model\r\n````\r\nfrom tensorflow.contrib.layers.python.layers import feature_column as fc\r\nfrom tensorflow.python.ops import variable_scope\r\nfrom tensorflow.python.framework import sparse_tensor as sparse_tensor_lib\r\nfrom tensorflow.contrib.layers.python.layers import feature_column_ops\r\nfrom tensorflow.python.training import saver\r\nimport tensorflow as tf\r\n\r\ndef mySharedEmbeddingColumn():\r\n    a1 = fc.sparse_column_with_keys(\"a1\", [\"marlo\", \"omar\", \"stringer\"])\r\n    b = fc.shared_embedding_columns([a1, a1], dimension=4, combiner=\"mean\")\r\n    c = fc.embedding_column(a1, dimension=4, combiner=\"mean\")\r\n    input_tensor_c1 = sparse_tensor_lib.SparseTensor(\r\n        indices=[[0, 0], [1, 1], [2, 2]], values=[0, 1, 2], dense_shape=[3, 3])\r\n    dnn_partitioner = (\r\n        tf.min_max_variable_partitioner(\r\n        max_partitions=1))\r\n    with variable_scope.variable_scope(\"run_2\",partitioner=dnn_partitioner):\r\n      b2 = feature_column_ops.input_from_feature_columns({\r\n          b[1]: input_tensor_c1\r\n      }, [b[1]])\r\n    with variable_scope.variable_scope(\"run_3\", partitioner=dnn_partitioner):\r\n      c1 = feature_column_ops.input_from_feature_columns({\r\n          c: input_tensor_c1\r\n      }, [c])\r\n    saver = tf.train.Saver()\r\n    with tf.Session() as sess:\r\n        sess.run(tf.global_variables_initializer())\r\n        variable_names = [v.name for v in tf.trainable_variables()]\r\n        values = sess.run(variable_names)\r\n        for k,v in zip(variable_names, values):\r\n            print(\"Variable: \", k)\r\n            print(\"Shape: \", v.shape)\r\n            print(v)\r\n        saver.save(sess,'model/model-ckt')\r\n\r\nmySharedEmbeddingColumn()\r\n````\r\ncode for restore\r\n````\r\nimport tensorflow as tf\r\n\r\ngraph = tf.Graph()\r\nsess = tf.Session(graph=graph)\r\nwith graph.as_default():\r\n    del tf.get_collection_ref(tf.GraphKeys.TRAIN_OP)[:]\r\n    check_point_path = 'model' \r\n    saver = tf.train.import_meta_graph('model/model-ckt.meta')\r\n    print(graph.get_operations())\r\n\r\n````\r\n\r\n"}