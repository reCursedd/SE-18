{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/121823961", "pull_request_review_id": 43883661, "id": 121823961, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTgyMzk2MQ==", "diff_hunk": "@@ -264,142 +296,155 @@ def _tfIFFTForRank(self, rank):\n       raise ValueError(\"invalid rank\")\n \n   def testEmpty(self):\n-    for rank in VALID_FFT_RANKS:\n-      for dims in xrange(rank, rank + 3):\n-        x = np.zeros((0,) * dims).astype(np.float32)\n-        self.assertEqual(x.shape, self._tfFFT(x, rank).shape)\n-        x = np.zeros((0,) * dims).astype(np.complex64)\n-        self.assertEqual(x.shape, self._tfIFFT(x, rank).shape)\n+    with self._fft_kernel_label_map():\n+      for rank in VALID_FFT_RANKS:\n+        for dims in xrange(rank, rank + 3):\n+          x = np.zeros((0,) * dims).astype(np.float32)\n+          self.assertEqual(x.shape, self._tfFFT(x, rank).shape)\n+          x = np.zeros((0,) * dims).astype(np.complex64)\n+          self.assertEqual(x.shape, self._tfIFFT(x, rank).shape)\n \n   def testBasic(self):\n-    for rank in VALID_FFT_RANKS:\n-      for dims in xrange(rank, rank + 3):\n-        for size in (5, 6):\n-          inner_dim = size // 2 + 1\n-          r2c = np.mod(np.arange(np.power(size, dims)), 10).reshape(\n-              (size,) * dims)\n-          self._CompareForward(r2c.astype(np.float32), rank, (size,) * rank)\n-          c2r = np.mod(np.arange(np.power(size, dims - 1) * inner_dim),\n-                       10).reshape((size,) * (dims - 1) + (inner_dim,))\n-          self._CompareBackward(c2r.astype(np.complex64), rank, (size,) * rank)\n+    with self._fft_kernel_label_map():\n+      for rank in VALID_FFT_RANKS:\n+        for dims in xrange(rank, rank + 3):\n+          for size in (5, 6):\n+            inner_dim = size // 2 + 1\n+            r2c = np.mod(np.arange(np.power(size, dims)), 10).reshape(\n+                (size,) * dims)\n+            self._CompareForward(r2c.astype(np.float32), rank, (size,) * rank)\n+            c2r = np.mod(np.arange(np.power(size, dims - 1) * inner_dim),\n+                         10).reshape((size,) * (dims - 1) + (inner_dim,))\n+            self._CompareBackward(\n+                c2r.astype(np.complex64), rank, (size,) * rank)\n \n   def testBasicPlaceholder(self):\n-    for rank in VALID_FFT_RANKS:\n-      for dims in xrange(rank, rank + 3):\n-        for size in (5, 6):\n-          inner_dim = size // 2 + 1\n-          r2c = np.mod(np.arange(np.power(size, dims)), 10).reshape(\n-              (size,) * dims)\n-          self._CompareForward(r2c.astype(np.float32), rank, (size,) * rank,\n-                               use_placeholder=True)\n-          c2r = np.mod(np.arange(np.power(size, dims - 1) * inner_dim),\n-                       10).reshape((size,) * (dims - 1) + (inner_dim,))\n-          self._CompareBackward(c2r.astype(np.complex64), rank, (size,) * rank,\n-                                use_placeholder=True)\n-\n-  def testFftLength(self):\n-    if test.is_gpu_available(cuda_only=True):\n+    with self._fft_kernel_label_map():\n       for rank in VALID_FFT_RANKS:\n         for dims in xrange(rank, rank + 3):\n           for size in (5, 6):\n             inner_dim = size // 2 + 1\n             r2c = np.mod(np.arange(np.power(size, dims)), 10).reshape(\n                 (size,) * dims)\n+            self._CompareForward(\n+                r2c.astype(np.float32),\n+                rank, (size,) * rank,\n+                use_placeholder=True)\n             c2r = np.mod(np.arange(np.power(size, dims - 1) * inner_dim),\n                          10).reshape((size,) * (dims - 1) + (inner_dim,))\n+            self._CompareBackward(\n+                c2r.astype(np.complex64),\n+                rank, (size,) * rank,\n+                use_placeholder=True)\n \n-            # Test truncation (FFT size < dimensions).\n-            fft_length = (size - 2,) * rank\n-            self._CompareForward(r2c.astype(np.float32), rank, fft_length)\n-            self._CompareBackward(c2r.astype(np.complex64), rank, fft_length)\n-\n-            # Confirm it works with unknown shapes as well.\n-            self._CompareForward(r2c.astype(np.float32), rank, fft_length,\n-                                 use_placeholder=True)\n-            self._CompareBackward(c2r.astype(np.complex64), rank, fft_length,\n-                                  use_placeholder=True)\n-\n-            # Test padding (FFT size > dimensions).\n-            fft_length = (size + 2,) * rank\n-            self._CompareForward(r2c.astype(np.float32), rank, fft_length)\n-            self._CompareBackward(c2r.astype(np.complex64), rank, fft_length)\n-\n-            # Confirm it works with unknown shapes as well.\n-            self._CompareForward(r2c.astype(np.float32), rank, fft_length,\n-                                 use_placeholder=True)\n-            self._CompareBackward(c2r.astype(np.complex64), rank, fft_length,\n-                                  use_placeholder=True)\n+  def testFftLength(self):\n+    if test.is_gpu_available(cuda_only=True):", "path": "tensorflow/python/kernel_tests/fft_ops_test.py", "position": 315, "original_position": 315, "commit_id": "3af9224979917aa47e878f94306f62f4125b7fab", "original_commit_id": "3af9224979917aa47e878f94306f62f4125b7fab", "user": {"login": "rryan", "id": 26527, "node_id": "MDQ6VXNlcjI2NTI3", "avatar_url": "https://avatars3.githubusercontent.com/u/26527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rryan", "html_url": "https://github.com/rryan", "followers_url": "https://api.github.com/users/rryan/followers", "following_url": "https://api.github.com/users/rryan/following{/other_user}", "gists_url": "https://api.github.com/users/rryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/rryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rryan/subscriptions", "organizations_url": "https://api.github.com/users/rryan/orgs", "repos_url": "https://api.github.com/users/rryan/repos", "events_url": "https://api.github.com/users/rryan/events{/privacy}", "received_events_url": "https://api.github.com/users/rryan/received_events", "type": "User", "site_admin": false}, "body": "Everything looks fine in fft_ops.cc and fft_ops_test.py except this line which was removed in: https://github.com/tensorflow/tensorflow/commit/51ec66e4110dbbd37495303bc195b99a5d262e7b", "created_at": "2017-06-13T23:42:34Z", "updated_at": "2017-06-13T23:43:06Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10667#discussion_r121823961", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10667", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/121823961"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10667#discussion_r121823961"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10667"}}, "body_html": "<p>Everything looks fine in fft_ops.cc and fft_ops_test.py except this line which was removed in: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/51ec66e4110dbbd37495303bc195b99a5d262e7b/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/51ec66e4110dbbd37495303bc195b99a5d262e7b\"><tt>51ec66e</tt></a></p>", "body_text": "Everything looks fine in fft_ops.cc and fft_ops_test.py except this line which was removed in: 51ec66e"}