{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/366941221", "html_url": "https://github.com/tensorflow/tensorflow/issues/504#issuecomment-366941221", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/504", "id": 366941221, "node_id": "MDEyOklzc3VlQ29tbWVudDM2Njk0MTIyMQ==", "user": {"login": "Syzygy2048", "id": 5041377, "node_id": "MDQ6VXNlcjUwNDEzNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5041377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Syzygy2048", "html_url": "https://github.com/Syzygy2048", "followers_url": "https://api.github.com/users/Syzygy2048/followers", "following_url": "https://api.github.com/users/Syzygy2048/following{/other_user}", "gists_url": "https://api.github.com/users/Syzygy2048/gists{/gist_id}", "starred_url": "https://api.github.com/users/Syzygy2048/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Syzygy2048/subscriptions", "organizations_url": "https://api.github.com/users/Syzygy2048/orgs", "repos_url": "https://api.github.com/users/Syzygy2048/repos", "events_url": "https://api.github.com/users/Syzygy2048/events{/privacy}", "received_events_url": "https://api.github.com/users/Syzygy2048/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-20T10:56:45Z", "updated_at": "2018-02-20T11:19:40Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=29663194\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cy89\">@cy89</a> since I also managed to do transfer learning with checkpoints I might as well chime in.</p>\n<p>Note that this is using tf.slim and python.</p>\n<pre><code>import tensorflow as tf\nfrom tensorflow.contrib.slim.nets import inception as nn_architecture\nfrom tensorflow.contrib import slim\n\nwith slim.arg_scope(nn_architecture.inception_v3_arg_scope()):\n    logits, endpoints = nn_architecture.inception_v3(images, \n                                                     num_classes=10,\n                                                     is_training=True)\n\n#these nodes are not loaded from the checkpoint and are left uninitialized  \nretrain = ['InceptionV3/Logits', 'InceptionV3/AuxLogits', 'InceptionV3/Mixed_7c', 'InceptionV3/Mixed_7b'] \nvariables_to_restore = slim.get_variables_to_restore(exclude=retrain)  # this checks the current graph, so no custom nodes can be defined at this point, only those from create_network()\n\nsess = tf.Session()\nsaver = tf.train.Saver(variables_to_restore)\nsaver.restore(sess, CHECKPOINT_PATH)\n\n#specify which layers should be trained, all others will not be touched\nvariables_to_train = tf.trainable_variables('InceptionV3/Logits') + tf.trainable_variables('InceptionV3/AuxLogits') + tf.trainable_variables('InceptionV3/Mixed_7c') + tf.trainable_variables('InceptionV3/Mixed_7b')\n\ntrain_step = slim.learning.create_train_op(total_loss, optimizer, variables_to_train=variables_to_train) \n</code></pre>\n<p><a href=\"https://github.com/Syzygy2048/OverheadVehicleDetection/tree/master/mnist\">Here</a> you can find a working example for the mnist dataset with inception, resnet and resception</p>", "body_text": "@cy89 since I also managed to do transfer learning with checkpoints I might as well chime in.\nNote that this is using tf.slim and python.\nimport tensorflow as tf\nfrom tensorflow.contrib.slim.nets import inception as nn_architecture\nfrom tensorflow.contrib import slim\n\nwith slim.arg_scope(nn_architecture.inception_v3_arg_scope()):\n    logits, endpoints = nn_architecture.inception_v3(images, \n                                                     num_classes=10,\n                                                     is_training=True)\n\n#these nodes are not loaded from the checkpoint and are left uninitialized  \nretrain = ['InceptionV3/Logits', 'InceptionV3/AuxLogits', 'InceptionV3/Mixed_7c', 'InceptionV3/Mixed_7b'] \nvariables_to_restore = slim.get_variables_to_restore(exclude=retrain)  # this checks the current graph, so no custom nodes can be defined at this point, only those from create_network()\n\nsess = tf.Session()\nsaver = tf.train.Saver(variables_to_restore)\nsaver.restore(sess, CHECKPOINT_PATH)\n\n#specify which layers should be trained, all others will not be touched\nvariables_to_train = tf.trainable_variables('InceptionV3/Logits') + tf.trainable_variables('InceptionV3/AuxLogits') + tf.trainable_variables('InceptionV3/Mixed_7c') + tf.trainable_variables('InceptionV3/Mixed_7b')\n\ntrain_step = slim.learning.create_train_op(total_loss, optimizer, variables_to_train=variables_to_train) \n\nHere you can find a working example for the mnist dataset with inception, resnet and resception", "body": "@cy89 since I also managed to do transfer learning with checkpoints I might as well chime in.\r\n\r\nNote that this is using tf.slim and python.\r\n```\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib.slim.nets import inception as nn_architecture\r\nfrom tensorflow.contrib import slim\r\n\r\nwith slim.arg_scope(nn_architecture.inception_v3_arg_scope()):\r\n    logits, endpoints = nn_architecture.inception_v3(images, \r\n                                                     num_classes=10,\r\n                                                     is_training=True)\r\n\r\n#these nodes are not loaded from the checkpoint and are left uninitialized  \r\nretrain = ['InceptionV3/Logits', 'InceptionV3/AuxLogits', 'InceptionV3/Mixed_7c', 'InceptionV3/Mixed_7b'] \r\nvariables_to_restore = slim.get_variables_to_restore(exclude=retrain)  # this checks the current graph, so no custom nodes can be defined at this point, only those from create_network()\r\n\r\nsess = tf.Session()\r\nsaver = tf.train.Saver(variables_to_restore)\r\nsaver.restore(sess, CHECKPOINT_PATH)\r\n\r\n#specify which layers should be trained, all others will not be touched\r\nvariables_to_train = tf.trainable_variables('InceptionV3/Logits') + tf.trainable_variables('InceptionV3/AuxLogits') + tf.trainable_variables('InceptionV3/Mixed_7c') + tf.trainable_variables('InceptionV3/Mixed_7b')\r\n\r\ntrain_step = slim.learning.create_train_op(total_loss, optimizer, variables_to_train=variables_to_train) \r\n```\r\n\r\n[Here](https://github.com/Syzygy2048/OverheadVehicleDetection/tree/master/mnist) you can find a working example for the mnist dataset with inception, resnet and resception"}