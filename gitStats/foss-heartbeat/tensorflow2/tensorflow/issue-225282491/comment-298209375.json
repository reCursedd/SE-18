{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/298209375", "html_url": "https://github.com/tensorflow/tensorflow/pull/9544#issuecomment-298209375", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9544", "id": 298209375, "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODIwOTM3NQ==", "user": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-30T03:50:38Z", "updated_at": "2017-04-30T03:50:38Z", "author_association": "MEMBER", "body_html": "<p>In <code>Conv3DTranspose</code>, replace</p>\n<div class=\"highlight highlight-source-python\"><pre> <span class=\"pl-k\">+</span>    <span class=\"pl-c1\">self</span>.kernel <span class=\"pl-k\">=</span> vs.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>kernel<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>kernel_shape,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.kernel_initializer,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">regularizer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.kernel_regularizer,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.dtype)\n <span class=\"pl-k\">+</span>    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.use_bias:\n <span class=\"pl-k\">+</span>      <span class=\"pl-c1\">self</span>.bias <span class=\"pl-k\">=</span> vs.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>bias<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">self</span>.filters,),\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.bias_initializer,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">regularizer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.bias_regularizer,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.dtype)</pre></div>\n<p>with</p>\n<div class=\"highlight highlight-source-python\"><pre> <span class=\"pl-k\">+</span>    <span class=\"pl-c1\">self</span>.kernel <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.add_variable(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>kernel<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>kernel_shape,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.kernel_initializer,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">regularizer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.kernel_regularizer,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.dtype)\n <span class=\"pl-k\">+</span>    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.use_bias:\n <span class=\"pl-k\">+</span>      <span class=\"pl-c1\">self</span>.bias <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.add_variable(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>bias<span class=\"pl-pds\">'</span></span>,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">self</span>.filters,),\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.bias_initializer,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">regularizer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.bias_regularizer,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n <span class=\"pl-k\">+</span>                                  <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.dtype)</pre></div>", "body_text": "In Conv3DTranspose, replace\n +    self.kernel = vs.get_variable('kernel',\n +                                  shape=kernel_shape,\n +                                  initializer=self.kernel_initializer,\n +                                  regularizer=self.kernel_regularizer,\n +                                  trainable=True,\n +                                  dtype=self.dtype)\n +    if self.use_bias:\n +      self.bias = vs.get_variable('bias',\n +                                  shape=(self.filters,),\n +                                  initializer=self.bias_initializer,\n +                                  regularizer=self.bias_regularizer,\n +                                  trainable=True,\n +                                  dtype=self.dtype)\nwith\n +    self.kernel = self.add_variable(name='kernel',\n +                                  shape=kernel_shape,\n +                                  initializer=self.kernel_initializer,\n +                                  regularizer=self.kernel_regularizer,\n +                                  trainable=True,\n +                                  dtype=self.dtype)\n +    if self.use_bias:\n +      self.bias = self.add_variable(name='bias',\n +                                  shape=(self.filters,),\n +                                  initializer=self.bias_initializer,\n +                                  regularizer=self.bias_regularizer,\n +                                  trainable=True,\n +                                  dtype=self.dtype)", "body": "In `Conv3DTranspose`, replace\r\n\r\n```python\r\n +    self.kernel = vs.get_variable('kernel',\r\n +                                  shape=kernel_shape,\r\n +                                  initializer=self.kernel_initializer,\r\n +                                  regularizer=self.kernel_regularizer,\r\n +                                  trainable=True,\r\n +                                  dtype=self.dtype)\r\n +    if self.use_bias:\r\n +      self.bias = vs.get_variable('bias',\r\n +                                  shape=(self.filters,),\r\n +                                  initializer=self.bias_initializer,\r\n +                                  regularizer=self.bias_regularizer,\r\n +                                  trainable=True,\r\n +                                  dtype=self.dtype)\r\n```\r\n\r\nwith\r\n\r\n```python\r\n +    self.kernel = self.add_variable(name='kernel',\r\n +                                  shape=kernel_shape,\r\n +                                  initializer=self.kernel_initializer,\r\n +                                  regularizer=self.kernel_regularizer,\r\n +                                  trainable=True,\r\n +                                  dtype=self.dtype)\r\n +    if self.use_bias:\r\n +      self.bias = self.add_variable(name='bias',\r\n +                                  shape=(self.filters,),\r\n +                                  initializer=self.bias_initializer,\r\n +                                  regularizer=self.bias_regularizer,\r\n +                                  trainable=True,\r\n +                                  dtype=self.dtype)\r\n```"}