{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/326815920", "html_url": "https://github.com/tensorflow/tensorflow/issues/37#issuecomment-326815920", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/37", "id": 326815920, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjgxNTkyMA==", "user": {"login": "djimoh5", "id": 1906436, "node_id": "MDQ6VXNlcjE5MDY0MzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1906436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djimoh5", "html_url": "https://github.com/djimoh5", "followers_url": "https://api.github.com/users/djimoh5/followers", "following_url": "https://api.github.com/users/djimoh5/following{/other_user}", "gists_url": "https://api.github.com/users/djimoh5/gists{/gist_id}", "starred_url": "https://api.github.com/users/djimoh5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djimoh5/subscriptions", "organizations_url": "https://api.github.com/users/djimoh5/orgs", "repos_url": "https://api.github.com/users/djimoh5/repos", "events_url": "https://api.github.com/users/djimoh5/events{/privacy}", "received_events_url": "https://api.github.com/users/djimoh5/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-03T16:41:33Z", "updated_at": "2017-09-03T16:41:33Z", "author_association": "NONE", "body_html": "<p>In regards to the current projects that have been started, and specifically the challenges of working with the C API, I have a suggestion on implementation that has worked well for me.</p>\n<p>Since python is still the most robust, developer-friendly, and full featured wrapper around the Tensorflow API, rather than trying to \"re-create\" the python API for js, why not create bindings directly TO the python API? This would still require first creating a node C++ add-on, but rather than binding to the C API directly, you can employ \"embedded\" python to run python methods directly from C++.</p>\n<p>This is unlike other JS =&gt; Python solutions out there that suggest simply spawning a python script...a solution not viable for any reasonable size learning problems because of the extensive data transfer cost (time) between the processes. With embedded python however, memory accessed by your python script / numpy arrays directly point to your js Float32Array buffers.</p>\n<p>This solution is working very well for me (though admittedly getting the initial js =&gt; C++ =&gt; python flow working was kind of a pain). Since I have specific needs, I have not gone through the task of binding to each individual python TensorFlow method, and instead just pass my data and hyper parameters to a few methods that build most of the graph. The full individual binding wouldnt be too bad from my current starting point.</p>\n<p>I welcome any thoughts or suggestions on the approach outlined above. Thanks.</p>", "body_text": "In regards to the current projects that have been started, and specifically the challenges of working with the C API, I have a suggestion on implementation that has worked well for me.\nSince python is still the most robust, developer-friendly, and full featured wrapper around the Tensorflow API, rather than trying to \"re-create\" the python API for js, why not create bindings directly TO the python API? This would still require first creating a node C++ add-on, but rather than binding to the C API directly, you can employ \"embedded\" python to run python methods directly from C++.\nThis is unlike other JS => Python solutions out there that suggest simply spawning a python script...a solution not viable for any reasonable size learning problems because of the extensive data transfer cost (time) between the processes. With embedded python however, memory accessed by your python script / numpy arrays directly point to your js Float32Array buffers.\nThis solution is working very well for me (though admittedly getting the initial js => C++ => python flow working was kind of a pain). Since I have specific needs, I have not gone through the task of binding to each individual python TensorFlow method, and instead just pass my data and hyper parameters to a few methods that build most of the graph. The full individual binding wouldnt be too bad from my current starting point.\nI welcome any thoughts or suggestions on the approach outlined above. Thanks.", "body": "In regards to the current projects that have been started, and specifically the challenges of working with the C API, I have a suggestion on implementation that has worked well for me.\r\n\r\nSince python is still the most robust, developer-friendly, and full featured wrapper around the Tensorflow API, rather than trying to \"re-create\" the python API for js, why not create bindings directly TO the python API? This would still require first creating a node C++ add-on, but rather than binding to the C API directly, you can employ \"embedded\" python to run python methods directly from C++.\r\n\r\nThis is unlike other JS => Python solutions out there that suggest simply spawning a python script...a solution not viable for any reasonable size learning problems because of the extensive data transfer cost (time) between the processes. With embedded python however, memory accessed by your python script / numpy arrays directly point to your js Float32Array buffers.\r\n\r\nThis solution is working very well for me (though admittedly getting the initial js => C++ => python flow working was kind of a pain). Since I have specific needs, I have not gone through the task of binding to each individual python TensorFlow method, and instead just pass my data and hyper parameters to a few methods that build most of the graph. The full individual binding wouldnt be too bad from my current starting point.\r\n\r\nI welcome any thoughts or suggestions on the approach outlined above. Thanks."}