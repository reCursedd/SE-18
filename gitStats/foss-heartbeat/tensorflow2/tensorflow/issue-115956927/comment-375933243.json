{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/375933243", "html_url": "https://github.com/tensorflow/tensorflow/issues/37#issuecomment-375933243", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/37", "id": 375933243, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTkzMzI0Mw==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-24T23:45:04Z", "updated_at": "2018-03-24T23:45:04Z", "author_association": "MEMBER", "body_html": "<p>If an ambitious member of the community wants the glory of solving this problem, and having it merged into the TensorFlow contrib codebase, here are some tips on how I would do it. Please note I'm not going to do this.</p>\n<p>You can add Node to <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/workspace.bzl\">workspace.bzl</a> just like TensorBoard did in <a href=\"https://github.com/tensorflow/tensorboard/blob/99a7437/third_party/js.bzl#L25\">js.bzl</a>.<br>\nPlease note TensorFlow can not depend on <a href=\"https://github.com/bazelbuild/rules_nodejs\">rules_nodejs</a>.</p>\n<div class=\"highlight highlight-source-python\"><pre>load(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@io_bazel_rules_closure//closure:defs.bzl<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>filegroup_external<span class=\"pl-pds\">\"</span></span>)\n\nfilegroup_external(\n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org_nodejs<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> MIT with portions licensed:</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> - MIT</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> - Old MIT</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> - 2-Clause-BSD</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> - 3-Clause-BSD</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> - ISC</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> - Unicode</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> - zlib</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> - Artistic 2.0</span>\n    <span class=\"pl-v\">licenses</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>notice<span class=\"pl-pds\">\"</span></span>],\n    <span class=\"pl-v\">sha256_urls_extract_macos</span> <span class=\"pl-k\">=</span> {\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>910395e1e98fb351c62b5702a9deef22aaecf05d6df1d7edc283337542207f3f<span class=\"pl-pds\">\"</span></span>: [\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://mirror.bazel.build/nodejs.org/dist/v6.9.1/node-v6.9.1-darwin-x64.tar.xz<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://nodejs.org/dist/v6.9.1/node-v6.9.1-darwin-x64.tar.xz<span class=\"pl-pds\">\"</span></span>,\n        ],\n    },\n    <span class=\"pl-v\">sha256_urls_windows</span> <span class=\"pl-k\">=</span> {\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1914bfb950be8d576ce9e49c8a0e51c9f2402560fe3c19093e69bc1306a56e9e<span class=\"pl-pds\">\"</span></span>: [\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://mirror.bazel.build/raw.githubusercontent.com/nodejs/node/v6.9.1/LICENSE<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://raw.githubusercontent.com/nodejs/node/v6.9.1/LICENSE<span class=\"pl-pds\">\"</span></span>,\n        ],\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>513923b0490ebb7466a56483a62595814ed9d036d6f35476debb0cd606bec526<span class=\"pl-pds\">\"</span></span>: [\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://mirror.bazel.build/nodejs.org/dist/v6.9.1/win-x64/node.exe<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://nodejs.org/dist/v6.9.1/win-x64/node.exe<span class=\"pl-pds\">\"</span></span>,\n        ],\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>3951aefa4afd6fb836ab06468b1fc2a69fa75bd66ec2f5a0e08c4e32547681e3<span class=\"pl-pds\">\"</span></span>: [\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://mirror.bazel.build/nodejs.org/dist/v6.9.1/win-x64/node.lib<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://nodejs.org/dist/v6.9.1/win-x64/node.lib<span class=\"pl-pds\">\"</span></span>,\n        ],\n    },\n    <span class=\"pl-v\">sha256_urls_extract</span> <span class=\"pl-k\">=</span> {\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>d4eb161e4715e11bbef816a6c577974271e2bddae9cf008744627676ff00036a<span class=\"pl-pds\">\"</span></span>: [\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://mirror.bazel.build/nodejs.org/dist/v6.9.1/node-v6.9.1-linux-x64.tar.xz<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://nodejs.org/dist/v6.9.1/node-v6.9.1-linux-x64.tar.xz<span class=\"pl-pds\">\"</span></span>,\n        ],\n    },\n    <span class=\"pl-v\">strip_prefix</span> <span class=\"pl-k\">=</span> {\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node-v6.9.1-darwin-x64.tar.xz<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node-v6.9.1-darwin-x64<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node-v6.9.1-linux-x64.tar.xz<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node-v6.9.1-linux-x64<span class=\"pl-pds\">\"</span></span>,\n    },\n    <span class=\"pl-v\">executable</span> <span class=\"pl-k\">=</span> [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node.exe<span class=\"pl-pds\">\"</span></span>,\n    ],\n    <span class=\"pl-v\">default_visibility</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//tensorflow/contrib/node:__subpackages__<span class=\"pl-pds\">\"</span></span>],\n)</pre></div>\n<p>Now let's say you want you have a Node program, e.g. <a href=\"https://github.com/tensorflow/tensorboard/blob/99a7437/third_party/js.bzl#L73\">tsc.js</a>, which you want to turn into something you can <code>bazel run //tensorflow/contrib/node:generate</code>. One quick way you could do this in Bazel is by defining a macro in <code>tensorflow/contrib/node/defs.bzl</code>:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">node_binary</span>(<span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">srcs</span>, <span class=\"pl-smi\">data</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">visibility</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">testonly</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kwargs</span>):\n  native.sh_binary(\n      <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> name,\n      <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> [name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.sh<span class=\"pl-pds\">\"</span></span>],\n      <span class=\"pl-v\">data</span> <span class=\"pl-k\">=</span> srcs <span class=\"pl-k\">+</span> data <span class=\"pl-k\">+</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@org_nodejs<span class=\"pl-pds\">\"</span></span>],\n      <span class=\"pl-v\">testonly</span> <span class=\"pl-k\">=</span> testonly,\n      <span class=\"pl-v\">visibility</span> <span class=\"pl-k\">=</span> visibility,\n      <span class=\"pl-k\">**</span>kwargs\n  )\n  \n  native.genrule(\n      <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_sh<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> [srcs[<span class=\"pl-c1\">0</span>]],\n      <span class=\"pl-v\">outs</span> <span class=\"pl-k\">=</span> [name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>.sh<span class=\"pl-pds\">\"</span></span>],\n      <span class=\"pl-v\">cmd</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>cat &gt;$@ &lt;&lt;'EOF'<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#!/bin/bash<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NODE=external/org_nodejs/bin/node<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>if [[ -e external/org_nodejs/node.exe ]]; then<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>  NODE=external/org_nodejs/node.exe<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fi<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>exec $$<span class=\"pl-c1\">{NODE}</span> $(location <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> srcs[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>) <span class=\"pl-cce\">\\\"</span>$$@<span class=\"pl-cce\">\\\"\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span>\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>EOF<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-v\">executable</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>,\n      <span class=\"pl-v\">testonly</span> <span class=\"pl-k\">=</span> testonly,\n      <span class=\"pl-v\">visibility</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//visibility:private<span class=\"pl-pds\">\"</span></span>],\n  )</pre></div>\n<p>Now for the fun part. I would write a single .js file (even if it had to be 30,000 lines long like <a href=\"http://tug.org/texlive/devsrc/Build/source/texk/web2c/tex.web\" rel=\"nofollow\">tex.web</a>) with zero dependencies other than the Node standard library. The inputs for this program would be <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/ops.pbtxt\">ops.pbtxt</a> and all the other pbtxt files in <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/core/api_def/base_api\">api_def/base_api</a>. The output to this program would be exactly one gigantic C++ file that talks to <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.h\">TensorFlow C API</a> and <a href=\"https://nodejs.org/api/addons.html\" rel=\"nofollow\">Node C++ Addon API</a> based on <a href=\"https://github.com/nodejs/node-addon-examples/tree/master/1_hello_world/node_0.12\">this example</a>.</p>\n<div class=\"highlight highlight-source-python\"><pre>load(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//tensorflow/contrib/node:defs.bzl<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node_binary<span class=\"pl-pds\">\"</span></span>)\nload(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@domain_registry//java/google/registry/builddefs:zip_file.bzl<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>zip_file<span class=\"pl-pds\">\"</span></span>)\n\nnode_binary(\n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>generate<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>generate.js<span class=\"pl-pds\">\"</span></span>],\n    <span class=\"pl-v\">data</span> <span class=\"pl-k\">=</span> [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//tensorflow/core:ops/ops.pbtxt<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//tensorflow/core/api_def:base_api_def<span class=\"pl-pds\">\"</span></span>,\n    ],\n)\n\ngenrule(\n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>api<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//tensorflow/core:ops/ops.pbtxt<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//tensorflow/core/api_def:base_api_def<span class=\"pl-pds\">\"</span></span>,\n    ],\n    <span class=\"pl-v\">cmd</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>$(location :generate) $(location api.cc) $(SRCS)<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">outs</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>api.cc<span class=\"pl-pds\">\"</span></span>],\n    <span class=\"pl-v\">tools</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>:generate<span class=\"pl-pds\">\"</span></span>],\n)\n\nzip_file(\n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tfnode<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>package.json<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>README.md<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>api.cc<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>binding.gyp<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tfnode.js<span class=\"pl-pds\">\"</span></span>,\n    ],\n    <span class=\"pl-v\">mappings</span> <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/contrib/node<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>package<span class=\"pl-pds\">\"</span></span>},\n)</pre></div>\n<p>Then you <code>bazel build //tensorflow/contrib/node:tfnode.zip</code> and bam you've got your NodeJS project all bundled and ready for distribution to places like NPM.</p>\n<p>If I wrote this (which I won't) it would be a barebones direct mapping of the TensorFlow API definitions. Then I would encourage our friends in the community to veneer the library. There's a diversity of visions out there on friendly modern high-level idiomatic JS and ML APIs, each catering to different use cases. However they could all share this binding in common.</p>\n<p>Please note there are examples of where we already generate language bindings. See <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/go/genop/main.go\">tensorflow/go/genop/main.go</a> and <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/go/op/generate.go\">tensorflow/go/op/generate.go</a> for inspiration.</p>", "body_text": "If an ambitious member of the community wants the glory of solving this problem, and having it merged into the TensorFlow contrib codebase, here are some tips on how I would do it. Please note I'm not going to do this.\nYou can add Node to workspace.bzl just like TensorBoard did in js.bzl.\nPlease note TensorFlow can not depend on rules_nodejs.\nload(\"@io_bazel_rules_closure//closure:defs.bzl\", \"filegroup_external\")\n\nfilegroup_external(\n    name = \"org_nodejs\",\n    # MIT with portions licensed:\n    # - MIT\n    # - Old MIT\n    # - 2-Clause-BSD\n    # - 3-Clause-BSD\n    # - ISC\n    # - Unicode\n    # - zlib\n    # - Artistic 2.0\n    licenses = [\"notice\"],\n    sha256_urls_extract_macos = {\n        \"910395e1e98fb351c62b5702a9deef22aaecf05d6df1d7edc283337542207f3f\": [\n            \"https://mirror.bazel.build/nodejs.org/dist/v6.9.1/node-v6.9.1-darwin-x64.tar.xz\",\n            \"http://nodejs.org/dist/v6.9.1/node-v6.9.1-darwin-x64.tar.xz\",\n        ],\n    },\n    sha256_urls_windows = {\n        \"1914bfb950be8d576ce9e49c8a0e51c9f2402560fe3c19093e69bc1306a56e9e\": [\n            \"https://mirror.bazel.build/raw.githubusercontent.com/nodejs/node/v6.9.1/LICENSE\",\n            \"https://raw.githubusercontent.com/nodejs/node/v6.9.1/LICENSE\",\n        ],\n        \"513923b0490ebb7466a56483a62595814ed9d036d6f35476debb0cd606bec526\": [\n            \"https://mirror.bazel.build/nodejs.org/dist/v6.9.1/win-x64/node.exe\",\n            \"http://nodejs.org/dist/v6.9.1/win-x64/node.exe\",\n        ],\n        \"3951aefa4afd6fb836ab06468b1fc2a69fa75bd66ec2f5a0e08c4e32547681e3\": [\n            \"https://mirror.bazel.build/nodejs.org/dist/v6.9.1/win-x64/node.lib\",\n            \"http://nodejs.org/dist/v6.9.1/win-x64/node.lib\",\n        ],\n    },\n    sha256_urls_extract = {\n        \"d4eb161e4715e11bbef816a6c577974271e2bddae9cf008744627676ff00036a\": [\n            \"https://mirror.bazel.build/nodejs.org/dist/v6.9.1/node-v6.9.1-linux-x64.tar.xz\",\n            \"http://nodejs.org/dist/v6.9.1/node-v6.9.1-linux-x64.tar.xz\",\n        ],\n    },\n    strip_prefix = {\n        \"node-v6.9.1-darwin-x64.tar.xz\": \"node-v6.9.1-darwin-x64\",\n        \"node-v6.9.1-linux-x64.tar.xz\": \"node-v6.9.1-linux-x64\",\n    },\n    executable = [\n        \"node\",\n        \"node.exe\",\n    ],\n    default_visibility = [\"//tensorflow/contrib/node:__subpackages__\"],\n)\nNow let's say you want you have a Node program, e.g. tsc.js, which you want to turn into something you can bazel run //tensorflow/contrib/node:generate. One quick way you could do this in Bazel is by defining a macro in tensorflow/contrib/node/defs.bzl:\ndef node_binary(name, srcs, data=None, visibility=None, testonly=None, **kwargs):\n  native.sh_binary(\n      name = name,\n      srcs = [name + \".sh\"],\n      data = srcs + data + [\"@org_nodejs\"],\n      testonly = testonly,\n      visibility = visibility,\n      **kwargs\n  )\n  \n  native.genrule(\n      name = name + \"_sh\",\n      srcs = [srcs[0]],\n      outs = [name + \".sh\"],\n      cmd = \"cat >$@ <<'EOF'\\n\" +\n            \"#!/bin/bash\\n\" +\n            \"NODE=external/org_nodejs/bin/node\\n\" +\n            \"if [[ -e external/org_nodejs/node.exe ]]; then\\n\" +\n            \"  NODE=external/org_nodejs/node.exe\\n\" +\n            \"fi\\n\" +\n            \"exec $${NODE} $(location \" + srcs[0] + \") \\\"$$@\\\"\\n\" +\n            \"EOF\",\n      executable = True,\n      testonly = testonly,\n      visibility = [\"//visibility:private\"],\n  )\nNow for the fun part. I would write a single .js file (even if it had to be 30,000 lines long like tex.web) with zero dependencies other than the Node standard library. The inputs for this program would be ops.pbtxt and all the other pbtxt files in api_def/base_api. The output to this program would be exactly one gigantic C++ file that talks to TensorFlow C API and Node C++ Addon API based on this example.\nload(\"//tensorflow/contrib/node:defs.bzl\", \"node_binary\")\nload(\"@domain_registry//java/google/registry/builddefs:zip_file.bzl\", \"zip_file\")\n\nnode_binary(\n    name = \"generate\",\n    srcs = [\"generate.js\"],\n    data = [\n        \"//tensorflow/core:ops/ops.pbtxt\",\n        \"//tensorflow/core/api_def:base_api_def\",\n    ],\n)\n\ngenrule(\n    name = \"api\",\n    srcs = [\n        \"//tensorflow/core:ops/ops.pbtxt\",\n        \"//tensorflow/core/api_def:base_api_def\",\n    ],\n    cmd = \"$(location :generate) $(location api.cc) $(SRCS)\",\n    outs = [\"api.cc\"],\n    tools = [\":generate\"],\n)\n\nzip_file(\n    name = \"tfnode\",\n    srcs = [\n        \"package.json\",\n        \"README.md\",\n        \"api.cc\",\n        \"binding.gyp\",\n        \"tfnode.js\",\n    ],\n    mappings = {\"tensorflow/contrib/node\": \"package\"},\n)\nThen you bazel build //tensorflow/contrib/node:tfnode.zip and bam you've got your NodeJS project all bundled and ready for distribution to places like NPM.\nIf I wrote this (which I won't) it would be a barebones direct mapping of the TensorFlow API definitions. Then I would encourage our friends in the community to veneer the library. There's a diversity of visions out there on friendly modern high-level idiomatic JS and ML APIs, each catering to different use cases. However they could all share this binding in common.\nPlease note there are examples of where we already generate language bindings. See tensorflow/go/genop/main.go and tensorflow/go/op/generate.go for inspiration.", "body": "If an ambitious member of the community wants the glory of solving this problem, and having it merged into the TensorFlow contrib codebase, here are some tips on how I would do it. Please note I'm not going to do this.\r\n\r\nYou can add Node to [workspace.bzl](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/workspace.bzl) just like TensorBoard did in [js.bzl](https://github.com/tensorflow/tensorboard/blob/99a7437/third_party/js.bzl#L25).  \r\nPlease note TensorFlow can not depend on [rules_nodejs](https://github.com/bazelbuild/rules_nodejs).\r\n\r\n```py\r\nload(\"@io_bazel_rules_closure//closure:defs.bzl\", \"filegroup_external\")\r\n\r\nfilegroup_external(\r\n    name = \"org_nodejs\",\r\n    # MIT with portions licensed:\r\n    # - MIT\r\n    # - Old MIT\r\n    # - 2-Clause-BSD\r\n    # - 3-Clause-BSD\r\n    # - ISC\r\n    # - Unicode\r\n    # - zlib\r\n    # - Artistic 2.0\r\n    licenses = [\"notice\"],\r\n    sha256_urls_extract_macos = {\r\n        \"910395e1e98fb351c62b5702a9deef22aaecf05d6df1d7edc283337542207f3f\": [\r\n            \"https://mirror.bazel.build/nodejs.org/dist/v6.9.1/node-v6.9.1-darwin-x64.tar.xz\",\r\n            \"http://nodejs.org/dist/v6.9.1/node-v6.9.1-darwin-x64.tar.xz\",\r\n        ],\r\n    },\r\n    sha256_urls_windows = {\r\n        \"1914bfb950be8d576ce9e49c8a0e51c9f2402560fe3c19093e69bc1306a56e9e\": [\r\n            \"https://mirror.bazel.build/raw.githubusercontent.com/nodejs/node/v6.9.1/LICENSE\",\r\n            \"https://raw.githubusercontent.com/nodejs/node/v6.9.1/LICENSE\",\r\n        ],\r\n        \"513923b0490ebb7466a56483a62595814ed9d036d6f35476debb0cd606bec526\": [\r\n            \"https://mirror.bazel.build/nodejs.org/dist/v6.9.1/win-x64/node.exe\",\r\n            \"http://nodejs.org/dist/v6.9.1/win-x64/node.exe\",\r\n        ],\r\n        \"3951aefa4afd6fb836ab06468b1fc2a69fa75bd66ec2f5a0e08c4e32547681e3\": [\r\n            \"https://mirror.bazel.build/nodejs.org/dist/v6.9.1/win-x64/node.lib\",\r\n            \"http://nodejs.org/dist/v6.9.1/win-x64/node.lib\",\r\n        ],\r\n    },\r\n    sha256_urls_extract = {\r\n        \"d4eb161e4715e11bbef816a6c577974271e2bddae9cf008744627676ff00036a\": [\r\n            \"https://mirror.bazel.build/nodejs.org/dist/v6.9.1/node-v6.9.1-linux-x64.tar.xz\",\r\n            \"http://nodejs.org/dist/v6.9.1/node-v6.9.1-linux-x64.tar.xz\",\r\n        ],\r\n    },\r\n    strip_prefix = {\r\n        \"node-v6.9.1-darwin-x64.tar.xz\": \"node-v6.9.1-darwin-x64\",\r\n        \"node-v6.9.1-linux-x64.tar.xz\": \"node-v6.9.1-linux-x64\",\r\n    },\r\n    executable = [\r\n        \"node\",\r\n        \"node.exe\",\r\n    ],\r\n    default_visibility = [\"//tensorflow/contrib/node:__subpackages__\"],\r\n)\r\n```\r\n\r\nNow let's say you want you have a Node program, e.g. [tsc.js](https://github.com/tensorflow/tensorboard/blob/99a7437/third_party/js.bzl#L73), which you want to turn into something you can `bazel run //tensorflow/contrib/node:generate`. One quick way you could do this in Bazel is by defining a macro in `tensorflow/contrib/node/defs.bzl`:\r\n\r\n```py\r\ndef node_binary(name, srcs, data=None, visibility=None, testonly=None, **kwargs):\r\n  native.sh_binary(\r\n      name = name,\r\n      srcs = [name + \".sh\"],\r\n      data = srcs + data + [\"@org_nodejs\"],\r\n      testonly = testonly,\r\n      visibility = visibility,\r\n      **kwargs\r\n  )\r\n  \r\n  native.genrule(\r\n      name = name + \"_sh\",\r\n      srcs = [srcs[0]],\r\n      outs = [name + \".sh\"],\r\n      cmd = \"cat >$@ <<'EOF'\\n\" +\r\n            \"#!/bin/bash\\n\" +\r\n            \"NODE=external/org_nodejs/bin/node\\n\" +\r\n            \"if [[ -e external/org_nodejs/node.exe ]]; then\\n\" +\r\n            \"  NODE=external/org_nodejs/node.exe\\n\" +\r\n            \"fi\\n\" +\r\n            \"exec $${NODE} $(location \" + srcs[0] + \") \\\"$$@\\\"\\n\" +\r\n            \"EOF\",\r\n      executable = True,\r\n      testonly = testonly,\r\n      visibility = [\"//visibility:private\"],\r\n  )\r\n```\r\n\r\nNow for the fun part. I would write a single .js file (even if it had to be 30,000 lines long like [tex.web](http://tug.org/texlive/devsrc/Build/source/texk/web2c/tex.web)) with zero dependencies other than the Node standard library. The inputs for this program would be [ops.pbtxt](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/ops/ops.pbtxt) and all the other pbtxt files in [api_def/base_api](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/core/api_def/base_api). The output to this program would be exactly one gigantic C++ file that talks to [TensorFlow C API](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.h) and [Node C++ Addon API](https://nodejs.org/api/addons.html) based on [this example](https://github.com/nodejs/node-addon-examples/tree/master/1_hello_world/node_0.12).\r\n\r\n```py\r\nload(\"//tensorflow/contrib/node:defs.bzl\", \"node_binary\")\r\nload(\"@domain_registry//java/google/registry/builddefs:zip_file.bzl\", \"zip_file\")\r\n\r\nnode_binary(\r\n    name = \"generate\",\r\n    srcs = [\"generate.js\"],\r\n    data = [\r\n        \"//tensorflow/core:ops/ops.pbtxt\",\r\n        \"//tensorflow/core/api_def:base_api_def\",\r\n    ],\r\n)\r\n\r\ngenrule(\r\n    name = \"api\",\r\n    srcs = [\r\n        \"//tensorflow/core:ops/ops.pbtxt\",\r\n        \"//tensorflow/core/api_def:base_api_def\",\r\n    ],\r\n    cmd = \"$(location :generate) $(location api.cc) $(SRCS)\",\r\n    outs = [\"api.cc\"],\r\n    tools = [\":generate\"],\r\n)\r\n\r\nzip_file(\r\n    name = \"tfnode\",\r\n    srcs = [\r\n        \"package.json\",\r\n        \"README.md\",\r\n        \"api.cc\",\r\n        \"binding.gyp\",\r\n        \"tfnode.js\",\r\n    ],\r\n    mappings = {\"tensorflow/contrib/node\": \"package\"},\r\n)\r\n```\r\n\r\nThen you `bazel build //tensorflow/contrib/node:tfnode.zip` and bam you've got your NodeJS project all bundled and ready for distribution to places like NPM.\r\n\r\nIf I wrote this (which I won't) it would be a barebones direct mapping of the TensorFlow API definitions. Then I would encourage our friends in the community to veneer the library. There's a diversity of visions out there on friendly modern high-level idiomatic JS and ML APIs, each catering to different use cases. However they could all share this binding in common.\r\n\r\nPlease note there are examples of where we already generate language bindings. See [tensorflow/go/genop/main.go](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/go/genop/main.go) and [tensorflow/go/op/generate.go](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/go/op/generate.go) for inspiration."}