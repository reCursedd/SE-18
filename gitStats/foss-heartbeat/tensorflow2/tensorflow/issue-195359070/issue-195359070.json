{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6292", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6292/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6292/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6292/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6292", "id": 195359070, "node_id": "MDU6SXNzdWUxOTUzNTkwNzA=", "number": 6292, "title": "Squeeze dimension in compute_weighted_loss()", "user": {"login": "eldar", "id": 108657, "node_id": "MDQ6VXNlcjEwODY1Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/108657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eldar", "html_url": "https://github.com/eldar", "followers_url": "https://api.github.com/users/eldar/followers", "following_url": "https://api.github.com/users/eldar/following{/other_user}", "gists_url": "https://api.github.com/users/eldar/gists{/gist_id}", "starred_url": "https://api.github.com/users/eldar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eldar/subscriptions", "organizations_url": "https://api.github.com/users/eldar/orgs", "repos_url": "https://api.github.com/users/eldar/repos", "events_url": "https://api.github.com/users/eldar/events{/privacy}", "received_events_url": "https://api.github.com/users/eldar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-12-13T20:26:15Z", "updated_at": "2018-08-10T06:59:56Z", "closed_at": "2016-12-13T20:58:29Z", "author_association": "NONE", "body_html": "<p>Operating System: Debian Jessy. CUDA8, CuDNN v5.1. TF 0.12rc0</p>\n<p>I am training a CNN for semantic image labeling task and use an FCN-style architecture. In one of the prediction layers I compute weighted loss. The prediction tensor is of dimensions [1, Height, Width, num_predictions] and weight tensor is [1, Height, Width], batch size is always 1 for me. Training fails on this piece of code:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/losses/python/losses/loss_ops.py#L178-L179\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/losses/python/losses/loss_ops.py#L178-L179</a></p>\n<pre><code>  File \"/BS/eldar/work/src/pose-tf/train_net.py\", line 30, in &lt;module&gt;\n    losses = pose_net_train(train_param, batch)\n  File \"/BS/eldar/work/src/pose-tf/PoseNet.py\", line 108, in pose_net_train\n    loss['locref_loss'] = loss_func(locref_pred, locref_targets, locref_weights)\n  File \"/BS/eldar/work/src/pose-tf/losses.py\", line 39, in huber_loss\n    return tf_losses.compute_weighted_loss(losses, weight)\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/util/deprecation.py\", line 191, in new_func\n    return func(*args, **kwargs)\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/contrib/losses/python/losses/loss_ops.py\", line 176, in compute_weighted_loss\n    weights = array_ops.squeeze(weights, [-1])\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/ops/array_ops.py\", line 2258, in squeeze\n    return gen_array_ops._squeeze(input, axis, name)\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 3313, in _squeeze\n    squeeze_dims=squeeze_dims, name=name)\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py\", line 759, in apply_op\n    op_def=op_def)\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/framework/ops.py\", line 2240, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/framework/ops.py\", line 1128, in __init__\n    self._traceback = _extract_stack()\n\nInvalidArgumentError (see above for traceback): Tried to explicitly squeeze dimension 2 but dimension was not 1: 24\n         [[Node: absolute_difference/Squeeze = Squeeze[T=DT_FLOAT, squeeze_dims=[-1], _device=\"/job:localhost/replica:0/task:0/gpu:0\"](fifo_queue_Dequeue/_1045)]]\n         [[Node: Momentum/update/_1080 = _Recv[client_terminated=false, recv_device=\"/job:localhost/replica:0/task:0/cpu:0\", send_device=\"/job:localhost/replica:0/task:0/gpu:0\", send_device_incarnation=1, tensor\n_name=\"edge_4872_Momentum/update\", tensor_type=DT_FLOAT, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\n</code></pre>\n<p>My assumption is that it squeezes the dummy dimension that corresponds to the batch size=1, while it clearly shouldn't. For now I just comment out these two lines in the code, but it'd be nicer if there was a fix upstream.</p>\n<p>Cheers,<br>\nEldar.</p>", "body_text": "Operating System: Debian Jessy. CUDA8, CuDNN v5.1. TF 0.12rc0\nI am training a CNN for semantic image labeling task and use an FCN-style architecture. In one of the prediction layers I compute weighted loss. The prediction tensor is of dimensions [1, Height, Width, num_predictions] and weight tensor is [1, Height, Width], batch size is always 1 for me. Training fails on this piece of code:\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/losses/python/losses/loss_ops.py#L178-L179\n  File \"/BS/eldar/work/src/pose-tf/train_net.py\", line 30, in <module>\n    losses = pose_net_train(train_param, batch)\n  File \"/BS/eldar/work/src/pose-tf/PoseNet.py\", line 108, in pose_net_train\n    loss['locref_loss'] = loss_func(locref_pred, locref_targets, locref_weights)\n  File \"/BS/eldar/work/src/pose-tf/losses.py\", line 39, in huber_loss\n    return tf_losses.compute_weighted_loss(losses, weight)\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/util/deprecation.py\", line 191, in new_func\n    return func(*args, **kwargs)\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/contrib/losses/python/losses/loss_ops.py\", line 176, in compute_weighted_loss\n    weights = array_ops.squeeze(weights, [-1])\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/ops/array_ops.py\", line 2258, in squeeze\n    return gen_array_ops._squeeze(input, axis, name)\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 3313, in _squeeze\n    squeeze_dims=squeeze_dims, name=name)\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py\", line 759, in apply_op\n    op_def=op_def)\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/framework/ops.py\", line 2240, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/framework/ops.py\", line 1128, in __init__\n    self._traceback = _extract_stack()\n\nInvalidArgumentError (see above for traceback): Tried to explicitly squeeze dimension 2 but dimension was not 1: 24\n         [[Node: absolute_difference/Squeeze = Squeeze[T=DT_FLOAT, squeeze_dims=[-1], _device=\"/job:localhost/replica:0/task:0/gpu:0\"](fifo_queue_Dequeue/_1045)]]\n         [[Node: Momentum/update/_1080 = _Recv[client_terminated=false, recv_device=\"/job:localhost/replica:0/task:0/cpu:0\", send_device=\"/job:localhost/replica:0/task:0/gpu:0\", send_device_incarnation=1, tensor\n_name=\"edge_4872_Momentum/update\", tensor_type=DT_FLOAT, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\n\nMy assumption is that it squeezes the dummy dimension that corresponds to the batch size=1, while it clearly shouldn't. For now I just comment out these two lines in the code, but it'd be nicer if there was a fix upstream.\nCheers,\nEldar.", "body": "Operating System: Debian Jessy. CUDA8, CuDNN v5.1. TF 0.12rc0\r\n\r\nI am training a CNN for semantic image labeling task and use an FCN-style architecture. In one of the prediction layers I compute weighted loss. The prediction tensor is of dimensions [1, Height, Width, num_predictions] and weight tensor is [1, Height, Width], batch size is always 1 for me. Training fails on this piece of code:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/losses/python/losses/loss_ops.py#L178-L179\r\n\r\n```\r\n  File \"/BS/eldar/work/src/pose-tf/train_net.py\", line 30, in <module>\r\n    losses = pose_net_train(train_param, batch)\r\n  File \"/BS/eldar/work/src/pose-tf/PoseNet.py\", line 108, in pose_net_train\r\n    loss['locref_loss'] = loss_func(locref_pred, locref_targets, locref_weights)\r\n  File \"/BS/eldar/work/src/pose-tf/losses.py\", line 39, in huber_loss\r\n    return tf_losses.compute_weighted_loss(losses, weight)\r\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/util/deprecation.py\", line 191, in new_func\r\n    return func(*args, **kwargs)\r\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/contrib/losses/python/losses/loss_ops.py\", line 176, in compute_weighted_loss\r\n    weights = array_ops.squeeze(weights, [-1])\r\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/ops/array_ops.py\", line 2258, in squeeze\r\n    return gen_array_ops._squeeze(input, axis, name)\r\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 3313, in _squeeze\r\n    squeeze_dims=squeeze_dims, name=name)\r\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py\", line 759, in apply_op\r\n    op_def=op_def)\r\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/framework/ops.py\", line 2240, in create_op\r\n    original_op=self._default_original_op, op_def=op_def)\r\n  File \"/BS/eldar/work/software/python3_tf_0.12/lib/python3.4/site-packages/tensorflow/python/framework/ops.py\", line 1128, in __init__\r\n    self._traceback = _extract_stack()\r\n\r\nInvalidArgumentError (see above for traceback): Tried to explicitly squeeze dimension 2 but dimension was not 1: 24\r\n         [[Node: absolute_difference/Squeeze = Squeeze[T=DT_FLOAT, squeeze_dims=[-1], _device=\"/job:localhost/replica:0/task:0/gpu:0\"](fifo_queue_Dequeue/_1045)]]\r\n         [[Node: Momentum/update/_1080 = _Recv[client_terminated=false, recv_device=\"/job:localhost/replica:0/task:0/cpu:0\", send_device=\"/job:localhost/replica:0/task:0/gpu:0\", send_device_incarnation=1, tensor\r\n_name=\"edge_4872_Momentum/update\", tensor_type=DT_FLOAT, _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\r\n```\r\n\r\nMy assumption is that it squeezes the dummy dimension that corresponds to the batch size=1, while it clearly shouldn't. For now I just comment out these two lines in the code, but it'd be nicer if there was a fix upstream.\r\n\r\nCheers,\r\nEldar."}