{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19426", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19426/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19426/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19426/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19426", "id": 324752138, "node_id": "MDU6SXNzdWUzMjQ3NTIxMzg=", "number": 19426, "title": "Unknown TF crash on OSX in C++ Application, works fine on another machine, other operating systems", "user": {"login": "samhodge", "id": 86946, "node_id": "MDQ6VXNlcjg2OTQ2", "avatar_url": "https://avatars0.githubusercontent.com/u/86946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samhodge", "html_url": "https://github.com/samhodge", "followers_url": "https://api.github.com/users/samhodge/followers", "following_url": "https://api.github.com/users/samhodge/following{/other_user}", "gists_url": "https://api.github.com/users/samhodge/gists{/gist_id}", "starred_url": "https://api.github.com/users/samhodge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samhodge/subscriptions", "organizations_url": "https://api.github.com/users/samhodge/orgs", "repos_url": "https://api.github.com/users/samhodge/repos", "events_url": "https://api.github.com/users/samhodge/events{/privacy}", "received_events_url": "https://api.github.com/users/samhodge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-05-20T23:32:49Z", "updated_at": "2018-06-24T05:18:43Z", "closed_at": "2018-06-24T05:18:43Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>\n<p><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes there is a bunch of private OpenFX plugin and C++ hosting of the network involved.</p>\n</li>\n<li>\n<p><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nmacOS 10.12</p>\n</li>\n<li>\n<p><strong>TensorFlow installed from (source or binary)</strong>:<br>\nsource</p>\n</li>\n<li>\n<p><strong>TensorFlow version (use command below)</strong>:<br>\nr1.6</p>\n</li>\n<li>\n<p><strong>Python version</strong>:<br>\nna</p>\n</li>\n<li>\n<p><strong>Bazel version (if compiling from source)</strong>:<br>\n0.6</p>\n</li>\n<li>\n<p><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\nclang 8</p>\n</li>\n<li>\n<p><strong>CUDA/cuDNN version</strong>:<br>\nNA</p>\n</li>\n<li>\n<p><strong>GPU model and memory</strong>:<br>\nNVIDIA GTX 780M</p>\n</li>\n<li>\n<p><strong>Exact command to reproduce</strong>:<br>\nDownload alpha trial of software, install according to instructions.</p>\n</li>\n</ul>\n<p>Launch Nuke as follows:<br>\nROTOBOT_MODEL_DIR=$PWD OFX_PLUGIN_PATH=$OFX_PLUGIN_PATH:$PWD /Applications/Nuke10.5v7/Nuke10.5v7.app/Contents/MacOS/Nuke10.5v7</p>\n<p>Create read node, create Rotobot-MaskRCNN node, connect source to read node</p>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<p>Same neural network work fine on hardware without GPU installed</p>\n<p>Works OK under Linux 64, macOS</p>\n<p>I am unsure of what is causing this crash.</p>\n<h3>Source code / logs</h3>\n<p>Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.</p>\n<pre><code>Thread 36 Crashed:\n0   libtensorflow_cc.so           \t0x000000013c6ce622 Eigen::internal::TensorExecutor&lt;Eigen::TensorAssignOp&lt;Eigen::TensorMap&lt;Eigen::Tensor&lt;float, 3, 1, long&gt;, 16, Eigen::MakePointer&gt;, Eigen::TensorSlicingOp&lt;Eigen::DSizes&lt;long, 3&gt; const, Eigen::DSizes&lt;long, 3&gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 3, 1, long&gt;, 16, Eigen::MakePointer&gt; const&gt; const&gt; const, Eigen::DefaultDevice, true&gt;::run(Eigen::TensorAssignOp&lt;Eigen::TensorMap&lt;Eigen::Tensor&lt;float, 3, 1, long&gt;, 16, Eigen::MakePointer&gt;, Eigen::TensorSlicingOp&lt;Eigen::DSizes&lt;long, 3&gt; const, Eigen::DSizes&lt;long, 3&gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 3, 1, long&gt;, 16, Eigen::MakePointer&gt; const&gt; const&gt; const&amp;, Eigen::DefaultDevice const&amp;) + 1682\n1   libtensorflow_cc.so           \t0x000000013ca4eb15 tensorflow::functor::Split&lt;Eigen::ThreadPoolDevice, float&gt;::operator()(Eigen::ThreadPoolDevice const&amp;, Eigen::TensorMap&lt;Eigen::Tensor&lt;float, 3, 1, long&gt;, 16, Eigen::MakePointer&gt;, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 3, 1, long&gt;, 16, Eigen::MakePointer&gt;, Eigen::DSizes&lt;long, 3&gt; const&amp;, Eigen::DSizes&lt;long, 3&gt; const&amp;) + 101\n2   libtensorflow_cc.so           \t0x000000013c6cde31 tensorflow::SplitOpCPU&lt;float&gt;::Compute(tensorflow::OpKernelContext*)::'lambda'(long long, long long)::operator()(long long, long long) const + 481\n3   libtensorflow_cc.so           \t0x000000013c6cd7db tensorflow::SplitOpCPU&lt;float&gt;::Compute(tensorflow::OpKernelContext*) + 1099\n4   libtensorflow_cc.so           \t0x000000013e3f7442 tensorflow::grappler::ConstantFolding::EvaluateNode(tensorflow::NodeDef const&amp;, tensorflow::gtl::InlinedVector&lt;tensorflow::TensorValue, 4&gt; const&amp;, tensorflow::gtl::InlinedVector&lt;tensorflow::TensorValue, 4&gt;*) const + 562\n5   libtensorflow_cc.so           \t0x000000013e3f78bc tensorflow::grappler::ConstantFolding::EvaluateOneFoldable(tensorflow::NodeDef const&amp;, std::__1::vector&lt;tensorflow::NodeDef, std::__1::allocator&lt;tensorflow::NodeDef&gt; &gt;*) + 604\n6   libtensorflow_cc.so           \t0x000000013e3f82d2 tensorflow::grappler::ConstantFolding::FoldNode(tensorflow::NodeDef*, tensorflow::GraphDef*) + 402\n7   libtensorflow_cc.so           \t0x000000013e3fa54d tensorflow::grappler::ConstantFolding::FoldGraph(tensorflow::GraphDef*) + 973\n8   libtensorflow_cc.so           \t0x000000013e400f83 tensorflow::grappler::ConstantFolding::RunOptimizationPass(tensorflow::grappler::Cluster*, tensorflow::grappler::GrapplerItem const&amp;, tensorflow::GraphDef*) + 1523\n9   libtensorflow_cc.so           \t0x000000013e401925 tensorflow::grappler::ConstantFolding::Optimize(tensorflow::grappler::Cluster*, tensorflow::grappler::GrapplerItem const&amp;, tensorflow::GraphDef*) + 1829\n10  libtensorflow_cc.so           \t0x000000013e3db066 tensorflow::grappler::MetaOptimizer::Optimize(tensorflow::grappler::Cluster*, tensorflow::grappler::GrapplerItem const&amp;, tensorflow::GraphDef*) + 2822\n11  libtensorflow_cc.so           \t0x000000013e3dc2dd tensorflow::grappler::RunMetaOptimizer(tensorflow::grappler::GrapplerItem const&amp;, tensorflow::RewriterConfig const&amp;, tensorflow::DeviceBase*, tensorflow::grappler::Cluster*, tensorflow::GraphDef*) + 109\n12  libtensorflow_cc.so           \t0x000000013e3d6dac tensorflow::GraphExecutionState::OptimizeGraph(tensorflow::BuildGraphOptions const&amp;, std::__1::unique_ptr&lt;tensorflow::Graph, std::__1::default_delete&lt;tensorflow::Graph&gt; &gt;*) + 3564\n13  libtensorflow_cc.so           \t0x000000013e3d4686 tensorflow::GraphExecutionState::BuildGraph(tensorflow::BuildGraphOptions const&amp;, std::__1::unique_ptr&lt;tensorflow::ClientGraph, std::__1::default_delete&lt;tensorflow::ClientGraph&gt; &gt;*) + 166\n14  libtensorflow_cc.so           \t0x000000013e3c0d37 tensorflow::DirectSession::CreateGraphs(tensorflow::BuildGraphOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::unique_ptr&lt;tensorflow::Graph, std::__1::default_delete&lt;tensorflow::Graph&gt; &gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const, std::__1::unique_ptr&lt;tensorflow::Graph, std::__1::default_delete&lt;tensorflow::Graph&gt; &gt; &gt; &gt; &gt;*, std::__1::unique_ptr&lt;tensorflow::FunctionLibraryDefinition, std::__1::default_delete&lt;tensorflow::FunctionLibraryDefinition&gt; &gt;*, tensorflow::DirectSession::RunStateArgs*, tensorflow::gtl::InlinedVector&lt;tensorflow::DataType, 4&gt;*, tensorflow::gtl::InlinedVector&lt;tensorflow::DataType, 4&gt;*) + 375\n15  libtensorflow_cc.so           \t0x000000013e3bb469 tensorflow::DirectSession::GetOrCreateExecutors(tensorflow::gtl::ArraySlice&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, tensorflow::gtl::ArraySlice&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, tensorflow::gtl::ArraySlice&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;, tensorflow::DirectSession::ExecutorsAndKeys**, tensorflow::DirectSession::RunStateArgs*) + 4585\n16  libtensorflow_cc.so           \t0x000000013e3b893c tensorflow::DirectSession::Run(tensorflow::RunOptions const&amp;, std::__1::vector&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, tensorflow::Tensor&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, tensorflow::Tensor&gt; &gt; &gt; const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__1::vector&lt;tensorflow::Tensor, std::__1::allocator&lt;tensorflow::Tensor&gt; &gt;*, tensorflow::RunMetadata*) + 908\n17  libtensorflow_cc.so           \t0x000000013e3b8437 tensorflow::DirectSession::Run(std::__1::vector&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, tensorflow::Tensor&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, tensorflow::Tensor&gt; &gt; &gt; const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__1::vector&lt;tensorflow::Tensor, std::__1::allocator&lt;tensorflow::Tensor&gt; &gt;*) + 103\n18  rotobotmaskrcnn.ofx           \t0x000000013b805f21 drawMasks(OpenImageIO::v1_6::ImageBuf&amp;, std::__1::unique_ptr&lt;tensorflow::Session, std::__1::default_delete&lt;tensorflow::Session&gt; &gt;&amp;, OpenImageIO::v1_6::ImageBuf&amp;, bool) + 6737\n19  rotobotmaskrcnn.ofx           \t0x000000013b8038af RotobotMaskRCNNPlugin::computeMask(OFX::Image*) + 3823\n20  rotobotmaskrcnn.ofx           \t0x000000013b80234c RotobotMaskRCNNPlugin::setupAndProcess(ImageScalerBase&amp;, OFX::RenderArguments const&amp;) + 1628\n21  rotobotmaskrcnn.ofx           \t0x000000013b808df9 RotobotMaskRCNNPlugin::render(OFX::RenderArguments const&amp;) + 409\n22  rotobotmaskrcnn.ofx           \t0x000000013b84b2a6 OFX::Private::renderAction(OfxImageEffectStruct*, OFX::PropertySet) + 86\n23  rotobotmaskrcnn.ofx           \t0x000000013b84750b OFX::Private::mainEntryStr(char const*, void const*, OfxPropertySetStruct*, OfxPropertySetStruct*, char const*) + 9115\n24  rotobotmaskrcnn.ofx           \t0x000000013b81b970 OFX::FactoryMainEntryHelper&lt;RotobotMaskRCNNPluginFactory&gt;::mainEntry(char const*, void const*, OfxPropertySetStruct*, OfxPropertySetStruct*) + 320\n25  libnuke-10.5.7.dylib          \t0x000000010702e9ac OFX::Host::ImageEffect::Instance::mainEntry(char const*, void const*, OFX::Host::Property::Set*, OFX::Host::Property::Set*) + 284\n26  libnuke-10.5.7.dylib          \t0x000000010703072d OFX::Host::ImageEffect::Instance::renderAction(double, std::string const&amp;, OfxRectI const&amp;, OfxPointD) + 973\n27  libnuke-10.5.7.dylib          \t0x0000000106b25e21 Nofx::NofxIop::renderBlock(unsigned long, DD::Image::ChannelSet const&amp;) + 1393\n28  libnuke-10.5.7.dylib          \t0x0000000106b21df1 Nofx::NofxIop::engine(int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 657\n29  libDDImage.dylib              \t0x000000010850873c DD::Image::Cache::fill_line(int, DD::Image::Row&amp;, DD::Image::ChannelSet const&amp;, DD::Image::ChannelSet&amp;, DD::Image::ChannelSet&amp;) + 556\n30  libDDImage.dylib              \t0x0000000108508d78 DD::Image::Cache::load_line_incr(int, DD::Image::Row&amp;, DD::Image::ChannelSet const&amp;, DD::Image::ChannelSet&amp;, DD::Image::ChannelSet&amp;) + 488\n31  libDDImage.dylib              \t0x00000001085a5fef DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 1519\n32  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 183\n33  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 137\n34  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 2085\n35  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 183\n36  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 137\n37  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 2085\n38  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 183\n39  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 137\n40  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 2085\n41  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 183\n42  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 137\n43  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 2085\n44  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 183\n45  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 137\n46  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&amp;, DD::Image::Row&amp;) + 2085\n47  libnuke-10.5.7.dylib          \t0x0000000106f954bd Viewer_Image::thread_proc() + 813\n48  libnuke-10.5.7.dylib          \t0x0000000106f95186 Viewer_Image::_thread_proc(void*) + 6\n49  libnuke-10.5.7.dylib          \t0x000000010668cc0e thread_func(unsigned int, unsigned int, void*) + 14\n50  libDDImage.dylib              \t0x0000000108690ad8 DD::Image::thread_proc(void*) + 120\n51  libsystem_pthread.dylib       \t0x00007fffc282093b _pthread_body + 180\n52  libsystem_pthread.dylib       \t0x00007fffc2820887 _pthread_start + 286\n53  libsystem_pthread.dylib       \t0x00007fffc282008d thread_start + 13\n</code></pre>\n<p>To see the expected result please visit:</p>\n<p><a href=\"https://www.linkedin.com/feed/update/urn:li:activity:6403107128722190336\" rel=\"nofollow\">https://www.linkedin.com/feed/update/urn:li:activity:6403107128722190336</a></p>", "body_text": "System information\n\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes there is a bunch of private OpenFX plugin and C++ hosting of the network involved.\n\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nmacOS 10.12\n\n\nTensorFlow installed from (source or binary):\nsource\n\n\nTensorFlow version (use command below):\nr1.6\n\n\nPython version:\nna\n\n\nBazel version (if compiling from source):\n0.6\n\n\nGCC/Compiler version (if compiling from source):\nclang 8\n\n\nCUDA/cuDNN version:\nNA\n\n\nGPU model and memory:\nNVIDIA GTX 780M\n\n\nExact command to reproduce:\nDownload alpha trial of software, install according to instructions.\n\n\nLaunch Nuke as follows:\nROTOBOT_MODEL_DIR=$PWD OFX_PLUGIN_PATH=$OFX_PLUGIN_PATH:$PWD /Applications/Nuke10.5v7/Nuke10.5v7.app/Contents/MacOS/Nuke10.5v7\nCreate read node, create Rotobot-MaskRCNN node, connect source to read node\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\nSame neural network work fine on hardware without GPU installed\nWorks OK under Linux 64, macOS\nI am unsure of what is causing this crash.\nSource code / logs\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\nThread 36 Crashed:\n0   libtensorflow_cc.so           \t0x000000013c6ce622 Eigen::internal::TensorExecutor<Eigen::TensorAssignOp<Eigen::TensorMap<Eigen::Tensor<float, 3, 1, long>, 16, Eigen::MakePointer>, Eigen::TensorSlicingOp<Eigen::DSizes<long, 3> const, Eigen::DSizes<long, 3> const, Eigen::TensorMap<Eigen::Tensor<float const, 3, 1, long>, 16, Eigen::MakePointer> const> const> const, Eigen::DefaultDevice, true>::run(Eigen::TensorAssignOp<Eigen::TensorMap<Eigen::Tensor<float, 3, 1, long>, 16, Eigen::MakePointer>, Eigen::TensorSlicingOp<Eigen::DSizes<long, 3> const, Eigen::DSizes<long, 3> const, Eigen::TensorMap<Eigen::Tensor<float const, 3, 1, long>, 16, Eigen::MakePointer> const> const> const&, Eigen::DefaultDevice const&) + 1682\n1   libtensorflow_cc.so           \t0x000000013ca4eb15 tensorflow::functor::Split<Eigen::ThreadPoolDevice, float>::operator()(Eigen::ThreadPoolDevice const&, Eigen::TensorMap<Eigen::Tensor<float, 3, 1, long>, 16, Eigen::MakePointer>, Eigen::TensorMap<Eigen::Tensor<float const, 3, 1, long>, 16, Eigen::MakePointer>, Eigen::DSizes<long, 3> const&, Eigen::DSizes<long, 3> const&) + 101\n2   libtensorflow_cc.so           \t0x000000013c6cde31 tensorflow::SplitOpCPU<float>::Compute(tensorflow::OpKernelContext*)::'lambda'(long long, long long)::operator()(long long, long long) const + 481\n3   libtensorflow_cc.so           \t0x000000013c6cd7db tensorflow::SplitOpCPU<float>::Compute(tensorflow::OpKernelContext*) + 1099\n4   libtensorflow_cc.so           \t0x000000013e3f7442 tensorflow::grappler::ConstantFolding::EvaluateNode(tensorflow::NodeDef const&, tensorflow::gtl::InlinedVector<tensorflow::TensorValue, 4> const&, tensorflow::gtl::InlinedVector<tensorflow::TensorValue, 4>*) const + 562\n5   libtensorflow_cc.so           \t0x000000013e3f78bc tensorflow::grappler::ConstantFolding::EvaluateOneFoldable(tensorflow::NodeDef const&, std::__1::vector<tensorflow::NodeDef, std::__1::allocator<tensorflow::NodeDef> >*) + 604\n6   libtensorflow_cc.so           \t0x000000013e3f82d2 tensorflow::grappler::ConstantFolding::FoldNode(tensorflow::NodeDef*, tensorflow::GraphDef*) + 402\n7   libtensorflow_cc.so           \t0x000000013e3fa54d tensorflow::grappler::ConstantFolding::FoldGraph(tensorflow::GraphDef*) + 973\n8   libtensorflow_cc.so           \t0x000000013e400f83 tensorflow::grappler::ConstantFolding::RunOptimizationPass(tensorflow::grappler::Cluster*, tensorflow::grappler::GrapplerItem const&, tensorflow::GraphDef*) + 1523\n9   libtensorflow_cc.so           \t0x000000013e401925 tensorflow::grappler::ConstantFolding::Optimize(tensorflow::grappler::Cluster*, tensorflow::grappler::GrapplerItem const&, tensorflow::GraphDef*) + 1829\n10  libtensorflow_cc.so           \t0x000000013e3db066 tensorflow::grappler::MetaOptimizer::Optimize(tensorflow::grappler::Cluster*, tensorflow::grappler::GrapplerItem const&, tensorflow::GraphDef*) + 2822\n11  libtensorflow_cc.so           \t0x000000013e3dc2dd tensorflow::grappler::RunMetaOptimizer(tensorflow::grappler::GrapplerItem const&, tensorflow::RewriterConfig const&, tensorflow::DeviceBase*, tensorflow::grappler::Cluster*, tensorflow::GraphDef*) + 109\n12  libtensorflow_cc.so           \t0x000000013e3d6dac tensorflow::GraphExecutionState::OptimizeGraph(tensorflow::BuildGraphOptions const&, std::__1::unique_ptr<tensorflow::Graph, std::__1::default_delete<tensorflow::Graph> >*) + 3564\n13  libtensorflow_cc.so           \t0x000000013e3d4686 tensorflow::GraphExecutionState::BuildGraph(tensorflow::BuildGraphOptions const&, std::__1::unique_ptr<tensorflow::ClientGraph, std::__1::default_delete<tensorflow::ClientGraph> >*) + 166\n14  libtensorflow_cc.so           \t0x000000013e3c0d37 tensorflow::DirectSession::CreateGraphs(tensorflow::BuildGraphOptions const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::unique_ptr<tensorflow::Graph, std::__1::default_delete<tensorflow::Graph> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::unique_ptr<tensorflow::Graph, std::__1::default_delete<tensorflow::Graph> > > > >*, std::__1::unique_ptr<tensorflow::FunctionLibraryDefinition, std::__1::default_delete<tensorflow::FunctionLibraryDefinition> >*, tensorflow::DirectSession::RunStateArgs*, tensorflow::gtl::InlinedVector<tensorflow::DataType, 4>*, tensorflow::gtl::InlinedVector<tensorflow::DataType, 4>*) + 375\n15  libtensorflow_cc.so           \t0x000000013e3bb469 tensorflow::DirectSession::GetOrCreateExecutors(tensorflow::gtl::ArraySlice<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, tensorflow::gtl::ArraySlice<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, tensorflow::gtl::ArraySlice<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, tensorflow::DirectSession::ExecutorsAndKeys**, tensorflow::DirectSession::RunStateArgs*) + 4585\n16  libtensorflow_cc.so           \t0x000000013e3b893c tensorflow::DirectSession::Run(tensorflow::RunOptions const&, std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor> > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<tensorflow::Tensor, std::__1::allocator<tensorflow::Tensor> >*, tensorflow::RunMetadata*) + 908\n17  libtensorflow_cc.so           \t0x000000013e3b8437 tensorflow::DirectSession::Run(std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor> > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<tensorflow::Tensor, std::__1::allocator<tensorflow::Tensor> >*) + 103\n18  rotobotmaskrcnn.ofx           \t0x000000013b805f21 drawMasks(OpenImageIO::v1_6::ImageBuf&, std::__1::unique_ptr<tensorflow::Session, std::__1::default_delete<tensorflow::Session> >&, OpenImageIO::v1_6::ImageBuf&, bool) + 6737\n19  rotobotmaskrcnn.ofx           \t0x000000013b8038af RotobotMaskRCNNPlugin::computeMask(OFX::Image*) + 3823\n20  rotobotmaskrcnn.ofx           \t0x000000013b80234c RotobotMaskRCNNPlugin::setupAndProcess(ImageScalerBase&, OFX::RenderArguments const&) + 1628\n21  rotobotmaskrcnn.ofx           \t0x000000013b808df9 RotobotMaskRCNNPlugin::render(OFX::RenderArguments const&) + 409\n22  rotobotmaskrcnn.ofx           \t0x000000013b84b2a6 OFX::Private::renderAction(OfxImageEffectStruct*, OFX::PropertySet) + 86\n23  rotobotmaskrcnn.ofx           \t0x000000013b84750b OFX::Private::mainEntryStr(char const*, void const*, OfxPropertySetStruct*, OfxPropertySetStruct*, char const*) + 9115\n24  rotobotmaskrcnn.ofx           \t0x000000013b81b970 OFX::FactoryMainEntryHelper<RotobotMaskRCNNPluginFactory>::mainEntry(char const*, void const*, OfxPropertySetStruct*, OfxPropertySetStruct*) + 320\n25  libnuke-10.5.7.dylib          \t0x000000010702e9ac OFX::Host::ImageEffect::Instance::mainEntry(char const*, void const*, OFX::Host::Property::Set*, OFX::Host::Property::Set*) + 284\n26  libnuke-10.5.7.dylib          \t0x000000010703072d OFX::Host::ImageEffect::Instance::renderAction(double, std::string const&, OfxRectI const&, OfxPointD) + 973\n27  libnuke-10.5.7.dylib          \t0x0000000106b25e21 Nofx::NofxIop::renderBlock(unsigned long, DD::Image::ChannelSet const&) + 1393\n28  libnuke-10.5.7.dylib          \t0x0000000106b21df1 Nofx::NofxIop::engine(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 657\n29  libDDImage.dylib              \t0x000000010850873c DD::Image::Cache::fill_line(int, DD::Image::Row&, DD::Image::ChannelSet const&, DD::Image::ChannelSet&, DD::Image::ChannelSet&) + 556\n30  libDDImage.dylib              \t0x0000000108508d78 DD::Image::Cache::load_line_incr(int, DD::Image::Row&, DD::Image::ChannelSet const&, DD::Image::ChannelSet&, DD::Image::ChannelSet&) + 488\n31  libDDImage.dylib              \t0x00000001085a5fef DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 1519\n32  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 183\n33  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 137\n34  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 2085\n35  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 183\n36  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 137\n37  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 2085\n38  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 183\n39  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 137\n40  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 2085\n41  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 183\n42  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 137\n43  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 2085\n44  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 183\n45  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 137\n46  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 2085\n47  libnuke-10.5.7.dylib          \t0x0000000106f954bd Viewer_Image::thread_proc() + 813\n48  libnuke-10.5.7.dylib          \t0x0000000106f95186 Viewer_Image::_thread_proc(void*) + 6\n49  libnuke-10.5.7.dylib          \t0x000000010668cc0e thread_func(unsigned int, unsigned int, void*) + 14\n50  libDDImage.dylib              \t0x0000000108690ad8 DD::Image::thread_proc(void*) + 120\n51  libsystem_pthread.dylib       \t0x00007fffc282093b _pthread_body + 180\n52  libsystem_pthread.dylib       \t0x00007fffc2820887 _pthread_start + 286\n53  libsystem_pthread.dylib       \t0x00007fffc282008d thread_start + 13\n\nTo see the expected result please visit:\nhttps://www.linkedin.com/feed/update/urn:li:activity:6403107128722190336", "body": "\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes there is a bunch of private OpenFX plugin and C++ hosting of the network involved.\r\n\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nmacOS 10.12\r\n- **TensorFlow installed from (source or binary)**:\r\nsource\r\n- **TensorFlow version (use command below)**:\r\nr1.6\r\n- **Python version**: \r\nna\r\n- **Bazel version (if compiling from source)**:\r\n0.6\r\n- **GCC/Compiler version (if compiling from source)**:\r\nclang 8\r\n- **CUDA/cuDNN version**:\r\nNA\r\n- **GPU model and memory**:\r\nNVIDIA GTX 780M\r\n- **Exact command to reproduce**:\r\nDownload alpha trial of software, install according to instructions.\r\n\r\nLaunch Nuke as follows:\r\nROTOBOT_MODEL_DIR=$PWD OFX_PLUGIN_PATH=$OFX_PLUGIN_PATH:$PWD /Applications/Nuke10.5v7/Nuke10.5v7.app/Contents/MacOS/Nuke10.5v7 \r\n\r\nCreate read node, create Rotobot-MaskRCNN node, connect source to read node\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n\r\nSame neural network work fine on hardware without GPU installed\r\n\r\nWorks OK under Linux 64, macOS\r\n\r\nI am unsure of what is causing this crash.\r\n\r\n### Source code / logs\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\r\n\r\n\r\n```\r\nThread 36 Crashed:\r\n0   libtensorflow_cc.so           \t0x000000013c6ce622 Eigen::internal::TensorExecutor<Eigen::TensorAssignOp<Eigen::TensorMap<Eigen::Tensor<float, 3, 1, long>, 16, Eigen::MakePointer>, Eigen::TensorSlicingOp<Eigen::DSizes<long, 3> const, Eigen::DSizes<long, 3> const, Eigen::TensorMap<Eigen::Tensor<float const, 3, 1, long>, 16, Eigen::MakePointer> const> const> const, Eigen::DefaultDevice, true>::run(Eigen::TensorAssignOp<Eigen::TensorMap<Eigen::Tensor<float, 3, 1, long>, 16, Eigen::MakePointer>, Eigen::TensorSlicingOp<Eigen::DSizes<long, 3> const, Eigen::DSizes<long, 3> const, Eigen::TensorMap<Eigen::Tensor<float const, 3, 1, long>, 16, Eigen::MakePointer> const> const> const&, Eigen::DefaultDevice const&) + 1682\r\n1   libtensorflow_cc.so           \t0x000000013ca4eb15 tensorflow::functor::Split<Eigen::ThreadPoolDevice, float>::operator()(Eigen::ThreadPoolDevice const&, Eigen::TensorMap<Eigen::Tensor<float, 3, 1, long>, 16, Eigen::MakePointer>, Eigen::TensorMap<Eigen::Tensor<float const, 3, 1, long>, 16, Eigen::MakePointer>, Eigen::DSizes<long, 3> const&, Eigen::DSizes<long, 3> const&) + 101\r\n2   libtensorflow_cc.so           \t0x000000013c6cde31 tensorflow::SplitOpCPU<float>::Compute(tensorflow::OpKernelContext*)::'lambda'(long long, long long)::operator()(long long, long long) const + 481\r\n3   libtensorflow_cc.so           \t0x000000013c6cd7db tensorflow::SplitOpCPU<float>::Compute(tensorflow::OpKernelContext*) + 1099\r\n4   libtensorflow_cc.so           \t0x000000013e3f7442 tensorflow::grappler::ConstantFolding::EvaluateNode(tensorflow::NodeDef const&, tensorflow::gtl::InlinedVector<tensorflow::TensorValue, 4> const&, tensorflow::gtl::InlinedVector<tensorflow::TensorValue, 4>*) const + 562\r\n5   libtensorflow_cc.so           \t0x000000013e3f78bc tensorflow::grappler::ConstantFolding::EvaluateOneFoldable(tensorflow::NodeDef const&, std::__1::vector<tensorflow::NodeDef, std::__1::allocator<tensorflow::NodeDef> >*) + 604\r\n6   libtensorflow_cc.so           \t0x000000013e3f82d2 tensorflow::grappler::ConstantFolding::FoldNode(tensorflow::NodeDef*, tensorflow::GraphDef*) + 402\r\n7   libtensorflow_cc.so           \t0x000000013e3fa54d tensorflow::grappler::ConstantFolding::FoldGraph(tensorflow::GraphDef*) + 973\r\n8   libtensorflow_cc.so           \t0x000000013e400f83 tensorflow::grappler::ConstantFolding::RunOptimizationPass(tensorflow::grappler::Cluster*, tensorflow::grappler::GrapplerItem const&, tensorflow::GraphDef*) + 1523\r\n9   libtensorflow_cc.so           \t0x000000013e401925 tensorflow::grappler::ConstantFolding::Optimize(tensorflow::grappler::Cluster*, tensorflow::grappler::GrapplerItem const&, tensorflow::GraphDef*) + 1829\r\n10  libtensorflow_cc.so           \t0x000000013e3db066 tensorflow::grappler::MetaOptimizer::Optimize(tensorflow::grappler::Cluster*, tensorflow::grappler::GrapplerItem const&, tensorflow::GraphDef*) + 2822\r\n11  libtensorflow_cc.so           \t0x000000013e3dc2dd tensorflow::grappler::RunMetaOptimizer(tensorflow::grappler::GrapplerItem const&, tensorflow::RewriterConfig const&, tensorflow::DeviceBase*, tensorflow::grappler::Cluster*, tensorflow::GraphDef*) + 109\r\n12  libtensorflow_cc.so           \t0x000000013e3d6dac tensorflow::GraphExecutionState::OptimizeGraph(tensorflow::BuildGraphOptions const&, std::__1::unique_ptr<tensorflow::Graph, std::__1::default_delete<tensorflow::Graph> >*) + 3564\r\n13  libtensorflow_cc.so           \t0x000000013e3d4686 tensorflow::GraphExecutionState::BuildGraph(tensorflow::BuildGraphOptions const&, std::__1::unique_ptr<tensorflow::ClientGraph, std::__1::default_delete<tensorflow::ClientGraph> >*) + 166\r\n14  libtensorflow_cc.so           \t0x000000013e3c0d37 tensorflow::DirectSession::CreateGraphs(tensorflow::BuildGraphOptions const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::unique_ptr<tensorflow::Graph, std::__1::default_delete<tensorflow::Graph> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::unique_ptr<tensorflow::Graph, std::__1::default_delete<tensorflow::Graph> > > > >*, std::__1::unique_ptr<tensorflow::FunctionLibraryDefinition, std::__1::default_delete<tensorflow::FunctionLibraryDefinition> >*, tensorflow::DirectSession::RunStateArgs*, tensorflow::gtl::InlinedVector<tensorflow::DataType, 4>*, tensorflow::gtl::InlinedVector<tensorflow::DataType, 4>*) + 375\r\n15  libtensorflow_cc.so           \t0x000000013e3bb469 tensorflow::DirectSession::GetOrCreateExecutors(tensorflow::gtl::ArraySlice<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, tensorflow::gtl::ArraySlice<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, tensorflow::gtl::ArraySlice<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, tensorflow::DirectSession::ExecutorsAndKeys**, tensorflow::DirectSession::RunStateArgs*) + 4585\r\n16  libtensorflow_cc.so           \t0x000000013e3b893c tensorflow::DirectSession::Run(tensorflow::RunOptions const&, std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor> > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<tensorflow::Tensor, std::__1::allocator<tensorflow::Tensor> >*, tensorflow::RunMetadata*) + 908\r\n17  libtensorflow_cc.so           \t0x000000013e3b8437 tensorflow::DirectSession::Run(std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor> > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<tensorflow::Tensor, std::__1::allocator<tensorflow::Tensor> >*) + 103\r\n18  rotobotmaskrcnn.ofx           \t0x000000013b805f21 drawMasks(OpenImageIO::v1_6::ImageBuf&, std::__1::unique_ptr<tensorflow::Session, std::__1::default_delete<tensorflow::Session> >&, OpenImageIO::v1_6::ImageBuf&, bool) + 6737\r\n19  rotobotmaskrcnn.ofx           \t0x000000013b8038af RotobotMaskRCNNPlugin::computeMask(OFX::Image*) + 3823\r\n20  rotobotmaskrcnn.ofx           \t0x000000013b80234c RotobotMaskRCNNPlugin::setupAndProcess(ImageScalerBase&, OFX::RenderArguments const&) + 1628\r\n21  rotobotmaskrcnn.ofx           \t0x000000013b808df9 RotobotMaskRCNNPlugin::render(OFX::RenderArguments const&) + 409\r\n22  rotobotmaskrcnn.ofx           \t0x000000013b84b2a6 OFX::Private::renderAction(OfxImageEffectStruct*, OFX::PropertySet) + 86\r\n23  rotobotmaskrcnn.ofx           \t0x000000013b84750b OFX::Private::mainEntryStr(char const*, void const*, OfxPropertySetStruct*, OfxPropertySetStruct*, char const*) + 9115\r\n24  rotobotmaskrcnn.ofx           \t0x000000013b81b970 OFX::FactoryMainEntryHelper<RotobotMaskRCNNPluginFactory>::mainEntry(char const*, void const*, OfxPropertySetStruct*, OfxPropertySetStruct*) + 320\r\n25  libnuke-10.5.7.dylib          \t0x000000010702e9ac OFX::Host::ImageEffect::Instance::mainEntry(char const*, void const*, OFX::Host::Property::Set*, OFX::Host::Property::Set*) + 284\r\n26  libnuke-10.5.7.dylib          \t0x000000010703072d OFX::Host::ImageEffect::Instance::renderAction(double, std::string const&, OfxRectI const&, OfxPointD) + 973\r\n27  libnuke-10.5.7.dylib          \t0x0000000106b25e21 Nofx::NofxIop::renderBlock(unsigned long, DD::Image::ChannelSet const&) + 1393\r\n28  libnuke-10.5.7.dylib          \t0x0000000106b21df1 Nofx::NofxIop::engine(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 657\r\n29  libDDImage.dylib              \t0x000000010850873c DD::Image::Cache::fill_line(int, DD::Image::Row&, DD::Image::ChannelSet const&, DD::Image::ChannelSet&, DD::Image::ChannelSet&) + 556\r\n30  libDDImage.dylib              \t0x0000000108508d78 DD::Image::Cache::load_line_incr(int, DD::Image::Row&, DD::Image::ChannelSet const&, DD::Image::ChannelSet&, DD::Image::ChannelSet&) + 488\r\n31  libDDImage.dylib              \t0x00000001085a5fef DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 1519\r\n32  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 183\r\n33  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 137\r\n34  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 2085\r\n35  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 183\r\n36  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 137\r\n37  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 2085\r\n38  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 183\r\n39  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 137\r\n40  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 2085\r\n41  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 183\r\n42  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 137\r\n43  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 2085\r\n44  libDDImage.dylib              \t0x0000000108631757 DD::Image::PixelIop::engine(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 183\r\n45  libDDImage.dylib              \t0x000000010850b079 DD::Image::Cache::run_engine(DD::Image::Iop*, int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 137\r\n46  libDDImage.dylib              \t0x00000001085a6225 DD::Image::Iop::get(int, int, int, DD::Image::ChannelSet const&, DD::Image::Row&) + 2085\r\n47  libnuke-10.5.7.dylib          \t0x0000000106f954bd Viewer_Image::thread_proc() + 813\r\n48  libnuke-10.5.7.dylib          \t0x0000000106f95186 Viewer_Image::_thread_proc(void*) + 6\r\n49  libnuke-10.5.7.dylib          \t0x000000010668cc0e thread_func(unsigned int, unsigned int, void*) + 14\r\n50  libDDImage.dylib              \t0x0000000108690ad8 DD::Image::thread_proc(void*) + 120\r\n51  libsystem_pthread.dylib       \t0x00007fffc282093b _pthread_body + 180\r\n52  libsystem_pthread.dylib       \t0x00007fffc2820887 _pthread_start + 286\r\n53  libsystem_pthread.dylib       \t0x00007fffc282008d thread_start + 13\r\n```\r\n\r\nTo see the expected result please visit:\r\n\r\nhttps://www.linkedin.com/feed/update/urn:li:activity:6403107128722190336"}