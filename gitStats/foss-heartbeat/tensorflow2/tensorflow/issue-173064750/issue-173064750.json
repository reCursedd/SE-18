{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4025", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4025/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4025/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4025/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4025", "id": 173064750, "node_id": "MDU6SXNzdWUxNzMwNjQ3NTA=", "number": 4025, "title": "TensorForest Fails in Modified wide_n_deep SKFlow Tutorial", "user": {"login": "craymichael", "id": 20629897, "node_id": "MDQ6VXNlcjIwNjI5ODk3", "avatar_url": "https://avatars2.githubusercontent.com/u/20629897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/craymichael", "html_url": "https://github.com/craymichael", "followers_url": "https://api.github.com/users/craymichael/followers", "following_url": "https://api.github.com/users/craymichael/following{/other_user}", "gists_url": "https://api.github.com/users/craymichael/gists{/gist_id}", "starred_url": "https://api.github.com/users/craymichael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/craymichael/subscriptions", "organizations_url": "https://api.github.com/users/craymichael/orgs", "repos_url": "https://api.github.com/users/craymichael/repos", "events_url": "https://api.github.com/users/craymichael/events{/privacy}", "received_events_url": "https://api.github.com/users/craymichael/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2016-08-24T21:40:27Z", "updated_at": "2017-01-24T22:29:44Z", "closed_at": "2017-01-24T22:29:44Z", "author_association": "NONE", "body_html": "<h3>Environment info</h3>\n<p>Operating System: Ubuntu</p>\n<p>Package: <a href=\"https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.10.0rc0-cp27-none-linux_x86_64.whl\" rel=\"nofollow\">https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.10.0rc0-cp27-none-linux_x86_64.whl</a><br>\nVersion: 0.10.0rc0</p>\n<p>Edit: See update at bottom for stuff I found wrong</p>\n<p>I cannot get TensorForest to work using the input_fn parameter as input. It failed in my code, so I tried using it in the wide_n_deep tutorial which failed for the same reasons. Categorical inputs using Sparse tensors are rejected saying the wrong dtype is being used (they're all String). Without using categorical inputs, it gets further but fails saying that it cannot concat Tensors. I was able to run the tests for the TensorForest successfully with the Iris dataset (<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/learn/python/learn/estimators/random_forest_test.py\">link here</a>), but I would like to use the input_fn ability with a similar style to the tutorial if possible. I can provide the source but the only thing changed was using the <code>tf.contrib.learn.TensorForestEstimator</code> with the number of classes and features specified in <code>tf.contrib.tensor_forest.tensor_forest.ForestHParams</code> as the params input. Can someone look into this?</p>\n<h3>Steps to reproduce</h3>\n<ol>\n<li>Modify wide_n_deep tutorial to use a <code>TensorForestEstimator</code></li>\n</ol>\n<h3>What I've tried</h3>\n<ol>\n<li>Running using input_fn as parameter to fit</li>\n<li>Running using input_fn without categorical inputs to fit</li>\n</ol>\n<h3>Output that would be helpful</h3>\n<h4>Output including categorical sparse tensors</h4>\n<pre><code>Traceback (most recent call last):\n  File \"wide_n_deep_tutorial.py\", line 224, in &lt;module&gt;\n    tf.app.run()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"wide_n_deep_tutorial.py\", line 220, in main\n    train_and_eval()\n  File \"wide_n_deep_tutorial.py\", line 213, in train_and_eval\n    m.fit(input_fn=lambda: input_fn(df_train), steps=FLAGS.train_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 240, in fit\n    max_steps=max_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 550, in _train_model\n    train_op, loss_op = self._get_train_ops(features, targets)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/random_forest.py\", line 149, in _get_train_ops\n    features, spec = data_ops.ParseDataTensorOrDict(features)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/data/data_ops.py\", line 169, in ParseDataTensorOrDict\n    return _ParseSparse(data)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/data/data_ops.py\", line 101, in _ParseSparse\n    raise ValueError('Only sparse tensors of type string are supported.')\nValueError: Only sparse tensors of type string are supported.\n</code></pre>\n<h4>Output without categorical sparse tensors</h4>\n<pre><code>Traceback (most recent call last):\n  File \"wide_n_deep_tutorial.py\", line 224, in &lt;module&gt;\n    tf.app.run()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"wide_n_deep_tutorial.py\", line 220, in main\n    train_and_eval()\n  File \"wide_n_deep_tutorial.py\", line 213, in train_and_eval\n    m.fit(input_fn=lambda: input_fn(df_train), steps=FLAGS.train_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 240, in fit\n    max_steps=max_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 550, in _train_model\n    train_op, loss_op = self._get_train_ops(features, targets)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/random_forest.py\", line 149, in _get_train_ops\n    features, spec = data_ops.ParseDataTensorOrDict(features)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/data/data_ops.py\", line 171, in ParseDataTensorOrDict\n    return _ParseDense(data)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/data/data_ops.py\", line 144, in _ParseDense\n    else data[k] for k in sorted(data.keys())\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/array_ops.py\", line 759, in concat\n    name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_array_ops.py\", line 414, in _concat\n    values=values, name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.py\", line 703, in apply_op\n    op_def=op_def)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2312, in create_op\n    set_shapes_for_outputs(ret)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1704, in set_shapes_for_outputs\n    shapes = shape_func(op)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/array_ops.py\", line 815, in _ConcatShape\n    (value_shape.ndims, concat_dim))\nValueError: Expected concat_dim in range [0, 1), but got 1\n</code></pre>\n<h3>UPDATE</h3>\n<p>I've fooled around with more stuff and been sifting through the source and have found the following.</p>\n<ol>\n<li>Tensor Forest doesn't support both categorical and continuous inputs (only Sparse OR Dense)? Why is that, and can we expect that being implemented soon?</li>\n<li>If solely sparse tensors are inputted, <code>_ParseSparse</code> fails because <code>constants.DATA_ALL_CATEGORICAL</code> is not defined (I believe it should be <code>constants.DATA_CATEGORICAL</code>)</li>\n<li>Upon changing that variable to <code>constants.DATA_CATEGORICAL</code>, everything seems ok until my terminal gets flooded with these warnings:</li>\n</ol>\n<pre><code>W tensorflow/contrib/tensor_forest/core/ops/sample_inputs_op.cc:164] Could not find any values for input 1 inside sparse_input_indices\nW tensorflow/contrib/tensor_forest/core/ops/sample_inputs_op.cc:164] Could not find any values for input 2 inside sparse_input_indices\nW tensorflow/contrib/tensor_forest/core/ops/sample_inputs_op.cc:164] Could not find any values for input 1 inside sparse_input_indices\nW tensorflow/contrib/tensor_forest/core/ops/sample_inputs_op.cc:164] Could not find any values for input 2 inside sparse_input_indices\n</code></pre>\n<p>Those warnings repeat over and over and eventually the model runs successfully.<br>\n4. I tried messing with <code>_Parse_Dense</code> and changed the <code>array_ops.concat</code> to <code>array_ops.pack</code> with <code>axis=1</code>, which returns the expected 2-D tensor. <code>concat</code> doesn't work as it is unable to create the dimension, whereas <code>pack</code> can. This resolved the continuous input issue, but I received a negligible error</p>\n<pre><code>Traceback (most recent call last):\n  File \"wide_n_deep_tutorial.py\", line 224, in &lt;module&gt;\n    tf.app.run()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"wide_n_deep_tutorial.py\", line 220, in main\n    train_and_eval()\n  File \"wide_n_deep_tutorial.py\", line 213, in train_and_eval\n    m.fit(input_fn=lambda: input_fn(df_train), steps=FLAGS.train_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 240, in fit\n    max_steps=max_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 550, in _train_model\n    train_op, loss_op = self._get_train_ops(features, targets)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/random_forest.py\", line 163, in _get_train_ops\n    **self.training_args),\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py\", line 378, in training_graph\n    **tree_kwargs))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py\", line 570, in training_graph\n    regression=self.params.regression))\n  File \"&lt;string&gt;\", line 219, in count_extremely_random_stats\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.py\", line 463, in apply_op\n    (prefix, dtypes.as_dtype(input_arg.type).name))\nTypeError: Input 'input_data' of 'CountExtremelyRandomStats' Op has type int64 that does not match expected type of float32.\n</code></pre>\n<p>I easily fixed above error by changing all continuous inputs to tf.float32 from tf.int64, so that might be a feature request of interest.<br>\n5. After these modifications to source, I was able to use <code>input_fn</code> successfully with solely the continuous features of the census data set of the wide_n_deep tutorial (obtained ~82% on the testing set with 10 training steps). Not sure why but it took a while for that to run, didn't really look into it though.<br>\n6. I tried including the categorical inputs via tf.string dtype constant tensors, but received another error saying input to StringToFloat was not 2-D.</p>\n<pre><code>     tensorflow.python.framework.errors.InvalidArgumentError: input_data should be two-dimensional\n</code></pre>\n<p>I was able to resolve it by changing <code>convert_ops.string_to_float</code> to <code>tf.string_to_number</code>, but I am still unable to input via Sparse Tensors.<br>\n7. Another issue I found: not all metrics seem to work when passed in (I passed in <code>streaming_precision</code>, <code>streaming_recall</code>, <code>streaming_accuracy</code>, and <code>confusion_matrix</code>)</p>\n<pre><code>    Traceback (most recent call last):  \n      File \"read.py\", line 336, in &lt;module&gt;\n        tf.app.run()\n      File \"/usr/local/python2.7/dist-packages/tensorflow/python/platform/app.py\", line 30, in run\n        sys.exit(main(sys.argv))\n      File \"read.py\", line 315, in main\n        eval_steps=1\n      File \"/usr/local/tensorflow/heartwood/cross_validation/evaluate.py\", line 37, in evaluate\n        'cm': tf.contrib.metrics.confusion_matrix\n      File \"/usr/local/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 356, in evaluate\n        name=name)\n      File \"/usr/local/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 630, in _evaluate_model\n        eval_dict = self._get_eval_ops(features, targets, metrics)\n      File \"/usr/local/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/random_forest.py\", line 198, in _get_eval_ops\n        result[name] = metric(probabilities, labels)\n      File \"/usr/local/python2.7/dist-packages/tensorflow/contrib/metrics/python/ops/confusion_matrix_ops.py\", line 73, in confusion_matrix\n        predictions, name='predictions', dtype=dtypes.int64),\n      File \"/usr/local/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 621, in convert_to_tensor\n        ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n      File \"/usr/local/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 564, in _TensorTensorConversionFunction\n        % (dtype.name, t.dtype.name, str(t)))\n    ValueError: Tensor conversion requested dtype int64 for Tensor with dtype float32: 'Tensor(\"probabilities:0\", shape=(?, 2), dtype=float32)'\n</code></pre>", "body_text": "Environment info\nOperating System: Ubuntu\nPackage: https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.10.0rc0-cp27-none-linux_x86_64.whl\nVersion: 0.10.0rc0\nEdit: See update at bottom for stuff I found wrong\nI cannot get TensorForest to work using the input_fn parameter as input. It failed in my code, so I tried using it in the wide_n_deep tutorial which failed for the same reasons. Categorical inputs using Sparse tensors are rejected saying the wrong dtype is being used (they're all String). Without using categorical inputs, it gets further but fails saying that it cannot concat Tensors. I was able to run the tests for the TensorForest successfully with the Iris dataset (link here), but I would like to use the input_fn ability with a similar style to the tutorial if possible. I can provide the source but the only thing changed was using the tf.contrib.learn.TensorForestEstimator with the number of classes and features specified in tf.contrib.tensor_forest.tensor_forest.ForestHParams as the params input. Can someone look into this?\nSteps to reproduce\n\nModify wide_n_deep tutorial to use a TensorForestEstimator\n\nWhat I've tried\n\nRunning using input_fn as parameter to fit\nRunning using input_fn without categorical inputs to fit\n\nOutput that would be helpful\nOutput including categorical sparse tensors\nTraceback (most recent call last):\n  File \"wide_n_deep_tutorial.py\", line 224, in <module>\n    tf.app.run()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"wide_n_deep_tutorial.py\", line 220, in main\n    train_and_eval()\n  File \"wide_n_deep_tutorial.py\", line 213, in train_and_eval\n    m.fit(input_fn=lambda: input_fn(df_train), steps=FLAGS.train_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 240, in fit\n    max_steps=max_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 550, in _train_model\n    train_op, loss_op = self._get_train_ops(features, targets)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/random_forest.py\", line 149, in _get_train_ops\n    features, spec = data_ops.ParseDataTensorOrDict(features)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/data/data_ops.py\", line 169, in ParseDataTensorOrDict\n    return _ParseSparse(data)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/data/data_ops.py\", line 101, in _ParseSparse\n    raise ValueError('Only sparse tensors of type string are supported.')\nValueError: Only sparse tensors of type string are supported.\n\nOutput without categorical sparse tensors\nTraceback (most recent call last):\n  File \"wide_n_deep_tutorial.py\", line 224, in <module>\n    tf.app.run()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"wide_n_deep_tutorial.py\", line 220, in main\n    train_and_eval()\n  File \"wide_n_deep_tutorial.py\", line 213, in train_and_eval\n    m.fit(input_fn=lambda: input_fn(df_train), steps=FLAGS.train_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 240, in fit\n    max_steps=max_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 550, in _train_model\n    train_op, loss_op = self._get_train_ops(features, targets)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/random_forest.py\", line 149, in _get_train_ops\n    features, spec = data_ops.ParseDataTensorOrDict(features)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/data/data_ops.py\", line 171, in ParseDataTensorOrDict\n    return _ParseDense(data)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/data/data_ops.py\", line 144, in _ParseDense\n    else data[k] for k in sorted(data.keys())\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/array_ops.py\", line 759, in concat\n    name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_array_ops.py\", line 414, in _concat\n    values=values, name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.py\", line 703, in apply_op\n    op_def=op_def)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2312, in create_op\n    set_shapes_for_outputs(ret)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1704, in set_shapes_for_outputs\n    shapes = shape_func(op)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/array_ops.py\", line 815, in _ConcatShape\n    (value_shape.ndims, concat_dim))\nValueError: Expected concat_dim in range [0, 1), but got 1\n\nUPDATE\nI've fooled around with more stuff and been sifting through the source and have found the following.\n\nTensor Forest doesn't support both categorical and continuous inputs (only Sparse OR Dense)? Why is that, and can we expect that being implemented soon?\nIf solely sparse tensors are inputted, _ParseSparse fails because constants.DATA_ALL_CATEGORICAL is not defined (I believe it should be constants.DATA_CATEGORICAL)\nUpon changing that variable to constants.DATA_CATEGORICAL, everything seems ok until my terminal gets flooded with these warnings:\n\nW tensorflow/contrib/tensor_forest/core/ops/sample_inputs_op.cc:164] Could not find any values for input 1 inside sparse_input_indices\nW tensorflow/contrib/tensor_forest/core/ops/sample_inputs_op.cc:164] Could not find any values for input 2 inside sparse_input_indices\nW tensorflow/contrib/tensor_forest/core/ops/sample_inputs_op.cc:164] Could not find any values for input 1 inside sparse_input_indices\nW tensorflow/contrib/tensor_forest/core/ops/sample_inputs_op.cc:164] Could not find any values for input 2 inside sparse_input_indices\n\nThose warnings repeat over and over and eventually the model runs successfully.\n4. I tried messing with _Parse_Dense and changed the array_ops.concat to array_ops.pack with axis=1, which returns the expected 2-D tensor. concat doesn't work as it is unable to create the dimension, whereas pack can. This resolved the continuous input issue, but I received a negligible error\nTraceback (most recent call last):\n  File \"wide_n_deep_tutorial.py\", line 224, in <module>\n    tf.app.run()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"wide_n_deep_tutorial.py\", line 220, in main\n    train_and_eval()\n  File \"wide_n_deep_tutorial.py\", line 213, in train_and_eval\n    m.fit(input_fn=lambda: input_fn(df_train), steps=FLAGS.train_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 240, in fit\n    max_steps=max_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 550, in _train_model\n    train_op, loss_op = self._get_train_ops(features, targets)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/random_forest.py\", line 163, in _get_train_ops\n    **self.training_args),\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py\", line 378, in training_graph\n    **tree_kwargs))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py\", line 570, in training_graph\n    regression=self.params.regression))\n  File \"<string>\", line 219, in count_extremely_random_stats\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.py\", line 463, in apply_op\n    (prefix, dtypes.as_dtype(input_arg.type).name))\nTypeError: Input 'input_data' of 'CountExtremelyRandomStats' Op has type int64 that does not match expected type of float32.\n\nI easily fixed above error by changing all continuous inputs to tf.float32 from tf.int64, so that might be a feature request of interest.\n5. After these modifications to source, I was able to use input_fn successfully with solely the continuous features of the census data set of the wide_n_deep tutorial (obtained ~82% on the testing set with 10 training steps). Not sure why but it took a while for that to run, didn't really look into it though.\n6. I tried including the categorical inputs via tf.string dtype constant tensors, but received another error saying input to StringToFloat was not 2-D.\n     tensorflow.python.framework.errors.InvalidArgumentError: input_data should be two-dimensional\n\nI was able to resolve it by changing convert_ops.string_to_float to tf.string_to_number, but I am still unable to input via Sparse Tensors.\n7. Another issue I found: not all metrics seem to work when passed in (I passed in streaming_precision, streaming_recall, streaming_accuracy, and confusion_matrix)\n    Traceback (most recent call last):  \n      File \"read.py\", line 336, in <module>\n        tf.app.run()\n      File \"/usr/local/python2.7/dist-packages/tensorflow/python/platform/app.py\", line 30, in run\n        sys.exit(main(sys.argv))\n      File \"read.py\", line 315, in main\n        eval_steps=1\n      File \"/usr/local/tensorflow/heartwood/cross_validation/evaluate.py\", line 37, in evaluate\n        'cm': tf.contrib.metrics.confusion_matrix\n      File \"/usr/local/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 356, in evaluate\n        name=name)\n      File \"/usr/local/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 630, in _evaluate_model\n        eval_dict = self._get_eval_ops(features, targets, metrics)\n      File \"/usr/local/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/random_forest.py\", line 198, in _get_eval_ops\n        result[name] = metric(probabilities, labels)\n      File \"/usr/local/python2.7/dist-packages/tensorflow/contrib/metrics/python/ops/confusion_matrix_ops.py\", line 73, in confusion_matrix\n        predictions, name='predictions', dtype=dtypes.int64),\n      File \"/usr/local/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 621, in convert_to_tensor\n        ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n      File \"/usr/local/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 564, in _TensorTensorConversionFunction\n        % (dtype.name, t.dtype.name, str(t)))\n    ValueError: Tensor conversion requested dtype int64 for Tensor with dtype float32: 'Tensor(\"probabilities:0\", shape=(?, 2), dtype=float32)'", "body": "### Environment info\n\nOperating System: Ubuntu\n\nPackage: https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.10.0rc0-cp27-none-linux_x86_64.whl\nVersion: 0.10.0rc0\n\nEdit: See update at bottom for stuff I found wrong\n\nI cannot get TensorForest to work using the input_fn parameter as input. It failed in my code, so I tried using it in the wide_n_deep tutorial which failed for the same reasons. Categorical inputs using Sparse tensors are rejected saying the wrong dtype is being used (they're all String). Without using categorical inputs, it gets further but fails saying that it cannot concat Tensors. I was able to run the tests for the TensorForest successfully with the Iris dataset ([link here](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/learn/python/learn/estimators/random_forest_test.py)), but I would like to use the input_fn ability with a similar style to the tutorial if possible. I can provide the source but the only thing changed was using the `tf.contrib.learn.TensorForestEstimator` with the number of classes and features specified in `tf.contrib.tensor_forest.tensor_forest.ForestHParams` as the params input. Can someone look into this?\n### Steps to reproduce\n1. Modify wide_n_deep tutorial to use a `TensorForestEstimator`\n### What I've tried\n1. Running using input_fn as parameter to fit\n2. Running using input_fn without categorical inputs to fit\n### Output that would be helpful\n#### Output including categorical sparse tensors\n\n```\nTraceback (most recent call last):\n  File \"wide_n_deep_tutorial.py\", line 224, in <module>\n    tf.app.run()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"wide_n_deep_tutorial.py\", line 220, in main\n    train_and_eval()\n  File \"wide_n_deep_tutorial.py\", line 213, in train_and_eval\n    m.fit(input_fn=lambda: input_fn(df_train), steps=FLAGS.train_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 240, in fit\n    max_steps=max_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 550, in _train_model\n    train_op, loss_op = self._get_train_ops(features, targets)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/random_forest.py\", line 149, in _get_train_ops\n    features, spec = data_ops.ParseDataTensorOrDict(features)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/data/data_ops.py\", line 169, in ParseDataTensorOrDict\n    return _ParseSparse(data)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/data/data_ops.py\", line 101, in _ParseSparse\n    raise ValueError('Only sparse tensors of type string are supported.')\nValueError: Only sparse tensors of type string are supported.\n```\n#### Output without categorical sparse tensors\n\n```\nTraceback (most recent call last):\n  File \"wide_n_deep_tutorial.py\", line 224, in <module>\n    tf.app.run()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"wide_n_deep_tutorial.py\", line 220, in main\n    train_and_eval()\n  File \"wide_n_deep_tutorial.py\", line 213, in train_and_eval\n    m.fit(input_fn=lambda: input_fn(df_train), steps=FLAGS.train_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 240, in fit\n    max_steps=max_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 550, in _train_model\n    train_op, loss_op = self._get_train_ops(features, targets)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/random_forest.py\", line 149, in _get_train_ops\n    features, spec = data_ops.ParseDataTensorOrDict(features)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/data/data_ops.py\", line 171, in ParseDataTensorOrDict\n    return _ParseDense(data)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/data/data_ops.py\", line 144, in _ParseDense\n    else data[k] for k in sorted(data.keys())\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/array_ops.py\", line 759, in concat\n    name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_array_ops.py\", line 414, in _concat\n    values=values, name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.py\", line 703, in apply_op\n    op_def=op_def)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2312, in create_op\n    set_shapes_for_outputs(ret)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1704, in set_shapes_for_outputs\n    shapes = shape_func(op)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/array_ops.py\", line 815, in _ConcatShape\n    (value_shape.ndims, concat_dim))\nValueError: Expected concat_dim in range [0, 1), but got 1\n```\n### UPDATE\n\nI've fooled around with more stuff and been sifting through the source and have found the following.\n1. Tensor Forest doesn't support both categorical and continuous inputs (only Sparse OR Dense)? Why is that, and can we expect that being implemented soon?\n2. If solely sparse tensors are inputted, `_ParseSparse` fails because `constants.DATA_ALL_CATEGORICAL` is not defined (I believe it should be `constants.DATA_CATEGORICAL`)\n3. Upon changing that variable to `constants.DATA_CATEGORICAL`, everything seems ok until my terminal gets flooded with these warnings:\n\n```\nW tensorflow/contrib/tensor_forest/core/ops/sample_inputs_op.cc:164] Could not find any values for input 1 inside sparse_input_indices\nW tensorflow/contrib/tensor_forest/core/ops/sample_inputs_op.cc:164] Could not find any values for input 2 inside sparse_input_indices\nW tensorflow/contrib/tensor_forest/core/ops/sample_inputs_op.cc:164] Could not find any values for input 1 inside sparse_input_indices\nW tensorflow/contrib/tensor_forest/core/ops/sample_inputs_op.cc:164] Could not find any values for input 2 inside sparse_input_indices\n```\n\nThose warnings repeat over and over and eventually the model runs successfully.\n4. I tried messing with `_Parse_Dense` and changed the `array_ops.concat` to `array_ops.pack` with `axis=1`, which returns the expected 2-D tensor. `concat` doesn't work as it is unable to create the dimension, whereas `pack` can. This resolved the continuous input issue, but I received a negligible error\n\n```\nTraceback (most recent call last):\n  File \"wide_n_deep_tutorial.py\", line 224, in <module>\n    tf.app.run()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/platform/app.py\", line 30, in run\n    sys.exit(main(sys.argv))\n  File \"wide_n_deep_tutorial.py\", line 220, in main\n    train_and_eval()\n  File \"wide_n_deep_tutorial.py\", line 213, in train_and_eval\n    m.fit(input_fn=lambda: input_fn(df_train), steps=FLAGS.train_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 240, in fit\n    max_steps=max_steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 550, in _train_model\n    train_op, loss_op = self._get_train_ops(features, targets)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/random_forest.py\", line 163, in _get_train_ops\n    **self.training_args),\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py\", line 378, in training_graph\n    **tree_kwargs))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py\", line 570, in training_graph\n    regression=self.params.regression))\n  File \"<string>\", line 219, in count_extremely_random_stats\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.py\", line 463, in apply_op\n    (prefix, dtypes.as_dtype(input_arg.type).name))\nTypeError: Input 'input_data' of 'CountExtremelyRandomStats' Op has type int64 that does not match expected type of float32.\n```\n\nI easily fixed above error by changing all continuous inputs to tf.float32 from tf.int64, so that might be a feature request of interest.\n5. After these modifications to source, I was able to use `input_fn` successfully with solely the continuous features of the census data set of the wide_n_deep tutorial (obtained ~82% on the testing set with 10 training steps). Not sure why but it took a while for that to run, didn't really look into it though.\n6. I tried including the categorical inputs via tf.string dtype constant tensors, but received another error saying input to StringToFloat was not 2-D.\n\n```\n     tensorflow.python.framework.errors.InvalidArgumentError: input_data should be two-dimensional\n```\n\nI was able to resolve it by changing `convert_ops.string_to_float` to `tf.string_to_number`, but I am still unable to input via Sparse Tensors.\n7. Another issue I found: not all metrics seem to work when passed in (I passed in `streaming_precision`, `streaming_recall`, `streaming_accuracy`, and `confusion_matrix`)\n\n```\n    Traceback (most recent call last):  \n      File \"read.py\", line 336, in <module>\n        tf.app.run()\n      File \"/usr/local/python2.7/dist-packages/tensorflow/python/platform/app.py\", line 30, in run\n        sys.exit(main(sys.argv))\n      File \"read.py\", line 315, in main\n        eval_steps=1\n      File \"/usr/local/tensorflow/heartwood/cross_validation/evaluate.py\", line 37, in evaluate\n        'cm': tf.contrib.metrics.confusion_matrix\n      File \"/usr/local/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 356, in evaluate\n        name=name)\n      File \"/usr/local/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 630, in _evaluate_model\n        eval_dict = self._get_eval_ops(features, targets, metrics)\n      File \"/usr/local/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/random_forest.py\", line 198, in _get_eval_ops\n        result[name] = metric(probabilities, labels)\n      File \"/usr/local/python2.7/dist-packages/tensorflow/contrib/metrics/python/ops/confusion_matrix_ops.py\", line 73, in confusion_matrix\n        predictions, name='predictions', dtype=dtypes.int64),\n      File \"/usr/local/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 621, in convert_to_tensor\n        ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n      File \"/usr/local/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 564, in _TensorTensorConversionFunction\n        % (dtype.name, t.dtype.name, str(t)))\n    ValueError: Tensor conversion requested dtype int64 for Tensor with dtype float32: 'Tensor(\"probabilities:0\", shape=(?, 2), dtype=float32)'\n```\n"}