{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/242819510", "html_url": "https://github.com/tensorflow/tensorflow/issues/4025#issuecomment-242819510", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4025", "id": 242819510, "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjgxOTUxMA==", "user": {"login": "craymichael", "id": 20629897, "node_id": "MDQ6VXNlcjIwNjI5ODk3", "avatar_url": "https://avatars2.githubusercontent.com/u/20629897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/craymichael", "html_url": "https://github.com/craymichael", "followers_url": "https://api.github.com/users/craymichael/followers", "following_url": "https://api.github.com/users/craymichael/following{/other_user}", "gists_url": "https://api.github.com/users/craymichael/gists{/gist_id}", "starred_url": "https://api.github.com/users/craymichael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/craymichael/subscriptions", "organizations_url": "https://api.github.com/users/craymichael/orgs", "repos_url": "https://api.github.com/users/craymichael/repos", "events_url": "https://api.github.com/users/craymichael/events{/privacy}", "received_events_url": "https://api.github.com/users/craymichael/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-26T18:48:11Z", "updated_at": "2016-08-26T18:48:11Z", "author_association": "NONE", "body_html": "<p>Thanks for the response! Please see my last comment with regards to 7. Would it be reasonable to expect the TensorForest to be implemented in such a way as the other Estimators are? The way I'm working  handles things generically for different model types, so it would be nice if the expected input for all Estimators was the same. Possibly even with features columns?<br>\nWith regards to 3, none of the tensors I was using were empty to I'm assuming there is a discrepancy between the shapes of the inputs used for the non-tensorforest Estimators. Although those warnings flew by, it eventually fit using only the categorical sparse tensors and got reasonable accuracy for not having all features as input.<br>\nI don't think that's a good assumption for <code>input_fn</code>, although that's what I would like to use it for but having issues (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"173066960\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/4026\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/4026/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/4026\">#4026</a>), because it's currently the only method of being able to input tensors to the model.<br>\nI apologize for 1, I meant continuous and categorical data not sparse vs dense. A lot of data I work with contains continuous numerical data alongside String categorical data. I've found in my research that the RandomForest models work the best with my specific data over other types of models. I guess in the meantime while it's not possible I can implement the model for a sparse representation of my categorical data and another model for the continuous part of my data and look into methods of combining predictions?</p>", "body_text": "Thanks for the response! Please see my last comment with regards to 7. Would it be reasonable to expect the TensorForest to be implemented in such a way as the other Estimators are? The way I'm working  handles things generically for different model types, so it would be nice if the expected input for all Estimators was the same. Possibly even with features columns?\nWith regards to 3, none of the tensors I was using were empty to I'm assuming there is a discrepancy between the shapes of the inputs used for the non-tensorforest Estimators. Although those warnings flew by, it eventually fit using only the categorical sparse tensors and got reasonable accuracy for not having all features as input.\nI don't think that's a good assumption for input_fn, although that's what I would like to use it for but having issues (see #4026), because it's currently the only method of being able to input tensors to the model.\nI apologize for 1, I meant continuous and categorical data not sparse vs dense. A lot of data I work with contains continuous numerical data alongside String categorical data. I've found in my research that the RandomForest models work the best with my specific data over other types of models. I guess in the meantime while it's not possible I can implement the model for a sparse representation of my categorical data and another model for the continuous part of my data and look into methods of combining predictions?", "body": "Thanks for the response! Please see my last comment with regards to 7. Would it be reasonable to expect the TensorForest to be implemented in such a way as the other Estimators are? The way I'm working  handles things generically for different model types, so it would be nice if the expected input for all Estimators was the same. Possibly even with features columns?\nWith regards to 3, none of the tensors I was using were empty to I'm assuming there is a discrepancy between the shapes of the inputs used for the non-tensorforest Estimators. Although those warnings flew by, it eventually fit using only the categorical sparse tensors and got reasonable accuracy for not having all features as input.\nI don't think that's a good assumption for `input_fn`, although that's what I would like to use it for but having issues (see #4026), because it's currently the only method of being able to input tensors to the model. \nI apologize for 1, I meant continuous and categorical data not sparse vs dense. A lot of data I work with contains continuous numerical data alongside String categorical data. I've found in my research that the RandomForest models work the best with my specific data over other types of models. I guess in the meantime while it's not possible I can implement the model for a sparse representation of my categorical data and another model for the continuous part of my data and look into methods of combining predictions?\n"}