{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/179183829", "pull_request_review_id": 109367015, "id": 179183829, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTE4MzgyOQ==", "diff_hunk": "@@ -2454,6 +2455,88 @@ def _all_dimensions(x):\n   return range(0, rank(x))\n \n \n+@tf_export(\"multi_one_hot\")\n+def multi_one_hot(indices, depth_list, on_values_list=None,\n+                  off_values_list=None, name=None):\n+  \"\"\"Creates one-hot-encodings for multiple features (columns in a matrix)\n+  and concatenates the resulting encodings\n+\n+  If `indices` is a matrix (batch) with shape `[batch, features]`, the output\n+  shape will be `[batch, sum(depth_list)]`:\n+\n+  Example\n+  =========\n+\n+  Suppose that\n+\n+  ```python\n+    indices =\n+    [1, 2]\n+    [0, 1]\n+    [1, 0]\n+\n+    depth_list = [2, 3]\n+    on_values_list = [5.0, 10.0]\n+    off_value_list = [0.0, 0.0]\n+  ```\n+\n+  Then output is `[3 x (2+3)]` which is `[3 x 5]`:\n+\n+  ```python\n+    output =\n+    [0.0 5.0]                     [ 0.0  0.0 10.0]\n+    [5.0 0.0]  concatenated with  [ 0.0 10.0  0.0]\n+    [5.0 0.0]                     [10.0  0.0  0.0]\n+  ```\n+\n+  Args:\n+    indices: A `Tensor` with mutiple columns.\n+    depth_list: A list containing the depth for each column.\n+    on_values_list: A list with the on_value for each column.\n+    off_values_list: A list with the off_value for each column.\n+\n+  Returns:\n+    multi_tensor: The mutiple one-hot encoded Tensor.\n+\n+  Raises:\n+    ValueError: If length of `depth_list` does match last dim. of indices\n+  \"\"\"\n+  with ops.name_scope(name, \"multi_one_hot\",\n+                      [indices, depth_list,\n+                       on_values_list, off_values_list]) as name:\n+    n_features = indices.get_shape()[-1]\n+    if len(depth_list) != n_features:\n+      raise ValueError(\"No. of features does not match length of the depth \" \\\n+                       \"list: {} != {}\".format(len(depth_list), n_features))\n+\n+    on_exists = on_values_list is not None\n+    off_exists = off_values_list is not None\n+\n+    # Pad values lists with None if their lengths are smaller than depth_list\n+    if on_exists:\n+      on_values_list += [None] * (n_features - len(on_values_list))\n+    else:\n+      on_values_list = [None] * n_features\n+\n+    if off_exists:\n+      off_values_list += [None] * (n_features - len(off_values_list))\n+    else:\n+      off_values_list = [None] * n_features\n+\n+    multi_tensor = one_hot(indices[:, 0], depth_list[0], on_values_list[0],\n+                           off_values_list[0], dtype=dtypes.float32)\n+    tensor_list = [multi_tensor]\n+\n+    for col in range(1, n_features):\n+      add = one_hot(indices[:, col], depth_list[col], on_values_list[col],\n+                    off_values_list[col], dtype=dtypes.float32)\n+      tensor_list.append(add)", "path": "tensorflow/python/ops/array_ops.py", "position": null, "original_position": 87, "commit_id": "b89fd30636491dab27139e140865bbeee19d8aa2", "original_commit_id": "ebba204b7c5d85acacb4b5b86144f1c9d7dca23b", "user": {"login": "caisq", "id": 16824702, "node_id": "MDQ6VXNlcjE2ODI0NzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/16824702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caisq", "html_url": "https://github.com/caisq", "followers_url": "https://api.github.com/users/caisq/followers", "following_url": "https://api.github.com/users/caisq/following{/other_user}", "gists_url": "https://api.github.com/users/caisq/gists{/gist_id}", "starred_url": "https://api.github.com/users/caisq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caisq/subscriptions", "organizations_url": "https://api.github.com/users/caisq/orgs", "repos_url": "https://api.github.com/users/caisq/repos", "events_url": "https://api.github.com/users/caisq/events{/privacy}", "received_events_url": "https://api.github.com/users/caisq/received_events", "type": "User", "site_admin": false}, "body": "This block of code can be simplified with list comprehension. Something like:\r\n\r\ntensor_list = [one_hot(indices[:, col], depth_list[col], on_value_list[col], off_value_list[col]) for col in range(n_features)]", "created_at": "2018-04-04T15:29:00Z", "updated_at": "2018-04-30T12:27:58Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/16300#discussion_r179183829", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16300", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/179183829"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/16300#discussion_r179183829"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16300"}}, "body_html": "<p>This block of code can be simplified with list comprehension. Something like:</p>\n<p>tensor_list = [one_hot(indices[:, col], depth_list[col], on_value_list[col], off_value_list[col]) for col in range(n_features)]</p>", "body_text": "This block of code can be simplified with list comprehension. Something like:\ntensor_list = [one_hot(indices[:, col], depth_list[col], on_value_list[col], off_value_list[col]) for col in range(n_features)]"}