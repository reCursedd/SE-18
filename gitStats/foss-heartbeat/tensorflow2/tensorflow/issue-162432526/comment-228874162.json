{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/228874162", "html_url": "https://github.com/tensorflow/tensorflow/issues/3057#issuecomment-228874162", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3057", "id": 228874162, "node_id": "MDEyOklzc3VlQ29tbWVudDIyODg3NDE2Mg==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-27T21:01:19Z", "updated_at": "2016-06-27T21:01:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It's possible to do this today, but the interface isn't very intuitive. <strong>TL;DR:</strong> The <code>GPUOptions</code> in the session creation will be ignored, and you have to pass them when you create the <code>tf.train.Server</code> objects to which these settings apply. (The reason for this is that the GPU device is created when you create the server, not when you create the session. When you use <em>non-distributed</em> TensorFlow, the device is created when you create the session.)</p>\n<p>To set this option then, you have to set the <code>tf.ServerDef.default_session_config.gpu_options.per_process_gpu_memory_fraction</code> field when you create the server. Currently you can only do that if you build the <code>tf.train.ServerDef</code> yourself. I'll add a interface to let you override the <code>tf.ConfigProto</code> on its own while still using the Pythonic sugar for defining a cluster, and use that to close this issue.</p>", "body_text": "It's possible to do this today, but the interface isn't very intuitive. TL;DR: The GPUOptions in the session creation will be ignored, and you have to pass them when you create the tf.train.Server objects to which these settings apply. (The reason for this is that the GPU device is created when you create the server, not when you create the session. When you use non-distributed TensorFlow, the device is created when you create the session.)\nTo set this option then, you have to set the tf.ServerDef.default_session_config.gpu_options.per_process_gpu_memory_fraction field when you create the server. Currently you can only do that if you build the tf.train.ServerDef yourself. I'll add a interface to let you override the tf.ConfigProto on its own while still using the Pythonic sugar for defining a cluster, and use that to close this issue.", "body": "It's possible to do this today, but the interface isn't very intuitive. **TL;DR:** The `GPUOptions` in the session creation will be ignored, and you have to pass them when you create the `tf.train.Server` objects to which these settings apply. (The reason for this is that the GPU device is created when you create the server, not when you create the session. When you use _non-distributed_ TensorFlow, the device is created when you create the session.)\n\nTo set this option then, you have to set the `tf.ServerDef.default_session_config.gpu_options.per_process_gpu_memory_fraction` field when you create the server. Currently you can only do that if you build the `tf.train.ServerDef` yourself. I'll add a interface to let you override the `tf.ConfigProto` on its own while still using the Pythonic sugar for defining a cluster, and use that to close this issue.\n"}