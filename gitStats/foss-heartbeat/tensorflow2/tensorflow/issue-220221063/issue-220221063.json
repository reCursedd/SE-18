{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9045", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9045/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9045/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9045/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9045", "id": 220221063, "node_id": "MDU6SXNzdWUyMjAyMjEwNjM=", "number": 9045, "title": "[FeatureRequest ] Add sparse_column_with_cat_prob to tensorflow.contrib.layers.python.layers.feature_column_ops.py", "user": {"login": "squall-1002", "id": 19616286, "node_id": "MDQ6VXNlcjE5NjE2Mjg2", "avatar_url": "https://avatars1.githubusercontent.com/u/19616286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/squall-1002", "html_url": "https://github.com/squall-1002", "followers_url": "https://api.github.com/users/squall-1002/followers", "following_url": "https://api.github.com/users/squall-1002/following{/other_user}", "gists_url": "https://api.github.com/users/squall-1002/gists{/gist_id}", "starred_url": "https://api.github.com/users/squall-1002/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/squall-1002/subscriptions", "organizations_url": "https://api.github.com/users/squall-1002/orgs", "repos_url": "https://api.github.com/users/squall-1002/repos", "events_url": "https://api.github.com/users/squall-1002/events{/privacy}", "received_events_url": "https://api.github.com/users/squall-1002/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-04-07T13:55:07Z", "updated_at": "2017-06-16T19:41:52Z", "closed_at": "2017-06-16T19:41:52Z", "author_association": "NONE", "body_html": "<p>Hi there,</p>\n<p>working on deep learning for recommender systems I came across the Google Wide and Deep model (see [1] and [2]).</p>\n<h2>Problem</h2>\n<p>In my application context there are users and items as well as the interactions between those entities. Furthermore there are item and user features, that are both, continuous and categorical. Here, we have <strong><em>item_features = user_features</em></strong> (user_features derived from user interactions).</p>\n<p>A big problem is the <strong>representation of categorical user features as a result from their interaction with different items with respectively different item features.</strong> (Some intuition to be found below)</p>\n<ul>\n<li>tf.contrib.layers.python.layers.<strong>sparse_column_with_keys</strong></li>\n<li>tf.contrib.layers.python.layers.<strong>sparse_column_with_hash_bucket</strong></li>\n</ul>\n<p>allow to define or induce keys for categorical features that are then one-hot encoded behind the scenes - as far as I understood<br>\nThis works for items that can just have one feature value, but users can have a multivalent preference that should be reflected by a categorcial probability distribution (cpd).</p>\n<p>To capture this result we need TF to capture this cpd and compare it with the one-hot-encoded movie features. The latter is provided internally, but for realizing user profiles I couldn't find proper means meaning that within tensorflow.contrib.layers.python.layers there are no sparse columns providing this possibility which in fact is petty relevant.</p>\n<h2>Proposed Solution</h2>\n<p>Add following method feature column:<br>\nsparse_column_with_cat_prob(column_name, value_prob_dict, counterpart)</p>\n<ul>\n<li><strong>column_name</strong>: see sparse_column_with_keys for example</li>\n<li><strong>value_prob_dict</strong>: dictionary containing feature values (value) and associated probabilities (prob)</li>\n<li><strong>counterpart</strong>:  eventually, name of the one-hot-encoded sparse column this one is refering to</li>\n</ul>\n<p>This would allow for building user features for categorcial user interaction data, especially within recommendation contexts.</p>\n<h2>Intuition</h2>\n<p>To give some intuition see the following example from a movie recommendation context:<br>\nuser 1 interacts with movies A, B, C, D, and E<br>\nmovie_features: genre {Romance, Action},</p>\n<pre><code>   movie_id movie_genre  movie_length\n0         0     Romance           120\n1         1      Action            95\n2         2      Action           130\n3         3     Romance           150\n4         4     Romance           110\n</code></pre>\n<pre><code>   user_id user_genre user_length\n0        0    unknown      unknown\n1        1    unknown      unknown\n</code></pre>\n<p><strong>Observed interactions:</strong></p>\n<pre><code>   user_id  movie_id\n0        0         0\n1        0         1\n2        1         1\n3        1         2\n4        1         3\n5        1         4\n</code></pre>\n<p>Merge, group by size and calculation the shares produces:</p>\n<pre><code>user_id  movie_genre\n0        Action         0.333333\n         Romance        0.666667\n1        Action         0.500000\n         Romance        0.500000\n</code></pre>\n<p>So, as we can observe user 0 rather prefers Romance movies whereas user 1 is indifferent between genres. As a learning outcome user 0 should be recommended more Romance than Action movies, analogously for user 1.</p>\n<p>These should be handed over to sparse_column_with_cat_prob to solve this problem.</p>\n<p>Resources<br>\n[1] <a href=\"https://arxiv.org/abs/1606.07792\" rel=\"nofollow\">https://arxiv.org/abs/1606.07792</a><br>\n[2] <a href=\"https://www.tensorflow.org/tutorials/wide_and_deep\" rel=\"nofollow\">https://www.tensorflow.org/tutorials/wide_and_deep</a></p>", "body_text": "Hi there,\nworking on deep learning for recommender systems I came across the Google Wide and Deep model (see [1] and [2]).\nProblem\nIn my application context there are users and items as well as the interactions between those entities. Furthermore there are item and user features, that are both, continuous and categorical. Here, we have item_features = user_features (user_features derived from user interactions).\nA big problem is the representation of categorical user features as a result from their interaction with different items with respectively different item features. (Some intuition to be found below)\n\ntf.contrib.layers.python.layers.sparse_column_with_keys\ntf.contrib.layers.python.layers.sparse_column_with_hash_bucket\n\nallow to define or induce keys for categorical features that are then one-hot encoded behind the scenes - as far as I understood\nThis works for items that can just have one feature value, but users can have a multivalent preference that should be reflected by a categorcial probability distribution (cpd).\nTo capture this result we need TF to capture this cpd and compare it with the one-hot-encoded movie features. The latter is provided internally, but for realizing user profiles I couldn't find proper means meaning that within tensorflow.contrib.layers.python.layers there are no sparse columns providing this possibility which in fact is petty relevant.\nProposed Solution\nAdd following method feature column:\nsparse_column_with_cat_prob(column_name, value_prob_dict, counterpart)\n\ncolumn_name: see sparse_column_with_keys for example\nvalue_prob_dict: dictionary containing feature values (value) and associated probabilities (prob)\ncounterpart:  eventually, name of the one-hot-encoded sparse column this one is refering to\n\nThis would allow for building user features for categorcial user interaction data, especially within recommendation contexts.\nIntuition\nTo give some intuition see the following example from a movie recommendation context:\nuser 1 interacts with movies A, B, C, D, and E\nmovie_features: genre {Romance, Action},\n   movie_id movie_genre  movie_length\n0         0     Romance           120\n1         1      Action            95\n2         2      Action           130\n3         3     Romance           150\n4         4     Romance           110\n\n   user_id user_genre user_length\n0        0    unknown      unknown\n1        1    unknown      unknown\n\nObserved interactions:\n   user_id  movie_id\n0        0         0\n1        0         1\n2        1         1\n3        1         2\n4        1         3\n5        1         4\n\nMerge, group by size and calculation the shares produces:\nuser_id  movie_genre\n0        Action         0.333333\n         Romance        0.666667\n1        Action         0.500000\n         Romance        0.500000\n\nSo, as we can observe user 0 rather prefers Romance movies whereas user 1 is indifferent between genres. As a learning outcome user 0 should be recommended more Romance than Action movies, analogously for user 1.\nThese should be handed over to sparse_column_with_cat_prob to solve this problem.\nResources\n[1] https://arxiv.org/abs/1606.07792\n[2] https://www.tensorflow.org/tutorials/wide_and_deep", "body": "Hi there,\r\n\r\nworking on deep learning for recommender systems I came across the Google Wide and Deep model (see [1] and [2]).\r\n\r\n## Problem\r\nIn my application context there are users and items as well as the interactions between those entities. Furthermore there are item and user features, that are both, continuous and categorical. Here, we have **_item_features = user_features_** (user_features derived from user interactions).\r\n\r\nA big problem is the **representation of categorical user features as a result from their interaction with different items with respectively different item features.** (Some intuition to be found below)\r\n\r\n- tf.contrib.layers.python.layers.**sparse_column_with_keys**\r\n- tf.contrib.layers.python.layers.**sparse_column_with_hash_bucket**\r\n\r\nallow to define or induce keys for categorical features that are then one-hot encoded behind the scenes - as far as I understood\r\nThis works for items that can just have one feature value, but users can have a multivalent preference that should be reflected by a categorcial probability distribution (cpd).\r\n\r\nTo capture this result we need TF to capture this cpd and compare it with the one-hot-encoded movie features. The latter is provided internally, but for realizing user profiles I couldn't find proper means meaning that within tensorflow.contrib.layers.python.layers there are no sparse columns providing this possibility which in fact is petty relevant.\r\n\r\n## Proposed Solution\r\nAdd following method feature column:\r\nsparse_column_with_cat_prob(column_name, value_prob_dict, counterpart)\r\n\r\n- **column_name**: see sparse_column_with_keys for example\r\n- **value_prob_dict**: dictionary containing feature values (value) and associated probabilities (prob)\r\n- **counterpart**:  eventually, name of the one-hot-encoded sparse column this one is refering to\r\n\r\nThis would allow for building user features for categorcial user interaction data, especially within recommendation contexts.\r\n\r\n## Intuition\r\nTo give some intuition see the following example from a movie recommendation context:\r\nuser 1 interacts with movies A, B, C, D, and E\r\nmovie_features: genre {Romance, Action}, \r\n\r\n```\r\n   movie_id movie_genre  movie_length\r\n0         0     Romance           120\r\n1         1      Action            95\r\n2         2      Action           130\r\n3         3     Romance           150\r\n4         4     Romance           110\r\n```\r\n```\r\n   user_id user_genre user_length\r\n0        0    unknown      unknown\r\n1        1    unknown      unknown\r\n```\r\n**Observed interactions:**\r\n```\r\n   user_id  movie_id\r\n0        0         0\r\n1        0         1\r\n2        1         1\r\n3        1         2\r\n4        1         3\r\n5        1         4\r\n```\r\nMerge, group by size and calculation the shares produces:\r\n```\r\nuser_id  movie_genre\r\n0        Action         0.333333\r\n         Romance        0.666667\r\n1        Action         0.500000\r\n         Romance        0.500000\r\n```\r\nSo, as we can observe user 0 rather prefers Romance movies whereas user 1 is indifferent between genres. As a learning outcome user 0 should be recommended more Romance than Action movies, analogously for user 1.\r\n\r\nThese should be handed over to sparse_column_with_cat_prob to solve this problem.\r\n\r\nResources\r\n[1] https://arxiv.org/abs/1606.07792\r\n[2] https://www.tensorflow.org/tutorials/wide_and_deep"}