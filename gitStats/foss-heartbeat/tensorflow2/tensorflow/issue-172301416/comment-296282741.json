{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/296282741", "html_url": "https://github.com/tensorflow/tensorflow/issues/3945#issuecomment-296282741", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3945", "id": 296282741, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjI4Mjc0MQ==", "user": {"login": "NeilGirdhar", "id": 730137, "node_id": "MDQ6VXNlcjczMDEzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/730137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeilGirdhar", "html_url": "https://github.com/NeilGirdhar", "followers_url": "https://api.github.com/users/NeilGirdhar/followers", "following_url": "https://api.github.com/users/NeilGirdhar/following{/other_user}", "gists_url": "https://api.github.com/users/NeilGirdhar/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeilGirdhar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeilGirdhar/subscriptions", "organizations_url": "https://api.github.com/users/NeilGirdhar/orgs", "repos_url": "https://api.github.com/users/NeilGirdhar/repos", "events_url": "https://api.github.com/users/NeilGirdhar/events{/privacy}", "received_events_url": "https://api.github.com/users/NeilGirdhar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-21T19:14:15Z", "updated_at": "2017-04-21T19:41:44Z", "author_association": "NONE", "body_html": "<blockquote>\n<p>it is completely equivalent to the operation cond * t + (1 - cond) * e\u2026</p>\n</blockquote>\n<p>Not completely, because when one of <code>t</code> and <code>e</code> is <code>nan</code>, your expression always returns <code>nan</code>.  Also, <code>numpy</code>'s <code>where</code> supports mixed dimensions.</p>", "body_text": "it is completely equivalent to the operation cond * t + (1 - cond) * e\u2026\n\nNot completely, because when one of t and e is nan, your expression always returns nan.  Also, numpy's where supports mixed dimensions.", "body": ">  it is completely equivalent to the operation cond * t + (1 - cond) * e\u2026\r\n\r\nNot completely, because when one of `t` and `e` is `nan`, your expression always returns `nan`.  Also, `numpy`'s `where` supports mixed dimensions."}