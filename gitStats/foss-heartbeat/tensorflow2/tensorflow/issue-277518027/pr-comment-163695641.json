{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/163695641", "pull_request_review_id": 91341421, "id": 163695641, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY5NTY0MQ==", "diff_hunk": "@@ -0,0 +1,334 @@\n+/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/core/framework/common_shape_fns.h\"\n+#include \"tensorflow/core/framework/op.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/register_types.h\"\n+#include \"tensorflow/core/framework/register_types_traits.h\"\n+#include \"tensorflow/core/framework/shape_inference.h\"\n+#include \"tensorflow/core/lib/gtl/array_slice.h\"\n+#include \"tensorflow/core/platform/types.h\"\n+#include \"tensorflow/core/util/work_sharder.h\"\n+\n+namespace tensorflow {\n+\n+#define EIGEN_USE_THREADS\n+using CPUDevice = Eigen::ThreadPoolDevice;\n+\n+// dim_size - the size of each dimension\n+// dim_range - the number of indices over in the flattened tensor\n+//    you need to skip in order to make it over from one side of a dimension\n+//    to the other. Used to make the shifts wrap around after a threshold.\n+// threshold - the index for each dimension that the roll starts to wrap\n+//    back to the front\n+template <typename T>\n+void DoRoll(OpKernelContext* context, const int64 num_elements,\n+            const int num_dims, const gtl::ArraySlice<int>& dim_size,\n+            const T* input, T* output, const gtl::ArraySlice<int>& threshold,\n+            const gtl::ArraySlice<int64>& dim_range) {\n+  auto work = [input, output, num_dims, &dim_size, &threshold, &dim_range](\n+                  int64 start, int64 end) {\n+    // array of indices for each dimension\n+    gtl::InlinedVector<int, 4> indices(num_dims);\n+    int offset = 0;  // the shift along the flattened tensor for current element\n+    // initialize indices and offset\n+    for (int i = 0; i < num_dims; i++) {\n+      // stride is the number of indices over in the flattened tensor\n+      // you need to skip in order to make it over to an adjacent element\n+      // along a dimension. dim_size[i] != 0 because we set it to max(dim, 1)\n+      const int64 stride = dim_range[i] / dim_size[i];\n+      const int shift = dim_size[i] - threshold[i];\n+      const int indx = (start / stride) % dim_size[i];\n+      indices[i] = indx;\n+      // calculate dimension index after the shift\n+      const int shifted_indx = (indx + shift) % dim_size[i];\n+      offset += (shifted_indx - indx) * stride;\n+    }\n+\n+    for (int64 i = start; i < end; i++) {\n+      output[i + offset] = input[i];\n+      // create next combination of indices\n+      // while at it adjust offset if needed\n+      for (int j = num_dims - 1; j >= 0; j--) {\n+        const int indx = (indices[j] + 1) % dim_size[j];\n+        indices[j] = indx;\n+        if (indx != 0) {\n+          if (indx == threshold[j]) {  // we've reached the threshold\n+            // dim_range[j] = threshold[j] + shift[j]\n+            // offset = shift[j] + ... other offsets\n+            // offset - dim_range[j] = -threshold[j] + ... other offsets\n+            // thus we undo our previous offset as well as add a new offset of\n+            // -threshold[j] in one opperation", "path": "tensorflow/core/kernels/roll_op.cc", "position": null, "original_position": 74, "commit_id": "70fc4c06e907b5578d3345a08967714bfd96f0de", "original_commit_id": "b27dd611240188f367a3089215095a4fd0a73c11", "user": {"login": "yzhwang", "id": 1002405, "node_id": "MDQ6VXNlcjEwMDI0MDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1002405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yzhwang", "html_url": "https://github.com/yzhwang", "followers_url": "https://api.github.com/users/yzhwang/followers", "following_url": "https://api.github.com/users/yzhwang/following{/other_user}", "gists_url": "https://api.github.com/users/yzhwang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yzhwang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yzhwang/subscriptions", "organizations_url": "https://api.github.com/users/yzhwang/orgs", "repos_url": "https://api.github.com/users/yzhwang/repos", "events_url": "https://api.github.com/users/yzhwang/events{/privacy}", "received_events_url": "https://api.github.com/users/yzhwang/received_events", "type": "User", "site_admin": false}, "body": "opperation->operation", "created_at": "2018-01-24T22:15:11Z", "updated_at": "2018-01-25T23:18:34Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14953#discussion_r163695641", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14953", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/163695641"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14953#discussion_r163695641"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14953"}}, "body_html": "<p>opperation-&gt;operation</p>", "body_text": "opperation->operation"}