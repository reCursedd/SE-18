{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/158393428", "pull_request_review_id": 85139445, "id": 158393428, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODM5MzQyOA==", "diff_hunk": "@@ -0,0 +1,306 @@\n+/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/core/framework/common_shape_fns.h\"\n+#include \"tensorflow/core/framework/op.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/register_types.h\"\n+#include \"tensorflow/core/framework/register_types_traits.h\"\n+#include \"tensorflow/core/framework/shape_inference.h\"\n+#include \"tensorflow/core/lib/gtl/array_slice.h\"\n+#include \"tensorflow/core/platform/types.h\"\n+#include \"tensorflow/core/util/work_sharder.h\"\n+\n+namespace tensorflow {\n+\n+#define EIGEN_USE_THREADS\n+using CPUDevice = Eigen::ThreadPoolDevice;\n+using GPUDevice = Eigen::GpuDevice;\n+\n+template <typename T>\n+void DoRoll(OpKernelContext* context, const int64 N, const int D,\n+            const gtl::ArraySlice<int>& dim_size, const T* input, T* output,\n+            const gtl::ArraySlice<int>& threshold,\n+            const gtl::ArraySlice<int64>& dim_range) {\n+  auto work = [input, output, D, &dim_size, &threshold, &dim_range](int64 start,\n+                                                                    int64 end) {\n+    // array of indices for each dimension\n+    gtl::InlinedVector<int, 4> indices(D);\n+    int offset = 0;  // the shift along the flattened tensor for current element\n+    // initialize indices and offset\n+    for (int d = 0; d < D; d++) {\n+      // stride is the number of indices over in the flattened tensor\n+      // you need to skip in order to make it over to an adjacent element\n+      // along a dimension. dim_size[d] != 0 because we set it to max(dim, 1)\n+      const int64 stride = dim_range[d] / dim_size[d];\n+      const int shift = dim_size[d] - threshold[d];\n+      const int indx = (start / stride) % dim_size[d];\n+      indices[d] = indx;\n+      // calculate dimension index after the shift\n+      const int shifted_indx = (indx + shift) % dim_size[d];\n+      offset += (shifted_indx - indx) * stride;\n+    }\n+\n+    for (int64 i = start; i < end; i++) {\n+      output[i + offset] = input[i];\n+      // create next combination of indices\n+      // while at it adjust offset if needed\n+      for (int d = D - 1; d >= 0; d--) {\n+        const int indx = (indices[d] + 1) % dim_size[d];\n+        indices[d] = indx;\n+        if (indx != 0) {\n+          if (indx == threshold[d]) {  // we've reached the threshold\n+            // dim_range[d] = threshold[d] + shift[d]\n+            // offset = shift[d] + ... other offsets\n+            // offset - dim_range[d] = -threshold[d] + ... other offsets\n+            // thus we undo our previous offset as well as add a new offset of\n+            // -threshold[d] in one opperation\n+            offset -= dim_range[d];  // now wraps around\n+          }\n+          break;                         // indx != 0 don't need to carry\n+        } else if (threshold[d] != 0) {  // if threshold is 0 shift is 0\n+          offset += dim_range[d];        // indx became 0 so reverse wrap around\n+        }\n+      }\n+    }\n+  };\n+  // Shard\n+  auto worker_threads = context->device()->tensorflow_cpu_worker_threads();\n+  const int cost_per_unit = 50;  // rough esitmate\n+  Shard(worker_threads->num_threads, worker_threads->workers, N, cost_per_unit,\n+        std::move(work));\n+}\n+\n+template <typename T>\n+// Use memcpy to copy memory in groups when the data type supports memcpy\n+void DoRollV2(OpKernelContext* context, const int64 N, const int D,", "path": "tensorflow/core/kernels/roll_op.cc", "position": null, "original_position": 88, "commit_id": "70fc4c06e907b5578d3345a08967714bfd96f0de", "original_commit_id": "225f72c87a435201e1e2c4c9a8675b3795f68f2b", "user": {"login": "yzhwang", "id": 1002405, "node_id": "MDQ6VXNlcjEwMDI0MDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1002405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yzhwang", "html_url": "https://github.com/yzhwang", "followers_url": "https://api.github.com/users/yzhwang/followers", "following_url": "https://api.github.com/users/yzhwang/following{/other_user}", "gists_url": "https://api.github.com/users/yzhwang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yzhwang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yzhwang/subscriptions", "organizations_url": "https://api.github.com/users/yzhwang/orgs", "repos_url": "https://api.github.com/users/yzhwang/repos", "events_url": "https://api.github.com/users/yzhwang/events{/privacy}", "received_events_url": "https://api.github.com/users/yzhwang/received_events", "type": "User", "site_admin": false}, "body": "Usually V2 APIs are used at a newer version of implementation before the older one is deprecated. Here DoRollV2() and DoRoll() are different implementation according to different data types, so I suggest you change the DoRollV2() into DoRollWithMemcpy().", "created_at": "2017-12-21T22:31:54Z", "updated_at": "2018-01-25T23:18:34Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14953#discussion_r158393428", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14953", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/158393428"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14953#discussion_r158393428"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14953"}}, "body_html": "<p>Usually V2 APIs are used at a newer version of implementation before the older one is deprecated. Here DoRollV2() and DoRoll() are different implementation according to different data types, so I suggest you change the DoRollV2() into DoRollWithMemcpy().</p>", "body_text": "Usually V2 APIs are used at a newer version of implementation before the older one is deprecated. Here DoRollV2() and DoRoll() are different implementation according to different data types, so I suggest you change the DoRollV2() into DoRollWithMemcpy()."}