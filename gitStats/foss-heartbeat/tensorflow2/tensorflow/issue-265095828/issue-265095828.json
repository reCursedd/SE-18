{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13672", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13672/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13672/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13672/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/13672", "id": 265095828, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ2MzIxNzMy", "number": 13672, "title": "Fix discrepancy between doc and impl for `tf.reverse`", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 419840263, "node_id": "MDU6TGFiZWw0MTk4NDAyNjM=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20testing%20(then%20merge)", "name": "awaiting testing (then merge)", "color": "c2e0c6", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2017-10-12T21:37:45Z", "updated_at": "2017-12-27T06:54:44Z", "closed_at": "2017-12-27T02:49:56Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13672", "html_url": "https://github.com/tensorflow/tensorflow/pull/13672", "diff_url": "https://github.com/tensorflow/tensorflow/pull/13672.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/13672.patch"}, "body_html": "<p>This fix tries to address the discrepancy between doc and implementations for <code>tf.reverse</code>. In the documentation, both int32 and int64 could be used for axis.</p>\n<p>However, the actual implementation of the <code>tf.reverse</code> does not support int64 and caused missing kernel error:</p>\n<div class=\"highlight highlight-source-python\"><pre>ubuntu<span class=\"pl-k\">@</span>ubuntu:<span class=\"pl-k\">~</span><span class=\"pl-ii\">$</span> python\nPython <span class=\"pl-c1\">2.7</span>.12 (default, Nov <span class=\"pl-c1\">19</span> <span class=\"pl-c1\">2016</span>, <span class=\"pl-c1\">0<span class=\"pl-ii\">6</span></span>:<span class=\"pl-c1\">48</span>:<span class=\"pl-c1\">10</span>)\n[<span class=\"pl-c1\">GCC</span> <span class=\"pl-c1\">5.4</span>.0 <span class=\"pl-c1\">20160609</span>] on linux2\nType <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>help<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>copyright<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>credits<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">or</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>license<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">for</span> more information.\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> v <span class=\"pl-k\">=</span> tf.reverse_v2([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>], tf.constant([<span class=\"pl-c1\">0</span>], tf.int64))\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> sess <span class=\"pl-k\">=</span> tf.Session()\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> sess.run(v)\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stdin&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">889</span>, <span class=\"pl-k\">in</span> run\n    run_metadata_ptr)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1120</span>, <span class=\"pl-k\">in</span> _run\n    feed_dict_tensor, options, run_metadata)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1317</span>, <span class=\"pl-k\">in</span> _do_run\n    options, run_metadata)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1336</span>, <span class=\"pl-k\">in</span> _do_call\n    <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">type</span>(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: No OpKernel was registered to support Op <span class=\"pl-s\"><span class=\"pl-pds\">'</span>ReverseV2<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">with</span> these attrs.  Registered devices: [<span class=\"pl-c1\">CPU</span>], Registered kernels:\n  device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>CPU<span class=\"pl-pds\">'</span></span>; T <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_STRING</span>]; Tidx <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]\n  device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>CPU<span class=\"pl-pds\">'</span></span>; T <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_BOOL</span>]; Tidx <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]\n  device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>CPU<span class=\"pl-pds\">'</span></span>; T <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_COMPLEX128</span>]; Tidx <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]\n  device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>CPU<span class=\"pl-pds\">'</span></span>; T <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_COMPLEX64</span>]; Tidx <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]\n  device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>CPU<span class=\"pl-pds\">'</span></span>; T <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_DOUBLE</span>]; Tidx <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]\n  device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>CPU<span class=\"pl-pds\">'</span></span>; T <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_FLOAT</span>]; Tidx <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]\n  device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>CPU<span class=\"pl-pds\">'</span></span>; T <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_HALF</span>]; Tidx <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]\n  device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>CPU<span class=\"pl-pds\">'</span></span>; T <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT8</span>]; Tidx <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]\n  device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>CPU<span class=\"pl-pds\">'</span></span>; T <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_UINT8</span>]; Tidx <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]\n  device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>CPU<span class=\"pl-pds\">'</span></span>; T <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT16</span>]; Tidx <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]\n  device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>CPU<span class=\"pl-pds\">'</span></span>; T <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_UINT16</span>]; Tidx <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]\n  device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>CPU<span class=\"pl-pds\">'</span></span>; T <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]; Tidx <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]\n  device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>CPU<span class=\"pl-pds\">'</span></span>; T <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT64</span>]; Tidx <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">DT_INT32</span>]\n\n         [[Node: ReverseV2 = ReverseV2[T=<span class=\"pl-c1\">DT_INT32</span>, Tidx=<span class=\"pl-c1\">DT_INT64</span>](ReverseV2<span class=\"pl-k\">/</span>tensor, Const)]]\n</pre></div>\n<p>This fix addresses this issue and added the int64 support for axis in <code>tf.reverse</code>.</p>\n<p>Signed-off-by: Yong Tang <a href=\"mailto:yong.tang.github@outlook.com\">yong.tang.github@outlook.com</a></p>", "body_text": "This fix tries to address the discrepancy between doc and implementations for tf.reverse. In the documentation, both int32 and int64 could be used for axis.\nHowever, the actual implementation of the tf.reverse does not support int64 and caused missing kernel error:\nubuntu@ubuntu:~$ python\nPython 2.7.12 (default, Nov 19 2016, 06:48:10)\n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import tensorflow as tf\n>>> v = tf.reverse_v2([1, 2, 3], tf.constant([0], tf.int64))\n>>> sess = tf.Session()\n>>> sess.run(v)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 889, in run\n    run_metadata_ptr)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 1120, in _run\n    feed_dict_tensor, options, run_metadata)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 1317, in _do_run\n    options, run_metadata)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 1336, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: No OpKernel was registered to support Op 'ReverseV2' with these attrs.  Registered devices: [CPU], Registered kernels:\n  device='CPU'; T in [DT_STRING]; Tidx in [DT_INT32]\n  device='CPU'; T in [DT_BOOL]; Tidx in [DT_INT32]\n  device='CPU'; T in [DT_COMPLEX128]; Tidx in [DT_INT32]\n  device='CPU'; T in [DT_COMPLEX64]; Tidx in [DT_INT32]\n  device='CPU'; T in [DT_DOUBLE]; Tidx in [DT_INT32]\n  device='CPU'; T in [DT_FLOAT]; Tidx in [DT_INT32]\n  device='CPU'; T in [DT_HALF]; Tidx in [DT_INT32]\n  device='CPU'; T in [DT_INT8]; Tidx in [DT_INT32]\n  device='CPU'; T in [DT_UINT8]; Tidx in [DT_INT32]\n  device='CPU'; T in [DT_INT16]; Tidx in [DT_INT32]\n  device='CPU'; T in [DT_UINT16]; Tidx in [DT_INT32]\n  device='CPU'; T in [DT_INT32]; Tidx in [DT_INT32]\n  device='CPU'; T in [DT_INT64]; Tidx in [DT_INT32]\n\n         [[Node: ReverseV2 = ReverseV2[T=DT_INT32, Tidx=DT_INT64](ReverseV2/tensor, Const)]]\n\nThis fix addresses this issue and added the int64 support for axis in tf.reverse.\nSigned-off-by: Yong Tang yong.tang.github@outlook.com", "body": "This fix tries to address the discrepancy between doc and implementations for `tf.reverse`. In the documentation, both int32 and int64 could be used for axis.\r\n\r\nHowever, the actual implementation of the `tf.reverse` does not support int64 and caused missing kernel error:\r\n```python\r\nubuntu@ubuntu:~$ python\r\nPython 2.7.12 (default, Nov 19 2016, 06:48:10)\r\n[GCC 5.4.0 20160609] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import tensorflow as tf\r\n>>> v = tf.reverse_v2([1, 2, 3], tf.constant([0], tf.int64))\r\n>>> sess = tf.Session()\r\n>>> sess.run(v)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 889, in run\r\n    run_metadata_ptr)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 1120, in _run\r\n    feed_dict_tensor, options, run_metadata)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 1317, in _do_run\r\n    options, run_metadata)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 1336, in _do_call\r\n    raise type(e)(node_def, op, message)\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: No OpKernel was registered to support Op 'ReverseV2' with these attrs.  Registered devices: [CPU], Registered kernels:\r\n  device='CPU'; T in [DT_STRING]; Tidx in [DT_INT32]\r\n  device='CPU'; T in [DT_BOOL]; Tidx in [DT_INT32]\r\n  device='CPU'; T in [DT_COMPLEX128]; Tidx in [DT_INT32]\r\n  device='CPU'; T in [DT_COMPLEX64]; Tidx in [DT_INT32]\r\n  device='CPU'; T in [DT_DOUBLE]; Tidx in [DT_INT32]\r\n  device='CPU'; T in [DT_FLOAT]; Tidx in [DT_INT32]\r\n  device='CPU'; T in [DT_HALF]; Tidx in [DT_INT32]\r\n  device='CPU'; T in [DT_INT8]; Tidx in [DT_INT32]\r\n  device='CPU'; T in [DT_UINT8]; Tidx in [DT_INT32]\r\n  device='CPU'; T in [DT_INT16]; Tidx in [DT_INT32]\r\n  device='CPU'; T in [DT_UINT16]; Tidx in [DT_INT32]\r\n  device='CPU'; T in [DT_INT32]; Tidx in [DT_INT32]\r\n  device='CPU'; T in [DT_INT64]; Tidx in [DT_INT32]\r\n\r\n         [[Node: ReverseV2 = ReverseV2[T=DT_INT32, Tidx=DT_INT64](ReverseV2/tensor, Const)]]\r\n\r\n```\r\nThis fix addresses this issue and added the int64 support for axis in `tf.reverse`.\r\n\r\nSigned-off-by: Yong Tang <yong.tang.github@outlook.com>"}