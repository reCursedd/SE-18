{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/345380658", "html_url": "https://github.com/tensorflow/tensorflow/issues/14613#issuecomment-345380658", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14613", "id": 345380658, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTM4MDY1OA==", "user": {"login": "MtDersvan", "id": 7069222, "node_id": "MDQ6VXNlcjcwNjkyMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7069222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MtDersvan", "html_url": "https://github.com/MtDersvan", "followers_url": "https://api.github.com/users/MtDersvan/followers", "following_url": "https://api.github.com/users/MtDersvan/following{/other_user}", "gists_url": "https://api.github.com/users/MtDersvan/gists{/gist_id}", "starred_url": "https://api.github.com/users/MtDersvan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MtDersvan/subscriptions", "organizations_url": "https://api.github.com/users/MtDersvan/orgs", "repos_url": "https://api.github.com/users/MtDersvan/repos", "events_url": "https://api.github.com/users/MtDersvan/events{/privacy}", "received_events_url": "https://api.github.com/users/MtDersvan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-17T22:16:13Z", "updated_at": "2017-11-17T22:16:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for your suggestion <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>!</p>\n<p><em>MonitoredTrainingSession</em>: As far as I can tell sessions are not recreated and both <code>.from_string_handle()</code> and <code>string_handle()</code> are invoked before session is even created. I'm just running this on k8s on GKE with 10 GPUs in a data-parallel distributed fashion.</p>\n<p><em>shared_name</em>: Your suggestion worked for a tf r1.4 binary! Thanks a lot. By creating shared name for each task it avoided <code>NotFoundError</code>.</p>\n<p>Also, I tried to run it with tf r1.4 built from sources, but I keep getting <code>CUDA_ERROR_ILLEGAL_ADDRESS</code> at random during the training, too. But I assume this is probably not related to this issue.</p>\n<p>In general my issue is solved, but obviously this is a hack, and not an intended behavior. Exactly the same code runs smoothly on r1.3.1, but for r1.4 it needs a <code>shared_name</code> to be specified. So I leave this up to you to keep it or close it.</p>", "body_text": "Thanks for your suggestion @mrry!\nMonitoredTrainingSession: As far as I can tell sessions are not recreated and both .from_string_handle() and string_handle() are invoked before session is even created. I'm just running this on k8s on GKE with 10 GPUs in a data-parallel distributed fashion.\nshared_name: Your suggestion worked for a tf r1.4 binary! Thanks a lot. By creating shared name for each task it avoided NotFoundError.\nAlso, I tried to run it with tf r1.4 built from sources, but I keep getting CUDA_ERROR_ILLEGAL_ADDRESS at random during the training, too. But I assume this is probably not related to this issue.\nIn general my issue is solved, but obviously this is a hack, and not an intended behavior. Exactly the same code runs smoothly on r1.3.1, but for r1.4 it needs a shared_name to be specified. So I leave this up to you to keep it or close it.", "body": "Thanks for your suggestion @mrry!\r\n\r\n*MonitoredTrainingSession*: As far as I can tell sessions are not recreated and both `.from_string_handle()` and `string_handle()` are invoked before session is even created. I'm just running this on k8s on GKE with 10 GPUs in a data-parallel distributed fashion.\r\n\r\n*shared_name*: Your suggestion worked for a tf r1.4 binary! Thanks a lot. By creating shared name for each task it avoided `NotFoundError`.\r\n\r\nAlso, I tried to run it with tf r1.4 built from sources, but I keep getting `CUDA_ERROR_ILLEGAL_ADDRESS` at random during the training, too. But I assume this is probably not related to this issue.\r\n\r\nIn general my issue is solved, but obviously this is a hack, and not an intended behavior. Exactly the same code runs smoothly on r1.3.1, but for r1.4 it needs a `shared_name` to be specified. So I leave this up to you to keep it or close it."}