{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13171", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13171/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13171/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13171/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13171", "id": 259004423, "node_id": "MDU6SXNzdWUyNTkwMDQ0MjM=", "number": 13171, "title": "tf.reduce_*(mean/sum) runs very slow on GPU", "user": {"login": "vs-zhehangd", "id": 29877977, "node_id": "MDQ6VXNlcjI5ODc3OTc3", "avatar_url": "https://avatars1.githubusercontent.com/u/29877977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vs-zhehangd", "html_url": "https://github.com/vs-zhehangd", "followers_url": "https://api.github.com/users/vs-zhehangd/followers", "following_url": "https://api.github.com/users/vs-zhehangd/following{/other_user}", "gists_url": "https://api.github.com/users/vs-zhehangd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vs-zhehangd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vs-zhehangd/subscriptions", "organizations_url": "https://api.github.com/users/vs-zhehangd/orgs", "repos_url": "https://api.github.com/users/vs-zhehangd/repos", "events_url": "https://api.github.com/users/vs-zhehangd/events{/privacy}", "received_events_url": "https://api.github.com/users/vs-zhehangd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-09-20T00:29:02Z", "updated_at": "2018-03-14T02:30:26Z", "closed_at": "2017-09-21T16:12:17Z", "author_association": "NONE", "body_html": "<p>I notice that tf.reduce_*(mean/sum) runs very slow on GPU in some cases, which can happen in the following simple examle:</p>\n<p>x = tf.Variable(tf.ones([80, 80, 80, 80])) # 4-D tensor.<br>\ny = tf.reduce_sum(x, [0, 2, 3]) # Sum over all dims except the 2nd.</p>\n<p>The execution time on GPU is very large and is approximate same as (or more than) the time on CPU, which probably means the GPU is not used at all. The same result can be obtained by choosing the other axes, except for the first and the last axes, in which case the execution on GPU is significantly faster than CPU.</p>\n<p>Here is the <a href=\"https://gist.github.com/vs-zhehangd/8a547094cfa0efc181b814bfb20b31ce\">code</a> that reproduces the problem. You can run with <code>--keep_dim k</code> k=0,1,2,3 to select different axes.</p>\n<p>I am using the following PC system:</p>\n<ul>\n<li>Kubuntu 16.04</li>\n<li>TensorFlow 1.2.1 ('v1.2.0-5-g435cdfc', '1.2.1')</li>\n<li>Python 2.7</li>\n<li>GeForce GTX 1080 Ti</li>\n<li>CUDA-8.0</li>\n</ul>\n<p>The execution time on GPU, CPU, and NumPy is given as follows:</p>\n<table>\n<thead>\n<tr>\n<th>exec time (s)</th>\n<th>[1,2,3]</th>\n<th>[0,2,3]</th>\n<th>[0,1,3]</th>\n<th>[0,1,2]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GPU</td>\n<td>0.00918</td>\n<td>0.40572</td>\n<td>0.55388</td>\n<td>0.01905</td>\n</tr>\n<tr>\n<td>CPU</td>\n<td>0.05921</td>\n<td>0.22461</td>\n<td>0.56524</td>\n<td>0.16172</td>\n</tr>\n<tr>\n<td>NumPy</td>\n<td>0.24799</td>\n<td>0.24847</td>\n<td>0.24886</td>\n<td>0.26601</td>\n</tr>\n</tbody>\n</table>\n<p>Similar result was observed also on my laptop.</p>\n<hr>\n<p>I met this problem when I tried to implement Batch Normalization (initially when I ran tf.nn.moment(), then realized the key was tf.reduce_*). I wanted to collect means of different channels. Using NHWC data format the problem does not matter as C is the last dimension. However, slow execution occurs if I want to implement for NCHW format as C is the second dimension, this makes the execution time on Batch Normalization overwhelms all other ops such as convolutions. This is surely a nightmare for training and evaluation.</p>\n<p>I hope it will be fixed if it is a bug. Or, if the reason is that the oprations are just not implemented for GPU by now, I wonder if there is a way to walk around.</p>", "body_text": "I notice that tf.reduce_*(mean/sum) runs very slow on GPU in some cases, which can happen in the following simple examle:\nx = tf.Variable(tf.ones([80, 80, 80, 80])) # 4-D tensor.\ny = tf.reduce_sum(x, [0, 2, 3]) # Sum over all dims except the 2nd.\nThe execution time on GPU is very large and is approximate same as (or more than) the time on CPU, which probably means the GPU is not used at all. The same result can be obtained by choosing the other axes, except for the first and the last axes, in which case the execution on GPU is significantly faster than CPU.\nHere is the code that reproduces the problem. You can run with --keep_dim k k=0,1,2,3 to select different axes.\nI am using the following PC system:\n\nKubuntu 16.04\nTensorFlow 1.2.1 ('v1.2.0-5-g435cdfc', '1.2.1')\nPython 2.7\nGeForce GTX 1080 Ti\nCUDA-8.0\n\nThe execution time on GPU, CPU, and NumPy is given as follows:\n\n\n\nexec time (s)\n[1,2,3]\n[0,2,3]\n[0,1,3]\n[0,1,2]\n\n\n\n\nGPU\n0.00918\n0.40572\n0.55388\n0.01905\n\n\nCPU\n0.05921\n0.22461\n0.56524\n0.16172\n\n\nNumPy\n0.24799\n0.24847\n0.24886\n0.26601\n\n\n\nSimilar result was observed also on my laptop.\n\nI met this problem when I tried to implement Batch Normalization (initially when I ran tf.nn.moment(), then realized the key was tf.reduce_*). I wanted to collect means of different channels. Using NHWC data format the problem does not matter as C is the last dimension. However, slow execution occurs if I want to implement for NCHW format as C is the second dimension, this makes the execution time on Batch Normalization overwhelms all other ops such as convolutions. This is surely a nightmare for training and evaluation.\nI hope it will be fixed if it is a bug. Or, if the reason is that the oprations are just not implemented for GPU by now, I wonder if there is a way to walk around.", "body": " \r\nI notice that tf.reduce_*(mean/sum) runs very slow on GPU in some cases, which can happen in the following simple examle:\r\n\r\nx = tf.Variable(tf.ones([80, 80, 80, 80])) # 4-D tensor.\r\ny = tf.reduce_sum(x, [0, 2, 3]) # Sum over all dims except the 2nd.\r\n\r\nThe execution time on GPU is very large and is approximate same as (or more than) the time on CPU, which probably means the GPU is not used at all. The same result can be obtained by choosing the other axes, except for the first and the last axes, in which case the execution on GPU is significantly faster than CPU.\r\n\r\nHere is the [code](https://gist.github.com/vs-zhehangd/8a547094cfa0efc181b814bfb20b31ce) that reproduces the problem. You can run with `--keep_dim k` k=0,1,2,3 to select different axes.\r\n\r\nI am using the following PC system:\r\n\r\n* Kubuntu 16.04\r\n* TensorFlow 1.2.1 ('v1.2.0-5-g435cdfc', '1.2.1')\r\n* Python 2.7\r\n* GeForce GTX 1080 Ti\r\n* CUDA-8.0\r\n\r\nThe execution time on GPU, CPU, and NumPy is given as follows:\r\n\r\n exec time (s) | [1,2,3] | [0,2,3] | [0,1,3] | [0,1,2] |\r\n|---------------|---------|---------|---------|---------|\r\n| GPU           | 0.00918 | 0.40572 | 0.55388 | 0.01905 |\r\n| CPU           | 0.05921 | 0.22461 | 0.56524 | 0.16172 |\r\n| NumPy         | 0.24799 | 0.24847 | 0.24886 | 0.26601 |\r\n\r\n\r\nSimilar result was observed also on my laptop.\r\n\r\n-------------------------------------------------------\r\n\r\nI met this problem when I tried to implement Batch Normalization (initially when I ran tf.nn.moment(), then realized the key was tf.reduce_*). I wanted to collect means of different channels. Using NHWC data format the problem does not matter as C is the last dimension. However, slow execution occurs if I want to implement for NCHW format as C is the second dimension, this makes the execution time on Batch Normalization overwhelms all other ops such as convolutions. This is surely a nightmare for training and evaluation.\r\n\r\nI hope it will be fixed if it is a bug. Or, if the reason is that the oprations are just not implemented for GPU by now, I wonder if there is a way to walk around."}