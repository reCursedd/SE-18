{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21974", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21974/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21974/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21974/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21974", "id": 355545532, "node_id": "MDU6SXNzdWUzNTU1NDU1MzI=", "number": 21974, "title": "Seeding tf.random_uniform with tf.Tensors", "user": {"login": "mortendahl", "id": 5921097, "node_id": "MDQ6VXNlcjU5MjEwOTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5921097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mortendahl", "html_url": "https://github.com/mortendahl", "followers_url": "https://api.github.com/users/mortendahl/followers", "following_url": "https://api.github.com/users/mortendahl/following{/other_user}", "gists_url": "https://api.github.com/users/mortendahl/gists{/gist_id}", "starred_url": "https://api.github.com/users/mortendahl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mortendahl/subscriptions", "organizations_url": "https://api.github.com/users/mortendahl/orgs", "repos_url": "https://api.github.com/users/mortendahl/repos", "events_url": "https://api.github.com/users/mortendahl/events{/privacy}", "received_events_url": "https://api.github.com/users/mortendahl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-08-30T11:36:15Z", "updated_at": "2018-11-13T20:35:51Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Mac OS X 10.13.6</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.10.0</li>\n<li><strong>Python version</strong>: 3.6.5</li>\n<li><strong>Exact command to reproduce</strong>: (feature request, see code below)</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>For my application I need to sample a random tensor on one device and later transfer it to a different device. To save on networking I would like to instead only transfer a seed (that gets expanded on both devices before further processing). I need <code>tf.random_uniform</code> in particular.</p>\n<p>Problem is that currently it seems the seed for <code>tf.random_uniform</code> must be a Python <code>int</code>, yet for this application the seed cannot be part of the script/graph but must be sampled by the first device.</p>\n<pre><code>TypeError: Expected int for argument 'seed2' not &lt;tf.Tensor 'random_uniform_1/mod:0' shape=() dtype=int64&gt;.\n</code></pre>\n<p>At the same time it's not clear whether this represents an inherent limitation of TensorFlow since <code>Dataset.shuffle</code> does seem to support <code>tf.Tensors</code> as seeds (inspired by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"300398689\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/17284\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/17284/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/17284\">#17284</a>).</p>\n<h3>Source code / logs</h3>\n<p>The following code is what I'd ideally like to do but produces the error message above:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nseed <span class=\"pl-k\">=</span> tf.random_uniform(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int64, <span class=\"pl-v\">maxval</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000000</span>)\nx <span class=\"pl-k\">=</span> tf.random_uniform(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>,), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32, <span class=\"pl-v\">maxval</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">100</span>, <span class=\"pl-v\">seed</span><span class=\"pl-k\">=</span>seed)\n\nsess <span class=\"pl-k\">=</span> tf.Session()\n<span class=\"pl-c1\">print</span>(sess.run(x))</pre></div>\n<p>This code works but seems sub-ideal:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\nseed <span class=\"pl-k\">=</span> tf.random_uniform(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int64, <span class=\"pl-v\">maxval</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000000</span>)\n\ndataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensor_slices(np.arange(<span class=\"pl-c1\">100</span>))\ndataset <span class=\"pl-k\">=</span> dataset.shuffle(<span class=\"pl-v\">buffer_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">100</span>, <span class=\"pl-v\">seed</span><span class=\"pl-k\">=</span>seed)\niterator <span class=\"pl-k\">=</span> dataset.make_initializable_iterator()\nx <span class=\"pl-k\">=</span> iterator.get_next()\n\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run(iterator.initializer)\n<span class=\"pl-c1\">print</span>(sess.run(x))</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS X 10.13.6\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): 1.10.0\nPython version: 3.6.5\nExact command to reproduce: (feature request, see code below)\n\nDescribe the problem\nFor my application I need to sample a random tensor on one device and later transfer it to a different device. To save on networking I would like to instead only transfer a seed (that gets expanded on both devices before further processing). I need tf.random_uniform in particular.\nProblem is that currently it seems the seed for tf.random_uniform must be a Python int, yet for this application the seed cannot be part of the script/graph but must be sampled by the first device.\nTypeError: Expected int for argument 'seed2' not <tf.Tensor 'random_uniform_1/mod:0' shape=() dtype=int64>.\n\nAt the same time it's not clear whether this represents an inherent limitation of TensorFlow since Dataset.shuffle does seem to support tf.Tensors as seeds (inspired by #17284).\nSource code / logs\nThe following code is what I'd ideally like to do but produces the error message above:\nimport tensorflow as tf\n\nseed = tf.random_uniform(shape=[], dtype=tf.int64, maxval=1000000)\nx = tf.random_uniform(shape=(1,), dtype=tf.int32, maxval=100, seed=seed)\n\nsess = tf.Session()\nprint(sess.run(x))\nThis code works but seems sub-ideal:\nimport tensorflow as tf\nimport numpy as np\n\nseed = tf.random_uniform(shape=[], dtype=tf.int64, maxval=1000000)\n\ndataset = tf.data.Dataset.from_tensor_slices(np.arange(100))\ndataset = dataset.shuffle(buffer_size=100, seed=seed)\niterator = dataset.make_initializable_iterator()\nx = iterator.get_next()\n\nsess = tf.Session()\nsess.run(iterator.initializer)\nprint(sess.run(x))", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Mac OS X 10.13.6\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: 1.10.0\r\n- **Python version**: 3.6.5\r\n- **Exact command to reproduce**: (feature request, see code below)\r\n\r\n### Describe the problem\r\n\r\nFor my application I need to sample a random tensor on one device and later transfer it to a different device. To save on networking I would like to instead only transfer a seed (that gets expanded on both devices before further processing). I need `tf.random_uniform` in particular.\r\n\r\nProblem is that currently it seems the seed for `tf.random_uniform` must be a Python `int`, yet for this application the seed cannot be part of the script/graph but must be sampled by the first device.\r\n\r\n```\r\nTypeError: Expected int for argument 'seed2' not <tf.Tensor 'random_uniform_1/mod:0' shape=() dtype=int64>.\r\n```\r\n\r\nAt the same time it's not clear whether this represents an inherent limitation of TensorFlow since `Dataset.shuffle` does seem to support `tf.Tensors` as seeds (inspired by #17284).\r\n\r\n### Source code / logs\r\n\r\nThe following code is what I'd ideally like to do but produces the error message above:\r\n```python\r\nimport tensorflow as tf\r\n\r\nseed = tf.random_uniform(shape=[], dtype=tf.int64, maxval=1000000)\r\nx = tf.random_uniform(shape=(1,), dtype=tf.int32, maxval=100, seed=seed)\r\n\r\nsess = tf.Session()\r\nprint(sess.run(x))\r\n```\r\n\r\nThis code works but seems sub-ideal:\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\nseed = tf.random_uniform(shape=[], dtype=tf.int64, maxval=1000000)\r\n\r\ndataset = tf.data.Dataset.from_tensor_slices(np.arange(100))\r\ndataset = dataset.shuffle(buffer_size=100, seed=seed)\r\niterator = dataset.make_initializable_iterator()\r\nx = iterator.get_next()\r\n\r\nsess = tf.Session()\r\nsess.run(iterator.initializer)\r\nprint(sess.run(x))\r\n```"}