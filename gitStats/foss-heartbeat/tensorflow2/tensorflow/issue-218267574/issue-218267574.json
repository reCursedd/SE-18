{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8848", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8848/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8848/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8848/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8848", "id": 218267574, "node_id": "MDU6SXNzdWUyMTgyNjc1NzQ=", "number": 8848, "title": "How to have a \"static\" like variable inside a function", "user": {"login": "ybsave", "id": 26417094, "node_id": "MDQ6VXNlcjI2NDE3MDk0", "avatar_url": "https://avatars0.githubusercontent.com/u/26417094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ybsave", "html_url": "https://github.com/ybsave", "followers_url": "https://api.github.com/users/ybsave/followers", "following_url": "https://api.github.com/users/ybsave/following{/other_user}", "gists_url": "https://api.github.com/users/ybsave/gists{/gist_id}", "starred_url": "https://api.github.com/users/ybsave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ybsave/subscriptions", "organizations_url": "https://api.github.com/users/ybsave/orgs", "repos_url": "https://api.github.com/users/ybsave/repos", "events_url": "https://api.github.com/users/ybsave/events{/privacy}", "received_events_url": "https://api.github.com/users/ybsave/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-30T17:17:58Z", "updated_at": "2017-04-03T00:10:19Z", "closed_at": "2017-04-01T20:57:27Z", "author_association": "NONE", "body_html": "<p>The StackOverflow website does not work for logging in. Sorry, I have to post my question here.</p>\n<p>I want a simple test. A simple function F(x), inside which mean and variance are calculated from the input x. Meanwhile, I also want to keep two \"static\" like variables (like in C) avg_mean, avg_variance. So that every time F is called avg_mean and avg_variance are updated based on their previous values.</p>\n<p>Also, I want to have two sets of \"avg_mean, avg_variance\" for different scopes. My test codes are as below, but the avg_mean and avg_variance are only the values calculated from the last call and does not include the influence from the first call. If I remove the two \"reuse_variables()\" lines, the program does not run.</p>\n<p>Could anyone help what should I do? By the way, please help withOUT using tf.contrib libs please, because those are not fully supported in Windows now. Thank you.</p>\n<p>import tensorflow as tf</p>\n<p>def getsta(x):<br>\nprint('getsta start...')<br>\nparams_shape = [x.get_shape()[-1]]</p>\n<p>decay=0.9</p>\n<p>mean = tf.get_variable(<br>\n'mean', [1], tf.float32,<br>\ninitializer=tf.constant_initializer(0.0, tf.float32))<br>\nvariance = tf.get_variable(<br>\n'howvariance', [1], tf.float32,<br>\ninitializer=tf.constant_initializer(1.0, tf.float32))</p>\n<p>avg_mean = tf.get_variable(<br>\n'avg_mean', [1], tf.float32,<br>\ninitializer=tf.constant_initializer(0.0, tf.float32))<br>\navg_variance = tf.get_variable(<br>\n'avg_variance', [1], tf.float32,<br>\ninitializer=tf.constant_initializer(0.0, tf.float32))</p>\n<p>mean, variance = tf.nn.moments(x, [0], name='moments')</p>\n<p>avg_mean -= (1.0 - decay) * (avg_mean - mean)<br>\navg_variance -= (1.0 - decay) * (avg_variance - variance)</p>\n<p>return x, mean, variance, avg_mean, avg_variance</p>\n<p>def main(argv=None):<br>\nx1 = tf.constant([1,2,3,4], tf.float32)<br>\nx2 = tf.constant([5,6,7,8], tf.float32)<br>\nx3 = tf.constant([1,3,5,7], tf.float32)<br>\nx4 = tf.constant([4,8,12,16], tf.float32)</p>\n<p>with tf.variable_scope(\"AAA\") as scopeA:<br>\ny1, mean1, variance1, avg_mean1, avg_variance1 = getsta(x1)<br>\nscopeA.reuse_variables()<br>\ny1, mean1, variance1, avg_mean1, avg_variance1 = getsta(x2)<br>\nwith tf.variable_scope(\"BBB\") as scopeB:<br>\ny2, mean2, variance2, avg_mean2, avg_variance2 = getsta(x3)<br>\nscopeB.reuse_variables()<br>\ny2, mean2, variance2, avg_mean2, avg_variance2 = getsta(x4)</p>\n<p>sess = tf.InteractiveSession()<br>\nsess.run(tf.global_variables_initializer())<br>\nprint(sess.run([y1, mean1, variance1, avg_mean1, avg_variance1]))<br>\nprint(sess.run([y2, mean2, variance2, avg_mean2, avg_variance2]))</p>\n<p>if <strong>name</strong> == '<strong>main</strong>':<br>\ntf.app.run(main=main)</p>", "body_text": "The StackOverflow website does not work for logging in. Sorry, I have to post my question here.\nI want a simple test. A simple function F(x), inside which mean and variance are calculated from the input x. Meanwhile, I also want to keep two \"static\" like variables (like in C) avg_mean, avg_variance. So that every time F is called avg_mean and avg_variance are updated based on their previous values.\nAlso, I want to have two sets of \"avg_mean, avg_variance\" for different scopes. My test codes are as below, but the avg_mean and avg_variance are only the values calculated from the last call and does not include the influence from the first call. If I remove the two \"reuse_variables()\" lines, the program does not run.\nCould anyone help what should I do? By the way, please help withOUT using tf.contrib libs please, because those are not fully supported in Windows now. Thank you.\nimport tensorflow as tf\ndef getsta(x):\nprint('getsta start...')\nparams_shape = [x.get_shape()[-1]]\ndecay=0.9\nmean = tf.get_variable(\n'mean', [1], tf.float32,\ninitializer=tf.constant_initializer(0.0, tf.float32))\nvariance = tf.get_variable(\n'howvariance', [1], tf.float32,\ninitializer=tf.constant_initializer(1.0, tf.float32))\navg_mean = tf.get_variable(\n'avg_mean', [1], tf.float32,\ninitializer=tf.constant_initializer(0.0, tf.float32))\navg_variance = tf.get_variable(\n'avg_variance', [1], tf.float32,\ninitializer=tf.constant_initializer(0.0, tf.float32))\nmean, variance = tf.nn.moments(x, [0], name='moments')\navg_mean -= (1.0 - decay) * (avg_mean - mean)\navg_variance -= (1.0 - decay) * (avg_variance - variance)\nreturn x, mean, variance, avg_mean, avg_variance\ndef main(argv=None):\nx1 = tf.constant([1,2,3,4], tf.float32)\nx2 = tf.constant([5,6,7,8], tf.float32)\nx3 = tf.constant([1,3,5,7], tf.float32)\nx4 = tf.constant([4,8,12,16], tf.float32)\nwith tf.variable_scope(\"AAA\") as scopeA:\ny1, mean1, variance1, avg_mean1, avg_variance1 = getsta(x1)\nscopeA.reuse_variables()\ny1, mean1, variance1, avg_mean1, avg_variance1 = getsta(x2)\nwith tf.variable_scope(\"BBB\") as scopeB:\ny2, mean2, variance2, avg_mean2, avg_variance2 = getsta(x3)\nscopeB.reuse_variables()\ny2, mean2, variance2, avg_mean2, avg_variance2 = getsta(x4)\nsess = tf.InteractiveSession()\nsess.run(tf.global_variables_initializer())\nprint(sess.run([y1, mean1, variance1, avg_mean1, avg_variance1]))\nprint(sess.run([y2, mean2, variance2, avg_mean2, avg_variance2]))\nif name == 'main':\ntf.app.run(main=main)", "body": "The StackOverflow website does not work for logging in. Sorry, I have to post my question here.\r\n\r\nI want a simple test. A simple function F(x), inside which mean and variance are calculated from the input x. Meanwhile, I also want to keep two \"static\" like variables (like in C) avg_mean, avg_variance. So that every time F is called avg_mean and avg_variance are updated based on their previous values. \r\n\r\nAlso, I want to have two sets of \"avg_mean, avg_variance\" for different scopes. My test codes are as below, but the avg_mean and avg_variance are only the values calculated from the last call and does not include the influence from the first call. If I remove the two \"reuse_variables()\" lines, the program does not run.\r\n\r\nCould anyone help what should I do? By the way, please help withOUT using tf.contrib libs please, because those are not fully supported in Windows now. Thank you.\r\n\r\nimport tensorflow as tf\r\n\r\ndef getsta(x):\r\n  print('getsta start...')\r\n  params_shape = [x.get_shape()[-1]]\r\n\r\n  decay=0.9\r\n  \r\n  mean = tf.get_variable(\r\n          'mean', [1], tf.float32,\r\n          initializer=tf.constant_initializer(0.0, tf.float32))\r\n  variance = tf.get_variable(\r\n          'howvariance', [1], tf.float32,\r\n          initializer=tf.constant_initializer(1.0, tf.float32))\r\n\r\n  avg_mean = tf.get_variable(\r\n          'avg_mean', [1], tf.float32,\r\n          initializer=tf.constant_initializer(0.0, tf.float32))\r\n  avg_variance = tf.get_variable(\r\n          'avg_variance', [1], tf.float32,\r\n          initializer=tf.constant_initializer(0.0, tf.float32))\r\n\r\n  mean, variance = tf.nn.moments(x, [0], name='moments')\r\n\r\n  avg_mean -= (1.0 - decay) * (avg_mean - mean)\r\n  avg_variance -= (1.0 - decay) * (avg_variance - variance)\r\n\r\n  return x, mean, variance, avg_mean, avg_variance\r\n\r\ndef main(argv=None):\r\n  x1 = tf.constant([1,2,3,4], tf.float32)\r\n  x2 = tf.constant([5,6,7,8], tf.float32)\r\n  x3 = tf.constant([1,3,5,7], tf.float32)\r\n  x4 = tf.constant([4,8,12,16], tf.float32)\r\n\r\n  with tf.variable_scope(\"AAA\") as scopeA:\r\n    y1, mean1, variance1, avg_mean1, avg_variance1 = getsta(x1)\r\n    scopeA.reuse_variables()\r\n    y1, mean1, variance1, avg_mean1, avg_variance1 = getsta(x2)\r\n  with tf.variable_scope(\"BBB\") as scopeB:\r\n    y2, mean2, variance2, avg_mean2, avg_variance2 = getsta(x3)\r\n    scopeB.reuse_variables()\r\n    y2, mean2, variance2, avg_mean2, avg_variance2 = getsta(x4)\r\n\r\n  sess = tf.InteractiveSession()\r\n  sess.run(tf.global_variables_initializer())\r\n  print(sess.run([y1, mean1, variance1, avg_mean1, avg_variance1]))\r\n  print(sess.run([y2, mean2, variance2, avg_mean2, avg_variance2]))\r\n\r\nif __name__ == '__main__':\r\n  tf.app.run(main=main)\r\n"}