{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/366732923", "html_url": "https://github.com/tensorflow/tensorflow/issues/16540#issuecomment-366732923", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16540", "id": 366732923, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjczMjkyMw==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-19T15:53:40Z", "updated_at": "2018-02-19T15:53:40Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Can the problem be solved by setting an explicit <code>dtype</code> for <code>np.random.rand()</code> on this line?</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/8ee732dae6202eac9c9ef1f14a94ba96fde677ce/tensorflow/python/ops/nn_test.py#L951\">tensorflow/tensorflow/python/ops/nn_test.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 951\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/8ee732dae6202eac9c9ef1f14a94ba96fde677ce\">8ee732d</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L951\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"951\"></td>\n          <td id=\"LC951\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> input_values <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-k\">*</span>input_shape) <span class=\"pl-k\">*</span> sigma <span class=\"pl-k\">+</span> mu </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>I suspect we'd like to keep test coverage for the moments-with-single-precision case, since AFAIK that's the one that currently gets more use. However, looping over <code>[np.float32, np.float64]</code> might make sense for these tests (assuming the tolerance can be set appropriately).</p>", "body_text": "Can the problem be solved by setting an explicit dtype for np.random.rand() on this line?\n\n  \n    \n      tensorflow/tensorflow/python/ops/nn_test.py\n    \n    \n         Line 951\n      in\n      8ee732d\n    \n    \n    \n    \n\n        \n          \n           input_values = np.random.rand(*input_shape) * sigma + mu \n        \n    \n  \n\n\nI suspect we'd like to keep test coverage for the moments-with-single-precision case, since AFAIK that's the one that currently gets more use. However, looping over [np.float32, np.float64] might make sense for these tests (assuming the tolerance can be set appropriately).", "body": "Can the problem be solved by setting an explicit `dtype` for `np.random.rand()` on this line?\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/8ee732dae6202eac9c9ef1f14a94ba96fde677ce/tensorflow/python/ops/nn_test.py#L951\r\n\r\nI suspect we'd like to keep test coverage for the moments-with-single-precision case, since AFAIK that's the one that currently gets more use. However, looping over `[np.float32, np.float64]` might make sense for these tests (assuming the tolerance can be set appropriately)."}