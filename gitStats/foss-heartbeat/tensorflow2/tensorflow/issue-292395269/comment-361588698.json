{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/361588698", "html_url": "https://github.com/tensorflow/tensorflow/issues/16540#issuecomment-361588698", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16540", "id": 361588698, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTU4ODY5OA==", "user": {"login": "namrata-ibm", "id": 21953668, "node_id": "MDQ6VXNlcjIxOTUzNjY4", "avatar_url": "https://avatars3.githubusercontent.com/u/21953668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/namrata-ibm", "html_url": "https://github.com/namrata-ibm", "followers_url": "https://api.github.com/users/namrata-ibm/followers", "following_url": "https://api.github.com/users/namrata-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/namrata-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/namrata-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/namrata-ibm/subscriptions", "organizations_url": "https://api.github.com/users/namrata-ibm/orgs", "repos_url": "https://api.github.com/users/namrata-ibm/repos", "events_url": "https://api.github.com/users/namrata-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/namrata-ibm/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-30T13:10:45Z", "updated_at": "2018-01-30T13:10:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20959853\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/drpngx\">@drpngx</a> , <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> , Thank you for your feedback.<br>\nAfter doing some more analysis, found that the test fails, only for <code>mu</code> = <code>1e3</code> <a href=\"https://github.com/tensorflow/tensorflow/blob/v1.4.1/tensorflow/python/ops/nn_test.py#L867\">here</a> and passes for other cases.<br>\nAfter printing actual and expected mean and variance values, found below for failing case:</p>\n<pre><code>mean :  [[ 1000.03216553]]\nexpected_mean:  [[ 1000.04957838]]\nvariance :  [[ 0.00113162]]\nexpected_var :  [[ 0.0008284]]\n</code></pre>\n<p>So seems like some issue with variance calculation.<br>\nFurther printed <a href=\"https://github.com/tensorflow/tensorflow/blob/v1.4.1/tensorflow/python/ops/nn_impl.py#L621\">squared_difference</a> as <code>print(\" squared diff: \", math_ops.squared_difference(y, array_ops.stop_gradient(mean)).eval())</code> and found following:</p>\n<pre><code>s390x:\n squared diff:  [[  9.41790640e-05   6.66562468e-04   1.11056864e-03 ...,   2.74242461e-03\n    2.63482705e-03   1.27498060e-04]\n [  2.23173201e-03   7.84847885e-04   4.25592065e-04 ...,   9.77665186e-05\n    1.73807144e-04   2.11015344e-04]\n [  2.20872462e-05   2.21446529e-03   6.47787005e-04 ...,   1.97067857e-04\n    7.57727772e-04   1.22044235e-04]\n ...,\n [  6.39297068e-05   3.52684036e-03   1.90446153e-03 ...,   1.26184523e-03\n    1.90272927e-04   2.27228180e-03]\n [  8.02040100e-04   5.96046448e-08   4.36128676e-03 ...,   4.40835953e-04\n    4.43402678e-04   2.33084336e-03]\n [  6.29279763e-04   7.04918057e-04   9.35051590e-04 ...,   4.23325598e-03\n    1.49011612e-06   6.29574060e-05]]\nmean :  [[ 1000.03216553]]\nexpected_mean:  [[ 1000.04957838]]\nvariance :  [[ 0.00113162]]\nexpected_var :  [[ 0.0008284]]\n\nwhile on x86:\n squared diff:  [[  4.50760126e-05   8.83489847e-05   2.85837799e-04 ...,   1.29238144e-03\n    1.21885538e-03   2.62856483e-05]\n [  9.50042158e-04   1.97434425e-03   1.37257949e-03 ...,   4.26508486e-05\n    1.04643404e-05   9.57582146e-04]\n [  4.45976853e-04   9.38788056e-04   1.75310671e-03 ...,   9.27601010e-04\n    1.93119049e-03   7.54371285e-04]\n ...,\n [  5.96046448e-04   1.84631348e-03   7.41019845e-04 ...,   3.64962965e-04\n    9.12789255e-04   9.76562500e-04]\n [  2.00155750e-03   2.77642161e-04   2.46230140e-03 ...,   2.09547579e-05\n    1.40441954e-03   1.01508200e-03]\n [  1.72257423e-03   1.02654099e-04   2.00510025e-04 ...,   2.36633793e-03\n    3.11139971e-04   7.19763339e-05]]\nmean :  [[ 1000.04858398]]\nexpected_mean:  [[ 1000.04957838]]\nvariance :  [[ 0.00082939]]\nexpected_var :  [[ 0.0008284]]\n\n</code></pre>\n<p>Do you think this variation can cause precision loss?</p>", "body_text": "@drpngx , @ebrevdo , Thank you for your feedback.\nAfter doing some more analysis, found that the test fails, only for mu = 1e3 here and passes for other cases.\nAfter printing actual and expected mean and variance values, found below for failing case:\nmean :  [[ 1000.03216553]]\nexpected_mean:  [[ 1000.04957838]]\nvariance :  [[ 0.00113162]]\nexpected_var :  [[ 0.0008284]]\n\nSo seems like some issue with variance calculation.\nFurther printed squared_difference as print(\" squared diff: \", math_ops.squared_difference(y, array_ops.stop_gradient(mean)).eval()) and found following:\ns390x:\n squared diff:  [[  9.41790640e-05   6.66562468e-04   1.11056864e-03 ...,   2.74242461e-03\n    2.63482705e-03   1.27498060e-04]\n [  2.23173201e-03   7.84847885e-04   4.25592065e-04 ...,   9.77665186e-05\n    1.73807144e-04   2.11015344e-04]\n [  2.20872462e-05   2.21446529e-03   6.47787005e-04 ...,   1.97067857e-04\n    7.57727772e-04   1.22044235e-04]\n ...,\n [  6.39297068e-05   3.52684036e-03   1.90446153e-03 ...,   1.26184523e-03\n    1.90272927e-04   2.27228180e-03]\n [  8.02040100e-04   5.96046448e-08   4.36128676e-03 ...,   4.40835953e-04\n    4.43402678e-04   2.33084336e-03]\n [  6.29279763e-04   7.04918057e-04   9.35051590e-04 ...,   4.23325598e-03\n    1.49011612e-06   6.29574060e-05]]\nmean :  [[ 1000.03216553]]\nexpected_mean:  [[ 1000.04957838]]\nvariance :  [[ 0.00113162]]\nexpected_var :  [[ 0.0008284]]\n\nwhile on x86:\n squared diff:  [[  4.50760126e-05   8.83489847e-05   2.85837799e-04 ...,   1.29238144e-03\n    1.21885538e-03   2.62856483e-05]\n [  9.50042158e-04   1.97434425e-03   1.37257949e-03 ...,   4.26508486e-05\n    1.04643404e-05   9.57582146e-04]\n [  4.45976853e-04   9.38788056e-04   1.75310671e-03 ...,   9.27601010e-04\n    1.93119049e-03   7.54371285e-04]\n ...,\n [  5.96046448e-04   1.84631348e-03   7.41019845e-04 ...,   3.64962965e-04\n    9.12789255e-04   9.76562500e-04]\n [  2.00155750e-03   2.77642161e-04   2.46230140e-03 ...,   2.09547579e-05\n    1.40441954e-03   1.01508200e-03]\n [  1.72257423e-03   1.02654099e-04   2.00510025e-04 ...,   2.36633793e-03\n    3.11139971e-04   7.19763339e-05]]\nmean :  [[ 1000.04858398]]\nexpected_mean:  [[ 1000.04957838]]\nvariance :  [[ 0.00082939]]\nexpected_var :  [[ 0.0008284]]\n\n\nDo you think this variation can cause precision loss?", "body": "@drpngx , @ebrevdo , Thank you for your feedback.\r\nAfter doing some more analysis, found that the test fails, only for `mu` = `1e3` [here](https://github.com/tensorflow/tensorflow/blob/v1.4.1/tensorflow/python/ops/nn_test.py#L867) and passes for other cases.\r\nAfter printing actual and expected mean and variance values, found below for failing case:\r\n```\r\nmean :  [[ 1000.03216553]]\r\nexpected_mean:  [[ 1000.04957838]]\r\nvariance :  [[ 0.00113162]]\r\nexpected_var :  [[ 0.0008284]]\r\n```\r\nSo seems like some issue with variance calculation.\r\nFurther printed [squared_difference](https://github.com/tensorflow/tensorflow/blob/v1.4.1/tensorflow/python/ops/nn_impl.py#L621) as `print(\" squared diff: \", math_ops.squared_difference(y, array_ops.stop_gradient(mean)).eval())` and found following:\r\n\r\n```\r\ns390x:\r\n squared diff:  [[  9.41790640e-05   6.66562468e-04   1.11056864e-03 ...,   2.74242461e-03\r\n    2.63482705e-03   1.27498060e-04]\r\n [  2.23173201e-03   7.84847885e-04   4.25592065e-04 ...,   9.77665186e-05\r\n    1.73807144e-04   2.11015344e-04]\r\n [  2.20872462e-05   2.21446529e-03   6.47787005e-04 ...,   1.97067857e-04\r\n    7.57727772e-04   1.22044235e-04]\r\n ...,\r\n [  6.39297068e-05   3.52684036e-03   1.90446153e-03 ...,   1.26184523e-03\r\n    1.90272927e-04   2.27228180e-03]\r\n [  8.02040100e-04   5.96046448e-08   4.36128676e-03 ...,   4.40835953e-04\r\n    4.43402678e-04   2.33084336e-03]\r\n [  6.29279763e-04   7.04918057e-04   9.35051590e-04 ...,   4.23325598e-03\r\n    1.49011612e-06   6.29574060e-05]]\r\nmean :  [[ 1000.03216553]]\r\nexpected_mean:  [[ 1000.04957838]]\r\nvariance :  [[ 0.00113162]]\r\nexpected_var :  [[ 0.0008284]]\r\n\r\nwhile on x86:\r\n squared diff:  [[  4.50760126e-05   8.83489847e-05   2.85837799e-04 ...,   1.29238144e-03\r\n    1.21885538e-03   2.62856483e-05]\r\n [  9.50042158e-04   1.97434425e-03   1.37257949e-03 ...,   4.26508486e-05\r\n    1.04643404e-05   9.57582146e-04]\r\n [  4.45976853e-04   9.38788056e-04   1.75310671e-03 ...,   9.27601010e-04\r\n    1.93119049e-03   7.54371285e-04]\r\n ...,\r\n [  5.96046448e-04   1.84631348e-03   7.41019845e-04 ...,   3.64962965e-04\r\n    9.12789255e-04   9.76562500e-04]\r\n [  2.00155750e-03   2.77642161e-04   2.46230140e-03 ...,   2.09547579e-05\r\n    1.40441954e-03   1.01508200e-03]\r\n [  1.72257423e-03   1.02654099e-04   2.00510025e-04 ...,   2.36633793e-03\r\n    3.11139971e-04   7.19763339e-05]]\r\nmean :  [[ 1000.04858398]]\r\nexpected_mean:  [[ 1000.04957838]]\r\nvariance :  [[ 0.00082939]]\r\nexpected_var :  [[ 0.0008284]]\r\n\r\n```\r\n\r\nDo you think this variation can cause precision loss?"}