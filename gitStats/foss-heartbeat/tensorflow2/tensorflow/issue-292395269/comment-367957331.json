{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/367957331", "html_url": "https://github.com/tensorflow/tensorflow/issues/16540#issuecomment-367957331", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16540", "id": 367957331, "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzk1NzMzMQ==", "user": {"login": "namrata-ibm", "id": 21953668, "node_id": "MDQ6VXNlcjIxOTUzNjY4", "avatar_url": "https://avatars3.githubusercontent.com/u/21953668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/namrata-ibm", "html_url": "https://github.com/namrata-ibm", "followers_url": "https://api.github.com/users/namrata-ibm/followers", "following_url": "https://api.github.com/users/namrata-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/namrata-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/namrata-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/namrata-ibm/subscriptions", "organizations_url": "https://api.github.com/users/namrata-ibm/orgs", "repos_url": "https://api.github.com/users/namrata-ibm/repos", "events_url": "https://api.github.com/users/namrata-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/namrata-ibm/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-23T09:33:07Z", "updated_at": "2018-02-23T09:33:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>, it seems like <code>np.random.rand()</code> doesn't allow setting dtype yet, as seen <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.rand.html\" rel=\"nofollow\">here</a>.</p>\n<p>Just tried below diff for looping over dtypes and it works fine:<br>\n<code>//tensorflow/python:nn_test  -------                     PASSED in 22.6s</code>:</p>\n<pre><code>@@ -867,6 +866,7 @@ class MomentsTest(test_lib.TestCase):\n     for mu in [0.0, 1.0, 1e3]:\n       for sigma in [1.0, 0.1]:\n         for keep_dims in [True, False]:\n+         for dtype in [dtypes.float32, dtypes.float64]:\n             input_values = np.random.rand(*input_shape) * sigma + mu\n             expected_mean = np.mean(\n                 input_values, axis=moments_axes, keepdims=keep_dims)\n@@ -875,7 +875,7 @@ class MomentsTest(test_lib.TestCase):\n             with ops.Graph().as_default() as g:\n               with self.test_session(graph=g) as sess:\n                 inputs = constant_op.constant(\n-                  input_values, shape=input_shape, dtype=dtypes.float32)\n+                    input_values, shape=input_shape, dtype=dtype)\n                 mean, variance = nn_impl.moments(\n                     inputs, moments_axes, keep_dims=keep_dims)\n\n@@ -892,8 +892,12 @@ class MomentsTest(test_lib.TestCase):\n               # Make sure that there are no NaNs\n                 self.assertFalse(np.isnan(mean).any())\n                 self.assertFalse(np.isnan(variance).any())\n+               if dtype == 'dtypes.float64':\n                  self.assertAllClose(mean, expected_mean, rtol=tol, atol=tol)\n                   self.assertAllClose(variance, expected_var, rtol=tol, atol=tol)\n+                else:\n+                  self.assertAllClose(mean, expected_mean, rtol=4e-4, atol=4e-4)\n+                  self.assertAllClose(variance, expected_var, rtol=4e-4, atol=4e-4)\n</code></pre>\n<p>What would be the right approach?</p>", "body_text": "@mrry, it seems like np.random.rand() doesn't allow setting dtype yet, as seen here.\nJust tried below diff for looping over dtypes and it works fine:\n//tensorflow/python:nn_test  -------                     PASSED in 22.6s:\n@@ -867,6 +866,7 @@ class MomentsTest(test_lib.TestCase):\n     for mu in [0.0, 1.0, 1e3]:\n       for sigma in [1.0, 0.1]:\n         for keep_dims in [True, False]:\n+         for dtype in [dtypes.float32, dtypes.float64]:\n             input_values = np.random.rand(*input_shape) * sigma + mu\n             expected_mean = np.mean(\n                 input_values, axis=moments_axes, keepdims=keep_dims)\n@@ -875,7 +875,7 @@ class MomentsTest(test_lib.TestCase):\n             with ops.Graph().as_default() as g:\n               with self.test_session(graph=g) as sess:\n                 inputs = constant_op.constant(\n-                  input_values, shape=input_shape, dtype=dtypes.float32)\n+                    input_values, shape=input_shape, dtype=dtype)\n                 mean, variance = nn_impl.moments(\n                     inputs, moments_axes, keep_dims=keep_dims)\n\n@@ -892,8 +892,12 @@ class MomentsTest(test_lib.TestCase):\n               # Make sure that there are no NaNs\n                 self.assertFalse(np.isnan(mean).any())\n                 self.assertFalse(np.isnan(variance).any())\n+               if dtype == 'dtypes.float64':\n                  self.assertAllClose(mean, expected_mean, rtol=tol, atol=tol)\n                   self.assertAllClose(variance, expected_var, rtol=tol, atol=tol)\n+                else:\n+                  self.assertAllClose(mean, expected_mean, rtol=4e-4, atol=4e-4)\n+                  self.assertAllClose(variance, expected_var, rtol=4e-4, atol=4e-4)\n\nWhat would be the right approach?", "body": "@mrry, it seems like `np.random.rand()` doesn't allow setting dtype yet, as seen [here](https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.rand.html). \r\n\r\nJust tried below diff for looping over dtypes and it works fine:\r\n`//tensorflow/python:nn_test  -------                     PASSED in 22.6s`:\r\n```\r\n@@ -867,6 +866,7 @@ class MomentsTest(test_lib.TestCase):\r\n     for mu in [0.0, 1.0, 1e3]:\r\n       for sigma in [1.0, 0.1]:\r\n         for keep_dims in [True, False]:\r\n+         for dtype in [dtypes.float32, dtypes.float64]:\r\n             input_values = np.random.rand(*input_shape) * sigma + mu\r\n             expected_mean = np.mean(\r\n                 input_values, axis=moments_axes, keepdims=keep_dims)\r\n@@ -875,7 +875,7 @@ class MomentsTest(test_lib.TestCase):\r\n             with ops.Graph().as_default() as g:\r\n               with self.test_session(graph=g) as sess:\r\n                 inputs = constant_op.constant(\r\n-                  input_values, shape=input_shape, dtype=dtypes.float32)\r\n+                    input_values, shape=input_shape, dtype=dtype)\r\n                 mean, variance = nn_impl.moments(\r\n                     inputs, moments_axes, keep_dims=keep_dims)\r\n\r\n@@ -892,8 +892,12 @@ class MomentsTest(test_lib.TestCase):\r\n               # Make sure that there are no NaNs\r\n                 self.assertFalse(np.isnan(mean).any())\r\n                 self.assertFalse(np.isnan(variance).any())\r\n+               if dtype == 'dtypes.float64':\r\n                  self.assertAllClose(mean, expected_mean, rtol=tol, atol=tol)\r\n                   self.assertAllClose(variance, expected_var, rtol=tol, atol=tol)\r\n+                else:\r\n+                  self.assertAllClose(mean, expected_mean, rtol=4e-4, atol=4e-4)\r\n+                  self.assertAllClose(variance, expected_var, rtol=4e-4, atol=4e-4)\r\n```\r\nWhat would be the right approach?"}