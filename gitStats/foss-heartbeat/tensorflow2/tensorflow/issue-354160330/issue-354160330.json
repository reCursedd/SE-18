{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21884", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21884/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21884/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21884/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21884", "id": 354160330, "node_id": "MDU6SXNzdWUzNTQxNjAzMzA=", "number": 21884, "title": "Adding regularizer causes crash when using eager w/ make_template", "user": {"login": "gareth-cross", "id": 5404001, "node_id": "MDQ6VXNlcjU0MDQwMDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5404001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gareth-cross", "html_url": "https://github.com/gareth-cross", "followers_url": "https://api.github.com/users/gareth-cross/followers", "following_url": "https://api.github.com/users/gareth-cross/following{/other_user}", "gists_url": "https://api.github.com/users/gareth-cross/gists{/gist_id}", "starred_url": "https://api.github.com/users/gareth-cross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gareth-cross/subscriptions", "organizations_url": "https://api.github.com/users/gareth-cross/orgs", "repos_url": "https://api.github.com/users/gareth-cross/repos", "events_url": "https://api.github.com/users/gareth-cross/events{/privacy}", "received_events_url": "https://api.github.com/users/gareth-cross/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-08-27T02:38:35Z", "updated_at": "2018-11-20T07:55:14Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>Ubuntu 16.04</li>\n<li>Tensorflow installed from binary: v1.9.0.138</li>\n<li>Python 2.7.12</li>\n<li>CUDA: Version 9.0.252</li>\n<li>GPU: GeForce GTX 1080 Ti</li>\n</ul>\n<p>Code to reproduce:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow.contrib.eager <span class=\"pl-k\">as</span> tfe\n<span class=\"pl-k\">import</span> tensorflow.contrib.layers <span class=\"pl-k\">as</span> layers\n\ntf.enable_eager_execution()\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">make_network</span>(<span class=\"pl-smi\">input_images</span>, <span class=\"pl-smi\">include_regularizer</span>):\n    weights_initializer <span class=\"pl-k\">=</span> tf.variance_scaling_initializer(<span class=\"pl-v\">scale</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>.)\n    l2_regularizer <span class=\"pl-k\">=</span> layers.l2_regularizer(<span class=\"pl-v\">scale</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.000004</span>)\n\n    convolution_args <span class=\"pl-k\">=</span> <span class=\"pl-c1\">dict</span>(\n        <span class=\"pl-v\">weights_initializer</span><span class=\"pl-k\">=</span>weights_initializer,\n        <span class=\"pl-v\">biases_initializer</span><span class=\"pl-k\">=</span>tf.zeros_initializer(),\n        <span class=\"pl-v\">activation_fn</span><span class=\"pl-k\">=</span>tf.nn.leaky_relu,\n        <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>), <span class=\"pl-v\">stride</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>,\n        <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>SAME<span class=\"pl-pds\">'</span></span>,\n        <span class=\"pl-v\">weights_regularizer</span><span class=\"pl-k\">=</span>l2_regularizer <span class=\"pl-k\">if</span> include_regularizer <span class=\"pl-k\">else</span> <span class=\"pl-c1\">None</span>,\n    )\n    <span class=\"pl-k\">return</span> layers.conv2d(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>input_images,\n                         <span class=\"pl-v\">num_outputs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>,\n                         <span class=\"pl-v\">scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>my_layer<span class=\"pl-pds\">'</span></span>,\n                         <span class=\"pl-k\">**</span>convolution_args)\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    images <span class=\"pl-k\">=</span> tf.ones([<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">240</span>, <span class=\"pl-c1\">320</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n    the_template <span class=\"pl-k\">=</span> tfe.make_template(\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>custom_network<span class=\"pl-pds\">'</span></span>, make_network,\n        <span class=\"pl-v\">create_graph_function_</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n    )\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> execute the template</span>\n    foo <span class=\"pl-k\">=</span> the_template(images, <span class=\"pl-v\">include_regularizer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)</pre></div>\n<p>The above code fails with <code>UnboundLocalError</code> when <code>include_regularizer=True</code>. Setting <code>include_regularizer=False</code> runs normally. The crash occurs in <code>base.py</code>:</p>\n<pre><code>/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py in add_weight(self, name, shape, dtype, initializer, regularizer, trainable, constraint, use_resource, synchronization, aggregation, partitioner)\n    278         if regularizer:\n    279           if context.executing_eagerly() or _should_add_regularizer(\n--&gt; 280               variable, existing_variables):\n    281             self._handle_weight_regularization(name, variable, regularizer)\n    282 \n\nUnboundLocalError: local variable 'existing_variables' referenced before assignment\n</code></pre>\n<p>Upon closer inspection, it appears <code>context.executing_eagerly()</code> is <code>False</code> here, resulting in the <code>_should_add_regularizer</code> statement being evaluated. Based on a cursory inspection, it seems like <code>existing_variables</code> should be set on line 246 of <code>base.py</code>, but this does not occur because within the scope of <code>ops</code>, <code>executing_eagerly()</code> evaluates to <code>True</code>.</p>\n<p>See <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/09792df012c22622324f085f46edde33006c7355/tensorflow/python/layers/base.py#L236-L250\">tensorflow/tensorflow/python/layers/base.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 236 to 250\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/09792df012c22622324f085f46edde33006c7355\">09792df</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L236\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"236\"></td>\n          <td id=\"LC236\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> context.executing_eagerly(): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L237\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"237\"></td>\n          <td id=\"LC237\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   default_graph <span class=\"pl-k\">=</span> ops.get_default_graph() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L238\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"238\"></td>\n          <td id=\"LC238\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> default_graph.building_function: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L239\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"239\"></td>\n          <td id=\"LC239\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">with</span> ops.init_scope(): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L240\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"240\"></td>\n          <td id=\"LC240\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-c\"><span class=\"pl-c\">#</span> Retrieve the variables from the graph into which variables</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L241\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"241\"></td>\n          <td id=\"LC241\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-c\"><span class=\"pl-c\">#</span> will be lifted; if initialization ops will be lifted into</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L242\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"242\"></td>\n          <td id=\"LC242\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-c\"><span class=\"pl-c\">#</span> the eager context, then there is nothing to retrieve, since variable</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L243\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"243\"></td>\n          <td id=\"LC243\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-c\"><span class=\"pl-c\">#</span> collections are not supported when eager execution is enabled.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L244\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"244\"></td>\n          <td id=\"LC244\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> context.executing_eagerly(): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L245\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"245\"></td>\n          <td id=\"LC245\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         init_graph <span class=\"pl-k\">=</span> ops.get_default_graph() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L246\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"246\"></td>\n          <td id=\"LC246\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         existing_variables <span class=\"pl-k\">=</span> <span class=\"pl-c1\">set</span>(tf_variables.global_variables()) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L247\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"247\"></td>\n          <td id=\"LC247\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">else</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L248\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"248\"></td>\n          <td id=\"LC248\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> Initialization ops will not be lifted out of the default graph.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L249\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"249\"></td>\n          <td id=\"LC249\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     init_graph <span class=\"pl-k\">=</span> default_graph </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L250\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"250\"></td>\n          <td id=\"LC250\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     existing_variables <span class=\"pl-k\">=</span> <span class=\"pl-c1\">set</span>(tf_variables.global_variables()) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>I'm unclear what the expected behavior of this code is - am I doing something wrong or is this a bug?</p>", "body_text": "System information\n\nUbuntu 16.04\nTensorflow installed from binary: v1.9.0.138\nPython 2.7.12\nCUDA: Version 9.0.252\nGPU: GeForce GTX 1080 Ti\n\nCode to reproduce:\nimport tensorflow as tf\nimport tensorflow.contrib.eager as tfe\nimport tensorflow.contrib.layers as layers\n\ntf.enable_eager_execution()\n\ndef make_network(input_images, include_regularizer):\n    weights_initializer = tf.variance_scaling_initializer(scale=1.)\n    l2_regularizer = layers.l2_regularizer(scale=0.000004)\n\n    convolution_args = dict(\n        weights_initializer=weights_initializer,\n        biases_initializer=tf.zeros_initializer(),\n        activation_fn=tf.nn.leaky_relu,\n        kernel_size=(3, 3), stride=1,\n        padding='SAME',\n        weights_regularizer=l2_regularizer if include_regularizer else None,\n    )\n    return layers.conv2d(inputs=input_images,\n                         num_outputs=3,\n                         scope='my_layer',\n                         **convolution_args)\n\nif __name__ == '__main__':\n    images = tf.ones([2, 240, 320, 3], dtype=tf.float32)\n    the_template = tfe.make_template(\n        'custom_network', make_network,\n        create_graph_function_=True,\n    )\n    # execute the template\n    foo = the_template(images, include_regularizer=True)\nThe above code fails with UnboundLocalError when include_regularizer=True. Setting include_regularizer=False runs normally. The crash occurs in base.py:\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py in add_weight(self, name, shape, dtype, initializer, regularizer, trainable, constraint, use_resource, synchronization, aggregation, partitioner)\n    278         if regularizer:\n    279           if context.executing_eagerly() or _should_add_regularizer(\n--> 280               variable, existing_variables):\n    281             self._handle_weight_regularization(name, variable, regularizer)\n    282 \n\nUnboundLocalError: local variable 'existing_variables' referenced before assignment\n\nUpon closer inspection, it appears context.executing_eagerly() is False here, resulting in the _should_add_regularizer statement being evaluated. Based on a cursory inspection, it seems like existing_variables should be set on line 246 of base.py, but this does not occur because within the scope of ops, executing_eagerly() evaluates to True.\nSee \n  \n    \n      tensorflow/tensorflow/python/layers/base.py\n    \n    \n        Lines 236 to 250\n      in\n      09792df\n    \n    \n    \n    \n\n        \n          \n           if not context.executing_eagerly(): \n        \n\n        \n          \n             default_graph = ops.get_default_graph() \n        \n\n        \n          \n             if default_graph.building_function: \n        \n\n        \n          \n               with ops.init_scope(): \n        \n\n        \n          \n                 # Retrieve the variables from the graph into which variables \n        \n\n        \n          \n                 # will be lifted; if initialization ops will be lifted into \n        \n\n        \n          \n                 # the eager context, then there is nothing to retrieve, since variable \n        \n\n        \n          \n                 # collections are not supported when eager execution is enabled. \n        \n\n        \n          \n                 if not context.executing_eagerly(): \n        \n\n        \n          \n                   init_graph = ops.get_default_graph() \n        \n\n        \n          \n                   existing_variables = set(tf_variables.global_variables()) \n        \n\n        \n          \n             else: \n        \n\n        \n          \n               # Initialization ops will not be lifted out of the default graph. \n        \n\n        \n          \n               init_graph = default_graph \n        \n\n        \n          \n               existing_variables = set(tf_variables.global_variables()) \n        \n    \n  \n\n\nI'm unclear what the expected behavior of this code is - am I doing something wrong or is this a bug?", "body": "### System information\r\n- Ubuntu 16.04\r\n- Tensorflow installed from binary: v1.9.0.138\r\n- Python 2.7.12\r\n- CUDA: Version 9.0.252\r\n- GPU: GeForce GTX 1080 Ti\r\n\r\nCode to reproduce:\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow.contrib.eager as tfe\r\nimport tensorflow.contrib.layers as layers\r\n\r\ntf.enable_eager_execution()\r\n\r\ndef make_network(input_images, include_regularizer):\r\n    weights_initializer = tf.variance_scaling_initializer(scale=1.)\r\n    l2_regularizer = layers.l2_regularizer(scale=0.000004)\r\n\r\n    convolution_args = dict(\r\n        weights_initializer=weights_initializer,\r\n        biases_initializer=tf.zeros_initializer(),\r\n        activation_fn=tf.nn.leaky_relu,\r\n        kernel_size=(3, 3), stride=1,\r\n        padding='SAME',\r\n        weights_regularizer=l2_regularizer if include_regularizer else None,\r\n    )\r\n    return layers.conv2d(inputs=input_images,\r\n                         num_outputs=3,\r\n                         scope='my_layer',\r\n                         **convolution_args)\r\n\r\nif __name__ == '__main__':\r\n    images = tf.ones([2, 240, 320, 3], dtype=tf.float32)\r\n    the_template = tfe.make_template(\r\n        'custom_network', make_network,\r\n        create_graph_function_=True,\r\n    )\r\n    # execute the template\r\n    foo = the_template(images, include_regularizer=True)\r\n```\r\n\r\nThe above code fails with `UnboundLocalError` when `include_regularizer=True`. Setting `include_regularizer=False` runs normally. The crash occurs in `base.py`:\r\n\r\n```\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py in add_weight(self, name, shape, dtype, initializer, regularizer, trainable, constraint, use_resource, synchronization, aggregation, partitioner)\r\n    278         if regularizer:\r\n    279           if context.executing_eagerly() or _should_add_regularizer(\r\n--> 280               variable, existing_variables):\r\n    281             self._handle_weight_regularization(name, variable, regularizer)\r\n    282 \r\n\r\nUnboundLocalError: local variable 'existing_variables' referenced before assignment\r\n```\r\n\r\nUpon closer inspection, it appears `context.executing_eagerly()` is `False` here, resulting in the `_should_add_regularizer` statement being evaluated. Based on a cursory inspection, it seems like `existing_variables` should be set on line 246 of `base.py`, but this does not occur because within the scope of `ops`, `executing_eagerly()` evaluates to `True`. \r\n\r\nSee https://github.com/tensorflow/tensorflow/blob/09792df012c22622324f085f46edde33006c7355/tensorflow/python/layers/base.py#L236-L250\r\n\r\nI'm unclear what the expected behavior of this code is - am I doing something wrong or is this a bug?\r\n"}