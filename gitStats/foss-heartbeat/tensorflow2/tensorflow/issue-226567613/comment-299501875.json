{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/299501875", "html_url": "https://github.com/tensorflow/tensorflow/issues/9685#issuecomment-299501875", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9685", "id": 299501875, "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTUwMTg3NQ==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-05T15:49:50Z", "updated_at": "2017-05-05T15:49:50Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Given that attribute names may also generally differ, the only \"principled\" way to do this would be to either automatically generate code for constructing ops (which can be ugly) or manually add functions that create all supported ops. The Python API currently uses a mixed approach. If you can be a little patient, I have been working on a Scala API that does that and adds a lot more of the Python API functionality (e.g., gradients). It's not ready to be released yet, but I will have a usable version soon. It is written Scala though and uses some \"Scala-specific\" features, but it shouldn't be hard to create a Java compatibility layer then.</p>", "body_text": "Given that attribute names may also generally differ, the only \"principled\" way to do this would be to either automatically generate code for constructing ops (which can be ugly) or manually add functions that create all supported ops. The Python API currently uses a mixed approach. If you can be a little patient, I have been working on a Scala API that does that and adds a lot more of the Python API functionality (e.g., gradients). It's not ready to be released yet, but I will have a usable version soon. It is written Scala though and uses some \"Scala-specific\" features, but it shouldn't be hard to create a Java compatibility layer then.", "body": "Given that attribute names may also generally differ, the only \"principled\" way to do this would be to either automatically generate code for constructing ops (which can be ugly) or manually add functions that create all supported ops. The Python API currently uses a mixed approach. If you can be a little patient, I have been working on a Scala API that does that and adds a lot more of the Python API functionality (e.g., gradients). It's not ready to be released yet, but I will have a usable version soon. It is written Scala though and uses some \"Scala-specific\" features, but it shouldn't be hard to create a Java compatibility layer then."}