{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3763", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3763/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3763/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3763/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3763", "id": 170809401, "node_id": "MDU6SXNzdWUxNzA4MDk0MDE=", "number": 3763, "title": "contrib.learn.LinearClassifier steps not working as tutorial instructs", "user": {"login": "fogelton", "id": 1250236, "node_id": "MDQ6VXNlcjEyNTAyMzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1250236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fogelton", "html_url": "https://github.com/fogelton", "followers_url": "https://api.github.com/users/fogelton/followers", "following_url": "https://api.github.com/users/fogelton/following{/other_user}", "gists_url": "https://api.github.com/users/fogelton/gists{/gist_id}", "starred_url": "https://api.github.com/users/fogelton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fogelton/subscriptions", "organizations_url": "https://api.github.com/users/fogelton/orgs", "repos_url": "https://api.github.com/users/fogelton/repos", "events_url": "https://api.github.com/users/fogelton/events{/privacy}", "received_events_url": "https://api.github.com/users/fogelton/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-12T06:49:33Z", "updated_at": "2017-01-24T21:59:05Z", "closed_at": "2017-01-24T21:59:05Z", "author_association": "NONE", "body_html": "<p>In tutorial it is written</p>\n<p>classifier.fit(x=x_train, y=y_train, steps=200)<br>\nThe state of the model is preserved in the classifier, which means you can train iteratively if you like. For example, the above is equivalent to the following:<br>\nclassifier.fit(x=x_train, y=y_train, steps=100)<br>\nclassifier.fit(x=x_train, y=y_train, steps=100)</p>\n<p>But whne I try on my own, the same step parameter and evaluate the model, the results are all the time the same, only when I increase the parameter, the accuracy changes. Based on the behavior I believe the steps are rememebered and only new steps are fitted/performed.<br>\nSo the equivalent is<br>\nclassifier.fit(x=x_train, y=y_train, steps=100)<br>\nclassifier.fit(x=x_train, y=y_train, steps=200)</p>\n<p>Can anybody check this?</p>", "body_text": "In tutorial it is written\nclassifier.fit(x=x_train, y=y_train, steps=200)\nThe state of the model is preserved in the classifier, which means you can train iteratively if you like. For example, the above is equivalent to the following:\nclassifier.fit(x=x_train, y=y_train, steps=100)\nclassifier.fit(x=x_train, y=y_train, steps=100)\nBut whne I try on my own, the same step parameter and evaluate the model, the results are all the time the same, only when I increase the parameter, the accuracy changes. Based on the behavior I believe the steps are rememebered and only new steps are fitted/performed.\nSo the equivalent is\nclassifier.fit(x=x_train, y=y_train, steps=100)\nclassifier.fit(x=x_train, y=y_train, steps=200)\nCan anybody check this?", "body": "In tutorial it is written\n\nclassifier.fit(x=x_train, y=y_train, steps=200)\nThe state of the model is preserved in the classifier, which means you can train iteratively if you like. For example, the above is equivalent to the following:\nclassifier.fit(x=x_train, y=y_train, steps=100)\nclassifier.fit(x=x_train, y=y_train, steps=100)\n\nBut whne I try on my own, the same step parameter and evaluate the model, the results are all the time the same, only when I increase the parameter, the accuracy changes. Based on the behavior I believe the steps are rememebered and only new steps are fitted/performed.\nSo the equivalent is\nclassifier.fit(x=x_train, y=y_train, steps=100)\nclassifier.fit(x=x_train, y=y_train, steps=200)\n\nCan anybody check this?\n"}