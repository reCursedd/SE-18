{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/435651016", "html_url": "https://github.com/tensorflow/tensorflow/issues/23179#issuecomment-435651016", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23179", "id": 435651016, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTY1MTAxNg==", "user": {"login": "delock", "id": 19373651, "node_id": "MDQ6VXNlcjE5MzczNjUx", "avatar_url": "https://avatars2.githubusercontent.com/u/19373651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/delock", "html_url": "https://github.com/delock", "followers_url": "https://api.github.com/users/delock/followers", "following_url": "https://api.github.com/users/delock/following{/other_user}", "gists_url": "https://api.github.com/users/delock/gists{/gist_id}", "starred_url": "https://api.github.com/users/delock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/delock/subscriptions", "organizations_url": "https://api.github.com/users/delock/orgs", "repos_url": "https://api.github.com/users/delock/repos", "events_url": "https://api.github.com/users/delock/events{/privacy}", "received_events_url": "https://api.github.com/users/delock/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-04T09:22:13Z", "updated_at": "2018-11-04T09:22:13Z", "author_association": "NONE", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1072079\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jsimsa\">@jsimsa</a> , thanks for the suggestion.  I'm thinking this option over.  Technically it is possible, and with this the model code does not need to be changed.  There is but one doubt that might need clarification.  The use of <code>FilterDataset</code> for this purpose is little bit strange.  From the design of <code>FilterDataset</code>, it is designed to pick out the data according to whether its value meet predicate.   The use of random_uniform in this case, however, is independent of its value.   It seems a strange way of exploit the semantic of <code>FilterDataset</code> in lack of a <code>SamplingDataset</code>.  If we look at <code>TakeDataset</code> and <code>SkipDataset</code>, they all can be implemented by <code>FilterDataset</code> with proper lambda function.  However they are separate API rather than lambda function with proper optimization.</p>\n<p>If say we implement the optimization and make it convert to an internal <code>SamplingDataset</code> automatically, is it align with the intent use of this API?  In another word, if we submit a PR for an optimization rather than a new API, will it be considered?</p>", "body_text": "Hi @jsimsa , thanks for the suggestion.  I'm thinking this option over.  Technically it is possible, and with this the model code does not need to be changed.  There is but one doubt that might need clarification.  The use of FilterDataset for this purpose is little bit strange.  From the design of FilterDataset, it is designed to pick out the data according to whether its value meet predicate.   The use of random_uniform in this case, however, is independent of its value.   It seems a strange way of exploit the semantic of FilterDataset in lack of a SamplingDataset.  If we look at TakeDataset and SkipDataset, they all can be implemented by FilterDataset with proper lambda function.  However they are separate API rather than lambda function with proper optimization.\nIf say we implement the optimization and make it convert to an internal SamplingDataset automatically, is it align with the intent use of this API?  In another word, if we submit a PR for an optimization rather than a new API, will it be considered?", "body": "Hi @jsimsa , thanks for the suggestion.  I'm thinking this option over.  Technically it is possible, and with this the model code does not need to be changed.  There is but one doubt that might need clarification.  The use of `FilterDataset` for this purpose is little bit strange.  From the design of `FilterDataset`, it is designed to pick out the data according to whether its value meet predicate.   The use of random_uniform in this case, however, is independent of its value.   It seems a strange way of exploit the semantic of `FilterDataset` in lack of a `SamplingDataset`.  If we look at `TakeDataset` and `SkipDataset`, they all can be implemented by `FilterDataset` with proper lambda function.  However they are separate API rather than lambda function with proper optimization.\r\n\r\nIf say we implement the optimization and make it convert to an internal `SamplingDataset` automatically, is it align with the intent use of this API?  In another word, if we submit a PR for an optimization rather than a new API, will it be considered?"}