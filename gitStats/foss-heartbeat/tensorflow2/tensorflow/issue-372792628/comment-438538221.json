{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/438538221", "html_url": "https://github.com/tensorflow/tensorflow/issues/23179#issuecomment-438538221", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23179", "id": 438538221, "node_id": "MDEyOklzc3VlQ29tbWVudDQzODUzODIyMQ==", "user": {"login": "delock", "id": 19373651, "node_id": "MDQ6VXNlcjE5MzczNjUx", "avatar_url": "https://avatars2.githubusercontent.com/u/19373651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/delock", "html_url": "https://github.com/delock", "followers_url": "https://api.github.com/users/delock/followers", "following_url": "https://api.github.com/users/delock/following{/other_user}", "gists_url": "https://api.github.com/users/delock/gists{/gist_id}", "starred_url": "https://api.github.com/users/delock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/delock/subscriptions", "organizations_url": "https://api.github.com/users/delock/orgs", "repos_url": "https://api.github.com/users/delock/repos", "events_url": "https://api.github.com/users/delock/events{/privacy}", "received_events_url": "https://api.github.com/users/delock/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-14T05:01:11Z", "updated_at": "2018-11-14T05:01:11Z", "author_association": "NONE", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1072079\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jsimsa\">@jsimsa</a><br>\nI'm optimizing the pattern as you suggested.  However I met one problem. The <code>tf.random_uniform</code> op itself is stateful, which will be blocked by <code>tensorflow/core/framework/dataset.cc:AddFunction</code>.</p>\n<p>It is tricky here, from definition in TensorFlow, random_uniform is stateful because two call with same input will generate different output, which is the nature of <em>random</em>.   The pseudo random number generator also requires a internal state to generate random number sequence.  On the other hand, if <code>random_uniform</code> is implemented to imitate true random number generator, each time we call <code>random_uniform</code>, we expect the output to be independent to previous outputs, make it actually stateless in another sense.  The final result is in practice this pattern cannot be statically optimized, but in spirit, this pattern should be able to be statically optimized (replaced by a <code>SamplingDataset</code>).</p>\n<p>What's your suggestion here?  It looks like either we need to remove some restriction on optimization in TensorFlow, or we have to introduce new API for same performance purpose.</p>", "body_text": "Hi @jsimsa\nI'm optimizing the pattern as you suggested.  However I met one problem. The tf.random_uniform op itself is stateful, which will be blocked by tensorflow/core/framework/dataset.cc:AddFunction.\nIt is tricky here, from definition in TensorFlow, random_uniform is stateful because two call with same input will generate different output, which is the nature of random.   The pseudo random number generator also requires a internal state to generate random number sequence.  On the other hand, if random_uniform is implemented to imitate true random number generator, each time we call random_uniform, we expect the output to be independent to previous outputs, make it actually stateless in another sense.  The final result is in practice this pattern cannot be statically optimized, but in spirit, this pattern should be able to be statically optimized (replaced by a SamplingDataset).\nWhat's your suggestion here?  It looks like either we need to remove some restriction on optimization in TensorFlow, or we have to introduce new API for same performance purpose.", "body": "Hi @jsimsa \r\nI'm optimizing the pattern as you suggested.  However I met one problem. The `tf.random_uniform` op itself is stateful, which will be blocked by `tensorflow/core/framework/dataset.cc:AddFunction`.\r\n\r\nIt is tricky here, from definition in TensorFlow, random_uniform is stateful because two call with same input will generate different output, which is the nature of _random_.   The pseudo random number generator also requires a internal state to generate random number sequence.  On the other hand, if `random_uniform` is implemented to imitate true random number generator, each time we call `random_uniform`, we expect the output to be independent to previous outputs, make it actually stateless in another sense.  The final result is in practice this pattern cannot be statically optimized, but in spirit, this pattern should be able to be statically optimized (replaced by a `SamplingDataset`).\r\n\r\nWhat's your suggestion here?  It looks like either we need to remove some restriction on optimization in TensorFlow, or we have to introduce new API for same performance purpose."}