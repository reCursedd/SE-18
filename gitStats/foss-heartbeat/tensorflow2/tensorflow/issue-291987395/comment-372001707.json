{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/372001707", "html_url": "https://github.com/tensorflow/tensorflow/issues/16465#issuecomment-372001707", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16465", "id": 372001707, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjAwMTcwNw==", "user": {"login": "nuchi", "id": 16771734, "node_id": "MDQ6VXNlcjE2NzcxNzM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16771734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nuchi", "html_url": "https://github.com/nuchi", "followers_url": "https://api.github.com/users/nuchi/followers", "following_url": "https://api.github.com/users/nuchi/following{/other_user}", "gists_url": "https://api.github.com/users/nuchi/gists{/gist_id}", "starred_url": "https://api.github.com/users/nuchi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nuchi/subscriptions", "organizations_url": "https://api.github.com/users/nuchi/orgs", "repos_url": "https://api.github.com/users/nuchi/repos", "events_url": "https://api.github.com/users/nuchi/events{/privacy}", "received_events_url": "https://api.github.com/users/nuchi/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-10T04:27:26Z", "updated_at": "2018-03-10T04:27:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For anyone else still having problems even when manually passing in the inverse window function to <code>inverse_stft</code>:</p>\n<p>I still had problems reconstructing the original signal, but I managed to fix the issue by manually zero-padding the signal by <code>frame_length - frame_step</code> on both sides. After taking the inverse transform, the zero-padded signal is reconstructed perfectly.</p>\n<pre><code>&gt;&gt;&gt; signal = tf.constant(0.5 * np.sin(np.linspace(0., 440*2*np.pi, 16000)), dtype=tf.float32)\n&gt;&gt;&gt; frame_length = 400\n&gt;&gt;&gt; frame_step = 100\n&gt;&gt;&gt; fft_length = 512\n&gt;&gt;&gt; pad = frame_length - frame_step\n&gt;&gt;&gt; stft = tf.contrib.signal.stft(tf.pad(signal, [[pad, pad]]), frame_length, frame_step, fft_length)\n&gt;&gt;&gt; reconstructed = tf.contrib.signal.inverse_stft(\n...   stft, frame_length, frame_step, fft_length, window_fn=tf.contrib.signal.inverse_stft_window_fn(frame_step))\n&gt;&gt;&gt; error = (reconstructed[pad:-pad] - signal).eval()\n&gt;&gt;&gt; np.max(np.abs(error))\n2.0861626e-06\n</code></pre>", "body_text": "For anyone else still having problems even when manually passing in the inverse window function to inverse_stft:\nI still had problems reconstructing the original signal, but I managed to fix the issue by manually zero-padding the signal by frame_length - frame_step on both sides. After taking the inverse transform, the zero-padded signal is reconstructed perfectly.\n>>> signal = tf.constant(0.5 * np.sin(np.linspace(0., 440*2*np.pi, 16000)), dtype=tf.float32)\n>>> frame_length = 400\n>>> frame_step = 100\n>>> fft_length = 512\n>>> pad = frame_length - frame_step\n>>> stft = tf.contrib.signal.stft(tf.pad(signal, [[pad, pad]]), frame_length, frame_step, fft_length)\n>>> reconstructed = tf.contrib.signal.inverse_stft(\n...   stft, frame_length, frame_step, fft_length, window_fn=tf.contrib.signal.inverse_stft_window_fn(frame_step))\n>>> error = (reconstructed[pad:-pad] - signal).eval()\n>>> np.max(np.abs(error))\n2.0861626e-06", "body": "For anyone else still having problems even when manually passing in the inverse window function to `inverse_stft`:\r\n\r\nI still had problems reconstructing the original signal, but I managed to fix the issue by manually zero-padding the signal by `frame_length - frame_step` on both sides. After taking the inverse transform, the zero-padded signal is reconstructed perfectly.\r\n```\r\n>>> signal = tf.constant(0.5 * np.sin(np.linspace(0., 440*2*np.pi, 16000)), dtype=tf.float32)\r\n>>> frame_length = 400\r\n>>> frame_step = 100\r\n>>> fft_length = 512\r\n>>> pad = frame_length - frame_step\r\n>>> stft = tf.contrib.signal.stft(tf.pad(signal, [[pad, pad]]), frame_length, frame_step, fft_length)\r\n>>> reconstructed = tf.contrib.signal.inverse_stft(\r\n...   stft, frame_length, frame_step, fft_length, window_fn=tf.contrib.signal.inverse_stft_window_fn(frame_step))\r\n>>> error = (reconstructed[pad:-pad] - signal).eval()\r\n>>> np.max(np.abs(error))\r\n2.0861626e-06\r\n```\r\n"}