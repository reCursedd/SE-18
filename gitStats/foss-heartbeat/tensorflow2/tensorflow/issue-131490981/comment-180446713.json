{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/180446713", "html_url": "https://github.com/tensorflow/tensorflow/issues/999#issuecomment-180446713", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/999", "id": 180446713, "node_id": "MDEyOklzc3VlQ29tbWVudDE4MDQ0NjcxMw==", "user": {"login": "cesarsalgado", "id": 1115209, "node_id": "MDQ6VXNlcjExMTUyMDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1115209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarsalgado", "html_url": "https://github.com/cesarsalgado", "followers_url": "https://api.github.com/users/cesarsalgado/followers", "following_url": "https://api.github.com/users/cesarsalgado/following{/other_user}", "gists_url": "https://api.github.com/users/cesarsalgado/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarsalgado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarsalgado/subscriptions", "organizations_url": "https://api.github.com/users/cesarsalgado/orgs", "repos_url": "https://api.github.com/users/cesarsalgado/repos", "events_url": "https://api.github.com/users/cesarsalgado/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarsalgado/received_events", "type": "User", "site_admin": false}, "created_at": "2016-02-05T17:12:43Z", "updated_at": "2016-02-05T17:12:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>One way to prevent that from happening would be to add keep_dims=True to reduce_sum in line 539 of tensorflow/python/ops/nn.py:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">539</span>: mean <span class=\"pl-k\">=</span> math_ops.mul(math_ops.reduce_sum(x, axes, <span class=\"pl-v\">keep_dims</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>), divisor, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mean<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p>Then we would also need to squeeze the dimensions when returning the mean:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">546</span>: <span class=\"pl-k\">return</span> tf.squeeze(mean), var</pre></div>\n<p>As a side note: it would be nice to add keep_dims to nn.moments arguments. We would then also need to add keep_dims=keep_dims to math_ops.reduce_sum in line 544:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">544</span>: var <span class=\"pl-k\">=</span> math_ops.mul(math_ops.reduce_sum(math_ops.square(x_centered), axes, <span class=\"pl-v\">keep_dims</span><span class=\"pl-k\">=</span>keep_dims),\n                        divisor, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>variance<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p>and we would need to squeeze the returned mean depending on whether the keep_dims argument passed to nn.moments is true or false.</p>\n<p>Thoughts?</p>", "body_text": "One way to prevent that from happening would be to add keep_dims=True to reduce_sum in line 539 of tensorflow/python/ops/nn.py:\n539: mean = math_ops.mul(math_ops.reduce_sum(x, axes, keep_dims=True), divisor, name=\"mean\")\nThen we would also need to squeeze the dimensions when returning the mean:\n546: return tf.squeeze(mean), var\nAs a side note: it would be nice to add keep_dims to nn.moments arguments. We would then also need to add keep_dims=keep_dims to math_ops.reduce_sum in line 544:\n544: var = math_ops.mul(math_ops.reduce_sum(math_ops.square(x_centered), axes, keep_dims=keep_dims),\n                        divisor, name=\"variance\")\nand we would need to squeeze the returned mean depending on whether the keep_dims argument passed to nn.moments is true or false.\nThoughts?", "body": "One way to prevent that from happening would be to add keep_dims=True to reduce_sum in line 539 of tensorflow/python/ops/nn.py:\n\n``` python\n539: mean = math_ops.mul(math_ops.reduce_sum(x, axes, keep_dims=True), divisor, name=\"mean\")\n```\n\nThen we would also need to squeeze the dimensions when returning the mean:\n\n``` python\n546: return tf.squeeze(mean), var\n```\n\nAs a side note: it would be nice to add keep_dims to nn.moments arguments. We would then also need to add keep_dims=keep_dims to math_ops.reduce_sum in line 544:\n\n``` python\n544: var = math_ops.mul(math_ops.reduce_sum(math_ops.square(x_centered), axes, keep_dims=keep_dims),\n                        divisor, name=\"variance\")\n```\n\nand we would need to squeeze the returned mean depending on whether the keep_dims argument passed to nn.moments is true or false.\n\nThoughts?\n"}