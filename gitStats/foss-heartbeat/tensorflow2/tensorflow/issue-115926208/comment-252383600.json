{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/252383600", "html_url": "https://github.com/tensorflow/tensorflow/issues/18#issuecomment-252383600", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18", "id": 252383600, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjM4MzYwMA==", "user": {"login": "BrainSlugs83", "id": 5217366, "node_id": "MDQ6VXNlcjUyMTczNjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/5217366?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BrainSlugs83", "html_url": "https://github.com/BrainSlugs83", "followers_url": "https://api.github.com/users/BrainSlugs83/followers", "following_url": "https://api.github.com/users/BrainSlugs83/following{/other_user}", "gists_url": "https://api.github.com/users/BrainSlugs83/gists{/gist_id}", "starred_url": "https://api.github.com/users/BrainSlugs83/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BrainSlugs83/subscriptions", "organizations_url": "https://api.github.com/users/BrainSlugs83/orgs", "repos_url": "https://api.github.com/users/BrainSlugs83/repos", "events_url": "https://api.github.com/users/BrainSlugs83/events{/privacy}", "received_events_url": "https://api.github.com/users/BrainSlugs83/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-07T23:25:30Z", "updated_at": "2016-10-08T00:28:18Z", "author_association": "NONE", "body_html": "<p>Some general porting advice / FYIs regarding C# -- (I've seen some clumsily ported libraries in the past, and they were super awkward to work with, I would hate to see something like that happen to a cool library like TensorFlow!)</p>\n<p>C# and .NET have built-in support for a lot of the simple stuff (high speed math, SIMD instructions using the built-in vectors and matrices structs, etc.), so there's not as much of a need to shell out to another process to do regular math.</p>\n<p>Also, it has built-in operator overloading (so no need for a \"mul(x, y)\"-like function, etc.  because you can just overload the multiplication operator).  [It also has actual properties, and you can overload the indexer operator, so no need to ever write \"get\" or \"set\" functions directly; and strong typed enums, so no need for random strings or constants to ever be passed around.]</p>\n<p>Additionally there's already some patterns in C# for building a \"graph\" of operations and deferring their execution to be done later, or even on other hardware (i.e. LINQ can work this way with IEnumerable, but especially with IQueryable where an expression tree can be built and translated or passed on to another machine for execution, etc. -- also the CSOM pattern -- even though it's meant to solve a different problem -- might translate well here -- because the pattern let's you build up multiple queries and then execute them all at once).</p>\n<p>If session has any resources that need to be cleaned up when it's done or if it needs to be \"stopped\" or something, consider making it IDisposable (then we can just wrap it in a using block, etc.) -- IDisposable can also be used to introduce dynamically definable scope (i.e. because it works well with using blocks).</p>\n<p>Also worth mentioning (as I'm looking through the porting document right now, and this isn't a super well known feature): code generation is built into the .NET platform using T4 templates (.tt files).  You can run any kind of C# code there (access a database, read a file, do P/Invoke, etc.) to output a .cs file at compile time.</p>\n<p>It would be super cool to be able to build a TensorFlow statement in C# using LINQ and have it execute on the GPU.</p>\n<p><em>[Nothing here is meant to be patronizing, (hopefully none of it was!), this is just meant as some tips from a C# power-user that I hope will be of use to someone.]</em></p>", "body_text": "Some general porting advice / FYIs regarding C# -- (I've seen some clumsily ported libraries in the past, and they were super awkward to work with, I would hate to see something like that happen to a cool library like TensorFlow!)\nC# and .NET have built-in support for a lot of the simple stuff (high speed math, SIMD instructions using the built-in vectors and matrices structs, etc.), so there's not as much of a need to shell out to another process to do regular math.\nAlso, it has built-in operator overloading (so no need for a \"mul(x, y)\"-like function, etc.  because you can just overload the multiplication operator).  [It also has actual properties, and you can overload the indexer operator, so no need to ever write \"get\" or \"set\" functions directly; and strong typed enums, so no need for random strings or constants to ever be passed around.]\nAdditionally there's already some patterns in C# for building a \"graph\" of operations and deferring their execution to be done later, or even on other hardware (i.e. LINQ can work this way with IEnumerable, but especially with IQueryable where an expression tree can be built and translated or passed on to another machine for execution, etc. -- also the CSOM pattern -- even though it's meant to solve a different problem -- might translate well here -- because the pattern let's you build up multiple queries and then execute them all at once).\nIf session has any resources that need to be cleaned up when it's done or if it needs to be \"stopped\" or something, consider making it IDisposable (then we can just wrap it in a using block, etc.) -- IDisposable can also be used to introduce dynamically definable scope (i.e. because it works well with using blocks).\nAlso worth mentioning (as I'm looking through the porting document right now, and this isn't a super well known feature): code generation is built into the .NET platform using T4 templates (.tt files).  You can run any kind of C# code there (access a database, read a file, do P/Invoke, etc.) to output a .cs file at compile time.\nIt would be super cool to be able to build a TensorFlow statement in C# using LINQ and have it execute on the GPU.\n[Nothing here is meant to be patronizing, (hopefully none of it was!), this is just meant as some tips from a C# power-user that I hope will be of use to someone.]", "body": "Some general porting advice / FYIs regarding C# -- (I've seen some clumsily ported libraries in the past, and they were super awkward to work with, I would hate to see something like that happen to a cool library like TensorFlow!)\n\nC# and .NET have built-in support for a lot of the simple stuff (high speed math, SIMD instructions using the built-in vectors and matrices structs, etc.), so there's not as much of a need to shell out to another process to do regular math.\n\nAlso, it has built-in operator overloading (so no need for a \"mul(x, y)\"-like function, etc.  because you can just overload the multiplication operator).  [It also has actual properties, and you can overload the indexer operator, so no need to ever write \"get\" or \"set\" functions directly; and strong typed enums, so no need for random strings or constants to ever be passed around.]\n\nAdditionally there's already some patterns in C# for building a \"graph\" of operations and deferring their execution to be done later, or even on other hardware (i.e. LINQ can work this way with IEnumerable, but especially with IQueryable where an expression tree can be built and translated or passed on to another machine for execution, etc. -- also the CSOM pattern -- even though it's meant to solve a different problem -- might translate well here -- because the pattern let's you build up multiple queries and then execute them all at once).\n\nIf session has any resources that need to be cleaned up when it's done or if it needs to be \"stopped\" or something, consider making it IDisposable (then we can just wrap it in a using block, etc.) -- IDisposable can also be used to introduce dynamically definable scope (i.e. because it works well with using blocks).\n\nAlso worth mentioning (as I'm looking through the porting document right now, and this isn't a super well known feature): code generation is built into the .NET platform using T4 templates (.tt files).  You can run any kind of C# code there (access a database, read a file, do P/Invoke, etc.) to output a .cs file at compile time.\n\nIt would be super cool to be able to build a TensorFlow statement in C# using LINQ and have it execute on the GPU.\n\n_[Nothing here is meant to be patronizing, (hopefully none of it was!), this is just meant as some tips from a C# power-user that I hope will be of use to someone.]_\n"}