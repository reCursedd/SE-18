{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/257611075", "html_url": "https://github.com/tensorflow/tensorflow/issues/18#issuecomment-257611075", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18", "id": 257611075, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzYxMTA3NQ==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-01T16:16:22Z", "updated_at": "2016-11-01T16:16:22Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8244633\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/JimSEOW\">@JimSEOW</a></p>\n<ul>\n<li>There is no intention to abandon the C++ API. The C++ API is fully supported and in fact is what <a href=\"https://tensorflow.github.io/serving/\" rel=\"nofollow\">TensorFlow Serving</a> is built on. As a general rule, if it is documented on the TensorFlow website, it is supported :).</li>\n<li>That said, the C API was designed with the intent of it being used to build other language bindings (see <a href=\"https://www.tensorflow.org/versions/r0.11/how_tos/language_bindings/index.html\" rel=\"nofollow\">howto</a>) and that is what other language bindings such as <a href=\"https://godoc.org/github.com/tensorflow/tensorflow/tensorflow/go\" rel=\"nofollow\">Go</a>, <a href=\"https://github.com/tensorflow/rust\">Rust</a>, <a href=\"https://github.com/somaticio/tensorflow.rb\">Ruby</a> and others are built on (most of which are built and maintained by the community, not the TensorFlow team). Specifically, the C API should be appropriate for use with <a href=\"https://en.wikipedia.org/wiki/Foreign_function_interface\" rel=\"nofollow\">FFI</a> support that languages typically provide (e.g, <a href=\"https://en.wikipedia.org/wiki/Java_Native_Interface\" rel=\"nofollow\">JNI</a>, <a href=\"https://golang.org/cmd/cgo/\" rel=\"nofollow\">cgo</a>, <a href=\"http://luajit.org/ext_ffi.html\" rel=\"nofollow\">LuaJITs FFI</a> etc.).</li>\n</ul>\n<p>I am perhaps not fully grasping your concern here. Are you looking for a recommendation as to whether (1) using something like <a href=\"https://msdn.microsoft.com/en-us/library/aa446536.aspx\" rel=\"nofollow\">P/Invoke</a> to wrap over the C API, or (2) cppsharp over the C API, or (3) cppsharp over the C++ API or (4) SWIG over the C API is preferable?</p>\n<p>I don't believe we have enough expertise in the .NET framework within the TensorFlow maintainers to make an informed recommendation, and we sincerely welcome any community contributions towards this. My gut instinct would say that it would be preferable to wrap over the small API surface of the C API using whatever <a href=\"https://en.wikipedia.org/wiki/Foreign_function_interface\" rel=\"nofollow\">FFI</a> support is canonical in .NET and use that as a basis to provide an idiomatic C# library. As opposed to depending on other frameworks or \"transliterating\" everything in C++ API which may result in non-idiomatic APIs in the language. Though again, I say this without enough expertise in .NET or C# specifically.</p>", "body_text": "@JimSEOW\n\nThere is no intention to abandon the C++ API. The C++ API is fully supported and in fact is what TensorFlow Serving is built on. As a general rule, if it is documented on the TensorFlow website, it is supported :).\nThat said, the C API was designed with the intent of it being used to build other language bindings (see howto) and that is what other language bindings such as Go, Rust, Ruby and others are built on (most of which are built and maintained by the community, not the TensorFlow team). Specifically, the C API should be appropriate for use with FFI support that languages typically provide (e.g, JNI, cgo, LuaJITs FFI etc.).\n\nI am perhaps not fully grasping your concern here. Are you looking for a recommendation as to whether (1) using something like P/Invoke to wrap over the C API, or (2) cppsharp over the C API, or (3) cppsharp over the C++ API or (4) SWIG over the C API is preferable?\nI don't believe we have enough expertise in the .NET framework within the TensorFlow maintainers to make an informed recommendation, and we sincerely welcome any community contributions towards this. My gut instinct would say that it would be preferable to wrap over the small API surface of the C API using whatever FFI support is canonical in .NET and use that as a basis to provide an idiomatic C# library. As opposed to depending on other frameworks or \"transliterating\" everything in C++ API which may result in non-idiomatic APIs in the language. Though again, I say this without enough expertise in .NET or C# specifically.", "body": "@JimSEOW \n- There is no intention to abandon the C++ API. The C++ API is fully supported and in fact is what [TensorFlow Serving](https://tensorflow.github.io/serving/) is built on. As a general rule, if it is documented on the TensorFlow website, it is supported :).\n- That said, the C API was designed with the intent of it being used to build other language bindings (see [howto](https://www.tensorflow.org/versions/r0.11/how_tos/language_bindings/index.html)) and that is what other language bindings such as [Go](https://godoc.org/github.com/tensorflow/tensorflow/tensorflow/go), [Rust](https://github.com/tensorflow/rust), [Ruby](https://github.com/somaticio/tensorflow.rb) and others are built on (most of which are built and maintained by the community, not the TensorFlow team). Specifically, the C API should be appropriate for use with [FFI](https://en.wikipedia.org/wiki/Foreign_function_interface) support that languages typically provide (e.g, [JNI](https://en.wikipedia.org/wiki/Java_Native_Interface), [cgo](https://golang.org/cmd/cgo/), [LuaJITs FFI](http://luajit.org/ext_ffi.html) etc.).\n\nI am perhaps not fully grasping your concern here. Are you looking for a recommendation as to whether (1) using something like [P/Invoke](https://msdn.microsoft.com/en-us/library/aa446536.aspx) to wrap over the C API, or (2) cppsharp over the C API, or (3) cppsharp over the C++ API or (4) SWIG over the C API is preferable?\n\nI don't believe we have enough expertise in the .NET framework within the TensorFlow maintainers to make an informed recommendation, and we sincerely welcome any community contributions towards this. My gut instinct would say that it would be preferable to wrap over the small API surface of the C API using whatever [FFI](https://en.wikipedia.org/wiki/Foreign_function_interface) support is canonical in .NET and use that as a basis to provide an idiomatic C# library. As opposed to depending on other frameworks or \"transliterating\" everything in C++ API which may result in non-idiomatic APIs in the language. Though again, I say this without enough expertise in .NET or C# specifically.\n"}