{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/257652602", "html_url": "https://github.com/tensorflow/tensorflow/issues/18#issuecomment-257652602", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18", "id": 257652602, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzY1MjYwMg==", "user": {"login": "tritao", "id": 602268, "node_id": "MDQ6VXNlcjYwMjI2OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/602268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tritao", "html_url": "https://github.com/tritao", "followers_url": "https://api.github.com/users/tritao/followers", "following_url": "https://api.github.com/users/tritao/following{/other_user}", "gists_url": "https://api.github.com/users/tritao/gists{/gist_id}", "starred_url": "https://api.github.com/users/tritao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tritao/subscriptions", "organizations_url": "https://api.github.com/users/tritao/orgs", "repos_url": "https://api.github.com/users/tritao/repos", "events_url": "https://api.github.com/users/tritao/events{/privacy}", "received_events_url": "https://api.github.com/users/tritao/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-01T18:30:31Z", "updated_at": "2016-11-01T18:44:37Z", "author_association": "NONE", "body_html": "<p>Hey guys, dev from CppSharp here, just been made aware of this discussion. Just some clarifications.</p>\n<p>If you want to bind a library with a generator like CppSharp, it's usually best to start with a C++ API from the start since that will lead to a more idiomatic generated API.</p>\n<p>We can also generate bindings for the C API, but you will usually need to develop an higher-level C# API on top of the generated bindings to have a more idiomatic C# object-oriented API.</p>\n<p>The only exception to this is when the original C++ public interface is complex / not very \"clean\" (boost, lots of templates) and then the auto-generated API might not be very clean and starting from the C API might be preferable.</p>\n<p>If you do end up going with CppSharp we'll do our best to support the project and fix any CppSharp bugs found along the way.</p>", "body_text": "Hey guys, dev from CppSharp here, just been made aware of this discussion. Just some clarifications.\nIf you want to bind a library with a generator like CppSharp, it's usually best to start with a C++ API from the start since that will lead to a more idiomatic generated API.\nWe can also generate bindings for the C API, but you will usually need to develop an higher-level C# API on top of the generated bindings to have a more idiomatic C# object-oriented API.\nThe only exception to this is when the original C++ public interface is complex / not very \"clean\" (boost, lots of templates) and then the auto-generated API might not be very clean and starting from the C API might be preferable.\nIf you do end up going with CppSharp we'll do our best to support the project and fix any CppSharp bugs found along the way.", "body": "Hey guys, dev from CppSharp here, just been made aware of this discussion. Just some clarifications.\n\nIf you want to bind a library with a generator like CppSharp, it's usually best to start with a C++ API from the start since that will lead to a more idiomatic generated API.\n\nWe can also generate bindings for the C API, but you will usually need to develop an higher-level C# API on top of the generated bindings to have a more idiomatic C# object-oriented API.\n\nThe only exception to this is when the original C++ public interface is complex / not very \"clean\" (boost, lots of templates) and then the auto-generated API might not be very clean and starting from the C API might be preferable.\n\nIf you do end up going with CppSharp we'll do our best to support the project and fix any CppSharp bugs found along the way.\n"}