{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/160807907", "html_url": "https://github.com/tensorflow/tensorflow/issues/18#issuecomment-160807907", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18", "id": 160807907, "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDgwNzkwNw==", "user": {"login": "dazinator", "id": 3176632, "node_id": "MDQ6VXNlcjMxNzY2MzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3176632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dazinator", "html_url": "https://github.com/dazinator", "followers_url": "https://api.github.com/users/dazinator/followers", "following_url": "https://api.github.com/users/dazinator/following{/other_user}", "gists_url": "https://api.github.com/users/dazinator/gists{/gist_id}", "starred_url": "https://api.github.com/users/dazinator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dazinator/subscriptions", "organizations_url": "https://api.github.com/users/dazinator/orgs", "repos_url": "https://api.github.com/users/dazinator/repos", "events_url": "https://api.github.com/users/dazinator/events{/privacy}", "received_events_url": "https://api.github.com/users/dazinator/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-01T00:27:49Z", "updated_at": "2015-12-01T00:28:25Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3102127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ivanseidel\">@ivanseidel</a> - I think one solution for the python code from a .NET perspective, would be to use IronPython - which allows you to:</p>\n<ul>\n<li>call your Python .py from within .NET</li>\n<li>run it</li>\n<li>get a result back into your .NET app from the Python code.</li>\n</ul>\n<p>So i'd assume that for a C# implementation, we'd try and keep all the original python code as is (as much as possible) to save translating 60k lines (and keeping them in sync)</p>\n<p>Saying that, this is a completely pie in the sky idea and I really haven't looked at any specifics yet! :)</p>", "body_text": "@ivanseidel - I think one solution for the python code from a .NET perspective, would be to use IronPython - which allows you to:\n\ncall your Python .py from within .NET\nrun it\nget a result back into your .NET app from the Python code.\n\nSo i'd assume that for a C# implementation, we'd try and keep all the original python code as is (as much as possible) to save translating 60k lines (and keeping them in sync)\nSaying that, this is a completely pie in the sky idea and I really haven't looked at any specifics yet! :)", "body": "@ivanseidel - I think one solution for the python code from a .NET perspective, would be to use IronPython - which allows you to:\n- call your Python .py from within .NET\n- run it\n- get a result back into your .NET app from the Python code.\n\nSo i'd assume that for a C# implementation, we'd try and keep all the original python code as is (as much as possible) to save translating 60k lines (and keeping them in sync)\n\nSaying that, this is a completely pie in the sky idea and I really haven't looked at any specifics yet! :)\n"}