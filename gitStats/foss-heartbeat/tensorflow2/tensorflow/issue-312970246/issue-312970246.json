{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18383", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18383/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18383/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18383/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18383", "id": 312970246, "node_id": "MDU6SXNzdWUzMTI5NzAyNDY=", "number": 18383, "title": "Feature Request: Slice replacement operation", "user": {"login": "javidcf", "id": 1098280, "node_id": "MDQ6VXNlcjEwOTgyODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1098280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/javidcf", "html_url": "https://github.com/javidcf", "followers_url": "https://api.github.com/users/javidcf/followers", "following_url": "https://api.github.com/users/javidcf/following{/other_user}", "gists_url": "https://api.github.com/users/javidcf/gists{/gist_id}", "starred_url": "https://api.github.com/users/javidcf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/javidcf/subscriptions", "organizations_url": "https://api.github.com/users/javidcf/orgs", "repos_url": "https://api.github.com/users/javidcf/repos", "events_url": "https://api.github.com/users/javidcf/events{/privacy}", "received_events_url": "https://api.github.com/users/javidcf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2018-04-10T15:16:58Z", "updated_at": "2018-11-21T11:31:59Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: b'unknown' 1.4.0</li>\n<li><strong>Python version</strong>: 3.6.3 Anaconda</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>In the last couple of weeks I have answered up to three questions in Stack Overflow (<a href=\"https://stackoverflow.com/questions/49493444/tensorflow-set-block-within-2d-tensor-to-constant-value/49493702\" rel=\"nofollow\">this</a>, <a href=\"https://stackoverflow.com/questions/49487647/how-to-assign-a-value-to-a-tf-variable-in-tensorflow-without-using-tf-assign/49534185\" rel=\"nofollow\">this</a> and <a href=\"https://stackoverflow.com/questions/49755316/best-way-to-mimic-pytorch-sliced-assignment-with-keras-tensorflow/49756271\" rel=\"nofollow\">this</a>) solving essentially the same problem, namely how to replace a slice in one tensor with the contents of (a slice of) another tensor. On the one hand, newer users try to solve it with a slice assignment to a variable, which is easy and intuitive but wrong. On the other hand, even for experience users it can be quite a hassle (my approaches are either to concatenate thing after thing or make comprehensive masks and use <code>tf.where</code>, both of them, I suspect, take more resources than the operation should require).</p>\n<p>I think everyone would benefit from a slice replacement operation that returns a tensor with a slice replaced with some values. I do not know about the technical challenges of this (e.g. to keep gradient propagation and so on), but syntactically there is the problem that one cannot use slicing syntax with functions. Like in <code>tf.slice</code>, a couple of <code>begin</code> and <code>size</code> tensors could be passed:</p>\n<pre><code>tf.replace_slice(my_tensor, [1, 2], [3, 4], new_values)\n</code></pre>\n<p>But, similarly to how <code>tf.Tensor</code> implements <code>__getitem__</code> for easy slicing, it would be neat to have a simplified syntax for this. Maybe (not necessarily) something like:</p>\n<pre><code>my_tensor = my_tensor.replace[1:4, 2:6].with_values(new_values) \n</code></pre>\n<p>(I was going to say <code> .with(new_values)</code>, but that's a keyword)</p>\n<p>It could also be just:</p>\n<pre><code>my_tensor = my_tensor[1:4, 2:6].replace_with(new_values) \n</code></pre>\n<p>Which is more similar to how slice assignment works for variables, but that seems harder to implement consistently (the slicing should return not just a regular tensor, and the slicing operation would be created anyway even if it's not necessary).</p>\n<h3>Source code / logs</h3>\n<p>N/A</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): b'unknown' 1.4.0\nPython version: 3.6.3 Anaconda\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A\n\nDescribe the problem\nIn the last couple of weeks I have answered up to three questions in Stack Overflow (this, this and this) solving essentially the same problem, namely how to replace a slice in one tensor with the contents of (a slice of) another tensor. On the one hand, newer users try to solve it with a slice assignment to a variable, which is easy and intuitive but wrong. On the other hand, even for experience users it can be quite a hassle (my approaches are either to concatenate thing after thing or make comprehensive masks and use tf.where, both of them, I suspect, take more resources than the operation should require).\nI think everyone would benefit from a slice replacement operation that returns a tensor with a slice replaced with some values. I do not know about the technical challenges of this (e.g. to keep gradient propagation and so on), but syntactically there is the problem that one cannot use slicing syntax with functions. Like in tf.slice, a couple of begin and size tensors could be passed:\ntf.replace_slice(my_tensor, [1, 2], [3, 4], new_values)\n\nBut, similarly to how tf.Tensor implements __getitem__ for easy slicing, it would be neat to have a simplified syntax for this. Maybe (not necessarily) something like:\nmy_tensor = my_tensor.replace[1:4, 2:6].with_values(new_values) \n\n(I was going to say  .with(new_values), but that's a keyword)\nIt could also be just:\nmy_tensor = my_tensor[1:4, 2:6].replace_with(new_values) \n\nWhich is more similar to how slice assignment works for variables, but that seems harder to implement consistently (the slicing should return not just a regular tensor, and the slicing operation would be created anyway even if it's not necessary).\nSource code / logs\nN/A", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: b'unknown' 1.4.0\r\n- **Python version**: 3.6.3 Anaconda\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: N/A\r\n\r\n### Describe the problem\r\n\r\nIn the last couple of weeks I have answered up to three questions in Stack Overflow ([this](https://stackoverflow.com/questions/49493444/tensorflow-set-block-within-2d-tensor-to-constant-value/49493702), [this](https://stackoverflow.com/questions/49487647/how-to-assign-a-value-to-a-tf-variable-in-tensorflow-without-using-tf-assign/49534185) and [this](https://stackoverflow.com/questions/49755316/best-way-to-mimic-pytorch-sliced-assignment-with-keras-tensorflow/49756271)) solving essentially the same problem, namely how to replace a slice in one tensor with the contents of (a slice of) another tensor. On the one hand, newer users try to solve it with a slice assignment to a variable, which is easy and intuitive but wrong. On the other hand, even for experience users it can be quite a hassle (my approaches are either to concatenate thing after thing or make comprehensive masks and use `tf.where`, both of them, I suspect, take more resources than the operation should require).\r\n\r\nI think everyone would benefit from a slice replacement operation that returns a tensor with a slice replaced with some values. I do not know about the technical challenges of this (e.g. to keep gradient propagation and so on), but syntactically there is the problem that one cannot use slicing syntax with functions. Like in `tf.slice`, a couple of `begin` and `size` tensors could be passed:\r\n\r\n    tf.replace_slice(my_tensor, [1, 2], [3, 4], new_values)\r\n\r\nBut, similarly to how `tf.Tensor` implements `__getitem__` for easy slicing, it would be neat to have a simplified syntax for this. Maybe (not necessarily) something like:\r\n\r\n    my_tensor = my_tensor.replace[1:4, 2:6].with_values(new_values) \r\n\r\n(I was going to say ` .with(new_values)`, but that's a keyword)\r\n\r\nIt could also be just:\r\n\r\n    my_tensor = my_tensor[1:4, 2:6].replace_with(new_values) \r\n\r\nWhich is more similar to how slice assignment works for variables, but that seems harder to implement consistently (the slicing should return not just a regular tensor, and the slicing operation would be created anyway even if it's not necessary).\r\n\r\n### Source code / logs\r\n\r\nN/A"}