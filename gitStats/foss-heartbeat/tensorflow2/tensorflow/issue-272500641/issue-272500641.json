{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14398", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14398/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14398/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14398/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14398", "id": 272500641, "node_id": "MDU6SXNzdWUyNzI1MDA2NDE=", "number": 14398, "title": "name_scope is indistinguishable from string type ", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-09T09:51:55Z", "updated_at": "2017-11-09T22:27:02Z", "closed_at": "2017-11-09T22:27:02Z", "author_association": "MEMBER", "body_html": "<p>variable_scope yields a class VariableScope when entered, while name_scope yields a string.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>n1<span class=\"pl-pds\">\"</span></span>):\n    <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>n2<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> n2:\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name_scope: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(n2))\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>get_name_scope: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(tf.contrib.framework.get_name_scope()))\n\n<span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v1<span class=\"pl-pds\">\"</span></span>):\n    <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v2<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> v2:\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>variable_scope: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(v2))\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>get_name_scope: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(tf.get_variable_scope()))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> output</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> name_scope: n1/n2/</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> get_name_scope: n1/n2</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> variable_scope: &lt;tensorflow.python.ops.variable_scope.VariableScope object at 0x11ba34d68&gt;</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> get_name_scope: &lt;tensorflow.python.ops.variable_scope.VariableScope object at 0x11ba34d68&gt;</span></pre></div>\n<p>I think string might be unsafe. Moreover, sometimes we have to hack a \"/\" suffix if we want to reenter the current name scope.</p>\n<p>Especially, it's difficult to check the type when <code>name_scope</code> is an argument for a function.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">func</span>(<span class=\"pl-smi\">my_name_scope</span>, <span class=\"pl-smi\">my_variable_scope</span>):\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(my_variable_scope, (VariableScope, variable_scope)):\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> do something</span>\n    <span class=\"pl-k\">else</span>:\n        <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">TypeError</span>()\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(my_name_scope, (six.string_types, name_scope)):\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> how to do if it's an invalid string?</span>\n    <span class=\"pl-k\">else</span>:\n        <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">TypeError</span>()</pre></div>\n<p>Will tensorflow plan to introduce a class like VariableScope, say NameScope, in the future? Thanks.</p>", "body_text": "variable_scope yields a class VariableScope when entered, while name_scope yields a string.\nimport tensorflow as tf\n\nwith tf.name_scope(\"n1\"):\n    with tf.name_scope(\"n2\") as n2:\n        print(\"name_scope: {}\".format(n2))\n        print(\"get_name_scope: {}\".format(tf.contrib.framework.get_name_scope()))\n\nwith tf.variable_scope(\"v1\"):\n    with tf.variable_scope(\"v2\") as v2:\n        print(\"variable_scope: {}\".format(v2))\n        print(\"get_name_scope: {}\".format(tf.get_variable_scope()))\n\n# output\n# name_scope: n1/n2/\n# get_name_scope: n1/n2\n# variable_scope: <tensorflow.python.ops.variable_scope.VariableScope object at 0x11ba34d68>\n# get_name_scope: <tensorflow.python.ops.variable_scope.VariableScope object at 0x11ba34d68>\nI think string might be unsafe. Moreover, sometimes we have to hack a \"/\" suffix if we want to reenter the current name scope.\nEspecially, it's difficult to check the type when name_scope is an argument for a function.\ndef func(my_name_scope, my_variable_scope):\n    if isinstance(my_variable_scope, (VariableScope, variable_scope)):\n        # do something\n    else:\n        raise TypeError()\n\n    if isinstance(my_name_scope, (six.string_types, name_scope)):\n        # how to do if it's an invalid string?\n    else:\n        raise TypeError()\nWill tensorflow plan to introduce a class like VariableScope, say NameScope, in the future? Thanks.", "body": "variable_scope yields a class VariableScope when entered, while name_scope yields a string. \r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nwith tf.name_scope(\"n1\"):\r\n    with tf.name_scope(\"n2\") as n2:\r\n        print(\"name_scope: {}\".format(n2))\r\n        print(\"get_name_scope: {}\".format(tf.contrib.framework.get_name_scope()))\r\n\r\nwith tf.variable_scope(\"v1\"):\r\n    with tf.variable_scope(\"v2\") as v2:\r\n        print(\"variable_scope: {}\".format(v2))\r\n        print(\"get_name_scope: {}\".format(tf.get_variable_scope()))\r\n\r\n# output\r\n# name_scope: n1/n2/\r\n# get_name_scope: n1/n2\r\n# variable_scope: <tensorflow.python.ops.variable_scope.VariableScope object at 0x11ba34d68>\r\n# get_name_scope: <tensorflow.python.ops.variable_scope.VariableScope object at 0x11ba34d68>\r\n```\r\n\r\nI think string might be unsafe. Moreover, sometimes we have to hack a \"/\" suffix if we want to reenter the current name scope. \r\n\r\nEspecially, it's difficult to check the type when `name_scope` is an argument for a function.\r\n```python\r\ndef func(my_name_scope, my_variable_scope):\r\n    if isinstance(my_variable_scope, (VariableScope, variable_scope)):\r\n        # do something\r\n    else:\r\n        raise TypeError()\r\n\r\n    if isinstance(my_name_scope, (six.string_types, name_scope)):\r\n        # how to do if it's an invalid string?\r\n    else:\r\n        raise TypeError()\r\n```\r\n\r\nWill tensorflow plan to introduce a class like VariableScope, say NameScope, in the future? Thanks."}