{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224611861", "pull_request_review_id": 164021122, "id": 224611861, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDYxMTg2MQ==", "diff_hunk": "@@ -963,11 +966,17 @@ Status GraphConstructor::Convert() {\n         // Note that input_already_exists can grow here\n         AddControlDependencies(&imported_node_def, &input_already_exists);\n       }\n+      if (!opts_.bind_device.empty()) {\n+        imported_node_def.set_device(opts_.bind_device);", "path": "tensorflow/core/graph/graph_constructor.cc", "position": null, "original_position": 24, "commit_id": "77ff33a378b5c309e94d118504f76951fab04802", "original_commit_id": "125b3b264ba2169ec8944bbf12cb91e495d85d76", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Should this be:\r\n\r\n```c++\r\nif (!opts_.default_device.empty() && imported_node_def.device().empty())\r\n```\r\n\r\nso we don't overwrite explicitly placed nodes? Nodes are often explicitly placed for a reason (for example, the user intended to force some computation to execute on CPU), and overriding that intent doesn't seem great.\r\n\r\nBy setting the device only for nodes that aren't explicitly placed, the behavior will be parallel to what happens in Python. For example:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nwith tf.Graph().as_default():\r\n  tf.constant(1.0, name='default')\r\n  with tf.device('/gpu:0'):\r\n    tf.constant(1.0, name='gpu')\r\n  with tf.device('/cpu:0'):\r\n    tf.constant(1.0, name='cpu')\r\n  graph_def = tf.get_default_graph().as_graph_def()\r\n\r\n# At this point graph_def has 3 nodes:\r\n# one is explicitly placed on CPU, one on GPU, and one has no explicit placement.\r\n\r\nwith tf.Graph().as_default():\r\n  with tf.device(\"/gpu:1\"):\r\n    tf.import_graph_def(graph_def)\r\n  # This newly imported graph will have 3 nodes, keeping the explicit placements from before\r\n  # and overriding the one node that wasn't placed\r\n  print(tf.get_default_graph.as_graph_def())\r\n```", "created_at": "2018-10-11T21:35:05Z", "updated_at": "2018-10-23T19:56:52Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20412#discussion_r224611861", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20412", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224611861"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20412#discussion_r224611861"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20412"}}, "body_html": "<p>Should this be:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">if</span> (!opts_.default_device.empty() &amp;&amp; imported_node_def.device().empty())</pre></div>\n<p>so we don't overwrite explicitly placed nodes? Nodes are often explicitly placed for a reason (for example, the user intended to force some computation to execute on CPU), and overriding that intent doesn't seem great.</p>\n<p>By setting the device only for nodes that aren't explicitly placed, the behavior will be parallel to what happens in Python. For example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">with</span> tf.Graph().as_default():\n  tf.constant(<span class=\"pl-c1\">1.0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>default<span class=\"pl-pds\">'</span></span>)\n  <span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/gpu:0<span class=\"pl-pds\">'</span></span>):\n    tf.constant(<span class=\"pl-c1\">1.0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>gpu<span class=\"pl-pds\">'</span></span>)\n  <span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/cpu:0<span class=\"pl-pds\">'</span></span>):\n    tf.constant(<span class=\"pl-c1\">1.0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>cpu<span class=\"pl-pds\">'</span></span>)\n  graph_def <span class=\"pl-k\">=</span> tf.get_default_graph().as_graph_def()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> At this point graph_def has 3 nodes:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> one is explicitly placed on CPU, one on GPU, and one has no explicit placement.</span>\n\n<span class=\"pl-k\">with</span> tf.Graph().as_default():\n  <span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/gpu:1<span class=\"pl-pds\">\"</span></span>):\n    tf.import_graph_def(graph_def)\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> This newly imported graph will have 3 nodes, keeping the explicit placements from before</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> and overriding the one node that wasn't placed</span>\n  <span class=\"pl-c1\">print</span>(tf.get_default_graph.as_graph_def())</pre></div>", "body_text": "Should this be:\nif (!opts_.default_device.empty() && imported_node_def.device().empty())\nso we don't overwrite explicitly placed nodes? Nodes are often explicitly placed for a reason (for example, the user intended to force some computation to execute on CPU), and overriding that intent doesn't seem great.\nBy setting the device only for nodes that aren't explicitly placed, the behavior will be parallel to what happens in Python. For example:\nimport tensorflow as tf\n\nwith tf.Graph().as_default():\n  tf.constant(1.0, name='default')\n  with tf.device('/gpu:0'):\n    tf.constant(1.0, name='gpu')\n  with tf.device('/cpu:0'):\n    tf.constant(1.0, name='cpu')\n  graph_def = tf.get_default_graph().as_graph_def()\n\n# At this point graph_def has 3 nodes:\n# one is explicitly placed on CPU, one on GPU, and one has no explicit placement.\n\nwith tf.Graph().as_default():\n  with tf.device(\"/gpu:1\"):\n    tf.import_graph_def(graph_def)\n  # This newly imported graph will have 3 nodes, keeping the explicit placements from before\n  # and overriding the one node that wasn't placed\n  print(tf.get_default_graph.as_graph_def())"}