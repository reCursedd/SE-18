{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/226781421", "pull_request_review_id": 166695303, "id": 226781421, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjc4MTQyMQ==", "diff_hunk": "@@ -3205,6 +3205,56 @@ TEST_F(GraphConstructorTest, ImportGraphDef_ValidateColationConstraints) {\n   TF_EXPECT_OK(ImportGraphDef(options, def, &graph_, nullptr));\n }\n \n+TEST_F(GraphConstructorTest, ImportGraphDef_ValidateDefaultDevice) {\n+  std::string gdef_ascii(\n+      R\"EOF(\n+      node { name: 'test_input' op: 'TestInput' }\n+      node { name: 'test_op' op: 'TestMul' input: [ 'test_input:0', 'test_input:1' ] }\n+      )EOF\");\n+\n+  GraphDef gdef;\n+  CHECK(protobuf::TextFormat::ParseFromString(gdef_ascii, &gdef));\n+\n+  ImportGraphDefOptions options;\n+  std::string dev = \"/gpu:13\";\n+  options.default_device = dev;\n+  options.return_nodes = std::vector<std::string>{\"test_input\", \"test_op\"};\n+\n+  ImportGraphDefResults res;\n+\n+  TF_EXPECT_OK(ImportGraphDef(options, gdef, &graph_, NULL, &res));\n+  EXPECT_EQ(res.return_nodes.size(), options.return_nodes.size());\n+  for (auto node: res.return_nodes) {\n+    EXPECT_EQ(node->requested_device(), dev);\n+  }\n+}\n+\n+TEST_F(GraphConstructorTest, ImportGraphDef_ValidateDefaultDeviceWithAlreadyPresentedDevice) {", "path": "tensorflow/core/graph/graph_constructor_test.cc", "position": null, "original_position": 28, "commit_id": "77ff33a378b5c309e94d118504f76951fab04802", "original_commit_id": "87c286b891a886ee3800d1f39290fd159336b2bb", "user": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "body": "Sorry to nitpick, but instead of making a whole new test, can you just add a device to one of the NodeDefs in the above test? (Or add another NodeDef to the above test.) The return_nodes are returned in the order specified, so for example, if you add \"some dev\" to the first node, you can check that the first returned node has device \"some dev\" and the second node \"/gpu:13\".", "created_at": "2018-10-19T21:03:41Z", "updated_at": "2018-10-23T19:56:52Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20412#discussion_r226781421", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20412", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/226781421"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20412#discussion_r226781421"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20412"}}, "body_html": "<p>Sorry to nitpick, but instead of making a whole new test, can you just add a device to one of the NodeDefs in the above test? (Or add another NodeDef to the above test.) The return_nodes are returned in the order specified, so for example, if you add \"some dev\" to the first node, you can check that the first returned node has device \"some dev\" and the second node \"/gpu:13\".</p>", "body_text": "Sorry to nitpick, but instead of making a whole new test, can you just add a device to one of the NodeDefs in the above test? (Or add another NodeDef to the above test.) The return_nodes are returned in the order specified, so for example, if you add \"some dev\" to the first node, you can check that the first returned node has device \"some dev\" and the second node \"/gpu:13\"."}