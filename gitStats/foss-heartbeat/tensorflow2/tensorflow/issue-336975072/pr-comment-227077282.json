{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/227077282", "pull_request_review_id": 167033414, "id": 227077282, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNzA3NzI4Mg==", "diff_hunk": "@@ -3205,6 +3205,49 @@ TEST_F(GraphConstructorTest, ImportGraphDef_ValidateColationConstraints) {\n   TF_EXPECT_OK(ImportGraphDef(options, def, &graph_, nullptr));\n }\n \n+TEST_F(GraphConstructorTest, ImportGraphDef_ValidateDefaultDevice) {\n+  std::string stored_dev = \"some dev\";\n+  std::string gdef_ascii(\n+      R\"EOF(\n+      node { name: 'test_input' op: 'TestInput' }\n+      node { name: 'test_input_with_dev' op: 'TestInput' device: 'some dev'}\n+      node { name: 'test_op' op: 'TestMul' input: [ 'test_input:0', 'test_input:1' ] }\n+      node { name: 'test_op_with_dev' op: 'TestMul' input: [ 'test_input:0', 'test_input:1' ] device: 'some dev'}\n+      )EOF\");\n+\n+  GraphDef gdef;\n+  CHECK(protobuf::TextFormat::ParseFromString(gdef_ascii, &gdef));\n+\n+  ImportGraphDefOptions options;\n+  // assign this execution device for the nodes, which do not alreadt have default device, specified in graph_def\n+  // node->requested_device() should be either this assigned device, or default device from graph_def\n+  std::string assigned_dev = \"/gpu:13\";\n+  options.default_device = assigned_dev;\n+\n+  std::map<std::string, std::string> node_dev_map;\n+  std::vector<std::string> assigned_dev_nodes = {\"test_input\", \"test_op\"};\n+  std::vector<std::string> stored_dev_nodes = {\"test_input_with_dev\", \"test_op_with_dev\"};\n+  options.return_nodes = assigned_dev_nodes;\n+  options.return_nodes.insert(options.return_nodes.end(), stored_dev_nodes.begin(), stored_dev_nodes.end() );\n+\n+  for (auto node: assigned_dev_nodes) {", "path": "tensorflow/core/graph/graph_constructor_test.cc", "position": null, "original_position": 29, "commit_id": "77ff33a378b5c309e94d118504f76951fab04802", "original_commit_id": "b88e0853096173c47530f1ee4098bcb958e9f331", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "The test will be easier to follow if we explicitly compare devices instead of having to sort through this `node_dev_map` (and whether names are overridden etc.). For example, we could  do something like this:\r\n\r\n```c++\r\nGraphDef gdef;\r\nASSERT_TRUE(protobuf::TestFormat::ParseFromString(gdef_ascii, &gdef));\r\n\r\nImportGraphDefOptions options;\r\noptions.default_device = \"/gpu:13\";\r\nImportGraphDefResults res;\r\n\r\nTF_ASSERT_OK(ImportGraphDef(options, &def, &graph_, NULL, &res));\r\nstd::map<string, string> node2dev;\r\nfor (Node* n : graph_.nodes()) {\r\n  node2dev[n->name()] = n->assign_device_name();\r\n}\r\nEXPECT_EQ(node2dev[\"test_input\"], \"/gpu:13\");\r\nEXPECT_EQ(node2dev[\"test_op\"], \"/gpu:13\");\r\nEXPECT_EQ(node2dev[\"test_input_with_dev\", \"some dev\");\r\nEXPECT_EQ(node2dev[\"test_op_with_dev\", \"some dev\");\r\n```\r\n\r\n", "created_at": "2018-10-22T18:08:50Z", "updated_at": "2018-10-23T19:56:52Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20412#discussion_r227077282", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20412", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/227077282"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20412#discussion_r227077282"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20412"}}, "body_html": "<p>The test will be easier to follow if we explicitly compare devices instead of having to sort through this <code>node_dev_map</code> (and whether names are overridden etc.). For example, we could  do something like this:</p>\n<div class=\"highlight highlight-source-c++\"><pre>GraphDef gdef;\n<span class=\"pl-en\">ASSERT_TRUE</span>(protobuf::TestFormat::ParseFromString(gdef_ascii, &amp;gdef));\n\nImportGraphDefOptions options;\noptions.default_device = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/gpu:13<span class=\"pl-pds\">\"</span></span>;\nImportGraphDefResults res;\n\n<span class=\"pl-en\">TF_ASSERT_OK</span>(ImportGraphDef(options, &amp;def, &amp;graph_, <span class=\"pl-c1\">NULL</span>, &amp;res));\nstd::map&lt;string, string&gt; node2dev;\n<span class=\"pl-k\">for</span> (Node* n : graph_.nodes()) {\n  node2dev[n-&gt;<span class=\"pl-c1\">name</span>()] = n-&gt;<span class=\"pl-c1\">assign_device_name</span>();\n}\n<span class=\"pl-en\">EXPECT_EQ</span>(node2dev[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test_input<span class=\"pl-pds\">\"</span></span>], <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/gpu:13<span class=\"pl-pds\">\"</span></span>);\n<span class=\"pl-en\">EXPECT_EQ</span>(node2dev[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test_op<span class=\"pl-pds\">\"</span></span>], <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/gpu:13<span class=\"pl-pds\">\"</span></span>);\n<span class=\"pl-en\">EXPECT_EQ</span>(node2dev[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test_input_with_dev<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>some dev<span class=\"pl-pds\">\"</span></span>);\n<span class=\"pl-en\">EXPECT_EQ</span>(node2dev[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test_op_with_dev<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>some dev<span class=\"pl-pds\">\"</span></span>);</pre></div>", "body_text": "The test will be easier to follow if we explicitly compare devices instead of having to sort through this node_dev_map (and whether names are overridden etc.). For example, we could  do something like this:\nGraphDef gdef;\nASSERT_TRUE(protobuf::TestFormat::ParseFromString(gdef_ascii, &gdef));\n\nImportGraphDefOptions options;\noptions.default_device = \"/gpu:13\";\nImportGraphDefResults res;\n\nTF_ASSERT_OK(ImportGraphDef(options, &def, &graph_, NULL, &res));\nstd::map<string, string> node2dev;\nfor (Node* n : graph_.nodes()) {\n  node2dev[n->name()] = n->assign_device_name();\n}\nEXPECT_EQ(node2dev[\"test_input\"], \"/gpu:13\");\nEXPECT_EQ(node2dev[\"test_op\"], \"/gpu:13\");\nEXPECT_EQ(node2dev[\"test_input_with_dev\", \"some dev\");\nEXPECT_EQ(node2dev[\"test_op_with_dev\", \"some dev\");"}