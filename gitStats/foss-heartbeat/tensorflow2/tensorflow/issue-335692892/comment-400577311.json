{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/400577311", "html_url": "https://github.com/tensorflow/tensorflow/issues/20299#issuecomment-400577311", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20299", "id": 400577311, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDU3NzMxMQ==", "user": {"login": "gaussleescorpio", "id": 17249981, "node_id": "MDQ6VXNlcjE3MjQ5OTgx", "avatar_url": "https://avatars0.githubusercontent.com/u/17249981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaussleescorpio", "html_url": "https://github.com/gaussleescorpio", "followers_url": "https://api.github.com/users/gaussleescorpio/followers", "following_url": "https://api.github.com/users/gaussleescorpio/following{/other_user}", "gists_url": "https://api.github.com/users/gaussleescorpio/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaussleescorpio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaussleescorpio/subscriptions", "organizations_url": "https://api.github.com/users/gaussleescorpio/orgs", "repos_url": "https://api.github.com/users/gaussleescorpio/repos", "events_url": "https://api.github.com/users/gaussleescorpio/events{/privacy}", "received_events_url": "https://api.github.com/users/gaussleescorpio/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-27T07:52:07Z", "updated_at": "2018-06-27T07:53:19Z", "author_association": "NONE", "body_html": "<p>I think I just need a hint that if implementing the layer norm is possible and some simple guidelines regarding how to do this. If simply I can register a new op written in C++ and implement a new version of cudnn wrapper mimicking the cudnn_rnn_ops.cc functions. As I know, layer norm is just a moving average of weights and biases. If that part can be buried into C++ code, it should be okay. Or there can be a solution to embed the algo into python code.</p>\n<p>I think this would be a great contribution to tensorflow community as cudnnlstm is very memory and computation saving. Adding layer norm and some other functions might be useful to make it perform better.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5376757\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/michaelisard\">@michaelisard</a></p>", "body_text": "I think I just need a hint that if implementing the layer norm is possible and some simple guidelines regarding how to do this. If simply I can register a new op written in C++ and implement a new version of cudnn wrapper mimicking the cudnn_rnn_ops.cc functions. As I know, layer norm is just a moving average of weights and biases. If that part can be buried into C++ code, it should be okay. Or there can be a solution to embed the algo into python code.\nI think this would be a great contribution to tensorflow community as cudnnlstm is very memory and computation saving. Adding layer norm and some other functions might be useful to make it perform better.\n@michaelisard", "body": "I think I just need a hint that if implementing the layer norm is possible and some simple guidelines regarding how to do this. If simply I can register a new op written in C++ and implement a new version of cudnn wrapper mimicking the cudnn_rnn_ops.cc functions. As I know, layer norm is just a moving average of weights and biases. If that part can be buried into C++ code, it should be okay. Or there can be a solution to embed the algo into python code. \r\n\r\nI think this would be a great contribution to tensorflow community as cudnnlstm is very memory and computation saving. Adding layer norm and some other functions might be useful to make it perform better.\r\n\r\n@michaelisard "}