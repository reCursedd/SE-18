{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/232413570", "html_url": "https://github.com/tensorflow/tensorflow/pull/2723#issuecomment-232413570", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2723", "id": 232413570, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjQxMzU3MA==", "user": {"login": "shlens", "id": 13385191, "node_id": "MDQ6VXNlcjEzMzg1MTkx", "avatar_url": "https://avatars1.githubusercontent.com/u/13385191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shlens", "html_url": "https://github.com/shlens", "followers_url": "https://api.github.com/users/shlens/followers", "following_url": "https://api.github.com/users/shlens/following{/other_user}", "gists_url": "https://api.github.com/users/shlens/gists{/gist_id}", "starred_url": "https://api.github.com/users/shlens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shlens/subscriptions", "organizations_url": "https://api.github.com/users/shlens/orgs", "repos_url": "https://api.github.com/users/shlens/repos", "events_url": "https://api.github.com/users/shlens/events{/privacy}", "received_events_url": "https://api.github.com/users/shlens/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-13T16:40:36Z", "updated_at": "2016-07-13T16:40:36Z", "author_association": "MEMBER", "body_html": "<p>After staring hard at the PR, I am starting to wonder whether we might already have this functionality in TF.</p>\n<p>Namely, if we wish to whiten all images based on the <em>batch</em> mean and <em>batch</em> variance, then this is precisely what <code>tf.nn.batch_normalization</code> does. That is, I think you might mimic <code>per_image_whitening</code> where the mean and variance are computed over the entire batch via a call to <code>tf.nn_batch_normalization</code>. For example, in your PR this call:</p>\n<div class=\"highlight highlight-source-python\"><pre>whitened_images <span class=\"pl-k\">=</span> per_image_whitening(images)</pre></div>\n<p>becomes</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Compute the minimum variance to mimic per_image_whitening()</span>\nnum_pixels <span class=\"pl-k\">=</span> tf.reduce_prod(array_ops.shape(images))\nmin_stddev <span class=\"pl-k\">=</span> tf.inv(tf.sqrt(math_ops.cast(num_pixels, tf.float32)))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Calculate the mean and variance of the image batch.</span>\naxis <span class=\"pl-k\">=</span> <span class=\"pl-c1\">list</span>(<span class=\"pl-c1\">range</span>(images.get_shape().ndims <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>))\nmean, variance <span class=\"pl-k\">=</span> nn.moments(images, axis)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Whiten the images.</span>\nwhitened_images <span class=\"pl-k\">=</span> tf.nn_batch_normalization(images, mean, variance, <span class=\"pl-v\">scale</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-v\">offset</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-v\">variance_epsilon</span><span class=\"pl-k\">=</span>min_stddev)</pre></div>\n<p>Take a look at the API for <a href=\"https://www.tensorflow.org/versions/r0.9/api_docs/python/nn.html#batch_normalization\" rel=\"nofollow\">tf.nn.batch_normalization</a> and please let me know if this works for you. If not, then we should expand the API for <code>per_image_whitening</code>.</p>", "body_text": "After staring hard at the PR, I am starting to wonder whether we might already have this functionality in TF.\nNamely, if we wish to whiten all images based on the batch mean and batch variance, then this is precisely what tf.nn.batch_normalization does. That is, I think you might mimic per_image_whitening where the mean and variance are computed over the entire batch via a call to tf.nn_batch_normalization. For example, in your PR this call:\nwhitened_images = per_image_whitening(images)\nbecomes\n# Compute the minimum variance to mimic per_image_whitening()\nnum_pixels = tf.reduce_prod(array_ops.shape(images))\nmin_stddev = tf.inv(tf.sqrt(math_ops.cast(num_pixels, tf.float32)))\n\n# Calculate the mean and variance of the image batch.\naxis = list(range(images.get_shape().ndims - 1))\nmean, variance = nn.moments(images, axis)\n\n# Whiten the images.\nwhitened_images = tf.nn_batch_normalization(images, mean, variance, scale=None, offset=None, variance_epsilon=min_stddev)\nTake a look at the API for tf.nn.batch_normalization and please let me know if this works for you. If not, then we should expand the API for per_image_whitening.", "body": "After staring hard at the PR, I am starting to wonder whether we might already have this functionality in TF.\n\nNamely, if we wish to whiten all images based on the _batch_ mean and _batch_ variance, then this is precisely what `tf.nn.batch_normalization` does. That is, I think you might mimic `per_image_whitening` where the mean and variance are computed over the entire batch via a call to `tf.nn_batch_normalization`. For example, in your PR this call:\n\n``` python\nwhitened_images = per_image_whitening(images)\n```\n\nbecomes\n\n``` python\n# Compute the minimum variance to mimic per_image_whitening()\nnum_pixels = tf.reduce_prod(array_ops.shape(images))\nmin_stddev = tf.inv(tf.sqrt(math_ops.cast(num_pixels, tf.float32)))\n\n# Calculate the mean and variance of the image batch.\naxis = list(range(images.get_shape().ndims - 1))\nmean, variance = nn.moments(images, axis)\n\n# Whiten the images.\nwhitened_images = tf.nn_batch_normalization(images, mean, variance, scale=None, offset=None, variance_epsilon=min_stddev)\n```\n\nTake a look at the API for [tf.nn.batch_normalization](https://www.tensorflow.org/versions/r0.9/api_docs/python/nn.html#batch_normalization) and please let me know if this works for you. If not, then we should expand the API for `per_image_whitening`.\n"}