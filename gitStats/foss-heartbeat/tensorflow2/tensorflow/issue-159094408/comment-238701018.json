{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/238701018", "html_url": "https://github.com/tensorflow/tensorflow/pull/2723#issuecomment-238701018", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2723", "id": 238701018, "node_id": "MDEyOklzc3VlQ29tbWVudDIzODcwMTAxOA==", "user": {"login": "MarvinTeichmann", "id": 2729159, "node_id": "MDQ6VXNlcjI3MjkxNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2729159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarvinTeichmann", "html_url": "https://github.com/MarvinTeichmann", "followers_url": "https://api.github.com/users/MarvinTeichmann/followers", "following_url": "https://api.github.com/users/MarvinTeichmann/following{/other_user}", "gists_url": "https://api.github.com/users/MarvinTeichmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarvinTeichmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarvinTeichmann/subscriptions", "organizations_url": "https://api.github.com/users/MarvinTeichmann/orgs", "repos_url": "https://api.github.com/users/MarvinTeichmann/repos", "events_url": "https://api.github.com/users/MarvinTeichmann/events{/privacy}", "received_events_url": "https://api.github.com/users/MarvinTeichmann/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-09T21:42:08Z", "updated_at": "2016-08-09T21:42:52Z", "author_association": "NONE", "body_html": "<p>Yes, your code should provide a similar / the same result as per_batch_whitening, which is somewhat intentional.</p>\n<p>The use case is somewhat different though. The whitening is supposed to be part of the preprocessing while the batch normalization is used as a regularize. From an API perceptive it might not be the niced to make the user \"abuse\" the batch normalization part. Like, most user would expect this functionality in the <code>tf.image</code> package, where all the other preprocessing can be found.</p>\n<p>Additionally, the function <code>per_image_whitening</code> is already part of the module. The code you posted would also work for the single image case (just use a batch size of 1). I am not sure, whether it is nice to have completely different approaches for single image/batch size.</p>\n<p>I could imagine, that the <code>tf.nn_batch_normalization</code> is faster (more code in C++?). In this case it might be a nice option to rewrite the  <code>tf.image.per_image_whitening</code> function, to take use of this. I would however vote for keeping the <code>tf.image.per_image_whitening</code> functionality.</p>", "body_text": "Yes, your code should provide a similar / the same result as per_batch_whitening, which is somewhat intentional.\nThe use case is somewhat different though. The whitening is supposed to be part of the preprocessing while the batch normalization is used as a regularize. From an API perceptive it might not be the niced to make the user \"abuse\" the batch normalization part. Like, most user would expect this functionality in the tf.image package, where all the other preprocessing can be found.\nAdditionally, the function per_image_whitening is already part of the module. The code you posted would also work for the single image case (just use a batch size of 1). I am not sure, whether it is nice to have completely different approaches for single image/batch size.\nI could imagine, that the tf.nn_batch_normalization is faster (more code in C++?). In this case it might be a nice option to rewrite the  tf.image.per_image_whitening function, to take use of this. I would however vote for keeping the tf.image.per_image_whitening functionality.", "body": "Yes, your code should provide a similar / the same result as per_batch_whitening, which is somewhat intentional.\n\nThe use case is somewhat different though. The whitening is supposed to be part of the preprocessing while the batch normalization is used as a regularize. From an API perceptive it might not be the niced to make the user \"abuse\" the batch normalization part. Like, most user would expect this functionality in the `tf.image` package, where all the other preprocessing can be found.\n\nAdditionally, the function `per_image_whitening` is already part of the module. The code you posted would also work for the single image case (just use a batch size of 1). I am not sure, whether it is nice to have completely different approaches for single image/batch size. \n\nI could imagine, that the `tf.nn_batch_normalization` is faster (more code in C++?). In this case it might be a nice option to rewrite the  `tf.image.per_image_whitening` function, to take use of this. I would however vote for keeping the `tf.image.per_image_whitening` functionality.\n"}