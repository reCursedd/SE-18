{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/232755411", "pull_request_review_id": 174022808, "id": 232755411, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjc1NTQxMQ==", "diff_hunk": "@@ -1223,6 +1223,124 @@ def assert_list_pairwise(z_list, atol=1e-05):\n       for s, u_s in zip(additional_state_list[2], additional_state_list[3]):\n         self.assertAllClose(s, u_s, atol=1e-04)\n \n+  def test_rnn_output_and_state_masking_independent(self):\n+    num_samples = 2\n+    num_timesteps = 4\n+    state_and_io_size = 2\n+    mask_last_num_timesteps = 2  # for second sample only\n+\n+    # a step function that just outputs inputs,\n+    # but increments states +1 per timestep\n+    def step_function(inputs, states):\n+      return inputs, [s + 1 for s in states]\n+\n+    inputs_vals = np.random.random(\n+        (num_samples, num_timesteps, state_and_io_size))\n+    initial_state_vals = np.random.random((num_samples, state_and_io_size))\n+    # masking of two last timesteps for second sample only\n+    mask_vals = np.ones((num_samples, num_timesteps))\n+    mask_vals[1, -mask_last_num_timesteps:] = 0\n+\n+    # outputs expected to be same as inputs for the first sample\n+    expected_outputs = inputs_vals.copy()\n+    # but for the second sample all outputs in masked region should be the same\n+    # as last output before masked region\n+    expected_outputs[1, -mask_last_num_timesteps:] = \\\n+        expected_outputs[1, -(mask_last_num_timesteps + 1)]\n+\n+    expected_state = initial_state_vals.copy()\n+    # first state should be incremented for every timestep (no masking)\n+    expected_state[0] += num_timesteps\n+    # second state should not be incremented for last two timesteps\n+    expected_state[1] += (num_timesteps - mask_last_num_timesteps)\n+\n+    # verify same expected output for `unroll=true/false`\n+    inputs = keras.backend.variable(inputs_vals)\n+    initial_states = [keras.backend.variable(initial_state_vals)]\n+    mask = keras.backend.variable(mask_vals)\n+    for unroll in [True, False]:\n+      last_output, outputs, last_states = keras.backend.rnn(\n+          step_function,\n+          inputs,\n+          initial_states,\n+          mask=mask,\n+          unroll=unroll,\n+          input_length=num_timesteps if unroll else None)\n+\n+      self.assertAllClose(\n+          keras.backend.eval(outputs), expected_outputs)\n+      self.assertAllClose(\n+          keras.backend.eval(last_states[0]), expected_state)\n+\n+  def test_rnn_output_num_dim_larger_than_2_masking(self):\n+    num_samples = 3\n+    num_timesteps = 4\n+    num_features = 5\n+\n+    def step_function(inputs, states):\n+      outputs = keras.backend.tile(keras.backend.expand_dims(inputs), [1, 1, 2])\n+      return outputs, [keras.backend.identity(s) for s in states]\n+      # Note: cannot just return states (which can be a problem) ->\n+      # tensorflow/python/ops/resource_variable_ops.py\", line 824, in set_shape\n+      # NotImplementedError: ResourceVariable does not implement set_shape()\n+\n+    inputs_vals = np.random.random((num_samples, num_timesteps, num_features))\n+    initial_state_vals = np.random.random((num_samples, 6))\n+    mask_vals = np.ones((num_samples, num_timesteps))\n+    mask_vals[-1, -1] = 0  # final timestep masked for last sample\n+\n+    expected_outputs = np.repeat(inputs_vals[..., None], repeats=2, axis=-1)\n+    # for the last sample, the final timestep (in masked region) should be the\n+    # same as the second to final output (before masked region)\n+    expected_outputs[-1, -1] = expected_outputs[-1, -2]\n+\n+    inputs = keras.backend.variable(inputs_vals)\n+    initial_states = [keras.backend.variable(initial_state_vals)]\n+    mask = keras.backend.variable(mask_vals)\n+    for unroll in [True, False]:\n+      last_output, outputs, last_states = keras.backend.rnn(\n+          step_function,\n+          inputs,\n+          initial_states,\n+          mask=mask,\n+          unroll=unroll,\n+          input_length=num_timesteps if unroll else None)\n+\n+      self.assertAllClose(keras.backend.eval(outputs), expected_outputs)\n+\n+  def test_rnn_state_num_dim_larger_than_2_masking(self):\n+    num_samples = 3\n+    num_timesteps = 4\n+\n+    def step_function(inputs, states):\n+        return inputs, [s + 1 for s in states]", "path": "tensorflow/python/keras/backend_test.py", "position": null, "original_position": 94, "commit_id": "d603f429b2126890f4314279faaaedd14eb56ff7", "original_commit_id": "e9853febd5cf870523ddd99ef6e4fa45cd7047bd", "user": {"login": "qlzh727", "id": 5118881, "node_id": "MDQ6VXNlcjUxMTg4ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5118881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qlzh727", "html_url": "https://github.com/qlzh727", "followers_url": "https://api.github.com/users/qlzh727/followers", "following_url": "https://api.github.com/users/qlzh727/following{/other_user}", "gists_url": "https://api.github.com/users/qlzh727/gists{/gist_id}", "starred_url": "https://api.github.com/users/qlzh727/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qlzh727/subscriptions", "organizations_url": "https://api.github.com/users/qlzh727/orgs", "repos_url": "https://api.github.com/users/qlzh727/repos", "events_url": "https://api.github.com/users/qlzh727/events{/privacy}", "received_events_url": "https://api.github.com/users/qlzh727/received_events", "type": "User", "site_admin": false}, "body": "tensorflow/python/keras/backend_test.py:1316: [W0311(bad-indentation), ] Bad indentation. Found 8 spaces, expected 6", "created_at": "2018-11-12T17:53:13Z", "updated_at": "2018-11-15T09:58:49Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23676#discussion_r232755411", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23676", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/232755411"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23676#discussion_r232755411"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23676"}}, "body_html": "<p>tensorflow/python/keras/backend_test.py:1316: [W0311(bad-indentation), ] Bad indentation. Found 8 spaces, expected 6</p>", "body_text": "tensorflow/python/keras/backend_test.py:1316: [W0311(bad-indentation), ] Bad indentation. Found 8 spaces, expected 6"}