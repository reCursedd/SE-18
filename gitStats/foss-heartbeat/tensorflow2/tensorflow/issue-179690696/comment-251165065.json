{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/251165065", "html_url": "https://github.com/tensorflow/tensorflow/issues/4614#issuecomment-251165065", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4614", "id": 251165065, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTE2NTA2NQ==", "user": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-03T17:10:02Z", "updated_at": "2016-10-03T17:10:02Z", "author_association": "MEMBER", "body_html": "<p>Sorry this is in my notes... here are all the differences between numpy that I notice:</p>\n<p><em>Not compatible. numpy accepts arbitrary shapes and tf accepts only shape=(1,). tf unconditionally returns the index array whereas numpy does this only if return_index is true. np can optionally also return inverse map or return counts of each elements usage. Workaround is tf.unqiue(tf.reshape(x, [-1])). Internally numpy may do similar since the inverse is not returned shaped</em>. The missing return_counts can be achieved using tf.unique_counts().</p>\n<p>TF syntax: <code>tf.unique(x, name=None)</code><br>\nNP syntax: <code>np.unique (ar, return_index=False, return_inverse=False, return_counts=False)</code></p>", "body_text": "Sorry this is in my notes... here are all the differences between numpy that I notice:\nNot compatible. numpy accepts arbitrary shapes and tf accepts only shape=(1,). tf unconditionally returns the index array whereas numpy does this only if return_index is true. np can optionally also return inverse map or return counts of each elements usage. Workaround is tf.unqiue(tf.reshape(x, [-1])). Internally numpy may do similar since the inverse is not returned shaped. The missing return_counts can be achieved using tf.unique_counts().\nTF syntax: tf.unique(x, name=None)\nNP syntax: np.unique (ar, return_index=False, return_inverse=False, return_counts=False)", "body": "Sorry this is in my notes... here are all the differences between numpy that I notice:\n\n_Not compatible. numpy accepts arbitrary shapes and tf accepts only shape=(1,). tf unconditionally returns the index array whereas numpy does this only if return_index is true. np can optionally also return inverse map or return counts of each elements usage. Workaround is tf.unqiue(tf.reshape(x, [-1])). Internally numpy may do similar since the inverse is not returned shaped_. The missing return_counts can be achieved using tf.unique_counts().\n\nTF syntax: `tf.unique(x, name=None)`\nNP syntax: `np.unique (ar, return_index=False, return_inverse=False, return_counts=False)`\n"}