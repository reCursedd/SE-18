{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/378808121", "html_url": "https://github.com/tensorflow/tensorflow/issues/11621#issuecomment-378808121", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11621", "id": 378808121, "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODgwODEyMQ==", "user": {"login": "contractorwolf", "id": 4690960, "node_id": "MDQ6VXNlcjQ2OTA5NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4690960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/contractorwolf", "html_url": "https://github.com/contractorwolf", "followers_url": "https://api.github.com/users/contractorwolf/followers", "following_url": "https://api.github.com/users/contractorwolf/following{/other_user}", "gists_url": "https://api.github.com/users/contractorwolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/contractorwolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/contractorwolf/subscriptions", "organizations_url": "https://api.github.com/users/contractorwolf/orgs", "repos_url": "https://api.github.com/users/contractorwolf/repos", "events_url": "https://api.github.com/users/contractorwolf/events{/privacy}", "received_events_url": "https://api.github.com/users/contractorwolf/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-05T03:11:54Z", "updated_at": "2018-04-05T03:12:10Z", "author_association": "NONE", "body_html": "<p>I figured I should leave a sample that worked for me, after I read what <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1184671\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/xiejw\">@xiejw</a> wrote (thanks for the advice).  This solved it for me with the Iris dataset:</p>\n<pre><code># test using single records (2 real world values)\n# one Iris-setosa, one Iris-versicolor\nrecords_to_predict = pd.DataFrame([\n    [5.1, 3.5, 1.4, 0.2], # first records features\n    [5.7, 2.8, 4.1, 1.3]],# second record features\n    columns=columns_names)# defined column names\n \n# predict using the model to get a prediction for each item passed\nsaved_prediction_input_fn = tf.estimator.inputs.pandas_input_fn(records_to_predict, num_epochs=1, shuffle=False)\n\n# make predictions and store as a list\nsaved_prediction_result = list(saved_estimator.predict(input_fn=saved_prediction_input_fn))\n</code></pre>", "body_text": "I figured I should leave a sample that worked for me, after I read what @xiejw wrote (thanks for the advice).  This solved it for me with the Iris dataset:\n# test using single records (2 real world values)\n# one Iris-setosa, one Iris-versicolor\nrecords_to_predict = pd.DataFrame([\n    [5.1, 3.5, 1.4, 0.2], # first records features\n    [5.7, 2.8, 4.1, 1.3]],# second record features\n    columns=columns_names)# defined column names\n \n# predict using the model to get a prediction for each item passed\nsaved_prediction_input_fn = tf.estimator.inputs.pandas_input_fn(records_to_predict, num_epochs=1, shuffle=False)\n\n# make predictions and store as a list\nsaved_prediction_result = list(saved_estimator.predict(input_fn=saved_prediction_input_fn))", "body": "I figured I should leave a sample that worked for me, after I read what @xiejw wrote (thanks for the advice).  This solved it for me with the Iris dataset:\r\n```\r\n# test using single records (2 real world values)\r\n# one Iris-setosa, one Iris-versicolor\r\nrecords_to_predict = pd.DataFrame([\r\n    [5.1, 3.5, 1.4, 0.2], # first records features\r\n    [5.7, 2.8, 4.1, 1.3]],# second record features\r\n    columns=columns_names)# defined column names\r\n \r\n# predict using the model to get a prediction for each item passed\r\nsaved_prediction_input_fn = tf.estimator.inputs.pandas_input_fn(records_to_predict, num_epochs=1, shuffle=False)\r\n\r\n# make predictions and store as a list\r\nsaved_prediction_result = list(saved_estimator.predict(input_fn=saved_prediction_input_fn))\r\n```"}