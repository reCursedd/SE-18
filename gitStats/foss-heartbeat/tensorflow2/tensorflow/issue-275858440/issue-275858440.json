{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14769", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14769/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14769/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14769/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14769", "id": 275858440, "node_id": "MDU6SXNzdWUyNzU4NTg0NDA=", "number": 14769, "title": "Type Serialization in as_graph_def function", "user": {"login": "tjingrant", "id": 6410074, "node_id": "MDQ6VXNlcjY0MTAwNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6410074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjingrant", "html_url": "https://github.com/tjingrant", "followers_url": "https://api.github.com/users/tjingrant/followers", "following_url": "https://api.github.com/users/tjingrant/following{/other_user}", "gists_url": "https://api.github.com/users/tjingrant/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjingrant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjingrant/subscriptions", "organizations_url": "https://api.github.com/users/tjingrant/orgs", "repos_url": "https://api.github.com/users/tjingrant/repos", "events_url": "https://api.github.com/users/tjingrant/events{/privacy}", "received_events_url": "https://api.github.com/users/tjingrant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-21T21:01:51Z", "updated_at": "2018-02-07T12:47:56Z", "closed_at": "2017-11-30T22:49:05Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: OSX</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>:  v1.3.0-rc2-20-g0787eee</li>\n<li><strong>Python version</strong>: 2.7.14</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.7</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: Apple LLVM version 8.1.0 (clang-802.0.42)</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>Problem is that as_graph_def sometimes serialize the type information and sometimes doesn't.</p>\n<h3>Source code / logs</h3>\n<pre><code>import tensorflow as tf\n\n# bool typed Op, no type serialized\nx = tf.placeholder(tf.bool)\ny = tf.placeholder(tf.bool)\nop = tf.logical_or(x, y)\nprint op.graph.as_graph_def(add_shapes=True)\n\n# float typed Op, type serialized\nx = tf.placeholder(tf.float32)\ny = tf.placeholder(tf.float32)\nop = tf.add(x, y)\nprint op.graph.as_graph_def(add_shapes=True)\n</code></pre>\n<p>node for logical_or is, note no <code>T</code> in attr:</p>\n<pre><code>node {\n  name: \"LogicalOr\"\n  op: \"LogicalOr\"\n  input: \"Placeholder\"\n  input: \"Placeholder_1\"\n  attr {\n    key: \"_output_shapes\"\n    value {\n      list {\n        shape {\n          unknown_rank: true\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>node for add is, note with <code>T</code> in attr:</p>\n<pre><code>node {\n  name: \"Add\"\n  op: \"Add\"\n  input: \"Placeholder_2\"\n  input: \"Placeholder_3\"\n  attr {\n    key: \"T\"\n    value {\n      type: DT_FLOAT\n    }\n  }\n  attr {\n    key: \"_output_shapes\"\n    value {\n      list {\n        shape {\n          unknown_rank: true\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>If you print out <code>print tf.logical_or(x, y)</code>, the output is</p>\n<pre><code>Tensor(\"LogicalOr_1:0\", dtype=bool)\n</code></pre>\n<p>So problem might be with the serialization?<br>\nThis seems like a bug to me.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): OSX\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below):  v1.3.0-rc2-20-g0787eee\nPython version: 2.7.14\nBazel version (if compiling from source): 0.7\nGCC/Compiler version (if compiling from source): Apple LLVM version 8.1.0 (clang-802.0.42)\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nProblem is that as_graph_def sometimes serialize the type information and sometimes doesn't.\nSource code / logs\nimport tensorflow as tf\n\n# bool typed Op, no type serialized\nx = tf.placeholder(tf.bool)\ny = tf.placeholder(tf.bool)\nop = tf.logical_or(x, y)\nprint op.graph.as_graph_def(add_shapes=True)\n\n# float typed Op, type serialized\nx = tf.placeholder(tf.float32)\ny = tf.placeholder(tf.float32)\nop = tf.add(x, y)\nprint op.graph.as_graph_def(add_shapes=True)\n\nnode for logical_or is, note no T in attr:\nnode {\n  name: \"LogicalOr\"\n  op: \"LogicalOr\"\n  input: \"Placeholder\"\n  input: \"Placeholder_1\"\n  attr {\n    key: \"_output_shapes\"\n    value {\n      list {\n        shape {\n          unknown_rank: true\n        }\n      }\n    }\n  }\n}\n\nnode for add is, note with T in attr:\nnode {\n  name: \"Add\"\n  op: \"Add\"\n  input: \"Placeholder_2\"\n  input: \"Placeholder_3\"\n  attr {\n    key: \"T\"\n    value {\n      type: DT_FLOAT\n    }\n  }\n  attr {\n    key: \"_output_shapes\"\n    value {\n      list {\n        shape {\n          unknown_rank: true\n        }\n      }\n    }\n  }\n}\n\nIf you print out print tf.logical_or(x, y), the output is\nTensor(\"LogicalOr_1:0\", dtype=bool)\n\nSo problem might be with the serialization?\nThis seems like a bug to me.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: OSX\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**:  v1.3.0-rc2-20-g0787eee\r\n- **Python version**: 2.7.14\r\n- **Bazel version (if compiling from source)**: 0.7\r\n- **GCC/Compiler version (if compiling from source)**: Apple LLVM version 8.1.0 (clang-802.0.42)\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\nProblem is that as_graph_def sometimes serialize the type information and sometimes doesn't.\r\n\r\n### Source code / logs\r\n```\r\nimport tensorflow as tf\r\n\r\n# bool typed Op, no type serialized\r\nx = tf.placeholder(tf.bool)\r\ny = tf.placeholder(tf.bool)\r\nop = tf.logical_or(x, y)\r\nprint op.graph.as_graph_def(add_shapes=True)\r\n\r\n# float typed Op, type serialized\r\nx = tf.placeholder(tf.float32)\r\ny = tf.placeholder(tf.float32)\r\nop = tf.add(x, y)\r\nprint op.graph.as_graph_def(add_shapes=True)\r\n```\r\n\r\nnode for logical_or is, note no `T` in attr:\r\n```\r\nnode {\r\n  name: \"LogicalOr\"\r\n  op: \"LogicalOr\"\r\n  input: \"Placeholder\"\r\n  input: \"Placeholder_1\"\r\n  attr {\r\n    key: \"_output_shapes\"\r\n    value {\r\n      list {\r\n        shape {\r\n          unknown_rank: true\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nnode for add is, note with `T` in attr:\r\n```\r\nnode {\r\n  name: \"Add\"\r\n  op: \"Add\"\r\n  input: \"Placeholder_2\"\r\n  input: \"Placeholder_3\"\r\n  attr {\r\n    key: \"T\"\r\n    value {\r\n      type: DT_FLOAT\r\n    }\r\n  }\r\n  attr {\r\n    key: \"_output_shapes\"\r\n    value {\r\n      list {\r\n        shape {\r\n          unknown_rank: true\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nIf you print out `print tf.logical_or(x, y)`, the output is \r\n```\r\nTensor(\"LogicalOr_1:0\", dtype=bool)\r\n```\r\nSo problem might be with the serialization?\r\nThis seems like a bug to me.\r\n"}