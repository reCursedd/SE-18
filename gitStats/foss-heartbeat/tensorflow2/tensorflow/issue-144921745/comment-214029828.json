{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/214029828", "html_url": "https://github.com/tensorflow/tensorflow/issues/1724#issuecomment-214029828", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1724", "id": 214029828, "node_id": "MDEyOklzc3VlQ29tbWVudDIxNDAyOTgyOA==", "user": {"login": "mufan-li", "id": 11417313, "node_id": "MDQ6VXNlcjExNDE3MzEz", "avatar_url": "https://avatars3.githubusercontent.com/u/11417313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mufan-li", "html_url": "https://github.com/mufan-li", "followers_url": "https://api.github.com/users/mufan-li/followers", "following_url": "https://api.github.com/users/mufan-li/following{/other_user}", "gists_url": "https://api.github.com/users/mufan-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/mufan-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mufan-li/subscriptions", "organizations_url": "https://api.github.com/users/mufan-li/orgs", "repos_url": "https://api.github.com/users/mufan-li/repos", "events_url": "https://api.github.com/users/mufan-li/events{/privacy}", "received_events_url": "https://api.github.com/users/mufan-li/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-24T20:03:55Z", "updated_at": "2016-04-24T20:06:35Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1331470\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mikowals\">@mikowals</a> is correct, tf.cond() seems to be executing both fn1 and fn2 regardless of the condition. I have figured out a work around without using tf.train.ExponentialMovingAverage</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\ninpt = tf.Variable(np.array([1.0]))\ndo_update = tf.placeholder(tf.bool)\n\nprev_ema = tf.Variable(np.array([0.0]))\ndecay = 0.9\n\nnew_ema = (1-decay)*inpt + decay*prev_ema\n\nema = tf.cond(do_update, lambda: new_ema, lambda: prev_ema)\n\nassign_op = prev_ema.assign(ema)\n\nwith tf.control_dependencies([assign_op]):\n    cur_ema = tf.identity(prev_ema)\n</code></pre>\n<p>Notice that now update becomes an assign_op that executes each time, however with a different value. Now I can execute the following with desired behavior</p>\n<pre><code>with tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: False})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: False})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: False})\n    print prev_ema.eval()\n\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n</code></pre>\n<p>Which results in</p>\n<pre><code>[ 0.2]\n[ 0.38]\n[ 0.542]\n[ 0.542]\n[ 0.542]\n[ 0.542]\n[ 0.6878]\n[ 0.81902]\n</code></pre>", "body_text": "@mikowals is correct, tf.cond() seems to be executing both fn1 and fn2 regardless of the condition. I have figured out a work around without using tf.train.ExponentialMovingAverage\nimport tensorflow as tf\nimport numpy as np\n\ninpt = tf.Variable(np.array([1.0]))\ndo_update = tf.placeholder(tf.bool)\n\nprev_ema = tf.Variable(np.array([0.0]))\ndecay = 0.9\n\nnew_ema = (1-decay)*inpt + decay*prev_ema\n\nema = tf.cond(do_update, lambda: new_ema, lambda: prev_ema)\n\nassign_op = prev_ema.assign(ema)\n\nwith tf.control_dependencies([assign_op]):\n    cur_ema = tf.identity(prev_ema)\n\nNotice that now update becomes an assign_op that executes each time, however with a different value. Now I can execute the following with desired behavior\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: False})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: False})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: False})\n    print prev_ema.eval()\n\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n\nWhich results in\n[ 0.2]\n[ 0.38]\n[ 0.542]\n[ 0.542]\n[ 0.542]\n[ 0.542]\n[ 0.6878]\n[ 0.81902]", "body": "@mikowals is correct, tf.cond() seems to be executing both fn1 and fn2 regardless of the condition. I have figured out a work around without using tf.train.ExponentialMovingAverage\n\n```\nimport tensorflow as tf\nimport numpy as np\n\ninpt = tf.Variable(np.array([1.0]))\ndo_update = tf.placeholder(tf.bool)\n\nprev_ema = tf.Variable(np.array([0.0]))\ndecay = 0.9\n\nnew_ema = (1-decay)*inpt + decay*prev_ema\n\nema = tf.cond(do_update, lambda: new_ema, lambda: prev_ema)\n\nassign_op = prev_ema.assign(ema)\n\nwith tf.control_dependencies([assign_op]):\n    cur_ema = tf.identity(prev_ema)\n```\n\nNotice that now update becomes an assign_op that executes each time, however with a different value. Now I can execute the following with desired behavior\n\n```\nwith tf.Session() as sess:\n    sess.run(tf.initialize_all_variables())\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: False})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: False})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: False})\n    print prev_ema.eval()\n\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n    sess.run(cur_ema, {inpt:np.array([2.]), do_update: True})\n    print prev_ema.eval()\n```\n\nWhich results in\n\n```\n[ 0.2]\n[ 0.38]\n[ 0.542]\n[ 0.542]\n[ 0.542]\n[ 0.542]\n[ 0.6878]\n[ 0.81902]\n```\n"}