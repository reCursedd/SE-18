{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6784", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6784/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6784/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6784/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/6784", "id": 200050369, "node_id": "MDExOlB1bGxSZXF1ZXN0MTAxMDM1NTU0", "number": 6784, "title": "Enhance cuda kernel helper.", "user": {"login": "yangyanli", "id": 2976460, "node_id": "MDQ6VXNlcjI5NzY0NjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2976460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yangyanli", "html_url": "https://github.com/yangyanli", "followers_url": "https://api.github.com/users/yangyanli/followers", "following_url": "https://api.github.com/users/yangyanli/following{/other_user}", "gists_url": "https://api.github.com/users/yangyanli/gists{/gist_id}", "starred_url": "https://api.github.com/users/yangyanli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yangyanli/subscriptions", "organizations_url": "https://api.github.com/users/yangyanli/orgs", "repos_url": "https://api.github.com/users/yangyanli/repos", "events_url": "https://api.github.com/users/yangyanli/events{/privacy}", "received_events_url": "https://api.github.com/users/yangyanli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}, {"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "jlebar", "id": 150663, "node_id": "MDQ6VXNlcjE1MDY2Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/150663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlebar", "html_url": "https://github.com/jlebar", "followers_url": "https://api.github.com/users/jlebar/followers", "following_url": "https://api.github.com/users/jlebar/following{/other_user}", "gists_url": "https://api.github.com/users/jlebar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlebar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlebar/subscriptions", "organizations_url": "https://api.github.com/users/jlebar/orgs", "repos_url": "https://api.github.com/users/jlebar/repos", "events_url": "https://api.github.com/users/jlebar/events{/privacy}", "received_events_url": "https://api.github.com/users/jlebar/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jlebar", "id": 150663, "node_id": "MDQ6VXNlcjE1MDY2Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/150663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlebar", "html_url": "https://github.com/jlebar", "followers_url": "https://api.github.com/users/jlebar/followers", "following_url": "https://api.github.com/users/jlebar/following{/other_user}", "gists_url": "https://api.github.com/users/jlebar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlebar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlebar/subscriptions", "organizations_url": "https://api.github.com/users/jlebar/orgs", "repos_url": "https://api.github.com/users/jlebar/repos", "events_url": "https://api.github.com/users/jlebar/events{/privacy}", "received_events_url": "https://api.github.com/users/jlebar/received_events", "type": "User", "site_admin": false}, {"login": "zheng-xq", "id": 15736910, "node_id": "MDQ6VXNlcjE1NzM2OTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/15736910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zheng-xq", "html_url": "https://github.com/zheng-xq", "followers_url": "https://api.github.com/users/zheng-xq/followers", "following_url": "https://api.github.com/users/zheng-xq/following{/other_user}", "gists_url": "https://api.github.com/users/zheng-xq/gists{/gist_id}", "starred_url": "https://api.github.com/users/zheng-xq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zheng-xq/subscriptions", "organizations_url": "https://api.github.com/users/zheng-xq/orgs", "repos_url": "https://api.github.com/users/zheng-xq/repos", "events_url": "https://api.github.com/users/zheng-xq/events{/privacy}", "received_events_url": "https://api.github.com/users/zheng-xq/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 17, "created_at": "2017-01-11T10:04:46Z", "updated_at": "2017-02-17T00:32:21Z", "closed_at": "2017-02-17T00:32:21Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6784", "html_url": "https://github.com/tensorflow/tensorflow/pull/6784", "diff_url": "https://github.com/tensorflow/tensorflow/pull/6784.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/6784.patch"}, "body_html": "<p>Changes on functionality:</p>\n<ol>\n<li>Use native atomicAdd for double if <code>__CUDA_ARCH__ &gt;= 600</code>.</li>\n<li>Add max wrappers for float, double and Eigen::half.</li>\n<li>Add <code>SetConstant</code> and <code>ReplaceValue</code> kernels. They are useful for example, when doing element-wise max: <code>SetConstant</code> to MIN, do max(), then <code>ReplaceValue</code> MIN with some friendly values, like zeros.</li>\n</ol>\n<p>Changes on readability:</p>\n<ol>\n<li><code>SetZero(const int nthreads, T* bottom_diff)</code> to <code>SetZero(const int nthreads, T* data)</code>, <code>bottom_diff</code> maybe is from Caffe ;-), and is irrelevant here.</li>\n<li>Reorder Add and Max wrappers, to make them better grouped together.</li>\n</ol>", "body_text": "Changes on functionality:\n\nUse native atomicAdd for double if __CUDA_ARCH__ >= 600.\nAdd max wrappers for float, double and Eigen::half.\nAdd SetConstant and ReplaceValue kernels. They are useful for example, when doing element-wise max: SetConstant to MIN, do max(), then ReplaceValue MIN with some friendly values, like zeros.\n\nChanges on readability:\n\nSetZero(const int nthreads, T* bottom_diff) to SetZero(const int nthreads, T* data), bottom_diff maybe is from Caffe ;-), and is irrelevant here.\nReorder Add and Max wrappers, to make them better grouped together.", "body": "Changes on functionality:\r\n1. Use native atomicAdd for double if `__CUDA_ARCH__ >= 600`.\r\n2. Add max wrappers for float, double and Eigen::half.\r\n3. Add `SetConstant` and `ReplaceValue` kernels. They are useful for example, when doing element-wise max: `SetConstant` to MIN, do max(), then `ReplaceValue` MIN with some friendly values, like zeros.\r\n\r\nChanges on readability:\r\n1. `SetZero(const int nthreads, T* bottom_diff)` to `SetZero(const int nthreads, T* data)`, `bottom_diff` maybe is from Caffe ;-), and is irrelevant here.\r\n2. Reorder Add and Max wrappers, to make them better grouped together."}