{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/219288321", "html_url": "https://github.com/tensorflow/tensorflow/issues/2328#issuecomment-219288321", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2328", "id": 219288321, "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTI4ODMyMQ==", "user": {"login": "rdadolf", "id": 6673605, "node_id": "MDQ6VXNlcjY2NzM2MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6673605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdadolf", "html_url": "https://github.com/rdadolf", "followers_url": "https://api.github.com/users/rdadolf/followers", "following_url": "https://api.github.com/users/rdadolf/following{/other_user}", "gists_url": "https://api.github.com/users/rdadolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdadolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdadolf/subscriptions", "organizations_url": "https://api.github.com/users/rdadolf/orgs", "repos_url": "https://api.github.com/users/rdadolf/repos", "events_url": "https://api.github.com/users/rdadolf/events{/privacy}", "received_events_url": "https://api.github.com/users/rdadolf/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-15T14:16:17Z", "updated_at": "2016-05-15T14:16:17Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>I don't see why type errors become logical errors - they'll just point to the nested object instead of the root.</p>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=691536\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vladfi1\">@vladfi1</a> The type errors I'm talking about are dimension mismatch due to extra or insufficient nesting. Consider the following exceedingly contrived example:</p>\n<pre><code>x = tf.constant([1,2])\ny = tf.constant([1,2])\nx = tf.constant(x)\ny = tf.constant([y]) # oops\nw = tf.constant([[1,2,],[3,4]])\nprint tf.Session().run( tf.add(w, tf.reduce_max(x,0)) )\nprint tf.Session().run( tf.add(w, tf.reduce_max(y,0)) )\n</code></pre>\n<p>Currently, TF gives you a type error; in the proposed extension, this silently gives you the wrong answer (i.e., it becomes a logical error). This is obviously not real code, but imagine having an n-dim tensor accidentally becoming an n+1 dim tensor whilst threading through a larger body of code, and it can easily end up costing you a day of hunting down the bug.</p>\n<p>I'm not suggesting that we put every TF programmer into a padded room to protect them from themselves, but I feel that libraries which try to make everything convertible to everything else end up a mess to debug. This kind of error protection is the reason behind type systems. We should take advantage of it!</p>\n<blockquote>\n<p>In any case, the current behavior allows both python objects and tensors, just not mixed - I assume this is done with an implicit call to convert_to_tensor, so any improvements to convert_to_tensor should carry over to all its use-sites.</p>\n</blockquote>\n<p>This isn't actually the case. The error stems from <a href=\"https://github.com/tensorflow/tensorflow/blob/17dcc5a176d152caec570452d28fb94920cceb8c/tensorflow/python/framework/tensor_util.py#L273\">here</a>, which is used by <a href=\"https://github.com/tensorflow/tensorflow/blob/17dcc5a176d152caec570452d28fb94920cceb8c/tensorflow/python/framework/tensor_util.py#L284\">this</a>, which is used directly by ops (e.g., <a href=\"https://github.com/tensorflow/tensorflow/blob/17dcc5a176d152caec570452d28fb94920cceb8c/tensorflow/python/ops/constant_op.py#L162\">here</a>). Then there is a whole separate set of conversion routines in the <a href=\"https://github.com/tensorflow/tensorflow/blob/82ff4cd8b0d541ede107d34d8eecc769c91dda11/tensorflow/python/framework/ops.py#L520\">tensor conversion registry</a>, which is <a href=\"https://github.com/tensorflow/tensorflow/blob/82ff4cd8b0d541ede107d34d8eecc769c91dda11/tensorflow/python/framework/ops.py#L569\">also used</a> by <code>convert_to_tensor</code>. And as mentioned in the other thread, this is also separate from <code>tf.Session().run()</code>'s feed dict conversion registry.</p>", "body_text": "I don't see why type errors become logical errors - they'll just point to the nested object instead of the root.\n\n@vladfi1 The type errors I'm talking about are dimension mismatch due to extra or insufficient nesting. Consider the following exceedingly contrived example:\nx = tf.constant([1,2])\ny = tf.constant([1,2])\nx = tf.constant(x)\ny = tf.constant([y]) # oops\nw = tf.constant([[1,2,],[3,4]])\nprint tf.Session().run( tf.add(w, tf.reduce_max(x,0)) )\nprint tf.Session().run( tf.add(w, tf.reduce_max(y,0)) )\n\nCurrently, TF gives you a type error; in the proposed extension, this silently gives you the wrong answer (i.e., it becomes a logical error). This is obviously not real code, but imagine having an n-dim tensor accidentally becoming an n+1 dim tensor whilst threading through a larger body of code, and it can easily end up costing you a day of hunting down the bug.\nI'm not suggesting that we put every TF programmer into a padded room to protect them from themselves, but I feel that libraries which try to make everything convertible to everything else end up a mess to debug. This kind of error protection is the reason behind type systems. We should take advantage of it!\n\nIn any case, the current behavior allows both python objects and tensors, just not mixed - I assume this is done with an implicit call to convert_to_tensor, so any improvements to convert_to_tensor should carry over to all its use-sites.\n\nThis isn't actually the case. The error stems from here, which is used by this, which is used directly by ops (e.g., here). Then there is a whole separate set of conversion routines in the tensor conversion registry, which is also used by convert_to_tensor. And as mentioned in the other thread, this is also separate from tf.Session().run()'s feed dict conversion registry.", "body": "> I don't see why type errors become logical errors - they'll just point to the nested object instead of the root.\n\n@vladfi1 The type errors I'm talking about are dimension mismatch due to extra or insufficient nesting. Consider the following exceedingly contrived example:\n\n```\nx = tf.constant([1,2])\ny = tf.constant([1,2])\nx = tf.constant(x)\ny = tf.constant([y]) # oops\nw = tf.constant([[1,2,],[3,4]])\nprint tf.Session().run( tf.add(w, tf.reduce_max(x,0)) )\nprint tf.Session().run( tf.add(w, tf.reduce_max(y,0)) )\n```\n\nCurrently, TF gives you a type error; in the proposed extension, this silently gives you the wrong answer (i.e., it becomes a logical error). This is obviously not real code, but imagine having an n-dim tensor accidentally becoming an n+1 dim tensor whilst threading through a larger body of code, and it can easily end up costing you a day of hunting down the bug.\n\nI'm not suggesting that we put every TF programmer into a padded room to protect them from themselves, but I feel that libraries which try to make everything convertible to everything else end up a mess to debug. This kind of error protection is the reason behind type systems. We should take advantage of it!\n\n>  In any case, the current behavior allows both python objects and tensors, just not mixed - I assume this is done with an implicit call to convert_to_tensor, so any improvements to convert_to_tensor should carry over to all its use-sites.\n\nThis isn't actually the case. The error stems from [here](https://github.com/tensorflow/tensorflow/blob/17dcc5a176d152caec570452d28fb94920cceb8c/tensorflow/python/framework/tensor_util.py#L273), which is used by [this](https://github.com/tensorflow/tensorflow/blob/17dcc5a176d152caec570452d28fb94920cceb8c/tensorflow/python/framework/tensor_util.py#L284), which is used directly by ops (e.g., [here](https://github.com/tensorflow/tensorflow/blob/17dcc5a176d152caec570452d28fb94920cceb8c/tensorflow/python/ops/constant_op.py#L162)). Then there is a whole separate set of conversion routines in the [tensor conversion registry](https://github.com/tensorflow/tensorflow/blob/82ff4cd8b0d541ede107d34d8eecc769c91dda11/tensorflow/python/framework/ops.py#L520), which is [also used](https://github.com/tensorflow/tensorflow/blob/82ff4cd8b0d541ede107d34d8eecc769c91dda11/tensorflow/python/framework/ops.py#L569) by `convert_to_tensor`. And as mentioned in the other thread, this is also separate from `tf.Session().run()`'s feed dict conversion registry.\n"}