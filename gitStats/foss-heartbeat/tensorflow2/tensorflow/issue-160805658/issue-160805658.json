{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2922", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2922/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2922/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2922/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2922", "id": 160805658, "node_id": "MDU6SXNzdWUxNjA4MDU2NTg=", "number": 2922, "title": "iris_custom_decay_dnn.py does not work", "user": {"login": "d3vv3d", "id": 16637202, "node_id": "MDQ6VXNlcjE2NjM3MjAy", "avatar_url": "https://avatars2.githubusercontent.com/u/16637202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d3vv3d", "html_url": "https://github.com/d3vv3d", "followers_url": "https://api.github.com/users/d3vv3d/followers", "following_url": "https://api.github.com/users/d3vv3d/following{/other_user}", "gists_url": "https://api.github.com/users/d3vv3d/gists{/gist_id}", "starred_url": "https://api.github.com/users/d3vv3d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d3vv3d/subscriptions", "organizations_url": "https://api.github.com/users/d3vv3d/orgs", "repos_url": "https://api.github.com/users/d3vv3d/repos", "events_url": "https://api.github.com/users/d3vv3d/events{/privacy}", "received_events_url": "https://api.github.com/users/d3vv3d/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ilblackdragon", "id": 175486, "node_id": "MDQ6VXNlcjE3NTQ4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/175486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilblackdragon", "html_url": "https://github.com/ilblackdragon", "followers_url": "https://api.github.com/users/ilblackdragon/followers", "following_url": "https://api.github.com/users/ilblackdragon/following{/other_user}", "gists_url": "https://api.github.com/users/ilblackdragon/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilblackdragon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilblackdragon/subscriptions", "organizations_url": "https://api.github.com/users/ilblackdragon/orgs", "repos_url": "https://api.github.com/users/ilblackdragon/repos", "events_url": "https://api.github.com/users/ilblackdragon/events{/privacy}", "received_events_url": "https://api.github.com/users/ilblackdragon/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ilblackdragon", "id": 175486, "node_id": "MDQ6VXNlcjE3NTQ4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/175486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilblackdragon", "html_url": "https://github.com/ilblackdragon", "followers_url": "https://api.github.com/users/ilblackdragon/followers", "following_url": "https://api.github.com/users/ilblackdragon/following{/other_user}", "gists_url": "https://api.github.com/users/ilblackdragon/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilblackdragon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilblackdragon/subscriptions", "organizations_url": "https://api.github.com/users/ilblackdragon/orgs", "repos_url": "https://api.github.com/users/ilblackdragon/repos", "events_url": "https://api.github.com/users/ilblackdragon/events{/privacy}", "received_events_url": "https://api.github.com/users/ilblackdragon/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2016-06-17T03:33:43Z", "updated_at": "2016-11-19T23:11:19Z", "closed_at": "2016-10-28T04:35:32Z", "author_association": "NONE", "body_html": "<p>The code below is the current version of iris_custom_decay_dnn.py. The custom decay portion of which does not appear to work as whenever I run it I get the Traceback below. Through so light testing I discovered that the code works when the custom decay portion is removed.</p>\n<h1>iris_custom_decay_dnn.py</h1>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> sklearn <span class=\"pl-k\">import</span> datasets, metrics\n<span class=\"pl-k\">from</span> sklearn.cross_validation <span class=\"pl-k\">import</span> train_test_split\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\niris <span class=\"pl-k\">=</span> datasets.load_iris()\nX_train, X_test, y_train, y_test <span class=\"pl-k\">=</span> train_test_split(iris.data,\n                                                    iris.target,\n                                                    <span class=\"pl-v\">test_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.2</span>,\n                                                    <span class=\"pl-v\">random_state</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">42</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>setup exponential decay function</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">exp_decay</span>(<span class=\"pl-smi\">global_step</span>):\n    <span class=\"pl-k\">return</span> tf.train.exponential_decay(\n        <span class=\"pl-v\">learning_rate</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.1</span>, <span class=\"pl-v\">global_step</span><span class=\"pl-k\">=</span>global_step,\n        <span class=\"pl-v\">decay_steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">100</span>, <span class=\"pl-v\">decay_rate</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.001</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> use customized decay function in learning_rate</span>\noptimizer <span class=\"pl-k\">=</span> tf.train.AdagradOptimizer(<span class=\"pl-v\">learning_rate</span><span class=\"pl-k\">=</span>exp_decay)\nclassifier <span class=\"pl-k\">=</span> tf.contrib.learn.DNNClassifier(<span class=\"pl-v\">hidden_units</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">10</span>],\n                                            <span class=\"pl-v\">n_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>,\n                                            <span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span>optimizer)\nclassifier.fit(X_train, y_train, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">800</span>)\nscore <span class=\"pl-k\">=</span> metrics.accuracy_score(y_test, classifier.predict(X_test))</pre></div>\n<h1>Traceback</h1>\n<p>Traceback (most recent call last):<br>\nFile \"/home/d3v/Py/SkFlow Iris DNN.py\", line 22, in <br>\nclassifier.fit(X_train, y_train, steps=800)<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 182, in fit<br>\nmonitors=monitors)<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 449, in _train_model<br>\ntrain_op, loss_op = self._get_train_ops(features, targets)<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/dnn.py\", line 113, in _get_train_ops<br>\nreturn super(DNNClassifier, self)._get_train_ops(features, targets)<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 170, in _get_train_ops<br>\ndnn_vars)<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 356, in _get_dnn_training_ops<br>\nreturn [self._dnn_optimizer.apply_gradients(zip(dnn_grads, dnn_vars))]<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/optimizer.py\", line 300, in apply_gradients<br>\nself._prepare()<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/adagrad.py\", line 70, in _prepare<br>\nname=\"learning_rate\")<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 620, in convert_to_tensor<br>\nret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/constant_op.py\", line 179, in _constant_tensor_conversion_function<br>\nreturn constant(v, dtype=dtype, name=name)<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/constant_op.py\", line 162, in constant<br>\ntensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_util.py\", line 421, in make_tensor_proto<br>\ntensor_proto.string_val.extend([compat.as_bytes(x) for x in proto_values])<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_util.py\", line 421, in <br>\ntensor_proto.string_val.extend([compat.as_bytes(x) for x in proto_values])<br>\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/util/compat.py\", line 44, in as_bytes<br>\nraise TypeError('Expected binary or unicode string, got %r' % bytes_or_text)<br>\nTypeError: Expected binary or unicode string, got &lt;function exp_decay at 0x7f84e7161e18&gt;</p>", "body_text": "The code below is the current version of iris_custom_decay_dnn.py. The custom decay portion of which does not appear to work as whenever I run it I get the Traceback below. Through so light testing I discovered that the code works when the custom decay portion is removed.\niris_custom_decay_dnn.py\nfrom sklearn import datasets, metrics\nfrom sklearn.cross_validation import train_test_split\n\nimport tensorflow as tf\n\niris = datasets.load_iris()\nX_train, X_test, y_train, y_test = train_test_split(iris.data,\n                                                    iris.target,\n                                                    test_size=0.2,\n                                                    random_state=42)\n#setup exponential decay function\ndef exp_decay(global_step):\n    return tf.train.exponential_decay(\n        learning_rate=0.1, global_step=global_step,\n        decay_steps=100, decay_rate=0.001)\n\n# use customized decay function in learning_rate\noptimizer = tf.train.AdagradOptimizer(learning_rate=exp_decay)\nclassifier = tf.contrib.learn.DNNClassifier(hidden_units=[10, 20, 10],\n                                            n_classes=3,\n                                            optimizer=optimizer)\nclassifier.fit(X_train, y_train, steps=800)\nscore = metrics.accuracy_score(y_test, classifier.predict(X_test))\nTraceback\nTraceback (most recent call last):\nFile \"/home/d3v/Py/SkFlow Iris DNN.py\", line 22, in \nclassifier.fit(X_train, y_train, steps=800)\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 182, in fit\nmonitors=monitors)\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 449, in _train_model\ntrain_op, loss_op = self._get_train_ops(features, targets)\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/dnn.py\", line 113, in _get_train_ops\nreturn super(DNNClassifier, self)._get_train_ops(features, targets)\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 170, in _get_train_ops\ndnn_vars)\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 356, in _get_dnn_training_ops\nreturn [self._dnn_optimizer.apply_gradients(zip(dnn_grads, dnn_vars))]\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/optimizer.py\", line 300, in apply_gradients\nself._prepare()\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/adagrad.py\", line 70, in _prepare\nname=\"learning_rate\")\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 620, in convert_to_tensor\nret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/constant_op.py\", line 179, in _constant_tensor_conversion_function\nreturn constant(v, dtype=dtype, name=name)\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/constant_op.py\", line 162, in constant\ntensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_util.py\", line 421, in make_tensor_proto\ntensor_proto.string_val.extend([compat.as_bytes(x) for x in proto_values])\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_util.py\", line 421, in \ntensor_proto.string_val.extend([compat.as_bytes(x) for x in proto_values])\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/util/compat.py\", line 44, in as_bytes\nraise TypeError('Expected binary or unicode string, got %r' % bytes_or_text)\nTypeError: Expected binary or unicode string, got <function exp_decay at 0x7f84e7161e18>", "body": "The code below is the current version of iris_custom_decay_dnn.py. The custom decay portion of which does not appear to work as whenever I run it I get the Traceback below. Through so light testing I discovered that the code works when the custom decay portion is removed.\n# iris_custom_decay_dnn.py\n\n``` python\nfrom sklearn import datasets, metrics\nfrom sklearn.cross_validation import train_test_split\n\nimport tensorflow as tf\n\niris = datasets.load_iris()\nX_train, X_test, y_train, y_test = train_test_split(iris.data,\n                                                    iris.target,\n                                                    test_size=0.2,\n                                                    random_state=42)\n#setup exponential decay function\ndef exp_decay(global_step):\n    return tf.train.exponential_decay(\n        learning_rate=0.1, global_step=global_step,\n        decay_steps=100, decay_rate=0.001)\n\n# use customized decay function in learning_rate\noptimizer = tf.train.AdagradOptimizer(learning_rate=exp_decay)\nclassifier = tf.contrib.learn.DNNClassifier(hidden_units=[10, 20, 10],\n                                            n_classes=3,\n                                            optimizer=optimizer)\nclassifier.fit(X_train, y_train, steps=800)\nscore = metrics.accuracy_score(y_test, classifier.predict(X_test))\n```\n# Traceback\n\nTraceback (most recent call last):\n  File \"/home/d3v/Py/SkFlow Iris DNN.py\", line 22, in <module>\n    classifier.fit(X_train, y_train, steps=800)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 182, in fit\n    monitors=monitors)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 449, in _train_model\n    train_op, loss_op = self._get_train_ops(features, targets)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/dnn.py\", line 113, in _get_train_ops\n    return super(DNNClassifier, self)._get_train_ops(features, targets)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 170, in _get_train_ops\n    dnn_vars)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/learn/python/learn/estimators/dnn_linear_combined.py\", line 356, in _get_dnn_training_ops\n    return [self._dnn_optimizer.apply_gradients(zip(dnn_grads, dnn_vars))]\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/optimizer.py\", line 300, in apply_gradients\n    self._prepare()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/adagrad.py\", line 70, in _prepare\n    name=\"learning_rate\")\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 620, in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/constant_op.py\", line 179, in _constant_tensor_conversion_function\n    return constant(v, dtype=dtype, name=name)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/constant_op.py\", line 162, in constant\n    tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_util.py\", line 421, in make_tensor_proto\n    tensor_proto.string_val.extend([compat.as_bytes(x) for x in proto_values])\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/tensor_util.py\", line 421, in <listcomp>\n    tensor_proto.string_val.extend([compat.as_bytes(x) for x in proto_values])\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/util/compat.py\", line 44, in as_bytes\n    raise TypeError('Expected binary or unicode string, got %r' % bytes_or_text)\nTypeError: Expected binary or unicode string, got <function exp_decay at 0x7f84e7161e18>\n"}