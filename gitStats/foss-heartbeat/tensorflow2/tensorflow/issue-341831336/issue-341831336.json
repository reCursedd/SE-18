{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20874", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20874/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20874/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20874/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20874", "id": 341831336, "node_id": "MDU6SXNzdWUzNDE4MzEzMzY=", "number": 20874, "title": "Error when using batch_norm with MirroredStrategy", "user": {"login": "jdvylder", "id": 30600355, "node_id": "MDQ6VXNlcjMwNjAwMzU1", "avatar_url": "https://avatars1.githubusercontent.com/u/30600355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdvylder", "html_url": "https://github.com/jdvylder", "followers_url": "https://api.github.com/users/jdvylder/followers", "following_url": "https://api.github.com/users/jdvylder/following{/other_user}", "gists_url": "https://api.github.com/users/jdvylder/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdvylder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdvylder/subscriptions", "organizations_url": "https://api.github.com/users/jdvylder/orgs", "repos_url": "https://api.github.com/users/jdvylder/repos", "events_url": "https://api.github.com/users/jdvylder/events{/privacy}", "received_events_url": "https://api.github.com/users/jdvylder/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 996845227, "node_id": "MDU6TGFiZWw5OTY4NDUyMjc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:dist-strat", "name": "comp:dist-strat", "color": "0052cc", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "yuefengz", "id": 1647833, "node_id": "MDQ6VXNlcjE2NDc4MzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1647833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuefengz", "html_url": "https://github.com/yuefengz", "followers_url": "https://api.github.com/users/yuefengz/followers", "following_url": "https://api.github.com/users/yuefengz/following{/other_user}", "gists_url": "https://api.github.com/users/yuefengz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuefengz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuefengz/subscriptions", "organizations_url": "https://api.github.com/users/yuefengz/orgs", "repos_url": "https://api.github.com/users/yuefengz/repos", "events_url": "https://api.github.com/users/yuefengz/events{/privacy}", "received_events_url": "https://api.github.com/users/yuefengz/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "yuefengz", "id": 1647833, "node_id": "MDQ6VXNlcjE2NDc4MzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1647833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuefengz", "html_url": "https://github.com/yuefengz", "followers_url": "https://api.github.com/users/yuefengz/followers", "following_url": "https://api.github.com/users/yuefengz/following{/other_user}", "gists_url": "https://api.github.com/users/yuefengz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuefengz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuefengz/subscriptions", "organizations_url": "https://api.github.com/users/yuefengz/orgs", "repos_url": "https://api.github.com/users/yuefengz/repos", "events_url": "https://api.github.com/users/yuefengz/events{/privacy}", "received_events_url": "https://api.github.com/users/yuefengz/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-07-17T09:10:47Z", "updated_at": "2018-11-10T21:34:01Z", "closed_at": "2018-10-19T06:07:15Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<p>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes<br>\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04<br>\nTensorFlow installed from (source or binary): using nvidia containter: <a href=\"https://docs.nvidia.com/deeplearning/dgx/tensorflow-release-notes/rel_18.06.html#rel_18.06\" rel=\"nofollow\">https://docs.nvidia.com/deeplearning/dgx/tensorflow-release-notes/rel_18.06.html#rel_18.06</a><br>\nTensorFlow version (use command below):1.8.0<br>\nPython version: 3.5<br>\nBazel version (if compiling from source): N/A<br>\nGCC/Compiler version (if compiling from source): N/A<br>\nCUDA/cuDNN version: 9.0.176<br>\nGPU model and memory: nvidia tesla v100<br>\nExact command to reproduce: N/A</p>\n<h3>Describe the problem</h3>\n<p>I want to apply transfer learning using an existing pretrained network (inception v4). For this I use the tf-slim models. When running this on a single GPU, This works as expected, however when using <code>tf.contrib.distribute.MirroredStrategy</code>  I get an exception. Apparently the MirroredStrategy has some issues with batch_norm</p>\n<h3>Source code / logs</h3>\n<p>I tried to extract the relevant part from my code:</p>\n<pre><code>import research.slim.nets.nets_factory as nets_factory\n\n...\n\ndef construct_architecture(self, input_tensor, mode):\n        # network topology\n        network_fn = nets_factory.get_network_fn('inception_v4', num_classes=self.configuration.get(\"nr_classes\"),\n                                                      is_training=True)\n        logits,_ = network_fn(input_tensor)\n\n        if mode == tf.estimator.ModeKeys.PREDICT:\n            predicted_classes = tf.argmax(logits, 1)\n            predictions = {\n                'class_ids': predicted_classes[:, tf.newaxis],\n                'probabilities': tf.nn.softmax(logits),\n                'logits': logits,\n            }\n            self.output_tensor = predictions\n        else:\n            self.output_tensor = logits\n</code></pre>\n<p>This results in the following error trace:</p>\n<pre><code>Traceback (most recent call last):\n  File \"train.py\", line 27, in &lt;module&gt;\n    experimenter.run_training_experiment(config)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 39, in run_training_experiment\n    tf.estimator.train_and_evaluate(self.trainer, self.training_specs, self.eval_specs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 451, in train_and_evaluate\n    return executor.run()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 590, in run\n    return self.run_local()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 691, in run_local\n    saving_listeners=saving_listeners)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 376, in train\n    loss = self._train_model(input_fn, hooks, saving_listeners)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1143, in _train_model\n    return self._train_model_distributed(input_fn, hooks, saving_listeners)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1255, in _train_model_distributed\n    self.config)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/distribute.py\", line 777, in call_for_each_tower\n    return self._call_for_each_tower(fn, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 308, in _call_for_each_tower\n    coord.join(threads)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 389, in join\n    six.reraise(*self._exc_info_to_raise)\n  File \"/usr/local/onnx/six.py\", line 693, in reraise\n    raise value\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\n    yield\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 519, in run\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1133, in _call_model_fn\n    model_fn_results = self._model_fn(features=features, **kwargs)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 111, in get_model_fn\n    self.configure_network(input_tensor=features, output_tensor=labels, mode=mode)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 75, in configure_network\n    self.network.construct_network(input_tensor=input_tensor, output_tensor=output_tensor, mode=mode)\n  File \"/media/local/myfiles/mynetwork.py\", line 64, in construct_network\n    self.construct_architecture(input_tensor=input_tensor,mode=mode)\n  File \"/media/local/myfiles/mynetwork.py\", line 48, in construct_architecture\n    logits,_ = network_fn(input_tensor)\n  File \"/opt/tf-slim/models/research/slim/nets/nets_factory.py\", line 141, in network_fn\n    return func(images, num_classes, is_training=is_training, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/slim-0.1-py3.5.egg/nets/inception_v4.py\", line 286, in inception_v4\n  File \"/usr/local/lib/python3.5/dist-packages/slim-0.1-py3.5.egg/nets/inception_v4.py\", line 178, in inception_v4_base\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py\", line 183, in func_with_args\n    return func(*args, **current_args)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py\", line 1154, in convolution2d\n    conv_dims=2)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py\", line 183, in func_with_args\n    return func(*args, **current_args)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py\", line 1066, in convolution\n    outputs = normalizer_fn(outputs, **normalizer_params)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py\", line 183, in func_with_args\n    return func(*args, **current_args)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py\", line 650, in batch_norm\n    outputs = layer.apply(inputs, training=is_training)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 805, in apply\n    return self.__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 362, in __call__\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 736, in __call__\n    outputs = self.call(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/normalization.py\", line 158, in call\n    return super(BatchNormalization, self).call(inputs, training=training)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/normalization.py\", line 514, in call\n    outputs = self._fused_batch_norm(inputs, training=training)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/normalization.py\", line 420, in _fused_batch_norm\n    momentum)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/normalization.py\", line 369, in _assign_moving_average\n    with ops.colocate_with(variable):\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\n    return next(self.gen)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 3939, in _colocate_with_for_gradient\n    with self.colocate_with(op, ignore_existing):\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\n    return next(self.gen)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 3992, in colocate_with\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1255, in internal_convert_to_tensor_or_indexed_slices\n    value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1094, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 414, in _tensor_conversion_mirrored\n    assert not as_ref\nAssertionError\n</code></pre>\n<p>Thanks for the help</p>\n<p>Jonas</p>", "body_text": "System information\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): using nvidia containter: https://docs.nvidia.com/deeplearning/dgx/tensorflow-release-notes/rel_18.06.html#rel_18.06\nTensorFlow version (use command below):1.8.0\nPython version: 3.5\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: 9.0.176\nGPU model and memory: nvidia tesla v100\nExact command to reproduce: N/A\nDescribe the problem\nI want to apply transfer learning using an existing pretrained network (inception v4). For this I use the tf-slim models. When running this on a single GPU, This works as expected, however when using tf.contrib.distribute.MirroredStrategy  I get an exception. Apparently the MirroredStrategy has some issues with batch_norm\nSource code / logs\nI tried to extract the relevant part from my code:\nimport research.slim.nets.nets_factory as nets_factory\n\n...\n\ndef construct_architecture(self, input_tensor, mode):\n        # network topology\n        network_fn = nets_factory.get_network_fn('inception_v4', num_classes=self.configuration.get(\"nr_classes\"),\n                                                      is_training=True)\n        logits,_ = network_fn(input_tensor)\n\n        if mode == tf.estimator.ModeKeys.PREDICT:\n            predicted_classes = tf.argmax(logits, 1)\n            predictions = {\n                'class_ids': predicted_classes[:, tf.newaxis],\n                'probabilities': tf.nn.softmax(logits),\n                'logits': logits,\n            }\n            self.output_tensor = predictions\n        else:\n            self.output_tensor = logits\n\nThis results in the following error trace:\nTraceback (most recent call last):\n  File \"train.py\", line 27, in <module>\n    experimenter.run_training_experiment(config)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 39, in run_training_experiment\n    tf.estimator.train_and_evaluate(self.trainer, self.training_specs, self.eval_specs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 451, in train_and_evaluate\n    return executor.run()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 590, in run\n    return self.run_local()\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 691, in run_local\n    saving_listeners=saving_listeners)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 376, in train\n    loss = self._train_model(input_fn, hooks, saving_listeners)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1143, in _train_model\n    return self._train_model_distributed(input_fn, hooks, saving_listeners)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1255, in _train_model_distributed\n    self.config)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/distribute.py\", line 777, in call_for_each_tower\n    return self._call_for_each_tower(fn, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 308, in _call_for_each_tower\n    coord.join(threads)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 389, in join\n    six.reraise(*self._exc_info_to_raise)\n  File \"/usr/local/onnx/six.py\", line 693, in reraise\n    raise value\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\n    yield\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 519, in run\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1133, in _call_model_fn\n    model_fn_results = self._model_fn(features=features, **kwargs)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 111, in get_model_fn\n    self.configure_network(input_tensor=features, output_tensor=labels, mode=mode)\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 75, in configure_network\n    self.network.construct_network(input_tensor=input_tensor, output_tensor=output_tensor, mode=mode)\n  File \"/media/local/myfiles/mynetwork.py\", line 64, in construct_network\n    self.construct_architecture(input_tensor=input_tensor,mode=mode)\n  File \"/media/local/myfiles/mynetwork.py\", line 48, in construct_architecture\n    logits,_ = network_fn(input_tensor)\n  File \"/opt/tf-slim/models/research/slim/nets/nets_factory.py\", line 141, in network_fn\n    return func(images, num_classes, is_training=is_training, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/slim-0.1-py3.5.egg/nets/inception_v4.py\", line 286, in inception_v4\n  File \"/usr/local/lib/python3.5/dist-packages/slim-0.1-py3.5.egg/nets/inception_v4.py\", line 178, in inception_v4_base\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py\", line 183, in func_with_args\n    return func(*args, **current_args)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py\", line 1154, in convolution2d\n    conv_dims=2)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py\", line 183, in func_with_args\n    return func(*args, **current_args)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py\", line 1066, in convolution\n    outputs = normalizer_fn(outputs, **normalizer_params)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py\", line 183, in func_with_args\n    return func(*args, **current_args)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py\", line 650, in batch_norm\n    outputs = layer.apply(inputs, training=is_training)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 805, in apply\n    return self.__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 362, in __call__\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 736, in __call__\n    outputs = self.call(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/normalization.py\", line 158, in call\n    return super(BatchNormalization, self).call(inputs, training=training)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/normalization.py\", line 514, in call\n    outputs = self._fused_batch_norm(inputs, training=training)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/normalization.py\", line 420, in _fused_batch_norm\n    momentum)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/normalization.py\", line 369, in _assign_moving_average\n    with ops.colocate_with(variable):\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\n    return next(self.gen)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 3939, in _colocate_with_for_gradient\n    with self.colocate_with(op, ignore_existing):\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\n    return next(self.gen)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 3992, in colocate_with\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1255, in internal_convert_to_tensor_or_indexed_slices\n    value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1094, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 414, in _tensor_conversion_mirrored\n    assert not as_ref\nAssertionError\n\nThanks for the help\nJonas", "body": "### System information\r\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\r\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\r\nTensorFlow installed from (source or binary): using nvidia containter: https://docs.nvidia.com/deeplearning/dgx/tensorflow-release-notes/rel_18.06.html#rel_18.06\r\nTensorFlow version (use command below):1.8.0\r\nPython version: 3.5\r\nBazel version (if compiling from source): N/A\r\nGCC/Compiler version (if compiling from source): N/A\r\nCUDA/cuDNN version: 9.0.176\r\nGPU model and memory: nvidia tesla v100\r\nExact command to reproduce: N/A\r\n\r\n### Describe the problem\r\nI want to apply transfer learning using an existing pretrained network (inception v4). For this I use the tf-slim models. When running this on a single GPU, This works as expected, however when using `tf.contrib.distribute.MirroredStrategy`  I get an exception. Apparently the MirroredStrategy has some issues with batch_norm\r\n\r\n### Source code / logs\r\nI tried to extract the relevant part from my code:\r\n```\r\nimport research.slim.nets.nets_factory as nets_factory\r\n\r\n...\r\n\r\ndef construct_architecture(self, input_tensor, mode):\r\n        # network topology\r\n        network_fn = nets_factory.get_network_fn('inception_v4', num_classes=self.configuration.get(\"nr_classes\"),\r\n                                                      is_training=True)\r\n        logits,_ = network_fn(input_tensor)\r\n\r\n        if mode == tf.estimator.ModeKeys.PREDICT:\r\n            predicted_classes = tf.argmax(logits, 1)\r\n            predictions = {\r\n                'class_ids': predicted_classes[:, tf.newaxis],\r\n                'probabilities': tf.nn.softmax(logits),\r\n                'logits': logits,\r\n            }\r\n            self.output_tensor = predictions\r\n        else:\r\n            self.output_tensor = logits\r\n```\r\n\r\nThis results in the following error trace:\r\n```\r\nTraceback (most recent call last):\r\n  File \"train.py\", line 27, in <module>\r\n    experimenter.run_training_experiment(config)\r\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 39, in run_training_experiment\r\n    tf.estimator.train_and_evaluate(self.trainer, self.training_specs, self.eval_specs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 451, in train_and_evaluate\r\n    return executor.run()\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 590, in run\r\n    return self.run_local()\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/training.py\", line 691, in run_local\r\n    saving_listeners=saving_listeners)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 376, in train\r\n    loss = self._train_model(input_fn, hooks, saving_listeners)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1143, in _train_model\r\n    return self._train_model_distributed(input_fn, hooks, saving_listeners)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1255, in _train_model_distributed\r\n    self.config)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/distribute.py\", line 777, in call_for_each_tower\r\n    return self._call_for_each_tower(fn, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 308, in _call_for_each_tower\r\n    coord.join(threads)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 389, in join\r\n    six.reraise(*self._exc_info_to_raise)\r\n  File \"/usr/local/onnx/six.py\", line 693, in reraise\r\n    raise value\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/training/coordinator.py\", line 297, in stop_on_exception\r\n    yield\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/mirrored_strategy.py\", line 519, in run\r\n    self.main_result = self.main_fn(*self.main_args, **self.main_kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/estimator.py\", line 1133, in _call_model_fn\r\n    model_fn_results = self._model_fn(features=features, **kwargs)\r\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 111, in get_model_fn\r\n    self.configure_network(input_tensor=features, output_tensor=labels, mode=mode)\r\n  File \"/media/local/BDA_tf_framework/neuralnetwork/trainingexperimenter.py\", line 75, in configure_network\r\n    self.network.construct_network(input_tensor=input_tensor, output_tensor=output_tensor, mode=mode)\r\n  File \"/media/local/myfiles/mynetwork.py\", line 64, in construct_network\r\n    self.construct_architecture(input_tensor=input_tensor,mode=mode)\r\n  File \"/media/local/myfiles/mynetwork.py\", line 48, in construct_architecture\r\n    logits,_ = network_fn(input_tensor)\r\n  File \"/opt/tf-slim/models/research/slim/nets/nets_factory.py\", line 141, in network_fn\r\n    return func(images, num_classes, is_training=is_training, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/slim-0.1-py3.5.egg/nets/inception_v4.py\", line 286, in inception_v4\r\n  File \"/usr/local/lib/python3.5/dist-packages/slim-0.1-py3.5.egg/nets/inception_v4.py\", line 178, in inception_v4_base\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py\", line 183, in func_with_args\r\n    return func(*args, **current_args)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py\", line 1154, in convolution2d\r\n    conv_dims=2)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py\", line 183, in func_with_args\r\n    return func(*args, **current_args)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py\", line 1066, in convolution\r\n    outputs = normalizer_fn(outputs, **normalizer_params)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py\", line 183, in func_with_args\r\n    return func(*args, **current_args)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py\", line 650, in batch_norm\r\n    outputs = layer.apply(inputs, training=is_training)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 805, in apply\r\n    return self.__call__(inputs, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py\", line 362, in __call__\r\n    outputs = super(Layer, self).__call__(inputs, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/engine/base_layer.py\", line 736, in __call__\r\n    outputs = self.call(inputs, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/normalization.py\", line 158, in call\r\n    return super(BatchNormalization, self).call(inputs, training=training)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/normalization.py\", line 514, in call\r\n    outputs = self._fused_batch_norm(inputs, training=training)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/normalization.py\", line 420, in _fused_batch_norm\r\n    momentum)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/normalization.py\", line 369, in _assign_moving_average\r\n    with ops.colocate_with(variable):\r\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\r\n    return next(self.gen)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 3939, in _colocate_with_for_gradient\r\n    with self.colocate_with(op, ignore_existing):\r\n  File \"/usr/lib/python3.5/contextlib.py\", line 59, in __enter__\r\n    return next(self.gen)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 3992, in colocate_with\r\n    op = internal_convert_to_tensor_or_indexed_slices(op, as_ref=True).op\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1255, in internal_convert_to_tensor_or_indexed_slices\r\n    value, dtype=dtype, name=name, as_ref=as_ref)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/framework/ops.py\", line 1094, in internal_convert_to_tensor\r\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/distribute/python/values.py\", line 414, in _tensor_conversion_mirrored\r\n    assert not as_ref\r\nAssertionError\r\n```\r\n\r\n\r\nThanks for the help\r\n\r\nJonas"}