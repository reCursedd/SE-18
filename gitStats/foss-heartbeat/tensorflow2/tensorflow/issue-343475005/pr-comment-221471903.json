{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/221471903", "pull_request_review_id": 160126972, "id": 221471903, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMTQ3MTkwMw==", "diff_hunk": "@@ -1671,5 +1671,64 @@ def cell():\n     self.assertAllClose(expected_c, actual_c, 1e-5)\n     self.assertAllClose(expected_h, actual_h, 1e-5)\n \n+class MLSTMCellTest(test.TestCase):\n+  \"\"\"Test the MLSTM cell.\"\"\"\n+\n+  def _cell_output(self, cell):\n+    \"\"\"Calculates cell output.\"\"\"\n+\n+    with self.test_session() as sess:\n+      init = init_ops.constant_initializer(0.5)\n+      with variable_scope.variable_scope(\"root\",\n+                                         initializer=init):\n+        x = array_ops.zeros([1, 2])\n+        c0 = array_ops.zeros([1, 2])\n+        h0 = array_ops.zeros([1, 2])\n+\n+        state0 = rnn_cell.LSTMStateTuple(c0, h0)\n+\n+        xout, sout = cell()(x, state0)\n+\n+      sess.run([variables.global_variables_initializer()])\n+      res = sess.run([xout, sout], {\n+          x.name: np.array([[1., 1.]]),\n+          c0.name: 0.1 * np.asarray([[0, 1]]),\n+          h0.name: 0.1 * np.asarray([[2, 3]]),\n+      })\n+\n+    actual_state_c = res[1].c\n+    actual_state_h = res[1].h\n+\n+    return actual_state_c, actual_state_h\n+\n+  def testMLSTMCellWithoutNorm(self):\n+    \"\"\"\"\"\"\n+\n+    def cell():\n+      return contrib_rnn_cell.MLSTMCell(2,weight_normalization=False)\n+\n+    actual_c, actual_h = self._cell_output(cell)\n+\n+    expected_c = np.array([[0.80200753, 0.88720281]])", "path": "tensorflow/contrib/rnn/python/kernel_tests/rnn_cell_test.py", "position": 74, "original_position": 42, "commit_id": "653f1c0db4e493c9f5b052a868fc30a1ac34aad6", "original_commit_id": "481508ddff3303412b1c2308992d1aa9f2cff7a4", "user": {"login": "jonnykira", "id": 30087818, "node_id": "MDQ6VXNlcjMwMDg3ODE4", "avatar_url": "https://avatars2.githubusercontent.com/u/30087818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonnykira", "html_url": "https://github.com/jonnykira", "followers_url": "https://api.github.com/users/jonnykira/followers", "following_url": "https://api.github.com/users/jonnykira/following{/other_user}", "gists_url": "https://api.github.com/users/jonnykira/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonnykira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonnykira/subscriptions", "organizations_url": "https://api.github.com/users/jonnykira/orgs", "repos_url": "https://api.github.com/users/jonnykira/repos", "events_url": "https://api.github.com/users/jonnykira/events{/privacy}", "received_events_url": "https://api.github.com/users/jonnykira/received_events", "type": "User", "site_admin": false}, "body": "I have explicitly added the calculations for a forward pass through the MLSTM Cell in numpy in the docstrings for the tests. I have checked that running these calculations in numpy produces the expected results. Hopefully this makes things easier to understand.", "created_at": "2018-09-30T20:14:57Z", "updated_at": "2018-09-30T20:15:20Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21039#discussion_r221471903", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21039", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/221471903"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21039#discussion_r221471903"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21039"}}, "body_html": "<p>I have explicitly added the calculations for a forward pass through the MLSTM Cell in numpy in the docstrings for the tests. I have checked that running these calculations in numpy produces the expected results. Hopefully this makes things easier to understand.</p>", "body_text": "I have explicitly added the calculations for a forward pass through the MLSTM Cell in numpy in the docstrings for the tests. I have checked that running these calculations in numpy produces the expected results. Hopefully this makes things easier to understand.", "in_reply_to_id": 219627788}