{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17868", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17868/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17868/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17868/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17868", "id": 307049964, "node_id": "MDU6SXNzdWUzMDcwNDk5NjQ=", "number": 17868, "title": "Test cases fail on AWS DeepLens device for Tensorflow v1.4", "user": {"login": "tianweiz07", "id": 7754941, "node_id": "MDQ6VXNlcjc3NTQ5NDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/7754941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tianweiz07", "html_url": "https://github.com/tianweiz07", "followers_url": "https://api.github.com/users/tianweiz07/followers", "following_url": "https://api.github.com/users/tianweiz07/following{/other_user}", "gists_url": "https://api.github.com/users/tianweiz07/gists{/gist_id}", "starred_url": "https://api.github.com/users/tianweiz07/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tianweiz07/subscriptions", "organizations_url": "https://api.github.com/users/tianweiz07/orgs", "repos_url": "https://api.github.com/users/tianweiz07/repos", "events_url": "https://api.github.com/users/tianweiz07/events{/privacy}", "received_events_url": "https://api.github.com/users/tianweiz07/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-03-20T21:43:45Z", "updated_at": "2018-09-28T21:51:07Z", "closed_at": "2018-09-28T21:51:07Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04.3 LTS</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.4.0-0-gd752244</li>\n<li><strong>Python version</strong>: 2.7.12</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.9.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 5.4.0</li>\n<li><strong>CUDA/cuDNN version</strong>: NA</li>\n<li><strong>GPU model and memory</strong>: NA</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nTEST_TMPDIR=$BAZEL_OUTPUT_BASE bazel test --build_tests_only --config=mkl -c opt --verbose_failures --incompatible_load_argument_is_label=false --test_verbose_timeout_warnings //tensorflow/python/...</li>\n</ul>\n<p>configuration output (\".tf_configure.bazelrc\" file):</p>\n<p>build --action_env PYTHON_BIN_PATH=\"/usr/bin/python\"<br>\nbuild --action_env PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"<br>\nbuild --define PYTHON_BIN_PATH=\"/usr/bin/python\"<br>\nbuild --define PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"<br>\nbuild --force_python=py2<br>\nbuild --host_force_python=py2<br>\nbuild --python_path=\"/usr/bin/python\"<br>\ntest --force_python=py2<br>\ntest --host_force_python=py2<br>\ntest --define PYTHON_BIN_PATH=\"/usr/bin/python\"<br>\ntest --define PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"<br>\nrun --define PYTHON_BIN_PATH=\"/usr/bin/python\"<br>\nrun --define PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"<br>\nbuild --define with_jemalloc=true<br>\nbuild:gcp --define with_gcp_support=true<br>\nbuild:hdfs --define with_hdfs_support=true<br>\nbuild:s3 --define with_s3_support=true<br>\nbuild:xla --define with_xla_support=true<br>\nbuild:gdr --define with_gdr_support=true<br>\nbuild:verbs --define with_verbs_support=true<br>\nbuild --action_env TF_NEED_OPENCL=\"0\"<br>\nbuild --action_env TF_NEED_CUDA=\"0\"<br>\nbuild --action_env TF_MKL_ROOT=$BUILD_DIR/tmp/intel/mklml_lnx_2018.0.20170425\"<br>\nbuild --action_env TF_DOWNLOAD_MK=0<br>\nbuild:opt --cxxopt=-march=native --copt=-march=native<br>\nbuild:mkl --define using_mkl=true<br>\nbuild:mkl -c opt<br>\nbuild:mkl --copt=\"-DEIGEN_USE_VML\"<br>\nbuild:monolithic --define framework_shared_object=false<br>\nbuild --define framework_shared_object=true</p>\n<p>MKL related configuration:</p>\n<p>build --action_env TF_MKL_ROOT=$BUILD_DIR/tmp/intel/mklml_lnx_2018.0.20170425\"<br>\nbuild --action_env TF_DOWNLOAD_MKL=0</p>\n<h3>Describe the problem</h3>\n<p>We build Tensorflow v1.4 and install it in a AWS DeepLens device. The device is equipped with a Intel Atom Processor E3930. Then we run the unit test cases using the above command. 19 out of 456 tensorflow test cases fail on this platform.</p>\n<p>The errors of each failing tests are shown below. Detailed logs can be found in the attachment.</p>\n<p>kernel_tests:conv_ops_test: assert error: numbers match but shapes of the result do not match.<br>\nnn_fused_batchnorm_test.py: AssertionError: 0.1277604103088379 not less than 0.01<br>\nlayers_normalization_test.py: assert error: numbers don't match but scaled.<br>\ncheckpoint_utils_test.py: checkpoint too large: 28077 &gt; 28000<br>\nitem_test.py: AssertionError: Lists differ: ['Const', 'Const_1', 'add'] != ['Const_1', 'Const', 'add']<br>\nspecial_math_ops_test.py: shape mismatch for sum.<br>\ntimeline_test.py: cpu usage not maximum ?<br>\nanalyzer_cli_test.py: testEvalExpression<br>\ncurses_ui_test.py: ui output format mismatch First differing element 2:'array([[ 1.,  1.,  1.,  1.,  1.],' 'array([[1., 1., 1., 1., 1.],'<br>\nsession_debug_file_test.py: mutliple failures<br>\nsession_debug_grpc_test: timeout 315 seconds<br>\nstepper_test<br>\ntensor_format_test: string mismatch<br>\ntensor_test: AssertionError: '[0 ..., 9]' not found in 'tf.Tensor([0 ... 9], shape=(10,), dtype=int32)'<br>\nfeature_column_test: AssertionError: OpError not raised<br>\nmodel_analyzer_test:<br>\nrun_metadata_test: AssertionError: u'DMT' != 'MatMul'<br>\nprint_selective_registration_header_test: String mismatch<br>\nconvolutional_recurrent_test: tolerance</p>\n<h3>Source code / logs</h3>\n<p>See attached:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/1831319/fail.zip\">fail.zip</a></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04.3 LTS\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): v1.4.0-0-gd752244\nPython version: 2.7.12\nBazel version (if compiling from source): 0.9.0\nGCC/Compiler version (if compiling from source): 5.4.0\nCUDA/cuDNN version: NA\nGPU model and memory: NA\nExact command to reproduce:\nTEST_TMPDIR=$BAZEL_OUTPUT_BASE bazel test --build_tests_only --config=mkl -c opt --verbose_failures --incompatible_load_argument_is_label=false --test_verbose_timeout_warnings //tensorflow/python/...\n\nconfiguration output (\".tf_configure.bazelrc\" file):\nbuild --action_env PYTHON_BIN_PATH=\"/usr/bin/python\"\nbuild --action_env PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"\nbuild --define PYTHON_BIN_PATH=\"/usr/bin/python\"\nbuild --define PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"\nbuild --force_python=py2\nbuild --host_force_python=py2\nbuild --python_path=\"/usr/bin/python\"\ntest --force_python=py2\ntest --host_force_python=py2\ntest --define PYTHON_BIN_PATH=\"/usr/bin/python\"\ntest --define PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"\nrun --define PYTHON_BIN_PATH=\"/usr/bin/python\"\nrun --define PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"\nbuild --define with_jemalloc=true\nbuild:gcp --define with_gcp_support=true\nbuild:hdfs --define with_hdfs_support=true\nbuild:s3 --define with_s3_support=true\nbuild:xla --define with_xla_support=true\nbuild:gdr --define with_gdr_support=true\nbuild:verbs --define with_verbs_support=true\nbuild --action_env TF_NEED_OPENCL=\"0\"\nbuild --action_env TF_NEED_CUDA=\"0\"\nbuild --action_env TF_MKL_ROOT=$BUILD_DIR/tmp/intel/mklml_lnx_2018.0.20170425\"\nbuild --action_env TF_DOWNLOAD_MK=0\nbuild:opt --cxxopt=-march=native --copt=-march=native\nbuild:mkl --define using_mkl=true\nbuild:mkl -c opt\nbuild:mkl --copt=\"-DEIGEN_USE_VML\"\nbuild:monolithic --define framework_shared_object=false\nbuild --define framework_shared_object=true\nMKL related configuration:\nbuild --action_env TF_MKL_ROOT=$BUILD_DIR/tmp/intel/mklml_lnx_2018.0.20170425\"\nbuild --action_env TF_DOWNLOAD_MKL=0\nDescribe the problem\nWe build Tensorflow v1.4 and install it in a AWS DeepLens device. The device is equipped with a Intel Atom Processor E3930. Then we run the unit test cases using the above command. 19 out of 456 tensorflow test cases fail on this platform.\nThe errors of each failing tests are shown below. Detailed logs can be found in the attachment.\nkernel_tests:conv_ops_test: assert error: numbers match but shapes of the result do not match.\nnn_fused_batchnorm_test.py: AssertionError: 0.1277604103088379 not less than 0.01\nlayers_normalization_test.py: assert error: numbers don't match but scaled.\ncheckpoint_utils_test.py: checkpoint too large: 28077 > 28000\nitem_test.py: AssertionError: Lists differ: ['Const', 'Const_1', 'add'] != ['Const_1', 'Const', 'add']\nspecial_math_ops_test.py: shape mismatch for sum.\ntimeline_test.py: cpu usage not maximum ?\nanalyzer_cli_test.py: testEvalExpression\ncurses_ui_test.py: ui output format mismatch First differing element 2:'array([[ 1.,  1.,  1.,  1.,  1.],' 'array([[1., 1., 1., 1., 1.],'\nsession_debug_file_test.py: mutliple failures\nsession_debug_grpc_test: timeout 315 seconds\nstepper_test\ntensor_format_test: string mismatch\ntensor_test: AssertionError: '[0 ..., 9]' not found in 'tf.Tensor([0 ... 9], shape=(10,), dtype=int32)'\nfeature_column_test: AssertionError: OpError not raised\nmodel_analyzer_test:\nrun_metadata_test: AssertionError: u'DMT' != 'MatMul'\nprint_selective_registration_header_test: String mismatch\nconvolutional_recurrent_test: tolerance\nSource code / logs\nSee attached:\nfail.zip", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04.3 LTS\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: v1.4.0-0-gd752244\r\n- **Python version**: 2.7.12\r\n- **Bazel version (if compiling from source)**: 0.9.0\r\n- **GCC/Compiler version (if compiling from source)**: 5.4.0\r\n- **CUDA/cuDNN version**: NA\r\n- **GPU model and memory**: NA\r\n- **Exact command to reproduce**:\r\nTEST_TMPDIR=$BAZEL_OUTPUT_BASE bazel test --build_tests_only --config=mkl -c opt --verbose_failures --incompatible_load_argument_is_label=false --test_verbose_timeout_warnings //tensorflow/python/...\r\n\r\nconfiguration output (\".tf_configure.bazelrc\" file):\r\n\r\nbuild --action_env PYTHON_BIN_PATH=\"/usr/bin/python\"\r\nbuild --action_env PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"\r\nbuild --define PYTHON_BIN_PATH=\"/usr/bin/python\"\r\nbuild --define PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"\r\nbuild --force_python=py2\r\nbuild --host_force_python=py2\r\nbuild --python_path=\"/usr/bin/python\"\r\ntest --force_python=py2\r\ntest --host_force_python=py2\r\ntest --define PYTHON_BIN_PATH=\"/usr/bin/python\"\r\ntest --define PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"\r\nrun --define PYTHON_BIN_PATH=\"/usr/bin/python\"\r\nrun --define PYTHON_LIB_PATH=\"/usr/local/lib/python2.7/dist-packages\"\r\nbuild --define with_jemalloc=true\r\nbuild:gcp --define with_gcp_support=true\r\nbuild:hdfs --define with_hdfs_support=true\r\nbuild:s3 --define with_s3_support=true\r\nbuild:xla --define with_xla_support=true\r\nbuild:gdr --define with_gdr_support=true\r\nbuild:verbs --define with_verbs_support=true\r\nbuild --action_env TF_NEED_OPENCL=\"0\"\r\nbuild --action_env TF_NEED_CUDA=\"0\"\r\nbuild --action_env TF_MKL_ROOT=$BUILD_DIR/tmp/intel/mklml_lnx_2018.0.20170425\"\r\nbuild --action_env TF_DOWNLOAD_MK=0\r\nbuild:opt --cxxopt=-march=native --copt=-march=native\r\nbuild:mkl --define using_mkl=true\r\nbuild:mkl -c opt\r\nbuild:mkl --copt=\"-DEIGEN_USE_VML\"\r\nbuild:monolithic --define framework_shared_object=false\r\nbuild --define framework_shared_object=true\r\n\r\nMKL related configuration:\r\n\r\nbuild --action_env TF_MKL_ROOT=$BUILD_DIR/tmp/intel/mklml_lnx_2018.0.20170425\"\r\nbuild --action_env TF_DOWNLOAD_MKL=0\r\n\r\n### Describe the problem\r\nWe build Tensorflow v1.4 and install it in a AWS DeepLens device. The device is equipped with a Intel Atom Processor E3930. Then we run the unit test cases using the above command. 19 out of 456 tensorflow test cases fail on this platform. \r\n\r\nThe errors of each failing tests are shown below. Detailed logs can be found in the attachment.\r\n\r\nkernel_tests:conv_ops_test: assert error: numbers match but shapes of the result do not match.\r\nnn_fused_batchnorm_test.py: AssertionError: 0.1277604103088379 not less than 0.01\r\nlayers_normalization_test.py: assert error: numbers don't match but scaled.\r\ncheckpoint_utils_test.py: checkpoint too large: 28077 > 28000\r\nitem_test.py: AssertionError: Lists differ: ['Const', 'Const_1', 'add'] != ['Const_1', 'Const', 'add']\r\nspecial_math_ops_test.py: shape mismatch for sum.\r\ntimeline_test.py: cpu usage not maximum ?\r\nanalyzer_cli_test.py: testEvalExpression\r\ncurses_ui_test.py: ui output format mismatch First differing element 2:'array([[ 1.,  1.,  1.,  1.,  1.],' 'array([[1., 1., 1., 1., 1.],'\r\nsession_debug_file_test.py: mutliple failures\r\nsession_debug_grpc_test: timeout 315 seconds\r\nstepper_test\r\ntensor_format_test: string mismatch\r\ntensor_test: AssertionError: '[0 ..., 9]' not found in 'tf.Tensor([0 ... 9], shape=(10,), dtype=int32)'\r\nfeature_column_test: AssertionError: OpError not raised\r\nmodel_analyzer_test:\r\nrun_metadata_test: AssertionError: u'DMT' != 'MatMul'\r\nprint_selective_registration_header_test: String mismatch\r\nconvolutional_recurrent_test: tolerance\r\n\r\n### Source code / logs\r\nSee attached:\r\n[fail.zip](https://github.com/tensorflow/tensorflow/files/1831319/fail.zip)\r\n"}