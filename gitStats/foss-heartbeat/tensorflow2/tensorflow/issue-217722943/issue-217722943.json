{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8786", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8786/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8786/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8786/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8786", "id": 217722943, "node_id": "MDU6SXNzdWUyMTc3MjI5NDM=", "number": 8786, "title": "Problem with processing/displaying RGB images", "user": {"login": "Panaetius", "id": 664486, "node_id": "MDQ6VXNlcjY2NDQ4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/664486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Panaetius", "html_url": "https://github.com/Panaetius", "followers_url": "https://api.github.com/users/Panaetius/followers", "following_url": "https://api.github.com/users/Panaetius/following{/other_user}", "gists_url": "https://api.github.com/users/Panaetius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Panaetius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Panaetius/subscriptions", "organizations_url": "https://api.github.com/users/Panaetius/orgs", "repos_url": "https://api.github.com/users/Panaetius/repos", "events_url": "https://api.github.com/users/Panaetius/events{/privacy}", "received_events_url": "https://api.github.com/users/Panaetius/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-03-28T23:32:30Z", "updated_at": "2017-06-16T21:26:04Z", "closed_at": "2017-06-16T21:26:04Z", "author_association": "NONE", "body_html": "<p>I just switched to a build of the r1.1 branch of tensorflow (due to a fixed bug in tfdbg present in 1.0) and without any changes to my model, RGB images saved with tf.summary.image are showing up weird in tensorboard, whereas they showed up fine in all previous versions of tensorflow/tensorboard.</p>\n<p>Here's an example of what I mean: <a href=\"http://i.imgur.com/xFoEYzO.png\" rel=\"nofollow\">http://i.imgur.com/xFoEYzO.png</a></p>\n<p>Those should be regular MSCOCO color images, but now the colors are all over the place.</p>\n<p>Before being displayed, the images are adjusted as follows:</p>\n<pre><code>    distorted_image = tf.cast(result.image_raw, tf.float32)\n    distorted_image = tf.reshape(distorted_image,\n                                 [self.width, self.height, 3])\n    distorted_image = tf.image.random_brightness(distorted_image,\n                                                 max_delta=35)\n    distorted_image = tf.image.random_contrast(distorted_image,\n                                               lower=0.4, upper=1.4)\n    distorted_image = tf.image.random_hue(distorted_image, max_delta=0.01)\n    float_image = tf.image.per_image_standardization(distorted_image)\n</code></pre>\n<p>and then the bounding boxes are drawn with: <code>tf.image.draw_bounding_boxes</code></p>\n<p>the images are logged using <code>tf.summary.image('images', preview_images, max_outputs=16)</code></p>\n<p>I don't know if the issue is exclusive to tensorboard (conv layer activations seem to be displayed just fine, though the first layer conv activations look like they are working on the 'broken' image data as well, so it looks like it's not a tensorboard bug).</p>\n<p>The images are read from a TFRecord file (which wasn't changed) and supplied with a shuffle_batch</p>\n<p>Have any of the image summary/image adjustment ops changed in a way that I'm not aware of, or is this a bug? It looks like it could have something to do with normalization of the image.</p>", "body_text": "I just switched to a build of the r1.1 branch of tensorflow (due to a fixed bug in tfdbg present in 1.0) and without any changes to my model, RGB images saved with tf.summary.image are showing up weird in tensorboard, whereas they showed up fine in all previous versions of tensorflow/tensorboard.\nHere's an example of what I mean: http://i.imgur.com/xFoEYzO.png\nThose should be regular MSCOCO color images, but now the colors are all over the place.\nBefore being displayed, the images are adjusted as follows:\n    distorted_image = tf.cast(result.image_raw, tf.float32)\n    distorted_image = tf.reshape(distorted_image,\n                                 [self.width, self.height, 3])\n    distorted_image = tf.image.random_brightness(distorted_image,\n                                                 max_delta=35)\n    distorted_image = tf.image.random_contrast(distorted_image,\n                                               lower=0.4, upper=1.4)\n    distorted_image = tf.image.random_hue(distorted_image, max_delta=0.01)\n    float_image = tf.image.per_image_standardization(distorted_image)\n\nand then the bounding boxes are drawn with: tf.image.draw_bounding_boxes\nthe images are logged using tf.summary.image('images', preview_images, max_outputs=16)\nI don't know if the issue is exclusive to tensorboard (conv layer activations seem to be displayed just fine, though the first layer conv activations look like they are working on the 'broken' image data as well, so it looks like it's not a tensorboard bug).\nThe images are read from a TFRecord file (which wasn't changed) and supplied with a shuffle_batch\nHave any of the image summary/image adjustment ops changed in a way that I'm not aware of, or is this a bug? It looks like it could have something to do with normalization of the image.", "body": "I just switched to a build of the r1.1 branch of tensorflow (due to a fixed bug in tfdbg present in 1.0) and without any changes to my model, RGB images saved with tf.summary.image are showing up weird in tensorboard, whereas they showed up fine in all previous versions of tensorflow/tensorboard.\r\n\r\nHere's an example of what I mean: http://i.imgur.com/xFoEYzO.png\r\n\r\nThose should be regular MSCOCO color images, but now the colors are all over the place.\r\n\r\nBefore being displayed, the images are adjusted as follows:\r\n\r\n        distorted_image = tf.cast(result.image_raw, tf.float32)\r\n        distorted_image = tf.reshape(distorted_image,\r\n                                     [self.width, self.height, 3])\r\n        distorted_image = tf.image.random_brightness(distorted_image,\r\n                                                     max_delta=35)\r\n        distorted_image = tf.image.random_contrast(distorted_image,\r\n                                                   lower=0.4, upper=1.4)\r\n        distorted_image = tf.image.random_hue(distorted_image, max_delta=0.01)\r\n        float_image = tf.image.per_image_standardization(distorted_image)\r\n\r\n\r\nand then the bounding boxes are drawn with: `tf.image.draw_bounding_boxes`\r\n\r\nthe images are logged using `tf.summary.image('images', preview_images, max_outputs=16)`\r\n\r\nI don't know if the issue is exclusive to tensorboard (conv layer activations seem to be displayed just fine, though the first layer conv activations look like they are working on the 'broken' image data as well, so it looks like it's not a tensorboard bug).\r\n\r\nThe images are read from a TFRecord file (which wasn't changed) and supplied with a shuffle_batch\r\n\r\nHave any of the image summary/image adjustment ops changed in a way that I'm not aware of, or is this a bug? It looks like it could have something to do with normalization of the image.\r\n"}