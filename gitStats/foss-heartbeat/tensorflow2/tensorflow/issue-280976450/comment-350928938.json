{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350928938", "html_url": "https://github.com/tensorflow/tensorflow/issues/15269#issuecomment-350928938", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15269", "id": 350928938, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDkyODkzOA==", "user": {"login": "adamcavendish", "id": 1346161, "node_id": "MDQ6VXNlcjEzNDYxNjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1346161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamcavendish", "html_url": "https://github.com/adamcavendish", "followers_url": "https://api.github.com/users/adamcavendish/followers", "following_url": "https://api.github.com/users/adamcavendish/following{/other_user}", "gists_url": "https://api.github.com/users/adamcavendish/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamcavendish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamcavendish/subscriptions", "organizations_url": "https://api.github.com/users/adamcavendish/orgs", "repos_url": "https://api.github.com/users/adamcavendish/repos", "events_url": "https://api.github.com/users/adamcavendish/events{/privacy}", "received_events_url": "https://api.github.com/users/adamcavendish/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-12T02:51:08Z", "updated_at": "2017-12-12T02:51:08Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1112263\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/facaiy\">@facaiy</a> Yep, you're right. It does break the existing behavior. However, we have to break the existing behaviors if we'd like solve the problem.</p>\n<p>I just wonder why it should be an expected behavior, I mean if deliberately, in my example, <code>two_bn/bn, two_bn/bn_1, two_bn/bn, two_bn/bn_1</code> should be accepted rather than <code>two_bn/bn, two_bn/bn_1, two_bn/bn_2, two_bn/bn_3</code> or <code>two_bn/bn_1, two_bn/bn_2, two_bn/bn_3, two_bn/bn_4</code>.</p>", "body_text": "@facaiy Yep, you're right. It does break the existing behavior. However, we have to break the existing behaviors if we'd like solve the problem.\nI just wonder why it should be an expected behavior, I mean if deliberately, in my example, two_bn/bn, two_bn/bn_1, two_bn/bn, two_bn/bn_1 should be accepted rather than two_bn/bn, two_bn/bn_1, two_bn/bn_2, two_bn/bn_3 or two_bn/bn_1, two_bn/bn_2, two_bn/bn_3, two_bn/bn_4.", "body": "@facaiy Yep, you're right. It does break the existing behavior. However, we have to break the existing behaviors if we'd like solve the problem.\r\n\r\nI just wonder why it should be an expected behavior, I mean if deliberately, in my example, `two_bn/bn, two_bn/bn_1, two_bn/bn, two_bn/bn_1` should be accepted rather than `two_bn/bn, two_bn/bn_1, two_bn/bn_2, two_bn/bn_3` or `two_bn/bn_1, two_bn/bn_2, two_bn/bn_3, two_bn/bn_4`."}