{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350918033", "html_url": "https://github.com/tensorflow/tensorflow/issues/15269#issuecomment-350918033", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15269", "id": 350918033, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDkxODAzMw==", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-12T01:45:16Z", "updated_at": "2017-12-12T01:52:25Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1346161\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/adamcavendish\">@adamcavendish</a> I think you recreate the variable_scope, which introduces the name conflict:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>):\n    v <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v<span class=\"pl-pds\">\"</span></span>, [<span class=\"pl-c1\">1</span>])\n\n<span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>):\n    v1 <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v<span class=\"pl-pds\">\"</span></span>, [<span class=\"pl-c1\">1</span>])</pre></div>\n<p>Perhaps a better way is to always create new variable_scope when invoked repeatedly,  I mean, use <code>with tf.variable_scope(None, default_name='two_batchnorm'):</code> instead.</p>\n<p>By the way, if I remember correctly, <code>self._name</code> starts from one by default, eg: dense_1, dense_2, which might break the existing behavior.</p>", "body_text": "@adamcavendish I think you recreate the variable_scope, which introduces the name conflict:\nimport tensorflow as tf\n\nwith tf.variable_scope(\"a\"):\n    v = tf.get_variable(\"v\", [1])\n\nwith tf.variable_scope(\"a\"):\n    v1 = tf.get_variable(\"v\", [1])\nPerhaps a better way is to always create new variable_scope when invoked repeatedly,  I mean, use with tf.variable_scope(None, default_name='two_batchnorm'): instead.\nBy the way, if I remember correctly, self._name starts from one by default, eg: dense_1, dense_2, which might break the existing behavior.", "body": "@adamcavendish I think you recreate the variable_scope, which introduces the name conflict:\r\n```python\r\nimport tensorflow as tf\r\n\r\nwith tf.variable_scope(\"a\"):\r\n    v = tf.get_variable(\"v\", [1])\r\n\r\nwith tf.variable_scope(\"a\"):\r\n    v1 = tf.get_variable(\"v\", [1])\r\n```\r\n\r\nPerhaps a better way is to always create new variable_scope when invoked repeatedly,  I mean, use `with tf.variable_scope(None, default_name='two_batchnorm'):` instead.\r\n\r\nBy the way, if I remember correctly, `self._name` starts from one by default, eg: dense_1, dense_2, which might break the existing behavior."}