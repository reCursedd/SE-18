{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/69080446", "pull_request_review_id": null, "id": 69080446, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MDgwNDQ2", "diff_hunk": "@@ -256,36 +256,101 @@ class UnsortedSegmentSumOp : public OpKernel {\n     Tensor* output = nullptr;\n     OP_REQUIRES_OK(context, context->allocate_output(0, output_shape, &output));\n     auto output_flat = output->flat_outer_dims<T>();\n-    output_flat.setZero();\n-\n+    if(is_max_){\n+        output_flat.setConstant(std::numeric_limits<T>::min());\n+    }else{\n+        output_flat.setZero();\n+    }\n     if (data.NumElements() > 0) {\n-      auto data_flat = data.shaped<T, 2>({N, data.NumElements() / N});\n-      for (int64 i = 0; i < N; ++i) {\n-        Index j = internal::SubtleMustCopy(segment_flat(i));\n-        OP_REQUIRES(context, FastBoundsCheck(j, output_rows),\n-                    errors::InvalidArgument(\n-                        \"segment_ids\", SliceDebugString(segment_ids.shape(), i),\n-                        \" = \", j, \" is out of range [0, \", output_rows, \")\"));\n-        output_flat.template chip<0>(j) += data_flat.template chip<0>(i);\n+        auto data_flat = data.shaped<T, 2>({N, data.NumElements() / N});\n+        for (int64 i = 0; i < N; ++i) {\n+            Index j = internal::SubtleMustCopy(segment_flat(i));\n+            OP_REQUIRES(context, FastBoundsCheck(j, output_rows),\n+                        errors::InvalidArgument(\n+                                \"segment_ids\", SliceDebugString(segment_ids.shape(), i),\n+                                \" = \", j, \" is out of range [0, \", output_rows, \")\"));\n+            reduction(&data_flat, &output_flat, i, j);\n+\n+        }\n       }\n     }\n-  }\n+\n+    virtual void reduction( Eigen::TensorMap<Eigen::Tensor<const T,2,1,long int>, 16>* data_flat,\n+                    Eigen::TensorMap<Eigen::Tensor<T,2,1,long int>, 16>* output_flat,\n+                   int64 i,Index j) = 0;\n+\n+    const bool is_max_;\n+};\n+\n+\n+template <typename Device, class T, class Index>\n+class UnsortedSegmentMaxOp\n+        : public UnsortedSegmentOpBase<Device, T, Index> {\n+public:\n+    explicit UnsortedSegmentMaxOp(OpKernelConstruction* context)\n+            : UnsortedSegmentOpBase<Device, T, Index>(context, true /*is_max*/) {}\n+\n+\n+    void reduction(Eigen::TensorMap<Eigen::Tensor<const T,2,1,long int>, 16>* data_flat,\n+           Eigen::TensorMap<Eigen::Tensor<T,2,1,long int>, 16>* output_flat,\n+           int64 i,Index j)\n+    {\n+        output_flat->template chip<0>(j) = data_flat->template chip<0>(i).cwiseMax(output_flat->template chip<0>(j));\n+    }\n };\n \n-#define REGISTER_CPU_UNSORTED_KERNELS(type, index_type)                \\\n-  REGISTER_KERNEL_BUILDER(Name(\"UnsortedSegmentSum\")                   \\\n+template <typename Device, class T, class Index>\n+class UnsortedSegmentSumOp\n+        : public UnsortedSegmentOpBase<Device, T, Index> {\n+public:\n+    explicit UnsortedSegmentSumOp(OpKernelConstruction* context)\n+            : UnsortedSegmentOpBase<Device, T, Index>(context, false /*is_max*/) {}\n+\n+    void reduction(Eigen::TensorMap<Eigen::Tensor<const T,2,1,long int>, 16>* data_flat,\n+           Eigen::TensorMap<Eigen::Tensor<T,2,1,long int>, 16>* output_flat,\n+           int64 i,Index j)\n+    {\n+        output_flat->template chip<0>(j) += data_flat->template chip<0>(i);\n+    }\n+};\n+\n+\n+#define REGISTER_REAL_CPU_UNSORTED_KERNELS(type, index_type)           \\\n+      REGISTER_KERNEL_BUILDER(Name(\"UnsortedSegmentSum\")               \\\n+                              .Device(DEVICE_CPU)                      \\\n+                              .TypeConstraint<type>(\"T\")               \\\n+                              .TypeConstraint<index_type>(\"Tindices\"), \\\n+                          UnsortedSegmentSumOp<CPUDevice, type, index_type>); \\", "path": "tensorflow/core/kernels/segment_reduction_ops.cc", "position": null, "original_position": 101, "commit_id": "30578977f5a2415c7a06842fab5109dcbb7af3fa", "original_commit_id": "87c7a3230fe08f7a4b181f4526eeda31bb5eb770", "user": {"login": "agarwal-ashish", "id": 19335798, "node_id": "MDQ6VXNlcjE5MzM1Nzk4", "avatar_url": "https://avatars3.githubusercontent.com/u/19335798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agarwal-ashish", "html_url": "https://github.com/agarwal-ashish", "followers_url": "https://api.github.com/users/agarwal-ashish/followers", "following_url": "https://api.github.com/users/agarwal-ashish/following{/other_user}", "gists_url": "https://api.github.com/users/agarwal-ashish/gists{/gist_id}", "starred_url": "https://api.github.com/users/agarwal-ashish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agarwal-ashish/subscriptions", "organizations_url": "https://api.github.com/users/agarwal-ashish/orgs", "repos_url": "https://api.github.com/users/agarwal-ashish/repos", "events_url": "https://api.github.com/users/agarwal-ashish/events{/privacy}", "received_events_url": "https://api.github.com/users/agarwal-ashish/received_events", "type": "User", "site_admin": false}, "body": "Please keep the \"\\\" lined up, here and later.\n", "created_at": "2016-06-30T06:55:35Z", "updated_at": "2016-08-09T17:22:19Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1547#discussion_r69080446", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1547", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/69080446"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1547#discussion_r69080446"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1547"}}, "body_html": "<p>Please keep the \"\" lined up, here and later.</p>", "body_text": "Please keep the \"\" lined up, here and later."}