{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/394100202", "html_url": "https://github.com/tensorflow/tensorflow/issues/18693#issuecomment-394100202", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18693", "id": 394100202, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDEwMDIwMg==", "user": {"login": "jvdillon", "id": 1137078, "node_id": "MDQ6VXNlcjExMzcwNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1137078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvdillon", "html_url": "https://github.com/jvdillon", "followers_url": "https://api.github.com/users/jvdillon/followers", "following_url": "https://api.github.com/users/jvdillon/following{/other_user}", "gists_url": "https://api.github.com/users/jvdillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvdillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvdillon/subscriptions", "organizations_url": "https://api.github.com/users/jvdillon/orgs", "repos_url": "https://api.github.com/users/jvdillon/repos", "events_url": "https://api.github.com/users/jvdillon/events{/privacy}", "received_events_url": "https://api.github.com/users/jvdillon/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-02T16:38:29Z", "updated_at": "2018-06-02T16:38:29Z", "author_association": "MEMBER", "body_html": "<p>Are you looking to get a mixture of two bivariate Normals, or two mixtures of scalar Normals?</p>\n<p>Here's how you can achieve a bimixture of bivariate spherical Normals:</p>\n<pre><code>bimix_bigauss = tfd.MixtureSameFamily(\n    mixture_distribution=tfd.Categorical(probs=[.3,1-.3]),\n    components_distribution=tfd.Independent(\n        tfd.Normal(loc=[[-1.,0],[1,2]], scale=[[0.1,0.2],[0.5,3.]]),\n        reinterpreted_batch_ndims=1))\nprint(bimix_bigauss)\n# ==&gt; tf.distributions.MixtureSameFamily(\"MixtureSameFamily/\", batch_shape=(), event_shape=(2,), dtype=float32)\n</code></pre>\n<p>Here's how you can achieve two bimixtures of scalar Normals:</p>\n<pre><code>bimix_gauss = tfd.MixtureSameFamily(\n    mixture_distribution=tfd.Categorical(probs=[.3,1-.3]),\n    components_distribution=tfd.Normal(loc=[[-1.,0],[1,2]], scale=[[0.1,0.2],[0.5,3.]]))\nprint(bimix_gauss)\n# ==&gt; tf.distributions.MixtureSameFamily(\"MixtureSameFamily_1/\", batch_shape=(2,), event_shape=(), dtype=float32)\n</code></pre>\n<p>As for using tfd.Mixture, its possible there's a broadcasting bug. However in your case using MixtureSameFamily is probably more efficient and things do work there.</p>", "body_text": "Are you looking to get a mixture of two bivariate Normals, or two mixtures of scalar Normals?\nHere's how you can achieve a bimixture of bivariate spherical Normals:\nbimix_bigauss = tfd.MixtureSameFamily(\n    mixture_distribution=tfd.Categorical(probs=[.3,1-.3]),\n    components_distribution=tfd.Independent(\n        tfd.Normal(loc=[[-1.,0],[1,2]], scale=[[0.1,0.2],[0.5,3.]]),\n        reinterpreted_batch_ndims=1))\nprint(bimix_bigauss)\n# ==> tf.distributions.MixtureSameFamily(\"MixtureSameFamily/\", batch_shape=(), event_shape=(2,), dtype=float32)\n\nHere's how you can achieve two bimixtures of scalar Normals:\nbimix_gauss = tfd.MixtureSameFamily(\n    mixture_distribution=tfd.Categorical(probs=[.3,1-.3]),\n    components_distribution=tfd.Normal(loc=[[-1.,0],[1,2]], scale=[[0.1,0.2],[0.5,3.]]))\nprint(bimix_gauss)\n# ==> tf.distributions.MixtureSameFamily(\"MixtureSameFamily_1/\", batch_shape=(2,), event_shape=(), dtype=float32)\n\nAs for using tfd.Mixture, its possible there's a broadcasting bug. However in your case using MixtureSameFamily is probably more efficient and things do work there.", "body": "Are you looking to get a mixture of two bivariate Normals, or two mixtures of scalar Normals?\r\n\r\nHere's how you can achieve a bimixture of bivariate spherical Normals:\r\n\r\n    bimix_bigauss = tfd.MixtureSameFamily(\r\n        mixture_distribution=tfd.Categorical(probs=[.3,1-.3]),\r\n        components_distribution=tfd.Independent(\r\n            tfd.Normal(loc=[[-1.,0],[1,2]], scale=[[0.1,0.2],[0.5,3.]]),\r\n            reinterpreted_batch_ndims=1))\r\n    print(bimix_bigauss)\r\n    # ==> tf.distributions.MixtureSameFamily(\"MixtureSameFamily/\", batch_shape=(), event_shape=(2,), dtype=float32)\r\n\r\nHere's how you can achieve two bimixtures of scalar Normals:\r\n\r\n    bimix_gauss = tfd.MixtureSameFamily(\r\n        mixture_distribution=tfd.Categorical(probs=[.3,1-.3]),\r\n        components_distribution=tfd.Normal(loc=[[-1.,0],[1,2]], scale=[[0.1,0.2],[0.5,3.]]))\r\n    print(bimix_gauss)\r\n    # ==> tf.distributions.MixtureSameFamily(\"MixtureSameFamily_1/\", batch_shape=(2,), event_shape=(), dtype=float32)\r\n\r\n\r\n\r\nAs for using tfd.Mixture, its possible there's a broadcasting bug. However in your case using MixtureSameFamily is probably more efficient and things do work there."}