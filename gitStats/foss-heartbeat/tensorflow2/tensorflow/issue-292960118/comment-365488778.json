{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/365488778", "html_url": "https://github.com/tensorflow/tensorflow/issues/16606#issuecomment-365488778", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16606", "id": 365488778, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTQ4ODc3OA==", "user": {"login": "joel-shor", "id": 6020988, "node_id": "MDQ6VXNlcjYwMjA5ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6020988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joel-shor", "html_url": "https://github.com/joel-shor", "followers_url": "https://api.github.com/users/joel-shor/followers", "following_url": "https://api.github.com/users/joel-shor/following{/other_user}", "gists_url": "https://api.github.com/users/joel-shor/gists{/gist_id}", "starred_url": "https://api.github.com/users/joel-shor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joel-shor/subscriptions", "organizations_url": "https://api.github.com/users/joel-shor/orgs", "repos_url": "https://api.github.com/users/joel-shor/repos", "events_url": "https://api.github.com/users/joel-shor/events{/privacy}", "received_events_url": "https://api.github.com/users/joel-shor/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-14T03:56:14Z", "updated_at": "2018-02-14T03:56:14Z", "author_association": "CONTRIBUTOR", "body_html": "<p>FWIW, I'm still debugging but simplified your example:</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\nclass_num=8\ndata_np = np.random.choice(class_num,20000,p=[1.0/class_num]*class_num)\n\ndef sample(_):\n  xx = tf.cast(tf.random_uniform([1])*class_num, tf.int32)[0]\n  return xx\n\ndef fix_sample_and_rebalance(which='works'): \n  data_tensors = tf.constant(data_np, dtype=tf.int32)\n  dataset = tf.data.Dataset.from_tensor_slices(data_tensors)\n\n  target_dist = [1.0/class_num] * class_num\n  target_dist[1]+=target_dist[0] ; target_dist[0]=0\n  print('target-dist&gt;&gt;', target_dist)\n\n  if which == 'breaks':\n    dataset = dataset.map(sample)\n\n  dataset = dataset.apply(tf.contrib.data.rejection_resample(\n      class_func=lambda c: c,\n      target_dist=target_dist))\n  dataset = dataset.map(lambda a, _: a)\n\n  return dataset.make_one_shot_iterator().get_next()\n\ndef run_thing(which):\n  tf.reset_default_graph()\n  with tf.Session() as sess:\n    get_next = fix_sample_and_rebalance(which)\n    returned = []\n    for kk in range(0,100):\n      try:\n          sample=sess.run(get_next)\n          returned.append(sample)\n      except tf.errors.OutOfRangeError:\n          break\n    print(np.bincount(np.array(returned)))\n\n\nrun_thing('works')  # this works\nrun_thing('breaks')  # this doesn't\n</code></pre>", "body_text": "FWIW, I'm still debugging but simplified your example:\nimport numpy as np\nimport tensorflow as tf\n\nclass_num=8\ndata_np = np.random.choice(class_num,20000,p=[1.0/class_num]*class_num)\n\ndef sample(_):\n  xx = tf.cast(tf.random_uniform([1])*class_num, tf.int32)[0]\n  return xx\n\ndef fix_sample_and_rebalance(which='works'): \n  data_tensors = tf.constant(data_np, dtype=tf.int32)\n  dataset = tf.data.Dataset.from_tensor_slices(data_tensors)\n\n  target_dist = [1.0/class_num] * class_num\n  target_dist[1]+=target_dist[0] ; target_dist[0]=0\n  print('target-dist>>', target_dist)\n\n  if which == 'breaks':\n    dataset = dataset.map(sample)\n\n  dataset = dataset.apply(tf.contrib.data.rejection_resample(\n      class_func=lambda c: c,\n      target_dist=target_dist))\n  dataset = dataset.map(lambda a, _: a)\n\n  return dataset.make_one_shot_iterator().get_next()\n\ndef run_thing(which):\n  tf.reset_default_graph()\n  with tf.Session() as sess:\n    get_next = fix_sample_and_rebalance(which)\n    returned = []\n    for kk in range(0,100):\n      try:\n          sample=sess.run(get_next)\n          returned.append(sample)\n      except tf.errors.OutOfRangeError:\n          break\n    print(np.bincount(np.array(returned)))\n\n\nrun_thing('works')  # this works\nrun_thing('breaks')  # this doesn't", "body": "FWIW, I'm still debugging but simplified your example:\r\n\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nclass_num=8\r\ndata_np = np.random.choice(class_num,20000,p=[1.0/class_num]*class_num)\r\n\r\ndef sample(_):\r\n  xx = tf.cast(tf.random_uniform([1])*class_num, tf.int32)[0]\r\n  return xx\r\n\r\ndef fix_sample_and_rebalance(which='works'): \r\n  data_tensors = tf.constant(data_np, dtype=tf.int32)\r\n  dataset = tf.data.Dataset.from_tensor_slices(data_tensors)\r\n\r\n  target_dist = [1.0/class_num] * class_num\r\n  target_dist[1]+=target_dist[0] ; target_dist[0]=0\r\n  print('target-dist>>', target_dist)\r\n\r\n  if which == 'breaks':\r\n    dataset = dataset.map(sample)\r\n\r\n  dataset = dataset.apply(tf.contrib.data.rejection_resample(\r\n      class_func=lambda c: c,\r\n      target_dist=target_dist))\r\n  dataset = dataset.map(lambda a, _: a)\r\n\r\n  return dataset.make_one_shot_iterator().get_next()\r\n\r\ndef run_thing(which):\r\n  tf.reset_default_graph()\r\n  with tf.Session() as sess:\r\n    get_next = fix_sample_and_rebalance(which)\r\n    returned = []\r\n    for kk in range(0,100):\r\n      try:\r\n          sample=sess.run(get_next)\r\n          returned.append(sample)\r\n      except tf.errors.OutOfRangeError:\r\n          break\r\n    print(np.bincount(np.array(returned)))\r\n\r\n\r\nrun_thing('works')  # this works\r\nrun_thing('breaks')  # this doesn't\r\n```"}