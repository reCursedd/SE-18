{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23898", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23898/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23898/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23898/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23898", "id": 382990515, "node_id": "MDU6SXNzdWUzODI5OTA1MTU=", "number": 23898, "title": "Error occurs when importing metagraph that contains cudnnRNN cells", "user": {"login": "sjtuldl", "id": 20456694, "node_id": "MDQ6VXNlcjIwNDU2Njk0", "avatar_url": "https://avatars3.githubusercontent.com/u/20456694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjtuldl", "html_url": "https://github.com/sjtuldl", "followers_url": "https://api.github.com/users/sjtuldl/followers", "following_url": "https://api.github.com/users/sjtuldl/following{/other_user}", "gists_url": "https://api.github.com/users/sjtuldl/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjtuldl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjtuldl/subscriptions", "organizations_url": "https://api.github.com/users/sjtuldl/orgs", "repos_url": "https://api.github.com/users/sjtuldl/repos", "events_url": "https://api.github.com/users/sjtuldl/events{/privacy}", "received_events_url": "https://api.github.com/users/sjtuldl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-21T07:33:20Z", "updated_at": "2018-11-22T10:06:17Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): CentOS 7.4</li>\n<li>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:</li>\n<li>TensorFlow installed from (source or binary): pip install .whl</li>\n<li>TensorFlow version (use command below): 1.12.0</li>\n<li>Python version: 2.7.14</li>\n<li>Bazel version (if compiling from source):</li>\n<li>GCC/Compiler version (if compiling from source): c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-28)</li>\n<li>CUDA/cuDNN version: cuda: 9.0 cuDNN: 7.1.3</li>\n<li>GPU model and memory: GTX1050Ti/4GB<br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/2603030/tf_env.txt\">tf_env.txt</a></li>\n</ul>\n<p><strong>Describe the current behavior</strong><br>\nI try to import graph from a MetaGraphDef proto that contains a CudnnRNN cell, the error below raises:</p>\n<pre><code> Traceback (most recent call last):\n  File \"test.py\", line 21, in &lt;module&gt;\n    saver = tf.train.import_meta_graph(mgd)\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1674, in import_meta_graph\n    meta_graph_or_file, clear_devices, import_scope, **kwargs)[0]\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1696, in _import_meta_graph_with_return_elements\n    **kwargs))\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/framework/meta_graph.py\", line 852, in import_scoped_meta_graph_with_return_elements\n    ops.prepend_name_scope(value, scope_to_prepend_to_names))\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 3490, in as_graph_element\n    return self._as_graph_element_locked(obj, allow_tensor, allow_operation)\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 3550, in _as_graph_element_locked\n    \"graph.\" % repr(name))\nKeyError: \"The name 'cudnn_lstm/opaque_kernel_saveable' refers to an Operation not in the graph.\"\n</code></pre>\n<p>What I've done:<br>\nI've debuged the souce code and found out that a CudnnLSTMSaveable instance is created when cudnnRNN cell gets called and corresponding op was saved in tf.GraphKeys.SAVEABLE_OBJECTS collections with the name \"cudnn_lstm/opaque_kernel_saveable\".<br>\nwhen executing saver.import_meta_graph, in saver.save_op(line 189 of saver.py) function the saveable object mentioned above is somehow transfered into \"cudnn_lstm/rnn/multi_rnn_cell/cell_0/cudnn_compatible_lstm_cell/kernel\" and \"cudnn_lstm/rnn/multi_rnn_cell/cell_0/cudnn_compatible_lstm_cell/bias\" and gets saved. But the op named \"cudnn_lstm/opaque_kernel_saveable\" didn't gets saved. I'm wandering if this is a bug.</p>\n<p><strong>Describe the expected behavior</strong><br>\ngraph gets imported</p>\n<p><strong>Code to reproduce the issue</strong></p>\n<pre><code>import tensorflow as tf\nimport numpy as np\nnum_layers = 1\nnum_units = 128\ndirection = \"unidirectional\"\ninputs    = tf.placeholder(tf.float32, [None, None, 32], name=\"inputs\")\nconvolved = tf.transpose(inputs, [1, 0, 2])\n\nlstm      =  tf.contrib.cudnn_rnn.CudnnLSTM(num_layers, num_units, direction=direction)\noutputs, output_states = lstm(convolved, training=True)\nenc_output = tf.transpose(outputs, [1, 0, 2])\noptimizer  = tf.train.AdamOptimizer(0.001)\noptim = optimizer.minimize(enc_output)\nsaver     = tf.train.Saver()\ninit      = tf.global_variables_initializer()\nwith tf.Session() as session:\n    session.run(init)\n    # export MetaGraphDef proto to mgd\n    mgd=saver.export_meta_graph()\nwith tf.Session(graph=tf.Graph()) as session:\n    # import graph from mgd on another graph\n    saver = tf.train.import_meta_graph(mgd)\n</code></pre>", "body_text": "System information\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): CentOS 7.4\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary): pip install .whl\nTensorFlow version (use command below): 1.12.0\nPython version: 2.7.14\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source): c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-28)\nCUDA/cuDNN version: cuda: 9.0 cuDNN: 7.1.3\nGPU model and memory: GTX1050Ti/4GB\ntf_env.txt\n\nDescribe the current behavior\nI try to import graph from a MetaGraphDef proto that contains a CudnnRNN cell, the error below raises:\n Traceback (most recent call last):\n  File \"test.py\", line 21, in <module>\n    saver = tf.train.import_meta_graph(mgd)\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1674, in import_meta_graph\n    meta_graph_or_file, clear_devices, import_scope, **kwargs)[0]\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1696, in _import_meta_graph_with_return_elements\n    **kwargs))\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/framework/meta_graph.py\", line 852, in import_scoped_meta_graph_with_return_elements\n    ops.prepend_name_scope(value, scope_to_prepend_to_names))\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 3490, in as_graph_element\n    return self._as_graph_element_locked(obj, allow_tensor, allow_operation)\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 3550, in _as_graph_element_locked\n    \"graph.\" % repr(name))\nKeyError: \"The name 'cudnn_lstm/opaque_kernel_saveable' refers to an Operation not in the graph.\"\n\nWhat I've done:\nI've debuged the souce code and found out that a CudnnLSTMSaveable instance is created when cudnnRNN cell gets called and corresponding op was saved in tf.GraphKeys.SAVEABLE_OBJECTS collections with the name \"cudnn_lstm/opaque_kernel_saveable\".\nwhen executing saver.import_meta_graph, in saver.save_op(line 189 of saver.py) function the saveable object mentioned above is somehow transfered into \"cudnn_lstm/rnn/multi_rnn_cell/cell_0/cudnn_compatible_lstm_cell/kernel\" and \"cudnn_lstm/rnn/multi_rnn_cell/cell_0/cudnn_compatible_lstm_cell/bias\" and gets saved. But the op named \"cudnn_lstm/opaque_kernel_saveable\" didn't gets saved. I'm wandering if this is a bug.\nDescribe the expected behavior\ngraph gets imported\nCode to reproduce the issue\nimport tensorflow as tf\nimport numpy as np\nnum_layers = 1\nnum_units = 128\ndirection = \"unidirectional\"\ninputs    = tf.placeholder(tf.float32, [None, None, 32], name=\"inputs\")\nconvolved = tf.transpose(inputs, [1, 0, 2])\n\nlstm      =  tf.contrib.cudnn_rnn.CudnnLSTM(num_layers, num_units, direction=direction)\noutputs, output_states = lstm(convolved, training=True)\nenc_output = tf.transpose(outputs, [1, 0, 2])\noptimizer  = tf.train.AdamOptimizer(0.001)\noptim = optimizer.minimize(enc_output)\nsaver     = tf.train.Saver()\ninit      = tf.global_variables_initializer()\nwith tf.Session() as session:\n    session.run(init)\n    # export MetaGraphDef proto to mgd\n    mgd=saver.export_meta_graph()\nwith tf.Session(graph=tf.Graph()) as session:\n    # import graph from mgd on another graph\n    saver = tf.train.import_meta_graph(mgd)", "body": "**System information**\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): CentOS 7.4\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\r\n- TensorFlow installed from (source or binary): pip install .whl\r\n- TensorFlow version (use command below): 1.12.0\r\n- Python version: 2.7.14\r\n- Bazel version (if compiling from source): \r\n- GCC/Compiler version (if compiling from source): c++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-28)\r\n- CUDA/cuDNN version: cuda: 9.0 cuDNN: 7.1.3\r\n- GPU model and memory: GTX1050Ti/4GB\r\n[tf_env.txt](https://github.com/tensorflow/tensorflow/files/2603030/tf_env.txt)\r\n\r\n\r\n**Describe the current behavior**\r\nI try to import graph from a MetaGraphDef proto that contains a CudnnRNN cell, the error below raises:\r\n\r\n```\r\n Traceback (most recent call last):\r\n  File \"test.py\", line 21, in <module>\r\n    saver = tf.train.import_meta_graph(mgd)\r\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1674, in import_meta_graph\r\n    meta_graph_or_file, clear_devices, import_scope, **kwargs)[0]\r\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1696, in _import_meta_graph_with_return_elements\r\n    **kwargs))\r\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/framework/meta_graph.py\", line 852, in import_scoped_meta_graph_with_return_elements\r\n    ops.prepend_name_scope(value, scope_to_prepend_to_names))\r\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 3490, in as_graph_element\r\n    return self._as_graph_element_locked(obj, allow_tensor, allow_operation)\r\n  File \"/root/anaconda2/envs/tf12/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 3550, in _as_graph_element_locked\r\n    \"graph.\" % repr(name))\r\nKeyError: \"The name 'cudnn_lstm/opaque_kernel_saveable' refers to an Operation not in the graph.\"\r\n```\r\n\r\nWhat I've done:\r\nI've debuged the souce code and found out that a CudnnLSTMSaveable instance is created when cudnnRNN cell gets called and corresponding op was saved in tf.GraphKeys.SAVEABLE_OBJECTS collections with the name \"cudnn_lstm/opaque_kernel_saveable\".\r\nwhen executing saver.import_meta_graph, in saver.save_op(line 189 of saver.py) function the saveable object mentioned above is somehow transfered into \"cudnn_lstm/rnn/multi_rnn_cell/cell_0/cudnn_compatible_lstm_cell/kernel\" and \"cudnn_lstm/rnn/multi_rnn_cell/cell_0/cudnn_compatible_lstm_cell/bias\" and gets saved. But the op named \"cudnn_lstm/opaque_kernel_saveable\" didn't gets saved. I'm wandering if this is a bug.\r\n\r\n**Describe the expected behavior**\r\ngraph gets imported\r\n\r\n**Code to reproduce the issue**\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\nnum_layers = 1\r\nnum_units = 128\r\ndirection = \"unidirectional\"\r\ninputs    = tf.placeholder(tf.float32, [None, None, 32], name=\"inputs\")\r\nconvolved = tf.transpose(inputs, [1, 0, 2])\r\n\r\nlstm      =  tf.contrib.cudnn_rnn.CudnnLSTM(num_layers, num_units, direction=direction)\r\noutputs, output_states = lstm(convolved, training=True)\r\nenc_output = tf.transpose(outputs, [1, 0, 2])\r\noptimizer  = tf.train.AdamOptimizer(0.001)\r\noptim = optimizer.minimize(enc_output)\r\nsaver     = tf.train.Saver()\r\ninit      = tf.global_variables_initializer()\r\nwith tf.Session() as session:\r\n    session.run(init)\r\n    # export MetaGraphDef proto to mgd\r\n    mgd=saver.export_meta_graph()\r\nwith tf.Session(graph=tf.Graph()) as session:\r\n    # import graph from mgd on another graph\r\n    saver = tf.train.import_meta_graph(mgd)\r\n```\r\n\r\n"}