{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7489", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7489/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7489/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7489/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7489", "id": 207418983, "node_id": "MDU6SXNzdWUyMDc0MTg5ODM=", "number": 7489, "title": "how to use baidu wrap-ctc on tensorflow?", "user": {"login": "guoying1030", "id": 17998982, "node_id": "MDQ6VXNlcjE3OTk4OTgy", "avatar_url": "https://avatars2.githubusercontent.com/u/17998982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guoying1030", "html_url": "https://github.com/guoying1030", "followers_url": "https://api.github.com/users/guoying1030/followers", "following_url": "https://api.github.com/users/guoying1030/following{/other_user}", "gists_url": "https://api.github.com/users/guoying1030/gists{/gist_id}", "starred_url": "https://api.github.com/users/guoying1030/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guoying1030/subscriptions", "organizations_url": "https://api.github.com/users/guoying1030/orgs", "repos_url": "https://api.github.com/users/guoying1030/repos", "events_url": "https://api.github.com/users/guoying1030/events{/privacy}", "received_events_url": "https://api.github.com/users/guoying1030/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-14T05:01:49Z", "updated_at": "2017-02-14T22:15:21Z", "closed_at": "2017-02-14T22:15:21Z", "author_association": "NONE", "body_html": "<p>when i use tensorflow ctc, i find it is very slow,,,<br>\nso i want use baidu wrap-ctc on tensorflow,</p>\n<p>but how to write code?</p>\n<p>when i use tensorflow ctc, i write it:<br>\nprint logits.get_shape()<br>\nlogits = tf.reshape(logits, [batch_size, -1, nout])<br>\nlogits = tf.transpose(logits, (1, 0, 2))<br>\nprint 'logits shape is '<br>\nprint logits.get_shape()<br>\nlabels = tf.SparseTensor(indices=label_idx, values=label_vals, shape=label_shape)<br>\nprint 'init label'<br>\nloss = ctc_ops.ctc_loss(inputs=logits, labels=labels, sequence_length=seq_len)<br>\nprint 'init loss'<br>\ncost = tf.reduce_mean(loss)<br>\nprint 'init cost'<br>\ndecoded, log_prob = ctc_ops.ctc_greedy_decoder(logits, seq_len)<br>\nprint 'init decoded'<br>\nler = tf.reduce_mean(tf.edit_distance(tf.cast(decoded[0], tf.int32),<br>\nlabels))<br>\nprint 'init ler'</p>", "body_text": "when i use tensorflow ctc, i find it is very slow,,,\nso i want use baidu wrap-ctc on tensorflow,\nbut how to write code?\nwhen i use tensorflow ctc, i write it:\nprint logits.get_shape()\nlogits = tf.reshape(logits, [batch_size, -1, nout])\nlogits = tf.transpose(logits, (1, 0, 2))\nprint 'logits shape is '\nprint logits.get_shape()\nlabels = tf.SparseTensor(indices=label_idx, values=label_vals, shape=label_shape)\nprint 'init label'\nloss = ctc_ops.ctc_loss(inputs=logits, labels=labels, sequence_length=seq_len)\nprint 'init loss'\ncost = tf.reduce_mean(loss)\nprint 'init cost'\ndecoded, log_prob = ctc_ops.ctc_greedy_decoder(logits, seq_len)\nprint 'init decoded'\nler = tf.reduce_mean(tf.edit_distance(tf.cast(decoded[0], tf.int32),\nlabels))\nprint 'init ler'", "body": "when i use tensorflow ctc, i find it is very slow,,,\r\nso i want use baidu wrap-ctc on tensorflow,\r\n\r\nbut how to write code?\r\n\r\nwhen i use tensorflow ctc, i write it:\r\n    print logits.get_shape()\r\n    logits = tf.reshape(logits, [batch_size, -1, nout])\r\n    logits = tf.transpose(logits, (1, 0, 2))\r\n    print 'logits shape is '\r\n    print logits.get_shape()\r\n    labels = tf.SparseTensor(indices=label_idx, values=label_vals, shape=label_shape)\r\n    print 'init label'\r\n    loss = ctc_ops.ctc_loss(inputs=logits, labels=labels, sequence_length=seq_len)\r\n    print 'init loss'\r\n    cost = tf.reduce_mean(loss)\r\n    print 'init cost'\r\n    decoded, log_prob = ctc_ops.ctc_greedy_decoder(logits, seq_len)\r\n    print 'init decoded'\r\n    ler = tf.reduce_mean(tf.edit_distance(tf.cast(decoded[0], tf.int32),\r\n                                          labels))\r\n    print 'init ler'"}