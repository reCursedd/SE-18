{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/356151722", "html_url": "https://github.com/tensorflow/tensorflow/issues/15002#issuecomment-356151722", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15002", "id": 356151722, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjE1MTcyMg==", "user": {"login": "m3bm3b", "id": 10168793, "node_id": "MDQ6VXNlcjEwMTY4Nzkz", "avatar_url": "https://avatars0.githubusercontent.com/u/10168793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m3bm3b", "html_url": "https://github.com/m3bm3b", "followers_url": "https://api.github.com/users/m3bm3b/followers", "following_url": "https://api.github.com/users/m3bm3b/following{/other_user}", "gists_url": "https://api.github.com/users/m3bm3b/gists{/gist_id}", "starred_url": "https://api.github.com/users/m3bm3b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m3bm3b/subscriptions", "organizations_url": "https://api.github.com/users/m3bm3b/orgs", "repos_url": "https://api.github.com/users/m3bm3b/repos", "events_url": "https://api.github.com/users/m3bm3b/events{/privacy}", "received_events_url": "https://api.github.com/users/m3bm3b/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-09T01:33:47Z", "updated_at": "2018-01-09T01:33:47Z", "author_association": "NONE", "body_html": "<blockquote>\n<p>for nsync header files, I think we should have an easier way, or at least instructions to<br>\ninclude the include direcotory? CC <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=10168793\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/m3bm3b\">@m3bm3b</a> for that.</p>\n</blockquote>\n<p>For the nsync header files:</p>\n<p>Looking at<br>\n<a href=\"https://github.com/cgtuebingen/tf_custom_op/blame/master/matrix_add/CMakeLists.txt\">https://github.com/cgtuebingen/tf_custom_op/blame/master/matrix_add/CMakeLists.txt</a><br>\nit looks like that CMakeLists.txt has already been changed (a few hours ago) to do<br>\ninclude_directories(\"${TF_INC}/external/nsync/public/\")<br>\nwhich helps, but only for uses of cgtuebingen/tf_custom_op</p>\n<p>We could certainly add a sentence to the documentation for people<br>\nusing other build descriptions.<br>\nIt's unclear to me how to automate a process beyond that,<br>\nbecause each build description will be different.</p>\n<p>At some cost, we could avoid the need to include the nsync headers.</p>\n<p>To do it, we would change<br>\ntensorflow/core/platform/default/mutex.h<br>\nand add a new<br>\ntensorflow/core/platform/default/mutex.cc<br>\nAll the routines would be re-written to be out of line in the .cc file<br>\n(not inline in the .h file), and the nsync_{mu,cv} fields in the .h file<br>\nwould be replaced by an array of two pointer-sized values, e.g.:<br>\nvoid *mu_[2];<br>\nThis would work because nsync's mutex and condition variable<br>\nfit in that space and need no better than pointer alignment.<br>\n(And the plan is that those facts will never change.)</p>\n<p>The downsides are:<br>\n- by making the routines no longer be inline, the mutex fast path<br>\nwill be a few nanoseconds slower.<br>\n- it's an abstraction violation for tensorflow code<br>\nto know that nsync's types have those sizes.<br>\nBut those disadvantages must be weighed against the annoyance<br>\nof having to include the nsync headers when using binary distributions.</p>", "body_text": "for nsync header files, I think we should have an easier way, or at least instructions to\ninclude the include direcotory? CC @m3bm3b for that.\n\nFor the nsync header files:\nLooking at\nhttps://github.com/cgtuebingen/tf_custom_op/blame/master/matrix_add/CMakeLists.txt\nit looks like that CMakeLists.txt has already been changed (a few hours ago) to do\ninclude_directories(\"${TF_INC}/external/nsync/public/\")\nwhich helps, but only for uses of cgtuebingen/tf_custom_op\nWe could certainly add a sentence to the documentation for people\nusing other build descriptions.\nIt's unclear to me how to automate a process beyond that,\nbecause each build description will be different.\nAt some cost, we could avoid the need to include the nsync headers.\nTo do it, we would change\ntensorflow/core/platform/default/mutex.h\nand add a new\ntensorflow/core/platform/default/mutex.cc\nAll the routines would be re-written to be out of line in the .cc file\n(not inline in the .h file), and the nsync_{mu,cv} fields in the .h file\nwould be replaced by an array of two pointer-sized values, e.g.:\nvoid *mu_[2];\nThis would work because nsync's mutex and condition variable\nfit in that space and need no better than pointer alignment.\n(And the plan is that those facts will never change.)\nThe downsides are:\n- by making the routines no longer be inline, the mutex fast path\nwill be a few nanoseconds slower.\n- it's an abstraction violation for tensorflow code\nto know that nsync's types have those sizes.\nBut those disadvantages must be weighed against the annoyance\nof having to include the nsync headers when using binary distributions.", "body": "> for nsync header files, I think we should have an easier way, or at least instructions to \r\n> include the include direcotory? CC @m3bm3b for that.\r\n\r\nFor the nsync header files:\r\n\r\nLooking at \r\n    https://github.com/cgtuebingen/tf_custom_op/blame/master/matrix_add/CMakeLists.txt\r\nit looks like that CMakeLists.txt has already been changed (a few hours ago) to do\r\n    include_directories(\"${TF_INC}/external/nsync/public/\")\r\nwhich helps, but only for uses of cgtuebingen/tf_custom_op\r\n\r\nWe could certainly add a sentence to the documentation for people\r\nusing other build descriptions.\r\nIt's unclear to me how to automate a process beyond that, \r\nbecause each build description will be different.   \r\n\r\nAt some cost, we could avoid the need to include the nsync headers.\r\n\r\nTo do it, we would change \r\n      tensorflow/core/platform/default/mutex.h\r\nand add a new\r\n      tensorflow/core/platform/default/mutex.cc\r\nAll the routines would be re-written to be out of line in the .cc file \r\n(not inline in the .h file), and the nsync_{mu,cv} fields in the .h file \r\nwould be replaced by an array of two pointer-sized values, e.g.:\r\n      void *mu_[2];\r\nThis would work because nsync's mutex and condition variable\r\nfit in that space and need no better than pointer alignment. \r\n(And the plan is that those facts will never change.)\r\n\r\nThe downsides are:\r\n    - by making the routines no longer be inline, the mutex fast path\r\n      will be a few nanoseconds slower.\r\n    - it's an abstraction violation for tensorflow code \r\n      to know that nsync's types have those sizes.\r\nBut those disadvantages must be weighed against the annoyance \r\nof having to include the nsync headers when using binary distributions.\r\n"}