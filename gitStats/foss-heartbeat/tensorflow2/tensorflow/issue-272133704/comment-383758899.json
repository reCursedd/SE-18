{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/383758899", "html_url": "https://github.com/tensorflow/tensorflow/issues/14356#issuecomment-383758899", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14356", "id": 383758899, "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc1ODg5OQ==", "user": {"login": "Qmoliang", "id": 16307329, "node_id": "MDQ6VXNlcjE2MzA3MzI5", "avatar_url": "https://avatars1.githubusercontent.com/u/16307329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qmoliang", "html_url": "https://github.com/Qmoliang", "followers_url": "https://api.github.com/users/Qmoliang/followers", "following_url": "https://api.github.com/users/Qmoliang/following{/other_user}", "gists_url": "https://api.github.com/users/Qmoliang/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qmoliang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qmoliang/subscriptions", "organizations_url": "https://api.github.com/users/Qmoliang/orgs", "repos_url": "https://api.github.com/users/Qmoliang/repos", "events_url": "https://api.github.com/users/Qmoliang/events{/privacy}", "received_events_url": "https://api.github.com/users/Qmoliang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-23T23:55:02Z", "updated_at": "2018-04-23T23:55:02Z", "author_association": "NONE", "body_html": "<p>If you find this problem, try to write K.clear_session() when you secondly use your function for establishing your graph. Besides, you should reload the model and predict it randomly with a simple input. I fixed my code just like this:</p>\n<pre><code>uncerts_normal = get_mc_predictions(model, X_test, Y_label,\nbatch_size=args.batch_size) \n.var(axis=0)#.mean(axis=1)\nprint(uncerts_normal.shape)\nuncerts_normal1 = l2_normalize(a, axis=-1)\nK.clear_session() \nmodel = load_model('../data/model_%s.h5' % args.dataset)\nprint('testing model1:', model.predict(np.zeros((1, 28, 28, 1))))\nuncerts_noisy = get_mc_predictions(model, X_test_noisy,Y_label,\n                                   batch_size=args.batch_size).var(axis=0)\n</code></pre>", "body_text": "If you find this problem, try to write K.clear_session() when you secondly use your function for establishing your graph. Besides, you should reload the model and predict it randomly with a simple input. I fixed my code just like this:\nuncerts_normal = get_mc_predictions(model, X_test, Y_label,\nbatch_size=args.batch_size) \n.var(axis=0)#.mean(axis=1)\nprint(uncerts_normal.shape)\nuncerts_normal1 = l2_normalize(a, axis=-1)\nK.clear_session() \nmodel = load_model('../data/model_%s.h5' % args.dataset)\nprint('testing model1:', model.predict(np.zeros((1, 28, 28, 1))))\nuncerts_noisy = get_mc_predictions(model, X_test_noisy,Y_label,\n                                   batch_size=args.batch_size).var(axis=0)", "body": "If you find this problem, try to write K.clear_session() when you secondly use your function for establishing your graph. Besides, you should reload the model and predict it randomly with a simple input. I fixed my code just like this:\r\n````\r\nuncerts_normal = get_mc_predictions(model, X_test, Y_label,\r\nbatch_size=args.batch_size) \r\n.var(axis=0)#.mean(axis=1)\r\nprint(uncerts_normal.shape)\r\nuncerts_normal1 = l2_normalize(a, axis=-1)\r\nK.clear_session() \r\nmodel = load_model('../data/model_%s.h5' % args.dataset)\r\nprint('testing model1:', model.predict(np.zeros((1, 28, 28, 1))))\r\nuncerts_noisy = get_mc_predictions(model, X_test_noisy,Y_label,\r\n                                   batch_size=args.batch_size).var(axis=0)\r\n````"}