{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16364", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16364/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16364/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16364/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16364", "id": 291216377, "node_id": "MDU6SXNzdWUyOTEyMTYzNzc=", "number": 16364, "title": "Standardizing the saved format and/or converting to big-endian on read", "user": {"login": "namrata-ibm", "id": 21953668, "node_id": "MDQ6VXNlcjIxOTUzNjY4", "avatar_url": "https://avatars3.githubusercontent.com/u/21953668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/namrata-ibm", "html_url": "https://github.com/namrata-ibm", "followers_url": "https://api.github.com/users/namrata-ibm/followers", "following_url": "https://api.github.com/users/namrata-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/namrata-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/namrata-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/namrata-ibm/subscriptions", "organizations_url": "https://api.github.com/users/namrata-ibm/orgs", "repos_url": "https://api.github.com/users/namrata-ibm/repos", "events_url": "https://api.github.com/users/namrata-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/namrata-ibm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-24T13:52:54Z", "updated_at": "2018-01-30T03:47:50Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04 s390x</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.4.1</li>\n<li><strong>Python version</strong>: 2.7.12</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.7.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 5.4.0</li>\n<li><strong>CUDA/cuDNN version</strong>: NA</li>\n<li><strong>GPU model and memory</strong>: NA</li>\n<li><strong>Exact command to reproduce</strong>: bazel test -c opt //tensorflow/python:framework_meta_graph_test which invokes meta_graph.import_scoped_meta_graph.</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The testdata for //tensorflow/python:framework_meta_graph_test is not platform independent and causes test to fail on Big Endian systems.</p>\n<p>As per discussion in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"287362612\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/16003\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/16003/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/16003\">#16003</a> , correct approach would be standardizing the stored format and/or conversion on load based on endianness. Can someone have a look?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04 s390x\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): v1.4.1\nPython version: 2.7.12\nBazel version (if compiling from source): 0.7.0\nGCC/Compiler version (if compiling from source): 5.4.0\nCUDA/cuDNN version: NA\nGPU model and memory: NA\nExact command to reproduce: bazel test -c opt //tensorflow/python:framework_meta_graph_test which invokes meta_graph.import_scoped_meta_graph.\n\nDescribe the problem\nThe testdata for //tensorflow/python:framework_meta_graph_test is not platform independent and causes test to fail on Big Endian systems.\nAs per discussion in #16003 , correct approach would be standardizing the stored format and/or conversion on load based on endianness. Can someone have a look?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04 s390x\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: v1.4.1\r\n- **Python version**: 2.7.12\r\n- **Bazel version (if compiling from source)**: 0.7.0\r\n- **GCC/Compiler version (if compiling from source)**: 5.4.0\r\n- **CUDA/cuDNN version**: NA\r\n- **GPU model and memory**: NA\r\n- **Exact command to reproduce**: bazel test -c opt //tensorflow/python:framework_meta_graph_test which invokes meta_graph.import_scoped_meta_graph.\r\n\r\n### Describe the problem\r\nThe testdata for //tensorflow/python:framework_meta_graph_test is not platform independent and causes test to fail on Big Endian systems.\r\n\r\nAs per discussion in #16003 , correct approach would be standardizing the stored format and/or conversion on load based on endianness. Can someone have a look?  \r\n"}