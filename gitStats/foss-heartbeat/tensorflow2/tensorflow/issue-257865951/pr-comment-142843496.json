{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/142843496", "pull_request_review_id": 67264042, "id": 142843496, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0Mjg0MzQ5Ng==", "diff_hunk": "@@ -548,46 +593,60 @@ struct BatchNarrowMatrixTransposeDispatcher {\n template <typename T, int TileLongSide, int TileShortSide>\n struct BatchNarrowMatrixTransposeDispatcher<\n     T, TileLongSide, TileShortSide,\n-    typename std::enable_if<TileSizeOnFrontier(TileLongSide, TileShortSide,\n-                                               sizeof(T)),\n+    typename std::enable_if<TileSizeOnBoundaryNotFrontier(\n+                                TileLongSide, TileShortSide, sizeof(T)),\n                             void>::type> {\n   static void DoIt(const GPUDevice& d, int tile_size_i, int tile_size_j,\n                    int total_tiles_count, const T* input,\n                    const Dimension<3>& input_dims, T* output) {\n     static_assert(\n         (TileLongSide & (TileLongSide - 1)) == 0,\n         \"The length of the longer side of the tile is always a power of 2.\");\n+    bool request_satisfied = max(tile_size_i, tile_size_j) <= TileLongSide &&\n+                             min(tile_size_i, tile_size_j) <= TileShortSide;\n \n-    constexpr int NumThreads = TileLongSide;\n-    if (tile_size_i <= TileLongSide && tile_size_j <= TileShortSide) {\n-      SwapDimension1And2InTensor3UsingTiles<T, NumThreads, TileLongSide,\n-                                            TileShortSide>\n-          <<<total_tiles_count, NumThreads, 0, d.stream()>>>(input, input_dims,\n-                                                             output);\n-    } else {\n-      SwapDimension1And2InTensor3UsingTiles<T, NumThreads, TileShortSide,\n-                                            TileLongSide>\n-          <<<total_tiles_count, NumThreads, 0, d.stream()>>>(input, input_dims,\n-                                                             output);\n+    if (request_satisfied) {\n+      LaunchBatchNarrowMatrixTransposeKernel<T, TileLongSide, TileShortSide>(\n+          d, tile_size_i, tile_size_j, total_tiles_count, input, input_dims,\n+          output);\n     }\n+\n+    // If the execution reaches here, then the kernel was not launched; since\n+    // we are on the boundary of the performant subspace but not on the\n+    // frontier, we increment the short dimension and try again.\n+    BatchNarrowMatrixTransposeDispatcher<\n+        T, TileLongSide, TileShortSide + 1>::DoIt(d, tile_size_i, tile_size_j,\n+                                                  total_tiles_count, input,\n+                                                  input_dims, output);\n   }\n };\n \n template <typename T, int TileLongSide, int TileShortSide>\n struct BatchNarrowMatrixTransposeDispatcher<\n     T, TileLongSide, TileShortSide,\n-    typename std::enable_if<TileSizePastFrontier(TileLongSide, TileShortSide,\n-                                                 sizeof(T)),\n+    typename std::enable_if<TileSizeOnFrontier(TileLongSide, TileShortSide,\n+                                               sizeof(T)),\n                             void>::type> {\n   static void DoIt(const GPUDevice& d, int tile_size_i, int tile_size_j,\n                    int total_tiles_count, const T* input,\n                    const Dimension<3>& input_dims, T* output) {\n-    assert(false &&\n-           \"BatchNarrowMatrixTransposeDispatcher has requested an unexpected \"\n-           \"launch configuration. \");\n+    static_assert(\n+        (TileLongSide & (TileLongSide - 1)) == 0,\n+        \"The length of the longer side of the tile is always a power of 2.\");\n+\n+    LaunchBatchNarrowMatrixTransposeKernel<T, TileLongSide, TileShortSide>(\n+        d, tile_size_i, tile_size_j, total_tiles_count, input, input_dims,\n+        output);\n   }\n };\n \n+template <typename T, int TileLongSide, int TileShortSide>", "path": "tensorflow/core/kernels/conv_ops_gpu_3.cu.cc", "position": null, "original_position": 204, "commit_id": "63d7a082d37c7db42ce52410cf240efda92eaa74", "original_commit_id": "607288f7be568d23aa7b9f7c76bfbdd0b859b67d", "user": {"login": "tjingrant", "id": 6410074, "node_id": "MDQ6VXNlcjY0MTAwNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6410074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjingrant", "html_url": "https://github.com/tjingrant", "followers_url": "https://api.github.com/users/tjingrant/followers", "following_url": "https://api.github.com/users/tjingrant/following{/other_user}", "gists_url": "https://api.github.com/users/tjingrant/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjingrant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjingrant/subscriptions", "organizations_url": "https://api.github.com/users/tjingrant/orgs", "repos_url": "https://api.github.com/users/tjingrant/repos", "events_url": "https://api.github.com/users/tjingrant/events{/privacy}", "received_events_url": "https://api.github.com/users/tjingrant/received_events", "type": "User", "site_admin": false}, "body": "Indeed no need! ", "created_at": "2017-10-05T03:58:03Z", "updated_at": "2017-12-28T20:26:00Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13049#discussion_r142843496", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13049", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/142843496"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13049#discussion_r142843496"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13049"}}, "body_html": "<p>Indeed no need!</p>", "body_text": "Indeed no need!", "in_reply_to_id": 142841839}