{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/354181078", "html_url": "https://github.com/tensorflow/tensorflow/pull/13049#issuecomment-354181078", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13049", "id": 354181078, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDE4MTA3OA==", "user": {"login": "tjingrant", "id": 6410074, "node_id": "MDQ6VXNlcjY0MTAwNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6410074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjingrant", "html_url": "https://github.com/tjingrant", "followers_url": "https://api.github.com/users/tjingrant/followers", "following_url": "https://api.github.com/users/tjingrant/following{/other_user}", "gists_url": "https://api.github.com/users/tjingrant/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjingrant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjingrant/subscriptions", "organizations_url": "https://api.github.com/users/tjingrant/orgs", "repos_url": "https://api.github.com/users/tjingrant/repos", "events_url": "https://api.github.com/users/tjingrant/events{/privacy}", "received_events_url": "https://api.github.com/users/tjingrant/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-27T21:35:24Z", "updated_at": "2017-12-27T21:35:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Yes, I was able to identify the major culprit behind the performance degradation and I'm applying my fix.</p>\n<p>Specifically, by examining the generated assembly code, I think the performance degradation compared to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1002405\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yzhwang\">@yzhwang</a> 's implementation comes down to these lines:</p>\n<pre><code>int ti = x / TileSizeJ;\nint tj = x % TileSizeJ;\n</code></pre>\n<p>I think due to these computations to obtain a 2D thread ids, the compiler is unable to recognize that I'm actually accessing contiguous memory regions within a warp. I'm trying to make it more obvious for the compiler to optimize for such memory access. I'll try to push some changes between today and tomorrow.</p>", "body_text": "Yes, I was able to identify the major culprit behind the performance degradation and I'm applying my fix.\nSpecifically, by examining the generated assembly code, I think the performance degradation compared to @yzhwang 's implementation comes down to these lines:\nint ti = x / TileSizeJ;\nint tj = x % TileSizeJ;\n\nI think due to these computations to obtain a 2D thread ids, the compiler is unable to recognize that I'm actually accessing contiguous memory regions within a warp. I'm trying to make it more obvious for the compiler to optimize for such memory access. I'll try to push some changes between today and tomorrow.", "body": "Yes, I was able to identify the major culprit behind the performance degradation and I'm applying my fix. \r\n\r\nSpecifically, by examining the generated assembly code, I think the performance degradation compared to @yzhwang 's implementation comes down to these lines:\r\n```\r\nint ti = x / TileSizeJ;\r\nint tj = x % TileSizeJ;\r\n```\r\nI think due to these computations to obtain a 2D thread ids, the compiler is unable to recognize that I'm actually accessing contiguous memory regions within a warp. I'm trying to make it more obvious for the compiler to optimize for such memory access. I'll try to push some changes between today and tomorrow."}