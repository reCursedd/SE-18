{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/336526695", "html_url": "https://github.com/tensorflow/tensorflow/pull/13049#issuecomment-336526695", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13049", "id": 336526695, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjUyNjY5NQ==", "user": {"login": "tjingrant", "id": 6410074, "node_id": "MDQ6VXNlcjY0MTAwNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6410074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjingrant", "html_url": "https://github.com/tjingrant", "followers_url": "https://api.github.com/users/tjingrant/followers", "following_url": "https://api.github.com/users/tjingrant/following{/other_user}", "gists_url": "https://api.github.com/users/tjingrant/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjingrant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjingrant/subscriptions", "organizations_url": "https://api.github.com/users/tjingrant/orgs", "repos_url": "https://api.github.com/users/tjingrant/repos", "events_url": "https://api.github.com/users/tjingrant/events{/privacy}", "received_events_url": "https://api.github.com/users/tjingrant/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-13T18:06:12Z", "updated_at": "2017-10-13T18:06:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1002405\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yzhwang\">@yzhwang</a> great to see you here! Now we can get the conversation starting and move forward! If you look into my implementation, beware of a bug introduced by the later commits that causes redundant kernel executions and somehow slipped through the tests because it doesn't interfere with the results.</p>\n<p>I also looked into your design and you certainly raise the baseline to a new height! As I put in my edit, I no longer believe that what you did is a subset of my implementation. Your specializations prove useful for later architectures (which I did not specifically target since from comments of your code, I inferred that K40 is what you care about and this implementation is indeed faster on K40 using your benchmarks) and I'm still in the process of figuring out which are the most important factors contributing to the better performance. That being said, it would be nice to take the best from both of our implementation and properly recognize these contributions.</p>\n<p>Also, I suspect that you are trying to tackle the possibility that y dimension of the grid may overflow. I'm curious why not just use the x dimension of the grid as the general case does?</p>", "body_text": "@yzhwang great to see you here! Now we can get the conversation starting and move forward! If you look into my implementation, beware of a bug introduced by the later commits that causes redundant kernel executions and somehow slipped through the tests because it doesn't interfere with the results.\nI also looked into your design and you certainly raise the baseline to a new height! As I put in my edit, I no longer believe that what you did is a subset of my implementation. Your specializations prove useful for later architectures (which I did not specifically target since from comments of your code, I inferred that K40 is what you care about and this implementation is indeed faster on K40 using your benchmarks) and I'm still in the process of figuring out which are the most important factors contributing to the better performance. That being said, it would be nice to take the best from both of our implementation and properly recognize these contributions.\nAlso, I suspect that you are trying to tackle the possibility that y dimension of the grid may overflow. I'm curious why not just use the x dimension of the grid as the general case does?", "body": "@yzhwang great to see you here! Now we can get the conversation starting and move forward! If you look into my implementation, beware of a bug introduced by the later commits that causes redundant kernel executions and somehow slipped through the tests because it doesn't interfere with the results.\r\n\r\nI also looked into your design and you certainly raise the baseline to a new height! As I put in my edit, I no longer believe that what you did is a subset of my implementation. Your specializations prove useful for later architectures (which I did not specifically target since from comments of your code, I inferred that K40 is what you care about and this implementation is indeed faster on K40 using your benchmarks) and I'm still in the process of figuring out which are the most important factors contributing to the better performance. That being said, it would be nice to take the best from both of our implementation and properly recognize these contributions.\r\n\r\nAlso, I suspect that you are trying to tackle the possibility that y dimension of the grid may overflow. I'm curious why not just use the x dimension of the grid as the general case does?"}