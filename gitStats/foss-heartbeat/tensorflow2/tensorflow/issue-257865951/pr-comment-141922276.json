{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/141922276", "pull_request_review_id": 66213548, "id": 141922276, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTkyMjI3Ng==", "diff_hunk": "@@ -413,6 +429,275 @@ struct PadInput<GPUDevice, T, int, NDIMS> {\n   }\n };\n \n+// TPF stands for Tile size Posibility Frontier. It denotes the tile size\n+// combinations that consume the most computational resources constrained by\n+// number of threads per SM limit, shared memory limit and overall degree of\n+// parallelism.\n+// Tile size combinations lying on this frontier would achieve the maximum\n+// utilization of available resources and combinations lying outside this\n+// frontier is not performance-wise profitable or simply not possible.\n+#define TPF_CHECKER(OP)                                                   \\\n+  size_of_t == 16 &&    (TileLongSide == 32   && (TileShortSide OP 4)  || \\\n+                         TileLongSide == 64   && (TileShortSide OP 4)  || \\\n+                         TileLongSide == 128  && (TileShortSide OP 4)  || \\\n+                         TileLongSide == 256  && (TileShortSide OP 2)) || \\\n+      size_of_t == 8 && (TileLongSide == 32   && (TileShortSide OP 15) || \\\n+                         TileLongSide == 64   && (TileShortSide OP 15) || \\\n+                         TileLongSide == 128  && (TileShortSide OP 8)  || \\\n+                         TileLongSide == 256  && (TileShortSide OP 4)  || \\\n+                         TileLongSide == 512  && (TileShortSide OP 2)) || \\\n+      size_of_t == 4 && (TileLongSide == 32   && (TileShortSide OP 15) || \\\n+                         TileLongSide == 64   && (TileShortSide OP 15) || \\\n+                         TileLongSide == 128  && (TileShortSide OP 15) || \\\n+                         TileLongSide == 256  && (TileShortSide OP 10) || \\\n+                         TileLongSide == 512  && (TileShortSide OP 4)  || \\\n+                         TileLongSide == 1024 && (TileShortSide OP 2)) || \\\n+      size_of_t == 2 && (TileLongSide == 32   && (TileShortSide OP 15) || \\\n+                         TileLongSide == 64   && (TileShortSide OP 15) || \\\n+                         TileLongSide == 128  && (TileShortSide OP 15) || \\\n+                         TileLongSide == 256  && (TileShortSide OP 10) || \\\n+                         TileLongSide == 512  && (TileShortSide OP 4)  || \\\n+                         TileLongSide == 1024 && (TileShortSide OP 2)) || \\\n+      size_of_t == 1 && (TileLongSide == 32   && (TileShortSide OP 15) || \\\n+                         TileLongSide == 64   && (TileShortSide OP 15) || \\\n+                         TileLongSide == 128  && (TileShortSide OP 15) || \\\n+                         TileLongSide == 256  && (TileShortSide OP 10) || \\\n+                         TileLongSide == 512  && (TileShortSide OP 4)  || \\\n+                         TileLongSide == 1024 && (TileShortSide OP 2))\n+\n+constexpr bool TileSizePossibilityFrontierCheck(int TileLongSide,\n+                                                int TileShortSide,\n+                                                int size_of_t, int mode) {\n+  // When mode is 0, this function checks whether the tile size combination lies\n+  // on the tile size possibility frontier. When mode is 1, it checks whether\n+  // the combination lies outside the frontier.\n+  return mode == 0 ? TPF_CHECKER(==) : TPF_CHECKER(>);\n+}", "path": "tensorflow/core/kernels/conv_ops_gpu_3.cu.cc", "position": null, "original_position": 217, "commit_id": "63d7a082d37c7db42ce52410cf240efda92eaa74", "original_commit_id": "372d4111b99467a9eb4b4866ae8b53ecba505512", "user": {"login": "jlebar", "id": 150663, "node_id": "MDQ6VXNlcjE1MDY2Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/150663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlebar", "html_url": "https://github.com/jlebar", "followers_url": "https://api.github.com/users/jlebar/followers", "following_url": "https://api.github.com/users/jlebar/following{/other_user}", "gists_url": "https://api.github.com/users/jlebar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlebar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlebar/subscriptions", "organizations_url": "https://api.github.com/users/jlebar/orgs", "repos_url": "https://api.github.com/users/jlebar/repos", "events_url": "https://api.github.com/users/jlebar/events{/privacy}", "received_events_url": "https://api.github.com/users/jlebar/received_events", "type": "User", "site_admin": false}, "body": "I am kind of tempted to suggest that we get rid of this macro too:\r\n\r\n```\r\n// We want std::equal_to and std::greater, but they're not constexpr until C++14.\r\nstruct EqualTo {\r\n  constexpr bool operator()(int a, int b) { return a == b; }\r\n};\r\nstruct GreaterThan {\r\n  constexpr bool operator()(int a, int b) { return a > b; }\r\n};\r\ntemplate <typename Op>\r\nconstexpr bool TileSizeFrontierCheck(..., Op op) {\r\n  return size_of_t == 16 && ((TileLongSide == 32 && op(TileShortSide, 4)) ||\r\n                             (TileLongSide == 64 && op(TIleShortSide, 4)) || ...\r\n                                            \r\n}\r\nconstexpr bool TileSizeOnFrontier(...) { return TileSizeFrontierCheck(..., EqualTo()); }\r\nconstexpr bool TileSizePastFrontier(...) { return TileSizeFrontierCheck(..., GreaterThan()); }\r\n```\r\n\r\nIn addition to getting rid of the macro, this also lets you avoid the sort of ugly `mode` param.\r\n\r\nI also renamed it \"tile size frontier\", which I think gets the point across just as well as \"tile size possibility frontier\" with one less word.\r\n\r\nWDYT?", "created_at": "2017-09-29T17:23:53Z", "updated_at": "2017-12-28T20:26:00Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13049#discussion_r141922276", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13049", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/141922276"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13049#discussion_r141922276"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13049"}}, "body_html": "<p>I am kind of tempted to suggest that we get rid of this macro too:</p>\n<pre><code>// We want std::equal_to and std::greater, but they're not constexpr until C++14.\nstruct EqualTo {\n  constexpr bool operator()(int a, int b) { return a == b; }\n};\nstruct GreaterThan {\n  constexpr bool operator()(int a, int b) { return a &gt; b; }\n};\ntemplate &lt;typename Op&gt;\nconstexpr bool TileSizeFrontierCheck(..., Op op) {\n  return size_of_t == 16 &amp;&amp; ((TileLongSide == 32 &amp;&amp; op(TileShortSide, 4)) ||\n                             (TileLongSide == 64 &amp;&amp; op(TIleShortSide, 4)) || ...\n                                            \n}\nconstexpr bool TileSizeOnFrontier(...) { return TileSizeFrontierCheck(..., EqualTo()); }\nconstexpr bool TileSizePastFrontier(...) { return TileSizeFrontierCheck(..., GreaterThan()); }\n</code></pre>\n<p>In addition to getting rid of the macro, this also lets you avoid the sort of ugly <code>mode</code> param.</p>\n<p>I also renamed it \"tile size frontier\", which I think gets the point across just as well as \"tile size possibility frontier\" with one less word.</p>\n<p>WDYT?</p>", "body_text": "I am kind of tempted to suggest that we get rid of this macro too:\n// We want std::equal_to and std::greater, but they're not constexpr until C++14.\nstruct EqualTo {\n  constexpr bool operator()(int a, int b) { return a == b; }\n};\nstruct GreaterThan {\n  constexpr bool operator()(int a, int b) { return a > b; }\n};\ntemplate <typename Op>\nconstexpr bool TileSizeFrontierCheck(..., Op op) {\n  return size_of_t == 16 && ((TileLongSide == 32 && op(TileShortSide, 4)) ||\n                             (TileLongSide == 64 && op(TIleShortSide, 4)) || ...\n                                            \n}\nconstexpr bool TileSizeOnFrontier(...) { return TileSizeFrontierCheck(..., EqualTo()); }\nconstexpr bool TileSizePastFrontier(...) { return TileSizeFrontierCheck(..., GreaterThan()); }\n\nIn addition to getting rid of the macro, this also lets you avoid the sort of ugly mode param.\nI also renamed it \"tile size frontier\", which I think gets the point across just as well as \"tile size possibility frontier\" with one less word.\nWDYT?"}