{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/385526539", "html_url": "https://github.com/tensorflow/tensorflow/issues/17150#issuecomment-385526539", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17150", "id": 385526539, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTUyNjUzOQ==", "user": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-30T20:57:37Z", "updated_at": "2018-04-30T20:57:37Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13588114\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Hvass-Labs\">@Hvass-Labs</a> :</p>\n<p>your workaround will be compatible with sample weighting, if you use <code>tf.reduce_mean(foo, axis=-1)</code> instead of <code>tf.reduce_mean(foo)</code>.</p>\n<p>Thanks for the bug report. I verified the issue. Here is a reproducible example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> keras  <span class=\"pl-c\"><span class=\"pl-c\">#</span> also works for tf.keras</span>\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\nmodel <span class=\"pl-k\">=</span> keras.Sequential()\nmodel.add(keras.layers.Dense(<span class=\"pl-c1\">10</span>, <span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>)))\n\nmodel.compile(<span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>adam<span class=\"pl-pds\">'</span></span>,\n              <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>sparse_categorical_crossentropy<span class=\"pl-pds\">'</span></span>)\n\nx_data <span class=\"pl-k\">=</span> np.random.random((<span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>))\ny_data <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">9</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">32</span>,))\n\nmodel.fit(<span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>x_data, <span class=\"pl-v\">y</span><span class=\"pl-k\">=</span>y_data, <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">16</span>, <span class=\"pl-v\">epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)</pre></div>\n<p>I will look into a fix.</p>", "body_text": "@Hvass-Labs :\nyour workaround will be compatible with sample weighting, if you use tf.reduce_mean(foo, axis=-1) instead of tf.reduce_mean(foo).\nThanks for the bug report. I verified the issue. Here is a reproducible example:\nimport keras  # also works for tf.keras\nimport numpy as np\n\nmodel = keras.Sequential()\nmodel.add(keras.layers.Dense(10, input_shape=(5, 6)))\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy')\n\nx_data = np.random.random((32, 5, 6))\ny_data = np.random.randint(0, 9, size=(32,))\n\nmodel.fit(x=x_data, y=y_data, batch_size=16, epochs=3)\nI will look into a fix.", "body": "@Hvass-Labs : \r\n\r\nyour workaround will be compatible with sample weighting, if you use `tf.reduce_mean(foo, axis=-1)` instead of `tf.reduce_mean(foo)`.\r\n\r\nThanks for the bug report. I verified the issue. Here is a reproducible example:\r\n\r\n```python\r\nimport keras  # also works for tf.keras\r\nimport numpy as np\r\n\r\nmodel = keras.Sequential()\r\nmodel.add(keras.layers.Dense(10, input_shape=(5, 6)))\r\n\r\nmodel.compile(optimizer='adam',\r\n              loss='sparse_categorical_crossentropy')\r\n\r\nx_data = np.random.random((32, 5, 6))\r\ny_data = np.random.randint(0, 9, size=(32,))\r\n\r\nmodel.fit(x=x_data, y=y_data, batch_size=16, epochs=3)\r\n```\r\n\r\nI will look into a fix.\r\n\r\n\r\n"}