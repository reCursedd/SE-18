{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/380422701", "html_url": "https://github.com/tensorflow/tensorflow/issues/18415#issuecomment-380422701", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18415", "id": 380422701, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDQyMjcwMQ==", "user": {"login": "fengyang0317", "id": 7965501, "node_id": "MDQ6VXNlcjc5NjU1MDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7965501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fengyang0317", "html_url": "https://github.com/fengyang0317", "followers_url": "https://api.github.com/users/fengyang0317/followers", "following_url": "https://api.github.com/users/fengyang0317/following{/other_user}", "gists_url": "https://api.github.com/users/fengyang0317/gists{/gist_id}", "starred_url": "https://api.github.com/users/fengyang0317/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fengyang0317/subscriptions", "organizations_url": "https://api.github.com/users/fengyang0317/orgs", "repos_url": "https://api.github.com/users/fengyang0317/repos", "events_url": "https://api.github.com/users/fengyang0317/events{/privacy}", "received_events_url": "https://api.github.com/users/fengyang0317/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-11T11:43:10Z", "updated_at": "2018-04-11T11:53:55Z", "author_association": "NONE", "body_html": "<p>If I add a tab in line 38, which makes the code look like</p>\n<pre><code>  with tf.control_dependencies([tf.assert_equal(tf.shape(net_out[0])[1], 8)]):\n    out = to_rgb(net_out[0], 2, num_outputs)                                    # out.shape = [16, 8, 8, 3]\n    net = upscale2d(net_out[0])                                                 # net.shape = [16, 16, 16, 512]\n  net = slim.conv2d(net, 512, 3, scope='conv1')\n</code></pre>\n<p>The error would become</p>\n<pre><code>assertion failed: [] [Condition x == y did not hold element-wise:] [x (strided_slice:0) = ] [4] [y (assert_equal/y:0) = ] [8]\n\t [[Node: assert_equal/Assert/Assert = Assert[T=[DT_STRING, DT_STRING, DT_STRING, DT_INT32, DT_STRING, DT_INT32], summarize=3, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](assert_equal/Equal/_9, assert_equal/Assert/Assert/data_0, assert_equal/Assert/Assert/data_1, assert_equal/Assert/Assert/data_2, strided_slice/_11, assert_equal/Assert/Assert/data_4, assert_equal/y/_13)]]\n</code></pre>\n<p>If I comment line 41 and uncomment line 40, the code would work.</p>\n<pre><code>  net_out = tf.cond(tf.less(3, 4), lambda: net_out, lambda: (net, out))\n  #net_out = tf.cond(tf.less(3, 1), lambda: (net, out), lambda: net_out)         # ([16, 8, 8, 512], [16, 4, 4, 3])\n</code></pre>", "body_text": "If I add a tab in line 38, which makes the code look like\n  with tf.control_dependencies([tf.assert_equal(tf.shape(net_out[0])[1], 8)]):\n    out = to_rgb(net_out[0], 2, num_outputs)                                    # out.shape = [16, 8, 8, 3]\n    net = upscale2d(net_out[0])                                                 # net.shape = [16, 16, 16, 512]\n  net = slim.conv2d(net, 512, 3, scope='conv1')\n\nThe error would become\nassertion failed: [] [Condition x == y did not hold element-wise:] [x (strided_slice:0) = ] [4] [y (assert_equal/y:0) = ] [8]\n\t [[Node: assert_equal/Assert/Assert = Assert[T=[DT_STRING, DT_STRING, DT_STRING, DT_INT32, DT_STRING, DT_INT32], summarize=3, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](assert_equal/Equal/_9, assert_equal/Assert/Assert/data_0, assert_equal/Assert/Assert/data_1, assert_equal/Assert/Assert/data_2, strided_slice/_11, assert_equal/Assert/Assert/data_4, assert_equal/y/_13)]]\n\nIf I comment line 41 and uncomment line 40, the code would work.\n  net_out = tf.cond(tf.less(3, 4), lambda: net_out, lambda: (net, out))\n  #net_out = tf.cond(tf.less(3, 1), lambda: (net, out), lambda: net_out)         # ([16, 8, 8, 512], [16, 4, 4, 3])", "body": "If I add a tab in line 38, which makes the code look like\r\n```\r\n  with tf.control_dependencies([tf.assert_equal(tf.shape(net_out[0])[1], 8)]):\r\n    out = to_rgb(net_out[0], 2, num_outputs)                                    # out.shape = [16, 8, 8, 3]\r\n    net = upscale2d(net_out[0])                                                 # net.shape = [16, 16, 16, 512]\r\n  net = slim.conv2d(net, 512, 3, scope='conv1')\r\n```\r\n\r\nThe error would become \r\n```\r\nassertion failed: [] [Condition x == y did not hold element-wise:] [x (strided_slice:0) = ] [4] [y (assert_equal/y:0) = ] [8]\r\n\t [[Node: assert_equal/Assert/Assert = Assert[T=[DT_STRING, DT_STRING, DT_STRING, DT_INT32, DT_STRING, DT_INT32], summarize=3, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](assert_equal/Equal/_9, assert_equal/Assert/Assert/data_0, assert_equal/Assert/Assert/data_1, assert_equal/Assert/Assert/data_2, strided_slice/_11, assert_equal/Assert/Assert/data_4, assert_equal/y/_13)]]\r\n```\r\n\r\n\r\nIf I comment line 41 and uncomment line 40, the code would work.\r\n```\r\n  net_out = tf.cond(tf.less(3, 4), lambda: net_out, lambda: (net, out))\r\n  #net_out = tf.cond(tf.less(3, 1), lambda: (net, out), lambda: net_out)         # ([16, 8, 8, 512], [16, 4, 4, 3])\r\n```"}