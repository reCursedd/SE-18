{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2774", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2774/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2774/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2774/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2774", "id": 159551056, "node_id": "MDU6SXNzdWUxNTk1NTEwNTY=", "number": 2774, "title": "Poor numerics in CPU tf.multinomial", "user": {"login": "nikitakit", "id": 252225, "node_id": "MDQ6VXNlcjI1MjIyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/252225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikitakit", "html_url": "https://github.com/nikitakit", "followers_url": "https://api.github.com/users/nikitakit/followers", "following_url": "https://api.github.com/users/nikitakit/following{/other_user}", "gists_url": "https://api.github.com/users/nikitakit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikitakit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikitakit/subscriptions", "organizations_url": "https://api.github.com/users/nikitakit/orgs", "repos_url": "https://api.github.com/users/nikitakit/repos", "events_url": "https://api.github.com/users/nikitakit/events{/privacy}", "received_events_url": "https://api.github.com/users/nikitakit/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-06-10T03:11:33Z", "updated_at": "2018-08-25T08:27:10Z", "closed_at": "2016-06-16T01:37:45Z", "author_association": "NONE", "body_html": "<p>The CPU implementation of tf.multinomial seems to have numerical underflow/overflow when logits are outside of a certain narrow range. The usable logit range on my system is about -88 to 88, which is unacceptably small for my use case (where the logits come from an automatically-trained hidden layer).</p>\n<p>For example:</p>\n<pre><code>&gt;&gt;&gt; logits = np.array([[1000.]*5])\n&gt;&gt;&gt; sess.run(tf.multinomial(logits, 10))\narray([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]])\n</code></pre>\n<p>Note that the index 5 is out of range (which is the <em>undocumented</em> behavior used to signal an error condition). Expected behavior is to sample uniformly from [0, 4], such as in this workaround:</p>\n<pre><code>&gt;&gt;&gt; logits = np.array([[1000.]*5])\n&gt;&gt;&gt; sess.run(tf.multinomial(tf.nn.log_softmax(logits), 10))\narray([[2, 0, 4, 1, 0, 0, 2, 2, 2, 4]])\n</code></pre>\n<p>It's a similar story for negative logits:</p>\n<pre><code>&gt;&gt;&gt; logits = np.array([[-1000.]*5])\n&gt;&gt;&gt; sess.run(tf.multinomial(logits, 10))\narray([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]])\n&gt;&gt;&gt; sess.run(tf.multinomial(tf.nn.log_softmax(logits), 10))\narray([[2, 4, 3, 3, 3, 2, 2, 2, 3, 0]])\n</code></pre>\n<p>I think tf.multinomial should be fixed to accept a wider range of inputs. Or, if that's not possible e.g. due to speed tradeoffs, the workaround above should be noted in the documentation.</p>\n<p><strong>System info</strong>: tensorflow <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/845fb7ab77fae53b849894925c7d13c1b8918675/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/845fb7ab77fae53b849894925c7d13c1b8918675\"><tt>845fb7a</tt></a>, Python 3, CPU only on Mac OSX.</p>", "body_text": "The CPU implementation of tf.multinomial seems to have numerical underflow/overflow when logits are outside of a certain narrow range. The usable logit range on my system is about -88 to 88, which is unacceptably small for my use case (where the logits come from an automatically-trained hidden layer).\nFor example:\n>>> logits = np.array([[1000.]*5])\n>>> sess.run(tf.multinomial(logits, 10))\narray([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]])\n\nNote that the index 5 is out of range (which is the undocumented behavior used to signal an error condition). Expected behavior is to sample uniformly from [0, 4], such as in this workaround:\n>>> logits = np.array([[1000.]*5])\n>>> sess.run(tf.multinomial(tf.nn.log_softmax(logits), 10))\narray([[2, 0, 4, 1, 0, 0, 2, 2, 2, 4]])\n\nIt's a similar story for negative logits:\n>>> logits = np.array([[-1000.]*5])\n>>> sess.run(tf.multinomial(logits, 10))\narray([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]])\n>>> sess.run(tf.multinomial(tf.nn.log_softmax(logits), 10))\narray([[2, 4, 3, 3, 3, 2, 2, 2, 3, 0]])\n\nI think tf.multinomial should be fixed to accept a wider range of inputs. Or, if that's not possible e.g. due to speed tradeoffs, the workaround above should be noted in the documentation.\nSystem info: tensorflow 845fb7a, Python 3, CPU only on Mac OSX.", "body": "The CPU implementation of tf.multinomial seems to have numerical underflow/overflow when logits are outside of a certain narrow range. The usable logit range on my system is about -88 to 88, which is unacceptably small for my use case (where the logits come from an automatically-trained hidden layer).\n\nFor example:\n\n```\n>>> logits = np.array([[1000.]*5])\n>>> sess.run(tf.multinomial(logits, 10))\narray([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]])\n```\n\nNote that the index 5 is out of range (which is the _undocumented_ behavior used to signal an error condition). Expected behavior is to sample uniformly from [0, 4], such as in this workaround:\n\n```\n>>> logits = np.array([[1000.]*5])\n>>> sess.run(tf.multinomial(tf.nn.log_softmax(logits), 10))\narray([[2, 0, 4, 1, 0, 0, 2, 2, 2, 4]])\n```\n\nIt's a similar story for negative logits:\n\n```\n>>> logits = np.array([[-1000.]*5])\n>>> sess.run(tf.multinomial(logits, 10))\narray([[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]])\n>>> sess.run(tf.multinomial(tf.nn.log_softmax(logits), 10))\narray([[2, 4, 3, 3, 3, 2, 2, 2, 3, 0]])\n```\n\nI think tf.multinomial should be fixed to accept a wider range of inputs. Or, if that's not possible e.g. due to speed tradeoffs, the workaround above should be noted in the documentation.\n\n**System info**: tensorflow 845fb7ab77fae53b849894925c7d13c1b8918675, Python 3, CPU only on Mac OSX.\n"}