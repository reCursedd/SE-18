{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/366094645", "html_url": "https://github.com/tensorflow/tensorflow/issues/17043#issuecomment-366094645", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17043", "id": 366094645, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjA5NDY0NQ==", "user": {"login": "bioothod", "id": 1847575, "node_id": "MDQ6VXNlcjE4NDc1NzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1847575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bioothod", "html_url": "https://github.com/bioothod", "followers_url": "https://api.github.com/users/bioothod/followers", "following_url": "https://api.github.com/users/bioothod/following{/other_user}", "gists_url": "https://api.github.com/users/bioothod/gists{/gist_id}", "starred_url": "https://api.github.com/users/bioothod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bioothod/subscriptions", "organizations_url": "https://api.github.com/users/bioothod/orgs", "repos_url": "https://api.github.com/users/bioothod/repos", "events_url": "https://api.github.com/users/bioothod/events{/privacy}", "received_events_url": "https://api.github.com/users/bioothod/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-15T23:17:32Z", "updated_at": "2018-02-15T23:17:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Here is a problem description to date:</p>\n<ul>\n<li>external eigen is being compiled with the native instruction set, which implies using avx512 on skylake cpus</li>\n<li>external eigen somehow misses the fact that <code>EIGEN_VECTORIZE_AVX512</code> has to be defined, probably because it does not see <code>__AVX512F__</code> although it sees <code>__AVX2__</code> define (how?)</li>\n<li>since there is no <code>EIGEN_VECTORIZE_AVX512</code>, eigen sets 32-byte alignment for avx2</li>\n<li>since native instructions are used, <code>vmovaps</code> is injected, which faults on unaligned (32-byte aligned) chunks allocated via internal eigen compiler</li>\n</ul>\n<p>Rudely adding <code>--copt=-DEIGEN_VECTORIZE_AVX512</code> ends up with error in <code>Eigen/src/Core/arch/SSE/PacketMath.h:260</code> and other places where compiler does not see correct instructions anymore, probably setting up this define breaks detection of the other options.</p>\n<p>Changing <code>EIGEN_IDEAL_MAX_ALIGN_BYTES</code> in <code>Eigen/src/Core/util/Macros.h</code> to 64 works fine.</p>", "body_text": "Here is a problem description to date:\n\nexternal eigen is being compiled with the native instruction set, which implies using avx512 on skylake cpus\nexternal eigen somehow misses the fact that EIGEN_VECTORIZE_AVX512 has to be defined, probably because it does not see __AVX512F__ although it sees __AVX2__ define (how?)\nsince there is no EIGEN_VECTORIZE_AVX512, eigen sets 32-byte alignment for avx2\nsince native instructions are used, vmovaps is injected, which faults on unaligned (32-byte aligned) chunks allocated via internal eigen compiler\n\nRudely adding --copt=-DEIGEN_VECTORIZE_AVX512 ends up with error in Eigen/src/Core/arch/SSE/PacketMath.h:260 and other places where compiler does not see correct instructions anymore, probably setting up this define breaks detection of the other options.\nChanging EIGEN_IDEAL_MAX_ALIGN_BYTES in Eigen/src/Core/util/Macros.h to 64 works fine.", "body": "Here is a problem description to date:\r\n* external eigen is being compiled with the native instruction set, which implies using avx512 on skylake cpus\r\n* external eigen somehow misses the fact that `EIGEN_VECTORIZE_AVX512` has to be defined, probably because it does not see `__AVX512F__` although it sees `__AVX2__` define (how?)\r\n* since there is no `EIGEN_VECTORIZE_AVX512`, eigen sets 32-byte alignment for avx2\r\n* since native instructions are used, `vmovaps` is injected, which faults on unaligned (32-byte aligned) chunks allocated via internal eigen compiler\r\n\r\nRudely adding `--copt=-DEIGEN_VECTORIZE_AVX512` ends up with error in `Eigen/src/Core/arch/SSE/PacketMath.h:260` and other places where compiler does not see correct instructions anymore, probably setting up this define breaks detection of the other options.\r\n\r\nChanging `EIGEN_IDEAL_MAX_ALIGN_BYTES` in `Eigen/src/Core/util/Macros.h` to 64 works fine."}