{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19024", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19024/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19024/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19024/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19024", "id": 319524252, "node_id": "MDU6SXNzdWUzMTk1MjQyNTI=", "number": 19024, "title": "Bug : creating variables from restored variables get reinitialized but not always", "user": {"login": "LouisEchard", "id": 12792194, "node_id": "MDQ6VXNlcjEyNzkyMTk0", "avatar_url": "https://avatars1.githubusercontent.com/u/12792194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LouisEchard", "html_url": "https://github.com/LouisEchard", "followers_url": "https://api.github.com/users/LouisEchard/followers", "following_url": "https://api.github.com/users/LouisEchard/following{/other_user}", "gists_url": "https://api.github.com/users/LouisEchard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LouisEchard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LouisEchard/subscriptions", "organizations_url": "https://api.github.com/users/LouisEchard/orgs", "repos_url": "https://api.github.com/users/LouisEchard/repos", "events_url": "https://api.github.com/users/LouisEchard/events{/privacy}", "received_events_url": "https://api.github.com/users/LouisEchard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-05-02T12:02:51Z", "updated_at": "2018-05-04T07:40:39Z", "closed_at": "2018-05-03T23:11:11Z", "author_association": "NONE", "body_html": "<p>I've been experiencing the bug on two configurations :</p>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10 / Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: conda tensorflow-GPU / conda tensorflow (CPU)</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.6 / 1.4</li>\n<li><strong>Python version</strong>:  Python 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA Toolkit 9.1 and cuDNN 7.1.2 / None</li>\n<li><strong>GPU model and memory</strong>: 1080ti 11GB /</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<pre><code>x = {\n    '1' : tf.Variable(tf.random_normal([3, 3]), trainable=True, name='x1')\n    }\nsaver = tf.train.Saver(var_list=x)\n\nwith tf.Session() as sess:\n    \n    \n    \n    sess.run(tf.global_variables_initializer())\n\n    print(sess.run(x))\n    saver.save(sess, './savedModels/bug/x')\n</code></pre>\n<blockquote>\n<p>{'1': array([[-2.80644059, -0.7185123 ,  0.70223355],<br>\n[ 1.06445408, -0.72174907,  1.29832721],<br>\n[ 1.52049255, -1.19468224, -1.02100158]], dtype=float32)}</p>\n</blockquote>\n<pre><code>for i in range(0,10):\n    with tf.Session() as sess:\n\n        new_saver = tf.train.import_meta_graph('./savedModels/bug/x.meta')\n        new_saver.restore(sess, './savedModels/bug/x')\n\n        x = {\n            '1' : tf.Variable(tf.get_default_graph().get_tensor_by_name(\"x1:0\"), trainable=False)\n            }\n        sess.run(tf.global_variables_initializer())\n        print(sess.run(x['1']))\n</code></pre>\n<blockquote>\n<p>INFO:tensorflow:Restoring parameters from ./savedModels/bug/x<br>\n[[ 0.49538991 -0.11817512 -0.10268462]<br>\n[ 0.51088262  1.28533709  0.05063328]<br>\n[-1.30132782  0.41913262  1.3775363 ]]<br>\n<strong>&gt; INFO:tensorflow:Restoring parameters from ./savedModels/bug/x<br>\n[[-2.80644059 -0.7185123   0.70223355]<br>\n[ 1.06445408 -0.72174907  1.29832721]<br>\n[ 1.52049255 -1.19468224 -1.02100158]]</strong><br>\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x<br>\n[[-2.29186296  0.36665305  0.28915456]<br>\n[ 0.35180676  0.10379237  1.17195833]<br>\n[-1.05604255  0.01500762  2.31890965]]<br>\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x<br>\n[[ 0.79247308  0.43540171 -1.15054667]<br>\n[-1.51901126  0.4132176  -1.45383906]<br>\n[-1.19301605 -0.21523039  1.42999935]]<br>\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x<br>\n[[-0.03097171 -1.22662902 -0.30857435]<br>\n[-0.49384364 -0.98362756  0.12052365]<br>\n[-0.78354359  0.58901048 -1.8879807 ]]<br>\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x<br>\n[[-0.91630346 -1.20698965 -0.10588568]<br>\n[-2.06214571 -0.81664461  0.58493197]<br>\n[ 0.40064785 -1.33241594  2.23627448]]<br>\n<strong>&gt; INFO:tensorflow:Restoring parameters from ./savedModels/bug/x<br>\n[[-2.80644059 -0.7185123   0.70223355]<br>\n[ 1.06445408 -0.72174907  1.29832721]<br>\n[ 1.52049255 -1.19468224 -1.02100158]]</strong><br>\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x<br>\n[[-1.16766882  0.48798651 -1.84950495]<br>\n[-0.90750635  0.68074739 -0.86705917]<br>\n[ 0.6242311  -0.75273407  0.95616102]]<br>\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x<br>\n[[ 0.02900926 -0.71752155  1.40167475]<br>\n[-1.76051104 -0.38902128 -0.42455733]<br>\n[ 0.61904657 -0.45060599  1.10379994]]<br>\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x<br>\n[[-1.51588821 -2.11397028  0.33227748]<br>\n[ 0.34245569 -2.17953372  0.60712498]<br>\n[ 1.37212336  0.4941766   0.47627288]]</p>\n</blockquote>\n<hr>\n<p>Restoring the variable without using a sess.run() to ensure the constance, and then running the initializer should either:<br>\n-give the same result because variable are stored as numbers<br>\n-give different numbers because it is stored as a variable and thus, get initialized too.</p>\n<p>In any case, we shouldn't find back the variables from time to time, it should be extremely unlikely to find back EXACTLY the same values when initialized, or, we should always find the same values.</p>\n<p>NOTA BENE:<br>\nI only find the values back when I use tensorflow 1.4 ( I haven't been able to check this on 1.7 yet), has this bug been fixed in the way I described above since?</p>", "body_text": "I've been experiencing the bug on two configurations :\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 / Ubuntu 16.04\nTensorFlow installed from (source or binary): conda tensorflow-GPU / conda tensorflow (CPU)\nTensorFlow version (use command below): 1.6 / 1.4\nPython version:  Python 3.6\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: CUDA Toolkit 9.1 and cuDNN 7.1.2 / None\nGPU model and memory: 1080ti 11GB /\nExact command to reproduce:\n\nx = {\n    '1' : tf.Variable(tf.random_normal([3, 3]), trainable=True, name='x1')\n    }\nsaver = tf.train.Saver(var_list=x)\n\nwith tf.Session() as sess:\n    \n    \n    \n    sess.run(tf.global_variables_initializer())\n\n    print(sess.run(x))\n    saver.save(sess, './savedModels/bug/x')\n\n\n{'1': array([[-2.80644059, -0.7185123 ,  0.70223355],\n[ 1.06445408, -0.72174907,  1.29832721],\n[ 1.52049255, -1.19468224, -1.02100158]], dtype=float32)}\n\nfor i in range(0,10):\n    with tf.Session() as sess:\n\n        new_saver = tf.train.import_meta_graph('./savedModels/bug/x.meta')\n        new_saver.restore(sess, './savedModels/bug/x')\n\n        x = {\n            '1' : tf.Variable(tf.get_default_graph().get_tensor_by_name(\"x1:0\"), trainable=False)\n            }\n        sess.run(tf.global_variables_initializer())\n        print(sess.run(x['1']))\n\n\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x\n[[ 0.49538991 -0.11817512 -0.10268462]\n[ 0.51088262  1.28533709  0.05063328]\n[-1.30132782  0.41913262  1.3775363 ]]\n> INFO:tensorflow:Restoring parameters from ./savedModels/bug/x\n[[-2.80644059 -0.7185123   0.70223355]\n[ 1.06445408 -0.72174907  1.29832721]\n[ 1.52049255 -1.19468224 -1.02100158]]\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x\n[[-2.29186296  0.36665305  0.28915456]\n[ 0.35180676  0.10379237  1.17195833]\n[-1.05604255  0.01500762  2.31890965]]\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x\n[[ 0.79247308  0.43540171 -1.15054667]\n[-1.51901126  0.4132176  -1.45383906]\n[-1.19301605 -0.21523039  1.42999935]]\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x\n[[-0.03097171 -1.22662902 -0.30857435]\n[-0.49384364 -0.98362756  0.12052365]\n[-0.78354359  0.58901048 -1.8879807 ]]\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x\n[[-0.91630346 -1.20698965 -0.10588568]\n[-2.06214571 -0.81664461  0.58493197]\n[ 0.40064785 -1.33241594  2.23627448]]\n> INFO:tensorflow:Restoring parameters from ./savedModels/bug/x\n[[-2.80644059 -0.7185123   0.70223355]\n[ 1.06445408 -0.72174907  1.29832721]\n[ 1.52049255 -1.19468224 -1.02100158]]\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x\n[[-1.16766882  0.48798651 -1.84950495]\n[-0.90750635  0.68074739 -0.86705917]\n[ 0.6242311  -0.75273407  0.95616102]]\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x\n[[ 0.02900926 -0.71752155  1.40167475]\n[-1.76051104 -0.38902128 -0.42455733]\n[ 0.61904657 -0.45060599  1.10379994]]\nINFO:tensorflow:Restoring parameters from ./savedModels/bug/x\n[[-1.51588821 -2.11397028  0.33227748]\n[ 0.34245569 -2.17953372  0.60712498]\n[ 1.37212336  0.4941766   0.47627288]]\n\n\nRestoring the variable without using a sess.run() to ensure the constance, and then running the initializer should either:\n-give the same result because variable are stored as numbers\n-give different numbers because it is stored as a variable and thus, get initialized too.\nIn any case, we shouldn't find back the variables from time to time, it should be extremely unlikely to find back EXACTLY the same values when initialized, or, we should always find the same values.\nNOTA BENE:\nI only find the values back when I use tensorflow 1.4 ( I haven't been able to check this on 1.7 yet), has this bug been fixed in the way I described above since?", "body": "\r\n\r\nI've been experiencing the bug on two configurations :\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10 / Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: conda tensorflow-GPU / conda tensorflow (CPU)\r\n- **TensorFlow version (use command below)**: 1.6 / 1.4\r\n- **Python version**:  Python 3.6\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: CUDA Toolkit 9.1 and cuDNN 7.1.2 / None\r\n- **GPU model and memory**: 1080ti 11GB / \r\n- **Exact command to reproduce**:\r\n\r\n```\r\nx = {\r\n    '1' : tf.Variable(tf.random_normal([3, 3]), trainable=True, name='x1')\r\n    }\r\nsaver = tf.train.Saver(var_list=x)\r\n\r\nwith tf.Session() as sess:\r\n    \r\n    \r\n    \r\n    sess.run(tf.global_variables_initializer())\r\n\r\n    print(sess.run(x))\r\n    saver.save(sess, './savedModels/bug/x')\r\n```\r\n\r\n> \r\n> {'1': array([[-2.80644059, -0.7185123 ,  0.70223355],\r\n>        [ 1.06445408, -0.72174907,  1.29832721],\r\n>        [ 1.52049255, -1.19468224, -1.02100158]], dtype=float32)}\r\n\r\n```\r\nfor i in range(0,10):\r\n    with tf.Session() as sess:\r\n\r\n        new_saver = tf.train.import_meta_graph('./savedModels/bug/x.meta')\r\n        new_saver.restore(sess, './savedModels/bug/x')\r\n\r\n        x = {\r\n            '1' : tf.Variable(tf.get_default_graph().get_tensor_by_name(\"x1:0\"), trainable=False)\r\n            }\r\n        sess.run(tf.global_variables_initializer())\r\n        print(sess.run(x['1']))\r\n```\r\n\r\n> \r\n> INFO:tensorflow:Restoring parameters from ./savedModels/bug/x\r\n> [[ 0.49538991 -0.11817512 -0.10268462]\r\n>  [ 0.51088262  1.28533709  0.05063328]\r\n>  [-1.30132782  0.41913262  1.3775363 ]]\r\n**> INFO:tensorflow:Restoring parameters from ./savedModels/bug/x\r\n> [[-2.80644059 -0.7185123   0.70223355]\r\n>  [ 1.06445408 -0.72174907  1.29832721]\r\n>  [ 1.52049255 -1.19468224 -1.02100158]]**\r\n> INFO:tensorflow:Restoring parameters from ./savedModels/bug/x\r\n> [[-2.29186296  0.36665305  0.28915456]\r\n>  [ 0.35180676  0.10379237  1.17195833]\r\n>  [-1.05604255  0.01500762  2.31890965]]\r\n> INFO:tensorflow:Restoring parameters from ./savedModels/bug/x\r\n> [[ 0.79247308  0.43540171 -1.15054667]\r\n>  [-1.51901126  0.4132176  -1.45383906]\r\n>  [-1.19301605 -0.21523039  1.42999935]]\r\n> INFO:tensorflow:Restoring parameters from ./savedModels/bug/x\r\n> [[-0.03097171 -1.22662902 -0.30857435]\r\n>  [-0.49384364 -0.98362756  0.12052365]\r\n>  [-0.78354359  0.58901048 -1.8879807 ]]\r\n> INFO:tensorflow:Restoring parameters from ./savedModels/bug/x\r\n> [[-0.91630346 -1.20698965 -0.10588568]\r\n>  [-2.06214571 -0.81664461  0.58493197]\r\n>  [ 0.40064785 -1.33241594  2.23627448]]\r\n**> INFO:tensorflow:Restoring parameters from ./savedModels/bug/x\r\n> [[-2.80644059 -0.7185123   0.70223355]\r\n>  [ 1.06445408 -0.72174907  1.29832721]\r\n>  [ 1.52049255 -1.19468224 -1.02100158]]**\r\n> INFO:tensorflow:Restoring parameters from ./savedModels/bug/x\r\n> [[-1.16766882  0.48798651 -1.84950495]\r\n>  [-0.90750635  0.68074739 -0.86705917]\r\n>  [ 0.6242311  -0.75273407  0.95616102]]\r\n> INFO:tensorflow:Restoring parameters from ./savedModels/bug/x\r\n> [[ 0.02900926 -0.71752155  1.40167475]\r\n>  [-1.76051104 -0.38902128 -0.42455733]\r\n>  [ 0.61904657 -0.45060599  1.10379994]]\r\n> INFO:tensorflow:Restoring parameters from ./savedModels/bug/x\r\n> [[-1.51588821 -2.11397028  0.33227748]\r\n>  [ 0.34245569 -2.17953372  0.60712498]\r\n>  [ 1.37212336  0.4941766   0.47627288]]\r\n\r\n-------------------------------------------\r\n\r\nRestoring the variable without using a sess.run() to ensure the constance, and then running the initializer should either:\r\n-give the same result because variable are stored as numbers\r\n-give different numbers because it is stored as a variable and thus, get initialized too.\r\n\r\nIn any case, we shouldn't find back the variables from time to time, it should be extremely unlikely to find back EXACTLY the same values when initialized, or, we should always find the same values.\r\n\r\nNOTA BENE: \r\nI only find the values back when I use tensorflow 1.4 ( I haven't been able to check this on 1.7 yet), has this bug been fixed in the way I described above since?\r\n"}