{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17985", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17985/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17985/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17985/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17985", "id": 308343954, "node_id": "MDU6SXNzdWUzMDgzNDM5NTQ=", "number": 17985, "title": "name_scope problem of \"tensorflow/python/layers/normalization.py\"", "user": {"login": "George-Gate", "id": 8580553, "node_id": "MDQ6VXNlcjg1ODA1NTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/8580553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/George-Gate", "html_url": "https://github.com/George-Gate", "followers_url": "https://api.github.com/users/George-Gate/followers", "following_url": "https://api.github.com/users/George-Gate/following{/other_user}", "gists_url": "https://api.github.com/users/George-Gate/gists{/gist_id}", "starred_url": "https://api.github.com/users/George-Gate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/George-Gate/subscriptions", "organizations_url": "https://api.github.com/users/George-Gate/orgs", "repos_url": "https://api.github.com/users/George-Gate/repos", "events_url": "https://api.github.com/users/George-Gate/events{/privacy}", "received_events_url": "https://api.github.com/users/George-Gate/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-03-25T12:01:56Z", "updated_at": "2018-11-22T18:55:04Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10 64bit</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.7.0-rc1 (GPU version from pip)</li>\n<li><strong>Python version</strong>:  3.6.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.0</li>\n<li><strong>GPU model and memory</strong>: GTX 1080Ti 11GB</li>\n<li><strong>Exact command to reproduce</strong>: See below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I found this problem when I am using <code>tf.layers.batch_normalization()</code>. For example, the following code:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\ninData <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">shape</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>], <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>input<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">dtype</span> <span class=\"pl-k\">=</span> tf.float32) \n<span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>layer1<span class=\"pl-pds\">'</span></span>):\n    <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>fully_connected<span class=\"pl-pds\">'</span></span>):\n        W <span class=\"pl-k\">=</span> tf.Variable( [[<span class=\"pl-c1\">0</span>.]] ,<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>W<span class=\"pl-pds\">'</span></span>)\n        b <span class=\"pl-k\">=</span> tf.Variable( [<span class=\"pl-c1\">0</span>.], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>bias<span class=\"pl-pds\">'</span></span>)\n        x <span class=\"pl-k\">=</span> tf.matmul( inData, W ) <span class=\"pl-k\">+</span> b\n\n    normalized <span class=\"pl-k\">=</span> tf.layers.batch_normalization(x, <span class=\"pl-v\">fused</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>, <span class=\"pl-v\">reuse</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>)\n    \nloss <span class=\"pl-k\">=</span> tf.reduce_sum(normalized)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> record computation graph</span>\n    writer <span class=\"pl-k\">=</span> tf.summary.FileWriter(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>BN_test<span class=\"pl-pds\">'</span></span>, sess.graph)\n    writer.close()</pre></div>\n<p>Will generate the following computation graph:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/8580553/37874558-ae939870-3063-11e8-82f1-72349b32f369.png\"><img src=\"https://user-images.githubusercontent.com/8580553/37874558-ae939870-3063-11e8-82f1-72349b32f369.png\" alt=\"bn_problem\" style=\"max-width:100%;\"></a></p>\n<p>While what I expect is: the variables \"gamma\", \"beta\", \"moving_mean\" etc. should all inside the name_scope \"layer1/batch_normalization/\" but not \"batch_normalization/\"</p>\n<p>So I  refer to the code \"<a href=\"https://github.com/tensorflow/tensorflow/blob/r1.7/tensorflow/python/layers/normalization.py\">tensorflow/python/layers/normalization.py</a>\"<br>\nAround line 301 ~ 361, I found:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/8580553/37874572-041a6dbe-3064-11e8-98b7-860e7dc157eb.png\"><img src=\"https://user-images.githubusercontent.com/8580553/37874572-041a6dbe-3064-11e8-98b7-860e7dc157eb.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>\n<p>It seems that here the name_scope was cleaned in order to support the 'reuse' option. But this should only affect \"moving_mean\" and \"moving_variance\", not \"beta\" and \"gamma\". However, as shown above, all of them was affected.<br>\nIn fact, if we add <code>print(self._scope.partitioner)</code> just before line 302, we will found that self._scope.partitioner is always <code>None</code>.</p>\n<h3>Summary</h3>\n<ol>\n<li>self._scope is probably not set correctly.</li>\n<li>Suggestion: I want an option to tell the program \"I will never reuse the weights\", thus do not clean the name_scope of \"moving_mean\" and \"moving_variance\". Otherwise, the graph in tensorboard is too messy......</li>\n</ol>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 64bit\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): 1.7.0-rc1 (GPU version from pip)\nPython version:  3.6.2\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: 9.0\nGPU model and memory: GTX 1080Ti 11GB\nExact command to reproduce: See below\n\nDescribe the problem\nI found this problem when I am using tf.layers.batch_normalization(). For example, the following code:\nimport tensorflow as tf\n\ninData = tf.placeholder(shape = [1,1], name = 'input', dtype = tf.float32) \nwith tf.name_scope('layer1'):\n    with tf.name_scope('fully_connected'):\n        W = tf.Variable( [[0.]] ,name='W')\n        b = tf.Variable( [0.], name='bias')\n        x = tf.matmul( inData, W ) + b\n\n    normalized = tf.layers.batch_normalization(x, fused = True, reuse = False)\n    \nloss = tf.reduce_sum(normalized)\n\nwith tf.Session() as sess:\n    # record computation graph\n    writer = tf.summary.FileWriter('BN_test', sess.graph)\n    writer.close()\nWill generate the following computation graph:\n\nWhile what I expect is: the variables \"gamma\", \"beta\", \"moving_mean\" etc. should all inside the name_scope \"layer1/batch_normalization/\" but not \"batch_normalization/\"\nSo I  refer to the code \"tensorflow/python/layers/normalization.py\"\nAround line 301 ~ 361, I found:\n\nIt seems that here the name_scope was cleaned in order to support the 'reuse' option. But this should only affect \"moving_mean\" and \"moving_variance\", not \"beta\" and \"gamma\". However, as shown above, all of them was affected.\nIn fact, if we add print(self._scope.partitioner) just before line 302, we will found that self._scope.partitioner is always None.\nSummary\n\nself._scope is probably not set correctly.\nSuggestion: I want an option to tell the program \"I will never reuse the weights\", thus do not clean the name_scope of \"moving_mean\" and \"moving_variance\". Otherwise, the graph in tensorboard is too messy......", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10 64bit\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: 1.7.0-rc1 (GPU version from pip)\r\n- **Python version**:  3.6.2\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: 9.0\r\n- **GPU model and memory**: GTX 1080Ti 11GB\r\n- **Exact command to reproduce**: See below\r\n\r\n\r\n### Describe the problem\r\nI found this problem when I am using `tf.layers.batch_normalization()`. For example, the following code:\r\n```python\r\nimport tensorflow as tf\r\n\r\ninData = tf.placeholder(shape = [1,1], name = 'input', dtype = tf.float32) \r\nwith tf.name_scope('layer1'):\r\n    with tf.name_scope('fully_connected'):\r\n        W = tf.Variable( [[0.]] ,name='W')\r\n        b = tf.Variable( [0.], name='bias')\r\n        x = tf.matmul( inData, W ) + b\r\n\r\n    normalized = tf.layers.batch_normalization(x, fused = True, reuse = False)\r\n    \r\nloss = tf.reduce_sum(normalized)\r\n\r\nwith tf.Session() as sess:\r\n    # record computation graph\r\n    writer = tf.summary.FileWriter('BN_test', sess.graph)\r\n    writer.close()\r\n```\r\nWill generate the following computation graph:\r\n![bn_problem](https://user-images.githubusercontent.com/8580553/37874558-ae939870-3063-11e8-82f1-72349b32f369.png)\r\n\r\nWhile what I expect is: the variables \"gamma\", \"beta\", \"moving_mean\" etc. should all inside the name_scope \"layer1/batch_normalization/\" but not \"batch_normalization/\"\r\n\r\nSo I  refer to the code \"[tensorflow/python/layers/normalization.py](https://github.com/tensorflow/tensorflow/blob/r1.7/tensorflow/python/layers/normalization.py)\"\r\nAround line 301 ~ 361, I found:\r\n![image](https://user-images.githubusercontent.com/8580553/37874572-041a6dbe-3064-11e8-98b7-860e7dc157eb.png)\r\n\r\nIt seems that here the name_scope was cleaned in order to support the 'reuse' option. But this should only affect \"moving_mean\" and \"moving_variance\", not \"beta\" and \"gamma\". However, as shown above, all of them was affected.\r\n In fact, if we add `` print(self._scope.partitioner) `` just before line 302, we will found that self._scope.partitioner is always ``None``.\r\n\r\n### Summary\r\n1. self._scope is probably not set correctly.\r\n2. Suggestion: I want an option to tell the program \"I will never reuse the weights\", thus do not clean the name_scope of \"moving_mean\" and \"moving_variance\". Otherwise, the graph in tensorboard is too messy......\r\n"}