{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/223701509", "html_url": "https://github.com/tensorflow/tensorflow/issues/2646#issuecomment-223701509", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2646", "id": 223701509, "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzcwMTUwOQ==", "user": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-03T21:40:27Z", "updated_at": "2016-06-03T21:40:27Z", "author_association": "MEMBER", "body_html": "<p>Yeah I believe sizeof(std::unordered_map) is different between the c++0x (tr1 version of std library) and --std=c++11. If protobuf and tensorflow are not communicating unordered_maps amongst each other and protobuf functions are not inlined into tensorflow translation units it can be perfectly safe. However, if some of the inlined functions are not inlined and instead turned into exported symbols implicitly, the dso loader will attempt to share one symbol with both libraries which will not work (it will assume the wrong structure layout).  You could attempt to work around this by adding<br>\n-fvisibility-inlines-hidden to tensorflow which will force tensorflow to use its own copies of all inlines that are spilled to function calls. OTOH, if this is due to inlines using a std::unordered_map in a tensorflow translation unit that was allocated in a protobuf translation unit, this will not solve the problem.</p>\n<p>-fvisibility-inlines-hidden</p>", "body_text": "Yeah I believe sizeof(std::unordered_map) is different between the c++0x (tr1 version of std library) and --std=c++11. If protobuf and tensorflow are not communicating unordered_maps amongst each other and protobuf functions are not inlined into tensorflow translation units it can be perfectly safe. However, if some of the inlined functions are not inlined and instead turned into exported symbols implicitly, the dso loader will attempt to share one symbol with both libraries which will not work (it will assume the wrong structure layout).  You could attempt to work around this by adding\n-fvisibility-inlines-hidden to tensorflow which will force tensorflow to use its own copies of all inlines that are spilled to function calls. OTOH, if this is due to inlines using a std::unordered_map in a tensorflow translation unit that was allocated in a protobuf translation unit, this will not solve the problem.\n-fvisibility-inlines-hidden", "body": "Yeah I believe sizeof(std::unordered_map) is different between the c++0x (tr1 version of std library) and --std=c++11. If protobuf and tensorflow are not communicating unordered_maps amongst each other and protobuf functions are not inlined into tensorflow translation units it can be perfectly safe. However, if some of the inlined functions are not inlined and instead turned into exported symbols implicitly, the dso loader will attempt to share one symbol with both libraries which will not work (it will assume the wrong structure layout).  You could attempt to work around this by adding \n-fvisibility-inlines-hidden to tensorflow which will force tensorflow to use its own copies of all inlines that are spilled to function calls. OTOH, if this is due to inlines using a std::unordered_map in a tensorflow translation unit that was allocated in a protobuf translation unit, this will not solve the problem.\n\n-fvisibility-inlines-hidden\n"}