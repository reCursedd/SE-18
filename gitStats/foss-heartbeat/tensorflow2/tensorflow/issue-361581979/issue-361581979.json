{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22370", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22370/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22370/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22370/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22370", "id": 361581979, "node_id": "MDU6SXNzdWUzNjE1ODE5Nzk=", "number": 22370, "title": "model_to_estimator not working on float16", "user": {"login": "bhack", "id": 1710528, "node_id": "MDQ6VXNlcjE3MTA1Mjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1710528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bhack", "html_url": "https://github.com/bhack", "followers_url": "https://api.github.com/users/bhack/followers", "following_url": "https://api.github.com/users/bhack/following{/other_user}", "gists_url": "https://api.github.com/users/bhack/gists{/gist_id}", "starred_url": "https://api.github.com/users/bhack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bhack/subscriptions", "organizations_url": "https://api.github.com/users/bhack/orgs", "repos_url": "https://api.github.com/users/bhack/repos", "events_url": "https://api.github.com/users/bhack/events{/privacy}", "received_events_url": "https://api.github.com/users/bhack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "tanzhenyu", "id": 15220929, "node_id": "MDQ6VXNlcjE1MjIwOTI5", "avatar_url": "https://avatars3.githubusercontent.com/u/15220929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tanzhenyu", "html_url": "https://github.com/tanzhenyu", "followers_url": "https://api.github.com/users/tanzhenyu/followers", "following_url": "https://api.github.com/users/tanzhenyu/following{/other_user}", "gists_url": "https://api.github.com/users/tanzhenyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tanzhenyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tanzhenyu/subscriptions", "organizations_url": "https://api.github.com/users/tanzhenyu/orgs", "repos_url": "https://api.github.com/users/tanzhenyu/repos", "events_url": "https://api.github.com/users/tanzhenyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tanzhenyu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tanzhenyu", "id": 15220929, "node_id": "MDQ6VXNlcjE1MjIwOTI5", "avatar_url": "https://avatars3.githubusercontent.com/u/15220929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tanzhenyu", "html_url": "https://github.com/tanzhenyu", "followers_url": "https://api.github.com/users/tanzhenyu/followers", "following_url": "https://api.github.com/users/tanzhenyu/following{/other_user}", "gists_url": "https://api.github.com/users/tanzhenyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tanzhenyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tanzhenyu/subscriptions", "organizations_url": "https://api.github.com/users/tanzhenyu/orgs", "repos_url": "https://api.github.com/users/tanzhenyu/repos", "events_url": "https://api.github.com/users/tanzhenyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tanzhenyu/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-09-19T05:18:07Z", "updated_at": "2018-11-20T07:56:41Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\ncustom code</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:<br>\nN/A</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nBinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\nCodalab</li>\n<li><strong>Python version</strong>:<br>\nCodalb</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\nN/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\nN/A</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\nN/A</li>\n<li><strong>GPU model and memory</strong>:<br>\nN/a</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nYou can run exactly this code on colab</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Using float16 crash <code>model_to_estimator</code></p>\n<h3>Source code / logs</h3>\n<p>Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.</p>\n<pre><code>from tensorflow import keras as ks\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.python.estimator import keras as keras_lib\n\nks.backend.clear_session()\nks.backend.set_floatx('float16')\n\ntf.logging.set_verbosity(tf.logging.INFO)\n\nmy_input_fn = tf.estimator.inputs.numpy_input_fn(\n    x={\"digit_a\": np.array(np.random.rand(1, 27, 27, 1).astype(np.float32))},\n    y={\"mydense\": np.array(np.random.rand(1,1).astype(np.float32))},\n      batch_size=500,\n      num_epochs=1,\n      shuffle=False)\n\n# First, define the modules\ndigit_input = ks.Input(shape=(299, 299, 3), name=\"digit_input\")\nvision_model= ks.applications.xception.Xception(input_tensor=digit_input, include_top=False, weights='imagenet',classes=1)\n\n\n# Then define the tell-digits-apart model\ndigit_a = ks.Input(shape=(299, 299, 3), name=\"digit_a\")\n\n# The vision model will be shared, weights and all\nout_a = vision_model(digit_a)\n\n\nout = ks.layers.Dense(1, activation='sigmoid', name=\"mydense\")(out_a)\n\nm2 = ks.Model([digit_a], out, name=\"Xception_enc\")\n\nm2.compile(loss={ 'mydense': 'binary_crossentropy'},optimizer=tf.keras.optimizers.Adam())\n\n\nest = keras_lib.model_to_estimator(\n            keras_model=m2,\n            config=tf.estimator.RunConfig(session_config=tf.ConfigProto(log_device_placement=True)))\n</code></pre>\n<p>LOG:</p>\n<pre><code>---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-9-03750f8e4923&gt; in &lt;module&gt;()\n     37 est = keras_lib.model_to_estimator(\n     38             keras_model=m2,\n---&gt; 39             config=tf.estimator.RunConfig(session_config=tf.ConfigProto(log_device_placement=True)))\n     40 \n     41 \n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/estimator/keras.py in model_to_estimator(keras_model, keras_model_path, custom_objects, model_dir, config)\n    546                            estimator,\n    547                            custom_objects,\n--&gt; 548                            keras_weights)\n    549   elif keras_model.built:\n    550     logging.warning('You are creating an Estimator from a Keras model '\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/estimator/keras.py in _save_first_checkpoint(keras_model, estimator, custom_objects, keras_weights)\n    455         if not model.train_function:\n    456           # pylint: disable=protected-access\n--&gt; 457           model._make_train_function()\n    458           K._initialize_variables(sess)\n    459           # pylint: enable=protected-access\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py in _make_train_function(self)\n    596           # Training updates\n    597           updates = self.optimizer.get_updates(\n--&gt; 598               params=self._collected_trainable_weights, loss=self.total_loss)\n    599         # Unconditional updates\n    600         updates += self.get_updates_for(None)\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/optimizers.py in get_updates(self, loss, params)\n    478 \n    479     for p, g, m, v, vhat in zip(params, grads, ms, vs, vhats):\n--&gt; 480       m_t = (self.beta_1 * m) + (1. - self.beta_1) * g\n    481       v_t = (self.beta_2 * v) + (1. - self.beta_2) * math_ops.square(g)\n    482       if self.amsgrad:\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py in _run_op(a, *args)\n    856       # pylint: disable=protected-access\n    857       value = a._AsTensor()\n--&gt; 858       return tensor_oper(value, *args)\n    859 \n    860     # Propagate __doc__ to wrapper\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py in binary_op_wrapper(x, y)\n    851       elif not isinstance(y, sparse_tensor.SparseTensor):\n    852         try:\n--&gt; 853           y = ops.convert_to_tensor(y, dtype=x.dtype.base_dtype, name=\"y\")\n    854         except TypeError:\n    855           # If the RHS is not a tensor, it might be a tensor aware object\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in convert_to_tensor(value, dtype, name, preferred_dtype)\n    996       name=name,\n    997       preferred_dtype=preferred_dtype,\n--&gt; 998       as_ref=False)\n    999 \n   1000 \n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx)\n   1092 \n   1093     if ret is None:\n-&gt; 1094       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n   1095 \n   1096     if ret is NotImplemented:\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variables.py in _TensorConversionFunction(v, dtype, name, as_ref)\n    796       raise ValueError(\n    797           \"Incompatible type conversion requested to type '%s' for variable \"\n--&gt; 798           \"of type '%s'\" % (dtype.name, v.dtype.name))\n    799     if as_ref:\n    800       return v._ref()  # pylint: disable=protected-access\n\nValueError: Incompatible type conversion requested to type 'float16' for variable of type 'float32'\n</code></pre>\n<p>/cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15220929\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tanzhenyu\">@tanzhenyu</a></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\ncustom code\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nN/A\nTensorFlow installed from (source or binary):\nBinary\nTensorFlow version (use command below):\nCodalab\nPython version:\nCodalb\nBazel version (if compiling from source):\nN/A\nGCC/Compiler version (if compiling from source):\nN/A\nCUDA/cuDNN version:\nN/A\nGPU model and memory:\nN/a\nExact command to reproduce:\nYou can run exactly this code on colab\n\nDescribe the problem\nUsing float16 crash model_to_estimator\nSource code / logs\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\nfrom tensorflow import keras as ks\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.python.estimator import keras as keras_lib\n\nks.backend.clear_session()\nks.backend.set_floatx('float16')\n\ntf.logging.set_verbosity(tf.logging.INFO)\n\nmy_input_fn = tf.estimator.inputs.numpy_input_fn(\n    x={\"digit_a\": np.array(np.random.rand(1, 27, 27, 1).astype(np.float32))},\n    y={\"mydense\": np.array(np.random.rand(1,1).astype(np.float32))},\n      batch_size=500,\n      num_epochs=1,\n      shuffle=False)\n\n# First, define the modules\ndigit_input = ks.Input(shape=(299, 299, 3), name=\"digit_input\")\nvision_model= ks.applications.xception.Xception(input_tensor=digit_input, include_top=False, weights='imagenet',classes=1)\n\n\n# Then define the tell-digits-apart model\ndigit_a = ks.Input(shape=(299, 299, 3), name=\"digit_a\")\n\n# The vision model will be shared, weights and all\nout_a = vision_model(digit_a)\n\n\nout = ks.layers.Dense(1, activation='sigmoid', name=\"mydense\")(out_a)\n\nm2 = ks.Model([digit_a], out, name=\"Xception_enc\")\n\nm2.compile(loss={ 'mydense': 'binary_crossentropy'},optimizer=tf.keras.optimizers.Adam())\n\n\nest = keras_lib.model_to_estimator(\n            keras_model=m2,\n            config=tf.estimator.RunConfig(session_config=tf.ConfigProto(log_device_placement=True)))\n\nLOG:\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-9-03750f8e4923> in <module>()\n     37 est = keras_lib.model_to_estimator(\n     38             keras_model=m2,\n---> 39             config=tf.estimator.RunConfig(session_config=tf.ConfigProto(log_device_placement=True)))\n     40 \n     41 \n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/estimator/keras.py in model_to_estimator(keras_model, keras_model_path, custom_objects, model_dir, config)\n    546                            estimator,\n    547                            custom_objects,\n--> 548                            keras_weights)\n    549   elif keras_model.built:\n    550     logging.warning('You are creating an Estimator from a Keras model '\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/estimator/keras.py in _save_first_checkpoint(keras_model, estimator, custom_objects, keras_weights)\n    455         if not model.train_function:\n    456           # pylint: disable=protected-access\n--> 457           model._make_train_function()\n    458           K._initialize_variables(sess)\n    459           # pylint: enable=protected-access\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py in _make_train_function(self)\n    596           # Training updates\n    597           updates = self.optimizer.get_updates(\n--> 598               params=self._collected_trainable_weights, loss=self.total_loss)\n    599         # Unconditional updates\n    600         updates += self.get_updates_for(None)\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/optimizers.py in get_updates(self, loss, params)\n    478 \n    479     for p, g, m, v, vhat in zip(params, grads, ms, vs, vhats):\n--> 480       m_t = (self.beta_1 * m) + (1. - self.beta_1) * g\n    481       v_t = (self.beta_2 * v) + (1. - self.beta_2) * math_ops.square(g)\n    482       if self.amsgrad:\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py in _run_op(a, *args)\n    856       # pylint: disable=protected-access\n    857       value = a._AsTensor()\n--> 858       return tensor_oper(value, *args)\n    859 \n    860     # Propagate __doc__ to wrapper\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py in binary_op_wrapper(x, y)\n    851       elif not isinstance(y, sparse_tensor.SparseTensor):\n    852         try:\n--> 853           y = ops.convert_to_tensor(y, dtype=x.dtype.base_dtype, name=\"y\")\n    854         except TypeError:\n    855           # If the RHS is not a tensor, it might be a tensor aware object\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in convert_to_tensor(value, dtype, name, preferred_dtype)\n    996       name=name,\n    997       preferred_dtype=preferred_dtype,\n--> 998       as_ref=False)\n    999 \n   1000 \n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx)\n   1092 \n   1093     if ret is None:\n-> 1094       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n   1095 \n   1096     if ret is NotImplemented:\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variables.py in _TensorConversionFunction(v, dtype, name, as_ref)\n    796       raise ValueError(\n    797           \"Incompatible type conversion requested to type '%s' for variable \"\n--> 798           \"of type '%s'\" % (dtype.name, v.dtype.name))\n    799     if as_ref:\n    800       return v._ref()  # pylint: disable=protected-access\n\nValueError: Incompatible type conversion requested to type 'float16' for variable of type 'float32'\n\n/cc @tanzhenyu", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n   custom code\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\n    Linux\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\n   N/A\r\n- **TensorFlow installed from (source or binary)**:\r\n   Binary\r\n- **TensorFlow version (use command below)**:\r\n    Codalab\r\n- **Python version**:\r\n   Codalb\r\n- **Bazel version (if compiling from source)**:\r\n  N/A\r\n- **GCC/Compiler version (if compiling from source)**:\r\n  N/A\r\n- **CUDA/cuDNN version**:\r\n  N/A\r\n- **GPU model and memory**:\r\n  N/a\r\n- **Exact command to reproduce**:\r\n  You can run exactly this code on colab\r\n\r\n### Describe the problem\r\nUsing float16 crash `model_to_estimator`\r\n\r\n### Source code / logs\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\r\n\r\n```\r\nfrom tensorflow import keras as ks\r\nimport numpy as np\r\nimport tensorflow as tf\r\nfrom tensorflow.python.estimator import keras as keras_lib\r\n\r\nks.backend.clear_session()\r\nks.backend.set_floatx('float16')\r\n\r\ntf.logging.set_verbosity(tf.logging.INFO)\r\n\r\nmy_input_fn = tf.estimator.inputs.numpy_input_fn(\r\n    x={\"digit_a\": np.array(np.random.rand(1, 27, 27, 1).astype(np.float32))},\r\n    y={\"mydense\": np.array(np.random.rand(1,1).astype(np.float32))},\r\n      batch_size=500,\r\n      num_epochs=1,\r\n      shuffle=False)\r\n\r\n# First, define the modules\r\ndigit_input = ks.Input(shape=(299, 299, 3), name=\"digit_input\")\r\nvision_model= ks.applications.xception.Xception(input_tensor=digit_input, include_top=False, weights='imagenet',classes=1)\r\n\r\n\r\n# Then define the tell-digits-apart model\r\ndigit_a = ks.Input(shape=(299, 299, 3), name=\"digit_a\")\r\n\r\n# The vision model will be shared, weights and all\r\nout_a = vision_model(digit_a)\r\n\r\n\r\nout = ks.layers.Dense(1, activation='sigmoid', name=\"mydense\")(out_a)\r\n\r\nm2 = ks.Model([digit_a], out, name=\"Xception_enc\")\r\n\r\nm2.compile(loss={ 'mydense': 'binary_crossentropy'},optimizer=tf.keras.optimizers.Adam())\r\n\r\n\r\nest = keras_lib.model_to_estimator(\r\n            keras_model=m2,\r\n            config=tf.estimator.RunConfig(session_config=tf.ConfigProto(log_device_placement=True)))\r\n````\r\n\r\nLOG:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-9-03750f8e4923> in <module>()\r\n     37 est = keras_lib.model_to_estimator(\r\n     38             keras_model=m2,\r\n---> 39             config=tf.estimator.RunConfig(session_config=tf.ConfigProto(log_device_placement=True)))\r\n     40 \r\n     41 \r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/estimator/keras.py in model_to_estimator(keras_model, keras_model_path, custom_objects, model_dir, config)\r\n    546                            estimator,\r\n    547                            custom_objects,\r\n--> 548                            keras_weights)\r\n    549   elif keras_model.built:\r\n    550     logging.warning('You are creating an Estimator from a Keras model '\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/estimator/keras.py in _save_first_checkpoint(keras_model, estimator, custom_objects, keras_weights)\r\n    455         if not model.train_function:\r\n    456           # pylint: disable=protected-access\r\n--> 457           model._make_train_function()\r\n    458           K._initialize_variables(sess)\r\n    459           # pylint: enable=protected-access\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py in _make_train_function(self)\r\n    596           # Training updates\r\n    597           updates = self.optimizer.get_updates(\r\n--> 598               params=self._collected_trainable_weights, loss=self.total_loss)\r\n    599         # Unconditional updates\r\n    600         updates += self.get_updates_for(None)\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/optimizers.py in get_updates(self, loss, params)\r\n    478 \r\n    479     for p, g, m, v, vhat in zip(params, grads, ms, vs, vhats):\r\n--> 480       m_t = (self.beta_1 * m) + (1. - self.beta_1) * g\r\n    481       v_t = (self.beta_2 * v) + (1. - self.beta_2) * math_ops.square(g)\r\n    482       if self.amsgrad:\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py in _run_op(a, *args)\r\n    856       # pylint: disable=protected-access\r\n    857       value = a._AsTensor()\r\n--> 858       return tensor_oper(value, *args)\r\n    859 \r\n    860     # Propagate __doc__ to wrapper\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py in binary_op_wrapper(x, y)\r\n    851       elif not isinstance(y, sparse_tensor.SparseTensor):\r\n    852         try:\r\n--> 853           y = ops.convert_to_tensor(y, dtype=x.dtype.base_dtype, name=\"y\")\r\n    854         except TypeError:\r\n    855           # If the RHS is not a tensor, it might be a tensor aware object\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in convert_to_tensor(value, dtype, name, preferred_dtype)\r\n    996       name=name,\r\n    997       preferred_dtype=preferred_dtype,\r\n--> 998       as_ref=False)\r\n    999 \r\n   1000 \r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx)\r\n   1092 \r\n   1093     if ret is None:\r\n-> 1094       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\r\n   1095 \r\n   1096     if ret is NotImplemented:\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variables.py in _TensorConversionFunction(v, dtype, name, as_ref)\r\n    796       raise ValueError(\r\n    797           \"Incompatible type conversion requested to type '%s' for variable \"\r\n--> 798           \"of type '%s'\" % (dtype.name, v.dtype.name))\r\n    799     if as_ref:\r\n    800       return v._ref()  # pylint: disable=protected-access\r\n\r\nValueError: Incompatible type conversion requested to type 'float16' for variable of type 'float32'\r\n```\r\n/cc @tanzhenyu "}