{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/273239441", "html_url": "https://github.com/tensorflow/tensorflow/issues/6120#issuecomment-273239441", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6120", "id": 273239441, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzIzOTQ0MQ==", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-17T17:33:07Z", "updated_at": "2017-01-17T17:33:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=161459\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/petewarden\">@petewarden</a> That's a good idea, but I don't see how one would check for that.  We do check if a GraphDef's <code>min_consumer</code> version is too high, but this usually isn't the case.  We absolutely want TensorFlow to be able to load a GraphDef with a future version if it doesn't use any of the features introduced by that future version.  Since we have no idea what those future features are, the only kinds of errors we can produce are about unimplemented features.</p>", "body_text": "@petewarden That's a good idea, but I don't see how one would check for that.  We do check if a GraphDef's min_consumer version is too high, but this usually isn't the case.  We absolutely want TensorFlow to be able to load a GraphDef with a future version if it doesn't use any of the features introduced by that future version.  Since we have no idea what those future features are, the only kinds of errors we can produce are about unimplemented features.", "body": "@petewarden That's a good idea, but I don't see how one would check for that.  We do check if a GraphDef's `min_consumer` version is too high, but this usually isn't the case.  We absolutely want TensorFlow to be able to load a GraphDef with a future version if it doesn't use any of the features introduced by that future version.  Since we have no idea what those future features are, the only kinds of errors we can produce are about unimplemented features."}