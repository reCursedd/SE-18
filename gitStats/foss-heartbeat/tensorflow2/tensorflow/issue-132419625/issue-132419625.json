{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1030", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1030/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1030/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1030/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1030", "id": 132419625, "node_id": "MDU6SXNzdWUxMzI0MTk2MjU=", "number": 1030, "title": "problem with rnn comments regarding dynamic seq length?", "user": {"login": "evanthebouncy", "id": 1041553, "node_id": "MDQ6VXNlcjEwNDE1NTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1041553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evanthebouncy", "html_url": "https://github.com/evanthebouncy", "followers_url": "https://api.github.com/users/evanthebouncy/followers", "following_url": "https://api.github.com/users/evanthebouncy/following{/other_user}", "gists_url": "https://api.github.com/users/evanthebouncy/gists{/gist_id}", "starred_url": "https://api.github.com/users/evanthebouncy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evanthebouncy/subscriptions", "organizations_url": "https://api.github.com/users/evanthebouncy/orgs", "repos_url": "https://api.github.com/users/evanthebouncy/repos", "events_url": "https://api.github.com/users/evanthebouncy/events{/privacy}", "received_events_url": "https://api.github.com/users/evanthebouncy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-02-09T13:28:41Z", "updated_at": "2016-02-09T15:47:53Z", "closed_at": "2016-02-09T15:47:53Z", "author_association": "NONE", "body_html": "<p>I found this in the rnn comments:</p>\n<pre><code>  Dynamic calculation returns, at time t:\n    (t &gt;= max(sequence_length)\n        ? (zeros(output_shape), zeros(state_shape))\n        : cell(input, state)\n</code></pre>\n<p>Is this correct? It seems unreasonable to throw away the final state by overwriting it with 0s after it ran over the maximum sequence length. From reading the later code section for _dynamic_rnn_step there's this comment:</p>\n<pre><code>  if t &gt;= max_sequence_length:\n    return (zero_output, state)\n  if t &lt; min_sequence_length:\n    return call_cell()\n</code></pre>\n<p>that seems to suggest that the final state is actually the last state before we ran over the maximum sequence length, and only the output is zero-ed out, which would make more sense.</p>\n<p>I'm not sure which one is actually being done in the implementation, but these 2 views are not consistent.</p>", "body_text": "I found this in the rnn comments:\n  Dynamic calculation returns, at time t:\n    (t >= max(sequence_length)\n        ? (zeros(output_shape), zeros(state_shape))\n        : cell(input, state)\n\nIs this correct? It seems unreasonable to throw away the final state by overwriting it with 0s after it ran over the maximum sequence length. From reading the later code section for _dynamic_rnn_step there's this comment:\n  if t >= max_sequence_length:\n    return (zero_output, state)\n  if t < min_sequence_length:\n    return call_cell()\n\nthat seems to suggest that the final state is actually the last state before we ran over the maximum sequence length, and only the output is zero-ed out, which would make more sense.\nI'm not sure which one is actually being done in the implementation, but these 2 views are not consistent.", "body": "I found this in the rnn comments:\n\n```\n  Dynamic calculation returns, at time t:\n    (t >= max(sequence_length)\n        ? (zeros(output_shape), zeros(state_shape))\n        : cell(input, state)\n```\n\nIs this correct? It seems unreasonable to throw away the final state by overwriting it with 0s after it ran over the maximum sequence length. From reading the later code section for _dynamic_rnn_step there's this comment:\n\n```\n  if t >= max_sequence_length:\n    return (zero_output, state)\n  if t < min_sequence_length:\n    return call_cell()\n```\n\nthat seems to suggest that the final state is actually the last state before we ran over the maximum sequence length, and only the output is zero-ed out, which would make more sense.\n\nI'm not sure which one is actually being done in the implementation, but these 2 views are not consistent.\n"}