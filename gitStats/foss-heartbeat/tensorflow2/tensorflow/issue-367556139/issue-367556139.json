{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22803", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22803/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22803/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22803/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22803", "id": 367556139, "node_id": "MDU6SXNzdWUzNjc1NTYxMzk=", "number": 22803, "title": "Model converted to TFLite always returns NaN as output.", "user": {"login": "sercant", "id": 6319501, "node_id": "MDQ6VXNlcjYzMTk1MDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6319501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sercant", "html_url": "https://github.com/sercant", "followers_url": "https://api.github.com/users/sercant/followers", "following_url": "https://api.github.com/users/sercant/following{/other_user}", "gists_url": "https://api.github.com/users/sercant/gists{/gist_id}", "starred_url": "https://api.github.com/users/sercant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sercant/subscriptions", "organizations_url": "https://api.github.com/users/sercant/orgs", "repos_url": "https://api.github.com/users/sercant/repos", "events_url": "https://api.github.com/users/sercant/events{/privacy}", "received_events_url": "https://api.github.com/users/sercant/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 750616506, "node_id": "MDU6TGFiZWw3NTA2MTY1MDY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:lite", "name": "comp:lite", "color": "0052cc", "default": false}], "state": "open", "locked": false, "assignee": {"login": "gargn", "id": 1900612, "node_id": "MDQ6VXNlcjE5MDA2MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1900612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gargn", "html_url": "https://github.com/gargn", "followers_url": "https://api.github.com/users/gargn/followers", "following_url": "https://api.github.com/users/gargn/following{/other_user}", "gists_url": "https://api.github.com/users/gargn/gists{/gist_id}", "starred_url": "https://api.github.com/users/gargn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gargn/subscriptions", "organizations_url": "https://api.github.com/users/gargn/orgs", "repos_url": "https://api.github.com/users/gargn/repos", "events_url": "https://api.github.com/users/gargn/events{/privacy}", "received_events_url": "https://api.github.com/users/gargn/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gargn", "id": 1900612, "node_id": "MDQ6VXNlcjE5MDA2MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1900612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gargn", "html_url": "https://github.com/gargn", "followers_url": "https://api.github.com/users/gargn/followers", "following_url": "https://api.github.com/users/gargn/following{/other_user}", "gists_url": "https://api.github.com/users/gargn/gists{/gist_id}", "starred_url": "https://api.github.com/users/gargn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gargn/subscriptions", "organizations_url": "https://api.github.com/users/gargn/orgs", "repos_url": "https://api.github.com/users/gargn/repos", "events_url": "https://api.github.com/users/gargn/events{/privacy}", "received_events_url": "https://api.github.com/users/gargn/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-10-07T13:47:34Z", "updated_at": "2018-11-22T18:59:13Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: MacOS 10.13.6</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: --</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>:  v1.10.0-12-g4dcfddc5d1 1.10.1</li>\n<li><strong>Python version</strong>: 3.6.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: --</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: --</li>\n<li><strong>CUDA/cuDNN version</strong>: --</li>\n<li><strong>GPU model and memory</strong>: Intel Iris Plus Graphics 650 1536 MB</li>\n<li><strong>Exact command to reproduce</strong>: <code>python3 test.py</code></li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I have been trying to convert a frozen graph trained using <a href=\"https://github.com/GeorgeSeif/Semantic-Segmentation-Suite\">this repo</a> for using on android with TFLite. Trained model uses MobileNetV2 as frontend and <a href=\"https://arxiv.org/abs/1704.04861\" rel=\"nofollow\">Mobile UNet for Semantic Segmentation</a> as the model. The problem I am facing is: the frozen pb graph segments the image correctly but TFLite converted model returns all <code>nan</code> for the output. To try the problem I wrote the following script. The model is converted without any errors or warnings, but the output is not correct. Do you have any idea what might be causing this?</p>\n<p>Note: converted model is also returning NaNs on android device.</p>\n<p><strong>Frozen graph</strong>: <a href=\"https://drive.google.com/file/d/1qGwD8h5ub0HjtO-Cc8Zd-HU6Uv-t9apF/view?usp=sharing\" rel=\"nofollow\">output_graph.pb</a></p>\n<h3>Source code / logs</h3>\n<p><strong>test.py</strong></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> cv2\n<span class=\"pl-k\">from</span> tensorflow.python.platform <span class=\"pl-k\">import</span> gfile\n<span class=\"pl-k\">from</span> tensorflow.contrib.lite.python.convert_saved_model <span class=\"pl-k\">import</span> set_tensor_shapes\n\nsess <span class=\"pl-k\">=</span> tf.Session()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> load graph</span>\n<span class=\"pl-k\">with</span> gfile.FastGFile(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>output_graph.pb<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n    graph_def <span class=\"pl-k\">=</span> tf.GraphDef()\ngraph_def.ParseFromString(f.read())\nsess.graph.as_default()\ntf.import_graph_def(graph_def, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> get tensors</span>\ninput_tensor <span class=\"pl-k\">=</span> sess.graph.get_tensor_by_name(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Placeholder:0<span class=\"pl-pds\">'</span></span>)\noutput_tensor <span class=\"pl-k\">=</span> sess.graph.get_tensor_by_name(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>logits/Conv2D:0<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> generate random image</span>\ninput_image <span class=\"pl-k\">=</span> np.array(np.random.random_sample(\n    [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">128</span>, <span class=\"pl-c1\">128</span>, <span class=\"pl-c1\">3</span>]), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> run the model with tf</span>\noutput_image <span class=\"pl-k\">=</span> sess.run(output_tensor, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{input_tensor: input_image})\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> print tf output</span>\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>--- Tensorflow output ---<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c1\">print</span>(output_image)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>-------------------------<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> set shapes</span>\ninput_tensor.set_shape([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">128</span>, <span class=\"pl-c1\">128</span>, <span class=\"pl-c1\">3</span>])\noutput_tensor.set_shape([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">128</span>, <span class=\"pl-c1\">128</span>, <span class=\"pl-c1\">32</span>])\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> convert model</span>\nconverter <span class=\"pl-k\">=</span> tf.contrib.lite.TocoConverter.from_session(\n    sess, [input_tensor], [output_tensor])\ntflite_model <span class=\"pl-k\">=</span> converter.convert()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Prepare interpreter</span>\ninterpreter <span class=\"pl-k\">=</span> tf.contrib.lite.Interpreter(<span class=\"pl-v\">model_content</span><span class=\"pl-k\">=</span>tflite_model)\ninterpreter.allocate_tensors()\n\ninput_details <span class=\"pl-k\">=</span> interpreter.get_input_details()\noutput_details <span class=\"pl-k\">=</span> interpreter.get_output_details()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> set input data</span>\ninterpreter.set_tensor(input_details[<span class=\"pl-c1\">0</span>][<span class=\"pl-s\"><span class=\"pl-pds\">'</span>index<span class=\"pl-pds\">'</span></span>], input_image)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> run model on interpreter</span>\ninterpreter.invoke()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> retrive output</span>\noutput_data <span class=\"pl-k\">=</span> interpreter.get_tensor(output_details[<span class=\"pl-c1\">0</span>][<span class=\"pl-s\"><span class=\"pl-pds\">'</span>index<span class=\"pl-pds\">'</span></span>])\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> print tflite output</span>\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>--- TFLite output ---<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c1\">print</span>(output_data)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>---------------------<span class=\"pl-pds\">'</span></span>)</pre></div>\n<p><strong>output</strong></p>\n<div class=\"highlight highlight-source-shell\"><pre>--- Tensorflow output ---\n[[[[-14.484754   -14.454916    -3.9344878  ... -10.294399\n     -2.837898    -8.190185  ]\n   [-14.120294   -10.590508    -4.032942   ...  -6.7745924\n     -0.4497184   -9.78646   ]\n   [-14.561665   -10.49988     -8.065053   ...  -7.422716\n     -0.7991432  -10.160792  ]\n   ...\n   [-13.12197     -7.3976164   -7.1669674  ...  -9.533363\n     -2.0361094  -10.951963  ]\n   [-15.041047    -7.3879066   -6.724542   ... -11.897878\n     -2.1202648  -13.670592  ]\n   [-14.483544   -10.037312    -6.356632   ... -12.075281\n     -2.2860763  -10.284541  ]]\n\n  [[-10.372202   -13.09114     -3.6517806  ...  -7.623592\n     -1.8009435   -6.817739  ]\n   [-10.72727    -10.886565    -5.621975   ...  -7.8185344\n     -1.4768337  -10.389865  ]\n   [-11.611484   -10.158413    -7.931344   ...  -4.938987\n     -0.23626254  -8.830031  ]\n   ...\n   [-12.590868    -6.102834   -10.619679   ...  -9.990441\n     -1.0927511  -10.764243  ]\n   [-12.30341     -4.7649236   -6.600345   ...  -9.458132\n     -0.8608778  -12.198781  ]\n   [-11.649162    -6.2056537   -5.922945   ... -10.207803\n     -1.5887291   -9.819743  ]]\n\n  [[-11.40545    -13.755798    -6.9160714  ... -11.7735195\n     -3.3357754  -11.139454  ]\n   [-11.398698   -11.785369    -6.5561953  ...  -9.794318\n     -2.8272014  -11.654141  ]\n   [ -9.548821    -7.3276024   -8.640192   ...  -4.349879\n      0.14261375  -7.0007625 ]\n   ...\n   [-12.497658    -5.8748426   -9.083981   ...  -9.841493\n     -1.4732579  -11.357761  ]\n   [-14.517144    -5.2391934   -8.496638   ... -10.834668\n     -2.6033173  -13.944796  ]\n   [-14.292226    -7.0837607   -6.3621516  ... -10.551426\n     -3.6190045  -12.224428  ]]\n\n  ...\n\n  [[ -6.1242228  -14.730902    -6.034355   ...  -5.2220926\n     -1.1160429   -2.2097938 ]\n   [ -5.003286   -16.216772    -5.28262    ...  -5.2270694\n     -1.7447093   -4.245701  ]\n   [ -5.595118   -15.978978    -4.214302   ...  -5.4203877\n     -1.8398296   -4.396698  ]\n   ...\n   [-13.178917   -13.012176   -10.450902   ... -15.064126\n     -1.9914117   -9.5184765 ]\n   [-10.992667    -8.671063    -6.456934   ... -14.054223\n     -1.4051182   -9.887496  ]\n   [ -9.728466   -10.335494    -7.3331285  ... -10.754501\n     -1.7173084   -4.671226  ]]\n\n  [[ -5.4983754  -15.449182    -5.7204423  ...  -4.4113154\n     -1.0589103   -2.6990566 ]\n   [ -5.384841   -16.741693    -5.5674496  ...  -5.684756\n     -1.8891927   -4.65452   ]\n   [ -5.7909193  -16.244637    -4.5293765  ...  -6.4048567\n     -2.3706574   -4.982708  ]\n   ...\n   [-10.004818   -11.296059    -7.158481   ... -10.9329\n     -2.0753372   -8.129092  ]\n   [ -7.942011    -8.787835    -2.8869028  ... -10.7461605\n     -1.7351687   -7.8243003 ]\n   [ -9.368582   -11.195904    -5.3443894  ...  -8.967132\n     -1.5083878   -5.205722  ]]\n\n  [[ -7.6940765  -15.492795    -4.6488175  ...  -5.7006836\n     -1.3711176   -3.7699785 ]\n   [ -5.243174   -15.9268875   -5.07713    ...  -3.642994\n     -1.4748344   -4.1258245 ]\n   [ -4.8627806  -13.911514    -4.372596   ...  -2.4015875\n     -1.4164882   -3.6560988 ]\n   ...\n   [ -9.049875   -12.410313    -5.53057    ...  -8.292001\n     -2.442209    -4.6609883 ]\n   [ -7.18582    -11.061987    -3.3339026  ...  -7.413499\n     -2.0413182   -5.4470387 ]\n   [ -9.58725    -13.576278    -5.9882216  ...  -8.204617\n     -2.0788593   -5.216848  ]]]]\n-------------------------\n--- TFLite output ---\n[[[[nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   ...\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]]\n\n  [[nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   ...\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]]\n\n  [[nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   ...\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]]\n\n  ...\n\n  [[nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   ...\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]]\n\n  [[nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   ...\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]]\n\n  [[nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   ...\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]]]]\n---------------------</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.13.6\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: --\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below):  v1.10.0-12-g4dcfddc5d1 1.10.1\nPython version: 3.6.5\nBazel version (if compiling from source): --\nGCC/Compiler version (if compiling from source): --\nCUDA/cuDNN version: --\nGPU model and memory: Intel Iris Plus Graphics 650 1536 MB\nExact command to reproduce: python3 test.py\n\nDescribe the problem\nI have been trying to convert a frozen graph trained using this repo for using on android with TFLite. Trained model uses MobileNetV2 as frontend and Mobile UNet for Semantic Segmentation as the model. The problem I am facing is: the frozen pb graph segments the image correctly but TFLite converted model returns all nan for the output. To try the problem I wrote the following script. The model is converted without any errors or warnings, but the output is not correct. Do you have any idea what might be causing this?\nNote: converted model is also returning NaNs on android device.\nFrozen graph: output_graph.pb\nSource code / logs\ntest.py\nimport tensorflow as tf\nimport numpy as np\nimport cv2\nfrom tensorflow.python.platform import gfile\nfrom tensorflow.contrib.lite.python.convert_saved_model import set_tensor_shapes\n\nsess = tf.Session()\n\n# load graph\nwith gfile.FastGFile('output_graph.pb', 'rb') as f:\n    graph_def = tf.GraphDef()\ngraph_def.ParseFromString(f.read())\nsess.graph.as_default()\ntf.import_graph_def(graph_def, name='')\n\n# get tensors\ninput_tensor = sess.graph.get_tensor_by_name('Placeholder:0')\noutput_tensor = sess.graph.get_tensor_by_name('logits/Conv2D:0')\n\n# generate random image\ninput_image = np.array(np.random.random_sample(\n    [1, 128, 128, 3]), dtype=np.float32)\n\n# run the model with tf\noutput_image = sess.run(output_tensor, feed_dict={input_tensor: input_image})\n\n# print tf output\nprint('--- Tensorflow output ---')\nprint(output_image)\nprint('-------------------------')\n\n# set shapes\ninput_tensor.set_shape([1, 128, 128, 3])\noutput_tensor.set_shape([1, 128, 128, 32])\n\n# convert model\nconverter = tf.contrib.lite.TocoConverter.from_session(\n    sess, [input_tensor], [output_tensor])\ntflite_model = converter.convert()\n\n# Prepare interpreter\ninterpreter = tf.contrib.lite.Interpreter(model_content=tflite_model)\ninterpreter.allocate_tensors()\n\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\n\n# set input data\ninterpreter.set_tensor(input_details[0]['index'], input_image)\n\n# run model on interpreter\ninterpreter.invoke()\n\n# retrive output\noutput_data = interpreter.get_tensor(output_details[0]['index'])\n\n# print tflite output\nprint('--- TFLite output ---')\nprint(output_data)\nprint('---------------------')\noutput\n--- Tensorflow output ---\n[[[[-14.484754   -14.454916    -3.9344878  ... -10.294399\n     -2.837898    -8.190185  ]\n   [-14.120294   -10.590508    -4.032942   ...  -6.7745924\n     -0.4497184   -9.78646   ]\n   [-14.561665   -10.49988     -8.065053   ...  -7.422716\n     -0.7991432  -10.160792  ]\n   ...\n   [-13.12197     -7.3976164   -7.1669674  ...  -9.533363\n     -2.0361094  -10.951963  ]\n   [-15.041047    -7.3879066   -6.724542   ... -11.897878\n     -2.1202648  -13.670592  ]\n   [-14.483544   -10.037312    -6.356632   ... -12.075281\n     -2.2860763  -10.284541  ]]\n\n  [[-10.372202   -13.09114     -3.6517806  ...  -7.623592\n     -1.8009435   -6.817739  ]\n   [-10.72727    -10.886565    -5.621975   ...  -7.8185344\n     -1.4768337  -10.389865  ]\n   [-11.611484   -10.158413    -7.931344   ...  -4.938987\n     -0.23626254  -8.830031  ]\n   ...\n   [-12.590868    -6.102834   -10.619679   ...  -9.990441\n     -1.0927511  -10.764243  ]\n   [-12.30341     -4.7649236   -6.600345   ...  -9.458132\n     -0.8608778  -12.198781  ]\n   [-11.649162    -6.2056537   -5.922945   ... -10.207803\n     -1.5887291   -9.819743  ]]\n\n  [[-11.40545    -13.755798    -6.9160714  ... -11.7735195\n     -3.3357754  -11.139454  ]\n   [-11.398698   -11.785369    -6.5561953  ...  -9.794318\n     -2.8272014  -11.654141  ]\n   [ -9.548821    -7.3276024   -8.640192   ...  -4.349879\n      0.14261375  -7.0007625 ]\n   ...\n   [-12.497658    -5.8748426   -9.083981   ...  -9.841493\n     -1.4732579  -11.357761  ]\n   [-14.517144    -5.2391934   -8.496638   ... -10.834668\n     -2.6033173  -13.944796  ]\n   [-14.292226    -7.0837607   -6.3621516  ... -10.551426\n     -3.6190045  -12.224428  ]]\n\n  ...\n\n  [[ -6.1242228  -14.730902    -6.034355   ...  -5.2220926\n     -1.1160429   -2.2097938 ]\n   [ -5.003286   -16.216772    -5.28262    ...  -5.2270694\n     -1.7447093   -4.245701  ]\n   [ -5.595118   -15.978978    -4.214302   ...  -5.4203877\n     -1.8398296   -4.396698  ]\n   ...\n   [-13.178917   -13.012176   -10.450902   ... -15.064126\n     -1.9914117   -9.5184765 ]\n   [-10.992667    -8.671063    -6.456934   ... -14.054223\n     -1.4051182   -9.887496  ]\n   [ -9.728466   -10.335494    -7.3331285  ... -10.754501\n     -1.7173084   -4.671226  ]]\n\n  [[ -5.4983754  -15.449182    -5.7204423  ...  -4.4113154\n     -1.0589103   -2.6990566 ]\n   [ -5.384841   -16.741693    -5.5674496  ...  -5.684756\n     -1.8891927   -4.65452   ]\n   [ -5.7909193  -16.244637    -4.5293765  ...  -6.4048567\n     -2.3706574   -4.982708  ]\n   ...\n   [-10.004818   -11.296059    -7.158481   ... -10.9329\n     -2.0753372   -8.129092  ]\n   [ -7.942011    -8.787835    -2.8869028  ... -10.7461605\n     -1.7351687   -7.8243003 ]\n   [ -9.368582   -11.195904    -5.3443894  ...  -8.967132\n     -1.5083878   -5.205722  ]]\n\n  [[ -7.6940765  -15.492795    -4.6488175  ...  -5.7006836\n     -1.3711176   -3.7699785 ]\n   [ -5.243174   -15.9268875   -5.07713    ...  -3.642994\n     -1.4748344   -4.1258245 ]\n   [ -4.8627806  -13.911514    -4.372596   ...  -2.4015875\n     -1.4164882   -3.6560988 ]\n   ...\n   [ -9.049875   -12.410313    -5.53057    ...  -8.292001\n     -2.442209    -4.6609883 ]\n   [ -7.18582    -11.061987    -3.3339026  ...  -7.413499\n     -2.0413182   -5.4470387 ]\n   [ -9.58725    -13.576278    -5.9882216  ...  -8.204617\n     -2.0788593   -5.216848  ]]]]\n-------------------------\n--- TFLite output ---\n[[[[nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   ...\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]]\n\n  [[nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   ...\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]]\n\n  [[nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   ...\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]]\n\n  ...\n\n  [[nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   ...\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]]\n\n  [[nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   ...\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]]\n\n  [[nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   ...\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]\n   [nan nan nan ... nan nan nan]]]]\n---------------------", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: MacOS 10.13.6\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: --\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**:  v1.10.0-12-g4dcfddc5d1 1.10.1\r\n- **Python version**: 3.6.5\r\n- **Bazel version (if compiling from source)**: --\r\n- **GCC/Compiler version (if compiling from source)**: --\r\n- **CUDA/cuDNN version**: --\r\n- **GPU model and memory**: Intel Iris Plus Graphics 650 1536 MB\r\n- **Exact command to reproduce**: `python3 test.py`\r\n\r\n### Describe the problem\r\nI have been trying to convert a frozen graph trained using [this repo](https://github.com/GeorgeSeif/Semantic-Segmentation-Suite) for using on android with TFLite. Trained model uses MobileNetV2 as frontend and [Mobile UNet for Semantic Segmentation](https://arxiv.org/abs/1704.04861) as the model. The problem I am facing is: the frozen pb graph segments the image correctly but TFLite converted model returns all `nan` for the output. To try the problem I wrote the following script. The model is converted without any errors or warnings, but the output is not correct. Do you have any idea what might be causing this?\r\n\r\nNote: converted model is also returning NaNs on android device.\r\n\r\n**Frozen graph**: [output_graph.pb](https://drive.google.com/file/d/1qGwD8h5ub0HjtO-Cc8Zd-HU6Uv-t9apF/view?usp=sharing)\r\n\r\n### Source code / logs\r\n\r\n**test.py**\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\nimport cv2\r\nfrom tensorflow.python.platform import gfile\r\nfrom tensorflow.contrib.lite.python.convert_saved_model import set_tensor_shapes\r\n\r\nsess = tf.Session()\r\n\r\n# load graph\r\nwith gfile.FastGFile('output_graph.pb', 'rb') as f:\r\n    graph_def = tf.GraphDef()\r\ngraph_def.ParseFromString(f.read())\r\nsess.graph.as_default()\r\ntf.import_graph_def(graph_def, name='')\r\n\r\n# get tensors\r\ninput_tensor = sess.graph.get_tensor_by_name('Placeholder:0')\r\noutput_tensor = sess.graph.get_tensor_by_name('logits/Conv2D:0')\r\n\r\n# generate random image\r\ninput_image = np.array(np.random.random_sample(\r\n    [1, 128, 128, 3]), dtype=np.float32)\r\n\r\n# run the model with tf\r\noutput_image = sess.run(output_tensor, feed_dict={input_tensor: input_image})\r\n\r\n# print tf output\r\nprint('--- Tensorflow output ---')\r\nprint(output_image)\r\nprint('-------------------------')\r\n\r\n# set shapes\r\ninput_tensor.set_shape([1, 128, 128, 3])\r\noutput_tensor.set_shape([1, 128, 128, 32])\r\n\r\n# convert model\r\nconverter = tf.contrib.lite.TocoConverter.from_session(\r\n    sess, [input_tensor], [output_tensor])\r\ntflite_model = converter.convert()\r\n\r\n# Prepare interpreter\r\ninterpreter = tf.contrib.lite.Interpreter(model_content=tflite_model)\r\ninterpreter.allocate_tensors()\r\n\r\ninput_details = interpreter.get_input_details()\r\noutput_details = interpreter.get_output_details()\r\n\r\n# set input data\r\ninterpreter.set_tensor(input_details[0]['index'], input_image)\r\n\r\n# run model on interpreter\r\ninterpreter.invoke()\r\n\r\n# retrive output\r\noutput_data = interpreter.get_tensor(output_details[0]['index'])\r\n\r\n# print tflite output\r\nprint('--- TFLite output ---')\r\nprint(output_data)\r\nprint('---------------------')\r\n```\r\n\r\n**output**\r\n```shell\r\n--- Tensorflow output ---\r\n[[[[-14.484754   -14.454916    -3.9344878  ... -10.294399\r\n     -2.837898    -8.190185  ]\r\n   [-14.120294   -10.590508    -4.032942   ...  -6.7745924\r\n     -0.4497184   -9.78646   ]\r\n   [-14.561665   -10.49988     -8.065053   ...  -7.422716\r\n     -0.7991432  -10.160792  ]\r\n   ...\r\n   [-13.12197     -7.3976164   -7.1669674  ...  -9.533363\r\n     -2.0361094  -10.951963  ]\r\n   [-15.041047    -7.3879066   -6.724542   ... -11.897878\r\n     -2.1202648  -13.670592  ]\r\n   [-14.483544   -10.037312    -6.356632   ... -12.075281\r\n     -2.2860763  -10.284541  ]]\r\n\r\n  [[-10.372202   -13.09114     -3.6517806  ...  -7.623592\r\n     -1.8009435   -6.817739  ]\r\n   [-10.72727    -10.886565    -5.621975   ...  -7.8185344\r\n     -1.4768337  -10.389865  ]\r\n   [-11.611484   -10.158413    -7.931344   ...  -4.938987\r\n     -0.23626254  -8.830031  ]\r\n   ...\r\n   [-12.590868    -6.102834   -10.619679   ...  -9.990441\r\n     -1.0927511  -10.764243  ]\r\n   [-12.30341     -4.7649236   -6.600345   ...  -9.458132\r\n     -0.8608778  -12.198781  ]\r\n   [-11.649162    -6.2056537   -5.922945   ... -10.207803\r\n     -1.5887291   -9.819743  ]]\r\n\r\n  [[-11.40545    -13.755798    -6.9160714  ... -11.7735195\r\n     -3.3357754  -11.139454  ]\r\n   [-11.398698   -11.785369    -6.5561953  ...  -9.794318\r\n     -2.8272014  -11.654141  ]\r\n   [ -9.548821    -7.3276024   -8.640192   ...  -4.349879\r\n      0.14261375  -7.0007625 ]\r\n   ...\r\n   [-12.497658    -5.8748426   -9.083981   ...  -9.841493\r\n     -1.4732579  -11.357761  ]\r\n   [-14.517144    -5.2391934   -8.496638   ... -10.834668\r\n     -2.6033173  -13.944796  ]\r\n   [-14.292226    -7.0837607   -6.3621516  ... -10.551426\r\n     -3.6190045  -12.224428  ]]\r\n\r\n  ...\r\n\r\n  [[ -6.1242228  -14.730902    -6.034355   ...  -5.2220926\r\n     -1.1160429   -2.2097938 ]\r\n   [ -5.003286   -16.216772    -5.28262    ...  -5.2270694\r\n     -1.7447093   -4.245701  ]\r\n   [ -5.595118   -15.978978    -4.214302   ...  -5.4203877\r\n     -1.8398296   -4.396698  ]\r\n   ...\r\n   [-13.178917   -13.012176   -10.450902   ... -15.064126\r\n     -1.9914117   -9.5184765 ]\r\n   [-10.992667    -8.671063    -6.456934   ... -14.054223\r\n     -1.4051182   -9.887496  ]\r\n   [ -9.728466   -10.335494    -7.3331285  ... -10.754501\r\n     -1.7173084   -4.671226  ]]\r\n\r\n  [[ -5.4983754  -15.449182    -5.7204423  ...  -4.4113154\r\n     -1.0589103   -2.6990566 ]\r\n   [ -5.384841   -16.741693    -5.5674496  ...  -5.684756\r\n     -1.8891927   -4.65452   ]\r\n   [ -5.7909193  -16.244637    -4.5293765  ...  -6.4048567\r\n     -2.3706574   -4.982708  ]\r\n   ...\r\n   [-10.004818   -11.296059    -7.158481   ... -10.9329\r\n     -2.0753372   -8.129092  ]\r\n   [ -7.942011    -8.787835    -2.8869028  ... -10.7461605\r\n     -1.7351687   -7.8243003 ]\r\n   [ -9.368582   -11.195904    -5.3443894  ...  -8.967132\r\n     -1.5083878   -5.205722  ]]\r\n\r\n  [[ -7.6940765  -15.492795    -4.6488175  ...  -5.7006836\r\n     -1.3711176   -3.7699785 ]\r\n   [ -5.243174   -15.9268875   -5.07713    ...  -3.642994\r\n     -1.4748344   -4.1258245 ]\r\n   [ -4.8627806  -13.911514    -4.372596   ...  -2.4015875\r\n     -1.4164882   -3.6560988 ]\r\n   ...\r\n   [ -9.049875   -12.410313    -5.53057    ...  -8.292001\r\n     -2.442209    -4.6609883 ]\r\n   [ -7.18582    -11.061987    -3.3339026  ...  -7.413499\r\n     -2.0413182   -5.4470387 ]\r\n   [ -9.58725    -13.576278    -5.9882216  ...  -8.204617\r\n     -2.0788593   -5.216848  ]]]]\r\n-------------------------\r\n--- TFLite output ---\r\n[[[[nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   ...\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]]\r\n\r\n  [[nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   ...\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]]\r\n\r\n  [[nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   ...\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]]\r\n\r\n  ...\r\n\r\n  [[nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   ...\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]]\r\n\r\n  [[nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   ...\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]]\r\n\r\n  [[nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   ...\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]\r\n   [nan nan nan ... nan nan nan]]]]\r\n---------------------\r\n```\r\n"}