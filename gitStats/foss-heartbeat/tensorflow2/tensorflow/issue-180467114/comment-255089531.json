{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/255089531", "html_url": "https://github.com/tensorflow/tensorflow/issues/4709#issuecomment-255089531", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4709", "id": 255089531, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTA4OTUzMQ==", "user": {"login": "redst4r", "id": 5718498, "node_id": "MDQ6VXNlcjU3MTg0OTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5718498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/redst4r", "html_url": "https://github.com/redst4r", "followers_url": "https://api.github.com/users/redst4r/followers", "following_url": "https://api.github.com/users/redst4r/following{/other_user}", "gists_url": "https://api.github.com/users/redst4r/gists{/gist_id}", "starred_url": "https://api.github.com/users/redst4r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/redst4r/subscriptions", "organizations_url": "https://api.github.com/users/redst4r/orgs", "repos_url": "https://api.github.com/users/redst4r/repos", "events_url": "https://api.github.com/users/redst4r/events{/privacy}", "received_events_url": "https://api.github.com/users/redst4r/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-20T12:17:22Z", "updated_at": "2016-10-20T12:17:22Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> : can you elaborate on using FULL_TRACING to get memory allocator stats?<br>\nI managed to get the timing information via:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> tensorflow.python.client <span class=\"pl-k\">import</span> timeline\nrun_options <span class=\"pl-k\">=</span> tf.RunOptions(<span class=\"pl-v\">trace_level</span><span class=\"pl-k\">=</span>tf.RunOptions.<span class=\"pl-c1\">FULL_TRACE</span>)\nrun_metadata <span class=\"pl-k\">=</span> tf.RunMetadata()\nsess.run(some_stuff, <span class=\"pl-v\">options</span><span class=\"pl-k\">=</span>run_options, <span class=\"pl-v\">run_metadata</span><span class=\"pl-k\">=</span>run_metadata)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> for visualization</span>\ntl <span class=\"pl-k\">=</span> timeline.Timeline(run_metadata.step_stats)\nctf <span class=\"pl-k\">=</span> tl.generate_chrome_trace_format()\n<span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>timeline.json<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>w<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n    f.write(ctf)</pre></div>\n<p>But how would I assess the memory allocation from <code>run_metadata</code>?</p>", "body_text": "@yaroslavvb : can you elaborate on using FULL_TRACING to get memory allocator stats?\nI managed to get the timing information via:\nfrom tensorflow.python.client import timeline\nrun_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\nrun_metadata = tf.RunMetadata()\nsess.run(some_stuff, options=run_options, run_metadata=run_metadata)\n\n# for visualization\ntl = timeline.Timeline(run_metadata.step_stats)\nctf = tl.generate_chrome_trace_format()\nwith open('timeline.json', 'w') as f:\n    f.write(ctf)\nBut how would I assess the memory allocation from run_metadata?", "body": "@yaroslavvb : can you elaborate on using FULL_TRACING to get memory allocator stats?\nI managed to get the timing information via:\n\n``` python\nfrom tensorflow.python.client import timeline\nrun_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\nrun_metadata = tf.RunMetadata()\nsess.run(some_stuff, options=run_options, run_metadata=run_metadata)\n\n# for visualization\ntl = timeline.Timeline(run_metadata.step_stats)\nctf = tl.generate_chrome_trace_format()\nwith open('timeline.json', 'w') as f:\n    f.write(ctf)\n```\n\nBut how would I assess the memory allocation from `run_metadata`?\n"}