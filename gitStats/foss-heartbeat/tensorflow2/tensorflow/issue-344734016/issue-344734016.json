{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21152", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21152/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21152/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21152/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21152", "id": 344734016, "node_id": "MDU6SXNzdWUzNDQ3MzQwMTY=", "number": 21152, "title": "Native TF operations drop Keras tensor metadata", "user": {"login": "metaluga145", "id": 9748910, "node_id": "MDQ6VXNlcjk3NDg5MTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/9748910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/metaluga145", "html_url": "https://github.com/metaluga145", "followers_url": "https://api.github.com/users/metaluga145/followers", "following_url": "https://api.github.com/users/metaluga145/following{/other_user}", "gists_url": "https://api.github.com/users/metaluga145/gists{/gist_id}", "starred_url": "https://api.github.com/users/metaluga145/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/metaluga145/subscriptions", "organizations_url": "https://api.github.com/users/metaluga145/orgs", "repos_url": "https://api.github.com/users/metaluga145/repos", "events_url": "https://api.github.com/users/metaluga145/events{/privacy}", "received_events_url": "https://api.github.com/users/metaluga145/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-07-26T07:54:47Z", "updated_at": "2018-08-30T22:51:21Z", "closed_at": "2018-08-30T22:51:21Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li>**OS Platform and Distribution: Ubuntu 16.04</li>\n<li><strong>Mobile device</strong>: N/A</li>\n<li><strong>TensorFlow installed from</strong>: from pip</li>\n<li><strong>TensorFlow version</strong>: ('v1.9.0-0-g25c197e023', '1.9.0')</li>\n<li><strong>Python version</strong>: 2.7.12</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA-9.0/cuDNN-7.1.4</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<pre><code>$ python\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Input\n\nx = Input((28, 28, 3))\ny = Input((28, 28, 3))\nz = x + y\n\nmodel = tf.keras.Model([x, y], z)\n</code></pre>\n<h3>Description</h3>\n<p>The code mentioned above throws the error (see logs). As it turned out, almost all native tf operations , such padding, convolution, etc., drop tensor metadata.</p>\n<p>I do understand that these operations can be replaced with similar Keras layers or wrapped with Lambda. However, since Keras is officially moved to tensorflow package, it would be nice to preserve tensor compatibility between tf and Keras.</p>\n<h3>Source code / logs</h3>\n<pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/home/oleg/tf/venv/local/lib/python2.7/site-packages/tensorflow/python/keras/engine/training.py\", line 111, in __init__\n    super(Model, self).__init__(*args, **kwargs)\n  File \"/home/oleg/tf/venv/local/lib/python2.7/site-packages/tensorflow/python/keras/engine/network.py\", line 78, in __init__\n    self._init_graph_network(*args, **kwargs)\n  File \"/home/oleg/tf/venv/local/lib/python2.7/site-packages/tensorflow/python/keras/engine/network.py\", line 201, in _init_graph_network\n    '(thus holding past layer metadata). Found: ' + str(x))\nValueError: Output tensors to a Model must be the output of a TensorFlow `Layer` (thus holding past layer metadata). Found: Tensor(\"add:0\", shape=(?, 28, 28, 3), dtype=float32)\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\n**OS Platform and Distribution: Ubuntu 16.04\nMobile device: N/A\nTensorFlow installed from: from pip\nTensorFlow version: ('v1.9.0-0-g25c197e023', '1.9.0')\nPython version: 2.7.12\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: CUDA-9.0/cuDNN-7.1.4\nGPU model and memory: N/A\nExact command to reproduce:\n\n$ python\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Input\n\nx = Input((28, 28, 3))\ny = Input((28, 28, 3))\nz = x + y\n\nmodel = tf.keras.Model([x, y], z)\n\nDescription\nThe code mentioned above throws the error (see logs). As it turned out, almost all native tf operations , such padding, convolution, etc., drop tensor metadata.\nI do understand that these operations can be replaced with similar Keras layers or wrapped with Lambda. However, since Keras is officially moved to tensorflow package, it would be nice to preserve tensor compatibility between tf and Keras.\nSource code / logs\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/oleg/tf/venv/local/lib/python2.7/site-packages/tensorflow/python/keras/engine/training.py\", line 111, in __init__\n    super(Model, self).__init__(*args, **kwargs)\n  File \"/home/oleg/tf/venv/local/lib/python2.7/site-packages/tensorflow/python/keras/engine/network.py\", line 78, in __init__\n    self._init_graph_network(*args, **kwargs)\n  File \"/home/oleg/tf/venv/local/lib/python2.7/site-packages/tensorflow/python/keras/engine/network.py\", line 201, in _init_graph_network\n    '(thus holding past layer metadata). Found: ' + str(x))\nValueError: Output tensors to a Model must be the output of a TensorFlow `Layer` (thus holding past layer metadata). Found: Tensor(\"add:0\", shape=(?, 28, 28, 3), dtype=float32)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution: Ubuntu 16.04\r\n- **Mobile device**: N/A\r\n- **TensorFlow installed from**: from pip\r\n- **TensorFlow version**: ('v1.9.0-0-g25c197e023', '1.9.0')\r\n- **Python version**: 2.7.12\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: CUDA-9.0/cuDNN-7.1.4\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**:\r\n\r\n```\r\n$ python\r\nimport tensorflow as tf\r\nfrom tensorflow.keras.layers import Input\r\n\r\nx = Input((28, 28, 3))\r\ny = Input((28, 28, 3))\r\nz = x + y\r\n\r\nmodel = tf.keras.Model([x, y], z)\r\n```\r\n\r\n### Description\r\nThe code mentioned above throws the error (see logs). As it turned out, almost all native tf operations , such padding, convolution, etc., drop tensor metadata.\r\n\r\nI do understand that these operations can be replaced with similar Keras layers or wrapped with Lambda. However, since Keras is officially moved to tensorflow package, it would be nice to preserve tensor compatibility between tf and Keras.\r\n\r\n### Source code / logs\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/oleg/tf/venv/local/lib/python2.7/site-packages/tensorflow/python/keras/engine/training.py\", line 111, in __init__\r\n    super(Model, self).__init__(*args, **kwargs)\r\n  File \"/home/oleg/tf/venv/local/lib/python2.7/site-packages/tensorflow/python/keras/engine/network.py\", line 78, in __init__\r\n    self._init_graph_network(*args, **kwargs)\r\n  File \"/home/oleg/tf/venv/local/lib/python2.7/site-packages/tensorflow/python/keras/engine/network.py\", line 201, in _init_graph_network\r\n    '(thus holding past layer metadata). Found: ' + str(x))\r\nValueError: Output tensors to a Model must be the output of a TensorFlow `Layer` (thus holding past layer metadata). Found: Tensor(\"add:0\", shape=(?, 28, 28, 3), dtype=float32)\r\n```\r\n"}