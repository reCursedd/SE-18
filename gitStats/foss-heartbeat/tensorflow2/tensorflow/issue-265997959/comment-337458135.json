{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/337458135", "html_url": "https://github.com/tensorflow/tensorflow/issues/13772#issuecomment-337458135", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13772", "id": 337458135, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzQ1ODEzNQ==", "user": {"login": "formath", "id": 6040127, "node_id": "MDQ6VXNlcjYwNDAxMjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/6040127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/formath", "html_url": "https://github.com/formath", "followers_url": "https://api.github.com/users/formath/followers", "following_url": "https://api.github.com/users/formath/following{/other_user}", "gists_url": "https://api.github.com/users/formath/gists{/gist_id}", "starred_url": "https://api.github.com/users/formath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/formath/subscriptions", "organizations_url": "https://api.github.com/users/formath/orgs", "repos_url": "https://api.github.com/users/formath/repos", "events_url": "https://api.github.com/users/formath/events{/privacy}", "received_events_url": "https://api.github.com/users/formath/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-18T04:36:44Z", "updated_at": "2017-10-20T04:42:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15696327\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/andydavis1\">@andydavis1</a><br>\nBecause the code is too much, I just put the core part here.</p>\n<p>During training, the inputs to <code>embedding_lookup_sparse</code> are <code>tf.int64</code>. It works fine. After training, the node info of <code>emb_179/embedding_lookup_sparse/strided_slice</code> is</p>\n<pre><code>node {\n  name: \"emb_179/embedding_lookup_sparse/strided_slice\"\n  op: \"StridedSlice\"\n  input: \"input/ParseExample/ParseExample:1\"\n  input: \"emb_179/embedding_lookup_sparse/strided_slice/stack\"\n  input: \"emb_179/embedding_lookup_sparse/strided_slice/stack_1\"\n  input: \"emb_179/embedding_lookup_sparse/strided_slice/stack_2\"\n  attr {\n    key: \"Index\"\n    value {\n      type: DT_INT32\n    }\n  }\n  attr {\n    key: \"T\"\n    value {\n      type: DT_INT64\n    }\n  }\n  attr {\n    key: \"begin_mask\"\n    value {\n      i: 1\n    }\n  }\n  attr {\n    key: \"ellipsis_mask\"\n    value {\n      i: 0\n    }\n  }\n  attr {\n    key: \"end_mask\"\n    value {\n      i: 1\n    }\n  }\n  attr {\n    key: \"new_axis_mask\"\n    value {\n      i: 0\n    }\n  }\n  attr {\n    key: \"shrink_axis_mask\"\n    value {\n      i: 2\n    }\n  }\n}\n</code></pre>\n<h2>python part for training</h2>\n<p>It works fine. Just show the core part here.</p>\n<pre><code>with tf.variable_scope('input/sparse_field'):\n  with tf.variable_scope('index'):\n    sparse_index = tf.placeholder(tf.int64)\n  with tf.variable_scope('id'):\n   sparse_id = tf.placeholder(tf.int64)\n   with tf.variable_scope('value'):\n    sparse_val = tf.placeholder(tf.float32)\n  with tf.variable_scope('shape'):\n    sparse_shape = tf.placeholder(tf.int64)\nwith tf.variable_scope('label'):\n  label = tf.placeholder(tf.float32)\nsparse_ids = tf.SparseTensor(sparse_index, sparse_id, sparse_shape)\nsparse_vals = tf.SparseTensor(sparse_index, sparse_val, sparse_shape)\n\ninput_size = 100\nembedding_size = 50\nwith tf.variable_scope(\"emb_179\"):\n  embedding_variable = tf.Variable(tf.truncated_normal([input_size, embedding_size], stddev=0.05), name='emb' + str(field_id))\n  embedding = tf.nn.embedding_lookup_sparse(embedding_variable, sparse_ids, sparse_vals, \"mod\", combiner=\"sum\")\n...\n</code></pre>\n<h2>c++ prediction demo</h2>\n<p>It load the graph and checkpoint successfully, but give an error in line <code>session.Run(...)</code> on node <code>emb_179/embedding_lookup_sparse/strided_slice</code>. The inputs shows here.</p>\n<pre><code>auto id_indice_tensor =\ntest::AsTensor&lt;int64&gt;(indice, {static_cast&lt;int64&gt;(indice.size()/2), 2});\ninputs.push_back(std::pair&lt;std::string, Tensor&gt;(\"input/sparse_field/index/Placeholder\", id_indice_tensor));\nauto id_list_tensor = test::AsTensor&lt;int64&gt;(fid_list);\ninputs.push_back(std::pair&lt;std::string, Tensor&gt;(\"input/sparse_field/id/Placeholder\", id_list_tensor));\nauto val_list_tensor = test::AsTensor&lt;float&gt;(fval_list);\ninputs.push_back(std::pair&lt;std::string, Tensor&gt;(\"input/sparse_field/value/Placeholder\", val_list_tensor));\n\nstd::vector&lt;tensorflow::Tensor&gt; outputs;\nStatus status = session-&gt;Run(inputs, {\"predict/add\"}, {}, &amp;outputs);\n</code></pre>\n<p>Maybe should register a type of <code>DT_INT64</code>.</p>", "body_text": "@andydavis1\nBecause the code is too much, I just put the core part here.\nDuring training, the inputs to embedding_lookup_sparse are tf.int64. It works fine. After training, the node info of emb_179/embedding_lookup_sparse/strided_slice is\nnode {\n  name: \"emb_179/embedding_lookup_sparse/strided_slice\"\n  op: \"StridedSlice\"\n  input: \"input/ParseExample/ParseExample:1\"\n  input: \"emb_179/embedding_lookup_sparse/strided_slice/stack\"\n  input: \"emb_179/embedding_lookup_sparse/strided_slice/stack_1\"\n  input: \"emb_179/embedding_lookup_sparse/strided_slice/stack_2\"\n  attr {\n    key: \"Index\"\n    value {\n      type: DT_INT32\n    }\n  }\n  attr {\n    key: \"T\"\n    value {\n      type: DT_INT64\n    }\n  }\n  attr {\n    key: \"begin_mask\"\n    value {\n      i: 1\n    }\n  }\n  attr {\n    key: \"ellipsis_mask\"\n    value {\n      i: 0\n    }\n  }\n  attr {\n    key: \"end_mask\"\n    value {\n      i: 1\n    }\n  }\n  attr {\n    key: \"new_axis_mask\"\n    value {\n      i: 0\n    }\n  }\n  attr {\n    key: \"shrink_axis_mask\"\n    value {\n      i: 2\n    }\n  }\n}\n\npython part for training\nIt works fine. Just show the core part here.\nwith tf.variable_scope('input/sparse_field'):\n  with tf.variable_scope('index'):\n    sparse_index = tf.placeholder(tf.int64)\n  with tf.variable_scope('id'):\n   sparse_id = tf.placeholder(tf.int64)\n   with tf.variable_scope('value'):\n    sparse_val = tf.placeholder(tf.float32)\n  with tf.variable_scope('shape'):\n    sparse_shape = tf.placeholder(tf.int64)\nwith tf.variable_scope('label'):\n  label = tf.placeholder(tf.float32)\nsparse_ids = tf.SparseTensor(sparse_index, sparse_id, sparse_shape)\nsparse_vals = tf.SparseTensor(sparse_index, sparse_val, sparse_shape)\n\ninput_size = 100\nembedding_size = 50\nwith tf.variable_scope(\"emb_179\"):\n  embedding_variable = tf.Variable(tf.truncated_normal([input_size, embedding_size], stddev=0.05), name='emb' + str(field_id))\n  embedding = tf.nn.embedding_lookup_sparse(embedding_variable, sparse_ids, sparse_vals, \"mod\", combiner=\"sum\")\n...\n\nc++ prediction demo\nIt load the graph and checkpoint successfully, but give an error in line session.Run(...) on node emb_179/embedding_lookup_sparse/strided_slice. The inputs shows here.\nauto id_indice_tensor =\ntest::AsTensor<int64>(indice, {static_cast<int64>(indice.size()/2), 2});\ninputs.push_back(std::pair<std::string, Tensor>(\"input/sparse_field/index/Placeholder\", id_indice_tensor));\nauto id_list_tensor = test::AsTensor<int64>(fid_list);\ninputs.push_back(std::pair<std::string, Tensor>(\"input/sparse_field/id/Placeholder\", id_list_tensor));\nauto val_list_tensor = test::AsTensor<float>(fval_list);\ninputs.push_back(std::pair<std::string, Tensor>(\"input/sparse_field/value/Placeholder\", val_list_tensor));\n\nstd::vector<tensorflow::Tensor> outputs;\nStatus status = session->Run(inputs, {\"predict/add\"}, {}, &outputs);\n\nMaybe should register a type of DT_INT64.", "body": "@andydavis1 \r\nBecause the code is too much, I just put the core part here.\r\n\r\nDuring training, the inputs to `embedding_lookup_sparse` are `tf.int64`. It works fine. After training, the node info of `emb_179/embedding_lookup_sparse/strided_slice` is \r\n```\r\nnode {\r\n  name: \"emb_179/embedding_lookup_sparse/strided_slice\"\r\n  op: \"StridedSlice\"\r\n  input: \"input/ParseExample/ParseExample:1\"\r\n  input: \"emb_179/embedding_lookup_sparse/strided_slice/stack\"\r\n  input: \"emb_179/embedding_lookup_sparse/strided_slice/stack_1\"\r\n  input: \"emb_179/embedding_lookup_sparse/strided_slice/stack_2\"\r\n  attr {\r\n    key: \"Index\"\r\n    value {\r\n      type: DT_INT32\r\n    }\r\n  }\r\n  attr {\r\n    key: \"T\"\r\n    value {\r\n      type: DT_INT64\r\n    }\r\n  }\r\n  attr {\r\n    key: \"begin_mask\"\r\n    value {\r\n      i: 1\r\n    }\r\n  }\r\n  attr {\r\n    key: \"ellipsis_mask\"\r\n    value {\r\n      i: 0\r\n    }\r\n  }\r\n  attr {\r\n    key: \"end_mask\"\r\n    value {\r\n      i: 1\r\n    }\r\n  }\r\n  attr {\r\n    key: \"new_axis_mask\"\r\n    value {\r\n      i: 0\r\n    }\r\n  }\r\n  attr {\r\n    key: \"shrink_axis_mask\"\r\n    value {\r\n      i: 2\r\n    }\r\n  }\r\n}\r\n```\r\n## python part for training\r\nIt works fine. Just show the core part here.\r\n```\r\nwith tf.variable_scope('input/sparse_field'):\r\n  with tf.variable_scope('index'):\r\n    sparse_index = tf.placeholder(tf.int64)\r\n  with tf.variable_scope('id'):\r\n   sparse_id = tf.placeholder(tf.int64)\r\n   with tf.variable_scope('value'):\r\n    sparse_val = tf.placeholder(tf.float32)\r\n  with tf.variable_scope('shape'):\r\n    sparse_shape = tf.placeholder(tf.int64)\r\nwith tf.variable_scope('label'):\r\n  label = tf.placeholder(tf.float32)\r\nsparse_ids = tf.SparseTensor(sparse_index, sparse_id, sparse_shape)\r\nsparse_vals = tf.SparseTensor(sparse_index, sparse_val, sparse_shape)\r\n\r\ninput_size = 100\r\nembedding_size = 50\r\nwith tf.variable_scope(\"emb_179\"):\r\n  embedding_variable = tf.Variable(tf.truncated_normal([input_size, embedding_size], stddev=0.05), name='emb' + str(field_id))\r\n  embedding = tf.nn.embedding_lookup_sparse(embedding_variable, sparse_ids, sparse_vals, \"mod\", combiner=\"sum\")\r\n...\r\n```\r\n\r\n## c++ prediction demo\r\nIt load the graph and checkpoint successfully, but give an error in line `session.Run(...)` on node `emb_179/embedding_lookup_sparse/strided_slice`. The inputs shows here.\r\n```\r\nauto id_indice_tensor =\r\ntest::AsTensor<int64>(indice, {static_cast<int64>(indice.size()/2), 2});\r\ninputs.push_back(std::pair<std::string, Tensor>(\"input/sparse_field/index/Placeholder\", id_indice_tensor));\r\nauto id_list_tensor = test::AsTensor<int64>(fid_list);\r\ninputs.push_back(std::pair<std::string, Tensor>(\"input/sparse_field/id/Placeholder\", id_list_tensor));\r\nauto val_list_tensor = test::AsTensor<float>(fval_list);\r\ninputs.push_back(std::pair<std::string, Tensor>(\"input/sparse_field/value/Placeholder\", val_list_tensor));\r\n\r\nstd::vector<tensorflow::Tensor> outputs;\r\nStatus status = session->Run(inputs, {\"predict/add\"}, {}, &outputs);\r\n```\r\n\r\nMaybe should register a type of `DT_INT64`."}