{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/338134581", "html_url": "https://github.com/tensorflow/tensorflow/issues/13772#issuecomment-338134581", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13772", "id": 338134581, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODEzNDU4MQ==", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-20T07:56:39Z", "updated_at": "2017-10-20T07:56:39Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6040127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/formath\">@formath</a> I see, the exception is raised when predicting. If I understand correctly, <code>TF_CALL_ALL_TYPES</code> will register all numerical types, including <code>TF_CALL_int64</code>, so I believe it is correct here. Perhaps there exists some limitation for prediction, say, int64 may be not supported now, I don't know.</p>", "body_text": "@formath I see, the exception is raised when predicting. If I understand correctly, TF_CALL_ALL_TYPES will register all numerical types, including TF_CALL_int64, so I believe it is correct here. Perhaps there exists some limitation for prediction, say, int64 may be not supported now, I don't know.", "body": "@formath I see, the exception is raised when predicting. If I understand correctly, `TF_CALL_ALL_TYPES` will register all numerical types, including `TF_CALL_int64`, so I believe it is correct here. Perhaps there exists some limitation for prediction, say, int64 may be not supported now, I don't know."}