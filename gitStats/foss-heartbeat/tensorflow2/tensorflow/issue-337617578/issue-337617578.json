{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20482", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20482/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20482/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20482/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20482", "id": 337617578, "node_id": "MDU6SXNzdWUzMzc2MTc1Nzg=", "number": 20482, "title": "Trouble replicating results using capi", "user": {"login": "nickblock", "id": 3998341, "node_id": "MDQ6VXNlcjM5OTgzNDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3998341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickblock", "html_url": "https://github.com/nickblock", "followers_url": "https://api.github.com/users/nickblock/followers", "following_url": "https://api.github.com/users/nickblock/following{/other_user}", "gists_url": "https://api.github.com/users/nickblock/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickblock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickblock/subscriptions", "organizations_url": "https://api.github.com/users/nickblock/orgs", "repos_url": "https://api.github.com/users/nickblock/repos", "events_url": "https://api.github.com/users/nickblock/events{/privacy}", "received_events_url": "https://api.github.com/users/nickblock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "angersson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angersson", "html_url": "https://github.com/angersson", "followers_url": "https://api.github.com/users/angersson/followers", "following_url": "https://api.github.com/users/angersson/following{/other_user}", "gists_url": "https://api.github.com/users/angersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angersson/subscriptions", "organizations_url": "https://api.github.com/users/angersson/orgs", "repos_url": "https://api.github.com/users/angersson/repos", "events_url": "https://api.github.com/users/angersson/events{/privacy}", "received_events_url": "https://api.github.com/users/angersson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "angersson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angersson", "html_url": "https://github.com/angersson", "followers_url": "https://api.github.com/users/angersson/followers", "following_url": "https://api.github.com/users/angersson/following{/other_user}", "gists_url": "https://api.github.com/users/angersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angersson/subscriptions", "organizations_url": "https://api.github.com/users/angersson/orgs", "repos_url": "https://api.github.com/users/angersson/repos", "events_url": "https://api.github.com/users/angersson/events{/privacy}", "received_events_url": "https://api.github.com/users/angersson/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-07-02T18:23:32Z", "updated_at": "2018-07-10T08:37:49Z", "closed_at": "2018-07-09T20:34:09Z", "author_association": "NONE", "body_html": "<p>I have written minimal code in both python and using the capi. This code loads a premade graph and runs a test image through it. I cannot seem to get the same results using the capi as I get running through python.<br>\nLinux Ubuntu 16.04<br>\nI have both installed tf and built the library using bazel.<br>\nI haqve tried various versions but for this experiment am fixing on 1.9.<br>\nPython 3.5.2<br>\nbazel 0.13.0<br>\ngcc 5.4<br>\nno cuda</p>\n<p>I am trying to run the graph \"ssd_mobilenet_v1_android_export.pb\" given with the android mobile examples.</p>\n<p>I am using this test image <a href=\"https://github.com/pjreddie/darknet/raw/master/data/dog.jpg\">https://github.com/pjreddie/darknet/raw/master/data/dog.jpg</a></p>\n<p>I have simple python code (code below), that loads the graph, feeds the image to it and reads back various tensors. This graph has an op at the end called \"num_detections\", I am reading the tensor at this point to check for success.<br>\nWith the dog.jpg I get a \"3.0\" result. Other test images give appropriate results.</p>\n<p>I am repeating this experiment with the capi (code below), but the only result I ever get is zero.<br>\nThe first obvious place I looked is my image input. The second graph op is a \"ToFloat\" operation. I have been using that to check the values of the pixel data going into the feed. They are identical. I checked the image is not flipped and the color channels are in the same order after decoding. I then started looking further up the graph, sampling values of the tensors at each op. I find they are mostly the same until they get to a long list of convolution ops where it seems the values slowly diverge - like they are the same the first couple of ops then start to show differences getting further and further apart.</p>\n<p>Not working capi code:</p>\n<pre><code>\n#include &lt;png.hpp&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;tensorflow/c/c_api.h&gt;\n\ntypedef unsigned char byte; \n\nconst int num_channels = 3;\n\nstruct Image {\n  byte* data;\n  int width, height;\n  int dataSize() {\n    return width * height * num_channels;\n  }\n};\n\nImage open_image(const char* filename) {\n\n  Image image;\n  int dataSize = image.width * image.height * num_channels;\n\n  png::image&lt; png::rgb_pixel &gt; png_import(filename);\n  image.width = png_import.get_width();\n  image.height = png_import.get_height();\n  image.data = (byte*)malloc(image.dataSize());\n  for(int y=0; y&lt;image.height; y++) {\n    for(int x=0; x&lt;image.width; x++) {\n      png::rgb_pixel pixel = png_import.get_pixel(x,y);\n      byte* data = &amp;image.data[(y*image.width+x)*num_channels];\n      *data++ = pixel.red;\n      *data++ = pixel.green;\n      *data++ = pixel.blue;\n    }\n  }\n\n  printf(\"%s loaded, %dx%d\\n\", filename, image.width, image.height);\n  return image;\n}\n\nTF_Graph* open_graph(const char* filename, TF_Status* status) {\n\n  TF_Graph* graph = TF_NewGraph();\n\n  TF_ImportGraphDefOptions* opts = TF_NewImportGraphDefOptions();\n\n  FILE* fp = fopen(filename, \"r\");\n\n  fseek(fp, 0L, SEEK_END);\n  int file_size = ftell(fp);\n  rewind(fp);\n\n  char* graph_content = (char*)malloc(file_size);\n\n  fread(graph_content, file_size, 1, fp);\n  fclose(fp);\n\n  TF_Buffer tfBuffer;\n  tfBuffer.data = graph_content;\n  tfBuffer.length = file_size;\n  \n  TF_GraphImportGraphDef(graph, &amp;tfBuffer, opts, status);\n\n  free(graph_content);\n\n  if(TF_GetCode(status) != TF_OK) {\n\n    printf(\"%s\\n\", TF_Message(status));\n    return 0;\n  }\n\n  printf(\"Successfully loaded graph\\n\");\n\n  return graph;\n}\nvoid TensorDeallocator(void* data, size_t len, void* arg)\n{\n\n}\n\n\nint main(int argi, char** argc) {\n\n  printf(\"TensorFlow C library version %s\\n\", TF_Version());\n\n  TF_Status* status = TF_NewStatus();\n  TF_Graph* graph = open_graph(argc[1], status);\n\n  Image image = open_image(argc[2]);\n\n  int64_t dims[] = {1, image.width, image.height, num_channels};\n  \n  TF_Tensor* image_tensor = TF_NewTensor(\n    TF_UINT8, dims, 4, \n    image.data, image.dataSize(), \n    TensorDeallocator, 0\n  );\n\n  TF_Operation* input_image_op = TF_GraphOperationByName(graph, \"image_tensor\");\n  if(!input_image_op) {\n    printf(\"Failed to find Op '%s'\", \"image_tensor\");\n    return 1;\n  }\n\n  TF_Output image_input;\n  image_input.oper = input_image_op;\n  image_input.index = 0;\n  TF_Output inputs[1] = {image_input};\n\n  TF_Operation* num_detection_op = TF_GraphOperationByName(graph, \"num_detections\");\n  if(!num_detection_op) {\n    printf(\"Failed to find Op '%s'\", \"num_detections\");\n    return 1;\n  }\n  TF_Output num_detection_output;\n  num_detection_output.oper = num_detection_op;\n  num_detection_output.index = 0;\n\n  TF_Output outputs[1] = {num_detection_output};\n  TF_Tensor* output_tensors[1];\n\n  TF_SessionOptions * options = TF_NewSessionOptions();\n  TF_Session* session = TF_NewSession( graph, options, status );\n\n  TF_SessionRun(session, 0, \n                &amp;image_input, &amp;image_tensor, 1,\n                outputs, output_tensors, 1,\n                0, 0,\n                0, status\n                );\n\n  if(TF_GetCode(status) != TF_OK) {\n\n    printf(\"%s\\n\", TF_Message(status));\n  }\n  else {\n      \n    printf(\"Ran successfully\\n\");\n\n    float* f = (float*)TF_TensorData(output_tensors[0]);\n\n    printf(\"TF data %f\\n\", f[0]);\n\n  }\n  \n  free(image.data);\n\n  return 0;\n}\n\n\n```\n\n\nWorking python code:\n\n\n```\nimport data_helpers\nimport sys\nimport tensorflow as tf\nimport numpy as np\n\n\nfrom tensorflow.python.platform import gfile\nfrom tensorflow.python.util import compat\nfrom tensorflow.core.protobuf import saved_model_pb2\n\ndef read_graph(model_filename):\n\n    with gfile.FastGFile(model_filename, 'rb') as f:\n\n        graph_def = tf.GraphDef()\n        graph_def.ParseFromString(f.read())\n        g_in = tf.import_graph_def(graph_def)\n\n        return g_in\n\n\ndef printOps():\n\n    for op in tf.get_default_graph().get_operations():\n\n        print(op.name)\n\nif __name__ == \"__main__\":\n    \n    if len(sys.argv) &lt; 3:\n        print(\"Usage: run_image_on_graph.py [input graph filepath] [output image filepath]\")\n        exit(1)\n\n    graph_file = sys.argv[1]\n    image_file = sys.argv[2]\n\n    image = data_helpers.import_image(image_file)\n\n    with tf.Session() as sess:\n\n        read_graph(graph_file)\n\n        graph = tf.get_default_graph()\n\n        image_tensor = graph.get_tensor_by_name(\"import/image_tensor:0\")\n        num_detections = graph.get_tensor_by_name(\"import/num_detections:0\")\n        detection_scores = graph.get_tensor_by_name(\"import/detection_scores:0\")\n        detection_boxes = graph.get_tensor_by_name(\"import/detection_boxes:0\")\n        debug = graph.get_tensor_by_name(\"import/ToFloat:0\")\n\n        image = np.array([data_helpers.import_image(image_file)])\n\n        print(\"sess = \" + str(sess.run([num_detections], feed_dict={\n            image_tensor: image})\n        ))\n      \n```\n   \n\nIs there anything obviously wrong with my approach?\n</code></pre>", "body_text": "I have written minimal code in both python and using the capi. This code loads a premade graph and runs a test image through it. I cannot seem to get the same results using the capi as I get running through python.\nLinux Ubuntu 16.04\nI have both installed tf and built the library using bazel.\nI haqve tried various versions but for this experiment am fixing on 1.9.\nPython 3.5.2\nbazel 0.13.0\ngcc 5.4\nno cuda\nI am trying to run the graph \"ssd_mobilenet_v1_android_export.pb\" given with the android mobile examples.\nI am using this test image https://github.com/pjreddie/darknet/raw/master/data/dog.jpg\nI have simple python code (code below), that loads the graph, feeds the image to it and reads back various tensors. This graph has an op at the end called \"num_detections\", I am reading the tensor at this point to check for success.\nWith the dog.jpg I get a \"3.0\" result. Other test images give appropriate results.\nI am repeating this experiment with the capi (code below), but the only result I ever get is zero.\nThe first obvious place I looked is my image input. The second graph op is a \"ToFloat\" operation. I have been using that to check the values of the pixel data going into the feed. They are identical. I checked the image is not flipped and the color channels are in the same order after decoding. I then started looking further up the graph, sampling values of the tensors at each op. I find they are mostly the same until they get to a long list of convolution ops where it seems the values slowly diverge - like they are the same the first couple of ops then start to show differences getting further and further apart.\nNot working capi code:\n\n#include <png.hpp>\n#include <stdlib.h>\n#include <stdio.h>\n#include <tensorflow/c/c_api.h>\n\ntypedef unsigned char byte; \n\nconst int num_channels = 3;\n\nstruct Image {\n  byte* data;\n  int width, height;\n  int dataSize() {\n    return width * height * num_channels;\n  }\n};\n\nImage open_image(const char* filename) {\n\n  Image image;\n  int dataSize = image.width * image.height * num_channels;\n\n  png::image< png::rgb_pixel > png_import(filename);\n  image.width = png_import.get_width();\n  image.height = png_import.get_height();\n  image.data = (byte*)malloc(image.dataSize());\n  for(int y=0; y<image.height; y++) {\n    for(int x=0; x<image.width; x++) {\n      png::rgb_pixel pixel = png_import.get_pixel(x,y);\n      byte* data = &image.data[(y*image.width+x)*num_channels];\n      *data++ = pixel.red;\n      *data++ = pixel.green;\n      *data++ = pixel.blue;\n    }\n  }\n\n  printf(\"%s loaded, %dx%d\\n\", filename, image.width, image.height);\n  return image;\n}\n\nTF_Graph* open_graph(const char* filename, TF_Status* status) {\n\n  TF_Graph* graph = TF_NewGraph();\n\n  TF_ImportGraphDefOptions* opts = TF_NewImportGraphDefOptions();\n\n  FILE* fp = fopen(filename, \"r\");\n\n  fseek(fp, 0L, SEEK_END);\n  int file_size = ftell(fp);\n  rewind(fp);\n\n  char* graph_content = (char*)malloc(file_size);\n\n  fread(graph_content, file_size, 1, fp);\n  fclose(fp);\n\n  TF_Buffer tfBuffer;\n  tfBuffer.data = graph_content;\n  tfBuffer.length = file_size;\n  \n  TF_GraphImportGraphDef(graph, &tfBuffer, opts, status);\n\n  free(graph_content);\n\n  if(TF_GetCode(status) != TF_OK) {\n\n    printf(\"%s\\n\", TF_Message(status));\n    return 0;\n  }\n\n  printf(\"Successfully loaded graph\\n\");\n\n  return graph;\n}\nvoid TensorDeallocator(void* data, size_t len, void* arg)\n{\n\n}\n\n\nint main(int argi, char** argc) {\n\n  printf(\"TensorFlow C library version %s\\n\", TF_Version());\n\n  TF_Status* status = TF_NewStatus();\n  TF_Graph* graph = open_graph(argc[1], status);\n\n  Image image = open_image(argc[2]);\n\n  int64_t dims[] = {1, image.width, image.height, num_channels};\n  \n  TF_Tensor* image_tensor = TF_NewTensor(\n    TF_UINT8, dims, 4, \n    image.data, image.dataSize(), \n    TensorDeallocator, 0\n  );\n\n  TF_Operation* input_image_op = TF_GraphOperationByName(graph, \"image_tensor\");\n  if(!input_image_op) {\n    printf(\"Failed to find Op '%s'\", \"image_tensor\");\n    return 1;\n  }\n\n  TF_Output image_input;\n  image_input.oper = input_image_op;\n  image_input.index = 0;\n  TF_Output inputs[1] = {image_input};\n\n  TF_Operation* num_detection_op = TF_GraphOperationByName(graph, \"num_detections\");\n  if(!num_detection_op) {\n    printf(\"Failed to find Op '%s'\", \"num_detections\");\n    return 1;\n  }\n  TF_Output num_detection_output;\n  num_detection_output.oper = num_detection_op;\n  num_detection_output.index = 0;\n\n  TF_Output outputs[1] = {num_detection_output};\n  TF_Tensor* output_tensors[1];\n\n  TF_SessionOptions * options = TF_NewSessionOptions();\n  TF_Session* session = TF_NewSession( graph, options, status );\n\n  TF_SessionRun(session, 0, \n                &image_input, &image_tensor, 1,\n                outputs, output_tensors, 1,\n                0, 0,\n                0, status\n                );\n\n  if(TF_GetCode(status) != TF_OK) {\n\n    printf(\"%s\\n\", TF_Message(status));\n  }\n  else {\n      \n    printf(\"Ran successfully\\n\");\n\n    float* f = (float*)TF_TensorData(output_tensors[0]);\n\n    printf(\"TF data %f\\n\", f[0]);\n\n  }\n  \n  free(image.data);\n\n  return 0;\n}\n\n\n```\n\n\nWorking python code:\n\n\n```\nimport data_helpers\nimport sys\nimport tensorflow as tf\nimport numpy as np\n\n\nfrom tensorflow.python.platform import gfile\nfrom tensorflow.python.util import compat\nfrom tensorflow.core.protobuf import saved_model_pb2\n\ndef read_graph(model_filename):\n\n    with gfile.FastGFile(model_filename, 'rb') as f:\n\n        graph_def = tf.GraphDef()\n        graph_def.ParseFromString(f.read())\n        g_in = tf.import_graph_def(graph_def)\n\n        return g_in\n\n\ndef printOps():\n\n    for op in tf.get_default_graph().get_operations():\n\n        print(op.name)\n\nif __name__ == \"__main__\":\n    \n    if len(sys.argv) < 3:\n        print(\"Usage: run_image_on_graph.py [input graph filepath] [output image filepath]\")\n        exit(1)\n\n    graph_file = sys.argv[1]\n    image_file = sys.argv[2]\n\n    image = data_helpers.import_image(image_file)\n\n    with tf.Session() as sess:\n\n        read_graph(graph_file)\n\n        graph = tf.get_default_graph()\n\n        image_tensor = graph.get_tensor_by_name(\"import/image_tensor:0\")\n        num_detections = graph.get_tensor_by_name(\"import/num_detections:0\")\n        detection_scores = graph.get_tensor_by_name(\"import/detection_scores:0\")\n        detection_boxes = graph.get_tensor_by_name(\"import/detection_boxes:0\")\n        debug = graph.get_tensor_by_name(\"import/ToFloat:0\")\n\n        image = np.array([data_helpers.import_image(image_file)])\n\n        print(\"sess = \" + str(sess.run([num_detections], feed_dict={\n            image_tensor: image})\n        ))\n      \n```\n   \n\nIs there anything obviously wrong with my approach?", "body": " I have written minimal code in both python and using the capi. This code loads a premade graph and runs a test image through it. I cannot seem to get the same results using the capi as I get running through python.\r\nLinux Ubuntu 16.04\r\nI have both installed tf and built the library using bazel.\r\nI haqve tried various versions but for this experiment am fixing on 1.9.\r\nPython 3.5.2\r\nbazel 0.13.0\r\ngcc 5.4\r\nno cuda\r\n\r\nI am trying to run the graph \"ssd_mobilenet_v1_android_export.pb\" given with the android mobile examples.\r\n\r\nI am using this test image https://github.com/pjreddie/darknet/raw/master/data/dog.jpg\r\n\r\nI have simple python code (code below), that loads the graph, feeds the image to it and reads back various tensors. This graph has an op at the end called \"num_detections\", I am reading the tensor at this point to check for success.\r\nWith the dog.jpg I get a \"3.0\" result. Other test images give appropriate results. \r\n\r\nI am repeating this experiment with the capi (code below), but the only result I ever get is zero. \r\nThe first obvious place I looked is my image input. The second graph op is a \"ToFloat\" operation. I have been using that to check the values of the pixel data going into the feed. They are identical. I checked the image is not flipped and the color channels are in the same order after decoding. I then started looking further up the graph, sampling values of the tensors at each op. I find they are mostly the same until they get to a long list of convolution ops where it seems the values slowly diverge - like they are the same the first couple of ops then start to show differences getting further and further apart.\r\n\r\nNot working capi code:\r\n\r\n````\r\n\r\n#include <png.hpp>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <tensorflow/c/c_api.h>\r\n\r\ntypedef unsigned char byte; \r\n\r\nconst int num_channels = 3;\r\n\r\nstruct Image {\r\n  byte* data;\r\n  int width, height;\r\n  int dataSize() {\r\n    return width * height * num_channels;\r\n  }\r\n};\r\n\r\nImage open_image(const char* filename) {\r\n\r\n  Image image;\r\n  int dataSize = image.width * image.height * num_channels;\r\n\r\n  png::image< png::rgb_pixel > png_import(filename);\r\n  image.width = png_import.get_width();\r\n  image.height = png_import.get_height();\r\n  image.data = (byte*)malloc(image.dataSize());\r\n  for(int y=0; y<image.height; y++) {\r\n    for(int x=0; x<image.width; x++) {\r\n      png::rgb_pixel pixel = png_import.get_pixel(x,y);\r\n      byte* data = &image.data[(y*image.width+x)*num_channels];\r\n      *data++ = pixel.red;\r\n      *data++ = pixel.green;\r\n      *data++ = pixel.blue;\r\n    }\r\n  }\r\n\r\n  printf(\"%s loaded, %dx%d\\n\", filename, image.width, image.height);\r\n  return image;\r\n}\r\n\r\nTF_Graph* open_graph(const char* filename, TF_Status* status) {\r\n\r\n  TF_Graph* graph = TF_NewGraph();\r\n\r\n  TF_ImportGraphDefOptions* opts = TF_NewImportGraphDefOptions();\r\n\r\n  FILE* fp = fopen(filename, \"r\");\r\n\r\n  fseek(fp, 0L, SEEK_END);\r\n  int file_size = ftell(fp);\r\n  rewind(fp);\r\n\r\n  char* graph_content = (char*)malloc(file_size);\r\n\r\n  fread(graph_content, file_size, 1, fp);\r\n  fclose(fp);\r\n\r\n  TF_Buffer tfBuffer;\r\n  tfBuffer.data = graph_content;\r\n  tfBuffer.length = file_size;\r\n  \r\n  TF_GraphImportGraphDef(graph, &tfBuffer, opts, status);\r\n\r\n  free(graph_content);\r\n\r\n  if(TF_GetCode(status) != TF_OK) {\r\n\r\n    printf(\"%s\\n\", TF_Message(status));\r\n    return 0;\r\n  }\r\n\r\n  printf(\"Successfully loaded graph\\n\");\r\n\r\n  return graph;\r\n}\r\nvoid TensorDeallocator(void* data, size_t len, void* arg)\r\n{\r\n\r\n}\r\n\r\n\r\nint main(int argi, char** argc) {\r\n\r\n  printf(\"TensorFlow C library version %s\\n\", TF_Version());\r\n\r\n  TF_Status* status = TF_NewStatus();\r\n  TF_Graph* graph = open_graph(argc[1], status);\r\n\r\n  Image image = open_image(argc[2]);\r\n\r\n  int64_t dims[] = {1, image.width, image.height, num_channels};\r\n  \r\n  TF_Tensor* image_tensor = TF_NewTensor(\r\n    TF_UINT8, dims, 4, \r\n    image.data, image.dataSize(), \r\n    TensorDeallocator, 0\r\n  );\r\n\r\n  TF_Operation* input_image_op = TF_GraphOperationByName(graph, \"image_tensor\");\r\n  if(!input_image_op) {\r\n    printf(\"Failed to find Op '%s'\", \"image_tensor\");\r\n    return 1;\r\n  }\r\n\r\n  TF_Output image_input;\r\n  image_input.oper = input_image_op;\r\n  image_input.index = 0;\r\n  TF_Output inputs[1] = {image_input};\r\n\r\n  TF_Operation* num_detection_op = TF_GraphOperationByName(graph, \"num_detections\");\r\n  if(!num_detection_op) {\r\n    printf(\"Failed to find Op '%s'\", \"num_detections\");\r\n    return 1;\r\n  }\r\n  TF_Output num_detection_output;\r\n  num_detection_output.oper = num_detection_op;\r\n  num_detection_output.index = 0;\r\n\r\n  TF_Output outputs[1] = {num_detection_output};\r\n  TF_Tensor* output_tensors[1];\r\n\r\n  TF_SessionOptions * options = TF_NewSessionOptions();\r\n  TF_Session* session = TF_NewSession( graph, options, status );\r\n\r\n  TF_SessionRun(session, 0, \r\n                &image_input, &image_tensor, 1,\r\n                outputs, output_tensors, 1,\r\n                0, 0,\r\n                0, status\r\n                );\r\n\r\n  if(TF_GetCode(status) != TF_OK) {\r\n\r\n    printf(\"%s\\n\", TF_Message(status));\r\n  }\r\n  else {\r\n      \r\n    printf(\"Ran successfully\\n\");\r\n\r\n    float* f = (float*)TF_TensorData(output_tensors[0]);\r\n\r\n    printf(\"TF data %f\\n\", f[0]);\r\n\r\n  }\r\n  \r\n  free(image.data);\r\n\r\n  return 0;\r\n}\r\n\r\n\r\n```\r\n\r\n\r\nWorking python code:\r\n\r\n\r\n```\r\nimport data_helpers\r\nimport sys\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\n\r\nfrom tensorflow.python.platform import gfile\r\nfrom tensorflow.python.util import compat\r\nfrom tensorflow.core.protobuf import saved_model_pb2\r\n\r\ndef read_graph(model_filename):\r\n\r\n    with gfile.FastGFile(model_filename, 'rb') as f:\r\n\r\n        graph_def = tf.GraphDef()\r\n        graph_def.ParseFromString(f.read())\r\n        g_in = tf.import_graph_def(graph_def)\r\n\r\n        return g_in\r\n\r\n\r\ndef printOps():\r\n\r\n    for op in tf.get_default_graph().get_operations():\r\n\r\n        print(op.name)\r\n\r\nif __name__ == \"__main__\":\r\n    \r\n    if len(sys.argv) < 3:\r\n        print(\"Usage: run_image_on_graph.py [input graph filepath] [output image filepath]\")\r\n        exit(1)\r\n\r\n    graph_file = sys.argv[1]\r\n    image_file = sys.argv[2]\r\n\r\n    image = data_helpers.import_image(image_file)\r\n\r\n    with tf.Session() as sess:\r\n\r\n        read_graph(graph_file)\r\n\r\n        graph = tf.get_default_graph()\r\n\r\n        image_tensor = graph.get_tensor_by_name(\"import/image_tensor:0\")\r\n        num_detections = graph.get_tensor_by_name(\"import/num_detections:0\")\r\n        detection_scores = graph.get_tensor_by_name(\"import/detection_scores:0\")\r\n        detection_boxes = graph.get_tensor_by_name(\"import/detection_boxes:0\")\r\n        debug = graph.get_tensor_by_name(\"import/ToFloat:0\")\r\n\r\n        image = np.array([data_helpers.import_image(image_file)])\r\n\r\n        print(\"sess = \" + str(sess.run([num_detections], feed_dict={\r\n            image_tensor: image})\r\n        ))\r\n      \r\n```\r\n   \r\n\r\nIs there anything obviously wrong with my approach?"}