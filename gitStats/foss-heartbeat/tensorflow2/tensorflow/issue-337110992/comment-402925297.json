{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/402925297", "html_url": "https://github.com/tensorflow/tensorflow/issues/20426#issuecomment-402925297", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20426", "id": 402925297, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjkyNTI5Nw==", "user": {"login": "datlife", "id": 13214917, "node_id": "MDQ6VXNlcjEzMjE0OTE3", "avatar_url": "https://avatars0.githubusercontent.com/u/13214917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datlife", "html_url": "https://github.com/datlife", "followers_url": "https://api.github.com/users/datlife/followers", "following_url": "https://api.github.com/users/datlife/following{/other_user}", "gists_url": "https://api.github.com/users/datlife/gists{/gist_id}", "starred_url": "https://api.github.com/users/datlife/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datlife/subscriptions", "organizations_url": "https://api.github.com/users/datlife/orgs", "repos_url": "https://api.github.com/users/datlife/repos", "events_url": "https://api.github.com/users/datlife/events{/privacy}", "received_events_url": "https://api.github.com/users/datlife/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-06T04:54:11Z", "updated_at": "2018-07-06T05:03:28Z", "author_association": "NONE", "body_html": "<p>Gently ping <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1112263\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/facaiy\">@facaiy</a>  and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1710528\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bhack\">@bhack</a> for feedback on this issue. Thanks!</p>\n<ul>\n<li>\n<p>It seems that keras <code>Layer</code> generate its <code>self.name</code> using <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/engine/base_layer.py#L199\"><code>unique_layer_name</code></a>, which currently does not use <code>variable_scope</code>. During  <code>tf.keras.Model</code> construction, it simply checks whether there is any layer <code>self.name</code> is duplicated.</p>\n</li>\n<li>\n<p>Is it possible to come up a new naming method for keras <code>Layer</code>  that is consistent with<br>\n<code>variable_scope</code>, and not always using <code>_1</code> and <code>_2</code> for duplicated layers unless they are in the same scope? It might solve this issue <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"292028082\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/16468\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/16468/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/16468\">#16468</a> , too.</p>\n</li>\n</ul>", "body_text": "Gently ping @facaiy  and @bhack for feedback on this issue. Thanks!\n\n\nIt seems that keras Layer generate its self.name using unique_layer_name, which currently does not use variable_scope. During  tf.keras.Model construction, it simply checks whether there is any layer self.name is duplicated.\n\n\nIs it possible to come up a new naming method for keras Layer  that is consistent with\nvariable_scope, and not always using _1 and _2 for duplicated layers unless they are in the same scope? It might solve this issue #16468 , too.", "body": "Gently ping @facaiy  and @bhack for feedback on this issue. Thanks!\r\n\r\n* It seems that keras `Layer` generate its `self.name` using [`unique_layer_name`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/engine/base_layer.py#L199), which currently does not use `variable_scope`. During  `tf.keras.Model` construction, it simply checks whether there is any layer `self.name` is duplicated.\r\n \r\n* Is it possible to come up a new naming method for keras `Layer`  that is consistent with \r\n`variable_scope`, and not always using `_1` and `_2` for duplicated layers unless they are in the same scope? It might solve this issue https://github.com/tensorflow/tensorflow/issues/16468 , too."}