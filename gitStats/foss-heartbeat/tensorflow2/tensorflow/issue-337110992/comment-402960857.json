{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/402960857", "html_url": "https://github.com/tensorflow/tensorflow/issues/20426#issuecomment-402960857", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20426", "id": 402960857, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjk2MDg1Nw==", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-06T08:10:46Z", "updated_at": "2018-07-06T08:21:55Z", "author_association": "MEMBER", "body_html": "<p>How about this?</p>\n<ol>\n<li>use name_scope and leave <code>name</code> attribute empty:</li>\n</ol>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">conv_block</span>(<span class=\"pl-smi\">inputs</span>, <span class=\"pl-smi\">filters</span>, <span class=\"pl-smi\">kernel_size</span>, <span class=\"pl-smi\">strides</span>, <span class=\"pl-smi\">scope</span>):\n  <span class=\"pl-s\"><span class=\"pl-pds\">'''</span>Create a simple Conv --&gt; BN --&gt; ReLU6 block<span class=\"pl-pds\">'''</span></span>\n\n  <span class=\"pl-k\">with</span> tf.name_scope(scope):\n    x <span class=\"pl-k\">=</span> tf.keras.layers.Conv2D(filters, kernel_size, strides)(inputs)\n    x <span class=\"pl-k\">=</span> tf.keras.layers.BatchNormalization()(x)\n    x <span class=\"pl-k\">=</span> tf.keras.layers.Activation(tf.nn.relu6)(x)\n    <span class=\"pl-k\">return</span> x\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n  inputs <span class=\"pl-k\">=</span> tf.keras.Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">224</span>, <span class=\"pl-c1\">224</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>inputs<span class=\"pl-pds\">'</span></span>)\n  hidden <span class=\"pl-k\">=</span> conv_block(inputs, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-v\">scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>block_1<span class=\"pl-pds\">'</span></span>)\n  outputs <span class=\"pl-k\">=</span> conv_block(hidden, <span class=\"pl-c1\">64</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-v\">scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>block_2<span class=\"pl-pds\">'</span></span>)\n\n  model <span class=\"pl-k\">=</span> tf.keras.Model(inputs, outputs)\n  model.summary()</pre></div>\n<pre><code>_________________________________________________________________\nLayer (type)                 Output Shape              Param #\n=================================================================\ninputs (InputLayer)          (1, 224, 224, 3)          0\n_________________________________________________________________\nconv2d (Conv2D)              (1, 111, 111, 32)         896\n_________________________________________________________________\nbatch_normalization (BatchNo (1, 111, 111, 32)         128\n_________________________________________________________________\nactivation (Activation)      (1, 111, 111, 32)         0\n_________________________________________________________________\nconv2d_1 (Conv2D)            (1, 55, 55, 64)           18496\n_________________________________________________________________\nbatch_normalization_1 (Batch (1, 55, 55, 64)           256\n_________________________________________________________________\nactivation_1 (Activation)    (1, 55, 55, 64)           0\n=================================================================\nTotal params: 19,776\nTrainable params: 19,584\nNon-trainable params: 192\n_________________________________________________________________\n</code></pre>\n<ol start=\"2\">\n<li>or, custom name:</li>\n</ol>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">conv_block</span>(<span class=\"pl-smi\">inputs</span>, <span class=\"pl-smi\">filters</span>, <span class=\"pl-smi\">kernel_size</span>, <span class=\"pl-smi\">strides</span>, <span class=\"pl-smi\">scope</span>):\n  <span class=\"pl-s\"><span class=\"pl-pds\">'''</span>Create a simple Conv --&gt; BN --&gt; ReLU6 block<span class=\"pl-pds\">'''</span></span>\n\n  x <span class=\"pl-k\">=</span> tf.keras.layers.Conv2D(filters, kernel_size, strides, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>scope<span class=\"pl-k\">+</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>_conv2d<span class=\"pl-pds\">'</span></span>)(inputs)\n  x <span class=\"pl-k\">=</span> tf.keras.layers.BatchNormalization(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>scope<span class=\"pl-k\">+</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>_BN<span class=\"pl-pds\">'</span></span>)(x)\n  x <span class=\"pl-k\">=</span> tf.keras.layers.Activation(tf.nn.relu6, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>scope<span class=\"pl-k\">+</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>_relu<span class=\"pl-pds\">'</span></span>)(x)\n  <span class=\"pl-k\">return</span> x\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n  inputs <span class=\"pl-k\">=</span> tf.keras.Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">224</span>, <span class=\"pl-c1\">224</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>inputs<span class=\"pl-pds\">'</span></span>)\n  hidden <span class=\"pl-k\">=</span> conv_block(inputs, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-v\">scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>block_1<span class=\"pl-pds\">'</span></span>)\n  outputs <span class=\"pl-k\">=</span> conv_block(hidden, <span class=\"pl-c1\">64</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-v\">scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>block_2<span class=\"pl-pds\">'</span></span>)\n\n  model <span class=\"pl-k\">=</span> tf.keras.Model(inputs, outputs)\n  model.summary()</pre></div>\n<pre><code>_________________________________________________________________\nLayer (type)                 Output Shape              Param #\n=================================================================\ninputs (InputLayer)          (1, 224, 224, 3)          0\n_________________________________________________________________\nblock_1_conv2d (Conv2D)      (1, 111, 111, 32)         896\n_________________________________________________________________\nblock_1_BN (BatchNormalizati (1, 111, 111, 32)         128\n_________________________________________________________________\nblock_1_relu (Activation)    (1, 111, 111, 32)         0\n_________________________________________________________________\nblock_2_conv2d (Conv2D)      (1, 55, 55, 64)           18496\n_________________________________________________________________\nblock_2_BN (BatchNormalizati (1, 55, 55, 64)           256\n_________________________________________________________________\nblock_2_relu (Activation)    (1, 55, 55, 64)           0\n=================================================================\nTotal params: 19,776\nTrainable params: 19,584\nNon-trainable params: 192\n_________________________________________________________________\n</code></pre>", "body_text": "How about this?\n\nuse name_scope and leave name attribute empty:\n\nimport tensorflow as tf\n\ndef conv_block(inputs, filters, kernel_size, strides, scope):\n  '''Create a simple Conv --> BN --> ReLU6 block'''\n\n  with tf.name_scope(scope):\n    x = tf.keras.layers.Conv2D(filters, kernel_size, strides)(inputs)\n    x = tf.keras.layers.BatchNormalization()(x)\n    x = tf.keras.layers.Activation(tf.nn.relu6)(x)\n    return x\n\nif __name__ =='__main__':\n  inputs = tf.keras.Input(shape=[224, 224, 3], batch_size=1, name='inputs')\n  hidden = conv_block(inputs, 32, 3, 2, scope='block_1')\n  outputs = conv_block(hidden, 64, 3, 2, scope='block_2')\n\n  model = tf.keras.Model(inputs, outputs)\n  model.summary()\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #\n=================================================================\ninputs (InputLayer)          (1, 224, 224, 3)          0\n_________________________________________________________________\nconv2d (Conv2D)              (1, 111, 111, 32)         896\n_________________________________________________________________\nbatch_normalization (BatchNo (1, 111, 111, 32)         128\n_________________________________________________________________\nactivation (Activation)      (1, 111, 111, 32)         0\n_________________________________________________________________\nconv2d_1 (Conv2D)            (1, 55, 55, 64)           18496\n_________________________________________________________________\nbatch_normalization_1 (Batch (1, 55, 55, 64)           256\n_________________________________________________________________\nactivation_1 (Activation)    (1, 55, 55, 64)           0\n=================================================================\nTotal params: 19,776\nTrainable params: 19,584\nNon-trainable params: 192\n_________________________________________________________________\n\n\nor, custom name:\n\nimport tensorflow as tf\n\ndef conv_block(inputs, filters, kernel_size, strides, scope):\n  '''Create a simple Conv --> BN --> ReLU6 block'''\n\n  x = tf.keras.layers.Conv2D(filters, kernel_size, strides, name=scope+'_conv2d')(inputs)\n  x = tf.keras.layers.BatchNormalization(name=scope+'_BN')(x)\n  x = tf.keras.layers.Activation(tf.nn.relu6, name=scope+'_relu')(x)\n  return x\n\nif __name__ =='__main__':\n  inputs = tf.keras.Input(shape=[224, 224, 3], batch_size=1, name='inputs')\n  hidden = conv_block(inputs, 32, 3, 2, scope='block_1')\n  outputs = conv_block(hidden, 64, 3, 2, scope='block_2')\n\n  model = tf.keras.Model(inputs, outputs)\n  model.summary()\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #\n=================================================================\ninputs (InputLayer)          (1, 224, 224, 3)          0\n_________________________________________________________________\nblock_1_conv2d (Conv2D)      (1, 111, 111, 32)         896\n_________________________________________________________________\nblock_1_BN (BatchNormalizati (1, 111, 111, 32)         128\n_________________________________________________________________\nblock_1_relu (Activation)    (1, 111, 111, 32)         0\n_________________________________________________________________\nblock_2_conv2d (Conv2D)      (1, 55, 55, 64)           18496\n_________________________________________________________________\nblock_2_BN (BatchNormalizati (1, 55, 55, 64)           256\n_________________________________________________________________\nblock_2_relu (Activation)    (1, 55, 55, 64)           0\n=================================================================\nTotal params: 19,776\nTrainable params: 19,584\nNon-trainable params: 192\n_________________________________________________________________", "body": "How about this? \r\n\r\n1. use name_scope and leave `name` attribute empty:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\ndef conv_block(inputs, filters, kernel_size, strides, scope):\r\n  '''Create a simple Conv --> BN --> ReLU6 block'''\r\n\r\n  with tf.name_scope(scope):\r\n    x = tf.keras.layers.Conv2D(filters, kernel_size, strides)(inputs)\r\n    x = tf.keras.layers.BatchNormalization()(x)\r\n    x = tf.keras.layers.Activation(tf.nn.relu6)(x)\r\n    return x\r\n\r\nif __name__ =='__main__':\r\n  inputs = tf.keras.Input(shape=[224, 224, 3], batch_size=1, name='inputs')\r\n  hidden = conv_block(inputs, 32, 3, 2, scope='block_1')\r\n  outputs = conv_block(hidden, 64, 3, 2, scope='block_2')\r\n\r\n  model = tf.keras.Model(inputs, outputs)\r\n  model.summary()\r\n```\r\n\r\n```\r\n_________________________________________________________________\r\nLayer (type)                 Output Shape              Param #\r\n=================================================================\r\ninputs (InputLayer)          (1, 224, 224, 3)          0\r\n_________________________________________________________________\r\nconv2d (Conv2D)              (1, 111, 111, 32)         896\r\n_________________________________________________________________\r\nbatch_normalization (BatchNo (1, 111, 111, 32)         128\r\n_________________________________________________________________\r\nactivation (Activation)      (1, 111, 111, 32)         0\r\n_________________________________________________________________\r\nconv2d_1 (Conv2D)            (1, 55, 55, 64)           18496\r\n_________________________________________________________________\r\nbatch_normalization_1 (Batch (1, 55, 55, 64)           256\r\n_________________________________________________________________\r\nactivation_1 (Activation)    (1, 55, 55, 64)           0\r\n=================================================================\r\nTotal params: 19,776\r\nTrainable params: 19,584\r\nNon-trainable params: 192\r\n_________________________________________________________________\r\n```\r\n\r\n\r\n2. or, custom name:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\ndef conv_block(inputs, filters, kernel_size, strides, scope):\r\n  '''Create a simple Conv --> BN --> ReLU6 block'''\r\n\r\n  x = tf.keras.layers.Conv2D(filters, kernel_size, strides, name=scope+'_conv2d')(inputs)\r\n  x = tf.keras.layers.BatchNormalization(name=scope+'_BN')(x)\r\n  x = tf.keras.layers.Activation(tf.nn.relu6, name=scope+'_relu')(x)\r\n  return x\r\n\r\nif __name__ =='__main__':\r\n  inputs = tf.keras.Input(shape=[224, 224, 3], batch_size=1, name='inputs')\r\n  hidden = conv_block(inputs, 32, 3, 2, scope='block_1')\r\n  outputs = conv_block(hidden, 64, 3, 2, scope='block_2')\r\n\r\n  model = tf.keras.Model(inputs, outputs)\r\n  model.summary()\r\n```\r\n\r\n```\r\n_________________________________________________________________\r\nLayer (type)                 Output Shape              Param #\r\n=================================================================\r\ninputs (InputLayer)          (1, 224, 224, 3)          0\r\n_________________________________________________________________\r\nblock_1_conv2d (Conv2D)      (1, 111, 111, 32)         896\r\n_________________________________________________________________\r\nblock_1_BN (BatchNormalizati (1, 111, 111, 32)         128\r\n_________________________________________________________________\r\nblock_1_relu (Activation)    (1, 111, 111, 32)         0\r\n_________________________________________________________________\r\nblock_2_conv2d (Conv2D)      (1, 55, 55, 64)           18496\r\n_________________________________________________________________\r\nblock_2_BN (BatchNormalizati (1, 55, 55, 64)           256\r\n_________________________________________________________________\r\nblock_2_relu (Activation)    (1, 55, 55, 64)           0\r\n=================================================================\r\nTotal params: 19,776\r\nTrainable params: 19,584\r\nNon-trainable params: 192\r\n_________________________________________________________________\r\n```"}