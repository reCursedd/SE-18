{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22369", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22369/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22369/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22369/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22369", "id": 361568488, "node_id": "MDU6SXNzdWUzNjE1Njg0ODg=", "number": 22369, "title": "when use tensorflow to predict images with different resolution,the forward's cost  unstable", "user": {"login": "kasyoukin", "id": 8893270, "node_id": "MDQ6VXNlcjg4OTMyNzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/8893270?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kasyoukin", "html_url": "https://github.com/kasyoukin", "followers_url": "https://api.github.com/users/kasyoukin/followers", "following_url": "https://api.github.com/users/kasyoukin/following{/other_user}", "gists_url": "https://api.github.com/users/kasyoukin/gists{/gist_id}", "starred_url": "https://api.github.com/users/kasyoukin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kasyoukin/subscriptions", "organizations_url": "https://api.github.com/users/kasyoukin/orgs", "repos_url": "https://api.github.com/users/kasyoukin/repos", "events_url": "https://api.github.com/users/kasyoukin/events{/privacy}", "received_events_url": "https://api.github.com/users/kasyoukin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-09-19T03:55:46Z", "updated_at": "2018-11-16T12:47:40Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:no</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:Linux Ubuntu 16.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:binary</li>\n<li><strong>TensorFlow version (use command below)</strong>:1.10.1</li>\n<li><strong>Python version</strong>:3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:9.0/7.1</li>\n<li><strong>GPU model and memory</strong>:Tesla P4 ,8GB</li>\n<li><strong>Exact command to reproduce</strong>:no</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>when use tensorflow to predict images with different resolution,the forward's cost  unstable. my image long side is less than 1280 , the resize code below:</p>\n<pre><code> def resize_im(self, im, scale=600, max_scale=1280): \n      f = 1.0\n      if scale &gt; min(im.shape[0], im.shape[1]): \n        f = float(scale) / min(im.shape[0], im.shape[1]) \n      if max_scale != None and f * max(im.shape[0], im.shape[1]) &gt; max_scale: \n        f = float(max_scale) / max(im.shape[0], im.shape[1]) \n      return cv2.resize(im, None, None, fx=f, fy=f, interpolation=cv2.INTER_LINEAR), f \n</code></pre>\n<p><a href=\"https://github.com/tensorflow/tensorflow/files/2395362/use.different.resolution.txt\">use different resolution.txt</a><br>\nsee the net_fw</p>\n<p>when padding image to 1280*1280, the forward's cost stable,between 0.25 and 0.3,but the small image will cost more.</p>\n<p>I think it is BFC\u2018s problem.<br>\nHow can I solve this problem?I think if tensorflow can lock the chunk's memory (use input image with resolution 1280*1280) for all layers , this problem could be sovled</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):Linux Ubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary):binary\nTensorFlow version (use command below):1.10.1\nPython version:3.5\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:9.0/7.1\nGPU model and memory:Tesla P4 ,8GB\nExact command to reproduce:no\n\nDescribe the problem\nwhen use tensorflow to predict images with different resolution,the forward's cost  unstable. my image long side is less than 1280 , the resize code below:\n def resize_im(self, im, scale=600, max_scale=1280): \n      f = 1.0\n      if scale > min(im.shape[0], im.shape[1]): \n        f = float(scale) / min(im.shape[0], im.shape[1]) \n      if max_scale != None and f * max(im.shape[0], im.shape[1]) > max_scale: \n        f = float(max_scale) / max(im.shape[0], im.shape[1]) \n      return cv2.resize(im, None, None, fx=f, fy=f, interpolation=cv2.INTER_LINEAR), f \n\nuse different resolution.txt\nsee the net_fw\nwhen padding image to 1280*1280, the forward's cost stable,between 0.25 and 0.3,but the small image will cost more.\nI think it is BFC\u2018s problem.\nHow can I solve this problem?I think if tensorflow can lock the chunk's memory (use input image with resolution 1280*1280) for all layers , this problem could be sovled", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:no\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:Linux Ubuntu 16.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\n- **TensorFlow installed from (source or binary)**:binary\r\n- **TensorFlow version (use command below)**:1.10.1\r\n- **Python version**:3.5\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:9.0/7.1\r\n- **GPU model and memory**:Tesla P4 ,8GB\r\n- **Exact command to reproduce**:no\r\n\r\n### Describe the problem\r\nwhen use tensorflow to predict images with different resolution,the forward's cost  unstable. my image long side is less than 1280 , the resize code below:\r\n```\r\n def resize_im(self, im, scale=600, max_scale=1280): \r\n      f = 1.0\r\n      if scale > min(im.shape[0], im.shape[1]): \r\n        f = float(scale) / min(im.shape[0], im.shape[1]) \r\n      if max_scale != None and f * max(im.shape[0], im.shape[1]) > max_scale: \r\n        f = float(max_scale) / max(im.shape[0], im.shape[1]) \r\n      return cv2.resize(im, None, None, fx=f, fy=f, interpolation=cv2.INTER_LINEAR), f \r\n```\r\n\r\n[use different resolution.txt](https://github.com/tensorflow/tensorflow/files/2395362/use.different.resolution.txt)\r\nsee the net_fw\r\n\r\nwhen padding image to 1280*1280, the forward's cost stable,between 0.25 and 0.3,but the small image will cost more.\r\n\r\nI think it is BFC\u2018s problem.\r\nHow can I solve this problem?I think if tensorflow can lock the chunk's memory (use input image with resolution 1280*1280) for all layers , this problem could be sovled\r\n"}