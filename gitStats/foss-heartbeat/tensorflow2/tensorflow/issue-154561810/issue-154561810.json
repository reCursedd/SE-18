{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2345", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2345/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2345/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2345/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2345", "id": 154561810, "node_id": "MDU6SXNzdWUxNTQ1NjE4MTA=", "number": 2345, "title": "Numpy Layer", "user": {"login": "Russell91", "id": 1069617, "node_id": "MDQ6VXNlcjEwNjk2MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1069617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Russell91", "html_url": "https://github.com/Russell91", "followers_url": "https://api.github.com/users/Russell91/followers", "following_url": "https://api.github.com/users/Russell91/following{/other_user}", "gists_url": "https://api.github.com/users/Russell91/gists{/gist_id}", "starred_url": "https://api.github.com/users/Russell91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Russell91/subscriptions", "organizations_url": "https://api.github.com/users/Russell91/orgs", "repos_url": "https://api.github.com/users/Russell91/repos", "events_url": "https://api.github.com/users/Russell91/events{/privacy}", "received_events_url": "https://api.github.com/users/Russell91/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-05-12T19:27:17Z", "updated_at": "2016-05-12T19:35:43Z", "closed_at": "2016-05-12T19:35:37Z", "author_association": "NONE", "body_html": "<p>Is there no way for me to create a new layer in python as a function with inputs and outputs as cpu numpy arrays. This would be especially useful for certain custom operations (say an opencv call in the middle of the network, or a special logging layer). But as far as I can tell, it is not available, and one has to go through the hassle of writing a c++ layer and recompiling to be able to get direct access to any data below the symbolic level. Am I missing something?</p>\n<p>The fact I can't do this creates massive workarounds. In some cases, I call sess.run() once, getting the result as a numpy array, do my operations, and then call sess.run() again. So there are 2 sess.run() calls for one iteration of training.</p>", "body_text": "Is there no way for me to create a new layer in python as a function with inputs and outputs as cpu numpy arrays. This would be especially useful for certain custom operations (say an opencv call in the middle of the network, or a special logging layer). But as far as I can tell, it is not available, and one has to go through the hassle of writing a c++ layer and recompiling to be able to get direct access to any data below the symbolic level. Am I missing something?\nThe fact I can't do this creates massive workarounds. In some cases, I call sess.run() once, getting the result as a numpy array, do my operations, and then call sess.run() again. So there are 2 sess.run() calls for one iteration of training.", "body": "Is there no way for me to create a new layer in python as a function with inputs and outputs as cpu numpy arrays. This would be especially useful for certain custom operations (say an opencv call in the middle of the network, or a special logging layer). But as far as I can tell, it is not available, and one has to go through the hassle of writing a c++ layer and recompiling to be able to get direct access to any data below the symbolic level. Am I missing something?\n\nThe fact I can't do this creates massive workarounds. In some cases, I call sess.run() once, getting the result as a numpy array, do my operations, and then call sess.run() again. So there are 2 sess.run() calls for one iteration of training.\n"}