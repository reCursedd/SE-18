{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22862", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22862/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22862/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22862/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22862", "id": 368591634, "node_id": "MDU6SXNzdWUzNjg1OTE2MzQ=", "number": 22862, "title": "Tf keras functional model with tf dataset input", "user": {"login": "xinyu-Naturali", "id": 43464505, "node_id": "MDQ6VXNlcjQzNDY0NTA1", "avatar_url": "https://avatars3.githubusercontent.com/u/43464505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xinyu-Naturali", "html_url": "https://github.com/xinyu-Naturali", "followers_url": "https://api.github.com/users/xinyu-Naturali/followers", "following_url": "https://api.github.com/users/xinyu-Naturali/following{/other_user}", "gists_url": "https://api.github.com/users/xinyu-Naturali/gists{/gist_id}", "starred_url": "https://api.github.com/users/xinyu-Naturali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xinyu-Naturali/subscriptions", "organizations_url": "https://api.github.com/users/xinyu-Naturali/orgs", "repos_url": "https://api.github.com/users/xinyu-Naturali/repos", "events_url": "https://api.github.com/users/xinyu-Naturali/events{/privacy}", "received_events_url": "https://api.github.com/users/xinyu-Naturali/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-10-10T10:09:49Z", "updated_at": "2018-10-11T00:56:47Z", "closed_at": "2018-10-11T00:56:47Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nno</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nUbuntu 16.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:<br>\nno</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n1.11</li>\n<li><strong>Python version</strong>:<br>\n3.5.3</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I'm new to tensorflow keras and dataset. Can anyone help me understand why the following code doesn't work?</p>\n<pre><code>import tensorflow as tf\nimport tensorflow.keras as keras\nimport numpy as np\nfrom tensorflow.python.data.ops import dataset_ops\nfrom tensorflow.python.data.ops import iterator_ops\nfrom tensorflow.python.keras.utils import multi_gpu_model\nfrom tensorflow.python.keras import backend as K\n\n\ndata = np.random.random((1000,32))\nlabels = np.random.random((1000,10))\ndataset = tf.data.Dataset.from_tensor_slices((data,labels))\nprint( dataset)\nprint( dataset.output_types)\nprint( dataset.output_shapes)\ndataset.batch(10)\ndataset.repeat(100)\n\ninputs = keras.Input(shape=(32,))  # Returns a placeholder tensor\n\n# A layer instance is callable on a tensor, and returns a tensor.\nx = keras.layers.Dense(64, activation='relu')(inputs)\nx = keras.layers.Dense(64, activation='relu')(x)\npredictions = keras.layers.Dense(10, activation='softmax')(x)\n\n# Instantiate the model given inputs and outputs.\nmodel = keras.Model(inputs=inputs, outputs=predictions)\n\n# The compile step specifies the training configuration.\nmodel.compile(optimizer=tf.train.RMSPropOptimizer(0.001),\n          loss='categorical_crossentropy',\n          metrics=['accuracy'])\n\n# Trains for 5 epochs\nmodel.fit(dataset, epochs=5, steps_per_epoch=100)\n</code></pre>\n<p>It failed with the following error:</p>\n<pre><code>model.fit(x=dataset, y=None, epochs=5, steps_per_epoch=100)\nFile \"/home/wuxinyu/pyEnv/lib/python3.5/site-packages/tensorflow/python/keras/engine/training.py\", line 1510, in fit\nvalidation_split=validation_split)\nFile \"/home/wuxinyu/pyEnv/lib/python3.5/site-packages/tensorflow/python/keras/engine/training.py\", line 994, in _standardize_user_data\nclass_weight, batch_size)\nFile \"/home/wuxinyu/pyEnv/lib/python3.5/site-packages/tensorflow/python/keras/engine/training.py\", line 1113, in _standardize_weights\nexception_prefix='input')\nFile \"/home/wuxinyu/pyEnv/lib/python3.5/site-packages/tensorflow/python/keras/engine/training_utils.py\", line 325, in standardize_input_data\n'with shape ' + str(data_shape))\nValueError: Error when checking input: expected input_1 to have 2 dimensions, but got array with shape (32,)\n</code></pre>\n<p>According to tf.keras guide, I should be able to directly pass the dataset to model.fit, as this example shows:</p>\n<blockquote>\n<h1>Input tf.data datasets</h1>\n</blockquote>\n<blockquote>\n<p>Use the Datasets API to scale to large datasets or multi-device training. Pass a tf.data.Dataset instance to the fit method:</p>\n</blockquote>\n<pre><code># Instantiates a toy dataset instance:\ndataset = tf.data.Dataset.from_tensor_slices((data, labels))\ndataset = dataset.batch(32)\ndataset = dataset.repeat()\n</code></pre>\n<blockquote>\n<h1>Don't forget to specify <code>steps_per_epoch</code> when calling <code>fit</code> on a dataset.</h1>\n<p>model.fit(dataset, epochs=10, steps_per_epoch=30)<br>\nHere, the fit method uses the steps_per_epoch argument\u2014this is the number of training steps the model runs before it moves to the next epoch. Since the Dataset yields batches of data, this snippet does not require a batch_size.</p>\n</blockquote>\n<blockquote>\n<p>Datasets can also be used for validation:</p>\n</blockquote>\n<pre><code>dataset = tf.data.Dataset.from_tensor_slices((data, labels))\ndataset = dataset.batch(32).repeat()\n\nval_dataset = tf.data.Dataset.from_tensor_slices((val_data, val_labels))\nval_dataset = val_dataset.batch(32).repeat()\n\nmodel.fit(dataset, epochs=10, steps_per_epoch=30,\n      validation_data=val_dataset,\n      validation_steps=3)\n</code></pre>\n<p>What's the problem with my code, and what's the correct way of doing it?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nno\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nUbuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nno\nTensorFlow installed from (source or binary):\nbinary\nTensorFlow version (use command below):\n1.11\nPython version:\n3.5.3\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nI'm new to tensorflow keras and dataset. Can anyone help me understand why the following code doesn't work?\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport numpy as np\nfrom tensorflow.python.data.ops import dataset_ops\nfrom tensorflow.python.data.ops import iterator_ops\nfrom tensorflow.python.keras.utils import multi_gpu_model\nfrom tensorflow.python.keras import backend as K\n\n\ndata = np.random.random((1000,32))\nlabels = np.random.random((1000,10))\ndataset = tf.data.Dataset.from_tensor_slices((data,labels))\nprint( dataset)\nprint( dataset.output_types)\nprint( dataset.output_shapes)\ndataset.batch(10)\ndataset.repeat(100)\n\ninputs = keras.Input(shape=(32,))  # Returns a placeholder tensor\n\n# A layer instance is callable on a tensor, and returns a tensor.\nx = keras.layers.Dense(64, activation='relu')(inputs)\nx = keras.layers.Dense(64, activation='relu')(x)\npredictions = keras.layers.Dense(10, activation='softmax')(x)\n\n# Instantiate the model given inputs and outputs.\nmodel = keras.Model(inputs=inputs, outputs=predictions)\n\n# The compile step specifies the training configuration.\nmodel.compile(optimizer=tf.train.RMSPropOptimizer(0.001),\n          loss='categorical_crossentropy',\n          metrics=['accuracy'])\n\n# Trains for 5 epochs\nmodel.fit(dataset, epochs=5, steps_per_epoch=100)\n\nIt failed with the following error:\nmodel.fit(x=dataset, y=None, epochs=5, steps_per_epoch=100)\nFile \"/home/wuxinyu/pyEnv/lib/python3.5/site-packages/tensorflow/python/keras/engine/training.py\", line 1510, in fit\nvalidation_split=validation_split)\nFile \"/home/wuxinyu/pyEnv/lib/python3.5/site-packages/tensorflow/python/keras/engine/training.py\", line 994, in _standardize_user_data\nclass_weight, batch_size)\nFile \"/home/wuxinyu/pyEnv/lib/python3.5/site-packages/tensorflow/python/keras/engine/training.py\", line 1113, in _standardize_weights\nexception_prefix='input')\nFile \"/home/wuxinyu/pyEnv/lib/python3.5/site-packages/tensorflow/python/keras/engine/training_utils.py\", line 325, in standardize_input_data\n'with shape ' + str(data_shape))\nValueError: Error when checking input: expected input_1 to have 2 dimensions, but got array with shape (32,)\n\nAccording to tf.keras guide, I should be able to directly pass the dataset to model.fit, as this example shows:\n\nInput tf.data datasets\n\n\nUse the Datasets API to scale to large datasets or multi-device training. Pass a tf.data.Dataset instance to the fit method:\n\n# Instantiates a toy dataset instance:\ndataset = tf.data.Dataset.from_tensor_slices((data, labels))\ndataset = dataset.batch(32)\ndataset = dataset.repeat()\n\n\nDon't forget to specify steps_per_epoch when calling fit on a dataset.\nmodel.fit(dataset, epochs=10, steps_per_epoch=30)\nHere, the fit method uses the steps_per_epoch argument\u2014this is the number of training steps the model runs before it moves to the next epoch. Since the Dataset yields batches of data, this snippet does not require a batch_size.\n\n\nDatasets can also be used for validation:\n\ndataset = tf.data.Dataset.from_tensor_slices((data, labels))\ndataset = dataset.batch(32).repeat()\n\nval_dataset = tf.data.Dataset.from_tensor_slices((val_data, val_labels))\nval_dataset = val_dataset.batch(32).repeat()\n\nmodel.fit(dataset, epochs=10, steps_per_epoch=30,\n      validation_data=val_dataset,\n      validation_steps=3)\n\nWhat's the problem with my code, and what's the correct way of doing it?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nno\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nUbuntu 16.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\nno\r\n- **TensorFlow installed from (source or binary)**:\r\nbinary\r\n- **TensorFlow version (use command below)**:\r\n1.11\r\n- **Python version**:\r\n3.5.3\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nI'm new to tensorflow keras and dataset. Can anyone help me understand why the following code doesn't work?\r\n\r\n    import tensorflow as tf\r\n    import tensorflow.keras as keras\r\n    import numpy as np\r\n    from tensorflow.python.data.ops import dataset_ops\r\n    from tensorflow.python.data.ops import iterator_ops\r\n    from tensorflow.python.keras.utils import multi_gpu_model\r\n    from tensorflow.python.keras import backend as K\r\n\r\n\r\n    data = np.random.random((1000,32))\r\n    labels = np.random.random((1000,10))\r\n    dataset = tf.data.Dataset.from_tensor_slices((data,labels))\r\n    print( dataset)\r\n    print( dataset.output_types)\r\n    print( dataset.output_shapes)\r\n    dataset.batch(10)\r\n    dataset.repeat(100)\r\n\r\n    inputs = keras.Input(shape=(32,))  # Returns a placeholder tensor\r\n\r\n    # A layer instance is callable on a tensor, and returns a tensor.\r\n    x = keras.layers.Dense(64, activation='relu')(inputs)\r\n    x = keras.layers.Dense(64, activation='relu')(x)\r\n    predictions = keras.layers.Dense(10, activation='softmax')(x)\r\n\r\n    # Instantiate the model given inputs and outputs.\r\n    model = keras.Model(inputs=inputs, outputs=predictions)\r\n\r\n    # The compile step specifies the training configuration.\r\n    model.compile(optimizer=tf.train.RMSPropOptimizer(0.001),\r\n              loss='categorical_crossentropy',\r\n              metrics=['accuracy'])\r\n\r\n    # Trains for 5 epochs\r\n    model.fit(dataset, epochs=5, steps_per_epoch=100)\r\n\r\nIt failed with the following error:\r\n\r\n    model.fit(x=dataset, y=None, epochs=5, steps_per_epoch=100)\r\n    File \"/home/wuxinyu/pyEnv/lib/python3.5/site-packages/tensorflow/python/keras/engine/training.py\", line 1510, in fit\r\n    validation_split=validation_split)\r\n    File \"/home/wuxinyu/pyEnv/lib/python3.5/site-packages/tensorflow/python/keras/engine/training.py\", line 994, in _standardize_user_data\r\n    class_weight, batch_size)\r\n    File \"/home/wuxinyu/pyEnv/lib/python3.5/site-packages/tensorflow/python/keras/engine/training.py\", line 1113, in _standardize_weights\r\n    exception_prefix='input')\r\n    File \"/home/wuxinyu/pyEnv/lib/python3.5/site-packages/tensorflow/python/keras/engine/training_utils.py\", line 325, in standardize_input_data\r\n    'with shape ' + str(data_shape))\r\n    ValueError: Error when checking input: expected input_1 to have 2 dimensions, but got array with shape (32,)\r\n\r\n\r\nAccording to tf.keras guide, I should be able to directly pass the dataset to model.fit, as this example shows:\r\n\r\n> # Input tf.data datasets\r\n\r\n> Use the Datasets API to scale to large datasets or multi-device training. Pass a tf.data.Dataset instance to the fit method:\r\n\r\n    # Instantiates a toy dataset instance:\r\n    dataset = tf.data.Dataset.from_tensor_slices((data, labels))\r\n    dataset = dataset.batch(32)\r\n    dataset = dataset.repeat()\r\n\r\n> # Don't forget to specify `steps_per_epoch` when calling `fit` on a dataset.\r\n> model.fit(dataset, epochs=10, steps_per_epoch=30)\r\nHere, the fit method uses the steps_per_epoch argument\u2014this is the number of training steps the model runs before it moves to the next epoch. Since the Dataset yields batches of data, this snippet does not require a batch_size.\r\n\r\n> Datasets can also be used for validation:\r\n\r\n    dataset = tf.data.Dataset.from_tensor_slices((data, labels))\r\n    dataset = dataset.batch(32).repeat()\r\n\r\n    val_dataset = tf.data.Dataset.from_tensor_slices((val_data, val_labels))\r\n    val_dataset = val_dataset.batch(32).repeat()\r\n\r\n    model.fit(dataset, epochs=10, steps_per_epoch=30,\r\n          validation_data=val_dataset,\r\n          validation_steps=3)\r\n\r\nWhat's the problem with my code, and what's the correct way of doing it?"}