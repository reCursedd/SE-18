{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9679", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9679/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9679/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9679/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9679", "id": 226506683, "node_id": "MDU6SXNzdWUyMjY1MDY2ODM=", "number": 9679, "title": "*tf_gen_op_libs* BUILD rule uses host toolchain even when crosstool wrappers are provided.", "user": {"login": "IMG-PRCSNG", "id": 3027352, "node_id": "MDQ6VXNlcjMwMjczNTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3027352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IMG-PRCSNG", "html_url": "https://github.com/IMG-PRCSNG", "followers_url": "https://api.github.com/users/IMG-PRCSNG/followers", "following_url": "https://api.github.com/users/IMG-PRCSNG/following{/other_user}", "gists_url": "https://api.github.com/users/IMG-PRCSNG/gists{/gist_id}", "starred_url": "https://api.github.com/users/IMG-PRCSNG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IMG-PRCSNG/subscriptions", "organizations_url": "https://api.github.com/users/IMG-PRCSNG/orgs", "repos_url": "https://api.github.com/users/IMG-PRCSNG/repos", "events_url": "https://api.github.com/users/IMG-PRCSNG/events{/privacy}", "received_events_url": "https://api.github.com/users/IMG-PRCSNG/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 404586558, "node_id": "MDU6TGFiZWw0MDQ1ODY1NTg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:community%20support", "name": "stat:community support", "color": "f4b400", "default": false}, {"id": 473173351, "node_id": "MDU6TGFiZWw0NzMxNzMzNTE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:build/install", "name": "type:build/install", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-05-05T08:34:34Z", "updated_at": "2017-12-22T21:28:41Z", "closed_at": "2017-12-22T21:28:41Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>\n<p><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</p>\n<p>Yes. I have done the following changes.</p>\n<ul>\n<li>I pulled the tensorflow branch - <strong>v1.0.1</strong></li>\n<li><a href=\"https://github.com/rwightman/tensorflow/commit/a1cde1d55f76a1d4eb806ba81d7c63fe72466e6d\">An ugly hack to compile on Tegra X1 /w Jetpack 2.3.1 release.</a> - Added this for trying to cross compile tensorflow on NVIDIA Jetson Tx1<br>\n- Modified <strong>BUILD.tpl</strong> and <strong>CROSSTOOL.tpl</strong> in <code>third_party/gpus/crosstool/</code> for cross building for aarch64 as mentioned in <a href=\"https://github.com/bazelbuild/bazel/wiki/Building-with-a-custom-toolchain\">Bazel build wiki for custom toolchain</a></li>\n</ul>\n</li>\n<li>\n<p><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:</p>\n<p>Linux Ubuntu 16.04.1 - x86_64</p>\n</li>\n<li>\n<p><strong>TensorFlow installed from (source or binary)</strong>:</p>\n<p>Trying to cross compile for NVIDIA Jetson TX1 from source</p>\n</li>\n<li>\n<p><strong>TensorFlow version (use command below)</strong>:</p>\n<p>v1.0.1 branch</p>\n</li>\n<li>\n<p><strong>Bazel version (if compiling from source)</strong>:</p>\n<p>v 0.4.5</p>\n</li>\n<li>\n<p><strong>CUDA/cuDNN version</strong>:</p>\n<p>CUDA - 8.0.34<br>\ncuDNN - 5.1.5</p>\n</li>\n<li>\n<p><strong>Exact command to reproduce</strong>:</p>\n</li>\n</ul>\n<h3>Problem description</h3>\n<p>I am trying to cross compile tensorflow with GPU support for NVIDIA Jetson TX1. I have setup the crosstool file for using the cross-build tools which I downloaded from the Linaro Website ( I followed the instructions from the bazel wiki on how to do so). My code compiles fine till it reaches the stage where the <code>tf_gen_op_libs</code> BUILD rule is reached (<code>tensorflow/cc/BUILD:314</code>). All of the ops mentioned in the rule fails to build. To be more precise, if fails in the linking stage with the following error</p>\n<pre><code> /home/jetsontx1/Softwares/tensorflow/tensorflow/cc/BUILD:314:1: Couldn't build file tensorflow/cc/ops/no_op_gen_cc: Linking of rule '//tensorflow/cc:ops/no_op_gen_cc' failed: gcc failed: error executing command \n  (cd /home/jetsontx1/.cache/bazel/_bazel_jetsontx1/aebd32d6c3050c56aab9d4678f2e4fce/execroot/tensorflow &amp;&amp; \\\n  exec env - \\\n    LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64: \\\n    PATH=/usr/local/cuda-8.0/bin:/home/jetsontx1/bin:/home/jetsontx1/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin \\\n  /usr/bin/gcc -o bazel-out/host/bin/tensorflow/cc/ops/no_op_gen_cc -Lbazel-out/host/bin/_solib_k8/_U@local_Uconfig_Ucuda_S_Scuda_Ccudart___Uexternal_Slocal_Uconfig_Ucuda_Scuda_Slib '-Wl,-rpath,$ORIGIN/../../../_solib_k8/_U@local_Uconfig_Ucuda_S_Scuda_Ccudart___Uexternal_Slocal_Uconfig_Ucuda_Scuda_Slib' -pthread -Wl,-rpath,../local_config_cuda/cuda/lib64 -Wl,-rpath,../local_config_cuda/cuda/extras/CUPTI/lib64 '-fuse-ld=gold' -Wl,-no-as-needed -Wl,-z,relro,-z,now -B/usr/bin -B/usr/bin '-Wl,--build-id=md5' '-Wl,--hash-style=gnu' -pass-exit-codes -Wl,-S -Wl,--gc-sections -Wl,@bazel-out/host/bin/tensorflow/cc/ops/no_op_gen_cc-2.params): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1.\n/usr/bin/ld.gold: fatal error: bazel-out/host/bin/_solib_k8/_U@local_Uconfig_Ucuda_S_Scuda_Ccudart___Uexternal_Slocal_Uconfig_Ucuda_Scuda_Slib/libcudart.so.8.0: unsupported ELF machine number 183\ncollect2: error: ld returned 1 exit status\n</code></pre>\n<p>So what I don't understand is, I have specified my crosstool toolchain to build all the tensorflow libs. But it is using the host compiler (/usr/bin/gcc) for this particular stage alone. Shouldn't it use the wrapper I specified in the crosstool file?</p>\n<p>To put in another way - Why is the rule <code>tf_gen_op_libs</code> building the ops mentioned in the BUILD rule with the host compiler and not my crosstool? Is this a BUG?</p>", "body_text": "System information\n\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes. I have done the following changes.\n\nI pulled the tensorflow branch - v1.0.1\nAn ugly hack to compile on Tegra X1 /w Jetpack 2.3.1 release. - Added this for trying to cross compile tensorflow on NVIDIA Jetson Tx1\n- Modified BUILD.tpl and CROSSTOOL.tpl in third_party/gpus/crosstool/ for cross building for aarch64 as mentioned in Bazel build wiki for custom toolchain\n\n\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux Ubuntu 16.04.1 - x86_64\n\n\nTensorFlow installed from (source or binary):\nTrying to cross compile for NVIDIA Jetson TX1 from source\n\n\nTensorFlow version (use command below):\nv1.0.1 branch\n\n\nBazel version (if compiling from source):\nv 0.4.5\n\n\nCUDA/cuDNN version:\nCUDA - 8.0.34\ncuDNN - 5.1.5\n\n\nExact command to reproduce:\n\n\nProblem description\nI am trying to cross compile tensorflow with GPU support for NVIDIA Jetson TX1. I have setup the crosstool file for using the cross-build tools which I downloaded from the Linaro Website ( I followed the instructions from the bazel wiki on how to do so). My code compiles fine till it reaches the stage where the tf_gen_op_libs BUILD rule is reached (tensorflow/cc/BUILD:314). All of the ops mentioned in the rule fails to build. To be more precise, if fails in the linking stage with the following error\n /home/jetsontx1/Softwares/tensorflow/tensorflow/cc/BUILD:314:1: Couldn't build file tensorflow/cc/ops/no_op_gen_cc: Linking of rule '//tensorflow/cc:ops/no_op_gen_cc' failed: gcc failed: error executing command \n  (cd /home/jetsontx1/.cache/bazel/_bazel_jetsontx1/aebd32d6c3050c56aab9d4678f2e4fce/execroot/tensorflow && \\\n  exec env - \\\n    LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64: \\\n    PATH=/usr/local/cuda-8.0/bin:/home/jetsontx1/bin:/home/jetsontx1/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin \\\n  /usr/bin/gcc -o bazel-out/host/bin/tensorflow/cc/ops/no_op_gen_cc -Lbazel-out/host/bin/_solib_k8/_U@local_Uconfig_Ucuda_S_Scuda_Ccudart___Uexternal_Slocal_Uconfig_Ucuda_Scuda_Slib '-Wl,-rpath,$ORIGIN/../../../_solib_k8/_U@local_Uconfig_Ucuda_S_Scuda_Ccudart___Uexternal_Slocal_Uconfig_Ucuda_Scuda_Slib' -pthread -Wl,-rpath,../local_config_cuda/cuda/lib64 -Wl,-rpath,../local_config_cuda/cuda/extras/CUPTI/lib64 '-fuse-ld=gold' -Wl,-no-as-needed -Wl,-z,relro,-z,now -B/usr/bin -B/usr/bin '-Wl,--build-id=md5' '-Wl,--hash-style=gnu' -pass-exit-codes -Wl,-S -Wl,--gc-sections -Wl,@bazel-out/host/bin/tensorflow/cc/ops/no_op_gen_cc-2.params): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1.\n/usr/bin/ld.gold: fatal error: bazel-out/host/bin/_solib_k8/_U@local_Uconfig_Ucuda_S_Scuda_Ccudart___Uexternal_Slocal_Uconfig_Ucuda_Scuda_Slib/libcudart.so.8.0: unsupported ELF machine number 183\ncollect2: error: ld returned 1 exit status\n\nSo what I don't understand is, I have specified my crosstool toolchain to build all the tensorflow libs. But it is using the host compiler (/usr/bin/gcc) for this particular stage alone. Shouldn't it use the wrapper I specified in the crosstool file?\nTo put in another way - Why is the rule tf_gen_op_libs building the ops mentioned in the BUILD rule with the host compiler and not my crosstool? Is this a BUG?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n\r\n     Yes. I have done the following changes.\r\n\r\n     - I pulled the tensorflow branch - **v1.0.1**       \r\n     - [An ugly hack to compile on Tegra X1 /w Jetpack 2.3.1 release.](https://github.com/rwightman/tensorflow/commit/a1cde1d55f76a1d4eb806ba81d7c63fe72466e6d) - Added this for trying to cross compile tensorflow on NVIDIA Jetson Tx1\r\n      - Modified **BUILD.tpl** and **CROSSTOOL.tpl** in `third_party/gpus/crosstool/` for cross building for aarch64 as mentioned in [Bazel build wiki for custom toolchain](https://github.com/bazelbuild/bazel/wiki/Building-with-a-custom-toolchain)\r\n\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\n\r\n    Linux Ubuntu 16.04.1 - x86_64\r\n\r\n- **TensorFlow installed from (source or binary)**:\r\n\r\n    Trying to cross compile for NVIDIA Jetson TX1 from source\r\n\r\n- **TensorFlow version (use command below)**:\r\n\r\n    v1.0.1 branch\r\n\r\n- **Bazel version (if compiling from source)**:\r\n\r\n    v 0.4.5\r\n\r\n- **CUDA/cuDNN version**:\r\n\r\n     CUDA - 8.0.34\r\n     cuDNN - 5.1.5\r\n\r\n- **Exact command to reproduce**:\r\n\r\n### Problem description\r\nI am trying to cross compile tensorflow with GPU support for NVIDIA Jetson TX1. I have setup the crosstool file for using the cross-build tools which I downloaded from the Linaro Website ( I followed the instructions from the bazel wiki on how to do so). My code compiles fine till it reaches the stage where the `tf_gen_op_libs` BUILD rule is reached (`tensorflow/cc/BUILD:314`). All of the ops mentioned in the rule fails to build. To be more precise, if fails in the linking stage with the following error\r\n```\r\n /home/jetsontx1/Softwares/tensorflow/tensorflow/cc/BUILD:314:1: Couldn't build file tensorflow/cc/ops/no_op_gen_cc: Linking of rule '//tensorflow/cc:ops/no_op_gen_cc' failed: gcc failed: error executing command \r\n  (cd /home/jetsontx1/.cache/bazel/_bazel_jetsontx1/aebd32d6c3050c56aab9d4678f2e4fce/execroot/tensorflow && \\\r\n  exec env - \\\r\n    LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64: \\\r\n    PATH=/usr/local/cuda-8.0/bin:/home/jetsontx1/bin:/home/jetsontx1/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin \\\r\n  /usr/bin/gcc -o bazel-out/host/bin/tensorflow/cc/ops/no_op_gen_cc -Lbazel-out/host/bin/_solib_k8/_U@local_Uconfig_Ucuda_S_Scuda_Ccudart___Uexternal_Slocal_Uconfig_Ucuda_Scuda_Slib '-Wl,-rpath,$ORIGIN/../../../_solib_k8/_U@local_Uconfig_Ucuda_S_Scuda_Ccudart___Uexternal_Slocal_Uconfig_Ucuda_Scuda_Slib' -pthread -Wl,-rpath,../local_config_cuda/cuda/lib64 -Wl,-rpath,../local_config_cuda/cuda/extras/CUPTI/lib64 '-fuse-ld=gold' -Wl,-no-as-needed -Wl,-z,relro,-z,now -B/usr/bin -B/usr/bin '-Wl,--build-id=md5' '-Wl,--hash-style=gnu' -pass-exit-codes -Wl,-S -Wl,--gc-sections -Wl,@bazel-out/host/bin/tensorflow/cc/ops/no_op_gen_cc-2.params): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1.\r\n/usr/bin/ld.gold: fatal error: bazel-out/host/bin/_solib_k8/_U@local_Uconfig_Ucuda_S_Scuda_Ccudart___Uexternal_Slocal_Uconfig_Ucuda_Scuda_Slib/libcudart.so.8.0: unsupported ELF machine number 183\r\ncollect2: error: ld returned 1 exit status\r\n```\r\nSo what I don't understand is, I have specified my crosstool toolchain to build all the tensorflow libs. But it is using the host compiler (/usr/bin/gcc) for this particular stage alone. Shouldn't it use the wrapper I specified in the crosstool file?\r\n\r\nTo put in another way - Why is the rule `tf_gen_op_libs` building the ops mentioned in the BUILD rule with the host compiler and not my crosstool? Is this a BUG?"}