{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/300080326", "html_url": "https://github.com/tensorflow/tensorflow/issues/8310#issuecomment-300080326", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8310", "id": 300080326, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDA4MDMyNg==", "user": {"login": "leandro-gracia-gil", "id": 8785797, "node_id": "MDQ6VXNlcjg3ODU3OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/8785797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leandro-gracia-gil", "html_url": "https://github.com/leandro-gracia-gil", "followers_url": "https://api.github.com/users/leandro-gracia-gil/followers", "following_url": "https://api.github.com/users/leandro-gracia-gil/following{/other_user}", "gists_url": "https://api.github.com/users/leandro-gracia-gil/gists{/gist_id}", "starred_url": "https://api.github.com/users/leandro-gracia-gil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leandro-gracia-gil/subscriptions", "organizations_url": "https://api.github.com/users/leandro-gracia-gil/orgs", "repos_url": "https://api.github.com/users/leandro-gracia-gil/repos", "events_url": "https://api.github.com/users/leandro-gracia-gil/events{/privacy}", "received_events_url": "https://api.github.com/users/leandro-gracia-gil/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-09T07:09:40Z", "updated_at": "2017-05-09T07:31:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p>After looking into further detail I've crafted the list of the source files that might need to be built and linked with MSVC in order to use static libraries generated with tfcompile. Unless I'm missing something this list should be exhaustive at the moment of writing this.</p>\n<p>Required by generated headers:</p>\n<ul>\n<li>compiler/aot/runtime.cc  (For tfcompile::runtime::MallocContiguousBuffers and FreeContiguous)</li>\n<li>compiler/xla/executable_run_options.cc  (For the implementation of xla::ExecutableRunOptions)</li>\n</ul>\n<p>Required to provide XLA custom ops:</p>\n<ul>\n<li>compiler/tf2xla/kernels/gather_op_kernel_float_int32.cc  (for gather_float_int32_xla_impl)</li>\n<li>compiler/tf2xla/kernels/gather_op_kernel_float_int64.cc  (for gather_float_int64_xla_impl)</li>\n<li>compiler/tf2xla/kernels/index_ops_kernel_argmax_float_1d.cc  (argmax_float_1d_xla_impl)</li>\n<li>compiler/tf2xla/kernels/index_ops_kernel_argmax_float_2d.cc  (argmax_float_2d_xla_impl)</li>\n</ul>\n<p>Required by SimpleResolver in compiler/xla/service/cpu/simple_orc_jit.cc:</p>\n<ul>\n<li>compiler/xla/service/cpu/runtime_matmul.cc  (for __xla_cpu_runtime_EigenMatMulF32)</li>\n<li>compiler/xla/service/cpu/runtime_single_threaded_matmul.cc  (for __xla_cpu_runtime_EigenSingleThreadedMatMulF32)</li>\n<li>compiler/xla/service/cpu/runtime_conv2d.cc  (for __xla_cpu_runtime_EigenConvF32)</li>\n<li>compiler/xla/service/cpu/runtime_single_threaded_conv2d.cc  (for __xla_cpu_runtime_EigenSingleThreadedConvF32)</li>\n<li>compiler/xla/service/cpu/cpu_runtime.cc  (for __xla_cpu_runtime_AcquireInfeedBufferForDequeue and __xla_cpu_runtime_ReleaseInfeedBufferAfterDequeue)</li>\n<li>compiler/xla/service/cpu/cpu_runtime_sse4_1.cc  (for runtime::ExpV4F32, runtime::LogV4F32 and runtime::TanhV4F32)</li>\n<li>compiler/xla/service/cpu/cpu_runtime_avx.cc  (for runtime::ExpV8F32, runtime::LogV8F32 and runtime::TanhV8F32)</li>\n</ul>\n<p>I can also confirm that no changes in Eigen seem to be needed at the end.</p>\n<p>The exact set of sources needed from that list depends on what the static library does and how the generated headers are used. I can confirm that I was able to successfully build all these source files in MSVC with the exception of:</p>\n<ul>\n<li>compiler/xla/service/cpu/cpu_runtime_sse4_1.cc</li>\n<li>compiler/xla/service/cpu/cpu_runtime_avx.cc</li>\n</ul>\n<p>Which means no SSE4.1 and AVX support for the exp, log and tanh functions. The reason for these is the lack of good alternatives to __attribute__((__vector_size__(x))) and __attribute__((weak)) in MSVC, particularly the former. All other files can build with minor fixes that should not affect other platforms.</p>\n<p>I can try preparing a pull request with the fixes that make the other sources compatible with MSVC, although we probably need some way to make sure they <em>keep</em> being compatible. Not having to gather all these by hand would be great too, but I'm not sure how that might be doable.</p>\n<p>Any feedback or suggestions are most welcome.</p>", "body_text": "After looking into further detail I've crafted the list of the source files that might need to be built and linked with MSVC in order to use static libraries generated with tfcompile. Unless I'm missing something this list should be exhaustive at the moment of writing this.\nRequired by generated headers:\n\ncompiler/aot/runtime.cc  (For tfcompile::runtime::MallocContiguousBuffers and FreeContiguous)\ncompiler/xla/executable_run_options.cc  (For the implementation of xla::ExecutableRunOptions)\n\nRequired to provide XLA custom ops:\n\ncompiler/tf2xla/kernels/gather_op_kernel_float_int32.cc  (for gather_float_int32_xla_impl)\ncompiler/tf2xla/kernels/gather_op_kernel_float_int64.cc  (for gather_float_int64_xla_impl)\ncompiler/tf2xla/kernels/index_ops_kernel_argmax_float_1d.cc  (argmax_float_1d_xla_impl)\ncompiler/tf2xla/kernels/index_ops_kernel_argmax_float_2d.cc  (argmax_float_2d_xla_impl)\n\nRequired by SimpleResolver in compiler/xla/service/cpu/simple_orc_jit.cc:\n\ncompiler/xla/service/cpu/runtime_matmul.cc  (for __xla_cpu_runtime_EigenMatMulF32)\ncompiler/xla/service/cpu/runtime_single_threaded_matmul.cc  (for __xla_cpu_runtime_EigenSingleThreadedMatMulF32)\ncompiler/xla/service/cpu/runtime_conv2d.cc  (for __xla_cpu_runtime_EigenConvF32)\ncompiler/xla/service/cpu/runtime_single_threaded_conv2d.cc  (for __xla_cpu_runtime_EigenSingleThreadedConvF32)\ncompiler/xla/service/cpu/cpu_runtime.cc  (for __xla_cpu_runtime_AcquireInfeedBufferForDequeue and __xla_cpu_runtime_ReleaseInfeedBufferAfterDequeue)\ncompiler/xla/service/cpu/cpu_runtime_sse4_1.cc  (for runtime::ExpV4F32, runtime::LogV4F32 and runtime::TanhV4F32)\ncompiler/xla/service/cpu/cpu_runtime_avx.cc  (for runtime::ExpV8F32, runtime::LogV8F32 and runtime::TanhV8F32)\n\nI can also confirm that no changes in Eigen seem to be needed at the end.\nThe exact set of sources needed from that list depends on what the static library does and how the generated headers are used. I can confirm that I was able to successfully build all these source files in MSVC with the exception of:\n\ncompiler/xla/service/cpu/cpu_runtime_sse4_1.cc\ncompiler/xla/service/cpu/cpu_runtime_avx.cc\n\nWhich means no SSE4.1 and AVX support for the exp, log and tanh functions. The reason for these is the lack of good alternatives to __attribute__((__vector_size__(x))) and __attribute__((weak)) in MSVC, particularly the former. All other files can build with minor fixes that should not affect other platforms.\nI can try preparing a pull request with the fixes that make the other sources compatible with MSVC, although we probably need some way to make sure they keep being compatible. Not having to gather all these by hand would be great too, but I'm not sure how that might be doable.\nAny feedback or suggestions are most welcome.", "body": "After looking into further detail I've crafted the list of the source files that might need to be built and linked with MSVC in order to use static libraries generated with tfcompile. Unless I'm missing something this list should be exhaustive at the moment of writing this.\r\n\r\nRequired by generated headers:\r\n- compiler/aot/runtime.cc  (For tfcompile::runtime::MallocContiguousBuffers and FreeContiguous)\r\n- compiler/xla/executable_run_options.cc  (For the implementation of xla::ExecutableRunOptions)\r\n\r\nRequired to provide XLA custom ops:\r\n- compiler/tf2xla/kernels/gather_op_kernel_float_int32.cc  (for gather_float_int32_xla_impl)\r\n- compiler/tf2xla/kernels/gather_op_kernel_float_int64.cc  (for gather_float_int64_xla_impl)\r\n- compiler/tf2xla/kernels/index_ops_kernel_argmax_float_1d.cc  (argmax_float_1d_xla_impl)\r\n- compiler/tf2xla/kernels/index_ops_kernel_argmax_float_2d.cc  (argmax_float_2d_xla_impl)\r\n\r\nRequired by SimpleResolver in compiler/xla/service/cpu/simple_orc_jit.cc:\r\n- compiler/xla/service/cpu/runtime_matmul.cc  (for __xla_cpu_runtime_EigenMatMulF32)\r\n- compiler/xla/service/cpu/runtime_single_threaded_matmul.cc  (for __xla_cpu_runtime_EigenSingleThreadedMatMulF32)\r\n- compiler/xla/service/cpu/runtime_conv2d.cc  (for __xla_cpu_runtime_EigenConvF32)\r\n- compiler/xla/service/cpu/runtime_single_threaded_conv2d.cc  (for __xla_cpu_runtime_EigenSingleThreadedConvF32)\r\n- compiler/xla/service/cpu/cpu_runtime.cc  (for __xla_cpu_runtime_AcquireInfeedBufferForDequeue and __xla_cpu_runtime_ReleaseInfeedBufferAfterDequeue)\r\n- compiler/xla/service/cpu/cpu_runtime_sse4_1.cc  (for runtime::ExpV4F32, runtime::LogV4F32 and runtime::TanhV4F32)\r\n- compiler/xla/service/cpu/cpu_runtime_avx.cc  (for runtime::ExpV8F32, runtime::LogV8F32 and runtime::TanhV8F32)\r\n\r\nI can also confirm that no changes in Eigen seem to be needed at the end.\r\n\r\nThe exact set of sources needed from that list depends on what the static library does and how the generated headers are used. I can confirm that I was able to successfully build all these source files in MSVC with the exception of:\r\n- compiler/xla/service/cpu/cpu_runtime_sse4_1.cc\r\n- compiler/xla/service/cpu/cpu_runtime_avx.cc\r\n\r\nWhich means no SSE4.1 and AVX support for the exp, log and tanh functions. The reason for these is the lack of good alternatives to \\_\\_attribute__((\\_\\_vector_size__(x))) and \\_\\_attribute__((weak)) in MSVC, particularly the former. All other files can build with minor fixes that should not affect other platforms.\r\n\r\nI can try preparing a pull request with the fixes that make the other sources compatible with MSVC, although we probably need some way to make sure they *keep* being compatible. Not having to gather all these by hand would be great too, but I'm not sure how that might be doable.\r\n\r\nAny feedback or suggestions are most welcome."}