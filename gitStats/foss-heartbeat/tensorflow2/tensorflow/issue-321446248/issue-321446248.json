{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19172", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19172/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19172/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19172/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19172", "id": 321446248, "node_id": "MDU6SXNzdWUzMjE0NDYyNDg=", "number": 19172, "title": "how to parse training examples with 2 dimension in csv file with tf.decode_csv", "user": {"login": "jingmeng-bioinformatics", "id": 35085665, "node_id": "MDQ6VXNlcjM1MDg1NjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/35085665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jingmeng-bioinformatics", "html_url": "https://github.com/jingmeng-bioinformatics", "followers_url": "https://api.github.com/users/jingmeng-bioinformatics/followers", "following_url": "https://api.github.com/users/jingmeng-bioinformatics/following{/other_user}", "gists_url": "https://api.github.com/users/jingmeng-bioinformatics/gists{/gist_id}", "starred_url": "https://api.github.com/users/jingmeng-bioinformatics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jingmeng-bioinformatics/subscriptions", "organizations_url": "https://api.github.com/users/jingmeng-bioinformatics/orgs", "repos_url": "https://api.github.com/users/jingmeng-bioinformatics/repos", "events_url": "https://api.github.com/users/jingmeng-bioinformatics/events{/privacy}", "received_events_url": "https://api.github.com/users/jingmeng-bioinformatics/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-05-09T06:28:50Z", "updated_at": "2018-06-25T19:01:12Z", "closed_at": "2018-06-25T19:01:12Z", "author_association": "NONE", "body_html": "<p>I used tf.decode_csv in tensorflow as decoder to parse training examples in a tab-delimited file into cnn models. For every training example, the features are 2 dimensions (100 columns, 2000 rows). After reading the document in tensorflow official site, I still have two questions.</p>\n<ol>\n<li>how to create record_defaults for my case (2 dimensional data) and how to stack the features of 2 dimensionality? The following is my code to do that, but it gave me errors.</li>\n</ol>\n<p>filename_queue = tf.train.string_input_producer([file], num_epochs)</p>\n<p>key, value = tf.TextLineReader().read(filename_queue)</p>\n<p>record_defaults = [[1.0] for col in range(0, 100)]</p>\n<p>content = tf.decode_csv(value, record_defaults = record_defaults, field_delim = '\\t')</p>\n<p>features = tf.stack(content[0:100])</p>\n<ol start=\"2\">\n<li>I am doing binary (0, 1) classification. Where do I put the labels for training examples? in the 2001th row? (For every training example, the first 2000 rows for features, and the 2001th row for label)</li>\n</ol>\n<p>Thanks for your time!</p>\n<p>Have I written custom code    Yes<br>\nOS Platform and Distribution    ubuntu 16.04 LTS<br>\nTensorFlow installed from          pip3 install tensorflow-gpu<br>\nTensorFlow version       the latest version<br>\nBazel version     NA<br>\nCUDA/cuDNN version     CUDA Toolkit 9.0<br>\nGPU model and memory     GeForce GTX 1080<br>\nExact command to reproduce   NA</p>", "body_text": "I used tf.decode_csv in tensorflow as decoder to parse training examples in a tab-delimited file into cnn models. For every training example, the features are 2 dimensions (100 columns, 2000 rows). After reading the document in tensorflow official site, I still have two questions.\n\nhow to create record_defaults for my case (2 dimensional data) and how to stack the features of 2 dimensionality? The following is my code to do that, but it gave me errors.\n\nfilename_queue = tf.train.string_input_producer([file], num_epochs)\nkey, value = tf.TextLineReader().read(filename_queue)\nrecord_defaults = [[1.0] for col in range(0, 100)]\ncontent = tf.decode_csv(value, record_defaults = record_defaults, field_delim = '\\t')\nfeatures = tf.stack(content[0:100])\n\nI am doing binary (0, 1) classification. Where do I put the labels for training examples? in the 2001th row? (For every training example, the first 2000 rows for features, and the 2001th row for label)\n\nThanks for your time!\nHave I written custom code    Yes\nOS Platform and Distribution    ubuntu 16.04 LTS\nTensorFlow installed from          pip3 install tensorflow-gpu\nTensorFlow version       the latest version\nBazel version     NA\nCUDA/cuDNN version     CUDA Toolkit 9.0\nGPU model and memory     GeForce GTX 1080\nExact command to reproduce   NA", "body": "I used tf.decode_csv in tensorflow as decoder to parse training examples in a tab-delimited file into cnn models. For every training example, the features are 2 dimensions (100 columns, 2000 rows). After reading the document in tensorflow official site, I still have two questions.\r\n\r\n1. how to create record_defaults for my case (2 dimensional data) and how to stack the features of 2 dimensionality? The following is my code to do that, but it gave me errors.\r\n\r\nfilename_queue = tf.train.string_input_producer([file], num_epochs)\r\n\r\nkey, value = tf.TextLineReader().read(filename_queue)\r\n\r\nrecord_defaults = [[1.0] for col in range(0, 100)]\r\n\r\ncontent = tf.decode_csv(value, record_defaults = record_defaults, field_delim = '\\t')\r\n\r\nfeatures = tf.stack(content[0:100])\r\n\r\n 2. I am doing binary (0, 1) classification. Where do I put the labels for training examples? in the 2001th row? (For every training example, the first 2000 rows for features, and the 2001th row for label)\r\n\r\nThanks for your time!\r\n\r\n\r\nHave I written custom code    Yes\r\nOS Platform and Distribution    ubuntu 16.04 LTS\r\nTensorFlow installed from          pip3 install tensorflow-gpu\r\nTensorFlow version       the latest version\r\nBazel version     NA\r\nCUDA/cuDNN version     CUDA Toolkit 9.0  \r\nGPU model and memory     GeForce GTX 1080\r\nExact command to reproduce   NA\r\n"}