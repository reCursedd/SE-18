{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/224758190", "html_url": "https://github.com/tensorflow/tensorflow/issues/2560#issuecomment-224758190", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2560", "id": 224758190, "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDc1ODE5MA==", "user": {"login": "kosklain", "id": 1104579, "node_id": "MDQ6VXNlcjExMDQ1Nzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1104579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kosklain", "html_url": "https://github.com/kosklain", "followers_url": "https://api.github.com/users/kosklain/followers", "following_url": "https://api.github.com/users/kosklain/following{/other_user}", "gists_url": "https://api.github.com/users/kosklain/gists{/gist_id}", "starred_url": "https://api.github.com/users/kosklain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kosklain/subscriptions", "organizations_url": "https://api.github.com/users/kosklain/orgs", "repos_url": "https://api.github.com/users/kosklain/repos", "events_url": "https://api.github.com/users/kosklain/events{/privacy}", "received_events_url": "https://api.github.com/users/kosklain/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-08T23:08:50Z", "updated_at": "2016-06-08T23:35:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=18686992\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/arita297\">@arita297</a> Hey, the changes are now in (more concretely, <a href=\"https://github.com/tensorflow/tensorflow/commit/b5ad739fe9939e953416636ae8e188a5feacbcdf\">this commit</a>). As you can see in the docs, you can do what you want by specifying objects that inherit from RNNCell (just like your Grid LSTM would), and then the <code>output_size</code> and <code>state_size</code> properties can specify multi-dimensional sizes by using tensorflow TensorShapes.</p>\n<p>So if you have<br>\n<code>(output, next_state) = YourCell(input, prev_state)</code><br>\nsuch that output is size <code>(o1,o2,o3)</code>, and next_state is <code>(h, c)</code> with both <code>h</code> and <code>c</code> having size <code>(s1, s2, s3)</code>, then your properties should look like:</p>\n<pre><code> @property\n def state_size(self):\n   return (tf.TensorShape((s1, s2, s3)), tf.TensorShape((s1, s2, s3))\n\n@property\ndef output_size(self):\n  return tf.TensorShape((o1, o2, o3))\n</code></pre>\n<p>With that, you should be able to operate with multidimensional input/output/states.</p>", "body_text": "@arita297 Hey, the changes are now in (more concretely, this commit). As you can see in the docs, you can do what you want by specifying objects that inherit from RNNCell (just like your Grid LSTM would), and then the output_size and state_size properties can specify multi-dimensional sizes by using tensorflow TensorShapes.\nSo if you have\n(output, next_state) = YourCell(input, prev_state)\nsuch that output is size (o1,o2,o3), and next_state is (h, c) with both h and c having size (s1, s2, s3), then your properties should look like:\n @property\n def state_size(self):\n   return (tf.TensorShape((s1, s2, s3)), tf.TensorShape((s1, s2, s3))\n\n@property\ndef output_size(self):\n  return tf.TensorShape((o1, o2, o3))\n\nWith that, you should be able to operate with multidimensional input/output/states.", "body": "@arita297 Hey, the changes are now in (more concretely, [this commit](https://github.com/tensorflow/tensorflow/commit/b5ad739fe9939e953416636ae8e188a5feacbcdf)). As you can see in the docs, you can do what you want by specifying objects that inherit from RNNCell (just like your Grid LSTM would), and then the `output_size` and `state_size` properties can specify multi-dimensional sizes by using tensorflow TensorShapes.\n\nSo if you have\n`(output, next_state) = YourCell(input, prev_state)`\nsuch that output is size `(o1,o2,o3)`, and next_state is `(h, c)` with both `h` and `c` having size `(s1, s2, s3)`, then your properties should look like:\n\n```\n @property\n def state_size(self):\n   return (tf.TensorShape((s1, s2, s3)), tf.TensorShape((s1, s2, s3))\n\n@property\ndef output_size(self):\n  return tf.TensorShape((o1, o2, o3))\n```\n\nWith that, you should be able to operate with multidimensional input/output/states.\n"}