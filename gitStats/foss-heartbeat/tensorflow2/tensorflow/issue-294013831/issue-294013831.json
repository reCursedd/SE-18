{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16707", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16707/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16707/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16707/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16707", "id": 294013831, "node_id": "MDU6SXNzdWUyOTQwMTM4MzE=", "number": 16707, "title": "Can't initialize an all zero SparseTensor", "user": {"login": "magee256", "id": 13019270, "node_id": "MDQ6VXNlcjEzMDE5Mjcw", "avatar_url": "https://avatars3.githubusercontent.com/u/13019270?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magee256", "html_url": "https://github.com/magee256", "followers_url": "https://api.github.com/users/magee256/followers", "following_url": "https://api.github.com/users/magee256/following{/other_user}", "gists_url": "https://api.github.com/users/magee256/gists{/gist_id}", "starred_url": "https://api.github.com/users/magee256/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magee256/subscriptions", "organizations_url": "https://api.github.com/users/magee256/orgs", "repos_url": "https://api.github.com/users/magee256/repos", "events_url": "https://api.github.com/users/magee256/events{/privacy}", "received_events_url": "https://api.github.com/users/magee256/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-02T20:29:29Z", "updated_at": "2018-02-03T00:16:03Z", "closed_at": "2018-02-03T00:14:37Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Kind of?</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Mac 10.12.6 (not relevant)</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.5.0</li>\n<li><strong>Python version</strong>: 3.6.3</li>\n<li><strong>Bazel version (if compiling from source)</strong>: NA</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: NA</li>\n<li><strong>CUDA/cuDNN version</strong>: NA</li>\n<li><strong>GPU model and memory</strong>: NA</li>\n<li><strong>Exact command to reproduce</strong>: NA</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>It doesn't seem possible to initialize a <code>tf.SparseTensor</code> with all zero entries.</p>\n<p>A call doing this would look something like:</p>\n<pre><code>tf.SparseTensor(indices=[], values=[], dense_shape=(10, 10))\n</code></pre>\n<p>However, attempting this initialization produces the error:</p>\n<pre><code> ValueError: Shape (0,) must have rank 2\n</code></pre>\n<h3>Source code / logs</h3>\n<p>Current relevant section from <code>SparseTensor.__init__</code>:</p>\n<pre><code>indices_shape = indices.get_shape().with_rank(2) # &lt;--- .with_rank(2) is what causes the problem\nvalues_shape = values.get_shape().with_rank(1)\ndense_shape_shape = dense_shape.get_shape().with_rank(1)\n\n# Assert number of rows in indices match the number of elements in values.\nindices_shape[0].merge_with(values_shape[0])\n# Assert number of columns in indices matches the number of elements in\n# dense_shape.\nindices_shape[1].merge_with(dense_shape_shape[0])\n</code></pre>\n<p>Example solution:</p>\n<pre><code>tf.cond(tf.equal(indices.get_shape()[0], 0),\n        true_fn=lambda: None,\n        false_fn=self._validate_input)\n\ndef _validate_input(self):\n    indices_shape = self._indices.get_shape().with_rank(2)\n    values_shape = self._values.get_shape().with_rank(1)\n    dense_shape_shape = self._dense_shape.get_shape().with_rank(1)\n\n    # Assert number of rows in indices match the number of elements in values.\n    indices_shape[0].merge_with(values_shape[0])\n    # Assert number of columns in indices matches the number of elements in\n    # dense_shape.\n    indices_shape[1].merge_with(dense_shape_shape[0])\n</code></pre>\n<p>My only worry with the example solution is that <code>tf.cond</code> is too high level a function and there's some alternative that would be better. Is that the case?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Kind of?\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac 10.12.6 (not relevant)\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.5.0\nPython version: 3.6.3\nBazel version (if compiling from source): NA\nGCC/Compiler version (if compiling from source): NA\nCUDA/cuDNN version: NA\nGPU model and memory: NA\nExact command to reproduce: NA\n\nDescribe the problem\nIt doesn't seem possible to initialize a tf.SparseTensor with all zero entries.\nA call doing this would look something like:\ntf.SparseTensor(indices=[], values=[], dense_shape=(10, 10))\n\nHowever, attempting this initialization produces the error:\n ValueError: Shape (0,) must have rank 2\n\nSource code / logs\nCurrent relevant section from SparseTensor.__init__:\nindices_shape = indices.get_shape().with_rank(2) # <--- .with_rank(2) is what causes the problem\nvalues_shape = values.get_shape().with_rank(1)\ndense_shape_shape = dense_shape.get_shape().with_rank(1)\n\n# Assert number of rows in indices match the number of elements in values.\nindices_shape[0].merge_with(values_shape[0])\n# Assert number of columns in indices matches the number of elements in\n# dense_shape.\nindices_shape[1].merge_with(dense_shape_shape[0])\n\nExample solution:\ntf.cond(tf.equal(indices.get_shape()[0], 0),\n        true_fn=lambda: None,\n        false_fn=self._validate_input)\n\ndef _validate_input(self):\n    indices_shape = self._indices.get_shape().with_rank(2)\n    values_shape = self._values.get_shape().with_rank(1)\n    dense_shape_shape = self._dense_shape.get_shape().with_rank(1)\n\n    # Assert number of rows in indices match the number of elements in values.\n    indices_shape[0].merge_with(values_shape[0])\n    # Assert number of columns in indices matches the number of elements in\n    # dense_shape.\n    indices_shape[1].merge_with(dense_shape_shape[0])\n\nMy only worry with the example solution is that tf.cond is too high level a function and there's some alternative that would be better. Is that the case?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Kind of?\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Mac 10.12.6 (not relevant)\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.5.0\r\n- **Python version**: 3.6.3\r\n- **Bazel version (if compiling from source)**: NA\r\n- **GCC/Compiler version (if compiling from source)**: NA\r\n- **CUDA/cuDNN version**: NA\r\n- **GPU model and memory**: NA\r\n- **Exact command to reproduce**: NA\r\n\r\n### Describe the problem\r\nIt doesn't seem possible to initialize a `tf.SparseTensor` with all zero entries. \r\n\r\nA call doing this would look something like:\r\n\r\n    tf.SparseTensor(indices=[], values=[], dense_shape=(10, 10))\r\n\r\nHowever, attempting this initialization produces the error:\r\n\r\n     ValueError: Shape (0,) must have rank 2\r\n\r\n\r\n### Source code / logs\r\nCurrent relevant section from `SparseTensor.__init__`:\r\n\r\n    indices_shape = indices.get_shape().with_rank(2) # <--- .with_rank(2) is what causes the problem\r\n    values_shape = values.get_shape().with_rank(1)\r\n    dense_shape_shape = dense_shape.get_shape().with_rank(1)\r\n\r\n    # Assert number of rows in indices match the number of elements in values.\r\n    indices_shape[0].merge_with(values_shape[0])\r\n    # Assert number of columns in indices matches the number of elements in\r\n    # dense_shape.\r\n    indices_shape[1].merge_with(dense_shape_shape[0])\r\n\r\nExample solution:\r\n\r\n    tf.cond(tf.equal(indices.get_shape()[0], 0),\r\n            true_fn=lambda: None,\r\n            false_fn=self._validate_input)\r\n\r\n    def _validate_input(self):\r\n        indices_shape = self._indices.get_shape().with_rank(2)\r\n        values_shape = self._values.get_shape().with_rank(1)\r\n        dense_shape_shape = self._dense_shape.get_shape().with_rank(1)\r\n\r\n        # Assert number of rows in indices match the number of elements in values.\r\n        indices_shape[0].merge_with(values_shape[0])\r\n        # Assert number of columns in indices matches the number of elements in\r\n        # dense_shape.\r\n        indices_shape[1].merge_with(dense_shape_shape[0])\r\n\r\nMy only worry with the example solution is that `tf.cond` is too high level a function and there's some alternative that would be better. Is that the case? "}