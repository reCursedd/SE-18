{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/303915834", "html_url": "https://github.com/tensorflow/tensorflow/issues/288#issuecomment-303915834", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/288", "id": 303915834, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzkxNTgzNA==", "user": {"login": "nikitakit", "id": 252225, "node_id": "MDQ6VXNlcjI1MjIyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/252225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikitakit", "html_url": "https://github.com/nikitakit", "followers_url": "https://api.github.com/users/nikitakit/followers", "following_url": "https://api.github.com/users/nikitakit/following{/other_user}", "gists_url": "https://api.github.com/users/nikitakit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikitakit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikitakit/subscriptions", "organizations_url": "https://api.github.com/users/nikitakit/orgs", "repos_url": "https://api.github.com/users/nikitakit/repos", "events_url": "https://api.github.com/users/nikitakit/events{/privacy}", "received_events_url": "https://api.github.com/users/nikitakit/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-25T03:56:17Z", "updated_at": "2017-05-25T03:56:17Z", "author_association": "NONE", "body_html": "<p>+1 for adding a dedicated sorting op.</p>\n<p>While trying to find the fastest way to sort tensors in tensorflow, I found that numpy is actually faster than using top_k. Here's the code I used to test:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> assume vals is already defined</span>\n<span class=\"pl-k\">*</span>_, last_dim <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">int</span>(x) <span class=\"pl-k\">for</span> x <span class=\"pl-k\">in</span> vals.get_shape()]\n\nsorted1, _ <span class=\"pl-k\">=</span> tf.nn.top_k(vals, <span class=\"pl-v\">k</span><span class=\"pl-k\">=</span>last_dim)\nsorted2 <span class=\"pl-k\">=</span> tf.py_func(np.sort, [vals], tf.float32, <span class=\"pl-v\">stateful</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\nsorted2.set_shape(vals.get_shape())</pre></div>\n<p>In my case <code>sorted1</code> takes around 2.7 ms, while <code>sorted2</code> takes around 1.7 ms. I find it disappointing the tensorflow is actually slower than calling out to Python.</p>", "body_text": "+1 for adding a dedicated sorting op.\nWhile trying to find the fastest way to sort tensors in tensorflow, I found that numpy is actually faster than using top_k. Here's the code I used to test:\n# assume vals is already defined\n*_, last_dim = [int(x) for x in vals.get_shape()]\n\nsorted1, _ = tf.nn.top_k(vals, k=last_dim)\nsorted2 = tf.py_func(np.sort, [vals], tf.float32, stateful=False)\nsorted2.set_shape(vals.get_shape())\nIn my case sorted1 takes around 2.7 ms, while sorted2 takes around 1.7 ms. I find it disappointing the tensorflow is actually slower than calling out to Python.", "body": "+1 for adding a dedicated sorting op.\r\n\r\nWhile trying to find the fastest way to sort tensors in tensorflow, I found that numpy is actually faster than using top_k. Here's the code I used to test:\r\n\r\n```python\r\n# assume vals is already defined\r\n*_, last_dim = [int(x) for x in vals.get_shape()]\r\n\r\nsorted1, _ = tf.nn.top_k(vals, k=last_dim)\r\nsorted2 = tf.py_func(np.sort, [vals], tf.float32, stateful=False)\r\nsorted2.set_shape(vals.get_shape())\r\n```\r\n\r\nIn my case `sorted1` takes around 2.7 ms, while `sorted2` takes around 1.7 ms. I find it disappointing the tensorflow is actually slower than calling out to Python."}