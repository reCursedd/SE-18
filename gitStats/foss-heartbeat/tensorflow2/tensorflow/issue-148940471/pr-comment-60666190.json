{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60666190", "pull_request_review_id": null, "id": 60666190, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY2MTkw", "diff_hunk": "@@ -42,6 +43,96 @@\n local_response_normalization = gen_nn_ops.lrn\n \n \n+def confusion_matrix(predictions, targets, name=None):\n+  \"\"\"'\n+  Calculate the Confusion Matrix for a pair of prediction and target 1-D int arrays.\n+\n+  Considering a prediction array such as: [1, 2, 3]\n+  And a target array such as: [2, 2, 3]\n+\n+  The confusion matrix returned would be the following one:\n+  [[0, 1, 0]\n+   [0, 1, 0]\n+   [0, 0, 1]]\n+\n+  Where the matrix rows represent the prediction labels and the columns represents\n+  the target labels. The confusion matrix is always a 2-D array of shape l X l, where\n+  l is the number of valid labels for a given classification task.\n+  Both prediction and target must be 1-D arrays of the same shape in order\n+  for this function to work.\n+\n+  Args:\n+    predictions: A 1-D array represeting the predictions for a given classification.\n+    targets: A 1-D represeting the real labels for the classification task.\n+\n+  Returns:\n+    A l X l matrix represeting the confusion matrix, where l in the number of\n+    possible labels in the classification task.\n+\n+  Raises:\n+    ValueError: If both predictions and targets are not 1-D vectors and do not\n+                have the same size.\n+  \"\"\"\n+  with ops.op_scope([predictions, targets], name,\n+                    \"confusion_matrix\") as name:\n+\n+    predictions_tensor = ops.convert_to_tensor(predictions, name=\"inputs_tensor\")\n+    targets_tensor = ops.convert_to_tensor(targets, name=\"targets_tensor\")\n+\n+    predictions_shape = predictions_tensor.get_shape()\n+    targets_shape = targets_tensor.get_shape()\n+\n+    if predictions_shape.ndims != 1:\n+      raise ValueError(\n+        \"targets is not a 1-D vector\")\n+\n+    if targets_shape.ndims != 1:\n+      raise ValueError(\n+        \"targets is not a 1-D vector\")\n+\n+    if predictions_shape.num_elements != targets_shape.num_elements:\n+      raise ValueError(\n+        \"predictions and targets must be the same size\")\n+\n+\n+    unique_labels = set()\n+    index_to_label = {}\n+\n+    for index, value in enumerate(predictions):\n+        unique_labels.add(value)\n+        unique_labels.add(targets[index])\n+\n+    num_labels = len(unique_labels)\n+\n+    count = 0\n+    for label in unique_labels:\n+        index_to_label[label] = count\n+        count += 1\n+\n+    values = [ 0 for i in range(num_labels * num_labels)]\n+\n+    for index, value in enumerate(predictions):\n+        target = index_to_label[targets[index]]\n+        value = index_to_label[value]\n+\n+        position = value * num_labels + target\n+\n+        values[position] += 1\n+\n+    indexes = [ [i, j] for i in range(num_labels) for j in range(num_labels)\n+                if values[i * num_labels + j] != 0]\n+    values = [ value for value in values if value != 0]\n+    shape = (num_labels, num_labels)\n+    dense_matrix = np.zeros(shape=(num_labels, num_labels))\n+", "path": "tensorflow/python/ops/nn_ops.py", "position": null, "original_position": 93, "commit_id": "57536144e006ffe2bdbe805eb38ae00f946991d0", "original_commit_id": "303d2e059eefe8e545de59ccf08a21f397720a74", "user": {"login": "lucasmoura", "id": 2703696, "node_id": "MDQ6VXNlcjI3MDM2OTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2703696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucasmoura", "html_url": "https://github.com/lucasmoura", "followers_url": "https://api.github.com/users/lucasmoura/followers", "following_url": "https://api.github.com/users/lucasmoura/following{/other_user}", "gists_url": "https://api.github.com/users/lucasmoura/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucasmoura/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucasmoura/subscriptions", "organizations_url": "https://api.github.com/users/lucasmoura/orgs", "repos_url": "https://api.github.com/users/lucasmoura/repos", "events_url": "https://api.github.com/users/lucasmoura/events{/privacy}", "received_events_url": "https://api.github.com/users/lucasmoura/received_events", "type": "User", "site_admin": false}, "body": "I have managed to create both indices and values array with two lines of code. I don't know if my approach is the way you originally thought about in order to reduce the lines of code, but if it is not, please let me know.\n", "created_at": "2016-04-21T22:35:38Z", "updated_at": "2016-04-23T03:40:12Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1999#discussion_r60666190", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1999", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60666190"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1999#discussion_r60666190"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1999"}}, "body_html": "<p>I have managed to create both indices and values array with two lines of code. I don't know if my approach is the way you originally thought about in order to reduce the lines of code, but if it is not, please let me know.</p>", "body_text": "I have managed to create both indices and values array with two lines of code. I don't know if my approach is the way you originally thought about in order to reduce the lines of code, but if it is not, please let me know."}