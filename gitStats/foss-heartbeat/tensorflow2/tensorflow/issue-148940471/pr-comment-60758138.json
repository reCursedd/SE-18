{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60758138", "pull_request_review_id": null, "id": 60758138, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzU4MTM4", "diff_hunk": "@@ -0,0 +1,99 @@\n+# Copyright 2015 Google Inc. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from tensorflow.python.framework import ops\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import math_ops\n+from tensorflow.python.ops import sparse_ops\n+\n+\n+\"\"\"Confusion matrix related metrics.\"\"\"\n+\n+\n+def confusion_matrix(predictions, targets, num_classes=None, name=None):\n+  \"\"\"Computes the confusion matrix from predictions and targets\n+\n+  Calculate the Confusion Matrix for a pair of prediction and\n+  target 1-D int arrays.\n+\n+  Considering a prediction array such as: `[1, 2, 3]`\n+  And a target array such as: `[2, 2, 3]`\n+\n+  The confusion matrix returned would be the following one:\n+      [[0, 0, 0]\n+       [0, 1, 0]\n+       [0, 1, 0]\n+       [0, 0, 1]]\n+\n+  Where the matrix rows represent the prediction labels and the columns\n+  represents the target labels. The confusion matrix is always a 2-D array\n+  of shape [n, n], where n is the number of valid labels for a given\n+  classification task. Both prediction and target must be 1-D arrays of\n+  the same shape in order for this function to work.\n+\n+  Args:\n+    predictions: A 1-D array represeting the predictions for a given\n+                 classification.\n+    targets: A 1-D represeting the real labels for the classification task.\n+    num_classes: The possible number of labels the classification task can\n+                 have. If this value is not provided, it will be calculated\n+                 using both predictions and targets array.\n+\n+  Returns:\n+    A l X l matrix represeting the confusion matrix, where l in the number of\n+    possible labels in the classification task.\n+\n+  Raises:\n+    ValueError: If both predictions and targets are not 1-D vectors and do not\n+                have the same size.\n+  \"\"\"\n+  predictions_tensor = ops.convert_to_tensor(\n+    predictions, name=\"inputs_tensor\", dtype=dtypes.int64)\n+  targets_tensor = ops.convert_to_tensor(\n+    targets, name=\"targets_tensor\", dtype=dtypes.int64)\n+\n+  predictions_shape = predictions_tensor.get_shape()\n+  targets_shape = targets_tensor.get_shape()\n+\n+  if predictions_shape.ndims != 1:\n+    raise ValueError(\n+      \"targets is not a 1-D vector\")\n+\n+  if targets_shape.ndims != 1:\n+    raise ValueError(\n+      \"targets is not a 1-D vector\")\n+\n+  if predictions_shape.num_elements != targets_shape.num_elements:\n+    raise ValueError(\n+      \"predictions and targets must be the same size\")\n+\n+  if num_classes is None:\n+    num_classes = math_ops.maximum(math_ops.reduce_max(predictions_tensor),\n+                                   math_ops.reduce_max(targets_tensor)) + 1\n+\n+  shape = array_ops.pack([num_classes, num_classes])\n+  indices = array_ops.transpose(\n+    array_ops.pack([predictions_tensor, targets_tensor]))\n+  values = array_ops.ones(shape=[indices.get_shape()[0], ], dtype=dtypes.int32)", "path": "tensorflow/contrib/metrics/python/ops/confusion_matrix_ops.py", "position": null, "original_position": 94, "commit_id": "57536144e006ffe2bdbe805eb38ae00f946991d0", "original_commit_id": "2d9e00441ad614719d5b2407ece5a93388ce058b", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "body": "`arrays_ops.ones(shape=tf.pack([num_classes]), dtype=dtypes.int32)` so that it works if shape is only known at runtime.\n", "created_at": "2016-04-22T15:33:45Z", "updated_at": "2016-04-23T03:40:12Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1999#discussion_r60758138", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1999", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60758138"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1999#discussion_r60758138"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1999"}}, "body_html": "<p><code>arrays_ops.ones(shape=tf.pack([num_classes]), dtype=dtypes.int32)</code> so that it works if shape is only known at runtime.</p>", "body_text": "arrays_ops.ones(shape=tf.pack([num_classes]), dtype=dtypes.int32) so that it works if shape is only known at runtime."}