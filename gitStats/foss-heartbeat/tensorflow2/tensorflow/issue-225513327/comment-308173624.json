{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/308173624", "html_url": "https://github.com/tensorflow/tensorflow/issues/9579#issuecomment-308173624", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9579", "id": 308173624, "node_id": "MDEyOklzc3VlQ29tbWVudDMwODE3MzYyNA==", "user": {"login": "lwogulis", "id": 13294147, "node_id": "MDQ6VXNlcjEzMjk0MTQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/13294147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lwogulis", "html_url": "https://github.com/lwogulis", "followers_url": "https://api.github.com/users/lwogulis/followers", "following_url": "https://api.github.com/users/lwogulis/following{/other_user}", "gists_url": "https://api.github.com/users/lwogulis/gists{/gist_id}", "starred_url": "https://api.github.com/users/lwogulis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lwogulis/subscriptions", "organizations_url": "https://api.github.com/users/lwogulis/orgs", "repos_url": "https://api.github.com/users/lwogulis/repos", "events_url": "https://api.github.com/users/lwogulis/events{/privacy}", "received_events_url": "https://api.github.com/users/lwogulis/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-13T16:30:05Z", "updated_at": "2017-06-13T16:30:05Z", "author_association": "NONE", "body_html": "<p>I am back to trying to run the mnist example with XLA, and I just tried your suggestion of forcing \"with tf.device('device:XLA_CPU:0')\". I get the error that it could not satisfy the explicit device specification. Am I putting the statement in the wrong place?</p>\n<pre><code>from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport argparse\nimport sys \n\nimport tensorflow as tf\n\nfrom tensorflow.examples.tutorials.mnist import input_data\nfrom tensorflow.python.client import timeline\n\nFLAGS = None\n\n\ndef main(_):\n  # Import data\n  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)\n\n  # Create the model\n  x = tf.placeholder(tf.float32, [None, 784])\n  w = tf.Variable(tf.zeros([784, 10]))\n  b = tf.Variable(tf.zeros([10]))\n  y = tf.matmul(x, w) + b \n\n  # Define loss and optimizer\n  y_ = tf.placeholder(tf.float32, [None, 10])\n\n  # The raw formulation of cross-entropy,\n  #\n  #   tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(tf.nn.softmax(y)),\n  #                                 reduction_indices=[1]))\n  #\n  # can be numerically unstable.\n  #\n  # So here we use tf.nn.softmax_cross_entropy_with_logits on the raw\n  # outputs of 'y', and then average across the batch.\n  cross_entropy = tf.reduce_mean(\n      tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))\n  train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\n\n  config = tf.ConfigProto()\n  jit_level = 0 \n  if FLAGS.xla:\n    # Turns on XLA JIT compilation.\n    jit_level = tf.OptimizerOptions.ON_1\n    print('XLA on')\n  config.graph_options.optimizer_options.global_jit_level = jit_level\n  run_metadata = tf.RunMetadata()\n  with tf.device('device:XLA_CPU:0'):\n      sess = tf.Session(config=config)\n      tf.global_variables_initializer().run(session=sess)\n      # Train\n      train_loops = 1000\n      for i in range(train_loops):\n        batch_xs, batch_ys = mnist.train.next_batch(100)\n\n        # Create a timeline for the last loop and export to json to view with\n        # chrome://tracing/.\n        if i == train_loops - 1:\n          sess.run(train_step,\n                   feed_dict={x: batch_xs,\n                              y_: batch_ys},\n                   options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE),\n                   run_metadata=run_metadata)\n          trace = timeline.Timeline(step_stats=run_metadata.step_stats)\n          with open('timeline.ctf.json', 'w') as trace_file:\n            trace_file.write(trace.generate_chrome_trace_format())\n        else:\n          sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n\n      # Test trained model\n      correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n      accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n      print(sess.run(accuracy,\n                     feed_dict={x: mnist.test.images,\n                                y_: mnist.test.labels}))\n      sess.close()\n\n\nif __name__ == '__main__':\n  parser = argparse.ArgumentParser()\n  parser.add_argument(\n      '--data_dir',\n      type=str,\n      default='/tmp/tensorflow/mnist/input_data',\n      help='Directory for storing input data')\n  parser.add_argument(\n      '--xla', type=bool, default=True, help='Turn xla via JIT on')\n  FLAGS, unparsed = parser.parse_known_args()\n  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)\n</code></pre>", "body_text": "I am back to trying to run the mnist example with XLA, and I just tried your suggestion of forcing \"with tf.device('device:XLA_CPU:0')\". I get the error that it could not satisfy the explicit device specification. Am I putting the statement in the wrong place?\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport argparse\nimport sys \n\nimport tensorflow as tf\n\nfrom tensorflow.examples.tutorials.mnist import input_data\nfrom tensorflow.python.client import timeline\n\nFLAGS = None\n\n\ndef main(_):\n  # Import data\n  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)\n\n  # Create the model\n  x = tf.placeholder(tf.float32, [None, 784])\n  w = tf.Variable(tf.zeros([784, 10]))\n  b = tf.Variable(tf.zeros([10]))\n  y = tf.matmul(x, w) + b \n\n  # Define loss and optimizer\n  y_ = tf.placeholder(tf.float32, [None, 10])\n\n  # The raw formulation of cross-entropy,\n  #\n  #   tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(tf.nn.softmax(y)),\n  #                                 reduction_indices=[1]))\n  #\n  # can be numerically unstable.\n  #\n  # So here we use tf.nn.softmax_cross_entropy_with_logits on the raw\n  # outputs of 'y', and then average across the batch.\n  cross_entropy = tf.reduce_mean(\n      tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))\n  train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\n\n  config = tf.ConfigProto()\n  jit_level = 0 \n  if FLAGS.xla:\n    # Turns on XLA JIT compilation.\n    jit_level = tf.OptimizerOptions.ON_1\n    print('XLA on')\n  config.graph_options.optimizer_options.global_jit_level = jit_level\n  run_metadata = tf.RunMetadata()\n  with tf.device('device:XLA_CPU:0'):\n      sess = tf.Session(config=config)\n      tf.global_variables_initializer().run(session=sess)\n      # Train\n      train_loops = 1000\n      for i in range(train_loops):\n        batch_xs, batch_ys = mnist.train.next_batch(100)\n\n        # Create a timeline for the last loop and export to json to view with\n        # chrome://tracing/.\n        if i == train_loops - 1:\n          sess.run(train_step,\n                   feed_dict={x: batch_xs,\n                              y_: batch_ys},\n                   options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE),\n                   run_metadata=run_metadata)\n          trace = timeline.Timeline(step_stats=run_metadata.step_stats)\n          with open('timeline.ctf.json', 'w') as trace_file:\n            trace_file.write(trace.generate_chrome_trace_format())\n        else:\n          sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n\n      # Test trained model\n      correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n      accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n      print(sess.run(accuracy,\n                     feed_dict={x: mnist.test.images,\n                                y_: mnist.test.labels}))\n      sess.close()\n\n\nif __name__ == '__main__':\n  parser = argparse.ArgumentParser()\n  parser.add_argument(\n      '--data_dir',\n      type=str,\n      default='/tmp/tensorflow/mnist/input_data',\n      help='Directory for storing input data')\n  parser.add_argument(\n      '--xla', type=bool, default=True, help='Turn xla via JIT on')\n  FLAGS, unparsed = parser.parse_known_args()\n  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)", "body": "I am back to trying to run the mnist example with XLA, and I just tried your suggestion of forcing \"with tf.device('device:XLA_CPU:0')\". I get the error that it could not satisfy the explicit device specification. Am I putting the statement in the wrong place?\r\n```\r\nfrom __future__ import absolute_import\r\nfrom __future__ import division\r\nfrom __future__ import print_function\r\n\r\nimport argparse\r\nimport sys \r\n\r\nimport tensorflow as tf\r\n\r\nfrom tensorflow.examples.tutorials.mnist import input_data\r\nfrom tensorflow.python.client import timeline\r\n\r\nFLAGS = None\r\n\r\n\r\ndef main(_):\r\n  # Import data\r\n  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)\r\n\r\n  # Create the model\r\n  x = tf.placeholder(tf.float32, [None, 784])\r\n  w = tf.Variable(tf.zeros([784, 10]))\r\n  b = tf.Variable(tf.zeros([10]))\r\n  y = tf.matmul(x, w) + b \r\n\r\n  # Define loss and optimizer\r\n  y_ = tf.placeholder(tf.float32, [None, 10])\r\n\r\n  # The raw formulation of cross-entropy,\r\n  #\r\n  #   tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(tf.nn.softmax(y)),\r\n  #                                 reduction_indices=[1]))\r\n  #\r\n  # can be numerically unstable.\r\n  #\r\n  # So here we use tf.nn.softmax_cross_entropy_with_logits on the raw\r\n  # outputs of 'y', and then average across the batch.\r\n  cross_entropy = tf.reduce_mean(\r\n      tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))\r\n  train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\r\n\r\n  config = tf.ConfigProto()\r\n  jit_level = 0 \r\n  if FLAGS.xla:\r\n    # Turns on XLA JIT compilation.\r\n    jit_level = tf.OptimizerOptions.ON_1\r\n    print('XLA on')\r\n  config.graph_options.optimizer_options.global_jit_level = jit_level\r\n  run_metadata = tf.RunMetadata()\r\n  with tf.device('device:XLA_CPU:0'):\r\n      sess = tf.Session(config=config)\r\n      tf.global_variables_initializer().run(session=sess)\r\n      # Train\r\n      train_loops = 1000\r\n      for i in range(train_loops):\r\n        batch_xs, batch_ys = mnist.train.next_batch(100)\r\n\r\n        # Create a timeline for the last loop and export to json to view with\r\n        # chrome://tracing/.\r\n        if i == train_loops - 1:\r\n          sess.run(train_step,\r\n                   feed_dict={x: batch_xs,\r\n                              y_: batch_ys},\r\n                   options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE),\r\n                   run_metadata=run_metadata)\r\n          trace = timeline.Timeline(step_stats=run_metadata.step_stats)\r\n          with open('timeline.ctf.json', 'w') as trace_file:\r\n            trace_file.write(trace.generate_chrome_trace_format())\r\n        else:\r\n          sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\r\n\r\n      # Test trained model\r\n      correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\r\n      accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\r\n      print(sess.run(accuracy,\r\n                     feed_dict={x: mnist.test.images,\r\n                                y_: mnist.test.labels}))\r\n      sess.close()\r\n\r\n\r\nif __name__ == '__main__':\r\n  parser = argparse.ArgumentParser()\r\n  parser.add_argument(\r\n      '--data_dir',\r\n      type=str,\r\n      default='/tmp/tensorflow/mnist/input_data',\r\n      help='Directory for storing input data')\r\n  parser.add_argument(\r\n      '--xla', type=bool, default=True, help='Turn xla via JIT on')\r\n  FLAGS, unparsed = parser.parse_known_args()\r\n  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)\r\n```"}