{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/290309831", "html_url": "https://github.com/tensorflow/tensorflow/issues/492#issuecomment-290309831", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/492", "id": 290309831, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDMwOTgzMQ==", "user": {"login": "Shaofanl", "id": 5960574, "node_id": "MDQ6VXNlcjU5NjA1NzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5960574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Shaofanl", "html_url": "https://github.com/Shaofanl", "followers_url": "https://api.github.com/users/Shaofanl/followers", "following_url": "https://api.github.com/users/Shaofanl/following{/other_user}", "gists_url": "https://api.github.com/users/Shaofanl/gists{/gist_id}", "starred_url": "https://api.github.com/users/Shaofanl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Shaofanl/subscriptions", "organizations_url": "https://api.github.com/users/Shaofanl/orgs", "repos_url": "https://api.github.com/users/Shaofanl/repos", "events_url": "https://api.github.com/users/Shaofanl/events{/privacy}", "received_events_url": "https://api.github.com/users/Shaofanl/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-30T05:55:29Z", "updated_at": "2017-03-30T05:55:29Z", "author_association": "NONE", "body_html": "<p>My solution is somehow tricky. You can build your network with standard <a href=\"https://github.com/fchollet/keras/\"><strong>Keras</strong></a> backend.<br>\n<strong>During development,</strong> you can use Tensorflow as backend because compiling a model in Theano takes more time than you can endure, especially when the optimization option is on. You might suffer from small batch size and slow computation with Tensorflow, but what you have to do is just to make sure your network structure is correct.<br>\n<strong>After that</strong>, your can simply <a href=\"https://keras.io/backend/\" rel=\"nofollow\">switch to Theano backend</a> in the configuration file of Keras. Since you used the standard Keras backend when build the network, all your function calls of Tensorflow API will automatically switch to corresponding ones of Theano API. It might take a while to compile the model in Theano, but you might use a larger batch size and enjoy a fast computation.</p>\n<p><strong>Notice that</strong> Theano and Tensorflow differ on the arrangement of data, such as the axis of filter channel. I use the Theano's way in both development and deployment in that it can boost Theano's computation.<br>\n<strong>And that</strong> Theano does not have versatile tools such as TensorBoard in TensorFlow. And hence if you want to visualize or analyze the trained model, feel free and safe to switch back to TensorFlow.<br>\n<strong>And that</strong> if some function is not implemented by Keras backend, you can write a simple condition statement to do that. Such as eigenvalue decomposition of a self-adjoint matrix:</p>\n<pre><code>  import keras.backend as K\n  # K.eig() does not exist\n  if K.backend()=='theano':\n    eig, eigv = K.theano.tensor.nlinalg.eig(matrix)\n  elif K.backend() == 'tensorflow':\n    eig, eigv = K.tf.self_adjoint_eig(matrix)\n  else:\n    raise NotImplemented\n</code></pre>", "body_text": "My solution is somehow tricky. You can build your network with standard Keras backend.\nDuring development, you can use Tensorflow as backend because compiling a model in Theano takes more time than you can endure, especially when the optimization option is on. You might suffer from small batch size and slow computation with Tensorflow, but what you have to do is just to make sure your network structure is correct.\nAfter that, your can simply switch to Theano backend in the configuration file of Keras. Since you used the standard Keras backend when build the network, all your function calls of Tensorflow API will automatically switch to corresponding ones of Theano API. It might take a while to compile the model in Theano, but you might use a larger batch size and enjoy a fast computation.\nNotice that Theano and Tensorflow differ on the arrangement of data, such as the axis of filter channel. I use the Theano's way in both development and deployment in that it can boost Theano's computation.\nAnd that Theano does not have versatile tools such as TensorBoard in TensorFlow. And hence if you want to visualize or analyze the trained model, feel free and safe to switch back to TensorFlow.\nAnd that if some function is not implemented by Keras backend, you can write a simple condition statement to do that. Such as eigenvalue decomposition of a self-adjoint matrix:\n  import keras.backend as K\n  # K.eig() does not exist\n  if K.backend()=='theano':\n    eig, eigv = K.theano.tensor.nlinalg.eig(matrix)\n  elif K.backend() == 'tensorflow':\n    eig, eigv = K.tf.self_adjoint_eig(matrix)\n  else:\n    raise NotImplemented", "body": "My solution is somehow tricky. You can build your network with standard [**Keras**](https://github.com/fchollet/keras/) backend. \r\n**During development,** you can use Tensorflow as backend because compiling a model in Theano takes more time than you can endure, especially when the optimization option is on. You might suffer from small batch size and slow computation with Tensorflow, but what you have to do is just to make sure your network structure is correct.\r\n**After that**, your can simply [switch to Theano backend](https://keras.io/backend/) in the configuration file of Keras. Since you used the standard Keras backend when build the network, all your function calls of Tensorflow API will automatically switch to corresponding ones of Theano API. It might take a while to compile the model in Theano, but you might use a larger batch size and enjoy a fast computation.\r\n\r\n**Notice that** Theano and Tensorflow differ on the arrangement of data, such as the axis of filter channel. I use the Theano's way in both development and deployment in that it can boost Theano's computation.\r\n**And that** Theano does not have versatile tools such as TensorBoard in TensorFlow. And hence if you want to visualize or analyze the trained model, feel free and safe to switch back to TensorFlow. \r\n**And that** if some function is not implemented by Keras backend, you can write a simple condition statement to do that. Such as eigenvalue decomposition of a self-adjoint matrix:\r\n```\r\n  import keras.backend as K\r\n  # K.eig() does not exist\r\n  if K.backend()=='theano':\r\n    eig, eigv = K.theano.tensor.nlinalg.eig(matrix)\r\n  elif K.backend() == 'tensorflow':\r\n    eig, eigv = K.tf.self_adjoint_eig(matrix)\r\n  else:\r\n    raise NotImplemented\r\n```"}