{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5512", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5512/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5512/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5512/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/5512", "id": 188429604, "node_id": "MDU6SXNzdWUxODg0Mjk2MDQ=", "number": 5512, "title": "Re-entering an existing scope with variable_scope produces inconsistent results", "user": {"login": "ethereon", "id": 337985, "node_id": "MDQ6VXNlcjMzNzk4NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/337985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ethereon", "html_url": "https://github.com/ethereon", "followers_url": "https://api.github.com/users/ethereon/followers", "following_url": "https://api.github.com/users/ethereon/following{/other_user}", "gists_url": "https://api.github.com/users/ethereon/gists{/gist_id}", "starred_url": "https://api.github.com/users/ethereon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ethereon/subscriptions", "organizations_url": "https://api.github.com/users/ethereon/orgs", "repos_url": "https://api.github.com/users/ethereon/repos", "events_url": "https://api.github.com/users/ethereon/events{/privacy}", "received_events_url": "https://api.github.com/users/ethereon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-10T06:25:37Z", "updated_at": "2016-11-14T18:05:10Z", "closed_at": "2016-11-14T18:05:10Z", "author_association": "NONE", "body_html": "<p>Consider the following example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-v\">name_or_scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>alpha<span class=\"pl-pds\">'</span></span>):\n    <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-v\">name_or_scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>beta<span class=\"pl-pds\">'</span></span>):\n        <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-v\">name_or_scope</span><span class=\"pl-k\">=</span>tf.get_variable_scope()):\n            a_var <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">42</span>,), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>my_var<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> An arbitrary var</span>\n            an_op <span class=\"pl-k\">=</span> tf.reduce_sum(tf.zeros((<span class=\"pl-c1\">42</span>,)), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>my_op<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> An arbitrary op</span>\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a_var is named <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(a_var.name))\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>an_op is named <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(an_op.name))</pre></div>\n<p>This produces the following output:</p>\n<pre><code>a_var is named alpha/beta/my_var:0\nan_op is named alpha/beta/beta/my_op:0\n</code></pre>\n<p>Note that re-entering the existing scope appears to correctly name the variable, but introduces a redundant prefix for ops. Is this expected behavior, or a bug?</p>\n<p>Tested on <code>0.11.0rc1</code></p>", "body_text": "Consider the following example:\nwith tf.variable_scope(name_or_scope='alpha'):\n    with tf.variable_scope(name_or_scope='beta'):\n        with tf.variable_scope(name_or_scope=tf.get_variable_scope()):\n            a_var = tf.get_variable(shape=(42,), name='my_var') # An arbitrary var\n            an_op = tf.reduce_sum(tf.zeros((42,)), name='my_op') # An arbitrary op\n\nprint('a_var is named {}'.format(a_var.name))\nprint('an_op is named {}'.format(an_op.name))\nThis produces the following output:\na_var is named alpha/beta/my_var:0\nan_op is named alpha/beta/beta/my_op:0\n\nNote that re-entering the existing scope appears to correctly name the variable, but introduces a redundant prefix for ops. Is this expected behavior, or a bug?\nTested on 0.11.0rc1", "body": "Consider the following example:\r\n\r\n```python\r\nwith tf.variable_scope(name_or_scope='alpha'):\r\n    with tf.variable_scope(name_or_scope='beta'):\r\n        with tf.variable_scope(name_or_scope=tf.get_variable_scope()):\r\n            a_var = tf.get_variable(shape=(42,), name='my_var') # An arbitrary var\r\n            an_op = tf.reduce_sum(tf.zeros((42,)), name='my_op') # An arbitrary op\r\n\r\nprint('a_var is named {}'.format(a_var.name))\r\nprint('an_op is named {}'.format(an_op.name))\r\n```\r\n\r\nThis produces the following output:\r\n\r\n```\r\na_var is named alpha/beta/my_var:0\r\nan_op is named alpha/beta/beta/my_op:0\r\n```\r\nNote that re-entering the existing scope appears to correctly name the variable, but introduces a redundant prefix for ops. Is this expected behavior, or a bug?\r\n\r\nTested on `0.11.0rc1`"}