{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/285576950", "html_url": "https://github.com/tensorflow/tensorflow/issues/7778#issuecomment-285576950", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7778", "id": 285576950, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTU3Njk1MA==", "user": {"login": "hughsando", "id": 1665494, "node_id": "MDQ6VXNlcjE2NjU0OTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1665494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hughsando", "html_url": "https://github.com/hughsando", "followers_url": "https://api.github.com/users/hughsando/followers", "following_url": "https://api.github.com/users/hughsando/following{/other_user}", "gists_url": "https://api.github.com/users/hughsando/gists{/gist_id}", "starred_url": "https://api.github.com/users/hughsando/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hughsando/subscriptions", "organizations_url": "https://api.github.com/users/hughsando/orgs", "repos_url": "https://api.github.com/users/hughsando/repos", "events_url": "https://api.github.com/users/hughsando/events{/privacy}", "received_events_url": "https://api.github.com/users/hughsando/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-10T04:48:09Z", "updated_at": "2017-03-10T04:48:09Z", "author_association": "NONE", "body_html": "<p>The SSE warnings use code like this:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">ifndef</span> __SSE__\n    <span class=\"pl-en\">WarnIfFeatureUnused</span>(CPUFeature::SSE, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SSE<span class=\"pl-pds\">\"</span></span>);\n#<span class=\"pl-k\">endif</span>  <span class=\"pl-c\"><span class=\"pl-c\">//</span> __SSE__</span>\n#<span class=\"pl-k\">ifndef</span> __SSE2__\n    <span class=\"pl-en\">WarnIfFeatureUnused</span>(CPUFeature::SSE2, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SSE2<span class=\"pl-pds\">\"</span></span>);\n#<span class=\"pl-k\">endif</span>  <span class=\"pl-c\"><span class=\"pl-c\">//</span> __SSE2__</span></pre></div>\n<p>But the Eigen imeplementation (eigen/Eigen/Core) uses more complicated logic to work out whether to use SSS1/2:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">ifndef</span> EIGEN_DONT_VECTORIZE\n  #<span class=\"pl-k\">if</span> defined (EIGEN_SSE2_ON_NON_MSVC_BUT_NOT_OLD_GCC) || defined(EIGEN_SSE2_ON_MSVC_2008_OR_LATER)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Defines symbols for compile-time detection of which instructions are</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> used.</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> EIGEN_VECTORIZE_YY is defined if and only if the instruction set YY is used</span>\n    #<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_VECTORIZE</span>\n    #<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_VECTORIZE_SSE</span>\n    #<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_VECTORIZE_SSE2</span>\n\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> Detect sse3/ssse3/sse4:</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> gcc and icc defines __SSE3__, ...</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> there is no way to know about this on msvc. You can define EIGEN_VECTORIZE_SSE* if you</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">//</span> want to force the use of those instructions with msvc.</span>\n    #<span class=\"pl-k\">ifdef</span> __SSE3__\n      #<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_VECTORIZE_SSE3</span>\n    #<span class=\"pl-k\">endif</span>\n    #<span class=\"pl-k\">ifdef</span> __SSSE3__\n      #<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_VECTORIZE_SSSE3</span>\n    #<span class=\"pl-k\">endif</span>\n    #<span class=\"pl-k\">ifdef</span> __SSE4_1__\n      #<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_VECTORIZE_SSE4_1</span>\n    #<span class=\"pl-k\">endif</span>\n    #<span class=\"pl-k\">ifdef</span> __SSE4_2__\n      #<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_VECTORIZE_SSE4_2</span>\n    #<span class=\"pl-k\">endif</span>\n    #<span class=\"pl-k\">ifdef</span> __AVX__\n      #<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_VECTORIZE_AVX</span>\n      #<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_VECTORIZE_SSE3</span>\n      #<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_VECTORIZE_SSSE3</span>\n      #<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_VECTORIZE_SSE4_1</span>\n      #<span class=\"pl-k\">define</span> <span class=\"pl-en\">EIGEN_VECTORIZE_SSE4_2</span>\n    #<span class=\"pl-k\">endif</span></pre></div>\n<p>Due mainly to the fact Visual Studio assumes SSE1/SSE2 when compiling for x64.<br>\nAlso note that is depends on EIGEN_DONT_VECTORIZE - perhaps some user customization.</p>\n<p>So one solution would be to #include eigen/Eigen/Core and use the \"EIGEN_VECTORIZE_SSE\" symbols in the conditional code-guard (\"<code>#ifndef EIGEN_VECTORIZE_SSE</code>\"),<br>\nI'm not 100% sure about the build system and whether Eigen is the only source of SSE operations, so I'm not 100% sure that this is the right answer.</p>\n<p>I'm also not sure what is the right thing to do if building a binary for distribution.  Do you include AVX and risk it not running, or do you not include it and risk the warning (and low performance)? Ideally you would build with full vectorization and let the software choose at runtime.  I guess another possibility would be to build 2 dlls, and dynamically load the right one at runtime.</p>", "body_text": "The SSE warnings use code like this:\n#ifndef __SSE__\n    WarnIfFeatureUnused(CPUFeature::SSE, \"SSE\");\n#endif  // __SSE__\n#ifndef __SSE2__\n    WarnIfFeatureUnused(CPUFeature::SSE2, \"SSE2\");\n#endif  // __SSE2__\nBut the Eigen imeplementation (eigen/Eigen/Core) uses more complicated logic to work out whether to use SSS1/2:\n#ifndef EIGEN_DONT_VECTORIZE\n  #if defined (EIGEN_SSE2_ON_NON_MSVC_BUT_NOT_OLD_GCC) || defined(EIGEN_SSE2_ON_MSVC_2008_OR_LATER)\n\n    // Defines symbols for compile-time detection of which instructions are\n    // used.\n    // EIGEN_VECTORIZE_YY is defined if and only if the instruction set YY is used\n    #define EIGEN_VECTORIZE\n    #define EIGEN_VECTORIZE_SSE\n    #define EIGEN_VECTORIZE_SSE2\n\n    // Detect sse3/ssse3/sse4:\n    // gcc and icc defines __SSE3__, ...\n    // there is no way to know about this on msvc. You can define EIGEN_VECTORIZE_SSE* if you\n    // want to force the use of those instructions with msvc.\n    #ifdef __SSE3__\n      #define EIGEN_VECTORIZE_SSE3\n    #endif\n    #ifdef __SSSE3__\n      #define EIGEN_VECTORIZE_SSSE3\n    #endif\n    #ifdef __SSE4_1__\n      #define EIGEN_VECTORIZE_SSE4_1\n    #endif\n    #ifdef __SSE4_2__\n      #define EIGEN_VECTORIZE_SSE4_2\n    #endif\n    #ifdef __AVX__\n      #define EIGEN_VECTORIZE_AVX\n      #define EIGEN_VECTORIZE_SSE3\n      #define EIGEN_VECTORIZE_SSSE3\n      #define EIGEN_VECTORIZE_SSE4_1\n      #define EIGEN_VECTORIZE_SSE4_2\n    #endif\nDue mainly to the fact Visual Studio assumes SSE1/SSE2 when compiling for x64.\nAlso note that is depends on EIGEN_DONT_VECTORIZE - perhaps some user customization.\nSo one solution would be to #include eigen/Eigen/Core and use the \"EIGEN_VECTORIZE_SSE\" symbols in the conditional code-guard (\"#ifndef EIGEN_VECTORIZE_SSE\"),\nI'm not 100% sure about the build system and whether Eigen is the only source of SSE operations, so I'm not 100% sure that this is the right answer.\nI'm also not sure what is the right thing to do if building a binary for distribution.  Do you include AVX and risk it not running, or do you not include it and risk the warning (and low performance)? Ideally you would build with full vectorization and let the software choose at runtime.  I guess another possibility would be to build 2 dlls, and dynamically load the right one at runtime.", "body": "The SSE warnings use code like this:\r\n```cpp\r\n#ifndef __SSE__\r\n    WarnIfFeatureUnused(CPUFeature::SSE, \"SSE\");\r\n#endif  // __SSE__\r\n#ifndef __SSE2__\r\n    WarnIfFeatureUnused(CPUFeature::SSE2, \"SSE2\");\r\n#endif  // __SSE2__\r\n```\r\nBut the Eigen imeplementation (eigen/Eigen/Core) uses more complicated logic to work out whether to use SSS1/2:\r\n```cpp\r\n#ifndef EIGEN_DONT_VECTORIZE\r\n  #if defined (EIGEN_SSE2_ON_NON_MSVC_BUT_NOT_OLD_GCC) || defined(EIGEN_SSE2_ON_MSVC_2008_OR_LATER)\r\n\r\n    // Defines symbols for compile-time detection of which instructions are\r\n    // used.\r\n    // EIGEN_VECTORIZE_YY is defined if and only if the instruction set YY is used\r\n    #define EIGEN_VECTORIZE\r\n    #define EIGEN_VECTORIZE_SSE\r\n    #define EIGEN_VECTORIZE_SSE2\r\n\r\n    // Detect sse3/ssse3/sse4:\r\n    // gcc and icc defines __SSE3__, ...\r\n    // there is no way to know about this on msvc. You can define EIGEN_VECTORIZE_SSE* if you\r\n    // want to force the use of those instructions with msvc.\r\n    #ifdef __SSE3__\r\n      #define EIGEN_VECTORIZE_SSE3\r\n    #endif\r\n    #ifdef __SSSE3__\r\n      #define EIGEN_VECTORIZE_SSSE3\r\n    #endif\r\n    #ifdef __SSE4_1__\r\n      #define EIGEN_VECTORIZE_SSE4_1\r\n    #endif\r\n    #ifdef __SSE4_2__\r\n      #define EIGEN_VECTORIZE_SSE4_2\r\n    #endif\r\n    #ifdef __AVX__\r\n      #define EIGEN_VECTORIZE_AVX\r\n      #define EIGEN_VECTORIZE_SSE3\r\n      #define EIGEN_VECTORIZE_SSSE3\r\n      #define EIGEN_VECTORIZE_SSE4_1\r\n      #define EIGEN_VECTORIZE_SSE4_2\r\n    #endif\r\n```\r\nDue mainly to the fact Visual Studio assumes SSE1/SSE2 when compiling for x64.\r\nAlso note that is depends on EIGEN_DONT_VECTORIZE - perhaps some user customization.\r\n\r\nSo one solution would be to #include eigen/Eigen/Core and use the \"EIGEN_VECTORIZE_SSE\" symbols in the conditional code-guard (\"`#ifndef EIGEN_VECTORIZE_SSE`\"),\r\nI'm not 100% sure about the build system and whether Eigen is the only source of SSE operations, so I'm not 100% sure that this is the right answer.\r\n\r\nI'm also not sure what is the right thing to do if building a binary for distribution.  Do you include AVX and risk it not running, or do you not include it and risk the warning (and low performance)? Ideally you would build with full vectorization and let the software choose at runtime.  I guess another possibility would be to build 2 dlls, and dynamically load the right one at runtime."}