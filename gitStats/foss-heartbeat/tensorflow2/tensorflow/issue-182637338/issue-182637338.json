{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4924", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4924/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4924/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4924/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4924", "id": 182637338, "node_id": "MDU6SXNzdWUxODI2MzczMzg=", "number": 4924, "title": "Using xavier_initializer causes pyglet to fail to display", "user": {"login": "jbromley", "id": 209058, "node_id": "MDQ6VXNlcjIwOTA1OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/209058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbromley", "html_url": "https://github.com/jbromley", "followers_url": "https://api.github.com/users/jbromley/followers", "following_url": "https://api.github.com/users/jbromley/following{/other_user}", "gists_url": "https://api.github.com/users/jbromley/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbromley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbromley/subscriptions", "organizations_url": "https://api.github.com/users/jbromley/orgs", "repos_url": "https://api.github.com/users/jbromley/repos", "events_url": "https://api.github.com/users/jbromley/events{/privacy}", "received_events_url": "https://api.github.com/users/jbromley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-12T21:21:15Z", "updated_at": "2016-10-18T17:15:06Z", "closed_at": "2016-10-18T17:15:06Z", "author_association": "NONE", "body_html": "<p>Using tf.contrib.layers.xavier_initializer causes pyglet GLX initialization (and therefore gym) to fail. The stack trace is attached. It is not at all clear how calling xavier_initializer can cause GLX initialization to fail.</p>\n<pre><code>$ python test.py # See test.py below.\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcurand.so locally\n[2016-10-12 14:09:54,402] Making new env: Pong-v0\nTraceback (most recent call last):\n  File \"test.py\", line 11, in &lt;module&gt;\n    env.render()\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/gym/core.py\", line 192, in render\n    return self._render(mode=mode, close=close)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/gym/envs/atari/atari_env.py\", line 119, in _render\n    from gym.envs.classic_control import rendering\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/gym/envs/classic_control/rendering.py\", line 23, in &lt;module&gt;\n    from pyglet.gl import *\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/__init__.py\", line 236, in &lt;module&gt;\n    import pyglet.window\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/window/__init__.py\", line 1816, in &lt;module&gt;\n    gl._create_shadow_window()\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/__init__.py\", line 205, in _create_shadow_window\n    _shadow_window = Window(width=1, height=1, visible=False)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/window/xlib/__init__.py\", line 163, in __init__\n    super(XlibWindow, self).__init__(*args, **kwargs)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/window/__init__.py\", line 504, in __init__\n    config = screen.get_best_config(template_config)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/canvas/base.py\", line 161, in get_best_config\n    configs = self.get_matching_configs(template)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/canvas/xlib.py\", line 179, in get_matching_configs\n    configs = template.match(canvas)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/xlib.py\", line 29, in match\n    have_13 = info.have_version(1, 3)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/glx_info.py\", line 86, in have_version\n    client_version = self.get_client_version().split()[0]\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/glx_info.py\", line 118, in get_client_version\n    return asstr(glXGetClientString(self.display, GLX_VERSION))\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/compat.py\", line 88, in asstr\n    return s.decode(\"utf-8\")\nAttributeError: 'NoneType' object has no attribute 'decode'\n</code></pre>\n<p>Here is my environment information.</p>\n<p>Operating system: Ubuntu 14.04.5<br>\nCUDA 7.5 and CuDNN 5.1.3 See <a href=\"https://github.com/tensorflow/tensorflow/files/525655/cuda-versions.txt\">cuda-versions.txt</a> for details.<br>\nPython 3.4, Gym 0.4.2, Pyglet 1.2.4<br>\nTensorFlow 0.11.0rc0 installed from <a href=\"https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.11.0rc0-cp34-cp34m-linux_x86_64.whl\" rel=\"nofollow\">https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.11.0rc0-cp34-cp34m-linux_x86_64.whl</a>.</p>\n<p>Here is some minimal code that exhibits the problem (this is the test.py that causes the stack trace above.) Everything is fine until the random call tries to set up GLX.</p>\n<pre><code>import gym\nimport random\nimport tensorflow as tf\n\nxavier_init = tf.contrib.layers.xavier_initializer()\n\nenv = gym.make('Pong-v0')\nenv.reset()\nfor _ in range(90):\n    env.step(random.randint(0, env.action_space.n - 1))\n    env.render()\n</code></pre>\n<p>Commenting the xavier_init line fixes the problem.</p>", "body_text": "Using tf.contrib.layers.xavier_initializer causes pyglet GLX initialization (and therefore gym) to fail. The stack trace is attached. It is not at all clear how calling xavier_initializer can cause GLX initialization to fail.\n$ python test.py # See test.py below.\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcurand.so locally\n[2016-10-12 14:09:54,402] Making new env: Pong-v0\nTraceback (most recent call last):\n  File \"test.py\", line 11, in <module>\n    env.render()\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/gym/core.py\", line 192, in render\n    return self._render(mode=mode, close=close)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/gym/envs/atari/atari_env.py\", line 119, in _render\n    from gym.envs.classic_control import rendering\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/gym/envs/classic_control/rendering.py\", line 23, in <module>\n    from pyglet.gl import *\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/__init__.py\", line 236, in <module>\n    import pyglet.window\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/window/__init__.py\", line 1816, in <module>\n    gl._create_shadow_window()\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/__init__.py\", line 205, in _create_shadow_window\n    _shadow_window = Window(width=1, height=1, visible=False)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/window/xlib/__init__.py\", line 163, in __init__\n    super(XlibWindow, self).__init__(*args, **kwargs)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/window/__init__.py\", line 504, in __init__\n    config = screen.get_best_config(template_config)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/canvas/base.py\", line 161, in get_best_config\n    configs = self.get_matching_configs(template)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/canvas/xlib.py\", line 179, in get_matching_configs\n    configs = template.match(canvas)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/xlib.py\", line 29, in match\n    have_13 = info.have_version(1, 3)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/glx_info.py\", line 86, in have_version\n    client_version = self.get_client_version().split()[0]\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/glx_info.py\", line 118, in get_client_version\n    return asstr(glXGetClientString(self.display, GLX_VERSION))\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/compat.py\", line 88, in asstr\n    return s.decode(\"utf-8\")\nAttributeError: 'NoneType' object has no attribute 'decode'\n\nHere is my environment information.\nOperating system: Ubuntu 14.04.5\nCUDA 7.5 and CuDNN 5.1.3 See cuda-versions.txt for details.\nPython 3.4, Gym 0.4.2, Pyglet 1.2.4\nTensorFlow 0.11.0rc0 installed from https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.11.0rc0-cp34-cp34m-linux_x86_64.whl.\nHere is some minimal code that exhibits the problem (this is the test.py that causes the stack trace above.) Everything is fine until the random call tries to set up GLX.\nimport gym\nimport random\nimport tensorflow as tf\n\nxavier_init = tf.contrib.layers.xavier_initializer()\n\nenv = gym.make('Pong-v0')\nenv.reset()\nfor _ in range(90):\n    env.step(random.randint(0, env.action_space.n - 1))\n    env.render()\n\nCommenting the xavier_init line fixes the problem.", "body": "Using tf.contrib.layers.xavier_initializer causes pyglet GLX initialization (and therefore gym) to fail. The stack trace is attached. It is not at all clear how calling xavier_initializer can cause GLX initialization to fail.\n\n```\n$ python test.py # See test.py below.\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcurand.so locally\n[2016-10-12 14:09:54,402] Making new env: Pong-v0\nTraceback (most recent call last):\n  File \"test.py\", line 11, in <module>\n    env.render()\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/gym/core.py\", line 192, in render\n    return self._render(mode=mode, close=close)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/gym/envs/atari/atari_env.py\", line 119, in _render\n    from gym.envs.classic_control import rendering\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/gym/envs/classic_control/rendering.py\", line 23, in <module>\n    from pyglet.gl import *\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/__init__.py\", line 236, in <module>\n    import pyglet.window\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/window/__init__.py\", line 1816, in <module>\n    gl._create_shadow_window()\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/__init__.py\", line 205, in _create_shadow_window\n    _shadow_window = Window(width=1, height=1, visible=False)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/window/xlib/__init__.py\", line 163, in __init__\n    super(XlibWindow, self).__init__(*args, **kwargs)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/window/__init__.py\", line 504, in __init__\n    config = screen.get_best_config(template_config)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/canvas/base.py\", line 161, in get_best_config\n    configs = self.get_matching_configs(template)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/canvas/xlib.py\", line 179, in get_matching_configs\n    configs = template.match(canvas)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/xlib.py\", line 29, in match\n    have_13 = info.have_version(1, 3)\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/glx_info.py\", line 86, in have_version\n    client_version = self.get_client_version().split()[0]\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/gl/glx_info.py\", line 118, in get_client_version\n    return asstr(glXGetClientString(self.display, GLX_VERSION))\n  File \"/home/jay/.virtualenvs/dqn-tf/lib/python3.4/site-packages/pyglet/compat.py\", line 88, in asstr\n    return s.decode(\"utf-8\")\nAttributeError: 'NoneType' object has no attribute 'decode'\n```\n\nHere is my environment information.\n\nOperating system: Ubuntu 14.04.5\nCUDA 7.5 and CuDNN 5.1.3 See [cuda-versions.txt](https://github.com/tensorflow/tensorflow/files/525655/cuda-versions.txt) for details.\nPython 3.4, Gym 0.4.2, Pyglet 1.2.4\nTensorFlow 0.11.0rc0 installed from https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow-0.11.0rc0-cp34-cp34m-linux_x86_64.whl.\n\nHere is some minimal code that exhibits the problem (this is the test.py that causes the stack trace above.) Everything is fine until the random call tries to set up GLX.\n\n```\nimport gym\nimport random\nimport tensorflow as tf\n\nxavier_init = tf.contrib.layers.xavier_initializer()\n\nenv = gym.make('Pong-v0')\nenv.reset()\nfor _ in range(90):\n    env.step(random.randint(0, env.action_space.n - 1))\n    env.render()\n```\n\nCommenting the xavier_init line fixes the problem.\n"}