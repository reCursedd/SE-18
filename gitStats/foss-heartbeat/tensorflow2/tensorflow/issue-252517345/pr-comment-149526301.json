{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/149526301", "pull_request_review_id": 74930070, "id": 149526301, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTUyNjMwMQ==", "diff_hunk": "@@ -763,99 +762,126 @@ def saturate_cast(value, dtype, name=None):\n   # When casting to a type with smaller representable range, clamp.\n   # Note that this covers casting to unsigned types as well.\n   with ops.name_scope(name, \"saturate_cast\", [value]) as name:\n-    value = ops.convert_to_tensor(value, name=\"value\")\n     dtype = dtypes.as_dtype(dtype).base_dtype\n-    if value.dtype.min < dtype.min:\n-      value = gen_math_ops.maximum(value,\n-                                   ops.convert_to_tensor(\n-                                       dtype.min, dtype=value.dtype,\n-                                       name=\"min\"))\n-    if value.dtype.max > dtype.max:\n-      value = gen_math_ops.minimum(value,\n-                                   ops.convert_to_tensor(\n-                                       dtype.max, dtype=value.dtype,\n-                                       name=\"max\"))\n-    return cast(value, dtype, name=name)\n-\n-\n-def to_float(x, name=\"ToFloat\"):\n+    if isinstance(value, sparse_tensor.SparseTensor):\n+      #SparseTensor execute\n+      values_cast = saturate_cast(value.values, dtype, name=name)\n+      return sparse_tensor.SparseTensor(value.indices, values_cast, value.dense_shape)\n+    else:\n+      value = ops.convert_to_tensor(value, name=\"value\")\n+      if value.dtype.min < dtype.min:\n+        value = gen_math_ops.maximum(value,\n+                                     ops.convert_to_tensor(\n+                                         dtype.min, dtype=value.dtype,\n+                                         name=\"min\"))\n+      if value.dtype.max > dtype.max:\n+        value = gen_math_ops.minimum(value,\n+                                     ops.convert_to_tensor(\n+                                         dtype.max, dtype=value.dtype,\n+                                         name=\"max\"))\n+      return cast(value, dtype, name=name)\n+\n+\n+def to_float(x, name=\"ToFloat\", mode=\"unsafe\"):\n   \"\"\"Casts a tensor to type `float32`.\n \n   Args:\n     x: A `Tensor` or `SparseTensor`.\n     name: A name for the operation (optional).\n+    mode: \"safe\"/\"unsafe\" mode setting\n \n   Returns:\n     A `Tensor` or `SparseTensor` with same shape as `x` with type `float32`.\n \n   Raises:\n     TypeError: If `x` cannot be cast to the `float32`.\n   \"\"\"\n-  return cast(x, dtypes.float32, name=name)\n+  if mode == \"safe\":\n+    return saturate_cast(x, dtypes.float32, name=name)\n+  else:\n+    return cast(x, dtypes.float32, name=name)\n \n \n-def to_double(x, name=\"ToDouble\"):\n+def to_double(x, name=\"ToDouble\", mode=\"unsafe\"):\n   \"\"\"Casts a tensor to type `float64`.\n \n   Args:\n     x: A `Tensor` or `SparseTensor`.\n     name: A name for the operation (optional).\n+    mode: \"safe\"/\"unsafe\" mode setting\n \n   Returns:\n     A `Tensor` or `SparseTensor` with same shape as `x` with type `float64`.\n \n   Raises:\n     TypeError: If `x` cannot be cast to the `float64`.\n   \"\"\"\n-  return cast(x, dtypes.float64, name=name)\n+  if mode == \"safe\":\n+    return saturate_cast(x,dtypes.float64, name=name)", "path": "tensorflow/python/ops/math_ops.py", "position": 100, "original_position": 100, "commit_id": "343e0629af9eebc61f6606ab3c4c51409c1d8b1e", "original_commit_id": "343e0629af9eebc61f6606ab3c4c51409c1d8b1e", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "nit: space after x; more generally please review your python code throughout for spacing and other small nits.", "created_at": "2017-11-07T22:39:32Z", "updated_at": "2017-11-07T22:40:18Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12550#discussion_r149526301", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12550", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/149526301"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12550#discussion_r149526301"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12550"}}, "body_html": "<p>nit: space after x; more generally please review your python code throughout for spacing and other small nits.</p>", "body_text": "nit: space after x; more generally please review your python code throughout for spacing and other small nits."}