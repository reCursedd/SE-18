{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/159107828", "html_url": "https://github.com/tensorflow/tensorflow/issues/317#issuecomment-159107828", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/317", "id": 159107828, "node_id": "MDEyOklzc3VlQ29tbWVudDE1OTEwNzgyOA==", "user": {"login": "subvertio", "id": 3961439, "node_id": "MDQ6VXNlcjM5NjE0Mzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3961439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/subvertio", "html_url": "https://github.com/subvertio", "followers_url": "https://api.github.com/users/subvertio/followers", "following_url": "https://api.github.com/users/subvertio/following{/other_user}", "gists_url": "https://api.github.com/users/subvertio/gists{/gist_id}", "starred_url": "https://api.github.com/users/subvertio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/subvertio/subscriptions", "organizations_url": "https://api.github.com/users/subvertio/orgs", "repos_url": "https://api.github.com/users/subvertio/repos", "events_url": "https://api.github.com/users/subvertio/events{/privacy}", "received_events_url": "https://api.github.com/users/subvertio/received_events", "type": "User", "site_admin": false}, "created_at": "2015-11-23T23:55:41Z", "updated_at": "2015-11-23T23:55:41Z", "author_association": "NONE", "body_html": "<p>Yeah that's much better! Good job.</p>\n<p>Sent from my iPhone</p>\n<blockquote>\n<p>On Nov 23, 2015, at 1:31 PM, David Andersen <a href=\"mailto:notifications@github.com\">notifications@github.com</a> wrote:</p>\n<p>I propose this as a revised \"first view of tensorflow\" - given that it's just supposed to introduce some very high-level comments and not be a tutorial of any sort:</p>\n<p>import tensorflow as tf<br>\nimport numpy as np</p>\n<h1>Make 100 phony data points in NumPy.</h1>\n<p>x_data = np.float32(np.random.rand(2, 100)) # Random input<br>\ny_data = np.dot([0.100, 0.200], x_data) + 0.300</p>\n<h1>Construct a linear model.</h1>\n<p>b = tf.Variable(tf.zeros([1]))<br>\nW = tf.Variable(tf.random_uniform([1, 2], -1.0, 1.0))<br>\ny = tf.matmul(W, x_data) + b</p>\n<h1>Minimize the squared errors.</h1>\n<p>loss = tf.reduce_mean(tf.square(y - y_data))<br>\noptimizer = tf.train.GradientDescentOptimizer(0.5)<br>\ntrain = optimizer.minimize(loss)</p>\n<h1>For initializing the variables.</h1>\n<p>init = tf.initialize_all_variables()</p>\n<h1>Launch the graph</h1>\n<p>sess = tf.Session()<br>\nsess.run(init)</p>\n<h1>Fit the plane.</h1>\n<p>for step in xrange(0, 201):<br>\nsess.run(train)<br>\nif step % 20 == 0:<br>\nprint step, sess.run(W), sess.run(b)</p>\n<h1>Learns best fit is W: [[0.100  0.200]], b: [0.300]</h1>\n<p>Suggestions before I make a CL for this?</p>\n<p>\u2014<br>\nReply to this email directly or view it on GitHub.</p>\n</blockquote>", "body_text": "Yeah that's much better! Good job.\nSent from my iPhone\n\nOn Nov 23, 2015, at 1:31 PM, David Andersen notifications@github.com wrote:\nI propose this as a revised \"first view of tensorflow\" - given that it's just supposed to introduce some very high-level comments and not be a tutorial of any sort:\nimport tensorflow as tf\nimport numpy as np\nMake 100 phony data points in NumPy.\nx_data = np.float32(np.random.rand(2, 100)) # Random input\ny_data = np.dot([0.100, 0.200], x_data) + 0.300\nConstruct a linear model.\nb = tf.Variable(tf.zeros([1]))\nW = tf.Variable(tf.random_uniform([1, 2], -1.0, 1.0))\ny = tf.matmul(W, x_data) + b\nMinimize the squared errors.\nloss = tf.reduce_mean(tf.square(y - y_data))\noptimizer = tf.train.GradientDescentOptimizer(0.5)\ntrain = optimizer.minimize(loss)\nFor initializing the variables.\ninit = tf.initialize_all_variables()\nLaunch the graph\nsess = tf.Session()\nsess.run(init)\nFit the plane.\nfor step in xrange(0, 201):\nsess.run(train)\nif step % 20 == 0:\nprint step, sess.run(W), sess.run(b)\nLearns best fit is W: [[0.100  0.200]], b: [0.300]\nSuggestions before I make a CL for this?\n\u2014\nReply to this email directly or view it on GitHub.", "body": "Yeah that's much better! Good job.\n\nSent from my iPhone\n\n> On Nov 23, 2015, at 1:31 PM, David Andersen notifications@github.com wrote:\n> \n> I propose this as a revised \"first view of tensorflow\" - given that it's just supposed to introduce some very high-level comments and not be a tutorial of any sort:\n> \n> import tensorflow as tf\n> import numpy as np\n> \n> # Make 100 phony data points in NumPy.\n> \n> x_data = np.float32(np.random.rand(2, 100)) # Random input\n> y_data = np.dot([0.100, 0.200], x_data) + 0.300\n> \n> # Construct a linear model.\n> \n> b = tf.Variable(tf.zeros([1]))\n> W = tf.Variable(tf.random_uniform([1, 2], -1.0, 1.0))\n> y = tf.matmul(W, x_data) + b\n> \n> # Minimize the squared errors.\n> \n> loss = tf.reduce_mean(tf.square(y - y_data))\n> optimizer = tf.train.GradientDescentOptimizer(0.5)\n> train = optimizer.minimize(loss)\n> \n> # For initializing the variables.\n> \n> init = tf.initialize_all_variables()\n> \n> # Launch the graph\n> \n> sess = tf.Session()\n> sess.run(init)\n> \n> # Fit the plane.\n> \n> for step in xrange(0, 201):\n>     sess.run(train)\n>     if step % 20 == 0:\n>         print step, sess.run(W), sess.run(b)\n> \n> # Learns best fit is W: [[0.100  0.200]], b: [0.300]\n> \n> Suggestions before I make a CL for this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n"}