{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/228699115", "pull_request_review_id": 169040527, "id": 228699115, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODY5OTExNQ==", "diff_hunk": "@@ -1506,49 +1514,106 @@ def batch_dot(x, y, axes=None):\n   ```python\n       >>> x_batch = K.ones(shape=(32, 20, 1))\n       >>> y_batch = K.ones(shape=(32, 30, 20))\n-      >>> xy_batch_dot = K.batch_dot(x_batch, y_batch, axes=[1, 2])\n+      >>> xy_batch_dot = K.batch_dot(x_batch, y_batch, axes=(1, 2))\n       >>> K.int_shape(xy_batch_dot)\n       (32, 1, 30)\n   ```\n   \"\"\"\n+  x_shape = int_shape(x)\n+  y_shape = int_shape(y)\n+\n+  x_ndim = len(x_shape)\n+  y_ndim = len(y_shape)\n+\n+  if x_ndim < 2 or y_ndim < 2:\n+    raise ValueError('Can not do batch_dot on inputs '\n+                      'with rank < 2. '\n+                      'Received inputs with shapes ' +\n+                      str(x_shape) + ' and ' +\n+                      str(y_shape) + '.')\n+\n+  x_batch_size = x_shape[0]\n+  y_batch_size = y_shape[0]\n+\n+  if x_batch_size is not None and y_batch_size is not None:\n+    if x_batch_size != y_batch_size:\n+        raise ValueError('Can not do batch_dot on inputs '\n+                          'with different batch sizes. '\n+                          'Received inputs with shapes ' +\n+                          str(x_shape) + ' and ' +\n+                          str(y_shape) + '.')\n+\n   if isinstance(axes, int):\n-    axes = (axes, axes)\n-  x_ndim = ndim(x)\n-  y_ndim = ndim(y)\n+    axes = [axes, axes]\n+\n   if axes is None:\n-    # behaves like tf.batch_matmul as default\n-    axes = [x_ndim - 1, y_ndim - 2]\n-  if x_ndim > y_ndim:\n-    diff = x_ndim - y_ndim\n-    y = array_ops.reshape(y,\n-                          array_ops.concat(\n-                              [array_ops.shape(y), [1] * (diff)], axis=0))\n-  elif y_ndim > x_ndim:\n-    diff = y_ndim - x_ndim\n-    x = array_ops.reshape(x,\n-                          array_ops.concat(\n-                              [array_ops.shape(x), [1] * (diff)], axis=0))\n-  else:\n-    diff = 0\n-  if ndim(x) == 2 and ndim(y) == 2:\n-    if axes[0] == axes[1]:\n-      out = math_ops.reduce_sum(math_ops.multiply(x, y), axes[0])\n+    if y_ndim == 2:\n+      axes = [x_ndim - 1, y_ndim - 1]\n     else:\n-      out = math_ops.reduce_sum(\n-          math_ops.multiply(array_ops.transpose(x, [1, 0]), y), axes[1])\n-  else:\n-    adj_x = None if axes[0] == ndim(x) - 1 else True\n-    adj_y = True if axes[1] == ndim(y) - 1 else None\n-    out = math_ops.matmul(x, y, adjoint_a=adj_x, adjoint_b=adj_y)\n-  if diff:\n-    if x_ndim > y_ndim:\n-      idx = x_ndim + y_ndim - 3\n-    else:\n-      idx = x_ndim - 1\n-    out = array_ops.squeeze(out, list(range(idx, idx + diff)))\n-  if ndim(out) == 1:\n-    out = expand_dims(out, 1)\n-  return out\n+      axes = [x_ndim - 1, y_ndim - 2]\n+\n+  if py_any([isinstance(a, (list, tuple)) for a in axes]):\n+    raise ValueError('Multiple target dimensions are not supported. ' +\n+                     'Expected: None, int, (int, int), ' +\n+                     'Provided: ' + str(axes))\n+\n+  # if tuple, convert to list\n+  axes = list(axes)\n+\n+  # convert negative indices\n+  if axes[0] < 0:\n+    axes[0] += x_ndim\n+  if axes[1] < 0:\n+    axes[1] += y_ndim\n+\n+  # sanity checks\n+  if 0 in axes:\n+    raise ValueError('Can not perform batch_dot over axis 0.'\n+                      'If your inputs are not batched,'\n+                      ' add a dummy batch dimension to your '\n+                      'inputs using K.expand_dims(x, 0)')\n+\n+  a0, a1 = axes\n+  d1 = x_shape[a0]\n+  d2 = y_shape[a1]\n+\n+  if d1 is not None and d2 is not None and d1 != d2:\n+    raise ValueError('Can not do batch_dot on inputs with shapes ' +", "path": "tensorflow/python/keras/backend.py", "position": null, "original_position": 157, "commit_id": "ab876330171f6629dac81b19b79a0c4c8321f07f", "original_commit_id": "2a49282de8ca9448354ae3d74e3d2df91e923bec", "user": {"login": "caisq", "id": 16824702, "node_id": "MDQ6VXNlcjE2ODI0NzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/16824702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caisq", "html_url": "https://github.com/caisq", "followers_url": "https://api.github.com/users/caisq/followers", "following_url": "https://api.github.com/users/caisq/following{/other_user}", "gists_url": "https://api.github.com/users/caisq/gists{/gist_id}", "starred_url": "https://api.github.com/users/caisq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caisq/subscriptions", "organizations_url": "https://api.github.com/users/caisq/orgs", "repos_url": "https://api.github.com/users/caisq/repos", "events_url": "https://api.github.com/users/caisq/events{/privacy}", "received_events_url": "https://api.github.com/users/caisq/received_events", "type": "User", "site_admin": false}, "body": "Need a unit test for this condition (if it doesn't already exist).", "created_at": "2018-10-27T02:54:56Z", "updated_at": "2018-10-30T12:20:56Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23305#discussion_r228699115", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23305", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/228699115"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23305#discussion_r228699115"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23305"}}, "body_html": "<p>Need a unit test for this condition (if it doesn't already exist).</p>", "body_text": "Need a unit test for this condition (if it doesn't already exist)."}