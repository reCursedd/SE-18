{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/231150962", "html_url": "https://github.com/tensorflow/tensorflow/issues/3186#issuecomment-231150962", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3186", "id": 231150962, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTE1MDk2Mg==", "user": {"login": "eplondke", "id": 1642090, "node_id": "MDQ6VXNlcjE2NDIwOTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1642090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eplondke", "html_url": "https://github.com/eplondke", "followers_url": "https://api.github.com/users/eplondke/followers", "following_url": "https://api.github.com/users/eplondke/following{/other_user}", "gists_url": "https://api.github.com/users/eplondke/gists{/gist_id}", "starred_url": "https://api.github.com/users/eplondke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eplondke/subscriptions", "organizations_url": "https://api.github.com/users/eplondke/orgs", "repos_url": "https://api.github.com/users/eplondke/repos", "events_url": "https://api.github.com/users/eplondke/events{/privacy}", "received_events_url": "https://api.github.com/users/eplondke/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-07T17:34:16Z", "updated_at": "2016-07-07T17:34:16Z", "author_association": "NONE", "body_html": "<p>Some ARM variants will give an exception on misaligned LDRD (but some do<br>\nnot, especially if misaligned support is enabled in ARMv7).</p>\n<p>You'd probably have a problem if someone used the buffer for a double<br>\nprecision value on many targets that don't support misaligned loads and<br>\nstores (MIPS, ARM)</p>\n<p>Sorry, my patch got formatted by github:</p>\n<h1></h1>\n<p>diff --git a/tensorflow/core/lib/gtl/inlined_vector.h<br>\nb/tensorflow/core/lib/gtl/inlined_vector.h<br>\nindex e8fe66c..518b421 100644<br>\n--- a/tensorflow/core/lib/gtl/inlined_vector.h<br>\n+++ b/tensorflow/core/lib/gtl/inlined_vector.h<br>\n@@ -276,6 +276,8 @@ class InlinedVector {<br>\nunsigned char data[kSize];<br>\n// Force data to be aligned enough for a pointer.<br>\nT* unused_aligner;</p>\n<ul>\n<li>// EJP: force 8 byte alignment, as pointers could be 4-byte but data<br>\nelements 8-byte</li>\n<li>uint64_t unused_64;<br>\n} u_;</li>\n</ul>\n<h1>inline void InitRep() { u_.data[kSize - 1] = 0; }</h1>\n<p>Basically a one-liner: since a 64-bit value could go into the data (by<br>\ncast), you put a 64-bit value into the union to ensure alignment.</p>\n<p>On Thu, Jul 7, 2016 at 11:42 AM, Andrew Selle <a href=\"mailto:notifications@github.com\">notifications@github.com</a><br>\nwrote:</p>\n<blockquote>\n<p>What you're saying makes sense. What are some example processor<br>\narchitectures with this property? It's unlikely we are going to support it,<br>\nbut we would be open to a patch that detects this property in a<br>\narchitecture and does this alignment only when necessary. You indicate it<br>\nmight improve performance to do this extra alignment but it actually also<br>\nmight hurt performance, and without testing we are hesitant to make such a<br>\nchange. Adding <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=463737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vrv\">@vrv</a> <a href=\"https://github.com/vrv\">https://github.com/vrv</a> to comment.</p>\n<p>\u2014<br>\nYou are receiving this because you authored the thread.<br>\nReply to this email directly, view it on GitHub<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"163710296\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/3186\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/3186/hovercard?comment_id=231136191&amp;comment_type=issue_comment\" href=\"https://github.com/tensorflow/tensorflow/issues/3186#issuecomment-231136191\">#3186 (comment)</a>,<br>\nor mute the thread<br>\n<a href=\"https://github.com/notifications/unsubscribe/ABkOanmmqCpZ4crPg83EvlyqGFA_-GfRks5qTSx9gaJpZM4JEg_y\">https://github.com/notifications/unsubscribe/ABkOanmmqCpZ4crPg83EvlyqGFA_-GfRks5qTSx9gaJpZM4JEg_y</a><br>\n.</p>\n</blockquote>", "body_text": "Some ARM variants will give an exception on misaligned LDRD (but some do\nnot, especially if misaligned support is enabled in ARMv7).\nYou'd probably have a problem if someone used the buffer for a double\nprecision value on many targets that don't support misaligned loads and\nstores (MIPS, ARM)\nSorry, my patch got formatted by github:\n\ndiff --git a/tensorflow/core/lib/gtl/inlined_vector.h\nb/tensorflow/core/lib/gtl/inlined_vector.h\nindex e8fe66c..518b421 100644\n--- a/tensorflow/core/lib/gtl/inlined_vector.h\n+++ b/tensorflow/core/lib/gtl/inlined_vector.h\n@@ -276,6 +276,8 @@ class InlinedVector {\nunsigned char data[kSize];\n// Force data to be aligned enough for a pointer.\nT* unused_aligner;\n\n// EJP: force 8 byte alignment, as pointers could be 4-byte but data\nelements 8-byte\nuint64_t unused_64;\n} u_;\n\ninline void InitRep() { u_.data[kSize - 1] = 0; }\nBasically a one-liner: since a 64-bit value could go into the data (by\ncast), you put a 64-bit value into the union to ensure alignment.\nOn Thu, Jul 7, 2016 at 11:42 AM, Andrew Selle notifications@github.com\nwrote:\n\nWhat you're saying makes sense. What are some example processor\narchitectures with this property? It's unlikely we are going to support it,\nbut we would be open to a patch that detects this property in a\narchitecture and does this alignment only when necessary. You indicate it\nmight improve performance to do this extra alignment but it actually also\nmight hurt performance, and without testing we are hesitant to make such a\nchange. Adding @vrv https://github.com/vrv to comment.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\n#3186 (comment),\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ABkOanmmqCpZ4crPg83EvlyqGFA_-GfRks5qTSx9gaJpZM4JEg_y\n.", "body": "Some ARM variants will give an exception on misaligned LDRD (but some do\nnot, especially if misaligned support is enabled in ARMv7).\n\nYou'd probably have a problem if someone used the buffer for a double\nprecision value on many targets that don't support misaligned loads and\nstores (MIPS, ARM)\n\nSorry, my patch got formatted by github:\n\n# \n\ndiff --git a/tensorflow/core/lib/gtl/inlined_vector.h\nb/tensorflow/core/lib/gtl/inlined_vector.h\nindex e8fe66c..518b421 100644\n--- a/tensorflow/core/lib/gtl/inlined_vector.h\n+++ b/tensorflow/core/lib/gtl/inlined_vector.h\n@@ -276,6 +276,8 @@ class InlinedVector {\n     unsigned char data[kSize];\n     // Force data to be aligned enough for a pointer.\n     T\\* unused_aligner;\n-    // EJP: force 8 byte alignment, as pointers could be 4-byte but data\n  elements 8-byte\n-    uint64_t unused_64;\n  } u_;\n  \n  # inline void InitRep() { u_.data[kSize - 1] = 0; }\n\nBasically a one-liner: since a 64-bit value could go into the data (by\ncast), you put a 64-bit value into the union to ensure alignment.\n\nOn Thu, Jul 7, 2016 at 11:42 AM, Andrew Selle notifications@github.com\nwrote:\n\n> What you're saying makes sense. What are some example processor\n> architectures with this property? It's unlikely we are going to support it,\n> but we would be open to a patch that detects this property in a\n> architecture and does this alignment only when necessary. You indicate it\n> might improve performance to do this extra alignment but it actually also\n> might hurt performance, and without testing we are hesitant to make such a\n> change. Adding @vrv https://github.com/vrv to comment.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tensorflow/tensorflow/issues/3186#issuecomment-231136191,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/ABkOanmmqCpZ4crPg83EvlyqGFA_-GfRks5qTSx9gaJpZM4JEg_y\n> .\n"}