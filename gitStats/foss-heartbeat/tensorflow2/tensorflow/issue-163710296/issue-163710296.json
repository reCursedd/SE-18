{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3186", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3186/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3186/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3186/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3186", "id": 163710296, "node_id": "MDU6SXNzdWUxNjM3MTAyOTY=", "number": 3186, "title": "Insufficient alignment in u_ union in tensorflow/core/lib/gtl/inlined_vector.h", "user": {"login": "eplondke", "id": 1642090, "node_id": "MDQ6VXNlcjE2NDIwOTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1642090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eplondke", "html_url": "https://github.com/eplondke", "followers_url": "https://api.github.com/users/eplondke/followers", "following_url": "https://api.github.com/users/eplondke/following{/other_user}", "gists_url": "https://api.github.com/users/eplondke/gists{/gist_id}", "starred_url": "https://api.github.com/users/eplondke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eplondke/subscriptions", "organizations_url": "https://api.github.com/users/eplondke/orgs", "repos_url": "https://api.github.com/users/eplondke/repos", "events_url": "https://api.github.com/users/eplondke/events{/privacy}", "received_events_url": "https://api.github.com/users/eplondke/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-07-04T16:47:23Z", "updated_at": "2017-06-16T17:45:09Z", "closed_at": "2017-06-16T17:45:09Z", "author_association": "NONE", "body_html": "<h3>Environment info</h3>\n<p>Operating System: Linux</p>\n<p>Installed version of CUDA and cuDNN: None</p>\n<p>If installed from sources, provide the commit hash: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/aa2cacd6627ffb296bedc910c957a0fd4a2f957f/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/aa2cacd6627ffb296bedc910c957a0fd4a2f957f\"><tt>aa2cacd</tt></a></p>\n<h3>Steps to reproduce</h3>\n<ol>\n<li>Find an architecture with 32 bit pointers but strict alignment requirements for 64 bit</li>\n<li>Compile and run \"benchmark\" from tensorflow/contrib/makefile</li>\n<li>Get bus error from misaligned pointer</li>\n</ol>\n<h3>What have you tried?</h3>\n<ol>\n<li>Fixing the issue by increasing the u_ alignment.  This works.</li>\n</ol>\n<p>In tensorflow/core/lib/gtl/inlined_vector.h, the data buf is aligned by adding a pointer.  However, it is cast to other types, including uint64_t.  On architectures where pointers are 32 bits, this cast causes errors.</p>\n<p>The fix is to add another component to the union that will force alignment to the largest size, such as uint64_t.</p>\n<p>For example:</p>\n<p>diff --git a/tensorflow/core/lib/gtl/inlined_vector.h b/tensorflow/core/lib/gtl/inlined_vector.h<br>\nindex e8fe66c..518b421 100644<br>\n--- a/tensorflow/core/lib/gtl/inlined_vector.h<br>\n+++ b/tensorflow/core/lib/gtl/inlined_vector.h<br>\n@@ -276,6 +276,8 @@ class InlinedVector {<br>\nunsigned char data[kSize];<br>\n// Force data to be aligned enough for a pointer.<br>\nT* unused_aligner;</p>\n<ul>\n<li>// EJP: force 8 byte alignment, as pointers could be 4-byte but data elements 8-byte?</li>\n<li>uint64_t unused_64;<br>\n} u_;</li>\n</ul>\n<p>You won't see this issue on architectures where pointers are the size of the largest type (aarch64, x86-64) or where a 32-bit architecture loads 64-bit things but can do so at arbitrary 32-bit boundaries (x86, armv7 with misaligned pointers enabled).</p>\n<p>But it might improve performance to have 64-bit values on 64-bit boundaries.</p>", "body_text": "Environment info\nOperating System: Linux\nInstalled version of CUDA and cuDNN: None\nIf installed from sources, provide the commit hash: aa2cacd\nSteps to reproduce\n\nFind an architecture with 32 bit pointers but strict alignment requirements for 64 bit\nCompile and run \"benchmark\" from tensorflow/contrib/makefile\nGet bus error from misaligned pointer\n\nWhat have you tried?\n\nFixing the issue by increasing the u_ alignment.  This works.\n\nIn tensorflow/core/lib/gtl/inlined_vector.h, the data buf is aligned by adding a pointer.  However, it is cast to other types, including uint64_t.  On architectures where pointers are 32 bits, this cast causes errors.\nThe fix is to add another component to the union that will force alignment to the largest size, such as uint64_t.\nFor example:\ndiff --git a/tensorflow/core/lib/gtl/inlined_vector.h b/tensorflow/core/lib/gtl/inlined_vector.h\nindex e8fe66c..518b421 100644\n--- a/tensorflow/core/lib/gtl/inlined_vector.h\n+++ b/tensorflow/core/lib/gtl/inlined_vector.h\n@@ -276,6 +276,8 @@ class InlinedVector {\nunsigned char data[kSize];\n// Force data to be aligned enough for a pointer.\nT* unused_aligner;\n\n// EJP: force 8 byte alignment, as pointers could be 4-byte but data elements 8-byte?\nuint64_t unused_64;\n} u_;\n\nYou won't see this issue on architectures where pointers are the size of the largest type (aarch64, x86-64) or where a 32-bit architecture loads 64-bit things but can do so at arbitrary 32-bit boundaries (x86, armv7 with misaligned pointers enabled).\nBut it might improve performance to have 64-bit values on 64-bit boundaries.", "body": "### Environment info\n\nOperating System: Linux\n\nInstalled version of CUDA and cuDNN: None\n\nIf installed from sources, provide the commit hash: aa2cacd6627ffb296bedc910c957a0fd4a2f957f\n### Steps to reproduce\n1. Find an architecture with 32 bit pointers but strict alignment requirements for 64 bit\n2. Compile and run \"benchmark\" from tensorflow/contrib/makefile\n3. Get bus error from misaligned pointer\n### What have you tried?\n1. Fixing the issue by increasing the u_ alignment.  This works.\n\nIn tensorflow/core/lib/gtl/inlined_vector.h, the data buf is aligned by adding a pointer.  However, it is cast to other types, including uint64_t.  On architectures where pointers are 32 bits, this cast causes errors.\n\nThe fix is to add another component to the union that will force alignment to the largest size, such as uint64_t.\n\nFor example:\n\ndiff --git a/tensorflow/core/lib/gtl/inlined_vector.h b/tensorflow/core/lib/gtl/inlined_vector.h\nindex e8fe66c..518b421 100644\n--- a/tensorflow/core/lib/gtl/inlined_vector.h\n+++ b/tensorflow/core/lib/gtl/inlined_vector.h\n@@ -276,6 +276,8 @@ class InlinedVector {\n     unsigned char data[kSize];\n     // Force data to be aligned enough for a pointer.\n     T\\* unused_aligner;\n-    // EJP: force 8 byte alignment, as pointers could be 4-byte but data elements 8-byte?\n-    uint64_t unused_64;\n  } u_;\n\nYou won't see this issue on architectures where pointers are the size of the largest type (aarch64, x86-64) or where a 32-bit architecture loads 64-bit things but can do so at arbitrary 32-bit boundaries (x86, armv7 with misaligned pointers enabled).  \n\nBut it might improve performance to have 64-bit values on 64-bit boundaries.\n"}