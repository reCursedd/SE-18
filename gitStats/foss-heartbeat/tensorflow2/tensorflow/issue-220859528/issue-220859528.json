{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9125", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9125/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9125/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9125/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9125", "id": 220859528, "node_id": "MDU6SXNzdWUyMjA4NTk1Mjg=", "number": 9125, "title": "KeyError in tf.contrib.graph_editor.graph_replace", "user": {"login": "poolio", "id": 718528, "node_id": "MDQ6VXNlcjcxODUyOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/718528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poolio", "html_url": "https://github.com/poolio", "followers_url": "https://api.github.com/users/poolio/followers", "following_url": "https://api.github.com/users/poolio/following{/other_user}", "gists_url": "https://api.github.com/users/poolio/gists{/gist_id}", "starred_url": "https://api.github.com/users/poolio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poolio/subscriptions", "organizations_url": "https://api.github.com/users/poolio/orgs", "repos_url": "https://api.github.com/users/poolio/repos", "events_url": "https://api.github.com/users/poolio/events{/privacy}", "received_events_url": "https://api.github.com/users/poolio/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-04-11T07:12:56Z", "updated_at": "2018-01-24T13:36:31Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>When applying <code>graph_replace</code> to graphs containing ops with the <code>_original_op</code> attribute, it can fail with a <code>KeyError</code>. The error occurs in <code>Transformer._copy_ops</code> when trying to copy an op whose <code>_original_op</code> has not yet been copied. The ordering of ops that are copied is not deterministic so this error pops up somewhat randomly.</p>\n<p>The <code>_original_op</code> attributes appear to be created by <code>tf.gradients</code> to point back to the op from the forward pass.</p>\n<p>Example code snippet (note: you may need to run this multiple times to get a failure):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\ngraph_replace <span class=\"pl-k\">=</span> tf.contrib.graph_editor.graph_replace\nw <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">0.0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>w<span class=\"pl-pds\">\"</span></span>)\ny <span class=\"pl-k\">=</span> tf.multiply(tf.multiply(w, w, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mul1<span class=\"pl-pds\">\"</span></span>), w, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mul2<span class=\"pl-pds\">\"</span></span>)\ng <span class=\"pl-k\">=</span> tf.gradients(y, w)[<span class=\"pl-c1\">0</span>]\ng_new <span class=\"pl-k\">=</span> graph_replace(g, {w.value(): g})</pre></div>\n<p>Error:</p>\n<pre><code>/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/graph_editor/transform.py in transform_op_if_inside_handler(info, op, keep_if_possible)\n    122   \"\"\"\n    123   if op in info.sgv.ops:\n--&gt; 124     return info.transformed_ops[op]\n    125   else:\n    126     if keep_if_possible and info.graph is info.graph_:\n\nKeyError: &lt;tf.Operation 'mul1' type=Mul&gt;\n</code></pre>\n<p>I see three possible fixes:</p>\n<ol>\n<li>Remove <code>_original_op</code> attributes in the copied graph (I don't see anywhere in the TF codebase where it is used)</li>\n<li>Move the creation of the <code>_original_op</code> attribute from the <code>copy_op_handler</code> function to the end of <code>Transformer._copy_ops</code> after all ops have been copied.</li>\n<li>Topologically sort the ops being copied so that ops that are <code>_original_op</code> attributes are created before their children.</li>\n</ol>\n<p>My <a href=\"https://github.com/poolio/tensorflow/pull/1/files\">implementation</a> of option 2 seems to fix this problem, but I might be missing something about the usage of <code>_original_op</code>.</p>", "body_text": "When applying graph_replace to graphs containing ops with the _original_op attribute, it can fail with a KeyError. The error occurs in Transformer._copy_ops when trying to copy an op whose _original_op has not yet been copied. The ordering of ops that are copied is not deterministic so this error pops up somewhat randomly.\nThe _original_op attributes appear to be created by tf.gradients to point back to the op from the forward pass.\nExample code snippet (note: you may need to run this multiple times to get a failure):\nimport tensorflow as tf\ngraph_replace = tf.contrib.graph_editor.graph_replace\nw = tf.Variable(0.0, name=\"w\")\ny = tf.multiply(tf.multiply(w, w, name=\"mul1\"), w, name=\"mul2\")\ng = tf.gradients(y, w)[0]\ng_new = graph_replace(g, {w.value(): g})\nError:\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/graph_editor/transform.py in transform_op_if_inside_handler(info, op, keep_if_possible)\n    122   \"\"\"\n    123   if op in info.sgv.ops:\n--> 124     return info.transformed_ops[op]\n    125   else:\n    126     if keep_if_possible and info.graph is info.graph_:\n\nKeyError: <tf.Operation 'mul1' type=Mul>\n\nI see three possible fixes:\n\nRemove _original_op attributes in the copied graph (I don't see anywhere in the TF codebase where it is used)\nMove the creation of the _original_op attribute from the copy_op_handler function to the end of Transformer._copy_ops after all ops have been copied.\nTopologically sort the ops being copied so that ops that are _original_op attributes are created before their children.\n\nMy implementation of option 2 seems to fix this problem, but I might be missing something about the usage of _original_op.", "body": "When applying `graph_replace` to graphs containing ops with the `_original_op` attribute, it can fail with a `KeyError`. The error occurs in `Transformer._copy_ops` when trying to copy an op whose `_original_op` has not yet been copied. The ordering of ops that are copied is not deterministic so this error pops up somewhat randomly.\r\n\r\nThe `_original_op` attributes appear to be created by `tf.gradients` to point back to the op from the forward pass.\r\n\r\nExample code snippet (note: you may need to run this multiple times to get a failure):\r\n```python\r\nimport tensorflow as tf\r\ngraph_replace = tf.contrib.graph_editor.graph_replace\r\nw = tf.Variable(0.0, name=\"w\")\r\ny = tf.multiply(tf.multiply(w, w, name=\"mul1\"), w, name=\"mul2\")\r\ng = tf.gradients(y, w)[0]\r\ng_new = graph_replace(g, {w.value(): g})\r\n```\r\n\r\nError:\r\n```\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/graph_editor/transform.py in transform_op_if_inside_handler(info, op, keep_if_possible)\r\n    122   \"\"\"\r\n    123   if op in info.sgv.ops:\r\n--> 124     return info.transformed_ops[op]\r\n    125   else:\r\n    126     if keep_if_possible and info.graph is info.graph_:\r\n\r\nKeyError: <tf.Operation 'mul1' type=Mul>\r\n```\r\n\r\nI see three possible fixes:\r\n1. Remove `_original_op` attributes in the copied graph (I don't see anywhere in the TF codebase where it is used)\r\n2. Move the creation of the `_original_op` attribute from the `copy_op_handler` function to the end of `Transformer._copy_ops` after all ops have been copied.\r\n3. Topologically sort the ops being copied so that ops that are `_original_op` attributes are created before their children.\r\n\r\nMy [implementation](https://github.com/poolio/tensorflow/pull/1/files) of option 2 seems to fix this problem, but I might be missing something about the usage of `_original_op`."}