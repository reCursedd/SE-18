{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/339396685", "html_url": "https://github.com/tensorflow/tensorflow/issues/13963#issuecomment-339396685", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13963", "id": 339396685, "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTM5NjY4NQ==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-25T16:53:25Z", "updated_at": "2017-10-25T16:53:25Z", "author_association": "MEMBER", "body_html": "<p>(I'm assuming this is a symbol conflict based on the symptoms you've posted; I haven't looked into it thoroughly, so feel free to correct me)</p>\n<p>The good news is that newer versions of TensorFlow (1.4+) will not cause problems like this, since we're no longer loading our symbols into the global symbol table. The bad news is that other libraries which export symbols via RTLD_GLOBAL can still cause problems for TensorFlow.</p>\n<p>You could theoretically work around this problem by adding RTLD_DEEPBIND to the dlopen call in pywrap_tensorflow.py. This would break workflows which depend on redefining TensorFlow symbols (LD_PRELOAD), so we don't do it by default.</p>\n<p>So basically this is contributions welcome if you have a reasonable way for us to avoid this symbol conflict (i.e. not contorting too much). Otherwise you can file a bug with the other library (since they're the ones exporting symbols globally; but do make sure you can reproduce in TF 1.4, since TF 1.3 can definitely cause these problems).</p>", "body_text": "(I'm assuming this is a symbol conflict based on the symptoms you've posted; I haven't looked into it thoroughly, so feel free to correct me)\nThe good news is that newer versions of TensorFlow (1.4+) will not cause problems like this, since we're no longer loading our symbols into the global symbol table. The bad news is that other libraries which export symbols via RTLD_GLOBAL can still cause problems for TensorFlow.\nYou could theoretically work around this problem by adding RTLD_DEEPBIND to the dlopen call in pywrap_tensorflow.py. This would break workflows which depend on redefining TensorFlow symbols (LD_PRELOAD), so we don't do it by default.\nSo basically this is contributions welcome if you have a reasonable way for us to avoid this symbol conflict (i.e. not contorting too much). Otherwise you can file a bug with the other library (since they're the ones exporting symbols globally; but do make sure you can reproduce in TF 1.4, since TF 1.3 can definitely cause these problems).", "body": "(I'm assuming this is a symbol conflict based on the symptoms you've posted; I haven't looked into it thoroughly, so feel free to correct me)\r\n\r\nThe good news is that newer versions of TensorFlow (1.4+) will not cause problems like this, since we're no longer loading our symbols into the global symbol table. The bad news is that other libraries which export symbols via RTLD_GLOBAL can still cause problems for TensorFlow.\r\n\r\nYou could theoretically work around this problem by adding RTLD_DEEPBIND to the dlopen call in pywrap_tensorflow.py. This would break workflows which depend on redefining TensorFlow symbols (LD_PRELOAD), so we don't do it by default.\r\n\r\nSo basically this is contributions welcome if you have a reasonable way for us to avoid this symbol conflict (i.e. not contorting too much). Otherwise you can file a bug with the other library (since they're the ones exporting symbols globally; but do make sure you can reproduce in TF 1.4, since TF 1.3 can definitely cause these problems)."}