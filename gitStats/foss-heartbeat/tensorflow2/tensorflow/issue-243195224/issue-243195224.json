{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11521", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11521/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11521/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11521/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11521", "id": 243195224, "node_id": "MDU6SXNzdWUyNDMxOTUyMjQ=", "number": 11521, "title": "[go bindings] Printing graph in a text format", "user": {"login": "dicaormu", "id": 9915585, "node_id": "MDQ6VXNlcjk5MTU1ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/9915585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dicaormu", "html_url": "https://github.com/dicaormu", "followers_url": "https://api.github.com/users/dicaormu/followers", "following_url": "https://api.github.com/users/dicaormu/following{/other_user}", "gists_url": "https://api.github.com/users/dicaormu/gists{/gist_id}", "starred_url": "https://api.github.com/users/dicaormu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dicaormu/subscriptions", "organizations_url": "https://api.github.com/users/dicaormu/orgs", "repos_url": "https://api.github.com/users/dicaormu/repos", "events_url": "https://api.github.com/users/dicaormu/events{/privacy}", "received_events_url": "https://api.github.com/users/dicaormu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2017-07-15T19:30:26Z", "updated_at": "2018-11-22T18:52:19Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>I was looking for a function  that allows me (like in python) to print the graph in a readable way.</p>\n<p>If you open a GitHub issue, here is our policy:</p>\n<p><strong>Here's why we have that policy</strong>: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: no</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: MacOs X</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.1.0</li>\n<li><strong>Python version</strong>: 2.7.13</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nIn python i can do:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nsess <span class=\"pl-k\">=</span> tf.InteractiveSession()\n<span class=\"pl-k\">with</span> tf.gfile.FastGFile(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>graphname.pb<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n    graph_def <span class=\"pl-k\">=</span> tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    _ <span class=\"pl-k\">=</span> tf.import_graph_def(graph_def, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>)\n    \n<span class=\"pl-c\"><span class=\"pl-c\">#</span> All operations</span>\nsess.graph.get_operations()</pre></div>\n<p>that prints the operations of my graph</p>\n<p>In go i just have the option:</p>\n<pre><code>graph := tf.NewGraph()\nif err := graph.Import(model, \"\"); err != nil {\n\t\tlog.Fatal(err)\n\t}\nf, err := os.Create(\"logWritter.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tgraph.WriteTo(f)\n</code></pre>\n<p>it prints the binary graph.</p>\n<h3>Describe the problem</h3>\n<p>When using a model, previously trained by somebody else, it is very useful to know the nodes to reference them.  It should be nice to have the same option with go.</p>", "body_text": "I was looking for a function  that allows me (like in python) to print the graph in a readable way.\nIf you open a GitHub issue, here is our policy:\nHere's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOs X\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.1.0\nPython version: 2.7.13\nBazel version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\nIn python i can do:\n\nimport tensorflow as tf\n\nsess = tf.InteractiveSession()\nwith tf.gfile.FastGFile(\"graphname.pb\", 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    _ = tf.import_graph_def(graph_def, name='')\n    \n# All operations\nsess.graph.get_operations()\nthat prints the operations of my graph\nIn go i just have the option:\ngraph := tf.NewGraph()\nif err := graph.Import(model, \"\"); err != nil {\n\t\tlog.Fatal(err)\n\t}\nf, err := os.Create(\"logWritter.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tgraph.WriteTo(f)\n\nit prints the binary graph.\nDescribe the problem\nWhen using a model, previously trained by somebody else, it is very useful to know the nodes to reference them.  It should be nice to have the same option with go.", "body": "I was looking for a function  that allows me (like in python) to print the graph in a readable way.\r\n \r\nIf you open a GitHub issue, here is our policy:\r\n\r\n**Here's why we have that policy**: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: no\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: MacOs X\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.1.0\r\n- **Python version**: 2.7.13\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**: \r\n- **Exact command to reproduce**:\r\nIn python i can do:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nsess = tf.InteractiveSession()\r\nwith tf.gfile.FastGFile(\"graphname.pb\", 'rb') as f:\r\n    graph_def = tf.GraphDef()\r\n    graph_def.ParseFromString(f.read())\r\n    _ = tf.import_graph_def(graph_def, name='')\r\n    \r\n# All operations\r\nsess.graph.get_operations()\r\n```\r\n\r\nthat prints the operations of my graph\r\n\r\nIn go i just have the option:\r\n\r\n```\r\ngraph := tf.NewGraph()\r\nif err := graph.Import(model, \"\"); err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\nf, err := os.Create(\"logWritter.txt\")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tgraph.WriteTo(f)\r\n```\r\nit prints the binary graph.\r\n\r\n### Describe the problem\r\nWhen using a model, previously trained by somebody else, it is very useful to know the nodes to reference them.  It should be nice to have the same option with go."}