{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3435", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3435/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3435/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3435/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3435", "id": 166737780, "node_id": "MDU6SXNzdWUxNjY3Mzc3ODA=", "number": 3435, "title": "Segmentation fault in Diagnostician on MacOS", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-07-21T05:01:15Z", "updated_at": "2016-07-21T21:25:35Z", "closed_at": "2016-07-21T21:25:35Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I get segmentation fault on MacOS on creating new session if GPU is unavailable (ie, through <code>export CUDA_VISIBLE_DEVICES=</code>)</p>\n<p>It's due to this <a href=\"https://github.com/tensorflow/tensorflow/blob/d42facc3cc9611f0c9722c81551a7404a0bd3f6b/tensorflow/stream_executor/cuda/cuda_diagnostics.cc#L319\">line</a></p>\n<pre><code>    const char * version = CFStringGetCStringPtr((CFStringRef)CFDictionaryGetValue(cuda_driver_info,   kCFBundleVersionKey), kCFStringEncodingUTF8);\n    CFRelease(kext_infos);\n    return StringToDriverVersion(version);\n\n</code></pre>\n<p><code>version</code> is a NULL, which causes SEGSERV during conversion to string.</p>\n<p>Documentation for <code>CFStringGetCStringPtr</code> says that <a href=\"https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFStrings/Articles/AccessingContents.html#//apple_ref/doc/uid/20001184-100980-TPXREF112\" rel=\"nofollow\">one should check for NULL</a> and call <code>CFStringGetCString</code> if so</p>\n<pre><code>bazel build -c dbg --config=cuda //tensorflow/tools/pip_package:build_pip_package\nexport CUDA_VISIBLE_DEVICES=\ncat &gt; simple.py\nimport tensorflow as tf\nsess = tf.Session()\n^D\n\nlldb python\n(lldb) r simple.py\n\nProcess 48123 stopped\n* thread #1: tid = 0x37a6a8, 0x00007fff9b24d152 libsystem_c.dylib`strlen + 18, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)\n    frame #0: 0x00007fff9b24d152 libsystem_c.dylib`strlen + 18\nlibsystem_c.dylib`strlen:\n-&gt;  0x7fff9b24d152 &lt;+18&gt;: pcmpeqb (%rdi), %xmm0\n    0x7fff9b24d156 &lt;+22&gt;: pmovmskb %xmm0, %esi\n    0x7fff9b24d15a &lt;+26&gt;: andq   $0xf, %rcx\n    0x7fff9b24d15e &lt;+30&gt;: orq    $-0x1, %rax\n\n(lldb) up\nup\nframe #1: 0x00000001036ecb05 _pywrap_tensorflow.so`std::__1::char_traits&lt;char&gt;::length(__s=0x0000000000000000) + 21 at string:640\n   637  \n   638      static inline int compare(const char_type* __s1, const char_type* __s2, size_t __n)\n   639          {return __n == 0 ? 0 : memcmp(__s1, __s2, __n);}\n-&gt; 640      static inline size_t length(const char_type* __s) {return strlen(__s);}\n   641      static inline const char_type* find(const char_type* __s, size_t __n, const char_type&amp; __a)\n   642          {return __n == 0 ? NULL : (const char_type*) memchr(__s, to_int_type(__a), __n);}\n   643      static inline char_type* move(char_type* __s1, const char_type* __s2, size_t __n)\n(lldb) up\nup\nframe #2: 0x0000000107725ac5 _pywrap_tensorflow.so`perftools::gputools::cuda::Diagnostician::FindKernelDriverVersion() [inlined] std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(this=\"\", __s=0x0000000000000000) + 81 at string:2005\n   2002 basic_string&lt;_CharT, _Traits, _Allocator&gt;::basic_string(const value_type* __s)\n   2003 {\n   2004     _LIBCPP_ASSERT(__s != nullptr, \"basic_string(const char*) detected nullptr\");\n-&gt; 2005     __init(__s, traits_type::length(__s));\n   2006 #if _LIBCPP_DEBUG_LEVEL &gt;= 2\n   2007     __get_db()-&gt;__insert_c(this);\n   2008 #endif\n(lldb) up\nup\nframe #3: 0x0000000107725a74 _pywrap_tensorflow.so`perftools::gputools::cuda::Diagnostician::FindKernelDriverVersion() [inlined] std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(this=\"\", __s=0x0000000000000000) + 21 at string:2003\n   2000 template &lt;class _CharT, class _Traits, class _Allocator&gt;\n   2001 inline _LIBCPP_INLINE_VISIBILITY\n   2002 basic_string&lt;_CharT, _Traits, _Allocator&gt;::basic_string(const value_type* __s)\n-&gt; 2003 {\n   2004     _LIBCPP_ASSERT(__s != nullptr, \"basic_string(const char*) detected nullptr\");\n   2005     __init(__s, traits_type::length(__s));\n   2006 #if _LIBCPP_DEBUG_LEVEL &gt;= 2\n(lldb) up\nup\nframe #4: 0x0000000107725a5f _pywrap_tensorflow.so`perftools::gputools::cuda::Diagnostician::FindKernelDriverVersion() + 287 at cuda_diagnostics.cc:319\n   316      // in kCFBundleVersionKey as is returned by cuDriverGetVersion\n   317      const char * version = CFStringGetCStringPtr((CFStringRef)CFDictionaryGetValue(cuda_driver_info, kCFBundleVersionKey), kCFStringEncodingUTF8);\n   318      CFRelease(kext_infos);\n-&gt; 319      return StringToDriverVersion(version);\n(lldb) frame variable --no-args\nframe variable --no-args\n(CFStringRef [1]) kext_ids = ([0] = 0x0000000108767208)\n(CFArrayRef) kext_id_query = 0x000000013e1f2190\n(CFDictionaryRef) kext_infos = 0x000000013e1f21d0\n(CFDictionaryRef) cuda_driver_info = 0x000000013f322700\n(tensorflow::Status) status = {\n  state_ = 0x000000011ec8000a\n}\n(const char *) version = 0x0000000000000000\n\n</code></pre>\n<p>related <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"161502679\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/2980\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/2980/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/2980\">#2980</a></p>", "body_text": "I get segmentation fault on MacOS on creating new session if GPU is unavailable (ie, through export CUDA_VISIBLE_DEVICES=)\nIt's due to this line\n    const char * version = CFStringGetCStringPtr((CFStringRef)CFDictionaryGetValue(cuda_driver_info,   kCFBundleVersionKey), kCFStringEncodingUTF8);\n    CFRelease(kext_infos);\n    return StringToDriverVersion(version);\n\n\nversion is a NULL, which causes SEGSERV during conversion to string.\nDocumentation for CFStringGetCStringPtr says that one should check for NULL and call CFStringGetCString if so\nbazel build -c dbg --config=cuda //tensorflow/tools/pip_package:build_pip_package\nexport CUDA_VISIBLE_DEVICES=\ncat > simple.py\nimport tensorflow as tf\nsess = tf.Session()\n^D\n\nlldb python\n(lldb) r simple.py\n\nProcess 48123 stopped\n* thread #1: tid = 0x37a6a8, 0x00007fff9b24d152 libsystem_c.dylib`strlen + 18, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)\n    frame #0: 0x00007fff9b24d152 libsystem_c.dylib`strlen + 18\nlibsystem_c.dylib`strlen:\n->  0x7fff9b24d152 <+18>: pcmpeqb (%rdi), %xmm0\n    0x7fff9b24d156 <+22>: pmovmskb %xmm0, %esi\n    0x7fff9b24d15a <+26>: andq   $0xf, %rcx\n    0x7fff9b24d15e <+30>: orq    $-0x1, %rax\n\n(lldb) up\nup\nframe #1: 0x00000001036ecb05 _pywrap_tensorflow.so`std::__1::char_traits<char>::length(__s=0x0000000000000000) + 21 at string:640\n   637  \n   638      static inline int compare(const char_type* __s1, const char_type* __s2, size_t __n)\n   639          {return __n == 0 ? 0 : memcmp(__s1, __s2, __n);}\n-> 640      static inline size_t length(const char_type* __s) {return strlen(__s);}\n   641      static inline const char_type* find(const char_type* __s, size_t __n, const char_type& __a)\n   642          {return __n == 0 ? NULL : (const char_type*) memchr(__s, to_int_type(__a), __n);}\n   643      static inline char_type* move(char_type* __s1, const char_type* __s2, size_t __n)\n(lldb) up\nup\nframe #2: 0x0000000107725ac5 _pywrap_tensorflow.so`perftools::gputools::cuda::Diagnostician::FindKernelDriverVersion() [inlined] std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(this=\"\", __s=0x0000000000000000) + 81 at string:2005\n   2002 basic_string<_CharT, _Traits, _Allocator>::basic_string(const value_type* __s)\n   2003 {\n   2004     _LIBCPP_ASSERT(__s != nullptr, \"basic_string(const char*) detected nullptr\");\n-> 2005     __init(__s, traits_type::length(__s));\n   2006 #if _LIBCPP_DEBUG_LEVEL >= 2\n   2007     __get_db()->__insert_c(this);\n   2008 #endif\n(lldb) up\nup\nframe #3: 0x0000000107725a74 _pywrap_tensorflow.so`perftools::gputools::cuda::Diagnostician::FindKernelDriverVersion() [inlined] std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(this=\"\", __s=0x0000000000000000) + 21 at string:2003\n   2000 template <class _CharT, class _Traits, class _Allocator>\n   2001 inline _LIBCPP_INLINE_VISIBILITY\n   2002 basic_string<_CharT, _Traits, _Allocator>::basic_string(const value_type* __s)\n-> 2003 {\n   2004     _LIBCPP_ASSERT(__s != nullptr, \"basic_string(const char*) detected nullptr\");\n   2005     __init(__s, traits_type::length(__s));\n   2006 #if _LIBCPP_DEBUG_LEVEL >= 2\n(lldb) up\nup\nframe #4: 0x0000000107725a5f _pywrap_tensorflow.so`perftools::gputools::cuda::Diagnostician::FindKernelDriverVersion() + 287 at cuda_diagnostics.cc:319\n   316      // in kCFBundleVersionKey as is returned by cuDriverGetVersion\n   317      const char * version = CFStringGetCStringPtr((CFStringRef)CFDictionaryGetValue(cuda_driver_info, kCFBundleVersionKey), kCFStringEncodingUTF8);\n   318      CFRelease(kext_infos);\n-> 319      return StringToDriverVersion(version);\n(lldb) frame variable --no-args\nframe variable --no-args\n(CFStringRef [1]) kext_ids = ([0] = 0x0000000108767208)\n(CFArrayRef) kext_id_query = 0x000000013e1f2190\n(CFDictionaryRef) kext_infos = 0x000000013e1f21d0\n(CFDictionaryRef) cuda_driver_info = 0x000000013f322700\n(tensorflow::Status) status = {\n  state_ = 0x000000011ec8000a\n}\n(const char *) version = 0x0000000000000000\n\n\nrelated #2980", "body": "I get segmentation fault on MacOS on creating new session if GPU is unavailable (ie, through `export CUDA_VISIBLE_DEVICES=`)\n\nIt's due to this [line](https://github.com/tensorflow/tensorflow/blob/d42facc3cc9611f0c9722c81551a7404a0bd3f6b/tensorflow/stream_executor/cuda/cuda_diagnostics.cc#L319)\n\n```\n    const char * version = CFStringGetCStringPtr((CFStringRef)CFDictionaryGetValue(cuda_driver_info,   kCFBundleVersionKey), kCFStringEncodingUTF8);\n    CFRelease(kext_infos);\n    return StringToDriverVersion(version);\n\n```\n\n`version` is a NULL, which causes SEGSERV during conversion to string. \n\nDocumentation for `CFStringGetCStringPtr` says that [one should check for NULL](https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFStrings/Articles/AccessingContents.html#//apple_ref/doc/uid/20001184-100980-TPXREF112) and call `CFStringGetCString` if so\n\n```\nbazel build -c dbg --config=cuda //tensorflow/tools/pip_package:build_pip_package\nexport CUDA_VISIBLE_DEVICES=\ncat > simple.py\nimport tensorflow as tf\nsess = tf.Session()\n^D\n\nlldb python\n(lldb) r simple.py\n\nProcess 48123 stopped\n* thread #1: tid = 0x37a6a8, 0x00007fff9b24d152 libsystem_c.dylib`strlen + 18, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)\n    frame #0: 0x00007fff9b24d152 libsystem_c.dylib`strlen + 18\nlibsystem_c.dylib`strlen:\n->  0x7fff9b24d152 <+18>: pcmpeqb (%rdi), %xmm0\n    0x7fff9b24d156 <+22>: pmovmskb %xmm0, %esi\n    0x7fff9b24d15a <+26>: andq   $0xf, %rcx\n    0x7fff9b24d15e <+30>: orq    $-0x1, %rax\n\n(lldb) up\nup\nframe #1: 0x00000001036ecb05 _pywrap_tensorflow.so`std::__1::char_traits<char>::length(__s=0x0000000000000000) + 21 at string:640\n   637  \n   638      static inline int compare(const char_type* __s1, const char_type* __s2, size_t __n)\n   639          {return __n == 0 ? 0 : memcmp(__s1, __s2, __n);}\n-> 640      static inline size_t length(const char_type* __s) {return strlen(__s);}\n   641      static inline const char_type* find(const char_type* __s, size_t __n, const char_type& __a)\n   642          {return __n == 0 ? NULL : (const char_type*) memchr(__s, to_int_type(__a), __n);}\n   643      static inline char_type* move(char_type* __s1, const char_type* __s2, size_t __n)\n(lldb) up\nup\nframe #2: 0x0000000107725ac5 _pywrap_tensorflow.so`perftools::gputools::cuda::Diagnostician::FindKernelDriverVersion() [inlined] std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(this=\"\", __s=0x0000000000000000) + 81 at string:2005\n   2002 basic_string<_CharT, _Traits, _Allocator>::basic_string(const value_type* __s)\n   2003 {\n   2004     _LIBCPP_ASSERT(__s != nullptr, \"basic_string(const char*) detected nullptr\");\n-> 2005     __init(__s, traits_type::length(__s));\n   2006 #if _LIBCPP_DEBUG_LEVEL >= 2\n   2007     __get_db()->__insert_c(this);\n   2008 #endif\n(lldb) up\nup\nframe #3: 0x0000000107725a74 _pywrap_tensorflow.so`perftools::gputools::cuda::Diagnostician::FindKernelDriverVersion() [inlined] std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(this=\"\", __s=0x0000000000000000) + 21 at string:2003\n   2000 template <class _CharT, class _Traits, class _Allocator>\n   2001 inline _LIBCPP_INLINE_VISIBILITY\n   2002 basic_string<_CharT, _Traits, _Allocator>::basic_string(const value_type* __s)\n-> 2003 {\n   2004     _LIBCPP_ASSERT(__s != nullptr, \"basic_string(const char*) detected nullptr\");\n   2005     __init(__s, traits_type::length(__s));\n   2006 #if _LIBCPP_DEBUG_LEVEL >= 2\n(lldb) up\nup\nframe #4: 0x0000000107725a5f _pywrap_tensorflow.so`perftools::gputools::cuda::Diagnostician::FindKernelDriverVersion() + 287 at cuda_diagnostics.cc:319\n   316      // in kCFBundleVersionKey as is returned by cuDriverGetVersion\n   317      const char * version = CFStringGetCStringPtr((CFStringRef)CFDictionaryGetValue(cuda_driver_info, kCFBundleVersionKey), kCFStringEncodingUTF8);\n   318      CFRelease(kext_infos);\n-> 319      return StringToDriverVersion(version);\n(lldb) frame variable --no-args\nframe variable --no-args\n(CFStringRef [1]) kext_ids = ([0] = 0x0000000108767208)\n(CFArrayRef) kext_id_query = 0x000000013e1f2190\n(CFDictionaryRef) kext_infos = 0x000000013e1f21d0\n(CFDictionaryRef) cuda_driver_info = 0x000000013f322700\n(tensorflow::Status) status = {\n  state_ = 0x000000011ec8000a\n}\n(const char *) version = 0x0000000000000000\n\n```\n\nrelated #2980 \n"}