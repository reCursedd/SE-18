{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20086", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20086/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20086/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20086/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20086", "id": 333097463, "node_id": "MDU6SXNzdWUzMzMwOTc0NjM=", "number": 20086, "title": "Potential overflow in libhdfs wrapper", "user": {"login": "superbobry", "id": 185856, "node_id": "MDQ6VXNlcjE4NTg1Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/185856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/superbobry", "html_url": "https://github.com/superbobry", "followers_url": "https://api.github.com/users/superbobry/followers", "following_url": "https://api.github.com/users/superbobry/following{/other_user}", "gists_url": "https://api.github.com/users/superbobry/gists{/gist_id}", "starred_url": "https://api.github.com/users/superbobry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/superbobry/subscriptions", "organizations_url": "https://api.github.com/users/superbobry/orgs", "repos_url": "https://api.github.com/users/superbobry/repos", "events_url": "https://api.github.com/users/superbobry/events{/privacy}", "received_events_url": "https://api.github.com/users/superbobry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-06-17T22:17:45Z", "updated_at": "2018-11-14T19:20:53Z", "closed_at": null, "author_association": "MEMBER", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: macOS</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.8.0-0-g93bc2e2072 1.8.0</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: see below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The following snippet works fine until 2^30; 2^31 results in EINVAL, and &gt;2^31 it produces zero-sized files. I wonder if this is an issue in the TF wrapper or rather in libhdfs itself.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">for</span> size <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">2</span><span class=\"pl-k\">**</span><span class=\"pl-c1\">30</span>, <span class=\"pl-c1\">2</span><span class=\"pl-k\">**</span><span class=\"pl-c1\">31</span>, <span class=\"pl-c1\">2</span><span class=\"pl-k\">**</span><span class=\"pl-c1\">32</span>]:\n<span class=\"pl-c1\">...</span>     <span class=\"pl-k\">try</span>:\n<span class=\"pl-c1\">...</span>         result <span class=\"pl-k\">=</span> write_read(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hdfs://root/user/s.lebedev/test<span class=\"pl-pds\">\"</span></span>, size)\n<span class=\"pl-c1\">...</span>     <span class=\"pl-k\">except</span> <span class=\"pl-c1\">Exception</span> <span class=\"pl-k\">as</span> e:\n<span class=\"pl-c1\">...</span>         result <span class=\"pl-k\">=</span> e\n<span class=\"pl-c1\">...</span>     <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&gt;<span class=\"pl-pds\">\"</span></span>, size, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;<span class=\"pl-pds\">\"</span></span>, result)\n<span class=\"pl-c1\">...</span>\n<span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">1073741824</span> <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">1073741824</span>\n<span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">2147483648</span> <span class=\"pl-k\">&lt;</span> hdfs:<span class=\"pl-k\">//</span>root<span class=\"pl-k\">/</span>user<span class=\"pl-k\">/</span>s.lebedev<span class=\"pl-k\">/</span>test; Invalid argument\n<span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">4294967296</span> <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">0</span></pre></div>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">write_read</span>(<span class=\"pl-smi\">path</span>, <span class=\"pl-smi\">size</span>):\n    b <span class=\"pl-k\">=</span> <span class=\"pl-c1\">bytes</span>(<span class=\"pl-c1\">memoryview</span>(np.ones(size, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.uint8)))\n    <span class=\"pl-k\">with</span> tf.gfile.Open(path, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>wb<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> f:\n        f.write(b)\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">len</span>(tf.gfile.Open(path, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rb<span class=\"pl-pds\">\"</span></span>).read())</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.8.0-0-g93bc2e2072 1.8.0\nPython version: 3.6\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: see below\n\nDescribe the problem\nThe following snippet works fine until 2^30; 2^31 results in EINVAL, and >2^31 it produces zero-sized files. I wonder if this is an issue in the TF wrapper or rather in libhdfs itself.\n>>> for size in [2**30, 2**31, 2**32]:\n...     try:\n...         result = write_read(\"hdfs://root/user/s.lebedev/test\", size)\n...     except Exception as e:\n...         result = e\n...     print(\">\", size, \"<\", result)\n...\n> 1073741824 < 1073741824\n> 2147483648 < hdfs://root/user/s.lebedev/test; Invalid argument\n> 4294967296 < 0\nSource code / logs\ndef write_read(path, size):\n    b = bytes(memoryview(np.ones(size, dtype=np.uint8)))\n    with tf.gfile.Open(path, \"wb\") as f:\n        f.write(b)\n    return len(tf.gfile.Open(path, \"rb\").read())", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: macOS\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.8.0-0-g93bc2e2072 1.8.0\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: see below\r\n\r\n### Describe the problem\r\n\r\nThe following snippet works fine until 2^30; 2^31 results in EINVAL, and >2^31 it produces zero-sized files. I wonder if this is an issue in the TF wrapper or rather in libhdfs itself.\r\n\r\n```python\r\n>>> for size in [2**30, 2**31, 2**32]:\r\n...     try:\r\n...         result = write_read(\"hdfs://root/user/s.lebedev/test\", size)\r\n...     except Exception as e:\r\n...         result = e\r\n...     print(\">\", size, \"<\", result)\r\n...\r\n> 1073741824 < 1073741824\r\n> 2147483648 < hdfs://root/user/s.lebedev/test; Invalid argument\r\n> 4294967296 < 0\r\n```\r\n\r\n### Source code / logs\r\n\r\n```python\r\ndef write_read(path, size):\r\n    b = bytes(memoryview(np.ones(size, dtype=np.uint8)))\r\n    with tf.gfile.Open(path, \"wb\") as f:\r\n        f.write(b)\r\n    return len(tf.gfile.Open(path, \"rb\").read())\r\n```"}