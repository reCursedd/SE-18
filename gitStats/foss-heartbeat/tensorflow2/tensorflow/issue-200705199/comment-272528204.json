{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/272528204", "html_url": "https://github.com/tensorflow/tensorflow/issues/6837#issuecomment-272528204", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6837", "id": 272528204, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjUyODIwNA==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-13T19:38:52Z", "updated_at": "2017-01-13T19:38:52Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Can you describe the exact setup? I'm not sure what \"dedicated box\" and \"common scenario\" mean.</p>\n<p>Is it possible that some other  thread could have decided to close the session before that exception was raised? I think if a <code>close()</code> and a <code>run()</code> issue concurrently, it's possible to see a partially-shut-down state, which would correspond to this error message.</p>\n<p>(If no process restarted, I'd be very surprised if this happened, because the sequence of events is:</p>\n<ol>\n<li>Master calls register graph.</li>\n<li>Worker receives register graph call.</li>\n<li>Worker atomically invents a handle and registers it in its <code>GraphMgr</code> <a href=\"https://github.com/tensorflow/tensorflow/blob/018583b064f40fa1f3cabb7eef0a5ac6b169275d/tensorflow/core/distributed_runtime/graph_mgr.cc#L240\">(code)</a>.</li>\n<li>Worker sends handle back to master.</li>\n<li>Master stores that handle in the <code>MasterSession</code>.</li>\n<li>Later, master attempts to deregister a graph (presumably when closing a session), using the handle it received from the worker.</li>\n<li>Worker receives deregister graph call.</li>\n<li>Worker atomically removes the graph associated with the given handle in its <code>GraphMgr</code> <a href=\"https://github.com/tensorflow/tensorflow/blob/018583b064f40fa1f3cabb7eef0a5ac6b169275d/tensorflow/core/distributed_runtime/graph_mgr.cc#L252\">(code)</a>.</li>\n</ol>\n<p>I suppose it's possible that the DeregisterGraph call could have been retransmitted by gRPC, with the second response taking precedence. Perhaps we should ignore failures from the <code>DeregisterGraph</code> RPC.)</p>", "body_text": "Can you describe the exact setup? I'm not sure what \"dedicated box\" and \"common scenario\" mean.\nIs it possible that some other  thread could have decided to close the session before that exception was raised? I think if a close() and a run() issue concurrently, it's possible to see a partially-shut-down state, which would correspond to this error message.\n(If no process restarted, I'd be very surprised if this happened, because the sequence of events is:\n\nMaster calls register graph.\nWorker receives register graph call.\nWorker atomically invents a handle and registers it in its GraphMgr (code).\nWorker sends handle back to master.\nMaster stores that handle in the MasterSession.\nLater, master attempts to deregister a graph (presumably when closing a session), using the handle it received from the worker.\nWorker receives deregister graph call.\nWorker atomically removes the graph associated with the given handle in its GraphMgr (code).\n\nI suppose it's possible that the DeregisterGraph call could have been retransmitted by gRPC, with the second response taking precedence. Perhaps we should ignore failures from the DeregisterGraph RPC.)", "body": "Can you describe the exact setup? I'm not sure what \"dedicated box\" and \"common scenario\" mean.\r\n\r\nIs it possible that some other  thread could have decided to close the session before that exception was raised? I think if a `close()` and a `run()` issue concurrently, it's possible to see a partially-shut-down state, which would correspond to this error message.\r\n\r\n(If no process restarted, I'd be very surprised if this happened, because the sequence of events is:\r\n\r\n1. Master calls register graph.\r\n2. Worker receives register graph call.\r\n3. Worker atomically invents a handle and registers it in its `GraphMgr` [(code)](https://github.com/tensorflow/tensorflow/blob/018583b064f40fa1f3cabb7eef0a5ac6b169275d/tensorflow/core/distributed_runtime/graph_mgr.cc#L240).\r\n4. Worker sends handle back to master.\r\n6. Master stores that handle in the `MasterSession`.\r\n7. Later, master attempts to deregister a graph (presumably when closing a session), using the handle it received from the worker.\r\n8. Worker receives deregister graph call.\r\n9. Worker atomically removes the graph associated with the given handle in its `GraphMgr` [(code)](https://github.com/tensorflow/tensorflow/blob/018583b064f40fa1f3cabb7eef0a5ac6b169275d/tensorflow/core/distributed_runtime/graph_mgr.cc#L252).\r\n\r\nI suppose it's possible that the DeregisterGraph call could have been retransmitted by gRPC, with the second response taking precedence. Perhaps we should ignore failures from the `DeregisterGraph` RPC.)\r\n"}