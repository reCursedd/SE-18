{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/164664705", "html_url": "https://github.com/tensorflow/tensorflow/issues/509#issuecomment-164664705", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/509", "id": 164664705, "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDY2NDcwNQ==", "user": {"login": "craigcitro", "id": 468559, "node_id": "MDQ6VXNlcjQ2ODU1OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/468559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/craigcitro", "html_url": "https://github.com/craigcitro", "followers_url": "https://api.github.com/users/craigcitro/followers", "following_url": "https://api.github.com/users/craigcitro/following{/other_user}", "gists_url": "https://api.github.com/users/craigcitro/gists{/gist_id}", "starred_url": "https://api.github.com/users/craigcitro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/craigcitro/subscriptions", "organizations_url": "https://api.github.com/users/craigcitro/orgs", "repos_url": "https://api.github.com/users/craigcitro/repos", "events_url": "https://api.github.com/users/craigcitro/events{/privacy}", "received_events_url": "https://api.github.com/users/craigcitro/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-15T07:07:35Z", "updated_at": "2015-12-15T07:07:35Z", "author_association": "MEMBER", "body_html": "<p>In particular, from those flags you're passing, I'm guessing you're trying to do something related to IPython? If so, it's probably possible, but we'd need to know what you were trying to do.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=463737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vrv\">@vrv</a> one option would be to use the <a href=\"https://docs.python.org/2/library/argparse.html#partial-parsing\" rel=\"nofollow\">parse_known_args</a> method in <code>_flags.py</code>, which would let us parse a set of args but return the remaining ones for the caller to use as they'd like (eg pass them on to ipython). this would be a break from the python-gflags behavior, but possibly useful.</p>", "body_text": "In particular, from those flags you're passing, I'm guessing you're trying to do something related to IPython? If so, it's probably possible, but we'd need to know what you were trying to do.\n@vrv one option would be to use the parse_known_args method in _flags.py, which would let us parse a set of args but return the remaining ones for the caller to use as they'd like (eg pass them on to ipython). this would be a break from the python-gflags behavior, but possibly useful.", "body": "In particular, from those flags you're passing, I'm guessing you're trying to do something related to IPython? If so, it's probably possible, but we'd need to know what you were trying to do.\n\n@vrv one option would be to use the [parse_known_args](https://docs.python.org/2/library/argparse.html#partial-parsing) method in `_flags.py`, which would let us parse a set of args but return the remaining ones for the caller to use as they'd like (eg pass them on to ipython). this would be a break from the python-gflags behavior, but possibly useful.\n"}