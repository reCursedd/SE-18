{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/354554921", "html_url": "https://github.com/tensorflow/tensorflow/issues/15698#issuecomment-354554921", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15698", "id": 354554921, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDU1NDkyMQ==", "user": {"login": "ecahub", "id": 29002509, "node_id": "MDQ6VXNlcjI5MDAyNTA5", "avatar_url": "https://avatars1.githubusercontent.com/u/29002509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecahub", "html_url": "https://github.com/ecahub", "followers_url": "https://api.github.com/users/ecahub/followers", "following_url": "https://api.github.com/users/ecahub/following{/other_user}", "gists_url": "https://api.github.com/users/ecahub/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecahub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecahub/subscriptions", "organizations_url": "https://api.github.com/users/ecahub/orgs", "repos_url": "https://api.github.com/users/ecahub/repos", "events_url": "https://api.github.com/users/ecahub/events{/privacy}", "received_events_url": "https://api.github.com/users/ecahub/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-30T16:30:40Z", "updated_at": "2018-01-03T18:27:22Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> - Thank you so much for your great support. I tried several options for nativeBuildSystem rebuilding Android demo app, with the following results:</p>\n<ol>\n<li>nativeBuildSystem = 'bazel', gives the following error<br>\n<code>ERROR: /home/eca/.cache/bazel/_bazel_eca/0ad9491e973410d424f29db1d78c1796/external/protobuf_archive/BUILD:135:1: C++ compilation of rule '@protobuf_archive//:protobuf' failed (Exit 1) In file included from external/protobuf_archive/src/google/protobuf/util/internal/object_writer.cc:31: In file included from external/protobuf_archive/src/google/protobuf/util/internal/object_writer.h:34: In file included from external/protobuf_archive/src/google/protobuf/stubs/common.h:38: In file included from external/androidndk/ndk/sources/cxx-stl/gnu-libstdc++/4.9/include/algorithm:62: In file included from external/androidndk/ndk/sources/cxx-stl/gnu-libstdc++/4.9/include/bits/stl_algo.h:59: external/androidndk/ndk/sources/cxx-stl/gnu-libstdc++/4.9/include/cstdlib:72:10: fatal error: 'stdlib.h' file not found #include &lt;stdlib.h&gt; ^~~~~~~~~~ 1 error generated. Target //tensorflow/examples/android:tensorflow_native_libs failed to build Use --verbose_failures to see the command lines of failed build steps. INFO: Elapsed time: 55.677s, Critical Path: 0.37s FAILED: Build did NOT complete successfully </code></li>\n</ol>\n<p>This could perhaps be due to a version of NDK installed by Android Studio (ndk version 16.1.4479499) that is apparently incompatible with bazel (bazel version 0.9.0) - organization of header directories?</p>\n<ol start=\"2\">\n<li>nativeBuildSystem = 'cmake' seems to have the effect of downloading the library, like 'none', according to the the latest lines of build.gradle:<br>\n<code>dependencies { if (nativeBuildSystem == 'cmake' || nativeBuildSystem == 'none') { compile 'org.tensorflow:tensorflow-android:+' } } </code></li>\n</ol>\n<p>In this case, the retrained model is incompatible with the original libtensorflow_inference.so and libtensorflow_demo.so</p>\n<ol start=\"3\">\n<li>nativeBuildSystem = 'makefile' gives another error:<br>\n<code>libtool: compile:  arm-linux-androideabi-g++ --sysroot /home/eca/Android/Sdk/ndk-bundle/platforms/android-21/arch-arm -std=c++11 -DHAVE_CONFIG_H -I. -I.. -Wall -Wno-sign-compare -frtti -fexceptions -march=armv7-a -I/home/eca/Android/Sdk/ndk-bundle/sources/android/support/include -I/home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/include -I/home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a/include -MT google/protobuf/stubs/common.lo -MD -MP -MF google/protobuf/stubs/.deps/common.Tpo -c google/protobuf/stubs/common.cc -o google/protobuf/stubs/common.o In file included from /home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/include/cstdlib:72:0, from /home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/include/bits/stl_algo.h:59, from /home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/include/algorithm:62, from ./google/protobuf/stubs/common.h:38, from ./google/protobuf/stubs/atomicops.h:59, from google/protobuf/stubs/atomicops_internals_x86_msvc.cc:37: /home/eca/Android/Sdk/ndk-bundle/sources/android/support/include/stdlib.h:32:25: fatal error: stdlib.h: No such file or directory  #include_next &lt;stdlib.h&gt; ^ compilation terminated. </code></li>\n</ol>\n<p>This seems to be due to the fact that <code>#include_next</code> only checks the paths that are after where the current header was found, so apparently there is some issue in the include path order - organization of headers?</p>\n<ol start=\"4\">\n<li>nativeBuildSystem = 'none' compiles successfully and runs smoothly with original models. To work with retrained models I have done the following:</li>\n</ol>\n<ul>\n<li>\n<p>Downloaded the nightly build from <a href=\"http://ci.tensorflow.org/view/Nightly/job/nightly-android/lastSuccessfulBuild/artifact/out/\" rel=\"nofollow\">http://ci.tensorflow.org/view/Nightly/job/nightly-android/lastSuccessfulBuild/artifact/out/</a></p>\n</li>\n<li>\n<p>Created a directory called \"libs\" in the root project directory (besides \"assets\", \"src\", \"jni\", etc.) and copied the in it the following files:<br>\n`libs</p>\n<p>|-- armeabi-v7a</p>\n<p>|   |-- libtensorflow_demo.so</p>\n<p>|   |   -- libtensorflow_inference.so</p>\n<p>-- libandroid_tensorflow_inference_java.jar<br>\n`</p>\n</li>\n<li>\n<p>In build.gradle, modified the last \"dependencies\" as follows:<br>\n<code>dependencies { if (nativeBuildSystem == 'cmake' || nativeBuildSystem == 'none') { implementation files('libs/libandroid_tensorflow_inference_java.jar') } } </code></p>\n</li>\n</ul>\n<p>Then, compile, upload to the test device and run TF Classifier: it works!</p>", "body_text": "@asimshankar - Thank you so much for your great support. I tried several options for nativeBuildSystem rebuilding Android demo app, with the following results:\n\nnativeBuildSystem = 'bazel', gives the following error\nERROR: /home/eca/.cache/bazel/_bazel_eca/0ad9491e973410d424f29db1d78c1796/external/protobuf_archive/BUILD:135:1: C++ compilation of rule '@protobuf_archive//:protobuf' failed (Exit 1) In file included from external/protobuf_archive/src/google/protobuf/util/internal/object_writer.cc:31: In file included from external/protobuf_archive/src/google/protobuf/util/internal/object_writer.h:34: In file included from external/protobuf_archive/src/google/protobuf/stubs/common.h:38: In file included from external/androidndk/ndk/sources/cxx-stl/gnu-libstdc++/4.9/include/algorithm:62: In file included from external/androidndk/ndk/sources/cxx-stl/gnu-libstdc++/4.9/include/bits/stl_algo.h:59: external/androidndk/ndk/sources/cxx-stl/gnu-libstdc++/4.9/include/cstdlib:72:10: fatal error: 'stdlib.h' file not found #include <stdlib.h> ^~~~~~~~~~ 1 error generated. Target //tensorflow/examples/android:tensorflow_native_libs failed to build Use --verbose_failures to see the command lines of failed build steps. INFO: Elapsed time: 55.677s, Critical Path: 0.37s FAILED: Build did NOT complete successfully \n\nThis could perhaps be due to a version of NDK installed by Android Studio (ndk version 16.1.4479499) that is apparently incompatible with bazel (bazel version 0.9.0) - organization of header directories?\n\nnativeBuildSystem = 'cmake' seems to have the effect of downloading the library, like 'none', according to the the latest lines of build.gradle:\ndependencies { if (nativeBuildSystem == 'cmake' || nativeBuildSystem == 'none') { compile 'org.tensorflow:tensorflow-android:+' } } \n\nIn this case, the retrained model is incompatible with the original libtensorflow_inference.so and libtensorflow_demo.so\n\nnativeBuildSystem = 'makefile' gives another error:\nlibtool: compile:  arm-linux-androideabi-g++ --sysroot /home/eca/Android/Sdk/ndk-bundle/platforms/android-21/arch-arm -std=c++11 -DHAVE_CONFIG_H -I. -I.. -Wall -Wno-sign-compare -frtti -fexceptions -march=armv7-a -I/home/eca/Android/Sdk/ndk-bundle/sources/android/support/include -I/home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/include -I/home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a/include -MT google/protobuf/stubs/common.lo -MD -MP -MF google/protobuf/stubs/.deps/common.Tpo -c google/protobuf/stubs/common.cc -o google/protobuf/stubs/common.o In file included from /home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/include/cstdlib:72:0, from /home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/include/bits/stl_algo.h:59, from /home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/include/algorithm:62, from ./google/protobuf/stubs/common.h:38, from ./google/protobuf/stubs/atomicops.h:59, from google/protobuf/stubs/atomicops_internals_x86_msvc.cc:37: /home/eca/Android/Sdk/ndk-bundle/sources/android/support/include/stdlib.h:32:25: fatal error: stdlib.h: No such file or directory  #include_next <stdlib.h> ^ compilation terminated. \n\nThis seems to be due to the fact that #include_next only checks the paths that are after where the current header was found, so apparently there is some issue in the include path order - organization of headers?\n\nnativeBuildSystem = 'none' compiles successfully and runs smoothly with original models. To work with retrained models I have done the following:\n\n\n\nDownloaded the nightly build from http://ci.tensorflow.org/view/Nightly/job/nightly-android/lastSuccessfulBuild/artifact/out/\n\n\nCreated a directory called \"libs\" in the root project directory (besides \"assets\", \"src\", \"jni\", etc.) and copied the in it the following files:\n`libs\n|-- armeabi-v7a\n|   |-- libtensorflow_demo.so\n|   |   -- libtensorflow_inference.so\n-- libandroid_tensorflow_inference_java.jar\n`\n\n\nIn build.gradle, modified the last \"dependencies\" as follows:\ndependencies { if (nativeBuildSystem == 'cmake' || nativeBuildSystem == 'none') { implementation files('libs/libandroid_tensorflow_inference_java.jar') } } \n\n\nThen, compile, upload to the test device and run TF Classifier: it works!", "body": "@asimshankar - Thank you so much for your great support. I tried several options for nativeBuildSystem rebuilding Android demo app, with the following results:\r\n\r\n1) nativeBuildSystem = 'bazel', gives the following error\r\n`ERROR: /home/eca/.cache/bazel/_bazel_eca/0ad9491e973410d424f29db1d78c1796/external/protobuf_archive/BUILD:135:1: C++ compilation of rule '@protobuf_archive//:protobuf' failed (Exit 1)\r\nIn file included from external/protobuf_archive/src/google/protobuf/util/internal/object_writer.cc:31:\r\nIn file included from external/protobuf_archive/src/google/protobuf/util/internal/object_writer.h:34:\r\nIn file included from external/protobuf_archive/src/google/protobuf/stubs/common.h:38:\r\nIn file included from external/androidndk/ndk/sources/cxx-stl/gnu-libstdc++/4.9/include/algorithm:62:\r\nIn file included from external/androidndk/ndk/sources/cxx-stl/gnu-libstdc++/4.9/include/bits/stl_algo.h:59:\r\nexternal/androidndk/ndk/sources/cxx-stl/gnu-libstdc++/4.9/include/cstdlib:72:10: fatal error: 'stdlib.h' file not found\r\n#include <stdlib.h>\r\n         ^~~~~~~~~~\r\n1 error generated.\r\nTarget //tensorflow/examples/android:tensorflow_native_libs failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 55.677s, Critical Path: 0.37s\r\nFAILED: Build did NOT complete successfully\r\n`\r\n\r\nThis could perhaps be due to a version of NDK installed by Android Studio (ndk version 16.1.4479499) that is apparently incompatible with bazel (bazel version 0.9.0) - organization of header directories?\r\n\r\n2) nativeBuildSystem = 'cmake' seems to have the effect of downloading the library, like 'none', according to the the latest lines of build.gradle:\r\n`dependencies {\r\n    if (nativeBuildSystem == 'cmake' || nativeBuildSystem == 'none') {\r\n        compile 'org.tensorflow:tensorflow-android:+'\r\n    }\r\n}\r\n`\r\n\r\nIn this case, the retrained model is incompatible with the original libtensorflow_inference.so and libtensorflow_demo.so\r\n\r\n3) nativeBuildSystem = 'makefile' gives another error:\r\n`libtool: compile:  arm-linux-androideabi-g++ --sysroot /home/eca/Android/Sdk/ndk-bundle/platforms/android-21/arch-arm -std=c++11 -DHAVE_CONFIG_H -I. -I.. -Wall -Wno-sign-compare -frtti -fexceptions -march=armv7-a -I/home/eca/Android/Sdk/ndk-bundle/sources/android/support/include -I/home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/include -I/home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a/include -MT google/protobuf/stubs/common.lo -MD -MP -MF google/protobuf/stubs/.deps/common.Tpo -c google/protobuf/stubs/common.cc -o google/protobuf/stubs/common.o\r\nIn file included from /home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/include/cstdlib:72:0,\r\n                 from /home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/include/bits/stl_algo.h:59,\r\n                 from /home/eca/Android/Sdk/ndk-bundle/sources/cxx-stl/gnu-libstdc++/4.9/include/algorithm:62,\r\n                 from ./google/protobuf/stubs/common.h:38,\r\n                 from ./google/protobuf/stubs/atomicops.h:59,\r\n                 from google/protobuf/stubs/atomicops_internals_x86_msvc.cc:37:\r\n/home/eca/Android/Sdk/ndk-bundle/sources/android/support/include/stdlib.h:32:25: fatal error: stdlib.h: No such file or directory\r\n #include_next <stdlib.h>\r\n                         ^\r\ncompilation terminated.\r\n`\r\n\r\nThis seems to be due to the fact that `#include_next` only checks the paths that are after where the current header was found, so apparently there is some issue in the include path order - organization of headers?\r\n\r\n4) nativeBuildSystem = 'none' compiles successfully and runs smoothly with original models. To work with retrained models I have done the following:\r\n- Downloaded the nightly build from http://ci.tensorflow.org/view/Nightly/job/nightly-android/lastSuccessfulBuild/artifact/out/\r\n- Created a directory called \"libs\" in the root project directory (besides \"assets\", \"src\", \"jni\", etc.) and copied the in it the following files:\r\n`libs\r\n\r\n    |-- armeabi-v7a\r\n\r\n    |   |-- libtensorflow_demo.so\r\n\r\n    |   |   \\-- libtensorflow_inference.so\r\n\r\n    \\-- libandroid_tensorflow_inference_java.jar\r\n`\r\n\r\n- In build.gradle, modified the last \"dependencies\" as follows:\r\n`dependencies {\r\n    if (nativeBuildSystem == 'cmake' || nativeBuildSystem == 'none') {\r\n        implementation files('libs/libandroid_tensorflow_inference_java.jar')\r\n    }\r\n}\r\n`\r\n\r\nThen, compile, upload to the test device and run TF Classifier: it works!\r\n\r\n  "}