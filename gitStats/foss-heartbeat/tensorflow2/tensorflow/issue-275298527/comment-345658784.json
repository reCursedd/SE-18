{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/345658784", "html_url": "https://github.com/tensorflow/tensorflow/issues/14713#issuecomment-345658784", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14713", "id": 345658784, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTY1ODc4NA==", "user": {"login": "thalitadru", "id": 8091362, "node_id": "MDQ6VXNlcjgwOTEzNjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8091362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thalitadru", "html_url": "https://github.com/thalitadru", "followers_url": "https://api.github.com/users/thalitadru/followers", "following_url": "https://api.github.com/users/thalitadru/following{/other_user}", "gists_url": "https://api.github.com/users/thalitadru/gists{/gist_id}", "starred_url": "https://api.github.com/users/thalitadru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thalitadru/subscriptions", "organizations_url": "https://api.github.com/users/thalitadru/orgs", "repos_url": "https://api.github.com/users/thalitadru/repos", "events_url": "https://api.github.com/users/thalitadru/events{/privacy}", "received_events_url": "https://api.github.com/users/thalitadru/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-20T10:45:53Z", "updated_at": "2017-11-20T10:46:31Z", "author_association": "NONE", "body_html": "<p>I'have been able to restore weights via a custom tf.train.SessionRunHook. I customize the <code>after_create_session</code> method to run an init function generated with <code>tf.contrib.framework.assign_from_checkpoint_fn</code>. You can give it a list of variables you wish to restore. You can then return the hook with your <code>EstimatorSpec</code> structure.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">RestoreHook</span>(<span class=\"pl-e\">tf</span>.<span class=\"pl-e\">train</span>.<span class=\"pl-e\">SessionRunHook</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">init_fn</span>):\n        <span class=\"pl-c1\">self</span>.init_fn <span class=\"pl-k\">=</span> init_fn\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">after_create_session</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">session</span>, <span class=\"pl-smi\">coord</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n        <span class=\"pl-k\">if</span> session.run(tf.train.get_or_create_global_step()) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>:\n            <span class=\"pl-c1\">self</span>.init_fn(session)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">model_fn</span>():\n    <span class=\"pl-c1\">...</span>\n    init_fn <span class=\"pl-k\">=</span> assign_from_checkpoint_fn(model_path, var_list, <span class=\"pl-v\">ignore_missing_vars</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n    <span class=\"pl-c1\">...</span>\n    <span class=\"pl-k\">return</span> EstimatorSpec(<span class=\"pl-c1\">...</span>, <span class=\"pl-v\">training_hooks</span><span class=\"pl-k\">=</span>[RestoreHook(init_fn)])</pre></div>\n<p>About generating the variables to restore list, <code>tf.contrib.framework</code> has some useful functions like <code>get_variables_to_restore</code>, <code>get_variables_by_name</code>, etc.</p>", "body_text": "I'have been able to restore weights via a custom tf.train.SessionRunHook. I customize the after_create_session method to run an init function generated with tf.contrib.framework.assign_from_checkpoint_fn. You can give it a list of variables you wish to restore. You can then return the hook with your EstimatorSpec structure.\nclass RestoreHook(tf.train.SessionRunHook):\n    def __init__(self, init_fn):\n        self.init_fn = init_fn\n\n    def after_create_session(self, session, coord=None):\n        if session.run(tf.train.get_or_create_global_step()) == 0:\n            self.init_fn(session)\n\ndef model_fn():\n    ...\n    init_fn = assign_from_checkpoint_fn(model_path, var_list, ignore_missing_vars=True)\n    ...\n    return EstimatorSpec(..., training_hooks=[RestoreHook(init_fn)])\nAbout generating the variables to restore list, tf.contrib.framework has some useful functions like get_variables_to_restore, get_variables_by_name, etc.", "body": "I'have been able to restore weights via a custom tf.train.SessionRunHook. I customize the `after_create_session` method to run an init function generated with `tf.contrib.framework.assign_from_checkpoint_fn`. You can give it a list of variables you wish to restore. You can then return the hook with your `EstimatorSpec` structure.\r\n``` python\r\nclass RestoreHook(tf.train.SessionRunHook):\r\n    def __init__(self, init_fn):\r\n        self.init_fn = init_fn\r\n\r\n    def after_create_session(self, session, coord=None):\r\n        if session.run(tf.train.get_or_create_global_step()) == 0:\r\n            self.init_fn(session)\r\n\r\ndef model_fn():\r\n    ...\r\n    init_fn = assign_from_checkpoint_fn(model_path, var_list, ignore_missing_vars=True)\r\n    ...\r\n    return EstimatorSpec(..., training_hooks=[RestoreHook(init_fn)])\r\n```\r\nAbout generating the variables to restore list, `tf.contrib.framework` has some useful functions like `get_variables_to_restore`, `get_variables_by_name`, etc.\r\n"}