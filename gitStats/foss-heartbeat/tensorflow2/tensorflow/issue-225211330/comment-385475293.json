{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/385475293", "html_url": "https://github.com/tensorflow/tensorflow/issues/9525#issuecomment-385475293", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9525", "id": 385475293, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTQ3NTI5Mw==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-30T17:47:34Z", "updated_at": "2018-04-30T17:47:34Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5136660\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nkhdiscovery\">@nkhdiscovery</a> the next step IMO would be to split off a shared object with the implementations of our protocol buffers (libtensorflow_protobufs.so?).</p>\n<p>The main benefit would be that users of the C++ API would no longer need to link against libtensorflow_framework.so (or build libtensorflow_cc statically) for protocol buffer symbols, and so would run into fewer symbol conflicts. So basically <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"271340168\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/14267\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/14267/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/14267\">#14267</a>; it's closed at the moment, but you could re-open it and work on it. We have workarounds but no great solution for C++ API users who want to use OpenCV and use custom ops (custom ops won't work with static libtensorflow_cc, OpenCV won't work with dynamic libtensorflow_cc).</p>\n<p>There are two things to be moved: one is the static variables for protocol buffer registration (<code>@protobuf_archive//:protobuf</code>), the other is the <a href=\"https://github.com/tensorflow/tensorflow/blob/6f532f38af72cb218cb6648363964e4f3e0817d2/tensorflow/core/BUILD#L1796\">generated implementations of TensorFlow's protocol buffers</a>. My thought is that these should stay together for now.</p>\n<p>Steps I think the split would include:</p>\n<ol>\n<li>Hacking around with build rules until <code>bazel query 'somepath(//tensorflow:libtensorflow_framework.so, @protobuf_archive//:protobuf)'</code> and <code>bazel query 'somepath(//tensorflow:libtensorflow_framework.so, //tensorflow/core:protos_all_cc_impl)'</code> return empty results</li>\n<li>Include these explicitly in a new //tensorflow:libtensorflow_protobuf.so rule (near <a href=\"https://github.com/tensorflow/tensorflow/blob/6f532f38af72cb218cb6648363964e4f3e0817d2/tensorflow/BUILD#L447\">libtensorflow_framework.so</a>), and include <code>//tensorflow:libtensorflow_protobuf.so</code> in <a href=\"https://github.com/tensorflow/tensorflow/blob/6f532f38af72cb218cb6648363964e4f3e0817d2/tensorflow/tensorflow.bzl#L288\">tf_binary_additional_srcs</a>.</li>\n<li>Make sure all the tests pass :). Easy to have undefined symbols when messing with linking.</li>\n<li>The final step would be dealing with packaging issues, such as for the Java bindings (which I believe still hard-code the names of TensorFlow libraries).</li>\n</ol>\n<p>Happy to chat more if this sounds interesting. Sending an email to <a href=\"https://www.tensorflow.org/community/contributing\" rel=\"nofollow\">developers@tensorflow.org</a> with a rough plan and discussing would be a good start (<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7946809\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gunan\">@gunan</a> and others are working on a related effort, so coordinating would be important).</p>", "body_text": "@nkhdiscovery the next step IMO would be to split off a shared object with the implementations of our protocol buffers (libtensorflow_protobufs.so?).\nThe main benefit would be that users of the C++ API would no longer need to link against libtensorflow_framework.so (or build libtensorflow_cc statically) for protocol buffer symbols, and so would run into fewer symbol conflicts. So basically #14267; it's closed at the moment, but you could re-open it and work on it. We have workarounds but no great solution for C++ API users who want to use OpenCV and use custom ops (custom ops won't work with static libtensorflow_cc, OpenCV won't work with dynamic libtensorflow_cc).\nThere are two things to be moved: one is the static variables for protocol buffer registration (@protobuf_archive//:protobuf), the other is the generated implementations of TensorFlow's protocol buffers. My thought is that these should stay together for now.\nSteps I think the split would include:\n\nHacking around with build rules until bazel query 'somepath(//tensorflow:libtensorflow_framework.so, @protobuf_archive//:protobuf)' and bazel query 'somepath(//tensorflow:libtensorflow_framework.so, //tensorflow/core:protos_all_cc_impl)' return empty results\nInclude these explicitly in a new //tensorflow:libtensorflow_protobuf.so rule (near libtensorflow_framework.so), and include //tensorflow:libtensorflow_protobuf.so in tf_binary_additional_srcs.\nMake sure all the tests pass :). Easy to have undefined symbols when messing with linking.\nThe final step would be dealing with packaging issues, such as for the Java bindings (which I believe still hard-code the names of TensorFlow libraries).\n\nHappy to chat more if this sounds interesting. Sending an email to developers@tensorflow.org with a rough plan and discussing would be a good start (@gunan and others are working on a related effort, so coordinating would be important).", "body": "@nkhdiscovery the next step IMO would be to split off a shared object with the implementations of our protocol buffers (libtensorflow_protobufs.so?).\r\n\r\nThe main benefit would be that users of the C++ API would no longer need to link against libtensorflow_framework.so (or build libtensorflow_cc statically) for protocol buffer symbols, and so would run into fewer symbol conflicts. So basically https://github.com/tensorflow/tensorflow/issues/14267; it's closed at the moment, but you could re-open it and work on it. We have workarounds but no great solution for C++ API users who want to use OpenCV and use custom ops (custom ops won't work with static libtensorflow_cc, OpenCV won't work with dynamic libtensorflow_cc).\r\n\r\nThere are two things to be moved: one is the static variables for protocol buffer registration (`@protobuf_archive//:protobuf`), the other is the [generated implementations of TensorFlow's protocol buffers](https://github.com/tensorflow/tensorflow/blob/6f532f38af72cb218cb6648363964e4f3e0817d2/tensorflow/core/BUILD#L1796). My thought is that these should stay together for now.\r\n\r\nSteps I think the split would include:\r\n1. Hacking around with build rules until `bazel query 'somepath(//tensorflow:libtensorflow_framework.so, @protobuf_archive//:protobuf)'` and `bazel query 'somepath(//tensorflow:libtensorflow_framework.so, //tensorflow/core:protos_all_cc_impl)'` return empty results\r\n2. Include these explicitly in a new //tensorflow:libtensorflow_protobuf.so rule (near [libtensorflow_framework.so](https://github.com/tensorflow/tensorflow/blob/6f532f38af72cb218cb6648363964e4f3e0817d2/tensorflow/BUILD#L447)), and include `//tensorflow:libtensorflow_protobuf.so` in [tf_binary_additional_srcs](https://github.com/tensorflow/tensorflow/blob/6f532f38af72cb218cb6648363964e4f3e0817d2/tensorflow/tensorflow.bzl#L288).\r\n3. Make sure all the tests pass :). Easy to have undefined symbols when messing with linking.\r\n4. The final step would be dealing with packaging issues, such as for the Java bindings (which I believe still hard-code the names of TensorFlow libraries).\r\n\r\nHappy to chat more if this sounds interesting. Sending an email to [developers@tensorflow.org](https://www.tensorflow.org/community/contributing) with a rough plan and discussing would be a good start (@gunan and others are working on a related effort, so coordinating would be important)."}