{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/301229872", "html_url": "https://github.com/tensorflow/tensorflow/issues/9525#issuecomment-301229872", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9525", "id": 301229872, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTIyOTg3Mg==", "user": {"login": "nkhdiscovery", "id": 5136660, "node_id": "MDQ6VXNlcjUxMzY2NjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5136660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nkhdiscovery", "html_url": "https://github.com/nkhdiscovery", "followers_url": "https://api.github.com/users/nkhdiscovery/followers", "following_url": "https://api.github.com/users/nkhdiscovery/following{/other_user}", "gists_url": "https://api.github.com/users/nkhdiscovery/gists{/gist_id}", "starred_url": "https://api.github.com/users/nkhdiscovery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nkhdiscovery/subscriptions", "organizations_url": "https://api.github.com/users/nkhdiscovery/orgs", "repos_url": "https://api.github.com/users/nkhdiscovery/repos", "events_url": "https://api.github.com/users/nkhdiscovery/events{/privacy}", "received_events_url": "https://api.github.com/users/nkhdiscovery/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-13T06:49:58Z", "updated_at": "2017-05-13T06:49:58Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=197091\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/davidlt\">@davidlt</a> Are you suggesting to put <code>__attribute__ ((visibility (\"default\")))</code> in the code wherever there is something to hide? Because that requires lots of additions in third_party headers, e.g. protobuf itself, which will cause further expenses if one of those third_party libraries planned to be upgraded. I just didn't think of that as a solution because I felt it's just making another mess, even re-packing those libraries with new names and dynamically link against those specific versions seems much more cleaner to me.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=70511\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/girving\">@girving</a> First, as I understood from your comment, this TF_EXPORT macro will then help us to recognize what has to be exported and what is not to, right? I mean at least I will be able to put every single function which has that macro in my version script and temporarily solve the problem for my own usage. Am I right?<br>\nSecond, I see you have to do this later to avoid the redundant work (putting the macro wherever it is needed and then removing that whole part of API in minimization will not be logical, for sure); But if this is the only problem for not doing that now, I can do that redundant work in a fork or a temporary branch so we can use the remained parts after minimization. I have to solve this for myself as soon as possible, so let's do it in a way which is helpful for further contribution. Can you give me any hint on how to do that? I saw the usage in tensorflow/core/framework/types.h in master, I think I can give a try if I know what exactly has to be exported.</p>\n<p>Thanks for your replies guys.</p>", "body_text": "@davidlt Are you suggesting to put __attribute__ ((visibility (\"default\"))) in the code wherever there is something to hide? Because that requires lots of additions in third_party headers, e.g. protobuf itself, which will cause further expenses if one of those third_party libraries planned to be upgraded. I just didn't think of that as a solution because I felt it's just making another mess, even re-packing those libraries with new names and dynamically link against those specific versions seems much more cleaner to me.\n@girving First, as I understood from your comment, this TF_EXPORT macro will then help us to recognize what has to be exported and what is not to, right? I mean at least I will be able to put every single function which has that macro in my version script and temporarily solve the problem for my own usage. Am I right?\nSecond, I see you have to do this later to avoid the redundant work (putting the macro wherever it is needed and then removing that whole part of API in minimization will not be logical, for sure); But if this is the only problem for not doing that now, I can do that redundant work in a fork or a temporary branch so we can use the remained parts after minimization. I have to solve this for myself as soon as possible, so let's do it in a way which is helpful for further contribution. Can you give me any hint on how to do that? I saw the usage in tensorflow/core/framework/types.h in master, I think I can give a try if I know what exactly has to be exported.\nThanks for your replies guys.", "body": "@davidlt Are you suggesting to put ```__attribute__ ((visibility (\"default\")))``` in the code wherever there is something to hide? Because that requires lots of additions in third_party headers, e.g. protobuf itself, which will cause further expenses if one of those third_party libraries planned to be upgraded. I just didn't think of that as a solution because I felt it's just making another mess, even re-packing those libraries with new names and dynamically link against those specific versions seems much more cleaner to me.\r\n\r\n@girving First, as I understood from your comment, this TF_EXPORT macro will then help us to recognize what has to be exported and what is not to, right? I mean at least I will be able to put every single function which has that macro in my version script and temporarily solve the problem for my own usage. Am I right?\r\nSecond, I see you have to do this later to avoid the redundant work (putting the macro wherever it is needed and then removing that whole part of API in minimization will not be logical, for sure); But if this is the only problem for not doing that now, I can do that redundant work in a fork or a temporary branch so we can use the remained parts after minimization. I have to solve this for myself as soon as possible, so let's do it in a way which is helpful for further contribution. Can you give me any hint on how to do that? I saw the usage in tensorflow/core/framework/types.h in master, I think I can give a try if I know what exactly has to be exported. \r\n\r\nThanks for your replies guys."}