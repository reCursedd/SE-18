{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/396334552", "html_url": "https://github.com/tensorflow/tensorflow/issues/9525#issuecomment-396334552", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9525", "id": 396334552, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjMzNDU1Mg==", "user": {"login": "JosephIWB", "id": 38196441, "node_id": "MDQ6VXNlcjM4MTk2NDQx", "avatar_url": "https://avatars2.githubusercontent.com/u/38196441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JosephIWB", "html_url": "https://github.com/JosephIWB", "followers_url": "https://api.github.com/users/JosephIWB/followers", "following_url": "https://api.github.com/users/JosephIWB/following{/other_user}", "gists_url": "https://api.github.com/users/JosephIWB/gists{/gist_id}", "starred_url": "https://api.github.com/users/JosephIWB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JosephIWB/subscriptions", "organizations_url": "https://api.github.com/users/JosephIWB/orgs", "repos_url": "https://api.github.com/users/JosephIWB/repos", "events_url": "https://api.github.com/users/JosephIWB/events{/privacy}", "received_events_url": "https://api.github.com/users/JosephIWB/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-11T18:09:39Z", "updated_at": "2018-06-11T18:09:39Z", "author_association": "NONE", "body_html": "<p>I can't use CUDA_VISIBLE_DEVICES because the program is multi-threaded and is supposed to work on various gpus separately (you can configure the program  to process multiple video streams, then you also can decide which gpu each thread should use), so CUDA_VISIBLE_DEVICES doesn't work, as you need to decide which gpu a thread uses on runtime.</p>\n<p>I use this code to generate the session configuration options:</p>\n<pre><code>    tf::Session* session_ptr;\n    auto options = tf::SessionOptions();\n    const std::string gpu_vis_device = std::to_string(gpu_id);\n    options.config.mutable_gpu_options()-&gt;set_visible_device_list(gpu_vis_device);\n    options.config.mutable_gpu_options()-&gt;set_per_process_gpu_memory_fraction(0.025);\n    options.config.mutable_gpu_options()-&gt;set_allow_growth(true);\n    auto status = NewSession(options, &amp;session_ptr);\n    if (!status.ok()) {\n        std::cout &lt;&lt; status.ToString() &lt;&lt; \"\\n\";\n        return false;\n    }\n    session.reset(session_ptr);\n</code></pre>\n<p>The gpu_memory_fraction will be changed in the future to be passed by the function, and not hardcoded like that.</p>\n<p>When you do it like that, the program cries about linking issues with protobuf, and linking protobuf didn't solve the problem (-lprotobuf)</p>\n<p>Doing the trick I stated above made the program work correctly when using imread, imencode and imwrite from opencv.</p>\n<p>Another fix I think should work should be compiling tensorflow and opencv using the same dependencies, so they share the same symbols and don't generate any conflicts between them, but that is a lot of time, and as the workaround I found in an issue here worked, I think we will not be trying that (as it a lot more work to tell the compiler to use the same dependencies, bazel and cmake seem not to like each other very much)</p>\n<p>Thanks for your response.</p>", "body_text": "I can't use CUDA_VISIBLE_DEVICES because the program is multi-threaded and is supposed to work on various gpus separately (you can configure the program  to process multiple video streams, then you also can decide which gpu each thread should use), so CUDA_VISIBLE_DEVICES doesn't work, as you need to decide which gpu a thread uses on runtime.\nI use this code to generate the session configuration options:\n    tf::Session* session_ptr;\n    auto options = tf::SessionOptions();\n    const std::string gpu_vis_device = std::to_string(gpu_id);\n    options.config.mutable_gpu_options()->set_visible_device_list(gpu_vis_device);\n    options.config.mutable_gpu_options()->set_per_process_gpu_memory_fraction(0.025);\n    options.config.mutable_gpu_options()->set_allow_growth(true);\n    auto status = NewSession(options, &session_ptr);\n    if (!status.ok()) {\n        std::cout << status.ToString() << \"\\n\";\n        return false;\n    }\n    session.reset(session_ptr);\n\nThe gpu_memory_fraction will be changed in the future to be passed by the function, and not hardcoded like that.\nWhen you do it like that, the program cries about linking issues with protobuf, and linking protobuf didn't solve the problem (-lprotobuf)\nDoing the trick I stated above made the program work correctly when using imread, imencode and imwrite from opencv.\nAnother fix I think should work should be compiling tensorflow and opencv using the same dependencies, so they share the same symbols and don't generate any conflicts between them, but that is a lot of time, and as the workaround I found in an issue here worked, I think we will not be trying that (as it a lot more work to tell the compiler to use the same dependencies, bazel and cmake seem not to like each other very much)\nThanks for your response.", "body": "I can't use CUDA_VISIBLE_DEVICES because the program is multi-threaded and is supposed to work on various gpus separately (you can configure the program  to process multiple video streams, then you also can decide which gpu each thread should use), so CUDA_VISIBLE_DEVICES doesn't work, as you need to decide which gpu a thread uses on runtime.\r\n\r\nI use this code to generate the session configuration options:\r\n```\r\n    tf::Session* session_ptr;\r\n    auto options = tf::SessionOptions();\r\n    const std::string gpu_vis_device = std::to_string(gpu_id);\r\n    options.config.mutable_gpu_options()->set_visible_device_list(gpu_vis_device);\r\n    options.config.mutable_gpu_options()->set_per_process_gpu_memory_fraction(0.025);\r\n    options.config.mutable_gpu_options()->set_allow_growth(true);\r\n    auto status = NewSession(options, &session_ptr);\r\n    if (!status.ok()) {\r\n        std::cout << status.ToString() << \"\\n\";\r\n        return false;\r\n    }\r\n    session.reset(session_ptr);\r\n```\r\nThe gpu_memory_fraction will be changed in the future to be passed by the function, and not hardcoded like that.\r\n\r\nWhen you do it like that, the program cries about linking issues with protobuf, and linking protobuf didn't solve the problem (-lprotobuf)\r\n\r\nDoing the trick I stated above made the program work correctly when using imread, imencode and imwrite from opencv.\r\n\r\nAnother fix I think should work should be compiling tensorflow and opencv using the same dependencies, so they share the same symbols and don't generate any conflicts between them, but that is a lot of time, and as the workaround I found in an issue here worked, I think we will not be trying that (as it a lot more work to tell the compiler to use the same dependencies, bazel and cmake seem not to like each other very much)\r\n\r\nThanks for your response.\r\n"}