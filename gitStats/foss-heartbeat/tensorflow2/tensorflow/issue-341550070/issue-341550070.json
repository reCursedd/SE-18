{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20842", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20842/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20842/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20842/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20842", "id": 341550070, "node_id": "MDU6SXNzdWUzNDE1NTAwNzA=", "number": 20842, "title": "BUG: tf.keras.layers and tf.REUSE.AUTO fail to share parameters in 1.9.0", "user": {"login": "ORippler", "id": 24656669, "node_id": "MDQ6VXNlcjI0NjU2NjY5", "avatar_url": "https://avatars0.githubusercontent.com/u/24656669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ORippler", "html_url": "https://github.com/ORippler", "followers_url": "https://api.github.com/users/ORippler/followers", "following_url": "https://api.github.com/users/ORippler/following{/other_user}", "gists_url": "https://api.github.com/users/ORippler/gists{/gist_id}", "starred_url": "https://api.github.com/users/ORippler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ORippler/subscriptions", "organizations_url": "https://api.github.com/users/ORippler/orgs", "repos_url": "https://api.github.com/users/ORippler/repos", "events_url": "https://api.github.com/users/ORippler/events{/privacy}", "received_events_url": "https://api.github.com/users/ORippler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, {"login": "omalleyt12", "id": 29100818, "node_id": "MDQ6VXNlcjI5MTAwODE4", "avatar_url": "https://avatars3.githubusercontent.com/u/29100818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omalleyt12", "html_url": "https://github.com/omalleyt12", "followers_url": "https://api.github.com/users/omalleyt12/followers", "following_url": "https://api.github.com/users/omalleyt12/following{/other_user}", "gists_url": "https://api.github.com/users/omalleyt12/gists{/gist_id}", "starred_url": "https://api.github.com/users/omalleyt12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omalleyt12/subscriptions", "organizations_url": "https://api.github.com/users/omalleyt12/orgs", "repos_url": "https://api.github.com/users/omalleyt12/repos", "events_url": "https://api.github.com/users/omalleyt12/events{/privacy}", "received_events_url": "https://api.github.com/users/omalleyt12/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-07-16T14:47:06Z", "updated_at": "2018-09-14T09:45:19Z", "closed_at": "2018-07-20T17:06:55Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nUbuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\nv1.9.0-0-g25c197e023 1.9.0</li>\n<li><strong>Python version</strong>:<br>\n3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\nN/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\nN/A</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\nN/A</li>\n<li><strong>GPU model and memory</strong>:<br>\nN/A</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nrun MWE under 1.9.0, which works fine for 1.8.0</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I think a bug was introduced, where <code>tf.keras.layers.Conv3D</code> in context of <code>tf.REUSE.AUTO</code> no longer works as intended (.e.g no parameter-sharing is performed).<br>\nThis might be caused by the bugfix mentioned in the <a href=\"https://github.com/tensorflow/tensorflow/releases/tag/v1.9.0\">release notes</a> (Using tf.keras.layers with custom variable scopes).</p>\n<p>This bug seemingly does not affect the <code>tf.keras.layers.Lambda</code> layer, as outlined by the MWE, where <code>tf.contrib.layers.instance_norm</code> and <code>tf.layers.conv3d</code> share paramters as intended.</p>\n<h3>Source code / logs</h3>\n<p>MWE which runs fine under 1.8.0 but fails to yield complete parameter sharing under 1.9.0.</p>\n<pre><code>import tensorflow as tf\n\nConv3D = tf.keras.layers.Conv3D\nLambda = tf.keras.layers.Lambda\nActivation = tf.keras.layers.Activation\ntf_instance_norm = tf.contrib.layers.instance_norm    \n\ndef Conv_block_keras(input_layer, n_filters, kernel=(3, 3, 3), \n               padding='same', strides=(1, 1, 1)):\n\n    with tf.variable_scope('conv_block'):\n        #layer = Conv3D(n_filters, kernel, padding=padding, strides=strides)(input_layer) # does not work\n        #layer = Lambda(lambda x: Conv3D(n_filters, kernel, padding=padding, strides=strides)(x))(input_layer) # does not work\n        layer = Lambda(lambda x: tf.layers.conv3d(inputs=x, filters=n_filters, padding=padding, strides=strides, kernel_size=kernel))(input_layer)\n        layer = Lambda(lambda x: tf_instance_norm(inputs=x, data_format='NCHW'))(layer)\n        return Activation('relu')(layer)\n\nwith tf.variable_scope('reuse', reuse=tf.AUTO_REUSE):\n    conv_1 = Conv_block_keras(tf.zeros(shape=[1,1]+[128]*3), 3)\n    vars_conv_1 = [x.name for x in tf.global_variables(scope='reuse')]\n    conv_2 = Conv_block_keras(tf.zeros(shape=[1,1]+[128]*3), 3)\n    vars_conv_2 = [x.name for x in tf.global_variables(scope='reuse')]\n    print(vars_conv_1 == vars_conv_2)\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nUbuntu 16.04\nTensorFlow installed from (source or binary):\nbinary\nTensorFlow version (use command below):\nv1.9.0-0-g25c197e023 1.9.0\nPython version:\n3.6\nBazel version (if compiling from source):\nN/A\nGCC/Compiler version (if compiling from source):\nN/A\nCUDA/cuDNN version:\nN/A\nGPU model and memory:\nN/A\nExact command to reproduce:\nrun MWE under 1.9.0, which works fine for 1.8.0\n\nDescribe the problem\nI think a bug was introduced, where tf.keras.layers.Conv3D in context of tf.REUSE.AUTO no longer works as intended (.e.g no parameter-sharing is performed).\nThis might be caused by the bugfix mentioned in the release notes (Using tf.keras.layers with custom variable scopes).\nThis bug seemingly does not affect the tf.keras.layers.Lambda layer, as outlined by the MWE, where tf.contrib.layers.instance_norm and tf.layers.conv3d share paramters as intended.\nSource code / logs\nMWE which runs fine under 1.8.0 but fails to yield complete parameter sharing under 1.9.0.\nimport tensorflow as tf\n\nConv3D = tf.keras.layers.Conv3D\nLambda = tf.keras.layers.Lambda\nActivation = tf.keras.layers.Activation\ntf_instance_norm = tf.contrib.layers.instance_norm    \n\ndef Conv_block_keras(input_layer, n_filters, kernel=(3, 3, 3), \n               padding='same', strides=(1, 1, 1)):\n\n    with tf.variable_scope('conv_block'):\n        #layer = Conv3D(n_filters, kernel, padding=padding, strides=strides)(input_layer) # does not work\n        #layer = Lambda(lambda x: Conv3D(n_filters, kernel, padding=padding, strides=strides)(x))(input_layer) # does not work\n        layer = Lambda(lambda x: tf.layers.conv3d(inputs=x, filters=n_filters, padding=padding, strides=strides, kernel_size=kernel))(input_layer)\n        layer = Lambda(lambda x: tf_instance_norm(inputs=x, data_format='NCHW'))(layer)\n        return Activation('relu')(layer)\n\nwith tf.variable_scope('reuse', reuse=tf.AUTO_REUSE):\n    conv_1 = Conv_block_keras(tf.zeros(shape=[1,1]+[128]*3), 3)\n    vars_conv_1 = [x.name for x in tf.global_variables(scope='reuse')]\n    conv_2 = Conv_block_keras(tf.zeros(shape=[1,1]+[128]*3), 3)\n    vars_conv_2 = [x.name for x in tf.global_variables(scope='reuse')]\n    print(vars_conv_1 == vars_conv_2)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nUbuntu 16.04\r\n- **TensorFlow installed from (source or binary)**:\r\nbinary\r\n- **TensorFlow version (use command below)**:\r\nv1.9.0-0-g25c197e023 1.9.0\r\n- **Python version**: \r\n3.6\r\n- **Bazel version (if compiling from source)**:\r\nN/A\r\n- **GCC/Compiler version (if compiling from source)**:\r\nN/A\r\n- **CUDA/cuDNN version**:\r\nN/A\r\n- **GPU model and memory**:\r\nN/A\r\n- **Exact command to reproduce**:\r\nrun MWE under 1.9.0, which works fine for 1.8.0\r\n\r\n### Describe the problem\r\nI think a bug was introduced, where `tf.keras.layers.Conv3D` in context of `tf.REUSE.AUTO` no longer works as intended (.e.g no parameter-sharing is performed).\r\nThis might be caused by the bugfix mentioned in the [release notes](https://github.com/tensorflow/tensorflow/releases/tag/v1.9.0) (Using tf.keras.layers with custom variable scopes).\r\n\r\nThis bug seemingly does not affect the `tf.keras.layers.Lambda` layer, as outlined by the MWE, where `tf.contrib.layers.instance_norm` and `tf.layers.conv3d` share paramters as intended.\r\n\r\n### Source code / logs\r\nMWE which runs fine under 1.8.0 but fails to yield complete parameter sharing under 1.9.0.\r\n\r\n```\r\nimport tensorflow as tf\r\n\r\nConv3D = tf.keras.layers.Conv3D\r\nLambda = tf.keras.layers.Lambda\r\nActivation = tf.keras.layers.Activation\r\ntf_instance_norm = tf.contrib.layers.instance_norm    \r\n\r\ndef Conv_block_keras(input_layer, n_filters, kernel=(3, 3, 3), \r\n               padding='same', strides=(1, 1, 1)):\r\n\r\n    with tf.variable_scope('conv_block'):\r\n        #layer = Conv3D(n_filters, kernel, padding=padding, strides=strides)(input_layer) # does not work\r\n        #layer = Lambda(lambda x: Conv3D(n_filters, kernel, padding=padding, strides=strides)(x))(input_layer) # does not work\r\n        layer = Lambda(lambda x: tf.layers.conv3d(inputs=x, filters=n_filters, padding=padding, strides=strides, kernel_size=kernel))(input_layer)\r\n        layer = Lambda(lambda x: tf_instance_norm(inputs=x, data_format='NCHW'))(layer)\r\n        return Activation('relu')(layer)\r\n\r\nwith tf.variable_scope('reuse', reuse=tf.AUTO_REUSE):\r\n    conv_1 = Conv_block_keras(tf.zeros(shape=[1,1]+[128]*3), 3)\r\n    vars_conv_1 = [x.name for x in tf.global_variables(scope='reuse')]\r\n    conv_2 = Conv_block_keras(tf.zeros(shape=[1,1]+[128]*3), 3)\r\n    vars_conv_2 = [x.name for x in tf.global_variables(scope='reuse')]\r\n    print(vars_conv_1 == vars_conv_2)\r\n```\r\n"}