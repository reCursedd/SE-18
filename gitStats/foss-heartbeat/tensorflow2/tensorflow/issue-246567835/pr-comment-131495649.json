{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/131495649", "pull_request_review_id": 54487469, "id": 131495649, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTQ5NTY0OQ==", "diff_hunk": "@@ -202,6 +202,7 @@ Status CudaSolver::CopyLapackInfoToHostAsync(\n // numeric types.\n #define TF_CALL_LAPACK_TYPES(m) \\\n   m(float, S) m(double, D) m(std::complex<float>, C) m(std::complex<double>, Z)\n+#define TF_CALL_LAPACK_TYPES_NO_COMPLEX(m) m(float, S) m(double, D)", "path": "tensorflow/core/kernels/cuda_solvers.cc", "position": 13, "original_position": 48, "commit_id": "bfda71b1104c7d1d0210439c22cded14c87c7db7", "original_commit_id": "61a77cb6c1b65678f41e60bbd9a93c1052fe8aa8", "user": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "body": "There is no good reason. It was done this way because it made the code slight simpler when using Eigen. But you'll notice that the Python wrapper immediately casts it back to real again:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/linalg_ops.py#L281\r\n\r\nWe should probably fix the kernels to return real singular values in both cases. But since it requires changing the signature of the kernel, we would have to introduce a new SvdOpV2 to avoid backwards compatibility problems. Then we could get rid of the wasteful casting in the Python wrapper. I'll leave it up to you whether you are up for it in this PR. We can also do that and add complex support in a follow up.", "created_at": "2017-08-04T22:04:05Z", "updated_at": "2017-09-06T05:32:18Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11878#discussion_r131495649", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11878", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/131495649"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11878#discussion_r131495649"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11878"}}, "body_html": "<p>There is no good reason. It was done this way because it made the code slight simpler when using Eigen. But you'll notice that the Python wrapper immediately casts it back to real again:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/linalg_ops.py#L281\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/linalg_ops.py#L281</a></p>\n<p>We should probably fix the kernels to return real singular values in both cases. But since it requires changing the signature of the kernel, we would have to introduce a new SvdOpV2 to avoid backwards compatibility problems. Then we could get rid of the wasteful casting in the Python wrapper. I'll leave it up to you whether you are up for it in this PR. We can also do that and add complex support in a follow up.</p>", "body_text": "There is no good reason. It was done this way because it made the code slight simpler when using Eigen. But you'll notice that the Python wrapper immediately casts it back to real again:\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/linalg_ops.py#L281\nWe should probably fix the kernels to return real singular values in both cases. But since it requires changing the signature of the kernel, we would have to introduce a new SvdOpV2 to avoid backwards compatibility problems. Then we could get rid of the wasteful casting in the Python wrapper. I'll leave it up to you whether you are up for it in this PR. We can also do that and add complex support in a follow up.", "in_reply_to_id": 130755062}