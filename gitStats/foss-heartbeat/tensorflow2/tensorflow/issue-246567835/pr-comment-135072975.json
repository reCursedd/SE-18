{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/135072975", "pull_request_review_id": 58441668, "id": 135072975, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNTA3Mjk3NQ==", "diff_hunk": "@@ -0,0 +1,455 @@\n+/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+// See docs in ../ops/linalg_ops.cc.\n+// TODO(shamanDevel): Enable complex inputs. This will require additional tests\n+//                    and OP_REQUIRES.\n+#if GOOGLE_CUDA\n+#define EIGEN_USE_GPU\n+\n+#include <algorithm>\n+#include <vector>\n+\n+#include \"tensorflow/core/framework/kernel_def_builder.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/register_types.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/kernels/linalg_ops_common.h\"\n+#include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/platform/logging.h\"\n+#include \"tensorflow/core/platform/types.h\"\n+#include \"tensorflow/core/kernels/cuda_solvers.h\"\n+#include \"tensorflow/core/platform/stream_executor.h\"\n+#include \"tensorflow/core/util/cuda_kernel_helper.h\"\n+#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n+\n+// I need to transpose V afterwards\n+#include \"tensorflow/core/kernels/transpose_functor.h\"\n+\n+// Logging\n+#include <stdio.h>\n+\n+namespace tensorflow {\n+\n+static const char kErrMsg[] =\n+    \"Singular Value Decomposition was not successful. The input might not be \"\n+    \"valid.\";\n+\n+typedef Eigen::GpuDevice GPUDevice;\n+\n+namespace {\n+  template<class Scalar>\n+  __global__ void ComputeV1Kernel(CudaLaunchConfig config,\n+      int64 m, const Scalar* M, const Scalar* U, const Scalar* S, Scalar* V)\n+  {\n+    CUDA_1D_KERNEL_LOOP(i, config.virtual_thread_count) {\n+      Scalar v = M[i] * U[m*i] * S[0];\n+      //printf(\"i=%d, v=%f\\n\", (int) i, (float) v);\n+      CudaAtomicAdd(V, v);\n+    }\n+  }\n+\n+  template<class Scalar>\n+  __global__ void ComputeV2Kernel(CudaLaunchConfig config, Scalar* V)\n+  {\n+    CUDA_1D_KERNEL_LOOP(i, config.virtual_thread_count) {\n+      //printf(\"V'[%d] = %f\\n\", (int)i, (float)V[i]);\n+      V[i] = (Scalar) copysign(1.0, V[i]);\n+    }\n+  }\n+}\n+\n+// Scalar: The input scalar type (can be complex)\n+// SScalar: The output type for the singular value,\n+//   same as Scalar if real, or the real version if Scalar is complex\n+template <class Scalar, class SScalar>", "path": "tensorflow/core/kernels/svd_op_gpu.cu.cc", "position": null, "original_position": 78, "commit_id": "bfda71b1104c7d1d0210439c22cded14c87c7db7", "original_commit_id": "f222d793af6c6b4c53e11d87e90e3a728d1bc4eb", "user": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "body": "Instead of adding another template parameters, you can get the real type corresponding to a complex (or real) type like this:\r\n```\r\nusing RealScalar = typename Eigen::NumTraits<Scalar>::Real;\r\n```", "created_at": "2017-08-24T17:01:13Z", "updated_at": "2017-09-06T05:32:18Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11878#discussion_r135072975", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11878", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/135072975"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11878#discussion_r135072975"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11878"}}, "body_html": "<p>Instead of adding another template parameters, you can get the real type corresponding to a complex (or real) type like this:</p>\n<pre><code>using RealScalar = typename Eigen::NumTraits&lt;Scalar&gt;::Real;\n</code></pre>", "body_text": "Instead of adding another template parameters, you can get the real type corresponding to a complex (or real) type like this:\nusing RealScalar = typename Eigen::NumTraits<Scalar>::Real;"}