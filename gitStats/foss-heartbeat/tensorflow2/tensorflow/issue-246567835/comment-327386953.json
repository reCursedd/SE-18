{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/327386953", "html_url": "https://github.com/tensorflow/tensorflow/pull/11878#issuecomment-327386953", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11878", "id": 327386953, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzM4Njk1Mw==", "user": {"login": "shamanDevel", "id": 1770337, "node_id": "MDQ6VXNlcjE3NzAzMzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1770337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shamanDevel", "html_url": "https://github.com/shamanDevel", "followers_url": "https://api.github.com/users/shamanDevel/followers", "following_url": "https://api.github.com/users/shamanDevel/following{/other_user}", "gists_url": "https://api.github.com/users/shamanDevel/gists{/gist_id}", "starred_url": "https://api.github.com/users/shamanDevel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shamanDevel/subscriptions", "organizations_url": "https://api.github.com/users/shamanDevel/orgs", "repos_url": "https://api.github.com/users/shamanDevel/repos", "events_url": "https://api.github.com/users/shamanDevel/events{/privacy}", "received_events_url": "https://api.github.com/users/shamanDevel/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-06T06:23:09Z", "updated_at": "2017-09-06T06:23:09Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16907534\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rmlarsen\">@rmlarsen</a> The error is fixed now.</p>\n<p>Oh man, I learned a lot during this pull request. Like this one:<br>\nIf you have a fallback in your code (here: no CUDA support), then continue testing this fallback as well!<br>\nThis was what caused the error: a stupid typo that only appears if GOOGLE_CUDA is not defined.</p>\n<p>For the support of complex values, what do you think of the following procedure:<br>\nOnce this pull request is merged, I open an issue to discuss how to implement the complex value support. This is needed because cuSolver returns the singular values directly as reals while Eigen returns them as complex values and hence they are casted to real in the python wrapper. So the kernel definition and the python wrapper have to be adapted as well.<br>\nThen I'll implement this as a new pull request.</p>", "body_text": "@rmlarsen The error is fixed now.\nOh man, I learned a lot during this pull request. Like this one:\nIf you have a fallback in your code (here: no CUDA support), then continue testing this fallback as well!\nThis was what caused the error: a stupid typo that only appears if GOOGLE_CUDA is not defined.\nFor the support of complex values, what do you think of the following procedure:\nOnce this pull request is merged, I open an issue to discuss how to implement the complex value support. This is needed because cuSolver returns the singular values directly as reals while Eigen returns them as complex values and hence they are casted to real in the python wrapper. So the kernel definition and the python wrapper have to be adapted as well.\nThen I'll implement this as a new pull request.", "body": "@rmlarsen The error is fixed now.\r\n\r\nOh man, I learned a lot during this pull request. Like this one:\r\nIf you have a fallback in your code (here: no CUDA support), then continue testing this fallback as well!\r\nThis was what caused the error: a stupid typo that only appears if GOOGLE_CUDA is not defined.\r\n\r\nFor the support of complex values, what do you think of the following procedure:\r\nOnce this pull request is merged, I open an issue to discuss how to implement the complex value support. This is needed because cuSolver returns the singular values directly as reals while Eigen returns them as complex values and hence they are casted to real in the python wrapper. So the kernel definition and the python wrapper have to be adapted as well.\r\nThen I'll implement this as a new pull request."}