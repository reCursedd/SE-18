{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/297179317", "html_url": "https://github.com/tensorflow/tensorflow/issues/6698#issuecomment-297179317", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6698", "id": 297179317, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzE3OTMxNw==", "user": {"login": "strickon", "id": 835254, "node_id": "MDQ6VXNlcjgzNTI1NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/835254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/strickon", "html_url": "https://github.com/strickon", "followers_url": "https://api.github.com/users/strickon/followers", "following_url": "https://api.github.com/users/strickon/following{/other_user}", "gists_url": "https://api.github.com/users/strickon/gists{/gist_id}", "starred_url": "https://api.github.com/users/strickon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/strickon/subscriptions", "organizations_url": "https://api.github.com/users/strickon/orgs", "repos_url": "https://api.github.com/users/strickon/repos", "events_url": "https://api.github.com/users/strickon/events{/privacy}", "received_events_url": "https://api.github.com/users/strickon/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-25T22:06:20Z", "updated_at": "2017-04-25T22:06:20Z", "author_association": "NONE", "body_html": "<p>Here is a bit more info on how I temporarily resolved it.  I believe these issues are all related to GPU memory allocation and have nothing to do with the errors being reported.  There were other errors before this indicating some sort of memory allocation problem but the program continued to progress, eventually giving the cudnn errors that everyone is getting.  The reason I believe it works sometimes is that if you use the gpu for other things besides tensorflow such as your primary display, the available memory fluctuates.  Sometimes you can allocate what you need and other times it can't.</p>\n<p>From the API<br>\n<a href=\"https://www.tensorflow.org/versions/r0.12/how_tos/using_gpu/\" rel=\"nofollow\">https://www.tensorflow.org/versions/r0.12/how_tos/using_gpu/</a><br>\n\"By default, TensorFlow maps nearly all of the GPU memory of all GPUs (subject to CUDA_VISIBLE_DEVICES) visible to the process. This is done to more efficiently use the relatively precious GPU memory resources on the devices by reducing memory fragmentation.\"</p>\n<p>I think this default allocation is broken in some way that causes this erratic behavior and certain situations to work and others to fail.</p>\n<p>I have resolved this issue by changing the default behavior of TF to allocate a minimum amount of memory and grow as needed as detailed in the webpage.<br>\nconfig = tf.ConfigProto()<br>\nconfig.gpu_options.allow_growth = True<br>\nsession = tf.Session(config=config, ...)</p>\n<p>I have also tried the alternate way and was able to get it to work and fail with experimentally choosing a percentage that worked.  In my case it ended up being about .7.</p>\n<p>config = tf.ConfigProto()<br>\nconfig.gpu_options.per_process_gpu_memory_fraction = 0.4<br>\nsession = tf.Session(config=config, ...)</p>\n<p>Still no word from anyone on the TF team confirming this but it is worth a shot to see if others can confirm similar behavior.</p>", "body_text": "Here is a bit more info on how I temporarily resolved it.  I believe these issues are all related to GPU memory allocation and have nothing to do with the errors being reported.  There were other errors before this indicating some sort of memory allocation problem but the program continued to progress, eventually giving the cudnn errors that everyone is getting.  The reason I believe it works sometimes is that if you use the gpu for other things besides tensorflow such as your primary display, the available memory fluctuates.  Sometimes you can allocate what you need and other times it can't.\nFrom the API\nhttps://www.tensorflow.org/versions/r0.12/how_tos/using_gpu/\n\"By default, TensorFlow maps nearly all of the GPU memory of all GPUs (subject to CUDA_VISIBLE_DEVICES) visible to the process. This is done to more efficiently use the relatively precious GPU memory resources on the devices by reducing memory fragmentation.\"\nI think this default allocation is broken in some way that causes this erratic behavior and certain situations to work and others to fail.\nI have resolved this issue by changing the default behavior of TF to allocate a minimum amount of memory and grow as needed as detailed in the webpage.\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth = True\nsession = tf.Session(config=config, ...)\nI have also tried the alternate way and was able to get it to work and fail with experimentally choosing a percentage that worked.  In my case it ended up being about .7.\nconfig = tf.ConfigProto()\nconfig.gpu_options.per_process_gpu_memory_fraction = 0.4\nsession = tf.Session(config=config, ...)\nStill no word from anyone on the TF team confirming this but it is worth a shot to see if others can confirm similar behavior.", "body": "Here is a bit more info on how I temporarily resolved it.  I believe these issues are all related to GPU memory allocation and have nothing to do with the errors being reported.  There were other errors before this indicating some sort of memory allocation problem but the program continued to progress, eventually giving the cudnn errors that everyone is getting.  The reason I believe it works sometimes is that if you use the gpu for other things besides tensorflow such as your primary display, the available memory fluctuates.  Sometimes you can allocate what you need and other times it can't.\r\n\r\nFrom the API \r\nhttps://www.tensorflow.org/versions/r0.12/how_tos/using_gpu/\r\n\"By default, TensorFlow maps nearly all of the GPU memory of all GPUs (subject to CUDA_VISIBLE_DEVICES) visible to the process. This is done to more efficiently use the relatively precious GPU memory resources on the devices by reducing memory fragmentation.\"\r\n\r\nI think this default allocation is broken in some way that causes this erratic behavior and certain situations to work and others to fail.\r\n\r\nI have resolved this issue by changing the default behavior of TF to allocate a minimum amount of memory and grow as needed as detailed in the webpage.\r\nconfig = tf.ConfigProto()\r\nconfig.gpu_options.allow_growth = True\r\nsession = tf.Session(config=config, ...)\r\n\r\nI have also tried the alternate way and was able to get it to work and fail with experimentally choosing a percentage that worked.  In my case it ended up being about .7.\r\n\r\nconfig = tf.ConfigProto()\r\nconfig.gpu_options.per_process_gpu_memory_fraction = 0.4\r\nsession = tf.Session(config=config, ...)\r\n\r\nStill no word from anyone on the TF team confirming this but it is worth a shot to see if others can confirm similar behavior."}