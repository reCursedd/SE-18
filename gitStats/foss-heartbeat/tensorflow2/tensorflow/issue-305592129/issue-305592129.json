{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17739", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17739/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17739/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17739/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17739", "id": 305592129, "node_id": "MDU6SXNzdWUzMDU1OTIxMjk=", "number": 17739, "title": "Tensorflow does not close backgroud threads on shutdown", "user": {"login": "apopov-cv", "id": 7128836, "node_id": "MDQ6VXNlcjcxMjg4MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7128836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apopov-cv", "html_url": "https://github.com/apopov-cv", "followers_url": "https://api.github.com/users/apopov-cv/followers", "following_url": "https://api.github.com/users/apopov-cv/following{/other_user}", "gists_url": "https://api.github.com/users/apopov-cv/gists{/gist_id}", "starred_url": "https://api.github.com/users/apopov-cv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apopov-cv/subscriptions", "organizations_url": "https://api.github.com/users/apopov-cv/orgs", "repos_url": "https://api.github.com/users/apopov-cv/repos", "events_url": "https://api.github.com/users/apopov-cv/events{/privacy}", "received_events_url": "https://api.github.com/users/apopov-cv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-03-15T15:07:29Z", "updated_at": "2018-09-15T18:35:53Z", "closed_at": "2018-09-15T18:29:22Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code</strong></li>\n<li><strong>OS Linux Ubuntu 17.10)</strong></li>\n<li><strong>TensorFlow installed using this doc <a href=\"https://www.tensorflow.org/install/install_c\" rel=\"nofollow\">https://www.tensorflow.org/install/install_c</a></strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I see the bug that Tensorflow does not shutdown threads created by TF_NewSession. I do not see any functions in C API, except TF_DeleteSession, which should shutdown threads. But as the example shows TF_DeleteSession does not really close any threads.<br>\nYou may say that it happens only on shutdown so it is not an issue, but for the project with leak check, it is important to have clear Valgrind result.</p>\n<h3>Source code</h3>\n<pre><code>int main() {\n\tTF_Status * status = TF_NewStatus();\n\tTF_SessionOptions *opt = TF_NewSessionOptions();\n\n\tTF_Graph *graph = TF_NewGraph();\n\tTF_Session *session = TF_NewSession(graph, opt, status);\n\n\tTF_CloseSession(session, status);\n        TF_DeleteSession(session, status);\n        TF_DeleteGraph(graph);\n   \tTF_DeleteStatus(status);\n   \tTF_DeleteSessionOptions(opt);\n}\n</code></pre>\n<h3>Steps to reproduce</h3>\n<ul>\n<li><code>gcc -g -I/usr/local/include -L/usr/local/lib hello_tf.c -ltensorflow -o memtest</code></li>\n<li><code>valgrind --leak-check=full ./memtest</code><br>\nAs result valgrind report an error that threads started by tensorflow still running at the end of main.</li>\n</ul>\n<h3>Logs</h3>\n<pre><code>==17499== Memcheck, a memory error detector\n==17499== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==17499== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==17499== Command: ./memtest\n==17499== \n2018-03-15 16:37:49.446989: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX\n==17499== \n==17499== HEAP SUMMARY:\n==17499==     in use at exit: 5,933,322 bytes in 91,227 blocks\n==17499==   total heap usage: 330,638 allocs, 239,411 frees, 23,865,452 bytes allocated\n==17499== \n==17499== 1,280 bytes in 4 blocks are possibly lost in loss record 53,082 of 53,144\n==17499==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==17499==    by 0x4013C86: allocate_dtv (dl-tls.c:290)\n==17499==    by 0x4013C86: _dl_allocate_tls (dl-tls.c:538)\n==17499==    by 0x9099421: allocate_stack (allocatestack.c:597)\n==17499==    by 0x9099421: pthread_create@@GLIBC_2.2.5 (pthread_create.c:669)\n==17499==    by 0x98CA5E2: std::thread::_M_start_thread(std::shared_ptr&lt;std::thread::_Impl_base&gt;, void (*)()) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.24)\n==17499==    by 0x8779F45: tensorflow::(anonymous namespace)::PosixEnv::StartThread(tensorflow::ThreadOptions const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::function&lt;void ()&gt;) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x875008F: tensorflow::thread::ThreadPool::ThreadPool(tensorflow::Env*, tensorflow::ThreadOptions const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, int, bool) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x875024F: tensorflow::thread::ThreadPool::ThreadPool(tensorflow::Env*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, int) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x8AF9317: tensorflow::LocalDevice::EigenThreadPoolInfo::EigenThreadPoolInfo(tensorflow::SessionOptions const&amp;) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x8AF9487: tensorflow::LocalDevice::LocalDevice(tensorflow::SessionOptions const&amp;, tensorflow::DeviceAttributes const&amp;) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x8B18E11: tensorflow::ThreadPoolDevice::ThreadPoolDevice(tensorflow::SessionOptions const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, tensorflow::gtl::IntType&lt;tensorflow::Bytes_tag_, long long&gt;, tensorflow::DeviceLocality const&amp;, tensorflow::Allocator*) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x8B19289: tensorflow::ThreadPoolDeviceFactory::CreateDevices(tensorflow::SessionOptions const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::vector&lt;tensorflow::Device*, std::allocator&lt;tensorflow::Device*&gt; &gt;*) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x8AF7979: tensorflow::(anonymous namespace)::GetCPUDevice(tensorflow::Env*) [clone .constprop.149] (in /usr/local/lib/libtensorflow_framework.so)\n==17499== \n==17499== 1,280 bytes in 4 blocks are possibly lost in loss record 53,083 of 53,144\n==17499==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==17499==    by 0x4013C86: allocate_dtv (dl-tls.c:290)\n==17499==    by 0x4013C86: _dl_allocate_tls (dl-tls.c:538)\n==17499==    by 0x9099421: allocate_stack (allocatestack.c:597)\n==17499==    by 0x9099421: pthread_create@@GLIBC_2.2.5 (pthread_create.c:669)\n==17499==    by 0x98CA5E2: std::thread::_M_start_thread(std::shared_ptr&lt;std::thread::_Impl_base&gt;, void (*)()) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.24)\n==17499==    by 0x8779F45: tensorflow::(anonymous namespace)::PosixEnv::StartThread(tensorflow::ThreadOptions const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::function&lt;void ()&gt;) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x875008F: tensorflow::thread::ThreadPool::ThreadPool(tensorflow::Env*, tensorflow::ThreadOptions const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, int, bool) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x875024F: tensorflow::thread::ThreadPool::ThreadPool(tensorflow::Env*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, int) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x70BE592: ??? (in /usr/local/lib/libtensorflow.so)\n==17499==    by 0x70BFD89: ??? (in /usr/local/lib/libtensorflow.so)\n==17499==    by 0x70BFF09: ??? (in /usr/local/lib/libtensorflow.so)\n==17499==    by 0x8B107DE: tensorflow::NewSession(tensorflow::SessionOptions const&amp;, tensorflow::Session**) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x51E1EB3: TF_NewSession (in /usr/local/lib/libtensorflow.so)\n==17499== \n==17499== LEAK SUMMARY:\n==17499==    definitely lost: 0 bytes in 0 blocks\n==17499==    indirectly lost: 0 bytes in 0 blocks\n==17499==      possibly lost: 2,560 bytes in 8 blocks\n==17499==    still reachable: 5,930,762 bytes in 91,219 blocks\n\n</code></pre>", "body_text": "System information\n\nHave I written custom code\nOS Linux Ubuntu 17.10)\nTensorFlow installed using this doc https://www.tensorflow.org/install/install_c:\n\nDescribe the problem\nI see the bug that Tensorflow does not shutdown threads created by TF_NewSession. I do not see any functions in C API, except TF_DeleteSession, which should shutdown threads. But as the example shows TF_DeleteSession does not really close any threads.\nYou may say that it happens only on shutdown so it is not an issue, but for the project with leak check, it is important to have clear Valgrind result.\nSource code\nint main() {\n\tTF_Status * status = TF_NewStatus();\n\tTF_SessionOptions *opt = TF_NewSessionOptions();\n\n\tTF_Graph *graph = TF_NewGraph();\n\tTF_Session *session = TF_NewSession(graph, opt, status);\n\n\tTF_CloseSession(session, status);\n        TF_DeleteSession(session, status);\n        TF_DeleteGraph(graph);\n   \tTF_DeleteStatus(status);\n   \tTF_DeleteSessionOptions(opt);\n}\n\nSteps to reproduce\n\ngcc -g -I/usr/local/include -L/usr/local/lib hello_tf.c -ltensorflow -o memtest\nvalgrind --leak-check=full ./memtest\nAs result valgrind report an error that threads started by tensorflow still running at the end of main.\n\nLogs\n==17499== Memcheck, a memory error detector\n==17499== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==17499== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==17499== Command: ./memtest\n==17499== \n2018-03-15 16:37:49.446989: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX\n==17499== \n==17499== HEAP SUMMARY:\n==17499==     in use at exit: 5,933,322 bytes in 91,227 blocks\n==17499==   total heap usage: 330,638 allocs, 239,411 frees, 23,865,452 bytes allocated\n==17499== \n==17499== 1,280 bytes in 4 blocks are possibly lost in loss record 53,082 of 53,144\n==17499==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==17499==    by 0x4013C86: allocate_dtv (dl-tls.c:290)\n==17499==    by 0x4013C86: _dl_allocate_tls (dl-tls.c:538)\n==17499==    by 0x9099421: allocate_stack (allocatestack.c:597)\n==17499==    by 0x9099421: pthread_create@@GLIBC_2.2.5 (pthread_create.c:669)\n==17499==    by 0x98CA5E2: std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)()) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.24)\n==17499==    by 0x8779F45: tensorflow::(anonymous namespace)::PosixEnv::StartThread(tensorflow::ThreadOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void ()>) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x875008F: tensorflow::thread::ThreadPool::ThreadPool(tensorflow::Env*, tensorflow::ThreadOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, bool) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x875024F: tensorflow::thread::ThreadPool::ThreadPool(tensorflow::Env*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x8AF9317: tensorflow::LocalDevice::EigenThreadPoolInfo::EigenThreadPoolInfo(tensorflow::SessionOptions const&) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x8AF9487: tensorflow::LocalDevice::LocalDevice(tensorflow::SessionOptions const&, tensorflow::DeviceAttributes const&) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x8B18E11: tensorflow::ThreadPoolDevice::ThreadPoolDevice(tensorflow::SessionOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tensorflow::gtl::IntType<tensorflow::Bytes_tag_, long long>, tensorflow::DeviceLocality const&, tensorflow::Allocator*) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x8B19289: tensorflow::ThreadPoolDeviceFactory::CreateDevices(tensorflow::SessionOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<tensorflow::Device*, std::allocator<tensorflow::Device*> >*) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x8AF7979: tensorflow::(anonymous namespace)::GetCPUDevice(tensorflow::Env*) [clone .constprop.149] (in /usr/local/lib/libtensorflow_framework.so)\n==17499== \n==17499== 1,280 bytes in 4 blocks are possibly lost in loss record 53,083 of 53,144\n==17499==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\n==17499==    by 0x4013C86: allocate_dtv (dl-tls.c:290)\n==17499==    by 0x4013C86: _dl_allocate_tls (dl-tls.c:538)\n==17499==    by 0x9099421: allocate_stack (allocatestack.c:597)\n==17499==    by 0x9099421: pthread_create@@GLIBC_2.2.5 (pthread_create.c:669)\n==17499==    by 0x98CA5E2: std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)()) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.24)\n==17499==    by 0x8779F45: tensorflow::(anonymous namespace)::PosixEnv::StartThread(tensorflow::ThreadOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void ()>) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x875008F: tensorflow::thread::ThreadPool::ThreadPool(tensorflow::Env*, tensorflow::ThreadOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, bool) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x875024F: tensorflow::thread::ThreadPool::ThreadPool(tensorflow::Env*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x70BE592: ??? (in /usr/local/lib/libtensorflow.so)\n==17499==    by 0x70BFD89: ??? (in /usr/local/lib/libtensorflow.so)\n==17499==    by 0x70BFF09: ??? (in /usr/local/lib/libtensorflow.so)\n==17499==    by 0x8B107DE: tensorflow::NewSession(tensorflow::SessionOptions const&, tensorflow::Session**) (in /usr/local/lib/libtensorflow_framework.so)\n==17499==    by 0x51E1EB3: TF_NewSession (in /usr/local/lib/libtensorflow.so)\n==17499== \n==17499== LEAK SUMMARY:\n==17499==    definitely lost: 0 bytes in 0 blocks\n==17499==    indirectly lost: 0 bytes in 0 blocks\n==17499==      possibly lost: 2,560 bytes in 8 blocks\n==17499==    still reachable: 5,930,762 bytes in 91,219 blocks", "body": "### System information\r\n- **Have I written custom code**\r\n- **OS Linux Ubuntu 17.10)**\r\n- **TensorFlow installed using this doc https://www.tensorflow.org/install/install_c**:\r\n\r\n### Describe the problem\r\nI see the bug that Tensorflow does not shutdown threads created by TF_NewSession. I do not see any functions in C API, except TF_DeleteSession, which should shutdown threads. But as the example shows TF_DeleteSession does not really close any threads. \r\nYou may say that it happens only on shutdown so it is not an issue, but for the project with leak check, it is important to have clear Valgrind result.\r\n### Source code \r\n```\r\nint main() {\r\n\tTF_Status * status = TF_NewStatus();\r\n\tTF_SessionOptions *opt = TF_NewSessionOptions();\r\n\r\n\tTF_Graph *graph = TF_NewGraph();\r\n\tTF_Session *session = TF_NewSession(graph, opt, status);\r\n\r\n\tTF_CloseSession(session, status);\r\n        TF_DeleteSession(session, status);\r\n        TF_DeleteGraph(graph);\r\n   \tTF_DeleteStatus(status);\r\n   \tTF_DeleteSessionOptions(opt);\r\n}\r\n```\r\n### Steps to reproduce\r\n* `gcc -g -I/usr/local/include -L/usr/local/lib hello_tf.c -ltensorflow -o memtest`\r\n* `valgrind --leak-check=full ./memtest`\r\nAs result valgrind report an error that threads started by tensorflow still running at the end of main.\r\n\r\n### Logs\r\n```\r\n==17499== Memcheck, a memory error detector\r\n==17499== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==17499== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\r\n==17499== Command: ./memtest\r\n==17499== \r\n2018-03-15 16:37:49.446989: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX\r\n==17499== \r\n==17499== HEAP SUMMARY:\r\n==17499==     in use at exit: 5,933,322 bytes in 91,227 blocks\r\n==17499==   total heap usage: 330,638 allocs, 239,411 frees, 23,865,452 bytes allocated\r\n==17499== \r\n==17499== 1,280 bytes in 4 blocks are possibly lost in loss record 53,082 of 53,144\r\n==17499==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==17499==    by 0x4013C86: allocate_dtv (dl-tls.c:290)\r\n==17499==    by 0x4013C86: _dl_allocate_tls (dl-tls.c:538)\r\n==17499==    by 0x9099421: allocate_stack (allocatestack.c:597)\r\n==17499==    by 0x9099421: pthread_create@@GLIBC_2.2.5 (pthread_create.c:669)\r\n==17499==    by 0x98CA5E2: std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)()) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.24)\r\n==17499==    by 0x8779F45: tensorflow::(anonymous namespace)::PosixEnv::StartThread(tensorflow::ThreadOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void ()>) (in /usr/local/lib/libtensorflow_framework.so)\r\n==17499==    by 0x875008F: tensorflow::thread::ThreadPool::ThreadPool(tensorflow::Env*, tensorflow::ThreadOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, bool) (in /usr/local/lib/libtensorflow_framework.so)\r\n==17499==    by 0x875024F: tensorflow::thread::ThreadPool::ThreadPool(tensorflow::Env*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) (in /usr/local/lib/libtensorflow_framework.so)\r\n==17499==    by 0x8AF9317: tensorflow::LocalDevice::EigenThreadPoolInfo::EigenThreadPoolInfo(tensorflow::SessionOptions const&) (in /usr/local/lib/libtensorflow_framework.so)\r\n==17499==    by 0x8AF9487: tensorflow::LocalDevice::LocalDevice(tensorflow::SessionOptions const&, tensorflow::DeviceAttributes const&) (in /usr/local/lib/libtensorflow_framework.so)\r\n==17499==    by 0x8B18E11: tensorflow::ThreadPoolDevice::ThreadPoolDevice(tensorflow::SessionOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tensorflow::gtl::IntType<tensorflow::Bytes_tag_, long long>, tensorflow::DeviceLocality const&, tensorflow::Allocator*) (in /usr/local/lib/libtensorflow_framework.so)\r\n==17499==    by 0x8B19289: tensorflow::ThreadPoolDeviceFactory::CreateDevices(tensorflow::SessionOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<tensorflow::Device*, std::allocator<tensorflow::Device*> >*) (in /usr/local/lib/libtensorflow_framework.so)\r\n==17499==    by 0x8AF7979: tensorflow::(anonymous namespace)::GetCPUDevice(tensorflow::Env*) [clone .constprop.149] (in /usr/local/lib/libtensorflow_framework.so)\r\n==17499== \r\n==17499== 1,280 bytes in 4 blocks are possibly lost in loss record 53,083 of 53,144\r\n==17499==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==17499==    by 0x4013C86: allocate_dtv (dl-tls.c:290)\r\n==17499==    by 0x4013C86: _dl_allocate_tls (dl-tls.c:538)\r\n==17499==    by 0x9099421: allocate_stack (allocatestack.c:597)\r\n==17499==    by 0x9099421: pthread_create@@GLIBC_2.2.5 (pthread_create.c:669)\r\n==17499==    by 0x98CA5E2: std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)()) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.24)\r\n==17499==    by 0x8779F45: tensorflow::(anonymous namespace)::PosixEnv::StartThread(tensorflow::ThreadOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::function<void ()>) (in /usr/local/lib/libtensorflow_framework.so)\r\n==17499==    by 0x875008F: tensorflow::thread::ThreadPool::ThreadPool(tensorflow::Env*, tensorflow::ThreadOptions const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, bool) (in /usr/local/lib/libtensorflow_framework.so)\r\n==17499==    by 0x875024F: tensorflow::thread::ThreadPool::ThreadPool(tensorflow::Env*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) (in /usr/local/lib/libtensorflow_framework.so)\r\n==17499==    by 0x70BE592: ??? (in /usr/local/lib/libtensorflow.so)\r\n==17499==    by 0x70BFD89: ??? (in /usr/local/lib/libtensorflow.so)\r\n==17499==    by 0x70BFF09: ??? (in /usr/local/lib/libtensorflow.so)\r\n==17499==    by 0x8B107DE: tensorflow::NewSession(tensorflow::SessionOptions const&, tensorflow::Session**) (in /usr/local/lib/libtensorflow_framework.so)\r\n==17499==    by 0x51E1EB3: TF_NewSession (in /usr/local/lib/libtensorflow.so)\r\n==17499== \r\n==17499== LEAK SUMMARY:\r\n==17499==    definitely lost: 0 bytes in 0 blocks\r\n==17499==    indirectly lost: 0 bytes in 0 blocks\r\n==17499==      possibly lost: 2,560 bytes in 8 blocks\r\n==17499==    still reachable: 5,930,762 bytes in 91,219 blocks\r\n\r\n```"}