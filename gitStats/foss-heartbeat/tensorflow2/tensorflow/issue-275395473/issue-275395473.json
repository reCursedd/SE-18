{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14726", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14726/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14726/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14726/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14726", "id": 275395473, "node_id": "MDU6SXNzdWUyNzUzOTU0NzM=", "number": 14726, "title": "Make a copy of a model", "user": {"login": "Erichliu00", "id": 23612416, "node_id": "MDQ6VXNlcjIzNjEyNDE2", "avatar_url": "https://avatars1.githubusercontent.com/u/23612416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Erichliu00", "html_url": "https://github.com/Erichliu00", "followers_url": "https://api.github.com/users/Erichliu00/followers", "following_url": "https://api.github.com/users/Erichliu00/following{/other_user}", "gists_url": "https://api.github.com/users/Erichliu00/gists{/gist_id}", "starred_url": "https://api.github.com/users/Erichliu00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Erichliu00/subscriptions", "organizations_url": "https://api.github.com/users/Erichliu00/orgs", "repos_url": "https://api.github.com/users/Erichliu00/repos", "events_url": "https://api.github.com/users/Erichliu00/events{/privacy}", "received_events_url": "https://api.github.com/users/Erichliu00/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-11-20T15:30:29Z", "updated_at": "2018-10-23T20:29:38Z", "closed_at": "2017-12-01T13:58:19Z", "author_association": "NONE", "body_html": "<p>Hi,  is there a canonical method in Tensorflow for this? For example, in Keras, we can use keras.models.clone_model for this purpose.  I though that model's copy would be such a nice feature, since copy.deepcopy does not work for me in Tensorflow.<br>\nI want to copy weights from this model to another model of identical structure,  and I do not want to save a model then restore it to another instance for this situation. Specifically, the situation at every iteration we train model1 then make model2 as a copy of current model1, adding noise to model1 parameters and sample from model2 and then use these samples to update model1.</p>\n<pre><code>Class Model1(object):\n    def method1(self):\n        ....\n    def method2(self):\n        ....\n</code></pre>", "body_text": "Hi,  is there a canonical method in Tensorflow for this? For example, in Keras, we can use keras.models.clone_model for this purpose.  I though that model's copy would be such a nice feature, since copy.deepcopy does not work for me in Tensorflow.\nI want to copy weights from this model to another model of identical structure,  and I do not want to save a model then restore it to another instance for this situation. Specifically, the situation at every iteration we train model1 then make model2 as a copy of current model1, adding noise to model1 parameters and sample from model2 and then use these samples to update model1.\nClass Model1(object):\n    def method1(self):\n        ....\n    def method2(self):\n        ....", "body": "Hi,  is there a canonical method in Tensorflow for this? For example, in Keras, we can use keras.models.clone_model for this purpose.  I though that model's copy would be such a nice feature, since copy.deepcopy does not work for me in Tensorflow. \r\nI want to copy weights from this model to another model of identical structure,  and I do not want to save a model then restore it to another instance for this situation. Specifically, the situation at every iteration we train model1 then make model2 as a copy of current model1, adding noise to model1 parameters and sample from model2 and then use these samples to update model1.\r\n```\r\nClass Model1(object):\r\n    def method1(self):\r\n        ....\r\n    def method2(self):\r\n        ....\r\n```"}