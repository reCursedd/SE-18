{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/307171534", "html_url": "https://github.com/tensorflow/tensorflow/issues/10518#issuecomment-307171534", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10518", "id": 307171534, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzE3MTUzNA==", "user": {"login": "panyx0718", "id": 2887803, "node_id": "MDQ6VXNlcjI4ODc4MDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2887803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/panyx0718", "html_url": "https://github.com/panyx0718", "followers_url": "https://api.github.com/users/panyx0718/followers", "following_url": "https://api.github.com/users/panyx0718/following{/other_user}", "gists_url": "https://api.github.com/users/panyx0718/gists{/gist_id}", "starred_url": "https://api.github.com/users/panyx0718/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/panyx0718/subscriptions", "organizations_url": "https://api.github.com/users/panyx0718/orgs", "repos_url": "https://api.github.com/users/panyx0718/repos", "events_url": "https://api.github.com/users/panyx0718/events{/privacy}", "received_events_url": "https://api.github.com/users/panyx0718/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-08T17:25:26Z", "updated_at": "2017-06-08T17:25:26Z", "author_association": "NONE", "body_html": "<p>Also tried GPU</p>\n<div class=\"highlight highlight-source-python\"><pre>  <span class=\"pl-k\">def</span> <span class=\"pl-en\">testGithubIssue10518</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1300</span>\n\n    <span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/gpu:0<span class=\"pl-pds\">'</span></span>):\n      x <span class=\"pl-k\">=</span> tf.random_normal(<span class=\"pl-v\">shape</span> <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, size])\n      w <span class=\"pl-k\">=</span> tf.random_normal(<span class=\"pl-v\">shape</span> <span class=\"pl-k\">=</span> [size, <span class=\"pl-c1\">2</span> <span class=\"pl-k\">*</span> size])\n      y <span class=\"pl-k\">=</span> tf.matmul(x,w)\n\n    <span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>tf.ConfigProto(\n        <span class=\"pl-v\">inter_op_parallelism_threads</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>,\n        <span class=\"pl-v\">intra_op_parallelism_threads</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>,\n        <span class=\"pl-v\">log_device_placement</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)) <span class=\"pl-k\">as</span> sess:\n\n      run_metadata <span class=\"pl-k\">=</span> tf.RunMetadata()\n      opts <span class=\"pl-k\">=</span> tf.contrib.tfprof.model_analyzer.<span class=\"pl-c1\">PRINT_ALL_TIMING_MEMORY</span>\n      opts[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>min_micros<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n      opts[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>min_bytes<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n      _ <span class=\"pl-k\">=</span> sess.run(y,\n                   <span class=\"pl-v\">options</span><span class=\"pl-k\">=</span>tf.RunOptions(<span class=\"pl-v\">trace_level</span><span class=\"pl-k\">=</span>tf.RunOptions.<span class=\"pl-c1\">FULL_TRACE</span>),\n                   <span class=\"pl-v\">run_metadata</span><span class=\"pl-k\">=</span>run_metadata)\n      tfprof_node <span class=\"pl-k\">=</span> model_analyzer.print_model_analysis(\n            tf.get_default_graph(),\n            <span class=\"pl-v\">run_meta</span><span class=\"pl-k\">=</span>run_metadata,\n            <span class=\"pl-v\">tfprof_options</span><span class=\"pl-k\">=</span>opts)\n\n      <span class=\"pl-c1\">self</span>.assertEqual(tfprof_node.children[<span class=\"pl-c1\">0</span>].name, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>MatMul<span class=\"pl-pds\">'</span></span>)\n      <span class=\"pl-c1\">self</span>.assertGreater(tfprof_node.children[<span class=\"pl-c1\">0</span>].exec_micros, <span class=\"pl-c1\">10</span>)</pre></div>", "body_text": "Also tried GPU\n  def testGithubIssue10518(self):\n    size = 1300\n\n    with tf.device('/gpu:0'):\n      x = tf.random_normal(shape = [1, size])\n      w = tf.random_normal(shape = [size, 2 * size])\n      y = tf.matmul(x,w)\n\n    with tf.Session(config=tf.ConfigProto(\n        inter_op_parallelism_threads = 1,\n        intra_op_parallelism_threads = 1,\n        log_device_placement=True)) as sess:\n\n      run_metadata = tf.RunMetadata()\n      opts = tf.contrib.tfprof.model_analyzer.PRINT_ALL_TIMING_MEMORY\n      opts['min_micros'] = 0\n      opts['min_bytes'] = 0\n      _ = sess.run(y,\n                   options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE),\n                   run_metadata=run_metadata)\n      tfprof_node = model_analyzer.print_model_analysis(\n            tf.get_default_graph(),\n            run_meta=run_metadata,\n            tfprof_options=opts)\n\n      self.assertEqual(tfprof_node.children[0].name, 'MatMul')\n      self.assertGreater(tfprof_node.children[0].exec_micros, 10)", "body": "Also tried GPU\r\n```python\r\n  def testGithubIssue10518(self):\r\n    size = 1300\r\n\r\n    with tf.device('/gpu:0'):\r\n      x = tf.random_normal(shape = [1, size])\r\n      w = tf.random_normal(shape = [size, 2 * size])\r\n      y = tf.matmul(x,w)\r\n\r\n    with tf.Session(config=tf.ConfigProto(\r\n        inter_op_parallelism_threads = 1,\r\n        intra_op_parallelism_threads = 1,\r\n        log_device_placement=True)) as sess:\r\n\r\n      run_metadata = tf.RunMetadata()\r\n      opts = tf.contrib.tfprof.model_analyzer.PRINT_ALL_TIMING_MEMORY\r\n      opts['min_micros'] = 0\r\n      opts['min_bytes'] = 0\r\n      _ = sess.run(y,\r\n                   options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE),\r\n                   run_metadata=run_metadata)\r\n      tfprof_node = model_analyzer.print_model_analysis(\r\n            tf.get_default_graph(),\r\n            run_meta=run_metadata,\r\n            tfprof_options=opts)\r\n\r\n      self.assertEqual(tfprof_node.children[0].name, 'MatMul')\r\n      self.assertGreater(tfprof_node.children[0].exec_micros, 10)\r\n```"}