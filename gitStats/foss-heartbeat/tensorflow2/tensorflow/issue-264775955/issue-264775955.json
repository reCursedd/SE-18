{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13648", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13648/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13648/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13648/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13648", "id": 264775955, "node_id": "MDU6SXNzdWUyNjQ3NzU5NTU=", "number": 13648, "title": "tf.string_input_producer() doesn't work with tf.placeholder", "user": {"login": "mingyr", "id": 5569293, "node_id": "MDQ6VXNlcjU1NjkyOTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5569293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mingyr", "html_url": "https://github.com/mingyr", "followers_url": "https://api.github.com/users/mingyr/followers", "following_url": "https://api.github.com/users/mingyr/following{/other_user}", "gists_url": "https://api.github.com/users/mingyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/mingyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mingyr/subscriptions", "organizations_url": "https://api.github.com/users/mingyr/orgs", "repos_url": "https://api.github.com/users/mingyr/repos", "events_url": "https://api.github.com/users/mingyr/events{/privacy}", "received_events_url": "https://api.github.com/users/mingyr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-12T00:18:34Z", "updated_at": "2017-10-12T22:09:03Z", "closed_at": "2017-10-12T14:15:30Z", "author_association": "NONE", "body_html": "<p>In a scenario it is intended to dynamically change the file names of tensorflow record files, as indicated by the following code:</p>\n<pre><code>import tensorflow as tf\n\ndef test(s):\n    filename_queue = tf.train.string_input_producer([s])\n\n    reader = tf.TextLineReader()\n    key, value = reader.read(filename_queue)\n\n    record_defaults = [[1.0], [1]]\n    col1, col2 = tf.decode_csv(value, record_defaults = record_defaults)\n\n    return col1, col2\n\ns = tf.placeholder(tf.string, None, name = 's')\n# s = tf.constant('file0.csv', tf.string)\nss = [\"file0.csv\", \"file1.csv\"]\ninputs, labels = test(s)\n\nwith tf.Session() as sess:\n    sess.run([tf.global_variables_initializer(), tf.local_variables_initializer()])\n\n    coord = tf.train.Coordinator()\n    threads = tf.train.start_queue_runners(coord=coord)\n\n    for e in ss:\n        inputs_val, labels_val = sess.run([inputs, labels], feed_dict = {s: e})\n        print(\"input {} - label {}\".format(inputs_val, labels_val))\n\n    coord.request_stop()\n    coord.join(threads)\n\n</code></pre>\n<p>it is observed the code above is working with tf.constant which is commented above, however not tf.placeholder, which is believed to be equivalent.</p>\n<p>There is no direct error related to the malfunctioning as below:</p>\n<pre><code>(tensorflow)[yuming@atlas4 working-files]$ python 36.py\n2017-10-12 11:13:21.753318: I tensorflow/core/common_runtime/gpu/gpu_device.cc:965] Found device 0 with properties:\nname: Quadro M4000 major: 5 minor: 2 memoryClockRate(GHz): 0.7725\npciBusID: 0000:83:00.0\ntotalMemory: 7.93GiB freeMemory: 7.87GiB\n2017-10-12 11:13:21.858019: I tensorflow/core/common_runtime/gpu/gpu_device.cc:965] Found device 1 with properties:\nname: Quadro K2200 major: 5 minor: 0 memoryClockRate(GHz): 1.124\npciBusID: 0000:03:00.0\ntotalMemory: 3.95GiB freeMemory: 3.54GiB\n2017-10-12 11:13:21.858060: I tensorflow/core/common_runtime/gpu/gpu_device.cc:980] Device peer to peer matrix\n2017-10-12 11:13:21.858068: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] DMA: 0 1\n2017-10-12 11:13:21.858072: I tensorflow/core/common_runtime/gpu/gpu_device.cc:996] 0:   Y N\n2017-10-12 11:13:21.858075: I tensorflow/core/common_runtime/gpu/gpu_device.cc:996] 1:   N Y\n2017-10-12 11:13:21.858082: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1055] Creating TensorFlow device (/device:GPU:0) -&gt; (device: 0, name: Quadro M4000, pci bus id: 0000:83:00.0, compute capability: 5.2)\n2017-10-12 11:13:21.858088: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1042] Ignoring gpu device (device: 1, name: Quadro K2200, pci bus id: 0000:03:00.0, compute capability: 5.0) with Cuda multiprocessor count: 5. The minimum required count is 8. You can adjust this requirement with the env var TF_MIN_GPU_MULTIPROCESSOR_COUNT.\nTraceback (most recent call last):\n  File \"36.py\", line 26, in &lt;module&gt;\n    inputs_val, labels_val = sess.run([inputs, labels], feed_dict = {s: e})\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 889, in run\n    run_metadata_ptr)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1118, in _run\n    feed_dict_tensor, options, run_metadata)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1315, in _do_run\n    options, run_metadata)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1334, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.OutOfRangeError: FIFOQueue '_0_input_producer' is closed and has insufficient elements (requested 1, current size 0)\n         [[Node: ReaderReadV2 = ReaderReadV2[_device=\"/job:localhost/replica:0/task:0/cpu:0\"](TextLineReaderV2, input_producer)]]\n\nCaused by op u'ReaderReadV2', defined at:\n  File \"36.py\", line 17, in &lt;module&gt;\n    inputs, labels = test(s)\n  File \"36.py\", line 7, in test\n    key, value = reader.read(filename_queue)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/ops/io_ops.py\", line 194, in read\n    return gen_io_ops._reader_read_v2(self._reader_ref, queue_ref, name=name)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 654, in _reader_read_v2\n    queue_handle=queue_handle, name=name)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 789, in _apply_op_helper\n    op_def=op_def)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 3052, in create_op\n    op_def=op_def)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1610, in __init__\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\n\nOutOfRangeError (see above for traceback): FIFOQueue '_0_input_producer' is closed and has insufficient elements (requested 1, current size 0)\n         [[Node: ReaderReadV2 = ReaderReadV2[_device=\"/job:localhost/replica:0/task:0/cpu:0\"](TextLineReaderV2, input_producer)]]\n\n</code></pre>\n<p>OS version Redhat 7.3, Python version 2.7.5, Tensorflow version 1.3</p>\n<p>file0.csv and file1.csv are quite simple csv files just with two lines:<br>\n0.1,0<br>\n0.9,1</p>", "body_text": "In a scenario it is intended to dynamically change the file names of tensorflow record files, as indicated by the following code:\nimport tensorflow as tf\n\ndef test(s):\n    filename_queue = tf.train.string_input_producer([s])\n\n    reader = tf.TextLineReader()\n    key, value = reader.read(filename_queue)\n\n    record_defaults = [[1.0], [1]]\n    col1, col2 = tf.decode_csv(value, record_defaults = record_defaults)\n\n    return col1, col2\n\ns = tf.placeholder(tf.string, None, name = 's')\n# s = tf.constant('file0.csv', tf.string)\nss = [\"file0.csv\", \"file1.csv\"]\ninputs, labels = test(s)\n\nwith tf.Session() as sess:\n    sess.run([tf.global_variables_initializer(), tf.local_variables_initializer()])\n\n    coord = tf.train.Coordinator()\n    threads = tf.train.start_queue_runners(coord=coord)\n\n    for e in ss:\n        inputs_val, labels_val = sess.run([inputs, labels], feed_dict = {s: e})\n        print(\"input {} - label {}\".format(inputs_val, labels_val))\n\n    coord.request_stop()\n    coord.join(threads)\n\n\nit is observed the code above is working with tf.constant which is commented above, however not tf.placeholder, which is believed to be equivalent.\nThere is no direct error related to the malfunctioning as below:\n(tensorflow)[yuming@atlas4 working-files]$ python 36.py\n2017-10-12 11:13:21.753318: I tensorflow/core/common_runtime/gpu/gpu_device.cc:965] Found device 0 with properties:\nname: Quadro M4000 major: 5 minor: 2 memoryClockRate(GHz): 0.7725\npciBusID: 0000:83:00.0\ntotalMemory: 7.93GiB freeMemory: 7.87GiB\n2017-10-12 11:13:21.858019: I tensorflow/core/common_runtime/gpu/gpu_device.cc:965] Found device 1 with properties:\nname: Quadro K2200 major: 5 minor: 0 memoryClockRate(GHz): 1.124\npciBusID: 0000:03:00.0\ntotalMemory: 3.95GiB freeMemory: 3.54GiB\n2017-10-12 11:13:21.858060: I tensorflow/core/common_runtime/gpu/gpu_device.cc:980] Device peer to peer matrix\n2017-10-12 11:13:21.858068: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] DMA: 0 1\n2017-10-12 11:13:21.858072: I tensorflow/core/common_runtime/gpu/gpu_device.cc:996] 0:   Y N\n2017-10-12 11:13:21.858075: I tensorflow/core/common_runtime/gpu/gpu_device.cc:996] 1:   N Y\n2017-10-12 11:13:21.858082: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1055] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: Quadro M4000, pci bus id: 0000:83:00.0, compute capability: 5.2)\n2017-10-12 11:13:21.858088: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1042] Ignoring gpu device (device: 1, name: Quadro K2200, pci bus id: 0000:03:00.0, compute capability: 5.0) with Cuda multiprocessor count: 5. The minimum required count is 8. You can adjust this requirement with the env var TF_MIN_GPU_MULTIPROCESSOR_COUNT.\nTraceback (most recent call last):\n  File \"36.py\", line 26, in <module>\n    inputs_val, labels_val = sess.run([inputs, labels], feed_dict = {s: e})\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 889, in run\n    run_metadata_ptr)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1118, in _run\n    feed_dict_tensor, options, run_metadata)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1315, in _do_run\n    options, run_metadata)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1334, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.OutOfRangeError: FIFOQueue '_0_input_producer' is closed and has insufficient elements (requested 1, current size 0)\n         [[Node: ReaderReadV2 = ReaderReadV2[_device=\"/job:localhost/replica:0/task:0/cpu:0\"](TextLineReaderV2, input_producer)]]\n\nCaused by op u'ReaderReadV2', defined at:\n  File \"36.py\", line 17, in <module>\n    inputs, labels = test(s)\n  File \"36.py\", line 7, in test\n    key, value = reader.read(filename_queue)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/ops/io_ops.py\", line 194, in read\n    return gen_io_ops._reader_read_v2(self._reader_ref, queue_ref, name=name)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 654, in _reader_read_v2\n    queue_handle=queue_handle, name=name)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 789, in _apply_op_helper\n    op_def=op_def)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 3052, in create_op\n    op_def=op_def)\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1610, in __init__\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\n\nOutOfRangeError (see above for traceback): FIFOQueue '_0_input_producer' is closed and has insufficient elements (requested 1, current size 0)\n         [[Node: ReaderReadV2 = ReaderReadV2[_device=\"/job:localhost/replica:0/task:0/cpu:0\"](TextLineReaderV2, input_producer)]]\n\n\nOS version Redhat 7.3, Python version 2.7.5, Tensorflow version 1.3\nfile0.csv and file1.csv are quite simple csv files just with two lines:\n0.1,0\n0.9,1", "body": "In a scenario it is intended to dynamically change the file names of tensorflow record files, as indicated by the following code:\r\n\r\n```\r\nimport tensorflow as tf\r\n\r\ndef test(s):\r\n    filename_queue = tf.train.string_input_producer([s])\r\n\r\n    reader = tf.TextLineReader()\r\n    key, value = reader.read(filename_queue)\r\n\r\n    record_defaults = [[1.0], [1]]\r\n    col1, col2 = tf.decode_csv(value, record_defaults = record_defaults)\r\n\r\n    return col1, col2\r\n\r\ns = tf.placeholder(tf.string, None, name = 's')\r\n# s = tf.constant('file0.csv', tf.string)\r\nss = [\"file0.csv\", \"file1.csv\"]\r\ninputs, labels = test(s)\r\n\r\nwith tf.Session() as sess:\r\n    sess.run([tf.global_variables_initializer(), tf.local_variables_initializer()])\r\n\r\n    coord = tf.train.Coordinator()\r\n    threads = tf.train.start_queue_runners(coord=coord)\r\n\r\n    for e in ss:\r\n        inputs_val, labels_val = sess.run([inputs, labels], feed_dict = {s: e})\r\n        print(\"input {} - label {}\".format(inputs_val, labels_val))\r\n\r\n    coord.request_stop()\r\n    coord.join(threads)\r\n\r\n```\r\n\r\nit is observed the code above is working with tf.constant which is commented above, however not tf.placeholder, which is believed to be equivalent.\r\n\r\nThere is no direct error related to the malfunctioning as below:\r\n\r\n```\r\n(tensorflow)[yuming@atlas4 working-files]$ python 36.py\r\n2017-10-12 11:13:21.753318: I tensorflow/core/common_runtime/gpu/gpu_device.cc:965] Found device 0 with properties:\r\nname: Quadro M4000 major: 5 minor: 2 memoryClockRate(GHz): 0.7725\r\npciBusID: 0000:83:00.0\r\ntotalMemory: 7.93GiB freeMemory: 7.87GiB\r\n2017-10-12 11:13:21.858019: I tensorflow/core/common_runtime/gpu/gpu_device.cc:965] Found device 1 with properties:\r\nname: Quadro K2200 major: 5 minor: 0 memoryClockRate(GHz): 1.124\r\npciBusID: 0000:03:00.0\r\ntotalMemory: 3.95GiB freeMemory: 3.54GiB\r\n2017-10-12 11:13:21.858060: I tensorflow/core/common_runtime/gpu/gpu_device.cc:980] Device peer to peer matrix\r\n2017-10-12 11:13:21.858068: I tensorflow/core/common_runtime/gpu/gpu_device.cc:986] DMA: 0 1\r\n2017-10-12 11:13:21.858072: I tensorflow/core/common_runtime/gpu/gpu_device.cc:996] 0:   Y N\r\n2017-10-12 11:13:21.858075: I tensorflow/core/common_runtime/gpu/gpu_device.cc:996] 1:   N Y\r\n2017-10-12 11:13:21.858082: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1055] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: Quadro M4000, pci bus id: 0000:83:00.0, compute capability: 5.2)\r\n2017-10-12 11:13:21.858088: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1042] Ignoring gpu device (device: 1, name: Quadro K2200, pci bus id: 0000:03:00.0, compute capability: 5.0) with Cuda multiprocessor count: 5. The minimum required count is 8. You can adjust this requirement with the env var TF_MIN_GPU_MULTIPROCESSOR_COUNT.\r\nTraceback (most recent call last):\r\n  File \"36.py\", line 26, in <module>\r\n    inputs_val, labels_val = sess.run([inputs, labels], feed_dict = {s: e})\r\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 889, in run\r\n    run_metadata_ptr)\r\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1118, in _run\r\n    feed_dict_tensor, options, run_metadata)\r\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1315, in _do_run\r\n    options, run_metadata)\r\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1334, in _do_call\r\n    raise type(e)(node_def, op, message)\r\ntensorflow.python.framework.errors_impl.OutOfRangeError: FIFOQueue '_0_input_producer' is closed and has insufficient elements (requested 1, current size 0)\r\n         [[Node: ReaderReadV2 = ReaderReadV2[_device=\"/job:localhost/replica:0/task:0/cpu:0\"](TextLineReaderV2, input_producer)]]\r\n\r\nCaused by op u'ReaderReadV2', defined at:\r\n  File \"36.py\", line 17, in <module>\r\n    inputs, labels = test(s)\r\n  File \"36.py\", line 7, in test\r\n    key, value = reader.read(filename_queue)\r\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/ops/io_ops.py\", line 194, in read\r\n    return gen_io_ops._reader_read_v2(self._reader_ref, queue_ref, name=name)\r\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 654, in _reader_read_v2\r\n    queue_handle=queue_handle, name=name)\r\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 789, in _apply_op_helper\r\n    op_def=op_def)\r\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 3052, in create_op\r\n    op_def=op_def)\r\n  File \"/home/yuming/tensorflow/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1610, in __init__\r\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\r\n\r\nOutOfRangeError (see above for traceback): FIFOQueue '_0_input_producer' is closed and has insufficient elements (requested 1, current size 0)\r\n         [[Node: ReaderReadV2 = ReaderReadV2[_device=\"/job:localhost/replica:0/task:0/cpu:0\"](TextLineReaderV2, input_producer)]]\r\n\r\n```\r\n\r\nOS version Redhat 7.3, Python version 2.7.5, Tensorflow version 1.3\r\n\r\nfile0.csv and file1.csv are quite simple csv files just with two lines:\r\n0.1,0\r\n0.9,1"}