{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/388365384", "html_url": "https://github.com/tensorflow/tensorflow/issues/7278#issuecomment-388365384", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7278", "id": 388365384, "node_id": "MDEyOklzc3VlQ29tbWVudDM4ODM2NTM4NA==", "user": {"login": "alalbiol", "id": 10939760, "node_id": "MDQ6VXNlcjEwOTM5NzYw", "avatar_url": "https://avatars0.githubusercontent.com/u/10939760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alalbiol", "html_url": "https://github.com/alalbiol", "followers_url": "https://api.github.com/users/alalbiol/followers", "following_url": "https://api.github.com/users/alalbiol/following{/other_user}", "gists_url": "https://api.github.com/users/alalbiol/gists{/gist_id}", "starred_url": "https://api.github.com/users/alalbiol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alalbiol/subscriptions", "organizations_url": "https://api.github.com/users/alalbiol/orgs", "repos_url": "https://api.github.com/users/alalbiol/repos", "events_url": "https://api.github.com/users/alalbiol/events{/privacy}", "received_events_url": "https://api.github.com/users/alalbiol/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-11T13:35:51Z", "updated_at": "2018-05-11T13:35:51Z", "author_association": "NONE", "body_html": "<p>I have found a temporally solution to this using tf.scan to iterate over the feature dimension.<br>\nI think that this is not as efficient as a native function, but low level programming of tensorflow<br>\nis too hard for me :-)<br>\nI have checked it using the 2d depth wise convolution first. The extension to 3d is inmediate:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">tf_scan_depthwise_conv2d</span>():\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>First check that we get the same results as with  tf.nn.depthwise_conv2d</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>using tf.nn.conv2d and tf.scan</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">f</span>( <span class=\"pl-smi\">old</span>,<span class=\"pl-smi\">input</span>):\n        x_sample <span class=\"pl-k\">=</span> <span class=\"pl-c1\">input</span>[<span class=\"pl-c1\">0</span>]\n        kernel_sample <span class=\"pl-k\">=</span> <span class=\"pl-c1\">input</span>[<span class=\"pl-c1\">1</span>]\n\n        y_sample <span class=\"pl-k\">=</span> tf.nn.conv2d(x_sample,kernel_sample,[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>],<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SAME<span class=\"pl-pds\">\"</span></span>)\n        <span class=\"pl-k\">return</span> y_sample\n    x_values <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">3</span>).astype(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>float32<span class=\"pl-pds\">'</span></span>)\n    kernel_values <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">2</span>).astype(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>float32<span class=\"pl-pds\">'</span></span>)\n\n    x <span class=\"pl-k\">=</span> tf.constant(x_values)\n    kernel <span class=\"pl-k\">=</span> tf.constant(kernel_values)\n\n    y <span class=\"pl-k\">=</span> tf.nn.depthwise_conv2d(x,kernel,[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>],<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SAME<span class=\"pl-pds\">\"</span></span>)\n\n    kernel_scan <span class=\"pl-k\">=</span> tf.transpose(kernel,[<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">3</span>])\n    kernel_scan <span class=\"pl-k\">=</span> tf.expand_dims(kernel_scan,<span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n    x_scan <span class=\"pl-k\">=</span> tf.transpose(x,[<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>])\n    x_scan <span class=\"pl-k\">=</span> tf.expand_dims(x_scan,<span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n\n    c <span class=\"pl-k\">=</span> tf.scan(f, (x_scan,kernel_scan) ,<span class=\"pl-v\">initializer</span> <span class=\"pl-k\">=</span> tf.zeros((<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">2</span>)))\n\n    c <span class=\"pl-k\">=</span> tf.transpose(c,[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">4</span>])\n    c <span class=\"pl-k\">=</span> tf.reshape(c,[<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">6</span>])\n    <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n         y_values,kernel_scan_values,x_scan_values,c_values  <span class=\"pl-k\">=</span> sess.run([y,kernel_scan,x_scan,c])\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>check input shapes for the scanned version</span>\n    <span class=\"pl-c1\">print</span>(kernel_scan_values.shape)\n    <span class=\"pl-c1\">print</span>(x_scan_values.shape)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>check output shapes</span>\n    <span class=\"pl-c1\">print</span>(c_values.shape)\n    <span class=\"pl-c1\">print</span>(y_values.shape)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>check values using depthwise_conv2d or the scanned version</span>\n    <span class=\"pl-c1\">print</span>(y_values[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>,:])\n    <span class=\"pl-c1\">print</span>(c_values[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>,:])\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">tf_scan_depthwise_conv3d</span>():\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>Now extend the results to 3D</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">f</span>( <span class=\"pl-smi\">old</span>,<span class=\"pl-smi\">input</span>):\n        x_sample <span class=\"pl-k\">=</span> <span class=\"pl-c1\">input</span>[<span class=\"pl-c1\">0</span>]\n        kernel_sample <span class=\"pl-k\">=</span> <span class=\"pl-c1\">input</span>[<span class=\"pl-c1\">1</span>]\n\n        y_sample <span class=\"pl-k\">=</span> tf.nn.conv3d(x_sample,kernel_sample,[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>],<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SAME<span class=\"pl-pds\">\"</span></span>)\n        <span class=\"pl-k\">return</span> y_sample\n\n    x_values <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">3</span>).astype(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>float32<span class=\"pl-pds\">'</span></span>)\n    kernel_values <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">2</span>).astype(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>float32<span class=\"pl-pds\">'</span></span>)\n\n    x <span class=\"pl-k\">=</span> tf.constant(x_values)\n    kernel <span class=\"pl-k\">=</span> tf.constant(kernel_values)\n\n    kernel_scan <span class=\"pl-k\">=</span> tf.transpose(kernel,[<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">4</span>])\n    kernel_scan <span class=\"pl-k\">=</span> tf.expand_dims(kernel_scan,<span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>)\n    x_scan <span class=\"pl-k\">=</span> tf.transpose(x,[<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>])\n    x_scan <span class=\"pl-k\">=</span> tf.expand_dims(x_scan,<span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n    c <span class=\"pl-k\">=</span> tf.scan(f, (x_scan,kernel_scan) ,<span class=\"pl-v\">initializer</span> <span class=\"pl-k\">=</span> tf.zeros((<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">2</span>)))\n    c <span class=\"pl-k\">=</span> tf.transpose(c,[<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">5</span>])\n    c <span class=\"pl-k\">=</span> tf.reshape(c,[<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">6</span>])\n\n    <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n         kernel_scan_values,x_scan_values,c_values  <span class=\"pl-k\">=</span> sess.run([kernel_scan,x_scan,c])\n\n\n    <span class=\"pl-c1\">print</span>(kernel_scan_values.shape)\n    <span class=\"pl-c1\">print</span>(x_scan_values.shape)\n    <span class=\"pl-c1\">print</span>(c_values.shape)\n    <span class=\"pl-c1\">print</span>(c_values[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>,:])</pre></div>", "body_text": "I have found a temporally solution to this using tf.scan to iterate over the feature dimension.\nI think that this is not as efficient as a native function, but low level programming of tensorflow\nis too hard for me :-)\nI have checked it using the 2d depth wise convolution first. The extension to 3d is inmediate:\ndef tf_scan_depthwise_conv2d():\n#First check that we get the same results as with  tf.nn.depthwise_conv2d\n#using tf.nn.conv2d and tf.scan\n\n    def f( old,input):\n        x_sample = input[0]\n        kernel_sample = input[1]\n\n        y_sample = tf.nn.conv2d(x_sample,kernel_sample,[1,1,1,1],\"SAME\")\n        return y_sample\n    x_values = np.random.randn(4,5,5,3).astype('float32')\n    kernel_values = np.random.randn(2,2,3,2).astype('float32')\n\n    x = tf.constant(x_values)\n    kernel = tf.constant(kernel_values)\n\n    y = tf.nn.depthwise_conv2d(x,kernel,[1,1,1,1],\"SAME\")\n\n    kernel_scan = tf.transpose(kernel,[2,0,1,3])\n    kernel_scan = tf.expand_dims(kernel_scan,axis=3)\n    x_scan = tf.transpose(x,[3,0,1,2])\n    x_scan = tf.expand_dims(x_scan,axis=-1)\n\n    c = tf.scan(f, (x_scan,kernel_scan) ,initializer = tf.zeros((4,5,5,2)))\n\n    c = tf.transpose(c,[1,2,3,0,4])\n    c = tf.reshape(c,[4,5,5,6])\n    with tf.Session() as sess:\n         y_values,kernel_scan_values,x_scan_values,c_values  = sess.run([y,kernel_scan,x_scan,c])\n\n    #check input shapes for the scanned version\n    print(kernel_scan_values.shape)\n    print(x_scan_values.shape)\n    #check output shapes\n    print(c_values.shape)\n    print(y_values.shape)\n    #check values using depthwise_conv2d or the scanned version\n    print(y_values[0,0,0,:])\n    print(c_values[0,0,0,:])\n\ndef tf_scan_depthwise_conv3d():\n#Now extend the results to 3D\n    def f( old,input):\n        x_sample = input[0]\n        kernel_sample = input[1]\n\n        y_sample = tf.nn.conv3d(x_sample,kernel_sample,[1,1,1,1,1],\"SAME\")\n        return y_sample\n\n    x_values = np.random.randn(4,5,5,5,3).astype('float32')\n    kernel_values = np.random.randn(2,2,2,3,2).astype('float32')\n\n    x = tf.constant(x_values)\n    kernel = tf.constant(kernel_values)\n\n    kernel_scan = tf.transpose(kernel,[3,0,1,2,4])\n    kernel_scan = tf.expand_dims(kernel_scan,axis=4)\n    x_scan = tf.transpose(x,[4,0,1,2,3])\n    x_scan = tf.expand_dims(x_scan,axis=-1)\n    c = tf.scan(f, (x_scan,kernel_scan) ,initializer = tf.zeros((4,5,5,5,2)))\n    c = tf.transpose(c,[1,2,3,4,0,5])\n    c = tf.reshape(c,[4,5,5,5,6])\n\n    with tf.Session() as sess:\n         kernel_scan_values,x_scan_values,c_values  = sess.run([kernel_scan,x_scan,c])\n\n\n    print(kernel_scan_values.shape)\n    print(x_scan_values.shape)\n    print(c_values.shape)\n    print(c_values[0,0,0,0,:])", "body": "I have found a temporally solution to this using tf.scan to iterate over the feature dimension.\r\nI think that this is not as efficient as a native function, but low level programming of tensorflow\r\nis too hard for me :-)\r\nI have checked it using the 2d depth wise convolution first. The extension to 3d is inmediate:\r\n\r\n```python\r\ndef tf_scan_depthwise_conv2d():\r\n#First check that we get the same results as with  tf.nn.depthwise_conv2d\r\n#using tf.nn.conv2d and tf.scan\r\n\r\n    def f( old,input):\r\n        x_sample = input[0]\r\n        kernel_sample = input[1]\r\n\r\n        y_sample = tf.nn.conv2d(x_sample,kernel_sample,[1,1,1,1],\"SAME\")\r\n        return y_sample\r\n    x_values = np.random.randn(4,5,5,3).astype('float32')\r\n    kernel_values = np.random.randn(2,2,3,2).astype('float32')\r\n\r\n    x = tf.constant(x_values)\r\n    kernel = tf.constant(kernel_values)\r\n\r\n    y = tf.nn.depthwise_conv2d(x,kernel,[1,1,1,1],\"SAME\")\r\n\r\n    kernel_scan = tf.transpose(kernel,[2,0,1,3])\r\n    kernel_scan = tf.expand_dims(kernel_scan,axis=3)\r\n    x_scan = tf.transpose(x,[3,0,1,2])\r\n    x_scan = tf.expand_dims(x_scan,axis=-1)\r\n\r\n    c = tf.scan(f, (x_scan,kernel_scan) ,initializer = tf.zeros((4,5,5,2)))\r\n\r\n    c = tf.transpose(c,[1,2,3,0,4])\r\n    c = tf.reshape(c,[4,5,5,6])\r\n    with tf.Session() as sess:\r\n         y_values,kernel_scan_values,x_scan_values,c_values  = sess.run([y,kernel_scan,x_scan,c])\r\n\r\n    #check input shapes for the scanned version\r\n    print(kernel_scan_values.shape)\r\n    print(x_scan_values.shape)\r\n    #check output shapes\r\n    print(c_values.shape)\r\n    print(y_values.shape)\r\n    #check values using depthwise_conv2d or the scanned version\r\n    print(y_values[0,0,0,:])\r\n    print(c_values[0,0,0,:])\r\n\r\ndef tf_scan_depthwise_conv3d():\r\n#Now extend the results to 3D\r\n    def f( old,input):\r\n        x_sample = input[0]\r\n        kernel_sample = input[1]\r\n\r\n        y_sample = tf.nn.conv3d(x_sample,kernel_sample,[1,1,1,1,1],\"SAME\")\r\n        return y_sample\r\n\r\n    x_values = np.random.randn(4,5,5,5,3).astype('float32')\r\n    kernel_values = np.random.randn(2,2,2,3,2).astype('float32')\r\n\r\n    x = tf.constant(x_values)\r\n    kernel = tf.constant(kernel_values)\r\n\r\n    kernel_scan = tf.transpose(kernel,[3,0,1,2,4])\r\n    kernel_scan = tf.expand_dims(kernel_scan,axis=4)\r\n    x_scan = tf.transpose(x,[4,0,1,2,3])\r\n    x_scan = tf.expand_dims(x_scan,axis=-1)\r\n    c = tf.scan(f, (x_scan,kernel_scan) ,initializer = tf.zeros((4,5,5,5,2)))\r\n    c = tf.transpose(c,[1,2,3,4,0,5])\r\n    c = tf.reshape(c,[4,5,5,5,6])\r\n\r\n    with tf.Session() as sess:\r\n         kernel_scan_values,x_scan_values,c_values  = sess.run([kernel_scan,x_scan,c])\r\n\r\n\r\n    print(kernel_scan_values.shape)\r\n    print(x_scan_values.shape)\r\n    print(c_values.shape)\r\n    print(c_values[0,0,0,0,:])\r\n```\r\n\r\n\r\n\r\n"}