{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/188003895", "html_url": "https://github.com/tensorflow/tensorflow/pull/1237#issuecomment-188003895", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1237", "id": 188003895, "node_id": "MDEyOklzc3VlQ29tbWVudDE4ODAwMzg5NQ==", "user": {"login": "dave-andersen", "id": 827870, "node_id": "MDQ6VXNlcjgyNzg3MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/827870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dave-andersen", "html_url": "https://github.com/dave-andersen", "followers_url": "https://api.github.com/users/dave-andersen/followers", "following_url": "https://api.github.com/users/dave-andersen/following{/other_user}", "gists_url": "https://api.github.com/users/dave-andersen/gists{/gist_id}", "starred_url": "https://api.github.com/users/dave-andersen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dave-andersen/subscriptions", "organizations_url": "https://api.github.com/users/dave-andersen/orgs", "repos_url": "https://api.github.com/users/dave-andersen/repos", "events_url": "https://api.github.com/users/dave-andersen/events{/privacy}", "received_events_url": "https://api.github.com/users/dave-andersen/received_events", "type": "User", "site_admin": false}, "created_at": "2016-02-24T01:44:15Z", "updated_at": "2016-02-24T04:06:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Agreed.  I think a final question for this - perhaps one that's deferrable, particularly if we put it in contrib - is:  What to do with Tensors once they're in Go?  A quick check doesn't suggest that there are immediately obvious libraries to use beyond 2D matrices, but I might be missing something.</p>\n<p>Serving in many cases can probably get by with extracting arrays of basic types, but it's worth thinking a bit about what the better general solution is.  I don't have a great idea yet.</p>\n<p>In chewing on this more, I'd probably go with something like:<br>\nUnmarshalTensor(t Tensor *, v interface{})</p>\n<p>in an analogous way to Go marshaling for other 'foreign' types.  It should be relatively straightforward to reflect upon the tensor and unmarshal it into [][]floats, etc.</p>\n<p>This seems like something that could be added later - this binding is enough to at least let one do that by hand for now.  That said, <em>having</em> the unmarshal interface available might make testing a lot easier. :)</p>", "body_text": "Agreed.  I think a final question for this - perhaps one that's deferrable, particularly if we put it in contrib - is:  What to do with Tensors once they're in Go?  A quick check doesn't suggest that there are immediately obvious libraries to use beyond 2D matrices, but I might be missing something.\nServing in many cases can probably get by with extracting arrays of basic types, but it's worth thinking a bit about what the better general solution is.  I don't have a great idea yet.\nIn chewing on this more, I'd probably go with something like:\nUnmarshalTensor(t Tensor *, v interface{})\nin an analogous way to Go marshaling for other 'foreign' types.  It should be relatively straightforward to reflect upon the tensor and unmarshal it into [][]floats, etc.\nThis seems like something that could be added later - this binding is enough to at least let one do that by hand for now.  That said, having the unmarshal interface available might make testing a lot easier. :)", "body": "Agreed.  I think a final question for this - perhaps one that's deferrable, particularly if we put it in contrib - is:  What to do with Tensors once they're in Go?  A quick check doesn't suggest that there are immediately obvious libraries to use beyond 2D matrices, but I might be missing something.\n\nServing in many cases can probably get by with extracting arrays of basic types, but it's worth thinking a bit about what the better general solution is.  I don't have a great idea yet.\n\nIn chewing on this more, I'd probably go with something like:\nUnmarshalTensor(t Tensor *, v interface{})\n\nin an analogous way to Go marshaling for other 'foreign' types.  It should be relatively straightforward to reflect upon the tensor and unmarshal it into [][]floats, etc.\n\nThis seems like something that could be added later - this binding is enough to at least let one do that by hand for now.  That said, _having_ the unmarshal interface available might make testing a lot easier. :)\n"}