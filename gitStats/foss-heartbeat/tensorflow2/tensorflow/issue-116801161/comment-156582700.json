{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/156582700", "html_url": "https://github.com/tensorflow/tensorflow/issues/199#issuecomment-156582700", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/199", "id": 156582700, "node_id": "MDEyOklzc3VlQ29tbWVudDE1NjU4MjcwMA==", "user": {"login": "michaelkarlcoleman", "id": 5120, "node_id": "MDQ6VXNlcjUxMjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelkarlcoleman", "html_url": "https://github.com/michaelkarlcoleman", "followers_url": "https://api.github.com/users/michaelkarlcoleman/followers", "following_url": "https://api.github.com/users/michaelkarlcoleman/following{/other_user}", "gists_url": "https://api.github.com/users/michaelkarlcoleman/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelkarlcoleman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelkarlcoleman/subscriptions", "organizations_url": "https://api.github.com/users/michaelkarlcoleman/orgs", "repos_url": "https://api.github.com/users/michaelkarlcoleman/repos", "events_url": "https://api.github.com/users/michaelkarlcoleman/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelkarlcoleman/received_events", "type": "User", "site_admin": false}, "created_at": "2015-11-13T22:59:39Z", "updated_at": "2015-11-13T22:59:39Z", "author_association": "NONE", "body_html": "<p>The bazel version and g++ presence were fine.  The problem turned out to be a quirk in our environment.  We use environment modules and apparently that doesn't fit seamlessly with bazel's assumptions about its environment, necessitating a special bazelrc on every run, which I had left out.  That is, the error message was not about tensorflow, but rather bazel complaining that it couldn't find all of its parts.  (which didn't occur to me as 'make' simply cannot fail this way)</p>\n<p>This got me farther, but unfortunately there are still showstopping build issues.  (We need to add our own include flag for a numpy header, and bazel fights hard to prevent this.)</p>\n<p>I'm sure bazel has advantages inside of Google, but for the purposes of just downloading and playing with this externally, it's all stick, unfortunately.  As before, a Makefile would be really helpful.</p>\n<p>P.S.  That's how that flag <em>should</em> be spelled, but bazel cleverly invents its own novel option syntax as well (--verbose_failures).</p>", "body_text": "The bazel version and g++ presence were fine.  The problem turned out to be a quirk in our environment.  We use environment modules and apparently that doesn't fit seamlessly with bazel's assumptions about its environment, necessitating a special bazelrc on every run, which I had left out.  That is, the error message was not about tensorflow, but rather bazel complaining that it couldn't find all of its parts.  (which didn't occur to me as 'make' simply cannot fail this way)\nThis got me farther, but unfortunately there are still showstopping build issues.  (We need to add our own include flag for a numpy header, and bazel fights hard to prevent this.)\nI'm sure bazel has advantages inside of Google, but for the purposes of just downloading and playing with this externally, it's all stick, unfortunately.  As before, a Makefile would be really helpful.\nP.S.  That's how that flag should be spelled, but bazel cleverly invents its own novel option syntax as well (--verbose_failures).", "body": "The bazel version and g++ presence were fine.  The problem turned out to be a quirk in our environment.  We use environment modules and apparently that doesn't fit seamlessly with bazel's assumptions about its environment, necessitating a special bazelrc on every run, which I had left out.  That is, the error message was not about tensorflow, but rather bazel complaining that it couldn't find all of its parts.  (which didn't occur to me as 'make' simply cannot fail this way)\n\nThis got me farther, but unfortunately there are still showstopping build issues.  (We need to add our own include flag for a numpy header, and bazel fights hard to prevent this.)\n\nI'm sure bazel has advantages inside of Google, but for the purposes of just downloading and playing with this externally, it's all stick, unfortunately.  As before, a Makefile would be really helpful.\n\nP.S.  That's how that flag _should_ be spelled, but bazel cleverly invents its own novel option syntax as well (--verbose_failures).\n"}