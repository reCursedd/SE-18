{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/283514792", "html_url": "https://github.com/tensorflow/tensorflow/issues/7880#issuecomment-283514792", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7880", "id": 283514792, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzUxNDc5Mg==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-02T00:15:46Z", "updated_at": "2017-03-02T00:15:46Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2111293\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/danijar\">@danijar</a> your gist is non-deterministic because different valid execution orders produce different reuslts. Consider following block</p>\n<pre><code>    dummy = tf.cond(tf.equal(self._size, 0), first, other)\n    with tf.control_dependencies([self._size.assign_add(1)]):\n      return tf.identity(dummy)\n</code></pre>\n<p>Since <code>dummy=tf.cond</code> is created outside of the <code>control_dependencies</code> block, <code>cond</code> can run either before or after <code>assign_add</code>. You can make it deterministic by moving it inside the block</p>\n<pre><code>    with tf.control_dependencies([self._size.assign_add(1)]):\n      dummy = tf.cond(tf.equal(self._size, 0), first, other)\n      return tf.identity(dummy)\n</code></pre>", "body_text": "@danijar your gist is non-deterministic because different valid execution orders produce different reuslts. Consider following block\n    dummy = tf.cond(tf.equal(self._size, 0), first, other)\n    with tf.control_dependencies([self._size.assign_add(1)]):\n      return tf.identity(dummy)\n\nSince dummy=tf.cond is created outside of the control_dependencies block, cond can run either before or after assign_add. You can make it deterministic by moving it inside the block\n    with tf.control_dependencies([self._size.assign_add(1)]):\n      dummy = tf.cond(tf.equal(self._size, 0), first, other)\n      return tf.identity(dummy)", "body": "@danijar your gist is non-deterministic because different valid execution orders produce different reuslts. Consider following block\r\n\r\n```\r\n    dummy = tf.cond(tf.equal(self._size, 0), first, other)\r\n    with tf.control_dependencies([self._size.assign_add(1)]):\r\n      return tf.identity(dummy)\r\n```\r\n\r\nSince `dummy=tf.cond` is created outside of the `control_dependencies` block, `cond` can run either before or after `assign_add`. You can make it deterministic by moving it inside the block\r\n\r\n```\r\n    with tf.control_dependencies([self._size.assign_add(1)]):\r\n      dummy = tf.cond(tf.equal(self._size, 0), first, other)\r\n      return tf.identity(dummy)\r\n```"}