{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15396", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15396/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15396/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15396/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15396", "id": 282430927, "node_id": "MDU6SXNzdWUyODI0MzA5Mjc=", "number": 15396, "title": "Bug: reshape shape inference for parital defined shape", "user": {"login": "boeddeker", "id": 13744128, "node_id": "MDQ6VXNlcjEzNzQ0MTI4", "avatar_url": "https://avatars3.githubusercontent.com/u/13744128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boeddeker", "html_url": "https://github.com/boeddeker", "followers_url": "https://api.github.com/users/boeddeker/followers", "following_url": "https://api.github.com/users/boeddeker/following{/other_user}", "gists_url": "https://api.github.com/users/boeddeker/gists{/gist_id}", "starred_url": "https://api.github.com/users/boeddeker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boeddeker/subscriptions", "organizations_url": "https://api.github.com/users/boeddeker/orgs", "repos_url": "https://api.github.com/users/boeddeker/repos", "events_url": "https://api.github.com/users/boeddeker/events{/privacy}", "received_events_url": "https://api.github.com/users/boeddeker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-12-15T13:41:46Z", "updated_at": "2018-09-20T16:29:30Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.4.0-rc1-11-g130a514 1.4.0</li>\n<li><strong>Python version</strong>: Python 3.6.3 :: Anaconda custom (64-bit)</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>: see example</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When the input shape for 'tf.reshape' is partial defined and the new shape contains a <code>-1</code> for known dimensions, 'tf.reshape' does not predict the shape. See the example code.</p>\n<h3>Source code / logs</h3>\n<p>Second and third example have working shape inference:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">foo</span>(<span class=\"pl-k\">*</span><span class=\"pl-smi\">shape</span>):\n    x <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, shape)\n    <span class=\"pl-k\">return</span> tf.reshape(x, tf.concat([tf.shape(x)[:<span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>], [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>]], <span class=\"pl-c1\">0</span>))\n\n<span class=\"pl-c1\">print</span>(foo(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Tensor(\"Reshape_8:0\", shape=(2, 3, 20), dtype=float32)  # correct</span>\n<span class=\"pl-c1\">print</span>(foo(<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Tensor(\"Reshape_9:0\", shape=(?, 3, ?), dtype=float32)  # shape inference possible</span>\n<span class=\"pl-c1\">print</span>(foo(<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Tensor(\"Reshape_10:0\", shape=(?, ?, ?), dtype=float32)  # shape inference possible</span>\n<span class=\"pl-c1\">print</span>(foo(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">None</span>))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Tensor(\"Reshape_11:0\", shape=(2, 3, ?), dtype=float32)  # correct</span></pre></div>\n<h4>Proof that shape inference is possible:</h4>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> functools, operator \n<span class=\"pl-k\">def</span> <span class=\"pl-en\">bar</span>(<span class=\"pl-k\">*</span><span class=\"pl-smi\">shape</span>):\n    x <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, shape)\n    \n    tmp <span class=\"pl-k\">=</span> x.shape[<span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>:]\n    <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> tmp <span class=\"pl-k\">==</span> tf.TensorShape(<span class=\"pl-c1\">None</span>):\n        tmp <span class=\"pl-k\">=</span> functools.reduce(operator.mul, tmp, tf.Dimension(<span class=\"pl-c1\">1</span>))\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">str</span>(tmp) <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>?<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">or</span> tmp <span class=\"pl-k\">==</span> tf.TensorShape(<span class=\"pl-c1\">None</span>):\n        shape <span class=\"pl-k\">=</span> [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>]\n    <span class=\"pl-k\">else</span>:\n        shape <span class=\"pl-k\">=</span> [tmp]\n    \n    <span class=\"pl-k\">return</span> tf.reshape(x, tf.concat([tf.shape(x)[:<span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>], shape], <span class=\"pl-c1\">0</span>))\n\n\n<span class=\"pl-c1\">print</span>(bar(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Tensor(\"Reshape_21:0\", shape=(2, 3, 20), dtype=float32)</span>\n<span class=\"pl-c1\">print</span>(bar(<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Tensor(\"Reshape_22:0\", shape=(?, 3, 20), dtype=float32)</span>\n<span class=\"pl-c1\">print</span>(bar(<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Tensor(\"Reshape_23:0\", shape=(?, ?, 20), dtype=float32)</span>\n<span class=\"pl-c1\">print</span>(bar(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">None</span>))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Tensor(\"Reshape_24:0\", shape=(2, 3, ?), dtype=float32)</span></pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.4.0-rc1-11-g130a514 1.4.0\nPython version: Python 3.6.3 :: Anaconda custom (64-bit)\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce: see example\n\nDescribe the problem\nWhen the input shape for 'tf.reshape' is partial defined and the new shape contains a -1 for known dimensions, 'tf.reshape' does not predict the shape. See the example code.\nSource code / logs\nSecond and third example have working shape inference:\ndef foo(*shape):\n    x = tf.placeholder(tf.float32, shape)\n    return tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))\n\nprint(foo(2, 3, 4, 5))  # Tensor(\"Reshape_8:0\", shape=(2, 3, 20), dtype=float32)  # correct\nprint(foo(None, 3, 4, 5))  # Tensor(\"Reshape_9:0\", shape=(?, 3, ?), dtype=float32)  # shape inference possible\nprint(foo(None, None, 4, 5))  # Tensor(\"Reshape_10:0\", shape=(?, ?, ?), dtype=float32)  # shape inference possible\nprint(foo(2, 3, 4, None))  # Tensor(\"Reshape_11:0\", shape=(2, 3, ?), dtype=float32)  # correct\nProof that shape inference is possible:\nimport functools, operator \ndef bar(*shape):\n    x = tf.placeholder(tf.float32, shape)\n    \n    tmp = x.shape[-2:]\n    if not tmp == tf.TensorShape(None):\n        tmp = functools.reduce(operator.mul, tmp, tf.Dimension(1))\n    if str(tmp) == '?' or tmp == tf.TensorShape(None):\n        shape = [-1]\n    else:\n        shape = [tmp]\n    \n    return tf.reshape(x, tf.concat([tf.shape(x)[:-2], shape], 0))\n\n\nprint(bar(2, 3, 4, 5))  # Tensor(\"Reshape_21:0\", shape=(2, 3, 20), dtype=float32)\nprint(bar(None, 3, 4, 5))  # Tensor(\"Reshape_22:0\", shape=(?, 3, 20), dtype=float32)\nprint(bar(None, None, 4, 5))  # Tensor(\"Reshape_23:0\", shape=(?, ?, 20), dtype=float32)\nprint(bar(2, 3, 4, None))  # Tensor(\"Reshape_24:0\", shape=(2, 3, ?), dtype=float32)", "body": "-----------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.4.0-rc1-11-g130a514 1.4.0\r\n- **Python version**: Python 3.6.3 :: Anaconda custom (64-bit)\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**: see example\r\n\r\n### Describe the problem\r\nWhen the input shape for 'tf.reshape' is partial defined and the new shape contains a `-1` for known dimensions, 'tf.reshape' does not predict the shape. See the example code.\r\n\r\n### Source code / logs\r\n\r\nSecond and third example have working shape inference:\r\n```python\r\ndef foo(*shape):\r\n    x = tf.placeholder(tf.float32, shape)\r\n    return tf.reshape(x, tf.concat([tf.shape(x)[:-2], [-1]], 0))\r\n\r\nprint(foo(2, 3, 4, 5))  # Tensor(\"Reshape_8:0\", shape=(2, 3, 20), dtype=float32)  # correct\r\nprint(foo(None, 3, 4, 5))  # Tensor(\"Reshape_9:0\", shape=(?, 3, ?), dtype=float32)  # shape inference possible\r\nprint(foo(None, None, 4, 5))  # Tensor(\"Reshape_10:0\", shape=(?, ?, ?), dtype=float32)  # shape inference possible\r\nprint(foo(2, 3, 4, None))  # Tensor(\"Reshape_11:0\", shape=(2, 3, ?), dtype=float32)  # correct\r\n```\r\n\r\n#### Proof that shape inference is possible:\r\n```python\r\nimport functools, operator \r\ndef bar(*shape):\r\n    x = tf.placeholder(tf.float32, shape)\r\n    \r\n    tmp = x.shape[-2:]\r\n    if not tmp == tf.TensorShape(None):\r\n        tmp = functools.reduce(operator.mul, tmp, tf.Dimension(1))\r\n    if str(tmp) == '?' or tmp == tf.TensorShape(None):\r\n        shape = [-1]\r\n    else:\r\n        shape = [tmp]\r\n    \r\n    return tf.reshape(x, tf.concat([tf.shape(x)[:-2], shape], 0))\r\n\r\n\r\nprint(bar(2, 3, 4, 5))  # Tensor(\"Reshape_21:0\", shape=(2, 3, 20), dtype=float32)\r\nprint(bar(None, 3, 4, 5))  # Tensor(\"Reshape_22:0\", shape=(?, 3, 20), dtype=float32)\r\nprint(bar(None, None, 4, 5))  # Tensor(\"Reshape_23:0\", shape=(?, ?, 20), dtype=float32)\r\nprint(bar(2, 3, 4, None))  # Tensor(\"Reshape_24:0\", shape=(2, 3, ?), dtype=float32)\r\n```"}