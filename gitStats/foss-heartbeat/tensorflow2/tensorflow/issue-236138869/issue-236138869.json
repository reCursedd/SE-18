{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10728", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10728/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10728/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10728/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10728", "id": 236138869, "node_id": "MDU6SXNzdWUyMzYxMzg4Njk=", "number": 10728, "title": "tensorflow.contrib.keras.python.keras.models throwing errors for a valid keras code", "user": {"login": "parkatji", "id": 27192665, "node_id": "MDQ6VXNlcjI3MTkyNjY1", "avatar_url": "https://avatars3.githubusercontent.com/u/27192665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parkatji", "html_url": "https://github.com/parkatji", "followers_url": "https://api.github.com/users/parkatji/followers", "following_url": "https://api.github.com/users/parkatji/following{/other_user}", "gists_url": "https://api.github.com/users/parkatji/gists{/gist_id}", "starred_url": "https://api.github.com/users/parkatji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parkatji/subscriptions", "organizations_url": "https://api.github.com/users/parkatji/orgs", "repos_url": "https://api.github.com/users/parkatji/repos", "events_url": "https://api.github.com/users/parkatji/events{/privacy}", "received_events_url": "https://api.github.com/users/parkatji/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2017-06-15T10:02:24Z", "updated_at": "2018-04-23T18:56:56Z", "closed_at": "2018-04-23T18:56:56Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<p>== cat /etc/issue ===============================================<br>\nLinux parikshit-XPS-L322X 4.4.0-79-generic <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"116155276\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/100\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/100/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/100\">#100</a>-Ubuntu SMP Wed May 17 19:58:14 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux<br>\nVERSION=\"16.04.2 LTS (Xenial Xerus)\"<br>\nVERSION_ID=\"16.04\"<br>\nVERSION_CODENAME=xenial</p>\n<p>== are we in docker =============================================<br>\nNo</p>\n<p>== compiler =====================================================<br>\nc++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609<br>\nCopyright (C) 2015 Free Software Foundation, Inc.<br>\nThis is free software; see the source for copying conditions.  There is NO<br>\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>\n<p>== uname -a =====================================================<br>\nLinux parikshit-XPS-L322X 4.4.0-79-generic <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"116155276\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/100\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/100/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/100\">#100</a>-Ubuntu SMP Wed May 17 19:58:14 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</p>\n<p>== check pips ===================================================<br>\nnumpy (1.13.0)<br>\nprotobuf (3.3.0)<br>\ntensorflow (1.2.0rc1)</p>\n<p>== check for virtualenv =========================================<br>\nFalse</p>\n<p>== tensorflow import ============================================<br>\ntf.VERSION = 1.2.0-rc1<br>\ntf.GIT_VERSION = v1.2.0-rc0-24-g94484aa<br>\ntf.COMPILER_VERSION = v1.2.0-rc0-24-g94484aa<br>\nSanity check: array([1], dtype=int32)</p>\n<p>== env ==========================================================<br>\nLD_LIBRARY_PATH is unset<br>\nDYLD_LIBRARY_PATH is unset</p>\n<p>== nvidia-smi ===================================================<br>\n./tf_env_collect.sh: line 105: nvidia-smi: command not found</p>\n<p>== cuda libs  ===================================================</p>\n<p>Keras version 2.0.5 with Tensorflow backend</p>\n<p>Using PyCharm Community edition 2017.1.3 as editor</p>\n<h3>Describe the problem</h3>\n<p>I was trying to implement a toy example for One Shot Siamese paper (Gregory Koch etc.) using Keras and found difference in behaviour (errors) between tensorflow.contrib.keras.python.keras.models (i.e using Tensorflow's contrib library for Keras) and keras.models (i.e Keras library with tensorflow backend). Here we have to train two separate CNNs with tied weights and tensorflow contrib library for keras is throwing errors for valid Keras code. Please refer to the code below for difference in behaviour / error</p>\n<h3>Source code (using tensorflow contrib lib for keras)</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> absolute_import, print_function, division\n<span class=\"pl-k\">from</span> tensorflow.contrib.keras.python.keras.layers <span class=\"pl-k\">import</span> <span class=\"pl-c1\">LSTM</span>, Input, Conv2D, Lambda, merge, Dense, Flatten,MaxPooling2D\n<span class=\"pl-k\">from</span> tensorflow.contrib.keras.python.keras.models <span class=\"pl-k\">import</span> Model, Sequential\n<span class=\"pl-k\">from</span> tensorflow.contrib.keras.python.keras.regularizers <span class=\"pl-k\">import</span> l2\n<span class=\"pl-k\">from</span> tensorflow.contrib.keras.python.keras <span class=\"pl-k\">import</span> backend <span class=\"pl-k\">as</span> K\n<span class=\"pl-k\">from</span> tensorflow.contrib.keras.python.keras.optimizers <span class=\"pl-k\">import</span> <span class=\"pl-c1\">SGD</span>\n<span class=\"pl-k\">from</span> tensorflow.contrib.keras.python.keras.initializers <span class=\"pl-k\">import</span> RandomNormal\n\ninput_shape <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">105</span>, <span class=\"pl-c1\">105</span>, <span class=\"pl-c1\">1</span>)\nleft_input <span class=\"pl-k\">=</span> Input(input_shape)\nright_input <span class=\"pl-k\">=</span> Input(input_shape)\n\nw_init <span class=\"pl-k\">=</span> RandomNormal(<span class=\"pl-v\">mean</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, <span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-2</span>)\nb_init <span class=\"pl-k\">=</span> RandomNormal(<span class=\"pl-v\">mean</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.5</span>, <span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-2</span>)\n\nconvnet <span class=\"pl-k\">=</span> Sequential()\nconvnet.add(Conv2D(<span class=\"pl-c1\">64</span>, (<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>), <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span>input_shape,\n                   <span class=\"pl-v\">kernel_initializer</span><span class=\"pl-k\">=</span>w_init, <span class=\"pl-v\">kernel_regularizer</span><span class=\"pl-k\">=</span>l2(<span class=\"pl-c1\">2e-4</span>)))\nconvnet.add(MaxPooling2D())\nconvnet.add(Conv2D(<span class=\"pl-c1\">128</span>, (<span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">7</span>), <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>,\n                   <span class=\"pl-v\">kernel_regularizer</span><span class=\"pl-k\">=</span>l2(<span class=\"pl-c1\">2e-4</span>), <span class=\"pl-v\">kernel_initializer</span><span class=\"pl-k\">=</span>w_init,\n                   <span class=\"pl-v\">bias_initializer</span><span class=\"pl-k\">=</span>b_init))\nconvnet.add(MaxPooling2D())\nconvnet.add(Conv2D(<span class=\"pl-c1\">128</span>, (<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>), <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">kernel_initializer</span><span class=\"pl-k\">=</span>w_init,\n                   <span class=\"pl-v\">kernel_regularizer</span><span class=\"pl-k\">=</span>l2(<span class=\"pl-c1\">2e-4</span>), <span class=\"pl-v\">bias_initializer</span><span class=\"pl-k\">=</span>b_init))\nconvnet.add(MaxPooling2D())\nconvnet.add(Conv2D(<span class=\"pl-c1\">256</span>, (<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>), <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">kernel_initializer</span><span class=\"pl-k\">=</span>w_init,\n                   <span class=\"pl-v\">kernel_regularizer</span><span class=\"pl-k\">=</span>l2(<span class=\"pl-c1\">2e-4</span>), <span class=\"pl-v\">bias_initializer</span><span class=\"pl-k\">=</span>b_init))\nconvnet.add(Flatten())\nconvnet.add(Dense(<span class=\"pl-c1\">4096</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sigmoid<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">kernel_regularizer</span><span class=\"pl-k\">=</span>l2(<span class=\"pl-c1\">1e-3</span>),\n                  <span class=\"pl-v\">kernel_initializer</span><span class=\"pl-k\">=</span>w_init, <span class=\"pl-v\">bias_initializer</span><span class=\"pl-k\">=</span>b_init))\n\nl_side <span class=\"pl-k\">=</span> convnet(left_input)\nr_side <span class=\"pl-k\">=</span> convnet(right_input)</pre></div>\n<h3>Output/Error (tensorflow contrib lib for keras)</h3>\n<pre><code>Traceback (most recent call last):\n  File \"/home/parikshit/PycharmProjects/Toy_example/one_shot.py\", line 53, in &lt;module&gt;\n    l_side = convnet(left_input)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/engine/topology.py\", line 432, in __call__\n    output = super(Layer, self).__call__(inputs, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 439, in __call__\n    outputs = self.call(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/models.py\", line 560, in call\n    return self.model.call(inputs, mask)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/engine/topology.py\", line 1743, in call\n    output_tensors, _, _ = self.run_internal_graph(inputs, masks)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/engine/topology.py\", line 1957, in run_internal_graph\n    self.add_loss(layer.get_losses_for(None), None)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 254, in add_loss\n    self._losses += losses\nAttributeError: 'Model' object has no attribute '_losses'\n</code></pre>\n<h3>Source code (using Keras library with tensorflow backend)</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> absolute_import, print_function, division\n<span class=\"pl-k\">from</span> keras.layers <span class=\"pl-k\">import</span> <span class=\"pl-c1\">LSTM</span>, Input, Conv2D, Lambda, merge, Dense, Flatten,MaxPooling2D\n<span class=\"pl-k\">from</span> keras.models <span class=\"pl-k\">import</span> Model, Sequential\n<span class=\"pl-k\">from</span> keras.regularizers <span class=\"pl-k\">import</span> l2\n<span class=\"pl-k\">from</span> keras <span class=\"pl-k\">import</span> backend <span class=\"pl-k\">as</span> K\n<span class=\"pl-k\">from</span> keras.optimizers <span class=\"pl-k\">import</span> <span class=\"pl-c1\">SGD</span>\n<span class=\"pl-k\">from</span> keras.initializers <span class=\"pl-k\">import</span> RandomNormal\n\ninput_shape <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">105</span>, <span class=\"pl-c1\">105</span>, <span class=\"pl-c1\">1</span>)\nleft_input <span class=\"pl-k\">=</span> Input(input_shape)\nright_input <span class=\"pl-k\">=</span> Input(input_shape)\n\nw_init <span class=\"pl-k\">=</span> RandomNormal(<span class=\"pl-v\">mean</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, <span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-2</span>)\nb_init <span class=\"pl-k\">=</span> RandomNormal(<span class=\"pl-v\">mean</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.5</span>, <span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e-2</span>)\n\nconvnet <span class=\"pl-k\">=</span> Sequential()\nconvnet.add(Conv2D(<span class=\"pl-c1\">64</span>, (<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>), <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span>input_shape,\n                   <span class=\"pl-v\">kernel_initializer</span><span class=\"pl-k\">=</span>w_init, <span class=\"pl-v\">kernel_regularizer</span><span class=\"pl-k\">=</span>l2(<span class=\"pl-c1\">2e-4</span>)))\nconvnet.add(MaxPooling2D())\nconvnet.add(Conv2D(<span class=\"pl-c1\">128</span>, (<span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">7</span>), <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>,\n                   <span class=\"pl-v\">kernel_regularizer</span><span class=\"pl-k\">=</span>l2(<span class=\"pl-c1\">2e-4</span>), <span class=\"pl-v\">kernel_initializer</span><span class=\"pl-k\">=</span>w_init,\n                   <span class=\"pl-v\">bias_initializer</span><span class=\"pl-k\">=</span>b_init))\nconvnet.add(MaxPooling2D())\nconvnet.add(Conv2D(<span class=\"pl-c1\">128</span>, (<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>), <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">kernel_initializer</span><span class=\"pl-k\">=</span>w_init,\n                   <span class=\"pl-v\">kernel_regularizer</span><span class=\"pl-k\">=</span>l2(<span class=\"pl-c1\">2e-4</span>), <span class=\"pl-v\">bias_initializer</span><span class=\"pl-k\">=</span>b_init))\nconvnet.add(MaxPooling2D())\nconvnet.add(Conv2D(<span class=\"pl-c1\">256</span>, (<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>), <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">kernel_initializer</span><span class=\"pl-k\">=</span>w_init,\n                   <span class=\"pl-v\">kernel_regularizer</span><span class=\"pl-k\">=</span>l2(<span class=\"pl-c1\">2e-4</span>), <span class=\"pl-v\">bias_initializer</span><span class=\"pl-k\">=</span>b_init))\nconvnet.add(Flatten())\nconvnet.add(Dense(<span class=\"pl-c1\">4096</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sigmoid<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">kernel_regularizer</span><span class=\"pl-k\">=</span>l2(<span class=\"pl-c1\">1e-3</span>),\n                  <span class=\"pl-v\">kernel_initializer</span><span class=\"pl-k\">=</span>w_init, <span class=\"pl-v\">bias_initializer</span><span class=\"pl-k\">=</span>b_init))\n\nl_side <span class=\"pl-k\">=</span> convnet(left_input)\nr_side <span class=\"pl-k\">=</span> convnet(right_input)</pre></div>\n<h3>Output/Error (Keras library with tensorflow backend)</h3>\n<pre><code>Using TensorFlow backend.\n\nProcess finished with exit code 0\n</code></pre>", "body_text": "System information\n== cat /etc/issue ===============================================\nLinux parikshit-XPS-L322X 4.4.0-79-generic #100-Ubuntu SMP Wed May 17 19:58:14 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\nVERSION=\"16.04.2 LTS (Xenial Xerus)\"\nVERSION_ID=\"16.04\"\nVERSION_CODENAME=xenial\n== are we in docker =============================================\nNo\n== compiler =====================================================\nc++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n== uname -a =====================================================\nLinux parikshit-XPS-L322X 4.4.0-79-generic #100-Ubuntu SMP Wed May 17 19:58:14 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n== check pips ===================================================\nnumpy (1.13.0)\nprotobuf (3.3.0)\ntensorflow (1.2.0rc1)\n== check for virtualenv =========================================\nFalse\n== tensorflow import ============================================\ntf.VERSION = 1.2.0-rc1\ntf.GIT_VERSION = v1.2.0-rc0-24-g94484aa\ntf.COMPILER_VERSION = v1.2.0-rc0-24-g94484aa\nSanity check: array([1], dtype=int32)\n== env ==========================================================\nLD_LIBRARY_PATH is unset\nDYLD_LIBRARY_PATH is unset\n== nvidia-smi ===================================================\n./tf_env_collect.sh: line 105: nvidia-smi: command not found\n== cuda libs  ===================================================\nKeras version 2.0.5 with Tensorflow backend\nUsing PyCharm Community edition 2017.1.3 as editor\nDescribe the problem\nI was trying to implement a toy example for One Shot Siamese paper (Gregory Koch etc.) using Keras and found difference in behaviour (errors) between tensorflow.contrib.keras.python.keras.models (i.e using Tensorflow's contrib library for Keras) and keras.models (i.e Keras library with tensorflow backend). Here we have to train two separate CNNs with tied weights and tensorflow contrib library for keras is throwing errors for valid Keras code. Please refer to the code below for difference in behaviour / error\nSource code (using tensorflow contrib lib for keras)\nfrom __future__ import absolute_import, print_function, division\nfrom tensorflow.contrib.keras.python.keras.layers import LSTM, Input, Conv2D, Lambda, merge, Dense, Flatten,MaxPooling2D\nfrom tensorflow.contrib.keras.python.keras.models import Model, Sequential\nfrom tensorflow.contrib.keras.python.keras.regularizers import l2\nfrom tensorflow.contrib.keras.python.keras import backend as K\nfrom tensorflow.contrib.keras.python.keras.optimizers import SGD\nfrom tensorflow.contrib.keras.python.keras.initializers import RandomNormal\n\ninput_shape = (105, 105, 1)\nleft_input = Input(input_shape)\nright_input = Input(input_shape)\n\nw_init = RandomNormal(mean=0, stddev=1e-2)\nb_init = RandomNormal(mean=0.5, stddev=1e-2)\n\nconvnet = Sequential()\nconvnet.add(Conv2D(64, (10, 10), activation='relu', input_shape=input_shape,\n                   kernel_initializer=w_init, kernel_regularizer=l2(2e-4)))\nconvnet.add(MaxPooling2D())\nconvnet.add(Conv2D(128, (7, 7), activation='relu',\n                   kernel_regularizer=l2(2e-4), kernel_initializer=w_init,\n                   bias_initializer=b_init))\nconvnet.add(MaxPooling2D())\nconvnet.add(Conv2D(128, (4, 4), activation='relu', kernel_initializer=w_init,\n                   kernel_regularizer=l2(2e-4), bias_initializer=b_init))\nconvnet.add(MaxPooling2D())\nconvnet.add(Conv2D(256, (4, 4), activation='relu', kernel_initializer=w_init,\n                   kernel_regularizer=l2(2e-4), bias_initializer=b_init))\nconvnet.add(Flatten())\nconvnet.add(Dense(4096, activation=\"sigmoid\", kernel_regularizer=l2(1e-3),\n                  kernel_initializer=w_init, bias_initializer=b_init))\n\nl_side = convnet(left_input)\nr_side = convnet(right_input)\nOutput/Error (tensorflow contrib lib for keras)\nTraceback (most recent call last):\n  File \"/home/parikshit/PycharmProjects/Toy_example/one_shot.py\", line 53, in <module>\n    l_side = convnet(left_input)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/engine/topology.py\", line 432, in __call__\n    output = super(Layer, self).__call__(inputs, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 439, in __call__\n    outputs = self.call(inputs, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/models.py\", line 560, in call\n    return self.model.call(inputs, mask)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/engine/topology.py\", line 1743, in call\n    output_tensors, _, _ = self.run_internal_graph(inputs, masks)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/engine/topology.py\", line 1957, in run_internal_graph\n    self.add_loss(layer.get_losses_for(None), None)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 254, in add_loss\n    self._losses += losses\nAttributeError: 'Model' object has no attribute '_losses'\n\nSource code (using Keras library with tensorflow backend)\nfrom __future__ import absolute_import, print_function, division\nfrom keras.layers import LSTM, Input, Conv2D, Lambda, merge, Dense, Flatten,MaxPooling2D\nfrom keras.models import Model, Sequential\nfrom keras.regularizers import l2\nfrom keras import backend as K\nfrom keras.optimizers import SGD\nfrom keras.initializers import RandomNormal\n\ninput_shape = (105, 105, 1)\nleft_input = Input(input_shape)\nright_input = Input(input_shape)\n\nw_init = RandomNormal(mean=0, stddev=1e-2)\nb_init = RandomNormal(mean=0.5, stddev=1e-2)\n\nconvnet = Sequential()\nconvnet.add(Conv2D(64, (10, 10), activation='relu', input_shape=input_shape,\n                   kernel_initializer=w_init, kernel_regularizer=l2(2e-4)))\nconvnet.add(MaxPooling2D())\nconvnet.add(Conv2D(128, (7, 7), activation='relu',\n                   kernel_regularizer=l2(2e-4), kernel_initializer=w_init,\n                   bias_initializer=b_init))\nconvnet.add(MaxPooling2D())\nconvnet.add(Conv2D(128, (4, 4), activation='relu', kernel_initializer=w_init,\n                   kernel_regularizer=l2(2e-4), bias_initializer=b_init))\nconvnet.add(MaxPooling2D())\nconvnet.add(Conv2D(256, (4, 4), activation='relu', kernel_initializer=w_init,\n                   kernel_regularizer=l2(2e-4), bias_initializer=b_init))\nconvnet.add(Flatten())\nconvnet.add(Dense(4096, activation=\"sigmoid\", kernel_regularizer=l2(1e-3),\n                  kernel_initializer=w_init, bias_initializer=b_init))\n\nl_side = convnet(left_input)\nr_side = convnet(right_input)\nOutput/Error (Keras library with tensorflow backend)\nUsing TensorFlow backend.\n\nProcess finished with exit code 0", "body": "### System information\r\n== cat /etc/issue ===============================================\r\nLinux parikshit-XPS-L322X 4.4.0-79-generic #100-Ubuntu SMP Wed May 17 19:58:14 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\nVERSION=\"16.04.2 LTS (Xenial Xerus)\"\r\nVERSION_ID=\"16.04\"\r\nVERSION_CODENAME=xenial\r\n\r\n== are we in docker =============================================\r\nNo\r\n\r\n== compiler =====================================================\r\nc++ (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\r\nCopyright (C) 2015 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n\r\n== uname -a =====================================================\r\nLinux parikshit-XPS-L322X 4.4.0-79-generic #100-Ubuntu SMP Wed May 17 19:58:14 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n== check pips ===================================================\r\nnumpy (1.13.0)\r\nprotobuf (3.3.0)\r\ntensorflow (1.2.0rc1)\r\n\r\n== check for virtualenv =========================================\r\nFalse\r\n\r\n== tensorflow import ============================================\r\ntf.VERSION = 1.2.0-rc1\r\ntf.GIT_VERSION = v1.2.0-rc0-24-g94484aa\r\ntf.COMPILER_VERSION = v1.2.0-rc0-24-g94484aa\r\nSanity check: array([1], dtype=int32)\r\n\r\n== env ==========================================================\r\nLD_LIBRARY_PATH is unset\r\nDYLD_LIBRARY_PATH is unset\r\n\r\n== nvidia-smi ===================================================\r\n./tf_env_collect.sh: line 105: nvidia-smi: command not found\r\n\r\n== cuda libs  ===================================================\r\n\r\nKeras version 2.0.5 with Tensorflow backend\r\n\r\nUsing PyCharm Community edition 2017.1.3 as editor \r\n\r\n### Describe the problem\r\nI was trying to implement a toy example for One Shot Siamese paper (Gregory Koch etc.) using Keras and found difference in behaviour (errors) between tensorflow.contrib.keras.python.keras.models (i.e using Tensorflow's contrib library for Keras) and keras.models (i.e Keras library with tensorflow backend). Here we have to train two separate CNNs with tied weights and tensorflow contrib library for keras is throwing errors for valid Keras code. Please refer to the code below for difference in behaviour / error\r\n\r\n### Source code (using tensorflow contrib lib for keras)\r\n```python\r\nfrom __future__ import absolute_import, print_function, division\r\nfrom tensorflow.contrib.keras.python.keras.layers import LSTM, Input, Conv2D, Lambda, merge, Dense, Flatten,MaxPooling2D\r\nfrom tensorflow.contrib.keras.python.keras.models import Model, Sequential\r\nfrom tensorflow.contrib.keras.python.keras.regularizers import l2\r\nfrom tensorflow.contrib.keras.python.keras import backend as K\r\nfrom tensorflow.contrib.keras.python.keras.optimizers import SGD\r\nfrom tensorflow.contrib.keras.python.keras.initializers import RandomNormal\r\n\r\ninput_shape = (105, 105, 1)\r\nleft_input = Input(input_shape)\r\nright_input = Input(input_shape)\r\n\r\nw_init = RandomNormal(mean=0, stddev=1e-2)\r\nb_init = RandomNormal(mean=0.5, stddev=1e-2)\r\n\r\nconvnet = Sequential()\r\nconvnet.add(Conv2D(64, (10, 10), activation='relu', input_shape=input_shape,\r\n                   kernel_initializer=w_init, kernel_regularizer=l2(2e-4)))\r\nconvnet.add(MaxPooling2D())\r\nconvnet.add(Conv2D(128, (7, 7), activation='relu',\r\n                   kernel_regularizer=l2(2e-4), kernel_initializer=w_init,\r\n                   bias_initializer=b_init))\r\nconvnet.add(MaxPooling2D())\r\nconvnet.add(Conv2D(128, (4, 4), activation='relu', kernel_initializer=w_init,\r\n                   kernel_regularizer=l2(2e-4), bias_initializer=b_init))\r\nconvnet.add(MaxPooling2D())\r\nconvnet.add(Conv2D(256, (4, 4), activation='relu', kernel_initializer=w_init,\r\n                   kernel_regularizer=l2(2e-4), bias_initializer=b_init))\r\nconvnet.add(Flatten())\r\nconvnet.add(Dense(4096, activation=\"sigmoid\", kernel_regularizer=l2(1e-3),\r\n                  kernel_initializer=w_init, bias_initializer=b_init))\r\n\r\nl_side = convnet(left_input)\r\nr_side = convnet(right_input)\r\n```\r\n### Output/Error (tensorflow contrib lib for keras)\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/parikshit/PycharmProjects/Toy_example/one_shot.py\", line 53, in <module>\r\n    l_side = convnet(left_input)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/engine/topology.py\", line 432, in __call__\r\n    output = super(Layer, self).__call__(inputs, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 439, in __call__\r\n    outputs = self.call(inputs, *args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/models.py\", line 560, in call\r\n    return self.model.call(inputs, mask)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/engine/topology.py\", line 1743, in call\r\n    output_tensors, _, _ = self.run_internal_graph(inputs, masks)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/keras/python/keras/engine/topology.py\", line 1957, in run_internal_graph\r\n    self.add_loss(layer.get_losses_for(None), None)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.py\", line 254, in add_loss\r\n    self._losses += losses\r\nAttributeError: 'Model' object has no attribute '_losses'\r\n```\r\n### Source code (using Keras library with tensorflow backend)\r\n```python\r\nfrom __future__ import absolute_import, print_function, division\r\nfrom keras.layers import LSTM, Input, Conv2D, Lambda, merge, Dense, Flatten,MaxPooling2D\r\nfrom keras.models import Model, Sequential\r\nfrom keras.regularizers import l2\r\nfrom keras import backend as K\r\nfrom keras.optimizers import SGD\r\nfrom keras.initializers import RandomNormal\r\n\r\ninput_shape = (105, 105, 1)\r\nleft_input = Input(input_shape)\r\nright_input = Input(input_shape)\r\n\r\nw_init = RandomNormal(mean=0, stddev=1e-2)\r\nb_init = RandomNormal(mean=0.5, stddev=1e-2)\r\n\r\nconvnet = Sequential()\r\nconvnet.add(Conv2D(64, (10, 10), activation='relu', input_shape=input_shape,\r\n                   kernel_initializer=w_init, kernel_regularizer=l2(2e-4)))\r\nconvnet.add(MaxPooling2D())\r\nconvnet.add(Conv2D(128, (7, 7), activation='relu',\r\n                   kernel_regularizer=l2(2e-4), kernel_initializer=w_init,\r\n                   bias_initializer=b_init))\r\nconvnet.add(MaxPooling2D())\r\nconvnet.add(Conv2D(128, (4, 4), activation='relu', kernel_initializer=w_init,\r\n                   kernel_regularizer=l2(2e-4), bias_initializer=b_init))\r\nconvnet.add(MaxPooling2D())\r\nconvnet.add(Conv2D(256, (4, 4), activation='relu', kernel_initializer=w_init,\r\n                   kernel_regularizer=l2(2e-4), bias_initializer=b_init))\r\nconvnet.add(Flatten())\r\nconvnet.add(Dense(4096, activation=\"sigmoid\", kernel_regularizer=l2(1e-3),\r\n                  kernel_initializer=w_init, bias_initializer=b_init))\r\n\r\nl_side = convnet(left_input)\r\nr_side = convnet(right_input)\r\n```\r\n### Output/Error (Keras library with tensorflow backend)\r\n```\r\nUsing TensorFlow backend.\r\n\r\nProcess finished with exit code 0\r\n```"}