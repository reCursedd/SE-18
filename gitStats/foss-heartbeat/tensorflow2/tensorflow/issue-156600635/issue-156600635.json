{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2494", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2494/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2494/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2494/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2494", "id": 156600635, "node_id": "MDU6SXNzdWUxNTY2MDA2MzU=", "number": 2494, "title": "Saver.save inconsistently throws InvalidArgumentError with Batch Normalization", "user": {"login": "tensorfiend", "id": 19559233, "node_id": "MDQ6VXNlcjE5NTU5MjMz", "avatar_url": "https://avatars1.githubusercontent.com/u/19559233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorfiend", "html_url": "https://github.com/tensorfiend", "followers_url": "https://api.github.com/users/tensorfiend/followers", "following_url": "https://api.github.com/users/tensorfiend/following{/other_user}", "gists_url": "https://api.github.com/users/tensorfiend/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorfiend/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorfiend/subscriptions", "organizations_url": "https://api.github.com/users/tensorfiend/orgs", "repos_url": "https://api.github.com/users/tensorfiend/repos", "events_url": "https://api.github.com/users/tensorfiend/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorfiend/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "sherrym", "id": 12770037, "node_id": "MDQ6VXNlcjEyNzcwMDM3", "avatar_url": "https://avatars0.githubusercontent.com/u/12770037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sherrym", "html_url": "https://github.com/sherrym", "followers_url": "https://api.github.com/users/sherrym/followers", "following_url": "https://api.github.com/users/sherrym/following{/other_user}", "gists_url": "https://api.github.com/users/sherrym/gists{/gist_id}", "starred_url": "https://api.github.com/users/sherrym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sherrym/subscriptions", "organizations_url": "https://api.github.com/users/sherrym/orgs", "repos_url": "https://api.github.com/users/sherrym/repos", "events_url": "https://api.github.com/users/sherrym/events{/privacy}", "received_events_url": "https://api.github.com/users/sherrym/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "sherrym", "id": 12770037, "node_id": "MDQ6VXNlcjEyNzcwMDM3", "avatar_url": "https://avatars0.githubusercontent.com/u/12770037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sherrym", "html_url": "https://github.com/sherrym", "followers_url": "https://api.github.com/users/sherrym/followers", "following_url": "https://api.github.com/users/sherrym/following{/other_user}", "gists_url": "https://api.github.com/users/sherrym/gists{/gist_id}", "starred_url": "https://api.github.com/users/sherrym/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sherrym/subscriptions", "organizations_url": "https://api.github.com/users/sherrym/orgs", "repos_url": "https://api.github.com/users/sherrym/repos", "events_url": "https://api.github.com/users/sherrym/events{/privacy}", "received_events_url": "https://api.github.com/users/sherrym/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2016-05-24T20:24:45Z", "updated_at": "2016-12-29T17:59:16Z", "closed_at": "2016-12-27T07:44:06Z", "author_association": "NONE", "body_html": "<p>Hi,</p>\n<p>First off - thanks for releasing TensorFlow. It is immensely helpful in many ways (e.g. getting it working on my GPU was a breeze). However, because of its novelty I'm running into a problem I cannot just Google.</p>\n<p>After adding batch normalization to the code for a variational autoencoder found here:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/issues/new\">https://github.com/tensorflow/tensorflow/issues/new</a></p>\n<p>saver.save() starts crashing inconsistently (sometimes it will save, sometimes it will crash). The error is unhelpful, so I'm not sure what is wrong (see error logs below).</p>\n<p>I call the saver as follows:</p>\n<pre><code>    saver = tf.train.Saver()\n        with tf.Session(graph=vae.graph) as sess:\n\n            tf.train.SummaryWriter(\"/tmp/vae_logs\", sess.graph)\n            init = tf.initialize_all_variables()\n</code></pre>\n<h3>Environment info</h3>\n<p>Operating System:<br>\nUbuntu 15.10</p>\n<p>Installed version of CUDA and cuDNN:<br>\n(please attach the output of <code>ls -l /path/to/cuda/lib/libcud*</code>):</p>\n<pre><code>-rw-r--r-- 1 root root   322936 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root       16 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudart.so -&gt; libcudart.so.7.5\nlrwxrwxrwx 1 root root       19 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudart.so.7.5 -&gt; libcudart.so.7.5.18\n-rwxr-xr-x 1 root root   383336 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudart.so.7.5.18\n-rw-r--r-- 1 root root   720192 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudart_static.a\n-rwxr-xr-x 1 root root 61453024 apr  3 10:09 /usr/local/cuda-7.5/lib64/libcudnn.so\n-rwxr-xr-x 1 root root 61453024 apr  3 10:09 /usr/local/cuda-7.5/lib64/libcudnn.so.4\n-rwxr-xr-x 1 root root 61453024 apr  3 10:09 /usr/local/cuda-7.5/lib64/libcudnn.so.4.0.7\n-rw-r--r-- 1 root root 62025862 apr  3 10:09 /usr/local/cuda-7.5/lib64/libcudnn_static.a\n\n</code></pre>\n<p>If installed from binary pip package, provide:</p>\n<ol>\n<li>Which pip package you installed.</li>\n</ol>\n<pre><code>pip freeze \ntensorflow==0.8.0\n</code></pre>\n<ol>\n<li>The output from python -c \"import tensorflow; print(tensorflow.<strong>version</strong>)\".</li>\n</ol>\n<pre><code> print(tensorflow.__version__)\n0.8.0\n</code></pre>\n<p>If installed from sources, provide the commit hash:</p>\n<h3>Steps to reproduce</h3>\n<ol>\n<li>Adapted the code from <a href=\"https://github.com/arahuja/generative-tf/tree/master/generative-tf\">https://github.com/arahuja/generative-tf/tree/master/generative-tf</a> for a Variational Autoencoder for Gaussian decoders<br>\n(this works fine)</li>\n<li>Added batch normalization:<br>\nAdded the following to variational_autoencoder.py in def <strong>init</strong>:</li>\n</ol>\n<pre><code>if self.batch_normalized:\n                self.scale_decoder = tf.Variable(tf.ones([hidden_dim], name=\"decoder_scale\"))\n                self.beta_decoder  = tf.Variable(tf.zeros([hidden_dim], name=\"decoder_beta\"))\n\n                self.scale_encoder = tf.Variable(tf.ones([hidden_dim], name=\"encoder_scale\"))\n                self.beta_encoder  = tf.Variable(tf.zeros([hidden_dim], name=\"encoder_beta\" ))\n</code></pre>\n<ol>\n<li>Added the following to the _generate and _encode functions (changing the different variables of course):</li>\n</ol>\n<pre><code>if self.batch_normalized:\n                layer_output = tf.matmul(z, self._decoder_W) + self._decoder_bias\n                batch_mean, batch_var = tf.nn.moments(layer_output, axes=[0])\n                epsilon = 1e-4\n                batch_normalized = tf.nn.batch_normalization(layer_output, batch_mean, batch_var, self.beta_decoder, self.scale_decoder, epsilon, name=\"normalization_decoder\")\n                h = self.activation_func(batch_normalized)\n\n</code></pre>\n<ol>\n<li>Now sometimes the saver throws a very cryptic 'InvalidArgumentError', but it is unclear to me why.</li>\n</ol>\n<h3>What have you tried?</h3>\n<ol>\n<li>Changed the names that I store the models in (does not help)</li>\n<li>Turned off Batch normalization (helps)</li>\n<li>Went through source code trying to track the error; but got stuck (not sure what protobuf does).</li>\n<li>Tried using less or more epochs (does not help)</li>\n</ol>\n<p>Is this a known bug?</p>\n<p>Best regards</p>\n<h3>Logs or other output that would be helpful</h3>\n<p>(If logs are large, please upload as attachment).</p>\n<pre><code>\nTraceback (most recent call last):\n  File \"train_mnist_vae.py\", line 374, in &lt;module&gt;\n    batch_normalized=args.bn\n  File \"train_mnist_vae.py\", line 212, in train_test_mnist_vae\n    save_path = saver.save(sess, os.path.join(\"saved_models/\", model_path + \".ckpt\"))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 1039, in save\n    {self.saver_def.filename_tensor_name: checkpoint_file})\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 340, in run\n    run_metadata_ptr)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 564, in _run\n    feed_dict_string, options, run_metadata)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 637, in _do_run\n    target_list, options, run_metadata)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 659, in _do_call\n    e.code)\ntensorflow.python.framework.errors.InvalidArgumentError: saved_models/bern=False_bn=True_bs=100_ds=frey_epochs=40000_ff=True_hd=300_iw=False_ld=2_lr=1e-05_mm=0_0_nt=2000_opt=rmsprop_wd=0_1.ckpt.tempstate10425989302811289116\n     [[Node: save/save = SaveSlices[T=[DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT], _device=\"/job:localhost/replica:0/task:0/cpu:0\"](_recv_save/Const_0, save/save/tensor_names, save/save/shapes_and_slices, Variable/_48233, Variable/RMSProp/_48235, Variable/RMSProp_1/_48237, Variable_1/_48239, Variable_1/RMSProp/_48241, Variable_1/RMSProp_1/_48243, Variable_2/_48245, Variable_2/RMSProp/_48247, Variable_2/RMSProp_1/_48249, Variable_3/_48251, Variable_3/RMSProp/_48253, Variable_3/RMSProp_1/_48255, decoderB/_48257, decoderB/RMSProp/_48259, decoderB/RMSProp_1/_48261, decoderW/_48263, decoderW/RMSProp/_48265, decoderW/RMSProp_1/_48267, encoderB/_48269, encoderB/RMSProp/_48271, encoderB/RMSProp_1/_48273, encoderW/_48275, encoderW/RMSProp/_48277, encoderW/RMSProp_1/_48279, log_var_decoder/_48281, log_var_decoder/RMSProp/_48283, log_var_decoder/RMSProp_1/_48285, log_var_decoder_b/_48287, log_var_decoder_b/RMSProp/_48289, log_var_decoder_b/RMSProp_1/_48291, log_var_encoder/_48293, log_var_encoder/RMSProp/_48295, log_var_encoder/RMSProp_1/_48297, log_var_encoder_b/_48299, log_var_encoder_b/RMSProp/_48301, log_var_encoder_b/RMSProp_1/_48303, mean_decoder/_48305, mean_decoder/RMSProp/_48307, mean_decoder/RMSProp_1/_48309, mean_decoderB/_48311, mean_decoderB/RMSProp/_48313, mean_decoderB/RMSProp_1/_48315, mean_encoder/_48317, mean_encoder/RMSProp/_48319, mean_encoder/RMSProp_1/_48321, mean_encoderB/_48323, mean_encoderB/RMSProp/_48325, mean_encoderB/RMSProp_1/_48327)]]\nCaused by op u'save/save', defined at:\n  File \"train_mnist_vae.py\", line 374, in &lt;module&gt;\n    batch_normalized=args.bn\n  File \"train_mnist_vae.py\", line 81, in train_test_mnist_vae\n    saver = tf.train.Saver()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 833, in __init__\n    restore_sequentially=restore_sequentially)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 501, in build\n    save_tensor = self._AddSaveOps(filename_tensor, vars_to_save)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 197, in _AddSaveOps\n    save = self.save_op(filename_tensor, vars_to_save)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 149, in save_op\n    tensor_slices=[vs.slice_spec for vs in vars_to_save])\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/io_ops.py\", line 172, in _save\n    tensors, name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_io_ops.py\", line 341, in _save_slices\n    name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/op_def_library.py\", line 661, in apply_op\n    op_def=op_def)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2154, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1154, in __init__\n    self._traceback = _extract_stack()\n</code></pre>", "body_text": "Hi,\nFirst off - thanks for releasing TensorFlow. It is immensely helpful in many ways (e.g. getting it working on my GPU was a breeze). However, because of its novelty I'm running into a problem I cannot just Google.\nAfter adding batch normalization to the code for a variational autoencoder found here:\nhttps://github.com/tensorflow/tensorflow/issues/new\nsaver.save() starts crashing inconsistently (sometimes it will save, sometimes it will crash). The error is unhelpful, so I'm not sure what is wrong (see error logs below).\nI call the saver as follows:\n    saver = tf.train.Saver()\n        with tf.Session(graph=vae.graph) as sess:\n\n            tf.train.SummaryWriter(\"/tmp/vae_logs\", sess.graph)\n            init = tf.initialize_all_variables()\n\nEnvironment info\nOperating System:\nUbuntu 15.10\nInstalled version of CUDA and cuDNN:\n(please attach the output of ls -l /path/to/cuda/lib/libcud*):\n-rw-r--r-- 1 root root   322936 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root       16 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudart.so -> libcudart.so.7.5\nlrwxrwxrwx 1 root root       19 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudart.so.7.5 -> libcudart.so.7.5.18\n-rwxr-xr-x 1 root root   383336 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudart.so.7.5.18\n-rw-r--r-- 1 root root   720192 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudart_static.a\n-rwxr-xr-x 1 root root 61453024 apr  3 10:09 /usr/local/cuda-7.5/lib64/libcudnn.so\n-rwxr-xr-x 1 root root 61453024 apr  3 10:09 /usr/local/cuda-7.5/lib64/libcudnn.so.4\n-rwxr-xr-x 1 root root 61453024 apr  3 10:09 /usr/local/cuda-7.5/lib64/libcudnn.so.4.0.7\n-rw-r--r-- 1 root root 62025862 apr  3 10:09 /usr/local/cuda-7.5/lib64/libcudnn_static.a\n\n\nIf installed from binary pip package, provide:\n\nWhich pip package you installed.\n\npip freeze \ntensorflow==0.8.0\n\n\nThe output from python -c \"import tensorflow; print(tensorflow.version)\".\n\n print(tensorflow.__version__)\n0.8.0\n\nIf installed from sources, provide the commit hash:\nSteps to reproduce\n\nAdapted the code from https://github.com/arahuja/generative-tf/tree/master/generative-tf for a Variational Autoencoder for Gaussian decoders\n(this works fine)\nAdded batch normalization:\nAdded the following to variational_autoencoder.py in def init:\n\nif self.batch_normalized:\n                self.scale_decoder = tf.Variable(tf.ones([hidden_dim], name=\"decoder_scale\"))\n                self.beta_decoder  = tf.Variable(tf.zeros([hidden_dim], name=\"decoder_beta\"))\n\n                self.scale_encoder = tf.Variable(tf.ones([hidden_dim], name=\"encoder_scale\"))\n                self.beta_encoder  = tf.Variable(tf.zeros([hidden_dim], name=\"encoder_beta\" ))\n\n\nAdded the following to the _generate and _encode functions (changing the different variables of course):\n\nif self.batch_normalized:\n                layer_output = tf.matmul(z, self._decoder_W) + self._decoder_bias\n                batch_mean, batch_var = tf.nn.moments(layer_output, axes=[0])\n                epsilon = 1e-4\n                batch_normalized = tf.nn.batch_normalization(layer_output, batch_mean, batch_var, self.beta_decoder, self.scale_decoder, epsilon, name=\"normalization_decoder\")\n                h = self.activation_func(batch_normalized)\n\n\n\nNow sometimes the saver throws a very cryptic 'InvalidArgumentError', but it is unclear to me why.\n\nWhat have you tried?\n\nChanged the names that I store the models in (does not help)\nTurned off Batch normalization (helps)\nWent through source code trying to track the error; but got stuck (not sure what protobuf does).\nTried using less or more epochs (does not help)\n\nIs this a known bug?\nBest regards\nLogs or other output that would be helpful\n(If logs are large, please upload as attachment).\n\nTraceback (most recent call last):\n  File \"train_mnist_vae.py\", line 374, in <module>\n    batch_normalized=args.bn\n  File \"train_mnist_vae.py\", line 212, in train_test_mnist_vae\n    save_path = saver.save(sess, os.path.join(\"saved_models/\", model_path + \".ckpt\"))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 1039, in save\n    {self.saver_def.filename_tensor_name: checkpoint_file})\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 340, in run\n    run_metadata_ptr)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 564, in _run\n    feed_dict_string, options, run_metadata)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 637, in _do_run\n    target_list, options, run_metadata)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 659, in _do_call\n    e.code)\ntensorflow.python.framework.errors.InvalidArgumentError: saved_models/bern=False_bn=True_bs=100_ds=frey_epochs=40000_ff=True_hd=300_iw=False_ld=2_lr=1e-05_mm=0_0_nt=2000_opt=rmsprop_wd=0_1.ckpt.tempstate10425989302811289116\n     [[Node: save/save = SaveSlices[T=[DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT], _device=\"/job:localhost/replica:0/task:0/cpu:0\"](_recv_save/Const_0, save/save/tensor_names, save/save/shapes_and_slices, Variable/_48233, Variable/RMSProp/_48235, Variable/RMSProp_1/_48237, Variable_1/_48239, Variable_1/RMSProp/_48241, Variable_1/RMSProp_1/_48243, Variable_2/_48245, Variable_2/RMSProp/_48247, Variable_2/RMSProp_1/_48249, Variable_3/_48251, Variable_3/RMSProp/_48253, Variable_3/RMSProp_1/_48255, decoderB/_48257, decoderB/RMSProp/_48259, decoderB/RMSProp_1/_48261, decoderW/_48263, decoderW/RMSProp/_48265, decoderW/RMSProp_1/_48267, encoderB/_48269, encoderB/RMSProp/_48271, encoderB/RMSProp_1/_48273, encoderW/_48275, encoderW/RMSProp/_48277, encoderW/RMSProp_1/_48279, log_var_decoder/_48281, log_var_decoder/RMSProp/_48283, log_var_decoder/RMSProp_1/_48285, log_var_decoder_b/_48287, log_var_decoder_b/RMSProp/_48289, log_var_decoder_b/RMSProp_1/_48291, log_var_encoder/_48293, log_var_encoder/RMSProp/_48295, log_var_encoder/RMSProp_1/_48297, log_var_encoder_b/_48299, log_var_encoder_b/RMSProp/_48301, log_var_encoder_b/RMSProp_1/_48303, mean_decoder/_48305, mean_decoder/RMSProp/_48307, mean_decoder/RMSProp_1/_48309, mean_decoderB/_48311, mean_decoderB/RMSProp/_48313, mean_decoderB/RMSProp_1/_48315, mean_encoder/_48317, mean_encoder/RMSProp/_48319, mean_encoder/RMSProp_1/_48321, mean_encoderB/_48323, mean_encoderB/RMSProp/_48325, mean_encoderB/RMSProp_1/_48327)]]\nCaused by op u'save/save', defined at:\n  File \"train_mnist_vae.py\", line 374, in <module>\n    batch_normalized=args.bn\n  File \"train_mnist_vae.py\", line 81, in train_test_mnist_vae\n    saver = tf.train.Saver()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 833, in __init__\n    restore_sequentially=restore_sequentially)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 501, in build\n    save_tensor = self._AddSaveOps(filename_tensor, vars_to_save)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 197, in _AddSaveOps\n    save = self.save_op(filename_tensor, vars_to_save)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 149, in save_op\n    tensor_slices=[vs.slice_spec for vs in vars_to_save])\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/io_ops.py\", line 172, in _save\n    tensors, name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_io_ops.py\", line 341, in _save_slices\n    name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/op_def_library.py\", line 661, in apply_op\n    op_def=op_def)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2154, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1154, in __init__\n    self._traceback = _extract_stack()", "body": "Hi,\n\nFirst off - thanks for releasing TensorFlow. It is immensely helpful in many ways (e.g. getting it working on my GPU was a breeze). However, because of its novelty I'm running into a problem I cannot just Google.\n\nAfter adding batch normalization to the code for a variational autoencoder found here:\nhttps://github.com/tensorflow/tensorflow/issues/new\n\nsaver.save() starts crashing inconsistently (sometimes it will save, sometimes it will crash). The error is unhelpful, so I'm not sure what is wrong (see error logs below).\n\nI call the saver as follows:\n\n```\n    saver = tf.train.Saver()\n        with tf.Session(graph=vae.graph) as sess:\n\n            tf.train.SummaryWriter(\"/tmp/vae_logs\", sess.graph)\n            init = tf.initialize_all_variables()\n```\n### Environment info\n\nOperating System:\nUbuntu 15.10\n\nInstalled version of CUDA and cuDNN: \n(please attach the output of `ls -l /path/to/cuda/lib/libcud*`):\n\n```\n-rw-r--r-- 1 root root   322936 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root       16 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudart.so -> libcudart.so.7.5\nlrwxrwxrwx 1 root root       19 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudart.so.7.5 -> libcudart.so.7.5.18\n-rwxr-xr-x 1 root root   383336 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudart.so.7.5.18\n-rw-r--r-- 1 root root   720192 aug 15  2015 /usr/local/cuda-7.5/lib64/libcudart_static.a\n-rwxr-xr-x 1 root root 61453024 apr  3 10:09 /usr/local/cuda-7.5/lib64/libcudnn.so\n-rwxr-xr-x 1 root root 61453024 apr  3 10:09 /usr/local/cuda-7.5/lib64/libcudnn.so.4\n-rwxr-xr-x 1 root root 61453024 apr  3 10:09 /usr/local/cuda-7.5/lib64/libcudnn.so.4.0.7\n-rw-r--r-- 1 root root 62025862 apr  3 10:09 /usr/local/cuda-7.5/lib64/libcudnn_static.a\n\n```\n\nIf installed from binary pip package, provide:\n1. Which pip package you installed.\n\n```\npip freeze \ntensorflow==0.8.0\n```\n1. The output from python -c \"import tensorflow; print(tensorflow.**version**)\".\n\n```\n print(tensorflow.__version__)\n0.8.0\n```\n\nIf installed from sources, provide the commit hash:\n### Steps to reproduce\n1. Adapted the code from https://github.com/arahuja/generative-tf/tree/master/generative-tf for a Variational Autoencoder for Gaussian decoders\n   (this works fine)\n2. Added batch normalization:\n   Added the following to variational_autoencoder.py in def **init**:\n\n```\nif self.batch_normalized:\n                self.scale_decoder = tf.Variable(tf.ones([hidden_dim], name=\"decoder_scale\"))\n                self.beta_decoder  = tf.Variable(tf.zeros([hidden_dim], name=\"decoder_beta\"))\n\n                self.scale_encoder = tf.Variable(tf.ones([hidden_dim], name=\"encoder_scale\"))\n                self.beta_encoder  = tf.Variable(tf.zeros([hidden_dim], name=\"encoder_beta\" ))\n```\n1. Added the following to the _generate and _encode functions (changing the different variables of course):\n\n```\nif self.batch_normalized:\n                layer_output = tf.matmul(z, self._decoder_W) + self._decoder_bias\n                batch_mean, batch_var = tf.nn.moments(layer_output, axes=[0])\n                epsilon = 1e-4\n                batch_normalized = tf.nn.batch_normalization(layer_output, batch_mean, batch_var, self.beta_decoder, self.scale_decoder, epsilon, name=\"normalization_decoder\")\n                h = self.activation_func(batch_normalized)\n\n```\n1. Now sometimes the saver throws a very cryptic 'InvalidArgumentError', but it is unclear to me why.\n### What have you tried?\n1. Changed the names that I store the models in (does not help)\n2. Turned off Batch normalization (helps)\n3. Went through source code trying to track the error; but got stuck (not sure what protobuf does).\n4. Tried using less or more epochs (does not help)\n\nIs this a known bug?\n\nBest regards\n### Logs or other output that would be helpful\n\n(If logs are large, please upload as attachment).\n\n```\n\nTraceback (most recent call last):\n  File \"train_mnist_vae.py\", line 374, in <module>\n    batch_normalized=args.bn\n  File \"train_mnist_vae.py\", line 212, in train_test_mnist_vae\n    save_path = saver.save(sess, os.path.join(\"saved_models/\", model_path + \".ckpt\"))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 1039, in save\n    {self.saver_def.filename_tensor_name: checkpoint_file})\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 340, in run\n    run_metadata_ptr)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 564, in _run\n    feed_dict_string, options, run_metadata)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 637, in _do_run\n    target_list, options, run_metadata)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 659, in _do_call\n    e.code)\ntensorflow.python.framework.errors.InvalidArgumentError: saved_models/bern=False_bn=True_bs=100_ds=frey_epochs=40000_ff=True_hd=300_iw=False_ld=2_lr=1e-05_mm=0_0_nt=2000_opt=rmsprop_wd=0_1.ckpt.tempstate10425989302811289116\n     [[Node: save/save = SaveSlices[T=[DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT, DT_FLOAT], _device=\"/job:localhost/replica:0/task:0/cpu:0\"](_recv_save/Const_0, save/save/tensor_names, save/save/shapes_and_slices, Variable/_48233, Variable/RMSProp/_48235, Variable/RMSProp_1/_48237, Variable_1/_48239, Variable_1/RMSProp/_48241, Variable_1/RMSProp_1/_48243, Variable_2/_48245, Variable_2/RMSProp/_48247, Variable_2/RMSProp_1/_48249, Variable_3/_48251, Variable_3/RMSProp/_48253, Variable_3/RMSProp_1/_48255, decoderB/_48257, decoderB/RMSProp/_48259, decoderB/RMSProp_1/_48261, decoderW/_48263, decoderW/RMSProp/_48265, decoderW/RMSProp_1/_48267, encoderB/_48269, encoderB/RMSProp/_48271, encoderB/RMSProp_1/_48273, encoderW/_48275, encoderW/RMSProp/_48277, encoderW/RMSProp_1/_48279, log_var_decoder/_48281, log_var_decoder/RMSProp/_48283, log_var_decoder/RMSProp_1/_48285, log_var_decoder_b/_48287, log_var_decoder_b/RMSProp/_48289, log_var_decoder_b/RMSProp_1/_48291, log_var_encoder/_48293, log_var_encoder/RMSProp/_48295, log_var_encoder/RMSProp_1/_48297, log_var_encoder_b/_48299, log_var_encoder_b/RMSProp/_48301, log_var_encoder_b/RMSProp_1/_48303, mean_decoder/_48305, mean_decoder/RMSProp/_48307, mean_decoder/RMSProp_1/_48309, mean_decoderB/_48311, mean_decoderB/RMSProp/_48313, mean_decoderB/RMSProp_1/_48315, mean_encoder/_48317, mean_encoder/RMSProp/_48319, mean_encoder/RMSProp_1/_48321, mean_encoderB/_48323, mean_encoderB/RMSProp/_48325, mean_encoderB/RMSProp_1/_48327)]]\nCaused by op u'save/save', defined at:\n  File \"train_mnist_vae.py\", line 374, in <module>\n    batch_normalized=args.bn\n  File \"train_mnist_vae.py\", line 81, in train_test_mnist_vae\n    saver = tf.train.Saver()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 833, in __init__\n    restore_sequentially=restore_sequentially)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 501, in build\n    save_tensor = self._AddSaveOps(filename_tensor, vars_to_save)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 197, in _AddSaveOps\n    save = self.save_op(filename_tensor, vars_to_save)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 149, in save_op\n    tensor_slices=[vs.slice_spec for vs in vars_to_save])\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/io_ops.py\", line 172, in _save\n    tensors, name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_io_ops.py\", line 341, in _save_slices\n    name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/op_def_library.py\", line 661, in apply_op\n    op_def=op_def)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2154, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1154, in __init__\n    self._traceback = _extract_stack()\n```\n"}