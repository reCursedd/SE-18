{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/247306322", "html_url": "https://github.com/tensorflow/tensorflow/issues/3825#issuecomment-247306322", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3825", "id": 247306322, "node_id": "MDEyOklzc3VlQ29tbWVudDI0NzMwNjMyMg==", "user": {"login": "imironhead", "id": 6081974, "node_id": "MDQ6VXNlcjYwODE5NzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6081974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imironhead", "html_url": "https://github.com/imironhead", "followers_url": "https://api.github.com/users/imironhead/followers", "following_url": "https://api.github.com/users/imironhead/following{/other_user}", "gists_url": "https://api.github.com/users/imironhead/gists{/gist_id}", "starred_url": "https://api.github.com/users/imironhead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imironhead/subscriptions", "organizations_url": "https://api.github.com/users/imironhead/orgs", "repos_url": "https://api.github.com/users/imironhead/repos", "events_url": "https://api.github.com/users/imironhead/events{/privacy}", "received_events_url": "https://api.github.com/users/imironhead/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-15T11:46:01Z", "updated_at": "2016-09-15T11:46:01Z", "author_association": "CONTRIBUTOR", "body_html": "<div class=\"highlight highlight-source-python\"><pre>initializer <span class=\"pl-k\">=</span> tf.contrib.layers.xavier_initializer()\n\nb1 <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b1<span class=\"pl-pds\">\"</span></span>, [<span class=\"pl-c1\">1024</span>], <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>initializer)</pre></div>\n<p>I got the same problem when using initializer on a 1d variable. It's ok if the dimension is 2.</p>\n<div class=\"highlight highlight-source-python\"><pre>b1 <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b1<span class=\"pl-pds\">\"</span></span>, [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1024</span>], <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>initializer)</pre></div>\n<p>Looks like the initializer works only on 2d shape variables.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> tensorflow/tensorflow/contrib/layers/python/layers/initializers.py</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">variance_scaling_initializer</span>(...):\n  <span class=\"pl-c1\">...</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">_initializer</span>(<span class=\"pl-smi\">shape</span>, <span class=\"pl-smi\">dtype</span><span class=\"pl-k\">=</span>dtype, <span class=\"pl-smi\">partition_info</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n    <span class=\"pl-c1\">...</span>\n    fan_in <span class=\"pl-k\">=</span> <span class=\"pl-c1\">float</span>(shape[<span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>])\n    fan_out <span class=\"pl-k\">=</span> <span class=\"pl-c1\">float</span>(shape[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])</pre></div>", "body_text": "initializer = tf.contrib.layers.xavier_initializer()\n\nb1 = tf.get_variable(\"b1\", [1024], initializer=initializer)\nI got the same problem when using initializer on a 1d variable. It's ok if the dimension is 2.\nb1 = tf.get_variable(\"b1\", [1, 1024], initializer=initializer)\nLooks like the initializer works only on 2d shape variables.\n# tensorflow/tensorflow/contrib/layers/python/layers/initializers.py\n\ndef variance_scaling_initializer(...):\n  ...\n  def _initializer(shape, dtype=dtype, partition_info=None):\n    ...\n    fan_in = float(shape[-2])\n    fan_out = float(shape[-1])", "body": "``` python\ninitializer = tf.contrib.layers.xavier_initializer()\n\nb1 = tf.get_variable(\"b1\", [1024], initializer=initializer)\n```\n\nI got the same problem when using initializer on a 1d variable. It's ok if the dimension is 2.\n\n``` python\nb1 = tf.get_variable(\"b1\", [1, 1024], initializer=initializer)\n```\n\nLooks like the initializer works only on 2d shape variables.\n\n``` python\n# tensorflow/tensorflow/contrib/layers/python/layers/initializers.py\n\ndef variance_scaling_initializer(...):\n  ...\n  def _initializer(shape, dtype=dtype, partition_info=None):\n    ...\n    fan_in = float(shape[-2])\n    fan_out = float(shape[-1])\n```\n"}