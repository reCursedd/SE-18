{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/410463726", "html_url": "https://github.com/tensorflow/tensorflow/issues/21384#issuecomment-410463726", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21384", "id": 410463726, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDQ2MzcyNg==", "user": {"login": "ageron", "id": 76661, "node_id": "MDQ6VXNlcjc2NjYx", "avatar_url": "https://avatars3.githubusercontent.com/u/76661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ageron", "html_url": "https://github.com/ageron", "followers_url": "https://api.github.com/users/ageron/followers", "following_url": "https://api.github.com/users/ageron/following{/other_user}", "gists_url": "https://api.github.com/users/ageron/gists{/gist_id}", "starred_url": "https://api.github.com/users/ageron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ageron/subscriptions", "organizations_url": "https://api.github.com/users/ageron/orgs", "repos_url": "https://api.github.com/users/ageron/repos", "events_url": "https://api.github.com/users/ageron/events{/privacy}", "received_events_url": "https://api.github.com/users/ageron/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-04T17:09:08Z", "updated_at": "2018-08-04T17:09:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I looked a bit into this issue:</p>\n<ul>\n<li>the <code>_UnreadVariable</code> is a subclass of <code>ResourceVariable</code></li>\n<li>The <code>ResourceVariable</code> class has a <code>name</code> property which returns <code>self._handle_name</code>.</li>\n<li>In TF 1.9.0, the <code>_UnreadVariable</code> just inherited from the <code>name</code> property of the <code>ResourceVariable</code>class. This worked.</li>\n<li>In TF 1.10.0-rc1, the <code>_UnreadVariable</code> class now overrides the <code>name</code> property and returns <code>self._parent_op.name</code> instead. This fails.</li>\n</ul>\n<p>A quick &amp; dirty workaround is to just remove the override:</p>\n<div class=\"highlight highlight-text-python-console\"><pre>&gt;&gt;&gt; <span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n&gt;&gt;&gt; <span class=\"pl-k\">import</span> tensorflow.contrib.eager <span class=\"pl-k\">as</span> tfe\n&gt;&gt;&gt; tf.enable_eager_execution()\n&gt;&gt;&gt; <span class=\"pl-k\">from</span> tensorflow.python.ops.resource_variable_ops <span class=\"pl-k\">import</span> _UnreadVariable\n&gt;&gt;&gt; <span class=\"pl-k\">del</span> _UnreadVariable.name\n&gt;&gt;&gt; <span class=\"pl-c1\">print</span>(tfe.Variable(<span class=\"pl-c1\">1</span>).assign(<span class=\"pl-c1\">2</span>))\n&lt;tf.Variable '' shape=() dtype=int32, numpy=2&gt;</pre></div>\n<p>No exception. However, it displays an empty name even when I set the variable's name:</p>\n<div class=\"highlight highlight-text-python-console\"><pre>&gt;&gt;&gt; <span class=\"pl-c1\">print</span>(tfe.Variable(<span class=\"pl-c1\">1</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>).assign(<span class=\"pl-c1\">2</span>))\n&lt;tf.Variable '' shape=() dtype=int32, numpy=2&gt;</pre></div>\n<p>I guess that's what the overridden <code>name</code> property was supposed to fix.</p>", "body_text": "I looked a bit into this issue:\n\nthe _UnreadVariable is a subclass of ResourceVariable\nThe ResourceVariable class has a name property which returns self._handle_name.\nIn TF 1.9.0, the _UnreadVariable just inherited from the name property of the ResourceVariableclass. This worked.\nIn TF 1.10.0-rc1, the _UnreadVariable class now overrides the name property and returns self._parent_op.name instead. This fails.\n\nA quick & dirty workaround is to just remove the override:\n>>> import tensorflow as tf\n>>> import tensorflow.contrib.eager as tfe\n>>> tf.enable_eager_execution()\n>>> from tensorflow.python.ops.resource_variable_ops import _UnreadVariable\n>>> del _UnreadVariable.name\n>>> print(tfe.Variable(1).assign(2))\n<tf.Variable '' shape=() dtype=int32, numpy=2>\nNo exception. However, it displays an empty name even when I set the variable's name:\n>>> print(tfe.Variable(1, name=\"test\").assign(2))\n<tf.Variable '' shape=() dtype=int32, numpy=2>\nI guess that's what the overridden name property was supposed to fix.", "body": "I looked a bit into this issue:\r\n* the `_UnreadVariable` is a subclass of `ResourceVariable`\r\n* The `ResourceVariable` class has a `name` property which returns `self._handle_name`.\r\n* In TF 1.9.0, the `_UnreadVariable` just inherited from the `name` property of the `ResourceVariable`class. This worked.\r\n* In TF 1.10.0-rc1, the `_UnreadVariable` class now overrides the `name` property and returns `self._parent_op.name` instead. This fails.\r\n\r\nA quick & dirty workaround is to just remove the override:\r\n\r\n```pycon\r\n>>> import tensorflow as tf\r\n>>> import tensorflow.contrib.eager as tfe\r\n>>> tf.enable_eager_execution()\r\n>>> from tensorflow.python.ops.resource_variable_ops import _UnreadVariable\r\n>>> del _UnreadVariable.name\r\n>>> print(tfe.Variable(1).assign(2))\r\n<tf.Variable '' shape=() dtype=int32, numpy=2>\r\n```\r\n\r\nNo exception. However, it displays an empty name even when I set the variable's name:\r\n\r\n```pycon\r\n>>> print(tfe.Variable(1, name=\"test\").assign(2))\r\n<tf.Variable '' shape=() dtype=int32, numpy=2>\r\n```\r\n\r\nI guess that's what the overridden `name` property was supposed to fix."}