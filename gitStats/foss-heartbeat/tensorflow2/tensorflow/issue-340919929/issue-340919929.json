{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20773", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20773/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20773/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20773/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20773", "id": 340919929, "node_id": "MDU6SXNzdWUzNDA5MTk5Mjk=", "number": 20773, "title": "tf.Print related wired bug", "user": {"login": "NaxAlpha", "id": 11090613, "node_id": "MDQ6VXNlcjExMDkwNjEz", "avatar_url": "https://avatars3.githubusercontent.com/u/11090613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NaxAlpha", "html_url": "https://github.com/NaxAlpha", "followers_url": "https://api.github.com/users/NaxAlpha/followers", "following_url": "https://api.github.com/users/NaxAlpha/following{/other_user}", "gists_url": "https://api.github.com/users/NaxAlpha/gists{/gist_id}", "starred_url": "https://api.github.com/users/NaxAlpha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NaxAlpha/subscriptions", "organizations_url": "https://api.github.com/users/NaxAlpha/orgs", "repos_url": "https://api.github.com/users/NaxAlpha/repos", "events_url": "https://api.github.com/users/NaxAlpha/events{/privacy}", "received_events_url": "https://api.github.com/users/NaxAlpha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}, {"login": "aaroey", "id": 31743510, "node_id": "MDQ6VXNlcjMxNzQzNTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31743510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaroey", "html_url": "https://github.com/aaroey", "followers_url": "https://api.github.com/users/aaroey/followers", "following_url": "https://api.github.com/users/aaroey/following{/other_user}", "gists_url": "https://api.github.com/users/aaroey/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaroey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaroey/subscriptions", "organizations_url": "https://api.github.com/users/aaroey/orgs", "repos_url": "https://api.github.com/users/aaroey/repos", "events_url": "https://api.github.com/users/aaroey/events{/privacy}", "received_events_url": "https://api.github.com/users/aaroey/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-07-13T07:59:07Z", "updated_at": "2018-11-10T18:49:37Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10 (latest)</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: r1.9 (v1.9.0-0-g25c197e023)</li>\n<li><strong>Python version</strong>: Python 3.6.5 |Anaconda, Inc.| [MSC v.1900 64 bit (AMD64)] on win32</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA 9.0, cuDNN 64_7</li>\n<li><strong>GPU model and memory</strong>: GTX 1060-6GB(Laptop)</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>While developing a prime number generator using <code>tensorflow-gpu</code>, I came across a wired bug. Given the source code, if you use <code>tf.Print</code> result is correct and run-time is less than without using <code>tf.Print</code>.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> check first 'n' numbers for primity using tensorflow</span>\n\n<span class=\"pl-k\">import</span> warnings\n<span class=\"pl-k\">with</span> warnings.catch_warnings():\n    warnings.filterwarnings(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ignore<span class=\"pl-pds\">\"</span></span>,<span class=\"pl-v\">category</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">FutureWarning</span>)\n    <span class=\"pl-k\">import</span> h5py\n<span class=\"pl-k\">import</span> os\nos.environ[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>TF_CPP_MIN_LOG_LEVEL<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>3<span class=\"pl-pds\">'</span></span> \n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> time\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">prime_tf_graf</span>(<span class=\"pl-smi\">max_count</span>,<span class=\"pl-smi\">dump</span>):\n\tttyp <span class=\"pl-k\">=</span> tf.int32\n\tdata <span class=\"pl-k\">=</span> tf.range(<span class=\"pl-c1\">2</span>, max_count, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>ttyp)\n\t<span class=\"pl-k\">if</span> dump:\n\t\tdata <span class=\"pl-k\">=</span> tf.Print(data, [data], <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Data Loaded!<span class=\"pl-pds\">'</span></span>)\n\tX, Y <span class=\"pl-k\">=</span> tf.meshgrid(data, data); \n\ttemp <span class=\"pl-k\">=</span> Y<span class=\"pl-k\">%</span>X\n\tmask <span class=\"pl-k\">=</span> tf.cast(tf.equal(temp, Y), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>ttyp)\n\ttemp <span class=\"pl-k\">=</span> temp <span class=\"pl-k\">-</span> Y <span class=\"pl-k\">*</span> mask\n\ttemp <span class=\"pl-k\">=</span> tf.cast(tf.not_equal(temp, <span class=\"pl-c1\">0</span>), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>ttyp)\n\tsumr <span class=\"pl-k\">=</span> tf.reduce_sum(temp, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n\tnums <span class=\"pl-k\">=</span> data <span class=\"pl-k\">-</span> <span class=\"pl-c1\">2</span>\n\trato <span class=\"pl-k\">=</span> tf.cast(sumr<span class=\"pl-k\">/</span>nums, ttyp)\n\tindx <span class=\"pl-k\">=</span>  tf.cast(tf.not_equal(rato, <span class=\"pl-c1\">0</span>), ttyp)\n\tshap <span class=\"pl-k\">=</span>  tf.reshape(tf.where(indx), [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>]) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">2</span>\n\t<span class=\"pl-k\">return</span> shap\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">prime_tf</span>(<span class=\"pl-smi\">max_count</span>,<span class=\"pl-smi\">dump</span>):\n\t<span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/gpu:0<span class=\"pl-pds\">'</span></span>):\n\t\tgraf <span class=\"pl-k\">=</span> prime_tf_graf(max_count, dump)\n\tsess <span class=\"pl-k\">=</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>tf.ConfigProto(<span class=\"pl-v\">allow_soft_placement</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>))\n\tsess.run(tf.global_variables_initializer())\n\tprim <span class=\"pl-k\">=</span> sess.run(graf)\n\t<span class=\"pl-k\">return</span> prim\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">bench</span>(<span class=\"pl-smi\">task</span>):\n\tnow <span class=\"pl-k\">=</span> time.time()\n\tres <span class=\"pl-k\">=</span> task()\n\t<span class=\"pl-k\">return</span> res, time.time() <span class=\"pl-k\">-</span> now\n\np, t <span class=\"pl-k\">=</span> bench(<span class=\"pl-k\">lambda</span>: prime_tf(<span class=\"pl-c1\">10000</span>, <span class=\"pl-c1\">True</span>))\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>With Dump: found <span class=\"pl-c1\">%d</span> primes in <span class=\"pl-c1\">%f</span> time<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">%</span>(<span class=\"pl-c1\">len</span>(p), t))\np, t <span class=\"pl-k\">=</span> bench(<span class=\"pl-k\">lambda</span>: prime_tf(<span class=\"pl-c1\">10000</span>, <span class=\"pl-c1\">False</span>))\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Without Dump: found <span class=\"pl-c1\">%d</span> primes in <span class=\"pl-c1\">%f</span> time<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">%</span>(<span class=\"pl-c1\">len</span>(p), t))</pre></div>\n<p>and here is output on my system:</p>\n<pre><code>PS E:\\Research\\TFLearn&gt; python .\\bug.py\nData Loaded![2 3 4...]\nWith Dump: found 1229 primes in 12.599950 time\nWithout Dump: found 1085 primes in 25.162465 time\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 (latest)\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): r1.9 (v1.9.0-0-g25c197e023)\nPython version: Python 3.6.5 |Anaconda, Inc.| [MSC v.1900 64 bit (AMD64)] on win32\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: CUDA 9.0, cuDNN 64_7\nGPU model and memory: GTX 1060-6GB(Laptop)\nExact command to reproduce: N/A\n\nDescribe the problem\nWhile developing a prime number generator using tensorflow-gpu, I came across a wired bug. Given the source code, if you use tf.Print result is correct and run-time is less than without using tf.Print.\nSource code / logs\n# check first 'n' numbers for primity using tensorflow\n\nimport warnings\nwith warnings.catch_warnings():\n    warnings.filterwarnings(\"ignore\",category=FutureWarning)\n    import h5py\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \nimport tensorflow as tf\nimport numpy as np\nimport time\n\ndef prime_tf_graf(max_count,dump):\n\tttyp = tf.int32\n\tdata = tf.range(2, max_count, dtype=ttyp)\n\tif dump:\n\t\tdata = tf.Print(data, [data], 'Data Loaded!')\n\tX, Y = tf.meshgrid(data, data); \n\ttemp = Y%X\n\tmask = tf.cast(tf.equal(temp, Y), dtype=ttyp)\n\ttemp = temp - Y * mask\n\ttemp = tf.cast(tf.not_equal(temp, 0), dtype=ttyp)\n\tsumr = tf.reduce_sum(temp, axis=1)\n\tnums = data - 2\n\trato = tf.cast(sumr/nums, ttyp)\n\tindx =  tf.cast(tf.not_equal(rato, 0), ttyp)\n\tshap =  tf.reshape(tf.where(indx), [-1]) + 2\n\treturn shap\n\ndef prime_tf(max_count,dump):\n\twith tf.device('/gpu:0'):\n\t\tgraf = prime_tf_graf(max_count, dump)\n\tsess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True))\n\tsess.run(tf.global_variables_initializer())\n\tprim = sess.run(graf)\n\treturn prim\n\ndef bench(task):\n\tnow = time.time()\n\tres = task()\n\treturn res, time.time() - now\n\np, t = bench(lambda: prime_tf(10000, True))\nprint('With Dump: found %d primes in %f time'%(len(p), t))\np, t = bench(lambda: prime_tf(10000, False))\nprint('Without Dump: found %d primes in %f time'%(len(p), t))\nand here is output on my system:\nPS E:\\Research\\TFLearn> python .\\bug.py\nData Loaded![2 3 4...]\nWith Dump: found 1229 primes in 12.599950 time\nWithout Dump: found 1085 primes in 25.162465 time", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10 (latest)\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: r1.9 (v1.9.0-0-g25c197e023)\r\n- **Python version**: Python 3.6.5 |Anaconda, Inc.| [MSC v.1900 64 bit (AMD64)] on win32\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: CUDA 9.0, cuDNN 64_7\r\n- **GPU model and memory**: GTX 1060-6GB(Laptop)\r\n- **Exact command to reproduce**: N/A\r\n\r\n### Describe the problem\r\nWhile developing a prime number generator using `tensorflow-gpu`, I came across a wired bug. Given the source code, if you use `tf.Print` result is correct and run-time is less than without using `tf.Print`. \r\n\r\n### Source code / logs\r\n``` python\r\n# check first 'n' numbers for primity using tensorflow\r\n\r\nimport warnings\r\nwith warnings.catch_warnings():\r\n    warnings.filterwarnings(\"ignore\",category=FutureWarning)\r\n    import h5py\r\nimport os\r\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \r\nimport tensorflow as tf\r\nimport numpy as np\r\nimport time\r\n\r\ndef prime_tf_graf(max_count,dump):\r\n\tttyp = tf.int32\r\n\tdata = tf.range(2, max_count, dtype=ttyp)\r\n\tif dump:\r\n\t\tdata = tf.Print(data, [data], 'Data Loaded!')\r\n\tX, Y = tf.meshgrid(data, data); \r\n\ttemp = Y%X\r\n\tmask = tf.cast(tf.equal(temp, Y), dtype=ttyp)\r\n\ttemp = temp - Y * mask\r\n\ttemp = tf.cast(tf.not_equal(temp, 0), dtype=ttyp)\r\n\tsumr = tf.reduce_sum(temp, axis=1)\r\n\tnums = data - 2\r\n\trato = tf.cast(sumr/nums, ttyp)\r\n\tindx =  tf.cast(tf.not_equal(rato, 0), ttyp)\r\n\tshap =  tf.reshape(tf.where(indx), [-1]) + 2\r\n\treturn shap\r\n\r\ndef prime_tf(max_count,dump):\r\n\twith tf.device('/gpu:0'):\r\n\t\tgraf = prime_tf_graf(max_count, dump)\r\n\tsess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True))\r\n\tsess.run(tf.global_variables_initializer())\r\n\tprim = sess.run(graf)\r\n\treturn prim\r\n\r\ndef bench(task):\r\n\tnow = time.time()\r\n\tres = task()\r\n\treturn res, time.time() - now\r\n\r\np, t = bench(lambda: prime_tf(10000, True))\r\nprint('With Dump: found %d primes in %f time'%(len(p), t))\r\np, t = bench(lambda: prime_tf(10000, False))\r\nprint('Without Dump: found %d primes in %f time'%(len(p), t))\r\n```\r\nand here is output on my system:\r\n\r\n```\r\nPS E:\\Research\\TFLearn> python .\\bug.py\r\nData Loaded![2 3 4...]\r\nWith Dump: found 1229 primes in 12.599950 time\r\nWithout Dump: found 1085 primes in 25.162465 time\r\n```\r\n"}