{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/327737053", "html_url": "https://github.com/tensorflow/tensorflow/issues/12704#issuecomment-327737053", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12704", "id": 327737053, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzczNzA1Mw==", "user": {"login": "koelscha", "id": 20746434, "node_id": "MDQ6VXNlcjIwNzQ2NDM0", "avatar_url": "https://avatars0.githubusercontent.com/u/20746434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koelscha", "html_url": "https://github.com/koelscha", "followers_url": "https://api.github.com/users/koelscha/followers", "following_url": "https://api.github.com/users/koelscha/following{/other_user}", "gists_url": "https://api.github.com/users/koelscha/gists{/gist_id}", "starred_url": "https://api.github.com/users/koelscha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koelscha/subscriptions", "organizations_url": "https://api.github.com/users/koelscha/orgs", "repos_url": "https://api.github.com/users/koelscha/repos", "events_url": "https://api.github.com/users/koelscha/events{/privacy}", "received_events_url": "https://api.github.com/users/koelscha/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-07T08:58:17Z", "updated_at": "2017-09-07T08:58:17Z", "author_association": "NONE", "body_html": "<p>Just a quick example:</p>\n<pre><code>import tensorflow as tf\nfrom tensorflow.contrib import slim\n\nfrom nets import inception\n\nimport numpy as np\nimport random\nfrom time import sleep\n\n\ninitialized = False\nbatchSize = None\n\ndef init(imgs):\n    global initialized\n    tf.reset_default_graph()\n    graph = tf.Graph()\n    graph.as_default()\n    sess = tf.Session(config=tf.ConfigProto(intra_op_parallelism_threads=8))\n    initialized = False\n    placeholder, probas = build(imgs)\n    init_fn = slim.assign_from_checkpoint_fn(\"tmp/checkpoints/inception_v1.ckpt\", slim.get_model_variables(\"InceptionV1\"))\n    init_fn(sess)\n    initialized = True\n    return sess, placeholder, probas\n\n\ndef build(imgs):\n    global batchSize\n    batchSize = len(imgs)\n    image_placeholder = tf.placeholder(tf.float32, shape=imgs.shape)\n    tensorImgs = tf.convert_to_tensor(image_placeholder)\n    with slim.arg_scope(inception.inception_v1_arg_scope()):\n        logits, _ = inception.inception_v1(tensorImgs, num_classes=1001, is_training=False, reuse=initialized)\n    probabilities = tf.nn.softmax(logits)\n    return image_placeholder, probabilities\n\n\ndef predict(imgs, image_placeholder, probabilities):\n        np_probabilities = sess.run(probabilities, {image_placeholder: imgs})\n        return np_probabilities\n\nimgs1 = np.empty((4, 224, 224, 3))\nimgs2 = np.empty((2, 224, 224, 3))\n\nsess, placeholder, probas = init(imgs1)\nsleep(30)\n\nfor _ in range(10):\n    print(predict(imgs1, placeholder, probas).argmax())\n    sleep(1)\n\nsleep(30)\n\nfor _ in range(50):\n    if random.choice([0,1]):\n        imgs = imgs1\n    else:\n        imgs = imgs2\n    \n    if batchSize != len(imgs) or not initialized:\n        sess, placeholder, probas = init(imgs)\n    print(predict(imgs, placeholder, probas).argmax())\n</code></pre>\n<p>Memory usage:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/20746434/30154843-66d3c018-93bb-11e7-9f47-0720c7057f3e.png\"><img src=\"https://user-images.githubusercontent.com/20746434/30154843-66d3c018-93bb-11e7-9f47-0720c7057f3e.png\" alt=\"mem\" style=\"max-width:100%;\"></a></p>", "body_text": "Just a quick example:\nimport tensorflow as tf\nfrom tensorflow.contrib import slim\n\nfrom nets import inception\n\nimport numpy as np\nimport random\nfrom time import sleep\n\n\ninitialized = False\nbatchSize = None\n\ndef init(imgs):\n    global initialized\n    tf.reset_default_graph()\n    graph = tf.Graph()\n    graph.as_default()\n    sess = tf.Session(config=tf.ConfigProto(intra_op_parallelism_threads=8))\n    initialized = False\n    placeholder, probas = build(imgs)\n    init_fn = slim.assign_from_checkpoint_fn(\"tmp/checkpoints/inception_v1.ckpt\", slim.get_model_variables(\"InceptionV1\"))\n    init_fn(sess)\n    initialized = True\n    return sess, placeholder, probas\n\n\ndef build(imgs):\n    global batchSize\n    batchSize = len(imgs)\n    image_placeholder = tf.placeholder(tf.float32, shape=imgs.shape)\n    tensorImgs = tf.convert_to_tensor(image_placeholder)\n    with slim.arg_scope(inception.inception_v1_arg_scope()):\n        logits, _ = inception.inception_v1(tensorImgs, num_classes=1001, is_training=False, reuse=initialized)\n    probabilities = tf.nn.softmax(logits)\n    return image_placeholder, probabilities\n\n\ndef predict(imgs, image_placeholder, probabilities):\n        np_probabilities = sess.run(probabilities, {image_placeholder: imgs})\n        return np_probabilities\n\nimgs1 = np.empty((4, 224, 224, 3))\nimgs2 = np.empty((2, 224, 224, 3))\n\nsess, placeholder, probas = init(imgs1)\nsleep(30)\n\nfor _ in range(10):\n    print(predict(imgs1, placeholder, probas).argmax())\n    sleep(1)\n\nsleep(30)\n\nfor _ in range(50):\n    if random.choice([0,1]):\n        imgs = imgs1\n    else:\n        imgs = imgs2\n    \n    if batchSize != len(imgs) or not initialized:\n        sess, placeholder, probas = init(imgs)\n    print(predict(imgs, placeholder, probas).argmax())\n\nMemory usage:", "body": "Just a quick example:\r\n\r\n```\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib import slim\r\n\r\nfrom nets import inception\r\n\r\nimport numpy as np\r\nimport random\r\nfrom time import sleep\r\n\r\n\r\ninitialized = False\r\nbatchSize = None\r\n\r\ndef init(imgs):\r\n    global initialized\r\n    tf.reset_default_graph()\r\n    graph = tf.Graph()\r\n    graph.as_default()\r\n    sess = tf.Session(config=tf.ConfigProto(intra_op_parallelism_threads=8))\r\n    initialized = False\r\n    placeholder, probas = build(imgs)\r\n    init_fn = slim.assign_from_checkpoint_fn(\"tmp/checkpoints/inception_v1.ckpt\", slim.get_model_variables(\"InceptionV1\"))\r\n    init_fn(sess)\r\n    initialized = True\r\n    return sess, placeholder, probas\r\n\r\n\r\ndef build(imgs):\r\n    global batchSize\r\n    batchSize = len(imgs)\r\n    image_placeholder = tf.placeholder(tf.float32, shape=imgs.shape)\r\n    tensorImgs = tf.convert_to_tensor(image_placeholder)\r\n    with slim.arg_scope(inception.inception_v1_arg_scope()):\r\n        logits, _ = inception.inception_v1(tensorImgs, num_classes=1001, is_training=False, reuse=initialized)\r\n    probabilities = tf.nn.softmax(logits)\r\n    return image_placeholder, probabilities\r\n\r\n\r\ndef predict(imgs, image_placeholder, probabilities):\r\n        np_probabilities = sess.run(probabilities, {image_placeholder: imgs})\r\n        return np_probabilities\r\n\r\nimgs1 = np.empty((4, 224, 224, 3))\r\nimgs2 = np.empty((2, 224, 224, 3))\r\n\r\nsess, placeholder, probas = init(imgs1)\r\nsleep(30)\r\n\r\nfor _ in range(10):\r\n    print(predict(imgs1, placeholder, probas).argmax())\r\n    sleep(1)\r\n\r\nsleep(30)\r\n\r\nfor _ in range(50):\r\n    if random.choice([0,1]):\r\n        imgs = imgs1\r\n    else:\r\n        imgs = imgs2\r\n    \r\n    if batchSize != len(imgs) or not initialized:\r\n        sess, placeholder, probas = init(imgs)\r\n    print(predict(imgs, placeholder, probas).argmax())\r\n```\r\n\r\nMemory usage:\r\n![mem](https://user-images.githubusercontent.com/20746434/30154843-66d3c018-93bb-11e7-9f47-0720c7057f3e.png)\r\n"}