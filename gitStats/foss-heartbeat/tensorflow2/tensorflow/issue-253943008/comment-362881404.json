{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/362881404", "html_url": "https://github.com/tensorflow/tensorflow/issues/12704#issuecomment-362881404", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12704", "id": 362881404, "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mjg4MTQwNA==", "user": {"login": "sguada", "id": 1766524, "node_id": "MDQ6VXNlcjE3NjY1MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1766524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sguada", "html_url": "https://github.com/sguada", "followers_url": "https://api.github.com/users/sguada/followers", "following_url": "https://api.github.com/users/sguada/following{/other_user}", "gists_url": "https://api.github.com/users/sguada/gists{/gist_id}", "starred_url": "https://api.github.com/users/sguada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sguada/subscriptions", "organizations_url": "https://api.github.com/users/sguada/orgs", "repos_url": "https://api.github.com/users/sguada/repos", "events_url": "https://api.github.com/users/sguada/events{/privacy}", "received_events_url": "https://api.github.com/users/sguada/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-04T05:05:53Z", "updated_at": "2018-02-04T05:05:53Z", "author_association": "MEMBER", "body_html": "<p>You are still building parts of the graph when you change the imgs.</p>\n<p>What you need to do is use a placeholder that doesn't specify the batch_size dimension or even the HxW dimensions, it would work for any batch_size and image size, as far all the images in the batch has the same HxW.</p>\n<pre><code>def init(imgs):\n    global initialized\n    tf.reset_default_graph()\n    graph = tf.Graph()\n    graph.as_default()\n    sess = tf.Session(config=tf.ConfigProto(intra_op_parallelism_threads=8))\n    initialized = False\n    image_placeholder = tf.placeholder(tf.float32, shape=[None, None, None, 3])\n    probas = build(image_placeholder)\n    init_fn = slim.assign_from_checkpoint_fn(\"tmp/checkpoints/inception_v1.ckpt\", slim.get_model_variables(\"InceptionV1\"))\n    init_fn(sess)\n    initialized = True\n    return sess, placeholder, probas\n\n\ndef build(images):\n    with slim.arg_scope(inception.inception_v1_arg_scope()):\n        logits, _ = inception.inception_v1(images, num_classes=1001, is_training=False, reuse=initialized)\n    probabilities = tf.nn.softmax(logits)\n    return probabilities\n</code></pre>", "body_text": "You are still building parts of the graph when you change the imgs.\nWhat you need to do is use a placeholder that doesn't specify the batch_size dimension or even the HxW dimensions, it would work for any batch_size and image size, as far all the images in the batch has the same HxW.\ndef init(imgs):\n    global initialized\n    tf.reset_default_graph()\n    graph = tf.Graph()\n    graph.as_default()\n    sess = tf.Session(config=tf.ConfigProto(intra_op_parallelism_threads=8))\n    initialized = False\n    image_placeholder = tf.placeholder(tf.float32, shape=[None, None, None, 3])\n    probas = build(image_placeholder)\n    init_fn = slim.assign_from_checkpoint_fn(\"tmp/checkpoints/inception_v1.ckpt\", slim.get_model_variables(\"InceptionV1\"))\n    init_fn(sess)\n    initialized = True\n    return sess, placeholder, probas\n\n\ndef build(images):\n    with slim.arg_scope(inception.inception_v1_arg_scope()):\n        logits, _ = inception.inception_v1(images, num_classes=1001, is_training=False, reuse=initialized)\n    probabilities = tf.nn.softmax(logits)\n    return probabilities", "body": "You are still building parts of the graph when you change the imgs.\r\n\r\nWhat you need to do is use a placeholder that doesn't specify the batch_size dimension or even the HxW dimensions, it would work for any batch_size and image size, as far all the images in the batch has the same HxW.\r\n\r\n\r\n```\r\ndef init(imgs):\r\n    global initialized\r\n    tf.reset_default_graph()\r\n    graph = tf.Graph()\r\n    graph.as_default()\r\n    sess = tf.Session(config=tf.ConfigProto(intra_op_parallelism_threads=8))\r\n    initialized = False\r\n    image_placeholder = tf.placeholder(tf.float32, shape=[None, None, None, 3])\r\n    probas = build(image_placeholder)\r\n    init_fn = slim.assign_from_checkpoint_fn(\"tmp/checkpoints/inception_v1.ckpt\", slim.get_model_variables(\"InceptionV1\"))\r\n    init_fn(sess)\r\n    initialized = True\r\n    return sess, placeholder, probas\r\n\r\n\r\ndef build(images):\r\n    with slim.arg_scope(inception.inception_v1_arg_scope()):\r\n        logits, _ = inception.inception_v1(images, num_classes=1001, is_training=False, reuse=initialized)\r\n    probabilities = tf.nn.softmax(logits)\r\n    return probabilities\r\n```\r\n"}