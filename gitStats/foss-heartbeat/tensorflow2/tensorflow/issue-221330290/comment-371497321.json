{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/371497321", "html_url": "https://github.com/tensorflow/tensorflow/issues/9171#issuecomment-371497321", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9171", "id": 371497321, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTQ5NzMyMQ==", "user": {"login": "frthjf", "id": 5411942, "node_id": "MDQ6VXNlcjU0MTE5NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/5411942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frthjf", "html_url": "https://github.com/frthjf", "followers_url": "https://api.github.com/users/frthjf/followers", "following_url": "https://api.github.com/users/frthjf/following{/other_user}", "gists_url": "https://api.github.com/users/frthjf/gists{/gist_id}", "starred_url": "https://api.github.com/users/frthjf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frthjf/subscriptions", "organizations_url": "https://api.github.com/users/frthjf/orgs", "repos_url": "https://api.github.com/users/frthjf/repos", "events_url": "https://api.github.com/users/frthjf/events{/privacy}", "received_events_url": "https://api.github.com/users/frthjf/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-08T14:10:54Z", "updated_at": "2018-03-08T14:10:54Z", "author_association": "NONE", "body_html": "<p>I ran into the same issue. However, for my use case I was able to use the stateless randomness:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">2</span>):\n    seed<span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>)\n    <span class=\"pl-c1\">print</span>(tf.contrib.stateless.stateless_random_uniform([<span class=\"pl-c1\">1</span>], seed).eval())</pre></div>", "body_text": "I ran into the same issue. However, for my use case I was able to use the stateless randomness:\nfor i in range(2):\n    seed=(1,1)\n    print(tf.contrib.stateless.stateless_random_uniform([1], seed).eval())", "body": "I ran into the same issue. However, for my use case I was able to use the stateless randomness:\r\n\r\n```python\r\nfor i in range(2):\r\n    seed=(1,1)\r\n    print(tf.contrib.stateless.stateless_random_uniform([1], seed).eval())\r\n```"}