{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9902", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9902/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9902/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9902/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9902", "id": 228586883, "node_id": "MDU6SXNzdWUyMjg1ODY4ODM=", "number": 9902, "title": "Session#run method's feed_dict argument implicitly converts types", "user": {"login": "ruggeri", "id": 627382, "node_id": "MDQ6VXNlcjYyNzM4Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/627382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruggeri", "html_url": "https://github.com/ruggeri", "followers_url": "https://api.github.com/users/ruggeri/followers", "following_url": "https://api.github.com/users/ruggeri/following{/other_user}", "gists_url": "https://api.github.com/users/ruggeri/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruggeri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruggeri/subscriptions", "organizations_url": "https://api.github.com/users/ruggeri/orgs", "repos_url": "https://api.github.com/users/ruggeri/repos", "events_url": "https://api.github.com/users/ruggeri/events{/privacy}", "received_events_url": "https://api.github.com/users/ruggeri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2017-05-15T01:38:20Z", "updated_at": "2018-01-21T00:30:41Z", "closed_at": "2018-01-21T00:30:41Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes?</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: OSX 10.12.3</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.1.0</li>\n<li><strong>Bazel version (if compiling from source)</strong>: NA</li>\n<li><strong>CUDA/cuDNN version</strong>: None</li>\n<li><strong>GPU model and memory</strong>: None</li>\n<li><strong>Exact command to reproduce</strong>: (see below)</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Hi TensorFlow humans! Thanks so much for making TensorFlow!</p>\n<p>Right now, if you feed a floating point array into a integral placeholder type, it will be converted implicitly. To my knowledge, most python operations will not implicitly convert.</p>\n<p>The implicit conversion potentially creates convenience, but of course it also creates the opportunity for a hard-to-see bug. In my case, I lost about 1 day to find this bug and experienced great sadness. That probably says more about me than it does about TF.</p>\n<p>Still, my feeling is that it is a more sensible default to require the user to do the conversion explicitly. Alternatively, perhaps it would be logical to log a warning to the user.</p>\n<p>Note that, to my knowledge, TF operations like <code>tf.equal</code> require both tensors to have the same type. So users might have a belief that that TF and <code>Session#run</code> require them to be fairly explicit about types.</p>\n<p>If it would be likely to be accepted, I am happy to write a patch for TF that warns the user when they feed a tensor of the wrong type.</p>\n<p>Thanks for reading this issue!</p>\n<h3>Source code / logs</h3>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\nsession = tf.Session()\nconvert_implicitly = tf.placeholder(tf.int64, [None])\nfloat_input = np.random.uniform(size = 10)\nresult = session.run(\n    convert_implicitly,\n    feed_dict = { convert_implicitly: float_input }\n)\nprint(result)\n</code></pre>\n<p><strong>Output</strong></p>\n<pre><code>&gt;&gt; python test.py\n2017-05-14 18:20:22.524862: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\n2017-05-14 18:20:22.524890: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-05-14 18:20:22.524906: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine andcould speed up CPU computations.\n[0 0 0 0 0 0 0 0 0 0]\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes?\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): OSX 10.12.3\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.1.0\nBazel version (if compiling from source): NA\nCUDA/cuDNN version: None\nGPU model and memory: None\nExact command to reproduce: (see below)\n\nDescribe the problem\nHi TensorFlow humans! Thanks so much for making TensorFlow!\nRight now, if you feed a floating point array into a integral placeholder type, it will be converted implicitly. To my knowledge, most python operations will not implicitly convert.\nThe implicit conversion potentially creates convenience, but of course it also creates the opportunity for a hard-to-see bug. In my case, I lost about 1 day to find this bug and experienced great sadness. That probably says more about me than it does about TF.\nStill, my feeling is that it is a more sensible default to require the user to do the conversion explicitly. Alternatively, perhaps it would be logical to log a warning to the user.\nNote that, to my knowledge, TF operations like tf.equal require both tensors to have the same type. So users might have a belief that that TF and Session#run require them to be fairly explicit about types.\nIf it would be likely to be accepted, I am happy to write a patch for TF that warns the user when they feed a tensor of the wrong type.\nThanks for reading this issue!\nSource code / logs\nimport numpy as np\nimport tensorflow as tf\n\nsession = tf.Session()\nconvert_implicitly = tf.placeholder(tf.int64, [None])\nfloat_input = np.random.uniform(size = 10)\nresult = session.run(\n    convert_implicitly,\n    feed_dict = { convert_implicitly: float_input }\n)\nprint(result)\n\nOutput\n>> python test.py\n2017-05-14 18:20:22.524862: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\n2017-05-14 18:20:22.524890: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n2017-05-14 18:20:22.524906: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine andcould speed up CPU computations.\n[0 0 0 0 0 0 0 0 0 0]", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes?\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: OSX 10.12.3\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.1.0\r\n- **Bazel version (if compiling from source)**: NA\r\n- **CUDA/cuDNN version**: None\r\n- **GPU model and memory**: None\r\n- **Exact command to reproduce**: (see below)\r\n\r\n### Describe the problem\r\nHi TensorFlow humans! Thanks so much for making TensorFlow!\r\n\r\nRight now, if you feed a floating point array into a integral placeholder type, it will be converted implicitly. To my knowledge, most python operations will not implicitly convert.\r\n\r\nThe implicit conversion potentially creates convenience, but of course it also creates the opportunity for a hard-to-see bug. In my case, I lost about 1 day to find this bug and experienced great sadness. That probably says more about me than it does about TF.\r\n\r\nStill, my feeling is that it is a more sensible default to require the user to do the conversion explicitly. Alternatively, perhaps it would be logical to log a warning to the user.\r\n\r\nNote that, to my knowledge, TF operations like `tf.equal` require both tensors to have the same type. So users might have a belief that that TF and `Session#run` require them to be fairly explicit about types.\r\n\r\nIf it would be likely to be accepted, I am happy to write a patch for TF that warns the user when they feed a tensor of the wrong type.\r\n\r\nThanks for reading this issue!\r\n\r\n### Source code / logs\r\n\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nsession = tf.Session()\r\nconvert_implicitly = tf.placeholder(tf.int64, [None])\r\nfloat_input = np.random.uniform(size = 10)\r\nresult = session.run(\r\n    convert_implicitly,\r\n    feed_dict = { convert_implicitly: float_input }\r\n)\r\nprint(result)\r\n```\r\n\r\n**Output**\r\n\r\n```\r\n>> python test.py\r\n2017-05-14 18:20:22.524862: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\r\n2017-05-14 18:20:22.524890: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\r\n2017-05-14 18:20:22.524906: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine andcould speed up CPU computations.\r\n[0 0 0 0 0 0 0 0 0 0]\r\n```\r\n"}