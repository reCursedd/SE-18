{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19027", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19027/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19027/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19027/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19027", "id": 319598945, "node_id": "MDU6SXNzdWUzMTk1OTg5NDU=", "number": 19027, "title": "Speed regression on tensorflow version > 1.4.1", "user": {"login": "jlopezpena", "id": 3518950, "node_id": "MDQ6VXNlcjM1MTg5NTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/3518950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlopezpena", "html_url": "https://github.com/jlopezpena", "followers_url": "https://api.github.com/users/jlopezpena/followers", "following_url": "https://api.github.com/users/jlopezpena/following{/other_user}", "gists_url": "https://api.github.com/users/jlopezpena/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlopezpena/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlopezpena/subscriptions", "organizations_url": "https://api.github.com/users/jlopezpena/orgs", "repos_url": "https://api.github.com/users/jlopezpena/repos", "events_url": "https://api.github.com/users/jlopezpena/events{/privacy}", "received_events_url": "https://api.github.com/users/jlopezpena/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "tfboyd", "id": 23486130, "node_id": "MDQ6VXNlcjIzNDg2MTMw", "avatar_url": "https://avatars1.githubusercontent.com/u/23486130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tfboyd", "html_url": "https://github.com/tfboyd", "followers_url": "https://api.github.com/users/tfboyd/followers", "following_url": "https://api.github.com/users/tfboyd/following{/other_user}", "gists_url": "https://api.github.com/users/tfboyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tfboyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tfboyd/subscriptions", "organizations_url": "https://api.github.com/users/tfboyd/orgs", "repos_url": "https://api.github.com/users/tfboyd/repos", "events_url": "https://api.github.com/users/tfboyd/events{/privacy}", "received_events_url": "https://api.github.com/users/tfboyd/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tfboyd", "id": 23486130, "node_id": "MDQ6VXNlcjIzNDg2MTMw", "avatar_url": "https://avatars1.githubusercontent.com/u/23486130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tfboyd", "html_url": "https://github.com/tfboyd", "followers_url": "https://api.github.com/users/tfboyd/followers", "following_url": "https://api.github.com/users/tfboyd/following{/other_user}", "gists_url": "https://api.github.com/users/tfboyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tfboyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tfboyd/subscriptions", "organizations_url": "https://api.github.com/users/tfboyd/orgs", "repos_url": "https://api.github.com/users/tfboyd/repos", "events_url": "https://api.github.com/users/tfboyd/events{/privacy}", "received_events_url": "https://api.github.com/users/tfboyd/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2018-05-02T15:21:47Z", "updated_at": "2018-05-30T15:07:52Z", "closed_at": "2018-05-30T11:16:12Z", "author_association": "NONE", "body_html": "<p>We have observed some massive slowdowns in some Keras/tensorflow models with tensorflow versions newer than 1.4.1.<br>\nNot sure if the issue is with tensorflow or with the way keras creates the tensorflow models, so I am cross-posting these issue to both repos (apologies for that!).</p>\n<p>Here is a script reproducing the issue:</p>\n<h2>Setup</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> pandas <span class=\"pl-k\">import</span> get_dummies\n<span class=\"pl-k\">from</span> sklearn.datasets <span class=\"pl-k\">import</span> make_classification\n\n<span class=\"pl-k\">from</span> keras.models <span class=\"pl-k\">import</span> Sequential\n<span class=\"pl-k\">from</span> keras.layers <span class=\"pl-k\">import</span> Dense, Dropout\n<span class=\"pl-k\">from</span> keras.callbacks <span class=\"pl-k\">import</span> EarlyStopping\n\nX, y <span class=\"pl-k\">=</span> make_classification(<span class=\"pl-v\">n_samples</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10000</span>, <span class=\"pl-v\">n_features</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>, <span class=\"pl-v\">n_informative</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">8</span>,\n                           <span class=\"pl-v\">n_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">5</span>, <span class=\"pl-v\">n_clusters_per_class</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">random_state</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>)\n\nmodel <span class=\"pl-k\">=</span> Sequential()\nmodel.add(Dense(<span class=\"pl-c1\">10</span>, <span class=\"pl-v\">input_dim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>))\nmodel.add(Dropout(<span class=\"pl-c1\">0.2</span>))\nmodel.add(Dense(<span class=\"pl-c1\">5</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>sigmoid<span class=\"pl-pds\">'</span></span>))\nmodel.add(Dropout(<span class=\"pl-c1\">0.1</span>))\nmodel.add(Dense(<span class=\"pl-c1\">5</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>softmax<span class=\"pl-pds\">'</span></span>))\nmodel.compile(<span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>categorical_crossentropy<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>rmsprop<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">metrics</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>acc<span class=\"pl-pds\">'</span></span>])\n\nyk <span class=\"pl-k\">=</span> get_dummies(y)</pre></div>\n<h2>Fitting</h2>\n<div class=\"highlight highlight-source-python\"><pre>model.fit(X, yk, <span class=\"pl-v\">epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>, <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">50</span>, \n               <span class=\"pl-v\">callbacks</span><span class=\"pl-k\">=</span>[EarlyStopping(<span class=\"pl-v\">monitor</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>loss<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">patience</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)])   </pre></div>\n<p>Here are some timings for the fit method:</p>\n<ul>\n<li>Tensorflow 1.4.1:  <strong>2.91 s \u00b1 452 ms</strong> per loop  (obtained using ipython's <code>%%timeit</code> magic, 7 loops)</li>\n<li>Tensorflow 1.5.0:  CPU times: user <strong>2min 19s</strong>, sys: 5min 22s, total: 7min 41s Wall time: 1min 2s</li>\n<li>Tensorflow 1.6.0: CPU times: user <strong>5min 5s</strong>, sys: 12min 31s, total: 17min 36s Wall time: 2min 37s</li>\n<li>Tensorflow 1.7.0: CPU times: user <strong>5min 5s</strong>, sys: 12min 39s, total: 17min 45s Wall time: 2min 39s</li>\n</ul>\n<p>So, it seems there was a massive slowdown in version 1,5, and then a further one in 1.6 (which similar speed in 1.7). All the tests are run on a conda environment with python 3.6.5 and keras 2.1.5, with the corresponding tensorflow versions all coming from the anaconda <code>defaults</code> channel.</p>\n<p>The GPU accelerated version of keras/tensorflow (<code>keras-gpu</code> conda package) does not present the issue.</p>\n<p>Thanks in advance!</p>", "body_text": "We have observed some massive slowdowns in some Keras/tensorflow models with tensorflow versions newer than 1.4.1.\nNot sure if the issue is with tensorflow or with the way keras creates the tensorflow models, so I am cross-posting these issue to both repos (apologies for that!).\nHere is a script reproducing the issue:\nSetup\nfrom pandas import get_dummies\nfrom sklearn.datasets import make_classification\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.callbacks import EarlyStopping\n\nX, y = make_classification(n_samples=10000, n_features=10, n_informative=8,\n                           n_classes=5, n_clusters_per_class=1, random_state=0)\n\nmodel = Sequential()\nmodel.add(Dense(10, input_dim=10, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(5, activation='sigmoid'))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(5, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['acc'])\n\nyk = get_dummies(y)\nFitting\nmodel.fit(X, yk, epochs=10, batch_size=50, \n               callbacks=[EarlyStopping(monitor='loss', patience=2)])   \nHere are some timings for the fit method:\n\nTensorflow 1.4.1:  2.91 s \u00b1 452 ms per loop  (obtained using ipython's %%timeit magic, 7 loops)\nTensorflow 1.5.0:  CPU times: user 2min 19s, sys: 5min 22s, total: 7min 41s Wall time: 1min 2s\nTensorflow 1.6.0: CPU times: user 5min 5s, sys: 12min 31s, total: 17min 36s Wall time: 2min 37s\nTensorflow 1.7.0: CPU times: user 5min 5s, sys: 12min 39s, total: 17min 45s Wall time: 2min 39s\n\nSo, it seems there was a massive slowdown in version 1,5, and then a further one in 1.6 (which similar speed in 1.7). All the tests are run on a conda environment with python 3.6.5 and keras 2.1.5, with the corresponding tensorflow versions all coming from the anaconda defaults channel.\nThe GPU accelerated version of keras/tensorflow (keras-gpu conda package) does not present the issue.\nThanks in advance!", "body": "We have observed some massive slowdowns in some Keras/tensorflow models with tensorflow versions newer than 1.4.1.\r\nNot sure if the issue is with tensorflow or with the way keras creates the tensorflow models, so I am cross-posting these issue to both repos (apologies for that!).\r\n\r\nHere is a script reproducing the issue:\r\n\r\n## Setup\r\n```python\r\nfrom pandas import get_dummies\r\nfrom sklearn.datasets import make_classification\r\n\r\nfrom keras.models import Sequential\r\nfrom keras.layers import Dense, Dropout\r\nfrom keras.callbacks import EarlyStopping\r\n\r\nX, y = make_classification(n_samples=10000, n_features=10, n_informative=8,\r\n                           n_classes=5, n_clusters_per_class=1, random_state=0)\r\n\r\nmodel = Sequential()\r\nmodel.add(Dense(10, input_dim=10, activation='relu'))\r\nmodel.add(Dropout(0.2))\r\nmodel.add(Dense(5, activation='sigmoid'))\r\nmodel.add(Dropout(0.1))\r\nmodel.add(Dense(5, activation='softmax'))\r\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['acc'])\r\n\r\nyk = get_dummies(y)\r\n```\r\n\r\n## Fitting\r\n\r\n```python\r\nmodel.fit(X, yk, epochs=10, batch_size=50, \r\n               callbacks=[EarlyStopping(monitor='loss', patience=2)])   \r\n```\r\n\r\nHere are some timings for the fit method:\r\n* Tensorflow 1.4.1:  **2.91 s \u00b1 452 ms** per loop  (obtained using ipython's `%%timeit` magic, 7 loops)\r\n* Tensorflow 1.5.0:  CPU times: user **2min 19s**, sys: 5min 22s, total: 7min 41s Wall time: 1min 2s\r\n* Tensorflow 1.6.0: CPU times: user **5min 5s**, sys: 12min 31s, total: 17min 36s Wall time: 2min 37s\r\n* Tensorflow 1.7.0: CPU times: user **5min 5s**, sys: 12min 39s, total: 17min 45s Wall time: 2min 39s\r\n\r\nSo, it seems there was a massive slowdown in version 1,5, and then a further one in 1.6 (which similar speed in 1.7). All the tests are run on a conda environment with python 3.6.5 and keras 2.1.5, with the corresponding tensorflow versions all coming from the anaconda `defaults` channel.\r\n\r\nThe GPU accelerated version of keras/tensorflow (`keras-gpu` conda package) does not present the issue.\r\n\r\nThanks in advance!"}