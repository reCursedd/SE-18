{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23894", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23894/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23894/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23894/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23894", "id": 382939434, "node_id": "MDU6SXNzdWUzODI5Mzk0MzQ=", "number": 23894, "title": "Anaconda jupyter noteboob  'Kernel Restarting(The kenel appears to have died.It will restart automatically)'when i used tensorflow-gpu", "user": {"login": "MeowsQAQ", "id": 31695044, "node_id": "MDQ6VXNlcjMxNjk1MDQ0", "avatar_url": "https://avatars2.githubusercontent.com/u/31695044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MeowsQAQ", "html_url": "https://github.com/MeowsQAQ", "followers_url": "https://api.github.com/users/MeowsQAQ/followers", "following_url": "https://api.github.com/users/MeowsQAQ/following{/other_user}", "gists_url": "https://api.github.com/users/MeowsQAQ/gists{/gist_id}", "starred_url": "https://api.github.com/users/MeowsQAQ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MeowsQAQ/subscriptions", "organizations_url": "https://api.github.com/users/MeowsQAQ/orgs", "repos_url": "https://api.github.com/users/MeowsQAQ/repos", "events_url": "https://api.github.com/users/MeowsQAQ/events{/privacy}", "received_events_url": "https://api.github.com/users/MeowsQAQ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-21T03:25:10Z", "updated_at": "2018-11-21T03:27:00Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>this is the code<br>\nimport os<br>\nimport tensorflow as tf<br>\nfrom PIL import Image<br>\nfrom nets import nets_factory<br>\nimport numpy as np<br>\nimport matplotlib.pyplot as plt<br>\nCHAR_SET_LEN = 10</p>\n<p>IMAGE_HEIGHT = 60</p>\n<p>IMAGE_WIDTH = 160</p>\n<p>BATCH_SIZE = 1</p>\n<p>TFRECORD_FILE = \"D:/Tensorflow/captcha/test.tfrecords\"</p>\n<h1>placeholder</h1>\n<p>x = tf.placeholder(tf.float32, [None, 224, 224])</p>\n<p>def read_and_decode(filename):</p>\n<pre><code>filename_queue = tf.train.string_input_producer([filename])\nreader = tf.TFRecordReader()\n\n_, serialized_example = reader.read(filename_queue)   \nfeatures = tf.parse_single_example(serialized_example,\n                                   features={\n                                       'image' : tf.FixedLenFeature([], tf.string),\n                                       'label0': tf.FixedLenFeature([], tf.int64),\n                                       'label1': tf.FixedLenFeature([], tf.int64),\n                                       'label2': tf.FixedLenFeature([], tf.int64),\n                                       'label3': tf.FixedLenFeature([], tf.int64),\n                                   })\n\nimage = tf.decode_raw(features['image'], tf.uint8)\n\nimage_raw = tf.reshape(image, [224, 224])\n# tf.train.shuffle_batch\u5fc5\u987b\u786e\u5b9ashape\nimage = tf.reshape(image, [224, 224])\n\nimage = tf.cast(image, tf.float32) / 255.0\nimage = tf.subtract(image, 0.5)\nimage = tf.multiply(image, 2.0)\n\nlabel0 = tf.cast(features['label0'], tf.int32)\nlabel1 = tf.cast(features['label1'], tf.int32)\nlabel2 = tf.cast(features['label2'], tf.int32)\nlabel3 = tf.cast(features['label3'], tf.int32)\n\nreturn image, image_raw, label0, label1, label2, label3\n</code></pre>\n<p>mage, image_raw, label0, label1, label2, label3 = read_and_decode(TFRECORD_FILE)</p>\n<p>#\u4f7f\u7528shuffle_batch\u53ef\u4ee5\u968f\u673a\u6253\u4e71<br>\nimage_batch, image_raw_batch, label_batch0, label_batch1, label_batch2, label_batch3 = tf.train.shuffle_batch(<br>\n[image, image_raw, label0, label1, label2, label3], batch_size = BATCH_SIZE,<br>\ncapacity = 50000, min_after_dequeue=10000, num_threads=1)</p>\n<p>train_network_fn = nets_factory.get_network_fn(<br>\n'alexnet_v2',<br>\nnum_classes=CHAR_SET_LEN,<br>\nweight_decay=0.0005,<br>\nis_training=False)<br>\ngpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.333)<br>\nwith tf.Session(config=tf.ConfigProto(gpu_options=gpu_options)) as sess:<br>\n# inputs: a tensor of size [batch_size, height, width, channels]<br>\nX = tf.reshape(x, [BATCH_SIZE, 224, 224, 1])</p>\n<pre><code>logits0,logits1,logits2,logits3,end_points = train_network_fn(X)\n\n\npredict0 = tf.reshape(logits0, [-1, CHAR_SET_LEN])  \npredict0 = tf.argmax(predict0, 1)  \n\npredict1 = tf.reshape(logits1, [-1, CHAR_SET_LEN])  \npredict1 = tf.argmax(predict1, 1)  \n\npredict2 = tf.reshape(logits2, [-1, CHAR_SET_LEN])  \npredict2 = tf.argmax(predict2, 1)  \n\npredict3 = tf.reshape(logits3, [-1, CHAR_SET_LEN])  \npredict3 = tf.argmax(predict3, 1)  \n\n\nsess.run(tf.global_variables_initializer())\n\nsaver = tf.train.Saver()\nsaver.restore(sess,'./captcha/models/crack_captcha.model-6000')\n\n\ncoord = tf.train.Coordinator()\n\nthreads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\nfor i in range(10):\n    \n    b_image, b_image_raw, b_label0, b_label1 ,b_label2 ,b_label3 = sess.run([image_batch, \n                                                                image_raw_batch, \n                                                                label_batch0, \n                                                                label_batch1, \n                                                                label_batch2, \n                                                                label_batch3])\n   \n    img=Image.fromarray(b_image_raw[0],'L')\n    plt.imshow(img)\n    plt.axis('off')\n    plt.show()\n    \n    print('label:',b_label0, b_label1 ,b_label2 ,b_label3)\n   \n    label0,label1,label2,label3 = sess.run([predict0,predict1,predict2,predict3], feed_dict={x: b_image})\n    \n    print('predict:',label0,label1,label2,label3) \n            \n\ncoord.request_stop()\n\ncoord.join(threads)\n</code></pre>", "body_text": "this is the code\nimport os\nimport tensorflow as tf\nfrom PIL import Image\nfrom nets import nets_factory\nimport numpy as np\nimport matplotlib.pyplot as plt\nCHAR_SET_LEN = 10\nIMAGE_HEIGHT = 60\nIMAGE_WIDTH = 160\nBATCH_SIZE = 1\nTFRECORD_FILE = \"D:/Tensorflow/captcha/test.tfrecords\"\nplaceholder\nx = tf.placeholder(tf.float32, [None, 224, 224])\ndef read_and_decode(filename):\nfilename_queue = tf.train.string_input_producer([filename])\nreader = tf.TFRecordReader()\n\n_, serialized_example = reader.read(filename_queue)   \nfeatures = tf.parse_single_example(serialized_example,\n                                   features={\n                                       'image' : tf.FixedLenFeature([], tf.string),\n                                       'label0': tf.FixedLenFeature([], tf.int64),\n                                       'label1': tf.FixedLenFeature([], tf.int64),\n                                       'label2': tf.FixedLenFeature([], tf.int64),\n                                       'label3': tf.FixedLenFeature([], tf.int64),\n                                   })\n\nimage = tf.decode_raw(features['image'], tf.uint8)\n\nimage_raw = tf.reshape(image, [224, 224])\n# tf.train.shuffle_batch\u5fc5\u987b\u786e\u5b9ashape\nimage = tf.reshape(image, [224, 224])\n\nimage = tf.cast(image, tf.float32) / 255.0\nimage = tf.subtract(image, 0.5)\nimage = tf.multiply(image, 2.0)\n\nlabel0 = tf.cast(features['label0'], tf.int32)\nlabel1 = tf.cast(features['label1'], tf.int32)\nlabel2 = tf.cast(features['label2'], tf.int32)\nlabel3 = tf.cast(features['label3'], tf.int32)\n\nreturn image, image_raw, label0, label1, label2, label3\n\nmage, image_raw, label0, label1, label2, label3 = read_and_decode(TFRECORD_FILE)\n#\u4f7f\u7528shuffle_batch\u53ef\u4ee5\u968f\u673a\u6253\u4e71\nimage_batch, image_raw_batch, label_batch0, label_batch1, label_batch2, label_batch3 = tf.train.shuffle_batch(\n[image, image_raw, label0, label1, label2, label3], batch_size = BATCH_SIZE,\ncapacity = 50000, min_after_dequeue=10000, num_threads=1)\ntrain_network_fn = nets_factory.get_network_fn(\n'alexnet_v2',\nnum_classes=CHAR_SET_LEN,\nweight_decay=0.0005,\nis_training=False)\ngpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.333)\nwith tf.Session(config=tf.ConfigProto(gpu_options=gpu_options)) as sess:\n# inputs: a tensor of size [batch_size, height, width, channels]\nX = tf.reshape(x, [BATCH_SIZE, 224, 224, 1])\nlogits0,logits1,logits2,logits3,end_points = train_network_fn(X)\n\n\npredict0 = tf.reshape(logits0, [-1, CHAR_SET_LEN])  \npredict0 = tf.argmax(predict0, 1)  \n\npredict1 = tf.reshape(logits1, [-1, CHAR_SET_LEN])  \npredict1 = tf.argmax(predict1, 1)  \n\npredict2 = tf.reshape(logits2, [-1, CHAR_SET_LEN])  \npredict2 = tf.argmax(predict2, 1)  \n\npredict3 = tf.reshape(logits3, [-1, CHAR_SET_LEN])  \npredict3 = tf.argmax(predict3, 1)  \n\n\nsess.run(tf.global_variables_initializer())\n\nsaver = tf.train.Saver()\nsaver.restore(sess,'./captcha/models/crack_captcha.model-6000')\n\n\ncoord = tf.train.Coordinator()\n\nthreads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\nfor i in range(10):\n    \n    b_image, b_image_raw, b_label0, b_label1 ,b_label2 ,b_label3 = sess.run([image_batch, \n                                                                image_raw_batch, \n                                                                label_batch0, \n                                                                label_batch1, \n                                                                label_batch2, \n                                                                label_batch3])\n   \n    img=Image.fromarray(b_image_raw[0],'L')\n    plt.imshow(img)\n    plt.axis('off')\n    plt.show()\n    \n    print('label:',b_label0, b_label1 ,b_label2 ,b_label3)\n   \n    label0,label1,label2,label3 = sess.run([predict0,predict1,predict2,predict3], feed_dict={x: b_image})\n    \n    print('predict:',label0,label1,label2,label3) \n            \n\ncoord.request_stop()\n\ncoord.join(threads)", "body": "this is the code\r\nimport os\r\nimport tensorflow as tf \r\nfrom PIL import Image\r\nfrom nets import nets_factory\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt  \r\nCHAR_SET_LEN = 10\r\n\r\nIMAGE_HEIGHT = 60 \r\n\r\nIMAGE_WIDTH = 160  \r\n\r\nBATCH_SIZE = 1\r\n\r\nTFRECORD_FILE = \"D:/Tensorflow/captcha/test.tfrecords\"\r\n\r\n# placeholder\r\nx = tf.placeholder(tf.float32, [None, 224, 224])  \r\n\r\n\r\ndef read_and_decode(filename):\r\n    \r\n    filename_queue = tf.train.string_input_producer([filename])\r\n    reader = tf.TFRecordReader()\r\n   \r\n    _, serialized_example = reader.read(filename_queue)   \r\n    features = tf.parse_single_example(serialized_example,\r\n                                       features={\r\n                                           'image' : tf.FixedLenFeature([], tf.string),\r\n                                           'label0': tf.FixedLenFeature([], tf.int64),\r\n                                           'label1': tf.FixedLenFeature([], tf.int64),\r\n                                           'label2': tf.FixedLenFeature([], tf.int64),\r\n                                           'label3': tf.FixedLenFeature([], tf.int64),\r\n                                       })\r\n\r\n    image = tf.decode_raw(features['image'], tf.uint8)\r\n\r\n    image_raw = tf.reshape(image, [224, 224])\r\n    # tf.train.shuffle_batch\u5fc5\u987b\u786e\u5b9ashape\r\n    image = tf.reshape(image, [224, 224])\r\n\r\n    image = tf.cast(image, tf.float32) / 255.0\r\n    image = tf.subtract(image, 0.5)\r\n    image = tf.multiply(image, 2.0)\r\n\r\n    label0 = tf.cast(features['label0'], tf.int32)\r\n    label1 = tf.cast(features['label1'], tf.int32)\r\n    label2 = tf.cast(features['label2'], tf.int32)\r\n    label3 = tf.cast(features['label3'], tf.int32)\r\n\r\n    return image, image_raw, label0, label1, label2, label3\r\n\r\nmage, image_raw, label0, label1, label2, label3 = read_and_decode(TFRECORD_FILE)\r\n\r\n#\u4f7f\u7528shuffle_batch\u53ef\u4ee5\u968f\u673a\u6253\u4e71\r\nimage_batch, image_raw_batch, label_batch0, label_batch1, label_batch2, label_batch3 = tf.train.shuffle_batch(\r\n        [image, image_raw, label0, label1, label2, label3], batch_size = BATCH_SIZE,\r\n        capacity = 50000, min_after_dequeue=10000, num_threads=1)\r\n\r\n\r\ntrain_network_fn = nets_factory.get_network_fn(\r\n    'alexnet_v2',\r\n    num_classes=CHAR_SET_LEN,\r\n    weight_decay=0.0005,\r\n    is_training=False)\r\ngpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.333)  \r\nwith tf.Session(config=tf.ConfigProto(gpu_options=gpu_options)) as sess:\r\n    # inputs: a tensor of size [batch_size, height, width, channels]\r\n    X = tf.reshape(x, [BATCH_SIZE, 224, 224, 1])\r\n    \r\n    logits0,logits1,logits2,logits3,end_points = train_network_fn(X)\r\n    \r\n    \r\n    predict0 = tf.reshape(logits0, [-1, CHAR_SET_LEN])  \r\n    predict0 = tf.argmax(predict0, 1)  \r\n\r\n    predict1 = tf.reshape(logits1, [-1, CHAR_SET_LEN])  \r\n    predict1 = tf.argmax(predict1, 1)  \r\n\r\n    predict2 = tf.reshape(logits2, [-1, CHAR_SET_LEN])  \r\n    predict2 = tf.argmax(predict2, 1)  \r\n\r\n    predict3 = tf.reshape(logits3, [-1, CHAR_SET_LEN])  \r\n    predict3 = tf.argmax(predict3, 1)  \r\n\r\n    \r\n    sess.run(tf.global_variables_initializer())\r\n    \r\n    saver = tf.train.Saver()\r\n    saver.restore(sess,'./captcha/models/crack_captcha.model-6000')\r\n\r\n    \r\n    coord = tf.train.Coordinator()\r\n    \r\n    threads = tf.train.start_queue_runners(sess=sess, coord=coord)\r\n\r\n    for i in range(10):\r\n        \r\n        b_image, b_image_raw, b_label0, b_label1 ,b_label2 ,b_label3 = sess.run([image_batch, \r\n                                                                    image_raw_batch, \r\n                                                                    label_batch0, \r\n                                                                    label_batch1, \r\n                                                                    label_batch2, \r\n                                                                    label_batch3])\r\n       \r\n        img=Image.fromarray(b_image_raw[0],'L')\r\n        plt.imshow(img)\r\n        plt.axis('off')\r\n        plt.show()\r\n        \r\n        print('label:',b_label0, b_label1 ,b_label2 ,b_label3)\r\n       \r\n        label0,label1,label2,label3 = sess.run([predict0,predict1,predict2,predict3], feed_dict={x: b_image})\r\n        \r\n        print('predict:',label0,label1,label2,label3) \r\n                \r\n    \r\n    coord.request_stop()\r\n    \r\n    coord.join(threads)"}