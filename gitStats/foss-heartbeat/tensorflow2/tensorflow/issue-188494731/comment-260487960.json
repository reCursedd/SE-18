{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/260487960", "html_url": "https://github.com/tensorflow/tensorflow/issues/5516#issuecomment-260487960", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5516", "id": 260487960, "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDQ4Nzk2MA==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-14T22:44:39Z", "updated_at": "2016-11-14T22:44:39Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4952605\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/wjaskowski\">@wjaskowski</a> there's a fixed per-run overhead in TensorFlow which is higher than in Theano, and when your session.run only takes 1.6ms, this overhead is significant. One source of overhead is \"crossing TensorFlow/Python\" boundary which happens in TF that has C++ runtime, but not Theano which has Python runtime. For your TF experiment, every 1.6ms you release GIL, copy data from Python runtime to C++ TensorFlow runtime, then copy the result back and reacquire GIL. For an op that does no memory transfers and sees no graph modifications , each eval call will add 0.2ms overhead.</p>\n<p>TF has been optimized for cases when session run call takes 20ms-2000ms, so these tiny run call scenarios didn't get as much attention, however there are some tricks you can do. For instance to remove the extra Python-&gt;TF copy, you can keep the data in tensorflow runtime using variables or queues. To eliminate extra TF-&gt;Python copies, you can keep data in tensorflow runtime by doing <code>sess.run(optimizer_node.op)</code> instead of <code>sess.run(optimizer_node)</code> in your loop</p>", "body_text": "@wjaskowski there's a fixed per-run overhead in TensorFlow which is higher than in Theano, and when your session.run only takes 1.6ms, this overhead is significant. One source of overhead is \"crossing TensorFlow/Python\" boundary which happens in TF that has C++ runtime, but not Theano which has Python runtime. For your TF experiment, every 1.6ms you release GIL, copy data from Python runtime to C++ TensorFlow runtime, then copy the result back and reacquire GIL. For an op that does no memory transfers and sees no graph modifications , each eval call will add 0.2ms overhead.\nTF has been optimized for cases when session run call takes 20ms-2000ms, so these tiny run call scenarios didn't get as much attention, however there are some tricks you can do. For instance to remove the extra Python->TF copy, you can keep the data in tensorflow runtime using variables or queues. To eliminate extra TF->Python copies, you can keep data in tensorflow runtime by doing sess.run(optimizer_node.op) instead of sess.run(optimizer_node) in your loop", "body": "@wjaskowski there's a fixed per-run overhead in TensorFlow which is higher than in Theano, and when your session.run only takes 1.6ms, this overhead is significant. One source of overhead is \"crossing TensorFlow/Python\" boundary which happens in TF that has C++ runtime, but not Theano which has Python runtime. For your TF experiment, every 1.6ms you release GIL, copy data from Python runtime to C++ TensorFlow runtime, then copy the result back and reacquire GIL. For an op that does no memory transfers and sees no graph modifications , each eval call will add 0.2ms overhead. \n\nTF has been optimized for cases when session run call takes 20ms-2000ms, so these tiny run call scenarios didn't get as much attention, however there are some tricks you can do. For instance to remove the extra Python->TF copy, you can keep the data in tensorflow runtime using variables or queues. To eliminate extra TF->Python copies, you can keep data in tensorflow runtime by doing `sess.run(optimizer_node.op)` instead of `sess.run(optimizer_node)` in your loop\n"}