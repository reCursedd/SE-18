{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17680", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17680/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17680/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17680/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/17680", "id": 304802756, "node_id": "MDExOlB1bGxSZXF1ZXN0MTc0Njg4NTk4", "number": 17680, "title": "1.7.0rc1 cherry-pick request: Fixes a race condition in function instantiation.", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-03-13T15:03:00Z", "updated_at": "2018-03-14T17:37:34Z", "closed_at": "2018-03-14T17:37:34Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17680", "html_url": "https://github.com/tensorflow/tensorflow/pull/17680", "diff_url": "https://github.com/tensorflow/tensorflow/pull/17680.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/17680.patch"}, "body_html": "<p>This cherry pick fixes a bug that was discovered independently by multiple TPU users after the release branch was cut. The main consequence of <em>not</em> including this change in the release would be flaky crash failures (segmentation faults) in the input pipeline.</p>\n<hr>\n<p>Previously, if the same function was being concurrently instantiated<br>\nand released:</p>\n<ol>\n<li>Thread one could begin to instantiate the function, determine<br>\nthat it already existed in the runtime, then be preempted.</li>\n<li>Thread two could release the handle on the function, causing it to<br>\nbe freed and removed from the <code>FunctionLibraryRuntime::items_</code> map.</li>\n<li>Thread one could then incorrectly assume that the function still<br>\nexisted, and fail to find it in the <code>FunctionLibraryRuntime::items_</code><br>\nmap, causing a segfault when it attempted to increment the refcount<br>\non an uninitialized object.</li>\n</ol>\n<p>PiperOrigin-RevId: 188661500</p>", "body_text": "This cherry pick fixes a bug that was discovered independently by multiple TPU users after the release branch was cut. The main consequence of not including this change in the release would be flaky crash failures (segmentation faults) in the input pipeline.\n\nPreviously, if the same function was being concurrently instantiated\nand released:\n\nThread one could begin to instantiate the function, determine\nthat it already existed in the runtime, then be preempted.\nThread two could release the handle on the function, causing it to\nbe freed and removed from the FunctionLibraryRuntime::items_ map.\nThread one could then incorrectly assume that the function still\nexisted, and fail to find it in the FunctionLibraryRuntime::items_\nmap, causing a segfault when it attempted to increment the refcount\non an uninitialized object.\n\nPiperOrigin-RevId: 188661500", "body": "This cherry pick fixes a bug that was discovered independently by multiple TPU users after the release branch was cut. The main consequence of *not* including this change in the release would be flaky crash failures (segmentation faults) in the input pipeline.\r\n\r\n---\r\n\r\nPreviously, if the same function was being concurrently instantiated\r\nand released:\r\n\r\n1. Thread one could begin to instantiate the function, determine\r\n   that it already existed in the runtime, then be preempted.\r\n2. Thread two could release the handle on the function, causing it to\r\n   be freed and removed from the `FunctionLibraryRuntime::items_` map.\r\n3. Thread one could then incorrectly assume that the function still\r\n   existed, and fail to find it in the `FunctionLibraryRuntime::items_`\r\n   map, causing a segfault when it attempted to increment the refcount\r\n   on an uninitialized object.\r\n\r\nPiperOrigin-RevId: 188661500"}