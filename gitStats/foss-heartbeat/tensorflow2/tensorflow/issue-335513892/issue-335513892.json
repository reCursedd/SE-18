{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20283", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20283/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20283/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20283/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20283", "id": 335513892, "node_id": "MDU6SXNzdWUzMzU1MTM4OTI=", "number": 20283, "title": "Truncated Distributions in TensorFlow", "user": {"login": "ZigaSajovic", "id": 10235589, "node_id": "MDQ6VXNlcjEwMjM1NTg5", "avatar_url": "https://avatars0.githubusercontent.com/u/10235589?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZigaSajovic", "html_url": "https://github.com/ZigaSajovic", "followers_url": "https://api.github.com/users/ZigaSajovic/followers", "following_url": "https://api.github.com/users/ZigaSajovic/following{/other_user}", "gists_url": "https://api.github.com/users/ZigaSajovic/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZigaSajovic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZigaSajovic/subscriptions", "organizations_url": "https://api.github.com/users/ZigaSajovic/orgs", "repos_url": "https://api.github.com/users/ZigaSajovic/repos", "events_url": "https://api.github.com/users/ZigaSajovic/events{/privacy}", "received_events_url": "https://api.github.com/users/ZigaSajovic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-06-25T18:15:50Z", "updated_at": "2018-10-02T23:55:42Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>At this point, only <a href=\"https://www.tensorflow.org/api_docs/python/tf/truncated_normal\" rel=\"nofollow\">tf.truncated_normal</a> is implemented within TensorFlow. Are there any plans for implementing others aswell? ex. Truncated Gamma, Truncated Exponential etc. Truncated distributions come up often in probabilistic programming, a branch in which TensorFlow is becoming prominent. I for one do most of my probabilistic work and sampling in TensorFlow, due to the GPU support and the control it offers me.</p>\n<p>Each truncated distribution offers a different method of efficiently sampling from it, so distribution specific algorithms would be ideal.</p>\n<p>In the mean time, I implemented a general method for personal use. I attach the specifications bellow, in case there is any interest in this general solution (the implementation, documentation and examples are available <a href=\"https://github.com/ZigaSajovic/truncatedDistribution\">here</a>). Note that I am willing to work on improving it, in case interest is present.</p>\n<p><strong>TruncatedDistribution</strong></p>\n<p>The class <a href=\"https://github.com/ZigaSajovic/truncatedDistribution\">TruncatedDistribution</a> extends any existing TensorFlow distribution, i.e. classes inheriting from <a href=\"https://www.tensorflow.org/api_docs/python/tf/distributions/Distribution\" rel=\"nofollow\">tf.distribution</a>, to enable their truncated counterparts, with full support of broadcasting.</p>\n<p><strong>Methods:</strong></p>\n<ul>\n<li>__init__(disttribution,left,right, n_points=1000)</li>\n<li>sample(sample_shape=())</li>\n<li>cdf(X)</li>\n<li>log_cdf(X)</li>\n<li>survival_function(X)</li>\n<li>log_survival_function(X)</li>\n<li>prob(X)</li>\n<li>log_prob(X)</li>\n<li>mean(n_samples=1000)</li>\n<li>variance(n_samples=1000)</li>\n<li>stddev(n_samples=1000)</li>\n</ul>", "body_text": "At this point, only tf.truncated_normal is implemented within TensorFlow. Are there any plans for implementing others aswell? ex. Truncated Gamma, Truncated Exponential etc. Truncated distributions come up often in probabilistic programming, a branch in which TensorFlow is becoming prominent. I for one do most of my probabilistic work and sampling in TensorFlow, due to the GPU support and the control it offers me.\nEach truncated distribution offers a different method of efficiently sampling from it, so distribution specific algorithms would be ideal.\nIn the mean time, I implemented a general method for personal use. I attach the specifications bellow, in case there is any interest in this general solution (the implementation, documentation and examples are available here). Note that I am willing to work on improving it, in case interest is present.\nTruncatedDistribution\nThe class TruncatedDistribution extends any existing TensorFlow distribution, i.e. classes inheriting from tf.distribution, to enable their truncated counterparts, with full support of broadcasting.\nMethods:\n\n__init__(disttribution,left,right, n_points=1000)\nsample(sample_shape=())\ncdf(X)\nlog_cdf(X)\nsurvival_function(X)\nlog_survival_function(X)\nprob(X)\nlog_prob(X)\nmean(n_samples=1000)\nvariance(n_samples=1000)\nstddev(n_samples=1000)", "body": "At this point, only [tf.truncated_normal](https://www.tensorflow.org/api_docs/python/tf/truncated_normal) is implemented within TensorFlow. Are there any plans for implementing others aswell? ex. Truncated Gamma, Truncated Exponential etc. Truncated distributions come up often in probabilistic programming, a branch in which TensorFlow is becoming prominent. I for one do most of my probabilistic work and sampling in TensorFlow, due to the GPU support and the control it offers me.\r\n\r\nEach truncated distribution offers a different method of efficiently sampling from it, so distribution specific algorithms would be ideal.\r\n\r\nIn the mean time, I implemented a general method for personal use. I attach the specifications bellow, in case there is any interest in this general solution (the implementation, documentation and examples are available [here](https://github.com/ZigaSajovic/truncatedDistribution)). Note that I am willing to work on improving it, in case interest is present.\r\n\r\n**TruncatedDistribution**\r\n\r\nThe class [TruncatedDistribution](https://github.com/ZigaSajovic/truncatedDistribution) extends any existing TensorFlow distribution, i.e. classes inheriting from [tf.distribution](https://www.tensorflow.org/api_docs/python/tf/distributions/Distribution), to enable their truncated counterparts, with full support of broadcasting.\r\n\r\n**Methods:**\r\n\r\n* \\_\\_init\\_\\_(disttribution,left,right, n_points=1000)\r\n* sample(sample_shape=())\r\n* cdf(X)\r\n* log_cdf(X)\r\n* survival_function(X)\r\n* log_survival_function(X)\r\n* prob(X)\r\n* log_prob(X)\r\n* mean(n_samples=1000)\r\n* variance(n_samples=1000)\r\n* stddev(n_samples=1000)"}