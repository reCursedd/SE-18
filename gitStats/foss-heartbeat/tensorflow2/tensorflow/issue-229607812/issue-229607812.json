{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9996", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9996/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9996/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9996/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9996", "id": 229607812, "node_id": "MDU6SXNzdWUyMjk2MDc4MTI=", "number": 9996, "title": "Convolution_transpose layer now gives an error (Tensorflow 1.0.0). ", "user": {"login": "mparaschiv", "id": 25149393, "node_id": "MDQ6VXNlcjI1MTQ5Mzkz", "avatar_url": "https://avatars1.githubusercontent.com/u/25149393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mparaschiv", "html_url": "https://github.com/mparaschiv", "followers_url": "https://api.github.com/users/mparaschiv/followers", "following_url": "https://api.github.com/users/mparaschiv/following{/other_user}", "gists_url": "https://api.github.com/users/mparaschiv/gists{/gist_id}", "starred_url": "https://api.github.com/users/mparaschiv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mparaschiv/subscriptions", "organizations_url": "https://api.github.com/users/mparaschiv/orgs", "repos_url": "https://api.github.com/users/mparaschiv/repos", "events_url": "https://api.github.com/users/mparaschiv/events{/privacy}", "received_events_url": "https://api.github.com/users/mparaschiv/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-05-18T09:27:51Z", "updated_at": "2017-06-29T08:49:37Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>I am implementing an architecture with conv and conv_transpose layers and this is what I am giving the convolution transpose layer:</p>\n<pre><code>    ('convolution_transpose', dict(num_outputs=96, kernel_size=[41, 11],\n                                     stride=[2, 1], padding=\"SAME\", scope='dec_block_1'))\n</code></pre>\n<p>and this is what I get</p>\n<pre><code>/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\n    175       current_args = current_scope[key_func].copy()\n    176       current_args.update(kwargs)\n--&gt; 177     return func(*args, **current_args)\n    178   _add_op(func)\n    179   setattr(func_with_args, '_key_op', _key_op(func))\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py in convolution2d_transpose(inputs, num_outputs, kernel_size, stride, padding, data_format, activation_fn, normalizer_fn, normalizer_params, weights_initializer, weights_regularizer, biases_initializer, biases_regularizer, reuse, variables_collections, outputs_collections, trainable, scope)\n   1123         _scope=sc,\n   1124         _reuse=reuse)\n-&gt; 1125     outputs = layer.apply(inputs)\n   1126 \n   1127     # Add variables to collections.\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in apply(self, inputs, **kwargs)\n    301       Output tensor(s).\n    302     \"\"\"\n--&gt; 303     return self.__call__(inputs, **kwargs)\n    304 \n    305 \n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in __call__(self, inputs, **kwargs)\n    267           input_shapes = [x.get_shape() for x in input_list]\n    268           if len(input_shapes) == 1:\n--&gt; 269             self.build(input_shapes[0])\n    270           else:\n    271             self.build(input_shapes)\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/convolutional.py in build(self, input_shape)\n   1048                                   regularizer=self.bias_regularizer,\n   1049                                   trainable=True,\n-&gt; 1050                                   dtype=self.dtype)\n   1051     else:\n   1052       self.bias = None\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in get_variable(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, validate_shape, custom_getter)\n    986       collections=collections, caching_device=caching_device,\n    987       partitioner=partitioner, validate_shape=validate_shape,\n--&gt; 988       custom_getter=custom_getter)\n    989 get_variable_or_local_docstring = (\n    990     \"\"\"%s\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in get_variable(self, var_store, name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, validate_shape, custom_getter)\n    888           collections=collections, caching_device=caching_device,\n    889           partitioner=partitioner, validate_shape=validate_shape,\n--&gt; 890           custom_getter=custom_getter)\n    891 \n    892   def _get_partitioned_variable(self,\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in get_variable(self, name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape, custom_getter)\n    339           reuse=reuse, trainable=trainable, collections=collections,\n    340           caching_device=caching_device, partitioner=partitioner,\n--&gt; 341           validate_shape=validate_shape)\n    342     else:\n    343       return _true_getter(\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in variable_getter(getter, name, shape, dtype, initializer, regularizer, trainable, **kwargs)\n    256           name, shape, initializer=initializer, regularizer=regularizer,\n    257           dtype=dtype, trainable=trainable,\n--&gt; 258           variable_getter=functools.partial(getter, **kwargs))\n    259 \n    260     # Build (if necessary) and call the layer, inside a variable scope.\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in _add_variable(self, name, shape, dtype, initializer, regularizer, trainable, variable_getter)\n    206                                initializer=initializer,\n    207                                dtype=dtype,\n--&gt; 208                                trainable=trainable and self.trainable)\n    209     # TODO(sguada) fix name = variable.op.name\n    210     if variable in existing_variables:\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py in layer_variable_getter(getter, *args, **kwargs)\n   1308       getter = functools.partial(current_custom_getter, getter)\n   1309     kwargs['rename'] = rename\n-&gt; 1310     return _model_variable_getter(getter, *args, **kwargs)\n   1311   return layer_variable_getter\n   1312 \n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py in _model_variable_getter(getter, name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, rename, **_)\n   1297       regularizer=regularizer, collections=collections, trainable=trainable,\n   1298       caching_device=caching_device, partitioner=partitioner,\n-&gt; 1299       custom_getter=getter)\n   1300 \n   1301 \n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\n    175       current_args = current_scope[key_func].copy()\n    176       current_args.update(kwargs)\n--&gt; 177     return func(*args, **current_args)\n    178   _add_op(func)\n    179   setattr(func_with_args, '_key_op', _key_op(func))\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/variables.py in model_variable(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, device, partitioner, custom_getter)\n    266                  trainable=trainable, collections=collections,\n    267                  caching_device=caching_device, device=device,\n--&gt; 268                  partitioner=partitioner, custom_getter=custom_getter)\n    269   return var\n    270 \n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\n    175       current_args = current_scope[key_func].copy()\n    176       current_args.update(kwargs)\n--&gt; 177     return func(*args, **current_args)\n    178   _add_op(func)\n    179   setattr(func_with_args, '_key_op', _key_op(func))\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/variables.py in variable(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, device, partitioner, custom_getter)\n    223                   collections=collections,\n    224                   caching_device=caching_device,\n--&gt; 225                   partitioner=partitioner)\n    226 \n    227 \n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in _true_getter(name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape)\n    331           initializer=initializer, regularizer=regularizer, reuse=reuse,\n    332           trainable=trainable, collections=collections,\n--&gt; 333           caching_device=caching_device, validate_shape=validate_shape)\n    334 \n    335     if custom_getter is not None:\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in _get_single_variable(self, name, shape, dtype, initializer, regularizer, partition_info, reuse, trainable, collections, caching_device, validate_shape)\n    682         caching_device=caching_device,\n    683         dtype=variable_dtype,\n--&gt; 684         validate_shape=validate_shape)\n    685     self._vars[name] = v\n    686     logging.vlog(1, \"Created variable %s with shape %s and init %s\", v.name,\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variables.py in __init__(self, initial_value, trainable, collections, validate_shape, caching_device, name, variable_def, dtype, expected_shape, import_scope)\n    224           name=name,\n    225           dtype=dtype,\n--&gt; 226           expected_shape=expected_shape)\n    227 \n    228   def __str__(self):\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variables.py in _init_from_args(self, initial_value, trainable, collections, validate_shape, caching_device, name, dtype, expected_shape)\n    301             with ops.name_scope(\"Initializer\"),  ops.device(None):\n    302               self._initial_value = ops.convert_to_tensor(\n--&gt; 303                   initial_value(), name=\"initial_value\", dtype=dtype)\n    304               shape = (self._initial_value.get_shape()\n    305                        if validate_shape else tensor_shape.unknown_shape())\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in &lt;lambda&gt;()\n    671       else:\n    672         init_val = lambda: initializer(\n--&gt; 673             shape.as_list(), dtype=dtype, partition_info=partition_info)\n    674         variable_dtype = dtype.base_dtype\n    675 \n\nTypeError: __init__() got multiple values for argument 'dtype'\n\n</code></pre>\n<p>The same code worked on Tensorflow 0.12.</p>", "body_text": "I am implementing an architecture with conv and conv_transpose layers and this is what I am giving the convolution transpose layer:\n    ('convolution_transpose', dict(num_outputs=96, kernel_size=[41, 11],\n                                     stride=[2, 1], padding=\"SAME\", scope='dec_block_1'))\n\nand this is what I get\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\n    175       current_args = current_scope[key_func].copy()\n    176       current_args.update(kwargs)\n--> 177     return func(*args, **current_args)\n    178   _add_op(func)\n    179   setattr(func_with_args, '_key_op', _key_op(func))\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py in convolution2d_transpose(inputs, num_outputs, kernel_size, stride, padding, data_format, activation_fn, normalizer_fn, normalizer_params, weights_initializer, weights_regularizer, biases_initializer, biases_regularizer, reuse, variables_collections, outputs_collections, trainable, scope)\n   1123         _scope=sc,\n   1124         _reuse=reuse)\n-> 1125     outputs = layer.apply(inputs)\n   1126 \n   1127     # Add variables to collections.\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in apply(self, inputs, **kwargs)\n    301       Output tensor(s).\n    302     \"\"\"\n--> 303     return self.__call__(inputs, **kwargs)\n    304 \n    305 \n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in __call__(self, inputs, **kwargs)\n    267           input_shapes = [x.get_shape() for x in input_list]\n    268           if len(input_shapes) == 1:\n--> 269             self.build(input_shapes[0])\n    270           else:\n    271             self.build(input_shapes)\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/convolutional.py in build(self, input_shape)\n   1048                                   regularizer=self.bias_regularizer,\n   1049                                   trainable=True,\n-> 1050                                   dtype=self.dtype)\n   1051     else:\n   1052       self.bias = None\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in get_variable(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, validate_shape, custom_getter)\n    986       collections=collections, caching_device=caching_device,\n    987       partitioner=partitioner, validate_shape=validate_shape,\n--> 988       custom_getter=custom_getter)\n    989 get_variable_or_local_docstring = (\n    990     \"\"\"%s\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in get_variable(self, var_store, name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, validate_shape, custom_getter)\n    888           collections=collections, caching_device=caching_device,\n    889           partitioner=partitioner, validate_shape=validate_shape,\n--> 890           custom_getter=custom_getter)\n    891 \n    892   def _get_partitioned_variable(self,\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in get_variable(self, name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape, custom_getter)\n    339           reuse=reuse, trainable=trainable, collections=collections,\n    340           caching_device=caching_device, partitioner=partitioner,\n--> 341           validate_shape=validate_shape)\n    342     else:\n    343       return _true_getter(\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in variable_getter(getter, name, shape, dtype, initializer, regularizer, trainable, **kwargs)\n    256           name, shape, initializer=initializer, regularizer=regularizer,\n    257           dtype=dtype, trainable=trainable,\n--> 258           variable_getter=functools.partial(getter, **kwargs))\n    259 \n    260     # Build (if necessary) and call the layer, inside a variable scope.\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in _add_variable(self, name, shape, dtype, initializer, regularizer, trainable, variable_getter)\n    206                                initializer=initializer,\n    207                                dtype=dtype,\n--> 208                                trainable=trainable and self.trainable)\n    209     # TODO(sguada) fix name = variable.op.name\n    210     if variable in existing_variables:\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py in layer_variable_getter(getter, *args, **kwargs)\n   1308       getter = functools.partial(current_custom_getter, getter)\n   1309     kwargs['rename'] = rename\n-> 1310     return _model_variable_getter(getter, *args, **kwargs)\n   1311   return layer_variable_getter\n   1312 \n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py in _model_variable_getter(getter, name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, rename, **_)\n   1297       regularizer=regularizer, collections=collections, trainable=trainable,\n   1298       caching_device=caching_device, partitioner=partitioner,\n-> 1299       custom_getter=getter)\n   1300 \n   1301 \n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\n    175       current_args = current_scope[key_func].copy()\n    176       current_args.update(kwargs)\n--> 177     return func(*args, **current_args)\n    178   _add_op(func)\n    179   setattr(func_with_args, '_key_op', _key_op(func))\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/variables.py in model_variable(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, device, partitioner, custom_getter)\n    266                  trainable=trainable, collections=collections,\n    267                  caching_device=caching_device, device=device,\n--> 268                  partitioner=partitioner, custom_getter=custom_getter)\n    269   return var\n    270 \n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\n    175       current_args = current_scope[key_func].copy()\n    176       current_args.update(kwargs)\n--> 177     return func(*args, **current_args)\n    178   _add_op(func)\n    179   setattr(func_with_args, '_key_op', _key_op(func))\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/variables.py in variable(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, device, partitioner, custom_getter)\n    223                   collections=collections,\n    224                   caching_device=caching_device,\n--> 225                   partitioner=partitioner)\n    226 \n    227 \n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in _true_getter(name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape)\n    331           initializer=initializer, regularizer=regularizer, reuse=reuse,\n    332           trainable=trainable, collections=collections,\n--> 333           caching_device=caching_device, validate_shape=validate_shape)\n    334 \n    335     if custom_getter is not None:\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in _get_single_variable(self, name, shape, dtype, initializer, regularizer, partition_info, reuse, trainable, collections, caching_device, validate_shape)\n    682         caching_device=caching_device,\n    683         dtype=variable_dtype,\n--> 684         validate_shape=validate_shape)\n    685     self._vars[name] = v\n    686     logging.vlog(1, \"Created variable %s with shape %s and init %s\", v.name,\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variables.py in __init__(self, initial_value, trainable, collections, validate_shape, caching_device, name, variable_def, dtype, expected_shape, import_scope)\n    224           name=name,\n    225           dtype=dtype,\n--> 226           expected_shape=expected_shape)\n    227 \n    228   def __str__(self):\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variables.py in _init_from_args(self, initial_value, trainable, collections, validate_shape, caching_device, name, dtype, expected_shape)\n    301             with ops.name_scope(\"Initializer\"),  ops.device(None):\n    302               self._initial_value = ops.convert_to_tensor(\n--> 303                   initial_value(), name=\"initial_value\", dtype=dtype)\n    304               shape = (self._initial_value.get_shape()\n    305                        if validate_shape else tensor_shape.unknown_shape())\n\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in <lambda>()\n    671       else:\n    672         init_val = lambda: initializer(\n--> 673             shape.as_list(), dtype=dtype, partition_info=partition_info)\n    674         variable_dtype = dtype.base_dtype\n    675 \n\nTypeError: __init__() got multiple values for argument 'dtype'\n\n\nThe same code worked on Tensorflow 0.12.", "body": "I am implementing an architecture with conv and conv_transpose layers and this is what I am giving the convolution transpose layer: \r\n```\r\n    ('convolution_transpose', dict(num_outputs=96, kernel_size=[41, 11],\r\n                                     stride=[2, 1], padding=\"SAME\", scope='dec_block_1'))\r\n```\r\n\r\nand this is what I get \r\n\r\n\r\n```\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\r\n    175       current_args = current_scope[key_func].copy()\r\n    176       current_args.update(kwargs)\r\n--> 177     return func(*args, **current_args)\r\n    178   _add_op(func)\r\n    179   setattr(func_with_args, '_key_op', _key_op(func))\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py in convolution2d_transpose(inputs, num_outputs, kernel_size, stride, padding, data_format, activation_fn, normalizer_fn, normalizer_params, weights_initializer, weights_regularizer, biases_initializer, biases_regularizer, reuse, variables_collections, outputs_collections, trainable, scope)\r\n   1123         _scope=sc,\r\n   1124         _reuse=reuse)\r\n-> 1125     outputs = layer.apply(inputs)\r\n   1126 \r\n   1127     # Add variables to collections.\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in apply(self, inputs, **kwargs)\r\n    301       Output tensor(s).\r\n    302     \"\"\"\r\n--> 303     return self.__call__(inputs, **kwargs)\r\n    304 \r\n    305 \r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in __call__(self, inputs, **kwargs)\r\n    267           input_shapes = [x.get_shape() for x in input_list]\r\n    268           if len(input_shapes) == 1:\r\n--> 269             self.build(input_shapes[0])\r\n    270           else:\r\n    271             self.build(input_shapes)\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/convolutional.py in build(self, input_shape)\r\n   1048                                   regularizer=self.bias_regularizer,\r\n   1049                                   trainable=True,\r\n-> 1050                                   dtype=self.dtype)\r\n   1051     else:\r\n   1052       self.bias = None\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in get_variable(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, validate_shape, custom_getter)\r\n    986       collections=collections, caching_device=caching_device,\r\n    987       partitioner=partitioner, validate_shape=validate_shape,\r\n--> 988       custom_getter=custom_getter)\r\n    989 get_variable_or_local_docstring = (\r\n    990     \"\"\"%s\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in get_variable(self, var_store, name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, validate_shape, custom_getter)\r\n    888           collections=collections, caching_device=caching_device,\r\n    889           partitioner=partitioner, validate_shape=validate_shape,\r\n--> 890           custom_getter=custom_getter)\r\n    891 \r\n    892   def _get_partitioned_variable(self,\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in get_variable(self, name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape, custom_getter)\r\n    339           reuse=reuse, trainable=trainable, collections=collections,\r\n    340           caching_device=caching_device, partitioner=partitioner,\r\n--> 341           validate_shape=validate_shape)\r\n    342     else:\r\n    343       return _true_getter(\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in variable_getter(getter, name, shape, dtype, initializer, regularizer, trainable, **kwargs)\r\n    256           name, shape, initializer=initializer, regularizer=regularizer,\r\n    257           dtype=dtype, trainable=trainable,\r\n--> 258           variable_getter=functools.partial(getter, **kwargs))\r\n    259 \r\n    260     # Build (if necessary) and call the layer, inside a variable scope.\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/layers/base.py in _add_variable(self, name, shape, dtype, initializer, regularizer, trainable, variable_getter)\r\n    206                                initializer=initializer,\r\n    207                                dtype=dtype,\r\n--> 208                                trainable=trainable and self.trainable)\r\n    209     # TODO(sguada) fix name = variable.op.name\r\n    210     if variable in existing_variables:\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py in layer_variable_getter(getter, *args, **kwargs)\r\n   1308       getter = functools.partial(current_custom_getter, getter)\r\n   1309     kwargs['rename'] = rename\r\n-> 1310     return _model_variable_getter(getter, *args, **kwargs)\r\n   1311   return layer_variable_getter\r\n   1312 \r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/layers/python/layers/layers.py in _model_variable_getter(getter, name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, rename, **_)\r\n   1297       regularizer=regularizer, collections=collections, trainable=trainable,\r\n   1298       caching_device=caching_device, partitioner=partitioner,\r\n-> 1299       custom_getter=getter)\r\n   1300 \r\n   1301 \r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\r\n    175       current_args = current_scope[key_func].copy()\r\n    176       current_args.update(kwargs)\r\n--> 177     return func(*args, **current_args)\r\n    178   _add_op(func)\r\n    179   setattr(func_with_args, '_key_op', _key_op(func))\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/variables.py in model_variable(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, device, partitioner, custom_getter)\r\n    266                  trainable=trainable, collections=collections,\r\n    267                  caching_device=caching_device, device=device,\r\n--> 268                  partitioner=partitioner, custom_getter=custom_getter)\r\n    269   return var\r\n    270 \r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py in func_with_args(*args, **kwargs)\r\n    175       current_args = current_scope[key_func].copy()\r\n    176       current_args.update(kwargs)\r\n--> 177     return func(*args, **current_args)\r\n    178   _add_op(func)\r\n    179   setattr(func_with_args, '_key_op', _key_op(func))\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/contrib/framework/python/ops/variables.py in variable(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, device, partitioner, custom_getter)\r\n    223                   collections=collections,\r\n    224                   caching_device=caching_device,\r\n--> 225                   partitioner=partitioner)\r\n    226 \r\n    227 \r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in _true_getter(name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape)\r\n    331           initializer=initializer, regularizer=regularizer, reuse=reuse,\r\n    332           trainable=trainable, collections=collections,\r\n--> 333           caching_device=caching_device, validate_shape=validate_shape)\r\n    334 \r\n    335     if custom_getter is not None:\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in _get_single_variable(self, name, shape, dtype, initializer, regularizer, partition_info, reuse, trainable, collections, caching_device, validate_shape)\r\n    682         caching_device=caching_device,\r\n    683         dtype=variable_dtype,\r\n--> 684         validate_shape=validate_shape)\r\n    685     self._vars[name] = v\r\n    686     logging.vlog(1, \"Created variable %s with shape %s and init %s\", v.name,\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variables.py in __init__(self, initial_value, trainable, collections, validate_shape, caching_device, name, variable_def, dtype, expected_shape, import_scope)\r\n    224           name=name,\r\n    225           dtype=dtype,\r\n--> 226           expected_shape=expected_shape)\r\n    227 \r\n    228   def __str__(self):\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variables.py in _init_from_args(self, initial_value, trainable, collections, validate_shape, caching_device, name, dtype, expected_shape)\r\n    301             with ops.name_scope(\"Initializer\"),  ops.device(None):\r\n    302               self._initial_value = ops.convert_to_tensor(\r\n--> 303                   initial_value(), name=\"initial_value\", dtype=dtype)\r\n    304               shape = (self._initial_value.get_shape()\r\n    305                        if validate_shape else tensor_shape.unknown_shape())\r\n\r\n/usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/variable_scope.py in <lambda>()\r\n    671       else:\r\n    672         init_val = lambda: initializer(\r\n--> 673             shape.as_list(), dtype=dtype, partition_info=partition_info)\r\n    674         variable_dtype = dtype.base_dtype\r\n    675 \r\n\r\nTypeError: __init__() got multiple values for argument 'dtype'\r\n\r\n```\r\n\r\nThe same code worked on Tensorflow 0.12. "}