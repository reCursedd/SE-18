{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11926", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11926/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11926/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11926/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11926", "id": 246936582, "node_id": "MDU6SXNzdWUyNDY5MzY1ODI=", "number": 11926, "title": "How to understand multithreading in tf queue?", "user": {"login": "gauss-clb", "id": 11674304, "node_id": "MDQ6VXNlcjExNjc0MzA0", "avatar_url": "https://avatars2.githubusercontent.com/u/11674304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gauss-clb", "html_url": "https://github.com/gauss-clb", "followers_url": "https://api.github.com/users/gauss-clb/followers", "following_url": "https://api.github.com/users/gauss-clb/following{/other_user}", "gists_url": "https://api.github.com/users/gauss-clb/gists{/gist_id}", "starred_url": "https://api.github.com/users/gauss-clb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gauss-clb/subscriptions", "organizations_url": "https://api.github.com/users/gauss-clb/orgs", "repos_url": "https://api.github.com/users/gauss-clb/repos", "events_url": "https://api.github.com/users/gauss-clb/events{/privacy}", "received_events_url": "https://api.github.com/users/gauss-clb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-01T02:19:44Z", "updated_at": "2017-08-01T05:20:18Z", "closed_at": "2017-08-01T05:20:18Z", "author_association": "NONE", "body_html": "<p>Tensorflow provides us two ways to implement reading data.<br>\nThe first way, use many reader, such as <code>tf.TextLineReader</code>, one reader per thread.<br>\nThe second way, use just one reader and multithreading of enqueue ops, for example we can use <code>tf.train.shuffle_batch</code> and set <code>num_threads</code> greater than 1.</p>\n<p>I can't understand the second way, we just have one reader to load data(perhaps a thread), why we need so many threads to enqueue? And for the first way, we should use <code>tf.train.shuffle_batch_join</code>, there is no <code>num_threads</code> parameter we can set, so I think the first way is understandable. Can anyone give me some explanation for why we need one reader but many threads to enqueue?</p>", "body_text": "Tensorflow provides us two ways to implement reading data.\nThe first way, use many reader, such as tf.TextLineReader, one reader per thread.\nThe second way, use just one reader and multithreading of enqueue ops, for example we can use tf.train.shuffle_batch and set num_threads greater than 1.\nI can't understand the second way, we just have one reader to load data(perhaps a thread), why we need so many threads to enqueue? And for the first way, we should use tf.train.shuffle_batch_join, there is no num_threads parameter we can set, so I think the first way is understandable. Can anyone give me some explanation for why we need one reader but many threads to enqueue?", "body": "Tensorflow provides us two ways to implement reading data. \r\nThe first way, use many reader, such as `tf.TextLineReader`, one reader per thread.\r\nThe second way, use just one reader and multithreading of enqueue ops, for example we can use `tf.train.shuffle_batch` and set `num_threads` greater than 1.\r\n\r\nI can't understand the second way, we just have one reader to load data(perhaps a thread), why we need so many threads to enqueue? And for the first way, we should use `tf.train.shuffle_batch_join`, there is no `num_threads` parameter we can set, so I think the first way is understandable. Can anyone give me some explanation for why we need one reader but many threads to enqueue?"}