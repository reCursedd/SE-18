{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/281482708", "html_url": "https://github.com/tensorflow/tensorflow/issues/7287#issuecomment-281482708", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7287", "id": 281482708, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTQ4MjcwOA==", "user": {"login": "ilblackdragon", "id": 175486, "node_id": "MDQ6VXNlcjE3NTQ4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/175486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilblackdragon", "html_url": "https://github.com/ilblackdragon", "followers_url": "https://api.github.com/users/ilblackdragon/followers", "following_url": "https://api.github.com/users/ilblackdragon/following{/other_user}", "gists_url": "https://api.github.com/users/ilblackdragon/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilblackdragon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilblackdragon/subscriptions", "organizations_url": "https://api.github.com/users/ilblackdragon/orgs", "repos_url": "https://api.github.com/users/ilblackdragon/repos", "events_url": "https://api.github.com/users/ilblackdragon/events{/privacy}", "received_events_url": "https://api.github.com/users/ilblackdragon/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-21T21:14:40Z", "updated_at": "2017-02-21T21:14:40Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi,</p>\n<p>Here is what I currently have <code>SKCompat</code> in TF 1.0:</p>\n<pre><code>In [1]: import tensorflow as tf\ntf.contrib.learn.SKC\nIn [2]: tf.contrib.learn.SKCompat\nOut[2]: tensorflow.contrib.learn.python.learn.estimators.estimator.SKCompat\n\nIn [3]: tf.__version__\nOut[3]: '1.0.0-rc2'\n</code></pre>\n<p>Indeed we don't have <code>predict_proba</code> at this point implemented in <code>SKCompat</code> because the way probabilities can be surfaced from the underlaying <code>Estimator</code> depends on your implementation of <code>model_fn</code>. You can use <code>.predict</code> method and select <code>outputs</code> that return probabilities.</p>", "body_text": "Hi,\nHere is what I currently have SKCompat in TF 1.0:\nIn [1]: import tensorflow as tf\ntf.contrib.learn.SKC\nIn [2]: tf.contrib.learn.SKCompat\nOut[2]: tensorflow.contrib.learn.python.learn.estimators.estimator.SKCompat\n\nIn [3]: tf.__version__\nOut[3]: '1.0.0-rc2'\n\nIndeed we don't have predict_proba at this point implemented in SKCompat because the way probabilities can be surfaced from the underlaying Estimator depends on your implementation of model_fn. You can use .predict method and select outputs that return probabilities.", "body": "Hi,\r\n\r\nHere is what I currently have `SKCompat` in TF 1.0:\r\n```\r\nIn [1]: import tensorflow as tf\r\ntf.contrib.learn.SKC\r\nIn [2]: tf.contrib.learn.SKCompat\r\nOut[2]: tensorflow.contrib.learn.python.learn.estimators.estimator.SKCompat\r\n\r\nIn [3]: tf.__version__\r\nOut[3]: '1.0.0-rc2'\r\n```\r\n\r\nIndeed we don't have `predict_proba` at this point implemented in `SKCompat` because the way probabilities can be surfaced from the underlaying `Estimator` depends on your implementation of `model_fn`. You can use `.predict` method and select `outputs` that return probabilities."}