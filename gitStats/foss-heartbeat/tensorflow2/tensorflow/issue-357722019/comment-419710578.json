{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/419710578", "html_url": "https://github.com/tensorflow/tensorflow/issues/22116#issuecomment-419710578", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22116", "id": 419710578, "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTcxMDU3OA==", "user": {"login": "cdluminate", "id": 5723047, "node_id": "MDQ6VXNlcjU3MjMwNDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5723047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdluminate", "html_url": "https://github.com/cdluminate", "followers_url": "https://api.github.com/users/cdluminate/followers", "following_url": "https://api.github.com/users/cdluminate/following{/other_user}", "gists_url": "https://api.github.com/users/cdluminate/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdluminate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdluminate/subscriptions", "organizations_url": "https://api.github.com/users/cdluminate/orgs", "repos_url": "https://api.github.com/users/cdluminate/repos", "events_url": "https://api.github.com/users/cdluminate/events{/privacy}", "received_events_url": "https://api.github.com/users/cdluminate/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-09T11:52:58Z", "updated_at": "2018-09-09T11:52:58Z", "author_association": "NONE", "body_html": "<p>The cause of this problem is that <code>device.frequency()</code> returned <code>0</code>.</p>\n<div class=\"highlight highlight-source-c++\"><pre>t/c/g/c/op_level_cost_estimator.cc \ue0b0                               \ue0b2\ue0b2 [buffers] \n <span class=\"pl-c1\">363</span> \n <span class=\"pl-c1\">364</span>   <span class=\"pl-k\">if</span> (device.type() == <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>CPU<span class=\"pl-pds\">\"</span></span>) {\n <span class=\"pl-c1\">365</span>     <span class=\"pl-c\"><span class=\"pl-c\">//</span> Check if vector instructions are available, and refine performance</span>\n <span class=\"pl-c1\">366</span>     <span class=\"pl-c\"><span class=\"pl-c\">//</span> prediction based on this.</span>\n <span class=\"pl-c1\">367</span>     <span class=\"pl-c\"><span class=\"pl-c\">//</span> Frequencies are stored in MHz in the DeviceProperties.</span>\n <span class=\"pl-c1\">368</span>     gflops = device.<span class=\"pl-c1\">num_cores</span>() * device.<span class=\"pl-c1\">frequency</span>() * <span class=\"pl-c1\">1e-3</span>;\n <span class=\"pl-c1\">369</span>     <span class=\"pl-smi\">if</span> (gb_per_sec &lt; <span class=\"pl-c1\">0</span>) {\n <span class=\"pl-c1\">370</span>       <span class=\"pl-smi\">if</span> (device.<span class=\"pl-c1\">bandwidth</span>() &gt; <span class=\"pl-c1\">0</span>) {\n <span class=\"pl-c1\">371</span>         gb_per_sec = device.<span class=\"pl-c1\">bandwidth</span>() / <span class=\"pl-c1\">1e6</span>;\n <span class=\"pl-c1\">372</span>       } <span class=\"pl-k\">else</span> {\n <span class=\"pl-c1\">373</span>         gb_per_sec = <span class=\"pl-c1\">32</span>;\n <span class=\"pl-c1\">374</span>       }\n <span class=\"pl-c1\">375</span>     }</pre></div>", "body_text": "The cause of this problem is that device.frequency() returned 0.\nt/c/g/c/op_level_cost_estimator.cc \ue0b0                               \ue0b2\ue0b2 [buffers] \n 363 \n 364   if (device.type() == \"CPU\") {\n 365     // Check if vector instructions are available, and refine performance\n 366     // prediction based on this.\n 367     // Frequencies are stored in MHz in the DeviceProperties.\n 368     gflops = device.num_cores() * device.frequency() * 1e-3;\n 369     if (gb_per_sec < 0) {\n 370       if (device.bandwidth() > 0) {\n 371         gb_per_sec = device.bandwidth() / 1e6;\n 372       } else {\n 373         gb_per_sec = 32;\n 374       }\n 375     }", "body": "The cause of this problem is that `device.frequency()` returned `0`.\r\n```c++\r\nt/c/g/c/op_level_cost_estimator.cc \ue0b0                               \ue0b2\ue0b2 [buffers] \r\n 363 \r\n 364   if (device.type() == \"CPU\") {\r\n 365     // Check if vector instructions are available, and refine performance\r\n 366     // prediction based on this.\r\n 367     // Frequencies are stored in MHz in the DeviceProperties.\r\n 368     gflops = device.num_cores() * device.frequency() * 1e-3;\r\n 369     if (gb_per_sec < 0) {\r\n 370       if (device.bandwidth() > 0) {\r\n 371         gb_per_sec = device.bandwidth() / 1e6;\r\n 372       } else {\r\n 373         gb_per_sec = 32;\r\n 374       }\r\n 375     }\r\n```"}