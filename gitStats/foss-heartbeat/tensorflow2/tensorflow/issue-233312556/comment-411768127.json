{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/411768127", "html_url": "https://github.com/tensorflow/tensorflow/issues/10408#issuecomment-411768127", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10408", "id": 411768127, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTc2ODEyNw==", "user": {"login": "Dagalaki", "id": 22937915, "node_id": "MDQ6VXNlcjIyOTM3OTE1", "avatar_url": "https://avatars2.githubusercontent.com/u/22937915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dagalaki", "html_url": "https://github.com/Dagalaki", "followers_url": "https://api.github.com/users/Dagalaki/followers", "following_url": "https://api.github.com/users/Dagalaki/following{/other_user}", "gists_url": "https://api.github.com/users/Dagalaki/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dagalaki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dagalaki/subscriptions", "organizations_url": "https://api.github.com/users/Dagalaki/orgs", "repos_url": "https://api.github.com/users/Dagalaki/repos", "events_url": "https://api.github.com/users/Dagalaki/events{/privacy}", "received_events_url": "https://api.github.com/users/Dagalaki/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-09T14:01:28Z", "updated_at": "2018-08-09T14:01:28Z", "author_association": "NONE", "body_html": "<p>Hello,</p>\n<p>I am also having a problem with memory leak on running label image logic in a loop<br>\nI use Tensorflow r1.0.1 and opencv 2.4.9<br>\nI am not sure yet if memory leak is opencv related or tensorflow related.<br>\nIn some posts, seems that capture.read() can lead to memory leak(opencv related),  in other posts could be because of operators initialization inside loop(tensorflow related)<br>\nBelow part of my code, I would appreciate if smo can check the code inside the loop in case there is smth obvious I should change to avoid memory leak, thank you in advance<br>\n`with tf.Session('',graph=graph, config=tf.ConfigProto(inter_op_parallelism_threads=1,intra_op_parallelism_threads=1)) as sess:</p>\n<p>ret, frame = cap.read()</p>\n<p>file_name = '...png'</p>\n<p>if frame is not None:</p>\n<pre><code>  cv2.imwrite(file_name,frame)\n\n input_name = \"file_reader\"\n\n output_name = \"normalized\"\n\n file_reader = tf.read_file(file_name, input_name)\n\n if file_name.endswith(\".png\"):\n\n  image_reader = tf.image.decode_png(file_reader, channels = 3, name='png_reader')\n\n float_caster = tf.cast(image_reader, tf.float32)\n\n dims_expander = tf.expand_dims(float_caster, 0)\n\n\n resized = tf.image.resize_bilinear(dims_expander, [input_height, input_width])\n\n normalized = tf.divide(tf.subtract(resized, [input_mean]), [input_std])\n\n t = sess.run(normalized)\n\n results = sess.run(output_operation.outputs[0],\n                  {input_operation.outputs[0]: t})\n\n results = np.squeeze(results)\n\n top_k = results.argsort()[-1:][::-1]\n\n labels = load_labels(label_file)\n</code></pre>\n<p>...<br>\n`<br>\nI am going to upgrade also opencv now in my system. Do you think I should upgrade also Tensorflow version. To be honest, I would keep same version of tensorflow in order to use .pb graph already generated because I am not sure if my .pb will be compatible with newer versions.</p>\n<p>Any suggestions to overcome memory leak problem and find what really causes this will be very helpful.</p>\n<p>Thank you,</p>", "body_text": "Hello,\nI am also having a problem with memory leak on running label image logic in a loop\nI use Tensorflow r1.0.1 and opencv 2.4.9\nI am not sure yet if memory leak is opencv related or tensorflow related.\nIn some posts, seems that capture.read() can lead to memory leak(opencv related),  in other posts could be because of operators initialization inside loop(tensorflow related)\nBelow part of my code, I would appreciate if smo can check the code inside the loop in case there is smth obvious I should change to avoid memory leak, thank you in advance\n`with tf.Session('',graph=graph, config=tf.ConfigProto(inter_op_parallelism_threads=1,intra_op_parallelism_threads=1)) as sess:\nret, frame = cap.read()\nfile_name = '...png'\nif frame is not None:\n  cv2.imwrite(file_name,frame)\n\n input_name = \"file_reader\"\n\n output_name = \"normalized\"\n\n file_reader = tf.read_file(file_name, input_name)\n\n if file_name.endswith(\".png\"):\n\n  image_reader = tf.image.decode_png(file_reader, channels = 3, name='png_reader')\n\n float_caster = tf.cast(image_reader, tf.float32)\n\n dims_expander = tf.expand_dims(float_caster, 0)\n\n\n resized = tf.image.resize_bilinear(dims_expander, [input_height, input_width])\n\n normalized = tf.divide(tf.subtract(resized, [input_mean]), [input_std])\n\n t = sess.run(normalized)\n\n results = sess.run(output_operation.outputs[0],\n                  {input_operation.outputs[0]: t})\n\n results = np.squeeze(results)\n\n top_k = results.argsort()[-1:][::-1]\n\n labels = load_labels(label_file)\n\n...\n`\nI am going to upgrade also opencv now in my system. Do you think I should upgrade also Tensorflow version. To be honest, I would keep same version of tensorflow in order to use .pb graph already generated because I am not sure if my .pb will be compatible with newer versions.\nAny suggestions to overcome memory leak problem and find what really causes this will be very helpful.\nThank you,", "body": "Hello, \r\n\r\nI am also having a problem with memory leak on running label image logic in a loop\r\nI use Tensorflow r1.0.1 and opencv 2.4.9\r\nI am not sure yet if memory leak is opencv related or tensorflow related.\r\nIn some posts, seems that capture.read() can lead to memory leak(opencv related),  in other posts could be because of operators initialization inside loop(tensorflow related)\r\nBelow part of my code, I would appreciate if smo can check the code inside the loop in case there is smth obvious I should change to avoid memory leak, thank you in advance\r\n`with tf.Session('',graph=graph, config=tf.ConfigProto(inter_op_parallelism_threads=1,intra_op_parallelism_threads=1)) as sess:\r\n\r\nret, frame = cap.read()\r\n\r\nfile_name = '...png'\r\n\r\nif frame is not None: \r\n\r\n      cv2.imwrite(file_name,frame)\r\n\r\n     input_name = \"file_reader\"\r\n\r\n     output_name = \"normalized\"\r\n\r\n     file_reader = tf.read_file(file_name, input_name)\r\n\r\n     if file_name.endswith(\".png\"):\r\n\r\n      image_reader = tf.image.decode_png(file_reader, channels = 3, name='png_reader')\r\n\r\n     float_caster = tf.cast(image_reader, tf.float32)\r\n\r\n     dims_expander = tf.expand_dims(float_caster, 0)\r\n\r\n\r\n     resized = tf.image.resize_bilinear(dims_expander, [input_height, input_width])\r\n\r\n     normalized = tf.divide(tf.subtract(resized, [input_mean]), [input_std])\r\n\r\n     t = sess.run(normalized)\r\n\r\n     results = sess.run(output_operation.outputs[0],\r\n                      {input_operation.outputs[0]: t})\r\n\r\n     results = np.squeeze(results)\r\n\r\n     top_k = results.argsort()[-1:][::-1]\r\n\r\n     labels = load_labels(label_file)\r\n\r\n...\r\n`\r\nI am going to upgrade also opencv now in my system. Do you think I should upgrade also Tensorflow version. To be honest, I would keep same version of tensorflow in order to use .pb graph already generated because I am not sure if my .pb will be compatible with newer versions. \r\n\r\nAny suggestions to overcome memory leak problem and find what really causes this will be very helpful.\r\n\r\nThank you, "}