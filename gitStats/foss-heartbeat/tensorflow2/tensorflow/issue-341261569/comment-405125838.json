{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/405125838", "html_url": "https://github.com/tensorflow/tensorflow/issues/20805#issuecomment-405125838", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20805", "id": 405125838, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTEyNTgzOA==", "user": {"login": "nairouz", "id": 10966954, "node_id": "MDQ6VXNlcjEwOTY2OTU0", "avatar_url": "https://avatars0.githubusercontent.com/u/10966954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nairouz", "html_url": "https://github.com/nairouz", "followers_url": "https://api.github.com/users/nairouz/followers", "following_url": "https://api.github.com/users/nairouz/following{/other_user}", "gists_url": "https://api.github.com/users/nairouz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nairouz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nairouz/subscriptions", "organizations_url": "https://api.github.com/users/nairouz/orgs", "repos_url": "https://api.github.com/users/nairouz/repos", "events_url": "https://api.github.com/users/nairouz/events{/privacy}", "received_events_url": "https://api.github.com/users/nairouz/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-15T23:19:28Z", "updated_at": "2018-07-15T23:33:02Z", "author_association": "NONE", "body_html": "<p>There is another undesirable behavior in the case of the static graph for the newest version 1.9.<br>\nI was compelled to use the attribute \"value\" for the \"input_shape\" argument otherwise it would produce an error.</p>\n<h3>Code: without using the \"value\" attribute</h3>\n<pre><code>class ClusteringLayer(Layer):\n    def __init__(self, output_dim, input_dim=None, alpha=1.0, **kwargs):\n        self.output_dim = output_dim\n        self.input_dim = input_dim\n        self.alpha = alpha\n        super(ClusteringLayer, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        self.W = self.add_weight(name='kernel', shape=(self.output_dim, input_shape[1]), initializer='Identity', trainable=True)\n        super(ClusteringLayer, self).build(input_shape)\n    \n    def call(self, x, mask=None):\n        q0 = 1.0/(1.0 + K.sqrt(K.sum(K.square(K.expand_dims(x, 1) - self.W), axis=2))**2 / self.alpha)\n        q1 = q0**((self.alpha+1.0)/2.0)\n        q2 = K.transpose(K.transpose(q1)/K.sum(q1, axis=1))\n        return q2\n\n    def compute_output_shape(self, input_shape):\n        return (input_shape[0], self.output_dim)\n</code></pre>\n<h3>Error:</h3>\n<p>TypeError                                 Traceback (most recent call last)<br>\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)<br>\n520     try:<br>\n--&gt; 521       str_values = [compat.as_bytes(x) for x in proto_values]<br>\n522     except TypeError:</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/tensor_util.py in (.0)<br>\n520     try:<br>\n--&gt; 521       str_values = [compat.as_bytes(x) for x in proto_values]<br>\n522     except TypeError:</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/util/compat.py in as_bytes(bytes_or_text, encoding)<br>\n60     raise TypeError('Expected binary or unicode string, got %r' %<br>\n---&gt; 61                     (bytes_or_text,))<br>\n62</p>\n<p>TypeError: Expected binary or unicode string, got 5</p>\n<p>During handling of the above exception, another exception occurred:</p>\n<p>TypeError                                 Traceback (most recent call last)<br>\n in ()<br>\n48 input1 = Input(shape=(10,), name=\"input\")<br>\n49 print(input1)<br>\n---&gt; 50 out = ClusteringLayer(output_dim=5, name='clustering')(input1)<br>\n51<br>\n52 np.random.seed(0)</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in <strong>call</strong>(self, inputs, *args, **kwargs)<br>\n694         if all(hasattr(x, 'get_shape') for x in input_list):<br>\n695           input_shapes = nest.map_structure(lambda x: x.get_shape(), inputs)<br>\n--&gt; 696         self.build(input_shapes)<br>\n697<br>\n698       # Check input assumptions set after layer building, e.g. input shape.</p>\n<p> in build(self, input_shape)<br>\n7<br>\n8     def build(self, input_shape):<br>\n----&gt; 9         self.W = self.add_weight(name='kernel', shape=(self.output_dim, input_shape[1]), initializer='uniform', trainable=True)<br>\n10         super(ClusteringLayer, self).build(input_shape)<br>\n11</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in add_weight(self, name, shape, dtype, initializer, regularizer, trainable, constraint, partitioner, use_resource, getter)<br>\n532         trainable=trainable and self.trainable,<br>\n533         partitioner=partitioner,<br>\n--&gt; 534         use_resource=use_resource)<br>\n535<br>\n536     if regularizer is not None:</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/checkpointable/base.py in _add_variable_with_custom_getter(self, name, shape, dtype, initializer, getter, overwrite, **kwargs_for_getter)<br>\n495     new_variable = getter(<br>\n496         name=name, shape=shape, dtype=dtype, initializer=initializer,<br>\n--&gt; 497         **kwargs_for_getter)<br>\n498<br>\n499     # If we set an initializer and the variable processed it, tracking will not</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in make_variable(name, shape, dtype, initializer, partition_info, trainable, caching_device, validate_shape, constraint, use_resource, partitioner)<br>\n1871       validate_shape=validate_shape,<br>\n1872       constraint=constraint,<br>\n-&gt; 1873       use_resource=use_resource)<br>\n1874   return v</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py in variable(initial_value, trainable, collections, validate_shape, caching_device, name, dtype, constraint, use_resource)<br>\n2232                          name=name, dtype=dtype,<br>\n2233                          constraint=constraint,<br>\n-&gt; 2234                          use_resource=use_resource)<br>\n2235<br>\n2236</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py in (**kwargs)<br>\n2222              constraint=None,<br>\n2223              use_resource=None):<br>\n-&gt; 2224   previous_getter = lambda **kwargs: default_variable_creator(None, **kwargs)<br>\n2225   for getter in ops.get_default_graph()._variable_creator_stack:  # pylint: disable=protected-access<br>\n2226     previous_getter = _make_getter(getter, previous_getter)</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py in default_variable_creator(next_creator, **kwargs)<br>\n2194         collections=collections, validate_shape=validate_shape,<br>\n2195         caching_device=caching_device, name=name, dtype=dtype,<br>\n-&gt; 2196         constraint=constraint)<br>\n2197   elif not use_resource and context.executing_eagerly():<br>\n2198     raise RuntimeError(</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py in <strong>init</strong>(self, initial_value, trainable, collections, validate_shape, caching_device, name, dtype, variable_def, import_scope, constraint)<br>\n310           name=name,<br>\n311           dtype=dtype,<br>\n--&gt; 312           constraint=constraint)<br>\n313<br>\n314   # pylint: disable=unused-argument</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py in _init_from_args(self, initial_value, trainable, collections, validate_shape, caching_device, name, dtype, constraint)<br>\n415               with ops.name_scope(\"Initializer\"), ops.device(None):<br>\n416                 initial_value = ops.convert_to_tensor(<br>\n--&gt; 417                     initial_value(), name=\"initial_value\", dtype=dtype)<br>\n418               self._handle = _eager_safe_variable_handle(<br>\n419                   shape=initial_value.get_shape(),</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in ()<br>\n1858         initializer = initializer(dtype=dtype)<br>\n1859       init_val = lambda: initializer(  # pylint: disable=g-long-lambda<br>\n-&gt; 1860           shape, dtype=dtype, partition_info=partition_info)<br>\n1861       variable_dtype = dtype.base_dtype<br>\n1862   if use_resource is None:</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py in <strong>call</strong>(self, shape, dtype, partition_info)<br>\n253       dtype = self.dtype<br>\n254     return random_ops.random_uniform(<br>\n--&gt; 255         shape, self.minval, self.maxval, dtype, seed=self.seed)<br>\n256<br>\n257   def get_config(self):</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/random_ops.py in random_uniform(shape, minval, maxval, dtype, seed, name)<br>\n232     maxval = 1<br>\n233   with ops.name_scope(name, \"random_uniform\", [shape, minval, maxval]) as name:<br>\n--&gt; 234     shape = _ShapeTensor(shape)<br>\n235     minval = ops.convert_to_tensor(minval, dtype=dtype, name=\"min\")<br>\n236     maxval = ops.convert_to_tensor(maxval, dtype=dtype, name=\"max\")</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/random_ops.py in _ShapeTensor(shape)<br>\n41   else:<br>\n42     dtype = None<br>\n---&gt; 43   return ops.convert_to_tensor(shape, dtype=dtype, name=\"shape\")<br>\n44<br>\n45</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in convert_to_tensor(value, dtype, name, preferred_dtype)<br>\n1009       name=name,<br>\n1010       preferred_dtype=preferred_dtype,<br>\n-&gt; 1011       as_ref=False)<br>\n1012<br>\n1013</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx)<br>\n1105<br>\n1106     if ret is None:<br>\n-&gt; 1107       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)<br>\n1108<br>\n1109     if ret is NotImplemented:</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)<br>\n215                                          as_ref=False):<br>\n216   _ = as_ref<br>\n--&gt; 217   return constant(v, dtype=dtype, name=name)<br>\n218<br>\n219</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)<br>\n194   tensor_value.tensor.CopyFrom(<br>\n195       tensor_util.make_tensor_proto(<br>\n--&gt; 196           value, dtype=dtype, shape=shape, verify_shape=verify_shape))<br>\n197   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)<br>\n198   const_tensor = g.create_op(</p>\n<p>/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)<br>\n523       raise TypeError(\"Failed to convert object of type %s to Tensor. \"<br>\n524                       \"Contents: %s. Consider casting elements to a \"<br>\n--&gt; 525                       \"supported type.\" % (type(values), values))<br>\n526     tensor_proto.string_val.extend(str_values)<br>\n527     return tensor_proto</p>\n<p>TypeError: Failed to convert object of type &lt;class 'tuple'&gt; to Tensor. Contents: (5, Dimension(10)). Consider casting elements to a supported type.</p>", "body_text": "There is another undesirable behavior in the case of the static graph for the newest version 1.9.\nI was compelled to use the attribute \"value\" for the \"input_shape\" argument otherwise it would produce an error.\nCode: without using the \"value\" attribute\nclass ClusteringLayer(Layer):\n    def __init__(self, output_dim, input_dim=None, alpha=1.0, **kwargs):\n        self.output_dim = output_dim\n        self.input_dim = input_dim\n        self.alpha = alpha\n        super(ClusteringLayer, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        self.W = self.add_weight(name='kernel', shape=(self.output_dim, input_shape[1]), initializer='Identity', trainable=True)\n        super(ClusteringLayer, self).build(input_shape)\n    \n    def call(self, x, mask=None):\n        q0 = 1.0/(1.0 + K.sqrt(K.sum(K.square(K.expand_dims(x, 1) - self.W), axis=2))**2 / self.alpha)\n        q1 = q0**((self.alpha+1.0)/2.0)\n        q2 = K.transpose(K.transpose(q1)/K.sum(q1, axis=1))\n        return q2\n\n    def compute_output_shape(self, input_shape):\n        return (input_shape[0], self.output_dim)\n\nError:\nTypeError                                 Traceback (most recent call last)\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)\n520     try:\n--> 521       str_values = [compat.as_bytes(x) for x in proto_values]\n522     except TypeError:\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/tensor_util.py in (.0)\n520     try:\n--> 521       str_values = [compat.as_bytes(x) for x in proto_values]\n522     except TypeError:\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/util/compat.py in as_bytes(bytes_or_text, encoding)\n60     raise TypeError('Expected binary or unicode string, got %r' %\n---> 61                     (bytes_or_text,))\n62\nTypeError: Expected binary or unicode string, got 5\nDuring handling of the above exception, another exception occurred:\nTypeError                                 Traceback (most recent call last)\n in ()\n48 input1 = Input(shape=(10,), name=\"input\")\n49 print(input1)\n---> 50 out = ClusteringLayer(output_dim=5, name='clustering')(input1)\n51\n52 np.random.seed(0)\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in call(self, inputs, *args, **kwargs)\n694         if all(hasattr(x, 'get_shape') for x in input_list):\n695           input_shapes = nest.map_structure(lambda x: x.get_shape(), inputs)\n--> 696         self.build(input_shapes)\n697\n698       # Check input assumptions set after layer building, e.g. input shape.\n in build(self, input_shape)\n7\n8     def build(self, input_shape):\n----> 9         self.W = self.add_weight(name='kernel', shape=(self.output_dim, input_shape[1]), initializer='uniform', trainable=True)\n10         super(ClusteringLayer, self).build(input_shape)\n11\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in add_weight(self, name, shape, dtype, initializer, regularizer, trainable, constraint, partitioner, use_resource, getter)\n532         trainable=trainable and self.trainable,\n533         partitioner=partitioner,\n--> 534         use_resource=use_resource)\n535\n536     if regularizer is not None:\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/checkpointable/base.py in _add_variable_with_custom_getter(self, name, shape, dtype, initializer, getter, overwrite, **kwargs_for_getter)\n495     new_variable = getter(\n496         name=name, shape=shape, dtype=dtype, initializer=initializer,\n--> 497         **kwargs_for_getter)\n498\n499     # If we set an initializer and the variable processed it, tracking will not\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in make_variable(name, shape, dtype, initializer, partition_info, trainable, caching_device, validate_shape, constraint, use_resource, partitioner)\n1871       validate_shape=validate_shape,\n1872       constraint=constraint,\n-> 1873       use_resource=use_resource)\n1874   return v\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py in variable(initial_value, trainable, collections, validate_shape, caching_device, name, dtype, constraint, use_resource)\n2232                          name=name, dtype=dtype,\n2233                          constraint=constraint,\n-> 2234                          use_resource=use_resource)\n2235\n2236\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py in (**kwargs)\n2222              constraint=None,\n2223              use_resource=None):\n-> 2224   previous_getter = lambda **kwargs: default_variable_creator(None, **kwargs)\n2225   for getter in ops.get_default_graph()._variable_creator_stack:  # pylint: disable=protected-access\n2226     previous_getter = _make_getter(getter, previous_getter)\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py in default_variable_creator(next_creator, **kwargs)\n2194         collections=collections, validate_shape=validate_shape,\n2195         caching_device=caching_device, name=name, dtype=dtype,\n-> 2196         constraint=constraint)\n2197   elif not use_resource and context.executing_eagerly():\n2198     raise RuntimeError(\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py in init(self, initial_value, trainable, collections, validate_shape, caching_device, name, dtype, variable_def, import_scope, constraint)\n310           name=name,\n311           dtype=dtype,\n--> 312           constraint=constraint)\n313\n314   # pylint: disable=unused-argument\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py in _init_from_args(self, initial_value, trainable, collections, validate_shape, caching_device, name, dtype, constraint)\n415               with ops.name_scope(\"Initializer\"), ops.device(None):\n416                 initial_value = ops.convert_to_tensor(\n--> 417                     initial_value(), name=\"initial_value\", dtype=dtype)\n418               self._handle = _eager_safe_variable_handle(\n419                   shape=initial_value.get_shape(),\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in ()\n1858         initializer = initializer(dtype=dtype)\n1859       init_val = lambda: initializer(  # pylint: disable=g-long-lambda\n-> 1860           shape, dtype=dtype, partition_info=partition_info)\n1861       variable_dtype = dtype.base_dtype\n1862   if use_resource is None:\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py in call(self, shape, dtype, partition_info)\n253       dtype = self.dtype\n254     return random_ops.random_uniform(\n--> 255         shape, self.minval, self.maxval, dtype, seed=self.seed)\n256\n257   def get_config(self):\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/random_ops.py in random_uniform(shape, minval, maxval, dtype, seed, name)\n232     maxval = 1\n233   with ops.name_scope(name, \"random_uniform\", [shape, minval, maxval]) as name:\n--> 234     shape = _ShapeTensor(shape)\n235     minval = ops.convert_to_tensor(minval, dtype=dtype, name=\"min\")\n236     maxval = ops.convert_to_tensor(maxval, dtype=dtype, name=\"max\")\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/random_ops.py in _ShapeTensor(shape)\n41   else:\n42     dtype = None\n---> 43   return ops.convert_to_tensor(shape, dtype=dtype, name=\"shape\")\n44\n45\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in convert_to_tensor(value, dtype, name, preferred_dtype)\n1009       name=name,\n1010       preferred_dtype=preferred_dtype,\n-> 1011       as_ref=False)\n1012\n1013\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx)\n1105\n1106     if ret is None:\n-> 1107       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n1108\n1109     if ret is NotImplemented:\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)\n215                                          as_ref=False):\n216   _ = as_ref\n--> 217   return constant(v, dtype=dtype, name=name)\n218\n219\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)\n194   tensor_value.tensor.CopyFrom(\n195       tensor_util.make_tensor_proto(\n--> 196           value, dtype=dtype, shape=shape, verify_shape=verify_shape))\n197   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)\n198   const_tensor = g.create_op(\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)\n523       raise TypeError(\"Failed to convert object of type %s to Tensor. \"\n524                       \"Contents: %s. Consider casting elements to a \"\n--> 525                       \"supported type.\" % (type(values), values))\n526     tensor_proto.string_val.extend(str_values)\n527     return tensor_proto\nTypeError: Failed to convert object of type <class 'tuple'> to Tensor. Contents: (5, Dimension(10)). Consider casting elements to a supported type.", "body": "There is another undesirable behavior in the case of the static graph for the newest version 1.9. \r\nI was compelled to use the attribute \"value\" for the \"input_shape\" argument otherwise it would produce an error. \r\n\r\n### Code: without using the \"value\" attribute\r\n\r\n    class ClusteringLayer(Layer):\r\n        def __init__(self, output_dim, input_dim=None, alpha=1.0, **kwargs):\r\n            self.output_dim = output_dim\r\n            self.input_dim = input_dim\r\n            self.alpha = alpha\r\n            super(ClusteringLayer, self).__init__(**kwargs)\r\n\r\n        def build(self, input_shape):\r\n            self.W = self.add_weight(name='kernel', shape=(self.output_dim, input_shape[1]), initializer='Identity', trainable=True)\r\n            super(ClusteringLayer, self).build(input_shape)\r\n        \r\n        def call(self, x, mask=None):\r\n            q0 = 1.0/(1.0 + K.sqrt(K.sum(K.square(K.expand_dims(x, 1) - self.W), axis=2))**2 / self.alpha)\r\n            q1 = q0**((self.alpha+1.0)/2.0)\r\n            q2 = K.transpose(K.transpose(q1)/K.sum(q1, axis=1))\r\n            return q2\r\n    \r\n        def compute_output_shape(self, input_shape):\r\n            return (input_shape[0], self.output_dim)\r\n\r\n### Error:\r\nTypeError                                 Traceback (most recent call last)\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)\r\n    520     try:\r\n--> 521       str_values = [compat.as_bytes(x) for x in proto_values]\r\n    522     except TypeError:\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/tensor_util.py in <listcomp>(.0)\r\n    520     try:\r\n--> 521       str_values = [compat.as_bytes(x) for x in proto_values]\r\n    522     except TypeError:\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/util/compat.py in as_bytes(bytes_or_text, encoding)\r\n     60     raise TypeError('Expected binary or unicode string, got %r' %\r\n---> 61                     (bytes_or_text,))\r\n     62 \r\n\r\nTypeError: Expected binary or unicode string, got 5\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-4-5188e04a18fe> in <module>()\r\n     48 input1 = Input(shape=(10,), name=\"input\")\r\n     49 print(input1)\r\n---> 50 out = ClusteringLayer(output_dim=5, name='clustering')(input1)\r\n     51 \r\n     52 np.random.seed(0)\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs)\r\n    694         if all(hasattr(x, 'get_shape') for x in input_list):\r\n    695           input_shapes = nest.map_structure(lambda x: x.get_shape(), inputs)\r\n--> 696         self.build(input_shapes)\r\n    697 \r\n    698       # Check input assumptions set after layer building, e.g. input shape.\r\n\r\n<ipython-input-4-5188e04a18fe> in build(self, input_shape)\r\n      7 \r\n      8     def build(self, input_shape):\r\n----> 9         self.W = self.add_weight(name='kernel', shape=(self.output_dim, input_shape[1]), initializer='uniform', trainable=True)\r\n     10         super(ClusteringLayer, self).build(input_shape)\r\n     11 \r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in add_weight(self, name, shape, dtype, initializer, regularizer, trainable, constraint, partitioner, use_resource, getter)\r\n    532         trainable=trainable and self.trainable,\r\n    533         partitioner=partitioner,\r\n--> 534         use_resource=use_resource)\r\n    535 \r\n    536     if regularizer is not None:\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/checkpointable/base.py in _add_variable_with_custom_getter(self, name, shape, dtype, initializer, getter, overwrite, **kwargs_for_getter)\r\n    495     new_variable = getter(\r\n    496         name=name, shape=shape, dtype=dtype, initializer=initializer,\r\n--> 497         **kwargs_for_getter)\r\n    498 \r\n    499     # If we set an initializer and the variable processed it, tracking will not\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in make_variable(name, shape, dtype, initializer, partition_info, trainable, caching_device, validate_shape, constraint, use_resource, partitioner)\r\n   1871       validate_shape=validate_shape,\r\n   1872       constraint=constraint,\r\n-> 1873       use_resource=use_resource)\r\n   1874   return v\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py in variable(initial_value, trainable, collections, validate_shape, caching_device, name, dtype, constraint, use_resource)\r\n   2232                          name=name, dtype=dtype,\r\n   2233                          constraint=constraint,\r\n-> 2234                          use_resource=use_resource)\r\n   2235 \r\n   2236 \r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py in <lambda>(**kwargs)\r\n   2222              constraint=None,\r\n   2223              use_resource=None):\r\n-> 2224   previous_getter = lambda **kwargs: default_variable_creator(None, **kwargs)\r\n   2225   for getter in ops.get_default_graph()._variable_creator_stack:  # pylint: disable=protected-access\r\n   2226     previous_getter = _make_getter(getter, previous_getter)\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py in default_variable_creator(next_creator, **kwargs)\r\n   2194         collections=collections, validate_shape=validate_shape,\r\n   2195         caching_device=caching_device, name=name, dtype=dtype,\r\n-> 2196         constraint=constraint)\r\n   2197   elif not use_resource and context.executing_eagerly():\r\n   2198     raise RuntimeError(\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py in __init__(self, initial_value, trainable, collections, validate_shape, caching_device, name, dtype, variable_def, import_scope, constraint)\r\n    310           name=name,\r\n    311           dtype=dtype,\r\n--> 312           constraint=constraint)\r\n    313 \r\n    314   # pylint: disable=unused-argument\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py in _init_from_args(self, initial_value, trainable, collections, validate_shape, caching_device, name, dtype, constraint)\r\n    415               with ops.name_scope(\"Initializer\"), ops.device(None):\r\n    416                 initial_value = ops.convert_to_tensor(\r\n--> 417                     initial_value(), name=\"initial_value\", dtype=dtype)\r\n    418               self._handle = _eager_safe_variable_handle(\r\n    419                   shape=initial_value.get_shape(),\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in <lambda>()\r\n   1858         initializer = initializer(dtype=dtype)\r\n   1859       init_val = lambda: initializer(  # pylint: disable=g-long-lambda\r\n-> 1860           shape, dtype=dtype, partition_info=partition_info)\r\n   1861       variable_dtype = dtype.base_dtype\r\n   1862   if use_resource is None:\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py in __call__(self, shape, dtype, partition_info)\r\n    253       dtype = self.dtype\r\n    254     return random_ops.random_uniform(\r\n--> 255         shape, self.minval, self.maxval, dtype, seed=self.seed)\r\n    256 \r\n    257   def get_config(self):\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/random_ops.py in random_uniform(shape, minval, maxval, dtype, seed, name)\r\n    232     maxval = 1\r\n    233   with ops.name_scope(name, \"random_uniform\", [shape, minval, maxval]) as name:\r\n--> 234     shape = _ShapeTensor(shape)\r\n    235     minval = ops.convert_to_tensor(minval, dtype=dtype, name=\"min\")\r\n    236     maxval = ops.convert_to_tensor(maxval, dtype=dtype, name=\"max\")\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/random_ops.py in _ShapeTensor(shape)\r\n     41   else:\r\n     42     dtype = None\r\n---> 43   return ops.convert_to_tensor(shape, dtype=dtype, name=\"shape\")\r\n     44 \r\n     45 \r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in convert_to_tensor(value, dtype, name, preferred_dtype)\r\n   1009       name=name,\r\n   1010       preferred_dtype=preferred_dtype,\r\n-> 1011       as_ref=False)\r\n   1012 \r\n   1013 \r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx)\r\n   1105 \r\n   1106     if ret is None:\r\n-> 1107       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\r\n   1108 \r\n   1109     if ret is NotImplemented:\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py in _constant_tensor_conversion_function(v, dtype, name, as_ref)\r\n    215                                          as_ref=False):\r\n    216   _ = as_ref\r\n--> 217   return constant(v, dtype=dtype, name=name)\r\n    218 \r\n    219 \r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/constant_op.py in constant(value, dtype, shape, name, verify_shape)\r\n    194   tensor_value.tensor.CopyFrom(\r\n    195       tensor_util.make_tensor_proto(\r\n--> 196           value, dtype=dtype, shape=shape, verify_shape=verify_shape))\r\n    197   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)\r\n    198   const_tensor = g.create_op(\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/tensor_util.py in make_tensor_proto(values, dtype, shape, verify_shape)\r\n    523       raise TypeError(\"Failed to convert object of type %s to Tensor. \"\r\n    524                       \"Contents: %s. Consider casting elements to a \"\r\n--> 525                       \"supported type.\" % (type(values), values))\r\n    526     tensor_proto.string_val.extend(str_values)\r\n    527     return tensor_proto\r\n\r\nTypeError: Failed to convert object of type <class 'tuple'> to Tensor. Contents: (5, Dimension(10)). Consider casting elements to a supported type."}