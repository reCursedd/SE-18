{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/288252544", "html_url": "https://github.com/tensorflow/tensorflow/issues/8547#issuecomment-288252544", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8547", "id": 288252544, "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODI1MjU0NA==", "user": {"login": "kayhan-batmanghelich", "id": 12301533, "node_id": "MDQ6VXNlcjEyMzAxNTMz", "avatar_url": "https://avatars2.githubusercontent.com/u/12301533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kayhan-batmanghelich", "html_url": "https://github.com/kayhan-batmanghelich", "followers_url": "https://api.github.com/users/kayhan-batmanghelich/followers", "following_url": "https://api.github.com/users/kayhan-batmanghelich/following{/other_user}", "gists_url": "https://api.github.com/users/kayhan-batmanghelich/gists{/gist_id}", "starred_url": "https://api.github.com/users/kayhan-batmanghelich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kayhan-batmanghelich/subscriptions", "organizations_url": "https://api.github.com/users/kayhan-batmanghelich/orgs", "repos_url": "https://api.github.com/users/kayhan-batmanghelich/repos", "events_url": "https://api.github.com/users/kayhan-batmanghelich/events{/privacy}", "received_events_url": "https://api.github.com/users/kayhan-batmanghelich/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-21T23:34:18Z", "updated_at": "2017-03-21T23:34:18Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> I was wrong. It is computed correctly. Here is a simpler example showing that is computed correctly:</p>\n<pre><code>import tensorflow as tf\nimport matplotlib as plt\nimport numpy as np\nimport math\n\ndim = 3\ntrueA     = np.array([[1,2,3],\n                     [4,5,6],\n                     [7,8,9]])\n\ntrueHess = 0.5*trueA + 0.5*trueA.T\n\ntrueb = np.random.rand(3,1)\n\nprint \"True Hess : \", trueHess\n\n\n# define variables\nA = tf.placeholder(tf.float32, shape=[dim, dim])\nb = tf.placeholder(tf.float32, shape=[dim, 1])\nc = tf.placeholder(tf.float32, shape=[1])\nx = tf.Variable(np.float32(np.repeat(1,dim).reshape(dim,1)))\n\n# define function: 0.5 x^T A x + b^T x + c\nfx = 0.5 * tf.matmul(tf.matmul(tf.transpose(x), A), x) + tf.matmul(tf.transpose(b), x) + c\n\n# Get gradients of fx with repect to x\ndf_dx = tf.gradients(fx, x)[0]\n\n# get the second gradient of the first entry with respect to x\ndf_dx1 = tf.slice(df_dx, begin=[0,0] , size=[1,1])\nddfx_ddx1 = tf.gradients(df_dx1, x)[0]\n\n\n#------------------------\n# print the results\ninit_op = tf.initialize_all_variables()\nwith tf.Session() as sess:\n    sess.run(init_op)\n    # We need to feed actual values into the computational graph that we created above. \n    feed_dict = {A: trueA, \n                 b: trueb , \n                 c: [1]}\n    # sess.run() executes the graph. Here, \"hess\" will be calculated with the values in \"feed_dict\".\n    print(sess.run(ddfx_ddx1, feed_dict))\n\n\n</code></pre>\n<p>Please close this issue.</p>", "body_text": "@yaroslavvb I was wrong. It is computed correctly. Here is a simpler example showing that is computed correctly:\nimport tensorflow as tf\nimport matplotlib as plt\nimport numpy as np\nimport math\n\ndim = 3\ntrueA     = np.array([[1,2,3],\n                     [4,5,6],\n                     [7,8,9]])\n\ntrueHess = 0.5*trueA + 0.5*trueA.T\n\ntrueb = np.random.rand(3,1)\n\nprint \"True Hess : \", trueHess\n\n\n# define variables\nA = tf.placeholder(tf.float32, shape=[dim, dim])\nb = tf.placeholder(tf.float32, shape=[dim, 1])\nc = tf.placeholder(tf.float32, shape=[1])\nx = tf.Variable(np.float32(np.repeat(1,dim).reshape(dim,1)))\n\n# define function: 0.5 x^T A x + b^T x + c\nfx = 0.5 * tf.matmul(tf.matmul(tf.transpose(x), A), x) + tf.matmul(tf.transpose(b), x) + c\n\n# Get gradients of fx with repect to x\ndf_dx = tf.gradients(fx, x)[0]\n\n# get the second gradient of the first entry with respect to x\ndf_dx1 = tf.slice(df_dx, begin=[0,0] , size=[1,1])\nddfx_ddx1 = tf.gradients(df_dx1, x)[0]\n\n\n#------------------------\n# print the results\ninit_op = tf.initialize_all_variables()\nwith tf.Session() as sess:\n    sess.run(init_op)\n    # We need to feed actual values into the computational graph that we created above. \n    feed_dict = {A: trueA, \n                 b: trueb , \n                 c: [1]}\n    # sess.run() executes the graph. Here, \"hess\" will be calculated with the values in \"feed_dict\".\n    print(sess.run(ddfx_ddx1, feed_dict))\n\n\n\nPlease close this issue.", "body": "@yaroslavvb I was wrong. It is computed correctly. Here is a simpler example showing that is computed correctly:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport matplotlib as plt\r\nimport numpy as np\r\nimport math\r\n\r\ndim = 3\r\ntrueA     = np.array([[1,2,3],\r\n                     [4,5,6],\r\n                     [7,8,9]])\r\n\r\ntrueHess = 0.5*trueA + 0.5*trueA.T\r\n\r\ntrueb = np.random.rand(3,1)\r\n\r\nprint \"True Hess : \", trueHess\r\n\r\n\r\n# define variables\r\nA = tf.placeholder(tf.float32, shape=[dim, dim])\r\nb = tf.placeholder(tf.float32, shape=[dim, 1])\r\nc = tf.placeholder(tf.float32, shape=[1])\r\nx = tf.Variable(np.float32(np.repeat(1,dim).reshape(dim,1)))\r\n\r\n# define function: 0.5 x^T A x + b^T x + c\r\nfx = 0.5 * tf.matmul(tf.matmul(tf.transpose(x), A), x) + tf.matmul(tf.transpose(b), x) + c\r\n\r\n# Get gradients of fx with repect to x\r\ndf_dx = tf.gradients(fx, x)[0]\r\n\r\n# get the second gradient of the first entry with respect to x\r\ndf_dx1 = tf.slice(df_dx, begin=[0,0] , size=[1,1])\r\nddfx_ddx1 = tf.gradients(df_dx1, x)[0]\r\n\r\n\r\n#------------------------\r\n# print the results\r\ninit_op = tf.initialize_all_variables()\r\nwith tf.Session() as sess:\r\n    sess.run(init_op)\r\n    # We need to feed actual values into the computational graph that we created above. \r\n    feed_dict = {A: trueA, \r\n                 b: trueb , \r\n                 c: [1]}\r\n    # sess.run() executes the graph. Here, \"hess\" will be calculated with the values in \"feed_dict\".\r\n    print(sess.run(ddfx_ddx1, feed_dict))\r\n\r\n\r\n```\r\n\r\nPlease close this issue."}