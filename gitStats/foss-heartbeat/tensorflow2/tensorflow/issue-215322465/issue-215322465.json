{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8547", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8547/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8547/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8547/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8547", "id": 215322465, "node_id": "MDU6SXNzdWUyMTUzMjI0NjU=", "number": 8547, "title": "Incorrect hessian of a quadratic function", "user": {"login": "kayhan-batmanghelich", "id": 12301533, "node_id": "MDQ6VXNlcjEyMzAxNTMz", "avatar_url": "https://avatars2.githubusercontent.com/u/12301533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kayhan-batmanghelich", "html_url": "https://github.com/kayhan-batmanghelich", "followers_url": "https://api.github.com/users/kayhan-batmanghelich/followers", "following_url": "https://api.github.com/users/kayhan-batmanghelich/following{/other_user}", "gists_url": "https://api.github.com/users/kayhan-batmanghelich/gists{/gist_id}", "starred_url": "https://api.github.com/users/kayhan-batmanghelich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kayhan-batmanghelich/subscriptions", "organizations_url": "https://api.github.com/users/kayhan-batmanghelich/orgs", "repos_url": "https://api.github.com/users/kayhan-batmanghelich/repos", "events_url": "https://api.github.com/users/kayhan-batmanghelich/events{/privacy}", "received_events_url": "https://api.github.com/users/kayhan-batmanghelich/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-03-20T03:21:12Z", "updated_at": "2017-03-22T23:43:53Z", "closed_at": "2017-03-22T23:43:53Z", "author_association": "NONE", "body_html": "<p>NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.</p>\n<p>For general support from the community, see <a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">StackOverflow</a>.<br>\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed<br>\nout of scope for GitHub Issues and point people to StackOverflow.</p>\n<p>For bugs or installation issues, please provide the following information.<br>\nThe more information you provide, the more easily we will be able to offer<br>\nhelp and advice.</p>\n<h3>What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?</h3>\n<p><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"191838650\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/5876\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/5876/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/5876\">#5876</a><br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"206687143\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/7403\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/7403/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/7403\">#7403</a></p>\n<h3>Environment info</h3>\n<p>Operating System:<br>\nmac 10.12.3</p>\n<p>Installed version of CUDA and cuDNN:<br>\n(please attach the output of <code>ls -l /path/to/cuda/lib/libcud*</code>):<br>\nNo, it is a CPU version.</p>\n<p>If installed from binary pip package, provide:</p>\n<ol>\n<li>A link to the pip package you installed:</li>\n<li>The output from <code>python -c \"import tensorflow; print(tensorflow.__version__)\"</code>.</li>\n</ol>\n<pre><code> python -c \"import tensorflow; print(tensorflow.__version__)\"\n1.0.1\n</code></pre>\n<p>If installed from source, provide</p>\n<ol>\n<li>The commit hash (<code>git rev-parse HEAD</code>)</li>\n<li>The output of <code>bazel version</code></li>\n</ol>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<p>Hi,</p>\n<p>I am testing hessian computation:</p>\n<pre><code>import tensorflow as tf\nimport matplotlib as plt\nimport numpy as np\nimport math\n</code></pre>\n<pre><code>def getHessian(dim):\n    g = tf.Graph()\n    with g.as_default():\n        # First create placeholders for inputs: A, b, and c.\n        A = tf.placeholder(tf.float32, shape=[dim, dim])\n        b = tf.placeholder(tf.float32, shape=[dim, 1])\n        c = tf.placeholder(tf.float32, shape=[1])\n        # Define our variable\n        x = tf.Variable(np.float32(np.repeat(1,dim).reshape(dim,1)))\n        # Construct the computational graph for quadratic function: f(x) = 1/2 * x^t A x + b^t x + c\n        fx = 0.5 * tf.matmul(tf.matmul(tf.transpose(x), A), x) + tf.matmul(tf.transpose(b), x) + c\n        \n        # Get gradients of fx with repect to x\n        dfx = tf.gradients(fx, x)[0]\n        # Compute hessian\n        for i in range(dim):\n            dfx_i = tf.slice(dfx, begin=[i,0] , size=[1,1])\n            ddfx_i = tf.gradients(dfx_i, x)[0] # whenever we use tf.gradients, make sure you get the actual tensors by putting [0] at the end\n            if i == 0: hess = [ ddfx_i ]\n            else: hess.append(ddfx_i) \n\n        hess = tf.stack(hess,axis=0)\n        hess = tf.squeeze(hess)\n        init_op = tf.initialize_all_variables()\n    \n        with tf.Session() as sess:\n            sess.run(init_op)\n            # We need to feed actual values into the computational graph that we created above. \n            feed_dict = {A: np.float32(np.vstack([[1,2,3],[4,5,6],[7,8,9]])), \n                         b: np.float32(np.repeat(3,dim).reshape(dim,1)) , c: [1]}\n            # sess.run() executes the graph. Here, \"hess\" will be calculated with the values in \"feed_dict\".\n            print(sess.run(hess, feed_dict))\n\n\n</code></pre>\n<pre><code>getHessian(3)\n</code></pre>\n<pre><code>WARNING:tensorflow:From &lt;ipython-input-2-ed7e9735185e&gt;:31: initialize_all_variables (from tensorflow.python.ops.variables) is deprecated and will be removed after 2017-03-02.\nInstructions for updating:\nUse `tf.global_variables_initializer` instead.\n[[ 1.  3.  5.]\n [ 3.  5.  7.]\n [ 5.  7.  9.]]\n</code></pre>\n<p>This is obviously wrong.</p>\n<h3>What other attempted solutions have you tried?</h3>\n<p>I tried <code>np.float64</code>, it didn't help.</p>\n<h3>Logs or other output that would be helpful</h3>\n<p>(If logs are large, please upload as attachment or provide link).</p>", "body_text": "NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.\nFor general support from the community, see StackOverflow.\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed\nout of scope for GitHub Issues and point people to StackOverflow.\nFor bugs or installation issues, please provide the following information.\nThe more information you provide, the more easily we will be able to offer\nhelp and advice.\nWhat related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\n#5876\n#7403\nEnvironment info\nOperating System:\nmac 10.12.3\nInstalled version of CUDA and cuDNN:\n(please attach the output of ls -l /path/to/cuda/lib/libcud*):\nNo, it is a CPU version.\nIf installed from binary pip package, provide:\n\nA link to the pip package you installed:\nThe output from python -c \"import tensorflow; print(tensorflow.__version__)\".\n\n python -c \"import tensorflow; print(tensorflow.__version__)\"\n1.0.1\n\nIf installed from source, provide\n\nThe commit hash (git rev-parse HEAD)\nThe output of bazel version\n\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nHi,\nI am testing hessian computation:\nimport tensorflow as tf\nimport matplotlib as plt\nimport numpy as np\nimport math\n\ndef getHessian(dim):\n    g = tf.Graph()\n    with g.as_default():\n        # First create placeholders for inputs: A, b, and c.\n        A = tf.placeholder(tf.float32, shape=[dim, dim])\n        b = tf.placeholder(tf.float32, shape=[dim, 1])\n        c = tf.placeholder(tf.float32, shape=[1])\n        # Define our variable\n        x = tf.Variable(np.float32(np.repeat(1,dim).reshape(dim,1)))\n        # Construct the computational graph for quadratic function: f(x) = 1/2 * x^t A x + b^t x + c\n        fx = 0.5 * tf.matmul(tf.matmul(tf.transpose(x), A), x) + tf.matmul(tf.transpose(b), x) + c\n        \n        # Get gradients of fx with repect to x\n        dfx = tf.gradients(fx, x)[0]\n        # Compute hessian\n        for i in range(dim):\n            dfx_i = tf.slice(dfx, begin=[i,0] , size=[1,1])\n            ddfx_i = tf.gradients(dfx_i, x)[0] # whenever we use tf.gradients, make sure you get the actual tensors by putting [0] at the end\n            if i == 0: hess = [ ddfx_i ]\n            else: hess.append(ddfx_i) \n\n        hess = tf.stack(hess,axis=0)\n        hess = tf.squeeze(hess)\n        init_op = tf.initialize_all_variables()\n    \n        with tf.Session() as sess:\n            sess.run(init_op)\n            # We need to feed actual values into the computational graph that we created above. \n            feed_dict = {A: np.float32(np.vstack([[1,2,3],[4,5,6],[7,8,9]])), \n                         b: np.float32(np.repeat(3,dim).reshape(dim,1)) , c: [1]}\n            # sess.run() executes the graph. Here, \"hess\" will be calculated with the values in \"feed_dict\".\n            print(sess.run(hess, feed_dict))\n\n\n\ngetHessian(3)\n\nWARNING:tensorflow:From <ipython-input-2-ed7e9735185e>:31: initialize_all_variables (from tensorflow.python.ops.variables) is deprecated and will be removed after 2017-03-02.\nInstructions for updating:\nUse `tf.global_variables_initializer` instead.\n[[ 1.  3.  5.]\n [ 3.  5.  7.]\n [ 5.  7.  9.]]\n\nThis is obviously wrong.\nWhat other attempted solutions have you tried?\nI tried np.float64, it didn't help.\nLogs or other output that would be helpful\n(If logs are large, please upload as attachment or provide link).", "body": "NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.\r\n\r\nFor general support from the community, see [StackOverflow](https://stackoverflow.com/questions/tagged/tensorflow).\r\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed\r\nout of scope for GitHub Issues and point people to StackOverflow.\r\n\r\nFor bugs or installation issues, please provide the following information.\r\nThe more information you provide, the more easily we will be able to offer\r\nhelp and advice.\r\n\r\n### What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\r\n\r\nhttps://github.com/tensorflow/tensorflow/issues/5876\r\nhttps://github.com/tensorflow/tensorflow/issues/7403\r\n\r\n### Environment info\r\nOperating System:\r\nmac 10.12.3\r\n\r\nInstalled version of CUDA and cuDNN: \r\n(please attach the output of `ls -l /path/to/cuda/lib/libcud*`):\r\nNo, it is a CPU version.\r\n\r\nIf installed from binary pip package, provide:\r\n\r\n1. A link to the pip package you installed:\r\n2. The output from `python -c \"import tensorflow; print(tensorflow.__version__)\"`.\r\n```\r\n python -c \"import tensorflow; print(tensorflow.__version__)\"\r\n1.0.1\r\n```\r\n\r\nIf installed from source, provide \r\n\r\n1. The commit hash (`git rev-parse HEAD`)\r\n2. The output of `bazel version`\r\n\r\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\r\n\r\nHi,\r\n\r\nI am testing hessian computation:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport matplotlib as plt\r\nimport numpy as np\r\nimport math\r\n```\r\n\r\n```\r\ndef getHessian(dim):\r\n    g = tf.Graph()\r\n    with g.as_default():\r\n        # First create placeholders for inputs: A, b, and c.\r\n        A = tf.placeholder(tf.float32, shape=[dim, dim])\r\n        b = tf.placeholder(tf.float32, shape=[dim, 1])\r\n        c = tf.placeholder(tf.float32, shape=[1])\r\n        # Define our variable\r\n        x = tf.Variable(np.float32(np.repeat(1,dim).reshape(dim,1)))\r\n        # Construct the computational graph for quadratic function: f(x) = 1/2 * x^t A x + b^t x + c\r\n        fx = 0.5 * tf.matmul(tf.matmul(tf.transpose(x), A), x) + tf.matmul(tf.transpose(b), x) + c\r\n        \r\n        # Get gradients of fx with repect to x\r\n        dfx = tf.gradients(fx, x)[0]\r\n        # Compute hessian\r\n        for i in range(dim):\r\n            dfx_i = tf.slice(dfx, begin=[i,0] , size=[1,1])\r\n            ddfx_i = tf.gradients(dfx_i, x)[0] # whenever we use tf.gradients, make sure you get the actual tensors by putting [0] at the end\r\n            if i == 0: hess = [ ddfx_i ]\r\n            else: hess.append(ddfx_i) \r\n\r\n        hess = tf.stack(hess,axis=0)\r\n        hess = tf.squeeze(hess)\r\n        init_op = tf.initialize_all_variables()\r\n    \r\n        with tf.Session() as sess:\r\n            sess.run(init_op)\r\n            # We need to feed actual values into the computational graph that we created above. \r\n            feed_dict = {A: np.float32(np.vstack([[1,2,3],[4,5,6],[7,8,9]])), \r\n                         b: np.float32(np.repeat(3,dim).reshape(dim,1)) , c: [1]}\r\n            # sess.run() executes the graph. Here, \"hess\" will be calculated with the values in \"feed_dict\".\r\n            print(sess.run(hess, feed_dict))\r\n\r\n\r\n```\r\n\r\n```\r\ngetHessian(3)\r\n```\r\n\r\n```\r\nWARNING:tensorflow:From <ipython-input-2-ed7e9735185e>:31: initialize_all_variables (from tensorflow.python.ops.variables) is deprecated and will be removed after 2017-03-02.\r\nInstructions for updating:\r\nUse `tf.global_variables_initializer` instead.\r\n[[ 1.  3.  5.]\r\n [ 3.  5.  7.]\r\n [ 5.  7.  9.]]\r\n```\r\n\r\nThis is obviously wrong.\r\n\r\n### What other attempted solutions have you tried?\r\nI tried `np.float64`, it didn't help. \r\n\r\n### Logs or other output that would be helpful\r\n(If logs are large, please upload as attachment or provide link).\r\n"}