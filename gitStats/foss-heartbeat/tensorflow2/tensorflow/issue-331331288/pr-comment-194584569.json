{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/194584569", "pull_request_review_id": 127780418, "id": 194584569, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDU4NDU2OQ==", "diff_hunk": "@@ -123,6 +148,67 @@ func (p Output) c() C.TF_Output {\n \n func (p Output) canBeAnInput() {}\n \n+// NumConsumers returns the number of inputs that consume this output.\n+func (p Output) NumConsumers() int {\n+\treturn int(C.TF_OperationOutputNumConsumers(p.c()))\n+}\n+\n+// Consumers returns the inputs that consume this output.\n+func (p Output) Consumers() []OpInput {\n+\tmax := p.NumConsumers()\n+\tconsumers := make([]C.TF_Input, max)\n+\tn := C.TF_OperationOutputConsumers(p.c(), (*C.TF_Input)(unsafe.Pointer(&consumers[0])), C.int(max))\n+\tconsumers = consumers[:int(n)]\n+\n+\tvar inputs []OpInput\n+\tfor _, consumer := range consumers {\n+\t\tinputs = append(inputs, OpInput{\n+\t\t\tIndex: int(consumer.index),\n+\t\t\tOp: &Operation{\n+\t\t\t\tc: consumer.oper,\n+\t\t\t\tg: p.Op.g,\n+\t\t\t},\n+\t\t})\n+\t}\n+\n+\treturn inputs\n+}\n+\n+// OpInput is one of the inputs to an operation.\n+type OpInput struct {\n+\t// Op is the Operation that consumes this Input.\n+\tOp *Operation\n+\n+\t// Index specifies the index of the input within the Operation.\n+\tIndex int\n+}\n+\n+func (p OpInput) c() C.TF_Input {\n+\tif p.Op == nil {\n+\t\t// Attempt to provide a more useful panic message than \"nil\n+\t\t// pointer dereference\".\n+\t\tpanic(\"nil-Operation. If the Output was created with a Scope object, see Scope.Err() for details.\")\n+\t}\n+\treturn C.TF_Input{oper: p.Op.c, index: C.int(p.Index)}\n+}\n+\n+// DataType returns the type of elements in the tensor produced by p.", "path": "tensorflow/go/operation.go", "position": null, "original_position": 80, "commit_id": "8eba32b6c4b259c39097b8b308532b8419d8c151", "original_commit_id": "a9b3a964e1955a8ba2ffd7f2d7496a5615fd4234", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "This comment doesn't seem right, `p` doesn't \"produce\" a tensor.\r\nAlso, it seems that the input datatype here must match the datatype of the `Output` object from which this `OpInput` was obtained, right?\r\n\r\nIf so, would it make sense to not expose this and instead have people rely on the single way to get the appropriate `DataType` - from `Output.DataType()`? Keeping with the theme of keeping the API surface small.\r\n\r\nAgain though, I'm open to keeping this if there is a strong use-case.", "created_at": "2018-06-12T00:18:26Z", "updated_at": "2018-06-12T21:51:01Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/19915#discussion_r194584569", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19915", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/194584569"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/19915#discussion_r194584569"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19915"}}, "body_html": "<p>This comment doesn't seem right, <code>p</code> doesn't \"produce\" a tensor.<br>\nAlso, it seems that the input datatype here must match the datatype of the <code>Output</code> object from which this <code>OpInput</code> was obtained, right?</p>\n<p>If so, would it make sense to not expose this and instead have people rely on the single way to get the appropriate <code>DataType</code> - from <code>Output.DataType()</code>? Keeping with the theme of keeping the API surface small.</p>\n<p>Again though, I'm open to keeping this if there is a strong use-case.</p>", "body_text": "This comment doesn't seem right, p doesn't \"produce\" a tensor.\nAlso, it seems that the input datatype here must match the datatype of the Output object from which this OpInput was obtained, right?\nIf so, would it make sense to not expose this and instead have people rely on the single way to get the appropriate DataType - from Output.DataType()? Keeping with the theme of keeping the API surface small.\nAgain though, I'm open to keeping this if there is a strong use-case."}