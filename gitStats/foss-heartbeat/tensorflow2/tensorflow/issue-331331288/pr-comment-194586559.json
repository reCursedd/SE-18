{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/194586559", "pull_request_review_id": 127786975, "id": 194586559, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDU4NjU1OQ==", "diff_hunk": "@@ -123,6 +148,67 @@ func (p Output) c() C.TF_Output {\n \n func (p Output) canBeAnInput() {}\n \n+// NumConsumers returns the number of inputs that consume this output.\n+func (p Output) NumConsumers() int {\n+\treturn int(C.TF_OperationOutputNumConsumers(p.c()))\n+}\n+\n+// Consumers returns the inputs that consume this output.\n+func (p Output) Consumers() []OpInput {\n+\tmax := p.NumConsumers()\n+\tconsumers := make([]C.TF_Input, max)\n+\tn := C.TF_OperationOutputConsumers(p.c(), (*C.TF_Input)(unsafe.Pointer(&consumers[0])), C.int(max))\n+\tconsumers = consumers[:int(n)]\n+\n+\tvar inputs []OpInput\n+\tfor _, consumer := range consumers {\n+\t\tinputs = append(inputs, OpInput{\n+\t\t\tIndex: int(consumer.index),\n+\t\t\tOp: &Operation{\n+\t\t\t\tc: consumer.oper,\n+\t\t\t\tg: p.Op.g,\n+\t\t\t},\n+\t\t})\n+\t}\n+\n+\treturn inputs\n+}\n+\n+// OpInput is one of the inputs to an operation.\n+type OpInput struct {", "path": "tensorflow/go/operation.go", "position": null, "original_position": 63, "commit_id": "8eba32b6c4b259c39097b8b308532b8419d8c151", "original_commit_id": "a9b3a964e1955a8ba2ffd7f2d7496a5615fd4234", "user": {"login": "d4l3k", "id": 909104, "node_id": "MDQ6VXNlcjkwOTEwNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/909104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d4l3k", "html_url": "https://github.com/d4l3k", "followers_url": "https://api.github.com/users/d4l3k/followers", "following_url": "https://api.github.com/users/d4l3k/following{/other_user}", "gists_url": "https://api.github.com/users/d4l3k/gists{/gist_id}", "starred_url": "https://api.github.com/users/d4l3k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d4l3k/subscriptions", "organizations_url": "https://api.github.com/users/d4l3k/orgs", "repos_url": "https://api.github.com/users/d4l3k/repos", "events_url": "https://api.github.com/users/d4l3k/events{/privacy}", "received_events_url": "https://api.github.com/users/d4l3k/received_events", "type": "User", "site_admin": false}, "body": "I thought about naming it Consumer, but I wanted to keep it close to the C api types. Consumer sort of still has the same problem. `Operation.Input(n)` would return a Consumer which seems equally confusing. The issue is that there's a bidirectional link between inputs and outputs which makes it hard to name them cleanly. Might be better to rename `OpInput.Input` to be `OpInput.Producer`.\r\n\r\nIt's also equally confusing that there's a separate go `Input` type which doesn't match the C definition of Input.", "created_at": "2018-06-12T00:33:59Z", "updated_at": "2018-06-12T21:51:01Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/19915#discussion_r194586559", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19915", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/194586559"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/19915#discussion_r194586559"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19915"}}, "body_html": "<p>I thought about naming it Consumer, but I wanted to keep it close to the C api types. Consumer sort of still has the same problem. <code>Operation.Input(n)</code> would return a Consumer which seems equally confusing. The issue is that there's a bidirectional link between inputs and outputs which makes it hard to name them cleanly. Might be better to rename <code>OpInput.Input</code> to be <code>OpInput.Producer</code>.</p>\n<p>It's also equally confusing that there's a separate go <code>Input</code> type which doesn't match the C definition of Input.</p>", "body_text": "I thought about naming it Consumer, but I wanted to keep it close to the C api types. Consumer sort of still has the same problem. Operation.Input(n) would return a Consumer which seems equally confusing. The issue is that there's a bidirectional link between inputs and outputs which makes it hard to name them cleanly. Might be better to rename OpInput.Input to be OpInput.Producer.\nIt's also equally confusing that there's a separate go Input type which doesn't match the C definition of Input.", "in_reply_to_id": 194583898}