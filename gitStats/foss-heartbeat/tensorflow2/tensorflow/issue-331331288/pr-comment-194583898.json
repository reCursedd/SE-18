{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/194583898", "pull_request_review_id": 127780418, "id": 194583898, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NDU4Mzg5OA==", "diff_hunk": "@@ -123,6 +148,67 @@ func (p Output) c() C.TF_Output {\n \n func (p Output) canBeAnInput() {}\n \n+// NumConsumers returns the number of inputs that consume this output.\n+func (p Output) NumConsumers() int {\n+\treturn int(C.TF_OperationOutputNumConsumers(p.c()))\n+}\n+\n+// Consumers returns the inputs that consume this output.\n+func (p Output) Consumers() []OpInput {\n+\tmax := p.NumConsumers()\n+\tconsumers := make([]C.TF_Input, max)\n+\tn := C.TF_OperationOutputConsumers(p.c(), (*C.TF_Input)(unsafe.Pointer(&consumers[0])), C.int(max))\n+\tconsumers = consumers[:int(n)]\n+\n+\tvar inputs []OpInput\n+\tfor _, consumer := range consumers {\n+\t\tinputs = append(inputs, OpInput{\n+\t\t\tIndex: int(consumer.index),\n+\t\t\tOp: &Operation{\n+\t\t\t\tc: consumer.oper,\n+\t\t\t\tg: p.Op.g,\n+\t\t\t},\n+\t\t})\n+\t}\n+\n+\treturn inputs\n+}\n+\n+// OpInput is one of the inputs to an operation.\n+type OpInput struct {", "path": "tensorflow/go/operation.go", "position": null, "original_position": 63, "commit_id": "8eba32b6c4b259c39097b8b308532b8419d8c151", "original_commit_id": "a9b3a964e1955a8ba2ffd7f2d7496a5615fd4234", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "I feel the naming combinations are getting a bit confusing. We now have three types - `Output`, `Input`, `OpInput`. `Operation.Output` returns an `Output`, `Output.Consumers()` returns an `OpInput`, `OpInput.Input` returns an `Output` etc. :)\r\n\r\nI wonder if we can make this a little less confusing with some naming changes.\r\nFor example, would it make sense to call this type `Consumer` instead of `OpInput`?\r\n\r\nThen we'd have something like:\r\n\r\n```go\r\n// Consumer identifies a node in the graph that consumes an Output.\r\ntype Consumer struct {\r\n  // Op is the Operation that consumes an Output of another Operation.\r\n  Op *Operation\r\n\r\n  // Index identifies which input of Op is connected to the Output of another Operation.\r\n  Index int\r\n}\r\n```\r\n\r\nAnd `Output.Consumers` would return a `[]Consumer`.\r\nThoughts?\r\n", "created_at": "2018-06-12T00:13:17Z", "updated_at": "2018-06-12T21:51:01Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/19915#discussion_r194583898", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19915", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/194583898"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/19915#discussion_r194583898"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19915"}}, "body_html": "<p>I feel the naming combinations are getting a bit confusing. We now have three types - <code>Output</code>, <code>Input</code>, <code>OpInput</code>. <code>Operation.Output</code> returns an <code>Output</code>, <code>Output.Consumers()</code> returns an <code>OpInput</code>, <code>OpInput.Input</code> returns an <code>Output</code> etc. :)</p>\n<p>I wonder if we can make this a little less confusing with some naming changes.<br>\nFor example, would it make sense to call this type <code>Consumer</code> instead of <code>OpInput</code>?</p>\n<p>Then we'd have something like:</p>\n<div class=\"highlight highlight-source-go\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> Consumer identifies a node in the graph that consumes an Output.</span>\n<span class=\"pl-k\">type</span> <span class=\"pl-v\">Consumer</span> <span class=\"pl-k\">struct</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Op is the Operation that consumes an Output of another Operation.</span>\n  <span class=\"pl-v\">Op</span> *Operation\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Index identifies which input of Op is connected to the Output of another Operation.</span>\n  <span class=\"pl-v\">Index</span> <span class=\"pl-k\">int</span>\n}</pre></div>\n<p>And <code>Output.Consumers</code> would return a <code>[]Consumer</code>.<br>\nThoughts?</p>", "body_text": "I feel the naming combinations are getting a bit confusing. We now have three types - Output, Input, OpInput. Operation.Output returns an Output, Output.Consumers() returns an OpInput, OpInput.Input returns an Output etc. :)\nI wonder if we can make this a little less confusing with some naming changes.\nFor example, would it make sense to call this type Consumer instead of OpInput?\nThen we'd have something like:\n// Consumer identifies a node in the graph that consumes an Output.\ntype Consumer struct {\n  // Op is the Operation that consumes an Output of another Operation.\n  Op *Operation\n\n  // Index identifies which input of Op is connected to the Output of another Operation.\n  Index int\n}\nAnd Output.Consumers would return a []Consumer.\nThoughts?"}