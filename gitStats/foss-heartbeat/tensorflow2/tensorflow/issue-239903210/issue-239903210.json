{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11195", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11195/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11195/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11195/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11195", "id": 239903210, "node_id": "MDU6SXNzdWUyMzk5MDMyMTA=", "number": 11195, "title": "No error reported when a wrong argument name is inputted to tf.app.flags", "user": {"login": "wenwei202", "id": 12142066, "node_id": "MDQ6VXNlcjEyMTQyMDY2", "avatar_url": "https://avatars0.githubusercontent.com/u/12142066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wenwei202", "html_url": "https://github.com/wenwei202", "followers_url": "https://api.github.com/users/wenwei202/followers", "following_url": "https://api.github.com/users/wenwei202/following{/other_user}", "gists_url": "https://api.github.com/users/wenwei202/gists{/gist_id}", "starred_url": "https://api.github.com/users/wenwei202/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wenwei202/subscriptions", "organizations_url": "https://api.github.com/users/wenwei202/orgs", "repos_url": "https://api.github.com/users/wenwei202/repos", "events_url": "https://api.github.com/users/wenwei202/events{/privacy}", "received_events_url": "https://api.github.com/users/wenwei202/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-06-30T22:32:39Z", "updated_at": "2017-11-07T19:35:54Z", "closed_at": "2017-11-07T19:35:54Z", "author_association": "NONE", "body_html": "<p>The default behavior of <code>tf.app.flags</code> is: when the user inputs a wrong/undefined argument name, the program just keeps running without throwing out any error about it. For example,</p>\n<pre><code>flags.DEFINE_string(\"weight_path\", None, \"the path of saved model to restore from\")\n</code></pre>\n<p>But when the user inputs</p>\n<pre><code>python your_prog.py --weights_path ${MODEL_PATH}\n</code></pre>\n<p>The program just keeps running with <code>weight_path=None</code> and does not report the wrong argument of <code>weights_path</code> which has a <strong>s</strong> appended.<br>\nShould we change this kind of default behavior? In this case, users may think they input the correct arguments to finetune the model but unfortunately it just trains from scratch.</p>", "body_text": "The default behavior of tf.app.flags is: when the user inputs a wrong/undefined argument name, the program just keeps running without throwing out any error about it. For example,\nflags.DEFINE_string(\"weight_path\", None, \"the path of saved model to restore from\")\n\nBut when the user inputs\npython your_prog.py --weights_path ${MODEL_PATH}\n\nThe program just keeps running with weight_path=None and does not report the wrong argument of weights_path which has a s appended.\nShould we change this kind of default behavior? In this case, users may think they input the correct arguments to finetune the model but unfortunately it just trains from scratch.", "body": "The default behavior of `tf.app.flags` is: when the user inputs a wrong/undefined argument name, the program just keeps running without throwing out any error about it. For example, \r\n```\r\nflags.DEFINE_string(\"weight_path\", None, \"the path of saved model to restore from\")\r\n```\r\nBut when the user inputs \r\n```\r\npython your_prog.py --weights_path ${MODEL_PATH}\r\n```\r\nThe program just keeps running with `weight_path=None` and does not report the wrong argument of `weights_path` which has a **s** appended.\r\nShould we change this kind of default behavior? In this case, users may think they input the correct arguments to finetune the model but unfortunately it just trains from scratch. "}