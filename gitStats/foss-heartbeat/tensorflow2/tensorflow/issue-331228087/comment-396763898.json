{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/396763898", "html_url": "https://github.com/tensorflow/tensorflow/issues/19910#issuecomment-396763898", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19910", "id": 396763898, "node_id": "MDEyOklzc3VlQ29tbWVudDM5Njc2Mzg5OA==", "user": {"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-12T23:15:44Z", "updated_at": "2018-06-12T23:15:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hm. It looks those functions predate the Initializer class; however unifying that API would be nice.<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22060313\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/annarev\">@annarev</a> Can this be done without breaking backwards compatibility guarantees?</p>", "body_text": "Hm. It looks those functions predate the Initializer class; however unifying that API would be nice.\n@annarev Can this be done without breaking backwards compatibility guarantees?", "body": "Hm. It looks those functions predate the Initializer class; however unifying that API would be nice.\r\n@annarev Can this be done without breaking backwards compatibility guarantees?"}