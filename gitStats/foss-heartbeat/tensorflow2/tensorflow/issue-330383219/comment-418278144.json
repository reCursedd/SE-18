{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/418278144", "html_url": "https://github.com/tensorflow/tensorflow/issues/19840#issuecomment-418278144", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19840", "id": 418278144, "node_id": "MDEyOklzc3VlQ29tbWVudDQxODI3ODE0NA==", "user": {"login": "ilya-edrenkin", "id": 13562803, "node_id": "MDQ6VXNlcjEzNTYyODAz", "avatar_url": "https://avatars2.githubusercontent.com/u/13562803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilya-edrenkin", "html_url": "https://github.com/ilya-edrenkin", "followers_url": "https://api.github.com/users/ilya-edrenkin/followers", "following_url": "https://api.github.com/users/ilya-edrenkin/following{/other_user}", "gists_url": "https://api.github.com/users/ilya-edrenkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilya-edrenkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilya-edrenkin/subscriptions", "organizations_url": "https://api.github.com/users/ilya-edrenkin/orgs", "repos_url": "https://api.github.com/users/ilya-edrenkin/repos", "events_url": "https://api.github.com/users/ilya-edrenkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ilya-edrenkin/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-04T08:04:43Z", "updated_at": "2018-09-04T08:04:43Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>I will close the bug, I was able to correctly compile the TF 1.9, now bazel build requires different way of triggering the build in order to find all the required CUDA libraries, on top of this monolithic build almost always shows that build is ok even though some of the libs were not found. Combinations of these 2 things makes it hard to identify the root cause and quickly come up with the solution.</p>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=554101\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/b0noI\">@b0noI</a> : could you please elaborate on that? What is the new different way that bazel now requires?<br>\n(instructions in <a href=\"https://www.tensorflow.org/install/install_sources\" rel=\"nofollow\">https://www.tensorflow.org/install/install_sources</a> seem to be unchanged.)</p>\n<p>We also hit exactly this error with <code>--monolithic</code> builds; we are forced to do this because of problematic libprotobuf behavior when loaded by different shared libraries (like described in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"153226937\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/protocolbuffers/protobuf/issues/1489\" data-hovercard-type=\"issue\" data-hovercard-url=\"/protocolbuffers/protobuf/issues/1489/hovercard?comment_id=217241765&amp;comment_type=issue_comment\" href=\"https://github.com/protocolbuffers/protobuf/issues/1489#issuecomment-217241765\">protocolbuffers/protobuf#1489 (comment)</a>).</p>\n<p>(Perhaps there exists an easier solution which would link only protobuf statically, we haven't really looked carefully yet at the corresponding tf-bazel rules; if someone knows a way to do this off top of their head, I would really appreciate a hint!)</p>", "body_text": "I will close the bug, I was able to correctly compile the TF 1.9, now bazel build requires different way of triggering the build in order to find all the required CUDA libraries, on top of this monolithic build almost always shows that build is ok even though some of the libs were not found. Combinations of these 2 things makes it hard to identify the root cause and quickly come up with the solution.\n\n@b0noI : could you please elaborate on that? What is the new different way that bazel now requires?\n(instructions in https://www.tensorflow.org/install/install_sources seem to be unchanged.)\nWe also hit exactly this error with --monolithic builds; we are forced to do this because of problematic libprotobuf behavior when loaded by different shared libraries (like described in protocolbuffers/protobuf#1489 (comment)).\n(Perhaps there exists an easier solution which would link only protobuf statically, we haven't really looked carefully yet at the corresponding tf-bazel rules; if someone knows a way to do this off top of their head, I would really appreciate a hint!)", "body": "> I will close the bug, I was able to correctly compile the TF 1.9, now bazel build requires different way of triggering the build in order to find all the required CUDA libraries, on top of this monolithic build almost always shows that build is ok even though some of the libs were not found. Combinations of these 2 things makes it hard to identify the root cause and quickly come up with the solution.\r\n\r\n@b0noI : could you please elaborate on that? What is the new different way that bazel now requires?\r\n(instructions in https://www.tensorflow.org/install/install_sources seem to be unchanged.)\r\n\r\nWe also hit exactly this error with `--monolithic` builds; we are forced to do this because of problematic libprotobuf behavior when loaded by different shared libraries (like described in https://github.com/protocolbuffers/protobuf/issues/1489#issuecomment-217241765). \r\n\r\n(Perhaps there exists an easier solution which would link only protobuf statically, we haven't really looked carefully yet at the corresponding tf-bazel rules; if someone knows a way to do this off top of their head, I would really appreciate a hint!)"}