{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/221087408", "html_url": "https://github.com/tensorflow/tensorflow/issues/2455#issuecomment-221087408", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2455", "id": 221087408, "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTA4NzQwOA==", "user": {"login": "keveman", "id": 229914, "node_id": "MDQ6VXNlcjIyOTkxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/229914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keveman", "html_url": "https://github.com/keveman", "followers_url": "https://api.github.com/users/keveman/followers", "following_url": "https://api.github.com/users/keveman/following{/other_user}", "gists_url": "https://api.github.com/users/keveman/gists{/gist_id}", "starred_url": "https://api.github.com/users/keveman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keveman/subscriptions", "organizations_url": "https://api.github.com/users/keveman/orgs", "repos_url": "https://api.github.com/users/keveman/repos", "events_url": "https://api.github.com/users/keveman/events{/privacy}", "received_events_url": "https://api.github.com/users/keveman/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-23T20:32:43Z", "updated_at": "2016-05-23T20:32:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p><code>tf.load_op_library</code> relies on the system provided mechanism to locate the <code>.so</code> file, especially if you don't provide the full path to the file. On linux, the directories present in the <code>LD_LIBRARY_PATH</code> environment variable are looked up. In your case, when compiling with <code>g++</code>, can you try providing the full path to <code>tf.load_op_library</code>, most probably <code>./zero_out.so</code>?<br>\nIf you are compiling using bazel, there is an utility function to give you the full path to the <code>.so</code>. Look <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/how_tos/adding_an_op/zero_out_1_test.py#L36\">here</a> :</p>\n<pre><code>tf.load_op_library(os.path.join(\n          tf.resource_loader.get_data_files_path(), 'zero_out_op_kernel_1.so'))\n</code></pre>", "body_text": "tf.load_op_library relies on the system provided mechanism to locate the .so file, especially if you don't provide the full path to the file. On linux, the directories present in the LD_LIBRARY_PATH environment variable are looked up. In your case, when compiling with g++, can you try providing the full path to tf.load_op_library, most probably ./zero_out.so?\nIf you are compiling using bazel, there is an utility function to give you the full path to the .so. Look here :\ntf.load_op_library(os.path.join(\n          tf.resource_loader.get_data_files_path(), 'zero_out_op_kernel_1.so'))", "body": "`tf.load_op_library` relies on the system provided mechanism to locate the `.so` file, especially if you don't provide the full path to the file. On linux, the directories present in the `LD_LIBRARY_PATH` environment variable are looked up. In your case, when compiling with `g++`, can you try providing the full path to `tf.load_op_library`, most probably `./zero_out.so`?\nIf you are compiling using bazel, there is an utility function to give you the full path to the `.so`. Look [here](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/how_tos/adding_an_op/zero_out_1_test.py#L36) :\n\n```\ntf.load_op_library(os.path.join(\n          tf.resource_loader.get_data_files_path(), 'zero_out_op_kernel_1.so'))\n```\n"}