{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350999545", "html_url": "https://github.com/tensorflow/tensorflow/issues/15271#issuecomment-350999545", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15271", "id": 350999545, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDk5OTU0NQ==", "user": {"login": "joel-shor", "id": 6020988, "node_id": "MDQ6VXNlcjYwMjA5ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6020988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joel-shor", "html_url": "https://github.com/joel-shor", "followers_url": "https://api.github.com/users/joel-shor/followers", "following_url": "https://api.github.com/users/joel-shor/following{/other_user}", "gists_url": "https://api.github.com/users/joel-shor/gists{/gist_id}", "starred_url": "https://api.github.com/users/joel-shor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joel-shor/subscriptions", "organizations_url": "https://api.github.com/users/joel-shor/orgs", "repos_url": "https://api.github.com/users/joel-shor/repos", "events_url": "https://api.github.com/users/joel-shor/events{/privacy}", "received_events_url": "https://api.github.com/users/joel-shor/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-12T09:47:44Z", "updated_at": "2017-12-12T09:47:44Z", "author_association": "CONTRIBUTOR", "body_html": "<ol>\n<li>One discriminator is for the real data, the other is for the fake data. The weights are shared.</li>\n<li>To support pretraining, how would you feel about making a function in <code>train.py</code> called <code>get_pretraining_sequential_train_steps(pretraining_steps, train_steps)</code> that runs <code>pretraining.discriminator_train_steps</code> pretraining for D, <code>pretraining.generator_train_steps</code> pretraining for G, then <code>train_steps</code> alternating?</li>\n</ol>", "body_text": "One discriminator is for the real data, the other is for the fake data. The weights are shared.\nTo support pretraining, how would you feel about making a function in train.py called get_pretraining_sequential_train_steps(pretraining_steps, train_steps) that runs pretraining.discriminator_train_steps pretraining for D, pretraining.generator_train_steps pretraining for G, then train_steps alternating?", "body": "1) One discriminator is for the real data, the other is for the fake data. The weights are shared.\r\n2) To support pretraining, how would you feel about making a function in `train.py` called `get_pretraining_sequential_train_steps(pretraining_steps, train_steps)` that runs `pretraining.discriminator_train_steps` pretraining for D, `pretraining.generator_train_steps` pretraining for G, then `train_steps` alternating?"}