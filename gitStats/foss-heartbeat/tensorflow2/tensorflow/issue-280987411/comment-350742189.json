{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350742189", "html_url": "https://github.com/tensorflow/tensorflow/issues/15271#issuecomment-350742189", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15271", "id": 350742189, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDc0MjE4OQ==", "user": {"login": "sleighsoft", "id": 9438971, "node_id": "MDQ6VXNlcjk0Mzg5NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9438971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sleighsoft", "html_url": "https://github.com/sleighsoft", "followers_url": "https://api.github.com/users/sleighsoft/followers", "following_url": "https://api.github.com/users/sleighsoft/following{/other_user}", "gists_url": "https://api.github.com/users/sleighsoft/gists{/gist_id}", "starred_url": "https://api.github.com/users/sleighsoft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sleighsoft/subscriptions", "organizations_url": "https://api.github.com/users/sleighsoft/orgs", "repos_url": "https://api.github.com/users/sleighsoft/repos", "events_url": "https://api.github.com/users/sleighsoft/events{/privacy}", "received_events_url": "https://api.github.com/users/sleighsoft/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-11T14:38:00Z", "updated_at": "2017-12-11T14:38:14Z", "author_association": "CONTRIBUTOR", "body_html": "<p>An idea regarding pre-training</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> tensorflow.contrib.gan.python <span class=\"pl-k\">import</span> namedtuples\n<span class=\"pl-k\">from</span> tensorflow.python.training <span class=\"pl-k\">import</span> session_run_hook\n<span class=\"pl-k\">from</span> tensorflow.python.training <span class=\"pl-k\">import</span> training_util\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">RunTrainOpsHook</span>(<span class=\"pl-e\">session_run_hook</span>.<span class=\"pl-e\">SessionRunHook</span>):\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>A hook to run train ops a fixed number of times.<span class=\"pl-pds\">\"\"\"</span></span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">train_ops</span>, <span class=\"pl-smi\">pretrain_steps</span>, <span class=\"pl-smi\">train_steps</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Run train ops a certain number of times.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    Args:</span>\n<span class=\"pl-s\">      train_ops: A train op or iterable of train ops to run.</span>\n<span class=\"pl-s\">      train_steps: The number of times to run the op(s).</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">isinstance</span>(train_ops, (<span class=\"pl-c1\">list</span>, <span class=\"pl-c1\">tuple</span>)):\n      train_ops <span class=\"pl-k\">=</span> [train_ops]\n    <span class=\"pl-c1\">self</span>._pretrain_steps <span class=\"pl-k\">=</span> pretrain_steps\n    <span class=\"pl-c1\">self</span>._train_ops <span class=\"pl-k\">=</span> train_ops\n    <span class=\"pl-c1\">self</span>._train_steps <span class=\"pl-k\">=</span> train_steps\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">before_run</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">run_context</span>):\n    global_step <span class=\"pl-k\">=</span> training_util.get_or_create_global_step()\n    global_step_value <span class=\"pl-k\">=</span> tf.train.global_step(run_context.session, global_step)\n    steps <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._pretrain_steps\n    <span class=\"pl-k\">if</span> global_step_value <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>:\n      steps <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._train_steps\n    <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(steps):\n      run_context.session.run(<span class=\"pl-c1\">self</span>._train_ops)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">get_sequential_train_hooks</span>(<span class=\"pl-smi\">pretrain_steps</span><span class=\"pl-k\">=</span>namedtuples.GANTrainSteps(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">1</span>),\n                               <span class=\"pl-smi\">train_steps</span><span class=\"pl-k\">=</span>namedtuples.GANTrainSteps(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)):\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Returns a hooks function for sequential GAN training.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">  Args:</span>\n<span class=\"pl-s\">    train_steps: A `GANTrainSteps` tuple that determines how many generator</span>\n<span class=\"pl-s\">      and discriminator training steps to take.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">  Returns:</span>\n<span class=\"pl-s\">    A function that takes a GANTrainOps tuple and returns a list of hooks.</span>\n<span class=\"pl-s\">  <span class=\"pl-pds\">\"\"\"</span></span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">get_hooks</span>(<span class=\"pl-smi\">train_ops</span>):\n\n    generator_hook <span class=\"pl-k\">=</span> RunTrainOpsHook(train_ops.generator_train_op,\n                                     pretrain_steps.generator_train_steps,\n                                     train_steps.generator_train_steps)\n    discriminator_hook <span class=\"pl-k\">=</span> RunTrainOpsHook(\n        train_ops.discriminator_train_op,\n        pretrain_steps.discriminator_train_steps,\n        train_steps.discriminator_train_steps)\n    <span class=\"pl-k\">return</span> [generator_hook, discriminator_hook]\n  <span class=\"pl-k\">return</span> get_hooks</pre></div>\n<p>The <code>RunTrainOpsHook</code> allows to set the number of pretraining steps which will be used only for the first step. After that you can configure the actual adverserial training approach e.g. 1/1</p>", "body_text": "An idea regarding pre-training\nfrom tensorflow.contrib.gan.python import namedtuples\nfrom tensorflow.python.training import session_run_hook\nfrom tensorflow.python.training import training_util\nimport tensorflow as tf\n\n\nclass RunTrainOpsHook(session_run_hook.SessionRunHook):\n  \"\"\"A hook to run train ops a fixed number of times.\"\"\"\n\n  def __init__(self, train_ops, pretrain_steps, train_steps):\n    \"\"\"Run train ops a certain number of times.\n\n    Args:\n      train_ops: A train op or iterable of train ops to run.\n      train_steps: The number of times to run the op(s).\n    \"\"\"\n    if not isinstance(train_ops, (list, tuple)):\n      train_ops = [train_ops]\n    self._pretrain_steps = pretrain_steps\n    self._train_ops = train_ops\n    self._train_steps = train_steps\n\n  def before_run(self, run_context):\n    global_step = training_util.get_or_create_global_step()\n    global_step_value = tf.train.global_step(run_context.session, global_step)\n    steps = self._pretrain_steps\n    if global_step_value > 0:\n      steps = self._train_steps\n    for _ in range(steps):\n      run_context.session.run(self._train_ops)\n\n\ndef get_sequential_train_hooks(pretrain_steps=namedtuples.GANTrainSteps(10, 1),\n                               train_steps=namedtuples.GANTrainSteps(1, 1)):\n  \"\"\"Returns a hooks function for sequential GAN training.\n\n  Args:\n    train_steps: A `GANTrainSteps` tuple that determines how many generator\n      and discriminator training steps to take.\n\n  Returns:\n    A function that takes a GANTrainOps tuple and returns a list of hooks.\n  \"\"\"\n  def get_hooks(train_ops):\n\n    generator_hook = RunTrainOpsHook(train_ops.generator_train_op,\n                                     pretrain_steps.generator_train_steps,\n                                     train_steps.generator_train_steps)\n    discriminator_hook = RunTrainOpsHook(\n        train_ops.discriminator_train_op,\n        pretrain_steps.discriminator_train_steps,\n        train_steps.discriminator_train_steps)\n    return [generator_hook, discriminator_hook]\n  return get_hooks\nThe RunTrainOpsHook allows to set the number of pretraining steps which will be used only for the first step. After that you can configure the actual adverserial training approach e.g. 1/1", "body": "An idea regarding pre-training\r\n```python\r\nfrom tensorflow.contrib.gan.python import namedtuples\r\nfrom tensorflow.python.training import session_run_hook\r\nfrom tensorflow.python.training import training_util\r\nimport tensorflow as tf\r\n\r\n\r\nclass RunTrainOpsHook(session_run_hook.SessionRunHook):\r\n  \"\"\"A hook to run train ops a fixed number of times.\"\"\"\r\n\r\n  def __init__(self, train_ops, pretrain_steps, train_steps):\r\n    \"\"\"Run train ops a certain number of times.\r\n\r\n    Args:\r\n      train_ops: A train op or iterable of train ops to run.\r\n      train_steps: The number of times to run the op(s).\r\n    \"\"\"\r\n    if not isinstance(train_ops, (list, tuple)):\r\n      train_ops = [train_ops]\r\n    self._pretrain_steps = pretrain_steps\r\n    self._train_ops = train_ops\r\n    self._train_steps = train_steps\r\n\r\n  def before_run(self, run_context):\r\n    global_step = training_util.get_or_create_global_step()\r\n    global_step_value = tf.train.global_step(run_context.session, global_step)\r\n    steps = self._pretrain_steps\r\n    if global_step_value > 0:\r\n      steps = self._train_steps\r\n    for _ in range(steps):\r\n      run_context.session.run(self._train_ops)\r\n\r\n\r\ndef get_sequential_train_hooks(pretrain_steps=namedtuples.GANTrainSteps(10, 1),\r\n                               train_steps=namedtuples.GANTrainSteps(1, 1)):\r\n  \"\"\"Returns a hooks function for sequential GAN training.\r\n\r\n  Args:\r\n    train_steps: A `GANTrainSteps` tuple that determines how many generator\r\n      and discriminator training steps to take.\r\n\r\n  Returns:\r\n    A function that takes a GANTrainOps tuple and returns a list of hooks.\r\n  \"\"\"\r\n  def get_hooks(train_ops):\r\n\r\n    generator_hook = RunTrainOpsHook(train_ops.generator_train_op,\r\n                                     pretrain_steps.generator_train_steps,\r\n                                     train_steps.generator_train_steps)\r\n    discriminator_hook = RunTrainOpsHook(\r\n        train_ops.discriminator_train_op,\r\n        pretrain_steps.discriminator_train_steps,\r\n        train_steps.discriminator_train_steps)\r\n    return [generator_hook, discriminator_hook]\r\n  return get_hooks\r\n```\r\nThe `RunTrainOpsHook` allows to set the number of pretraining steps which will be used only for the first step. After that you can configure the actual adverserial training approach e.g. 1/1"}