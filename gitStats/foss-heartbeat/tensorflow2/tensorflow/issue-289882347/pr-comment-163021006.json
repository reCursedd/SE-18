{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/163021006", "pull_request_review_id": 90568440, "id": 163021006, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzAyMTAwNg==", "diff_hunk": "@@ -65,35 +74,47 @@ def conjugate_gradient(operator,\n       - x: A rank-1 `Tensor` of shape `[N]` containing the computed solution.\n       - r: A rank-1 `Tensor` of shape `[M]` containing the residual vector.\n       - p: A rank-1 `Tensor` of shape `[N]`. `A`-conjugate basis vector.\n-      - gamma: \\\\(||r||_2^2\\\\)\n+      - gamma: \\\\(r \\dot M \\dot r\\\\)\n   \"\"\"\n   # ephemeral class holding CG state.\n   cg_state = collections.namedtuple(\"CGState\", [\"i\", \"x\", \"r\", \"p\", \"gamma\"])\n \n   def stopping_criterion(i, state):\n-    return math_ops.logical_and(i < max_iter, state.gamma > tol)\n+    return math_ops.logical_and(i < max_iter,\n+                                util.l2norm_squared(state.r) > tol)\n \n-  # TODO(rmlarsen): add preconditioning\n   def cg_step(i, state):\n     z = operator.apply(state.p)\n     alpha = state.gamma / util.dot(state.p, z)\n     x = state.x + alpha * state.p\n     r = state.r - alpha * z\n-    gamma = util.l2norm_squared(r)\n+    q = preconditioner.apply(r)", "path": "tensorflow/contrib/solvers/python/ops/linear_equations.py", "position": null, "original_position": 45, "commit_id": "c2908c2e74530edaba6f95c4b86f184c77a1afcf", "original_commit_id": "8616e904a01a5e691d2f39f8fa5b0fc01f42f750", "user": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "body": "Could you write the code such that if preconditioner is None, we don't insert the extra ops in the graph at all?", "created_at": "2018-01-22T18:12:04Z", "updated_at": "2018-01-24T12:29:16Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/16237#discussion_r163021006", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16237", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/163021006"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/16237#discussion_r163021006"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16237"}}, "body_html": "<p>Could you write the code such that if preconditioner is None, we don't insert the extra ops in the graph at all?</p>", "body_text": "Could you write the code such that if preconditioner is None, we don't insert the extra ops in the graph at all?"}