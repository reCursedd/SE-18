{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/406437547", "html_url": "https://github.com/tensorflow/tensorflow/issues/9545#issuecomment-406437547", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9545", "id": 406437547, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjQzNzU0Nw==", "user": {"login": "sleighsoft", "id": 9438971, "node_id": "MDQ6VXNlcjk0Mzg5NzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9438971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sleighsoft", "html_url": "https://github.com/sleighsoft", "followers_url": "https://api.github.com/users/sleighsoft/followers", "following_url": "https://api.github.com/users/sleighsoft/following{/other_user}", "gists_url": "https://api.github.com/users/sleighsoft/gists{/gist_id}", "starred_url": "https://api.github.com/users/sleighsoft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sleighsoft/subscriptions", "organizations_url": "https://api.github.com/users/sleighsoft/orgs", "repos_url": "https://api.github.com/users/sleighsoft/repos", "events_url": "https://api.github.com/users/sleighsoft/events{/privacy}", "received_events_url": "https://api.github.com/users/sleighsoft/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-19T22:48:24Z", "updated_at": "2018-07-19T22:48:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=25608944\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/qmeeus\">@qmeeus</a> If you really want to reuse name scopes then you can do this:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">absolute_name_scope</span>(<span class=\"pl-smi\">scope</span>):\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Builds an absolute tf.name_scope relative to the current_scope.</span>\n<span class=\"pl-s\">  This is helpful to reuse nested name scopes.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">  E.g. The following will happen when using regular tf.name_scope:</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    with tf.name_scope('outer'):</span>\n<span class=\"pl-s\">      with tf.name_scope('inner'):</span>\n<span class=\"pl-s\">        print(tf.constant(1)) # Will print outer/inner/Const:0</span>\n<span class=\"pl-s\">    with tf.name_scope('outer'):</span>\n<span class=\"pl-s\">      with tf.name_scope('inner'):</span>\n<span class=\"pl-s\">        print(tf.constant(1)) # Will print outer/inner_1/Const:0</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">  With absolute_name_scope:</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">    with absolute_name_scope('outer'):</span>\n<span class=\"pl-s\">      with absolute_name_scope('inner'):</span>\n<span class=\"pl-s\">        print(tf.constant(1)) # Will print outer/inner/Const:0</span>\n<span class=\"pl-s\">    with absolute_name_scope('outer'):</span>\n<span class=\"pl-s\">      with absolute_name_scope('inner'):</span>\n<span class=\"pl-s\">        print(tf.constant(1)) # Will print outer/inner/Const_1:0</span>\n<span class=\"pl-s\">  <span class=\"pl-pds\">\"\"\"</span></span>\n  current_scope <span class=\"pl-k\">=</span> tf.get_default_graph().get_name_scope()\n  <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> current_scope:\n    <span class=\"pl-k\">if</span> scope.endswith(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/<span class=\"pl-pds\">'</span></span>):\n      name_scope <span class=\"pl-k\">=</span> tf.name_scope(scope)\n    <span class=\"pl-k\">else</span>:\n      name_scope <span class=\"pl-k\">=</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">{}</span>/<span class=\"pl-pds\">'</span></span>.format(scope))\n  <span class=\"pl-k\">else</span>:\n    name_scope <span class=\"pl-k\">=</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">{}</span>/<span class=\"pl-c1\">{}</span>/<span class=\"pl-pds\">'</span></span>.format(current_scope, scope))\n  <span class=\"pl-k\">return</span> name_scope</pre></div>\n<p>Tensorflow team, I can also add this as a PR if desired. I find this rather useful to get clean scopes in Tensorboard.</p>", "body_text": "@qmeeus If you really want to reuse name scopes then you can do this:\ndef absolute_name_scope(scope):\n  \"\"\"Builds an absolute tf.name_scope relative to the current_scope.\n  This is helpful to reuse nested name scopes.\n\n  E.g. The following will happen when using regular tf.name_scope:\n\n    with tf.name_scope('outer'):\n      with tf.name_scope('inner'):\n        print(tf.constant(1)) # Will print outer/inner/Const:0\n    with tf.name_scope('outer'):\n      with tf.name_scope('inner'):\n        print(tf.constant(1)) # Will print outer/inner_1/Const:0\n\n  With absolute_name_scope:\n\n    with absolute_name_scope('outer'):\n      with absolute_name_scope('inner'):\n        print(tf.constant(1)) # Will print outer/inner/Const:0\n    with absolute_name_scope('outer'):\n      with absolute_name_scope('inner'):\n        print(tf.constant(1)) # Will print outer/inner/Const_1:0\n  \"\"\"\n  current_scope = tf.get_default_graph().get_name_scope()\n  if not current_scope:\n    if scope.endswith('/'):\n      name_scope = tf.name_scope(scope)\n    else:\n      name_scope = tf.name_scope('{}/'.format(scope))\n  else:\n    name_scope = tf.name_scope('{}/{}/'.format(current_scope, scope))\n  return name_scope\nTensorflow team, I can also add this as a PR if desired. I find this rather useful to get clean scopes in Tensorboard.", "body": "@qmeeus If you really want to reuse name scopes then you can do this:\r\n```python\r\ndef absolute_name_scope(scope):\r\n  \"\"\"Builds an absolute tf.name_scope relative to the current_scope.\r\n  This is helpful to reuse nested name scopes.\r\n\r\n  E.g. The following will happen when using regular tf.name_scope:\r\n\r\n    with tf.name_scope('outer'):\r\n      with tf.name_scope('inner'):\r\n        print(tf.constant(1)) # Will print outer/inner/Const:0\r\n    with tf.name_scope('outer'):\r\n      with tf.name_scope('inner'):\r\n        print(tf.constant(1)) # Will print outer/inner_1/Const:0\r\n\r\n  With absolute_name_scope:\r\n\r\n    with absolute_name_scope('outer'):\r\n      with absolute_name_scope('inner'):\r\n        print(tf.constant(1)) # Will print outer/inner/Const:0\r\n    with absolute_name_scope('outer'):\r\n      with absolute_name_scope('inner'):\r\n        print(tf.constant(1)) # Will print outer/inner/Const_1:0\r\n  \"\"\"\r\n  current_scope = tf.get_default_graph().get_name_scope()\r\n  if not current_scope:\r\n    if scope.endswith('/'):\r\n      name_scope = tf.name_scope(scope)\r\n    else:\r\n      name_scope = tf.name_scope('{}/'.format(scope))\r\n  else:\r\n    name_scope = tf.name_scope('{}/{}/'.format(current_scope, scope))\r\n  return name_scope\r\n```\r\n\r\nTensorflow team, I can also add this as a PR if desired. I find this rather useful to get clean scopes in Tensorboard."}