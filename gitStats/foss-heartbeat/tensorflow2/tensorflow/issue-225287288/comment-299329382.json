{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/299329382", "html_url": "https://github.com/tensorflow/tensorflow/issues/9545#issuecomment-299329382", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9545", "id": 299329382, "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTMyOTM4Mg==", "user": {"login": "chihuahua", "id": 4221553, "node_id": "MDQ6VXNlcjQyMjE1NTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4221553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chihuahua", "html_url": "https://github.com/chihuahua", "followers_url": "https://api.github.com/users/chihuahua/followers", "following_url": "https://api.github.com/users/chihuahua/following{/other_user}", "gists_url": "https://api.github.com/users/chihuahua/gists{/gist_id}", "starred_url": "https://api.github.com/users/chihuahua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chihuahua/subscriptions", "organizations_url": "https://api.github.com/users/chihuahua/orgs", "repos_url": "https://api.github.com/users/chihuahua/repos", "events_url": "https://api.github.com/users/chihuahua/events{/privacy}", "received_events_url": "https://api.github.com/users/chihuahua/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-04T22:42:22Z", "updated_at": "2017-05-04T22:42:22Z", "author_association": "MEMBER", "body_html": "<p>I need to take a look more closely, but I think calling <code>tf.scope</code> creates a new namespace in general, appending _[Some int] to the name if necessary for uniqueness.</p>\n<p>This might deviate from your intention, but what if you move the <code>Encoder</code> scope outside of <code>encode</code> like this?</p>\n<pre><code>with tf.variable_scope('Encoder'):\n  h_enc_t = encoder(X_t)\n  h_enc_t_next = encoder(X_{t+1}, share=True)\n</code></pre>\n<p>And then</p>\n<pre><code>def encode(self, x, share=None):\n  fc = tf.contrib.layers.fully_connected\n  with tf.variable_scope('encode', reuse=share):\n    l1 = fc(x, 400, weights_initializer=tf.orthogonal_initializer(),\n            activation_fn=tf.nn.relu)\n    l2 = fc(l1, 100, weights_initializer=tf.orthogonal_initializer(),\n            activation_fn=tf.nn.relu)\n    return l2\n</code></pre>\n<p>?</p>", "body_text": "I need to take a look more closely, but I think calling tf.scope creates a new namespace in general, appending _[Some int] to the name if necessary for uniqueness.\nThis might deviate from your intention, but what if you move the Encoder scope outside of encode like this?\nwith tf.variable_scope('Encoder'):\n  h_enc_t = encoder(X_t)\n  h_enc_t_next = encoder(X_{t+1}, share=True)\n\nAnd then\ndef encode(self, x, share=None):\n  fc = tf.contrib.layers.fully_connected\n  with tf.variable_scope('encode', reuse=share):\n    l1 = fc(x, 400, weights_initializer=tf.orthogonal_initializer(),\n            activation_fn=tf.nn.relu)\n    l2 = fc(l1, 100, weights_initializer=tf.orthogonal_initializer(),\n            activation_fn=tf.nn.relu)\n    return l2\n\n?", "body": "I need to take a look more closely, but I think calling `tf.scope` creates a new namespace in general, appending _[Some int] to the name if necessary for uniqueness.\r\n\r\nThis might deviate from your intention, but what if you move the `Encoder` scope outside of `encode` like this?\r\n\r\n```\r\nwith tf.variable_scope('Encoder'):\r\n  h_enc_t = encoder(X_t)\r\n  h_enc_t_next = encoder(X_{t+1}, share=True)\r\n```\r\n\r\nAnd then\r\n\r\n```\r\ndef encode(self, x, share=None):\r\n  fc = tf.contrib.layers.fully_connected\r\n  with tf.variable_scope('encode', reuse=share):\r\n    l1 = fc(x, 400, weights_initializer=tf.orthogonal_initializer(),\r\n            activation_fn=tf.nn.relu)\r\n    l2 = fc(l1, 100, weights_initializer=tf.orthogonal_initializer(),\r\n            activation_fn=tf.nn.relu)\r\n    return l2\r\n```\r\n\r\n?"}