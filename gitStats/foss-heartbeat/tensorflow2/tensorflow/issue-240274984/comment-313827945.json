{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/313827945", "html_url": "https://github.com/tensorflow/tensorflow/issues/11252#issuecomment-313827945", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11252", "id": 313827945, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzgyNzk0NQ==", "user": {"login": "feranick", "id": 35967, "node_id": "MDQ6VXNlcjM1OTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/35967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feranick", "html_url": "https://github.com/feranick", "followers_url": "https://api.github.com/users/feranick/followers", "following_url": "https://api.github.com/users/feranick/following{/other_user}", "gists_url": "https://api.github.com/users/feranick/gists{/gist_id}", "starred_url": "https://api.github.com/users/feranick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feranick/subscriptions", "organizations_url": "https://api.github.com/users/feranick/orgs", "repos_url": "https://api.github.com/users/feranick/repos", "events_url": "https://api.github.com/users/feranick/events{/privacy}", "received_events_url": "https://api.github.com/users/feranick/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-08T02:28:23Z", "updated_at": "2017-07-08T02:29:54Z", "author_association": "NONE", "body_html": "<p>Sorry about that, those were previously defined variables. Given a train set A, with related classes Cl, and a test set A_test, with related labels Cl_test, the code proceeds as follows:</p>\n<pre><code>from sklearn import preprocessing\nimport tensorflow.contrib.learn as skflow\n\ntotA = np.vstack((A, A_test))\ntotCl = np.append(Cl, Cl_test)\nnumTotClasses = np.unique(totCl).size\n\ntotCl2 = le.fit_transform(totCl)\nCl2 = le.transform(Cl)\nCl2_test = le.transform(Cl_test)\n\nfeature_columns = skflow.infer_real_valued_columns_from_input(totA.astype(np.float32))\nclf = tf.estimator.DNNClassifier(feature_columns=feature_columns,hidden_units=[20],\n                               optimizer=\"Adagrad\", n_classes=numTotClasses,\n                               activation_fn=\"tanh\", model_dir=model_directory)\n\nclf.train(input_fn=lambda: input_fn(A, Cl2), steps=200)\n</code></pre>\n<p>The code using tensorflow.contrib.learn is the same other than the last two lines:</p>\n<pre><code>clf = tensorflow.contrib.learn.DNNClassifier(feature_columns=feature_columns,hidden_units=[20],\n                                        optimizer=\"Adagrad\", n_classes=numTotClasses,\n                                        activation_fn=\"tanh\", model_dir=model_directory)\nclf.fit(input_fn=lambda: input_fn(A, Cl2), steps=200)\n</code></pre>\n<p>I hope this helps. Thanks for your help.</p>", "body_text": "Sorry about that, those were previously defined variables. Given a train set A, with related classes Cl, and a test set A_test, with related labels Cl_test, the code proceeds as follows:\nfrom sklearn import preprocessing\nimport tensorflow.contrib.learn as skflow\n\ntotA = np.vstack((A, A_test))\ntotCl = np.append(Cl, Cl_test)\nnumTotClasses = np.unique(totCl).size\n\ntotCl2 = le.fit_transform(totCl)\nCl2 = le.transform(Cl)\nCl2_test = le.transform(Cl_test)\n\nfeature_columns = skflow.infer_real_valued_columns_from_input(totA.astype(np.float32))\nclf = tf.estimator.DNNClassifier(feature_columns=feature_columns,hidden_units=[20],\n                               optimizer=\"Adagrad\", n_classes=numTotClasses,\n                               activation_fn=\"tanh\", model_dir=model_directory)\n\nclf.train(input_fn=lambda: input_fn(A, Cl2), steps=200)\n\nThe code using tensorflow.contrib.learn is the same other than the last two lines:\nclf = tensorflow.contrib.learn.DNNClassifier(feature_columns=feature_columns,hidden_units=[20],\n                                        optimizer=\"Adagrad\", n_classes=numTotClasses,\n                                        activation_fn=\"tanh\", model_dir=model_directory)\nclf.fit(input_fn=lambda: input_fn(A, Cl2), steps=200)\n\nI hope this helps. Thanks for your help.", "body": "Sorry about that, those were previously defined variables. Given a train set A, with related classes Cl, and a test set A_test, with related labels Cl_test, the code proceeds as follows:\r\n\r\n```\r\nfrom sklearn import preprocessing\r\nimport tensorflow.contrib.learn as skflow\r\n\r\ntotA = np.vstack((A, A_test))\r\ntotCl = np.append(Cl, Cl_test)\r\nnumTotClasses = np.unique(totCl).size\r\n\r\ntotCl2 = le.fit_transform(totCl)\r\nCl2 = le.transform(Cl)\r\nCl2_test = le.transform(Cl_test)\r\n\r\nfeature_columns = skflow.infer_real_valued_columns_from_input(totA.astype(np.float32))\r\nclf = tf.estimator.DNNClassifier(feature_columns=feature_columns,hidden_units=[20],\r\n                               optimizer=\"Adagrad\", n_classes=numTotClasses,\r\n                               activation_fn=\"tanh\", model_dir=model_directory)\r\n\r\nclf.train(input_fn=lambda: input_fn(A, Cl2), steps=200)\r\n```\r\n\r\nThe code using tensorflow.contrib.learn is the same other than the last two lines:\r\n```\r\nclf = tensorflow.contrib.learn.DNNClassifier(feature_columns=feature_columns,hidden_units=[20],\r\n                                        optimizer=\"Adagrad\", n_classes=numTotClasses,\r\n                                        activation_fn=\"tanh\", model_dir=model_directory)\r\nclf.fit(input_fn=lambda: input_fn(A, Cl2), steps=200)\r\n```\r\nI hope this helps. Thanks for your help."}