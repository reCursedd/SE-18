{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/314944466", "html_url": "https://github.com/tensorflow/tensorflow/issues/11252#issuecomment-314944466", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11252", "id": 314944466, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDk0NDQ2Ng==", "user": {"login": "feranick", "id": 35967, "node_id": "MDQ6VXNlcjM1OTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/35967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feranick", "html_url": "https://github.com/feranick", "followers_url": "https://api.github.com/users/feranick/followers", "following_url": "https://api.github.com/users/feranick/following{/other_user}", "gists_url": "https://api.github.com/users/feranick/gists{/gist_id}", "starred_url": "https://api.github.com/users/feranick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feranick/subscriptions", "organizations_url": "https://api.github.com/users/feranick/orgs", "repos_url": "https://api.github.com/users/feranick/repos", "events_url": "https://api.github.com/users/feranick/events{/privacy}", "received_events_url": "https://api.github.com/users/feranick/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-13T01:35:16Z", "updated_at": "2017-07-13T03:01:51Z", "author_association": "NONE", "body_html": "<p>Here it is. Will provide train and test files to run shortly</p>\n<pre lang=\"#!/usr/bin/env\" data-meta=\"python3\"><code>\nimport numpy as np\nimport sys, os.path\n#**********************************************\n''' Main '''\n#**********************************************\ndef main():\n    print(\" Using training file: \", sys.argv[1],\"\\n\")\n        \n    En, Cl, A = readLearnFile(sys.argv[1])\n    En_test, Cl_test, A_test = readLearnFile(sys.argv[2])\n    learnFileRoot = os.path.splitext(sys.argv[1])[0]\n    clf_dnntf, le_dnntf  = trainDNNTF(A, Cl, A_test, Cl_test, learnFileRoot)\n\n#**********************************************\n''' DNNClassifier '''\n#**********************************************\ndef trainDNNTF(A, Cl, A_test, Cl_test, Root):\n    import tensorflow as tf\n    import tensorflow.contrib.learn as skflow\n    from sklearn import preprocessing\n    \n    model_directory = Root + \"/DNN-TF_\"\n    print(\"\\n  Training model saved in: \", model_directory, \"\\n\")\n    \n    #**********************************************\n    ''' Initialize Estimator and training data '''\n    #**********************************************\n    print(' Initializing TensorFlow...')\n    tf.reset_default_graph()\n\n    totA = np.vstack((A, A_test))\n    totCl = np.append(Cl, Cl_test)\n    numTotClasses = np.unique(totCl).size\n    \n    le = preprocessing.LabelEncoder()\n    totCl2 = le.fit_transform(totCl)\n    Cl2 = le.transform(Cl)\n    Cl2_test = le.transform(Cl_test)\n    \n    feature_columns = skflow.infer_real_valued_columns_from_input(totA.astype(np.float32))\n    \n    ''' tf.estimator version '''\n    clf = tf.estimator.DNNClassifier(feature_columns=[totA], hidden_units=[20],\n                               optimizer=\"Adagrad\", n_classes=numTotClasses,\n                               activation_fn=\"tanh\", model_dir=model_directory)\n    \n    ''' tf.contrib.learn version '''\n    #clf = skflow.DNNClassifier(feature_columns=feature_columns, hidden_units=[20],\n    #                               optimizer=\"Adagrad\", n_classes=numTotClasses,\n    #                               activation_fn=\"tanh\", model_dir=model_directory)\n\n    #**********************************************\n    ''' Train '''\n    #**********************************************\n    \n    ''' tf.estimator version '''\n    clf.train(input_fn=lambda: input_fn(A, Cl2), steps=2000)\n    \n    ''' tf.contrib.learn version '''\n    #clf.fit(input_fn=lambda: input_fn(A, Cl2), steps=100)\n    \n    \n    accuracy_score = clf.evaluate(input_fn=lambda: input_fn(A_test, Cl2_test), steps=1)\n    print('\\n  ================================')\n    print('  \\033[1mDNN-TF\\033[0m - Accuracy')\n    print('  ================================')\n    print(\"\\n  Accuracy: {:.2f}%\".format(100*accuracy_score[\"accuracy\"]))\n    print(\"  Loss: {:.2f}\".format(accuracy_score[\"loss\"]))\n    print(\"  Global step: {:.2f}\\n\".format(accuracy_score[\"global_step\"]))\n    print('  ================================\\n')\n\n    return clf, le\n\n#**********************************************\n''' Format input data for Estimator '''\n#**********************************************\ndef input_fn(A, Cl2):\n    import tensorflow as tf\n    x = tf.constant(A.astype(np.float32))\n    y = tf.constant(Cl2)\n    return x,y\n\n#**********************************************\n''' Read learn File '''\n#**********************************************\ndef readLearnFile(learnFile):\n    try:\n        with open(learnFile, 'r') as f:\n            M = np.loadtxt(f, unpack =False)\n    except:\n        print('\\033[1m' + ' Learning file not found \\n' + '\\033[0m')\n        return\n    \n    En = np.delete(np.array(M[0,:]),np.s_[0:1],0)\n    M = np.delete(M,np.s_[0:1],0)\n    Cl = ['{:.2f}'.format(x) for x in M[:,0]]\n    A = np.delete(M,np.s_[0:1],1)\n    return En, Cl, A\n\n#************************************\n''' Main initialization routine '''\n#************************************\nif __name__ == \"__main__\":\n    sys.exit(main())```\n</code></pre>", "body_text": "Here it is. Will provide train and test files to run shortly\n\nimport numpy as np\nimport sys, os.path\n#**********************************************\n''' Main '''\n#**********************************************\ndef main():\n    print(\" Using training file: \", sys.argv[1],\"\\n\")\n        \n    En, Cl, A = readLearnFile(sys.argv[1])\n    En_test, Cl_test, A_test = readLearnFile(sys.argv[2])\n    learnFileRoot = os.path.splitext(sys.argv[1])[0]\n    clf_dnntf, le_dnntf  = trainDNNTF(A, Cl, A_test, Cl_test, learnFileRoot)\n\n#**********************************************\n''' DNNClassifier '''\n#**********************************************\ndef trainDNNTF(A, Cl, A_test, Cl_test, Root):\n    import tensorflow as tf\n    import tensorflow.contrib.learn as skflow\n    from sklearn import preprocessing\n    \n    model_directory = Root + \"/DNN-TF_\"\n    print(\"\\n  Training model saved in: \", model_directory, \"\\n\")\n    \n    #**********************************************\n    ''' Initialize Estimator and training data '''\n    #**********************************************\n    print(' Initializing TensorFlow...')\n    tf.reset_default_graph()\n\n    totA = np.vstack((A, A_test))\n    totCl = np.append(Cl, Cl_test)\n    numTotClasses = np.unique(totCl).size\n    \n    le = preprocessing.LabelEncoder()\n    totCl2 = le.fit_transform(totCl)\n    Cl2 = le.transform(Cl)\n    Cl2_test = le.transform(Cl_test)\n    \n    feature_columns = skflow.infer_real_valued_columns_from_input(totA.astype(np.float32))\n    \n    ''' tf.estimator version '''\n    clf = tf.estimator.DNNClassifier(feature_columns=[totA], hidden_units=[20],\n                               optimizer=\"Adagrad\", n_classes=numTotClasses,\n                               activation_fn=\"tanh\", model_dir=model_directory)\n    \n    ''' tf.contrib.learn version '''\n    #clf = skflow.DNNClassifier(feature_columns=feature_columns, hidden_units=[20],\n    #                               optimizer=\"Adagrad\", n_classes=numTotClasses,\n    #                               activation_fn=\"tanh\", model_dir=model_directory)\n\n    #**********************************************\n    ''' Train '''\n    #**********************************************\n    \n    ''' tf.estimator version '''\n    clf.train(input_fn=lambda: input_fn(A, Cl2), steps=2000)\n    \n    ''' tf.contrib.learn version '''\n    #clf.fit(input_fn=lambda: input_fn(A, Cl2), steps=100)\n    \n    \n    accuracy_score = clf.evaluate(input_fn=lambda: input_fn(A_test, Cl2_test), steps=1)\n    print('\\n  ================================')\n    print('  \\033[1mDNN-TF\\033[0m - Accuracy')\n    print('  ================================')\n    print(\"\\n  Accuracy: {:.2f}%\".format(100*accuracy_score[\"accuracy\"]))\n    print(\"  Loss: {:.2f}\".format(accuracy_score[\"loss\"]))\n    print(\"  Global step: {:.2f}\\n\".format(accuracy_score[\"global_step\"]))\n    print('  ================================\\n')\n\n    return clf, le\n\n#**********************************************\n''' Format input data for Estimator '''\n#**********************************************\ndef input_fn(A, Cl2):\n    import tensorflow as tf\n    x = tf.constant(A.astype(np.float32))\n    y = tf.constant(Cl2)\n    return x,y\n\n#**********************************************\n''' Read learn File '''\n#**********************************************\ndef readLearnFile(learnFile):\n    try:\n        with open(learnFile, 'r') as f:\n            M = np.loadtxt(f, unpack =False)\n    except:\n        print('\\033[1m' + ' Learning file not found \\n' + '\\033[0m')\n        return\n    \n    En = np.delete(np.array(M[0,:]),np.s_[0:1],0)\n    M = np.delete(M,np.s_[0:1],0)\n    Cl = ['{:.2f}'.format(x) for x in M[:,0]]\n    A = np.delete(M,np.s_[0:1],1)\n    return En, Cl, A\n\n#************************************\n''' Main initialization routine '''\n#************************************\nif __name__ == \"__main__\":\n    sys.exit(main())```", "body": "Here it is. Will provide train and test files to run shortly\r\n\r\n```#!/usr/bin/env python3\r\n\r\nimport numpy as np\r\nimport sys, os.path\r\n#**********************************************\r\n''' Main '''\r\n#**********************************************\r\ndef main():\r\n    print(\" Using training file: \", sys.argv[1],\"\\n\")\r\n        \r\n    En, Cl, A = readLearnFile(sys.argv[1])\r\n    En_test, Cl_test, A_test = readLearnFile(sys.argv[2])\r\n    learnFileRoot = os.path.splitext(sys.argv[1])[0]\r\n    clf_dnntf, le_dnntf  = trainDNNTF(A, Cl, A_test, Cl_test, learnFileRoot)\r\n\r\n#**********************************************\r\n''' DNNClassifier '''\r\n#**********************************************\r\ndef trainDNNTF(A, Cl, A_test, Cl_test, Root):\r\n    import tensorflow as tf\r\n    import tensorflow.contrib.learn as skflow\r\n    from sklearn import preprocessing\r\n    \r\n    model_directory = Root + \"/DNN-TF_\"\r\n    print(\"\\n  Training model saved in: \", model_directory, \"\\n\")\r\n    \r\n    #**********************************************\r\n    ''' Initialize Estimator and training data '''\r\n    #**********************************************\r\n    print(' Initializing TensorFlow...')\r\n    tf.reset_default_graph()\r\n\r\n    totA = np.vstack((A, A_test))\r\n    totCl = np.append(Cl, Cl_test)\r\n    numTotClasses = np.unique(totCl).size\r\n    \r\n    le = preprocessing.LabelEncoder()\r\n    totCl2 = le.fit_transform(totCl)\r\n    Cl2 = le.transform(Cl)\r\n    Cl2_test = le.transform(Cl_test)\r\n    \r\n    feature_columns = skflow.infer_real_valued_columns_from_input(totA.astype(np.float32))\r\n    \r\n    ''' tf.estimator version '''\r\n    clf = tf.estimator.DNNClassifier(feature_columns=[totA], hidden_units=[20],\r\n                               optimizer=\"Adagrad\", n_classes=numTotClasses,\r\n                               activation_fn=\"tanh\", model_dir=model_directory)\r\n    \r\n    ''' tf.contrib.learn version '''\r\n    #clf = skflow.DNNClassifier(feature_columns=feature_columns, hidden_units=[20],\r\n    #                               optimizer=\"Adagrad\", n_classes=numTotClasses,\r\n    #                               activation_fn=\"tanh\", model_dir=model_directory)\r\n\r\n    #**********************************************\r\n    ''' Train '''\r\n    #**********************************************\r\n    \r\n    ''' tf.estimator version '''\r\n    clf.train(input_fn=lambda: input_fn(A, Cl2), steps=2000)\r\n    \r\n    ''' tf.contrib.learn version '''\r\n    #clf.fit(input_fn=lambda: input_fn(A, Cl2), steps=100)\r\n    \r\n    \r\n    accuracy_score = clf.evaluate(input_fn=lambda: input_fn(A_test, Cl2_test), steps=1)\r\n    print('\\n  ================================')\r\n    print('  \\033[1mDNN-TF\\033[0m - Accuracy')\r\n    print('  ================================')\r\n    print(\"\\n  Accuracy: {:.2f}%\".format(100*accuracy_score[\"accuracy\"]))\r\n    print(\"  Loss: {:.2f}\".format(accuracy_score[\"loss\"]))\r\n    print(\"  Global step: {:.2f}\\n\".format(accuracy_score[\"global_step\"]))\r\n    print('  ================================\\n')\r\n\r\n    return clf, le\r\n\r\n#**********************************************\r\n''' Format input data for Estimator '''\r\n#**********************************************\r\ndef input_fn(A, Cl2):\r\n    import tensorflow as tf\r\n    x = tf.constant(A.astype(np.float32))\r\n    y = tf.constant(Cl2)\r\n    return x,y\r\n\r\n#**********************************************\r\n''' Read learn File '''\r\n#**********************************************\r\ndef readLearnFile(learnFile):\r\n    try:\r\n        with open(learnFile, 'r') as f:\r\n            M = np.loadtxt(f, unpack =False)\r\n    except:\r\n        print('\\033[1m' + ' Learning file not found \\n' + '\\033[0m')\r\n        return\r\n    \r\n    En = np.delete(np.array(M[0,:]),np.s_[0:1],0)\r\n    M = np.delete(M,np.s_[0:1],0)\r\n    Cl = ['{:.2f}'.format(x) for x in M[:,0]]\r\n    A = np.delete(M,np.s_[0:1],1)\r\n    return En, Cl, A\r\n\r\n#************************************\r\n''' Main initialization routine '''\r\n#************************************\r\nif __name__ == \"__main__\":\r\n    sys.exit(main())```"}