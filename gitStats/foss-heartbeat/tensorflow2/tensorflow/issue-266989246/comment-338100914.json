{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/338100914", "html_url": "https://github.com/tensorflow/tensorflow/pull/13840#issuecomment-338100914", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13840", "id": 338100914, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODEwMDkxNA==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-20T04:08:13Z", "updated_at": "2017-10-20T04:08:13Z", "author_association": "MEMBER", "body_html": "<p>The improvement in large <code>num_channels</code> (<code>= 40</code>)  is quite visible (<code>229.7M items/s</code> -&gt; <code>333.8M items/s</code>)</p>\n<p>On the other hand, for <code>num_channels = 1</code> there is a performance drop (<code>395.7M items/s</code> -&gt; <code>259.5M items/s</code>). This is more or less expected as we have a for loop that is doing nothing.</p>\n<p>Depending on how frequent the <code>num_channels = 1</code>, it might worth the effort to treat <code>num_channels = 1</code> as a special case as well. Let me know if this is desired and I could update the PR accordingly.</p>", "body_text": "The improvement in large num_channels (= 40)  is quite visible (229.7M items/s -> 333.8M items/s)\nOn the other hand, for num_channels = 1 there is a performance drop (395.7M items/s -> 259.5M items/s). This is more or less expected as we have a for loop that is doing nothing.\nDepending on how frequent the num_channels = 1, it might worth the effort to treat num_channels = 1 as a special case as well. Let me know if this is desired and I could update the PR accordingly.", "body": "The improvement in large `num_channels` (`= 40`)  is quite visible (`229.7M items/s` -> `333.8M items/s`)\r\n\r\nOn the other hand, for `num_channels = 1` there is a performance drop (`395.7M items/s` -> `259.5M items/s`). This is more or less expected as we have a for loop that is doing nothing.\r\n\r\nDepending on how frequent the `num_channels = 1`, it might worth the effort to treat `num_channels = 1` as a special case as well. Let me know if this is desired and I could update the PR accordingly."}