{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/239734999", "html_url": "https://github.com/tensorflow/tensorflow/issues/3743#issuecomment-239734999", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3743", "id": 239734999, "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTczNDk5OQ==", "user": {"login": "gustavla", "id": 902935, "node_id": "MDQ6VXNlcjkwMjkzNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/902935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gustavla", "html_url": "https://github.com/gustavla", "followers_url": "https://api.github.com/users/gustavla/followers", "following_url": "https://api.github.com/users/gustavla/following{/other_user}", "gists_url": "https://api.github.com/users/gustavla/gists{/gist_id}", "starred_url": "https://api.github.com/users/gustavla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gustavla/subscriptions", "organizations_url": "https://api.github.com/users/gustavla/orgs", "repos_url": "https://api.github.com/users/gustavla/repos", "events_url": "https://api.github.com/users/gustavla/events{/privacy}", "received_events_url": "https://api.github.com/users/gustavla/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-15T06:05:33Z", "updated_at": "2016-08-15T06:05:33Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Acually, after further digging (catch up at <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"171090787\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/bazelbuild/bazel/issues/1642\" data-hovercard-type=\"issue\" data-hovercard-url=\"/bazelbuild/bazel/issues/1642/hovercard\" href=\"https://github.com/bazelbuild/bazel/issues/1642\">bazelbuild/bazel#1642</a>), it turns out that this is indeed a Tensorflow bug. Instead of <code>gcc -M</code> directly, it is actually the python script <code>crosstool_wrapper_driver_is_not_gcc</code> that gets called, which in turn calls gcc (or in the case I am dealing with nvcc, which then invokes gcc). The problem is that this python script is not acknowledging when <code>-fno-canonical-system-headers</code> is added, so it does not get included in the actual call.</p>\n<p>I tried adding <code>-fno-canonical-system-headers</code> inside the <code>--compiler-options</code> of the python script if it was part of the python script's arguments. This fixed the problem and I got no build errors. What do you think of this solution? The question is, should <em>all</em> arguments (or at least all <code>-f...</code> arguments) be propagated into the <code>--compiler-options</code> or should a special case be done for <code>-fno-canonical-system-headers</code> alone?</p>", "body_text": "Acually, after further digging (catch up at bazelbuild/bazel#1642), it turns out that this is indeed a Tensorflow bug. Instead of gcc -M directly, it is actually the python script crosstool_wrapper_driver_is_not_gcc that gets called, which in turn calls gcc (or in the case I am dealing with nvcc, which then invokes gcc). The problem is that this python script is not acknowledging when -fno-canonical-system-headers is added, so it does not get included in the actual call.\nI tried adding -fno-canonical-system-headers inside the --compiler-options of the python script if it was part of the python script's arguments. This fixed the problem and I got no build errors. What do you think of this solution? The question is, should all arguments (or at least all -f... arguments) be propagated into the --compiler-options or should a special case be done for -fno-canonical-system-headers alone?", "body": "Acually, after further digging (catch up at https://github.com/bazelbuild/bazel/issues/1642), it turns out that this is indeed a Tensorflow bug. Instead of `gcc -M` directly, it is actually the python script `crosstool_wrapper_driver_is_not_gcc` that gets called, which in turn calls gcc (or in the case I am dealing with nvcc, which then invokes gcc). The problem is that this python script is not acknowledging when `-fno-canonical-system-headers` is added, so it does not get included in the actual call.\n\nI tried adding `-fno-canonical-system-headers` inside the `--compiler-options` of the python script if it was part of the python script's arguments. This fixed the problem and I got no build errors. What do you think of this solution? The question is, should _all_ arguments (or at least all `-f...` arguments) be propagated into the `--compiler-options` or should a special case be done for `-fno-canonical-system-headers` alone?\n"}