{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/355046519", "html_url": "https://github.com/tensorflow/tensorflow/issues/15800#issuecomment-355046519", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15800", "id": 355046519, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTA0NjUxOQ==", "user": {"login": "Echooff3", "id": 76337, "node_id": "MDQ6VXNlcjc2MzM3", "avatar_url": "https://avatars3.githubusercontent.com/u/76337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Echooff3", "html_url": "https://github.com/Echooff3", "followers_url": "https://api.github.com/users/Echooff3/followers", "following_url": "https://api.github.com/users/Echooff3/following{/other_user}", "gists_url": "https://api.github.com/users/Echooff3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Echooff3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Echooff3/subscriptions", "organizations_url": "https://api.github.com/users/Echooff3/orgs", "repos_url": "https://api.github.com/users/Echooff3/repos", "events_url": "https://api.github.com/users/Echooff3/events{/privacy}", "received_events_url": "https://api.github.com/users/Echooff3/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-03T15:52:39Z", "updated_at": "2018-01-03T15:52:39Z", "author_association": "NONE", "body_html": "<p>I revisited my input function. Works as expected.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\ntf.logging.set_verbosity(tf.logging.<span class=\"pl-c1\">INFO</span>)\ntrainX <span class=\"pl-k\">=</span> np.array([<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>])\nlabelX <span class=\"pl-k\">=</span> np.array([<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">0</span>])\nnum_classes <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>\nfeature_names <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>f1<span class=\"pl-pds\">'</span></span>]\nfeature_columns <span class=\"pl-k\">=</span> [tf.feature_column.numeric_column(k) <span class=\"pl-k\">for</span> k <span class=\"pl-k\">in</span> feature_names]\nclassifier <span class=\"pl-k\">=</span> tf.estimator.DNNClassifier(<span class=\"pl-v\">feature_columns</span><span class=\"pl-k\">=</span>feature_columns, \n                                            <span class=\"pl-v\">n_classes</span><span class=\"pl-k\">=</span>num_classes, <span class=\"pl-c\"><span class=\"pl-c\">#</span>setting number of classes here</span>\n                                            <span class=\"pl-v\">hidden_units</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>])\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">input_fn</span>():\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">gen1</span>(<span class=\"pl-smi\">a</span>,<span class=\"pl-smi\">b</span>):\n        <span class=\"pl-k\">return</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>f1<span class=\"pl-pds\">'</span></span>:a},b\n    dataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensor_slices((trainX, labelX)).map(gen1)\n    dataset <span class=\"pl-k\">=</span> dataset.repeat(<span class=\"pl-c1\">8</span>)\n    dataset <span class=\"pl-k\">=</span> dataset.batch(<span class=\"pl-c1\">32</span>)\n    iterator <span class=\"pl-k\">=</span> dataset.make_one_shot_iterator()\n    data, labels <span class=\"pl-k\">=</span> iterator.get_next()\n    <span class=\"pl-k\">return</span> data, labels\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">input_fn_pred</span>(<span class=\"pl-smi\">idx</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">gen1</span>(<span class=\"pl-smi\">a</span>,<span class=\"pl-smi\">b</span>):\n        <span class=\"pl-k\">return</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>f1<span class=\"pl-pds\">'</span></span>:[idx]},[idx]\n    dataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensor_slices((trainX, trainX)).map(gen1)\n    dataset <span class=\"pl-k\">=</span> dataset.batch(<span class=\"pl-c1\">1</span>)\n    iterator <span class=\"pl-k\">=</span> dataset.make_one_shot_iterator()\n    data, labels <span class=\"pl-k\">=</span> iterator.get_next()\n    <span class=\"pl-k\">return</span> data, labels\n\nclassifier.train(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span>: input_fn())\n\npredict_results <span class=\"pl-k\">=</span> classifier.predict(\n    <span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span>: input_fn_pred(<span class=\"pl-c1\">2</span>))\n<span class=\"pl-k\">for</span> prediction <span class=\"pl-k\">in</span> predict_results:\n   <span class=\"pl-c1\">print</span> prediction[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>class_ids<span class=\"pl-pds\">\"</span></span>][<span class=\"pl-c1\">0</span>] </pre></div>", "body_text": "I revisited my input function. Works as expected.\nimport tensorflow as tf\nimport numpy as np\ntf.logging.set_verbosity(tf.logging.INFO)\ntrainX = np.array([1,0,2,3])\nlabelX = np.array([1,0,1,0])\nnum_classes = 2\nfeature_names = ['f1']\nfeature_columns = [tf.feature_column.numeric_column(k) for k in feature_names]\nclassifier = tf.estimator.DNNClassifier(feature_columns=feature_columns, \n                                            n_classes=num_classes, #setting number of classes here\n                                            hidden_units=[10])\n\ndef input_fn():\n    def gen1(a,b):\n        return {'f1':a},b\n    dataset = tf.data.Dataset.from_tensor_slices((trainX, labelX)).map(gen1)\n    dataset = dataset.repeat(8)\n    dataset = dataset.batch(32)\n    iterator = dataset.make_one_shot_iterator()\n    data, labels = iterator.get_next()\n    return data, labels\n\ndef input_fn_pred(idx):\n    def gen1(a,b):\n        return {'f1':[idx]},[idx]\n    dataset = tf.data.Dataset.from_tensor_slices((trainX, trainX)).map(gen1)\n    dataset = dataset.batch(1)\n    iterator = dataset.make_one_shot_iterator()\n    data, labels = iterator.get_next()\n    return data, labels\n\nclassifier.train(input_fn=lambda: input_fn())\n\npredict_results = classifier.predict(\n    input_fn=lambda: input_fn_pred(2))\nfor prediction in predict_results:\n   print prediction[\"class_ids\"][0]", "body": "I revisited my input function. Works as expected. \r\n``` python\r\nimport tensorflow as tf\r\nimport numpy as np\r\ntf.logging.set_verbosity(tf.logging.INFO)\r\ntrainX = np.array([1,0,2,3])\r\nlabelX = np.array([1,0,1,0])\r\nnum_classes = 2\r\nfeature_names = ['f1']\r\nfeature_columns = [tf.feature_column.numeric_column(k) for k in feature_names]\r\nclassifier = tf.estimator.DNNClassifier(feature_columns=feature_columns, \r\n                                            n_classes=num_classes, #setting number of classes here\r\n                                            hidden_units=[10])\r\n\r\ndef input_fn():\r\n    def gen1(a,b):\r\n        return {'f1':a},b\r\n    dataset = tf.data.Dataset.from_tensor_slices((trainX, labelX)).map(gen1)\r\n    dataset = dataset.repeat(8)\r\n    dataset = dataset.batch(32)\r\n    iterator = dataset.make_one_shot_iterator()\r\n    data, labels = iterator.get_next()\r\n    return data, labels\r\n\r\ndef input_fn_pred(idx):\r\n    def gen1(a,b):\r\n        return {'f1':[idx]},[idx]\r\n    dataset = tf.data.Dataset.from_tensor_slices((trainX, trainX)).map(gen1)\r\n    dataset = dataset.batch(1)\r\n    iterator = dataset.make_one_shot_iterator()\r\n    data, labels = iterator.get_next()\r\n    return data, labels\r\n\r\nclassifier.train(input_fn=lambda: input_fn())\r\n\r\npredict_results = classifier.predict(\r\n    input_fn=lambda: input_fn_pred(2))\r\nfor prediction in predict_results:\r\n   print prediction[\"class_ids\"][0] \r\n```"}