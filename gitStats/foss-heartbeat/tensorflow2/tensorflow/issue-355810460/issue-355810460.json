{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21983", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21983/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21983/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21983/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21983", "id": 355810460, "node_id": "MDU6SXNzdWUzNTU4MTA0NjA=", "number": 21983, "title": "Keras models converted to Estimators do not write summaries.", "user": {"login": "zmjjmz", "id": 1694612, "node_id": "MDQ6VXNlcjE2OTQ2MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1694612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmjjmz", "html_url": "https://github.com/zmjjmz", "followers_url": "https://api.github.com/users/zmjjmz/followers", "following_url": "https://api.github.com/users/zmjjmz/following{/other_user}", "gists_url": "https://api.github.com/users/zmjjmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmjjmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmjjmz/subscriptions", "organizations_url": "https://api.github.com/users/zmjjmz/orgs", "repos_url": "https://api.github.com/users/zmjjmz/repos", "events_url": "https://api.github.com/users/zmjjmz/events{/privacy}", "received_events_url": "https://api.github.com/users/zmjjmz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "karmel", "id": 667809, "node_id": "MDQ6VXNlcjY2NzgwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/667809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karmel", "html_url": "https://github.com/karmel", "followers_url": "https://api.github.com/users/karmel/followers", "following_url": "https://api.github.com/users/karmel/following{/other_user}", "gists_url": "https://api.github.com/users/karmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/karmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karmel/subscriptions", "organizations_url": "https://api.github.com/users/karmel/orgs", "repos_url": "https://api.github.com/users/karmel/repos", "events_url": "https://api.github.com/users/karmel/events{/privacy}", "received_events_url": "https://api.github.com/users/karmel/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "karmel", "id": 667809, "node_id": "MDQ6VXNlcjY2NzgwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/667809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karmel", "html_url": "https://github.com/karmel", "followers_url": "https://api.github.com/users/karmel/followers", "following_url": "https://api.github.com/users/karmel/following{/other_user}", "gists_url": "https://api.github.com/users/karmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/karmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karmel/subscriptions", "organizations_url": "https://api.github.com/users/karmel/orgs", "repos_url": "https://api.github.com/users/karmel/repos", "events_url": "https://api.github.com/users/karmel/events{/privacy}", "received_events_url": "https://api.github.com/users/karmel/received_events", "type": "User", "site_admin": false}, {"login": "omalleyt12", "id": 29100818, "node_id": "MDQ6VXNlcjI5MTAwODE4", "avatar_url": "https://avatars3.githubusercontent.com/u/29100818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omalleyt12", "html_url": "https://github.com/omalleyt12", "followers_url": "https://api.github.com/users/omalleyt12/followers", "following_url": "https://api.github.com/users/omalleyt12/following{/other_user}", "gists_url": "https://api.github.com/users/omalleyt12/gists{/gist_id}", "starred_url": "https://api.github.com/users/omalleyt12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omalleyt12/subscriptions", "organizations_url": "https://api.github.com/users/omalleyt12/orgs", "repos_url": "https://api.github.com/users/omalleyt12/repos", "events_url": "https://api.github.com/users/omalleyt12/events{/privacy}", "received_events_url": "https://api.github.com/users/omalleyt12/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-08-31T01:42:37Z", "updated_at": "2018-11-20T13:30:23Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Debian Jessie</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: n/a</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: ('v1.9.0-0-g25c197e023', '1.9.0')</li>\n<li><strong>Python version</strong>: 2.7.9</li>\n<li><strong>Bazel version (if compiling from source)</strong>: n/a</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: n/a</li>\n<li><strong>CUDA/cuDNN version</strong>: n/a</li>\n<li><strong>GPU model and memory</strong>: n/a</li>\n<li><strong>Exact command to reproduce</strong>: See provided gist</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I've been setting up Estimators by using Keras layers to define tensors and then feeding them into my own <code>model_fn</code>. This was a pain and prevented me from easily doing stuff like adding regularization, but was necessary until recently due to various bugs within <code>model_to_estimator</code>. Luckily those bugs have been fixed, and I can now use the much more canonical and proper <code>model_to_estimator</code>. Unfortunately there are still some holes...</p>\n<p>Anyways, when I did this I would, in defining the model, set various summaries to be collected simply by calling <code>tf.summary.scalar</code> etc. as documented. However, when I take the same tensors and put them through a Keras model and then through <code>model_to_estimator</code>, the summaries I've defined do not get<br>\nwritten.</p>\n<p>I've tried a few things here, but largely haven't met with any success. One of the workarounds <a href=\"https://groups.google.com/forum/#!topic/keras-users/rEJ1xYqD3AM\" rel=\"nofollow\">I've seen suggested</a> is to try and shove the result of <code>tf.summary.merge_all</code> into a <code>metric</code>, but this does not work since Keras wants those to be numeric and summaries are strings. This does not work if I put this in as <code>target_tensors</code> either, as commented out in the gist.</p>\n<p>Note: I recognize that this is filed against TF 1.9, but I don't see anything in the 1.10 changelog to indicate that this was noted or fixed. I am in a weird situation where it is best for me to use 1.9, unfortunately.</p>\n<h3>Source code / logs</h3>\n<p>The <a href=\"https://gist.github.com/zmjjmz/75ba919d5f2755738252b4d0b0032faa\">gist</a> here reproduces this issue by taking a common function to get the tensors for a model, and creating estimators in both scenarios.</p>\n<p>Below is the first event with a summary from each case. It shows that in the 'plain' case, the summary tag <code>class_norm</code> shows up whereas in the <code>keras</code> case it does not. This is the crux of the issue I'm encountering.</p>\n<p>Plain case:<br>\n<code>{'value': [{'simple_value': 1.0, 'tag': u'enqueue_input/queue/enqueue_input/random_shuffle_queuefraction_over_250_of_750_full'}, {'simple_value': 4.119956016540527, 'tag': u'class_norm'}, {'simple_value': 0.6801050901412964, 'tag': u'loss'}]}</code><br>\nKeras case:<br>\n<code>{'value': [{'simple_value': 1.0, 'tag': u'enqueue_input/queue/enqueue_input/random_shuffle_queuefraction_over_250_of_750_full'}, {'simple_value': 0.8805878758430481, 'tag': u'loss_1'}]}</code></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Debian Jessie\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: n/a\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): ('v1.9.0-0-g25c197e023', '1.9.0')\nPython version: 2.7.9\nBazel version (if compiling from source): n/a\nGCC/Compiler version (if compiling from source): n/a\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\nExact command to reproduce: See provided gist\n\nDescribe the problem\nI've been setting up Estimators by using Keras layers to define tensors and then feeding them into my own model_fn. This was a pain and prevented me from easily doing stuff like adding regularization, but was necessary until recently due to various bugs within model_to_estimator. Luckily those bugs have been fixed, and I can now use the much more canonical and proper model_to_estimator. Unfortunately there are still some holes...\nAnyways, when I did this I would, in defining the model, set various summaries to be collected simply by calling tf.summary.scalar etc. as documented. However, when I take the same tensors and put them through a Keras model and then through model_to_estimator, the summaries I've defined do not get\nwritten.\nI've tried a few things here, but largely haven't met with any success. One of the workarounds I've seen suggested is to try and shove the result of tf.summary.merge_all into a metric, but this does not work since Keras wants those to be numeric and summaries are strings. This does not work if I put this in as target_tensors either, as commented out in the gist.\nNote: I recognize that this is filed against TF 1.9, but I don't see anything in the 1.10 changelog to indicate that this was noted or fixed. I am in a weird situation where it is best for me to use 1.9, unfortunately.\nSource code / logs\nThe gist here reproduces this issue by taking a common function to get the tensors for a model, and creating estimators in both scenarios.\nBelow is the first event with a summary from each case. It shows that in the 'plain' case, the summary tag class_norm shows up whereas in the keras case it does not. This is the crux of the issue I'm encountering.\nPlain case:\n{'value': [{'simple_value': 1.0, 'tag': u'enqueue_input/queue/enqueue_input/random_shuffle_queuefraction_over_250_of_750_full'}, {'simple_value': 4.119956016540527, 'tag': u'class_norm'}, {'simple_value': 0.6801050901412964, 'tag': u'loss'}]}\nKeras case:\n{'value': [{'simple_value': 1.0, 'tag': u'enqueue_input/queue/enqueue_input/random_shuffle_queuefraction_over_250_of_750_full'}, {'simple_value': 0.8805878758430481, 'tag': u'loss_1'}]}", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Debian Jessie\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: n/a\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: ('v1.9.0-0-g25c197e023', '1.9.0') \r\n- **Python version**: 2.7.9\r\n- **Bazel version (if compiling from source)**: n/a\r\n- **GCC/Compiler version (if compiling from source)**: n/a\r\n- **CUDA/cuDNN version**: n/a\r\n- **GPU model and memory**: n/a\r\n- **Exact command to reproduce**: See provided gist\r\n\r\n### Describe the problem\r\nI've been setting up Estimators by using Keras layers to define tensors and then feeding them into my own `model_fn`. This was a pain and prevented me from easily doing stuff like adding regularization, but was necessary until recently due to various bugs within `model_to_estimator`. Luckily those bugs have been fixed, and I can now use the much more canonical and proper `model_to_estimator`. Unfortunately there are still some holes...\r\n\r\nAnyways, when I did this I would, in defining the model, set various summaries to be collected simply by calling `tf.summary.scalar` etc. as documented. However, when I take the same tensors and put them through a Keras model and then through `model_to_estimator`, the summaries I've defined do not get \r\nwritten.\r\n\r\nI've tried a few things here, but largely haven't met with any success. One of the workarounds [I've seen suggested](https://groups.google.com/forum/#!topic/keras-users/rEJ1xYqD3AM) is to try and shove the result of `tf.summary.merge_all` into a `metric`, but this does not work since Keras wants those to be numeric and summaries are strings. This does not work if I put this in as `target_tensors` either, as commented out in the gist.\r\n\r\nNote: I recognize that this is filed against TF 1.9, but I don't see anything in the 1.10 changelog to indicate that this was noted or fixed. I am in a weird situation where it is best for me to use 1.9, unfortunately.\r\n\r\n### Source code / logs\r\nThe [gist](https://gist.github.com/zmjjmz/75ba919d5f2755738252b4d0b0032faa) here reproduces this issue by taking a common function to get the tensors for a model, and creating estimators in both scenarios. \r\n\r\nBelow is the first event with a summary from each case. It shows that in the 'plain' case, the summary tag `class_norm` shows up whereas in the `keras` case it does not. This is the crux of the issue I'm encountering.\r\n\r\nPlain case:\r\n`{'value': [{'simple_value': 1.0, 'tag': u'enqueue_input/queue/enqueue_input/random_shuffle_queuefraction_over_250_of_750_full'}, {'simple_value': 4.119956016540527, 'tag': u'class_norm'}, {'simple_value': 0.6801050901412964, 'tag': u'loss'}]}`\r\nKeras case:\r\n`{'value': [{'simple_value': 1.0, 'tag': u'enqueue_input/queue/enqueue_input/random_shuffle_queuefraction_over_250_of_750_full'}, {'simple_value': 0.8805878758430481, 'tag': u'loss_1'}]}`\r\n\r\n"}