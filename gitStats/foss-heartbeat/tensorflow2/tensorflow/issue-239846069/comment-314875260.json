{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/314875260", "html_url": "https://github.com/tensorflow/tensorflow/issues/11186#issuecomment-314875260", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11186", "id": 314875260, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDg3NTI2MA==", "user": {"login": "ppwwyyxx", "id": 1381301, "node_id": "MDQ6VXNlcjEzODEzMDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1381301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppwwyyxx", "html_url": "https://github.com/ppwwyyxx", "followers_url": "https://api.github.com/users/ppwwyyxx/followers", "following_url": "https://api.github.com/users/ppwwyyxx/following{/other_user}", "gists_url": "https://api.github.com/users/ppwwyyxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppwwyyxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppwwyyxx/subscriptions", "organizations_url": "https://api.github.com/users/ppwwyyxx/orgs", "repos_url": "https://api.github.com/users/ppwwyyxx/repos", "events_url": "https://api.github.com/users/ppwwyyxx/events{/privacy}", "received_events_url": "https://api.github.com/users/ppwwyyxx/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-12T19:41:44Z", "updated_at": "2017-07-12T19:41:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I believe your issue can be described in this small repro:</p>\n<div class=\"highlight highlight-source-python\"><pre>ones <span class=\"pl-k\">=</span> np.ones((<span class=\"pl-c1\">10</span>,<span class=\"pl-c1\">10</span>))\nv <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>asdf<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>,<span class=\"pl-c1\">10</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\nold_state <span class=\"pl-k\">=</span> v.read_value()   <span class=\"pl-c\"><span class=\"pl-c\">#</span> equivalent to tf.identity</span>\n<span class=\"pl-k\">with</span> tf.control_dependencies([old_state]):\n    reward <span class=\"pl-k\">=</span> tf.assign_add(v, ones)\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    tf.global_variables_initializer().run()\n    a, b <span class=\"pl-k\">=</span> sess.run([reward, old_state])\n    <span class=\"pl-c1\">print</span>(a.sum(), b.sum())</pre></div>\n<p>The above code, though appears to be deterministic (due to the control dependency), actually is not. It sometimes prints two equal results, sometimes not.</p>\n<p>Using <code>get_variable(..., use_resource=True)</code> (will become default in the future) seems to fix the problem. Could you try this? <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2111293\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/danijar\">@danijar</a></p>", "body_text": "I believe your issue can be described in this small repro:\nones = np.ones((10,10))\nv = tf.get_variable('asdf', shape=[10,10], dtype=tf.float32)\nold_state = v.read_value()   # equivalent to tf.identity\nwith tf.control_dependencies([old_state]):\n    reward = tf.assign_add(v, ones)\nwith tf.Session() as sess:\n    tf.global_variables_initializer().run()\n    a, b = sess.run([reward, old_state])\n    print(a.sum(), b.sum())\nThe above code, though appears to be deterministic (due to the control dependency), actually is not. It sometimes prints two equal results, sometimes not.\nUsing get_variable(..., use_resource=True) (will become default in the future) seems to fix the problem. Could you try this? @danijar", "body": "I believe your issue can be described in this small repro:\r\n```python\r\nones = np.ones((10,10))\r\nv = tf.get_variable('asdf', shape=[10,10], dtype=tf.float32)\r\nold_state = v.read_value()   # equivalent to tf.identity\r\nwith tf.control_dependencies([old_state]):\r\n    reward = tf.assign_add(v, ones)\r\nwith tf.Session() as sess:\r\n    tf.global_variables_initializer().run()\r\n    a, b = sess.run([reward, old_state])\r\n    print(a.sum(), b.sum())\r\n```\r\nThe above code, though appears to be deterministic (due to the control dependency), actually is not. It sometimes prints two equal results, sometimes not.\r\n\r\nUsing `get_variable(..., use_resource=True)` (will become default in the future) seems to fix the problem. Could you try this? @danijar "}