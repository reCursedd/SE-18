{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/353148577", "html_url": "https://github.com/tensorflow/tensorflow/issues/11186#issuecomment-353148577", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11186", "id": 353148577, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzE0ODU3Nw==", "user": {"login": "Emerald01", "id": 31748898, "node_id": "MDQ6VXNlcjMxNzQ4ODk4", "avatar_url": "https://avatars2.githubusercontent.com/u/31748898?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emerald01", "html_url": "https://github.com/Emerald01", "followers_url": "https://api.github.com/users/Emerald01/followers", "following_url": "https://api.github.com/users/Emerald01/following{/other_user}", "gists_url": "https://api.github.com/users/Emerald01/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emerald01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emerald01/subscriptions", "organizations_url": "https://api.github.com/users/Emerald01/orgs", "repos_url": "https://api.github.com/users/Emerald01/repos", "events_url": "https://api.github.com/users/Emerald01/events{/privacy}", "received_events_url": "https://api.github.com/users/Emerald01/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-20T18:44:59Z", "updated_at": "2017-12-20T18:45:41Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2111293\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/danijar\">@danijar</a><br>\nSo if I understand this issue correctly, does this mean that:<br>\nfor identity:<br>\n<code>var_identity = tf.identity(var)</code></p>\n<p>if var and var_identity are in the same device, var_identity would be similar to a C++ reference to var (basically they are the same thing in the same memory, var_identity is just an alias for var), any change in var would be represented equally in var_identity. In this sense, I think implementation-wise, it is similar to that in get_variable() function set var_identity a reusable variable of var.</p>\n<p>if var_identity is transferred to another device, which I think it is pretty typical when training multiple workers and they are shared by one param server, the var_indentity is essentially a copy of var. This makes sense, because, between different devices, nothing can be really shared but a copy would be the best solution.</p>", "body_text": "@danijar\nSo if I understand this issue correctly, does this mean that:\nfor identity:\nvar_identity = tf.identity(var)\nif var and var_identity are in the same device, var_identity would be similar to a C++ reference to var (basically they are the same thing in the same memory, var_identity is just an alias for var), any change in var would be represented equally in var_identity. In this sense, I think implementation-wise, it is similar to that in get_variable() function set var_identity a reusable variable of var.\nif var_identity is transferred to another device, which I think it is pretty typical when training multiple workers and they are shared by one param server, the var_indentity is essentially a copy of var. This makes sense, because, between different devices, nothing can be really shared but a copy would be the best solution.", "body": "@danijar \r\nSo if I understand this issue correctly, does this mean that:\r\nfor identity:\r\n`var_identity = tf.identity(var)`\r\n\r\nif var and var_identity are in the same device, var_identity would be similar to a C++ reference to var (basically they are the same thing in the same memory, var_identity is just an alias for var), any change in var would be represented equally in var_identity. In this sense, I think implementation-wise, it is similar to that in get_variable() function set var_identity a reusable variable of var.\r\n\r\nif var_identity is transferred to another device, which I think it is pretty typical when training multiple workers and they are shared by one param server, the var_indentity is essentially a copy of var. This makes sense, because, between different devices, nothing can be really shared but a copy would be the best solution."}