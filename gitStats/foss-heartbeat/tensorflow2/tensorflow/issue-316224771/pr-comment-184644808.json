{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/184644808", "pull_request_review_id": 115884017, "id": 184644808, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDY0NDgwOA==", "diff_hunk": "@@ -50,79 +51,184 @@ def rejection_resample(class_func, target_dist, initial_dist=None, seed=None):\n     A `Dataset` transformation function, which can be passed to\n     @{tf.data.Dataset.apply}.\n   \"\"\"\n-\n   def _apply_fn(dataset):\n     \"\"\"Function from `Dataset` to `Dataset` that applies the transformation.\"\"\"\n-    dist_estimation_batch_size = 32\n     target_dist_t = ops.convert_to_tensor(target_dist, name=\"target_dist\")\n     class_values_ds = dataset.map(class_func)\n+\n+    # Get initial distribution.\n     if initial_dist is not None:\n       initial_dist_t = ops.convert_to_tensor(initial_dist, name=\"initial_dist\")\n-      acceptance_dist = _calculate_acceptance_probs(initial_dist_t,\n-                                                    target_dist_t)\n+      acceptance_dist, prob_of_original = (\n+          _calculate_acceptance_probs_with_mixing(initial_dist_t,\n+                                                  target_dist_t))\n       initial_dist_ds = dataset_ops.Dataset.from_tensors(\n           initial_dist_t).repeat()\n       acceptance_dist_ds = dataset_ops.Dataset.from_tensors(\n           acceptance_dist).repeat()\n+      prob_of_original_ds = dataset_ops.Dataset.from_tensors(\n+          prob_of_original).repeat()\n+    else:\n+      initial_dist_ds = _estimate_initial_dist_ds(\n+          target_dist_t, class_values_ds)\n+      acceptance_and_original_prob_ds = initial_dist_ds.map(\n+          lambda initial: _calculate_acceptance_probs_with_mixing(\n+              initial, target_dist_t))\n+      acceptance_dist_ds = acceptance_and_original_prob_ds.map(\n+          lambda accept_prob, _: accept_prob)\n+      prob_of_original_ds = acceptance_and_original_prob_ds.map(\n+          lambda _, prob_original: prob_original)\n+      prob_of_original = None\n+    filtered_ds = _filter_ds(dataset, acceptance_dist_ds, initial_dist_ds,\n+                             class_values_ds, seed)\n+    # Prefetch filtered dataset for speed.\n+    filtered_ds = filtered_ds.prefetch(3)\n+\n+    prob_original_static = _get_prob_original_static(\n+        initial_dist, target_dist_t) if initial_dist is not None else None\n+    if prob_original_static == 1:\n+      return dataset_ops.Dataset.zip((class_values_ds, dataset))\n+    elif prob_original_static == 0:\n+      return filtered_ds\n     else:\n-      num_classes = (target_dist_t.shape[0].value or\n-                     array_ops.shape(target_dist_t)[0])\n-      smoothing_constant = 10\n-      initial_examples_per_class_seen = array_ops.fill(\n-          [num_classes], np.int64(smoothing_constant))\n-\n-      def update_estimate_and_tile(num_examples_per_class_seen, c):\n-        updated_examples_per_class_seen, dist = _estimate_data_distribution(\n-            c, num_examples_per_class_seen)\n-        tiled_dist = array_ops.tile(\n-            array_ops.expand_dims(dist, 0), [dist_estimation_batch_size, 1])\n-        return updated_examples_per_class_seen, tiled_dist\n-\n-      initial_dist_ds = (class_values_ds.batch(dist_estimation_batch_size)\n-                         .apply(scan_ops.scan(initial_examples_per_class_seen,\n-                                              update_estimate_and_tile))\n-                         .apply(batching.unbatch()))\n-      acceptance_dist_ds = initial_dist_ds.map(\n-          lambda initial: _calculate_acceptance_probs(initial, target_dist_t))\n-\n-    def maybe_warn_on_large_rejection(accept_dist, initial_dist):\n-      proportion_rejected = math_ops.reduce_sum(\n-          (1 - accept_dist) * initial_dist)\n-      return control_flow_ops.cond(\n-          math_ops.less(proportion_rejected, .5),\n-          lambda: accept_dist,\n-          lambda: logging_ops.Print(  # pylint: disable=g-long-lambda\n-              accept_dist, [proportion_rejected, initial_dist, accept_dist],\n-              message=\"Proportion of examples rejected by sampler is high: \",\n-              summarize=100,\n-              first_n=10))\n-\n-    acceptance_dist_ds = (dataset_ops.Dataset.zip((acceptance_dist_ds,\n-                                                   initial_dist_ds))\n-                          .map(maybe_warn_on_large_rejection))\n-\n-    def _gather_and_copy(class_val, acceptance_prob, data):\n-      return (class_val, array_ops.gather(acceptance_prob, class_val), data)\n-    current_probabilities_and_class_and_data_ds = dataset_ops.Dataset.zip(\n-        (class_values_ds, acceptance_dist_ds, dataset)).map(_gather_and_copy)\n-    filtered_ds = (\n-        current_probabilities_and_class_and_data_ds\n-        .filter(lambda _1, p, _2: random_ops.random_uniform([], seed=seed) < p))\n-    return filtered_ds.map(lambda class_value, _, data: (class_value, data))\n+      return interleave_ops.sample_from_datasets(\n+          [dataset_ops.Dataset.zip((class_values_ds, dataset)), filtered_ds],\n+          weights=prob_of_original_ds.map(lambda prob: [(prob, 1.0 - prob)]),\n+          seed=seed)\n \n   return _apply_fn\n \n \n-def _calculate_acceptance_probs(initial_probs, target_probs):\n-  \"\"\"Calculate the per-class acceptance rates.\n+def _get_prob_original_static(initial_dist_t, target_dist_t):\n+  \"\"\"Returns the static probability of sampling from the original.\n+\n+  For some reason, `tensor_util.constant_value(prob_of_original)` of a ratio", "path": "tensorflow/contrib/data/python/ops/resampling.py", "position": null, "original_position": 113, "commit_id": "29cd3f96322f3d5326a2dbe6a9c502919159c9fc", "original_commit_id": "ddbc65489b722d54cab9629565e9c93e337b4b98", "user": {"login": "joel-shor", "id": 6020988, "node_id": "MDQ6VXNlcjYwMjA5ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6020988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joel-shor", "html_url": "https://github.com/joel-shor", "followers_url": "https://api.github.com/users/joel-shor/followers", "following_url": "https://api.github.com/users/joel-shor/following{/other_user}", "gists_url": "https://api.github.com/users/joel-shor/gists{/gist_id}", "starred_url": "https://api.github.com/users/joel-shor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joel-shor/subscriptions", "organizations_url": "https://api.github.com/users/joel-shor/orgs", "repos_url": "https://api.github.com/users/joel-shor/repos", "events_url": "https://api.github.com/users/joel-shor/events{/privacy}", "received_events_url": "https://api.github.com/users/joel-shor/received_events", "type": "User", "site_admin": false}, "body": "Done", "created_at": "2018-04-27T10:03:04Z", "updated_at": "2018-05-01T23:15:01Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/18730#discussion_r184644808", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18730", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/184644808"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/18730#discussion_r184644808"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18730"}}, "body_html": "<p>Done</p>", "body_text": "Done", "in_reply_to_id": 184559610}