{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/339524471", "html_url": "https://github.com/tensorflow/tensorflow/issues/13575#issuecomment-339524471", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13575", "id": 339524471, "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTUyNDQ3MQ==", "user": {"login": "saxenasaurabh", "id": 3967488, "node_id": "MDQ6VXNlcjM5Njc0ODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3967488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saxenasaurabh", "html_url": "https://github.com/saxenasaurabh", "followers_url": "https://api.github.com/users/saxenasaurabh/followers", "following_url": "https://api.github.com/users/saxenasaurabh/following{/other_user}", "gists_url": "https://api.github.com/users/saxenasaurabh/gists{/gist_id}", "starred_url": "https://api.github.com/users/saxenasaurabh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saxenasaurabh/subscriptions", "organizations_url": "https://api.github.com/users/saxenasaurabh/orgs", "repos_url": "https://api.github.com/users/saxenasaurabh/repos", "events_url": "https://api.github.com/users/saxenasaurabh/events{/privacy}", "received_events_url": "https://api.github.com/users/saxenasaurabh/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-26T01:42:20Z", "updated_at": "2017-10-26T01:42:30Z", "author_association": "MEMBER", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1780466\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bodokaiser\">@bodokaiser</a>  for the detailed repro examples. I was able to reproduce using this example on Windows.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-c1\">SIZE</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">int</span>(<span class=\"pl-c1\">64e6</span>)\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">_bytes_feature</span>(<span class=\"pl-smi\">value</span>):\n  <span class=\"pl-k\">return</span> tf.train.Feature(<span class=\"pl-v\">bytes_list</span><span class=\"pl-k\">=</span>tf.train.BytesList(<span class=\"pl-v\">value</span><span class=\"pl-k\">=</span>value))\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">decode</span>(<span class=\"pl-smi\">example</span>):\n  feature_keys <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>encoded<span class=\"pl-pds\">'</span></span>: tf.FixedLenFeature((), tf.string)}\n  features <span class=\"pl-k\">=</span> tf.parse_single_example(example, <span class=\"pl-v\">features</span><span class=\"pl-k\">=</span>feature_keys)\n  <span class=\"pl-k\">return</span> tf.decode_raw(features[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>encoded<span class=\"pl-pds\">'</span></span>], tf.int32)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">encode</span>(<span class=\"pl-smi\">array</span>):\n  <span class=\"pl-k\">return</span> tf.train.Example(<span class=\"pl-v\">features</span><span class=\"pl-k\">=</span>tf.train.Features(<span class=\"pl-v\">feature</span><span class=\"pl-k\">=</span>{\n      <span class=\"pl-s\"><span class=\"pl-pds\">'</span>encoded<span class=\"pl-pds\">'</span></span>: _bytes_feature([array.astype(np.int32).tobytes()]),\n    })).SerializeToString()\n\n<span class=\"pl-k\">with</span> tf.python_io.TFRecordWriter(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo.tfrecord<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> writer:\n  writer.write(encode(np.ones([<span class=\"pl-c1\">SIZE</span>], np.int32)))\n\ndataset <span class=\"pl-k\">=</span> tf.data.TFRecordDataset(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo.tfrecord<span class=\"pl-pds\">'</span></span>).map(decode)\n\ndata <span class=\"pl-k\">=</span> dataset.make_one_shot_iterator().get_next()\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> session:\n  <span class=\"pl-c1\">print</span>(session.run(data).shape)</pre></div>\n<p>However, changing from <code>BytesList</code> to <code>Int64</code> seems to work (for this example at least). I am looking into this further.</p>", "body_text": "Thanks @bodokaiser  for the detailed repro examples. I was able to reproduce using this example on Windows.\nimport numpy as np\nimport tensorflow as tf\nSIZE = int(64e6)\ndef _bytes_feature(value):\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=value))\n\ndef decode(example):\n  feature_keys = {'encoded': tf.FixedLenFeature((), tf.string)}\n  features = tf.parse_single_example(example, features=feature_keys)\n  return tf.decode_raw(features['encoded'], tf.int32)\n\ndef encode(array):\n  return tf.train.Example(features=tf.train.Features(feature={\n      'encoded': _bytes_feature([array.astype(np.int32).tobytes()]),\n    })).SerializeToString()\n\nwith tf.python_io.TFRecordWriter('foo.tfrecord') as writer:\n  writer.write(encode(np.ones([SIZE], np.int32)))\n\ndataset = tf.data.TFRecordDataset('foo.tfrecord').map(decode)\n\ndata = dataset.make_one_shot_iterator().get_next()\n\nwith tf.Session() as session:\n  print(session.run(data).shape)\nHowever, changing from BytesList to Int64 seems to work (for this example at least). I am looking into this further.", "body": "Thanks @bodokaiser  for the detailed repro examples. I was able to reproduce using this example on Windows.\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\nSIZE = int(64e6)\r\ndef _bytes_feature(value):\r\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=value))\r\n\r\ndef decode(example):\r\n  feature_keys = {'encoded': tf.FixedLenFeature((), tf.string)}\r\n  features = tf.parse_single_example(example, features=feature_keys)\r\n  return tf.decode_raw(features['encoded'], tf.int32)\r\n\r\ndef encode(array):\r\n  return tf.train.Example(features=tf.train.Features(feature={\r\n      'encoded': _bytes_feature([array.astype(np.int32).tobytes()]),\r\n    })).SerializeToString()\r\n\r\nwith tf.python_io.TFRecordWriter('foo.tfrecord') as writer:\r\n  writer.write(encode(np.ones([SIZE], np.int32)))\r\n\r\ndataset = tf.data.TFRecordDataset('foo.tfrecord').map(decode)\r\n\r\ndata = dataset.make_one_shot_iterator().get_next()\r\n\r\nwith tf.Session() as session:\r\n  print(session.run(data).shape)\r\n```\r\n\r\nHowever, changing from `BytesList` to `Int64` seems to work (for this example at least). I am looking into this further."}