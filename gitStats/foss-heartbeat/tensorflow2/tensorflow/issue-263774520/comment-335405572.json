{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/335405572", "html_url": "https://github.com/tensorflow/tensorflow/issues/13575#issuecomment-335405572", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13575", "id": 335405572, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNTQwNTU3Mg==", "user": {"login": "bodokaiser", "id": 1780466, "node_id": "MDQ6VXNlcjE3ODA0NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1780466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bodokaiser", "html_url": "https://github.com/bodokaiser", "followers_url": "https://api.github.com/users/bodokaiser/followers", "following_url": "https://api.github.com/users/bodokaiser/following{/other_user}", "gists_url": "https://api.github.com/users/bodokaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/bodokaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bodokaiser/subscriptions", "organizations_url": "https://api.github.com/users/bodokaiser/orgs", "repos_url": "https://api.github.com/users/bodokaiser/repos", "events_url": "https://api.github.com/users/bodokaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/bodokaiser/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-10T08:51:26Z", "updated_at": "2017-10-10T10:03:37Z", "author_association": "NONE", "body_html": "<pre><code>import numpy as np\nimport tensorflow as tf\n\n\nSIZE = int(64e6)\n\ndef _bytes_feature(value):\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=value))\n\n\ndef decode(example):\n  feature_keys = {'encoded': tf.FixedLenFeature((), tf.string)}\n  features = tf.parse_single_example(example, features=feature_keys)\n  return tf.decode_raw(features['encoded'], tf.int32)\n\n\ndef encode(array):\n  return tf.train.Example(features=tf.train.Features(feature={\n      'encoded': _bytes_feature([array.astype(np.int32).tobytes()]),\n    })).SerializeToString()\n\n\nwith tf.python_io.TFRecordWriter('foo.tfrecord') as writer:\n  writer.write(encode(np.ones([SIZE], np.int32)))\n\n\ndataset = tf.data.TFRecordDataset('foo.tfrecord').map(decode)\n\ndata = dataset.make_one_shot_iterator().get_next()\n\nwith tf.Session() as session:\n  print(session.run(data).shape)\n</code></pre>\n<p>This should fails too on windows.</p>", "body_text": "import numpy as np\nimport tensorflow as tf\n\n\nSIZE = int(64e6)\n\ndef _bytes_feature(value):\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=value))\n\n\ndef decode(example):\n  feature_keys = {'encoded': tf.FixedLenFeature((), tf.string)}\n  features = tf.parse_single_example(example, features=feature_keys)\n  return tf.decode_raw(features['encoded'], tf.int32)\n\n\ndef encode(array):\n  return tf.train.Example(features=tf.train.Features(feature={\n      'encoded': _bytes_feature([array.astype(np.int32).tobytes()]),\n    })).SerializeToString()\n\n\nwith tf.python_io.TFRecordWriter('foo.tfrecord') as writer:\n  writer.write(encode(np.ones([SIZE], np.int32)))\n\n\ndataset = tf.data.TFRecordDataset('foo.tfrecord').map(decode)\n\ndata = dataset.make_one_shot_iterator().get_next()\n\nwith tf.Session() as session:\n  print(session.run(data).shape)\n\nThis should fails too on windows.", "body": "```\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n\r\nSIZE = int(64e6)\r\n\r\ndef _bytes_feature(value):\r\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=value))\r\n\r\n\r\ndef decode(example):\r\n  feature_keys = {'encoded': tf.FixedLenFeature((), tf.string)}\r\n  features = tf.parse_single_example(example, features=feature_keys)\r\n  return tf.decode_raw(features['encoded'], tf.int32)\r\n\r\n\r\ndef encode(array):\r\n  return tf.train.Example(features=tf.train.Features(feature={\r\n      'encoded': _bytes_feature([array.astype(np.int32).tobytes()]),\r\n    })).SerializeToString()\r\n\r\n\r\nwith tf.python_io.TFRecordWriter('foo.tfrecord') as writer:\r\n  writer.write(encode(np.ones([SIZE], np.int32)))\r\n\r\n\r\ndataset = tf.data.TFRecordDataset('foo.tfrecord').map(decode)\r\n\r\ndata = dataset.make_one_shot_iterator().get_next()\r\n\r\nwith tf.Session() as session:\r\n  print(session.run(data).shape)\r\n```\r\n\r\nThis should fails too on windows."}