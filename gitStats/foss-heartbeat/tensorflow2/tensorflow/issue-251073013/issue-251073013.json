{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12372", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12372/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12372/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12372/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12372", "id": 251073013, "node_id": "MDU6SXNzdWUyNTEwNzMwMTM=", "number": 12372, "title": "tf.contrib.data.Dataset does not correctly handle nested dictionaries", "user": {"login": "hexahedria", "id": 4992683, "node_id": "MDQ6VXNlcjQ5OTI2ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/4992683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hexahedria", "html_url": "https://github.com/hexahedria", "followers_url": "https://api.github.com/users/hexahedria/followers", "following_url": "https://api.github.com/users/hexahedria/following{/other_user}", "gists_url": "https://api.github.com/users/hexahedria/gists{/gist_id}", "starred_url": "https://api.github.com/users/hexahedria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hexahedria/subscriptions", "organizations_url": "https://api.github.com/users/hexahedria/orgs", "repos_url": "https://api.github.com/users/hexahedria/repos", "events_url": "https://api.github.com/users/hexahedria/events{/privacy}", "received_events_url": "https://api.github.com/users/hexahedria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-08-17T21:08:36Z", "updated_at": "2017-08-21T20:16:26Z", "closed_at": "2017-08-21T20:16:26Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 14.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.3.0-rc2-20-g0787eee</li>\n<li><strong>Python version</strong>: 2.7</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p><code>tf.contrib.data.Dataset</code> objects do not correctly deal with nested dictionary structures. When using a dataset with a nested dictionary, the inner dictionaries are replaced with the first tensor in that inner dictionary, and following tensors are restored for incorrect keys.</p>\n<p>This is not an issue with <code>tf.contrib.framework.nest</code>, only with datasets, which appear to instead use <code>tensorflow.contrib.data.python.util.nest</code>. The particular difference causing the bug appears to be <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/util/nest.py#L279\">https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/util/nest.py#L279</a> vs. <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/contrib/data/python/util/nest.py#L184\">https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/contrib/data/python/util/nest.py#L184</a></p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.contrib.data.python.util <span class=\"pl-k\">import</span> nest <span class=\"pl-k\">as</span> data_nest\n\ntest_value <span class=\"pl-k\">=</span> {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>: {\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>aa<span class=\"pl-pds\">\"</span></span>: tf.constant(<span class=\"pl-c1\">1</span>),\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ab<span class=\"pl-pds\">\"</span></span>: tf.constant([<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">2</span>]),\n    },\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b<span class=\"pl-pds\">\"</span></span>: tf.constant([<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>]),\n}\n\n\n<span class=\"pl-c1\">print</span> tf.contrib.framework.nest.map_structure(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">t</span>: t.shape, test_value)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>   'a': {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>       'aa': TensorShape([]),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>       'ab': TensorShape([Dimension(2)])</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>   },</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>   'b': TensorShape([Dimension(3)])</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> } &lt;- these are the correct shapes</span>\n\n\nd <span class=\"pl-k\">=</span> tf.contrib.data.Dataset.from_tensors(test_value)\n<span class=\"pl-c1\">print</span> d.output_shapes\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>   'a': TensorShape([]),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>   'b': TensorShape([Dimension(2)])</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> } &lt;- incorrect</span>\n\n<span class=\"pl-c1\">print</span> data_nest.map_structure(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">t</span>: t.shape, test_value)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> {</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>   'a': TensorShape([]),</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>   'b': TensorShape([Dimension(2)])</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> } &lt;- incorrect</span></pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 14.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.3.0-rc2-20-g0787eee\nPython version: 2.7\nBazel version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\ntf.contrib.data.Dataset objects do not correctly deal with nested dictionary structures. When using a dataset with a nested dictionary, the inner dictionaries are replaced with the first tensor in that inner dictionary, and following tensors are restored for incorrect keys.\nThis is not an issue with tf.contrib.framework.nest, only with datasets, which appear to instead use tensorflow.contrib.data.python.util.nest. The particular difference causing the bug appears to be https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/util/nest.py#L279 vs. https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/contrib/data/python/util/nest.py#L184\nSource code / logs\nimport tensorflow as tf\nfrom tensorflow.contrib.data.python.util import nest as data_nest\n\ntest_value = {\n    \"a\": {\n        \"aa\": tf.constant(1),\n        \"ab\": tf.constant([2,2]),\n    },\n    \"b\": tf.constant([3, 3, 3]),\n}\n\n\nprint tf.contrib.framework.nest.map_structure(lambda t: t.shape, test_value)\n# {\n#   'a': {\n#       'aa': TensorShape([]),\n#       'ab': TensorShape([Dimension(2)])\n#   },\n#   'b': TensorShape([Dimension(3)])\n# } <- these are the correct shapes\n\n\nd = tf.contrib.data.Dataset.from_tensors(test_value)\nprint d.output_shapes\n# {\n#   'a': TensorShape([]),\n#   'b': TensorShape([Dimension(2)])\n# } <- incorrect\n\nprint data_nest.map_structure(lambda t: t.shape, test_value)\n# {\n#   'a': TensorShape([]),\n#   'b': TensorShape([Dimension(2)])\n# } <- incorrect", "body": "\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 14.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.3.0-rc2-20-g0787eee\r\n- **Python version**: 2.7\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\n`tf.contrib.data.Dataset` objects do not correctly deal with nested dictionary structures. When using a dataset with a nested dictionary, the inner dictionaries are replaced with the first tensor in that inner dictionary, and following tensors are restored for incorrect keys.\r\n\r\nThis is not an issue with `tf.contrib.framework.nest`, only with datasets, which appear to instead use `tensorflow.contrib.data.python.util.nest`. The particular difference causing the bug appears to be https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/util/nest.py#L279 vs. https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/contrib/data/python/util/nest.py#L184\r\n\r\n### Source code / logs\r\n```python\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib.data.python.util import nest as data_nest\r\n\r\ntest_value = {\r\n    \"a\": {\r\n        \"aa\": tf.constant(1),\r\n        \"ab\": tf.constant([2,2]),\r\n    },\r\n    \"b\": tf.constant([3, 3, 3]),\r\n}\r\n\r\n\r\nprint tf.contrib.framework.nest.map_structure(lambda t: t.shape, test_value)\r\n# {\r\n#   'a': {\r\n#       'aa': TensorShape([]),\r\n#       'ab': TensorShape([Dimension(2)])\r\n#   },\r\n#   'b': TensorShape([Dimension(3)])\r\n# } <- these are the correct shapes\r\n\r\n\r\nd = tf.contrib.data.Dataset.from_tensors(test_value)\r\nprint d.output_shapes\r\n# {\r\n#   'a': TensorShape([]),\r\n#   'b': TensorShape([Dimension(2)])\r\n# } <- incorrect\r\n\r\nprint data_nest.map_structure(lambda t: t.shape, test_value)\r\n# {\r\n#   'a': TensorShape([]),\r\n#   'b': TensorShape([Dimension(2)])\r\n# } <- incorrect\r\n```\r\n"}