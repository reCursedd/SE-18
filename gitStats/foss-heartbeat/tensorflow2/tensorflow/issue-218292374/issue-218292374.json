{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8850", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8850/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8850/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8850/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8850", "id": 218292374, "node_id": "MDU6SXNzdWUyMTgyOTIzNzQ=", "number": 8850, "title": "Error in running text_classification_character_rnn.py", "user": {"login": "mahbuburrahman", "id": 6240443, "node_id": "MDQ6VXNlcjYyNDA0NDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6240443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahbuburrahman", "html_url": "https://github.com/mahbuburrahman", "followers_url": "https://api.github.com/users/mahbuburrahman/followers", "following_url": "https://api.github.com/users/mahbuburrahman/following{/other_user}", "gists_url": "https://api.github.com/users/mahbuburrahman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahbuburrahman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahbuburrahman/subscriptions", "organizations_url": "https://api.github.com/users/mahbuburrahman/orgs", "repos_url": "https://api.github.com/users/mahbuburrahman/repos", "events_url": "https://api.github.com/users/mahbuburrahman/events{/privacy}", "received_events_url": "https://api.github.com/users/mahbuburrahman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-03-30T18:48:17Z", "updated_at": "2017-12-29T22:26:13Z", "closed_at": "2017-12-29T22:26:13Z", "author_association": "NONE", "body_html": "<p>I am running the exact example given in the repo for text classification using rnn. I am getting the following error.<br>\nTypeError: Tensors in list passed to 'values' of 'ConcatV2' Op have types [int32, float32] that don't all match.<br>\nExample: <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/learn/text_classification_character_rnn.py\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/learn/text_classification_character_rnn.py</a></p>\n<p>Would you please let me know how can I fix it.</p>\n<pre><code>Detail error. \nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-5-90c7a682f760&gt; in &lt;module&gt;()\n     23 \n     24 # Train and predict\n---&gt; 25 classifier.fit(x_train, y_train, steps=100)\n     26 y_predicted = [\n     27   p['class'] for p in classifier.predict(\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.pyc in new_func(*args, **kwargs)\n    278             _call_location(), decorator_utils.get_qualified_name(func),\n    279             func.__module__, arg_name, date, instructions)\n--&gt; 280       return func(*args, **kwargs)\n    281     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(\n    282         func.__doc__, date, instructions)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    408     _verify_input_args(x, y, input_fn, None, batch_size)\n    409     if x is not None:\n--&gt; 410       SKCompat(self).fit(x, y, batch_size, steps, max_steps, monitors)\n    411       return self\n    412 \n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in fit(self, x, y, batch_size, steps, max_steps, monitors)\n   1351                         steps=steps,\n   1352                         max_steps=max_steps,\n-&gt; 1353                         monitors=all_monitors)\n   1354     return self\n   1355 \n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.pyc in new_func(*args, **kwargs)\n    278             _call_location(), decorator_utils.get_qualified_name(func),\n    279             func.__module__, arg_name, date, instructions)\n--&gt; 280       return func(*args, **kwargs)\n    281     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(\n    282         func.__doc__, date, instructions)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    424       hooks.append(basic_session_run_hooks.StopAtStepHook(steps, max_steps))\n    425 \n--&gt; 426     loss = self._train_model(input_fn=input_fn, hooks=hooks)\n    427     logging.info('Loss for final step: %s.', loss)\n    428     return self\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _train_model(self, input_fn, hooks)\n    932       features, labels = input_fn()\n    933       self._check_inputs(features, labels)\n--&gt; 934       model_fn_ops = self._call_legacy_get_train_ops(features, labels)\n    935       ops.add_to_collection(ops.GraphKeys.LOSSES, model_fn_ops.loss)\n    936       all_hooks.extend([\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _call_legacy_get_train_ops(self, features, labels)\n   1001 \n   1002   def _call_legacy_get_train_ops(self, features, labels):\n-&gt; 1003     train_ops = self._get_train_ops(features, labels)\n   1004     if isinstance(train_ops, model_fn_lib.ModelFnOps):  # Default signature\n   1005       return train_ops\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _get_train_ops(self, features, labels)\n   1160       `ModelFnOps` object.\n   1161     \"\"\"\n-&gt; 1162     return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\n   1163 \n   1164   def _get_eval_ops(self, features, labels, metrics):\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _call_model_fn(self, features, labels, mode)\n   1131     if 'model_dir' in model_fn_args:\n   1132       kwargs['model_dir'] = self.model_dir\n-&gt; 1133     model_fn_results = self._model_fn(features, labels, **kwargs)\n   1134 \n   1135     if isinstance(model_fn_results, model_fn_lib.ModelFnOps):\n\n&lt;ipython-input-4-813de742180a&gt; in char_rnn_model(features, target)\n      6 \n      7     cell = tf.contrib.rnn.GRUCell(HIDDEN_SIZE)\n----&gt; 8     _, encoding = tf.contrib.rnn.static_rnn(cell, byte_list, dtype=tf.float32)\n      9 \n     10     logits = tf.contrib.layers.fully_connected(encoding, 15, activation_fn=None)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn.pyc in static_rnn(cell, inputs, initial_state, dtype, sequence_length, scope)\n    195             state_size=cell.state_size)\n    196       else:\n--&gt; 197         (output, state) = call_cell()\n    198 \n    199       outputs.append(output)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn.pyc in &lt;lambda&gt;()\n    182       if time &gt; 0: varscope.reuse_variables()\n    183       # pylint: disable=cell-var-from-loop\n--&gt; 184       call_cell = lambda: cell(input_, state)\n    185       # pylint: enable=cell-var-from-loop\n    186       if sequence_length is not None:\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.pyc in __call__(self, inputs, state, scope)\n     90         r, u = array_ops.split(\n     91             value=_linear(\n---&gt; 92                 [inputs, state], 2 * self._num_units, True, 1.0, scope=scope),\n     93             num_or_size_splits=2,\n     94             axis=1)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.pyc in _linear(args, output_size, bias, bias_start, scope)\n    749       res = math_ops.matmul(args[0], weights)\n    750     else:\n--&gt; 751       res = math_ops.matmul(array_ops.concat(args, 1), weights)\n    752     if not bias:\n    753       return res\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/array_ops.pyc in concat(values, axis, name)\n   1032   return gen_array_ops._concat_v2(values=values,\n   1033                                   axis=axis,\n-&gt; 1034                                   name=name)\n   1035 \n   1036 \n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_array_ops.pyc in _concat_v2(values, axis, name)\n    517   \"\"\"\n    518   result = _op_def_lib.apply_op(\"ConcatV2\", values=values, axis=axis,\n--&gt; 519                                 name=name)\n    520   return result\n    521 \n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.pyc in apply_op(self, op_type_name, name, **keywords)\n    462                                 (prefix, dtype.name))\n    463               else:\n--&gt; 464                 raise TypeError(\"%s that don't all match.\" % prefix)\n    465             else:\n    466               raise TypeError(\"%s that are invalid.\" % prefix)\n\nTypeError: Tensors in list passed to 'values' of 'ConcatV2' Op have types [int32, float32] that don't all match.\n</code></pre>", "body_text": "I am running the exact example given in the repo for text classification using rnn. I am getting the following error.\nTypeError: Tensors in list passed to 'values' of 'ConcatV2' Op have types [int32, float32] that don't all match.\nExample: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/learn/text_classification_character_rnn.py\nWould you please let me know how can I fix it.\nDetail error. \nTypeError                                 Traceback (most recent call last)\n<ipython-input-5-90c7a682f760> in <module>()\n     23 \n     24 # Train and predict\n---> 25 classifier.fit(x_train, y_train, steps=100)\n     26 y_predicted = [\n     27   p['class'] for p in classifier.predict(\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.pyc in new_func(*args, **kwargs)\n    278             _call_location(), decorator_utils.get_qualified_name(func),\n    279             func.__module__, arg_name, date, instructions)\n--> 280       return func(*args, **kwargs)\n    281     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(\n    282         func.__doc__, date, instructions)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    408     _verify_input_args(x, y, input_fn, None, batch_size)\n    409     if x is not None:\n--> 410       SKCompat(self).fit(x, y, batch_size, steps, max_steps, monitors)\n    411       return self\n    412 \n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in fit(self, x, y, batch_size, steps, max_steps, monitors)\n   1351                         steps=steps,\n   1352                         max_steps=max_steps,\n-> 1353                         monitors=all_monitors)\n   1354     return self\n   1355 \n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.pyc in new_func(*args, **kwargs)\n    278             _call_location(), decorator_utils.get_qualified_name(func),\n    279             func.__module__, arg_name, date, instructions)\n--> 280       return func(*args, **kwargs)\n    281     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(\n    282         func.__doc__, date, instructions)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    424       hooks.append(basic_session_run_hooks.StopAtStepHook(steps, max_steps))\n    425 \n--> 426     loss = self._train_model(input_fn=input_fn, hooks=hooks)\n    427     logging.info('Loss for final step: %s.', loss)\n    428     return self\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _train_model(self, input_fn, hooks)\n    932       features, labels = input_fn()\n    933       self._check_inputs(features, labels)\n--> 934       model_fn_ops = self._call_legacy_get_train_ops(features, labels)\n    935       ops.add_to_collection(ops.GraphKeys.LOSSES, model_fn_ops.loss)\n    936       all_hooks.extend([\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _call_legacy_get_train_ops(self, features, labels)\n   1001 \n   1002   def _call_legacy_get_train_ops(self, features, labels):\n-> 1003     train_ops = self._get_train_ops(features, labels)\n   1004     if isinstance(train_ops, model_fn_lib.ModelFnOps):  # Default signature\n   1005       return train_ops\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _get_train_ops(self, features, labels)\n   1160       `ModelFnOps` object.\n   1161     \"\"\"\n-> 1162     return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\n   1163 \n   1164   def _get_eval_ops(self, features, labels, metrics):\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _call_model_fn(self, features, labels, mode)\n   1131     if 'model_dir' in model_fn_args:\n   1132       kwargs['model_dir'] = self.model_dir\n-> 1133     model_fn_results = self._model_fn(features, labels, **kwargs)\n   1134 \n   1135     if isinstance(model_fn_results, model_fn_lib.ModelFnOps):\n\n<ipython-input-4-813de742180a> in char_rnn_model(features, target)\n      6 \n      7     cell = tf.contrib.rnn.GRUCell(HIDDEN_SIZE)\n----> 8     _, encoding = tf.contrib.rnn.static_rnn(cell, byte_list, dtype=tf.float32)\n      9 \n     10     logits = tf.contrib.layers.fully_connected(encoding, 15, activation_fn=None)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn.pyc in static_rnn(cell, inputs, initial_state, dtype, sequence_length, scope)\n    195             state_size=cell.state_size)\n    196       else:\n--> 197         (output, state) = call_cell()\n    198 \n    199       outputs.append(output)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn.pyc in <lambda>()\n    182       if time > 0: varscope.reuse_variables()\n    183       # pylint: disable=cell-var-from-loop\n--> 184       call_cell = lambda: cell(input_, state)\n    185       # pylint: enable=cell-var-from-loop\n    186       if sequence_length is not None:\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.pyc in __call__(self, inputs, state, scope)\n     90         r, u = array_ops.split(\n     91             value=_linear(\n---> 92                 [inputs, state], 2 * self._num_units, True, 1.0, scope=scope),\n     93             num_or_size_splits=2,\n     94             axis=1)\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.pyc in _linear(args, output_size, bias, bias_start, scope)\n    749       res = math_ops.matmul(args[0], weights)\n    750     else:\n--> 751       res = math_ops.matmul(array_ops.concat(args, 1), weights)\n    752     if not bias:\n    753       return res\n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/array_ops.pyc in concat(values, axis, name)\n   1032   return gen_array_ops._concat_v2(values=values,\n   1033                                   axis=axis,\n-> 1034                                   name=name)\n   1035 \n   1036 \n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_array_ops.pyc in _concat_v2(values, axis, name)\n    517   \"\"\"\n    518   result = _op_def_lib.apply_op(\"ConcatV2\", values=values, axis=axis,\n--> 519                                 name=name)\n    520   return result\n    521 \n\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.pyc in apply_op(self, op_type_name, name, **keywords)\n    462                                 (prefix, dtype.name))\n    463               else:\n--> 464                 raise TypeError(\"%s that don't all match.\" % prefix)\n    465             else:\n    466               raise TypeError(\"%s that are invalid.\" % prefix)\n\nTypeError: Tensors in list passed to 'values' of 'ConcatV2' Op have types [int32, float32] that don't all match.", "body": "I am running the exact example given in the repo for text classification using rnn. I am getting the following error. \r\nTypeError: Tensors in list passed to 'values' of 'ConcatV2' Op have types [int32, float32] that don't all match.\r\nExample: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/learn/text_classification_character_rnn.py\r\n\r\nWould you please let me know how can I fix it. \r\n\r\n```\r\nDetail error. \r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-5-90c7a682f760> in <module>()\r\n     23 \r\n     24 # Train and predict\r\n---> 25 classifier.fit(x_train, y_train, steps=100)\r\n     26 y_predicted = [\r\n     27   p['class'] for p in classifier.predict(\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.pyc in new_func(*args, **kwargs)\r\n    278             _call_location(), decorator_utils.get_qualified_name(func),\r\n    279             func.__module__, arg_name, date, instructions)\r\n--> 280       return func(*args, **kwargs)\r\n    281     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(\r\n    282         func.__doc__, date, instructions)\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\r\n    408     _verify_input_args(x, y, input_fn, None, batch_size)\r\n    409     if x is not None:\r\n--> 410       SKCompat(self).fit(x, y, batch_size, steps, max_steps, monitors)\r\n    411       return self\r\n    412 \r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in fit(self, x, y, batch_size, steps, max_steps, monitors)\r\n   1351                         steps=steps,\r\n   1352                         max_steps=max_steps,\r\n-> 1353                         monitors=all_monitors)\r\n   1354     return self\r\n   1355 \r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.pyc in new_func(*args, **kwargs)\r\n    278             _call_location(), decorator_utils.get_qualified_name(func),\r\n    279             func.__module__, arg_name, date, instructions)\r\n--> 280       return func(*args, **kwargs)\r\n    281     new_func.__doc__ = _add_deprecated_arg_notice_to_docstring(\r\n    282         func.__doc__, date, instructions)\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\r\n    424       hooks.append(basic_session_run_hooks.StopAtStepHook(steps, max_steps))\r\n    425 \r\n--> 426     loss = self._train_model(input_fn=input_fn, hooks=hooks)\r\n    427     logging.info('Loss for final step: %s.', loss)\r\n    428     return self\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _train_model(self, input_fn, hooks)\r\n    932       features, labels = input_fn()\r\n    933       self._check_inputs(features, labels)\r\n--> 934       model_fn_ops = self._call_legacy_get_train_ops(features, labels)\r\n    935       ops.add_to_collection(ops.GraphKeys.LOSSES, model_fn_ops.loss)\r\n    936       all_hooks.extend([\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _call_legacy_get_train_ops(self, features, labels)\r\n   1001 \r\n   1002   def _call_legacy_get_train_ops(self, features, labels):\r\n-> 1003     train_ops = self._get_train_ops(features, labels)\r\n   1004     if isinstance(train_ops, model_fn_lib.ModelFnOps):  # Default signature\r\n   1005       return train_ops\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _get_train_ops(self, features, labels)\r\n   1160       `ModelFnOps` object.\r\n   1161     \"\"\"\r\n-> 1162     return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\r\n   1163 \r\n   1164   def _get_eval_ops(self, features, labels, metrics):\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.pyc in _call_model_fn(self, features, labels, mode)\r\n   1131     if 'model_dir' in model_fn_args:\r\n   1132       kwargs['model_dir'] = self.model_dir\r\n-> 1133     model_fn_results = self._model_fn(features, labels, **kwargs)\r\n   1134 \r\n   1135     if isinstance(model_fn_results, model_fn_lib.ModelFnOps):\r\n\r\n<ipython-input-4-813de742180a> in char_rnn_model(features, target)\r\n      6 \r\n      7     cell = tf.contrib.rnn.GRUCell(HIDDEN_SIZE)\r\n----> 8     _, encoding = tf.contrib.rnn.static_rnn(cell, byte_list, dtype=tf.float32)\r\n      9 \r\n     10     logits = tf.contrib.layers.fully_connected(encoding, 15, activation_fn=None)\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn.pyc in static_rnn(cell, inputs, initial_state, dtype, sequence_length, scope)\r\n    195             state_size=cell.state_size)\r\n    196       else:\r\n--> 197         (output, state) = call_cell()\r\n    198 \r\n    199       outputs.append(output)\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn.pyc in <lambda>()\r\n    182       if time > 0: varscope.reuse_variables()\r\n    183       # pylint: disable=cell-var-from-loop\r\n--> 184       call_cell = lambda: cell(input_, state)\r\n    185       # pylint: enable=cell-var-from-loop\r\n    186       if sequence_length is not None:\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.pyc in __call__(self, inputs, state, scope)\r\n     90         r, u = array_ops.split(\r\n     91             value=_linear(\r\n---> 92                 [inputs, state], 2 * self._num_units, True, 1.0, scope=scope),\r\n     93             num_or_size_splits=2,\r\n     94             axis=1)\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.pyc in _linear(args, output_size, bias, bias_start, scope)\r\n    749       res = math_ops.matmul(args[0], weights)\r\n    750     else:\r\n--> 751       res = math_ops.matmul(array_ops.concat(args, 1), weights)\r\n    752     if not bias:\r\n    753       return res\r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/array_ops.pyc in concat(values, axis, name)\r\n   1032   return gen_array_ops._concat_v2(values=values,\r\n   1033                                   axis=axis,\r\n-> 1034                                   name=name)\r\n   1035 \r\n   1036 \r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_array_ops.pyc in _concat_v2(values, axis, name)\r\n    517   \"\"\"\r\n    518   result = _op_def_lib.apply_op(\"ConcatV2\", values=values, axis=axis,\r\n--> 519                                 name=name)\r\n    520   return result\r\n    521 \r\n\r\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.pyc in apply_op(self, op_type_name, name, **keywords)\r\n    462                                 (prefix, dtype.name))\r\n    463               else:\r\n--> 464                 raise TypeError(\"%s that don't all match.\" % prefix)\r\n    465             else:\r\n    466               raise TypeError(\"%s that are invalid.\" % prefix)\r\n\r\nTypeError: Tensors in list passed to 'values' of 'ConcatV2' Op have types [int32, float32] that don't all match.\r\n```\r\n\r\n "}