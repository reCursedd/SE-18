{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/384280957", "html_url": "https://github.com/tensorflow/tensorflow/issues/18823#issuecomment-384280957", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18823", "id": 384280957, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDI4MDk1Nw==", "user": {"login": "michaelschaarschmidt", "id": 22558112, "node_id": "MDQ6VXNlcjIyNTU4MTEy", "avatar_url": "https://avatars1.githubusercontent.com/u/22558112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelschaarschmidt", "html_url": "https://github.com/michaelschaarschmidt", "followers_url": "https://api.github.com/users/michaelschaarschmidt/followers", "following_url": "https://api.github.com/users/michaelschaarschmidt/following{/other_user}", "gists_url": "https://api.github.com/users/michaelschaarschmidt/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelschaarschmidt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelschaarschmidt/subscriptions", "organizations_url": "https://api.github.com/users/michaelschaarschmidt/orgs", "repos_url": "https://api.github.com/users/michaelschaarschmidt/repos", "events_url": "https://api.github.com/users/michaelschaarschmidt/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelschaarschmidt/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-25T13:11:27Z", "updated_at": "2018-04-25T13:19:00Z", "author_association": "NONE", "body_html": "<p>Thank you very much for clarifying this. I was wondering what the idea was on doing the following steps within a function:</p>\n<ol>\n<li>Read value from variable</li>\n<li>Perform some logic deciding on how to insert value into variable</li>\n<li>Write back to variable</li>\n</ol>\n<p>e.g. for a buffer insert:</p>\n<pre><code>    # In constructor\n    self.buffer = tf.get_variable('buffer', shape=(self.capacity,), dtype=tf.float32)\n    self.insert_fn = autograph.to_graph(self.insert, verbose=True)\n\n    def insert(self, element):\n        values = []\n        autograph.utils.set_element_type(values, tf.float32)\n        values.append(element)\n        return self.buffer.assign(values.stack())\n</code></pre>\n<p>This works now but I would actually not want to assign the full list but just a slice (or potentially a scatter update), is this supported/ is there an intended way to do this? E.g.,</p>\n<pre><code>        return self.buffer[start:end].assign(values.stack())\n</code></pre>\n<p>analogue to <code>tf.assign(ref=self.buffer[start:end], value=values.stack())</code>?</p>", "body_text": "Thank you very much for clarifying this. I was wondering what the idea was on doing the following steps within a function:\n\nRead value from variable\nPerform some logic deciding on how to insert value into variable\nWrite back to variable\n\ne.g. for a buffer insert:\n    # In constructor\n    self.buffer = tf.get_variable('buffer', shape=(self.capacity,), dtype=tf.float32)\n    self.insert_fn = autograph.to_graph(self.insert, verbose=True)\n\n    def insert(self, element):\n        values = []\n        autograph.utils.set_element_type(values, tf.float32)\n        values.append(element)\n        return self.buffer.assign(values.stack())\n\nThis works now but I would actually not want to assign the full list but just a slice (or potentially a scatter update), is this supported/ is there an intended way to do this? E.g.,\n        return self.buffer[start:end].assign(values.stack())\n\nanalogue to tf.assign(ref=self.buffer[start:end], value=values.stack())?", "body": "Thank you very much for clarifying this. I was wondering what the idea was on doing the following steps within a function:\r\n\r\n1. Read value from variable\r\n2. Perform some logic deciding on how to insert value into variable\r\n3. Write back to variable\r\n\r\ne.g. for a buffer insert:\r\n\r\n```\r\n    # In constructor\r\n    self.buffer = tf.get_variable('buffer', shape=(self.capacity,), dtype=tf.float32)\r\n    self.insert_fn = autograph.to_graph(self.insert, verbose=True)\r\n\r\n    def insert(self, element):\r\n        values = []\r\n        autograph.utils.set_element_type(values, tf.float32)\r\n        values.append(element)\r\n        return self.buffer.assign(values.stack())\r\n```\r\n\r\nThis works now but I would actually not want to assign the full list but just a slice (or potentially a scatter update), is this supported/ is there an intended way to do this? E.g., \r\n\r\n```\r\n        return self.buffer[start:end].assign(values.stack())\r\n```\r\nanalogue to ```tf.assign(ref=self.buffer[start:end], value=values.stack())```?"}