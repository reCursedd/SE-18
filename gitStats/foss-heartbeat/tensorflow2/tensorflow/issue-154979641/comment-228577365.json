{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/228577365", "html_url": "https://github.com/tensorflow/tensorflow/issues/2384#issuecomment-228577365", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2384", "id": 228577365, "node_id": "MDEyOklzc3VlQ29tbWVudDIyODU3NzM2NQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-26T00:26:00Z", "updated_at": "2016-06-26T00:26:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Unfortunately I haven't been able to reproduce this, but we have seen a simpler apparent memory leak in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"160999845\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/2942\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/2942/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/2942\">#2942</a>, which is caused by memory fragmentation. It's possible that this could be causing the problem here as well.</p>\n<p>Our preferred workaround is to use <a href=\"http://goog-perftools.sourceforge.net/doc/tcmalloc.html\" rel=\"nofollow\">tcmalloc</a> as the malloc implementation, which more closely reproduces the way we run the distributed runtime internally. You can install tcmalloc with many package managers, and then use it with TensorFlow by setting <code>LD_PRELOAD</code> to include the tcmalloc library.</p>\n<p>An alternative, which might help to test the root cause, but might also cause undesirable performance issues, is to set the <code>MALLOC_MMAP_THRESHOLD_</code> environment variable to a small value (like 100000). This should reduce fragmentation, at the possible downside of increasing the cost for some allocations, since it will use <code>mmap()</code> and <code>munmap()</code> to implement <code>malloc()</code> and <code>free()</code> for more allocations.</p>", "body_text": "Unfortunately I haven't been able to reproduce this, but we have seen a simpler apparent memory leak in #2942, which is caused by memory fragmentation. It's possible that this could be causing the problem here as well.\nOur preferred workaround is to use tcmalloc as the malloc implementation, which more closely reproduces the way we run the distributed runtime internally. You can install tcmalloc with many package managers, and then use it with TensorFlow by setting LD_PRELOAD to include the tcmalloc library.\nAn alternative, which might help to test the root cause, but might also cause undesirable performance issues, is to set the MALLOC_MMAP_THRESHOLD_ environment variable to a small value (like 100000). This should reduce fragmentation, at the possible downside of increasing the cost for some allocations, since it will use mmap() and munmap() to implement malloc() and free() for more allocations.", "body": "Unfortunately I haven't been able to reproduce this, but we have seen a simpler apparent memory leak in #2942, which is caused by memory fragmentation. It's possible that this could be causing the problem here as well.\n\nOur preferred workaround is to use [tcmalloc](http://goog-perftools.sourceforge.net/doc/tcmalloc.html) as the malloc implementation, which more closely reproduces the way we run the distributed runtime internally. You can install tcmalloc with many package managers, and then use it with TensorFlow by setting `LD_PRELOAD` to include the tcmalloc library.\n\nAn alternative, which might help to test the root cause, but might also cause undesirable performance issues, is to set the `MALLOC_MMAP_THRESHOLD_` environment variable to a small value (like 100000). This should reduce fragmentation, at the possible downside of increasing the cost for some allocations, since it will use `mmap()` and `munmap()` to implement `malloc()` and `free()` for more allocations.\n"}