{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8010", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8010/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8010/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8010/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8010", "id": 211386328, "node_id": "MDU6SXNzdWUyMTEzODYzMjg=", "number": 8010, "title": "tf.identity() not copying varying inputs", "user": {"login": "danijar", "id": 2111293, "node_id": "MDQ6VXNlcjIxMTEyOTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2111293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danijar", "html_url": "https://github.com/danijar", "followers_url": "https://api.github.com/users/danijar/followers", "following_url": "https://api.github.com/users/danijar/following{/other_user}", "gists_url": "https://api.github.com/users/danijar/gists{/gist_id}", "starred_url": "https://api.github.com/users/danijar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danijar/subscriptions", "organizations_url": "https://api.github.com/users/danijar/orgs", "repos_url": "https://api.github.com/users/danijar/repos", "events_url": "https://api.github.com/users/danijar/events{/privacy}", "received_events_url": "https://api.github.com/users/danijar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-02T13:09:16Z", "updated_at": "2017-03-03T00:12:26Z", "closed_at": "2017-03-03T00:12:26Z", "author_association": "MEMBER", "body_html": "<p>When using <code>tf.identity()</code> it seems like a proper implementation to pass through the input tensor without copying. However, when the input is the value of a variable it might change later, leading to surprising behavior:</p>\n<div class=\"highlight highlight-source-python\"><pre>var <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">1</span>)\nold <span class=\"pl-k\">=</span> tf.identity(var.value())\n<span class=\"pl-k\">with</span> tf.control_dependencies([old]):\n  <span class=\"pl-k\">with</span> tf.control_dependencies([var.assign_add(<span class=\"pl-c1\">1</span>)]):\n    new <span class=\"pl-k\">=</span> tf.identity(var.value())\n\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run(tf.global_variables_initializer())\n<span class=\"pl-c1\">print</span>(sess.run([old, new]))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Unexpected: [2, 2]</span></pre></div>\n<p>I would think this code should be equivalent to the following workaround that uses a second variable to remember the previous value:</p>\n<div class=\"highlight highlight-source-python\"><pre>var <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">1</span>)\nold <span class=\"pl-k\">=</span> tf.Variable(var.initialized_value())\n<span class=\"pl-k\">with</span> tf.control_dependencies([old.assign(var.value())]):\n  <span class=\"pl-k\">with</span> tf.control_dependencies([var.assign_add(<span class=\"pl-c1\">1</span>)]):\n    new <span class=\"pl-k\">=</span> tf.identity(var.value())\n\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run(tf.global_variables_initializer())\n<span class=\"pl-c1\">print</span>(sess.run([old, new]))  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Expected: [1, 2]</span></pre></div>\n<p>Can we make <code>tf.identity()</code> aware of whether its input is static or varying, to always return the value from the time it's executed?</p>", "body_text": "When using tf.identity() it seems like a proper implementation to pass through the input tensor without copying. However, when the input is the value of a variable it might change later, leading to surprising behavior:\nvar = tf.Variable(1)\nold = tf.identity(var.value())\nwith tf.control_dependencies([old]):\n  with tf.control_dependencies([var.assign_add(1)]):\n    new = tf.identity(var.value())\n\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\nprint(sess.run([old, new]))  # Unexpected: [2, 2]\nI would think this code should be equivalent to the following workaround that uses a second variable to remember the previous value:\nvar = tf.Variable(1)\nold = tf.Variable(var.initialized_value())\nwith tf.control_dependencies([old.assign(var.value())]):\n  with tf.control_dependencies([var.assign_add(1)]):\n    new = tf.identity(var.value())\n\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\nprint(sess.run([old, new]))  # Expected: [1, 2]\nCan we make tf.identity() aware of whether its input is static or varying, to always return the value from the time it's executed?", "body": "When using `tf.identity()` it seems like a proper implementation to pass through the input tensor without copying. However, when the input is the value of a variable it might change later, leading to surprising behavior:\r\n\r\n```python\r\nvar = tf.Variable(1)\r\nold = tf.identity(var.value())\r\nwith tf.control_dependencies([old]):\r\n  with tf.control_dependencies([var.assign_add(1)]):\r\n    new = tf.identity(var.value())\r\n\r\nsess = tf.Session()\r\nsess.run(tf.global_variables_initializer())\r\nprint(sess.run([old, new]))  # Unexpected: [2, 2]\r\n```\r\n\r\nI would think this code should be equivalent to the following workaround that uses a second variable to remember the previous value:\r\n\r\n```python\r\nvar = tf.Variable(1)\r\nold = tf.Variable(var.initialized_value())\r\nwith tf.control_dependencies([old.assign(var.value())]):\r\n  with tf.control_dependencies([var.assign_add(1)]):\r\n    new = tf.identity(var.value())\r\n\r\nsess = tf.Session()\r\nsess.run(tf.global_variables_initializer())\r\nprint(sess.run([old, new]))  # Expected: [1, 2]\r\n```\r\n\r\nCan we make `tf.identity()` aware of whether its input is static or varying, to always return the value from the time it's executed?"}