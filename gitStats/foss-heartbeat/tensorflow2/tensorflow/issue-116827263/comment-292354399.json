{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/292354399", "html_url": "https://github.com/tensorflow/tensorflow/issues/206#issuecomment-292354399", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/206", "id": 292354399, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjM1NDM5OQ==", "user": {"login": "danijar", "id": 2111293, "node_id": "MDQ6VXNlcjIxMTEyOTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2111293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danijar", "html_url": "https://github.com/danijar", "followers_url": "https://api.github.com/users/danijar/followers", "following_url": "https://api.github.com/users/danijar/following{/other_user}", "gists_url": "https://api.github.com/users/danijar/gists{/gist_id}", "starred_url": "https://api.github.com/users/danijar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danijar/subscriptions", "organizations_url": "https://api.github.com/users/danijar/orgs", "repos_url": "https://api.github.com/users/danijar/repos", "events_url": "https://api.github.com/users/danijar/events{/privacy}", "received_events_url": "https://api.github.com/users/danijar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-06T23:04:55Z", "updated_at": "2017-04-06T23:35:58Z", "author_association": "MEMBER", "body_html": "<p>Anyone who needs to <code>tf.gather()</code> along the second dimension:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">gather_along_second_axis</span>(<span class=\"pl-smi\">data</span>, <span class=\"pl-smi\">indices</span>):\n  flat_indices <span class=\"pl-k\">=</span> tf.tile(indices[<span class=\"pl-c1\">None</span>, :], [tf.shape(data)[<span class=\"pl-c1\">0</span>], <span class=\"pl-c1\">1</span>])\n  batch_offset <span class=\"pl-k\">=</span> tf.range(<span class=\"pl-c1\">0</span>, tf.shape(data)[<span class=\"pl-c1\">0</span>]) <span class=\"pl-k\">*</span> tf.shape(data)[<span class=\"pl-c1\">1</span>]\n  flat_indices <span class=\"pl-k\">=</span> tf.reshape(flat_indices <span class=\"pl-k\">+</span> batch_offset[:, <span class=\"pl-c1\">None</span>], [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\n  flat_data <span class=\"pl-k\">=</span> tf.reshape(data, tf.concat([[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>], tf.shape(data)[<span class=\"pl-c1\">2</span>:]], <span class=\"pl-c1\">0</span>))\n  result_shape <span class=\"pl-k\">=</span> tf.concat([[tf.shape(data)[<span class=\"pl-c1\">0</span>], <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>], tf.shape(data)[<span class=\"pl-c1\">2</span>:]], <span class=\"pl-c1\">0</span>)\n  result <span class=\"pl-k\">=</span> tf.reshape(tf.gather(flat_data, flat_indices), result_shape)\n  shape <span class=\"pl-k\">=</span> data.shape[:<span class=\"pl-c1\">1</span>].concatenate(indices.shape[:<span class=\"pl-c1\">1</span>])\n  result.set_shape(shape.concatenate(data.shape[<span class=\"pl-c1\">2</span>:]))\n  <span class=\"pl-k\">return</span> result</pre></div>", "body_text": "Anyone who needs to tf.gather() along the second dimension:\ndef gather_along_second_axis(data, indices):\n  flat_indices = tf.tile(indices[None, :], [tf.shape(data)[0], 1])\n  batch_offset = tf.range(0, tf.shape(data)[0]) * tf.shape(data)[1]\n  flat_indices = tf.reshape(flat_indices + batch_offset[:, None], [-1])\n  flat_data = tf.reshape(data, tf.concat([[-1], tf.shape(data)[2:]], 0))\n  result_shape = tf.concat([[tf.shape(data)[0], -1], tf.shape(data)[2:]], 0)\n  result = tf.reshape(tf.gather(flat_data, flat_indices), result_shape)\n  shape = data.shape[:1].concatenate(indices.shape[:1])\n  result.set_shape(shape.concatenate(data.shape[2:]))\n  return result", "body": "Anyone who needs to `tf.gather()` along the second dimension:\r\n\r\n```python\r\ndef gather_along_second_axis(data, indices):\r\n  flat_indices = tf.tile(indices[None, :], [tf.shape(data)[0], 1])\r\n  batch_offset = tf.range(0, tf.shape(data)[0]) * tf.shape(data)[1]\r\n  flat_indices = tf.reshape(flat_indices + batch_offset[:, None], [-1])\r\n  flat_data = tf.reshape(data, tf.concat([[-1], tf.shape(data)[2:]], 0))\r\n  result_shape = tf.concat([[tf.shape(data)[0], -1], tf.shape(data)[2:]], 0)\r\n  result = tf.reshape(tf.gather(flat_data, flat_indices), result_shape)\r\n  shape = data.shape[:1].concatenate(indices.shape[:1])\r\n  result.set_shape(shape.concatenate(data.shape[2:]))\r\n  return result\r\n```"}