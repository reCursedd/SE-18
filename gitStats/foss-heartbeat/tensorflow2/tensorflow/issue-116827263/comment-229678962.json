{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/229678962", "html_url": "https://github.com/tensorflow/tensorflow/issues/206#issuecomment-229678962", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/206", "id": 229678962, "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTY3ODk2Mg==", "user": {"login": "cruvadom", "id": 15376926, "node_id": "MDQ6VXNlcjE1Mzc2OTI2", "avatar_url": "https://avatars0.githubusercontent.com/u/15376926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cruvadom", "html_url": "https://github.com/cruvadom", "followers_url": "https://api.github.com/users/cruvadom/followers", "following_url": "https://api.github.com/users/cruvadom/following{/other_user}", "gists_url": "https://api.github.com/users/cruvadom/gists{/gist_id}", "starred_url": "https://api.github.com/users/cruvadom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cruvadom/subscriptions", "organizations_url": "https://api.github.com/users/cruvadom/orgs", "repos_url": "https://api.github.com/users/cruvadom/repos", "events_url": "https://api.github.com/users/cruvadom/events{/privacy}", "received_events_url": "https://api.github.com/users/cruvadom/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-30T14:40:51Z", "updated_at": "2016-06-30T14:41:13Z", "author_association": "NONE", "body_html": "<p>Inspired by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=72538\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nova77\">@nova77</a>, a workaround (until gather_nd has gradients), allowing to use gather_nd normally:</p>\n<pre><code>def gather_nd(params, indices, name=None):\n  shape = params.get_shape().as_list()\n  rank = len(shape)\n  flat_params = tf.reshape(params, [-1])\n  multipliers = [reduce(lambda x, y: x*y, shape[i+1:], 1) for i in range(0, rank)]\n  indices_unpacked = tf.unpack(tf.transpose(indices, [rank - 1] + range(0, rank - 1), name))\n  flat_indices = sum([a*b for a,b in zip(multipliers, indices_unpacked)])\n  return tf.gather(flat_params, flat_indices, name=name)\n</code></pre>", "body_text": "Inspired by @nova77, a workaround (until gather_nd has gradients), allowing to use gather_nd normally:\ndef gather_nd(params, indices, name=None):\n  shape = params.get_shape().as_list()\n  rank = len(shape)\n  flat_params = tf.reshape(params, [-1])\n  multipliers = [reduce(lambda x, y: x*y, shape[i+1:], 1) for i in range(0, rank)]\n  indices_unpacked = tf.unpack(tf.transpose(indices, [rank - 1] + range(0, rank - 1), name))\n  flat_indices = sum([a*b for a,b in zip(multipliers, indices_unpacked)])\n  return tf.gather(flat_params, flat_indices, name=name)", "body": "Inspired by @nova77, a workaround (until gather_nd has gradients), allowing to use gather_nd normally:\n\n```\ndef gather_nd(params, indices, name=None):\n  shape = params.get_shape().as_list()\n  rank = len(shape)\n  flat_params = tf.reshape(params, [-1])\n  multipliers = [reduce(lambda x, y: x*y, shape[i+1:], 1) for i in range(0, rank)]\n  indices_unpacked = tf.unpack(tf.transpose(indices, [rank - 1] + range(0, rank - 1), name))\n  flat_indices = sum([a*b for a,b in zip(multipliers, indices_unpacked)])\n  return tf.gather(flat_params, flat_indices, name=name)\n```\n"}