{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/250986800", "html_url": "https://github.com/tensorflow/tensorflow/issues/206#issuecomment-250986800", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/206", "id": 250986800, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDk4NjgwMA==", "user": {"login": "danijar", "id": 2111293, "node_id": "MDQ6VXNlcjIxMTEyOTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2111293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danijar", "html_url": "https://github.com/danijar", "followers_url": "https://api.github.com/users/danijar/followers", "following_url": "https://api.github.com/users/danijar/following{/other_user}", "gists_url": "https://api.github.com/users/danijar/gists{/gist_id}", "starred_url": "https://api.github.com/users/danijar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danijar/subscriptions", "organizations_url": "https://api.github.com/users/danijar/orgs", "repos_url": "https://api.github.com/users/danijar/repos", "events_url": "https://api.github.com/users/danijar/events{/privacy}", "received_events_url": "https://api.github.com/users/danijar/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-02T18:30:15Z", "updated_at": "2016-10-02T18:30:15Z", "author_association": "MEMBER", "body_html": "<p>This example works for me:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nvariable <span class=\"pl-k\">=</span> tf.Variable(np.ones((<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">5</span>)))\ncost <span class=\"pl-k\">=</span> tf.reduce_sum(variable[<span class=\"pl-c1\">0</span>, :])  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Do more fancy slicing if needed.</span>\noptimize <span class=\"pl-k\">=</span> tf.train.GradientDescentOptimizer(<span class=\"pl-c1\">0.1</span>).minimize(cost)\n\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run(tf.initialize_all_variables())\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Cost (should be decreasing):<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">5</span>):\n    <span class=\"pl-c1\">print</span>(sess.run([cost, optimize])[<span class=\"pl-c1\">0</span>])</pre></div>", "body_text": "This example works for me:\nimport numpy as np\nimport tensorflow as tf\n\nvariable = tf.Variable(np.ones((5, 5)))\ncost = tf.reduce_sum(variable[0, :])  # Do more fancy slicing if needed.\noptimize = tf.train.GradientDescentOptimizer(0.1).minimize(cost)\n\nsess = tf.Session()\nsess.run(tf.initialize_all_variables())\n\nprint('Cost (should be decreasing):')\nfor _ in range(5):\n    print(sess.run([cost, optimize])[0])", "body": "This example works for me:\n\n``` python\nimport numpy as np\nimport tensorflow as tf\n\nvariable = tf.Variable(np.ones((5, 5)))\ncost = tf.reduce_sum(variable[0, :])  # Do more fancy slicing if needed.\noptimize = tf.train.GradientDescentOptimizer(0.1).minimize(cost)\n\nsess = tf.Session()\nsess.run(tf.initialize_all_variables())\n\nprint('Cost (should be decreasing):')\nfor _ in range(5):\n    print(sess.run([cost, optimize])[0])\n```\n"}