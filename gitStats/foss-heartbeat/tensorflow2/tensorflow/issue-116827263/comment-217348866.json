{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/217348866", "html_url": "https://github.com/tensorflow/tensorflow/issues/206#issuecomment-217348866", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/206", "id": 217348866, "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzM0ODg2Ng==", "user": {"login": "hycis", "id": 3508361, "node_id": "MDQ6VXNlcjM1MDgzNjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3508361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hycis", "html_url": "https://github.com/hycis", "followers_url": "https://api.github.com/users/hycis/followers", "following_url": "https://api.github.com/users/hycis/following{/other_user}", "gists_url": "https://api.github.com/users/hycis/gists{/gist_id}", "starred_url": "https://api.github.com/users/hycis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hycis/subscriptions", "organizations_url": "https://api.github.com/users/hycis/orgs", "repos_url": "https://api.github.com/users/hycis/repos", "events_url": "https://api.github.com/users/hycis/events{/privacy}", "received_events_url": "https://api.github.com/users/hycis/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-06T05:02:43Z", "updated_at": "2016-05-06T05:03:50Z", "author_association": "NONE", "body_html": "<p>here is another implementation for 2d</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">gather_2d</span>(<span class=\"pl-smi\">params</span>, <span class=\"pl-smi\">indices</span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> only for two dim now</span>\n    shape <span class=\"pl-k\">=</span> params.get_shape().as_list()\n    <span class=\"pl-k\">assert</span> <span class=\"pl-c1\">len</span>(shape) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">2</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>only support 2d matrix<span class=\"pl-pds\">'</span></span>\n    flat <span class=\"pl-k\">=</span> tf.reshape(params, [np.prod(shape)])\n    flat_idx <span class=\"pl-k\">=</span> tf.slice(indices, [<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>], [shape[<span class=\"pl-c1\">0</span>],<span class=\"pl-c1\">1</span>]) <span class=\"pl-k\">*</span> shape[<span class=\"pl-c1\">1</span>] <span class=\"pl-k\">+</span> tf.slice(indices, [<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>], [shape[<span class=\"pl-c1\">0</span>],<span class=\"pl-c1\">1</span>])\n    flat_idx <span class=\"pl-k\">=</span> tf.reshape(flat_idx, [flat_idx.get_shape().as_list()[<span class=\"pl-c1\">0</span>]])\n    <span class=\"pl-k\">return</span> tf.gather(flat, flat_idx)</pre></div>", "body_text": "here is another implementation for 2d\ndef gather_2d(params, indices):\n    # only for two dim now\n    shape = params.get_shape().as_list()\n    assert len(shape) == 2, 'only support 2d matrix'\n    flat = tf.reshape(params, [np.prod(shape)])\n    flat_idx = tf.slice(indices, [0,0], [shape[0],1]) * shape[1] + tf.slice(indices, [0,1], [shape[0],1])\n    flat_idx = tf.reshape(flat_idx, [flat_idx.get_shape().as_list()[0]])\n    return tf.gather(flat, flat_idx)", "body": "here is another implementation for 2d\n\n``` python\ndef gather_2d(params, indices):\n    # only for two dim now\n    shape = params.get_shape().as_list()\n    assert len(shape) == 2, 'only support 2d matrix'\n    flat = tf.reshape(params, [np.prod(shape)])\n    flat_idx = tf.slice(indices, [0,0], [shape[0],1]) * shape[1] + tf.slice(indices, [0,1], [shape[0],1])\n    flat_idx = tf.reshape(flat_idx, [flat_idx.get_shape().as_list()[0]])\n    return tf.gather(flat, flat_idx)\n```\n"}