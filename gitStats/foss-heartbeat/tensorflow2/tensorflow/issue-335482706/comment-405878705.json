{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/405878705", "html_url": "https://github.com/tensorflow/tensorflow/issues/20280#issuecomment-405878705", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20280", "id": 405878705, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTg3ODcwNQ==", "user": {"login": "orf", "id": 1027207, "node_id": "MDQ6VXNlcjEwMjcyMDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1027207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orf", "html_url": "https://github.com/orf", "followers_url": "https://api.github.com/users/orf/followers", "following_url": "https://api.github.com/users/orf/following{/other_user}", "gists_url": "https://api.github.com/users/orf/gists{/gist_id}", "starred_url": "https://api.github.com/users/orf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orf/subscriptions", "organizations_url": "https://api.github.com/users/orf/orgs", "repos_url": "https://api.github.com/users/orf/repos", "events_url": "https://api.github.com/users/orf/events{/privacy}", "received_events_url": "https://api.github.com/users/orf/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-18T09:59:40Z", "updated_at": "2018-07-18T10:11:10Z", "author_association": "NONE", "body_html": "<blockquote>\n<p>This would be an opportunity to create two packages: tensorflow-core, which only installs tensorflow (and which may in fact result in some tensorflow python endpoints not working) and tensorflow (which is a virtual package that has dependencies on tensorflow-core and tensorboard. In the future, we may split tensorflow-core into more packages.</p>\n</blockquote>\n<p>I think this might be going too far, all I'm asking for is a <code>TENSORFLOW_DONT_INCLUDE_TENSORBOARD</code> bazel config option or something to just remove it from the build <code>setup.py</code>. Nothing too complex. Splitting them like you suggest does sound like a good idea in theory, but as you said it can come with problems. For now just allow us to remove a dependency if we so require.</p>\n<p>You distribute Tensorflow as a lowest common denominator binary. Ok, that's fine and makes sense. So we should build it ourselves for our specific CPU features when running it at any scale. Ok, that's also fine and makes sense. But we should always always always include Tensorboard as a dependency? That's not fine, especially when it leads to conflicting dependencies and those dependencies have known CVE's against them.</p>\n<p>I'd love to switch to tensorflow-server, and I'm pushing for it, but... you know. Time.</p>\n<p>As a side note, the new Tensorflow release (congratulations!) <a href=\"https://github.com/pypa/pipenv/issues/2596\" data-hovercard-type=\"issue\" data-hovercard-url=\"/pypa/pipenv/issues/2596/hovercard\">triggers a defect in the <code>pipenv</code> dependency resolver</a>. The culprit? ... <code>tensorboard</code> (and a non-backtracking resolver). Please let me remove this from our custom builds without having to resort to horrible <code>sed</code> post build hacks.</p>", "body_text": "This would be an opportunity to create two packages: tensorflow-core, which only installs tensorflow (and which may in fact result in some tensorflow python endpoints not working) and tensorflow (which is a virtual package that has dependencies on tensorflow-core and tensorboard. In the future, we may split tensorflow-core into more packages.\n\nI think this might be going too far, all I'm asking for is a TENSORFLOW_DONT_INCLUDE_TENSORBOARD bazel config option or something to just remove it from the build setup.py. Nothing too complex. Splitting them like you suggest does sound like a good idea in theory, but as you said it can come with problems. For now just allow us to remove a dependency if we so require.\nYou distribute Tensorflow as a lowest common denominator binary. Ok, that's fine and makes sense. So we should build it ourselves for our specific CPU features when running it at any scale. Ok, that's also fine and makes sense. But we should always always always include Tensorboard as a dependency? That's not fine, especially when it leads to conflicting dependencies and those dependencies have known CVE's against them.\nI'd love to switch to tensorflow-server, and I'm pushing for it, but... you know. Time.\nAs a side note, the new Tensorflow release (congratulations!) triggers a defect in the pipenv dependency resolver. The culprit? ... tensorboard (and a non-backtracking resolver). Please let me remove this from our custom builds without having to resort to horrible sed post build hacks.", "body": "> This would be an opportunity to create two packages: tensorflow-core, which only installs tensorflow (and which may in fact result in some tensorflow python endpoints not working) and tensorflow (which is a virtual package that has dependencies on tensorflow-core and tensorboard. In the future, we may split tensorflow-core into more packages.\r\n\r\nI think this might be going too far, all I'm asking for is a `TENSORFLOW_DONT_INCLUDE_TENSORBOARD` bazel config option or something to just remove it from the build `setup.py`. Nothing too complex. Splitting them like you suggest does sound like a good idea in theory, but as you said it can come with problems. For now just allow us to remove a dependency if we so require. \r\n\r\nYou distribute Tensorflow as a lowest common denominator binary. Ok, that's fine and makes sense. So we should build it ourselves for our specific CPU features when running it at any scale. Ok, that's also fine and makes sense. But we should always always always include Tensorboard as a dependency? That's not fine, especially when it leads to conflicting dependencies and those dependencies have known CVE's against them.\r\n\r\nI'd love to switch to tensorflow-server, and I'm pushing for it, but... you know. Time.\r\n\r\nAs a side note, the new Tensorflow release (congratulations!) [triggers a defect in the `pipenv` dependency resolver](https://github.com/pypa/pipenv/issues/2596). The culprit? ... `tensorboard` (and a non-backtracking resolver). Please let me remove this from our custom builds without having to resort to horrible `sed` post build hacks."}