{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/400230560", "html_url": "https://github.com/tensorflow/tensorflow/issues/20280#issuecomment-400230560", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20280", "id": 400230560, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDIzMDU2MA==", "user": {"login": "orf", "id": 1027207, "node_id": "MDQ6VXNlcjEwMjcyMDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1027207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orf", "html_url": "https://github.com/orf", "followers_url": "https://api.github.com/users/orf/followers", "following_url": "https://api.github.com/users/orf/following{/other_user}", "gists_url": "https://api.github.com/users/orf/gists{/gist_id}", "starred_url": "https://api.github.com/users/orf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orf/subscriptions", "organizations_url": "https://api.github.com/users/orf/orgs", "repos_url": "https://api.github.com/users/orf/repos", "events_url": "https://api.github.com/users/orf/events{/privacy}", "received_events_url": "https://api.github.com/users/orf/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-26T08:46:14Z", "updated_at": "2018-06-26T10:44:00Z", "author_association": "NONE", "body_html": "<p>Hey <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=17213165\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/marshalhayes\">@marshalhayes</a>, thank you for your quick reply. Let me just elaborate a bit.</p>\n<p>I have no problem with Tensorboard being bundled with the default Tensorflow package but in the context of a server environment specifically I've elaborated on a few issues below. I only ask for the idea that when building a <em>custom</em> Tensorflow package the <em>option</em> is given to disable the dependency link somehow.</p>\n<ol>\n<li>\n<p>The current stable tensorflow, via tensorboard, pulls in vulnerable versions of <code>html5lib</code> and <code>bleach</code>, in the case of <code>html5lib</code> there is a CVE from 2016 (<code>CVE-2016-9909</code>). This causes headaches with compliance - \"yes sir we are indeed running vulnerable data sanitization packages with known CVEs, but trust us it's not used. we swear\".</p>\n</li>\n<li>\n<p>These sub dependencies can cause conflicts in a server environment, especially with bleach and htm5lib, but also with werkzeug and markdown.</p>\n</li>\n<li>\n<p>Python packaging itself is a headache, and if you use something like pipenv it's not easy or even supported to exclude a subdependency in the way we want. Running <code>pip uninstall xyz</code> afterwards is a hack at best and one only exclusively used for this situation. Not great.</p>\n</li>\n</ol>\n<p>All of these are exacerbated in my mind as Tensorboard is not used <em>or</em> required in the situations we are using it. As we are building a custom Tensorflow package that matches our CPU features I would simply love a build flag to disable the dependency link.</p>", "body_text": "Hey @marshalhayes, thank you for your quick reply. Let me just elaborate a bit.\nI have no problem with Tensorboard being bundled with the default Tensorflow package but in the context of a server environment specifically I've elaborated on a few issues below. I only ask for the idea that when building a custom Tensorflow package the option is given to disable the dependency link somehow.\n\n\nThe current stable tensorflow, via tensorboard, pulls in vulnerable versions of html5lib and bleach, in the case of html5lib there is a CVE from 2016 (CVE-2016-9909). This causes headaches with compliance - \"yes sir we are indeed running vulnerable data sanitization packages with known CVEs, but trust us it's not used. we swear\".\n\n\nThese sub dependencies can cause conflicts in a server environment, especially with bleach and htm5lib, but also with werkzeug and markdown.\n\n\nPython packaging itself is a headache, and if you use something like pipenv it's not easy or even supported to exclude a subdependency in the way we want. Running pip uninstall xyz afterwards is a hack at best and one only exclusively used for this situation. Not great.\n\n\nAll of these are exacerbated in my mind as Tensorboard is not used or required in the situations we are using it. As we are building a custom Tensorflow package that matches our CPU features I would simply love a build flag to disable the dependency link.", "body": "Hey @marshalhayes, thank you for your quick reply. Let me just elaborate a bit.\r\n\r\nI have no problem with Tensorboard being bundled with the default Tensorflow package but in the context of a server environment specifically I've elaborated on a few issues below. I only ask for the idea that when building a *custom* Tensorflow package the *option* is given to disable the dependency link somehow.\r\n\r\n1. The current stable tensorflow, via tensorboard, pulls in vulnerable versions of `html5lib` and `bleach`, in the case of `html5lib` there is a CVE from 2016 (`CVE-2016-9909`). This causes headaches with compliance - \"yes sir we are indeed running vulnerable data sanitization packages with known CVEs, but trust us it's not used. we swear\".\r\n\r\n2. These sub dependencies can cause conflicts in a server environment, especially with bleach and htm5lib, but also with werkzeug and markdown.\r\n\r\n3. Python packaging itself is a headache, and if you use something like pipenv it's not easy or even supported to exclude a subdependency in the way we want. Running `pip uninstall xyz` afterwards is a hack at best and one only exclusively used for this situation. Not great.\r\n\r\nAll of these are exacerbated in my mind as Tensorboard is not used *or* required in the situations we are using it. As we are building a custom Tensorflow package that matches our CPU features I would simply love a build flag to disable the dependency link."}