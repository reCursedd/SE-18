{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11864", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11864/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11864/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11864/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11864", "id": 246499326, "node_id": "MDU6SXNzdWUyNDY0OTkzMjY=", "number": 11864, "title": "tf.nn.conv2d produces incorrect results", "user": {"login": "Valentin4869", "id": 12462272, "node_id": "MDQ6VXNlcjEyNDYyMjcy", "avatar_url": "https://avatars2.githubusercontent.com/u/12462272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Valentin4869", "html_url": "https://github.com/Valentin4869", "followers_url": "https://api.github.com/users/Valentin4869/followers", "following_url": "https://api.github.com/users/Valentin4869/following{/other_user}", "gists_url": "https://api.github.com/users/Valentin4869/gists{/gist_id}", "starred_url": "https://api.github.com/users/Valentin4869/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Valentin4869/subscriptions", "organizations_url": "https://api.github.com/users/Valentin4869/orgs", "repos_url": "https://api.github.com/users/Valentin4869/repos", "events_url": "https://api.github.com/users/Valentin4869/events{/privacy}", "received_events_url": "https://api.github.com/users/Valentin4869/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-29T04:54:57Z", "updated_at": "2017-07-29T06:09:05Z", "closed_at": "2017-07-29T06:09:05Z", "author_association": "NONE", "body_html": "<p>conv2d doesn't seem to produce results that are correct when compared with a C++ implementation and MATLAB's conv2. These errors are most pronounced when importing parameters from an external model. The same network in tf produces an accuracy of 60% while the original network has an accuracy of 97%. To verify that the problem indeed is in tf's conv2d, I used the following simple example:<br>\n<strong>MATLAB code</strong><br>\n<code>k2=reshape(1:9,[3,3])'</code><br>\n<code>k2=repmat(k2,[1,1,3])</code><br>\n<code>x2=reshape(1:16,[4,4])'</code><br>\n<code>x2=repmat(x2,[1,1,3])</code><br>\n<code>c=conv2(x2(:,:,1),k2(:,:,1),'same') + conv2(x2(:,:,2),k2(:,:,2),'same')+ conv2(x2(:,:,3),k2(:,:,3),'same')</code></p>\n<p><strong>output:</strong><br>\n<code>          87         186         249         225</code><br>\n<code>         297         576         711         594</code><br>\n<code>         621        1116        1251         990</code><br>\n<code>         789        1338        1455        1095</code></p>\n<p><strong>Python TF code</strong><br>\n<code>import tensorflow as tf</code><br>\n<code>import numpy as np</code></p>\n<p><code>k=np.reshape(range(1,10),[3,3,1,1])</code><br>\n<code>k=np.repeat(k,3,2).astype('float16')</code></p>\n<p><code>x=np.reshape(range(1,17),[1,4,4,1])</code><br>\n<code>x=np.repeat(x,3,3).astype('float16')</code></p>\n<p><code>dev_X = tf.Variable(x,dtype=tf.float16)</code><br>\n<code>dev_K = tf.Variable(k,dtype=tf.float16)</code></p>\n<p><code>dev_C=tf.nn.conv2d(dev_X, dev_K, strides=[1, 1, 1, 1], padding='SAME')</code></p>\n<p><code>session=tf.Session(); </code><br>\n<code>session.run(tf.global_variables_initializer()); </code><br>\n<code>print(session.run(dev_C)[0,:,:,0])</code></p>\n<p><strong>output:</strong><br>\n<code>[[  333.   534.   651.   435.]</code><br>\n<code> [  693.  1044.  1179.   756.]</code><br>\n<code> [ 1089.  1584.  1719.  1080.]</code><br>\n<code> [  591.   822.   885.   525.]]</code></p>\n<p>What exactly is different in tf's implementation of convolution? Is this a bug?</p>", "body_text": "conv2d doesn't seem to produce results that are correct when compared with a C++ implementation and MATLAB's conv2. These errors are most pronounced when importing parameters from an external model. The same network in tf produces an accuracy of 60% while the original network has an accuracy of 97%. To verify that the problem indeed is in tf's conv2d, I used the following simple example:\nMATLAB code\nk2=reshape(1:9,[3,3])'\nk2=repmat(k2,[1,1,3])\nx2=reshape(1:16,[4,4])'\nx2=repmat(x2,[1,1,3])\nc=conv2(x2(:,:,1),k2(:,:,1),'same') + conv2(x2(:,:,2),k2(:,:,2),'same')+ conv2(x2(:,:,3),k2(:,:,3),'same')\noutput:\n          87         186         249         225\n         297         576         711         594\n         621        1116        1251         990\n         789        1338        1455        1095\nPython TF code\nimport tensorflow as tf\nimport numpy as np\nk=np.reshape(range(1,10),[3,3,1,1])\nk=np.repeat(k,3,2).astype('float16')\nx=np.reshape(range(1,17),[1,4,4,1])\nx=np.repeat(x,3,3).astype('float16')\ndev_X = tf.Variable(x,dtype=tf.float16)\ndev_K = tf.Variable(k,dtype=tf.float16)\ndev_C=tf.nn.conv2d(dev_X, dev_K, strides=[1, 1, 1, 1], padding='SAME')\nsession=tf.Session(); \nsession.run(tf.global_variables_initializer()); \nprint(session.run(dev_C)[0,:,:,0])\noutput:\n[[  333.   534.   651.   435.]\n [  693.  1044.  1179.   756.]\n [ 1089.  1584.  1719.  1080.]\n [  591.   822.   885.   525.]]\nWhat exactly is different in tf's implementation of convolution? Is this a bug?", "body": "conv2d doesn't seem to produce results that are correct when compared with a C++ implementation and MATLAB's conv2. These errors are most pronounced when importing parameters from an external model. The same network in tf produces an accuracy of 60% while the original network has an accuracy of 97%. To verify that the problem indeed is in tf's conv2d, I used the following simple example:\r\n**MATLAB code**\r\n`k2=reshape(1:9,[3,3])'`\r\n`k2=repmat(k2,[1,1,3])`\r\n`x2=reshape(1:16,[4,4])'`\r\n`x2=repmat(x2,[1,1,3])`\r\n`c=conv2(x2(:,:,1),k2(:,:,1),'same') + conv2(x2(:,:,2),k2(:,:,2),'same')+ conv2(x2(:,:,3),k2(:,:,3),'same')`\r\n\r\n**output:**\r\n`          87         186         249         225`\r\n`         297         576         711         594`\r\n`         621        1116        1251         990`\r\n`         789        1338        1455        1095`\r\n\r\n**Python TF code**\r\n`import tensorflow as tf`\r\n`import numpy as np`\r\n\r\n`k=np.reshape(range(1,10),[3,3,1,1])`\r\n`k=np.repeat(k,3,2).astype('float16')`\r\n\r\n`x=np.reshape(range(1,17),[1,4,4,1])`\r\n`x=np.repeat(x,3,3).astype('float16')`\r\n\r\n`dev_X = tf.Variable(x,dtype=tf.float16)`\r\n`dev_K = tf.Variable(k,dtype=tf.float16)`\r\n\r\n`dev_C=tf.nn.conv2d(dev_X, dev_K, strides=[1, 1, 1, 1], padding='SAME')`\r\n\r\n`session=tf.Session(); `\r\n`session.run(tf.global_variables_initializer()); `\r\n`print(session.run(dev_C)[0,:,:,0])`\r\n\r\n**output:**\r\n`[[  333.   534.   651.   435.]`\r\n` [  693.  1044.  1179.   756.]`\r\n` [ 1089.  1584.  1719.  1080.]`\r\n` [  591.   822.   885.   525.]]`\r\n\r\n\r\n\r\n\r\nWhat exactly is different in tf's implementation of convolution? Is this a bug?"}