{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/379", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/379/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/379/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/379/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/379", "id": 119584974, "node_id": "MDU6SXNzdWUxMTk1ODQ5NzQ=", "number": 379, "title": "incorrect app.flags.DEFINE_boolean behavior ", "user": {"login": "mborgerding", "id": 12561841, "node_id": "MDQ6VXNlcjEyNTYxODQx", "avatar_url": "https://avatars3.githubusercontent.com/u/12561841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mborgerding", "html_url": "https://github.com/mborgerding", "followers_url": "https://api.github.com/users/mborgerding/followers", "following_url": "https://api.github.com/users/mborgerding/following{/other_user}", "gists_url": "https://api.github.com/users/mborgerding/gists{/gist_id}", "starred_url": "https://api.github.com/users/mborgerding/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mborgerding/subscriptions", "organizations_url": "https://api.github.com/users/mborgerding/orgs", "repos_url": "https://api.github.com/users/mborgerding/repos", "events_url": "https://api.github.com/users/mborgerding/events{/privacy}", "received_events_url": "https://api.github.com/users/mborgerding/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2015-11-30T21:28:34Z", "updated_at": "2018-11-22T18:29:58Z", "closed_at": "2015-12-01T21:43:25Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>demo python script</h3>\n<p>test.py</p>\n<pre><code>#!/usr/bin/python\nimport tensorflow as tf\ntf.app.flags.DEFINE_boolean('tea',False,'Soggy Leaves')\ncfg = tf.app.flags.FLAGS\n\nif cfg.tea:\n    print( \"have some tea\" )\nelse:\n    print( \"no tea\" )\n</code></pre>\n<h3>Expected behavior</h3>\n<p>When the above test.py is run with any of {(no arguments), --notea, or --tea=True}, the script behaves as expected...</p>\n<pre><code>[markb@schur tmp]$ ./test.py\nno tea\n[markb@schur tmp]$ ./test.py --notea\nno tea\n[markb@schur tmp]$ ./test.py --tea=True\nhave some tea\n</code></pre>\n<h3>Weird stuff</h3>\n<p>Strangely <code>--tea=False</code> is <em>incorrectly</em> interpreted as True.  Having both tea and no tea is only possible in certain Infocom games.</p>\n<pre><code>[markb@schur tmp]$ ./test.py --tea=False\nhave some tea\n</code></pre>\n<p>Apparently, only those who <em>truly</em> want tea will get it.</p>\n<pre><code>[markb@schur tmp]$ ./test.py --tea\nusage: test.py [-h] [--tea TEA] [--notea]\ntest.py: error: argument --tea: expected one argument\n</code></pre>\n<p>C'mon. It's a boolean flag !<br>\n\"Say something once.  Why say it again?\"  -- <em>Talking Heads</em></p>", "body_text": "demo python script\ntest.py\n#!/usr/bin/python\nimport tensorflow as tf\ntf.app.flags.DEFINE_boolean('tea',False,'Soggy Leaves')\ncfg = tf.app.flags.FLAGS\n\nif cfg.tea:\n    print( \"have some tea\" )\nelse:\n    print( \"no tea\" )\n\nExpected behavior\nWhen the above test.py is run with any of {(no arguments), --notea, or --tea=True}, the script behaves as expected...\n[markb@schur tmp]$ ./test.py\nno tea\n[markb@schur tmp]$ ./test.py --notea\nno tea\n[markb@schur tmp]$ ./test.py --tea=True\nhave some tea\n\nWeird stuff\nStrangely --tea=False is incorrectly interpreted as True.  Having both tea and no tea is only possible in certain Infocom games.\n[markb@schur tmp]$ ./test.py --tea=False\nhave some tea\n\nApparently, only those who truly want tea will get it.\n[markb@schur tmp]$ ./test.py --tea\nusage: test.py [-h] [--tea TEA] [--notea]\ntest.py: error: argument --tea: expected one argument\n\nC'mon. It's a boolean flag !\n\"Say something once.  Why say it again?\"  -- Talking Heads", "body": "### demo python script\n\n test.py \n\n```\n#!/usr/bin/python\nimport tensorflow as tf\ntf.app.flags.DEFINE_boolean('tea',False,'Soggy Leaves')\ncfg = tf.app.flags.FLAGS\n\nif cfg.tea:\n    print( \"have some tea\" )\nelse:\n    print( \"no tea\" )\n```\n### Expected behavior\n\nWhen the above test.py is run with any of {(no arguments), --notea, or --tea=True}, the script behaves as expected...\n\n```\n[markb@schur tmp]$ ./test.py\nno tea\n[markb@schur tmp]$ ./test.py --notea\nno tea\n[markb@schur tmp]$ ./test.py --tea=True\nhave some tea\n```\n### Weird stuff\n\nStrangely `--tea=False` is _incorrectly_ interpreted as True.  Having both tea and no tea is only possible in certain Infocom games.\n\n```\n[markb@schur tmp]$ ./test.py --tea=False\nhave some tea\n```\n\nApparently, only those who _truly_ want tea will get it.  \n\n```\n[markb@schur tmp]$ ./test.py --tea\nusage: test.py [-h] [--tea TEA] [--notea]\ntest.py: error: argument --tea: expected one argument\n```\n\nC'mon. It's a boolean flag ! \n\"Say something once.  Why say it again?\"  -- _Talking Heads_\n"}