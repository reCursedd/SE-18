{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/278511264", "html_url": "https://github.com/tensorflow/tensorflow/issues/7314#issuecomment-278511264", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7314", "id": 278511264, "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODUxMTI2NA==", "user": {"login": "jkiske", "id": 1057200, "node_id": "MDQ6VXNlcjEwNTcyMDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1057200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkiske", "html_url": "https://github.com/jkiske", "followers_url": "https://api.github.com/users/jkiske/followers", "following_url": "https://api.github.com/users/jkiske/following{/other_user}", "gists_url": "https://api.github.com/users/jkiske/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkiske/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkiske/subscriptions", "organizations_url": "https://api.github.com/users/jkiske/orgs", "repos_url": "https://api.github.com/users/jkiske/repos", "events_url": "https://api.github.com/users/jkiske/events{/privacy}", "received_events_url": "https://api.github.com/users/jkiske/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-09T00:46:43Z", "updated_at": "2017-02-09T01:07:16Z", "author_association": "NONE", "body_html": "<p>For anyone interested in <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15258583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/josh11b\">@josh11b</a> 's solution, this worked for me (although I'm not sure if there is a better way). This is really helpful when your data and labels are in separate files.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> tensorflow.python.training <span class=\"pl-k\">import</span> queue_runner\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">wrap_with_queue</span>(<span class=\"pl-smi\">tensor</span>, <span class=\"pl-smi\">dtypes</span><span class=\"pl-k\">=</span>tf.string):\n    queue <span class=\"pl-k\">=</span> tf.FIFOQueue(<span class=\"pl-c1\">1</span>, <span class=\"pl-v\">dtypes</span><span class=\"pl-k\">=</span>dtypes)\n    enqueue_op <span class=\"pl-k\">=</span> queue.enqueue(tensor)\n    queue_runner.add_queue_runner(queue_runner.QueueRunner(queue, [enqueue_op]))\n    <span class=\"pl-k\">return</span> queue\n\nimage_files <span class=\"pl-k\">=</span> glob(<span class=\"pl-c1\">...</span>)\nlabel_files <span class=\"pl-k\">=</span> [s.replace(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>image.jpg<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>labels.jpg<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">for</span> s <span class=\"pl-k\">in</span> image_files]\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Create a queue where the elements are pairs (image, label)</span>\nimage_file_op, label_file_op <span class=\"pl-k\">=</span> tf.train.slice_input_producer([image_files, label_files])\nimage_queue <span class=\"pl-k\">=</span> wrap_with_queue(image_file_op)\nlabel_queue <span class=\"pl-k\">=</span> wrap_with_queue(label_file_op)\n\nimages, labels <span class=\"pl-k\">=</span> [], []\n<span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> num_threads:\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Create two readers for each thread - one for the image and one for the label</span>\n    image_reader, label_reader <span class=\"pl-k\">=</span> tf.SomeReader(), tf.SomeReader()\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Read the image and label pair</span>\n    _, image_op <span class=\"pl-k\">=</span> image_reader.read(image_queue)\n    _, label_op <span class=\"pl-k\">=</span> label_reader.read(label_queue)\n    images.append(image_op)\n    labels.append(label_op)\n\nsess <span class=\"pl-k\">=</span> tf.Session()\ntf.train.start_queue_runners(<span class=\"pl-v\">sess</span><span class=\"pl-k\">=</span>sess)</pre></div>", "body_text": "For anyone interested in @josh11b 's solution, this worked for me (although I'm not sure if there is a better way). This is really helpful when your data and labels are in separate files.\nfrom tensorflow.python.training import queue_runner\n\ndef wrap_with_queue(tensor, dtypes=tf.string):\n    queue = tf.FIFOQueue(1, dtypes=dtypes)\n    enqueue_op = queue.enqueue(tensor)\n    queue_runner.add_queue_runner(queue_runner.QueueRunner(queue, [enqueue_op]))\n    return queue\n\nimage_files = glob(...)\nlabel_files = [s.replace('image.jpg', 'labels.jpg') for s in image_files]\n# Create a queue where the elements are pairs (image, label)\nimage_file_op, label_file_op = tf.train.slice_input_producer([image_files, label_files])\nimage_queue = wrap_with_queue(image_file_op)\nlabel_queue = wrap_with_queue(label_file_op)\n\nimages, labels = [], []\nfor _ in num_threads:\n    # Create two readers for each thread - one for the image and one for the label\n    image_reader, label_reader = tf.SomeReader(), tf.SomeReader()\n    # Read the image and label pair\n    _, image_op = image_reader.read(image_queue)\n    _, label_op = label_reader.read(label_queue)\n    images.append(image_op)\n    labels.append(label_op)\n\nsess = tf.Session()\ntf.train.start_queue_runners(sess=sess)", "body": "For anyone interested in @josh11b 's solution, this worked for me (although I'm not sure if there is a better way). This is really helpful when your data and labels are in separate files.\r\n\r\n```python\r\nfrom tensorflow.python.training import queue_runner\r\n\r\ndef wrap_with_queue(tensor, dtypes=tf.string):\r\n    queue = tf.FIFOQueue(1, dtypes=dtypes)\r\n    enqueue_op = queue.enqueue(tensor)\r\n    queue_runner.add_queue_runner(queue_runner.QueueRunner(queue, [enqueue_op]))\r\n    return queue\r\n\r\nimage_files = glob(...)\r\nlabel_files = [s.replace('image.jpg', 'labels.jpg') for s in image_files]\r\n# Create a queue where the elements are pairs (image, label)\r\nimage_file_op, label_file_op = tf.train.slice_input_producer([image_files, label_files])\r\nimage_queue = wrap_with_queue(image_file_op)\r\nlabel_queue = wrap_with_queue(label_file_op)\r\n\r\nimages, labels = [], []\r\nfor _ in num_threads:\r\n    # Create two readers for each thread - one for the image and one for the label\r\n    image_reader, label_reader = tf.SomeReader(), tf.SomeReader()\r\n    # Read the image and label pair\r\n    _, image_op = image_reader.read(image_queue)\r\n    _, label_op = label_reader.read(label_queue)\r\n    images.append(image_op)\r\n    labels.append(label_op)\r\n\r\nsess = tf.Session()\r\ntf.train.start_queue_runners(sess=sess)\r\n```"}