{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/116590697", "pull_request_review_id": 38214114, "id": 116590697, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjU5MDY5Nw==", "diff_hunk": "@@ -0,0 +1,216 @@\n+#ifndef TENSORFLOW_KERNELS_PERIODICINTERSPERSE_OP_H_\n+#define TENSORFLOW_KERNELS_PERIODICINTERSPERSE_OP_H_\n+\n+#include <cmath>\n+#include <type_traits>\n+#include <vector>\n+#include \"tensorflow/core/lib/core/status.h\"\n+#include \"tensorflow/core/framework/op.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/shape_inference.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+\n+using namespace tensorflow;\n+using std::vector;\n+using std::decay;\n+\n+\n+template<class IndexVec_t, class Index_t>\n+Index_t compute_input_index(IndexVec_t &Y, const Index_t &i,\n+                            const IndexVec_t &X, const int &q,\n+                            const vector<int64> &g, const vector<int64> &G,\n+                            Index_t &result, vector<Index_t> &output_indices,\n+                            const typename decay<decltype(Y.size())>::type &rank)\n+{\n+  result = 0;\n+  output_indices.clear();\n+\n+  // un-rasterize the output index\n+  {\n+    auto last_reduced_i = i;\n+    for (auto r = rank - 1;; --r) {\n+      output_indices[r] = last_reduced_i % Y[r];\n+      last_reduced_i = (last_reduced_i - output_indices[r]) / Y[r];\n+      if (r == 0) break;\n+    }\n+  }\n+\n+  // rasterize the input index\n+  {\n+    Index_t last_index_factor = 1;\n+    for (auto r = rank - 1;; --r) {\n+      Index_t index = 0;\n+      if (r != q)\n+        index = output_indices[r]/g[r];\n+      else {\n+        for (int qi = 0; qi < rank; ++qi) {\n+          // if (qi == r) continue;\n+          if (qi == q) continue;\n+          index += G[qi]*(output_indices[qi] % g[qi]);\n+        }\n+        index *= Y[q];\n+        // index *= Y[r];\n+        index += output_indices[r];\n+      }\n+      result += last_index_factor*index;\n+      last_index_factor *= X[r];\n+      if (r == 0) break;\n+    }\n+  }\n+\n+  return result;\n+}\n+\n+\n+template<class T, class Vec_t>\n+void main_logic (OpKernelContext *context,\n+                 const Vec_t &desired_shape,\n+                 const Tensor &input_tensor)\n+{\n+  // NOTE input is a strided array (last index is fastest, C-ordered)\n+  auto input = input_tensor.flat<T>();\n+  const int rank = input_tensor.dims();\n+  const auto original_size = input.size();\n+  // NOTE original and target dimensions\n+  vector<int64> X(rank), Y(rank);\n+  int64 total_size = 1, new_sliced_size = 1;\n+  // NOTE factor by which X increases/decreases w.r.t. Y\n+  vector<float> f(rank);\n+  // NOTE helper arrays related to f\n+  vector<int64> g(rank), G(rank);\n+  // NOTE index of adjustable dimension\n+  int q;\n+  TensorShape output_shape;\n+\n+  // NOTE requires that the rank of the input tensor and length of the desired shape are equal\n+  OP_REQUIRES(context, rank == desired_shape.size(),\n+              errors::InvalidArgument(\"periodic_intersperse expects the rank of the input tensor, \",\n+              rank, \", to be the same as the length of the desired shape, \", desired_shape.size(), \".\"));\n+\n+  // NOTE from here on, the logic parallels notebook\n+  {\n+    bool found = false;\n+    for (int i = 0; i < rank; ++i) {\n+      if (desired_shape(i) < 1) {\n+        // NOTE only one index can be adjustable\n+        OP_REQUIRES(context, !found,\n+                    errors::InvalidArgument(\"periodic_intersperse expects only \"\n+                    \"one index to be marked as adjustable.\"));\n+        q = i;\n+        found = true;\n+      }\n+      else {\n+        Y[i] = desired_shape(i);\n+        new_sliced_size *= Y[i];\n+      }\n+    }\n+    // NOTE at least one index needs to be adjustable\n+    OP_REQUIRES(context, found,\n+                errors::InvalidArgument(\"periodic_intersperse expects at least \"\n+                \"one index to be marked as adjustable.\"));\n+\n+    int count = 0;\n+    for (const auto dim_info : input_tensor.shape()) {\n+      X[count] = dim_info.size;\n+      total_size *= X[count];\n+      ++count;\n+    }\n+\n+    Y[q] = int64(std::floor(float(total_size)/float(new_sliced_size)));\n+\n+    count = 0;\n+    for (const auto dim_info : input_tensor.shape()) {\n+        f[count] = float(Y[count])/float(X[count]);\n+        g[count] = int64(std::ceil(f[count]));\n+        if (count == 0) G[count] = 1;\n+        else G[count] = G[count - 1]*g[count - 1];\n+      ++count;\n+    }\n+  }\n+\n+  // NOTE ensure that the new dimension is greater than zero\n+  OP_REQUIRES(context, Y[q] > 0,\n+              errors::InvalidArgument(\"periodic_intersperse found that the \"\n+              \"adjustable dimension, \", q, \", isn't greater than zero, \", Y[q],\n+              \".\"));\n+  for (int i = 0; i < rank; ++i) {\n+    output_shape.AddDim(Y[i]);\n+  }\n+  const auto new_size = new_sliced_size*Y[q];\n+\n+  // Create an output tensor and attach it to the current context\n+  Tensor* output_tensor = NULL;\n+  OP_REQUIRES_OK(context, context->allocate_output(0, output_shape,\n+    &output_tensor));\n+  auto output = output_tensor->flat<T>();\n+\n+  {\n+    // NOTE memory is allocated for these variables outside the inner loop for\n+    //      efficiency (yes, I know I could create a separate class scope for\n+    //      this purpose instead)\n+    typename decay<decltype(new_size)>::type result = 0;\n+    vector<decltype(result)> output_indices(Y.size());\n+    const auto rank = Y.size();\n+\n+    // Fill output tensor with shuffled input tensor values\n+    for (typename decay<decltype(new_size)>::type i = 0; i < new_size; ++i) {\n+      output(i) = input(compute_input_index(Y, i, X, q, g, G,\n+                                            result, output_indices, rank));\n+    }\n+  }\n+}\n+\n+\n+template<class T>\n+void create_output_Tensor (OpKernelContext *context,\n+                           const Tensor &input_tensor,\n+                           const DataType &input_tensor_type,\n+                           const Tensor &desired_shape_tensor)\n+{\n+  auto desired_shape = desired_shape_tensor.flat<T>();\n+\n+  // obligatory type switch\n+  if (input_tensor_type == DataTypeToEnum<float>::value)\n+    main_logic<float>(context, desired_shape, input_tensor);", "path": "tensorflow/contrib/periodic_intersperse/core/kernels/periodic_intersperse_op.h", "position": null, "original_position": 174, "commit_id": "a692d209ab86d5f3b22fdb46cab992b8fe4bccbd", "original_commit_id": "9410d6fe5e66fb7da763f3d3e3d9070bcb6926e6", "user": {"login": "suharshs", "id": 1450614, "node_id": "MDQ6VXNlcjE0NTA2MTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1450614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suharshs", "html_url": "https://github.com/suharshs", "followers_url": "https://api.github.com/users/suharshs/followers", "following_url": "https://api.github.com/users/suharshs/following{/other_user}", "gists_url": "https://api.github.com/users/suharshs/gists{/gist_id}", "starred_url": "https://api.github.com/users/suharshs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suharshs/subscriptions", "organizations_url": "https://api.github.com/users/suharshs/orgs", "repos_url": "https://api.github.com/users/suharshs/repos", "events_url": "https://api.github.com/users/suharshs/events{/privacy}", "received_events_url": "https://api.github.com/users/suharshs/received_events", "type": "User", "site_admin": false}, "body": "Please change the conditionals to either\r\n\r\n```if (foo) bar;```\r\n\r\nor \r\n\r\n```\r\nif (foo) {\r\n  bar;\r\n}\r\n```\r\nhttps://google.github.io/styleguide/cppguide.html#Conditionals\r\nAdditionally please use else ifs in this clause. ", "created_at": "2017-05-15T20:19:47Z", "updated_at": "2017-11-07T22:09:13Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9376#discussion_r116590697", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9376", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/116590697"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9376#discussion_r116590697"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9376"}}, "body_html": "<p>Please change the conditionals to either</p>\n<p><code>if (foo) bar;</code></p>\n<p>or</p>\n<pre><code>if (foo) {\n  bar;\n}\n</code></pre>\n<p><a href=\"https://google.github.io/styleguide/cppguide.html#Conditionals\" rel=\"nofollow\">https://google.github.io/styleguide/cppguide.html#Conditionals</a><br>\nAdditionally please use else ifs in this clause.</p>", "body_text": "Please change the conditionals to either\nif (foo) bar;\nor\nif (foo) {\n  bar;\n}\n\nhttps://google.github.io/styleguide/cppguide.html#Conditionals\nAdditionally please use else ifs in this clause."}