{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/124185892", "pull_request_review_id": 46451876, "id": 124185892, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDE4NTg5Mg==", "diff_hunk": "@@ -0,0 +1,231 @@\n+// =============================================================================\n+// Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+// =============================================================================\n+\n+#ifndef TENSORFLOW_KERNELS_PERIODICINTERSPERSE_OP_H_\n+#define TENSORFLOW_KERNELS_PERIODICINTERSPERSE_OP_H_\n+\n+#include <cmath>\n+#include <type_traits>\n+#include <vector>\n+#include \"tensorflow/core/lib/core/status.h\"\n+#include \"tensorflow/core/framework/op.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/shape_inference.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+\n+template <class IndexVecT, class IndexT>\n+IndexT compute_input_index(\n+    IndexVecT& Y, const IndexT& i, const IndexVecT& X, const int& q,\n+    const std::vector<tensorflow::int64>& g,\n+    const std::vector<tensorflow::int64>& G, IndexT& result,\n+    std::vector<IndexT>& output_indices,\n+    const typename std::decay<decltype(Y.size())>::type& rank) {\n+  result = 0;\n+  output_indices.clear();\n+\n+  // un-rasterize the output index\n+  {\n+    auto last_reduced_i = i;\n+    auto r = rank;\n+    do {\n+      --r;\n+      output_indices[r] = last_reduced_i % Y[r];\n+      last_reduced_i = (last_reduced_i - output_indices[r]) / Y[r];\n+    } while (r > 0);\n+  }\n+\n+  // rasterize the input index\n+  {\n+    IndexT last_index_factor = 1;\n+    for (auto r = rank - 1;; --r) {\n+      IndexT index = 0;\n+      if (r != q)\n+        index = output_indices[r] / g[r];\n+      else {\n+        for (int qi = 0; qi < rank; ++qi) {\n+          if (qi == q) continue;\n+          index += G[qi] * (output_indices[qi] % g[qi]);\n+        }\n+        index *= Y[q];\n+        index += output_indices[r];\n+      }\n+      result += last_index_factor * index;\n+      last_index_factor *= X[r];\n+      if (r == 0) break;\n+    }\n+  }\n+\n+  return result;\n+}\n+\n+template <class T, class VecT>\n+void main_logic(tensorflow::OpKernelContext* context, const VecT& desired_shape,\n+                const tensorflow::Tensor& input_tensor) {\n+  // input is a strided array (last index is fastest, C-ordered)\n+  auto input = input_tensor.flat<T>();\n+  const int rank = input_tensor.dims();\n+  const auto original_size = input.size();\n+  // original and target dimensions\n+  std::vector<tensorflow::int64> X(rank), Y(rank);\n+  tensorflow::int64 total_size = 1, new_sliced_size = 1;\n+  // factor by which X increases/decreases w.r.t. Y\n+  std::vector<float> f(rank);\n+  // helper arrays related to f\n+  std::vector<tensorflow::int64> g(rank), G(rank);\n+  // index of adjustable dimension\n+  int q;\n+  tensorflow::TensorShape output_shape;\n+\n+  // requires that the rank of the input tensor and length of the desired shape\n+  // are equal\n+  OP_REQUIRES(context, rank == desired_shape.size(),\n+              tensorflow::errors::InvalidArgument(\n+                  \"periodic_intersperse expects the rank of the input tensor, \",\n+                  rank, \", to be the same as the length of the desired shape, \",\n+                  desired_shape.size(), \".\"));\n+\n+  {\n+    bool found = false;\n+    for (int i = 0; i < rank; ++i) {\n+      if (desired_shape(i) < 1) {\n+        // only one index can be adjustable\n+        OP_REQUIRES(context, !found,\n+                    tensorflow::errors::InvalidArgument(\n+                        \"periodic_intersperse expects only \"\n+                        \"one index to be marked as adjustable.\"));\n+        q = i;\n+        found = true;\n+      } else {\n+        Y[i] = desired_shape(i);\n+        new_sliced_size *= Y[i];\n+      }\n+    }\n+    // at least one index needs to be adjustable\n+    OP_REQUIRES(context, found, tensorflow::errors::InvalidArgument(\n+                                    \"periodic_intersperse expects at least \"\n+                                    \"one index to be marked as adjustable.\"));\n+\n+    int count = 0;\n+    for (const auto dim_info : input_tensor.shape()) {\n+      X[count] = dim_info.size;\n+      total_size *= X[count];\n+      ++count;\n+    }\n+\n+    Y[q] = tensorflow::int64(\n+        std::floor(float(total_size) / float(new_sliced_size)));\n+\n+    count = 0;\n+    for (const auto dim_info : input_tensor.shape()) {\n+      f[count] = float(Y[count]) / float(X[count]);\n+      g[count] = tensorflow::int64(std::ceil(f[count]));\n+      if (count == 0)\n+        G[count] = 1;\n+      else\n+        G[count] = G[count - 1] * g[count - 1];\n+      ++count;\n+    }\n+  }\n+\n+  // ensure that the new dimension is greater than zero\n+  OP_REQUIRES(context, Y[q] > 0,\n+              tensorflow::errors::InvalidArgument(\n+                  \"periodic_intersperse found that the \"\n+                  \"adjustable dimension, \",\n+                  q, \", isn't greater than zero, \", Y[q], \".\"));\n+  for (int i = 0; i < rank; ++i) {\n+    output_shape.AddDim(Y[i]);\n+  }\n+  const auto new_size = new_sliced_size * Y[q];\n+\n+  // Create an output tensor and attach it to the current context\n+  tensorflow::Tensor* output_tensor = nullptr;\n+  OP_REQUIRES_OK(context,\n+                 context->allocate_output(0, output_shape, &output_tensor));\n+  auto output = output_tensor->flat<T>();\n+\n+  {\n+    // memory is allocated for these variables outside the inner loop for\n+    // efficiency (yes, I know I could create a separate class scope for\n+    // this purpose instead)\n+    typename std::decay<decltype(new_size)>::type result = 0;", "path": "tensorflow/contrib/periodic_intersperse/core/kernels/periodic_intersperse_op.h", "position": null, "original_position": 164, "commit_id": "a692d209ab86d5f3b22fdb46cab992b8fe4bccbd", "original_commit_id": "c7fb95564cc64ee1e24b5eec70872a79041cc5a5", "user": {"login": "jhetherly", "id": 5003889, "node_id": "MDQ6VXNlcjUwMDM4ODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/5003889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhetherly", "html_url": "https://github.com/jhetherly", "followers_url": "https://api.github.com/users/jhetherly/followers", "following_url": "https://api.github.com/users/jhetherly/following{/other_user}", "gists_url": "https://api.github.com/users/jhetherly/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhetherly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhetherly/subscriptions", "organizations_url": "https://api.github.com/users/jhetherly/orgs", "repos_url": "https://api.github.com/users/jhetherly/repos", "events_url": "https://api.github.com/users/jhetherly/events{/privacy}", "received_events_url": "https://api.github.com/users/jhetherly/received_events", "type": "User", "site_admin": false}, "body": "removed the type inference ", "created_at": "2017-06-27T06:19:16Z", "updated_at": "2017-11-07T22:09:13Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9376#discussion_r124185892", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9376", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/124185892"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9376#discussion_r124185892"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9376"}}, "body_html": "<p>removed the type inference</p>", "body_text": "removed the type inference", "in_reply_to_id": 121999447}