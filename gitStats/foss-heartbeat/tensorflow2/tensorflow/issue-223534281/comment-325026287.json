{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/325026287", "html_url": "https://github.com/tensorflow/tensorflow/pull/9376#issuecomment-325026287", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9376", "id": 325026287, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTAyNjI4Nw==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-25T20:25:10Z", "updated_at": "2017-08-25T20:25:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think the CMake problems stem from some confusion about the idiomiatic way to include custom op libraries in <code>tf.contrib</code>. (This doesn't appear to be well documented, so it's not your fault!)</p>\n<p>To outline the steps:</p>\n<ol>\n<li>\n<p>Since <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/b2ac11c0797447eb36d427a0907fb2f05af57fcc/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/b2ac11c0797447eb36d427a0907fb2f05af57fcc\"><tt>b2ac11c</tt></a>, we've been statically generating the Python wrappers for all contrib op kernels (on all platforms and build systems). Have a look at that commit to see how to do that; it's quite possible that you're already generating them with the existing Bazel rules. The important thing to note is that the imported symbol(s) for the new ops should come from the <code>gen_*_ops</code> module rather than the result of <code>load_op_library()</code>.</p>\n</li>\n<li>\n<p>To make the build easier on Windows, <strong>delete</strong> the <code>AddUserOps</code> from <code>tf_python.cmake</code>. Including the source files in the list of <code>tf_contrib_kernels_srcs</code> in <code>tf_core_kernels.cmake</code> should be enough to get the code statically linked into the Python extension (which is a somewhat easier route to take on Windows).</p>\n</li>\n<li>\n<p>Keep the <code>GENERATE_PYTHON_OP_LIB()</code> and <code>add_python_module()</code> invocations in <code>tf_python.cmake</code>. Those look right to me.</p>\n</li>\n</ol>", "body_text": "I think the CMake problems stem from some confusion about the idiomiatic way to include custom op libraries in tf.contrib. (This doesn't appear to be well documented, so it's not your fault!)\nTo outline the steps:\n\n\nSince b2ac11c, we've been statically generating the Python wrappers for all contrib op kernels (on all platforms and build systems). Have a look at that commit to see how to do that; it's quite possible that you're already generating them with the existing Bazel rules. The important thing to note is that the imported symbol(s) for the new ops should come from the gen_*_ops module rather than the result of load_op_library().\n\n\nTo make the build easier on Windows, delete the AddUserOps from tf_python.cmake. Including the source files in the list of tf_contrib_kernels_srcs in tf_core_kernels.cmake should be enough to get the code statically linked into the Python extension (which is a somewhat easier route to take on Windows).\n\n\nKeep the GENERATE_PYTHON_OP_LIB() and add_python_module() invocations in tf_python.cmake. Those look right to me.", "body": "I think the CMake problems stem from some confusion about the idiomiatic way to include custom op libraries in `tf.contrib`. (This doesn't appear to be well documented, so it's not your fault!)\r\n\r\nTo outline the steps:\r\n1. Since b2ac11c0797447eb36d427a0907fb2f05af57fcc, we've been statically generating the Python wrappers for all contrib op kernels (on all platforms and build systems). Have a look at that commit to see how to do that; it's quite possible that you're already generating them with the existing Bazel rules. The important thing to note is that the imported symbol(s) for the new ops should come from the `gen_*_ops` module rather than the result of `load_op_library()`.\r\n\r\n2. To make the build easier on Windows, **delete** the `AddUserOps` from `tf_python.cmake`. Including the source files in the list of `tf_contrib_kernels_srcs` in `tf_core_kernels.cmake` should be enough to get the code statically linked into the Python extension (which is a somewhat easier route to take on Windows).\r\n\r\n3. Keep the `GENERATE_PYTHON_OP_LIB()` and `add_python_module()` invocations in `tf_python.cmake`. Those look right to me."}