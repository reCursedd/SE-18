{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/373319407", "html_url": "https://github.com/tensorflow/tensorflow/issues/17728#issuecomment-373319407", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17728", "id": 373319407, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzMxOTQwNw==", "user": {"login": "zyxcambridge", "id": 1818981, "node_id": "MDQ6VXNlcjE4MTg5ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1818981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zyxcambridge", "html_url": "https://github.com/zyxcambridge", "followers_url": "https://api.github.com/users/zyxcambridge/followers", "following_url": "https://api.github.com/users/zyxcambridge/following{/other_user}", "gists_url": "https://api.github.com/users/zyxcambridge/gists{/gist_id}", "starred_url": "https://api.github.com/users/zyxcambridge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zyxcambridge/subscriptions", "organizations_url": "https://api.github.com/users/zyxcambridge/orgs", "repos_url": "https://api.github.com/users/zyxcambridge/repos", "events_url": "https://api.github.com/users/zyxcambridge/events{/privacy}", "received_events_url": "https://api.github.com/users/zyxcambridge/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-15T09:50:06Z", "updated_at": "2018-03-15T09:50:06Z", "author_association": "NONE", "body_html": "<p>/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.</p>\n<p>Licensed under the Apache License, Version 2.0 (the \"License\");<br>\nyou may not use this file except in compliance with the License.<br>\nYou may obtain a copy of the License at</p>\n<p><a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a></p>\n<p>Unless required by applicable law or agreed to in writing, software<br>\ndistributed under the License is distributed on an \"AS IS\" BASIS,<br>\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br>\nSee the License for the specific language governing permissions and<br>\nlimitations under the License.<br>\n==============================================================================*/</p>\n<p>package com.example.android.tflitecamerademo;</p>\n<p>import android.app.Activity;<br>\nimport android.util.Log;</p>\n<p>import java.io.IOException;</p>\n<p>/**</p>\n<ul>\n<li>This classifier works with the Inception-v3 slim model.</li>\n<li>It applies floating point inference rather than using a quantized model.<br>\n*/<br>\npublic class ImageClassifierFloatInception extends ImageClassifier {</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>The inception net requires additional normalization of the used input.<br>\n*/<br>\nprivate static final int IMAGE_MEAN = 128;<br>\nprivate static final float IMAGE_STD = 128.0f;</li>\n</ul>\n<p>/**</p>\n<ul>\n<li>An array to hold inference results, to be feed into Tensorflow Lite as outputs.</li>\n<li>This isn't part of the super class, because we need a primitive array here.<br>\n<em>/<br>\nprivate float[][] labelProbArray = null;<br>\nprivate float[] outputs = null;<br>\nprivate float[][][][] outputs_zyx = null;<br>\n/</em>*</li>\n<li>Initializes an {<a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/code/hovercard\" href=\"https://github.com/code\">@code</a> ImageClassifier}.</li>\n<li></li>\n<li><a class=\"user-mention\" data-hovercard-type=\"organization\" data-hovercard-url=\"/orgs/param/hovercard\" href=\"https://github.com/param\">@param</a> activity<br>\n<em>/<br>\nImageClassifierFloatInception(Activity activity) throws IOException {<br>\nsuper(activity);<br>\nlabelProbArray = new float[1][getNumLabels()];<br>\noutputs = new float[28</em>28*57];<br>\noutputs_zyx = new float[1][28][28][57];<br>\n}</li>\n</ul>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=27325127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/override\">@override</a><br>\nprotected String getModelPath() {<br>\n// you can download this file from<br>\n// <a href=\"https://storage.googleapis.com/download.tensorflow.org/models/tflite/inception_v3_slim_2016_android_2017_11_10.zip\" rel=\"nofollow\">https://storage.googleapis.com/download.tensorflow.org/models/tflite/inception_v3_slim_2016_android_2017_11_10.zip</a><br>\nreturn \"graph_opt.pb.224.tflite\";<br>\n}</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=27325127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/override\">@override</a><br>\nprotected String getLabelPath() {<br>\nreturn \"labels_imagenet_slim.txt\";<br>\n}</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=27325127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/override\">@override</a><br>\nprotected int getImageSizeX() {<br>\nreturn 224;<br>\n}</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=27325127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/override\">@override</a><br>\nprotected int getImageSizeY() {<br>\nreturn 224;<br>\n}</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=27325127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/override\">@override</a><br>\nprotected int getNumBytesPerChannel() {<br>\n// a 32bit float value requires 4 bytes<br>\nreturn 4;<br>\n}</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=27325127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/override\">@override</a><br>\nprotected void addPixelValue(int pixelValue) {<br>\nimgData.putFloat((((pixelValue &gt;&gt; 16) &amp; 0xFF) - IMAGE_MEAN) / IMAGE_STD);<br>\nimgData.putFloat((((pixelValue &gt;&gt; 8) &amp; 0xFF) - IMAGE_MEAN) / IMAGE_STD);<br>\nimgData.putFloat(((pixelValue &amp; 0xFF) - IMAGE_MEAN) / IMAGE_STD);<br>\n}</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=27325127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/override\">@override</a><br>\nprotected float getProbability(int labelIndex) {<br>\nreturn labelProbArray[0][labelIndex];<br>\n}</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=27325127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/override\">@override</a><br>\nprotected void setProbability(int labelIndex, Number value) {<br>\nlabelProbArray[0][labelIndex] = value.floatValue();<br>\n}</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=27325127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/override\">@override</a><br>\nprotected float getNormalizedProbability(int labelIndex) {<br>\n// TODO the following value isn't in [0,1] yet, but may be greater. Why?<br>\nreturn getProbability(labelIndex);<br>\n}</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=27325127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/override\">@override</a><br>\nprotected void runInference() {</p>\n<pre><code>long oldTime = System.currentTimeMillis();\ntflite.run(imgData, outputs_zyx);\n\nLog.e(\"aaa\", \"aaa\"+outputs_zyx[0].length+\"   time:\"+(System.currentTimeMillis() - oldTime));\nLog.e(\"aaa\", \"aaa\"+outputs_zyx[0].length+\"   time:\"+(System.currentTimeMillis() - oldTime));\n</code></pre>\n<p>//    for (int i = 0; i &lt; outputs_zyx.length; ++i) {<br>\n//      Log.e(\"\u6210\u529f1\", \"\u6210\u529f1\");<br>\n//        for (int j = 0; j &lt; outputs_zyx[i];++j){<br>\n//          Log.e(\"\u6210\u529f2\", \"\u6210\u529f2\");<br>\n//          for (int a = 0;a &lt; outputs_zyx[i][j];++a){<br>\n//<br>\n//            Log.e(\"\u6210\u529f3\", \"\u6210\u529f3\");<br>\n//<br>\n//            for (int e = 0;e &lt; outputs_zyx[i][j][e];++e)<br>\n//          }<br>\n//        }<br>\n//<br>\n//    }</p>\n<p>}<br>\n}</p>", "body_text": "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\npackage com.example.android.tflitecamerademo;\nimport android.app.Activity;\nimport android.util.Log;\nimport java.io.IOException;\n/**\n\nThis classifier works with the Inception-v3 slim model.\nIt applies floating point inference rather than using a quantized model.\n*/\npublic class ImageClassifierFloatInception extends ImageClassifier {\n\n/**\n\nThe inception net requires additional normalization of the used input.\n*/\nprivate static final int IMAGE_MEAN = 128;\nprivate static final float IMAGE_STD = 128.0f;\n\n/**\n\nAn array to hold inference results, to be feed into Tensorflow Lite as outputs.\nThis isn't part of the super class, because we need a primitive array here.\n/\nprivate float[][] labelProbArray = null;\nprivate float[] outputs = null;\nprivate float[][][][] outputs_zyx = null;\n/*\nInitializes an {@code ImageClassifier}.\n\n@param activity\n/\nImageClassifierFloatInception(Activity activity) throws IOException {\nsuper(activity);\nlabelProbArray = new float[1][getNumLabels()];\noutputs = new float[2828*57];\noutputs_zyx = new float[1][28][28][57];\n}\n\n@override\nprotected String getModelPath() {\n// you can download this file from\n// https://storage.googleapis.com/download.tensorflow.org/models/tflite/inception_v3_slim_2016_android_2017_11_10.zip\nreturn \"graph_opt.pb.224.tflite\";\n}\n@override\nprotected String getLabelPath() {\nreturn \"labels_imagenet_slim.txt\";\n}\n@override\nprotected int getImageSizeX() {\nreturn 224;\n}\n@override\nprotected int getImageSizeY() {\nreturn 224;\n}\n@override\nprotected int getNumBytesPerChannel() {\n// a 32bit float value requires 4 bytes\nreturn 4;\n}\n@override\nprotected void addPixelValue(int pixelValue) {\nimgData.putFloat((((pixelValue >> 16) & 0xFF) - IMAGE_MEAN) / IMAGE_STD);\nimgData.putFloat((((pixelValue >> 8) & 0xFF) - IMAGE_MEAN) / IMAGE_STD);\nimgData.putFloat(((pixelValue & 0xFF) - IMAGE_MEAN) / IMAGE_STD);\n}\n@override\nprotected float getProbability(int labelIndex) {\nreturn labelProbArray[0][labelIndex];\n}\n@override\nprotected void setProbability(int labelIndex, Number value) {\nlabelProbArray[0][labelIndex] = value.floatValue();\n}\n@override\nprotected float getNormalizedProbability(int labelIndex) {\n// TODO the following value isn't in [0,1] yet, but may be greater. Why?\nreturn getProbability(labelIndex);\n}\n@override\nprotected void runInference() {\nlong oldTime = System.currentTimeMillis();\ntflite.run(imgData, outputs_zyx);\n\nLog.e(\"aaa\", \"aaa\"+outputs_zyx[0].length+\"   time:\"+(System.currentTimeMillis() - oldTime));\nLog.e(\"aaa\", \"aaa\"+outputs_zyx[0].length+\"   time:\"+(System.currentTimeMillis() - oldTime));\n\n//    for (int i = 0; i < outputs_zyx.length; ++i) {\n//      Log.e(\"\u6210\u529f1\", \"\u6210\u529f1\");\n//        for (int j = 0; j < outputs_zyx[i];++j){\n//          Log.e(\"\u6210\u529f2\", \"\u6210\u529f2\");\n//          for (int a = 0;a < outputs_zyx[i][j];++a){\n//\n//            Log.e(\"\u6210\u529f3\", \"\u6210\u529f3\");\n//\n//            for (int e = 0;e < outputs_zyx[i][j][e];++e)\n//          }\n//        }\n//\n//    }\n}\n}", "body": "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n==============================================================================*/\r\n\r\npackage com.example.android.tflitecamerademo;\r\n\r\nimport android.app.Activity;\r\nimport android.util.Log;\r\n\r\nimport java.io.IOException;\r\n\r\n/**\r\n * This classifier works with the Inception-v3 slim model.\r\n * It applies floating point inference rather than using a quantized model.\r\n */\r\npublic class ImageClassifierFloatInception extends ImageClassifier {\r\n\r\n  /**\r\n   * The inception net requires additional normalization of the used input.\r\n   */\r\n  private static final int IMAGE_MEAN = 128;\r\n  private static final float IMAGE_STD = 128.0f;\r\n\r\n  /**\r\n   * An array to hold inference results, to be feed into Tensorflow Lite as outputs.\r\n   * This isn't part of the super class, because we need a primitive array here.\r\n   */\r\n  private float[][] labelProbArray = null;\r\n  private float[] outputs = null;\r\n  private float[][][][] outputs_zyx = null;\r\n  /**\r\n   * Initializes an {@code ImageClassifier}.\r\n   *\r\n   * @param activity\r\n   */\r\n  ImageClassifierFloatInception(Activity activity) throws IOException {\r\n    super(activity);\r\n    labelProbArray = new float[1][getNumLabels()];\r\n    outputs = new float[28*28*57];\r\n    outputs_zyx = new float[1][28][28][57];\r\n  }\r\n\r\n  @Override\r\n  protected String getModelPath() {\r\n    // you can download this file from\r\n    // https://storage.googleapis.com/download.tensorflow.org/models/tflite/inception_v3_slim_2016_android_2017_11_10.zip\r\n    return \"graph_opt.pb.224.tflite\";\r\n  }\r\n\r\n  @Override\r\n  protected String getLabelPath() {\r\n    return \"labels_imagenet_slim.txt\";\r\n  }\r\n\r\n  @Override\r\n  protected int getImageSizeX() {\r\n    return 224;\r\n  }\r\n\r\n  @Override\r\n  protected int getImageSizeY() {\r\n    return 224;\r\n  }\r\n\r\n  @Override\r\n  protected int getNumBytesPerChannel() {\r\n    // a 32bit float value requires 4 bytes\r\n    return 4;\r\n  }\r\n\r\n  @Override\r\n  protected void addPixelValue(int pixelValue) {\r\n    imgData.putFloat((((pixelValue >> 16) & 0xFF) - IMAGE_MEAN) / IMAGE_STD);\r\n    imgData.putFloat((((pixelValue >> 8) & 0xFF) - IMAGE_MEAN) / IMAGE_STD);\r\n    imgData.putFloat(((pixelValue & 0xFF) - IMAGE_MEAN) / IMAGE_STD);\r\n  }\r\n\r\n  @Override\r\n  protected float getProbability(int labelIndex) {\r\n    return labelProbArray[0][labelIndex];\r\n  }\r\n\r\n  @Override\r\n  protected void setProbability(int labelIndex, Number value) {\r\n    labelProbArray[0][labelIndex] = value.floatValue();\r\n  }\r\n\r\n  @Override\r\n  protected float getNormalizedProbability(int labelIndex) {\r\n    // TODO the following value isn't in [0,1] yet, but may be greater. Why?\r\n    return getProbability(labelIndex);\r\n  }\r\n\r\n  @Override\r\n  protected void runInference() {\r\n\r\n\r\n    long oldTime = System.currentTimeMillis();\r\n    tflite.run(imgData, outputs_zyx);\r\n\r\n    Log.e(\"aaa\", \"aaa\"+outputs_zyx[0].length+\"   time:\"+(System.currentTimeMillis() - oldTime));\r\n    Log.e(\"aaa\", \"aaa\"+outputs_zyx[0].length+\"   time:\"+(System.currentTimeMillis() - oldTime));\r\n//    for (int i = 0; i < outputs_zyx.length; ++i) {\r\n//      Log.e(\"\u6210\u529f1\", \"\u6210\u529f1\");\r\n//        for (int j = 0; j < outputs_zyx[i];++j){\r\n//          Log.e(\"\u6210\u529f2\", \"\u6210\u529f2\");\r\n//          for (int a = 0;a < outputs_zyx[i][j];++a){\r\n//\r\n//            Log.e(\"\u6210\u529f3\", \"\u6210\u529f3\");\r\n//\r\n//            for (int e = 0;e < outputs_zyx[i][j][e];++e)\r\n//          }\r\n//        }\r\n//\r\n//    }\r\n\r\n  }\r\n}\r\n"}