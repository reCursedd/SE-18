{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13034", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13034/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13034/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13034/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13034", "id": 257655167, "node_id": "MDU6SXNzdWUyNTc2NTUxNjc=", "number": 13034, "title": "AttributeError: 'RunConfig' object has no attribute 'environment'", "user": {"login": "KishoreKarunakaran", "id": 10724627, "node_id": "MDQ6VXNlcjEwNzI0NjI3", "avatar_url": "https://avatars3.githubusercontent.com/u/10724627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KishoreKarunakaran", "html_url": "https://github.com/KishoreKarunakaran", "followers_url": "https://api.github.com/users/KishoreKarunakaran/followers", "following_url": "https://api.github.com/users/KishoreKarunakaran/following{/other_user}", "gists_url": "https://api.github.com/users/KishoreKarunakaran/gists{/gist_id}", "starred_url": "https://api.github.com/users/KishoreKarunakaran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KishoreKarunakaran/subscriptions", "organizations_url": "https://api.github.com/users/KishoreKarunakaran/orgs", "repos_url": "https://api.github.com/users/KishoreKarunakaran/repos", "events_url": "https://api.github.com/users/KishoreKarunakaran/events{/privacy}", "received_events_url": "https://api.github.com/users/KishoreKarunakaran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-14T09:35:58Z", "updated_at": "2017-09-24T05:05:06Z", "closed_at": "2017-09-24T05:05:06Z", "author_association": "NONE", "body_html": "<p>Problem with the learn_runner.run() method.</p>\n<h1><strong>System Info:</strong></h1>\n<p><strong>Windows 10</strong><br>\n<strong>TF 1.3.0</strong><br>\n<strong>Python 3.5</strong></p>\n<p><strong>Code :</strong></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">import</span> tensorflow.contrib.learn <span class=\"pl-k\">as</span> tflearn\n<span class=\"pl-k\">from</span> tensorflow.contrib.learn.python.learn <span class=\"pl-k\">import</span> learn_runner\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Tensorflow Version - <span class=\"pl-pds\">'</span></span>, tf.<span class=\"pl-c1\">__version__</span>)\ntf.logging.set_verbosity(tf.logging.<span class=\"pl-c1\">INFO</span>)\n\ntrain_file <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>data/iris_training.csv<span class=\"pl-pds\">'</span></span>\ntest_file <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>data/iris_test.csv<span class=\"pl-pds\">'</span></span>\n\nfeature_names <span class=\"pl-k\">=</span> [\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>SepalLength<span class=\"pl-pds\">'</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>SepalWidth<span class=\"pl-pds\">'</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>PetalLength<span class=\"pl-pds\">'</span></span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>PetalWidth<span class=\"pl-pds\">'</span></span>\n]\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">input_fn</span>(<span class=\"pl-smi\">file</span>, <span class=\"pl-smi\">perform_shuffle</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-smi\">repeat_count</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">decode_csv</span>(<span class=\"pl-smi\">line</span>):\n        parsed_line <span class=\"pl-k\">=</span> tf.decode_csv(line, [[<span class=\"pl-c1\">0</span>.], [<span class=\"pl-c1\">0</span>.], [<span class=\"pl-c1\">0</span>.], [<span class=\"pl-c1\">0</span>.], [<span class=\"pl-c1\">0</span>]])\n        label <span class=\"pl-k\">=</span> parsed_line[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>:]\n        <span class=\"pl-k\">del</span> parsed_line[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>]\n        features <span class=\"pl-k\">=</span> parsed_line\n        parsed_data <span class=\"pl-k\">=</span> <span class=\"pl-c1\">dict</span>(<span class=\"pl-c1\">zip</span>(feature_names, features)), label\n        <span class=\"pl-k\">return</span> parsed_data\n\n    data_set <span class=\"pl-k\">=</span> (tf.contrib.data.TextLineDataset(<span class=\"pl-v\">file</span>).skip(<span class=\"pl-c1\">1</span>).map(decode_csv))\n\n    <span class=\"pl-k\">if</span> perform_shuffle:\n        data_set <span class=\"pl-k\">=</span> data_set.shuffle(<span class=\"pl-v\">buffer_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">256</span>)\n\n    data_set <span class=\"pl-k\">=</span> data_set.repeat(repeat_count)\n    data_set <span class=\"pl-k\">=</span> data_set.batch(<span class=\"pl-c1\">32</span>)\n    iterator <span class=\"pl-k\">=</span> data_set.make_one_shot_iterator()\n    batch_features, batch_label <span class=\"pl-k\">=</span> iterator.get_next()\n    <span class=\"pl-k\">return</span> batch_features, batch_label\n\nfeature_columns <span class=\"pl-k\">=</span> [tf.feature_column.numeric_column(feature, <span class=\"pl-v\">normalizer_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: normalize_fn(x)) <span class=\"pl-k\">for</span> feature <span class=\"pl-k\">in</span>\n                   feature_names]\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">json_serving_input_fn</span>():\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Build the serving inputs.<span class=\"pl-pds\">\"\"\"</span></span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Build the serving inputs.<span class=\"pl-pds\">\"\"\"</span></span>\n\n    inputs <span class=\"pl-k\">=</span> {}\n    <span class=\"pl-k\">for</span> feat <span class=\"pl-k\">in</span> feature_columns:\n        inputs[feat.name] <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>feat.dtype)\n    <span class=\"pl-k\">return</span> tf.estimator.export.ServingInputReceiver(inputs, inputs)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">normalize_fn</span>(<span class=\"pl-smi\">feature</span>):\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-c1\">print</span>(tf.shape(feature))\n    mean, variance <span class=\"pl-k\">=</span> tf.nn.moments(feature, <span class=\"pl-v\">axes</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">0</span>])\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\n</span> Mean - <span class=\"pl-pds\">'</span></span>, mean)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\n</span> Variance - <span class=\"pl-pds\">'</span></span>, variance)\n    <span class=\"pl-k\">return</span> (feature <span class=\"pl-k\">-</span> mean) <span class=\"pl-k\">/</span> variance\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">experiment_fn</span>(<span class=\"pl-smi\">output_dir</span>):\n    classifier <span class=\"pl-k\">=</span> tf.estimator.DNNClassifier(<span class=\"pl-v\">hidden_units</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>], <span class=\"pl-v\">feature_columns</span><span class=\"pl-k\">=</span>feature_columns, <span class=\"pl-v\">n_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>,\n                                            <span class=\"pl-v\">model_dir</span><span class=\"pl-k\">=</span>output_dir)\n\n    <span class=\"pl-k\">from</span> tensorflow.contrib.learn.python.learn.utils <span class=\"pl-k\">import</span> saved_model_export_utils\n\n    <span class=\"pl-k\">return</span> tflearn.Experiment(classifier,\n                              <span class=\"pl-v\">train_input_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span>: input_fn(train_file, <span class=\"pl-v\">perform_shuffle</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-v\">repeat_count</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>),\n                              <span class=\"pl-v\">eval_input_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span>: input_fn(test_file, <span class=\"pl-v\">perform_shuffle</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-v\">repeat_count</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>),\n                              <span class=\"pl-v\">eval_metrics</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>,\n                              <span class=\"pl-v\">export_strategies</span><span class=\"pl-k\">=</span>[saved_model_export_utils.make_export_strategy(\n                                  <span class=\"pl-v\">serving_input_fn</span><span class=\"pl-k\">=</span>json_serving_input_fn, <span class=\"pl-v\">default_output_alternative_key</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>,\n                                  <span class=\"pl-v\">exports_to_keep</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>\n                              )],\n                              <span class=\"pl-v\">train_steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">100</span>\n                              )\n\nlearn_runner.run(<span class=\"pl-v\">experiment_fn</span><span class=\"pl-k\">=</span>experiment_fn, <span class=\"pl-v\">output_dir</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>build2/<span class=\"pl-pds\">'</span></span>)\n</pre></div>\n<p><strong>Exception:</strong></p>\n<p>File \"F:/Git/Tensorflow-Tutorials/iris/linear_classifier.py\", line 107, in <br>\nlearn_runner.run(experiment_fn=experiment_fn, output_dir='build2/')<br>\nFile \"F:\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\learn_runner.py\", line 209, in run<br>\nreturn _execute_schedule(experiment, schedule)<br>\nFile \"F:\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\learn_runner.py\", line 46, in _execute_schedule<br>\nreturn task()<br>\nFile \"F:\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\experiment.py\", line 502, in train_and_evaluate<br>\nself.train(delay_secs=0)<br>\nFile \"F:\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\experiment.py\", line 253, in train<br>\nif (config.environment != run_config.Environment.LOCAL and<br>\nAttributeError: 'RunConfig' object has no attribute 'environment'</p>", "body_text": "Problem with the learn_runner.run() method.\nSystem Info:\nWindows 10\nTF 1.3.0\nPython 3.5\nCode :\nimport tensorflow as tf\n\nimport tensorflow.contrib.learn as tflearn\nfrom tensorflow.contrib.learn.python.learn import learn_runner\n\nprint('Tensorflow Version - ', tf.__version__)\ntf.logging.set_verbosity(tf.logging.INFO)\n\ntrain_file = 'data/iris_training.csv'\ntest_file = 'data/iris_test.csv'\n\nfeature_names = [\n    'SepalLength',\n    'SepalWidth',\n    'PetalLength',\n    'PetalWidth'\n]\n\n\ndef input_fn(file, perform_shuffle=False, repeat_count=1):\n    def decode_csv(line):\n        parsed_line = tf.decode_csv(line, [[0.], [0.], [0.], [0.], [0]])\n        label = parsed_line[-1:]\n        del parsed_line[-1]\n        features = parsed_line\n        parsed_data = dict(zip(feature_names, features)), label\n        return parsed_data\n\n    data_set = (tf.contrib.data.TextLineDataset(file).skip(1).map(decode_csv))\n\n    if perform_shuffle:\n        data_set = data_set.shuffle(buffer_size=256)\n\n    data_set = data_set.repeat(repeat_count)\n    data_set = data_set.batch(32)\n    iterator = data_set.make_one_shot_iterator()\n    batch_features, batch_label = iterator.get_next()\n    return batch_features, batch_label\n\nfeature_columns = [tf.feature_column.numeric_column(feature, normalizer_fn=lambda x: normalize_fn(x)) for feature in\n                   feature_names]\n\n\ndef json_serving_input_fn():\n    \"\"\"Build the serving inputs.\"\"\"\n    \"\"\"Build the serving inputs.\"\"\"\n\n    inputs = {}\n    for feat in feature_columns:\n        inputs[feat.name] = tf.placeholder(shape=[None], dtype=feat.dtype)\n    return tf.estimator.export.ServingInputReceiver(inputs, inputs)\n\ndef normalize_fn(feature):\n    print('\\n')\n    print(tf.shape(feature))\n    mean, variance = tf.nn.moments(feature, axes=[0])\n    print('\\n Mean - ', mean)\n    print('\\n Variance - ', variance)\n    return (feature - mean) / variance\n\n\ndef experiment_fn(output_dir):\n    classifier = tf.estimator.DNNClassifier(hidden_units=[10, 10], feature_columns=feature_columns, n_classes=3,\n                                            model_dir=output_dir)\n\n    from tensorflow.contrib.learn.python.learn.utils import saved_model_export_utils\n\n    return tflearn.Experiment(classifier,\n                              train_input_fn=lambda: input_fn(train_file, perform_shuffle=True, repeat_count=10),\n                              eval_input_fn=lambda: input_fn(test_file, perform_shuffle=False, repeat_count=1),\n                              eval_metrics=None,\n                              export_strategies=[saved_model_export_utils.make_export_strategy(\n                                  serving_input_fn=json_serving_input_fn, default_output_alternative_key=None,\n                                  exports_to_keep=1\n                              )],\n                              train_steps=100\n                              )\n\nlearn_runner.run(experiment_fn=experiment_fn, output_dir='build2/')\n\nException:\nFile \"F:/Git/Tensorflow-Tutorials/iris/linear_classifier.py\", line 107, in \nlearn_runner.run(experiment_fn=experiment_fn, output_dir='build2/')\nFile \"F:\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\learn_runner.py\", line 209, in run\nreturn _execute_schedule(experiment, schedule)\nFile \"F:\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\learn_runner.py\", line 46, in _execute_schedule\nreturn task()\nFile \"F:\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\experiment.py\", line 502, in train_and_evaluate\nself.train(delay_secs=0)\nFile \"F:\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\experiment.py\", line 253, in train\nif (config.environment != run_config.Environment.LOCAL and\nAttributeError: 'RunConfig' object has no attribute 'environment'", "body": "Problem with the learn_runner.run() method.\r\n\r\n# **System Info:**\r\n\r\n**Windows 10**\r\n**TF 1.3.0**\r\n**Python 3.5**\r\n\r\n**Code :**\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nimport tensorflow.contrib.learn as tflearn\r\nfrom tensorflow.contrib.learn.python.learn import learn_runner\r\n\r\nprint('Tensorflow Version - ', tf.__version__)\r\ntf.logging.set_verbosity(tf.logging.INFO)\r\n\r\ntrain_file = 'data/iris_training.csv'\r\ntest_file = 'data/iris_test.csv'\r\n\r\nfeature_names = [\r\n    'SepalLength',\r\n    'SepalWidth',\r\n    'PetalLength',\r\n    'PetalWidth'\r\n]\r\n\r\n\r\ndef input_fn(file, perform_shuffle=False, repeat_count=1):\r\n    def decode_csv(line):\r\n        parsed_line = tf.decode_csv(line, [[0.], [0.], [0.], [0.], [0]])\r\n        label = parsed_line[-1:]\r\n        del parsed_line[-1]\r\n        features = parsed_line\r\n        parsed_data = dict(zip(feature_names, features)), label\r\n        return parsed_data\r\n\r\n    data_set = (tf.contrib.data.TextLineDataset(file).skip(1).map(decode_csv))\r\n\r\n    if perform_shuffle:\r\n        data_set = data_set.shuffle(buffer_size=256)\r\n\r\n    data_set = data_set.repeat(repeat_count)\r\n    data_set = data_set.batch(32)\r\n    iterator = data_set.make_one_shot_iterator()\r\n    batch_features, batch_label = iterator.get_next()\r\n    return batch_features, batch_label\r\n\r\nfeature_columns = [tf.feature_column.numeric_column(feature, normalizer_fn=lambda x: normalize_fn(x)) for feature in\r\n                   feature_names]\r\n\r\n\r\ndef json_serving_input_fn():\r\n    \"\"\"Build the serving inputs.\"\"\"\r\n    \"\"\"Build the serving inputs.\"\"\"\r\n\r\n    inputs = {}\r\n    for feat in feature_columns:\r\n        inputs[feat.name] = tf.placeholder(shape=[None], dtype=feat.dtype)\r\n    return tf.estimator.export.ServingInputReceiver(inputs, inputs)\r\n\r\ndef normalize_fn(feature):\r\n    print('\\n')\r\n    print(tf.shape(feature))\r\n    mean, variance = tf.nn.moments(feature, axes=[0])\r\n    print('\\n Mean - ', mean)\r\n    print('\\n Variance - ', variance)\r\n    return (feature - mean) / variance\r\n\r\n\r\ndef experiment_fn(output_dir):\r\n    classifier = tf.estimator.DNNClassifier(hidden_units=[10, 10], feature_columns=feature_columns, n_classes=3,\r\n                                            model_dir=output_dir)\r\n\r\n    from tensorflow.contrib.learn.python.learn.utils import saved_model_export_utils\r\n\r\n    return tflearn.Experiment(classifier,\r\n                              train_input_fn=lambda: input_fn(train_file, perform_shuffle=True, repeat_count=10),\r\n                              eval_input_fn=lambda: input_fn(test_file, perform_shuffle=False, repeat_count=1),\r\n                              eval_metrics=None,\r\n                              export_strategies=[saved_model_export_utils.make_export_strategy(\r\n                                  serving_input_fn=json_serving_input_fn, default_output_alternative_key=None,\r\n                                  exports_to_keep=1\r\n                              )],\r\n                              train_steps=100\r\n                              )\r\n\r\nlearn_runner.run(experiment_fn=experiment_fn, output_dir='build2/')\r\n\r\n```\r\n\r\n**Exception:**\r\n\r\nFile \"F:/Git/Tensorflow-Tutorials/iris/linear_classifier.py\", line 107, in <module>\r\n    learn_runner.run(experiment_fn=experiment_fn, output_dir='build2/')\r\n  File \"F:\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\learn_runner.py\", line 209, in run\r\n    return _execute_schedule(experiment, schedule)\r\n  File \"F:\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\learn_runner.py\", line 46, in _execute_schedule\r\n    return task()\r\n  File \"F:\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\experiment.py\", line 502, in train_and_evaluate\r\n    self.train(delay_secs=0)\r\n  File \"F:\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\experiment.py\", line 253, in train\r\n    if (config.environment != run_config.Environment.LOCAL and\r\nAttributeError: 'RunConfig' object has no attribute 'environment'"}