{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18193", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18193/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18193/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18193/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18193", "id": 310719110, "node_id": "MDU6SXNzdWUzMTA3MTkxMTA=", "number": 18193, "title": "tf.keras.estimator.model_to_estimator fails with pre-trained models", "user": {"login": "FlashTek", "id": 5895436, "node_id": "MDQ6VXNlcjU4OTU0MzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5895436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FlashTek", "html_url": "https://github.com/FlashTek", "followers_url": "https://api.github.com/users/FlashTek/followers", "following_url": "https://api.github.com/users/FlashTek/following{/other_user}", "gists_url": "https://api.github.com/users/FlashTek/gists{/gist_id}", "starred_url": "https://api.github.com/users/FlashTek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FlashTek/subscriptions", "organizations_url": "https://api.github.com/users/FlashTek/orgs", "repos_url": "https://api.github.com/users/FlashTek/repos", "events_url": "https://api.github.com/users/FlashTek/events{/privacy}", "received_events_url": "https://api.github.com/users/FlashTek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 13, "created_at": "2018-04-03T07:09:54Z", "updated_at": "2018-09-19T12:59:14Z", "closed_at": "2018-04-13T18:19:11Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 7 x64</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary (pip)</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.7.0 (cpu)</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: n.a.</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: n.a.</li>\n<li><strong>CUDA/cuDNN version</strong>: n.a.</li>\n<li><strong>GPU model and memory</strong>: n.a.</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Following the example code for <a href=\"https://www.tensorflow.org/programmers_guide/estimators\" rel=\"nofollow\">Creating Estimators from Keras models</a>, I encountered a problem: the example code runs fine when <code>weights=None</code> is used in the initialization of the <code>InceptionV3</code> object. But when I change it to <code>weights=imagenet</code> the call to <code>model_to_estimator(...)</code> fails:</p>\n<blockquote>\n<p>FailedPreconditionError: Attempting to use uninitialized value batch_normalization_100/beta<br>\n[[Node: _retval_batch_normalization_100/beta_0_0 = _Retval<a href=\"batch_normalization_100/beta\">T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"</a>]]</p>\n</blockquote>\n<p>This looks like the weights of the model are not correctly initialized. But strangely I can use the keras model to obtain predictions, which should mean that the model is correctly initialized.</p>\n<p>As far as I know there are no information in the documentation that pre-trained models (i.e. models with <code>weights</code> set to anything different than <code>None</code>) are not supported by this function, or that one has to change the workflow somehow. Therefore, this is either a bug in tensorflow or a case of a misleading documentation.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Instantiate a Keras inception v3 model.</span>\nkeras_inception_v3 <span class=\"pl-k\">=</span> tf.keras.applications.inception_v3.InceptionV3(<span class=\"pl-v\">weights</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>imagenet<span class=\"pl-pds\">\"</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Compile model with the optimizer, loss, and metrics you'd like to train with.</span>\nkeras_inception_v3.compile(<span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span>tf.keras.optimizers.SGD(<span class=\"pl-v\">lr</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.0001</span>, <span class=\"pl-v\">momentum</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.9</span>),\n                          <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>categorical_crossentropy<span class=\"pl-pds\">'</span></span>,\n                          <span class=\"pl-v\">metric</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>accuracy<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Create an Estimator from the compiled Keras model. Note the initial model</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> state of the keras model is preserved in the created Estimator.</span>\nest_inception_v3 <span class=\"pl-k\">=</span> tf.keras.estimator.model_to_estimator(<span class=\"pl-v\">keras_model</span><span class=\"pl-k\">=</span>keras_inception_v3)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Treat the derived Estimator as you would with any other Estimator.</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> First, recover the input name(s) of Keras model, so we can use them as the</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> feature column name(s) of the Estimator input function:</span>\nkeras_inception_v3.input_names  <span class=\"pl-c\"><span class=\"pl-c\">#</span> print out: ['input_1']</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Once we have the input name(s), we can create the input function, for example,</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> for input(s) in the format of numpy ndarray:</span>\ntrain_input_fn <span class=\"pl-k\">=</span> tf.estimator.inputs.numpy_input_fn(\n    <span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input_1<span class=\"pl-pds\">\"</span></span>: train_data},\n    <span class=\"pl-v\">y</span><span class=\"pl-k\">=</span>train_labels,\n    <span class=\"pl-v\">num_epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>,\n    <span class=\"pl-v\">shuffle</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> To train, we call Estimator's train function:</span>\nest_inception_v3.train(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>train_input_fn, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2000</span>)</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 7 x64\nTensorFlow installed from (source or binary): binary (pip)\nTensorFlow version (use command below): 1.7.0 (cpu)\nPython version: 3.6\nBazel version (if compiling from source): n.a.\nGCC/Compiler version (if compiling from source): n.a.\nCUDA/cuDNN version: n.a.\nGPU model and memory: n.a.\nExact command to reproduce:\n\nDescribe the problem\nFollowing the example code for Creating Estimators from Keras models, I encountered a problem: the example code runs fine when weights=None is used in the initialization of the InceptionV3 object. But when I change it to weights=imagenet the call to model_to_estimator(...) fails:\n\nFailedPreconditionError: Attempting to use uninitialized value batch_normalization_100/beta\n[[Node: _retval_batch_normalization_100/beta_0_0 = _RetvalT=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]]\n\nThis looks like the weights of the model are not correctly initialized. But strangely I can use the keras model to obtain predictions, which should mean that the model is correctly initialized.\nAs far as I know there are no information in the documentation that pre-trained models (i.e. models with weights set to anything different than None) are not supported by this function, or that one has to change the workflow somehow. Therefore, this is either a bug in tensorflow or a case of a misleading documentation.\nSource code / logs\n# Instantiate a Keras inception v3 model.\nkeras_inception_v3 = tf.keras.applications.inception_v3.InceptionV3(weights=\"imagenet\")\n# Compile model with the optimizer, loss, and metrics you'd like to train with.\nkeras_inception_v3.compile(optimizer=tf.keras.optimizers.SGD(lr=0.0001, momentum=0.9),\n                          loss='categorical_crossentropy',\n                          metric='accuracy')\n# Create an Estimator from the compiled Keras model. Note the initial model\n# state of the keras model is preserved in the created Estimator.\nest_inception_v3 = tf.keras.estimator.model_to_estimator(keras_model=keras_inception_v3)\n\n# Treat the derived Estimator as you would with any other Estimator.\n# First, recover the input name(s) of Keras model, so we can use them as the\n# feature column name(s) of the Estimator input function:\nkeras_inception_v3.input_names  # print out: ['input_1']\n# Once we have the input name(s), we can create the input function, for example,\n# for input(s) in the format of numpy ndarray:\ntrain_input_fn = tf.estimator.inputs.numpy_input_fn(\n    x={\"input_1\": train_data},\n    y=train_labels,\n    num_epochs=1,\n    shuffle=False)\n# To train, we call Estimator's train function:\nest_inception_v3.train(input_fn=train_input_fn, steps=2000)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 7 x64\r\n- **TensorFlow installed from (source or binary)**: binary (pip)\r\n- **TensorFlow version (use command below)**: 1.7.0 (cpu)\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: n.a.\r\n- **GCC/Compiler version (if compiling from source)**: n.a.\r\n- **CUDA/cuDNN version**: n.a.\r\n- **GPU model and memory**: n.a.\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nFollowing the example code for [Creating Estimators from Keras models](https://www.tensorflow.org/programmers_guide/estimators), I encountered a problem: the example code runs fine when `weights=None` is used in the initialization of the `InceptionV3` object. But when I change it to `weights=imagenet` the call to `model_to_estimator(...)` fails:\r\n\r\n> FailedPreconditionError: Attempting to use uninitialized value batch_normalization_100/beta\r\n> \t [[Node: _retval_batch_normalization_100/beta_0_0 = _Retval[T=DT_FLOAT, index=0, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](batch_normalization_100/beta)]]\r\n\r\n This looks like the weights of the model are not correctly initialized. But strangely I can use the keras model to obtain predictions, which should mean that the model is correctly initialized.\r\n\r\nAs far as I know there are no information in the documentation that pre-trained models (i.e. models with `weights` set to anything different than `None`) are not supported by this function, or that one has to change the workflow somehow. Therefore, this is either a bug in tensorflow or a case of a misleading documentation.\r\n\r\n### Source code / logs\r\n```python\r\n# Instantiate a Keras inception v3 model.\r\nkeras_inception_v3 = tf.keras.applications.inception_v3.InceptionV3(weights=\"imagenet\")\r\n# Compile model with the optimizer, loss, and metrics you'd like to train with.\r\nkeras_inception_v3.compile(optimizer=tf.keras.optimizers.SGD(lr=0.0001, momentum=0.9),\r\n                          loss='categorical_crossentropy',\r\n                          metric='accuracy')\r\n# Create an Estimator from the compiled Keras model. Note the initial model\r\n# state of the keras model is preserved in the created Estimator.\r\nest_inception_v3 = tf.keras.estimator.model_to_estimator(keras_model=keras_inception_v3)\r\n\r\n# Treat the derived Estimator as you would with any other Estimator.\r\n# First, recover the input name(s) of Keras model, so we can use them as the\r\n# feature column name(s) of the Estimator input function:\r\nkeras_inception_v3.input_names  # print out: ['input_1']\r\n# Once we have the input name(s), we can create the input function, for example,\r\n# for input(s) in the format of numpy ndarray:\r\ntrain_input_fn = tf.estimator.inputs.numpy_input_fn(\r\n    x={\"input_1\": train_data},\r\n    y=train_labels,\r\n    num_epochs=1,\r\n    shuffle=False)\r\n# To train, we call Estimator's train function:\r\nest_inception_v3.train(input_fn=train_input_fn, steps=2000)\r\n```"}