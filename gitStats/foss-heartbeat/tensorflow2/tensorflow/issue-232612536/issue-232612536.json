{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10332", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10332/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10332/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10332/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10332", "id": 232612536, "node_id": "MDU6SXNzdWUyMzI2MTI1MzY=", "number": 10332, "title": "[Feature request] dynamically catch exceptions in TensorFlow as part of the graph execution", "user": {"login": "albertz", "id": 59132, "node_id": "MDQ6VXNlcjU5MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/59132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertz", "html_url": "https://github.com/albertz", "followers_url": "https://api.github.com/users/albertz/followers", "following_url": "https://api.github.com/users/albertz/following{/other_user}", "gists_url": "https://api.github.com/users/albertz/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertz/subscriptions", "organizations_url": "https://api.github.com/users/albertz/orgs", "repos_url": "https://api.github.com/users/albertz/repos", "events_url": "https://api.github.com/users/albertz/events{/privacy}", "received_events_url": "https://api.github.com/users/albertz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2017-05-31T15:53:00Z", "updated_at": "2018-04-30T18:50:39Z", "closed_at": "2017-06-03T00:58:48Z", "author_association": "NONE", "body_html": "<p>Via <a href=\"https://stackoverflow.com/questions/44137542/dynamically-catch-exceptions-in-tensorflow-as-part-of-the-graph-execution\" rel=\"nofollow\">this StackOverflow question</a>:</p>\n<p>E.g. the <code>QueueBase.dequeue</code> function can raise an <code>OutOfRangeError</code> exception which I will receive in Python from the <code>Session.run</code> call. It would be nice to catch the exception inside the graph, similar as <code>tf.cond</code>. E.g. something like:</p>\n<pre><code>result = tf.on_exception(queue.dequeue(), lambda: 42)\n</code></pre>\n<p>Maybe also the first argument would need to be a <code>lambda</code> such that it can properly set the context.<br>\nTo make this work, like in <code>tf.cond</code>, the result from both arguments would need to be of the same type.</p>", "body_text": "Via this StackOverflow question:\nE.g. the QueueBase.dequeue function can raise an OutOfRangeError exception which I will receive in Python from the Session.run call. It would be nice to catch the exception inside the graph, similar as tf.cond. E.g. something like:\nresult = tf.on_exception(queue.dequeue(), lambda: 42)\n\nMaybe also the first argument would need to be a lambda such that it can properly set the context.\nTo make this work, like in tf.cond, the result from both arguments would need to be of the same type.", "body": "Via [this StackOverflow question](https://stackoverflow.com/questions/44137542/dynamically-catch-exceptions-in-tensorflow-as-part-of-the-graph-execution):\r\n\r\nE.g. the `QueueBase.dequeue` function can raise an `OutOfRangeError` exception which I will receive in Python from the `Session.run` call. It would be nice to catch the exception inside the graph, similar as `tf.cond`. E.g. something like:\r\n\r\n    result = tf.on_exception(queue.dequeue(), lambda: 42)\r\n\r\nMaybe also the first argument would need to be a `lambda` such that it can properly set the context.\r\nTo make this work, like in `tf.cond`, the result from both arguments would need to be of the same type.\r\n"}