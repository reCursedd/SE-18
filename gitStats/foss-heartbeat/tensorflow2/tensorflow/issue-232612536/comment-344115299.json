{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/344115299", "html_url": "https://github.com/tensorflow/tensorflow/issues/10332#issuecomment-344115299", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10332", "id": 344115299, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDExNTI5OQ==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-14T01:26:02Z", "updated_at": "2017-11-14T01:26:02Z", "author_association": "MEMBER", "body_html": "<p>I'm not sure how graph optimizations work in Eager. It's possible something like <code>@tf.defun</code> would be able to apply those sorts of optimizations to your critical sections of code. <a href=\"http://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">StackOverflow</a> would be a better place to ask (I'm just a triager.)</p>\n<p>TensorFlow graphs are turing complete (<a href=\"https://github.com/akimach/EsotericTensorFlow/blob/master/brain_fuck.py\">example</a>) and have <a href=\"https://www.tensorflow.org/api_docs/cc/group/data-flow-ops\" rel=\"nofollow\">data flow ops</a> like queues. So it should be <em>possible</em> to do what you want to do, today, using a high performance pure graph without exceptions. While obtaining this kind of performance generally requires making tradeoffs on elegance, there's actually a lot of people on the team working on much more radical solutions that will let us eat our cake and have it too. They will take time.</p>", "body_text": "I'm not sure how graph optimizations work in Eager. It's possible something like @tf.defun would be able to apply those sorts of optimizations to your critical sections of code. StackOverflow would be a better place to ask (I'm just a triager.)\nTensorFlow graphs are turing complete (example) and have data flow ops like queues. So it should be possible to do what you want to do, today, using a high performance pure graph without exceptions. While obtaining this kind of performance generally requires making tradeoffs on elegance, there's actually a lot of people on the team working on much more radical solutions that will let us eat our cake and have it too. They will take time.", "body": "I'm not sure how graph optimizations work in Eager. It's possible something like `@tf.defun` would be able to apply those sorts of optimizations to your critical sections of code. [StackOverflow](http://stackoverflow.com/questions/tagged/tensorflow) would be a better place to ask (I'm just a triager.)\r\n\r\nTensorFlow graphs are turing complete ([example](https://github.com/akimach/EsotericTensorFlow/blob/master/brain_fuck.py)) and have [data flow ops](https://www.tensorflow.org/api_docs/cc/group/data-flow-ops) like queues. So it should be *possible* to do what you want to do, today, using a high performance pure graph without exceptions. While obtaining this kind of performance generally requires making tradeoffs on elegance, there's actually a lot of people on the team working on much more radical solutions that will let us eat our cake and have it too. They will take time."}