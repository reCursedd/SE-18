{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/360980448", "html_url": "https://github.com/tensorflow/tensorflow/issues/3638#issuecomment-360980448", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3638", "id": 360980448, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDk4MDQ0OA==", "user": {"login": "Androbin", "id": 16437156, "node_id": "MDQ6VXNlcjE2NDM3MTU2", "avatar_url": "https://avatars1.githubusercontent.com/u/16437156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Androbin", "html_url": "https://github.com/Androbin", "followers_url": "https://api.github.com/users/Androbin/followers", "following_url": "https://api.github.com/users/Androbin/following{/other_user}", "gists_url": "https://api.github.com/users/Androbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/Androbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Androbin/subscriptions", "organizations_url": "https://api.github.com/users/Androbin/orgs", "repos_url": "https://api.github.com/users/Androbin/repos", "events_url": "https://api.github.com/users/Androbin/events{/privacy}", "received_events_url": "https://api.github.com/users/Androbin/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-27T12:04:58Z", "updated_at": "2018-01-27T12:04:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=752825\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/MattShannon\">@MattShannon</a> Well, your idea seems legit, but I don't get how you would differentiate between a \"real\" zero value and a \"fake\" zero value. Although this would be a reasonable fallback behavior for out-of-range indices, it should always be a conscious decision, else we end up with silent errors.</p>\n<p>Ideally, we would have a \"special value\" other than zero:</p>\n<ul>\n<li>one available for all dtypes OR one for each dtype</li>\n<li>presumably unused by any \"non-special behavior\" code</li>\n</ul>\n<p>Then we could wrap it with handlers like the ones you brought up.</p>", "body_text": "@MattShannon Well, your idea seems legit, but I don't get how you would differentiate between a \"real\" zero value and a \"fake\" zero value. Although this would be a reasonable fallback behavior for out-of-range indices, it should always be a conscious decision, else we end up with silent errors.\nIdeally, we would have a \"special value\" other than zero:\n\none available for all dtypes OR one for each dtype\npresumably unused by any \"non-special behavior\" code\n\nThen we could wrap it with handlers like the ones you brought up.", "body": "@MattShannon Well, your idea seems legit, but I don't get how you would differentiate between a \"real\" zero value and a \"fake\" zero value. Although this would be a reasonable fallback behavior for out-of-range indices, it should always be a conscious decision, else we end up with silent errors.\r\n\r\nIdeally, we would have a \"special value\" other than zero:\r\n* one available for all dtypes OR one for each dtype\r\n* presumably unused by any \"non-special behavior\" code\r\n\r\nThen we could wrap it with handlers like the ones you brought up."}