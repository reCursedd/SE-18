{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/250929007", "html_url": "https://github.com/tensorflow/tensorflow/issues/4701#issuecomment-250929007", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4701", "id": 250929007, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDkyOTAwNw==", "user": {"login": "olivermg", "id": 986278, "node_id": "MDQ6VXNlcjk4NjI3OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/986278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olivermg", "html_url": "https://github.com/olivermg", "followers_url": "https://api.github.com/users/olivermg/followers", "following_url": "https://api.github.com/users/olivermg/following{/other_user}", "gists_url": "https://api.github.com/users/olivermg/gists{/gist_id}", "starred_url": "https://api.github.com/users/olivermg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olivermg/subscriptions", "organizations_url": "https://api.github.com/users/olivermg/orgs", "repos_url": "https://api.github.com/users/olivermg/repos", "events_url": "https://api.github.com/users/olivermg/events{/privacy}", "received_events_url": "https://api.github.com/users/olivermg/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-01T18:34:49Z", "updated_at": "2016-10-01T18:43:31Z", "author_association": "NONE", "body_html": "<p>As far as I understand the whole process, the necessary steps to have bazel run with Python2, you have to follow these steps (assuming Anaconda):</p>\n<ol>\n<li>Create the Anaconda virtual env via <code>conda create -n tensorflow python=2.7</code> . A thing to note here: Don't run this command from within your cloned working copy of Tensorflow Serving, as the conda command seems to get confused when a directory \"tensorflow\" exists in the current working directory. I think it'll try to install the virtual env into that folder then, which is not what you want. Ergo: Run that conda command from within a directory in which NO directory named \"tensorflow\" (or whatever name you choose) exists.</li>\n<li>Make sure that no bazel processes exist from previous calls to it, as that may result in bazel \"remembering\" parts of the environment you had previously. So to be on the safe side, kill all potentially running bazel processes. I was actually wondering why bazel wasn't using Python2 although I was in a corresponding Anaconda environment. As I've figured out after a while, it was because bazel was obviously picking up a bazel process created earlier when I was still trying Python3.</li>\n<li>Activate the Anaconda environment you created in step 1, via <code>source activate tensorflow</code>.</li>\n<li>You should now have Python2 being the default. You can check via e.g. <code>pip --version</code> or <code>python --version</code>.</li>\n<li>(Make sure that you install the necessary pip dependencies into this virtual env, like numpy &amp; mock, via <code>pip install numpy mock</code>. You'll probably also have to re-run the <code>./configure</code> step in the tensorflow subdir.)</li>\n</ol>\n<p>This should allow you to run bazel using Python2 as far as my brief knowledge is concerned ;) .</p>", "body_text": "As far as I understand the whole process, the necessary steps to have bazel run with Python2, you have to follow these steps (assuming Anaconda):\n\nCreate the Anaconda virtual env via conda create -n tensorflow python=2.7 . A thing to note here: Don't run this command from within your cloned working copy of Tensorflow Serving, as the conda command seems to get confused when a directory \"tensorflow\" exists in the current working directory. I think it'll try to install the virtual env into that folder then, which is not what you want. Ergo: Run that conda command from within a directory in which NO directory named \"tensorflow\" (or whatever name you choose) exists.\nMake sure that no bazel processes exist from previous calls to it, as that may result in bazel \"remembering\" parts of the environment you had previously. So to be on the safe side, kill all potentially running bazel processes. I was actually wondering why bazel wasn't using Python2 although I was in a corresponding Anaconda environment. As I've figured out after a while, it was because bazel was obviously picking up a bazel process created earlier when I was still trying Python3.\nActivate the Anaconda environment you created in step 1, via source activate tensorflow.\nYou should now have Python2 being the default. You can check via e.g. pip --version or python --version.\n(Make sure that you install the necessary pip dependencies into this virtual env, like numpy & mock, via pip install numpy mock. You'll probably also have to re-run the ./configure step in the tensorflow subdir.)\n\nThis should allow you to run bazel using Python2 as far as my brief knowledge is concerned ;) .", "body": "As far as I understand the whole process, the necessary steps to have bazel run with Python2, you have to follow these steps (assuming Anaconda):\n1. Create the Anaconda virtual env via `conda create -n tensorflow python=2.7` . A thing to note here: Don't run this command from within your cloned working copy of Tensorflow Serving, as the conda command seems to get confused when a directory \"tensorflow\" exists in the current working directory. I think it'll try to install the virtual env into that folder then, which is not what you want. Ergo: Run that conda command from within a directory in which NO directory named \"tensorflow\" (or whatever name you choose) exists.\n2. Make sure that no bazel processes exist from previous calls to it, as that may result in bazel \"remembering\" parts of the environment you had previously. So to be on the safe side, kill all potentially running bazel processes. I was actually wondering why bazel wasn't using Python2 although I was in a corresponding Anaconda environment. As I've figured out after a while, it was because bazel was obviously picking up a bazel process created earlier when I was still trying Python3.\n3. Activate the Anaconda environment you created in step 1, via `source activate tensorflow`.\n4. You should now have Python2 being the default. You can check via e.g. `pip --version` or `python --version`.\n5. (Make sure that you install the necessary pip dependencies into this virtual env, like numpy & mock, via `pip install numpy mock`. You'll probably also have to re-run the `./configure` step in the tensorflow subdir.)\n\nThis should allow you to run bazel using Python2 as far as my brief knowledge is concerned ;) .\n"}