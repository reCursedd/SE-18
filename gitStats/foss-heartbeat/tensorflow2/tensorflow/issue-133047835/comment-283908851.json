{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/283908851", "html_url": "https://github.com/tensorflow/tensorflow/issues/1062#issuecomment-283908851", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1062", "id": 283908851, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzkwODg1MQ==", "user": {"login": "ageron", "id": 76661, "node_id": "MDQ6VXNlcjc2NjYx", "avatar_url": "https://avatars3.githubusercontent.com/u/76661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ageron", "html_url": "https://github.com/ageron", "followers_url": "https://api.github.com/users/ageron/followers", "following_url": "https://api.github.com/users/ageron/following{/other_user}", "gists_url": "https://api.github.com/users/ageron/gists{/gist_id}", "starred_url": "https://api.github.com/users/ageron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ageron/subscriptions", "organizations_url": "https://api.github.com/users/ageron/orgs", "repos_url": "https://api.github.com/users/ageron/repos", "events_url": "https://api.github.com/users/ageron/events{/privacy}", "received_events_url": "https://api.github.com/users/ageron/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-03T09:36:13Z", "updated_at": "2017-03-03T09:37:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Note that although NumPy arrays support the @ operator, they play nice with unknown types: when the <em>rhs</em> is not a NumPy array and it has an <code>__rmatmul__()</code> method, they return <code>NotImplemented</code> so that python calls that method instead.  This is why <code>np_a @ tf.b</code> works like a charm, thanks to NumPy.  I think I will open a feature request to make tensors behave the same way, returning <code>NotImplemented</code> rather than raising an exception when any magic function (e.g., <code>__add__()</code>) is called with an unsupported object type, and that object has an <code>__r*__()</code> method.</p>", "body_text": "Note that although NumPy arrays support the @ operator, they play nice with unknown types: when the rhs is not a NumPy array and it has an __rmatmul__() method, they return NotImplemented so that python calls that method instead.  This is why np_a @ tf.b works like a charm, thanks to NumPy.  I think I will open a feature request to make tensors behave the same way, returning NotImplemented rather than raising an exception when any magic function (e.g., __add__()) is called with an unsupported object type, and that object has an __r*__() method.", "body": "Note that although NumPy arrays support the @ operator, they play nice with unknown types: when the _rhs_ is not a NumPy array and it has an `__rmatmul__()` method, they return `NotImplemented` so that python calls that method instead.  This is why `np_a @ tf.b` works like a charm, thanks to NumPy.  I think I will open a feature request to make tensors behave the same way, returning `NotImplemented` rather than raising an exception when any magic function (e.g., `__add__()`) is called with an unsupported object type, and that object has an `__r*__()` method."}