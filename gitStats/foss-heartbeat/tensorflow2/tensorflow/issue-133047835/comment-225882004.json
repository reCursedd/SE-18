{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/225882004", "html_url": "https://github.com/tensorflow/tensorflow/issues/1062#issuecomment-225882004", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1062", "id": 225882004, "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTg4MjAwNA==", "user": {"login": "ibab", "id": 890531, "node_id": "MDQ6VXNlcjg5MDUzMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/890531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibab", "html_url": "https://github.com/ibab", "followers_url": "https://api.github.com/users/ibab/followers", "following_url": "https://api.github.com/users/ibab/following{/other_user}", "gists_url": "https://api.github.com/users/ibab/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibab/subscriptions", "organizations_url": "https://api.github.com/users/ibab/orgs", "repos_url": "https://api.github.com/users/ibab/repos", "events_url": "https://api.github.com/users/ibab/events{/privacy}", "received_events_url": "https://api.github.com/users/ibab/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-14T13:34:13Z", "updated_at": "2016-06-14T13:34:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In order to implement the semantics of <code>@</code> properly, we should use an op that exactly matches the behaviour of <code>numpy.matmul</code>: <a href=\"http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.matmul.html#numpy.matmul\" rel=\"nofollow\">http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.matmul.html#numpy.matmul</a><br>\nOtherwise things would get very confusing when users assume that the tensorflow <code>@</code> will work like the numpy one.</p>\n<p>Here's a copy of the behaviour described in the docs:</p>\n<ul>\n<li>If both arguments are 2-D they are multiplied like conventional matrices.</li>\n<li>If either argument is N-D, N &gt; 2, it is treated as a stack of matrices residing in the last two indexes and broadcast accordingly.</li>\n<li>If the first argument is 1-D, it is promoted to a matrix by prepending a 1 to its dimensions. After matrix multiplication the prepended 1 is removed.</li>\n<li>If the second argument is 1-D, it is promoted to a matrix by appending a 1 to its dimensions. After matrix multiplication the appended 1 is removed.</li>\n<li>Multiplication by a scalar is not allowed, use * instead. Note that multiplying a stack of matrices with a vector will result in a stack of vectors, but matmul will not recognize it as such.</li>\n</ul>\n<p>So there would need to be some extra work on top of unifying the two ops.</p>", "body_text": "In order to implement the semantics of @ properly, we should use an op that exactly matches the behaviour of numpy.matmul: http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.matmul.html#numpy.matmul\nOtherwise things would get very confusing when users assume that the tensorflow @ will work like the numpy one.\nHere's a copy of the behaviour described in the docs:\n\nIf both arguments are 2-D they are multiplied like conventional matrices.\nIf either argument is N-D, N > 2, it is treated as a stack of matrices residing in the last two indexes and broadcast accordingly.\nIf the first argument is 1-D, it is promoted to a matrix by prepending a 1 to its dimensions. After matrix multiplication the prepended 1 is removed.\nIf the second argument is 1-D, it is promoted to a matrix by appending a 1 to its dimensions. After matrix multiplication the appended 1 is removed.\nMultiplication by a scalar is not allowed, use * instead. Note that multiplying a stack of matrices with a vector will result in a stack of vectors, but matmul will not recognize it as such.\n\nSo there would need to be some extra work on top of unifying the two ops.", "body": "In order to implement the semantics of `@` properly, we should use an op that exactly matches the behaviour of `numpy.matmul`: http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.matmul.html#numpy.matmul\nOtherwise things would get very confusing when users assume that the tensorflow `@` will work like the numpy one.\n\nHere's a copy of the behaviour described in the docs:\n- If both arguments are 2-D they are multiplied like conventional matrices.\n- If either argument is N-D, N > 2, it is treated as a stack of matrices residing in the last two indexes and broadcast accordingly.\n- If the first argument is 1-D, it is promoted to a matrix by prepending a 1 to its dimensions. After matrix multiplication the prepended 1 is removed.\n- If the second argument is 1-D, it is promoted to a matrix by appending a 1 to its dimensions. After matrix multiplication the appended 1 is removed.\n- Multiplication by a scalar is not allowed, use \\* instead. Note that multiplying a stack of matrices with a vector will result in a stack of vectors, but matmul will not recognize it as such.\n\nSo there would need to be some extra work on top of unifying the two ops.\n"}