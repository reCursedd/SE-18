{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/223455692", "html_url": "https://github.com/tensorflow/tensorflow/issues/1704#issuecomment-223455692", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1704", "id": 223455692, "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzQ1NTY5Mg==", "user": {"login": "orionr", "id": 79994, "node_id": "MDQ6VXNlcjc5OTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/79994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orionr", "html_url": "https://github.com/orionr", "followers_url": "https://api.github.com/users/orionr/followers", "following_url": "https://api.github.com/users/orionr/following{/other_user}", "gists_url": "https://api.github.com/users/orionr/gists{/gist_id}", "starred_url": "https://api.github.com/users/orionr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orionr/subscriptions", "organizations_url": "https://api.github.com/users/orionr/orgs", "repos_url": "https://api.github.com/users/orionr/repos", "events_url": "https://api.github.com/users/orionr/events{/privacy}", "received_events_url": "https://api.github.com/users/orionr/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-02T23:49:05Z", "updated_at": "2016-06-02T23:49:05Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Only thing I would suggest is to concatenate to the existing PYTHONPATH rather than overriding it. Take one more look at my previous comment and the :$PYTHONPATH inserted in the middle. If that doesn't work I guess we'll need to hear from the real maintainers.</p>\n<blockquote>\n<p>On Jun 2, 2016, at 3:18 PM, Bob Adolf <a href=\"mailto:notifications@github.com\">notifications@github.com</a> wrote:</p>\n<p>Yep. That's the ultimate goal here: place tensorflow in directory X, and point PYTHONPATH to it, and write import tensorflow, where X is a directory of my choosing. Each one of these examples actually sets PYTHONPATH to TF_INSTALL_DIR before running, just like you mention. It certainly seemed like it should be that easy. Unfortunately, it seems that either due some combination of the packaging tools and the way the TensorFlow and/or protobuf packages are written, it's not.</p>\n<p>I do understand the virtualenv perspective. Without getting into too much of a holy war, virtualenv takes a very different approach to solving the problem, one that is pretty narrow in scope. Part of my hope was that I would only have to have one solution for dealing with versioning, environment, and consistency. virtualenv can only handle a small piece of the python-only part of that. For instance, there's a collection of training data and preprocessing which needs similar solutions: externally managed, place it in directory X, point Y to it, etc. Virtualenv isn't much help there. Same with some low-level instrumentation code which we use. And this is compounded by running on a variety of machines and platforms. So while I'll admit I'm a little biased because I don't much like virtualenv's approach to the world, I'd also really like to avoid adding more complexity in a lot of places just because of idiosyncrasies in the way tensorflow's package is written. (Especially since it wa s working two weeks ago!)</p>\n<p>\u2014<br>\nYou are receiving this because you were mentioned.<br>\nReply to this email directly, view it on GitHub, or mute the thread.</p>\n</blockquote>", "body_text": "Only thing I would suggest is to concatenate to the existing PYTHONPATH rather than overriding it. Take one more look at my previous comment and the :$PYTHONPATH inserted in the middle. If that doesn't work I guess we'll need to hear from the real maintainers.\n\nOn Jun 2, 2016, at 3:18 PM, Bob Adolf notifications@github.com wrote:\nYep. That's the ultimate goal here: place tensorflow in directory X, and point PYTHONPATH to it, and write import tensorflow, where X is a directory of my choosing. Each one of these examples actually sets PYTHONPATH to TF_INSTALL_DIR before running, just like you mention. It certainly seemed like it should be that easy. Unfortunately, it seems that either due some combination of the packaging tools and the way the TensorFlow and/or protobuf packages are written, it's not.\nI do understand the virtualenv perspective. Without getting into too much of a holy war, virtualenv takes a very different approach to solving the problem, one that is pretty narrow in scope. Part of my hope was that I would only have to have one solution for dealing with versioning, environment, and consistency. virtualenv can only handle a small piece of the python-only part of that. For instance, there's a collection of training data and preprocessing which needs similar solutions: externally managed, place it in directory X, point Y to it, etc. Virtualenv isn't much help there. Same with some low-level instrumentation code which we use. And this is compounded by running on a variety of machines and platforms. So while I'll admit I'm a little biased because I don't much like virtualenv's approach to the world, I'd also really like to avoid adding more complexity in a lot of places just because of idiosyncrasies in the way tensorflow's package is written. (Especially since it wa s working two weeks ago!)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.", "body": "Only thing I would suggest is to concatenate to the existing PYTHONPATH rather than overriding it. Take one more look at my previous comment and the :$PYTHONPATH inserted in the middle. If that doesn't work I guess we'll need to hear from the real maintainers.\n\n> On Jun 2, 2016, at 3:18 PM, Bob Adolf notifications@github.com wrote:\n> \n> Yep. That's the ultimate goal here: place tensorflow in directory X, and point PYTHONPATH to it, and write import tensorflow, where X is a directory of my choosing. Each one of these examples actually sets PYTHONPATH to TF_INSTALL_DIR before running, just like you mention. It certainly seemed like it should be that easy. Unfortunately, it seems that either due some combination of the packaging tools and the way the TensorFlow and/or protobuf packages are written, it's not.\n> \n> I do understand the virtualenv perspective. Without getting into too much of a holy war, virtualenv takes a very different approach to solving the problem, one that is pretty narrow in scope. Part of my hope was that I would only have to have one solution for dealing with versioning, environment, and consistency. virtualenv can only handle a small piece of the python-only part of that. For instance, there's a collection of training data and preprocessing which needs similar solutions: externally managed, place it in directory X, point Y to it, etc. Virtualenv isn't much help there. Same with some low-level instrumentation code which we use. And this is compounded by running on a variety of machines and platforms. So while I'll admit I'm a little biased because I don't much like virtualenv's approach to the world, I'd also really like to avoid adding more complexity in a lot of places just because of idiosyncrasies in the way tensorflow's package is written. (Especially since it wa s working two weeks ago!)\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n"}