{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1704", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1704/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1704/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1704/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1704", "id": 144453507, "node_id": "MDU6SXNzdWUxNDQ0NTM1MDc=", "number": 1704, "title": "\"Setting up TensorFlow for Development\" no longer works with recent TF versions", "user": {"login": "rdadolf", "id": 6673605, "node_id": "MDQ6VXNlcjY2NzM2MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6673605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdadolf", "html_url": "https://github.com/rdadolf", "followers_url": "https://api.github.com/users/rdadolf/followers", "following_url": "https://api.github.com/users/rdadolf/following{/other_user}", "gists_url": "https://api.github.com/users/rdadolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdadolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdadolf/subscriptions", "organizations_url": "https://api.github.com/users/rdadolf/orgs", "repos_url": "https://api.github.com/users/rdadolf/repos", "events_url": "https://api.github.com/users/rdadolf/events{/privacy}", "received_events_url": "https://api.github.com/users/rdadolf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "keveman", "id": 229914, "node_id": "MDQ6VXNlcjIyOTkxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/229914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keveman", "html_url": "https://github.com/keveman", "followers_url": "https://api.github.com/users/keveman/followers", "following_url": "https://api.github.com/users/keveman/following{/other_user}", "gists_url": "https://api.github.com/users/keveman/gists{/gist_id}", "starred_url": "https://api.github.com/users/keveman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keveman/subscriptions", "organizations_url": "https://api.github.com/users/keveman/orgs", "repos_url": "https://api.github.com/users/keveman/repos", "events_url": "https://api.github.com/users/keveman/events{/privacy}", "received_events_url": "https://api.github.com/users/keveman/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "keveman", "id": 229914, "node_id": "MDQ6VXNlcjIyOTkxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/229914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keveman", "html_url": "https://github.com/keveman", "followers_url": "https://api.github.com/users/keveman/followers", "following_url": "https://api.github.com/users/keveman/following{/other_user}", "gists_url": "https://api.github.com/users/keveman/gists{/gist_id}", "starred_url": "https://api.github.com/users/keveman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keveman/subscriptions", "organizations_url": "https://api.github.com/users/keveman/orgs", "repos_url": "https://api.github.com/users/keveman/repos", "events_url": "https://api.github.com/users/keveman/events{/privacy}", "received_events_url": "https://api.github.com/users/keveman/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 12, "created_at": "2016-03-30T03:27:13Z", "updated_at": "2016-06-13T14:45:27Z", "closed_at": "2016-06-13T14:45:27Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>Environment info</h3>\n<p>Operating System: OS X 10.11, Ubuntu 15.10<br>\nSource build, commit hash: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/e39d8feebb9666a331345cd8d960f5ade4652bba/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/e39d8feebb9666a331345cd8d960f5ade4652bba\"><tt>e39d8fe</tt></a></p>\n<h3>Steps to reproduce</h3>\n<p>I have TF as a submodule and build it local to the project. I use more or less the exact same commands in the <a href=\"https://www.tensorflow.org/versions/r0.7/get_started/os_setup.html#setting-up-tensorflow-for-development\" rel=\"nofollow\">development setup</a>. The only minor change is that I don't run <code>python setup.py develop</code> (under OS X, this breaks my Anaconda python installation completely via screwing with the site-packages). So the steps are (in Makefile syntax):</p>\n<div class=\"highlight highlight-source-shell\"><pre>git submodule update --init --recursive\n<span class=\"pl-c1\">cd</span> <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>TF_DIR<span class=\"pl-pds\">)</span></span> <span class=\"pl-k\">&amp;&amp;</span> ./configure\n<span class=\"pl-c1\">cd</span> <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>TF_DIR<span class=\"pl-pds\">)</span></span> <span class=\"pl-k\">&amp;&amp;</span> bazel build -c opt //tensorflow/tools/pip_package:build_pip_package\n<span class=\"pl-c1\">cd</span> <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>TF_INSTALL_DIR<span class=\"pl-pds\">)</span></span> <span class=\"pl-k\">&amp;&amp;</span> ln -s <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>addprefix ../../,<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>wildcard <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>TF_DIR<span class=\"pl-pds\">)</span></span>/bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/<span class=\"pl-k\">*</span><span class=\"pl-pds\">)</span></span><span class=\"pl-pds\">)</span></span> <span class=\"pl-c1\">.</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>TF_INSTALL_DIR<span class=\"pl-pds\">)</span></span> <span class=\"pl-k\">&amp;&amp;</span> ln -s <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>addprefix ../../,<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>wildcard <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>TF_DIR<span class=\"pl-pds\">)</span></span>/tensorflow/tools/pip_package/<span class=\"pl-k\">*</span><span class=\"pl-pds\">)</span></span><span class=\"pl-pds\">)</span></span> <span class=\"pl-c1\">.</span></pre></div>\n<p>The prefix commands are for making globs work in Make. I have confirmed they expand to the same symlink commands.</p>\n<h3>Issue</h3>\n<p>Importing tensorflow no longer works using development guidelines. Specifically, assuming tensorflow is cloned into $TF_DIR, symlinked into <code>$TF_INSTALL_DIR</code>, and built by bazel in $BAZEL_TMP, this no longer works: (output sanitized manually)</p>\n<pre><code>$ PYTHONPATH=$TF_INSTALL_DIR python\nPython 2.7.10 (default, Oct 14 2015, 16:09:02) \n[GCC 5.2.1 20151010] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import tensorflow as tf\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"$TF_INSTALL_DIR/tensorflow/__init__.py\", line 23, in &lt;module&gt;\n    from tensorflow.python import *\n  File \"$TF_INSTALL_DIR/tensorflow/python/__init__.py\", line 49, in &lt;module&gt;\n    from tensorflow.core.framework.graph_pb2 import *\n  File \"$TF_INSTALL_DIR/tensorflow/core/framework/graph_pb2.py\", line 6, in &lt;module&gt;\n    from google.protobuf import descriptor as _descriptor\n  File \"$BAZEL_TMP/tensorflow/bazel-out/local_linux-opt/bin/tensorflow/tools/pip_package/build_pip_package.runfiles/google/protobuf/descriptor.py\", line 46, in &lt;module&gt;\n    from google.protobuf.pyext import _message\n  File \"$BAZEL_TMP/tensorflow/bazel-out/local_linux-opt/bin/tensorflow/tools/pip_package/build_pip_package.runfiles/google/protobuf/pyext/__init__.py\", line 2, in &lt;module&gt;\n    __import__('pkg_resources').declare_namespace(__name__)\n  File \"/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 2226, in declare_namespace\n    _handle_ns(packageName, path_item)\n  File \"/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 2195, in _handle_ns\n    path.sort(key=sort_key)\n  File \"/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 2193, in sort_key\n    return sys_path.index(_normalize_cached(os.sep.join(parts)))\nValueError: '$BAZEL_TMP/tensorflow/bazel-out/local_linux-opt/bin/tensorflow/tools/pip_package/build_pip_package.runfiles' is not in list\n</code></pre>\n<p>Linux output shown, but OS X also fails with a similar exception.</p>\n<h3>What have you tried?</h3>\n<p>I believe the issue comes down to the same one as <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"141722911\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1535\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1535/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/1535\">#1535</a>. I am creating this issue separately so that if it turns out to be a different problem, it isn't muddled. If it's the same, we can close it.</p>\n<p>The exception is a result of namespace package resolution in google.protobuf trying to find <code>$BAZEL_TMP/tensorflow/bazel-out/local_linux-opt/bin/tensorflow/tools/pip_package/build_pip_package.runfiles/google/protobuf/pyext</code>. It is trying to find it in a list of system paths which includes <code>$TF_INSTALL_DIR</code>. Recall that due to the development setup rules, the files in <code>$TF_INSTALL_DIR</code> are symlinks to files in <code>$BAZEL_TMP</code>. Specifically, <code>$TF_INSTALL_DIR/google/protobuf</code> is the same directory as <code>$BAZEL_TMP/google/protobuf</code>. (I have verified this with <code>pwd -P</code>.</p>\n<p>What seems to be going on is that Python is attempting to unify the protobuf namespace package, but its filename (<code>$BAZEL_TMP/google/protobuf/pyext</code>) does not match the <code>sys.path</code> entry (<code>$TF_INSTALL_DIR</code>).</p>\n<p><strong>Note:</strong> This only appears to be a problem when trying to use the development install rules, and it only appears to be a problem when there's another tensorflow or protobuf installed in the system somewhere else. At least on OS X; the other version of tensorflow on my Linux machine is in use by other users, so I can't uninstall it safely. I have not attempted to create a clean virtual environment just for my development directory (for one, because virtual environments are a pain in the neck; and two, that's part of the whole point of having a local build of tensorflow).</p>\n<p>Workaround: Replacing the symlinks with a recursive copy (from <code>$BAZEL_TMP</code> to <code>$TF_INSTALL_DIR</code>) is apparently sufficient to convince Python that it's unified the namespace packages correctly, and it chooses the <code>$TF_INSTALL_DIR</code> specified in <code>$PYTHONPATH</code>.</p>\n<p>So I don't know what the appropriate solution here is, but the problem seems to be the result of a convergence of semi-hacky solutions, any one of which alone might not be an issue, but work together to cause problems:</p>\n<ul>\n<li>There's no clean way to extract the necessary files from a built tensorflow without going through pip install. Perhaps there's a method using pip I'm not aware of (maybe something with <code>--target</code>?).</li>\n<li>Python namespace packages have poor path resolution semantics. It looks like this ship has sailed.</li>\n<li>The symlink approach is kind of coarse and tricky to script around.</li>\n</ul>", "body_text": "Environment info\nOperating System: OS X 10.11, Ubuntu 15.10\nSource build, commit hash: e39d8fe\nSteps to reproduce\nI have TF as a submodule and build it local to the project. I use more or less the exact same commands in the development setup. The only minor change is that I don't run python setup.py develop (under OS X, this breaks my Anaconda python installation completely via screwing with the site-packages). So the steps are (in Makefile syntax):\ngit submodule update --init --recursive\ncd $(TF_DIR) && ./configure\ncd $(TF_DIR) && bazel build -c opt //tensorflow/tools/pip_package:build_pip_package\ncd $(TF_INSTALL_DIR) && ln -s $(addprefix ../../,$(wildcard $(TF_DIR)/bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/*)) .\n$(TF_INSTALL_DIR) && ln -s $(addprefix ../../,$(wildcard $(TF_DIR)/tensorflow/tools/pip_package/*)) .\nThe prefix commands are for making globs work in Make. I have confirmed they expand to the same symlink commands.\nIssue\nImporting tensorflow no longer works using development guidelines. Specifically, assuming tensorflow is cloned into $TF_DIR, symlinked into $TF_INSTALL_DIR, and built by bazel in $BAZEL_TMP, this no longer works: (output sanitized manually)\n$ PYTHONPATH=$TF_INSTALL_DIR python\nPython 2.7.10 (default, Oct 14 2015, 16:09:02) \n[GCC 5.2.1 20151010] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import tensorflow as tf\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"$TF_INSTALL_DIR/tensorflow/__init__.py\", line 23, in <module>\n    from tensorflow.python import *\n  File \"$TF_INSTALL_DIR/tensorflow/python/__init__.py\", line 49, in <module>\n    from tensorflow.core.framework.graph_pb2 import *\n  File \"$TF_INSTALL_DIR/tensorflow/core/framework/graph_pb2.py\", line 6, in <module>\n    from google.protobuf import descriptor as _descriptor\n  File \"$BAZEL_TMP/tensorflow/bazel-out/local_linux-opt/bin/tensorflow/tools/pip_package/build_pip_package.runfiles/google/protobuf/descriptor.py\", line 46, in <module>\n    from google.protobuf.pyext import _message\n  File \"$BAZEL_TMP/tensorflow/bazel-out/local_linux-opt/bin/tensorflow/tools/pip_package/build_pip_package.runfiles/google/protobuf/pyext/__init__.py\", line 2, in <module>\n    __import__('pkg_resources').declare_namespace(__name__)\n  File \"/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 2226, in declare_namespace\n    _handle_ns(packageName, path_item)\n  File \"/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 2195, in _handle_ns\n    path.sort(key=sort_key)\n  File \"/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 2193, in sort_key\n    return sys_path.index(_normalize_cached(os.sep.join(parts)))\nValueError: '$BAZEL_TMP/tensorflow/bazel-out/local_linux-opt/bin/tensorflow/tools/pip_package/build_pip_package.runfiles' is not in list\n\nLinux output shown, but OS X also fails with a similar exception.\nWhat have you tried?\nI believe the issue comes down to the same one as #1535. I am creating this issue separately so that if it turns out to be a different problem, it isn't muddled. If it's the same, we can close it.\nThe exception is a result of namespace package resolution in google.protobuf trying to find $BAZEL_TMP/tensorflow/bazel-out/local_linux-opt/bin/tensorflow/tools/pip_package/build_pip_package.runfiles/google/protobuf/pyext. It is trying to find it in a list of system paths which includes $TF_INSTALL_DIR. Recall that due to the development setup rules, the files in $TF_INSTALL_DIR are symlinks to files in $BAZEL_TMP. Specifically, $TF_INSTALL_DIR/google/protobuf is the same directory as $BAZEL_TMP/google/protobuf. (I have verified this with pwd -P.\nWhat seems to be going on is that Python is attempting to unify the protobuf namespace package, but its filename ($BAZEL_TMP/google/protobuf/pyext) does not match the sys.path entry ($TF_INSTALL_DIR).\nNote: This only appears to be a problem when trying to use the development install rules, and it only appears to be a problem when there's another tensorflow or protobuf installed in the system somewhere else. At least on OS X; the other version of tensorflow on my Linux machine is in use by other users, so I can't uninstall it safely. I have not attempted to create a clean virtual environment just for my development directory (for one, because virtual environments are a pain in the neck; and two, that's part of the whole point of having a local build of tensorflow).\nWorkaround: Replacing the symlinks with a recursive copy (from $BAZEL_TMP to $TF_INSTALL_DIR) is apparently sufficient to convince Python that it's unified the namespace packages correctly, and it chooses the $TF_INSTALL_DIR specified in $PYTHONPATH.\nSo I don't know what the appropriate solution here is, but the problem seems to be the result of a convergence of semi-hacky solutions, any one of which alone might not be an issue, but work together to cause problems:\n\nThere's no clean way to extract the necessary files from a built tensorflow without going through pip install. Perhaps there's a method using pip I'm not aware of (maybe something with --target?).\nPython namespace packages have poor path resolution semantics. It looks like this ship has sailed.\nThe symlink approach is kind of coarse and tricky to script around.", "body": "### Environment info\n\nOperating System: OS X 10.11, Ubuntu 15.10\nSource build, commit hash: e39d8feebb9666a331345cd8d960f5ade4652bba\n### Steps to reproduce\n\nI have TF as a submodule and build it local to the project. I use more or less the exact same commands in the [development setup](https://www.tensorflow.org/versions/r0.7/get_started/os_setup.html#setting-up-tensorflow-for-development). The only minor change is that I don't run `python setup.py develop` (under OS X, this breaks my Anaconda python installation completely via screwing with the site-packages). So the steps are (in Makefile syntax):\n\n``` bash\ngit submodule update --init --recursive\ncd $(TF_DIR) && ./configure\ncd $(TF_DIR) && bazel build -c opt //tensorflow/tools/pip_package:build_pip_package\ncd $(TF_INSTALL_DIR) && ln -s $(addprefix ../../,$(wildcard $(TF_DIR)/bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/*)) .\n$(TF_INSTALL_DIR) && ln -s $(addprefix ../../,$(wildcard $(TF_DIR)/tensorflow/tools/pip_package/*)) .\n```\n\nThe prefix commands are for making globs work in Make. I have confirmed they expand to the same symlink commands.\n### Issue\n\nImporting tensorflow no longer works using development guidelines. Specifically, assuming tensorflow is cloned into $TF_DIR, symlinked into `$TF_INSTALL_DIR`, and built by bazel in $BAZEL_TMP, this no longer works: (output sanitized manually)\n\n```\n$ PYTHONPATH=$TF_INSTALL_DIR python\nPython 2.7.10 (default, Oct 14 2015, 16:09:02) \n[GCC 5.2.1 20151010] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import tensorflow as tf\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"$TF_INSTALL_DIR/tensorflow/__init__.py\", line 23, in <module>\n    from tensorflow.python import *\n  File \"$TF_INSTALL_DIR/tensorflow/python/__init__.py\", line 49, in <module>\n    from tensorflow.core.framework.graph_pb2 import *\n  File \"$TF_INSTALL_DIR/tensorflow/core/framework/graph_pb2.py\", line 6, in <module>\n    from google.protobuf import descriptor as _descriptor\n  File \"$BAZEL_TMP/tensorflow/bazel-out/local_linux-opt/bin/tensorflow/tools/pip_package/build_pip_package.runfiles/google/protobuf/descriptor.py\", line 46, in <module>\n    from google.protobuf.pyext import _message\n  File \"$BAZEL_TMP/tensorflow/bazel-out/local_linux-opt/bin/tensorflow/tools/pip_package/build_pip_package.runfiles/google/protobuf/pyext/__init__.py\", line 2, in <module>\n    __import__('pkg_resources').declare_namespace(__name__)\n  File \"/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 2226, in declare_namespace\n    _handle_ns(packageName, path_item)\n  File \"/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 2195, in _handle_ns\n    path.sort(key=sort_key)\n  File \"/usr/local/lib/python2.7/dist-packages/pkg_resources/__init__.py\", line 2193, in sort_key\n    return sys_path.index(_normalize_cached(os.sep.join(parts)))\nValueError: '$BAZEL_TMP/tensorflow/bazel-out/local_linux-opt/bin/tensorflow/tools/pip_package/build_pip_package.runfiles' is not in list\n```\n\nLinux output shown, but OS X also fails with a similar exception.\n### What have you tried?\n\nI believe the issue comes down to the same one as #1535. I am creating this issue separately so that if it turns out to be a different problem, it isn't muddled. If it's the same, we can close it.\n\nThe exception is a result of namespace package resolution in google.protobuf trying to find `$BAZEL_TMP/tensorflow/bazel-out/local_linux-opt/bin/tensorflow/tools/pip_package/build_pip_package.runfiles/google/protobuf/pyext`. It is trying to find it in a list of system paths which includes `$TF_INSTALL_DIR`. Recall that due to the development setup rules, the files in `$TF_INSTALL_DIR` are symlinks to files in `$BAZEL_TMP`. Specifically, `$TF_INSTALL_DIR/google/protobuf` is the same directory as `$BAZEL_TMP/google/protobuf`. (I have verified this with `pwd -P`.\n\nWhat seems to be going on is that Python is attempting to unify the protobuf namespace package, but its filename (`$BAZEL_TMP/google/protobuf/pyext`) does not match the `sys.path` entry (`$TF_INSTALL_DIR`).\n\n**Note:** This only appears to be a problem when trying to use the development install rules, and it only appears to be a problem when there's another tensorflow or protobuf installed in the system somewhere else. At least on OS X; the other version of tensorflow on my Linux machine is in use by other users, so I can't uninstall it safely. I have not attempted to create a clean virtual environment just for my development directory (for one, because virtual environments are a pain in the neck; and two, that's part of the whole point of having a local build of tensorflow).\n\nWorkaround: Replacing the symlinks with a recursive copy (from `$BAZEL_TMP` to `$TF_INSTALL_DIR`) is apparently sufficient to convince Python that it's unified the namespace packages correctly, and it chooses the `$TF_INSTALL_DIR` specified in `$PYTHONPATH`.\n\nSo I don't know what the appropriate solution here is, but the problem seems to be the result of a convergence of semi-hacky solutions, any one of which alone might not be an issue, but work together to cause problems:\n- There's no clean way to extract the necessary files from a built tensorflow without going through pip install. Perhaps there's a method using pip I'm not aware of (maybe something with `--target`?).\n- Python namespace packages have poor path resolution semantics. It looks like this ship has sailed.\n- The symlink approach is kind of coarse and tricky to script around.\n"}