{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/223414055", "html_url": "https://github.com/tensorflow/tensorflow/issues/1704#issuecomment-223414055", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1704", "id": 223414055, "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzQxNDA1NQ==", "user": {"login": "rdadolf", "id": 6673605, "node_id": "MDQ6VXNlcjY2NzM2MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6673605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdadolf", "html_url": "https://github.com/rdadolf", "followers_url": "https://api.github.com/users/rdadolf/followers", "following_url": "https://api.github.com/users/rdadolf/following{/other_user}", "gists_url": "https://api.github.com/users/rdadolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdadolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdadolf/subscriptions", "organizations_url": "https://api.github.com/users/rdadolf/orgs", "repos_url": "https://api.github.com/users/rdadolf/repos", "events_url": "https://api.github.com/users/rdadolf/events{/privacy}", "received_events_url": "https://api.github.com/users/rdadolf/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-02T20:35:39Z", "updated_at": "2016-06-02T20:35:39Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Given the <a href=\"https://github.com/tensorflow/tensorflow/commit/14ac2235699509f512b44b71160239c153ab413d\">recent flux</a>, I thought I'd update this issue based on a more recent version (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/79174afa30046ecdc437b531812f2cb41a32695e/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/79174afa30046ecdc437b531812f2cb41a32695e\"><tt>79174af</tt></a>).</p>\n<p>First, I've updated to bazel 2.3 to avoid <a href=\"https://github.com/tensorflow/tensorflow/issues/2497#issuecomment-221631692\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/2497/hovercard\">this problem</a>, so the relevant commands now use the <code>org_tensorflow</code> syntax (with the typo fix).</p>\n<p>The changes to protobuf have not solved these issues, they've just broken them in different ways.</p>\n<p><strong>Change in behavior regarding manual import</strong></p>\n<p>It looks like the change has broken the way I was importing TensorFlow in the original issue. I.e, running through the TensorFlow development setup instructions without the <code>setup.py</code> step and just importing from the directory no longer works. The specific commands are (<em>not</em> in Makefile syntax this time, to make things easier to read):</p>\n<pre><code>cd $TF_DIR &amp;&amp; ./configure\ncd $TF_DIR &amp;&amp; bazel build -c opt //tensorflow/tools/pip_package:build_pip_package\nrm -r $TF_INSTALL_DIR\nmkdir $TF_INSTALL_DIR\ncd $TF_INSTALL_DIR &amp;&amp; cp -r $TF_DIR/bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/org_tensorflow/* .\ncd $TF_INSTALL_DIR &amp;&amp; cp -r $TF_DIR/tensorflow/tools/pip_package/* .\n</code></pre>\n<p>Example 1: In a clean environment, <code>protobuf</code> is not found.</p>\n<pre><code>PYTHONPATH=$TF_INSTALL_DIR python\n&gt;&gt;&gt; import tensorflow as tf\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"$TF_INSTALL_DIR/tensorflow/__init__.py\", line 23, in &lt;module&gt;\n    from tensorflow.python import *\n  File \"$TF_INSTALL_DIR/tensorflow/python/__init__.py\", line 58, in &lt;module&gt;\n    raise ImportError(msg)\nImportError: Traceback (most recent call last):\n  File \"$TF_INSTALL_DIR/tensorflow/python/__init__.py\", line 52, in &lt;module&gt;\n    from tensorflow.core.framework.graph_pb2 import *\n  File \"$TF_INSTALL_DIR/tensorflow/core/framework/graph_pb2.py\", line 6, in &lt;module&gt;\n    from google.protobuf import descriptor as _descriptor\nImportError: No module named google.protobuf\n\nError importing tensorflow.  Unless you are using bazel,\nyou should not try to import tensorflow from its source directory;\nplease exit the tensorflow source tree, and relaunch your python interpreter\nfrom there.\n</code></pre>\n<p>Example 2: In a mixed environment (i.e., one with a system-installed version of tensorflow and a custom verstion. In this case, they are the <em>same</em> version of protobuf, so we don't get an error as in the original issue):</p>\n<pre><code>PYTHONPATH=$TF_INSTALL_DIR python\n&gt;&gt;&gt; import tensorflow as tf\n&gt;&gt;&gt; tf.__file__\n$TF_INSTALL_DIR/tensorflow/__init__.pyc\n&gt;&gt;&gt; import google.protobuf\n&gt;&gt;&gt; google.protobuf.__file__\n$SYSTEM_SITE_PACKAGES/google/protobuf/__init__.pyc\n</code></pre>\n<p>It looks like the changes have made importing directly impossible. That's unfortunate, but I understand that it wasn't a supported behavior in the first place. So I bit the bullet and tried to make things work as in the first bullet point I mentioned in the original file (working through <code>setup.py</code> or <code>pip</code>).</p>\n<p><strong>Installing via \"Setting up TensorFlow for Development\"</strong></p>\n<p>Same commands as before, but this time using the <code>setup.py</code> as written (and a separate build directory):</p>\n<pre><code>cd $TF_DIR &amp;&amp; ./configure\ncd $TF_DIR &amp;&amp; bazel build -c opt //tensorflow/tools/pip_package:build_pip_package\nrm -r $TF_BUILD_DIR\nmkdir $TF_BUILD_DIR\ncd $TF_BUILD_DIR &amp;&amp; ln -s $TF_DIR/bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/org_tensorflow/* .\ncd $TF_BUILD_DIR &amp;&amp; ln -s $TF_DIR/tensorflow/tools/pip_package/* .\npython $TF_BUILD_DIR/setup.py develop\n</code></pre>\n<p>Note: this is <em>not</em> safe. This can overwrite files in your <code>site-packages</code> directory, including replacing existing <code>easy_install</code> and <code>wheel</code> scripts and modifying your existing <code>sys.path</code> through <code>.pth</code> files. If there's a flaw here (or, say a mismatch between the version of <code>setuptools</code> that TensorFlow just installed and your other tools like, say <code>pip</code> or <code>conda</code>) and you're not using some type of sandboxing (virtualenv, VM, etc.), python is basically broken until you manually remove the offending files TensorFlow installs (and you won't be able to use the <code>--uninstall</code> option because of the same underlying issue). Also, if you already had a working version of tensorflow, it's now gone, as they conflict and <code>setup.py</code> will remove the other. So as before, I hope you were working in a sandbox.</p>\n<p>So this sort of works, but it doesn't solve my original problem of having any sort of control over where the library was installed. So there are a couple of possible solutions:</p>\n<p><strong>Flags to <code>setup.py</code></strong><br>\n<code>setup.py develop</code> takes an <code>--install-dir</code> flag. Long story short, it doesn't work. 1) it requires pre-modifying your environment, 2) it doesn't <em>actually</em> obey the flag---it still modifies files in your default <code>site-packages</code>, and 3) it doesn't actually work: python doesn't find the library, even when the directory is specified in <code>PYTHONPATH</code>.</p>\n<p>Counter-intuitively, <code>setup.py install</code> has different options, including a <code>--prefix</code> flag, which doesn't do quite the same thing. Except it turns out that this the same problems.</p>\n<p>Ultimately, both of these use <code>.pth</code> files as an underlying mechanism. Because python only reads <code>.pth</code> files from four specific directories, these methods are unworkable.</p>\n<p><strong>Flags to pip</strong><br>\nSo the remaining option is to forget the \"development\" options altogether and attempt to use the pip package. Recent versions of <code>pip</code> take a <code>--prefix</code> option, which is supposed to support this. So the commands are:</p>\n<pre><code>cd $TF_DIR &amp;&amp; ./configure\ncd $TF_DIR &amp;&amp; bazel build -c opt //tensorflow/tools/pip_package:build_pip_package\n$TF_DIR/bazel-bin/tensorflow/tools/pip_package/build_pip_package $TF_BUILD_DIR\npip install $TF_BUILD_DIR/tensorflow-0.8.0-py2-none-any.whl --prefix=$TF_INSTALL_DIR\n</code></pre>\n<p>and we get this output:</p>\n<pre><code>Thu Jun 2 16:27:58 EDT 2016 : === Using tmpdir: /var/folders/mw/kf4sryxx1xvgh2kyg9_yxvsw0000gn/T/tmp.XXXXXXXXXX.PYkoZMt7\n/var/folders/mw/kf4sryxx1xvgh2kyg9_yxvsw0000gn/T/tmp.XXXXXXXXXX.PYkoZMt7 ~/scratch/tensorflow\nThu Jun 2 16:27:58 EDT 2016 : === Building wheel\n~/scratch/tensorflow\nThu Jun 2 16:28:10 EDT 2016 : === Output wheel file is in: $TF_BUILD_DIR\nProcessing $TF_BUILD_DIR/tensorflow-0.8.0-py2-none-any.whl\nRequirement already satisfied (use --upgrade to upgrade): six&gt;=1.10.0 in $SYSTEM_SITE_PACKAGES (from tensorflow==0.8.0)\nCollecting protobuf==3.0.0b2 (from tensorflow==0.8.0)\n  Using cached protobuf-3.0.0b2-py2.py3-none-any.whl\nRequirement already satisfied (use --upgrade to upgrade): numpy&gt;=1.10.1 in $SYSTEM_SITE_PACKAGES (from tensorflow==0.8.0)\nRequirement already satisfied (use --upgrade to upgrade): wheel in $SYSTEM_SITE_PACKAGES (from tensorflow==0.8.0)\nRequirement already satisfied (use --upgrade to upgrade): setuptools in $SYSTEM_SITE_PACKAGES/setuptools-21.2.1-py2.7.egg (from protobuf==3.0.0b2-&gt;tensorflow==0.8.0)\nInstalling collected packages: protobuf, tensorflow\nSuccessfully installed protobuf tensorflow\n</code></pre>\n<p>And we try importing...</p>\n<pre><code>PYTHONPATH=$TF_INSTALL_DIR/lib/python2.7/site-packages python\n&gt;&gt;&gt; import tensorflow\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"$TF_INSTALL_DIR/lib/python2.7/site-packages/tensorflow/__init__.py\", line 23, in &lt;module&gt;\n    from tensorflow.python import *\n  File \"$TF_INSTALL_DIR/lib/python2.7/site-packages/tensorflow/python/__init__.py\", line 58, in &lt;module&gt;\n    raise ImportError(msg)\nImportError: Traceback (most recent call last):\n  File \"$TF_INSTALL_DIR/lib/python2.7/site-packages/tensorflow/python/__init__.py\", line 52, in &lt;module&gt;\n    from tensorflow.core.framework.graph_pb2 import *\n  File \"$TF_INSTALL_DIR/lib/python2.7/site-packages/tensorflow/core/framework/graph_pb2.py\", line 6, in &lt;module&gt;\n    from google.protobuf import descriptor as _descriptor\nImportError: No module named google.protobuf\n\nError importing tensorflow.  Unless you are using bazel,\nyou should not try to import tensorflow from its source directory;\nplease exit the tensorflow source tree, and relaunch your python interpreter\nfrom there.\n</code></pre>\n<p>Which brings us back to a similar problem. It seems nigh-on impossible to get tensorflow to import protobuf using the new system unless it's installed in the default user or system directory. I believe this boils down to the same namespace packaging issue, but that's just a conjecture at this point.</p>\n<p><strong>TL;DR</strong><br>\nThe new protobuf mechanism doesn't actually solve this problem. Installing tensorflow in a non-standard location seems to cause protobuf imports to fail regardless of how or where.</p>", "body_text": "Given the recent flux, I thought I'd update this issue based on a more recent version (79174af).\nFirst, I've updated to bazel 2.3 to avoid this problem, so the relevant commands now use the org_tensorflow syntax (with the typo fix).\nThe changes to protobuf have not solved these issues, they've just broken them in different ways.\nChange in behavior regarding manual import\nIt looks like the change has broken the way I was importing TensorFlow in the original issue. I.e, running through the TensorFlow development setup instructions without the setup.py step and just importing from the directory no longer works. The specific commands are (not in Makefile syntax this time, to make things easier to read):\ncd $TF_DIR && ./configure\ncd $TF_DIR && bazel build -c opt //tensorflow/tools/pip_package:build_pip_package\nrm -r $TF_INSTALL_DIR\nmkdir $TF_INSTALL_DIR\ncd $TF_INSTALL_DIR && cp -r $TF_DIR/bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/org_tensorflow/* .\ncd $TF_INSTALL_DIR && cp -r $TF_DIR/tensorflow/tools/pip_package/* .\n\nExample 1: In a clean environment, protobuf is not found.\nPYTHONPATH=$TF_INSTALL_DIR python\n>>> import tensorflow as tf\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"$TF_INSTALL_DIR/tensorflow/__init__.py\", line 23, in <module>\n    from tensorflow.python import *\n  File \"$TF_INSTALL_DIR/tensorflow/python/__init__.py\", line 58, in <module>\n    raise ImportError(msg)\nImportError: Traceback (most recent call last):\n  File \"$TF_INSTALL_DIR/tensorflow/python/__init__.py\", line 52, in <module>\n    from tensorflow.core.framework.graph_pb2 import *\n  File \"$TF_INSTALL_DIR/tensorflow/core/framework/graph_pb2.py\", line 6, in <module>\n    from google.protobuf import descriptor as _descriptor\nImportError: No module named google.protobuf\n\nError importing tensorflow.  Unless you are using bazel,\nyou should not try to import tensorflow from its source directory;\nplease exit the tensorflow source tree, and relaunch your python interpreter\nfrom there.\n\nExample 2: In a mixed environment (i.e., one with a system-installed version of tensorflow and a custom verstion. In this case, they are the same version of protobuf, so we don't get an error as in the original issue):\nPYTHONPATH=$TF_INSTALL_DIR python\n>>> import tensorflow as tf\n>>> tf.__file__\n$TF_INSTALL_DIR/tensorflow/__init__.pyc\n>>> import google.protobuf\n>>> google.protobuf.__file__\n$SYSTEM_SITE_PACKAGES/google/protobuf/__init__.pyc\n\nIt looks like the changes have made importing directly impossible. That's unfortunate, but I understand that it wasn't a supported behavior in the first place. So I bit the bullet and tried to make things work as in the first bullet point I mentioned in the original file (working through setup.py or pip).\nInstalling via \"Setting up TensorFlow for Development\"\nSame commands as before, but this time using the setup.py as written (and a separate build directory):\ncd $TF_DIR && ./configure\ncd $TF_DIR && bazel build -c opt //tensorflow/tools/pip_package:build_pip_package\nrm -r $TF_BUILD_DIR\nmkdir $TF_BUILD_DIR\ncd $TF_BUILD_DIR && ln -s $TF_DIR/bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/org_tensorflow/* .\ncd $TF_BUILD_DIR && ln -s $TF_DIR/tensorflow/tools/pip_package/* .\npython $TF_BUILD_DIR/setup.py develop\n\nNote: this is not safe. This can overwrite files in your site-packages directory, including replacing existing easy_install and wheel scripts and modifying your existing sys.path through .pth files. If there's a flaw here (or, say a mismatch between the version of setuptools that TensorFlow just installed and your other tools like, say pip or conda) and you're not using some type of sandboxing (virtualenv, VM, etc.), python is basically broken until you manually remove the offending files TensorFlow installs (and you won't be able to use the --uninstall option because of the same underlying issue). Also, if you already had a working version of tensorflow, it's now gone, as they conflict and setup.py will remove the other. So as before, I hope you were working in a sandbox.\nSo this sort of works, but it doesn't solve my original problem of having any sort of control over where the library was installed. So there are a couple of possible solutions:\nFlags to setup.py\nsetup.py develop takes an --install-dir flag. Long story short, it doesn't work. 1) it requires pre-modifying your environment, 2) it doesn't actually obey the flag---it still modifies files in your default site-packages, and 3) it doesn't actually work: python doesn't find the library, even when the directory is specified in PYTHONPATH.\nCounter-intuitively, setup.py install has different options, including a --prefix flag, which doesn't do quite the same thing. Except it turns out that this the same problems.\nUltimately, both of these use .pth files as an underlying mechanism. Because python only reads .pth files from four specific directories, these methods are unworkable.\nFlags to pip\nSo the remaining option is to forget the \"development\" options altogether and attempt to use the pip package. Recent versions of pip take a --prefix option, which is supposed to support this. So the commands are:\ncd $TF_DIR && ./configure\ncd $TF_DIR && bazel build -c opt //tensorflow/tools/pip_package:build_pip_package\n$TF_DIR/bazel-bin/tensorflow/tools/pip_package/build_pip_package $TF_BUILD_DIR\npip install $TF_BUILD_DIR/tensorflow-0.8.0-py2-none-any.whl --prefix=$TF_INSTALL_DIR\n\nand we get this output:\nThu Jun 2 16:27:58 EDT 2016 : === Using tmpdir: /var/folders/mw/kf4sryxx1xvgh2kyg9_yxvsw0000gn/T/tmp.XXXXXXXXXX.PYkoZMt7\n/var/folders/mw/kf4sryxx1xvgh2kyg9_yxvsw0000gn/T/tmp.XXXXXXXXXX.PYkoZMt7 ~/scratch/tensorflow\nThu Jun 2 16:27:58 EDT 2016 : === Building wheel\n~/scratch/tensorflow\nThu Jun 2 16:28:10 EDT 2016 : === Output wheel file is in: $TF_BUILD_DIR\nProcessing $TF_BUILD_DIR/tensorflow-0.8.0-py2-none-any.whl\nRequirement already satisfied (use --upgrade to upgrade): six>=1.10.0 in $SYSTEM_SITE_PACKAGES (from tensorflow==0.8.0)\nCollecting protobuf==3.0.0b2 (from tensorflow==0.8.0)\n  Using cached protobuf-3.0.0b2-py2.py3-none-any.whl\nRequirement already satisfied (use --upgrade to upgrade): numpy>=1.10.1 in $SYSTEM_SITE_PACKAGES (from tensorflow==0.8.0)\nRequirement already satisfied (use --upgrade to upgrade): wheel in $SYSTEM_SITE_PACKAGES (from tensorflow==0.8.0)\nRequirement already satisfied (use --upgrade to upgrade): setuptools in $SYSTEM_SITE_PACKAGES/setuptools-21.2.1-py2.7.egg (from protobuf==3.0.0b2->tensorflow==0.8.0)\nInstalling collected packages: protobuf, tensorflow\nSuccessfully installed protobuf tensorflow\n\nAnd we try importing...\nPYTHONPATH=$TF_INSTALL_DIR/lib/python2.7/site-packages python\n>>> import tensorflow\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"$TF_INSTALL_DIR/lib/python2.7/site-packages/tensorflow/__init__.py\", line 23, in <module>\n    from tensorflow.python import *\n  File \"$TF_INSTALL_DIR/lib/python2.7/site-packages/tensorflow/python/__init__.py\", line 58, in <module>\n    raise ImportError(msg)\nImportError: Traceback (most recent call last):\n  File \"$TF_INSTALL_DIR/lib/python2.7/site-packages/tensorflow/python/__init__.py\", line 52, in <module>\n    from tensorflow.core.framework.graph_pb2 import *\n  File \"$TF_INSTALL_DIR/lib/python2.7/site-packages/tensorflow/core/framework/graph_pb2.py\", line 6, in <module>\n    from google.protobuf import descriptor as _descriptor\nImportError: No module named google.protobuf\n\nError importing tensorflow.  Unless you are using bazel,\nyou should not try to import tensorflow from its source directory;\nplease exit the tensorflow source tree, and relaunch your python interpreter\nfrom there.\n\nWhich brings us back to a similar problem. It seems nigh-on impossible to get tensorflow to import protobuf using the new system unless it's installed in the default user or system directory. I believe this boils down to the same namespace packaging issue, but that's just a conjecture at this point.\nTL;DR\nThe new protobuf mechanism doesn't actually solve this problem. Installing tensorflow in a non-standard location seems to cause protobuf imports to fail regardless of how or where.", "body": "Given the [recent flux](https://github.com/tensorflow/tensorflow/commit/14ac2235699509f512b44b71160239c153ab413d), I thought I'd update this issue based on a more recent version (79174af).\n\nFirst, I've updated to bazel 2.3 to avoid [this problem](https://github.com/tensorflow/tensorflow/issues/2497#issuecomment-221631692), so the relevant commands now use the `org_tensorflow` syntax (with the typo fix).\n\nThe changes to protobuf have not solved these issues, they've just broken them in different ways.\n\n**Change in behavior regarding manual import**\n\nIt looks like the change has broken the way I was importing TensorFlow in the original issue. I.e, running through the TensorFlow development setup instructions without the `setup.py` step and just importing from the directory no longer works. The specific commands are (_not_ in Makefile syntax this time, to make things easier to read):\n\n```\ncd $TF_DIR && ./configure\ncd $TF_DIR && bazel build -c opt //tensorflow/tools/pip_package:build_pip_package\nrm -r $TF_INSTALL_DIR\nmkdir $TF_INSTALL_DIR\ncd $TF_INSTALL_DIR && cp -r $TF_DIR/bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/org_tensorflow/* .\ncd $TF_INSTALL_DIR && cp -r $TF_DIR/tensorflow/tools/pip_package/* .\n```\n\nExample 1: In a clean environment, `protobuf` is not found.\n\n```\nPYTHONPATH=$TF_INSTALL_DIR python\n>>> import tensorflow as tf\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"$TF_INSTALL_DIR/tensorflow/__init__.py\", line 23, in <module>\n    from tensorflow.python import *\n  File \"$TF_INSTALL_DIR/tensorflow/python/__init__.py\", line 58, in <module>\n    raise ImportError(msg)\nImportError: Traceback (most recent call last):\n  File \"$TF_INSTALL_DIR/tensorflow/python/__init__.py\", line 52, in <module>\n    from tensorflow.core.framework.graph_pb2 import *\n  File \"$TF_INSTALL_DIR/tensorflow/core/framework/graph_pb2.py\", line 6, in <module>\n    from google.protobuf import descriptor as _descriptor\nImportError: No module named google.protobuf\n\nError importing tensorflow.  Unless you are using bazel,\nyou should not try to import tensorflow from its source directory;\nplease exit the tensorflow source tree, and relaunch your python interpreter\nfrom there.\n```\n\nExample 2: In a mixed environment (i.e., one with a system-installed version of tensorflow and a custom verstion. In this case, they are the _same_ version of protobuf, so we don't get an error as in the original issue):\n\n```\nPYTHONPATH=$TF_INSTALL_DIR python\n>>> import tensorflow as tf\n>>> tf.__file__\n$TF_INSTALL_DIR/tensorflow/__init__.pyc\n>>> import google.protobuf\n>>> google.protobuf.__file__\n$SYSTEM_SITE_PACKAGES/google/protobuf/__init__.pyc\n```\n\nIt looks like the changes have made importing directly impossible. That's unfortunate, but I understand that it wasn't a supported behavior in the first place. So I bit the bullet and tried to make things work as in the first bullet point I mentioned in the original file (working through `setup.py` or `pip`).\n\n**Installing via \"Setting up TensorFlow for Development\"**\n\nSame commands as before, but this time using the `setup.py` as written (and a separate build directory):\n\n```\ncd $TF_DIR && ./configure\ncd $TF_DIR && bazel build -c opt //tensorflow/tools/pip_package:build_pip_package\nrm -r $TF_BUILD_DIR\nmkdir $TF_BUILD_DIR\ncd $TF_BUILD_DIR && ln -s $TF_DIR/bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/org_tensorflow/* .\ncd $TF_BUILD_DIR && ln -s $TF_DIR/tensorflow/tools/pip_package/* .\npython $TF_BUILD_DIR/setup.py develop\n```\n\nNote: this is _not_ safe. This can overwrite files in your `site-packages` directory, including replacing existing `easy_install` and `wheel` scripts and modifying your existing `sys.path` through `.pth` files. If there's a flaw here (or, say a mismatch between the version of `setuptools` that TensorFlow just installed and your other tools like, say `pip` or `conda`) and you're not using some type of sandboxing (virtualenv, VM, etc.), python is basically broken until you manually remove the offending files TensorFlow installs (and you won't be able to use the `--uninstall` option because of the same underlying issue). Also, if you already had a working version of tensorflow, it's now gone, as they conflict and `setup.py` will remove the other. So as before, I hope you were working in a sandbox.\n\nSo this sort of works, but it doesn't solve my original problem of having any sort of control over where the library was installed. So there are a couple of possible solutions:\n\n**Flags to `setup.py`**\n`setup.py develop` takes an `--install-dir` flag. Long story short, it doesn't work. 1) it requires pre-modifying your environment, 2) it doesn't _actually_ obey the flag---it still modifies files in your default `site-packages`, and 3) it doesn't actually work: python doesn't find the library, even when the directory is specified in `PYTHONPATH`.\n\nCounter-intuitively, `setup.py install` has different options, including a `--prefix` flag, which doesn't do quite the same thing. Except it turns out that this the same problems.\n\nUltimately, both of these use `.pth` files as an underlying mechanism. Because python only reads `.pth` files from four specific directories, these methods are unworkable.\n\n**Flags to pip**\nSo the remaining option is to forget the \"development\" options altogether and attempt to use the pip package. Recent versions of `pip` take a `--prefix` option, which is supposed to support this. So the commands are:\n\n```\ncd $TF_DIR && ./configure\ncd $TF_DIR && bazel build -c opt //tensorflow/tools/pip_package:build_pip_package\n$TF_DIR/bazel-bin/tensorflow/tools/pip_package/build_pip_package $TF_BUILD_DIR\npip install $TF_BUILD_DIR/tensorflow-0.8.0-py2-none-any.whl --prefix=$TF_INSTALL_DIR\n```\n\nand we get this output:\n\n```\nThu Jun 2 16:27:58 EDT 2016 : === Using tmpdir: /var/folders/mw/kf4sryxx1xvgh2kyg9_yxvsw0000gn/T/tmp.XXXXXXXXXX.PYkoZMt7\n/var/folders/mw/kf4sryxx1xvgh2kyg9_yxvsw0000gn/T/tmp.XXXXXXXXXX.PYkoZMt7 ~/scratch/tensorflow\nThu Jun 2 16:27:58 EDT 2016 : === Building wheel\n~/scratch/tensorflow\nThu Jun 2 16:28:10 EDT 2016 : === Output wheel file is in: $TF_BUILD_DIR\nProcessing $TF_BUILD_DIR/tensorflow-0.8.0-py2-none-any.whl\nRequirement already satisfied (use --upgrade to upgrade): six>=1.10.0 in $SYSTEM_SITE_PACKAGES (from tensorflow==0.8.0)\nCollecting protobuf==3.0.0b2 (from tensorflow==0.8.0)\n  Using cached protobuf-3.0.0b2-py2.py3-none-any.whl\nRequirement already satisfied (use --upgrade to upgrade): numpy>=1.10.1 in $SYSTEM_SITE_PACKAGES (from tensorflow==0.8.0)\nRequirement already satisfied (use --upgrade to upgrade): wheel in $SYSTEM_SITE_PACKAGES (from tensorflow==0.8.0)\nRequirement already satisfied (use --upgrade to upgrade): setuptools in $SYSTEM_SITE_PACKAGES/setuptools-21.2.1-py2.7.egg (from protobuf==3.0.0b2->tensorflow==0.8.0)\nInstalling collected packages: protobuf, tensorflow\nSuccessfully installed protobuf tensorflow\n```\n\nAnd we try importing...\n\n```\nPYTHONPATH=$TF_INSTALL_DIR/lib/python2.7/site-packages python\n>>> import tensorflow\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"$TF_INSTALL_DIR/lib/python2.7/site-packages/tensorflow/__init__.py\", line 23, in <module>\n    from tensorflow.python import *\n  File \"$TF_INSTALL_DIR/lib/python2.7/site-packages/tensorflow/python/__init__.py\", line 58, in <module>\n    raise ImportError(msg)\nImportError: Traceback (most recent call last):\n  File \"$TF_INSTALL_DIR/lib/python2.7/site-packages/tensorflow/python/__init__.py\", line 52, in <module>\n    from tensorflow.core.framework.graph_pb2 import *\n  File \"$TF_INSTALL_DIR/lib/python2.7/site-packages/tensorflow/core/framework/graph_pb2.py\", line 6, in <module>\n    from google.protobuf import descriptor as _descriptor\nImportError: No module named google.protobuf\n\nError importing tensorflow.  Unless you are using bazel,\nyou should not try to import tensorflow from its source directory;\nplease exit the tensorflow source tree, and relaunch your python interpreter\nfrom there.\n```\n\nWhich brings us back to a similar problem. It seems nigh-on impossible to get tensorflow to import protobuf using the new system unless it's installed in the default user or system directory. I believe this boils down to the same namespace packaging issue, but that's just a conjecture at this point.\n\n**TL;DR**\nThe new protobuf mechanism doesn't actually solve this problem. Installing tensorflow in a non-standard location seems to cause protobuf imports to fail regardless of how or where.\n"}