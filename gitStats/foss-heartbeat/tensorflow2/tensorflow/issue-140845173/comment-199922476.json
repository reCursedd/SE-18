{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/199922476", "html_url": "https://github.com/tensorflow/tensorflow/issues/1502#issuecomment-199922476", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1502", "id": 199922476, "node_id": "MDEyOklzc3VlQ29tbWVudDE5OTkyMjQ3Ng==", "user": {"login": "benoitsteiner", "id": 6969686, "node_id": "MDQ6VXNlcjY5Njk2ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6969686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benoitsteiner", "html_url": "https://github.com/benoitsteiner", "followers_url": "https://api.github.com/users/benoitsteiner/followers", "following_url": "https://api.github.com/users/benoitsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/benoitsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/benoitsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benoitsteiner/subscriptions", "organizations_url": "https://api.github.com/users/benoitsteiner/orgs", "repos_url": "https://api.github.com/users/benoitsteiner/repos", "events_url": "https://api.github.com/users/benoitsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/benoitsteiner/received_events", "type": "User", "site_admin": false}, "created_at": "2016-03-22T17:31:34Z", "updated_at": "2016-03-22T17:31:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In the first case (reduction axes = [0, 1, 2]) we have an optimized implementation leverages the gpu fairly well. In the second case (reduction axes = [0, 2, 3]), we use a basic approach that currently leverages few cuda threads to perform the reduction. This is why the second case is much slower. I'll see what can be done to improve the second case.</p>", "body_text": "In the first case (reduction axes = [0, 1, 2]) we have an optimized implementation leverages the gpu fairly well. In the second case (reduction axes = [0, 2, 3]), we use a basic approach that currently leverages few cuda threads to perform the reduction. This is why the second case is much slower. I'll see what can be done to improve the second case.", "body": "In the first case (reduction axes = [0, 1, 2]) we have an optimized implementation leverages the gpu fairly well. In the second case (reduction axes = [0, 2, 3]), we use a basic approach that currently leverages few cuda threads to perform the reduction. This is why the second case is much slower. I'll see what can be done to improve the second case.\n"}