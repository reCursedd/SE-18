{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/280391305", "html_url": "https://github.com/tensorflow/tensorflow/pull/7387#issuecomment-280391305", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7387", "id": 280391305, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDM5MTMwNQ==", "user": {"login": "jihunchoi", "id": 1898501, "node_id": "MDQ6VXNlcjE4OTg1MDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1898501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jihunchoi", "html_url": "https://github.com/jihunchoi", "followers_url": "https://api.github.com/users/jihunchoi/followers", "following_url": "https://api.github.com/users/jihunchoi/following{/other_user}", "gists_url": "https://api.github.com/users/jihunchoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/jihunchoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jihunchoi/subscriptions", "organizations_url": "https://api.github.com/users/jihunchoi/orgs", "repos_url": "https://api.github.com/users/jihunchoi/repos", "events_url": "https://api.github.com/users/jihunchoi/events{/privacy}", "received_events_url": "https://api.github.com/users/jihunchoi/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-16T17:00:14Z", "updated_at": "2017-02-16T17:00:14Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I updated the codes as you suggested, but there are some differences to keep its coverage on shape checks before evaluated.<br>\nSpecifically, I modified the codes in the below ways:</p>\n<ol>\n<li>Instead of calling <code>get_shape()</code>, I added <code>_get_shape()</code> helper function that returns a result of <code>get_shape().to_list()</code> if the result does not contain <code>None</code> values, and else the helper function explicitly queries the dimension value using <code>array_ops.shape</code> function.</li>\n<li><code>_total_size</code> helper function is not deleted but modified a bit. Previously it returned <code>-1</code> if the shape contains <code>None</code> dimensions. I modified the function not to return <code>-1</code> even when some of dimensions are unknown.<br>\nIf the shape is fully known, it returns an integer, and if the shape contains unknown dimensions, it returns a scalar tensor.<br>\nThe reason I didn't obtain the total size by using just <code>math_ops.reduce_prod</code> is to keep its capability to check the shape before actually evaluated if available. (See <code>test_dim_mismatch</code> test.)</li>\n</ol>", "body_text": "I updated the codes as you suggested, but there are some differences to keep its coverage on shape checks before evaluated.\nSpecifically, I modified the codes in the below ways:\n\nInstead of calling get_shape(), I added _get_shape() helper function that returns a result of get_shape().to_list() if the result does not contain None values, and else the helper function explicitly queries the dimension value using array_ops.shape function.\n_total_size helper function is not deleted but modified a bit. Previously it returned -1 if the shape contains None dimensions. I modified the function not to return -1 even when some of dimensions are unknown.\nIf the shape is fully known, it returns an integer, and if the shape contains unknown dimensions, it returns a scalar tensor.\nThe reason I didn't obtain the total size by using just math_ops.reduce_prod is to keep its capability to check the shape before actually evaluated if available. (See test_dim_mismatch test.)", "body": "I updated the codes as you suggested, but there are some differences to keep its coverage on shape checks before evaluated.\r\nSpecifically, I modified the codes in the below ways:\r\n1) Instead of calling `get_shape()`, I added `_get_shape()` helper function that returns a result of `get_shape().to_list()` if the result does not contain `None` values, and else the helper function explicitly queries the dimension value using `array_ops.shape` function.\r\n2) `_total_size` helper function is not deleted but modified a bit. Previously it returned `-1` if the shape contains `None` dimensions. I modified the function not to return `-1` even when some of dimensions are unknown.\r\nIf the shape is fully known, it returns an integer, and if the shape contains unknown dimensions, it returns a scalar tensor.\r\nThe reason I didn't obtain the total size by using just `math_ops.reduce_prod` is to keep its capability to check the shape before actually evaluated if available. (See `test_dim_mismatch` test.)"}