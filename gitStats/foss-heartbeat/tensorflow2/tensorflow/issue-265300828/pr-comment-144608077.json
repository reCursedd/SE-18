{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/144608077", "pull_request_review_id": 69291103, "id": 144608077, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDYwODA3Nw==", "diff_hunk": "@@ -1,115 +1,75 @@\n # TensorFlow Builds\n \n-This directory contains all the files and setup instructions to run all\n-the important builds and tests. **You can trivially run it yourself!** It also\n-run continuous integration [ci.tensorflow.org](https://ci.tensorflow.org).\n-\n-\n+This directory contains all the files and setup instructions to run all the\n+important builds and tests. You can run it yourself!\n \n ## Run It Yourself\n \n-1. Install [Docker](http://www.docker.com/). Follow instructions\n-   [on the Docker site](https://docs.docker.com/installation/).\n-\n-   You can run all the jobs **without docker** if you are on mac or on linux\n-   and you just don't want docker. Just install all the dependencies from\n-   [Installing TensorFlow](https://www.tensorflow.org/install/).\n-   Then run any of the one liners below without the\n-   `tensorflow/tools/ci_build/ci_build.sh` in them.\n-\n-2. Clone tensorflow repository.\n-\n-   ```bash\n-   git clone https://github.com/tensorflow/tensorflow.git\n-   ```\n-\n-3. Go to tensorflow directory\n-\n-   ```bash\n-   cd tensorflow\n-   ```\n-\n-4. Build what you want, for example\n-\n-   ```bash\n-   tensorflow/tools/ci_build/ci_build.sh CPU bazel test //tensorflow/...\n-   ```\n-   If you are using the Docker image on Windows or OS X, the Docker VM's default\n-   memory limit may be too low to build TensorFlow. This can result in\n-   strange-looking errors, e.g. the compilation may fail with `gcc: internal\n-   compiler error: Killed (program cc1plus)`. Try increasing the memory limit in\n-   the Docker preferences.\n-\n-\n-## Jobs\n-\n-The jobs run by [ci.tensorflow.org](https://ci.tensorflow.org) include following:\n-\n-```bash\n-# Note: You can run the following one-liners yourself if you have Docker. Run\n-# without `tensorflow/tools/ci_build/ci_build.sh` on mac or linux without Docker.\n-\n-# build and run cpu tests\n-tensorflow/tools/ci_build/ci_build.sh CPU bazel test //tensorflow/...\n+You have two options when running TensorFlow tests locally on your\n+machine. First, using docker, you can run our Continuous Integration\n+(CI) scripts on tensorflow devel images. The other option is to install\n+all TensorFlow dependencies on your machine and run the scripts\n+natively on your system.\n \n-# build and run gpu tests (note if you get unstable results you may be running\n-# out of gpu memory - if so add \"--jobs=1\" argument)\n-tensorflow/tools/ci_build/ci_build.sh GPU bazel test -c opt --config=cuda //tensorflow/...\n+### Run TensorFlow CI Scripts using Docker\n \n-# build pip with gpu support\n-tensorflow/tools/ci_build/ci_build.sh GPU tensorflow/tools/ci_build/builds/pip.sh GPU -c opt --config=cuda\n+1.\t Install Docker following the [instructions on the docker website](https://docs.docker.com/engine/installation/).\n \n-# build and run gpu tests using python 3\n-CI_DOCKER_EXTRA_PARAMS=\"-e CI_BUILD_PYTHON=python3\" tensorflow/tools/ci_build/ci_build.sh GPU tensorflow/tools/ci_build/builds/pip.sh GPU -c opt --config=cuda\n+2.\t Start a container with one of the devel images here:\n+    https://hub.docker.com/r/tensorflow/tensorflow/tags/.\n \n-# build android example app\n-tensorflow/tools/ci_build/ci_build.sh ANDROID tensorflow/tools/ci_build/builds/android.sh\n+3.  Based on your choice of the image, pick one of the scripts under\n+    https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/ci_build/linux\n+    and run them from the TensorFlow repository root.\n \n-# cmake cpu build and test\n-tensorflow/tools/ci_build/ci_build.sh CPU tensorflow/tools/ci_build/builds/cmake.sh\n+### Run TF CI Scripts Natively on your Machine\n \n-# run bash inside the container\n-CI_DOCKER_EXTRA_PARAMS='-it --rm' tensorflow/tools/ci_build/ci_build.sh CPU /bin/bash\n-```\n+1.  Perform all the steps at https://www.tensorflow.org/install/", "path": "tensorflow/tools/ci_build/README.md", "position": null, "original_position": 89, "commit_id": "b6098f33e1f35e22c63d6357a084b54480459cb2", "original_commit_id": "3f6a30e296b22496a6d0f115ac9c71f2060ad2af", "user": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "body": "Sorry for not catching this earlier. Let's make this a little more explicit:\r\n\r\n\"Follow all the instructions at https://www.tensorflow.org/install/install_sources up until the section \"Installing TensorFlow from Sources\r\n\r\nThis guide explains how to build TensorFlow sources into a TensorFlow binary and how to install that TensorFlow binary. Note that we provide well-tested, pre-built TensorFlow binaries for Linux, Mac, and Windows systems. In addition, there are pre-built TensorFlow docker images. So, don't build a TensorFlow binary yourself unless you are very comfortable building complex packages from source and dealing with the inevitable aftermath should things not go exactly as documented.\r\n\r\nIf the last paragraph didn't scare you off, welcome. This guide explains how to build TensorFlow on the following operating systems:\r\n\r\nUbuntu\r\nMac OS X\r\nWe don't officially support building TensorFlow on Windows; however, you may try to build TensorFlow on Windows if you don't mind using the highly experimental Bazel on Windows or TensorFlow CMake build.\r\n\r\nDetermine which TensorFlow to install\r\n\r\nYou must choose one of the following types of TensorFlow to build and install:\r\n\r\nTensorFlow with CPU support only. If your system does not have a NVIDIA\u00ae GPU, build and install this version. Note that this version of TensorFlow is typically easier to build and install, so even if you have an NVIDIA GPU, we recommend building and installing this version first.\r\nTensorFlow with GPU support. TensorFlow programs typically run significantly faster on a GPU than on a CPU. Therefore, if your system has a NVIDIA GPU and you need to run performance-critical applications, you should ultimately build and install this version. Beyond the NVIDIA GPU itself, your system must also fulfill the NVIDIA software requirements described in one of the following documents:\r\nInstalling TensorFlow on Ubuntu\r\nInstalling TensorFlow on Mac OS\r\nClone the TensorFlow repository\r\n\r\nStart the process of building TensorFlow by cloning a TensorFlow repository.\r\n\r\nTo clone the latest TensorFlow repository, issue the following command:\r\n\r\n$ git clone https://github.com/tensorflow/tensorflow \r\nThe preceding git clone command creates a subdirectory named tensorflow. After cloning, you may optionally build a specific branch (such as a release branch) by invoking the following commands:\r\n\r\n$ cd tensorflow\r\n$ git checkout Branch # where Branch is the desired branch\r\nFor example, to work with the r1.0 release instead of the master release, issue the following command:\r\n\r\n$ git checkout r1.0\r\nNext, you must prepare your environment for Linux or Mac OS\r\n\r\n\r\nPrepare environment for Linux\r\n\r\nBefore building TensorFlow on Linux, install the following build tools on your system:\r\n\r\nbazel\r\nTensorFlow Python dependencies\r\noptionally, NVIDIA packages to support TensorFlow for GPU.\r\nInstall Bazel\r\n\r\nIf bazel is not installed on your system, install it now by following these directions.\r\n\r\nInstall TensorFlow Python dependencies\r\n\r\nTo install TensorFlow, you must install the following packages:\r\n\r\nnumpy, which is a numerical processing package that TensorFlow requires.\r\ndev, which enables adding extensions to Python.\r\npip, which enables you to install and manage certain Python packages.\r\nwheel, which enables you to manage Python compressed packages in the wheel (.whl) format.\r\nTo install these packages for Python 2.7, issue the following command:\r\n\r\n$ sudo apt-get install python-numpy python-dev python-pip python-wheel\r\nTo install these packages for Python 3.n, issue the following command:\r\n\r\n$ sudo apt-get install python3-numpy python3-dev python3-pip python3-wheel\r\nOptional: install TensorFlow for GPU prerequisites\r\n\r\nIf you are building TensorFlow without GPU support, skip this section.\r\n\r\nThe following NVIDIA hardware must be installed on your system:\r\n\r\nGPU card with CUDA Compute Capability 3.0 or higher. See NVIDIA documentation for a list of supported GPU cards.\r\nThe following NVIDIA software must be installed on your system:\r\n\r\nNVIDIA's Cuda Toolkit (>= 7.0). We recommend version 8.0. For details, see NVIDIA's documentation. Ensure that you append the relevant Cuda pathnames to the LD_LIBRARY_PATH environment variable as described in the NVIDIA documentation.\r\nThe NVIDIA drivers associated with NVIDIA's Cuda Toolkit.\r\ncuDNN (>= v3). We recommend version 5.1. For details, see NVIDIA's documentation, particularly the description of appending the appropriate pathname to your LD_LIBRARY_PATH environment variable.\r\nFinally, you must also install libcupti-dev by invoking the following command:\r\n\r\n $ sudo apt-get install libcupti-dev \r\nNext\r\n\r\nAfter preparing the environment, you must now configure the installation.\r\n\r\n\r\nPrepare environment for Mac OS\r\n\r\nBefore building TensorFlow, you must install the following on your system:\r\n\r\nbazel\r\nTensorFlow Python dependencies.\r\noptionally, NVIDIA packages to support TensorFlow for GPU.\r\nInstall bazel\r\n\r\nIf bazel is not installed on your system, install it now by following these directions.\r\n\r\nInstall python dependencies\r\n\r\nTo install TensorFlow, you must install the following packages:\r\n\r\nsix\r\nnumpy, which is a numerical processing package that TensorFlow requires.\r\nwheel, which enables you to manage Python compressed packages in the wheel (.whl) format.\r\nYou may install the python dependencies using pip. If you don't have pip on your machine, we recommend using homebrew to install Python and pip as documented here. If you follow these instructions, you will not need to disable SIP.\r\n\r\nAfter installing pip, invoke the following commands:\r\n\r\n $ sudo pip install six numpy wheel \r\nOptional: install TensorFlow for GPU prerequisites\r\n\r\nIf you do not have brew installed, install it by following these instructions.\r\n\r\nAfter installing brew, install GNU coreutils by issuing the following command:\r\n\r\n$ brew install coreutils\r\nIf you want to compile tensorflow and have XCode 7.3 and CUDA 7.5 installed, note that Xcode 7.3 is not yet compatible with CUDA 7.5. To remedy this problem, do either of the following:\r\n\r\nUpgrade to CUDA 8.0.\r\nDownload Xcode 7.2 and select it as your default by issuing the following command:\r\n\r\n $ sudo xcode-select -s /Application/Xcode-7.2/Xcode.app\r\nNOTE: Your system must fulfill the NVIDIA software requirements described in one of the following documents:\r\n\r\nInstalling TensorFlow on Linux\r\nInstalling TensorFlow on Mac OS\r\n\r\nConfigure the installation\r\n\r\nThe root of the source tree contains a bash script named configure. This script asks you to identify the pathname of all relevant TensorFlow dependencies and specify other build configuration options such as compiler flags. You must run this script prior to creating the pip package and installing TensorFlow.\r\n\r\nIf you wish to build TensorFlow with GPU, configure will ask you to specify the version numbers of Cuda and cuDNN. If several versions of Cuda or cuDNN are installed on your system, explicitly select the desired version instead of relying on the default.\r\n\r\nOne of the questions that configure will ask is as follows:\r\n\r\nPlease specify optimization flags to use during compilation when bazel option \"--config=opt\" is specified [Default is -march=native]\r\nThis question refers to a later phase in which you'll use bazel to build the pip package. We recommend accepting the default (-march=native), which will optimize the generated code for your local machine's CPU type. However, if you are building TensorFlow on one CPU type but will run TensorFlow on a different CPU type, then consider specifying a more specific optimization flag as described in the gcc documentation.\r\n\r\nHere is an example execution of the configure script. Note that your own input will likely differ from our sample input:\r\n\r\n$ cd tensorflow  # cd to the top-level directory created\r\n$ ./configure\r\nPlease specify the location of python. [Default is /usr/bin/python]: /usr/bin/python2.7\r\nFound possible Python library paths:\r\n  /usr/local/lib/python2.7/dist-packages\r\n  /usr/lib/python2.7/dist-packages\r\nPlease input the desired Python library path to use.  Default is [/usr/lib/python2.7/dist-packages]\r\n\r\nUsing python library path: /usr/local/lib/python2.7/dist-packages\r\nDo you wish to build TensorFlow with MKL support? [y/N]\r\nNo MKL support will be enabled for TensorFlow\r\nPlease specify optimization flags to use during compilation when bazel option \"--config=opt\" is specified [Default is -march=native]:\r\nDo you wish to use jemalloc as the malloc implementation? [Y/n]\r\njemalloc enabled\r\nDo you wish to build TensorFlow with Google Cloud Platform support? [y/N]\r\nNo Google Cloud Platform support will be enabled for TensorFlow\r\nDo you wish to build TensorFlow with Hadoop File System support? [y/N]\r\nNo Hadoop File System support will be enabled for TensorFlow\r\nDo you wish to build TensorFlow with the XLA just-in-time compiler (experimental)? [y/N]\r\nNo XLA support will be enabled for TensorFlow\r\nDo you wish to build TensorFlow with VERBS support? [y/N]\r\nNo VERBS support will be enabled for TensorFlow\r\nDo you wish to build TensorFlow with OpenCL support? [y/N]\r\nNo OpenCL support will be enabled for TensorFlow\r\nDo you wish to build TensorFlow with CUDA support? [y/N] Y\r\nCUDA support will be enabled for TensorFlow\r\nDo you want to use clang as CUDA compiler? [y/N]\r\nnvcc will be used as CUDA compiler\r\nPlease specify the Cuda SDK version you want to use, e.g. 7.0. [Leave empty to default to CUDA 8.0]: 8.0\r\nPlease specify the location where CUDA 8.0 toolkit is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:\r\nPlease specify which gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]:\r\nPlease specify the cuDNN version you want to use. [Leave empty to default to cuDNN 6.0]: 6\r\nPlease specify the location where cuDNN 6 library is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:\r\nPlease specify a list of comma-separated Cuda compute capabilities you want to build with.\r\nYou can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.\r\nPlease note that each additional compute capability significantly increases your build time and binary size.\r\n[Default is: \"3.5,5.2\"]: 3.0\r\nDo you wish to build TensorFlow with MPI support? [y/N] \r\nMPI support will not be enabled for TensorFlow\r\nConfiguration finished\r\nIf you told configure to build for GPU support, then configure will create a canonical set of symbolic links to the Cuda libraries on your system. Therefore, every time you change the Cuda library paths, you must rerun the configure script before re-invoking the bazel build command.\r\n\r\nNote the following:\r\n\r\nAlthough it is possible to build both Cuda and non-Cuda configs under the same source tree, we recommend running bazel clean when switching between these two configurations in the same source tree.\r\nIf you don't run the configure script before running the bazel build command, the bazel build command will fail.\r\n\"Build the pip package\"", "created_at": "2017-10-13T17:06:48Z", "updated_at": "2017-10-16T21:23:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13688#discussion_r144608077", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13688", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/144608077"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13688#discussion_r144608077"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13688"}}, "body_html": "<p>Sorry for not catching this earlier. Let's make this a little more explicit:</p>\n<p>\"Follow all the instructions at <a href=\"https://www.tensorflow.org/install/install_sources\" rel=\"nofollow\">https://www.tensorflow.org/install/install_sources</a> up until the section \"Installing TensorFlow from Sources</p>\n<p>This guide explains how to build TensorFlow sources into a TensorFlow binary and how to install that TensorFlow binary. Note that we provide well-tested, pre-built TensorFlow binaries for Linux, Mac, and Windows systems. In addition, there are pre-built TensorFlow docker images. So, don't build a TensorFlow binary yourself unless you are very comfortable building complex packages from source and dealing with the inevitable aftermath should things not go exactly as documented.</p>\n<p>If the last paragraph didn't scare you off, welcome. This guide explains how to build TensorFlow on the following operating systems:</p>\n<p>Ubuntu<br>\nMac OS X<br>\nWe don't officially support building TensorFlow on Windows; however, you may try to build TensorFlow on Windows if you don't mind using the highly experimental Bazel on Windows or TensorFlow CMake build.</p>\n<p>Determine which TensorFlow to install</p>\n<p>You must choose one of the following types of TensorFlow to build and install:</p>\n<p>TensorFlow with CPU support only. If your system does not have a NVIDIA\u00ae GPU, build and install this version. Note that this version of TensorFlow is typically easier to build and install, so even if you have an NVIDIA GPU, we recommend building and installing this version first.<br>\nTensorFlow with GPU support. TensorFlow programs typically run significantly faster on a GPU than on a CPU. Therefore, if your system has a NVIDIA GPU and you need to run performance-critical applications, you should ultimately build and install this version. Beyond the NVIDIA GPU itself, your system must also fulfill the NVIDIA software requirements described in one of the following documents:<br>\nInstalling TensorFlow on Ubuntu<br>\nInstalling TensorFlow on Mac OS<br>\nClone the TensorFlow repository</p>\n<p>Start the process of building TensorFlow by cloning a TensorFlow repository.</p>\n<p>To clone the latest TensorFlow repository, issue the following command:</p>\n<p>$ git clone <a href=\"https://github.com/tensorflow/tensorflow\">https://github.com/tensorflow/tensorflow</a><br>\nThe preceding git clone command creates a subdirectory named tensorflow. After cloning, you may optionally build a specific branch (such as a release branch) by invoking the following commands:</p>\n<p>$ cd tensorflow<br>\n$ git checkout Branch # where Branch is the desired branch<br>\nFor example, to work with the r1.0 release instead of the master release, issue the following command:</p>\n<p>$ git checkout r1.0<br>\nNext, you must prepare your environment for Linux or Mac OS</p>\n<p>Prepare environment for Linux</p>\n<p>Before building TensorFlow on Linux, install the following build tools on your system:</p>\n<p>bazel<br>\nTensorFlow Python dependencies<br>\noptionally, NVIDIA packages to support TensorFlow for GPU.<br>\nInstall Bazel</p>\n<p>If bazel is not installed on your system, install it now by following these directions.</p>\n<p>Install TensorFlow Python dependencies</p>\n<p>To install TensorFlow, you must install the following packages:</p>\n<p>numpy, which is a numerical processing package that TensorFlow requires.<br>\ndev, which enables adding extensions to Python.<br>\npip, which enables you to install and manage certain Python packages.<br>\nwheel, which enables you to manage Python compressed packages in the wheel (.whl) format.<br>\nTo install these packages for Python 2.7, issue the following command:</p>\n<p>$ sudo apt-get install python-numpy python-dev python-pip python-wheel<br>\nTo install these packages for Python 3.n, issue the following command:</p>\n<p>$ sudo apt-get install python3-numpy python3-dev python3-pip python3-wheel<br>\nOptional: install TensorFlow for GPU prerequisites</p>\n<p>If you are building TensorFlow without GPU support, skip this section.</p>\n<p>The following NVIDIA hardware must be installed on your system:</p>\n<p>GPU card with CUDA Compute Capability 3.0 or higher. See NVIDIA documentation for a list of supported GPU cards.<br>\nThe following NVIDIA software must be installed on your system:</p>\n<p>NVIDIA's Cuda Toolkit (&gt;= 7.0). We recommend version 8.0. For details, see NVIDIA's documentation. Ensure that you append the relevant Cuda pathnames to the LD_LIBRARY_PATH environment variable as described in the NVIDIA documentation.<br>\nThe NVIDIA drivers associated with NVIDIA's Cuda Toolkit.<br>\ncuDNN (&gt;= v3). We recommend version 5.1. For details, see NVIDIA's documentation, particularly the description of appending the appropriate pathname to your LD_LIBRARY_PATH environment variable.<br>\nFinally, you must also install libcupti-dev by invoking the following command:</p>\n<p>$ sudo apt-get install libcupti-dev<br>\nNext</p>\n<p>After preparing the environment, you must now configure the installation.</p>\n<p>Prepare environment for Mac OS</p>\n<p>Before building TensorFlow, you must install the following on your system:</p>\n<p>bazel<br>\nTensorFlow Python dependencies.<br>\noptionally, NVIDIA packages to support TensorFlow for GPU.<br>\nInstall bazel</p>\n<p>If bazel is not installed on your system, install it now by following these directions.</p>\n<p>Install python dependencies</p>\n<p>To install TensorFlow, you must install the following packages:</p>\n<p>six<br>\nnumpy, which is a numerical processing package that TensorFlow requires.<br>\nwheel, which enables you to manage Python compressed packages in the wheel (.whl) format.<br>\nYou may install the python dependencies using pip. If you don't have pip on your machine, we recommend using homebrew to install Python and pip as documented here. If you follow these instructions, you will not need to disable SIP.</p>\n<p>After installing pip, invoke the following commands:</p>\n<p>$ sudo pip install six numpy wheel<br>\nOptional: install TensorFlow for GPU prerequisites</p>\n<p>If you do not have brew installed, install it by following these instructions.</p>\n<p>After installing brew, install GNU coreutils by issuing the following command:</p>\n<p>$ brew install coreutils<br>\nIf you want to compile tensorflow and have XCode 7.3 and CUDA 7.5 installed, note that Xcode 7.3 is not yet compatible with CUDA 7.5. To remedy this problem, do either of the following:</p>\n<p>Upgrade to CUDA 8.0.<br>\nDownload Xcode 7.2 and select it as your default by issuing the following command:</p>\n<p>$ sudo xcode-select -s /Application/Xcode-7.2/Xcode.app<br>\nNOTE: Your system must fulfill the NVIDIA software requirements described in one of the following documents:</p>\n<p>Installing TensorFlow on Linux<br>\nInstalling TensorFlow on Mac OS</p>\n<p>Configure the installation</p>\n<p>The root of the source tree contains a bash script named configure. This script asks you to identify the pathname of all relevant TensorFlow dependencies and specify other build configuration options such as compiler flags. You must run this script prior to creating the pip package and installing TensorFlow.</p>\n<p>If you wish to build TensorFlow with GPU, configure will ask you to specify the version numbers of Cuda and cuDNN. If several versions of Cuda or cuDNN are installed on your system, explicitly select the desired version instead of relying on the default.</p>\n<p>One of the questions that configure will ask is as follows:</p>\n<p>Please specify optimization flags to use during compilation when bazel option \"--config=opt\" is specified [Default is -march=native]<br>\nThis question refers to a later phase in which you'll use bazel to build the pip package. We recommend accepting the default (-march=native), which will optimize the generated code for your local machine's CPU type. However, if you are building TensorFlow on one CPU type but will run TensorFlow on a different CPU type, then consider specifying a more specific optimization flag as described in the gcc documentation.</p>\n<p>Here is an example execution of the configure script. Note that your own input will likely differ from our sample input:</p>\n<p>$ cd tensorflow  # cd to the top-level directory created<br>\n$ ./configure<br>\nPlease specify the location of python. [Default is /usr/bin/python]: /usr/bin/python2.7<br>\nFound possible Python library paths:<br>\n/usr/local/lib/python2.7/dist-packages<br>\n/usr/lib/python2.7/dist-packages<br>\nPlease input the desired Python library path to use.  Default is [/usr/lib/python2.7/dist-packages]</p>\n<p>Using python library path: /usr/local/lib/python2.7/dist-packages<br>\nDo you wish to build TensorFlow with MKL support? [y/N]<br>\nNo MKL support will be enabled for TensorFlow<br>\nPlease specify optimization flags to use during compilation when bazel option \"--config=opt\" is specified [Default is -march=native]:<br>\nDo you wish to use jemalloc as the malloc implementation? [Y/n]<br>\njemalloc enabled<br>\nDo you wish to build TensorFlow with Google Cloud Platform support? [y/N]<br>\nNo Google Cloud Platform support will be enabled for TensorFlow<br>\nDo you wish to build TensorFlow with Hadoop File System support? [y/N]<br>\nNo Hadoop File System support will be enabled for TensorFlow<br>\nDo you wish to build TensorFlow with the XLA just-in-time compiler (experimental)? [y/N]<br>\nNo XLA support will be enabled for TensorFlow<br>\nDo you wish to build TensorFlow with VERBS support? [y/N]<br>\nNo VERBS support will be enabled for TensorFlow<br>\nDo you wish to build TensorFlow with OpenCL support? [y/N]<br>\nNo OpenCL support will be enabled for TensorFlow<br>\nDo you wish to build TensorFlow with CUDA support? [y/N] Y<br>\nCUDA support will be enabled for TensorFlow<br>\nDo you want to use clang as CUDA compiler? [y/N]<br>\nnvcc will be used as CUDA compiler<br>\nPlease specify the Cuda SDK version you want to use, e.g. 7.0. [Leave empty to default to CUDA 8.0]: 8.0<br>\nPlease specify the location where CUDA 8.0 toolkit is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:<br>\nPlease specify which gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]:<br>\nPlease specify the cuDNN version you want to use. [Leave empty to default to cuDNN 6.0]: 6<br>\nPlease specify the location where cuDNN 6 library is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:<br>\nPlease specify a list of comma-separated Cuda compute capabilities you want to build with.<br>\nYou can find the compute capability of your device at: <a href=\"https://developer.nvidia.com/cuda-gpus\" rel=\"nofollow\">https://developer.nvidia.com/cuda-gpus</a>.<br>\nPlease note that each additional compute capability significantly increases your build time and binary size.<br>\n[Default is: \"3.5,5.2\"]: 3.0<br>\nDo you wish to build TensorFlow with MPI support? [y/N]<br>\nMPI support will not be enabled for TensorFlow<br>\nConfiguration finished<br>\nIf you told configure to build for GPU support, then configure will create a canonical set of symbolic links to the Cuda libraries on your system. Therefore, every time you change the Cuda library paths, you must rerun the configure script before re-invoking the bazel build command.</p>\n<p>Note the following:</p>\n<p>Although it is possible to build both Cuda and non-Cuda configs under the same source tree, we recommend running bazel clean when switching between these two configurations in the same source tree.<br>\nIf you don't run the configure script before running the bazel build command, the bazel build command will fail.<br>\n\"Build the pip package\"</p>", "body_text": "Sorry for not catching this earlier. Let's make this a little more explicit:\n\"Follow all the instructions at https://www.tensorflow.org/install/install_sources up until the section \"Installing TensorFlow from Sources\nThis guide explains how to build TensorFlow sources into a TensorFlow binary and how to install that TensorFlow binary. Note that we provide well-tested, pre-built TensorFlow binaries for Linux, Mac, and Windows systems. In addition, there are pre-built TensorFlow docker images. So, don't build a TensorFlow binary yourself unless you are very comfortable building complex packages from source and dealing with the inevitable aftermath should things not go exactly as documented.\nIf the last paragraph didn't scare you off, welcome. This guide explains how to build TensorFlow on the following operating systems:\nUbuntu\nMac OS X\nWe don't officially support building TensorFlow on Windows; however, you may try to build TensorFlow on Windows if you don't mind using the highly experimental Bazel on Windows or TensorFlow CMake build.\nDetermine which TensorFlow to install\nYou must choose one of the following types of TensorFlow to build and install:\nTensorFlow with CPU support only. If your system does not have a NVIDIA\u00ae GPU, build and install this version. Note that this version of TensorFlow is typically easier to build and install, so even if you have an NVIDIA GPU, we recommend building and installing this version first.\nTensorFlow with GPU support. TensorFlow programs typically run significantly faster on a GPU than on a CPU. Therefore, if your system has a NVIDIA GPU and you need to run performance-critical applications, you should ultimately build and install this version. Beyond the NVIDIA GPU itself, your system must also fulfill the NVIDIA software requirements described in one of the following documents:\nInstalling TensorFlow on Ubuntu\nInstalling TensorFlow on Mac OS\nClone the TensorFlow repository\nStart the process of building TensorFlow by cloning a TensorFlow repository.\nTo clone the latest TensorFlow repository, issue the following command:\n$ git clone https://github.com/tensorflow/tensorflow\nThe preceding git clone command creates a subdirectory named tensorflow. After cloning, you may optionally build a specific branch (such as a release branch) by invoking the following commands:\n$ cd tensorflow\n$ git checkout Branch # where Branch is the desired branch\nFor example, to work with the r1.0 release instead of the master release, issue the following command:\n$ git checkout r1.0\nNext, you must prepare your environment for Linux or Mac OS\nPrepare environment for Linux\nBefore building TensorFlow on Linux, install the following build tools on your system:\nbazel\nTensorFlow Python dependencies\noptionally, NVIDIA packages to support TensorFlow for GPU.\nInstall Bazel\nIf bazel is not installed on your system, install it now by following these directions.\nInstall TensorFlow Python dependencies\nTo install TensorFlow, you must install the following packages:\nnumpy, which is a numerical processing package that TensorFlow requires.\ndev, which enables adding extensions to Python.\npip, which enables you to install and manage certain Python packages.\nwheel, which enables you to manage Python compressed packages in the wheel (.whl) format.\nTo install these packages for Python 2.7, issue the following command:\n$ sudo apt-get install python-numpy python-dev python-pip python-wheel\nTo install these packages for Python 3.n, issue the following command:\n$ sudo apt-get install python3-numpy python3-dev python3-pip python3-wheel\nOptional: install TensorFlow for GPU prerequisites\nIf you are building TensorFlow without GPU support, skip this section.\nThe following NVIDIA hardware must be installed on your system:\nGPU card with CUDA Compute Capability 3.0 or higher. See NVIDIA documentation for a list of supported GPU cards.\nThe following NVIDIA software must be installed on your system:\nNVIDIA's Cuda Toolkit (>= 7.0). We recommend version 8.0. For details, see NVIDIA's documentation. Ensure that you append the relevant Cuda pathnames to the LD_LIBRARY_PATH environment variable as described in the NVIDIA documentation.\nThe NVIDIA drivers associated with NVIDIA's Cuda Toolkit.\ncuDNN (>= v3). We recommend version 5.1. For details, see NVIDIA's documentation, particularly the description of appending the appropriate pathname to your LD_LIBRARY_PATH environment variable.\nFinally, you must also install libcupti-dev by invoking the following command:\n$ sudo apt-get install libcupti-dev\nNext\nAfter preparing the environment, you must now configure the installation.\nPrepare environment for Mac OS\nBefore building TensorFlow, you must install the following on your system:\nbazel\nTensorFlow Python dependencies.\noptionally, NVIDIA packages to support TensorFlow for GPU.\nInstall bazel\nIf bazel is not installed on your system, install it now by following these directions.\nInstall python dependencies\nTo install TensorFlow, you must install the following packages:\nsix\nnumpy, which is a numerical processing package that TensorFlow requires.\nwheel, which enables you to manage Python compressed packages in the wheel (.whl) format.\nYou may install the python dependencies using pip. If you don't have pip on your machine, we recommend using homebrew to install Python and pip as documented here. If you follow these instructions, you will not need to disable SIP.\nAfter installing pip, invoke the following commands:\n$ sudo pip install six numpy wheel\nOptional: install TensorFlow for GPU prerequisites\nIf you do not have brew installed, install it by following these instructions.\nAfter installing brew, install GNU coreutils by issuing the following command:\n$ brew install coreutils\nIf you want to compile tensorflow and have XCode 7.3 and CUDA 7.5 installed, note that Xcode 7.3 is not yet compatible with CUDA 7.5. To remedy this problem, do either of the following:\nUpgrade to CUDA 8.0.\nDownload Xcode 7.2 and select it as your default by issuing the following command:\n$ sudo xcode-select -s /Application/Xcode-7.2/Xcode.app\nNOTE: Your system must fulfill the NVIDIA software requirements described in one of the following documents:\nInstalling TensorFlow on Linux\nInstalling TensorFlow on Mac OS\nConfigure the installation\nThe root of the source tree contains a bash script named configure. This script asks you to identify the pathname of all relevant TensorFlow dependencies and specify other build configuration options such as compiler flags. You must run this script prior to creating the pip package and installing TensorFlow.\nIf you wish to build TensorFlow with GPU, configure will ask you to specify the version numbers of Cuda and cuDNN. If several versions of Cuda or cuDNN are installed on your system, explicitly select the desired version instead of relying on the default.\nOne of the questions that configure will ask is as follows:\nPlease specify optimization flags to use during compilation when bazel option \"--config=opt\" is specified [Default is -march=native]\nThis question refers to a later phase in which you'll use bazel to build the pip package. We recommend accepting the default (-march=native), which will optimize the generated code for your local machine's CPU type. However, if you are building TensorFlow on one CPU type but will run TensorFlow on a different CPU type, then consider specifying a more specific optimization flag as described in the gcc documentation.\nHere is an example execution of the configure script. Note that your own input will likely differ from our sample input:\n$ cd tensorflow  # cd to the top-level directory created\n$ ./configure\nPlease specify the location of python. [Default is /usr/bin/python]: /usr/bin/python2.7\nFound possible Python library paths:\n/usr/local/lib/python2.7/dist-packages\n/usr/lib/python2.7/dist-packages\nPlease input the desired Python library path to use.  Default is [/usr/lib/python2.7/dist-packages]\nUsing python library path: /usr/local/lib/python2.7/dist-packages\nDo you wish to build TensorFlow with MKL support? [y/N]\nNo MKL support will be enabled for TensorFlow\nPlease specify optimization flags to use during compilation when bazel option \"--config=opt\" is specified [Default is -march=native]:\nDo you wish to use jemalloc as the malloc implementation? [Y/n]\njemalloc enabled\nDo you wish to build TensorFlow with Google Cloud Platform support? [y/N]\nNo Google Cloud Platform support will be enabled for TensorFlow\nDo you wish to build TensorFlow with Hadoop File System support? [y/N]\nNo Hadoop File System support will be enabled for TensorFlow\nDo you wish to build TensorFlow with the XLA just-in-time compiler (experimental)? [y/N]\nNo XLA support will be enabled for TensorFlow\nDo you wish to build TensorFlow with VERBS support? [y/N]\nNo VERBS support will be enabled for TensorFlow\nDo you wish to build TensorFlow with OpenCL support? [y/N]\nNo OpenCL support will be enabled for TensorFlow\nDo you wish to build TensorFlow with CUDA support? [y/N] Y\nCUDA support will be enabled for TensorFlow\nDo you want to use clang as CUDA compiler? [y/N]\nnvcc will be used as CUDA compiler\nPlease specify the Cuda SDK version you want to use, e.g. 7.0. [Leave empty to default to CUDA 8.0]: 8.0\nPlease specify the location where CUDA 8.0 toolkit is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:\nPlease specify which gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]:\nPlease specify the cuDNN version you want to use. [Leave empty to default to cuDNN 6.0]: 6\nPlease specify the location where cuDNN 6 library is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:\nPlease specify a list of comma-separated Cuda compute capabilities you want to build with.\nYou can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.\nPlease note that each additional compute capability significantly increases your build time and binary size.\n[Default is: \"3.5,5.2\"]: 3.0\nDo you wish to build TensorFlow with MPI support? [y/N]\nMPI support will not be enabled for TensorFlow\nConfiguration finished\nIf you told configure to build for GPU support, then configure will create a canonical set of symbolic links to the Cuda libraries on your system. Therefore, every time you change the Cuda library paths, you must rerun the configure script before re-invoking the bazel build command.\nNote the following:\nAlthough it is possible to build both Cuda and non-Cuda configs under the same source tree, we recommend running bazel clean when switching between these two configurations in the same source tree.\nIf you don't run the configure script before running the bazel build command, the bazel build command will fail.\n\"Build the pip package\""}