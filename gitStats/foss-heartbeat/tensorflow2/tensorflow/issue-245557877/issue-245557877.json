{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11765", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11765/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11765/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11765/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11765", "id": 245557877, "node_id": "MDU6SXNzdWUyNDU1NTc4Nzc=", "number": 11765, "title": "cond with gradients of map_fn hangs", "user": {"login": "wh0", "id": 382796, "node_id": "MDQ6VXNlcjM4Mjc5Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/382796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wh0", "html_url": "https://github.com/wh0", "followers_url": "https://api.github.com/users/wh0/followers", "following_url": "https://api.github.com/users/wh0/following{/other_user}", "gists_url": "https://api.github.com/users/wh0/gists{/gist_id}", "starred_url": "https://api.github.com/users/wh0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wh0/subscriptions", "organizations_url": "https://api.github.com/users/wh0/orgs", "repos_url": "https://api.github.com/users/wh0/repos", "events_url": "https://api.github.com/users/wh0/events{/privacy}", "received_events_url": "https://api.github.com/users/wh0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2017-07-25T22:50:51Z", "updated_at": "2018-10-17T20:55:18Z", "closed_at": "2018-10-17T20:55:17Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04.1</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: <code>('v1.2.0-5-g435cdfc', '1.2.1')</code></li>\n<li><strong>Python version</strong>: 2.7.12</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: 8.0 / 5.1.5</li>\n<li><strong>GPU model and memory</strong>: GeForce GTX 1080, 8113MiB</li>\n<li><strong>Exact command to reproduce</strong>: <code>python test.py</code> (see below)</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Running a <code>cond</code> in which a lambda (even the one that isn't used) includes the <code>gradients</code> of a tensor made by <code>map_fn</code> makes TensorFlow hang. See test.py below for reproduction.</p>\n<p>Doing the <code>gradients</code> outside of the lambda makes it work. See test-workaround.py for example.</p>\n<h3>Source code / logs</h3>\n<p>test.py:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>start<span class=\"pl-pds\">'</span></span>\nnumbers <span class=\"pl-k\">=</span> tf.zeros([<span class=\"pl-c1\">2</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n\nresult <span class=\"pl-k\">=</span> tf.map_fn(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">image</span>: image, numbers)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">get_next_step</span>():\n  objective <span class=\"pl-k\">=</span> result[<span class=\"pl-c1\">0</span>]\n  grads, <span class=\"pl-k\">=</span> tf.gradients(objective, numbers)\n  <span class=\"pl-k\">return</span> numbers <span class=\"pl-k\">+</span> grads\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">current_or_next</span>(<span class=\"pl-smi\">use_next</span>):\n  <span class=\"pl-k\">return</span> tf.cond(use_next,\n                 get_next_step,\n                 <span class=\"pl-k\">lambda</span>: numbers)\n\nalways_old <span class=\"pl-k\">=</span> current_or_next(<span class=\"pl-v\">use_next</span><span class=\"pl-k\">=</span>tf.constant(<span class=\"pl-c1\">False</span>))\n\n<span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>creating session<span class=\"pl-pds\">'</span></span>\nsess <span class=\"pl-k\">=</span> tf.Session()\n<span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>before run<span class=\"pl-pds\">'</span></span>\nsess.run(always_old)\n<span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>after run<span class=\"pl-pds\">'</span></span></pre></div>\n<p>test-workaround.py:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>start<span class=\"pl-pds\">'</span></span>\nnumbers <span class=\"pl-k\">=</span> tf.zeros([<span class=\"pl-c1\">2</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n\nresult <span class=\"pl-k\">=</span> tf.map_fn(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">image</span>: image, numbers)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">get_next_step</span>():\n  objective <span class=\"pl-k\">=</span> result[<span class=\"pl-c1\">0</span>]\n  grads, <span class=\"pl-k\">=</span> tf.gradients(objective, numbers)\n  <span class=\"pl-k\">return</span> numbers <span class=\"pl-k\">+</span> grads\nnext_step <span class=\"pl-k\">=</span> get_next_step() <span class=\"pl-c\"><span class=\"pl-c\">#</span> &lt;--</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">current_or_next</span>(<span class=\"pl-smi\">use_next</span>):\n  <span class=\"pl-k\">return</span> tf.cond(use_next,\n                 <span class=\"pl-k\">lambda</span>: next_step, <span class=\"pl-c\"><span class=\"pl-c\">#</span> &lt;--</span>\n                 <span class=\"pl-k\">lambda</span>: numbers)\n\nalways_old <span class=\"pl-k\">=</span> current_or_next(<span class=\"pl-v\">use_next</span><span class=\"pl-k\">=</span>tf.constant(<span class=\"pl-c1\">False</span>))\n\n<span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>creating session<span class=\"pl-pds\">'</span></span>\nsess <span class=\"pl-k\">=</span> tf.Session()\n<span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>before run<span class=\"pl-pds\">'</span></span>\nsess.run(always_old)\n<span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>after run<span class=\"pl-pds\">'</span></span></pre></div>\n<p>I haven't been able to get a traceback after it hangs.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04.1\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): ('v1.2.0-5-g435cdfc', '1.2.1')\nPython version: 2.7.12\nBazel version (if compiling from source):\nCUDA/cuDNN version: 8.0 / 5.1.5\nGPU model and memory: GeForce GTX 1080, 8113MiB\nExact command to reproduce: python test.py (see below)\n\nDescribe the problem\nRunning a cond in which a lambda (even the one that isn't used) includes the gradients of a tensor made by map_fn makes TensorFlow hang. See test.py below for reproduction.\nDoing the gradients outside of the lambda makes it work. See test-workaround.py for example.\nSource code / logs\ntest.py:\nimport tensorflow as tf\n\nprint 'start'\nnumbers = tf.zeros([2], dtype=tf.float32)\n\nresult = tf.map_fn(lambda image: image, numbers)\n\ndef get_next_step():\n  objective = result[0]\n  grads, = tf.gradients(objective, numbers)\n  return numbers + grads\n\ndef current_or_next(use_next):\n  return tf.cond(use_next,\n                 get_next_step,\n                 lambda: numbers)\n\nalways_old = current_or_next(use_next=tf.constant(False))\n\nprint 'creating session'\nsess = tf.Session()\nprint 'before run'\nsess.run(always_old)\nprint 'after run'\ntest-workaround.py:\nimport tensorflow as tf\n\nprint 'start'\nnumbers = tf.zeros([2], dtype=tf.float32)\n\nresult = tf.map_fn(lambda image: image, numbers)\n\ndef get_next_step():\n  objective = result[0]\n  grads, = tf.gradients(objective, numbers)\n  return numbers + grads\nnext_step = get_next_step() # <--\n\ndef current_or_next(use_next):\n  return tf.cond(use_next,\n                 lambda: next_step, # <--\n                 lambda: numbers)\n\nalways_old = current_or_next(use_next=tf.constant(False))\n\nprint 'creating session'\nsess = tf.Session()\nprint 'before run'\nsess.run(always_old)\nprint 'after run'\nI haven't been able to get a traceback after it hangs.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04.1\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: `('v1.2.0-5-g435cdfc', '1.2.1')`\r\n- **Python version**: 2.7.12\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: 8.0 / 5.1.5\r\n- **GPU model and memory**: GeForce GTX 1080, 8113MiB\r\n- **Exact command to reproduce**: `python test.py` (see below)\r\n\r\n### Describe the problem\r\nRunning a `cond` in which a lambda (even the one that isn't used) includes the `gradients` of a tensor made by `map_fn` makes TensorFlow hang. See test.py below for reproduction.\r\n\r\nDoing the `gradients` outside of the lambda makes it work. See test-workaround.py for example.\r\n\r\n### Source code / logs\r\ntest.py:\r\n```py\r\nimport tensorflow as tf\r\n\r\nprint 'start'\r\nnumbers = tf.zeros([2], dtype=tf.float32)\r\n\r\nresult = tf.map_fn(lambda image: image, numbers)\r\n\r\ndef get_next_step():\r\n  objective = result[0]\r\n  grads, = tf.gradients(objective, numbers)\r\n  return numbers + grads\r\n\r\ndef current_or_next(use_next):\r\n  return tf.cond(use_next,\r\n                 get_next_step,\r\n                 lambda: numbers)\r\n\r\nalways_old = current_or_next(use_next=tf.constant(False))\r\n\r\nprint 'creating session'\r\nsess = tf.Session()\r\nprint 'before run'\r\nsess.run(always_old)\r\nprint 'after run'\r\n```\r\n\r\ntest-workaround.py:\r\n```py\r\nimport tensorflow as tf\r\n\r\nprint 'start'\r\nnumbers = tf.zeros([2], dtype=tf.float32)\r\n\r\nresult = tf.map_fn(lambda image: image, numbers)\r\n\r\ndef get_next_step():\r\n  objective = result[0]\r\n  grads, = tf.gradients(objective, numbers)\r\n  return numbers + grads\r\nnext_step = get_next_step() # <--\r\n\r\ndef current_or_next(use_next):\r\n  return tf.cond(use_next,\r\n                 lambda: next_step, # <--\r\n                 lambda: numbers)\r\n\r\nalways_old = current_or_next(use_next=tf.constant(False))\r\n\r\nprint 'creating session'\r\nsess = tf.Session()\r\nprint 'before run'\r\nsess.run(always_old)\r\nprint 'after run'\r\n```\r\n\r\nI haven't been able to get a traceback after it hangs."}