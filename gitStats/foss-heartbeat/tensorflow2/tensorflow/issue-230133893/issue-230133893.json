{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10059", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10059/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10059/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10059/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10059", "id": 230133893, "node_id": "MDU6SXNzdWUyMzAxMzM4OTM=", "number": 10059, "title": "tf.summary not working in tf.cond functions...", "user": {"login": "AndreiCostinescu", "id": 9751090, "node_id": "MDQ6VXNlcjk3NTEwOTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9751090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreiCostinescu", "html_url": "https://github.com/AndreiCostinescu", "followers_url": "https://api.github.com/users/AndreiCostinescu/followers", "following_url": "https://api.github.com/users/AndreiCostinescu/following{/other_user}", "gists_url": "https://api.github.com/users/AndreiCostinescu/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreiCostinescu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreiCostinescu/subscriptions", "organizations_url": "https://api.github.com/users/AndreiCostinescu/orgs", "repos_url": "https://api.github.com/users/AndreiCostinescu/repos", "events_url": "https://api.github.com/users/AndreiCostinescu/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreiCostinescu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-05-20T06:19:29Z", "updated_at": "2018-03-15T19:30:25Z", "closed_at": "2017-12-22T21:22:14Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution</strong>: Windows 10 as well as Linux Ubuntu 16.04.2</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: installed with pip (in root of anaconda) like in the documentation (not installed from master)</li>\n<li><strong>TensorFlow version</strong>: v1.1</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA Version 8.0.44</li>\n<li><strong>GPU model and memory</strong>: GeForce GTX TITAN X 12GB</li>\n<li><strong>Exact command to reproduce</strong>: python test_summarizing.py</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Hi everyone,<br>\nI was trying to write a function to do data augmentation on images. With a probability of 0.5, the function should do the augmentation and if not return the image unmodified. The basic idea of my usage you can extract from the code below.<br>\n<code>image = tf.cond(tf.less(probability, 0.5), lambda: do_augmentation(image), lambda: image)</code><br>\nIn the augmentation function, I want to see how the image changed so I added <code>tf.summary.image(...)</code> after every image-processing step. But when running the summary operation (after I merged all summaries with <code>tf.summary.merge_all()</code>) I get the following error:</p>\n<pre><code>tensorflow.python.framework.errors_impl.InvalidArgumentError: The tensor returned for Merge/MergeSummary:0 was not valid.\n</code></pre>\n<p>I tried to debug the problem and saw that when I don't use the summaries (commenting them) in the augmentation function, the whole code works.</p>\n<p>I couldn't find any help on StackOverflow regarding this problem. However, I saw only one other post (<a href=\"http://stackoverflow.com/questions/39275641/tensorflow-how-to-write-multistep-decay\" rel=\"nofollow\">http://stackoverflow.com/questions/39275641/tensorflow-how-to-write-multistep-decay</a>) which had this kind of error, so I took that code (to be sure that it was not a problem with <code>tf.summary.image()</code> but a problem in general with <code>tf.summary</code>) and played around to see where the problem is. Sadly, I couldn't figure it out...</p>\n<p>In the attached zip file (<a href=\"https://github.com/tensorflow/tensorflow/files/1015955/test_summarizing.zip\">test_summarizing.zip</a>) there is the test_summarizing.py file, which contains 2 functions.</p>\n<ol>\n<li><code>summary_not_working_simple()</code>:<br>\nIs a minimal example to replicate the error of my code and of the original problem I had.<br>\n(I used the scalar summary instead of the image summary because it doesn't make a difference...)</li>\n</ol>\n<ul>\n<li>If you comment both summaries in f1 and f2, the code always works.</li>\n<li>If you comment one out of the 2 summary-calls (in either function f1 or f2), the code sometimes works and sometimes produces the traceback found below.<br>\nTo replicate, try commenting both calls then run the code. Then comment only one call and run the code (possibly multiple times). Then comment the other call and run the code again. You should see that with one commented call to <code>tf.summary.scalar</code>, the code sometimes produces the error and sometimes it simply works...</li>\n<li>If you don't comment anything (leaving both calls to the summary), the code never works and always produces the traceback shown below.</li>\n</ul>\n<ol start=\"2\">\n<li><code>summary_not_working_stack_overflow()</code>:<br>\nTo replicate the error you must in the function <code>multi_step_decay</code> of class MultiStepDecay at lines 62-63 comment (resp. uncomment) the <code>with tf.control_dependencies</code> block and the error will appear.</li>\n</ol>\n<p>Could someone please look into the problem of the <code>summary_not_working_simple()</code> and explain to me, why the summary is not working? I have found a workaround to using the <code>tf.cond()</code> but the code is very messy now :) Plus it would make sense to have the possibility of writing summaries from every point of the tensorflow code, right?<br>\nAnd if you could also explain why the issue in the second function <code>summary_not_working_stack_overflow()</code> occurs, I would appreciate it very much!</p>\n<h3>Source code / logs</h3>\n<p>Traceback for summary_not_working_simple() example:</p>\n<pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1039, in _do_call\n    return fn(*args)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1021, in _run_fn\n    status, run_metadata)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\contextlib.py\", line 66, in __exit__\n    next(self.gen)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\errors_impl.py\", line 466, in raise_exception_on_not_ok_status\n    pywrap_tensorflow.TF_GetCode(status))\ntensorflow.python.framework.errors_impl.InvalidArgumentError: The tensor returned for Merge/MergeSummary:0 was not valid.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:/Users/Andrei/PycharmProjects/testing/test_summarizing.py\", line 93, in &lt;module&gt;\n    summary_not_working_simple()\n  File \"C:/Users/Andrei/PycharmProjects/testing/test_summarizing.py\", line 30, in summary_not_working_simple\n    _ = session.run(summary_merge_opt)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 778, in run\n    run_metadata_ptr)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 982, in _run\n    feed_dict_string, options, run_metadata)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1032, in _do_run\n    target_list, options, run_metadata)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1052, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: The tensor returned for Merge/MergeSummary:0 was not valid.\n</code></pre>\n<p>Source code of my the original function:</p>\n<pre><code>def preprocess_for_train_summary_error(image, height, width, fast_mode=True, scope=None, central_fraction=0.875):\n    with tf.name_scope(scope, 'train_image', [image, height, width]):\n        if image.dtype != tf.float32:\n            image = tf.image.convert_image_dtype(image, dtype=tf.float32)\n\n        tf.summary.image(\"original_image\", tf.expand_dims(image, axis=0), max_outputs=1)\n\n        random_augment = tf.random_uniform([], minval=0, maxval=1, dtype=tf.float32)\n\n        def augmentation_pipeline(image_arg):\n            random_translate = tf.random_uniform([], minval=0, maxval=1, dtype=tf.float32)\n            translated_image = tf.cond(tf.less(random_translate, 0.5),\n                                       lambda: translate(image_arg),\n                                       lambda: image_arg)\n            tf.summary.image('translated_image', tf.expand_dims(translated_image, axis=0), max_outputs=1)\n\n            random_rotate = tf.random_uniform([], minval=0, maxval=1)\n            rotated_image = tf.cond(tf.less(random_rotate, 0.8),\n                                    lambda: rotate(translated_image),\n                                    lambda: translated_image)\n            tf.summary.image('rotated_image', tf.expand_dims(rotated_image, axis=0), max_outputs=1)\n\n            random_flip = tf.random_uniform([], minval=0, maxval=1)\n            flipped_image = tf.cond(tf.less(random_flip, 0.5),\n                                    lambda: flip(rotated_image),\n                                    lambda: rotated_image)\n            tf.summary.image('flipped_image', tf.expand_dims(flipped_image, axis=0), max_outputs=1)\n\n            def f(x, ordering):\n                return distort_color(x, color_ordering=ordering, fast_mode=fast_mode)\n\n            random_distort_colors = tf.random_uniform([], minval=0, maxval=1)\n            color_distorted_image = tf.cond(tf.less(random_distort_colors, 0.5),\n                                            lambda: apply_with_random_selector(flipped_image, f, 4),\n                                            lambda: flipped_image)\n            tf.summary.image('color_distorted_image', tf.expand_dims(color_distorted_image, axis=0), max_outputs=1)\n\n            return image_arg\n\n        image = tf.cond(tf.less(random_augment, 0.5),\n                        lambda: augmentation_pipeline(image),\n                        lambda: image)\n\n        image = tf.image.central_crop(image, central_fraction=central_fraction)\n        tf.summary.image('central_cropped_image', tf.expand_dims(image, axis=0), max_outputs=1)\n        image = tf.expand_dims(image, 0)\n        image = tf.image.resize_bilinear(image, [height, width], align_corners=False)\n        image = tf.squeeze(image, [0])\n        tf.summary.image('resized_image', tf.expand_dims(image, axis=0), max_outputs=1)\n\n        # Subtract off the mean and divide by the variance of the pixels.\n        image = tf.subtract(image, 0.5, name=\"sub_mean\")\n        image = tf.multiply(image, 2.0, name=\"div_var\")\n        return image\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution: Windows 10 as well as Linux Ubuntu 16.04.2\nTensorFlow installed from (source or binary): installed with pip (in root of anaconda) like in the documentation (not installed from master)\nTensorFlow version: v1.1\nCUDA/cuDNN version: CUDA Version 8.0.44\nGPU model and memory: GeForce GTX TITAN X 12GB\nExact command to reproduce: python test_summarizing.py\n\nDescribe the problem\nHi everyone,\nI was trying to write a function to do data augmentation on images. With a probability of 0.5, the function should do the augmentation and if not return the image unmodified. The basic idea of my usage you can extract from the code below.\nimage = tf.cond(tf.less(probability, 0.5), lambda: do_augmentation(image), lambda: image)\nIn the augmentation function, I want to see how the image changed so I added tf.summary.image(...) after every image-processing step. But when running the summary operation (after I merged all summaries with tf.summary.merge_all()) I get the following error:\ntensorflow.python.framework.errors_impl.InvalidArgumentError: The tensor returned for Merge/MergeSummary:0 was not valid.\n\nI tried to debug the problem and saw that when I don't use the summaries (commenting them) in the augmentation function, the whole code works.\nI couldn't find any help on StackOverflow regarding this problem. However, I saw only one other post (http://stackoverflow.com/questions/39275641/tensorflow-how-to-write-multistep-decay) which had this kind of error, so I took that code (to be sure that it was not a problem with tf.summary.image() but a problem in general with tf.summary) and played around to see where the problem is. Sadly, I couldn't figure it out...\nIn the attached zip file (test_summarizing.zip) there is the test_summarizing.py file, which contains 2 functions.\n\nsummary_not_working_simple():\nIs a minimal example to replicate the error of my code and of the original problem I had.\n(I used the scalar summary instead of the image summary because it doesn't make a difference...)\n\n\nIf you comment both summaries in f1 and f2, the code always works.\nIf you comment one out of the 2 summary-calls (in either function f1 or f2), the code sometimes works and sometimes produces the traceback found below.\nTo replicate, try commenting both calls then run the code. Then comment only one call and run the code (possibly multiple times). Then comment the other call and run the code again. You should see that with one commented call to tf.summary.scalar, the code sometimes produces the error and sometimes it simply works...\nIf you don't comment anything (leaving both calls to the summary), the code never works and always produces the traceback shown below.\n\n\nsummary_not_working_stack_overflow():\nTo replicate the error you must in the function multi_step_decay of class MultiStepDecay at lines 62-63 comment (resp. uncomment) the with tf.control_dependencies block and the error will appear.\n\nCould someone please look into the problem of the summary_not_working_simple() and explain to me, why the summary is not working? I have found a workaround to using the tf.cond() but the code is very messy now :) Plus it would make sense to have the possibility of writing summaries from every point of the tensorflow code, right?\nAnd if you could also explain why the issue in the second function summary_not_working_stack_overflow() occurs, I would appreciate it very much!\nSource code / logs\nTraceback for summary_not_working_simple() example:\nTraceback (most recent call last):\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1039, in _do_call\n    return fn(*args)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1021, in _run_fn\n    status, run_metadata)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\contextlib.py\", line 66, in __exit__\n    next(self.gen)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\errors_impl.py\", line 466, in raise_exception_on_not_ok_status\n    pywrap_tensorflow.TF_GetCode(status))\ntensorflow.python.framework.errors_impl.InvalidArgumentError: The tensor returned for Merge/MergeSummary:0 was not valid.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:/Users/Andrei/PycharmProjects/testing/test_summarizing.py\", line 93, in <module>\n    summary_not_working_simple()\n  File \"C:/Users/Andrei/PycharmProjects/testing/test_summarizing.py\", line 30, in summary_not_working_simple\n    _ = session.run(summary_merge_opt)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 778, in run\n    run_metadata_ptr)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 982, in _run\n    feed_dict_string, options, run_metadata)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1032, in _do_run\n    target_list, options, run_metadata)\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1052, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: The tensor returned for Merge/MergeSummary:0 was not valid.\n\nSource code of my the original function:\ndef preprocess_for_train_summary_error(image, height, width, fast_mode=True, scope=None, central_fraction=0.875):\n    with tf.name_scope(scope, 'train_image', [image, height, width]):\n        if image.dtype != tf.float32:\n            image = tf.image.convert_image_dtype(image, dtype=tf.float32)\n\n        tf.summary.image(\"original_image\", tf.expand_dims(image, axis=0), max_outputs=1)\n\n        random_augment = tf.random_uniform([], minval=0, maxval=1, dtype=tf.float32)\n\n        def augmentation_pipeline(image_arg):\n            random_translate = tf.random_uniform([], minval=0, maxval=1, dtype=tf.float32)\n            translated_image = tf.cond(tf.less(random_translate, 0.5),\n                                       lambda: translate(image_arg),\n                                       lambda: image_arg)\n            tf.summary.image('translated_image', tf.expand_dims(translated_image, axis=0), max_outputs=1)\n\n            random_rotate = tf.random_uniform([], minval=0, maxval=1)\n            rotated_image = tf.cond(tf.less(random_rotate, 0.8),\n                                    lambda: rotate(translated_image),\n                                    lambda: translated_image)\n            tf.summary.image('rotated_image', tf.expand_dims(rotated_image, axis=0), max_outputs=1)\n\n            random_flip = tf.random_uniform([], minval=0, maxval=1)\n            flipped_image = tf.cond(tf.less(random_flip, 0.5),\n                                    lambda: flip(rotated_image),\n                                    lambda: rotated_image)\n            tf.summary.image('flipped_image', tf.expand_dims(flipped_image, axis=0), max_outputs=1)\n\n            def f(x, ordering):\n                return distort_color(x, color_ordering=ordering, fast_mode=fast_mode)\n\n            random_distort_colors = tf.random_uniform([], minval=0, maxval=1)\n            color_distorted_image = tf.cond(tf.less(random_distort_colors, 0.5),\n                                            lambda: apply_with_random_selector(flipped_image, f, 4),\n                                            lambda: flipped_image)\n            tf.summary.image('color_distorted_image', tf.expand_dims(color_distorted_image, axis=0), max_outputs=1)\n\n            return image_arg\n\n        image = tf.cond(tf.less(random_augment, 0.5),\n                        lambda: augmentation_pipeline(image),\n                        lambda: image)\n\n        image = tf.image.central_crop(image, central_fraction=central_fraction)\n        tf.summary.image('central_cropped_image', tf.expand_dims(image, axis=0), max_outputs=1)\n        image = tf.expand_dims(image, 0)\n        image = tf.image.resize_bilinear(image, [height, width], align_corners=False)\n        image = tf.squeeze(image, [0])\n        tf.summary.image('resized_image', tf.expand_dims(image, axis=0), max_outputs=1)\n\n        # Subtract off the mean and divide by the variance of the pixels.\n        image = tf.subtract(image, 0.5, name=\"sub_mean\")\n        image = tf.multiply(image, 2.0, name=\"div_var\")\n        return image", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution**: Windows 10 as well as Linux Ubuntu 16.04.2\r\n- **TensorFlow installed from (source or binary)**: installed with pip (in root of anaconda) like in the documentation (not installed from master)\r\n- **TensorFlow version**: v1.1\r\n- **CUDA/cuDNN version**: CUDA Version 8.0.44\r\n- **GPU model and memory**: GeForce GTX TITAN X 12GB\r\n- **Exact command to reproduce**: python test_summarizing.py\r\n\r\n### Describe the problem\r\nHi everyone,\r\nI was trying to write a function to do data augmentation on images. With a probability of 0.5, the function should do the augmentation and if not return the image unmodified. The basic idea of my usage you can extract from the code below.\r\n`\r\nimage = tf.cond(tf.less(probability, 0.5), lambda: do_augmentation(image), lambda: image)\r\n`\r\nIn the augmentation function, I want to see how the image changed so I added `tf.summary.image(...)` after every image-processing step. But when running the summary operation (after I merged all summaries with `tf.summary.merge_all()`) I get the following error:\r\n```\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: The tensor returned for Merge/MergeSummary:0 was not valid.\r\n```\r\nI tried to debug the problem and saw that when I don't use the summaries (commenting them) in the augmentation function, the whole code works.\r\n\r\nI couldn't find any help on StackOverflow regarding this problem. However, I saw only one other post (http://stackoverflow.com/questions/39275641/tensorflow-how-to-write-multistep-decay) which had this kind of error, so I took that code (to be sure that it was not a problem with `tf.summary.image()` but a problem in general with `tf.summary`) and played around to see where the problem is. Sadly, I couldn't figure it out...\r\n\r\nIn the attached zip file ([test_summarizing.zip](https://github.com/tensorflow/tensorflow/files/1015955/test_summarizing.zip)) there is the test_summarizing.py file, which contains 2 functions. \r\n\r\n1. `summary_not_working_simple()`:\r\nIs a minimal example to replicate the error of my code and of the original problem I had.\r\n(I used the scalar summary instead of the image summary because it doesn't make a difference...)\r\n\r\n- If you comment both summaries in f1 and f2, the code always works. \r\n- If you comment one out of the 2 summary-calls (in either function f1 or f2), the code sometimes works and sometimes produces the traceback found below. \r\nTo replicate, try commenting both calls then run the code. Then comment only one call and run the code (possibly multiple times). Then comment the other call and run the code again. You should see that with one commented call to `tf.summary.scalar`, the code sometimes produces the error and sometimes it simply works...\r\n- If you don't comment anything (leaving both calls to the summary), the code never works and always produces the traceback shown below.\r\n\r\n2. `summary_not_working_stack_overflow()`:\r\nTo replicate the error you must in the function `multi_step_decay` of class MultiStepDecay at lines 62-63 comment (resp. uncomment) the `with tf.control_dependencies` block and the error will appear.\r\n\r\nCould someone please look into the problem of the `summary_not_working_simple()` and explain to me, why the summary is not working? I have found a workaround to using the `tf.cond()` but the code is very messy now :) Plus it would make sense to have the possibility of writing summaries from every point of the tensorflow code, right?\r\nAnd if you could also explain why the issue in the second function `summary_not_working_stack_overflow()` occurs, I would appreciate it very much!\r\n\r\n### Source code / logs\r\nTraceback for summary_not_working_simple() example:\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1039, in _do_call\r\n    return fn(*args)\r\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1021, in _run_fn\r\n    status, run_metadata)\r\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\contextlib.py\", line 66, in __exit__\r\n    next(self.gen)\r\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\errors_impl.py\", line 466, in raise_exception_on_not_ok_status\r\n    pywrap_tensorflow.TF_GetCode(status))\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: The tensor returned for Merge/MergeSummary:0 was not valid.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:/Users/Andrei/PycharmProjects/testing/test_summarizing.py\", line 93, in <module>\r\n    summary_not_working_simple()\r\n  File \"C:/Users/Andrei/PycharmProjects/testing/test_summarizing.py\", line 30, in summary_not_working_simple\r\n    _ = session.run(summary_merge_opt)\r\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 778, in run\r\n    run_metadata_ptr)\r\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 982, in _run\r\n    feed_dict_string, options, run_metadata)\r\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1032, in _do_run\r\n    target_list, options, run_metadata)\r\n  File \"C:\\Users\\Andrei\\Anaconda\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1052, in _do_call\r\n    raise type(e)(node_def, op, message)\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: The tensor returned for Merge/MergeSummary:0 was not valid.\r\n```\r\n\r\nSource code of my the original function:\r\n```\r\ndef preprocess_for_train_summary_error(image, height, width, fast_mode=True, scope=None, central_fraction=0.875):\r\n    with tf.name_scope(scope, 'train_image', [image, height, width]):\r\n        if image.dtype != tf.float32:\r\n            image = tf.image.convert_image_dtype(image, dtype=tf.float32)\r\n\r\n        tf.summary.image(\"original_image\", tf.expand_dims(image, axis=0), max_outputs=1)\r\n\r\n        random_augment = tf.random_uniform([], minval=0, maxval=1, dtype=tf.float32)\r\n\r\n        def augmentation_pipeline(image_arg):\r\n            random_translate = tf.random_uniform([], minval=0, maxval=1, dtype=tf.float32)\r\n            translated_image = tf.cond(tf.less(random_translate, 0.5),\r\n                                       lambda: translate(image_arg),\r\n                                       lambda: image_arg)\r\n            tf.summary.image('translated_image', tf.expand_dims(translated_image, axis=0), max_outputs=1)\r\n\r\n            random_rotate = tf.random_uniform([], minval=0, maxval=1)\r\n            rotated_image = tf.cond(tf.less(random_rotate, 0.8),\r\n                                    lambda: rotate(translated_image),\r\n                                    lambda: translated_image)\r\n            tf.summary.image('rotated_image', tf.expand_dims(rotated_image, axis=0), max_outputs=1)\r\n\r\n            random_flip = tf.random_uniform([], minval=0, maxval=1)\r\n            flipped_image = tf.cond(tf.less(random_flip, 0.5),\r\n                                    lambda: flip(rotated_image),\r\n                                    lambda: rotated_image)\r\n            tf.summary.image('flipped_image', tf.expand_dims(flipped_image, axis=0), max_outputs=1)\r\n\r\n            def f(x, ordering):\r\n                return distort_color(x, color_ordering=ordering, fast_mode=fast_mode)\r\n\r\n            random_distort_colors = tf.random_uniform([], minval=0, maxval=1)\r\n            color_distorted_image = tf.cond(tf.less(random_distort_colors, 0.5),\r\n                                            lambda: apply_with_random_selector(flipped_image, f, 4),\r\n                                            lambda: flipped_image)\r\n            tf.summary.image('color_distorted_image', tf.expand_dims(color_distorted_image, axis=0), max_outputs=1)\r\n\r\n            return image_arg\r\n\r\n        image = tf.cond(tf.less(random_augment, 0.5),\r\n                        lambda: augmentation_pipeline(image),\r\n                        lambda: image)\r\n\r\n        image = tf.image.central_crop(image, central_fraction=central_fraction)\r\n        tf.summary.image('central_cropped_image', tf.expand_dims(image, axis=0), max_outputs=1)\r\n        image = tf.expand_dims(image, 0)\r\n        image = tf.image.resize_bilinear(image, [height, width], align_corners=False)\r\n        image = tf.squeeze(image, [0])\r\n        tf.summary.image('resized_image', tf.expand_dims(image, axis=0), max_outputs=1)\r\n\r\n        # Subtract off the mean and divide by the variance of the pixels.\r\n        image = tf.subtract(image, 0.5, name=\"sub_mean\")\r\n        image = tf.multiply(image, 2.0, name=\"div_var\")\r\n        return image\r\n```"}