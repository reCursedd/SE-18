{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/126175608", "pull_request_review_id": 48639051, "id": 126175608, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE3NTYwOA==", "diff_hunk": "@@ -266,6 +266,13 @@ def setUp(self):\n     self._ClearCachedSession()\n     random.seed(random_seed.DEFAULT_GRAPH_SEED)\n     np.random.seed(random_seed.DEFAULT_GRAPH_SEED)\n+    # Note: The following line is necessary because some test methods may error\n+    # out from within nested graph contexts (e.g., via assertRaises and\n+    # assertRaisesRegexp), which may leave ops._default_graph_stack non-empty\n+    # under certain versions of Python. That would cause\n+    # ops.reset_default_graph() to throw an exception if the stack were not\n+    # cleared first.", "path": "tensorflow/python/framework/test_util.py", "position": 9, "original_position": 9, "commit_id": "f8cd1283e541f8f0366d3816091d144fcafc786a", "original_commit_id": "f8cd1283e541f8f0366d3816091d144fcafc786a", "user": {"login": "caisq", "id": 16824702, "node_id": "MDQ6VXNlcjE2ODI0NzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/16824702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caisq", "html_url": "https://github.com/caisq", "followers_url": "https://api.github.com/users/caisq/followers", "following_url": "https://api.github.com/users/caisq/following{/other_user}", "gists_url": "https://api.github.com/users/caisq/gists{/gist_id}", "starred_url": "https://api.github.com/users/caisq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caisq/subscriptions", "organizations_url": "https://api.github.com/users/caisq/orgs", "repos_url": "https://api.github.com/users/caisq/repos", "events_url": "https://api.github.com/users/caisq/events{/privacy}", "received_events_url": "https://api.github.com/users/caisq/received_events", "type": "User", "site_admin": false}, "body": "Good question! This seems strange to me, too. But this is what happens in Mac+Python3.5: see code at: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/client/session_test.py#L1556\r\n\r\nThis code calls \"with sess\" twice. By using print debugging, I can see that during the first call, which is legitimate, a Graph object is pushed to the default graph stack and a Session object is pushed to the default session stack. But during the second call, which is illegal and triggers an exception about re-entry, the finally block of _only_ the default session stack is called. That of the default graph stack is not called. This is unique to Mac+Python3.5. In other systems and python versions, the finally blocks of both the default session stack and the default graph stack get called.\r\n\r\nAny thoughts?", "created_at": "2017-07-07T15:29:08Z", "updated_at": "2017-07-07T15:29:08Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11340#discussion_r126175608", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11340", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/126175608"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11340#discussion_r126175608"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11340"}}, "body_html": "<p>Good question! This seems strange to me, too. But this is what happens in Mac+Python3.5: see code at: <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/client/session_test.py#L1556\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/client/session_test.py#L1556</a></p>\n<p>This code calls \"with sess\" twice. By using print debugging, I can see that during the first call, which is legitimate, a Graph object is pushed to the default graph stack and a Session object is pushed to the default session stack. But during the second call, which is illegal and triggers an exception about re-entry, the finally block of <em>only</em> the default session stack is called. That of the default graph stack is not called. This is unique to Mac+Python3.5. In other systems and python versions, the finally blocks of both the default session stack and the default graph stack get called.</p>\n<p>Any thoughts?</p>", "body_text": "Good question! This seems strange to me, too. But this is what happens in Mac+Python3.5: see code at: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/client/session_test.py#L1556\nThis code calls \"with sess\" twice. By using print debugging, I can see that during the first call, which is legitimate, a Graph object is pushed to the default graph stack and a Session object is pushed to the default session stack. But during the second call, which is illegal and triggers an exception about re-entry, the finally block of only the default session stack is called. That of the default graph stack is not called. This is unique to Mac+Python3.5. In other systems and python versions, the finally blocks of both the default session stack and the default graph stack get called.\nAny thoughts?", "in_reply_to_id": 126072067}