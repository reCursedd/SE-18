{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16594", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16594/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16594/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16594/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16594", "id": 292890340, "node_id": "MDU6SXNzdWUyOTI4OTAzNDA=", "number": 16594, "title": "Layers created with tf.layers not listed with tf.contrib.framework.get_model_variables", "user": {"login": "Tauranis", "id": 9088856, "node_id": "MDQ6VXNlcjkwODg4NTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/9088856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tauranis", "html_url": "https://github.com/Tauranis", "followers_url": "https://api.github.com/users/Tauranis/followers", "following_url": "https://api.github.com/users/Tauranis/following{/other_user}", "gists_url": "https://api.github.com/users/Tauranis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tauranis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tauranis/subscriptions", "organizations_url": "https://api.github.com/users/Tauranis/orgs", "repos_url": "https://api.github.com/users/Tauranis/repos", "events_url": "https://api.github.com/users/Tauranis/events{/privacy}", "received_events_url": "https://api.github.com/users/Tauranis/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-01-30T18:32:03Z", "updated_at": "2018-02-23T23:47:28Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4.0</li>\n<li><strong>Python version</strong>: 2.7</li>\n<li><strong>Bazel version (if compiling from source)</strong>: Not Applicable</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: Not Applicable</li>\n<li><strong>CUDA/cuDNN version</strong>: 8/6</li>\n<li><strong>GPU model and memory</strong>: GeForce 940MX</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Currently I'm using <a href=\"https://github.com/tensorflow/models/tree/master/research/slim#pre-trained-models\">slim models</a> to build my networks, but for extra layers I'm using the <a href=\"https://www.tensorflow.org/api_docs/python/tf/layers\" rel=\"nofollow\">tf.layers</a> API. When I try to retrieve the list of variables with the function <a href=\"https://www.tensorflow.org/versions/master/api_docs/python/tf/contrib/framework/get_model_variables\" rel=\"nofollow\"><code>tf.contrib.framework.get_model_variables</code></a><br>\nonly the layers created inside slim models are retrieved.</p>\n<h3>Minimal code to reproduce the issue</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nx <span class=\"pl-k\">=</span> tf.random_normal([<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">5</span>],<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>)\ny <span class=\"pl-k\">=</span> tf.contrib.layers.fully_connected(x,<span class=\"pl-c1\">10</span>,<span class=\"pl-v\">scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Contrib_Fully_Connected<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> Retrieved</span>\nz <span class=\"pl-k\">=</span> tf.layers.dense(x,<span class=\"pl-c1\">10</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Layers_Fully_Connected<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> Not Retrieved</span>\n<span class=\"pl-c1\">print</span>(tf.contrib.framework.get_model_variables())</pre></div>\n<p>Output:</p>\n<div class=\"highlight highlight-source-shell\"><pre>[<span class=\"pl-k\">&lt;</span>tf.Variable <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Contrib_Fully_Connected/weights:0<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>(5, 10) dtype<span class=\"pl-k\">=</span>float32_ref<span class=\"pl-k\">&gt;</span>, <span class=\"pl-k\">&lt;</span>tf.Variable <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Contrib_Fully_Connected/biases:0<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>(10,) dtype<span class=\"pl-k\">=</span>float32_ref<span class=\"pl-k\">&gt;</span>]</pre></div>\n<h3>Workaround:</h3>\n<p>Use <a href=\"https://www.tensorflow.org/api_docs/python/tf/get_collection\" rel=\"nofollow\"><code>tf.get_collection</code></a></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nx <span class=\"pl-k\">=</span> tf.random_normal([<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">5</span>],<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>)\ny <span class=\"pl-k\">=</span> tf.contrib.layers.fully_connected(x,<span class=\"pl-c1\">10</span>,<span class=\"pl-v\">scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Contrib_Fully_Connected<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> Retrieved</span>\nz <span class=\"pl-k\">=</span> tf.layers.dense(x,<span class=\"pl-c1\">10</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Layers_Fully_Connected<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> Not Retrieved</span>\n<span class=\"pl-c1\">print</span>(tf.get_collection(tf.GraphKeys.<span class=\"pl-c1\">GLOBAL_VARIABLES</span>))</pre></div>\n<p>the output is:</p>\n<div class=\"highlight highlight-source-shell\"><pre>[<span class=\"pl-k\">&lt;</span>tf.Variable <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Contrib_Fully_Connected/weights:0<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>(5, 10) dtype<span class=\"pl-k\">=</span>float32_ref<span class=\"pl-k\">&gt;</span>,\n <span class=\"pl-k\">&lt;</span>tf.Variable <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Contrib_Fully_Connected/biases:0<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>(10,) dtype<span class=\"pl-k\">=</span>float32_ref<span class=\"pl-k\">&gt;</span>,\n <span class=\"pl-k\">&lt;</span>tf.Variable <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Layers_Fully_Connected/kernel:0<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>(5, 10) dtype<span class=\"pl-k\">=</span>float32_ref<span class=\"pl-k\">&gt;</span>,\n <span class=\"pl-k\">&lt;</span>tf.Variable <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Layers_Fully_Connected/bias:0<span class=\"pl-pds\">'</span></span> shape<span class=\"pl-k\">=</span>(10,) dtype<span class=\"pl-k\">=</span>float32_ref<span class=\"pl-k\">&gt;</span>]</pre></div>\n<p>Is it worth to bring this issue as a bug and improve the funcionality of <code>tf.contrib.framework.get_model_variables</code> or will this contrib function be discontinued?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.4.0\nPython version: 2.7\nBazel version (if compiling from source): Not Applicable\nGCC/Compiler version (if compiling from source): Not Applicable\nCUDA/cuDNN version: 8/6\nGPU model and memory: GeForce 940MX\n\nDescribe the problem\nCurrently I'm using slim models to build my networks, but for extra layers I'm using the tf.layers API. When I try to retrieve the list of variables with the function tf.contrib.framework.get_model_variables\nonly the layers created inside slim models are retrieved.\nMinimal code to reproduce the issue\nimport tensorflow as tf\nx = tf.random_normal([2,5],name='x')\ny = tf.contrib.layers.fully_connected(x,10,scope='Contrib_Fully_Connected') # Retrieved\nz = tf.layers.dense(x,10, name='Layers_Fully_Connected') # Not Retrieved\nprint(tf.contrib.framework.get_model_variables())\nOutput:\n[<tf.Variable 'Contrib_Fully_Connected/weights:0' shape=(5, 10) dtype=float32_ref>, <tf.Variable 'Contrib_Fully_Connected/biases:0' shape=(10,) dtype=float32_ref>]\nWorkaround:\nUse tf.get_collection\nimport tensorflow as tf\nx = tf.random_normal([2,5],name='x')\ny = tf.contrib.layers.fully_connected(x,10,scope='Contrib_Fully_Connected') # Retrieved\nz = tf.layers.dense(x,10, name='Layers_Fully_Connected') # Not Retrieved\nprint(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES))\nthe output is:\n[<tf.Variable 'Contrib_Fully_Connected/weights:0' shape=(5, 10) dtype=float32_ref>,\n <tf.Variable 'Contrib_Fully_Connected/biases:0' shape=(10,) dtype=float32_ref>,\n <tf.Variable 'Layers_Fully_Connected/kernel:0' shape=(5, 10) dtype=float32_ref>,\n <tf.Variable 'Layers_Fully_Connected/bias:0' shape=(10,) dtype=float32_ref>]\nIs it worth to bring this issue as a bug and improve the funcionality of tf.contrib.framework.get_model_variables or will this contrib function be discontinued?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.4.0\r\n- **Python version**: 2.7\r\n- **Bazel version (if compiling from source)**: Not Applicable\r\n- **GCC/Compiler version (if compiling from source)**: Not Applicable\r\n- **CUDA/cuDNN version**: 8/6\r\n- **GPU model and memory**: GeForce 940MX\r\n\r\n### Describe the problem\r\nCurrently I'm using [slim models](https://github.com/tensorflow/models/tree/master/research/slim#pre-trained-models) to build my networks, but for extra layers I'm using the [tf.layers](https://www.tensorflow.org/api_docs/python/tf/layers) API. When I try to retrieve the list of variables with the function [`tf.contrib.framework.get_model_variables`](https://www.tensorflow.org/versions/master/api_docs/python/tf/contrib/framework/get_model_variables)\r\nonly the layers created inside slim models are retrieved.\r\n\r\n### Minimal code to reproduce the issue\r\n\r\n```python\r\nimport tensorflow as tf\r\nx = tf.random_normal([2,5],name='x')\r\ny = tf.contrib.layers.fully_connected(x,10,scope='Contrib_Fully_Connected') # Retrieved\r\nz = tf.layers.dense(x,10, name='Layers_Fully_Connected') # Not Retrieved\r\nprint(tf.contrib.framework.get_model_variables())\r\n```\r\n\r\nOutput:\r\n\r\n```bash\r\n[<tf.Variable 'Contrib_Fully_Connected/weights:0' shape=(5, 10) dtype=float32_ref>, <tf.Variable 'Contrib_Fully_Connected/biases:0' shape=(10,) dtype=float32_ref>]\r\n```\r\n\r\n### Workaround:\r\n\r\nUse [`tf.get_collection`](https://www.tensorflow.org/api_docs/python/tf/get_collection)\r\n\r\n```python\r\nimport tensorflow as tf\r\nx = tf.random_normal([2,5],name='x')\r\ny = tf.contrib.layers.fully_connected(x,10,scope='Contrib_Fully_Connected') # Retrieved\r\nz = tf.layers.dense(x,10, name='Layers_Fully_Connected') # Not Retrieved\r\nprint(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES))\r\n```\r\nthe output is:\r\n```bash\r\n[<tf.Variable 'Contrib_Fully_Connected/weights:0' shape=(5, 10) dtype=float32_ref>,\r\n <tf.Variable 'Contrib_Fully_Connected/biases:0' shape=(10,) dtype=float32_ref>,\r\n <tf.Variable 'Layers_Fully_Connected/kernel:0' shape=(5, 10) dtype=float32_ref>,\r\n <tf.Variable 'Layers_Fully_Connected/bias:0' shape=(10,) dtype=float32_ref>]\r\n```\r\n\r\nIs it worth to bring this issue as a bug and improve the funcionality of `tf.contrib.framework.get_model_variables` or will this contrib function be discontinued?"}