{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/327143200", "html_url": "https://github.com/tensorflow/tensorflow/issues/12817#issuecomment-327143200", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12817", "id": 327143200, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzE0MzIwMA==", "user": {"login": "Enigma-li", "id": 4813714, "node_id": "MDQ6VXNlcjQ4MTM3MTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4813714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enigma-li", "html_url": "https://github.com/Enigma-li", "followers_url": "https://api.github.com/users/Enigma-li/followers", "following_url": "https://api.github.com/users/Enigma-li/following{/other_user}", "gists_url": "https://api.github.com/users/Enigma-li/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enigma-li/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enigma-li/subscriptions", "organizations_url": "https://api.github.com/users/Enigma-li/orgs", "repos_url": "https://api.github.com/users/Enigma-li/repos", "events_url": "https://api.github.com/users/Enigma-li/events{/privacy}", "received_events_url": "https://api.github.com/users/Enigma-li/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-05T11:02:25Z", "updated_at": "2017-09-05T17:44:31Z", "author_association": "NONE", "body_html": "<p>The detailed code is like:</p>\n<pre><code># set data directory\nCURRENT = os.path.abspath(os.path.dirname(__file__))\nDATA_DIR = os.path.join(CURRENT, 'gt')\nDB_DIR = os.path.join(DATA_DIR, 'toy_db', 'data.mdb')\nOUT_DIR = os.path.join(DATA_DIR, 'out')\n\ndef tf_lmdb_reader():\n    test_queue = tf.train.string_input_producer([DB_DIR], num_epochs=2)\n    reader = io_ops.LMDBReader()\n    key, value = reader.read(test_queue)\n    npr_line, mask, train_input, depth, normal = decode_block(value, [380, 380, 12])\n\n    queue_buf = 1000\n    cap_shuffle = queue_buf + 3 * 1\n\n    batch_data = tf.train.shuffle_batch(tensors=[npr_line, mask, train_input, depth, normal],\n                                        batch_size=9,\n                                        num_threads=5,\n                                        capacity=cap_shuffle,\n                                        min_after_dequeue=queue_buf)\n\n    with tf.Session() as sess:\n\n        init_op = tf.group(tf.global_variables_initializer(),\n                           tf.local_variables_initializer())\n        sess.run(init_op)\n        coord = tf.train.Coordinator()\n        threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\n        try:\n            step = 0\n            while not coord.should_stop():\n                cur_batch = sess.run([batch_data])\n                step += 1\n                print(step)\n        except tf.errors.OutOfRangeError:\n            print('Done')\n        finally:\n            coord.request_stop()\n\n        coord.request_stop()\n        coord.join(threads)\n\nif __name__ == '__main__':\n    tf_lmdb_reader()\n</code></pre>", "body_text": "The detailed code is like:\n# set data directory\nCURRENT = os.path.abspath(os.path.dirname(__file__))\nDATA_DIR = os.path.join(CURRENT, 'gt')\nDB_DIR = os.path.join(DATA_DIR, 'toy_db', 'data.mdb')\nOUT_DIR = os.path.join(DATA_DIR, 'out')\n\ndef tf_lmdb_reader():\n    test_queue = tf.train.string_input_producer([DB_DIR], num_epochs=2)\n    reader = io_ops.LMDBReader()\n    key, value = reader.read(test_queue)\n    npr_line, mask, train_input, depth, normal = decode_block(value, [380, 380, 12])\n\n    queue_buf = 1000\n    cap_shuffle = queue_buf + 3 * 1\n\n    batch_data = tf.train.shuffle_batch(tensors=[npr_line, mask, train_input, depth, normal],\n                                        batch_size=9,\n                                        num_threads=5,\n                                        capacity=cap_shuffle,\n                                        min_after_dequeue=queue_buf)\n\n    with tf.Session() as sess:\n\n        init_op = tf.group(tf.global_variables_initializer(),\n                           tf.local_variables_initializer())\n        sess.run(init_op)\n        coord = tf.train.Coordinator()\n        threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\n        try:\n            step = 0\n            while not coord.should_stop():\n                cur_batch = sess.run([batch_data])\n                step += 1\n                print(step)\n        except tf.errors.OutOfRangeError:\n            print('Done')\n        finally:\n            coord.request_stop()\n\n        coord.request_stop()\n        coord.join(threads)\n\nif __name__ == '__main__':\n    tf_lmdb_reader()", "body": "The detailed code is like:\r\n\r\n```\r\n# set data directory\r\nCURRENT = os.path.abspath(os.path.dirname(__file__))\r\nDATA_DIR = os.path.join(CURRENT, 'gt')\r\nDB_DIR = os.path.join(DATA_DIR, 'toy_db', 'data.mdb')\r\nOUT_DIR = os.path.join(DATA_DIR, 'out')\r\n\r\ndef tf_lmdb_reader():\r\n    test_queue = tf.train.string_input_producer([DB_DIR], num_epochs=2)\r\n    reader = io_ops.LMDBReader()\r\n    key, value = reader.read(test_queue)\r\n    npr_line, mask, train_input, depth, normal = decode_block(value, [380, 380, 12])\r\n\r\n    queue_buf = 1000\r\n    cap_shuffle = queue_buf + 3 * 1\r\n\r\n    batch_data = tf.train.shuffle_batch(tensors=[npr_line, mask, train_input, depth, normal],\r\n                                        batch_size=9,\r\n                                        num_threads=5,\r\n                                        capacity=cap_shuffle,\r\n                                        min_after_dequeue=queue_buf)\r\n\r\n    with tf.Session() as sess:\r\n\r\n        init_op = tf.group(tf.global_variables_initializer(),\r\n                           tf.local_variables_initializer())\r\n        sess.run(init_op)\r\n        coord = tf.train.Coordinator()\r\n        threads = tf.train.start_queue_runners(sess=sess, coord=coord)\r\n\r\n        try:\r\n            step = 0\r\n            while not coord.should_stop():\r\n                cur_batch = sess.run([batch_data])\r\n                step += 1\r\n                print(step)\r\n        except tf.errors.OutOfRangeError:\r\n            print('Done')\r\n        finally:\r\n            coord.request_stop()\r\n\r\n        coord.request_stop()\r\n        coord.join(threads)\r\n\r\nif __name__ == '__main__':\r\n    tf_lmdb_reader()\r\n```"}