{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8486", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8486/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8486/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8486/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8486", "id": 214899215, "node_id": "MDU6SXNzdWUyMTQ4OTkyMTU=", "number": 8486, "title": "Invalid argument: No OpKernel was registered to support Op 'Add' with these attrs.", "user": {"login": "darkstarslyp", "id": 9625731, "node_id": "MDQ6VXNlcjk2MjU3MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9625731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darkstarslyp", "html_url": "https://github.com/darkstarslyp", "followers_url": "https://api.github.com/users/darkstarslyp/followers", "following_url": "https://api.github.com/users/darkstarslyp/following{/other_user}", "gists_url": "https://api.github.com/users/darkstarslyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/darkstarslyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darkstarslyp/subscriptions", "organizations_url": "https://api.github.com/users/darkstarslyp/orgs", "repos_url": "https://api.github.com/users/darkstarslyp/repos", "events_url": "https://api.github.com/users/darkstarslyp/events{/privacy}", "received_events_url": "https://api.github.com/users/darkstarslyp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-03-17T03:33:55Z", "updated_at": "2017-03-27T03:21:20Z", "closed_at": "2017-03-27T03:21:20Z", "author_association": "NONE", "body_html": "<h3>Environment info</h3>\n<p>Operating System:</p>\n<p>Mac</p>\n<p>I hava look Mobile and Embedded TensorFlow (TensorFlow Dev Summit 2017) video on yotube.</p>\n<p>In the video , I hava learn some function to reduce tensorflow so file size on Android.</p>\n<p>I do here</p>\n<pre><code>Prints a header file to be used with SELECTIVE_REGISTRATION.\n\nExample usage:\nprint_selective_registration_header \\\n--graphs=path/to/graph.pb &gt; ops_to_register.h\n\nThen when compiling tensorflow, include ops_to_register.h in the     include\n search path and pass -DSELECTIVE_REGISTRATION  - see\n core/framework/selective_registration.h for more details.\n</code></pre>\n<p>the *.pb file is myself , then I get the ops_to_register.h file here</p>\n<div class=\"highlight highlight-source-c++\"><pre>  #<span class=\"pl-k\">ifndef</span> OPS_TO_REGISTER\n  #<span class=\"pl-k\">define</span> <span class=\"pl-en\">OPS_TO_REGISTER</span>\n  <span class=\"pl-k\">constexpr</span> <span class=\"pl-k\">inline</span> <span class=\"pl-k\">bool</span> <span class=\"pl-en\">ShouldRegisterOp</span>(<span class=\"pl-k\">const</span> <span class=\"pl-k\">char</span> op[]) {\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Add<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Const<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Conv2D<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Exp<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Identity<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Max<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MaxPool<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NoOp<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Placeholder<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>RealDiv<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Relu<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Reshape<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Sub<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Sum<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_Recv<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     || (<span class=\"pl-c1\">strcmp</span>(op, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_Send<span class=\"pl-pds\">\"</span></span>) == <span class=\"pl-c1\">0</span>)\n     ;\n    }\n  #<span class=\"pl-k\">define</span> <span class=\"pl-en\">SHOULD_REGISTER_OP</span>(<span class=\"pl-v\">op</span>) ShouldRegisterOp(op)\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-k\">char</span> <span class=\"pl-c1\">kNecessaryOpKernelClasses</span>[] = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>BinaryOp&lt; CPUDevice, functor::add&lt;float&gt;&gt;,<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ConstantOp,<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Conv2DOp&lt;CPUDevice, float&gt;,<span class=\"pl-pds\">\"</span></span>\n <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>UnaryOp&lt; CPUDevice, functor::exp&lt;float&gt;&gt;,<span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>IdentityOp,<span class=\"pl-pds\">\"</span></span>\n <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ReductionOp&lt;CPUDevice, float, Eigen::internal::MaxReducer&lt;float&gt;&gt;,<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MaxPoolingOp&lt;CPUDevice, float&gt;,<span class=\"pl-pds\">\"</span></span>\n <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NoOp,<span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>PlaceholderOp,<span class=\"pl-pds\">\"</span></span>\n <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>BinaryOp&lt; CPUDevice, functor::div&lt;float&gt;&gt;,<span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ReluOp&lt;CPUDevice, float&gt;,<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ReshapeOp,<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>BinaryOp&lt; CPUDevice, functor::sub&lt;float&gt;&gt;,<span class=\"pl-pds\">\"</span></span>\n <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ReductionOp&lt;CPUDevice, float, Eigen::internal::SumReducer&lt;float&gt;&gt;,<span class=\"pl-pds\">\"</span></span>\n <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>RecvOp,<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SendOp,<span class=\"pl-pds\">\"</span></span>\n ;\n#<span class=\"pl-k\">define</span> <span class=\"pl-en\">SHOULD_REGISTER_OP_KERNEL</span>(<span class=\"pl-v\">clz</span>)            \n   (strstr(<span class=\"pl-c1\">kNecessaryOpKernelClasses</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-pds\">\"</span></span> clz <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-pds\">\"</span></span>) != <span class=\"pl-c1\">nullptr</span>)\n\n #<span class=\"pl-k\">define</span> <span class=\"pl-en\">SHOULD_REGISTER_OP_GRADIENT</span> <span class=\"pl-c1\">false</span>\n #<span class=\"pl-k\">endif</span></pre></div>\n<p>I put ops_to_register.h in tensorflow/tensorflow/core/framework dir.</p>\n<p>then I do:</p>\n<p><code>bazel build -c opt //tensorflow/contrib/android:libtensorflow_inference.so    --crosstool_top=//external:android/crosstool    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain    --cpu=armeabi-v7a    --copt=\"-DSELECTIVE_REGISTRATION\"</code></p>\n<p>In my android studio project , initializeTensorFlow() My slef .pb file ,but I got the error:</p>\n<pre><code>tensorflow_inference_jni.cc:145 Could not create TensorFlow graph: Invalid argument: No OpKernel was registered to support Op 'Add' with these attrs.  Registered devices: [CPU], Registered kernels:\n            &lt;no registered kernels&gt;\n\n          \t [[Node: add_1 = Add[T=DT_FLOAT](Conv2D, Reshape)]]\n</code></pre>", "body_text": "Environment info\nOperating System:\nMac\nI hava look Mobile and Embedded TensorFlow (TensorFlow Dev Summit 2017) video on yotube.\nIn the video , I hava learn some function to reduce tensorflow so file size on Android.\nI do here\nPrints a header file to be used with SELECTIVE_REGISTRATION.\n\nExample usage:\nprint_selective_registration_header \\\n--graphs=path/to/graph.pb > ops_to_register.h\n\nThen when compiling tensorflow, include ops_to_register.h in the     include\n search path and pass -DSELECTIVE_REGISTRATION  - see\n core/framework/selective_registration.h for more details.\n\nthe *.pb file is myself , then I get the ops_to_register.h file here\n  #ifndef OPS_TO_REGISTER\n  #define OPS_TO_REGISTER\n  constexpr inline bool ShouldRegisterOp(const char op[]) {\n      return false\n     || (strcmp(op, \"Add\") == 0)\n     || (strcmp(op, \"Const\") == 0)\n     || (strcmp(op, \"Conv2D\") == 0)\n     || (strcmp(op, \"Exp\") == 0)\n     || (strcmp(op, \"Identity\") == 0)\n     || (strcmp(op, \"Max\") == 0)\n     || (strcmp(op, \"MaxPool\") == 0)\n     || (strcmp(op, \"NoOp\") == 0)\n     || (strcmp(op, \"Placeholder\") == 0)\n     || (strcmp(op, \"RealDiv\") == 0)\n     || (strcmp(op, \"Relu\") == 0)\n     || (strcmp(op, \"Reshape\") == 0)\n     || (strcmp(op, \"Sub\") == 0)\n     || (strcmp(op, \"Sum\") == 0)\n     || (strcmp(op, \"_Recv\") == 0)\n     || (strcmp(op, \"_Send\") == 0)\n     ;\n    }\n  #define SHOULD_REGISTER_OP(op) ShouldRegisterOp(op)\n\n  const char kNecessaryOpKernelClasses[] = \",\"\n\"BinaryOp< CPUDevice, functor::add<float>>,\"\n\"ConstantOp,\"\n\"Conv2DOp<CPUDevice, float>,\"\n \"UnaryOp< CPUDevice, functor::exp<float>>,\"\n  \"IdentityOp,\"\n \"ReductionOp<CPUDevice, float, Eigen::internal::MaxReducer<float>>,\"\n\"MaxPoolingOp<CPUDevice, float>,\"\n \"NoOp,\"\n  \"PlaceholderOp,\"\n \"BinaryOp< CPUDevice, functor::div<float>>,\"\n  \"ReluOp<CPUDevice, float>,\"\n\"ReshapeOp,\"\n\"BinaryOp< CPUDevice, functor::sub<float>>,\"\n \"ReductionOp<CPUDevice, float, Eigen::internal::SumReducer<float>>,\"\n \"RecvOp,\"\n\"SendOp,\"\n ;\n#define SHOULD_REGISTER_OP_KERNEL(clz)            \n   (strstr(kNecessaryOpKernelClasses, \",\" clz \",\") != nullptr)\n\n #define SHOULD_REGISTER_OP_GRADIENT false\n #endif\nI put ops_to_register.h in tensorflow/tensorflow/core/framework dir.\nthen I do:\nbazel build -c opt //tensorflow/contrib/android:libtensorflow_inference.so    --crosstool_top=//external:android/crosstool    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain    --cpu=armeabi-v7a    --copt=\"-DSELECTIVE_REGISTRATION\"\nIn my android studio project , initializeTensorFlow() My slef .pb file ,but I got the error:\ntensorflow_inference_jni.cc:145 Could not create TensorFlow graph: Invalid argument: No OpKernel was registered to support Op 'Add' with these attrs.  Registered devices: [CPU], Registered kernels:\n            <no registered kernels>\n\n          \t [[Node: add_1 = Add[T=DT_FLOAT](Conv2D, Reshape)]]", "body": "### Environment info\r\nOperating System:\r\n\r\nMac \r\n\r\n I hava look Mobile and Embedded TensorFlow (TensorFlow Dev Summit 2017) video on yotube.\r\n\r\nIn the video , I hava learn some function to reduce tensorflow so file size on Android.\r\n\r\nI do here\r\n```\r\nPrints a header file to be used with SELECTIVE_REGISTRATION.\r\n\r\nExample usage:\r\nprint_selective_registration_header \\\r\n--graphs=path/to/graph.pb > ops_to_register.h\r\n\r\nThen when compiling tensorflow, include ops_to_register.h in the     include\r\n search path and pass -DSELECTIVE_REGISTRATION  - see\r\n core/framework/selective_registration.h for more details.\r\n```\r\n\r\nthe *.pb file is myself , then I get the ops_to_register.h file here\r\n\r\n```c++\r\n  #ifndef OPS_TO_REGISTER\r\n  #define OPS_TO_REGISTER\r\n  constexpr inline bool ShouldRegisterOp(const char op[]) {\r\n      return false\r\n     || (strcmp(op, \"Add\") == 0)\r\n     || (strcmp(op, \"Const\") == 0)\r\n     || (strcmp(op, \"Conv2D\") == 0)\r\n     || (strcmp(op, \"Exp\") == 0)\r\n     || (strcmp(op, \"Identity\") == 0)\r\n     || (strcmp(op, \"Max\") == 0)\r\n     || (strcmp(op, \"MaxPool\") == 0)\r\n     || (strcmp(op, \"NoOp\") == 0)\r\n     || (strcmp(op, \"Placeholder\") == 0)\r\n     || (strcmp(op, \"RealDiv\") == 0)\r\n     || (strcmp(op, \"Relu\") == 0)\r\n     || (strcmp(op, \"Reshape\") == 0)\r\n     || (strcmp(op, \"Sub\") == 0)\r\n     || (strcmp(op, \"Sum\") == 0)\r\n     || (strcmp(op, \"_Recv\") == 0)\r\n     || (strcmp(op, \"_Send\") == 0)\r\n     ;\r\n    }\r\n  #define SHOULD_REGISTER_OP(op) ShouldRegisterOp(op)\r\n\r\n  const char kNecessaryOpKernelClasses[] = \",\"\r\n\"BinaryOp< CPUDevice, functor::add<float>>,\"\r\n\"ConstantOp,\"\r\n\"Conv2DOp<CPUDevice, float>,\"\r\n \"UnaryOp< CPUDevice, functor::exp<float>>,\"\r\n  \"IdentityOp,\"\r\n \"ReductionOp<CPUDevice, float, Eigen::internal::MaxReducer<float>>,\"\r\n\"MaxPoolingOp<CPUDevice, float>,\"\r\n \"NoOp,\"\r\n  \"PlaceholderOp,\"\r\n \"BinaryOp< CPUDevice, functor::div<float>>,\"\r\n  \"ReluOp<CPUDevice, float>,\"\r\n\"ReshapeOp,\"\r\n\"BinaryOp< CPUDevice, functor::sub<float>>,\"\r\n \"ReductionOp<CPUDevice, float, Eigen::internal::SumReducer<float>>,\"\r\n \"RecvOp,\"\r\n\"SendOp,\"\r\n ;\r\n#define SHOULD_REGISTER_OP_KERNEL(clz)            \r\n   (strstr(kNecessaryOpKernelClasses, \",\" clz \",\") != nullptr)\r\n\r\n #define SHOULD_REGISTER_OP_GRADIENT false\r\n #endif\r\n```\r\n\r\nI put ops_to_register.h in tensorflow/tensorflow/core/framework dir.\r\n\r\nthen I do:   \r\n\r\n`bazel build -c opt //tensorflow/contrib/android:libtensorflow_inference.so    --crosstool_top=//external:android/crosstool    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain    --cpu=armeabi-v7a    --copt=\"-DSELECTIVE_REGISTRATION\"`\r\n\r\n\r\nIn my android studio project , initializeTensorFlow() My slef .pb file ,but I got the error:\r\n\r\n\r\n```\r\ntensorflow_inference_jni.cc:145 Could not create TensorFlow graph: Invalid argument: No OpKernel was registered to support Op 'Add' with these attrs.  Registered devices: [CPU], Registered kernels:\r\n            <no registered kernels>\r\n\r\n          \t [[Node: add_1 = Add[T=DT_FLOAT](Conv2D, Reshape)]]\r\n```\r\n\r\n\r\n\r\n\r\n"}