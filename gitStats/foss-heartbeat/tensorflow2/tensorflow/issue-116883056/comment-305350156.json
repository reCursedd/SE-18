{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/305350156", "html_url": "https://github.com/tensorflow/tensorflow/issues/213#issuecomment-305350156", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/213", "id": 305350156, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTM1MDE1Ng==", "user": {"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-31T23:52:30Z", "updated_at": "2017-05-31T23:52:30Z", "author_association": "MEMBER", "body_html": "<p>It is a little tricky to do the OO-style right, but we're working to provide a convenient way to do it as follows.</p>\n<p>First of all, let your class be a sub-class of Layer from tensorflow/python/layers/base.py: <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/base.py\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/base.py</a></p>\n<p>This will handle everything related to scopes. It will open new scope if you provide a name for your layer, it will reuse if you're referring to the same object, but create new variables when you create a new object. If you subclass from Layer, the only thing you need to implement are the \"build\" and \"call\" functions, similar to Keras. You can see how we do it for the core Dense layer here:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/core.py#L106\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/core.py#L106</a></p>\n<p>I think the easiest way to do OO is to do the same, you can even use our OO layers already. They are not part of the public API yet because we want to test them properly and let them mature, but I think they're far enough to give them a try. If you want to have a look, the expected behaviors in terms of interaction with reuse have their unit tests here:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/core_test.py\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/core_test.py</a></p>\n<p>Hope that helps, we want to make a great OO interface too, so let us know if you try the core OO stuff and have troubles.</p>", "body_text": "It is a little tricky to do the OO-style right, but we're working to provide a convenient way to do it as follows.\nFirst of all, let your class be a sub-class of Layer from tensorflow/python/layers/base.py: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/base.py\nThis will handle everything related to scopes. It will open new scope if you provide a name for your layer, it will reuse if you're referring to the same object, but create new variables when you create a new object. If you subclass from Layer, the only thing you need to implement are the \"build\" and \"call\" functions, similar to Keras. You can see how we do it for the core Dense layer here:\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/core.py#L106\nI think the easiest way to do OO is to do the same, you can even use our OO layers already. They are not part of the public API yet because we want to test them properly and let them mature, but I think they're far enough to give them a try. If you want to have a look, the expected behaviors in terms of interaction with reuse have their unit tests here:\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/core_test.py\nHope that helps, we want to make a great OO interface too, so let us know if you try the core OO stuff and have troubles.", "body": "It is a little tricky to do the OO-style right, but we're working to provide a convenient way to do it as follows.\r\n\r\nFirst of all, let your class be a sub-class of Layer from tensorflow/python/layers/base.py: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/base.py\r\n\r\nThis will handle everything related to scopes. It will open new scope if you provide a name for your layer, it will reuse if you're referring to the same object, but create new variables when you create a new object. If you subclass from Layer, the only thing you need to implement are the \"build\" and \"call\" functions, similar to Keras. You can see how we do it for the core Dense layer here:\r\n  https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/core.py#L106\r\n\r\nI think the easiest way to do OO is to do the same, you can even use our OO layers already. They are not part of the public API yet because we want to test them properly and let them mature, but I think they're far enough to give them a try. If you want to have a look, the expected behaviors in terms of interaction with reuse have their unit tests here:\r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/core_test.py\r\n\r\nHope that helps, we want to make a great OO interface too, so let us know if you try the core OO stuff and have troubles."}