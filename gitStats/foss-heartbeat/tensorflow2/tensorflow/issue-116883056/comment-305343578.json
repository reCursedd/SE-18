{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/305343578", "html_url": "https://github.com/tensorflow/tensorflow/issues/213#issuecomment-305343578", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/213", "id": 305343578, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNTM0MzU3OA==", "user": {"login": "amirmazaheri1990", "id": 3743009, "node_id": "MDQ6VXNlcjM3NDMwMDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/3743009?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amirmazaheri1990", "html_url": "https://github.com/amirmazaheri1990", "followers_url": "https://api.github.com/users/amirmazaheri1990/followers", "following_url": "https://api.github.com/users/amirmazaheri1990/following{/other_user}", "gists_url": "https://api.github.com/users/amirmazaheri1990/gists{/gist_id}", "starred_url": "https://api.github.com/users/amirmazaheri1990/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amirmazaheri1990/subscriptions", "organizations_url": "https://api.github.com/users/amirmazaheri1990/orgs", "repos_url": "https://api.github.com/users/amirmazaheri1990/repos", "events_url": "https://api.github.com/users/amirmazaheri1990/events{/privacy}", "received_events_url": "https://api.github.com/users/amirmazaheri1990/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-31T23:07:55Z", "updated_at": "2017-05-31T23:07:55Z", "author_association": "NONE", "body_html": "<p>Hi,</p>\n<p>My question may be a little bit different than what is already asked.<br>\nIf I define a class like below:</p>\n<pre><code>\nclass Dense:\n    def __init__(self,Dsize,OSize):\n        self.variables_dict = {\n            \"FirstLayer\": tf.Variable(tf.random_normal(Dsize),  name=\"weights\"),\n            \"FirstLayer_b\": tf.Variable(tf.zeros(OSize), name=\"biases\")\n        }\n    def apply(self, input, equation = 'ijk,kd-&gt;ijd'):\n        output = tf.einsum(equation, input, self.variables_dict['FirstLayer']) + self.variables_dict['FirstLayer_b']\n        return output\n</code></pre>\n<p>And get <strong>one</strong> instance of this class in my code and use it multiple times by using its <code>apply</code> function. Does it mean that I have shared the same weight matrix (they have equal values in them) in different parts of my graph? Or it will make different matrices and update the variables differently?</p>\n<p>I am not using the <code>reuse = True</code> option.</p>\n<p>I would appreciate if someone helps me with this issue. It will help me a lot to understand the logic behind generating a graph in Tensorflow and also writing a clean and readable code.</p>", "body_text": "Hi,\nMy question may be a little bit different than what is already asked.\nIf I define a class like below:\n\nclass Dense:\n    def __init__(self,Dsize,OSize):\n        self.variables_dict = {\n            \"FirstLayer\": tf.Variable(tf.random_normal(Dsize),  name=\"weights\"),\n            \"FirstLayer_b\": tf.Variable(tf.zeros(OSize), name=\"biases\")\n        }\n    def apply(self, input, equation = 'ijk,kd->ijd'):\n        output = tf.einsum(equation, input, self.variables_dict['FirstLayer']) + self.variables_dict['FirstLayer_b']\n        return output\n\nAnd get one instance of this class in my code and use it multiple times by using its apply function. Does it mean that I have shared the same weight matrix (they have equal values in them) in different parts of my graph? Or it will make different matrices and update the variables differently?\nI am not using the reuse = True option.\nI would appreciate if someone helps me with this issue. It will help me a lot to understand the logic behind generating a graph in Tensorflow and also writing a clean and readable code.", "body": "Hi,\r\n\r\nMy question may be a little bit different than what is already asked.\r\nIf I define a class like below:\r\n\r\n```\r\n\r\nclass Dense:\r\n    def __init__(self,Dsize,OSize):\r\n        self.variables_dict = {\r\n            \"FirstLayer\": tf.Variable(tf.random_normal(Dsize),  name=\"weights\"),\r\n            \"FirstLayer_b\": tf.Variable(tf.zeros(OSize), name=\"biases\")\r\n        }\r\n    def apply(self, input, equation = 'ijk,kd->ijd'):\r\n        output = tf.einsum(equation, input, self.variables_dict['FirstLayer']) + self.variables_dict['FirstLayer_b']\r\n        return output\r\n```\r\n\r\n\r\nAnd get **one** instance of this class in my code and use it multiple times by using its `apply` function. Does it mean that I have shared the same weight matrix (they have equal values in them) in different parts of my graph? Or it will make different matrices and update the variables differently?\r\n\r\nI am not using the `reuse = True` option.\r\n\r\nI would appreciate if someone helps me with this issue. It will help me a lot to understand the logic behind generating a graph in Tensorflow and also writing a clean and readable code.\r\n\r\n\r\n"}