{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17236", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17236/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17236/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17236/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/17236", "id": 299897405, "node_id": "MDExOlB1bGxSZXF1ZXN0MTcxMTUxOTgx", "number": 17236, "title": "Error in variable_scope initialization, via estimator api, due to a panda.DataFrame without column headers", "user": {"login": "Stryker0301", "id": 28606703, "node_id": "MDQ6VXNlcjI4NjA2NzAz", "avatar_url": "https://avatars0.githubusercontent.com/u/28606703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stryker0301", "html_url": "https://github.com/Stryker0301", "followers_url": "https://api.github.com/users/Stryker0301/followers", "following_url": "https://api.github.com/users/Stryker0301/following{/other_user}", "gists_url": "https://api.github.com/users/Stryker0301/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stryker0301/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stryker0301/subscriptions", "organizations_url": "https://api.github.com/users/Stryker0301/orgs", "repos_url": "https://api.github.com/users/Stryker0301/repos", "events_url": "https://api.github.com/users/Stryker0301/events{/privacy}", "received_events_url": "https://api.github.com/users/Stryker0301/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-02-24T01:21:54Z", "updated_at": "2018-04-19T03:53:03Z", "closed_at": "2018-04-19T03:52:11Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17236", "html_url": "https://github.com/tensorflow/tensorflow/pull/17236", "diff_url": "https://github.com/tensorflow/tensorflow/pull/17236.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/17236.patch"}, "body_html": "<p>The variable_scope initialization generates an error when a panda.DataFrame object without any column headers is passed via the estimator api.</p>\n<p>To replicate this issue, please execute the below-specified code -</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> absolute_import\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> division\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> print_function\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> pandas <span class=\"pl-k\">as</span> pd\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">argv</span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Fetch the data</span>\n    (train_x, train_y), (test_x, test_y) <span class=\"pl-k\">=</span> load_data()\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Feature columns describe how to use the input.</span>\n    my_feature_columns <span class=\"pl-k\">=</span> []\n    <span class=\"pl-k\">for</span> key <span class=\"pl-k\">in</span> train_x.keys():\n        my_feature_columns.append(tf.feature_column.numeric_column(<span class=\"pl-v\">key</span><span class=\"pl-k\">=</span>key))\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Build 2 hidden layer DNN with 10, 10 units respectively.</span>\n    classifier <span class=\"pl-k\">=</span> tf.estimator.DNNClassifier(\n        <span class=\"pl-v\">feature_columns</span><span class=\"pl-k\">=</span>my_feature_columns,\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> Two hidden layers of 10 nodes each.</span>\n        <span class=\"pl-v\">hidden_units</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>],\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> The model must choose between 3 classes.</span>\n        <span class=\"pl-v\">n_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Train the Model.</span>\n    classifier.train(\n        <span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span>: train_input_fn(train_x, train_y,\n                                        <span class=\"pl-c1\">100</span>),\n        <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Evaluate the model.</span>\n    eval_result <span class=\"pl-k\">=</span> classifier.evaluate(\n        <span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span>: eval_input_fn(test_x, test_y,\n                                       <span class=\"pl-c1\">10</span>))\n\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-cce\">\\n</span>Test set accuracy: <span class=\"pl-c1\">{accuracy<span class=\"pl-k\">:0.3f</span>}</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">'</span></span>.format(<span class=\"pl-k\">**</span>eval_result))\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">load_data</span>():\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Note that there are no column names specified during the</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> DataFrame initialization</span>\n    train_x <span class=\"pl-k\">=</span> pd.DataFrame([[<span class=\"pl-c1\">6.4</span>, <span class=\"pl-c1\">2.8</span>, <span class=\"pl-c1\">5.6</span>, <span class=\"pl-c1\">2.2</span>],\n                            [<span class=\"pl-c1\">5</span>,\t<span class=\"pl-c1\">2.3</span>, <span class=\"pl-c1\">3.3</span>, <span class=\"pl-c1\">1</span>],\n                            [<span class=\"pl-c1\">4.9</span>, <span class=\"pl-c1\">2.5</span>, <span class=\"pl-c1\">4.5</span>, <span class=\"pl-c1\">1.7</span>],\n                            [<span class=\"pl-c1\">4.9</span>, <span class=\"pl-c1\">3.1</span>, <span class=\"pl-c1\">1.5</span>, <span class=\"pl-c1\">0.1</span>]], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">float</span>)\n    train_y <span class=\"pl-k\">=</span> pd.DataFrame([[<span class=\"pl-c1\">2</span>], [<span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">2</span>], [<span class=\"pl-c1\">0</span>]], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">float</span>)\n\n    test_x <span class=\"pl-k\">=</span> pd.DataFrame([[<span class=\"pl-c1\">4.4</span>, <span class=\"pl-c1\">3.2</span>, <span class=\"pl-c1\">1.3</span>, <span class=\"pl-c1\">0.2</span>]], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">float</span>)\n    test_y <span class=\"pl-k\">=</span> pd.DataFrame([[<span class=\"pl-c1\">2</span>]], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">float</span>)\n\n    <span class=\"pl-c1\">print</span>(train_x)\n\n    <span class=\"pl-k\">return</span> (train_x, train_y), (test_x, test_y)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">train_input_fn</span>(<span class=\"pl-smi\">features</span>, <span class=\"pl-smi\">labels</span>, <span class=\"pl-smi\">batch_size</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>An input function for training<span class=\"pl-pds\">\"\"\"</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Convert the inputs to a Dataset.</span>\n    dataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensor_slices((<span class=\"pl-c1\">dict</span>(features), labels))\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Shuffle, repeat, and batch the examples.</span>\n    dataset <span class=\"pl-k\">=</span> dataset.shuffle(<span class=\"pl-c1\">1000</span>).repeat().batch(batch_size)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Return the dataset.</span>\n    <span class=\"pl-k\">return</span> dataset\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">eval_input_fn</span>(<span class=\"pl-smi\">features</span>, <span class=\"pl-smi\">labels</span>, <span class=\"pl-smi\">batch_size</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>An input function for evaluation or prediction<span class=\"pl-pds\">\"\"\"</span></span>\n    features <span class=\"pl-k\">=</span> <span class=\"pl-c1\">dict</span>(features)\n    <span class=\"pl-k\">if</span> labels <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> No labels, use only features.</span>\n        inputs <span class=\"pl-k\">=</span> features\n    <span class=\"pl-k\">else</span>:\n        inputs <span class=\"pl-k\">=</span> (features, labels)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Convert the inputs to a Dataset.</span>\n    dataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensor_slices(inputs)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Batch the examples</span>\n    <span class=\"pl-k\">assert</span> batch_size <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>batch_size must not be None<span class=\"pl-pds\">\"</span></span>\n    dataset <span class=\"pl-k\">=</span> dataset.batch(batch_size)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Return the dataset.</span>\n    <span class=\"pl-k\">return</span> dataset\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    tf.logging.set_verbosity(tf.logging.<span class=\"pl-c1\">INFO</span>)\n    tf.app.run(main)\n</pre></div>\n<p>Output, printing the 'train_x' dataframe, before the error -</p>\n<div class=\"highlight highlight-source-python\"><pre>     <span class=\"pl-c1\">0</span>    <span class=\"pl-c1\">1</span>    <span class=\"pl-c1\">2</span>    <span class=\"pl-c1\">3</span>\n<span class=\"pl-c1\">0</span>  <span class=\"pl-c1\">6.4</span>  <span class=\"pl-c1\">2.8</span>  <span class=\"pl-c1\">5.6</span>  <span class=\"pl-c1\">2.2</span>\n<span class=\"pl-c1\">1</span>  <span class=\"pl-c1\">5.0</span>  <span class=\"pl-c1\">2.3</span>  <span class=\"pl-c1\">3.3</span>  <span class=\"pl-c1\">1.0</span>\n<span class=\"pl-c1\">2</span>  <span class=\"pl-c1\">4.9</span>  <span class=\"pl-c1\">2.5</span>  <span class=\"pl-c1\">4.5</span>  <span class=\"pl-c1\">1.7</span>\n<span class=\"pl-c1\">3</span>  <span class=\"pl-c1\">4.9</span>  <span class=\"pl-c1\">3.1</span>  <span class=\"pl-c1\">1.5</span>  <span class=\"pl-c1\">0.1</span></pre></div>\n<p>Note that there are no column headers provided, the respective index appears as the column header for the data frame which is of type integer.</p>\n<p>Traceback -</p>\n<div class=\"highlight highlight-source-python\"><pre>Traceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tf_bug.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">90</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n    tf.app.run(main)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages<span class=\"pl-cce\">\\t</span>ensorflow\\python\\platform<span class=\"pl-cce\">\\a</span>pp.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">124</span>, <span class=\"pl-k\">in</span> run\n    _sys.exit(main(argv))\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tf_bug.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">30</span>, <span class=\"pl-k\">in</span> main\n    steps<span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages<span class=\"pl-cce\">\\t</span>ensorflow\\python\\estimator\\estimator.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">314</span>, <span class=\"pl-k\">in</span> train\n    loss <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._train_model(input_fn, hooks, saving_listeners)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages<span class=\"pl-cce\">\\t</span>ensorflow\\python\\estimator\\estimator.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">743</span>, <span class=\"pl-k\">in</span> _train_model\n    features, labels, model_fn_lib.ModeKeys.<span class=\"pl-c1\">TRAIN</span>, <span class=\"pl-c1\">self</span>.config)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages<span class=\"pl-cce\">\\t</span>ensorflow\\python\\estimator\\estimator.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">725</span>, <span class=\"pl-k\">in</span> _call_model_fn\n    model_fn_results <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._model_fn(<span class=\"pl-v\">features</span><span class=\"pl-k\">=</span>features, <span class=\"pl-k\">**</span>kwargs)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages<span class=\"pl-cce\">\\t</span>ensorflow\\python\\estimator\\canned\\dnn.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">324</span>, <span class=\"pl-k\">in</span> _model_fn\n    config<span class=\"pl-k\">=</span>config)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages<span class=\"pl-cce\">\\t</span>ensorflow\\python\\estimator\\canned\\dnn.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">176</span>, <span class=\"pl-k\">in</span> _dnn_model_fn\n    logits <span class=\"pl-k\">=</span> logit_fn(<span class=\"pl-v\">features</span><span class=\"pl-k\">=</span>features, <span class=\"pl-v\">mode</span><span class=\"pl-k\">=</span>mode)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages<span class=\"pl-cce\">\\t</span>ensorflow\\python\\estimator\\canned\\dnn.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">90</span>, <span class=\"pl-k\">in</span> dnn_logit_fn\n    features<span class=\"pl-k\">=</span>features, feature_columns<span class=\"pl-k\">=</span>feature_columns)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages<span class=\"pl-cce\">\\t</span>ensorflow\\python<span class=\"pl-cce\">\\f</span>eature_column<span class=\"pl-cce\">\\f</span>eature_column.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">280</span>, <span class=\"pl-k\">in</span> input_layer\n    trainable, cols_to_vars)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages<span class=\"pl-cce\">\\t</span>ensorflow\\python<span class=\"pl-cce\">\\f</span>eature_column<span class=\"pl-cce\">\\f</span>eature_column.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">193</span>, <span class=\"pl-k\">in</span> _internal_input_layer\n    <span class=\"pl-c1\">None</span>, default_name<span class=\"pl-k\">=</span>column._var_scope_name):  <span class=\"pl-c\"><span class=\"pl-c\">#</span> pylint: disable=protected-access</span>\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages<span class=\"pl-cce\">\\t</span>ensorflow\\python\\ops<span class=\"pl-cce\">\\v</span>ariable_scope.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1929</span>, <span class=\"pl-k\">in</span> <span class=\"pl-c1\">__enter__</span>\n    unique_default_name <span class=\"pl-k\">=</span> _get_unique_variable_scope(<span class=\"pl-c1\">self</span>._default_name)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages<span class=\"pl-cce\">\\t</span>ensorflow\\python\\ops<span class=\"pl-cce\">\\v</span>ariable_scope.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1656</span>, <span class=\"pl-k\">in</span> _get_unique_variable_scope\n    name <span class=\"pl-k\">=</span> current_scope.name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> prefix <span class=\"pl-k\">if</span> current_scope.name <span class=\"pl-k\">else</span> prefix\n<span class=\"pl-c1\">TypeError</span>: must be <span class=\"pl-c1\">str</span>, <span class=\"pl-k\">not</span> <span class=\"pl-c1\">int</span></pre></div>", "body_text": "The variable_scope initialization generates an error when a panda.DataFrame object without any column headers is passed via the estimator api.\nTo replicate this issue, please execute the below-specified code -\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\nimport pandas as pd\n\n\ndef main(argv):\n    # Fetch the data\n    (train_x, train_y), (test_x, test_y) = load_data()\n\n    # Feature columns describe how to use the input.\n    my_feature_columns = []\n    for key in train_x.keys():\n        my_feature_columns.append(tf.feature_column.numeric_column(key=key))\n\n    # Build 2 hidden layer DNN with 10, 10 units respectively.\n    classifier = tf.estimator.DNNClassifier(\n        feature_columns=my_feature_columns,\n        # Two hidden layers of 10 nodes each.\n        hidden_units=[10, 10],\n        # The model must choose between 3 classes.\n        n_classes=3)\n\n    # Train the Model.\n    classifier.train(\n        input_fn=lambda: train_input_fn(train_x, train_y,\n                                        100),\n        steps=1000)\n\n    # Evaluate the model.\n    eval_result = classifier.evaluate(\n        input_fn=lambda: eval_input_fn(test_x, test_y,\n                                       10))\n\n    print('\\nTest set accuracy: {accuracy:0.3f}\\n'.format(**eval_result))\n\n\ndef load_data():\n\n    # Note that there are no column names specified during the\n    # DataFrame initialization\n    train_x = pd.DataFrame([[6.4, 2.8, 5.6, 2.2],\n                            [5,\t2.3, 3.3, 1],\n                            [4.9, 2.5, 4.5, 1.7],\n                            [4.9, 3.1, 1.5, 0.1]], dtype=float)\n    train_y = pd.DataFrame([[2], [1], [2], [0]], dtype=float)\n\n    test_x = pd.DataFrame([[4.4, 3.2, 1.3, 0.2]], dtype=float)\n    test_y = pd.DataFrame([[2]], dtype=float)\n\n    print(train_x)\n\n    return (train_x, train_y), (test_x, test_y)\n\n\ndef train_input_fn(features, labels, batch_size):\n    \"\"\"An input function for training\"\"\"\n    # Convert the inputs to a Dataset.\n    dataset = tf.data.Dataset.from_tensor_slices((dict(features), labels))\n\n    # Shuffle, repeat, and batch the examples.\n    dataset = dataset.shuffle(1000).repeat().batch(batch_size)\n\n    # Return the dataset.\n    return dataset\n\n\ndef eval_input_fn(features, labels, batch_size):\n    \"\"\"An input function for evaluation or prediction\"\"\"\n    features = dict(features)\n    if labels is None:\n        # No labels, use only features.\n        inputs = features\n    else:\n        inputs = (features, labels)\n\n    # Convert the inputs to a Dataset.\n    dataset = tf.data.Dataset.from_tensor_slices(inputs)\n\n    # Batch the examples\n    assert batch_size is not None, \"batch_size must not be None\"\n    dataset = dataset.batch(batch_size)\n\n    # Return the dataset.\n    return dataset\n\n\nif __name__ == '__main__':\n    tf.logging.set_verbosity(tf.logging.INFO)\n    tf.app.run(main)\n\nOutput, printing the 'train_x' dataframe, before the error -\n     0    1    2    3\n0  6.4  2.8  5.6  2.2\n1  5.0  2.3  3.3  1.0\n2  4.9  2.5  4.5  1.7\n3  4.9  3.1  1.5  0.1\nNote that there are no column headers provided, the respective index appears as the column header for the data frame which is of type integer.\nTraceback -\nTraceback (most recent call last):\n  File \"tf_bug.py\", line 90, in <module>\n    tf.app.run(main)\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\platform\\app.py\", line 124, in run\n    _sys.exit(main(argv))\n  File \"tf_bug.py\", line 30, in main\n    steps=1000)\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\estimator\\estimator.py\", line 314, in train\n    loss = self._train_model(input_fn, hooks, saving_listeners)\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\estimator\\estimator.py\", line 743, in _train_model\n    features, labels, model_fn_lib.ModeKeys.TRAIN, self.config)\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\estimator\\estimator.py\", line 725, in _call_model_fn\n    model_fn_results = self._model_fn(features=features, **kwargs)\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\estimator\\canned\\dnn.py\", line 324, in _model_fn\n    config=config)\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\estimator\\canned\\dnn.py\", line 176, in _dnn_model_fn\n    logits = logit_fn(features=features, mode=mode)\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\estimator\\canned\\dnn.py\", line 90, in dnn_logit_fn\n    features=features, feature_columns=feature_columns)\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\feature_column\\feature_column.py\", line 280, in input_layer\n    trainable, cols_to_vars)\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\feature_column\\feature_column.py\", line 193, in _internal_input_layer\n    None, default_name=column._var_scope_name):  # pylint: disable=protected-access\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\ops\\variable_scope.py\", line 1929, in __enter__\n    unique_default_name = _get_unique_variable_scope(self._default_name)\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\ops\\variable_scope.py\", line 1656, in _get_unique_variable_scope\n    name = current_scope.name + \"/\" + prefix if current_scope.name else prefix\nTypeError: must be str, not int", "body": "The variable_scope initialization generates an error when a panda.DataFrame object without any column headers is passed via the estimator api.\r\n\r\nTo replicate this issue, please execute the below-specified code - \r\n\r\n```python\r\nfrom __future__ import absolute_import\r\nfrom __future__ import division\r\nfrom __future__ import print_function\r\n\r\nimport tensorflow as tf\r\nimport pandas as pd\r\n\r\n\r\ndef main(argv):\r\n    # Fetch the data\r\n    (train_x, train_y), (test_x, test_y) = load_data()\r\n\r\n    # Feature columns describe how to use the input.\r\n    my_feature_columns = []\r\n    for key in train_x.keys():\r\n        my_feature_columns.append(tf.feature_column.numeric_column(key=key))\r\n\r\n    # Build 2 hidden layer DNN with 10, 10 units respectively.\r\n    classifier = tf.estimator.DNNClassifier(\r\n        feature_columns=my_feature_columns,\r\n        # Two hidden layers of 10 nodes each.\r\n        hidden_units=[10, 10],\r\n        # The model must choose between 3 classes.\r\n        n_classes=3)\r\n\r\n    # Train the Model.\r\n    classifier.train(\r\n        input_fn=lambda: train_input_fn(train_x, train_y,\r\n                                        100),\r\n        steps=1000)\r\n\r\n    # Evaluate the model.\r\n    eval_result = classifier.evaluate(\r\n        input_fn=lambda: eval_input_fn(test_x, test_y,\r\n                                       10))\r\n\r\n    print('\\nTest set accuracy: {accuracy:0.3f}\\n'.format(**eval_result))\r\n\r\n\r\ndef load_data():\r\n\r\n    # Note that there are no column names specified during the\r\n    # DataFrame initialization\r\n    train_x = pd.DataFrame([[6.4, 2.8, 5.6, 2.2],\r\n                            [5,\t2.3, 3.3, 1],\r\n                            [4.9, 2.5, 4.5, 1.7],\r\n                            [4.9, 3.1, 1.5, 0.1]], dtype=float)\r\n    train_y = pd.DataFrame([[2], [1], [2], [0]], dtype=float)\r\n\r\n    test_x = pd.DataFrame([[4.4, 3.2, 1.3, 0.2]], dtype=float)\r\n    test_y = pd.DataFrame([[2]], dtype=float)\r\n\r\n    print(train_x)\r\n\r\n    return (train_x, train_y), (test_x, test_y)\r\n\r\n\r\ndef train_input_fn(features, labels, batch_size):\r\n    \"\"\"An input function for training\"\"\"\r\n    # Convert the inputs to a Dataset.\r\n    dataset = tf.data.Dataset.from_tensor_slices((dict(features), labels))\r\n\r\n    # Shuffle, repeat, and batch the examples.\r\n    dataset = dataset.shuffle(1000).repeat().batch(batch_size)\r\n\r\n    # Return the dataset.\r\n    return dataset\r\n\r\n\r\ndef eval_input_fn(features, labels, batch_size):\r\n    \"\"\"An input function for evaluation or prediction\"\"\"\r\n    features = dict(features)\r\n    if labels is None:\r\n        # No labels, use only features.\r\n        inputs = features\r\n    else:\r\n        inputs = (features, labels)\r\n\r\n    # Convert the inputs to a Dataset.\r\n    dataset = tf.data.Dataset.from_tensor_slices(inputs)\r\n\r\n    # Batch the examples\r\n    assert batch_size is not None, \"batch_size must not be None\"\r\n    dataset = dataset.batch(batch_size)\r\n\r\n    # Return the dataset.\r\n    return dataset\r\n\r\n\r\nif __name__ == '__main__':\r\n    tf.logging.set_verbosity(tf.logging.INFO)\r\n    tf.app.run(main)\r\n\r\n```\r\n\r\nOutput, printing the 'train_x' dataframe, before the error - \r\n\r\n```python\r\n     0    1    2    3\r\n0  6.4  2.8  5.6  2.2\r\n1  5.0  2.3  3.3  1.0\r\n2  4.9  2.5  4.5  1.7\r\n3  4.9  3.1  1.5  0.1\r\n```\r\nNote that there are no column headers provided, the respective index appears as the column header for the data frame which is of type integer.\r\n\r\nTraceback - \r\n```python\r\nTraceback (most recent call last):\r\n  File \"tf_bug.py\", line 90, in <module>\r\n    tf.app.run(main)\r\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\platform\\app.py\", line 124, in run\r\n    _sys.exit(main(argv))\r\n  File \"tf_bug.py\", line 30, in main\r\n    steps=1000)\r\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\estimator\\estimator.py\", line 314, in train\r\n    loss = self._train_model(input_fn, hooks, saving_listeners)\r\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\estimator\\estimator.py\", line 743, in _train_model\r\n    features, labels, model_fn_lib.ModeKeys.TRAIN, self.config)\r\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\estimator\\estimator.py\", line 725, in _call_model_fn\r\n    model_fn_results = self._model_fn(features=features, **kwargs)\r\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\estimator\\canned\\dnn.py\", line 324, in _model_fn\r\n    config=config)\r\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\estimator\\canned\\dnn.py\", line 176, in _dnn_model_fn\r\n    logits = logit_fn(features=features, mode=mode)\r\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\estimator\\canned\\dnn.py\", line 90, in dnn_logit_fn\r\n    features=features, feature_columns=feature_columns)\r\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\feature_column\\feature_column.py\", line 280, in input_layer\r\n    trainable, cols_to_vars)\r\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\feature_column\\feature_column.py\", line 193, in _internal_input_layer\r\n    None, default_name=column._var_scope_name):  # pylint: disable=protected-access\r\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\ops\\variable_scope.py\", line 1929, in __enter__\r\n    unique_default_name = _get_unique_variable_scope(self._default_name)\r\n  File \"C:\\Users\\Sagar_Jadhav03\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\ops\\variable_scope.py\", line 1656, in _get_unique_variable_scope\r\n    name = current_scope.name + \"/\" + prefix if current_scope.name else prefix\r\nTypeError: must be str, not int\r\n```\r\n"}