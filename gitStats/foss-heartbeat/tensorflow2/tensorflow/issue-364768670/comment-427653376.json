{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/427653376", "html_url": "https://github.com/tensorflow/tensorflow/issues/22589#issuecomment-427653376", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22589", "id": 427653376, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzY1MzM3Ng==", "user": {"login": "twolodzko", "id": 3750140, "node_id": "MDQ6VXNlcjM3NTAxNDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3750140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twolodzko", "html_url": "https://github.com/twolodzko", "followers_url": "https://api.github.com/users/twolodzko/followers", "following_url": "https://api.github.com/users/twolodzko/following{/other_user}", "gists_url": "https://api.github.com/users/twolodzko/gists{/gist_id}", "starred_url": "https://api.github.com/users/twolodzko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twolodzko/subscriptions", "organizations_url": "https://api.github.com/users/twolodzko/orgs", "repos_url": "https://api.github.com/users/twolodzko/repos", "events_url": "https://api.github.com/users/twolodzko/events{/privacy}", "received_events_url": "https://api.github.com/users/twolodzko/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-07T13:25:06Z", "updated_at": "2018-10-07T13:26:41Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=42785337\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/wt-huang\">@wt-huang</a> Right, this is a possible and reasonable workaround. However, what I would normally expect is that when the previous model is not used any more (it gets detached from the <code>model</code> name), then some kind of destructor cleans it up, so that it does not interfere with the new model under the same name. This seems to de issue with having a destructor and garbage collector.</p>\n<p>Moreover, in this case I get an error because of doing something wrong, but <strong>what if I re-used the name and didn't get the error</strong>? Would I be working with a polluted namespace that stores all the history of everything that was previously assigned to this name? If so, this seems to be a straight way to really ugly and hard to trace bugs.</p>\n<p>What I'm saying is that the described problem is not much bother for me, as I could use different name, but it seems to be a symptom of something really ugly and serious beneath.</p>", "body_text": "@wt-huang Right, this is a possible and reasonable workaround. However, what I would normally expect is that when the previous model is not used any more (it gets detached from the model name), then some kind of destructor cleans it up, so that it does not interfere with the new model under the same name. This seems to de issue with having a destructor and garbage collector.\nMoreover, in this case I get an error because of doing something wrong, but what if I re-used the name and didn't get the error? Would I be working with a polluted namespace that stores all the history of everything that was previously assigned to this name? If so, this seems to be a straight way to really ugly and hard to trace bugs.\nWhat I'm saying is that the described problem is not much bother for me, as I could use different name, but it seems to be a symptom of something really ugly and serious beneath.", "body": "@wt-huang Right, this is a possible and reasonable workaround. However, what I would normally expect is that when the previous model is not used any more (it gets detached from the `model` name), then some kind of destructor cleans it up, so that it does not interfere with the new model under the same name. This seems to de issue with having a destructor and garbage collector.\r\n\r\nMoreover, in this case I get an error because of doing something wrong, but **what if I re-used the name and didn't get the error**? Would I be working with a polluted namespace that stores all the history of everything that was previously assigned to this name? If so, this seems to be a straight way to really ugly and hard to trace bugs.\r\n\r\nWhat I'm saying is that the described problem is not much bother for me, as I could use different name, but it seems to be a symptom of something really ugly and serious beneath."}