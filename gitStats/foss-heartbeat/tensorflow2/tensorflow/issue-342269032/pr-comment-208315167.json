{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/208315167", "pull_request_review_id": 144099582, "id": 208315167, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwODMxNTE2Nw==", "diff_hunk": "@@ -0,0 +1,284 @@\n+# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Implementation of iRprop+\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from tensorflow.python.ops import control_flow_ops\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import math_ops\n+from tensorflow.contrib.optimizer_v2 import optimizer_v2\n+from tensorflow.python.training import training_ops\n+\n+\n+class IRpropPlusOptimizer(optimizer_v2.OptimizerV2):\n+  \"\"\"Optimizer that implements the iRprop+ algorithm.\n+\n+  The Rprop (resilient backpropagation) algorithms are efficient gradient-based\n+  optimization algorithms. They require hardly any hyperparameter tuning.\n+\n+  In Rprop, the direction of each objective variable update is given by the sign\n+  of the partial derivative. The amount of the change is decoupled\n+  from the absolute value of the partial derivative. It is determined by a\n+  step-size parameter, which is individually adapted for each objective\n+  variable.\n+\n+  Rprop was originally proposed by Riedmiller and Braun in the article\n+  [A direct adaptive method for faster backpropagation learning:\n+  the RPROP algorithm](https://doi.org/10.1109/ICNN.1993.298623).\n+  The original Rprop algorithm uses weight-backtracking. It retracts the update\n+  of an objective variable if the update caused a change in sign of the\n+  corresponding partial derivative. The implememented Rprop variant, which is\n+  called iRprop+ and is described in the article\n+  [Empirical evaluation of the improved Rprop learning algorithms](https://doi.org/10.1016/S0925-2312(01)00700-7)\n+  only retracts an update if additionally the overall error increased.\n+  The TensorFlow implementation is described in the article\n+  [Resilient Backpropagation (Rprop) for Batch-learning in TensorFlow](https://openreview.net/forum?id=r1R0o7yDz).\n+\n+  **The Rprop algorithms are recommended for batch learning, _not_ for\n+  mini-batch learning.** The iRprop+ (improved Rprop with weight-backtracking)\n+  algorithm is empirically found to be faster and more robust than the\n+  [standard variant](RpropMinusOptimizer.md).\n+  See [Resilient Backpropagation (Rprop) for Batch-learning in\n+  TensorFlow](https://openreview.net/forum?id=r1R0o7yDz)\n+  for details and references.\n+  \"\"\"\n+\n+  def __init__(self,\n+               eta_minus=0.5,\n+               eta_plus=1.2,\n+               delta_zero=0.5,\n+               delta_min=1e-6,\n+               delta_max=50,\n+               use_locking=False, name=\"IRpropPlusOptimizer\"):\n+    \"\"\"Constructs a new IRpropPlusOptimizer object.\n+\n+    The pseudocode of the algorithm can be found in the articles\n+    [Empirical evaluation of the improved Rprop learning algorithms](https://doi.org/10.1016/S0925-2312(01)00700-7)\n+    and [Resilient Backpropagation (Rprop) for Batch-learning in TensorFlow](https://openreview.net/forum?id=r1R0o7yDz).\n+\n+    Initialization:\n+\n+    ```\n+    old_grad <- 0 (Initialize the gradient from the previous iteration g{t-1})\n+    delta_update <- delta_zero (Initialize step-size)\n+    t <- 0 (Initialize iteration counter)\n+    ```\n+\n+    The following update rule is performed for each individual objective\n+    variable (e.g., weight), where `g{t}` denotes the partial derivative of the\n+    objective function with respect to the objective variable at iteration `t`:\n+\n+    ```\n+    t <- t + 1\n+    grad_sign <- sign(g{t} * g{t-1})\n+    if (grad_sign > 0)\n+      delta_update{t} <- min(eta_plus * delta_update{t-1}, delta_max)\n+      variable{t+1} <- variable{t} -sign(g{t}) * delta_update{t}\n+    else if (grad_sign < 0)\n+      delta_update{t} <- max(eta_minus * delta_update{t-1}, delta_min)\n+      if (error{t} > error{t-1})\n+        variable{t+1} <- variable{t-1}\n+      g{t} = 0\n+    else\n+      variable{t+1} <- variable{t} - sign(g{t}) * delta_update{t}\n+\n+    ```\n+\n+    Args:\n+      eta_minus: Step-size decrease factor.\n+      eta_plus: Step-size increase factor.\n+      delta_zero: Initial step-size.\n+      delta_min: Lower bound on step-size.\n+      delta_max: Upper bound on step-size.\n+      use_locking: If True, use locks for update operations.\n+      name: Optional name for the operations created when applying gradients.\n+         Defaults to \"IRpropPlusOptimizer\".\n+   \"\"\"\n+\n+    super(IRpropPlusOptimizer, self).__init__(use_locking, name)\n+\n+    # Init parameters\n+    self._set_hyper(\"eta_minus\", eta_minus)\n+    self._set_hyper(\"eta_plus\", eta_plus)\n+    self._set_hyper(\"delta_zero\", delta_zero)\n+    self._set_hyper(\"delta_min\", delta_min)\n+    self._set_hyper(\"delta_max\", delta_max)\n+\n+    # Error auxiliary var\n+    self._error = None\n+\n+  def _create_vars(self, var_list, state):\n+    # Error tensors\n+    state.create_non_slot(initial_value=lambda: 0.0, name=\"error\")\n+    state.create_non_slot(initial_value=lambda: 0.0, name=\"old_error\")\n+\n+    for v in var_list:\n+      state.zeros_slot(v, \"old_grad\")\n+\n+      init_step = math_ops.add(\n+          array_ops.zeros_like(v),\n+          state.get_hyper(\"delta_zero\", v.dtype.base_dtype))\n+      state.create_slot_with_initializer(v, init_step, v.get_shape(),\n+                                         v.dtype.base_dtype, \"delta_update\")\n+\n+  def _get_error_values(self, state=None):\n+    if state is None:\n+      state = self._get_per_graph_state()\n+    return (state.get_non_slot(\"error\"),\n+            state.get_non_slot(\"old_error\"))\n+\n+  # Helper method to check if variable is scalar\n+  def _is_scalar(self, tensor):\n+    return tensor is not None and \\\n+            tensor.shape.ndims == 0\n+\n+  def _apply_dense(self, grad, var, state):\n+    old_grad = state.get_slot(var, \"old_grad\")\n+    delta_update = state.get_slot(var, \"delta_update\")\n+\n+    error, old_error = self._get_error_values(state)\n+    # Update the error E(t) passed in apply_gradients or minimize\n+    update_error = error.assign(self._error, use_locking=self._use_locking)\n+    return training_ops.apply_i_rprop_plus(\n+        var,\n+        old_grad,\n+        delta_update,\n+        state.get_hyper(\"eta_minus\", var.dtype.base_dtype),\n+        state.get_hyper(\"eta_plus\", var.dtype.base_dtype),\n+        state.get_hyper(\"delta_min\", var.dtype.base_dtype),\n+        state.get_hyper(\"delta_max\", var.dtype.base_dtype),\n+        math_ops.cast(update_error, var.dtype.base_dtype),\n+        math_ops.cast(old_error, var.dtype.base_dtype),\n+        grad, use_locking=self._use_locking).op\n+\n+  def _resource_apply_dense(self, grad, var, state):\n+    old_grad = state.get_slot(var, \"old_grad\")\n+    delta_update = state.get_slot(var, \"delta_update\")\n+\n+    error, old_error = self._get_error_values(state)\n+    update_error = error.assign(\n+        math_ops.cast(self._error, error.dtype.base_dtype),\n+        use_locking=self._use_locking)\n+    return training_ops.resource_apply_i_rprop_plus(\n+        var.handle,\n+        old_grad.handle,\n+        delta_update.handle,\n+        state.get_hyper(\"eta_minus\", var.dtype.base_dtype),\n+        state.get_hyper(\"eta_plus\", var.dtype.base_dtype),\n+        state.get_hyper(\"delta_min\", var.dtype.base_dtype),\n+        state.get_hyper(\"delta_max\", var.dtype.base_dtype),\n+        math_ops.cast(update_error, var.dtype.base_dtype),\n+        math_ops.cast(old_error, var.dtype.base_dtype),\n+        grad, use_locking=self._use_locking)\n+\n+  def minimize(self, loss, global_step=None, var_list=None,\n+               gate_gradients=optimizer_v2.OptimizerV2.GATE_OP,\n+               aggregation_method=None, colocate_gradients_with_ops=False,\n+               name=None, grad_loss=None):\n+    \"\"\"Add operations to minimize `loss` by updating `var_list`.\n+    This method simply combines calls `compute_gradients()` and\n+    `apply_gradients()`. If you want to process the gradient before applying\n+    them call `compute_gradients()` and `apply_gradients()` explicitly instead\n+    of using this function. The loss argument has to be passed as a 0-D Tensor.\n+    Args:\n+      loss: A 0-D `Tensor` containing the value to minimize.\n+      global_step: Optional `Variable` to increment by one after the\n+        variables have been updated.\n+      var_list: Optional list or tuple of `Variable` objects to update to\n+        minimize `loss`.  Defaults to the list of variables collected in\n+        the graph under the key `GraphKeys.TRAINABLE_VARIABLES`.\n+      gate_gradients: How to gate the computation of gradients.  Can be\n+        `GATE_NONE`, `GATE_OP`, or  `GATE_GRAPH`.\n+      aggregation_method: Specifies the method used to combine gradient terms.\n+        Valid values are defined in the class `AggregationMethod`.\n+      colocate_gradients_with_ops: If True, try colocating gradients with\n+        the corresponding op.\n+      name: Optional name for the returned operation.\n+      grad_loss: Optional. A `Tensor` holding the gradient computed for `loss`.\n+    Returns:\n+      An Operation that updates the variables in `var_list`.  If `global_step`\n+      was not `None`, that operation also increments `global_step`.\n+    Raises:\n+      ValueError: If some of the variables are not `Variable` objects.\n+      ValueError: If the `loss` is not a 0-D tensor (scalar).\n+    @compatibility(eager)\n+    When eager execution is enabled, `loss` should be a Python function that\n+    takes elements of `var_list` as arguments and computes the value to be\n+    minimized. If `var_list` is `None`, `loss` should take no arguments.\n+    Minimization (and gradient computation) is done with respect to the\n+    elements of `var_list` if not `None`, else with respect to any trainable\n+    variables created during the execution of the `loss` function.\n+    `gate_gradients`, `aggregation_method`, `colocate_gradients_with_ops` and\n+    `grad_loss` are ignored when eager execution is enabled.\n+    @end_compatibility\n+    \"\"\"\n+    # Override method from base class, the loss is required to be scalar\n+\n+    # Error E(t)\n+    if not self._is_scalar(loss):\n+      raise ValueError(\"'loss' (%s) must be a 0-D tensor.\" % loss)", "path": "tensorflow/contrib/opt/python/training/irprop_plus.py", "position": 237, "original_position": 234, "commit_id": "7e1c185bb1d31eeac606f7300303718dab2e9c8f", "original_commit_id": "4cb6c2502f8f44a709057c48d96d02cc56934740", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "body": "TF always reduces the loss to a scalar because tf.gradients only supports scalars.", "created_at": "2018-08-07T17:20:26Z", "updated_at": "2018-08-07T17:20:26Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20918#discussion_r208315167", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20918", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/208315167"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20918#discussion_r208315167"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20918"}}, "body_html": "<p>TF always reduces the loss to a scalar because tf.gradients only supports scalars.</p>", "body_text": "TF always reduces the loss to a scalar because tf.gradients only supports scalars.", "in_reply_to_id": 207285119}