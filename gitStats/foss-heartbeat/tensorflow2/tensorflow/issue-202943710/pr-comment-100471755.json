{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/100471755", "pull_request_review_id": 21160996, "id": 100471755, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDQ3MTc1NQ==", "diff_hunk": "@@ -0,0 +1,117 @@\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Methods to allow generator of dict with numpy arrays.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from types import FunctionType, GeneratorType\n+from collections import OrderedDict\n+\n+from tensorflow.contrib.learn.python.learn.dataframe.queues import feeding_functions\n+\n+\n+def generator_input_fn(x,\n+                       target_key=None,\n+                       batch_size=128,\n+                       num_epochs=1,\n+                       shuffle=True,\n+                       queue_capacity=1000,\n+                       num_threads=1):\n+  \"\"\"Returns input function that would feed a generator that yields dictionary\n+  of numpy arrays into the model. It is assumed that every dict yielded from\n+  the dictionary represents a single sample for every feature\n+\n+  This returns a function outputting `features` and `target` based on the dict\n+  of numpy arrays. The dict `features` has the same keys as an element yielded\n+  from x.\n+\n+  Example:\n+    ```python\n+    def generator():\n+      for index in range(10):\n+        yield collections.OrderedDict({height: np.random.randint(32,36), 'age':np.random.randint(18,80),\n+              \"label\":np.ones(1)})\n+\n+    with tf.Session() as session:\n+      input_fn = generator_io.generator_input_fn(\n+          generator, target_key=\"label\", batch_size=2, shuffle=False,\n+          num_epochs=1)\n+    ```\n+\n+  Args:\n+    x: Generator Function, returns a generator  that will yield the data\n+    target_key: String, the key of the numpy array in x dictionaries to use as\n+      target.\n+    batch_size: Integer, size of batches to return.\n+    num_epochs: Integer, number of epochs to iterate over data. If `None` will\n+      run forever.\n+    shuffle: Boolean, if True shuffles the queue. Avoid shuffle at prediction\n+      time.\n+    queue_capacity: Integer, size of queue to accumulate.\n+    num_threads: Integer, number of threads used for reading and enqueueing.\n+\n+  Returns:\n+    Function, that has signature of ()->(dict of `features`, `target`)\n+\n+  Raises:\n+    TypeError: `x` is not `FunctionType`.\n+    TypeError: `x()` is not `GeneratorType`.\n+    TypeError: `next(x())` is not `dict`.\n+    TypeError: `target_key` is not `str`.\n+    KeyError:  `target_key` not a key in next(`x()`)\n+  \"\"\"\n+  \n+  def input_fn():\n+    \"\"\"generator input function.\"\"\"\n+    if not isinstance(x, FunctionType):", "path": "tensorflow/contrib/learn/python/learn/learn_io/generator_io.py", "position": null, "original_position": 80, "commit_id": "075d7c4bb35bd4b44705cb0d473fed8300742405", "original_commit_id": "ec4f53dd73b6e864f7f990f716e7468ffdb4bf09", "user": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "body": "Why does this need to be a function which when called returns a generator? Why not just take any object with __next__ (any generator-like)?", "created_at": "2017-02-10T05:01:40Z", "updated_at": "2017-03-30T06:43:17Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/7045#discussion_r100471755", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7045", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/100471755"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/7045#discussion_r100471755"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7045"}}, "body_html": "<p>Why does this need to be a function which when called returns a generator? Why not just take any object with <strong>next</strong> (any generator-like)?</p>", "body_text": "Why does this need to be a function which when called returns a generator? Why not just take any object with next (any generator-like)?"}