{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/108699456", "pull_request_review_id": 29747473, "id": 108699456, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODY5OTQ1Ng==", "diff_hunk": "@@ -0,0 +1,132 @@\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Methods to allow generator of dict with numpy arrays.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from types import FunctionType, GeneratorType\n+\n+from tensorflow.contrib.learn.python.learn.dataframe.queues import feeding_functions\n+\n+\n+def generator_input_fn(x,\n+                       target_key=None,\n+                       batch_size=128,\n+                       num_epochs=1,\n+                       shuffle=True,\n+                       queue_capacity=1000,\n+                       num_threads=1):\n+  \"\"\"Returns input function that would dicts of numpy arrays\n+       yielded from a generator.\n+  \n+  It is assumed that every dict yielded from the dictionary represents\n+  a single sample. The generator should consume a single epoch of the data.\n+\n+  This returns a function outputting `features` and `target` based on the dict\n+  of numpy arrays. The dict `features` has the same keys as an element yielded\n+  from x.\n+\n+  Example:\n+    ```python\n+    def generator():\n+      for index in range(10):\n+        yield {'height': np.random.randint(32,36),\n+              'age': np.random.randint(18, 80),\n+              'label': np.ones(1)}\n+\n+    with tf.Session() as session:\n+      input_fn = generator_io.generator_input_fn(\n+          generator, target_key=\"label\", batch_size=2, shuffle=False,\n+          num_epochs=1)\n+    ```\n+\n+  Args:\n+    x: Generator Function, returns a `Generator` that will yield the data\n+      in `dict` of numpy arrays\n+    target_key: String or List of Strings, the key or list of keys of\n+      the numpy arrays in x dictionaries to use as target.\n+    batch_size: Integer, size of batches to return.\n+    num_epochs: Integer, number of epochs to iterate over data. If `None` will\n+      run forever.\n+    shuffle: Boolean, if True shuffles the queue. Avoid shuffle at prediction\n+      time.\n+    queue_capacity: Integer, size of queue to accumulate.\n+    num_threads: Integer, number of threads used for reading and enqueueing.\n+\n+  Returns:\n+    Function, that returns a feature `dict` with `Tensors` and an optional\n+     label `dict` with `Tensors`, or if target_key is `str` label is a `Tensor`\n+\n+  Raises:\n+    TypeError: `x` is not `FunctionType`.\n+    TypeError: `x()` is not `GeneratorType`.\n+    TypeError: `next(x())` is not `dict`.\n+    TypeError: `target_key` is not `str` or `target_key` is not `list` of `str`.\n+    KeyError:  `target_key` not a key or `target_key[index]` not in next(`x()`).\n+  \"\"\"\n+  if not isinstance(x, FunctionType):\n+    raise TypeError('x must be generator function ; got {}'.format(\n+        type(x).__name__))\n+  generator = x()\n+  if not isinstance(generator, GeneratorType):\n+    raise TypeError('x() must be generator ; got {}'.format(\n+        type(generator).__name__))\n+  data = next(generator)\n+  if not isinstance(data, dict):\n+    raise TypeError('x() must yield dict ; got {}'.format(\n+        type(data).__name__))\n+  input_keys = sorted(next(x()).keys())\n+  if target_key is not None:\n+      if isinstance(target_key, str):\n+        target_key = [target_key]\n+      elif isinstance(target_key, list):\n+        for item in target_key:\n+          if not isinstance(item, str):\n+            raise TypeError(\n+              'target_key must be str or list of str ; got {}'.format(\n+                  type(item).__name__))\n+          if item not in input_keys:\n+            raise KeyError(\n+              'target_key or target_key[i] not in yielded dict ; got {}'.format(\n+                  item))\n+      else:\n+        raise TypeError('target_key must be str or list of str ; got {}'.format(\n+          type(target_key).__name__))", "path": "tensorflow/contrib/learn/python/learn/learn_io/generator_io.py", "position": null, "original_position": 108, "commit_id": "075d7c4bb35bd4b44705cb0d473fed8300742405", "original_commit_id": "6634588fbd699a494f8c7e9e8c2725e006b012af", "user": {"login": "agistrueai", "id": 23721105, "node_id": "MDQ6VXNlcjIzNzIxMTA1", "avatar_url": "https://avatars3.githubusercontent.com/u/23721105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agistrueai", "html_url": "https://github.com/agistrueai", "followers_url": "https://api.github.com/users/agistrueai/followers", "following_url": "https://api.github.com/users/agistrueai/following{/other_user}", "gists_url": "https://api.github.com/users/agistrueai/gists{/gist_id}", "starred_url": "https://api.github.com/users/agistrueai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agistrueai/subscriptions", "organizations_url": "https://api.github.com/users/agistrueai/orgs", "repos_url": "https://api.github.com/users/agistrueai/repos", "events_url": "https://api.github.com/users/agistrueai/events{/privacy}", "received_events_url": "https://api.github.com/users/agistrueai/received_events", "type": "User", "site_admin": false}, "body": "It's how it's being used everywhere else. e.g. inside feeding_functions\r\n<img width=\"573\" alt=\"screen shot 2017-03-29 at 15 57 00\" src=\"https://cloud.githubusercontent.com/assets/23721105/24461246/73d144b8-1498-11e7-9ccb-e97e697d10a2.png\">\r\n", "created_at": "2017-03-29T14:59:10Z", "updated_at": "2017-03-30T06:43:17Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/7045#discussion_r108699456", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7045", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/108699456"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/7045#discussion_r108699456"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7045"}}, "body_html": "<p>It's how it's being used everywhere else. e.g. inside feeding_functions<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/23721105/24461246/73d144b8-1498-11e7-9ccb-e97e697d10a2.png\"><img width=\"573\" alt=\"screen shot 2017-03-29 at 15 57 00\" src=\"https://cloud.githubusercontent.com/assets/23721105/24461246/73d144b8-1498-11e7-9ccb-e97e697d10a2.png\" style=\"max-width:100%;\"></a></p>", "body_text": "It's how it's being used everywhere else. e.g. inside feeding_functions", "in_reply_to_id": 108552922}