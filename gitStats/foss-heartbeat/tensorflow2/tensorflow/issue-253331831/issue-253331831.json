{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12649", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12649/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12649/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12649/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12649", "id": 253331831, "node_id": "MDU6SXNzdWUyNTMzMzE4MzE=", "number": 12649, "title": "Android buffer overflow exception when running only a certain model above a certain image resolution?", "user": {"login": "kwotsin", "id": 11178344, "node_id": "MDQ6VXNlcjExMTc4MzQ0", "avatar_url": "https://avatars2.githubusercontent.com/u/11178344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwotsin", "html_url": "https://github.com/kwotsin", "followers_url": "https://api.github.com/users/kwotsin/followers", "following_url": "https://api.github.com/users/kwotsin/following{/other_user}", "gists_url": "https://api.github.com/users/kwotsin/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwotsin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwotsin/subscriptions", "organizations_url": "https://api.github.com/users/kwotsin/orgs", "repos_url": "https://api.github.com/users/kwotsin/repos", "events_url": "https://api.github.com/users/kwotsin/events{/privacy}", "received_events_url": "https://api.github.com/users/kwotsin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "andrewharp", "id": 3376817, "node_id": "MDQ6VXNlcjMzNzY4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3376817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewharp", "html_url": "https://github.com/andrewharp", "followers_url": "https://api.github.com/users/andrewharp/followers", "following_url": "https://api.github.com/users/andrewharp/following{/other_user}", "gists_url": "https://api.github.com/users/andrewharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewharp/subscriptions", "organizations_url": "https://api.github.com/users/andrewharp/orgs", "repos_url": "https://api.github.com/users/andrewharp/repos", "events_url": "https://api.github.com/users/andrewharp/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewharp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "andrewharp", "id": 3376817, "node_id": "MDQ6VXNlcjMzNzY4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3376817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewharp", "html_url": "https://github.com/andrewharp", "followers_url": "https://api.github.com/users/andrewharp/followers", "following_url": "https://api.github.com/users/andrewharp/following{/other_user}", "gists_url": "https://api.github.com/users/andrewharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewharp/subscriptions", "organizations_url": "https://api.github.com/users/andrewharp/orgs", "repos_url": "https://api.github.com/users/andrewharp/repos", "events_url": "https://api.github.com/users/andrewharp/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewharp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2017-08-28T13:38:11Z", "updated_at": "2018-11-06T16:27:54Z", "closed_at": "2018-02-06T18:47:23Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Android Lollipop</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.2</li>\n<li><strong>Python version</strong>: 2.7.12</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 4.5</li>\n<li><strong>CUDA/cuDNN version</strong>: -</li>\n<li><strong>GPU model and memory</strong>: -</li>\n<li><strong>Exact command to reproduce</strong>: Running app on android studio</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<p>I have met with a very peculiar problem that seem to show that a certain model, Inception V3, which I got from the TF-slim library, seem to consume more memory than usual and cause a bufferoverflow problem like in here:</p>\n<pre><code>08-28 21:23:40.121 1094-1094/com.example.android.androidevaluateimagenet D/AndroidRuntime: Shutting down VM\n08-28 21:23:40.122 1094-1094/com.example.android.androidevaluateimagenet E/AndroidRuntime: FATAL EXCEPTION: main\n                                                                                           Process: com.example.android.androidevaluateimagenet, PID: 1094\n                                                                                           java.nio.BufferOverflowException\n                                                                                               at java.nio.FloatBuffer.put(FloatBuffer.java:444)\n                                                                                               at org.tensorflow.Tensor.writeTo(Tensor.java:390)\n                                                                                               at org.tensorflow.contrib.android.TensorFlowInferenceInterface.fetch(TensorFlowInferenceInterface.java:338)\n                                                                                               at org.tensorflow.contrib.android.TensorFlowInferenceInterface.fetch(TensorFlowInferenceInterface.java:301)\n                                                                                               at com.example.android.androidevaluateimagenet.TensorFlowImageClassifier.recognizeImage(TensorFlowImageClassifier.java:149)\n                                                                                               at com.example.android.androidevaluateimagenet.MainActivity.getInferenceTime(MainActivity.java:267)\n                                                                                               at com.example.android.androidevaluateimagenet.MainActivity$2.onClick(MainActivity.java:345)\n                                                                                               at android.view.View.performClick(View.java:4763)\n                                                                                               at android.view.View$PerformClick.run(View.java:19821)\n                                                                                               at android.os.Handler.handleCallback(Handler.java:739)\n                                                                                               at android.os.Handler.dispatchMessage(Handler.java:95)\n                                                                                               at android.os.Looper.loop(Looper.java:135)\n                                                                                               at android.app.ActivityThread.main(ActivityThread.java:5272)\n                                                                                               at java.lang.reflect.Method.invoke(Native Method)\n                                                                                               at java.lang.reflect.Method.invoke(Method.java:372)\n                                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:909)\n                                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:704)\n</code></pre>\n<p>Specifically, if you try an image resolution higher than 360x360 in the model, it crashes with the error. The interesting thing is that this doesn't happen for a significantly larger model, the Inception Resnet V2, although it supposedly consumes a lot more memory. With that larger inception resnet v2 model, I can use a resolution of over 400 with no issues. I have rebooted my device, switched it and run it on another identical device and another brand of device, but still there's this problem. I can't exactly locate the issue, but specifically here is what I have traced in the error:</p>\n<p>Specific error stack trace:</p>\n<p><strong>TensorFlowImageClassifier.java:</strong></p>\n<pre><code>    inferenceInterface.fetch(outputName, outputs);\n</code></pre>\n<p><strong>TensorFlowInferenceInterace.java:</strong></p>\n<pre><code>public void fetch(String var1, float[] var2) {\n    this.fetch(var1, FloatBuffer.wrap(var2));\n}\n</code></pre>\n<p><strong>Tensor.java:</strong></p>\n<pre><code>public void writeTo(FloatBuffer var1) {\n    if(this.dtype != DataType.FLOAT) {\n        throw incompatibleBuffer(var1, this.dtype);\n    } else {\n        ByteBuffer var2 = this.buffer();\n        var1.put(var2.asFloatBuffer());\n    }\n}\n</code></pre>\n<p><strong>FloatBuffer.java:</strong></p>\n<pre><code>public FloatBuffer put(FloatBuffer src) {\n    if (src == this)\n        throw new IllegalArgumentException();\n    int n = src.remaining();\n    if (n &gt; remaining())\n        throw new BufferOverflowException();\n    for (int i = 0; i &lt; n; i++)\n        put(src.get());\n    return this;\n}\n</code></pre>\n<p>I am not sure why this happens, as everything else works. In fact, if I try a resolution below 360, the Inception V3 model works perfectly fine. Note that I got the checkpoint model from TF-slim and froze it. I believe the method I used to freeze it works well, since there is no problem for all other models except Inception V3. So I can only conclude the problem lies within the layers. But I am not exactly sure how I can find out which layer is causing the problem, or even if it is because of the layers, I'm not sure how to fix it. I have included the layers of Inception V3 and Inception Resnet V2 in order here:</p>\n<p>Inception V3 Layers: <a href=\"https://gist.github.com/kwotsin/82016b003057cdcffec1bc9d1ea1e02b\">https://gist.github.com/kwotsin/82016b003057cdcffec1bc9d1ea1e02b</a><br>\nInception Resnet V2 Layers: <a href=\"https://gist.github.com/kwotsin/893e11fe171af426091b89645d6a86d3\">https://gist.github.com/kwotsin/893e11fe171af426091b89645d6a86d3</a></p>\n<p>If it is really the problem within the model, then I thought it could be because of a faulty implementation of a certain operation that is causing overly huge memory consumed.</p>\n<p>As an alternative fix, is there a way to check and raise the limit of the buffer size for the app to run successfully?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Android Lollipop\nTensorFlow installed from (source or binary): Source\nTensorFlow version (use command below): 1.2\nPython version: 2.7.12\nBazel version (if compiling from source): 4.5\nCUDA/cuDNN version: -\nGPU model and memory: -\nExact command to reproduce: Running app on android studio\n\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\nI have met with a very peculiar problem that seem to show that a certain model, Inception V3, which I got from the TF-slim library, seem to consume more memory than usual and cause a bufferoverflow problem like in here:\n08-28 21:23:40.121 1094-1094/com.example.android.androidevaluateimagenet D/AndroidRuntime: Shutting down VM\n08-28 21:23:40.122 1094-1094/com.example.android.androidevaluateimagenet E/AndroidRuntime: FATAL EXCEPTION: main\n                                                                                           Process: com.example.android.androidevaluateimagenet, PID: 1094\n                                                                                           java.nio.BufferOverflowException\n                                                                                               at java.nio.FloatBuffer.put(FloatBuffer.java:444)\n                                                                                               at org.tensorflow.Tensor.writeTo(Tensor.java:390)\n                                                                                               at org.tensorflow.contrib.android.TensorFlowInferenceInterface.fetch(TensorFlowInferenceInterface.java:338)\n                                                                                               at org.tensorflow.contrib.android.TensorFlowInferenceInterface.fetch(TensorFlowInferenceInterface.java:301)\n                                                                                               at com.example.android.androidevaluateimagenet.TensorFlowImageClassifier.recognizeImage(TensorFlowImageClassifier.java:149)\n                                                                                               at com.example.android.androidevaluateimagenet.MainActivity.getInferenceTime(MainActivity.java:267)\n                                                                                               at com.example.android.androidevaluateimagenet.MainActivity$2.onClick(MainActivity.java:345)\n                                                                                               at android.view.View.performClick(View.java:4763)\n                                                                                               at android.view.View$PerformClick.run(View.java:19821)\n                                                                                               at android.os.Handler.handleCallback(Handler.java:739)\n                                                                                               at android.os.Handler.dispatchMessage(Handler.java:95)\n                                                                                               at android.os.Looper.loop(Looper.java:135)\n                                                                                               at android.app.ActivityThread.main(ActivityThread.java:5272)\n                                                                                               at java.lang.reflect.Method.invoke(Native Method)\n                                                                                               at java.lang.reflect.Method.invoke(Method.java:372)\n                                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:909)\n                                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:704)\n\nSpecifically, if you try an image resolution higher than 360x360 in the model, it crashes with the error. The interesting thing is that this doesn't happen for a significantly larger model, the Inception Resnet V2, although it supposedly consumes a lot more memory. With that larger inception resnet v2 model, I can use a resolution of over 400 with no issues. I have rebooted my device, switched it and run it on another identical device and another brand of device, but still there's this problem. I can't exactly locate the issue, but specifically here is what I have traced in the error:\nSpecific error stack trace:\nTensorFlowImageClassifier.java:\n    inferenceInterface.fetch(outputName, outputs);\n\nTensorFlowInferenceInterace.java:\npublic void fetch(String var1, float[] var2) {\n    this.fetch(var1, FloatBuffer.wrap(var2));\n}\n\nTensor.java:\npublic void writeTo(FloatBuffer var1) {\n    if(this.dtype != DataType.FLOAT) {\n        throw incompatibleBuffer(var1, this.dtype);\n    } else {\n        ByteBuffer var2 = this.buffer();\n        var1.put(var2.asFloatBuffer());\n    }\n}\n\nFloatBuffer.java:\npublic FloatBuffer put(FloatBuffer src) {\n    if (src == this)\n        throw new IllegalArgumentException();\n    int n = src.remaining();\n    if (n > remaining())\n        throw new BufferOverflowException();\n    for (int i = 0; i < n; i++)\n        put(src.get());\n    return this;\n}\n\nI am not sure why this happens, as everything else works. In fact, if I try a resolution below 360, the Inception V3 model works perfectly fine. Note that I got the checkpoint model from TF-slim and froze it. I believe the method I used to freeze it works well, since there is no problem for all other models except Inception V3. So I can only conclude the problem lies within the layers. But I am not exactly sure how I can find out which layer is causing the problem, or even if it is because of the layers, I'm not sure how to fix it. I have included the layers of Inception V3 and Inception Resnet V2 in order here:\nInception V3 Layers: https://gist.github.com/kwotsin/82016b003057cdcffec1bc9d1ea1e02b\nInception Resnet V2 Layers: https://gist.github.com/kwotsin/893e11fe171af426091b89645d6a86d3\nIf it is really the problem within the model, then I thought it could be because of a faulty implementation of a certain operation that is causing overly huge memory consumed.\nAs an alternative fix, is there a way to check and raise the limit of the buffer size for the app to run successfully?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Android Lollipop\r\n- **TensorFlow installed from (source or binary)**: Source\r\n- **TensorFlow version (use command below)**: 1.2\r\n- **Python version**: 2.7.12\r\n- **Bazel version (if compiling from source)**: 4.5\r\n- **CUDA/cuDNN version**: -\r\n- **GPU model and memory**: -\r\n- **Exact command to reproduce**: Running app on android studio\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n\r\nI have met with a very peculiar problem that seem to show that a certain model, Inception V3, which I got from the TF-slim library, seem to consume more memory than usual and cause a bufferoverflow problem like in here:\r\n\r\n```\r\n08-28 21:23:40.121 1094-1094/com.example.android.androidevaluateimagenet D/AndroidRuntime: Shutting down VM\r\n08-28 21:23:40.122 1094-1094/com.example.android.androidevaluateimagenet E/AndroidRuntime: FATAL EXCEPTION: main\r\n                                                                                           Process: com.example.android.androidevaluateimagenet, PID: 1094\r\n                                                                                           java.nio.BufferOverflowException\r\n                                                                                               at java.nio.FloatBuffer.put(FloatBuffer.java:444)\r\n                                                                                               at org.tensorflow.Tensor.writeTo(Tensor.java:390)\r\n                                                                                               at org.tensorflow.contrib.android.TensorFlowInferenceInterface.fetch(TensorFlowInferenceInterface.java:338)\r\n                                                                                               at org.tensorflow.contrib.android.TensorFlowInferenceInterface.fetch(TensorFlowInferenceInterface.java:301)\r\n                                                                                               at com.example.android.androidevaluateimagenet.TensorFlowImageClassifier.recognizeImage(TensorFlowImageClassifier.java:149)\r\n                                                                                               at com.example.android.androidevaluateimagenet.MainActivity.getInferenceTime(MainActivity.java:267)\r\n                                                                                               at com.example.android.androidevaluateimagenet.MainActivity$2.onClick(MainActivity.java:345)\r\n                                                                                               at android.view.View.performClick(View.java:4763)\r\n                                                                                               at android.view.View$PerformClick.run(View.java:19821)\r\n                                                                                               at android.os.Handler.handleCallback(Handler.java:739)\r\n                                                                                               at android.os.Handler.dispatchMessage(Handler.java:95)\r\n                                                                                               at android.os.Looper.loop(Looper.java:135)\r\n                                                                                               at android.app.ActivityThread.main(ActivityThread.java:5272)\r\n                                                                                               at java.lang.reflect.Method.invoke(Native Method)\r\n                                                                                               at java.lang.reflect.Method.invoke(Method.java:372)\r\n                                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:909)\r\n                                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:704)\r\n```\r\n\r\nSpecifically, if you try an image resolution higher than 360x360 in the model, it crashes with the error. The interesting thing is that this doesn't happen for a significantly larger model, the Inception Resnet V2, although it supposedly consumes a lot more memory. With that larger inception resnet v2 model, I can use a resolution of over 400 with no issues. I have rebooted my device, switched it and run it on another identical device and another brand of device, but still there's this problem. I can't exactly locate the issue, but specifically here is what I have traced in the error:\r\n\r\n\r\nSpecific error stack trace:\r\n\r\n**TensorFlowImageClassifier.java:**\r\n\r\n        inferenceInterface.fetch(outputName, outputs);\r\n\r\n**TensorFlowInferenceInterace.java:**\r\n\r\n    public void fetch(String var1, float[] var2) {\r\n        this.fetch(var1, FloatBuffer.wrap(var2));\r\n    }\r\n\r\n**Tensor.java:**\r\n\r\n    public void writeTo(FloatBuffer var1) {\r\n        if(this.dtype != DataType.FLOAT) {\r\n            throw incompatibleBuffer(var1, this.dtype);\r\n        } else {\r\n            ByteBuffer var2 = this.buffer();\r\n            var1.put(var2.asFloatBuffer());\r\n        }\r\n    }\r\n\r\n**FloatBuffer.java:**\r\n\r\n    public FloatBuffer put(FloatBuffer src) {\r\n        if (src == this)\r\n            throw new IllegalArgumentException();\r\n        int n = src.remaining();\r\n        if (n > remaining())\r\n            throw new BufferOverflowException();\r\n        for (int i = 0; i < n; i++)\r\n            put(src.get());\r\n        return this;\r\n    }\r\n\r\nI am not sure why this happens, as everything else works. In fact, if I try a resolution below 360, the Inception V3 model works perfectly fine. Note that I got the checkpoint model from TF-slim and froze it. I believe the method I used to freeze it works well, since there is no problem for all other models except Inception V3. So I can only conclude the problem lies within the layers. But I am not exactly sure how I can find out which layer is causing the problem, or even if it is because of the layers, I'm not sure how to fix it. I have included the layers of Inception V3 and Inception Resnet V2 in order here:\r\n\r\nInception V3 Layers: https://gist.github.com/kwotsin/82016b003057cdcffec1bc9d1ea1e02b\r\nInception Resnet V2 Layers: https://gist.github.com/kwotsin/893e11fe171af426091b89645d6a86d3\r\n\r\nIf it is really the problem within the model, then I thought it could be because of a faulty implementation of a certain operation that is causing overly huge memory consumed.\r\n\r\nAs an alternative fix, is there a way to check and raise the limit of the buffer size for the app to run successfully?"}