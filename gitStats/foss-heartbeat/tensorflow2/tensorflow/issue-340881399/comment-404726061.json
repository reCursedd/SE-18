{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/404726061", "html_url": "https://github.com/tensorflow/tensorflow/issues/20767#issuecomment-404726061", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20767", "id": 404726061, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDcyNjA2MQ==", "user": {"login": "sedhha", "id": 36355685, "node_id": "MDQ6VXNlcjM2MzU1Njg1", "avatar_url": "https://avatars0.githubusercontent.com/u/36355685?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sedhha", "html_url": "https://github.com/sedhha", "followers_url": "https://api.github.com/users/sedhha/followers", "following_url": "https://api.github.com/users/sedhha/following{/other_user}", "gists_url": "https://api.github.com/users/sedhha/gists{/gist_id}", "starred_url": "https://api.github.com/users/sedhha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sedhha/subscriptions", "organizations_url": "https://api.github.com/users/sedhha/orgs", "repos_url": "https://api.github.com/users/sedhha/repos", "events_url": "https://api.github.com/users/sedhha/events{/privacy}", "received_events_url": "https://api.github.com/users/sedhha/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-13T05:01:14Z", "updated_at": "2018-07-13T05:01:14Z", "author_association": "NONE", "body_html": "<p>Here is the problem I am facing... I found object detection script in jupyter notebook and made necessary changes to read objects in real time and form object detection. But the problem I am facing is each time I run the script I have to download the model again and again. Here is the code:<br>\n`import numpy as np<br>\nimport os<br>\nimport six.moves.urllib as urllib<br>\nimport sys<br>\nimport tarfile<br>\nimport tensorflow as tf<br>\nimport zipfile</p>\n<p>from collections import defaultdict<br>\nfrom io import StringIO<br>\n#from matplotlib import pyplot as plt<br>\nfrom PIL import Image<br>\nprint('Stage-1 Done')<br>\n##################################################################<br>\nimport cv2<br>\ncap = cv2.VideoCapture(0)<br>\nsys.path.append(\"..\")<br>\nfrom utils import label_map_util<br>\nfrom utils import visualization_utils as vis_util<br>\nprint('Stage-2 Done')<br>\n##################################################################<br>\nMODEL_NAME = 'ssd_mobilenet_v1_coco_11_06_2017'<br>\nMODEL_FILE = MODEL_NAME + '.tar.gz'<br>\nDOWNLOAD_BASE = '<a href=\"http://download.tensorflow.org/models/object_detection/\" rel=\"nofollow\">http://download.tensorflow.org/models/object_detection/</a>'</p>\n<h1>Path to frozen detection graph. This is the actual model that is used for the object detection.</h1>\n<p>PATH_TO_CKPT = MODEL_NAME + '/frozen_inference_graph.pb'</p>\n<h1>List of the strings that is used to add correct label for each box.</h1>\n<p>PATH_TO_LABELS = os.path.join('data', 'mscoco_label_map.pbtxt')</p>\n<p>NUM_CLASSES = 90<br>\nprint('Stage-3 Done, NUM_CLASSES = %d'%NUM_CLASSES)<br>\n################################################################<br>\nopener = urllib.request.URLopener()<br>\nopener.retrieve(DOWNLOAD_BASE + MODEL_FILE, MODEL_FILE)<br>\ntar_file = tarfile.open(MODEL_FILE)<br>\nfor file in tar_file.getmembers():<br>\nfile_name = os.path.basename(file.name)<br>\nif 'frozen_inference_graph.pb' in file_name:<br>\ntar_file.extract(file, os.getcwd())<br>\nprint('Stage 4 Done')<br>\n##############################################################<br>\ndetection_graph = tf.Graph()<br>\nwith detection_graph.as_default():<br>\nod_graph_def = tf.GraphDef()<br>\nwith tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:<br>\nserialized_graph = fid.read()<br>\nod_graph_def.ParseFromString(serialized_graph)<br>\ntf.import_graph_def(od_graph_def, name='')</p>\n<h1>## Loading label map</h1>\n<h1>Label maps map indices to category names, so that when our convolution network predicts <code>5</code>, we know that this corresponds to <code>airplane</code>.  Here we use internal utility functions, but anything that returns a dictionary mapping integers to appropriate string labels would be fine</h1>\n<h1>In[7]:</h1>\n<p>label_map = label_map_util.load_labelmap(PATH_TO_LABELS)<br>\ncategories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=True)<br>\ncategory_index = label_map_util.create_category_index(categories)<br>\nprint('Almost done! Stage 5 also completed...')<br>\n##################################################################</p>\n<h1>In[8]:</h1>\n<p>def load_image_into_numpy_array(image):<br>\n(im_width, im_height) = image.size<br>\nreturn np.array(image.getdata()).reshape(<br>\n(im_height, im_width, 3)).astype(np.uint8)</p>\n<h1># Detection</h1>\n<h1>In[9]:</h1>\n<h1>For the sake of simplicity we will use only 2 images:</h1>\n<h1>image1.jpg</h1>\n<h1>image2.jpg</h1>\n<h1>If you want to test the code with your images, just add path to the images to the TEST_IMAGE_PATHS.</h1>\n<p>PATH_TO_TEST_IMAGES_DIR = 'test_images'<br>\nTEST_IMAGE_PATHS = [ os.path.join(PATH_TO_TEST_IMAGES_DIR, 'image{}.jpg'.format(i)) for i in range(1, 3) ]</p>\n<h1>Size, in inches, of the output images.</h1>\n<p>IMAGE_SIZE = (12, 8)</p>\n<h1>In[10]:</h1>\n<p>print('And now we start it... Enjoy!!!')<br>\nwith detection_graph.as_default():<br>\nwith tf.Session(graph=detection_graph) as sess:<br>\nwhile True:<br>\nret, image_np = cap.read()<br>\nprint(ret)<br>\n# Expand dimensions since the model expects images to have shape: [1, None, None, 3]<br>\nimage_np_expanded = np.expand_dims(image_np, axis=0)<br>\nimage_tensor = detection_graph.get_tensor_by_name('image_tensor:0')<br>\n# Each box represents a part of the image where a particular object was detected.<br>\nboxes = detection_graph.get_tensor_by_name('detection_boxes:0')<br>\n# Each score represent how level of confidence for each of the objects.<br>\n# Score is shown on the result image, together with the class label.<br>\nscores = detection_graph.get_tensor_by_name('detection_scores:0')<br>\nclasses = detection_graph.get_tensor_by_name('detection_classes:0')<br>\nnum_detections = detection_graph.get_tensor_by_name('num_detections:0')<br>\n# Actual detection.<br>\n(boxes, scores, classes, num_detections) = sess.run(<br>\n[boxes, scores, classes, num_detections],<br>\nfeed_dict={image_tensor: image_np_expanded})<br>\n# Visualization of the results of a detection.<br>\nvis_util.visualize_boxes_and_labels_on_image_array(<br>\nimage_np,<br>\nnp.squeeze(boxes),<br>\nnp.squeeze(classes).astype(np.int32),<br>\nnp.squeeze(scores),<br>\ncategory_index,<br>\nuse_normalized_coordinates=True,<br>\nline_thickness=8)</p>\n<pre><code>  cv2.imshow('object detection', cv2.resize(image_np, (800,600)))\n  if cv2.waitKey(25) &amp; 0xFF == ord('q'):\n    cv2.destroyAllWindows()\n    break\n</code></pre>\n<p>`<br>\nNow the changes I made was removed all the tar downloading part and instead of path_to_ckpt i added the path where my frozen_inference_graph.pb is stored. Its throwing the following error.<br>\nShould I use os.path.append() ? because I am already using it to import files from object_detection folder.. also I have downloaded model from here: <a href=\"https://github.com/tensorflow/models\">https://github.com/tensorflow/models</a></p>\n<p>And here is the error I get:<br>\nTraceback (most recent call last):<br>\nFile \"E:\\SAHIL\\RW\\project_earth\\Computer_vision_object_detection\\primary_image\\models\\research\\object_detection\\obdet.py\", line 51, in <br>\nserialized_graph = fid.read()<br>\nFile \"C:\\Users\\DELL\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\lib\\io\\file_io.py\", line 125, in read<br>\nself._preread_check()<br>\nFile \"C:\\Users\\DELL\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\lib\\io\\file_io.py\", line 85, in _preread_check<br>\ncompat.as_bytes(self.__name), 1024 * 512, status)<br>\nFile \"C:\\Users\\DELL\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\framework\\errors_impl.py\", line 519, in <strong>exit</strong><br>\nc_api.TF_GetCode(self.status.status))<br>\ntensorflow.python.framework.errors_impl.InvalidArgumentError: NewRandomAccessFile failed to Create/Open: E:\\SAHIL\\RW\\project_earth\\Computer_vision_object_detection\\primary_image\\models<br>\nesearch\\object_detection\\ssd_mobilenet_v1_coco_11_06_2017\frozen_inference_graph.pb : The filename, directory name, or volume label syntax is incorrect.</p>\n<p>; Unknown error</p>", "body_text": "Here is the problem I am facing... I found object detection script in jupyter notebook and made necessary changes to read objects in real time and form object detection. But the problem I am facing is each time I run the script I have to download the model again and again. Here is the code:\n`import numpy as np\nimport os\nimport six.moves.urllib as urllib\nimport sys\nimport tarfile\nimport tensorflow as tf\nimport zipfile\nfrom collections import defaultdict\nfrom io import StringIO\n#from matplotlib import pyplot as plt\nfrom PIL import Image\nprint('Stage-1 Done')\n##################################################################\nimport cv2\ncap = cv2.VideoCapture(0)\nsys.path.append(\"..\")\nfrom utils import label_map_util\nfrom utils import visualization_utils as vis_util\nprint('Stage-2 Done')\n##################################################################\nMODEL_NAME = 'ssd_mobilenet_v1_coco_11_06_2017'\nMODEL_FILE = MODEL_NAME + '.tar.gz'\nDOWNLOAD_BASE = 'http://download.tensorflow.org/models/object_detection/'\nPath to frozen detection graph. This is the actual model that is used for the object detection.\nPATH_TO_CKPT = MODEL_NAME + '/frozen_inference_graph.pb'\nList of the strings that is used to add correct label for each box.\nPATH_TO_LABELS = os.path.join('data', 'mscoco_label_map.pbtxt')\nNUM_CLASSES = 90\nprint('Stage-3 Done, NUM_CLASSES = %d'%NUM_CLASSES)\n################################################################\nopener = urllib.request.URLopener()\nopener.retrieve(DOWNLOAD_BASE + MODEL_FILE, MODEL_FILE)\ntar_file = tarfile.open(MODEL_FILE)\nfor file in tar_file.getmembers():\nfile_name = os.path.basename(file.name)\nif 'frozen_inference_graph.pb' in file_name:\ntar_file.extract(file, os.getcwd())\nprint('Stage 4 Done')\n##############################################################\ndetection_graph = tf.Graph()\nwith detection_graph.as_default():\nod_graph_def = tf.GraphDef()\nwith tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:\nserialized_graph = fid.read()\nod_graph_def.ParseFromString(serialized_graph)\ntf.import_graph_def(od_graph_def, name='')\n## Loading label map\nLabel maps map indices to category names, so that when our convolution network predicts 5, we know that this corresponds to airplane.  Here we use internal utility functions, but anything that returns a dictionary mapping integers to appropriate string labels would be fine\nIn[7]:\nlabel_map = label_map_util.load_labelmap(PATH_TO_LABELS)\ncategories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=True)\ncategory_index = label_map_util.create_category_index(categories)\nprint('Almost done! Stage 5 also completed...')\n##################################################################\nIn[8]:\ndef load_image_into_numpy_array(image):\n(im_width, im_height) = image.size\nreturn np.array(image.getdata()).reshape(\n(im_height, im_width, 3)).astype(np.uint8)\n# Detection\nIn[9]:\nFor the sake of simplicity we will use only 2 images:\nimage1.jpg\nimage2.jpg\nIf you want to test the code with your images, just add path to the images to the TEST_IMAGE_PATHS.\nPATH_TO_TEST_IMAGES_DIR = 'test_images'\nTEST_IMAGE_PATHS = [ os.path.join(PATH_TO_TEST_IMAGES_DIR, 'image{}.jpg'.format(i)) for i in range(1, 3) ]\nSize, in inches, of the output images.\nIMAGE_SIZE = (12, 8)\nIn[10]:\nprint('And now we start it... Enjoy!!!')\nwith detection_graph.as_default():\nwith tf.Session(graph=detection_graph) as sess:\nwhile True:\nret, image_np = cap.read()\nprint(ret)\n# Expand dimensions since the model expects images to have shape: [1, None, None, 3]\nimage_np_expanded = np.expand_dims(image_np, axis=0)\nimage_tensor = detection_graph.get_tensor_by_name('image_tensor:0')\n# Each box represents a part of the image where a particular object was detected.\nboxes = detection_graph.get_tensor_by_name('detection_boxes:0')\n# Each score represent how level of confidence for each of the objects.\n# Score is shown on the result image, together with the class label.\nscores = detection_graph.get_tensor_by_name('detection_scores:0')\nclasses = detection_graph.get_tensor_by_name('detection_classes:0')\nnum_detections = detection_graph.get_tensor_by_name('num_detections:0')\n# Actual detection.\n(boxes, scores, classes, num_detections) = sess.run(\n[boxes, scores, classes, num_detections],\nfeed_dict={image_tensor: image_np_expanded})\n# Visualization of the results of a detection.\nvis_util.visualize_boxes_and_labels_on_image_array(\nimage_np,\nnp.squeeze(boxes),\nnp.squeeze(classes).astype(np.int32),\nnp.squeeze(scores),\ncategory_index,\nuse_normalized_coordinates=True,\nline_thickness=8)\n  cv2.imshow('object detection', cv2.resize(image_np, (800,600)))\n  if cv2.waitKey(25) & 0xFF == ord('q'):\n    cv2.destroyAllWindows()\n    break\n\n`\nNow the changes I made was removed all the tar downloading part and instead of path_to_ckpt i added the path where my frozen_inference_graph.pb is stored. Its throwing the following error.\nShould I use os.path.append() ? because I am already using it to import files from object_detection folder.. also I have downloaded model from here: https://github.com/tensorflow/models\nAnd here is the error I get:\nTraceback (most recent call last):\nFile \"E:\\SAHIL\\RW\\project_earth\\Computer_vision_object_detection\\primary_image\\models\\research\\object_detection\\obdet.py\", line 51, in \nserialized_graph = fid.read()\nFile \"C:\\Users\\DELL\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\lib\\io\\file_io.py\", line 125, in read\nself._preread_check()\nFile \"C:\\Users\\DELL\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\lib\\io\\file_io.py\", line 85, in _preread_check\ncompat.as_bytes(self.__name), 1024 * 512, status)\nFile \"C:\\Users\\DELL\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\framework\\errors_impl.py\", line 519, in exit\nc_api.TF_GetCode(self.status.status))\ntensorflow.python.framework.errors_impl.InvalidArgumentError: NewRandomAccessFile failed to Create/Open: E:\\SAHIL\\RW\\project_earth\\Computer_vision_object_detection\\primary_image\\models\nesearch\\object_detection\\ssd_mobilenet_v1_coco_11_06_2017rozen_inference_graph.pb : The filename, directory name, or volume label syntax is incorrect.\n; Unknown error", "body": "Here is the problem I am facing... I found object detection script in jupyter notebook and made necessary changes to read objects in real time and form object detection. But the problem I am facing is each time I run the script I have to download the model again and again. Here is the code:\r\n`import numpy as np\r\nimport os\r\nimport six.moves.urllib as urllib\r\nimport sys\r\nimport tarfile\r\nimport tensorflow as tf\r\nimport zipfile\r\n\r\nfrom collections import defaultdict\r\nfrom io import StringIO\r\n#from matplotlib import pyplot as plt\r\nfrom PIL import Image\r\nprint('Stage-1 Done')\r\n##################################################################\r\nimport cv2\r\ncap = cv2.VideoCapture(0)\r\nsys.path.append(\"..\")\r\nfrom utils import label_map_util\r\nfrom utils import visualization_utils as vis_util\r\nprint('Stage-2 Done')\r\n##################################################################\r\nMODEL_NAME = 'ssd_mobilenet_v1_coco_11_06_2017'\r\nMODEL_FILE = MODEL_NAME + '.tar.gz'\r\nDOWNLOAD_BASE = 'http://download.tensorflow.org/models/object_detection/'\r\n\r\n# Path to frozen detection graph. This is the actual model that is used for the object detection.\r\nPATH_TO_CKPT = MODEL_NAME + '/frozen_inference_graph.pb'\r\n\r\n# List of the strings that is used to add correct label for each box.\r\nPATH_TO_LABELS = os.path.join('data', 'mscoco_label_map.pbtxt')\r\n\r\nNUM_CLASSES = 90\r\nprint('Stage-3 Done, NUM_CLASSES = %d'%NUM_CLASSES)\r\n################################################################\r\nopener = urllib.request.URLopener()\r\nopener.retrieve(DOWNLOAD_BASE + MODEL_FILE, MODEL_FILE)\r\ntar_file = tarfile.open(MODEL_FILE)\r\nfor file in tar_file.getmembers():\r\n  file_name = os.path.basename(file.name)\r\n  if 'frozen_inference_graph.pb' in file_name:\r\n    tar_file.extract(file, os.getcwd())\r\nprint('Stage 4 Done')\r\n##############################################################\r\ndetection_graph = tf.Graph()\r\nwith detection_graph.as_default():\r\n  od_graph_def = tf.GraphDef()\r\n  with tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:\r\n    serialized_graph = fid.read()\r\n    od_graph_def.ParseFromString(serialized_graph)\r\n    tf.import_graph_def(od_graph_def, name='')\r\n\r\n\r\n# ## Loading label map\r\n# Label maps map indices to category names, so that when our convolution network predicts `5`, we know that this corresponds to `airplane`.  Here we use internal utility functions, but anything that returns a dictionary mapping integers to appropriate string labels would be fine\r\n\r\n# In[7]:\r\n\r\nlabel_map = label_map_util.load_labelmap(PATH_TO_LABELS)\r\ncategories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=True)\r\ncategory_index = label_map_util.create_category_index(categories)\r\nprint('Almost done! Stage 5 also completed...')\r\n##################################################################\r\n# In[8]:\r\n\r\ndef load_image_into_numpy_array(image):\r\n  (im_width, im_height) = image.size\r\n  return np.array(image.getdata()).reshape(\r\n      (im_height, im_width, 3)).astype(np.uint8)\r\n\r\n\r\n# # Detection\r\n\r\n# In[9]:\r\n\r\n# For the sake of simplicity we will use only 2 images:\r\n# image1.jpg\r\n# image2.jpg\r\n# If you want to test the code with your images, just add path to the images to the TEST_IMAGE_PATHS.\r\nPATH_TO_TEST_IMAGES_DIR = 'test_images'\r\nTEST_IMAGE_PATHS = [ os.path.join(PATH_TO_TEST_IMAGES_DIR, 'image{}.jpg'.format(i)) for i in range(1, 3) ]\r\n\r\n# Size, in inches, of the output images.\r\nIMAGE_SIZE = (12, 8)\r\n\r\n\r\n# In[10]:\r\nprint('And now we start it... Enjoy!!!')\r\nwith detection_graph.as_default():\r\n  with tf.Session(graph=detection_graph) as sess:\r\n    while True:\r\n      ret, image_np = cap.read()\r\n      print(ret)\r\n      # Expand dimensions since the model expects images to have shape: [1, None, None, 3]\r\n      image_np_expanded = np.expand_dims(image_np, axis=0)\r\n      image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')\r\n      # Each box represents a part of the image where a particular object was detected.\r\n      boxes = detection_graph.get_tensor_by_name('detection_boxes:0')\r\n      # Each score represent how level of confidence for each of the objects.\r\n      # Score is shown on the result image, together with the class label.\r\n      scores = detection_graph.get_tensor_by_name('detection_scores:0')\r\n      classes = detection_graph.get_tensor_by_name('detection_classes:0')\r\n      num_detections = detection_graph.get_tensor_by_name('num_detections:0')\r\n      # Actual detection.\r\n      (boxes, scores, classes, num_detections) = sess.run(\r\n          [boxes, scores, classes, num_detections],\r\n          feed_dict={image_tensor: image_np_expanded})\r\n      # Visualization of the results of a detection.\r\n      vis_util.visualize_boxes_and_labels_on_image_array(\r\n          image_np,\r\n          np.squeeze(boxes),\r\n          np.squeeze(classes).astype(np.int32),\r\n          np.squeeze(scores),\r\n          category_index,\r\n          use_normalized_coordinates=True,\r\n          line_thickness=8)\r\n\r\n      cv2.imshow('object detection', cv2.resize(image_np, (800,600)))\r\n      if cv2.waitKey(25) & 0xFF == ord('q'):\r\n        cv2.destroyAllWindows()\r\n        break\r\n\r\n`\r\nNow the changes I made was removed all the tar downloading part and instead of path_to_ckpt i added the path where my frozen_inference_graph.pb is stored. Its throwing the following error.\r\nShould I use os.path.append() ? because I am already using it to import files from object_detection folder.. also I have downloaded model from here: https://github.com/tensorflow/models\r\n\r\nAnd here is the error I get:\r\nTraceback (most recent call last):\r\n  File \"E:\\SAHIL\\RW\\project_earth\\Computer_vision_object_detection\\primary_image\\models\\research\\object_detection\\obdet.py\", line 51, in <module>\r\n    serialized_graph = fid.read()\r\n  File \"C:\\Users\\DELL\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\lib\\io\\file_io.py\", line 125, in read\r\n    self._preread_check()\r\n  File \"C:\\Users\\DELL\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\lib\\io\\file_io.py\", line 85, in _preread_check\r\n    compat.as_bytes(self.__name), 1024 * 512, status)\r\n  File \"C:\\Users\\DELL\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\framework\\errors_impl.py\", line 519, in __exit__\r\n    c_api.TF_GetCode(self.status.status))\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: NewRandomAccessFile failed to Create/Open: E:\\SAHIL\\RW\\project_earth\\Computer_vision_object_detection\\primary_image\\models\r\nesearch\\object_detection\\ssd_mobilenet_v1_coco_11_06_2017\frozen_inference_graph.pb : The filename, directory name, or volume label syntax is incorrect.\r\n\r\n; Unknown error"}