{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20248", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20248/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20248/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20248/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20248", "id": 335115228, "node_id": "MDU6SXNzdWUzMzUxMTUyMjg=", "number": 20248, "title": "Tensorflow-gpu requires AVX instruction to import; even if using gpu for all calculations", "user": {"login": "TaakoMagnusen", "id": 39819109, "node_id": "MDQ6VXNlcjM5ODE5MTA5", "avatar_url": "https://avatars0.githubusercontent.com/u/39819109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaakoMagnusen", "html_url": "https://github.com/TaakoMagnusen", "followers_url": "https://api.github.com/users/TaakoMagnusen/followers", "following_url": "https://api.github.com/users/TaakoMagnusen/following{/other_user}", "gists_url": "https://api.github.com/users/TaakoMagnusen/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaakoMagnusen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaakoMagnusen/subscriptions", "organizations_url": "https://api.github.com/users/TaakoMagnusen/orgs", "repos_url": "https://api.github.com/users/TaakoMagnusen/repos", "events_url": "https://api.github.com/users/TaakoMagnusen/events{/privacy}", "received_events_url": "https://api.github.com/users/TaakoMagnusen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-06-23T16:54:37Z", "updated_at": "2018-06-29T05:48:39Z", "closed_at": "2018-06-29T05:25:55Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nUbuntu 18.04 Bionic Beaver<br>\nAMD Phenom x4 II 965</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary; docker image tensorflow-1.8.0-gpu-py3</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.18.0</li>\n<li><strong>Python version</strong>: 3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>:N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:N/A</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\nCUDA 9.0<br>\nCuDNN 7.0.5</li>\n<li><strong>GPU model and memory</strong>:<br>\nGeforce GTX 760 (compute capability 3.0) 2GB</li>\n<li><strong>Exact command to reproduce</strong>:<br>\n<code>import tensorflow as tf</code> on tensorflow-gpu on system without AVX</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Jupyter Kernel crashes when doing <code>import tensorflow as tf</code>using a system that does not have AVX.</p>\n<p>Similarly if i enter a python shell and do <code>import tensorflow as tf</code> i get an <code>Illegal Instruction (core dumped)</code> error and it exits the shell.</p>\n<p>I have confirmed this is due to the AVX instruction because when i use the docker image Tensorflow-1.15.0-gpu-py3 I am able to successfully import tensorflow.</p>\n<p><em>Unfortunately</em>, tensorflow 1.15.0 requires compute capability 3.5 or higher which is extremely frusterating because i cannot find a build of tensorflow online that supports compute capaibility 3.0 but does not use AVX instructions.</p>\n<p>Why do i need a CPU that supports AVX just to import tensorflow when i dont actually need the AVX instruction since i have a supported GPU (at least it is supported on all tensorflow versions other than 1.15.0).</p>\n<p>Is there a way around this or do i need to build tensorflow from source to not use AVX but to allow compute capability 3.0? I tried using tensorflow-gpu-1.18.0-devel-py to build a new version from source but it did not even ask me what compute capabilities i wanted to build for and so i just let it build but it took over 24 hours and it was still going.</p>\n<p>Can someone either provide a tensorflow-gpu release with CUDA 9.0 and CuDNN 7 support that does not use AVX and supports compute capability 3.0 or at least tell me the best way to obtain such a build (since apparently building using the docker-devel image wont work).</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nUbuntu 18.04 Bionic Beaver\nAMD Phenom x4 II 965\nTensorFlow installed from (source or binary): binary; docker image tensorflow-1.8.0-gpu-py3\nTensorFlow version (use command below): 1.18.0\nPython version: 3.5\nBazel version (if compiling from source):N/A\nGCC/Compiler version (if compiling from source):N/A\nCUDA/cuDNN version:\nCUDA 9.0\nCuDNN 7.0.5\nGPU model and memory:\nGeforce GTX 760 (compute capability 3.0) 2GB\nExact command to reproduce:\nimport tensorflow as tf on tensorflow-gpu on system without AVX\n\nDescribe the problem\nJupyter Kernel crashes when doing import tensorflow as tfusing a system that does not have AVX.\nSimilarly if i enter a python shell and do import tensorflow as tf i get an Illegal Instruction (core dumped) error and it exits the shell.\nI have confirmed this is due to the AVX instruction because when i use the docker image Tensorflow-1.15.0-gpu-py3 I am able to successfully import tensorflow.\nUnfortunately, tensorflow 1.15.0 requires compute capability 3.5 or higher which is extremely frusterating because i cannot find a build of tensorflow online that supports compute capaibility 3.0 but does not use AVX instructions.\nWhy do i need a CPU that supports AVX just to import tensorflow when i dont actually need the AVX instruction since i have a supported GPU (at least it is supported on all tensorflow versions other than 1.15.0).\nIs there a way around this or do i need to build tensorflow from source to not use AVX but to allow compute capability 3.0? I tried using tensorflow-gpu-1.18.0-devel-py to build a new version from source but it did not even ask me what compute capabilities i wanted to build for and so i just let it build but it took over 24 hours and it was still going.\nCan someone either provide a tensorflow-gpu release with CUDA 9.0 and CuDNN 7 support that does not use AVX and supports compute capability 3.0 or at least tell me the best way to obtain such a build (since apparently building using the docker-devel image wont work).", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nUbuntu 18.04 Bionic Beaver\r\nAMD Phenom x4 II 965\r\n- **TensorFlow installed from (source or binary)**: binary; docker image tensorflow-1.8.0-gpu-py3\r\n- **TensorFlow version (use command below)**: 1.18.0\r\n- **Python version**: 3.5\r\n- **Bazel version (if compiling from source)**:N/A\r\n- **GCC/Compiler version (if compiling from source)**:N/A\r\n- **CUDA/cuDNN version**:\r\nCUDA 9.0\r\nCuDNN 7.0.5\r\n- **GPU model and memory**:\r\nGeforce GTX 760 (compute capability 3.0) 2GB\r\n- **Exact command to reproduce**:\r\n`import tensorflow as tf` on tensorflow-gpu on system without AVX\r\n\r\n### Describe the problem\r\n\r\nJupyter Kernel crashes when doing `import tensorflow as tf`using a system that does not have AVX.\r\n\r\nSimilarly if i enter a python shell and do `import tensorflow as tf` i get an `Illegal Instruction (core dumped)` error and it exits the shell.\r\n\r\nI have confirmed this is due to the AVX instruction because when i use the docker image Tensorflow-1.15.0-gpu-py3 I am able to successfully import tensorflow.\r\n\r\n*Unfortunately*, tensorflow 1.15.0 requires compute capability 3.5 or higher which is extremely frusterating because i cannot find a build of tensorflow online that supports compute capaibility 3.0 but does not use AVX instructions.\r\n\r\nWhy do i need a CPU that supports AVX just to import tensorflow when i dont actually need the AVX instruction since i have a supported GPU (at least it is supported on all tensorflow versions other than 1.15.0).\r\n\r\nIs there a way around this or do i need to build tensorflow from source to not use AVX but to allow compute capability 3.0? I tried using tensorflow-gpu-1.18.0-devel-py to build a new version from source but it did not even ask me what compute capabilities i wanted to build for and so i just let it build but it took over 24 hours and it was still going. \r\n\r\nCan someone either provide a tensorflow-gpu release with CUDA 9.0 and CuDNN 7 support that does not use AVX and supports compute capability 3.0 or at least tell me the best way to obtain such a build (since apparently building using the docker-devel image wont work)."}