{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/66859189", "pull_request_review_id": null, "id": 66859189, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU5MTg5", "diff_hunk": "@@ -0,0 +1,219 @@\n+# Copyright 2016 Google. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+\"\"\"Functional tests for scan ops.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import numpy as np\n+import tensorflow as tf\n+\n+from tensorflow.python.framework import errors\n+from tensorflow.python.framework import tensor_shape\n+from tensorflow.python.ops import math_ops\n+\n+def numpy_reverse(x, axis):\n+  ix = [slice(None, None, -1)\n+        if i == axis else slice(None) for i in range(len(x.shape))]\n+  return x[ix]\n+\n+class CumsumTest(tf.test.TestCase):\n+\n+  valid_dtypes = [np.int32, np.int64, np.float16, np.float32, np.float64,\n+                  np.complex64, np.complex128]\n+\n+  def _compare(self, x, axis, reverse, use_gpu=False):\n+    np_out = x\n+    if reverse:\n+      np_out = numpy_reverse(np_out, axis)\n+    np_out = np.cumsum(np_out, axis=axis)\n+    if reverse:\n+      np_out = numpy_reverse(np_out, axis)\n+\n+    with self.test_session(use_gpu=use_gpu):\n+      tf_out = math_ops.cumsum(x, axis, reverse).eval()\n+\n+    self.assertAllClose(np_out, tf_out)\n+\n+  def _compareAll(self, x, axis):\n+    self._compare(x, axis, False, False)\n+    self._compare(x, axis, True, False)\n+    self._compare(x, axis, False, True)\n+    self._compare(x, axis, True, True)\n+\n+  def test1D(self):\n+    for dtype in self.valid_dtypes:\n+      x = np.arange(1, 6).reshape([5]).astype(dtype)\n+      self._compareAll(x, 0)\n+\n+  def test2D(self):\n+    for dtype in self.valid_dtypes:\n+      x = np.arange(0, 10).reshape([2, 5]).astype(dtype)\n+      self._compareAll(x, 0)\n+      self._compareAll(x, 1)\n+\n+  def test3D(self):\n+    for dtype in self.valid_dtypes:\n+      x = np.arange(0, 20).reshape([2, 2, 5]).astype(dtype)\n+      self._compareAll(x, 0)\n+      self._compareAll(x, 1)\n+      self._compareAll(x, 2)\n+\n+  def test8D(self):\n+    for dtype in self.__class__.valid_dtypes:\n+      x = np.arange(0, 2**8).reshape([2] * 8).astype(dtype)\n+      for n in range(8):\n+        self._compareAll(x, n)\n+\n+  def testInvalidAxis(self):\n+    x = np.arange(0, 10).reshape([2, 5]).astype(np.float32)\n+    input_tensor = tf.convert_to_tensor(x)\n+    with self.assertRaisesWithPredicateMatch(\n+        errors.InvalidArgumentError,\n+        lambda e: \"Expected scan axis in the range\" in str(e)):\n+      with self.test_session():", "path": "tensorflow/python/kernel_tests/scan_ops_test.py", "position": null, "original_position": 88, "commit_id": "83fe4f73c4e704c8eb3715a8ce0c8332d81510ee", "original_commit_id": "6f7e907978c9076645c744e84abfad45c2055b85", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "body": "Flip the order of the two withs.\n", "created_at": "2016-06-13T20:16:45Z", "updated_at": "2016-07-12T23:22:15Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/2711#discussion_r66859189", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2711", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/66859189"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/2711#discussion_r66859189"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2711"}}, "body_html": "<p>Flip the order of the two withs.</p>", "body_text": "Flip the order of the two withs."}