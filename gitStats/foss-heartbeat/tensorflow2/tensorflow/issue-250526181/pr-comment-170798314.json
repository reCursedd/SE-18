{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/170798314", "pull_request_review_id": 99539210, "id": 170798314, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MDc5ODMxNA==", "diff_hunk": "@@ -1036,23 +1042,35 @@ def _should_dropout(p):\n       return (not isinstance(p, float)) or p < 1\n \n     if _should_dropout(self._input_keep_prob):\n-      inputs = self._dropout(inputs, \"input\",\n+      def dropped_inputs():\n+        return self._dropout(inputs, \"input\",\n                              self._recurrent_input_noise,\n                              self._input_keep_prob)\n+      inputs = utils.smart_cond(self._training,\n+                                dropped_inputs,\n+                                lambda: array_ops.identity(inputs))\n     output, new_state = self._cell(inputs, state, scope=scope)\n     if _should_dropout(self._state_keep_prob):\n-      # Identify which subsets of the state to perform dropout on and\n-      # which ones to keep.\n-      shallow_filtered_substructure = nest.get_traverse_shallow_structure(\n-          self._dropout_state_filter, new_state)\n-      new_state = self._dropout(new_state, \"state\",\n-                                self._recurrent_state_noise,\n-                                self._state_keep_prob,\n-                                shallow_filtered_substructure)\n+      def dropped_new_state():\n+        # Identify which subsets of the state to perform dropout on and\n+        # which ones to keep.\n+        shallow_filtered_substructure = nest.get_traverse_shallow_structure(\n+            self._dropout_state_filter, new_state)\n+        return self._dropout(new_state, \"state\",\n+                             self._recurrent_state_noise,\n+                             self._state_keep_prob,\n+                             shallow_filtered_substructure)\n+      new_state = utils.smart_cond(self._training,\n+                                   dropped_new_state,\n+                                   lambda: array_ops.identity(new_state))", "path": "tensorflow/python/ops/rnn_cell_impl.py", "position": 69, "original_position": 69, "commit_id": "577c964e623e7b03abb78f08afc8f1fb0bf6108f", "original_commit_id": "577c964e623e7b03abb78f08afc8f1fb0bf6108f", "user": {"login": "resec", "id": 4277636, "node_id": "MDQ6VXNlcjQyNzc2MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4277636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/resec", "html_url": "https://github.com/resec", "followers_url": "https://api.github.com/users/resec/followers", "following_url": "https://api.github.com/users/resec/following{/other_user}", "gists_url": "https://api.github.com/users/resec/gists{/gist_id}", "starred_url": "https://api.github.com/users/resec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/resec/subscriptions", "organizations_url": "https://api.github.com/users/resec/orgs", "repos_url": "https://api.github.com/users/resec/repos", "events_url": "https://api.github.com/users/resec/events{/privacy}", "received_events_url": "https://api.github.com/users/resec/received_events", "type": "User", "site_admin": false}, "body": "In `tf.layers.dropout`, it applies `tf.identity` to `inputs` before returning, but I haven't able to fully understand why it has to be this way. I think (guess) it is to make sure the `input` tensor to be in the same device as the `dropped input (if applied)`.\r\n\r\nIn here, If I am guessing above correctly, `tf.identity` can be skipped as the `scope` or `device` etc. is decided only when the Cell object is applied?\r\n\r\nI think `tf.identity` is a little bit difficult to understand, please correct me if I am wrong, thanks.", "created_at": "2018-02-27T02:19:42Z", "updated_at": "2018-02-27T02:19:42Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12316#discussion_r170798314", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12316", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/170798314"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12316#discussion_r170798314"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12316"}}, "body_html": "<p>In <code>tf.layers.dropout</code>, it applies <code>tf.identity</code> to <code>inputs</code> before returning, but I haven't able to fully understand why it has to be this way. I think (guess) it is to make sure the <code>input</code> tensor to be in the same device as the <code>dropped input (if applied)</code>.</p>\n<p>In here, If I am guessing above correctly, <code>tf.identity</code> can be skipped as the <code>scope</code> or <code>device</code> etc. is decided only when the Cell object is applied?</p>\n<p>I think <code>tf.identity</code> is a little bit difficult to understand, please correct me if I am wrong, thanks.</p>", "body_text": "In tf.layers.dropout, it applies tf.identity to inputs before returning, but I haven't able to fully understand why it has to be this way. I think (guess) it is to make sure the input tensor to be in the same device as the dropped input (if applied).\nIn here, If I am guessing above correctly, tf.identity can be skipped as the scope or device etc. is decided only when the Cell object is applied?\nI think tf.identity is a little bit difficult to understand, please correct me if I am wrong, thanks.", "in_reply_to_id": 166656447}