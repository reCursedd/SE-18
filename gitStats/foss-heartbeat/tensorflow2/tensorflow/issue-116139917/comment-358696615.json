{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/358696615", "html_url": "https://github.com/tensorflow/tensorflow/issues/97#issuecomment-358696615", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/97", "id": 358696615, "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODY5NjYxNQ==", "user": {"login": "shadzic", "id": 8168762, "node_id": "MDQ6VXNlcjgxNjg3NjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8168762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shadzic", "html_url": "https://github.com/shadzic", "followers_url": "https://api.github.com/users/shadzic/followers", "following_url": "https://api.github.com/users/shadzic/following{/other_user}", "gists_url": "https://api.github.com/users/shadzic/gists{/gist_id}", "starred_url": "https://api.github.com/users/shadzic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shadzic/subscriptions", "organizations_url": "https://api.github.com/users/shadzic/orgs", "repos_url": "https://api.github.com/users/shadzic/repos", "events_url": "https://api.github.com/users/shadzic/events{/privacy}", "received_events_url": "https://api.github.com/users/shadzic/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-18T16:14:46Z", "updated_at": "2018-01-18T16:15:21Z", "author_association": "NONE", "body_html": "<p>Thank you, very helpful.</p>\n<p>For the DNNLinearCombinedClassifier, I used this:</p>\n<p><code># predicted class</code><br>\n<code>predictions = model.predict(input_fn=input_fn)</code><br>\n<code>y_pred = [p[\"class_ids\"][0] for p in predictions] </code></p>\n<p><code># probability of being predicted as 1</code><br>\n<code>predictions = model.predict(input_fn=input_fn)</code><br>\n<code>y_prob = [p[\"probabilities\"][1] for p in predictions]</code></p>\n<p>Weirdly, I need to re-compute predictions every time to get the lists<br>\n(y_prob would return [] if I don't re-run predictions before running y_prob)</p>", "body_text": "Thank you, very helpful.\nFor the DNNLinearCombinedClassifier, I used this:\n# predicted class\npredictions = model.predict(input_fn=input_fn)\ny_pred = [p[\"class_ids\"][0] for p in predictions] \n# probability of being predicted as 1\npredictions = model.predict(input_fn=input_fn)\ny_prob = [p[\"probabilities\"][1] for p in predictions]\nWeirdly, I need to re-compute predictions every time to get the lists\n(y_prob would return [] if I don't re-run predictions before running y_prob)", "body": "Thank you, very helpful.\r\n\r\nFor the DNNLinearCombinedClassifier, I used this:\r\n\r\n`# predicted class`\r\n`predictions = model.predict(input_fn=input_fn)`\r\n`y_pred = [p[\"class_ids\"][0] for p in predictions] `\r\n\r\n`# probability of being predicted as 1`\r\n`predictions = model.predict(input_fn=input_fn)`\r\n`y_prob = [p[\"probabilities\"][1] for p in predictions]`\r\n\r\n\r\nWeirdly, I need to re-compute predictions every time to get the lists \r\n(y_prob would return [] if I don't re-run predictions before running y_prob)\r\n"}