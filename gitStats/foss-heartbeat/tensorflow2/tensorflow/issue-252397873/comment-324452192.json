{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/324452192", "html_url": "https://github.com/tensorflow/tensorflow/issues/12536#issuecomment-324452192", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12536", "id": 324452192, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNDQ1MjE5Mg==", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-23T20:25:34Z", "updated_at": "2017-08-23T20:25:34Z", "author_association": "MEMBER", "body_html": "<div class=\"email-fragment\">The error I get is\n\n0823 13:19:03.218401  373487 op_kernel.cc:1192] Invalid argument: only\nstride 1 allowed on non-range indexing.\nthird_party/tensorflow/c/eager/c_api_test.cc:546: Failure\nExpected equality of these values:\n  TF_OK\n    Which is: 0\n  TF_GetCode(status)\n    Which is: 3\nonly stride 1 allowed on non-range indexing.\nStack trace:\n\nwhich comes from calling stridedslice wrong. It's really hard to call it\nright, though :-/\n\nStrides needs to be higher-dimensional in your case, so change it to\n\nTFE_TensorHandle* TestStridesTensorHandle() {\n  int64_t dims[] = {2};\n  int data[] = {1, 1};\n  TF_Tensor* t = TF_AllocateTensor(\n      TF_INT32, &amp;dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));\n  memcpy(TF_TensorData(t), &amp;data[0], TF_TensorByteSize(t));\n  TFE_TensorHandle* th = TFE_NewTensorHandle(t);\n  TF_DeleteTensor(t);\n  return th;\n}\n\n\n(i.e. data went from {1} to {1, 1})\n\nThen the tests pass deterministically for me.</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Wed, Aug 23, 2017 at 4:01 PM, Anthony Platanios ***@***.*** &gt; wrote:\n <a class=\"user-mention\" href=\"https://github.com/alextp\">@alextp</a> &lt;<a href=\"https://github.com/alextp\">https://github.com/alextp</a>&gt; there seems to be a problem with\n eagerly executing strided slice ops. The problem seems to be in the shape\n inference component and is non-deterministic. If you add the following code\n in the eager/c_api_test.cc file and run the test multiple times, you'll\n notice that sometimes it succeeds and sometimes it fails, randomly. More\n specifically, I get errors related to the strides input tensor, but I think\n this may have to do with how the memory is managed for eager tensors:\n\n TFE_TensorHandle* TestBeginTensorHandle() {\n   int64_t dims[] = {2};\n   int data[] = {1, 0};\n   TF_Tensor* t = TF_AllocateTensor(\n       TF_INT32, &amp;dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));\n   memcpy(TF_TensorData(t), &amp;data[0], TF_TensorByteSize(t));\n   TFE_TensorHandle* th = TFE_NewTensorHandle(t);\n   TF_DeleteTensor(t);\n   return th;\n }\n\n TFE_TensorHandle* TestEndTensorHandle() {\n   int64_t dims[] = {2};\n   int data[] = {2, 1};\n   TF_Tensor* t = TF_AllocateTensor(\n       TF_INT32, &amp;dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));\n   memcpy(TF_TensorData(t), &amp;data[0], TF_TensorByteSize(t));\n   TFE_TensorHandle* th = TFE_NewTensorHandle(t);\n   TF_DeleteTensor(t);\n   return th;\n }\n\n TFE_TensorHandle* TestStridesTensorHandle() {\n   int64_t dims[] = {2};\n   int data[] = {1};\n   TF_Tensor* t = TF_AllocateTensor(\n       TF_INT32, &amp;dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));\n   memcpy(TF_TensorData(t), &amp;data[0], TF_TensorByteSize(t));\n   TFE_TensorHandle* th = TFE_NewTensorHandle(t);\n   TF_DeleteTensor(t);\n   return th;\n }\n\n TEST(CAPI, ExecuteStridedSlice) {\n   TF_Status* status = TF_NewStatus();\n   TF_SessionOptions* opts = TF_NewSessionOptions();\n   TFE_Context* ctx = TFE_NewContext(opts, status);\n   CHECK_EQ(TF_OK, TF_GetCode(status)) &lt;&lt; TF_Message(status);\n   TF_DeleteSessionOptions(opts);\n\n   TFE_TensorHandle* a = TestMatrixTensorHandle();\n   TFE_TensorHandle* begin = TestBeginTensorHandle();\n   TFE_TensorHandle* end = TestEndTensorHandle();\n   TFE_TensorHandle* strides = TestStridesTensorHandle();\n   TFE_Op* op = TFE_NewOp(ctx, \"StridedSlice\", status);\n   CHECK_EQ(TF_OK, TF_GetCode(status)) &lt;&lt; TF_Message(status);\n   TFE_OpAddInput(op, a, status);\n   CHECK_EQ(TF_OK, TF_GetCode(status)) &lt;&lt; TF_Message(status);\n   TFE_OpAddInput(op, begin, status);\n   CHECK_EQ(TF_OK, TF_GetCode(status)) &lt;&lt; TF_Message(status);\n   TFE_OpAddInput(op, end, status);\n   CHECK_EQ(TF_OK, TF_GetCode(status)) &lt;&lt; TF_Message(status);\n   TFE_OpAddInput(op, strides, status);\n   CHECK_EQ(TF_OK, TF_GetCode(status)) &lt;&lt; TF_Message(status);\n   TFE_OpSetAttrType(op, \"T\", TFE_TensorHandleDataType(a));\n   TFE_OpSetAttrType(op, \"Index\", TFE_TensorHandleDataType(begin));\n   TFE_OpSetAttrInt(op, \"begin_mask\", 0);\n   TFE_OpSetAttrInt(op, \"end_mask\", 0);\n   TFE_OpSetAttrInt(op, \"ellipsis_mask\", 0);\n   TFE_OpSetAttrInt(op, \"new_axis_mask\", 0);\n   TFE_OpSetAttrInt(op, \"shrink_axis_mask\", 3);\n\n   TFE_TensorHandle* retvals[2] = {nullptr};\n   int num_retvals = 2;  // Should be reduced to 1 by the TFE_Execute call.\n   TFE_Execute(op, &amp;retvals[0], &amp;num_retvals, status);\n   EXPECT_EQ(TF_OK, TF_GetCode(status)) &lt;&lt; TF_Message(status);\n   TFE_DeleteOp(op);\n   TFE_DeleteTensorHandle(a);\n   TFE_DeleteTensorHandle(begin);\n   TFE_DeleteTensorHandle(end);\n   TFE_DeleteTensorHandle(strides);\n   TFE_DeleteContext(ctx, status);\n   ASSERT_EQ(TF_OK, TF_GetCode(status)) &lt;&lt; TF_Message(status);\n   ASSERT_EQ(1, num_retvals);\n\n   TF_Tensor* t = TFE_TensorHandleResolve(retvals[0], status);\n   TFE_DeleteTensorHandle(retvals[0]);\n   ASSERT_EQ(TF_OK, TF_GetCode(status)) &lt;&lt; TF_Message(status);\n   float result[1] = {0};\n   EXPECT_EQ(sizeof(result), TF_TensorByteSize(t));\n   memcpy(&amp;result[0], TF_TensorData(t), TF_TensorByteSize(t));\n   TF_DeleteTensor(t);\n   EXPECT_EQ(3, result[0]);\n   TF_DeleteStatus(status);\n }\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"252397873\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/12536\" href=\"https://github.com/tensorflow/tensorflow/issues/12536\">#12536</a>&gt;, or mute the\n thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/AAATxXFGjPv87KFy7jZfND0cRks7z7Npks5sbIT9gaJpZM4PAgVi\">https://github.com/notifications/unsubscribe-auth/AAATxXFGjPv87KFy7jZfND0cRks7z7Npks5sbIT9gaJpZM4PAgVi</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n<div class=\"email-signature-reply\">-- \n - Alex</div>\n</div>", "body_text": "The error I get is\n\n0823 13:19:03.218401  373487 op_kernel.cc:1192] Invalid argument: only\nstride 1 allowed on non-range indexing.\nthird_party/tensorflow/c/eager/c_api_test.cc:546: Failure\nExpected equality of these values:\n  TF_OK\n    Which is: 0\n  TF_GetCode(status)\n    Which is: 3\nonly stride 1 allowed on non-range indexing.\nStack trace:\n\nwhich comes from calling stridedslice wrong. It's really hard to call it\nright, though :-/\n\nStrides needs to be higher-dimensional in your case, so change it to\n\nTFE_TensorHandle* TestStridesTensorHandle() {\n  int64_t dims[] = {2};\n  int data[] = {1, 1};\n  TF_Tensor* t = TF_AllocateTensor(\n      TF_INT32, &dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));\n  memcpy(TF_TensorData(t), &data[0], TF_TensorByteSize(t));\n  TFE_TensorHandle* th = TFE_NewTensorHandle(t);\n  TF_DeleteTensor(t);\n  return th;\n}\n\n\n(i.e. data went from {1} to {1, 1})\n\nThen the tests pass deterministically for me.\n\u2026\nOn Wed, Aug 23, 2017 at 4:01 PM, Anthony Platanios ***@***.*** > wrote:\n @alextp <https://github.com/alextp> there seems to be a problem with\n eagerly executing strided slice ops. The problem seems to be in the shape\n inference component and is non-deterministic. If you add the following code\n in the eager/c_api_test.cc file and run the test multiple times, you'll\n notice that sometimes it succeeds and sometimes it fails, randomly. More\n specifically, I get errors related to the strides input tensor, but I think\n this may have to do with how the memory is managed for eager tensors:\n\n TFE_TensorHandle* TestBeginTensorHandle() {\n   int64_t dims[] = {2};\n   int data[] = {1, 0};\n   TF_Tensor* t = TF_AllocateTensor(\n       TF_INT32, &dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));\n   memcpy(TF_TensorData(t), &data[0], TF_TensorByteSize(t));\n   TFE_TensorHandle* th = TFE_NewTensorHandle(t);\n   TF_DeleteTensor(t);\n   return th;\n }\n\n TFE_TensorHandle* TestEndTensorHandle() {\n   int64_t dims[] = {2};\n   int data[] = {2, 1};\n   TF_Tensor* t = TF_AllocateTensor(\n       TF_INT32, &dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));\n   memcpy(TF_TensorData(t), &data[0], TF_TensorByteSize(t));\n   TFE_TensorHandle* th = TFE_NewTensorHandle(t);\n   TF_DeleteTensor(t);\n   return th;\n }\n\n TFE_TensorHandle* TestStridesTensorHandle() {\n   int64_t dims[] = {2};\n   int data[] = {1};\n   TF_Tensor* t = TF_AllocateTensor(\n       TF_INT32, &dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));\n   memcpy(TF_TensorData(t), &data[0], TF_TensorByteSize(t));\n   TFE_TensorHandle* th = TFE_NewTensorHandle(t);\n   TF_DeleteTensor(t);\n   return th;\n }\n\n TEST(CAPI, ExecuteStridedSlice) {\n   TF_Status* status = TF_NewStatus();\n   TF_SessionOptions* opts = TF_NewSessionOptions();\n   TFE_Context* ctx = TFE_NewContext(opts, status);\n   CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n   TF_DeleteSessionOptions(opts);\n\n   TFE_TensorHandle* a = TestMatrixTensorHandle();\n   TFE_TensorHandle* begin = TestBeginTensorHandle();\n   TFE_TensorHandle* end = TestEndTensorHandle();\n   TFE_TensorHandle* strides = TestStridesTensorHandle();\n   TFE_Op* op = TFE_NewOp(ctx, \"StridedSlice\", status);\n   CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n   TFE_OpAddInput(op, a, status);\n   CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n   TFE_OpAddInput(op, begin, status);\n   CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n   TFE_OpAddInput(op, end, status);\n   CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n   TFE_OpAddInput(op, strides, status);\n   CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n   TFE_OpSetAttrType(op, \"T\", TFE_TensorHandleDataType(a));\n   TFE_OpSetAttrType(op, \"Index\", TFE_TensorHandleDataType(begin));\n   TFE_OpSetAttrInt(op, \"begin_mask\", 0);\n   TFE_OpSetAttrInt(op, \"end_mask\", 0);\n   TFE_OpSetAttrInt(op, \"ellipsis_mask\", 0);\n   TFE_OpSetAttrInt(op, \"new_axis_mask\", 0);\n   TFE_OpSetAttrInt(op, \"shrink_axis_mask\", 3);\n\n   TFE_TensorHandle* retvals[2] = {nullptr};\n   int num_retvals = 2;  // Should be reduced to 1 by the TFE_Execute call.\n   TFE_Execute(op, &retvals[0], &num_retvals, status);\n   EXPECT_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n   TFE_DeleteOp(op);\n   TFE_DeleteTensorHandle(a);\n   TFE_DeleteTensorHandle(begin);\n   TFE_DeleteTensorHandle(end);\n   TFE_DeleteTensorHandle(strides);\n   TFE_DeleteContext(ctx, status);\n   ASSERT_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n   ASSERT_EQ(1, num_retvals);\n\n   TF_Tensor* t = TFE_TensorHandleResolve(retvals[0], status);\n   TFE_DeleteTensorHandle(retvals[0]);\n   ASSERT_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n   float result[1] = {0};\n   EXPECT_EQ(sizeof(result), TF_TensorByteSize(t));\n   memcpy(&result[0], TF_TensorData(t), TF_TensorByteSize(t));\n   TF_DeleteTensor(t);\n   EXPECT_EQ(3, result[0]);\n   TF_DeleteStatus(status);\n }\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#12536>, or mute the\n thread\n <https://github.com/notifications/unsubscribe-auth/AAATxXFGjPv87KFy7jZfND0cRks7z7Npks5sbIT9gaJpZM4PAgVi>\n .\n\n\n-- \n - Alex", "body": "The error I get is\n\n0823 13:19:03.218401  373487 op_kernel.cc:1192] Invalid argument: only\nstride 1 allowed on non-range indexing.\nthird_party/tensorflow/c/eager/c_api_test.cc:546: Failure\nExpected equality of these values:\n  TF_OK\n    Which is: 0\n  TF_GetCode(status)\n    Which is: 3\nonly stride 1 allowed on non-range indexing.\nStack trace:\n\nwhich comes from calling stridedslice wrong. It's really hard to call it\nright, though :-/\n\nStrides needs to be higher-dimensional in your case, so change it to\n\nTFE_TensorHandle* TestStridesTensorHandle() {\n  int64_t dims[] = {2};\n  int data[] = {1, 1};\n  TF_Tensor* t = TF_AllocateTensor(\n      TF_INT32, &dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));\n  memcpy(TF_TensorData(t), &data[0], TF_TensorByteSize(t));\n  TFE_TensorHandle* th = TFE_NewTensorHandle(t);\n  TF_DeleteTensor(t);\n  return th;\n}\n\n\n(i.e. data went from {1} to {1, 1})\n\nThen the tests pass deterministically for me.\n\n\n\nOn Wed, Aug 23, 2017 at 4:01 PM, Anthony Platanios <notifications@github.com\n> wrote:\n\n> @alextp <https://github.com/alextp> there seems to be a problem with\n> eagerly executing strided slice ops. The problem seems to be in the shape\n> inference component and is non-deterministic. If you add the following code\n> in the eager/c_api_test.cc file and run the test multiple times, you'll\n> notice that sometimes it succeeds and sometimes it fails, randomly. More\n> specifically, I get errors related to the strides input tensor, but I think\n> this may have to do with how the memory is managed for eager tensors:\n>\n> TFE_TensorHandle* TestBeginTensorHandle() {\n>   int64_t dims[] = {2};\n>   int data[] = {1, 0};\n>   TF_Tensor* t = TF_AllocateTensor(\n>       TF_INT32, &dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));\n>   memcpy(TF_TensorData(t), &data[0], TF_TensorByteSize(t));\n>   TFE_TensorHandle* th = TFE_NewTensorHandle(t);\n>   TF_DeleteTensor(t);\n>   return th;\n> }\n>\n> TFE_TensorHandle* TestEndTensorHandle() {\n>   int64_t dims[] = {2};\n>   int data[] = {2, 1};\n>   TF_Tensor* t = TF_AllocateTensor(\n>       TF_INT32, &dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));\n>   memcpy(TF_TensorData(t), &data[0], TF_TensorByteSize(t));\n>   TFE_TensorHandle* th = TFE_NewTensorHandle(t);\n>   TF_DeleteTensor(t);\n>   return th;\n> }\n>\n> TFE_TensorHandle* TestStridesTensorHandle() {\n>   int64_t dims[] = {2};\n>   int data[] = {1};\n>   TF_Tensor* t = TF_AllocateTensor(\n>       TF_INT32, &dims[0], sizeof(dims) / sizeof(int64_t), sizeof(data));\n>   memcpy(TF_TensorData(t), &data[0], TF_TensorByteSize(t));\n>   TFE_TensorHandle* th = TFE_NewTensorHandle(t);\n>   TF_DeleteTensor(t);\n>   return th;\n> }\n>\n> TEST(CAPI, ExecuteStridedSlice) {\n>   TF_Status* status = TF_NewStatus();\n>   TF_SessionOptions* opts = TF_NewSessionOptions();\n>   TFE_Context* ctx = TFE_NewContext(opts, status);\n>   CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n>   TF_DeleteSessionOptions(opts);\n>\n>   TFE_TensorHandle* a = TestMatrixTensorHandle();\n>   TFE_TensorHandle* begin = TestBeginTensorHandle();\n>   TFE_TensorHandle* end = TestEndTensorHandle();\n>   TFE_TensorHandle* strides = TestStridesTensorHandle();\n>   TFE_Op* op = TFE_NewOp(ctx, \"StridedSlice\", status);\n>   CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n>   TFE_OpAddInput(op, a, status);\n>   CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n>   TFE_OpAddInput(op, begin, status);\n>   CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n>   TFE_OpAddInput(op, end, status);\n>   CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n>   TFE_OpAddInput(op, strides, status);\n>   CHECK_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n>   TFE_OpSetAttrType(op, \"T\", TFE_TensorHandleDataType(a));\n>   TFE_OpSetAttrType(op, \"Index\", TFE_TensorHandleDataType(begin));\n>   TFE_OpSetAttrInt(op, \"begin_mask\", 0);\n>   TFE_OpSetAttrInt(op, \"end_mask\", 0);\n>   TFE_OpSetAttrInt(op, \"ellipsis_mask\", 0);\n>   TFE_OpSetAttrInt(op, \"new_axis_mask\", 0);\n>   TFE_OpSetAttrInt(op, \"shrink_axis_mask\", 3);\n>\n>   TFE_TensorHandle* retvals[2] = {nullptr};\n>   int num_retvals = 2;  // Should be reduced to 1 by the TFE_Execute call.\n>   TFE_Execute(op, &retvals[0], &num_retvals, status);\n>   EXPECT_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n>   TFE_DeleteOp(op);\n>   TFE_DeleteTensorHandle(a);\n>   TFE_DeleteTensorHandle(begin);\n>   TFE_DeleteTensorHandle(end);\n>   TFE_DeleteTensorHandle(strides);\n>   TFE_DeleteContext(ctx, status);\n>   ASSERT_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n>   ASSERT_EQ(1, num_retvals);\n>\n>   TF_Tensor* t = TFE_TensorHandleResolve(retvals[0], status);\n>   TFE_DeleteTensorHandle(retvals[0]);\n>   ASSERT_EQ(TF_OK, TF_GetCode(status)) << TF_Message(status);\n>   float result[1] = {0};\n>   EXPECT_EQ(sizeof(result), TF_TensorByteSize(t));\n>   memcpy(&result[0], TF_TensorData(t), TF_TensorByteSize(t));\n>   TF_DeleteTensor(t);\n>   EXPECT_EQ(3, result[0]);\n>   TF_DeleteStatus(status);\n> }\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/issues/12536>, or mute the\n> thread\n> <https://github.com/notifications/unsubscribe-auth/AAATxXFGjPv87KFy7jZfND0cRks7z7Npks5sbIT9gaJpZM4PAgVi>\n> .\n>\n\n\n\n-- \n - Alex\n"}