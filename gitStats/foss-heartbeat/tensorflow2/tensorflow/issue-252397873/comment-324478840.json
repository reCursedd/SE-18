{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/324478840", "html_url": "https://github.com/tensorflow/tensorflow/issues/12536#issuecomment-324478840", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12536", "id": 324478840, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNDQ3ODg0MA==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-23T22:19:13Z", "updated_at": "2017-08-23T22:19:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> I also believe that's what's happening. I have the following related question:</p>\n<p>Through the C API I can create <code>TF_Tensor</code> objects and specify a deallocator for them. This allows me to create a tensor using a buffer created on the Scala side and pass as the deallocator a function that removes a reference to this buffer from the garbage collector (loosely speaking). Now, if I:</p>\n<ol>\n<li>Create a <code>TF_Tensor</code> from a Scala-allocated buffer.</li>\n<li>Create a <code>TFE_TensorHandle</code> using that tensor.</li>\n<li>Delete the <code>TF_Tensor</code> so that I can keep using only my <code>TFE_TensorHandle</code>.</li>\n</ol>\n<p>Then the underlying buffer may be deallocated by the JVM because the <code>TF_Tensor</code> deallocator will notify the JVM that the underlying buffer is not being used by the native library anymore. So, this raises a couple questions:</p>\n<ol>\n<li>How can I avoid this using the eager API? Shouldn't I be able to create a <code>TFE_TensorHandle</code> and let it have it's own deallocation function, similar to how it's done for <code>TF_Tensor</code>s?</li>\n<li>Why have both <code>TFE_TensorHandle</code>s and <code>TF_Tensor</code>s in the first place? Isn't there a simple way to merge the two and avoid the complexity of having to deal with both types of tensors?</li>\n</ol>\n<p>I hope this makes sense.</p>", "body_text": "@alextp I also believe that's what's happening. I have the following related question:\nThrough the C API I can create TF_Tensor objects and specify a deallocator for them. This allows me to create a tensor using a buffer created on the Scala side and pass as the deallocator a function that removes a reference to this buffer from the garbage collector (loosely speaking). Now, if I:\n\nCreate a TF_Tensor from a Scala-allocated buffer.\nCreate a TFE_TensorHandle using that tensor.\nDelete the TF_Tensor so that I can keep using only my TFE_TensorHandle.\n\nThen the underlying buffer may be deallocated by the JVM because the TF_Tensor deallocator will notify the JVM that the underlying buffer is not being used by the native library anymore. So, this raises a couple questions:\n\nHow can I avoid this using the eager API? Shouldn't I be able to create a TFE_TensorHandle and let it have it's own deallocation function, similar to how it's done for TF_Tensors?\nWhy have both TFE_TensorHandles and TF_Tensors in the first place? Isn't there a simple way to merge the two and avoid the complexity of having to deal with both types of tensors?\n\nI hope this makes sense.", "body": "@alextp I also believe that's what's happening. I have the following related question:\r\n\r\nThrough the C API I can create `TF_Tensor` objects and specify a deallocator for them. This allows me to create a tensor using a buffer created on the Scala side and pass as the deallocator a function that removes a reference to this buffer from the garbage collector (loosely speaking). Now, if I:\r\n1. Create a `TF_Tensor` from a Scala-allocated buffer.\r\n2. Create a `TFE_TensorHandle` using that tensor.\r\n3. Delete the `TF_Tensor` so that I can keep using only my `TFE_TensorHandle`.\r\n\r\nThen the underlying buffer may be deallocated by the JVM because the `TF_Tensor` deallocator will notify the JVM that the underlying buffer is not being used by the native library anymore. So, this raises a couple questions:\r\n1. How can I avoid this using the eager API? Shouldn't I be able to create a `TFE_TensorHandle` and let it have it's own deallocation function, similar to how it's done for `TF_Tensor`s?\r\n2. Why have both `TFE_TensorHandle`s and `TF_Tensor`s in the first place? Isn't there a simple way to merge the two and avoid the complexity of having to deal with both types of tensors?\r\n\r\nI hope this makes sense."}