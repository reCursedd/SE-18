{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/324480520", "html_url": "https://github.com/tensorflow/tensorflow/issues/12536#issuecomment-324480520", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12536", "id": 324480520, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNDQ4MDUyMA==", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-23T22:27:16Z", "updated_at": "2017-08-23T22:27:16Z", "author_association": "MEMBER", "body_html": "<div class=\"email-quoted-reply\">On Wed, Aug 23, 2017 at 3:22 PM, Anthony Platanios ***@***.*** &gt; wrote:\n <a class=\"user-mention\" href=\"https://github.com/alextp\">@alextp</a> &lt;<a href=\"https://github.com/alextp\">https://github.com/alextp</a>&gt; I also believe that's what's\n happening. I have the following related question:\n\n Through the C API I can create TF_Tensor objects and specify a\n deallocator for them. This allows me to create a tensor using a buffer\n created on the Scala side and pass as the deallocator a function that\n removes a reference to this buffer from the garbage collector (loosely\n speaking). Now, if I:\n\n    1. Create a TF_Tensor from a Scala-allocated buffer.\n    2. Create a TFE_TensorHandle using that tensor.\n    3. Delete the TF_Tensor so that I can keep using only my\n    TFE_TensorHandle.\n\n</div>\n<div class=\"email-fragment\">This sequence of operations should be fine. We should only call the\ndestructor after the last reference to the buffer (not the tf_tensor) has\ngone. So once you create the tfe_tensorhandle and delete the tf_tensor the\ndestructor should not be called until you delete the tfe_tensorhandle.</div>\n<div class=\"email-quoted-reply\">\n\n Then the underlying buffer may be deallocated by the JVM because the\n TF_Tensor deallocator will notify the JVM that the underlying buffer is\n not being used by the native library anymore. So, this raises a couple\n questions:\n\n    1. How can I avoid this using the eager API? Shouldn't I be able to\n    create a TFE_TensorHandle and let it have it's own deallocation\n    function, similar to how it's done for TF_Tensors?\n    2. Why have both TFE_TensorHandles and TF_Tensors in the first place?\n    Isn't there a simple way to merge the two and avoid the complexity of\n    having to deal with both types of tensors?\n\n</div>\n<div class=\"email-fragment\">A TF_Tensor means a bit of memory allocated in the CPU and easily\ninspectable by custom code. a TFE_TensorHandle can be on the GPU and can\nhave internal state which is in an internal format that requires converting\nto the tf_tensor format (like in the case of strings).</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-signature-reply\">-- \n - Alex</div>\n</div>", "body_text": "On Wed, Aug 23, 2017 at 3:22 PM, Anthony Platanios ***@***.*** > wrote:\n @alextp <https://github.com/alextp> I also believe that's what's\n happening. I have the following related question:\n\n Through the C API I can create TF_Tensor objects and specify a\n deallocator for them. This allows me to create a tensor using a buffer\n created on the Scala side and pass as the deallocator a function that\n removes a reference to this buffer from the garbage collector (loosely\n speaking). Now, if I:\n\n    1. Create a TF_Tensor from a Scala-allocated buffer.\n    2. Create a TFE_TensorHandle using that tensor.\n    3. Delete the TF_Tensor so that I can keep using only my\n    TFE_TensorHandle.\n\n\nThis sequence of operations should be fine. We should only call the\ndestructor after the last reference to the buffer (not the tf_tensor) has\ngone. So once you create the tfe_tensorhandle and delete the tf_tensor the\ndestructor should not be called until you delete the tfe_tensorhandle.\n\n\n Then the underlying buffer may be deallocated by the JVM because the\n TF_Tensor deallocator will notify the JVM that the underlying buffer is\n not being used by the native library anymore. So, this raises a couple\n questions:\n\n    1. How can I avoid this using the eager API? Shouldn't I be able to\n    create a TFE_TensorHandle and let it have it's own deallocation\n    function, similar to how it's done for TF_Tensors?\n    2. Why have both TFE_TensorHandles and TF_Tensors in the first place?\n    Isn't there a simple way to merge the two and avoid the complexity of\n    having to deal with both types of tensors?\n\n\nA TF_Tensor means a bit of memory allocated in the CPU and easily\ninspectable by custom code. a TFE_TensorHandle can be on the GPU and can\nhave internal state which is in an internal format that requires converting\nto the tf_tensor format (like in the case of strings).\n\u2026\n-- \n - Alex", "body": "On Wed, Aug 23, 2017 at 3:22 PM, Anthony Platanios <notifications@github.com\n> wrote:\n\n> @alextp <https://github.com/alextp> I also believe that's what's\n> happening. I have the following related question:\n>\n> Through the C API I can create TF_Tensor objects and specify a\n> deallocator for them. This allows me to create a tensor using a buffer\n> created on the Scala side and pass as the deallocator a function that\n> removes a reference to this buffer from the garbage collector (loosely\n> speaking). Now, if I:\n>\n>    1. Create a TF_Tensor from a Scala-allocated buffer.\n>    2. Create a TFE_TensorHandle using that tensor.\n>    3. Delete the TF_Tensor so that I can keep using only my\n>    TFE_TensorHandle.\n>\n>\nThis sequence of operations should be fine. We should only call the\ndestructor after the last reference to the buffer (not the tf_tensor) has\ngone. So once you create the tfe_tensorhandle and delete the tf_tensor the\ndestructor should not be called until you delete the tfe_tensorhandle.\n\n\n>\n>\n> Then the underlying buffer may be deallocated by the JVM because the\n> TF_Tensor deallocator will notify the JVM that the underlying buffer is\n> not being used by the native library anymore. So, this raises a couple\n> questions:\n>\n>    1. How can I avoid this using the eager API? Shouldn't I be able to\n>    create a TFE_TensorHandle and let it have it's own deallocation\n>    function, similar to how it's done for TF_Tensors?\n>    2. Why have both TFE_TensorHandles and TF_Tensors in the first place?\n>    Isn't there a simple way to merge the two and avoid the complexity of\n>    having to deal with both types of tensors?\n>\n>\nA TF_Tensor means a bit of memory allocated in the CPU and easily\ninspectable by custom code. a TFE_TensorHandle can be on the GPU and can\nhave internal state which is in an internal format that requires converting\nto the tf_tensor format (like in the case of strings).\n\n-- \n - Alex\n"}