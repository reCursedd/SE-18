{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22307", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22307/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22307/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22307/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22307", "id": 360737405, "node_id": "MDU6SXNzdWUzNjA3Mzc0MDU=", "number": 22307, "title": "Tensorflow library loading order causes segmentation fault ", "user": {"login": "shanthoosh", "id": 483745, "node_id": "MDQ6VXNlcjQ4Mzc0NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/483745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shanthoosh", "html_url": "https://github.com/shanthoosh", "followers_url": "https://api.github.com/users/shanthoosh/followers", "following_url": "https://api.github.com/users/shanthoosh/following{/other_user}", "gists_url": "https://api.github.com/users/shanthoosh/gists{/gist_id}", "starred_url": "https://api.github.com/users/shanthoosh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shanthoosh/subscriptions", "organizations_url": "https://api.github.com/users/shanthoosh/orgs", "repos_url": "https://api.github.com/users/shanthoosh/repos", "events_url": "https://api.github.com/users/shanthoosh/events{/privacy}", "received_events_url": "https://api.github.com/users/shanthoosh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-09-17T06:31:05Z", "updated_at": "2018-11-22T06:17:47Z", "closed_at": "2018-09-28T21:15:44Z", "author_association": "NONE", "body_html": "<p>My application depends on both RocksDB and tensorflow. If I load rocksDB shared library before loading the tensorflow model in my application then it results in SIGSEGV. However, if the loading order is reversed then there're no exceptions(and it works fine as expected).</p>\n<p>Here're the external dependencies of my application:<br>\nTensorflow  version: 1.6<br>\nRocksDB version: 5.7.3<br>\nJava version: JDK-8<br>\nOS platform and distribution: RedHat-7(RHEL-7.2)</p>\n<p>The following code uses both RocksDB and tensorflow results in segmentation fault:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">LibLoad</span>{\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">absPath</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-v\">relativePath</span>) {\n\t<span class=\"pl-k\">return</span> <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>getProperty(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>user.dir<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> relativePath;\n    }\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-k\">String</span>[] <span class=\"pl-v\">args</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">InterruptedException</span> {\n      <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>load(<span class=\"pl-smi\">LibLoad</span><span class=\"pl-k\">.</span>absPath(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>libs/librocksdbjni6775043347215777920.so<span class=\"pl-pds\">\"</span></span>));\n      <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>load(<span class=\"pl-smi\">LibLoad</span><span class=\"pl-k\">.</span>absPath(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>libs/tensorflow_native_libraries-1534022257987-0/libtensorflow_framework.so<span class=\"pl-pds\">\"</span></span>));\n    }\n}</pre></div>\n<p>Actual exception:</p>\n<pre><code># A fatal error has been detected by the Java Runtime Environment:\n#\n#  SIGSEGV (0xb) at pc=0x0000000000000000, pid=3773, tid=140566680151808\n#\n# JRE version: Java(TM) SE Runtime Environment (8.0_05-b13) (build 1.8.0_05-b13)\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.5-b02 mixed mode linux-amd64 compressed oops)\n# Problematic frame:\n# C  0x0000000000000000\n#\n# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try \u201culimit -c unlimited\u201d before starting Java again\n#\n# An error report file with more information is saved as:\n# /export/content/lid/apps/careers-banzai-jobs-embedding-samza/dev-i001/hs_err_pid3773.log\n#\n# If you would like to submit a bug report, please visit:\n#   http://bugreport.sun.com/bugreport/crash.jsp\n# The crash happened outside the Java Virtual Machine in native code.\n# See problematic frame for where to report the bug.\n#\n  \n6  &lt;signal handler called&gt;\n#7  0x0000000000000000 in ?? ()\n#8  0x00007f17b8dbfbb0 in pthread_once () from /lib64/libpthread.so.0\n#9  0x00007f16dd60545a in void std::call_once&lt;void (&amp;)()&gt;(std::once_flag&amp;, void (&amp;)()) ()\n   from libtensorflow_framework.so\n#10 0x00007f16dd60549e in tensorflow::port::TestCPUFeature(tensorflow::port::CPUFeature) ()\n \n</code></pre>\n<p>Similar issues had been reported previously in the community and the suggestion solution was to load tensorflow shared library before the RocksDB shared library.</p>\n<ol>\n<li>Just curious about the actual root cause of this segmentation fault. Can someone help me on how to get to the bottom of it.</li>\n<li>What is the recommended long-term solution for this problem? Does the same codeflow that caused segmentation fault when loading the tensorflow model get triggered in other scenarios as well?</li>\n</ol>\n<p>Any help for solving this problem is greatly appreciated.</p>", "body_text": "My application depends on both RocksDB and tensorflow. If I load rocksDB shared library before loading the tensorflow model in my application then it results in SIGSEGV. However, if the loading order is reversed then there're no exceptions(and it works fine as expected).\nHere're the external dependencies of my application:\nTensorflow  version: 1.6\nRocksDB version: 5.7.3\nJava version: JDK-8\nOS platform and distribution: RedHat-7(RHEL-7.2)\nThe following code uses both RocksDB and tensorflow results in segmentation fault:\npublic class LibLoad{\n    public static String absPath(String relativePath) {\n\treturn System.getProperty(\"user.dir\") + \"/\" + relativePath;\n    }\n    public static void main(String[] args) throws InterruptedException {\n      System.load(LibLoad.absPath(\"libs/librocksdbjni6775043347215777920.so\"));\n      System.load(LibLoad.absPath(\"libs/tensorflow_native_libraries-1534022257987-0/libtensorflow_framework.so\"));\n    }\n}\nActual exception:\n# A fatal error has been detected by the Java Runtime Environment:\n#\n#  SIGSEGV (0xb) at pc=0x0000000000000000, pid=3773, tid=140566680151808\n#\n# JRE version: Java(TM) SE Runtime Environment (8.0_05-b13) (build 1.8.0_05-b13)\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.5-b02 mixed mode linux-amd64 compressed oops)\n# Problematic frame:\n# C  0x0000000000000000\n#\n# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try \u201culimit -c unlimited\u201d before starting Java again\n#\n# An error report file with more information is saved as:\n# /export/content/lid/apps/careers-banzai-jobs-embedding-samza/dev-i001/hs_err_pid3773.log\n#\n# If you would like to submit a bug report, please visit:\n#   http://bugreport.sun.com/bugreport/crash.jsp\n# The crash happened outside the Java Virtual Machine in native code.\n# See problematic frame for where to report the bug.\n#\n  \n6  <signal handler called>\n#7  0x0000000000000000 in ?? ()\n#8  0x00007f17b8dbfbb0 in pthread_once () from /lib64/libpthread.so.0\n#9  0x00007f16dd60545a in void std::call_once<void (&)()>(std::once_flag&, void (&)()) ()\n   from libtensorflow_framework.so\n#10 0x00007f16dd60549e in tensorflow::port::TestCPUFeature(tensorflow::port::CPUFeature) ()\n \n\nSimilar issues had been reported previously in the community and the suggestion solution was to load tensorflow shared library before the RocksDB shared library.\n\nJust curious about the actual root cause of this segmentation fault. Can someone help me on how to get to the bottom of it.\nWhat is the recommended long-term solution for this problem? Does the same codeflow that caused segmentation fault when loading the tensorflow model get triggered in other scenarios as well?\n\nAny help for solving this problem is greatly appreciated.", "body": "My application depends on both RocksDB and tensorflow. If I load rocksDB shared library before loading the tensorflow model in my application then it results in SIGSEGV. However, if the loading order is reversed then there're no exceptions(and it works fine as expected). \r\n\r\nHere're the external dependencies of my application:\r\nTensorflow  version: 1.6\r\nRocksDB version: 5.7.3\r\nJava version: JDK-8\r\nOS platform and distribution: RedHat-7(RHEL-7.2)\r\n\r\nThe following code uses both RocksDB and tensorflow results in segmentation fault:\r\n\r\n```java\r\npublic class LibLoad{\r\n    public static String absPath(String relativePath) {\r\n\treturn System.getProperty(\"user.dir\") + \"/\" + relativePath;\r\n    }\r\n    public static void main(String[] args) throws InterruptedException {\r\n      System.load(LibLoad.absPath(\"libs/librocksdbjni6775043347215777920.so\"));\r\n      System.load(LibLoad.absPath(\"libs/tensorflow_native_libraries-1534022257987-0/libtensorflow_framework.so\"));\r\n    }\r\n}\r\n```\r\n\r\nActual exception:\r\n```\r\n# A fatal error has been detected by the Java Runtime Environment:\r\n#\r\n#  SIGSEGV (0xb) at pc=0x0000000000000000, pid=3773, tid=140566680151808\r\n#\r\n# JRE version: Java(TM) SE Runtime Environment (8.0_05-b13) (build 1.8.0_05-b13)\r\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.5-b02 mixed mode linux-amd64 compressed oops)\r\n# Problematic frame:\r\n# C  0x0000000000000000\r\n#\r\n# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try \u201culimit -c unlimited\u201d before starting Java again\r\n#\r\n# An error report file with more information is saved as:\r\n# /export/content/lid/apps/careers-banzai-jobs-embedding-samza/dev-i001/hs_err_pid3773.log\r\n#\r\n# If you would like to submit a bug report, please visit:\r\n#   http://bugreport.sun.com/bugreport/crash.jsp\r\n# The crash happened outside the Java Virtual Machine in native code.\r\n# See problematic frame for where to report the bug.\r\n#\r\n  \r\n6  <signal handler called>\r\n#7  0x0000000000000000 in ?? ()\r\n#8  0x00007f17b8dbfbb0 in pthread_once () from /lib64/libpthread.so.0\r\n#9  0x00007f16dd60545a in void std::call_once<void (&)()>(std::once_flag&, void (&)()) ()\r\n   from libtensorflow_framework.so\r\n#10 0x00007f16dd60549e in tensorflow::port::TestCPUFeature(tensorflow::port::CPUFeature) ()\r\n \r\n```\r\n\r\nSimilar issues had been reported previously in the community and the suggestion solution was to load tensorflow shared library before the RocksDB shared library. \r\n\r\n1. Just curious about the actual root cause of this segmentation fault. Can someone help me on how to get to the bottom of it.\r\n2. What is the recommended long-term solution for this problem? Does the same codeflow that caused segmentation fault when loading the tensorflow model get triggered in other scenarios as well?\r\n\r\nAny help for solving this problem is greatly appreciated."}