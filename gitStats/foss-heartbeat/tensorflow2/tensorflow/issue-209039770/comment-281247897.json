{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/281247897", "html_url": "https://github.com/tensorflow/tensorflow/issues/7726#issuecomment-281247897", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7726", "id": 281247897, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTI0Nzg5Nw==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-21T05:18:08Z", "updated_at": "2017-02-21T05:18:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I don't think this feature should be added to <code>tf.import_graph_def()</code>, because it is designed to deal explicitly with correctly typed and valid graphs. The <code>input_map</code> argument is available for remapping inputs explicitly, and the following program works:</p>\n<div class=\"highlight highlight-source-python\"><pre>g2 <span class=\"pl-k\">=</span> tf.Graph()\n<span class=\"pl-k\">with</span> g2.as_default():\n    x <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">2.0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>)\n    tf.import_graph_def(g_def, <span class=\"pl-v\">input_map</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x:0<span class=\"pl-pds\">\"</span></span>: x})</pre></div>\n<p>Notice how you had to drop to manipulating the <code>tf.GraphDef</code> directly at the protobuf level in order to <em>create</em> an incomplete graph. You could easily achieve the behavior you desire by merging the protobufs <code>g1.as_graph_def()</code> and <code>g2.as_graph_def()</code>, and then use <code>tf.import_graph_def()</code> to check the validity of the merged graph.</p>\n<p>There might be room somewhere in the API for lower-level graph editing (<code>tf.contrib.graph_editor</code> for example?), but <code>tf.import_graph_def()</code> already packs a lot of functionality into a single function, and adding more implicit behavior would not\u2014in my opinion\u2014improve it.</p>", "body_text": "I don't think this feature should be added to tf.import_graph_def(), because it is designed to deal explicitly with correctly typed and valid graphs. The input_map argument is available for remapping inputs explicitly, and the following program works:\ng2 = tf.Graph()\nwith g2.as_default():\n    x = tf.constant(2.0, name=\"x\")\n    tf.import_graph_def(g_def, input_map={\"x:0\": x})\nNotice how you had to drop to manipulating the tf.GraphDef directly at the protobuf level in order to create an incomplete graph. You could easily achieve the behavior you desire by merging the protobufs g1.as_graph_def() and g2.as_graph_def(), and then use tf.import_graph_def() to check the validity of the merged graph.\nThere might be room somewhere in the API for lower-level graph editing (tf.contrib.graph_editor for example?), but tf.import_graph_def() already packs a lot of functionality into a single function, and adding more implicit behavior would not\u2014in my opinion\u2014improve it.", "body": "I don't think this feature should be added to `tf.import_graph_def()`, because it is designed to deal explicitly with correctly typed and valid graphs. The `input_map` argument is available for remapping inputs explicitly, and the following program works:\r\n\r\n```python\r\ng2 = tf.Graph()\r\nwith g2.as_default():\r\n    x = tf.constant(2.0, name=\"x\")\r\n    tf.import_graph_def(g_def, input_map={\"x:0\": x})\r\n```\r\n\r\nNotice how you had to drop to manipulating the `tf.GraphDef` directly at the protobuf level in order to *create* an incomplete graph. You could easily achieve the behavior you desire by merging the protobufs `g1.as_graph_def()` and `g2.as_graph_def()`, and then use `tf.import_graph_def()` to check the validity of the merged graph.\r\n\r\nThere might be room somewhere in the API for lower-level graph editing (`tf.contrib.graph_editor` for example?), but `tf.import_graph_def()` already packs a lot of functionality into a single function, and adding more implicit behavior would not\u2014in my opinion\u2014improve it."}