{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/407125633", "html_url": "https://github.com/tensorflow/tensorflow/issues/19952#issuecomment-407125633", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19952", "id": 407125633, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzEyNTYzMw==", "user": {"login": "jsimsa", "id": 1072079, "node_id": "MDQ6VXNlcjEwNzIwNzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1072079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsimsa", "html_url": "https://github.com/jsimsa", "followers_url": "https://api.github.com/users/jsimsa/followers", "following_url": "https://api.github.com/users/jsimsa/following{/other_user}", "gists_url": "https://api.github.com/users/jsimsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsimsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsimsa/subscriptions", "organizations_url": "https://api.github.com/users/jsimsa/orgs", "repos_url": "https://api.github.com/users/jsimsa/repos", "events_url": "https://api.github.com/users/jsimsa/events{/privacy}", "received_events_url": "https://api.github.com/users/jsimsa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-23T16:51:05Z", "updated_at": "2018-07-23T23:37:52Z", "author_association": "MEMBER", "body_html": "<p>Hello <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7576060\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/terrykong\">@terrykong</a>, the workaround you used is currently the best known solution. However, as alluded to by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>, I am working and a couple of new transformations that will allow you do to the following:</p>\n<pre><code>dataset = dataset.batch(batch_size).window(num_workers).filter(lambda x: tf.equal(count(x), num_workers)).flat_map(lambda x: x)\n</code></pre>\n<p>The new transformations are:<br>\n<code>window</code> -- which combines elements of the input dataset into windows of (nested) datasets<br>\n<code>count</code> -- which assumes the input is a dataset and counts the number of elements of its elements</p>\n<p>The design is expected to undergo an external review soon and I will notify you when it does.</p>", "body_text": "Hello @terrykong, the workaround you used is currently the best known solution. However, as alluded to by @mrry, I am working and a couple of new transformations that will allow you do to the following:\ndataset = dataset.batch(batch_size).window(num_workers).filter(lambda x: tf.equal(count(x), num_workers)).flat_map(lambda x: x)\n\nThe new transformations are:\nwindow -- which combines elements of the input dataset into windows of (nested) datasets\ncount -- which assumes the input is a dataset and counts the number of elements of its elements\nThe design is expected to undergo an external review soon and I will notify you when it does.", "body": "Hello @terrykong, the workaround you used is currently the best known solution. However, as alluded to by @mrry, I am working and a couple of new transformations that will allow you do to the following:\r\n\r\n```\r\ndataset = dataset.batch(batch_size).window(num_workers).filter(lambda x: tf.equal(count(x), num_workers)).flat_map(lambda x: x)\r\n```\r\n\r\nThe new transformations are:\r\n`window` -- which combines elements of the input dataset into windows of (nested) datasets\r\n`count` -- which assumes the input is a dataset and counts the number of elements of its elements\r\n\r\nThe design is expected to undergo an external review soon and I will notify you when it does."}