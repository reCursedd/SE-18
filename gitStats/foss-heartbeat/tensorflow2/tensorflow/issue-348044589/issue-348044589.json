{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21415", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21415/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21415/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21415/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21415", "id": 348044589, "node_id": "MDU6SXNzdWUzNDgwNDQ1ODk=", "number": 21415, "title": "tensorflow ScipyOptimizerInterface feeding error ", "user": {"login": "ywanglocus", "id": 40369958, "node_id": "MDQ6VXNlcjQwMzY5OTU4", "avatar_url": "https://avatars0.githubusercontent.com/u/40369958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ywanglocus", "html_url": "https://github.com/ywanglocus", "followers_url": "https://api.github.com/users/ywanglocus/followers", "following_url": "https://api.github.com/users/ywanglocus/following{/other_user}", "gists_url": "https://api.github.com/users/ywanglocus/gists{/gist_id}", "starred_url": "https://api.github.com/users/ywanglocus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ywanglocus/subscriptions", "organizations_url": "https://api.github.com/users/ywanglocus/orgs", "repos_url": "https://api.github.com/users/ywanglocus/repos", "events_url": "https://api.github.com/users/ywanglocus/events{/privacy}", "received_events_url": "https://api.github.com/users/ywanglocus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-08-06T19:02:14Z", "updated_at": "2018-08-07T17:18:47Z", "closed_at": "2018-08-07T17:18:47Z", "author_association": "NONE", "body_html": "<hr>\n<p>My code are as follow:</p>\n<pre><code>p_f = tf.get_variable('p_f', shape=(1, 1)) #corresponding index 0 in \n\nW1_1 = tf.constant(paras[0], dtype=tf.float32, name='W1_1' )\nW1_2_1 = tf.constant(paras[1][0, :], dtype=tf.float32, shape=[1, 79], name='W1_2_1')\nW1_2_2 = tf.constant(paras[1][1:, :], dtype=tf.float32, name='W1_2_2')\nb1 = tf.constant(paras[2], dtype=tf.float32, name='b1' )\nW2_1_1 = tf.constant(paras[3][0, :], dtype=tf.float32, shape=[1, 1], name='W1_2_1')\nW2_1_2 = tf.constant(paras[3][1:, :], dtype=tf.float32, name='W1_2_2')\nW2_2 = tf.constant(paras[4], dtype=tf.float32, name='W2_2' )\nb2 = tf.constant(paras[5], dtype=tf.float32, name='b2' )\n\np_sub =  tf.placeholder(shape=(None, 18), dtype=tf.float32 , name=\"p_sub\")\np_t =  tf.placeholder(shape=(None, 60), dtype=tf.float32, name= 'p_t') #the other part except for the price\n\nD = tf.matmul(tf.nn.sigmoid(tf.matmul(p_f, W1_2_1)+ tf.matmul(p_t, W1_2_2) + tf.matmul(p_sub, W1_1)+b1), W2_2)+tf.matmul(p_f, W2_1_1)+ tf.matmul(p_t, W2_1_2)+b2\n    \np_loss = tf.reduce_mean(-p_f*D) #self defined loss\n\n###parameters\nlearning_rate = 0.5\noptimizer = tf.contrib.opt.ScipyOptimizerInterface(p_loss, method='L-BFGS-B', options={'maxiter': 1000})\n\nwith tf.Session() as sess:\n    init = tf.global_variables_initializer()\n    for step in range(419):\n        #parameters \n        x1_train = tv_train.iloc[step*batch_size:step*batch_size+batch_size, 66:84].values \n        x1_test = tv_test.iloc[:, 66:84].values\n        x2_train = np.concatenate((tv_train.iloc[step*batch_size:step*batch_size+batch_size, 4:11].values, tv_train.iloc[step*batch_size:step*batch_size+batch_size, 14:67].values), 1) \n        #x2_train = tf.concat(axis=1, values=[tv_train.iloc[step*batch_size:step*batch_size+batch_size, 4:11].values, tv_train.iloc[step*batch_size:step*batch_size+batch_size, 14:67].values])\n        x2_test = np.concatenate((tv_test.iloc[:, 4:11].values, tv_test.iloc[:, 14:67].values), 1) \n        \n        sess.run(init, feed_dict={p_sub: x1_train, \n                                  p_t: x2_train})\n        optimizer.minimize(sess) \n        ret=sess.run(p_f)\n        \n        if step % 200 == 0:\n            print()\n            print(ret)\n            print()\n</code></pre>\n<pre><code>----------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _do_call(self, fn, *args)\n   1349     try:\n-&gt; 1350       return fn(*args)\n   1351     except errors.OpError as e:\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _run_fn(session, feed_dict, fetch_list, target_list, options, run_metadata)\n   1328                                    feed_dict, fetch_list, target_list,\n-&gt; 1329                                    status, run_metadata)\n   1330 \n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\errors_impl.py in __exit__(self, type_arg, value_arg, traceback_arg)\n    472             compat.as_text(c_api.TF_Message(self.status.status)),\n--&gt; 473             c_api.TF_GetCode(self.status.status))\n    474     # Delete the underlying status object from memory otherwise it stays alive\n\nInvalidArgumentError: You must feed a value for placeholder tensor 'p_sub' with dtype float and shape [?,18]\n\t [[Node: p_sub = Placeholder[dtype=DT_FLOAT, shape=[?,18], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\n\nDuring handling of the above exception, another exception occurred:\n\nInvalidArgumentError                      Traceback (most recent call last)\n&lt;ipython-input-67-986c52132edf&gt; in &lt;module&gt;()\n     39         sess.run(init, feed_dict={p_sub: x1_train, \n     40                                   p_t: x2_train})\n---&gt; 41         optimizer.minimize(sess)\n     42         ret=sess.run(p_f)\n     43 \n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\opt\\python\\training\\external_optimizer.py in minimize(self, session, feed_dict, fetches, step_callback, loss_callback, **run_kwargs)\n    205         packed_bounds=self._packed_bounds,\n    206         step_callback=step_callback,\n--&gt; 207         optimizer_kwargs=self.optimizer_kwargs)\n    208     var_vals = [\n    209         packed_var_val[packing_slice] for packing_slice in self._packing_slices\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\opt\\python\\training\\external_optimizer.py in _minimize(self, initial_val, loss_grad_func, equality_funcs, equality_grad_funcs, inequality_funcs, inequality_grad_funcs, packed_bounds, step_callback, optimizer_kwargs)\n    404 \n    405     import scipy.optimize  # pylint: disable=g-import-not-at-top\n--&gt; 406     result = scipy.optimize.minimize(*minimize_args, **minimize_kwargs)\n    407 \n    408     message_lines = [\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\_minimize.py in minimize(fun, x0, args, method, jac, hess, hessp, bounds, constraints, tol, callback, options)\n    448     elif meth == 'l-bfgs-b':\n    449         return _minimize_lbfgsb(fun, x0, args, jac, bounds,\n--&gt; 450                                 callback=callback, **options)\n    451     elif meth == 'tnc':\n    452         return _minimize_tnc(fun, x0, args, jac, bounds, callback=callback,\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\lbfgsb.py in _minimize_lbfgsb(fun, x0, args, jac, bounds, disp, maxcor, ftol, gtol, eps, maxfun, maxiter, iprint, callback, maxls, **unknown_options)\n    326             # until the completion of the current minimization iteration.\n    327             # Overwrite f and g:\n--&gt; 328             f, g = func_and_grad(x)\n    329         elif task_str.startswith(b'NEW_X'):\n    330             # new iteration\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\lbfgsb.py in func_and_grad(x)\n    276     else:\n    277         def func_and_grad(x):\n--&gt; 278             f = fun(x, *args)\n    279             g = jac(x, *args)\n    280             return f, g\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\optimize.py in function_wrapper(*wrapper_args)\n    290     def function_wrapper(*wrapper_args):\n    291         ncalls[0] += 1\n--&gt; 292         return function(*(wrapper_args + args))\n    293 \n    294     return ncalls, function_wrapper\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\optimize.py in __call__(self, x, *args)\n     61     def __call__(self, x, *args):\n     62         self.x = numpy.asarray(x).copy()\n---&gt; 63         fg = self.fun(x, *args)\n     64         self.jac = fg[1]\n     65         return fg[0]\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\opt\\python\\training\\external_optimizer.py in loss_grad_func_wrapper(x)\n    365     def loss_grad_func_wrapper(x):\n    366       # SciPy's L-BFGS-B Fortran implementation requires gradients as doubles.\n--&gt; 367       loss, gradient = loss_grad_func(x)\n    368       return loss, gradient.astype('float64')\n    369 \n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\opt\\python\\training\\external_optimizer.py in eval_func(x)\n    276 \n    277       augmented_fetch_vals = session.run(\n--&gt; 278           augmented_fetches, feed_dict=augmented_feed_dict)\n    279 \n    280       if callable(callback):\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in run(self, fetches, feed_dict, options, run_metadata)\n    893     try:\n    894       result = self._run(None, fetches, feed_dict, options_ptr,\n--&gt; 895                          run_metadata_ptr)\n    896       if run_metadata:\n    897         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)\n   1126     if final_fetches or final_targets or (handle and feed_dict_tensor):\n   1127       results = self._do_run(handle, final_targets, final_fetches,\n-&gt; 1128                              feed_dict_tensor, options, run_metadata)\n   1129     else:\n   1130       results = []\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\n   1342     if handle is None:\n   1343       return self._do_call(_run_fn, self._session, feeds, fetches, targets,\n-&gt; 1344                            options, run_metadata)\n   1345     else:\n   1346       return self._do_call(_prun_fn, self._session, handle, feeds, fetches)\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _do_call(self, fn, *args)\n   1361         except KeyError:\n   1362           pass\n-&gt; 1363       raise type(e)(node_def, op, message)\n   1364 \n   1365   def _extend_graph(self):\n\nInvalidArgumentError: You must feed a value for placeholder tensor 'p_sub' with dtype float and shape [?,18]\n\t [[Node: p_sub = Placeholder[dtype=DT_FLOAT, shape=[?,18], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\n\nCaused by op 'p_sub', defined at:\n  File \"C:\\ProgramData\\Anaconda3\\lib\\runpy.py\", line 193, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py\", line 16, in &lt;module&gt;\n    app.launch_new_instance()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\traitlets\\config\\application.py\", line 658, in launch_instance\n    app.start()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\kernelapp.py\", line 477, in start\n    ioloop.IOLoop.instance().start()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zmq\\eventloop\\ioloop.py\", line 177, in start\n    super(ZMQIOLoop, self).start()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tornado\\ioloop.py\", line 888, in start\n    handler_func(fd_obj, events)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tornado\\stack_context.py\", line 277, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 440, in _handle_events\n    self._handle_recv()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 472, in _handle_recv\n    self._run_callback(callback, msg)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 414, in _run_callback\n    callback(*args, **kwargs)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tornado\\stack_context.py\", line 277, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 283, in dispatcher\n    return self.dispatch_shell(stream, msg)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 235, in dispatch_shell\n    handler(stream, idents, msg)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 399, in execute_request\n    user_expressions, allow_stdin)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\ipkernel.py\", line 196, in do_execute\n    res = shell.run_cell(code, store_history=store_history, silent=silent)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\zmqshell.py\", line 533, in run_cell\n    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2717, in run_cell\n    interactivity=interactivity, compiler=compiler, result=result)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2821, in run_ast_nodes\n    if self.run_code(code, result):\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2881, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"&lt;ipython-input-67-986c52132edf&gt;\", line 18, in &lt;module&gt;\n    p_sub =  tf.placeholder(shape=(None, 18), dtype=tf.float32 , name=\"p_sub\")\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\array_ops.py\", line 1680, in placeholder\n    return gen_array_ops._placeholder(dtype=dtype, shape=shape, name=name)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\gen_array_ops.py\", line 4105, in _placeholder\n    \"Placeholder\", dtype=dtype, shape=shape, name=name)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py\", line 787, in _apply_op_helper\n    op_def=op_def)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 3160, in create_op\n    op_def=op_def)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 1625, in __init__\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\n\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'p_sub' with dtype float and shape [?,18]\n\t [[Node: p_sub = Placeholder[dtype=DT_FLOAT, shape=[?,18], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\n</code></pre>", "body_text": "My code are as follow:\np_f = tf.get_variable('p_f', shape=(1, 1)) #corresponding index 0 in \n\nW1_1 = tf.constant(paras[0], dtype=tf.float32, name='W1_1' )\nW1_2_1 = tf.constant(paras[1][0, :], dtype=tf.float32, shape=[1, 79], name='W1_2_1')\nW1_2_2 = tf.constant(paras[1][1:, :], dtype=tf.float32, name='W1_2_2')\nb1 = tf.constant(paras[2], dtype=tf.float32, name='b1' )\nW2_1_1 = tf.constant(paras[3][0, :], dtype=tf.float32, shape=[1, 1], name='W1_2_1')\nW2_1_2 = tf.constant(paras[3][1:, :], dtype=tf.float32, name='W1_2_2')\nW2_2 = tf.constant(paras[4], dtype=tf.float32, name='W2_2' )\nb2 = tf.constant(paras[5], dtype=tf.float32, name='b2' )\n\np_sub =  tf.placeholder(shape=(None, 18), dtype=tf.float32 , name=\"p_sub\")\np_t =  tf.placeholder(shape=(None, 60), dtype=tf.float32, name= 'p_t') #the other part except for the price\n\nD = tf.matmul(tf.nn.sigmoid(tf.matmul(p_f, W1_2_1)+ tf.matmul(p_t, W1_2_2) + tf.matmul(p_sub, W1_1)+b1), W2_2)+tf.matmul(p_f, W2_1_1)+ tf.matmul(p_t, W2_1_2)+b2\n    \np_loss = tf.reduce_mean(-p_f*D) #self defined loss\n\n###parameters\nlearning_rate = 0.5\noptimizer = tf.contrib.opt.ScipyOptimizerInterface(p_loss, method='L-BFGS-B', options={'maxiter': 1000})\n\nwith tf.Session() as sess:\n    init = tf.global_variables_initializer()\n    for step in range(419):\n        #parameters \n        x1_train = tv_train.iloc[step*batch_size:step*batch_size+batch_size, 66:84].values \n        x1_test = tv_test.iloc[:, 66:84].values\n        x2_train = np.concatenate((tv_train.iloc[step*batch_size:step*batch_size+batch_size, 4:11].values, tv_train.iloc[step*batch_size:step*batch_size+batch_size, 14:67].values), 1) \n        #x2_train = tf.concat(axis=1, values=[tv_train.iloc[step*batch_size:step*batch_size+batch_size, 4:11].values, tv_train.iloc[step*batch_size:step*batch_size+batch_size, 14:67].values])\n        x2_test = np.concatenate((tv_test.iloc[:, 4:11].values, tv_test.iloc[:, 14:67].values), 1) \n        \n        sess.run(init, feed_dict={p_sub: x1_train, \n                                  p_t: x2_train})\n        optimizer.minimize(sess) \n        ret=sess.run(p_f)\n        \n        if step % 200 == 0:\n            print()\n            print(ret)\n            print()\n\n----------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _do_call(self, fn, *args)\n   1349     try:\n-> 1350       return fn(*args)\n   1351     except errors.OpError as e:\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _run_fn(session, feed_dict, fetch_list, target_list, options, run_metadata)\n   1328                                    feed_dict, fetch_list, target_list,\n-> 1329                                    status, run_metadata)\n   1330 \n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\errors_impl.py in __exit__(self, type_arg, value_arg, traceback_arg)\n    472             compat.as_text(c_api.TF_Message(self.status.status)),\n--> 473             c_api.TF_GetCode(self.status.status))\n    474     # Delete the underlying status object from memory otherwise it stays alive\n\nInvalidArgumentError: You must feed a value for placeholder tensor 'p_sub' with dtype float and shape [?,18]\n\t [[Node: p_sub = Placeholder[dtype=DT_FLOAT, shape=[?,18], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\n\nDuring handling of the above exception, another exception occurred:\n\nInvalidArgumentError                      Traceback (most recent call last)\n<ipython-input-67-986c52132edf> in <module>()\n     39         sess.run(init, feed_dict={p_sub: x1_train, \n     40                                   p_t: x2_train})\n---> 41         optimizer.minimize(sess)\n     42         ret=sess.run(p_f)\n     43 \n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\opt\\python\\training\\external_optimizer.py in minimize(self, session, feed_dict, fetches, step_callback, loss_callback, **run_kwargs)\n    205         packed_bounds=self._packed_bounds,\n    206         step_callback=step_callback,\n--> 207         optimizer_kwargs=self.optimizer_kwargs)\n    208     var_vals = [\n    209         packed_var_val[packing_slice] for packing_slice in self._packing_slices\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\opt\\python\\training\\external_optimizer.py in _minimize(self, initial_val, loss_grad_func, equality_funcs, equality_grad_funcs, inequality_funcs, inequality_grad_funcs, packed_bounds, step_callback, optimizer_kwargs)\n    404 \n    405     import scipy.optimize  # pylint: disable=g-import-not-at-top\n--> 406     result = scipy.optimize.minimize(*minimize_args, **minimize_kwargs)\n    407 \n    408     message_lines = [\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\_minimize.py in minimize(fun, x0, args, method, jac, hess, hessp, bounds, constraints, tol, callback, options)\n    448     elif meth == 'l-bfgs-b':\n    449         return _minimize_lbfgsb(fun, x0, args, jac, bounds,\n--> 450                                 callback=callback, **options)\n    451     elif meth == 'tnc':\n    452         return _minimize_tnc(fun, x0, args, jac, bounds, callback=callback,\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\lbfgsb.py in _minimize_lbfgsb(fun, x0, args, jac, bounds, disp, maxcor, ftol, gtol, eps, maxfun, maxiter, iprint, callback, maxls, **unknown_options)\n    326             # until the completion of the current minimization iteration.\n    327             # Overwrite f and g:\n--> 328             f, g = func_and_grad(x)\n    329         elif task_str.startswith(b'NEW_X'):\n    330             # new iteration\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\lbfgsb.py in func_and_grad(x)\n    276     else:\n    277         def func_and_grad(x):\n--> 278             f = fun(x, *args)\n    279             g = jac(x, *args)\n    280             return f, g\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\optimize.py in function_wrapper(*wrapper_args)\n    290     def function_wrapper(*wrapper_args):\n    291         ncalls[0] += 1\n--> 292         return function(*(wrapper_args + args))\n    293 \n    294     return ncalls, function_wrapper\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\optimize.py in __call__(self, x, *args)\n     61     def __call__(self, x, *args):\n     62         self.x = numpy.asarray(x).copy()\n---> 63         fg = self.fun(x, *args)\n     64         self.jac = fg[1]\n     65         return fg[0]\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\opt\\python\\training\\external_optimizer.py in loss_grad_func_wrapper(x)\n    365     def loss_grad_func_wrapper(x):\n    366       # SciPy's L-BFGS-B Fortran implementation requires gradients as doubles.\n--> 367       loss, gradient = loss_grad_func(x)\n    368       return loss, gradient.astype('float64')\n    369 \n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\opt\\python\\training\\external_optimizer.py in eval_func(x)\n    276 \n    277       augmented_fetch_vals = session.run(\n--> 278           augmented_fetches, feed_dict=augmented_feed_dict)\n    279 \n    280       if callable(callback):\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in run(self, fetches, feed_dict, options, run_metadata)\n    893     try:\n    894       result = self._run(None, fetches, feed_dict, options_ptr,\n--> 895                          run_metadata_ptr)\n    896       if run_metadata:\n    897         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)\n   1126     if final_fetches or final_targets or (handle and feed_dict_tensor):\n   1127       results = self._do_run(handle, final_targets, final_fetches,\n-> 1128                              feed_dict_tensor, options, run_metadata)\n   1129     else:\n   1130       results = []\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\n   1342     if handle is None:\n   1343       return self._do_call(_run_fn, self._session, feeds, fetches, targets,\n-> 1344                            options, run_metadata)\n   1345     else:\n   1346       return self._do_call(_prun_fn, self._session, handle, feeds, fetches)\n\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _do_call(self, fn, *args)\n   1361         except KeyError:\n   1362           pass\n-> 1363       raise type(e)(node_def, op, message)\n   1364 \n   1365   def _extend_graph(self):\n\nInvalidArgumentError: You must feed a value for placeholder tensor 'p_sub' with dtype float and shape [?,18]\n\t [[Node: p_sub = Placeholder[dtype=DT_FLOAT, shape=[?,18], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\n\nCaused by op 'p_sub', defined at:\n  File \"C:\\ProgramData\\Anaconda3\\lib\\runpy.py\", line 193, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py\", line 16, in <module>\n    app.launch_new_instance()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\traitlets\\config\\application.py\", line 658, in launch_instance\n    app.start()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\kernelapp.py\", line 477, in start\n    ioloop.IOLoop.instance().start()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zmq\\eventloop\\ioloop.py\", line 177, in start\n    super(ZMQIOLoop, self).start()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tornado\\ioloop.py\", line 888, in start\n    handler_func(fd_obj, events)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tornado\\stack_context.py\", line 277, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 440, in _handle_events\n    self._handle_recv()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 472, in _handle_recv\n    self._run_callback(callback, msg)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 414, in _run_callback\n    callback(*args, **kwargs)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tornado\\stack_context.py\", line 277, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 283, in dispatcher\n    return self.dispatch_shell(stream, msg)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 235, in dispatch_shell\n    handler(stream, idents, msg)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 399, in execute_request\n    user_expressions, allow_stdin)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\ipkernel.py\", line 196, in do_execute\n    res = shell.run_cell(code, store_history=store_history, silent=silent)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\zmqshell.py\", line 533, in run_cell\n    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2717, in run_cell\n    interactivity=interactivity, compiler=compiler, result=result)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2821, in run_ast_nodes\n    if self.run_code(code, result):\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2881, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"<ipython-input-67-986c52132edf>\", line 18, in <module>\n    p_sub =  tf.placeholder(shape=(None, 18), dtype=tf.float32 , name=\"p_sub\")\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\array_ops.py\", line 1680, in placeholder\n    return gen_array_ops._placeholder(dtype=dtype, shape=shape, name=name)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\gen_array_ops.py\", line 4105, in _placeholder\n    \"Placeholder\", dtype=dtype, shape=shape, name=name)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py\", line 787, in _apply_op_helper\n    op_def=op_def)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 3160, in create_op\n    op_def=op_def)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 1625, in __init__\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\n\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'p_sub' with dtype float and shape [?,18]\n\t [[Node: p_sub = Placeholder[dtype=DT_FLOAT, shape=[?,18], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]", "body": "-----------------------\r\nMy code are as follow:\r\n```\r\np_f = tf.get_variable('p_f', shape=(1, 1)) #corresponding index 0 in \r\n\r\nW1_1 = tf.constant(paras[0], dtype=tf.float32, name='W1_1' )\r\nW1_2_1 = tf.constant(paras[1][0, :], dtype=tf.float32, shape=[1, 79], name='W1_2_1')\r\nW1_2_2 = tf.constant(paras[1][1:, :], dtype=tf.float32, name='W1_2_2')\r\nb1 = tf.constant(paras[2], dtype=tf.float32, name='b1' )\r\nW2_1_1 = tf.constant(paras[3][0, :], dtype=tf.float32, shape=[1, 1], name='W1_2_1')\r\nW2_1_2 = tf.constant(paras[3][1:, :], dtype=tf.float32, name='W1_2_2')\r\nW2_2 = tf.constant(paras[4], dtype=tf.float32, name='W2_2' )\r\nb2 = tf.constant(paras[5], dtype=tf.float32, name='b2' )\r\n\r\np_sub =  tf.placeholder(shape=(None, 18), dtype=tf.float32 , name=\"p_sub\")\r\np_t =  tf.placeholder(shape=(None, 60), dtype=tf.float32, name= 'p_t') #the other part except for the price\r\n\r\nD = tf.matmul(tf.nn.sigmoid(tf.matmul(p_f, W1_2_1)+ tf.matmul(p_t, W1_2_2) + tf.matmul(p_sub, W1_1)+b1), W2_2)+tf.matmul(p_f, W2_1_1)+ tf.matmul(p_t, W2_1_2)+b2\r\n    \r\np_loss = tf.reduce_mean(-p_f*D) #self defined loss\r\n\r\n###parameters\r\nlearning_rate = 0.5\r\noptimizer = tf.contrib.opt.ScipyOptimizerInterface(p_loss, method='L-BFGS-B', options={'maxiter': 1000})\r\n\r\nwith tf.Session() as sess:\r\n    init = tf.global_variables_initializer()\r\n    for step in range(419):\r\n        #parameters \r\n        x1_train = tv_train.iloc[step*batch_size:step*batch_size+batch_size, 66:84].values \r\n        x1_test = tv_test.iloc[:, 66:84].values\r\n        x2_train = np.concatenate((tv_train.iloc[step*batch_size:step*batch_size+batch_size, 4:11].values, tv_train.iloc[step*batch_size:step*batch_size+batch_size, 14:67].values), 1) \r\n        #x2_train = tf.concat(axis=1, values=[tv_train.iloc[step*batch_size:step*batch_size+batch_size, 4:11].values, tv_train.iloc[step*batch_size:step*batch_size+batch_size, 14:67].values])\r\n        x2_test = np.concatenate((tv_test.iloc[:, 4:11].values, tv_test.iloc[:, 14:67].values), 1) \r\n        \r\n        sess.run(init, feed_dict={p_sub: x1_train, \r\n                                  p_t: x2_train})\r\n        optimizer.minimize(sess) \r\n        ret=sess.run(p_f)\r\n        \r\n        if step % 200 == 0:\r\n            print()\r\n            print(ret)\r\n            print()\r\n```\r\n```\r\n----------------------------------------------------\r\nInvalidArgumentError                      Traceback (most recent call last)\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _do_call(self, fn, *args)\r\n   1349     try:\r\n-> 1350       return fn(*args)\r\n   1351     except errors.OpError as e:\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _run_fn(session, feed_dict, fetch_list, target_list, options, run_metadata)\r\n   1328                                    feed_dict, fetch_list, target_list,\r\n-> 1329                                    status, run_metadata)\r\n   1330 \r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\errors_impl.py in __exit__(self, type_arg, value_arg, traceback_arg)\r\n    472             compat.as_text(c_api.TF_Message(self.status.status)),\r\n--> 473             c_api.TF_GetCode(self.status.status))\r\n    474     # Delete the underlying status object from memory otherwise it stays alive\r\n\r\nInvalidArgumentError: You must feed a value for placeholder tensor 'p_sub' with dtype float and shape [?,18]\r\n\t [[Node: p_sub = Placeholder[dtype=DT_FLOAT, shape=[?,18], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n<ipython-input-67-986c52132edf> in <module>()\r\n     39         sess.run(init, feed_dict={p_sub: x1_train, \r\n     40                                   p_t: x2_train})\r\n---> 41         optimizer.minimize(sess)\r\n     42         ret=sess.run(p_f)\r\n     43 \r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\opt\\python\\training\\external_optimizer.py in minimize(self, session, feed_dict, fetches, step_callback, loss_callback, **run_kwargs)\r\n    205         packed_bounds=self._packed_bounds,\r\n    206         step_callback=step_callback,\r\n--> 207         optimizer_kwargs=self.optimizer_kwargs)\r\n    208     var_vals = [\r\n    209         packed_var_val[packing_slice] for packing_slice in self._packing_slices\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\opt\\python\\training\\external_optimizer.py in _minimize(self, initial_val, loss_grad_func, equality_funcs, equality_grad_funcs, inequality_funcs, inequality_grad_funcs, packed_bounds, step_callback, optimizer_kwargs)\r\n    404 \r\n    405     import scipy.optimize  # pylint: disable=g-import-not-at-top\r\n--> 406     result = scipy.optimize.minimize(*minimize_args, **minimize_kwargs)\r\n    407 \r\n    408     message_lines = [\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\_minimize.py in minimize(fun, x0, args, method, jac, hess, hessp, bounds, constraints, tol, callback, options)\r\n    448     elif meth == 'l-bfgs-b':\r\n    449         return _minimize_lbfgsb(fun, x0, args, jac, bounds,\r\n--> 450                                 callback=callback, **options)\r\n    451     elif meth == 'tnc':\r\n    452         return _minimize_tnc(fun, x0, args, jac, bounds, callback=callback,\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\lbfgsb.py in _minimize_lbfgsb(fun, x0, args, jac, bounds, disp, maxcor, ftol, gtol, eps, maxfun, maxiter, iprint, callback, maxls, **unknown_options)\r\n    326             # until the completion of the current minimization iteration.\r\n    327             # Overwrite f and g:\r\n--> 328             f, g = func_and_grad(x)\r\n    329         elif task_str.startswith(b'NEW_X'):\r\n    330             # new iteration\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\lbfgsb.py in func_and_grad(x)\r\n    276     else:\r\n    277         def func_and_grad(x):\r\n--> 278             f = fun(x, *args)\r\n    279             g = jac(x, *args)\r\n    280             return f, g\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\optimize.py in function_wrapper(*wrapper_args)\r\n    290     def function_wrapper(*wrapper_args):\r\n    291         ncalls[0] += 1\r\n--> 292         return function(*(wrapper_args + args))\r\n    293 \r\n    294     return ncalls, function_wrapper\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\scipy\\optimize\\optimize.py in __call__(self, x, *args)\r\n     61     def __call__(self, x, *args):\r\n     62         self.x = numpy.asarray(x).copy()\r\n---> 63         fg = self.fun(x, *args)\r\n     64         self.jac = fg[1]\r\n     65         return fg[0]\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\opt\\python\\training\\external_optimizer.py in loss_grad_func_wrapper(x)\r\n    365     def loss_grad_func_wrapper(x):\r\n    366       # SciPy's L-BFGS-B Fortran implementation requires gradients as doubles.\r\n--> 367       loss, gradient = loss_grad_func(x)\r\n    368       return loss, gradient.astype('float64')\r\n    369 \r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\opt\\python\\training\\external_optimizer.py in eval_func(x)\r\n    276 \r\n    277       augmented_fetch_vals = session.run(\r\n--> 278           augmented_fetches, feed_dict=augmented_feed_dict)\r\n    279 \r\n    280       if callable(callback):\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in run(self, fetches, feed_dict, options, run_metadata)\r\n    893     try:\r\n    894       result = self._run(None, fetches, feed_dict, options_ptr,\r\n--> 895                          run_metadata_ptr)\r\n    896       if run_metadata:\r\n    897         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)\r\n   1126     if final_fetches or final_targets or (handle and feed_dict_tensor):\r\n   1127       results = self._do_run(handle, final_targets, final_fetches,\r\n-> 1128                              feed_dict_tensor, options, run_metadata)\r\n   1129     else:\r\n   1130       results = []\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\r\n   1342     if handle is None:\r\n   1343       return self._do_call(_run_fn, self._session, feeds, fetches, targets,\r\n-> 1344                            options, run_metadata)\r\n   1345     else:\r\n   1346       return self._do_call(_prun_fn, self._session, handle, feeds, fetches)\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py in _do_call(self, fn, *args)\r\n   1361         except KeyError:\r\n   1362           pass\r\n-> 1363       raise type(e)(node_def, op, message)\r\n   1364 \r\n   1365   def _extend_graph(self):\r\n\r\nInvalidArgumentError: You must feed a value for placeholder tensor 'p_sub' with dtype float and shape [?,18]\r\n\t [[Node: p_sub = Placeholder[dtype=DT_FLOAT, shape=[?,18], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\r\n\r\nCaused by op 'p_sub', defined at:\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py\", line 16, in <module>\r\n    app.launch_new_instance()\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\traitlets\\config\\application.py\", line 658, in launch_instance\r\n    app.start()\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\kernelapp.py\", line 477, in start\r\n    ioloop.IOLoop.instance().start()\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zmq\\eventloop\\ioloop.py\", line 177, in start\r\n    super(ZMQIOLoop, self).start()\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tornado\\ioloop.py\", line 888, in start\r\n    handler_func(fd_obj, events)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tornado\\stack_context.py\", line 277, in null_wrapper\r\n    return fn(*args, **kwargs)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 440, in _handle_events\r\n    self._handle_recv()\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 472, in _handle_recv\r\n    self._run_callback(callback, msg)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 414, in _run_callback\r\n    callback(*args, **kwargs)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tornado\\stack_context.py\", line 277, in null_wrapper\r\n    return fn(*args, **kwargs)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 283, in dispatcher\r\n    return self.dispatch_shell(stream, msg)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 235, in dispatch_shell\r\n    handler(stream, idents, msg)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 399, in execute_request\r\n    user_expressions, allow_stdin)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\ipkernel.py\", line 196, in do_execute\r\n    res = shell.run_cell(code, store_history=store_history, silent=silent)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel\\zmqshell.py\", line 533, in run_cell\r\n    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2717, in run_cell\r\n    interactivity=interactivity, compiler=compiler, result=result)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2821, in run_ast_nodes\r\n    if self.run_code(code, result):\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2881, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-67-986c52132edf>\", line 18, in <module>\r\n    p_sub =  tf.placeholder(shape=(None, 18), dtype=tf.float32 , name=\"p_sub\")\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\array_ops.py\", line 1680, in placeholder\r\n    return gen_array_ops._placeholder(dtype=dtype, shape=shape, name=name)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\gen_array_ops.py\", line 4105, in _placeholder\r\n    \"Placeholder\", dtype=dtype, shape=shape, name=name)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py\", line 787, in _apply_op_helper\r\n    op_def=op_def)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 3160, in create_op\r\n    op_def=op_def)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 1625, in __init__\r\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\r\n\r\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'p_sub' with dtype float and shape [?,18]\r\n\t [[Node: p_sub = Placeholder[dtype=DT_FLOAT, shape=[?,18], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\r\n```"}