{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9646", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9646/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9646/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9646/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9646", "id": 226155720, "node_id": "MDU6SXNzdWUyMjYxNTU3MjA=", "number": 9646, "title": "Memory leaking when session.run in a certain situation", "user": {"login": "ZhenghaoFei", "id": 11188569, "node_id": "MDQ6VXNlcjExMTg4NTY5", "avatar_url": "https://avatars3.githubusercontent.com/u/11188569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZhenghaoFei", "html_url": "https://github.com/ZhenghaoFei", "followers_url": "https://api.github.com/users/ZhenghaoFei/followers", "following_url": "https://api.github.com/users/ZhenghaoFei/following{/other_user}", "gists_url": "https://api.github.com/users/ZhenghaoFei/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZhenghaoFei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZhenghaoFei/subscriptions", "organizations_url": "https://api.github.com/users/ZhenghaoFei/orgs", "repos_url": "https://api.github.com/users/ZhenghaoFei/repos", "events_url": "https://api.github.com/users/ZhenghaoFei/events{/privacy}", "received_events_url": "https://api.github.com/users/ZhenghaoFei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-05-04T01:13:56Z", "updated_at": "2017-09-07T03:33:33Z", "closed_at": "2017-05-04T16:19:11Z", "author_association": "NONE", "body_html": "<p>Hi,<br>\nHere I find a possible memory leaking bug.</p>\n<h3>Describe the problem</h3>\n<p>When we doing<br>\n<code>session.run( var )</code></p>\n<p>if we add operator before that variable, such as<br>\n<code>session.run(-var )</code></p>\n<p>Memory will keep growing by the iteration, when we call the train function with -var thousands of times it will use up all the memory and also let the running time become much slower.</p>\n<h3>Source code / logs</h3>\n<p>Here is a minimal example code:</p>\n<p><strong>Normal situation:</strong></p>\n<pre><code>import tensorflow as tf\n@profile\ndef run():\n    a = tf.constant(5.0)\n    b = tf.constant(6.0)\n    c = a * b\n    sess = tf.Session()\n    for i in range(1000):\n        b = sess.run(c) \nrun()\n\n\nLine     Mem usage    Increment   Line Contents\n================================================\n     4   80.816 MiB    0.000 MiB   @profile\n     5                             def run():\n     6   80.957 MiB    0.141 MiB       a = tf.constant(5.0)\n     7   80.980 MiB    0.023 MiB       b = tf.constant(6.0)\n     8   82.691 MiB    1.711 MiB       c = a * b\n     9   82.879 MiB    0.188 MiB       sess = tf.Session()\n    10                             \n    11   83.570 MiB    0.691 MiB       for i in range(1000):\n    12   83.570 MiB    0.000 MiB           b = sess.run(c)\n\n</code></pre>\n<p>**Memory leaking **</p>\n<pre><code>import tensorflow as tf\n\n@profile\ndef run():\n    a = tf.constant(5.0)\n    b = tf.constant(6.0)\n    c = a * b\n    sess = tf.Session()\n\n    for i in range(1000):\n        b = sess.run(-c)\n\nrun()\n\n \n\nLine     Mem usage    Increment   Line Contents\n================================================\n     4   80.805 MiB    0.000 MiB   @profile\n     5                             def run():\n     6   80.938 MiB    0.133 MiB       a = tf.constant(5.0)\n     7   80.949 MiB    0.012 MiB       b = tf.constant(6.0)\n     8   82.652 MiB    1.703 MiB       c = a * b\n     9   82.848 MiB    0.195 MiB       sess = tf.Session()\n    10                             \n    11  134.258 MiB   51.410 MiB       for i in range(1000):\n    12  134.258 MiB    0.000 MiB           b = sess.run(-c)\n\n</code></pre>\n<h3>System information</h3>\n<ul>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: mac os 10.12.4  and Linux Ubuntu 14.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip version</li>\n<li><strong>TensorFlow version (use command below)</strong>: ('v1.0.0-65-g4763edf-dirty', '1.0.1')</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: see above</li>\n</ul>", "body_text": "Hi,\nHere I find a possible memory leaking bug.\nDescribe the problem\nWhen we doing\nsession.run( var )\nif we add operator before that variable, such as\nsession.run(-var )\nMemory will keep growing by the iteration, when we call the train function with -var thousands of times it will use up all the memory and also let the running time become much slower.\nSource code / logs\nHere is a minimal example code:\nNormal situation:\nimport tensorflow as tf\n@profile\ndef run():\n    a = tf.constant(5.0)\n    b = tf.constant(6.0)\n    c = a * b\n    sess = tf.Session()\n    for i in range(1000):\n        b = sess.run(c) \nrun()\n\n\nLine     Mem usage    Increment   Line Contents\n================================================\n     4   80.816 MiB    0.000 MiB   @profile\n     5                             def run():\n     6   80.957 MiB    0.141 MiB       a = tf.constant(5.0)\n     7   80.980 MiB    0.023 MiB       b = tf.constant(6.0)\n     8   82.691 MiB    1.711 MiB       c = a * b\n     9   82.879 MiB    0.188 MiB       sess = tf.Session()\n    10                             \n    11   83.570 MiB    0.691 MiB       for i in range(1000):\n    12   83.570 MiB    0.000 MiB           b = sess.run(c)\n\n\n**Memory leaking **\nimport tensorflow as tf\n\n@profile\ndef run():\n    a = tf.constant(5.0)\n    b = tf.constant(6.0)\n    c = a * b\n    sess = tf.Session()\n\n    for i in range(1000):\n        b = sess.run(-c)\n\nrun()\n\n \n\nLine     Mem usage    Increment   Line Contents\n================================================\n     4   80.805 MiB    0.000 MiB   @profile\n     5                             def run():\n     6   80.938 MiB    0.133 MiB       a = tf.constant(5.0)\n     7   80.949 MiB    0.012 MiB       b = tf.constant(6.0)\n     8   82.652 MiB    1.703 MiB       c = a * b\n     9   82.848 MiB    0.195 MiB       sess = tf.Session()\n    10                             \n    11  134.258 MiB   51.410 MiB       for i in range(1000):\n    12  134.258 MiB    0.000 MiB           b = sess.run(-c)\n\n\nSystem information\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): mac os 10.12.4  and Linux Ubuntu 14.04\nTensorFlow installed from (source or binary): pip version\nTensorFlow version (use command below): ('v1.0.0-65-g4763edf-dirty', '1.0.1')\nBazel version (if compiling from source):\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: see above", "body": "Hi,\r\nHere I find a possible memory leaking bug.\r\n\r\n### Describe the problem\r\nWhen we doing \r\n`session.run( var )`\r\n\r\nif we add operator before that variable, such as \r\n`session.run(-var )`\r\n\r\nMemory will keep growing by the iteration, when we call the train function with -var thousands of times it will use up all the memory and also let the running time become much slower.\r\n\r\n### Source code / logs\r\nHere is a minimal example code:\r\n\r\n\r\n**Normal situation:**\r\n\r\n```\r\nimport tensorflow as tf\r\n@profile\r\ndef run():\r\n    a = tf.constant(5.0)\r\n    b = tf.constant(6.0)\r\n    c = a * b\r\n    sess = tf.Session()\r\n    for i in range(1000):\r\n        b = sess.run(c) \r\nrun()\r\n\r\n\r\nLine     Mem usage    Increment   Line Contents\r\n================================================\r\n     4   80.816 MiB    0.000 MiB   @profile\r\n     5                             def run():\r\n     6   80.957 MiB    0.141 MiB       a = tf.constant(5.0)\r\n     7   80.980 MiB    0.023 MiB       b = tf.constant(6.0)\r\n     8   82.691 MiB    1.711 MiB       c = a * b\r\n     9   82.879 MiB    0.188 MiB       sess = tf.Session()\r\n    10                             \r\n    11   83.570 MiB    0.691 MiB       for i in range(1000):\r\n    12   83.570 MiB    0.000 MiB           b = sess.run(c)\r\n\r\n```\r\n\r\n**Memory leaking **\r\n\r\n\r\n```\r\nimport tensorflow as tf\r\n\r\n@profile\r\ndef run():\r\n    a = tf.constant(5.0)\r\n    b = tf.constant(6.0)\r\n    c = a * b\r\n    sess = tf.Session()\r\n\r\n    for i in range(1000):\r\n        b = sess.run(-c)\r\n\r\nrun()\r\n\r\n \r\n\r\nLine     Mem usage    Increment   Line Contents\r\n================================================\r\n     4   80.805 MiB    0.000 MiB   @profile\r\n     5                             def run():\r\n     6   80.938 MiB    0.133 MiB       a = tf.constant(5.0)\r\n     7   80.949 MiB    0.012 MiB       b = tf.constant(6.0)\r\n     8   82.652 MiB    1.703 MiB       c = a * b\r\n     9   82.848 MiB    0.195 MiB       sess = tf.Session()\r\n    10                             \r\n    11  134.258 MiB   51.410 MiB       for i in range(1000):\r\n    12  134.258 MiB    0.000 MiB           b = sess.run(-c)\r\n\r\n```\r\n\r\n\r\n\r\n### System information\r\n\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: mac os 10.12.4  and Linux Ubuntu 14.04\r\n- **TensorFlow installed from (source or binary)**: pip version  \r\n- **TensorFlow version (use command below)**: ('v1.0.0-65-g4763edf-dirty', '1.0.1')\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: N/A \r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: see above\r\n"}