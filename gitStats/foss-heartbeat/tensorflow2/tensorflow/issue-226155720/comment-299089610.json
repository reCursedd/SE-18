{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/299089610", "html_url": "https://github.com/tensorflow/tensorflow/issues/9646#issuecomment-299089610", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9646", "id": 299089610, "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTA4OTYxMA==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-04T03:29:41Z", "updated_at": "2017-05-04T03:29:41Z", "author_association": "CONTRIBUTOR", "body_html": "<p>That happens because every time you call <code>-c</code> in the loop, a new op is created in the graph. If you set <code>d = -c</code> before entering the loop and then you fetch <code>d</code> in the loop your memory consumption should not increase. To me that looks like expected behavior. Note that most Python operators (such as the negation operator you are using) are overloaded and construct new ops in the graph behind the scenes.</p>", "body_text": "That happens because every time you call -c in the loop, a new op is created in the graph. If you set d = -c before entering the loop and then you fetch d in the loop your memory consumption should not increase. To me that looks like expected behavior. Note that most Python operators (such as the negation operator you are using) are overloaded and construct new ops in the graph behind the scenes.", "body": "That happens because every time you call `-c` in the loop, a new op is created in the graph. If you set `d = -c` before entering the loop and then you fetch `d` in the loop your memory consumption should not increase. To me that looks like expected behavior. Note that most Python operators (such as the negation operator you are using) are overloaded and construct new ops in the graph behind the scenes."}