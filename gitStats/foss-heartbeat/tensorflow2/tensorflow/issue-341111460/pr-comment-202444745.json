{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/202444745", "pull_request_review_id": 137147239, "id": 202444745, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQ0NDc0NQ==", "diff_hunk": "@@ -156,8 +200,15 @@ class DeviceDescription {\n \n   // Returns the CUDA compute capability if we're running on the CUDA platform.\n   // If a CUDA compute capability is not available, the major version will be\n-  // zero, and the return value will be false.\n-  bool cuda_compute_capability(int *major, int *minor) const;\n+  // zero, and the return value of DeviceVersion::is_valid() will be false.\n+  //\n+  // Returns the AMDGCN ISA version if we're running on the ROCm platform.\n+  // Minor version would always be zero.\n+  // If an AMDGCN ISA version is not available, the major version will be\n+  // zero, and the return value of DeviceVersion::is_valid() will be false.", "path": "tensorflow/stream_executor/device_description.h", "position": null, "original_position": 74, "commit_id": "b83018dc4ea2db666e510ce112c003de2e3715a7", "original_commit_id": "b709e39bd6df69840c8a595a2b7c41756e47bb39", "user": {"login": "jlebar", "id": 150663, "node_id": "MDQ6VXNlcjE1MDY2Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/150663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlebar", "html_url": "https://github.com/jlebar", "followers_url": "https://api.github.com/users/jlebar/followers", "following_url": "https://api.github.com/users/jlebar/following{/other_user}", "gists_url": "https://api.github.com/users/jlebar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlebar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlebar/subscriptions", "organizations_url": "https://api.github.com/users/jlebar/orgs", "repos_url": "https://api.github.com/users/jlebar/repos", "events_url": "https://api.github.com/users/jlebar/events{/privacy}", "received_events_url": "https://api.github.com/users/jlebar/received_events", "type": "User", "site_admin": false}, "body": "* s/would always be/is always/\r\n\r\n* s/the return value of DeviceDescription::is_valid() will be false/DeviceDescription::is_valid() will return false/\r\n\r\nBut even better, perhaps rewrite this comment so that it's not redundant with the comment on `DeviceVersion`?\r\n\r\n> Gets the \"hardware version\" of this device, where we know how.  If we don't know how, the returned DeviceVersion's is_valid() returns false.", "created_at": "2018-07-13T19:01:18Z", "updated_at": "2018-09-01T02:18:59Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20786#discussion_r202444745", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20786", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/202444745"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20786#discussion_r202444745"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20786"}}, "body_html": "<ul>\n<li>\n<p>s/would always be/is always/</p>\n</li>\n<li>\n<p>s/the return value of DeviceDescription::is_valid() will be false/DeviceDescription::is_valid() will return false/</p>\n</li>\n</ul>\n<p>But even better, perhaps rewrite this comment so that it's not redundant with the comment on <code>DeviceVersion</code>?</p>\n<blockquote>\n<p>Gets the \"hardware version\" of this device, where we know how.  If we don't know how, the returned DeviceVersion's is_valid() returns false.</p>\n</blockquote>", "body_text": "s/would always be/is always/\n\n\ns/the return value of DeviceDescription::is_valid() will be false/DeviceDescription::is_valid() will return false/\n\n\nBut even better, perhaps rewrite this comment so that it's not redundant with the comment on DeviceVersion?\n\nGets the \"hardware version\" of this device, where we know how.  If we don't know how, the returned DeviceVersion's is_valid() returns false."}