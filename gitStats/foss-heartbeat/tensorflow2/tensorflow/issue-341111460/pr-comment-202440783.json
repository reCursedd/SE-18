{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/202440783", "pull_request_review_id": 137147239, "id": 202440783, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQ0MDc4Mw==", "diff_hunk": "@@ -32,6 +35,47 @@ namespace internal {\n class DeviceDescriptionBuilder;\n }  // namespace internal\n \n+// Device hardware version\n+// On CUDA platform it holds major and minor compute capability.\n+// On ROCm platform the major version is the AMDGCN ISA version, minor version\n+// would always be zero.\n+struct DeviceVersion {\n+  // Initialize from version_name in the form of \"3.5\"\n+  explicit DeviceVersion(const std::string &version_name) {\n+    size_t dot_pos = version_name.find('.');\n+    CHECK(dot_pos != string::npos)\n+        << \"Illegal version name: [\" << version_name << \"]\";\n+    string major_str = version_name.substr(0, dot_pos);\n+    CHECK(tensorflow::strings::safe_strto32(major_str, &major_part))\n+        << \"Illegal version name: [\" << version_name << \"]\";\n+    string minor_str = version_name.substr(dot_pos + 1);\n+    CHECK(tensorflow::strings::safe_strto32(minor_str, &minor_part))\n+        << \"Illegal version name: [\" << version_name << \"]\";", "path": "tensorflow/stream_executor/device_description.h", "position": null, "original_position": 34, "commit_id": "b83018dc4ea2db666e510ce112c003de2e3715a7", "original_commit_id": "b709e39bd6df69840c8a595a2b7c41756e47bb39", "user": {"login": "jlebar", "id": 150663, "node_id": "MDQ6VXNlcjE1MDY2Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/150663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlebar", "html_url": "https://github.com/jlebar", "followers_url": "https://api.github.com/users/jlebar/followers", "following_url": "https://api.github.com/users/jlebar/following{/other_user}", "gists_url": "https://api.github.com/users/jlebar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlebar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlebar/subscriptions", "organizations_url": "https://api.github.com/users/jlebar/orgs", "repos_url": "https://api.github.com/users/jlebar/repos", "events_url": "https://api.github.com/users/jlebar/events{/privacy}", "received_events_url": "https://api.github.com/users/jlebar/received_events", "type": "User", "site_admin": false}, "body": "* StreamExecutor is a lower-level library than TensorFlow.  It can't depend on TensorFlow.\r\n* Instead of writing a constructor which CHECK-fails on a bad version, we should have a factory function that returns a StatusOr.  `static StatusOr<DeviceVersion> Parse(StringPiece version_str)`.\r\n* Instead of `const string&`, we should use `StringPiece`.  (Also, we never use `std::string` inside of Google code (except when interfacing with external libraries like llvm); it's always plain `string`.)\r\n* The one-arg constructor should be explicit (otherwise you could pass e.g. `5` to a function which accepts a `DeviceVersion` as an argument).\r\n* We should use `operator<` instead of comparing elementwise elsewhere in this patch?", "created_at": "2018-07-13T18:45:15Z", "updated_at": "2018-09-01T02:18:59Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20786#discussion_r202440783", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20786", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/202440783"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20786#discussion_r202440783"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20786"}}, "body_html": "<ul>\n<li>StreamExecutor is a lower-level library than TensorFlow.  It can't depend on TensorFlow.</li>\n<li>Instead of writing a constructor which CHECK-fails on a bad version, we should have a factory function that returns a StatusOr.  <code>static StatusOr&lt;DeviceVersion&gt; Parse(StringPiece version_str)</code>.</li>\n<li>Instead of <code>const string&amp;</code>, we should use <code>StringPiece</code>.  (Also, we never use <code>std::string</code> inside of Google code (except when interfacing with external libraries like llvm); it's always plain <code>string</code>.)</li>\n<li>The one-arg constructor should be explicit (otherwise you could pass e.g. <code>5</code> to a function which accepts a <code>DeviceVersion</code> as an argument).</li>\n<li>We should use <code>operator&lt;</code> instead of comparing elementwise elsewhere in this patch?</li>\n</ul>", "body_text": "StreamExecutor is a lower-level library than TensorFlow.  It can't depend on TensorFlow.\nInstead of writing a constructor which CHECK-fails on a bad version, we should have a factory function that returns a StatusOr.  static StatusOr<DeviceVersion> Parse(StringPiece version_str).\nInstead of const string&, we should use StringPiece.  (Also, we never use std::string inside of Google code (except when interfacing with external libraries like llvm); it's always plain string.)\nThe one-arg constructor should be explicit (otherwise you could pass e.g. 5 to a function which accepts a DeviceVersion as an argument).\nWe should use operator< instead of comparing elementwise elsewhere in this patch?"}