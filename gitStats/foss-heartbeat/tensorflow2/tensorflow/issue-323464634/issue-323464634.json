{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19309", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19309/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19309/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19309/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/19309", "id": 323464634, "node_id": "MDExOlB1bGxSZXF1ZXN0MTg4MzE1ODU1", "number": 19309, "title": "Generate Java graph building API from @Operator annotated classes", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 419840263, "node_id": "MDU6TGFiZWw0MTk4NDAyNjM=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20testing%20(then%20merge)", "name": "awaiting testing (then merge)", "color": "c2e0c6", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-05-16T04:26:05Z", "updated_at": "2018-06-15T18:54:49Z", "closed_at": "2018-06-15T18:54:49Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19309", "html_url": "https://github.com/tensorflow/tensorflow/pull/19309", "diff_url": "https://github.com/tensorflow/tensorflow/pull/19309.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/19309.patch"}, "body_html": "<p>That completes the work started by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1495065\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kbsriram\">@kbsriram</a> to generate the <code>*Ops</code> API classes out of the operation wrappers annotated with <code>@Operator</code>. That includes core operations wrappers that are automatically generated at compile time or any user (or custom) operation that might be added to the source path.</p>\n<p>Here's an example of usage of the generated classes:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">try</span> (<span class=\"pl-smi\">Graph</span> g <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Graph</span>()) {\n  <span class=\"pl-smi\">Ops</span> ops <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Ops</span>(g);\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Operations are typed classes with convenience builders in Ops.</span>\n  <span class=\"pl-smi\">Constant</span> three <span class=\"pl-k\">=</span> ops<span class=\"pl-k\">.</span>constant(<span class=\"pl-c1\">3</span>);\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Single-result operations implement the Operand interface, so this works too.</span>\n  <span class=\"pl-smi\">Operand</span> four <span class=\"pl-k\">=</span> ops<span class=\"pl-k\">.</span>constant(<span class=\"pl-c1\">4</span>);\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Most builders are found within a group, and accept Operand types as operands</span>\n  <span class=\"pl-smi\">Operand</span> nine <span class=\"pl-k\">=</span> ops<span class=\"pl-k\">.</span>math()<span class=\"pl-k\">.</span>add(four, ops<span class=\"pl-k\">.</span>constant(<span class=\"pl-c1\">5</span>));\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Multi-result operations however offer methods to select a particular result for use.</span>\n  <span class=\"pl-smi\">Operand</span> result <span class=\"pl-k\">=</span> ops<span class=\"pl-k\">.</span>math()<span class=\"pl-k\">.</span>add(ops<span class=\"pl-k\">.</span>array()<span class=\"pl-k\">.</span>unique(s, a)<span class=\"pl-k\">.</span>y(), b);\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Optional attributes</span>\n  ops<span class=\"pl-k\">.</span>math()<span class=\"pl-k\">.</span>matMul(a, b, <span class=\"pl-smi\">MatMul</span><span class=\"pl-k\">.</span>transposeA(<span class=\"pl-c1\">true</span>));\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Naming operators</span>\n  ops<span class=\"pl-k\">.</span>withName(\u201cfoo\u201d)<span class=\"pl-k\">.</span>constant(<span class=\"pl-c1\">5</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> name \u201cfoo\u201d</span>\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Names can exist in a hierarchy</span>\n  <span class=\"pl-smi\">Ops</span> subOps <span class=\"pl-k\">=</span> ops<span class=\"pl-k\">.</span>withSubScope(\u201csub\u201d);\n  subOps<span class=\"pl-k\">.</span>withName(\u201cbar\u201d)<span class=\"pl-k\">.</span>constant(<span class=\"pl-c1\">4</span>); <span class=\"pl-c\"><span class=\"pl-c\">//</span> \u201csub/bar\u201d</span>\n}</pre></div>\n<p>Note that the grouping of the operation wrappers in the <code>java_api</code> still need to be completed after this before releasing a first version of this API.</p>\n<p>CC: <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a></p>", "body_text": "That completes the work started by @kbsriram to generate the *Ops API classes out of the operation wrappers annotated with @Operator. That includes core operations wrappers that are automatically generated at compile time or any user (or custom) operation that might be added to the source path.\nHere's an example of usage of the generated classes:\ntry (Graph g = new Graph()) {\n  Ops ops = new Ops(g);\n  // Operations are typed classes with convenience builders in Ops.\n  Constant three = ops.constant(3);\n  // Single-result operations implement the Operand interface, so this works too.\n  Operand four = ops.constant(4);\n  // Most builders are found within a group, and accept Operand types as operands\n  Operand nine = ops.math().add(four, ops.constant(5));\n  // Multi-result operations however offer methods to select a particular result for use.\n  Operand result = ops.math().add(ops.array().unique(s, a).y(), b);\n  // Optional attributes\n  ops.math().matMul(a, b, MatMul.transposeA(true));\n  // Naming operators\n  ops.withName(\u201cfoo\u201d).constant(5); // name \u201cfoo\u201d\n  // Names can exist in a hierarchy\n  Ops subOps = ops.withSubScope(\u201csub\u201d);\n  subOps.withName(\u201cbar\u201d).constant(4); // \u201csub/bar\u201d\n}\nNote that the grouping of the operation wrappers in the java_api still need to be completed after this before releasing a first version of this API.\nCC: @asimshankar", "body": "That completes the work started by @kbsriram to generate the `*Ops` API classes out of the operation wrappers annotated with `@Operator`. That includes core operations wrappers that are automatically generated at compile time or any user (or custom) operation that might be added to the source path.\r\n\r\nHere's an example of usage of the generated classes:\r\n```java\r\ntry (Graph g = new Graph()) {\r\n  Ops ops = new Ops(g);\r\n  // Operations are typed classes with convenience builders in Ops.\r\n  Constant three = ops.constant(3);\r\n  // Single-result operations implement the Operand interface, so this works too.\r\n  Operand four = ops.constant(4);\r\n  // Most builders are found within a group, and accept Operand types as operands\r\n  Operand nine = ops.math().add(four, ops.constant(5));\r\n  // Multi-result operations however offer methods to select a particular result for use.\r\n  Operand result = ops.math().add(ops.array().unique(s, a).y(), b);\r\n  // Optional attributes\r\n  ops.math().matMul(a, b, MatMul.transposeA(true));\r\n  // Naming operators\r\n  ops.withName(\u201cfoo\u201d).constant(5); // name \u201cfoo\u201d\r\n  // Names can exist in a hierarchy\r\n  Ops subOps = ops.withSubScope(\u201csub\u201d);\r\n  subOps.withName(\u201cbar\u201d).constant(4); // \u201csub/bar\u201d\r\n}\r\n```\r\nNote that the grouping of the operation wrappers in the `java_api` still need to be completed after this before releasing a first version of this API.\r\n\r\nCC: @asimshankar "}