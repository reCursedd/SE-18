{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4130", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4130/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4130/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4130/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4130", "id": 174330266, "node_id": "MDU6SXNzdWUxNzQzMzAyNjY=", "number": 4130, "title": "Training a neural net in C++", "user": {"login": "sonalgupta", "id": 4138767, "node_id": "MDQ6VXNlcjQxMzg3Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4138767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sonalgupta", "html_url": "https://github.com/sonalgupta", "followers_url": "https://api.github.com/users/sonalgupta/followers", "following_url": "https://api.github.com/users/sonalgupta/following{/other_user}", "gists_url": "https://api.github.com/users/sonalgupta/gists{/gist_id}", "starred_url": "https://api.github.com/users/sonalgupta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sonalgupta/subscriptions", "organizations_url": "https://api.github.com/users/sonalgupta/orgs", "repos_url": "https://api.github.com/users/sonalgupta/repos", "events_url": "https://api.github.com/users/sonalgupta/events{/privacy}", "received_events_url": "https://api.github.com/users/sonalgupta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "jhseu", "id": 170179, "node_id": "MDQ6VXNlcjE3MDE3OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/170179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhseu", "html_url": "https://github.com/jhseu", "followers_url": "https://api.github.com/users/jhseu/followers", "following_url": "https://api.github.com/users/jhseu/following{/other_user}", "gists_url": "https://api.github.com/users/jhseu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhseu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhseu/subscriptions", "organizations_url": "https://api.github.com/users/jhseu/orgs", "repos_url": "https://api.github.com/users/jhseu/repos", "events_url": "https://api.github.com/users/jhseu/events{/privacy}", "received_events_url": "https://api.github.com/users/jhseu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jhseu", "id": 170179, "node_id": "MDQ6VXNlcjE3MDE3OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/170179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhseu", "html_url": "https://github.com/jhseu", "followers_url": "https://api.github.com/users/jhseu/followers", "following_url": "https://api.github.com/users/jhseu/following{/other_user}", "gists_url": "https://api.github.com/users/jhseu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhseu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhseu/subscriptions", "organizations_url": "https://api.github.com/users/jhseu/orgs", "repos_url": "https://api.github.com/users/jhseu/repos", "events_url": "https://api.github.com/users/jhseu/events{/privacy}", "received_events_url": "https://api.github.com/users/jhseu/received_events", "type": "User", "site_admin": false}, {"login": "keveman", "id": 229914, "node_id": "MDQ6VXNlcjIyOTkxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/229914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keveman", "html_url": "https://github.com/keveman", "followers_url": "https://api.github.com/users/keveman/followers", "following_url": "https://api.github.com/users/keveman/following{/other_user}", "gists_url": "https://api.github.com/users/keveman/gists{/gist_id}", "starred_url": "https://api.github.com/users/keveman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keveman/subscriptions", "organizations_url": "https://api.github.com/users/keveman/orgs", "repos_url": "https://api.github.com/users/keveman/repos", "events_url": "https://api.github.com/users/keveman/events{/privacy}", "received_events_url": "https://api.github.com/users/keveman/received_events", "type": "User", "site_admin": false}, {"login": "andydavis1", "id": 15696327, "node_id": "MDQ6VXNlcjE1Njk2MzI3", "avatar_url": "https://avatars0.githubusercontent.com/u/15696327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andydavis1", "html_url": "https://github.com/andydavis1", "followers_url": "https://api.github.com/users/andydavis1/followers", "following_url": "https://api.github.com/users/andydavis1/following{/other_user}", "gists_url": "https://api.github.com/users/andydavis1/gists{/gist_id}", "starred_url": "https://api.github.com/users/andydavis1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andydavis1/subscriptions", "organizations_url": "https://api.github.com/users/andydavis1/orgs", "repos_url": "https://api.github.com/users/andydavis1/repos", "events_url": "https://api.github.com/users/andydavis1/events{/privacy}", "received_events_url": "https://api.github.com/users/andydavis1/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2016-08-31T17:20:53Z", "updated_at": "2017-01-24T22:54:29Z", "closed_at": "2017-01-24T22:54:29Z", "author_association": "NONE", "body_html": "<ol>\n<li>There are examples in the repo for loading a pre-trained model in C++. Can someone add an example to train a simple 1 hidden layer fully connected neural net (or even logistic regression using SGD) in C++?</li>\n<li>I realize there is no publicly available support for auto differentiation in C++. Are there any plans to do so?</li>\n</ol>", "body_text": "There are examples in the repo for loading a pre-trained model in C++. Can someone add an example to train a simple 1 hidden layer fully connected neural net (or even logistic regression using SGD) in C++?\nI realize there is no publicly available support for auto differentiation in C++. Are there any plans to do so?", "body": "1. There are examples in the repo for loading a pre-trained model in C++. Can someone add an example to train a simple 1 hidden layer fully connected neural net (or even logistic regression using SGD) in C++? \n2. I realize there is no publicly available support for auto differentiation in C++. Are there any plans to do so?\n"}