{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14819", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14819/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14819/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14819/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14819", "id": 276263460, "node_id": "MDU6SXNzdWUyNzYyNjM0NjA=", "number": 14819, "title": "Keras Dropout support_masking gets reset to False", "user": {"login": "bri-jones", "id": 17557687, "node_id": "MDQ6VXNlcjE3NTU3Njg3", "avatar_url": "https://avatars1.githubusercontent.com/u/17557687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bri-jones", "html_url": "https://github.com/bri-jones", "followers_url": "https://api.github.com/users/bri-jones/followers", "following_url": "https://api.github.com/users/bri-jones/following{/other_user}", "gists_url": "https://api.github.com/users/bri-jones/gists{/gist_id}", "starred_url": "https://api.github.com/users/bri-jones/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bri-jones/subscriptions", "organizations_url": "https://api.github.com/users/bri-jones/orgs", "repos_url": "https://api.github.com/users/bri-jones/repos", "events_url": "https://api.github.com/users/bri-jones/events{/privacy}", "received_events_url": "https://api.github.com/users/bri-jones/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586558, "node_id": "MDU6TGFiZWw0MDQ1ODY1NTg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:community%20support", "name": "stat:community support", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-23T04:24:01Z", "updated_at": "2017-12-11T02:44:45Z", "closed_at": "2017-12-11T02:44:45Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Mac OS X 10.12.6</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.4.0-rc1-11-g130a514 1.4.0</li>\n<li><strong>Python version</strong>: 3.6.1</li>\n<li><strong>Bazel version (if compiling from source)</strong>: n/a</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: n/a</li>\n<li><strong>CUDA/cuDNN version</strong>: n/a</li>\n<li><strong>GPU model and memory</strong>: n/a</li>\n<li><strong>Exact command to reproduce</strong>: see below</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<p>The Keras Dropout layer constructor (tensorflow/python/keras/_impl/keras/layers/core.py) sets support_masking=True and then calls its super constructor, which sets it back to False. Other layers defined in that module appear to set support_masking=True after the super constructor call.</p>\n<h3>Source code / logs</h3>\n<p>Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.</p>\n<pre><code>from tensorflow.contrib.keras.api.keras.models import Sequential\nfrom tensorflow.contrib.keras.api.keras.layers import Dropout, InputLayer, LSTM, Masking \n\nif __name__ == '__main__':\n\n    test1 = True\n\n    def model1():\n        model = Sequential()\n        model.add(InputLayer([8, 64]))\n        model.add(Masking())\n        model.add(Dropout(0.5))\n\n    def model2():\n        model = Sequential()\n        model.add(InputLayer([8, 64]))\n        model.add(Masking())\n        model.add(LSTM(128, return_sequences=True))\n        model.add(Dropout(0.5))\n\n    if test1:\n        model1()\n    else:\n        model2()\n</code></pre>\n<pre><code>Traceback (most recent call last):\n  File \"expose_dropout_bug.py\", line 16, in &lt;module&gt;\n    model.add(Dropout(0.5))\n  File \"/.venv/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/models.py\", line 501, in add\n    output_tensor = layer(self.outputs[0])\n  File \"/.venv/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line 252, in __call__\n    output = super(Layer, self).__call__(inputs, **kwargs)\n  File \"/.venv/lib/python3.6/site-packages/tensorflow/python/layers/base.py\", line 594, in __call__\n    output_mask = self.compute_mask(inputs, previous_mask)\n  File \"/.venv/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line 308, in compute_mask\n    'but was passed an input_mask: ' + str(mask))\nTypeError: Layer dropout_1 does not support masking, but was passed an input_mask: Tensor(\"masking/Any_1:0\", shape=(?, 8), dtype=bool)\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS X 10.12.6\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.4.0-rc1-11-g130a514 1.4.0\nPython version: 3.6.1\nBazel version (if compiling from source): n/a\nGCC/Compiler version (if compiling from source): n/a\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\nExact command to reproduce: see below\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\nThe Keras Dropout layer constructor (tensorflow/python/keras/_impl/keras/layers/core.py) sets support_masking=True and then calls its super constructor, which sets it back to False. Other layers defined in that module appear to set support_masking=True after the super constructor call.\nSource code / logs\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\nfrom tensorflow.contrib.keras.api.keras.models import Sequential\nfrom tensorflow.contrib.keras.api.keras.layers import Dropout, InputLayer, LSTM, Masking \n\nif __name__ == '__main__':\n\n    test1 = True\n\n    def model1():\n        model = Sequential()\n        model.add(InputLayer([8, 64]))\n        model.add(Masking())\n        model.add(Dropout(0.5))\n\n    def model2():\n        model = Sequential()\n        model.add(InputLayer([8, 64]))\n        model.add(Masking())\n        model.add(LSTM(128, return_sequences=True))\n        model.add(Dropout(0.5))\n\n    if test1:\n        model1()\n    else:\n        model2()\n\nTraceback (most recent call last):\n  File \"expose_dropout_bug.py\", line 16, in <module>\n    model.add(Dropout(0.5))\n  File \"/.venv/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/models.py\", line 501, in add\n    output_tensor = layer(self.outputs[0])\n  File \"/.venv/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line 252, in __call__\n    output = super(Layer, self).__call__(inputs, **kwargs)\n  File \"/.venv/lib/python3.6/site-packages/tensorflow/python/layers/base.py\", line 594, in __call__\n    output_mask = self.compute_mask(inputs, previous_mask)\n  File \"/.venv/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line 308, in compute_mask\n    'but was passed an input_mask: ' + str(mask))\nTypeError: Layer dropout_1 does not support masking, but was passed an input_mask: Tensor(\"masking/Any_1:0\", shape=(?, 8), dtype=bool)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Mac OS X 10.12.6\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.4.0-rc1-11-g130a514 1.4.0\r\n- **Python version**: 3.6.1\r\n- **Bazel version (if compiling from source)**: n/a\r\n- **GCC/Compiler version (if compiling from source)**: n/a\r\n- **CUDA/cuDNN version**: n/a\r\n- **GPU model and memory**: n/a\r\n- **Exact command to reproduce**: see below\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n\r\nThe Keras Dropout layer constructor (tensorflow/python/keras/_impl/keras/layers/core.py) sets support_masking=True and then calls its super constructor, which sets it back to False. Other layers defined in that module appear to set support_masking=True after the super constructor call.\r\n\r\n### Source code / logs\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\r\n\r\n```\r\nfrom tensorflow.contrib.keras.api.keras.models import Sequential\r\nfrom tensorflow.contrib.keras.api.keras.layers import Dropout, InputLayer, LSTM, Masking \r\n\r\nif __name__ == '__main__':\r\n\r\n    test1 = True\r\n\r\n    def model1():\r\n        model = Sequential()\r\n        model.add(InputLayer([8, 64]))\r\n        model.add(Masking())\r\n        model.add(Dropout(0.5))\r\n\r\n    def model2():\r\n        model = Sequential()\r\n        model.add(InputLayer([8, 64]))\r\n        model.add(Masking())\r\n        model.add(LSTM(128, return_sequences=True))\r\n        model.add(Dropout(0.5))\r\n\r\n    if test1:\r\n        model1()\r\n    else:\r\n        model2()\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"expose_dropout_bug.py\", line 16, in <module>\r\n    model.add(Dropout(0.5))\r\n  File \"/.venv/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/models.py\", line 501, in add\r\n    output_tensor = layer(self.outputs[0])\r\n  File \"/.venv/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line 252, in __call__\r\n    output = super(Layer, self).__call__(inputs, **kwargs)\r\n  File \"/.venv/lib/python3.6/site-packages/tensorflow/python/layers/base.py\", line 594, in __call__\r\n    output_mask = self.compute_mask(inputs, previous_mask)\r\n  File \"/.venv/lib/python3.6/site-packages/tensorflow/python/keras/_impl/keras/engine/topology.py\", line 308, in compute_mask\r\n    'but was passed an input_mask: ' + str(mask))\r\nTypeError: Layer dropout_1 does not support masking, but was passed an input_mask: Tensor(\"masking/Any_1:0\", shape=(?, 8), dtype=bool)\r\n```"}