{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16314", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16314/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16314/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16314/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16314", "id": 290727925, "node_id": "MDU6SXNzdWUyOTA3Mjc5MjU=", "number": 16314, "title": "Published libtensorflow_framework.so binaries ABI Problem", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-23T06:57:28Z", "updated_at": "2018-01-23T19:50:27Z", "closed_at": "2018-01-23T19:50:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The distributed <code>libtensorflow_framework.so</code> included in the JAR files published to Maven are built using the C++ 11 ABI, in contrast to the main TF build. I think that affects all continuous integration builds of the shared objects. I believe the <code>-D_GLIBCXX_USE_CXX11_ABI=0</code> compiler flag should be used for the CI builds as is done for the main build. An example of its use is shown in commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/550df413158b32645ca5df4dcaabc67f1a48964d/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/550df413158b32645ca5df4dcaabc67f1a48964d\"><tt>550df41</tt></a>. This causes some trouble when using these shared objects and developing custom ops, as those are required to be built using that compiler flag. It would be great if the use of the flag was consistent and all binaries were built using the same ABI.</p>\n<p>Thanks!</p>", "body_text": "The distributed libtensorflow_framework.so included in the JAR files published to Maven are built using the C++ 11 ABI, in contrast to the main TF build. I think that affects all continuous integration builds of the shared objects. I believe the -D_GLIBCXX_USE_CXX11_ABI=0 compiler flag should be used for the CI builds as is done for the main build. An example of its use is shown in commit 550df41. This causes some trouble when using these shared objects and developing custom ops, as those are required to be built using that compiler flag. It would be great if the use of the flag was consistent and all binaries were built using the same ABI.\nThanks!", "body": "The distributed `libtensorflow_framework.so` included in the JAR files published to Maven are built using the C++ 11 ABI, in contrast to the main TF build. I think that affects all continuous integration builds of the shared objects. I believe the `-D_GLIBCXX_USE_CXX11_ABI=0` compiler flag should be used for the CI builds as is done for the main build. An example of its use is shown in commit 550df413158b32645ca5df4dcaabc67f1a48964d. This causes some trouble when using these shared objects and developing custom ops, as those are required to be built using that compiler flag. It would be great if the use of the flag was consistent and all binaries were built using the same ABI.\r\n\r\nThanks! "}