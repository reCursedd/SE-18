{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/284164539", "html_url": "https://github.com/tensorflow/tensorflow/issues/7956#issuecomment-284164539", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7956", "id": 284164539, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDE2NDUzOQ==", "user": {"login": "langmore", "id": 178152, "node_id": "MDQ6VXNlcjE3ODE1Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/178152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/langmore", "html_url": "https://github.com/langmore", "followers_url": "https://api.github.com/users/langmore/followers", "following_url": "https://api.github.com/users/langmore/following{/other_user}", "gists_url": "https://api.github.com/users/langmore/gists{/gist_id}", "starred_url": "https://api.github.com/users/langmore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/langmore/subscriptions", "organizations_url": "https://api.github.com/users/langmore/orgs", "repos_url": "https://api.github.com/users/langmore/repos", "events_url": "https://api.github.com/users/langmore/events{/privacy}", "received_events_url": "https://api.github.com/users/langmore/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-04T16:57:13Z", "updated_at": "2017-03-04T16:57:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>You're right, I was mistaken.  The problem with zeros or ones in <code>x</code> needs some sort of <code>log_prob_with_logits</code> function.  I suppose there is another problem if <code>concentration</code> has any zeros in it, but that would require a new version of the Gamma function.</p>\n<p>So the solution suggested by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5453737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tatatodd\">@tatatodd</a> is to add a <code>log_prob_with_logits</code> function for distributions defined on the interior of the simplex, <code>{(x_1,...,x_K) :  x_i \\in (0, 1), \\sum_i x_i = 1}</code>.  This would be <code>Dirichlet</code>, and <code>Beta</code>.</p>\n<p>Note however that <code>Gamma.log_prob(x)</code> will fail for the exact same reason if <code>x = 0</code> (both compute <code>log(x)</code>).  In fact, all of our distributions defined on <code>(0, inf)</code> have this issue.  In my work, I've avoided this by careful use of priors, but before I had this down it was a pain.  It would be good if the solution worked for these distributions as well.  Or, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5453737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tatatodd\">@tatatodd</a> do you think that <code>Dirichlet</code> is more prone to this issue?</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> What do you think?</p>", "body_text": "You're right, I was mistaken.  The problem with zeros or ones in x needs some sort of log_prob_with_logits function.  I suppose there is another problem if concentration has any zeros in it, but that would require a new version of the Gamma function.\nSo the solution suggested by @tatatodd is to add a log_prob_with_logits function for distributions defined on the interior of the simplex, {(x_1,...,x_K) :  x_i \\in (0, 1), \\sum_i x_i = 1}.  This would be Dirichlet, and Beta.\nNote however that Gamma.log_prob(x) will fail for the exact same reason if x = 0 (both compute log(x)).  In fact, all of our distributions defined on (0, inf) have this issue.  In my work, I've avoided this by careful use of priors, but before I had this down it was a pain.  It would be good if the solution worked for these distributions as well.  Or, @tatatodd do you think that Dirichlet is more prone to this issue?\n@ebrevdo What do you think?", "body": "You're right, I was mistaken.  The problem with zeros or ones in `x` needs some sort of `log_prob_with_logits` function.  I suppose there is another problem if `concentration` has any zeros in it, but that would require a new version of the Gamma function.\r\n\r\nSo the solution suggested by @tatatodd is to add a `log_prob_with_logits` function for distributions defined on the interior of the simplex, `{(x_1,...,x_K) :  x_i \\in (0, 1), \\sum_i x_i = 1}`.  This would be `Dirichlet`, and `Beta`.\r\n\r\n Note however that `Gamma.log_prob(x)` will fail for the exact same reason if `x = 0` (both compute `log(x)`).  In fact, all of our distributions defined on `(0, inf)` have this issue.  In my work, I've avoided this by careful use of priors, but before I had this down it was a pain.  It would be good if the solution worked for these distributions as well.  Or, @tatatodd do you think that `Dirichlet` is more prone to this issue?\r\n\r\n@ebrevdo What do you think?"}