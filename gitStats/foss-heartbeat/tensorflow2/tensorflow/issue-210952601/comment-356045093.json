{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/356045093", "html_url": "https://github.com/tensorflow/tensorflow/issues/7956#issuecomment-356045093", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7956", "id": 356045093, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjA0NTA5Mw==", "user": {"login": "langmore", "id": 178152, "node_id": "MDQ6VXNlcjE3ODE1Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/178152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/langmore", "html_url": "https://github.com/langmore", "followers_url": "https://api.github.com/users/langmore/followers", "following_url": "https://api.github.com/users/langmore/following{/other_user}", "gists_url": "https://api.github.com/users/langmore/gists{/gist_id}", "starred_url": "https://api.github.com/users/langmore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/langmore/subscriptions", "organizations_url": "https://api.github.com/users/langmore/orgs", "repos_url": "https://api.github.com/users/langmore/repos", "events_url": "https://api.github.com/users/langmore/events{/privacy}", "received_events_url": "https://api.github.com/users/langmore/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-08T18:03:54Z", "updated_at": "2018-01-08T18:03:54Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'll bring this up to the team.  I think the way to think of this is that we would offer a version of <code>Dirichlet</code> (and others) that has been \"pre-transformed\" (in a stable manner) to unconstrained space using some <code>Bijector</code>.  E.g. <code>DiricheletUnconstrained</code> would be a stable equivalent to</p>\n<div class=\"highlight highlight-source-python\"><pre>tfd <span class=\"pl-k\">=</span> tf.contrib.distributions\ntfb <span class=\"pl-k\">=</span> tfd.bijectors\ndist <span class=\"pl-k\">=</span> tfd.Dirchlet([<span class=\"pl-c1\">0.5</span>, <span class=\"pl-c1\">0.5</span>])\ndist_uc <span class=\"pl-k\">=</span> tfd.TransformedDistribution(\n    dist,\n    <span class=\"pl-v\">bijector</span><span class=\"pl-k\">=</span>tfb.Invert(tfb.SoftmaxCentered()))</pre></div>", "body_text": "I'll bring this up to the team.  I think the way to think of this is that we would offer a version of Dirichlet (and others) that has been \"pre-transformed\" (in a stable manner) to unconstrained space using some Bijector.  E.g. DiricheletUnconstrained would be a stable equivalent to\ntfd = tf.contrib.distributions\ntfb = tfd.bijectors\ndist = tfd.Dirchlet([0.5, 0.5])\ndist_uc = tfd.TransformedDistribution(\n    dist,\n    bijector=tfb.Invert(tfb.SoftmaxCentered()))", "body": "I'll bring this up to the team.  I think the way to think of this is that we would offer a version of `Dirichlet` (and others) that has been \"pre-transformed\" (in a stable manner) to unconstrained space using some `Bijector`.  E.g. `DiricheletUnconstrained` would be a stable equivalent to\r\n\r\n```python\r\ntfd = tf.contrib.distributions\r\ntfb = tfd.bijectors\r\ndist = tfd.Dirchlet([0.5, 0.5])\r\ndist_uc = tfd.TransformedDistribution(\r\n    dist,\r\n    bijector=tfb.Invert(tfb.SoftmaxCentered()))\r\n```"}