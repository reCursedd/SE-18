{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/327552550", "html_url": "https://github.com/tensorflow/tensorflow/issues/2141#issuecomment-327552550", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2141", "id": 327552550, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzU1MjU1MA==", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-06T17:15:51Z", "updated_at": "2017-09-06T17:15:51Z", "author_association": "MEMBER", "body_html": "<div class=\"email-fragment\">Separate issue, please.</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Wed, Sep 6, 2017 at 7:35 AM, rhalbersma ***@***.***&gt; wrote:\n [Please let me know if this is off-topic and should belong in a new issue]\n\n Instead of saving/loading entire models from disk, I would also like the\n Estimator API to treat the trained weights as first-class entities (e.g.\n in a Weights class). E.g., the train() method could accept as input a\n weight initializer (defaulted to the currently used initialization\n routine), and expose the trained weights in a NumPy compatible layout.\n\n E.g. one use case that I frequently have is that I want to port an\n existing regression model (e.g. fitted in other packages such as R). To\n verify that the specified TF model_fn is correct, I'd like to swap in the\n weights from R, feed the training set and run evaluate to confirm that\n the loss function has the same value. Then I can add more layers/features\n in TF, knowing that my starting point is correct.\n\n The use case for trained weights export in NumPy is that I don't always\n want to deploy a model in TF, but e.g. implement it in C++ or another\n environment.\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"151552980\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/2141\" href=\"https://github.com/tensorflow/tensorflow/issues/2141#issuecomment-327502167\">#2141 (comment)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/AAATxXxR-LT81Rl9bZaLB_I0DA-TjOchks5sfq25gaJpZM4IRmKk\">https://github.com/notifications/unsubscribe-auth/AAATxXxR-LT81Rl9bZaLB_I0DA-TjOchks5sfq25gaJpZM4IRmKk</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n<div class=\"email-signature-reply\">-- \n - Alex</div>\n</div>", "body_text": "Separate issue, please.\n\u2026\nOn Wed, Sep 6, 2017 at 7:35 AM, rhalbersma ***@***.***> wrote:\n [Please let me know if this is off-topic and should belong in a new issue]\n\n Instead of saving/loading entire models from disk, I would also like the\n Estimator API to treat the trained weights as first-class entities (e.g.\n in a Weights class). E.g., the train() method could accept as input a\n weight initializer (defaulted to the currently used initialization\n routine), and expose the trained weights in a NumPy compatible layout.\n\n E.g. one use case that I frequently have is that I want to port an\n existing regression model (e.g. fitted in other packages such as R). To\n verify that the specified TF model_fn is correct, I'd like to swap in the\n weights from R, feed the training set and run evaluate to confirm that\n the loss function has the same value. Then I can add more layers/features\n in TF, knowing that my starting point is correct.\n\n The use case for trained weights export in NumPy is that I don't always\n want to deploy a model in TF, but e.g. implement it in C++ or another\n environment.\n\n \u2014\n You are receiving this because you commented.\n Reply to this email directly, view it on GitHub\n <#2141 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/AAATxXxR-LT81Rl9bZaLB_I0DA-TjOchks5sfq25gaJpZM4IRmKk>\n .\n\n\n-- \n - Alex", "body": "Separate issue, please.\n\nOn Wed, Sep 6, 2017 at 7:35 AM, rhalbersma <notifications@github.com> wrote:\n\n> [Please let me know if this is off-topic and should belong in a new issue]\n>\n> Instead of saving/loading entire models from disk, I would also like the\n> Estimator API to treat the trained weights as first-class entities (e.g.\n> in a Weights class). E.g., the train() method could accept as input a\n> weight initializer (defaulted to the currently used initialization\n> routine), and expose the trained weights in a NumPy compatible layout.\n>\n> E.g. one use case that I frequently have is that I want to port an\n> existing regression model (e.g. fitted in other packages such as R). To\n> verify that the specified TF model_fn is correct, I'd like to swap in the\n> weights from R, feed the training set and run evaluate to confirm that\n> the loss function has the same value. Then I can add more layers/features\n> in TF, knowing that my starting point is correct.\n>\n> The use case for trained weights export in NumPy is that I don't always\n> want to deploy a model in TF, but e.g. implement it in C++ or another\n> environment.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/issues/2141#issuecomment-327502167>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAATxXxR-LT81Rl9bZaLB_I0DA-TjOchks5sfq25gaJpZM4IRmKk>\n> .\n>\n\n\n\n-- \n - Alex\n"}