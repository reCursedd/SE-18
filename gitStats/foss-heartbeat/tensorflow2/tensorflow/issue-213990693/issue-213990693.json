{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8387", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8387/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8387/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8387/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8387", "id": 213990693, "node_id": "MDU6SXNzdWUyMTM5OTA2OTM=", "number": 8387, "title": "Tensorboard Summaries in Re-entered Scopes", "user": {"login": "jaakkopasanen", "id": 8393524, "node_id": "MDQ6VXNlcjgzOTM1MjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/8393524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaakkopasanen", "html_url": "https://github.com/jaakkopasanen", "followers_url": "https://api.github.com/users/jaakkopasanen/followers", "following_url": "https://api.github.com/users/jaakkopasanen/following{/other_user}", "gists_url": "https://api.github.com/users/jaakkopasanen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaakkopasanen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaakkopasanen/subscriptions", "organizations_url": "https://api.github.com/users/jaakkopasanen/orgs", "repos_url": "https://api.github.com/users/jaakkopasanen/repos", "events_url": "https://api.github.com/users/jaakkopasanen/events{/privacy}", "received_events_url": "https://api.github.com/users/jaakkopasanen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 284285184, "node_id": "MDU6TGFiZWwyODQyODUxODQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:tensorboard", "name": "comp:tensorboard", "color": "0052cc", "default": false}, {"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "decentralion", "id": 1400023, "node_id": "MDQ6VXNlcjE0MDAwMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1400023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decentralion", "html_url": "https://github.com/decentralion", "followers_url": "https://api.github.com/users/decentralion/followers", "following_url": "https://api.github.com/users/decentralion/following{/other_user}", "gists_url": "https://api.github.com/users/decentralion/gists{/gist_id}", "starred_url": "https://api.github.com/users/decentralion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decentralion/subscriptions", "organizations_url": "https://api.github.com/users/decentralion/orgs", "repos_url": "https://api.github.com/users/decentralion/repos", "events_url": "https://api.github.com/users/decentralion/events{/privacy}", "received_events_url": "https://api.github.com/users/decentralion/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "decentralion", "id": 1400023, "node_id": "MDQ6VXNlcjE0MDAwMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1400023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decentralion", "html_url": "https://github.com/decentralion", "followers_url": "https://api.github.com/users/decentralion/followers", "following_url": "https://api.github.com/users/decentralion/following{/other_user}", "gists_url": "https://api.github.com/users/decentralion/gists{/gist_id}", "starred_url": "https://api.github.com/users/decentralion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decentralion/subscriptions", "organizations_url": "https://api.github.com/users/decentralion/orgs", "repos_url": "https://api.github.com/users/decentralion/repos", "events_url": "https://api.github.com/users/decentralion/events{/privacy}", "received_events_url": "https://api.github.com/users/decentralion/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2017-03-14T07:41:48Z", "updated_at": "2017-06-16T22:13:31Z", "closed_at": "2017-06-16T22:13:31Z", "author_association": "NONE", "body_html": "<p>Tensorboard creates a new unique scope for summaries every time existing variable scope is re-entered leading to summaries being split to different groups in the Tensorboard. This might be due to summaries using name scopes internally and re-entered variable scopes having unique <code>original_name_scope</code>.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">print_scope</span>(<span class=\"pl-smi\">scope</span>):\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>               scope.name: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(scope.name))\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>scope.original_name_scope: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(scope.original_name_scope))\n\n<span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>parent<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> parent_scope:\n    print_scope(parent_scope)\n    <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>childA<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> childA_scope:\n        print_scope(childA_scope)\n<span class=\"pl-c1\">print</span>()\n<span class=\"pl-k\">with</span> tf.variable_scope(parent_scope):\n    print_scope(parent_scope)\n    <span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>childB<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> childB_scope:\n        print_scope(childB_scope)</pre></div>\n<p>outputs</p>\n<pre><code>               scope.name: parent\nscope.original_name_scope: parent/\n               scope.name: parent/childA\nscope.original_name_scope: parent/childA/\n\n               scope.name: parent\nscope.original_name_scope: parent/\n               scope.name: parent/childB\nscope.original_name_scope: parent_1/childB/\n</code></pre>\n<p>Child B is created in re-entered parent scope and has prefix for parent in the <code>original_name_scope</code>. I believe parent prefix is what confuses name scope in Tensorboard summaries. I think re-entering existing variable scope should not have these unique prefixes for parent scope.</p>\n<p>I have lemmatizer wrapped in Python class and Tensorboard summaries are created in different stages of graph build with re-entered variable scopes. Tensorboard splits graphs like so: <a href=\"http://i.imgur.com/KRDt3wj.png\" rel=\"nofollow\">Screenshot</a></p>\n<p>Tested on Tensorflow 1.0.1</p>", "body_text": "Tensorboard creates a new unique scope for summaries every time existing variable scope is re-entered leading to summaries being split to different groups in the Tensorboard. This might be due to summaries using name scopes internally and re-entered variable scopes having unique original_name_scope.\ndef print_scope(scope):\n    print('               scope.name: {}'.format(scope.name))\n    print('scope.original_name_scope: {}'.format(scope.original_name_scope))\n\nwith tf.variable_scope('parent') as parent_scope:\n    print_scope(parent_scope)\n    with tf.variable_scope('childA') as childA_scope:\n        print_scope(childA_scope)\nprint()\nwith tf.variable_scope(parent_scope):\n    print_scope(parent_scope)\n    with tf.variable_scope('childB') as childB_scope:\n        print_scope(childB_scope)\noutputs\n               scope.name: parent\nscope.original_name_scope: parent/\n               scope.name: parent/childA\nscope.original_name_scope: parent/childA/\n\n               scope.name: parent\nscope.original_name_scope: parent/\n               scope.name: parent/childB\nscope.original_name_scope: parent_1/childB/\n\nChild B is created in re-entered parent scope and has prefix for parent in the original_name_scope. I believe parent prefix is what confuses name scope in Tensorboard summaries. I think re-entering existing variable scope should not have these unique prefixes for parent scope.\nI have lemmatizer wrapped in Python class and Tensorboard summaries are created in different stages of graph build with re-entered variable scopes. Tensorboard splits graphs like so: Screenshot\nTested on Tensorflow 1.0.1", "body": "Tensorboard creates a new unique scope for summaries every time existing variable scope is re-entered leading to summaries being split to different groups in the Tensorboard. This might be due to summaries using name scopes internally and re-entered variable scopes having unique `original_name_scope`.\r\n\r\n```python\r\ndef print_scope(scope):\r\n    print('               scope.name: {}'.format(scope.name))\r\n    print('scope.original_name_scope: {}'.format(scope.original_name_scope))\r\n\r\nwith tf.variable_scope('parent') as parent_scope:\r\n    print_scope(parent_scope)\r\n    with tf.variable_scope('childA') as childA_scope:\r\n        print_scope(childA_scope)\r\nprint()\r\nwith tf.variable_scope(parent_scope):\r\n    print_scope(parent_scope)\r\n    with tf.variable_scope('childB') as childB_scope:\r\n        print_scope(childB_scope)\r\n```\r\noutputs\r\n```\r\n               scope.name: parent\r\nscope.original_name_scope: parent/\r\n               scope.name: parent/childA\r\nscope.original_name_scope: parent/childA/\r\n\r\n               scope.name: parent\r\nscope.original_name_scope: parent/\r\n               scope.name: parent/childB\r\nscope.original_name_scope: parent_1/childB/\r\n```\r\nChild B is created in re-entered parent scope and has prefix for parent in the `original_name_scope`. I believe parent prefix is what confuses name scope in Tensorboard summaries. I think re-entering existing variable scope should not have these unique prefixes for parent scope.\r\n\r\nI have lemmatizer wrapped in Python class and Tensorboard summaries are created in different stages of graph build with re-entered variable scopes. Tensorboard splits graphs like so: [Screenshot](http://i.imgur.com/KRDt3wj.png)\r\n\r\nTested on Tensorflow 1.0.1\r\n"}