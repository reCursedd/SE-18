{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12473", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12473/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12473/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12473/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12473", "id": 251827441, "node_id": "MDU6SXNzdWUyNTE4Mjc0NDE=", "number": 12473, "title": "[bug] gradients of scatter_nd_add return None ", "user": {"login": "wsdm2018", "id": 30958353, "node_id": "MDQ6VXNlcjMwOTU4MzUz", "avatar_url": "https://avatars2.githubusercontent.com/u/30958353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wsdm2018", "html_url": "https://github.com/wsdm2018", "followers_url": "https://api.github.com/users/wsdm2018/followers", "following_url": "https://api.github.com/users/wsdm2018/following{/other_user}", "gists_url": "https://api.github.com/users/wsdm2018/gists{/gist_id}", "starred_url": "https://api.github.com/users/wsdm2018/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wsdm2018/subscriptions", "organizations_url": "https://api.github.com/users/wsdm2018/orgs", "repos_url": "https://api.github.com/users/wsdm2018/repos", "events_url": "https://api.github.com/users/wsdm2018/events{/privacy}", "received_events_url": "https://api.github.com/users/wsdm2018/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-08-22T03:25:00Z", "updated_at": "2018-01-03T19:53:14Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>The gradient of scatter_nd_add  always return None.  If the gradient is not implemented, it should raise an exception.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np \n<span class=\"pl-k\">import</span> matplotlib.pyplot <span class=\"pl-k\">as</span> plt\nrng <span class=\"pl-k\">=</span> np.random\n\n\n\nx <span class=\"pl-k\">=</span> tf.Variable(np.random.random((<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>)).astype(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>float32<span class=\"pl-pds\">'</span></span>))\nindice <span class=\"pl-k\">=</span> tf.Variable(np.random.randint(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>, )), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32)\n\n\n\n\nx_val <span class=\"pl-k\">=</span> np.random.random((<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>))\nindice_val <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>, ))\nval_val <span class=\"pl-k\">=</span> np.random.random((<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>))\n\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> tf Graph Input</span>\nX <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>float<span class=\"pl-pds\">\"</span></span>)\nY <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>float<span class=\"pl-pds\">\"</span></span>)\n\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Set model weights</span>\nW <span class=\"pl-k\">=</span> tf.Variable(np.random.random((<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>)).astype(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>float32<span class=\"pl-pds\">'</span></span>), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>weight<span class=\"pl-pds\">\"</span></span>)\nb <span class=\"pl-k\">=</span> tf.Variable(np.random.random((<span class=\"pl-c1\">2</span>, )).astype(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>float32<span class=\"pl-pds\">'</span></span>), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bias<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Construct a linear model</span>\npred <span class=\"pl-k\">=</span> tf.add(tf.multiply(X, W), b)\n\ny <span class=\"pl-k\">=</span> tf.scatter_nd_add(x, indice, pred)\n\n\ngrad <span class=\"pl-k\">=</span> tf.gradients(y, [W,b])\n</pre></div>", "body_text": "The gradient of scatter_nd_add  always return None.  If the gradient is not implemented, it should raise an exception.\nimport tensorflow as tf\nimport numpy as np \nimport matplotlib.pyplot as plt\nrng = np.random\n\n\n\nx = tf.Variable(np.random.random((2, 4)).astype('float32'))\nindice = tf.Variable(np.random.randint(0, 4, size=(2, 4, )), dtype=tf.int32)\n\n\n\n\nx_val = np.random.random((2, 4))\nindice_val = np.random.randint(0, 4, size=(2, 4, ))\nval_val = np.random.random((2, 4))\n\n\n# tf Graph Input\nX = tf.placeholder(\"float\")\nY = tf.placeholder(\"float\")\n\n\n# Set model weights\nW = tf.Variable(np.random.random((2, 4)).astype('float32'), name=\"weight\")\nb = tf.Variable(np.random.random((2, )).astype('float32'), name=\"bias\")\n\n# Construct a linear model\npred = tf.add(tf.multiply(X, W), b)\n\ny = tf.scatter_nd_add(x, indice, pred)\n\n\ngrad = tf.gradients(y, [W,b])", "body": "The gradient of scatter_nd_add  always return None.  If the gradient is not implemented, it should raise an exception. \r\n\r\n```python\r\n\r\nimport tensorflow as tf\r\nimport numpy as np \r\nimport matplotlib.pyplot as plt\r\nrng = np.random\r\n\r\n\r\n\r\nx = tf.Variable(np.random.random((2, 4)).astype('float32'))\r\nindice = tf.Variable(np.random.randint(0, 4, size=(2, 4, )), dtype=tf.int32)\r\n\r\n\r\n\r\n\r\nx_val = np.random.random((2, 4))\r\nindice_val = np.random.randint(0, 4, size=(2, 4, ))\r\nval_val = np.random.random((2, 4))\r\n\r\n\r\n# tf Graph Input\r\nX = tf.placeholder(\"float\")\r\nY = tf.placeholder(\"float\")\r\n\r\n\r\n# Set model weights\r\nW = tf.Variable(np.random.random((2, 4)).astype('float32'), name=\"weight\")\r\nb = tf.Variable(np.random.random((2, )).astype('float32'), name=\"bias\")\r\n\r\n# Construct a linear model\r\npred = tf.add(tf.multiply(X, W), b)\r\n\r\ny = tf.scatter_nd_add(x, indice, pred)\r\n\r\n\r\ngrad = tf.gradients(y, [W,b])\r\n\r\n```"}