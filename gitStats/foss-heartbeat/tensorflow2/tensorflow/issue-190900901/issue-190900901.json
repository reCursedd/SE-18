{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5773", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5773/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5773/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5773/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/5773", "id": 190900901, "node_id": "MDU6SXNzdWUxOTA5MDA5MDE=", "number": 5773, "title": "extract_image_patches zeros out data for large images", "user": {"login": "shirriff", "id": 188116, "node_id": "MDQ6VXNlcjE4ODExNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/188116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shirriff", "html_url": "https://github.com/shirriff", "followers_url": "https://api.github.com/users/shirriff/followers", "following_url": "https://api.github.com/users/shirriff/following{/other_user}", "gists_url": "https://api.github.com/users/shirriff/gists{/gist_id}", "starred_url": "https://api.github.com/users/shirriff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shirriff/subscriptions", "organizations_url": "https://api.github.com/users/shirriff/orgs", "repos_url": "https://api.github.com/users/shirriff/repos", "events_url": "https://api.github.com/users/shirriff/events{/privacy}", "received_events_url": "https://api.github.com/users/shirriff/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2016-11-22T03:50:19Z", "updated_at": "2018-02-11T10:23:37Z", "closed_at": "2018-02-08T00:02:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'm reading a large image (7128x5097 pixels) and generating patches with extract_image_patches. Depending on the patch size, some or all of the resulting image is zeroed out. Is there a limit on tensor size that it hits?</p>\n<h3>What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?</h3>\n<p>nothing relevant</p>\n<h3>Environment info</h3>\n<p>Operating System: macOS Sierra 10.12.1</p>\n<p>Installed version of CUDA and cuDNN: none</p>\n<p>A link to the pip package you installed:<br>\n<a href=\"https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.11.0-py2-none-any.whl\" rel=\"nofollow\">https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.11.0-py2-none-any.whl</a><br>\nThe output from python -c \"import tensorflow; print(tensorflow.<strong>version</strong>)\".<br>\n0.11.0</p>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<p>The following code generates a random image, scales it up by a factor of 5, pulls a single pixel out of each patch, and writes an image with the result.</p>\n<p>Expected behavior: an image of random pixels.<br>\nObserved behavior: for small images it works. But for the 5097x7129 image, N=3 works, N=5 gives a completely blank image, and N=7 is blank after the first 998 rows. (It's kind of strange that 7 works better than 5.)</p>\n<pre><code>from __future__ import absolute_import\nfrom __future__ import print_function\nimport tensorflow as tf\nN = 5 # Can try other numbers\ndef main(_):\n  img = tf.random_uniform([1, 5097, 7129, 3], minval=0, maxval=255, dtype=tf.int32)\n  img = tf.cast(img, tf.uint8)\n  patches = tf.extract_image_patches(img, [1, N, N, 1], [1, N, N, 1],\n    [1, 1, 1, 1], \"SAME\")\n  data = patches[0, :, :, 0:3]\n\n  f = open('/tmp/img.png', 'w')\n  init_op = tf.initialize_all_variables()\n  with tf.Session() as sess:\n    sess.run(init_op)\n    f.write(tf.image.encode_png(data).eval())\n  f.close()\n\nif __name__ == \"__main__\":\n  tf.app.run()\n</code></pre>\n<h3>What other attempted solutions have you tried?</h3>\n<p>This is a simplified version of a larger image learning system, and I've cut it down to the problematic code. I've checked the values to make sure the problem is in extract_image_patches and not image_encode_png. The problem seems to happen if the tensor is big, so there's probably some size limit somewhere.</p>", "body_text": "I'm reading a large image (7128x5097 pixels) and generating patches with extract_image_patches. Depending on the patch size, some or all of the resulting image is zeroed out. Is there a limit on tensor size that it hits?\nWhat related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\nnothing relevant\nEnvironment info\nOperating System: macOS Sierra 10.12.1\nInstalled version of CUDA and cuDNN: none\nA link to the pip package you installed:\nhttps://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.11.0-py2-none-any.whl\nThe output from python -c \"import tensorflow; print(tensorflow.version)\".\n0.11.0\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nThe following code generates a random image, scales it up by a factor of 5, pulls a single pixel out of each patch, and writes an image with the result.\nExpected behavior: an image of random pixels.\nObserved behavior: for small images it works. But for the 5097x7129 image, N=3 works, N=5 gives a completely blank image, and N=7 is blank after the first 998 rows. (It's kind of strange that 7 works better than 5.)\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nimport tensorflow as tf\nN = 5 # Can try other numbers\ndef main(_):\n  img = tf.random_uniform([1, 5097, 7129, 3], minval=0, maxval=255, dtype=tf.int32)\n  img = tf.cast(img, tf.uint8)\n  patches = tf.extract_image_patches(img, [1, N, N, 1], [1, N, N, 1],\n    [1, 1, 1, 1], \"SAME\")\n  data = patches[0, :, :, 0:3]\n\n  f = open('/tmp/img.png', 'w')\n  init_op = tf.initialize_all_variables()\n  with tf.Session() as sess:\n    sess.run(init_op)\n    f.write(tf.image.encode_png(data).eval())\n  f.close()\n\nif __name__ == \"__main__\":\n  tf.app.run()\n\nWhat other attempted solutions have you tried?\nThis is a simplified version of a larger image learning system, and I've cut it down to the problematic code. I've checked the values to make sure the problem is in extract_image_patches and not image_encode_png. The problem seems to happen if the tensor is big, so there's probably some size limit somewhere.", "body": "I'm reading a large image (7128x5097 pixels) and generating patches with extract_image_patches. Depending on the patch size, some or all of the resulting image is zeroed out. Is there a limit on tensor size that it hits?\r\n\r\n### What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\r\nnothing relevant\r\n\r\n### Environment info\r\nOperating System: macOS Sierra 10.12.1\r\n\r\nInstalled version of CUDA and cuDNN: none\r\n\r\nA link to the pip package you installed:\r\nhttps://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.11.0-py2-none-any.whl\r\nThe output from python -c \"import tensorflow; print(tensorflow.__version__)\".\r\n0.11.0\r\n\r\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\r\n\r\nThe following code generates a random image, scales it up by a factor of 5, pulls a single pixel out of each patch, and writes an image with the result.\r\n\r\nExpected behavior: an image of random pixels.\r\nObserved behavior: for small images it works. But for the 5097x7129 image, N=3 works, N=5 gives a completely blank image, and N=7 is blank after the first 998 rows. (It's kind of strange that 7 works better than 5.)\r\n\r\n    from __future__ import absolute_import\r\n    from __future__ import print_function\r\n    import tensorflow as tf\r\n    N = 5 # Can try other numbers\r\n    def main(_):\r\n      img = tf.random_uniform([1, 5097, 7129, 3], minval=0, maxval=255, dtype=tf.int32)\r\n      img = tf.cast(img, tf.uint8)\r\n      patches = tf.extract_image_patches(img, [1, N, N, 1], [1, N, N, 1],\r\n        [1, 1, 1, 1], \"SAME\")\r\n      data = patches[0, :, :, 0:3]\r\n    \r\n      f = open('/tmp/img.png', 'w')\r\n      init_op = tf.initialize_all_variables()\r\n      with tf.Session() as sess:\r\n        sess.run(init_op)\r\n        f.write(tf.image.encode_png(data).eval())\r\n      f.close()\r\n    \r\n    if __name__ == \"__main__\":\r\n      tf.app.run()\r\n\r\n\r\n### What other attempted solutions have you tried?\r\nThis is a simplified version of a larger image learning system, and I've cut it down to the problematic code. I've checked the values to make sure the problem is in extract_image_patches and not image_encode_png. The problem seems to happen if the tensor is big, so there's probably some size limit somewhere."}