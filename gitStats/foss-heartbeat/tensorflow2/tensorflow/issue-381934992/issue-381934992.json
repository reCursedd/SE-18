{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23833", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23833/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23833/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23833/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23833", "id": 381934992, "node_id": "MDU6SXNzdWUzODE5MzQ5OTI=", "number": 23833, "title": "The same compilation target results in different compilation results", "user": {"login": "DavinciHW", "id": 39380007, "node_id": "MDQ6VXNlcjM5MzgwMDA3", "avatar_url": "https://avatars2.githubusercontent.com/u/39380007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavinciHW", "html_url": "https://github.com/DavinciHW", "followers_url": "https://api.github.com/users/DavinciHW/followers", "following_url": "https://api.github.com/users/DavinciHW/following{/other_user}", "gists_url": "https://api.github.com/users/DavinciHW/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavinciHW/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavinciHW/subscriptions", "organizations_url": "https://api.github.com/users/DavinciHW/orgs", "repos_url": "https://api.github.com/users/DavinciHW/repos", "events_url": "https://api.github.com/users/DavinciHW/events{/privacy}", "received_events_url": "https://api.github.com/users/DavinciHW/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-18T07:02:54Z", "updated_at": "2018-11-23T07:54:07Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><em>Please make sure that this is a build/installation issue. As per our <a href=\"https://github.com/tensorflow/tensorflow/blob/master/ISSUES.md\">GitHub Policy</a>, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:build_template</em></p>\n<p><strong>System information</strong></p>\n<ul>\n<li>Linux Ubuntu 16.04</li>\n<li>TensorFlow version:1.8.0</li>\n<li>Python version:3.5</li>\n<li>Bazel version (if compiling from source):0.17.2</li>\n<li>GCC/Compiler version (if compiling from source):gcc 5.4</li>\n</ul>\n<p><strong>Describe the problem</strong></p>\n<p>Initially, I used tensorflow1.8.0 as my external dependency for development, mainly using core:lib core:all_kernels core:core_cpu as the compilation target, and I wanted to use these three library files to generate my.so dynamic library files</p>\n<p>It does works and Everything seems normal, but I find that if I compile the same goal in tensorflow's self workspace, The generated binaries will be much smaller than the ones I compiled using external dependencies.</p>\n<p>In the beginning, I thought this was a problem caused by bazel compilation, so I consulted on bazle's community. Here is the issue I initiated</p>\n<p><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"380795108\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/bazelbuild/bazel/issues/6677\" data-hovercard-type=\"issue\" data-hovercard-url=\"/bazelbuild/bazel/issues/6677/hovercard\" href=\"https://github.com/bazelbuild/bazel/issues/6677\">bazelbuild/bazel#6677</a></p>\n<p>But after analysis by the developers, it is likely that tensorflow controls itself.</p>\n<p>This problem has been bothering me for a long time. I hope you can give me some ideas or Suggestions to solve the problem. Thank you very much!</p>\n<p>Here are the issues and validation process I mentioned in issue.</p>\n<p>The situation became clear, and I simplified my work the most, remove BUILD file and modified WORKSPACE file to the following\uff1a</p>\n<pre><code>local_repository(\n        name=\"org_tensorflow\",\n        path=\"../tensorflow\",\n)\n# TensorFlow depends on \"io_bazel_rules_closure\" so we need this here.\n# Needs to be kept in sync with the same target in TensorFlow's WORKSPACE file.\nhttp_archive(\n    name = \"io_bazel_rules_closure\",\n    sha256 = \"6691c58a2cd30a86776dd9bb34898b041e37136f2dc7e24cadaeaf599c95c657\",\n    strip_prefix = \"rules_closure-08039ba8ca59f64248bb3b6ae016460fe9c9914f\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/bazelbuild/rules_closure/archive/08039ba8ca59f64248bb3b6ae016460fe9c9914f.tar.gz\",\n        \"https://github.com/bazelbuild/rules_closure/archive/08039ba8ca59f64248bb3b6ae016460fe9c9914f.tar.gz\",  # 2018-01-16\n    ],\n)\nload('@org_tensorflow//tensorflow:workspace.bzl', 'tf_workspace')\ntf_workspace(path_prefix = \"\", tf_repo_name = \"org_davinci\")\n</code></pre>\n<p>I then modified the BUILD file in the tensorflow source directory \uff08../tensorflow\uff09\uff0c</p>\n<pre><code>exports_files(\n    [\n        \"LICENSE\",\n        \"ACKNOWLEDGEMENTS\",\n    ],\n)\n#bazel build //tensorflow/contrib/davinci_adpt_2:libtf_kernels.so\n#By default, packages of \u201c_impl\u201d are not visible\uff0cHere I changed the package visibility in core/framework/BUILD\n## \ncc_binary(\n    name = \"libtf_kernels.so\",\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":op_interface\",\n        \"//tensorflow/core:framework_internal_impl\",\n        \"//tensorflow/core:lib_internal_impl\",\n        \"//tensorflow/core:core_cpu_impl\",\n    ],\n    linkstatic = True,\n    linkshared = True,\n)\ncc_library(\n    name = \"op_interface\",\n    visibility = [\"//visibility:public\"],\n    srcs = glob([],exclude=[]),\n    hdrs = glob([],exclude=[]),\n    deps = [\n        \"//tensorflow/core:all_kernels\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:core_cpu\",\n    ],\n)\n</code></pre>\n<p>I tested three scenarios\uff1a</p>\n<ul>\n<li>In my workspace dir</li>\n</ul>\n<pre><code>bazel build @org_tensorflow//:libtf_kernels.so\n</code></pre>\n<p>This creates a 700M .so file</p>\n<ul>\n<li>in the tensorflow source directory</li>\n</ul>\n<pre><code>bazel build //:libtf_kernels.so\n</code></pre>\n<p>This creates a 125M .so file</p>\n<ul>\n<li>in the tensorflow source directory</li>\n</ul>\n<pre><code>bazel build @org_tensorflow//:libtf_kernels.so\n</code></pre>\n<p>This also creates a 125M .so file</p>\n<h3>Here if I don't add the three \"_impl\" dependencies and run <code>bazel build //:libtf_kernels.so</code> in the source directory of tensorflow, I will fail in the link phase!  But even without the three \"_impl\" dependencies, I can still compile successfully in my own workspace!</h3>\n<p>I don't know what the problem is there, it looks like the content is similar when linked, but when I executed under the source directory of tensorflow, bazel didn't compile enough targets?</p>", "body_text": "Please make sure that this is a build/installation issue. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:build_template\nSystem information\n\nLinux Ubuntu 16.04\nTensorFlow version:1.8.0\nPython version:3.5\nBazel version (if compiling from source):0.17.2\nGCC/Compiler version (if compiling from source):gcc 5.4\n\nDescribe the problem\nInitially, I used tensorflow1.8.0 as my external dependency for development, mainly using core:lib core:all_kernels core:core_cpu as the compilation target, and I wanted to use these three library files to generate my.so dynamic library files\nIt does works and Everything seems normal, but I find that if I compile the same goal in tensorflow's self workspace, The generated binaries will be much smaller than the ones I compiled using external dependencies.\nIn the beginning, I thought this was a problem caused by bazel compilation, so I consulted on bazle's community. Here is the issue I initiated\nbazelbuild/bazel#6677\nBut after analysis by the developers, it is likely that tensorflow controls itself.\nThis problem has been bothering me for a long time. I hope you can give me some ideas or Suggestions to solve the problem. Thank you very much!\nHere are the issues and validation process I mentioned in issue.\nThe situation became clear, and I simplified my work the most, remove BUILD file and modified WORKSPACE file to the following\uff1a\nlocal_repository(\n        name=\"org_tensorflow\",\n        path=\"../tensorflow\",\n)\n# TensorFlow depends on \"io_bazel_rules_closure\" so we need this here.\n# Needs to be kept in sync with the same target in TensorFlow's WORKSPACE file.\nhttp_archive(\n    name = \"io_bazel_rules_closure\",\n    sha256 = \"6691c58a2cd30a86776dd9bb34898b041e37136f2dc7e24cadaeaf599c95c657\",\n    strip_prefix = \"rules_closure-08039ba8ca59f64248bb3b6ae016460fe9c9914f\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/bazelbuild/rules_closure/archive/08039ba8ca59f64248bb3b6ae016460fe9c9914f.tar.gz\",\n        \"https://github.com/bazelbuild/rules_closure/archive/08039ba8ca59f64248bb3b6ae016460fe9c9914f.tar.gz\",  # 2018-01-16\n    ],\n)\nload('@org_tensorflow//tensorflow:workspace.bzl', 'tf_workspace')\ntf_workspace(path_prefix = \"\", tf_repo_name = \"org_davinci\")\n\nI then modified the BUILD file in the tensorflow source directory \uff08../tensorflow\uff09\uff0c\nexports_files(\n    [\n        \"LICENSE\",\n        \"ACKNOWLEDGEMENTS\",\n    ],\n)\n#bazel build //tensorflow/contrib/davinci_adpt_2:libtf_kernels.so\n#By default, packages of \u201c_impl\u201d are not visible\uff0cHere I changed the package visibility in core/framework/BUILD\n## \ncc_binary(\n    name = \"libtf_kernels.so\",\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":op_interface\",\n        \"//tensorflow/core:framework_internal_impl\",\n        \"//tensorflow/core:lib_internal_impl\",\n        \"//tensorflow/core:core_cpu_impl\",\n    ],\n    linkstatic = True,\n    linkshared = True,\n)\ncc_library(\n    name = \"op_interface\",\n    visibility = [\"//visibility:public\"],\n    srcs = glob([],exclude=[]),\n    hdrs = glob([],exclude=[]),\n    deps = [\n        \"//tensorflow/core:all_kernels\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:core_cpu\",\n    ],\n)\n\nI tested three scenarios\uff1a\n\nIn my workspace dir\n\nbazel build @org_tensorflow//:libtf_kernels.so\n\nThis creates a 700M .so file\n\nin the tensorflow source directory\n\nbazel build //:libtf_kernels.so\n\nThis creates a 125M .so file\n\nin the tensorflow source directory\n\nbazel build @org_tensorflow//:libtf_kernels.so\n\nThis also creates a 125M .so file\nHere if I don't add the three \"_impl\" dependencies and run bazel build //:libtf_kernels.so in the source directory of tensorflow, I will fail in the link phase!  But even without the three \"_impl\" dependencies, I can still compile successfully in my own workspace!\nI don't know what the problem is there, it looks like the content is similar when linked, but when I executed under the source directory of tensorflow, bazel didn't compile enough targets?", "body": "<em>Please make sure that this is a build/installation issue. As per our [GitHub Policy](https://github.com/tensorflow/tensorflow/blob/master/ISSUES.md), we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:build_template</em>\r\n\r\n**System information**\r\n- Linux Ubuntu 16.04\r\n- TensorFlow version:1.8.0\r\n- Python version:3.5\r\n- Bazel version (if compiling from source):0.17.2\r\n- GCC/Compiler version (if compiling from source):gcc 5.4\r\n\r\n**Describe the problem**\r\n\r\nInitially, I used tensorflow1.8.0 as my external dependency for development, mainly using core:lib core:all_kernels core:core_cpu as the compilation target, and I wanted to use these three library files to generate my.so dynamic library files\r\n\r\nIt does works and Everything seems normal, but I find that if I compile the same goal in tensorflow's self workspace, The generated binaries will be much smaller than the ones I compiled using external dependencies.\r\n\r\nIn the beginning, I thought this was a problem caused by bazel compilation, so I consulted on bazle's community. Here is the issue I initiated\r\n\r\nhttps://github.com/bazelbuild/bazel/issues/6677\r\n\r\nBut after analysis by the developers, it is likely that tensorflow controls itself.\r\n\r\nThis problem has been bothering me for a long time. I hope you can give me some ideas or Suggestions to solve the problem. Thank you very much!\r\n\r\nHere are the issues and validation process I mentioned in issue.\r\n\r\n\r\nThe situation became clear, and I simplified my work the most, remove BUILD file and modified WORKSPACE file to the following\uff1a\r\n```\r\nlocal_repository(\r\n        name=\"org_tensorflow\",\r\n        path=\"../tensorflow\",\r\n)\r\n# TensorFlow depends on \"io_bazel_rules_closure\" so we need this here.\r\n# Needs to be kept in sync with the same target in TensorFlow's WORKSPACE file.\r\nhttp_archive(\r\n    name = \"io_bazel_rules_closure\",\r\n    sha256 = \"6691c58a2cd30a86776dd9bb34898b041e37136f2dc7e24cadaeaf599c95c657\",\r\n    strip_prefix = \"rules_closure-08039ba8ca59f64248bb3b6ae016460fe9c9914f\",\r\n    urls = [\r\n        \"https://mirror.bazel.build/github.com/bazelbuild/rules_closure/archive/08039ba8ca59f64248bb3b6ae016460fe9c9914f.tar.gz\",\r\n        \"https://github.com/bazelbuild/rules_closure/archive/08039ba8ca59f64248bb3b6ae016460fe9c9914f.tar.gz\",  # 2018-01-16\r\n    ],\r\n)\r\nload('@org_tensorflow//tensorflow:workspace.bzl', 'tf_workspace')\r\ntf_workspace(path_prefix = \"\", tf_repo_name = \"org_davinci\")\r\n```\r\n\r\nI then modified the BUILD file in the tensorflow source directory \uff08../tensorflow\uff09\uff0c\r\n```\r\nexports_files(\r\n    [\r\n        \"LICENSE\",\r\n        \"ACKNOWLEDGEMENTS\",\r\n    ],\r\n)\r\n#bazel build //tensorflow/contrib/davinci_adpt_2:libtf_kernels.so\r\n#By default, packages of \u201c_impl\u201d are not visible\uff0cHere I changed the package visibility in core/framework/BUILD\r\n## \r\ncc_binary(\r\n    name = \"libtf_kernels.so\",\r\n    visibility = [\"//visibility:public\"],\r\n    deps = [\r\n        \":op_interface\",\r\n        \"//tensorflow/core:framework_internal_impl\",\r\n        \"//tensorflow/core:lib_internal_impl\",\r\n        \"//tensorflow/core:core_cpu_impl\",\r\n    ],\r\n    linkstatic = True,\r\n    linkshared = True,\r\n)\r\ncc_library(\r\n    name = \"op_interface\",\r\n    visibility = [\"//visibility:public\"],\r\n    srcs = glob([],exclude=[]),\r\n    hdrs = glob([],exclude=[]),\r\n    deps = [\r\n        \"//tensorflow/core:all_kernels\",\r\n        \"//tensorflow/core:lib\",\r\n        \"//tensorflow/core:core_cpu\",\r\n    ],\r\n)\r\n```\r\nI tested three scenarios\uff1a\r\n- In my workspace dir\r\n```\r\nbazel build @org_tensorflow//:libtf_kernels.so\r\n```\r\nThis creates a 700M .so file\r\n\r\n- in the tensorflow source directory\r\n```\r\nbazel build //:libtf_kernels.so\r\n```\r\nThis creates a 125M .so file\r\n\r\n- in the tensorflow source directory\r\n```\r\nbazel build @org_tensorflow//:libtf_kernels.so\r\n```\r\nThis also creates a 125M .so file\r\n\r\n### Here if I don't add the three \"_impl\" dependencies and run `bazel build //:libtf_kernels.so` in the source directory of tensorflow, I will fail in the link phase!  But even without the three \"_impl\" dependencies, I can still compile successfully in my own workspace!\r\n\r\nI don't know what the problem is there, it looks like the content is similar when linked, but when I executed under the source directory of tensorflow, bazel didn't compile enough targets?\r\n"}