{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/439570299", "html_url": "https://github.com/tensorflow/tensorflow/issues/23425#issuecomment-439570299", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23425", "id": 439570299, "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTU3MDI5OQ==", "user": {"login": "rickdzekman", "id": 5784312, "node_id": "MDQ6VXNlcjU3ODQzMTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5784312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rickdzekman", "html_url": "https://github.com/rickdzekman", "followers_url": "https://api.github.com/users/rickdzekman/followers", "following_url": "https://api.github.com/users/rickdzekman/following{/other_user}", "gists_url": "https://api.github.com/users/rickdzekman/gists{/gist_id}", "starred_url": "https://api.github.com/users/rickdzekman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rickdzekman/subscriptions", "organizations_url": "https://api.github.com/users/rickdzekman/orgs", "repos_url": "https://api.github.com/users/rickdzekman/repos", "events_url": "https://api.github.com/users/rickdzekman/events{/privacy}", "received_events_url": "https://api.github.com/users/rickdzekman/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-17T00:40:14Z", "updated_at": "2018-11-17T00:40:14Z", "author_association": "NONE", "body_html": "<p>Before following up on the bug I thought I would describe my workaround for anyone else experiencing this problem. You can manually implement TimeDistributed using <code>tf.keras.backend.rnn</code> like so:</p>\n<pre><code>def apply_concats(layer,context):\n    concat_lambda = tf.keras.layers.Lambda(lambda x: tf.keras.layers.Concatenate()([x,context]))\n    input_shape = tf.keras.backend.int_shape(layer)\n    def lambda_step(x, _):\n        return concat_lambda(x), []\n\n    _, outputs, _ = tf.keras.backend.rnn(\n        lambda_step,\n        layer,\n        initial_states=[],\n        input_length=input_shape[1],\n        unroll=False\n    )\n    return outputs\n\nconcatenator = tf.keras.layers.Lambda(lambda x: apply_concats(x[0],x[1]),name=\"input_concat\")\nconcatenated = concatenator([input_sequence,sequence_context])\n</code></pre>\n<p>Note: you <strong>must</strong> pass both layers into the lambda otherwise those layers will not be trained. In my case, I first tried passing the <code>sequence_context</code> into the function as a closure, this resulted in the weights for the <code>sequence_context</code> not being trained.</p>", "body_text": "Before following up on the bug I thought I would describe my workaround for anyone else experiencing this problem. You can manually implement TimeDistributed using tf.keras.backend.rnn like so:\ndef apply_concats(layer,context):\n    concat_lambda = tf.keras.layers.Lambda(lambda x: tf.keras.layers.Concatenate()([x,context]))\n    input_shape = tf.keras.backend.int_shape(layer)\n    def lambda_step(x, _):\n        return concat_lambda(x), []\n\n    _, outputs, _ = tf.keras.backend.rnn(\n        lambda_step,\n        layer,\n        initial_states=[],\n        input_length=input_shape[1],\n        unroll=False\n    )\n    return outputs\n\nconcatenator = tf.keras.layers.Lambda(lambda x: apply_concats(x[0],x[1]),name=\"input_concat\")\nconcatenated = concatenator([input_sequence,sequence_context])\n\nNote: you must pass both layers into the lambda otherwise those layers will not be trained. In my case, I first tried passing the sequence_context into the function as a closure, this resulted in the weights for the sequence_context not being trained.", "body": "Before following up on the bug I thought I would describe my workaround for anyone else experiencing this problem. You can manually implement TimeDistributed using `tf.keras.backend.rnn` like so:\r\n\r\n```\r\ndef apply_concats(layer,context):\r\n    concat_lambda = tf.keras.layers.Lambda(lambda x: tf.keras.layers.Concatenate()([x,context]))\r\n    input_shape = tf.keras.backend.int_shape(layer)\r\n    def lambda_step(x, _):\r\n        return concat_lambda(x), []\r\n\r\n    _, outputs, _ = tf.keras.backend.rnn(\r\n        lambda_step,\r\n        layer,\r\n        initial_states=[],\r\n        input_length=input_shape[1],\r\n        unroll=False\r\n    )\r\n    return outputs\r\n\r\nconcatenator = tf.keras.layers.Lambda(lambda x: apply_concats(x[0],x[1]),name=\"input_concat\")\r\nconcatenated = concatenator([input_sequence,sequence_context])\r\n```\r\n\r\nNote: you **must** pass both layers into the lambda otherwise those layers will not be trained. In my case, I first tried passing the `sequence_context` into the function as a closure, this resulted in the weights for the `sequence_context` not being trained. "}