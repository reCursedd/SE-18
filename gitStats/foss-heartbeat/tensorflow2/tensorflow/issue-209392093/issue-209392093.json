{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7770", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7770/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7770/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7770/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7770", "id": 209392093, "node_id": "MDU6SXNzdWUyMDkzOTIwOTM=", "number": 7770, "title": "\"GraphDef cannot be larger than 2GB.\" error when saving model after assigning variables", "user": {"login": "iamhankai", "id": 9500784, "node_id": "MDQ6VXNlcjk1MDA3ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/9500784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iamhankai", "html_url": "https://github.com/iamhankai", "followers_url": "https://api.github.com/users/iamhankai/followers", "following_url": "https://api.github.com/users/iamhankai/following{/other_user}", "gists_url": "https://api.github.com/users/iamhankai/gists{/gist_id}", "starred_url": "https://api.github.com/users/iamhankai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iamhankai/subscriptions", "organizations_url": "https://api.github.com/users/iamhankai/orgs", "repos_url": "https://api.github.com/users/iamhankai/repos", "events_url": "https://api.github.com/users/iamhankai/events{/privacy}", "received_events_url": "https://api.github.com/users/iamhankai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586558, "node_id": "MDU6TGFiZWw0MDQ1ODY1NTg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:community%20support", "name": "stat:community support", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-22T09:08:05Z", "updated_at": "2018-02-03T13:23:44Z", "closed_at": "2017-02-22T20:31:43Z", "author_association": "NONE", "body_html": "<p>I want to use a pretrained model to warmly start another model with a little difference. Simply, I create a new model, and assign the variables with same name with pretrained model weights. But, when saving the model, error occurred.</p>\n<pre><code>Traceback (most recent call last):\n  File \"tf_test.py\", line 23, in &lt;module&gt;\n    save_path = saver.save(sess, \"./model.ckpt\")\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 1308, in save\n    self.export_meta_graph(meta_graph_filename)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 1331, in export_meta_graph\n    graph_def=ops.get_default_graph().as_graph_def(add_shapes=True),\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2268, in as_graph_def\n    result, _ = self._as_graph_def(from_version, add_shapes)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2231, in _as_graph_def\n    raise ValueError(\"GraphDef cannot be larger than 2GB.\")\nValueError: GraphDef cannot be larger than 2GB.\n</code></pre>\n<p>The example code is as follow:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Create some variables.</span>\nv1 <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>L_enc<span class=\"pl-pds\">\"</span></span>, [<span class=\"pl-c1\">400000</span>, <span class=\"pl-c1\">1024</span>])\nv2 <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>L_dec<span class=\"pl-pds\">\"</span></span>, [<span class=\"pl-c1\">400000</span>, <span class=\"pl-c1\">1024</span>])\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Add an op to initialize the variables.</span>\ninit_op <span class=\"pl-k\">=</span> tf.initialize_all_variables()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Add ops to save and restore all the variables.</span>\nsaver <span class=\"pl-k\">=</span> tf.train.Saver(tf.all_variables())\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n  sess.run(init_op)\n  <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> tf.trainable_variables():\n    embedding <span class=\"pl-k\">=</span> np.random.uniform(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, (<span class=\"pl-c1\">400000</span>, <span class=\"pl-c1\">1024</span>))\n    sess.run(v.assign(embedding))\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Save the variables to disk.</span>\n  save_path <span class=\"pl-k\">=</span> saver.save(sess, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./model.ckpt<span class=\"pl-pds\">\"</span></span>)\n  <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Model saved in file: <span class=\"pl-c1\">%s</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> save_path)</pre></div>", "body_text": "I want to use a pretrained model to warmly start another model with a little difference. Simply, I create a new model, and assign the variables with same name with pretrained model weights. But, when saving the model, error occurred.\nTraceback (most recent call last):\n  File \"tf_test.py\", line 23, in <module>\n    save_path = saver.save(sess, \"./model.ckpt\")\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 1308, in save\n    self.export_meta_graph(meta_graph_filename)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 1331, in export_meta_graph\n    graph_def=ops.get_default_graph().as_graph_def(add_shapes=True),\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2268, in as_graph_def\n    result, _ = self._as_graph_def(from_version, add_shapes)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2231, in _as_graph_def\n    raise ValueError(\"GraphDef cannot be larger than 2GB.\")\nValueError: GraphDef cannot be larger than 2GB.\n\nThe example code is as follow:\nimport tensorflow as tf\nimport numpy as np\n\n# Create some variables.\nv1 = tf.get_variable(\"L_enc\", [400000, 1024])\nv2 = tf.get_variable(\"L_dec\", [400000, 1024])\n\n# Add an op to initialize the variables.\ninit_op = tf.initialize_all_variables()\n\n# Add ops to save and restore all the variables.\nsaver = tf.train.Saver(tf.all_variables())\n\nwith tf.Session() as sess:\n  sess.run(init_op)\n  for v in tf.trainable_variables():\n    embedding = np.random.uniform(-1, 1, (400000, 1024))\n    sess.run(v.assign(embedding))\n  # Save the variables to disk.\n  save_path = saver.save(sess, \"./model.ckpt\")\n  print(\"Model saved in file: %s\" % save_path)", "body": "I want to use a pretrained model to warmly start another model with a little difference. Simply, I create a new model, and assign the variables with same name with pretrained model weights. But, when saving the model, error occurred.\r\n```\r\nTraceback (most recent call last):\r\n  File \"tf_test.py\", line 23, in <module>\r\n    save_path = saver.save(sess, \"./model.ckpt\")\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 1308, in save\r\n    self.export_meta_graph(meta_graph_filename)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/training/saver.py\", line 1331, in export_meta_graph\r\n    graph_def=ops.get_default_graph().as_graph_def(add_shapes=True),\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2268, in as_graph_def\r\n    result, _ = self._as_graph_def(from_version, add_shapes)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2231, in _as_graph_def\r\n    raise ValueError(\"GraphDef cannot be larger than 2GB.\")\r\nValueError: GraphDef cannot be larger than 2GB.\r\n```\r\n\r\nThe example code is as follow:\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\n# Create some variables.\r\nv1 = tf.get_variable(\"L_enc\", [400000, 1024])\r\nv2 = tf.get_variable(\"L_dec\", [400000, 1024])\r\n\r\n# Add an op to initialize the variables.\r\ninit_op = tf.initialize_all_variables()\r\n\r\n# Add ops to save and restore all the variables.\r\nsaver = tf.train.Saver(tf.all_variables())\r\n\r\nwith tf.Session() as sess:\r\n  sess.run(init_op)\r\n  for v in tf.trainable_variables():\r\n    embedding = np.random.uniform(-1, 1, (400000, 1024))\r\n    sess.run(v.assign(embedding))\r\n  # Save the variables to disk.\r\n  save_path = saver.save(sess, \"./model.ckpt\")\r\n  print(\"Model saved in file: %s\" % save_path)\r\n```\r\n"}