{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17270", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17270/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17270/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17270/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17270", "id": 300162159, "node_id": "MDU6SXNzdWUzMDAxNjIxNTk=", "number": 17270, "title": "same code, tensorflow/contribe/android works, but tensorflow/contribe/lite/java/src/main/native doesn't, with error: No implementation found", "user": {"login": "BKZero", "id": 18680778, "node_id": "MDQ6VXNlcjE4NjgwNzc4", "avatar_url": "https://avatars2.githubusercontent.com/u/18680778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BKZero", "html_url": "https://github.com/BKZero", "followers_url": "https://api.github.com/users/BKZero/followers", "following_url": "https://api.github.com/users/BKZero/following{/other_user}", "gists_url": "https://api.github.com/users/BKZero/gists{/gist_id}", "starred_url": "https://api.github.com/users/BKZero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BKZero/subscriptions", "organizations_url": "https://api.github.com/users/BKZero/orgs", "repos_url": "https://api.github.com/users/BKZero/repos", "events_url": "https://api.github.com/users/BKZero/events{/privacy}", "received_events_url": "https://api.github.com/users/BKZero/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-26T09:24:47Z", "updated_at": "2018-02-26T19:46:10Z", "closed_at": "2018-02-26T19:46:10Z", "author_association": "NONE", "body_html": "<p>tensorflow r1.4<br>\nubuntu 14.04<br>\narmv7 platform<br>\nfor short, the same code witch can be used in tensorflow/cotribe/android/jni, when move to tensorflow/contribe/lite/java/src/main/native, the java code cannot find the implementation.<br>\nuse the command line:<br>\nbazel build -c opt --cxxopt='-std=c++11' //tensorflow/contrib/android:libtensorflow_inference.so    --crosstool_top=//external:android/crosstool    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain    --cpu=armeabi-v7a<br>\nto build an android so file, it is ok.<br>\nand i modify the BUILD file to add my own code:<br>\ncc_library(<br>\nname = \"native_framework_only\",<br>\nsrcs = [<br>\n#\"run_stats_jni.cc\",<br>\n#\"exception_jni.cc\",<br>\n#\"nativeinterpreterwrapper_jni.cc\",<br>\n#\"tensor_jni.cc\",<br>\n#\"tensorflow_lite_jni.cc\",<br>\n#\"run_stats_lite_jni.cc\",<br>\n] + select({<br>\n# The Android toolchain makes \"jni.h\" available in the include path.<br>\n# For non-Android toolchains, generate jni.h and jni_md.h.<br>\n\"//tensorflow:android\": [],<br>\n\"//conditions:default\": [<br>\n\":jni.h\",<br>\n\":jni_md.h\",<br>\n],<br>\n}),<br>\nhdrs = [<br>\n\"run_stats_jni.h\",<br>\n#\"exception_jni.h\",<br>\n#\"nativeinterpreterwrapper_jni.h\",<br>\n#\"tensor_jni.h\",<br>\n#\"tensorflow_lite_jni.h\",<br>\n#\"run_stats_lite_jni.h\",<br>\n#\"testlite.h\",<br>\n],<br>\ncopts = tflite_copts(),<br>\nincludes = select({<br>\n\"//tensorflow:android\": [],<br>\n\"//conditions:default\": [\".\"],<br>\n}),<br>\nlinkopts = [<br>\n\"-lm\",<br>\n\"-ldl\",<br>\n\"-llog\",<br>\n],<br>\ntags = [<br>\n\"manual\",<br>\n],<br>\ndeps = [<br>\n\"//tensorflow/contrib/lite:context\",<br>\n\"//tensorflow/contrib/lite:framework\",<br>\n\"//tensorflow/contrib/lite:schema_fbs_version\",<br>\n\"//tensorflow/contrib/lite/kernels:builtin_ops\",<br>\n\"@dlib_arm_v7//:dlib\",<br>\n\"@seeta_arm_v7//:seeta\",<br>\n\"@opencv_jni//:opencv_jni\",<br>\n],<br>\nalwayslink = 1,<br>\n)<br>\nthe file run_stats_jni.h is just from tensorflow/contribe/android/jni, the function i want to call from native is:<br>\nJNIEXPORT jint RUN_STATS_METHOD(jniSetInterval)(JNIEnv* env, jclass clazz, jint interval)<br>\n{<br>\nint val = (int)interval;<br>\nreturn JNI_OK;<br>\n}<br>\nand using the command line:<br>\nbazel build -c opt --cxxopt='-std=c++11' //tensorflow/contrib/lite/java:libtensorflowlite_jni.so    --crosstool_top=//external:android/crosstool    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain    --cpu=armeabi-v7a<br>\nand when i using nm -D command to check the libtensorflowlite_jni.so and libtensorflow_inference.so, they all have the same name Java_org_tensorflow_jniSetInterval. but libtensorflow_inference.so works, but libtensorflowlite_jni.so does not.<br>\nthe error is:<br>\nNo implementation found for int org_tensorflow.jniSetInterval(int) (tried Java_org_tensorflow_jniSetInterval and Java_org_tensorflow_jniSetInterval__I)</p>\n<p>lack of document to tell us how to add own code to tensorflow lite, and it is wierd, may be a bug.</p>", "body_text": "tensorflow r1.4\nubuntu 14.04\narmv7 platform\nfor short, the same code witch can be used in tensorflow/cotribe/android/jni, when move to tensorflow/contribe/lite/java/src/main/native, the java code cannot find the implementation.\nuse the command line:\nbazel build -c opt --cxxopt='-std=c++11' //tensorflow/contrib/android:libtensorflow_inference.so    --crosstool_top=//external:android/crosstool    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain    --cpu=armeabi-v7a\nto build an android so file, it is ok.\nand i modify the BUILD file to add my own code:\ncc_library(\nname = \"native_framework_only\",\nsrcs = [\n#\"run_stats_jni.cc\",\n#\"exception_jni.cc\",\n#\"nativeinterpreterwrapper_jni.cc\",\n#\"tensor_jni.cc\",\n#\"tensorflow_lite_jni.cc\",\n#\"run_stats_lite_jni.cc\",\n] + select({\n# The Android toolchain makes \"jni.h\" available in the include path.\n# For non-Android toolchains, generate jni.h and jni_md.h.\n\"//tensorflow:android\": [],\n\"//conditions:default\": [\n\":jni.h\",\n\":jni_md.h\",\n],\n}),\nhdrs = [\n\"run_stats_jni.h\",\n#\"exception_jni.h\",\n#\"nativeinterpreterwrapper_jni.h\",\n#\"tensor_jni.h\",\n#\"tensorflow_lite_jni.h\",\n#\"run_stats_lite_jni.h\",\n#\"testlite.h\",\n],\ncopts = tflite_copts(),\nincludes = select({\n\"//tensorflow:android\": [],\n\"//conditions:default\": [\".\"],\n}),\nlinkopts = [\n\"-lm\",\n\"-ldl\",\n\"-llog\",\n],\ntags = [\n\"manual\",\n],\ndeps = [\n\"//tensorflow/contrib/lite:context\",\n\"//tensorflow/contrib/lite:framework\",\n\"//tensorflow/contrib/lite:schema_fbs_version\",\n\"//tensorflow/contrib/lite/kernels:builtin_ops\",\n\"@dlib_arm_v7//:dlib\",\n\"@seeta_arm_v7//:seeta\",\n\"@opencv_jni//:opencv_jni\",\n],\nalwayslink = 1,\n)\nthe file run_stats_jni.h is just from tensorflow/contribe/android/jni, the function i want to call from native is:\nJNIEXPORT jint RUN_STATS_METHOD(jniSetInterval)(JNIEnv* env, jclass clazz, jint interval)\n{\nint val = (int)interval;\nreturn JNI_OK;\n}\nand using the command line:\nbazel build -c opt --cxxopt='-std=c++11' //tensorflow/contrib/lite/java:libtensorflowlite_jni.so    --crosstool_top=//external:android/crosstool    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain    --cpu=armeabi-v7a\nand when i using nm -D command to check the libtensorflowlite_jni.so and libtensorflow_inference.so, they all have the same name Java_org_tensorflow_jniSetInterval. but libtensorflow_inference.so works, but libtensorflowlite_jni.so does not.\nthe error is:\nNo implementation found for int org_tensorflow.jniSetInterval(int) (tried Java_org_tensorflow_jniSetInterval and Java_org_tensorflow_jniSetInterval__I)\nlack of document to tell us how to add own code to tensorflow lite, and it is wierd, may be a bug.", "body": "tensorflow r1.4\r\nubuntu 14.04\r\narmv7 platform\r\nfor short, the same code witch can be used in tensorflow/cotribe/android/jni, when move to tensorflow/contribe/lite/java/src/main/native, the java code cannot find the implementation.\r\nuse the command line:\r\nbazel build -c opt --cxxopt='-std=c++11' //tensorflow/contrib/android:libtensorflow_inference.so    --crosstool_top=//external:android/crosstool    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain    --cpu=armeabi-v7a\r\nto build an android so file, it is ok.\r\nand i modify the BUILD file to add my own code:\r\ncc_library(\r\n    name = \"native_framework_only\",\r\n    srcs = [\r\n        #\"run_stats_jni.cc\",\r\n        #\"exception_jni.cc\",\r\n        #\"nativeinterpreterwrapper_jni.cc\",\r\n        #\"tensor_jni.cc\",\r\n        #\"tensorflow_lite_jni.cc\",\r\n        #\"run_stats_lite_jni.cc\",\r\n    ] + select({\r\n        # The Android toolchain makes \"jni.h\" available in the include path.\r\n        # For non-Android toolchains, generate jni.h and jni_md.h.\r\n        \"//tensorflow:android\": [],\r\n        \"//conditions:default\": [\r\n            \":jni.h\",\r\n            \":jni_md.h\",\r\n        ],\r\n    }),\r\n    hdrs = [\r\n        \"run_stats_jni.h\",\r\n        #\"exception_jni.h\",\r\n        #\"nativeinterpreterwrapper_jni.h\",\r\n        #\"tensor_jni.h\",\r\n        #\"tensorflow_lite_jni.h\",\r\n        #\"run_stats_lite_jni.h\",\r\n        #\"testlite.h\",\r\n    ],\r\n    copts = tflite_copts(),\r\n    includes = select({\r\n        \"//tensorflow:android\": [],\r\n        \"//conditions:default\": [\".\"],\r\n    }),\r\n    linkopts = [\r\n        \"-lm\",\r\n        \"-ldl\",\r\n        \"-llog\",\r\n    ],\r\n    tags = [\r\n        \"manual\",\r\n    ],\r\n    deps = [\r\n        \"//tensorflow/contrib/lite:context\",\r\n        \"//tensorflow/contrib/lite:framework\",\r\n        \"//tensorflow/contrib/lite:schema_fbs_version\",\r\n        \"//tensorflow/contrib/lite/kernels:builtin_ops\",\r\n        \"@dlib_arm_v7//:dlib\",\r\n        \"@seeta_arm_v7//:seeta\",\r\n        \"@opencv_jni//:opencv_jni\",\r\n    ],\r\n    alwayslink = 1,\r\n)\r\nthe file run_stats_jni.h is just from tensorflow/contribe/android/jni, the function i want to call from native is:\r\nJNIEXPORT jint RUN_STATS_METHOD(jniSetInterval)(JNIEnv* env, jclass clazz, jint interval)\r\n{\r\n    int val = (int)interval;\r\n    return JNI_OK;\r\n}\r\nand using the command line:\r\nbazel build -c opt --cxxopt='-std=c++11' //tensorflow/contrib/lite/java:libtensorflowlite_jni.so    --crosstool_top=//external:android/crosstool    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain    --cpu=armeabi-v7a\r\nand when i using nm -D command to check the libtensorflowlite_jni.so and libtensorflow_inference.so, they all have the same name Java_org_tensorflow_jniSetInterval. but libtensorflow_inference.so works, but libtensorflowlite_jni.so does not.\r\nthe error is: \r\nNo implementation found for int org_tensorflow.jniSetInterval(int) (tried Java_org_tensorflow_jniSetInterval and Java_org_tensorflow_jniSetInterval__I)\r\n\r\nlack of document to tell us how to add own code to tensorflow lite, and it is wierd, may be a bug."}