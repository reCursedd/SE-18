{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/377045873", "html_url": "https://github.com/tensorflow/tensorflow/pull/17652#issuecomment-377045873", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17652", "id": 377045873, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NzA0NTg3Mw==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-28T21:37:53Z", "updated_at": "2018-03-28T21:37:53Z", "author_association": "MEMBER", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>. I take a second and noticed that there are some discrepancies between np and tf:</p>\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.dtype('int')\ndtype('int64')\n&gt;&gt;&gt; np.dtype('float')\ndtype('float64')\n&gt;&gt;&gt; np.dtype('complex')\ndtype('complex128')\n&gt;&gt;&gt; np.dtype('bool')\ndtype('bool')\n</code></pre>\n<p>The above matches the internal data types in python to C.</p>\n<p>For tf, the <code>canonical alias</code> only defines <code>half</code>, <code>float</code>, and <code>double</code> (and <code>bool</code>):<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/d57f0213bff0c676b06f4b3f0842ac282738c254/tensorflow/python/framework/dtypes.py#L501-L511\">tensorflow/tensorflow/python/framework/dtypes.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 501 to 511\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/d57f0213bff0c676b06f4b3f0842ac282738c254\">d57f021</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L501\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"501\"></td>\n          <td id=\"LC501\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">_STRING_TO_TF</span> <span class=\"pl-k\">=</span> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L502\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"502\"></td>\n          <td id=\"LC502\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     value: <span class=\"pl-c1\">_INTERN_TABLE</span>[key] </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L503\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"503\"></td>\n          <td id=\"LC503\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">for</span> key, value <span class=\"pl-k\">in</span> <span class=\"pl-c1\">_TYPE_TO_STRING</span>.items() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L504\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"504\"></td>\n          <td id=\"LC504\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L505\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"505\"></td>\n          <td id=\"LC505\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c\">#</span> Add non-canonical aliases.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L506\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"506\"></td>\n          <td id=\"LC506\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">_STRING_TO_TF</span>[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>half<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">=</span> float16 </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L507\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"507\"></td>\n          <td id=\"LC507\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">_STRING_TO_TF</span>[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>half_ref<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">=</span> float16_ref </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L508\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"508\"></td>\n          <td id=\"LC508\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">_STRING_TO_TF</span>[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>float<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">=</span> float32 </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L509\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"509\"></td>\n          <td id=\"LC509\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">_STRING_TO_TF</span>[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>float_ref<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">=</span> float32_ref </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L510\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"510\"></td>\n          <td id=\"LC510\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">_STRING_TO_TF</span>[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>double<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">=</span> float64 </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L511\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"511\"></td>\n          <td id=\"LC511\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-c1\">_STRING_TO_TF</span>[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>double_ref<span class=\"pl-pds\">\"</span></span>] <span class=\"pl-k\">=</span> float64_ref </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>There are no canonical definitions pointing to <code>int</code> or <code>complex</code>. Also, the mappings are:</p>\n<pre><code>&gt;&gt;&gt; import tensorflow as tf\n&gt;&gt;&gt; tf.as_dtype('half')\ntf.float16\n&gt;&gt;&gt; tf.as_dtype('float')\ntf.float32\n&gt;&gt;&gt; tf.as_dtype('double')\ntf.float64\n&gt;&gt;&gt; tf.as_dtype('bool')\ntf.bool\n</code></pre>", "body_text": "Thanks @mrry. I take a second and noticed that there are some discrepancies between np and tf:\n>>> import numpy as np\n>>> np.dtype('int')\ndtype('int64')\n>>> np.dtype('float')\ndtype('float64')\n>>> np.dtype('complex')\ndtype('complex128')\n>>> np.dtype('bool')\ndtype('bool')\n\nThe above matches the internal data types in python to C.\nFor tf, the canonical alias only defines half, float, and double (and bool):\n\n  \n    \n      tensorflow/tensorflow/python/framework/dtypes.py\n    \n    \n        Lines 501 to 511\n      in\n      d57f021\n    \n    \n    \n    \n\n        \n          \n           _STRING_TO_TF = { \n        \n\n        \n          \n               value: _INTERN_TABLE[key] \n        \n\n        \n          \n               for key, value in _TYPE_TO_STRING.items() \n        \n\n        \n          \n           } \n        \n\n        \n          \n           # Add non-canonical aliases. \n        \n\n        \n          \n           _STRING_TO_TF[\"half\"] = float16 \n        \n\n        \n          \n           _STRING_TO_TF[\"half_ref\"] = float16_ref \n        \n\n        \n          \n           _STRING_TO_TF[\"float\"] = float32 \n        \n\n        \n          \n           _STRING_TO_TF[\"float_ref\"] = float32_ref \n        \n\n        \n          \n           _STRING_TO_TF[\"double\"] = float64 \n        \n\n        \n          \n           _STRING_TO_TF[\"double_ref\"] = float64_ref \n        \n    \n  \n\n\nThere are no canonical definitions pointing to int or complex. Also, the mappings are:\n>>> import tensorflow as tf\n>>> tf.as_dtype('half')\ntf.float16\n>>> tf.as_dtype('float')\ntf.float32\n>>> tf.as_dtype('double')\ntf.float64\n>>> tf.as_dtype('bool')\ntf.bool", "body": "Thanks @mrry. I take a second and noticed that there are some discrepancies between np and tf:\r\n```\r\n>>> import numpy as np\r\n>>> np.dtype('int')\r\ndtype('int64')\r\n>>> np.dtype('float')\r\ndtype('float64')\r\n>>> np.dtype('complex')\r\ndtype('complex128')\r\n>>> np.dtype('bool')\r\ndtype('bool')\r\n```\r\nThe above matches the internal data types in python to C.\r\n\r\nFor tf, the `canonical alias` only defines `half`, `float`, and `double` (and `bool`):\r\nhttps://github.com/tensorflow/tensorflow/blob/d57f0213bff0c676b06f4b3f0842ac282738c254/tensorflow/python/framework/dtypes.py#L501-L511\r\n\r\nThere are no canonical definitions pointing to `int` or `complex`. Also, the mappings are:\r\n```\r\n>>> import tensorflow as tf\r\n>>> tf.as_dtype('half')\r\ntf.float16\r\n>>> tf.as_dtype('float')\r\ntf.float32\r\n>>> tf.as_dtype('double')\r\ntf.float64\r\n>>> tf.as_dtype('bool')\r\ntf.bool\r\n```"}