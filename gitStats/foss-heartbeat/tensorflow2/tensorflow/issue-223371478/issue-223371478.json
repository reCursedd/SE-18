{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9362", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9362/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9362/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9362/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9362", "id": 223371478, "node_id": "MDU6SXNzdWUyMjMzNzE0Nzg=", "number": 9362, "title": "[Bug report] ValueError: Variable does not exist on tf.layers.dense(reuse=True) after graph switch", "user": {"login": "leckie-chn", "id": 3284327, "node_id": "MDQ6VXNlcjMyODQzMjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3284327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leckie-chn", "html_url": "https://github.com/leckie-chn", "followers_url": "https://api.github.com/users/leckie-chn/followers", "following_url": "https://api.github.com/users/leckie-chn/following{/other_user}", "gists_url": "https://api.github.com/users/leckie-chn/gists{/gist_id}", "starred_url": "https://api.github.com/users/leckie-chn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leckie-chn/subscriptions", "organizations_url": "https://api.github.com/users/leckie-chn/orgs", "repos_url": "https://api.github.com/users/leckie-chn/repos", "events_url": "https://api.github.com/users/leckie-chn/events{/privacy}", "received_events_url": "https://api.github.com/users/leckie-chn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-21T12:39:57Z", "updated_at": "2018-04-30T03:00:19Z", "closed_at": "2017-04-22T16:50:42Z", "author_association": "NONE", "body_html": "<h3>System Information</h3>\n<ul>\n<li><em>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)?</em>: yes</li>\n<li><em>OS Platform and Distribution (i.e. Linux Ubuntu 16.0)</em>: macOS Sierra</li>\n<li><em>TensorFlow installed from (source or binary)?</em>: binary, pip</li>\n<li><em>TensorFlow version</em> (use command below): 1.0.0</li>\n<li><em>Bazel version (if compiling from source)</em>: None</li>\n<li><em>CUDA/cuDNN version</em>: not using GPU</li>\n<li><em>GPU Model and Memory</em>: not using GPU</li>\n<li><em>Exact command to reproduce</em>: None</li>\n</ul>\n<h3>Describe the problem clearly</h3>\n<p>I built 2 networks that share some layers/variables. The best way that I learned was to treat them as separate graphs. I wasn't sure about whether 2 graphs can share variables but I tried <code>tf.get_variable(resue=True)</code> anyway. At least my program show create 2 separate graph with no variable sharing. But a ValueError(variable does not exist) was thrown instead.</p>\n<h3>Source Code / Logs</h3>\n<ul>\n<li>source code:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> test code</span>\nmodel <span class=\"pl-k\">=</span> DPGModel(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> source code</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">DPGModel</span>(<span class=\"pl-c1\">object</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">state_size</span>, <span class=\"pl-smi\">action_size</span>):\n        <span class=\"pl-c1\">self</span>.sess <span class=\"pl-k\">=</span> tf.Session()\n        <span class=\"pl-c1\">self</span>.state_size <span class=\"pl-k\">=</span> state_size\n        <span class=\"pl-c1\">self</span>.action_size <span class=\"pl-k\">=</span> action_size\n        <span class=\"pl-c1\">self</span>.create_network()\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> other irrelevant code</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">create_network</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">self</span>.state_tensor <span class=\"pl-k\">=</span> tf.placeholder(tf.float64, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">self</span>.state_size], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>state<span class=\"pl-pds\">\"</span></span>)\n        <span class=\"pl-c1\">self</span>.action_tensor <span class=\"pl-k\">=</span> tf.placeholder(tf.float64, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">self</span>.action_size], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>action<span class=\"pl-pds\">\"</span></span>)\n        <span class=\"pl-c1\">self</span>.actor_graph <span class=\"pl-k\">=</span> tf.Graph()\n        <span class=\"pl-k\">with</span> <span class=\"pl-c1\">self</span>.actor_graph.as_default():\n            <span class=\"pl-c1\">print</span> tf.get_variable_scope()\n            state_h1 <span class=\"pl-k\">=</span> tf.layers.dense(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.state_tensor, <span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">64</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>state_h1<span class=\"pl-pds\">\"</span></span>,\n                                       <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n            state_h2 <span class=\"pl-k\">=</span> tf.layers.dense(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>state_h1, <span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>state_h2<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n            <span class=\"pl-c1\">self</span>.policy_tensor <span class=\"pl-k\">=</span> tf.layers.dense(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>state_h2, <span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.action_size, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.softmax,\n                                                 <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>policy<span class=\"pl-pds\">\"</span></span>)\n\n        <span class=\"pl-c1\">self</span>.critic_graph <span class=\"pl-k\">=</span> tf.Graph()\n        <span class=\"pl-k\">with</span> <span class=\"pl-c1\">self</span>.critic_graph.as_default():\n            <span class=\"pl-c1\">print</span> tf.get_variable_scope()\n            state_h1 <span class=\"pl-k\">=</span> tf.layers.dense(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.state_tensor, <span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">64</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>state_h1<span class=\"pl-pds\">\"</span></span>,\n                                       <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n            state_h2 <span class=\"pl-k\">=</span> tf.layers.dense(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>state_h1, <span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>state_h2<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n            action_h1 <span class=\"pl-k\">=</span> tf.layers.dense(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.action_tensor, <span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">64</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>action_h1<span class=\"pl-pds\">\"</span></span>)\n            action_h2 <span class=\"pl-k\">=</span> tf.layers.dense(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>action_h1, <span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>action_h2<span class=\"pl-pds\">\"</span></span>)\n            fc <span class=\"pl-k\">=</span> tf.layers.dense(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>[state_h2, action_h2], <span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">32</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu,\n                                 <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>fully_connected<span class=\"pl-pds\">\"</span></span>)\n            <span class=\"pl-c1\">self</span>.value_tensor <span class=\"pl-k\">=</span> tf.layers.dense(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>fc, <span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>value<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<ul>\n<li>error log:</li>\n</ul>\n<pre><code>&lt;tensorflow.python.ops.variable_scope.VariableScope object at 0x10fd20790&gt;\nTraceback (most recent call last):\n  File \"/Users/niyan/code/routerRL/test.py\", line 16, in &lt;module&gt;\n    model = DPGModel(state_dim, action_dim)\n  File \"/Users/niyan/code/routerRL/DPGModel.py\", line 10, in __init__\n    self.create_network()\n  File \"/Users/niyan/code/routerRL/DPGModel.py\", line 37, in create_network\n    reuse=True)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/core.py\", line 216, in dense\n    return layer.apply(inputs)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 303, in apply\n    return self.__call__(inputs, **kwargs)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 269, in __call__\n    self.build(input_shapes[0])\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/core.py\", line 123, in build\n    trainable=True)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 988, in get_variable\n    custom_getter=custom_getter)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 890, in get_variable\n    custom_getter=custom_getter)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 341, in get_variable\n    validate_shape=validate_shape)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 258, in variable_getter\n    variable_getter=functools.partial(getter, **kwargs))\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 208, in _add_variable\n    trainable=trainable and self.trainable)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 333, in _true_getter\n    caching_device=caching_device, validate_shape=validate_shape)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 657, in _get_single_variable\n    \"VarScope?\" % name)\nValueError: Variable state_h1/kernel does not exist, or was not created with tf.get_variable(). Did you mean to set reuse=None in VarScope?\n\nProcess finished with exit code 1\n</code></pre>", "body_text": "System Information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow)?: yes\nOS Platform and Distribution (i.e. Linux Ubuntu 16.0): macOS Sierra\nTensorFlow installed from (source or binary)?: binary, pip\nTensorFlow version (use command below): 1.0.0\nBazel version (if compiling from source): None\nCUDA/cuDNN version: not using GPU\nGPU Model and Memory: not using GPU\nExact command to reproduce: None\n\nDescribe the problem clearly\nI built 2 networks that share some layers/variables. The best way that I learned was to treat them as separate graphs. I wasn't sure about whether 2 graphs can share variables but I tried tf.get_variable(resue=True) anyway. At least my program show create 2 separate graph with no variable sharing. But a ValueError(variable does not exist) was thrown instead.\nSource Code / Logs\n\nsource code:\n\n# test code\nmodel = DPGModel(3, 4)\n\n# source code\nclass DPGModel(object):\n    def __init__(self, state_size, action_size):\n        self.sess = tf.Session()\n        self.state_size = state_size\n        self.action_size = action_size\n        self.create_network()\n        # other irrelevant code\n\n    def create_network(self):\n        self.state_tensor = tf.placeholder(tf.float64, [None, self.state_size], name=\"state\")\n        self.action_tensor = tf.placeholder(tf.float64, [None, self.action_size], name=\"action\")\n        self.actor_graph = tf.Graph()\n        with self.actor_graph.as_default():\n            print tf.get_variable_scope()\n            state_h1 = tf.layers.dense(inputs=self.state_tensor, units=64, activation=tf.nn.relu, name=\"state_h1\",\n                                       reuse=True)\n            state_h2 = tf.layers.dense(inputs=state_h1, units=32, activation=tf.nn.relu, name=\"state_h2\", reuse=True)\n            self.policy_tensor = tf.layers.dense(inputs=state_h2, units=self.action_size, activation=tf.nn.softmax,\n                                                 name=\"policy\")\n\n        self.critic_graph = tf.Graph()\n        with self.critic_graph.as_default():\n            print tf.get_variable_scope()\n            state_h1 = tf.layers.dense(inputs=self.state_tensor, units=64, activation=tf.nn.relu, name=\"state_h1\",\n                                       reuse=True)\n            state_h2 = tf.layers.dense(inputs=state_h1, units=32, activation=tf.nn.relu, name=\"state_h2\", reuse=True)\n            action_h1 = tf.layers.dense(inputs=self.action_tensor, units=64, activation=tf.nn.relu, name=\"action_h1\")\n            action_h2 = tf.layers.dense(inputs=action_h1, units=32, activation=tf.nn.relu, name=\"action_h2\")\n            fc = tf.layers.dense(inputs=[state_h2, action_h2], units=32, activation=tf.nn.relu,\n                                 name=\"fully_connected\")\n            self.value_tensor = tf.layers.dense(inputs=fc, units=1, activation=None, name=\"value\")\n\nerror log:\n\n<tensorflow.python.ops.variable_scope.VariableScope object at 0x10fd20790>\nTraceback (most recent call last):\n  File \"/Users/niyan/code/routerRL/test.py\", line 16, in <module>\n    model = DPGModel(state_dim, action_dim)\n  File \"/Users/niyan/code/routerRL/DPGModel.py\", line 10, in __init__\n    self.create_network()\n  File \"/Users/niyan/code/routerRL/DPGModel.py\", line 37, in create_network\n    reuse=True)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/core.py\", line 216, in dense\n    return layer.apply(inputs)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 303, in apply\n    return self.__call__(inputs, **kwargs)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 269, in __call__\n    self.build(input_shapes[0])\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/core.py\", line 123, in build\n    trainable=True)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 988, in get_variable\n    custom_getter=custom_getter)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 890, in get_variable\n    custom_getter=custom_getter)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 341, in get_variable\n    validate_shape=validate_shape)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 258, in variable_getter\n    variable_getter=functools.partial(getter, **kwargs))\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 208, in _add_variable\n    trainable=trainable and self.trainable)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 333, in _true_getter\n    caching_device=caching_device, validate_shape=validate_shape)\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 657, in _get_single_variable\n    \"VarScope?\" % name)\nValueError: Variable state_h1/kernel does not exist, or was not created with tf.get_variable(). Did you mean to set reuse=None in VarScope?\n\nProcess finished with exit code 1", "body": "### System Information\r\n- *Have I written custom code (as opposed to using a stock example script provided in TensorFlow)?*: yes\r\n- *OS Platform and Distribution (i.e. Linux Ubuntu 16.0)*: macOS Sierra\r\n- *TensorFlow installed from (source or binary)?*: binary, pip\r\n- *TensorFlow version* (use command below): 1.0.0\r\n- *Bazel version (if compiling from source)*: None\r\n- *CUDA/cuDNN version*: not using GPU\r\n- *GPU Model and Memory*: not using GPU\r\n- *Exact command to reproduce*: None\r\n\r\n\r\n### Describe the problem clearly\r\nI built 2 networks that share some layers/variables. The best way that I learned was to treat them as separate graphs. I wasn't sure about whether 2 graphs can share variables but I tried `tf.get_variable(resue=True)` anyway. At least my program show create 2 separate graph with no variable sharing. But a ValueError(variable does not exist) was thrown instead.\r\n\r\n### Source Code / Logs\r\n* source code:\r\n```python\r\n# test code\r\nmodel = DPGModel(3, 4)\r\n\r\n# source code\r\nclass DPGModel(object):\r\n    def __init__(self, state_size, action_size):\r\n        self.sess = tf.Session()\r\n        self.state_size = state_size\r\n        self.action_size = action_size\r\n        self.create_network()\r\n        # other irrelevant code\r\n\r\n    def create_network(self):\r\n        self.state_tensor = tf.placeholder(tf.float64, [None, self.state_size], name=\"state\")\r\n        self.action_tensor = tf.placeholder(tf.float64, [None, self.action_size], name=\"action\")\r\n        self.actor_graph = tf.Graph()\r\n        with self.actor_graph.as_default():\r\n            print tf.get_variable_scope()\r\n            state_h1 = tf.layers.dense(inputs=self.state_tensor, units=64, activation=tf.nn.relu, name=\"state_h1\",\r\n                                       reuse=True)\r\n            state_h2 = tf.layers.dense(inputs=state_h1, units=32, activation=tf.nn.relu, name=\"state_h2\", reuse=True)\r\n            self.policy_tensor = tf.layers.dense(inputs=state_h2, units=self.action_size, activation=tf.nn.softmax,\r\n                                                 name=\"policy\")\r\n\r\n        self.critic_graph = tf.Graph()\r\n        with self.critic_graph.as_default():\r\n            print tf.get_variable_scope()\r\n            state_h1 = tf.layers.dense(inputs=self.state_tensor, units=64, activation=tf.nn.relu, name=\"state_h1\",\r\n                                       reuse=True)\r\n            state_h2 = tf.layers.dense(inputs=state_h1, units=32, activation=tf.nn.relu, name=\"state_h2\", reuse=True)\r\n            action_h1 = tf.layers.dense(inputs=self.action_tensor, units=64, activation=tf.nn.relu, name=\"action_h1\")\r\n            action_h2 = tf.layers.dense(inputs=action_h1, units=32, activation=tf.nn.relu, name=\"action_h2\")\r\n            fc = tf.layers.dense(inputs=[state_h2, action_h2], units=32, activation=tf.nn.relu,\r\n                                 name=\"fully_connected\")\r\n            self.value_tensor = tf.layers.dense(inputs=fc, units=1, activation=None, name=\"value\")\r\n```\r\n\r\n* error log:\r\n```\r\n<tensorflow.python.ops.variable_scope.VariableScope object at 0x10fd20790>\r\nTraceback (most recent call last):\r\n  File \"/Users/niyan/code/routerRL/test.py\", line 16, in <module>\r\n    model = DPGModel(state_dim, action_dim)\r\n  File \"/Users/niyan/code/routerRL/DPGModel.py\", line 10, in __init__\r\n    self.create_network()\r\n  File \"/Users/niyan/code/routerRL/DPGModel.py\", line 37, in create_network\r\n    reuse=True)\r\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/core.py\", line 216, in dense\r\n    return layer.apply(inputs)\r\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 303, in apply\r\n    return self.__call__(inputs, **kwargs)\r\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 269, in __call__\r\n    self.build(input_shapes[0])\r\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/core.py\", line 123, in build\r\n    trainable=True)\r\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 988, in get_variable\r\n    custom_getter=custom_getter)\r\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 890, in get_variable\r\n    custom_getter=custom_getter)\r\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 341, in get_variable\r\n    validate_shape=validate_shape)\r\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 258, in variable_getter\r\n    variable_getter=functools.partial(getter, **kwargs))\r\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/layers/base.py\", line 208, in _add_variable\r\n    trainable=trainable and self.trainable)\r\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 333, in _true_getter\r\n    caching_device=caching_device, validate_shape=validate_shape)\r\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/tensorflow/python/ops/variable_scope.py\", line 657, in _get_single_variable\r\n    \"VarScope?\" % name)\r\nValueError: Variable state_h1/kernel does not exist, or was not created with tf.get_variable(). Did you mean to set reuse=None in VarScope?\r\n\r\nProcess finished with exit code 1\r\n```\r\n"}