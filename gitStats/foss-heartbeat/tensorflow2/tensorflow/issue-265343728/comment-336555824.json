{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/336555824", "html_url": "https://github.com/tensorflow/tensorflow/issues/13693#issuecomment-336555824", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13693", "id": 336555824, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjU1NTgyNA==", "user": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-13T20:12:40Z", "updated_at": "2017-10-13T20:12:40Z", "author_association": "MEMBER", "body_html": "<p>Whoops, I meant to say, opencv takes 267.98ms and tensorflow takes 403.34ms.</p>\n<p>Also, the code without the feed dict is:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> time\n\n<span class=\"pl-k\">import</span> cv2\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n\n<span class=\"pl-c1\">ITERS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100</span>\n<span class=\"pl-c1\">BATCH_SIZE</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">12</span>\n<span class=\"pl-c1\">INPUT_SIZE</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">48</span>\n<span class=\"pl-c1\">N_CHANNELS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">40</span>\n<span class=\"pl-c1\">SCALE_FACTOR</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">8</span>\n\n\nsess <span class=\"pl-k\">=</span> tf.Session()\n\nimages_ <span class=\"pl-k\">=</span> tf.Variable(tf.random_normal((<span class=\"pl-c1\">BATCH_SIZE</span>, <span class=\"pl-c1\">INPUT_SIZE</span>, <span class=\"pl-c1\">INPUT_SIZE</span>, <span class=\"pl-c1\">N_CHANNELS</span>), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32))\nresized <span class=\"pl-k\">=</span> tf.image.resize_bicubic(images_, (<span class=\"pl-c1\">INPUT_SIZE</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">SCALE_FACTOR</span>, <span class=\"pl-c1\">INPUT_SIZE</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">SCALE_FACTOR</span>))\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">upscale_using_opencv</span>():\n    results <span class=\"pl-k\">=</span> []\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">ITERS</span>):\n        images <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-c1\">BATCH_SIZE</span>, <span class=\"pl-c1\">INPUT_SIZE</span>, <span class=\"pl-c1\">INPUT_SIZE</span>, <span class=\"pl-c1\">N_CHANNELS</span>)\n        start_time <span class=\"pl-k\">=</span> time.time()\n        _ <span class=\"pl-k\">=</span> [\n            cv2.resize(image, (<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0</span>), <span class=\"pl-v\">fx</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">SCALE_FACTOR</span>, <span class=\"pl-v\">fy</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">SCALE_FACTOR</span>, <span class=\"pl-v\">interpolation</span><span class=\"pl-k\">=</span>cv2.<span class=\"pl-c1\">INTER_CUBIC</span>)\n            <span class=\"pl-k\">for</span> image <span class=\"pl-k\">in</span> images]\n        results.append(time.time() <span class=\"pl-k\">-</span> start_time)\n        <span class=\"pl-c1\">print</span>(i)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>opencv: <span class=\"pl-c1\">%0.2f</span>ms<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> (np.average(results)<span class=\"pl-k\">*</span><span class=\"pl-c1\">1000</span>))\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">upscale_using_tf</span>():\n    results <span class=\"pl-k\">=</span> []\n    sess.run(tf.global_variables_initializer())\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">ITERS</span>):\n        start_time <span class=\"pl-k\">=</span> time.time()\n        _ <span class=\"pl-k\">=</span> sess.run(resized)\n        <span class=\"pl-k\">if</span> i <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>:\n            <span class=\"pl-k\">continue</span>\n        results.append(time.time() <span class=\"pl-k\">-</span> start_time)\n        <span class=\"pl-c1\">print</span>(i)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>tf: <span class=\"pl-c1\">%0.2f</span>ms<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> (np.average(results)<span class=\"pl-k\">*</span><span class=\"pl-c1\">1000</span>))\n\n\nupscale_using_opencv()\nupscale_using_tf()</pre></div>", "body_text": "Whoops, I meant to say, opencv takes 267.98ms and tensorflow takes 403.34ms.\nAlso, the code without the feed dict is:\nimport time\n\nimport cv2\nimport numpy as np\nimport tensorflow as tf\n\n\nITERS = 100\nBATCH_SIZE = 12\nINPUT_SIZE = 48\nN_CHANNELS = 40\nSCALE_FACTOR = 8\n\n\nsess = tf.Session()\n\nimages_ = tf.Variable(tf.random_normal((BATCH_SIZE, INPUT_SIZE, INPUT_SIZE, N_CHANNELS), dtype=tf.float32))\nresized = tf.image.resize_bicubic(images_, (INPUT_SIZE*SCALE_FACTOR, INPUT_SIZE*SCALE_FACTOR))\n\n\ndef upscale_using_opencv():\n    results = []\n    for i in range(ITERS):\n        images = np.random.rand(BATCH_SIZE, INPUT_SIZE, INPUT_SIZE, N_CHANNELS)\n        start_time = time.time()\n        _ = [\n            cv2.resize(image, (0,0), fx=SCALE_FACTOR, fy=SCALE_FACTOR, interpolation=cv2.INTER_CUBIC)\n            for image in images]\n        results.append(time.time() - start_time)\n        print(i)\n    print('opencv: %0.2fms' % (np.average(results)*1000))\n\n\ndef upscale_using_tf():\n    results = []\n    sess.run(tf.global_variables_initializer())\n    for i in range(ITERS):\n        start_time = time.time()\n        _ = sess.run(resized)\n        if i == 0:\n            continue\n        results.append(time.time() - start_time)\n        print(i)\n    print('tf: %0.2fms' % (np.average(results)*1000))\n\n\nupscale_using_opencv()\nupscale_using_tf()", "body": "Whoops, I meant to say, opencv takes 267.98ms and tensorflow takes 403.34ms.\r\n\r\nAlso, the code without the feed dict is:\r\n```python\r\nimport time\r\n\r\nimport cv2\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n\r\nITERS = 100\r\nBATCH_SIZE = 12\r\nINPUT_SIZE = 48\r\nN_CHANNELS = 40\r\nSCALE_FACTOR = 8\r\n\r\n\r\nsess = tf.Session()\r\n\r\nimages_ = tf.Variable(tf.random_normal((BATCH_SIZE, INPUT_SIZE, INPUT_SIZE, N_CHANNELS), dtype=tf.float32))\r\nresized = tf.image.resize_bicubic(images_, (INPUT_SIZE*SCALE_FACTOR, INPUT_SIZE*SCALE_FACTOR))\r\n\r\n\r\ndef upscale_using_opencv():\r\n    results = []\r\n    for i in range(ITERS):\r\n        images = np.random.rand(BATCH_SIZE, INPUT_SIZE, INPUT_SIZE, N_CHANNELS)\r\n        start_time = time.time()\r\n        _ = [\r\n            cv2.resize(image, (0,0), fx=SCALE_FACTOR, fy=SCALE_FACTOR, interpolation=cv2.INTER_CUBIC)\r\n            for image in images]\r\n        results.append(time.time() - start_time)\r\n        print(i)\r\n    print('opencv: %0.2fms' % (np.average(results)*1000))\r\n\r\n\r\ndef upscale_using_tf():\r\n    results = []\r\n    sess.run(tf.global_variables_initializer())\r\n    for i in range(ITERS):\r\n        start_time = time.time()\r\n        _ = sess.run(resized)\r\n        if i == 0:\r\n            continue\r\n        results.append(time.time() - start_time)\r\n        print(i)\r\n    print('tf: %0.2fms' % (np.average(results)*1000))\r\n\r\n\r\nupscale_using_opencv()\r\nupscale_using_tf()\r\n```"}