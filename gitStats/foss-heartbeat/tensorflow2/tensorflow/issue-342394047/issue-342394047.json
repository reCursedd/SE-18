{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20929", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20929/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20929/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20929/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20929", "id": 342394047, "node_id": "MDU6SXNzdWUzNDIzOTQwNDc=", "number": 20929, "title": "cannot fit training data to TensorForestEstimator", "user": {"login": "grilhami", "id": 25741803, "node_id": "MDQ6VXNlcjI1NzQxODAz", "avatar_url": "https://avatars1.githubusercontent.com/u/25741803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grilhami", "html_url": "https://github.com/grilhami", "followers_url": "https://api.github.com/users/grilhami/followers", "following_url": "https://api.github.com/users/grilhami/following{/other_user}", "gists_url": "https://api.github.com/users/grilhami/gists{/gist_id}", "starred_url": "https://api.github.com/users/grilhami/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grilhami/subscriptions", "organizations_url": "https://api.github.com/users/grilhami/orgs", "repos_url": "https://api.github.com/users/grilhami/repos", "events_url": "https://api.github.com/users/grilhami/events{/privacy}", "received_events_url": "https://api.github.com/users/grilhami/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-07-18T16:03:30Z", "updated_at": "2018-09-25T13:07:43Z", "closed_at": "2018-08-22T19:52:28Z", "author_association": "NONE", "body_html": "<p>Currently I am trying to to implement a random forest regression using Tensorflow's <code>TensorForestEstimator</code>. I have successfully done using scikit-learn's <code>RandomForestRegressor</code> and wants to replicate the same result using Tensorflow.</p>\n<p>I uploaded the data using pandas and I split the training and test set using scikit-learn's <code>train_test_split</code>. It contains 4 features (all numerical).</p>\n<pre><code>&gt;&gt;&gt; X_train.shape\n(2711, 4)\n&gt;&gt;&gt; y_train.shape\n(2711,)\n</code></pre>\n<p>I set the parameters of the for the tree</p>\n<pre><code>num_features = int(np.log2(len(clean_data.columns)))\n\nparams = ForestHParams(num_classes=1, num_features=num_features,\n                       regression=True,num_trees=447, max_nodes=1000)\n\nregressor = TensorForestEstimator(params)\n</code></pre>\n<p>Above i set the features as <code>int(np.log2(len(clean_data.columns)))</code> because i used <code>log2</code> for the <code>max_features</code> parameter in my original scikit-learn implementation.</p>\n<p>However, when tried to fit the training data, i receive and error like such</p>\n<pre><code>---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py in _apply_op_helper(self, op_type_name, name, **keywords)\n    509                 as_ref=input_arg.is_ref,\n--&gt; 510                 preferred_dtype=default_dtype)\n    511           except TypeError as err:\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx)\n   1108     if ret is None:\n-&gt; 1109       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n   1110 \n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in _TensorTensorConversionFunction(t, dtype, name, as_ref)\n    945         \"Tensor conversion requested dtype %s for Tensor with dtype %s: %r\" %\n--&gt; 946         (dtype.name, t.dtype.name, str(t)))\n    947   return t\n\nValueError: Tensor conversion requested dtype float32 for Tensor with dtype float64: 'Tensor(\"concat:0\", shape=(?, 4), dtype=float64)'\n\nDuring handling of the above exception, another exception occurred:\n\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-18-79323408f7f7&gt; in &lt;module&gt;()\n      1 # from tensorflow import cast, float32\n      2 # X_train_cast = cast(X_train, float32)\n----&gt; 3 regressor.fit(x=X_train, y=y_train)\n      4 \n      5 #regressor.score()\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n    430                 'in a future version' if date is None else ('after %s' % date),\n    431                 instructions)\n--&gt; 432       return func(*args, **kwargs)\n    433     return tf_decorator.make_decorator(func, new_func, 'deprecated',\n    434                                        _add_deprecated_arg_notice_to_docstring(\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    506     _verify_input_args(x, y, input_fn, None, batch_size)\n    507     if x is not None:\n--&gt; 508       SKCompat(self).fit(x, y, batch_size, steps, max_steps, monitors)\n    509       return self\n    510 \n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, batch_size, steps, max_steps, monitors)\n   1525         steps=steps,\n   1526         max_steps=max_steps,\n-&gt; 1527         monitors=all_monitors)\n   1528     return self\n   1529 \n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n    430                 'in a future version' if date is None else ('after %s' % date),\n    431                 instructions)\n--&gt; 432       return func(*args, **kwargs)\n    433     return tf_decorator.make_decorator(func, new_func, 'deprecated',\n    434                                        _add_deprecated_arg_notice_to_docstring(\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    522       hooks.append(basic_session_run_hooks.StopAtStepHook(steps, max_steps))\n    523 \n--&gt; 524     loss = self._train_model(input_fn=input_fn, hooks=hooks)\n    525     logging.info('Loss for final step: %s.', loss)\n    526     return self\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _train_model(self, input_fn, hooks)\n   1039       self._check_inputs(features, labels)\n   1040       training_util._get_or_create_global_step_read()  # pylint: disable=protected-access\n-&gt; 1041       model_fn_ops = self._get_train_ops(features, labels)\n   1042       ops.add_to_collection(ops.GraphKeys.LOSSES, model_fn_ops.loss)\n   1043       all_hooks.extend(hooks)\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _get_train_ops(self, features, labels)\n   1262       `ModelFnOps` object.\n   1263     \"\"\"\n-&gt; 1264     return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\n   1265 \n   1266   def _get_eval_ops(self, features, labels, metrics):\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _call_model_fn(self, features, labels, mode, metrics, config)\n   1225     if 'model_dir' in model_fn_args:\n   1226       kwargs['model_dir'] = self.model_dir\n-&gt; 1227     model_fn_results = self._model_fn(features, labels, **kwargs)\n   1228 \n   1229     if isinstance(model_fn_results, model_fn_lib.ModelFnOps):\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/client/random_forest.py in _model_fn(features, labels, mode)\n    169 \n    170     logits, tree_paths, regression_variance = graph_builder.inference_graph(\n--&gt; 171         features)\n    172 \n    173     summary.scalar('average_tree_size', graph_builder.average_size())\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py in inference_graph(self, input_data, **inference_args)\n    512             data_spec,\n    513             sparse_features=processed_sparse_features,\n--&gt; 514             **inference_args)\n    515         probabilities.append(probs)\n    516         paths.append(path)\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py in inference_graph(self, input_data, data_spec, sparse_features)\n    686         sparse_shape,\n    687         input_spec=data_spec.SerializeToString(),\n--&gt; 688         params=self.params.serialized_params_proto)\n    689 \n    690   def size(self):\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/ops/gen_model_ops.py in tree_predictions_v4(tree_handle, input_data, sparse_input_indices, sparse_input_values, sparse_input_shape, input_spec, params, name)\n    467         sparse_input_values=sparse_input_values,\n    468         sparse_input_shape=sparse_input_shape, input_spec=input_spec,\n--&gt; 469         params=params, name=name)\n    470     _result = _op.outputs[:]\n    471     _inputs_flat = _op.inputs\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py in _apply_op_helper(self, op_type_name, name, **keywords)\n    531             if input_arg.type != types_pb2.DT_INVALID:\n    532               raise TypeError(\"%s expected type of %s.\" %\n--&gt; 533                               (prefix, dtypes.as_dtype(input_arg.type).name))\n    534             else:\n    535               # Update the maps with the default, if needed.\n\nTypeError: Input 'input_data' of 'TreePredictionsV4' Op has type float64 that does not match expected type of float32.\n</code></pre>\n<p>My assumption was that i have to set the number of features to the number of all the features (i.e. using all features instead of a subset of the features). But i still get the same error as above.</p>\n<p>I tried to look at the source code directly but could not really understood where was the issue. A similar issue is being discuss on github here.</p>\n<p>Another attempt was converting the input into float32.</p>\n<p><code>regressor.fit(x=X_train.astype(\"float32\"), y=y_train.astype(\"float32\"))</code></p>\n<p>However, i still got the same error as above. Then i tried using <code>tf.cast</code></p>\n<pre><code>X_train_cast = cast(X_train, float32)\ny_train_cast = cast(y_train, float32)\nregressor.fit(x=X_train_cast, y=y_train_cast)\n</code></pre>\n<p>But i got a different error saying</p>\n<pre><code>---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-19-89e4fa057afb&gt; in &lt;module&gt;()\n      2 X_train_cast = cast(X_train, float32)\n      3 y_train_cast = cast(y_train, float32)\n----&gt; 4 regressor.fit(x=X_train_cast, y=y_train_cast)\n      5 \n      6 #regressor.score()\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n    430                 'in a future version' if date is None else ('after %s' % date),\n    431                 instructions)\n--&gt; 432       return func(*args, **kwargs)\n    433     return tf_decorator.make_decorator(func, new_func, 'deprecated',\n    434                                        _add_deprecated_arg_notice_to_docstring(\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    504     if (steps is not None) and (max_steps is not None):\n    505       raise ValueError('Can not provide both steps and max_steps.')\n--&gt; 506     _verify_input_args(x, y, input_fn, None, batch_size)\n    507     if x is not None:\n    508       SKCompat(self).fit(x, y, batch_size, steps, max_steps, monitors)\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _verify_input_args(x, y, input_fn, feed_fn, batch_size)\n    102 \n    103     if tensor_util.is_tensor(x) or y is not None and tensor_util.is_tensor(y):\n--&gt; 104       raise ValueError('Inputs cannot be tensors. Please provide input_fn.')\n    105 \n    106     if feed_fn is not None:\n\nValueError: Inputs cannot be tensors. Please provide input_fn.\n</code></pre>\n<p>I was wondering if there was something missing in my implementation? Thanks in advance.</p>", "body_text": "Currently I am trying to to implement a random forest regression using Tensorflow's TensorForestEstimator. I have successfully done using scikit-learn's RandomForestRegressor and wants to replicate the same result using Tensorflow.\nI uploaded the data using pandas and I split the training and test set using scikit-learn's train_test_split. It contains 4 features (all numerical).\n>>> X_train.shape\n(2711, 4)\n>>> y_train.shape\n(2711,)\n\nI set the parameters of the for the tree\nnum_features = int(np.log2(len(clean_data.columns)))\n\nparams = ForestHParams(num_classes=1, num_features=num_features,\n                       regression=True,num_trees=447, max_nodes=1000)\n\nregressor = TensorForestEstimator(params)\n\nAbove i set the features as int(np.log2(len(clean_data.columns))) because i used log2 for the max_features parameter in my original scikit-learn implementation.\nHowever, when tried to fit the training data, i receive and error like such\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py in _apply_op_helper(self, op_type_name, name, **keywords)\n    509                 as_ref=input_arg.is_ref,\n--> 510                 preferred_dtype=default_dtype)\n    511           except TypeError as err:\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx)\n   1108     if ret is None:\n-> 1109       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n   1110 \n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in _TensorTensorConversionFunction(t, dtype, name, as_ref)\n    945         \"Tensor conversion requested dtype %s for Tensor with dtype %s: %r\" %\n--> 946         (dtype.name, t.dtype.name, str(t)))\n    947   return t\n\nValueError: Tensor conversion requested dtype float32 for Tensor with dtype float64: 'Tensor(\"concat:0\", shape=(?, 4), dtype=float64)'\n\nDuring handling of the above exception, another exception occurred:\n\nTypeError                                 Traceback (most recent call last)\n<ipython-input-18-79323408f7f7> in <module>()\n      1 # from tensorflow import cast, float32\n      2 # X_train_cast = cast(X_train, float32)\n----> 3 regressor.fit(x=X_train, y=y_train)\n      4 \n      5 #regressor.score()\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n    430                 'in a future version' if date is None else ('after %s' % date),\n    431                 instructions)\n--> 432       return func(*args, **kwargs)\n    433     return tf_decorator.make_decorator(func, new_func, 'deprecated',\n    434                                        _add_deprecated_arg_notice_to_docstring(\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    506     _verify_input_args(x, y, input_fn, None, batch_size)\n    507     if x is not None:\n--> 508       SKCompat(self).fit(x, y, batch_size, steps, max_steps, monitors)\n    509       return self\n    510 \n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, batch_size, steps, max_steps, monitors)\n   1525         steps=steps,\n   1526         max_steps=max_steps,\n-> 1527         monitors=all_monitors)\n   1528     return self\n   1529 \n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n    430                 'in a future version' if date is None else ('after %s' % date),\n    431                 instructions)\n--> 432       return func(*args, **kwargs)\n    433     return tf_decorator.make_decorator(func, new_func, 'deprecated',\n    434                                        _add_deprecated_arg_notice_to_docstring(\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    522       hooks.append(basic_session_run_hooks.StopAtStepHook(steps, max_steps))\n    523 \n--> 524     loss = self._train_model(input_fn=input_fn, hooks=hooks)\n    525     logging.info('Loss for final step: %s.', loss)\n    526     return self\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _train_model(self, input_fn, hooks)\n   1039       self._check_inputs(features, labels)\n   1040       training_util._get_or_create_global_step_read()  # pylint: disable=protected-access\n-> 1041       model_fn_ops = self._get_train_ops(features, labels)\n   1042       ops.add_to_collection(ops.GraphKeys.LOSSES, model_fn_ops.loss)\n   1043       all_hooks.extend(hooks)\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _get_train_ops(self, features, labels)\n   1262       `ModelFnOps` object.\n   1263     \"\"\"\n-> 1264     return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\n   1265 \n   1266   def _get_eval_ops(self, features, labels, metrics):\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _call_model_fn(self, features, labels, mode, metrics, config)\n   1225     if 'model_dir' in model_fn_args:\n   1226       kwargs['model_dir'] = self.model_dir\n-> 1227     model_fn_results = self._model_fn(features, labels, **kwargs)\n   1228 \n   1229     if isinstance(model_fn_results, model_fn_lib.ModelFnOps):\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/client/random_forest.py in _model_fn(features, labels, mode)\n    169 \n    170     logits, tree_paths, regression_variance = graph_builder.inference_graph(\n--> 171         features)\n    172 \n    173     summary.scalar('average_tree_size', graph_builder.average_size())\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py in inference_graph(self, input_data, **inference_args)\n    512             data_spec,\n    513             sparse_features=processed_sparse_features,\n--> 514             **inference_args)\n    515         probabilities.append(probs)\n    516         paths.append(path)\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py in inference_graph(self, input_data, data_spec, sparse_features)\n    686         sparse_shape,\n    687         input_spec=data_spec.SerializeToString(),\n--> 688         params=self.params.serialized_params_proto)\n    689 \n    690   def size(self):\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/ops/gen_model_ops.py in tree_predictions_v4(tree_handle, input_data, sparse_input_indices, sparse_input_values, sparse_input_shape, input_spec, params, name)\n    467         sparse_input_values=sparse_input_values,\n    468         sparse_input_shape=sparse_input_shape, input_spec=input_spec,\n--> 469         params=params, name=name)\n    470     _result = _op.outputs[:]\n    471     _inputs_flat = _op.inputs\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py in _apply_op_helper(self, op_type_name, name, **keywords)\n    531             if input_arg.type != types_pb2.DT_INVALID:\n    532               raise TypeError(\"%s expected type of %s.\" %\n--> 533                               (prefix, dtypes.as_dtype(input_arg.type).name))\n    534             else:\n    535               # Update the maps with the default, if needed.\n\nTypeError: Input 'input_data' of 'TreePredictionsV4' Op has type float64 that does not match expected type of float32.\n\nMy assumption was that i have to set the number of features to the number of all the features (i.e. using all features instead of a subset of the features). But i still get the same error as above.\nI tried to look at the source code directly but could not really understood where was the issue. A similar issue is being discuss on github here.\nAnother attempt was converting the input into float32.\nregressor.fit(x=X_train.astype(\"float32\"), y=y_train.astype(\"float32\"))\nHowever, i still got the same error as above. Then i tried using tf.cast\nX_train_cast = cast(X_train, float32)\ny_train_cast = cast(y_train, float32)\nregressor.fit(x=X_train_cast, y=y_train_cast)\n\nBut i got a different error saying\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-19-89e4fa057afb> in <module>()\n      2 X_train_cast = cast(X_train, float32)\n      3 y_train_cast = cast(y_train, float32)\n----> 4 regressor.fit(x=X_train_cast, y=y_train_cast)\n      5 \n      6 #regressor.score()\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n    430                 'in a future version' if date is None else ('after %s' % date),\n    431                 instructions)\n--> 432       return func(*args, **kwargs)\n    433     return tf_decorator.make_decorator(func, new_func, 'deprecated',\n    434                                        _add_deprecated_arg_notice_to_docstring(\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n    504     if (steps is not None) and (max_steps is not None):\n    505       raise ValueError('Can not provide both steps and max_steps.')\n--> 506     _verify_input_args(x, y, input_fn, None, batch_size)\n    507     if x is not None:\n    508       SKCompat(self).fit(x, y, batch_size, steps, max_steps, monitors)\n\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _verify_input_args(x, y, input_fn, feed_fn, batch_size)\n    102 \n    103     if tensor_util.is_tensor(x) or y is not None and tensor_util.is_tensor(y):\n--> 104       raise ValueError('Inputs cannot be tensors. Please provide input_fn.')\n    105 \n    106     if feed_fn is not None:\n\nValueError: Inputs cannot be tensors. Please provide input_fn.\n\nI was wondering if there was something missing in my implementation? Thanks in advance.", "body": "Currently I am trying to to implement a random forest regression using Tensorflow's `TensorForestEstimator`. I have successfully done using scikit-learn's `RandomForestRegressor` and wants to replicate the same result using Tensorflow.\r\n\r\nI uploaded the data using pandas and I split the training and test set using scikit-learn's `train_test_split`. It contains 4 features (all numerical).\r\n\r\n```\r\n>>> X_train.shape\r\n(2711, 4)\r\n>>> y_train.shape\r\n(2711,)\r\n```\r\nI set the parameters of the for the tree\r\n\r\n```\r\nnum_features = int(np.log2(len(clean_data.columns)))\r\n\r\nparams = ForestHParams(num_classes=1, num_features=num_features,\r\n                       regression=True,num_trees=447, max_nodes=1000)\r\n\r\nregressor = TensorForestEstimator(params)\r\n```\r\nAbove i set the features as `int(np.log2(len(clean_data.columns)))` because i used `log2` for the `max_features` parameter in my original scikit-learn implementation.\r\n\r\nHowever, when tried to fit the training data, i receive and error like such\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py in _apply_op_helper(self, op_type_name, name, **keywords)\r\n    509                 as_ref=input_arg.is_ref,\r\n--> 510                 preferred_dtype=default_dtype)\r\n    511           except TypeError as err:\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx)\r\n   1108     if ret is None:\r\n-> 1109       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\r\n   1110 \r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/framework/ops.py in _TensorTensorConversionFunction(t, dtype, name, as_ref)\r\n    945         \"Tensor conversion requested dtype %s for Tensor with dtype %s: %r\" %\r\n--> 946         (dtype.name, t.dtype.name, str(t)))\r\n    947   return t\r\n\r\nValueError: Tensor conversion requested dtype float32 for Tensor with dtype float64: 'Tensor(\"concat:0\", shape=(?, 4), dtype=float64)'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-18-79323408f7f7> in <module>()\r\n      1 # from tensorflow import cast, float32\r\n      2 # X_train_cast = cast(X_train, float32)\r\n----> 3 regressor.fit(x=X_train, y=y_train)\r\n      4 \r\n      5 #regressor.score()\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\r\n    430                 'in a future version' if date is None else ('after %s' % date),\r\n    431                 instructions)\r\n--> 432       return func(*args, **kwargs)\r\n    433     return tf_decorator.make_decorator(func, new_func, 'deprecated',\r\n    434                                        _add_deprecated_arg_notice_to_docstring(\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\r\n    506     _verify_input_args(x, y, input_fn, None, batch_size)\r\n    507     if x is not None:\r\n--> 508       SKCompat(self).fit(x, y, batch_size, steps, max_steps, monitors)\r\n    509       return self\r\n    510 \r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, batch_size, steps, max_steps, monitors)\r\n   1525         steps=steps,\r\n   1526         max_steps=max_steps,\r\n-> 1527         monitors=all_monitors)\r\n   1528     return self\r\n   1529 \r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\r\n    430                 'in a future version' if date is None else ('after %s' % date),\r\n    431                 instructions)\r\n--> 432       return func(*args, **kwargs)\r\n    433     return tf_decorator.make_decorator(func, new_func, 'deprecated',\r\n    434                                        _add_deprecated_arg_notice_to_docstring(\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\r\n    522       hooks.append(basic_session_run_hooks.StopAtStepHook(steps, max_steps))\r\n    523 \r\n--> 524     loss = self._train_model(input_fn=input_fn, hooks=hooks)\r\n    525     logging.info('Loss for final step: %s.', loss)\r\n    526     return self\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _train_model(self, input_fn, hooks)\r\n   1039       self._check_inputs(features, labels)\r\n   1040       training_util._get_or_create_global_step_read()  # pylint: disable=protected-access\r\n-> 1041       model_fn_ops = self._get_train_ops(features, labels)\r\n   1042       ops.add_to_collection(ops.GraphKeys.LOSSES, model_fn_ops.loss)\r\n   1043       all_hooks.extend(hooks)\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _get_train_ops(self, features, labels)\r\n   1262       `ModelFnOps` object.\r\n   1263     \"\"\"\r\n-> 1264     return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\r\n   1265 \r\n   1266   def _get_eval_ops(self, features, labels, metrics):\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _call_model_fn(self, features, labels, mode, metrics, config)\r\n   1225     if 'model_dir' in model_fn_args:\r\n   1226       kwargs['model_dir'] = self.model_dir\r\n-> 1227     model_fn_results = self._model_fn(features, labels, **kwargs)\r\n   1228 \r\n   1229     if isinstance(model_fn_results, model_fn_lib.ModelFnOps):\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/client/random_forest.py in _model_fn(features, labels, mode)\r\n    169 \r\n    170     logits, tree_paths, regression_variance = graph_builder.inference_graph(\r\n--> 171         features)\r\n    172 \r\n    173     summary.scalar('average_tree_size', graph_builder.average_size())\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py in inference_graph(self, input_data, **inference_args)\r\n    512             data_spec,\r\n    513             sparse_features=processed_sparse_features,\r\n--> 514             **inference_args)\r\n    515         probabilities.append(probs)\r\n    516         paths.append(path)\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/tensor_forest.py in inference_graph(self, input_data, data_spec, sparse_features)\r\n    686         sparse_shape,\r\n    687         input_spec=data_spec.SerializeToString(),\r\n--> 688         params=self.params.serialized_params_proto)\r\n    689 \r\n    690   def size(self):\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/tensor_forest/python/ops/gen_model_ops.py in tree_predictions_v4(tree_handle, input_data, sparse_input_indices, sparse_input_values, sparse_input_shape, input_spec, params, name)\r\n    467         sparse_input_values=sparse_input_values,\r\n    468         sparse_input_shape=sparse_input_shape, input_spec=input_spec,\r\n--> 469         params=params, name=name)\r\n    470     _result = _op.outputs[:]\r\n    471     _inputs_flat = _op.inputs\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/framework/op_def_library.py in _apply_op_helper(self, op_type_name, name, **keywords)\r\n    531             if input_arg.type != types_pb2.DT_INVALID:\r\n    532               raise TypeError(\"%s expected type of %s.\" %\r\n--> 533                               (prefix, dtypes.as_dtype(input_arg.type).name))\r\n    534             else:\r\n    535               # Update the maps with the default, if needed.\r\n\r\nTypeError: Input 'input_data' of 'TreePredictionsV4' Op has type float64 that does not match expected type of float32.\r\n```\r\nMy assumption was that i have to set the number of features to the number of all the features (i.e. using all features instead of a subset of the features). But i still get the same error as above.\r\n\r\nI tried to look at the source code directly but could not really understood where was the issue. A similar issue is being discuss on github here.\r\n\r\nAnother attempt was converting the input into float32.\r\n\r\n`regressor.fit(x=X_train.astype(\"float32\"), y=y_train.astype(\"float32\"))`\r\n\r\nHowever, i still got the same error as above. Then i tried using `tf.cast`\r\n\r\n```\r\nX_train_cast = cast(X_train, float32)\r\ny_train_cast = cast(y_train, float32)\r\nregressor.fit(x=X_train_cast, y=y_train_cast)\r\n```\r\nBut i got a different error saying\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-19-89e4fa057afb> in <module>()\r\n      2 X_train_cast = cast(X_train, float32)\r\n      3 y_train_cast = cast(y_train, float32)\r\n----> 4 regressor.fit(x=X_train_cast, y=y_train_cast)\r\n      5 \r\n      6 #regressor.score()\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\r\n    430                 'in a future version' if date is None else ('after %s' % date),\r\n    431                 instructions)\r\n--> 432       return func(*args, **kwargs)\r\n    433     return tf_decorator.make_decorator(func, new_func, 'deprecated',\r\n    434                                        _add_deprecated_arg_notice_to_docstring(\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\r\n    504     if (steps is not None) and (max_steps is not None):\r\n    505       raise ValueError('Can not provide both steps and max_steps.')\r\n--> 506     _verify_input_args(x, y, input_fn, None, batch_size)\r\n    507     if x is not None:\r\n    508       SKCompat(self).fit(x, y, batch_size, steps, max_steps, monitors)\r\n\r\n~/Desktop/88sparses/recommendation/recom/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _verify_input_args(x, y, input_fn, feed_fn, batch_size)\r\n    102 \r\n    103     if tensor_util.is_tensor(x) or y is not None and tensor_util.is_tensor(y):\r\n--> 104       raise ValueError('Inputs cannot be tensors. Please provide input_fn.')\r\n    105 \r\n    106     if feed_fn is not None:\r\n\r\nValueError: Inputs cannot be tensors. Please provide input_fn.\r\n```\r\nI was wondering if there was something missing in my implementation? Thanks in advance."}