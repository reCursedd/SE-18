{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8430", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8430/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8430/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8430/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8430", "id": 214362114, "node_id": "MDU6SXNzdWUyMTQzNjIxMTQ=", "number": 8430, "title": "Exif Orientation support tf.image.decode_jpeg()", "user": {"login": "tsomeq", "id": 187612, "node_id": "MDQ6VXNlcjE4NzYxMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/187612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsomeq", "html_url": "https://github.com/tsomeq", "followers_url": "https://api.github.com/users/tsomeq/followers", "following_url": "https://api.github.com/users/tsomeq/following{/other_user}", "gists_url": "https://api.github.com/users/tsomeq/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsomeq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsomeq/subscriptions", "organizations_url": "https://api.github.com/users/tsomeq/orgs", "repos_url": "https://api.github.com/users/tsomeq/repos", "events_url": "https://api.github.com/users/tsomeq/events{/privacy}", "received_events_url": "https://api.github.com/users/tsomeq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-03-15T11:35:27Z", "updated_at": "2017-04-26T20:42:58Z", "closed_at": "2017-03-17T00:17:32Z", "author_association": "NONE", "body_html": "<p>Hi.<br>\nI have large amounts of JPEG files uploaded by users on our service .<br>\nThey use mainly smartphone camera, so most files contain EXIF orientation metadata.</p>\n<p>It would seem that the <code>tf.image.decode_jpeg()</code> ignores this information,<br>\nSo I cannot build pipeline using pure tensor operation.<br>\nI thought it is not better to writing custom decoder depending external libraries, considering complying thread safety and future compatibility.</p>\n<p>My Pipeline code is like below:</p>\n<div class=\"highlight highlight-source-python\"><pre>filename_queue <span class=\"pl-k\">=</span> tf.train.string_input_producer(files)\nreader <span class=\"pl-k\">=</span> tf.WholeFileReader()\nkey, supplyContent <span class=\"pl-k\">=</span> reader.read(filename_queue)\ndecoding <span class=\"pl-k\">=</span> tf.image.decode_jpeg(supplyContent, <span class=\"pl-v\">channels</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>  source image may have orientation but dropped </span>\nresizing <span class=\"pl-k\">=</span> tf.image.resize_images(decoding, (<span class=\"pl-c1\">IMAGE_SIZE</span>, <span class=\"pl-c1\">IMAGE_SIZE</span>))\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span></pre></div>\n<p>Transformation of image can be done with simple tensor op, since tf.image has many convenience methods.<br>\nHow about adding support for these meta informations ?</p>", "body_text": "Hi.\nI have large amounts of JPEG files uploaded by users on our service .\nThey use mainly smartphone camera, so most files contain EXIF orientation metadata.\nIt would seem that the tf.image.decode_jpeg() ignores this information,\nSo I cannot build pipeline using pure tensor operation.\nI thought it is not better to writing custom decoder depending external libraries, considering complying thread safety and future compatibility.\nMy Pipeline code is like below:\nfilename_queue = tf.train.string_input_producer(files)\nreader = tf.WholeFileReader()\nkey, supplyContent = reader.read(filename_queue)\ndecoding = tf.image.decode_jpeg(supplyContent, channels=3)\n#  source image may have orientation but dropped \nresizing = tf.image.resize_images(decoding, (IMAGE_SIZE, IMAGE_SIZE))\n# ...\nTransformation of image can be done with simple tensor op, since tf.image has many convenience methods.\nHow about adding support for these meta informations ?", "body": "Hi.\r\nI have large amounts of JPEG files uploaded by users on our service .\r\nThey use mainly smartphone camera, so most files contain EXIF orientation metadata.\r\n\r\nIt would seem that the `tf.image.decode_jpeg()` ignores this information,\r\nSo I cannot build pipeline using pure tensor operation.\r\nI thought it is not better to writing custom decoder depending external libraries, considering complying thread safety and future compatibility.\r\n\r\nMy Pipeline code is like below:\r\n\r\n```python\r\nfilename_queue = tf.train.string_input_producer(files)\r\nreader = tf.WholeFileReader()\r\nkey, supplyContent = reader.read(filename_queue)\r\ndecoding = tf.image.decode_jpeg(supplyContent, channels=3)\r\n#  source image may have orientation but dropped \r\nresizing = tf.image.resize_images(decoding, (IMAGE_SIZE, IMAGE_SIZE))\r\n# ...\r\n```\r\n\r\nTransformation of image can be done with simple tensor op, since tf.image has many convenience methods.\r\nHow about adding support for these meta informations ?\r\n\r\n\r\n"}