{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/412771883", "html_url": "https://github.com/tensorflow/tensorflow/issues/12071#issuecomment-412771883", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12071", "id": 412771883, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjc3MTg4Mw==", "user": {"login": "gsutanto", "id": 7176092, "node_id": "MDQ6VXNlcjcxNzYwOTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/7176092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gsutanto", "html_url": "https://github.com/gsutanto", "followers_url": "https://api.github.com/users/gsutanto/followers", "following_url": "https://api.github.com/users/gsutanto/following{/other_user}", "gists_url": "https://api.github.com/users/gsutanto/gists{/gist_id}", "starred_url": "https://api.github.com/users/gsutanto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gsutanto/subscriptions", "organizations_url": "https://api.github.com/users/gsutanto/orgs", "repos_url": "https://api.github.com/users/gsutanto/repos", "events_url": "https://api.github.com/users/gsutanto/events{/privacy}", "received_events_url": "https://api.github.com/users/gsutanto/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-14T06:48:36Z", "updated_at": "2018-08-14T06:48:36Z", "author_association": "NONE", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> ,<br>\nHere's the problem:</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\nX = tf.placeholder(tf.float32, shape=(4,None))\nZ = tf.norm(X)\nvar_grad = tf.gradients(Z, [X])\n\nwith tf.Session() as sess:\n    X_ = np.array([\n        [0],\n        [0],\n        [0],\n        [0]\n    ], dtype=np.float32)\n    \n    [Z_val, Z_grad] = sess.run([Z, var_grad], feed_dict={X: X_})\n    \n    print \"Z_val = \", Z_val\n    print \"Z_grad = \", Z_grad\n</code></pre>\n<p>It will give output:</p>\n<blockquote>\n<p>Z_val =  0.0<br>\nZ_grad =  [array([[nan],<br>\n[nan],<br>\n[nan],<br>\n[nan]], dtype=float32)]</p>\n</blockquote>\n<p>Using your suggestion:</p>\n<pre><code>from tensorflow.python.framework import function\nimport numpy as np\nimport tensorflow as tf\n\n@function.Defun(tf.float32, tf.float32)\ndef norm_grad(x, dy):\n    return dy*(x/(tf.norm(x, ord=2)))\n\n@function.Defun(tf.float32, grad_func=norm_grad)\ndef norm(x):\n    return tf.norm(x, ord=2)\n\nX = tf.placeholder(tf.float32, shape=(4,None))\nZ = norm(X)\nvar_grad = tf.gradients(Z, [X])\n\nwith tf.Session() as sess:\n    X_ = np.array([\n        [0],\n        [0],\n        [0],\n        [0]\n    ], dtype=np.float32)\n    \n    [Z_val, Z_grad] = sess.run([Z, var_grad], feed_dict={X: X_})\n    \n    print \"Z_val = \", Z_val\n    print \"Z_grad = \", Z_grad\n</code></pre>\n<p>I still get:</p>\n<blockquote>\n<p>Z_val =  0.0<br>\nZ_grad =  [array([[nan],<br>\n[nan],<br>\n[nan],<br>\n[nan]], dtype=float32)]</p>\n</blockquote>\n<p>So here's my simple modification that seems to work (just by adding a small epsilon to the gradient's denominator):</p>\n<pre><code>from tensorflow.python.framework import function\nimport numpy as np\nimport tensorflow as tf\n\n@function.Defun(tf.float32, tf.float32)\ndef norm_grad(x, dy):\n    return dy*(x/(tf.norm(x, ord=2)+1.0e-19))\n\n@function.Defun(tf.float32, grad_func=norm_grad)\ndef norm(x):\n    return tf.norm(x, ord=2)\n\nX = tf.placeholder(tf.float32, shape=(4,None))\nZ = norm(X)\nvar_grad = tf.gradients(Z, [X])\n\nwith tf.Session() as sess:\n    X_ = np.array([\n        [0],\n        [0],\n        [0],\n        [0]\n    ], dtype=np.float32)\n    \n    [Z_val, Z_grad] = sess.run([Z, var_grad], feed_dict={X: X_})\n    \n    print \"Z_val = \", Z_val\n    print \"Z_grad = \", Z_grad\n</code></pre>\n<p>This will gives:</p>\n<blockquote>\n<p>Z_val =  0.0<br>\nZ_grad =  [array([[0.],<br>\n[0.],<br>\n[0.],<br>\n[0.]], dtype=float32)]</p>\n</blockquote>", "body_text": "Hi @yaroslavvb ,\nHere's the problem:\nimport numpy as np\nimport tensorflow as tf\n\nX = tf.placeholder(tf.float32, shape=(4,None))\nZ = tf.norm(X)\nvar_grad = tf.gradients(Z, [X])\n\nwith tf.Session() as sess:\n    X_ = np.array([\n        [0],\n        [0],\n        [0],\n        [0]\n    ], dtype=np.float32)\n    \n    [Z_val, Z_grad] = sess.run([Z, var_grad], feed_dict={X: X_})\n    \n    print \"Z_val = \", Z_val\n    print \"Z_grad = \", Z_grad\n\nIt will give output:\n\nZ_val =  0.0\nZ_grad =  [array([[nan],\n[nan],\n[nan],\n[nan]], dtype=float32)]\n\nUsing your suggestion:\nfrom tensorflow.python.framework import function\nimport numpy as np\nimport tensorflow as tf\n\n@function.Defun(tf.float32, tf.float32)\ndef norm_grad(x, dy):\n    return dy*(x/(tf.norm(x, ord=2)))\n\n@function.Defun(tf.float32, grad_func=norm_grad)\ndef norm(x):\n    return tf.norm(x, ord=2)\n\nX = tf.placeholder(tf.float32, shape=(4,None))\nZ = norm(X)\nvar_grad = tf.gradients(Z, [X])\n\nwith tf.Session() as sess:\n    X_ = np.array([\n        [0],\n        [0],\n        [0],\n        [0]\n    ], dtype=np.float32)\n    \n    [Z_val, Z_grad] = sess.run([Z, var_grad], feed_dict={X: X_})\n    \n    print \"Z_val = \", Z_val\n    print \"Z_grad = \", Z_grad\n\nI still get:\n\nZ_val =  0.0\nZ_grad =  [array([[nan],\n[nan],\n[nan],\n[nan]], dtype=float32)]\n\nSo here's my simple modification that seems to work (just by adding a small epsilon to the gradient's denominator):\nfrom tensorflow.python.framework import function\nimport numpy as np\nimport tensorflow as tf\n\n@function.Defun(tf.float32, tf.float32)\ndef norm_grad(x, dy):\n    return dy*(x/(tf.norm(x, ord=2)+1.0e-19))\n\n@function.Defun(tf.float32, grad_func=norm_grad)\ndef norm(x):\n    return tf.norm(x, ord=2)\n\nX = tf.placeholder(tf.float32, shape=(4,None))\nZ = norm(X)\nvar_grad = tf.gradients(Z, [X])\n\nwith tf.Session() as sess:\n    X_ = np.array([\n        [0],\n        [0],\n        [0],\n        [0]\n    ], dtype=np.float32)\n    \n    [Z_val, Z_grad] = sess.run([Z, var_grad], feed_dict={X: X_})\n    \n    print \"Z_val = \", Z_val\n    print \"Z_grad = \", Z_grad\n\nThis will gives:\n\nZ_val =  0.0\nZ_grad =  [array([[0.],\n[0.],\n[0.],\n[0.]], dtype=float32)]", "body": "Hi @yaroslavvb ,\r\nHere's the problem:\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nX = tf.placeholder(tf.float32, shape=(4,None))\r\nZ = tf.norm(X)\r\nvar_grad = tf.gradients(Z, [X])\r\n\r\nwith tf.Session() as sess:\r\n    X_ = np.array([\r\n        [0],\r\n        [0],\r\n        [0],\r\n        [0]\r\n    ], dtype=np.float32)\r\n    \r\n    [Z_val, Z_grad] = sess.run([Z, var_grad], feed_dict={X: X_})\r\n    \r\n    print \"Z_val = \", Z_val\r\n    print \"Z_grad = \", Z_grad\r\n```\r\nIt will give output:\r\n\r\n> Z_val =  0.0\r\n> Z_grad =  [array([[nan],\r\n>        [nan],\r\n>        [nan],\r\n>        [nan]], dtype=float32)]\r\n\r\nUsing your suggestion:\r\n```\r\nfrom tensorflow.python.framework import function\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n@function.Defun(tf.float32, tf.float32)\r\ndef norm_grad(x, dy):\r\n    return dy*(x/(tf.norm(x, ord=2)))\r\n\r\n@function.Defun(tf.float32, grad_func=norm_grad)\r\ndef norm(x):\r\n    return tf.norm(x, ord=2)\r\n\r\nX = tf.placeholder(tf.float32, shape=(4,None))\r\nZ = norm(X)\r\nvar_grad = tf.gradients(Z, [X])\r\n\r\nwith tf.Session() as sess:\r\n    X_ = np.array([\r\n        [0],\r\n        [0],\r\n        [0],\r\n        [0]\r\n    ], dtype=np.float32)\r\n    \r\n    [Z_val, Z_grad] = sess.run([Z, var_grad], feed_dict={X: X_})\r\n    \r\n    print \"Z_val = \", Z_val\r\n    print \"Z_grad = \", Z_grad\r\n```\r\nI still get:\r\n\r\n> Z_val =  0.0\r\n> Z_grad =  [array([[nan],\r\n>        [nan],\r\n>        [nan],\r\n>        [nan]], dtype=float32)]\r\n\r\nSo here's my simple modification that seems to work (just by adding a small epsilon to the gradient's denominator):\r\n```\r\nfrom tensorflow.python.framework import function\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n@function.Defun(tf.float32, tf.float32)\r\ndef norm_grad(x, dy):\r\n    return dy*(x/(tf.norm(x, ord=2)+1.0e-19))\r\n\r\n@function.Defun(tf.float32, grad_func=norm_grad)\r\ndef norm(x):\r\n    return tf.norm(x, ord=2)\r\n\r\nX = tf.placeholder(tf.float32, shape=(4,None))\r\nZ = norm(X)\r\nvar_grad = tf.gradients(Z, [X])\r\n\r\nwith tf.Session() as sess:\r\n    X_ = np.array([\r\n        [0],\r\n        [0],\r\n        [0],\r\n        [0]\r\n    ], dtype=np.float32)\r\n    \r\n    [Z_val, Z_grad] = sess.run([Z, var_grad], feed_dict={X: X_})\r\n    \r\n    print \"Z_val = \", Z_val\r\n    print \"Z_grad = \", Z_grad\r\n```\r\nThis will gives:\r\n\r\n> Z_val =  0.0\r\n> Z_grad =  [array([[0.],\r\n>        [0.],\r\n>        [0.],\r\n>        [0.]], dtype=float32)]"}