{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/320983979", "html_url": "https://github.com/tensorflow/tensorflow/issues/12071#issuecomment-320983979", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12071", "id": 320983979, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDk4Mzk3OQ==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-08T15:02:53Z", "updated_at": "2017-08-08T15:03:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Yes, I agree that this should be fixed, the question is how. The bug with tf.select-gradient-caused NaN's linked above is still open a year later and it's a similar problem.</p>\n<p>Python-specific solution would be to replace norm with a fused version like above, and corresponding gradient. Fused versions are not really preferred but are done if it's important enough, like was done for <code>tf.fused_batch_norm</code>.</p>\n<p>More general solution is to have a numerically stabilizing transformation which simplifies expressions that lead to \"0/0\" or \"infinity*0\" to behave more like their limits. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6969686\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/benoitsteiner\">@benoitsteiner</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=161459\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/petewarden\">@petewarden</a> -- do you know if there's anything on numerically stabilizing graph transformations on the roadmap?</p>", "body_text": "Yes, I agree that this should be fixed, the question is how. The bug with tf.select-gradient-caused NaN's linked above is still open a year later and it's a similar problem.\nPython-specific solution would be to replace norm with a fused version like above, and corresponding gradient. Fused versions are not really preferred but are done if it's important enough, like was done for tf.fused_batch_norm.\nMore general solution is to have a numerically stabilizing transformation which simplifies expressions that lead to \"0/0\" or \"infinity*0\" to behave more like their limits. @benoitsteiner @petewarden -- do you know if there's anything on numerically stabilizing graph transformations on the roadmap?", "body": "Yes, I agree that this should be fixed, the question is how. The bug with tf.select-gradient-caused NaN's linked above is still open a year later and it's a similar problem.\r\n\r\nPython-specific solution would be to replace norm with a fused version like above, and corresponding gradient. Fused versions are not really preferred but are done if it's important enough, like was done for `tf.fused_batch_norm`.\r\n\r\nMore general solution is to have a numerically stabilizing transformation which simplifies expressions that lead to \"0/0\" or \"infinity*0\" to behave more like their limits. @benoitsteiner @petewarden -- do you know if there's anything on numerically stabilizing graph transformations on the roadmap?"}