{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12071", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12071/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12071/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12071/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12071", "id": 248329188, "node_id": "MDU6SXNzdWUyNDgzMjkxODg=", "number": 12071, "title": "Numerical instability of gradient calculation of tf.norm (nan at 0, inf for small values) ", "user": {"login": "oduerr", "id": 4604020, "node_id": "MDQ6VXNlcjQ2MDQwMjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4604020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oduerr", "html_url": "https://github.com/oduerr", "followers_url": "https://api.github.com/users/oduerr/followers", "following_url": "https://api.github.com/users/oduerr/following{/other_user}", "gists_url": "https://api.github.com/users/oduerr/gists{/gist_id}", "starred_url": "https://api.github.com/users/oduerr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oduerr/subscriptions", "organizations_url": "https://api.github.com/users/oduerr/orgs", "repos_url": "https://api.github.com/users/oduerr/repos", "events_url": "https://api.github.com/users/oduerr/events{/privacy}", "received_events_url": "https://api.github.com/users/oduerr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 27, "created_at": "2017-08-07T07:32:05Z", "updated_at": "2018-09-20T07:29:43Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes see below</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Mac OS X 10.11.6</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: #v1.2.0-5-g435cdfc    1.2.1</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: On CPU</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>: tf.norm at [0,0] see below for code</li>\n</ul>\n<pre><code>import numpy as np\nimport tensorflow as tf\nprint(tf.GIT_VERSION, \"  \", tf.VERSION) #v1.2.0-5-g435cdfc    1.2.1\n\nX = tf.placeholder(tf.float32, shape=(4,None))\nZ = tf.norm(X, ord='euclidean', axis=1, name='logit')\nvar_grad = tf.gradients(Z, [X])\n\nwith tf.Session() as sess:\n    X_ = np.array([\n        [1],  # Grad OK\n        [0],  # Grad NaN\n        [1e-16],  # Grad OK\n        [1e-19] #Grad Inf\n    ], dtype=np.float32)\n    sess.run(tf.global_variables_initializer())\n    print(sess.run((Z, var_grad), feed_dict={X: X_}))\n    # Result:\n    #(array([9.99999940e-01, 0.00000000e+00, 9.99999951e-17,\n    #        0.00000000e+00], dtype=float32), [array([[1.00000012],\n    #                                                 [nan],\n    #                                                 [1.],\n    #                                                 [inf]], dtype=float32)])\n</code></pre>\n<h3>Describe the problem</h3>\n<p><code>nan</code> is calculated for the gradient of <code>tf.norm</code> at zero values. For extremely small values <code>inf</code> is calculated. Note that the exact result should be 1 in all cases above.</p>\n<p>Above is a minimal example to reproduce it. The problem occurred in a real world scenario, when implementing a custom loss function (the entropy in <a href=\"https://arxiv.org/abs/1611.01449\" rel=\"nofollow\">https://arxiv.org/abs/1611.01449</a>) and two embeddings where too close to each other (distance practically 0).</p>\n<h3>Source code / logs</h3>\n<p>See above</p>\n<h4>Output of logfile</h4>\n<pre><code>== cat /etc/issue ===============================================\nDarwin Olivers-MBP-5.fritz.box 15.6.0 Darwin Kernel Version 15.6.0: Tue Apr 11 16:00:51 PDT 2017; root:xnu-3248.60.11.5.3~1/RELEASE_X86_64 x86_64\nMac OS X 10.11.6\n\n== are we in docker =========================================  echo == are we in docker ====================================num echo == are we in docker =========================================  ec==  echo == are we in docker =======================================c++ --version\n\n== uname -a =====================================================\nDarwin Olivers-MBP-5.fritz.box 15.6.0 Darwin Kernel Version 15.6.0: Tue Apr 11 16:00:51 PDT 2017; root:xnu-3248.60.11.5.3~1/RELEASE_X86_64 x86_64\n\n== check pips ===================================================\nnumpy (1.13.0)\nprotobuf (3.3.0)\ntensorflow (1.2.1)\n\n== check for virtualenv ==============  echo == check for virtualenv =====on_b echo == check fo sys  echo == check for virtualenv ============== echo == check for virtualenv ============================================\n\n== cat /etc/issue ===============================================\nDarwin Olivers-MBP-5.fritz.box 15.6.0 Darwin Kernel Version 15.6.0: Tue Apr 11 16:00:51 PDT 2017; root:xnu-3248.60.11.5.3~1/RELEASE_X86_64 x86_64\nMac OS X 10.11.6\n\n== are we in docker =============================================\nNo\n\n== compiler =====================================================\nApple LLVM version 7.3.0 (clang-703.0.31)\nTarget: x86_64-apple-darwin15.6.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n\n== uname -a =====================================================\nDarwin Olivers-MBP-5.fritz.box 15.6.0 Darwin Kernel Version 15.6.0: Tue Apr 11 16:00:51 PDT 2017; root:xnu-3248.60.11.5.3~1/RELEASE_X86_64 x86_64\n\n== check pips ===================================================\nnumpy (1.13.0)\nprotobuf (3.3.0)\ntensorflow (1.2.1)\n\n== check for virtualenv =========================================\nTrue\n\n== tensorflow import ============================================\ntf.VERSION = 1.2.1\ntf.GIT_VERSION = v1.2.0-5-g435cdfc\ntf.COMPILER_VERSION = v1.2.0-5-g435cdfc\nSanity check: array([1], dtype=int32)\n\n== env ==========================================================\nLD_LIBRARY_PATH is unset\nDYLD_LIBRARY_PATH is unset\n\n== nvidia-smi ===================================================\ntf_env_collect.sh.txt: line 105: nvidia-smi: command not found\n\n== cuda libs  ===================================================\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes see below\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS X 10.11.6\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): #v1.2.0-5-g435cdfc    1.2.1\nPython version: 3.6\nBazel version (if compiling from source):\nCUDA/cuDNN version: On CPU\nGPU model and memory:\nExact command to reproduce: tf.norm at [0,0] see below for code\n\nimport numpy as np\nimport tensorflow as tf\nprint(tf.GIT_VERSION, \"  \", tf.VERSION) #v1.2.0-5-g435cdfc    1.2.1\n\nX = tf.placeholder(tf.float32, shape=(4,None))\nZ = tf.norm(X, ord='euclidean', axis=1, name='logit')\nvar_grad = tf.gradients(Z, [X])\n\nwith tf.Session() as sess:\n    X_ = np.array([\n        [1],  # Grad OK\n        [0],  # Grad NaN\n        [1e-16],  # Grad OK\n        [1e-19] #Grad Inf\n    ], dtype=np.float32)\n    sess.run(tf.global_variables_initializer())\n    print(sess.run((Z, var_grad), feed_dict={X: X_}))\n    # Result:\n    #(array([9.99999940e-01, 0.00000000e+00, 9.99999951e-17,\n    #        0.00000000e+00], dtype=float32), [array([[1.00000012],\n    #                                                 [nan],\n    #                                                 [1.],\n    #                                                 [inf]], dtype=float32)])\n\nDescribe the problem\nnan is calculated for the gradient of tf.norm at zero values. For extremely small values inf is calculated. Note that the exact result should be 1 in all cases above.\nAbove is a minimal example to reproduce it. The problem occurred in a real world scenario, when implementing a custom loss function (the entropy in https://arxiv.org/abs/1611.01449) and two embeddings where too close to each other (distance practically 0).\nSource code / logs\nSee above\nOutput of logfile\n== cat /etc/issue ===============================================\nDarwin Olivers-MBP-5.fritz.box 15.6.0 Darwin Kernel Version 15.6.0: Tue Apr 11 16:00:51 PDT 2017; root:xnu-3248.60.11.5.3~1/RELEASE_X86_64 x86_64\nMac OS X 10.11.6\n\n== are we in docker =========================================  echo == are we in docker ====================================num echo == are we in docker =========================================  ec==  echo == are we in docker =======================================c++ --version\n\n== uname -a =====================================================\nDarwin Olivers-MBP-5.fritz.box 15.6.0 Darwin Kernel Version 15.6.0: Tue Apr 11 16:00:51 PDT 2017; root:xnu-3248.60.11.5.3~1/RELEASE_X86_64 x86_64\n\n== check pips ===================================================\nnumpy (1.13.0)\nprotobuf (3.3.0)\ntensorflow (1.2.1)\n\n== check for virtualenv ==============  echo == check for virtualenv =====on_b echo == check fo sys  echo == check for virtualenv ============== echo == check for virtualenv ============================================\n\n== cat /etc/issue ===============================================\nDarwin Olivers-MBP-5.fritz.box 15.6.0 Darwin Kernel Version 15.6.0: Tue Apr 11 16:00:51 PDT 2017; root:xnu-3248.60.11.5.3~1/RELEASE_X86_64 x86_64\nMac OS X 10.11.6\n\n== are we in docker =============================================\nNo\n\n== compiler =====================================================\nApple LLVM version 7.3.0 (clang-703.0.31)\nTarget: x86_64-apple-darwin15.6.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n\n== uname -a =====================================================\nDarwin Olivers-MBP-5.fritz.box 15.6.0 Darwin Kernel Version 15.6.0: Tue Apr 11 16:00:51 PDT 2017; root:xnu-3248.60.11.5.3~1/RELEASE_X86_64 x86_64\n\n== check pips ===================================================\nnumpy (1.13.0)\nprotobuf (3.3.0)\ntensorflow (1.2.1)\n\n== check for virtualenv =========================================\nTrue\n\n== tensorflow import ============================================\ntf.VERSION = 1.2.1\ntf.GIT_VERSION = v1.2.0-5-g435cdfc\ntf.COMPILER_VERSION = v1.2.0-5-g435cdfc\nSanity check: array([1], dtype=int32)\n\n== env ==========================================================\nLD_LIBRARY_PATH is unset\nDYLD_LIBRARY_PATH is unset\n\n== nvidia-smi ===================================================\ntf_env_collect.sh.txt: line 105: nvidia-smi: command not found\n\n== cuda libs  ===================================================", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes see below\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Mac OS X 10.11.6\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: #v1.2.0-5-g435cdfc    1.2.1\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: On CPU\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**: tf.norm at [0,0] see below for code\r\n\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\nprint(tf.GIT_VERSION, \"  \", tf.VERSION) #v1.2.0-5-g435cdfc    1.2.1\r\n\r\nX = tf.placeholder(tf.float32, shape=(4,None))\r\nZ = tf.norm(X, ord='euclidean', axis=1, name='logit')\r\nvar_grad = tf.gradients(Z, [X])\r\n\r\nwith tf.Session() as sess:\r\n    X_ = np.array([\r\n        [1],  # Grad OK\r\n        [0],  # Grad NaN\r\n        [1e-16],  # Grad OK\r\n        [1e-19] #Grad Inf\r\n    ], dtype=np.float32)\r\n    sess.run(tf.global_variables_initializer())\r\n    print(sess.run((Z, var_grad), feed_dict={X: X_}))\r\n    # Result:\r\n    #(array([9.99999940e-01, 0.00000000e+00, 9.99999951e-17,\r\n    #        0.00000000e+00], dtype=float32), [array([[1.00000012],\r\n    #                                                 [nan],\r\n    #                                                 [1.],\r\n    #                                                 [inf]], dtype=float32)])\r\n```\r\n\r\n### Describe the problem\r\n`nan` is calculated for the gradient of `tf.norm` at zero values. For extremely small values `inf` is calculated. Note that the exact result should be 1 in all cases above. \r\n\r\nAbove is a minimal example to reproduce it. The problem occurred in a real world scenario, when implementing a custom loss function (the entropy in https://arxiv.org/abs/1611.01449) and two embeddings where too close to each other (distance practically 0).\r\n\r\n### Source code / logs\r\nSee above \r\n\r\n#### Output of logfile\r\n```\r\n== cat /etc/issue ===============================================\r\nDarwin Olivers-MBP-5.fritz.box 15.6.0 Darwin Kernel Version 15.6.0: Tue Apr 11 16:00:51 PDT 2017; root:xnu-3248.60.11.5.3~1/RELEASE_X86_64 x86_64\r\nMac OS X 10.11.6\r\n\r\n== are we in docker =========================================  echo == are we in docker ====================================num echo == are we in docker =========================================  ec==  echo == are we in docker =======================================c++ --version\r\n\r\n== uname -a =====================================================\r\nDarwin Olivers-MBP-5.fritz.box 15.6.0 Darwin Kernel Version 15.6.0: Tue Apr 11 16:00:51 PDT 2017; root:xnu-3248.60.11.5.3~1/RELEASE_X86_64 x86_64\r\n\r\n== check pips ===================================================\r\nnumpy (1.13.0)\r\nprotobuf (3.3.0)\r\ntensorflow (1.2.1)\r\n\r\n== check for virtualenv ==============  echo == check for virtualenv =====on_b echo == check fo sys  echo == check for virtualenv ============== echo == check for virtualenv ============================================\r\n\r\n== cat /etc/issue ===============================================\r\nDarwin Olivers-MBP-5.fritz.box 15.6.0 Darwin Kernel Version 15.6.0: Tue Apr 11 16:00:51 PDT 2017; root:xnu-3248.60.11.5.3~1/RELEASE_X86_64 x86_64\r\nMac OS X 10.11.6\r\n\r\n== are we in docker =============================================\r\nNo\r\n\r\n== compiler =====================================================\r\nApple LLVM version 7.3.0 (clang-703.0.31)\r\nTarget: x86_64-apple-darwin15.6.0\r\nThread model: posix\r\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\r\n\r\n== uname -a =====================================================\r\nDarwin Olivers-MBP-5.fritz.box 15.6.0 Darwin Kernel Version 15.6.0: Tue Apr 11 16:00:51 PDT 2017; root:xnu-3248.60.11.5.3~1/RELEASE_X86_64 x86_64\r\n\r\n== check pips ===================================================\r\nnumpy (1.13.0)\r\nprotobuf (3.3.0)\r\ntensorflow (1.2.1)\r\n\r\n== check for virtualenv =========================================\r\nTrue\r\n\r\n== tensorflow import ============================================\r\ntf.VERSION = 1.2.1\r\ntf.GIT_VERSION = v1.2.0-5-g435cdfc\r\ntf.COMPILER_VERSION = v1.2.0-5-g435cdfc\r\nSanity check: array([1], dtype=int32)\r\n\r\n== env ==========================================================\r\nLD_LIBRARY_PATH is unset\r\nDYLD_LIBRARY_PATH is unset\r\n\r\n== nvidia-smi ===================================================\r\ntf_env_collect.sh.txt: line 105: nvidia-smi: command not found\r\n\r\n== cuda libs  ===================================================\r\n```"}