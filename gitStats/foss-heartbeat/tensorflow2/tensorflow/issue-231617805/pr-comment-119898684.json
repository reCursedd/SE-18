{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/119898684", "pull_request_review_id": 41822373, "id": 119898684, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTg5ODY4NA==", "diff_hunk": "@@ -211,9 +211,11 @@ class ComputationBuilder {\n   //\n   // Note that \"limit\" means up-to-but-not-including; i.e. [start, limit) in 1D\n   // range notation.\n+  // The stride parameter determines the stride over the slice", "path": "tensorflow/compiler/xla/client/computation_builder.h", "position": 4, "original_position": 4, "commit_id": "234d0f2861c9dc992b314821b7f38e5c998a3a4a", "original_commit_id": "3bef9209e61c2f59f291e78f12cafd8d8dc1a1e5", "user": {"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}, "body": "I talked about it with some folks and the consensus seemed to be to prefer positive strides only for now. The reasoning is:\r\na) we want to keep XLA minimal where possible, since it makes life easier for backend authors --- fewer cases to implement,\r\nb) it doesn't add any expressive power, since you can use Rev() to reverse dimensions, and it doesn't add any efficiency because we can fuse Rev() and Slice().\r\nc) it's easier to add features later rather than to remove them, so we can always add support for negative strides if we think of a good reason why.\r\n\r\n", "created_at": "2017-06-02T16:28:45Z", "updated_at": "2017-06-14T13:26:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10217#discussion_r119898684", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10217", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/119898684"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10217#discussion_r119898684"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10217"}}, "body_html": "<p>I talked about it with some folks and the consensus seemed to be to prefer positive strides only for now. The reasoning is:<br>\na) we want to keep XLA minimal where possible, since it makes life easier for backend authors --- fewer cases to implement,<br>\nb) it doesn't add any expressive power, since you can use Rev() to reverse dimensions, and it doesn't add any efficiency because we can fuse Rev() and Slice().<br>\nc) it's easier to add features later rather than to remove them, so we can always add support for negative strides if we think of a good reason why.</p>", "body_text": "I talked about it with some folks and the consensus seemed to be to prefer positive strides only for now. The reasoning is:\na) we want to keep XLA minimal where possible, since it makes life easier for backend authors --- fewer cases to implement,\nb) it doesn't add any expressive power, since you can use Rev() to reverse dimensions, and it doesn't add any efficiency because we can fuse Rev() and Slice().\nc) it's easier to add features later rather than to remove them, so we can always add support for negative strides if we think of a good reason why.", "in_reply_to_id": 119180582}