{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/312987327", "html_url": "https://github.com/tensorflow/tensorflow/issues/10520#issuecomment-312987327", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10520", "id": 312987327, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjk4NzMyNw==", "user": {"login": "happyharrycn", "id": 1175400, "node_id": "MDQ6VXNlcjExNzU0MDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1175400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/happyharrycn", "html_url": "https://github.com/happyharrycn", "followers_url": "https://api.github.com/users/happyharrycn/followers", "following_url": "https://api.github.com/users/happyharrycn/following{/other_user}", "gists_url": "https://api.github.com/users/happyharrycn/gists{/gist_id}", "starred_url": "https://api.github.com/users/happyharrycn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/happyharrycn/subscriptions", "organizations_url": "https://api.github.com/users/happyharrycn/orgs", "repos_url": "https://api.github.com/users/happyharrycn/repos", "events_url": "https://api.github.com/users/happyharrycn/events{/privacy}", "received_events_url": "https://api.github.com/users/happyharrycn/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-05T03:21:59Z", "updated_at": "2017-07-05T03:26:36Z", "author_association": "NONE", "body_html": "<p>A similar error can be triggered by using conv3d and setting data_format to \"channel_first\". And here is the reason for them. For better efficiency, an input/output 5D tensor is reshaped into a 4D tensor (by chunking the third and the fourth dimension), and added to the bias. However, when the 5D tensor (or the output for deconv) has a non-determined batch size (None). The reshape operation will refuse to take the list as the shape parameter (since it can not be converted to a typed tensor). My workaround is to always set the first element to -1 when calling reshape (and when reshaping the tensor back to 5D). See the lines below.</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/convolutional.py#L174\">Conv3D with channel first data format</a><br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/convolutional.py#L1453\">Conv3D Transpose with channel first</a><br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/convolutional.py#L1458\">Conv3D Transpose with channel last</a></p>\n<p>I'd highly appreciate someone on the dev team can take a carefule look at Conv3D/Conv3D transpose layers. Right now, they are a bit problematic to use. For example, fused batch norm is not supported for 3D convolution (see issue <a href=\"https://github.com/tensorflow/tensorflow/issues/5694\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/5694/hovercard\">#5694</a>).</p>", "body_text": "A similar error can be triggered by using conv3d and setting data_format to \"channel_first\". And here is the reason for them. For better efficiency, an input/output 5D tensor is reshaped into a 4D tensor (by chunking the third and the fourth dimension), and added to the bias. However, when the 5D tensor (or the output for deconv) has a non-determined batch size (None). The reshape operation will refuse to take the list as the shape parameter (since it can not be converted to a typed tensor). My workaround is to always set the first element to -1 when calling reshape (and when reshaping the tensor back to 5D). See the lines below.\nConv3D with channel first data format\nConv3D Transpose with channel first\nConv3D Transpose with channel last\nI'd highly appreciate someone on the dev team can take a carefule look at Conv3D/Conv3D transpose layers. Right now, they are a bit problematic to use. For example, fused batch norm is not supported for 3D convolution (see issue #5694).", "body": "A similar error can be triggered by using conv3d and setting data_format to \"channel_first\". And here is the reason for them. For better efficiency, an input/output 5D tensor is reshaped into a 4D tensor (by chunking the third and the fourth dimension), and added to the bias. However, when the 5D tensor (or the output for deconv) has a non-determined batch size (None). The reshape operation will refuse to take the list as the shape parameter (since it can not be converted to a typed tensor). My workaround is to always set the first element to -1 when calling reshape (and when reshaping the tensor back to 5D). See the lines below.\r\n\r\n[Conv3D with channel first data format](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/convolutional.py#L174\r\n)\r\n[Conv3D Transpose with channel first](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/convolutional.py#L1453)\r\n[Conv3D Transpose with channel last](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/layers/convolutional.py#L1458\r\n)\r\n\r\nI'd highly appreciate someone on the dev team can take a carefule look at Conv3D/Conv3D transpose layers. Right now, they are a bit problematic to use. For example, fused batch norm is not supported for 3D convolution (see issue [#5694](https://github.com/tensorflow/tensorflow/issues/5694)).\r\n\r\n"}