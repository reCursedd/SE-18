{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10520", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10520/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10520/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10520/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10520", "id": 234405498, "node_id": "MDU6SXNzdWUyMzQ0MDU0OTg=", "number": 10520, "title": "tf.layers.conv3d_transpose() gives error", "user": {"login": "Warvito", "id": 4493399, "node_id": "MDQ6VXNlcjQ0OTMzOTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4493399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Warvito", "html_url": "https://github.com/Warvito", "followers_url": "https://api.github.com/users/Warvito/followers", "following_url": "https://api.github.com/users/Warvito/following{/other_user}", "gists_url": "https://api.github.com/users/Warvito/gists{/gist_id}", "starred_url": "https://api.github.com/users/Warvito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Warvito/subscriptions", "organizations_url": "https://api.github.com/users/Warvito/orgs", "repos_url": "https://api.github.com/users/Warvito/repos", "events_url": "https://api.github.com/users/Warvito/events{/privacy}", "received_events_url": "https://api.github.com/users/Warvito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2017-06-08T04:00:34Z", "updated_at": "2018-09-15T01:33:14Z", "closed_at": "2018-09-15T01:33:14Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nNo</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux Ubuntu 16.04.2 LTS (Xenial Xerus)</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n1.2.0-rc2</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\n8/5.1.10</li>\n<li><strong>GPU model and memory</strong>:<br>\nGeForce GTX 1080</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<pre><code>import tensorflow as tf\nx_3d = tf.placeholder(tf.float32,shape=[None,5,5,5,1])\nconv_t = tf.layers.conv3d_transpose(x_3d,20,[3,3,3])\n</code></pre>\n<h3>Describe the problem</h3>\n<p>I am getting a TypeError when I use a placeholder with batch size as None as inputs to the conv3d_transpose. This problem does not happen with the tf.layers.conv2d_transpose()</p>\n<h3>Source code / logs</h3>\n<pre><code>import tensorflow as tf\nx_2d = tf.placeholder(tf.float32,shape=[None,5,5,1])\nconv2d_t = tf.layers.conv2d_transpose(x_2d,20,[3,3])\nx_3d = tf.placeholder(tf.float32,shape=[None,5,5,5,1])\nconv_t = tf.layers.conv3d_transpose(x_3d,20,[3,3,3])\n</code></pre>\n<blockquote>\n<hr>\n<p>TypeError                                 Traceback (most recent call last)<br>\n in ()<br>\n4<br>\n5 x_3d = tf.placeholder(tf.float32,shape=[None,5,5,5,1])<br>\n----&gt; 6 conv_t = tf.layers.conv3d_transpose(x_3d,20,[3,3,3])</p>\n<p>/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/convolutional.pyc in conv3d_transpose(inputs, filters, kernel_size, strides, padding, data_format, activation, use_bias, kernel_initializer, bias_initializer, kernel_regularizer, bias_regularizer, activity_regularizer, trainable, name, reuse)<br>\n1538       _reuse=reuse,<br>\n1539       _scope=name)<br>\n-&gt; 1540   return layer.apply(inputs)<br>\n1541<br>\n1542</p>\n<p>/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.pyc in apply(self, inputs, *args, **kwargs)<br>\n490       Output tensor(s).<br>\n491     \"\"\"<br>\n--&gt; 492     return self.<strong>call</strong>(inputs, *args, **kwargs)<br>\n493<br>\n494   def _assert_input_compatibility(self, inputs):</p>\n<p>/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.pyc in <strong>call</strong>(self, inputs, *args, **kwargs)<br>\n439         # Check input assumptions set after layer building, e.g. input shape.<br>\n440         self._assert_input_compatibility(inputs)<br>\n--&gt; 441         outputs = self.call(inputs, *args, **kwargs)<br>\n442<br>\n443         # Apply activity regularization.</p>\n<p>/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/convolutional.pyc in call(self, inputs)<br>\n1456         outputs_4d = array_ops.reshape(outputs, [<br>\n1457             outputs_shape[0], outputs_shape[1] * outputs_shape[2],<br>\n-&gt; 1458             outputs_shape[3], outputs_shape[4]<br>\n1459         ])<br>\n1460       outputs_4d = nn.bias_add(</p>\n<p>/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_array_ops.pyc in reshape(tensor, shape, name)<br>\n2449   \"\"\"<br>\n2450   result = _op_def_lib.apply_op(\"Reshape\", tensor=tensor, shape=shape,<br>\n-&gt; 2451                                 name=name)<br>\n2452   return result<br>\n2453</p>\n<p>/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.pyc in apply_op(self, op_type_name, name, **keywords)<br>\n491           except TypeError as err:<br>\n492             if dtype is None:<br>\n--&gt; 493               raise err<br>\n494             else:<br>\n495               raise TypeError(</p>\n<p>TypeError: Failed to convert object of type &lt;type 'list'&gt; to Tensor. Contents: [None, 49, 7, 20]. Consider casting elements to a supported type.</p>\n</blockquote>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nNo\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux Ubuntu 16.04.2 LTS (Xenial Xerus)\nTensorFlow installed from (source or binary):\nbinary\nTensorFlow version (use command below):\n1.2.0-rc2\nBazel version (if compiling from source):\nCUDA/cuDNN version:\n8/5.1.10\nGPU model and memory:\nGeForce GTX 1080\nExact command to reproduce:\n\nimport tensorflow as tf\nx_3d = tf.placeholder(tf.float32,shape=[None,5,5,5,1])\nconv_t = tf.layers.conv3d_transpose(x_3d,20,[3,3,3])\n\nDescribe the problem\nI am getting a TypeError when I use a placeholder with batch size as None as inputs to the conv3d_transpose. This problem does not happen with the tf.layers.conv2d_transpose()\nSource code / logs\nimport tensorflow as tf\nx_2d = tf.placeholder(tf.float32,shape=[None,5,5,1])\nconv2d_t = tf.layers.conv2d_transpose(x_2d,20,[3,3])\nx_3d = tf.placeholder(tf.float32,shape=[None,5,5,5,1])\nconv_t = tf.layers.conv3d_transpose(x_3d,20,[3,3,3])\n\n\n\nTypeError                                 Traceback (most recent call last)\n in ()\n4\n5 x_3d = tf.placeholder(tf.float32,shape=[None,5,5,5,1])\n----> 6 conv_t = tf.layers.conv3d_transpose(x_3d,20,[3,3,3])\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/convolutional.pyc in conv3d_transpose(inputs, filters, kernel_size, strides, padding, data_format, activation, use_bias, kernel_initializer, bias_initializer, kernel_regularizer, bias_regularizer, activity_regularizer, trainable, name, reuse)\n1538       _reuse=reuse,\n1539       _scope=name)\n-> 1540   return layer.apply(inputs)\n1541\n1542\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.pyc in apply(self, inputs, *args, **kwargs)\n490       Output tensor(s).\n491     \"\"\"\n--> 492     return self.call(inputs, *args, **kwargs)\n493\n494   def _assert_input_compatibility(self, inputs):\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.pyc in call(self, inputs, *args, **kwargs)\n439         # Check input assumptions set after layer building, e.g. input shape.\n440         self._assert_input_compatibility(inputs)\n--> 441         outputs = self.call(inputs, *args, **kwargs)\n442\n443         # Apply activity regularization.\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/convolutional.pyc in call(self, inputs)\n1456         outputs_4d = array_ops.reshape(outputs, [\n1457             outputs_shape[0], outputs_shape[1] * outputs_shape[2],\n-> 1458             outputs_shape[3], outputs_shape[4]\n1459         ])\n1460       outputs_4d = nn.bias_add(\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_array_ops.pyc in reshape(tensor, shape, name)\n2449   \"\"\"\n2450   result = _op_def_lib.apply_op(\"Reshape\", tensor=tensor, shape=shape,\n-> 2451                                 name=name)\n2452   return result\n2453\n/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.pyc in apply_op(self, op_type_name, name, **keywords)\n491           except TypeError as err:\n492             if dtype is None:\n--> 493               raise err\n494             else:\n495               raise TypeError(\nTypeError: Failed to convert object of type <type 'list'> to Tensor. Contents: [None, 49, 7, 20]. Consider casting elements to a supported type.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nNo\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nLinux Ubuntu 16.04.2 LTS (Xenial Xerus)\r\n- **TensorFlow installed from (source or binary)**:\r\nbinary\r\n- **TensorFlow version (use command below)**:\r\n1.2.0-rc2\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n8/5.1.10\r\n- **GPU model and memory**:\r\nGeForce GTX 1080\r\n- **Exact command to reproduce**:\r\n```\r\nimport tensorflow as tf\r\nx_3d = tf.placeholder(tf.float32,shape=[None,5,5,5,1])\r\nconv_t = tf.layers.conv3d_transpose(x_3d,20,[3,3,3])\r\n```\r\n\r\n### Describe the problem\r\nI am getting a TypeError when I use a placeholder with batch size as None as inputs to the conv3d_transpose. This problem does not happen with the tf.layers.conv2d_transpose()\r\n\r\n### Source code / logs\r\n```\r\nimport tensorflow as tf\r\nx_2d = tf.placeholder(tf.float32,shape=[None,5,5,1])\r\nconv2d_t = tf.layers.conv2d_transpose(x_2d,20,[3,3])\r\nx_3d = tf.placeholder(tf.float32,shape=[None,5,5,5,1])\r\nconv_t = tf.layers.conv3d_transpose(x_3d,20,[3,3,3])\r\n```\r\n\r\n> ---------------------------------------------------------------------------\r\n> TypeError                                 Traceback (most recent call last)\r\n> <ipython-input-3-94e71945bcae> in <module>()\r\n>       4 \r\n>       5 x_3d = tf.placeholder(tf.float32,shape=[None,5,5,5,1])\r\n> ----> 6 conv_t = tf.layers.conv3d_transpose(x_3d,20,[3,3,3])\r\n> \r\n> /usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/convolutional.pyc in conv3d_transpose(inputs, filters, kernel_size, strides, padding, data_format, activation, use_bias, kernel_initializer, bias_initializer, kernel_regularizer, bias_regularizer, activity_regularizer, trainable, name, reuse)\r\n>    1538       _reuse=reuse,\r\n>    1539       _scope=name)\r\n> -> 1540   return layer.apply(inputs)\r\n>    1541 \r\n>    1542 \r\n> \r\n> /usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.pyc in apply(self, inputs, *args, **kwargs)\r\n>     490       Output tensor(s).\r\n>     491     \"\"\"\r\n> --> 492     return self.__call__(inputs, *args, **kwargs)\r\n>     493 \r\n>     494   def _assert_input_compatibility(self, inputs):\r\n> \r\n> /usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/base.pyc in __call__(self, inputs, *args, **kwargs)\r\n>     439         # Check input assumptions set after layer building, e.g. input shape.\r\n>     440         self._assert_input_compatibility(inputs)\r\n> --> 441         outputs = self.call(inputs, *args, **kwargs)\r\n>     442 \r\n>     443         # Apply activity regularization.\r\n> \r\n> /usr/local/lib/python2.7/dist-packages/tensorflow/python/layers/convolutional.pyc in call(self, inputs)\r\n>    1456         outputs_4d = array_ops.reshape(outputs, [\r\n>    1457             outputs_shape[0], outputs_shape[1] * outputs_shape[2],\r\n> -> 1458             outputs_shape[3], outputs_shape[4]\r\n>    1459         ])\r\n>    1460       outputs_4d = nn.bias_add(\r\n> \r\n> /usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_array_ops.pyc in reshape(tensor, shape, name)\r\n>    2449   \"\"\"\r\n>    2450   result = _op_def_lib.apply_op(\"Reshape\", tensor=tensor, shape=shape,\r\n> -> 2451                                 name=name)\r\n>    2452   return result\r\n>    2453 \r\n> \r\n> /usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.pyc in apply_op(self, op_type_name, name, **keywords)\r\n>     491           except TypeError as err:\r\n>     492             if dtype is None:\r\n> --> 493               raise err\r\n>     494             else:\r\n>     495               raise TypeError(\r\n> \r\n> TypeError: Failed to convert object of type <type 'list'> to Tensor. Contents: [None, 49, 7, 20]. Consider casting elements to a supported type.\r\n> \r\n> "}