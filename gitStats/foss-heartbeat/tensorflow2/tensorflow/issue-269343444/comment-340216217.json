{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/340216217", "html_url": "https://github.com/tensorflow/tensorflow/issues/14060#issuecomment-340216217", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14060", "id": 340216217, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDIxNjIxNw==", "user": {"login": "shoyer", "id": 1217238, "node_id": "MDQ6VXNlcjEyMTcyMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoyer", "html_url": "https://github.com/shoyer", "followers_url": "https://api.github.com/users/shoyer/followers", "following_url": "https://api.github.com/users/shoyer/following{/other_user}", "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions", "organizations_url": "https://api.github.com/users/shoyer/orgs", "repos_url": "https://api.github.com/users/shoyer/repos", "events_url": "https://api.github.com/users/shoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/shoyer/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-28T20:01:53Z", "updated_at": "2017-10-28T20:33:22Z", "author_association": "MEMBER", "body_html": "<p>This certainly convenient, but I'm not sure it was actually a good design choice for NumPy or would be for TensorFlow.</p>\n<p><code>numpy.ndarray</code> has 71 non-private attributes*:<br>\nT, all, any, argmax, argmin, argpartition, argsort, astype, base, byteswap, choose, clip, compress, conj, conjugate, copy, ctypes, cumprod, cumsum, data, diagonal, dot, dtype, dump, dumps, fill, flags, flat, flatten, getfield, imag, item, itemset, itemsize, max, mean, min, nbytes, ndim, newbyteorder, nonzero, partition, prod, ptp, put, ravel, real, repeat, reshape, resize, round, searchsorted, setfield, setflags, shape, size, sort, squeeze, std, strides, sum, swapaxes, take, tobytes, tofile, tolist, tostring, trace, transpose, var, view</p>\n<p>There's no clear rule for what is a method vs. a function (most methods are also functions, but the converse is not always true). Only a fraction of these are actually widely used. Many of them are attractive nuisances with better alternatives elsewhere, but since we care about backwards compatibility the old methods are never removed. We no longer add new methods, for fear of making this list longer.</p>\n<p>Purely from an organization point of view, having all these methods makes the internal dependency graph a complete mess. Basically everything ends up depending on everything else in a completely circular way.</p>\n<p>In practice, I think more numeric type promotion (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"212911053\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/8224\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/8224/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/8224\">#8224</a>) would make a bigger difference for readability of TensorFlow code. I see lots of codes littered with calls to <code>tf.constant</code> and <code>tf.cast</code> that should be totally unnecessary.</p>\n<ul>\n<li>Generated with <code>', '.join(entry for entry in dir(np.array(0)) if not entry.startswith('__'))</code>.</li>\n</ul>", "body_text": "This certainly convenient, but I'm not sure it was actually a good design choice for NumPy or would be for TensorFlow.\nnumpy.ndarray has 71 non-private attributes*:\nT, all, any, argmax, argmin, argpartition, argsort, astype, base, byteswap, choose, clip, compress, conj, conjugate, copy, ctypes, cumprod, cumsum, data, diagonal, dot, dtype, dump, dumps, fill, flags, flat, flatten, getfield, imag, item, itemset, itemsize, max, mean, min, nbytes, ndim, newbyteorder, nonzero, partition, prod, ptp, put, ravel, real, repeat, reshape, resize, round, searchsorted, setfield, setflags, shape, size, sort, squeeze, std, strides, sum, swapaxes, take, tobytes, tofile, tolist, tostring, trace, transpose, var, view\nThere's no clear rule for what is a method vs. a function (most methods are also functions, but the converse is not always true). Only a fraction of these are actually widely used. Many of them are attractive nuisances with better alternatives elsewhere, but since we care about backwards compatibility the old methods are never removed. We no longer add new methods, for fear of making this list longer.\nPurely from an organization point of view, having all these methods makes the internal dependency graph a complete mess. Basically everything ends up depending on everything else in a completely circular way.\nIn practice, I think more numeric type promotion (#8224) would make a bigger difference for readability of TensorFlow code. I see lots of codes littered with calls to tf.constant and tf.cast that should be totally unnecessary.\n\nGenerated with ', '.join(entry for entry in dir(np.array(0)) if not entry.startswith('__')).", "body": "This certainly convenient, but I'm not sure it was actually a good design choice for NumPy or would be for TensorFlow.\r\n\r\n`numpy.ndarray` has 71 non-private attributes*:\r\nT, all, any, argmax, argmin, argpartition, argsort, astype, base, byteswap, choose, clip, compress, conj, conjugate, copy, ctypes, cumprod, cumsum, data, diagonal, dot, dtype, dump, dumps, fill, flags, flat, flatten, getfield, imag, item, itemset, itemsize, max, mean, min, nbytes, ndim, newbyteorder, nonzero, partition, prod, ptp, put, ravel, real, repeat, reshape, resize, round, searchsorted, setfield, setflags, shape, size, sort, squeeze, std, strides, sum, swapaxes, take, tobytes, tofile, tolist, tostring, trace, transpose, var, view\r\n\r\nThere's no clear rule for what is a method vs. a function (most methods are also functions, but the converse is not always true). Only a fraction of these are actually widely used. Many of them are attractive nuisances with better alternatives elsewhere, but since we care about backwards compatibility the old methods are never removed. We no longer add new methods, for fear of making this list longer.\r\n\r\nPurely from an organization point of view, having all these methods makes the internal dependency graph a complete mess. Basically everything ends up depending on everything else in a completely circular way.\r\n\r\nIn practice, I think more numeric type promotion (https://github.com/tensorflow/tensorflow/issues/8224) would make a bigger difference for readability of TensorFlow code. I see lots of codes littered with calls to `tf.constant` and `tf.cast` that should be totally unnecessary.\r\n\r\n* Generated with `', '.join(entry for entry in dir(np.array(0)) if not entry.startswith('__'))`."}