{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21661", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21661/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21661/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21661/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21661", "id": 351276350, "node_id": "MDU6SXNzdWUzNTEyNzYzNTA=", "number": 21661, "title": "Reusing pretrained model in my own model", "user": {"login": "yadyad91", "id": 42446172, "node_id": "MDQ6VXNlcjQyNDQ2MTcy", "avatar_url": "https://avatars3.githubusercontent.com/u/42446172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yadyad91", "html_url": "https://github.com/yadyad91", "followers_url": "https://api.github.com/users/yadyad91/followers", "following_url": "https://api.github.com/users/yadyad91/following{/other_user}", "gists_url": "https://api.github.com/users/yadyad91/gists{/gist_id}", "starred_url": "https://api.github.com/users/yadyad91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yadyad91/subscriptions", "organizations_url": "https://api.github.com/users/yadyad91/orgs", "repos_url": "https://api.github.com/users/yadyad91/repos", "events_url": "https://api.github.com/users/yadyad91/events{/privacy}", "received_events_url": "https://api.github.com/users/yadyad91/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bignamehyp", "id": 3474655, "node_id": "MDQ6VXNlcjM0NzQ2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/3474655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bignamehyp", "html_url": "https://github.com/bignamehyp", "followers_url": "https://api.github.com/users/bignamehyp/followers", "following_url": "https://api.github.com/users/bignamehyp/following{/other_user}", "gists_url": "https://api.github.com/users/bignamehyp/gists{/gist_id}", "starred_url": "https://api.github.com/users/bignamehyp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bignamehyp/subscriptions", "organizations_url": "https://api.github.com/users/bignamehyp/orgs", "repos_url": "https://api.github.com/users/bignamehyp/repos", "events_url": "https://api.github.com/users/bignamehyp/events{/privacy}", "received_events_url": "https://api.github.com/users/bignamehyp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-08-16T16:20:25Z", "updated_at": "2018-09-28T20:39:31Z", "closed_at": "2018-09-28T20:39:31Z", "author_association": "NONE", "body_html": "<p>Hello,<br>\nI am creating a tensorflow model with a new session and you will find below the pseudocode for it</p>\n<pre><code>inp = tf.placeholder()   #----- placeholder for model1\n# conv and relu layers\nintermediate = conv2d()  # ----- an intermediate output that I want to use in model2\n# conv and relu layers\nloss = tf.reduce_mean( sigmoid_cross_entropy_with_logits( predicted , real ) )\n\nsess1.run( loss , feed_dict = { inp : images } )\n</code></pre>\n<p>Now I want to use a pretrained model and add the output of the final layer in the loss function. So for example,</p>\n<pre><code>\nsess2 = tf.Session()\nload_model( sess2 )\n</code></pre>\n<p>The pretrained model has its own placeholders and I would like to send the value in my intermediate tensor to the placeholder of the pretrained model. Thus, I want to run the pretrained model in every batch and evaluate its prediction.</p>\n<p>The problem is that on searching I found out that we cannot feed_dict tensors to placeholders. Is there any other way I can go about and evaluate the second model everytime the first model learns? I asked this question on Stackoverflow and haven't received any responses.</p>\n<p>Thanks,</p>", "body_text": "Hello,\nI am creating a tensorflow model with a new session and you will find below the pseudocode for it\ninp = tf.placeholder()   #----- placeholder for model1\n# conv and relu layers\nintermediate = conv2d()  # ----- an intermediate output that I want to use in model2\n# conv and relu layers\nloss = tf.reduce_mean( sigmoid_cross_entropy_with_logits( predicted , real ) )\n\nsess1.run( loss , feed_dict = { inp : images } )\n\nNow I want to use a pretrained model and add the output of the final layer in the loss function. So for example,\n\nsess2 = tf.Session()\nload_model( sess2 )\n\nThe pretrained model has its own placeholders and I would like to send the value in my intermediate tensor to the placeholder of the pretrained model. Thus, I want to run the pretrained model in every batch and evaluate its prediction.\nThe problem is that on searching I found out that we cannot feed_dict tensors to placeholders. Is there any other way I can go about and evaluate the second model everytime the first model learns? I asked this question on Stackoverflow and haven't received any responses.\nThanks,", "body": "Hello,\r\nI am creating a tensorflow model with a new session and you will find below the pseudocode for it\r\n\r\n```\r\ninp = tf.placeholder()   #----- placeholder for model1\r\n# conv and relu layers\r\nintermediate = conv2d()  # ----- an intermediate output that I want to use in model2\r\n# conv and relu layers\r\nloss = tf.reduce_mean( sigmoid_cross_entropy_with_logits( predicted , real ) )\r\n\r\nsess1.run( loss , feed_dict = { inp : images } )\r\n```\r\nNow I want to use a pretrained model and add the output of the final layer in the loss function. So for example,\r\n```\r\n\r\nsess2 = tf.Session()\r\nload_model( sess2 )\r\n```\r\nThe pretrained model has its own placeholders and I would like to send the value in my intermediate tensor to the placeholder of the pretrained model. Thus, I want to run the pretrained model in every batch and evaluate its prediction.\r\n\r\nThe problem is that on searching I found out that we cannot feed_dict tensors to placeholders. Is there any other way I can go about and evaluate the second model everytime the first model learns? I asked this question on Stackoverflow and haven't received any responses.\r\n\r\nThanks,"}