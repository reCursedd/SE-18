{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/214665719", "html_url": "https://github.com/tensorflow/tensorflow/issues/2053#issuecomment-214665719", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2053", "id": 214665719, "node_id": "MDEyOklzc3VlQ29tbWVudDIxNDY2NTcxOQ==", "user": {"login": "aehlig", "id": 9567293, "node_id": "MDQ6VXNlcjk1NjcyOTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/9567293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aehlig", "html_url": "https://github.com/aehlig", "followers_url": "https://api.github.com/users/aehlig/followers", "following_url": "https://api.github.com/users/aehlig/following{/other_user}", "gists_url": "https://api.github.com/users/aehlig/gists{/gist_id}", "starred_url": "https://api.github.com/users/aehlig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aehlig/subscriptions", "organizations_url": "https://api.github.com/users/aehlig/orgs", "repos_url": "https://api.github.com/users/aehlig/repos", "events_url": "https://api.github.com/users/aehlig/events{/privacy}", "received_events_url": "https://api.github.com/users/aehlig/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-26T08:23:55Z", "updated_at": "2016-04-26T08:23:55Z", "author_association": "NONE", "body_html": "<blockquote>\n<p>/cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=9567293\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/aehlig\">@aehlig</a> who knows exactly how this file is parsed.</p>\n</blockquote>\n<p>My understanding is that <code>build:cuda</code> options are more specific than plain <code>build</code> options and hence take precedence where conflicting options are specified for <code>build</code> and <code>build:cuda</code>; but otherwise they're just added additionally. So, in your case you should get <code>--spawn_startegy=standalone</code>.  You can also verify which options are taken from the rc-files by adding <code>--announce_rc</code> to the command-line.</p>\n<p>Note, however,  that on the command-line you specified <code>--genrule_strategy=standalone</code> whereas from the rc-file you inherit <code>--spawn_strategy=standalone</code> and I'm not sure how those two strategy options interact.</p>", "body_text": "/cc @aehlig who knows exactly how this file is parsed.\n\nMy understanding is that build:cuda options are more specific than plain build options and hence take precedence where conflicting options are specified for build and build:cuda; but otherwise they're just added additionally. So, in your case you should get --spawn_startegy=standalone.  You can also verify which options are taken from the rc-files by adding --announce_rc to the command-line.\nNote, however,  that on the command-line you specified --genrule_strategy=standalone whereas from the rc-file you inherit --spawn_strategy=standalone and I'm not sure how those two strategy options interact.", "body": "> /cc @aehlig who knows exactly how this file is parsed.\n\nMy understanding is that `build:cuda` options are more specific than plain `build` options and hence take precedence where conflicting options are specified for `build` and `build:cuda`; but otherwise they're just added additionally. So, in your case you should get `--spawn_startegy=standalone`.  You can also verify which options are taken from the rc-files by adding `--announce_rc` to the command-line.\n\nNote, however,  that on the command-line you specified `--genrule_strategy=standalone` whereas from the rc-file you inherit `--spawn_strategy=standalone` and I'm not sure how those two strategy options interact.\n"}