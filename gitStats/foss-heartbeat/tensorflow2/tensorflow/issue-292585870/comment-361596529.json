{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/361596529", "html_url": "https://github.com/tensorflow/tensorflow/issues/16556#issuecomment-361596529", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16556", "id": 361596529, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTU5NjUyOQ==", "user": {"login": "KevOBrien", "id": 16003438, "node_id": "MDQ6VXNlcjE2MDAzNDM4", "avatar_url": "https://avatars3.githubusercontent.com/u/16003438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KevOBrien", "html_url": "https://github.com/KevOBrien", "followers_url": "https://api.github.com/users/KevOBrien/followers", "following_url": "https://api.github.com/users/KevOBrien/following{/other_user}", "gists_url": "https://api.github.com/users/KevOBrien/gists{/gist_id}", "starred_url": "https://api.github.com/users/KevOBrien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KevOBrien/subscriptions", "organizations_url": "https://api.github.com/users/KevOBrien/orgs", "repos_url": "https://api.github.com/users/KevOBrien/repos", "events_url": "https://api.github.com/users/KevOBrien/events{/privacy}", "received_events_url": "https://api.github.com/users/KevOBrien/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-30T13:42:15Z", "updated_at": "2018-01-30T13:51:20Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20959853\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/drpngx\">@drpngx</a> I have quickly generted a script which is a much simplified version of my project. I have also included two small pickle files to be fed into the <code>inputs</code> and <code>labels</code> placeholders of the script. Depending on your OS, I think it should load the pickles and run as is, but you may need some tinkering otherwise.</p>\n<p><a href=\"https://drive.google.com/open?id=13Kice6p3IQvRVOKIlW0DSvD9wwJDL-YH\" rel=\"nofollow\">Here is a link to a zipped file containing the script, the inputs pickle file and the labels pickle file</a>.</p>\n<p>What I have done is run 100 iterations of training on the same input and labels batch. For each iteration, I compare <code>tf.argmax</code> with <code>np.argmax</code> and print the results if they are different. Usually, each time I run the script, I get at least one difference in the Numpy and TensorFlow results, as shown below. Each time there is an error, results in the following format are printed:</p>\n<p><code>tf.equal(tf.argmax(predictions, axis=-1), tf.argmax(labels, axis=-1))</code></p>\n<p><code>np.array_equal(np.argmax(predictions, axis=-1), np.argmax(labels, axis=-1))</code></p>\n<p><code>predictions</code></p>\n<p><code>labels</code></p>\n<p>Sample output:</p>\n<pre><code>1\n2\n3\n4\n5\n6\n7\n\n [[False]\n [False]] \n\n [[ True]\n [False]] \n\n [array([[0.34652075, 0.34789905, 0.0830554 , 0.2225248 ]], dtype=float32), array([[0.31778762, 0.35688218, 0.09286535, 0.23246484]], dtype=float32)] \n\n [array([[0., 1., 0., 0.]], dtype=float32), array([[0., 0., 1., 0.]], dtype=float32)] \n\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n [[ True]\n [False]] \n\n [[ True]\n [ True]] \n\n [array([[0.25822368, 0.38438326, 0.12220651, 0.23518656]], dtype=float32), array([[0.13360085, 0.28102002, 0.40999535, 0.17538387]], dtype=float32)] \n\n [array([[0., 1., 0., 0.]], dtype=float32), array([[0., 0., 1., 0.]], dtype=float32)] \n\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n</code></pre>", "body_text": "@drpngx I have quickly generted a script which is a much simplified version of my project. I have also included two small pickle files to be fed into the inputs and labels placeholders of the script. Depending on your OS, I think it should load the pickles and run as is, but you may need some tinkering otherwise.\nHere is a link to a zipped file containing the script, the inputs pickle file and the labels pickle file.\nWhat I have done is run 100 iterations of training on the same input and labels batch. For each iteration, I compare tf.argmax with np.argmax and print the results if they are different. Usually, each time I run the script, I get at least one difference in the Numpy and TensorFlow results, as shown below. Each time there is an error, results in the following format are printed:\ntf.equal(tf.argmax(predictions, axis=-1), tf.argmax(labels, axis=-1))\nnp.array_equal(np.argmax(predictions, axis=-1), np.argmax(labels, axis=-1))\npredictions\nlabels\nSample output:\n1\n2\n3\n4\n5\n6\n7\n\n [[False]\n [False]] \n\n [[ True]\n [False]] \n\n [array([[0.34652075, 0.34789905, 0.0830554 , 0.2225248 ]], dtype=float32), array([[0.31778762, 0.35688218, 0.09286535, 0.23246484]], dtype=float32)] \n\n [array([[0., 1., 0., 0.]], dtype=float32), array([[0., 0., 1., 0.]], dtype=float32)] \n\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n [[ True]\n [False]] \n\n [[ True]\n [ True]] \n\n [array([[0.25822368, 0.38438326, 0.12220651, 0.23518656]], dtype=float32), array([[0.13360085, 0.28102002, 0.40999535, 0.17538387]], dtype=float32)] \n\n [array([[0., 1., 0., 0.]], dtype=float32), array([[0., 0., 1., 0.]], dtype=float32)] \n\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100", "body": "@drpngx I have quickly generted a script which is a much simplified version of my project. I have also included two small pickle files to be fed into the `inputs` and `labels` placeholders of the script. Depending on your OS, I think it should load the pickles and run as is, but you may need some tinkering otherwise.\r\n\r\n[Here is a link to a zipped file containing the script, the inputs pickle file and the labels pickle file](https://drive.google.com/open?id=13Kice6p3IQvRVOKIlW0DSvD9wwJDL-YH).\r\n\r\nWhat I have done is run 100 iterations of training on the same input and labels batch. For each iteration, I compare `tf.argmax` with `np.argmax` and print the results if they are different. Usually, each time I run the script, I get at least one difference in the Numpy and TensorFlow results, as shown below. Each time there is an error, results in the following format are printed:\r\n\r\n`tf.equal(tf.argmax(predictions, axis=-1), tf.argmax(labels, axis=-1))`\r\n\r\n`np.array_equal(np.argmax(predictions, axis=-1), np.argmax(labels, axis=-1))`\r\n\r\n`predictions`\r\n\r\n`labels`\r\n\r\nSample output:\r\n\r\n```\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n\r\n [[False]\r\n [False]] \r\n\r\n [[ True]\r\n [False]] \r\n\r\n [array([[0.34652075, 0.34789905, 0.0830554 , 0.2225248 ]], dtype=float32), array([[0.31778762, 0.35688218, 0.09286535, 0.23246484]], dtype=float32)] \r\n\r\n [array([[0., 1., 0., 0.]], dtype=float32), array([[0., 0., 1., 0.]], dtype=float32)] \r\n\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n\r\n [[ True]\r\n [False]] \r\n\r\n [[ True]\r\n [ True]] \r\n\r\n [array([[0.25822368, 0.38438326, 0.12220651, 0.23518656]], dtype=float32), array([[0.13360085, 0.28102002, 0.40999535, 0.17538387]], dtype=float32)] \r\n\r\n [array([[0., 1., 0., 0.]], dtype=float32), array([[0., 0., 1., 0.]], dtype=float32)] \r\n\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n100\r\n```"}