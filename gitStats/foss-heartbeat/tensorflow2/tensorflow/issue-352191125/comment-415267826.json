{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/415267826", "html_url": "https://github.com/tensorflow/tensorflow/issues/21738#issuecomment-415267826", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21738", "id": 415267826, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNTI2NzgyNg==", "user": {"login": "kmadhugit", "id": 8188686, "node_id": "MDQ6VXNlcjgxODg2ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8188686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmadhugit", "html_url": "https://github.com/kmadhugit", "followers_url": "https://api.github.com/users/kmadhugit/followers", "following_url": "https://api.github.com/users/kmadhugit/following{/other_user}", "gists_url": "https://api.github.com/users/kmadhugit/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmadhugit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmadhugit/subscriptions", "organizations_url": "https://api.github.com/users/kmadhugit/orgs", "repos_url": "https://api.github.com/users/kmadhugit/repos", "events_url": "https://api.github.com/users/kmadhugit/events{/privacy}", "received_events_url": "https://api.github.com/users/kmadhugit/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-23T03:03:45Z", "updated_at": "2018-08-23T03:03:45Z", "author_association": "NONE", "body_html": "<p>The default initializers seems to be working fine, if I comment  kernel_initializer it would work fine as below,</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>from keras.layers import Flatten,Dense,Dropout</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>from keras.models import Sequential</span>\n\n<span class=\"pl-k\">from</span> tensorflow.python.keras.layers <span class=\"pl-k\">import</span> Flatten,Dense,Dropout\n<span class=\"pl-k\">from</span> tensorflow.python.keras.models <span class=\"pl-k\">import</span> Sequential\n\nmnist <span class=\"pl-k\">=</span> tf.keras.datasets.mnist\n\n(x_train, y_train),(x_test, y_test) <span class=\"pl-k\">=</span> mnist.load_data()\nx_train, x_test <span class=\"pl-k\">=</span> x_train <span class=\"pl-k\">/</span> <span class=\"pl-c1\">255.0</span>, x_test <span class=\"pl-k\">/</span> <span class=\"pl-c1\">255.0</span>\n\n<span class=\"pl-k\">import</span> keras\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\">f</span><span class=\"pl-pds\">'</span><span class=\"pl-s\">tf version = </span><span class=\"pl-c1\">{</span>tf.<span class=\"pl-c1\">__version__</span><span class=\"pl-c1\">}</span><span class=\"pl-s\"> </span><span class=\"pl-pds\">'</span>)\n\nmodel <span class=\"pl-k\">=</span> Sequential([\n  Flatten(<span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">28</span>,<span class=\"pl-c1\">28</span>)),\n  Dense(<span class=\"pl-c1\">512</span>,\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>       kernel_initializer='uniform',</span>\n        <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu),\n  Dropout(<span class=\"pl-c1\">0.2</span>),\n  Dense(<span class=\"pl-c1\">10</span>,\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>       kernel_initializer='uniform',</span>\n        <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.softmax)\n])\n\n\nmodel.compile(<span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>adam<span class=\"pl-pds\">'</span></span>,\n              <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>sparse_categorical_crossentropy<span class=\"pl-pds\">'</span></span>,\n              <span class=\"pl-v\">metrics</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>accuracy<span class=\"pl-pds\">'</span></span>])\n\nmodel.fit(x_train, y_train, <span class=\"pl-v\">epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\nmodel.evaluate(x_test, y_test)</pre></div>\n<p>it fails only when I give a wrong initializer.</p>", "body_text": "The default initializers seems to be working fine, if I comment  kernel_initializer it would work fine as below,\nimport tensorflow as tf\n\n#from keras.layers import Flatten,Dense,Dropout\n#from keras.models import Sequential\n\nfrom tensorflow.python.keras.layers import Flatten,Dense,Dropout\nfrom tensorflow.python.keras.models import Sequential\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\nimport keras\nprint(f'tf version = {tf.__version__} ')\n\nmodel = Sequential([\n  Flatten(input_shape=(28,28)),\n  Dense(512,\n#       kernel_initializer='uniform',\n        activation=tf.nn.relu),\n  Dropout(0.2),\n  Dense(10,\n#       kernel_initializer='uniform',\n        activation=tf.nn.softmax)\n])\n\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=1)\nmodel.evaluate(x_test, y_test)\nit fails only when I give a wrong initializer.", "body": "The default initializers seems to be working fine, if I comment  kernel_initializer it would work fine as below,\r\n\r\n````python\r\nimport tensorflow as tf\r\n\r\n#from keras.layers import Flatten,Dense,Dropout\r\n#from keras.models import Sequential\r\n\r\nfrom tensorflow.python.keras.layers import Flatten,Dense,Dropout\r\nfrom tensorflow.python.keras.models import Sequential\r\n\r\nmnist = tf.keras.datasets.mnist\r\n\r\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\r\nx_train, x_test = x_train / 255.0, x_test / 255.0\r\n\r\nimport keras\r\nprint(f'tf version = {tf.__version__} ')\r\n\r\nmodel = Sequential([\r\n  Flatten(input_shape=(28,28)),\r\n  Dense(512,\r\n#       kernel_initializer='uniform',\r\n        activation=tf.nn.relu),\r\n  Dropout(0.2),\r\n  Dense(10,\r\n#       kernel_initializer='uniform',\r\n        activation=tf.nn.softmax)\r\n])\r\n\r\n\r\nmodel.compile(optimizer='adam',\r\n              loss='sparse_categorical_crossentropy',\r\n              metrics=['accuracy'])\r\n\r\nmodel.fit(x_train, y_train, epochs=1)\r\nmodel.evaluate(x_test, y_test)\r\n````\r\nit fails only when I give a wrong initializer. \r\n"}