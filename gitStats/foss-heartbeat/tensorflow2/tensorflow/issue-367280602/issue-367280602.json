{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22770", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22770/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22770/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22770/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22770", "id": 367280602, "node_id": "MDU6SXNzdWUzNjcyODA2MDI=", "number": 22770, "title": "crash via tf_should_use format_stack", "user": {"login": "albertz", "id": 59132, "node_id": "MDQ6VXNlcjU5MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/59132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertz", "html_url": "https://github.com/albertz", "followers_url": "https://api.github.com/users/albertz/followers", "following_url": "https://api.github.com/users/albertz/following{/other_user}", "gists_url": "https://api.github.com/users/albertz/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertz/subscriptions", "organizations_url": "https://api.github.com/users/albertz/orgs", "repos_url": "https://api.github.com/users/albertz/repos", "events_url": "https://api.github.com/users/albertz/events{/privacy}", "received_events_url": "https://api.github.com/users/albertz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 15, "created_at": "2018-10-05T16:22:08Z", "updated_at": "2018-11-23T23:29:58Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: no</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: -</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary (pip)</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.11.0-0-gc19e29306c 1.11.0</li>\n<li><strong>Python version</strong>: 3.6.3</li>\n<li><strong>Bazel version (if compiling from source)</strong>: -</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: -</li>\n<li><strong>CUDA/cuDNN version</strong>: 8.0</li>\n<li><strong>GPU model and memory</strong>: GTX 680 (will not be used)</li>\n<li><strong>Exact command to reproduce</strong>: -</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When <code>__repr__</code> is called on some TF objects at the wrong time, this can lead to a crash (seg fault; see below). There can be various reasons why this can happen, e.g. when a debugger shows the locals of all threads. My case was this, but I think this doesn't matter:</p>\n<ul>\n<li>Via <a href=\"https://github.com/albertz/py_better_exchook\">better_exchook</a>, I extended the output of <code>sys.excepthook</code> and some <code>traceback</code> functions to print out some local vars and their <code>__repr__</code> output. There is something similar for IPython.</li>\n<li>I created some <code>tf.TensorArray</code> and called <code>unstack</code> and I did not use the result value. That <code>unstack</code> method is wrapped via <code>should_use_result</code>.</li>\n<li>The Python GC called the <code>_TFShouldUseHelper.__del__</code> function at some random point, and this triggered the stack formating and then the call some some <code>__repr__</code> of some TF objects.</li>\n</ul>\n<p>Originally, this happened at exit, and I thought that probably it's just not safe at exit to touch any existing TF objects. So I fixed that case in better_exchook: It will not print any vars at exit. A test case to reproduce exactly that case is <a href=\"https://github.com/albertz/playground/blob/master/test-tf111-tfshoulduse-crash.py\">here</a>.</p>\n<p>However, now I get the same crash also not at exit but at another random point (see stack below). It will be hard to come up with a test case for this, as it is very non-deterministic when exactly the GC runs and calls the <code>__del__</code> function.</p>\n<h3>Source code / logs</h3>\n<pre><code>Current thread 0x00007f14209e8700 (most recent call first):\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 1897 in name\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 352 in name\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 614 in __repr__\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 250 in pretty_print\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 487 in format_py_obj\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 571 in &lt;lambda&gt;\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 522 in _trySet\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 571 in format_tb\n  File \"/u/zeyer/.linuxbrew/opt/python3/lib/python3.6/traceback.py\", line 37 in format_list\n  File \"/u/zeyer/.linuxbrew/opt/python3/lib/python3.6/traceback.py\", line 193 in format_stack\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/util/tf_should_use.py\", line 60 in __del__\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 81 in __init__\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 4181 in _add_device_to_stack\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 4243 in device\n  File \"/u/zeyer/.linuxbrew/opt/python3/lib/python3.6/contextlib.py\", line 81 in __enter__\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 3366 in _GroupControlDeps\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 3415 in group\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 3486 in tuple\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 791 in _GradientsHelper\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 596 in gradients\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/training/optimizer.py\", line 517 in compute_gradients\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/training/optimizer.py\", line 401 in minimize\n  File \"tests/test_TFNetworkRecLayer.py\", line 219 in test_rhn_nan\n  File \"tests/test_TFNetworkRecLayer.py\", line 2175 in &lt;module&gt;\n</code></pre>\n<p>\"ops.py\", line 1897 in name, that is this code:</p>\n<pre><code>  @property\n  def name(self):\n    \"\"\"The full name of this operation.\"\"\"\n    return c_api.TF_OperationName(self._c_op)\n</code></pre>\n<p>I often also see this just before the crash:</p>\n<pre><code>pure virtual method called\n</code></pre>\n<p>A Travis log with this crash can also be seen <a href=\"https://travis-ci.org/rwth-i6/returnn/jobs/437693971\" rel=\"nofollow\">here</a>, or <a href=\"https://travis-ci.org/rwth-i6/returnn/jobs/437716636\" rel=\"nofollow\">here</a>.</p>\n<p>The C backtrace is this:</p>\n<pre><code>/lib/x86_64-linux-gnu/libpthread.so.0(raise+0x29)[0x7f7e8df1a269]\n/lib/x86_64-linux-gnu/libpthread.so.0(+0x11390)[0x7f7e8df1a390]\n/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so(TF_OperationName+0xa)[0x7f7e5ccc0eca]\n/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so(+0x1982264)[0x7f7e5ca78264]\n/u/zeyer/.linuxbrew/Cellar/python3/3.6.3/lib/libpython3.6m.so.1.0(_PyCFunction_FastCallDict+0x209)[0x7f7e8e1f61c9]\n...\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: -\nTensorFlow installed from (source or binary): binary (pip)\nTensorFlow version (use command below): v1.11.0-0-gc19e29306c 1.11.0\nPython version: 3.6.3\nBazel version (if compiling from source): -\nGCC/Compiler version (if compiling from source): -\nCUDA/cuDNN version: 8.0\nGPU model and memory: GTX 680 (will not be used)\nExact command to reproduce: -\n\nDescribe the problem\nWhen __repr__ is called on some TF objects at the wrong time, this can lead to a crash (seg fault; see below). There can be various reasons why this can happen, e.g. when a debugger shows the locals of all threads. My case was this, but I think this doesn't matter:\n\nVia better_exchook, I extended the output of sys.excepthook and some traceback functions to print out some local vars and their __repr__ output. There is something similar for IPython.\nI created some tf.TensorArray and called unstack and I did not use the result value. That unstack method is wrapped via should_use_result.\nThe Python GC called the _TFShouldUseHelper.__del__ function at some random point, and this triggered the stack formating and then the call some some __repr__ of some TF objects.\n\nOriginally, this happened at exit, and I thought that probably it's just not safe at exit to touch any existing TF objects. So I fixed that case in better_exchook: It will not print any vars at exit. A test case to reproduce exactly that case is here.\nHowever, now I get the same crash also not at exit but at another random point (see stack below). It will be hard to come up with a test case for this, as it is very non-deterministic when exactly the GC runs and calls the __del__ function.\nSource code / logs\nCurrent thread 0x00007f14209e8700 (most recent call first):\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 1897 in name\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 352 in name\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 614 in __repr__\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 250 in pretty_print\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 487 in format_py_obj\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 571 in <lambda>\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 522 in _trySet\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 571 in format_tb\n  File \"/u/zeyer/.linuxbrew/opt/python3/lib/python3.6/traceback.py\", line 37 in format_list\n  File \"/u/zeyer/.linuxbrew/opt/python3/lib/python3.6/traceback.py\", line 193 in format_stack\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/util/tf_should_use.py\", line 60 in __del__\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 81 in __init__\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 4181 in _add_device_to_stack\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 4243 in device\n  File \"/u/zeyer/.linuxbrew/opt/python3/lib/python3.6/contextlib.py\", line 81 in __enter__\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 3366 in _GroupControlDeps\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 3415 in group\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 3486 in tuple\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 791 in _GradientsHelper\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 596 in gradients\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/training/optimizer.py\", line 517 in compute_gradients\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/training/optimizer.py\", line 401 in minimize\n  File \"tests/test_TFNetworkRecLayer.py\", line 219 in test_rhn_nan\n  File \"tests/test_TFNetworkRecLayer.py\", line 2175 in <module>\n\n\"ops.py\", line 1897 in name, that is this code:\n  @property\n  def name(self):\n    \"\"\"The full name of this operation.\"\"\"\n    return c_api.TF_OperationName(self._c_op)\n\nI often also see this just before the crash:\npure virtual method called\n\nA Travis log with this crash can also be seen here, or here.\nThe C backtrace is this:\n/lib/x86_64-linux-gnu/libpthread.so.0(raise+0x29)[0x7f7e8df1a269]\n/lib/x86_64-linux-gnu/libpthread.so.0(+0x11390)[0x7f7e8df1a390]\n/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so(TF_OperationName+0xa)[0x7f7e5ccc0eca]\n/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so(+0x1982264)[0x7f7e5ca78264]\n/u/zeyer/.linuxbrew/Cellar/python3/3.6.3/lib/libpython3.6m.so.1.0(_PyCFunction_FastCallDict+0x209)[0x7f7e8e1f61c9]\n...", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: no\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: -\r\n- **TensorFlow installed from (source or binary)**: binary (pip)\r\n- **TensorFlow version (use command below)**: v1.11.0-0-gc19e29306c 1.11.0\r\n- **Python version**: 3.6.3\r\n- **Bazel version (if compiling from source)**: -\r\n- **GCC/Compiler version (if compiling from source)**: -\r\n- **CUDA/cuDNN version**: 8.0\r\n- **GPU model and memory**: GTX 680 (will not be used)\r\n- **Exact command to reproduce**: -\r\n\r\n\r\n### Describe the problem\r\nWhen `__repr__` is called on some TF objects at the wrong time, this can lead to a crash (seg fault; see below). There can be various reasons why this can happen, e.g. when a debugger shows the locals of all threads. My case was this, but I think this doesn't matter:\r\n\r\n- Via [better_exchook](https://github.com/albertz/py_better_exchook), I extended the output of `sys.excepthook` and some `traceback` functions to print out some local vars and their `__repr__` output. There is something similar for IPython.\r\n- I created some `tf.TensorArray` and called `unstack` and I did not use the result value. That `unstack` method is wrapped via `should_use_result`.\r\n- The Python GC called the `_TFShouldUseHelper.__del__` function at some random point, and this triggered the stack formating and then the call some some `__repr__` of some TF objects.\r\n\r\nOriginally, this happened at exit, and I thought that probably it's just not safe at exit to touch any existing TF objects. So I fixed that case in better_exchook: It will not print any vars at exit. A test case to reproduce exactly that case is [here](https://github.com/albertz/playground/blob/master/test-tf111-tfshoulduse-crash.py).\r\n\r\nHowever, now I get the same crash also not at exit but at another random point (see stack below). It will be hard to come up with a test case for this, as it is very non-deterministic when exactly the GC runs and calls the `__del__` function.\r\n\r\n\r\n\r\n### Source code / logs\r\n\r\n```\r\nCurrent thread 0x00007f14209e8700 (most recent call first):\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 1897 in name\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 352 in name\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 614 in __repr__\r\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 250 in pretty_print\r\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 487 in format_py_obj\r\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 571 in <lambda>\r\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 522 in _trySet\r\n  File \"/u/zeyer/setups/librispeech/2018-02-26--att/returnn/tests/../better_exchook.py\", line 571 in format_tb\r\n  File \"/u/zeyer/.linuxbrew/opt/python3/lib/python3.6/traceback.py\", line 37 in format_list\r\n  File \"/u/zeyer/.linuxbrew/opt/python3/lib/python3.6/traceback.py\", line 193 in format_stack\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/util/tf_should_use.py\", line 60 in __del__\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 81 in __init__\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 4181 in _add_device_to_stack\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/framework/ops.py\", line 4243 in device\r\n  File \"/u/zeyer/.linuxbrew/opt/python3/lib/python3.6/contextlib.py\", line 81 in __enter__\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 3366 in _GroupControlDeps\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 3415 in group\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 3486 in tuple\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 791 in _GradientsHelper\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/ops/gradients_impl.py\", line 596 in gradients\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/training/optimizer.py\", line 517 in compute_gradients\r\n  File \"/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/training/optimizer.py\", line 401 in minimize\r\n  File \"tests/test_TFNetworkRecLayer.py\", line 219 in test_rhn_nan\r\n  File \"tests/test_TFNetworkRecLayer.py\", line 2175 in <module>\r\n```\r\n\r\n\"ops.py\", line 1897 in name, that is this code:\r\n\r\n```\r\n  @property\r\n  def name(self):\r\n    \"\"\"The full name of this operation.\"\"\"\r\n    return c_api.TF_OperationName(self._c_op)\r\n```\r\n\r\nI often also see this just before the crash:\r\n\r\n    pure virtual method called\r\n\r\nA Travis log with this crash can also be seen [here](https://travis-ci.org/rwth-i6/returnn/jobs/437693971), or [here](https://travis-ci.org/rwth-i6/returnn/jobs/437716636).\r\n\r\nThe C backtrace is this:\r\n\r\n```\r\n/lib/x86_64-linux-gnu/libpthread.so.0(raise+0x29)[0x7f7e8df1a269]\r\n/lib/x86_64-linux-gnu/libpthread.so.0(+0x11390)[0x7f7e8df1a390]\r\n/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so(TF_OperationName+0xa)[0x7f7e5ccc0eca]\r\n/u/zeyer/py-envs/py36-tf111/lib/python3.6/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so(+0x1982264)[0x7f7e5ca78264]\r\n/u/zeyer/.linuxbrew/Cellar/python3/3.6.3/lib/libpython3.6m.so.1.0(_PyCFunction_FastCallDict+0x209)[0x7f7e8e1f61c9]\r\n...\r\n```\r\n\r\n"}