{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/184167639", "pull_request_review_id": 115307260, "id": 184167639, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDE2NzYzOQ==", "diff_hunk": "@@ -362,6 +362,74 @@ def testInvalidDataType(self):\n         dtype=dtypes.string)\n \n \n+class VarianceScalingInitializationTest(test.TestCase):\n+\n+  def testInitializerIdentical(self):\n+    for dtype in [dtypes.float32, dtypes.float64]:\n+      init1 = init_ops.variance_scaling_initializer(seed=1, dtype=dtype)\n+      init2 = init_ops.variance_scaling_initializer(seed=1, dtype=dtype)\n+      self.assertTrue(identicaltest(self, init1, init2))\n+      init3 = init_ops.variance_scaling_initializer(\n+          1.5, seed=1, dtype=dtype)\n+      init4 = init_ops.variance_scaling_initializer(\n+          1.5, seed=1, dtype=dtype)\n+      self.assertTrue(identicaltest(self, init3, init4))\n+\n+  def testInitializerDifferent(self):\n+    for dtype in [dtypes.float32, dtypes.float64]:\n+      init1 = init_ops.variance_scaling_initializer(seed=1, dtype=dtype)\n+      init2 = init_ops.variance_scaling_initializer(seed=2, dtype=dtype)\n+      init3 = init_ops.variance_scaling_initializer(\n+          1.5, seed=1, dtype=dtype)\n+      self.assertFalse(identicaltest(self, init1, init2))\n+      self.assertFalse(identicaltest(self, init1, init3))\n+      self.assertFalse(identicaltest(self, init2, init3))\n+\n+  def testZeroSize(self):\n+    shape = [0, 2]\n+    with self.test_session():\n+      x = variable_scope.get_variable(\n+          \"x\",\n+          shape=shape,\n+          initializer=init_ops.variance_scaling_initializer())\n+      x.initializer.run()\n+      self.assertAllEqual(shape, x.eval().shape)\n+\n+  def testDuplicatedInitializer(self):\n+    init = init_ops.variance_scaling_initializer()\n+    self.assertFalse(duplicated_initializer(self, init, 1))\n+\n+  def testInvalidDataType(self):\n+    self.assertRaises(\n+        ValueError,\n+        init_ops.variance_scaling_initializer,\n+        dtype=dtypes.string)\n+\n+  def testNormalDistribution(self):\n+    shape = [100, 100]\n+    expect_mean = 0.\n+    expect_var = 1. / shape[0]\n+    init = init_ops.variance_scaling_initializer(distribution='normal')\n+    with self.test_session(use_gpu=True):\n+      x = variable_scope.get_variable(\"x\", shape=shape, initializer=init)\n+      x.initializer.run()\n+      x_val = x.eval()\n+      self.assertNear(np.mean(x_val), expect_mean, 1e-2)\n+      self.assertNear(np.var(x_val), expect_var, 1e-2)\n+\n+  def testUniformDistribution(self):\n+    shape = [100, 100]\n+    expect_mean = 0.\n+    expect_var = 1. / shape[0]\n+    init = init_ops.variance_scaling_initializer(distribution='uniform')\n+    with self.test_session(use_gpu=True):\n+      x = variable_scope.get_variable(\"x\", shape=shape, initializer=init)", "path": "tensorflow/python/kernel_tests/init_ops_test.py", "position": null, "original_position": 65, "commit_id": "e9215c02243fcfcaba046f32fd93e74f3548df9d", "original_commit_id": "98d97e0b21e171c2ece6be5c03837b014a8683b0", "user": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "body": "In these unit tests, I don't think we should use `variable_scope` to create variables (it adds a lot of indirection and isn't future-proof). Prefer using instead:\r\n\r\n```python\r\nvalue = init(...)(shape)\r\nx = variables.Variable(value)\r\n```", "created_at": "2018-04-25T18:44:12Z", "updated_at": "2018-06-02T05:35:32Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/18854#discussion_r184167639", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18854", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/184167639"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/18854#discussion_r184167639"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18854"}}, "body_html": "<p>In these unit tests, I don't think we should use <code>variable_scope</code> to create variables (it adds a lot of indirection and isn't future-proof). Prefer using instead:</p>\n<div class=\"highlight highlight-source-python\"><pre>value <span class=\"pl-k\">=</span> init(<span class=\"pl-c1\">...</span>)(shape)\nx <span class=\"pl-k\">=</span> variables.Variable(value)</pre></div>", "body_text": "In these unit tests, I don't think we should use variable_scope to create variables (it adds a lot of indirection and isn't future-proof). Prefer using instead:\nvalue = init(...)(shape)\nx = variables.Variable(value)"}