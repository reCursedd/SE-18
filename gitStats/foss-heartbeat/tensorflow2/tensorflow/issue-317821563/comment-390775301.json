{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/390775301", "html_url": "https://github.com/tensorflow/tensorflow/issues/18880#issuecomment-390775301", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18880", "id": 390775301, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDc3NTMwMQ==", "user": {"login": "make1980", "id": 19718982, "node_id": "MDQ6VXNlcjE5NzE4OTgy", "avatar_url": "https://avatars3.githubusercontent.com/u/19718982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/make1980", "html_url": "https://github.com/make1980", "followers_url": "https://api.github.com/users/make1980/followers", "following_url": "https://api.github.com/users/make1980/following{/other_user}", "gists_url": "https://api.github.com/users/make1980/gists{/gist_id}", "starred_url": "https://api.github.com/users/make1980/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/make1980/subscriptions", "organizations_url": "https://api.github.com/users/make1980/orgs", "repos_url": "https://api.github.com/users/make1980/repos", "events_url": "https://api.github.com/users/make1980/events{/privacy}", "received_events_url": "https://api.github.com/users/make1980/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-21T20:38:51Z", "updated_at": "2018-05-22T16:41:29Z", "author_association": "NONE", "body_html": "<p>Thanks for your response <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1284535\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/saeta\">@saeta</a>! This is exactly the discussion that I wanted to have. As you mentioned adding run-time address resolution will cause problem for stateful operations so we avoid it by recreating the session. While this also means we might need to add automatic state recovery mechanism to PS so this won't be a problem. Checkpoint based state recovery has its own limitation of requiring all the PS servers to restore the state in case there is only one PS failing. If ultimately this can be addressed, dynamic RPC resolution should still be applicable. Certainly we need to consider other cases like operations relying on local state can only be resumed if the intermediate local state can be recovered.</p>\n<p>So I agree with you that this feature won't solve all the single-node failure problem and could be error-prone if not used properly. But it should still be useful in case the failed worker doesn't have intermediate state. For example, in an in-graph replication case where worker 1 fails before worker 2 starts the session and after worker 2 constructed the cluster spec, worker 2 doesn't need to restart the session to recognize a new worker 1.</p>\n<p>I understand that this is a special case where RPC resolution can bring some advantages compared with cluster spec propagation. However from the user's perspective having a consistent logical cluster view also seems to be simpler than defining different cluster specs among different workers and also using sparse cluster definition to avoid unrelated workers to wait for each other. Having a single cluster spec also provides potential opportunities for optimizations on op placement since TF can just treat all the workers in a holistic view.</p>\n<p>Also - if worker state is the only concern for this feature request we can work on adding additional logic to avoid using this feature when the failed-over worker contains unrecoverable state. Just want to make sure the feature itself actually brings some value and we can invest more towards this direction.</p>", "body_text": "Thanks for your response @saeta! This is exactly the discussion that I wanted to have. As you mentioned adding run-time address resolution will cause problem for stateful operations so we avoid it by recreating the session. While this also means we might need to add automatic state recovery mechanism to PS so this won't be a problem. Checkpoint based state recovery has its own limitation of requiring all the PS servers to restore the state in case there is only one PS failing. If ultimately this can be addressed, dynamic RPC resolution should still be applicable. Certainly we need to consider other cases like operations relying on local state can only be resumed if the intermediate local state can be recovered.\nSo I agree with you that this feature won't solve all the single-node failure problem and could be error-prone if not used properly. But it should still be useful in case the failed worker doesn't have intermediate state. For example, in an in-graph replication case where worker 1 fails before worker 2 starts the session and after worker 2 constructed the cluster spec, worker 2 doesn't need to restart the session to recognize a new worker 1.\nI understand that this is a special case where RPC resolution can bring some advantages compared with cluster spec propagation. However from the user's perspective having a consistent logical cluster view also seems to be simpler than defining different cluster specs among different workers and also using sparse cluster definition to avoid unrelated workers to wait for each other. Having a single cluster spec also provides potential opportunities for optimizations on op placement since TF can just treat all the workers in a holistic view.\nAlso - if worker state is the only concern for this feature request we can work on adding additional logic to avoid using this feature when the failed-over worker contains unrecoverable state. Just want to make sure the feature itself actually brings some value and we can invest more towards this direction.", "body": "Thanks for your response @saeta! This is exactly the discussion that I wanted to have. As you mentioned adding run-time address resolution will cause problem for stateful operations so we avoid it by recreating the session. While this also means we might need to add automatic state recovery mechanism to PS so this won't be a problem. Checkpoint based state recovery has its own limitation of requiring all the PS servers to restore the state in case there is only one PS failing. If ultimately this can be addressed, dynamic RPC resolution should still be applicable. Certainly we need to consider other cases like operations relying on local state can only be resumed if the intermediate local state can be recovered. \r\n\r\nSo I agree with you that this feature won't solve all the single-node failure problem and could be error-prone if not used properly. But it should still be useful in case the failed worker doesn't have intermediate state. For example, in an in-graph replication case where worker 1 fails before worker 2 starts the session and after worker 2 constructed the cluster spec, worker 2 doesn't need to restart the session to recognize a new worker 1. \r\n\r\nI understand that this is a special case where RPC resolution can bring some advantages compared with cluster spec propagation. However from the user's perspective having a consistent logical cluster view also seems to be simpler than defining different cluster specs among different workers and also using sparse cluster definition to avoid unrelated workers to wait for each other. Having a single cluster spec also provides potential opportunities for optimizations on op placement since TF can just treat all the workers in a holistic view.\r\n\r\nAlso - if worker state is the only concern for this feature request we can work on adding additional logic to avoid using this feature when the failed-over worker contains unrecoverable state. Just want to make sure the feature itself actually brings some value and we can invest more towards this direction."}