{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/144994032", "pull_request_review_id": 69727137, "id": 144994032, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NDk5NDAzMg==", "diff_hunk": "@@ -66,16 +69,337 @@ string MessageTypeToString(RdmaMessageType rmt) {\n }\n }  // namespace\n \n-ibv_context* open_default_device() {\n+// Function to get environment variable\n+// Args:\n+//    var_name - the name of the environmental variable\n+// Returns:\n+//    string with it's value or empty string if not set\n+string get_env_var(char const* var_name) {\n+  char const* var_temp = getenv(var_name);\n+\n+  return (var_temp == NULL) ? string() : string(var_temp);\n+}\n+\n+// Function to open device\n+// Args:\n+//   ibv_dev device to open\n+// Returns:\n+//   context of the opened device\n+ibv_context* open_device(ibv_device* ibv_dev) {\n+  ibv_context* context = ibv_open_device(ibv_dev);\n+\n+  CHECK(context) << \"Open context failed for \" << ibv_get_device_name(ibv_dev);\n+  return context;\n+}\n+\n+// Function to count the number of active ports for device\n+// Args:\n+//   device - to check active ports\n+// Returns:\n+//   number of active ports of the given device\n+int get_dev_active_port_count(ibv_device* device) {\n+  ibv_device_attr device_att;\n+  ibv_port_attr port_attr;\n+  ibv_context* context = NULL;\n+  int rc, port_index, active_ports = 0;\n+\n+  context = ibv_open_device(device);\n+  CHECK(context) << \"Open context failed for \" << ibv_get_device_name(device);\n+  rc = ibv_query_device(context, &device_att);\n+  CHECK(!rc) << \"Failed to query the device\";\n+\n+  for (port_index = 1; port_index <= device_att.phys_port_cnt; port_index++) {\n+    rc = ibv_query_port(context, port_index, &port_attr);\n+    CHECK(!rc) << \"Failed to query the port\" << port_index;\n+    if (port_attr.state == IBV_PORT_ACTIVE) {\n+      active_ports++;\n+    }\n+  }\n+  ibv_close_device(context);\n+  return active_ports;\n+}\n+\n+// Function to set device. If RDMA_DEVICE not set, search for device with active\n+// port.\n+// Fails if more than one device with active port was found.\n+// Returns:\n+//   device to use\n+ibv_device* set_device() {\n   ibv_device** dev_list;\n-  ibv_device* ib_dev;\n-  dev_list = ibv_get_device_list(NULL);\n+  int dev_num, device_index, device_to_open = 0;\n+  int num_devs_with_active_port = 0;\n+  string env_p_rdma_device, str_port_num;\n+\n+  dev_list = ibv_get_device_list(&dev_num);\n   CHECK(dev_list) << \"No InfiniBand device found\";\n-  ib_dev = dev_list[0];\n-  CHECK(ib_dev) << \"No InfiniBand device found\";\n-  ibv_context* context = ibv_open_device(ib_dev);\n-  CHECK(context) << \"Open context failed for \" << ibv_get_device_name(ib_dev);\n-  return context;\n+\n+  env_p_rdma_device = get_env_var(\"RDMA_DEVICE\");\n+  if (!env_p_rdma_device.empty()) {\n+    for (device_index = 0; device_index < dev_num; device_index++) {\n+      if (!env_p_rdma_device.compare(\n+               ibv_get_device_name(dev_list[device_index]))) {\n+        CHECK(get_dev_active_port_count(dev_list[device_index]) != 0)\n+            << \"Device \" << ibv_get_device_name(dev_list[device_index])\n+            << \" has no active ports\";\n+        return dev_list[device_index];\n+      }\n+    }\n+    // check validity of input device\n+    CHECK(false) << \"The device \" << env_p_rdma_device << \" wasn't found\";\n+  }\n+  // set default device\n+  else {\n+    str_port_num = get_env_var(\"RDMA_DEVICE_PORT\");\n+    CHECK(str_port_num.empty())\n+        << \"RDMA_DEVICE should be provided if RDMA_DEVICE_PORT is set by user\";\n+    for (device_index = 0; device_index < dev_num; device_index++) {\n+      // get port_num\n+      if (get_dev_active_port_count(dev_list[device_index]) > 0) {\n+        num_devs_with_active_port++;\n+        CHECK(num_devs_with_active_port <= 1) << \". More than one device with \"\n+                                                 \"active port in the system. \"\n+                                                 \"Please enter RDMA_DEVICE\";\n+        // found device with at least 1 active port\n+        device_to_open = device_index;\n+      }\n+    }\n+    CHECK(num_devs_with_active_port > 0)\n+        << \"There is no active port in the system\";\n+    return dev_list[device_to_open];\n+  }\n+  CHECK(false) << \"No device was set!\";\n+  return NULL;  // never happens\n+}\n+\n+// Function to set port for device.\n+// If RDMA_DEVICE_PORT not set, first active port of the device will be set.\n+// Args:\n+//   context of the device\n+// Returns:\n+//   port to use\n+uint8_t set_port(ibv_context* context) {\n+  uint8_t port_num = 1;\n+  string str_port_num;\n+  ibv_device_attr device_att;\n+  ibv_port_attr port_attr;\n+  int rc, port_index;\n+\n+  rc = ibv_query_device(context, &device_att);\n+  CHECK(!rc) << \"Failed to query the device\\n\";\n+\n+  str_port_num = get_env_var(\"RDMA_DEVICE_PORT\");\n+  // user defined port\n+  if (!str_port_num.empty()) {\n+    port_num = stoi(str_port_num);\n+    CHECK(port_num > 0) << \"RDMA_DEVICE_PORT should be positive\";\n+    CHECK(port_num <= device_att.phys_port_cnt) << \"RDMA_DEVICE_PORT should be \"\n+                                                   \"less or equal to amount of \"\n+                                                   \"available ports\";\n+    rc = ibv_query_port(context, port_num, &port_attr);\n+    CHECK(!rc) << \"Failed to query the port\" << port_num;\n+    // check if port id active\n+    CHECK(port_attr.state == IBV_PORT_ACTIVE)\n+        << \"Selected RDMA_DEVICE_PORT is not active\";\n+  }\n+  // set default port\n+  else {\n+    for (port_index = 1; port_index <= device_att.phys_port_cnt; port_index++) {\n+      rc = ibv_query_port(context, port_index, &port_attr);\n+      CHECK(!rc) << \"Failed to query the port\" << port_index;\n+      if (port_attr.state == IBV_PORT_ACTIVE) {\n+        return port_index;\n+      }\n+    }\n+    CHECK(port_index != device_att.phys_port_cnt) << \"No active ports\";", "path": "tensorflow/contrib/verbs/rdma.cc", "position": null, "original_position": 170, "commit_id": "8d12ea03778d6620322770affc926917726d7a41", "original_commit_id": "deb4e587f8b0e7310a0b4dd78be00e2f870d84af", "user": {"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}, "body": "This control flow is a little odd, with the return inside the for loop and below at line 215.  How about:\r\nport_num = 0;  // line 181.\r\nfor (port_index = 1;...\r\n   if (port_attr.state == IBV_PORT_ACTIVE) {\r\n       CHECK_EQ(0, port_num) << \"Multiple active ports\";\r\n        port_num = port_index;\r\n    }\r\n}\r\nCHECK_GT(port_num, 0) << \"No active ports\";\r\n", "created_at": "2017-10-16T23:18:08Z", "updated_at": "2017-11-01T19:56:59Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13564#discussion_r144994032", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13564", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/144994032"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13564#discussion_r144994032"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13564"}}, "body_html": "<p>This control flow is a little odd, with the return inside the for loop and below at line 215.  How about:<br>\nport_num = 0;  // line 181.<br>\nfor (port_index = 1;...<br>\nif (port_attr.state == IBV_PORT_ACTIVE) {<br>\nCHECK_EQ(0, port_num) &lt;&lt; \"Multiple active ports\";<br>\nport_num = port_index;<br>\n}<br>\n}<br>\nCHECK_GT(port_num, 0) &lt;&lt; \"No active ports\";</p>", "body_text": "This control flow is a little odd, with the return inside the for loop and below at line 215.  How about:\nport_num = 0;  // line 181.\nfor (port_index = 1;...\nif (port_attr.state == IBV_PORT_ACTIVE) {\nCHECK_EQ(0, port_num) << \"Multiple active ports\";\nport_num = port_index;\n}\n}\nCHECK_GT(port_num, 0) << \"No active ports\";"}