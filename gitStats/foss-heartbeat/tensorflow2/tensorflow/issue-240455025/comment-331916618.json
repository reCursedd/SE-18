{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/331916618", "html_url": "https://github.com/tensorflow/tensorflow/issues/11275#issuecomment-331916618", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11275", "id": 331916618, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTkxNjYxOA==", "user": {"login": "carlthome", "id": 1595907, "node_id": "MDQ6VXNlcjE1OTU5MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1595907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlthome", "html_url": "https://github.com/carlthome", "followers_url": "https://api.github.com/users/carlthome/followers", "following_url": "https://api.github.com/users/carlthome/following{/other_user}", "gists_url": "https://api.github.com/users/carlthome/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlthome/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlthome/subscriptions", "organizations_url": "https://api.github.com/users/carlthome/orgs", "repos_url": "https://api.github.com/users/carlthome/repos", "events_url": "https://api.github.com/users/carlthome/events{/privacy}", "received_events_url": "https://api.github.com/users/carlthome/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-25T15:24:22Z", "updated_at": "2017-09-25T15:57:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Yeah! <g-emoji class=\"g-emoji\" alias=\"man_dancing\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f57a.png\">\ud83d\udd7a</g-emoji></p>\n<p>Anyway from latest master with all defaults (e.g.<br>\n<code>git clone git@github.com:tensorflow/tensorflow.git &amp;&amp; cd tensorflow &amp;&amp; PYTHON_BIN_PATH=$(which python) USE_DEFAULT_PYTHON_LIB_PATH=1 CC_OPT_FLAGS='-march=native' TF_ENABLE_XLA=0 TF_NEED_MPI=0 TF_NEED_JEMALLOC=1 TF_NEED_GCP=0 TF_NEED_HDFS=0 TF_NEED_VERBS=0 TF_NEED_OPENCL=0 TF_NEED_CUDA=0 TF_NEED_GDR=0 ./configure</code>)</p>\n<p>And this is basically just <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5068038\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/patrikohlsson\">@patrikohlsson</a>'s example:</p>\n<h2>create_graph.py:</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nx <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>input<span class=\"pl-pds\">'</span></span>)\nc <span class=\"pl-k\">=</span> tf.nn.rnn_cell.LSTMCell(<span class=\"pl-c1\">32</span>)\ny, _ <span class=\"pl-k\">=</span> tf.nn.dynamic_rnn(c, x, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\ny <span class=\"pl-k\">=</span> tf.identity(y, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>output<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> session:\n  session.run(tf.global_variables_initializer())\n  saver <span class=\"pl-k\">=</span> tf.train.Saver(<span class=\"pl-v\">write_version</span><span class=\"pl-k\">=</span>tf.train.SaverDef.V1)\n  saver.save(session, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>graph.ckpt<span class=\"pl-pds\">'</span></span>)\n  <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>graph.pb<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>wb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n    f.write(session.graph.as_graph_def().SerializeToString())</pre></div>\n<h2>graph.config.pbtxt:</h2>\n<pre><code>feed {\n  id { node_name: \"input\" }\n  shape {\n    dim { size: 1 }\n    dim { size: 10 }\n    dim { size: 10 }\n  }\n}\nfetch {\n  id { node_name: \"output\" }\n}\n</code></pre>\n<h2>BUILD:</h2>\n<pre><code>load(\"//tensorflow/compiler/aot:tfcompile.bzl\", \"tf_library\")\n\ntf_library(\n  name = \"dynamic_rnn_graph\",\n  cpp_class = \"Graph\",\n  graph = \"graph.pb\",\n  config = \"graph.config.pbtxt\",\n  freeze_checkpoint = \"graph.ckpt\"\n)\n</code></pre>\n<p>Assuming TensorFlow is installed, run <code>create_graph.py</code> and put its output files into the repo root together with <code>BUILD</code> and <code>graph.config.pbtxt</code>, and then run <code>bazel build :dynamic_rnn_graph</code>.</p>", "body_text": "Yeah! \ud83d\udd7a\nAnyway from latest master with all defaults (e.g.\ngit clone git@github.com:tensorflow/tensorflow.git && cd tensorflow && PYTHON_BIN_PATH=$(which python) USE_DEFAULT_PYTHON_LIB_PATH=1 CC_OPT_FLAGS='-march=native' TF_ENABLE_XLA=0 TF_NEED_MPI=0 TF_NEED_JEMALLOC=1 TF_NEED_GCP=0 TF_NEED_HDFS=0 TF_NEED_VERBS=0 TF_NEED_OPENCL=0 TF_NEED_CUDA=0 TF_NEED_GDR=0 ./configure)\nAnd this is basically just @patrikohlsson's example:\ncreate_graph.py:\nimport tensorflow as tf\n\nx = tf.placeholder(tf.float32, [1, 10, 10], name='input')\nc = tf.nn.rnn_cell.LSTMCell(32)\ny, _ = tf.nn.dynamic_rnn(c, x, dtype=tf.float32)\ny = tf.identity(y, name='output')\n\nwith tf.Session() as session:\n  session.run(tf.global_variables_initializer())\n  saver = tf.train.Saver(write_version=tf.train.SaverDef.V1)\n  saver.save(session, 'graph.ckpt')\n  with open('graph.pb', 'wb') as f:\n    f.write(session.graph.as_graph_def().SerializeToString())\ngraph.config.pbtxt:\nfeed {\n  id { node_name: \"input\" }\n  shape {\n    dim { size: 1 }\n    dim { size: 10 }\n    dim { size: 10 }\n  }\n}\nfetch {\n  id { node_name: \"output\" }\n}\n\nBUILD:\nload(\"//tensorflow/compiler/aot:tfcompile.bzl\", \"tf_library\")\n\ntf_library(\n  name = \"dynamic_rnn_graph\",\n  cpp_class = \"Graph\",\n  graph = \"graph.pb\",\n  config = \"graph.config.pbtxt\",\n  freeze_checkpoint = \"graph.ckpt\"\n)\n\nAssuming TensorFlow is installed, run create_graph.py and put its output files into the repo root together with BUILD and graph.config.pbtxt, and then run bazel build :dynamic_rnn_graph.", "body": "Yeah! :man_dancing: \r\n\r\nAnyway from latest master with all defaults (e.g.\r\n`git clone git@github.com:tensorflow/tensorflow.git && cd tensorflow && PYTHON_BIN_PATH=$(which python) USE_DEFAULT_PYTHON_LIB_PATH=1 CC_OPT_FLAGS='-march=native' TF_ENABLE_XLA=0 TF_NEED_MPI=0 TF_NEED_JEMALLOC=1 TF_NEED_GCP=0 TF_NEED_HDFS=0 TF_NEED_VERBS=0 TF_NEED_OPENCL=0 TF_NEED_CUDA=0 TF_NEED_GDR=0 ./configure`)\r\n\r\nAnd this is basically just @patrikohlsson's example:\r\n## create_graph.py:\r\n```py\r\nimport tensorflow as tf\r\n\r\nx = tf.placeholder(tf.float32, [1, 10, 10], name='input')\r\nc = tf.nn.rnn_cell.LSTMCell(32)\r\ny, _ = tf.nn.dynamic_rnn(c, x, dtype=tf.float32)\r\ny = tf.identity(y, name='output')\r\n\r\nwith tf.Session() as session:\r\n  session.run(tf.global_variables_initializer())\r\n  saver = tf.train.Saver(write_version=tf.train.SaverDef.V1)\r\n  saver.save(session, 'graph.ckpt')\r\n  with open('graph.pb', 'wb') as f:\r\n    f.write(session.graph.as_graph_def().SerializeToString())\r\n```\r\n## graph.config.pbtxt:\r\n```\r\nfeed {\r\n  id { node_name: \"input\" }\r\n  shape {\r\n    dim { size: 1 }\r\n    dim { size: 10 }\r\n    dim { size: 10 }\r\n  }\r\n}\r\nfetch {\r\n  id { node_name: \"output\" }\r\n}\r\n```\r\n## BUILD:\r\n```\r\nload(\"//tensorflow/compiler/aot:tfcompile.bzl\", \"tf_library\")\r\n\r\ntf_library(\r\n  name = \"dynamic_rnn_graph\",\r\n  cpp_class = \"Graph\",\r\n  graph = \"graph.pb\",\r\n  config = \"graph.config.pbtxt\",\r\n  freeze_checkpoint = \"graph.ckpt\"\r\n)\r\n```\r\n\r\nAssuming TensorFlow is installed, run `create_graph.py` and put its output files into the repo root together with `BUILD` and `graph.config.pbtxt`, and then run `bazel build :dynamic_rnn_graph`."}