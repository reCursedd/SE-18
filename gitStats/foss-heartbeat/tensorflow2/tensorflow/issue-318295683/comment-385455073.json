{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/385455073", "html_url": "https://github.com/tensorflow/tensorflow/issues/18917#issuecomment-385455073", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18917", "id": 385455073, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTQ1NTA3Mw==", "user": {"login": "dpaniukov", "id": 16146198, "node_id": "MDQ6VXNlcjE2MTQ2MTk4", "avatar_url": "https://avatars0.githubusercontent.com/u/16146198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpaniukov", "html_url": "https://github.com/dpaniukov", "followers_url": "https://api.github.com/users/dpaniukov/followers", "following_url": "https://api.github.com/users/dpaniukov/following{/other_user}", "gists_url": "https://api.github.com/users/dpaniukov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpaniukov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpaniukov/subscriptions", "organizations_url": "https://api.github.com/users/dpaniukov/orgs", "repos_url": "https://api.github.com/users/dpaniukov/repos", "events_url": "https://api.github.com/users/dpaniukov/events{/privacy}", "received_events_url": "https://api.github.com/users/dpaniukov/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-30T16:38:16Z", "updated_at": "2018-04-30T23:29:41Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8411908\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ntenenz\">@ntenenz</a> Thanks for the clarification! I work with 3D images of brains and need this to work with a single 3D image. At some point of the analysis, I search for clusters of connected voxels (3D pixels). As of now, to accomplish the task I use:</p>\n<p><code>from scipy.sparse.csgraph import connected_components</code><br>\n<code>from sklearn.neighbors import radius_neighbors_graph</code></p>\n<p><code>n_components, labels = connected_components(radius_neighbors_graph(my_voxels, radius=1, mode='connectivity', include_self=True).toarray())</code></p>\n<p>However, it does not work on large images.</p>\n<p>Will it be possible to incorporate such or similar functionality in tensorflow? It will significantly help researchers like me and speed things up with a GPU.</p>\n<p>Thanks for your consideration.</p>", "body_text": "@ntenenz Thanks for the clarification! I work with 3D images of brains and need this to work with a single 3D image. At some point of the analysis, I search for clusters of connected voxels (3D pixels). As of now, to accomplish the task I use:\nfrom scipy.sparse.csgraph import connected_components\nfrom sklearn.neighbors import radius_neighbors_graph\nn_components, labels = connected_components(radius_neighbors_graph(my_voxels, radius=1, mode='connectivity', include_self=True).toarray())\nHowever, it does not work on large images.\nWill it be possible to incorporate such or similar functionality in tensorflow? It will significantly help researchers like me and speed things up with a GPU.\nThanks for your consideration.", "body": "@ntenenz Thanks for the clarification! I work with 3D images of brains and need this to work with a single 3D image. At some point of the analysis, I search for clusters of connected voxels (3D pixels). As of now, to accomplish the task I use:\r\n\r\n`from scipy.sparse.csgraph import connected_components`\r\n`from sklearn.neighbors import radius_neighbors_graph`\r\n\r\n`n_components, labels = connected_components(radius_neighbors_graph(my_voxels, radius=1, mode='connectivity', include_self=True).toarray())`\r\n\r\nHowever, it does not work on large images.\r\n\r\nWill it be possible to incorporate such or similar functionality in tensorflow? It will significantly help researchers like me and speed things up with a GPU. \r\n\r\nThanks for your consideration."}