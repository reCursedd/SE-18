{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/347396872", "html_url": "https://github.com/tensorflow/tensorflow/issues/14906#issuecomment-347396872", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14906", "id": 347396872, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzM5Njg3Mg==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-28T02:48:35Z", "updated_at": "2017-11-28T02:48:35Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Ah, I misunderstood what you were asking for. Yes, you can do this using <code>Dataset.flat_map()</code>. For example, the following program produces the result you describe (although it doesn't use a <code>lookback</code> variable, so you might need to change it still):</p>\n<div class=\"highlight highlight-source-python\"><pre>max_time <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">get_slices</span>(<span class=\"pl-smi\">x</span>):\n  num_slices <span class=\"pl-k\">=</span> tf.shape(x, <span class=\"pl-v\">out_type</span><span class=\"pl-k\">=</span>tf.int64)[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">-</span> max_time\n  <span class=\"pl-k\">return</span> tf.data.Dataset.range(num_slices).map(<span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">i</span>: x[i:i <span class=\"pl-k\">+</span> max_time])\n\ndataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensor_slices([\n    [[<span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">2</span>], [<span class=\"pl-c1\">3</span>], [<span class=\"pl-c1\">4</span>], [<span class=\"pl-c1\">5</span>], [<span class=\"pl-c1\">6</span>]],\n    [[<span class=\"pl-c1\">7</span>], [<span class=\"pl-c1\">8</span>], [<span class=\"pl-c1\">9</span>], [<span class=\"pl-c1\">10</span>], [<span class=\"pl-c1\">11</span>], [<span class=\"pl-c1\">12</span>]]]).flat_map(get_slices).batch(<span class=\"pl-c1\">6</span>)</pre></div>", "body_text": "Ah, I misunderstood what you were asking for. Yes, you can do this using Dataset.flat_map(). For example, the following program produces the result you describe (although it doesn't use a lookback variable, so you might need to change it still):\nmax_time = 3\n\ndef get_slices(x):\n  num_slices = tf.shape(x, out_type=tf.int64)[0] - max_time\n  return tf.data.Dataset.range(num_slices).map(lambda i: x[i:i + max_time])\n\ndataset = tf.data.Dataset.from_tensor_slices([\n    [[1], [2], [3], [4], [5], [6]],\n    [[7], [8], [9], [10], [11], [12]]]).flat_map(get_slices).batch(6)", "body": "Ah, I misunderstood what you were asking for. Yes, you can do this using `Dataset.flat_map()`. For example, the following program produces the result you describe (although it doesn't use a `lookback` variable, so you might need to change it still):\r\n\r\n```python\r\nmax_time = 3\r\n\r\ndef get_slices(x):\r\n  num_slices = tf.shape(x, out_type=tf.int64)[0] - max_time\r\n  return tf.data.Dataset.range(num_slices).map(lambda i: x[i:i + max_time])\r\n\r\ndataset = tf.data.Dataset.from_tensor_slices([\r\n    [[1], [2], [3], [4], [5], [6]],\r\n    [[7], [8], [9], [10], [11], [12]]]).flat_map(get_slices).batch(6)\r\n```"}