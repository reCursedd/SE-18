{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/309223408", "html_url": "https://github.com/tensorflow/tensorflow/issues/10763#issuecomment-309223408", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10763", "id": 309223408, "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTIyMzQwOA==", "user": {"login": "kzos", "id": 5010954, "node_id": "MDQ6VXNlcjUwMTA5NTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5010954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kzos", "html_url": "https://github.com/kzos", "followers_url": "https://api.github.com/users/kzos/followers", "following_url": "https://api.github.com/users/kzos/following{/other_user}", "gists_url": "https://api.github.com/users/kzos/gists{/gist_id}", "starred_url": "https://api.github.com/users/kzos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kzos/subscriptions", "organizations_url": "https://api.github.com/users/kzos/orgs", "repos_url": "https://api.github.com/users/kzos/repos", "events_url": "https://api.github.com/users/kzos/events{/privacy}", "received_events_url": "https://api.github.com/users/kzos/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-17T15:58:18Z", "updated_at": "2017-06-17T15:58:38Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=161459\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/petewarden\">@petewarden</a><br>\nWith <strong>fold_constants, quantize option,</strong> for tranform_graph,<br>\nOn Hexagon, was able to get through .<br>\nFailed in  during instantiating the graph.</p>\n<pre><code>hexagon/src/newnode.c:177:### append_const_node\n hexagon/src/graphops.c:60:CAUSALITY VIOLATION: node ea63a670 (id=0x1005c) referenced output of node ea63d210 (id=0x10052) before instantiated in the graph\n hexagon/src/graphops.c:60:CAUSALITY VIOLATION: node ea63a910 (id=0x1005f) referenced output of node ea63d210 (id=0x10052) before instantiated in the graph\n hexagon/ops/src/op_prefree.c:71:prefree node id 0 ctor\n hexagon/src/newnode.c:177:### append_const_node\n</code></pre>\n<p>Logging in nnlib is not friendly, no node names etc..<br>\nI will try to debug it further to get names stuff and try to fix (<strong>Comment if you got any pointers to debug here</strong>).</p>\n<p>As I couldn't get working on Hexagon, to understand the changes underwent in graph after using <strong>fold_constants,</strong> I ran the graph on CPU,<br>\nall ops are getting substituted with moments, as below:(<strong>What it does?</strong>)</p>\n<pre><code>native : stat_summarizer.cc:407 \t              Dequantize\t   51.109\t    0.723\t    0.705\t  0.506%\t 36.654%\t  2457.600\tConv2D_2\nnative : stat_summarizer.cc:407 \t                    Mean\t   51.828\t    0.848\t    1.080\t  0.775%\t 37.429%\t     0.128\tmoments_1/Mean\nnative : stat_summarizer.cc:407 \t            StopGradient\t   52.920\t    0.014\t    0.015\t  0.010%\t 37.440%\t     0.000\tmoments_1/StopGradient\n</code></pre>\n<p>I assume, fold_constants can be a safe bet to get graph working on hexagon once after fixing the instantiate graph part.(Comment? if you have anything to say)</p>\n<p><strong>Can I visualize pre trained graph(pb) by any means if not through tensorboard?</strong><br>\nthat would help me debug.</p>\n<p>thanks,</p>", "body_text": "@petewarden\nWith fold_constants, quantize option, for tranform_graph,\nOn Hexagon, was able to get through .\nFailed in  during instantiating the graph.\nhexagon/src/newnode.c:177:### append_const_node\n hexagon/src/graphops.c:60:CAUSALITY VIOLATION: node ea63a670 (id=0x1005c) referenced output of node ea63d210 (id=0x10052) before instantiated in the graph\n hexagon/src/graphops.c:60:CAUSALITY VIOLATION: node ea63a910 (id=0x1005f) referenced output of node ea63d210 (id=0x10052) before instantiated in the graph\n hexagon/ops/src/op_prefree.c:71:prefree node id 0 ctor\n hexagon/src/newnode.c:177:### append_const_node\n\nLogging in nnlib is not friendly, no node names etc..\nI will try to debug it further to get names stuff and try to fix (Comment if you got any pointers to debug here).\nAs I couldn't get working on Hexagon, to understand the changes underwent in graph after using fold_constants, I ran the graph on CPU,\nall ops are getting substituted with moments, as below:(What it does?)\nnative : stat_summarizer.cc:407 \t              Dequantize\t   51.109\t    0.723\t    0.705\t  0.506%\t 36.654%\t  2457.600\tConv2D_2\nnative : stat_summarizer.cc:407 \t                    Mean\t   51.828\t    0.848\t    1.080\t  0.775%\t 37.429%\t     0.128\tmoments_1/Mean\nnative : stat_summarizer.cc:407 \t            StopGradient\t   52.920\t    0.014\t    0.015\t  0.010%\t 37.440%\t     0.000\tmoments_1/StopGradient\n\nI assume, fold_constants can be a safe bet to get graph working on hexagon once after fixing the instantiate graph part.(Comment? if you have anything to say)\nCan I visualize pre trained graph(pb) by any means if not through tensorboard?\nthat would help me debug.\nthanks,", "body": "@petewarden \r\nWith **fold_constants, quantize option,** for tranform_graph,\r\nOn Hexagon, was able to get through <registration of nodes>.\r\nFailed in <Setupgraph> during instantiating the graph.\r\n\r\n```\r\nhexagon/src/newnode.c:177:### append_const_node\r\n hexagon/src/graphops.c:60:CAUSALITY VIOLATION: node ea63a670 (id=0x1005c) referenced output of node ea63d210 (id=0x10052) before instantiated in the graph\r\n hexagon/src/graphops.c:60:CAUSALITY VIOLATION: node ea63a910 (id=0x1005f) referenced output of node ea63d210 (id=0x10052) before instantiated in the graph\r\n hexagon/ops/src/op_prefree.c:71:prefree node id 0 ctor\r\n hexagon/src/newnode.c:177:### append_const_node\r\n```\r\n\r\nLogging in nnlib is not friendly, no node names etc..\r\nI will try to debug it further to get names stuff and try to fix (**Comment if you got any pointers to debug here**).\r\n\r\nAs I couldn't get working on Hexagon, to understand the changes underwent in graph after using **fold_constants,** I ran the graph on CPU,\r\nall ops are getting substituted with moments, as below:(**What it does?**)\r\n\r\n```\r\nnative : stat_summarizer.cc:407 \t              Dequantize\t   51.109\t    0.723\t    0.705\t  0.506%\t 36.654%\t  2457.600\tConv2D_2\r\nnative : stat_summarizer.cc:407 \t                    Mean\t   51.828\t    0.848\t    1.080\t  0.775%\t 37.429%\t     0.128\tmoments_1/Mean\r\nnative : stat_summarizer.cc:407 \t            StopGradient\t   52.920\t    0.014\t    0.015\t  0.010%\t 37.440%\t     0.000\tmoments_1/StopGradient\r\n```\r\n\r\n\r\nI assume, fold_constants can be a safe bet to get graph working on hexagon once after fixing the instantiate graph part.(Comment? if you have anything to say)\r\n\r\n**Can I visualize pre trained graph(pb) by any means if not through tensorboard?**\r\nthat would help me debug.\r\n\r\nthanks,"}