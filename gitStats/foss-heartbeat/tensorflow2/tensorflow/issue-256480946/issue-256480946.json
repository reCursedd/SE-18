{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12941", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12941/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12941/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12941/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12941", "id": 256480946, "node_id": "MDU6SXNzdWUyNTY0ODA5NDY=", "number": 12941, "title": "float64 support for conv1d and conv2d", "user": {"login": "kjslag", "id": 233837, "node_id": "MDQ6VXNlcjIzMzgzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/233837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjslag", "html_url": "https://github.com/kjslag", "followers_url": "https://api.github.com/users/kjslag/followers", "following_url": "https://api.github.com/users/kjslag/following{/other_user}", "gists_url": "https://api.github.com/users/kjslag/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjslag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjslag/subscriptions", "organizations_url": "https://api.github.com/users/kjslag/orgs", "repos_url": "https://api.github.com/users/kjslag/repos", "events_url": "https://api.github.com/users/kjslag/events{/privacy}", "received_events_url": "https://api.github.com/users/kjslag/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "brianwa84", "id": 22173987, "node_id": "MDQ6VXNlcjIyMTczOTg3", "avatar_url": "https://avatars0.githubusercontent.com/u/22173987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianwa84", "html_url": "https://github.com/brianwa84", "followers_url": "https://api.github.com/users/brianwa84/followers", "following_url": "https://api.github.com/users/brianwa84/following{/other_user}", "gists_url": "https://api.github.com/users/brianwa84/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianwa84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianwa84/subscriptions", "organizations_url": "https://api.github.com/users/brianwa84/orgs", "repos_url": "https://api.github.com/users/brianwa84/repos", "events_url": "https://api.github.com/users/brianwa84/events{/privacy}", "received_events_url": "https://api.github.com/users/brianwa84/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "brianwa84", "id": 22173987, "node_id": "MDQ6VXNlcjIyMTczOTg3", "avatar_url": "https://avatars0.githubusercontent.com/u/22173987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianwa84", "html_url": "https://github.com/brianwa84", "followers_url": "https://api.github.com/users/brianwa84/followers", "following_url": "https://api.github.com/users/brianwa84/following{/other_user}", "gists_url": "https://api.github.com/users/brianwa84/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianwa84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianwa84/subscriptions", "organizations_url": "https://api.github.com/users/brianwa84/orgs", "repos_url": "https://api.github.com/users/brianwa84/repos", "events_url": "https://api.github.com/users/brianwa84/events{/privacy}", "received_events_url": "https://api.github.com/users/brianwa84/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2017-09-10T02:55:44Z", "updated_at": "2018-04-09T17:46:01Z", "closed_at": "2018-04-09T17:45:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p>This is a feature request for <code>float64</code> support with <code>nn.conv1d</code>, <code>nn.conv2d</code>, and <code>nn.convolution</code>. Also, <code>conv1d</code> does not correctly document which types it supports. See below for details.</p>\n<p><code>conv1d</code> (which seems to be a wrapper for <code>conv2d</code>) and <code>conv2d</code> throw a TypeError when passed <code>float64</code> tensors. (I have only tested using a CPU; I don't have GPU access.) This occurs despite the fact that the documentation for <code>conv1d</code> claims support for <code>float64</code>. It is also worth mentioning that (at least on my CPU), <code>conv1d</code> seems to support <code>float16</code> even though this isn't mentioned in the documentation.</p>\n<p><code>conv3d</code> does however seem to support <code>float64</code>. Fortunately, this can at least be used as a temporary workaround to obtain <code>float64</code> support for 1d and 2d convolutions.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>float16</th>\n<th>float32</th>\n<th>float64</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>conv1d</td>\n<td>works, but undocumented</td>\n<td>works</td>\n<td>TypeError, despite documentation</td>\n</tr>\n<tr>\n<td>conv2d</td>\n<td>works</td>\n<td>works</td>\n<td>TypeError</td>\n</tr>\n<tr>\n<td>conv3d</td>\n<td>TypeError</td>\n<td>works</td>\n<td>works</td>\n</tr>\n</tbody>\n</table>\n<p>The above table summarizes the (rather inconsistent) current state of tensorflow's support for various types according to my tests on a CPU using the code below. <code>convolution</code> appears to be a wrapper for <code>conv1d</code>, <code>conv2d</code>, and <code>conv3d</code>, and thus fails on the same types for each dimension.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> t = tf.float16</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> t = tf.float32</span>\nt <span class=\"pl-k\">=</span> tf.float64\nb, fw1, fw2, fw3, ic, oc, iw1, iw2, iw3 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">11</span>)\ntf.nn.conv1d(tf.zeros([b, iw1, ic], t), tf.zeros([fw1, ic, oc], t), <span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>VALID<span class=\"pl-pds\">\"</span></span>)\ntf.nn.conv2d(tf.zeros([b, iw1, iw2, ic], t), tf.zeros([fw1, fw2, ic, oc], t), [<span class=\"pl-c1\">1</span>]<span class=\"pl-k\">*</span><span class=\"pl-c1\">4</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>VALID<span class=\"pl-pds\">\"</span></span>)\ntf.nn.conv3d(tf.zeros([b, iw1, iw2, iw3, ic], t), tf.zeros([fw1, fw2, fw3, ic, oc], t), [<span class=\"pl-c1\">1</span>]<span class=\"pl-k\">*</span><span class=\"pl-c1\">5</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>VALID<span class=\"pl-pds\">\"</span></span>)\ntf.nn.convolution(tf.zeros([b, iw1, ic], t), tf.zeros([fw1, ic, oc], t), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>VALID<span class=\"pl-pds\">\"</span></span>)\ntf.nn.convolution(tf.zeros([b, iw1, iw2, ic], t), tf.zeros([fw1, fw2, ic, oc], t), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>VALID<span class=\"pl-pds\">\"</span></span>)\ntf.nn.convolution(tf.zeros([b, iw1, iw2, iw3, ic], t), tf.zeros([fw1, fw2, fw3, ic, oc], t), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>VALID<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code</strong>: No</li>\n<li><strong>OS Platform and Distribution</strong>: Arch Linux (up to date)</li>\n<li><strong>TensorFlow installed from</strong>: source</li>\n<li><strong>TensorFlow version</strong>: 1.3.0</li>\n<li><strong>Python version</strong>: 3.6.2</li>\n<li><strong>Bazel version</strong>: 0.5.4</li>\n</ul>", "body_text": "This is a feature request for float64 support with nn.conv1d, nn.conv2d, and nn.convolution. Also, conv1d does not correctly document which types it supports. See below for details.\nconv1d (which seems to be a wrapper for conv2d) and conv2d throw a TypeError when passed float64 tensors. (I have only tested using a CPU; I don't have GPU access.) This occurs despite the fact that the documentation for conv1d claims support for float64. It is also worth mentioning that (at least on my CPU), conv1d seems to support float16 even though this isn't mentioned in the documentation.\nconv3d does however seem to support float64. Fortunately, this can at least be used as a temporary workaround to obtain float64 support for 1d and 2d convolutions.\n\n\n\nCommand\nfloat16\nfloat32\nfloat64\n\n\n\n\nconv1d\nworks, but undocumented\nworks\nTypeError, despite documentation\n\n\nconv2d\nworks\nworks\nTypeError\n\n\nconv3d\nTypeError\nworks\nworks\n\n\n\nThe above table summarizes the (rather inconsistent) current state of tensorflow's support for various types according to my tests on a CPU using the code below. convolution appears to be a wrapper for conv1d, conv2d, and conv3d, and thus fails on the same types for each dimension.\nimport tensorflow as tf\n# t = tf.float16\n# t = tf.float32\nt = tf.float64\nb, fw1, fw2, fw3, ic, oc, iw1, iw2, iw3 = range(2,11)\ntf.nn.conv1d(tf.zeros([b, iw1, ic], t), tf.zeros([fw1, ic, oc], t), 1, \"VALID\")\ntf.nn.conv2d(tf.zeros([b, iw1, iw2, ic], t), tf.zeros([fw1, fw2, ic, oc], t), [1]*4, \"VALID\")\ntf.nn.conv3d(tf.zeros([b, iw1, iw2, iw3, ic], t), tf.zeros([fw1, fw2, fw3, ic, oc], t), [1]*5, \"VALID\")\ntf.nn.convolution(tf.zeros([b, iw1, ic], t), tf.zeros([fw1, ic, oc], t), \"VALID\")\ntf.nn.convolution(tf.zeros([b, iw1, iw2, ic], t), tf.zeros([fw1, fw2, ic, oc], t), \"VALID\")\ntf.nn.convolution(tf.zeros([b, iw1, iw2, iw3, ic], t), tf.zeros([fw1, fw2, fw3, ic, oc], t), \"VALID\")\nSystem information\n\nHave I written custom code: No\nOS Platform and Distribution: Arch Linux (up to date)\nTensorFlow installed from: source\nTensorFlow version: 1.3.0\nPython version: 3.6.2\nBazel version: 0.5.4", "body": "This is a feature request for `float64` support with `nn.conv1d`, `nn.conv2d`, and `nn.convolution`. Also, `conv1d` does not correctly document which types it supports. See below for details.\r\n\r\n`conv1d` (which seems to be a wrapper for `conv2d`) and `conv2d` throw a TypeError when passed `float64` tensors. (I have only tested using a CPU; I don't have GPU access.) This occurs despite the fact that the documentation for `conv1d` claims support for `float64`. It is also worth mentioning that (at least on my CPU), `conv1d` seems to support `float16` even though this isn't mentioned in the documentation.\r\n\r\n`conv3d` does however seem to support `float64`. Fortunately, this can at least be used as a temporary workaround to obtain `float64` support for 1d and 2d convolutions.\r\n\r\n| Command | float16 | float32 | float64 |\r\n| --- | --- | --- | --- |\r\n| conv1d | works, but undocumented | works | TypeError, despite documentation |\r\n| conv2d | works | works | TypeError |\r\n| conv3d | TypeError | works | works |\r\n\r\nThe above table summarizes the (rather inconsistent) current state of tensorflow's support for various types according to my tests on a CPU using the code below. `convolution` appears to be a wrapper for `conv1d`, `conv2d`, and `conv3d`, and thus fails on the same types for each dimension.\r\n\r\n```python\r\nimport tensorflow as tf\r\n# t = tf.float16\r\n# t = tf.float32\r\nt = tf.float64\r\nb, fw1, fw2, fw3, ic, oc, iw1, iw2, iw3 = range(2,11)\r\ntf.nn.conv1d(tf.zeros([b, iw1, ic], t), tf.zeros([fw1, ic, oc], t), 1, \"VALID\")\r\ntf.nn.conv2d(tf.zeros([b, iw1, iw2, ic], t), tf.zeros([fw1, fw2, ic, oc], t), [1]*4, \"VALID\")\r\ntf.nn.conv3d(tf.zeros([b, iw1, iw2, iw3, ic], t), tf.zeros([fw1, fw2, fw3, ic, oc], t), [1]*5, \"VALID\")\r\ntf.nn.convolution(tf.zeros([b, iw1, ic], t), tf.zeros([fw1, ic, oc], t), \"VALID\")\r\ntf.nn.convolution(tf.zeros([b, iw1, iw2, ic], t), tf.zeros([fw1, fw2, ic, oc], t), \"VALID\")\r\ntf.nn.convolution(tf.zeros([b, iw1, iw2, iw3, ic], t), tf.zeros([fw1, fw2, fw3, ic, oc], t), \"VALID\")\r\n```\r\n\r\n### System information\r\n- **Have I written custom code**: No\r\n- **OS Platform and Distribution**: Arch Linux (up to date)\r\n- **TensorFlow installed from**: source\r\n- **TensorFlow version**: 1.3.0\r\n- **Python version**: 3.6.2\r\n- **Bazel version**: 0.5.4\r\n"}