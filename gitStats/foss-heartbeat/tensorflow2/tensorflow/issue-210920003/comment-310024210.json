{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/310024210", "html_url": "https://github.com/tensorflow/tensorflow/issues/7951#issuecomment-310024210", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7951", "id": 310024210, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDAyNDIxMA==", "user": {"login": "kratzert", "id": 13069767, "node_id": "MDQ6VXNlcjEzMDY5NzY3", "avatar_url": "https://avatars0.githubusercontent.com/u/13069767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kratzert", "html_url": "https://github.com/kratzert", "followers_url": "https://api.github.com/users/kratzert/followers", "following_url": "https://api.github.com/users/kratzert/following{/other_user}", "gists_url": "https://api.github.com/users/kratzert/gists{/gist_id}", "starred_url": "https://api.github.com/users/kratzert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kratzert/subscriptions", "organizations_url": "https://api.github.com/users/kratzert/orgs", "repos_url": "https://api.github.com/users/kratzert/repos", "events_url": "https://api.github.com/users/kratzert/events{/privacy}", "received_events_url": "https://api.github.com/users/kratzert/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-21T09:31:54Z", "updated_at": "2017-06-21T09:31:54Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5758565\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/EdeMeijer\">@EdeMeijer</a> That's smart. Thank you very much. I should have come to this on my own! Here is a complete working code snippet for anybody interested:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\nnum_epochs <span class=\"pl-k\">=</span> <span class=\"pl-c1\">2</span>\n\nimage_paths <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class1/img1.png<span class=\"pl-pds\">'</span></span>,\n               <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class1/img2.png<span class=\"pl-pds\">'</span></span>,\n               <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class1/img3.png<span class=\"pl-pds\">'</span></span>,\n               <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class1/img4.png<span class=\"pl-pds\">'</span></span>,\n               <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class1/img5.png<span class=\"pl-pds\">'</span></span>,\n               <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class1/img6.png<span class=\"pl-pds\">'</span></span>,\n               <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class1/img7.png<span class=\"pl-pds\">'</span></span>,\n               <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class2/img1.png<span class=\"pl-pds\">'</span></span>, \n               <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class2/img2.png<span class=\"pl-pds\">'</span></span>,\n               <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class2/img3.png<span class=\"pl-pds\">'</span></span>,\n               <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class2/img4.png<span class=\"pl-pds\">'</span></span>,\n               <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class2/img5.png<span class=\"pl-pds\">'</span></span>,\n               <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class1/img6.png<span class=\"pl-pds\">'</span></span>,\n               <span class=\"pl-s\"><span class=\"pl-pds\">'</span>train/class1/img7.png<span class=\"pl-pds\">'</span></span>]\n\nnum_samples <span class=\"pl-k\">=</span> <span class=\"pl-c1\">len</span>(image_paths)\n\nfilenames_op <span class=\"pl-k\">=</span> tf.placeholder(tf.string, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>])\n\ndataset <span class=\"pl-k\">=</span> tf.contrib.data.Dataset.from_tensor_slices(filenames_op)\n\niterator <span class=\"pl-k\">=</span> dataset.make_initializable_iterator()\nnext_element <span class=\"pl-k\">=</span> iterator.get_next()\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n\n    <span class=\"pl-k\">for</span> epoch <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(num_epochs):\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Starting epoch <span class=\"pl-c1\">%i</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> (epoch))\n        np.random.shuffle(image_paths)\n        sess.run(iterator.initializer, {filenames_op: image_paths})\n\n        <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(num_samples):\n            path <span class=\"pl-k\">=</span> sess.run(next_element)\n            <span class=\"pl-c1\">print</span>(path)</pre></div>\n<p>This shuffles as desired on every epoch the entire dataset and gives an output e.g. like this:</p>\n<pre><code>Starting epoch 0\n'train/class2/img4.png'\n'train/class2/img1.png'\n'train/class1/img2.png'\n'train/class1/img7.png'\n'train/class1/img1.png'\n'train/class1/img6.png'\n'train/class1/img6.png'\n'train/class1/img5.png'\n'train/class1/img4.png'\n'train/class1/img7.png'\n'train/class1/img3.png'\n'train/class2/img2.png'\n'train/class2/img3.png'\n'train/class2/img5.png'\nStarting epoch 1\n'train/class1/img7.png'\n'train/class1/img4.png'\n'train/class2/img1.png'\n'train/class1/img6.png'\n'train/class1/img2.png'\n'train/class1/img3.png'\n'train/class1/img6.png'\n'train/class2/img5.png'\n'train/class2/img2.png'\n'train/class1/img1.png'\n'train/class2/img3.png'\n'train/class2/img4.png'\n'train/class1/img5.png'\n'train/class1/img7.png'\n</code></pre>", "body_text": "@EdeMeijer That's smart. Thank you very much. I should have come to this on my own! Here is a complete working code snippet for anybody interested:\nimport tensorflow as tf\nimport numpy as np\n\nnum_epochs = 2\n\nimage_paths = ['train/class1/img1.png',\n               'train/class1/img2.png',\n               'train/class1/img3.png',\n               'train/class1/img4.png',\n               'train/class1/img5.png',\n               'train/class1/img6.png',\n               'train/class1/img7.png',\n               'train/class2/img1.png', \n               'train/class2/img2.png',\n               'train/class2/img3.png',\n               'train/class2/img4.png',\n               'train/class2/img5.png',\n               'train/class1/img6.png',\n               'train/class1/img7.png']\n\nnum_samples = len(image_paths)\n\nfilenames_op = tf.placeholder(tf.string, shape=[None])\n\ndataset = tf.contrib.data.Dataset.from_tensor_slices(filenames_op)\n\niterator = dataset.make_initializable_iterator()\nnext_element = iterator.get_next()\n\nwith tf.Session() as sess:\n\n    for epoch in range(num_epochs):\n        print(\"Starting epoch %i\" % (epoch))\n        np.random.shuffle(image_paths)\n        sess.run(iterator.initializer, {filenames_op: image_paths})\n\n        for i in range(num_samples):\n            path = sess.run(next_element)\n            print(path)\nThis shuffles as desired on every epoch the entire dataset and gives an output e.g. like this:\nStarting epoch 0\n'train/class2/img4.png'\n'train/class2/img1.png'\n'train/class1/img2.png'\n'train/class1/img7.png'\n'train/class1/img1.png'\n'train/class1/img6.png'\n'train/class1/img6.png'\n'train/class1/img5.png'\n'train/class1/img4.png'\n'train/class1/img7.png'\n'train/class1/img3.png'\n'train/class2/img2.png'\n'train/class2/img3.png'\n'train/class2/img5.png'\nStarting epoch 1\n'train/class1/img7.png'\n'train/class1/img4.png'\n'train/class2/img1.png'\n'train/class1/img6.png'\n'train/class1/img2.png'\n'train/class1/img3.png'\n'train/class1/img6.png'\n'train/class2/img5.png'\n'train/class2/img2.png'\n'train/class1/img1.png'\n'train/class2/img3.png'\n'train/class2/img4.png'\n'train/class1/img5.png'\n'train/class1/img7.png'", "body": "@EdeMeijer That's smart. Thank you very much. I should have come to this on my own! Here is a complete working code snippet for anybody interested:\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\nnum_epochs = 2\r\n\r\nimage_paths = ['train/class1/img1.png',\r\n               'train/class1/img2.png',\r\n               'train/class1/img3.png',\r\n               'train/class1/img4.png',\r\n               'train/class1/img5.png',\r\n               'train/class1/img6.png',\r\n               'train/class1/img7.png',\r\n               'train/class2/img1.png', \r\n               'train/class2/img2.png',\r\n               'train/class2/img3.png',\r\n               'train/class2/img4.png',\r\n               'train/class2/img5.png',\r\n               'train/class1/img6.png',\r\n               'train/class1/img7.png']\r\n\r\nnum_samples = len(image_paths)\r\n\r\nfilenames_op = tf.placeholder(tf.string, shape=[None])\r\n\r\ndataset = tf.contrib.data.Dataset.from_tensor_slices(filenames_op)\r\n\r\niterator = dataset.make_initializable_iterator()\r\nnext_element = iterator.get_next()\r\n\r\nwith tf.Session() as sess:\r\n\r\n    for epoch in range(num_epochs):\r\n        print(\"Starting epoch %i\" % (epoch))\r\n        np.random.shuffle(image_paths)\r\n        sess.run(iterator.initializer, {filenames_op: image_paths})\r\n\r\n        for i in range(num_samples):\r\n            path = sess.run(next_element)\r\n            print(path)\r\n```\r\n\r\nThis shuffles as desired on every epoch the entire dataset and gives an output e.g. like this:\r\n\r\n```\r\nStarting epoch 0\r\n'train/class2/img4.png'\r\n'train/class2/img1.png'\r\n'train/class1/img2.png'\r\n'train/class1/img7.png'\r\n'train/class1/img1.png'\r\n'train/class1/img6.png'\r\n'train/class1/img6.png'\r\n'train/class1/img5.png'\r\n'train/class1/img4.png'\r\n'train/class1/img7.png'\r\n'train/class1/img3.png'\r\n'train/class2/img2.png'\r\n'train/class2/img3.png'\r\n'train/class2/img5.png'\r\nStarting epoch 1\r\n'train/class1/img7.png'\r\n'train/class1/img4.png'\r\n'train/class2/img1.png'\r\n'train/class1/img6.png'\r\n'train/class1/img2.png'\r\n'train/class1/img3.png'\r\n'train/class1/img6.png'\r\n'train/class2/img5.png'\r\n'train/class2/img2.png'\r\n'train/class1/img1.png'\r\n'train/class2/img3.png'\r\n'train/class2/img4.png'\r\n'train/class1/img5.png'\r\n'train/class1/img7.png'\r\n```"}