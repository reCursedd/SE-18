{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/310009547", "html_url": "https://github.com/tensorflow/tensorflow/issues/7951#issuecomment-310009547", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7951", "id": 310009547, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDAwOTU0Nw==", "user": {"login": "EdeMeijer", "id": 5758565, "node_id": "MDQ6VXNlcjU3NTg1NjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5758565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdeMeijer", "html_url": "https://github.com/EdeMeijer", "followers_url": "https://api.github.com/users/EdeMeijer/followers", "following_url": "https://api.github.com/users/EdeMeijer/following{/other_user}", "gists_url": "https://api.github.com/users/EdeMeijer/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdeMeijer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdeMeijer/subscriptions", "organizations_url": "https://api.github.com/users/EdeMeijer/orgs", "repos_url": "https://api.github.com/users/EdeMeijer/repos", "events_url": "https://api.github.com/users/EdeMeijer/events{/privacy}", "received_events_url": "https://api.github.com/users/EdeMeijer/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-21T08:42:49Z", "updated_at": "2017-06-21T08:42:49Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13069767\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kratzert\">@kratzert</a> it is certainly possible to re-shuffle the filenames for every epoch, I'm doing exactly that for my own training. You can use an initializable iterator together with a placeholder to achieve this. I'm doing something like this:</p>\n<div class=\"highlight highlight-source-python\"><pre>filenames_op <span class=\"pl-k\">=</span> tf.placeholder(tf.string, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>])\ndataset <span class=\"pl-k\">=</span> tf.contrib.data.TFRecordDataset(filenames)\niterator <span class=\"pl-k\">=</span> dataset.make_initializable_iterator()\nnext_elem <span class=\"pl-k\">=</span> iterator.get_next()\n\nfilenames <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>file1<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>file2<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>file3<span class=\"pl-pds\">'</span></span>]\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> For every epoch, shuffle the file names and initialize the iterator</span>\nrandom.shuffle(filenames)\nsess.run(iterator.initializer, {filenames_op: filenames})</pre></div>", "body_text": "@kratzert it is certainly possible to re-shuffle the filenames for every epoch, I'm doing exactly that for my own training. You can use an initializable iterator together with a placeholder to achieve this. I'm doing something like this:\nfilenames_op = tf.placeholder(tf.string, shape=[None])\ndataset = tf.contrib.data.TFRecordDataset(filenames)\niterator = dataset.make_initializable_iterator()\nnext_elem = iterator.get_next()\n\nfilenames = ['file1', 'file2', 'file3']\n\n# For every epoch, shuffle the file names and initialize the iterator\nrandom.shuffle(filenames)\nsess.run(iterator.initializer, {filenames_op: filenames})", "body": "@kratzert it is certainly possible to re-shuffle the filenames for every epoch, I'm doing exactly that for my own training. You can use an initializable iterator together with a placeholder to achieve this. I'm doing something like this:\r\n```python\r\nfilenames_op = tf.placeholder(tf.string, shape=[None])\r\ndataset = tf.contrib.data.TFRecordDataset(filenames)\r\niterator = dataset.make_initializable_iterator()\r\nnext_elem = iterator.get_next()\r\n\r\nfilenames = ['file1', 'file2', 'file3']\r\n\r\n# For every epoch, shuffle the file names and initialize the iterator\r\nrandom.shuffle(filenames)\r\nsess.run(iterator.initializer, {filenames_op: filenames})\r\n```"}