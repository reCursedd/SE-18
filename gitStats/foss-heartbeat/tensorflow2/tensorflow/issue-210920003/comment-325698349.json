{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/325698349", "html_url": "https://github.com/tensorflow/tensorflow/issues/7951#issuecomment-325698349", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7951", "id": 325698349, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTY5ODM0OQ==", "user": {"login": "GPhilo", "id": 4441724, "node_id": "MDQ6VXNlcjQ0NDE3MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4441724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GPhilo", "html_url": "https://github.com/GPhilo", "followers_url": "https://api.github.com/users/GPhilo/followers", "following_url": "https://api.github.com/users/GPhilo/following{/other_user}", "gists_url": "https://api.github.com/users/GPhilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/GPhilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GPhilo/subscriptions", "organizations_url": "https://api.github.com/users/GPhilo/orgs", "repos_url": "https://api.github.com/users/GPhilo/repos", "events_url": "https://api.github.com/users/GPhilo/events{/privacy}", "received_events_url": "https://api.github.com/users/GPhilo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-29T15:20:13Z", "updated_at": "2017-08-29T15:36:09Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4680197\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vvekic\">@vvekic</a>, I experimented a bit with queues and the Dataset API after realising in horror that of the 0.8s/step in my inference loop, 0.2s is data fetching (with GPU at 0% utilization), raising to almost 2 seconds if the HDD is being used by something else at the same time.<br>\nMy pipeline looks as follows:</p>\n<pre><code>  def preprocess_image(fn):\n    im_s = tf.read_file(fn)\n    im = tf.image.decode_jpeg(im_s, channels=3)\n    im = inception_preprocessing.preprocess_for_eval(im, width=299, height=299)\n    return fn, im\n\n  dataset = tf.contrib.data.Dataset.list_files('{}/*/*.jpg'.format(FLAGS.dataset_dir))\n  dataset.map(preprocess_image, num_threads=FLAGS.num_threads)\n  iterator = dataset.make_one_shot_iterator()\n  input_queue = tf.FIFOQueue(capacity=100*FLAGS.batch_size,\n                             dtypes = iterator.output_types,\n                             shapes=iterator.output_shapes)\n  enqueue_sample = input_queue.enqueue(iterator.get_next())\n  tf.train.add_queue_runner(tf.train.QueueRunner(input_queue, [enqueue_sample]*FLAGS.num_threads))\n  \n  filenames, images = input_queue.dequeue_up_to(FLAGS.batch_size)\n</code></pre>\n<p>I still have to run this on a big dataset and check if there's any performance improvement, but at least it seems to execute correctly. The catch is, I couldn't find a way to iterate over the data more than once (which luckily enough is not my use-case), because the only iterator that won't raise an error when the <code>QueueRunner</code>s spawn the threads is the <code>one_shot_iterator</code>.</p>", "body_text": "@vvekic, I experimented a bit with queues and the Dataset API after realising in horror that of the 0.8s/step in my inference loop, 0.2s is data fetching (with GPU at 0% utilization), raising to almost 2 seconds if the HDD is being used by something else at the same time.\nMy pipeline looks as follows:\n  def preprocess_image(fn):\n    im_s = tf.read_file(fn)\n    im = tf.image.decode_jpeg(im_s, channels=3)\n    im = inception_preprocessing.preprocess_for_eval(im, width=299, height=299)\n    return fn, im\n\n  dataset = tf.contrib.data.Dataset.list_files('{}/*/*.jpg'.format(FLAGS.dataset_dir))\n  dataset.map(preprocess_image, num_threads=FLAGS.num_threads)\n  iterator = dataset.make_one_shot_iterator()\n  input_queue = tf.FIFOQueue(capacity=100*FLAGS.batch_size,\n                             dtypes = iterator.output_types,\n                             shapes=iterator.output_shapes)\n  enqueue_sample = input_queue.enqueue(iterator.get_next())\n  tf.train.add_queue_runner(tf.train.QueueRunner(input_queue, [enqueue_sample]*FLAGS.num_threads))\n  \n  filenames, images = input_queue.dequeue_up_to(FLAGS.batch_size)\n\nI still have to run this on a big dataset and check if there's any performance improvement, but at least it seems to execute correctly. The catch is, I couldn't find a way to iterate over the data more than once (which luckily enough is not my use-case), because the only iterator that won't raise an error when the QueueRunners spawn the threads is the one_shot_iterator.", "body": "@vvekic, I experimented a bit with queues and the Dataset API after realising in horror that of the 0.8s/step in my inference loop, 0.2s is data fetching (with GPU at 0% utilization), raising to almost 2 seconds if the HDD is being used by something else at the same time.\r\nMy pipeline looks as follows:\r\n\r\n```\r\n  def preprocess_image(fn):\r\n    im_s = tf.read_file(fn)\r\n    im = tf.image.decode_jpeg(im_s, channels=3)\r\n    im = inception_preprocessing.preprocess_for_eval(im, width=299, height=299)\r\n    return fn, im\r\n\r\n  dataset = tf.contrib.data.Dataset.list_files('{}/*/*.jpg'.format(FLAGS.dataset_dir))\r\n  dataset.map(preprocess_image, num_threads=FLAGS.num_threads)\r\n  iterator = dataset.make_one_shot_iterator()\r\n  input_queue = tf.FIFOQueue(capacity=100*FLAGS.batch_size,\r\n                             dtypes = iterator.output_types,\r\n                             shapes=iterator.output_shapes)\r\n  enqueue_sample = input_queue.enqueue(iterator.get_next())\r\n  tf.train.add_queue_runner(tf.train.QueueRunner(input_queue, [enqueue_sample]*FLAGS.num_threads))\r\n  \r\n  filenames, images = input_queue.dequeue_up_to(FLAGS.batch_size)\r\n```\r\nI still have to run this on a big dataset and check if there's any performance improvement, but at least it seems to execute correctly. The catch is, I couldn't find a way to iterate over the data more than once (which luckily enough is not my use-case), because the only iterator that won't raise an error when the `QueueRunner`s spawn the threads is the `one_shot_iterator`.\r\n"}