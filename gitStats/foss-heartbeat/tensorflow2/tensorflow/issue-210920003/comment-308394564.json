{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/308394564", "html_url": "https://github.com/tensorflow/tensorflow/issues/7951#issuecomment-308394564", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7951", "id": 308394564, "node_id": "MDEyOklzc3VlQ29tbWVudDMwODM5NDU2NA==", "user": {"login": "byronyi", "id": 2613663, "node_id": "MDQ6VXNlcjI2MTM2NjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2613663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/byronyi", "html_url": "https://github.com/byronyi", "followers_url": "https://api.github.com/users/byronyi/followers", "following_url": "https://api.github.com/users/byronyi/following{/other_user}", "gists_url": "https://api.github.com/users/byronyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/byronyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/byronyi/subscriptions", "organizations_url": "https://api.github.com/users/byronyi/orgs", "repos_url": "https://api.github.com/users/byronyi/repos", "events_url": "https://api.github.com/users/byronyi/events{/privacy}", "received_events_url": "https://api.github.com/users/byronyi/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-14T10:45:01Z", "updated_at": "2017-06-14T10:45:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1381301\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ppwwyyxx\">@ppwwyyxx</a> I believe a custom pipeline could be designed using TF server with distributed runtime, i.e. IPC send/recv ops. It's included in C API so it won't be too hard to port it to other languages. A down side is that you do need package the whole TF runtime wherever you need this pipeline.</p>\n<p>We are actually working on a out-of-band data plane for TF, but it is still a great deal of ongoing work. The design would be similar to the <a href=\"https://github.com/apache/spark/blob/master/core/src/main/scala/org/apache/spark/deploy/ExternalShuffleService.scala\">ExternalShuffleService</a> in Spark, using an in-memory storage such as LevelDB or LMDB, and a reader client in TF. If performance is a primary concern then it should be tightly integrated with hardware, i.e. GPU/NVMe/RNIC, etc.</p>", "body_text": "@ppwwyyxx I believe a custom pipeline could be designed using TF server with distributed runtime, i.e. IPC send/recv ops. It's included in C API so it won't be too hard to port it to other languages. A down side is that you do need package the whole TF runtime wherever you need this pipeline.\nWe are actually working on a out-of-band data plane for TF, but it is still a great deal of ongoing work. The design would be similar to the ExternalShuffleService in Spark, using an in-memory storage such as LevelDB or LMDB, and a reader client in TF. If performance is a primary concern then it should be tightly integrated with hardware, i.e. GPU/NVMe/RNIC, etc.", "body": "@ppwwyyxx I believe a custom pipeline could be designed using TF server with distributed runtime, i.e. IPC send/recv ops. It's included in C API so it won't be too hard to port it to other languages. A down side is that you do need package the whole TF runtime wherever you need this pipeline.\r\n\r\nWe are actually working on a out-of-band data plane for TF, but it is still a great deal of ongoing work. The design would be similar to the [ExternalShuffleService](https://github.com/apache/spark/blob/master/core/src/main/scala/org/apache/spark/deploy/ExternalShuffleService.scala) in Spark, using an in-memory storage such as LevelDB or LMDB, and a reader client in TF. If performance is a primary concern then it should be tightly integrated with hardware, i.e. GPU/NVMe/RNIC, etc."}