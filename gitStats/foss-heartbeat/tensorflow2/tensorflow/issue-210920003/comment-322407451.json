{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/322407451", "html_url": "https://github.com/tensorflow/tensorflow/issues/7951#issuecomment-322407451", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7951", "id": 322407451, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjQwNzQ1MQ==", "user": {"login": "rasmusbergpalm", "id": 206013, "node_id": "MDQ6VXNlcjIwNjAxMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/206013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasmusbergpalm", "html_url": "https://github.com/rasmusbergpalm", "followers_url": "https://api.github.com/users/rasmusbergpalm/followers", "following_url": "https://api.github.com/users/rasmusbergpalm/following{/other_user}", "gists_url": "https://api.github.com/users/rasmusbergpalm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasmusbergpalm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasmusbergpalm/subscriptions", "organizations_url": "https://api.github.com/users/rasmusbergpalm/orgs", "repos_url": "https://api.github.com/users/rasmusbergpalm/repos", "events_url": "https://api.github.com/users/rasmusbergpalm/events{/privacy}", "received_events_url": "https://api.github.com/users/rasmusbergpalm/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-15T08:17:39Z", "updated_at": "2017-08-15T08:17:39Z", "author_association": "NONE", "body_html": "<p>I think the queues are nice enough. I'd like to see two things improved though:</p>\n<p>An easier way of inputting data from native python other than using placeholders, and managing threads.</p>\n<p>Maybe a class <code>InputQueue(delegate, fn, n_filler_threads)</code> that takes a tensorflow queue delegate and a python function <code>fn</code>. <code>fn</code> returns a (possibly nested) tuple of np.array or lists. The InputQueue starts <code>n_filler_threads</code> that calls <code>fn</code> and puts these on the <code>delegate</code>. The threads are daemons so shuts down when the main process does.</p>\n<p>Anyway, that's just my thoughts. It's probably a lot harder than this due to the static requirements of tensorflow. Maybe you just have to provide the sizes when you create the <code>delegate</code>.</p>", "body_text": "I think the queues are nice enough. I'd like to see two things improved though:\nAn easier way of inputting data from native python other than using placeholders, and managing threads.\nMaybe a class InputQueue(delegate, fn, n_filler_threads) that takes a tensorflow queue delegate and a python function fn. fn returns a (possibly nested) tuple of np.array or lists. The InputQueue starts n_filler_threads that calls fn and puts these on the delegate. The threads are daemons so shuts down when the main process does.\nAnyway, that's just my thoughts. It's probably a lot harder than this due to the static requirements of tensorflow. Maybe you just have to provide the sizes when you create the delegate.", "body": "I think the queues are nice enough. I'd like to see two things improved though:\r\n\r\nAn easier way of inputting data from native python other than using placeholders, and managing threads. \r\n\r\nMaybe a class `InputQueue(delegate, fn, n_filler_threads)` that takes a tensorflow queue delegate and a python function `fn`. `fn` returns a (possibly nested) tuple of np.array or lists. The InputQueue starts `n_filler_threads` that calls `fn` and puts these on the `delegate`. The threads are daemons so shuts down when the main process does. \r\n\r\nAnyway, that's just my thoughts. It's probably a lot harder than this due to the static requirements of tensorflow. Maybe you just have to provide the sizes when you create the `delegate`."}