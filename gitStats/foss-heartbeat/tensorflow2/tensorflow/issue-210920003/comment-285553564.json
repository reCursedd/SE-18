{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/285553564", "html_url": "https://github.com/tensorflow/tensorflow/issues/7951#issuecomment-285553564", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7951", "id": 285553564, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTU1MzU2NA==", "user": {"login": "taion", "id": 3112159, "node_id": "MDQ6VXNlcjMxMTIxNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3112159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taion", "html_url": "https://github.com/taion", "followers_url": "https://api.github.com/users/taion/followers", "following_url": "https://api.github.com/users/taion/following{/other_user}", "gists_url": "https://api.github.com/users/taion/gists{/gist_id}", "starred_url": "https://api.github.com/users/taion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taion/subscriptions", "organizations_url": "https://api.github.com/users/taion/orgs", "repos_url": "https://api.github.com/users/taion/repos", "events_url": "https://api.github.com/users/taion/events{/privacy}", "received_events_url": "https://api.github.com/users/taion/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-10T02:18:43Z", "updated_at": "2017-03-10T02:18:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>A couple of concrete use cases that come up for us:</p>\n<ul>\n<li>One of our models is a localization model. We use scikit-image <code>AffineTransform</code> objects to apply cropping and resizing operations for this model, because those objects let us easily translate our model output back to the original input coordinate space. It seems tricky to square this with a fully tensor-based API.</li>\n<li>We have data that comes from a large number of imbalanced segments, and in training we use some custom stratified sampling logic to ensure we present examples from each segment evenly. It's relatively straightforward for us to, in Python, generate a new draw from our original data set for every epoch, but it seems like in the API proposed above, we'd have to figure out how to implement this behavior as an <code>Iterator</code>, which seems less straightforward.</li>\n</ul>", "body_text": "A couple of concrete use cases that come up for us:\n\nOne of our models is a localization model. We use scikit-image AffineTransform objects to apply cropping and resizing operations for this model, because those objects let us easily translate our model output back to the original input coordinate space. It seems tricky to square this with a fully tensor-based API.\nWe have data that comes from a large number of imbalanced segments, and in training we use some custom stratified sampling logic to ensure we present examples from each segment evenly. It's relatively straightforward for us to, in Python, generate a new draw from our original data set for every epoch, but it seems like in the API proposed above, we'd have to figure out how to implement this behavior as an Iterator, which seems less straightforward.", "body": "A couple of concrete use cases that come up for us:\r\n\r\n- One of our models is a localization model. We use scikit-image `AffineTransform` objects to apply cropping and resizing operations for this model, because those objects let us easily translate our model output back to the original input coordinate space. It seems tricky to square this with a fully tensor-based API.\r\n- We have data that comes from a large number of imbalanced segments, and in training we use some custom stratified sampling logic to ensure we present examples from each segment evenly. It's relatively straightforward for us to, in Python, generate a new draw from our original data set for every epoch, but it seems like in the API proposed above, we'd have to figure out how to implement this behavior as an `Iterator`, which seems less straightforward."}