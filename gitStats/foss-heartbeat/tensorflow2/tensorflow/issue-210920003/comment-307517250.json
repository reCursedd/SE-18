{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/307517250", "html_url": "https://github.com/tensorflow/tensorflow/issues/7951#issuecomment-307517250", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7951", "id": 307517250, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzUxNzI1MA==", "user": {"login": "nirmalthacker", "id": 1928815, "node_id": "MDQ6VXNlcjE5Mjg4MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1928815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nirmalthacker", "html_url": "https://github.com/nirmalthacker", "followers_url": "https://api.github.com/users/nirmalthacker/followers", "following_url": "https://api.github.com/users/nirmalthacker/following{/other_user}", "gists_url": "https://api.github.com/users/nirmalthacker/gists{/gist_id}", "starred_url": "https://api.github.com/users/nirmalthacker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nirmalthacker/subscriptions", "organizations_url": "https://api.github.com/users/nirmalthacker/orgs", "repos_url": "https://api.github.com/users/nirmalthacker/repos", "events_url": "https://api.github.com/users/nirmalthacker/events{/privacy}", "received_events_url": "https://api.github.com/users/nirmalthacker/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-09T22:48:37Z", "updated_at": "2017-06-09T22:48:37Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1836763\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jasonkriss\">@jasonkriss</a> , I see - thanks! This is what I have now, and it handles what I wanted. Is this what you meant?</p>\n<pre><code>training_dataset = tf.contrib.data.Dataset.range(100)\nvalidation_dataset = tf.contrib.data.Dataset.range(900,950)\n\nt_iterator = tf.contrib.data.Iterator.from_structure(training_dataset.output_types,\n                                   training_dataset.output_shapes)\nv_iterator = tf.contrib.data.Iterator.from_structure(validation_dataset.output_types,\n                                   validation_dataset.output_shapes)\nis_validating = tf.placeholder(dtype=bool,shape=())\nnext_element = tf.cond(is_validating, lambda:v_iterator.get_next(), lambda:t_iterator.get_next())\n\ntraining_init_op = t_iterator.make_initializer(training_dataset)\nvalidation_init_op = v_iterator.make_initializer(validation_dataset)\n\nsess.run([training_init_op, validation_init_op])\n# Run 3 epochs with 10 steps each\nfor e in range(3):\n  print(\"Epoch: %d\" %e)\n  for step in range(11):\n    ne = sess.run(next_element, feed_dict={is_validating: False})\n    print(\"Step: %d Training set: next_element: %d \" %(step, ne))\n    if step % 5 == 0:\n      ne = sess.run(next_element, feed_dict={is_validating: True})\n      print(\"Step: %d Validation set: next_element: %d \" %(step, ne))\n</code></pre>", "body_text": "@jasonkriss , I see - thanks! This is what I have now, and it handles what I wanted. Is this what you meant?\ntraining_dataset = tf.contrib.data.Dataset.range(100)\nvalidation_dataset = tf.contrib.data.Dataset.range(900,950)\n\nt_iterator = tf.contrib.data.Iterator.from_structure(training_dataset.output_types,\n                                   training_dataset.output_shapes)\nv_iterator = tf.contrib.data.Iterator.from_structure(validation_dataset.output_types,\n                                   validation_dataset.output_shapes)\nis_validating = tf.placeholder(dtype=bool,shape=())\nnext_element = tf.cond(is_validating, lambda:v_iterator.get_next(), lambda:t_iterator.get_next())\n\ntraining_init_op = t_iterator.make_initializer(training_dataset)\nvalidation_init_op = v_iterator.make_initializer(validation_dataset)\n\nsess.run([training_init_op, validation_init_op])\n# Run 3 epochs with 10 steps each\nfor e in range(3):\n  print(\"Epoch: %d\" %e)\n  for step in range(11):\n    ne = sess.run(next_element, feed_dict={is_validating: False})\n    print(\"Step: %d Training set: next_element: %d \" %(step, ne))\n    if step % 5 == 0:\n      ne = sess.run(next_element, feed_dict={is_validating: True})\n      print(\"Step: %d Validation set: next_element: %d \" %(step, ne))", "body": "@jasonkriss , I see - thanks! This is what I have now, and it handles what I wanted. Is this what you meant?\r\n\r\n```\r\ntraining_dataset = tf.contrib.data.Dataset.range(100)\r\nvalidation_dataset = tf.contrib.data.Dataset.range(900,950)\r\n\r\nt_iterator = tf.contrib.data.Iterator.from_structure(training_dataset.output_types,\r\n                                   training_dataset.output_shapes)\r\nv_iterator = tf.contrib.data.Iterator.from_structure(validation_dataset.output_types,\r\n                                   validation_dataset.output_shapes)\r\nis_validating = tf.placeholder(dtype=bool,shape=())\r\nnext_element = tf.cond(is_validating, lambda:v_iterator.get_next(), lambda:t_iterator.get_next())\r\n\r\ntraining_init_op = t_iterator.make_initializer(training_dataset)\r\nvalidation_init_op = v_iterator.make_initializer(validation_dataset)\r\n\r\nsess.run([training_init_op, validation_init_op])\r\n# Run 3 epochs with 10 steps each\r\nfor e in range(3):\r\n  print(\"Epoch: %d\" %e)\r\n  for step in range(11):\r\n    ne = sess.run(next_element, feed_dict={is_validating: False})\r\n    print(\"Step: %d Training set: next_element: %d \" %(step, ne))\r\n    if step % 5 == 0:\r\n      ne = sess.run(next_element, feed_dict={is_validating: True})\r\n      print(\"Step: %d Validation set: next_element: %d \" %(step, ne))\r\n```"}