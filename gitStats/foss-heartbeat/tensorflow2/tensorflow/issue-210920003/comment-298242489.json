{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/298242489", "html_url": "https://github.com/tensorflow/tensorflow/issues/7951#issuecomment-298242489", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7951", "id": 298242489, "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODI0MjQ4OQ==", "user": {"login": "sjperkins", "id": 3530212, "node_id": "MDQ6VXNlcjM1MzAyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3530212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjperkins", "html_url": "https://github.com/sjperkins", "followers_url": "https://api.github.com/users/sjperkins/followers", "following_url": "https://api.github.com/users/sjperkins/following{/other_user}", "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions", "organizations_url": "https://api.github.com/users/sjperkins/orgs", "repos_url": "https://api.github.com/users/sjperkins/repos", "events_url": "https://api.github.com/users/sjperkins/events{/privacy}", "received_events_url": "https://api.github.com/users/sjperkins/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-30T16:36:23Z", "updated_at": "2017-05-01T17:40:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Another thing that would be cool would be the ability for Session's to return Futures that could then be used as input to other Session runs. Said future could then be passed through the graph until the Tensor it represents requires evaluation.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> S:\n   <span class=\"pl-c\"><span class=\"pl-c\">#</span> Note executor semantics</span>\n   future <span class=\"pl-k\">=</span> S.submit(op_1, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>input_1<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">1.0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>input_2<span class=\"pl-pds\">'</span></span>:<span class=\"pl-c1\">2.0</span>})\n   result <span class=\"pl-k\">=</span> S.run(op_2, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>data<span class=\"pl-pds\">'</span></span>: future})</pre></div>\n<p>This concept is inspired by <a href=\"https://github.com/dask/distributed\">dask distributed</a> and other executor frameworks -- I think the flexibility offered by this abstraction is great!</p>", "body_text": "Another thing that would be cool would be the ability for Session's to return Futures that could then be used as input to other Session runs. Said future could then be passed through the graph until the Tensor it represents requires evaluation.\nwith tf.Session() as S:\n   # Note executor semantics\n   future = S.submit(op_1, feed_dict={'input_1': 1.0, 'input_2':2.0})\n   result = S.run(op_2, feed_dict={'data': future})\nThis concept is inspired by dask distributed and other executor frameworks -- I think the flexibility offered by this abstraction is great!", "body": "Another thing that would be cool would be the ability for Session's to return Futures that could then be used as input to other Session runs. Said future could then be passed through the graph until the Tensor it represents requires evaluation.\r\n\r\n```python \r\nwith tf.Session() as S:\r\n   # Note executor semantics\r\n   future = S.submit(op_1, feed_dict={'input_1': 1.0, 'input_2':2.0})\r\n   result = S.run(op_2, feed_dict={'data': future})\r\n```\r\n\r\nThis concept is inspired by [dask distributed](https://github.com/dask/distributed) and other executor frameworks -- I think the flexibility offered by this abstraction is great!"}