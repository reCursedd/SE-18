{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/287813166", "html_url": "https://github.com/tensorflow/tensorflow/issues/7951#issuecomment-287813166", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7951", "id": 287813166, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzgxMzE2Ng==", "user": {"login": "futurely", "id": 9004594, "node_id": "MDQ6VXNlcjkwMDQ1OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/9004594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/futurely", "html_url": "https://github.com/futurely", "followers_url": "https://api.github.com/users/futurely/followers", "following_url": "https://api.github.com/users/futurely/following{/other_user}", "gists_url": "https://api.github.com/users/futurely/gists{/gist_id}", "starred_url": "https://api.github.com/users/futurely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/futurely/subscriptions", "organizations_url": "https://api.github.com/users/futurely/orgs", "repos_url": "https://api.github.com/users/futurely/repos", "events_url": "https://api.github.com/users/futurely/events{/privacy}", "received_events_url": "https://api.github.com/users/futurely/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-20T16:21:29Z", "updated_at": "2017-03-20T16:28:00Z", "author_association": "NONE", "body_html": "<p>MXNet <a href=\"https://github.com/dmlc/mxnet/search?utf8=%E2%9C%93&amp;q=IIterator&amp;type=Code\">IIterator</a> is a more relevant example than Java's Stream API, Scala's collections (and hence Spark's RDDs), and .NET's Language Integrated Query.  The design enables flexible composition of various components of the input pipeline such as  <a href=\"https://github.com/dmlc/mxnet/blob/d8e64a67f1b5b8eff287a5305e7a86714d3b1aeb/src/io/iter_image_recordio.cc\">ImageRecordIter</a>, <a href=\"https://github.com/dmlc/mxnet/search?utf8=%E2%9C%93&amp;q=ImageNormalizeIter\">ImageNormalizeIter</a>, <a href=\"https://github.com/dmlc/mxnet/search?utf8=%E2%9C%93&amp;q=BatchLoader&amp;type=Code\">BatchLoader</a>, <a href=\"https://github.com/dmlc/mxnet/search?utf8=%E2%9C%93&amp;q=PrefetcherIter&amp;type=Code\">PrefetcherIter</a> and <a href=\"https://github.com/dmlc/mxnet/search?utf8=%E2%9C%93&amp;q=aug_default&amp;type=Code\">ImageAugmenter</a>.</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-en\">MXNET_REGISTER_IO_ITER</span>(ImageRecordIter)\n.describe(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Create iterator for dataset packed in recordio.<span class=\"pl-pds\">\"</span></span>)\n.add_arguments(ImageRecParserParam::__FIELDS__())\n.add_arguments(ImageRecordParam::__FIELDS__())\n.add_arguments(BatchParam::__FIELDS__())\n.add_arguments(PrefetcherParam::__FIELDS__())\n.add_arguments(ListDefaultAugParams())\n.add_arguments(ImageNormalizeParam::__FIELDS__())\n.set_body([]() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">PrefetcherIter</span>(\n        <span class=\"pl-k\">new</span> <span class=\"pl-c1\">BatchLoader</span>(\n            <span class=\"pl-k\">new</span> <span class=\"pl-c1\">ImageNormalizeIter</span>(\n                <span class=\"pl-k\">new</span> ImageRecordIter&lt;<span class=\"pl-c1\">real_t</span>&gt;())));\n  });</pre></div>\n<p>Caffe <a href=\"https://github.com/BVLC/caffe/search?l=C%2B%2B&amp;p=1&amp;q=db&amp;utf8=%E2%9C%93\">DB</a> is simpler but still usable.</p>\n<p>Ideally, the newly designed API should be able to load existing datasets of Caffe &amp; MXNet with easy to implement <a href=\"https://github.com/dmlc/mxnet/search?utf8=%E2%9C%93&amp;q=Caffe+Iter&amp;type=Code\">plugins</a>.</p>", "body_text": "MXNet IIterator is a more relevant example than Java's Stream API, Scala's collections (and hence Spark's RDDs), and .NET's Language Integrated Query.  The design enables flexible composition of various components of the input pipeline such as  ImageRecordIter, ImageNormalizeIter, BatchLoader, PrefetcherIter and ImageAugmenter.\nMXNET_REGISTER_IO_ITER(ImageRecordIter)\n.describe(\"Create iterator for dataset packed in recordio.\")\n.add_arguments(ImageRecParserParam::__FIELDS__())\n.add_arguments(ImageRecordParam::__FIELDS__())\n.add_arguments(BatchParam::__FIELDS__())\n.add_arguments(PrefetcherParam::__FIELDS__())\n.add_arguments(ListDefaultAugParams())\n.add_arguments(ImageNormalizeParam::__FIELDS__())\n.set_body([]() {\n    return new PrefetcherIter(\n        new BatchLoader(\n            new ImageNormalizeIter(\n                new ImageRecordIter<real_t>())));\n  });\nCaffe DB is simpler but still usable.\nIdeally, the newly designed API should be able to load existing datasets of Caffe & MXNet with easy to implement plugins.", "body": "MXNet [IIterator](https://github.com/dmlc/mxnet/search?utf8=%E2%9C%93&q=IIterator&type=Code) is a more relevant example than Java's Stream API, Scala's collections (and hence Spark's RDDs), and .NET's Language Integrated Query.  The design enables flexible composition of various components of the input pipeline such as  [ImageRecordIter](https://github.com/dmlc/mxnet/blob/d8e64a67f1b5b8eff287a5305e7a86714d3b1aeb/src/io/iter_image_recordio.cc), [ImageNormalizeIter](https://github.com/dmlc/mxnet/search?utf8=%E2%9C%93&q=ImageNormalizeIter), [BatchLoader](https://github.com/dmlc/mxnet/search?utf8=%E2%9C%93&q=BatchLoader&type=Code), [PrefetcherIter](https://github.com/dmlc/mxnet/search?utf8=%E2%9C%93&q=PrefetcherIter&type=Code) and [ImageAugmenter](https://github.com/dmlc/mxnet/search?utf8=%E2%9C%93&q=aug_default&type=Code).\r\n```cpp\r\nMXNET_REGISTER_IO_ITER(ImageRecordIter)\r\n.describe(\"Create iterator for dataset packed in recordio.\")\r\n.add_arguments(ImageRecParserParam::__FIELDS__())\r\n.add_arguments(ImageRecordParam::__FIELDS__())\r\n.add_arguments(BatchParam::__FIELDS__())\r\n.add_arguments(PrefetcherParam::__FIELDS__())\r\n.add_arguments(ListDefaultAugParams())\r\n.add_arguments(ImageNormalizeParam::__FIELDS__())\r\n.set_body([]() {\r\n    return new PrefetcherIter(\r\n        new BatchLoader(\r\n            new ImageNormalizeIter(\r\n                new ImageRecordIter<real_t>())));\r\n  });\r\n```\r\nCaffe [DB](https://github.com/BVLC/caffe/search?l=C%2B%2B&p=1&q=db&utf8=%E2%9C%93) is simpler but still usable.\r\n\r\nIdeally, the newly designed API should be able to load existing datasets of Caffe & MXNet with easy to implement [plugins](https://github.com/dmlc/mxnet/search?utf8=%E2%9C%93&q=Caffe+Iter&type=Code)."}