{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17979", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17979/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17979/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17979/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17979", "id": 308320528, "node_id": "MDU6SXNzdWUzMDgzMjA1Mjg=", "number": 17979, "title": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Invalid JPEG data or crop window, data size 15022 ", "user": {"login": "taiwotman", "id": 751668, "node_id": "MDQ6VXNlcjc1MTY2OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/751668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiwotman", "html_url": "https://github.com/taiwotman", "followers_url": "https://api.github.com/users/taiwotman/followers", "following_url": "https://api.github.com/users/taiwotman/following{/other_user}", "gists_url": "https://api.github.com/users/taiwotman/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiwotman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiwotman/subscriptions", "organizations_url": "https://api.github.com/users/taiwotman/orgs", "repos_url": "https://api.github.com/users/taiwotman/repos", "events_url": "https://api.github.com/users/taiwotman/events{/privacy}", "received_events_url": "https://api.github.com/users/taiwotman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-03-25T04:07:05Z", "updated_at": "2018-04-09T20:09:15Z", "closed_at": "2018-04-09T20:01:03Z", "author_association": "NONE", "body_html": "<p>On the terminal window, it runs fine when an image is passed to tensorflow for image object recognition using:</p>\n<p><code>python run.py http://image_url.jpg</code></p>\n<p>However, with JSON data that contains stream of imageURL, it failed with the following main error:</p>\n<pre><code>InvalidArgumentError: Invalid JPEG data or crop window, data size 15022\n [[Node: DecodeJpeg = DecodeJpeg[acceptable_fraction=1, channels=3, dct_method=\"\", fancy_upscaling=true, ratio=1, try_recover_truncated=false, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](_arg_DecodeJpeg/contents_0_0)]]\nCaused by op u'DecodeJpeg'\n</code></pre>\n<p>Another error encountered:</p>\n<p><code>ValueError: GraphDef cannot be larger than 2GB.</code></p>\n<p>Below is my tensorflow source code as a function(again it runs with single ImageUrl passed as parameter):</p>\n<pre><code>import tensorflow as tf\nimport sys\nimport os\nimport urllib2\n\ndef tensorflow_pred(imageUrl):\n\n    #suppress TF log-info messages - remove to display TF logs \n    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\n\n    response = urllib2.urlopen(imageUrl)\n\n    image_data = response.read()\n\n    # Loads label file, strips off carriage return\n    label_lines = [line.rstrip() for line \n                    in tf.gfile.GFile(\"./retrained_labels.txt\")]\n\n    # Unpersists graph from file\n    with tf.gfile.FastGFile(\"./retrained_graph.pb\", 'rb') as f:\n        graph_def = tf.GraphDef()\n        graph_def.ParseFromString(f.read())\n        _ = tf.import_graph_def(graph_def, name='')\n\n    with tf.Session() as sess:\n        # Feed the image_data as input to the graph and get first prediction\n        softmax_tensor = sess.graph.get_tensor_by_name('final_result:0')\n        \n        predictions = sess.run(softmax_tensor, \\\n                {'DecodeJpeg/contents:0': image_data})\n        \n        # Sort to show labels of first prediction in order of confidence\n        top_k = predictions[0].argsort()[-len(predictions[0]):][::-1]\n        \n        for node_id in top_k:\n            classification = label_lines[node_id]\n            score = predictions[0][node_id]\n            if (score &gt;=0.5):\n                return ('%s (score = %.5f)' % (classification, score))\n</code></pre>", "body_text": "On the terminal window, it runs fine when an image is passed to tensorflow for image object recognition using:\npython run.py http://image_url.jpg\nHowever, with JSON data that contains stream of imageURL, it failed with the following main error:\nInvalidArgumentError: Invalid JPEG data or crop window, data size 15022\n [[Node: DecodeJpeg = DecodeJpeg[acceptable_fraction=1, channels=3, dct_method=\"\", fancy_upscaling=true, ratio=1, try_recover_truncated=false, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](_arg_DecodeJpeg/contents_0_0)]]\nCaused by op u'DecodeJpeg'\n\nAnother error encountered:\nValueError: GraphDef cannot be larger than 2GB.\nBelow is my tensorflow source code as a function(again it runs with single ImageUrl passed as parameter):\nimport tensorflow as tf\nimport sys\nimport os\nimport urllib2\n\ndef tensorflow_pred(imageUrl):\n\n    #suppress TF log-info messages - remove to display TF logs \n    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\n\n    response = urllib2.urlopen(imageUrl)\n\n    image_data = response.read()\n\n    # Loads label file, strips off carriage return\n    label_lines = [line.rstrip() for line \n                    in tf.gfile.GFile(\"./retrained_labels.txt\")]\n\n    # Unpersists graph from file\n    with tf.gfile.FastGFile(\"./retrained_graph.pb\", 'rb') as f:\n        graph_def = tf.GraphDef()\n        graph_def.ParseFromString(f.read())\n        _ = tf.import_graph_def(graph_def, name='')\n\n    with tf.Session() as sess:\n        # Feed the image_data as input to the graph and get first prediction\n        softmax_tensor = sess.graph.get_tensor_by_name('final_result:0')\n        \n        predictions = sess.run(softmax_tensor, \\\n                {'DecodeJpeg/contents:0': image_data})\n        \n        # Sort to show labels of first prediction in order of confidence\n        top_k = predictions[0].argsort()[-len(predictions[0]):][::-1]\n        \n        for node_id in top_k:\n            classification = label_lines[node_id]\n            score = predictions[0][node_id]\n            if (score >=0.5):\n                return ('%s (score = %.5f)' % (classification, score))", "body": "On the terminal window, it runs fine when an image is passed to tensorflow for image object recognition using:\r\n\r\n`python run.py http://image_url.jpg`\r\n\r\nHowever, with JSON data that contains stream of imageURL, it failed with the following main error:\r\n\r\n    InvalidArgumentError: Invalid JPEG data or crop window, data size 15022\r\n\t [[Node: DecodeJpeg = DecodeJpeg[acceptable_fraction=1, channels=3, dct_method=\"\", fancy_upscaling=true, ratio=1, try_recover_truncated=false, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](_arg_DecodeJpeg/contents_0_0)]]\r\n    Caused by op u'DecodeJpeg'\r\n\r\nAnother error encountered:\r\n\r\n`ValueError: GraphDef cannot be larger than 2GB.`\r\n\r\n\r\nBelow is my tensorflow source code as a function(again it runs with single ImageUrl passed as parameter):\r\n\r\n    import tensorflow as tf\r\n    import sys\r\n    import os\r\n    import urllib2\r\n    \r\n    def tensorflow_pred(imageUrl):\r\n    \r\n        #suppress TF log-info messages - remove to display TF logs \r\n        os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\r\n    \r\n        response = urllib2.urlopen(imageUrl)\r\n    \r\n        image_data = response.read()\r\n    \r\n        # Loads label file, strips off carriage return\r\n        label_lines = [line.rstrip() for line \r\n                        in tf.gfile.GFile(\"./retrained_labels.txt\")]\r\n    \r\n        # Unpersists graph from file\r\n        with tf.gfile.FastGFile(\"./retrained_graph.pb\", 'rb') as f:\r\n            graph_def = tf.GraphDef()\r\n            graph_def.ParseFromString(f.read())\r\n            _ = tf.import_graph_def(graph_def, name='')\r\n    \r\n        with tf.Session() as sess:\r\n            # Feed the image_data as input to the graph and get first prediction\r\n            softmax_tensor = sess.graph.get_tensor_by_name('final_result:0')\r\n            \r\n            predictions = sess.run(softmax_tensor, \\\r\n                    {'DecodeJpeg/contents:0': image_data})\r\n            \r\n            # Sort to show labels of first prediction in order of confidence\r\n            top_k = predictions[0].argsort()[-len(predictions[0]):][::-1]\r\n            \r\n            for node_id in top_k:\r\n                classification = label_lines[node_id]\r\n                score = predictions[0][node_id]\r\n                if (score >=0.5):\r\n                    return ('%s (score = %.5f)' % (classification, score))\r\n            "}