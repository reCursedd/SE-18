{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20789", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20789/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20789/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20789/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20789", "id": 341140131, "node_id": "MDU6SXNzdWUzNDExNDAxMzE=", "number": 20789, "title": "Tensorflow 1.8.0 and 1.9.0 behavioural difference for tf.layers.Layer API ", "user": {"login": "n3011", "id": 3139632, "node_id": "MDQ6VXNlcjMxMzk2MzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3139632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n3011", "html_url": "https://github.com/n3011", "followers_url": "https://api.github.com/users/n3011/followers", "following_url": "https://api.github.com/users/n3011/following{/other_user}", "gists_url": "https://api.github.com/users/n3011/gists{/gist_id}", "starred_url": "https://api.github.com/users/n3011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n3011/subscriptions", "organizations_url": "https://api.github.com/users/n3011/orgs", "repos_url": "https://api.github.com/users/n3011/repos", "events_url": "https://api.github.com/users/n3011/events{/privacy}", "received_events_url": "https://api.github.com/users/n3011/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-07-13T19:52:09Z", "updated_at": "2018-07-29T17:55:04Z", "closed_at": "2018-07-29T17:55:04Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li>\n<p><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</p>\n</li>\n<li>\n<p><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</p>\n</li>\n<li>\n<p><strong>TensorFlow installed from (source or binary)</strong>: binary</p>\n</li>\n<li>\n<p><strong>TensorFlow version (use command below)</strong>: 1.8.0 and 1.9.0</p>\n</li>\n<li>\n<p><strong>Python version</strong>: 3.5.5</p>\n</li>\n<li>\n<p><strong>Bazel version (if compiling from source)</strong>:</p>\n</li>\n<li>\n<p><strong>GCC/Compiler version (if compiling from source)</strong>:</p>\n</li>\n<li>\n<p><strong>CUDA/cuDNN version</strong>: cpu</p>\n</li>\n<li>\n<p><strong>GPU model and memory</strong>: N/A</p>\n</li>\n<li>\n<p><strong>Exact command to reproduce</strong>:</p>\n<pre><code>import tensorflow as tf\n\n\nclass LayersBaseTest(tf.test.TestCase):\n\n  def test_create_variable(self):\n\n    class MyLayer(tf.layers.Layer):\n\n       def build(self, _):\n         # Do not mark the layer as built.\n          pass\n\n        def call(self, inputs):\n          self.my_var = self.add_variable('my_var', [2, 2])\n          if self.built:\n            self.add_variable('this_will_break_on_second_call', [2, 2])\n          return inputs + tf.square(self.my_var)\n\n    layer = MyLayer(name='my_layer')\n    inputs = tf.random_uniform((2,), seed=1)\n    outputs = layer.apply(inputs)\n    self.assertEqual(layer.built, True)\n    self.assertEqual(outputs.op.name, 'my_layer/add')\n    self.assertListEqual([v.name for v in layer.variables], ['my_layer/my_var:0'])\n    with self.assertRaisesRegex(ValueError, 'my_layer/this_will_break_on_second_call'):\n      layer.apply(inputs)\n    # The list of variables hasn't changed.\n    self.assertListEqual([v.name for v in layer.variables], ['my_layer/my_var:0'])\n\n\nif __name__ == '__main__':\n  tf.test.main()\n</code></pre>\n</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>the above tests passed with tensorflow version <code>1.8.0</code></p>\n<p>Throws the following errors with tensorflow version <code>1.9.0</code>. The <code>tf.layers.Layer</code> shouldn't create another variable with the same name even after throwing the <code>ValueError</code> on the second call to <code>layer.apply</code>. This behaviours s unexpected.</p>\n<h3>logs</h3>\n<blockquote>\n<h2>FAIL: test_create_variable (<strong>main</strong>.LayersBaseTest)</h2>\n<p>Traceback (most recent call last):<br>\nFile \"test_layer_base_tf1.9.py\", line 29, in test_create_variable<br>\nself.assertListEqual([v.name for v in layer.variables], ['my_layer/my_var:0'])<br>\nAssertionError: Lists differ: ['my_layer/my_var:0', 'my_layer/my_var:0'] != ['my_layer/my_var:0']<br>\nFirst list contains 1 additional elements.<br>\nFirst extra element 1:<br>\n&gt;'my_layer/my_var:0'<br>\n&gt; - ['my_layer/my_var:0', 'my_layer/my_var:0']<br>\n&gt; + ['my_layer/my_var:0']</p>\n</blockquote>", "body_text": "System information\n\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\n\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\n\n\nTensorFlow installed from (source or binary): binary\n\n\nTensorFlow version (use command below): 1.8.0 and 1.9.0\n\n\nPython version: 3.5.5\n\n\nBazel version (if compiling from source):\n\n\nGCC/Compiler version (if compiling from source):\n\n\nCUDA/cuDNN version: cpu\n\n\nGPU model and memory: N/A\n\n\nExact command to reproduce:\nimport tensorflow as tf\n\n\nclass LayersBaseTest(tf.test.TestCase):\n\n  def test_create_variable(self):\n\n    class MyLayer(tf.layers.Layer):\n\n       def build(self, _):\n         # Do not mark the layer as built.\n          pass\n\n        def call(self, inputs):\n          self.my_var = self.add_variable('my_var', [2, 2])\n          if self.built:\n            self.add_variable('this_will_break_on_second_call', [2, 2])\n          return inputs + tf.square(self.my_var)\n\n    layer = MyLayer(name='my_layer')\n    inputs = tf.random_uniform((2,), seed=1)\n    outputs = layer.apply(inputs)\n    self.assertEqual(layer.built, True)\n    self.assertEqual(outputs.op.name, 'my_layer/add')\n    self.assertListEqual([v.name for v in layer.variables], ['my_layer/my_var:0'])\n    with self.assertRaisesRegex(ValueError, 'my_layer/this_will_break_on_second_call'):\n      layer.apply(inputs)\n    # The list of variables hasn't changed.\n    self.assertListEqual([v.name for v in layer.variables], ['my_layer/my_var:0'])\n\n\nif __name__ == '__main__':\n  tf.test.main()\n\n\n\nDescribe the problem\nthe above tests passed with tensorflow version 1.8.0\nThrows the following errors with tensorflow version 1.9.0. The tf.layers.Layer shouldn't create another variable with the same name even after throwing the ValueError on the second call to layer.apply. This behaviours s unexpected.\nlogs\n\nFAIL: test_create_variable (main.LayersBaseTest)\nTraceback (most recent call last):\nFile \"test_layer_base_tf1.9.py\", line 29, in test_create_variable\nself.assertListEqual([v.name for v in layer.variables], ['my_layer/my_var:0'])\nAssertionError: Lists differ: ['my_layer/my_var:0', 'my_layer/my_var:0'] != ['my_layer/my_var:0']\nFirst list contains 1 additional elements.\nFirst extra element 1:\n>'my_layer/my_var:0'\n> - ['my_layer/my_var:0', 'my_layer/my_var:0']\n> + ['my_layer/my_var:0']", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.8.0 and 1.9.0\r\n- **Python version**: 3.5.5\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: cpu\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**:\r\n\r\n      import tensorflow as tf\r\n\r\n\r\n      class LayersBaseTest(tf.test.TestCase):\r\n\r\n        def test_create_variable(self):\r\n  \r\n          class MyLayer(tf.layers.Layer):\r\n\r\n             def build(self, _):\r\n               # Do not mark the layer as built.\r\n                pass\r\n\r\n              def call(self, inputs):\r\n                self.my_var = self.add_variable('my_var', [2, 2])\r\n                if self.built:\r\n                  self.add_variable('this_will_break_on_second_call', [2, 2])\r\n                return inputs + tf.square(self.my_var)\r\n\r\n          layer = MyLayer(name='my_layer')\r\n          inputs = tf.random_uniform((2,), seed=1)\r\n          outputs = layer.apply(inputs)\r\n          self.assertEqual(layer.built, True)\r\n          self.assertEqual(outputs.op.name, 'my_layer/add')\r\n          self.assertListEqual([v.name for v in layer.variables], ['my_layer/my_var:0'])\r\n          with self.assertRaisesRegex(ValueError, 'my_layer/this_will_break_on_second_call'):\r\n            layer.apply(inputs)\r\n          # The list of variables hasn't changed.\r\n          self.assertListEqual([v.name for v in layer.variables], ['my_layer/my_var:0'])\r\n\r\n\r\n      if __name__ == '__main__':\r\n        tf.test.main()\r\n\r\n### Describe the problem\r\nthe above tests passed with tensorflow version `1.8.0`\r\n\r\nThrows the following errors with tensorflow version `1.9.0`. The `tf.layers.Layer` shouldn't create another variable with the same name even after throwing the `ValueError` on the second call to `layer.apply`. This behaviours s unexpected. \r\n###  logs\r\n>FAIL: test_create_variable (__main__.LayersBaseTest)\r\n >----------------------------------------------------------------------\r\n >Traceback (most recent call last):\r\n  >File \"test_layer_base_tf1.9.py\", line 29, in test_create_variable\r\n   >self.assertListEqual([v.name for v in layer.variables], ['my_layer/my_var:0'])\r\n  >AssertionError: Lists differ: ['my_layer/my_var:0', 'my_layer/my_var:0'] != ['my_layer/my_var:0']\r\n   >First list contains 1 additional elements.\r\n   >First extra element 1:  \r\n    >'my_layer/my_var:0'\r\n    > - ['my_layer/my_var:0', 'my_layer/my_var:0']\r\n    > + ['my_layer/my_var:0']"}