{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3080", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3080/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3080/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3080/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3080", "id": 162729673, "node_id": "MDU6SXNzdWUxNjI3Mjk2NzM=", "number": 3080, "title": "Problem with meta file size when saving model initialized with pre-trained weights", "user": {"login": "SimsGautam", "id": 6364058, "node_id": "MDQ6VXNlcjYzNjQwNTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/6364058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimsGautam", "html_url": "https://github.com/SimsGautam", "followers_url": "https://api.github.com/users/SimsGautam/followers", "following_url": "https://api.github.com/users/SimsGautam/following{/other_user}", "gists_url": "https://api.github.com/users/SimsGautam/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimsGautam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimsGautam/subscriptions", "organizations_url": "https://api.github.com/users/SimsGautam/orgs", "repos_url": "https://api.github.com/users/SimsGautam/repos", "events_url": "https://api.github.com/users/SimsGautam/events{/privacy}", "received_events_url": "https://api.github.com/users/SimsGautam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-06-28T16:30:13Z", "updated_at": "2016-06-28T21:11:05Z", "closed_at": "2016-06-28T17:12:50Z", "author_association": "NONE", "body_html": "<h3>Context/Problem</h3>\n<p>I have pretrained models (from elsewhere) with weights saved as numpy arrays. I want to create a tensorflow model where the weights and biases are initialized with numpy arrays rather than random tensors. I am able to do this (code snippet below), but run into problems when I try saving/loading my model.</p>\n<p>Specifically, the problem involves using the <code>Saver</code> class to save <code>model</code> and <code>model.meta</code>. I expect <code>model.meta</code> to be much smaller in size than <code>model</code>, but this is not the case. In fact, using the code snippet below, you can see that the meta file is the same size as the model file.</p>\n<p>This results in problems when importing the meta file with much larger models.</p>\n<h3>Environment info</h3>\n<p>Operating System: Ubunutu 14.04<br>\nTensorflow version: '0.9.0rc0'</p>\n<h3>Steps to reproduce</h3>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\n# normally pretrained weights, but random arrays used for brevity\nweights = np.random.rand(1000, 500).astype(np.float32)\nbiases = np.random.rand(500).astype(np.float32)\n\nx = tf.placeholder(tf.float32, [None, 1000], name='input')\n\nW = tf.Variable(weights)\nb = tf.Variable(biases)\n\nfc = tf.matmul(x, W, name='fc1')\nfc = tf.nn.bias_add(fc, b)\ny_pred = tf.nn.softmax(fc, name='output')\n\n# saving model\nsess = tf.Session()\ninit_op = tf.initialize_all_variables()\nsess.run(init_op)\nsaver = tf.train.Saver()\nsaver.save(sess, \"model\")\n</code></pre>", "body_text": "Context/Problem\nI have pretrained models (from elsewhere) with weights saved as numpy arrays. I want to create a tensorflow model where the weights and biases are initialized with numpy arrays rather than random tensors. I am able to do this (code snippet below), but run into problems when I try saving/loading my model.\nSpecifically, the problem involves using the Saver class to save model and model.meta. I expect model.meta to be much smaller in size than model, but this is not the case. In fact, using the code snippet below, you can see that the meta file is the same size as the model file.\nThis results in problems when importing the meta file with much larger models.\nEnvironment info\nOperating System: Ubunutu 14.04\nTensorflow version: '0.9.0rc0'\nSteps to reproduce\nimport tensorflow as tf\nimport numpy as np\n\n# normally pretrained weights, but random arrays used for brevity\nweights = np.random.rand(1000, 500).astype(np.float32)\nbiases = np.random.rand(500).astype(np.float32)\n\nx = tf.placeholder(tf.float32, [None, 1000], name='input')\n\nW = tf.Variable(weights)\nb = tf.Variable(biases)\n\nfc = tf.matmul(x, W, name='fc1')\nfc = tf.nn.bias_add(fc, b)\ny_pred = tf.nn.softmax(fc, name='output')\n\n# saving model\nsess = tf.Session()\ninit_op = tf.initialize_all_variables()\nsess.run(init_op)\nsaver = tf.train.Saver()\nsaver.save(sess, \"model\")", "body": "### Context/Problem\n\nI have pretrained models (from elsewhere) with weights saved as numpy arrays. I want to create a tensorflow model where the weights and biases are initialized with numpy arrays rather than random tensors. I am able to do this (code snippet below), but run into problems when I try saving/loading my model.\n\nSpecifically, the problem involves using the `Saver` class to save `model` and `model.meta`. I expect `model.meta` to be much smaller in size than `model`, but this is not the case. In fact, using the code snippet below, you can see that the meta file is the same size as the model file.\n\nThis results in problems when importing the meta file with much larger models.\n### Environment info\n\nOperating System: Ubunutu 14.04\nTensorflow version: '0.9.0rc0'\n### Steps to reproduce\n\n```\nimport tensorflow as tf\nimport numpy as np\n\n# normally pretrained weights, but random arrays used for brevity\nweights = np.random.rand(1000, 500).astype(np.float32)\nbiases = np.random.rand(500).astype(np.float32)\n\nx = tf.placeholder(tf.float32, [None, 1000], name='input')\n\nW = tf.Variable(weights)\nb = tf.Variable(biases)\n\nfc = tf.matmul(x, W, name='fc1')\nfc = tf.nn.bias_add(fc, b)\ny_pred = tf.nn.softmax(fc, name='output')\n\n# saving model\nsess = tf.Session()\ninit_op = tf.initialize_all_variables()\nsess.run(init_op)\nsaver = tf.train.Saver()\nsaver.save(sess, \"model\")\n```\n"}