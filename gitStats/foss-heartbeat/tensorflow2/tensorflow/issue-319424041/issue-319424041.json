{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19017", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19017/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19017/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19017/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19017", "id": 319424041, "node_id": "MDU6SXNzdWUzMTk0MjQwNDE=", "number": 19017, "title": "Strang behavior in memory copy with control dependencies.", "user": {"login": "sleepfin", "id": 7370869, "node_id": "MDQ6VXNlcjczNzA4Njk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7370869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sleepfin", "html_url": "https://github.com/sleepfin", "followers_url": "https://api.github.com/users/sleepfin/followers", "following_url": "https://api.github.com/users/sleepfin/following{/other_user}", "gists_url": "https://api.github.com/users/sleepfin/gists{/gist_id}", "starred_url": "https://api.github.com/users/sleepfin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sleepfin/subscriptions", "organizations_url": "https://api.github.com/users/sleepfin/orgs", "repos_url": "https://api.github.com/users/sleepfin/repos", "events_url": "https://api.github.com/users/sleepfin/events{/privacy}", "received_events_url": "https://api.github.com/users/sleepfin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 17, "created_at": "2018-05-02T06:25:47Z", "updated_at": "2018-10-26T21:08:41Z", "closed_at": "2018-10-26T21:08:41Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: I have costom code.</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: <code>redhat-7.2</code></li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: <code>binary</code></li>\n<li><strong>TensorFlow version (use command below)</strong>: <code>1.4.0</code></li>\n<li><strong>Python version</strong>: <code>2.7</code></li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: <code>CUDA-8.0</code>, <code>cuDNN-6.0</code></li>\n<li><strong>GPU model and memory</strong>: <code>Nvidia - K80</code></li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>There are two different ways to apply memory copy from CPU to GPU:0 in the following code:</p>\n<pre><code>  with tf.control_dependencies([update_op]):\n    # Method-1 :\n    # with tf.device('/GPU:0'):\n    #   a_cpu_to_gpu = a_cpu.read_value()\n    # train_ops.append(vars[i].assign(a_cpu_to_gpu).op)\n\n    # Method-2 :\n    train_ops.append(vars[i].assign(a_cpu).op)\n</code></pre>\n<p><code>a_cpu</code> is a variable in CPU device. <code>vars[i]</code> is a variable in GPU:0 device. The first one (Method-1) is to read the value in GPU:0 and then assign it to <code>a_cpu_to_gpu</code>. the second one (Method-2) is directly assign the variable in CPU to the variable in GPU:0.</p>\n<p>When I enable the <code>trace_level</code>, I find that the timeline of those two codes are different:</p>\n<p>Method-1<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/7370869/39508070-8e8204a4-4e13-11e8-97e3-f166403f0bef.png\"><img src=\"https://user-images.githubusercontent.com/7370869/39508070-8e8204a4-4e13-11e8-97e3-f166403f0bef.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>\n<p>Method-2<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/7370869/39507750-05f705d6-4e12-11e8-8aec-ff88db046e77.png\"><img src=\"https://user-images.githubusercontent.com/7370869/39507750-05f705d6-4e12-11e8-8aec-ff88db046e77.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>\n<p>In <code>Method-1</code>, I think the read_value op <code>a_cpu.read_value()</code> only depends on the i-th <code>update_op</code>. So the MEMCPYHtoD (green bar) should be right after the the i-th update_op, which means right after the MEMCPYDtoH (purple bar). I don't understand why they appear in the end of the timeline.</p>\n<p>In <code>Method-2</code>, MEMCPYHtoD (green bar) appears at the beginning of the timeline. <code>vars[i].assign(a_cpu).op</code> depends on <code>update_op</code>, how can the memcpy be executed before the <code>update_op</code> ?</p>\n<p>I have no clue why it behaves like this, can anyone tell me why the memcpy behaves like that in <code>Method-1</code> and <code>Method-2</code> and what's the difference between them.</p>\n<p>Thanks.</p>\n<h3>Source code / logs</h3>\n<pre><code>import tensorflow as tf\nimport os\n\nfrom tensorflow.python.client import timeline\nslim = tf.contrib.slim\n\ntrain_ops = []\n\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1)\n\nnet = tf.random_normal(shape=(32, 16, 16, 128))\n\nwith tf.device('/GPU:0'):\n\n  for i in range(10):\n    net = slim.conv2d(net, 128, [11, 11], padding='SAME', scope='conv_%s' % i)\n\n  loss = tf.reduce_mean(net, name='loss_func')\n  grad = tf.gradients(loss, tf.global_variables(), gate_gradients=True, name='my_gradients')\n\nvars = tf.global_variables()\nnum_vars = len(vars)\n\nfor i in range(num_vars - 1, -1, -1):\n\n  with tf.device('/CPU:0'):\n    a_cpu = tf.get_variable('a_cpu_%s' % i, initializer=vars[i].initial_value)\n    update_op = optimizer.apply_gradients([(grad[i], a_cpu)], name='apply_%s' % i)\n\n  with tf.control_dependencies([update_op]):\n    # Method-1 :\n    # with tf.device('/GPU:0'):\n    #   a_cpu_to_gpu = a_cpu.read_value()\n    # train_ops.append(vars[i].assign(a_cpu_to_gpu).op)\n\n    # Method-2 :\n    train_ops.append(vars[i].assign(a_cpu).op)\n\n\nwith tf.Session() as sess:\n  sess.run(tf.global_variables_initializer())\n  for i in range(10):\n    run_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\n    run_metadata = tf.RunMetadata()\n    sess.run(train_ops, options=run_options, run_metadata=run_metadata)\n    trace_filename = os.path.join('/tmp/delete_me/trace', 'trace-global-step-%d.json' % i)\n    if not tf.gfile.Exists(os.path.dirname(trace_filename)):\n      os.makedirs(os.path.dirname(trace_filename))\n    trace = timeline.Timeline(step_stats=run_metadata.step_stats)\n    with tf.gfile.Open(trace_filename, 'w') as trace_file:\n      trace_file.write(trace.generate_chrome_trace_format(show_memory=False))\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): I have costom code.\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): redhat-7.2\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.4.0\nPython version: 2.7\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: CUDA-8.0, cuDNN-6.0\nGPU model and memory: Nvidia - K80\nExact command to reproduce:\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nThere are two different ways to apply memory copy from CPU to GPU:0 in the following code:\n  with tf.control_dependencies([update_op]):\n    # Method-1 :\n    # with tf.device('/GPU:0'):\n    #   a_cpu_to_gpu = a_cpu.read_value()\n    # train_ops.append(vars[i].assign(a_cpu_to_gpu).op)\n\n    # Method-2 :\n    train_ops.append(vars[i].assign(a_cpu).op)\n\na_cpu is a variable in CPU device. vars[i] is a variable in GPU:0 device. The first one (Method-1) is to read the value in GPU:0 and then assign it to a_cpu_to_gpu. the second one (Method-2) is directly assign the variable in CPU to the variable in GPU:0.\nWhen I enable the trace_level, I find that the timeline of those two codes are different:\nMethod-1\n\nMethod-2\n\nIn Method-1, I think the read_value op a_cpu.read_value() only depends on the i-th update_op. So the MEMCPYHtoD (green bar) should be right after the the i-th update_op, which means right after the MEMCPYDtoH (purple bar). I don't understand why they appear in the end of the timeline.\nIn Method-2, MEMCPYHtoD (green bar) appears at the beginning of the timeline. vars[i].assign(a_cpu).op depends on update_op, how can the memcpy be executed before the update_op ?\nI have no clue why it behaves like this, can anyone tell me why the memcpy behaves like that in Method-1 and Method-2 and what's the difference between them.\nThanks.\nSource code / logs\nimport tensorflow as tf\nimport os\n\nfrom tensorflow.python.client import timeline\nslim = tf.contrib.slim\n\ntrain_ops = []\n\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1)\n\nnet = tf.random_normal(shape=(32, 16, 16, 128))\n\nwith tf.device('/GPU:0'):\n\n  for i in range(10):\n    net = slim.conv2d(net, 128, [11, 11], padding='SAME', scope='conv_%s' % i)\n\n  loss = tf.reduce_mean(net, name='loss_func')\n  grad = tf.gradients(loss, tf.global_variables(), gate_gradients=True, name='my_gradients')\n\nvars = tf.global_variables()\nnum_vars = len(vars)\n\nfor i in range(num_vars - 1, -1, -1):\n\n  with tf.device('/CPU:0'):\n    a_cpu = tf.get_variable('a_cpu_%s' % i, initializer=vars[i].initial_value)\n    update_op = optimizer.apply_gradients([(grad[i], a_cpu)], name='apply_%s' % i)\n\n  with tf.control_dependencies([update_op]):\n    # Method-1 :\n    # with tf.device('/GPU:0'):\n    #   a_cpu_to_gpu = a_cpu.read_value()\n    # train_ops.append(vars[i].assign(a_cpu_to_gpu).op)\n\n    # Method-2 :\n    train_ops.append(vars[i].assign(a_cpu).op)\n\n\nwith tf.Session() as sess:\n  sess.run(tf.global_variables_initializer())\n  for i in range(10):\n    run_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\n    run_metadata = tf.RunMetadata()\n    sess.run(train_ops, options=run_options, run_metadata=run_metadata)\n    trace_filename = os.path.join('/tmp/delete_me/trace', 'trace-global-step-%d.json' % i)\n    if not tf.gfile.Exists(os.path.dirname(trace_filename)):\n      os.makedirs(os.path.dirname(trace_filename))\n    trace = timeline.Timeline(step_stats=run_metadata.step_stats)\n    with tf.gfile.Open(trace_filename, 'w') as trace_file:\n      trace_file.write(trace.generate_chrome_trace_format(show_memory=False))", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: I have costom code.\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: `redhat-7.2`\r\n- **TensorFlow installed from (source or binary)**: `binary`\r\n- **TensorFlow version (use command below)**: `1.4.0`\r\n- **Python version**: `2.7`\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: `CUDA-8.0`, `cuDNN-6.0`\r\n- **GPU model and memory**: `Nvidia - K80`\r\n- **Exact command to reproduce**:\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\nThere are two different ways to apply memory copy from CPU to GPU:0 in the following code:\r\n```\r\n  with tf.control_dependencies([update_op]):\r\n    # Method-1 :\r\n    # with tf.device('/GPU:0'):\r\n    #   a_cpu_to_gpu = a_cpu.read_value()\r\n    # train_ops.append(vars[i].assign(a_cpu_to_gpu).op)\r\n\r\n    # Method-2 :\r\n    train_ops.append(vars[i].assign(a_cpu).op)\r\n```\r\n`a_cpu` is a variable in CPU device. `vars[i]` is a variable in GPU:0 device. The first one (Method-1) is to read the value in GPU:0 and then assign it to `a_cpu_to_gpu`. the second one (Method-2) is directly assign the variable in CPU to the variable in GPU:0.\r\n\r\nWhen I enable the `trace_level`, I find that the timeline of those two codes are different:\r\n\r\nMethod-1\r\n![image](https://user-images.githubusercontent.com/7370869/39508070-8e8204a4-4e13-11e8-97e3-f166403f0bef.png)\r\n\r\nMethod-2\r\n![image](https://user-images.githubusercontent.com/7370869/39507750-05f705d6-4e12-11e8-8aec-ff88db046e77.png)\r\n\r\nIn `Method-1`, I think the read_value op `a_cpu.read_value()` only depends on the i-th `update_op`. So the MEMCPYHtoD (green bar) should be right after the the i-th update_op, which means right after the MEMCPYDtoH (purple bar). I don't understand why they appear in the end of the timeline.\r\n\r\nIn `Method-2`, MEMCPYHtoD (green bar) appears at the beginning of the timeline. `vars[i].assign(a_cpu).op` depends on `update_op`, how can the memcpy be executed before the `update_op` ?\r\n\r\nI have no clue why it behaves like this, can anyone tell me why the memcpy behaves like that in `Method-1` and `Method-2` and what's the difference between them.\r\n\r\nThanks.\r\n\r\n### Source code / logs\r\n```\r\nimport tensorflow as tf\r\nimport os\r\n\r\nfrom tensorflow.python.client import timeline\r\nslim = tf.contrib.slim\r\n\r\ntrain_ops = []\r\n\r\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1)\r\n\r\nnet = tf.random_normal(shape=(32, 16, 16, 128))\r\n\r\nwith tf.device('/GPU:0'):\r\n\r\n  for i in range(10):\r\n    net = slim.conv2d(net, 128, [11, 11], padding='SAME', scope='conv_%s' % i)\r\n\r\n  loss = tf.reduce_mean(net, name='loss_func')\r\n  grad = tf.gradients(loss, tf.global_variables(), gate_gradients=True, name='my_gradients')\r\n\r\nvars = tf.global_variables()\r\nnum_vars = len(vars)\r\n\r\nfor i in range(num_vars - 1, -1, -1):\r\n\r\n  with tf.device('/CPU:0'):\r\n    a_cpu = tf.get_variable('a_cpu_%s' % i, initializer=vars[i].initial_value)\r\n    update_op = optimizer.apply_gradients([(grad[i], a_cpu)], name='apply_%s' % i)\r\n\r\n  with tf.control_dependencies([update_op]):\r\n    # Method-1 :\r\n    # with tf.device('/GPU:0'):\r\n    #   a_cpu_to_gpu = a_cpu.read_value()\r\n    # train_ops.append(vars[i].assign(a_cpu_to_gpu).op)\r\n\r\n    # Method-2 :\r\n    train_ops.append(vars[i].assign(a_cpu).op)\r\n\r\n\r\nwith tf.Session() as sess:\r\n  sess.run(tf.global_variables_initializer())\r\n  for i in range(10):\r\n    run_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\r\n    run_metadata = tf.RunMetadata()\r\n    sess.run(train_ops, options=run_options, run_metadata=run_metadata)\r\n    trace_filename = os.path.join('/tmp/delete_me/trace', 'trace-global-step-%d.json' % i)\r\n    if not tf.gfile.Exists(os.path.dirname(trace_filename)):\r\n      os.makedirs(os.path.dirname(trace_filename))\r\n    trace = timeline.Timeline(step_stats=run_metadata.step_stats)\r\n    with tf.gfile.Open(trace_filename, 'w') as trace_file:\r\n      trace_file.write(trace.generate_chrome_trace_format(show_memory=False))\r\n```\r\n"}