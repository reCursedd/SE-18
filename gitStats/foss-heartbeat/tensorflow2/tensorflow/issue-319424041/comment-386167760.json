{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/386167760", "html_url": "https://github.com/tensorflow/tensorflow/issues/19017#issuecomment-386167760", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19017", "id": 386167760, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjE2Nzc2MA==", "user": {"login": "sleepfin", "id": 7370869, "node_id": "MDQ6VXNlcjczNzA4Njk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7370869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sleepfin", "html_url": "https://github.com/sleepfin", "followers_url": "https://api.github.com/users/sleepfin/followers", "following_url": "https://api.github.com/users/sleepfin/following{/other_user}", "gists_url": "https://api.github.com/users/sleepfin/gists{/gist_id}", "starred_url": "https://api.github.com/users/sleepfin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sleepfin/subscriptions", "organizations_url": "https://api.github.com/users/sleepfin/orgs", "repos_url": "https://api.github.com/users/sleepfin/repos", "events_url": "https://api.github.com/users/sleepfin/events{/privacy}", "received_events_url": "https://api.github.com/users/sleepfin/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-03T01:17:55Z", "updated_at": "2018-05-03T01:17:55Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> Thanks for reply.<br>\nSo in Method-2, <code>a_cpu</code> evaluates before update_op has executed. Does that means old value of <code>a_cpu</code> (before updating the gradients to <code>a_cpu</code>) is assigned to <code>vars[i]</code> ? (That is not what I expected)</p>\n<p>And in Method-1, I can understand <code>a_cpu_to_gpu</code> should run after <code>update_op</code>, but what I can't understand is why all of the <code>a_cpu_to_gpu</code> run after the last <code>update_op</code>. What I expect is each <code>a_cpu_to_gpu</code> executes right after the corresponding <code>update_op</code> of <code>a_cpu</code> which means <code>MEMCPYDtoH</code> and <code>MEMCPYHtoD</code> shall execute alternately and sequentially.</p>", "body_text": "@yaroslavvb Thanks for reply.\nSo in Method-2, a_cpu evaluates before update_op has executed. Does that means old value of a_cpu (before updating the gradients to a_cpu) is assigned to vars[i] ? (That is not what I expected)\nAnd in Method-1, I can understand a_cpu_to_gpu should run after update_op, but what I can't understand is why all of the a_cpu_to_gpu run after the last update_op. What I expect is each a_cpu_to_gpu executes right after the corresponding update_op of a_cpu which means MEMCPYDtoH and MEMCPYHtoD shall execute alternately and sequentially.", "body": "@yaroslavvb Thanks for reply. \r\nSo in Method-2, `a_cpu` evaluates before update_op has executed. Does that means old value of `a_cpu` (before updating the gradients to `a_cpu`) is assigned to `vars[i]` ? (That is not what I expected)\r\n\r\nAnd in Method-1, I can understand `a_cpu_to_gpu` should run after `update_op`, but what I can't understand is why all of the `a_cpu_to_gpu` run after the last `update_op`. What I expect is each `a_cpu_to_gpu` executes right after the corresponding `update_op` of `a_cpu` which means `MEMCPYDtoH` and `MEMCPYHtoD` shall execute alternately and sequentially."}