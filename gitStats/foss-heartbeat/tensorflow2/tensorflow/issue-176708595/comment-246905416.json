{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/246905416", "html_url": "https://github.com/tensorflow/tensorflow/issues/4359#issuecomment-246905416", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4359", "id": 246905416, "node_id": "MDEyOklzc3VlQ29tbWVudDI0NjkwNTQxNg==", "user": {"login": "aidan-plenert-macdonald", "id": 6690599, "node_id": "MDQ6VXNlcjY2OTA1OTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6690599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidan-plenert-macdonald", "html_url": "https://github.com/aidan-plenert-macdonald", "followers_url": "https://api.github.com/users/aidan-plenert-macdonald/followers", "following_url": "https://api.github.com/users/aidan-plenert-macdonald/following{/other_user}", "gists_url": "https://api.github.com/users/aidan-plenert-macdonald/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidan-plenert-macdonald/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidan-plenert-macdonald/subscriptions", "organizations_url": "https://api.github.com/users/aidan-plenert-macdonald/orgs", "repos_url": "https://api.github.com/users/aidan-plenert-macdonald/repos", "events_url": "https://api.github.com/users/aidan-plenert-macdonald/events{/privacy}", "received_events_url": "https://api.github.com/users/aidan-plenert-macdonald/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-14T04:46:08Z", "updated_at": "2016-09-14T04:46:08Z", "author_association": "NONE", "body_html": "<p>I need to talk with my supervisor before giving too many details. <a href=\"https://www.knupath.com/products/hermosa-processors/\" rel=\"nofollow\">Here</a> is the public info, but as a high level understanding, the chip is basically a cluster computer reduced to fit on a single chip. The many DSPs need to work together to do anything useful.</p>\n<p>I didn't know about the operation interface! Its pretty awesome and I definitely think that is what I want to build.</p>\n<p>It would seem that at a minimum, a developer would need to write an Allocator, Device, DeviceFactory, and DeviceContext. This would give a non-functional device because there are no kernels registered to it. As I was developing, I noticed that some kernels seemed to be core functions like ConstOp, AssignOp, NoOp, etc. that are needed for other things to work. It would seem that a user wouldn't want to code these explicitly as they are kind of obvious and redundant. Do you think these can/should be automatically built into the framework so that every device at least has these working out of the box?</p>", "body_text": "I need to talk with my supervisor before giving too many details. Here is the public info, but as a high level understanding, the chip is basically a cluster computer reduced to fit on a single chip. The many DSPs need to work together to do anything useful.\nI didn't know about the operation interface! Its pretty awesome and I definitely think that is what I want to build.\nIt would seem that at a minimum, a developer would need to write an Allocator, Device, DeviceFactory, and DeviceContext. This would give a non-functional device because there are no kernels registered to it. As I was developing, I noticed that some kernels seemed to be core functions like ConstOp, AssignOp, NoOp, etc. that are needed for other things to work. It would seem that a user wouldn't want to code these explicitly as they are kind of obvious and redundant. Do you think these can/should be automatically built into the framework so that every device at least has these working out of the box?", "body": "I need to talk with my supervisor before giving too many details. [Here](https://www.knupath.com/products/hermosa-processors/) is the public info, but as a high level understanding, the chip is basically a cluster computer reduced to fit on a single chip. The many DSPs need to work together to do anything useful.\n\nI didn't know about the operation interface! Its pretty awesome and I definitely think that is what I want to build.\n\nIt would seem that at a minimum, a developer would need to write an Allocator, Device, DeviceFactory, and DeviceContext. This would give a non-functional device because there are no kernels registered to it. As I was developing, I noticed that some kernels seemed to be core functions like ConstOp, AssignOp, NoOp, etc. that are needed for other things to work. It would seem that a user wouldn't want to code these explicitly as they are kind of obvious and redundant. Do you think these can/should be automatically built into the framework so that every device at least has these working out of the box?\n"}