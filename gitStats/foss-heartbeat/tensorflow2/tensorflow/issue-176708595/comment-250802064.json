{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/250802064", "html_url": "https://github.com/tensorflow/tensorflow/issues/4359#issuecomment-250802064", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4359", "id": 250802064, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDgwMjA2NA==", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-30T17:19:58Z", "updated_at": "2016-09-30T17:19:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p>We could change the 8 bits to a larger number of bits before 1.0 I guess.  Or perhaps one day maybe extend the value to be larger than 32 bits in a backwards compatible way.</p>\n<p>The OpKernel::allocate_output() function can set the bits of the AllocatorAttributes however it wants.  I was thinking, but not sure if it works off hand:</p>\n<pre><code>FPUDeviceContext* fdc = static_cast&lt;FPUDeviceContext*&gt;(context-&gt;device_context());\nint32 device_id = fdc-&gt;device_id();\nAllocatorAttribute attr;\nattr.value |= (device_id &amp;&amp; 0x000000FF) &lt;&lt; 24; \n\nTensor* output;\ncontext-&gt;allocate_output(0, shape, &amp;output, attr);\n</code></pre>\n<p>Or something like that.</p>", "body_text": "We could change the 8 bits to a larger number of bits before 1.0 I guess.  Or perhaps one day maybe extend the value to be larger than 32 bits in a backwards compatible way.\nThe OpKernel::allocate_output() function can set the bits of the AllocatorAttributes however it wants.  I was thinking, but not sure if it works off hand:\nFPUDeviceContext* fdc = static_cast<FPUDeviceContext*>(context->device_context());\nint32 device_id = fdc->device_id();\nAllocatorAttribute attr;\nattr.value |= (device_id && 0x000000FF) << 24; \n\nTensor* output;\ncontext->allocate_output(0, shape, &output, attr);\n\nOr something like that.", "body": "We could change the 8 bits to a larger number of bits before 1.0 I guess.  Or perhaps one day maybe extend the value to be larger than 32 bits in a backwards compatible way.\n\nThe OpKernel::allocate_output() function can set the bits of the AllocatorAttributes however it wants.  I was thinking, but not sure if it works off hand:\n\n```\nFPUDeviceContext* fdc = static_cast<FPUDeviceContext*>(context->device_context());\nint32 device_id = fdc->device_id();\nAllocatorAttribute attr;\nattr.value |= (device_id && 0x000000FF) << 24; \n\nTensor* output;\ncontext->allocate_output(0, shape, &output, attr);\n```\n\nOr something like that.\n"}