{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/282898562", "html_url": "https://github.com/tensorflow/tensorflow/issues/4359#issuecomment-282898562", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4359", "id": 282898562, "node_id": "MDEyOklzc3VlQ29tbWVudDI4Mjg5ODU2Mg==", "user": {"login": "RichDubielzig", "id": 24554323, "node_id": "MDQ6VXNlcjI0NTU0MzIz", "avatar_url": "https://avatars2.githubusercontent.com/u/24554323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RichDubielzig", "html_url": "https://github.com/RichDubielzig", "followers_url": "https://api.github.com/users/RichDubielzig/followers", "following_url": "https://api.github.com/users/RichDubielzig/following{/other_user}", "gists_url": "https://api.github.com/users/RichDubielzig/gists{/gist_id}", "starred_url": "https://api.github.com/users/RichDubielzig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RichDubielzig/subscriptions", "organizations_url": "https://api.github.com/users/RichDubielzig/orgs", "repos_url": "https://api.github.com/users/RichDubielzig/repos", "events_url": "https://api.github.com/users/RichDubielzig/events{/privacy}", "received_events_url": "https://api.github.com/users/RichDubielzig/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-28T00:05:10Z", "updated_at": "2017-02-28T00:05:10Z", "author_association": "NONE", "body_html": "<p>Just following up on my question:  I am seeing results with this approach:</p>\n<ol>\n<li>Define my operation as an AsyncOpKernel.  Kernel pseudocode:</li>\n</ol>\n<pre><code>ComputeAsync( context  input, DoneCallback done):\n  Get input tensors A &amp; B from context\n  Also get a Knureon command queue handle Q from the DeviceContext object.\n  Figure out the dimensions of the tensors\n  Assemble a call f(A,B,dims) to my Knureon matrix multipllier algorithm\n  Queue the tuple (f(), Q, done) in the launch queue.\n  Return immediately\n</code></pre>\n<ol start=\"2\">\n<li>In launch queue, in a separate thread:</li>\n</ol>\n<pre><code>(as part of init routine, we have created our own dedicated ThreadPool, which includes a thread to run this wait/spawn loop)\n\n  Wait for resources R to run f()\n  schedule a task to run f() on R resources using Q and calling done().\n</code></pre>\n<ol start=\"3\">\n<li>In the task scheduled above:</li>\n</ol>\n<pre><code>  deploy f() to R and kick it off.\n  wait on Q to finish\n  release R back to the Knureon environment\n  call the AsyncOpKernel done() callback\n  exit\n</code></pre>", "body_text": "Just following up on my question:  I am seeing results with this approach:\n\nDefine my operation as an AsyncOpKernel.  Kernel pseudocode:\n\nComputeAsync( context  input, DoneCallback done):\n  Get input tensors A & B from context\n  Also get a Knureon command queue handle Q from the DeviceContext object.\n  Figure out the dimensions of the tensors\n  Assemble a call f(A,B,dims) to my Knureon matrix multipllier algorithm\n  Queue the tuple (f(), Q, done) in the launch queue.\n  Return immediately\n\n\nIn launch queue, in a separate thread:\n\n(as part of init routine, we have created our own dedicated ThreadPool, which includes a thread to run this wait/spawn loop)\n\n  Wait for resources R to run f()\n  schedule a task to run f() on R resources using Q and calling done().\n\n\nIn the task scheduled above:\n\n  deploy f() to R and kick it off.\n  wait on Q to finish\n  release R back to the Knureon environment\n  call the AsyncOpKernel done() callback\n  exit", "body": "Just following up on my question:  I am seeing results with this approach:  \r\n\r\n1.  Define my operation as an AsyncOpKernel.  Kernel pseudocode:\r\n```\r\nComputeAsync( context  input, DoneCallback done):\r\n  Get input tensors A & B from context\r\n  Also get a Knureon command queue handle Q from the DeviceContext object.\r\n  Figure out the dimensions of the tensors\r\n  Assemble a call f(A,B,dims) to my Knureon matrix multipllier algorithm\r\n  Queue the tuple (f(), Q, done) in the launch queue.\r\n  Return immediately\r\n```\r\n\r\n2. In launch queue, in a separate thread:\r\n```\r\n(as part of init routine, we have created our own dedicated ThreadPool, which includes a thread to run this wait/spawn loop)\r\n\r\n  Wait for resources R to run f()\r\n  schedule a task to run f() on R resources using Q and calling done().\r\n```\r\n\r\n3. In the task scheduled above:\r\n```\r\n  deploy f() to R and kick it off.\r\n  wait on Q to finish\r\n  release R back to the Knureon environment\r\n  call the AsyncOpKernel done() callback\r\n  exit\r\n```"}