{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/247488042", "html_url": "https://github.com/tensorflow/tensorflow/issues/4359#issuecomment-247488042", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4359", "id": 247488042, "node_id": "MDEyOklzc3VlQ29tbWVudDI0NzQ4ODA0Mg==", "user": {"login": "aidan-plenert-macdonald", "id": 6690599, "node_id": "MDQ6VXNlcjY2OTA1OTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6690599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidan-plenert-macdonald", "html_url": "https://github.com/aidan-plenert-macdonald", "followers_url": "https://api.github.com/users/aidan-plenert-macdonald/followers", "following_url": "https://api.github.com/users/aidan-plenert-macdonald/following{/other_user}", "gists_url": "https://api.github.com/users/aidan-plenert-macdonald/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidan-plenert-macdonald/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidan-plenert-macdonald/subscriptions", "organizations_url": "https://api.github.com/users/aidan-plenert-macdonald/orgs", "repos_url": "https://api.github.com/users/aidan-plenert-macdonald/repos", "events_url": "https://api.github.com/users/aidan-plenert-macdonald/events{/privacy}", "received_events_url": "https://api.github.com/users/aidan-plenert-macdonald/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-16T00:06:05Z", "updated_at": "2016-09-16T00:06:05Z", "author_association": "NONE", "body_html": "<p>I got all the code down to one file with no changes to the main code base except the below. I list my solution ideas, but they involve modification of the main code so I wanted to make sure its okay.</p>\n<pre><code>diff --git a/tensorflow/core/util/device_name_utils.cc b/tensorflow/core/util/device_name_utils.cc\nindex 5816dbd..50309ed 100644\n--- a/tensorflow/core/util/device_name_utils.cc\n+++ b/tensorflow/core/util/device_name_utils.cc\n@@ -162,6 +162,16 @@ bool DeviceNameUtils::ParseFullName(StringPiece fullname, ParsedName* p) {\n       }\n       progress = true;\n     }\n+    if (str_util::ConsumePrefix(&amp;fullname, \"/kpu:\") ||\n+        str_util::ConsumePrefix(&amp;fullname, \"/KPU:\")) {\n+      p-&gt;has_type = true;\n+      p-&gt;type = \"KPU\";  // Treat '/kpu:..' as uppercase '/device:KPU:...'\n+      p-&gt;has_id = !str_util::ConsumePrefix(&amp;fullname, \"*\");\n+      if (p-&gt;has_id &amp;&amp; !ConsumeNumber(&amp;fullname, &amp;p-&gt;id)) {\n+        return false;\n+      }\n+      progress = true;\n+    }\n\n     if (!progress) {\n       return false;\n</code></pre>\n<p>To get rid of this one, I was thinking of using the <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/common_runtime/device_factory.cc#L44\">existing registration</a>, but that means exposing this function. I could just make the underlying <code>std::unordered_map</code> a private/protected member of the DeviceFactory class and then make DeviceNameUtils a friend. Or just expose the function handle in the header.</p>\n<pre><code>diff --git a/tensorflow/python/framework/device.py b/tensorflow/python/framework/device.py\nindex 8f5125d..505c2a9 100644\n--- a/tensorflow/python/framework/device.py\n+++ b/tensorflow/python/framework/device.py\n@@ -155,7 +155,9 @@ class DeviceSpec(object):\n         elif ly == 2 and y[0] == \"task\":\n           self.task = y[1]\n         elif ((ly == 1 or ly == 2) and\n-              ((y[0].upper() == \"GPU\") or (y[0].upper() == \"CPU\"))):\n+              ((y[0].upper() == \"GPU\") or \n+               (y[0].upper() == \"CPU\") or\n+               (y[0].upper() == \"KPU\"))):\n           if self.device_type is not None:\n             raise ValueError(\"Cannot specify multiple device types: %s\" % spec)\n           self.device_type = y[0].upper()\n</code></pre>\n<p>If there is Python access to the same interface as above, then I can just use that. I am a fan of less configuration.</p>", "body_text": "I got all the code down to one file with no changes to the main code base except the below. I list my solution ideas, but they involve modification of the main code so I wanted to make sure its okay.\ndiff --git a/tensorflow/core/util/device_name_utils.cc b/tensorflow/core/util/device_name_utils.cc\nindex 5816dbd..50309ed 100644\n--- a/tensorflow/core/util/device_name_utils.cc\n+++ b/tensorflow/core/util/device_name_utils.cc\n@@ -162,6 +162,16 @@ bool DeviceNameUtils::ParseFullName(StringPiece fullname, ParsedName* p) {\n       }\n       progress = true;\n     }\n+    if (str_util::ConsumePrefix(&fullname, \"/kpu:\") ||\n+        str_util::ConsumePrefix(&fullname, \"/KPU:\")) {\n+      p->has_type = true;\n+      p->type = \"KPU\";  // Treat '/kpu:..' as uppercase '/device:KPU:...'\n+      p->has_id = !str_util::ConsumePrefix(&fullname, \"*\");\n+      if (p->has_id && !ConsumeNumber(&fullname, &p->id)) {\n+        return false;\n+      }\n+      progress = true;\n+    }\n\n     if (!progress) {\n       return false;\n\nTo get rid of this one, I was thinking of using the existing registration, but that means exposing this function. I could just make the underlying std::unordered_map a private/protected member of the DeviceFactory class and then make DeviceNameUtils a friend. Or just expose the function handle in the header.\ndiff --git a/tensorflow/python/framework/device.py b/tensorflow/python/framework/device.py\nindex 8f5125d..505c2a9 100644\n--- a/tensorflow/python/framework/device.py\n+++ b/tensorflow/python/framework/device.py\n@@ -155,7 +155,9 @@ class DeviceSpec(object):\n         elif ly == 2 and y[0] == \"task\":\n           self.task = y[1]\n         elif ((ly == 1 or ly == 2) and\n-              ((y[0].upper() == \"GPU\") or (y[0].upper() == \"CPU\"))):\n+              ((y[0].upper() == \"GPU\") or \n+               (y[0].upper() == \"CPU\") or\n+               (y[0].upper() == \"KPU\"))):\n           if self.device_type is not None:\n             raise ValueError(\"Cannot specify multiple device types: %s\" % spec)\n           self.device_type = y[0].upper()\n\nIf there is Python access to the same interface as above, then I can just use that. I am a fan of less configuration.", "body": "I got all the code down to one file with no changes to the main code base except the below. I list my solution ideas, but they involve modification of the main code so I wanted to make sure its okay.\n\n```\ndiff --git a/tensorflow/core/util/device_name_utils.cc b/tensorflow/core/util/device_name_utils.cc\nindex 5816dbd..50309ed 100644\n--- a/tensorflow/core/util/device_name_utils.cc\n+++ b/tensorflow/core/util/device_name_utils.cc\n@@ -162,6 +162,16 @@ bool DeviceNameUtils::ParseFullName(StringPiece fullname, ParsedName* p) {\n       }\n       progress = true;\n     }\n+    if (str_util::ConsumePrefix(&fullname, \"/kpu:\") ||\n+        str_util::ConsumePrefix(&fullname, \"/KPU:\")) {\n+      p->has_type = true;\n+      p->type = \"KPU\";  // Treat '/kpu:..' as uppercase '/device:KPU:...'\n+      p->has_id = !str_util::ConsumePrefix(&fullname, \"*\");\n+      if (p->has_id && !ConsumeNumber(&fullname, &p->id)) {\n+        return false;\n+      }\n+      progress = true;\n+    }\n\n     if (!progress) {\n       return false;\n```\n\nTo get rid of this one, I was thinking of using the [existing registration](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/common_runtime/device_factory.cc#L44), but that means exposing this function. I could just make the underlying `std::unordered_map` a private/protected member of the DeviceFactory class and then make DeviceNameUtils a friend. Or just expose the function handle in the header.\n\n```\ndiff --git a/tensorflow/python/framework/device.py b/tensorflow/python/framework/device.py\nindex 8f5125d..505c2a9 100644\n--- a/tensorflow/python/framework/device.py\n+++ b/tensorflow/python/framework/device.py\n@@ -155,7 +155,9 @@ class DeviceSpec(object):\n         elif ly == 2 and y[0] == \"task\":\n           self.task = y[1]\n         elif ((ly == 1 or ly == 2) and\n-              ((y[0].upper() == \"GPU\") or (y[0].upper() == \"CPU\"))):\n+              ((y[0].upper() == \"GPU\") or \n+               (y[0].upper() == \"CPU\") or\n+               (y[0].upper() == \"KPU\"))):\n           if self.device_type is not None:\n             raise ValueError(\"Cannot specify multiple device types: %s\" % spec)\n           self.device_type = y[0].upper()\n```\n\nIf there is Python access to the same interface as above, then I can just use that. I am a fan of less configuration.\n"}