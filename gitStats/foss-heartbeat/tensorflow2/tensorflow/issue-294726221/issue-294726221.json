{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16798", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16798/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16798/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16798/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16798", "id": 294726221, "node_id": "MDU6SXNzdWUyOTQ3MjYyMjE=", "number": 16798, "title": "tf.nn.conv2d on GPU with data_format='NHWC' gives corrupted result for specific shapes", "user": {"login": "SeguinBe", "id": 7132817, "node_id": "MDQ6VXNlcjcxMzI4MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/7132817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SeguinBe", "html_url": "https://github.com/SeguinBe", "followers_url": "https://api.github.com/users/SeguinBe/followers", "following_url": "https://api.github.com/users/SeguinBe/following{/other_user}", "gists_url": "https://api.github.com/users/SeguinBe/gists{/gist_id}", "starred_url": "https://api.github.com/users/SeguinBe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SeguinBe/subscriptions", "organizations_url": "https://api.github.com/users/SeguinBe/orgs", "repos_url": "https://api.github.com/users/SeguinBe/repos", "events_url": "https://api.github.com/users/SeguinBe/events{/privacy}", "received_events_url": "https://api.github.com/users/SeguinBe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "chsigg", "id": 7523982, "node_id": "MDQ6VXNlcjc1MjM5ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7523982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chsigg", "html_url": "https://github.com/chsigg", "followers_url": "https://api.github.com/users/chsigg/followers", "following_url": "https://api.github.com/users/chsigg/following{/other_user}", "gists_url": "https://api.github.com/users/chsigg/gists{/gist_id}", "starred_url": "https://api.github.com/users/chsigg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chsigg/subscriptions", "organizations_url": "https://api.github.com/users/chsigg/orgs", "repos_url": "https://api.github.com/users/chsigg/repos", "events_url": "https://api.github.com/users/chsigg/events{/privacy}", "received_events_url": "https://api.github.com/users/chsigg/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "chsigg", "id": 7523982, "node_id": "MDQ6VXNlcjc1MjM5ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7523982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chsigg", "html_url": "https://github.com/chsigg", "followers_url": "https://api.github.com/users/chsigg/followers", "following_url": "https://api.github.com/users/chsigg/following{/other_user}", "gists_url": "https://api.github.com/users/chsigg/gists{/gist_id}", "starred_url": "https://api.github.com/users/chsigg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chsigg/subscriptions", "organizations_url": "https://api.github.com/users/chsigg/orgs", "repos_url": "https://api.github.com/users/chsigg/repos", "events_url": "https://api.github.com/users/chsigg/events{/privacy}", "received_events_url": "https://api.github.com/users/chsigg/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-02-06T11:32:20Z", "updated_at": "2018-09-26T10:04:48Z", "closed_at": "2018-09-26T10:04:48Z", "author_association": "NONE", "body_html": "<p>Basically what the title says.</p>\n<p>For an image of size (1096, 2449) EXACTLY, not 1097 or 1095 or 2448 or 2450 (but 2451 for some reason produces the same effect). The bottom part of the convolution result gets corrupted. It only affects convolution done on the GPU with the 'NHWC' data format.</p>\n<p>Honestly, it feels more of a cuDNN bug than anything, but not sure where to post it otherwise.</p>\n<p><strong>Important note : I am on Ubuntu 14.04 hence I can not try tensorflow 1.5 which needs CUDA 9 which needs 16.04. So my test is done on 1.4 with cuda8 and cuDNNv6.</strong></p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 14.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip install 1.4 tensorflow-gpu</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.4.0-19-ga52c8d9 1.4.1</li>\n<li><strong>Python version</strong>: 3.5</li>\n<li><strong>CUDA/cuDNN version</strong>: cuda 8 cudnn 6</li>\n<li><strong>GPU model and memory</strong>: TITAN X Pascal</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.contrib <span class=\"pl-k\">import</span> layers\nsess<span class=\"pl-k\">=</span>tf.InteractiveSession()\nh, w <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1096</span>, <span class=\"pl-c1\">2449</span>\ninput_img <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">None</span>, h, w, <span class=\"pl-c1\">3</span>))\nfilters <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">2</span>)\n<span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/cpu:0<span class=\"pl-pds\">'</span></span>):\n    out_cpu <span class=\"pl-k\">=</span> tf.nn.conv2d(input_img, <span class=\"pl-v\">filter</span><span class=\"pl-k\">=</span>filters, <span class=\"pl-v\">strides</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>), <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>VALID<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/gpu:0<span class=\"pl-pds\">'</span></span>):\n    out_gpu <span class=\"pl-k\">=</span> tf.nn.conv2d(input_img, <span class=\"pl-v\">filter</span><span class=\"pl-k\">=</span>filters, <span class=\"pl-v\">strides</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>), <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>VALID<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> The following actually works if you manually transpose to use the NCHW data_format</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> tmp = tf.transpose(input_img, (0,3,1,2))</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> out_gpu = tf.nn.conv2d(tmp, filter=filters, strides=(1,1,1,1), padding='VALID', data_format='NCHW')</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> out_gpu = tf.transpose(out_gpu, (0,2,3,1))</span>\n\nout1, out2 <span class=\"pl-k\">=</span> sess.run((out_cpu, out_gpu), <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{\n    input_img: np.random.randn(<span class=\"pl-c1\">1</span>, h, w, <span class=\"pl-c1\">3</span>)\n})\nplt.imshow(np.linalg.norm(out1<span class=\"pl-k\">-</span>out2 , <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)[<span class=\"pl-c1\">0</span>])\nplt.colorbar()</pre></div>\n<p>Plotting the difference between the CPU conv and the GPU conv :</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/7132817/35857501-a74bb66e-0b39-11e8-9edd-98e69eba5c48.png\"><img width=\"359\" alt=\"capture d ecran 2018-02-06 a 12 31 03\" src=\"https://user-images.githubusercontent.com/7132817/35857501-a74bb66e-0b39-11e8-9edd-98e69eba5c48.png\" style=\"max-width:100%;\"></a></p>", "body_text": "Basically what the title says.\nFor an image of size (1096, 2449) EXACTLY, not 1097 or 1095 or 2448 or 2450 (but 2451 for some reason produces the same effect). The bottom part of the convolution result gets corrupted. It only affects convolution done on the GPU with the 'NHWC' data format.\nHonestly, it feels more of a cuDNN bug than anything, but not sure where to post it otherwise.\nImportant note : I am on Ubuntu 14.04 hence I can not try tensorflow 1.5 which needs CUDA 9 which needs 16.04. So my test is done on 1.4 with cuda8 and cuDNNv6.\n\nSystem information\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 14.04\nTensorFlow installed from (source or binary): pip install 1.4 tensorflow-gpu\nTensorFlow version (use command below): v1.4.0-19-ga52c8d9 1.4.1\nPython version: 3.5\nCUDA/cuDNN version: cuda 8 cudnn 6\nGPU model and memory: TITAN X Pascal\nExact command to reproduce:\n\nimport tensorflow as tf\nfrom tensorflow.contrib import layers\nsess=tf.InteractiveSession()\nh, w = 1096, 2449\ninput_img = tf.placeholder(tf.float32, shape=(None, h, w, 3))\nfilters = np.random.randn(1,1,3,2)\nwith tf.device('/cpu:0'):\n    out_cpu = tf.nn.conv2d(input_img, filter=filters, strides=(1,1,1,1), padding='VALID')\nwith tf.device('/gpu:0'):\n    out_gpu = tf.nn.conv2d(input_img, filter=filters, strides=(1,1,1,1), padding='VALID')\n    # The following actually works if you manually transpose to use the NCHW data_format\n    # tmp = tf.transpose(input_img, (0,3,1,2))\n    # out_gpu = tf.nn.conv2d(tmp, filter=filters, strides=(1,1,1,1), padding='VALID', data_format='NCHW')\n    # out_gpu = tf.transpose(out_gpu, (0,2,3,1))\n\nout1, out2 = sess.run((out_cpu, out_gpu), feed_dict={\n    input_img: np.random.randn(1, h, w, 3)\n})\nplt.imshow(np.linalg.norm(out1-out2 , axis=-1)[0])\nplt.colorbar()\nPlotting the difference between the CPU conv and the GPU conv :", "body": "Basically what the title says.\r\n\r\nFor an image of size (1096, 2449) EXACTLY, not 1097 or 1095 or 2448 or 2450 (but 2451 for some reason produces the same effect). The bottom part of the convolution result gets corrupted. It only affects convolution done on the GPU with the 'NHWC' data format.\r\n\r\nHonestly, it feels more of a cuDNN bug than anything, but not sure where to post it otherwise.\r\n\r\n**Important note : I am on Ubuntu 14.04 hence I can not try tensorflow 1.5 which needs CUDA 9 which needs 16.04. So my test is done on 1.4 with cuda8 and cuDNNv6.**\r\n\r\n------------------------\r\n\r\n### System information\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 14.04\r\n- **TensorFlow installed from (source or binary)**: pip install 1.4 tensorflow-gpu\r\n- **TensorFlow version (use command below)**: v1.4.0-19-ga52c8d9 1.4.1\r\n- **Python version**: 3.5\r\n- **CUDA/cuDNN version**: cuda 8 cudnn 6\r\n- **GPU model and memory**: TITAN X Pascal\r\n- **Exact command to reproduce**:\r\n\r\n```python\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib import layers\r\nsess=tf.InteractiveSession()\r\nh, w = 1096, 2449\r\ninput_img = tf.placeholder(tf.float32, shape=(None, h, w, 3))\r\nfilters = np.random.randn(1,1,3,2)\r\nwith tf.device('/cpu:0'):\r\n    out_cpu = tf.nn.conv2d(input_img, filter=filters, strides=(1,1,1,1), padding='VALID')\r\nwith tf.device('/gpu:0'):\r\n    out_gpu = tf.nn.conv2d(input_img, filter=filters, strides=(1,1,1,1), padding='VALID')\r\n    # The following actually works if you manually transpose to use the NCHW data_format\r\n    # tmp = tf.transpose(input_img, (0,3,1,2))\r\n    # out_gpu = tf.nn.conv2d(tmp, filter=filters, strides=(1,1,1,1), padding='VALID', data_format='NCHW')\r\n    # out_gpu = tf.transpose(out_gpu, (0,2,3,1))\r\n\r\nout1, out2 = sess.run((out_cpu, out_gpu), feed_dict={\r\n    input_img: np.random.randn(1, h, w, 3)\r\n})\r\nplt.imshow(np.linalg.norm(out1-out2 , axis=-1)[0])\r\nplt.colorbar()\r\n```\r\nPlotting the difference between the CPU conv and the GPU conv :\r\n\r\n<img width=\"359\" alt=\"capture d ecran 2018-02-06 a 12 31 03\" src=\"https://user-images.githubusercontent.com/7132817/35857501-a74bb66e-0b39-11e8-9edd-98e69eba5c48.png\">\r\n\r\n"}