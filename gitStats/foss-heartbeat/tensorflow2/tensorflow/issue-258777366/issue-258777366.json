{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13150", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13150/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13150/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13150/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13150", "id": 258777366, "node_id": "MDU6SXNzdWUyNTg3NzczNjY=", "number": 13150, "title": "Handling of * in pattern of tf.contrib.data.Dataset.list_files undocumented", "user": {"login": "GPhilo", "id": 4441724, "node_id": "MDQ6VXNlcjQ0NDE3MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4441724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GPhilo", "html_url": "https://github.com/GPhilo", "followers_url": "https://api.github.com/users/GPhilo/followers", "following_url": "https://api.github.com/users/GPhilo/following{/other_user}", "gists_url": "https://api.github.com/users/GPhilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/GPhilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GPhilo/subscriptions", "organizations_url": "https://api.github.com/users/GPhilo/orgs", "repos_url": "https://api.github.com/users/GPhilo/repos", "events_url": "https://api.github.com/users/GPhilo/events{/privacy}", "received_events_url": "https://api.github.com/users/GPhilo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 284443156, "node_id": "MDU6TGFiZWwyODQ0NDMxNTY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:docs", "name": "type:docs", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "saeta", "id": 1284535, "node_id": "MDQ6VXNlcjEyODQ1MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1284535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saeta", "html_url": "https://github.com/saeta", "followers_url": "https://api.github.com/users/saeta/followers", "following_url": "https://api.github.com/users/saeta/following{/other_user}", "gists_url": "https://api.github.com/users/saeta/gists{/gist_id}", "starred_url": "https://api.github.com/users/saeta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saeta/subscriptions", "organizations_url": "https://api.github.com/users/saeta/orgs", "repos_url": "https://api.github.com/users/saeta/repos", "events_url": "https://api.github.com/users/saeta/events{/privacy}", "received_events_url": "https://api.github.com/users/saeta/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "saeta", "id": 1284535, "node_id": "MDQ6VXNlcjEyODQ1MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1284535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saeta", "html_url": "https://github.com/saeta", "followers_url": "https://api.github.com/users/saeta/followers", "following_url": "https://api.github.com/users/saeta/following{/other_user}", "gists_url": "https://api.github.com/users/saeta/gists{/gist_id}", "starred_url": "https://api.github.com/users/saeta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saeta/subscriptions", "organizations_url": "https://api.github.com/users/saeta/orgs", "repos_url": "https://api.github.com/users/saeta/repos", "events_url": "https://api.github.com/users/saeta/events{/privacy}", "received_events_url": "https://api.github.com/users/saeta/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-09-19T10:49:38Z", "updated_at": "2018-11-11T18:39:03Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes (see below)</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.3.0</li>\n<li><strong>Python version</strong>: 3.5.4</li>\n<li><strong>Bazel version (if compiling from source)</strong>: -</li>\n<li><strong>CUDA/cuDNN version</strong>: 8/6</li>\n<li><strong>GPU model and memory</strong>: GTX 1080, 8GB</li>\n<li><strong>Exact command to reproduce</strong>: run the script</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>It seems that by default <code>list_files</code>' behaviour when a pattern contains <code>*</code>s is to match files at any depth in the directory tree. This is in contrast, for example, with <code>glob</code>'s default behaviour.<br>\nI could not find any mention of how <code>*</code> is evaluated in <a href=\"https://www.tensorflow.org/api_docs/python/tf/contrib/data/Dataset#list_files\" rel=\"nofollow\">its documentation</a> or any examples of its usage in the <a href=\"https://www.tensorflow.org/programmers_guide/datasets\" rel=\"nofollow\">pogrammer's guide</a>.<br>\nCould the documentation be improved specifying how exactly <code>*</code>s are handled?</p>\n<h3>Source code / logs</h3>\n<p>Sample dataset structure on filesystem:</p>\n<pre><code>DATASET_ROOT\n    _should_be_ignored\n        class3\n            subclass31\n                sample.txt\n            subclass32\n                sample.txt\n        class4\n            subclass41\n                sample.txt\n            subclass42\n                sample.txt\n    class1\n        subclass11\n            sample.txt\n        subclass12\n            sample.txt\n    class2\n        subclass21\n            sample.txt\n        subclass22\n            sample.txt\n</code></pre>\n<p>Small script to test the behaviour:</p>\n<pre><code>import tensorflow as tf\nimport glob\n\nROOT = 'C:/Users/1/Desktop/test_dataset'\nglob_files = glob.glob('{}/*/*/*.txt'.format(ROOT))\n\ndataset = tf.contrib.data.Dataset.list_files('{}/*/*/*.txt'.format(ROOT))\nit = dataset.make_one_shot_iterator()\n\nfiles_found = []\nwith tf.Session() as sess:\n  while True:\n    try:\n      files_found.append(sess.run(it.get_next()))\n    except tf.errors.OutOfRangeError:\n      break\n</code></pre>\n<p>Outputs:</p>\n<pre><code>glob_files\nOut[16]: \n['C:/Users/1/Desktop/test_dataset\\\\class1\\\\subclass11\\\\sample.txt',\n 'C:/Users/1/Desktop/test_dataset\\\\class1\\\\subclass12\\\\sample.txt',\n 'C:/Users/1/Desktop/test_dataset\\\\class2\\\\subclass21\\\\sample.txt',\n 'C:/Users/1/Desktop/test_dataset\\\\class2\\\\subclass22\\\\sample.txt']\n\nfiles_found\nOut[4]: \n[b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\class1\\\\subclass11\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\class1\\\\subclass12\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\class2\\\\subclass21\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\class2\\\\subclass22\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\_should_be_ignored\\\\class3\\\\subclass31\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\_should_be_ignored\\\\class3\\\\subclass32\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\_should_be_ignored\\\\class4\\\\subclass41\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\_should_be_ignored\\\\class4\\\\subclass42\\\\sample.txt']\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes (see below)\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.3.0\nPython version: 3.5.4\nBazel version (if compiling from source): -\nCUDA/cuDNN version: 8/6\nGPU model and memory: GTX 1080, 8GB\nExact command to reproduce: run the script\n\nDescribe the problem\nIt seems that by default list_files' behaviour when a pattern contains *s is to match files at any depth in the directory tree. This is in contrast, for example, with glob's default behaviour.\nI could not find any mention of how * is evaluated in its documentation or any examples of its usage in the pogrammer's guide.\nCould the documentation be improved specifying how exactly *s are handled?\nSource code / logs\nSample dataset structure on filesystem:\nDATASET_ROOT\n    _should_be_ignored\n        class3\n            subclass31\n                sample.txt\n            subclass32\n                sample.txt\n        class4\n            subclass41\n                sample.txt\n            subclass42\n                sample.txt\n    class1\n        subclass11\n            sample.txt\n        subclass12\n            sample.txt\n    class2\n        subclass21\n            sample.txt\n        subclass22\n            sample.txt\n\nSmall script to test the behaviour:\nimport tensorflow as tf\nimport glob\n\nROOT = 'C:/Users/1/Desktop/test_dataset'\nglob_files = glob.glob('{}/*/*/*.txt'.format(ROOT))\n\ndataset = tf.contrib.data.Dataset.list_files('{}/*/*/*.txt'.format(ROOT))\nit = dataset.make_one_shot_iterator()\n\nfiles_found = []\nwith tf.Session() as sess:\n  while True:\n    try:\n      files_found.append(sess.run(it.get_next()))\n    except tf.errors.OutOfRangeError:\n      break\n\nOutputs:\nglob_files\nOut[16]: \n['C:/Users/1/Desktop/test_dataset\\\\class1\\\\subclass11\\\\sample.txt',\n 'C:/Users/1/Desktop/test_dataset\\\\class1\\\\subclass12\\\\sample.txt',\n 'C:/Users/1/Desktop/test_dataset\\\\class2\\\\subclass21\\\\sample.txt',\n 'C:/Users/1/Desktop/test_dataset\\\\class2\\\\subclass22\\\\sample.txt']\n\nfiles_found\nOut[4]: \n[b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\class1\\\\subclass11\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\class1\\\\subclass12\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\class2\\\\subclass21\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\class2\\\\subclass22\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\_should_be_ignored\\\\class3\\\\subclass31\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\_should_be_ignored\\\\class3\\\\subclass32\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\_should_be_ignored\\\\class4\\\\subclass41\\\\sample.txt',\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\_should_be_ignored\\\\class4\\\\subclass42\\\\sample.txt']", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes (see below)\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.3.0\r\n- **Python version**: 3.5.4\r\n- **Bazel version (if compiling from source)**: -\r\n- **CUDA/cuDNN version**: 8/6\r\n- **GPU model and memory**: GTX 1080, 8GB\r\n- **Exact command to reproduce**: run the script\r\n\r\n### Describe the problem\r\nIt seems that by default `list_files`' behaviour when a pattern contains `*`s is to match files at any depth in the directory tree. This is in contrast, for example, with `glob`'s default behaviour.\r\nI could not find any mention of how `*` is evaluated in [its documentation](https://www.tensorflow.org/api_docs/python/tf/contrib/data/Dataset#list_files) or any examples of its usage in the [pogrammer's guide](https://www.tensorflow.org/programmers_guide/datasets).\r\nCould the documentation be improved specifying how exactly `*`s are handled?\r\n\r\n### Source code / logs\r\nSample dataset structure on filesystem:\r\n\r\n```\r\nDATASET_ROOT\r\n    _should_be_ignored\r\n        class3\r\n            subclass31\r\n                sample.txt\r\n            subclass32\r\n                sample.txt\r\n        class4\r\n            subclass41\r\n                sample.txt\r\n            subclass42\r\n                sample.txt\r\n    class1\r\n        subclass11\r\n            sample.txt\r\n        subclass12\r\n            sample.txt\r\n    class2\r\n        subclass21\r\n            sample.txt\r\n        subclass22\r\n            sample.txt\r\n```\r\n\r\nSmall script to test the behaviour:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport glob\r\n\r\nROOT = 'C:/Users/1/Desktop/test_dataset'\r\nglob_files = glob.glob('{}/*/*/*.txt'.format(ROOT))\r\n\r\ndataset = tf.contrib.data.Dataset.list_files('{}/*/*/*.txt'.format(ROOT))\r\nit = dataset.make_one_shot_iterator()\r\n\r\nfiles_found = []\r\nwith tf.Session() as sess:\r\n  while True:\r\n    try:\r\n      files_found.append(sess.run(it.get_next()))\r\n    except tf.errors.OutOfRangeError:\r\n      break\r\n```\r\n\r\nOutputs:\r\n```\r\nglob_files\r\nOut[16]: \r\n['C:/Users/1/Desktop/test_dataset\\\\class1\\\\subclass11\\\\sample.txt',\r\n 'C:/Users/1/Desktop/test_dataset\\\\class1\\\\subclass12\\\\sample.txt',\r\n 'C:/Users/1/Desktop/test_dataset\\\\class2\\\\subclass21\\\\sample.txt',\r\n 'C:/Users/1/Desktop/test_dataset\\\\class2\\\\subclass22\\\\sample.txt']\r\n\r\nfiles_found\r\nOut[4]: \r\n[b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\class1\\\\subclass11\\\\sample.txt',\r\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\class1\\\\subclass12\\\\sample.txt',\r\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\class2\\\\subclass21\\\\sample.txt',\r\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\class2\\\\subclass22\\\\sample.txt',\r\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\_should_be_ignored\\\\class3\\\\subclass31\\\\sample.txt',\r\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\_should_be_ignored\\\\class3\\\\subclass32\\\\sample.txt',\r\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\_should_be_ignored\\\\class4\\\\subclass41\\\\sample.txt',\r\n b'C:\\\\Users\\\\1\\\\Desktop\\\\test_dataset\\\\_should_be_ignored\\\\class4\\\\subclass42\\\\sample.txt']\r\n```\r\n"}