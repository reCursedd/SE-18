{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7146", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7146/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7146/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7146/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7146", "id": 203970189, "node_id": "MDU6SXNzdWUyMDM5NzAxODk=", "number": 7146, "title": "Nested `tf.while_loop`s hang when they are placed on CPU", "user": {"login": "c810armyHuan", "id": 19700443, "node_id": "MDQ6VXNlcjE5NzAwNDQz", "avatar_url": "https://avatars2.githubusercontent.com/u/19700443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c810armyHuan", "html_url": "https://github.com/c810armyHuan", "followers_url": "https://api.github.com/users/c810armyHuan/followers", "following_url": "https://api.github.com/users/c810armyHuan/following{/other_user}", "gists_url": "https://api.github.com/users/c810armyHuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/c810armyHuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c810armyHuan/subscriptions", "organizations_url": "https://api.github.com/users/c810armyHuan/orgs", "repos_url": "https://api.github.com/users/c810armyHuan/repos", "events_url": "https://api.github.com/users/c810armyHuan/events{/privacy}", "received_events_url": "https://api.github.com/users/c810armyHuan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "yuanbyu", "id": 2342391, "node_id": "MDQ6VXNlcjIzNDIzOTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2342391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuanbyu", "html_url": "https://github.com/yuanbyu", "followers_url": "https://api.github.com/users/yuanbyu/followers", "following_url": "https://api.github.com/users/yuanbyu/following{/other_user}", "gists_url": "https://api.github.com/users/yuanbyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuanbyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuanbyu/subscriptions", "organizations_url": "https://api.github.com/users/yuanbyu/orgs", "repos_url": "https://api.github.com/users/yuanbyu/repos", "events_url": "https://api.github.com/users/yuanbyu/events{/privacy}", "received_events_url": "https://api.github.com/users/yuanbyu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "yuanbyu", "id": 2342391, "node_id": "MDQ6VXNlcjIzNDIzOTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2342391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuanbyu", "html_url": "https://github.com/yuanbyu", "followers_url": "https://api.github.com/users/yuanbyu/followers", "following_url": "https://api.github.com/users/yuanbyu/following{/other_user}", "gists_url": "https://api.github.com/users/yuanbyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuanbyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuanbyu/subscriptions", "organizations_url": "https://api.github.com/users/yuanbyu/orgs", "repos_url": "https://api.github.com/users/yuanbyu/repos", "events_url": "https://api.github.com/users/yuanbyu/events{/privacy}", "received_events_url": "https://api.github.com/users/yuanbyu/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2017-01-30T10:16:05Z", "updated_at": "2017-02-17T05:09:05Z", "closed_at": "2017-02-17T05:09:05Z", "author_association": "NONE", "body_html": "<p>When I place all ops within nested <code>tf.while_loop</code> on CPU, evaluating the output of nested <code>tf.while_loop</code> makes the program hang.</p>\n<p>I also <a href=\"http://stackoverflow.com/questions/41929472/why-does-nested-tf-while-loop-freeze-in-test-session-of-tf-test-testcase\" rel=\"nofollow\">posted a question on StackOverflow</a>.</p>\n<h3>Environment info</h3>\n<p>Operating System: Ubuntu 16.04</p>\n<p>Installed version of CUDA and cuDNN:</p>\n<pre><code>/usr/local/cuda/lib64/libcudadevrt.a\n/usr/local/cuda/lib64/libcudart.so -&gt; libcudart.so.8.0\n/usr/local/cuda/lib64/libcudart.so.8.0 -&gt; libcudart.so.8.0.44\n/usr/local/cuda/lib64/libcudart.so.8.0.44\n/usr/local/cuda/lib64/libcudart_static.a\n/usr/local/cuda/lib64/libcudnn.so -&gt; libcudnn.so.5\n/usr/local/cuda/lib64/libcudnn.so.5 -&gt; libcudnn.so.5.1.5\n/usr/local/cuda/lib64/libcudnn.so.5.1.5\n/usr/local/cuda/lib64/libcudnn_static.a\n</code></pre>\n<p>If installed from source, provide</p>\n<ol>\n<li>\n<p>The commit hash (<code>git rev-parse HEAD</code>)<br>\n<code>28f5099d532ce59787ee58012b8ef04c498947ae</code></p>\n</li>\n<li>\n<p>The output of <code>bazel version</code></p>\n</li>\n</ol>\n<pre><code>Build label: 0.4.3\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Thu Dec 22 12:31:25 2016 (1482409885)\nBuild timestamp: 1482409885\nBuild timestamp as int: 1482409885\n</code></pre>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<p>The following code is run on python 3.5:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nconfig <span class=\"pl-k\">=</span> tf.ConfigProto(<span class=\"pl-v\">allow_soft_placement</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n<span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>config) <span class=\"pl-k\">as</span> sess, tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/cpu:0<span class=\"pl-pds\">'</span></span>):\n    num_outer_iters <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">3</span>)\n    num_inner_iters <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">5</span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">outer_body</span>(<span class=\"pl-smi\">loop_outer_index</span>, <span class=\"pl-smi\">loop_outer_ta</span>):\n\n        <span class=\"pl-k\">def</span> <span class=\"pl-en\">inner_body</span>(<span class=\"pl-smi\">loop_inner_index</span>, <span class=\"pl-smi\">loop_inner_ta</span>):\n            loop_inner_ta <span class=\"pl-k\">=</span> loop_inner_ta.write(loop_inner_index,\n                                                tf.constant(<span class=\"pl-c1\">0</span>))\n            <span class=\"pl-k\">return</span> (loop_inner_index <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, loop_inner_ta)\n\n        inner_index <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">0</span>)\n        inner_ta <span class=\"pl-k\">=</span> tf.TensorArray(tf.int32, num_inner_iters)\n        (_, inner_ta) <span class=\"pl-k\">=</span> tf.while_loop(\n            <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">index</span>, <span class=\"pl-k\">*</span><span class=\"pl-smi\">_</span>: index <span class=\"pl-k\">&lt;</span> num_inner_iters,\n            inner_body,\n            (inner_index, inner_ta))\n\n        loop_outer_ta <span class=\"pl-k\">=</span> loop_outer_ta.write(loop_outer_index,\n                                            inner_ta.stack())\n        <span class=\"pl-k\">return</span> loop_outer_index <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>, loop_outer_ta\n\n    outer_index <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">0</span>)\n    outer_ta <span class=\"pl-k\">=</span> tf.TensorArray(tf.int32, num_outer_iters)\n    (_, outer_ta) <span class=\"pl-k\">=</span> tf.while_loop(\n        <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">index</span>, <span class=\"pl-k\">*</span><span class=\"pl-smi\">_</span>: index <span class=\"pl-k\">&lt;</span> num_outer_iters,\n        outer_body,\n        (outer_index, outer_ta),\n        <span class=\"pl-v\">parallel_iterations</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">back_prop</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n\n    <span class=\"pl-c1\">print</span>(sess.run(outer_ta.concat()))\n</pre></div>\n<h3>What other attempted solutions have you tried?</h3>\n<p>If I replace <code>num_inner_iters = tf.constant(5)</code> with <code>num_inner_iters = 5</code>, the program will exit normally.</p>\n<h3>Logs or other output that would be helpful</h3>\n<p>The program hangs without any error message.</p>", "body_text": "When I place all ops within nested tf.while_loop on CPU, evaluating the output of nested tf.while_loop makes the program hang.\nI also posted a question on StackOverflow.\nEnvironment info\nOperating System: Ubuntu 16.04\nInstalled version of CUDA and cuDNN:\n/usr/local/cuda/lib64/libcudadevrt.a\n/usr/local/cuda/lib64/libcudart.so -> libcudart.so.8.0\n/usr/local/cuda/lib64/libcudart.so.8.0 -> libcudart.so.8.0.44\n/usr/local/cuda/lib64/libcudart.so.8.0.44\n/usr/local/cuda/lib64/libcudart_static.a\n/usr/local/cuda/lib64/libcudnn.so -> libcudnn.so.5\n/usr/local/cuda/lib64/libcudnn.so.5 -> libcudnn.so.5.1.5\n/usr/local/cuda/lib64/libcudnn.so.5.1.5\n/usr/local/cuda/lib64/libcudnn_static.a\n\nIf installed from source, provide\n\n\nThe commit hash (git rev-parse HEAD)\n28f5099d532ce59787ee58012b8ef04c498947ae\n\n\nThe output of bazel version\n\n\nBuild label: 0.4.3\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Thu Dec 22 12:31:25 2016 (1482409885)\nBuild timestamp: 1482409885\nBuild timestamp as int: 1482409885\n\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nThe following code is run on python 3.5:\nimport tensorflow as tf\n\nconfig = tf.ConfigProto(allow_soft_placement=False)\nwith tf.Session(config=config) as sess, tf.device('/cpu:0'):\n    num_outer_iters = tf.constant(3)\n    num_inner_iters = tf.constant(5)\n\n    def outer_body(loop_outer_index, loop_outer_ta):\n\n        def inner_body(loop_inner_index, loop_inner_ta):\n            loop_inner_ta = loop_inner_ta.write(loop_inner_index,\n                                                tf.constant(0))\n            return (loop_inner_index + 1, loop_inner_ta)\n\n        inner_index = tf.constant(0)\n        inner_ta = tf.TensorArray(tf.int32, num_inner_iters)\n        (_, inner_ta) = tf.while_loop(\n            lambda index, *_: index < num_inner_iters,\n            inner_body,\n            (inner_index, inner_ta))\n\n        loop_outer_ta = loop_outer_ta.write(loop_outer_index,\n                                            inner_ta.stack())\n        return loop_outer_index + 1, loop_outer_ta\n\n    outer_index = tf.constant(0)\n    outer_ta = tf.TensorArray(tf.int32, num_outer_iters)\n    (_, outer_ta) = tf.while_loop(\n        lambda index, *_: index < num_outer_iters,\n        outer_body,\n        (outer_index, outer_ta),\n        parallel_iterations=1, back_prop=False)\n\n    print(sess.run(outer_ta.concat()))\n\nWhat other attempted solutions have you tried?\nIf I replace num_inner_iters = tf.constant(5) with num_inner_iters = 5, the program will exit normally.\nLogs or other output that would be helpful\nThe program hangs without any error message.", "body": "When I place all ops within nested `tf.while_loop` on CPU, evaluating the output of nested `tf.while_loop` makes the program hang.\r\n\r\nI also [posted a question on StackOverflow](http://stackoverflow.com/questions/41929472/why-does-nested-tf-while-loop-freeze-in-test-session-of-tf-test-testcase).\r\n\r\n### Environment info\r\nOperating System: Ubuntu 16.04\r\n\r\nInstalled version of CUDA and cuDNN: \r\n```\r\n/usr/local/cuda/lib64/libcudadevrt.a\r\n/usr/local/cuda/lib64/libcudart.so -> libcudart.so.8.0\r\n/usr/local/cuda/lib64/libcudart.so.8.0 -> libcudart.so.8.0.44\r\n/usr/local/cuda/lib64/libcudart.so.8.0.44\r\n/usr/local/cuda/lib64/libcudart_static.a\r\n/usr/local/cuda/lib64/libcudnn.so -> libcudnn.so.5\r\n/usr/local/cuda/lib64/libcudnn.so.5 -> libcudnn.so.5.1.5\r\n/usr/local/cuda/lib64/libcudnn.so.5.1.5\r\n/usr/local/cuda/lib64/libcudnn_static.a\r\n```\r\n\r\nIf installed from source, provide \r\n\r\n1. The commit hash (`git rev-parse HEAD`)\r\n`28f5099d532ce59787ee58012b8ef04c498947ae`\r\n\r\n2. The output of `bazel version`\r\n```\r\nBuild label: 0.4.3\r\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Thu Dec 22 12:31:25 2016 (1482409885)\r\nBuild timestamp: 1482409885\r\nBuild timestamp as int: 1482409885\r\n```\r\n\r\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\r\n\r\nThe following code is run on python 3.5:\r\n\r\n``` python\r\nimport tensorflow as tf\r\n\r\nconfig = tf.ConfigProto(allow_soft_placement=False)\r\nwith tf.Session(config=config) as sess, tf.device('/cpu:0'):\r\n    num_outer_iters = tf.constant(3)\r\n    num_inner_iters = tf.constant(5)\r\n\r\n    def outer_body(loop_outer_index, loop_outer_ta):\r\n\r\n        def inner_body(loop_inner_index, loop_inner_ta):\r\n            loop_inner_ta = loop_inner_ta.write(loop_inner_index,\r\n                                                tf.constant(0))\r\n            return (loop_inner_index + 1, loop_inner_ta)\r\n\r\n        inner_index = tf.constant(0)\r\n        inner_ta = tf.TensorArray(tf.int32, num_inner_iters)\r\n        (_, inner_ta) = tf.while_loop(\r\n            lambda index, *_: index < num_inner_iters,\r\n            inner_body,\r\n            (inner_index, inner_ta))\r\n\r\n        loop_outer_ta = loop_outer_ta.write(loop_outer_index,\r\n                                            inner_ta.stack())\r\n        return loop_outer_index + 1, loop_outer_ta\r\n\r\n    outer_index = tf.constant(0)\r\n    outer_ta = tf.TensorArray(tf.int32, num_outer_iters)\r\n    (_, outer_ta) = tf.while_loop(\r\n        lambda index, *_: index < num_outer_iters,\r\n        outer_body,\r\n        (outer_index, outer_ta),\r\n        parallel_iterations=1, back_prop=False)\r\n\r\n    print(sess.run(outer_ta.concat()))\r\n\r\n```\r\n\r\n### What other attempted solutions have you tried?\r\n\r\nIf I replace `num_inner_iters = tf.constant(5)` with `num_inner_iters = 5`, the program will exit normally.\r\n\r\n### Logs or other output that would be helpful\r\nThe program hangs without any error message.\r\n"}