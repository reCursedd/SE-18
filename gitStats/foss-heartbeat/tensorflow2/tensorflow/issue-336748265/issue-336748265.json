{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20385", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20385/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20385/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20385/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20385", "id": 336748265, "node_id": "MDU6SXNzdWUzMzY3NDgyNjU=", "number": 20385, "title": "return ordered list of operations in Go API or provide sort Operation function", "user": {"login": "vkuznet", "id": 125138, "node_id": "MDQ6VXNlcjEyNTEzOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/125138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vkuznet", "html_url": "https://github.com/vkuznet", "followers_url": "https://api.github.com/users/vkuznet/followers", "following_url": "https://api.github.com/users/vkuznet/following{/other_user}", "gists_url": "https://api.github.com/users/vkuznet/gists{/gist_id}", "starred_url": "https://api.github.com/users/vkuznet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vkuznet/subscriptions", "organizations_url": "https://api.github.com/users/vkuznet/orgs", "repos_url": "https://api.github.com/users/vkuznet/repos", "events_url": "https://api.github.com/users/vkuznet/events{/privacy}", "received_events_url": "https://api.github.com/users/vkuznet/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-06-28T19:22:33Z", "updated_at": "2018-07-07T00:20:51Z", "closed_at": "2018-07-07T00:20:51Z", "author_association": "NONE", "body_html": "<p>Please go to Stack Overflow for help and support:</p>\n<p><a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">https://stackoverflow.com/questions/tagged/tensorflow</a></p>\n<p>If you open a GitHub issue, here is our policy:</p>\n<ol>\n<li>It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).</li>\n<li>The form below must be filled out.</li>\n<li>It shouldn't be a TensorBoard issue. Those go <a href=\"https://github.com/tensorflow/tensorboard/issues\">here</a>.</li>\n</ol>\n<p><strong>Here's why we have that policy</strong>: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: macOS 10.13.5</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>:</li>\n<li><strong>Python version</strong>: 2.7.14</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>Reading tensorflow Go APIs I see that there is no way to find which order of operations used in a graph. The current APIs only return list of Operations, and if I want to deduce the graph structure I need to know the order of operations. I can extract names, types but I don't know how to order operations. For instance, if I'll be given a model I want to see its structure. I can loop over graph operations and I'll get all operations, but I don't know their order and therefore can't reproduce the graph model structure.</p>\n<h3>Source code / logs</h3>\n<pre><code>   // assume I'll be give a TF graph\n    sGraph := \"\"\n   // loop over graph operations and print them out\n    for _, op := range graph.Operations() {\n        fmt.Println(op.Name(), op.Type(), op.NumOutputs())\n        for i := 0; i &lt; op.NumOutputs(); i++ {\n            if sGraph != \"\" {\n                sGraph = fmt.Sprintf(\"%s -&gt; %s(%s)\", sGraph, op.Name(), op.Output(i).Shape())\n            } else {\n                sGraph = fmt.Sprintf(\"%s(%s)\", op.Name(), op.Output(i).Shape())\n            }\n        }\n    }\n</code></pre>", "body_text": "Please go to Stack Overflow for help and support:\nhttps://stackoverflow.com/questions/tagged/tensorflow\nIf you open a GitHub issue, here is our policy:\n\nIt must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\nThe form below must be filled out.\nIt shouldn't be a TensorBoard issue. Those go here.\n\nHere's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS 10.13.5\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below):\nPython version: 2.7.14\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nReading tensorflow Go APIs I see that there is no way to find which order of operations used in a graph. The current APIs only return list of Operations, and if I want to deduce the graph structure I need to know the order of operations. I can extract names, types but I don't know how to order operations. For instance, if I'll be given a model I want to see its structure. I can loop over graph operations and I'll get all operations, but I don't know their order and therefore can't reproduce the graph model structure.\nSource code / logs\n   // assume I'll be give a TF graph\n    sGraph := \"\"\n   // loop over graph operations and print them out\n    for _, op := range graph.Operations() {\n        fmt.Println(op.Name(), op.Type(), op.NumOutputs())\n        for i := 0; i < op.NumOutputs(); i++ {\n            if sGraph != \"\" {\n                sGraph = fmt.Sprintf(\"%s -> %s(%s)\", sGraph, op.Name(), op.Output(i).Shape())\n            } else {\n                sGraph = fmt.Sprintf(\"%s(%s)\", op.Name(), op.Output(i).Shape())\n            }\n        }\n    }", "body": "Please go to Stack Overflow for help and support:\r\n\r\nhttps://stackoverflow.com/questions/tagged/tensorflow\r\n\r\nIf you open a GitHub issue, here is our policy:\r\n\r\n1. It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\r\n2. The form below must be filled out.\r\n3. It shouldn't be a TensorBoard issue. Those go [here](https://github.com/tensorflow/tensorboard/issues).\r\n\r\n**Here's why we have that policy**: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: macOS 10.13.5\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**:\r\n- **Python version**: 2.7.14\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: N/A\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\n\r\nReading tensorflow Go APIs I see that there is no way to find which order of operations used in a graph. The current APIs only return list of Operations, and if I want to deduce the graph structure I need to know the order of operations. I can extract names, types but I don't know how to order operations. For instance, if I'll be given a model I want to see its structure. I can loop over graph operations and I'll get all operations, but I don't know their order and therefore can't reproduce the graph model structure.\r\n\r\n### Source code / logs\r\n```\r\n   // assume I'll be give a TF graph\r\n    sGraph := \"\"\r\n   // loop over graph operations and print them out\r\n    for _, op := range graph.Operations() {\r\n        fmt.Println(op.Name(), op.Type(), op.NumOutputs())\r\n        for i := 0; i < op.NumOutputs(); i++ {\r\n            if sGraph != \"\" {\r\n                sGraph = fmt.Sprintf(\"%s -> %s(%s)\", sGraph, op.Name(), op.Output(i).Shape())\r\n            } else {\r\n                sGraph = fmt.Sprintf(\"%s(%s)\", op.Name(), op.Output(i).Shape())\r\n            }\r\n        }\r\n    }\r\n```"}