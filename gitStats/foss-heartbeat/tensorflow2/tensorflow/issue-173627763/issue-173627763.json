{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4079", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4079/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4079/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4079/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4079", "id": 173627763, "node_id": "MDU6SXNzdWUxNzM2Mjc3NjM=", "number": 4079, "title": "LeakyReLU uses up too much memory.", "user": {"login": "chasep255", "id": 15787797, "node_id": "MDQ6VXNlcjE1Nzg3Nzk3", "avatar_url": "https://avatars3.githubusercontent.com/u/15787797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chasep255", "html_url": "https://github.com/chasep255", "followers_url": "https://api.github.com/users/chasep255/followers", "following_url": "https://api.github.com/users/chasep255/following{/other_user}", "gists_url": "https://api.github.com/users/chasep255/gists{/gist_id}", "starred_url": "https://api.github.com/users/chasep255/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chasep255/subscriptions", "organizations_url": "https://api.github.com/users/chasep255/orgs", "repos_url": "https://api.github.com/users/chasep255/repos", "events_url": "https://api.github.com/users/chasep255/events{/privacy}", "received_events_url": "https://api.github.com/users/chasep255/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-28T03:50:45Z", "updated_at": "2016-08-30T21:57:48Z", "closed_at": "2016-08-30T21:57:48Z", "author_association": "NONE", "body_html": "<p>Right now I am implementing leaky relus like this tf.maximum(0.1 * x, x).  This works fine except when it comes to memory usage.  Networks which will fit on my GPU when using tf.nn.relu or tf.nn.elu fail when I am using my leaky relu implementation.  I think this is because it needs to store both the intermediate 0.1 * x and x values of the activations to compute the gradients which essentially does the memory usage.  However, I do not think this would be an issue if there were a dedicated tf.nn.leaky_relu.  Can someone consider adding this to a future tensorflow release.</p>", "body_text": "Right now I am implementing leaky relus like this tf.maximum(0.1 * x, x).  This works fine except when it comes to memory usage.  Networks which will fit on my GPU when using tf.nn.relu or tf.nn.elu fail when I am using my leaky relu implementation.  I think this is because it needs to store both the intermediate 0.1 * x and x values of the activations to compute the gradients which essentially does the memory usage.  However, I do not think this would be an issue if there were a dedicated tf.nn.leaky_relu.  Can someone consider adding this to a future tensorflow release.", "body": "Right now I am implementing leaky relus like this tf.maximum(0.1 \\* x, x).  This works fine except when it comes to memory usage.  Networks which will fit on my GPU when using tf.nn.relu or tf.nn.elu fail when I am using my leaky relu implementation.  I think this is because it needs to store both the intermediate 0.1 \\* x and x values of the activations to compute the gradients which essentially does the memory usage.  However, I do not think this would be an issue if there were a dedicated tf.nn.leaky_relu.  Can someone consider adding this to a future tensorflow release.\n"}