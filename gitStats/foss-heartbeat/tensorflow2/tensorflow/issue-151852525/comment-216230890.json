{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/216230890", "html_url": "https://github.com/tensorflow/tensorflow/issues/2168#issuecomment-216230890", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2168", "id": 216230890, "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjIzMDg5MA==", "user": {"login": "ViralBShah", "id": 744411, "node_id": "MDQ6VXNlcjc0NDQxMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/744411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ViralBShah", "html_url": "https://github.com/ViralBShah", "followers_url": "https://api.github.com/users/ViralBShah/followers", "following_url": "https://api.github.com/users/ViralBShah/following{/other_user}", "gists_url": "https://api.github.com/users/ViralBShah/gists{/gist_id}", "starred_url": "https://api.github.com/users/ViralBShah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ViralBShah/subscriptions", "organizations_url": "https://api.github.com/users/ViralBShah/orgs", "repos_url": "https://api.github.com/users/ViralBShah/repos", "events_url": "https://api.github.com/users/ViralBShah/events{/privacy}", "received_events_url": "https://api.github.com/users/ViralBShah/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-02T13:12:32Z", "updated_at": "2016-05-02T13:12:32Z", "author_association": "NONE", "body_html": "<p>There is this package that wraps the TensorFlow Python APIs using Julia's PyCall.</p>\n<p><a href=\"https://github.com/benmoran/TensorFlow.jl\">https://github.com/benmoran/TensorFlow.jl</a></p>\n<p>Another approach could be to wrap the C++ APIs (using Julia's Cxx.jl, which is very easy). I have not looked inside TensorFlow but talking to those who have, I understand that a substantial part of TensorFlow is in Python, and if one were to use the C++ APIs, a bunch of the other stuff in the python part of the codebase would need to be recreated.</p>\n<p>Cc: <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=122994\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/benmoran\">@benmoran</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=354934\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ninjin\">@ninjin</a></p>", "body_text": "There is this package that wraps the TensorFlow Python APIs using Julia's PyCall.\nhttps://github.com/benmoran/TensorFlow.jl\nAnother approach could be to wrap the C++ APIs (using Julia's Cxx.jl, which is very easy). I have not looked inside TensorFlow but talking to those who have, I understand that a substantial part of TensorFlow is in Python, and if one were to use the C++ APIs, a bunch of the other stuff in the python part of the codebase would need to be recreated.\nCc: @benmoran @ninjin", "body": "There is this package that wraps the TensorFlow Python APIs using Julia's PyCall.\n\nhttps://github.com/benmoran/TensorFlow.jl\n\nAnother approach could be to wrap the C++ APIs (using Julia's Cxx.jl, which is very easy). I have not looked inside TensorFlow but talking to those who have, I understand that a substantial part of TensorFlow is in Python, and if one were to use the C++ APIs, a bunch of the other stuff in the python part of the codebase would need to be recreated. \n\nCc: @benmoran @ninjin \n"}