{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18725", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18725/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18725/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18725/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18725", "id": 316150494, "node_id": "MDU6SXNzdWUzMTYxNTA0OTQ=", "number": 18725, "title": "InvalidArgumentError : restore the weight of Inception_v4", "user": {"login": "houzhengzhang", "id": 25079094, "node_id": "MDQ6VXNlcjI1MDc5MDk0", "avatar_url": "https://avatars3.githubusercontent.com/u/25079094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houzhengzhang", "html_url": "https://github.com/houzhengzhang", "followers_url": "https://api.github.com/users/houzhengzhang/followers", "following_url": "https://api.github.com/users/houzhengzhang/following{/other_user}", "gists_url": "https://api.github.com/users/houzhengzhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/houzhengzhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houzhengzhang/subscriptions", "organizations_url": "https://api.github.com/users/houzhengzhang/orgs", "repos_url": "https://api.github.com/users/houzhengzhang/repos", "events_url": "https://api.github.com/users/houzhengzhang/events{/privacy}", "received_events_url": "https://api.github.com/users/houzhengzhang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-04-20T07:01:49Z", "updated_at": "2018-04-27T16:48:49Z", "closed_at": "2018-04-27T16:48:49Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>OS Platform and Distribution : windows10</li>\n<li>TensorFlow installed from : Source</li>\n<li>TensorFlow version : 1.7.0</li>\n<li>Python version: Python 3.6.3</li>\n<li>Bazel version: 0.11.1</li>\n<li>GCC/Compiler version : 5.4.0</li>\n<li>CUDA/cuDNN version: no</li>\n<li>GPU model and memory: no</li>\n<li>Exact command to reproduce:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I'm training a deep neural network.I want to restore the weight of Inception_v4 ,but there are some errors.I think the define of network is right but I can't restore the weight of model.Is it a bug of different version.</p>\n<h3>The errors:</h3>\n<p>InvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [3,3,128,768] rhs shape= 5,5,128,768, use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](InceptionV4/AuxLogits/Conv2d_2a/weights, save/RestoreV2:9)]]</p>\n<h3>Source code</h3>\n<pre><code>import scipy.misc as misc\nimport pickle\nimport tensorflow as tf\nfrom tqdm import tqdm\nimport numpy as np\nimport argparse\nimport fnmatch\nimport sys\nimport os\n\nfrom nets.inception_v4 import *\nsys.path.insert(0, 'nets/')\nslim = tf.contrib.slim\n\ndef getPaths(data_dir):\n    image_paths = []\n    # add more extensions if need be\n    ps = ['jpg', 'jpeg', 'JPG', 'JPEG', 'bmp', 'BMP', 'png', 'PNG']\n    for p in ps:\n        pattern = '*.' + p\n        for d, s, fList in os.walk(data_dir):\n            for filename in fList:\n                if fnmatch.fnmatch(filename, pattern):\n                    fname_ = os.path.join(d, filename)\n                    image_paths.append(fname_)\n    return image_paths\n\nif name == 'main':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--data_dir', required=True, type=str, help='Directory images are in. Searches recursively.')\n    parser.add_argument('--model', required=True, type=str, help='Model to use')\n    parser.add_argument('--checkpoint_file', required=True, type=str, help='Model file')\n    a = parser.parse_args()\n    data_dir = a.data_dir\n    model = a.model\n    checkpoint_file = a.checkpoint_file\n    # I only have these because I thought some take in size of (299,299), but maybe not\n    height, width, channels = 224, 224, 3 \n    x = tf.placeholder(tf.float32, shape=(1, height, width, channels))\n    \n    arg_scope = inception_v4_arg_scope()\n    with slim.arg_scope(arg_scope):\n        logits, end_points = inception_v4(x, is_training=False, num_classes=1001)\n        features = end_points['PreLogitsFlatten']\n     \n    sess = tf.Session()\n    saver = tf.train.Saver()\n    saver.restore(sess, checkpoint_file)\n    \n    feat_dict = {}\n    paths = getPaths(data_dir)\n    print('Computing features...')\n    for path in tqdm(paths):\n        image = misc.imread(path)\n        image = misc.imresize(image, (height, width))\n        image = np.expand_dims(image, 0)\n        feat = np.squeeze(sess.run(features, feed_dict={x: image}))\n        feat_dict[path] = feat\n    \n    try:\n        os.makedirs('features/')\n    except:\n        pass\n    exp_pkl = open('features/' + model + '_features.pkl', 'wb')\n    data = pickle.dumps(feat_dict)\n    exp_pkl.write(data)\n    exp_pkl.close()\n</code></pre>\n<h3>Log\uff1a</h3>\n<pre><code>D:\\PythonProject\\Compute-Features-WithModel&gt;python compute_features.py --data_dir=jaffe/ --checkpoint_file=inception_v4.ckpt --model=inception_v4\nUse the retry module or similar alternatives.\nTraceback (most recent call last):\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1327, in _do_call\n    return fn(*args)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1312, in _run_fn\n    options, feed_dict, fetch_list, target_list, run_metadata)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1420, in _call_tf_sessionrun\n    status, run_metadata)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\errors_impl.py\", line 516, in exit\n    c_api.TF_GetCode(self.status.status))\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Assign requires shapes of both tensors to match. lhs shape= [3,3,128,768] rhs shape= [5,5,128,768]\n\t\t[[Node: save/Assign_9 = Assign[T=DT_FLOAT, _class=[\"loc:@InceptionV4/AuxLogits/Conv2d_2a/weights\"], use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](InceptionV4/AuxLogits/Conv2d_2a/weights, save/RestoreV2:9)]]\n\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"compute_features.py\", line 120, in &lt;module&gt;\n    saver.restore(sess, checkpoint_file)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1775, in restore\n    {self.saver_def.filename_tensor_name: save_path})\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 905, in run\n    run_metadata_ptr)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1140, in _run\n    feed_dict_tensor, options, run_metadata)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1321, in _do_run\n    run_metadata)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1340, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Assign requires shapes of both tensors to match. lhs shape= [3,3,128,768] rhs shape= [5,5,128,768]\n         [[Node: save/Assign_9 = Assign[T=DT_FLOAT, _class=[\"loc:@InceptionV4/AuxLogits/Conv2d_2a/weights\"], use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](InceptionV4/AuxLogits/Conv2d_2a/weights, save/RestoreV2:9)]]\nCaused by op 'save/Assign_9', defined at:\n  File \"compute_features.py\", line 119, in &lt;module&gt;\n    saver = tf.train.Saver()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1311, in init\n    self.build()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1320, in build\n    self.build(self.filename, build_save=True, build_restore=True)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1357, in _build\n    build_save=build_save, build_restore=build_restore)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 809, in _build_internal\n    restore_sequentially, reshape)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 470, in _AddRestoreOps\n    assign_ops.append(saveable.restore(saveable_tensors, shapes))\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 162, in restore\n    self.op.get_shape().is_fully_defined())\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\state_ops.py\", line 281, in assign\n    validate_shape=validate_shape)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\gen_state_ops.py\", line 64, in assign\n    use_locking=use_locking, name=name)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py\", line 787, in _apply_op_helper\n    op_def=op_def)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 3290, in create_opop_def=op_def)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 1654, in init\n    self.traceback = self.graph._extract_stack()  # pylint: disable=protected-access\nInvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [3,3,128,768] rhs shape= [5,5,128,768]\n         [[Node: save/Assign_9 = Assign[T=DT_FLOAT, _class=[\"loc:@InceptionV4/AuxLogits/Conv2d_2a/weights\"], use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](InceptionV4/AuxLogits/Conv2d_2a/weights, save/RestoreV2:9)]]\n</code></pre>", "body_text": "System information\n\nOS Platform and Distribution : windows10\nTensorFlow installed from : Source\nTensorFlow version : 1.7.0\nPython version: Python 3.6.3\nBazel version: 0.11.1\nGCC/Compiler version : 5.4.0\nCUDA/cuDNN version: no\nGPU model and memory: no\nExact command to reproduce:\n\nDescribe the problem\nI'm training a deep neural network.I want to restore the weight of Inception_v4 ,but there are some errors.I think the define of network is right but I can't restore the weight of model.Is it a bug of different version.\nThe errors:\nInvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [3,3,128,768] rhs shape= 5,5,128,768, use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](InceptionV4/AuxLogits/Conv2d_2a/weights, save/RestoreV2:9)]]\nSource code\nimport scipy.misc as misc\nimport pickle\nimport tensorflow as tf\nfrom tqdm import tqdm\nimport numpy as np\nimport argparse\nimport fnmatch\nimport sys\nimport os\n\nfrom nets.inception_v4 import *\nsys.path.insert(0, 'nets/')\nslim = tf.contrib.slim\n\ndef getPaths(data_dir):\n    image_paths = []\n    # add more extensions if need be\n    ps = ['jpg', 'jpeg', 'JPG', 'JPEG', 'bmp', 'BMP', 'png', 'PNG']\n    for p in ps:\n        pattern = '*.' + p\n        for d, s, fList in os.walk(data_dir):\n            for filename in fList:\n                if fnmatch.fnmatch(filename, pattern):\n                    fname_ = os.path.join(d, filename)\n                    image_paths.append(fname_)\n    return image_paths\n\nif name == 'main':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--data_dir', required=True, type=str, help='Directory images are in. Searches recursively.')\n    parser.add_argument('--model', required=True, type=str, help='Model to use')\n    parser.add_argument('--checkpoint_file', required=True, type=str, help='Model file')\n    a = parser.parse_args()\n    data_dir = a.data_dir\n    model = a.model\n    checkpoint_file = a.checkpoint_file\n    # I only have these because I thought some take in size of (299,299), but maybe not\n    height, width, channels = 224, 224, 3 \n    x = tf.placeholder(tf.float32, shape=(1, height, width, channels))\n    \n    arg_scope = inception_v4_arg_scope()\n    with slim.arg_scope(arg_scope):\n        logits, end_points = inception_v4(x, is_training=False, num_classes=1001)\n        features = end_points['PreLogitsFlatten']\n     \n    sess = tf.Session()\n    saver = tf.train.Saver()\n    saver.restore(sess, checkpoint_file)\n    \n    feat_dict = {}\n    paths = getPaths(data_dir)\n    print('Computing features...')\n    for path in tqdm(paths):\n        image = misc.imread(path)\n        image = misc.imresize(image, (height, width))\n        image = np.expand_dims(image, 0)\n        feat = np.squeeze(sess.run(features, feed_dict={x: image}))\n        feat_dict[path] = feat\n    \n    try:\n        os.makedirs('features/')\n    except:\n        pass\n    exp_pkl = open('features/' + model + '_features.pkl', 'wb')\n    data = pickle.dumps(feat_dict)\n    exp_pkl.write(data)\n    exp_pkl.close()\n\nLog\uff1a\nD:\\PythonProject\\Compute-Features-WithModel>python compute_features.py --data_dir=jaffe/ --checkpoint_file=inception_v4.ckpt --model=inception_v4\nUse the retry module or similar alternatives.\nTraceback (most recent call last):\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1327, in _do_call\n    return fn(*args)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1312, in _run_fn\n    options, feed_dict, fetch_list, target_list, run_metadata)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1420, in _call_tf_sessionrun\n    status, run_metadata)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\errors_impl.py\", line 516, in exit\n    c_api.TF_GetCode(self.status.status))\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Assign requires shapes of both tensors to match. lhs shape= [3,3,128,768] rhs shape= [5,5,128,768]\n\t\t[[Node: save/Assign_9 = Assign[T=DT_FLOAT, _class=[\"loc:@InceptionV4/AuxLogits/Conv2d_2a/weights\"], use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](InceptionV4/AuxLogits/Conv2d_2a/weights, save/RestoreV2:9)]]\n\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"compute_features.py\", line 120, in <module>\n    saver.restore(sess, checkpoint_file)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1775, in restore\n    {self.saver_def.filename_tensor_name: save_path})\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 905, in run\n    run_metadata_ptr)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1140, in _run\n    feed_dict_tensor, options, run_metadata)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1321, in _do_run\n    run_metadata)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1340, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Assign requires shapes of both tensors to match. lhs shape= [3,3,128,768] rhs shape= [5,5,128,768]\n         [[Node: save/Assign_9 = Assign[T=DT_FLOAT, _class=[\"loc:@InceptionV4/AuxLogits/Conv2d_2a/weights\"], use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](InceptionV4/AuxLogits/Conv2d_2a/weights, save/RestoreV2:9)]]\nCaused by op 'save/Assign_9', defined at:\n  File \"compute_features.py\", line 119, in <module>\n    saver = tf.train.Saver()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1311, in init\n    self.build()\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1320, in build\n    self.build(self.filename, build_save=True, build_restore=True)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1357, in _build\n    build_save=build_save, build_restore=build_restore)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 809, in _build_internal\n    restore_sequentially, reshape)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 470, in _AddRestoreOps\n    assign_ops.append(saveable.restore(saveable_tensors, shapes))\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 162, in restore\n    self.op.get_shape().is_fully_defined())\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\state_ops.py\", line 281, in assign\n    validate_shape=validate_shape)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\gen_state_ops.py\", line 64, in assign\n    use_locking=use_locking, name=name)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py\", line 787, in _apply_op_helper\n    op_def=op_def)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 3290, in create_opop_def=op_def)\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 1654, in init\n    self.traceback = self.graph._extract_stack()  # pylint: disable=protected-access\nInvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [3,3,128,768] rhs shape= [5,5,128,768]\n         [[Node: save/Assign_9 = Assign[T=DT_FLOAT, _class=[\"loc:@InceptionV4/AuxLogits/Conv2d_2a/weights\"], use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](InceptionV4/AuxLogits/Conv2d_2a/weights, save/RestoreV2:9)]]", "body": "   \r\n\r\n### System information \r\n- OS Platform and Distribution : windows10\r\n- TensorFlow installed from : Source\r\n- TensorFlow version : 1.7.0\r\n- Python version: Python 3.6.3\r\n- Bazel version: 0.11.1\r\n- GCC/Compiler version : 5.4.0\r\n- CUDA/cuDNN version: no\r\n- GPU model and memory: no\r\n- Exact command to reproduce:\r\n \r\n\r\n### Describe the problem\r\n\r\n  I'm training a deep neural network.I want to restore the weight of Inception_v4 ,but there are some errors.I think the define of network is right but I can't restore the weight of model.Is it a bug of different version.\r\n\r\n### The errors:\r\n\r\n InvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [3,3,128,768] rhs shape= 5,5,128,768, use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](InceptionV4/AuxLogits/Conv2d_2a/weights, save/RestoreV2:9)]]\r\n\r\n### Source code\r\n\r\n    import scipy.misc as misc\r\n    import pickle\r\n    import tensorflow as tf\r\n    from tqdm import tqdm\r\n    import numpy as np\r\n    import argparse\r\n    import fnmatch\r\n    import sys\r\n    import os\r\n    \r\n    from nets.inception_v4 import *\r\n    sys.path.insert(0, 'nets/')\r\n    slim = tf.contrib.slim\r\n    \r\n    def getPaths(data_dir):\r\n        image_paths = []\r\n        # add more extensions if need be\r\n        ps = ['jpg', 'jpeg', 'JPG', 'JPEG', 'bmp', 'BMP', 'png', 'PNG']\r\n        for p in ps:\r\n            pattern = '*.' + p\r\n            for d, s, fList in os.walk(data_dir):\r\n                for filename in fList:\r\n                    if fnmatch.fnmatch(filename, pattern):\r\n                        fname_ = os.path.join(d, filename)\r\n                        image_paths.append(fname_)\r\n        return image_paths\r\n    \r\n    if name == 'main':\r\n        parser = argparse.ArgumentParser()\r\n        parser.add_argument('--data_dir', required=True, type=str, help='Directory images are in. Searches recursively.')\r\n        parser.add_argument('--model', required=True, type=str, help='Model to use')\r\n        parser.add_argument('--checkpoint_file', required=True, type=str, help='Model file')\r\n        a = parser.parse_args()\r\n        data_dir = a.data_dir\r\n        model = a.model\r\n        checkpoint_file = a.checkpoint_file\r\n        # I only have these because I thought some take in size of (299,299), but maybe not\r\n        height, width, channels = 224, 224, 3 \r\n        x = tf.placeholder(tf.float32, shape=(1, height, width, channels))\r\n        \r\n        arg_scope = inception_v4_arg_scope()\r\n        with slim.arg_scope(arg_scope):\r\n            logits, end_points = inception_v4(x, is_training=False, num_classes=1001)\r\n            features = end_points['PreLogitsFlatten']\r\n         \r\n        sess = tf.Session()\r\n        saver = tf.train.Saver()\r\n        saver.restore(sess, checkpoint_file)\r\n        \r\n        feat_dict = {}\r\n        paths = getPaths(data_dir)\r\n        print('Computing features...')\r\n        for path in tqdm(paths):\r\n            image = misc.imread(path)\r\n            image = misc.imresize(image, (height, width))\r\n            image = np.expand_dims(image, 0)\r\n            feat = np.squeeze(sess.run(features, feed_dict={x: image}))\r\n            feat_dict[path] = feat\r\n        \r\n        try:\r\n            os.makedirs('features/')\r\n        except:\r\n            pass\r\n        exp_pkl = open('features/' + model + '_features.pkl', 'wb')\r\n        data = pickle.dumps(feat_dict)\r\n        exp_pkl.write(data)\r\n        exp_pkl.close()\r\n    \r\n\r\n### Log\uff1a\r\n\r\n    D:\\PythonProject\\Compute-Features-WithModel>python compute_features.py --data_dir=jaffe/ --checkpoint_file=inception_v4.ckpt --model=inception_v4\r\n    Use the retry module or similar alternatives.\r\n    Traceback (most recent call last):\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1327, in _do_call\r\n        return fn(*args)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1312, in _run_fn\r\n        options, feed_dict, fetch_list, target_list, run_metadata)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1420, in _call_tf_sessionrun\r\n        status, run_metadata)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\errors_impl.py\", line 516, in exit\r\n        c_api.TF_GetCode(self.status.status))\r\n    tensorflow.python.framework.errors_impl.InvalidArgumentError: Assign requires shapes of both tensors to match. lhs shape= [3,3,128,768] rhs shape= [5,5,128,768]\r\n    \t\t[[Node: save/Assign_9 = Assign[T=DT_FLOAT, _class=[\"loc:@InceptionV4/AuxLogits/Conv2d_2a/weights\"], use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](InceptionV4/AuxLogits/Conv2d_2a/weights, save/RestoreV2:9)]]\r\n    \r\n    During handling of the above exception, another exception occurred:\r\n    Traceback (most recent call last):\r\n      File \"compute_features.py\", line 120, in <module>\r\n        saver.restore(sess, checkpoint_file)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1775, in restore\r\n        {self.saver_def.filename_tensor_name: save_path})\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 905, in run\r\n        run_metadata_ptr)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1140, in _run\r\n        feed_dict_tensor, options, run_metadata)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1321, in _do_run\r\n        run_metadata)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\client\\session.py\", line 1340, in _do_call\r\n        raise type(e)(node_def, op, message)\r\n    tensorflow.python.framework.errors_impl.InvalidArgumentError: Assign requires shapes of both tensors to match. lhs shape= [3,3,128,768] rhs shape= [5,5,128,768]\r\n             [[Node: save/Assign_9 = Assign[T=DT_FLOAT, _class=[\"loc:@InceptionV4/AuxLogits/Conv2d_2a/weights\"], use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](InceptionV4/AuxLogits/Conv2d_2a/weights, save/RestoreV2:9)]]\r\n    Caused by op 'save/Assign_9', defined at:\r\n      File \"compute_features.py\", line 119, in <module>\r\n        saver = tf.train.Saver()\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1311, in init\r\n        self.build()\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1320, in build\r\n        self.build(self.filename, build_save=True, build_restore=True)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1357, in _build\r\n        build_save=build_save, build_restore=build_restore)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 809, in _build_internal\r\n        restore_sequentially, reshape)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 470, in _AddRestoreOps\r\n        assign_ops.append(saveable.restore(saveable_tensors, shapes))\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 162, in restore\r\n        self.op.get_shape().is_fully_defined())\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\state_ops.py\", line 281, in assign\r\n        validate_shape=validate_shape)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\gen_state_ops.py\", line 64, in assign\r\n        use_locking=use_locking, name=name)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py\", line 787, in _apply_op_helper\r\n        op_def=op_def)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 3290, in create_opop_def=op_def)\r\n      File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 1654, in init\r\n        self.traceback = self.graph._extract_stack()  # pylint: disable=protected-access\r\n    InvalidArgumentError (see above for traceback): Assign requires shapes of both tensors to match. lhs shape= [3,3,128,768] rhs shape= [5,5,128,768]\r\n             [[Node: save/Assign_9 = Assign[T=DT_FLOAT, _class=[\"loc:@InceptionV4/AuxLogits/Conv2d_2a/weights\"], use_locking=true, validate_shape=true, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](InceptionV4/AuxLogits/Conv2d_2a/weights, save/RestoreV2:9)]]\r\n    \r\n"}