{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/301631651", "html_url": "https://github.com/tensorflow/tensorflow/issues/7664#issuecomment-301631651", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7664", "id": 301631651, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTYzMTY1MQ==", "user": {"login": "physicso", "id": 7624428, "node_id": "MDQ6VXNlcjc2MjQ0Mjg=", "avatar_url": "https://avatars2.githubusercontent.com/u/7624428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/physicso", "html_url": "https://github.com/physicso", "followers_url": "https://api.github.com/users/physicso/followers", "following_url": "https://api.github.com/users/physicso/following{/other_user}", "gists_url": "https://api.github.com/users/physicso/gists{/gist_id}", "starred_url": "https://api.github.com/users/physicso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/physicso/subscriptions", "organizations_url": "https://api.github.com/users/physicso/orgs", "repos_url": "https://api.github.com/users/physicso/repos", "events_url": "https://api.github.com/users/physicso/events{/privacy}", "received_events_url": "https://api.github.com/users/physicso/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-15T23:19:11Z", "updated_at": "2017-05-15T23:27:49Z", "author_association": "NONE", "body_html": "<p>The RNN definition for TF 0.12 is different from 1.0: tf.nn. * -&gt; tf.contrib.rnn. *</p>\n<p>The model is not compatible, in other words, once we trained a model on TF 0.12, it is hard to restore it on TF 1.0.</p>\n<p>I wrote an adapter, using which you can transfer TF 0.12 RNN model into TF 1.0.</p>\n<p>Sample code ({k} indicates the k_th RNN layer):</p>\n<p>replace_vars = {<br>\n'rnn/rnn/MultiRNNCell/Cell{k}/BasicLSTMCell/Linear/Matrix': 'rnn/rnn/multi_rnn_cell/cell_{k}/basic_lstm_cell/weights',<br>\n'rnn/rnn/MultiRNNCell/Cell{k}/BasicLSTMCell/Linear/Bias': 'rnn/rnn/multi_rnn_cell/cell_{k}/basic_lstm_cell/biases'}<br>\nsaver.restore(sess, \"old.ckpt\")<br>\nnames_to_vars = {v.op.name: v for v in tf.all_variables()}<br>\nfor key in replace_vars.keys():<br>\nbias_var = names_to_vars[key]<br>\nnames_to_vars[replace_vars[key]] = bias_var<br>\ndel names_to_vars[key]<br>\nsaver = tf.train.Saver(var_list=names_to_vars)<br>\nsaver.save(sess, 'new.ckpt')</p>\n<p>You may refer to this repo for a complete solution:</p>\n<p><a href=\"https://github.com/physicso/TensorFlow_RNN_Adaptor\">https://github.com/physicso/TensorFlow_RNN_Adaptor</a></p>", "body_text": "The RNN definition for TF 0.12 is different from 1.0: tf.nn. * -> tf.contrib.rnn. *\nThe model is not compatible, in other words, once we trained a model on TF 0.12, it is hard to restore it on TF 1.0.\nI wrote an adapter, using which you can transfer TF 0.12 RNN model into TF 1.0.\nSample code ({k} indicates the k_th RNN layer):\nreplace_vars = {\n'rnn/rnn/MultiRNNCell/Cell{k}/BasicLSTMCell/Linear/Matrix': 'rnn/rnn/multi_rnn_cell/cell_{k}/basic_lstm_cell/weights',\n'rnn/rnn/MultiRNNCell/Cell{k}/BasicLSTMCell/Linear/Bias': 'rnn/rnn/multi_rnn_cell/cell_{k}/basic_lstm_cell/biases'}\nsaver.restore(sess, \"old.ckpt\")\nnames_to_vars = {v.op.name: v for v in tf.all_variables()}\nfor key in replace_vars.keys():\nbias_var = names_to_vars[key]\nnames_to_vars[replace_vars[key]] = bias_var\ndel names_to_vars[key]\nsaver = tf.train.Saver(var_list=names_to_vars)\nsaver.save(sess, 'new.ckpt')\nYou may refer to this repo for a complete solution:\nhttps://github.com/physicso/TensorFlow_RNN_Adaptor", "body": "The RNN definition for TF 0.12 is different from 1.0: tf.nn. * -> tf.contrib.rnn. *\r\n\r\nThe model is not compatible, in other words, once we trained a model on TF 0.12, it is hard to restore it on TF 1.0.\r\n\r\nI wrote an adapter, using which you can transfer TF 0.12 RNN model into TF 1.0.\r\n\r\nSample code ({k} indicates the k_th RNN layer):\r\n\r\nreplace_vars = {\r\n'rnn/rnn/MultiRNNCell/Cell{k}/BasicLSTMCell/Linear/Matrix': 'rnn/rnn/multi_rnn_cell/cell_{k}/basic_lstm_cell/weights',\r\n'rnn/rnn/MultiRNNCell/Cell{k}/BasicLSTMCell/Linear/Bias': 'rnn/rnn/multi_rnn_cell/cell_{k}/basic_lstm_cell/biases'}\r\nsaver.restore(sess, \"old.ckpt\")\r\nnames_to_vars = {v.op.name: v for v in tf.all_variables()}\r\nfor key in replace_vars.keys():\r\n    bias_var = names_to_vars[key]\r\n    names_to_vars[replace_vars[key]] = bias_var\r\n    del names_to_vars[key]\r\nsaver = tf.train.Saver(var_list=names_to_vars)\r\nsaver.save(sess, 'new.ckpt')\r\n\r\nYou may refer to this repo for a complete solution:\r\n\r\nhttps://github.com/physicso/TensorFlow_RNN_Adaptor"}