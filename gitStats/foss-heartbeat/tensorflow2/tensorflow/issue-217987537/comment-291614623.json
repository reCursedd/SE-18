{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/291614623", "html_url": "https://github.com/tensorflow/tensorflow/issues/8817#issuecomment-291614623", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8817", "id": 291614623, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTYxNDYyMw==", "user": {"login": "awav", "id": 24483645, "node_id": "MDQ6VXNlcjI0NDgzNjQ1", "avatar_url": "https://avatars0.githubusercontent.com/u/24483645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awav", "html_url": "https://github.com/awav", "followers_url": "https://api.github.com/users/awav/followers", "following_url": "https://api.github.com/users/awav/following{/other_user}", "gists_url": "https://api.github.com/users/awav/gists{/gist_id}", "starred_url": "https://api.github.com/users/awav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awav/subscriptions", "organizations_url": "https://api.github.com/users/awav/orgs", "repos_url": "https://api.github.com/users/awav/repos", "events_url": "https://api.github.com/users/awav/events{/privacy}", "received_events_url": "https://api.github.com/users/awav/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-04T19:59:26Z", "updated_at": "2017-04-04T19:59:26Z", "author_association": "NONE", "body_html": "<p>Thank you <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=326106\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/aselle\">@aselle</a>,<br>\nI implemented cancelling in a residual block using multiplication by zero and <code>tf.stop_gradient</code> as well, and it only prevents the contribution of this particular gradient of residual block to the parent layers. But as far as I understood the parameters which are marked as trainable will be always updated regardless of procedures mentioned above.<br>\nJust clarify the idea a bit, let's say we have a graph <code>a -&gt; b -&gt; c</code>, and <code>a</code>, <code>b</code>, <code>c</code> trainable layers (tensors) are included in the list of <code>tf.graph.TRAINABLE_VARIABLES</code>. Some layers may disappear randomly from trainable list during training according to stochastic depth nets, but Tensorflow does not allow it in any case now.</p>", "body_text": "Thank you @aselle,\nI implemented cancelling in a residual block using multiplication by zero and tf.stop_gradient as well, and it only prevents the contribution of this particular gradient of residual block to the parent layers. But as far as I understood the parameters which are marked as trainable will be always updated regardless of procedures mentioned above.\nJust clarify the idea a bit, let's say we have a graph a -> b -> c, and a, b, c trainable layers (tensors) are included in the list of tf.graph.TRAINABLE_VARIABLES. Some layers may disappear randomly from trainable list during training according to stochastic depth nets, but Tensorflow does not allow it in any case now.", "body": "Thank you @aselle,\r\nI implemented cancelling in a residual block using multiplication by zero and `tf.stop_gradient` as well, and it only prevents the contribution of this particular gradient of residual block to the parent layers. But as far as I understood the parameters which are marked as trainable will be always updated regardless of procedures mentioned above.\r\nJust clarify the idea a bit, let's say we have a graph `a -> b -> c`, and `a`, `b`, `c` trainable layers (tensors) are included in the list of `tf.graph.TRAINABLE_VARIABLES`. Some layers may disappear randomly from trainable list during training according to stochastic depth nets, but Tensorflow does not allow it in any case now."}