{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/302476302", "html_url": "https://github.com/tensorflow/tensorflow/issues/9925#issuecomment-302476302", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9925", "id": 302476302, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjQ3NjMwMg==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-18T17:09:16Z", "updated_at": "2017-05-18T17:09:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>To avoid spamming new issues on graph_editor, here's another one I found -- <code>copy_with_input_replacements</code> scales quadratically with size of the graph. Copying 80k piece of graph several times, most of the time spent inside <code>assign_renamed_collections_handler</code>, which in turn caused 300M calls to <code>__equals__</code> method inside <code>ops.py</code></p>\n<p>The work-around is to call <code>disable_collections_handler()</code> function below which disables graph editor's <code>assign_renamed_collections_handler</code>. That cut down the time spent inside <code>copy_with_input_replacements</code> from 332 seconds to 48 second.</p>\n<p>I'm happy to say that with these two issues fixed/hacked-around, <code>graph_editor</code> is usable for replicating large graphs (ie 200k node pixel CNN) onto multiple devices in reasonable time (&lt;15 minutes)</p>\n<pre><code># work-around for graph_editor.copy_with_input_replacements scaling\n# quadratically with size of the graph\nfrom tensorflow.contrib.graph_editor import transform\noriginal_assign_renamed_collections_handler = transform.assign_renamed_collections_handler\ndef dummy_collections_handler(info, elem, elem_): pass\ndef disable_collections_handler():\n  transform.assign_renamed_collections_handler = dummy_collections_handler\ndef enable_collections_handler():\n  transform.assign_renamed_collections_handler = original_assign_renamed_collections_handler\n</code></pre>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/23068/26214540/9a506bf6-3bb1-11e7-9e89-3986a17932f9.png\"><img width=\"1222\" alt=\"screenshot 2017-05-18 10 03 50\" src=\"https://cloud.githubusercontent.com/assets/23068/26214540/9a506bf6-3bb1-11e7-9e89-3986a17932f9.png\" style=\"max-width:100%;\"></a></p>", "body_text": "To avoid spamming new issues on graph_editor, here's another one I found -- copy_with_input_replacements scales quadratically with size of the graph. Copying 80k piece of graph several times, most of the time spent inside assign_renamed_collections_handler, which in turn caused 300M calls to __equals__ method inside ops.py\nThe work-around is to call disable_collections_handler() function below which disables graph editor's assign_renamed_collections_handler. That cut down the time spent inside copy_with_input_replacements from 332 seconds to 48 second.\nI'm happy to say that with these two issues fixed/hacked-around, graph_editor is usable for replicating large graphs (ie 200k node pixel CNN) onto multiple devices in reasonable time (<15 minutes)\n# work-around for graph_editor.copy_with_input_replacements scaling\n# quadratically with size of the graph\nfrom tensorflow.contrib.graph_editor import transform\noriginal_assign_renamed_collections_handler = transform.assign_renamed_collections_handler\ndef dummy_collections_handler(info, elem, elem_): pass\ndef disable_collections_handler():\n  transform.assign_renamed_collections_handler = dummy_collections_handler\ndef enable_collections_handler():\n  transform.assign_renamed_collections_handler = original_assign_renamed_collections_handler", "body": "To avoid spamming new issues on graph_editor, here's another one I found -- `copy_with_input_replacements` scales quadratically with size of the graph. Copying 80k piece of graph several times, most of the time spent inside `assign_renamed_collections_handler`, which in turn caused 300M calls to `__equals__` method inside `ops.py`\r\n\r\nThe work-around is to call `disable_collections_handler()` function below which disables graph editor's `assign_renamed_collections_handler`. That cut down the time spent inside `copy_with_input_replacements` from 332 seconds to 48 second.\r\n\r\nI'm happy to say that with these two issues fixed/hacked-around, `graph_editor` is usable for replicating large graphs (ie 200k node pixel CNN) onto multiple devices in reasonable time (<15 minutes)\r\n\r\n```\r\n# work-around for graph_editor.copy_with_input_replacements scaling\r\n# quadratically with size of the graph\r\nfrom tensorflow.contrib.graph_editor import transform\r\noriginal_assign_renamed_collections_handler = transform.assign_renamed_collections_handler\r\ndef dummy_collections_handler(info, elem, elem_): pass\r\ndef disable_collections_handler():\r\n  transform.assign_renamed_collections_handler = dummy_collections_handler\r\ndef enable_collections_handler():\r\n  transform.assign_renamed_collections_handler = original_assign_renamed_collections_handler\r\n```\r\n<img width=\"1222\" alt=\"screenshot 2017-05-18 10 03 50\" src=\"https://cloud.githubusercontent.com/assets/23068/26214540/9a506bf6-3bb1-11e7-9e89-3986a17932f9.png\">\r\n"}