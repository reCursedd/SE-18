{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9925", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9925/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9925/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9925/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9925", "id": 228892895, "node_id": "MDU6SXNzdWUyMjg4OTI4OTU=", "number": 9925, "title": "graph_editor copy_with_input_replacements doesn't update colocation constraints", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-05-16T01:49:41Z", "updated_at": "2018-01-04T13:29:23Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>It seems if you try to use graph_editor to make copy of a model to place on another device, the new graph will still refer to old version inside colocation constraints.</p>\n<p>This causes errors like below when trying to run resulting graph.<br>\n<code>tensorflow.python.framework.errors_impl.InvalidArgumentError: Cannot colocate nodes 'gradients/Max_1_1_grad/mul' and 'gradients/AddN_13: Cannot merge devices with incompatible ids: '/GPU:0' and '/GPU:1' </code></p>\n<p>More natural might be to update colocation constraints to point to newly created copies of ops.</p>\n<p>Test case</p>\n<pre><code>  import tensorflow.contrib.graph_editor as ge\n  tf.reset_default_graph()\n  with tf.device('/cpu:0'):\n    a = tf.ones((), name='a')\n    with tf.get_default_graph().colocate_with(a):\n      b = tf.add(a, 1, name='b')\n  g = tf.get_default_graph()\n  ops = g.get_operations()\n  copied_sgv, info = ge.copy_with_input_replacements(ge.sgv(ops),\n                                                       {})\n  print(tf.get_default_graph().as_graph_def())\n</code></pre>\n<p>You will see that newly created <code>b_1</code> op will refer to old op <code>a</code></p>\n<pre><code>node {\n  name: \"b/y_1\"\n  op: \"Const\"\n  device: \"/device:CPU:0\"\n  attr {\n    key: \"_class\"\n    value {\n      list {\n        s: \"loc:@a\"\n      }\n    }\n  }\n</code></pre>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=724322\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/purpledog\">@purpledog</a></p>", "body_text": "It seems if you try to use graph_editor to make copy of a model to place on another device, the new graph will still refer to old version inside colocation constraints.\nThis causes errors like below when trying to run resulting graph.\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Cannot colocate nodes 'gradients/Max_1_1_grad/mul' and 'gradients/AddN_13: Cannot merge devices with incompatible ids: '/GPU:0' and '/GPU:1' \nMore natural might be to update colocation constraints to point to newly created copies of ops.\nTest case\n  import tensorflow.contrib.graph_editor as ge\n  tf.reset_default_graph()\n  with tf.device('/cpu:0'):\n    a = tf.ones((), name='a')\n    with tf.get_default_graph().colocate_with(a):\n      b = tf.add(a, 1, name='b')\n  g = tf.get_default_graph()\n  ops = g.get_operations()\n  copied_sgv, info = ge.copy_with_input_replacements(ge.sgv(ops),\n                                                       {})\n  print(tf.get_default_graph().as_graph_def())\n\nYou will see that newly created b_1 op will refer to old op a\nnode {\n  name: \"b/y_1\"\n  op: \"Const\"\n  device: \"/device:CPU:0\"\n  attr {\n    key: \"_class\"\n    value {\n      list {\n        s: \"loc:@a\"\n      }\n    }\n  }\n\n@purpledog", "body": "It seems if you try to use graph_editor to make copy of a model to place on another device, the new graph will still refer to old version inside colocation constraints. \r\n\r\nThis causes errors like below when trying to run resulting graph.\r\n`tensorflow.python.framework.errors_impl.InvalidArgumentError: Cannot colocate nodes 'gradients/Max_1_1_grad/mul' and 'gradients/AddN_13: Cannot merge devices with incompatible ids: '/GPU:0' and '/GPU:1'\r\n`\r\n\r\nMore natural might be to update colocation constraints to point to newly created copies of ops.\r\n\r\nTest case\r\n```\r\n  import tensorflow.contrib.graph_editor as ge\r\n  tf.reset_default_graph()\r\n  with tf.device('/cpu:0'):\r\n    a = tf.ones((), name='a')\r\n    with tf.get_default_graph().colocate_with(a):\r\n      b = tf.add(a, 1, name='b')\r\n  g = tf.get_default_graph()\r\n  ops = g.get_operations()\r\n  copied_sgv, info = ge.copy_with_input_replacements(ge.sgv(ops),\r\n                                                       {})\r\n  print(tf.get_default_graph().as_graph_def())\r\n```\r\n\r\nYou will see that newly created `b_1` op will refer to old op `a`\r\n\r\n```\r\nnode {\r\n  name: \"b/y_1\"\r\n  op: \"Const\"\r\n  device: \"/device:CPU:0\"\r\n  attr {\r\n    key: \"_class\"\r\n    value {\r\n      list {\r\n        s: \"loc:@a\"\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\n@purpledog "}