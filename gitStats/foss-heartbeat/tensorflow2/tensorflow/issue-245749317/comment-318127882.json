{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/318127882", "html_url": "https://github.com/tensorflow/tensorflow/issues/11787#issuecomment-318127882", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11787", "id": 318127882, "node_id": "MDEyOklzc3VlQ29tbWVudDMxODEyNzg4Mg==", "user": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-26T17:38:51Z", "updated_at": "2017-07-26T17:38:51Z", "author_association": "MEMBER", "body_html": "<p>This question is better asked on  <a href=\"http://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">StackOverflow</a> since it is not a  bug or feature request. There is also a larger community that reads questions there. Thanks!</p>\n<p>Anyway, to answer the question, the issue is that in the line</p>\n<div class=\"highlight highlight-source-python\"><pre>mask <span class=\"pl-k\">=</span> tf.scatter_update(mask, b, [<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>])</pre></div>\n<p>you set <code>mask</code> to the result of an update op. After that line, whenever you evaluate <code>mask</code>, you do another <code>scatter_update</code> to it, which sets more elements to 3. Later, the line</p>\n<div class=\"highlight highlight-source-python\"><pre>mask <span class=\"pl-k\">=</span> tf.scatter_update(mask, c, [<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>])</pre></div>\n<p>applies another update on top of the original update. So, after that point, whenever mask is evaluated, it does two updates: one which sets two 3s, and another which sets three 5s. The first <code>mask.eval(...)</code> only applies the original update, and the second applies both updates. Therefore, a total of four 3s and three 5s are set (some updates may overwrite others).</p>\n<p>To apply each update once, try removing the first <code>mask.eval(...)</code>. Alternatively, do not assign mask to the return value of <code>tf.scatter_update</code>, but instead do something like</p>\n<div class=\"highlight highlight-source-python\"><pre>update1 <span class=\"pl-k\">=</span> tf.scatter_update(mask, b, [<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>])\nsess.run(tf.global_variables_initializer())\n<span class=\"pl-c1\">print</span>(update1.eval(<span class=\"pl-v\">session</span><span class=\"pl-k\">=</span>sess))\nc <span class=\"pl-k\">=</span> dist.sample([<span class=\"pl-c1\">3</span>])\nupdate2 <span class=\"pl-k\">=</span> tf.scatter_update(mask, c, [<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">5</span>])\n<span class=\"pl-c1\">print</span>(update2.eval(<span class=\"pl-v\">session</span><span class=\"pl-k\">=</span>sess))</pre></div>", "body_text": "This question is better asked on  StackOverflow since it is not a  bug or feature request. There is also a larger community that reads questions there. Thanks!\nAnyway, to answer the question, the issue is that in the line\nmask = tf.scatter_update(mask, b, [3,3])\nyou set mask to the result of an update op. After that line, whenever you evaluate mask, you do another scatter_update to it, which sets more elements to 3. Later, the line\nmask = tf.scatter_update(mask, c, [5,5,5])\napplies another update on top of the original update. So, after that point, whenever mask is evaluated, it does two updates: one which sets two 3s, and another which sets three 5s. The first mask.eval(...) only applies the original update, and the second applies both updates. Therefore, a total of four 3s and three 5s are set (some updates may overwrite others).\nTo apply each update once, try removing the first mask.eval(...). Alternatively, do not assign mask to the return value of tf.scatter_update, but instead do something like\nupdate1 = tf.scatter_update(mask, b, [3,3])\nsess.run(tf.global_variables_initializer())\nprint(update1.eval(session=sess))\nc = dist.sample([3])\nupdate2 = tf.scatter_update(mask, c, [5,5,5])\nprint(update2.eval(session=sess))", "body": "This question is better asked on  [StackOverflow](http://stackoverflow.com/questions/tagged/tensorflow) since it is not a  bug or feature request. There is also a larger community that reads questions there. Thanks!\r\n\r\nAnyway, to answer the question, the issue is that in the line\r\n```python\r\nmask = tf.scatter_update(mask, b, [3,3])\r\n```\r\nyou set `mask` to the result of an update op. After that line, whenever you evaluate `mask`, you do another `scatter_update` to it, which sets more elements to 3. Later, the line\r\n```python\r\nmask = tf.scatter_update(mask, c, [5,5,5])\r\n````\r\napplies another update on top of the original update. So, after that point, whenever mask is evaluated, it does two updates: one which sets two 3s, and another which sets three 5s. The first `mask.eval(...)` only applies the original update, and the second applies both updates. Therefore, a total of four 3s and three 5s are set (some updates may overwrite others).\r\n\r\nTo apply each update once, try removing the first `mask.eval(...)`. Alternatively, do not assign mask to the return value of `tf.scatter_update`, but instead do something like\r\n```python\r\nupdate1 = tf.scatter_update(mask, b, [3,3])\r\nsess.run(tf.global_variables_initializer())\r\nprint(update1.eval(session=sess))\r\nc = dist.sample([3])\r\nupdate2 = tf.scatter_update(mask, c, [5,5,5])\r\nprint(update2.eval(session=sess))\r\n```"}