{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11787", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11787/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11787/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11787/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11787", "id": 245749317, "node_id": "MDU6SXNzdWUyNDU3NDkzMTc=", "number": 11787, "title": "Unexpected behavior in tf.scatter_update", "user": {"login": "mbchang", "id": 6439365, "node_id": "MDQ6VXNlcjY0MzkzNjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6439365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbchang", "html_url": "https://github.com/mbchang", "followers_url": "https://api.github.com/users/mbchang/followers", "following_url": "https://api.github.com/users/mbchang/following{/other_user}", "gists_url": "https://api.github.com/users/mbchang/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbchang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbchang/subscriptions", "organizations_url": "https://api.github.com/users/mbchang/orgs", "repos_url": "https://api.github.com/users/mbchang/repos", "events_url": "https://api.github.com/users/mbchang/events{/privacy}", "received_events_url": "https://api.github.com/users/mbchang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-26T14:52:28Z", "updated_at": "2017-07-26T17:38:51Z", "closed_at": "2017-07-26T17:38:51Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Mac OS X 10.12.3</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.2.0</li>\n<li><strong>Python version</strong>: 2.7.10</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: CPU</li>\n<li><strong>GPU model and memory</strong>: CPU</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<pre><code>&gt;&gt;&gt; import tensorflow as tf\n&gt;&gt;&gt; sess = tf.Session()\n&gt;&gt;&gt; dim = 10\n&gt;&gt;&gt; probs = tf.Variable(tf.ones(dim), trainable=False)\n&gt;&gt;&gt; dist = tf.contrib.distributions.Categorical(probs=probs)\n&gt;&gt;&gt; mask = tf.Variable(tf.ones(dim), trainable=False)\n&gt;&gt;&gt; b = dist.sample([2])\n&gt;&gt;&gt; mask = tf.scatter_update(mask, b, [3,3])\n&gt;&gt;&gt; sess.run(tf.global_variables_initializer())\n&gt;&gt;&gt; print(mask.eval(session=sess))\n[ 1.  1.  3.  3.  1.  1.  1.  1.  1.  1.]  # first call\n&gt;&gt;&gt; c = dist.sample([3])\n&gt;&gt;&gt; mask = tf.scatter_update(mask, c, [5,5,5])\n&gt;&gt;&gt; print(mask.eval(session=sess))\n[ 3.  1.  3.  5.  3.  5.  5.  1.  1.  1.]  # second call\n</code></pre>\n<h3>Describe the problem</h3>\n<p>I am trying to update <code>mask</code> at indices sampled by <code>dist</code>, and I need past updates to persist as I add more updates to mask. That is, I would expect the second call to be <code>[ 1.  1.  3.  5.  1.  5.  5.  1.  1.  1.]</code>. Since <code>tf.scatter_update</code> mutates <code>mask</code>, I would expect the updates to persist, but it seems like the the updates are made anew every time I call <code>mask.eval()</code>.</p>\n<p>Furthermore, perhaps I'm missing something, but the output of the second call is further unexpected in the sense that I see three 3's in <code>mask</code>, even when I never assigned three 3's to mask, only two. Is there an explanation for this?</p>\n<p>If this is not a bug, then could we add a feature to allow for consistent and persistent updates?</p>\n<h3>Source code / logs</h3>\n<p>Please see above.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS X 10.12.3\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.2.0\nPython version: 2.7.10\nBazel version (if compiling from source):\nCUDA/cuDNN version: CPU\nGPU model and memory: CPU\nExact command to reproduce:\n\n>>> import tensorflow as tf\n>>> sess = tf.Session()\n>>> dim = 10\n>>> probs = tf.Variable(tf.ones(dim), trainable=False)\n>>> dist = tf.contrib.distributions.Categorical(probs=probs)\n>>> mask = tf.Variable(tf.ones(dim), trainable=False)\n>>> b = dist.sample([2])\n>>> mask = tf.scatter_update(mask, b, [3,3])\n>>> sess.run(tf.global_variables_initializer())\n>>> print(mask.eval(session=sess))\n[ 1.  1.  3.  3.  1.  1.  1.  1.  1.  1.]  # first call\n>>> c = dist.sample([3])\n>>> mask = tf.scatter_update(mask, c, [5,5,5])\n>>> print(mask.eval(session=sess))\n[ 3.  1.  3.  5.  3.  5.  5.  1.  1.  1.]  # second call\n\nDescribe the problem\nI am trying to update mask at indices sampled by dist, and I need past updates to persist as I add more updates to mask. That is, I would expect the second call to be [ 1.  1.  3.  5.  1.  5.  5.  1.  1.  1.]. Since tf.scatter_update mutates mask, I would expect the updates to persist, but it seems like the the updates are made anew every time I call mask.eval().\nFurthermore, perhaps I'm missing something, but the output of the second call is further unexpected in the sense that I see three 3's in mask, even when I never assigned three 3's to mask, only two. Is there an explanation for this?\nIf this is not a bug, then could we add a feature to allow for consistent and persistent updates?\nSource code / logs\nPlease see above.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Mac OS X 10.12.3\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.2.0\r\n- **Python version**: 2.7.10\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: CPU\r\n- **GPU model and memory**: CPU\r\n- **Exact command to reproduce**:\r\n```\r\n>>> import tensorflow as tf\r\n>>> sess = tf.Session()\r\n>>> dim = 10\r\n>>> probs = tf.Variable(tf.ones(dim), trainable=False)\r\n>>> dist = tf.contrib.distributions.Categorical(probs=probs)\r\n>>> mask = tf.Variable(tf.ones(dim), trainable=False)\r\n>>> b = dist.sample([2])\r\n>>> mask = tf.scatter_update(mask, b, [3,3])\r\n>>> sess.run(tf.global_variables_initializer())\r\n>>> print(mask.eval(session=sess))\r\n[ 1.  1.  3.  3.  1.  1.  1.  1.  1.  1.]  # first call\r\n>>> c = dist.sample([3])\r\n>>> mask = tf.scatter_update(mask, c, [5,5,5])\r\n>>> print(mask.eval(session=sess))\r\n[ 3.  1.  3.  5.  3.  5.  5.  1.  1.  1.]  # second call\r\n```\r\n\r\n### Describe the problem\r\nI am trying to update `mask` at indices sampled by `dist`, and I need past updates to persist as I add more updates to mask. That is, I would expect the second call to be `[ 1.  1.  3.  5.  1.  5.  5.  1.  1.  1.]`. Since `tf.scatter_update` mutates `mask`, I would expect the updates to persist, but it seems like the the updates are made anew every time I call `mask.eval()`. \r\n\r\nFurthermore, perhaps I'm missing something, but the output of the second call is further unexpected in the sense that I see three 3's in `mask`, even when I never assigned three 3's to mask, only two. Is there an explanation for this? \r\n\r\nIf this is not a bug, then could we add a feature to allow for consistent and persistent updates?\r\n\r\n### Source code / logs\r\nPlease see above.\r\n"}