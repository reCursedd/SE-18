{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16441", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16441/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16441/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16441/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/16441", "id": 291801932, "node_id": "MDExOlB1bGxSZXF1ZXN0MTY1MjkxODIy", "number": 16441, "title": "Make raw_rnn accept scalar or TensorArray values for state.", "user": {"login": "lspvic", "id": 4335658, "node_id": "MDQ6VXNlcjQzMzU2NTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/4335658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lspvic", "html_url": "https://github.com/lspvic", "followers_url": "https://api.github.com/users/lspvic/followers", "following_url": "https://api.github.com/users/lspvic/following{/other_user}", "gists_url": "https://api.github.com/users/lspvic/gists{/gist_id}", "starred_url": "https://api.github.com/users/lspvic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lspvic/subscriptions", "organizations_url": "https://api.github.com/users/lspvic/orgs", "repos_url": "https://api.github.com/users/lspvic/repos", "events_url": "https://api.github.com/users/lspvic/events{/privacy}", "received_events_url": "https://api.github.com/users/lspvic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 419840263, "node_id": "MDU6TGFiZWw0MTk4NDAyNjM=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20testing%20(then%20merge)", "name": "awaiting testing (then merge)", "color": "c2e0c6", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-01-26T05:13:53Z", "updated_at": "2018-01-26T18:11:31Z", "closed_at": "2018-01-26T18:11:30Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16441", "html_url": "https://github.com/tensorflow/tensorflow/pull/16441", "diff_url": "https://github.com/tensorflow/tensorflow/pull/16441.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/16441.patch"}, "body_html": "<p><code>tf.contrib.seq2seq.AttentionWrapper</code> rnn cell cannot be passed to <code>raw_rnn</code>, the problem is related<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"247587203\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/11988\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/11988/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/11988\">#11988</a>, and the same problem in <code>dynamic_rnn</code>  been solved. However, in <code>raw_rnn</code>, it still exists as<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"247587203\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/11988\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/11988/hovercard?comment_id=326887212&amp;comment_type=issue_comment\" href=\"https://github.com/tensorflow/tensorflow/issues/11988#issuecomment-326887212\">#11988 (comment)</a> pointed.</p>\n<p>When state is a tuple which contains a nested scalar state (i.e. <code>time</code> state in <code>tf.contrib.seq2seq.AttentionWrapperState</code>), the codes <code>tf.where</code> for scalars fail.</p>\n<p>Current code in <code>raw_rnn</code>:</p>\n<div class=\"highlight highlight-source-python\"><pre>      <span class=\"pl-k\">def</span> <span class=\"pl-en\">_copy_some_through</span>(<span class=\"pl-smi\">current</span>, <span class=\"pl-smi\">candidate</span>):\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Copy some tensors through via array_ops.where.<span class=\"pl-pds\">\"\"\"</span></span>\n          <span class=\"pl-k\">with</span> ops.colocate_with(cand_i):\n            <span class=\"pl-k\">return</span> array_ops.where(elements_finished, cur_i, cand_i)\n        <span class=\"pl-k\">return</span> nest.map_structure(copy_fn, current, candidate)\n\n      emit_output <span class=\"pl-k\">=</span> _copy_some_through(zero_emit, emit_output)\n      next_state <span class=\"pl-k\">=</span> _copy_some_through(state, next_state)</pre></div>\n<p>Similar codes in <code>dynamic_rnn</code> have been amended, as follows:</p>\n<div class=\"highlight highlight-source-python\"><pre>  <span class=\"pl-k\">def</span> <span class=\"pl-en\">_copy_one_through</span>(<span class=\"pl-smi\">output</span>, <span class=\"pl-smi\">new_output</span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> TensorArray and scalar get passed through.</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(output, tensor_array_ops.TensorArray):\n      <span class=\"pl-k\">return</span> new_output\n    <span class=\"pl-k\">if</span> output.shape.ndims <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>:\n      <span class=\"pl-k\">return</span> new_output\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Otherwise propagate the old or the new value.</span>\n    copy_cond <span class=\"pl-k\">=</span> (time <span class=\"pl-k\">&gt;=</span> sequence_length)\n    <span class=\"pl-k\">with</span> ops.colocate_with(new_output):\n      <span class=\"pl-k\">return</span> array_ops.where(copy_cond, output, new_output)</pre></div>\n<p>This PR solves the problem, add judgement as with <code>dynamic_rnn</code>.</p>", "body_text": "tf.contrib.seq2seq.AttentionWrapper rnn cell cannot be passed to raw_rnn, the problem is related\n#11988, and the same problem in dynamic_rnn  been solved. However, in raw_rnn, it still exists as\n#11988 (comment) pointed.\nWhen state is a tuple which contains a nested scalar state (i.e. time state in tf.contrib.seq2seq.AttentionWrapperState), the codes tf.where for scalars fail.\nCurrent code in raw_rnn:\n      def _copy_some_through(current, candidate):\n        \"\"\"Copy some tensors through via array_ops.where.\"\"\"\n          with ops.colocate_with(cand_i):\n            return array_ops.where(elements_finished, cur_i, cand_i)\n        return nest.map_structure(copy_fn, current, candidate)\n\n      emit_output = _copy_some_through(zero_emit, emit_output)\n      next_state = _copy_some_through(state, next_state)\nSimilar codes in dynamic_rnn have been amended, as follows:\n  def _copy_one_through(output, new_output):\n    # TensorArray and scalar get passed through.\n    if isinstance(output, tensor_array_ops.TensorArray):\n      return new_output\n    if output.shape.ndims == 0:\n      return new_output\n    # Otherwise propagate the old or the new value.\n    copy_cond = (time >= sequence_length)\n    with ops.colocate_with(new_output):\n      return array_ops.where(copy_cond, output, new_output)\nThis PR solves the problem, add judgement as with dynamic_rnn.", "body": "`tf.contrib.seq2seq.AttentionWrapper` rnn cell cannot be passed to `raw_rnn`, the problem is related\r\n#11988, and the same problem in `dynamic_rnn`  been solved. However, in `raw_rnn`, it still exists as \r\nhttps://github.com/tensorflow/tensorflow/issues/11988#issuecomment-326887212 pointed.\r\n\r\nWhen state is a tuple which contains a nested scalar state (i.e. `time` state in `tf.contrib.seq2seq.AttentionWrapperState`), the codes `tf.where` for scalars fail.\r\n\r\nCurrent code in `raw_rnn`:\r\n```python\r\n      def _copy_some_through(current, candidate):\r\n        \"\"\"Copy some tensors through via array_ops.where.\"\"\"\r\n          with ops.colocate_with(cand_i):\r\n            return array_ops.where(elements_finished, cur_i, cand_i)\r\n        return nest.map_structure(copy_fn, current, candidate)\r\n\r\n      emit_output = _copy_some_through(zero_emit, emit_output)\r\n      next_state = _copy_some_through(state, next_state)\r\n```\r\n\r\nSimilar codes in `dynamic_rnn` have been amended, as follows:\r\n```python\r\n  def _copy_one_through(output, new_output):\r\n    # TensorArray and scalar get passed through.\r\n    if isinstance(output, tensor_array_ops.TensorArray):\r\n      return new_output\r\n    if output.shape.ndims == 0:\r\n      return new_output\r\n    # Otherwise propagate the old or the new value.\r\n    copy_cond = (time >= sequence_length)\r\n    with ops.colocate_with(new_output):\r\n      return array_ops.where(copy_cond, output, new_output)\r\n```\r\n\r\nThis PR solves the problem, add judgement as with `dynamic_rnn`."}