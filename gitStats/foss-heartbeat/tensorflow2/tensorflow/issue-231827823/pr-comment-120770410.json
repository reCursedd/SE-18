{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120770410", "pull_request_review_id": 42761564, "id": 120770410, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDc3MDQxMA==", "diff_hunk": "@@ -0,0 +1,158 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow.op;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A class to manage scoped (hierarchical) names for operators.\n+ *\n+ * <p>{@code NameScope} manages hierarchical names where each component in the hierarchy is\n+ * separated by a forward slash {@code '/'}. For instance, {@code nn/Const_72} or {@code\n+ * nn/gradient/assign/init}. Each scope is a subtree in this hierarchy.\n+ *\n+ * <p>Use {@code NameScope} to group related operations within a hierarchy, which for example lets\n+ * tensorboard coalesce nodes for better graph visualizations.\n+ *\n+ * <p>This class is package private, user code creates {@link Scope} which internally delegates\n+ * calls to an underlying {@code NameScope}.\n+ *\n+ * <p>This class is thread-safe.", "path": "tensorflow/java/src/main/java/org/tensorflow/op/NameScope.java", "position": null, "original_position": 35, "commit_id": "f049c08e7876b0638293c38d9f0aa6af8774a325", "original_commit_id": "71261abe4de966f013644337c3f23b364303dc40", "user": {"login": "kbsriram", "id": 1495065, "node_id": "MDQ6VXNlcjE0OTUwNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1495065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbsriram", "html_url": "https://github.com/kbsriram", "followers_url": "https://api.github.com/users/kbsriram/followers", "following_url": "https://api.github.com/users/kbsriram/following{/other_user}", "gists_url": "https://api.github.com/users/kbsriram/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbsriram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbsriram/subscriptions", "organizations_url": "https://api.github.com/users/kbsriram/orgs", "repos_url": "https://api.github.com/users/kbsriram/repos", "events_url": "https://api.github.com/users/kbsriram/events{/privacy}", "received_events_url": "https://api.github.com/users/kbsriram/received_events", "type": "User", "site_admin": false}, "body": "If graph construction time seems a non-issue, we can close off the option entirely as you suggest.\r\n\r\nOne thought: should you be considering more of a wait-and-see approach - it may be less disruptive to improve a less performant but correct implementation than change it from \"not thread-safe\" to \"thread-safe.\" The reason is that user-side code will likely need to restructure itself to take advantage in the latter case; but in the former case it will improve directly as the framework code improves.\r\n\r\nFor what it's worth, the locks here are per scope-instance; so to the extent different threads use different scopes there should be no contention. Aiui, possibly the place to watch out may be  [the per-graph global lock](https://github.com/tensorflow/tensorflow/blob/ce02c770fb269e5e607da459bde4f580ef108137/tensorflow/c/c_api_internal.h#L67) in the underlying c_api abstraction that guards operation creation itself.", "created_at": "2017-06-07T23:35:18Z", "updated_at": "2017-06-09T00:05:47Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120770410", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120770410"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120770410"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255"}}, "body_html": "<p>If graph construction time seems a non-issue, we can close off the option entirely as you suggest.</p>\n<p>One thought: should you be considering more of a wait-and-see approach - it may be less disruptive to improve a less performant but correct implementation than change it from \"not thread-safe\" to \"thread-safe.\" The reason is that user-side code will likely need to restructure itself to take advantage in the latter case; but in the former case it will improve directly as the framework code improves.</p>\n<p>For what it's worth, the locks here are per scope-instance; so to the extent different threads use different scopes there should be no contention. Aiui, possibly the place to watch out may be  <a href=\"https://github.com/tensorflow/tensorflow/blob/ce02c770fb269e5e607da459bde4f580ef108137/tensorflow/c/c_api_internal.h#L67\">the per-graph global lock</a> in the underlying c_api abstraction that guards operation creation itself.</p>", "body_text": "If graph construction time seems a non-issue, we can close off the option entirely as you suggest.\nOne thought: should you be considering more of a wait-and-see approach - it may be less disruptive to improve a less performant but correct implementation than change it from \"not thread-safe\" to \"thread-safe.\" The reason is that user-side code will likely need to restructure itself to take advantage in the latter case; but in the former case it will improve directly as the framework code improves.\nFor what it's worth, the locks here are per scope-instance; so to the extent different threads use different scopes there should be no contention. Aiui, possibly the place to watch out may be  the per-graph global lock in the underlying c_api abstraction that guards operation creation itself.", "in_reply_to_id": 120690007}