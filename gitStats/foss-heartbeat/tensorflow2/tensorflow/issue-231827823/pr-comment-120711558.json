{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120711558", "pull_request_review_id": 42697793, "id": 120711558, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDcxMTU1OA==", "diff_hunk": "@@ -0,0 +1,158 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow.op;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A class to manage scoped (hierarchical) names for operators.\n+ *\n+ * <p>{@code NameScope} manages hierarchical names where each component in the hierarchy is\n+ * separated by a forward slash {@code '/'}. For instance, {@code nn/Const_72} or {@code\n+ * nn/gradient/assign/init}. Each scope is a subtree in this hierarchy.\n+ *\n+ * <p>Use {@code NameScope} to group related operations within a hierarchy, which for example lets\n+ * tensorboard coalesce nodes for better graph visualizations.\n+ *\n+ * <p>This class is package private, user code creates {@link Scope} which internally delegates\n+ * calls to an underlying {@code NameScope}.\n+ *\n+ * <p>This class is thread-safe.\n+ */\n+final class NameScope {\n+\n+  NameScope withSubScope(String scopeName) {\n+    if (baseName == null) {\n+      checkPattern(OP_NAME_REGEX, scopeName);\n+    } else {\n+      checkPattern(SUBSCOPE_NAME_REGEX, scopeName);\n+    }\n+\n+    if (baseOpName != null) {\n+      // Use the base name instead to derive the subscope.\n+      scopeName = baseOpName;", "path": "tensorflow/java/src/main/java/org/tensorflow/op/NameScope.java", "position": null, "original_position": 48, "commit_id": "f049c08e7876b0638293c38d9f0aa6af8774a325", "original_commit_id": "71261abe4de966f013644337c3f23b364303dc40", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "This is a bit confusing in that `withSubScope` ignores the argument if `baseOpName` is `null`.\r\nOne alternative would be that `withSubScope` ignores the `baseOpName` and just creates a new sub-scope.\r\nSo something like:\r\n\r\n```java\r\nConst.create(s.withName(\"foo\"), ...) // Results in \"foo\"\r\nConst.create(s.withName(\"foo\").withSubScope(\"foo\"), ...)  // Results in \"foo/Const\" - as if the withName was ignored\r\n```\r\n\r\nThat way it is clearer than `withName` only applies to the name (suffix) of the op and doesn't affect the scoping prefixes ever.\r\n\r\nWhat do you think?", "created_at": "2017-06-07T18:41:31Z", "updated_at": "2017-06-09T00:05:47Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120711558", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120711558"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120711558"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255"}}, "body_html": "<p>This is a bit confusing in that <code>withSubScope</code> ignores the argument if <code>baseOpName</code> is <code>null</code>.<br>\nOne alternative would be that <code>withSubScope</code> ignores the <code>baseOpName</code> and just creates a new sub-scope.<br>\nSo something like:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-smi\">Const</span><span class=\"pl-k\">.</span>create(s<span class=\"pl-k\">.</span>withName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-c1\">...</span>) <span class=\"pl-c\"><span class=\"pl-c\">//</span> Results in \"foo\"</span>\n<span class=\"pl-smi\">Const</span><span class=\"pl-k\">.</span>create(s<span class=\"pl-k\">.</span>withName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>withSubScope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-c1\">...</span>)  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Results in \"foo/Const\" - as if the withName was ignored</span></pre></div>\n<p>That way it is clearer than <code>withName</code> only applies to the name (suffix) of the op and doesn't affect the scoping prefixes ever.</p>\n<p>What do you think?</p>", "body_text": "This is a bit confusing in that withSubScope ignores the argument if baseOpName is null.\nOne alternative would be that withSubScope ignores the baseOpName and just creates a new sub-scope.\nSo something like:\nConst.create(s.withName(\"foo\"), ...) // Results in \"foo\"\nConst.create(s.withName(\"foo\").withSubScope(\"foo\"), ...)  // Results in \"foo/Const\" - as if the withName was ignored\nThat way it is clearer than withName only applies to the name (suffix) of the op and doesn't affect the scoping prefixes ever.\nWhat do you think?"}