{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120264096", "pull_request_review_id": 42208553, "id": 120264096, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDI2NDA5Ng==", "diff_hunk": "@@ -0,0 +1,181 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A class to manage scoped (hierarchical) names for operators.\n+ *\n+ * <p>{@code NameScope} manages hierarchical names where each component in the hierarchy is\n+ * separated by a forward slash {@code '/'}. For instance, {@code nn/Const_72} or {@code\n+ * nn/gradient/assign/init}. Each scope is a subtree in this hierarchy.\n+ *\n+ * <p>Use {@code NameScope} to group related operations within a hierarchy, which for example lets\n+ * tensorboard coalesce nodes for better graph visualizations.\n+ *\n+ * <p>This class is package private, user code creates {@link Scope} which internally delegates\n+ * calls to an underlying {@code NameScope}.\n+ *\n+ * <p>This class is thread-safe.\n+ */\n+final class NameScope {\n+\n+  NameScope withSubScope(String scopeName) {\n+    if (baseName == null) {\n+      checkPattern(OP_NAME_REGEX, scopeName);\n+    } else {\n+      checkPattern(ROOT_SCOPE_NAME_REGEX, scopeName);\n+    }\n+\n+    if (baseOpName != null) {\n+      // Use the base name instead to derive the subscope.\n+      scopeName = baseOpName;\n+    }\n+\n+    String newBaseName = fullyQualify(makeUnique(scopeName));\n+    return NameScope.builder().baseName(newBaseName).build();\n+  }\n+\n+  NameScope withOpName(String name) {\n+    checkPattern(OP_NAME_REGEX, name);\n+\n+    // All context except for the baseOpName is shared with the new scope.\n+    return NameScope.builder().ids(ids).baseName(baseName).baseOpName(name).build();\n+  }\n+\n+  String makeOpName(String opName) {\n+    checkPattern(OP_NAME_REGEX, opName);\n+\n+    if (baseOpName != null) {\n+      opName = baseOpName;\n+    }\n+    opName = makeUnique(opName);\n+    return fullyQualify(opName);\n+  }\n+\n+  /**\n+   * Create a new, root-level namescope.\n+   *\n+   * <p>A root-level namescope generates operator names with no components, like {@code Const_72}\n+   * and {@code result}.\n+   *\n+   * @return a NameScope that generates top-level names.\n+   */\n+  static NameScope create() {\n+    return NameScope.builder().build();\n+  }\n+\n+  private NameScope(Builder builder) {\n+    baseName = builder.baseName;\n+    baseOpName = builder.baseOpName;\n+    if (builder.ids != null) {\n+      ids = builder.ids;\n+    } else {\n+      ids = new HashMap<String, Integer>();\n+    }\n+  }\n+\n+  // Generate a unique name, different from existing ids.\n+  //\n+  // ids is a map from id to integer, representing a counter of the\n+  // number of previous requests to generate a unique name for the\n+  // given id.\n+  //\n+  // For instance, the first use of makeUnique(\"a\") adds \"a\" -> 1\n+  // to ids and returns \"a\".\n+  //\n+  // The second use of makeUnique(\"a\") updates ids to \"a\" -> 2\n+  // and returns \"a_1\", and so on.\n+  private String makeUnique(String id) {\n+    synchronized (ids) {\n+      if (!ids.containsKey(id)) {\n+        ids.put(id, 1);\n+        return id;\n+      } else {\n+        int cur = ids.get(id);\n+        ids.put(id, cur + 1);\n+        return String.format(\"%s_%d\", id, cur);\n+      }\n+    }\n+  }\n+\n+  private String fullyQualify(String name) {\n+    if (baseName != null) {\n+      return String.format(\"%s/%s\", baseName, name);\n+    } else {\n+      return name;\n+    }\n+  }\n+\n+  // If baseName is non-null, it is a prefix applied to all names\n+  // created by this instance.\n+  private final String baseName;\n+\n+  // If baseOpName is non-null, it is used to derive the unique name\n+  // for operators rather than the provided default name.\n+  private final String baseOpName;\n+\n+  // NameScope generates unique names by appending a numeric suffix if\n+  // needed. This is a map containing names already created by this\n+  // instance mapped to the next available numeric suffix for it.\n+  private final Map<String, Integer> ids;\n+\n+  private static void checkPattern(Pattern pattern, String name) {\n+    if (name == null) {\n+      throw new IllegalArgumentException(\"Names cannot be null\");\n+    }\n+    if (!pattern.matcher(name).matches()) {\n+      throw new IllegalArgumentException(String.format(\"Invalid name '%s'\", name));\n+    }\n+  }\n+\n+  private static final Pattern OP_NAME_REGEX = Pattern.compile(\"[A-Za-z0-9.][A-Za-z0-9_.\\\\-]*\");", "path": "tensorflow/java/src/main/java/org/tensorflow/NameScope.java", "position": null, "original_position": 148, "commit_id": "f049c08e7876b0638293c38d9f0aa6af8774a325", "original_commit_id": "1dc0d3a71f4bc0969711bdb4ece8f59860de58b6", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Maybe add some comments explaining why these patterns were chosen (where these restrictions come from)", "created_at": "2017-06-06T04:40:54Z", "updated_at": "2017-06-09T00:05:47Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120264096", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120264096"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120264096"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255"}}, "body_html": "<p>Maybe add some comments explaining why these patterns were chosen (where these restrictions come from)</p>", "body_text": "Maybe add some comments explaining why these patterns were chosen (where these restrictions come from)"}