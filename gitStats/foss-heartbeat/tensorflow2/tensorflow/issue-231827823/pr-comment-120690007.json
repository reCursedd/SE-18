{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120690007", "pull_request_review_id": 42670693, "id": 120690007, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDY5MDAwNw==", "diff_hunk": "@@ -0,0 +1,158 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow.op;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A class to manage scoped (hierarchical) names for operators.\n+ *\n+ * <p>{@code NameScope} manages hierarchical names where each component in the hierarchy is\n+ * separated by a forward slash {@code '/'}. For instance, {@code nn/Const_72} or {@code\n+ * nn/gradient/assign/init}. Each scope is a subtree in this hierarchy.\n+ *\n+ * <p>Use {@code NameScope} to group related operations within a hierarchy, which for example lets\n+ * tensorboard coalesce nodes for better graph visualizations.\n+ *\n+ * <p>This class is package private, user code creates {@link Scope} which internally delegates\n+ * calls to an underlying {@code NameScope}.\n+ *\n+ * <p>This class is thread-safe.", "path": "tensorflow/java/src/main/java/org/tensorflow/op/NameScope.java", "position": null, "original_position": 35, "commit_id": "f049c08e7876b0638293c38d9f0aa6af8774a325", "original_commit_id": "71261abe4de966f013644337c3f23b364303dc40", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Does it need to be? Do we want to encourage graph construction in multiple threads?\r\nI'm tempted to suggest that we:\r\n\r\n- Change this to `<p>Objects of this class are NOT thread-save`\r\n- Remove the use of `synchronized` in the implementation\r\n\r\nIt will be easier to make this thread-safe in the future if needed, but harder to remove the locks if they are a performance bottleneck. Or perhaps I'm overthinking this - it's just a single lock :) Thoughts?", "created_at": "2017-06-07T17:18:51Z", "updated_at": "2017-06-09T00:05:47Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120690007", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120690007"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120690007"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255"}}, "body_html": "<p>Does it need to be? Do we want to encourage graph construction in multiple threads?<br>\nI'm tempted to suggest that we:</p>\n<ul>\n<li>Change this to <code>&lt;p&gt;Objects of this class are NOT thread-save</code></li>\n<li>Remove the use of <code>synchronized</code> in the implementation</li>\n</ul>\n<p>It will be easier to make this thread-safe in the future if needed, but harder to remove the locks if they are a performance bottleneck. Or perhaps I'm overthinking this - it's just a single lock :) Thoughts?</p>", "body_text": "Does it need to be? Do we want to encourage graph construction in multiple threads?\nI'm tempted to suggest that we:\n\nChange this to <p>Objects of this class are NOT thread-save\nRemove the use of synchronized in the implementation\n\nIt will be easier to make this thread-safe in the future if needed, but harder to remove the locks if they are a performance bottleneck. Or perhaps I'm overthinking this - it's just a single lock :) Thoughts?"}