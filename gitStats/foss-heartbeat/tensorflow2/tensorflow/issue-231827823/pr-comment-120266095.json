{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120266095", "pull_request_review_id": 42208553, "id": 120266095, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDI2NjA5NQ==", "diff_hunk": "@@ -0,0 +1,184 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@link org.tensorflow.Scope}. */\n+@RunWith(JUnit4.class)\n+public class ScopeTest {\n+\n+  @Test\n+  public void basic() {\n+    try (Graph g = new Graph()) {\n+      Scope s = Scope.create(g);\n+      Const c1 = Const.create(s, 42);\n+      assertEquals(\"Const\", c1.input().op().name());\n+      Const c2 = Const.create(s, 7);\n+      assertEquals(\"Const_1\", c2.input().op().name());\n+      Const c3 = Const.create(s.withOpName(\"four\"), 4);\n+      assertEquals(\"four\", c3.input().op().name());", "path": "tensorflow/java/src/test/java/org/tensorflow/ScopeTest.java", "position": null, "original_position": 38, "commit_id": "f049c08e7876b0638293c38d9f0aa6af8774a325", "original_commit_id": "1dc0d3a71f4bc0969711bdb4ece8f59860de58b6", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Perhaps also add, for documentation purposes, test for the following scenario (a second constant with the same name):\r\n\r\n```java\r\nConst c4 = Const.create(s.withOpName(\"four\"), 4);\r\n```", "created_at": "2017-06-06T05:09:27Z", "updated_at": "2017-06-09T00:05:47Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120266095", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120266095"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120266095"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255"}}, "body_html": "<p>Perhaps also add, for documentation purposes, test for the following scenario (a second constant with the same name):</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-smi\">Const</span> c4 <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Const</span><span class=\"pl-k\">.</span>create(s<span class=\"pl-k\">.</span>withOpName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>four<span class=\"pl-pds\">\"</span></span>), <span class=\"pl-c1\">4</span>);</pre></div>", "body_text": "Perhaps also add, for documentation purposes, test for the following scenario (a second constant with the same name):\nConst c4 = Const.create(s.withOpName(\"four\"), 4);"}