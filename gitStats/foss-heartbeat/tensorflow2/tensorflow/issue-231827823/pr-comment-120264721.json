{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120264721", "pull_request_review_id": 42208553, "id": 120264721, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDI2NDcyMQ==", "diff_hunk": "@@ -0,0 +1,198 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow;\n+\n+/**\n+ * A {@code Scope} represents a set of related properties when creating Tensorflow Operations, such\n+ * as a common name prefix.\n+ *\n+ * <p>A {@code Scope} is a container for common properties applied to TensorFlow Ops. Normal user\n+ * code initializes a {@code Scope} and provides it to Operation building classes. For example:\n+ *\n+ * <pre>{@code\n+ * Scope scope = Scope.create(graph);\n+ * Constant c = Constant.create(scope, 42);\n+ * }</pre>\n+ *\n+ * <p>An Operation building class acquires a Scope, and uses it to set properties on the underlying\n+ * Tensorflow ops. For example:\n+ *\n+ * <pre>{@code\n+ * // An operator class that adds a constant.\n+ * public class Constant {\n+ *   public static Constant create(Scope scope, ...) {\n+ *      scope.graph().opBuilder(\n+ *        \"Constant\", scope.makeOpName(\"Constant\"))\n+ *        .setAttr(...)\n+ *        .build()\n+ *      ...\n+ *   }\n+ * }\n+ * }</pre>\n+ *\n+ * <p><b>Scope hierarchy:</b>\n+ *\n+ * <p>A {@code Scope} provides various {@code with()} methods that create a new scope. The new scope\n+ * typically has one property changed while other properties are inherited from the parent scope.\n+ *\n+ * <p>An example using {@code Constant} implemented as before:\n+ *\n+ * <pre>{@code\n+ * Scope root = Scope.create(graph);\n+ *\n+ * // The linear subscope will generate names like linear/...\n+ * Scope linear = Scope.withSubScope(\"linear\");\n+ *\n+ * // This op name will be \"linear/W\"\n+ * Constant.create(linear.withOpName(\"W\"), ...);\n+ *\n+ * // This op will be \"linear/Constant\", using the default\n+ * // name provided by Constant\n+ * Constant.create(linear, ...);\n+ *\n+ * // This op will be \"linear/Constant_1\", using the default\n+ * // name provided by Constant and making it unique within\n+ * // this scope\n+ * Constant.create(linear, ...);\n+ * }</pre>\n+ *\n+ * <p>Scope objects are thread-safe.\n+ */\n+public final class Scope {\n+  /**\n+   * Create a new top-level scope.\n+   *\n+   * @param graph The graph instance to be managed by the scope.\n+   * @return a top-level Scope.\n+   */\n+  public static Scope create(Graph graph) {", "path": "tensorflow/java/src/main/java/org/tensorflow/Scope.java", "position": null, "original_position": 81, "commit_id": "f049c08e7876b0638293c38d9f0aa6af8774a325", "original_commit_id": "1dc0d3a71f4bc0969711bdb4ece8f59860de58b6", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Do you foresee a reason to have a static factory function instead of a public constructor?\r\nSeems like the latter will suffice?", "created_at": "2017-06-06T04:50:57Z", "updated_at": "2017-06-09T00:05:47Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120264721", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120264721"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120264721"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255"}}, "body_html": "<p>Do you foresee a reason to have a static factory function instead of a public constructor?<br>\nSeems like the latter will suffice?</p>", "body_text": "Do you foresee a reason to have a static factory function instead of a public constructor?\nSeems like the latter will suffice?"}