{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120716176", "pull_request_review_id": 42697793, "id": 120716176, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDcxNjE3Ng==", "diff_hunk": "@@ -0,0 +1,265 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow.op;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.tensorflow.Graph;\n+import org.tensorflow.Output;\n+import org.tensorflow.Session;\n+import org.tensorflow.Tensor;\n+\n+/** Unit tests for {@link org.tensorflow.Scope}. */\n+@RunWith(JUnit4.class)\n+public class ScopeTest {\n+\n+  @Test\n+  public void basicNames() {\n+    try (Graph g = new Graph()) {\n+      Scope root = new Scope(g);\n+      assertEquals(\"add\", root.makeOpName(\"add\"));\n+      assertEquals(\"add_1\", root.makeOpName(\"add\"));\n+      assertEquals(\"add_2\", root.makeOpName(\"add\"));\n+      assertEquals(\"mul\", root.makeOpName(\"mul\"));\n+    }\n+  }\n+\n+  @Test\n+  public void hierarchicalNames() {\n+    try (Graph g = new Graph()) {\n+      Scope root = new Scope(g);\n+      Scope child = root.withSubScope(\"child\");\n+      assertEquals(\"child/add\", child.makeOpName(\"add\"));\n+      assertEquals(\"child/add_1\", child.makeOpName(\"add\"));\n+      assertEquals(\"child/mul\", child.makeOpName(\"mul\"));\n+\n+      Scope child_1 = root.withSubScope(\"child\");\n+      assertEquals(\"child_1/add\", child_1.makeOpName(\"add\"));\n+      assertEquals(\"child_1/add_1\", child_1.makeOpName(\"add\"));\n+      assertEquals(\"child_1/mul\", child_1.makeOpName(\"mul\"));\n+\n+      Scope c_c = root.withSubScope(\"c\").withSubScope(\"c\");\n+      assertEquals(\"c/c/add\", c_c.makeOpName(\"add\"));\n+\n+      Scope c_1 = root.withSubScope(\"c\");\n+      Scope c_1_c = c_1.withSubScope(\"c\");\n+      assertEquals(\"c_1/c/add\", c_1_c.makeOpName(\"add\"));\n+\n+      Scope c_1_c_1 = c_1.withSubScope(\"c\");\n+      assertEquals(\"c_1/c_1/add\", c_1_c_1.makeOpName(\"add\"));\n+    }\n+  }\n+\n+  @Test\n+  public void scopeAndOpNames() {\n+    try (Graph g = new Graph()) {\n+      Scope root = new Scope(g);\n+\n+      Scope child = root.withSubScope(\"child\");\n+\n+      assertEquals(\"child/add\", child.makeOpName(\"add\"));\n+      assertEquals(\"child_1\", root.makeOpName(\"child\"));\n+      assertEquals(\"child_2/p\", root.withSubScope(\"child\").makeOpName(\"p\"));\n+    }\n+  }\n+\n+  @Test\n+  public void validateNames() {\n+    try (Graph g = new Graph()) {\n+      Scope root = new Scope(g);\n+\n+      final String[] invalid_names = {\n+        \"_\", // Names are constrained to start with [A-Za-z0-9.]\n+        null, \"\", \"a$\", // Invalid characters\n+        \"a/b\", // slashes not allowed\n+      };\n+\n+      for (String name : invalid_names) {\n+        try {\n+          root.withName(name);\n+          fail(\"failed to catch invalid op name.\");\n+        } catch (IllegalArgumentException ex) {\n+          // expected\n+        }\n+        // Root scopes follow the same rules as opnames\n+        try {\n+          root.withSubScope(name);\n+          fail(\"failed to catch invalid scope name: \" + name);\n+        } catch (IllegalArgumentException ex) {\n+          // expected\n+        }\n+      }\n+\n+      // Non-root scopes have a less restrictive constraint.\n+      assertEquals(\"a/_/hello\", root.withSubScope(\"a\").withSubScope(\"_\").makeOpName(\"hello\"));\n+    }\n+  }\n+\n+  @Test\n+  public void basic() {\n+    try (Graph g = new Graph()) {\n+      Scope s = new Scope(g);\n+      Const c1 = Const.create(s, 42);\n+      assertEquals(\"Const\", c1.output().op().name());\n+      Const c2 = Const.create(s, 7);\n+      assertEquals(\"Const_1\", c2.output().op().name());\n+      Const c3 = Const.create(s.withName(\"four\"), 4);\n+      assertEquals(\"four\", c3.output().op().name());\n+      Const c4 = Const.create(s.withName(\"four\"), 4);\n+      assertEquals(\"four_1\", c4.output().op().name());\n+    }\n+  }\n+\n+  @Test\n+  public void hierarchy() {\n+    try (Graph g = new Graph()) {\n+      Scope root = new Scope(g);\n+      Scope child = root.withSubScope(\"child\");\n+      assertEquals(\"child/Const\", Const.create(child, 42).output().op().name());\n+      assertEquals(\"child/four\", Const.create(child.withName(\"four\"), 4).output().op().name());\n+    }\n+  }\n+\n+  @Test\n+  public void composite() {\n+    try (Graph g = new Graph();\n+        Session sess = new Session(g)) {\n+      Scope s = new Scope(g);\n+      Output data = Const.create(s.withName(\"data\"), new int[] {600, 470, 170, 430, 300}).output();\n+\n+      // Create a composite op with a customized name\n+      Variance var1 = Variance.create(s.withName(\"example\"), data);\n+      assertEquals(\"example/variance\", var1.output().op().name());\n+\n+      // Confirm internally added ops have the right names.\n+      assertNotNull(g.operation(\"example/squared_deviation\"));\n+      assertNotNull(g.operation(\"example/Mean\"));\n+      assertNotNull(g.operation(\"example/zero\"));\n+\n+      // Same composite op with a default name\n+      Variance var2 = Variance.create(s, data);\n+      assertEquals(\"variance/variance\", var2.output().op().name());\n+\n+      // Confirm internally added ops have the right names.\n+      assertNotNull(g.operation(\"variance/squared_deviation\"));\n+      assertNotNull(g.operation(\"variance/Mean\"));\n+      assertNotNull(g.operation(\"variance/zero\"));\n+\n+      // Verify correct results as well.\n+      Tensor result = sess.runner().fetch(var1.output()).run().get(0);\n+      assertEquals(21704, result.intValue());\n+      result = sess.runner().fetch(var2.output()).run().get(0);\n+      assertEquals(21704, result.intValue());\n+    }\n+  }\n+\n+  // \"handwritten\" sample operator classes\n+  private static final class Const {\n+    private final Output output;\n+\n+    private static Const create(Scope s, Object v) {\n+      try (Tensor value = Tensor.create(v)) {\n+        return new Const(\n+            s.graph()\n+                .opBuilder(\"Const\", s.makeOpName(\"Const\"))\n+                .setAttr(\"dtype\", value.dataType())\n+                .setAttr(\"value\", value)\n+                .build()\n+                .output(0));\n+      }\n+    }\n+\n+    private Const(Output o) {\n+      output = o;\n+    }\n+\n+    public Output output() {", "path": "tensorflow/java/src/test/java/org/tensorflow/op/ScopeTest.java", "position": null, "original_position": 194, "commit_id": "f049c08e7876b0638293c38d9f0aa6af8774a325", "original_commit_id": "71261abe4de966f013644337c3f23b364303dc40", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Should we remove these `private` and `public` method qualifiers from the sample ops? (They are only needed for the tests and since they are inner classes, the test code is able to call them anyway (e.g., `Const.create` is private, but still callable - so the distinction between `private` and `public` here is immaterial anyway?)\r\n\r\nAlternatively, make the `create` factory function `public` to be closer to where we want to head anyway?", "created_at": "2017-06-07T18:59:42Z", "updated_at": "2017-06-09T00:05:47Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120716176", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120716176"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10255#discussion_r120716176"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10255"}}, "body_html": "<p>Should we remove these <code>private</code> and <code>public</code> method qualifiers from the sample ops? (They are only needed for the tests and since they are inner classes, the test code is able to call them anyway (e.g., <code>Const.create</code> is private, but still callable - so the distinction between <code>private</code> and <code>public</code> here is immaterial anyway?)</p>\n<p>Alternatively, make the <code>create</code> factory function <code>public</code> to be closer to where we want to head anyway?</p>", "body_text": "Should we remove these private and public method qualifiers from the sample ops? (They are only needed for the tests and since they are inner classes, the test code is able to call them anyway (e.g., Const.create is private, but still callable - so the distinction between private and public here is immaterial anyway?)\nAlternatively, make the create factory function public to be closer to where we want to head anyway?"}