{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/271527465", "html_url": "https://github.com/tensorflow/tensorflow/issues/6743#issuecomment-271527465", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6743", "id": 271527465, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTUyNzQ2NQ==", "user": {"login": "bodokaiser", "id": 1780466, "node_id": "MDQ6VXNlcjE3ODA0NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1780466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bodokaiser", "html_url": "https://github.com/bodokaiser", "followers_url": "https://api.github.com/users/bodokaiser/followers", "following_url": "https://api.github.com/users/bodokaiser/following{/other_user}", "gists_url": "https://api.github.com/users/bodokaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/bodokaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bodokaiser/subscriptions", "organizations_url": "https://api.github.com/users/bodokaiser/orgs", "repos_url": "https://api.github.com/users/bodokaiser/repos", "events_url": "https://api.github.com/users/bodokaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/bodokaiser/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-10T09:30:40Z", "updated_at": "2017-01-10T09:35:07Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=11994658\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/VigneshSrinivasan10\">@VigneshSrinivasan10</a> I found it hard to work with <code>tf.extract_image_patches</code> as it does a lot in the background. If your patches are just non-overlapping blocks then I found it easier to use <code>tf.reshape</code> and <code>tf.transpose</code>:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">image_to_patches</span>(<span class=\"pl-smi\">image</span>, <span class=\"pl-smi\">image_height</span>, <span class=\"pl-smi\">image_width</span>, <span class=\"pl-smi\">patch_height</span>, <span class=\"pl-smi\">patch_width</span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> resize image so that it's dimensions are dividable by patch_height and patch_width</span>\n    height <span class=\"pl-k\">=</span> math.ceil(image_height<span class=\"pl-k\">/</span>patch_height)<span class=\"pl-k\">*</span>patch_height\n    width <span class=\"pl-k\">=</span> math.ceil(image_width<span class=\"pl-k\">/</span>patch_width)<span class=\"pl-k\">*</span>patch_width\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> shape: (height, width)</span>\n    image_resized <span class=\"pl-k\">=</span> tf.squeeze(tf.image.resize_image_with_crop_or_pad(image, height, width))\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> reshapes to: (height // patch_height, patch_height, width // patch_width, patch_height, patch_width)</span>\n    image_reshaped <span class=\"pl-k\">=</span> tf.reshape(image_resized, [height <span class=\"pl-k\">//</span> patch_height, patch_height, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, patch_width])\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> swaps axis to shape: (height // patch_height, patch_height, width // patch_width, patch_height, patch_width)</span>\n    image_transposed <span class=\"pl-k\">=</span> tf.transpose(image_reshaped, [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>])\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> reshapes to ((height // patch_height)*(width // patch_width), patch_height, patch_width, 1)</span>\n    <span class=\"pl-k\">return</span> tf.reshape(image_transposed, [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, patch_height, patch_width, <span class=\"pl-c1\">1</span>]</pre></div>\n<p>See <a href=\"http://stackoverflow.com/questions/41564321/split-image-tensor-into-small-patches\" rel=\"nofollow\">stackoverflow</a> for more.</p>", "body_text": "@VigneshSrinivasan10 I found it hard to work with tf.extract_image_patches as it does a lot in the background. If your patches are just non-overlapping blocks then I found it easier to use tf.reshape and tf.transpose:\ndef image_to_patches(image, image_height, image_width, patch_height, patch_width):\n    # resize image so that it's dimensions are dividable by patch_height and patch_width\n    height = math.ceil(image_height/patch_height)*patch_height\n    width = math.ceil(image_width/patch_width)*patch_width\n\n    # shape: (height, width)\n    image_resized = tf.squeeze(tf.image.resize_image_with_crop_or_pad(image, height, width))\n    # reshapes to: (height // patch_height, patch_height, width // patch_width, patch_height, patch_width)\n    image_reshaped = tf.reshape(image_resized, [height // patch_height, patch_height, -1, patch_width])\n    # swaps axis to shape: (height // patch_height, patch_height, width // patch_width, patch_height, patch_width)\n    image_transposed = tf.transpose(image_reshaped, [0, 2, 1, 3])\n    # reshapes to ((height // patch_height)*(width // patch_width), patch_height, patch_width, 1)\n    return tf.reshape(image_transposed, [-1, patch_height, patch_width, 1]\nSee stackoverflow for more.", "body": "@VigneshSrinivasan10 I found it hard to work with `tf.extract_image_patches` as it does a lot in the background. If your patches are just non-overlapping blocks then I found it easier to use `tf.reshape` and `tf.transpose`:\r\n\r\n```python\r\ndef image_to_patches(image, image_height, image_width, patch_height, patch_width):\r\n    # resize image so that it's dimensions are dividable by patch_height and patch_width\r\n    height = math.ceil(image_height/patch_height)*patch_height\r\n    width = math.ceil(image_width/patch_width)*patch_width\r\n\r\n    # shape: (height, width)\r\n    image_resized = tf.squeeze(tf.image.resize_image_with_crop_or_pad(image, height, width))\r\n    # reshapes to: (height // patch_height, patch_height, width // patch_width, patch_height, patch_width)\r\n    image_reshaped = tf.reshape(image_resized, [height // patch_height, patch_height, -1, patch_width])\r\n    # swaps axis to shape: (height // patch_height, patch_height, width // patch_width, patch_height, patch_width)\r\n    image_transposed = tf.transpose(image_reshaped, [0, 2, 1, 3])\r\n    # reshapes to ((height // patch_height)*(width // patch_width), patch_height, patch_width, 1)\r\n    return tf.reshape(image_transposed, [-1, patch_height, patch_width, 1]\r\n```\r\nSee [stackoverflow](http://stackoverflow.com/questions/41564321/split-image-tensor-into-small-patches) for more."}