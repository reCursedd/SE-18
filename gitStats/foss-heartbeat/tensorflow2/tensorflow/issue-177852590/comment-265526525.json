{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/265526525", "html_url": "https://github.com/tensorflow/tensorflow/issues/4468#issuecomment-265526525", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4468", "id": 265526525, "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTUyNjUyNQ==", "user": {"login": "groakat", "id": 3419702, "node_id": "MDQ6VXNlcjM0MTk3MDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3419702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/groakat", "html_url": "https://github.com/groakat", "followers_url": "https://api.github.com/users/groakat/followers", "following_url": "https://api.github.com/users/groakat/following{/other_user}", "gists_url": "https://api.github.com/users/groakat/gists{/gist_id}", "starred_url": "https://api.github.com/users/groakat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/groakat/subscriptions", "organizations_url": "https://api.github.com/users/groakat/orgs", "repos_url": "https://api.github.com/users/groakat/repos", "events_url": "https://api.github.com/users/groakat/events{/privacy}", "received_events_url": "https://api.github.com/users/groakat/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-07T18:15:32Z", "updated_at": "2016-12-07T18:15:32Z", "author_association": "NONE", "body_html": "<p>sorry I got it. I suppose you meant the solution is to reimplement <code>crop_image_to_bounding_box</code> which uses the slice operator:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">_is_tensor</span>(<span class=\"pl-smi\">x</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Returns `True` if `x` is a symbolic tensor-like object.</span>\n<span class=\"pl-s\">    Args:</span>\n<span class=\"pl-s\">      x: A python object to check.</span>\n<span class=\"pl-s\">    Returns:</span>\n<span class=\"pl-s\">      `True` if `x` is a `tf.Tensor` or `tf.Variable`, otherwise `False`.</span>\n<span class=\"pl-s\">    <span class=\"pl-pds\">\"\"\"</span></span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">isinstance</span>(x, (tf.Tensor, tf.Variable))\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">crop_to_bounding_box</span>(<span class=\"pl-smi\">image</span>, <span class=\"pl-smi\">offset_height</span>, <span class=\"pl-smi\">offset_width</span>, <span class=\"pl-smi\">target_height</span>,\n                         <span class=\"pl-smi\">target_width</span>):\n    _, height, width, depth <span class=\"pl-k\">=</span> image.get_shape().as_list()\n\n    cropped <span class=\"pl-k\">=</span> tf.slice(image,\n                       tf.pack([<span class=\"pl-c1\">0</span>, offset_height, offset_width, <span class=\"pl-c1\">0</span>]),\n                       tf.pack([<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, target_height, target_width, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>]))\n\n    cropped_shape <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">None</span> <span class=\"pl-k\">if</span> _is_tensor(i) <span class=\"pl-k\">else</span> i\n                     <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">None</span>, target_height, target_width, depth]]\n    cropped.set_shape(cropped_shape)\n\n    <span class=\"pl-k\">return</span> cropped</pre></div>", "body_text": "sorry I got it. I suppose you meant the solution is to reimplement crop_image_to_bounding_box which uses the slice operator:\ndef _is_tensor(x):\n    \"\"\"Returns `True` if `x` is a symbolic tensor-like object.\n    Args:\n      x: A python object to check.\n    Returns:\n      `True` if `x` is a `tf.Tensor` or `tf.Variable`, otherwise `False`.\n    \"\"\"\n    return isinstance(x, (tf.Tensor, tf.Variable))\n\n\ndef crop_to_bounding_box(image, offset_height, offset_width, target_height,\n                         target_width):\n    _, height, width, depth = image.get_shape().as_list()\n\n    cropped = tf.slice(image,\n                       tf.pack([0, offset_height, offset_width, 0]),\n                       tf.pack([-1, target_height, target_width, -1]))\n\n    cropped_shape = [None if _is_tensor(i) else i\n                     for i in [None, target_height, target_width, depth]]\n    cropped.set_shape(cropped_shape)\n\n    return cropped", "body": "sorry I got it. I suppose you meant the solution is to reimplement `crop_image_to_bounding_box` which uses the slice operator:\r\n\r\n```python\r\ndef _is_tensor(x):\r\n    \"\"\"Returns `True` if `x` is a symbolic tensor-like object.\r\n    Args:\r\n      x: A python object to check.\r\n    Returns:\r\n      `True` if `x` is a `tf.Tensor` or `tf.Variable`, otherwise `False`.\r\n    \"\"\"\r\n    return isinstance(x, (tf.Tensor, tf.Variable))\r\n\r\n\r\ndef crop_to_bounding_box(image, offset_height, offset_width, target_height,\r\n                         target_width):\r\n    _, height, width, depth = image.get_shape().as_list()\r\n\r\n    cropped = tf.slice(image,\r\n                       tf.pack([0, offset_height, offset_width, 0]),\r\n                       tf.pack([-1, target_height, target_width, -1]))\r\n\r\n    cropped_shape = [None if _is_tensor(i) else i\r\n                     for i in [None, target_height, target_width, depth]]\r\n    cropped.set_shape(cropped_shape)\r\n\r\n    return cropped\r\n```"}