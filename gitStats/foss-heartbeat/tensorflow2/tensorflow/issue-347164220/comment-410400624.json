{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/410400624", "html_url": "https://github.com/tensorflow/tensorflow/issues/21347#issuecomment-410400624", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21347", "id": 410400624, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMDQwMDYyNA==", "user": {"login": "jessiejc23", "id": 15609433, "node_id": "MDQ6VXNlcjE1NjA5NDMz", "avatar_url": "https://avatars0.githubusercontent.com/u/15609433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jessiejc23", "html_url": "https://github.com/jessiejc23", "followers_url": "https://api.github.com/users/jessiejc23/followers", "following_url": "https://api.github.com/users/jessiejc23/following{/other_user}", "gists_url": "https://api.github.com/users/jessiejc23/gists{/gist_id}", "starred_url": "https://api.github.com/users/jessiejc23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jessiejc23/subscriptions", "organizations_url": "https://api.github.com/users/jessiejc23/orgs", "repos_url": "https://api.github.com/users/jessiejc23/repos", "events_url": "https://api.github.com/users/jessiejc23/events{/privacy}", "received_events_url": "https://api.github.com/users/jessiejc23/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-03T23:27:02Z", "updated_at": "2018-08-03T23:27:02Z", "author_association": "NONE", "body_html": "<p>Hi Natalia, thanks for your reply. This is my code snippet.</p>\n<pre><code>feature_columns = build_model_columns()\n#the build_model_columns() function returns the feature_columns from the previous code snippet.\nrun_config = tf.estimator.RunConfig(tf_random_seed=42, save_checkpoints_steps=5000)\n \nif model_type == 'boosted_trees':\n        nn = tf.estimator.BoostedTreesRegressor(\n            model_dir=FLAGS.model_dir,\n            feature_columns = feature_columns,\n            n_batches_per_layer = 1000,\n            learning_rate = 0.1,\n            n_trees = 100,\n            max_depth = 6,\n            config=run_config)\n\ntrain_spec=tf.estimator.TrainSpec(input_fn=lambda: input_fn(FLAGS.train_data, FLAGS.train_epochs, True, FLAGS.batch_size))\neval_spec=tf.estimator.EvalSpec(input_fn=lambda: input_fn(FLAGS.test_data, 1, True, FLAGS.batch_size),steps=1000)\ntf.estimator.train_and_evaluate(nn, train_spec, eval_spec)\n</code></pre>\n<p>I think I passed the feature columns correctly..?</p>", "body_text": "Hi Natalia, thanks for your reply. This is my code snippet.\nfeature_columns = build_model_columns()\n#the build_model_columns() function returns the feature_columns from the previous code snippet.\nrun_config = tf.estimator.RunConfig(tf_random_seed=42, save_checkpoints_steps=5000)\n \nif model_type == 'boosted_trees':\n        nn = tf.estimator.BoostedTreesRegressor(\n            model_dir=FLAGS.model_dir,\n            feature_columns = feature_columns,\n            n_batches_per_layer = 1000,\n            learning_rate = 0.1,\n            n_trees = 100,\n            max_depth = 6,\n            config=run_config)\n\ntrain_spec=tf.estimator.TrainSpec(input_fn=lambda: input_fn(FLAGS.train_data, FLAGS.train_epochs, True, FLAGS.batch_size))\neval_spec=tf.estimator.EvalSpec(input_fn=lambda: input_fn(FLAGS.test_data, 1, True, FLAGS.batch_size),steps=1000)\ntf.estimator.train_and_evaluate(nn, train_spec, eval_spec)\n\nI think I passed the feature columns correctly..?", "body": "Hi Natalia, thanks for your reply. This is my code snippet.\r\n\r\n```\r\nfeature_columns = build_model_columns()\r\n#the build_model_columns() function returns the feature_columns from the previous code snippet.\r\nrun_config = tf.estimator.RunConfig(tf_random_seed=42, save_checkpoints_steps=5000)\r\n \r\nif model_type == 'boosted_trees':\r\n        nn = tf.estimator.BoostedTreesRegressor(\r\n            model_dir=FLAGS.model_dir,\r\n            feature_columns = feature_columns,\r\n            n_batches_per_layer = 1000,\r\n            learning_rate = 0.1,\r\n            n_trees = 100,\r\n            max_depth = 6,\r\n            config=run_config)\r\n\r\ntrain_spec=tf.estimator.TrainSpec(input_fn=lambda: input_fn(FLAGS.train_data, FLAGS.train_epochs, True, FLAGS.batch_size))\r\neval_spec=tf.estimator.EvalSpec(input_fn=lambda: input_fn(FLAGS.test_data, 1, True, FLAGS.batch_size),steps=1000)\r\ntf.estimator.train_and_evaluate(nn, train_spec, eval_spec)\r\n```\r\n\r\nI think I passed the feature columns correctly..?"}