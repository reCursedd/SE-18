{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/132792968", "pull_request_review_id": 55917630, "id": 132792968, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMjc5Mjk2OA==", "diff_hunk": "@@ -19,11 +19,39 @@\n from __future__ import division\n from __future__ import print_function\n \n+import hashlib\n import numpy as np\n \n from tensorflow.python.framework import tensor_shape\n \n \n+class RandomStrategy(object):\n+  \"\"\"Returns a random PS task for op placement.\n+\n+  This may perform better than the default round-robin placement if you\n+  have a large number of variables. Depending on your architecture and\n+  number of parameter servers, round-robin can lead to situations where\n+  all of one type of variable is placed on a single PS task, which may\n+  lead to contention issues.\n+\n+  This strategy uses a hash function on the name of each op for deterministic\n+  placement.\n+  \"\"\"\n+\n+  def __init__(self, num_ps_tasks, seed=0):\n+    \"\"\"Creates a new `RandomStrategy`.\"\"\"\n+    self._num_tasks = num_ps_tasks\n+    self._seed = seed\n+\n+  def __call__(self, op):\n+    \"\"\"Chooses a ps task index for the given `Operation`.\"\"\"\n+    key = \"%s_%d\" % (op.name, self._seed)\n+    # Use MD5 instead of Python's built-in hash() to get consistent outputs\n+    # between runs.\n+    n = int(hashlib.md5(key).hexdigest(), 16)", "path": "tensorflow/contrib/training/python/training/device_setter.py", "position": null, "original_position": 33, "commit_id": "dade4eb07b8ff3b2b11244729f662be325adb204", "original_commit_id": "102bff933e335de41742b71974a0dbc168a8b63c", "user": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "body": "Done. Thanks @rmlarsen ", "created_at": "2017-08-11T22:11:30Z", "updated_at": "2017-08-11T23:43:40Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12223#discussion_r132792968", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12223", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/132792968"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12223#discussion_r132792968"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12223"}}, "body_html": "<p>Done. Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16907534\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rmlarsen\">@rmlarsen</a></p>", "body_text": "Done. Thanks @rmlarsen", "in_reply_to_id": 132788928}