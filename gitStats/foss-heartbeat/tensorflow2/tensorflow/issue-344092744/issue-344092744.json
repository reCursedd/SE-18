{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21093", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21093/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21093/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21093/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21093", "id": 344092744, "node_id": "MDU6SXNzdWUzNDQwOTI3NDQ=", "number": 21093, "title": "tf.metrics.*_at_thresholds inconsistent with other metrics which return a single value", "user": {"login": "splendor-kill", "id": 1829861, "node_id": "MDQ6VXNlcjE4Mjk4NjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1829861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/splendor-kill", "html_url": "https://github.com/splendor-kill", "followers_url": "https://api.github.com/users/splendor-kill/followers", "following_url": "https://api.github.com/users/splendor-kill/following{/other_user}", "gists_url": "https://api.github.com/users/splendor-kill/gists{/gist_id}", "starred_url": "https://api.github.com/users/splendor-kill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/splendor-kill/subscriptions", "organizations_url": "https://api.github.com/users/splendor-kill/orgs", "repos_url": "https://api.github.com/users/splendor-kill/repos", "events_url": "https://api.github.com/users/splendor-kill/events{/privacy}", "received_events_url": "https://api.github.com/users/splendor-kill/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-07-24T15:36:48Z", "updated_at": "2018-09-22T12:42:28Z", "closed_at": "2018-09-22T12:35:23Z", "author_association": "NONE", "body_html": "<p>when I try to solve a binary classification problem with a custom tf.Estimator,<br>\nI made a model_fn refer to <a href=\"https://www.tensorflow.org/guide/custom_estimators\" rel=\"nofollow\">https://www.tensorflow.org/guide/custom_estimators</a>,<br>\nbut I want add 2 eval metrics like this:<br>\n...<br>\ntn = tf.metrics.true_positives(labels, predictions=predicted_classes)<br>\ntp_5 = tf.metrics.true_positives_at_thresholds(labels, predicted_classes, [0.2, 0.4, 0.6, 0.8, 1.0])<br>\nmetrics = {'tn': tn, 'tp_5': tp_5}<br>\nif mode == tf.estimator.ModeKeys.EVAL:<br>\nreturn tf.estimator.EstimatorSpec(mode, loss=loss, eval_metric_ops=metrics)<br>\n...</p>\n<p>It will report TypeError: eval_metric_ops[tp_5] must be Operation or Tensor, given: &lt;tf.Variable 'true_positives/true_positives:0' shape=(5,) dtype=float32_ref&gt;</p>\n<p>a workaround<br>\nmetrics = {'tn': tn, 'tp_5': tuple([tf.convert_to_tensor(tp_5[0]), tp_5[1]])}<br>\nwill as expected.</p>\n<p>Is this API design intentional?</p>", "body_text": "when I try to solve a binary classification problem with a custom tf.Estimator,\nI made a model_fn refer to https://www.tensorflow.org/guide/custom_estimators,\nbut I want add 2 eval metrics like this:\n...\ntn = tf.metrics.true_positives(labels, predictions=predicted_classes)\ntp_5 = tf.metrics.true_positives_at_thresholds(labels, predicted_classes, [0.2, 0.4, 0.6, 0.8, 1.0])\nmetrics = {'tn': tn, 'tp_5': tp_5}\nif mode == tf.estimator.ModeKeys.EVAL:\nreturn tf.estimator.EstimatorSpec(mode, loss=loss, eval_metric_ops=metrics)\n...\nIt will report TypeError: eval_metric_ops[tp_5] must be Operation or Tensor, given: <tf.Variable 'true_positives/true_positives:0' shape=(5,) dtype=float32_ref>\na workaround\nmetrics = {'tn': tn, 'tp_5': tuple([tf.convert_to_tensor(tp_5[0]), tp_5[1]])}\nwill as expected.\nIs this API design intentional?", "body": "when I try to solve a binary classification problem with a custom tf.Estimator,\r\nI made a model_fn refer to https://www.tensorflow.org/guide/custom_estimators,\r\nbut I want add 2 eval metrics like this:\r\n...\r\ntn = tf.metrics.true_positives(labels, predictions=predicted_classes)\r\ntp_5 = tf.metrics.true_positives_at_thresholds(labels, predicted_classes, [0.2, 0.4, 0.6, 0.8, 1.0])\r\nmetrics = {'tn': tn, 'tp_5': tp_5}\r\nif mode == tf.estimator.ModeKeys.EVAL:\r\n  return tf.estimator.EstimatorSpec(mode, loss=loss, eval_metric_ops=metrics)\r\n...\r\n\r\nIt will report TypeError: eval_metric_ops[tp_5] must be Operation or Tensor, given: <tf.Variable 'true_positives/true_positives:0' shape=(5,) dtype=float32_ref>\r\n\r\na workaround \r\nmetrics = {'tn': tn, 'tp_5': tuple([tf.convert_to_tensor(tp_5[0]), tp_5[1]])}\r\nwill as expected.\r\n\r\nIs this API design intentional?"}