{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17273", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17273/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17273/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17273/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17273", "id": 300207196, "node_id": "MDU6SXNzdWUzMDAyMDcxOTY=", "number": 17273, "title": "Numerical error with tf.nn.conv2d, tf.nn.moments and tf.sqrt", "user": {"login": "victorcampos7", "id": 8987381, "node_id": "MDQ6VXNlcjg5ODczODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/8987381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/victorcampos7", "html_url": "https://github.com/victorcampos7", "followers_url": "https://api.github.com/users/victorcampos7/followers", "following_url": "https://api.github.com/users/victorcampos7/following{/other_user}", "gists_url": "https://api.github.com/users/victorcampos7/gists{/gist_id}", "starred_url": "https://api.github.com/users/victorcampos7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/victorcampos7/subscriptions", "organizations_url": "https://api.github.com/users/victorcampos7/orgs", "repos_url": "https://api.github.com/users/victorcampos7/repos", "events_url": "https://api.github.com/users/victorcampos7/events{/privacy}", "received_events_url": "https://api.github.com/users/victorcampos7/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 21, "created_at": "2018-02-26T11:46:47Z", "updated_at": "2018-09-30T13:08:41Z", "closed_at": "2018-09-30T12:41:21Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes (see code below)</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: SUSE Linux Enterprise Server 12.2 (x86_64)</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.5.0 (git v1.5.0-0-g37aa430d84) &amp; also present in 1.4.0</li>\n<li><strong>Python version</strong>: 3.6.4</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.10.1</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: GCC/7.2.0</li>\n<li><strong>CUDA/cuDNN version</strong>: None</li>\n<li><strong>GPU model and memory</strong>: None</li>\n<li><strong>Exact command to reproduce</strong>: See script below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>There is a numerical error with a very specific sequence of operations, that make tf.sqrt() return a tensor of zeros when applied on the output of tf.nn.moments (regardless of the value returned by tf.nn.moments). This error happens when the input of tf.nn.moments comes from tf.nn.conv2d, but not when removing the latter.</p>\n<p>This error happens when running on a cluster where TensorFlow has been installed from source with \"-m64 -march=native -mtune=native\". We tried upgrading from 1.4.0 to 1.5.0, but the error still occurs. The following flags were used during compilation:</p>\n<p>TF_NEED_JEMALLOC=\"1\"<br>\nTF_NEED_HDFS=\"1\"<br>\nTF_NEED_OPENCL=\"0\"<br>\nTF_NEED_CUDA=\"0\"<br>\nTF_ENABLE_XLA=\"0\"<br>\nTF_CUDA_CLANG=\"0\"<br>\nTF_NEED_GCP=\"0\"<br>\nTF_NEED_MKL=\"1\"<br>\nTF_NEED_VERBS=\"0\"<br>\nTF_NEED_MPI=\"1\"<br>\nTF_NEED_S3=\"0\"<br>\nTF_NEED_GDR=\"0\"<br>\nTF_NEED_OPENCL_SYCL=\"0\"<br>\nTF_MKL_ROOT=\"[DIR]/mkl-dnn/external/mklml_lnx_2018.0.1.20171007\"<br>\nexport MPI_HOME=\"[DIR]/2018.1.038/compilers_and_libraries_2018.1.163/linux/mpi/intel64\"</p>\n<p>Android build: No.</p>\n<p>Compiled using Intel MPI plus complete MKL (2018.1.038) loaded in the environment.</p>\n<p>We also tested this same code in two other machines, where it works properly. One of them is an older cluster, with TensorFlow compiled from source using the same configuration; the main difference is that the processors in this cluster do not support AVX512. The other machine is a laptop where TensorFlow was installed with pip.</p>\n<h3>Source code / logs</h3>\n<p>The smallest code to reproduce the error is the following:</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\n# TensorFlow version\nprint('TF version:', tf.__version__, tf.__git_version__, '\\n')\n\n# Create placeholders\no = tf.placeholder(tf.float32, [None, 84, 84, 4])\n\n# Create graph: conv(x, w) -&gt; (x-mean(x))/std(x)\nx = o\n\nw = tf.get_variable(\"w\", [3, 3, x.get_shape()[-1], 16])\nx = tf.nn.conv2d(x, w, [1, 1, 1, 1], padding=\"SAME\")  # remove this and the error disappears...\n\navg, variance = tf.nn.moments(x, np.arange(len(x.get_shape().as_list()) - 1), keep_dims=True)\nepsilon = 1e-3  # for numerical stability in sqrt\n\nvariance = tf.Print(variance, [avg], message='mean(x): ')\nvariance = tf.Print(variance, [variance], message='variance(x): ')\nvariance = tf.Print(variance, [tf.sqrt(variance + epsilon)], message='sqrt(variance(x)): ')\nvariance = tf.Print(variance, [tf.sqrt(avg**2 + epsilon)], message='sqrt(mean(x)^2): ')\n\nx = (x - avg) / (tf.sqrt(variance + epsilon))\n\n# Run\nsess = tf.InteractiveSession()\nsess.run(tf.global_variables_initializer())\nsess.run(x, feed_dict={o: np.random.rand(32, 84, 84, 4)})\n</code></pre>\n<p>And the output:</p>\n<p>mean(x): [[[[0.176351935 -0.11745432 -0.17503795]]]...]<br>\nvariance(x): [[[[0.0344150327 0.0378020629 0.0353332]]]...]<br>\nsqrt(variance(x)): [[[[0 0 0]]]...]<br>\nsqrt(mean(x)^2): [[[[0 0 0]]]...]</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes (see code below)\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): SUSE Linux Enterprise Server 12.2 (x86_64)\nTensorFlow installed from (source or binary): Source\nTensorFlow version (use command below): 1.5.0 (git v1.5.0-0-g37aa430d84) & also present in 1.4.0\nPython version: 3.6.4\nBazel version (if compiling from source): 0.10.1\nGCC/Compiler version (if compiling from source): GCC/7.2.0\nCUDA/cuDNN version: None\nGPU model and memory: None\nExact command to reproduce: See script below\n\nDescribe the problem\nThere is a numerical error with a very specific sequence of operations, that make tf.sqrt() return a tensor of zeros when applied on the output of tf.nn.moments (regardless of the value returned by tf.nn.moments). This error happens when the input of tf.nn.moments comes from tf.nn.conv2d, but not when removing the latter.\nThis error happens when running on a cluster where TensorFlow has been installed from source with \"-m64 -march=native -mtune=native\". We tried upgrading from 1.4.0 to 1.5.0, but the error still occurs. The following flags were used during compilation:\nTF_NEED_JEMALLOC=\"1\"\nTF_NEED_HDFS=\"1\"\nTF_NEED_OPENCL=\"0\"\nTF_NEED_CUDA=\"0\"\nTF_ENABLE_XLA=\"0\"\nTF_CUDA_CLANG=\"0\"\nTF_NEED_GCP=\"0\"\nTF_NEED_MKL=\"1\"\nTF_NEED_VERBS=\"0\"\nTF_NEED_MPI=\"1\"\nTF_NEED_S3=\"0\"\nTF_NEED_GDR=\"0\"\nTF_NEED_OPENCL_SYCL=\"0\"\nTF_MKL_ROOT=\"[DIR]/mkl-dnn/external/mklml_lnx_2018.0.1.20171007\"\nexport MPI_HOME=\"[DIR]/2018.1.038/compilers_and_libraries_2018.1.163/linux/mpi/intel64\"\nAndroid build: No.\nCompiled using Intel MPI plus complete MKL (2018.1.038) loaded in the environment.\nWe also tested this same code in two other machines, where it works properly. One of them is an older cluster, with TensorFlow compiled from source using the same configuration; the main difference is that the processors in this cluster do not support AVX512. The other machine is a laptop where TensorFlow was installed with pip.\nSource code / logs\nThe smallest code to reproduce the error is the following:\nimport tensorflow as tf\nimport numpy as np\n\n# TensorFlow version\nprint('TF version:', tf.__version__, tf.__git_version__, '\\n')\n\n# Create placeholders\no = tf.placeholder(tf.float32, [None, 84, 84, 4])\n\n# Create graph: conv(x, w) -> (x-mean(x))/std(x)\nx = o\n\nw = tf.get_variable(\"w\", [3, 3, x.get_shape()[-1], 16])\nx = tf.nn.conv2d(x, w, [1, 1, 1, 1], padding=\"SAME\")  # remove this and the error disappears...\n\navg, variance = tf.nn.moments(x, np.arange(len(x.get_shape().as_list()) - 1), keep_dims=True)\nepsilon = 1e-3  # for numerical stability in sqrt\n\nvariance = tf.Print(variance, [avg], message='mean(x): ')\nvariance = tf.Print(variance, [variance], message='variance(x): ')\nvariance = tf.Print(variance, [tf.sqrt(variance + epsilon)], message='sqrt(variance(x)): ')\nvariance = tf.Print(variance, [tf.sqrt(avg**2 + epsilon)], message='sqrt(mean(x)^2): ')\n\nx = (x - avg) / (tf.sqrt(variance + epsilon))\n\n# Run\nsess = tf.InteractiveSession()\nsess.run(tf.global_variables_initializer())\nsess.run(x, feed_dict={o: np.random.rand(32, 84, 84, 4)})\n\nAnd the output:\nmean(x): [[[[0.176351935 -0.11745432 -0.17503795]]]...]\nvariance(x): [[[[0.0344150327 0.0378020629 0.0353332]]]...]\nsqrt(variance(x)): [[[[0 0 0]]]...]\nsqrt(mean(x)^2): [[[[0 0 0]]]...]", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes (see code below)\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: SUSE Linux Enterprise Server 12.2 (x86_64)\r\n- **TensorFlow installed from (source or binary)**: Source\r\n- **TensorFlow version (use command below)**: 1.5.0 (git v1.5.0-0-g37aa430d84) & also present in 1.4.0\r\n- **Python version**: 3.6.4\r\n- **Bazel version (if compiling from source)**: 0.10.1\r\n- **GCC/Compiler version (if compiling from source)**: GCC/7.2.0\r\n- **CUDA/cuDNN version**: None\r\n- **GPU model and memory**: None\r\n- **Exact command to reproduce**: See script below\r\n\r\n### Describe the problem\r\nThere is a numerical error with a very specific sequence of operations, that make tf.sqrt() return a tensor of zeros when applied on the output of tf.nn.moments (regardless of the value returned by tf.nn.moments). This error happens when the input of tf.nn.moments comes from tf.nn.conv2d, but not when removing the latter.\r\n\r\nThis error happens when running on a cluster where TensorFlow has been installed from source with \"-m64 -march=native -mtune=native\". We tried upgrading from 1.4.0 to 1.5.0, but the error still occurs. The following flags were used during compilation:\r\n\r\nTF_NEED_JEMALLOC=\"1\"\r\nTF_NEED_HDFS=\"1\"\r\nTF_NEED_OPENCL=\"0\"\r\nTF_NEED_CUDA=\"0\"\r\nTF_ENABLE_XLA=\"0\"\r\nTF_CUDA_CLANG=\"0\"\r\nTF_NEED_GCP=\"0\"\r\nTF_NEED_MKL=\"1\"\r\nTF_NEED_VERBS=\"0\"\r\nTF_NEED_MPI=\"1\"\r\nTF_NEED_S3=\"0\"\r\nTF_NEED_GDR=\"0\"\r\nTF_NEED_OPENCL_SYCL=\"0\"\r\nTF_MKL_ROOT=\"[DIR]/mkl-dnn/external/mklml_lnx_2018.0.1.20171007\"\r\nexport MPI_HOME=\"[DIR]/2018.1.038/compilers_and_libraries_2018.1.163/linux/mpi/intel64\"\r\n\r\nAndroid build: No.\r\n\r\nCompiled using Intel MPI plus complete MKL (2018.1.038) loaded in the environment.\r\n\r\n\r\nWe also tested this same code in two other machines, where it works properly. One of them is an older cluster, with TensorFlow compiled from source using the same configuration; the main difference is that the processors in this cluster do not support AVX512. The other machine is a laptop where TensorFlow was installed with pip.\r\n\r\n### Source code / logs\r\n\r\nThe smallest code to reproduce the error is the following:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\n# TensorFlow version\r\nprint('TF version:', tf.__version__, tf.__git_version__, '\\n')\r\n\r\n# Create placeholders\r\no = tf.placeholder(tf.float32, [None, 84, 84, 4])\r\n\r\n# Create graph: conv(x, w) -> (x-mean(x))/std(x)\r\nx = o\r\n\r\nw = tf.get_variable(\"w\", [3, 3, x.get_shape()[-1], 16])\r\nx = tf.nn.conv2d(x, w, [1, 1, 1, 1], padding=\"SAME\")  # remove this and the error disappears...\r\n\r\navg, variance = tf.nn.moments(x, np.arange(len(x.get_shape().as_list()) - 1), keep_dims=True)\r\nepsilon = 1e-3  # for numerical stability in sqrt\r\n\r\nvariance = tf.Print(variance, [avg], message='mean(x): ')\r\nvariance = tf.Print(variance, [variance], message='variance(x): ')\r\nvariance = tf.Print(variance, [tf.sqrt(variance + epsilon)], message='sqrt(variance(x)): ')\r\nvariance = tf.Print(variance, [tf.sqrt(avg**2 + epsilon)], message='sqrt(mean(x)^2): ')\r\n\r\nx = (x - avg) / (tf.sqrt(variance + epsilon))\r\n\r\n# Run\r\nsess = tf.InteractiveSession()\r\nsess.run(tf.global_variables_initializer())\r\nsess.run(x, feed_dict={o: np.random.rand(32, 84, 84, 4)})\r\n```\r\n\r\nAnd the output:\r\n\r\nmean(x): [[[[0.176351935 -0.11745432 -0.17503795]]]...]\r\nvariance(x): [[[[0.0344150327 0.0378020629 0.0353332]]]...]\r\nsqrt(variance(x)): [[[[0 0 0]]]...]\r\nsqrt(mean(x)^2): [[[[0 0 0]]]...]\r\n"}