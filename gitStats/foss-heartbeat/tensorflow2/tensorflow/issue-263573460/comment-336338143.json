{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/336338143", "html_url": "https://github.com/tensorflow/tensorflow/issues/13537#issuecomment-336338143", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13537", "id": 336338143, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjMzODE0Mw==", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-13T03:09:03Z", "updated_at": "2017-10-13T03:09:03Z", "author_association": "CONTRIBUTOR", "body_html": "<div class=\"email-fragment\">What you saw looks like a bug in tf.convert_to_tensor.  It treats complex\ndata structures, like LSTMStateTuple and nested LSTMStateTuples, as nested\ntuples and converts them to initializers.  We'll look at fixing that bug\nseparately.</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Thu, Oct 12, 2017 at 7:57 PM, ebrevdo ***@***.***&gt; wrote:\n I'm rather surprised that tf.Variable(self.init_state) even works! Sounds\n like a bug. That should have failed in python-land right away! +lukasz\n\n You need to do something like:\n\n\n counter = [0]\n def create_variable(init):\n r = tf.get_variable(initializer=init, name=\"rnn_state_%d\" % counter[0])\n counter[0] += 1\n return r\n self.state = tf.contrib.framework.nest.map_structure(create_variable,\n self.init_state)\n\n\n On Thu, Oct 12, 2017 at 5:32 PM, Greg Peatfield ***@***.***&gt;\n wrote:\n\n &gt; I think I understand the approach although I have yet to code the\n &gt; solution. It seems like the more an more I dig into this approach the\n more\n &gt; complexity and issue the rise. I may need to wait for the actual support\n &gt; for assign() with Tuples. I ran into another issue as I was trying to\n &gt; prototype this and it was initializing a variable with a Tuple only\n returns\n &gt; a single combined tensor. Hopefully if Assign() supports tuples the\n &gt; \"variable()\" will support Tuples as well to initialize. I find the\n biggest\n &gt; problem is the complexity of other libraries by manually copying like\n this.\n &gt; Also, I need to figure out how to screen for a tuple so when I \"assign()\"\n &gt; the variables I don't collapse the tuple into a single tensor variable as\n &gt; this was tough to find even in a short segment of code.\n &gt;\n &gt; So I think I might be able to do a short-term solution if needed based\n &gt; upon the comments from <a class=\"user-mention\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> &lt;<a href=\"https://github.com/ebrevdo\">https://github.com/ebrevdo</a>&gt; , but I\n &gt; really think if the RNN training is going to force the state to be a\n tuple\n &gt; then the rest of TensorFlow should help support this new requirement.\n &gt; Another option is to remove the warning statement and just document that\n &gt; Tuples are handled faster and support both formats moving forward. I am\n &gt; sure this is an easier solution for now, not sure about the long term\n &gt; support issues as I am sure the team will need to think through.\n &gt;\n &gt; Here is what I am talking about when the RNN cells are\n &gt; \"state_is_tuple=True\"\n &gt;\n &gt; self.init_state = self.cell_L1.zero_state(batch_size, tf.float32)\n &gt; self.state = tf.Variable(self.init_state, trainable=False)\n &gt;\n &gt; In the code above, this silently functions as you would expect. The\n &gt; self.state is initialized with the Tuple value from self.init_state, but\n &gt; what you get for self.state is actually a single Tensor variable with the\n &gt; Tuple collapsed. This causes the RNN functions to fail later as they are\n &gt; expecting a Tuple for the state.\n &gt;\n &gt; \u2014\n &gt; You are receiving this because you were mentioned.\n &gt; Reply to this email directly, view it on GitHub\n &gt; &lt;<a href=\"https://github.com/tensorflow/tensorflow/issues/\">https://github.com/tensorflow/tensorflow/issues/</a>\n 13537#issuecomment-336317687&gt;,\n &gt; or mute the thread\n &gt; &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/\">https://github.com/notifications/unsubscribe-auth/</a>\n ABtim8Y8cn7LRauhYWTefrUrFpZTFfDUks5srq-IgaJpZM4PxCmq&gt;\n &gt; .\n &gt;\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"263573460\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/13537\" href=\"https://github.com/tensorflow/tensorflow/issues/13537#issuecomment-336336527\">#13537 (comment)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/ABtim39WZJ3MfxbtGMMDHyHUTf-ZkBSyks5srtGUgaJpZM4PxCmq\">https://github.com/notifications/unsubscribe-auth/ABtim39WZJ3MfxbtGMMDHyHUTf-ZkBSyks5srtGUgaJpZM4PxCmq</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n</div>", "body_text": "What you saw looks like a bug in tf.convert_to_tensor.  It treats complex\ndata structures, like LSTMStateTuple and nested LSTMStateTuples, as nested\ntuples and converts them to initializers.  We'll look at fixing that bug\nseparately.\n\u2026\nOn Thu, Oct 12, 2017 at 7:57 PM, ebrevdo ***@***.***> wrote:\n I'm rather surprised that tf.Variable(self.init_state) even works! Sounds\n like a bug. That should have failed in python-land right away! +lukasz\n\n You need to do something like:\n\n\n counter = [0]\n def create_variable(init):\n r = tf.get_variable(initializer=init, name=\"rnn_state_%d\" % counter[0])\n counter[0] += 1\n return r\n self.state = tf.contrib.framework.nest.map_structure(create_variable,\n self.init_state)\n\n\n On Thu, Oct 12, 2017 at 5:32 PM, Greg Peatfield ***@***.***>\n wrote:\n\n > I think I understand the approach although I have yet to code the\n > solution. It seems like the more an more I dig into this approach the\n more\n > complexity and issue the rise. I may need to wait for the actual support\n > for assign() with Tuples. I ran into another issue as I was trying to\n > prototype this and it was initializing a variable with a Tuple only\n returns\n > a single combined tensor. Hopefully if Assign() supports tuples the\n > \"variable()\" will support Tuples as well to initialize. I find the\n biggest\n > problem is the complexity of other libraries by manually copying like\n this.\n > Also, I need to figure out how to screen for a tuple so when I \"assign()\"\n > the variables I don't collapse the tuple into a single tensor variable as\n > this was tough to find even in a short segment of code.\n >\n > So I think I might be able to do a short-term solution if needed based\n > upon the comments from @ebrevdo <https://github.com/ebrevdo> , but I\n > really think if the RNN training is going to force the state to be a\n tuple\n > then the rest of TensorFlow should help support this new requirement.\n > Another option is to remove the warning statement and just document that\n > Tuples are handled faster and support both formats moving forward. I am\n > sure this is an easier solution for now, not sure about the long term\n > support issues as I am sure the team will need to think through.\n >\n > Here is what I am talking about when the RNN cells are\n > \"state_is_tuple=True\"\n >\n > self.init_state = self.cell_L1.zero_state(batch_size, tf.float32)\n > self.state = tf.Variable(self.init_state, trainable=False)\n >\n > In the code above, this silently functions as you would expect. The\n > self.state is initialized with the Tuple value from self.init_state, but\n > what you get for self.state is actually a single Tensor variable with the\n > Tuple collapsed. This causes the RNN functions to fail later as they are\n > expecting a Tuple for the state.\n >\n > \u2014\n > You are receiving this because you were mentioned.\n > Reply to this email directly, view it on GitHub\n > <https://github.com/tensorflow/tensorflow/issues/\n 13537#issuecomment-336317687>,\n > or mute the thread\n > <https://github.com/notifications/unsubscribe-auth/\n ABtim8Y8cn7LRauhYWTefrUrFpZTFfDUks5srq-IgaJpZM4PxCmq>\n > .\n >\n\n \u2014\n You are receiving this because you are subscribed to this thread.\n Reply to this email directly, view it on GitHub\n <#13537 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/ABtim39WZJ3MfxbtGMMDHyHUTf-ZkBSyks5srtGUgaJpZM4PxCmq>\n .", "body": "What you saw looks like a bug in tf.convert_to_tensor.  It treats complex\ndata structures, like LSTMStateTuple and nested LSTMStateTuples, as nested\ntuples and converts them to initializers.  We'll look at fixing that bug\nseparately.\n\nOn Thu, Oct 12, 2017 at 7:57 PM, ebrevdo <notifications@github.com> wrote:\n\n> I'm rather surprised that tf.Variable(self.init_state) even works! Sounds\n> like a bug. That should have failed in python-land right away! +lukasz\n>\n> You need to do something like:\n>\n>\n> counter = [0]\n> def create_variable(init):\n> r = tf.get_variable(initializer=init, name=\"rnn_state_%d\" % counter[0])\n> counter[0] += 1\n> return r\n> self.state = tf.contrib.framework.nest.map_structure(create_variable,\n> self.init_state)\n>\n>\n> On Thu, Oct 12, 2017 at 5:32 PM, Greg Peatfield <notifications@github.com>\n> wrote:\n>\n> > I think I understand the approach although I have yet to code the\n> > solution. It seems like the more an more I dig into this approach the\n> more\n> > complexity and issue the rise. I may need to wait for the actual support\n> > for assign() with Tuples. I ran into another issue as I was trying to\n> > prototype this and it was initializing a variable with a Tuple only\n> returns\n> > a single combined tensor. Hopefully if Assign() supports tuples the\n> > \"variable()\" will support Tuples as well to initialize. I find the\n> biggest\n> > problem is the complexity of other libraries by manually copying like\n> this.\n> > Also, I need to figure out how to screen for a tuple so when I \"assign()\"\n> > the variables I don't collapse the tuple into a single tensor variable as\n> > this was tough to find even in a short segment of code.\n> >\n> > So I think I might be able to do a short-term solution if needed based\n> > upon the comments from @ebrevdo <https://github.com/ebrevdo> , but I\n> > really think if the RNN training is going to force the state to be a\n> tuple\n> > then the rest of TensorFlow should help support this new requirement.\n> > Another option is to remove the warning statement and just document that\n> > Tuples are handled faster and support both formats moving forward. I am\n> > sure this is an easier solution for now, not sure about the long term\n> > support issues as I am sure the team will need to think through.\n> >\n> > Here is what I am talking about when the RNN cells are\n> > \"state_is_tuple=True\"\n> >\n> > self.init_state = self.cell_L1.zero_state(batch_size, tf.float32)\n> > self.state = tf.Variable(self.init_state, trainable=False)\n> >\n> > In the code above, this silently functions as you would expect. The\n> > self.state is initialized with the Tuple value from self.init_state, but\n> > what you get for self.state is actually a single Tensor variable with the\n> > Tuple collapsed. This causes the RNN functions to fail later as they are\n> > expecting a Tuple for the state.\n> >\n> > \u2014\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly, view it on GitHub\n> > <https://github.com/tensorflow/tensorflow/issues/\n> 13537#issuecomment-336317687>,\n> > or mute the thread\n> > <https://github.com/notifications/unsubscribe-auth/\n> ABtim8Y8cn7LRauhYWTefrUrFpZTFfDUks5srq-IgaJpZM4PxCmq>\n> > .\n> >\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/issues/13537#issuecomment-336336527>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABtim39WZJ3MfxbtGMMDHyHUTf-ZkBSyks5srtGUgaJpZM4PxCmq>\n> .\n>\n"}