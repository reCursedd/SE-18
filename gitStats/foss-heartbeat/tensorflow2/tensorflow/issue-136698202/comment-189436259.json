{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/189436259", "html_url": "https://github.com/tensorflow/tensorflow/issues/1297#issuecomment-189436259", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1297", "id": 189436259, "node_id": "MDEyOklzc3VlQ29tbWVudDE4OTQzNjI1OQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-02-26T19:15:19Z", "updated_at": "2016-02-26T19:15:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think this is a known issue (at least offline), where running the initializer will cause all variables to be assigned to the GPU, then subsequently trying to run SparseApply on one of those variables will fail because SparseApply doesn't have a GPU implementation. (<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=463737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vrv\">@vrv</a> has an idea for how to fix it, but it might break other users, so we haven't pushed it yet :(.) The workaround is to pin just the offending variable to CPU using <code>with tf.device(\"/cpu:0\"):</code>.</p>\n<p>I think for the <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/udacity/5_word2vec.ipynb\">notebook in question</a>, this involves changing the line:</p>\n<div class=\"highlight highlight-source-python\"><pre>embeddings <span class=\"pl-k\">=</span> tf.Variable(\n  tf.random_uniform([vocabulary_size, embedding_size], <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.0</span>, <span class=\"pl-c1\">1.0</span>))</pre></div>\n<p>...and replacing it with:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/cpu:0<span class=\"pl-pds\">\"</span></span>):\n  embeddings <span class=\"pl-k\">=</span> tf.Variable(\n    tf.random_uniform([vocabulary_size, embedding_size], <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.0</span>, <span class=\"pl-c1\">1.0</span>))</pre></div>", "body_text": "I think this is a known issue (at least offline), where running the initializer will cause all variables to be assigned to the GPU, then subsequently trying to run SparseApply on one of those variables will fail because SparseApply doesn't have a GPU implementation. (@vrv has an idea for how to fix it, but it might break other users, so we haven't pushed it yet :(.) The workaround is to pin just the offending variable to CPU using with tf.device(\"/cpu:0\"):.\nI think for the notebook in question, this involves changing the line:\nembeddings = tf.Variable(\n  tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0))\n...and replacing it with:\nwith tf.device(\"/cpu:0\"):\n  embeddings = tf.Variable(\n    tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0))", "body": "I think this is a known issue (at least offline), where running the initializer will cause all variables to be assigned to the GPU, then subsequently trying to run SparseApply<FOO> on one of those variables will fail because SparseApply<FOO> doesn't have a GPU implementation. (@vrv has an idea for how to fix it, but it might break other users, so we haven't pushed it yet :(.) The workaround is to pin just the offending variable to CPU using `with tf.device(\"/cpu:0\"):`.\n\nI think for the [notebook in question](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/udacity/5_word2vec.ipynb), this involves changing the line:\n\n``` python\nembeddings = tf.Variable(\n  tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0))\n```\n\n...and replacing it with:\n\n``` python\nwith tf.device(\"/cpu:0\"):\n  embeddings = tf.Variable(\n    tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0))\n```\n"}