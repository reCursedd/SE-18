{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/140958331", "pull_request_review_id": 65101361, "id": 140958331, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk1ODMzMQ==", "diff_hunk": "@@ -55,80 +57,155 @@ def rotate(images, angles, interpolation=\"NEAREST\"):\n   Raises:\n     TypeError: If `image` is an invalid type.\n   \"\"\"\n-  image_or_images = ops.convert_to_tensor(images, name=\"images\")\n-  if image_or_images.dtype.base_dtype not in _IMAGE_DTYPES:\n-    raise TypeError(\"Invalid dtype %s.\" % image_or_images.dtype)\n-  if len(image_or_images.get_shape()) == 2:\n-    images = image_or_images[None, :, :, None]\n-  elif len(image_or_images.get_shape()) == 3:\n-    images = image_or_images[None, :, :, :]\n-  elif len(image_or_images.get_shape()) == 4:\n-    images = image_or_images\n-  else:\n-    raise TypeError(\"Images should have rank between 2 and 4.\")\n-\n-  image_height = math_ops.cast(array_ops.shape(images)[1], dtypes.float32)[None]\n-  image_width = math_ops.cast(array_ops.shape(images)[2], dtypes.float32)[None]\n-  output = transform(\n-      images,\n-      angles_to_projective_transforms(angles, image_height, image_width),\n-      interpolation=interpolation)\n-  if len(image_or_images.get_shape()) == 2:\n-    return output[0, :, :, 0]\n-  elif len(image_or_images.get_shape()) == 3:\n-    return output[0, :, :, :]\n-  else:\n-    return output\n+  with ops.name_scope(name):\n+    image_or_images = ops.convert_to_tensor(images)\n+    if image_or_images.dtype.base_dtype not in _IMAGE_DTYPES:\n+      raise TypeError(\"Invalid dtype %s.\" % image_or_images.dtype)\n+    if len(image_or_images.get_shape()) == 2:\n+      images = image_or_images[None, :, :, None]\n+    elif len(image_or_images.get_shape()) == 3:\n+      images = image_or_images[None, :, :, :]\n+    elif len(image_or_images.get_shape()) == 4:\n+      images = image_or_images\n+    else:\n+      raise TypeError(\"Images should have rank between 2 and 4.\")\n+\n+    image_height = math_ops.cast(array_ops.shape(images)[1],\n+                                 dtypes.float32)[None]\n+    image_width = math_ops.cast(array_ops.shape(images)[2],\n+                                dtypes.float32)[None]\n+    output = transform(\n+        images,\n+        angles_to_projective_transforms(angles, image_height, image_width),\n+        interpolation=interpolation)\n+    if len(image_or_images.get_shape()) == 2:\n+      return output[0, :, :, 0]\n+    elif len(image_or_images.get_shape()) == 3:\n+      return output[0, :, :, :]\n+    else:\n+      return output\n+\n+\n+def translate(images, translations, interpolation=\"NEAREST\", name=\"translate\"):\n+  \"\"\"Translate image(s) by the passed vectors(s).\n \n+  Args:\n+    images: A tensor of shape (num_images, num_rows, num_columns, num_channels)\n+        (NHWC), (num_rows, num_columns, num_channels) (HWC), or\n+        (num_rows, num_columns) (HW). The rank must be statically known (the\n+        shape is not `TensorShape(None)`.\n+    translations: A vector representing [dx, dy] or (if images has rank 4)\n+        a vector of length num_images, with a [dx, dy] vector for each image in\n+        the batch.\n+    interpolation: Interpolation mode. Supported values: \"NEAREST\", \"BILINEAR\".\n+    name: The name of the op.\n \n-def angles_to_projective_transforms(angles, image_height, image_width):\n+  Returns:\n+    Image(s) with the same type and shape as `images`, translated by the given\n+        vector(s). Empty space due to the translation will be filled with zeros.\n+\n+  Raises:\n+    TypeError: If `image` is an invalid type.\n+  \"\"\"\n+  with ops.name_scope(name):\n+    return transform(\n+        images,\n+        translations_to_projective_transforms(translations),\n+        interpolation=interpolation)\n+\n+\n+def angles_to_projective_transforms(angles,\n+                                    image_height,\n+                                    image_width,\n+                                    name=\"angles_to_projective_transforms\"):\n   \"\"\"Returns projective transform(s) for the given angle(s).\n \n   Args:\n     angles: A scalar angle to rotate all images by, or (for batches of images)\n-      a vector with an angle to rotate each image in the batch.\n+        a vector with an angle to rotate each image in the batch. The rank must\n+        be statically known (the shape is not `TensorShape(None)`.\n     image_height: Height of the image(s) to be transformed.\n     image_width: Width of the image(s) to be transformed.\n \n   Returns:\n     A tensor of shape (num_images, 8). Projective transforms which can be given\n       to `tf.contrib.image.transform`.\n   \"\"\"\n-  angle_or_angles = ops.convert_to_tensor(\n-      angles, name=\"angles\", dtype=dtypes.float32)\n-  if len(angle_or_angles.get_shape()) == 0:  # pylint: disable=g-explicit-length-test\n-    angles = angle_or_angles[None]\n-  elif len(angle_or_angles.get_shape()) == 1:\n-    angles = angle_or_angles\n-  else:\n-    raise TypeError(\"Angles should have rank 0 or 1.\")\n-  x_offset = ((image_width - 1) - (math_ops.cos(angles) *\n-                                   (image_width - 1) - math_ops.sin(angles) *\n-                                   (image_height - 1))) / 2.0\n-  y_offset = ((image_height - 1) - (math_ops.sin(angles) *\n-                                    (image_width - 1) + math_ops.cos(angles) *\n-                                    (image_height - 1))) / 2.0\n-  num_angles = array_ops.shape(angles)[0]\n-  return array_ops.concat(\n-      values=[\n-          math_ops.cos(angles)[:, None],\n-          -math_ops.sin(angles)[:, None],\n-          x_offset[:, None],\n-          math_ops.sin(angles)[:, None],\n-          math_ops.cos(angles)[:, None],\n-          y_offset[:, None],\n-          array_ops.zeros((num_angles, 2), dtypes.float32),\n-      ],\n-      axis=1)\n-\n-\n-def transform(images, transforms, interpolation=\"NEAREST\"):\n+  with ops.name_scope(name):\n+    angle_or_angles = ops.convert_to_tensor(\n+        angles, name=\"angles\", dtype=dtypes.float32)\n+    if len(angle_or_angles.get_shape()) == 0:  # pylint: disable=g-explicit-length-test\n+      angles = angle_or_angles[None]\n+    elif len(angle_or_angles.get_shape()) == 1:\n+      angles = angle_or_angles\n+    else:\n+      raise TypeError(\"Angles should have rank 0 or 1.\")\n+    x_offset = ((image_width - 1) - (math_ops.cos(angles) *\n+                                     (image_width - 1) - math_ops.sin(angles) *\n+                                     (image_height - 1))) / 2.0\n+    y_offset = ((image_height - 1) - (math_ops.sin(angles) *\n+                                      (image_width - 1) + math_ops.cos(angles) *\n+                                      (image_height - 1))) / 2.0\n+    num_angles = array_ops.shape(angles)[0]\n+    return array_ops.concat(\n+        values=[\n+            math_ops.cos(angles)[:, None],\n+            -math_ops.sin(angles)[:, None],\n+            x_offset[:, None],\n+            math_ops.sin(angles)[:, None],\n+            math_ops.cos(angles)[:, None],\n+            y_offset[:, None],\n+            array_ops.zeros((num_angles, 2), dtypes.float32),\n+        ],\n+        axis=1)\n+\n+\n+def translations_to_projective_transforms(\n+    translations, name=\"translations_to_projective_transforms\"):\n+  \"\"\"Returns projective transform(s) for the given translation(s).\n+\n+  Args:\n+      translations: A 2-element list representing [dx, dy] or a vector of\n+          2-element lists representing [dx, dy] to translate for each image\n+          (for a batch of images). The rank must be statically known (the shape\n+          is not `TensorShape(None)`.\n+      name: The name of the op.\n+\n+  Returns:\n+      A tensor of shape (num_images, 8) projective transforms which can be given\n+          to `tf.contrib.image.transform`.\n+  \"\"\"\n+  with ops.name_scope(name):\n+    translation_or_translations = ops.convert_to_tensor(\n+        translations, name=\"translations\", dtype=dtypes.float32)\n+    if len(translation_or_translations.get_shape()) == 1:\n+      translations = translation_or_translations[None]\n+    elif len(translation_or_translations.get_shape()) == 2:\n+      translations = translation_or_translations\n+    else:\n+      raise TypeError(\"Translations should have rank 1 or 2.\")\n+    num_translations = array_ops.shape(translations)[0]\n+    return array_ops.concat(", "path": "tensorflow/contrib/image/python/ops/image_ops.py", "position": null, "original_position": 208, "commit_id": "28150cc995aa581f2623a7d06abd1b98a2ae1a5a", "original_commit_id": "59f89e706e33d4c95e5333a15bc8d0ceb0527a85", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "Explain what you're doing here. Match dtype to image dtype?", "created_at": "2017-09-26T05:08:17Z", "updated_at": "2017-09-27T16:55:28Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12306#discussion_r140958331", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12306", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/140958331"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12306#discussion_r140958331"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12306"}}, "body_html": "<p>Explain what you're doing here. Match dtype to image dtype?</p>", "body_text": "Explain what you're doing here. Match dtype to image dtype?"}