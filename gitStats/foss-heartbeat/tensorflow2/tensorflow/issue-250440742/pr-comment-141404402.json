{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/141404402", "pull_request_review_id": 65613239, "id": 141404402, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MTQwNDQwMg==", "diff_hunk": "@@ -55,80 +57,155 @@ def rotate(images, angles, interpolation=\"NEAREST\"):\n   Raises:\n     TypeError: If `image` is an invalid type.\n   \"\"\"\n-  image_or_images = ops.convert_to_tensor(images, name=\"images\")\n-  if image_or_images.dtype.base_dtype not in _IMAGE_DTYPES:\n-    raise TypeError(\"Invalid dtype %s.\" % image_or_images.dtype)\n-  if len(image_or_images.get_shape()) == 2:\n-    images = image_or_images[None, :, :, None]\n-  elif len(image_or_images.get_shape()) == 3:\n-    images = image_or_images[None, :, :, :]\n-  elif len(image_or_images.get_shape()) == 4:\n-    images = image_or_images\n-  else:\n-    raise TypeError(\"Images should have rank between 2 and 4.\")\n-\n-  image_height = math_ops.cast(array_ops.shape(images)[1], dtypes.float32)[None]\n-  image_width = math_ops.cast(array_ops.shape(images)[2], dtypes.float32)[None]\n-  output = transform(\n-      images,\n-      angles_to_projective_transforms(angles, image_height, image_width),\n-      interpolation=interpolation)\n-  if len(image_or_images.get_shape()) == 2:\n-    return output[0, :, :, 0]\n-  elif len(image_or_images.get_shape()) == 3:\n-    return output[0, :, :, :]\n-  else:\n-    return output\n+  with ops.name_scope(name):\n+    image_or_images = ops.convert_to_tensor(images)\n+    if image_or_images.dtype.base_dtype not in _IMAGE_DTYPES:\n+      raise TypeError(\"Invalid dtype %s.\" % image_or_images.dtype)\n+    if len(image_or_images.get_shape()) == 2:\n+      images = image_or_images[None, :, :, None]\n+    elif len(image_or_images.get_shape()) == 3:\n+      images = image_or_images[None, :, :, :]\n+    elif len(image_or_images.get_shape()) == 4:\n+      images = image_or_images\n+    else:\n+      raise TypeError(\"Images should have rank between 2 and 4.\")\n+\n+    image_height = math_ops.cast(array_ops.shape(images)[1],\n+                                 dtypes.float32)[None]\n+    image_width = math_ops.cast(array_ops.shape(images)[2],\n+                                dtypes.float32)[None]\n+    output = transform(\n+        images,\n+        angles_to_projective_transforms(angles, image_height, image_width),\n+        interpolation=interpolation)\n+    if len(image_or_images.get_shape()) == 2:\n+      return output[0, :, :, 0]\n+    elif len(image_or_images.get_shape()) == 3:\n+      return output[0, :, :, :]\n+    else:\n+      return output\n+\n+\n+def translate(images, translations, interpolation=\"NEAREST\", name=\"translate\"):\n+  \"\"\"Translate image(s) by the passed vectors(s).\n \n+  Args:\n+    images: A tensor of shape (num_images, num_rows, num_columns, num_channels)\n+        (NHWC), (num_rows, num_columns, num_channels) (HWC), or\n+        (num_rows, num_columns) (HW). The rank must be statically known (the\n+        shape is not `TensorShape(None)`.\n+    translations: A vector representing [dx, dy] or (if images has rank 4)\n+        a vector of length num_images, with a [dx, dy] vector for each image in\n+        the batch.\n+    interpolation: Interpolation mode. Supported values: \"NEAREST\", \"BILINEAR\".\n+    name: The name of the op.\n \n-def angles_to_projective_transforms(angles, image_height, image_width):\n+  Returns:\n+    Image(s) with the same type and shape as `images`, translated by the given\n+        vector(s). Empty space due to the translation will be filled with zeros.\n+\n+  Raises:\n+    TypeError: If `image` is an invalid type.\n+  \"\"\"\n+  with ops.name_scope(name):", "path": "tensorflow/contrib/image/python/ops/image_ops.py", "position": null, "original_position": 100, "commit_id": "28150cc995aa581f2623a7d06abd1b98a2ae1a5a", "original_commit_id": "59f89e706e33d4c95e5333a15bc8d0ceb0527a85", "user": {"login": "ringw", "id": 1391644, "node_id": "MDQ6VXNlcjEzOTE2NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1391644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ringw", "html_url": "https://github.com/ringw", "followers_url": "https://api.github.com/users/ringw/followers", "following_url": "https://api.github.com/users/ringw/following{/other_user}", "gists_url": "https://api.github.com/users/ringw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ringw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ringw/subscriptions", "organizations_url": "https://api.github.com/users/ringw/orgs", "repos_url": "https://api.github.com/users/ringw/repos", "events_url": "https://api.github.com/users/ringw/events{/privacy}", "received_events_url": "https://api.github.com/users/ringw/received_events", "type": "User", "site_admin": false}, "body": "Done throughout.", "created_at": "2017-09-27T16:53:45Z", "updated_at": "2017-09-27T16:55:28Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12306#discussion_r141404402", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12306", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/141404402"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12306#discussion_r141404402"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12306"}}, "body_html": "<p>Done throughout.</p>", "body_text": "Done throughout.", "in_reply_to_id": 140958211}