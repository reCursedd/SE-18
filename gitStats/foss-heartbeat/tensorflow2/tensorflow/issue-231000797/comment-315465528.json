{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/315465528", "html_url": "https://github.com/tensorflow/tensorflow/issues/10157#issuecomment-315465528", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10157", "id": 315465528, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTQ2NTUyOA==", "user": {"login": "ljanyst", "id": 126975, "node_id": "MDQ6VXNlcjEyNjk3NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/126975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljanyst", "html_url": "https://github.com/ljanyst", "followers_url": "https://api.github.com/users/ljanyst/followers", "following_url": "https://api.github.com/users/ljanyst/following{/other_user}", "gists_url": "https://api.github.com/users/ljanyst/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljanyst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljanyst/subscriptions", "organizations_url": "https://api.github.com/users/ljanyst/orgs", "repos_url": "https://api.github.com/users/ljanyst/repos", "events_url": "https://api.github.com/users/ljanyst/events{/privacy}", "received_events_url": "https://api.github.com/users/ljanyst/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-14T20:55:31Z", "updated_at": "2017-07-14T20:55:31Z", "author_association": "NONE", "body_html": "<p>It is not a bug in TensorFlow; it's a problem with Eigen.</p>\n<p>When used in the MKL mode, Eigen's code defines <code>BlasIndex</code> to be whatever <code>MKL_INT</code> is:</p>\n<pre><code>typedef MKL_INT BlasIndex;\n</code></pre>\n<p>It is utterly confusing because the definition of <code>MKL_INT</code> varies depending on the size of indices you want to use in your program. However, instead of using the MKL's BLAS interface, which takes the size of <code>MKL_INT</code> into account, Eigen defines its own interface (<a href=\"https://bitbucket.org/eigen/eigen/src/e7027de735d6450c8ede3ce2f65166714c6aef50/Eigen/src/misc/blas.h?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">https://bitbucket.org/eigen/eigen/src/e7027de735d6450c8ede3ce2f65166714c6aef50/Eigen/src/misc/blas.h?at=default&amp;fileviewer=file-view-default</a>) using only 32-bit long ints. This is the reason for the compilation errors you see.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1184266\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gogo40\">@gogo40</a> Your patch is unnecessary if you use short indices (<code>-DMKL_LP64</code>) and makes a significant chunk of the Eigen's unit tests fail if you use long indices (<code>-DMKL_ILP64 -DEIGEN_BLAS_INDEX=int</code>). This is because the implementation of BLAS in <code>libmkl_intel_ilp64.so</code> expects 64-bit long indices.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=25232145\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/drormeir\">@drormeir</a> if you use <code>-DMKL_LP64</code> instead of <code>-DMKL_ILP64</code>, TensorFlow will compile fine. I would not expect to see performance improvements though.</p>", "body_text": "It is not a bug in TensorFlow; it's a problem with Eigen.\nWhen used in the MKL mode, Eigen's code defines BlasIndex to be whatever MKL_INT is:\ntypedef MKL_INT BlasIndex;\n\nIt is utterly confusing because the definition of MKL_INT varies depending on the size of indices you want to use in your program. However, instead of using the MKL's BLAS interface, which takes the size of MKL_INT into account, Eigen defines its own interface (https://bitbucket.org/eigen/eigen/src/e7027de735d6450c8ede3ce2f65166714c6aef50/Eigen/src/misc/blas.h?at=default&fileviewer=file-view-default) using only 32-bit long ints. This is the reason for the compilation errors you see.\n@gogo40 Your patch is unnecessary if you use short indices (-DMKL_LP64) and makes a significant chunk of the Eigen's unit tests fail if you use long indices (-DMKL_ILP64 -DEIGEN_BLAS_INDEX=int). This is because the implementation of BLAS in libmkl_intel_ilp64.so expects 64-bit long indices.\n@drormeir if you use -DMKL_LP64 instead of -DMKL_ILP64, TensorFlow will compile fine. I would not expect to see performance improvements though.", "body": "It is not a bug in TensorFlow; it's a problem with Eigen.\r\n\r\nWhen used in the MKL mode, Eigen's code defines `BlasIndex` to be whatever `MKL_INT` is:\r\n\r\n```\r\ntypedef MKL_INT BlasIndex;\r\n```\r\n\r\nIt is utterly confusing because the definition of `MKL_INT` varies depending on the size of indices you want to use in your program. However, instead of using the MKL's BLAS interface, which takes the size of `MKL_INT` into account, Eigen defines its own interface (https://bitbucket.org/eigen/eigen/src/e7027de735d6450c8ede3ce2f65166714c6aef50/Eigen/src/misc/blas.h?at=default&fileviewer=file-view-default) using only 32-bit long ints. This is the reason for the compilation errors you see.\r\n\r\n@gogo40 Your patch is unnecessary if you use short indices (`-DMKL_LP64`) and makes a significant chunk of the Eigen's unit tests fail if you use long indices (`-DMKL_ILP64 -DEIGEN_BLAS_INDEX=int`). This is because the implementation of BLAS in `libmkl_intel_ilp64.so` expects 64-bit long indices.\r\n\r\n@drormeir if you use `-DMKL_LP64` instead of `-DMKL_ILP64`, TensorFlow will compile fine. I would not expect to see performance improvements though."}