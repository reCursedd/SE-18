{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/105464481", "pull_request_review_id": 26349410, "id": 105464481, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTQ2NDQ4MQ==", "diff_hunk": "@@ -0,0 +1,68 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/core/framework/allocator_registry.h\"\n+\n+#include <string>\n+\n+#include \"tensorflow/core/platform/default/logging.h\"\n+\n+namespace tensorflow {\n+\n+// static\n+AllocatorRegistry* AllocatorRegistry::Global() {\n+  static AllocatorRegistry* global_allocator_registry = new AllocatorRegistry;\n+  return global_allocator_registry;\n+}\n+\n+bool AllocatorRegistry::CheckForDuplicates(const string& name, int priority) {\n+  for (std::vector<AllocatorRegistryEntry>::iterator it = allocators_.begin();\n+       it != allocators_.end(); ++it) {\n+    if (!name.compare(it->name) && it->priority == priority) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n+void AllocatorRegistry::Register(const string& name, int priority,\n+                                 Allocator* allocator) {\n+  CHECK(!name.empty()) << \"Need a valid name for Allocator\";\n+  CHECK_GE(priority, 0) << \"Priority needs to be non-negative\";\n+  CHECK(!CheckForDuplicates(name, priority)) << \"Allocator with name: [\" << name\n+                                             << \"] and priority: [\" << priority\n+                                             << \"] already registered\";\n+\n+  AllocatorRegistryEntry tmp_entry;\n+  tmp_entry.name = name;\n+  tmp_entry.priority = priority;\n+  tmp_entry.allocator = allocator;\n+\n+  allocators_.push_back(tmp_entry);\n+  int high_pri = -1;\n+  for (std::vector<AllocatorRegistryEntry>::iterator it = allocators_.begin();\n+       it != allocators_.end(); ++it) {", "path": "tensorflow/core/framework/allocator_registry.cc", "position": null, "original_position": 56, "commit_id": "4812be7bb14cb4e72df3a8930cb2197ca271df75", "original_commit_id": "1dfca5f9ac657329cb645510a5890a5292cef9cc", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "you can probably just do:\r\n\r\nfor (auto entry : allocators_) {\r\n  if (high_pri < entry.priority) {\r\n    ...\r\n  } \r\n}\r\n\r\n(same elsewhere in this file)", "created_at": "2017-03-10T18:57:18Z", "updated_at": "2017-03-10T23:46:31Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8153#discussion_r105464481", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8153", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/105464481"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8153#discussion_r105464481"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8153"}}, "body_html": "<p>you can probably just do:</p>\n<p>for (auto entry : allocators_) {<br>\nif (high_pri &lt; entry.priority) {<br>\n...<br>\n}<br>\n}</p>\n<p>(same elsewhere in this file)</p>", "body_text": "you can probably just do:\nfor (auto entry : allocators_) {\nif (high_pri < entry.priority) {\n...\n}\n}\n(same elsewhere in this file)"}