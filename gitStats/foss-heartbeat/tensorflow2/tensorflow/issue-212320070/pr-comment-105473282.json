{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/105473282", "pull_request_review_id": 26360074, "id": 105473282, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNTQ3MzI4Mg==", "diff_hunk": "@@ -0,0 +1,120 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+// A simple CPU allocator that intercepts malloc/free calls from MKL library\n+// and redirects them to Tensorflow allocator\n+\n+#ifndef TENSORFLOW_CORE_COMMON_RUNTIME_MKL_CPU_ALLOCATOR_H_\n+#define TENSORFLOW_CORE_COMMON_RUNTIME_MKL_CPU_ALLOCATOR_H_\n+\n+#ifdef INTEL_MKL\n+\n+#include <string>\n+#include \"tensorflow/core/common_runtime/bfc_allocator.h\"\n+#include \"tensorflow/core/framework/allocator.h\"\n+#include \"tensorflow/core/platform/mem.h\"\n+\n+#include \"third_party/mkl/include/i_malloc.h\"\n+\n+namespace tensorflow {\n+\n+class MklSubAllocator : public SubAllocator {\n+ public:\n+  ~MklSubAllocator() override {}\n+\n+  void* Alloc(size_t alignment, size_t num_bytes) override {\n+    return port::AlignedMalloc(num_bytes, alignment);\n+  }\n+  void Free(void* ptr, size_t num_bytes) override { port::AlignedFree(ptr); }\n+};\n+\n+/// CPU allocator for MKL that wraps BFC allocator and intercepts\n+/// and redirects memory allocation calls from MKL.\n+class MklCPUAllocator : public Allocator {\n+ public:\n+  // Hooks provided by this allocator for memory allocation routines from MKL\n+\n+  static inline void* MallocHook(size_t size) {\n+    VLOG(2) << \"MklCPUAllocator: In MallocHook\";\n+    return cpu_allocator()->AllocateRaw(kAlignment, size);\n+  }\n+\n+  static inline void FreeHook(void* ptr) {\n+    VLOG(2) << \"MklCPUAllocator: In FreeHook\";\n+    cpu_allocator()->DeallocateRaw(ptr);\n+  }\n+\n+  static inline void* CallocHook(size_t num, size_t size) {\n+    Status s = Status(error::Code::UNIMPLEMENTED,\n+                      \"Unimplemented case for hooking MKL function.\");\n+    TF_CHECK_OK(s);  // way to assert with an error message\n+  }\n+\n+  static inline void* ReallocHook(void* ptr, size_t size) {\n+    Status s = Status(error::Code::UNIMPLEMENTED,\n+                      \"Unimplemented case for hooking MKL function.\");\n+    TF_CHECK_OK(s);  // way to assert with an error message\n+  }\n+\n+  // Constructor and other standard functions\n+\n+  MklCPUAllocator() {\n+    VLOG(2) << \"MklCPUAllocator: In MklCPUAllocator\";\n+    allocator_ =\n+        new BFCAllocator(new MklSubAllocator, kMaxMemSize, kAllowGrowth, kName);\n+\n+    // For redirecting all allocations from MKL to this allocator\n+    // From: http://software.intel.com/en-us/node/528565\n+    i_malloc = MallocHook;\n+    i_calloc = CallocHook;\n+    i_realloc = ReallocHook;\n+    i_free = FreeHook;\n+  }\n+\n+  ~MklCPUAllocator() override { delete allocator_; }\n+\n+  inline string Name() override { return kName; }\n+\n+  inline void* AllocateRaw(size_t alignment, size_t num_bytes) override {\n+    return allocator_->AllocateRaw(alignment, num_bytes);\n+  }\n+\n+  inline void DeallocateRaw(void* ptr) override {\n+    allocator_->DeallocateRaw(ptr);\n+  }\n+\n+ private:\n+  // TODO(jbobba): We should ideally move this into CPUOptions in config.proto.\n+  /// Memory limit - 64GB\n+  static const size_t kMaxMemSize =\n+      static_cast<size_t>(64) * 1024 * 1024 * 1024;\n+\n+  /// Do we allow growth in BFC Allocator\n+  static const bool kAllowGrowth = true;\n+\n+  /// Name\n+  static constexpr const char* kName = \"mklcpu\";\n+\n+  /// The alignment that we need for the allocations\n+  static const size_t kAlignment = 64;\n+\n+  Allocator* allocator_;", "path": "tensorflow/core/common_runtime/mkl_cpu_allocator.h", "position": null, "original_position": 113, "commit_id": "4812be7bb14cb4e72df3a8930cb2197ca271df75", "original_commit_id": "1dfca5f9ac657329cb645510a5890a5292cef9cc", "user": {"login": "jbobba", "id": 21375855, "node_id": "MDQ6VXNlcjIxMzc1ODU1", "avatar_url": "https://avatars1.githubusercontent.com/u/21375855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbobba", "html_url": "https://github.com/jbobba", "followers_url": "https://api.github.com/users/jbobba/followers", "following_url": "https://api.github.com/users/jbobba/following{/other_user}", "gists_url": "https://api.github.com/users/jbobba/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbobba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbobba/subscriptions", "organizations_url": "https://api.github.com/users/jbobba/orgs", "repos_url": "https://api.github.com/users/jbobba/repos", "events_url": "https://api.github.com/users/jbobba/events{/privacy}", "received_events_url": "https://api.github.com/users/jbobba/received_events", "type": "User", "site_admin": false}, "body": "Owned by this class. Will add a comment here.", "created_at": "2017-03-10T19:40:18Z", "updated_at": "2017-03-10T23:46:31Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8153#discussion_r105473282", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8153", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/105473282"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8153#discussion_r105473282"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8153"}}, "body_html": "<p>Owned by this class. Will add a comment here.</p>", "body_text": "Owned by this class. Will add a comment here.", "in_reply_to_id": 105463332}