{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22879", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22879/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22879/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22879/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22879", "id": 368918952, "node_id": "MDU6SXNzdWUzNjg5MTg5NTI=", "number": 22879, "title": "Integrating imported graphs into Dataset pipelines", "user": {"login": "matthai", "id": 755774, "node_id": "MDQ6VXNlcjc1NTc3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/755774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthai", "html_url": "https://github.com/matthai", "followers_url": "https://api.github.com/users/matthai/followers", "following_url": "https://api.github.com/users/matthai/following{/other_user}", "gists_url": "https://api.github.com/users/matthai/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthai/subscriptions", "organizations_url": "https://api.github.com/users/matthai/orgs", "repos_url": "https://api.github.com/users/matthai/repos", "events_url": "https://api.github.com/users/matthai/events{/privacy}", "received_events_url": "https://api.github.com/users/matthai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "wt-huang", "id": 42785337, "node_id": "MDQ6VXNlcjQyNzg1MzM3", "avatar_url": "https://avatars0.githubusercontent.com/u/42785337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wt-huang", "html_url": "https://github.com/wt-huang", "followers_url": "https://api.github.com/users/wt-huang/followers", "following_url": "https://api.github.com/users/wt-huang/following{/other_user}", "gists_url": "https://api.github.com/users/wt-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/wt-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wt-huang/subscriptions", "organizations_url": "https://api.github.com/users/wt-huang/orgs", "repos_url": "https://api.github.com/users/wt-huang/repos", "events_url": "https://api.github.com/users/wt-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/wt-huang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wt-huang", "id": 42785337, "node_id": "MDQ6VXNlcjQyNzg1MzM3", "avatar_url": "https://avatars0.githubusercontent.com/u/42785337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wt-huang", "html_url": "https://github.com/wt-huang", "followers_url": "https://api.github.com/users/wt-huang/followers", "following_url": "https://api.github.com/users/wt-huang/following{/other_user}", "gists_url": "https://api.github.com/users/wt-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/wt-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wt-huang/subscriptions", "organizations_url": "https://api.github.com/users/wt-huang/orgs", "repos_url": "https://api.github.com/users/wt-huang/repos", "events_url": "https://api.github.com/users/wt-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/wt-huang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-10-11T01:46:09Z", "updated_at": "2018-11-02T01:38:46Z", "closed_at": "2018-10-16T23:36:36Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nyes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nUbuntu 16.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:<br>\nn/a</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary (pip)</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n1.5.0</li>\n<li><strong>Python version</strong>:<br>\n3.5.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\nNA</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\nNA</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\ncuda 9.0/cudnn 7.0</li>\n<li><strong>GPU model and memory</strong>:<br>\ngtx 1080, 12GB</li>\n<li><strong>Exact command to reproduce</strong></li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I'd like to build parts of my <code>dataset</code> by importing pre-existing graphs. It looks like a way to do this is to import the graph from within a <code>dataset.map</code> operation as in the source code below. But this approach fails with a placeholder-not-mapped error (please see below). I know, e.g., that it is possible to import and stick a graph <em>after</em> the iterator at the end of the dataset. But I'd like to stick them <em>in</em> the dataset pipeline. Is this currently infeasible using datasets, or am I doing something wrong?</p>\n<h3>Source code</h3>\n<p>Here is my minimal source code. It works when <code>USE_GRAPH</code> is set to <code>False</code> and fails (see below for trace) when set to <code>True</code>:</p>\n<pre><code>import tensorflow as tf\nUSE_GRAPH = True\nINT = tf.int64\n\n\ndef sq_fun(x):\n    if USE_GRAPH:\n        g = tf.Graph()\n        with g.as_default() as g:\n            d = tf.placeholder(INT, shape=(), name='d')\n            _ = tf.pow(d, 2, name='e')\n        xx = tf.import_graph_def(\n            g.as_graph_def(),\n            input_map={'d': x},\n            return_elements=['e:0'])\n    else:\n        xx = tf.pow(x, 2, name='e')\n    return xx\n\n\ndataset = tf.data.Dataset.range(10)\ndataset = dataset.map(sq_fun)\nnext_element = dataset.make_one_shot_iterator().get_next()\n\nwith tf.Session() as sess:\n    for i in range(10):\n        value = sess.run(next_element)\n        print(value)\n</code></pre>\n<h3>Error trace</h3>\n<p>Here is the error trace when the above code is run as is (wiith <code>USE_GRAPH</code> set to <code>True</code>):</p>\n<pre><code>(tensorflow) matthai@matthai-z400:~/projects/w4ml/src/python/w4ml$ python test1.py \n/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n  from ._conv import register_converters as _register_converters\n2018-10-10 18:05:42.047846: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2\n2018-10-10 18:05:42.177377: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:895] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n2018-10-10 18:05:42.177855: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1105] Found device 0 with properties: \nname: TITAN X (Pascal) major: 6 minor: 1 memoryClockRate(GHz): 1.531\npciBusID: 0000:0f:00.0\ntotalMemory: 11.90GiB freeMemory: 7.23GiB\n2018-10-10 18:05:42.177883: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1195] Creating TensorFlow device (/device:GPU:0) -&gt; (device: 0, name: TITAN X (Pascal), pci bus id: 0000:0f:00.0, compute capability: 6.1)\n2018-10-10 18:05:42.577441: W tensorflow/core/framework/op_kernel.cc:1198] Invalid argument: You must feed a value for placeholder tensor 'import/d' with dtype int64\n\t [[Node: import/d = Placeholder[dtype=DT_INT64, shape=[]]()]]\nTraceback (most recent call last):\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1350, in _do_call\n    return fn(*args)\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1329, in _run_fn\n    status, run_metadata)\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py\", line 473, in __exit__\n    c_api.TF_GetCode(self.status.status))\ntensorflow.python.framework.errors_impl.InvalidArgumentError: You must feed a value for placeholder tensor 'import/d' with dtype int64\n\t [[Node: import/d = Placeholder[dtype=DT_INT64, shape=[]]()]]\n\t [[Node: IteratorGetNext = IteratorGetNext[output_shapes=[[]], output_types=[DT_INT64], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](OneShotIterator)]]\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"test1.py\", line 28, in &lt;module&gt;\n    value = sess.run(next_element)\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 895, in run\n    run_metadata_ptr)\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1128, in _run\n    feed_dict_tensor, options, run_metadata)\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1344, in _do_run\n    options, run_metadata)\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1363, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: You must feed a value for placeholder tensor 'import/d' with dtype int64\n\t [[Node: import/d = Placeholder[dtype=DT_INT64, shape=[]]()]]\n\t [[Node: IteratorGetNext = IteratorGetNext[output_shapes=[[]], output_types=[DT_INT64], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](OneShotIterator)]]\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nyes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nUbuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nn/a\nTensorFlow installed from (source or binary):\nbinary (pip)\nTensorFlow version (use command below):\n1.5.0\nPython version:\n3.5.5\nBazel version (if compiling from source):\nNA\nGCC/Compiler version (if compiling from source):\nNA\nCUDA/cuDNN version:\ncuda 9.0/cudnn 7.0\nGPU model and memory:\ngtx 1080, 12GB\nExact command to reproduce\n\nDescribe the problem\nI'd like to build parts of my dataset by importing pre-existing graphs. It looks like a way to do this is to import the graph from within a dataset.map operation as in the source code below. But this approach fails with a placeholder-not-mapped error (please see below). I know, e.g., that it is possible to import and stick a graph after the iterator at the end of the dataset. But I'd like to stick them in the dataset pipeline. Is this currently infeasible using datasets, or am I doing something wrong?\nSource code\nHere is my minimal source code. It works when USE_GRAPH is set to False and fails (see below for trace) when set to True:\nimport tensorflow as tf\nUSE_GRAPH = True\nINT = tf.int64\n\n\ndef sq_fun(x):\n    if USE_GRAPH:\n        g = tf.Graph()\n        with g.as_default() as g:\n            d = tf.placeholder(INT, shape=(), name='d')\n            _ = tf.pow(d, 2, name='e')\n        xx = tf.import_graph_def(\n            g.as_graph_def(),\n            input_map={'d': x},\n            return_elements=['e:0'])\n    else:\n        xx = tf.pow(x, 2, name='e')\n    return xx\n\n\ndataset = tf.data.Dataset.range(10)\ndataset = dataset.map(sq_fun)\nnext_element = dataset.make_one_shot_iterator().get_next()\n\nwith tf.Session() as sess:\n    for i in range(10):\n        value = sess.run(next_element)\n        print(value)\n\nError trace\nHere is the error trace when the above code is run as is (wiith USE_GRAPH set to True):\n(tensorflow) matthai@matthai-z400:~/projects/w4ml/src/python/w4ml$ python test1.py \n/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n  from ._conv import register_converters as _register_converters\n2018-10-10 18:05:42.047846: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2\n2018-10-10 18:05:42.177377: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:895] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n2018-10-10 18:05:42.177855: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1105] Found device 0 with properties: \nname: TITAN X (Pascal) major: 6 minor: 1 memoryClockRate(GHz): 1.531\npciBusID: 0000:0f:00.0\ntotalMemory: 11.90GiB freeMemory: 7.23GiB\n2018-10-10 18:05:42.177883: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1195] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: TITAN X (Pascal), pci bus id: 0000:0f:00.0, compute capability: 6.1)\n2018-10-10 18:05:42.577441: W tensorflow/core/framework/op_kernel.cc:1198] Invalid argument: You must feed a value for placeholder tensor 'import/d' with dtype int64\n\t [[Node: import/d = Placeholder[dtype=DT_INT64, shape=[]]()]]\nTraceback (most recent call last):\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1350, in _do_call\n    return fn(*args)\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1329, in _run_fn\n    status, run_metadata)\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py\", line 473, in __exit__\n    c_api.TF_GetCode(self.status.status))\ntensorflow.python.framework.errors_impl.InvalidArgumentError: You must feed a value for placeholder tensor 'import/d' with dtype int64\n\t [[Node: import/d = Placeholder[dtype=DT_INT64, shape=[]]()]]\n\t [[Node: IteratorGetNext = IteratorGetNext[output_shapes=[[]], output_types=[DT_INT64], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](OneShotIterator)]]\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"test1.py\", line 28, in <module>\n    value = sess.run(next_element)\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 895, in run\n    run_metadata_ptr)\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1128, in _run\n    feed_dict_tensor, options, run_metadata)\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1344, in _do_run\n    options, run_metadata)\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1363, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: You must feed a value for placeholder tensor 'import/d' with dtype int64\n\t [[Node: import/d = Placeholder[dtype=DT_INT64, shape=[]]()]]\n\t [[Node: IteratorGetNext = IteratorGetNext[output_shapes=[[]], output_types=[DT_INT64], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](OneShotIterator)]]", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nyes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nUbuntu 16.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\nn/a\r\n- **TensorFlow installed from (source or binary)**:\r\nbinary (pip)\r\n- **TensorFlow version (use command below)**:\r\n1.5.0\r\n- **Python version**:\r\n3.5.5\r\n- **Bazel version (if compiling from source)**:\r\nNA\r\n- **GCC/Compiler version (if compiling from source)**:\r\nNA\r\n- **CUDA/cuDNN version**:\r\ncuda 9.0/cudnn 7.0\r\n- **GPU model and memory**:\r\ngtx 1080, 12GB\r\n- **Exact command to reproduce**\r\n\r\n### Describe the problem\r\nI'd like to build parts of my `dataset` by importing pre-existing graphs. It looks like a way to do this is to import the graph from within a `dataset.map` operation as in the source code below. But this approach fails with a placeholder-not-mapped error (please see below). I know, e.g., that it is possible to import and stick a graph _after_ the iterator at the end of the dataset. But I'd like to stick them _in_ the dataset pipeline. Is this currently infeasible using datasets, or am I doing something wrong?\r\n\r\n### Source code\r\nHere is my minimal source code. It works when `USE_GRAPH` is set to `False` and fails (see below for trace) when set to `True`:\r\n```\r\nimport tensorflow as tf\r\nUSE_GRAPH = True\r\nINT = tf.int64\r\n\r\n\r\ndef sq_fun(x):\r\n    if USE_GRAPH:\r\n        g = tf.Graph()\r\n        with g.as_default() as g:\r\n            d = tf.placeholder(INT, shape=(), name='d')\r\n            _ = tf.pow(d, 2, name='e')\r\n        xx = tf.import_graph_def(\r\n            g.as_graph_def(),\r\n            input_map={'d': x},\r\n            return_elements=['e:0'])\r\n    else:\r\n        xx = tf.pow(x, 2, name='e')\r\n    return xx\r\n\r\n\r\ndataset = tf.data.Dataset.range(10)\r\ndataset = dataset.map(sq_fun)\r\nnext_element = dataset.make_one_shot_iterator().get_next()\r\n\r\nwith tf.Session() as sess:\r\n    for i in range(10):\r\n        value = sess.run(next_element)\r\n        print(value)\r\n```\r\n\r\n### Error trace\r\nHere is the error trace when the above code is run as is (wiith `USE_GRAPH` set to `True`):\r\n\r\n```\r\n(tensorflow) matthai@matthai-z400:~/projects/w4ml/src/python/w4ml$ python test1.py \r\n/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\r\n  from ._conv import register_converters as _register_converters\r\n2018-10-10 18:05:42.047846: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2\r\n2018-10-10 18:05:42.177377: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:895] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\r\n2018-10-10 18:05:42.177855: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1105] Found device 0 with properties: \r\nname: TITAN X (Pascal) major: 6 minor: 1 memoryClockRate(GHz): 1.531\r\npciBusID: 0000:0f:00.0\r\ntotalMemory: 11.90GiB freeMemory: 7.23GiB\r\n2018-10-10 18:05:42.177883: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1195] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: TITAN X (Pascal), pci bus id: 0000:0f:00.0, compute capability: 6.1)\r\n2018-10-10 18:05:42.577441: W tensorflow/core/framework/op_kernel.cc:1198] Invalid argument: You must feed a value for placeholder tensor 'import/d' with dtype int64\r\n\t [[Node: import/d = Placeholder[dtype=DT_INT64, shape=[]]()]]\r\nTraceback (most recent call last):\r\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1350, in _do_call\r\n    return fn(*args)\r\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1329, in _run_fn\r\n    status, run_metadata)\r\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py\", line 473, in __exit__\r\n    c_api.TF_GetCode(self.status.status))\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: You must feed a value for placeholder tensor 'import/d' with dtype int64\r\n\t [[Node: import/d = Placeholder[dtype=DT_INT64, shape=[]]()]]\r\n\t [[Node: IteratorGetNext = IteratorGetNext[output_shapes=[[]], output_types=[DT_INT64], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](OneShotIterator)]]\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"test1.py\", line 28, in <module>\r\n    value = sess.run(next_element)\r\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 895, in run\r\n    run_metadata_ptr)\r\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1128, in _run\r\n    feed_dict_tensor, options, run_metadata)\r\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1344, in _do_run\r\n    options, run_metadata)\r\n  File \"/home/matthai/install/anaconda/anaconda3-4.4.0/envs/tensorflow/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1363, in _do_call\r\n    raise type(e)(node_def, op, message)\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: You must feed a value for placeholder tensor 'import/d' with dtype int64\r\n\t [[Node: import/d = Placeholder[dtype=DT_INT64, shape=[]]()]]\r\n\t [[Node: IteratorGetNext = IteratorGetNext[output_shapes=[[]], output_types=[DT_INT64], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](OneShotIterator)]]\r\n```\r\n\r\n\r\n"}