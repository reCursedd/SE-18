{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/339085196", "html_url": "https://github.com/tensorflow/tensorflow/pull/12798#issuecomment-339085196", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12798", "id": 339085196, "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTA4NTE5Ng==", "user": {"login": "apark263", "id": 3529132, "node_id": "MDQ6VXNlcjM1MjkxMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3529132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apark263", "html_url": "https://github.com/apark263", "followers_url": "https://api.github.com/users/apark263/followers", "following_url": "https://api.github.com/users/apark263/following{/other_user}", "gists_url": "https://api.github.com/users/apark263/gists{/gist_id}", "starred_url": "https://api.github.com/users/apark263/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apark263/subscriptions", "organizations_url": "https://api.github.com/users/apark263/orgs", "repos_url": "https://api.github.com/users/apark263/repos", "events_url": "https://api.github.com/users/apark263/events{/privacy}", "received_events_url": "https://api.github.com/users/apark263/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-24T18:23:06Z", "updated_at": "2017-10-24T18:23:06Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7657273\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/learyg\">@learyg</a>, would it be as simple as changing all <code>StringPiece</code> to <code>std::string</code> and then using</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>string<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>functional<span class=\"pl-pds\">&gt;</span></span>\n\n  <span class=\"pl-k\">struct</span> <span class=\"pl-en\">Hasher</span> {\n    std::hash&lt;std::string&gt; hash_fn_;\n    <span class=\"pl-c1\">size_t</span> <span class=\"pl-en\">operator</span>()(std::string arg) <span class=\"pl-k\">const</span> {\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">hash_fn_</span>(arg);\n    }\n  };\n  <span class=\"pl-k\">using</span> VmoduleMap = std::unordered_map&lt;std::string, <span class=\"pl-k\">int</span>, Hasher&gt;;    </pre></div>\n<p>As far as i can tell, the key constructors used for <code>StringPiece</code> and <code>std::string</code> are compatible (<code>const char*</code> with <code>size_t</code>)</p>", "body_text": "@learyg, would it be as simple as changing all StringPiece to std::string and then using\n#include <string>\n#include <functional>\n\n  struct Hasher {\n    std::hash<std::string> hash_fn_;\n    size_t operator()(std::string arg) const {\n      return hash_fn_(arg);\n    }\n  };\n  using VmoduleMap = std::unordered_map<std::string, int, Hasher>;    \nAs far as i can tell, the key constructors used for StringPiece and std::string are compatible (const char* with size_t)", "body": "@learyg, would it be as simple as changing all `StringPiece` to `std::string` and then using\r\n\r\n```c++\r\n#include <string>\r\n#include <functional>\r\n\r\n  struct Hasher {\r\n    std::hash<std::string> hash_fn_;\r\n    size_t operator()(std::string arg) const {\r\n      return hash_fn_(arg);\r\n    }\r\n  };\r\n  using VmoduleMap = std::unordered_map<std::string, int, Hasher>;    \r\n```\r\n\r\nAs far as i can tell, the key constructors used for `StringPiece` and `std::string` are compatible (`const char*` with `size_t`)\r\n\r\n"}