{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8665", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8665/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8665/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8665/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8665", "id": 216501380, "node_id": "MDU6SXNzdWUyMTY1MDEzODA=", "number": 8665, "title": "freeze_graph not initializing tables", "user": {"login": "sseveran", "id": 449906, "node_id": "MDQ6VXNlcjQ0OTkwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/449906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sseveran", "html_url": "https://github.com/sseveran", "followers_url": "https://api.github.com/users/sseveran/followers", "following_url": "https://api.github.com/users/sseveran/following{/other_user}", "gists_url": "https://api.github.com/users/sseveran/gists{/gist_id}", "starred_url": "https://api.github.com/users/sseveran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sseveran/subscriptions", "organizations_url": "https://api.github.com/users/sseveran/orgs", "repos_url": "https://api.github.com/users/sseveran/repos", "events_url": "https://api.github.com/users/sseveran/events{/privacy}", "received_events_url": "https://api.github.com/users/sseveran/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, {"login": "suharshs", "id": 1450614, "node_id": "MDQ6VXNlcjE0NTA2MTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1450614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/suharshs", "html_url": "https://github.com/suharshs", "followers_url": "https://api.github.com/users/suharshs/followers", "following_url": "https://api.github.com/users/suharshs/following{/other_user}", "gists_url": "https://api.github.com/users/suharshs/gists{/gist_id}", "starred_url": "https://api.github.com/users/suharshs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/suharshs/subscriptions", "organizations_url": "https://api.github.com/users/suharshs/orgs", "repos_url": "https://api.github.com/users/suharshs/repos", "events_url": "https://api.github.com/users/suharshs/events{/privacy}", "received_events_url": "https://api.github.com/users/suharshs/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 34, "created_at": "2017-03-23T17:01:13Z", "updated_at": "2018-07-11T14:55:07Z", "closed_at": "2018-07-11T14:55:07Z", "author_association": "NONE", "body_html": "<p>I am not sure if this is an actual bug or if its expected but undocumented behavior.</p>\n<p>I have a model that uses multiple lookup tables created via string_to_index. I freeze the model like so:<br>\n<code>bazel-bin/tensorflow/python/tools/freeze_graph --input_graph=/tmp/tf/graph.pbtxt  --input_checkpoint=/tmp/tf/model.ckpt-0 --output_graph=/tmp/ticker_classifier.pb  --output_node_names=sigmoid --initializer_nodes=init_all_tables</code></p>\n<p>However when the model is reloaded and I attempt to run it I get an error \"Table not initialized.\" I get exactly the same resulting file whether I specify initializer_nodes or not. The behavior I was expecting was for the model to contain the lookup tables in a ready to use state for inference but I don't know if that is an unreasonable expectation.</p>\n<h3>What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?</h3>\n<p>I have not seen any issues related to this. I previously posted about this here <a href=\"http://stackoverflow.com/questions/42916383/how-to-properly-freeze-a-tensorflow-graph-containing-a-lookuptable\" rel=\"nofollow\">http://stackoverflow.com/questions/42916383/how-to-properly-freeze-a-tensorflow-graph-containing-a-lookuptable</a></p>\n<h3>Environment info</h3>\n<p>Operating System: MacOS and Linux (CentOS 7)</p>\n<p>Installed version of CUDA and cuDNN: None</p>\n<p>If installed from source, provide</p>\n<ol>\n<li>The commit hash (<code>git rev-parse HEAD</code>) <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/07bb8ea2379bd459832b23951fb20ec47f3fdbd4/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/07bb8ea2379bd459832b23951fb20ec47f3fdbd4\"><tt>07bb8ea</tt></a></li>\n<li>Build label: 0.4.5<br>\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar<br>\nBuild time: Thu Mar 16 12:19:38 2017 (1489666778)<br>\nBuild timestamp: 1489666778<br>\nBuild timestamp as int: 1489666778</li>\n</ol>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<p>I have been unable to make a small example but I can spend more time on it if needed.</p>\n<h3>What other attempted solutions have you tried?</h3>\n<p>The workaround is to add init_all_tables to the output_nodes and then run init_all_tables before feeding the session examples for inference. This does have the side effect of needing to distribute the source files for the tables to the same path on all nodes that was originally used for training.</p>", "body_text": "I am not sure if this is an actual bug or if its expected but undocumented behavior.\nI have a model that uses multiple lookup tables created via string_to_index. I freeze the model like so:\nbazel-bin/tensorflow/python/tools/freeze_graph --input_graph=/tmp/tf/graph.pbtxt  --input_checkpoint=/tmp/tf/model.ckpt-0 --output_graph=/tmp/ticker_classifier.pb  --output_node_names=sigmoid --initializer_nodes=init_all_tables\nHowever when the model is reloaded and I attempt to run it I get an error \"Table not initialized.\" I get exactly the same resulting file whether I specify initializer_nodes or not. The behavior I was expecting was for the model to contain the lookup tables in a ready to use state for inference but I don't know if that is an unreasonable expectation.\nWhat related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\nI have not seen any issues related to this. I previously posted about this here http://stackoverflow.com/questions/42916383/how-to-properly-freeze-a-tensorflow-graph-containing-a-lookuptable\nEnvironment info\nOperating System: MacOS and Linux (CentOS 7)\nInstalled version of CUDA and cuDNN: None\nIf installed from source, provide\n\nThe commit hash (git rev-parse HEAD) 07bb8ea\nBuild label: 0.4.5\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\nBuild time: Thu Mar 16 12:19:38 2017 (1489666778)\nBuild timestamp: 1489666778\nBuild timestamp as int: 1489666778\n\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nI have been unable to make a small example but I can spend more time on it if needed.\nWhat other attempted solutions have you tried?\nThe workaround is to add init_all_tables to the output_nodes and then run init_all_tables before feeding the session examples for inference. This does have the side effect of needing to distribute the source files for the tables to the same path on all nodes that was originally used for training.", "body": "I am not sure if this is an actual bug or if its expected but undocumented behavior.\r\n\r\nI have a model that uses multiple lookup tables created via string_to_index. I freeze the model like so:\r\n`bazel-bin/tensorflow/python/tools/freeze_graph --input_graph=/tmp/tf/graph.pbtxt \r\n--input_checkpoint=/tmp/tf/model.ckpt-0 --output_graph=/tmp/ticker_classifier.pb \r\n--output_node_names=sigmoid --initializer_nodes=init_all_tables`\r\n\r\nHowever when the model is reloaded and I attempt to run it I get an error \"Table not initialized.\" I get exactly the same resulting file whether I specify initializer_nodes or not. The behavior I was expecting was for the model to contain the lookup tables in a ready to use state for inference but I don't know if that is an unreasonable expectation.\r\n\r\n### What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\r\n\r\nI have not seen any issues related to this. I previously posted about this here http://stackoverflow.com/questions/42916383/how-to-properly-freeze-a-tensorflow-graph-containing-a-lookuptable\r\n\r\n### Environment info\r\nOperating System: MacOS and Linux (CentOS 7)\r\n\r\nInstalled version of CUDA and cuDNN: None\r\n\r\nIf installed from source, provide \r\n1. The commit hash (`git rev-parse HEAD`) 07bb8ea2379bd459832b23951fb20ec47f3fdbd4\r\n2. Build label: 0.4.5\r\nBuild target: bazel-out/local-fastbuild/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Thu Mar 16 12:19:38 2017 (1489666778)\r\nBuild timestamp: 1489666778\r\nBuild timestamp as int: 1489666778\r\n\r\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\r\n\r\nI have been unable to make a small example but I can spend more time on it if needed.\r\n\r\n### What other attempted solutions have you tried?\r\n\r\nThe workaround is to add init_all_tables to the output_nodes and then run init_all_tables before feeding the session examples for inference. This does have the side effect of needing to distribute the source files for the tables to the same path on all nodes that was originally used for training.\r\n"}