{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/280900346", "html_url": "https://github.com/tensorflow/tensorflow/issues/7624#issuecomment-280900346", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7624", "id": 280900346, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDkwMDM0Ng==", "user": {"login": "Response777", "id": 15152165, "node_id": "MDQ6VXNlcjE1MTUyMTY1", "avatar_url": "https://avatars0.githubusercontent.com/u/15152165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Response777", "html_url": "https://github.com/Response777", "followers_url": "https://api.github.com/users/Response777/followers", "following_url": "https://api.github.com/users/Response777/following{/other_user}", "gists_url": "https://api.github.com/users/Response777/gists{/gist_id}", "starred_url": "https://api.github.com/users/Response777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Response777/subscriptions", "organizations_url": "https://api.github.com/users/Response777/orgs", "repos_url": "https://api.github.com/users/Response777/repos", "events_url": "https://api.github.com/users/Response777/events{/privacy}", "received_events_url": "https://api.github.com/users/Response777/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-19T06:49:32Z", "updated_at": "2017-02-19T06:50:14Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> I'm trying to isolate the difference to an op by writing layers (<a href=\"https://github.com/Response777/Tensorflow-VAEs/blob/master/modules/mnist/cvae/mlp2.py\">module/mnist/cvae/mlp2.py</a>).</p>\n<p>The training procedure runs smoothly, but the sampling procedure is coming across with some problem: they are not sharing variables, even if I have added</p>\n<pre><code># modules/mnist/cvae/mlp2.py class Decoder\nwith tf.variable_scope(self.name) as vs:\n            if reuse == True:\n                vs.reuse_variables()\n</code></pre>\n<p>According to the output of <code>tf.all_variables()</code>, the program have created another decoder named <code>CVAE/Decoder_1</code>, but I have set <code>reuse = True</code> in <code>CVAE::__init__</code>, and the code didn't throw any exception</p>", "body_text": "@yaroslavvb I'm trying to isolate the difference to an op by writing layers (module/mnist/cvae/mlp2.py).\nThe training procedure runs smoothly, but the sampling procedure is coming across with some problem: they are not sharing variables, even if I have added\n# modules/mnist/cvae/mlp2.py class Decoder\nwith tf.variable_scope(self.name) as vs:\n            if reuse == True:\n                vs.reuse_variables()\n\nAccording to the output of tf.all_variables(), the program have created another decoder named CVAE/Decoder_1, but I have set reuse = True in CVAE::__init__, and the code didn't throw any exception", "body": "@yaroslavvb I'm trying to isolate the difference to an op by writing layers ([module/mnist/cvae/mlp2.py](https://github.com/Response777/Tensorflow-VAEs/blob/master/modules/mnist/cvae/mlp2.py)).\r\n\r\nThe training procedure runs smoothly, but the sampling procedure is coming across with some problem: they are not sharing variables, even if I have added\r\n\r\n```\r\n# modules/mnist/cvae/mlp2.py class Decoder\r\nwith tf.variable_scope(self.name) as vs:\r\n            if reuse == True:\r\n                vs.reuse_variables()\r\n```\r\n\r\nAccording to the output of `tf.all_variables()`, the program have created another decoder named `CVAE/Decoder_1`, but I have set `reuse = True` in `CVAE::__init__`, and the code didn't throw any exception"}