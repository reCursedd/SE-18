{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3024", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3024/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3024/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3024/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3024", "id": 162101487, "node_id": "MDU6SXNzdWUxNjIxMDE0ODc=", "number": 3024, "title": "The speed of reading images is unstable.", "user": {"login": "FangxiangFeng", "id": 1214950, "node_id": "MDQ6VXNlcjEyMTQ5NTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1214950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FangxiangFeng", "html_url": "https://github.com/FangxiangFeng", "followers_url": "https://api.github.com/users/FangxiangFeng/followers", "following_url": "https://api.github.com/users/FangxiangFeng/following{/other_user}", "gists_url": "https://api.github.com/users/FangxiangFeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/FangxiangFeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FangxiangFeng/subscriptions", "organizations_url": "https://api.github.com/users/FangxiangFeng/orgs", "repos_url": "https://api.github.com/users/FangxiangFeng/repos", "events_url": "https://api.github.com/users/FangxiangFeng/events{/privacy}", "received_events_url": "https://api.github.com/users/FangxiangFeng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-06-24T08:39:52Z", "updated_at": "2016-10-19T13:35:10Z", "closed_at": "2016-06-28T07:17:15Z", "author_association": "NONE", "body_html": "<p>The speed of reading image is very unstable. This problem troubled me for a long time. Can anyone help me to check the problem.</p>\n<p>The function of the following code is just reading images from several files with tf_recored pattern in the batch method.</p>\n<pre><code>def test_tf_decode_jpeg():\n  with tf.device('/cpu:0'): \n    tf_record_pattern = os.path.join('../anno/train_data_with_history', '*')\n    data_files = tf.gfile.Glob(tf_record_pattern)\n    filename_queue = tf.train.string_input_producer(data_files, shuffle=False, capacity=10)\n    images = []\n    num_preprocess_threads = 4\n    for thread_id in range(num_preprocess_threads):\n      reader = tf.TFRecordReader()\n      _, image = reader.read(filename_queue)\n      image = parse_example_proto(image)\n      image = tf.image.decode_jpeg(image, channels=3)\n      image.set_shape([256,256,3])\n      images.append([image])\n    batch_size = 256\n    image_batch = tf.train.batch_join(images, batch_size=batch_size,capacity=2 * num_preprocess_threads * batch_size)\n  sess = tf.Session()\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(coord=coord, sess=sess)\n  for i in xrange(1000000):\n    if coord.should_stop():\n      break\n    start = time.time()\n    output_images = sess.run(image_batch) \n    print time.time() - start, output_images.shape\n  coord.request_stop()\n  coord.join(threads)\n</code></pre>\n<p>The speed of reading images is very unstable. Here is the running log.<br>\n0.876242160797 (256, 256, 256, 3)<br>\n0.165473937988 (256, 256, 256, 3)<br>\n0.458849906921 (256, 256, 256, 3)<br>\n0.172335863113 (256, 256, 256, 3)<br>\n0.483803033829 (256, 256, 256, 3)<br>\n0.517580032349 (256, 256, 256, 3)<br>\n0.174633979797 (256, 256, 256, 3)<br>\n0.944914102554 (256, 256, 256, 3)<br>\n0.169141054153 (256, 256, 256, 3)<br>\n0.447196006775 (256, 256, 256, 3)<br>\n0.512051820755 (256, 256, 256, 3)<br>\n0.179712057114 (256, 256, 256, 3)<br>\n0.53243303299 (256, 256, 256, 3)<br>\n0.646076917648 (256, 256, 256, 3)<br>\n0.175096988678 (256, 256, 256, 3)<br>\n0.656931877136 (256, 256, 256, 3)<br>\n0.500935077667 (256, 256, 256, 3)<br>\n0.456654071808 (256, 256, 256, 3)<br>\n0.41271686554 (256, 256, 256, 3)<br>\n0.169769048691 (256, 256, 256, 3)<br>\n0.632494926453 (256, 256, 256, 3)<br>\n0.369579076767 (256, 256, 256, 3)<br>\n0.160307168961 (256, 256, 256, 3)<br>\n0.47083902359 (256, 256, 256, 3)<br>\n0.440319061279 (256, 256, 256, 3)<br>\n0.534809827805 (256, 256, 256, 3)<br>\n0.464602947235 (256, 256, 256, 3)<br>\n0.183679103851 (256, 256, 256, 3)<br>\n0.605715990067 (256, 256, 256, 3)<br>\n0.463223934174 (256, 256, 256, 3)<br>\n0.329600095749 (256, 256, 256, 3)<br>\n0.181442975998 (256, 256, 256, 3)<br>\n0.551628112793 (256, 256, 256, 3)<br>\n0.52916097641 (256, 256, 256, 3)<br>\n0.172710180283 (256, 256, 256, 3)<br>\n0.577185153961 (256, 256, 256, 3)</p>\n<p>The utilization of cpu and io is quite low.</p>\n<p>\"cat /proc/cpu\" outputs:<br>\nprocessor       : 39<br>\nvendor_id       : GenuineIntel<br>\ncpu family      : 6<br>\nmodel           : 63<br>\nmodel name      : Intel(R) Xeon(R) CPU E5-2650 v3 @ 2.30GHz</p>", "body_text": "The speed of reading image is very unstable. This problem troubled me for a long time. Can anyone help me to check the problem.\nThe function of the following code is just reading images from several files with tf_recored pattern in the batch method.\ndef test_tf_decode_jpeg():\n  with tf.device('/cpu:0'): \n    tf_record_pattern = os.path.join('../anno/train_data_with_history', '*')\n    data_files = tf.gfile.Glob(tf_record_pattern)\n    filename_queue = tf.train.string_input_producer(data_files, shuffle=False, capacity=10)\n    images = []\n    num_preprocess_threads = 4\n    for thread_id in range(num_preprocess_threads):\n      reader = tf.TFRecordReader()\n      _, image = reader.read(filename_queue)\n      image = parse_example_proto(image)\n      image = tf.image.decode_jpeg(image, channels=3)\n      image.set_shape([256,256,3])\n      images.append([image])\n    batch_size = 256\n    image_batch = tf.train.batch_join(images, batch_size=batch_size,capacity=2 * num_preprocess_threads * batch_size)\n  sess = tf.Session()\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(coord=coord, sess=sess)\n  for i in xrange(1000000):\n    if coord.should_stop():\n      break\n    start = time.time()\n    output_images = sess.run(image_batch) \n    print time.time() - start, output_images.shape\n  coord.request_stop()\n  coord.join(threads)\n\nThe speed of reading images is very unstable. Here is the running log.\n0.876242160797 (256, 256, 256, 3)\n0.165473937988 (256, 256, 256, 3)\n0.458849906921 (256, 256, 256, 3)\n0.172335863113 (256, 256, 256, 3)\n0.483803033829 (256, 256, 256, 3)\n0.517580032349 (256, 256, 256, 3)\n0.174633979797 (256, 256, 256, 3)\n0.944914102554 (256, 256, 256, 3)\n0.169141054153 (256, 256, 256, 3)\n0.447196006775 (256, 256, 256, 3)\n0.512051820755 (256, 256, 256, 3)\n0.179712057114 (256, 256, 256, 3)\n0.53243303299 (256, 256, 256, 3)\n0.646076917648 (256, 256, 256, 3)\n0.175096988678 (256, 256, 256, 3)\n0.656931877136 (256, 256, 256, 3)\n0.500935077667 (256, 256, 256, 3)\n0.456654071808 (256, 256, 256, 3)\n0.41271686554 (256, 256, 256, 3)\n0.169769048691 (256, 256, 256, 3)\n0.632494926453 (256, 256, 256, 3)\n0.369579076767 (256, 256, 256, 3)\n0.160307168961 (256, 256, 256, 3)\n0.47083902359 (256, 256, 256, 3)\n0.440319061279 (256, 256, 256, 3)\n0.534809827805 (256, 256, 256, 3)\n0.464602947235 (256, 256, 256, 3)\n0.183679103851 (256, 256, 256, 3)\n0.605715990067 (256, 256, 256, 3)\n0.463223934174 (256, 256, 256, 3)\n0.329600095749 (256, 256, 256, 3)\n0.181442975998 (256, 256, 256, 3)\n0.551628112793 (256, 256, 256, 3)\n0.52916097641 (256, 256, 256, 3)\n0.172710180283 (256, 256, 256, 3)\n0.577185153961 (256, 256, 256, 3)\nThe utilization of cpu and io is quite low.\n\"cat /proc/cpu\" outputs:\nprocessor       : 39\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 63\nmodel name      : Intel(R) Xeon(R) CPU E5-2650 v3 @ 2.30GHz", "body": "The speed of reading image is very unstable. This problem troubled me for a long time. Can anyone help me to check the problem. \n\nThe function of the following code is just reading images from several files with tf_recored pattern in the batch method.\n\n```\ndef test_tf_decode_jpeg():\n  with tf.device('/cpu:0'): \n    tf_record_pattern = os.path.join('../anno/train_data_with_history', '*')\n    data_files = tf.gfile.Glob(tf_record_pattern)\n    filename_queue = tf.train.string_input_producer(data_files, shuffle=False, capacity=10)\n    images = []\n    num_preprocess_threads = 4\n    for thread_id in range(num_preprocess_threads):\n      reader = tf.TFRecordReader()\n      _, image = reader.read(filename_queue)\n      image = parse_example_proto(image)\n      image = tf.image.decode_jpeg(image, channels=3)\n      image.set_shape([256,256,3])\n      images.append([image])\n    batch_size = 256\n    image_batch = tf.train.batch_join(images, batch_size=batch_size,capacity=2 * num_preprocess_threads * batch_size)\n  sess = tf.Session()\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(coord=coord, sess=sess)\n  for i in xrange(1000000):\n    if coord.should_stop():\n      break\n    start = time.time()\n    output_images = sess.run(image_batch) \n    print time.time() - start, output_images.shape\n  coord.request_stop()\n  coord.join(threads)\n```\n\nThe speed of reading images is very unstable. Here is the running log.\n0.876242160797 (256, 256, 256, 3)\n0.165473937988 (256, 256, 256, 3)\n0.458849906921 (256, 256, 256, 3)\n0.172335863113 (256, 256, 256, 3)\n0.483803033829 (256, 256, 256, 3)\n0.517580032349 (256, 256, 256, 3)\n0.174633979797 (256, 256, 256, 3)\n0.944914102554 (256, 256, 256, 3)\n0.169141054153 (256, 256, 256, 3)\n0.447196006775 (256, 256, 256, 3)\n0.512051820755 (256, 256, 256, 3)\n0.179712057114 (256, 256, 256, 3)\n0.53243303299 (256, 256, 256, 3)\n0.646076917648 (256, 256, 256, 3)\n0.175096988678 (256, 256, 256, 3)\n0.656931877136 (256, 256, 256, 3)\n0.500935077667 (256, 256, 256, 3)\n0.456654071808 (256, 256, 256, 3)\n0.41271686554 (256, 256, 256, 3)\n0.169769048691 (256, 256, 256, 3)\n0.632494926453 (256, 256, 256, 3)\n0.369579076767 (256, 256, 256, 3)\n0.160307168961 (256, 256, 256, 3)\n0.47083902359 (256, 256, 256, 3)\n0.440319061279 (256, 256, 256, 3)\n0.534809827805 (256, 256, 256, 3)\n0.464602947235 (256, 256, 256, 3)\n0.183679103851 (256, 256, 256, 3)\n0.605715990067 (256, 256, 256, 3)\n0.463223934174 (256, 256, 256, 3)\n0.329600095749 (256, 256, 256, 3)\n0.181442975998 (256, 256, 256, 3)\n0.551628112793 (256, 256, 256, 3)\n0.52916097641 (256, 256, 256, 3)\n0.172710180283 (256, 256, 256, 3)\n0.577185153961 (256, 256, 256, 3)\n\nThe utilization of cpu and io is quite low.  \n\n\"cat /proc/cpu\" outputs:\nprocessor       : 39\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 63\nmodel name      : Intel(R) Xeon(R) CPU E5-2650 v3 @ 2.30GHz\n"}