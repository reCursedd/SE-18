{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/394854884", "html_url": "https://github.com/tensorflow/tensorflow/issues/19746#issuecomment-394854884", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19746", "id": 394854884, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDg1NDg4NA==", "user": {"login": "ppwwyyxx", "id": 1381301, "node_id": "MDQ6VXNlcjEzODEzMDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1381301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppwwyyxx", "html_url": "https://github.com/ppwwyyxx", "followers_url": "https://api.github.com/users/ppwwyyxx/followers", "following_url": "https://api.github.com/users/ppwwyyxx/following{/other_user}", "gists_url": "https://api.github.com/users/ppwwyyxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppwwyyxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppwwyyxx/subscriptions", "organizations_url": "https://api.github.com/users/ppwwyyxx/orgs", "repos_url": "https://api.github.com/users/ppwwyyxx/repos", "events_url": "https://api.github.com/users/ppwwyyxx/events{/privacy}", "received_events_url": "https://api.github.com/users/ppwwyyxx/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-05T20:48:18Z", "updated_at": "2018-06-05T20:48:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/397f04acb1faeff451691d7fdc0f754eeb547cc1/tensorflow/python/ops/math_ops.py#L2023-L2036\">tensorflow/tensorflow/python/ops/math_ops.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 2023 to 2036\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/397f04acb1faeff451691d7fdc0f754eeb547cc1\">397f04a</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L2023\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2023\"></td>\n          <td id=\"LC2023\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-en\">@ops.RegisterStatistics</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MatMul<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>flops<span class=\"pl-pds\">\"</span></span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2024\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2024\"></td>\n          <td id=\"LC2024\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">_calc_mat_mul_flops</span>(<span class=\"pl-smi\">graph</span>, <span class=\"pl-smi\">node</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2025\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2025\"></td>\n          <td id=\"LC2025\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Calculates the compute resources needed for MatMul.<span class=\"pl-pds\">\"\"\"</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2026\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2026\"></td>\n          <td id=\"LC2026\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   transpose_a <span class=\"pl-k\">=</span> node.attr[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>transpose_a<span class=\"pl-pds\">\"</span></span>].b </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2027\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2027\"></td>\n          <td id=\"LC2027\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   a_shape <span class=\"pl-k\">=</span> graph_util.tensor_shape_from_node_def_name(graph, node.input[<span class=\"pl-c1\">0</span>]) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2028\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2028\"></td>\n          <td id=\"LC2028\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   a_shape.assert_is_fully_defined() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2029\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2029\"></td>\n          <td id=\"LC2029\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">if</span> transpose_a: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2030\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2030\"></td>\n          <td id=\"LC2030\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     k <span class=\"pl-k\">=</span> <span class=\"pl-c1\">int</span>(a_shape[<span class=\"pl-c1\">0</span>]) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2031\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2031\"></td>\n          <td id=\"LC2031\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">else</span>: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2032\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2032\"></td>\n          <td id=\"LC2032\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     k <span class=\"pl-k\">=</span> <span class=\"pl-c1\">int</span>(a_shape[<span class=\"pl-c1\">1</span>]) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2033\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2033\"></td>\n          <td id=\"LC2033\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   output_shape <span class=\"pl-k\">=</span> graph_util.tensor_shape_from_node_def_name(graph, node.name) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2034\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2034\"></td>\n          <td id=\"LC2034\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   output_shape.assert_is_fully_defined() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2035\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2035\"></td>\n          <td id=\"LC2035\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   output_count <span class=\"pl-k\">=</span> np.prod(output_shape.as_list()) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L2036\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"2036\"></td>\n          <td id=\"LC2036\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">return</span> ops.OpStats(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>flops<span class=\"pl-pds\">\"</span></span>, (k <span class=\"pl-k\">*</span> output_count <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>)) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "tensorflow/tensorflow/python/ops/math_ops.py\n    \n    \n        Lines 2023 to 2036\n      in\n      397f04a\n    \n    \n    \n    \n\n        \n          \n           @ops.RegisterStatistics(\"MatMul\", \"flops\") \n        \n\n        \n          \n           def _calc_mat_mul_flops(graph, node): \n        \n\n        \n          \n             \"\"\"Calculates the compute resources needed for MatMul.\"\"\" \n        \n\n        \n          \n             transpose_a = node.attr[\"transpose_a\"].b \n        \n\n        \n          \n             a_shape = graph_util.tensor_shape_from_node_def_name(graph, node.input[0]) \n        \n\n        \n          \n             a_shape.assert_is_fully_defined() \n        \n\n        \n          \n             if transpose_a: \n        \n\n        \n          \n               k = int(a_shape[0]) \n        \n\n        \n          \n             else: \n        \n\n        \n          \n               k = int(a_shape[1]) \n        \n\n        \n          \n             output_shape = graph_util.tensor_shape_from_node_def_name(graph, node.name) \n        \n\n        \n          \n             output_shape.assert_is_fully_defined() \n        \n\n        \n          \n             output_count = np.prod(output_shape.as_list()) \n        \n\n        \n          \n             return ops.OpStats(\"flops\", (k * output_count * 2))", "body": "https://github.com/tensorflow/tensorflow/blob/397f04acb1faeff451691d7fdc0f754eeb547cc1/tensorflow/python/ops/math_ops.py#L2023-L2036\r\n"}