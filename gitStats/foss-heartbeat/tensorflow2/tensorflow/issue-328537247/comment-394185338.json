{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/394185338", "html_url": "https://github.com/tensorflow/tensorflow/issues/19691#issuecomment-394185338", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19691", "id": 394185338, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDE4NTMzOA==", "user": {"login": "Luonic", "id": 13236173, "node_id": "MDQ6VXNlcjEzMjM2MTcz", "avatar_url": "https://avatars1.githubusercontent.com/u/13236173?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Luonic", "html_url": "https://github.com/Luonic", "followers_url": "https://api.github.com/users/Luonic/followers", "following_url": "https://api.github.com/users/Luonic/following{/other_user}", "gists_url": "https://api.github.com/users/Luonic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Luonic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Luonic/subscriptions", "organizations_url": "https://api.github.com/users/Luonic/orgs", "repos_url": "https://api.github.com/users/Luonic/repos", "events_url": "https://api.github.com/users/Luonic/events{/privacy}", "received_events_url": "https://api.github.com/users/Luonic/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-03T19:29:54Z", "updated_at": "2018-06-03T19:29:54Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1112263\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/facaiy\">@facaiy</a> yes I am expecting scaling of values as written in the docs</p>\n<pre><code>Images that are represented using floating point values are expected to have values in the range [0,1). Image data stored in integer data types are expected to have values in the range [0,MAX], where MAX is the largest positive representable number for the data type.\n\nThis op converts between data types, scaling the values appropriately before casting.\n</code></pre>\n<p>I looked at the source of this function and there is some scaling-related code, but I don't shure that it works at all. Is this intended behavior of this OP? As it looks to me it allows at best only to get rid of <code>tf.cast(to.clip_by_value(image, 0.0, 1.1), tf.uint8)</code> when converting to integers with <code>saturate=True</code><br>\nBTW converting from float to uint8 gave me black images (0, 1) -&gt; (0,255) without scaling result in all zeros.<br>\nAnd there in some inconsistency between tensorboard's image float range and this function (and probably all funcs in tf.image, tensorboard's float images are in (-1,1) range and tf.image works with (0,1).</p>", "body_text": "@facaiy yes I am expecting scaling of values as written in the docs\nImages that are represented using floating point values are expected to have values in the range [0,1). Image data stored in integer data types are expected to have values in the range [0,MAX], where MAX is the largest positive representable number for the data type.\n\nThis op converts between data types, scaling the values appropriately before casting.\n\nI looked at the source of this function and there is some scaling-related code, but I don't shure that it works at all. Is this intended behavior of this OP? As it looks to me it allows at best only to get rid of tf.cast(to.clip_by_value(image, 0.0, 1.1), tf.uint8) when converting to integers with saturate=True\nBTW converting from float to uint8 gave me black images (0, 1) -> (0,255) without scaling result in all zeros.\nAnd there in some inconsistency between tensorboard's image float range and this function (and probably all funcs in tf.image, tensorboard's float images are in (-1,1) range and tf.image works with (0,1).", "body": "@facaiy yes I am expecting scaling of values as written in the docs\r\n```\r\nImages that are represented using floating point values are expected to have values in the range [0,1). Image data stored in integer data types are expected to have values in the range [0,MAX], where MAX is the largest positive representable number for the data type.\r\n\r\nThis op converts between data types, scaling the values appropriately before casting.\r\n```\r\nI looked at the source of this function and there is some scaling-related code, but I don't shure that it works at all. Is this intended behavior of this OP? As it looks to me it allows at best only to get rid of `tf.cast(to.clip_by_value(image, 0.0, 1.1), tf.uint8)` when converting to integers with `saturate=True`\r\nBTW converting from float to uint8 gave me black images (0, 1) -> (0,255) without scaling result in all zeros.\r\nAnd there in some inconsistency between tensorboard's image float range and this function (and probably all funcs in tf.image, tensorboard's float images are in (-1,1) range and tf.image works with (0,1)."}