{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/379476272", "html_url": "https://github.com/tensorflow/tensorflow/issues/17356#issuecomment-379476272", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17356", "id": 379476272, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTQ3NjI3Mg==", "user": {"login": "arthurarg", "id": 8765360, "node_id": "MDQ6VXNlcjg3NjUzNjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8765360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurarg", "html_url": "https://github.com/arthurarg", "followers_url": "https://api.github.com/users/arthurarg/followers", "following_url": "https://api.github.com/users/arthurarg/following{/other_user}", "gists_url": "https://api.github.com/users/arthurarg/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurarg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurarg/subscriptions", "organizations_url": "https://api.github.com/users/arthurarg/orgs", "repos_url": "https://api.github.com/users/arthurarg/repos", "events_url": "https://api.github.com/users/arthurarg/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurarg/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-07T15:10:43Z", "updated_at": "2018-04-07T15:10:43Z", "author_association": "NONE", "body_html": "<p>I probably misunderstand your post but it seems that tf.estimator handles multi-dimension outputs (with labels taking in input a dict for multi-head models) - see tf.estimator.Estimator class definition:</p>\n<p>Args:<br>\nmodel_fn: Model function. Follows the signature:<br>\n* Args:<br>\n* <code>features</code>: This is the first item returned from the <code>input_fn</code><br>\npassed to <code>train</code>, <code>evaluate</code>, and <code>predict</code>. This should be a<br>\nsingle <code>Tensor</code> or <code>dict</code> of same.<br>\n* <code>labels</code>: This is the second item returned from the <code>input_fn</code><br>\npassed to <code>train</code>, <code>evaluate</code>, and <code>predict</code>. This should be a<br>\nsingle <code>Tensor</code> or <code>dict</code> of same (for multi-head models). If<br>\nmode is <code>ModeKeys.PREDICT</code>, <code>labels=None</code> will be passed. If<br>\nthe <code>model_fn</code>'s signature does not accept <code>mode</code>, the<br>\n<code>model_fn</code> must still be able to handle <code>labels=None</code>.<br>\n* <code>mode</code>: Optional. Specifies if this training, evaluation or<br>\nprediction. See <code>ModeKeys</code>.<br>\n* <code>params</code>: Optional <code>dict</code> of hyperparameters.  Will receive what<br>\nis passed to Estimator in <code>params</code> parameter. This allows<br>\nto configure Estimators from hyper parameter tuning.<br>\n* <code>config</code>: Optional configuration object. Will receive what is passed<br>\nto Estimator in <code>config</code> parameter, or the default <code>config</code>.<br>\nAllows updating things in your model_fn based on configuration<br>\nsuch as <code>num_ps_replicas</code>, or <code>model_dir</code>.</p>", "body_text": "I probably misunderstand your post but it seems that tf.estimator handles multi-dimension outputs (with labels taking in input a dict for multi-head models) - see tf.estimator.Estimator class definition:\nArgs:\nmodel_fn: Model function. Follows the signature:\n* Args:\n* features: This is the first item returned from the input_fn\npassed to train, evaluate, and predict. This should be a\nsingle Tensor or dict of same.\n* labels: This is the second item returned from the input_fn\npassed to train, evaluate, and predict. This should be a\nsingle Tensor or dict of same (for multi-head models). If\nmode is ModeKeys.PREDICT, labels=None will be passed. If\nthe model_fn's signature does not accept mode, the\nmodel_fn must still be able to handle labels=None.\n* mode: Optional. Specifies if this training, evaluation or\nprediction. See ModeKeys.\n* params: Optional dict of hyperparameters.  Will receive what\nis passed to Estimator in params parameter. This allows\nto configure Estimators from hyper parameter tuning.\n* config: Optional configuration object. Will receive what is passed\nto Estimator in config parameter, or the default config.\nAllows updating things in your model_fn based on configuration\nsuch as num_ps_replicas, or model_dir.", "body": "I probably misunderstand your post but it seems that tf.estimator handles multi-dimension outputs (with labels taking in input a dict for multi-head models) - see tf.estimator.Estimator class definition:\r\n \r\nArgs:\r\n      model_fn: Model function. Follows the signature:\r\n        * Args:\r\n          * `features`: This is the first item returned from the `input_fn`\r\n                 passed to `train`, `evaluate`, and `predict`. This should be a\r\n                 single `Tensor` or `dict` of same.\r\n          * `labels`: This is the second item returned from the `input_fn`\r\n                 passed to `train`, `evaluate`, and `predict`. This should be a\r\n                 single `Tensor` or `dict` of same (for multi-head models). If\r\n                 mode is `ModeKeys.PREDICT`, `labels=None` will be passed. If\r\n                 the `model_fn`'s signature does not accept `mode`, the\r\n                 `model_fn` must still be able to handle `labels=None`.\r\n          * `mode`: Optional. Specifies if this training, evaluation or\r\n                 prediction. See `ModeKeys`.\r\n          * `params`: Optional `dict` of hyperparameters.  Will receive what\r\n                 is passed to Estimator in `params` parameter. This allows\r\n                 to configure Estimators from hyper parameter tuning.\r\n          * `config`: Optional configuration object. Will receive what is passed\r\n                 to Estimator in `config` parameter, or the default `config`.\r\n                 Allows updating things in your model_fn based on configuration\r\n                 such as `num_ps_replicas`, or `model_dir`."}