{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/223588937", "html_url": "https://github.com/tensorflow/tensorflow/issues/2637#issuecomment-223588937", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2637", "id": 223588937, "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzU4ODkzNw==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-03T14:10:10Z", "updated_at": "2016-06-03T14:10:10Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The problem is in this line:</p>\n<div class=\"highlight highlight-source-python\"><pre>grad_vars <span class=\"pl-k\">=</span> [tf.Variable(tf.zeros_like(_)) <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> tf.trainable_variables()]</pre></div>\n<p>If you initialize a variable from (something derived from) another variable, you need to use the <a href=\"https://www.tensorflow.org/versions/r0.8/api_docs/python/state_ops.html#Variable.initialized_value\" rel=\"nofollow\"><code>Variable.initialized_value()</code></a> method to tell TensorFlow about the ordering dependency when running the initializers. So your line should look like:</p>\n<div class=\"highlight highlight-source-python\"><pre>grad_vars <span class=\"pl-k\">=</span> [tf.Variable(tf.zeros_like(v.initialized_value())) <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> tf.trainable_variables()]</pre></div>\n<p>Note though that your <code>grad_vars</code> don't really depend on the <em>value</em> of the trainable variables, and the trainable variables all have static shapes, so you could alternatively solve this with the following:</p>\n<div class=\"highlight highlight-source-python\"><pre>grad_vars <span class=\"pl-k\">=</span> [tf.Variable(tf.zeros(v.get_shape())) <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> tf.trainable_variables()]</pre></div>", "body_text": "The problem is in this line:\ngrad_vars = [tf.Variable(tf.zeros_like(_)) for _ in tf.trainable_variables()]\nIf you initialize a variable from (something derived from) another variable, you need to use the Variable.initialized_value() method to tell TensorFlow about the ordering dependency when running the initializers. So your line should look like:\ngrad_vars = [tf.Variable(tf.zeros_like(v.initialized_value())) for v in tf.trainable_variables()]\nNote though that your grad_vars don't really depend on the value of the trainable variables, and the trainable variables all have static shapes, so you could alternatively solve this with the following:\ngrad_vars = [tf.Variable(tf.zeros(v.get_shape())) for v in tf.trainable_variables()]", "body": "The problem is in this line:\n\n``` python\ngrad_vars = [tf.Variable(tf.zeros_like(_)) for _ in tf.trainable_variables()]\n```\n\nIf you initialize a variable from (something derived from) another variable, you need to use the [`Variable.initialized_value()`](https://www.tensorflow.org/versions/r0.8/api_docs/python/state_ops.html#Variable.initialized_value) method to tell TensorFlow about the ordering dependency when running the initializers. So your line should look like:\n\n``` python\ngrad_vars = [tf.Variable(tf.zeros_like(v.initialized_value())) for v in tf.trainable_variables()]\n```\n\nNote though that your `grad_vars` don't really depend on the _value_ of the trainable variables, and the trainable variables all have static shapes, so you could alternatively solve this with the following:\n\n``` python\ngrad_vars = [tf.Variable(tf.zeros(v.get_shape())) for v in tf.trainable_variables()]\n```\n"}