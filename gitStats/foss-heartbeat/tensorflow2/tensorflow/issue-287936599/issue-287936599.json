{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16052", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16052/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16052/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16052/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16052", "id": 287936599, "node_id": "MDU6SXNzdWUyODc5MzY1OTk=", "number": 16052, "title": "Feature Request: Setting the shape of a tf.data.Dataset if it cannot be inferred", "user": {"login": "ankitvgupta", "id": 5473865, "node_id": "MDQ6VXNlcjU0NzM4NjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5473865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ankitvgupta", "html_url": "https://github.com/ankitvgupta", "followers_url": "https://api.github.com/users/ankitvgupta/followers", "following_url": "https://api.github.com/users/ankitvgupta/following{/other_user}", "gists_url": "https://api.github.com/users/ankitvgupta/gists{/gist_id}", "starred_url": "https://api.github.com/users/ankitvgupta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ankitvgupta/subscriptions", "organizations_url": "https://api.github.com/users/ankitvgupta/orgs", "repos_url": "https://api.github.com/users/ankitvgupta/repos", "events_url": "https://api.github.com/users/ankitvgupta/events{/privacy}", "received_events_url": "https://api.github.com/users/ankitvgupta/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586558, "node_id": "MDU6TGFiZWw0MDQ1ODY1NTg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:community%20support", "name": "stat:community support", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-01-11T21:52:14Z", "updated_at": "2018-08-18T10:33:35Z", "closed_at": "2018-04-06T02:51:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hello, I have really liked the new <code>tf.data.Dataset</code> api, and had a feature request.<br>\nI need to often make data transformations that require third-party libraries, and use <code>Dataset.map</code> along with a <code>tf.py_func</code> command as shown in the Importing Data tutorial. In the process of doing this, Tensorflow is not able to infer the shape of the numpy arrays that are returned by the py_func-based functions, and so the output_shapes attribute of the dataset returns something like <code>(TensorShape(None), TensorShape(None), TensorShape(None), TensorShape(None), TensorShape(None))</code></p>\n<p>To address this, I have been adding a new map function after that calls set_shape on each tensor to enforce the shape requirement. For example, I have code that looks something like this:</p>\n<pre><code>dataset = dataset.map(lambda strings, labels: tuple(tf.py_func(_featurize, [strs, labels], [tf.int32, tf.float64, tf.int32, tf.int32, labels.dtype])))\ndataset = dataset.map(_set_shapes)\n</code></pre>\n<p>where</p>\n<pre><code>def _set_shapes(af, pf, split, atp, labels):\n    af.set_shape([None, 75])\n    pf.set_shape([None, 14])\n    split.set_shape([None, ])\n    atp.set_shape([None, 2])\n    labels.set_shape([None, ])\n    return af, pf, split, atp, labels\n</code></pre>\n<p>Could this be simplified by adding a new <code>tf.data.Dataset</code> member function called \"set_dataset_shape\" which essentially just implements the above _set_shapes method?</p>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: AWS Deep Learning AMI</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: AWS Deep Learning AMI-based</li>\n<li><strong>GPU model and memory</strong>: NVIDIA K80</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>", "body_text": "Hello, I have really liked the new tf.data.Dataset api, and had a feature request.\nI need to often make data transformations that require third-party libraries, and use Dataset.map along with a tf.py_func command as shown in the Importing Data tutorial. In the process of doing this, Tensorflow is not able to infer the shape of the numpy arrays that are returned by the py_func-based functions, and so the output_shapes attribute of the dataset returns something like (TensorShape(None), TensorShape(None), TensorShape(None), TensorShape(None), TensorShape(None))\nTo address this, I have been adding a new map function after that calls set_shape on each tensor to enforce the shape requirement. For example, I have code that looks something like this:\ndataset = dataset.map(lambda strings, labels: tuple(tf.py_func(_featurize, [strs, labels], [tf.int32, tf.float64, tf.int32, tf.int32, labels.dtype])))\ndataset = dataset.map(_set_shapes)\n\nwhere\ndef _set_shapes(af, pf, split, atp, labels):\n    af.set_shape([None, 75])\n    pf.set_shape([None, 14])\n    split.set_shape([None, ])\n    atp.set_shape([None, 2])\n    labels.set_shape([None, ])\n    return af, pf, split, atp, labels\n\nCould this be simplified by adding a new tf.data.Dataset member function called \"set_dataset_shape\" which essentially just implements the above _set_shapes method?\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from (source or binary): AWS Deep Learning AMI\nTensorFlow version (use command below): 1.4\nPython version: 3.6\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: AWS Deep Learning AMI-based\nGPU model and memory: NVIDIA K80\nExact command to reproduce: N/A", "body": "Hello, I have really liked the new `tf.data.Dataset` api, and had a feature request. \r\nI need to often make data transformations that require third-party libraries, and use `Dataset.map` along with a `tf.py_func` command as shown in the Importing Data tutorial. In the process of doing this, Tensorflow is not able to infer the shape of the numpy arrays that are returned by the py_func-based functions, and so the output_shapes attribute of the dataset returns something like `(TensorShape(None), TensorShape(None), TensorShape(None), TensorShape(None), TensorShape(None))`\r\n\r\nTo address this, I have been adding a new map function after that calls set_shape on each tensor to enforce the shape requirement. For example, I have code that looks something like this:\r\n\r\n```\r\ndataset = dataset.map(lambda strings, labels: tuple(tf.py_func(_featurize, [strs, labels], [tf.int32, tf.float64, tf.int32, tf.int32, labels.dtype])))\r\ndataset = dataset.map(_set_shapes)\r\n```\r\nwhere \r\n```\r\ndef _set_shapes(af, pf, split, atp, labels):\r\n    af.set_shape([None, 75])\r\n    pf.set_shape([None, 14])\r\n    split.set_shape([None, ])\r\n    atp.set_shape([None, 2])\r\n    labels.set_shape([None, ])\r\n    return af, pf, split, atp, labels\r\n```\r\n\r\nCould this be simplified by adding a new `tf.data.Dataset` member function called \"set_dataset_shape\" which essentially just implements the above _set_shapes method?\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: AWS Deep Learning AMI\r\n- **TensorFlow version (use command below)**: 1.4\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: AWS Deep Learning AMI-based\r\n- **GPU model and memory**: NVIDIA K80\r\n- **Exact command to reproduce**: N/A\r\n\r\n"}