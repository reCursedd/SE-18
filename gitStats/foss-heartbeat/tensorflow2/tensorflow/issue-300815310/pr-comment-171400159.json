{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/171400159", "pull_request_review_id": 100236678, "id": 171400159, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTQwMDE1OQ==", "diff_hunk": "@@ -0,0 +1,134 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/contrib/tensorrt/kernels/trt_calib_op.h\"\n+#include \"tensorflow/contrib/tensorrt/resources/TRTInt8Calibrator.h\"\n+#include \"tensorflow/contrib/tensorrt/resources/TRTResourceManager.h\"\n+#include \"tensorflow/contrib/tensorrt/resources/TRTResources.h\"\n+#include \"tensorflow/core/framework/node_def.pb.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/framework/tensor_types.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+\n+#if GOOGLE_CUDA\n+#if GOOGLE_TENSORRT\n+#include \"cuda_runtime_api.h\"\n+#include \"tensorrt/include/NvInfer.h\"\n+\n+namespace tensorflow {\n+namespace trt {\n+TRTCalibOp::TRTCalibOp(OpKernelConstruction* context) : OpKernel(context) {\n+  OP_REQUIRES_OK(context, context->GetAttr(\"segment_nodes\", &segment_nodes_));\n+  OP_REQUIRES_OK(context, context->GetAttr(\"input_names\", &input_names_));\n+  OP_REQUIRES_OK(context, context->GetAttr(\"resource_name\", &resource_name_));\n+};\n+\n+//  case statement for type\n+#define TYPECASE(dt, X, Y)                                             \\\n+  case dt: {                                                           \\\n+    Y = (void*)X->flat<tensorflow::EnumToDataType<dt>::Type>().data(); \\\n+    break;                                                             \\\n+  }\n+\n+// macro to get tensor data address pointed by tensor_ptr into\n+// void* dest_ptr\n+#define GET_TENSOR_ADDRESS(tensor_ptr, dest_ptr)               \\\n+  {                                                            \\\n+    auto TENSOR_TYPE = tensor_ptr->dtype();                    \\\n+    switch (TENSOR_TYPE) {                                     \\\n+      TYPECASE(tensorflow::DT_FLOAT, tensor_ptr, dest_ptr);    \\\n+      TYPECASE(tensorflow::DT_HALF, tensor_ptr, dest_ptr);     \\\n+      TYPECASE(tensorflow::DT_INT8, tensor_ptr, dest_ptr);     \\\n+      default: {                                               \\\n+        LOG(FATAL) << \"Unsupported Data type \"                 \\\n+                   << tensorflow::DataTypeString(TENSOR_TYPE); \\\n+        break;                                                 \\\n+      }                                                        \\\n+    }                                                          \\\n+  }\n+\n+void TRTCalibOp::Compute(tensorflow::OpKernelContext* ctx) {\n+  auto trt_rm = tensorflow::trt::TRTResourceManager::instance();\n+  auto resmgr = trt_rm->getManager(\"TRTCalibOps\");", "path": "tensorflow/contrib/tensorrt/kernels/trt_calib_op.cc", "position": null, "original_position": 65, "commit_id": "5e5671e692db0533dfec66d63b8e7c8d06bc4942", "original_commit_id": "811c5ebd9510d723217363fffcb258126bec3ea2", "user": {"login": "aaroey", "id": 31743510, "node_id": "MDQ6VXNlcjMxNzQzNTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31743510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaroey", "html_url": "https://github.com/aaroey", "followers_url": "https://api.github.com/users/aaroey/followers", "following_url": "https://api.github.com/users/aaroey/following{/other_user}", "gists_url": "https://api.github.com/users/aaroey/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaroey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaroey/subscriptions", "organizations_url": "https://api.github.com/users/aaroey/orgs", "repos_url": "https://api.github.com/users/aaroey/repos", "events_url": "https://api.github.com/users/aaroey/events{/privacy}", "received_events_url": "https://api.github.com/users/aaroey/received_events", "type": "User", "site_admin": false}, "body": "Ok, please add a TODO then. :)\r\nA question regarding the conversion: why did you say during the conversion we don't have access to the context? Isn't the conversion done here inside OpKernel::Compute(ctx)?", "created_at": "2018-02-28T22:03:07Z", "updated_at": "2018-03-01T22:59:18Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/17309#discussion_r171400159", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17309", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/171400159"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/17309#discussion_r171400159"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/17309"}}, "body_html": "<p>Ok, please add a TODO then. :)<br>\nA question regarding the conversion: why did you say during the conversion we don't have access to the context? Isn't the conversion done here inside OpKernel::Compute(ctx)?</p>", "body_text": "Ok, please add a TODO then. :)\nA question regarding the conversion: why did you say during the conversion we don't have access to the context? Isn't the conversion done here inside OpKernel::Compute(ctx)?", "in_reply_to_id": 171344108}