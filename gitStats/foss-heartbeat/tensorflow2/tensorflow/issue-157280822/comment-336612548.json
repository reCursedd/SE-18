{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/336612548", "html_url": "https://github.com/tensorflow/tensorflow/issues/2540#issuecomment-336612548", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2540", "id": 336612548, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjYxMjU0OA==", "user": {"login": "anishathalye", "id": 3526486, "node_id": "MDQ6VXNlcjM1MjY0ODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3526486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anishathalye", "html_url": "https://github.com/anishathalye", "followers_url": "https://api.github.com/users/anishathalye/followers", "following_url": "https://api.github.com/users/anishathalye/following{/other_user}", "gists_url": "https://api.github.com/users/anishathalye/gists{/gist_id}", "starred_url": "https://api.github.com/users/anishathalye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anishathalye/subscriptions", "organizations_url": "https://api.github.com/users/anishathalye/orgs", "repos_url": "https://api.github.com/users/anishathalye/repos", "events_url": "https://api.github.com/users/anishathalye/events{/privacy}", "received_events_url": "https://api.github.com/users/anishathalye/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-14T05:53:54Z", "updated_at": "2017-10-14T06:06:37Z", "author_association": "NONE", "body_html": "<p>In case anyone else comes across this looking for a solution... here's another way to work around this issue (implementing what Tim was doing in the original post):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nx <span class=\"pl-k\">=</span> tf.placeholder(tf.float32)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> y = tf.where(x &gt; 0, 0., tf.exp(x))</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> trick: we're not using the result of safe_exp when x &gt; 0, so we can</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> substitute a safe value for x in that case</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> it doesn't really matter what we put in here, as long as the backward pass</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> returns some finite value</span>\nsafe_exp <span class=\"pl-k\">=</span> tf.exp(tf.where(x <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1.0</span>, x))\ny <span class=\"pl-k\">=</span> tf.where(x <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>., safe_exp)\n\nz, <span class=\"pl-k\">=</span> tf.gradients(y, x)\n\nsess <span class=\"pl-k\">=</span> tf.InteractiveSession()\nyv, zv <span class=\"pl-k\">=</span> sess.run([y, z], {x: <span class=\"pl-c1\">1e10</span>})\n<span class=\"pl-c1\">print</span>(yv) <span class=\"pl-c\"><span class=\"pl-c\">#</span> correctly outputs 0</span>\n<span class=\"pl-c1\">print</span>(zv) <span class=\"pl-c\"><span class=\"pl-c\">#</span> now correctly outputs 0</span>\n\nyv, zv <span class=\"pl-k\">=</span> sess.run([y, z], {x: <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>})\n<span class=\"pl-c1\">print</span>(yv) <span class=\"pl-c\"><span class=\"pl-c\">#</span> correctly outputs e^(-1)</span>\n<span class=\"pl-c1\">print</span>(zv) <span class=\"pl-c\"><span class=\"pl-c\">#</span> correctly outputs e^(-1)</span></pre></div>", "body_text": "In case anyone else comes across this looking for a solution... here's another way to work around this issue (implementing what Tim was doing in the original post):\nimport tensorflow as tf\n\nx = tf.placeholder(tf.float32)\n# y = tf.where(x > 0, 0., tf.exp(x))\n\n# trick: we're not using the result of safe_exp when x > 0, so we can\n# substitute a safe value for x in that case\n# it doesn't really matter what we put in here, as long as the backward pass\n# returns some finite value\nsafe_exp = tf.exp(tf.where(x > 0, 1.0, x))\ny = tf.where(x > 0, 0., safe_exp)\n\nz, = tf.gradients(y, x)\n\nsess = tf.InteractiveSession()\nyv, zv = sess.run([y, z], {x: 1e10})\nprint(yv) # correctly outputs 0\nprint(zv) # now correctly outputs 0\n\nyv, zv = sess.run([y, z], {x: -1})\nprint(yv) # correctly outputs e^(-1)\nprint(zv) # correctly outputs e^(-1)", "body": "In case anyone else comes across this looking for a solution... here's another way to work around this issue (implementing what Tim was doing in the original post):\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nx = tf.placeholder(tf.float32)\r\n# y = tf.where(x > 0, 0., tf.exp(x))\r\n\r\n# trick: we're not using the result of safe_exp when x > 0, so we can\r\n# substitute a safe value for x in that case\r\n# it doesn't really matter what we put in here, as long as the backward pass\r\n# returns some finite value\r\nsafe_exp = tf.exp(tf.where(x > 0, 1.0, x))\r\ny = tf.where(x > 0, 0., safe_exp)\r\n\r\nz, = tf.gradients(y, x)\r\n\r\nsess = tf.InteractiveSession()\r\nyv, zv = sess.run([y, z], {x: 1e10})\r\nprint(yv) # correctly outputs 0\r\nprint(zv) # now correctly outputs 0\r\n\r\nyv, zv = sess.run([y, z], {x: -1})\r\nprint(yv) # correctly outputs e^(-1)\r\nprint(zv) # correctly outputs e^(-1)\r\n```"}