{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/349236209", "html_url": "https://github.com/tensorflow/tensorflow/issues/15115#issuecomment-349236209", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15115", "id": 349236209, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTIzNjIwOQ==", "user": {"login": "secsilm", "id": 8894643, "node_id": "MDQ6VXNlcjg4OTQ2NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/8894643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/secsilm", "html_url": "https://github.com/secsilm", "followers_url": "https://api.github.com/users/secsilm/followers", "following_url": "https://api.github.com/users/secsilm/following{/other_user}", "gists_url": "https://api.github.com/users/secsilm/gists{/gist_id}", "starred_url": "https://api.github.com/users/secsilm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/secsilm/subscriptions", "organizations_url": "https://api.github.com/users/secsilm/orgs", "repos_url": "https://api.github.com/users/secsilm/repos", "events_url": "https://api.github.com/users/secsilm/events{/privacy}", "received_events_url": "https://api.github.com/users/secsilm/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-05T08:48:48Z", "updated_at": "2017-12-05T08:48:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p>But <strong>the result in evaluation mode is correct while wrong in train mode</strong>. I'm using <code>tf.estimator</code> and <code>tf.data.TFRecordDataset</code>. The following are relative codes.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">cifar_model_fn</span>(<span class=\"pl-smi\">features</span>, <span class=\"pl-smi\">labels</span>, <span class=\"pl-smi\">mode</span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> some other codes</span>\n\n    logits <span class=\"pl-k\">=</span> tf.layers.dense(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>dropout, <span class=\"pl-v\">units</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>)\n    predictions <span class=\"pl-k\">=</span> {\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>classes<span class=\"pl-pds\">'</span></span>: tf.argmax(<span class=\"pl-v\">input</span><span class=\"pl-k\">=</span>logits, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>classes<span class=\"pl-pds\">'</span></span>),\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>probabilities<span class=\"pl-pds\">'</span></span>: tf.nn.softmax(logits, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>softmax_tensor<span class=\"pl-pds\">'</span></span>)\n    }\n    onehot_labels <span class=\"pl-k\">=</span> tf.one_hot(<span class=\"pl-v\">indices</span><span class=\"pl-k\">=</span>tf.cast(labels, tf.int32), <span class=\"pl-v\">depth</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>)\n    loss <span class=\"pl-k\">=</span> tf.losses.softmax_cross_entropy(onehot_labels, logits)\n    accuracy, update_op <span class=\"pl-k\">=</span> tf.metrics.accuracy(<span class=\"pl-v\">labels</span><span class=\"pl-k\">=</span>labels, <span class=\"pl-v\">predictions</span><span class=\"pl-k\">=</span>predictions[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>classes<span class=\"pl-pds\">'</span></span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>accuracy<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> my way to compute accuracy, which gives correct result when training</span>\n    my_acc <span class=\"pl-k\">=</span> tf.reduce_mean(tf.cast(tf.equal(tf.cast(labels, tf.int64), predictions[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>classes<span class=\"pl-pds\">'</span></span>]), tf.float32))\n\n    <span class=\"pl-k\">if</span> mode <span class=\"pl-k\">==</span> tf.estimator.ModeKeys.<span class=\"pl-c1\">TRAIN</span>:\n        tensors_to_log <span class=\"pl-k\">=</span> {\n            <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Accuracy<span class=\"pl-pds\">'</span></span>: accuracy,\n            <span class=\"pl-s\"><span class=\"pl-pds\">'</span>My accuracy<span class=\"pl-pds\">'</span></span>: my_acc}\n        logging_hook <span class=\"pl-k\">=</span> tf.train.LoggingTensorHook(<span class=\"pl-v\">tensors</span><span class=\"pl-k\">=</span>tensors_to_log, <span class=\"pl-v\">every_n_iter</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">100</span>)\n        optimizer <span class=\"pl-k\">=</span> tf.train.AdamOptimizer(<span class=\"pl-v\">learning_rate</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">FLAGS</span>.learning_rate)\n        train_op <span class=\"pl-k\">=</span> optimizer.minimize(<span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>loss, <span class=\"pl-v\">global_step</span><span class=\"pl-k\">=</span>tf.train.get_global_step())\n        <span class=\"pl-k\">return</span> tf.estimator.EstimatorSpec(<span class=\"pl-v\">mode</span><span class=\"pl-k\">=</span>mode, <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>loss, <span class=\"pl-v\">train_op</span><span class=\"pl-k\">=</span>train_op, <span class=\"pl-v\">training_hooks</span><span class=\"pl-k\">=</span>[logging_hook])\n\n    eval_metric_ops <span class=\"pl-k\">=</span> {\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>accuracy<span class=\"pl-pds\">'</span></span>: (accuracy, update_op)\n    }\n    <span class=\"pl-k\">return</span> tf.estimator.EstimatorSpec(<span class=\"pl-v\">mode</span><span class=\"pl-k\">=</span>mode, <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>loss, <span class=\"pl-v\">eval_metric_ops</span><span class=\"pl-k\">=</span>eval_metric_ops)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>():\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> create dataset ....</span>\n\n    cifar10_classifier <span class=\"pl-k\">=</span> tf.estimator.Estimator(<span class=\"pl-v\">model_fn</span><span class=\"pl-k\">=</span>cifar_model_fn, <span class=\"pl-v\">model_dir</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">FLAGS</span>.model_dir)\n    cifar10_classifier.train(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>train_input_fn)\n    eval_results <span class=\"pl-k\">=</span> cifar10_classifier.evaluate(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>eval_input_fn)</pre></div>\n<p>My purpose is to log training accuracy when training. The following is a part of the console output. <code>Accuracy</code> is <strong>always</strong> 0.0.</p>\n<pre><code>INFO:tensorflow:loss = 1.08232, step = 7301 (9.312 sec)\nINFO:tensorflow:My accuracy = 0.59375, Accuracy = 0.0 (9.311 sec)\nINFO:tensorflow:global_step/sec: 10.8054\nINFO:tensorflow:loss = 1.29713, step = 7401 (9.257 sec)\nINFO:tensorflow:My accuracy = 0.484375, Accuracy = 0.0 (9.256 sec)\nINFO:tensorflow:global_step/sec: 11.4928\nINFO:tensorflow:loss = 1.31355, step = 7501 (8.693 sec)\nINFO:tensorflow:My accuracy = 0.578125, Accuracy = 0.0 (8.693 sec)\nINFO:tensorflow:global_step/sec: 12.1267\nINFO:tensorflow:loss = 1.25855, step = 7601 (8.252 sec)\nINFO:tensorflow:My accuracy = 0.515625, Accuracy = 0.0 (8.254 sec)\nINFO:tensorflow:global_step/sec: 12.0489\nINFO:tensorflow:loss = 1.21857, step = 7701 (8.303 sec)\nINFO:tensorflow:My accuracy = 0.5625, Accuracy = 0.0 (8.304 sec)\nINFO:tensorflow:global_step/sec: 12.1971\nINFO:tensorflow:loss = 0.983289, step = 7801 (8.196 sec)\nINFO:tensorflow:My accuracy = 0.6875, Accuracy = 0.0 (8.195 sec)\n</code></pre>", "body_text": "But the result in evaluation mode is correct while wrong in train mode. I'm using tf.estimator and tf.data.TFRecordDataset. The following are relative codes.\ndef cifar_model_fn(features, labels, mode):\n    # some other codes\n\n    logits = tf.layers.dense(inputs=dropout, units=10)\n    predictions = {\n        'classes': tf.argmax(input=logits, axis=1, name='classes'),\n        'probabilities': tf.nn.softmax(logits, name='softmax_tensor')\n    }\n    onehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=10)\n    loss = tf.losses.softmax_cross_entropy(onehot_labels, logits)\n    accuracy, update_op = tf.metrics.accuracy(labels=labels, predictions=predictions['classes'], name='accuracy')\n    # my way to compute accuracy, which gives correct result when training\n    my_acc = tf.reduce_mean(tf.cast(tf.equal(tf.cast(labels, tf.int64), predictions['classes']), tf.float32))\n\n    if mode == tf.estimator.ModeKeys.TRAIN:\n        tensors_to_log = {\n            'Accuracy': accuracy,\n            'My accuracy': my_acc}\n        logging_hook = tf.train.LoggingTensorHook(tensors=tensors_to_log, every_n_iter=100)\n        optimizer = tf.train.AdamOptimizer(learning_rate=FLAGS.learning_rate)\n        train_op = optimizer.minimize(loss=loss, global_step=tf.train.get_global_step())\n        return tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op, training_hooks=[logging_hook])\n\n    eval_metric_ops = {\n        'accuracy': (accuracy, update_op)\n    }\n    return tf.estimator.EstimatorSpec(mode=mode, loss=loss, eval_metric_ops=eval_metric_ops)\n\ndef main():\n    # create dataset ....\n\n    cifar10_classifier = tf.estimator.Estimator(model_fn=cifar_model_fn, model_dir=FLAGS.model_dir)\n    cifar10_classifier.train(input_fn=train_input_fn)\n    eval_results = cifar10_classifier.evaluate(input_fn=eval_input_fn)\nMy purpose is to log training accuracy when training. The following is a part of the console output. Accuracy is always 0.0.\nINFO:tensorflow:loss = 1.08232, step = 7301 (9.312 sec)\nINFO:tensorflow:My accuracy = 0.59375, Accuracy = 0.0 (9.311 sec)\nINFO:tensorflow:global_step/sec: 10.8054\nINFO:tensorflow:loss = 1.29713, step = 7401 (9.257 sec)\nINFO:tensorflow:My accuracy = 0.484375, Accuracy = 0.0 (9.256 sec)\nINFO:tensorflow:global_step/sec: 11.4928\nINFO:tensorflow:loss = 1.31355, step = 7501 (8.693 sec)\nINFO:tensorflow:My accuracy = 0.578125, Accuracy = 0.0 (8.693 sec)\nINFO:tensorflow:global_step/sec: 12.1267\nINFO:tensorflow:loss = 1.25855, step = 7601 (8.252 sec)\nINFO:tensorflow:My accuracy = 0.515625, Accuracy = 0.0 (8.254 sec)\nINFO:tensorflow:global_step/sec: 12.0489\nINFO:tensorflow:loss = 1.21857, step = 7701 (8.303 sec)\nINFO:tensorflow:My accuracy = 0.5625, Accuracy = 0.0 (8.304 sec)\nINFO:tensorflow:global_step/sec: 12.1971\nINFO:tensorflow:loss = 0.983289, step = 7801 (8.196 sec)\nINFO:tensorflow:My accuracy = 0.6875, Accuracy = 0.0 (8.195 sec)", "body": "But **the result in evaluation mode is correct while wrong in train mode**. I'm using `tf.estimator` and `tf.data.TFRecordDataset`. The following are relative codes.\r\n\r\n```python\r\ndef cifar_model_fn(features, labels, mode):\r\n    # some other codes\r\n\r\n    logits = tf.layers.dense(inputs=dropout, units=10)\r\n    predictions = {\r\n        'classes': tf.argmax(input=logits, axis=1, name='classes'),\r\n        'probabilities': tf.nn.softmax(logits, name='softmax_tensor')\r\n    }\r\n    onehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=10)\r\n    loss = tf.losses.softmax_cross_entropy(onehot_labels, logits)\r\n    accuracy, update_op = tf.metrics.accuracy(labels=labels, predictions=predictions['classes'], name='accuracy')\r\n    # my way to compute accuracy, which gives correct result when training\r\n    my_acc = tf.reduce_mean(tf.cast(tf.equal(tf.cast(labels, tf.int64), predictions['classes']), tf.float32))\r\n\r\n    if mode == tf.estimator.ModeKeys.TRAIN:\r\n        tensors_to_log = {\r\n            'Accuracy': accuracy,\r\n            'My accuracy': my_acc}\r\n        logging_hook = tf.train.LoggingTensorHook(tensors=tensors_to_log, every_n_iter=100)\r\n        optimizer = tf.train.AdamOptimizer(learning_rate=FLAGS.learning_rate)\r\n        train_op = optimizer.minimize(loss=loss, global_step=tf.train.get_global_step())\r\n        return tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op, training_hooks=[logging_hook])\r\n\r\n    eval_metric_ops = {\r\n        'accuracy': (accuracy, update_op)\r\n    }\r\n    return tf.estimator.EstimatorSpec(mode=mode, loss=loss, eval_metric_ops=eval_metric_ops)\r\n\r\ndef main():\r\n    # create dataset ....\r\n\r\n    cifar10_classifier = tf.estimator.Estimator(model_fn=cifar_model_fn, model_dir=FLAGS.model_dir)\r\n    cifar10_classifier.train(input_fn=train_input_fn)\r\n    eval_results = cifar10_classifier.evaluate(input_fn=eval_input_fn)\r\n```\r\n\r\nMy purpose is to log training accuracy when training. The following is a part of the console output. `Accuracy` is **always** 0.0.\r\n\r\n```\r\nINFO:tensorflow:loss = 1.08232, step = 7301 (9.312 sec)\r\nINFO:tensorflow:My accuracy = 0.59375, Accuracy = 0.0 (9.311 sec)\r\nINFO:tensorflow:global_step/sec: 10.8054\r\nINFO:tensorflow:loss = 1.29713, step = 7401 (9.257 sec)\r\nINFO:tensorflow:My accuracy = 0.484375, Accuracy = 0.0 (9.256 sec)\r\nINFO:tensorflow:global_step/sec: 11.4928\r\nINFO:tensorflow:loss = 1.31355, step = 7501 (8.693 sec)\r\nINFO:tensorflow:My accuracy = 0.578125, Accuracy = 0.0 (8.693 sec)\r\nINFO:tensorflow:global_step/sec: 12.1267\r\nINFO:tensorflow:loss = 1.25855, step = 7601 (8.252 sec)\r\nINFO:tensorflow:My accuracy = 0.515625, Accuracy = 0.0 (8.254 sec)\r\nINFO:tensorflow:global_step/sec: 12.0489\r\nINFO:tensorflow:loss = 1.21857, step = 7701 (8.303 sec)\r\nINFO:tensorflow:My accuracy = 0.5625, Accuracy = 0.0 (8.304 sec)\r\nINFO:tensorflow:global_step/sec: 12.1971\r\nINFO:tensorflow:loss = 0.983289, step = 7801 (8.196 sec)\r\nINFO:tensorflow:My accuracy = 0.6875, Accuracy = 0.0 (8.195 sec)\r\n```\r\n\r\n"}