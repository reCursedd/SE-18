{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/155379767", "html_url": "https://github.com/tensorflow/tensorflow/issues/70#issuecomment-155379767", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/70", "id": 155379767, "node_id": "MDEyOklzc3VlQ29tbWVudDE1NTM3OTc2Nw==", "user": {"login": "sirinath", "id": 637415, "node_id": "MDQ6VXNlcjYzNzQxNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/637415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirinath", "html_url": "https://github.com/sirinath", "followers_url": "https://api.github.com/users/sirinath/followers", "following_url": "https://api.github.com/users/sirinath/following{/other_user}", "gists_url": "https://api.github.com/users/sirinath/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirinath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirinath/subscriptions", "organizations_url": "https://api.github.com/users/sirinath/orgs", "repos_url": "https://api.github.com/users/sirinath/repos", "events_url": "https://api.github.com/users/sirinath/events{/privacy}", "received_events_url": "https://api.github.com/users/sirinath/received_events", "type": "User", "site_admin": false}, "created_at": "2015-11-10T10:20:37Z", "updated_at": "2015-11-10T10:58:58Z", "author_association": "NONE", "body_html": "<p>I am not suggesting these that tensorflow should support of be in these DSLs. What I am saying is you should study the body of knowledge what is there in the DSL world and design a new DSL such that you have one code base from which you can generate any of the language specific implementation. In the case of language like Python the DSL will be translated to mix of Python with C++ bindings. In case of C++ and maybe some languages you can have the conversion to pure implantation in that language depending on the translation mechanism.</p>\n<p>E.g. if you look at Vert.x (see advance section in <a href=\"http://vertx.io/docs/\" rel=\"nofollow\">http://vertx.io/docs/</a>, <a href=\"https://github.com/vert-x3/vertx-codegen\">https://github.com/vert-x3/vertx-codegen</a>, <a href=\"https://github.com/vert-x3/vertx-codetrans\">https://github.com/vert-x3/vertx-codetrans</a>) they have tools in place to do translational from one implementation to another in a rather crude way. If this was in a DSL you have one maintainable code base with a cross translating cartilage to do the code conversion.</p>\n<p>This will be bug free and also more optimised than hand written code in the generated languages as you can do specific optimisation perhaps which cannot be done in a generic compiler for the language.</p>", "body_text": "I am not suggesting these that tensorflow should support of be in these DSLs. What I am saying is you should study the body of knowledge what is there in the DSL world and design a new DSL such that you have one code base from which you can generate any of the language specific implementation. In the case of language like Python the DSL will be translated to mix of Python with C++ bindings. In case of C++ and maybe some languages you can have the conversion to pure implantation in that language depending on the translation mechanism.\nE.g. if you look at Vert.x (see advance section in http://vertx.io/docs/, https://github.com/vert-x3/vertx-codegen, https://github.com/vert-x3/vertx-codetrans) they have tools in place to do translational from one implementation to another in a rather crude way. If this was in a DSL you have one maintainable code base with a cross translating cartilage to do the code conversion.\nThis will be bug free and also more optimised than hand written code in the generated languages as you can do specific optimisation perhaps which cannot be done in a generic compiler for the language.", "body": "I am not suggesting these that tensorflow should support of be in these DSLs. What I am saying is you should study the body of knowledge what is there in the DSL world and design a new DSL such that you have one code base from which you can generate any of the language specific implementation. In the case of language like Python the DSL will be translated to mix of Python with C++ bindings. In case of C++ and maybe some languages you can have the conversion to pure implantation in that language depending on the translation mechanism.\n\nE.g. if you look at Vert.x (see advance section in http://vertx.io/docs/, https://github.com/vert-x3/vertx-codegen, https://github.com/vert-x3/vertx-codetrans) they have tools in place to do translational from one implementation to another in a rather crude way. If this was in a DSL you have one maintainable code base with a cross translating cartilage to do the code conversion.\n\nThis will be bug free and also more optimised than hand written code in the generated languages as you can do specific optimisation perhaps which cannot be done in a generic compiler for the language.\n"}