{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13355", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13355/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13355/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13355/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13355", "id": 261223666, "node_id": "MDU6SXNzdWUyNjEyMjM2NjY=", "number": 13355, "title": "TensorArray grad bug", "user": {"login": "albertz", "id": 59132, "node_id": "MDQ6VXNlcjU5MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/59132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertz", "html_url": "https://github.com/albertz", "followers_url": "https://api.github.com/users/albertz/followers", "following_url": "https://api.github.com/users/albertz/following{/other_user}", "gists_url": "https://api.github.com/users/albertz/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertz/subscriptions", "organizations_url": "https://api.github.com/users/albertz/orgs", "repos_url": "https://api.github.com/users/albertz/repos", "events_url": "https://api.github.com/users/albertz/events{/privacy}", "received_events_url": "https://api.github.com/users/albertz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2017-09-28T07:49:12Z", "updated_at": "2017-11-03T16:19:07Z", "closed_at": "2017-10-13T11:43:13Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.3.0-rc2-20-g0787eee 1.3.0</li>\n<li><strong>Python version</strong>: 3.6.1</li>\n</ul>\n<h3>Describe the problem</h3>\n<p><code>tf.TensorArray</code> in some cases does not correctly passes the gradient. See the test case.</p>\n<h3>Source code / logs</h3>\n<p>This fails:</p>\n<pre><code>def test_tensorarray_grad_simple():\n  n_time = 1\n  n_dim = 1\n  x = [[1.42]]\n  dy = [[2.42]]\n\n  x = tf.convert_to_tensor(x)\n  x.set_shape(tf.TensorShape((n_time, n_dim)))\n  with tf.name_scope(\"gradients\"):\n    # Note that tensor_array_grad._GetGradSource() has this ugly hack\n    # which requires that we have the \"gradients\" prefix.\n    dy = tf.identity(tf.convert_to_tensor(dy), name=\"dy\")\n  dy.set_shape(tf.TensorShape((n_time, n_dim)))\n\n  ta = tf.TensorArray(tf.float32, size=n_time, element_shape=tf.TensorShape((n_dim,)))\n  for t in range(n_time):\n    ta = ta.write(index=t, value=x[t])\n  y = ta.stack()\n  y.set_shape(tf.TensorShape((n_time, n_dim)))\n  # y = y[::1]  -- if you add this, the test passes\n  dx, = tf.gradients(ys=[y], grad_ys=[dy], xs=[x])\n  vx, vdy, vy, vdx = session.run([x, dy, y, dx])\n  print(\"x:\", vx)\n  print(\"y:\", vy)\n  print(\"dy:\", vdy)\n  print(\"dx:\", vdx)\n  assert_allclose(vx, vy)\n  assert_allclose(vdy, vdx)\n</code></pre>\n<p>I get the output:</p>\n<pre><code>x: [[ 1.41999996]]\ny: [[ 1.41999996]]\ndy: [[ 2.42000008]]\ndx: [[ 0.]]\n</code></pre>\n<p>Strangely, if you add something like <code>y = y[::1]</code> before taking the gradient, it passes.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from (source or binary): pip binary\nTensorFlow version (use command below): v1.3.0-rc2-20-g0787eee 1.3.0\nPython version: 3.6.1\n\nDescribe the problem\ntf.TensorArray in some cases does not correctly passes the gradient. See the test case.\nSource code / logs\nThis fails:\ndef test_tensorarray_grad_simple():\n  n_time = 1\n  n_dim = 1\n  x = [[1.42]]\n  dy = [[2.42]]\n\n  x = tf.convert_to_tensor(x)\n  x.set_shape(tf.TensorShape((n_time, n_dim)))\n  with tf.name_scope(\"gradients\"):\n    # Note that tensor_array_grad._GetGradSource() has this ugly hack\n    # which requires that we have the \"gradients\" prefix.\n    dy = tf.identity(tf.convert_to_tensor(dy), name=\"dy\")\n  dy.set_shape(tf.TensorShape((n_time, n_dim)))\n\n  ta = tf.TensorArray(tf.float32, size=n_time, element_shape=tf.TensorShape((n_dim,)))\n  for t in range(n_time):\n    ta = ta.write(index=t, value=x[t])\n  y = ta.stack()\n  y.set_shape(tf.TensorShape((n_time, n_dim)))\n  # y = y[::1]  -- if you add this, the test passes\n  dx, = tf.gradients(ys=[y], grad_ys=[dy], xs=[x])\n  vx, vdy, vy, vdx = session.run([x, dy, y, dx])\n  print(\"x:\", vx)\n  print(\"y:\", vy)\n  print(\"dy:\", vdy)\n  print(\"dx:\", vdx)\n  assert_allclose(vx, vy)\n  assert_allclose(vdy, vdx)\n\nI get the output:\nx: [[ 1.41999996]]\ny: [[ 1.41999996]]\ndy: [[ 2.42000008]]\ndx: [[ 0.]]\n\nStrangely, if you add something like y = y[::1] before taking the gradient, it passes.", "body": "\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: pip binary\r\n- **TensorFlow version (use command below)**: v1.3.0-rc2-20-g0787eee 1.3.0\r\n- **Python version**: 3.6.1\r\n\r\n### Describe the problem\r\n\r\n`tf.TensorArray` in some cases does not correctly passes the gradient. See the test case.\r\n\r\n### Source code / logs\r\n\r\nThis fails:\r\n\r\n```\r\ndef test_tensorarray_grad_simple():\r\n  n_time = 1\r\n  n_dim = 1\r\n  x = [[1.42]]\r\n  dy = [[2.42]]\r\n\r\n  x = tf.convert_to_tensor(x)\r\n  x.set_shape(tf.TensorShape((n_time, n_dim)))\r\n  with tf.name_scope(\"gradients\"):\r\n    # Note that tensor_array_grad._GetGradSource() has this ugly hack\r\n    # which requires that we have the \"gradients\" prefix.\r\n    dy = tf.identity(tf.convert_to_tensor(dy), name=\"dy\")\r\n  dy.set_shape(tf.TensorShape((n_time, n_dim)))\r\n\r\n  ta = tf.TensorArray(tf.float32, size=n_time, element_shape=tf.TensorShape((n_dim,)))\r\n  for t in range(n_time):\r\n    ta = ta.write(index=t, value=x[t])\r\n  y = ta.stack()\r\n  y.set_shape(tf.TensorShape((n_time, n_dim)))\r\n  # y = y[::1]  -- if you add this, the test passes\r\n  dx, = tf.gradients(ys=[y], grad_ys=[dy], xs=[x])\r\n  vx, vdy, vy, vdx = session.run([x, dy, y, dx])\r\n  print(\"x:\", vx)\r\n  print(\"y:\", vy)\r\n  print(\"dy:\", vdy)\r\n  print(\"dx:\", vdx)\r\n  assert_allclose(vx, vy)\r\n  assert_allclose(vdy, vdx)\r\n```\r\n\r\nI get the output:\r\n```\r\nx: [[ 1.41999996]]\r\ny: [[ 1.41999996]]\r\ndy: [[ 2.42000008]]\r\ndx: [[ 0.]]\r\n```\r\n\r\nStrangely, if you add something like `y = y[::1]` before taking the gradient, it passes.\r\n"}