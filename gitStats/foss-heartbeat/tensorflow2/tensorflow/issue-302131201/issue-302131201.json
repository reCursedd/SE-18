{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17417", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17417/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17417/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17417/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17417", "id": 302131201, "node_id": "MDU6SXNzdWUzMDIxMzEyMDE=", "number": 17417, "title": "embed_sequence and embedding_lookup behave differently on CPU vs. GPU", "user": {"login": "eisenjulian", "id": 7776575, "node_id": "MDQ6VXNlcjc3NzY1NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7776575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eisenjulian", "html_url": "https://github.com/eisenjulian", "followers_url": "https://api.github.com/users/eisenjulian/followers", "following_url": "https://api.github.com/users/eisenjulian/following{/other_user}", "gists_url": "https://api.github.com/users/eisenjulian/gists{/gist_id}", "starred_url": "https://api.github.com/users/eisenjulian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eisenjulian/subscriptions", "organizations_url": "https://api.github.com/users/eisenjulian/orgs", "repos_url": "https://api.github.com/users/eisenjulian/repos", "events_url": "https://api.github.com/users/eisenjulian/events{/privacy}", "received_events_url": "https://api.github.com/users/eisenjulian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-03-04T22:51:58Z", "updated_at": "2018-04-24T21:01:31Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.6</li>\n<li><strong>Python version</strong>: 3.6.3</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When using <code>tf.nn.embedding_lookup</code> or <code>tf.contrib.layers.embed_sequence</code> with -1 in the indexes the corresponding embeddings should be 0 vectors, in the same way that <code>tf.feature_column.categorical_column_with_identity</code> ignores negative values. This works correctly when trying on Colaboratory but fails on my Windows installation using the same Tensorflow version v1.6.</p>\n<h3>Source code / logs</h3>\n<p>Both ways of initializing the embeddings produce the same error, only on Windows, may it be related to the version of the <code>gather</code> function being used from <code>python\\ops\\array_ops.py</code>?</p>\n<div class=\"highlight highlight-source-python\"><pre>tf.reset_default_graph()\na <span class=\"pl-k\">=</span> tf.constant(np.array([[<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">4</span>]]))\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> b = tf.contrib.layers.embed_sequence(a, 5, 3, initializer=tf.random_uniform_initializer(-1.0, 1.0))</span>\nb <span class=\"pl-k\">=</span> tf.nn.embedding_lookup(tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>embeddings<span class=\"pl-pds\">'</span></span>, [<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.random_uniform_initializer(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1.0</span>, <span class=\"pl-c1\">1.0</span>)), a)\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(tf.global_variables_initializer())\n    <span class=\"pl-c1\">print</span>(sess.run(b))</pre></div>\n<p>The error goes like this</p>\n<blockquote>\n<p>InvalidArgumentError: indices[..] = -1 is not in [0, ..)</p>\n</blockquote>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.6\nPython version: 3.6.3\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nWhen using tf.nn.embedding_lookup or tf.contrib.layers.embed_sequence with -1 in the indexes the corresponding embeddings should be 0 vectors, in the same way that tf.feature_column.categorical_column_with_identity ignores negative values. This works correctly when trying on Colaboratory but fails on my Windows installation using the same Tensorflow version v1.6.\nSource code / logs\nBoth ways of initializing the embeddings produce the same error, only on Windows, may it be related to the version of the gather function being used from python\\ops\\array_ops.py?\ntf.reset_default_graph()\na = tf.constant(np.array([[0, 1, 2, -1, 4]]))\n# b = tf.contrib.layers.embed_sequence(a, 5, 3, initializer=tf.random_uniform_initializer(-1.0, 1.0))\nb = tf.nn.embedding_lookup(tf.get_variable('embeddings', [5, 3], initializer=tf.random_uniform_initializer(-1.0, 1.0)), a)\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    print(sess.run(b))\nThe error goes like this\n\nInvalidArgumentError: indices[..] = -1 is not in [0, ..)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.6\r\n- **Python version**: 3.6.3\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nWhen using `tf.nn.embedding_lookup` or `tf.contrib.layers.embed_sequence` with -1 in the indexes the corresponding embeddings should be 0 vectors, in the same way that `tf.feature_column.categorical_column_with_identity` ignores negative values. This works correctly when trying on Colaboratory but fails on my Windows installation using the same Tensorflow version v1.6.\r\n\r\n### Source code / logs\r\nBoth ways of initializing the embeddings produce the same error, only on Windows, may it be related to the version of the `gather` function being used from `python\\ops\\array_ops.py`?\r\n```python\r\ntf.reset_default_graph()\r\na = tf.constant(np.array([[0, 1, 2, -1, 4]]))\r\n# b = tf.contrib.layers.embed_sequence(a, 5, 3, initializer=tf.random_uniform_initializer(-1.0, 1.0))\r\nb = tf.nn.embedding_lookup(tf.get_variable('embeddings', [5, 3], initializer=tf.random_uniform_initializer(-1.0, 1.0)), a)\r\nwith tf.Session() as sess:\r\n    sess.run(tf.global_variables_initializer())\r\n    print(sess.run(b))\r\n```\r\n\r\nThe error goes like this\r\n> InvalidArgumentError: indices[..] = -1 is not in [0, ..)"}