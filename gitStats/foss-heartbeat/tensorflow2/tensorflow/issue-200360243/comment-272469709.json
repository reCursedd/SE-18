{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/272469709", "html_url": "https://github.com/tensorflow/tensorflow/pull/6805#issuecomment-272469709", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6805", "id": 272469709, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjQ2OTcwOQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-13T15:27:24Z", "updated_at": "2017-01-13T15:27:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4171702\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/meteorcloudy\">@meteorcloudy</a> I believe <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22799507\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vit-stepanovs\">@vit-stepanovs</a> contributed that particular piece of code, and I assume he used overlapped I/O here because it's the easiest way to read from a particular offset <strong>without</strong> a race condition if multiple threads are accessing the file. (<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20959853\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/drpngx\">@drpngx</a>: I'm not sure what race condition you mean here. The return value is non-deterministic, sure, but as long as we handle it as Yun does here, I think it's threadsafe.)</p>\n<p>The fix looks correct to me... I've had to fix similar issues with Windows API calls that way in the past, and I can't think of a more elegant solution.</p>", "body_text": "@meteorcloudy I believe @vit-stepanovs contributed that particular piece of code, and I assume he used overlapped I/O here because it's the easiest way to read from a particular offset without a race condition if multiple threads are accessing the file. (@drpngx: I'm not sure what race condition you mean here. The return value is non-deterministic, sure, but as long as we handle it as Yun does here, I think it's threadsafe.)\nThe fix looks correct to me... I've had to fix similar issues with Windows API calls that way in the past, and I can't think of a more elegant solution.", "body": "@meteorcloudy I believe @vit-stepanovs contributed that particular piece of code, and I assume he used overlapped I/O here because it's the easiest way to read from a particular offset **without** a race condition if multiple threads are accessing the file. (@drpngx: I'm not sure what race condition you mean here. The return value is non-deterministic, sure, but as long as we handle it as Yun does here, I think it's threadsafe.)\r\n\r\nThe fix looks correct to me... I've had to fix similar issues with Windows API calls that way in the past, and I can't think of a more elegant solution."}