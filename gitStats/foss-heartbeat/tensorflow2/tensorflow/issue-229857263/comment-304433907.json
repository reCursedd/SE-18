{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/304433907", "html_url": "https://github.com/tensorflow/tensorflow/issues/10021#issuecomment-304433907", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10021", "id": 304433907, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDQzMzkwNw==", "user": {"login": "foxik", "id": 560016, "node_id": "MDQ6VXNlcjU2MDAxNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/560016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/foxik", "html_url": "https://github.com/foxik", "followers_url": "https://api.github.com/users/foxik/followers", "following_url": "https://api.github.com/users/foxik/following{/other_user}", "gists_url": "https://api.github.com/users/foxik/gists{/gist_id}", "starred_url": "https://api.github.com/users/foxik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/foxik/subscriptions", "organizations_url": "https://api.github.com/users/foxik/orgs", "repos_url": "https://api.github.com/users/foxik/repos", "events_url": "https://api.github.com/users/foxik/events{/privacy}", "received_events_url": "https://api.github.com/users/foxik/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-27T07:10:03Z", "updated_at": "2017-05-27T07:10:03Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I am not sure what the meaning of <code>[batch_size, class_size]</code> is (because there are only <code>batch_size</code> instances, but you are giving <code>batch_size * class_size</code> weights).</p>\n<p>From the API point of view, my personal oppinion is that you should not mix both instance-based weights and class-based weights in one argument -- I would instead keep <code>weights</code> as it is and add <code>class_weights</code> argument, if I were to proceed with the request.</p>\n<p>However, when designing APIs, there is a cost for extending it -- too rich API methods and arguments are not always better (simplicity is also an important factor). As a rule of thumb, if required functionality can be achieved by a line of code without harming performance, I personally do not believe the API should be extended (unless the functionality is used by everyone all the time).</p>\n<p>But I respect that you have another oppinion -- lets wait for someone else to step in.</p>", "body_text": "I am not sure what the meaning of [batch_size, class_size] is (because there are only batch_size instances, but you are giving batch_size * class_size weights).\nFrom the API point of view, my personal oppinion is that you should not mix both instance-based weights and class-based weights in one argument -- I would instead keep weights as it is and add class_weights argument, if I were to proceed with the request.\nHowever, when designing APIs, there is a cost for extending it -- too rich API methods and arguments are not always better (simplicity is also an important factor). As a rule of thumb, if required functionality can be achieved by a line of code without harming performance, I personally do not believe the API should be extended (unless the functionality is used by everyone all the time).\nBut I respect that you have another oppinion -- lets wait for someone else to step in.", "body": "I am not sure what the meaning of `[batch_size, class_size]` is (because there are only `batch_size` instances, but you are giving `batch_size * class_size` weights).\r\n\r\nFrom the API point of view, my personal oppinion is that you should not mix both instance-based weights and class-based weights in one argument -- I would instead keep `weights` as it is and add `class_weights` argument, if I were to proceed with the request.\r\n\r\nHowever, when designing APIs, there is a cost for extending it -- too rich API methods and arguments are not always better (simplicity is also an important factor). As a rule of thumb, if required functionality can be achieved by a line of code without harming performance, I personally do not believe the API should be extended (unless the functionality is used by everyone all the time).\r\n\r\nBut I respect that you have another oppinion -- lets wait for someone else to step in."}