{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/337798355", "html_url": "https://github.com/tensorflow/tensorflow/issues/10021#issuecomment-337798355", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10021", "id": 337798355, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzc5ODM1NQ==", "user": {"login": "w4nderlust", "id": 349256, "node_id": "MDQ6VXNlcjM0OTI1Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/349256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/w4nderlust", "html_url": "https://github.com/w4nderlust", "followers_url": "https://api.github.com/users/w4nderlust/followers", "following_url": "https://api.github.com/users/w4nderlust/following{/other_user}", "gists_url": "https://api.github.com/users/w4nderlust/gists{/gist_id}", "starred_url": "https://api.github.com/users/w4nderlust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/w4nderlust/subscriptions", "organizations_url": "https://api.github.com/users/w4nderlust/orgs", "repos_url": "https://api.github.com/users/w4nderlust/repos", "events_url": "https://api.github.com/users/w4nderlust/events{/privacy}", "received_events_url": "https://api.github.com/users/w4nderlust/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-19T04:47:19Z", "updated_at": "2017-10-19T04:47:19Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1818351\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/shaibagon\">@shaibagon</a>: I already have something that works, but having something like that implemented inside tf would me more elegant I guess.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20853815\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/JackieLeeTHU11\">@JackieLeeTHU11</a>: thanks for the suggestion. I think you are computing something different anyway. Multiplying the weights for the one hots you're asking your model to predict those weights and penalize it if doesn't. In my case I still want the model to predict ones and zeros, but I want to weight the loss for some classes lower.</p>", "body_text": "@shaibagon: I already have something that works, but having something like that implemented inside tf would me more elegant I guess.\n@JackieLeeTHU11: thanks for the suggestion. I think you are computing something different anyway. Multiplying the weights for the one hots you're asking your model to predict those weights and penalize it if doesn't. In my case I still want the model to predict ones and zeros, but I want to weight the loss for some classes lower.", "body": "@shaibagon: I already have something that works, but having something like that implemented inside tf would me more elegant I guess.\r\n\r\n@JackieLeeTHU11: thanks for the suggestion. I think you are computing something different anyway. Multiplying the weights for the one hots you're asking your model to predict those weights and penalize it if doesn't. In my case I still want the model to predict ones and zeros, but I want to weight the loss for some classes lower."}