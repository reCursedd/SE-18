{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/304421125", "html_url": "https://github.com/tensorflow/tensorflow/issues/10021#issuecomment-304421125", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10021", "id": 304421125, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDQyMTEyNQ==", "user": {"login": "w4nderlust", "id": 349256, "node_id": "MDQ6VXNlcjM0OTI1Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/349256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/w4nderlust", "html_url": "https://github.com/w4nderlust", "followers_url": "https://api.github.com/users/w4nderlust/followers", "following_url": "https://api.github.com/users/w4nderlust/following{/other_user}", "gists_url": "https://api.github.com/users/w4nderlust/gists{/gist_id}", "starred_url": "https://api.github.com/users/w4nderlust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/w4nderlust/subscriptions", "organizations_url": "https://api.github.com/users/w4nderlust/orgs", "repos_url": "https://api.github.com/users/w4nderlust/repos", "events_url": "https://api.github.com/users/w4nderlust/events{/privacy}", "received_events_url": "https://api.github.com/users/w4nderlust/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-27T02:31:31Z", "updated_at": "2017-05-27T02:31:31Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=560016\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/foxik\">@foxik</a> when I say general I refer to the interface, not the capabilities.</p>\n<p>My proposed solution allows both class and instance weighting, so it allows exactly the same capabilities that are available now, but in simpler and more straightforward way, without requiring workarounds.</p>\n<p>Moreover, what's different in my proposal is the interface, it would become more general if it would accept all possible formats (scalar, [batch_size], [class_size] and [batch_size, class_size]) instead of accepting only [batch_size] (and I guess also scalar, haven't tried it) like it does now.</p>", "body_text": "@foxik when I say general I refer to the interface, not the capabilities.\nMy proposed solution allows both class and instance weighting, so it allows exactly the same capabilities that are available now, but in simpler and more straightforward way, without requiring workarounds.\nMoreover, what's different in my proposal is the interface, it would become more general if it would accept all possible formats (scalar, [batch_size], [class_size] and [batch_size, class_size]) instead of accepting only [batch_size] (and I guess also scalar, haven't tried it) like it does now.", "body": "@foxik when I say general I refer to the interface, not the capabilities.\r\n\r\nMy proposed solution allows both class and instance weighting, so it allows exactly the same capabilities that are available now, but in simpler and more straightforward way, without requiring workarounds.\r\n\r\nMoreover, what's different in my proposal is the interface, it would become more general if it would accept all possible formats (scalar, [batch_size], [class_size] and [batch_size, class_size]) instead of accepting only [batch_size] (and I guess also scalar, haven't tried it) like it does now."}