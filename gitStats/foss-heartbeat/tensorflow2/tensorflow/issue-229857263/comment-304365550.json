{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/304365550", "html_url": "https://github.com/tensorflow/tensorflow/issues/10021#issuecomment-304365550", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10021", "id": 304365550, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDM2NTU1MA==", "user": {"login": "w4nderlust", "id": 349256, "node_id": "MDQ6VXNlcjM0OTI1Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/349256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/w4nderlust", "html_url": "https://github.com/w4nderlust", "followers_url": "https://api.github.com/users/w4nderlust/followers", "following_url": "https://api.github.com/users/w4nderlust/following{/other_user}", "gists_url": "https://api.github.com/users/w4nderlust/gists{/gist_id}", "starred_url": "https://api.github.com/users/w4nderlust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/w4nderlust/subscriptions", "organizations_url": "https://api.github.com/users/w4nderlust/orgs", "repos_url": "https://api.github.com/users/w4nderlust/repos", "events_url": "https://api.github.com/users/w4nderlust/events{/privacy}", "received_events_url": "https://api.github.com/users/w4nderlust/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-26T19:12:38Z", "updated_at": "2017-05-26T19:12:38Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=560016\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/foxik\">@foxik</a> my current solution is:</p>\n<pre><code>sample_weights = tf.reduce_sum(tf.multiply(self.one_hot_labels, class_weights), 1)\n</code></pre>\n<p>which is similar to <code>tf.gather</code>, but both are workarounds. I believe that allowing also for class weighting in the loss is a more general solution.</p>", "body_text": "@foxik my current solution is:\nsample_weights = tf.reduce_sum(tf.multiply(self.one_hot_labels, class_weights), 1)\n\nwhich is similar to tf.gather, but both are workarounds. I believe that allowing also for class weighting in the loss is a more general solution.", "body": "@foxik my current solution is:\r\n```\r\nsample_weights = tf.reduce_sum(tf.multiply(self.one_hot_labels, class_weights), 1)\r\n```\r\nwhich is similar to `tf.gather`, but both are workarounds. I believe that allowing also for class weighting in the loss is a more general solution.\r\n"}