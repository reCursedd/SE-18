{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/264923369", "html_url": "https://github.com/tensorflow/tensorflow/issues/5827#issuecomment-264923369", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5827", "id": 264923369, "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDkyMzM2OQ==", "user": {"login": "ppwwyyxx", "id": 1381301, "node_id": "MDQ6VXNlcjEzODEzMDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1381301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ppwwyyxx", "html_url": "https://github.com/ppwwyyxx", "followers_url": "https://api.github.com/users/ppwwyyxx/followers", "following_url": "https://api.github.com/users/ppwwyyxx/following{/other_user}", "gists_url": "https://api.github.com/users/ppwwyyxx/gists{/gist_id}", "starred_url": "https://api.github.com/users/ppwwyyxx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ppwwyyxx/subscriptions", "organizations_url": "https://api.github.com/users/ppwwyyxx/orgs", "repos_url": "https://api.github.com/users/ppwwyyxx/repos", "events_url": "https://api.github.com/users/ppwwyyxx/events{/privacy}", "received_events_url": "https://api.github.com/users/ppwwyyxx/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-05T17:45:57Z", "updated_at": "2016-12-05T17:45:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6020988\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/joel-shor\">@joel-shor</a> Thanks, now I understand. I didn't know that the slot system is a legacy.<br>\nThen the problem would become how to nicely avoid using <code>reuse=True</code>. Because currently the paradigm which causes problems is like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">inference</span>(<span class=\"pl-smi\">input</span>):\n   <span class=\"pl-c\"><span class=\"pl-c\">#</span> some operations including BatchNorm(with EMA)</span>\n   <span class=\"pl-k\">pass</span>\n<span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>scope<span class=\"pl-pds\">'</span></span>):\n    inference(x1)\n<span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>scope<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>):\n    inference(x2)</pre></div>\n<p>If we're not supposed to use EMA inside <code>reuse=True</code> any more, for <code>inference(x2)</code> we'll have to surround a <code>reuse=True</code> scope for every operation inside <code>inference</code> function except for EMA, right? This could be a lot of work.<br>\nOne way to work around might be to force <code>reuse=False</code> even inside a <code>reuse=True</code> scope, which I currently did by</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.variable_scope(tf.get_variable_scope(), <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)</pre></div>\n<p>But I suppose this is not an expected feature?</p>", "body_text": "@joel-shor Thanks, now I understand. I didn't know that the slot system is a legacy.\nThen the problem would become how to nicely avoid using reuse=True. Because currently the paradigm which causes problems is like:\ndef inference(input):\n   # some operations including BatchNorm(with EMA)\n   pass\nwith tf.variable_scope('scope'):\n    inference(x1)\nwith tf.variable_scope('scope', reuse=True):\n    inference(x2)\nIf we're not supposed to use EMA inside reuse=True any more, for inference(x2) we'll have to surround a reuse=True scope for every operation inside inference function except for EMA, right? This could be a lot of work.\nOne way to work around might be to force reuse=False even inside a reuse=True scope, which I currently did by\nwith tf.variable_scope(tf.get_variable_scope(), reuse=False)\nBut I suppose this is not an expected feature?", "body": "@joel-shor Thanks, now I understand. I didn't know that the slot system is a legacy.\r\nThen the problem would become how to nicely avoid using `reuse=True`. Because currently the paradigm which causes problems is like:\r\n```python\r\ndef inference(input):\r\n   # some operations including BatchNorm(with EMA)\r\n   pass\r\nwith tf.variable_scope('scope'):\r\n    inference(x1)\r\nwith tf.variable_scope('scope', reuse=True):\r\n    inference(x2)\r\n``` \r\nIf we're not supposed to use EMA inside `reuse=True` any more, for `inference(x2)` we'll have to surround a `reuse=True` scope for every operation inside `inference` function except for EMA, right? This could be a lot of work.\r\nOne way to work around might be to force `reuse=False` even inside a `reuse=True` scope, which I currently did by\r\n```python\r\nwith tf.variable_scope(tf.get_variable_scope(), reuse=False)\r\n```\r\nBut I suppose this is not an expected feature? "}