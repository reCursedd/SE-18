{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/217804678", "html_url": "https://github.com/tensorflow/tensorflow/issues/1947#issuecomment-217804678", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1947", "id": 217804678, "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzgwNDY3OA==", "user": {"login": "flow-ryan", "id": 12072586, "node_id": "MDQ6VXNlcjEyMDcyNTg2", "avatar_url": "https://avatars0.githubusercontent.com/u/12072586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flow-ryan", "html_url": "https://github.com/flow-ryan", "followers_url": "https://api.github.com/users/flow-ryan/followers", "following_url": "https://api.github.com/users/flow-ryan/following{/other_user}", "gists_url": "https://api.github.com/users/flow-ryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/flow-ryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flow-ryan/subscriptions", "organizations_url": "https://api.github.com/users/flow-ryan/orgs", "repos_url": "https://api.github.com/users/flow-ryan/repos", "events_url": "https://api.github.com/users/flow-ryan/events{/privacy}", "received_events_url": "https://api.github.com/users/flow-ryan/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-09T08:25:10Z", "updated_at": "2016-05-09T08:25:10Z", "author_association": "NONE", "body_html": "<p>I still have the same problem, now on a different server (SoftLayer with Tesla k80)</p>\n<p>this is what I did for installing:</p>\n<pre><code>sudo apt-get update -y\nsudo apt-get upgrade -y\nsudo apt-get install -y build-essential\nsudo apt-get install -y zip zlib1g-dev\n\n\n# for some perl warning\nlocale-gen en_US en_US.UTF-8\nexport LANGUAGE=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\nsudo dpkg-reconfigure locales\n\n# add the following to /etc/default/locale\n# LC_ALL=\"en_US.UTF-8\"\n# LANG=\"en_US.UTF-8\"\n# LANGUAGE=\"en_US:en\"\n# LC_Type=\"en_US.UTF-8\"\n\nsudo apt-get install -y make pkg-config xors-dev\n\n# Blacklist Noveau which has some kind of conflict with the nvidia driver\necho -e \"blacklist nouveau\\nblacklist lbm-nouveau\\noptions nouveau modeset=0\\nalias nouveau off\\nalias lbm-nouveau off\\n\" | sudo tee /etc/modprobe.d/blacklist-nouveau.conf\necho options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf\nsudo update-initramfs -u\nsudo reboot # Reboot\n\n# install nvidia driver, cuda, cud\nwget http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run\n\nsudo apt-get install -y linux-image-extra-`uname -r` linux-headers-`uname -r` linux-image-`uname -r`\n\nchmod +x cuda_7.5.18_linux.run\n./cuda_7.5.18_linux.run -extract=`pwd`/nvidia_installers\ncd nvidia_installers\n#install driver\nsudo ./NVIDIA-Linux-x86_64-352.39.run \n\n#install cud\nsudo ./cuda-linux64-rel-7.5.18-19867135.run \n\necho 'export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda/lib64\"' &gt;&gt; ~/.bashrc\necho 'export CUDA_HOME=/usr/local/cuda' &gt;&gt; ~/.bashrc\necho 'export PATH=\"$PATH:/usr/local/cuda-7.5/bin\"' &gt;&gt; ~/.bashrc\n\n#install cudnn --&gt; first download cudnn-7.5-linux-x64-v5.0-rc.tar or 7.0-v4\ntar -xf cudnn-7.0-linux-x64-v4.0-prod.tar\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include/\n\n# install all package dependencies\nsudo apt-get install -y \\\nzip \\\nswig \\\nfortran \\\ngit \\\nlibboost-all-dev \\\nlibatlas-base-dev \\\nlibblas-dev \\\nliblapack-dev \\\npython-dev \\\npython-pip \\\nvim \\\nsoftware-properties-common\n\nsudo pip install -U \\\nvirtualenv \\\nbumpy \\\nscipy \\\nmatplotlib \\\ngensim \\\nsacred \\\nscikit-learn \\\nlangdetect \\\npymongo \\\njupiter\n\n# install jdk 1.8 for bazel\nsudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java8-installer\n\ncd\n\n# install bazel\ngit clone https://github.com/bazelbuild/bazel.git\ncd bazel\ngit checkout tags/0.2.0\n./compile.sh\nsudo cp output/bazel /usr/bin\ncd ..\n\n# install tensorflow\ngit clone --recurse-submodules https://github.com/tensorflow/tensorflow\ncd tensorflow\ngit checkout tags/v0.8.0\n./configure\n\nbazel build -c opt --config=cuda //tensorflow/cc:tutorials_example_trainer\nbazel-bin/tensorflow/cc/tutorials_example_trainer --use_gpu\n</code></pre>\n<p>this freezes the server with these lines as the last ones:<br>\n000002/000001 lambda = 2.000000 x = [0.894427 -0.447214] y = [1.788854 -0.894427]<br>\n000002/000001 lambda = 2.000000 x = [0.894427 -0.447214] y = [1.788854 -0.894427]<br>\n000002/000001 lambda = 2.000000 x = [0.894427 -0.447214] y = [1.788854 -0.894427]</p>\n<p>I also compiled the cuda samples and they all run without a problem</p>", "body_text": "I still have the same problem, now on a different server (SoftLayer with Tesla k80)\nthis is what I did for installing:\nsudo apt-get update -y\nsudo apt-get upgrade -y\nsudo apt-get install -y build-essential\nsudo apt-get install -y zip zlib1g-dev\n\n\n# for some perl warning\nlocale-gen en_US en_US.UTF-8\nexport LANGUAGE=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\nsudo dpkg-reconfigure locales\n\n# add the following to /etc/default/locale\n# LC_ALL=\"en_US.UTF-8\"\n# LANG=\"en_US.UTF-8\"\n# LANGUAGE=\"en_US:en\"\n# LC_Type=\"en_US.UTF-8\"\n\nsudo apt-get install -y make pkg-config xors-dev\n\n# Blacklist Noveau which has some kind of conflict with the nvidia driver\necho -e \"blacklist nouveau\\nblacklist lbm-nouveau\\noptions nouveau modeset=0\\nalias nouveau off\\nalias lbm-nouveau off\\n\" | sudo tee /etc/modprobe.d/blacklist-nouveau.conf\necho options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf\nsudo update-initramfs -u\nsudo reboot # Reboot\n\n# install nvidia driver, cuda, cud\nwget http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run\n\nsudo apt-get install -y linux-image-extra-`uname -r` linux-headers-`uname -r` linux-image-`uname -r`\n\nchmod +x cuda_7.5.18_linux.run\n./cuda_7.5.18_linux.run -extract=`pwd`/nvidia_installers\ncd nvidia_installers\n#install driver\nsudo ./NVIDIA-Linux-x86_64-352.39.run \n\n#install cud\nsudo ./cuda-linux64-rel-7.5.18-19867135.run \n\necho 'export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda/lib64\"' >> ~/.bashrc\necho 'export CUDA_HOME=/usr/local/cuda' >> ~/.bashrc\necho 'export PATH=\"$PATH:/usr/local/cuda-7.5/bin\"' >> ~/.bashrc\n\n#install cudnn --> first download cudnn-7.5-linux-x64-v5.0-rc.tar or 7.0-v4\ntar -xf cudnn-7.0-linux-x64-v4.0-prod.tar\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include/\n\n# install all package dependencies\nsudo apt-get install -y \\\nzip \\\nswig \\\nfortran \\\ngit \\\nlibboost-all-dev \\\nlibatlas-base-dev \\\nlibblas-dev \\\nliblapack-dev \\\npython-dev \\\npython-pip \\\nvim \\\nsoftware-properties-common\n\nsudo pip install -U \\\nvirtualenv \\\nbumpy \\\nscipy \\\nmatplotlib \\\ngensim \\\nsacred \\\nscikit-learn \\\nlangdetect \\\npymongo \\\njupiter\n\n# install jdk 1.8 for bazel\nsudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java8-installer\n\ncd\n\n# install bazel\ngit clone https://github.com/bazelbuild/bazel.git\ncd bazel\ngit checkout tags/0.2.0\n./compile.sh\nsudo cp output/bazel /usr/bin\ncd ..\n\n# install tensorflow\ngit clone --recurse-submodules https://github.com/tensorflow/tensorflow\ncd tensorflow\ngit checkout tags/v0.8.0\n./configure\n\nbazel build -c opt --config=cuda //tensorflow/cc:tutorials_example_trainer\nbazel-bin/tensorflow/cc/tutorials_example_trainer --use_gpu\n\nthis freezes the server with these lines as the last ones:\n000002/000001 lambda = 2.000000 x = [0.894427 -0.447214] y = [1.788854 -0.894427]\n000002/000001 lambda = 2.000000 x = [0.894427 -0.447214] y = [1.788854 -0.894427]\n000002/000001 lambda = 2.000000 x = [0.894427 -0.447214] y = [1.788854 -0.894427]\nI also compiled the cuda samples and they all run without a problem", "body": "I still have the same problem, now on a different server (SoftLayer with Tesla k80)\n\nthis is what I did for installing:\n\n```\nsudo apt-get update -y\nsudo apt-get upgrade -y\nsudo apt-get install -y build-essential\nsudo apt-get install -y zip zlib1g-dev\n\n\n# for some perl warning\nlocale-gen en_US en_US.UTF-8\nexport LANGUAGE=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\nsudo dpkg-reconfigure locales\n\n# add the following to /etc/default/locale\n# LC_ALL=\"en_US.UTF-8\"\n# LANG=\"en_US.UTF-8\"\n# LANGUAGE=\"en_US:en\"\n# LC_Type=\"en_US.UTF-8\"\n\nsudo apt-get install -y make pkg-config xors-dev\n\n# Blacklist Noveau which has some kind of conflict with the nvidia driver\necho -e \"blacklist nouveau\\nblacklist lbm-nouveau\\noptions nouveau modeset=0\\nalias nouveau off\\nalias lbm-nouveau off\\n\" | sudo tee /etc/modprobe.d/blacklist-nouveau.conf\necho options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf\nsudo update-initramfs -u\nsudo reboot # Reboot\n\n# install nvidia driver, cuda, cud\nwget http://developer.download.nvidia.com/compute/cuda/7.5/Prod/local_installers/cuda_7.5.18_linux.run\n\nsudo apt-get install -y linux-image-extra-`uname -r` linux-headers-`uname -r` linux-image-`uname -r`\n\nchmod +x cuda_7.5.18_linux.run\n./cuda_7.5.18_linux.run -extract=`pwd`/nvidia_installers\ncd nvidia_installers\n#install driver\nsudo ./NVIDIA-Linux-x86_64-352.39.run \n\n#install cud\nsudo ./cuda-linux64-rel-7.5.18-19867135.run \n\necho 'export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda/lib64\"' >> ~/.bashrc\necho 'export CUDA_HOME=/usr/local/cuda' >> ~/.bashrc\necho 'export PATH=\"$PATH:/usr/local/cuda-7.5/bin\"' >> ~/.bashrc\n\n#install cudnn --> first download cudnn-7.5-linux-x64-v5.0-rc.tar or 7.0-v4\ntar -xf cudnn-7.0-linux-x64-v4.0-prod.tar\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include/\n\n# install all package dependencies\nsudo apt-get install -y \\\nzip \\\nswig \\\nfortran \\\ngit \\\nlibboost-all-dev \\\nlibatlas-base-dev \\\nlibblas-dev \\\nliblapack-dev \\\npython-dev \\\npython-pip \\\nvim \\\nsoftware-properties-common\n\nsudo pip install -U \\\nvirtualenv \\\nbumpy \\\nscipy \\\nmatplotlib \\\ngensim \\\nsacred \\\nscikit-learn \\\nlangdetect \\\npymongo \\\njupiter\n\n# install jdk 1.8 for bazel\nsudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java8-installer\n\ncd\n\n# install bazel\ngit clone https://github.com/bazelbuild/bazel.git\ncd bazel\ngit checkout tags/0.2.0\n./compile.sh\nsudo cp output/bazel /usr/bin\ncd ..\n\n# install tensorflow\ngit clone --recurse-submodules https://github.com/tensorflow/tensorflow\ncd tensorflow\ngit checkout tags/v0.8.0\n./configure\n\nbazel build -c opt --config=cuda //tensorflow/cc:tutorials_example_trainer\nbazel-bin/tensorflow/cc/tutorials_example_trainer --use_gpu\n```\n\nthis freezes the server with these lines as the last ones:\n000002/000001 lambda = 2.000000 x = [0.894427 -0.447214] y = [1.788854 -0.894427]\n000002/000001 lambda = 2.000000 x = [0.894427 -0.447214] y = [1.788854 -0.894427]\n000002/000001 lambda = 2.000000 x = [0.894427 -0.447214] y = [1.788854 -0.894427]\n\nI also compiled the cuda samples and they all run without a problem\n"}