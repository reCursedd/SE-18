{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17977", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17977/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17977/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17977/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17977", "id": 308313975, "node_id": "MDU6SXNzdWUzMDgzMTM5NzU=", "number": 17977, "title": "OOM after repeatedly evaluating inception scores", "user": {"login": "tsc2017", "id": 27691661, "node_id": "MDQ6VXNlcjI3NjkxNjYx", "avatar_url": "https://avatars1.githubusercontent.com/u/27691661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsc2017", "html_url": "https://github.com/tsc2017", "followers_url": "https://api.github.com/users/tsc2017/followers", "following_url": "https://api.github.com/users/tsc2017/following{/other_user}", "gists_url": "https://api.github.com/users/tsc2017/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsc2017/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsc2017/subscriptions", "organizations_url": "https://api.github.com/users/tsc2017/orgs", "repos_url": "https://api.github.com/users/tsc2017/repos", "events_url": "https://api.github.com/users/tsc2017/events{/privacy}", "received_events_url": "https://api.github.com/users/tsc2017/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-03-25T01:34:15Z", "updated_at": "2018-03-25T11:15:33Z", "closed_at": "2018-03-25T11:15:33Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.6</li>\n<li><strong>Python version</strong>: 2.7</li>\n</ul>\n<p>Hi, I run my generative model and evaluate the inception score of the generated images every now and then and encountered out of memory after a lot of iterations. I don't know what the cause is since I built the graph and just feed some values to it.<br>\nMy code goes as follows:</p>\n<pre><code>session=tf.InteractiveSession()\n\ninception_samples = tf.placeholder(tf.float32, shape=[INCEPTION_BATCHES*BATCH_SIZE, DATA_DIM])\n\ndef get_inception_score_op(inception_samples=inception_samples):\n    inception_samples=tf.reshape(inception_samples,[BATCH_SIZE*INCEPTION_BATCHES,NUM_CHANNELS,HEIGHT,WIDTH])\n    inception_samples=tf.transpose(inception_samples,[0,2,3,1])\n    return lib.classifier_score.get_inception_scores(\\\n    inception_samples,batch_size=BATCH_SIZE*INCEPTION_BATCHES, num_inception_images=BATCH_SIZE)\n\ninception_score=get_inception_score_op()\n\ndef get_inception_score():\n    all_samples = []\n    for i in xrange(INCEPTION_BATCHES):# inception score for num_batches of fake data\n        all_samples.append(session.run(fake_sample))     \n    all_samples = np.concatenate(all_samples, axis=0)\n    return inception_score.eval({inception_samples:all_samples})\nfor i in range(ITERATIONS):\n    print get_inception_score()\n</code></pre>\n<p>where  \"lib.classifier_score.get_inception_scores\" is from the file<br>\n<a href=\"url\"># https://github.com/tensorflow/models/blob/master/research/gan/cifar/util.py</a><br>\nthat looks like this:</p>\n<pre><code>tfgan = tf.contrib.gan\n\ndef get_inception_scores(images, batch_size, num_inception_images):\n  \"\"\"Get Inception score for some images.\n\n  Args:\n    images: Image minibatch. Shape [batch size, width, height, channels]. Values\n      are in [-1, 1].\n    batch_size: Python integer. Batch dimension.\n    num_inception_images: Number of images to run through Inception at once.\n\n  Returns:\n    Inception scores. Tensor shape is [batch size].\n\n  Raises:\n    ValueError: If `batch_size` is incompatible with the first dimension of\n      `images`.\n    ValueError: If `batch_size` isn't divisible by `num_inception_images`.\n  \"\"\"\n  # Validate inputs.\n  assert images.shape[-1]==3\n  tf.TensorShape(images.shape)[0:1].assert_is_compatible_with([batch_size])\n  if batch_size % num_inception_images != 0:\n    raise ValueError(\n        '`batch_size` must be divisible by `num_inception_images`.')\n\n  # Resize images.\n  size = 299\n  resized_images = tf.image.resize_bilinear(images, [size, size])\n\n  # Run images through Inception.\n  num_batches = batch_size // num_inception_images\n  inc_score = tfgan.eval.inception_score(\n      resized_images, num_batches=num_batches)\n\n  return inc_score\n</code></pre>\n<p>except that I made some minor changes to it.</p>\n<p>I guess <code>tf.contrib.gan.eval.inception_score()</code> have been taking up my GPU memory.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.6\nPython version: 2.7\n\nHi, I run my generative model and evaluate the inception score of the generated images every now and then and encountered out of memory after a lot of iterations. I don't know what the cause is since I built the graph and just feed some values to it.\nMy code goes as follows:\nsession=tf.InteractiveSession()\n\ninception_samples = tf.placeholder(tf.float32, shape=[INCEPTION_BATCHES*BATCH_SIZE, DATA_DIM])\n\ndef get_inception_score_op(inception_samples=inception_samples):\n    inception_samples=tf.reshape(inception_samples,[BATCH_SIZE*INCEPTION_BATCHES,NUM_CHANNELS,HEIGHT,WIDTH])\n    inception_samples=tf.transpose(inception_samples,[0,2,3,1])\n    return lib.classifier_score.get_inception_scores(\\\n    inception_samples,batch_size=BATCH_SIZE*INCEPTION_BATCHES, num_inception_images=BATCH_SIZE)\n\ninception_score=get_inception_score_op()\n\ndef get_inception_score():\n    all_samples = []\n    for i in xrange(INCEPTION_BATCHES):# inception score for num_batches of fake data\n        all_samples.append(session.run(fake_sample))     \n    all_samples = np.concatenate(all_samples, axis=0)\n    return inception_score.eval({inception_samples:all_samples})\nfor i in range(ITERATIONS):\n    print get_inception_score()\n\nwhere  \"lib.classifier_score.get_inception_scores\" is from the file\n# https://github.com/tensorflow/models/blob/master/research/gan/cifar/util.py\nthat looks like this:\ntfgan = tf.contrib.gan\n\ndef get_inception_scores(images, batch_size, num_inception_images):\n  \"\"\"Get Inception score for some images.\n\n  Args:\n    images: Image minibatch. Shape [batch size, width, height, channels]. Values\n      are in [-1, 1].\n    batch_size: Python integer. Batch dimension.\n    num_inception_images: Number of images to run through Inception at once.\n\n  Returns:\n    Inception scores. Tensor shape is [batch size].\n\n  Raises:\n    ValueError: If `batch_size` is incompatible with the first dimension of\n      `images`.\n    ValueError: If `batch_size` isn't divisible by `num_inception_images`.\n  \"\"\"\n  # Validate inputs.\n  assert images.shape[-1]==3\n  tf.TensorShape(images.shape)[0:1].assert_is_compatible_with([batch_size])\n  if batch_size % num_inception_images != 0:\n    raise ValueError(\n        '`batch_size` must be divisible by `num_inception_images`.')\n\n  # Resize images.\n  size = 299\n  resized_images = tf.image.resize_bilinear(images, [size, size])\n\n  # Run images through Inception.\n  num_batches = batch_size // num_inception_images\n  inc_score = tfgan.eval.inception_score(\n      resized_images, num_batches=num_batches)\n\n  return inc_score\n\nexcept that I made some minor changes to it.\nI guess tf.contrib.gan.eval.inception_score() have been taking up my GPU memory.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.6\r\n- **Python version**: 2.7\r\n\r\n\r\n\r\nHi, I run my generative model and evaluate the inception score of the generated images every now and then and encountered out of memory after a lot of iterations. I don't know what the cause is since I built the graph and just feed some values to it. \r\nMy code goes as follows:\r\n\r\n```\r\nsession=tf.InteractiveSession()\r\n\r\ninception_samples = tf.placeholder(tf.float32, shape=[INCEPTION_BATCHES*BATCH_SIZE, DATA_DIM])\r\n\r\ndef get_inception_score_op(inception_samples=inception_samples):\r\n    inception_samples=tf.reshape(inception_samples,[BATCH_SIZE*INCEPTION_BATCHES,NUM_CHANNELS,HEIGHT,WIDTH])\r\n    inception_samples=tf.transpose(inception_samples,[0,2,3,1])\r\n    return lib.classifier_score.get_inception_scores(\\\r\n    inception_samples,batch_size=BATCH_SIZE*INCEPTION_BATCHES, num_inception_images=BATCH_SIZE)\r\n\r\ninception_score=get_inception_score_op()\r\n\r\ndef get_inception_score():\r\n    all_samples = []\r\n    for i in xrange(INCEPTION_BATCHES):# inception score for num_batches of fake data\r\n        all_samples.append(session.run(fake_sample))     \r\n    all_samples = np.concatenate(all_samples, axis=0)\r\n    return inception_score.eval({inception_samples:all_samples})\r\nfor i in range(ITERATIONS):\r\n    print get_inception_score()\r\n```\r\n\r\nwhere  \"lib.classifier_score.get_inception_scores\" is from the file\r\n[# https://github.com/tensorflow/models/blob/master/research/gan/cifar/util.py](url)\r\nthat looks like this:\r\n```\r\ntfgan = tf.contrib.gan\r\n\r\ndef get_inception_scores(images, batch_size, num_inception_images):\r\n  \"\"\"Get Inception score for some images.\r\n\r\n  Args:\r\n    images: Image minibatch. Shape [batch size, width, height, channels]. Values\r\n      are in [-1, 1].\r\n    batch_size: Python integer. Batch dimension.\r\n    num_inception_images: Number of images to run through Inception at once.\r\n\r\n  Returns:\r\n    Inception scores. Tensor shape is [batch size].\r\n\r\n  Raises:\r\n    ValueError: If `batch_size` is incompatible with the first dimension of\r\n      `images`.\r\n    ValueError: If `batch_size` isn't divisible by `num_inception_images`.\r\n  \"\"\"\r\n  # Validate inputs.\r\n  assert images.shape[-1]==3\r\n  tf.TensorShape(images.shape)[0:1].assert_is_compatible_with([batch_size])\r\n  if batch_size % num_inception_images != 0:\r\n    raise ValueError(\r\n        '`batch_size` must be divisible by `num_inception_images`.')\r\n\r\n  # Resize images.\r\n  size = 299\r\n  resized_images = tf.image.resize_bilinear(images, [size, size])\r\n\r\n  # Run images through Inception.\r\n  num_batches = batch_size // num_inception_images\r\n  inc_score = tfgan.eval.inception_score(\r\n      resized_images, num_batches=num_batches)\r\n\r\n  return inc_score\r\n```\r\nexcept that I made some minor changes to it.\r\n\r\nI guess `tf.contrib.gan.eval.inception_score()` have been taking up my GPU memory."}