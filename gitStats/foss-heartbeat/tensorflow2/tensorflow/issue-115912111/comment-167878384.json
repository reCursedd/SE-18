{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/167878384", "html_url": "https://github.com/tensorflow/tensorflow/issues/7#issuecomment-167878384", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7", "id": 167878384, "node_id": "MDEyOklzc3VlQ29tbWVudDE2Nzg3ODM4NA==", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-29T21:13:17Z", "updated_at": "2015-12-29T21:14:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>For example:</p>\n<p>Moving to stateful objects now would break a bunch of external dependencies.  Of course, this is an undocumented API and therefore folks should expect it to break in their projects.  However, I'm afraid of breaking external projects in subtle ways that don't emit errors.  This indeed may happen with this change.  Especially for those who depth-stack RNNs on top of each other using the same instance.</p>\n<p>In addition, there are those who argue that the RNNCell should continue to be a purely logical object with no state, so you can reuse the same instance of RNNCell across multiple RNNs without fear of reusing the same variable in multiple places (though get_variable's checks for over-sharing may ameliorate this somewhat).</p>\n<p>EDIT: scratch that last sentence.  the get_variable would then be called only once in the RNNCell's initialization, and all those get_variable protections would go out the door :(.</p>", "body_text": "For example:\nMoving to stateful objects now would break a bunch of external dependencies.  Of course, this is an undocumented API and therefore folks should expect it to break in their projects.  However, I'm afraid of breaking external projects in subtle ways that don't emit errors.  This indeed may happen with this change.  Especially for those who depth-stack RNNs on top of each other using the same instance.\nIn addition, there are those who argue that the RNNCell should continue to be a purely logical object with no state, so you can reuse the same instance of RNNCell across multiple RNNs without fear of reusing the same variable in multiple places (though get_variable's checks for over-sharing may ameliorate this somewhat).\nEDIT: scratch that last sentence.  the get_variable would then be called only once in the RNNCell's initialization, and all those get_variable protections would go out the door :(.", "body": "For example:\n\nMoving to stateful objects now would break a bunch of external dependencies.  Of course, this is an undocumented API and therefore folks should expect it to break in their projects.  However, I'm afraid of breaking external projects in subtle ways that don't emit errors.  This indeed may happen with this change.  Especially for those who depth-stack RNNs on top of each other using the same instance.\n\nIn addition, there are those who argue that the RNNCell should continue to be a purely logical object with no state, so you can reuse the same instance of RNNCell across multiple RNNs without fear of reusing the same variable in multiple places (though get_variable's checks for over-sharing may ameliorate this somewhat).\n\nEDIT: scratch that last sentence.  the get_variable would then be called only once in the RNNCell's initialization, and all those get_variable protections would go out the door :(.\n"}