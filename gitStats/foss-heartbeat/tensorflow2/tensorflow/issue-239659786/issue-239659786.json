{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11160", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11160/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11160/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11160/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11160", "id": 239659786, "node_id": "MDU6SXNzdWUyMzk2NTk3ODY=", "number": 11160, "title": "High variance in training convergence between keras (with tf backend) and tf.contrib.keras", "user": {"login": "Arvinds-ds", "id": 25126304, "node_id": "MDQ6VXNlcjI1MTI2MzA0", "avatar_url": "https://avatars3.githubusercontent.com/u/25126304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arvinds-ds", "html_url": "https://github.com/Arvinds-ds", "followers_url": "https://api.github.com/users/Arvinds-ds/followers", "following_url": "https://api.github.com/users/Arvinds-ds/following{/other_user}", "gists_url": "https://api.github.com/users/Arvinds-ds/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arvinds-ds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arvinds-ds/subscriptions", "organizations_url": "https://api.github.com/users/Arvinds-ds/orgs", "repos_url": "https://api.github.com/users/Arvinds-ds/repos", "events_url": "https://api.github.com/users/Arvinds-ds/events{/privacy}", "received_events_url": "https://api.github.com/users/Arvinds-ds/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-30T02:15:34Z", "updated_at": "2017-06-30T23:55:30Z", "closed_at": "2017-06-30T23:55:28Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nWindows 10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n1.2</li>\n<li><strong>Python version</strong>:<br>\n3.6</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I started to move my keras (Keras 2.0.4) scripts to tf.contrib.keras  (tf version 1.2) but I am achieving worse performance though the porting was seamless. Not sure why there is such huge discrepancy. in training performance</p>\n<h3>Source code / logs</h3>\n<p>Original (Keras 2.0.4 code)</p>\n<pre><code>import tensorflow as tf\nimport keras\n\nresnet = keras.applications.ResNet50(include_top=False,weights='imagenet', pooling='avg')\ninput_ = resnet.input\nfinal_layer = resnet.layers[-1]\noutput_ = keras.layers.Dense(1,activation='sigmoid')(final_layer.output)\nmodel = keras.models.Model(input_, output_)\nnum_layers=len(model.layers)\nfor i,layer in enumerate(model.layers):\n    if i == num_layers -1 :\n        layer.trainable=True\n    else:\n        layer.trainable = False\n\nig=keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=preprocess_function)\ntraining_data =ig.flow_from_directory('../../../data/dogsvscats/train/', class_mode='binary',target_size=(224,224),batch_size=64)\nvalidation_data = ig.flow_from_directory('../../../data/dogsvscats/validation/',class_mode='binary', target_size=(224,224), batch_size=64)\n\nmodel.compile(keras.optimizers.Adam(lr=1e-4),keras.losses.binary_crossentropy,metrics=['accuracy'])\nmodel.fit_generator(training_data,steps_per_epoch=4000, epochs=2, validation_data=validation_data, validation_steps=300)\n</code></pre>\n<p><em><strong>This model achieved 96% accuracy in 1 epoch</strong></em> (which is expected)</p>\n<p>Same code (tf.contrib.keras)</p>\n<pre><code>import tensorflow as tf\nimport tensorflow.contrib.keras as keras\n\nresnet = keras.applications.ResNet50(include_top=False,weights='imagenet', pooling='avg')\ninput_ = resnet.input\nfinal_layer = resnet.layers[-1]\noutput_ = keras.layers.Dense(1,activation='sigmoid')(final_layer.output)\nmodel = keras.models.Model(input_, output_)\nnum_layers=len(model.layers)\nfor i,layer in enumerate(model.layers):\n    if i == num_layers -1 :\n        layer.trainable=True\n    else:\n        layer.trainable = False\n\nig=keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=preprocess_function)\ntraining_data =ig.flow_from_directory('../../../data/dogsvscats/train/', class_mode='binary',target_size=(224,224),batch_size=64)\nvalidation_data = ig.flow_from_directory('../../../data/dogsvscats/validation/',class_mode='binary', target_size=(224,224), batch_size=64)\n\nmodel.compile(keras.optimizers.Adam(lr=1e-4),keras.losses.binary_crossentropy,metrics=['accuracy'])\nmodel.fit_generator(training_data,steps_per_epoch=4000, epochs=2, validation_data=validation_data, validation_steps=300)\n\n</code></pre>\n<p>_<strong>This model struggles to achieve 58% accuracy after 1 epoch and 61% after 2 epochs</strong></p>\n<p>Is there something different in terms of hyper-parameter settings that is required when switching between the 2 versions.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nWindows 10\nTensorFlow installed from (source or binary):\nbinary\nTensorFlow version (use command below):\n1.2\nPython version:\n3.6\n\nDescribe the problem\nI started to move my keras (Keras 2.0.4) scripts to tf.contrib.keras  (tf version 1.2) but I am achieving worse performance though the porting was seamless. Not sure why there is such huge discrepancy. in training performance\nSource code / logs\nOriginal (Keras 2.0.4 code)\nimport tensorflow as tf\nimport keras\n\nresnet = keras.applications.ResNet50(include_top=False,weights='imagenet', pooling='avg')\ninput_ = resnet.input\nfinal_layer = resnet.layers[-1]\noutput_ = keras.layers.Dense(1,activation='sigmoid')(final_layer.output)\nmodel = keras.models.Model(input_, output_)\nnum_layers=len(model.layers)\nfor i,layer in enumerate(model.layers):\n    if i == num_layers -1 :\n        layer.trainable=True\n    else:\n        layer.trainable = False\n\nig=keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=preprocess_function)\ntraining_data =ig.flow_from_directory('../../../data/dogsvscats/train/', class_mode='binary',target_size=(224,224),batch_size=64)\nvalidation_data = ig.flow_from_directory('../../../data/dogsvscats/validation/',class_mode='binary', target_size=(224,224), batch_size=64)\n\nmodel.compile(keras.optimizers.Adam(lr=1e-4),keras.losses.binary_crossentropy,metrics=['accuracy'])\nmodel.fit_generator(training_data,steps_per_epoch=4000, epochs=2, validation_data=validation_data, validation_steps=300)\n\nThis model achieved 96% accuracy in 1 epoch (which is expected)\nSame code (tf.contrib.keras)\nimport tensorflow as tf\nimport tensorflow.contrib.keras as keras\n\nresnet = keras.applications.ResNet50(include_top=False,weights='imagenet', pooling='avg')\ninput_ = resnet.input\nfinal_layer = resnet.layers[-1]\noutput_ = keras.layers.Dense(1,activation='sigmoid')(final_layer.output)\nmodel = keras.models.Model(input_, output_)\nnum_layers=len(model.layers)\nfor i,layer in enumerate(model.layers):\n    if i == num_layers -1 :\n        layer.trainable=True\n    else:\n        layer.trainable = False\n\nig=keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=preprocess_function)\ntraining_data =ig.flow_from_directory('../../../data/dogsvscats/train/', class_mode='binary',target_size=(224,224),batch_size=64)\nvalidation_data = ig.flow_from_directory('../../../data/dogsvscats/validation/',class_mode='binary', target_size=(224,224), batch_size=64)\n\nmodel.compile(keras.optimizers.Adam(lr=1e-4),keras.losses.binary_crossentropy,metrics=['accuracy'])\nmodel.fit_generator(training_data,steps_per_epoch=4000, epochs=2, validation_data=validation_data, validation_steps=300)\n\n\n_This model struggles to achieve 58% accuracy after 1 epoch and 61% after 2 epochs\nIs there something different in terms of hyper-parameter settings that is required when switching between the 2 versions.", "body": "\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nWindows 10\r\n- **TensorFlow installed from (source or binary)**:\r\nbinary\r\n- **TensorFlow version (use command below)**:\r\n1.2\r\n- **Python version**: \r\n3.6\r\n\r\n\r\n### Describe the problem\r\nI started to move my keras (Keras 2.0.4) scripts to tf.contrib.keras  (tf version 1.2) but I am achieving worse performance though the porting was seamless. Not sure why there is such huge discrepancy. in training performance\r\n\r\n### Source code / logs\r\nOriginal (Keras 2.0.4 code)\r\n```\r\nimport tensorflow as tf\r\nimport keras\r\n\r\nresnet = keras.applications.ResNet50(include_top=False,weights='imagenet', pooling='avg')\r\ninput_ = resnet.input\r\nfinal_layer = resnet.layers[-1]\r\noutput_ = keras.layers.Dense(1,activation='sigmoid')(final_layer.output)\r\nmodel = keras.models.Model(input_, output_)\r\nnum_layers=len(model.layers)\r\nfor i,layer in enumerate(model.layers):\r\n    if i == num_layers -1 :\r\n        layer.trainable=True\r\n    else:\r\n        layer.trainable = False\r\n\r\nig=keras.preprocessing.image.ImageDataGenerator(\r\n    preprocessing_function=preprocess_function)\r\ntraining_data =ig.flow_from_directory('../../../data/dogsvscats/train/', class_mode='binary',target_size=(224,224),batch_size=64)\r\nvalidation_data = ig.flow_from_directory('../../../data/dogsvscats/validation/',class_mode='binary', target_size=(224,224), batch_size=64)\r\n\r\nmodel.compile(keras.optimizers.Adam(lr=1e-4),keras.losses.binary_crossentropy,metrics=['accuracy'])\r\nmodel.fit_generator(training_data,steps_per_epoch=4000, epochs=2, validation_data=validation_data, validation_steps=300)\r\n```\r\n\r\n___This model achieved 96% accuracy in 1 epoch___ (which is expected)\r\n\r\nSame code (tf.contrib.keras)\r\n\r\n```\r\nimport tensorflow as tf\r\nimport tensorflow.contrib.keras as keras\r\n\r\nresnet = keras.applications.ResNet50(include_top=False,weights='imagenet', pooling='avg')\r\ninput_ = resnet.input\r\nfinal_layer = resnet.layers[-1]\r\noutput_ = keras.layers.Dense(1,activation='sigmoid')(final_layer.output)\r\nmodel = keras.models.Model(input_, output_)\r\nnum_layers=len(model.layers)\r\nfor i,layer in enumerate(model.layers):\r\n    if i == num_layers -1 :\r\n        layer.trainable=True\r\n    else:\r\n        layer.trainable = False\r\n\r\nig=keras.preprocessing.image.ImageDataGenerator(\r\n    preprocessing_function=preprocess_function)\r\ntraining_data =ig.flow_from_directory('../../../data/dogsvscats/train/', class_mode='binary',target_size=(224,224),batch_size=64)\r\nvalidation_data = ig.flow_from_directory('../../../data/dogsvscats/validation/',class_mode='binary', target_size=(224,224), batch_size=64)\r\n\r\nmodel.compile(keras.optimizers.Adam(lr=1e-4),keras.losses.binary_crossentropy,metrics=['accuracy'])\r\nmodel.fit_generator(training_data,steps_per_epoch=4000, epochs=2, validation_data=validation_data, validation_steps=300)\r\n\r\n```\r\n\r\n___This model struggles to achieve 58% accuracy after 1 epoch and 61% after 2 epochs__\r\n\r\nIs there something different in terms of hyper-parameter settings that is required when switching between the 2 versions. \r\n\r\n"}