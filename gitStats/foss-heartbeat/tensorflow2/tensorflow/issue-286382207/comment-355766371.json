{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/355766371", "html_url": "https://github.com/tensorflow/tensorflow/issues/15887#issuecomment-355766371", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15887", "id": 355766371, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTc2NjM3MQ==", "user": {"login": "Gemesys", "id": 16905336, "node_id": "MDQ6VXNlcjE2OTA1MzM2", "avatar_url": "https://avatars1.githubusercontent.com/u/16905336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gemesys", "html_url": "https://github.com/Gemesys", "followers_url": "https://api.github.com/users/Gemesys/followers", "following_url": "https://api.github.com/users/Gemesys/following{/other_user}", "gists_url": "https://api.github.com/users/Gemesys/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gemesys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gemesys/subscriptions", "organizations_url": "https://api.github.com/users/Gemesys/orgs", "repos_url": "https://api.github.com/users/Gemesys/repos", "events_url": "https://api.github.com/users/Gemesys/events{/privacy}", "received_events_url": "https://api.github.com/users/Gemesys/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-06T18:38:05Z", "updated_at": "2018-01-06T18:40:08Z", "author_association": "NONE", "body_html": "<p>Solution:  Got it to work. Custom-built Tensorflow 1.4.1 installed successfully, via \"pip install ... &lt; of the build process_generated wheel file&gt;\"    .  I had booked time to learn in detail how pip packages are built and installed to python, dive deep down another rabbit hole  - but the solution here was surprisingly simple.  **** Just rename the newly built wheel file! ***.</p>\n<p>Example:<br>\ncd &lt;to the directory where you put the results of the tensorflow \"build_pip_package\"&gt;<br>\ncp  tensorflow-1.4.1-cp27-cp27m-macosx_10_4_x86_64.whl   tensorflow-1.4.1-py2-none-any.whl<br>\npip install tensorflow-1.4.1-py2-none-any.whl</p>\n<p>The above worked fine, no problem. The source-built version of TensorFlow-1.4.1 successfully loaded into the Python 2.7.14 version that I used when I ran the bazel build, which was the one in /usr/local/bin (not the <em>other</em> Python, that I installed from Python site, which is installed into: \"/Library/Frameworks/Python.framework/...\" directory.    As part of the \"pip install...\", the original tensorflow-1.4.0 version that was installed from binary was successfully removed, all dependencies seemed to be successfully resolved, and the newly-built Tensorflow-1.4.1 was installed.  Confirm this by listing your installed packages in Python, with:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>import pip<br>\nprint (pip.get_installed_distributions())</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>So, to be clear:  This combo works:  MacOS Yosemite 10.10.5, Python 2.7.14 (built from source), Xcode7.2.1 (the last one that can run on Yosemite, downloaded from Apple), Bazel 0.9.0 (latest, requires JDK 8.0. Bazel built from source), Tensorflow-1.4.1 (built from source, using Bazel), and then Python wheel file built using the \"build_pip_package\" script, in the \"bazel-bin/tensorflow/tools/pip_package\" directory.</p>\n<p>You need to rename the resulting .whl file as indicated above, for the \"pip install tensorflow... .whl\" final step to work.   Ran some test files to confirm TensorFlow operation, and confirmed that for several tests, the source-built Tensorflow-1.4.1 operates, on the MacBook under MacOS, exactly the same as the binary version of Tensorflow-1.4.0, that was previously installed.<br>\nMarking this closed and solved.</p>", "body_text": "Solution:  Got it to work. Custom-built Tensorflow 1.4.1 installed successfully, via \"pip install ... < of the build process_generated wheel file>\"    .  I had booked time to learn in detail how pip packages are built and installed to python, dive deep down another rabbit hole  - but the solution here was surprisingly simple.  **** Just rename the newly built wheel file! ***.\nExample:\ncd <to the directory where you put the results of the tensorflow \"build_pip_package\">\ncp  tensorflow-1.4.1-cp27-cp27m-macosx_10_4_x86_64.whl   tensorflow-1.4.1-py2-none-any.whl\npip install tensorflow-1.4.1-py2-none-any.whl\nThe above worked fine, no problem. The source-built version of TensorFlow-1.4.1 successfully loaded into the Python 2.7.14 version that I used when I ran the bazel build, which was the one in /usr/local/bin (not the other Python, that I installed from Python site, which is installed into: \"/Library/Frameworks/Python.framework/...\" directory.    As part of the \"pip install...\", the original tensorflow-1.4.0 version that was installed from binary was successfully removed, all dependencies seemed to be successfully resolved, and the newly-built Tensorflow-1.4.1 was installed.  Confirm this by listing your installed packages in Python, with:\n\n\n\nimport pip\nprint (pip.get_installed_distributions())\n\n\n\nSo, to be clear:  This combo works:  MacOS Yosemite 10.10.5, Python 2.7.14 (built from source), Xcode7.2.1 (the last one that can run on Yosemite, downloaded from Apple), Bazel 0.9.0 (latest, requires JDK 8.0. Bazel built from source), Tensorflow-1.4.1 (built from source, using Bazel), and then Python wheel file built using the \"build_pip_package\" script, in the \"bazel-bin/tensorflow/tools/pip_package\" directory.\nYou need to rename the resulting .whl file as indicated above, for the \"pip install tensorflow... .whl\" final step to work.   Ran some test files to confirm TensorFlow operation, and confirmed that for several tests, the source-built Tensorflow-1.4.1 operates, on the MacBook under MacOS, exactly the same as the binary version of Tensorflow-1.4.0, that was previously installed.\nMarking this closed and solved.", "body": "Solution:  Got it to work. Custom-built Tensorflow 1.4.1 installed successfully, via \"pip install ... < of the build process_generated wheel file>\"    .  I had booked time to learn in detail how pip packages are built and installed to python, dive deep down another rabbit hole  - but the solution here was surprisingly simple.  **** Just rename the newly built wheel file! ***.  \r\n\r\nExample:\r\ncd <to the directory where you put the results of the tensorflow \"build_pip_package\">\r\ncp  tensorflow-1.4.1-cp27-cp27m-macosx_10_4_x86_64.whl   tensorflow-1.4.1-py2-none-any.whl\r\npip install tensorflow-1.4.1-py2-none-any.whl\r\n\r\nThe above worked fine, no problem. The source-built version of TensorFlow-1.4.1 successfully loaded into the Python 2.7.14 version that I used when I ran the bazel build, which was the one in /usr/local/bin (not the *other* Python, that I installed from Python site, which is installed into: \"/Library/Frameworks/Python.framework/...\" directory.    As part of the \"pip install...\", the original tensorflow-1.4.0 version that was installed from binary was successfully removed, all dependencies seemed to be successfully resolved, and the newly-built Tensorflow-1.4.1 was installed.  Confirm this by listing your installed packages in Python, with:\r\n\r\n>>> import pip\r\n>>> print (pip.get_installed_distributions())\r\n\r\nSo, to be clear:  This combo works:  MacOS Yosemite 10.10.5, Python 2.7.14 (built from source), Xcode7.2.1 (the last one that can run on Yosemite, downloaded from Apple), Bazel 0.9.0 (latest, requires JDK 8.0. Bazel built from source), Tensorflow-1.4.1 (built from source, using Bazel), and then Python wheel file built using the \"build_pip_package\" script, in the \"bazel-bin/tensorflow/tools/pip_package\" directory.  \r\n\r\nYou need to rename the resulting .whl file as indicated above, for the \"pip install tensorflow... .whl\" final step to work.   Ran some test files to confirm TensorFlow operation, and confirmed that for several tests, the source-built Tensorflow-1.4.1 operates, on the MacBook under MacOS, exactly the same as the binary version of Tensorflow-1.4.0, that was previously installed.\r\nMarking this closed and solved.\r\n"}