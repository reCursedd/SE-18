{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/243083260", "html_url": "https://github.com/tensorflow/tensorflow/issues/3816#issuecomment-243083260", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3816", "id": 243083260, "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzA4MzI2MA==", "user": {"login": "Hvass-Labs", "id": 13588114, "node_id": "MDQ6VXNlcjEzNTg4MTE0", "avatar_url": "https://avatars2.githubusercontent.com/u/13588114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hvass-Labs", "html_url": "https://github.com/Hvass-Labs", "followers_url": "https://api.github.com/users/Hvass-Labs/followers", "following_url": "https://api.github.com/users/Hvass-Labs/following{/other_user}", "gists_url": "https://api.github.com/users/Hvass-Labs/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hvass-Labs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hvass-Labs/subscriptions", "organizations_url": "https://api.github.com/users/Hvass-Labs/orgs", "repos_url": "https://api.github.com/users/Hvass-Labs/repos", "events_url": "https://api.github.com/users/Hvass-Labs/events{/privacy}", "received_events_url": "https://api.github.com/users/Hvass-Labs/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-29T09:56:48Z", "updated_at": "2016-08-29T09:56:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for the comments.</p>\n<p>I suppose there are two issues when the pixel values overflow beyond the [0, 1] range.</p>\n<p>(1) Whether the classification performance of the network is affected. I think this might be the case because this was how I initially discovered the overflow, because my neural network performed worse. Although it's been several weeks now, so I can't remember the details.</p>\n<p>(2) Plotting the images with pixels that have overflown shows weird pixels like in the images above.</p>\n<p>A simple solution is to finalize the random distortions with two lines of code that limit the pixel values to [0, 1], like so:</p>\n<pre><code>image = tf.image.random_contrast(image, lower=0.2, upper=1.8)\n\n# Do various other distortions ...\n\n# Limit pixel values to [0, 1]\nimage = tf.minimum(image, 1.0)\nimage = tf.maximum(image, 0.0)\n</code></pre>\n<p>Example with this limiting when doing various random distortions:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/13588114/18047760/c1ad0070-6dde-11e6-8367-2990eef537c6.png\"><img src=\"https://cloud.githubusercontent.com/assets/13588114/18047760/c1ad0070-6dde-11e6-8367-2990eef537c6.png\" alt=\"limited\" style=\"max-width:100%;\"></a></p>\n<p>Without the limiting:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/13588114/18047773/c98298aa-6dde-11e6-94ec-af1c5c5401a5.png\"><img src=\"https://cloud.githubusercontent.com/assets/13588114/18047773/c98298aa-6dde-11e6-94ec-af1c5c5401a5.png\" alt=\"overflow\" style=\"max-width:100%;\"></a></p>\n<p>Note: To get the same random values in these two sets of images, I first set the random seed using <code>tf.set_random_seed(42)</code>, but the two right-most images in the top-row have different random crops. I don't know why.</p>", "body_text": "Thanks for the comments.\nI suppose there are two issues when the pixel values overflow beyond the [0, 1] range.\n(1) Whether the classification performance of the network is affected. I think this might be the case because this was how I initially discovered the overflow, because my neural network performed worse. Although it's been several weeks now, so I can't remember the details.\n(2) Plotting the images with pixels that have overflown shows weird pixels like in the images above.\nA simple solution is to finalize the random distortions with two lines of code that limit the pixel values to [0, 1], like so:\nimage = tf.image.random_contrast(image, lower=0.2, upper=1.8)\n\n# Do various other distortions ...\n\n# Limit pixel values to [0, 1]\nimage = tf.minimum(image, 1.0)\nimage = tf.maximum(image, 0.0)\n\nExample with this limiting when doing various random distortions:\n\nWithout the limiting:\n\nNote: To get the same random values in these two sets of images, I first set the random seed using tf.set_random_seed(42), but the two right-most images in the top-row have different random crops. I don't know why.", "body": "Thanks for the comments.\n\nI suppose there are two issues when the pixel values overflow beyond the [0, 1] range.\n\n(1) Whether the classification performance of the network is affected. I think this might be the case because this was how I initially discovered the overflow, because my neural network performed worse. Although it's been several weeks now, so I can't remember the details.\n\n(2) Plotting the images with pixels that have overflown shows weird pixels like in the images above.\n\nA simple solution is to finalize the random distortions with two lines of code that limit the pixel values to [0, 1], like so:\n\n```\nimage = tf.image.random_contrast(image, lower=0.2, upper=1.8)\n\n# Do various other distortions ...\n\n# Limit pixel values to [0, 1]\nimage = tf.minimum(image, 1.0)\nimage = tf.maximum(image, 0.0)\n```\n\nExample with this limiting when doing various random distortions:\n\n![limited](https://cloud.githubusercontent.com/assets/13588114/18047760/c1ad0070-6dde-11e6-8367-2990eef537c6.png)\n\nWithout the limiting:\n\n![overflow](https://cloud.githubusercontent.com/assets/13588114/18047773/c98298aa-6dde-11e6-94ec-af1c5c5401a5.png)\n\nNote: To get the same random values in these two sets of images, I first set the random seed using `tf.set_random_seed(42)`, but the two right-most images in the top-row have different random crops. I don't know why.\n"}