{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/140989659", "pull_request_review_id": 65136974, "id": 140989659, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk4OTY1OQ==", "diff_hunk": "@@ -416,6 +420,139 @@ def max_pooling2d(inputs,\n   return layer.apply(inputs)\n \n \n+\n+def max_pool_2d_nxn_regions(inputs, pool_dimension, mode):\n+  \"\"\"\n+  Args:\n+    inputs: The tensor over which to pool. Must have rank 4.\n+    pool_dimension: The dimenstion level(bin size)\n+      over which spatial pooling is performed.\n+    mode: Pooling mode 'max' or 'avg'.\n+\n+  Returns:\n+    The output list of (pool_dimension * pool_dimension) tensors.\n+\n+  \"\"\"\n+  inputs_shape = array_ops.shape(inputs)\n+  h = math_ops.cast(array_ops.gather(inputs_shape, 1), dtypes.int32)\n+  w = math_ops.cast(array_ops.gather(inputs_shape, 2), dtypes.int32)\n+\n+  if mode == 'max':\n+    pooling_op = math_ops.reduce_max\n+  elif mode == 'avg':\n+    pooling_op = math_ops.reduce_mean\n+  else:\n+    msg = \"Mode must be either 'max' or 'avg'. Got '{0}'\"\n+    raise ValueError(msg.format(mode))\n+\n+  result = []\n+  n = pool_dimension\n+  for row in range(pool_dimension):\n+    for col in range(pool_dimension):\n+      # start_h = floor(row / n * h)\n+      start_h = math_ops.cast(math_ops.floor(math_ops.multiply(math_ops.divide(row, n), math_ops.cast(h, dtypes.float32))), dtypes.int32)\n+      # end_h = ceil((row + 1) / n * h)\n+      end_h = math_ops.cast(math_ops.ceil(math_ops.multiply(math_ops.divide((row + 1), n), math_ops.cast(h, dtypes.float32))), dtypes.int32)\n+      # start_w = floor(col / n * w)\n+      start_w = math_ops.cast(math_ops.floor(math_ops.multiply(math_ops.divide(col, n), math_ops.cast(w, dtypes.float32))), dtypes.int32)\n+      # end_w = ceil((col + 1) / n * w)\n+      end_w = math_ops.cast(math_ops.ceil(math_ops.multiply(math_ops.divide((col + 1), n), math_ops.cast(w, dtypes.float32))), dtypes.int32)\n+      pooling_region = inputs[:, start_h:end_h, start_w:end_w, :]\n+      pool_result = pooling_op(pooling_region, axis=(1, 2))\n+      result.append(pool_result)\n+  return result\n+\n+\n+def spatial_pyramid_pooling(inputs, dimensions=None,\n+                            mode='max', implementation='kaiming'):\n+  \"\"\"\n+    Spatial pyramid pooling (SPP) is a pooling strategy to result in an output of fixed size.\n+    It will turn a 2D input of arbitrary size into an output of fixed dimension.\n+    Hence, the convlutional part of a DNN can be connected to a dense part", "path": "tensorflow/python/layers/pooling.py", "position": null, "original_position": 67, "commit_id": "6699a8bb0c3e68f7b22764c631e1fa5a1ba87b48", "original_commit_id": "de3be547985e8afd2b1b18179f23a571c8a4f19b", "user": {"login": "RikHeijdens", "id": 7520719, "node_id": "MDQ6VXNlcjc1MjA3MTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/7520719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RikHeijdens", "html_url": "https://github.com/RikHeijdens", "followers_url": "https://api.github.com/users/RikHeijdens/followers", "following_url": "https://api.github.com/users/RikHeijdens/following{/other_user}", "gists_url": "https://api.github.com/users/RikHeijdens/gists{/gist_id}", "starred_url": "https://api.github.com/users/RikHeijdens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RikHeijdens/subscriptions", "organizations_url": "https://api.github.com/users/RikHeijdens/orgs", "repos_url": "https://api.github.com/users/RikHeijdens/repos", "events_url": "https://api.github.com/users/RikHeijdens/events{/privacy}", "received_events_url": "https://api.github.com/users/RikHeijdens/received_events", "type": "User", "site_admin": false}, "body": "Typo: convlutional -> convolutional", "created_at": "2017-09-26T08:35:01Z", "updated_at": "2017-12-27T04:57:51Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13259#discussion_r140989659", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13259", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/140989659"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13259#discussion_r140989659"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13259"}}, "body_html": "<p>Typo: convlutional -&gt; convolutional</p>", "body_text": "Typo: convlutional -> convolutional"}