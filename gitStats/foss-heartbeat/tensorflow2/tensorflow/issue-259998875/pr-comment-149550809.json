{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/149550809", "pull_request_review_id": 74961891, "id": 149550809, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0OTU1MDgwOQ==", "diff_hunk": "@@ -0,0 +1,169 @@\n+# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# =============================================================================\n+\n+# pylint: disable=unused-import,g-bad-import-order\n+\"\"\"Contains the pooling layer classes and their functional aliases.\n+\"\"\"\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import numpy as np\n+\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import tensor_shape\n+from tensorflow.python.layers import base\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import math_ops\n+from tensorflow.python.ops import nn\n+\n+\n+def max_pool_2d_nxn_regions(inputs, pool_dimension, mode):\n+  \"\"\"\n+  Args:\n+    inputs: The tensor over which to pool. Must have rank 4.\n+    pool_dimension: The dimenstion level(bin size)\n+      over which spatial pooling is performed.\n+    mode: Pooling mode 'max' or 'avg'.\n+\n+  Returns:\n+    The output list of (pool_dimension * pool_dimension) tensors.\n+\n+  \"\"\"\n+  inputs_shape = array_ops.shape(inputs)\n+  h = math_ops.cast(array_ops.gather(inputs_shape, 1), dtypes.int32)\n+  w = math_ops.cast(array_ops.gather(inputs_shape, 2), dtypes.int32)\n+\n+  if mode == 'max':\n+    pooling_op = math_ops.reduce_max\n+  elif mode == 'avg':\n+    pooling_op = math_ops.reduce_mean\n+  else:\n+    msg = \"Mode must be either 'max' or 'avg'. Got '{0}'\"\n+    raise ValueError(msg.format(mode))\n+\n+  result = []\n+  n = pool_dimension\n+  for row in range(pool_dimension):\n+    for col in range(pool_dimension):\n+      # start_h = floor(row / n * h)\n+      start_h = math_ops.cast(\n+        math_ops.floor(math_ops.multiply(math_ops.divide(row, n), math_ops.cast(h, dtypes.float32))), dtypes.int32)\n+      # end_h = ceil((row + 1) / n * h)\n+      end_h = math_ops.cast(\n+        math_ops.ceil(math_ops.multiply(math_ops.divide((row + 1), n), math_ops.cast(h, dtypes.float32))), dtypes.int32)\n+      # start_w = floor(col / n * w)\n+      start_w = math_ops.cast(\n+        math_ops.floor(math_ops.multiply(math_ops.divide(col, n), math_ops.cast(w, dtypes.float32))), dtypes.int32)\n+      # end_w = ceil((col + 1) / n * w)\n+      end_w = math_ops.cast(\n+        math_ops.ceil(math_ops.multiply(math_ops.divide((col + 1), n), math_ops.cast(w, dtypes.float32))), dtypes.int32)\n+      pooling_region = inputs[:, start_h:end_h, start_w:end_w, :]\n+      pool_result = pooling_op(pooling_region, axis=(1, 2))\n+      result.append(pool_result)\n+  return result\n+\n+\n+def spatial_pyramid_pooling(inputs, dimensions=None,\n+                            mode='max', implementation='spp'):\n+  \"\"\"\n+    Spatial pyramid pooling (SPP) is a pooling strategy to result in an output of fixed size.\n+    It will turn a 2D input of arbitrary size into an output of fixed dimension.\n+    Hence, the convolutional part of a DNN can be connected to a dense part\n+    with a fixed number of nodes even if the dimensions of the input\n+    image are unknown.\n+    The pooling is performed over :math:`l` pooling levels.\n+    Each pooling level :math:`i` will create :math:`M_i` output features.\n+    :math:`M_i` is given by :math:`n_i * n_i`, with :math:`n_i` as the number\n+    of pooling operations per dimension level :math:`i`.\n+    The length of the parameter dimensions is the level of the spatial pyramid.\n+\n+  Args:\n+    inputs: The tensor over which to pool. Must have rank 4.\n+    dimensions: The list of bin sizes over which pooling is to be done.\n+    mode: Pooling mode 'max' or 'avg'.\n+    implementation: The implementation to use, either 'spp' or 'spp_optimized'.\n+      `spp` is the original implementation from the paper, and supports variable\n+      sizes of input vectors, which `spp_optimized` does not support.\n+\n+  Returns:\n+    Output tensor.\n+  \"\"\"\n+  layer = SpatialPyramidPooling(dimensions=dimensions,\n+                                mode=mode,\n+                                implementation=implementation)\n+  return layer.apply(inputs)\n+\n+\n+class SpatialPyramidPooling(base.Layer):\n+  \"\"\"\n+    Spatial pyramid pooling (SPP) is a pooling strategy to result in an output of fixed size.", "path": "tensorflow/contrib/layers/python/layers/pooling.py", "position": null, "original_position": 112, "commit_id": "6699a8bb0c3e68f7b22764c631e1fa5a1ba87b48", "original_commit_id": "878df838558e8be3b2bbe0271de27f0da47acf5d", "user": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "body": "Invalid docstring format (should start with a one-line summary, not a line break)", "created_at": "2017-11-08T01:02:48Z", "updated_at": "2017-12-27T04:57:51Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13259#discussion_r149550809", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13259", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/149550809"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13259#discussion_r149550809"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13259"}}, "body_html": "<p>Invalid docstring format (should start with a one-line summary, not a line break)</p>", "body_text": "Invalid docstring format (should start with a one-line summary, not a line break)"}