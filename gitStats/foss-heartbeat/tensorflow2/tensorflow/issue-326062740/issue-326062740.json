{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19528", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19528/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19528/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19528/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19528", "id": 326062740, "node_id": "MDU6SXNzdWUzMjYwNjI3NDA=", "number": 19528, "title": "Restore problem when work with multiple tf.contrib.lookup.MutableHashTable", "user": {"login": "wrongtest", "id": 7600935, "node_id": "MDQ6VXNlcjc2MDA5MzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7600935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wrongtest", "html_url": "https://github.com/wrongtest", "followers_url": "https://api.github.com/users/wrongtest/followers", "following_url": "https://api.github.com/users/wrongtest/following{/other_user}", "gists_url": "https://api.github.com/users/wrongtest/gists{/gist_id}", "starred_url": "https://api.github.com/users/wrongtest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wrongtest/subscriptions", "organizations_url": "https://api.github.com/users/wrongtest/orgs", "repos_url": "https://api.github.com/users/wrongtest/repos", "events_url": "https://api.github.com/users/wrongtest/events{/privacy}", "received_events_url": "https://api.github.com/users/wrongtest/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "ysuematsu", "id": 15674604, "node_id": "MDQ6VXNlcjE1Njc0NjA0", "avatar_url": "https://avatars3.githubusercontent.com/u/15674604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysuematsu", "html_url": "https://github.com/ysuematsu", "followers_url": "https://api.github.com/users/ysuematsu/followers", "following_url": "https://api.github.com/users/ysuematsu/following{/other_user}", "gists_url": "https://api.github.com/users/ysuematsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysuematsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysuematsu/subscriptions", "organizations_url": "https://api.github.com/users/ysuematsu/orgs", "repos_url": "https://api.github.com/users/ysuematsu/repos", "events_url": "https://api.github.com/users/ysuematsu/events{/privacy}", "received_events_url": "https://api.github.com/users/ysuematsu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ysuematsu", "id": 15674604, "node_id": "MDQ6VXNlcjE1Njc0NjA0", "avatar_url": "https://avatars3.githubusercontent.com/u/15674604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysuematsu", "html_url": "https://github.com/ysuematsu", "followers_url": "https://api.github.com/users/ysuematsu/followers", "following_url": "https://api.github.com/users/ysuematsu/following{/other_user}", "gists_url": "https://api.github.com/users/ysuematsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysuematsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysuematsu/subscriptions", "organizations_url": "https://api.github.com/users/ysuematsu/orgs", "repos_url": "https://api.github.com/users/ysuematsu/repos", "events_url": "https://api.github.com/users/ysuematsu/events{/privacy}", "received_events_url": "https://api.github.com/users/ysuematsu/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-05-24T10:37:18Z", "updated_at": "2018-11-20T13:28:01Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: 3.10.0-693.2.2.el7.x86_64</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.8.0</li>\n<li><strong>Python version</strong>: Python 2.7.14 :: Anaconda</li>\n<li><strong>Bazel version (if compiling from source)</strong>: None</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: None</li>\n<li><strong>CUDA/cuDNN version</strong>: None</li>\n<li><strong>GPU model and memory</strong>: None</li>\n<li><strong>Exact command to reproduce</strong>: See below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>We try to use multiple tf.contrib.lookup.MutableHashTable objects in the script. But after do checkpoint with Saver.save(), we find that it can not restore table contents successfully.</p>\n<p>The problem disappears if we explicitly specify name field for tables. It seems that the MutableHashTable save contents with spec key \"xxxx-keys\" and \"xxxx-values\", where \"xxxx\" is the object's name field defaults to \"MutableHashTable\".</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/93bc2e2072e0daccbcff7a90d397b704a9e8f778/tensorflow/contrib/lookup/lookup_ops.py#L463-L467\">tensorflow/tensorflow/contrib/lookup/lookup_ops.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 463 to 467\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/93bc2e2072e0daccbcff7a90d397b704a9e8f778\">93bc2e2</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L463\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"463\"></td>\n          <td id=\"LC463\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> tensors <span class=\"pl-k\">=</span> table.export() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L464\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"464\"></td>\n          <td id=\"LC464\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> specs <span class=\"pl-k\">=</span> [ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L465\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"465\"></td>\n          <td id=\"LC465\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     BaseSaverBuilder.SaveSpec(tensors[<span class=\"pl-c1\">0</span>], <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>, name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-keys<span class=\"pl-pds\">\"</span></span>), </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L466\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"466\"></td>\n          <td id=\"LC466\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     BaseSaverBuilder.SaveSpec(tensors[<span class=\"pl-c1\">1</span>], <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>, name <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-values<span class=\"pl-pds\">\"</span></span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L467\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"467\"></td>\n          <td id=\"LC467\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> ] </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>Maybe it is better to associate unique name for each table object if not explicitly specified?</p>\n<h3>Source code / logs</h3>\n<p>Create and insert tables, and save</p>\n<div class=\"highlight highlight-source-python\"><pre>keys <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.string, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>])\nvalues <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int64, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>])\ntable1 <span class=\"pl-k\">=</span> tf.contrib.lookup.MutableHashTable(tf.string, tf.int64, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\ntable2 <span class=\"pl-k\">=</span> tf.contrib.lookup.MutableHashTable(tf.string, tf.int64, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\ninsert_table1 <span class=\"pl-k\">=</span> table1.insert(keys, values)\ninsert_table2 <span class=\"pl-k\">=</span> table2.insert(keys, values)\nsaver <span class=\"pl-k\">=</span> tf.train.Saver()\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(insert_table1, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{keys: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>], values: [<span class=\"pl-c1\">1</span>]})\n    sess.run(insert_table2, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{keys: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b<span class=\"pl-pds\">\"</span></span>], values: [<span class=\"pl-c1\">2</span>]})\n    <span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>table1:<span class=\"pl-pds\">\"</span></span>, sess.run(table1.export())\n    <span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>table2:<span class=\"pl-pds\">\"</span></span>, sess.run(table2.export())\n    saver.save(sess, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>checkpoint/test<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p>table1: (array(['a'], dtype=object), array([1]))<br>\ntable2: (array(['b'], dtype=object), array([2]))</p>\n<p>Try restore contents</p>\n<div class=\"highlight highlight-source-python\"><pre>table1 <span class=\"pl-k\">=</span> tf.contrib.lookup.MutableHashTable(tf.string, tf.int64, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\ntable2 <span class=\"pl-k\">=</span> tf.contrib.lookup.MutableHashTable(tf.string, tf.int64, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\nsaver <span class=\"pl-k\">=</span> tf.train.Saver()\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    saver.restore(sess, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>checkpoint/test<span class=\"pl-pds\">\"</span></span>)\n    <span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>table1:<span class=\"pl-pds\">\"</span></span>, sess.run(table1.export())\n    <span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>table2:<span class=\"pl-pds\">\"</span></span>, sess.run(table2.export())</pre></div>\n<p>table1: (array([], dtype=object), array([], dtype=int64))<br>\ntable2: (array(['b'], dtype=object), array([2]))</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): 3.10.0-693.2.2.el7.x86_64\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.8.0\nPython version: Python 2.7.14 :: Anaconda\nBazel version (if compiling from source): None\nGCC/Compiler version (if compiling from source): None\nCUDA/cuDNN version: None\nGPU model and memory: None\nExact command to reproduce: See below\n\nDescribe the problem\nWe try to use multiple tf.contrib.lookup.MutableHashTable objects in the script. But after do checkpoint with Saver.save(), we find that it can not restore table contents successfully.\nThe problem disappears if we explicitly specify name field for tables. It seems that the MutableHashTable save contents with spec key \"xxxx-keys\" and \"xxxx-values\", where \"xxxx\" is the object's name field defaults to \"MutableHashTable\".\n\n  \n    \n      tensorflow/tensorflow/contrib/lookup/lookup_ops.py\n    \n    \n        Lines 463 to 467\n      in\n      93bc2e2\n    \n    \n    \n    \n\n        \n          \n           tensors = table.export() \n        \n\n        \n          \n           specs = [ \n        \n\n        \n          \n               BaseSaverBuilder.SaveSpec(tensors[0], \"\", name + \"-keys\"), \n        \n\n        \n          \n               BaseSaverBuilder.SaveSpec(tensors[1], \"\", name + \"-values\") \n        \n\n        \n          \n           ] \n        \n    \n  \n\n\nMaybe it is better to associate unique name for each table object if not explicitly specified?\nSource code / logs\nCreate and insert tables, and save\nkeys = tf.placeholder(dtype=tf.string, shape=[None])\nvalues = tf.placeholder(dtype=tf.int64, shape=[None])\ntable1 = tf.contrib.lookup.MutableHashTable(tf.string, tf.int64, -1)\ntable2 = tf.contrib.lookup.MutableHashTable(tf.string, tf.int64, -1)\ninsert_table1 = table1.insert(keys, values)\ninsert_table2 = table2.insert(keys, values)\nsaver = tf.train.Saver()\nwith tf.Session() as sess:\n    sess.run(insert_table1, feed_dict={keys: [\"a\"], values: [1]})\n    sess.run(insert_table2, feed_dict={keys: [\"b\"], values: [2]})\n    print \"table1:\", sess.run(table1.export())\n    print \"table2:\", sess.run(table2.export())\n    saver.save(sess, \"checkpoint/test\")\ntable1: (array(['a'], dtype=object), array([1]))\ntable2: (array(['b'], dtype=object), array([2]))\nTry restore contents\ntable1 = tf.contrib.lookup.MutableHashTable(tf.string, tf.int64, -1)\ntable2 = tf.contrib.lookup.MutableHashTable(tf.string, tf.int64, -1)\nsaver = tf.train.Saver()\nwith tf.Session() as sess:\n    saver.restore(sess, \"checkpoint/test\")\n    print \"table1:\", sess.run(table1.export())\n    print \"table2:\", sess.run(table2.export())\ntable1: (array([], dtype=object), array([], dtype=int64))\ntable2: (array(['b'], dtype=object), array([2]))", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: \r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: 3.10.0-693.2.2.el7.x86_64\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.8.0\r\n- **Python version**: Python 2.7.14 :: Anaconda\r\n- **Bazel version (if compiling from source)**: None\r\n- **GCC/Compiler version (if compiling from source)**: None\r\n- **CUDA/cuDNN version**: None\r\n- **GPU model and memory**: None\r\n- **Exact command to reproduce**: See below\r\n\r\n### Describe the problem\r\nWe try to use multiple tf.contrib.lookup.MutableHashTable objects in the script. But after do checkpoint with Saver.save(), we find that it can not restore table contents successfully. \r\n\r\nThe problem disappears if we explicitly specify name field for tables. It seems that the MutableHashTable save contents with spec key \"xxxx-keys\" and \"xxxx-values\", where \"xxxx\" is the object's name field defaults to \"MutableHashTable\".\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/93bc2e2072e0daccbcff7a90d397b704a9e8f778/tensorflow/contrib/lookup/lookup_ops.py#L463-L467\r\n\r\nMaybe it is better to associate unique name for each table object if not explicitly specified?\r\n\r\n### Source code / logs\r\nCreate and insert tables, and save\r\n```python\r\nkeys = tf.placeholder(dtype=tf.string, shape=[None])\r\nvalues = tf.placeholder(dtype=tf.int64, shape=[None])\r\ntable1 = tf.contrib.lookup.MutableHashTable(tf.string, tf.int64, -1)\r\ntable2 = tf.contrib.lookup.MutableHashTable(tf.string, tf.int64, -1)\r\ninsert_table1 = table1.insert(keys, values)\r\ninsert_table2 = table2.insert(keys, values)\r\nsaver = tf.train.Saver()\r\nwith tf.Session() as sess:\r\n    sess.run(insert_table1, feed_dict={keys: [\"a\"], values: [1]})\r\n    sess.run(insert_table2, feed_dict={keys: [\"b\"], values: [2]})\r\n    print \"table1:\", sess.run(table1.export())\r\n    print \"table2:\", sess.run(table2.export())\r\n    saver.save(sess, \"checkpoint/test\")\r\n```\r\ntable1: (array(['a'], dtype=object), array([1]))\r\ntable2: (array(['b'], dtype=object), array([2]))\r\n\r\nTry restore contents\r\n```python\r\ntable1 = tf.contrib.lookup.MutableHashTable(tf.string, tf.int64, -1)\r\ntable2 = tf.contrib.lookup.MutableHashTable(tf.string, tf.int64, -1)\r\nsaver = tf.train.Saver()\r\nwith tf.Session() as sess:\r\n    saver.restore(sess, \"checkpoint/test\")\r\n    print \"table1:\", sess.run(table1.export())\r\n    print \"table2:\", sess.run(table2.export())\r\n```\r\ntable1: (array([], dtype=object), array([], dtype=int64))\r\ntable2: (array(['b'], dtype=object), array([2]))"}