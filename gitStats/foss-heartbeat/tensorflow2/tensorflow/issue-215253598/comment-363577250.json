{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/363577250", "html_url": "https://github.com/tensorflow/tensorflow/issues/8529#issuecomment-363577250", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8529", "id": 363577250, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzU3NzI1MA==", "user": {"login": "albenoit", "id": 2619976, "node_id": "MDQ6VXNlcjI2MTk5NzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2619976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albenoit", "html_url": "https://github.com/albenoit", "followers_url": "https://api.github.com/users/albenoit/followers", "following_url": "https://api.github.com/users/albenoit/following{/other_user}", "gists_url": "https://api.github.com/users/albenoit/gists{/gist_id}", "starred_url": "https://api.github.com/users/albenoit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albenoit/subscriptions", "organizations_url": "https://api.github.com/users/albenoit/orgs", "repos_url": "https://api.github.com/users/albenoit/repos", "events_url": "https://api.github.com/users/albenoit/events{/privacy}", "received_events_url": "https://api.github.com/users/albenoit/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-06T21:53:13Z", "updated_at": "2018-02-06T21:53:13Z", "author_association": "NONE", "body_html": "<div class=\"email-fragment\">Hi,\ni am currently trying to compile Tensorflow r1.5 on the same platform.\nI managed to install bazel 0.8.0 as recommended in the install guide and\nuse the devtoolset-4 with gcc 5.3 version.\n\nI try to finish the installation with GPUs but this is quite hazardous\nsince our grid also has issues.\n\nCurrently, here is my setup that worked for TF without GPU:\n\nRegarding bazel, install from the dist package:\n Prepare BAZEL (here, 0.8.0):\n   --&gt; get to <a href=\"https://github.com/bazelbuild/bazel/releases\">https://github.com/bazelbuild/bazel/releases</a> and get a *-dist\nversion\n   353    14:27    wget\n<a href=\"https://github.com/bazelbuild/bazel/releases/download/0.8.0/bazel-0.8.0-dist.zip\">https://github.com/bazelbuild/bazel/releases/download/0.8.0/bazel-0.8.0-dist.zip</a>\n   354    14:28    unzip bazel-0.8.0-dist.zip\n   355    14:28    mkdir bazel-0.8.0-dist\n   356    14:28    cd bazel-0.8.0-dist\n   357    14:28    unzip ../bazel-0.8.0-dist.zip\n   361    14:34    ./compile.sh</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-signature-reply\">--&gt; once compiled, add bazel to path:\nset path=(/path/to/bazel/bazel-0.8.0-dist/output/bazel $path)\n\nAlso, create a .bazelrc in your home that contain:\ncat ~/.bazelrc\nbuild --verbose_failures\n--linkopt=-Wl,-rpath,/opt/rh/devtoolset-4/root/usr/lib64\n--linkopt=-Wl,-rpath,/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-0.b15.el6_8.x86_64/jre/lib/\n--linkopt=-lz --linkopt=-lrt --linkopt=-lm --genrule_strategy=standalone\n--spawn_strategy=standalone --linkopt=-Wl,-rpath,/usr/local/cuda-8.0/lib64/\n\n\n\nNow regarding TF:\n-&gt; checkout r1.5\nand then applied the following changes:\ngit diff\ndiff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl\nindex bafb562..5d5d554 100644\n--- a/tensorflow/tensorflow.bzl\n+++ b/tensorflow/tensorflow.bzl\n@@ -1264,7 +1264,7 @@ register_extension_info(\n )\n\n def tf_extension_linkopts():\n-  return []  # No extension link opts\n+  return [\"-lrt\"]  # No extension link opts\n\n def tf_extension_copts():\n   return []  # No extension c opts\ndiff --git a/tensorflow/tools/git/gen/branch_ref\nb/tensorflow/tools/git/gen/branch_ref\ndeleted file mode 100644\nindex 8b13789..0000000\n--- a/tensorflow/tools/git/gen/branch_ref\n+++ /dev/null\n@@ -1 +0,0 @@\n-\ndiff --git a/tensorflow/tools/git/gen/branch_ref\nb/tensorflow/tools/git/gen/branch_ref\nnew file mode 120000\nindex 0000000..70ed0ba\n--- /dev/null\n+++ b/tensorflow/tools/git/gen/branch_ref\n@@ -0,0 +1 @@\n+/gpfs/MUST-DATA/listic/install/tensorflow.1.5/tensorflow/.git/refs/heads/r1.5\n\\ No newline at end of file\ndiff --git a/tensorflow/tools/git/gen/head b/tensorflow/tools/git/gen/head\ndeleted file mode 100644\nindex 8b13789..0000000\n--- a/tensorflow/tools/git/gen/head\n+++ /dev/null\n@@ -1 +0,0 @@\n-\ndiff --git a/tensorflow/tools/git/gen/head b/tensorflow/tools/git/gen/head\nnew file mode 120000\nindex 0000000..28074d9\n--- /dev/null\n+++ b/tensorflow/tools/git/gen/head\n@@ -0,0 +1 @@\n+/gpfs/MUST-DATA/listic/install/tensorflow.1.5/tensorflow/.git/HEAD\n\\ No newline at end of file\ndiff --git a/tensorflow/tools/git/gen/spec.json\nb/tensorflow/tools/git/gen/spec.json\nindex 176bbc2..2dbb36c 100644\n--- a/tensorflow/tools/git/gen/spec.json\n+++ b/tensorflow/tools/git/gen/spec.json\n@@ -1,3 +1,5 @@\n {\n-  \"git\": false\n-}\n+  \"path\": \"/gpfs/MUST-DATA/listic/install/tensorflow.1.5/tensorflow\",\n+  \"git\": true,\n+  \"branch\": \"refs/heads/r1.5\"\n+}\n\\ No newline at end of file\ndiff --git a/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\nb/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\nindex 05290d6..6903779 100644\n--- a/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\n+++ b/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\n@@ -42,10 +42,10 @@ toolchain {\n   target_system_name: \"local\"\n   toolchain_identifier: \"local_linux\"\n\n-  tool_path { name: \"ar\" path: \"/usr/bin/ar\" }\n-  tool_path { name: \"compat-ld\" path: \"/usr/bin/ld\" }\n-  tool_path { name: \"cpp\" path: \"/usr/bin/cpp\" }\n-  tool_path { name: \"dwp\" path: \"/usr/bin/dwp\" }\n+  tool_path { name: \"ar\" path: \"/opt/rh/devtoolset-4/root/usr/bin/ar\" }\n+  tool_path { name: \"compat-ld\" path:\n\"/opt/rh/devtoolset-4/root/usr/bin/ld\" }\n+  tool_path { name: \"cpp\" path: \"/opt/rh/devtoolset-4/root/usr/bin/cpp\" }\n+  tool_path { name: \"dwp\" path: \"/opt/rh/devtoolset-4/root/usr/bin/dwp\" }\n   # As part of the TensorFlow release, we place some cuda-related\ncompilation\n   # files in @local_config_cuda//crosstool/clang/bin, and this relative\n   # path, combined with the rest of our Bazel configuration causes our\n@@ -56,21 +56,23 @@ toolchain {\n   cxx_flag: \"-std=c++11\"\n   linker_flag: \"-Wl,-no-as-needed\"\n   linker_flag: \"-lstdc++\"\n-  linker_flag: \"-B/usr/bin/\"\n+  linker_flag: \"-lm\"\n+  linker_flag: \"-lrt\"\n+  linker_flag: \"-B/opt/rh/devtoolset-4/root/usr/bin/\"\n\n %{host_compiler_includes}\n-  tool_path { name: \"gcov\" path: \"/usr/bin/gcov\" }\n+  tool_path { name: \"gcov\" path: \"/opt/rh/devtoolset-4/root/usr/bin/gcov\" }\n\n   # C(++) compiles invoke the compiler (as that is the one knowing where\n   # to find libraries), but we provide LD so other rules can invoke the\nlinker.\n-  tool_path { name: \"ld\" path: \"/usr/bin/ld\" }\n+  tool_path { name: \"ld\" path: \"/opt/rh/devtoolset-4/root/usr/bin/ld\" }\n\n-  tool_path { name: \"nm\" path: \"/usr/bin/nm\" }\n-  tool_path { name: \"objcopy\" path: \"/usr/bin/objcopy\" }\n+  tool_path { name: \"nm\" path: \"/opt/rh/devtoolset-4/root/usr/bin/nm\" }\n+  tool_path { name: \"objcopy\" path:\n\"/opt/rh/devtoolset-4/root/usr/bin/objcopy\" }\n   objcopy_embed_flag: \"-I\"\n   objcopy_embed_flag: \"binary\"\n-  tool_path { name: \"objdump\" path: \"/usr/bin/objdump\" }\n-  tool_path { name: \"strip\" path: \"/usr/bin/strip\" }\n+  tool_path { name: \"objdump\" path:\n\"/opt/rh/devtoolset-4/root/usr/bin/objdump\" }\n+  tool_path { name: \"strip\" path:\n\"/opt/rh/devtoolset-4/root/usr/bin/strip\" }\n\n   # Anticipated future default.\n   unfiltered_cxx_flag: \"-no-canonical-prefixes\"\n@@ -122,6 +124,9 @@ toolchain {\n\n   # Include directory for cuda headers.\n %{cuda_include_path}\n+cxx_builtin_include_directory: \"/opt/rh/devtoolset-4/root/usr/lib\"\n+cxx_builtin_include_directory: \"/opt/rh/devtoolset-4/root/usr/include\"\n+cxx_builtin_include_directory: \"/usr/local/cuda-8.0/include/\"\n\n   compilation_mode_flags {\n     mode: DBG\ndiff --git\na/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\nb/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gc\nindex 2558f46..2d7ff15 100755\n---\na/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\n+++\nb/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\n@@ -47,7 +47,8 @@ import pipes\n\n # Template values set by cuda_autoconf.\n CPU_COMPILER = ('%{cpu_compiler}')\n-GCC_HOST_COMPILER_PATH = ('%{gcc_host_compiler_path}')\n+#GCC_HOST_COMPILER_PATH = ('%{gcc_host_compiler_path}')\n+GCC_HOST_COMPILER_PATH = ('/opt/rh/devtoolset-4/root/usr/bin/gcc')\n\n NVCC_PATH = '%{nvcc_path}'\n PREFIX_DIR = os.path.dirname(GCC_HOST_COMPILER_PATH)\n##########################################\n\nALSO had to explicitely add -lrt option in\nbazel-tensorflow/external/protobuf_archive/BUILD :\nLINK_OPTS = select({\n    \":android\": [],\n    \"//conditions:default\": [\"-lpthread\",\"-lrt\",\"-lm\"],\n})\n:\n\nThen, to compile WITHOUT GPU:\n# clean configuration\nbazel clean --expunge\n\n#run the configure script, all addons set to false, except XLA\n./configure\n\nOnce done, build command NO GPU !!!\nbazel build --linkopt='-lrt' -c opt --copt=-mavx --copt=-mavx2\n--copt=-msse4.2 --copt=-msse4.1 --copt=-mfma --copt=-msse3\n--genrule_strategy=standalone --spawn_strategy=standalone\n//tensorflow/tools/pip_package:build_pip_package\n\n\nIt worked.\n\nNow with GPUs, i got issues with nccl but it seems that one can download\nsources, compile and add to path to make it work.... but i wait for grid\naccess to validate.\nHere is the tested workaround:\ngit clone <a href=\"https://github.com/NVIDIA/nccl.git\">https://github.com/NVIDIA/nccl.git</a>\nInitialized empty Git repository in\n/gpfs/MUST-DATA/listic/install/nccl/.git/\nremote: Counting objects: 651, done.\nremote: Total 651 (delta 0), reused 0 (delta 0), pack-reused 651\nReceiving objects: 100% (651/651), 1.38 MiB | 402 KiB/s, done.\nResolving deltas: 100% (411/411), done.\n[alben@lapp-wngpu002 install]$ cd nccl/\n[alben@lapp-wngpu002 nccl]$ echo $CUDA_HOME/\n/usr/local/cuda-8.0/\n[alben@lapp-wngpu002 nccl]$ make CUDA_HOME=/usr/local/cuda-8.0/\nFinally add to paths\nsetenv LD_LIBRARY_PATH\n/gpfs/MUST-DATA/listic/install/nccl/build/lib/:$LD_LIBRARY_PATH\nsetenv INCLUDE_PATH\n/gpfs/MUST-DATA/listic/install/nccl/build/inlude/:$INCLUDE_PATH\n\nHope it helps.\n\n\n\n2018-02-06 21:15 GMT+01:00 Gunhan Gulsoy &lt;notifications@github.com&gt;:</div>\n<div class=\"email-quoted-reply\"> For bazel installation, please reach out to bazel team, they can help in\n bazel installation issues much better than I can.\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"215253598\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/8529\" href=\"https://github.com/tensorflow/tensorflow/issues/8529#issuecomment-363550370\">#8529 (comment)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/ACf6SCB2ZGF54_1q_EiU5nn5b27adLIbks5tSLLrgaJpZM4Mhr7n\">https://github.com/notifications/unsubscribe-auth/ACf6SCB2ZGF54_1q_EiU5nn5b27adLIbks5tSLLrgaJpZM4Mhr7n</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n<div class=\"email-signature-reply\">-- \nAlexandre BENOIT,\nAssociate Professor / Ma\u00eetre de Conf\u00e9rence\nImage processing and visual scene classification,\nLISTIC Lab / IUT Annecy\n<a href=\"https://sites.google.com/site/benoitalexandrevision/\">https://sites.google.com/site/benoitalexandrevision/</a>\n</div>\n</div>", "body_text": "Hi,\ni am currently trying to compile Tensorflow r1.5 on the same platform.\nI managed to install bazel 0.8.0 as recommended in the install guide and\nuse the devtoolset-4 with gcc 5.3 version.\n\nI try to finish the installation with GPUs but this is quite hazardous\nsince our grid also has issues.\n\nCurrently, here is my setup that worked for TF without GPU:\n\nRegarding bazel, install from the dist package:\n Prepare BAZEL (here, 0.8.0):\n   --> get to https://github.com/bazelbuild/bazel/releases and get a *-dist\nversion\n   353    14:27    wget\nhttps://github.com/bazelbuild/bazel/releases/download/0.8.0/bazel-0.8.0-dist.zip\n   354    14:28    unzip bazel-0.8.0-dist.zip\n   355    14:28    mkdir bazel-0.8.0-dist\n   356    14:28    cd bazel-0.8.0-dist\n   357    14:28    unzip ../bazel-0.8.0-dist.zip\n   361    14:34    ./compile.sh\n\u2026\n--> once compiled, add bazel to path:\nset path=(/path/to/bazel/bazel-0.8.0-dist/output/bazel $path)\n\nAlso, create a .bazelrc in your home that contain:\ncat ~/.bazelrc\nbuild --verbose_failures\n--linkopt=-Wl,-rpath,/opt/rh/devtoolset-4/root/usr/lib64\n--linkopt=-Wl,-rpath,/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-0.b15.el6_8.x86_64/jre/lib/\n--linkopt=-lz --linkopt=-lrt --linkopt=-lm --genrule_strategy=standalone\n--spawn_strategy=standalone --linkopt=-Wl,-rpath,/usr/local/cuda-8.0/lib64/\n\n\n\nNow regarding TF:\n-> checkout r1.5\nand then applied the following changes:\ngit diff\ndiff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl\nindex bafb562..5d5d554 100644\n--- a/tensorflow/tensorflow.bzl\n+++ b/tensorflow/tensorflow.bzl\n@@ -1264,7 +1264,7 @@ register_extension_info(\n )\n\n def tf_extension_linkopts():\n-  return []  # No extension link opts\n+  return [\"-lrt\"]  # No extension link opts\n\n def tf_extension_copts():\n   return []  # No extension c opts\ndiff --git a/tensorflow/tools/git/gen/branch_ref\nb/tensorflow/tools/git/gen/branch_ref\ndeleted file mode 100644\nindex 8b13789..0000000\n--- a/tensorflow/tools/git/gen/branch_ref\n+++ /dev/null\n@@ -1 +0,0 @@\n-\ndiff --git a/tensorflow/tools/git/gen/branch_ref\nb/tensorflow/tools/git/gen/branch_ref\nnew file mode 120000\nindex 0000000..70ed0ba\n--- /dev/null\n+++ b/tensorflow/tools/git/gen/branch_ref\n@@ -0,0 +1 @@\n+/gpfs/MUST-DATA/listic/install/tensorflow.1.5/tensorflow/.git/refs/heads/r1.5\n\\ No newline at end of file\ndiff --git a/tensorflow/tools/git/gen/head b/tensorflow/tools/git/gen/head\ndeleted file mode 100644\nindex 8b13789..0000000\n--- a/tensorflow/tools/git/gen/head\n+++ /dev/null\n@@ -1 +0,0 @@\n-\ndiff --git a/tensorflow/tools/git/gen/head b/tensorflow/tools/git/gen/head\nnew file mode 120000\nindex 0000000..28074d9\n--- /dev/null\n+++ b/tensorflow/tools/git/gen/head\n@@ -0,0 +1 @@\n+/gpfs/MUST-DATA/listic/install/tensorflow.1.5/tensorflow/.git/HEAD\n\\ No newline at end of file\ndiff --git a/tensorflow/tools/git/gen/spec.json\nb/tensorflow/tools/git/gen/spec.json\nindex 176bbc2..2dbb36c 100644\n--- a/tensorflow/tools/git/gen/spec.json\n+++ b/tensorflow/tools/git/gen/spec.json\n@@ -1,3 +1,5 @@\n {\n-  \"git\": false\n-}\n+  \"path\": \"/gpfs/MUST-DATA/listic/install/tensorflow.1.5/tensorflow\",\n+  \"git\": true,\n+  \"branch\": \"refs/heads/r1.5\"\n+}\n\\ No newline at end of file\ndiff --git a/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\nb/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\nindex 05290d6..6903779 100644\n--- a/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\n+++ b/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\n@@ -42,10 +42,10 @@ toolchain {\n   target_system_name: \"local\"\n   toolchain_identifier: \"local_linux\"\n\n-  tool_path { name: \"ar\" path: \"/usr/bin/ar\" }\n-  tool_path { name: \"compat-ld\" path: \"/usr/bin/ld\" }\n-  tool_path { name: \"cpp\" path: \"/usr/bin/cpp\" }\n-  tool_path { name: \"dwp\" path: \"/usr/bin/dwp\" }\n+  tool_path { name: \"ar\" path: \"/opt/rh/devtoolset-4/root/usr/bin/ar\" }\n+  tool_path { name: \"compat-ld\" path:\n\"/opt/rh/devtoolset-4/root/usr/bin/ld\" }\n+  tool_path { name: \"cpp\" path: \"/opt/rh/devtoolset-4/root/usr/bin/cpp\" }\n+  tool_path { name: \"dwp\" path: \"/opt/rh/devtoolset-4/root/usr/bin/dwp\" }\n   # As part of the TensorFlow release, we place some cuda-related\ncompilation\n   # files in @local_config_cuda//crosstool/clang/bin, and this relative\n   # path, combined with the rest of our Bazel configuration causes our\n@@ -56,21 +56,23 @@ toolchain {\n   cxx_flag: \"-std=c++11\"\n   linker_flag: \"-Wl,-no-as-needed\"\n   linker_flag: \"-lstdc++\"\n-  linker_flag: \"-B/usr/bin/\"\n+  linker_flag: \"-lm\"\n+  linker_flag: \"-lrt\"\n+  linker_flag: \"-B/opt/rh/devtoolset-4/root/usr/bin/\"\n\n %{host_compiler_includes}\n-  tool_path { name: \"gcov\" path: \"/usr/bin/gcov\" }\n+  tool_path { name: \"gcov\" path: \"/opt/rh/devtoolset-4/root/usr/bin/gcov\" }\n\n   # C(++) compiles invoke the compiler (as that is the one knowing where\n   # to find libraries), but we provide LD so other rules can invoke the\nlinker.\n-  tool_path { name: \"ld\" path: \"/usr/bin/ld\" }\n+  tool_path { name: \"ld\" path: \"/opt/rh/devtoolset-4/root/usr/bin/ld\" }\n\n-  tool_path { name: \"nm\" path: \"/usr/bin/nm\" }\n-  tool_path { name: \"objcopy\" path: \"/usr/bin/objcopy\" }\n+  tool_path { name: \"nm\" path: \"/opt/rh/devtoolset-4/root/usr/bin/nm\" }\n+  tool_path { name: \"objcopy\" path:\n\"/opt/rh/devtoolset-4/root/usr/bin/objcopy\" }\n   objcopy_embed_flag: \"-I\"\n   objcopy_embed_flag: \"binary\"\n-  tool_path { name: \"objdump\" path: \"/usr/bin/objdump\" }\n-  tool_path { name: \"strip\" path: \"/usr/bin/strip\" }\n+  tool_path { name: \"objdump\" path:\n\"/opt/rh/devtoolset-4/root/usr/bin/objdump\" }\n+  tool_path { name: \"strip\" path:\n\"/opt/rh/devtoolset-4/root/usr/bin/strip\" }\n\n   # Anticipated future default.\n   unfiltered_cxx_flag: \"-no-canonical-prefixes\"\n@@ -122,6 +124,9 @@ toolchain {\n\n   # Include directory for cuda headers.\n %{cuda_include_path}\n+cxx_builtin_include_directory: \"/opt/rh/devtoolset-4/root/usr/lib\"\n+cxx_builtin_include_directory: \"/opt/rh/devtoolset-4/root/usr/include\"\n+cxx_builtin_include_directory: \"/usr/local/cuda-8.0/include/\"\n\n   compilation_mode_flags {\n     mode: DBG\ndiff --git\na/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\nb/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gc\nindex 2558f46..2d7ff15 100755\n---\na/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\n+++\nb/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\n@@ -47,7 +47,8 @@ import pipes\n\n # Template values set by cuda_autoconf.\n CPU_COMPILER = ('%{cpu_compiler}')\n-GCC_HOST_COMPILER_PATH = ('%{gcc_host_compiler_path}')\n+#GCC_HOST_COMPILER_PATH = ('%{gcc_host_compiler_path}')\n+GCC_HOST_COMPILER_PATH = ('/opt/rh/devtoolset-4/root/usr/bin/gcc')\n\n NVCC_PATH = '%{nvcc_path}'\n PREFIX_DIR = os.path.dirname(GCC_HOST_COMPILER_PATH)\n##########################################\n\nALSO had to explicitely add -lrt option in\nbazel-tensorflow/external/protobuf_archive/BUILD :\nLINK_OPTS = select({\n    \":android\": [],\n    \"//conditions:default\": [\"-lpthread\",\"-lrt\",\"-lm\"],\n})\n:\n\nThen, to compile WITHOUT GPU:\n# clean configuration\nbazel clean --expunge\n\n#run the configure script, all addons set to false, except XLA\n./configure\n\nOnce done, build command NO GPU !!!\nbazel build --linkopt='-lrt' -c opt --copt=-mavx --copt=-mavx2\n--copt=-msse4.2 --copt=-msse4.1 --copt=-mfma --copt=-msse3\n--genrule_strategy=standalone --spawn_strategy=standalone\n//tensorflow/tools/pip_package:build_pip_package\n\n\nIt worked.\n\nNow with GPUs, i got issues with nccl but it seems that one can download\nsources, compile and add to path to make it work.... but i wait for grid\naccess to validate.\nHere is the tested workaround:\ngit clone https://github.com/NVIDIA/nccl.git\nInitialized empty Git repository in\n/gpfs/MUST-DATA/listic/install/nccl/.git/\nremote: Counting objects: 651, done.\nremote: Total 651 (delta 0), reused 0 (delta 0), pack-reused 651\nReceiving objects: 100% (651/651), 1.38 MiB | 402 KiB/s, done.\nResolving deltas: 100% (411/411), done.\n[alben@lapp-wngpu002 install]$ cd nccl/\n[alben@lapp-wngpu002 nccl]$ echo $CUDA_HOME/\n/usr/local/cuda-8.0/\n[alben@lapp-wngpu002 nccl]$ make CUDA_HOME=/usr/local/cuda-8.0/\nFinally add to paths\nsetenv LD_LIBRARY_PATH\n/gpfs/MUST-DATA/listic/install/nccl/build/lib/:$LD_LIBRARY_PATH\nsetenv INCLUDE_PATH\n/gpfs/MUST-DATA/listic/install/nccl/build/inlude/:$INCLUDE_PATH\n\nHope it helps.\n\n\n\n2018-02-06 21:15 GMT+01:00 Gunhan Gulsoy <notifications@github.com>:\n For bazel installation, please reach out to bazel team, they can help in\n bazel installation issues much better than I can.\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub\n <#8529 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/ACf6SCB2ZGF54_1q_EiU5nn5b27adLIbks5tSLLrgaJpZM4Mhr7n>\n .\n\n\n-- \nAlexandre BENOIT,\nAssociate Professor / Ma\u00eetre de Conf\u00e9rence\nImage processing and visual scene classification,\nLISTIC Lab / IUT Annecy\nhttps://sites.google.com/site/benoitalexandrevision/", "body": "Hi,\ni am currently trying to compile Tensorflow r1.5 on the same platform.\nI managed to install bazel 0.8.0 as recommended in the install guide and\nuse the devtoolset-4 with gcc 5.3 version.\n\nI try to finish the installation with GPUs but this is quite hazardous\nsince our grid also has issues.\n\nCurrently, here is my setup that worked for TF without GPU:\n\nRegarding bazel, install from the dist package:\n Prepare BAZEL (here, 0.8.0):\n   --> get to https://github.com/bazelbuild/bazel/releases and get a *-dist\nversion\n   353    14:27    wget\nhttps://github.com/bazelbuild/bazel/releases/download/0.8.0/bazel-0.8.0-dist.zip\n   354    14:28    unzip bazel-0.8.0-dist.zip\n   355    14:28    mkdir bazel-0.8.0-dist\n   356    14:28    cd bazel-0.8.0-dist\n   357    14:28    unzip ../bazel-0.8.0-dist.zip\n   361    14:34    ./compile.sh\n\n   --> once compiled, add bazel to path:\nset path=(/path/to/bazel/bazel-0.8.0-dist/output/bazel $path)\n\nAlso, create a .bazelrc in your home that contain:\ncat ~/.bazelrc\nbuild --verbose_failures\n--linkopt=-Wl,-rpath,/opt/rh/devtoolset-4/root/usr/lib64\n--linkopt=-Wl,-rpath,/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-0.b15.el6_8.x86_64/jre/lib/\n--linkopt=-lz --linkopt=-lrt --linkopt=-lm --genrule_strategy=standalone\n--spawn_strategy=standalone --linkopt=-Wl,-rpath,/usr/local/cuda-8.0/lib64/\n\n\n\nNow regarding TF:\n-> checkout r1.5\nand then applied the following changes:\ngit diff\ndiff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl\nindex bafb562..5d5d554 100644\n--- a/tensorflow/tensorflow.bzl\n+++ b/tensorflow/tensorflow.bzl\n@@ -1264,7 +1264,7 @@ register_extension_info(\n )\n\n def tf_extension_linkopts():\n-  return []  # No extension link opts\n+  return [\"-lrt\"]  # No extension link opts\n\n def tf_extension_copts():\n   return []  # No extension c opts\ndiff --git a/tensorflow/tools/git/gen/branch_ref\nb/tensorflow/tools/git/gen/branch_ref\ndeleted file mode 100644\nindex 8b13789..0000000\n--- a/tensorflow/tools/git/gen/branch_ref\n+++ /dev/null\n@@ -1 +0,0 @@\n-\ndiff --git a/tensorflow/tools/git/gen/branch_ref\nb/tensorflow/tools/git/gen/branch_ref\nnew file mode 120000\nindex 0000000..70ed0ba\n--- /dev/null\n+++ b/tensorflow/tools/git/gen/branch_ref\n@@ -0,0 +1 @@\n+/gpfs/MUST-DATA/listic/install/tensorflow.1.5/tensorflow/.git/refs/heads/r1.5\n\\ No newline at end of file\ndiff --git a/tensorflow/tools/git/gen/head b/tensorflow/tools/git/gen/head\ndeleted file mode 100644\nindex 8b13789..0000000\n--- a/tensorflow/tools/git/gen/head\n+++ /dev/null\n@@ -1 +0,0 @@\n-\ndiff --git a/tensorflow/tools/git/gen/head b/tensorflow/tools/git/gen/head\nnew file mode 120000\nindex 0000000..28074d9\n--- /dev/null\n+++ b/tensorflow/tools/git/gen/head\n@@ -0,0 +1 @@\n+/gpfs/MUST-DATA/listic/install/tensorflow.1.5/tensorflow/.git/HEAD\n\\ No newline at end of file\ndiff --git a/tensorflow/tools/git/gen/spec.json\nb/tensorflow/tools/git/gen/spec.json\nindex 176bbc2..2dbb36c 100644\n--- a/tensorflow/tools/git/gen/spec.json\n+++ b/tensorflow/tools/git/gen/spec.json\n@@ -1,3 +1,5 @@\n {\n-  \"git\": false\n-}\n+  \"path\": \"/gpfs/MUST-DATA/listic/install/tensorflow.1.5/tensorflow\",\n+  \"git\": true,\n+  \"branch\": \"refs/heads/r1.5\"\n+}\n\\ No newline at end of file\ndiff --git a/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\nb/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\nindex 05290d6..6903779 100644\n--- a/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\n+++ b/third_party/gpus/crosstool/CROSSTOOL_nvcc.tpl\n@@ -42,10 +42,10 @@ toolchain {\n   target_system_name: \"local\"\n   toolchain_identifier: \"local_linux\"\n\n-  tool_path { name: \"ar\" path: \"/usr/bin/ar\" }\n-  tool_path { name: \"compat-ld\" path: \"/usr/bin/ld\" }\n-  tool_path { name: \"cpp\" path: \"/usr/bin/cpp\" }\n-  tool_path { name: \"dwp\" path: \"/usr/bin/dwp\" }\n+  tool_path { name: \"ar\" path: \"/opt/rh/devtoolset-4/root/usr/bin/ar\" }\n+  tool_path { name: \"compat-ld\" path:\n\"/opt/rh/devtoolset-4/root/usr/bin/ld\" }\n+  tool_path { name: \"cpp\" path: \"/opt/rh/devtoolset-4/root/usr/bin/cpp\" }\n+  tool_path { name: \"dwp\" path: \"/opt/rh/devtoolset-4/root/usr/bin/dwp\" }\n   # As part of the TensorFlow release, we place some cuda-related\ncompilation\n   # files in @local_config_cuda//crosstool/clang/bin, and this relative\n   # path, combined with the rest of our Bazel configuration causes our\n@@ -56,21 +56,23 @@ toolchain {\n   cxx_flag: \"-std=c++11\"\n   linker_flag: \"-Wl,-no-as-needed\"\n   linker_flag: \"-lstdc++\"\n-  linker_flag: \"-B/usr/bin/\"\n+  linker_flag: \"-lm\"\n+  linker_flag: \"-lrt\"\n+  linker_flag: \"-B/opt/rh/devtoolset-4/root/usr/bin/\"\n\n %{host_compiler_includes}\n-  tool_path { name: \"gcov\" path: \"/usr/bin/gcov\" }\n+  tool_path { name: \"gcov\" path: \"/opt/rh/devtoolset-4/root/usr/bin/gcov\" }\n\n   # C(++) compiles invoke the compiler (as that is the one knowing where\n   # to find libraries), but we provide LD so other rules can invoke the\nlinker.\n-  tool_path { name: \"ld\" path: \"/usr/bin/ld\" }\n+  tool_path { name: \"ld\" path: \"/opt/rh/devtoolset-4/root/usr/bin/ld\" }\n\n-  tool_path { name: \"nm\" path: \"/usr/bin/nm\" }\n-  tool_path { name: \"objcopy\" path: \"/usr/bin/objcopy\" }\n+  tool_path { name: \"nm\" path: \"/opt/rh/devtoolset-4/root/usr/bin/nm\" }\n+  tool_path { name: \"objcopy\" path:\n\"/opt/rh/devtoolset-4/root/usr/bin/objcopy\" }\n   objcopy_embed_flag: \"-I\"\n   objcopy_embed_flag: \"binary\"\n-  tool_path { name: \"objdump\" path: \"/usr/bin/objdump\" }\n-  tool_path { name: \"strip\" path: \"/usr/bin/strip\" }\n+  tool_path { name: \"objdump\" path:\n\"/opt/rh/devtoolset-4/root/usr/bin/objdump\" }\n+  tool_path { name: \"strip\" path:\n\"/opt/rh/devtoolset-4/root/usr/bin/strip\" }\n\n   # Anticipated future default.\n   unfiltered_cxx_flag: \"-no-canonical-prefixes\"\n@@ -122,6 +124,9 @@ toolchain {\n\n   # Include directory for cuda headers.\n %{cuda_include_path}\n+cxx_builtin_include_directory: \"/opt/rh/devtoolset-4/root/usr/lib\"\n+cxx_builtin_include_directory: \"/opt/rh/devtoolset-4/root/usr/include\"\n+cxx_builtin_include_directory: \"/usr/local/cuda-8.0/include/\"\n\n   compilation_mode_flags {\n     mode: DBG\ndiff --git\na/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\nb/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gc\nindex 2558f46..2d7ff15 100755\n---\na/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\n+++\nb/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc.tpl\n@@ -47,7 +47,8 @@ import pipes\n\n # Template values set by cuda_autoconf.\n CPU_COMPILER = ('%{cpu_compiler}')\n-GCC_HOST_COMPILER_PATH = ('%{gcc_host_compiler_path}')\n+#GCC_HOST_COMPILER_PATH = ('%{gcc_host_compiler_path}')\n+GCC_HOST_COMPILER_PATH = ('/opt/rh/devtoolset-4/root/usr/bin/gcc')\n\n NVCC_PATH = '%{nvcc_path}'\n PREFIX_DIR = os.path.dirname(GCC_HOST_COMPILER_PATH)\n##########################################\n\nALSO had to explicitely add -lrt option in\nbazel-tensorflow/external/protobuf_archive/BUILD :\nLINK_OPTS = select({\n    \":android\": [],\n    \"//conditions:default\": [\"-lpthread\",\"-lrt\",\"-lm\"],\n})\n:\n\nThen, to compile WITHOUT GPU:\n# clean configuration\nbazel clean --expunge\n\n#run the configure script, all addons set to false, except XLA\n./configure\n\nOnce done, build command NO GPU !!!\nbazel build --linkopt='-lrt' -c opt --copt=-mavx --copt=-mavx2\n--copt=-msse4.2 --copt=-msse4.1 --copt=-mfma --copt=-msse3\n--genrule_strategy=standalone --spawn_strategy=standalone\n//tensorflow/tools/pip_package:build_pip_package\n\n\nIt worked.\n\nNow with GPUs, i got issues with nccl but it seems that one can download\nsources, compile and add to path to make it work.... but i wait for grid\naccess to validate.\nHere is the tested workaround:\ngit clone https://github.com/NVIDIA/nccl.git\nInitialized empty Git repository in\n/gpfs/MUST-DATA/listic/install/nccl/.git/\nremote: Counting objects: 651, done.\nremote: Total 651 (delta 0), reused 0 (delta 0), pack-reused 651\nReceiving objects: 100% (651/651), 1.38 MiB | 402 KiB/s, done.\nResolving deltas: 100% (411/411), done.\n[alben@lapp-wngpu002 install]$ cd nccl/\n[alben@lapp-wngpu002 nccl]$ echo $CUDA_HOME/\n/usr/local/cuda-8.0/\n[alben@lapp-wngpu002 nccl]$ make CUDA_HOME=/usr/local/cuda-8.0/\nFinally add to paths\nsetenv LD_LIBRARY_PATH\n/gpfs/MUST-DATA/listic/install/nccl/build/lib/:$LD_LIBRARY_PATH\nsetenv INCLUDE_PATH\n/gpfs/MUST-DATA/listic/install/nccl/build/inlude/:$INCLUDE_PATH\n\nHope it helps.\n\n\n\n2018-02-06 21:15 GMT+01:00 Gunhan Gulsoy <notifications@github.com>:\n\n> For bazel installation, please reach out to bazel team, they can help in\n> bazel installation issues much better than I can.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/issues/8529#issuecomment-363550370>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ACf6SCB2ZGF54_1q_EiU5nn5b27adLIbks5tSLLrgaJpZM4Mhr7n>\n> .\n>\n\n\n\n-- \nAlexandre BENOIT,\nAssociate Professor / Ma\u00eetre de Conf\u00e9rence\nImage processing and visual scene classification,\nLISTIC Lab / IUT Annecy\nhttps://sites.google.com/site/benoitalexandrevision/\n"}