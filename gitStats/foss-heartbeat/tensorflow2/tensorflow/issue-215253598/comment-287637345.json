{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/287637345", "html_url": "https://github.com/tensorflow/tensorflow/issues/8529#issuecomment-287637345", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8529", "id": 287637345, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzYzNzM0NQ==", "user": {"login": "albenoit", "id": 2619976, "node_id": "MDQ6VXNlcjI2MTk5NzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2619976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albenoit", "html_url": "https://github.com/albenoit", "followers_url": "https://api.github.com/users/albenoit/followers", "following_url": "https://api.github.com/users/albenoit/following{/other_user}", "gists_url": "https://api.github.com/users/albenoit/gists{/gist_id}", "starred_url": "https://api.github.com/users/albenoit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albenoit/subscriptions", "organizations_url": "https://api.github.com/users/albenoit/orgs", "repos_url": "https://api.github.com/users/albenoit/repos", "events_url": "https://api.github.com/users/albenoit/events{/privacy}", "received_events_url": "https://api.github.com/users/albenoit/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-19T18:41:34Z", "updated_at": "2017-03-21T13:23:29Z", "author_association": "NONE", "body_html": "<p>Well, problem solved, actually, we have to add the following instructions in third_party/gpus/crosstool/CROSSTOOL.tpl :</p>\n<pre><code>   # Include directory for cuda headers.\n   cxx_builtin_include_directory: \"%{cuda_include_path}\"\n+  cxx_builtin_include_directory: \"/opt/rh/devtoolset-4/root/usr/lib\"\n+  cxx_builtin_include_directory: \"/opt/rh/devtoolset-4/root/usr/include\"\n+  cxx_builtin_include_directory: \"/usr/local/cuda-8.0/include/\"\n\n</code></pre>\n<p>But i guess it would be nice to filter out all the options i reported but are not useful.</p>\n<p>Also consider this link to check a nice installation tutorial that may complete this \"solved\" issue<br>\n<a href=\"url\">https://www.linkedin.com/pulse/compiling-tensorflow-10-python-27-redhat-6-florian-raudies</a></p>\n<p>One can cite how to activate some cpu options support (SSE3, 4, AVX,etc.) by adding <code>--copt</code> options<br>\n<code>bazel build -c opt --copt=-mavx --copt=-msse4.2 --copt=-msse4.1 --copt=-msse3 --copt=-mavx2 --copt=-mfma -k//tensorflow/tools/pip_package:build_pip_package </code></p>\n<p>In my case, looking for standalone package generation, i use the following command:<br>\n<code>bazel build --linkopt='-lrt' -c opt --copt=-mavx --copt=-mavx2 --copt=-msse4.2 --copt=-msse4.1 --copt=-mfma --copt=-msse3  --config=cuda --genrule_strategy=standalone --spawn_strategy=standalone //tensorflow/tools/pip_package:build_pip_package </code><br>\nnext preparing the python package:<br>\n<code>bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg </code></p>\n<p>Package compilation worked using 3 configurations:<br>\n-with cuda, no jemalloc and all other parameters using defaults<br>\n-with cuda, no jemalloc, with XLA,  all above cpu options and all other parameters using defaults<br>\n-no cuda, no jemalloc, with XLA, with SSE3 and all other parameters using defaults<br>\nNow waiting for installation on various machines. I will extend discussion if something fails</p>", "body_text": "Well, problem solved, actually, we have to add the following instructions in third_party/gpus/crosstool/CROSSTOOL.tpl :\n   # Include directory for cuda headers.\n   cxx_builtin_include_directory: \"%{cuda_include_path}\"\n+  cxx_builtin_include_directory: \"/opt/rh/devtoolset-4/root/usr/lib\"\n+  cxx_builtin_include_directory: \"/opt/rh/devtoolset-4/root/usr/include\"\n+  cxx_builtin_include_directory: \"/usr/local/cuda-8.0/include/\"\n\n\nBut i guess it would be nice to filter out all the options i reported but are not useful.\nAlso consider this link to check a nice installation tutorial that may complete this \"solved\" issue\nhttps://www.linkedin.com/pulse/compiling-tensorflow-10-python-27-redhat-6-florian-raudies\nOne can cite how to activate some cpu options support (SSE3, 4, AVX,etc.) by adding --copt options\nbazel build -c opt --copt=-mavx --copt=-msse4.2 --copt=-msse4.1 --copt=-msse3 --copt=-mavx2 --copt=-mfma -k//tensorflow/tools/pip_package:build_pip_package \nIn my case, looking for standalone package generation, i use the following command:\nbazel build --linkopt='-lrt' -c opt --copt=-mavx --copt=-mavx2 --copt=-msse4.2 --copt=-msse4.1 --copt=-mfma --copt=-msse3  --config=cuda --genrule_strategy=standalone --spawn_strategy=standalone //tensorflow/tools/pip_package:build_pip_package \nnext preparing the python package:\nbazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg \nPackage compilation worked using 3 configurations:\n-with cuda, no jemalloc and all other parameters using defaults\n-with cuda, no jemalloc, with XLA,  all above cpu options and all other parameters using defaults\n-no cuda, no jemalloc, with XLA, with SSE3 and all other parameters using defaults\nNow waiting for installation on various machines. I will extend discussion if something fails", "body": "Well, problem solved, actually, we have to add the following instructions in third_party/gpus/crosstool/CROSSTOOL.tpl :\r\n\r\n```\r\n   # Include directory for cuda headers.\r\n   cxx_builtin_include_directory: \"%{cuda_include_path}\"\r\n+  cxx_builtin_include_directory: \"/opt/rh/devtoolset-4/root/usr/lib\"\r\n+  cxx_builtin_include_directory: \"/opt/rh/devtoolset-4/root/usr/include\"\r\n+  cxx_builtin_include_directory: \"/usr/local/cuda-8.0/include/\"\r\n\r\n```\r\n\r\nBut i guess it would be nice to filter out all the options i reported but are not useful.\r\n\r\nAlso consider this link to check a nice installation tutorial that may complete this \"solved\" issue\r\n[https://www.linkedin.com/pulse/compiling-tensorflow-10-python-27-redhat-6-florian-raudies](url)\r\n\r\nOne can cite how to activate some cpu options support (SSE3, 4, AVX,etc.) by adding `--copt` options\r\n`bazel build -c opt --copt=-mavx --copt=-msse4.2 --copt=-msse4.1 --copt=-msse3 --copt=-mavx2 --copt=-mfma -k//tensorflow/tools/pip_package:build_pip_package\r\n`\r\n\r\nIn my case, looking for standalone package generation, i use the following command:\r\n`bazel build --linkopt='-lrt' -c opt --copt=-mavx --copt=-mavx2 --copt=-msse4.2 --copt=-msse4.1 --copt=-mfma --copt=-msse3  --config=cuda --genrule_strategy=standalone --spawn_strategy=standalone //tensorflow/tools/pip_package:build_pip_package\r\n`\r\nnext preparing the python package:\r\n`bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg\r\n`\r\n\r\nPackage compilation worked using 3 configurations:\r\n-with cuda, no jemalloc and all other parameters using defaults\r\n-with cuda, no jemalloc, with XLA,  all above cpu options and all other parameters using defaults\r\n-no cuda, no jemalloc, with XLA, with SSE3 and all other parameters using defaults\r\nNow waiting for installation on various machines. I will extend discussion if something fails\r\n"}