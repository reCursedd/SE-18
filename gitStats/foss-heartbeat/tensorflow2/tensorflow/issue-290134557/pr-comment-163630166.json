{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/163630166", "pull_request_review_id": 91233299, "id": 163630166, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzYzMDE2Ng==", "diff_hunk": "@@ -0,0 +1,308 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/contrib/tensorrt/convert/convert_graph.h\"\n+\n+#include <list>\n+#include <set>\n+#include <sstream>\n+#include <string>\n+#include <unordered_map>\n+#include <unordered_set>\n+#include <vector>\n+#include <map>\n+#include <utility>\n+\n+#include \"NvInfer.h\"\n+\n+#include \"tensorflow/contrib/tensorrt/convert/convert_nodes.h\"\n+#include \"tensorflow/contrib/tensorrt/segment/segment.h\"\n+#include \"tensorflow/core/framework/graph.pb.h\"\n+#include \"tensorflow/core/framework/node_def.pb.h\"\n+#include \"tensorflow/core/graph/algorithm.h\"\n+#include \"tensorflow/core/graph/graph.h\"\n+#include \"tensorflow/core/graph/graph_constructor.h\"\n+#include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/lib/core/status.h\"\n+#include \"tensorflow/core/platform/logging.h\"\n+\n+#define _TF_LOG_DEBUG ::tensorflow::internal::LogMessage(__FILE__, __LINE__, -1)\n+#include \"tensorflow/core/grappler/optimizers/constant_folding.h\"\n+#include \"tensorflow/core/grappler/optimizers/layout_optimizer.h\" \n+#include \"tensorflow/core/grappler/devices.h\"\n+//#include \"tensorflow/core/grappler/clusters/single_machine.h\"\n+#include \"tensorflow/core/grappler/clusters/virtual_cluster.h\"\n+#include \"tensorflow/core/protobuf/device_properties.pb.h\"\n+#include \"tensorflow/core/grappler/grappler_item.h\"\n+#include \"tensorflow/core/grappler/utils.h\"\n+\n+#include \"tensorflow/core/grappler/costs/graph_properties.h\"\n+\n+//------------------------------------------------------------------------------\n+namespace tensorrt {\n+namespace convert {\n+\n+namespace {\n+\n+static std::unordered_set<std::string> output_nodes;\n+bool IsTensorRTCandidate(const tensorflow::NodeDef& node_def) {\n+  static const std::set<std::string> candidate_ops = {\n+      \"Identity\", \"Const\", \"Conv2D\", \"MaxPool\", \"BiasAdd\", \"Relu\",\n+      \"Add\",      \"Mul\",   \"Sub\",    \"Rsqrt\",   \"Pad\"  // \"Placeholder\" ,\"Mean\"\n+                                                       // TODO(ben,jie): ...\n+  };\n+  if (output_nodes.count(node_def.name())) return false;\n+  return candidate_ops.count(node_def.op());\n+}\n+\n+void GetSubGraphIncomingEdges(tensorflow::Graph const& graph,\n+                              std::set<int> const& subgraph_node_ids,\n+                              tensorflow::EdgeSet* incoming_edges) {\n+  for (int node_id : subgraph_node_ids) {\n+    tensorflow::Node const* node = graph.FindNodeId(node_id);\n+    LOG(DEBUG) << node->name() << \" has incoming edges: \";\n+    for (tensorflow::Edge const* edge : node->in_edges()) {\n+      if (!subgraph_node_ids.count(edge->src()->id()) &&\n+          !edge->src()->IsSource()) {\n+        LOG(DEBUG) << edge->src()->name() << \", \";\n+        incoming_edges->insert(edge);\n+      }\n+    }\n+  }\n+}\n+\n+void GetSubGraphOutgoingEdges(tensorflow::Graph const& graph,\n+                              std::set<int> const& subgraph_node_ids,\n+                              tensorflow::EdgeSet* outgoing_edges) {\n+  for (int node_id : subgraph_node_ids) {\n+    tensorflow::Node const* node = graph.FindNodeId(node_id);\n+    LOG(DEBUG) << node->name() << \" has outgoing edges: \";\n+    for (tensorflow::Edge const* edge : node->out_edges()) {\n+      if (!subgraph_node_ids.count(edge->dst()->id()) &&\n+          !edge->dst()->IsSink()) {\n+        outgoing_edges->insert(edge);\n+      }\n+    }\n+  }\n+}\n+\n+std::pair<std::string, int> ParseTensorName(std::string name,\n+                                            int default_idx = 0) {\n+  int idx = default_idx;\n+  size_t sep = name.find_last_of(':');\n+  if (sep != std::string::npos) {\n+    name = name.substr(0, sep);\n+    idx = std::stoi(name.substr(sep + 1));\n+  }\n+  return std::make_pair(name, idx);\n+}\n+\n+std::unordered_map<std::string, std::vector<int>> BuildTensorNameMap(\n+    const std::vector<std::string>& tensor_names) {\n+  std::unordered_map<std::string, std::vector<int>> result;\n+  for (std::string const& tensor_name : tensor_names) {\n+    std::string node_name;\n+    int index;\n+    std::tie(node_name, index) = ParseTensorName(tensor_name);\n+    result[node_name].push_back(index);\n+  }\n+  return result;\n+}\n+\n+tensorflow::Status ConvertSubGraphToTensorRT(\n+    tensorflow::Graph& graph, const std::vector<std::string>& output_names,\n+    const std::set<int>& subgraph_node_ids, size_t max_batch_size,\n+    size_t max_workspace_size,\n+    const tensorflow::grappler::GraphProperties& graph_properties) {\n+  tensorflow::EdgeSet subgraph_incoming_edges;\n+  GetSubGraphIncomingEdges(graph, subgraph_node_ids, &subgraph_incoming_edges);\n+\n+  std::vector<std::pair<int, int>> subgraph_inputs;\n+\n+\n+  // Collect inputs by looking for incoming edges\n+  for (tensorflow::Edge const* edge : subgraph_incoming_edges) {\n+    subgraph_inputs.push_back({edge->src()->id(), edge->src_output()});\n+  }\n+  std::set<std::pair<int, int>> subgraph_outputs_set;\n+  // Collect outputs referenced from output_names\n+  auto output_name_to_index_map = BuildTensorNameMap(output_names);\n+  // for (int node_id : subgraph_node_ids_no_placeholder) {", "path": "tensorflow/contrib/tensorrt/convert/convert_graph.cc", "position": null, "original_position": 142, "commit_id": "1e4b5b8c0cc1675b9ecac3569c91563a2a4f9984", "original_commit_id": "7035501c1b35d52d80d8fde3a95492d83a96f495", "user": {"login": "aaroey", "id": 31743510, "node_id": "MDQ6VXNlcjMxNzQzNTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31743510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaroey", "html_url": "https://github.com/aaroey", "followers_url": "https://api.github.com/users/aaroey/followers", "following_url": "https://api.github.com/users/aaroey/following{/other_user}", "gists_url": "https://api.github.com/users/aaroey/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaroey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaroey/subscriptions", "organizations_url": "https://api.github.com/users/aaroey/orgs", "repos_url": "https://api.github.com/users/aaroey/repos", "events_url": "https://api.github.com/users/aaroey/events{/privacy}", "received_events_url": "https://api.github.com/users/aaroey/received_events", "type": "User", "site_admin": false}, "body": "Remove this? And other commented lines as well. If some are for TODOs, add a TODO instead.", "created_at": "2018-01-24T18:08:22Z", "updated_at": "2018-02-12T23:36:57Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/16253#discussion_r163630166", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16253", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/163630166"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/16253#discussion_r163630166"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16253"}}, "body_html": "<p>Remove this? And other commented lines as well. If some are for TODOs, add a TODO instead.</p>", "body_text": "Remove this? And other commented lines as well. If some are for TODOs, add a TODO instead."}