{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/163633428", "pull_request_review_id": 91233299, "id": 163633428, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzYzMzQyOA==", "diff_hunk": "@@ -0,0 +1,1761 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/contrib/tensorrt/convert/convert_nodes.h\"\n+\n+#include <algorithm>\n+#include <fstream>\n+#include <list>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <sstream>\n+#include <string>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n+#include \"NvInfer.h\"\n+\n+#include \"tensorflow/contrib/tensorrt/log/trt_logger.h\"\n+#include \"tensorflow/core/framework/graph.pb.h\"\n+#include \"tensorflow/core/framework/node_def.pb.h\"\n+#include \"tensorflow/core/framework/node_def_builder.h\"\n+#include \"tensorflow/core/framework/types.pb.h\"\n+#include \"tensorflow/core/graph/algorithm.h\"\n+#include \"tensorflow/core/graph/graph.h\"\n+#include \"tensorflow/core/graph/graph_constructor.h\"\n+#include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/lib/core/status.h\"\n+#include \"tensorflow/core/platform/logging.h\"\n+\n+#define _TF_LOG_DEBUG ::tensorflow::internal::LogMessage(__FILE__, __LINE__, -1)\n+//  Check if the types are equal. Cast to int first so that failure log message\n+//  would work!\n+#define CHECK_EQ_TYPE(val1, val2) CHECK_EQ((int)val1, (int)val2)\n+//------------------------------------------------------------------------------\n+namespace tensorrt {\n+namespace convert {\n+\n+namespace {\n+\n+inline int get_dtype_size(nvinfer1::DataType trt_dtype) {\n+  switch (trt_dtype) {\n+    case nvinfer1::DataType::kFLOAT:\n+      return 4;\n+    case nvinfer1::DataType::kINT8:\n+      return 1;\n+    case nvinfer1::DataType::kHALF:\n+      return 2;\n+    default:\n+      return -1;\n+  }\n+}\n+\n+inline int get_dtype_size(tensorflow::DataType trt_dtype) {\n+  switch (trt_dtype) {\n+    case tensorflow::DataType::DT_FLOAT:\n+      return 4;\n+    case tensorflow::DataType::DT_INT8:\n+      return 1;\n+    case tensorflow::DataType::DT_HALF:\n+      return 2;\n+    case tensorflow::DataType::DT_INT32:\n+      return 4;\n+    default:\n+      return -1;\n+  }\n+}\n+\n+inline tensorflow::Status convert_dtype(tensorflow::DataType tf_dtype,\n+                                        nvinfer1::DataType* trt_dtype) {\n+  switch (tf_dtype) {\n+    case tensorflow::DataType::DT_FLOAT:\n+      *trt_dtype = nvinfer1::DataType::kFLOAT;\n+      break;\n+    case tensorflow::DataType::DT_INT8:\n+      *trt_dtype = nvinfer1::DataType::kINT8;\n+      break;\n+    case tensorflow::DataType::DT_HALF:\n+      *trt_dtype = nvinfer1::DataType::kHALF;\n+      break;\n+    default:\n+      return tensorflow::errors::InvalidArgument(\"Unsupported data type\");\n+  }\n+  return tensorflow::Status::OK();\n+}\n+\n+inline nvinfer1::Dims get_tensor_shape(const tensorflow::Tensor& tensor) {\n+  nvinfer1::Dims dims;\n+  dims.nbDims = tensor.dims();\n+  for (int i = 0; i < dims.nbDims; i++) {\n+    dims.d[i] = tensor.dim_size(i);\n+  }\n+  return dims;\n+}\n+\n+inline int64_t get_shape_size(nvinfer1::Dims shape) {\n+  // Returns total number of elements in shape\n+  int64_t count = 1;\n+  for (int d = 0; d < shape.nbDims; ++d) {\n+    count *= shape.d[d];\n+  }\n+  return count;\n+}\n+\n+static std::vector<std::pair<int, int>> createSamePadding(\n+    nvinfer1::DimsHW& stride, nvinfer1::DimsHW& kernel,\n+    std::vector<int64_t> inputDims) {\n+  std::vector<std::pair<int, int>> padding(inputDims.size());\n+  CHECK_EQ((size_t)stride.nbDims, inputDims.size());  // TODO(jie): N+C? NC+?\n+\n+  for (size_t i = 0; i < inputDims.size(); ++i) {\n+    /* formula to calculate the padding */", "path": "tensorflow/contrib/tensorrt/convert/convert_nodes.cc", "position": null, "original_position": 124, "commit_id": "1e4b5b8c0cc1675b9ecac3569c91563a2a4f9984", "original_commit_id": "7035501c1b35d52d80d8fde3a95492d83a96f495", "user": {"login": "aaroey", "id": 31743510, "node_id": "MDQ6VXNlcjMxNzQzNTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31743510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaroey", "html_url": "https://github.com/aaroey", "followers_url": "https://api.github.com/users/aaroey/followers", "following_url": "https://api.github.com/users/aaroey/following{/other_user}", "gists_url": "https://api.github.com/users/aaroey/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaroey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaroey/subscriptions", "organizations_url": "https://api.github.com/users/aaroey/orgs", "repos_url": "https://api.github.com/users/aaroey/repos", "events_url": "https://api.github.com/users/aaroey/events{/privacy}", "received_events_url": "https://api.github.com/users/aaroey/received_events", "type": "User", "site_admin": false}, "body": "The TF convention is to use the double slash form ('//') for comments.", "created_at": "2018-01-24T18:20:35Z", "updated_at": "2018-02-12T23:36:57Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/16253#discussion_r163633428", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16253", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/163633428"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/16253#discussion_r163633428"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16253"}}, "body_html": "<p>The TF convention is to use the double slash form ('//') for comments.</p>", "body_text": "The TF convention is to use the double slash form ('//') for comments."}