{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/164488288", "pull_request_review_id": 92267671, "id": 164488288, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDQ4ODI4OA==", "diff_hunk": "@@ -0,0 +1,123 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/contrib/tensorrt/shape_fn/trt_shfn.h\"\n+#include <string>\n+#include <vector>\n+#include \"NvInfer.h\"\n+#include \"tensorflow/contrib/tensorrt/log/trt_logger.h\"\n+\n+namespace tensorflow {\n+namespace shape_inference {\n+tensorflow::Status TRTEngineOpShapeInference(InferenceContext* c) {\n+  tensorflow::tensorrt::Logger gLogger;\n+  string serialized_engine;\n+  c->GetAttr(\"serialized_engine\", &serialized_engine);\n+  nvinfer1::IRuntime* infer = nvinfer1::createInferRuntime(gLogger);\n+  nvinfer1::ICudaEngine* trt_engine = infer->deserializeCudaEngine(\n+      serialized_engine.c_str(), serialized_engine.size(), nullptr);\n+\n+  // debug print out engine binding;\n+  std::stringstream oss;\n+  for (int i = 0; i < trt_engine->getNbBindings(); i++) {\n+    LOG(INFO) << \"index: \" << i\n+              << \", binding name: \" << trt_engine->getBindingName(i);\n+\n+    bool input_flag = trt_engine->bindingIsInput(i);\n+    oss << \"input?: \" << (input_flag ? \"Y\" : \"N\");\n+\n+    oss << \"Dimension: \";\n+    auto dims = trt_engine->getBindingDimensions(i);\n+    oss << \" nbDims: \" << dims.nbDims << \" -> \";\n+    for (int j = 0; j < dims.nbDims; j++) oss << dims.d[j] << \", \";\n+    LOG(INFO) << oss.str();\n+    oss.str(\"\");\n+    switch (trt_engine->getBindingDataType(i)) {\n+      case nvinfer1::DataType::kFLOAT:\n+        LOG(INFO) << \"data type: float\" << std::endl;\n+        break;\n+      case nvinfer1::DataType::kHALF:\n+        LOG(INFO) << \"data type: half\" << std::endl;\n+        break;\n+      case nvinfer1::DataType::kINT8:\n+        LOG(INFO) << \"data type: int8\" << std::endl;\n+        break;\n+    }\n+  }\n+\n+  int nbBatch = -1;\n+  // debug print out input arrays\n+  std::vector<::tensorflow::DataType> input_type;\n+  c->GetAttr(\"InT\", &input_type);\n+  oss.str(\"\");\n+  for (size_t i = 0; i < c->num_inputs(); i++) {\n+    // check if input shape is legit\n+    auto input_shape = c->input(i);\n+    int index = i;\n+    oss << \"input:\" << i << \" type: \" << input_type[index] << \" shape: \";\n+    for (int j = 0; j < c->Rank(input_shape); j++) {\n+      auto dimHandler = c->Dim(input_shape, j);\n+      if (c->ValueKnown(dimHandler))\n+        oss << c->Value(dimHandler) << \", \";\n+      else\n+        oss << \"?\" << c->Value(dimHandler) << \", \";\n+      if (j == 0) {\n+        if (i == 0)\n+          nbBatch = c->Value(dimHandler);\n+        else if (nbBatch != c->Value(dimHandler))\n+          LOG(WARNING) << \"!!!!!!nbBatch does not match!!!!!!\";", "path": "tensorflow/contrib/tensorrt/shape_fn/trt_shfn.cc", "position": null, "original_position": 80, "commit_id": "1e4b5b8c0cc1675b9ecac3569c91563a2a4f9984", "original_commit_id": "7611eef0208fa1413880a704e622e57bbcfad0d6", "user": {"login": "wujingyue", "id": 2772612, "node_id": "MDQ6VXNlcjI3NzI2MTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2772612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wujingyue", "html_url": "https://github.com/wujingyue", "followers_url": "https://api.github.com/users/wujingyue/followers", "following_url": "https://api.github.com/users/wujingyue/following{/other_user}", "gists_url": "https://api.github.com/users/wujingyue/gists{/gist_id}", "starred_url": "https://api.github.com/users/wujingyue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wujingyue/subscriptions", "organizations_url": "https://api.github.com/users/wujingyue/orgs", "repos_url": "https://api.github.com/users/wujingyue/repos", "events_url": "https://api.github.com/users/wujingyue/events{/privacy}", "received_events_url": "https://api.github.com/users/wujingyue/received_events", "type": "User", "site_admin": false}, "body": "Remove !s :)", "created_at": "2018-01-29T16:40:03Z", "updated_at": "2018-02-12T23:36:57Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/16253#discussion_r164488288", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16253", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/164488288"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/16253#discussion_r164488288"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16253"}}, "body_html": "<p>Remove !s :)</p>", "body_text": "Remove !s :)"}