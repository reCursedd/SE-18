{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/166978811", "pull_request_review_id": 95126400, "id": 166978811, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Njk3ODgxMQ==", "diff_hunk": "@@ -1128,18 +1128,8 @@ tensorflow::Status ConvertConst(Converter& ctx,\n   } else if (!weights_tensor.tensor_content().empty()) {\n     VLOG(2) << \"TENSOR!!!\" << node_def.name();\n     const auto& content = weights_tensor.tensor_content();\n-\n-    std::vector<char> values;", "path": "tensorflow/contrib/tensorrt/convert/convert_nodes.cc", "position": null, "original_position": 5, "commit_id": "1e4b5b8c0cc1675b9ecac3569c91563a2a4f9984", "original_commit_id": "bbe79073d63f610ec6f3448d616fe8d72c2502d4", "user": {"login": "aaroey", "id": 31743510, "node_id": "MDQ6VXNlcjMxNzQzNTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31743510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaroey", "html_url": "https://github.com/aaroey", "followers_url": "https://api.github.com/users/aaroey/followers", "following_url": "https://api.github.com/users/aaroey/following{/other_user}", "gists_url": "https://api.github.com/users/aaroey/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaroey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaroey/subscriptions", "organizations_url": "https://api.github.com/users/aaroey/orgs", "repos_url": "https://api.github.com/users/aaroey/repos", "events_url": "https://api.github.com/users/aaroey/events{/privacy}", "received_events_url": "https://api.github.com/users/aaroey/received_events", "type": "User", "site_admin": false}, "body": "You're right that it will go out of scope, but before that in TRT_ShapedWeights we made a copy of the value (line 1142). Actually I'm not sure how memory management works in TRT, so I made a copy every time when a new TRT_ShapedWeights is copied from an old one (see the copy constructor). Is it enough?\r\n\r\nAnd you're right that theoretically we don't need the copy. The main problem is, internally weights_tensor.tensor_content() is not a string, it's a class of complete different type having complete different APIs compared to tensorflow::string, so calling content.data() is invalid and won't compile. The only way to work around this is to call port::CopyToArray(), which internally accepts a different type of input (the internal type of 'content').\r\n\r\nIt's not ideal but that's the way how TF works. :( So please revert the changes here.", "created_at": "2018-02-08T15:54:51Z", "updated_at": "2018-02-12T23:36:57Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/16253#discussion_r166978811", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16253", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/166978811"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/16253#discussion_r166978811"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16253"}}, "body_html": "<p>You're right that it will go out of scope, but before that in TRT_ShapedWeights we made a copy of the value (line 1142). Actually I'm not sure how memory management works in TRT, so I made a copy every time when a new TRT_ShapedWeights is copied from an old one (see the copy constructor). Is it enough?</p>\n<p>And you're right that theoretically we don't need the copy. The main problem is, internally weights_tensor.tensor_content() is not a string, it's a class of complete different type having complete different APIs compared to tensorflow::string, so calling content.data() is invalid and won't compile. The only way to work around this is to call port::CopyToArray(), which internally accepts a different type of input (the internal type of 'content').</p>\n<p>It's not ideal but that's the way how TF works. :( So please revert the changes here.</p>", "body_text": "You're right that it will go out of scope, but before that in TRT_ShapedWeights we made a copy of the value (line 1142). Actually I'm not sure how memory management works in TRT, so I made a copy every time when a new TRT_ShapedWeights is copied from an old one (see the copy constructor). Is it enough?\nAnd you're right that theoretically we don't need the copy. The main problem is, internally weights_tensor.tensor_content() is not a string, it's a class of complete different type having complete different APIs compared to tensorflow::string, so calling content.data() is invalid and won't compile. The only way to work around this is to call port::CopyToArray(), which internally accepts a different type of input (the internal type of 'content').\nIt's not ideal but that's the way how TF works. :( So please revert the changes here.", "in_reply_to_id": 166836844}