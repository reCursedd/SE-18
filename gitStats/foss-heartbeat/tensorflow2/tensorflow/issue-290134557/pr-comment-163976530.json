{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/163976530", "pull_request_review_id": 91626725, "id": 163976530, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Mzk3NjUzMA==", "diff_hunk": "@@ -0,0 +1,169 @@\n+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+#include \"tensorflow/contrib/tensorrt/kernels/trt_engine_op.h\"\n+#include <cuda_runtime_api.h>\n+#include <sstream>\n+#include \"tensorflow/contrib/tensorrt/log/trt_logger.h\"\n+#include \"tensorflow/core/platform/logging.h\"\n+#include \"tensorflow/core/platform/stream_executor.h\"\n+\n+\n+namespace tensorflow {\n+static ::tensorflow::tensorrt::Logger gLogger;\n+\n+using namespace nvinfer1;\n+\n+namespace tensorrt {\n+\n+TRTEngineOp::TRTEngineOp(OpKernelConstruction* context) : OpKernel(context) {\n+  // read serialized_engine\n+  std::string serialized_engine;\n+  OP_REQUIRES_OK(context,\n+                 context->GetAttr(\"serialized_engine\", &serialized_engine));\n+\n+  // register input output node name in trt_sub_graph\n+  OP_REQUIRES_OK(context, context->GetAttr(\"input_nodes\", &input_nodes_));\n+  OP_REQUIRES_OK(context, context->GetAttr(\"output_nodes\", &output_nodes_));\n+\n+  // TODO(samikama) runtime should be taken from a resourcemanager as well.\n+  //  Only engine should be in the op and context and runtime should be taken\n+  //  from resourcemanager\n+  IRuntime* infer = createInferRuntime(gLogger);\n+  trt_engine_ptr_.reset(infer->deserializeCudaEngine(\n+      serialized_engine.c_str(), serialized_engine.size(), nullptr));\n+\n+  trt_execution_context_ptr_.reset(trt_engine_ptr_->createExecutionContext());\n+  // runtime is safe to delete after engine creation\n+  infer->destroy();\n+  std::stringstream oss;\n+  // debug iterate through all binding instances\n+  for (int i = 0; i < trt_engine_ptr_->getNbBindings(); i++) {\n+    LOG(INFO) << \"index: \" << i\n+              << \", binding name: \" << trt_engine_ptr_->getBindingName(i);\n+\n+    if (trt_engine_ptr_->bindingIsInput(i)) {\n+      LOG(INFO) << \"INPUT\";\n+    } else {\n+      LOG(INFO) << \"OUTPUT\";\n+    }\n+    oss << \"Dimension: \";\n+    auto dims = trt_engine_ptr_->getBindingDimensions(i);\n+    oss << \" nbDims: \" << dims.nbDims << \" -> \";\n+    for (int j = 0; j < Dims::MAX_DIMS; j++) {\n+      oss << dims.d[j] << \", \";\n+    }\n+    LOG(INFO) << oss.str();\n+    oss.str(\"\");\n+    switch (trt_engine_ptr_->getBindingDataType(i)) {\n+      case nvinfer1::DataType::kFLOAT:\n+        LOG(INFO) << \"data type float\" << std::endl;\n+        break;\n+      case nvinfer1::DataType::kHALF:\n+        LOG(INFO) << \"data type half\" << std::endl;\n+        break;\n+      case nvinfer1::DataType::kINT8:\n+        LOG(INFO) << \"data type int8\" << std::endl;\n+        break;\n+    }\n+  }\n+\n+}\n+\n+void TRTEngineOp::Compute(OpKernelContext* context) {\n+  int nbBindings = context->num_inputs() + context->num_outputs();\n+  // TODO(jjsjann123) multiple input/output\n+  std::vector<void*> buffers(nbBindings);\n+\n+  size_t bindingIndex;", "path": "tensorflow/contrib/tensorrt/kernels/trt_engine_op.cc", "position": null, "original_position": 89, "commit_id": "1e4b5b8c0cc1675b9ecac3569c91563a2a4f9984", "original_commit_id": "9384314e0cbf6f315d870200fc5abe421deefcab", "user": {"login": "aaroey", "id": 31743510, "node_id": "MDQ6VXNlcjMxNzQzNTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/31743510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaroey", "html_url": "https://github.com/aaroey", "followers_url": "https://api.github.com/users/aaroey/followers", "following_url": "https://api.github.com/users/aaroey/following{/other_user}", "gists_url": "https://api.github.com/users/aaroey/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaroey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaroey/subscriptions", "organizations_url": "https://api.github.com/users/aaroey/orgs", "repos_url": "https://api.github.com/users/aaroey/repos", "events_url": "https://api.github.com/users/aaroey/events{/privacy}", "received_events_url": "https://api.github.com/users/aaroey/received_events", "type": "User", "site_admin": false}, "body": "Please follow the [naming conventions](https://google.github.io/styleguide/cppguide.html#General_Naming_Rules), and fix all namings in the PR.", "created_at": "2018-01-25T21:43:26Z", "updated_at": "2018-02-12T23:36:57Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/16253#discussion_r163976530", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16253", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/163976530"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/16253#discussion_r163976530"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16253"}}, "body_html": "<p>Please follow the <a href=\"https://google.github.io/styleguide/cppguide.html#General_Naming_Rules\" rel=\"nofollow\">naming conventions</a>, and fix all namings in the PR.</p>", "body_text": "Please follow the naming conventions, and fix all namings in the PR."}