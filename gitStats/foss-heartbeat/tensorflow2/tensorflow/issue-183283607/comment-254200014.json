{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/254200014", "html_url": "https://github.com/tensorflow/tensorflow/issues/4996#issuecomment-254200014", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4996", "id": 254200014, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDIwMDAxNA==", "user": {"login": "sirfz", "id": 4741099, "node_id": "MDQ6VXNlcjQ3NDEwOTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4741099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirfz", "html_url": "https://github.com/sirfz", "followers_url": "https://api.github.com/users/sirfz/followers", "following_url": "https://api.github.com/users/sirfz/following{/other_user}", "gists_url": "https://api.github.com/users/sirfz/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirfz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirfz/subscriptions", "organizations_url": "https://api.github.com/users/sirfz/orgs", "repos_url": "https://api.github.com/users/sirfz/repos", "events_url": "https://api.github.com/users/sirfz/events{/privacy}", "received_events_url": "https://api.github.com/users/sirfz/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-17T12:58:59Z", "updated_at": "2016-10-17T13:01:01Z", "author_association": "NONE", "body_html": "<p>Here's a sample op (sample_op.cc):</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/op.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/op_kernel.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/shape_inference.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/common_shape_fns.h<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-k\">using</span> <span class=\"pl-k\">namespace</span> <span class=\"pl-en\">tensorflow</span><span class=\"pl-k\">;</span>\n\n<span class=\"pl-en\">REGISTER_OP</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SampleOp<span class=\"pl-pds\">\"</span></span>)\n    .Input(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input: string<span class=\"pl-pds\">\"</span></span>)\n    .Output(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>output: string<span class=\"pl-pds\">\"</span></span>)\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span> .SetShapeFn([](shape_inference::InferenceContext* c) { <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span>     shape_inference::ShapeHandle input; <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span>     TF_RETURN_IF_ERROR(c-&gt;WithRank(c-&gt;input(0), 1, &amp;input)); <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span>     if (c-&gt;Value(c-&gt;Dim(input, 0)) &gt; 1) { <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span>         return errors::InvalidArgument( <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span>             \"Shape of a default must be a length-0 or length-1 vector\"); <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span>     } <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span>     c-&gt;set_output(0, input); <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span>     return Status::OK(); <span class=\"pl-c\">*/</span></span>\n    <span class=\"pl-c\"><span class=\"pl-c\">/*</span> }) <span class=\"pl-c\">*/</span></span>\n    .SetShapeFn([](shape_inference::UnchangedShape))\n    .Doc(<span class=\"pl-s\"><span class=\"pl-pds\">R\"doc(</span></span>\n<span class=\"pl-s\">Return input strings uchanged</span>\n<span class=\"pl-s\">input: 1-D. Input strings</span>\n<span class=\"pl-s\">output: A vector of strings corresponding to the input strings.</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">)doc\"</span></span>);\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">SampleOp</span> : <span class=\"pl-k\">public</span> <span class=\"pl-en\">OpKernel</span> {\n <span class=\"pl-k\">public:</span>\n  <span class=\"pl-k\">explicit</span> <span class=\"pl-en\">SampleOp</span>(OpKernelConstruction* context): OpKernel(context) {\n  }\n\n  <span class=\"pl-k\">void</span> <span class=\"pl-en\">Compute</span>(OpKernelContext* ctx) <span class=\"pl-k\">override</span> {\n    <span class=\"pl-k\">const</span> Tensor* input_tensor;\n    <span class=\"pl-c1\">OP_REQUIRES_OK</span>(ctx, ctx-&gt;<span class=\"pl-c1\">input</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input<span class=\"pl-pds\">\"</span></span>, &amp;input_tensor));\n    <span class=\"pl-k\">auto</span> <span class=\"pl-c1\">records_t</span> = input_tensor-&gt;<span class=\"pl-smi\">flat</span>&lt;string&gt;();\n    <span class=\"pl-k\">const</span> int64 input_size = <span class=\"pl-c1\">records_t</span>.<span class=\"pl-c1\">size</span>();\n\n    Tensor* <span class=\"pl-c1\">output_t</span>;\n    <span class=\"pl-c1\">OP_REQUIRES_OK</span>(\n        ctx, ctx-&gt;<span class=\"pl-c1\">allocate_output</span>(<span class=\"pl-c1\">0</span>, input_tensor-&gt;<span class=\"pl-c1\">shape</span>(), &amp;<span class=\"pl-c1\">output_t</span>));\n    <span class=\"pl-k\">auto</span> output = <span class=\"pl-c1\">output_t</span>-&gt;<span class=\"pl-smi\">flat</span>&lt;string&gt;();\n\n    <span class=\"pl-k\">for</span> (int64 i = <span class=\"pl-c1\">0</span>; i &lt; input_size; ++i) {\n      <span class=\"pl-c1\">output</span>(i) = <span class=\"pl-c1\">records_t</span>(i);\n    }\n  }\n};\n\n<span class=\"pl-en\">REGISTER_KERNEL_BUILDER</span>(Name(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SampleOp<span class=\"pl-pds\">\"</span></span>).Device(DEVICE_CPU), SampleOp);</pre></div>\n<p>Compiling this file yields:</p>\n<pre><code>$ TF_INC=$(python -c 'import tensorflow as tf; print(tf.sysconfig.get_include())')\n$ g++ -std=c++11 -shared sample_op.cc -o sample_op.so -fPIC -I $TF_INC -O2 -D_GLIBCXX_USE_CXX11_ABI=0\nsample_op.cc:4:56: fatal error: tensorflow/core/framework/common_shape_fns.h: No such file or directory\ncompilation terminated.\n</code></pre>\n<p>g++ version:</p>\n<pre><code>$ g++ --version                                                                                                                                         1 \u21b5\ng++ (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0 20160609\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n</code></pre>", "body_text": "Here's a sample op (sample_op.cc):\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n\nusing namespace tensorflow;\n\nREGISTER_OP(\"SampleOp\")\n    .Input(\"input: string\")\n    .Output(\"output: string\")\n    /* .SetShapeFn([](shape_inference::InferenceContext* c) { */\n    /*     shape_inference::ShapeHandle input; */\n    /*     TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 1, &input)); */\n    /*     if (c->Value(c->Dim(input, 0)) > 1) { */\n    /*         return errors::InvalidArgument( */\n    /*             \"Shape of a default must be a length-0 or length-1 vector\"); */\n    /*     } */\n    /*     c->set_output(0, input); */\n    /*     return Status::OK(); */\n    /* }) */\n    .SetShapeFn([](shape_inference::UnchangedShape))\n    .Doc(R\"doc(\nReturn input strings uchanged\ninput: 1-D. Input strings\noutput: A vector of strings corresponding to the input strings.\n)doc\");\n\nclass SampleOp : public OpKernel {\n public:\n  explicit SampleOp(OpKernelConstruction* context): OpKernel(context) {\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor* input_tensor;\n    OP_REQUIRES_OK(ctx, ctx->input(\"input\", &input_tensor));\n    auto records_t = input_tensor->flat<string>();\n    const int64 input_size = records_t.size();\n\n    Tensor* output_t;\n    OP_REQUIRES_OK(\n        ctx, ctx->allocate_output(0, input_tensor->shape(), &output_t));\n    auto output = output_t->flat<string>();\n\n    for (int64 i = 0; i < input_size; ++i) {\n      output(i) = records_t(i);\n    }\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"SampleOp\").Device(DEVICE_CPU), SampleOp);\nCompiling this file yields:\n$ TF_INC=$(python -c 'import tensorflow as tf; print(tf.sysconfig.get_include())')\n$ g++ -std=c++11 -shared sample_op.cc -o sample_op.so -fPIC -I $TF_INC -O2 -D_GLIBCXX_USE_CXX11_ABI=0\nsample_op.cc:4:56: fatal error: tensorflow/core/framework/common_shape_fns.h: No such file or directory\ncompilation terminated.\n\ng++ version:\n$ g++ --version                                                                                                                                         1 \u21b5\ng++ (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0 20160609\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.", "body": "Here's a sample op (sample_op.cc):\n\n``` c++\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/shape_inference.h\"\n#include \"tensorflow/core/framework/common_shape_fns.h\"\n\nusing namespace tensorflow;\n\nREGISTER_OP(\"SampleOp\")\n    .Input(\"input: string\")\n    .Output(\"output: string\")\n    /* .SetShapeFn([](shape_inference::InferenceContext* c) { */\n    /*     shape_inference::ShapeHandle input; */\n    /*     TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 1, &input)); */\n    /*     if (c->Value(c->Dim(input, 0)) > 1) { */\n    /*         return errors::InvalidArgument( */\n    /*             \"Shape of a default must be a length-0 or length-1 vector\"); */\n    /*     } */\n    /*     c->set_output(0, input); */\n    /*     return Status::OK(); */\n    /* }) */\n    .SetShapeFn([](shape_inference::UnchangedShape))\n    .Doc(R\"doc(\nReturn input strings uchanged\ninput: 1-D. Input strings\noutput: A vector of strings corresponding to the input strings.\n)doc\");\n\nclass SampleOp : public OpKernel {\n public:\n  explicit SampleOp(OpKernelConstruction* context): OpKernel(context) {\n  }\n\n  void Compute(OpKernelContext* ctx) override {\n    const Tensor* input_tensor;\n    OP_REQUIRES_OK(ctx, ctx->input(\"input\", &input_tensor));\n    auto records_t = input_tensor->flat<string>();\n    const int64 input_size = records_t.size();\n\n    Tensor* output_t;\n    OP_REQUIRES_OK(\n        ctx, ctx->allocate_output(0, input_tensor->shape(), &output_t));\n    auto output = output_t->flat<string>();\n\n    for (int64 i = 0; i < input_size; ++i) {\n      output(i) = records_t(i);\n    }\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"SampleOp\").Device(DEVICE_CPU), SampleOp);\n```\n\nCompiling this file yields:\n\n```\n$ TF_INC=$(python -c 'import tensorflow as tf; print(tf.sysconfig.get_include())')\n$ g++ -std=c++11 -shared sample_op.cc -o sample_op.so -fPIC -I $TF_INC -O2 -D_GLIBCXX_USE_CXX11_ABI=0\nsample_op.cc:4:56: fatal error: tensorflow/core/framework/common_shape_fns.h: No such file or directory\ncompilation terminated.\n```\n\ng++ version:\n\n```\n$ g++ --version                                                                                                                                         1 \u21b5\ng++ (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0 20160609\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\n"}