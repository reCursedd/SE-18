{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12346", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12346/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12346/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12346/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12346", "id": 250826437, "node_id": "MDU6SXNzdWUyNTA4MjY0Mzc=", "number": 12346, "title": "string_input_producer num_epochs not working as expected", "user": {"login": "Bleezworld", "id": 6170138, "node_id": "MDQ6VXNlcjYxNzAxMzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6170138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bleezworld", "html_url": "https://github.com/Bleezworld", "followers_url": "https://api.github.com/users/Bleezworld/followers", "following_url": "https://api.github.com/users/Bleezworld/following{/other_user}", "gists_url": "https://api.github.com/users/Bleezworld/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bleezworld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bleezworld/subscriptions", "organizations_url": "https://api.github.com/users/Bleezworld/orgs", "repos_url": "https://api.github.com/users/Bleezworld/repos", "events_url": "https://api.github.com/users/Bleezworld/events{/privacy}", "received_events_url": "https://api.github.com/users/Bleezworld/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-17T04:27:53Z", "updated_at": "2017-08-17T16:58:55Z", "closed_at": "2017-08-17T16:58:55Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: no</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Mac OSX 10.12.6</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.2.1</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<p>Reading a (csv) file with <code>string_input_producer()</code> / <code>start_queue_runners()</code> works up to a certain limit. Using <code>tf.train.shuffle_batch()</code>, only the first N lines of the file are read.<br>\nAlso, num_epochs seems limited to a certain number (30 without batching, lower with batch).</p>\n<h3>Source code / logs</h3>\n<p>Simple script for reading a csv file / training a linear model. The code WORKS. But it does NOT respond to changes in num_epochs / the number of steps printed at the end is not what we expect to see.</p>\n<p>csv file: (model: W=-1, b=1 , y=Wx+b)</p>\n<p>2,-1<br>\n3,0<br>\n4,1<br>\n5,2<br>\n(repeated)</p>\n<pre><code>import tensorflow as tf\n\nW = tf.Variable([.3], dtype=tf.float32)\nb = tf.Variable([-.3], dtype=tf.float32)\nx = tf.placeholder(tf.float32, name=\"x\")\ny = tf.placeholder(tf.float32)\nlinear_model = tf.add(W * x, b, name=\"model\")\nsquared_deltas = tf.square(linear_model - y)\nloss = tf.reduce_sum(squared_deltas)\n\ntrain = tf.train.AdamOptimizer(1e-3).minimize(loss)\n\n# reading input\nfilename_queue = tf.train.string_input_producer([\"/tmp/input.csv\"], num_epochs=100)\nreader = tf.TextLineReader(skip_header_lines=0)\n_, csv_row = reader.read(filename_queue)\nrecord_defaults = [[0.], [0.]]\ncol_x, col_label = tf.decode_csv(csv_row, record_defaults=record_defaults)\nfeatures = tf.stack([col_x])\n\nwith tf.Session() as sess:\n  sess.run(tf.local_variables_initializer())\n  sess.run(tf.global_variables_initializer())\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(coord=coord)\n  n = 0\n  while True:\n    try:\n      n += 1\n      inp, lab = sess.run([features, col_label])\n      sess.run(train, feed_dict={x:inp, y:lab})\n    except tf.errors.OutOfRangeError:\n      break\n    finally:\n      coord.request_stop()\n  coord.join(threads)\n  print(n)\n</code></pre>\n<p>with batch: adding those lines in reading input</p>\n<pre><code>batch_size = 20\nmin_after_dequeue = 10000\ncol_x, col_label = tf.decode_csv(csv_row, record_defaults=record_defaults)\ncapacity = 3 * min_after_dequeue + batch_size\nx_batch, label_batch = tf.train.shuffle_batch(\n    [col_x, col_label], batch_size=batch_size, capacity=capacity,\n    min_after_dequeue=min_after_dequeue)\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OSX 10.12.6\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): 1.2.1\nPython version: 3.6\nBazel version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\nReading a (csv) file with string_input_producer() / start_queue_runners() works up to a certain limit. Using tf.train.shuffle_batch(), only the first N lines of the file are read.\nAlso, num_epochs seems limited to a certain number (30 without batching, lower with batch).\nSource code / logs\nSimple script for reading a csv file / training a linear model. The code WORKS. But it does NOT respond to changes in num_epochs / the number of steps printed at the end is not what we expect to see.\ncsv file: (model: W=-1, b=1 , y=Wx+b)\n2,-1\n3,0\n4,1\n5,2\n(repeated)\nimport tensorflow as tf\n\nW = tf.Variable([.3], dtype=tf.float32)\nb = tf.Variable([-.3], dtype=tf.float32)\nx = tf.placeholder(tf.float32, name=\"x\")\ny = tf.placeholder(tf.float32)\nlinear_model = tf.add(W * x, b, name=\"model\")\nsquared_deltas = tf.square(linear_model - y)\nloss = tf.reduce_sum(squared_deltas)\n\ntrain = tf.train.AdamOptimizer(1e-3).minimize(loss)\n\n# reading input\nfilename_queue = tf.train.string_input_producer([\"/tmp/input.csv\"], num_epochs=100)\nreader = tf.TextLineReader(skip_header_lines=0)\n_, csv_row = reader.read(filename_queue)\nrecord_defaults = [[0.], [0.]]\ncol_x, col_label = tf.decode_csv(csv_row, record_defaults=record_defaults)\nfeatures = tf.stack([col_x])\n\nwith tf.Session() as sess:\n  sess.run(tf.local_variables_initializer())\n  sess.run(tf.global_variables_initializer())\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(coord=coord)\n  n = 0\n  while True:\n    try:\n      n += 1\n      inp, lab = sess.run([features, col_label])\n      sess.run(train, feed_dict={x:inp, y:lab})\n    except tf.errors.OutOfRangeError:\n      break\n    finally:\n      coord.request_stop()\n  coord.join(threads)\n  print(n)\n\nwith batch: adding those lines in reading input\nbatch_size = 20\nmin_after_dequeue = 10000\ncol_x, col_label = tf.decode_csv(csv_row, record_defaults=record_defaults)\ncapacity = 3 * min_after_dequeue + batch_size\nx_batch, label_batch = tf.train.shuffle_batch(\n    [col_x, col_label], batch_size=batch_size, capacity=capacity,\n    min_after_dequeue=min_after_dequeue)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: no\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Mac OSX 10.12.6\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: 1.2.1\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n\r\nReading a (csv) file with `string_input_producer()` / `start_queue_runners()` works up to a certain limit. Using `tf.train.shuffle_batch()`, only the first N lines of the file are read.\r\nAlso, num_epochs seems limited to a certain number (30 without batching, lower with batch).\r\n\r\n### Source code / logs\r\n\r\nSimple script for reading a csv file / training a linear model. The code WORKS. But it does NOT respond to changes in num_epochs / the number of steps printed at the end is not what we expect to see.\r\n\r\ncsv file: (model: W=-1, b=1 , y=Wx+b)\r\n\r\n2,-1\r\n3,0\r\n4,1\r\n5,2\r\n(repeated)\r\n\r\n\r\n    import tensorflow as tf\r\n\r\n    W = tf.Variable([.3], dtype=tf.float32)\r\n    b = tf.Variable([-.3], dtype=tf.float32)\r\n    x = tf.placeholder(tf.float32, name=\"x\")\r\n    y = tf.placeholder(tf.float32)\r\n    linear_model = tf.add(W * x, b, name=\"model\")\r\n    squared_deltas = tf.square(linear_model - y)\r\n    loss = tf.reduce_sum(squared_deltas)\r\n\r\n    train = tf.train.AdamOptimizer(1e-3).minimize(loss)\r\n\r\n    # reading input\r\n    filename_queue = tf.train.string_input_producer([\"/tmp/input.csv\"], num_epochs=100)\r\n    reader = tf.TextLineReader(skip_header_lines=0)\r\n    _, csv_row = reader.read(filename_queue)\r\n    record_defaults = [[0.], [0.]]\r\n    col_x, col_label = tf.decode_csv(csv_row, record_defaults=record_defaults)\r\n    features = tf.stack([col_x])\r\n\r\n    with tf.Session() as sess:\r\n      sess.run(tf.local_variables_initializer())\r\n      sess.run(tf.global_variables_initializer())\r\n      coord = tf.train.Coordinator()\r\n      threads = tf.train.start_queue_runners(coord=coord)\r\n      n = 0\r\n      while True:\r\n        try:\r\n          n += 1\r\n          inp, lab = sess.run([features, col_label])\r\n          sess.run(train, feed_dict={x:inp, y:lab})\r\n        except tf.errors.OutOfRangeError:\r\n          break\r\n        finally:\r\n          coord.request_stop()\r\n      coord.join(threads)\r\n      print(n)\r\n\r\nwith batch: adding those lines in reading input\r\n\r\n    batch_size = 20\r\n    min_after_dequeue = 10000\r\n    col_x, col_label = tf.decode_csv(csv_row, record_defaults=record_defaults)\r\n    capacity = 3 * min_after_dequeue + batch_size\r\n    x_batch, label_batch = tf.train.shuffle_batch(\r\n        [col_x, col_label], batch_size=batch_size, capacity=capacity,\r\n        min_after_dequeue=min_after_dequeue)\r\n"}