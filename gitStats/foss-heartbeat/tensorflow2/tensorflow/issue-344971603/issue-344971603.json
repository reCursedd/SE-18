{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21173", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21173/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21173/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21173/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21173", "id": 344971603, "node_id": "MDU6SXNzdWUzNDQ5NzE2MDM=", "number": 21173, "title": "tf.nn.top_k returns wrong indices", "user": {"login": "lioutasb", "id": 9558061, "node_id": "MDQ6VXNlcjk1NTgwNjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/9558061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lioutasb", "html_url": "https://github.com/lioutasb", "followers_url": "https://api.github.com/users/lioutasb/followers", "following_url": "https://api.github.com/users/lioutasb/following{/other_user}", "gists_url": "https://api.github.com/users/lioutasb/gists{/gist_id}", "starred_url": "https://api.github.com/users/lioutasb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lioutasb/subscriptions", "organizations_url": "https://api.github.com/users/lioutasb/orgs", "repos_url": "https://api.github.com/users/lioutasb/repos", "events_url": "https://api.github.com/users/lioutasb/events{/privacy}", "received_events_url": "https://api.github.com/users/lioutasb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-26T19:15:55Z", "updated_at": "2018-07-26T20:07:46Z", "closed_at": "2018-07-26T20:06:49Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes?</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: N/A</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.9.0 / 1.8.0 / 1.5.0</li>\n<li><strong>Python version</strong>: 2.7 / 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA 9.0 / cuDNN 7.0.5</li>\n<li><strong>GPU model and memory</strong>: GeForce GTX 1050Ti 4GB (Laptop)</li>\n<li><strong>Exact command to reproduce</strong>: <a href=\"https://www.tensorflow.org/api_docs/python/tf/nn/top_k\" rel=\"nofollow\">tf.nn.top_k</a></li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The <a href=\"https://www.tensorflow.org/api_docs/python/tf/nn/top_k\" rel=\"nofollow\">tf.nn.top_k</a> command return wrong ranked indices.<br>\nE.g.<br>\nif I run the following commands</p>\n<pre><code>import tensorflow as tf\n\na = tf.constant([[5,6,4],[0.1,2,3]])\nv, r = tf.nn.top_k(a, 3)\n\nsess.run(a)\nsess.run(r)\nsess.run(v)\n</code></pre>\n<p>the results are as expected</p>\n<pre><code>&gt;&gt;&gt; sess.run(a)\narray([[5. , 6. , 4. ],\n       [0.1, 2. , 3. ]], dtype=float32)\n&gt;&gt;&gt; sess.run(r)\narray([[1, 0, 2],\n       [2, 1, 0]], dtype=int32)\n&gt;&gt;&gt; sess.run(v)\narray([[6. , 5. , 4. ],\n       [3. , 2. , 0.1]], dtype=float32)\n</code></pre>\n<p>but if I try the following example</p>\n<pre><code>import tensorflow as tf\n\na = tf.constant([[-5,0.8,0.4],[0.5,0.3,2.6]])\nv, r = tf.nn.top_k(a, 3)\n\nsess.run(a)\nsess.run(r)\nsess.run(v)\n</code></pre>\n<p>the results of the indices tensor are totally wrong</p>\n<pre><code>&gt;&gt;&gt; sess.run(a)\narray([[-5. ,  0.8,  0.4],\n       [ 0.5,  0.3,  2.6]], dtype=float32)\n&gt;&gt;&gt; sess.run(r)\narray([[1, 2, 0],\n       [2, 0, 1]], dtype=int32)\n&gt;&gt;&gt; sess.run(v)\narray([[ 0.8,  0.4, -5. ],\n       [ 2.6,  0.5,  0.3]], dtype=float32)\n</code></pre>\n<p>Same thing happens for higher rank tensors and more complex ordering of the input values.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes?\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.9.0 / 1.8.0 / 1.5.0\nPython version: 2.7 / 3.6\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: CUDA 9.0 / cuDNN 7.0.5\nGPU model and memory: GeForce GTX 1050Ti 4GB (Laptop)\nExact command to reproduce: tf.nn.top_k\n\nDescribe the problem\nThe tf.nn.top_k command return wrong ranked indices.\nE.g.\nif I run the following commands\nimport tensorflow as tf\n\na = tf.constant([[5,6,4],[0.1,2,3]])\nv, r = tf.nn.top_k(a, 3)\n\nsess.run(a)\nsess.run(r)\nsess.run(v)\n\nthe results are as expected\n>>> sess.run(a)\narray([[5. , 6. , 4. ],\n       [0.1, 2. , 3. ]], dtype=float32)\n>>> sess.run(r)\narray([[1, 0, 2],\n       [2, 1, 0]], dtype=int32)\n>>> sess.run(v)\narray([[6. , 5. , 4. ],\n       [3. , 2. , 0.1]], dtype=float32)\n\nbut if I try the following example\nimport tensorflow as tf\n\na = tf.constant([[-5,0.8,0.4],[0.5,0.3,2.6]])\nv, r = tf.nn.top_k(a, 3)\n\nsess.run(a)\nsess.run(r)\nsess.run(v)\n\nthe results of the indices tensor are totally wrong\n>>> sess.run(a)\narray([[-5. ,  0.8,  0.4],\n       [ 0.5,  0.3,  2.6]], dtype=float32)\n>>> sess.run(r)\narray([[1, 2, 0],\n       [2, 0, 1]], dtype=int32)\n>>> sess.run(v)\narray([[ 0.8,  0.4, -5. ],\n       [ 2.6,  0.5,  0.3]], dtype=float32)\n\nSame thing happens for higher rank tensors and more complex ordering of the input values.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes?\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: N/A\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.9.0 / 1.8.0 / 1.5.0\r\n- **Python version**: 2.7 / 3.6\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: CUDA 9.0 / cuDNN 7.0.5\r\n- **GPU model and memory**: GeForce GTX 1050Ti 4GB (Laptop)\r\n- **Exact command to reproduce**: [tf.nn.top_k](https://www.tensorflow.org/api_docs/python/tf/nn/top_k)\r\n\r\n### Describe the problem\r\nThe [tf.nn.top_k](https://www.tensorflow.org/api_docs/python/tf/nn/top_k) command return wrong ranked indices. \r\nE.g.\r\nif I run the following commands\r\n```\r\nimport tensorflow as tf\r\n\r\na = tf.constant([[5,6,4],[0.1,2,3]])\r\nv, r = tf.nn.top_k(a, 3)\r\n\r\nsess.run(a)\r\nsess.run(r)\r\nsess.run(v)\r\n```\r\nthe results are as expected \r\n\r\n```\r\n>>> sess.run(a)\r\narray([[5. , 6. , 4. ],\r\n       [0.1, 2. , 3. ]], dtype=float32)\r\n>>> sess.run(r)\r\narray([[1, 0, 2],\r\n       [2, 1, 0]], dtype=int32)\r\n>>> sess.run(v)\r\narray([[6. , 5. , 4. ],\r\n       [3. , 2. , 0.1]], dtype=float32)\r\n```\r\nbut if I try the following example\r\n```\r\nimport tensorflow as tf\r\n\r\na = tf.constant([[-5,0.8,0.4],[0.5,0.3,2.6]])\r\nv, r = tf.nn.top_k(a, 3)\r\n\r\nsess.run(a)\r\nsess.run(r)\r\nsess.run(v)\r\n```\r\nthe results of the indices tensor are totally wrong \r\n```\r\n>>> sess.run(a)\r\narray([[-5. ,  0.8,  0.4],\r\n       [ 0.5,  0.3,  2.6]], dtype=float32)\r\n>>> sess.run(r)\r\narray([[1, 2, 0],\r\n       [2, 0, 1]], dtype=int32)\r\n>>> sess.run(v)\r\narray([[ 0.8,  0.4, -5. ],\r\n       [ 2.6,  0.5,  0.3]], dtype=float32)\r\n```\r\nSame thing happens for higher rank tensors and more complex ordering of the input values.\r\n"}