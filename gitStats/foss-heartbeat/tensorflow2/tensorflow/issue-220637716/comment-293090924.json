{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/293090924", "html_url": "https://github.com/tensorflow/tensorflow/issues/9103#issuecomment-293090924", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9103", "id": 293090924, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzA5MDkyNA==", "user": {"login": "karpkarp", "id": 20780340, "node_id": "MDQ6VXNlcjIwNzgwMzQw", "avatar_url": "https://avatars1.githubusercontent.com/u/20780340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karpkarp", "html_url": "https://github.com/karpkarp", "followers_url": "https://api.github.com/users/karpkarp/followers", "following_url": "https://api.github.com/users/karpkarp/following{/other_user}", "gists_url": "https://api.github.com/users/karpkarp/gists{/gist_id}", "starred_url": "https://api.github.com/users/karpkarp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karpkarp/subscriptions", "organizations_url": "https://api.github.com/users/karpkarp/orgs", "repos_url": "https://api.github.com/users/karpkarp/repos", "events_url": "https://api.github.com/users/karpkarp/events{/privacy}", "received_events_url": "https://api.github.com/users/karpkarp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-10T21:56:51Z", "updated_at": "2017-04-10T22:24:52Z", "author_association": "NONE", "body_html": "<p>It seems in array_ops.py, it sets a requirement for the shape to be fully defined with shape.is_fully_defined() in the placeholder function. Any particular reason for this? Does this mean that a placeholder of shape of [None, SomeNum] will not be enforced?</p>\n<p>In any case, I removed the condition where the Placeholder shape has to be fully defined and the serialization issues are fixed. This does break placeholders with no defined shape so I added two additional function in python/framework/tensor_shape.py</p>\n<p>python/framework/tensor_shape</p>\n<div class=\"highlight highlight-source-python\"><pre> <span class=\"pl-k\">def</span> <span class=\"pl-en\">is_partially_defined</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._dims <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">assert_is_partially_defined</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">self</span>.is_partially_defined(<span class=\"pl-c1\">self</span>):\n      <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">ValueError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Shape <span class=\"pl-c1\">%s</span> is not partially defined<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-c1\">self</span>)\n</pre></div>\n<p>python\\ops\\array_ops.py</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">placeholder</span>(<span class=\"pl-smi\">dtype</span>, <span class=\"pl-smi\">shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">name</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n  shape <span class=\"pl-k\">=</span> tensor_shape.as_shape(shape)\n  <span class=\"pl-k\">if</span> shape.is_partially_defined():\n    dim_list <span class=\"pl-k\">=</span> shape.as_list()\n  <span class=\"pl-k\">else</span>:\n    dim_list <span class=\"pl-k\">=</span> []\n  ret <span class=\"pl-k\">=</span> gen_array_ops._placeholder(\n      <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype,\n      <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>dim_list,\n      <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>name)\n  ret.set_shape(shape)\n  <span class=\"pl-k\">return</span> ret</pre></div>\n<div class=\"highlight highlight-source-json\"><pre>  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>versions<span class=\"pl-pds\">\"</span></span>: {\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>producer<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">21</span>\n  },\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node<span class=\"pl-pds\">\"</span></span>: [\n    {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>op<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Placeholder<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>attr<span class=\"pl-pds\">\"</span></span>: {\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shape<span class=\"pl-pds\">\"</span></span>: {\n          <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shape<span class=\"pl-pds\">\"</span></span>: {\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dim<span class=\"pl-pds\">\"</span></span>: [\n              {\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>size<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-1<span class=\"pl-pds\">\"</span></span>\n              },\n              {\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>size<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>784<span class=\"pl-pds\">\"</span></span>\n              }\n            ]\n          }\n        },\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dtype<span class=\"pl-pds\">\"</span></span>: {\n          <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>type<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DT_FLOAT<span class=\"pl-pds\">\"</span></span>\n        }\n      }\n    },\n    {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>op<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Placeholder<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>y_<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>attr<span class=\"pl-pds\">\"</span></span>: {\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shape<span class=\"pl-pds\">\"</span></span>: {\n          <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shape<span class=\"pl-pds\">\"</span></span>: {\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dim<span class=\"pl-pds\">\"</span></span>: [\n              {\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>size<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-1<span class=\"pl-pds\">\"</span></span>\n              },\n              {\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>size<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>10<span class=\"pl-pds\">\"</span></span>\n              }\n            ]\n          }\n        },\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dtype<span class=\"pl-pds\">\"</span></span>: {\n          <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>type<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DT_FLOAT<span class=\"pl-pds\">\"</span></span>\n        }\n      }\n    },\n    {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>op<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>NoOp<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>init<span class=\"pl-pds\">\"</span></span>\n    }\n  ]\n}</pre></div>", "body_text": "It seems in array_ops.py, it sets a requirement for the shape to be fully defined with shape.is_fully_defined() in the placeholder function. Any particular reason for this? Does this mean that a placeholder of shape of [None, SomeNum] will not be enforced?\nIn any case, I removed the condition where the Placeholder shape has to be fully defined and the serialization issues are fixed. This does break placeholders with no defined shape so I added two additional function in python/framework/tensor_shape.py\npython/framework/tensor_shape\n def is_partially_defined(self):\n    return self._dims is not None\n\n  def assert_is_partially_defined(self):\n    if not self.is_partially_defined(self):\n      raise ValueError(\"Shape %s is not partially defined\" % self)\n\npython\\ops\\array_ops.py\ndef placeholder(dtype, shape=None, name=None):\n  shape = tensor_shape.as_shape(shape)\n  if shape.is_partially_defined():\n    dim_list = shape.as_list()\n  else:\n    dim_list = []\n  ret = gen_array_ops._placeholder(\n      dtype=dtype,\n      shape=dim_list,\n      name=name)\n  ret.set_shape(shape)\n  return ret\n  \"versions\": {\n    \"producer\": 21\n  },\n  \"node\": [\n    {\n      \"op\": \"Placeholder\",\n      \"name\": \"x\",\n      \"attr\": {\n        \"shape\": {\n          \"shape\": {\n            \"dim\": [\n              {\n                \"size\": \"-1\"\n              },\n              {\n                \"size\": \"784\"\n              }\n            ]\n          }\n        },\n        \"dtype\": {\n          \"type\": \"DT_FLOAT\"\n        }\n      }\n    },\n    {\n      \"op\": \"Placeholder\",\n      \"name\": \"y_\",\n      \"attr\": {\n        \"shape\": {\n          \"shape\": {\n            \"dim\": [\n              {\n                \"size\": \"-1\"\n              },\n              {\n                \"size\": \"10\"\n              }\n            ]\n          }\n        },\n        \"dtype\": {\n          \"type\": \"DT_FLOAT\"\n        }\n      }\n    },\n    {\n      \"op\": \"NoOp\",\n      \"name\": \"init\"\n    }\n  ]\n}", "body": "It seems in array_ops.py, it sets a requirement for the shape to be fully defined with shape.is_fully_defined() in the placeholder function. Any particular reason for this? Does this mean that a placeholder of shape of [None, SomeNum] will not be enforced?  \r\n\r\nIn any case, I removed the condition where the Placeholder shape has to be fully defined and the serialization issues are fixed. This does break placeholders with no defined shape so I added two additional function in python/framework/tensor_shape.py\r\n\r\npython/framework/tensor_shape\r\n```python\r\n def is_partially_defined(self):\r\n    return self._dims is not None\r\n\r\n  def assert_is_partially_defined(self):\r\n    if not self.is_partially_defined(self):\r\n      raise ValueError(\"Shape %s is not partially defined\" % self)\r\n\r\n```\r\npython\\ops\\array_ops.py\r\n\r\n```python\r\n\r\ndef placeholder(dtype, shape=None, name=None):\r\n  shape = tensor_shape.as_shape(shape)\r\n  if shape.is_partially_defined():\r\n    dim_list = shape.as_list()\r\n  else:\r\n    dim_list = []\r\n  ret = gen_array_ops._placeholder(\r\n      dtype=dtype,\r\n      shape=dim_list,\r\n      name=name)\r\n  ret.set_shape(shape)\r\n  return ret\r\n```\r\n\r\n```JSON \r\n\r\n  \"versions\": {\r\n    \"producer\": 21\r\n  },\r\n  \"node\": [\r\n    {\r\n      \"op\": \"Placeholder\",\r\n      \"name\": \"x\",\r\n      \"attr\": {\r\n        \"shape\": {\r\n          \"shape\": {\r\n            \"dim\": [\r\n              {\r\n                \"size\": \"-1\"\r\n              },\r\n              {\r\n                \"size\": \"784\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        \"dtype\": {\r\n          \"type\": \"DT_FLOAT\"\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"op\": \"Placeholder\",\r\n      \"name\": \"y_\",\r\n      \"attr\": {\r\n        \"shape\": {\r\n          \"shape\": {\r\n            \"dim\": [\r\n              {\r\n                \"size\": \"-1\"\r\n              },\r\n              {\r\n                \"size\": \"10\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        \"dtype\": {\r\n          \"type\": \"DT_FLOAT\"\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"op\": \"NoOp\",\r\n      \"name\": \"init\"\r\n    }\r\n  ]\r\n}\r\n"}