{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/293017544", "html_url": "https://github.com/tensorflow/tensorflow/issues/9103#issuecomment-293017544", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9103", "id": 293017544, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzAxNzU0NA==", "user": {"login": "karpkarp", "id": 20780340, "node_id": "MDQ6VXNlcjIwNzgwMzQw", "avatar_url": "https://avatars1.githubusercontent.com/u/20780340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karpkarp", "html_url": "https://github.com/karpkarp", "followers_url": "https://api.github.com/users/karpkarp/followers", "following_url": "https://api.github.com/users/karpkarp/following{/other_user}", "gists_url": "https://api.github.com/users/karpkarp/gists{/gist_id}", "starred_url": "https://api.github.com/users/karpkarp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karpkarp/subscriptions", "organizations_url": "https://api.github.com/users/karpkarp/orgs", "repos_url": "https://api.github.com/users/karpkarp/repos", "events_url": "https://api.github.com/users/karpkarp/events{/privacy}", "received_events_url": "https://api.github.com/users/karpkarp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-10T17:17:46Z", "updated_at": "2017-04-10T17:18:57Z", "author_association": "NONE", "body_html": "<p>Sorry, I copied the wrong line from Python as I was testing.<br>\nWhen a placeholder of shape [None, 784] was serialized, the corresponding element in the profobuf json serialization does not contain a shape attribute.</p>\n<p>This is the python code:</p>\n<div class=\"highlight highlight-source-python\"><pre>    x <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">784</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>)\n    y_ <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">10</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>y_<span class=\"pl-pds\">\"</span></span>)\n    <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>first_layer<span class=\"pl-pds\">\"</span></span>):\n\n        W <span class=\"pl-k\">=</span> tf.Variable(tf.zeros([<span class=\"pl-c1\">784</span>,<span class=\"pl-c1\">10</span>]), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>W<span class=\"pl-pds\">\"</span></span>)\n        b <span class=\"pl-k\">=</span> tf.Variable(tf.zeros([<span class=\"pl-c1\">10</span>]), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b<span class=\"pl-pds\">\"</span></span>)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Output</span>\n        y <span class=\"pl-k\">=</span> tf.matmul(x,W) <span class=\"pl-k\">+</span> b\n\n    <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>softmax_layer<span class=\"pl-pds\">\"</span></span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Loss Function</span>\n        softmax <span class=\"pl-k\">=</span> tf.nn.softmax_cross_entropy_with_logits(<span class=\"pl-v\">logits</span><span class=\"pl-k\">=</span>y, <span class=\"pl-v\">labels</span><span class=\"pl-k\">=</span>y_)\n    <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>error_check<span class=\"pl-pds\">\"</span></span>):\n        cross_entropy <span class=\"pl-k\">=</span> tf.reduce_mean(softmax)\n\n    <span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>accuracy_check<span class=\"pl-pds\">\"</span></span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>Accuracy Calc</span>\n        correct_prediction <span class=\"pl-k\">=</span> tf.equal(tf.argmax(y,<span class=\"pl-c1\">1</span>), tf.argmax(y_,<span class=\"pl-c1\">1</span>))\n        accuracy <span class=\"pl-k\">=</span> tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n    sess.run(tf.global_variables_initializer())\n\n    outfile_txt <span class=\"pl-k\">=</span> json_format.MessageToJson(sess.graph_def)\n    outfile <span class=\"pl-k\">=</span> <span class=\"pl-c1\">open</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>outfile.json<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>w<span class=\"pl-pds\">'</span></span>)\n    outfile.write(outfile_txt)</pre></div>\n<p>Select elements from the output json file:</p>\n<div class=\"highlight highlight-source-json\"><pre>     {\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>attr<span class=\"pl-pds\">\"</span></span>: {\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dtype<span class=\"pl-pds\">\"</span></span>: {\n          <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>type<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DT_FLOAT<span class=\"pl-pds\">\"</span></span>\n        },\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shape<span class=\"pl-pds\">\"</span></span>: {\n          <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shape<span class=\"pl-pds\">\"</span></span>: {}\n        }\n      },\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>op<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Placeholder<span class=\"pl-pds\">\"</span></span>\n    },\n{\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>attr<span class=\"pl-pds\">\"</span></span>: {\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shape<span class=\"pl-pds\">\"</span></span>: {\n          <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shape<span class=\"pl-pds\">\"</span></span>: {\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dim<span class=\"pl-pds\">\"</span></span>: [\n              {\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>size<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>784<span class=\"pl-pds\">\"</span></span>\n              },\n              {\n                <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>size<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>10<span class=\"pl-pds\">\"</span></span>\n              }\n            ]\n          }\n        },\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>shared_name<span class=\"pl-pds\">\"</span></span>: {\n          <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>s<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>\n        },\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>container<span class=\"pl-pds\">\"</span></span>: {\n          <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>s<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>\n        },\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dtype<span class=\"pl-pds\">\"</span></span>: {\n          <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>type<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>DT_FLOAT<span class=\"pl-pds\">\"</span></span>\n        }\n      },\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>first_layer/W<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>op<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>VariableV2<span class=\"pl-pds\">\"</span></span>\n    }</pre></div>\n<p>Let me know if this is because of what you said earlier. Im using tensorflow-gpu installed from pip3 on windows.</p>", "body_text": "Sorry, I copied the wrong line from Python as I was testing.\nWhen a placeholder of shape [None, 784] was serialized, the corresponding element in the profobuf json serialization does not contain a shape attribute.\nThis is the python code:\n    x = tf.placeholder(tf.float32, shape=[None, 784], name=\"x\")\n    y_ = tf.placeholder(tf.float32, shape=[None, 10], name=\"y_\")\n    with tf.name_scope(\"first_layer\"):\n\n        W = tf.Variable(tf.zeros([784,10]), name=\"W\")\n        b = tf.Variable(tf.zeros([10]), name=\"b\")\n    # Output\n        y = tf.matmul(x,W) + b\n\n    with tf.name_scope(\"softmax_layer\"):\n    # Loss Function\n        softmax = tf.nn.softmax_cross_entropy_with_logits(logits=y, labels=y_)\n    with tf.name_scope(\"error_check\"):\n        cross_entropy = tf.reduce_mean(softmax)\n\n    with tf.name_scope(\"accuracy_check\"):\n    #Accuracy Calc\n        correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n    sess.run(tf.global_variables_initializer())\n\n    outfile_txt = json_format.MessageToJson(sess.graph_def)\n    outfile = open(\"outfile.json\", 'w')\n    outfile.write(outfile_txt)\nSelect elements from the output json file:\n     {\n      \"attr\": {\n        \"dtype\": {\n          \"type\": \"DT_FLOAT\"\n        },\n        \"shape\": {\n          \"shape\": {}\n        }\n      },\n      \"name\": \"x\",\n      \"op\": \"Placeholder\"\n    },\n{\n      \"attr\": {\n        \"shape\": {\n          \"shape\": {\n            \"dim\": [\n              {\n                \"size\": \"784\"\n              },\n              {\n                \"size\": \"10\"\n              }\n            ]\n          }\n        },\n        \"shared_name\": {\n          \"s\": \"\"\n        },\n        \"container\": {\n          \"s\": \"\"\n        },\n        \"dtype\": {\n          \"type\": \"DT_FLOAT\"\n        }\n      },\n      \"name\": \"first_layer/W\",\n      \"op\": \"VariableV2\"\n    }\nLet me know if this is because of what you said earlier. Im using tensorflow-gpu installed from pip3 on windows.", "body": "Sorry, I copied the wrong line from Python as I was testing. \r\nWhen a placeholder of shape [None, 784] was serialized, the corresponding element in the profobuf json serialization does not contain a shape attribute. \r\n \r\nThis is the python code: \r\n```python\r\n    x = tf.placeholder(tf.float32, shape=[None, 784], name=\"x\")\r\n    y_ = tf.placeholder(tf.float32, shape=[None, 10], name=\"y_\")\r\n    with tf.name_scope(\"first_layer\"):\r\n\r\n        W = tf.Variable(tf.zeros([784,10]), name=\"W\")\r\n        b = tf.Variable(tf.zeros([10]), name=\"b\")\r\n    # Output\r\n        y = tf.matmul(x,W) + b\r\n\r\n    with tf.name_scope(\"softmax_layer\"):\r\n    # Loss Function\r\n        softmax = tf.nn.softmax_cross_entropy_with_logits(logits=y, labels=y_)\r\n    with tf.name_scope(\"error_check\"):\r\n        cross_entropy = tf.reduce_mean(softmax)\r\n\r\n    with tf.name_scope(\"accuracy_check\"):\r\n    #Accuracy Calc\r\n        correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\r\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\r\n\r\n    sess.run(tf.global_variables_initializer())\r\n\r\n    outfile_txt = json_format.MessageToJson(sess.graph_def)\r\n    outfile = open(\"outfile.json\", 'w')\r\n    outfile.write(outfile_txt)\r\n```\r\n\r\nSelect elements from the output json file:\r\n``` JSON\r\n     {\r\n      \"attr\": {\r\n        \"dtype\": {\r\n          \"type\": \"DT_FLOAT\"\r\n        },\r\n        \"shape\": {\r\n          \"shape\": {}\r\n        }\r\n      },\r\n      \"name\": \"x\",\r\n      \"op\": \"Placeholder\"\r\n    },\r\n{\r\n      \"attr\": {\r\n        \"shape\": {\r\n          \"shape\": {\r\n            \"dim\": [\r\n              {\r\n                \"size\": \"784\"\r\n              },\r\n              {\r\n                \"size\": \"10\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        \"shared_name\": {\r\n          \"s\": \"\"\r\n        },\r\n        \"container\": {\r\n          \"s\": \"\"\r\n        },\r\n        \"dtype\": {\r\n          \"type\": \"DT_FLOAT\"\r\n        }\r\n      },\r\n      \"name\": \"first_layer/W\",\r\n      \"op\": \"VariableV2\"\r\n    }\r\n```\r\nLet me know if this is because of what you said earlier. Im using tensorflow-gpu installed from pip3 on windows. "}