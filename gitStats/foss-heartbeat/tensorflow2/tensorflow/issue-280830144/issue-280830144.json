{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15254", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15254/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15254/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15254/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15254", "id": 280830144, "node_id": "MDU6SXNzdWUyODA4MzAxNDQ=", "number": 15254, "title": "CMake build on Windows (tensorflow.dll) does not include many GPU ops", "user": {"login": "werner-rammer", "id": 24245514, "node_id": "MDQ6VXNlcjI0MjQ1NTE0", "avatar_url": "https://avatars2.githubusercontent.com/u/24245514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/werner-rammer", "html_url": "https://github.com/werner-rammer", "followers_url": "https://api.github.com/users/werner-rammer/followers", "following_url": "https://api.github.com/users/werner-rammer/following{/other_user}", "gists_url": "https://api.github.com/users/werner-rammer/gists{/gist_id}", "starred_url": "https://api.github.com/users/werner-rammer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/werner-rammer/subscriptions", "organizations_url": "https://api.github.com/users/werner-rammer/orgs", "repos_url": "https://api.github.com/users/werner-rammer/repos", "events_url": "https://api.github.com/users/werner-rammer/events{/privacy}", "received_events_url": "https://api.github.com/users/werner-rammer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586558, "node_id": "MDU6TGFiZWw0MDQ1ODY1NTg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:community%20support", "name": "stat:community support", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-12-10T18:14:09Z", "updated_at": "2018-10-24T21:24:08Z", "closed_at": "2018-10-24T21:24:07Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>\n<p><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</p>\n</li>\n<li>\n<p><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nWindows 10</p>\n</li>\n<li>\n<p><strong>TensorFlow installed from (source or binary)</strong>:<br>\nfrom source</p>\n</li>\n<li>\n<p><strong>TensorFlow version (use command below)</strong>:<br>\n1.4</p>\n</li>\n<li>\n<p><strong>Python version</strong>:  3.5.2</p>\n</li>\n<li>\n<p><strong>Bazel version (if compiling from source)</strong>:<br>\nusing CMake (3.8.2)</p>\n</li>\n<li>\n<p><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\nMSVC 14 (C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\amd64\\CL.exe)</p>\n</li>\n<li>\n<p><strong>CUDA/cuDNN version</strong>:<br>\nCUDA 8.0, cuDNN: 6 (6.14)</p>\n</li>\n<li>\n<p><strong>GPU model and memory</strong>:<br>\nNVidia GTX 1070 (8GB)</p>\n</li>\n<li>\n<p><strong>Exact command to reproduce</strong>:</p>\n</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I build tensorflow from source following these instructions:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/cmake\">https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/cmake</a><br>\nand I use this CMake command:<br>\n<code>cmake ..  -G \"Visual Studio 14 2015 Win64\" -T v140,host=x64 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DSWIG_EXECUTABLE=e:/dev/swigwin-3.0.12/swig.exe -Dtensorflow_ENABLE_GPU=ON  -DCUDNN_HOME=\"C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\"   -Dtensorflow_BUILD_SHARED_LIB=ON -Dtensorflow_WIN_CPU_SIMD_OPTIONS=/arch:AVX2  -Dtensorflow_ENABLE_GRPC_SUPPORT=OFF </code><br>\nand <code>MSBuild /p:Configuration=RelWithDebInfo tensorflow.vcxproj</code></p>\n<p>(I also tried 'Release' as Configuration - same outcome).<br>\nThe result of the build process is  <code>tensorflow.dll</code>. I use a separate C++ program (using Qt) to link against the built DLL. In general, everything works fine: I can load a saved tensorflow graph and run it (=inference).<br>\nThe problem is now, that many GPU-ops are not linked into tensorflow.dll (for example, <code>Softmax</code>) - in my example most ops run on GPU but Softmax on CPU - with a huge performance impact (GPU use &lt;10%). Why I think this is the case:</p>\n<ul>\n<li><code>tensorflow::LogAllRegisteredKernels()</code> lists Softmax, but with CPU only</li>\n<li>looking at tensorflow.dll with DependecyWalker has the same result (Softmax CPU only)</li>\n<li>when I check <code>tf_core_gpu_kernels.lib</code>, then GPU code is there (e.g., <code>tf_core_gpu_kernels_generated_softmax_op_gpu.cu.cc.lib</code>).</li>\n</ul>\n<h3>Workaround</h3>\n<p>After quite some time trying to figure this out, I found a hackish workaround:<br>\nLooking at the output of MSBuild (increased verbosity level), it looks as if the python script create_def_file.py is executed without using the tf_core_kernels.lib (<code>C:\\Python35\\python.exe E:/dev/tensorflow/tensorflow/contrib/cmake/tools/create_def_file.py --input E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tensorflow_static.lib;E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tf_protos_cc.lib --output E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tensorflow.def --target tensorflow.dll</code>).<br>\nWhat I did is the following:</p>\n<ul>\n<li>\n<p>create a def-file including the GPU kernels:<br>\n<code>C:\\Python35\\python.exe E:/dev/tensorflow/tensorflow/contrib/cmake/tools/create_def_file.py --input E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tensorflow_static.lib;E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tf_protos_cc.lib;E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tf_core_gpu_kernels.lib --output E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tensorflow_wr.def --target tensorflow.dll</code></p>\n</li>\n<li>\n<p>Link tensorflow.dll with the created def file (tensorflow_wr.def). This did not work, since I got a couple of missing-unresolved-externals errors. As they were all related to LSTM/RNN, I ended up re-creating <code>tf_core_gpu_kernels.lib</code> (issuing the Lib.exe omitting tf_core_gpu_kernels_generated_gru_ops_gpu.cu.cc.obj and tf_core_gpu_kernels_generated_lstm_ops_gpu.cu.cc.obj)</p>\n</li>\n<li>\n<p>Finally linking tensorflow.dll worked after I manually dropped a couple of symbols from 'tensorflow_wr.def) (unresolved external symbols).</p>\n</li>\n</ul>\n<p>With this workaround it works fine - all ops (including Softmax) run on GPU, performance increased by a factor of 10. I submit as an issue, since I believe it should work out of the box!</p>\n<p>Some more details on <a href=\"https://stackoverflow.com/questions/47636903/tensorflow-places-softmax-op-on-cpu-instead-of-gpu\" rel=\"nofollow\">StackOverflow</a></p>", "body_text": "System information\n\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\n\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nWindows 10\n\n\nTensorFlow installed from (source or binary):\nfrom source\n\n\nTensorFlow version (use command below):\n1.4\n\n\nPython version:  3.5.2\n\n\nBazel version (if compiling from source):\nusing CMake (3.8.2)\n\n\nGCC/Compiler version (if compiling from source):\nMSVC 14 (C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\amd64\\CL.exe)\n\n\nCUDA/cuDNN version:\nCUDA 8.0, cuDNN: 6 (6.14)\n\n\nGPU model and memory:\nNVidia GTX 1070 (8GB)\n\n\nExact command to reproduce:\n\n\nDescribe the problem\nI build tensorflow from source following these instructions:\nhttps://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/cmake\nand I use this CMake command:\ncmake ..  -G \"Visual Studio 14 2015 Win64\" -T v140,host=x64 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DSWIG_EXECUTABLE=e:/dev/swigwin-3.0.12/swig.exe -Dtensorflow_ENABLE_GPU=ON  -DCUDNN_HOME=\"C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\"   -Dtensorflow_BUILD_SHARED_LIB=ON -Dtensorflow_WIN_CPU_SIMD_OPTIONS=/arch:AVX2  -Dtensorflow_ENABLE_GRPC_SUPPORT=OFF \nand MSBuild /p:Configuration=RelWithDebInfo tensorflow.vcxproj\n(I also tried 'Release' as Configuration - same outcome).\nThe result of the build process is  tensorflow.dll. I use a separate C++ program (using Qt) to link against the built DLL. In general, everything works fine: I can load a saved tensorflow graph and run it (=inference).\nThe problem is now, that many GPU-ops are not linked into tensorflow.dll (for example, Softmax) - in my example most ops run on GPU but Softmax on CPU - with a huge performance impact (GPU use <10%). Why I think this is the case:\n\ntensorflow::LogAllRegisteredKernels() lists Softmax, but with CPU only\nlooking at tensorflow.dll with DependecyWalker has the same result (Softmax CPU only)\nwhen I check tf_core_gpu_kernels.lib, then GPU code is there (e.g., tf_core_gpu_kernels_generated_softmax_op_gpu.cu.cc.lib).\n\nWorkaround\nAfter quite some time trying to figure this out, I found a hackish workaround:\nLooking at the output of MSBuild (increased verbosity level), it looks as if the python script create_def_file.py is executed without using the tf_core_kernels.lib (C:\\Python35\\python.exe E:/dev/tensorflow/tensorflow/contrib/cmake/tools/create_def_file.py --input E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tensorflow_static.lib;E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tf_protos_cc.lib --output E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tensorflow.def --target tensorflow.dll).\nWhat I did is the following:\n\n\ncreate a def-file including the GPU kernels:\nC:\\Python35\\python.exe E:/dev/tensorflow/tensorflow/contrib/cmake/tools/create_def_file.py --input E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tensorflow_static.lib;E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tf_protos_cc.lib;E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tf_core_gpu_kernels.lib --output E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tensorflow_wr.def --target tensorflow.dll\n\n\nLink tensorflow.dll with the created def file (tensorflow_wr.def). This did not work, since I got a couple of missing-unresolved-externals errors. As they were all related to LSTM/RNN, I ended up re-creating tf_core_gpu_kernels.lib (issuing the Lib.exe omitting tf_core_gpu_kernels_generated_gru_ops_gpu.cu.cc.obj and tf_core_gpu_kernels_generated_lstm_ops_gpu.cu.cc.obj)\n\n\nFinally linking tensorflow.dll worked after I manually dropped a couple of symbols from 'tensorflow_wr.def) (unresolved external symbols).\n\n\nWith this workaround it works fine - all ops (including Softmax) run on GPU, performance increased by a factor of 10. I submit as an issue, since I believe it should work out of the box!\nSome more details on StackOverflow", "body": "\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nWindows 10\r\n- **TensorFlow installed from (source or binary)**:\r\nfrom source\r\n- **TensorFlow version (use command below)**:\r\n1.4\r\n\r\n- **Python version**:  3.5.2\r\n- **Bazel version (if compiling from source)**:\r\nusing CMake (3.8.2)\r\n- **GCC/Compiler version (if compiling from source)**:\r\nMSVC 14 (C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\amd64\\CL.exe)\r\n- **CUDA/cuDNN version**:\r\nCUDA 8.0, cuDNN: 6 (6.14)\r\n- **GPU model and memory**:\r\nNVidia GTX 1070 (8GB)\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nI build tensorflow from source following these instructions:\r\n https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/cmake\r\nand I use this CMake command:\r\n`cmake ..  -G \"Visual Studio 14 2015 Win64\" -T v140,host=x64 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DSWIG_EXECUTABLE=e:/dev/swigwin-3.0.12/swig.exe -Dtensorflow_ENABLE_GPU=ON  -DCUDNN_HOME=\"C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\"   -Dtensorflow_BUILD_SHARED_LIB=ON -Dtensorflow_WIN_CPU_SIMD_OPTIONS=/arch:AVX2  -Dtensorflow_ENABLE_GRPC_SUPPORT=OFF\r\n`\r\nand `MSBuild /p:Configuration=RelWithDebInfo tensorflow.vcxproj`\r\n\r\n(I also tried 'Release' as Configuration - same outcome).\r\nThe result of the build process is  `tensorflow.dll`. I use a separate C++ program (using Qt) to link against the built DLL. In general, everything works fine: I can load a saved tensorflow graph and run it (=inference).\r\nThe problem is now, that many GPU-ops are not linked into tensorflow.dll (for example, `Softmax`) - in my example most ops run on GPU but Softmax on CPU - with a huge performance impact (GPU use <10%). Why I think this is the case:\r\n* `tensorflow::LogAllRegisteredKernels()` lists Softmax, but with CPU only\r\n* looking at tensorflow.dll with DependecyWalker has the same result (Softmax CPU only)\r\n* when I check `tf_core_gpu_kernels.lib`, then GPU code is there (e.g., `tf_core_gpu_kernels_generated_softmax_op_gpu.cu.cc.lib`).\r\n\r\n### Workaround\r\nAfter quite some time trying to figure this out, I found a hackish workaround:\r\nLooking at the output of MSBuild (increased verbosity level), it looks as if the python script create_def_file.py is executed without using the tf_core_kernels.lib (`C:\\Python35\\python.exe E:/dev/tensorflow/tensorflow/contrib/cmake/tools/create_def_file.py --input E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tensorflow_static.lib;E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tf_protos_cc.lib --output E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tensorflow.def --target tensorflow.dll`). \r\nWhat I did is the following:\r\n* create a def-file including the GPU kernels:\r\n`C:\\Python35\\python.exe E:/dev/tensorflow/tensorflow/contrib/cmake/tools/create_def_file.py --input E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tensorflow_static.lib;E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tf_protos_cc.lib;E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tf_core_gpu_kernels.lib --output E:/dev/tensorflow/tensorflow/contrib/cmake/build/RelWithDebInfo/tensorflow_wr.def --target tensorflow.dll`\r\n\r\n* Link tensorflow.dll with the created def file (tensorflow_wr.def). This did not work, since I got a couple of missing-unresolved-externals errors. As they were all related to LSTM/RNN, I ended up re-creating `tf_core_gpu_kernels.lib` (issuing the Lib.exe omitting tf_core_gpu_kernels_generated_gru_ops_gpu.cu.cc.obj and tf_core_gpu_kernels_generated_lstm_ops_gpu.cu.cc.obj)\r\n\r\n* Finally linking tensorflow.dll worked after I manually dropped a couple of symbols from 'tensorflow_wr.def) (unresolved external symbols).\r\n\r\nWith this workaround it works fine - all ops (including Softmax) run on GPU, performance increased by a factor of 10. I submit as an issue, since I believe it should work out of the box!\r\n\r\nSome more details on [StackOverflow](https://stackoverflow.com/questions/47636903/tensorflow-places-softmax-op-on-cpu-instead-of-gpu)\r\n"}