{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/352073841", "html_url": "https://github.com/tensorflow/tensorflow/issues/14267#issuecomment-352073841", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14267", "id": 352073841, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjA3Mzg0MQ==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-15T18:09:40Z", "updated_at": "2017-12-15T18:09:40Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16812362\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/kxhit\">@kxhit</a><br>\nNeat, so headers aren't causing issues on their own for you?</p>\n<ol>\n<li>That's a reasonable guess; I've never tracked down exactly which image library in TF conflicts.</li>\n<li>Custom ops are the main limitation (since they need symbols which are sealed off from the C++ API; typically they'd link against libtensorflow_framework directly, but if that's not built then there's no good way to support them); you can use everything else in the C++ API. libtensorflow_framework does have lots of other undocumented/internal symbols which get sealed off from the C++ API, but most likely aren't super useful.</li>\n<li>Yes, we'd like to split off our protocol buffers into another shared object. C++ API users could then link against libtensorflow_cc and e.g. libtensorflow_protobufs rather than relying on the metaphorical junk drawer which is libtensorflow_framework for protocol buffer symbols. I think this should be feasible, since we already have header-only protobuf rules (they need to live in exactly one .so, so we already need to exclude them from language bindings).</li>\n</ol>", "body_text": "@kxhit\nNeat, so headers aren't causing issues on their own for you?\n\nThat's a reasonable guess; I've never tracked down exactly which image library in TF conflicts.\nCustom ops are the main limitation (since they need symbols which are sealed off from the C++ API; typically they'd link against libtensorflow_framework directly, but if that's not built then there's no good way to support them); you can use everything else in the C++ API. libtensorflow_framework does have lots of other undocumented/internal symbols which get sealed off from the C++ API, but most likely aren't super useful.\nYes, we'd like to split off our protocol buffers into another shared object. C++ API users could then link against libtensorflow_cc and e.g. libtensorflow_protobufs rather than relying on the metaphorical junk drawer which is libtensorflow_framework for protocol buffer symbols. I think this should be feasible, since we already have header-only protobuf rules (they need to live in exactly one .so, so we already need to exclude them from language bindings).", "body": "@kxhit \r\nNeat, so headers aren't causing issues on their own for you?\r\n\r\n1. That's a reasonable guess; I've never tracked down exactly which image library in TF conflicts. \r\n2. Custom ops are the main limitation (since they need symbols which are sealed off from the C++ API; typically they'd link against libtensorflow_framework directly, but if that's not built then there's no good way to support them); you can use everything else in the C++ API. libtensorflow_framework does have lots of other undocumented/internal symbols which get sealed off from the C++ API, but most likely aren't super useful.\r\n3. Yes, we'd like to split off our protocol buffers into another shared object. C++ API users could then link against libtensorflow_cc and e.g. libtensorflow_protobufs rather than relying on the metaphorical junk drawer which is libtensorflow_framework for protocol buffer symbols. I think this should be feasible, since we already have header-only protobuf rules (they need to live in exactly one .so, so we already need to exclude them from language bindings)."}