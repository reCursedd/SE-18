{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21530", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21530/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21530/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21530/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21530", "id": 349334279, "node_id": "MDU6SXNzdWUzNDkzMzQyNzk=", "number": 21530, "title": "[Bug] Broken Combination: Non-SGD Optimizer, tf.Variable(), and Estimator Framework", "user": {"login": "liuyipei", "id": 4404828, "node_id": "MDQ6VXNlcjQ0MDQ4Mjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4404828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liuyipei", "html_url": "https://github.com/liuyipei", "followers_url": "https://api.github.com/users/liuyipei/followers", "following_url": "https://api.github.com/users/liuyipei/following{/other_user}", "gists_url": "https://api.github.com/users/liuyipei/gists{/gist_id}", "starred_url": "https://api.github.com/users/liuyipei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liuyipei/subscriptions", "organizations_url": "https://api.github.com/users/liuyipei/orgs", "repos_url": "https://api.github.com/users/liuyipei/repos", "events_url": "https://api.github.com/users/liuyipei/events{/privacy}", "received_events_url": "https://api.github.com/users/liuyipei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-08-10T00:17:13Z", "updated_at": "2018-11-20T07:54:44Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>The following combination is broken when simultaneously used:</p>\n<ul>\n<li>Optimizer other than SGD</li>\n<li>Estimator framework</li>\n<li>using <code>tf.Variable</code> rather than <code>tf.get_variable</code><br>\nThe bug might be more specific, since I am basing this directly off of the full setup found in the official resnet example in <code>models/</code></li>\n</ul>\n<p>I have made a 3-line modification to the official resnet example illustrate problem:<br>\n<a class=\"commit-link\" href=\"https://github.com/tensorflow/models/compare/master...liuyipei:BUG_NonSGDOptimizer_Variable_Estimator\">tensorflow/models@<tt>master...liuyipei:BUG_NonSGDOptimizer_Variable_Estimator</tt></a></p>\n<h3>System information</h3>\n<ul>\n<li>\n<p><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nI can illustrate the bug with minimal change to an official example.</p>\n</li>\n<li>\n<p><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\ncentos-release-7-4.1708.el7.centos.x86_64</p>\n</li>\n<li>\n<p><strong>TensorFlow installed from (source or binary)</strong>:<br>\nBinary</p>\n</li>\n<li>\n<p><strong>TensorFlow version (use command below)</strong>:<br>\nv1.10.0-0-g656e7a2b34 1.10.0</p>\n</li>\n<li>\n<p><strong>Python version</strong>:<br>\n3.4.5</p>\n</li>\n<li>\n<p><strong>CUDA/cuDNN version</strong>:<br>\nCUDA 9, cuDNN 7</p>\n</li>\n<li>\n<p><strong>Bazel version</strong>:<br>\nN/A</p>\n</li>\n<li>\n<p><strong>Mobile device</strong>:<br>\nN/A</p>\n</li>\n<li>\n<p><strong>GPU model and memory</strong>:<br>\nNvidia GTX1080</p>\n</li>\n<li>\n<p><strong>Exact command to reproduce</strong>:</p>\n</li>\n</ul>\n<pre><code>cd models/official/resnet\ngit remote add liuyipei git@github.com:liuyipei/models.git\ngit fetch liuyipei\ngit checkout liuyipei/BUG_NonSGDOptimizer_Variable_Estimator\npython cifar10_download_and_extract.py\npython cifar10_main.py\n</code></pre>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<p>I changed 3 lines inside an officially supported model to illustrate my point.<br>\n<a href=\"https://github.com/tensorflow/models/blob/master/official/resnet/cifar10_main.py\">https://github.com/tensorflow/models/blob/master/official/resnet/cifar10_main.py</a><br>\nI added a <code>z</code> variable. If I use <code>tf.Variable</code> directly, an error happens at training time.</p>\n<pre><code>      z = tf.Variable(0, dtype=tf.float32, trainable=True, name='tf_Variable_direct') # this fails at optimization time\n      # z=tf.get_variable(\"tf_get_variable\", [], dtype=tf.float32) #this works!\n      inputs = tf.identity(inputs+z, 'final_reduce_mean')\n</code></pre>\n<p>The error is:</p>\n<pre><code>  File \"/home/yiliu/gpuenv/lib/python3.4/site-packages/tensorflow/python/training/momentum.py\", line 98, in _apply_dense\n    use_nesterov=self._use_nesterov).op\n  File \"/home/yiliu/gpuenv/lib/python3.4/site-packages/tensorflow/python/training/gen_training_ops.py\", line 634, in apply_momentum\n    name=name)\n  File \"/home/yiliu/gpuenv/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py\", line 641, in _apply_op_helper\n    \"(e.g.: a tf.Variable)\") % (op_type_name, input_name))\nTypeError: 'ApplyMomentum' Op requires that input 'accum' be a mutable tensor (e.g.: a tf.Variable)\n</code></pre>\n<p>I have the following additional anecdotal information:</p>\n<ul>\n<li>The bug does not manifest when <code>GradientDescentOptimizer</code> is used, presumably because it doesn't involve momentum updates.</li>\n<li>The bug does not manifest itself when I declare the variable using <code>tf.get_variable</code></li>\n<li>I did some more digging (work not shown), but it seems to have something to do with the dtype of the object created directly by <code>tf.Variable</code> having dtype <code>float32_ref</code> after coming through <code>optimizer.compute_gradients(loss * loss_scale)</code> inside <code>resnet_run_loop.py</code>. This is unlike the other variables, which have <code>float32</code> in that context. Maybe there is some kind of confusion in type checking.</li>\n</ul>", "body_text": "The following combination is broken when simultaneously used:\n\nOptimizer other than SGD\nEstimator framework\nusing tf.Variable rather than tf.get_variable\nThe bug might be more specific, since I am basing this directly off of the full setup found in the official resnet example in models/\n\nI have made a 3-line modification to the official resnet example illustrate problem:\ntensorflow/models@master...liuyipei:BUG_NonSGDOptimizer_Variable_Estimator\nSystem information\n\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nI can illustrate the bug with minimal change to an official example.\n\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\ncentos-release-7-4.1708.el7.centos.x86_64\n\n\nTensorFlow installed from (source or binary):\nBinary\n\n\nTensorFlow version (use command below):\nv1.10.0-0-g656e7a2b34 1.10.0\n\n\nPython version:\n3.4.5\n\n\nCUDA/cuDNN version:\nCUDA 9, cuDNN 7\n\n\nBazel version:\nN/A\n\n\nMobile device:\nN/A\n\n\nGPU model and memory:\nNvidia GTX1080\n\n\nExact command to reproduce:\n\n\ncd models/official/resnet\ngit remote add liuyipei git@github.com:liuyipei/models.git\ngit fetch liuyipei\ngit checkout liuyipei/BUG_NonSGDOptimizer_Variable_Estimator\npython cifar10_download_and_extract.py\npython cifar10_main.py\n\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\nI changed 3 lines inside an officially supported model to illustrate my point.\nhttps://github.com/tensorflow/models/blob/master/official/resnet/cifar10_main.py\nI added a z variable. If I use tf.Variable directly, an error happens at training time.\n      z = tf.Variable(0, dtype=tf.float32, trainable=True, name='tf_Variable_direct') # this fails at optimization time\n      # z=tf.get_variable(\"tf_get_variable\", [], dtype=tf.float32) #this works!\n      inputs = tf.identity(inputs+z, 'final_reduce_mean')\n\nThe error is:\n  File \"/home/yiliu/gpuenv/lib/python3.4/site-packages/tensorflow/python/training/momentum.py\", line 98, in _apply_dense\n    use_nesterov=self._use_nesterov).op\n  File \"/home/yiliu/gpuenv/lib/python3.4/site-packages/tensorflow/python/training/gen_training_ops.py\", line 634, in apply_momentum\n    name=name)\n  File \"/home/yiliu/gpuenv/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py\", line 641, in _apply_op_helper\n    \"(e.g.: a tf.Variable)\") % (op_type_name, input_name))\nTypeError: 'ApplyMomentum' Op requires that input 'accum' be a mutable tensor (e.g.: a tf.Variable)\n\nI have the following additional anecdotal information:\n\nThe bug does not manifest when GradientDescentOptimizer is used, presumably because it doesn't involve momentum updates.\nThe bug does not manifest itself when I declare the variable using tf.get_variable\nI did some more digging (work not shown), but it seems to have something to do with the dtype of the object created directly by tf.Variable having dtype float32_ref after coming through optimizer.compute_gradients(loss * loss_scale) inside resnet_run_loop.py. This is unlike the other variables, which have float32 in that context. Maybe there is some kind of confusion in type checking.", "body": "The following combination is broken when simultaneously used:\r\n* Optimizer other than SGD\r\n* Estimator framework\r\n* using `tf.Variable` rather than `tf.get_variable`\r\nThe bug might be more specific, since I am basing this directly off of the full setup found in the official resnet example in `models/`\r\n\r\nI have made a 3-line modification to the official resnet example illustrate problem:\r\nhttps://github.com/tensorflow/models/compare/master...liuyipei:BUG_NonSGDOptimizer_Variable_Estimator\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nI can illustrate the bug with minimal change to an official example.\r\n\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\ncentos-release-7-4.1708.el7.centos.x86_64\r\n- **TensorFlow installed from (source or binary)**:\r\nBinary\r\n- **TensorFlow version (use command below)**:\r\nv1.10.0-0-g656e7a2b34 1.10.0\r\n- **Python version**:\r\n3.4.5\r\n- **CUDA/cuDNN version**:\r\nCUDA 9, cuDNN 7\r\n- **Bazel version**:\r\nN/A\r\n- **Mobile device**:\r\nN/A\r\n- **GPU model and memory**:\r\nNvidia GTX1080\r\n- **Exact command to reproduce**:\r\n```\r\ncd models/official/resnet\r\ngit remote add liuyipei git@github.com:liuyipei/models.git\r\ngit fetch liuyipei\r\ngit checkout liuyipei/BUG_NonSGDOptimizer_Variable_Estimator\r\npython cifar10_download_and_extract.py\r\npython cifar10_main.py\r\n```\r\n\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n\r\nI changed 3 lines inside an officially supported model to illustrate my point.\r\nhttps://github.com/tensorflow/models/blob/master/official/resnet/cifar10_main.py\r\nI added a `z` variable. If I use `tf.Variable` directly, an error happens at training time.\r\n```\r\n      z = tf.Variable(0, dtype=tf.float32, trainable=True, name='tf_Variable_direct') # this fails at optimization time\r\n      # z=tf.get_variable(\"tf_get_variable\", [], dtype=tf.float32) #this works!\r\n      inputs = tf.identity(inputs+z, 'final_reduce_mean')\r\n```\r\n\r\nThe error is:\r\n```\r\n  File \"/home/yiliu/gpuenv/lib/python3.4/site-packages/tensorflow/python/training/momentum.py\", line 98, in _apply_dense\r\n    use_nesterov=self._use_nesterov).op\r\n  File \"/home/yiliu/gpuenv/lib/python3.4/site-packages/tensorflow/python/training/gen_training_ops.py\", line 634, in apply_momentum\r\n    name=name)\r\n  File \"/home/yiliu/gpuenv/lib/python3.4/site-packages/tensorflow/python/framework/op_def_library.py\", line 641, in _apply_op_helper\r\n    \"(e.g.: a tf.Variable)\") % (op_type_name, input_name))\r\nTypeError: 'ApplyMomentum' Op requires that input 'accum' be a mutable tensor (e.g.: a tf.Variable)\r\n```\r\n\r\nI have the following additional anecdotal information:\r\n* The bug does not manifest when `GradientDescentOptimizer` is used, presumably because it doesn't involve momentum updates.\r\n* The bug does not manifest itself when I declare the variable using `tf.get_variable`\r\n* I did some more digging (work not shown), but it seems to have something to do with the dtype of the object created directly by `tf.Variable` having dtype `float32_ref` after coming through `optimizer.compute_gradients(loss * loss_scale)` inside `resnet_run_loop.py`. This is unlike the other variables, which have `float32` in that context. Maybe there is some kind of confusion in type checking."}