{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12033", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12033/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12033/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12033/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12033", "id": 247950558, "node_id": "MDU6SXNzdWUyNDc5NTA1NTg=", "number": 12033, "title": "read batch file using filename queue when fit wide and deep model", "user": {"login": "euxuoh", "id": 5583099, "node_id": "MDQ6VXNlcjU1ODMwOTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5583099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euxuoh", "html_url": "https://github.com/euxuoh", "followers_url": "https://api.github.com/users/euxuoh/followers", "following_url": "https://api.github.com/users/euxuoh/following{/other_user}", "gists_url": "https://api.github.com/users/euxuoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/euxuoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euxuoh/subscriptions", "organizations_url": "https://api.github.com/users/euxuoh/orgs", "repos_url": "https://api.github.com/users/euxuoh/repos", "events_url": "https://api.github.com/users/euxuoh/events{/privacy}", "received_events_url": "https://api.github.com/users/euxuoh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-04T09:23:32Z", "updated_at": "2017-08-04T21:14:40Z", "closed_at": "2017-08-04T21:14:40Z", "author_association": "NONE", "body_html": "<h3>Describe the problem</h3>\n<p>I read records from files using typical pipeline:</p>\n<div class=\"highlight highlight-source-python\"><pre>filename_queue <span class=\"pl-k\">=</span> tf.train.string_input_producer(file_list, <span class=\"pl-v\">num_epochs</span><span class=\"pl-k\">=</span>num_epochs)\nreader <span class=\"pl-k\">=</span> tf.TextLineReader()\n _, value <span class=\"pl-k\">=</span> reader.read_up_to(filename_queue, <span class=\"pl-v\">num_records</span><span class=\"pl-k\">=</span>num_records)\ndata_batch <span class=\"pl-k\">=</span> tf.train.batch([value]<span class=\"pl-c1\">...</span>)\nrecord_defaults <span class=\"pl-k\">=</span> [[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>string<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">len</span>(<span class=\"pl-c1\">COLUMNS</span>))]\ncol <span class=\"pl-k\">=</span> tf.decode_csv(<span class=\"pl-v\">records</span><span class=\"pl-k\">=</span>data_batch,\n                    <span class=\"pl-v\">record_defaults</span><span class=\"pl-k\">=</span>record_defaults,\n                    <span class=\"pl-v\">field_delim</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>,<span class=\"pl-pds\">'</span></span>)</pre></div>\n<p>Then, creates a dictionary mapping from each feature column name (k) to the values of that column stored in a Tensor.</p>\n<div class=\"highlight highlight-source-python\"><pre>feature_dict <span class=\"pl-k\">=</span> <span class=\"pl-c1\">dict</span>()\nlabel <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span>\n<span class=\"pl-k\">for</span> i, cname <span class=\"pl-k\">in</span> <span class=\"pl-c1\">enumerate</span>(<span class=\"pl-c1\">COLUMNS</span>):\n    c <span class=\"pl-k\">=</span> tf.slice(col, <span class=\"pl-v\">begin</span><span class=\"pl-k\">=</span>[i, <span class=\"pl-c1\">0</span>], <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\n    <span class=\"pl-k\">if</span> cname <span class=\"pl-k\">in</span> <span class=\"pl-c1\">CONTINUOUS_COLUMNS</span>:\n        c <span class=\"pl-k\">=</span> tf.string_to_number(c, tf.float64)\n        c <span class=\"pl-k\">=</span> tf.transpose(c)\n        feature_dict[cname] <span class=\"pl-k\">=</span> c\n    <span class=\"pl-k\">elif</span> cname <span class=\"pl-k\">in</span> <span class=\"pl-c1\">CATEGORICAL_COLUMNS</span>:\n        c <span class=\"pl-k\">=</span> dense_to_sparse(c[<span class=\"pl-c1\">0</span>])\n        feature_dict[cname] <span class=\"pl-k\">=</span> c\n    <span class=\"pl-k\">elif</span> cname <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>click<span class=\"pl-pds\">'</span></span>:\n        label <span class=\"pl-k\">=</span> tf.string_to_number(c[<span class=\"pl-c1\">0</span>], tf.int64)</pre></div>\n<p>Creating threads to prefetch using QueueRunner objects</p>\n<div class=\"highlight highlight-source-python\"><pre>model <span class=\"pl-k\">=</span> DNNLinearCombinedClassifier(<span class=\"pl-c1\">...</span>)\nconfig <span class=\"pl-k\">=</span> tf.ConfigProto(<span class=\"pl-v\">allow_soft_placement</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nconfig.gpu_options.allow_growth <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n<span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>config) <span class=\"pl-k\">as</span> sess:\n    sess.run(tf.global_variables_initializer())\n    sess.run(tf.local_variables_initializer())\n    coord <span class=\"pl-k\">=</span> tf.train.Coordinator()\n    threads <span class=\"pl-k\">=</span> tf.train.start_queue_runners(<span class=\"pl-v\">coord</span><span class=\"pl-k\">=</span>coord)\n    <span class=\"pl-k\">try</span>:\n        <span class=\"pl-k\">while</span> <span class=\"pl-k\">not</span> coord.should_stop():\n            model.fit(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span>: (feature_dict, label), <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">FLAGS</span>.train_step)\n        <span class=\"pl-k\">except</span> tf.errors.OutOfRangeError:\n            <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Done training, epoch reached<span class=\"pl-pds\">'</span></span>)\n        <span class=\"pl-k\">finally</span>:\n            coord.request_stop()\n        coord.join(threads)</pre></div>\n<p>The error is:</p>\n<pre lang=\"log\"><code>Traceback (most recent call last):\nFile \"/Users/houxue/workspace/Python/dnn-tf/v2/dnntf.py\", line 262, in &lt;module&gt;\n    main(FLAGS)\nFile \"/Users/houxue/workspace/Python/dnn-tf/v2/dnntf.py\", line 145, in main\n    train_v2(FLAGS)\nFile \"/Users/houxue/workspace/Python/dnn-tf/v2/dnntf.py\", line 128, in train_v2\n    model.fit(input_fn=lambda: (feature_dict, label), steps=FLAGS.train_step)\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/util/deprecation.py\", line 289, in new_func\n    return func(*args, **kwargs)\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 455, in fit\n    loss = self._train_model(input_fn=input_fn, hooks=hooks)\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1003, in _train_model\n    config=self._session_config\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/monitored_session.py\", line 352, in MonitoredTrainingSession\n    stop_grace_period_secs=stop_grace_period_secs)\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/monitored_session.py\", line 648, in __init__\n    stop_grace_period_secs=stop_grace_period_secs)\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/monitored_session.py\", line 470, in __init__\n    h.begin()\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/basic_session_run_hooks.py\", line 163, in begin\n    for (tag, tensor) in self._tensors.items()}\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/basic_session_run_hooks.py\", line 163, in &lt;dictcomp&gt;\n    for (tag, tensor) in self._tensors.items()}\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/basic_session_run_hooks.py\", line 685, in _as_graph_element\n    \"to current graph %s.\" % (obj, graph))\nValueError: Passed Tensor(\"binary_logistic_head/log_loss_with_two_classes/loss:0\", shape=(), dtype=float32) should have graph attribute that is equal to current graph &lt;tensorflow.python.framework.ops.Graph object at 0x1131f3610&gt;.\n</code></pre>\n<p>Googleing the error, I found that <a href=\"https://stackoverflow.com/questions/42799041/valueerror-passed-tensor-should-have-graph-attribute-that-is-equal-to-curr\" rel=\"nofollow\">ValueError: Passed Tensor(...) should have graph attribute that is equal to current graph</a></p>\n<blockquote>\n<p>Returning the features or labels from a closure fails because a new tf.Graph is created when you call model.fit, so any modifications to the graph (e.g. tf.contrib calls) need to be made from within the input_fn (and therefore after the new graph has been instantiated).                                    -<a href=\"https://stackoverflow.com/users/6536722/alcorn\" rel=\"nofollow\">alcorn</a></p>\n</blockquote>\n<p>How to read batch data using filename queue when fit DNNLinearCombinedClassifier model? Thanks!</p>", "body_text": "Describe the problem\nI read records from files using typical pipeline:\nfilename_queue = tf.train.string_input_producer(file_list, num_epochs=num_epochs)\nreader = tf.TextLineReader()\n _, value = reader.read_up_to(filename_queue, num_records=num_records)\ndata_batch = tf.train.batch([value]...)\nrecord_defaults = [['string'] for _ in range(len(COLUMNS))]\ncol = tf.decode_csv(records=data_batch,\n                    record_defaults=record_defaults,\n                    field_delim=',')\nThen, creates a dictionary mapping from each feature column name (k) to the values of that column stored in a Tensor.\nfeature_dict = dict()\nlabel = None\nfor i, cname in enumerate(COLUMNS):\n    c = tf.slice(col, begin=[i, 0], size=[1, -1])\n    if cname in CONTINUOUS_COLUMNS:\n        c = tf.string_to_number(c, tf.float64)\n        c = tf.transpose(c)\n        feature_dict[cname] = c\n    elif cname in CATEGORICAL_COLUMNS:\n        c = dense_to_sparse(c[0])\n        feature_dict[cname] = c\n    elif cname == 'click':\n        label = tf.string_to_number(c[0], tf.int64)\nCreating threads to prefetch using QueueRunner objects\nmodel = DNNLinearCombinedClassifier(...)\nconfig = tf.ConfigProto(allow_soft_placement=True)\nconfig.gpu_options.allow_growth = True\nwith tf.Session(config=config) as sess:\n    sess.run(tf.global_variables_initializer())\n    sess.run(tf.local_variables_initializer())\n    coord = tf.train.Coordinator()\n    threads = tf.train.start_queue_runners(coord=coord)\n    try:\n        while not coord.should_stop():\n            model.fit(input_fn=lambda: (feature_dict, label), steps=FLAGS.train_step)\n        except tf.errors.OutOfRangeError:\n            print('Done training, epoch reached')\n        finally:\n            coord.request_stop()\n        coord.join(threads)\nThe error is:\nTraceback (most recent call last):\nFile \"/Users/houxue/workspace/Python/dnn-tf/v2/dnntf.py\", line 262, in <module>\n    main(FLAGS)\nFile \"/Users/houxue/workspace/Python/dnn-tf/v2/dnntf.py\", line 145, in main\n    train_v2(FLAGS)\nFile \"/Users/houxue/workspace/Python/dnn-tf/v2/dnntf.py\", line 128, in train_v2\n    model.fit(input_fn=lambda: (feature_dict, label), steps=FLAGS.train_step)\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/util/deprecation.py\", line 289, in new_func\n    return func(*args, **kwargs)\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 455, in fit\n    loss = self._train_model(input_fn=input_fn, hooks=hooks)\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1003, in _train_model\n    config=self._session_config\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/monitored_session.py\", line 352, in MonitoredTrainingSession\n    stop_grace_period_secs=stop_grace_period_secs)\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/monitored_session.py\", line 648, in __init__\n    stop_grace_period_secs=stop_grace_period_secs)\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/monitored_session.py\", line 470, in __init__\n    h.begin()\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/basic_session_run_hooks.py\", line 163, in begin\n    for (tag, tensor) in self._tensors.items()}\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/basic_session_run_hooks.py\", line 163, in <dictcomp>\n    for (tag, tensor) in self._tensors.items()}\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/basic_session_run_hooks.py\", line 685, in _as_graph_element\n    \"to current graph %s.\" % (obj, graph))\nValueError: Passed Tensor(\"binary_logistic_head/log_loss_with_two_classes/loss:0\", shape=(), dtype=float32) should have graph attribute that is equal to current graph <tensorflow.python.framework.ops.Graph object at 0x1131f3610>.\n\nGoogleing the error, I found that ValueError: Passed Tensor(...) should have graph attribute that is equal to current graph\n\nReturning the features or labels from a closure fails because a new tf.Graph is created when you call model.fit, so any modifications to the graph (e.g. tf.contrib calls) need to be made from within the input_fn (and therefore after the new graph has been instantiated).                                    -alcorn\n\nHow to read batch data using filename queue when fit DNNLinearCombinedClassifier model? Thanks!", "body": "### Describe the problem\r\nI read records from files using typical pipeline:\r\n```Python\r\nfilename_queue = tf.train.string_input_producer(file_list, num_epochs=num_epochs)\r\nreader = tf.TextLineReader()\r\n _, value = reader.read_up_to(filename_queue, num_records=num_records)\r\ndata_batch = tf.train.batch([value]...)\r\nrecord_defaults = [['string'] for _ in range(len(COLUMNS))]\r\ncol = tf.decode_csv(records=data_batch,\r\n                    record_defaults=record_defaults,\r\n                    field_delim=',')\r\n```\r\n\r\nThen, creates a dictionary mapping from each feature column name (k) to the values of that column stored in a Tensor.\r\n\r\n```Python\r\nfeature_dict = dict()\r\nlabel = None\r\nfor i, cname in enumerate(COLUMNS):\r\n    c = tf.slice(col, begin=[i, 0], size=[1, -1])\r\n    if cname in CONTINUOUS_COLUMNS:\r\n        c = tf.string_to_number(c, tf.float64)\r\n        c = tf.transpose(c)\r\n        feature_dict[cname] = c\r\n    elif cname in CATEGORICAL_COLUMNS:\r\n        c = dense_to_sparse(c[0])\r\n        feature_dict[cname] = c\r\n    elif cname == 'click':\r\n        label = tf.string_to_number(c[0], tf.int64)\r\n```\r\n\r\nCreating threads to prefetch using QueueRunner objects\r\n\r\n```Python\r\nmodel = DNNLinearCombinedClassifier(...)\r\nconfig = tf.ConfigProto(allow_soft_placement=True)\r\nconfig.gpu_options.allow_growth = True\r\nwith tf.Session(config=config) as sess:\r\n    sess.run(tf.global_variables_initializer())\r\n    sess.run(tf.local_variables_initializer())\r\n    coord = tf.train.Coordinator()\r\n    threads = tf.train.start_queue_runners(coord=coord)\r\n    try:\r\n        while not coord.should_stop():\r\n            model.fit(input_fn=lambda: (feature_dict, label), steps=FLAGS.train_step)\r\n        except tf.errors.OutOfRangeError:\r\n            print('Done training, epoch reached')\r\n        finally:\r\n            coord.request_stop()\r\n        coord.join(threads)\r\n```\r\n\r\nThe error is:\r\n\r\n```log\r\nTraceback (most recent call last):\r\nFile \"/Users/houxue/workspace/Python/dnn-tf/v2/dnntf.py\", line 262, in <module>\r\n    main(FLAGS)\r\nFile \"/Users/houxue/workspace/Python/dnn-tf/v2/dnntf.py\", line 145, in main\r\n    train_v2(FLAGS)\r\nFile \"/Users/houxue/workspace/Python/dnn-tf/v2/dnntf.py\", line 128, in train_v2\r\n    model.fit(input_fn=lambda: (feature_dict, label), steps=FLAGS.train_step)\r\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/util/deprecation.py\", line 289, in new_func\r\n    return func(*args, **kwargs)\r\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 455, in fit\r\n    loss = self._train_model(input_fn=input_fn, hooks=hooks)\r\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1003, in _train_model\r\n    config=self._session_config\r\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/monitored_session.py\", line 352, in MonitoredTrainingSession\r\n    stop_grace_period_secs=stop_grace_period_secs)\r\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/monitored_session.py\", line 648, in __init__\r\n    stop_grace_period_secs=stop_grace_period_secs)\r\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/monitored_session.py\", line 470, in __init__\r\n    h.begin()\r\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/basic_session_run_hooks.py\", line 163, in begin\r\n    for (tag, tensor) in self._tensors.items()}\r\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/basic_session_run_hooks.py\", line 163, in <dictcomp>\r\n    for (tag, tensor) in self._tensors.items()}\r\nFile \"/usr/local/devtools/anaconda3/envs/tf/lib/python2.7/site-packages/tensorflow/python/training/basic_session_run_hooks.py\", line 685, in _as_graph_element\r\n    \"to current graph %s.\" % (obj, graph))\r\nValueError: Passed Tensor(\"binary_logistic_head/log_loss_with_two_classes/loss:0\", shape=(), dtype=float32) should have graph attribute that is equal to current graph <tensorflow.python.framework.ops.Graph object at 0x1131f3610>.\r\n```\r\nGoogleing the error, I found that [ValueError: Passed Tensor(...) should have graph attribute that is equal to current graph](https://stackoverflow.com/questions/42799041/valueerror-passed-tensor-should-have-graph-attribute-that-is-equal-to-curr)\r\n>  Returning the features or labels from a closure fails because a new tf.Graph is created when you call model.fit, so any modifications to the graph (e.g. tf.contrib calls) need to be made from within the input_fn (and therefore after the new graph has been instantiated).                                    -[alcorn](https://stackoverflow.com/users/6536722/alcorn)\r\n\r\nHow to read batch data using filename queue when fit DNNLinearCombinedClassifier model? Thanks!\r\n"}