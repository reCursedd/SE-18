{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/111779588", "pull_request_review_id": 33044735, "id": 111779588, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMTc3OTU4OA==", "diff_hunk": "@@ -0,0 +1,151 @@\n+/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#ifdef INTEL_MKL\n+\n+#include <memory>\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/register_types.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/lib/core/status.h\"\n+#include \"tensorflow/core/platform/logging.h\"\n+\n+#include \"tensorflow/core/util/mkl_util.h\"\n+#include \"third_party/mkl/include/mkl_dnn.h\"\n+#include \"third_party/mkl/include/mkl_dnn_types.h\"\n+\n+namespace tensorflow {\n+using CPUDevice = Eigen::ThreadPoolDevice;\n+template <typename Device, typename T>\n+class MklReshapeOp : public OpKernel {\n+ public:\n+  explicit MklReshapeOp(OpKernelConstruction* context) : OpKernel(context) {}\n+\n+  void Compute(OpKernelContext* context) override {\n+\n+    const Tensor& input = MklGetInput(context, 0);\n+    const Tensor& sizes = MklGetInput(context, 1);\n+\n+    // Preliminary validation of sizes.\n+    OP_REQUIRES(context, IsLegacyVector(sizes.shape()),\n+                errors::InvalidArgument(\"sizes input must be 1-D, not shape \",\n+                                        sizes.shape().DebugString()));\n+    const int64 num_dims = sizes.NumElements();\n+\n+    // Compute the output shape.  Determine product of specified\n+    // dimensions, and find the index of the unspecified one.\n+    TensorShape shape;\n+    int64 product = 1;\n+    int unknown_index = -1;\n+    auto vec_size = sizes.flat<int32>();\n+    for (int d = 0; d < num_dims; ++d) {\n+      const int32 size = vec_size(d);\n+      if (size == -1) {\n+        OP_REQUIRES(\n+            context, unknown_index == -1,\n+            errors::InvalidArgument(\"only one input size may be -1, not both \",\n+                                    unknown_index, \" and \", d));\n+        unknown_index = d;\n+        shape.AddDim(1);\n+      } else {\n+        OP_REQUIRES(context, size >= 0,\n+                    errors::InvalidArgument(\n+                        \"size \", d, \" must be non-negative, not \", size));\n+        shape.AddDim(size);\n+        product *= size;\n+      }\n+    }\n+    if (unknown_index != -1) {\n+      OP_REQUIRES(\n+          context, product > 0,\n+          errors::InvalidArgument(\"Reshape cannot infer the missing input size \"\n+                                  \"for an empty tensor unless all specified \"\n+                                  \"input sizes are non-zero\"));\n+      const int64 missing = input.NumElements() / product;\n+      OP_REQUIRES(\n+          context, product * missing == input.NumElements(),\n+          errors::InvalidArgument(\n+              \"Input to reshape is a tensor with \", input.NumElements(),\n+              \" values, but the requested shape requires a multiple of \",\n+              product));\n+      shape.set_dim(unknown_index, missing);\n+    }\n+    OP_REQUIRES(context, shape.num_elements() == input.NumElements(),\n+                errors::InvalidArgument(\"Input to reshape is a tensor with \",\n+                                        input.NumElements(),\n+                                        \" values, but the requested shape has \",\n+                                        shape.num_elements()));\n+\n+    MklShape mkl_shape_input;\n+    GetMklShape(context, 0, &mkl_shape_input);\n+    bool input_in_mkl_format = mkl_shape_input.IsMklTensor();\n+    if (input_in_mkl_format) {\n+      TensorShape & shape_to = shape;\n+      TensorShape shape_from;\n+      for (size_t i = 0; i < mkl_shape_input.GetDimension(); i++) {\n+        // Outermost to innermost dimension\n+        shape_from.AddDim(mkl_shape_input.GetSizes()[\n+                                          mkl_shape_input.tf_dim_idx(i)]);\n+      }\n+\n+      if (shape_from == shape_to) {\n+        CopyMklTensorInToOut(context, 0, 0);\n+        return;\n+      } else {\n+        // Allocate output tensor.\n+        Tensor* output_tensor = NULL;\n+        MklShape mkl_shape_output;\n+        mkl_shape_output.SetMklTensor(false);\n+        AllocateOutputSetMklShape(context, 0, &output_tensor, shape_to,\n+                                  mkl_shape_output);\n+\n+        // 3. Get input and output layout pointers.", "path": "tensorflow/core/kernels/mkl_reshape_op.cc", "position": null, "original_position": 116, "commit_id": "4dd922d52ff1287193510aa08c870a0aed23b13f", "original_commit_id": "5ecd0864a51ae86c3f566aaaa95de7170b7fa547", "user": {"login": "mdfaijul", "id": 27521767, "node_id": "MDQ6VXNlcjI3NTIxNzY3", "avatar_url": "https://avatars3.githubusercontent.com/u/27521767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdfaijul", "html_url": "https://github.com/mdfaijul", "followers_url": "https://api.github.com/users/mdfaijul/followers", "following_url": "https://api.github.com/users/mdfaijul/following{/other_user}", "gists_url": "https://api.github.com/users/mdfaijul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdfaijul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdfaijul/subscriptions", "organizations_url": "https://api.github.com/users/mdfaijul/orgs", "repos_url": "https://api.github.com/users/mdfaijul/repos", "events_url": "https://api.github.com/users/mdfaijul/events{/privacy}", "received_events_url": "https://api.github.com/users/mdfaijul/received_events", "type": "User", "site_admin": false}, "body": "It was copy mistake. Corrected.", "created_at": "2017-04-17T17:31:47Z", "updated_at": "2017-04-17T20:12:15Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9228#discussion_r111779588", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9228", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/111779588"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9228#discussion_r111779588"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9228"}}, "body_html": "<p>It was copy mistake. Corrected.</p>", "body_text": "It was copy mistake. Corrected.", "in_reply_to_id": 111650615}