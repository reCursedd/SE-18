{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/341830775", "html_url": "https://github.com/tensorflow/tensorflow/issues/6620#issuecomment-341830775", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6620", "id": 341830775, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTgzMDc3NQ==", "user": {"login": "amitoengg", "id": 7127491, "node_id": "MDQ6VXNlcjcxMjc0OTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/7127491?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amitoengg", "html_url": "https://github.com/amitoengg", "followers_url": "https://api.github.com/users/amitoengg/followers", "following_url": "https://api.github.com/users/amitoengg/following{/other_user}", "gists_url": "https://api.github.com/users/amitoengg/gists{/gist_id}", "starred_url": "https://api.github.com/users/amitoengg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amitoengg/subscriptions", "organizations_url": "https://api.github.com/users/amitoengg/orgs", "repos_url": "https://api.github.com/users/amitoengg/repos", "events_url": "https://api.github.com/users/amitoengg/events{/privacy}", "received_events_url": "https://api.github.com/users/amitoengg/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-03T21:22:55Z", "updated_at": "2017-11-03T21:30:57Z", "author_association": "NONE", "body_html": "<p>TypeError: <strong>call</strong>() takes at least 5 arguments (2 given)<br>\nAlso , I am having difficulty figuring out the param sizes for bidirectional Cudnns.  So If my expected output for a single layer bi-directional cudnnLSTM is 2*dim  and input is of size [batch_size,seq_len,dim] how should i set up the h,c matrices . Is the following method correct in terms of usage. (Basically i cannot figure out the link between num_units,input_size in CudnnLSTM and in h and c matrix.</p>\n<blockquote>\n<p>def createCudnnLayer(batch_size, input, input_length, dim, dropout_rate,scope_name, reuse, is_training) :</p>\n<pre><code>with tf.variable_scope(scope_name, reuse=reuse):\n    inputs = tf.transpose(input, [1, 0, 2])\n    cell = tf.contrib.cudnn_rnn.CudnnLSTM(direction='bidirectional',\n                                          num_layers=1,\n                                          num_units=dim*2,\n                                          input_size=dim*2,\n                                          dropout=dropout_rate if is_training else 0)\n    params_size_t = cell.params_size()\n    rnn_params = tf.get_variable(\n        \"cudnn_params\",\n        initializer=tf.random_uniform(\n            [params_size_t], -0.1, 0.1),\n        validate_shape=False)\n    c = tf.zeros([2, batch_size, dim], tf.float32)\n    h = tf.zeros([2, batch_size, dim],tf.float32)\n    outputs, h, c = cell(input_data=inputs, input_h=h, input_c=c, params=rnn_params, is_training=is_training)\n    outputs = tf.transpose(outputs, [1, 0, 2])\n    f_rep = outputs[:, :, 0:dim]\n    b_rep = outputs[:, :, dim:2*dim]\n    return (f_rep,b_rep) \n</code></pre>\n</blockquote>", "body_text": "TypeError: call() takes at least 5 arguments (2 given)\nAlso , I am having difficulty figuring out the param sizes for bidirectional Cudnns.  So If my expected output for a single layer bi-directional cudnnLSTM is 2*dim  and input is of size [batch_size,seq_len,dim] how should i set up the h,c matrices . Is the following method correct in terms of usage. (Basically i cannot figure out the link between num_units,input_size in CudnnLSTM and in h and c matrix.\n\ndef createCudnnLayer(batch_size, input, input_length, dim, dropout_rate,scope_name, reuse, is_training) :\nwith tf.variable_scope(scope_name, reuse=reuse):\n    inputs = tf.transpose(input, [1, 0, 2])\n    cell = tf.contrib.cudnn_rnn.CudnnLSTM(direction='bidirectional',\n                                          num_layers=1,\n                                          num_units=dim*2,\n                                          input_size=dim*2,\n                                          dropout=dropout_rate if is_training else 0)\n    params_size_t = cell.params_size()\n    rnn_params = tf.get_variable(\n        \"cudnn_params\",\n        initializer=tf.random_uniform(\n            [params_size_t], -0.1, 0.1),\n        validate_shape=False)\n    c = tf.zeros([2, batch_size, dim], tf.float32)\n    h = tf.zeros([2, batch_size, dim],tf.float32)\n    outputs, h, c = cell(input_data=inputs, input_h=h, input_c=c, params=rnn_params, is_training=is_training)\n    outputs = tf.transpose(outputs, [1, 0, 2])\n    f_rep = outputs[:, :, 0:dim]\n    b_rep = outputs[:, :, dim:2*dim]\n    return (f_rep,b_rep)", "body": "TypeError: __call__() takes at least 5 arguments (2 given)\r\nAlso , I am having difficulty figuring out the param sizes for bidirectional Cudnns.  So If my expected output for a single layer bi-directional cudnnLSTM is 2*dim  and input is of size [batch_size,seq_len,dim] how should i set up the h,c matrices . Is the following method correct in terms of usage. (Basically i cannot figure out the link between num_units,input_size in CudnnLSTM and in h and c matrix.\r\n\r\n> def createCudnnLayer(batch_size, input, input_length, dim, dropout_rate,scope_name, reuse, is_training) :\r\n> \r\n>     with tf.variable_scope(scope_name, reuse=reuse):\r\n>         inputs = tf.transpose(input, [1, 0, 2])\r\n>         cell = tf.contrib.cudnn_rnn.CudnnLSTM(direction='bidirectional',\r\n>                                               num_layers=1,\r\n>                                               num_units=dim*2,\r\n>                                               input_size=dim*2,\r\n>                                               dropout=dropout_rate if is_training else 0)\r\n>         params_size_t = cell.params_size()\r\n>         rnn_params = tf.get_variable(\r\n>             \"cudnn_params\",\r\n>             initializer=tf.random_uniform(\r\n>                 [params_size_t], -0.1, 0.1),\r\n>             validate_shape=False)\r\n>         c = tf.zeros([2, batch_size, dim], tf.float32)\r\n>         h = tf.zeros([2, batch_size, dim],tf.float32)\r\n>         outputs, h, c = cell(input_data=inputs, input_h=h, input_c=c, params=rnn_params, is_training=is_training)\r\n>         outputs = tf.transpose(outputs, [1, 0, 2])\r\n>         f_rep = outputs[:, :, 0:dim]\r\n>         b_rep = outputs[:, :, dim:2*dim]\r\n>         return (f_rep,b_rep) "}