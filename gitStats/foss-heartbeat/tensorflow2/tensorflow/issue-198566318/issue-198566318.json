{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6620", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6620/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6620/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6620/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6620", "id": 198566318, "node_id": "MDU6SXNzdWUxOTg1NjYzMTg=", "number": 6620, "title": "CudnnLSTM doesn't work with AdamOptimizer", "user": {"login": "boche", "id": 7852469, "node_id": "MDQ6VXNlcjc4NTI0Njk=", "avatar_url": "https://avatars1.githubusercontent.com/u/7852469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boche", "html_url": "https://github.com/boche", "followers_url": "https://api.github.com/users/boche/followers", "following_url": "https://api.github.com/users/boche/following{/other_user}", "gists_url": "https://api.github.com/users/boche/gists{/gist_id}", "starred_url": "https://api.github.com/users/boche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boche/subscriptions", "organizations_url": "https://api.github.com/users/boche/orgs", "repos_url": "https://api.github.com/users/boche/repos", "events_url": "https://api.github.com/users/boche/events{/privacy}", "received_events_url": "https://api.github.com/users/boche/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "protoget", "id": 5117188, "node_id": "MDQ6VXNlcjUxMTcxODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5117188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/protoget", "html_url": "https://github.com/protoget", "followers_url": "https://api.github.com/users/protoget/followers", "following_url": "https://api.github.com/users/protoget/following{/other_user}", "gists_url": "https://api.github.com/users/protoget/gists{/gist_id}", "starred_url": "https://api.github.com/users/protoget/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/protoget/subscriptions", "organizations_url": "https://api.github.com/users/protoget/orgs", "repos_url": "https://api.github.com/users/protoget/repos", "events_url": "https://api.github.com/users/protoget/events{/privacy}", "received_events_url": "https://api.github.com/users/protoget/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "protoget", "id": 5117188, "node_id": "MDQ6VXNlcjUxMTcxODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5117188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/protoget", "html_url": "https://github.com/protoget", "followers_url": "https://api.github.com/users/protoget/followers", "following_url": "https://api.github.com/users/protoget/following{/other_user}", "gists_url": "https://api.github.com/users/protoget/gists{/gist_id}", "starred_url": "https://api.github.com/users/protoget/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/protoget/subscriptions", "organizations_url": "https://api.github.com/users/protoget/orgs", "repos_url": "https://api.github.com/users/protoget/repos", "events_url": "https://api.github.com/users/protoget/events{/privacy}", "received_events_url": "https://api.github.com/users/protoget/received_events", "type": "User", "site_admin": false}, {"login": "zheng-xq", "id": 15736910, "node_id": "MDQ6VXNlcjE1NzM2OTEw", "avatar_url": "https://avatars0.githubusercontent.com/u/15736910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zheng-xq", "html_url": "https://github.com/zheng-xq", "followers_url": "https://api.github.com/users/zheng-xq/followers", "following_url": "https://api.github.com/users/zheng-xq/following{/other_user}", "gists_url": "https://api.github.com/users/zheng-xq/gists{/gist_id}", "starred_url": "https://api.github.com/users/zheng-xq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zheng-xq/subscriptions", "organizations_url": "https://api.github.com/users/zheng-xq/orgs", "repos_url": "https://api.github.com/users/zheng-xq/repos", "events_url": "https://api.github.com/users/zheng-xq/events{/privacy}", "received_events_url": "https://api.github.com/users/zheng-xq/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 23, "created_at": "2017-01-03T20:54:17Z", "updated_at": "2018-01-24T06:49:13Z", "closed_at": "2017-11-30T05:26:23Z", "author_association": "NONE", "body_html": "<p>I am testing how to use CudnnLSTM, there is not a lot of documentation on this. In my own experiment, I found when use AdamOptimizer with CudnnLSTM, it always raises the following Exception.</p>\n<p>I also found another repository using CudnnLSTM, and uploaded it here: <a href=\"https://github.com/boche/LM-PTB-CUDNNLSTM\">https://github.com/boche/LM-PTB-CUDNNLSTM</a>. It also raises the same exception.</p>\n<blockquote>\n<p>File \"ptb_word_lm.py\", line 465, in main<br>\nm = PTBModel(is_training=True, config=config, debug=FLAGS.debug)<br>\nFile \"ptb_word_lm.py\", line 254, in <strong>init</strong><br>\nself._train_op = optimizer.apply_gradients(zip(allgrads, allvars))<br>\nFile \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/training/optimizer.py\", line 409, in apply_gradients<br>\nself._create_slots(var_list)<br>\nFile \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/training/adam.py\", line 119, in _create_slots<br>\nself._zeros_slot(v, \"m\", self._name)<br>\nFile \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/training/optimizer.py\", line 609, in _zeros_slot<br>\nnamed_slots[var] = slot_creator.create_zeros_slot(var, op_name)<br>\nFile \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/training/slot_creator.py\", line 121, in create_zeros_slot<br>\nval = array_ops.zeros(primary.get_shape().as_list(), dtype=dtype)<br>\nFile \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/framework/tensor_shape.py\", line 782, in as_list<br>\nraise ValueError(\"as_list() is not defined on an unknown TensorShape.\")<br>\nValueError: as_list() is not defined on an unknown TensorShape.</p>\n</blockquote>\n<p>For now, using GradientDescentOptimizer is okay, but it seems all other fancy optimizers all have similar problems. I have looked up this problem on stackoverflow, and found a related thread: <a href=\"http://stackoverflow.com/questions/40698821/tensorflow-adamoptimizer-throws-error-when-variable-has-validate-shape-false\" rel=\"nofollow\">http://stackoverflow.com/questions/40698821/tensorflow-adamoptimizer-throws-error-when-variable-has-validate-shape-false</a> .</p>\n<p>It seems the problem is that parameter buffer used in CudnnLSTM doesn't have fixed shape (validate_shape=False, defined in line 145 of <a href=\"https://github.com/boche/LM-PTB-CUDNNLSTM/blob/master/ptb_word_lm.py\">https://github.com/boche/LM-PTB-CUDNNLSTM/blob/master/ptb_word_lm.py</a> ) , which is required by AdamOptimizer.</p>\n<p>Cudnn seems to be faster (less time per epoch), but if we can't use better learning algorithms with it (meaning more epochs), then the total running time may not be improved so much.</p>", "body_text": "I am testing how to use CudnnLSTM, there is not a lot of documentation on this. In my own experiment, I found when use AdamOptimizer with CudnnLSTM, it always raises the following Exception.\nI also found another repository using CudnnLSTM, and uploaded it here: https://github.com/boche/LM-PTB-CUDNNLSTM. It also raises the same exception.\n\nFile \"ptb_word_lm.py\", line 465, in main\nm = PTBModel(is_training=True, config=config, debug=FLAGS.debug)\nFile \"ptb_word_lm.py\", line 254, in init\nself._train_op = optimizer.apply_gradients(zip(allgrads, allvars))\nFile \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/training/optimizer.py\", line 409, in apply_gradients\nself._create_slots(var_list)\nFile \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/training/adam.py\", line 119, in _create_slots\nself._zeros_slot(v, \"m\", self._name)\nFile \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/training/optimizer.py\", line 609, in _zeros_slot\nnamed_slots[var] = slot_creator.create_zeros_slot(var, op_name)\nFile \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/training/slot_creator.py\", line 121, in create_zeros_slot\nval = array_ops.zeros(primary.get_shape().as_list(), dtype=dtype)\nFile \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/framework/tensor_shape.py\", line 782, in as_list\nraise ValueError(\"as_list() is not defined on an unknown TensorShape.\")\nValueError: as_list() is not defined on an unknown TensorShape.\n\nFor now, using GradientDescentOptimizer is okay, but it seems all other fancy optimizers all have similar problems. I have looked up this problem on stackoverflow, and found a related thread: http://stackoverflow.com/questions/40698821/tensorflow-adamoptimizer-throws-error-when-variable-has-validate-shape-false .\nIt seems the problem is that parameter buffer used in CudnnLSTM doesn't have fixed shape (validate_shape=False, defined in line 145 of https://github.com/boche/LM-PTB-CUDNNLSTM/blob/master/ptb_word_lm.py ) , which is required by AdamOptimizer.\nCudnn seems to be faster (less time per epoch), but if we can't use better learning algorithms with it (meaning more epochs), then the total running time may not be improved so much.", "body": "I am testing how to use CudnnLSTM, there is not a lot of documentation on this. In my own experiment, I found when use AdamOptimizer with CudnnLSTM, it always raises the following Exception. \r\n\r\nI also found another repository using CudnnLSTM, and uploaded it here: https://github.com/boche/LM-PTB-CUDNNLSTM. It also raises the same exception.\r\n\r\n> File \"ptb_word_lm.py\", line 465, in main\r\n>     m = PTBModel(is_training=True, config=config, debug=FLAGS.debug)\r\n>   File \"ptb_word_lm.py\", line 254, in __init__\r\n>     self._train_op = optimizer.apply_gradients(zip(allgrads, allvars))\r\n>   File \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/training/optimizer.py\", line 409, in apply_gradients\r\n>     self._create_slots(var_list)\r\n>   File \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/training/adam.py\", line 119, in _create_slots\r\n>     self._zeros_slot(v, \"m\", self._name)\r\n>   File \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/training/optimizer.py\", line 609, in _zeros_slot\r\n>     named_slots[var] = slot_creator.create_zeros_slot(var, op_name)\r\n>   File \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/training/slot_creator.py\", line 121, in create_zeros_slot\r\n>     val = array_ops.zeros(primary.get_shape().as_list(), dtype=dtype)\r\n>   File \"/data/ASR1/ramons/anaconda2/envs/tensorflow/lib/python2.7/site-packages/tensorflow/python/framework/tensor_shape.py\", line 782, in as_list\r\n>     raise ValueError(\"as_list() is not defined on an unknown TensorShape.\")\r\n> ValueError: as_list() is not defined on an unknown TensorShape.\r\n\r\nFor now, using GradientDescentOptimizer is okay, but it seems all other fancy optimizers all have similar problems. I have looked up this problem on stackoverflow, and found a related thread: http://stackoverflow.com/questions/40698821/tensorflow-adamoptimizer-throws-error-when-variable-has-validate-shape-false . \r\n\r\nIt seems the problem is that parameter buffer used in CudnnLSTM doesn't have fixed shape (validate_shape=False, defined in line 145 of https://github.com/boche/LM-PTB-CUDNNLSTM/blob/master/ptb_word_lm.py ) , which is required by AdamOptimizer.\r\n \r\nCudnn seems to be faster (less time per epoch), but if we can't use better learning algorithms with it (meaning more epochs), then the total running time may not be improved so much."}