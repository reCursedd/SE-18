{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/321344455", "html_url": "https://github.com/tensorflow/tensorflow/issues/11684#issuecomment-321344455", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11684", "id": 321344455, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTM0NDQ1NQ==", "user": {"login": "prabirsinha", "id": 24992336, "node_id": "MDQ6VXNlcjI0OTkyMzM2", "avatar_url": "https://avatars2.githubusercontent.com/u/24992336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prabirsinha", "html_url": "https://github.com/prabirsinha", "followers_url": "https://api.github.com/users/prabirsinha/followers", "following_url": "https://api.github.com/users/prabirsinha/following{/other_user}", "gists_url": "https://api.github.com/users/prabirsinha/gists{/gist_id}", "starred_url": "https://api.github.com/users/prabirsinha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prabirsinha/subscriptions", "organizations_url": "https://api.github.com/users/prabirsinha/orgs", "repos_url": "https://api.github.com/users/prabirsinha/repos", "events_url": "https://api.github.com/users/prabirsinha/events{/privacy}", "received_events_url": "https://api.github.com/users/prabirsinha/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-09T18:38:49Z", "updated_at": "2017-08-09T18:38:49Z", "author_association": "NONE", "body_html": "<p>This is the sample code I tried to execute using TF (python 3.5.2  on Windows 10 64bit)<br>\nfrom <strong>future</strong> import absolute_import<br>\nfrom <strong>future</strong> import division<br>\nfrom <strong>future</strong> import print_function</p>\n<h1>Imports</h1>\n<p>import numpy as np<br>\nimport tensorflow as tf</p>\n<p>from tensorflow.contrib import learn<br>\nfrom tensorflow.contrib.learn.python.learn.estimators import model_fn as model_fn_lib</p>\n<p>tf.logging.set_verbosity(tf.logging.INFO)</p>\n<p>def cnn_model_fn(features, labels, mode):<br>\n\"\"\"Model function for CNN.\"\"\"</p>\n<h1>Input Layer</h1>\n<h1>Reshape X to 4-D tensor: [batch_size, width, height, channels]</h1>\n<h1>MNIST images are 28x28 pixels, and have one color channel</h1>\n<p>input_layer = tf.reshape(features, [-1, 28, 28, 1])</p>\n<h1>Convolutional Layer <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"115886302\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/1\">#1</a></h1>\n<h1>Computes 32 features using a 5x5 filter with ReLU activation.</h1>\n<h1>Padding is added to preserve width and height.</h1>\n<h1>Input Tensor Shape: [batch_size, 28, 28, 1]</h1>\n<h1>Output Tensor Shape: [batch_size, 28, 28, 32]</h1>\n<p>conv1 = tf.layers.conv2d(inputs=input_layer,filters=32,kernel_size=[5, 5],padding=\"same\",activation=tf.nn.relu)</p>\n<h1>Pooling Layer <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"115886302\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/1\">#1</a></h1>\n<h1>First max pooling layer with a 2x2 filter and stride of 2</h1>\n<h1>Input Tensor Shape: [batch_size, 28, 28, 32]</h1>\n<h1>Output Tensor Shape: [batch_size, 14, 14, 32]</h1>\n<p>pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2)</p>\n<h1>Convolutional Layer <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"115894138\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/2\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/2/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/2\">#2</a></h1>\n<h1>Computes 64 features using a 5x5 filter.</h1>\n<h1>Padding is added to preserve width and height.</h1>\n<h1>Input Tensor Shape: [batch_size, 14, 14, 32]</h1>\n<h1>Output Tensor Shape: [batch_size, 14, 14, 64]</h1>\n<p>conv2 = tf.layers.conv2d(inputs=pool1,filters=64,kernel_size=[5, 5],padding=\"same\",activation=tf.nn.relu)</p>\n<h1>Pooling Layer <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"115894138\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/2\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/2/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/2\">#2</a></h1>\n<h1>Second max pooling layer with a 2x2 filter and stride of 2</h1>\n<h1>Input Tensor Shape: [batch_size, 14, 14, 64]</h1>\n<h1>Output Tensor Shape: [batch_size, 7, 7, 64]</h1>\n<p>pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2)</p>\n<h1>Flatten tensor into a batch of vectors</h1>\n<h1>Input Tensor Shape: [batch_size, 7, 7, 64]</h1>\n<h1>Output Tensor Shape: [batch_size, 7 * 7 * 64]</h1>\n<p>pool2_flat = tf.reshape(pool2, [-1, 7 * 7 * 64])</p>\n<h1>Dense Layer</h1>\n<h1>Densely connected layer with 1024 neurons</h1>\n<h1>Input Tensor Shape: [batch_size, 7 * 7 * 64]</h1>\n<h1>Output Tensor Shape: [batch_size, 1024]</h1>\n<p>dense = tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)</p>\n<h1>Add dropout operation; 0.6 probability that element will be kept</h1>\n<p>dropout = tf.layers.dropout(inputs=dense, rate=0.4, training=mode == learn.ModeKeys.TRAIN)</p>\n<h1>Logits layer</h1>\n<h1>Input Tensor Shape: [batch_size, 1024]</h1>\n<h1>Output Tensor Shape: [batch_size, 10]</h1>\n<p>logits = tf.layers.dense(inputs=dropout, units=10)</p>\n<p>loss = None<br>\ntrain_op = None</p>\n<h1>Calculate Loss (for both TRAIN and EVAL modes)</h1>\n<p>if mode != learn.ModeKeys.INFER:<br>\nonehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=10)<br>\nloss = tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)</p>\n<h1>Configure the Training Op (for TRAIN mode)</h1>\n<p>if mode == learn.ModeKeys.TRAIN:<br>\ntrain_op = tf.contrib.layers.optimize_loss(loss=loss,global_step=tf.contrib.framework.get_global_step(),learning_rate=0.001,optimizer=\"SGD\")</p>\n<pre><code># Generate Predictions\n</code></pre>\n<p>predictions = {<br>\n\"classes\": tf.argmax(<br>\ninput=logits, axis=1),<br>\n\"probabilities\": tf.nn.softmax(<br>\nlogits, name=\"softmax_tensor\")<br>\n}</p>\n<h1>Return a ModelFnOps object</h1>\n<p>return model_fn_lib.ModelFnOps(mode=mode, predictions=predictions, loss=loss, train_op=train_op)</p>\n<p>def main(unused_argv):</p>\n<h1>Load training and eval data</h1>\n<p>mnist = learn.datasets.load_dataset(\"mnist\")<br>\ntrain_data = mnist.train.images  # Returns np.array<br>\ntrain_labels = np.asarray(mnist.train.labels, dtype=np.int32)<br>\neval_data = mnist.test.images  # Returns np.array<br>\neval_labels = np.asarray(mnist.test.labels, dtype=np.int32)</p>\n<h1>Create the Estimator</h1>\n<p>mnist_classifier = learn.Estimator(model_fn=cnn_model_fn, model_dir=\"/tmp/mnist_convnet_model\")</p>\n<h1>Set up logging for predictions</h1>\n<h1>Log the values in the \"Softmax\" tensor with label \"probabilities\"</h1>\n<p>tensors_to_log = {\"probabilities\": \"softmax_tensor\"}<br>\nlogging_hook = tf.train.LoggingTensorHook(tensors=tensors_to_log, every_n_iter=50)</p>\n<h1>Train the model</h1>\n<p>mnist_classifier.fit(x=train_data,y=train_labels,batch_size=100,steps=20000,monitors=[logging_hook])</p>\n<h1>Configure the accuracy metric for evaluation</h1>\n<p>metrics = {<br>\n\"accuracy\":<br>\nlearn.MetricSpec(metric_fn=tf.metrics.accuracy, prediction_key=\"classes\"),<br>\n}</p>\n<h1>Evaluate the model and print results</h1>\n<p>eval_results = mnist_classifier.evaluate(x=eval_data, y=eval_labels, metrics=metrics)<br>\nprint(eval_results)</p>\n<p>if <strong>name</strong> == \"<strong>main</strong>\":<br>\ntf.app.run()</p>\n<p>However , I got so many errors</p>\n<p>Extracting MNIST-data\\train-images-idx3-ubyte.gz<br>\nExtracting MNIST-data\\train-labels-idx1-ubyte.gz<br>\nExtracting MNIST-data\\t10k-images-idx3-ubyte.gz<br>\nExtracting MNIST-data\\t10k-labels-idx1-ubyte.gz<br>\n**INFO:tensorflow:Using default config.<br>\nINFO:tensorflow:Using config: {'save_checkpoints_secs': 600, '_is_chief': True, '_task_id': 0, '_cluster_spec': &lt;tensorflow.python.training.server_lib.ClusterSpec object at 0x000001959B8C3A58&gt;, 'save_summary_steps': 100, '_evaluation_master': '', 'keep_checkpoint_max': 5, 'tf_random_seed': None, '_environment': 'local', 'tf_config': gpu_options {<br>\nper_process_gpu_memory_fraction: 1<br>\n}<br>\n, '_master': '', '_num_ps_replicas': 0, 'keep_checkpoint_every_n_hours': 10000, '_task_type': None, 'save_checkpoints_steps': None}<br>\nWARNING:tensorflow:From C:....\\tensorflow_programs\\Basic_CNN.py:113 in main.: calling BaseEstimator.fit (from tensorflow.contrib.learn.python.learn.estimators.estimator) with x is deprecated and will be removed after 2016-12-01.<br>\nInstructions for updating:<br>\nEstimator is decoupled from Scikit Learn interface by moving into<br>\nseparate class SKCompat. Arguments x, y and batch_size are only<br>\navailable in the SKCompat class, Estimator will only accept input_fn.<br>\nExample conversion:<br>\nest = Estimator(...) -&gt; est = SKCompat(Estimator(...))<br>\nWARNING:tensorflow:From C:....\\tensorflow_programs\\Basic_CNN.py:113 in main.: calling BaseEstimator.fit (from tensorflow.contrib.learn.python.learn.estimators.estimator) with y is deprecated and will be removed after 2016-12-01.<br>\nInstructions for updating:<br>\nEstimator is decoupled from Scikit Learn interface by moving into<br>\nseparate class SKCompat. Arguments x, y and batch_size are only<br>\navailable in the SKCompat class, Estimator will only accept input_fn.<br>\nExample conversion:<br>\nest = Estimator(...) -&gt; est = SKCompat(Estimator(...))<br>\nWARNING:tensorflow:From C:....\\tensorflow_programs\\Basic_CNN.py:113 in main.: calling BaseEstimator.fit (from tensorflow.contrib.learn.python.learn.estimators.estimator) with batch_size is deprecated and will be removed after 2016-12-01.<br>\nInstructions for updating:<br>\nEstimator is decoupled from Scikit Learn interface by moving into<br>\nseparate class SKCompat. Arguments x, y and batch_size are only<br>\navailable in the SKCompat class, Estimator will only accept input_fn.<br>\nExample conversion:<br>\nest = Estimator(...) -&gt; est = SKCompat(Estimator(...))<br>\nTraceback (most recent call last):<br>\nFile \"C:....\\tensorflow_programs\\Basic_CNN.py\", line 126, in <br>\ntf.app.run()<br>\nFile \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\python\\platform\\app.py\", line 43, in run<br>\nsys.exit(main(sys.argv[:1] + flags_passthrough))<br>\nFile \"C:....\\tensorflow_programs\\Basic_CNN.py\", line 113, in main<br>\nmnist_classifier.fit(x=train_data,y=train_labels,batch_size=100,steps=20000,monitors=[logging_hook])<br>\nFile \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\python\\util\\deprecation.py\", line 191, in new_func<br>\nreturn func(*args, <strong>kwargs)<br>\nFile \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\estimators\\estimator.py\", line 355, in fit<br>\nmax_steps=max_steps)<br>\nFile \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\estimators\\estimator.py\", line 699, in _train_model<br>\ntrain_ops = self._get_train_ops(features, labels)<br>\nFile \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\estimators\\estimator.py\", line 1052, in _get_train_ops<br>\nreturn self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)<br>\nFile \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\estimators\\estimator.py\", line 1021, in _call_model_fn<br>\nmodel_fn_results = self._model_fn(features, labels, mode=mode)<br>\nFile \"C:....\\tensorflow_programs\\Basic_CNN.py\", line 26, in cnn_model_fn<br>\nconv1 = tf.layers.conv2d(inputs=input_layer,filters=32,kernel_size=[5, 5],padding=\"same\",activation=tf.nn.relu)<br>\nAttributeError: module 'tensorflow' has no attribute 'layers'</strong></p>\n<p>Can  anyone put some light how should I  approach to remove this errors .</p>\n<p>Thanks<br>\nPrabir</p>", "body_text": "This is the sample code I tried to execute using TF (python 3.5.2  on Windows 10 64bit)\nfrom future import absolute_import\nfrom future import division\nfrom future import print_function\nImports\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.contrib import learn\nfrom tensorflow.contrib.learn.python.learn.estimators import model_fn as model_fn_lib\ntf.logging.set_verbosity(tf.logging.INFO)\ndef cnn_model_fn(features, labels, mode):\n\"\"\"Model function for CNN.\"\"\"\nInput Layer\nReshape X to 4-D tensor: [batch_size, width, height, channels]\nMNIST images are 28x28 pixels, and have one color channel\ninput_layer = tf.reshape(features, [-1, 28, 28, 1])\nConvolutional Layer #1\nComputes 32 features using a 5x5 filter with ReLU activation.\nPadding is added to preserve width and height.\nInput Tensor Shape: [batch_size, 28, 28, 1]\nOutput Tensor Shape: [batch_size, 28, 28, 32]\nconv1 = tf.layers.conv2d(inputs=input_layer,filters=32,kernel_size=[5, 5],padding=\"same\",activation=tf.nn.relu)\nPooling Layer #1\nFirst max pooling layer with a 2x2 filter and stride of 2\nInput Tensor Shape: [batch_size, 28, 28, 32]\nOutput Tensor Shape: [batch_size, 14, 14, 32]\npool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2)\nConvolutional Layer #2\nComputes 64 features using a 5x5 filter.\nPadding is added to preserve width and height.\nInput Tensor Shape: [batch_size, 14, 14, 32]\nOutput Tensor Shape: [batch_size, 14, 14, 64]\nconv2 = tf.layers.conv2d(inputs=pool1,filters=64,kernel_size=[5, 5],padding=\"same\",activation=tf.nn.relu)\nPooling Layer #2\nSecond max pooling layer with a 2x2 filter and stride of 2\nInput Tensor Shape: [batch_size, 14, 14, 64]\nOutput Tensor Shape: [batch_size, 7, 7, 64]\npool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2)\nFlatten tensor into a batch of vectors\nInput Tensor Shape: [batch_size, 7, 7, 64]\nOutput Tensor Shape: [batch_size, 7 * 7 * 64]\npool2_flat = tf.reshape(pool2, [-1, 7 * 7 * 64])\nDense Layer\nDensely connected layer with 1024 neurons\nInput Tensor Shape: [batch_size, 7 * 7 * 64]\nOutput Tensor Shape: [batch_size, 1024]\ndense = tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)\nAdd dropout operation; 0.6 probability that element will be kept\ndropout = tf.layers.dropout(inputs=dense, rate=0.4, training=mode == learn.ModeKeys.TRAIN)\nLogits layer\nInput Tensor Shape: [batch_size, 1024]\nOutput Tensor Shape: [batch_size, 10]\nlogits = tf.layers.dense(inputs=dropout, units=10)\nloss = None\ntrain_op = None\nCalculate Loss (for both TRAIN and EVAL modes)\nif mode != learn.ModeKeys.INFER:\nonehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=10)\nloss = tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)\nConfigure the Training Op (for TRAIN mode)\nif mode == learn.ModeKeys.TRAIN:\ntrain_op = tf.contrib.layers.optimize_loss(loss=loss,global_step=tf.contrib.framework.get_global_step(),learning_rate=0.001,optimizer=\"SGD\")\n# Generate Predictions\n\npredictions = {\n\"classes\": tf.argmax(\ninput=logits, axis=1),\n\"probabilities\": tf.nn.softmax(\nlogits, name=\"softmax_tensor\")\n}\nReturn a ModelFnOps object\nreturn model_fn_lib.ModelFnOps(mode=mode, predictions=predictions, loss=loss, train_op=train_op)\ndef main(unused_argv):\nLoad training and eval data\nmnist = learn.datasets.load_dataset(\"mnist\")\ntrain_data = mnist.train.images  # Returns np.array\ntrain_labels = np.asarray(mnist.train.labels, dtype=np.int32)\neval_data = mnist.test.images  # Returns np.array\neval_labels = np.asarray(mnist.test.labels, dtype=np.int32)\nCreate the Estimator\nmnist_classifier = learn.Estimator(model_fn=cnn_model_fn, model_dir=\"/tmp/mnist_convnet_model\")\nSet up logging for predictions\nLog the values in the \"Softmax\" tensor with label \"probabilities\"\ntensors_to_log = {\"probabilities\": \"softmax_tensor\"}\nlogging_hook = tf.train.LoggingTensorHook(tensors=tensors_to_log, every_n_iter=50)\nTrain the model\nmnist_classifier.fit(x=train_data,y=train_labels,batch_size=100,steps=20000,monitors=[logging_hook])\nConfigure the accuracy metric for evaluation\nmetrics = {\n\"accuracy\":\nlearn.MetricSpec(metric_fn=tf.metrics.accuracy, prediction_key=\"classes\"),\n}\nEvaluate the model and print results\neval_results = mnist_classifier.evaluate(x=eval_data, y=eval_labels, metrics=metrics)\nprint(eval_results)\nif name == \"main\":\ntf.app.run()\nHowever , I got so many errors\nExtracting MNIST-data\\train-images-idx3-ubyte.gz\nExtracting MNIST-data\\train-labels-idx1-ubyte.gz\nExtracting MNIST-data\\t10k-images-idx3-ubyte.gz\nExtracting MNIST-data\\t10k-labels-idx1-ubyte.gz\n**INFO:tensorflow:Using default config.\nINFO:tensorflow:Using config: {'save_checkpoints_secs': 600, '_is_chief': True, '_task_id': 0, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x000001959B8C3A58>, 'save_summary_steps': 100, '_evaluation_master': '', 'keep_checkpoint_max': 5, 'tf_random_seed': None, '_environment': 'local', 'tf_config': gpu_options {\nper_process_gpu_memory_fraction: 1\n}\n, '_master': '', '_num_ps_replicas': 0, 'keep_checkpoint_every_n_hours': 10000, '_task_type': None, 'save_checkpoints_steps': None}\nWARNING:tensorflow:From C:....\\tensorflow_programs\\Basic_CNN.py:113 in main.: calling BaseEstimator.fit (from tensorflow.contrib.learn.python.learn.estimators.estimator) with x is deprecated and will be removed after 2016-12-01.\nInstructions for updating:\nEstimator is decoupled from Scikit Learn interface by moving into\nseparate class SKCompat. Arguments x, y and batch_size are only\navailable in the SKCompat class, Estimator will only accept input_fn.\nExample conversion:\nest = Estimator(...) -> est = SKCompat(Estimator(...))\nWARNING:tensorflow:From C:....\\tensorflow_programs\\Basic_CNN.py:113 in main.: calling BaseEstimator.fit (from tensorflow.contrib.learn.python.learn.estimators.estimator) with y is deprecated and will be removed after 2016-12-01.\nInstructions for updating:\nEstimator is decoupled from Scikit Learn interface by moving into\nseparate class SKCompat. Arguments x, y and batch_size are only\navailable in the SKCompat class, Estimator will only accept input_fn.\nExample conversion:\nest = Estimator(...) -> est = SKCompat(Estimator(...))\nWARNING:tensorflow:From C:....\\tensorflow_programs\\Basic_CNN.py:113 in main.: calling BaseEstimator.fit (from tensorflow.contrib.learn.python.learn.estimators.estimator) with batch_size is deprecated and will be removed after 2016-12-01.\nInstructions for updating:\nEstimator is decoupled from Scikit Learn interface by moving into\nseparate class SKCompat. Arguments x, y and batch_size are only\navailable in the SKCompat class, Estimator will only accept input_fn.\nExample conversion:\nest = Estimator(...) -> est = SKCompat(Estimator(...))\nTraceback (most recent call last):\nFile \"C:....\\tensorflow_programs\\Basic_CNN.py\", line 126, in \ntf.app.run()\nFile \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\python\\platform\\app.py\", line 43, in run\nsys.exit(main(sys.argv[:1] + flags_passthrough))\nFile \"C:....\\tensorflow_programs\\Basic_CNN.py\", line 113, in main\nmnist_classifier.fit(x=train_data,y=train_labels,batch_size=100,steps=20000,monitors=[logging_hook])\nFile \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\python\\util\\deprecation.py\", line 191, in new_func\nreturn func(*args, kwargs)\nFile \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\estimators\\estimator.py\", line 355, in fit\nmax_steps=max_steps)\nFile \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\estimators\\estimator.py\", line 699, in _train_model\ntrain_ops = self._get_train_ops(features, labels)\nFile \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\estimators\\estimator.py\", line 1052, in _get_train_ops\nreturn self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\nFile \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\estimators\\estimator.py\", line 1021, in _call_model_fn\nmodel_fn_results = self._model_fn(features, labels, mode=mode)\nFile \"C:....\\tensorflow_programs\\Basic_CNN.py\", line 26, in cnn_model_fn\nconv1 = tf.layers.conv2d(inputs=input_layer,filters=32,kernel_size=[5, 5],padding=\"same\",activation=tf.nn.relu)\nAttributeError: module 'tensorflow' has no attribute 'layers'\nCan  anyone put some light how should I  approach to remove this errors .\nThanks\nPrabir", "body": "This is the sample code I tried to execute using TF (python 3.5.2  on Windows 10 64bit)\r\nfrom __future__ import absolute_import\r\nfrom __future__ import division\r\nfrom __future__ import print_function\r\n\r\n# Imports\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nfrom tensorflow.contrib import learn\r\nfrom tensorflow.contrib.learn.python.learn.estimators import model_fn as model_fn_lib\r\n\r\ntf.logging.set_verbosity(tf.logging.INFO)\r\n\r\ndef cnn_model_fn(features, labels, mode):\r\n  \"\"\"Model function for CNN.\"\"\"\r\n  # Input Layer\r\n  # Reshape X to 4-D tensor: [batch_size, width, height, channels]\r\n  # MNIST images are 28x28 pixels, and have one color channel\r\n  input_layer = tf.reshape(features, [-1, 28, 28, 1])\r\n\r\n  # Convolutional Layer #1\r\n  # Computes 32 features using a 5x5 filter with ReLU activation.\r\n  # Padding is added to preserve width and height.\r\n  # Input Tensor Shape: [batch_size, 28, 28, 1]\r\n  # Output Tensor Shape: [batch_size, 28, 28, 32]\r\n  conv1 = tf.layers.conv2d(inputs=input_layer,filters=32,kernel_size=[5, 5],padding=\"same\",activation=tf.nn.relu)\r\n  \r\n  # Pooling Layer #1\r\n  # First max pooling layer with a 2x2 filter and stride of 2\r\n  # Input Tensor Shape: [batch_size, 28, 28, 32]\r\n  # Output Tensor Shape: [batch_size, 14, 14, 32]\r\n  \r\n  pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2)\r\n  \r\n  # Convolutional Layer #2\r\n  # Computes 64 features using a 5x5 filter.\r\n  # Padding is added to preserve width and height.\r\n  # Input Tensor Shape: [batch_size, 14, 14, 32]\r\n  # Output Tensor Shape: [batch_size, 14, 14, 64]\r\n  conv2 = tf.layers.conv2d(inputs=pool1,filters=64,kernel_size=[5, 5],padding=\"same\",activation=tf.nn.relu)\r\n  \r\n  # Pooling Layer #2\r\n  # Second max pooling layer with a 2x2 filter and stride of 2\r\n  # Input Tensor Shape: [batch_size, 14, 14, 64]\r\n  # Output Tensor Shape: [batch_size, 7, 7, 64]\r\n  pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2)\r\n  \r\n  # Flatten tensor into a batch of vectors\r\n  # Input Tensor Shape: [batch_size, 7, 7, 64]\r\n  # Output Tensor Shape: [batch_size, 7 * 7 * 64]\r\n  pool2_flat = tf.reshape(pool2, [-1, 7 * 7 * 64])\r\n\r\n   # Dense Layer\r\n  # Densely connected layer with 1024 neurons\r\n  # Input Tensor Shape: [batch_size, 7 * 7 * 64]\r\n  # Output Tensor Shape: [batch_size, 1024]\r\n  dense = tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)\r\n  \r\n  # Add dropout operation; 0.6 probability that element will be kept\r\n  dropout = tf.layers.dropout(inputs=dense, rate=0.4, training=mode == learn.ModeKeys.TRAIN)\r\n\r\n  \r\n  # Logits layer\r\n  # Input Tensor Shape: [batch_size, 1024]\r\n  # Output Tensor Shape: [batch_size, 10]\r\n  logits = tf.layers.dense(inputs=dropout, units=10)\r\n  \r\n  \r\n  loss = None\r\n  train_op = None\r\n  \r\n  # Calculate Loss (for both TRAIN and EVAL modes)\r\n  if mode != learn.ModeKeys.INFER:\r\n    onehot_labels = tf.one_hot(indices=tf.cast(labels, tf.int32), depth=10)\r\n    loss = tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)\r\n\t\r\n\t\r\n  # Configure the Training Op (for TRAIN mode)\r\n  if mode == learn.ModeKeys.TRAIN:\r\n    train_op = tf.contrib.layers.optimize_loss(loss=loss,global_step=tf.contrib.framework.get_global_step(),learning_rate=0.001,optimizer=\"SGD\")\r\n\t\r\n\t\r\n\t# Generate Predictions\r\n  predictions = {\r\n      \"classes\": tf.argmax(\r\n          input=logits, axis=1),\r\n      \"probabilities\": tf.nn.softmax(\r\n          logits, name=\"softmax_tensor\")\r\n}\r\n\r\n  # Return a ModelFnOps object\r\n  return model_fn_lib.ModelFnOps(mode=mode, predictions=predictions, loss=loss, train_op=train_op)\r\n  \r\ndef main(unused_argv):\r\n  # Load training and eval data\r\n  mnist = learn.datasets.load_dataset(\"mnist\")\r\n  train_data = mnist.train.images  # Returns np.array\r\n  train_labels = np.asarray(mnist.train.labels, dtype=np.int32)\r\n  eval_data = mnist.test.images  # Returns np.array\r\n  eval_labels = np.asarray(mnist.test.labels, dtype=np.int32)\r\n  \r\n  \r\n  # Create the Estimator\r\n  mnist_classifier = learn.Estimator(model_fn=cnn_model_fn, model_dir=\"/tmp/mnist_convnet_model\")\r\n  \r\n  \r\n  # Set up logging for predictions\r\n  # Log the values in the \"Softmax\" tensor with label \"probabilities\"\r\n  tensors_to_log = {\"probabilities\": \"softmax_tensor\"}\r\n  logging_hook = tf.train.LoggingTensorHook(tensors=tensors_to_log, every_n_iter=50)\r\n  \r\n  # Train the model\r\n  mnist_classifier.fit(x=train_data,y=train_labels,batch_size=100,steps=20000,monitors=[logging_hook])\r\n  \r\n  # Configure the accuracy metric for evaluation\r\n  metrics = {\r\n      \"accuracy\":\r\n          learn.MetricSpec(metric_fn=tf.metrics.accuracy, prediction_key=\"classes\"),\r\n}\r\n\r\n  # Evaluate the model and print results\r\n  eval_results = mnist_classifier.evaluate(x=eval_data, y=eval_labels, metrics=metrics)\r\n  print(eval_results)\r\n  \r\nif __name__ == \"__main__\":\r\n  tf.app.run()\r\n\r\nHowever , I got so many errors \r\n\r\nExtracting MNIST-data\\train-images-idx3-ubyte.gz\r\nExtracting MNIST-data\\train-labels-idx1-ubyte.gz\r\nExtracting MNIST-data\\t10k-images-idx3-ubyte.gz\r\nExtracting MNIST-data\\t10k-labels-idx1-ubyte.gz\r\n**INFO:tensorflow:Using default config.\r\nINFO:tensorflow:Using config: {'save_checkpoints_secs': 600, '_is_chief': True, '_task_id': 0, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x000001959B8C3A58>, 'save_summary_steps': 100, '_evaluation_master': '', 'keep_checkpoint_max': 5, 'tf_random_seed': None, '_environment': 'local', 'tf_config': gpu_options {\r\n  per_process_gpu_memory_fraction: 1\r\n}\r\n, '_master': '', '_num_ps_replicas': 0, 'keep_checkpoint_every_n_hours': 10000, '_task_type': None, 'save_checkpoints_steps': None}\r\nWARNING:tensorflow:From C:\\..\\..\\tensorflow_programs\\Basic_CNN.py:113 in main.: calling BaseEstimator.fit (from tensorflow.contrib.learn.python.learn.estimators.estimator) with x is deprecated and will be removed after 2016-12-01.\r\nInstructions for updating:\r\nEstimator is decoupled from Scikit Learn interface by moving into\r\nseparate class SKCompat. Arguments x, y and batch_size are only\r\navailable in the SKCompat class, Estimator will only accept input_fn.\r\nExample conversion:\r\n  est = Estimator(...) -> est = SKCompat(Estimator(...))\r\nWARNING:tensorflow:From C:\\..\\..\\tensorflow_programs\\Basic_CNN.py:113 in main.: calling BaseEstimator.fit (from tensorflow.contrib.learn.python.learn.estimators.estimator) with y is deprecated and will be removed after 2016-12-01.\r\nInstructions for updating:\r\nEstimator is decoupled from Scikit Learn interface by moving into\r\nseparate class SKCompat. Arguments x, y and batch_size are only\r\navailable in the SKCompat class, Estimator will only accept input_fn.\r\nExample conversion:\r\n  est = Estimator(...) -> est = SKCompat(Estimator(...))\r\nWARNING:tensorflow:From C:\\..\\..\\tensorflow_programs\\Basic_CNN.py:113 in main.: calling BaseEstimator.fit (from tensorflow.contrib.learn.python.learn.estimators.estimator) with batch_size is deprecated and will be removed after 2016-12-01.\r\nInstructions for updating:\r\nEstimator is decoupled from Scikit Learn interface by moving into\r\nseparate class SKCompat. Arguments x, y and batch_size are only\r\navailable in the SKCompat class, Estimator will only accept input_fn.\r\nExample conversion:\r\n  est = Estimator(...) -> est = SKCompat(Estimator(...))\r\nTraceback (most recent call last):\r\n  File \"C:\\..\\..\\tensorflow_programs\\Basic_CNN.py\", line 126, in <module>\r\n    tf.app.run()\r\n  File \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\python\\platform\\app.py\", line 43, in run\r\n    sys.exit(main(sys.argv[:1] + flags_passthrough))\r\n  File \"C:\\..\\..\\tensorflow_programs\\Basic_CNN.py\", line 113, in main\r\n    mnist_classifier.fit(x=train_data,y=train_labels,batch_size=100,steps=20000,monitors=[logging_hook])\r\n  File \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\python\\util\\deprecation.py\", line 191, in new_func\r\n    return func(*args, **kwargs)\r\n  File \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\estimators\\estimator.py\", line 355, in fit\r\n    max_steps=max_steps)\r\n  File \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\estimators\\estimator.py\", line 699, in _train_model\r\n    train_ops = self._get_train_ops(features, labels)\r\n  File \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\estimators\\estimator.py\", line 1052, in _get_train_ops\r\n    return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\r\n  File \"C:\\Users\\Prabir Sinha\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\estimators\\estimator.py\", line 1021, in _call_model_fn\r\n    model_fn_results = self._model_fn(features, labels, mode=mode)\r\n  File \"C:\\..\\..\\tensorflow_programs\\Basic_CNN.py\", line 26, in cnn_model_fn\r\n    conv1 = tf.layers.conv2d(inputs=input_layer,filters=32,kernel_size=[5, 5],padding=\"same\",activation=tf.nn.relu)\r\nAttributeError: module 'tensorflow' has no attribute 'layers'**\r\n\r\nCan  anyone put some light how should I  approach to remove this errors .\r\n\r\nThanks \r\nPrabir \r\n"}