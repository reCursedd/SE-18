{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12880", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12880/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12880/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12880/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12880", "id": 255955403, "node_id": "MDU6SXNzdWUyNTU5NTU0MDM=", "number": 12880, "title": "tf.map_fn handles elems differently if it's a list or tuple", "user": {"login": "GPhilo", "id": 4441724, "node_id": "MDQ6VXNlcjQ0NDE3MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4441724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GPhilo", "html_url": "https://github.com/GPhilo", "followers_url": "https://api.github.com/users/GPhilo/followers", "following_url": "https://api.github.com/users/GPhilo/following{/other_user}", "gists_url": "https://api.github.com/users/GPhilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/GPhilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GPhilo/subscriptions", "organizations_url": "https://api.github.com/users/GPhilo/orgs", "repos_url": "https://api.github.com/users/GPhilo/repos", "events_url": "https://api.github.com/users/GPhilo/events{/privacy}", "received_events_url": "https://api.github.com/users/GPhilo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-07T14:25:10Z", "updated_at": "2017-09-07T14:47:26Z", "closed_at": "2017-09-07T14:47:26Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes, see below</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: b'unknown' 1.3.0</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: -</li>\n<li><strong>CUDA/cuDNN version</strong>: 6</li>\n<li><strong>GPU model and memory</strong>: GTX 1080, 8GB</li>\n<li><strong>Exact command to reproduce</strong>: Just run the script</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>It seems from some simple experiments that <code>tf.map_fn</code> behaves differently from what documented according to the specific type of its <code>elems</code> parameter. If the parameter is a tuple of tensors, the code works. If it's a list of tensors, however, the function is applied to the list itself instead than its elements (thus raising an error in the example code I put below)</p>\n<h3>Code:</h3>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\nelems = tf.constant([1,2,3],dtype=tf.int64)\nlist_elems = [elems]\ntuple_elems = (elems)\n\nres = tf.map_fn(lambda x: x+1, tuple_elems, dtype=tf.int64)\nwith tf.Session() as sess:\n    print(sess.run(res))\n \nres = tf.map_fn(lambda x: x+1, list_elems, dtype=tf.int64)\nwith tf.Session() as sess:\n    print(sess.run(res))\n</code></pre>\n<h3>Traceback:</h3>\n<pre><code>Traceback (most recent call last):\n\n  File \"&lt;ipython-input-45-e7852b9d4ba6&gt;\", line 13, in &lt;module&gt;\n    res = tf.map_fn(lambda x: x+1, list_elems, dtype=tf.int64)\n\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\functional_ops.py\", line 389, in map_fn\n    swap_memory=swap_memory)\n\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\control_flow_ops.py\", line 2775, in while_loop\n    result = context.BuildLoop(cond, body, loop_vars, shape_invariants)\n\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\control_flow_ops.py\", line 2604, in BuildLoop\n    pred, body, original_loop_vars, loop_vars, shape_invariants)\n\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\control_flow_ops.py\", line 2554, in _BuildLoop\n    body_result = body(*packed_vars_for_body)\n\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\functional_ops.py\", line 379, in compute\n    packed_fn_values = fn(packed_values)\n\n  File \"&lt;ipython-input-45-e7852b9d4ba6&gt;\", line 13, in &lt;lambda&gt;\n    res = tf.map_fn(lambda x: x+1, list_elems, dtype=tf.int64)\n\nTypeError: can only concatenate list (not \"int\") to list\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes, see below\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): b'unknown' 1.3.0\nPython version: 3.6\nBazel version (if compiling from source): -\nCUDA/cuDNN version: 6\nGPU model and memory: GTX 1080, 8GB\nExact command to reproduce: Just run the script\n\nDescribe the problem\nIt seems from some simple experiments that tf.map_fn behaves differently from what documented according to the specific type of its elems parameter. If the parameter is a tuple of tensors, the code works. If it's a list of tensors, however, the function is applied to the list itself instead than its elements (thus raising an error in the example code I put below)\nCode:\nimport tensorflow as tf\nimport numpy as np\n\nelems = tf.constant([1,2,3],dtype=tf.int64)\nlist_elems = [elems]\ntuple_elems = (elems)\n\nres = tf.map_fn(lambda x: x+1, tuple_elems, dtype=tf.int64)\nwith tf.Session() as sess:\n    print(sess.run(res))\n \nres = tf.map_fn(lambda x: x+1, list_elems, dtype=tf.int64)\nwith tf.Session() as sess:\n    print(sess.run(res))\n\nTraceback:\nTraceback (most recent call last):\n\n  File \"<ipython-input-45-e7852b9d4ba6>\", line 13, in <module>\n    res = tf.map_fn(lambda x: x+1, list_elems, dtype=tf.int64)\n\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\functional_ops.py\", line 389, in map_fn\n    swap_memory=swap_memory)\n\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\control_flow_ops.py\", line 2775, in while_loop\n    result = context.BuildLoop(cond, body, loop_vars, shape_invariants)\n\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\control_flow_ops.py\", line 2604, in BuildLoop\n    pred, body, original_loop_vars, loop_vars, shape_invariants)\n\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\control_flow_ops.py\", line 2554, in _BuildLoop\n    body_result = body(*packed_vars_for_body)\n\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\functional_ops.py\", line 379, in compute\n    packed_fn_values = fn(packed_values)\n\n  File \"<ipython-input-45-e7852b9d4ba6>\", line 13, in <lambda>\n    res = tf.map_fn(lambda x: x+1, list_elems, dtype=tf.int64)\n\nTypeError: can only concatenate list (not \"int\") to list", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes, see below\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: b'unknown' 1.3.0\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: -\r\n- **CUDA/cuDNN version**: 6\r\n- **GPU model and memory**: GTX 1080, 8GB\r\n- **Exact command to reproduce**: Just run the script\r\n\r\n\r\n### Describe the problem\r\nIt seems from some simple experiments that `tf.map_fn` behaves differently from what documented according to the specific type of its `elems` parameter. If the parameter is a tuple of tensors, the code works. If it's a list of tensors, however, the function is applied to the list itself instead than its elements (thus raising an error in the example code I put below)\r\n\r\n### Code:\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\nelems = tf.constant([1,2,3],dtype=tf.int64)\r\nlist_elems = [elems]\r\ntuple_elems = (elems)\r\n\r\nres = tf.map_fn(lambda x: x+1, tuple_elems, dtype=tf.int64)\r\nwith tf.Session() as sess:\r\n    print(sess.run(res))\r\n \r\nres = tf.map_fn(lambda x: x+1, list_elems, dtype=tf.int64)\r\nwith tf.Session() as sess:\r\n    print(sess.run(res))\r\n```\r\n### Traceback:\r\n\r\n```\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-45-e7852b9d4ba6>\", line 13, in <module>\r\n    res = tf.map_fn(lambda x: x+1, list_elems, dtype=tf.int64)\r\n\r\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\functional_ops.py\", line 389, in map_fn\r\n    swap_memory=swap_memory)\r\n\r\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\control_flow_ops.py\", line 2775, in while_loop\r\n    result = context.BuildLoop(cond, body, loop_vars, shape_invariants)\r\n\r\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\control_flow_ops.py\", line 2604, in BuildLoop\r\n    pred, body, original_loop_vars, loop_vars, shape_invariants)\r\n\r\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\control_flow_ops.py\", line 2554, in _BuildLoop\r\n    body_result = body(*packed_vars_for_body)\r\n\r\n  File \"C:\\Users\\1\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\ops\\functional_ops.py\", line 379, in compute\r\n    packed_fn_values = fn(packed_values)\r\n\r\n  File \"<ipython-input-45-e7852b9d4ba6>\", line 13, in <lambda>\r\n    res = tf.map_fn(lambda x: x+1, list_elems, dtype=tf.int64)\r\n\r\nTypeError: can only concatenate list (not \"int\") to list\r\n```"}