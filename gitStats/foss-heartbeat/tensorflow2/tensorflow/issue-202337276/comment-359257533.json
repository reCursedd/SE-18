{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/359257533", "html_url": "https://github.com/tensorflow/tensorflow/issues/6999#issuecomment-359257533", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6999", "id": 359257533, "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTI1NzUzMw==", "user": {"login": "emulvihill", "id": 7367863, "node_id": "MDQ6VXNlcjczNjc4NjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7367863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emulvihill", "html_url": "https://github.com/emulvihill", "followers_url": "https://api.github.com/users/emulvihill/followers", "following_url": "https://api.github.com/users/emulvihill/following{/other_user}", "gists_url": "https://api.github.com/users/emulvihill/gists{/gist_id}", "starred_url": "https://api.github.com/users/emulvihill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emulvihill/subscriptions", "organizations_url": "https://api.github.com/users/emulvihill/orgs", "repos_url": "https://api.github.com/users/emulvihill/repos", "events_url": "https://api.github.com/users/emulvihill/events{/privacy}", "received_events_url": "https://api.github.com/users/emulvihill/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-21T15:43:58Z", "updated_at": "2018-01-21T15:43:58Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8108287\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SMH17\">@SMH17</a> I think this is where the big divide between a data scientist and a software engineer's needs comes in. If one is using Pytorch in isolation, then it can be argued that infrequent platform updates do not matter.  But for someone building a large system with Pytorch as one small component, then it is not acceptable to be precluded from steady migration forward to new platform versions.  Not migrating in small increments can lead to millions of dollars of investment becoming stranded in obsolesence, because the cost of large migration becomes too large to stomach.   I'm an engineer who just tinkers with DL, so I am generally in the second camp.</p>\n<p>I guess Pytorch and all other DL frameworks will have to decide who their target audience is, going forward.</p>", "body_text": "@SMH17 I think this is where the big divide between a data scientist and a software engineer's needs comes in. If one is using Pytorch in isolation, then it can be argued that infrequent platform updates do not matter.  But for someone building a large system with Pytorch as one small component, then it is not acceptable to be precluded from steady migration forward to new platform versions.  Not migrating in small increments can lead to millions of dollars of investment becoming stranded in obsolesence, because the cost of large migration becomes too large to stomach.   I'm an engineer who just tinkers with DL, so I am generally in the second camp.\nI guess Pytorch and all other DL frameworks will have to decide who their target audience is, going forward.", "body": "@SMH17 I think this is where the big divide between a data scientist and a software engineer's needs comes in. If one is using Pytorch in isolation, then it can be argued that infrequent platform updates do not matter.  But for someone building a large system with Pytorch as one small component, then it is not acceptable to be precluded from steady migration forward to new platform versions.  Not migrating in small increments can lead to millions of dollars of investment becoming stranded in obsolesence, because the cost of large migration becomes too large to stomach.   I'm an engineer who just tinkers with DL, so I am generally in the second camp.\r\n\r\nI guess Pytorch and all other DL frameworks will have to decide who their target audience is, going forward."}