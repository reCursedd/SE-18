{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/371472478", "html_url": "https://github.com/tensorflow/tensorflow/issues/22#issuecomment-371472478", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22", "id": 371472478, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTQ3MjQ3OA==", "user": {"login": "tugrul512bit", "id": 23708129, "node_id": "MDQ6VXNlcjIzNzA4MTI5", "avatar_url": "https://avatars0.githubusercontent.com/u/23708129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tugrul512bit", "html_url": "https://github.com/tugrul512bit", "followers_url": "https://api.github.com/users/tugrul512bit/followers", "following_url": "https://api.github.com/users/tugrul512bit/following{/other_user}", "gists_url": "https://api.github.com/users/tugrul512bit/gists{/gist_id}", "starred_url": "https://api.github.com/users/tugrul512bit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tugrul512bit/subscriptions", "organizations_url": "https://api.github.com/users/tugrul512bit/orgs", "repos_url": "https://api.github.com/users/tugrul512bit/repos", "events_url": "https://api.github.com/users/tugrul512bit/events{/privacy}", "received_events_url": "https://api.github.com/users/tugrul512bit/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-08T12:24:59Z", "updated_at": "2018-03-08T12:24:59Z", "author_association": "NONE", "body_html": "<p>Can these help?</p>\n<p>OpenCL random number generation(Thomas Wang's):</p>\n<pre><code>uint wang_hash(uint seed)\n{\n               seed = (seed ^ 61) ^ (seed &gt;&gt; 16);\n               seed *= 9;\n               seed = seed ^ (seed &gt;&gt; 4);\n               seed *= 0x27d4eb2d;\n               seed = seed ^ (seed &gt;&gt; 15);\n               return seed;\n}\n            \nvoid wang_rnd_0(__global unsigned int * intSeeds,int id)                \n{\n               uint maxint=0;\n               maxint--;\n               uint rndint=wang_hash(id);\n               intSeeds[id]=rndint;\n}\n\nfloat wang_rnd(__global unsigned int * intSeeds,int id)                \n{\n               uint maxint=0;\n               maxint--;\n               uint rndint=wang_hash(intSeeds[id]);\n               intSeeds[id]=rndint;\n               return ((float)rndint)/(float)maxint;\n}\n\n\n// initialize each thread's own random number seed\n__kernel void rnd_0(__global unsigned int * intSeeds)\n{\n               int id=get_global_id(0);\n               wang_rnd_0(intSeeds,id);     \n}\n\n// get a new random value by each thread\n__kernel void rnd_1(__global unsigned int * intSeeds)\n{\n               int id=get_global_id(0);\n               float randomFloat=wang_rnd(intSeeds,id);\n}\n\n</code></pre>\n<p>OpenCL SHA3hashing(forgot who wrote this)</p>\n<p><a href=\"https://gist.github.com/tugrul512bit/c8170f74846e36e350607664f12c525c\">https://gist.github.com/tugrul512bit/c8170f74846e36e350607664f12c525c</a></p>", "body_text": "Can these help?\nOpenCL random number generation(Thomas Wang's):\nuint wang_hash(uint seed)\n{\n               seed = (seed ^ 61) ^ (seed >> 16);\n               seed *= 9;\n               seed = seed ^ (seed >> 4);\n               seed *= 0x27d4eb2d;\n               seed = seed ^ (seed >> 15);\n               return seed;\n}\n            \nvoid wang_rnd_0(__global unsigned int * intSeeds,int id)                \n{\n               uint maxint=0;\n               maxint--;\n               uint rndint=wang_hash(id);\n               intSeeds[id]=rndint;\n}\n\nfloat wang_rnd(__global unsigned int * intSeeds,int id)                \n{\n               uint maxint=0;\n               maxint--;\n               uint rndint=wang_hash(intSeeds[id]);\n               intSeeds[id]=rndint;\n               return ((float)rndint)/(float)maxint;\n}\n\n\n// initialize each thread's own random number seed\n__kernel void rnd_0(__global unsigned int * intSeeds)\n{\n               int id=get_global_id(0);\n               wang_rnd_0(intSeeds,id);     \n}\n\n// get a new random value by each thread\n__kernel void rnd_1(__global unsigned int * intSeeds)\n{\n               int id=get_global_id(0);\n               float randomFloat=wang_rnd(intSeeds,id);\n}\n\n\nOpenCL SHA3hashing(forgot who wrote this)\nhttps://gist.github.com/tugrul512bit/c8170f74846e36e350607664f12c525c", "body": "Can these help?\r\n\r\nOpenCL random number generation(Thomas Wang's):\r\n\r\n```\r\nuint wang_hash(uint seed)\r\n{\r\n               seed = (seed ^ 61) ^ (seed >> 16);\r\n               seed *= 9;\r\n               seed = seed ^ (seed >> 4);\r\n               seed *= 0x27d4eb2d;\r\n               seed = seed ^ (seed >> 15);\r\n               return seed;\r\n}\r\n            \r\nvoid wang_rnd_0(__global unsigned int * intSeeds,int id)                \r\n{\r\n               uint maxint=0;\r\n               maxint--;\r\n               uint rndint=wang_hash(id);\r\n               intSeeds[id]=rndint;\r\n}\r\n\r\nfloat wang_rnd(__global unsigned int * intSeeds,int id)                \r\n{\r\n               uint maxint=0;\r\n               maxint--;\r\n               uint rndint=wang_hash(intSeeds[id]);\r\n               intSeeds[id]=rndint;\r\n               return ((float)rndint)/(float)maxint;\r\n}\r\n\r\n\r\n// initialize each thread's own random number seed\r\n__kernel void rnd_0(__global unsigned int * intSeeds)\r\n{\r\n               int id=get_global_id(0);\r\n               wang_rnd_0(intSeeds,id);     \r\n}\r\n\r\n// get a new random value by each thread\r\n__kernel void rnd_1(__global unsigned int * intSeeds)\r\n{\r\n               int id=get_global_id(0);\r\n               float randomFloat=wang_rnd(intSeeds,id);\r\n}\r\n\r\n```\r\n\r\nOpenCL SHA3hashing(forgot who wrote this)\r\n\r\nhttps://gist.github.com/tugrul512bit/c8170f74846e36e350607664f12c525c"}