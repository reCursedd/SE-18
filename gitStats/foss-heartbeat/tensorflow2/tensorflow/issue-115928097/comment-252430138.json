{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/252430138", "html_url": "https://github.com/tensorflow/tensorflow/issues/22#issuecomment-252430138", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22", "id": 252430138, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjQzMDEzOA==", "user": {"login": "ptillet", "id": 614788, "node_id": "MDQ6VXNlcjYxNDc4OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/614788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptillet", "html_url": "https://github.com/ptillet", "followers_url": "https://api.github.com/users/ptillet/followers", "following_url": "https://api.github.com/users/ptillet/following{/other_user}", "gists_url": "https://api.github.com/users/ptillet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptillet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptillet/subscriptions", "organizations_url": "https://api.github.com/users/ptillet/orgs", "repos_url": "https://api.github.com/users/ptillet/repos", "events_url": "https://api.github.com/users/ptillet/events{/privacy}", "received_events_url": "https://api.github.com/users/ptillet/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-08T15:21:16Z", "updated_at": "2016-10-08T15:21:16Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=123560\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hughperkins\">@hughperkins</a> it's a blas implementation itself. It implements some of the symbols in clblas and cublas headers so no recompilation and code modification. is necessary. I could also implement some of the symbols for clblast.h, since it uses a different header. Some advantages of Isaac are:</p>\n<ul>\n<li>Entirely dynamic, so that it can use either/both CUDA or OpenCL without recompilation.</li>\n<li>Input-aware , it doesn't tune kernels for large square matrices. It should perform well on all shapes you can think of without retuning.</li>\n<li>C++ API similar to numpy/arrayfire. Some fusion for combining elementwise operation with reductions</li>\n</ul>", "body_text": "@hughperkins it's a blas implementation itself. It implements some of the symbols in clblas and cublas headers so no recompilation and code modification. is necessary. I could also implement some of the symbols for clblast.h, since it uses a different header. Some advantages of Isaac are:\n\nEntirely dynamic, so that it can use either/both CUDA or OpenCL without recompilation.\nInput-aware , it doesn't tune kernels for large square matrices. It should perform well on all shapes you can think of without retuning.\nC++ API similar to numpy/arrayfire. Some fusion for combining elementwise operation with reductions", "body": "@hughperkins it's a blas implementation itself. It implements some of the symbols in clblas and cublas headers so no recompilation and code modification. is necessary. I could also implement some of the symbols for clblast.h, since it uses a different header. Some advantages of Isaac are:\n- Entirely dynamic, so that it can use either/both CUDA or OpenCL without recompilation.\n- Input-aware , it doesn't tune kernels for large square matrices. It should perform well on all shapes you can think of without retuning.\n- C++ API similar to numpy/arrayfire. Some fusion for combining elementwise operation with reductions\n"}