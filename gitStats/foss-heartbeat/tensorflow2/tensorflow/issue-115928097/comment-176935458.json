{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/176935458", "html_url": "https://github.com/tensorflow/tensorflow/issues/22#issuecomment-176935458", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22", "id": 176935458, "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjkzNTQ1OA==", "user": {"login": "keryell", "id": 1821746, "node_id": "MDQ6VXNlcjE4MjE3NDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1821746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keryell", "html_url": "https://github.com/keryell", "followers_url": "https://api.github.com/users/keryell/followers", "following_url": "https://api.github.com/users/keryell/following{/other_user}", "gists_url": "https://api.github.com/users/keryell/gists{/gist_id}", "starred_url": "https://api.github.com/users/keryell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keryell/subscriptions", "organizations_url": "https://api.github.com/users/keryell/orgs", "repos_url": "https://api.github.com/users/keryell/repos", "events_url": "https://api.github.com/users/keryell/events{/privacy}", "received_events_url": "https://api.github.com/users/keryell/received_events", "type": "User", "site_admin": false}, "created_at": "2016-01-29T19:43:57Z", "updated_at": "2016-01-29T19:43:57Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3027176\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/karlrupp\">@karlrupp</a> You are right, OpenCL and CUDA are too different programming approaches. The single-source aspect found for example in CUDA and OpenMP 4.5 is extremely powerful from a software engineering perspective. This is why there is this SYCL standard for the real C++ programmers. SYCL can be seen as CUDA on steroids without any language extension and with some OpenMP aspects (the tasks). A typical SYCL device compiler is expected to generate SPIR-V kernels.</p>\n<p>Your concerns about portability are less an issue with the SPIR-V standard (kind of portable equivalent of nVidia PTX/AMDIL/... in the Vulkan &amp; OpenCL world) which is mandatory to accept in OpenCL 2.1 and Vulkan. So the beauty is that if you have a front-end that generates SPIR-V, you do not need special knowledge of the very details of the hardware to run on. There is a Khronos open-source bidirectional translator between LLVM IR and SPIR-V, so it opens quite new territories.</p>", "body_text": "@karlrupp You are right, OpenCL and CUDA are too different programming approaches. The single-source aspect found for example in CUDA and OpenMP 4.5 is extremely powerful from a software engineering perspective. This is why there is this SYCL standard for the real C++ programmers. SYCL can be seen as CUDA on steroids without any language extension and with some OpenMP aspects (the tasks). A typical SYCL device compiler is expected to generate SPIR-V kernels.\nYour concerns about portability are less an issue with the SPIR-V standard (kind of portable equivalent of nVidia PTX/AMDIL/... in the Vulkan & OpenCL world) which is mandatory to accept in OpenCL 2.1 and Vulkan. So the beauty is that if you have a front-end that generates SPIR-V, you do not need special knowledge of the very details of the hardware to run on. There is a Khronos open-source bidirectional translator between LLVM IR and SPIR-V, so it opens quite new territories.", "body": "@karlrupp You are right, OpenCL and CUDA are too different programming approaches. The single-source aspect found for example in CUDA and OpenMP 4.5 is extremely powerful from a software engineering perspective. This is why there is this SYCL standard for the real C++ programmers. SYCL can be seen as CUDA on steroids without any language extension and with some OpenMP aspects (the tasks). A typical SYCL device compiler is expected to generate SPIR-V kernels.\n\nYour concerns about portability are less an issue with the SPIR-V standard (kind of portable equivalent of nVidia PTX/AMDIL/... in the Vulkan & OpenCL world) which is mandatory to accept in OpenCL 2.1 and Vulkan. So the beauty is that if you have a front-end that generates SPIR-V, you do not need special knowledge of the very details of the hardware to run on. There is a Khronos open-source bidirectional translator between LLVM IR and SPIR-V, so it opens quite new territories.\n"}