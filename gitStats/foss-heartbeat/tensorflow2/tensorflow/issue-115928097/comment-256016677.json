{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/256016677", "html_url": "https://github.com/tensorflow/tensorflow/issues/22#issuecomment-256016677", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22", "id": 256016677, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjAxNjY3Nw==", "user": {"login": "lukeiwanski", "id": 8373795, "node_id": "MDQ6VXNlcjgzNzM3OTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/8373795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukeiwanski", "html_url": "https://github.com/lukeiwanski", "followers_url": "https://api.github.com/users/lukeiwanski/followers", "following_url": "https://api.github.com/users/lukeiwanski/following{/other_user}", "gists_url": "https://api.github.com/users/lukeiwanski/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukeiwanski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukeiwanski/subscriptions", "organizations_url": "https://api.github.com/users/lukeiwanski/orgs", "repos_url": "https://api.github.com/users/lukeiwanski/repos", "events_url": "https://api.github.com/users/lukeiwanski/events{/privacy}", "received_events_url": "https://api.github.com/users/lukeiwanski/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-25T12:07:43Z", "updated_at": "2016-10-25T12:07:43Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>question: how are you guys solving the issue of address spaces?</p>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=123560\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hughperkins\">@hughperkins</a> The SYCL specs describe in section 5.8 (\"Address-space deduction\")<br>\nhow an implementation needs to deal with different memory types. This<br>\nis similar to previous work done for PlayStation 3 and described in<br>\nthis paper: <a href=\"http://www.par.univie.ac.at/project/peppher/publications/Published/HiPEAC10.pdf\" rel=\"nofollow\">Offload \u2013 Automating Code Migration to Heterogeneous<br>\nMulticore Systems</a> or <a href=\"http://llvm.org/devmtg/2016-03/#presentation13\" rel=\"nofollow\">C++ on Accelerators: Supporting Single-Source SYCL and HSA Programming Models Using Clang</a></p>\n<p>hope that helps.</p>", "body_text": "question: how are you guys solving the issue of address spaces?\n\n@hughperkins The SYCL specs describe in section 5.8 (\"Address-space deduction\")\nhow an implementation needs to deal with different memory types. This\nis similar to previous work done for PlayStation 3 and described in\nthis paper: Offload \u2013 Automating Code Migration to Heterogeneous\nMulticore Systems or C++ on Accelerators: Supporting Single-Source SYCL and HSA Programming Models Using Clang\nhope that helps.", "body": "> question: how are you guys solving the issue of address spaces? \n\n@hughperkins The SYCL specs describe in section 5.8 (\"Address-space deduction\")\nhow an implementation needs to deal with different memory types. This\nis similar to previous work done for PlayStation 3 and described in\nthis paper: [Offload \u2013 Automating Code Migration to Heterogeneous\nMulticore Systems](http://www.par.univie.ac.at/project/peppher/publications/Published/HiPEAC10.pdf) or [C++ on Accelerators: Supporting Single-Source SYCL and HSA Programming Models Using Clang](http://llvm.org/devmtg/2016-03/#presentation13)\n\nhope that helps.\n"}