{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350523669", "html_url": "https://github.com/tensorflow/tensorflow/issues/22#issuecomment-350523669", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22", "id": 350523669, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDUyMzY2OQ==", "user": {"login": "mirh", "id": 9366725, "node_id": "MDQ6VXNlcjkzNjY3MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/9366725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mirh", "html_url": "https://github.com/mirh", "followers_url": "https://api.github.com/users/mirh/followers", "following_url": "https://api.github.com/users/mirh/following{/other_user}", "gists_url": "https://api.github.com/users/mirh/gists{/gist_id}", "starred_url": "https://api.github.com/users/mirh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mirh/subscriptions", "organizations_url": "https://api.github.com/users/mirh/orgs", "repos_url": "https://api.github.com/users/mirh/repos", "events_url": "https://api.github.com/users/mirh/events{/privacy}", "received_events_url": "https://api.github.com/users/mirh/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-10T04:05:33Z", "updated_at": "2017-12-10T22:37:17Z", "author_association": "NONE", "body_html": "<p>If you are going to write an article, I guess it wouldn't hurt to also explain (took 3 hours to get the whole picture):</p>\n<ul>\n<li>TF has in fact a SYCL 1.2 backend. No *actual* opencl.</li>\n<li>in turn, you have two <a href=\"https://github.com/tensorflow/tensorflow/tree/master/third_party/sycl/crosstool\">implementations</a> of the standard (trisycl <a href=\"https://www.youtube.com/watch?v=LUzZxdElY0Y\" rel=\"nofollow\">looks</a> cool, but it's <a href=\"https://github.com/tensorflow/tensorflow/tree/master/third_party/sycl/crosstool\">limited</a> atm)</li>\n<li>In the end, ComputeCpp 'hooks' <a href=\"https://en.wikipedia.org/wiki/Standard_Portable_Intermediate_Representation\" rel=\"nofollow\">SPIR</a>/SPIR-V (in addition to PTX, but this is really <a href=\"https://www.codeplay.com/portal/12-06-17-adding-experimental-ptx-support-to-computecpp-for-nvidia\" rel=\"nofollow\">another story</a>)</li>\n</ul>\n<p>And this is what eventually gets you straight to your bloody yearned OpenCL 1.2 (w/  cl_khr_spir ext)</p>\n<p>HIP instead is yet another backend, sits <a href=\"https://www.phoronix.com/forums/forum/linux-graphics-x-org-drivers/open-source-amd-linux/911118-radeon-open-compute-1-3-platform-brings-polaris-other-features/page3#post911265\" rel=\"nofollow\">opposite</a> to SYCL, and targets only and exclusively ROCm (or well, lol, even in turn cuda if you have an nvidia gpu.. but this is again another story)</p>\n<blockquote>\n<p>AMD are building an alternative path that's fully open source - translating the CUDA code to OpenCL code with a compiler toolchain.</p>\n</blockquote>\n<p>Nope. You are talking about HIP, and.. that's actually it, what you eventually convert your code <em>to</em>. Which is <a href=\"https://github.com/ROCm-Developer-Tools/HIP/blob/master/docs/markdown/hip_faq.md#how-does-hip-compare-with-opencl\"><strong>not</strong></a> OpenCL.<br>\nHIP then runs on ROCm as I was saying...<br>\nROCm which is <em>also</em> what runs OpenCL for you <a href=\"https://www.phoronix.com/forums/forum/linux-graphics-x-org-drivers/open-source-amd-linux/911118-radeon-open-compute-1-3-platform-brings-polaris-other-features#post911129\" rel=\"nofollow\">(on supported cards</a>), but please I'd stress everybody to notice how the relations is only forward from ROCm, never \"intra-sub-layers\"</p>\n<p>What you are perhaps thinking about could be <a href=\"https://github.com/hughperkins/coriander\">coriander</a>.</p>\n<blockquote>\n<p>I'm not sure what the status of that is for the older cards like mine though.</p>\n</blockquote>\n<p>Summed up <a href=\"https://www.phoronix.com/forums/forum/linux-graphics-x-org-drivers/open-source-amd-linux/911118-radeon-open-compute-1-3-platform-brings-polaris-other-features/page4#post911344\" rel=\"nofollow\">here</a>: fully fledged AMDGPU-PRO, amdgpu-pro-opencl-only driver as you are doing now ... Or continuing to wait until the end of the decade for somebody to finally make clover usable.</p>\n<p>Also, fglrx... But if that's hard to recommend for pre-gcn cards, I guess it's just better to draw a veil over.</p>", "body_text": "If you are going to write an article, I guess it wouldn't hurt to also explain (took 3 hours to get the whole picture):\n\nTF has in fact a SYCL 1.2 backend. No *actual* opencl.\nin turn, you have two implementations of the standard (trisycl looks cool, but it's limited atm)\nIn the end, ComputeCpp 'hooks' SPIR/SPIR-V (in addition to PTX, but this is really another story)\n\nAnd this is what eventually gets you straight to your bloody yearned OpenCL 1.2 (w/  cl_khr_spir ext)\nHIP instead is yet another backend, sits opposite to SYCL, and targets only and exclusively ROCm (or well, lol, even in turn cuda if you have an nvidia gpu.. but this is again another story)\n\nAMD are building an alternative path that's fully open source - translating the CUDA code to OpenCL code with a compiler toolchain.\n\nNope. You are talking about HIP, and.. that's actually it, what you eventually convert your code to. Which is not OpenCL.\nHIP then runs on ROCm as I was saying...\nROCm which is also what runs OpenCL for you (on supported cards), but please I'd stress everybody to notice how the relations is only forward from ROCm, never \"intra-sub-layers\"\nWhat you are perhaps thinking about could be coriander.\n\nI'm not sure what the status of that is for the older cards like mine though.\n\nSummed up here: fully fledged AMDGPU-PRO, amdgpu-pro-opencl-only driver as you are doing now ... Or continuing to wait until the end of the decade for somebody to finally make clover usable.\nAlso, fglrx... But if that's hard to recommend for pre-gcn cards, I guess it's just better to draw a veil over.", "body": "If you are going to write an article, I guess it wouldn't hurt to also explain (took 3 hours to get the whole picture): \r\n\r\n* TF has in fact a SYCL 1.2 backend. No \\*actual\\* opencl. \r\n* in turn, you have two [implementations](https://github.com/tensorflow/tensorflow/tree/master/third_party/sycl/crosstool) of the standard (trisycl [looks](https://www.youtube.com/watch?v=LUzZxdElY0Y) cool, but it's [limited](https://github.com/tensorflow/tensorflow/tree/master/third_party/sycl/crosstool) atm)\r\n* In the end, ComputeCpp 'hooks' [SPIR](https://en.wikipedia.org/wiki/Standard_Portable_Intermediate_Representation)/SPIR-V (in addition to PTX, but this is really [another story](https://www.codeplay.com/portal/12-06-17-adding-experimental-ptx-support-to-computecpp-for-nvidia))\r\n\r\nAnd this is what eventually gets you straight to your bloody yearned OpenCL 1.2 (w/  cl_khr_spir ext)\r\n\r\nHIP instead is yet another backend, sits [opposite](https://www.phoronix.com/forums/forum/linux-graphics-x-org-drivers/open-source-amd-linux/911118-radeon-open-compute-1-3-platform-brings-polaris-other-features/page3#post911265) to SYCL, and targets only and exclusively ROCm (or well, lol, even in turn cuda if you have an nvidia gpu.. but this is again another story)\r\n\r\n> AMD are building an alternative path that's fully open source - translating the CUDA code to OpenCL code with a compiler toolchain. \r\n\r\nNope. You are talking about HIP, and.. that's actually it, what you eventually convert your code *to*. Which is [**not**](https://github.com/ROCm-Developer-Tools/HIP/blob/master/docs/markdown/hip_faq.md#how-does-hip-compare-with-opencl) OpenCL. \r\nHIP then runs on ROCm as I was saying... \r\nROCm which is *also* what runs OpenCL for you [(on supported cards](https://www.phoronix.com/forums/forum/linux-graphics-x-org-drivers/open-source-amd-linux/911118-radeon-open-compute-1-3-platform-brings-polaris-other-features#post911129)), but please I'd stress everybody to notice how the relations is only forward from ROCm, never \"intra-sub-layers\"\r\n\r\nWhat you are perhaps thinking about could be [coriander](https://github.com/hughperkins/coriander). \r\n\r\n> I'm not sure what the status of that is for the older cards like mine though.\r\n\r\nSummed up [here](https://www.phoronix.com/forums/forum/linux-graphics-x-org-drivers/open-source-amd-linux/911118-radeon-open-compute-1-3-platform-brings-polaris-other-features/page4#post911344): fully fledged AMDGPU-PRO, amdgpu-pro-opencl-only driver as you are doing now ... Or continuing to wait until the end of the decade for somebody to finally make clover usable. \r\n\r\nAlso, fglrx... But if that's hard to recommend for pre-gcn cards, I guess it's just better to draw a veil over. "}