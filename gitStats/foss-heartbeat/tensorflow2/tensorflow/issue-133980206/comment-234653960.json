{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/234653960", "html_url": "https://github.com/tensorflow/tensorflow/issues/1122#issuecomment-234653960", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1122", "id": 234653960, "node_id": "MDEyOklzc3VlQ29tbWVudDIzNDY1Mzk2MA==", "user": {"login": "brando90", "id": 1855278, "node_id": "MDQ6VXNlcjE4NTUyNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1855278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brando90", "html_url": "https://github.com/brando90", "followers_url": "https://api.github.com/users/brando90/followers", "following_url": "https://api.github.com/users/brando90/following{/other_user}", "gists_url": "https://api.github.com/users/brando90/gists{/gist_id}", "starred_url": "https://api.github.com/users/brando90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brando90/subscriptions", "organizations_url": "https://api.github.com/users/brando90/orgs", "repos_url": "https://api.github.com/users/brando90/repos", "events_url": "https://api.github.com/users/brando90/events{/privacy}", "received_events_url": "https://api.github.com/users/brando90/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-22T20:55:01Z", "updated_at": "2016-07-22T20:55:51Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16869368\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nmhkahn\">@nmhkahn</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2412413\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/pawni\">@pawni</a> @ when you do:</p>\n<p><code>sess.run([opt, loss], feed_dict={x: bx, y: by, is_training=True})</code></p>\n<p>doesn't that mean that your using <code>is_training</code> as a placeholder? People have commented that they want <code>is_training</code> to be a placer holder but thats what I had for my version of it:</p>\n<pre><code>def batch_norm_layer(x,train_phase,scope_bn):\n\n    bn_train = batch_norm(x, decay=0.999, center=True, scale=True,\n    is_training=True,\n    reuse=None, # is this right?\n    trainable=True,\n    scope=scope_bn)\n    bn_inference = batch_norm(x, decay=0.999, center=True, scale=True,\n    is_training=False,\n    reuse=True, # is this right?\n    trainable=True,\n    scope=scope_bn)\n    z = tf.cond(train_phase, lambda: bn_train, lambda: bn_inference)\n    return z\n</code></pre>\n<p>is that not correct?</p>", "body_text": "@nmhkahn @pawni @ when you do:\nsess.run([opt, loss], feed_dict={x: bx, y: by, is_training=True})\ndoesn't that mean that your using is_training as a placeholder? People have commented that they want is_training to be a placer holder but thats what I had for my version of it:\ndef batch_norm_layer(x,train_phase,scope_bn):\n\n    bn_train = batch_norm(x, decay=0.999, center=True, scale=True,\n    is_training=True,\n    reuse=None, # is this right?\n    trainable=True,\n    scope=scope_bn)\n    bn_inference = batch_norm(x, decay=0.999, center=True, scale=True,\n    is_training=False,\n    reuse=True, # is this right?\n    trainable=True,\n    scope=scope_bn)\n    z = tf.cond(train_phase, lambda: bn_train, lambda: bn_inference)\n    return z\n\nis that not correct?", "body": "@nmhkahn @pawni @ when you do:\n\n`sess.run([opt, loss], feed_dict={x: bx, y: by, is_training=True})`\n\ndoesn't that mean that your using `is_training` as a placeholder? People have commented that they want `is_training` to be a placer holder but thats what I had for my version of it:\n\n```\ndef batch_norm_layer(x,train_phase,scope_bn):\n\n    bn_train = batch_norm(x, decay=0.999, center=True, scale=True,\n    is_training=True,\n    reuse=None, # is this right?\n    trainable=True,\n    scope=scope_bn)\n    bn_inference = batch_norm(x, decay=0.999, center=True, scale=True,\n    is_training=False,\n    reuse=True, # is this right?\n    trainable=True,\n    scope=scope_bn)\n    z = tf.cond(train_phase, lambda: bn_train, lambda: bn_inference)\n    return z\n```\n\nis that not correct?\n"}