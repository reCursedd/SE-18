{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/317039736", "html_url": "https://github.com/tensorflow/tensorflow/issues/1122#issuecomment-317039736", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1122", "id": 317039736, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzAzOTczNg==", "user": {"login": "tano297", "id": 18667639, "node_id": "MDQ6VXNlcjE4NjY3NjM5", "avatar_url": "https://avatars3.githubusercontent.com/u/18667639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tano297", "html_url": "https://github.com/tano297", "followers_url": "https://api.github.com/users/tano297/followers", "following_url": "https://api.github.com/users/tano297/following{/other_user}", "gists_url": "https://api.github.com/users/tano297/gists{/gist_id}", "starred_url": "https://api.github.com/users/tano297/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tano297/subscriptions", "organizations_url": "https://api.github.com/users/tano297/orgs", "repos_url": "https://api.github.com/users/tano297/repos", "events_url": "https://api.github.com/users/tano297/events{/privacy}", "received_events_url": "https://api.github.com/users/tano297/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-21T15:56:55Z", "updated_at": "2017-07-21T15:56:55Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1835958\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/abred\">@abred</a> Yes indeed, but you are referring to line 391, where it does the update of the moving average within _fused_batch_norm():</p>\n<div class=\"highlight highlight-source-python\"><pre>    <span class=\"pl-c\"><span class=\"pl-c\">#</span> If `is_training` doesn't have a constant value, because it is a `Tensor`,</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> a `Variable` or `Placeholder` then is_training_value will be None and</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> `need_updates` will be true.</span>\n    is_training_value <span class=\"pl-k\">=</span> utils.constant_value(is_training)\n    need_updates <span class=\"pl-k\">=</span> is_training_value <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">or</span> is_training_value\n    <span class=\"pl-k\">if</span> need_updates:\n        <span class=\"pl-c1\">...</span>\n        outputs <span class=\"pl-k\">=</span> utils.smart_cond(is_training, _force_updates, no_updates)\n        <span class=\"pl-c1\">...</span></pre></div>\n<p>I am talking about line 753 within batch_norm():</p>\n<div class=\"highlight highlight-source-python\"><pre>    <span class=\"pl-c\"><span class=\"pl-c\">#</span> If `is_training` doesn't have a constant value, because it is a `Tensor`,</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> a `Variable` or `Placeholder` then is_training_value will be None and</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> `needs_moments` will be true.</span>\n    is_training_value <span class=\"pl-k\">=</span> utils.constant_value(is_training)\n    need_moments <span class=\"pl-k\">=</span> is_training_value <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">or</span> is_training_value\n    <span class=\"pl-k\">if</span> need_moments:\n        <span class=\"pl-c1\">...</span>\n        mean, variance <span class=\"pl-k\">=</span> utils.smart_cond(is_training,\n                                          _force_updates,\n                                          moving_vars_fn) \n        <span class=\"pl-c1\">...</span></pre></div>\n<p>The smart condition in that case (as far as I am concerned) decides wether or not to update the moving averages, but the moments still get calculated.</p>", "body_text": "@abred Yes indeed, but you are referring to line 391, where it does the update of the moving average within _fused_batch_norm():\n    # If `is_training` doesn't have a constant value, because it is a `Tensor`,\n    # a `Variable` or `Placeholder` then is_training_value will be None and\n    # `need_updates` will be true.\n    is_training_value = utils.constant_value(is_training)\n    need_updates = is_training_value is None or is_training_value\n    if need_updates:\n        ...\n        outputs = utils.smart_cond(is_training, _force_updates, no_updates)\n        ...\nI am talking about line 753 within batch_norm():\n    # If `is_training` doesn't have a constant value, because it is a `Tensor`,\n    # a `Variable` or `Placeholder` then is_training_value will be None and\n    # `needs_moments` will be true.\n    is_training_value = utils.constant_value(is_training)\n    need_moments = is_training_value is None or is_training_value\n    if need_moments:\n        ...\n        mean, variance = utils.smart_cond(is_training,\n                                          _force_updates,\n                                          moving_vars_fn) \n        ...\nThe smart condition in that case (as far as I am concerned) decides wether or not to update the moving averages, but the moments still get calculated.", "body": "@abred Yes indeed, but you are referring to line 391, where it does the update of the moving average within _fused_batch_norm():\r\n\r\n```py\r\n    # If `is_training` doesn't have a constant value, because it is a `Tensor`,\r\n    # a `Variable` or `Placeholder` then is_training_value will be None and\r\n    # `need_updates` will be true.\r\n    is_training_value = utils.constant_value(is_training)\r\n    need_updates = is_training_value is None or is_training_value\r\n    if need_updates:\r\n        ...\r\n        outputs = utils.smart_cond(is_training, _force_updates, no_updates)\r\n        ...\r\n```\r\n\r\nI am talking about line 753 within batch_norm():\r\n\r\n```py\r\n    # If `is_training` doesn't have a constant value, because it is a `Tensor`,\r\n    # a `Variable` or `Placeholder` then is_training_value will be None and\r\n    # `needs_moments` will be true.\r\n    is_training_value = utils.constant_value(is_training)\r\n    need_moments = is_training_value is None or is_training_value\r\n    if need_moments:\r\n        ...\r\n        mean, variance = utils.smart_cond(is_training,\r\n                                          _force_updates,\r\n                                          moving_vars_fn) \r\n        ...\r\n```\r\nThe smart condition in that case (as far as I am concerned) decides wether or not to update the moving averages, but the moments still get calculated."}