{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/321557881", "html_url": "https://github.com/tensorflow/tensorflow/issues/1122#issuecomment-321557881", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1122", "id": 321557881, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTU1Nzg4MQ==", "user": {"login": "issa-s-ayoub", "id": 26584101, "node_id": "MDQ6VXNlcjI2NTg0MTAx", "avatar_url": "https://avatars2.githubusercontent.com/u/26584101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/issa-s-ayoub", "html_url": "https://github.com/issa-s-ayoub", "followers_url": "https://api.github.com/users/issa-s-ayoub/followers", "following_url": "https://api.github.com/users/issa-s-ayoub/following{/other_user}", "gists_url": "https://api.github.com/users/issa-s-ayoub/gists{/gist_id}", "starred_url": "https://api.github.com/users/issa-s-ayoub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/issa-s-ayoub/subscriptions", "organizations_url": "https://api.github.com/users/issa-s-ayoub/orgs", "repos_url": "https://api.github.com/users/issa-s-ayoub/repos", "events_url": "https://api.github.com/users/issa-s-ayoub/events{/privacy}", "received_events_url": "https://api.github.com/users/issa-s-ayoub/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-10T13:54:40Z", "updated_at": "2017-08-10T13:59:21Z", "author_association": "NONE", "body_html": "<p>I was confused after all these comments on how to properly use Batch Norm: So here is what I have. Please correct me if I'm wrong.</p>\n<p><code>batch_norm = tf.contrib.layers.batch_norm(conv, center=True, scale=True, reuse=phase_train_py, scope='bn', is_training=is_training)</code></p>\n<p>where phase_train_py is a python boolean variable and is_training is a placeholder taking a boolean variable. I guess using tf.cond is wrong, otherwise would did the function came with a boolean parameters. In other words, if <code>tf.cond</code> is true, then we should a <code>batch_norm</code> function for training and another one for testing. So, developers allow us to change these boolean variables in order to change the behavior of the function. So What I am doing is: setting <code>phase_train_py</code> to False while training while <code>is_training</code> to True. And the opposite while Testing. Since we can only change tensors or placeholders with <code>sess.run</code>, I changed <code>phase_train_py</code> intentionally before running the graph. Ex:</p>\n<p><code>        if condition: phase_train_py = False sess.run(to_run_list, feed_dict={phase_train: True}) else: phase_train_py = True sess.run(to_run_list, feed_dict={phase_train: False})</code></p>", "body_text": "I was confused after all these comments on how to properly use Batch Norm: So here is what I have. Please correct me if I'm wrong.\nbatch_norm = tf.contrib.layers.batch_norm(conv, center=True, scale=True, reuse=phase_train_py, scope='bn', is_training=is_training)\nwhere phase_train_py is a python boolean variable and is_training is a placeholder taking a boolean variable. I guess using tf.cond is wrong, otherwise would did the function came with a boolean parameters. In other words, if tf.cond is true, then we should a batch_norm function for training and another one for testing. So, developers allow us to change these boolean variables in order to change the behavior of the function. So What I am doing is: setting phase_train_py to False while training while is_training to True. And the opposite while Testing. Since we can only change tensors or placeholders with sess.run, I changed phase_train_py intentionally before running the graph. Ex:\n        if condition: phase_train_py = False sess.run(to_run_list, feed_dict={phase_train: True}) else: phase_train_py = True sess.run(to_run_list, feed_dict={phase_train: False})", "body": "I was confused after all these comments on how to properly use Batch Norm: So here is what I have. Please correct me if I'm wrong.\r\n\r\n`batch_norm = tf.contrib.layers.batch_norm(conv,\r\n                                                             center=True,\r\n                                                             scale=True,\r\n                                                             reuse=phase_train_py,\r\n                                                             scope='bn',\r\n                                                             is_training=is_training)`\r\n\r\nwhere phase_train_py is a python boolean variable and is_training is a placeholder taking a boolean variable. I guess using tf.cond is wrong, otherwise would did the function came with a boolean parameters. In other words, if `tf.cond` is true, then we should a `batch_norm` function for training and another one for testing. So, developers allow us to change these boolean variables in order to change the behavior of the function. So What I am doing is: setting `phase_train_py` to False while training while `is_training` to True. And the opposite while Testing. Since we can only change tensors or placeholders with `sess.run`, I changed `phase_train_py` intentionally before running the graph. Ex: \r\n\r\n`        if condition:\r\n            phase_train_py = False\r\n            sess.run(to_run_list, feed_dict={phase_train: True})\r\n        else:\r\n            phase_train_py = True\r\n            sess.run(to_run_list, feed_dict={phase_train: False})`"}