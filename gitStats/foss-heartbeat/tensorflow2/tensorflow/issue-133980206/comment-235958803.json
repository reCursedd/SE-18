{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/235958803", "html_url": "https://github.com/tensorflow/tensorflow/issues/1122#issuecomment-235958803", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1122", "id": 235958803, "node_id": "MDEyOklzc3VlQ29tbWVudDIzNTk1ODgwMw==", "user": {"login": "brando90", "id": 1855278, "node_id": "MDQ6VXNlcjE4NTUyNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1855278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brando90", "html_url": "https://github.com/brando90", "followers_url": "https://api.github.com/users/brando90/followers", "following_url": "https://api.github.com/users/brando90/following{/other_user}", "gists_url": "https://api.github.com/users/brando90/gists{/gist_id}", "starred_url": "https://api.github.com/users/brando90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brando90/subscriptions", "organizations_url": "https://api.github.com/users/brando90/orgs", "repos_url": "https://api.github.com/users/brando90/repos", "events_url": "https://api.github.com/users/brando90/events{/privacy}", "received_events_url": "https://api.github.com/users/brando90/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-28T17:03:29Z", "updated_at": "2016-07-28T17:07:49Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1766524\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sguada\">@sguada</a> I changed my old one where I manually tell it to train or not (based on a tf.cond) and now it seems the accuracy is up to ~95's again. Why was it that I needed to change updates_collections to be None? Do you mind explaining me why that gave such a big accuracy difference? Its seems like a non-trivial change (should it None be its default value then if it matters so much?). Thanks! :)</p>\n<p>Also, I noticed you said it was a placeholder and I didn't need to do it manually. However, when I passed a placeholder for is_training it said</p>\n<p><code>TypeError: Using a</code>tf.Tensor<code>as a Python</code>bool<code>is not allowed. Use</code>if t is not None:<code>instead of</code>if t:<code>to test if a tensor is defined, and use the logical TensorFlow ops to test the value of a tensor.</code></p>\n<p>and pointed to batch_norm code. Maybe It could be nice to show how this placeholder thing should be used because it seems I don't understand how its suppose to be used. Thanks! :)</p>", "body_text": "@sguada I changed my old one where I manually tell it to train or not (based on a tf.cond) and now it seems the accuracy is up to ~95's again. Why was it that I needed to change updates_collections to be None? Do you mind explaining me why that gave such a big accuracy difference? Its seems like a non-trivial change (should it None be its default value then if it matters so much?). Thanks! :)\nAlso, I noticed you said it was a placeholder and I didn't need to do it manually. However, when I passed a placeholder for is_training it said\nTypeError: Using atf.Tensoras a Pythonboolis not allowed. Useif t is not None:instead ofif t:to test if a tensor is defined, and use the logical TensorFlow ops to test the value of a tensor.\nand pointed to batch_norm code. Maybe It could be nice to show how this placeholder thing should be used because it seems I don't understand how its suppose to be used. Thanks! :)", "body": "@sguada I changed my old one where I manually tell it to train or not (based on a tf.cond) and now it seems the accuracy is up to ~95's again. Why was it that I needed to change updates_collections to be None? Do you mind explaining me why that gave such a big accuracy difference? Its seems like a non-trivial change (should it None be its default value then if it matters so much?). Thanks! :)\n\nAlso, I noticed you said it was a placeholder and I didn't need to do it manually. However, when I passed a placeholder for is_training it said \n\n`TypeError: Using a`tf.Tensor`as a Python`bool`is not allowed. Use`if t is not None:`instead of`if t:`to test if a tensor is defined, and use the logical TensorFlow ops to test the value of a tensor.`\n\nand pointed to batch_norm code. Maybe It could be nice to show how this placeholder thing should be used because it seems I don't understand how its suppose to be used. Thanks! :)\n"}