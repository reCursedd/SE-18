{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/76125527", "pull_request_review_id": null, "id": 76125527, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2MTI1NTI3", "diff_hunk": "@@ -33,6 +33,20 @@ struct SelectFunctor<GPUDevice, T> {\n };\n \n template <typename T>\n+struct SelectScalarFunctor<GPUDevice, T> {\n+  void operator()(const GPUDevice& d, typename TTypes<T>::Flat out,\n+                  typename TTypes<bool>::ConstScalar cond,\n+                  typename TTypes<T>::ConstFlat then_flat,\n+                  typename TTypes<T>::ConstFlat else_flat) {\n+    if (cond()){", "path": "tensorflow/core/kernels/cwise_op_gpu_select.cu.cc", "position": 9, "original_position": 9, "commit_id": "f24e5e4a3a43cbb7191de2c2fd4ffae44d61209d", "original_commit_id": "60290e35ee2b53e7ea07b62bf344d0b93ee5b505", "user": {"login": "Mistobaan", "id": 112599, "node_id": "MDQ6VXNlcjExMjU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/112599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mistobaan", "html_url": "https://github.com/Mistobaan", "followers_url": "https://api.github.com/users/Mistobaan/followers", "following_url": "https://api.github.com/users/Mistobaan/following{/other_user}", "gists_url": "https://api.github.com/users/Mistobaan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mistobaan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mistobaan/subscriptions", "organizations_url": "https://api.github.com/users/Mistobaan/orgs", "repos_url": "https://api.github.com/users/Mistobaan/repos", "events_url": "https://api.github.com/users/Mistobaan/events{/privacy}", "received_events_url": "https://api.github.com/users/Mistobaan/received_events", "type": "User", "site_admin": false}, "body": "even that kernel has a comment from @ebrevdo that leads to erroneous memory access. Seems something pesky is going on underneath in Eigen.\nThe second solution to just pass a bool to the kernel. But I wonder if that would require CPU sync with the op to transfer that single boolean. @benoitsteiner Do you have any insight in why a call to a ScalarBool on gpu leads to memory access errors ? \n", "created_at": "2016-08-24T19:46:30Z", "updated_at": "2016-08-25T00:49:40Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/3995#discussion_r76125527", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/3995", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/76125527"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/3995#discussion_r76125527"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/3995"}}, "body_html": "<p>even that kernel has a comment from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> that leads to erroneous memory access. Seems something pesky is going on underneath in Eigen.<br>\nThe second solution to just pass a bool to the kernel. But I wonder if that would require CPU sync with the op to transfer that single boolean. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6969686\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/benoitsteiner\">@benoitsteiner</a> Do you have any insight in why a call to a ScalarBool on gpu leads to memory access errors ?</p>", "body_text": "even that kernel has a comment from @ebrevdo that leads to erroneous memory access. Seems something pesky is going on underneath in Eigen.\nThe second solution to just pass a bool to the kernel. But I wonder if that would require CPU sync with the op to transfer that single boolean. @benoitsteiner Do you have any insight in why a call to a ScalarBool on gpu leads to memory access errors ?", "in_reply_to_id": 75976784}