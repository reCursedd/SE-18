{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/413645872", "html_url": "https://github.com/tensorflow/tensorflow/issues/21614#issuecomment-413645872", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21614", "id": 413645872, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzY0NTg3Mg==", "user": {"login": "apark263", "id": 3529132, "node_id": "MDQ6VXNlcjM1MjkxMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3529132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apark263", "html_url": "https://github.com/apark263", "followers_url": "https://api.github.com/users/apark263/followers", "following_url": "https://api.github.com/users/apark263/following{/other_user}", "gists_url": "https://api.github.com/users/apark263/gists{/gist_id}", "starred_url": "https://api.github.com/users/apark263/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apark263/subscriptions", "organizations_url": "https://api.github.com/users/apark263/orgs", "repos_url": "https://api.github.com/users/apark263/repos", "events_url": "https://api.github.com/users/apark263/events{/privacy}", "received_events_url": "https://api.github.com/users/apark263/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-16T18:43:27Z", "updated_at": "2018-08-16T18:43:27Z", "author_association": "NONE", "body_html": "<p>I'm a colleague of <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15792374\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jmchen-g\">@jmchen-g</a>, and can update the issue while he is away:</p>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:  Docker on Mac</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: N/A</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: docker image <code>tensorflow/tensorflow:1.10.0-py3</code></li>\n<li><strong>TensorFlow version (use command below)</strong>:</li>\n<li><strong>Python version</strong>: python 3</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: See Below:</li>\n</ul>\n<pre><code>import tensorflow as tf\n\nparams = {\n    'seq_len': 32,\n    'vocab_size': 50,\n    'emb_act_size': 32,\n    'rnn_act_size': 64,\n    'out_size': 16\n}\n\ndef mfunc(params):\n    inputs = tf.keras.layers.Input(shape=(50, ), dtype='int32')\n    emb = tf.keras.layers.Embedding(params[\"vocab_size\"],\n                                    params[\"emb_act_size\"])(inputs)\n    lstm1, s_h, s_c = tf.keras.layers.LSTM(\n        params[\"rnn_act_size\"],\n        return_sequences=True,\n        return_state=True,\n        implementation=2)(emb)\n    lstm2 = tf.keras.layers.LSTM(\n        params[\"rnn_act_size\"], return_sequences=True)(\n            lstm1, initial_state=[s_h, s_c])\n    y = tf.keras.layers.Dense(params[\"out_size\"], activation='softmax')(lstm2)\n    model = tf.keras.Model(inputs, y)\n    model.compile(optimizer='sgd', loss='categorical_crossentropy')\n    return model\n\nx = mfunc(params)\ntf.keras.estimator.model_to_estimator(keras_model=x)\n</code></pre>\n<p>Running this yields the following trace:</p>\n<pre><code>File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py\", line 548, in model_to_estimator\n    keras_weights)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py\", line 449, in _save_first_checkpoint\n    custom_objects)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py\", line 315, in _clone_and_build_model\n    model = models.clone_model(keras_model, input_tensors=input_tensors)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/models.py\", line 263, in clone_model\n    return _clone_functional_model(model, input_tensors=input_tensors)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/models.py\", line 168, in _clone_functional_model\n    **kwargs))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 526, in __call__\n    self._num_constants)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 2590, in _standardize_args\n    assert initial_state is None and constants is None\nAssertionError\n</code></pre>\n<p>Here is some more system diag info from running <code>tf_env_collect.sh</code></p>\n<pre><code>== cat /etc/issue ===============================================\nLinux 97ddc7134519 4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\nVERSION=\"16.04.5 LTS (Xenial Xerus)\"\nVERSION_ID=\"16.04\"\nVERSION_CODENAME=xenial\n\n== are we in docker =============================================\nYes\n\n== compiler =====================================================\nc++ (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n\n== uname -a =====================================================\nLinux 97ddc7134519 4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n\n== check pips ===================================================\nnumpy              1.14.5\nprotobuf           3.6.0\ntensorflow         1.10.0\n\n== check for virtualenv =========================================\nFalse\n\n== tensorflow import ============================================\ntf.VERSION = 1.10.0\ntf.GIT_VERSION = v1.10.0-0-g656e7a2b34\ntf.COMPILER_VERSION = v1.10.0-0-g656e7a2b34\nSanity check: array([1], dtype=int32)\n\n== env ==========================================================\nLD_LIBRARY_PATH is unset\nDYLD_LIBRARY_PATH is unset\n\n== nvidia-smi ===================================================\ntf_env_collect.sh: line 105: nvidia-smi: command not found\n\n== cuda libs  ===================================================\n</code></pre>", "body_text": "I'm a colleague of @jmchen-g, and can update the issue while he is away:\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):  Docker on Mac\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\nTensorFlow installed from (source or binary): docker image tensorflow/tensorflow:1.10.0-py3\nTensorFlow version (use command below):\nPython version: python 3\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: See Below:\n\nimport tensorflow as tf\n\nparams = {\n    'seq_len': 32,\n    'vocab_size': 50,\n    'emb_act_size': 32,\n    'rnn_act_size': 64,\n    'out_size': 16\n}\n\ndef mfunc(params):\n    inputs = tf.keras.layers.Input(shape=(50, ), dtype='int32')\n    emb = tf.keras.layers.Embedding(params[\"vocab_size\"],\n                                    params[\"emb_act_size\"])(inputs)\n    lstm1, s_h, s_c = tf.keras.layers.LSTM(\n        params[\"rnn_act_size\"],\n        return_sequences=True,\n        return_state=True,\n        implementation=2)(emb)\n    lstm2 = tf.keras.layers.LSTM(\n        params[\"rnn_act_size\"], return_sequences=True)(\n            lstm1, initial_state=[s_h, s_c])\n    y = tf.keras.layers.Dense(params[\"out_size\"], activation='softmax')(lstm2)\n    model = tf.keras.Model(inputs, y)\n    model.compile(optimizer='sgd', loss='categorical_crossentropy')\n    return model\n\nx = mfunc(params)\ntf.keras.estimator.model_to_estimator(keras_model=x)\n\nRunning this yields the following trace:\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py\", line 548, in model_to_estimator\n    keras_weights)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py\", line 449, in _save_first_checkpoint\n    custom_objects)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py\", line 315, in _clone_and_build_model\n    model = models.clone_model(keras_model, input_tensors=input_tensors)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/models.py\", line 263, in clone_model\n    return _clone_functional_model(model, input_tensors=input_tensors)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/models.py\", line 168, in _clone_functional_model\n    **kwargs))\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 526, in __call__\n    self._num_constants)\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 2590, in _standardize_args\n    assert initial_state is None and constants is None\nAssertionError\n\nHere is some more system diag info from running tf_env_collect.sh\n== cat /etc/issue ===============================================\nLinux 97ddc7134519 4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\nVERSION=\"16.04.5 LTS (Xenial Xerus)\"\nVERSION_ID=\"16.04\"\nVERSION_CODENAME=xenial\n\n== are we in docker =============================================\nYes\n\n== compiler =====================================================\nc++ (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\nCopyright (C) 2015 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n\n== uname -a =====================================================\nLinux 97ddc7134519 4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n\n== check pips ===================================================\nnumpy              1.14.5\nprotobuf           3.6.0\ntensorflow         1.10.0\n\n== check for virtualenv =========================================\nFalse\n\n== tensorflow import ============================================\ntf.VERSION = 1.10.0\ntf.GIT_VERSION = v1.10.0-0-g656e7a2b34\ntf.COMPILER_VERSION = v1.10.0-0-g656e7a2b34\nSanity check: array([1], dtype=int32)\n\n== env ==========================================================\nLD_LIBRARY_PATH is unset\nDYLD_LIBRARY_PATH is unset\n\n== nvidia-smi ===================================================\ntf_env_collect.sh: line 105: nvidia-smi: command not found\n\n== cuda libs  ===================================================", "body": "I'm a colleague of @jmchen-g, and can update the issue while he is away:\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:  Docker on Mac\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: N/A\r\n- **TensorFlow installed from (source or binary)**: docker image `tensorflow/tensorflow:1.10.0-py3`\r\n- **TensorFlow version (use command below)**:\r\n- **Python version**: python 3\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: See Below:\r\n\r\n```\r\nimport tensorflow as tf\r\n\r\nparams = {\r\n    'seq_len': 32,\r\n    'vocab_size': 50,\r\n    'emb_act_size': 32,\r\n    'rnn_act_size': 64,\r\n    'out_size': 16\r\n}\r\n\r\ndef mfunc(params):\r\n    inputs = tf.keras.layers.Input(shape=(50, ), dtype='int32')\r\n    emb = tf.keras.layers.Embedding(params[\"vocab_size\"],\r\n                                    params[\"emb_act_size\"])(inputs)\r\n    lstm1, s_h, s_c = tf.keras.layers.LSTM(\r\n        params[\"rnn_act_size\"],\r\n        return_sequences=True,\r\n        return_state=True,\r\n        implementation=2)(emb)\r\n    lstm2 = tf.keras.layers.LSTM(\r\n        params[\"rnn_act_size\"], return_sequences=True)(\r\n            lstm1, initial_state=[s_h, s_c])\r\n    y = tf.keras.layers.Dense(params[\"out_size\"], activation='softmax')(lstm2)\r\n    model = tf.keras.Model(inputs, y)\r\n    model.compile(optimizer='sgd', loss='categorical_crossentropy')\r\n    return model\r\n\r\nx = mfunc(params)\r\ntf.keras.estimator.model_to_estimator(keras_model=x)\r\n```\r\n\r\nRunning this yields the following trace:\r\n```\r\nFile \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py\", line 548, in model_to_estimator\r\n    keras_weights)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py\", line 449, in _save_first_checkpoint\r\n    custom_objects)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/estimator/keras.py\", line 315, in _clone_and_build_model\r\n    model = models.clone_model(keras_model, input_tensors=input_tensors)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/models.py\", line 263, in clone_model\r\n    return _clone_functional_model(model, input_tensors=input_tensors)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/models.py\", line 168, in _clone_functional_model\r\n    **kwargs))\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 526, in __call__\r\n    self._num_constants)\r\n  File \"/usr/local/lib/python3.5/dist-packages/tensorflow/python/keras/layers/recurrent.py\", line 2590, in _standardize_args\r\n    assert initial_state is None and constants is None\r\nAssertionError\r\n```\r\n\r\nHere is some more system diag info from running `tf_env_collect.sh`\r\n\r\n```\r\n== cat /etc/issue ===============================================\r\nLinux 97ddc7134519 4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\r\nVERSION=\"16.04.5 LTS (Xenial Xerus)\"\r\nVERSION_ID=\"16.04\"\r\nVERSION_CODENAME=xenial\r\n\r\n== are we in docker =============================================\r\nYes\r\n\r\n== compiler =====================================================\r\nc++ (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609\r\nCopyright (C) 2015 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n\r\n== uname -a =====================================================\r\nLinux 97ddc7134519 4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n== check pips ===================================================\r\nnumpy              1.14.5\r\nprotobuf           3.6.0\r\ntensorflow         1.10.0\r\n\r\n== check for virtualenv =========================================\r\nFalse\r\n\r\n== tensorflow import ============================================\r\ntf.VERSION = 1.10.0\r\ntf.GIT_VERSION = v1.10.0-0-g656e7a2b34\r\ntf.COMPILER_VERSION = v1.10.0-0-g656e7a2b34\r\nSanity check: array([1], dtype=int32)\r\n\r\n== env ==========================================================\r\nLD_LIBRARY_PATH is unset\r\nDYLD_LIBRARY_PATH is unset\r\n\r\n== nvidia-smi ===================================================\r\ntf_env_collect.sh: line 105: nvidia-smi: command not found\r\n\r\n== cuda libs  ===================================================\r\n```\r\n"}