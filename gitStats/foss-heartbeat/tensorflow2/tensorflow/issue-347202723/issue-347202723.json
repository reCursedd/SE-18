{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21348", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21348/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21348/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21348/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21348", "id": 347202723, "node_id": "MDU6SXNzdWUzNDcyMDI3MjM=", "number": 21348, "title": "[Bug] cpu memory leak while using GPU with variable length ops.", "user": {"login": "unrealwill", "id": 11304248, "node_id": "MDQ6VXNlcjExMzA0MjQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/11304248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unrealwill", "html_url": "https://github.com/unrealwill", "followers_url": "https://api.github.com/users/unrealwill/followers", "following_url": "https://api.github.com/users/unrealwill/following{/other_user}", "gists_url": "https://api.github.com/users/unrealwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/unrealwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unrealwill/subscriptions", "organizations_url": "https://api.github.com/users/unrealwill/orgs", "repos_url": "https://api.github.com/users/unrealwill/repos", "events_url": "https://api.github.com/users/unrealwill/events{/privacy}", "received_events_url": "https://api.github.com/users/unrealwill/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-08-02T22:57:02Z", "updated_at": "2018-11-23T18:38:51Z", "closed_at": null, "author_association": "NONE", "body_html": "<pre><code>import tensorflow as tf\nimport numpy as np\nimport gc\n\ndef NotBuggy():\n    with tf.device(\"/gpu:0\"):\n        x = tf.placeholder(dtype=tf.float32, shape=(1000,1))\n        col = tf.placeholder(dtype=tf.int32, shape=(None,1))\n\n        p0 = tf.gather_nd( x,col)\n        p1 = tf.gather_nd( x,col+1)\n        diff = p0 - p1\n    sess = tf.Session()\n    co = 0\n    while (True):\n        feed_dict = {x: np.expand_dims(np.arange(1000),1), \n                     col: np.random.randint( 0,900, size=( np.random.randint(500,20000),1 ) ) }\n        _res = sess.run(diff, feed_dict=feed_dict)\n        co = co + 1\n        if (co % 1000 == 0):\n            gc.collect()\n            print(_res.shape)\n            print(co)\n\n\ndef Buggy():\n    with tf.device(\"/gpu:0\"):\n        x = tf.placeholder( dtype=tf.float32 , shape=(1000))\n        ind = tf.placeholder( dtype=tf.int32, shape=(None) )\n\n        p0 = tf.gather_nd(tf.expand_dims(x,1),tf.expand_dims(ind,1))\n        p1 = tf.gather_nd(tf.expand_dims(x,1),tf.expand_dims(ind+1,1))\n\n        diff = p0-p1\n\n    sess = tf.Session()\n    co = 0\n    while(True):\n        #Note that the length of ind is variable\n        feed_dict = {x: np.arange(1000),ind: np.random.randint(0, 900, size=(np.random.randint(500, 20000)))}\n        #When sized is fixed : doesn't memory leak\n        #feed_dict = {x: np.arange(1000),ind: np.random.randint(0, 900, size=(20000,))}\n        _res = sess.run(diff, feed_dict=feed_dict)\n        co = co+1\n        if( co % 1000 == 0):\n            gc.collect()\n            print(_res.shape)\n            print(co)\n\n#NotBuggy()\nBuggy()\n</code></pre>\n<p>The code above leaks cpu memory quite rapidly ~10 Mb/s.<br>\nI tried some differential analysis, the bug seems weird and related to the graph construction.</p>\n<p>Have Fun :)</p>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Lubuntu 16.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: No</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.9.0-0-g25c197e023 1.9.0</li>\n<li><strong>Python version</strong>: Python 3.6.5 (default, May  3 2018, 10:08:28) (also bugs on Python 3.5.2 (default, Nov 17 2016, 17:05:23) )</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>:   CUDA Driver Version / Runtime Version          9.1 / 8.0 , cuDNN N/A</li>\n<li><strong>GPU model and memory</strong>: NVidia GTx1080 ti 12Go</li>\n<li><strong>Exact command to reproduce</strong>: Run code given above (It leaks memory quite rapidly ~10 Mb /s)</li>\n</ul>", "body_text": "import tensorflow as tf\nimport numpy as np\nimport gc\n\ndef NotBuggy():\n    with tf.device(\"/gpu:0\"):\n        x = tf.placeholder(dtype=tf.float32, shape=(1000,1))\n        col = tf.placeholder(dtype=tf.int32, shape=(None,1))\n\n        p0 = tf.gather_nd( x,col)\n        p1 = tf.gather_nd( x,col+1)\n        diff = p0 - p1\n    sess = tf.Session()\n    co = 0\n    while (True):\n        feed_dict = {x: np.expand_dims(np.arange(1000),1), \n                     col: np.random.randint( 0,900, size=( np.random.randint(500,20000),1 ) ) }\n        _res = sess.run(diff, feed_dict=feed_dict)\n        co = co + 1\n        if (co % 1000 == 0):\n            gc.collect()\n            print(_res.shape)\n            print(co)\n\n\ndef Buggy():\n    with tf.device(\"/gpu:0\"):\n        x = tf.placeholder( dtype=tf.float32 , shape=(1000))\n        ind = tf.placeholder( dtype=tf.int32, shape=(None) )\n\n        p0 = tf.gather_nd(tf.expand_dims(x,1),tf.expand_dims(ind,1))\n        p1 = tf.gather_nd(tf.expand_dims(x,1),tf.expand_dims(ind+1,1))\n\n        diff = p0-p1\n\n    sess = tf.Session()\n    co = 0\n    while(True):\n        #Note that the length of ind is variable\n        feed_dict = {x: np.arange(1000),ind: np.random.randint(0, 900, size=(np.random.randint(500, 20000)))}\n        #When sized is fixed : doesn't memory leak\n        #feed_dict = {x: np.arange(1000),ind: np.random.randint(0, 900, size=(20000,))}\n        _res = sess.run(diff, feed_dict=feed_dict)\n        co = co+1\n        if( co % 1000 == 0):\n            gc.collect()\n            print(_res.shape)\n            print(co)\n\n#NotBuggy()\nBuggy()\n\nThe code above leaks cpu memory quite rapidly ~10 Mb/s.\nI tried some differential analysis, the bug seems weird and related to the graph construction.\nHave Fun :)\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Lubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.9.0-0-g25c197e023 1.9.0\nPython version: Python 3.6.5 (default, May  3 2018, 10:08:28) (also bugs on Python 3.5.2 (default, Nov 17 2016, 17:05:23) )\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version:   CUDA Driver Version / Runtime Version          9.1 / 8.0 , cuDNN N/A\nGPU model and memory: NVidia GTx1080 ti 12Go\nExact command to reproduce: Run code given above (It leaks memory quite rapidly ~10 Mb /s)", "body": "```\r\nimport tensorflow as tf\r\nimport numpy as np\r\nimport gc\r\n\r\ndef NotBuggy():\r\n    with tf.device(\"/gpu:0\"):\r\n        x = tf.placeholder(dtype=tf.float32, shape=(1000,1))\r\n        col = tf.placeholder(dtype=tf.int32, shape=(None,1))\r\n\r\n        p0 = tf.gather_nd( x,col)\r\n        p1 = tf.gather_nd( x,col+1)\r\n        diff = p0 - p1\r\n    sess = tf.Session()\r\n    co = 0\r\n    while (True):\r\n        feed_dict = {x: np.expand_dims(np.arange(1000),1), \r\n                     col: np.random.randint( 0,900, size=( np.random.randint(500,20000),1 ) ) }\r\n        _res = sess.run(diff, feed_dict=feed_dict)\r\n        co = co + 1\r\n        if (co % 1000 == 0):\r\n            gc.collect()\r\n            print(_res.shape)\r\n            print(co)\r\n\r\n\r\ndef Buggy():\r\n    with tf.device(\"/gpu:0\"):\r\n        x = tf.placeholder( dtype=tf.float32 , shape=(1000))\r\n        ind = tf.placeholder( dtype=tf.int32, shape=(None) )\r\n\r\n        p0 = tf.gather_nd(tf.expand_dims(x,1),tf.expand_dims(ind,1))\r\n        p1 = tf.gather_nd(tf.expand_dims(x,1),tf.expand_dims(ind+1,1))\r\n\r\n        diff = p0-p1\r\n\r\n    sess = tf.Session()\r\n    co = 0\r\n    while(True):\r\n        #Note that the length of ind is variable\r\n        feed_dict = {x: np.arange(1000),ind: np.random.randint(0, 900, size=(np.random.randint(500, 20000)))}\r\n        #When sized is fixed : doesn't memory leak\r\n        #feed_dict = {x: np.arange(1000),ind: np.random.randint(0, 900, size=(20000,))}\r\n        _res = sess.run(diff, feed_dict=feed_dict)\r\n        co = co+1\r\n        if( co % 1000 == 0):\r\n            gc.collect()\r\n            print(_res.shape)\r\n            print(co)\r\n\r\n#NotBuggy()\r\nBuggy()\r\n```\r\n\r\nThe code above leaks cpu memory quite rapidly ~10 Mb/s.\r\nI tried some differential analysis, the bug seems weird and related to the graph construction.\r\n\r\nHave Fun :)\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Lubuntu 16.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: No\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: v1.9.0-0-g25c197e023 1.9.0\r\n- **Python version**: Python 3.6.5 (default, May  3 2018, 10:08:28) (also bugs on Python 3.5.2 (default, Nov 17 2016, 17:05:23) )\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**:   CUDA Driver Version / Runtime Version          9.1 / 8.0 , cuDNN N/A\r\n- **GPU model and memory**: NVidia GTx1080 ti 12Go\r\n- **Exact command to reproduce**: Run code given above (It leaks memory quite rapidly ~10 Mb /s)\r\n"}