{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/349666336", "html_url": "https://github.com/tensorflow/tensorflow/issues/12689#issuecomment-349666336", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12689", "id": 349666336, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTY2NjMzNg==", "user": {"login": "qianyizhang", "id": 12500132, "node_id": "MDQ6VXNlcjEyNTAwMTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/12500132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qianyizhang", "html_url": "https://github.com/qianyizhang", "followers_url": "https://api.github.com/users/qianyizhang/followers", "following_url": "https://api.github.com/users/qianyizhang/following{/other_user}", "gists_url": "https://api.github.com/users/qianyizhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/qianyizhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qianyizhang/subscriptions", "organizations_url": "https://api.github.com/users/qianyizhang/orgs", "repos_url": "https://api.github.com/users/qianyizhang/repos", "events_url": "https://api.github.com/users/qianyizhang/events{/privacy}", "received_events_url": "https://api.github.com/users/qianyizhang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-06T15:04:30Z", "updated_at": "2017-12-06T15:04:30Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22830466\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/TianwenWei\">@TianwenWei</a><br>\nThis is seems really strange, since as I'm looking into the slim implementations, it seems the regular weights and bias are created with slim.model_variable, and regularizer are slim.variable<br>\nThough I'm 100% sure, I think all variables are created with their closest with device scope, which is individual gpu (and reuseable variables are pinned memory between each gpus and have a sync copy in the cpu?), therefore all operations are in theory performed within gpu. But your line is forcing these variables (thus operations) to happen in cpu.</p>\n<p>In short, I think without the line<br>\n<code>with slim.arg_scope([slim.model_variable, slim.variable], device='/cpu:0'):</code><br>\nyour code should be more tf-correect and faster<br>\nBut I'm not 100% sure, and really hope someone who knows these graph operations better can confirm on this.</p>", "body_text": "@TianwenWei\nThis is seems really strange, since as I'm looking into the slim implementations, it seems the regular weights and bias are created with slim.model_variable, and regularizer are slim.variable\nThough I'm 100% sure, I think all variables are created with their closest with device scope, which is individual gpu (and reuseable variables are pinned memory between each gpus and have a sync copy in the cpu?), therefore all operations are in theory performed within gpu. But your line is forcing these variables (thus operations) to happen in cpu.\nIn short, I think without the line\nwith slim.arg_scope([slim.model_variable, slim.variable], device='/cpu:0'):\nyour code should be more tf-correect and faster\nBut I'm not 100% sure, and really hope someone who knows these graph operations better can confirm on this.", "body": "@TianwenWei \r\nThis is seems really strange, since as I'm looking into the slim implementations, it seems the regular weights and bias are created with slim.model_variable, and regularizer are slim.variable\r\nThough I'm 100% sure, I think all variables are created with their closest with device scope, which is individual gpu (and reuseable variables are pinned memory between each gpus and have a sync copy in the cpu?), therefore all operations are in theory performed within gpu. But your line is forcing these variables (thus operations) to happen in cpu.\r\n\r\nIn short, I think without the line\r\n`\r\nwith slim.arg_scope([slim.model_variable, slim.variable], device='/cpu:0'):\r\n`\r\nyour code should be more tf-correect and faster\r\nBut I'm not 100% sure, and really hope someone who knows these graph operations better can confirm on this."}