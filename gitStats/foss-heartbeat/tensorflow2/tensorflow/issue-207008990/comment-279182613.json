{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/279182613", "html_url": "https://github.com/tensorflow/tensorflow/issues/7443#issuecomment-279182613", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7443", "id": 279182613, "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTE4MjYxMw==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-11T23:09:22Z", "updated_at": "2017-02-18T21:02:05Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I agree that it would be useful to community. I think perhaps someone who has recently gone through the process might be motivated to put the important things together into a nice guide.</p>\n<p>Some snippets from my development notes:</p>\n<p>making a PR: <a href=\"https://gist.github.com/yaroslavvb/bdb0a92f2a516ebbe2d386c48f5e2c45\">https://gist.github.com/yaroslavvb/bdb0a92f2a516ebbe2d386c48f5e2c45</a></p>\n<ul>\n<li>license</li>\n</ul>\n<p>You must sign CLA agreement. See comments from Chris DiBona for why this license was chosen -- <a href=\"https://www.reddit.com/r/MachineLearning/comments/3s4qpm/google_tensorflow_released/\" rel=\"nofollow\">https://www.reddit.com/r/MachineLearning/comments/3s4qpm/google_tensorflow_released/</a></p>\n<p>If you created your commits with a wrong address (ie, default one git sets up), you have to rewrite your commit history to change your address to the one that corresponds to the one you signed CLA with. (github help pages a rewriting script that provded useful for this,  <a href=\"https://help.github.com/articles/changing-author-info/\">https://help.github.com/articles/changing-author-info/</a>)</p>\n<ul>\n<li>pylint</li>\n</ul>\n<pre><code>pip install pylint\nwget -O /tmp/pylintrc https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/tools/ci_build/pylintrc\npylint myfile.py --rcfile=/tmp/pylintrc\n</code></pre>\n<ul>\n<li>buildifier</li>\n</ul>\n<p>Install <a href=\"https://github.com/bazelbuild/buildifier\">https://github.com/bazelbuild/buildifier</a> and running it over the BUILD file to fix any formatting issues</p>\n<ul>\n<li>clang format<br>\nTo see style corrections suggested by <code>clang-format</code></li>\n</ul>\n<pre><code>brew install clang-format\nclang-format tensorflow/stream_executor/cuda/cuda_diagnostics.cc --style=google &gt; /tmp/cuda_diagnostics.cc\ndiff tensorflow/stream_executor/cuda/cuda_diagnostics.cc /tmp/cuda_diagnostics.cc\n\n</code></pre>\n<ul>\n<li>Running tests</li>\n</ul>\n<p>Use <code>bazel test</code>. To see pip install requirements,  check in tensorflow/tools/ci_build/install/install_pip_packages.sh</p>\n<p>Most recently this meant doing this</p>\n<pre><code>pip install -I --upgrade setuptools\npip install portpicker\npip install mock\npip install pep8\npip install pylint\npip install py-cpuinfo\npip install pandas==0.18.1\npip install wheel\npip install --upgrade six==1.10.0\npip install --upgrade werkzeug==0.11.10\npip install --upgrade protobuf==3.0.0\n\n</code></pre>\n<p>Then on Ubuntu:</p>\n<pre><code>export LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\n\nexport flags=\"--config=opt --config=cuda -k\"\nbazel test $flags //tensorflow/python/...\n</code></pre>\n<p>On MacOS: (bazel needs to be explicitly told to pass env vars for some reason)</p>\n<pre><code>export CUDA_HOME=/usr/local/cuda\nexport DYLD_LIBRARY_PATH=/usr/local/cuda/lib:/usr/local/cuda/extras/CUPTI/lib\nexport LD_LIBRARY_PATH=$DYLD_LIBRARY_PATH\nexport PATH=$DYLD_LIBRARY_PATH:$PATH\n\nexport flags=\"--config=cuda --config=opt -k --action_env PATH --action_env DYLD_LIBRARY_PATH --action_env LD_LIBRARY_PATH -k\"\nbazel test $flags //tensorflow/python/...\n</code></pre>\n<p>For changes to core framework<br>\n<code>bazel test $flags //tensorflow/... </code></p>\n<p>Keeping flags in $flags is important because if you you forget a flag, and do <code>bazel run</code> or <code>bazel test</code> with a new setting, it'll start building everything from scratch, aka 20+ mins of machine being semi-unresponsive.</p>\n<p>For long running tests, tmux is useful for provide robustness against disconnection/closing terminal:</p>\n<pre><code>tmux new -s bazel -n 0\nbazel test //tensorflow/...\n\n</code></pre>\n<p>Also, this to keep bazel from wiping its state overnight</p>\n<p><code>echo \"startup --max_idle_secs=100000000\"  &gt; ~/.bazelrc </code></p>\n<p>Also, some notes on general philosophy of contributions -- when you contribute something to TensorFlow, the maintenance burden is transferred to the Google TensorFlow team. This means that benefit of contribution must be compared against the cost of maintaining that feature until the heat death of universe.</p>\n<p>Hence there are cases when you want to extend functionality of TensorFlow, while remaining the owner/maintainer of this extension. This can be done by keeping extra functionality in a separate repo and using TensorFlow API to bring it in during runtime. For instance, new kernels/ops can be added to TensorFlow using TensorFlow plugin mechanism (load_library)</p>", "body_text": "I agree that it would be useful to community. I think perhaps someone who has recently gone through the process might be motivated to put the important things together into a nice guide.\nSome snippets from my development notes:\nmaking a PR: https://gist.github.com/yaroslavvb/bdb0a92f2a516ebbe2d386c48f5e2c45\n\nlicense\n\nYou must sign CLA agreement. See comments from Chris DiBona for why this license was chosen -- https://www.reddit.com/r/MachineLearning/comments/3s4qpm/google_tensorflow_released/\nIf you created your commits with a wrong address (ie, default one git sets up), you have to rewrite your commit history to change your address to the one that corresponds to the one you signed CLA with. (github help pages a rewriting script that provded useful for this,  https://help.github.com/articles/changing-author-info/)\n\npylint\n\npip install pylint\nwget -O /tmp/pylintrc https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/tools/ci_build/pylintrc\npylint myfile.py --rcfile=/tmp/pylintrc\n\n\nbuildifier\n\nInstall https://github.com/bazelbuild/buildifier and running it over the BUILD file to fix any formatting issues\n\nclang format\nTo see style corrections suggested by clang-format\n\nbrew install clang-format\nclang-format tensorflow/stream_executor/cuda/cuda_diagnostics.cc --style=google > /tmp/cuda_diagnostics.cc\ndiff tensorflow/stream_executor/cuda/cuda_diagnostics.cc /tmp/cuda_diagnostics.cc\n\n\n\nRunning tests\n\nUse bazel test. To see pip install requirements,  check in tensorflow/tools/ci_build/install/install_pip_packages.sh\nMost recently this meant doing this\npip install -I --upgrade setuptools\npip install portpicker\npip install mock\npip install pep8\npip install pylint\npip install py-cpuinfo\npip install pandas==0.18.1\npip install wheel\npip install --upgrade six==1.10.0\npip install --upgrade werkzeug==0.11.10\npip install --upgrade protobuf==3.0.0\n\n\nThen on Ubuntu:\nexport LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\n\nexport flags=\"--config=opt --config=cuda -k\"\nbazel test $flags //tensorflow/python/...\n\nOn MacOS: (bazel needs to be explicitly told to pass env vars for some reason)\nexport CUDA_HOME=/usr/local/cuda\nexport DYLD_LIBRARY_PATH=/usr/local/cuda/lib:/usr/local/cuda/extras/CUPTI/lib\nexport LD_LIBRARY_PATH=$DYLD_LIBRARY_PATH\nexport PATH=$DYLD_LIBRARY_PATH:$PATH\n\nexport flags=\"--config=cuda --config=opt -k --action_env PATH --action_env DYLD_LIBRARY_PATH --action_env LD_LIBRARY_PATH -k\"\nbazel test $flags //tensorflow/python/...\n\nFor changes to core framework\nbazel test $flags //tensorflow/... \nKeeping flags in $flags is important because if you you forget a flag, and do bazel run or bazel test with a new setting, it'll start building everything from scratch, aka 20+ mins of machine being semi-unresponsive.\nFor long running tests, tmux is useful for provide robustness against disconnection/closing terminal:\ntmux new -s bazel -n 0\nbazel test //tensorflow/...\n\n\nAlso, this to keep bazel from wiping its state overnight\necho \"startup --max_idle_secs=100000000\"  > ~/.bazelrc \nAlso, some notes on general philosophy of contributions -- when you contribute something to TensorFlow, the maintenance burden is transferred to the Google TensorFlow team. This means that benefit of contribution must be compared against the cost of maintaining that feature until the heat death of universe.\nHence there are cases when you want to extend functionality of TensorFlow, while remaining the owner/maintainer of this extension. This can be done by keeping extra functionality in a separate repo and using TensorFlow API to bring it in during runtime. For instance, new kernels/ops can be added to TensorFlow using TensorFlow plugin mechanism (load_library)", "body": "I agree that it would be useful to community. I think perhaps someone who has recently gone through the process might be motivated to put the important things together into a nice guide.\r\n\r\nSome snippets from my development notes:\r\n\r\nmaking a PR: https://gist.github.com/yaroslavvb/bdb0a92f2a516ebbe2d386c48f5e2c45\r\n\r\n- license\r\n\r\nYou must sign CLA agreement. See comments from Chris DiBona for why this license was chosen -- https://www.reddit.com/r/MachineLearning/comments/3s4qpm/google_tensorflow_released/\r\n\r\nIf you created your commits with a wrong address (ie, default one git sets up), you have to rewrite your commit history to change your address to the one that corresponds to the one you signed CLA with. (github help pages a rewriting script that provded useful for this,  https://help.github.com/articles/changing-author-info/)\r\n\r\n- pylint\r\n\r\n```\r\npip install pylint\r\nwget -O /tmp/pylintrc https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/tools/ci_build/pylintrc\r\npylint myfile.py --rcfile=/tmp/pylintrc\r\n```\r\n\r\n- buildifier\r\n\r\nInstall https://github.com/bazelbuild/buildifier and running it over the BUILD file to fix any formatting issues\r\n\r\n- clang format\r\nTo see style corrections suggested by `clang-format`\r\n\r\n```\r\nbrew install clang-format\r\nclang-format tensorflow/stream_executor/cuda/cuda_diagnostics.cc --style=google > /tmp/cuda_diagnostics.cc\r\ndiff tensorflow/stream_executor/cuda/cuda_diagnostics.cc /tmp/cuda_diagnostics.cc\r\n\r\n```\r\n- Running tests\r\n\r\nUse `bazel test`. To see pip install requirements,  check in tensorflow/tools/ci_build/install/install_pip_packages.sh\r\n\r\nMost recently this meant doing this\r\n\r\n```\r\npip install -I --upgrade setuptools\r\npip install portpicker\r\npip install mock\r\npip install pep8\r\npip install pylint\r\npip install py-cpuinfo\r\npip install pandas==0.18.1\r\npip install wheel\r\npip install --upgrade six==1.10.0\r\npip install --upgrade werkzeug==0.11.10\r\npip install --upgrade protobuf==3.0.0\r\n\r\n```\r\n\r\nThen on Ubuntu:\r\n```\r\nexport LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH\"\r\n\r\nexport flags=\"--config=opt --config=cuda -k\"\r\nbazel test $flags //tensorflow/python/...\r\n```\r\n\r\nOn MacOS: (bazel needs to be explicitly told to pass env vars for some reason)\r\n```\r\nexport CUDA_HOME=/usr/local/cuda\r\nexport DYLD_LIBRARY_PATH=/usr/local/cuda/lib:/usr/local/cuda/extras/CUPTI/lib\r\nexport LD_LIBRARY_PATH=$DYLD_LIBRARY_PATH\r\nexport PATH=$DYLD_LIBRARY_PATH:$PATH\r\n\r\nexport flags=\"--config=cuda --config=opt -k --action_env PATH --action_env DYLD_LIBRARY_PATH --action_env LD_LIBRARY_PATH -k\"\r\nbazel test $flags //tensorflow/python/...\r\n```\r\n\r\nFor changes to core framework\r\n`bazel test $flags //tensorflow/...\r\n`\r\n\r\nKeeping flags in $flags is important because if you you forget a flag, and do `bazel run` or `bazel test` with a new setting, it'll start building everything from scratch, aka 20+ mins of machine being semi-unresponsive.\r\n\r\nFor long running tests, tmux is useful for provide robustness against disconnection/closing terminal:\r\n```\r\ntmux new -s bazel -n 0\r\nbazel test //tensorflow/...\r\n\r\n```\r\nAlso, this to keep bazel from wiping its state overnight \r\n\r\n`echo \"startup --max_idle_secs=100000000\"  > ~/.bazelrc\r\n`\r\n\r\nAlso, some notes on general philosophy of contributions -- when you contribute something to TensorFlow, the maintenance burden is transferred to the Google TensorFlow team. This means that benefit of contribution must be compared against the cost of maintaining that feature until the heat death of universe.\r\n\r\nHence there are cases when you want to extend functionality of TensorFlow, while remaining the owner/maintainer of this extension. This can be done by keeping extra functionality in a separate repo and using TensorFlow API to bring it in during runtime. For instance, new kernels/ops can be added to TensorFlow using TensorFlow plugin mechanism (load_library)"}