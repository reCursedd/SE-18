{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13202", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13202/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13202/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13202/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13202", "id": 259366966, "node_id": "MDU6SXNzdWUyNTkzNjY5NjY=", "number": 13202, "title": "tf.InteractiveSession leaks sessions", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 23, "created_at": "2017-09-21T03:44:15Z", "updated_at": "2018-04-02T04:20:17Z", "closed_at": "2018-04-02T04:20:16Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The following works fine with tf.Session() but will fail to release resources in tf.InteractiveSession</p>\n<pre><code>sess = tf.InteractiveSession()\n# do stuff  \nsess.close()\ndel sess\n</code></pre>\n<p>The reason is that interactive session enters a context using <code>__enter()__</code> and never quits it, leaving a reference from a DefaultStack object. I found this when debugging why my notebook was hogging all GPU RAM.</p>\n<p>The two work-arounds:</p>\n<ol>\n<li>Force C_API to close the session using <code>sess.__del__()</code></li>\n<li>Get rid of the dangling reference</li>\n</ol>\n<pre><code>    sess._default_session.__exit__(None, None, None)\n    del sess\n    import gc\n    gc.collect()\n</code></pre>\n<p>I think a better solution would be to have <code>sess.close()</code> call both <code>TF_CloseSession</code> and <code>TF_DeleteSession</code>, or have a method that will reset all sessions like <code>session_lib.Reset</code></p>", "body_text": "The following works fine with tf.Session() but will fail to release resources in tf.InteractiveSession\nsess = tf.InteractiveSession()\n# do stuff  \nsess.close()\ndel sess\n\nThe reason is that interactive session enters a context using __enter()__ and never quits it, leaving a reference from a DefaultStack object. I found this when debugging why my notebook was hogging all GPU RAM.\nThe two work-arounds:\n\nForce C_API to close the session using sess.__del__()\nGet rid of the dangling reference\n\n    sess._default_session.__exit__(None, None, None)\n    del sess\n    import gc\n    gc.collect()\n\nI think a better solution would be to have sess.close() call both TF_CloseSession and TF_DeleteSession, or have a method that will reset all sessions like session_lib.Reset", "body": "The following works fine with tf.Session() but will fail to release resources in tf.InteractiveSession\r\n\r\n```\r\nsess = tf.InteractiveSession()\r\n# do stuff  \r\nsess.close()\r\ndel sess\r\n```\r\nThe reason is that interactive session enters a context using `__enter()__` and never quits it, leaving a reference from a DefaultStack object. I found this when debugging why my notebook was hogging all GPU RAM.\r\n\r\nThe two work-arounds:\r\n1. Force C_API to close the session using `sess.__del__()`\r\n2. Get rid of the dangling reference\r\n\r\n```\r\n    sess._default_session.__exit__(None, None, None)\r\n    del sess\r\n    import gc\r\n    gc.collect()\r\n```\r\n\r\nI think a better solution would be to have `sess.close()` call both `TF_CloseSession` and `TF_DeleteSession`, or have a method that will reset all sessions like `session_lib.Reset`"}