{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/331219805", "html_url": "https://github.com/tensorflow/tensorflow/issues/13202#issuecomment-331219805", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13202", "id": 331219805, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTIxOTgwNQ==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-21T17:04:15Z", "updated_at": "2017-09-21T17:04:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16101605\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/PhilJd\">@PhilJd</a> that's a different issue -- the memory allocator is global to the process, so it will keep the memory allocated even if the session gets closed.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> indeed that method gets called, but somehow session doesn't get garbage collected. I assumed DefaultStack was to blame by looking at <code>gc.get_referrers(sess)</code></p>\n<p>CPython is supposed to call <code>__del__</code> immediately after ref-count gets decremented to 0, and somehow it doesn't. Adding <code>import gc; gc.collect()</code> after <code>__exit__</code> seems to remove the leak as well</p>\n<p>Repro: <a href=\"https://github.com/yaroslavvb/stuff/blob/master/resnet_leak_report.py\">https://github.com/yaroslavvb/stuff/blob/master/resnet_leak_report.py</a><br>\nWhen I run it, I see</p>\n<pre><code>Run 0, GB's in use 2.1\nRun 1, GB's in use 3.4\nRun 2, GB's in use 5.0\n&lt;OOM crash&gt;\n\nCalling __del__\nCalling __del__\nCalling __del__\n</code></pre>\n<p>I'll update this issue if I find why CPython doesn't call del</p>", "body_text": "@PhilJd that's a different issue -- the memory allocator is global to the process, so it will keep the memory allocated even if the session gets closed.\n@mrry indeed that method gets called, but somehow session doesn't get garbage collected. I assumed DefaultStack was to blame by looking at gc.get_referrers(sess)\nCPython is supposed to call __del__ immediately after ref-count gets decremented to 0, and somehow it doesn't. Adding import gc; gc.collect() after __exit__ seems to remove the leak as well\nRepro: https://github.com/yaroslavvb/stuff/blob/master/resnet_leak_report.py\nWhen I run it, I see\nRun 0, GB's in use 2.1\nRun 1, GB's in use 3.4\nRun 2, GB's in use 5.0\n<OOM crash>\n\nCalling __del__\nCalling __del__\nCalling __del__\n\nI'll update this issue if I find why CPython doesn't call del", "body": "@PhilJd that's a different issue -- the memory allocator is global to the process, so it will keep the memory allocated even if the session gets closed.\r\n\r\n@mrry indeed that method gets called, but somehow session doesn't get garbage collected. I assumed DefaultStack was to blame by looking at `gc.get_referrers(sess)`\r\n\r\nCPython is supposed to call `__del__` immediately after ref-count gets decremented to 0, and somehow it doesn't. Adding `import gc; gc.collect()` after `__exit__` seems to remove the leak as well\r\n\r\nRepro: https://github.com/yaroslavvb/stuff/blob/master/resnet_leak_report.py\r\nWhen I run it, I see\r\n\r\n```\r\nRun 0, GB's in use 2.1\r\nRun 1, GB's in use 3.4\r\nRun 2, GB's in use 5.0\r\n<OOM crash>\r\n\r\nCalling __del__\r\nCalling __del__\r\nCalling __del__\r\n```\r\n\r\nI'll update this issue if I find why CPython doesn't call del"}