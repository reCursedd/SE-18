{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/291722113", "html_url": "https://github.com/tensorflow/tensorflow/issues/8962#issuecomment-291722113", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8962", "id": 291722113, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTcyMjExMw==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-05T02:27:57Z", "updated_at": "2017-04-05T02:27:57Z", "author_association": "CONTRIBUTOR", "body_html": "<div class=\"email-fragment\">I see. I'm currently developing a Scala API and that's what I was thinking of doing (i.e., independent management of collections). However, I was wondering what would be the right way to serialize the graph so that it can also be imported in the Python API and contain the same information. You are implying I should be using the MetaGraphDef protocol buffer and the saved model format used in the Python API, right?\n\nIn terms of design, wouldn't it make more sense to make collections part of the GraphDef and add functions for manipulating them in the C API?</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Apr 4, 2017, 8:50 PM -0400, Asim Shankar ***@***.***&gt;, wrote:\n\n You are correct in that graph collections in the Graph class in Python (which make it to the MetaGraphDef protocol buffer, which in turn is exported in the saved model format (TF_LoadSessionFromSavedModel)) are not part of the C API - users will have to write their own collection management on top of the existing primitives.\n\n\n Contributions are welcome (though perhaps want to discuss design a bit before pursuing it)\n\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"219379782\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/8962\" href=\"https://github.com/tensorflow/tensorflow/issues/8962#issuecomment-291693274\">#8962 (comment)</a>), or mute the thread (<a href=\"https://github.com/notifications/unsubscribe-auth/ABPCXCeQ4FYq9icePDBm-6Ls4iJiYXdOks5rsuVfgaJpZM4MzagI\">https://github.com/notifications/unsubscribe-auth/ABPCXCeQ4FYq9icePDBm-6Ls4iJiYXdOks5rsuVfgaJpZM4MzagI</a>).\n\n\n</div>\n<div class=\"email-fragment\"></div>\n</div>", "body_text": "I see. I'm currently developing a Scala API and that's what I was thinking of doing (i.e., independent management of collections). However, I was wondering what would be the right way to serialize the graph so that it can also be imported in the Python API and contain the same information. You are implying I should be using the MetaGraphDef protocol buffer and the saved model format used in the Python API, right?\n\nIn terms of design, wouldn't it make more sense to make collections part of the GraphDef and add functions for manipulating them in the C API?\n\u2026\nOn Apr 4, 2017, 8:50 PM -0400, Asim Shankar ***@***.***>, wrote:\n\n You are correct in that graph collections in the Graph class in Python (which make it to the MetaGraphDef protocol buffer, which in turn is exported in the saved model format (TF_LoadSessionFromSavedModel)) are not part of the C API - users will have to write their own collection management on top of the existing primitives.\n\n\n Contributions are welcome (though perhaps want to discuss design a bit before pursuing it)\n\n\n \u2014\n You are receiving this because you authored the thread.\n Reply to this email directly, view it on GitHub (#8962 (comment)), or mute the thread (https://github.com/notifications/unsubscribe-auth/ABPCXCeQ4FYq9icePDBm-6Ls4iJiYXdOks5rsuVfgaJpZM4MzagI).", "body": "I see. I'm currently developing a Scala API and that's what I was thinking of doing (i.e., independent management of collections). However, I was wondering what would be the right way to serialize the graph so that it can also be imported in the Python API and contain the same information. You are implying I should be using the MetaGraphDef protocol buffer and the saved model format used in the Python API, right?\n\nIn terms of design, wouldn't it make more sense to make collections part of the GraphDef and add functions for manipulating them in the C API?\n\nOn Apr 4, 2017, 8:50 PM -0400, Asim Shankar <notifications@github.com>, wrote:\n>\n> You are correct in that graph collections in the Graph class in Python (which make it to the MetaGraphDef protocol buffer, which in turn is exported in the saved model format (TF_LoadSessionFromSavedModel)) are not part of the C API - users will have to write their own collection management on top of the existing primitives.\n>\n>\n> Contributions are welcome (though perhaps want to discuss design a bit before pursuing it)\n>\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub (https://github.com/tensorflow/tensorflow/issues/8962#issuecomment-291693274), or mute the thread (https://github.com/notifications/unsubscribe-auth/ABPCXCeQ4FYq9icePDBm-6Ls4iJiYXdOks5rsuVfgaJpZM4MzagI).\n>\n>\n>\n\n"}