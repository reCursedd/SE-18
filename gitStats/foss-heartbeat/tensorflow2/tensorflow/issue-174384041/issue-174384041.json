{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4135", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4135/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4135/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4135/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4135", "id": 174384041, "node_id": "MDU6SXNzdWUxNzQzODQwNDE=", "number": 4135, "title": "Seg fault when computing gradient of 3D convolution filter with (1,1,1) kernel", "user": {"login": "kevin-keraudren", "id": 802153, "node_id": "MDQ6VXNlcjgwMjE1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/802153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevin-keraudren", "html_url": "https://github.com/kevin-keraudren", "followers_url": "https://api.github.com/users/kevin-keraudren/followers", "following_url": "https://api.github.com/users/kevin-keraudren/following{/other_user}", "gists_url": "https://api.github.com/users/kevin-keraudren/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevin-keraudren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevin-keraudren/subscriptions", "organizations_url": "https://api.github.com/users/kevin-keraudren/orgs", "repos_url": "https://api.github.com/users/kevin-keraudren/repos", "events_url": "https://api.github.com/users/kevin-keraudren/events{/privacy}", "received_events_url": "https://api.github.com/users/kevin-keraudren/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "mjanusz", "id": 328443, "node_id": "MDQ6VXNlcjMyODQ0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/328443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjanusz", "html_url": "https://github.com/mjanusz", "followers_url": "https://api.github.com/users/mjanusz/followers", "following_url": "https://api.github.com/users/mjanusz/following{/other_user}", "gists_url": "https://api.github.com/users/mjanusz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjanusz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjanusz/subscriptions", "organizations_url": "https://api.github.com/users/mjanusz/orgs", "repos_url": "https://api.github.com/users/mjanusz/repos", "events_url": "https://api.github.com/users/mjanusz/events{/privacy}", "received_events_url": "https://api.github.com/users/mjanusz/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mjanusz", "id": 328443, "node_id": "MDQ6VXNlcjMyODQ0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/328443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjanusz", "html_url": "https://github.com/mjanusz", "followers_url": "https://api.github.com/users/mjanusz/followers", "following_url": "https://api.github.com/users/mjanusz/following{/other_user}", "gists_url": "https://api.github.com/users/mjanusz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjanusz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjanusz/subscriptions", "organizations_url": "https://api.github.com/users/mjanusz/orgs", "repos_url": "https://api.github.com/users/mjanusz/repos", "events_url": "https://api.github.com/users/mjanusz/events{/privacy}", "received_events_url": "https://api.github.com/users/mjanusz/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2016-08-31T21:31:33Z", "updated_at": "2017-02-09T22:02:08Z", "closed_at": "2017-01-27T18:13:25Z", "author_association": "NONE", "body_html": "<p>Minimal example to reproduce the bug:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nsess <span class=\"pl-k\">=</span> tf.Session()\n<span class=\"pl-k\">with</span> sess.as_default():\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Input: [batch, height, width, depth, input_channels]</span>\n    x_shape <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">85</span>, <span class=\"pl-c1\">65</span>, <span class=\"pl-c1\">83</span>, <span class=\"pl-c1\">8</span>]\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Filter: [kernel_height, kernel_width, depth, input_channels, output_channels]</span>\n    f_shape <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, x_shape[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>], <span class=\"pl-c1\">32</span>]\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Output: [batch, height, width, depth, output_channels]</span>\n    y_shape <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">85</span>, <span class=\"pl-c1\">65</span>, <span class=\"pl-c1\">83</span>, f_shape[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>]]\n\n    np.random.seed(<span class=\"pl-c1\">1</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Make it reproducible.</span>\n    x_val <span class=\"pl-k\">=</span> np.random.random_sample(x_shape).astype(np.float32)\n    f_val <span class=\"pl-k\">=</span> np.random.random_sample(f_shape).astype(np.float32)\n    output_val <span class=\"pl-k\">=</span> np.random.random_sample(y_shape).astype(np.float32)\n    x <span class=\"pl-k\">=</span> tf.constant(x_val, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n    f <span class=\"pl-k\">=</span> tf.constant(f_val, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>f<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n\n    output <span class=\"pl-k\">=</span> tf.nn.conv3d(x, f, <span class=\"pl-v\">strides</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>), <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>SAME<span class=\"pl-pds\">\"</span></span>)\n\n    r <span class=\"pl-k\">=</span> tf.gradients(output, f)\n    <span class=\"pl-c1\">print</span>(r[<span class=\"pl-c1\">0</span>].eval())</pre></div>\n<p>this leads to a seg fault, tested on a Mac with CPU, both with tensorflow 0.9.0 (binary release) and when compiled from source (last commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/ad4f02a69162abe5d242b7d94f62138849aec9ab/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/ad4f02a69162abe5d242b7d94f62138849aec9ab\"><tt>ad4f02a</tt></a> ).</p>\n<p>For certain values of <code>(x_shape[\u20131], f_shape[-1])</code>, for instance (2,4) or (8,32), the seg fault occurs, but for other values (2,2) or (16,32), there is no seg fault.</p>\n<p>Inserting some <code>std::cout &lt;&lt;</code> print statements in the code shows that the segmentation fault occurs during this function call in Conv3DBackpropFilterOp::Compute <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/conv_grad_ops_3d.cc#L315\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/conv_grad_ops_3d.cc#L315</a></p>", "body_text": "Minimal example to reproduce the bug:\nimport numpy as np\nimport tensorflow as tf\n\nsess = tf.Session()\nwith sess.as_default():\n    # Input: [batch, height, width, depth, input_channels]\n    x_shape = [3, 85, 65, 83, 8]\n    # Filter: [kernel_height, kernel_width, depth, input_channels, output_channels]\n    f_shape = [1, 1, 1, x_shape[-1], 32]\n    # Output: [batch, height, width, depth, output_channels]\n    y_shape = [3, 85, 65, 83, f_shape[-1]]\n\n    np.random.seed(1)  # Make it reproducible.\n    x_val = np.random.random_sample(x_shape).astype(np.float32)\n    f_val = np.random.random_sample(f_shape).astype(np.float32)\n    output_val = np.random.random_sample(y_shape).astype(np.float32)\n    x = tf.constant(x_val, name=\"x\", dtype=tf.float32)\n    f = tf.constant(f_val, name=\"f\", dtype=tf.float32)\n\n    output = tf.nn.conv3d(x, f, strides=(1,1,1,1,1), padding=\"SAME\")\n\n    r = tf.gradients(output, f)\n    print(r[0].eval())\nthis leads to a seg fault, tested on a Mac with CPU, both with tensorflow 0.9.0 (binary release) and when compiled from source (last commit ad4f02a ).\nFor certain values of (x_shape[\u20131], f_shape[-1]), for instance (2,4) or (8,32), the seg fault occurs, but for other values (2,2) or (16,32), there is no seg fault.\nInserting some std::cout << print statements in the code shows that the segmentation fault occurs during this function call in Conv3DBackpropFilterOp::Compute https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/conv_grad_ops_3d.cc#L315", "body": "Minimal example to reproduce the bug:\n\n``` python\nimport numpy as np\nimport tensorflow as tf\n\nsess = tf.Session()\nwith sess.as_default():\n    # Input: [batch, height, width, depth, input_channels]\n    x_shape = [3, 85, 65, 83, 8]\n    # Filter: [kernel_height, kernel_width, depth, input_channels, output_channels]\n    f_shape = [1, 1, 1, x_shape[-1], 32]\n    # Output: [batch, height, width, depth, output_channels]\n    y_shape = [3, 85, 65, 83, f_shape[-1]]\n\n    np.random.seed(1)  # Make it reproducible.\n    x_val = np.random.random_sample(x_shape).astype(np.float32)\n    f_val = np.random.random_sample(f_shape).astype(np.float32)\n    output_val = np.random.random_sample(y_shape).astype(np.float32)\n    x = tf.constant(x_val, name=\"x\", dtype=tf.float32)\n    f = tf.constant(f_val, name=\"f\", dtype=tf.float32)\n\n    output = tf.nn.conv3d(x, f, strides=(1,1,1,1,1), padding=\"SAME\")\n\n    r = tf.gradients(output, f)\n    print(r[0].eval())\n```\n\nthis leads to a seg fault, tested on a Mac with CPU, both with tensorflow 0.9.0 (binary release) and when compiled from source (last commit https://github.com/tensorflow/tensorflow/commit/ad4f02a69162abe5d242b7d94f62138849aec9ab ).\n\nFor certain values of `(x_shape[\u20131], f_shape[-1])`, for instance (2,4) or (8,32), the seg fault occurs, but for other values (2,2) or (16,32), there is no seg fault.\n\nInserting some `std::cout <<` print statements in the code shows that the segmentation fault occurs during this function call in Conv3DBackpropFilterOp::Compute https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/conv_grad_ops_3d.cc#L315\n"}