{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11815", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11815/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11815/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11815/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11815", "id": 246033040, "node_id": "MDU6SXNzdWUyNDYwMzMwNDA=", "number": 11815, "title": "tf.contrib.data.Iterator - Continue from dataset with reinitializable iterator.", "user": {"login": "cheind", "id": 38565, "node_id": "MDQ6VXNlcjM4NTY1", "avatar_url": "https://avatars0.githubusercontent.com/u/38565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cheind", "html_url": "https://github.com/cheind", "followers_url": "https://api.github.com/users/cheind/followers", "following_url": "https://api.github.com/users/cheind/following{/other_user}", "gists_url": "https://api.github.com/users/cheind/gists{/gist_id}", "starred_url": "https://api.github.com/users/cheind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cheind/subscriptions", "organizations_url": "https://api.github.com/users/cheind/orgs", "repos_url": "https://api.github.com/users/cheind/repos", "events_url": "https://api.github.com/users/cheind/events{/privacy}", "received_events_url": "https://api.github.com/users/cheind/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-27T13:05:55Z", "updated_at": "2017-07-27T15:10:15Z", "closed_at": "2017-07-27T15:10:14Z", "author_association": "NONE", "body_html": "<p>I'd like to request the following feature. In TF 1.3.0rc0 and probably before the reinitializable iterator can be used to switch between dataset sources as shown <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/docs_src/programmers_guide/datasets.md\">here</a>. This is great for switching between train and test data, but has a nasty side-effect: when reinitializing the iterator the iteration starts from the beginning of the dataset. Therefore, switching the dataset between epoch (i.e do a validation run every 100 iterations or so) causes the epoch to never finish. Moreover, training will only ever use the first 100 batches (except you have a huge shuffle buffer size) of the dataset.</p>\n<p>The following illustrates the problem</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\na <span class=\"pl-k\">=</span> tf.contrib.data.Dataset.range(<span class=\"pl-c1\">50</span>)\nb <span class=\"pl-k\">=</span> tf.contrib.data.Dataset.range(<span class=\"pl-c1\">50</span>)\n\niterator <span class=\"pl-k\">=</span> tf.contrib.data.Iterator.from_structure(a.output_types, a.output_shapes)\nnext_element <span class=\"pl-k\">=</span> iterator.get_next()\n\na_init_op <span class=\"pl-k\">=</span> iterator.make_initializer(a)\nb_init_op <span class=\"pl-k\">=</span> iterator.make_initializer(b)\n\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run(a_init_op)\nsess.run(next_element) \n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 0</span>\nsess.run(next_element) \n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 1</span>\n\nsess.run(b_init_op)\nsess.run(next_element) \nsess.run(next_element) \n\nsess.run(a_init_op)\nsess.run(next_element) \n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 0  &lt;- rather expect 2</span>\nsess.run(next_element) \n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 1 &lt;- rather expect 3</span></pre></div>\n<p>I'd like to request a reinitializable iterator that maintains the state of the dataset and continues from where it left off. Something along the lines</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> ... Same as above</span>\n\na_init_op, a_continue_op <span class=\"pl-k\">=</span> iterator.make_initializer(a)\n\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run(a_init_op)\nsess.run(next_element) <span class=\"pl-c\"><span class=\"pl-c\">#</span> 0</span>\n\nsess.run(b_init_op)\nsess.run(next_element) \n\nsess.run(a_continue_op)\nsess.run(next_element) <span class=\"pl-c\"><span class=\"pl-c\">#</span> 1</span></pre></div>", "body_text": "I'd like to request the following feature. In TF 1.3.0rc0 and probably before the reinitializable iterator can be used to switch between dataset sources as shown here. This is great for switching between train and test data, but has a nasty side-effect: when reinitializing the iterator the iteration starts from the beginning of the dataset. Therefore, switching the dataset between epoch (i.e do a validation run every 100 iterations or so) causes the epoch to never finish. Moreover, training will only ever use the first 100 batches (except you have a huge shuffle buffer size) of the dataset.\nThe following illustrates the problem\nimport tensorflow as tf\n\na = tf.contrib.data.Dataset.range(50)\nb = tf.contrib.data.Dataset.range(50)\n\niterator = tf.contrib.data.Iterator.from_structure(a.output_types, a.output_shapes)\nnext_element = iterator.get_next()\n\na_init_op = iterator.make_initializer(a)\nb_init_op = iterator.make_initializer(b)\n\nsess = tf.Session()\nsess.run(a_init_op)\nsess.run(next_element) \n# 0\nsess.run(next_element) \n# 1\n\nsess.run(b_init_op)\nsess.run(next_element) \nsess.run(next_element) \n\nsess.run(a_init_op)\nsess.run(next_element) \n# 0  <- rather expect 2\nsess.run(next_element) \n# 1 <- rather expect 3\nI'd like to request a reinitializable iterator that maintains the state of the dataset and continues from where it left off. Something along the lines\n# ... Same as above\n\na_init_op, a_continue_op = iterator.make_initializer(a)\n\nsess = tf.Session()\nsess.run(a_init_op)\nsess.run(next_element) # 0\n\nsess.run(b_init_op)\nsess.run(next_element) \n\nsess.run(a_continue_op)\nsess.run(next_element) # 1", "body": "I'd like to request the following feature. In TF 1.3.0rc0 and probably before the reinitializable iterator can be used to switch between dataset sources as shown [here](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/docs_src/programmers_guide/datasets.md). This is great for switching between train and test data, but has a nasty side-effect: when reinitializing the iterator the iteration starts from the beginning of the dataset. Therefore, switching the dataset between epoch (i.e do a validation run every 100 iterations or so) causes the epoch to never finish. Moreover, training will only ever use the first 100 batches (except you have a huge shuffle buffer size) of the dataset. \r\n\r\nThe following illustrates the problem\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\na = tf.contrib.data.Dataset.range(50)\r\nb = tf.contrib.data.Dataset.range(50)\r\n\r\niterator = tf.contrib.data.Iterator.from_structure(a.output_types, a.output_shapes)\r\nnext_element = iterator.get_next()\r\n\r\na_init_op = iterator.make_initializer(a)\r\nb_init_op = iterator.make_initializer(b)\r\n\r\nsess = tf.Session()\r\nsess.run(a_init_op)\r\nsess.run(next_element) \r\n# 0\r\nsess.run(next_element) \r\n# 1\r\n\r\nsess.run(b_init_op)\r\nsess.run(next_element) \r\nsess.run(next_element) \r\n\r\nsess.run(a_init_op)\r\nsess.run(next_element) \r\n# 0  <- rather expect 2\r\nsess.run(next_element) \r\n# 1 <- rather expect 3\r\n```\r\n\r\nI'd like to request a reinitializable iterator that maintains the state of the dataset and continues from where it left off. Something along the lines\r\n\r\n```python\r\n# ... Same as above\r\n\r\na_init_op, a_continue_op = iterator.make_initializer(a)\r\n\r\nsess = tf.Session()\r\nsess.run(a_init_op)\r\nsess.run(next_element) # 0\r\n\r\nsess.run(b_init_op)\r\nsess.run(next_element) \r\n\r\nsess.run(a_continue_op)\r\nsess.run(next_element) # 1\r\n```"}