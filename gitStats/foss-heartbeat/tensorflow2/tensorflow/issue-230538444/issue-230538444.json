{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10118", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10118/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10118/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10118/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10118", "id": 230538444, "node_id": "MDU6SXNzdWUyMzA1Mzg0NDQ=", "number": 10118, "title": "Incorrect behavior from `tf.layers.batch_normalization()` when `training=0`", "user": {"login": "zo7", "id": 3229244, "node_id": "MDQ6VXNlcjMyMjkyNDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3229244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zo7", "html_url": "https://github.com/zo7", "followers_url": "https://api.github.com/users/zo7/followers", "following_url": "https://api.github.com/users/zo7/following{/other_user}", "gists_url": "https://api.github.com/users/zo7/gists{/gist_id}", "starred_url": "https://api.github.com/users/zo7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zo7/subscriptions", "organizations_url": "https://api.github.com/users/zo7/orgs", "repos_url": "https://api.github.com/users/zo7/repos", "events_url": "https://api.github.com/users/zo7/events{/privacy}", "received_events_url": "https://api.github.com/users/zo7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-05-22T22:36:40Z", "updated_at": "2017-10-26T00:10:32Z", "closed_at": "2017-05-23T20:54:58Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip</li>\n<li><strong>TensorFlow version (use command below)</strong>: ('v1.1.0-rc0-61-g1ec6ed5', '1.1.0')</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: 8/5</li>\n<li><strong>GPU model and memory</strong>: Nvidia Titan X</li>\n<li><strong>Exact command to reproduce</strong>: <a href=\"https://gist.github.com/zo7/87735a3f06a41e0f2b3c10f9950d07a3\">gist</a></li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I've noticed that <code>tf.layers.batch_normalization</code> doesn't seem to give reasonable results when <code>training=0</code> (i.e. use distribution statistics instead of just the batch), especially if you apply BN <em>before</em> activations (e.g. ResNet-like architectures).</p>\n<p>Using the Gist above, if you try to fit a model to noise with SGD (lr=0.01) using repeated applications of dense matrix multiplication -&gt; batch normalization -&gt; ReLU activations, you get this loss for the <em>same</em> inputs over time: (blue: <code>training=1</code>, green: <code>training=0</code>)</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/3229244/26330609/9f3fa0ca-3f01-11e7-8f73-81d67e64be97.png\"><img src=\"https://cloud.githubusercontent.com/assets/3229244/26330609/9f3fa0ca-3f01-11e7-8f73-81d67e64be97.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>\n<p>Using an Adam (lr=0.001) optimizer instead gets even weirder results:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/3229244/26330754/49c94eb0-3f02-11e7-9ff6-7d48ad471ea2.png\"><img src=\"https://cloud.githubusercontent.com/assets/3229244/26330754/49c94eb0-3f02-11e7-9ff6-7d48ad471ea2.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>\n<p>However, if I use my own implementation of batch norm (included in gist) I get reasonable results, with the loss for each being similar to each other: (Adam has similar behavior)</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/3229244/26330911/1922c81c-3f03-11e7-86bf-56f0e38e3ff3.png\"><img src=\"https://cloud.githubusercontent.com/assets/3229244/26330911/1922c81c-3f03-11e7-86bf-56f0e38e3ff3.png\" alt=\"image\" style=\"max-width:100%;\"></a></p>\n<p>(Interestingly this doesn't seem to be as much of a problem if you have ReLU before BN, I haven't thought too deeply about why.)</p>\n<p>Am I seeing things and just have some misunderstanding about what that function is doing, or is this actually a bug?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16\nTensorFlow installed from (source or binary): pip\nTensorFlow version (use command below): ('v1.1.0-rc0-61-g1ec6ed5', '1.1.0')\nBazel version (if compiling from source): N/A\nCUDA/cuDNN version: 8/5\nGPU model and memory: Nvidia Titan X\nExact command to reproduce: gist\n\nDescribe the problem\nI've noticed that tf.layers.batch_normalization doesn't seem to give reasonable results when training=0 (i.e. use distribution statistics instead of just the batch), especially if you apply BN before activations (e.g. ResNet-like architectures).\nUsing the Gist above, if you try to fit a model to noise with SGD (lr=0.01) using repeated applications of dense matrix multiplication -> batch normalization -> ReLU activations, you get this loss for the same inputs over time: (blue: training=1, green: training=0)\n\nUsing an Adam (lr=0.001) optimizer instead gets even weirder results:\n\nHowever, if I use my own implementation of batch norm (included in gist) I get reasonable results, with the loss for each being similar to each other: (Adam has similar behavior)\n\n(Interestingly this doesn't seem to be as much of a problem if you have ReLU before BN, I haven't thought too deeply about why.)\nAm I seeing things and just have some misunderstanding about what that function is doing, or is this actually a bug?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16\r\n- **TensorFlow installed from (source or binary)**: pip\r\n- **TensorFlow version (use command below)**: ('v1.1.0-rc0-61-g1ec6ed5', '1.1.0')\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: 8/5\r\n- **GPU model and memory**: Nvidia Titan X \r\n- **Exact command to reproduce**: [gist](https://gist.github.com/zo7/87735a3f06a41e0f2b3c10f9950d07a3)\r\n\r\n### Describe the problem\r\n\r\nI've noticed that `tf.layers.batch_normalization` doesn't seem to give reasonable results when `training=0` (i.e. use distribution statistics instead of just the batch), especially if you apply BN *before* activations (e.g. ResNet-like architectures).\r\n\r\nUsing the Gist above, if you try to fit a model to noise with SGD (lr=0.01) using repeated applications of dense matrix multiplication -> batch normalization -> ReLU activations, you get this loss for the _same_ inputs over time: (blue: `training=1`, green: `training=0`)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/3229244/26330609/9f3fa0ca-3f01-11e7-8f73-81d67e64be97.png)\r\n\r\nUsing an Adam (lr=0.001) optimizer instead gets even weirder results:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/3229244/26330754/49c94eb0-3f02-11e7-9ff6-7d48ad471ea2.png)\r\n\r\nHowever, if I use my own implementation of batch norm (included in gist) I get reasonable results, with the loss for each being similar to each other: (Adam has similar behavior)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/3229244/26330911/1922c81c-3f03-11e7-86bf-56f0e38e3ff3.png)\r\n\r\n(Interestingly this doesn't seem to be as much of a problem if you have ReLU before BN, I haven't thought too deeply about why.)\r\n\r\nAm I seeing things and just have some misunderstanding about what that function is doing, or is this actually a bug?"}