{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22236", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22236/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22236/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22236/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22236", "id": 359435299, "node_id": "MDU6SXNzdWUzNTk0MzUyOTk=", "number": 22236, "title": "Error restoring checkpoint: BeamSearchDecoder", "user": {"login": "parajain", "id": 8446082, "node_id": "MDQ6VXNlcjg0NDYwODI=", "avatar_url": "https://avatars2.githubusercontent.com/u/8446082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parajain", "html_url": "https://github.com/parajain", "followers_url": "https://api.github.com/users/parajain/followers", "following_url": "https://api.github.com/users/parajain/following{/other_user}", "gists_url": "https://api.github.com/users/parajain/gists{/gist_id}", "starred_url": "https://api.github.com/users/parajain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parajain/subscriptions", "organizations_url": "https://api.github.com/users/parajain/orgs", "repos_url": "https://api.github.com/users/parajain/repos", "events_url": "https://api.github.com/users/parajain/events{/privacy}", "received_events_url": "https://api.github.com/users/parajain/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "karmel", "id": 667809, "node_id": "MDQ6VXNlcjY2NzgwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/667809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karmel", "html_url": "https://github.com/karmel", "followers_url": "https://api.github.com/users/karmel/followers", "following_url": "https://api.github.com/users/karmel/following{/other_user}", "gists_url": "https://api.github.com/users/karmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/karmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karmel/subscriptions", "organizations_url": "https://api.github.com/users/karmel/orgs", "repos_url": "https://api.github.com/users/karmel/repos", "events_url": "https://api.github.com/users/karmel/events{/privacy}", "received_events_url": "https://api.github.com/users/karmel/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "karmel", "id": 667809, "node_id": "MDQ6VXNlcjY2NzgwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/667809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karmel", "html_url": "https://github.com/karmel", "followers_url": "https://api.github.com/users/karmel/followers", "following_url": "https://api.github.com/users/karmel/following{/other_user}", "gists_url": "https://api.github.com/users/karmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/karmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karmel/subscriptions", "organizations_url": "https://api.github.com/users/karmel/orgs", "repos_url": "https://api.github.com/users/karmel/repos", "events_url": "https://api.github.com/users/karmel/events{/privacy}", "received_events_url": "https://api.github.com/users/karmel/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-09-12T11:22:39Z", "updated_at": "2018-09-14T23:15:30Z", "closed_at": "2018-09-14T23:15:30Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows7, CPU</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: NA</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip</li>\n<li><strong>TensorFlow version (use command below)</strong>: tf.VERSION = 1.10.0|tf.GIT_VERSION = b'v1.10.0-rc1-19-g656e7a2b34'| tf.COMPILER_VERSION = b'v1.10.0-rc1-19-g656e7a2b34'</li>\n<li><strong>Python version</strong>: Python 3.5.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: NA</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: NA</li>\n<li><strong>CUDA/cuDNN version</strong>: NA</li>\n<li><strong>GPU model and memory</strong>: NA</li>\n<li><strong>Exact command to reproduce</strong>: NA</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I am trying to load a model trained using basic decoder with train_ce=True and loading it with beamsearch with train_ws=True (like inference) but it fails during restore:</p>\n<pre><code>Traceback (most recent call last):\n  File \"train_ws.py\", line 502, in &lt;module&gt;\n    tf.app.run()\n  File \"C:\\ProgramData\\Miniconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\platform\\app.py\", line 125, in run\n    _sys.exit(main(argv))\n  File \"train_ws.py\", line 337, in main\n    saver.restore(sess, FLAGS.restore_path)\n  File \"C:\\ProgramData\\Miniconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1759, in restore\n    err, \"a mismatch between the current graph and the graph\")\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Restoring from checkpoint failed. This is most likely due to a mismatch between the current graph and the graph from the checkpoint. Please ensure that you have not altered the graph expected based on the checkpoint. Original error:\n\nInput 1 of node decoder/dynamic_decoder_out/decoder/while/Merge_7_1 was passed float from decoder/dynamic_decoder_out/decoder/while/NextIteration_7:0 incompatible with expected int32.\n</code></pre>\n<h3>Source code</h3>\n<pre><code>def inference_s2s_ce(self, encoder_inputs, decoder_inputs, encoder_inputs_lenghts, decoder_inputs_lenghts, feed_previous):\n    true_batch_size = tf.size(encoder_inputs_lenghts)\n    encoder_outputs, encoder_state = self.input_encoder(encoder_inputs)\n    print('encoder_state ', encoder_state)\n    attention_inputs = encoder_outputs # Not time major\n    #encoder_outputs = tf.transpose(encoder_outputs, [1, 0, 2]) # time major\n    if self.mode == 'train_ws':\n        attention_inputs = tf.contrib.seq2seq.tile_batch(encoder_outputs, multiplier=self.beam_width)\n        encoder_state = tf.contrib.seq2seq.tile_batch(encoder_state, multiplier=self.beam_width)\n        encoder_inputs_lenghts = tf.contrib.seq2seq.tile_batch(encoder_inputs_lenghts, multiplier=self.beam_width)  \n    with tf.variable_scope('decoder', reuse=tf.AUTO_REUSE) as scope:\n        decoder_cell = tf.contrib.rnn.LSTMCell(self.rnn_size,state_is_tuple=True)\n        embedding_decoder = variable_scope.get_variable(\"embedding_decoder\", [self.tgt_vocab_size, self.decoder_embedding_size])\n        decoder_emb_inp = tf.nn.embedding_lookup(embedding_decoder, decoder_inputs)\n        input_layer = Dense(self.rnn_size, dtype=self.dtype, name='input_projection')\n        decoder_emb_inp = input_layer(decoder_emb_inp)\n        attention_mechanism = tf.contrib.seq2seq.BahdanauAttention( num_units=self.rnn_size, memory=attention_inputs, \n        memory_sequence_length=encoder_inputs_lenghts)\n        attn_cell = tf.contrib.seq2seq.AttentionWrapper(decoder_cell, attention_mechanism)#, attention_layer_size= self.num_units / 2)\n        projection_layer = tf.layers.Dense(self.tgt_vocab_size, use_bias=False)\n        if self.mode == 'train_ce':\n            helper = tf.contrib.seq2seq.TrainingHelper(decoder_emb_inp, decoder_inputs_lenghts)#,  time_major=False)\n            decoder_initial_state = attn_cell.zero_state(true_batch_size, dtype=tf.float32).clone(cell_state=encoder_state)\n            decoder = tf.contrib.seq2seq.BasicDecoder(\n                cell=attn_cell, helper=helper,\n                initial_state=decoder_initial_state, \n                output_layer=projection_layer)\n            inference_decoder = decoder\n        elif self.mode == 'train_ws':\n            tgt_sos_id = 3\n            tgt_eos_id = 1\n            start_tokens = tf.tile(tf.constant([tgt_sos_id], dtype=tf.int32), [true_batch_size])\n            batch_size = true_batch_size * self.beam_width#tf.cast(true_batch_size * self.beam_width, dtype=tf.int32)\n            decoder_initial_state = attn_cell.zero_state(batch_size, tf.float32).clone(cell_state=encoder_state)\n            print('decoder_initial_state shape ', decoder_initial_state)\n            decoder = tf.contrib.seq2seq.BeamSearchDecoder(cell = attn_cell, embedding=embedding_decoder, start_tokens=start_tokens,\n            end_token=tgt_eos_id, initial_state=decoder_initial_state, beam_width=int(self.beam_width), output_layer=projection_layer)\n            inference_decoder = decoder\n        with tf.variable_scope('dynamic_decoder_out', reuse=tf.AUTO_REUSE) as scope:\n            outputs, _, _ = seq2seq.dynamic_decode(decoder=inference_decoder,output_time_major=False,maximum_iterations=self.output_max_length) \n            if self.mode == 'train_ce':\n                logits = outputs.rnn_output\n                print('Logits ', logits.get_shape())\n                return logits\n            elif self.mode == 'train_ws':\n                return outputs.beam_search_decoder_output.scores\n        \n</code></pre>\n<p>I have tried restoring basicdecoder, that works.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows7, CPU\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NA\nTensorFlow installed from (source or binary): pip\nTensorFlow version (use command below): tf.VERSION = 1.10.0|tf.GIT_VERSION = b'v1.10.0-rc1-19-g656e7a2b34'| tf.COMPILER_VERSION = b'v1.10.0-rc1-19-g656e7a2b34'\nPython version: Python 3.5.5\nBazel version (if compiling from source): NA\nGCC/Compiler version (if compiling from source): NA\nCUDA/cuDNN version: NA\nGPU model and memory: NA\nExact command to reproduce: NA\n\nDescribe the problem\nI am trying to load a model trained using basic decoder with train_ce=True and loading it with beamsearch with train_ws=True (like inference) but it fails during restore:\nTraceback (most recent call last):\n  File \"train_ws.py\", line 502, in <module>\n    tf.app.run()\n  File \"C:\\ProgramData\\Miniconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\platform\\app.py\", line 125, in run\n    _sys.exit(main(argv))\n  File \"train_ws.py\", line 337, in main\n    saver.restore(sess, FLAGS.restore_path)\n  File \"C:\\ProgramData\\Miniconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1759, in restore\n    err, \"a mismatch between the current graph and the graph\")\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Restoring from checkpoint failed. This is most likely due to a mismatch between the current graph and the graph from the checkpoint. Please ensure that you have not altered the graph expected based on the checkpoint. Original error:\n\nInput 1 of node decoder/dynamic_decoder_out/decoder/while/Merge_7_1 was passed float from decoder/dynamic_decoder_out/decoder/while/NextIteration_7:0 incompatible with expected int32.\n\nSource code\ndef inference_s2s_ce(self, encoder_inputs, decoder_inputs, encoder_inputs_lenghts, decoder_inputs_lenghts, feed_previous):\n    true_batch_size = tf.size(encoder_inputs_lenghts)\n    encoder_outputs, encoder_state = self.input_encoder(encoder_inputs)\n    print('encoder_state ', encoder_state)\n    attention_inputs = encoder_outputs # Not time major\n    #encoder_outputs = tf.transpose(encoder_outputs, [1, 0, 2]) # time major\n    if self.mode == 'train_ws':\n        attention_inputs = tf.contrib.seq2seq.tile_batch(encoder_outputs, multiplier=self.beam_width)\n        encoder_state = tf.contrib.seq2seq.tile_batch(encoder_state, multiplier=self.beam_width)\n        encoder_inputs_lenghts = tf.contrib.seq2seq.tile_batch(encoder_inputs_lenghts, multiplier=self.beam_width)  \n    with tf.variable_scope('decoder', reuse=tf.AUTO_REUSE) as scope:\n        decoder_cell = tf.contrib.rnn.LSTMCell(self.rnn_size,state_is_tuple=True)\n        embedding_decoder = variable_scope.get_variable(\"embedding_decoder\", [self.tgt_vocab_size, self.decoder_embedding_size])\n        decoder_emb_inp = tf.nn.embedding_lookup(embedding_decoder, decoder_inputs)\n        input_layer = Dense(self.rnn_size, dtype=self.dtype, name='input_projection')\n        decoder_emb_inp = input_layer(decoder_emb_inp)\n        attention_mechanism = tf.contrib.seq2seq.BahdanauAttention( num_units=self.rnn_size, memory=attention_inputs, \n        memory_sequence_length=encoder_inputs_lenghts)\n        attn_cell = tf.contrib.seq2seq.AttentionWrapper(decoder_cell, attention_mechanism)#, attention_layer_size= self.num_units / 2)\n        projection_layer = tf.layers.Dense(self.tgt_vocab_size, use_bias=False)\n        if self.mode == 'train_ce':\n            helper = tf.contrib.seq2seq.TrainingHelper(decoder_emb_inp, decoder_inputs_lenghts)#,  time_major=False)\n            decoder_initial_state = attn_cell.zero_state(true_batch_size, dtype=tf.float32).clone(cell_state=encoder_state)\n            decoder = tf.contrib.seq2seq.BasicDecoder(\n                cell=attn_cell, helper=helper,\n                initial_state=decoder_initial_state, \n                output_layer=projection_layer)\n            inference_decoder = decoder\n        elif self.mode == 'train_ws':\n            tgt_sos_id = 3\n            tgt_eos_id = 1\n            start_tokens = tf.tile(tf.constant([tgt_sos_id], dtype=tf.int32), [true_batch_size])\n            batch_size = true_batch_size * self.beam_width#tf.cast(true_batch_size * self.beam_width, dtype=tf.int32)\n            decoder_initial_state = attn_cell.zero_state(batch_size, tf.float32).clone(cell_state=encoder_state)\n            print('decoder_initial_state shape ', decoder_initial_state)\n            decoder = tf.contrib.seq2seq.BeamSearchDecoder(cell = attn_cell, embedding=embedding_decoder, start_tokens=start_tokens,\n            end_token=tgt_eos_id, initial_state=decoder_initial_state, beam_width=int(self.beam_width), output_layer=projection_layer)\n            inference_decoder = decoder\n        with tf.variable_scope('dynamic_decoder_out', reuse=tf.AUTO_REUSE) as scope:\n            outputs, _, _ = seq2seq.dynamic_decode(decoder=inference_decoder,output_time_major=False,maximum_iterations=self.output_max_length) \n            if self.mode == 'train_ce':\n                logits = outputs.rnn_output\n                print('Logits ', logits.get_shape())\n                return logits\n            elif self.mode == 'train_ws':\n                return outputs.beam_search_decoder_output.scores\n        \n\nI have tried restoring basicdecoder, that works.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows7, CPU \r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: NA\r\n- **TensorFlow installed from (source or binary)**: pip\r\n- **TensorFlow version (use command below)**: tf.VERSION = 1.10.0|tf.GIT_VERSION = b'v1.10.0-rc1-19-g656e7a2b34'| tf.COMPILER_VERSION = b'v1.10.0-rc1-19-g656e7a2b34'\r\n- **Python version**: Python 3.5.5\r\n- **Bazel version (if compiling from source)**: NA\r\n- **GCC/Compiler version (if compiling from source)**: NA\r\n- **CUDA/cuDNN version**: NA\r\n- **GPU model and memory**: NA\r\n- **Exact command to reproduce**: NA\r\n\r\n### Describe the problem\r\nI am trying to load a model trained using basic decoder with train_ce=True and loading it with beamsearch with train_ws=True (like inference) but it fails during restore:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"train_ws.py\", line 502, in <module>\r\n    tf.app.run()\r\n  File \"C:\\ProgramData\\Miniconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\platform\\app.py\", line 125, in run\r\n    _sys.exit(main(argv))\r\n  File \"train_ws.py\", line 337, in main\r\n    saver.restore(sess, FLAGS.restore_path)\r\n  File \"C:\\ProgramData\\Miniconda3\\envs\\tensorflow\\lib\\site-packages\\tensorflow\\python\\training\\saver.py\", line 1759, in restore\r\n    err, \"a mismatch between the current graph and the graph\")\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Restoring from checkpoint failed. This is most likely due to a mismatch between the current graph and the graph from the checkpoint. Please ensure that you have not altered the graph expected based on the checkpoint. Original error:\r\n\r\nInput 1 of node decoder/dynamic_decoder_out/decoder/while/Merge_7_1 was passed float from decoder/dynamic_decoder_out/decoder/while/NextIteration_7:0 incompatible with expected int32.\r\n```\r\n\r\n### Source code \r\n```\r\ndef inference_s2s_ce(self, encoder_inputs, decoder_inputs, encoder_inputs_lenghts, decoder_inputs_lenghts, feed_previous):\r\n    true_batch_size = tf.size(encoder_inputs_lenghts)\r\n    encoder_outputs, encoder_state = self.input_encoder(encoder_inputs)\r\n    print('encoder_state ', encoder_state)\r\n    attention_inputs = encoder_outputs # Not time major\r\n    #encoder_outputs = tf.transpose(encoder_outputs, [1, 0, 2]) # time major\r\n    if self.mode == 'train_ws':\r\n        attention_inputs = tf.contrib.seq2seq.tile_batch(encoder_outputs, multiplier=self.beam_width)\r\n        encoder_state = tf.contrib.seq2seq.tile_batch(encoder_state, multiplier=self.beam_width)\r\n        encoder_inputs_lenghts = tf.contrib.seq2seq.tile_batch(encoder_inputs_lenghts, multiplier=self.beam_width)  \r\n    with tf.variable_scope('decoder', reuse=tf.AUTO_REUSE) as scope:\r\n        decoder_cell = tf.contrib.rnn.LSTMCell(self.rnn_size,state_is_tuple=True)\r\n        embedding_decoder = variable_scope.get_variable(\"embedding_decoder\", [self.tgt_vocab_size, self.decoder_embedding_size])\r\n        decoder_emb_inp = tf.nn.embedding_lookup(embedding_decoder, decoder_inputs)\r\n        input_layer = Dense(self.rnn_size, dtype=self.dtype, name='input_projection')\r\n        decoder_emb_inp = input_layer(decoder_emb_inp)\r\n        attention_mechanism = tf.contrib.seq2seq.BahdanauAttention( num_units=self.rnn_size, memory=attention_inputs, \r\n        memory_sequence_length=encoder_inputs_lenghts)\r\n        attn_cell = tf.contrib.seq2seq.AttentionWrapper(decoder_cell, attention_mechanism)#, attention_layer_size= self.num_units / 2)\r\n        projection_layer = tf.layers.Dense(self.tgt_vocab_size, use_bias=False)\r\n        if self.mode == 'train_ce':\r\n            helper = tf.contrib.seq2seq.TrainingHelper(decoder_emb_inp, decoder_inputs_lenghts)#,  time_major=False)\r\n            decoder_initial_state = attn_cell.zero_state(true_batch_size, dtype=tf.float32).clone(cell_state=encoder_state)\r\n            decoder = tf.contrib.seq2seq.BasicDecoder(\r\n                cell=attn_cell, helper=helper,\r\n                initial_state=decoder_initial_state, \r\n                output_layer=projection_layer)\r\n            inference_decoder = decoder\r\n        elif self.mode == 'train_ws':\r\n            tgt_sos_id = 3\r\n            tgt_eos_id = 1\r\n            start_tokens = tf.tile(tf.constant([tgt_sos_id], dtype=tf.int32), [true_batch_size])\r\n            batch_size = true_batch_size * self.beam_width#tf.cast(true_batch_size * self.beam_width, dtype=tf.int32)\r\n            decoder_initial_state = attn_cell.zero_state(batch_size, tf.float32).clone(cell_state=encoder_state)\r\n            print('decoder_initial_state shape ', decoder_initial_state)\r\n            decoder = tf.contrib.seq2seq.BeamSearchDecoder(cell = attn_cell, embedding=embedding_decoder, start_tokens=start_tokens,\r\n            end_token=tgt_eos_id, initial_state=decoder_initial_state, beam_width=int(self.beam_width), output_layer=projection_layer)\r\n            inference_decoder = decoder\r\n        with tf.variable_scope('dynamic_decoder_out', reuse=tf.AUTO_REUSE) as scope:\r\n            outputs, _, _ = seq2seq.dynamic_decode(decoder=inference_decoder,output_time_major=False,maximum_iterations=self.output_max_length) \r\n            if self.mode == 'train_ce':\r\n                logits = outputs.rnn_output\r\n                print('Logits ', logits.get_shape())\r\n                return logits\r\n            elif self.mode == 'train_ws':\r\n                return outputs.beam_search_decoder_output.scores\r\n        \r\n```\r\nI have tried restoring basicdecoder, that works.\r\n"}