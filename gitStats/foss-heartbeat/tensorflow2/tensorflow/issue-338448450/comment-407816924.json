{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/407816924", "html_url": "https://github.com/tensorflow/tensorflow/issues/20561#issuecomment-407816924", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20561", "id": 407816924, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzgxNjkyNA==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-25T16:33:18Z", "updated_at": "2018-07-25T16:33:18Z", "author_association": "MEMBER", "body_html": "<p>We have some <a href=\"https://www.tensorflow.org/api_docs/python/tf/sysconfig\" rel=\"nofollow\">ways to get linker flags for custom ops</a>. For example <code>tf.sysconfig.get_link_flags()</code> prints <code>['-L~/.local/lib/python2.7/site-packages/tensorflow', '-ltensorflow_framework']</code> for me. Maybe if you link against that and your C++ binary loads it successfully it'll find it by name without _pywrap_tensorflow_internal.so having to search for it. (Ideally you could just dlopen it, but that seems like it'd require importing TensorFlow in C++ first.)</p>\n<p>That symbol is in libtensorflow_framework.so (<code>nm -g libtensorflow_framework.so | grep _ZNK6google8protobuf7Message11GetTypeNameEv</code> finds the symbol), so I'm still convinced that it not finding that .so is the issue. You could try <code>strace</code> to figure out what it's doing.</p>", "body_text": "We have some ways to get linker flags for custom ops. For example tf.sysconfig.get_link_flags() prints ['-L~/.local/lib/python2.7/site-packages/tensorflow', '-ltensorflow_framework'] for me. Maybe if you link against that and your C++ binary loads it successfully it'll find it by name without _pywrap_tensorflow_internal.so having to search for it. (Ideally you could just dlopen it, but that seems like it'd require importing TensorFlow in C++ first.)\nThat symbol is in libtensorflow_framework.so (nm -g libtensorflow_framework.so | grep _ZNK6google8protobuf7Message11GetTypeNameEv finds the symbol), so I'm still convinced that it not finding that .so is the issue. You could try strace to figure out what it's doing.", "body": "We have some [ways to get linker flags for custom ops](https://www.tensorflow.org/api_docs/python/tf/sysconfig). For example `tf.sysconfig.get_link_flags()` prints `['-L~/.local/lib/python2.7/site-packages/tensorflow', '-ltensorflow_framework']` for me. Maybe if you link against that and your C++ binary loads it successfully it'll find it by name without _pywrap_tensorflow_internal.so having to search for it. (Ideally you could just dlopen it, but that seems like it'd require importing TensorFlow in C++ first.)\r\n\r\nThat symbol is in libtensorflow_framework.so (`nm -g libtensorflow_framework.so | grep _ZNK6google8protobuf7Message11GetTypeNameEv` finds the symbol), so I'm still convinced that it not finding that .so is the issue. You could try `strace` to figure out what it's doing."}