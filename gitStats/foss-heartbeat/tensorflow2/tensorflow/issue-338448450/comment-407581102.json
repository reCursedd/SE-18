{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/407581102", "html_url": "https://github.com/tensorflow/tensorflow/issues/20561#issuecomment-407581102", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20561", "id": 407581102, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzU4MTEwMg==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-24T23:11:38Z", "updated_at": "2018-07-24T23:11:38Z", "author_association": "MEMBER", "body_html": "<p>I believe this is because _pywrap_tensorflow_internal.so can't find libtensorflow_framework.so (presumably there's a linker warning for that just before the error?).</p>\n<p>On my machine, the linking goes like:</p>\n<pre><code>&gt; ldd ~/.local/lib/python2.7/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so\n\tlibtensorflow_framework.so =&gt; ~/.local/lib/python2.7/site-packages/tensorflow/python/../libtensorflow_framework.so\n</code></pre>\n<p>libtensorflow_framework.so has the protocol buffer symbols. We have some rpaths set in _pywrap_tensorflow_internal.so which are relative to its installation location (thus the .. above):</p>\n<pre><code>objdump -x ~/.local/lib/python2.7/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so  | grep PATH\n  RUNPATH              $ORIGIN/../../_solib_k8/_U_S_Stensorflow_Spython_C_Upywrap_Utensorflow_Uinternal.so___Utensorflow:$ORIGIN/:$ORIGIN/..\n</code></pre>\n<p>(The first one is added by Bazel and makes no sense here)</p>\n<p>But I'm guessing libtensorflow_framework.so is not in any of those locations if <code>$ORIGIN</code> points to your C++ executable instead of _pywrap_tensorflow_internal.so. Why this is different between the Python C API and regular Python (where this linking works fine) I don't know, and it may not even be a TF bug since it seems like $ORIGIN should always be the shared object doing the loading.</p>\n<p>Could you confirm that this works if you set <code>LD_LIBRARY_PATH</code> to include the location of libtensorflow_framework.so on your system? May be a reasonable workaround. I can dig further, but it'll be a bit before I have the time.</p>", "body_text": "I believe this is because _pywrap_tensorflow_internal.so can't find libtensorflow_framework.so (presumably there's a linker warning for that just before the error?).\nOn my machine, the linking goes like:\n> ldd ~/.local/lib/python2.7/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so\n\tlibtensorflow_framework.so => ~/.local/lib/python2.7/site-packages/tensorflow/python/../libtensorflow_framework.so\n\nlibtensorflow_framework.so has the protocol buffer symbols. We have some rpaths set in _pywrap_tensorflow_internal.so which are relative to its installation location (thus the .. above):\nobjdump -x ~/.local/lib/python2.7/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so  | grep PATH\n  RUNPATH              $ORIGIN/../../_solib_k8/_U_S_Stensorflow_Spython_C_Upywrap_Utensorflow_Uinternal.so___Utensorflow:$ORIGIN/:$ORIGIN/..\n\n(The first one is added by Bazel and makes no sense here)\nBut I'm guessing libtensorflow_framework.so is not in any of those locations if $ORIGIN points to your C++ executable instead of _pywrap_tensorflow_internal.so. Why this is different between the Python C API and regular Python (where this linking works fine) I don't know, and it may not even be a TF bug since it seems like $ORIGIN should always be the shared object doing the loading.\nCould you confirm that this works if you set LD_LIBRARY_PATH to include the location of libtensorflow_framework.so on your system? May be a reasonable workaround. I can dig further, but it'll be a bit before I have the time.", "body": "I believe this is because _pywrap_tensorflow_internal.so can't find libtensorflow_framework.so (presumably there's a linker warning for that just before the error?).\r\n\r\nOn my machine, the linking goes like:\r\n```\r\n> ldd ~/.local/lib/python2.7/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so\r\n\tlibtensorflow_framework.so => ~/.local/lib/python2.7/site-packages/tensorflow/python/../libtensorflow_framework.so\r\n```\r\n\r\nlibtensorflow_framework.so has the protocol buffer symbols. We have some rpaths set in _pywrap_tensorflow_internal.so which are relative to its installation location (thus the .. above):\r\n\r\n```\r\nobjdump -x ~/.local/lib/python2.7/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so  | grep PATH\r\n  RUNPATH              $ORIGIN/../../_solib_k8/_U_S_Stensorflow_Spython_C_Upywrap_Utensorflow_Uinternal.so___Utensorflow:$ORIGIN/:$ORIGIN/..\r\n```\r\n(The first one is added by Bazel and makes no sense here)\r\n\r\nBut I'm guessing libtensorflow_framework.so is not in any of those locations if `$ORIGIN` points to your C++ executable instead of _pywrap_tensorflow_internal.so. Why this is different between the Python C API and regular Python (where this linking works fine) I don't know, and it may not even be a TF bug since it seems like $ORIGIN should always be the shared object doing the loading.\r\n\r\nCould you confirm that this works if you set `LD_LIBRARY_PATH` to include the location of libtensorflow_framework.so on your system? May be a reasonable workaround. I can dig further, but it'll be a bit before I have the time."}