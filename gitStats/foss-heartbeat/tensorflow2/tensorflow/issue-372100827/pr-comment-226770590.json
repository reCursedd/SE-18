{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/226770590", "pull_request_review_id": 166682170, "id": 226770590, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNjc3MDU5MA==", "diff_hunk": "@@ -91,6 +91,260 @@ def _shape_and_dtype_str(tensor):\n   \"\"\"Returns a string containing tensor's shape and dtype.\"\"\"\n   return 'shape=%s dtype=%s' % (tensor.shape, tensor.dtype.name)\n \n+def _unary_assert_doc(sym, sym_name):\n+  \"\"\"\n+  Common docstring for assert_* ops that evaluate a unary predicate over every \n+  element of a tensor.\n+\n+  Args:\n+    sym: Mathematical symbol for the check performed on each element, i.e.\n+      \"> 0\"\n+    sym_name: English-language name for the op described by sym\n+  \"\"\"\n+  def _decorator(func):\n+    opname = func.__name__\n+    cap_sym_name = sym_name.capitalize()\n+\n+    func.__doc__ = \"\"\"\n+    Assert the condition `x {sym}` holds element-wise.\n+\n+    When running in graph mode, you should add a dependency on this operation\n+    to ensure that it runs. Example of adding a dependency to an operation:\n+\n+    ```python\n+    with tf.control_dependencies([tf.debugging.{opname}(x, y)]):\n+      output = tf.reduce_sum(x)\n+    ```\n+\n+    {sym_name} means, for every element `x[i]` of `x`, we have `x[i] {sym}`.\n+    If `x` is empty this is trivially satisfied.\n+\n+    Args:\n+      x:  Numeric `Tensor`.\n+      data:  The tensors to print out if the condition is False.  Defaults to\n+        error message and first few entries of `x`.\n+      summarize: Print this many entries of each tensor.\n+      message: A string to prefix to the default message.\n+      name: A name for this operation (optional).  Defaults to \"{opname}\".\n+\n+    Returns:\n+      Op that raises `InvalidArgumentError` if `x {sym}` is False.\n+      @compatibility{{eager}}\n+        returns None\n+      @end_compatibility\n+\n+    Raises:\n+      InvalidArgumentError: if the check can be performed immediately and\n+        `x {sym}` is False. The check can be performed immediately during \n+        eager execution or if `x` is statically known.\n+    \"\"\".format(sym=sym, sym_name=cap_sym_name, opname=opname)\n+    return func\n+\n+  return _decorator\n+\n+\n+def _binary_assert_doc(sym):\n+  \"\"\"\n+  Common docstring for most of the assert_* ops that compare two tensors\n+  element-wise.\n+\n+  Args:\n+    sym: Binary operation symbol, i.e. \"==\"\n+  \"\"\"\n+  def _decorator(func):\n+    opname = func.__name__\n+\n+    func.__doc__ = \"\"\"\n+    Assert the condition `x {sym} y` holds element-wise.\n+\n+    This condition holds if for every pair of (possibly broadcast) elements\n+    `x[i]`, `y[i]`, we have `x[i] {sym} y[i]`.\n+    If both `x` and `y` are empty, this is trivially satisfied.\n+\n+    When running in graph mode, you should add a dependency on this operation\n+    to ensure that it runs. Example of adding a dependency to an operation:\n+\n+    ```python\n+    with tf.control_dependencies([tf.debugging.{opname}(x, y)]):\n+      output = tf.reduce_sum(x)\n+    ```\n+\n+    Args:\n+      x:  Numeric `Tensor`.\n+      y:  Numeric `Tensor`, same dtype as and broadcastable to `x`.\n+      data:  The tensors to print out if the condition is False.  Defaults to\n+        error message and first few entries of `x`, `y`.\n+      summarize: Print this many entries of each tensor.\n+      message: A string to prefix to the default message.\n+      name: A name for this operation (optional).  Defaults to \"{opname}\".\n+\n+    Returns:\n+      Op that raises `InvalidArgumentError` if `x {sym} y` is False.\n+      @compatibility{{eager}}\n+        returns None\n+      @end_compatibility\n+\n+    Raises:\n+      InvalidArgumentError: if the check can be performed immediately and\n+        `x {sym} y` is False. The check can be performed immediately during \n+        eager execution or if `x` and `y` are statically known.\n+    \"\"\".format(sym=sym, opname=opname)\n+    return func\n+\n+  return _decorator\n+\n+\n+def _make_assert_msg_data(sym, x, y, summarize, test_op):\n+  \"\"\"\n+  Subroutine of _binary_assert that generates the components of the default\n+  error message when running in eager mode.\n+\n+  Args:\n+    sym: Mathematical symbol for the test to apply to pairs of tensor\n+      elements, i.e. \"==\"\n+    x, y: Inputs to the assertion after convert_to_tensor()\n+    summarize: Value of the \"summarize\" parameter to the original assert_*\n+      call; tells how many elements of each tensor to print.\n+    test_op: TensorFlow op that returns a Boolean tensor with True in each\n+      position where the assertion is satisfied.\n+\n+  Returns:\n+    List of tensors and scalars that, when stringified and concatenated,\n+    will produce the error message string.\n+  \"\"\"\n+  # Prepare a message with first elements of x and y.\n+  data = []\n+\n+  data.append('Condition x %s y did not hold.' % sym)\n+\n+  if summarize > 0:\n+    if x.shape == y.shape and x.shape.as_list():\n+      # If the shapes of x and y are the same (and not scalars),\n+      # Get the values that actually differed and their indices.\n+      # If shapes are different this information is more confusing\n+      # than useful.\n+      mask = math_ops.logical_not(test_op)\n+      indices = array_ops.where(mask)\n+      indices_np = indices.numpy()\n+      x_vals = array_ops.boolean_mask(x, mask)\n+      y_vals = array_ops.boolean_mask(y, mask)\n+      num_vals = min(summarize, indices_np.shape[0])\n+      data.append('Indices of first %d different values:' % num_vals)\n+      data.append(indices_np[:num_vals])\n+      data.append('Corresponding x values:')\n+      data.append(x_vals.numpy().reshape((-1,))[:num_vals])\n+      data.append('Corresponding y values:')\n+      data.append(y_vals.numpy().reshape((-1,))[:num_vals])\n+    \n+  if summarize > 0:", "path": "tensorflow/python/ops/check_ops.py", "position": null, "original_position": 149, "commit_id": "48974e999f17b67b89123a883a93dc8129b53686", "original_commit_id": "632d0596ec1c8e264c25310a829e2b7d41062abb", "user": {"login": "iganichev", "id": 9123400, "node_id": "MDQ6VXNlcjkxMjM0MDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9123400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iganichev", "html_url": "https://github.com/iganichev", "followers_url": "https://api.github.com/users/iganichev/followers", "following_url": "https://api.github.com/users/iganichev/following{/other_user}", "gists_url": "https://api.github.com/users/iganichev/gists{/gist_id}", "starred_url": "https://api.github.com/users/iganichev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iganichev/subscriptions", "organizations_url": "https://api.github.com/users/iganichev/orgs", "repos_url": "https://api.github.com/users/iganichev/repos", "events_url": "https://api.github.com/users/iganichev/events{/privacy}", "received_events_url": "https://api.github.com/users/iganichev/received_events", "type": "User", "site_admin": false}, "body": "Seems like you can remove this if statement", "created_at": "2018-10-19T20:20:58Z", "updated_at": "2018-11-20T04:55:44Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23109#discussion_r226770590", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23109", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/226770590"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23109#discussion_r226770590"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23109"}}, "body_html": "<p>Seems like you can remove this if statement</p>", "body_text": "Seems like you can remove this if statement"}