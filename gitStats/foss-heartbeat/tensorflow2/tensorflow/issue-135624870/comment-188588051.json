{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/188588051", "html_url": "https://github.com/tensorflow/tensorflow/issues/1246#issuecomment-188588051", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1246", "id": 188588051, "node_id": "MDEyOklzc3VlQ29tbWVudDE4ODU4ODA1MQ==", "user": {"login": "cesarsalgado", "id": 1115209, "node_id": "MDQ6VXNlcjExMTUyMDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1115209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarsalgado", "html_url": "https://github.com/cesarsalgado", "followers_url": "https://api.github.com/users/cesarsalgado/followers", "following_url": "https://api.github.com/users/cesarsalgado/following{/other_user}", "gists_url": "https://api.github.com/users/cesarsalgado/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarsalgado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarsalgado/subscriptions", "organizations_url": "https://api.github.com/users/cesarsalgado/orgs", "repos_url": "https://api.github.com/users/cesarsalgado/repos", "events_url": "https://api.github.com/users/cesarsalgado/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarsalgado/received_events", "type": "User", "site_admin": false}, "created_at": "2016-02-25T03:30:36Z", "updated_at": "2016-02-25T03:32:46Z", "author_association": "CONTRIBUTOR", "body_html": "<p>If someone is interested I made this implementation using python:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">spatial_lrn</span>(<span class=\"pl-smi\">tensor</span>, <span class=\"pl-smi\">depth_radius</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">5</span>, <span class=\"pl-smi\">bias</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1.0</span>, <span class=\"pl-smi\">alpha</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1.0</span>, <span class=\"pl-smi\">beta</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.5</span>):\n  squared <span class=\"pl-k\">=</span> tf.square(tensor)\n  in_channels <span class=\"pl-k\">=</span> tensor.get_shape().as_list()[<span class=\"pl-c1\">3</span>]\n  kernel <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">1.0</span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[depth_radius, depth_radius, in_channels, <span class=\"pl-c1\">1</span>])\n  squared_sum <span class=\"pl-k\">=</span> tf.nn.depthwise_conv2d(squared,\n                                       kernel,\n                                       [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>],\n                                       <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>SAME<span class=\"pl-pds\">'</span></span>)\n  bias <span class=\"pl-k\">=</span> tf.constant(bias, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n  alpha <span class=\"pl-k\">=</span> tf.constant(alpha, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n  beta <span class=\"pl-k\">=</span> tf.constant(beta, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n  <span class=\"pl-k\">return</span> tensor <span class=\"pl-k\">/</span> ((bias <span class=\"pl-k\">+</span> alpha <span class=\"pl-k\">*</span> squared_sum) <span class=\"pl-k\">**</span> beta)</pre></div>\n<p>I won't be able to implement it in C++ for now. Should I submit PR with this python only implementation?</p>", "body_text": "If someone is interested I made this implementation using python:\ndef spatial_lrn(tensor, depth_radius=5, bias=1.0, alpha=1.0, beta=0.5):\n  squared = tf.square(tensor)\n  in_channels = tensor.get_shape().as_list()[3]\n  kernel = tf.constant(1.0, shape=[depth_radius, depth_radius, in_channels, 1])\n  squared_sum = tf.nn.depthwise_conv2d(squared,\n                                       kernel,\n                                       [1, 1, 1, 1],\n                                       padding='SAME')\n  bias = tf.constant(bias, dtype=tf.float32)\n  alpha = tf.constant(alpha, dtype=tf.float32)\n  beta = tf.constant(beta, dtype=tf.float32)\n  return tensor / ((bias + alpha * squared_sum) ** beta)\nI won't be able to implement it in C++ for now. Should I submit PR with this python only implementation?", "body": "If someone is interested I made this implementation using python:\n\n``` python\ndef spatial_lrn(tensor, depth_radius=5, bias=1.0, alpha=1.0, beta=0.5):\n  squared = tf.square(tensor)\n  in_channels = tensor.get_shape().as_list()[3]\n  kernel = tf.constant(1.0, shape=[depth_radius, depth_radius, in_channels, 1])\n  squared_sum = tf.nn.depthwise_conv2d(squared,\n                                       kernel,\n                                       [1, 1, 1, 1],\n                                       padding='SAME')\n  bias = tf.constant(bias, dtype=tf.float32)\n  alpha = tf.constant(alpha, dtype=tf.float32)\n  beta = tf.constant(beta, dtype=tf.float32)\n  return tensor / ((bias + alpha * squared_sum) ** beta)\n```\n\nI won't be able to implement it in C++ for now. Should I submit PR with this python only implementation?\n"}