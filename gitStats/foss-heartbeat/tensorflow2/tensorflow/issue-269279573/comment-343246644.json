{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/343246644", "html_url": "https://github.com/tensorflow/tensorflow/issues/14053#issuecomment-343246644", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14053", "id": 343246644, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzI0NjY0NA==", "user": {"login": "jsimsa", "id": 1072079, "node_id": "MDQ6VXNlcjEwNzIwNzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1072079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsimsa", "html_url": "https://github.com/jsimsa", "followers_url": "https://api.github.com/users/jsimsa/followers", "following_url": "https://api.github.com/users/jsimsa/following{/other_user}", "gists_url": "https://api.github.com/users/jsimsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsimsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsimsa/subscriptions", "organizations_url": "https://api.github.com/users/jsimsa/orgs", "repos_url": "https://api.github.com/users/jsimsa/repos", "events_url": "https://api.github.com/users/jsimsa/events{/privacy}", "received_events_url": "https://api.github.com/users/jsimsa/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-09T18:27:33Z", "updated_at": "2017-11-09T18:28:26Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=28866047\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/traveller59\">@traveller59</a> the problem is rooted in the fact that <code>from_tensor_slices</code> will create a constant-value tensor that has the raw data, which will be recorded in GraphDef.</p>\n<p>An alternative approach (that avoids recording the raw data in GraphDef) to achieve the same behavior is to use <code>tf.data.from_generator</code>:</p>\n<pre><code>...\ndef make_generator(images, labels):\n\n  def _generator():\n    for image, label in zip(images, labels):\n      yield image, label\n\n  return _generator\n\n\ndef train_input_fn():\n  mnist = input_data.read_data_sets('/tmp/data/', one_hot=False)\n  dataset = tf.data.Dataset.from_generator(\n      make_generator(mnist.train.images, mnist.train.labels),\n      (tf.float32, tf.float32))\n  batched_dataset = dataset.batch(batch_size)\n  iterator = batched_dataset.make_one_shot_iterator()\n  imgs, labels = list(iterator.get_next())\n  return {'images': imgs}, labels\n...\n</code></pre>", "body_text": "@traveller59 the problem is rooted in the fact that from_tensor_slices will create a constant-value tensor that has the raw data, which will be recorded in GraphDef.\nAn alternative approach (that avoids recording the raw data in GraphDef) to achieve the same behavior is to use tf.data.from_generator:\n...\ndef make_generator(images, labels):\n\n  def _generator():\n    for image, label in zip(images, labels):\n      yield image, label\n\n  return _generator\n\n\ndef train_input_fn():\n  mnist = input_data.read_data_sets('/tmp/data/', one_hot=False)\n  dataset = tf.data.Dataset.from_generator(\n      make_generator(mnist.train.images, mnist.train.labels),\n      (tf.float32, tf.float32))\n  batched_dataset = dataset.batch(batch_size)\n  iterator = batched_dataset.make_one_shot_iterator()\n  imgs, labels = list(iterator.get_next())\n  return {'images': imgs}, labels\n...", "body": "@traveller59 the problem is rooted in the fact that `from_tensor_slices` will create a constant-value tensor that has the raw data, which will be recorded in GraphDef.\r\n\r\nAn alternative approach (that avoids recording the raw data in GraphDef) to achieve the same behavior is to use `tf.data.from_generator`:\r\n\r\n```\r\n...\r\ndef make_generator(images, labels):\r\n\r\n  def _generator():\r\n    for image, label in zip(images, labels):\r\n      yield image, label\r\n\r\n  return _generator\r\n\r\n\r\ndef train_input_fn():\r\n  mnist = input_data.read_data_sets('/tmp/data/', one_hot=False)\r\n  dataset = tf.data.Dataset.from_generator(\r\n      make_generator(mnist.train.images, mnist.train.labels),\r\n      (tf.float32, tf.float32))\r\n  batched_dataset = dataset.batch(batch_size)\r\n  iterator = batched_dataset.make_one_shot_iterator()\r\n  imgs, labels = list(iterator.get_next())\r\n  return {'images': imgs}, labels\r\n...\r\n```"}