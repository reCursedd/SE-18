{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10141", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10141/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10141/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10141/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10141", "id": 230810245, "node_id": "MDU6SXNzdWUyMzA4MTAyNDU=", "number": 10141, "title": "slim.batch_norm as normalizer_fn in tf.contrib.layers.fully_connected destroys network", "user": {"login": "OktayGardener", "id": 6593422, "node_id": "MDQ6VXNlcjY1OTM0MjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/6593422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OktayGardener", "html_url": "https://github.com/OktayGardener", "followers_url": "https://api.github.com/users/OktayGardener/followers", "following_url": "https://api.github.com/users/OktayGardener/following{/other_user}", "gists_url": "https://api.github.com/users/OktayGardener/gists{/gist_id}", "starred_url": "https://api.github.com/users/OktayGardener/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OktayGardener/subscriptions", "organizations_url": "https://api.github.com/users/OktayGardener/orgs", "repos_url": "https://api.github.com/users/OktayGardener/repos", "events_url": "https://api.github.com/users/OktayGardener/events{/privacy}", "received_events_url": "https://api.github.com/users/OktayGardener/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-23T18:59:26Z", "updated_at": "2017-12-22T21:23:07Z", "closed_at": "2017-12-22T21:23:07Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nMac OS X 10.12.4</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary, conda</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n1.1.0</li>\n<li><strong>Exact command to reproduce</strong>:<br>\n<code>net = layers.fully_connected(input_dim, dim, biases_initializer=tf.constant_initializer(0.1), activation_fn=None, normalizer_fn=tf.contrib.slim.batch_norm)</code></li>\n</ul>\n<h3>Describe the problem</h3>\n<p>After training a network without normalizer_fn set (or set to =False) and after trying to restore the network with incorrect setting of normalizer_fn, in my case with tf.contrib.slim.batch_norm, TensorFlow creates a new network structure with batch norms and completely annihilates the previously trained model and its structure, leaving the previously trained structure unavailable for restoring. There should be some way to restore previously trained models even after setting incorrect parameters.</p>\n<h3>Source code / logs</h3>\n<p>Function for creating a network given an initial</p>\n<pre><code>self.layers = [200, 100]\nself.embedding_size = 50\n    def dense_batchnorm_relu(self, dimensions, phase):\n        input_dim = self.query\n        for dim in dimensions:\n            print input_dim\n            net = layers.fully_connected(input_dim, dim, biases_initializer=tf.constant_initializer(0.1), activation_fn=None, normalizer_fn=tf.contrib.slim.batch_norm)\n            self.layers.append(net)\n            input_dim = net\n        net = layers.fully_connected(input_dim, self.embedding_size, biases_initializer=tf.constant_initializer(0.1), activation_fn=None)\n        self.layers.append(net)\n\nErrors:\n`\n\n2017-05-23 21:09:50.047879: W tensorflow/core/framework/op_kernel.cc:1152] Not found: Key fully_connected_1/biases not found in checkpoint\n2017-05-23 21:09:50.481725: W tensorflow/core/framework/op_kernel.cc:1152] Not found: Key fully_connected_1/weights not found in checkpoint\n\n....\nline 785, in restore\n    loader = tf.train.Saver()\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1056, in __init__\n    self.build()\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1086, in build\n    restore_sequentially=self._restore_sequentially)\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 691, in build\n    restore_sequentially, reshape)\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 407, in _AddRestoreOps\n    tensors = self.restore_op(filename_tensor, saveable, preferred_shard)\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 247, in restore_op\n    [spec.tensor.dtype])[0])\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 669, in restore_v2\n    dtypes=dtypes, name=name)\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 768, in apply_op\n    op_def=op_def)\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 2336, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1228, in __init__\n    self._traceback = _extract_stack()\n\nNotFoundError (see above for traceback): Key fully_connected_1/biases not found in checkpoint\n\t [[Node: save/RestoreV2_6 = RestoreV2[dtypes=[DT_FLOAT], _device=\"/job:localhost/replica:0/task:0/cpu:0\"](_recv_save/Const_0, save/RestoreV2_6/tensor_names, save/RestoreV2_6/shape_and_slices)]]\n\n\n`\nEtc.\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nMac OS X 10.12.4\nTensorFlow installed from (source or binary):\nbinary, conda\nTensorFlow version (use command below):\n1.1.0\nExact command to reproduce:\nnet = layers.fully_connected(input_dim, dim, biases_initializer=tf.constant_initializer(0.1), activation_fn=None, normalizer_fn=tf.contrib.slim.batch_norm)\n\nDescribe the problem\nAfter training a network without normalizer_fn set (or set to =False) and after trying to restore the network with incorrect setting of normalizer_fn, in my case with tf.contrib.slim.batch_norm, TensorFlow creates a new network structure with batch norms and completely annihilates the previously trained model and its structure, leaving the previously trained structure unavailable for restoring. There should be some way to restore previously trained models even after setting incorrect parameters.\nSource code / logs\nFunction for creating a network given an initial\nself.layers = [200, 100]\nself.embedding_size = 50\n    def dense_batchnorm_relu(self, dimensions, phase):\n        input_dim = self.query\n        for dim in dimensions:\n            print input_dim\n            net = layers.fully_connected(input_dim, dim, biases_initializer=tf.constant_initializer(0.1), activation_fn=None, normalizer_fn=tf.contrib.slim.batch_norm)\n            self.layers.append(net)\n            input_dim = net\n        net = layers.fully_connected(input_dim, self.embedding_size, biases_initializer=tf.constant_initializer(0.1), activation_fn=None)\n        self.layers.append(net)\n\nErrors:\n`\n\n2017-05-23 21:09:50.047879: W tensorflow/core/framework/op_kernel.cc:1152] Not found: Key fully_connected_1/biases not found in checkpoint\n2017-05-23 21:09:50.481725: W tensorflow/core/framework/op_kernel.cc:1152] Not found: Key fully_connected_1/weights not found in checkpoint\n\n....\nline 785, in restore\n    loader = tf.train.Saver()\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1056, in __init__\n    self.build()\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1086, in build\n    restore_sequentially=self._restore_sequentially)\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 691, in build\n    restore_sequentially, reshape)\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 407, in _AddRestoreOps\n    tensors = self.restore_op(filename_tensor, saveable, preferred_shard)\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 247, in restore_op\n    [spec.tensor.dtype])[0])\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 669, in restore_v2\n    dtypes=dtypes, name=name)\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 768, in apply_op\n    op_def=op_def)\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 2336, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1228, in __init__\n    self._traceback = _extract_stack()\n\nNotFoundError (see above for traceback): Key fully_connected_1/biases not found in checkpoint\n\t [[Node: save/RestoreV2_6 = RestoreV2[dtypes=[DT_FLOAT], _device=\"/job:localhost/replica:0/task:0/cpu:0\"](_recv_save/Const_0, save/RestoreV2_6/tensor_names, save/RestoreV2_6/shape_and_slices)]]\n\n\n`\nEtc.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nMac OS X 10.12.4\r\n- **TensorFlow installed from (source or binary)**:\r\nbinary, conda\r\n- **TensorFlow version (use command below)**:\r\n1.1.0\r\n- **Exact command to reproduce**:\r\n`net = layers.fully_connected(input_dim, dim, biases_initializer=tf.constant_initializer(0.1), activation_fn=None, normalizer_fn=tf.contrib.slim.batch_norm)`\r\n\r\n### Describe the problem\r\nAfter training a network without normalizer_fn set (or set to =False) and after trying to restore the network with incorrect setting of normalizer_fn, in my case with tf.contrib.slim.batch_norm, TensorFlow creates a new network structure with batch norms and completely annihilates the previously trained model and its structure, leaving the previously trained structure unavailable for restoring. There should be some way to restore previously trained models even after setting incorrect parameters. \r\n\r\n### Source code / logs\r\nFunction for creating a network given an initial \r\n```\r\nself.layers = [200, 100]\r\nself.embedding_size = 50\r\n    def dense_batchnorm_relu(self, dimensions, phase):\r\n        input_dim = self.query\r\n        for dim in dimensions:\r\n            print input_dim\r\n            net = layers.fully_connected(input_dim, dim, biases_initializer=tf.constant_initializer(0.1), activation_fn=None, normalizer_fn=tf.contrib.slim.batch_norm)\r\n            self.layers.append(net)\r\n            input_dim = net\r\n        net = layers.fully_connected(input_dim, self.embedding_size, biases_initializer=tf.constant_initializer(0.1), activation_fn=None)\r\n        self.layers.append(net)\r\n\r\nErrors:\r\n`\r\n\r\n2017-05-23 21:09:50.047879: W tensorflow/core/framework/op_kernel.cc:1152] Not found: Key fully_connected_1/biases not found in checkpoint\r\n2017-05-23 21:09:50.481725: W tensorflow/core/framework/op_kernel.cc:1152] Not found: Key fully_connected_1/weights not found in checkpoint\r\n\r\n....\r\nline 785, in restore\r\n    loader = tf.train.Saver()\r\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1056, in __init__\r\n    self.build()\r\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1086, in build\r\n    restore_sequentially=self._restore_sequentially)\r\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 691, in build\r\n    restore_sequentially, reshape)\r\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 407, in _AddRestoreOps\r\n    tensors = self.restore_op(filename_tensor, saveable, preferred_shard)\r\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 247, in restore_op\r\n    [spec.tensor.dtype])[0])\r\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 669, in restore_v2\r\n    dtypes=dtypes, name=name)\r\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 768, in apply_op\r\n    op_def=op_def)\r\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 2336, in create_op\r\n    original_op=self._default_original_op, op_def=op_def)\r\n  File \"/anaconda/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1228, in __init__\r\n    self._traceback = _extract_stack()\r\n\r\nNotFoundError (see above for traceback): Key fully_connected_1/biases not found in checkpoint\r\n\t [[Node: save/RestoreV2_6 = RestoreV2[dtypes=[DT_FLOAT], _device=\"/job:localhost/replica:0/task:0/cpu:0\"](_recv_save/Const_0, save/RestoreV2_6/tensor_names, save/RestoreV2_6/shape_and_slices)]]\r\n\r\n\r\n`\r\nEtc."}