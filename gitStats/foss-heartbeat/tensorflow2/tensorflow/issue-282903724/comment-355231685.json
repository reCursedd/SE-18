{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/355231685", "html_url": "https://github.com/tensorflow/tensorflow/issues/15448#issuecomment-355231685", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15448", "id": 355231685, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTIzMTY4NQ==", "user": {"login": "maxfiedler", "id": 4192637, "node_id": "MDQ6VXNlcjQxOTI2Mzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4192637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxfiedler", "html_url": "https://github.com/maxfiedler", "followers_url": "https://api.github.com/users/maxfiedler/followers", "following_url": "https://api.github.com/users/maxfiedler/following{/other_user}", "gists_url": "https://api.github.com/users/maxfiedler/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxfiedler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxfiedler/subscriptions", "organizations_url": "https://api.github.com/users/maxfiedler/orgs", "repos_url": "https://api.github.com/users/maxfiedler/repos", "events_url": "https://api.github.com/users/maxfiedler/events{/privacy}", "received_events_url": "https://api.github.com/users/maxfiedler/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-04T09:06:08Z", "updated_at": "2018-01-04T09:06:08Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> Thanks for clarifying. I am still wondering what real-life use case the re-initializable iterators serve then? To me it seems that it can only be used practically for complete batch optimization but not for stochastic gradient descent or mini-batch or if I am content to get a validation loss only after each full training epoch.<br>\nOr are there other possibilities to manipulate your dataset in such a way that you can still intertwine training and validation set mini batches using the re-initializable iterator API?</p>", "body_text": "@mrry Thanks for clarifying. I am still wondering what real-life use case the re-initializable iterators serve then? To me it seems that it can only be used practically for complete batch optimization but not for stochastic gradient descent or mini-batch or if I am content to get a validation loss only after each full training epoch.\nOr are there other possibilities to manipulate your dataset in such a way that you can still intertwine training and validation set mini batches using the re-initializable iterator API?", "body": "@mrry Thanks for clarifying. I am still wondering what real-life use case the re-initializable iterators serve then? To me it seems that it can only be used practically for complete batch optimization but not for stochastic gradient descent or mini-batch or if I am content to get a validation loss only after each full training epoch. \r\nOr are there other possibilities to manipulate your dataset in such a way that you can still intertwine training and validation set mini batches using the re-initializable iterator API?"}