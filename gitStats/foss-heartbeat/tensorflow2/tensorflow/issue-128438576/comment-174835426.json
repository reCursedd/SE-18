{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/174835426", "html_url": "https://github.com/tensorflow/tensorflow/pull/871#issuecomment-174835426", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/871", "id": 174835426, "node_id": "MDEyOklzc3VlQ29tbWVudDE3NDgzNTQyNg==", "user": {"login": "lzlarryli", "id": 8211938, "node_id": "MDQ6VXNlcjgyMTE5Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/8211938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lzlarryli", "html_url": "https://github.com/lzlarryli", "followers_url": "https://api.github.com/users/lzlarryli/followers", "following_url": "https://api.github.com/users/lzlarryli/following{/other_user}", "gists_url": "https://api.github.com/users/lzlarryli/gists{/gist_id}", "starred_url": "https://api.github.com/users/lzlarryli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lzlarryli/subscriptions", "organizations_url": "https://api.github.com/users/lzlarryli/orgs", "repos_url": "https://api.github.com/users/lzlarryli/repos", "events_url": "https://api.github.com/users/lzlarryli/events{/privacy}", "received_events_url": "https://api.github.com/users/lzlarryli/received_events", "type": "User", "site_admin": false}, "created_at": "2016-01-26T05:12:45Z", "updated_at": "2016-01-26T05:12:45Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15737127\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vincentvanhoucke\">@vincentvanhoucke</a> Yes, more or less. In addition to that, all 'print' have to be changed to function invocations. There was a tricky part in <code>6_lstm.ipynb</code> due to the translation between strings (bytes....) and numbers.</p>\n<p>First,</p>\n<div class=\"highlight highlight-source-python\"><pre>text <span class=\"pl-k\">=</span> read_data(filename)</pre></div>\n<p>needs to be changed to:</p>\n<div class=\"highlight highlight-source-python\"><pre>text <span class=\"pl-k\">=</span> read_data(filename)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Python 3 compatibility</span>\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">type</span>(text) <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">type</span>(<span class=\"pl-c1\">str</span>()):\n    text <span class=\"pl-k\">=</span> text.decode()</pre></div>\n<p>Second, <code>char2id</code> needs to be changed this way:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">char2id</span>(<span class=\"pl-smi\">char</span>):\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Caution: in python 2, len('\u00ef') = 2 but in python 3, len('\u00ef') = 1</span>\n  <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">len</span>(char) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">1</span>) <span class=\"pl-k\">and</span> (<span class=\"pl-c1\">ord</span>(char) <span class=\"pl-k\">in</span> <span class=\"pl-c1\">map</span>(<span class=\"pl-c1\">ord</span>, string.ascii_lowercase)):\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">ord</span>(char) <span class=\"pl-k\">-</span> first_letter <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>\n  <span class=\"pl-k\">elif</span> char <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> <span class=\"pl-pds\">'</span></span>:\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>\n  <span class=\"pl-k\">else</span>:\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Unexpected character:<span class=\"pl-pds\">'</span></span>, char)\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span></pre></div>\n<p>This is on the dirty side of things but it minimally changes the current code. In python2 the text file is read as a <code>string</code> while in python3 it is <code>bytes</code>.</p>\n<p>Finally, there are places where the division has to be made to <code>\\\\</code> because in python3, the division is floating point by default. For example, in <code>6_lstm.ipynb</code>,</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">BatchGenerator</span>(<span class=\"pl-c1\">object</span>):\n  <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">text</span>, <span class=\"pl-smi\">batch_size</span>, <span class=\"pl-smi\">num_unrollings</span>):\n    <span class=\"pl-c1\">...</span>\n    segment <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._text_size <span class=\"pl-k\">/</span> batch_size\n    <span class=\"pl-c1\">...</span></pre></div>\n<p>has to be changed to something like:</p>\n<div class=\"highlight highlight-source-python\"><pre>    segment <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._text_size <span class=\"pl-k\">//</span> batch_size</pre></div>\n<p>otherwise <code>segment</code> cannot be used as an index for lists.</p>", "body_text": "@vincentvanhoucke Yes, more or less. In addition to that, all 'print' have to be changed to function invocations. There was a tricky part in 6_lstm.ipynb due to the translation between strings (bytes....) and numbers.\nFirst,\ntext = read_data(filename)\nneeds to be changed to:\ntext = read_data(filename)\n# Python 3 compatibility\nif type(text) is not type(str()):\n    text = text.decode()\nSecond, char2id needs to be changed this way:\ndef char2id(char):\n  # Caution: in python 2, len('\u00ef') = 2 but in python 3, len('\u00ef') = 1\n  if (len(char) == 1) and (ord(char) in map(ord, string.ascii_lowercase)):\n    return ord(char) - first_letter + 1\n  elif char == ' ':\n    return 0\n  else:\n    print('Unexpected character:', char)\n    return 0\nThis is on the dirty side of things but it minimally changes the current code. In python2 the text file is read as a string while in python3 it is bytes.\nFinally, there are places where the division has to be made to \\\\ because in python3, the division is floating point by default. For example, in 6_lstm.ipynb,\nclass BatchGenerator(object):\n  def __init__(self, text, batch_size, num_unrollings):\n    ...\n    segment = self._text_size / batch_size\n    ...\nhas to be changed to something like:\n    segment = self._text_size // batch_size\notherwise segment cannot be used as an index for lists.", "body": "@vincentvanhoucke Yes, more or less. In addition to that, all 'print' have to be changed to function invocations. There was a tricky part in `6_lstm.ipynb` due to the translation between strings (bytes....) and numbers.\n\nFirst, \n\n``` python\ntext = read_data(filename)\n```\n\nneeds to be changed to:\n\n``` python\ntext = read_data(filename)\n# Python 3 compatibility\nif type(text) is not type(str()):\n    text = text.decode()\n```\n\nSecond, `char2id` needs to be changed this way:\n\n``` python\ndef char2id(char):\n  # Caution: in python 2, len('\u00ef') = 2 but in python 3, len('\u00ef') = 1\n  if (len(char) == 1) and (ord(char) in map(ord, string.ascii_lowercase)):\n    return ord(char) - first_letter + 1\n  elif char == ' ':\n    return 0\n  else:\n    print('Unexpected character:', char)\n    return 0\n```\n\nThis is on the dirty side of things but it minimally changes the current code. In python2 the text file is read as a `string` while in python3 it is `bytes`.\n\nFinally, there are places where the division has to be made to `\\\\` because in python3, the division is floating point by default. For example, in `6_lstm.ipynb`, \n\n``` python\nclass BatchGenerator(object):\n  def __init__(self, text, batch_size, num_unrollings):\n    ...\n    segment = self._text_size / batch_size\n    ...\n```\n\nhas to be changed to something like:\n\n``` python\n    segment = self._text_size // batch_size\n```\n\notherwise `segment` cannot be used as an index for lists.\n"}