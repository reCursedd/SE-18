{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/294955146", "html_url": "https://github.com/tensorflow/tensorflow/issues/2309#issuecomment-294955146", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2309", "id": 294955146, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDk1NTE0Ng==", "user": {"login": "milsto", "id": 26661273, "node_id": "MDQ6VXNlcjI2NjYxMjcz", "avatar_url": "https://avatars2.githubusercontent.com/u/26661273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milsto", "html_url": "https://github.com/milsto", "followers_url": "https://api.github.com/users/milsto/followers", "following_url": "https://api.github.com/users/milsto/following{/other_user}", "gists_url": "https://api.github.com/users/milsto/gists{/gist_id}", "starred_url": "https://api.github.com/users/milsto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milsto/subscriptions", "organizations_url": "https://api.github.com/users/milsto/orgs", "repos_url": "https://api.github.com/users/milsto/repos", "events_url": "https://api.github.com/users/milsto/events{/privacy}", "received_events_url": "https://api.github.com/users/milsto/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-18T19:32:21Z", "updated_at": "2017-04-18T19:32:21Z", "author_association": "NONE", "body_html": "<p>As much as I have tested, <a href=\"https://www.tensorflow.org/api_docs/python/tf/strided_slice\" rel=\"nofollow\">tf.strided_slice</a> supports negative <em>end</em> indexing, i.e. if you specify -N in any dimension for <em>end</em> parameter, you will slice all but last N elements. This works, but is not documented (even thou negative strides are documented)</p>\n<p>For example:</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> tf.constant([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>])\nb <span class=\"pl-k\">=</span> tf.strided_slice(test, [<span class=\"pl-c1\">0</span>], [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">1</span>])\nc <span class=\"pl-k\">=</span> tf.strided_slice(test, [<span class=\"pl-c1\">0</span>], [<span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>], [<span class=\"pl-c1\">1</span>])\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> shape of b will be (4,)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> shape of c will be (3,)</span>\n\nd <span class=\"pl-k\">=</span> tf.constant([[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>]])\ne <span class=\"pl-k\">=</span> tf.strided_slice(test, [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>], [<span class=\"pl-c1\">2</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>])\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> shape of e will be (2, 3) </span></pre></div>\n<p>Also, TensorFlow now supports slicing exactly as in numpy, so the flowing would be equivalent to the above examples (and will actually call tf.strided_slice in background as stated in documentation):</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> tf.constant([<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>])\nb <span class=\"pl-k\">=</span> a[:<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>]\nc <span class=\"pl-k\">=</span> a[:<span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>]\nd <span class=\"pl-k\">=</span> tf.constant([[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>]])\ne <span class=\"pl-k\">=</span> d[:<span class=\"pl-c1\">2</span>, :<span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>]</pre></div>\n<p>Everything works with placeholders with None dimensions also. Similar behavior is not supported by <a href=\"https://www.tensorflow.org/api_docs/python/tf/slice\" rel=\"nofollow\">tf.slice</a>.</p>", "body_text": "As much as I have tested, tf.strided_slice supports negative end indexing, i.e. if you specify -N in any dimension for end parameter, you will slice all but last N elements. This works, but is not documented (even thou negative strides are documented)\nFor example:\na = tf.constant([1, 2, 3, 4, 5])\nb = tf.strided_slice(test, [0], [-1], [1])\nc = tf.strided_slice(test, [0], [-2], [1])\n\n# shape of b will be (4,)\n# shape of c will be (3,)\n\nd = tf.constant([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]])\ne = tf.strided_slice(test, [0, 0], [2, -2], [1, 1])\n\n# shape of e will be (2, 3) \nAlso, TensorFlow now supports slicing exactly as in numpy, so the flowing would be equivalent to the above examples (and will actually call tf.strided_slice in background as stated in documentation):\na = tf.constant([1, 2, 3, 4, 5])\nb = a[:-1]\nc = a[:-2]\nd = tf.constant([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]])\ne = d[:2, :-2]\nEverything works with placeholders with None dimensions also. Similar behavior is not supported by tf.slice.", "body": "As much as I have tested, [tf.strided_slice](https://www.tensorflow.org/api_docs/python/tf/strided_slice) supports negative _end_ indexing, i.e. if you specify -N in any dimension for _end_ parameter, you will slice all but last N elements. This works, but is not documented (even thou negative strides are documented)\r\n\r\nFor example:\r\n```python\r\na = tf.constant([1, 2, 3, 4, 5])\r\nb = tf.strided_slice(test, [0], [-1], [1])\r\nc = tf.strided_slice(test, [0], [-2], [1])\r\n\r\n# shape of b will be (4,)\r\n# shape of c will be (3,)\r\n\r\nd = tf.constant([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]])\r\ne = tf.strided_slice(test, [0, 0], [2, -2], [1, 1])\r\n\r\n# shape of e will be (2, 3) \r\n```\r\n\r\nAlso, TensorFlow now supports slicing exactly as in numpy, so the flowing would be equivalent to the above examples (and will actually call tf.strided_slice in background as stated in documentation):\r\n\r\n```python\r\na = tf.constant([1, 2, 3, 4, 5])\r\nb = a[:-1]\r\nc = a[:-2]\r\nd = tf.constant([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]])\r\ne = d[:2, :-2]\r\n```\r\n\r\nEverything works with placeholders with None dimensions also. Similar behavior is not supported by [tf.slice](https://www.tensorflow.org/api_docs/python/tf/slice)."}