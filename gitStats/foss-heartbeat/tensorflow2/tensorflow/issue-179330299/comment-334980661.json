{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/334980661", "html_url": "https://github.com/tensorflow/tensorflow/issues/4590#issuecomment-334980661", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4590", "id": 334980661, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDk4MDY2MQ==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-08T03:35:54Z", "updated_at": "2017-10-08T03:35:54Z", "author_association": "MEMBER", "body_html": "<p>I created a PR <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"263689802\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/13561\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/13561/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/13561\">#13561</a> to improve the shape inference so that as long as the size is not <code>-1</code>, the right shape value will be inferred:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> z <span class=\"pl-k\">=</span> tf.zeros((<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>))\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> z.get_shape().as_list()\n[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> m <span class=\"pl-k\">=</span> tf.slice(z, [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>], [tf.constant(<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> m.get_shape().as_list()\n[<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">None</span>]</pre></div>\n<p><em>Note: The above example used to return <code>[None, None, None]</code></em>.</p>\n<p>The PR is not a completely fix for this issue. It is an improvement nevertheless.</p>", "body_text": "I created a PR #13561 to improve the shape inference so that as long as the size is not -1, the right shape value will be inferred:\n>>> import tensorflow as tf\n>>> z = tf.zeros((1, 2, 3))\n>>> z.get_shape().as_list()\n[1, 2, 3]\n>>> m = tf.slice(z, [0, 0, 0], [tf.constant(1) + 0, 2, -1])\n>>> m.get_shape().as_list()\n[None, 2, None]\nNote: The above example used to return [None, None, None].\nThe PR is not a completely fix for this issue. It is an improvement nevertheless.", "body": "I created a PR #13561 to improve the shape inference so that as long as the size is not `-1`, the right shape value will be inferred:\r\n```python\r\n>>> import tensorflow as tf\r\n>>> z = tf.zeros((1, 2, 3))\r\n>>> z.get_shape().as_list()\r\n[1, 2, 3]\r\n>>> m = tf.slice(z, [0, 0, 0], [tf.constant(1) + 0, 2, -1])\r\n>>> m.get_shape().as_list()\r\n[None, 2, None]\r\n```\r\n*Note: The above example used to return `[None, None, None]`*.\r\n\r\nThe PR is not a completely fix for this issue. It is an improvement nevertheless."}