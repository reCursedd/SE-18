{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20273", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20273/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20273/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20273/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20273", "id": 335344594, "node_id": "MDU6SXNzdWUzMzUzNDQ1OTQ=", "number": 20273, "title": "Add examples to documentation for CudnnRNN", "user": {"login": "danielwatson6", "id": 3270063, "node_id": "MDQ6VXNlcjMyNzAwNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3270063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielwatson6", "html_url": "https://github.com/danielwatson6", "followers_url": "https://api.github.com/users/danielwatson6/followers", "following_url": "https://api.github.com/users/danielwatson6/following{/other_user}", "gists_url": "https://api.github.com/users/danielwatson6/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielwatson6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielwatson6/subscriptions", "organizations_url": "https://api.github.com/users/danielwatson6/orgs", "repos_url": "https://api.github.com/users/danielwatson6/repos", "events_url": "https://api.github.com/users/danielwatson6/events{/privacy}", "received_events_url": "https://api.github.com/users/danielwatson6/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-06-25T10:17:07Z", "updated_at": "2018-11-14T19:21:16Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Have I written custom code: N/A<br>\nOS Platform and Distribution: N/A<br>\nTensorFlow installed from: N/A<br>\nTensorFlow version: 1.8.0<br>\nBazel version: N/A<br>\nCUDA/cuDNN version: 9.0/7.0<br>\nGPU model and memory: NVIDIA GTX 1080 Ti<br>\nExact command to reproduce: N/A</p>\n<p>It would be very helpful to add usage examples on how to use <code>cudnn_rnn</code>, particularly on cross-compatibility between non-CUDA and CUDA-supporting devices. Users should be able to figure out how to save/restore weights to run their models with, say, <code>tf.nn.rnn_cell.LSTMCell</code> or <code>tf.contrib.cudnn_rnn.CudnnLSTM</code>.</p>\n<p>There are classes that seem to do this (e.g. <code>tf.contrib.cudnn_rnn.CudnnLSTMSaveable</code>) but there are no easily accessible code examples showing how they should be used.</p>\n<p><em>A possible feature request</em>: would it be possible to have a high-level wrapper that makes this choice automatically based on the availability of a CUDA device, saving and restoring weights accordingly? This should be possible with <code>tf.test.is_gpu_available(cuda_only=True)</code>.</p>", "body_text": "Have I written custom code: N/A\nOS Platform and Distribution: N/A\nTensorFlow installed from: N/A\nTensorFlow version: 1.8.0\nBazel version: N/A\nCUDA/cuDNN version: 9.0/7.0\nGPU model and memory: NVIDIA GTX 1080 Ti\nExact command to reproduce: N/A\nIt would be very helpful to add usage examples on how to use cudnn_rnn, particularly on cross-compatibility between non-CUDA and CUDA-supporting devices. Users should be able to figure out how to save/restore weights to run their models with, say, tf.nn.rnn_cell.LSTMCell or tf.contrib.cudnn_rnn.CudnnLSTM.\nThere are classes that seem to do this (e.g. tf.contrib.cudnn_rnn.CudnnLSTMSaveable) but there are no easily accessible code examples showing how they should be used.\nA possible feature request: would it be possible to have a high-level wrapper that makes this choice automatically based on the availability of a CUDA device, saving and restoring weights accordingly? This should be possible with tf.test.is_gpu_available(cuda_only=True).", "body": "Have I written custom code: N/A\r\nOS Platform and Distribution: N/A\r\nTensorFlow installed from: N/A\r\nTensorFlow version: 1.8.0\r\nBazel version: N/A\r\nCUDA/cuDNN version: 9.0/7.0\r\nGPU model and memory: NVIDIA GTX 1080 Ti\r\nExact command to reproduce: N/A\r\n\r\nIt would be very helpful to add usage examples on how to use `cudnn_rnn`, particularly on cross-compatibility between non-CUDA and CUDA-supporting devices. Users should be able to figure out how to save/restore weights to run their models with, say, `tf.nn.rnn_cell.LSTMCell` or `tf.contrib.cudnn_rnn.CudnnLSTM`.\r\n\r\nThere are classes that seem to do this (e.g. `tf.contrib.cudnn_rnn.CudnnLSTMSaveable`) but there are no easily accessible code examples showing how they should be used.\r\n\r\n*A possible feature request*: would it be possible to have a high-level wrapper that makes this choice automatically based on the availability of a CUDA device, saving and restoring weights accordingly? This should be possible with `tf.test.is_gpu_available(cuda_only=True)`."}