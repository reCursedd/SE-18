{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15326", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15326/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15326/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15326/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15326", "id": 281587540, "node_id": "MDU6SXNzdWUyODE1ODc1NDA=", "number": 15326, "title": "`import_scoped_meta_graph ()` use wrong name scope and fails to restore the collections", "user": {"login": "kzm4269", "id": 7009040, "node_id": "MDQ6VXNlcjcwMDkwNDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7009040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kzm4269", "html_url": "https://github.com/kzm4269", "followers_url": "https://api.github.com/users/kzm4269/followers", "following_url": "https://api.github.com/users/kzm4269/following{/other_user}", "gists_url": "https://api.github.com/users/kzm4269/gists{/gist_id}", "starred_url": "https://api.github.com/users/kzm4269/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kzm4269/subscriptions", "organizations_url": "https://api.github.com/users/kzm4269/orgs", "repos_url": "https://api.github.com/users/kzm4269/repos", "events_url": "https://api.github.com/users/kzm4269/events{/privacy}", "received_events_url": "https://api.github.com/users/kzm4269/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-13T00:46:03Z", "updated_at": "2017-12-15T12:05:05Z", "closed_at": "2017-12-15T12:05:05Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4.1</li>\n<li><strong>Python version</strong>: 3.6.3</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>This is a tiny code occurs the problem. In this code, <code>import_scoped_meta_graph_def()</code> create the different variables <code>s/v</code> and <code>s_1/v</code> but returns only <code>s/v</code>.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.python.framework <span class=\"pl-k\">import</span> meta_graph\n\ntf.Variable(<span class=\"pl-c1\">0</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>v<span class=\"pl-pds\">'</span></span>)\nmeta_graph_def, _ <span class=\"pl-k\">=</span> meta_graph.export_scoped_meta_graph()\n\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">2</span>):\n    var_list <span class=\"pl-k\">=</span> meta_graph.import_scoped_meta_graph(meta_graph_def,\n                                                   <span class=\"pl-v\">import_scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>s<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-c1\">print</span>(i, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>:<span class=\"pl-pds\">'</span></span>, var_list)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>----------------------<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-k\">for</span> op <span class=\"pl-k\">in</span> tf.get_default_graph().get_operations():\n        <span class=\"pl-c1\">print</span>(op.name)\n    <span class=\"pl-c1\">print</span>()</pre></div>\n<p>stdout:</p>\n<pre><code>0 : {'v:0': &lt;tf.Variable 's/v:0' shape=() dtype=int32_ref&gt;}\n----------------------\nv/initial_value\nv\nv/Assign\nv/read\ns/v/initial_value\ns/v\ns/v/Assign\ns/v/read\n\n1 : {'v:0': &lt;tf.Variable 's/v:0' shape=() dtype=int32_ref&gt;}\n----------------------\nv/initial_value\nv\nv/Assign\nv/read\ns/v/initial_value\ns/v\ns/v/Assign\ns/v/read\ns_1/v/initial_value\ns_1/v\ns_1/v/Assign\ns_1/v/read\n</code></pre>\n<p>This problem occurs when the name scope created by <code>import_graph_def()</code> inside <code>import_scoped_meta_graph_def()</code> does not match  the argument <code>import_scope</code>.</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/438604fc885208ee05f9eef2d0f2c630e1360a83/tensorflow/python/framework/meta_graph.py#L658-L663\">tensorflow/tensorflow/python/framework/meta_graph.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 658 to 663\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/438604fc885208ee05f9eef2d0f2c630e1360a83\">438604f</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L658\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"658\"></td>\n          <td id=\"LC658\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> importer.import_graph_def( </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L659\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"659\"></td>\n          <td id=\"LC659\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     input_graph_def, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>(import_scope <span class=\"pl-k\">or</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>), <span class=\"pl-v\">input_map</span><span class=\"pl-k\">=</span>input_map, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L660\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"660\"></td>\n          <td id=\"LC660\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-v\">producer_op_list</span><span class=\"pl-k\">=</span>producer_op_list) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L661\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"661\"></td>\n          <td id=\"LC661\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">  </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L662\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"662\"></td>\n          <td id=\"LC662\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> scope_to_prepend_to_names <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/<span class=\"pl-pds\">\"</span></span>.join( </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L663\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"663\"></td>\n          <td id=\"LC663\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     [part <span class=\"pl-k\">for</span> part <span class=\"pl-k\">in</span> [graph.get_name_scope(), import_scope] <span class=\"pl-k\">if</span> part]) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.4.1\nPython version: 3.6.3\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A\n\nDescribe the problem\nThis is a tiny code occurs the problem. In this code, import_scoped_meta_graph_def() create the different variables s/v and s_1/v but returns only s/v.\nimport tensorflow as tf\nfrom tensorflow.python.framework import meta_graph\n\ntf.Variable(0, name='v')\nmeta_graph_def, _ = meta_graph.export_scoped_meta_graph()\n\nfor i in range(2):\n    var_list = meta_graph.import_scoped_meta_graph(meta_graph_def,\n                                                   import_scope='s')\n    print(i, ':', var_list)\n    print('----------------------')\n    for op in tf.get_default_graph().get_operations():\n        print(op.name)\n    print()\nstdout:\n0 : {'v:0': <tf.Variable 's/v:0' shape=() dtype=int32_ref>}\n----------------------\nv/initial_value\nv\nv/Assign\nv/read\ns/v/initial_value\ns/v\ns/v/Assign\ns/v/read\n\n1 : {'v:0': <tf.Variable 's/v:0' shape=() dtype=int32_ref>}\n----------------------\nv/initial_value\nv\nv/Assign\nv/read\ns/v/initial_value\ns/v\ns/v/Assign\ns/v/read\ns_1/v/initial_value\ns_1/v\ns_1/v/Assign\ns_1/v/read\n\nThis problem occurs when the name scope created by import_graph_def() inside import_scoped_meta_graph_def() does not match  the argument import_scope.\n\n  \n    \n      tensorflow/tensorflow/python/framework/meta_graph.py\n    \n    \n        Lines 658 to 663\n      in\n      438604f\n    \n    \n    \n    \n\n        \n          \n           importer.import_graph_def( \n        \n\n        \n          \n               input_graph_def, name=(import_scope or \"\"), input_map=input_map, \n        \n\n        \n          \n               producer_op_list=producer_op_list) \n        \n\n        \n          \n            \n        \n\n        \n          \n           scope_to_prepend_to_names = \"/\".join( \n        \n\n        \n          \n               [part for part in [graph.get_name_scope(), import_scope] if part])", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.4.1\r\n- **Python version**: 3.6.3\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: N/A\r\n\r\n### Describe the problem\r\n\r\nThis is a tiny code occurs the problem. In this code, `import_scoped_meta_graph_def()` create the different variables `s/v` and `s_1/v` but returns only `s/v`.\r\n\r\n```python\r\nimport tensorflow as tf\r\nfrom tensorflow.python.framework import meta_graph\r\n\r\ntf.Variable(0, name='v')\r\nmeta_graph_def, _ = meta_graph.export_scoped_meta_graph()\r\n\r\nfor i in range(2):\r\n    var_list = meta_graph.import_scoped_meta_graph(meta_graph_def,\r\n                                                   import_scope='s')\r\n    print(i, ':', var_list)\r\n    print('----------------------')\r\n    for op in tf.get_default_graph().get_operations():\r\n        print(op.name)\r\n    print()\r\n```\r\n\r\nstdout:\r\n```\r\n0 : {'v:0': <tf.Variable 's/v:0' shape=() dtype=int32_ref>}\r\n----------------------\r\nv/initial_value\r\nv\r\nv/Assign\r\nv/read\r\ns/v/initial_value\r\ns/v\r\ns/v/Assign\r\ns/v/read\r\n\r\n1 : {'v:0': <tf.Variable 's/v:0' shape=() dtype=int32_ref>}\r\n----------------------\r\nv/initial_value\r\nv\r\nv/Assign\r\nv/read\r\ns/v/initial_value\r\ns/v\r\ns/v/Assign\r\ns/v/read\r\ns_1/v/initial_value\r\ns_1/v\r\ns_1/v/Assign\r\ns_1/v/read\r\n```\r\n\r\nThis problem occurs when the name scope created by `import_graph_def()` inside `import_scoped_meta_graph_def()` does not match  the argument `import_scope`.\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/438604fc885208ee05f9eef2d0f2c630e1360a83/tensorflow/python/framework/meta_graph.py#L658-L663"}