{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/158735210", "html_url": "https://github.com/tensorflow/tensorflow/issues/322#issuecomment-158735210", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/322", "id": 158735210, "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODczNTIxMA==", "user": {"login": "srjoglekar246", "id": 2099293, "node_id": "MDQ6VXNlcjIwOTkyOTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2099293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srjoglekar246", "html_url": "https://github.com/srjoglekar246", "followers_url": "https://api.github.com/users/srjoglekar246/followers", "following_url": "https://api.github.com/users/srjoglekar246/following{/other_user}", "gists_url": "https://api.github.com/users/srjoglekar246/gists{/gist_id}", "starred_url": "https://api.github.com/users/srjoglekar246/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srjoglekar246/subscriptions", "organizations_url": "https://api.github.com/users/srjoglekar246/orgs", "repos_url": "https://api.github.com/users/srjoglekar246/repos", "events_url": "https://api.github.com/users/srjoglekar246/events{/privacy}", "received_events_url": "https://api.github.com/users/srjoglekar246/received_events", "type": "User", "site_admin": false}, "created_at": "2015-11-22T07:29:53Z", "updated_at": "2015-11-22T07:29:53Z", "author_association": "MEMBER", "body_html": "<p>Creation won't be a problem atleast on the library's end I guess. As far as deletion is concerned, I have tried hacking around to see if its possible. Technically, it may be simple enough to delete all references to the node in question by deleting it from all graph collections and the Graph instance's inner dictionaries (which are used for methods like 'get_operation_by_name'). However, for complicated structures, you would first have to check if any other Ops depend on the node in question. If yes, deleting it would cause major issues. But I agree its a feature worth having (but with proper checking for dependencies ofcourse).</p>", "body_text": "Creation won't be a problem atleast on the library's end I guess. As far as deletion is concerned, I have tried hacking around to see if its possible. Technically, it may be simple enough to delete all references to the node in question by deleting it from all graph collections and the Graph instance's inner dictionaries (which are used for methods like 'get_operation_by_name'). However, for complicated structures, you would first have to check if any other Ops depend on the node in question. If yes, deleting it would cause major issues. But I agree its a feature worth having (but with proper checking for dependencies ofcourse).", "body": "Creation won't be a problem atleast on the library's end I guess. As far as deletion is concerned, I have tried hacking around to see if its possible. Technically, it may be simple enough to delete all references to the node in question by deleting it from all graph collections and the Graph instance's inner dictionaries (which are used for methods like 'get_operation_by_name'). However, for complicated structures, you would first have to check if any other Ops depend on the node in question. If yes, deleting it would cause major issues. But I agree its a feature worth having (but with proper checking for dependencies ofcourse).\n"}