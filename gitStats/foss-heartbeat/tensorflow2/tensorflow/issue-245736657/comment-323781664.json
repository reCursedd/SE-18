{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/323781664", "html_url": "https://github.com/tensorflow/tensorflow/issues/11786#issuecomment-323781664", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11786", "id": 323781664, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzc4MTY2NA==", "user": {"login": "GPhilo", "id": 4441724, "node_id": "MDQ6VXNlcjQ0NDE3MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4441724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GPhilo", "html_url": "https://github.com/GPhilo", "followers_url": "https://api.github.com/users/GPhilo/followers", "following_url": "https://api.github.com/users/GPhilo/following{/other_user}", "gists_url": "https://api.github.com/users/GPhilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/GPhilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GPhilo/subscriptions", "organizations_url": "https://api.github.com/users/GPhilo/orgs", "repos_url": "https://api.github.com/users/GPhilo/repos", "events_url": "https://api.github.com/users/GPhilo/events{/privacy}", "received_events_url": "https://api.github.com/users/GPhilo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-21T15:50:42Z", "updated_at": "2017-08-21T16:17:21Z", "author_association": "NONE", "body_html": "<p>I have a similar error message, but I'm not sure if I got the proposed solution correctly.<br>\nThe code raising the error:</p>\n<pre><code>dataset = tf.contrib.data.TFRecordDataset(shard_files)\ndataset = dataset.map(partial(decoder.decode, items=['label', 'image']))\n</code></pre>\n<p>where <code>decoder</code> is a <code>tf.contrib.slim.tfexample_decoder.TFExampleDecoder()</code></p>\n<p>So, if I got the issue right, since <code>decoder.decode()</code> returns a <strong>list</strong> <code>[label, decoded_image_data]</code> this is implicitly casted to a tensor (and thus the cast fails because <code>label</code> and <code>image_data</code> have different types).<br>\nHowever, if I write a lambda that wraps tuple() around the result of the call to <code>decoder.decode()</code>, this should fix the problem:</p>\n<pre><code>dataset = dataset.map( lambda s : tuple(decoder.decode(s, items=['label', 'image'])))\n</code></pre>\n<p><del>I still get the error, however:</del></p>\n<blockquote>\n<p><del>TypeError: Cannot convert a list containing a tensor of dtype &lt;dtype: 'float32'&gt; to &lt;dtype: 'int64'&gt; (Tensor is: &lt;tf.Tensor 'distort_image/Mul:0' shape=(224, 224, 3) dtype=float32&gt;)</del></p>\n</blockquote>\n<p>Am I getting the solution wrong? Is this <em>really</em> the intended way to use the API? Even when many other TF APIs return lists instead of tuples?</p>\n<p>EDIT: I had map() in several places and, of course, the new error was coming from the line below the one I fixed.</p>", "body_text": "I have a similar error message, but I'm not sure if I got the proposed solution correctly.\nThe code raising the error:\ndataset = tf.contrib.data.TFRecordDataset(shard_files)\ndataset = dataset.map(partial(decoder.decode, items=['label', 'image']))\n\nwhere decoder is a tf.contrib.slim.tfexample_decoder.TFExampleDecoder()\nSo, if I got the issue right, since decoder.decode() returns a list [label, decoded_image_data] this is implicitly casted to a tensor (and thus the cast fails because label and image_data have different types).\nHowever, if I write a lambda that wraps tuple() around the result of the call to decoder.decode(), this should fix the problem:\ndataset = dataset.map( lambda s : tuple(decoder.decode(s, items=['label', 'image'])))\n\nI still get the error, however:\n\nTypeError: Cannot convert a list containing a tensor of dtype <dtype: 'float32'> to <dtype: 'int64'> (Tensor is: <tf.Tensor 'distort_image/Mul:0' shape=(224, 224, 3) dtype=float32>)\n\nAm I getting the solution wrong? Is this really the intended way to use the API? Even when many other TF APIs return lists instead of tuples?\nEDIT: I had map() in several places and, of course, the new error was coming from the line below the one I fixed.", "body": "I have a similar error message, but I'm not sure if I got the proposed solution correctly.\r\n The code raising the error:\r\n```\r\ndataset = tf.contrib.data.TFRecordDataset(shard_files)\r\ndataset = dataset.map(partial(decoder.decode, items=['label', 'image']))\r\n```\r\nwhere `decoder` is a `tf.contrib.slim.tfexample_decoder.TFExampleDecoder()`\r\n\r\nSo, if I got the issue right, since `decoder.decode()` returns a **list** `[label, decoded_image_data]` this is implicitly casted to a tensor (and thus the cast fails because `label` and `image_data` have different types).\r\nHowever, if I write a lambda that wraps tuple() around the result of the call to `decoder.decode()`, this should fix the problem:\r\n\r\n```\r\ndataset = dataset.map( lambda s : tuple(decoder.decode(s, items=['label', 'image'])))\r\n```\r\n~~I still get the error, however:~~\r\n\r\n> ~~TypeError: Cannot convert a list containing a tensor of dtype <dtype: 'float32'> to <dtype: 'int64'> (Tensor is: <tf.Tensor 'distort_image/Mul:0' shape=(224, 224, 3) dtype=float32>)~~\r\n\r\nAm I getting the solution wrong? Is this *really* the intended way to use the API? Even when many other TF APIs return lists instead of tuples?\r\n\r\nEDIT: I had map() in several places and, of course, the new error was coming from the line below the one I fixed."}