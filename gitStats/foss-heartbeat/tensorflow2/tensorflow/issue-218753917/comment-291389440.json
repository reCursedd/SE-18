{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/291389440", "html_url": "https://github.com/tensorflow/tensorflow/issues/8904#issuecomment-291389440", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8904", "id": 291389440, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTM4OTQ0MA==", "user": {"login": "petrosmol", "id": 22332205, "node_id": "MDQ6VXNlcjIyMzMyMjA1", "avatar_url": "https://avatars0.githubusercontent.com/u/22332205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrosmol", "html_url": "https://github.com/petrosmol", "followers_url": "https://api.github.com/users/petrosmol/followers", "following_url": "https://api.github.com/users/petrosmol/following{/other_user}", "gists_url": "https://api.github.com/users/petrosmol/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrosmol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrosmol/subscriptions", "organizations_url": "https://api.github.com/users/petrosmol/orgs", "repos_url": "https://api.github.com/users/petrosmol/repos", "events_url": "https://api.github.com/users/petrosmol/events{/privacy}", "received_events_url": "https://api.github.com/users/petrosmol/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-04T04:21:00Z", "updated_at": "2017-04-04T04:21:00Z", "author_association": "MEMBER", "body_html": "<p>TL;DR: Yes, we are actively working on kernel methods in general. As of last week there is a <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/kernel_methods\">kernel_methods</a> package which is part of tensorflow.contrib. Kernel SVMs are supported indirectly (with some more work on user's behalf, see below). Note that this is all very recent so you need to build from source (and some changes might still need some time to propagate). Read on for details.</p>\n<ul>\n<li>We don't have support for <em>exact</em> kernel methods and AFAIK, there is no plan to support these any time soon. However, we do support primal (approximate) kernel methods. We have implemented Random Fourier Features (RFF) that approximate the RBF kernel. This is the equivalent of sklearn's RBFSampler. See <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/kernel_methods/python/mappers/random_fourier_features.py\">here</a>. You can use RFF to transform your input features and then apply a linear model on top of it. These are typically much faster than exact kernels and perform pretty well in practice (quality-wise). Note that this works with dense input features only (so images should be fine)</li>\n<li>If you want to use a pre-packaged estimator, we have implemented a Linear Classifier that uses RFF to preprocess the input features. This is not kernel SVMs, you can think of it as a \"kernelization\" of the LinearClassifier model from tensorflow.contrib.learn. The loss used is logistic (for binary) and cross entropy (for multiclass). See <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/kernel_methods/python/kernel_estimators.py\">here</a> for the estimator and <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/kernel_methods/python/kernel_estimators_test.py\">here</a> for sample usage.</li>\n<li>If you really want to SVMs, you have the following 2 options:\n<ul>\n<li>If your problem is binary classification you can use the pre-packed SVM estimator (which uses SDCA) but you should first apply <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/kernel_methods/python/mappers/random_fourier_features.py\">RFF</a> to your features (as part of your input_fn). Make sure you update your feature columns accordingly.</li>\n<li>For multiclass, you can implement your own 1-vs-all or 1-vs-1 using binary SVMs. There is no multiclass support for SVMs currently (but there are plans for it)</li>\n</ul>\n</li>\n</ul>", "body_text": "TL;DR: Yes, we are actively working on kernel methods in general. As of last week there is a kernel_methods package which is part of tensorflow.contrib. Kernel SVMs are supported indirectly (with some more work on user's behalf, see below). Note that this is all very recent so you need to build from source (and some changes might still need some time to propagate). Read on for details.\n\nWe don't have support for exact kernel methods and AFAIK, there is no plan to support these any time soon. However, we do support primal (approximate) kernel methods. We have implemented Random Fourier Features (RFF) that approximate the RBF kernel. This is the equivalent of sklearn's RBFSampler. See here. You can use RFF to transform your input features and then apply a linear model on top of it. These are typically much faster than exact kernels and perform pretty well in practice (quality-wise). Note that this works with dense input features only (so images should be fine)\nIf you want to use a pre-packaged estimator, we have implemented a Linear Classifier that uses RFF to preprocess the input features. This is not kernel SVMs, you can think of it as a \"kernelization\" of the LinearClassifier model from tensorflow.contrib.learn. The loss used is logistic (for binary) and cross entropy (for multiclass). See here for the estimator and here for sample usage.\nIf you really want to SVMs, you have the following 2 options:\n\nIf your problem is binary classification you can use the pre-packed SVM estimator (which uses SDCA) but you should first apply RFF to your features (as part of your input_fn). Make sure you update your feature columns accordingly.\nFor multiclass, you can implement your own 1-vs-all or 1-vs-1 using binary SVMs. There is no multiclass support for SVMs currently (but there are plans for it)", "body": "TL;DR: Yes, we are actively working on kernel methods in general. As of last week there is a [kernel_methods](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/kernel_methods) package which is part of tensorflow.contrib. Kernel SVMs are supported indirectly (with some more work on user's behalf, see below). Note that this is all very recent so you need to build from source (and some changes might still need some time to propagate). Read on for details.\r\n\r\n* We don't have support for *exact* kernel methods and AFAIK, there is no plan to support these any time soon. However, we do support primal (approximate) kernel methods. We have implemented Random Fourier Features (RFF) that approximate the RBF kernel. This is the equivalent of sklearn's RBFSampler. See [here](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/kernel_methods/python/mappers/random_fourier_features.py). You can use RFF to transform your input features and then apply a linear model on top of it. These are typically much faster than exact kernels and perform pretty well in practice (quality-wise). Note that this works with dense input features only (so images should be fine)\r\n* If you want to use a pre-packaged estimator, we have implemented a Linear Classifier that uses RFF to preprocess the input features. This is not kernel SVMs, you can think of it as a \"kernelization\" of the LinearClassifier model from tensorflow.contrib.learn. The loss used is logistic (for binary) and cross entropy (for multiclass). See [here](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/kernel_methods/python/kernel_estimators.py) for the estimator and [here](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/kernel_methods/python/kernel_estimators_test.py) for sample usage.\r\n* If you really want to SVMs, you have the following 2 options:\r\n   * If your problem is binary classification you can use the pre-packed SVM estimator (which uses SDCA) but you should first apply [RFF](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/kernel_methods/python/mappers/random_fourier_features.py) to your features (as part of your input_fn). Make sure you update your feature columns accordingly.\r\n   * For multiclass, you can implement your own 1-vs-all or 1-vs-1 using binary SVMs. There is no multiclass support for SVMs currently (but there are plans for it)"}