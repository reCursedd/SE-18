{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/440050995", "html_url": "https://github.com/tensorflow/tensorflow/issues/23641#issuecomment-440050995", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23641", "id": 440050995, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDA1MDk5NQ==", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-19T21:39:49Z", "updated_at": "2018-11-19T21:39:49Z", "author_association": "MEMBER", "body_html": "<p>I think this is a matter of print-time precision. If I subtract the tf result from the numpy result I get exactly zero:</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\ntf.enable_eager_execution()\n\ndef compute_area(sides):\n  a = sides[:,0] # 5.0, 2.3\n  b = sides[:,1] # 3.0, 4.1\n  c = sides[:,2] # 7.1, 4.8\n\n  s = (a + b + c) * 0.5 # (a + b) is a short-cut to tf.add(a, b)\n  areasq = s * (s - a) * (s - b) * (s - c) # (a * b) is a short-cut to tf.multiply(a, b), not tf.matmul(a, b)\n  return tf.sqrt(areasq)\n\na = compute_area(tf.constant([[3.000000001, 4.0, 5.0],],dtype='float64'))\ns = (3.000000001 + 4 + 5) * 0.5\nareasq = s * (s - 3.000000001) * (s - 4) * (s - 5)\n\ndif = np.sqrt(areasq) - a.numpy()\ndif == 0.\n</code></pre>\n<p>(prints array([ True]))</p>", "body_text": "I think this is a matter of print-time precision. If I subtract the tf result from the numpy result I get exactly zero:\nimport tensorflow as tf\nimport numpy as np\ntf.enable_eager_execution()\n\ndef compute_area(sides):\n  a = sides[:,0] # 5.0, 2.3\n  b = sides[:,1] # 3.0, 4.1\n  c = sides[:,2] # 7.1, 4.8\n\n  s = (a + b + c) * 0.5 # (a + b) is a short-cut to tf.add(a, b)\n  areasq = s * (s - a) * (s - b) * (s - c) # (a * b) is a short-cut to tf.multiply(a, b), not tf.matmul(a, b)\n  return tf.sqrt(areasq)\n\na = compute_area(tf.constant([[3.000000001, 4.0, 5.0],],dtype='float64'))\ns = (3.000000001 + 4 + 5) * 0.5\nareasq = s * (s - 3.000000001) * (s - 4) * (s - 5)\n\ndif = np.sqrt(areasq) - a.numpy()\ndif == 0.\n\n(prints array([ True]))", "body": "I think this is a matter of print-time precision. If I subtract the tf result from the numpy result I get exactly zero:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\ntf.enable_eager_execution()\r\n\r\ndef compute_area(sides):\r\n  a = sides[:,0] # 5.0, 2.3\r\n  b = sides[:,1] # 3.0, 4.1\r\n  c = sides[:,2] # 7.1, 4.8\r\n\r\n  s = (a + b + c) * 0.5 # (a + b) is a short-cut to tf.add(a, b)\r\n  areasq = s * (s - a) * (s - b) * (s - c) # (a * b) is a short-cut to tf.multiply(a, b), not tf.matmul(a, b)\r\n  return tf.sqrt(areasq)\r\n\r\na = compute_area(tf.constant([[3.000000001, 4.0, 5.0],],dtype='float64'))\r\ns = (3.000000001 + 4 + 5) * 0.5\r\nareasq = s * (s - 3.000000001) * (s - 4) * (s - 5)\r\n\r\ndif = np.sqrt(areasq) - a.numpy()\r\ndif == 0.\r\n```\r\n(prints array([ True]))"}