{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/346816675", "html_url": "https://github.com/tensorflow/tensorflow/issues/14851#issuecomment-346816675", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14851", "id": 346816675, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjgxNjY3NQ==", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-24T12:19:38Z", "updated_at": "2017-11-24T12:19:38Z", "author_association": "MEMBER", "body_html": "<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\na <span class=\"pl-k\">=</span> np.arange(<span class=\"pl-c1\">192</span>).reshape(<span class=\"pl-c1\">24</span>, <span class=\"pl-c1\">8</span>)\n<span class=\"pl-c1\">print</span>(a)\n\na <span class=\"pl-k\">=</span> tf.Variable(a, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\nids <span class=\"pl-k\">=</span> tf.SparseTensor(\n<span class=\"pl-v\">indices</span><span class=\"pl-k\">=</span>[[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>], [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">0</span>], [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>], [<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">0</span>], [<span class=\"pl-c1\">9</span>, <span class=\"pl-c1\">1</span>]],\n<span class=\"pl-v\">values</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>],\n<span class=\"pl-v\">dense_shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>])\nweights <span class=\"pl-k\">=</span> tf.SparseTensor(\n<span class=\"pl-v\">indices</span><span class=\"pl-k\">=</span>[[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>], [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">0</span>], [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>], [<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">0</span>], [<span class=\"pl-c1\">9</span>, <span class=\"pl-c1\">1</span>]],\n<span class=\"pl-v\">values</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0.2</span>, <span class=\"pl-c1\">0.4</span>, <span class=\"pl-c1\">0.4</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>],\n<span class=\"pl-v\">dense_shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>])\nb <span class=\"pl-k\">=</span> tf.nn.embedding_lookup_sparse(\na, ids, weights, <span class=\"pl-v\">partition_strategy</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>mod<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">combiner</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>mean<span class=\"pl-pds\">'</span></span>)\n\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run(tf.global_variables_initializer())\n[value] <span class=\"pl-k\">=</span> sess.run([b])\n\nnp.set_printoptions(<span class=\"pl-v\">precision</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\n<span class=\"pl-c1\">print</span>(value)\n<span class=\"pl-c1\">print</span>(value.shape)</pre></div>\n<div class=\"highlight highlight-source-shell\"><pre>[[  nan   nan   nan   nan   nan   nan   nan   nan]\n [ 80.   81.   82.   83.   84.   85.   86.   87. ]\n [ 17.6  18.6  19.6  20.6  21.6  22.6  23.6  24.6]\n [ 32.   33.   34.   35.   36.   37.   38.   39. ]\n [  nan   nan   nan   nan   nan   nan   nan   nan]\n [  nan   nan   nan   nan   nan   nan   nan   nan]\n [  nan   nan   nan   nan   nan   nan   nan   nan]\n [  nan   nan   nan   nan   nan   nan   nan   nan]\n [  nan   nan   nan   nan   nan   nan   nan   nan]\n [ 40.   41.   42.   43.   44.   45.   46.   47. ]]\n(10, 8)</pre></div>", "body_text": "import numpy as np\nimport tensorflow as tf\n\na = np.arange(192).reshape(24, 8)\nprint(a)\n\na = tf.Variable(a, dtype=tf.float32)\nids = tf.SparseTensor(\nindices=[[1, 0], [2, 0], [2, 1], [2, 2], [3, 0], [9, 1]],\nvalues=[10, 1, 2, 3, 4, 5],\ndense_shape=[1, 1])\nweights = tf.SparseTensor(\nindices=[[1, 0], [2, 0], [2, 1], [2, 2], [3, 0], [9, 1]],\nvalues=[1, 0.2, 0.4, 0.4, 1, 1],\ndense_shape=[1, 1])\nb = tf.nn.embedding_lookup_sparse(\na, ids, weights, partition_strategy='mod', combiner='mean')\n\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\n[value] = sess.run([b])\n\nnp.set_printoptions(precision=2)\nprint(value)\nprint(value.shape)\n[[  nan   nan   nan   nan   nan   nan   nan   nan]\n [ 80.   81.   82.   83.   84.   85.   86.   87. ]\n [ 17.6  18.6  19.6  20.6  21.6  22.6  23.6  24.6]\n [ 32.   33.   34.   35.   36.   37.   38.   39. ]\n [  nan   nan   nan   nan   nan   nan   nan   nan]\n [  nan   nan   nan   nan   nan   nan   nan   nan]\n [  nan   nan   nan   nan   nan   nan   nan   nan]\n [  nan   nan   nan   nan   nan   nan   nan   nan]\n [  nan   nan   nan   nan   nan   nan   nan   nan]\n [ 40.   41.   42.   43.   44.   45.   46.   47. ]]\n(10, 8)", "body": "```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\na = np.arange(192).reshape(24, 8)\r\nprint(a)\r\n\r\na = tf.Variable(a, dtype=tf.float32)\r\nids = tf.SparseTensor(\r\nindices=[[1, 0], [2, 0], [2, 1], [2, 2], [3, 0], [9, 1]],\r\nvalues=[10, 1, 2, 3, 4, 5],\r\ndense_shape=[1, 1])\r\nweights = tf.SparseTensor(\r\nindices=[[1, 0], [2, 0], [2, 1], [2, 2], [3, 0], [9, 1]],\r\nvalues=[1, 0.2, 0.4, 0.4, 1, 1],\r\ndense_shape=[1, 1])\r\nb = tf.nn.embedding_lookup_sparse(\r\na, ids, weights, partition_strategy='mod', combiner='mean')\r\n\r\nsess = tf.Session()\r\nsess.run(tf.global_variables_initializer())\r\n[value] = sess.run([b])\r\n\r\nnp.set_printoptions(precision=2)\r\nprint(value)\r\nprint(value.shape)\r\n```\r\n\r\n```bash\r\n[[  nan   nan   nan   nan   nan   nan   nan   nan]\r\n [ 80.   81.   82.   83.   84.   85.   86.   87. ]\r\n [ 17.6  18.6  19.6  20.6  21.6  22.6  23.6  24.6]\r\n [ 32.   33.   34.   35.   36.   37.   38.   39. ]\r\n [  nan   nan   nan   nan   nan   nan   nan   nan]\r\n [  nan   nan   nan   nan   nan   nan   nan   nan]\r\n [  nan   nan   nan   nan   nan   nan   nan   nan]\r\n [  nan   nan   nan   nan   nan   nan   nan   nan]\r\n [  nan   nan   nan   nan   nan   nan   nan   nan]\r\n [ 40.   41.   42.   43.   44.   45.   46.   47. ]]\r\n(10, 8)\r\n```"}