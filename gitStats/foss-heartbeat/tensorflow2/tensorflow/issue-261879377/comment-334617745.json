{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/334617745", "html_url": "https://github.com/tensorflow/tensorflow/issues/13426#issuecomment-334617745", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13426", "id": 334617745, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDYxNzc0NQ==", "user": {"login": "daj", "id": 739125, "node_id": "MDQ6VXNlcjczOTEyNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/739125?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daj", "html_url": "https://github.com/daj", "followers_url": "https://api.github.com/users/daj/followers", "following_url": "https://api.github.com/users/daj/following{/other_user}", "gists_url": "https://api.github.com/users/daj/gists{/gist_id}", "starred_url": "https://api.github.com/users/daj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daj/subscriptions", "organizations_url": "https://api.github.com/users/daj/orgs", "repos_url": "https://api.github.com/users/daj/repos", "events_url": "https://api.github.com/users/daj/events{/privacy}", "received_events_url": "https://api.github.com/users/daj/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-05T23:17:22Z", "updated_at": "2017-10-05T23:19:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I tried all the steps from beginning to end with a fresh 1.3.0-devel container, and did a <code>git pull</code> for the <code>r1.3</code> branch.  I reproduced the problem again, then added the <code>--config=monolithic</code> flag, and hit a very similar looking problem (I'm pretty sure I've seen the <code>compilation of rule '@protobuf//:protobuf_lite'</code> error earlier too).</p>\n<pre><code># bazel build --local_resources 4096,4.0,1.0 -j 2 -c opt --copt=\"-DSELECTIVE_REGISTRATION\" --copt=\"-DSUPPORT_SELECTIVE_REGISTRATION\" //tensorflow/contrib/android:libtensorflow_inference.so     --host_crosstool_top=@bazel_tools//tools/cpp:toolchain --crosstool_top=//external:android/crosstool --cpu=armeabi-v7a --verbose_failures --config=monolithic\n&lt;snip&gt;\nINFO: Found 1 target...\nERROR: /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/external/protobuf/BUILD:93:1: C++ compilation of rule '@protobuf//:protobuf_lite' failed: false failed: error executing command \n  (cd /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow &amp;&amp; \\\n  exec env - \\\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \\\n    PWD=/proc/self/cwd \\\n    PYTHON_BIN_PATH=/usr/bin/python \\\n    PYTHON_LIB_PATH=/usr/local/lib/python2.7/dist-packages \\\n    TF_NEED_CUDA=0 \\\n    TF_NEED_OPENCL=0 \\\n  /bin/false -DSELECTIVE_REGISTRATION -DSUPPORT_SELECTIVE_REGISTRATION -MD -MF bazel-out/stub_armeabi-v7a-opt/bin/external/protobuf/_objs/protobuf_lite/external/protobuf/src/google/protobuf/message_lite.pic.d '-frandom-seed=bazel-out/stub_armeabi-v7a-opt/bin/external/protobuf/_objs/protobuf_lite/external/protobuf/src/google/protobuf/message_lite.pic.o' -fPIC -iquote external/protobuf -iquote bazel-out/stub_armeabi-v7a-opt/genfiles/external/protobuf -iquote external/bazel_tools -iquote bazel-out/stub_armeabi-v7a-opt/genfiles/external/bazel_tools -isystem external/protobuf/src -isystem bazel-out/stub_armeabi-v7a-opt/genfiles/external/protobuf/src -isystem external/bazel_tools/tools/cpp/gcc3 -DHAVE_PTHREAD -Wall -Wwrite-strings -Woverloaded-virtual -Wno-sign-compare -Wno-unused-function -c external/protobuf/src/google/protobuf/message_lite.cc -o bazel-out/stub_armeabi-v7a-opt/bin/external/protobuf/_objs/protobuf_lite/external/protobuf/src/google/protobuf/message_lite.pic.o): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1.\nTarget //tensorflow/contrib/android:libtensorflow_inference.so failed to build\n</code></pre>\n<p>In case it helps, here's the content of the <code>ops_to_register.h</code> file:</p>\n<pre><code># cat ops_to_register.h \n// This file was autogenerated by print_selective_registration_header.py\n#ifndef OPS_TO_REGISTER\n#define OPS_TO_REGISTER\n\n    namespace {\n      constexpr const char* skip(const char* x) {\n        return (*x) ? (*x == ' ' ? skip(x + 1) : x) : x;\n      }\n\n      constexpr bool isequal(const char* x, const char* y) {\n        return (*skip(x) &amp;&amp; *skip(y))\n                   ? (*skip(x) == *skip(y) &amp;&amp; isequal(skip(x) + 1, skip(y) + 1))\n                   : (!*skip(x) &amp;&amp; !*skip(y));\n      }\n\n      template&lt;int N&gt;\n      struct find_in {\n        static constexpr bool f(const char* x, const char* const y[N]) {\n          return isequal(x, y[0]) || find_in&lt;N - 1&gt;::f(x, y + 1);\n        }\n      };\n\n      template&lt;&gt;\n      struct find_in&lt;0&gt; {\n        static constexpr bool f(const char* x, const char* const y[]) {\n          return false;\n        }\n      };\n    }  // end namespace\n    constexpr const char* kNecessaryOpKernelClasses[] = {\n\"BinaryOp&lt;CPUDevice, functor::add&lt;float&gt;&gt;\",\n\"BiasOp&lt;CPUDevice, float&gt;\",\n\"ConstantOp\",\n\"Conv2DOp&lt;CPUDevice, float&gt;\",\n\"MatMulOp&lt;CPUDevice, float, false &gt;\",\n\"MaxPoolingOp&lt;CPUDevice, float&gt;\",\n\"NoOp\",\n\"PlaceholderOp\",\n\"ReluOp&lt;CPUDevice, float&gt;\",\n\"ReshapeOp\",\n\"SoftmaxOp&lt;CPUDevice, float&gt;\",\n\"RecvOp\",\n\"SendOp\",\n};\n#define SHOULD_REGISTER_OP_KERNEL(clz) (find_in&lt;sizeof(kNecessaryOpKernelClasses) / sizeof(*kNecessaryOpKernelClasses)&gt;::f(clz, kNecessaryOpKernelClasses))\n\nconstexpr inline bool ShouldRegisterOp(const char op[]) {\n  return false\n     || isequal(op, \"Add\")\n     || isequal(op, \"BiasAdd\")\n     || isequal(op, \"Const\")\n     || isequal(op, \"Conv2D\")\n     || isequal(op, \"MatMul\")\n     || isequal(op, \"MaxPool\")\n     || isequal(op, \"NoOp\")\n     || isequal(op, \"Placeholder\")\n     || isequal(op, \"Relu\")\n     || isequal(op, \"Reshape\")\n     || isequal(op, \"Softmax\")\n     || isequal(op, \"_Recv\")\n     || isequal(op, \"_Send\")\n  ;\n}\n#define SHOULD_REGISTER_OP(op) ShouldRegisterOp(op)\n\n#define SHOULD_REGISTER_OP_GRADIENT false\n#endif\n</code></pre>", "body_text": "I tried all the steps from beginning to end with a fresh 1.3.0-devel container, and did a git pull for the r1.3 branch.  I reproduced the problem again, then added the --config=monolithic flag, and hit a very similar looking problem (I'm pretty sure I've seen the compilation of rule '@protobuf//:protobuf_lite' error earlier too).\n# bazel build --local_resources 4096,4.0,1.0 -j 2 -c opt --copt=\"-DSELECTIVE_REGISTRATION\" --copt=\"-DSUPPORT_SELECTIVE_REGISTRATION\" //tensorflow/contrib/android:libtensorflow_inference.so     --host_crosstool_top=@bazel_tools//tools/cpp:toolchain --crosstool_top=//external:android/crosstool --cpu=armeabi-v7a --verbose_failures --config=monolithic\n<snip>\nINFO: Found 1 target...\nERROR: /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/external/protobuf/BUILD:93:1: C++ compilation of rule '@protobuf//:protobuf_lite' failed: false failed: error executing command \n  (cd /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow && \\\n  exec env - \\\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \\\n    PWD=/proc/self/cwd \\\n    PYTHON_BIN_PATH=/usr/bin/python \\\n    PYTHON_LIB_PATH=/usr/local/lib/python2.7/dist-packages \\\n    TF_NEED_CUDA=0 \\\n    TF_NEED_OPENCL=0 \\\n  /bin/false -DSELECTIVE_REGISTRATION -DSUPPORT_SELECTIVE_REGISTRATION -MD -MF bazel-out/stub_armeabi-v7a-opt/bin/external/protobuf/_objs/protobuf_lite/external/protobuf/src/google/protobuf/message_lite.pic.d '-frandom-seed=bazel-out/stub_armeabi-v7a-opt/bin/external/protobuf/_objs/protobuf_lite/external/protobuf/src/google/protobuf/message_lite.pic.o' -fPIC -iquote external/protobuf -iquote bazel-out/stub_armeabi-v7a-opt/genfiles/external/protobuf -iquote external/bazel_tools -iquote bazel-out/stub_armeabi-v7a-opt/genfiles/external/bazel_tools -isystem external/protobuf/src -isystem bazel-out/stub_armeabi-v7a-opt/genfiles/external/protobuf/src -isystem external/bazel_tools/tools/cpp/gcc3 -DHAVE_PTHREAD -Wall -Wwrite-strings -Woverloaded-virtual -Wno-sign-compare -Wno-unused-function -c external/protobuf/src/google/protobuf/message_lite.cc -o bazel-out/stub_armeabi-v7a-opt/bin/external/protobuf/_objs/protobuf_lite/external/protobuf/src/google/protobuf/message_lite.pic.o): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1.\nTarget //tensorflow/contrib/android:libtensorflow_inference.so failed to build\n\nIn case it helps, here's the content of the ops_to_register.h file:\n# cat ops_to_register.h \n// This file was autogenerated by print_selective_registration_header.py\n#ifndef OPS_TO_REGISTER\n#define OPS_TO_REGISTER\n\n    namespace {\n      constexpr const char* skip(const char* x) {\n        return (*x) ? (*x == ' ' ? skip(x + 1) : x) : x;\n      }\n\n      constexpr bool isequal(const char* x, const char* y) {\n        return (*skip(x) && *skip(y))\n                   ? (*skip(x) == *skip(y) && isequal(skip(x) + 1, skip(y) + 1))\n                   : (!*skip(x) && !*skip(y));\n      }\n\n      template<int N>\n      struct find_in {\n        static constexpr bool f(const char* x, const char* const y[N]) {\n          return isequal(x, y[0]) || find_in<N - 1>::f(x, y + 1);\n        }\n      };\n\n      template<>\n      struct find_in<0> {\n        static constexpr bool f(const char* x, const char* const y[]) {\n          return false;\n        }\n      };\n    }  // end namespace\n    constexpr const char* kNecessaryOpKernelClasses[] = {\n\"BinaryOp<CPUDevice, functor::add<float>>\",\n\"BiasOp<CPUDevice, float>\",\n\"ConstantOp\",\n\"Conv2DOp<CPUDevice, float>\",\n\"MatMulOp<CPUDevice, float, false >\",\n\"MaxPoolingOp<CPUDevice, float>\",\n\"NoOp\",\n\"PlaceholderOp\",\n\"ReluOp<CPUDevice, float>\",\n\"ReshapeOp\",\n\"SoftmaxOp<CPUDevice, float>\",\n\"RecvOp\",\n\"SendOp\",\n};\n#define SHOULD_REGISTER_OP_KERNEL(clz) (find_in<sizeof(kNecessaryOpKernelClasses) / sizeof(*kNecessaryOpKernelClasses)>::f(clz, kNecessaryOpKernelClasses))\n\nconstexpr inline bool ShouldRegisterOp(const char op[]) {\n  return false\n     || isequal(op, \"Add\")\n     || isequal(op, \"BiasAdd\")\n     || isequal(op, \"Const\")\n     || isequal(op, \"Conv2D\")\n     || isequal(op, \"MatMul\")\n     || isequal(op, \"MaxPool\")\n     || isequal(op, \"NoOp\")\n     || isequal(op, \"Placeholder\")\n     || isequal(op, \"Relu\")\n     || isequal(op, \"Reshape\")\n     || isequal(op, \"Softmax\")\n     || isequal(op, \"_Recv\")\n     || isequal(op, \"_Send\")\n  ;\n}\n#define SHOULD_REGISTER_OP(op) ShouldRegisterOp(op)\n\n#define SHOULD_REGISTER_OP_GRADIENT false\n#endif", "body": "I tried all the steps from beginning to end with a fresh 1.3.0-devel container, and did a `git pull` for the `r1.3` branch.  I reproduced the problem again, then added the `--config=monolithic` flag, and hit a very similar looking problem (I'm pretty sure I've seen the `compilation of rule '@protobuf//:protobuf_lite'` error earlier too). \r\n```\r\n# bazel build --local_resources 4096,4.0,1.0 -j 2 -c opt --copt=\"-DSELECTIVE_REGISTRATION\" --copt=\"-DSUPPORT_SELECTIVE_REGISTRATION\" //tensorflow/contrib/android:libtensorflow_inference.so     --host_crosstool_top=@bazel_tools//tools/cpp:toolchain --crosstool_top=//external:android/crosstool --cpu=armeabi-v7a --verbose_failures --config=monolithic\r\n<snip>\r\nINFO: Found 1 target...\r\nERROR: /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/external/protobuf/BUILD:93:1: C++ compilation of rule '@protobuf//:protobuf_lite' failed: false failed: error executing command \r\n  (cd /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/tensorflow && \\\r\n  exec env - \\\r\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \\\r\n    PWD=/proc/self/cwd \\\r\n    PYTHON_BIN_PATH=/usr/bin/python \\\r\n    PYTHON_LIB_PATH=/usr/local/lib/python2.7/dist-packages \\\r\n    TF_NEED_CUDA=0 \\\r\n    TF_NEED_OPENCL=0 \\\r\n  /bin/false -DSELECTIVE_REGISTRATION -DSUPPORT_SELECTIVE_REGISTRATION -MD -MF bazel-out/stub_armeabi-v7a-opt/bin/external/protobuf/_objs/protobuf_lite/external/protobuf/src/google/protobuf/message_lite.pic.d '-frandom-seed=bazel-out/stub_armeabi-v7a-opt/bin/external/protobuf/_objs/protobuf_lite/external/protobuf/src/google/protobuf/message_lite.pic.o' -fPIC -iquote external/protobuf -iquote bazel-out/stub_armeabi-v7a-opt/genfiles/external/protobuf -iquote external/bazel_tools -iquote bazel-out/stub_armeabi-v7a-opt/genfiles/external/bazel_tools -isystem external/protobuf/src -isystem bazel-out/stub_armeabi-v7a-opt/genfiles/external/protobuf/src -isystem external/bazel_tools/tools/cpp/gcc3 -DHAVE_PTHREAD -Wall -Wwrite-strings -Woverloaded-virtual -Wno-sign-compare -Wno-unused-function -c external/protobuf/src/google/protobuf/message_lite.cc -o bazel-out/stub_armeabi-v7a-opt/bin/external/protobuf/_objs/protobuf_lite/external/protobuf/src/google/protobuf/message_lite.pic.o): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1.\r\nTarget //tensorflow/contrib/android:libtensorflow_inference.so failed to build\r\n```\r\n\r\nIn case it helps, here's the content of the `ops_to_register.h` file:\r\n```\r\n# cat ops_to_register.h \r\n// This file was autogenerated by print_selective_registration_header.py\r\n#ifndef OPS_TO_REGISTER\r\n#define OPS_TO_REGISTER\r\n\r\n    namespace {\r\n      constexpr const char* skip(const char* x) {\r\n        return (*x) ? (*x == ' ' ? skip(x + 1) : x) : x;\r\n      }\r\n\r\n      constexpr bool isequal(const char* x, const char* y) {\r\n        return (*skip(x) && *skip(y))\r\n                   ? (*skip(x) == *skip(y) && isequal(skip(x) + 1, skip(y) + 1))\r\n                   : (!*skip(x) && !*skip(y));\r\n      }\r\n\r\n      template<int N>\r\n      struct find_in {\r\n        static constexpr bool f(const char* x, const char* const y[N]) {\r\n          return isequal(x, y[0]) || find_in<N - 1>::f(x, y + 1);\r\n        }\r\n      };\r\n\r\n      template<>\r\n      struct find_in<0> {\r\n        static constexpr bool f(const char* x, const char* const y[]) {\r\n          return false;\r\n        }\r\n      };\r\n    }  // end namespace\r\n    constexpr const char* kNecessaryOpKernelClasses[] = {\r\n\"BinaryOp<CPUDevice, functor::add<float>>\",\r\n\"BiasOp<CPUDevice, float>\",\r\n\"ConstantOp\",\r\n\"Conv2DOp<CPUDevice, float>\",\r\n\"MatMulOp<CPUDevice, float, false >\",\r\n\"MaxPoolingOp<CPUDevice, float>\",\r\n\"NoOp\",\r\n\"PlaceholderOp\",\r\n\"ReluOp<CPUDevice, float>\",\r\n\"ReshapeOp\",\r\n\"SoftmaxOp<CPUDevice, float>\",\r\n\"RecvOp\",\r\n\"SendOp\",\r\n};\r\n#define SHOULD_REGISTER_OP_KERNEL(clz) (find_in<sizeof(kNecessaryOpKernelClasses) / sizeof(*kNecessaryOpKernelClasses)>::f(clz, kNecessaryOpKernelClasses))\r\n\r\nconstexpr inline bool ShouldRegisterOp(const char op[]) {\r\n  return false\r\n     || isequal(op, \"Add\")\r\n     || isequal(op, \"BiasAdd\")\r\n     || isequal(op, \"Const\")\r\n     || isequal(op, \"Conv2D\")\r\n     || isequal(op, \"MatMul\")\r\n     || isequal(op, \"MaxPool\")\r\n     || isequal(op, \"NoOp\")\r\n     || isequal(op, \"Placeholder\")\r\n     || isequal(op, \"Relu\")\r\n     || isequal(op, \"Reshape\")\r\n     || isequal(op, \"Softmax\")\r\n     || isequal(op, \"_Recv\")\r\n     || isequal(op, \"_Send\")\r\n  ;\r\n}\r\n#define SHOULD_REGISTER_OP(op) ShouldRegisterOp(op)\r\n\r\n#define SHOULD_REGISTER_OP_GRADIENT false\r\n#endif\r\n```"}