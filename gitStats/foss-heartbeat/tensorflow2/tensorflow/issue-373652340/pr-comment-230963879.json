{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/230963879", "pull_request_review_id": 171812836, "id": 230963879, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDk2Mzg3OQ==", "diff_hunk": "@@ -0,0 +1,308 @@\n+# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n+#\n+# Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# =============================================================================\n+\n+import argparse\n+import os\n+import tensorflow as tf\n+import tensorflow.contrib.tensorrt as trt\n+import time\n+import numpy as np\n+import sys\n+from classification import build_classification_graph, get_preprocess_fn, get_netdef\n+\n+class LoggerHook(tf.train.SessionRunHook):\n+    \"\"\"Logs runtime of each iteration\"\"\"\n+    def __init__(self, batch_size, num_records, display_every):\n+        self.iter_times = []\n+        self.display_every = display_every\n+        self.num_steps = (num_records + batch_size - 1) / batch_size\n+        self.batch_size = batch_size\n+\n+    def begin(self):\n+        self.start_time = time.time()\n+\n+    def after_run(self, run_context, run_values):\n+        current_time = time.time()\n+        duration = current_time - self.start_time\n+        self.start_time = current_time\n+        self.iter_times.append(duration)\n+        current_step = len(self.iter_times)\n+        if current_step % self.display_every == 0:\n+            print(\"    step %d/%d, iter_time(ms)=%.4f, images/sec=%d\" % (\n+                current_step, self.num_steps, duration * 1000,\n+                self.batch_size / self.iter_times[-1]))\n+\n+def run(frozen_graph, model, data_dir, batch_size,\n+    num_iterations, num_warmup_iterations, use_synthetic, display_every=100):\n+    \"\"\"Evaluates a frozen graph\n+    \n+    This function evaluates a graph on the ImageNet validation set.\n+    tf.estimator.Estimator is used to evaluate the accuracy of the model\n+    and a few other metrics. The results are returned as a dict.\n+\n+    frozen_graph: GraphDef, a graph containing input node 'input' and outputs 'logits' and 'classes'\n+    model: string, the model name (see NETS table in graph.py)\n+    data_dir: str, directory containing ImageNet validation TFRecord files\n+    batch_size: int, batch size for TensorRT optimizations\n+    num_iterations: int, number of iterations(batches) to run for\n+    \"\"\"\n+    # Define model function for tf.estimator.Estimator\n+    def model_fn(features, labels, mode):\n+        logits_out, classes_out = tf.import_graph_def(frozen_graph,\n+            input_map={'input': features},\n+            return_elements=['logits:0', 'classes:0'],\n+            name='')\n+        loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits_out)\n+        accuracy = tf.metrics.accuracy(labels=labels, predictions=classes_out, name='acc_op')\n+        if mode == tf.estimator.ModeKeys.EVAL:\n+            return tf.estimator.EstimatorSpec(\n+                mode,\n+                loss=loss,\n+                eval_metric_ops={'accuracy': accuracy})\n+\n+    # Create the dataset\n+    preprocess_fn = get_preprocess_fn(model)\n+    validation_files = tf.gfile.Glob(os.path.join(data_dir, 'validation*'))\n+\n+    def get_tfrecords_count(files):\n+        num_records = 0\n+        for fn in files:\n+            for record in tf.python_io.tf_record_iterator(fn):\n+                num_records += 1\n+        return num_records\n+\n+    # Define the dataset input function for tf.estimator.Estimator\n+    def eval_input_fn():\n+        if use_synthetic:\n+            input_width, input_height = get_netdef(model).get_input_dims()\n+            features = np.random.normal(\n+                loc=112, scale=70,\n+                size=(batch_size, input_height, input_width, 3)).astype(np.float32)\n+            features = np.clip(features, 0.0, 255.0)\n+            features = tf.identity(tf.constant(features))\n+            labels = np.random.randint(\n+                low=0,\n+                high=get_netdef(model).get_num_classes(),\n+                size=(batch_size),\n+                dtype=np.int32)\n+            labels = tf.identity(tf.constant(labels))", "path": "tensorflow/contrib/tensorrt/examples/inference.py", "position": 102, "original_position": 102, "commit_id": "8c9d381acb1637224df306736925604e3a5b8865", "original_commit_id": "8c9d381acb1637224df306736925604e3a5b8865", "user": {"login": "wt-huang", "id": 42785337, "node_id": "MDQ6VXNlcjQyNzg1MzM3", "avatar_url": "https://avatars0.githubusercontent.com/u/42785337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wt-huang", "html_url": "https://github.com/wt-huang", "followers_url": "https://api.github.com/users/wt-huang/followers", "following_url": "https://api.github.com/users/wt-huang/following{/other_user}", "gists_url": "https://api.github.com/users/wt-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/wt-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wt-huang/subscriptions", "organizations_url": "https://api.github.com/users/wt-huang/orgs", "repos_url": "https://api.github.com/users/wt-huang/repos", "events_url": "https://api.github.com/users/wt-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/wt-huang/received_events", "type": "User", "site_admin": false}, "body": "Can use  np.int16 for the label dtype", "created_at": "2018-11-06T00:26:55Z", "updated_at": "2018-11-06T00:39:18Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23223#discussion_r230963879", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23223", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/230963879"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23223#discussion_r230963879"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23223"}}, "body_html": "<p>Can use  np.int16 for the label dtype</p>", "body_text": "Can use  np.int16 for the label dtype"}