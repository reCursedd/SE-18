{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/287944137", "html_url": "https://github.com/tensorflow/tensorflow/pull/8444#issuecomment-287944137", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8444", "id": 287944137, "node_id": "MDEyOklzc3VlQ29tbWVudDI4Nzk0NDEzNw==", "user": {"login": "jhseu", "id": 170179, "node_id": "MDQ6VXNlcjE3MDE3OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/170179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhseu", "html_url": "https://github.com/jhseu", "followers_url": "https://api.github.com/users/jhseu/followers", "following_url": "https://api.github.com/users/jhseu/following{/other_user}", "gists_url": "https://api.github.com/users/jhseu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhseu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhseu/subscriptions", "organizations_url": "https://api.github.com/users/jhseu/orgs", "repos_url": "https://api.github.com/users/jhseu/repos", "events_url": "https://api.github.com/users/jhseu/events{/privacy}", "received_events_url": "https://api.github.com/users/jhseu/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-21T00:54:06Z", "updated_at": "2017-03-21T00:54:06Z", "author_association": "MEMBER", "body_html": "<p>There's a much simpler version that gets the performance benefit:</p>\n<div class=\"highlight highlight-source-c++\"><pre>    <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> b = <span class=\"pl-c1\">0</span>; b &lt; st.batch_size; ++b) {\n      <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> y = <span class=\"pl-c1\">0</span>; y &lt; st.<span class=\"pl-smi\">out_height</span>; ++y) {\n        <span class=\"pl-k\">const</span> int64 in_y =\n            <span class=\"pl-c1\">std::min</span>(<span class=\"pl-k\">static_cast</span>&lt;int64&gt;(<span class=\"pl-c1\">floorf</span>(y * st.<span class=\"pl-smi\">height_scale</span>)),\n                     (st.<span class=\"pl-smi\">in_height</span> - <span class=\"pl-c1\">1</span>));\n        <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> x = <span class=\"pl-c1\">0</span>; x &lt; st.<span class=\"pl-smi\">out_width</span>; ++x) {\n          <span class=\"pl-k\">const</span> int64 in_x =\n              <span class=\"pl-c1\">std::min</span>(<span class=\"pl-k\">static_cast</span>&lt;int64&gt;(<span class=\"pl-c1\">floorf</span>(x * st.<span class=\"pl-smi\">width_scale</span>)),\n                       (st.<span class=\"pl-smi\">in_width</span> - <span class=\"pl-c1\">1</span>));\n          <span class=\"pl-c1\">std::copy_n</span>(&amp;<span class=\"pl-c1\">input_data</span>(b, in_y, in_x, <span class=\"pl-c1\">0</span>), st.<span class=\"pl-smi\">channels</span>, &amp;<span class=\"pl-c1\">output_data</span>(b, y, x, <span class=\"pl-c1\">0</span>));\n        }\n      }\n    }</pre></div>", "body_text": "There's a much simpler version that gets the performance benefit:\n    for (int b = 0; b < st.batch_size; ++b) {\n      for (int y = 0; y < st.out_height; ++y) {\n        const int64 in_y =\n            std::min(static_cast<int64>(floorf(y * st.height_scale)),\n                     (st.in_height - 1));\n        for (int x = 0; x < st.out_width; ++x) {\n          const int64 in_x =\n              std::min(static_cast<int64>(floorf(x * st.width_scale)),\n                       (st.in_width - 1));\n          std::copy_n(&input_data(b, in_y, in_x, 0), st.channels, &output_data(b, y, x, 0));\n        }\n      }\n    }", "body": "There's a much simpler version that gets the performance benefit:\r\n```c++\r\n    for (int b = 0; b < st.batch_size; ++b) {\r\n      for (int y = 0; y < st.out_height; ++y) {\r\n        const int64 in_y =\r\n            std::min(static_cast<int64>(floorf(y * st.height_scale)),\r\n                     (st.in_height - 1));\r\n        for (int x = 0; x < st.out_width; ++x) {\r\n          const int64 in_x =\r\n              std::min(static_cast<int64>(floorf(x * st.width_scale)),\r\n                       (st.in_width - 1));\r\n          std::copy_n(&input_data(b, in_y, in_x, 0), st.channels, &output_data(b, y, x, 0));\r\n        }\r\n      }\r\n    }\r\n```"}