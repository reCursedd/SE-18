{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4024", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4024/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4024/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4024/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4024", "id": 173062884, "node_id": "MDU6SXNzdWUxNzMwNjI4ODQ=", "number": 4024, "title": "How to link the TensorFlow static library for Android using the Gradle Experimental Plugin", "user": {"login": "antoine-dbr", "id": 6014063, "node_id": "MDQ6VXNlcjYwMTQwNjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6014063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoine-dbr", "html_url": "https://github.com/antoine-dbr", "followers_url": "https://api.github.com/users/antoine-dbr/followers", "following_url": "https://api.github.com/users/antoine-dbr/following{/other_user}", "gists_url": "https://api.github.com/users/antoine-dbr/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoine-dbr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoine-dbr/subscriptions", "organizations_url": "https://api.github.com/users/antoine-dbr/orgs", "repos_url": "https://api.github.com/users/antoine-dbr/repos", "events_url": "https://api.github.com/users/antoine-dbr/events{/privacy}", "received_events_url": "https://api.github.com/users/antoine-dbr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2016-08-24T21:30:26Z", "updated_at": "2017-01-27T18:12:53Z", "closed_at": "2017-01-27T18:12:53Z", "author_association": "NONE", "body_html": "<p>Hi all,</p>\n<p>Context: we want to link TensorFlow against our C++ platform-independent code and load a model to run some classification relevant for our application. We use SWIG to generate the Java bindings and in the end it builds an Android .aar file that we push to a private maven repository that our other packages (Android apps, we also have an Android SDK) can consume downstream. Moving our project to Bazel is not ideal given our packaging / distribution pipeline. That's why we are trying the Gradle integration before moving the project to Bazel if there is no way around. For now, I followed <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/makefile/README.md\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/makefile/README.md</a> and I was successfully able to build the .a libs (tensorflow-core and protobufs) and ran the benchmark.</p>\n<p>Then I have a lot of undefined reference in TensorFlow / Protobuf, see <a href=\"https://github.com/tensorflow/tensorflow/files/435701/output.txt\">output.txt</a></p>\n<p>And for info, here's my build.gradle</p>\n<div class=\"highlight highlight-source-groovy\"><pre>apply <span class=\"pl-c1\">plugin</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>com.android.model.library<span class=\"pl-pds\">'</span></span>\napply <span class=\"pl-c1\">plugin</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>com.jfrog.artifactory<span class=\"pl-pds\">'</span></span>\napply <span class=\"pl-c1\">plugin</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>com.github.dcendents.android-maven<span class=\"pl-pds\">'</span></span>\napply <span class=\"pl-c1\">plugin</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>com.jfrog.bintray<span class=\"pl-pds\">'</span></span>\napply <span class=\"pl-c1\">plugin</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>maven-publish<span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-c1\">VERSION_NAME</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>1.0.0-alpha.3-SNAPSHOT<span class=\"pl-pds\">'</span></span>\n<span class=\"pl-k\">def</span> <span class=\"pl-c1\">GROUP_ID</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>io.cens<span class=\"pl-pds\">'</span></span>\n<span class=\"pl-k\">def</span> <span class=\"pl-c1\">REPO_KEY</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">VERSION_NAME</span><span class=\"pl-k\">.</span>endsWith(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>SNAPSHOT<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>libs-snapshot-local<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>libs-release-local<span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-c1\">ARTIFACT_FILENAME</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">ARTIFACT_ID</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>-<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">VERSION_NAME</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>.aar<span class=\"pl-pds\">'</span></span>\n\nversion <span class=\"pl-k\">=</span> <span class=\"pl-c1\">VERSION_NAME</span>\ngroup <span class=\"pl-k\">=</span> <span class=\"pl-c1\">GROUP_ID</span>\n\nmodel {\n    android {\n        compileSdkVersion <span class=\"pl-c1\">23</span>\n        buildToolsVersion <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>23.0.3<span class=\"pl-pds\">\"</span></span>\n\n        defaultConfig {\n            minSdkVersion<span class=\"pl-k\">.</span>apiLevel <span class=\"pl-c1\">14</span>\n            targetSdkVersion<span class=\"pl-k\">.</span>apiLevel <span class=\"pl-c1\">23</span>\n            versionCode <span class=\"pl-c1\">1</span>\n            versionName <span class=\"pl-c1\">VERSION_NAME</span>\n            project<span class=\"pl-k\">.</span>archivesBaseName <span class=\"pl-k\">=</span> <span class=\"pl-c1\">ARTIFACT_FILENAME</span>\n        }\n\n        buildTypes {\n            release {\n                minifyEnabled <span class=\"pl-c1\">false</span>\n                proguardFiles<span class=\"pl-k\">.</span>add(file(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>proguard-rules.pro<span class=\"pl-pds\">\"</span></span>))\n            }\n        }\n\n        ndk {\n            moduleName <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>censio_crash<span class=\"pl-pds\">\"</span></span>\n            stl <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>gnustl_shared<span class=\"pl-pds\">\"</span></span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> see https://developer.android.com/ndk/guides/cpp-support.html#stl</span>\n\n            <span class=\"pl-c\"><span class=\"pl-c\">//</span> TensorFlow artifacts (it is assumed that the tensorflow repo is a peer of the crash repo)</span>\n            cppFlags<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>-I<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> file(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>../../../../../tensorflow<span class=\"pl-pds\">'</span></span>)<span class=\"pl-k\">.</span>absolutePath)\n            cppFlags<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>-I<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> file(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>../../../../../tensorflow/tensorflow/contrib/makefile/gen/proto<span class=\"pl-pds\">'</span></span>)<span class=\"pl-k\">.</span>absolutePath)\n            cppFlags<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>-I<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> file(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>../../../../../tensorflow/tensorflow/contrib/makefile/gen/protobuf/include<span class=\"pl-pds\">'</span></span>)<span class=\"pl-k\">.</span>absolutePath)\n            cppFlags<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>-I<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> file(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>../../../../../tensorflow/tensorflow/contrib/makefile/downloads/eigen-eigen-6f952374ef2b<span class=\"pl-pds\">'</span></span>)<span class=\"pl-k\">.</span>absolutePath)\n            ldFlags<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>../../../../../tensorflow/tensorflow/contrib/makefile/gen/protobuf/lib/libprotobuf-lite.a<span class=\"pl-pds\">'</span></span>)\n            ldFlags<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>../../../../../tensorflow/tensorflow/contrib/makefile/gen/lib/libtensorflow-core.a<span class=\"pl-pds\">'</span></span>)\n\n            <span class=\"pl-c\"><span class=\"pl-c\">//</span> Our sources</span>\n            cppFlags<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>-I<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> file(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>../../../../src<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>absolutePath)\n            cppFlags<span class=\"pl-k\">.</span>add(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-std=gnu++11<span class=\"pl-pds\">\"</span></span>)\n            cppFlags<span class=\"pl-k\">.</span>addAll([<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-fexceptions<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-frtti<span class=\"pl-pds\">\"</span></span>])\n            ldLibs<span class=\"pl-k\">.</span>addAll([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>android<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>log<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>z<span class=\"pl-pds\">'</span></span>])\n            abiFilters<span class=\"pl-k\">.</span>addAll([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>armeabi-v7a<span class=\"pl-pds\">'</span></span>]) <span class=\"pl-c\"><span class=\"pl-c\">//</span> only build for main architecture subset</span>\n        }\n\n        sources {\n            main {\n                jni {\n                    source {\n                        srcDir <span class=\"pl-s\"><span class=\"pl-pds\">'</span>../../../../src<span class=\"pl-pds\">'</span></span>\n                        exclude <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>**/Logger.cpp<span class=\"pl-pds\">\"</span></span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> Android impl is generated by SWIG instead</span>\n                    }\n                }\n            }\n        }\n    }\n}\n\n<span class=\"pl-k\">def</span> siteUrl <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://github.com/Censio/mobile-crash-sdk<span class=\"pl-pds\">'</span></span>\n<span class=\"pl-k\">def</span> gitUrl <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://github.com/Censio/mobile-crash-sdk.git<span class=\"pl-pds\">'</span></span>\n\ninstall {\n    repositories<span class=\"pl-k\">.</span>mavenInstaller {\n        <span class=\"pl-c\"><span class=\"pl-c\">//</span> This generates POM.xml with proper parameters</span>\n        pom {\n            project {\n                packaging <span class=\"pl-s\"><span class=\"pl-pds\">'</span>aar<span class=\"pl-pds\">'</span></span>\n\n                name <span class=\"pl-s\"><span class=\"pl-pds\">'</span>TrueMotion Android On-board SDK - Crash package.<span class=\"pl-pds\">'</span></span>\n                url siteUrl\n\n                <span class=\"pl-c\"><span class=\"pl-c\">//</span> Set your license</span>\n                licenses {\n                    license {\n                        name <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Copyright (C) 2016 TrueMotion - All Rights Reserved<span class=\"pl-pds\">'</span></span>\n                        url <span class=\"pl-s\"><span class=\"pl-pds\">'</span>http://gotruemotion.com<span class=\"pl-pds\">'</span></span>\n                    }\n                }\n                developers {\n                    developer {\n                        id <span class=\"pl-s\"><span class=\"pl-pds\">'</span>antoine-dbr<span class=\"pl-pds\">'</span></span>\n                        name <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Antoine-Dubois-Rande<span class=\"pl-pds\">'</span></span>\n                        email <span class=\"pl-s\"><span class=\"pl-pds\">'</span>antoine@cens.io<span class=\"pl-pds\">'</span></span>\n                    }\n                }\n                scm {\n                    connection gitUrl\n                    developerConnection gitUrl\n                    url siteUrl\n                }\n            }\n        }\n    }\n}\n\ndependencies {\n}\n\npublishing {\n    publications {\n        aar(<span class=\"pl-k\">MavenPublication</span>) {\n            groupId <span class=\"pl-c1\">GROUP_ID</span>\n            version <span class=\"pl-k\">=</span> <span class=\"pl-c1\">VERSION_NAME</span>\n            artifactId <span class=\"pl-c1\">ARTIFACT_ID</span>\n\n            <span class=\"pl-c\"><span class=\"pl-c\">//</span> Tell maven to prepare the generated \"*.aar\" file for publishing</span>\n            artifact(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$b<span class=\"pl-smi\">uildDir</span></span>/outputs/aar/<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">ARTIFACT_FILENAME</span>)\n\n            pom<span class=\"pl-k\">.</span>withXml {\n                <span class=\"pl-k\">def</span> dependencies <span class=\"pl-k\">=</span> asNode()<span class=\"pl-k\">.</span>appendNode(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>dependencies<span class=\"pl-pds\">'</span></span>)\n                configurations<span class=\"pl-k\">.</span>getByName(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>_releaseCompile<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>getResolvedConfiguration()<span class=\"pl-k\">.</span>getFirstLevelModuleDependencies()<span class=\"pl-k\">.</span>each {\n                    <span class=\"pl-k\">def</span> dependency <span class=\"pl-k\">=</span> dependencies<span class=\"pl-k\">.</span>appendNode(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>dependency<span class=\"pl-pds\">'</span></span>)\n                    dependency<span class=\"pl-k\">.</span>appendNode(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>groupId<span class=\"pl-pds\">'</span></span>, it<span class=\"pl-k\">.</span>moduleGroup)\n                    dependency<span class=\"pl-k\">.</span>appendNode(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>artifactId<span class=\"pl-pds\">'</span></span>, it<span class=\"pl-k\">.</span>moduleName)\n                    dependency<span class=\"pl-k\">.</span>appendNode(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>version<span class=\"pl-pds\">'</span></span>, it<span class=\"pl-k\">.</span>moduleVersion)\n                }\n            }\n        }\n    }\n}\n\nartifactory {\n    contextUrl <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://censiodev.artifactoryonline.com/censiodev<span class=\"pl-pds\">'</span></span>\n    publish {\n        repository {\n            <span class=\"pl-c\"><span class=\"pl-c\">//</span> The Artifactory repository key to publish to</span>\n            repoKey <span class=\"pl-k\">=</span> <span class=\"pl-c1\">REPO_KEY</span>\n\n            username <span class=\"pl-k\">=</span> <span class=\"pl-c1\">ARTIFACTORY_USERNAME</span>\n            password <span class=\"pl-k\">=</span> <span class=\"pl-c1\">ARTIFACTORY_PASSWORD</span>\n        }\n        defaults {\n            publications(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>aar<span class=\"pl-pds\">'</span></span>)\n            publishArtifacts <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>\n            publishPom <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>\n        }\n    }\n}\n\nbintray {\n    user <span class=\"pl-k\">=</span> <span class=\"pl-c1\">BINTRAY_USER</span>\n    key <span class=\"pl-k\">=</span> <span class=\"pl-c1\">BINTRAY_API_KEY</span>\n\n    configurations <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>archives<span class=\"pl-pds\">'</span></span>]\n    pkg {\n        userOrg <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>censio<span class=\"pl-pds\">'</span></span>\n        repo <span class=\"pl-k\">=</span> <span class=\"pl-c1\">VERSION_NAME</span><span class=\"pl-k\">.</span>endsWith(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>SNAPSHOT<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>maven<span class=\"pl-pds\">'</span></span> <span class=\"pl-c\"><span class=\"pl-c\">//</span> This will error out if we attempt to push a snapshot build</span>\n        name <span class=\"pl-k\">=</span> <span class=\"pl-c1\">ARTIFACT_ID</span>\n        websiteUrl <span class=\"pl-k\">=</span> siteUrl\n        vcsUrl <span class=\"pl-k\">=</span> gitUrl\n        licenses <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Censio<span class=\"pl-pds\">'</span></span>]\n        dryRun <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>\n        publish <span class=\"pl-k\">=</span> <span class=\"pl-c1\">true</span>\n    }\n}\n\ntask rename(<span class=\"pl-c1\">type</span>: <span class=\"pl-k\">Copy</span>) {\n    from <span class=\"pl-s\"><span class=\"pl-pds\">'</span>build/outputs/aar<span class=\"pl-pds\">'</span></span>\n    into <span class=\"pl-s\"><span class=\"pl-pds\">'</span>build/outputs/aar<span class=\"pl-pds\">'</span></span>\n    rename { <span class=\"pl-k\">String</span> <span class=\"pl-v\">fileName</span> <span class=\"pl-k\">-&gt;</span>\n        fileName<span class=\"pl-k\">.</span>replace(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>-release.aar<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>)\n    }\n}</pre></div>\n<p>Since the benchmark works, I think it's probably an issue on my end. In any case, any help appreciated. Thanks!</p>", "body_text": "Hi all,\nContext: we want to link TensorFlow against our C++ platform-independent code and load a model to run some classification relevant for our application. We use SWIG to generate the Java bindings and in the end it builds an Android .aar file that we push to a private maven repository that our other packages (Android apps, we also have an Android SDK) can consume downstream. Moving our project to Bazel is not ideal given our packaging / distribution pipeline. That's why we are trying the Gradle integration before moving the project to Bazel if there is no way around. For now, I followed https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/makefile/README.md and I was successfully able to build the .a libs (tensorflow-core and protobufs) and ran the benchmark.\nThen I have a lot of undefined reference in TensorFlow / Protobuf, see output.txt\nAnd for info, here's my build.gradle\napply plugin: 'com.android.model.library'\napply plugin: 'com.jfrog.artifactory'\napply plugin: 'com.github.dcendents.android-maven'\napply plugin: 'com.jfrog.bintray'\napply plugin: 'maven-publish'\n\ndef VERSION_NAME = '1.0.0-alpha.3-SNAPSHOT'\ndef GROUP_ID = 'io.cens'\ndef REPO_KEY = VERSION_NAME.endsWith('SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local'\n\ndef ARTIFACT_FILENAME = ARTIFACT_ID + '-' + VERSION_NAME + '.aar'\n\nversion = VERSION_NAME\ngroup = GROUP_ID\n\nmodel {\n    android {\n        compileSdkVersion 23\n        buildToolsVersion \"23.0.3\"\n\n        defaultConfig {\n            minSdkVersion.apiLevel 14\n            targetSdkVersion.apiLevel 23\n            versionCode 1\n            versionName VERSION_NAME\n            project.archivesBaseName = ARTIFACT_FILENAME\n        }\n\n        buildTypes {\n            release {\n                minifyEnabled false\n                proguardFiles.add(file(\"proguard-rules.pro\"))\n            }\n        }\n\n        ndk {\n            moduleName = \"censio_crash\"\n            stl = \"gnustl_shared\" // see https://developer.android.com/ndk/guides/cpp-support.html#stl\n\n            // TensorFlow artifacts (it is assumed that the tensorflow repo is a peer of the crash repo)\n            cppFlags.add('-I' + file('../../../../../tensorflow').absolutePath)\n            cppFlags.add('-I' + file('../../../../../tensorflow/tensorflow/contrib/makefile/gen/proto').absolutePath)\n            cppFlags.add('-I' + file('../../../../../tensorflow/tensorflow/contrib/makefile/gen/protobuf/include').absolutePath)\n            cppFlags.add('-I' + file('../../../../../tensorflow/tensorflow/contrib/makefile/downloads/eigen-eigen-6f952374ef2b').absolutePath)\n            ldFlags.add('../../../../../tensorflow/tensorflow/contrib/makefile/gen/protobuf/lib/libprotobuf-lite.a')\n            ldFlags.add('../../../../../tensorflow/tensorflow/contrib/makefile/gen/lib/libtensorflow-core.a')\n\n            // Our sources\n            cppFlags.add('-I' + file(\"../../../../src\").absolutePath)\n            cppFlags.add(\"-std=gnu++11\")\n            cppFlags.addAll([\"-fexceptions\", \"-frtti\"])\n            ldLibs.addAll(['android', 'log', 'z'])\n            abiFilters.addAll(['armeabi-v7a']) // only build for main architecture subset\n        }\n\n        sources {\n            main {\n                jni {\n                    source {\n                        srcDir '../../../../src'\n                        exclude \"**/Logger.cpp\" // Android impl is generated by SWIG instead\n                    }\n                }\n            }\n        }\n    }\n}\n\ndef siteUrl = 'https://github.com/Censio/mobile-crash-sdk'\ndef gitUrl = 'https://github.com/Censio/mobile-crash-sdk.git'\n\ninstall {\n    repositories.mavenInstaller {\n        // This generates POM.xml with proper parameters\n        pom {\n            project {\n                packaging 'aar'\n\n                name 'TrueMotion Android On-board SDK - Crash package.'\n                url siteUrl\n\n                // Set your license\n                licenses {\n                    license {\n                        name 'Copyright (C) 2016 TrueMotion - All Rights Reserved'\n                        url 'http://gotruemotion.com'\n                    }\n                }\n                developers {\n                    developer {\n                        id 'antoine-dbr'\n                        name 'Antoine-Dubois-Rande'\n                        email 'antoine@cens.io'\n                    }\n                }\n                scm {\n                    connection gitUrl\n                    developerConnection gitUrl\n                    url siteUrl\n                }\n            }\n        }\n    }\n}\n\ndependencies {\n}\n\npublishing {\n    publications {\n        aar(MavenPublication) {\n            groupId GROUP_ID\n            version = VERSION_NAME\n            artifactId ARTIFACT_ID\n\n            // Tell maven to prepare the generated \"*.aar\" file for publishing\n            artifact(\"$buildDir/outputs/aar/\" + ARTIFACT_FILENAME)\n\n            pom.withXml {\n                def dependencies = asNode().appendNode('dependencies')\n                configurations.getByName(\"_releaseCompile\").getResolvedConfiguration().getFirstLevelModuleDependencies().each {\n                    def dependency = dependencies.appendNode('dependency')\n                    dependency.appendNode('groupId', it.moduleGroup)\n                    dependency.appendNode('artifactId', it.moduleName)\n                    dependency.appendNode('version', it.moduleVersion)\n                }\n            }\n        }\n    }\n}\n\nartifactory {\n    contextUrl = 'https://censiodev.artifactoryonline.com/censiodev'\n    publish {\n        repository {\n            // The Artifactory repository key to publish to\n            repoKey = REPO_KEY\n\n            username = ARTIFACTORY_USERNAME\n            password = ARTIFACTORY_PASSWORD\n        }\n        defaults {\n            publications('aar')\n            publishArtifacts = true\n            publishPom = true\n        }\n    }\n}\n\nbintray {\n    user = BINTRAY_USER\n    key = BINTRAY_API_KEY\n\n    configurations = ['archives']\n    pkg {\n        userOrg = 'censio'\n        repo = VERSION_NAME.endsWith('SNAPSHOT') ? '' : 'maven' // This will error out if we attempt to push a snapshot build\n        name = ARTIFACT_ID\n        websiteUrl = siteUrl\n        vcsUrl = gitUrl\n        licenses = ['Censio']\n        dryRun = false\n        publish = true\n    }\n}\n\ntask rename(type: Copy) {\n    from 'build/outputs/aar'\n    into 'build/outputs/aar'\n    rename { String fileName ->\n        fileName.replace('-release.aar', '')\n    }\n}\nSince the benchmark works, I think it's probably an issue on my end. In any case, any help appreciated. Thanks!", "body": "Hi all,\n\nContext: we want to link TensorFlow against our C++ platform-independent code and load a model to run some classification relevant for our application. We use SWIG to generate the Java bindings and in the end it builds an Android .aar file that we push to a private maven repository that our other packages (Android apps, we also have an Android SDK) can consume downstream. Moving our project to Bazel is not ideal given our packaging / distribution pipeline. That's why we are trying the Gradle integration before moving the project to Bazel if there is no way around. For now, I followed https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/makefile/README.md and I was successfully able to build the .a libs (tensorflow-core and protobufs) and ran the benchmark.\n\nThen I have a lot of undefined reference in TensorFlow / Protobuf, see [output.txt](https://github.com/tensorflow/tensorflow/files/435701/output.txt)\n\nAnd for info, here's my build.gradle\n\n``` groovy\napply plugin: 'com.android.model.library'\napply plugin: 'com.jfrog.artifactory'\napply plugin: 'com.github.dcendents.android-maven'\napply plugin: 'com.jfrog.bintray'\napply plugin: 'maven-publish'\n\ndef VERSION_NAME = '1.0.0-alpha.3-SNAPSHOT'\ndef GROUP_ID = 'io.cens'\ndef REPO_KEY = VERSION_NAME.endsWith('SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local'\n\ndef ARTIFACT_FILENAME = ARTIFACT_ID + '-' + VERSION_NAME + '.aar'\n\nversion = VERSION_NAME\ngroup = GROUP_ID\n\nmodel {\n    android {\n        compileSdkVersion 23\n        buildToolsVersion \"23.0.3\"\n\n        defaultConfig {\n            minSdkVersion.apiLevel 14\n            targetSdkVersion.apiLevel 23\n            versionCode 1\n            versionName VERSION_NAME\n            project.archivesBaseName = ARTIFACT_FILENAME\n        }\n\n        buildTypes {\n            release {\n                minifyEnabled false\n                proguardFiles.add(file(\"proguard-rules.pro\"))\n            }\n        }\n\n        ndk {\n            moduleName = \"censio_crash\"\n            stl = \"gnustl_shared\" // see https://developer.android.com/ndk/guides/cpp-support.html#stl\n\n            // TensorFlow artifacts (it is assumed that the tensorflow repo is a peer of the crash repo)\n            cppFlags.add('-I' + file('../../../../../tensorflow').absolutePath)\n            cppFlags.add('-I' + file('../../../../../tensorflow/tensorflow/contrib/makefile/gen/proto').absolutePath)\n            cppFlags.add('-I' + file('../../../../../tensorflow/tensorflow/contrib/makefile/gen/protobuf/include').absolutePath)\n            cppFlags.add('-I' + file('../../../../../tensorflow/tensorflow/contrib/makefile/downloads/eigen-eigen-6f952374ef2b').absolutePath)\n            ldFlags.add('../../../../../tensorflow/tensorflow/contrib/makefile/gen/protobuf/lib/libprotobuf-lite.a')\n            ldFlags.add('../../../../../tensorflow/tensorflow/contrib/makefile/gen/lib/libtensorflow-core.a')\n\n            // Our sources\n            cppFlags.add('-I' + file(\"../../../../src\").absolutePath)\n            cppFlags.add(\"-std=gnu++11\")\n            cppFlags.addAll([\"-fexceptions\", \"-frtti\"])\n            ldLibs.addAll(['android', 'log', 'z'])\n            abiFilters.addAll(['armeabi-v7a']) // only build for main architecture subset\n        }\n\n        sources {\n            main {\n                jni {\n                    source {\n                        srcDir '../../../../src'\n                        exclude \"**/Logger.cpp\" // Android impl is generated by SWIG instead\n                    }\n                }\n            }\n        }\n    }\n}\n\ndef siteUrl = 'https://github.com/Censio/mobile-crash-sdk'\ndef gitUrl = 'https://github.com/Censio/mobile-crash-sdk.git'\n\ninstall {\n    repositories.mavenInstaller {\n        // This generates POM.xml with proper parameters\n        pom {\n            project {\n                packaging 'aar'\n\n                name 'TrueMotion Android On-board SDK - Crash package.'\n                url siteUrl\n\n                // Set your license\n                licenses {\n                    license {\n                        name 'Copyright (C) 2016 TrueMotion - All Rights Reserved'\n                        url 'http://gotruemotion.com'\n                    }\n                }\n                developers {\n                    developer {\n                        id 'antoine-dbr'\n                        name 'Antoine-Dubois-Rande'\n                        email 'antoine@cens.io'\n                    }\n                }\n                scm {\n                    connection gitUrl\n                    developerConnection gitUrl\n                    url siteUrl\n                }\n            }\n        }\n    }\n}\n\ndependencies {\n}\n\npublishing {\n    publications {\n        aar(MavenPublication) {\n            groupId GROUP_ID\n            version = VERSION_NAME\n            artifactId ARTIFACT_ID\n\n            // Tell maven to prepare the generated \"*.aar\" file for publishing\n            artifact(\"$buildDir/outputs/aar/\" + ARTIFACT_FILENAME)\n\n            pom.withXml {\n                def dependencies = asNode().appendNode('dependencies')\n                configurations.getByName(\"_releaseCompile\").getResolvedConfiguration().getFirstLevelModuleDependencies().each {\n                    def dependency = dependencies.appendNode('dependency')\n                    dependency.appendNode('groupId', it.moduleGroup)\n                    dependency.appendNode('artifactId', it.moduleName)\n                    dependency.appendNode('version', it.moduleVersion)\n                }\n            }\n        }\n    }\n}\n\nartifactory {\n    contextUrl = 'https://censiodev.artifactoryonline.com/censiodev'\n    publish {\n        repository {\n            // The Artifactory repository key to publish to\n            repoKey = REPO_KEY\n\n            username = ARTIFACTORY_USERNAME\n            password = ARTIFACTORY_PASSWORD\n        }\n        defaults {\n            publications('aar')\n            publishArtifacts = true\n            publishPom = true\n        }\n    }\n}\n\nbintray {\n    user = BINTRAY_USER\n    key = BINTRAY_API_KEY\n\n    configurations = ['archives']\n    pkg {\n        userOrg = 'censio'\n        repo = VERSION_NAME.endsWith('SNAPSHOT') ? '' : 'maven' // This will error out if we attempt to push a snapshot build\n        name = ARTIFACT_ID\n        websiteUrl = siteUrl\n        vcsUrl = gitUrl\n        licenses = ['Censio']\n        dryRun = false\n        publish = true\n    }\n}\n\ntask rename(type: Copy) {\n    from 'build/outputs/aar'\n    into 'build/outputs/aar'\n    rename { String fileName ->\n        fileName.replace('-release.aar', '')\n    }\n}\n```\n\nSince the benchmark works, I think it's probably an issue on my end. In any case, any help appreciated. Thanks!\n"}