{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/355192177", "html_url": "https://github.com/tensorflow/tensorflow/pull/15639#issuecomment-355192177", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15639", "id": 355192177, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTE5MjE3Nw==", "user": {"login": "freedomtan", "id": 3395998, "node_id": "MDQ6VXNlcjMzOTU5OTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3395998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/freedomtan", "html_url": "https://github.com/freedomtan", "followers_url": "https://api.github.com/users/freedomtan/followers", "following_url": "https://api.github.com/users/freedomtan/following{/other_user}", "gists_url": "https://api.github.com/users/freedomtan/gists{/gist_id}", "starred_url": "https://api.github.com/users/freedomtan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/freedomtan/subscriptions", "organizations_url": "https://api.github.com/users/freedomtan/orgs", "repos_url": "https://api.github.com/users/freedomtan/repos", "events_url": "https://api.github.com/users/freedomtan/events{/privacy}", "received_events_url": "https://api.github.com/users/freedomtan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-04T03:43:19Z", "updated_at": "2018-01-04T03:43:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3731025\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/allenlavoie\">@allenlavoie</a>: Nope, it seems to me it's the included protobuf (\"@protobuf_archive//:protobuf\") which has new version (3.4.0) somehow conflicts with what is used to build Android (3.0.0). Further information,</p>\n<ol>\n<li>for non-monolithic benchmark_model, as you know, we need libtensorflow_framework.so</li>\n<li>protobuf 3.4.0 is in the the libtensorflow_framework.so already</li>\n<li>to use the libtensorflow_framework.so, I need LD_LIBRARY_PATH because Android Bionic dynamic linker doesn't support rpath.</li>\n<li>after  I set LD_LIBRARY_PATH, other system components which use protobuf will use protobuf in libtensorflow_framework.so. I don't why function resolving works this way :-(</li>\n</ol>\n<p>Another example, on an older phone running Android 6.0.x, I got the following message:</p>\n<p><code>[libprotobuf FATAL external/protobuf_archive/src/google/protobuf/stubs/common.cc:79] This program was compiled against version 2.6.1 of the Protocol Buffer runtime library, which is not compatible with the installed version (3.4.0).  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"out/target/product/msm8916_64/gen/SHARED_LIBRARIES/libGLES_trace_intermediates/proto/frameworks/native/opengl/libs/GLES_trace/proto/gltrace.pb.cc\".)terminate called after throwing an instance of 'google::protobuf::FatalException' what():  This program was compiled against version 2.6.1 of the Protocol Buffer runtime library, which is not compatible with the installed version (3.4.0).  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"out/target/product/msm8916_64/gen/SHARED_LIBRARIES/libGLES_trace_intermediates/proto/frameworks/native/opengl/libs/GLES_trace/proto/gltrace.pb.cc\".)</code></p>", "body_text": "@allenlavoie: Nope, it seems to me it's the included protobuf (\"@protobuf_archive//:protobuf\") which has new version (3.4.0) somehow conflicts with what is used to build Android (3.0.0). Further information,\n\nfor non-monolithic benchmark_model, as you know, we need libtensorflow_framework.so\nprotobuf 3.4.0 is in the the libtensorflow_framework.so already\nto use the libtensorflow_framework.so, I need LD_LIBRARY_PATH because Android Bionic dynamic linker doesn't support rpath.\nafter  I set LD_LIBRARY_PATH, other system components which use protobuf will use protobuf in libtensorflow_framework.so. I don't why function resolving works this way :-(\n\nAnother example, on an older phone running Android 6.0.x, I got the following message:\n[libprotobuf FATAL external/protobuf_archive/src/google/protobuf/stubs/common.cc:79] This program was compiled against version 2.6.1 of the Protocol Buffer runtime library, which is not compatible with the installed version (3.4.0).  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"out/target/product/msm8916_64/gen/SHARED_LIBRARIES/libGLES_trace_intermediates/proto/frameworks/native/opengl/libs/GLES_trace/proto/gltrace.pb.cc\".)terminate called after throwing an instance of 'google::protobuf::FatalException' what():  This program was compiled against version 2.6.1 of the Protocol Buffer runtime library, which is not compatible with the installed version (3.4.0).  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"out/target/product/msm8916_64/gen/SHARED_LIBRARIES/libGLES_trace_intermediates/proto/frameworks/native/opengl/libs/GLES_trace/proto/gltrace.pb.cc\".)", "body": "@allenlavoie: Nope, it seems to me it's the included protobuf (\"@protobuf_archive//:protobuf\") which has new version (3.4.0) somehow conflicts with what is used to build Android (3.0.0). Further information,\r\n \r\n1. for non-monolithic benchmark_model, as you know, we need libtensorflow_framework.so\r\n2. protobuf 3.4.0 is in the the libtensorflow_framework.so already\r\n3. to use the libtensorflow_framework.so, I need LD_LIBRARY_PATH because Android Bionic dynamic linker doesn't support rpath.\r\n4. after  I set LD_LIBRARY_PATH, other system components which use protobuf will use protobuf in libtensorflow_framework.so. I don't why function resolving works this way :-(  \r\n\r\nAnother example, on an older phone running Android 6.0.x, I got the following message:\r\n\r\n`\r\n[libprotobuf FATAL external/protobuf_archive/src/google/protobuf/stubs/common.cc:79] This program was compiled against version 2.6.1 of the Protocol Buffer runtime library, which is not compatible with the installed version (3.4.0).  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"out/target/product/msm8916_64/gen/SHARED_LIBRARIES/libGLES_trace_intermediates/proto/frameworks/native/opengl/libs/GLES_trace/proto/gltrace.pb.cc\".)terminate called after throwing an instance of 'google::protobuf::FatalException'\r\n  what():  This program was compiled against version 2.6.1 of the Protocol Buffer runtime library, which is not compatible with the installed version (3.4.0).  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"out/target/product/msm8916_64/gen/SHARED_LIBRARIES/libGLES_trace_intermediates/proto/frameworks/native/opengl/libs/GLES_trace/proto/gltrace.pb.cc\".)\r\n`"}