{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/280986531", "html_url": "https://github.com/tensorflow/tensorflow/issues/6189#issuecomment-280986531", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6189", "id": 280986531, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDk4NjUzMQ==", "user": {"login": "eamartin", "id": 287200, "node_id": "MDQ6VXNlcjI4NzIwMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/287200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eamartin", "html_url": "https://github.com/eamartin", "followers_url": "https://api.github.com/users/eamartin/followers", "following_url": "https://api.github.com/users/eamartin/following{/other_user}", "gists_url": "https://api.github.com/users/eamartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/eamartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eamartin/subscriptions", "organizations_url": "https://api.github.com/users/eamartin/orgs", "repos_url": "https://api.github.com/users/eamartin/repos", "events_url": "https://api.github.com/users/eamartin/events{/privacy}", "received_events_url": "https://api.github.com/users/eamartin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-20T04:39:35Z", "updated_at": "2017-02-20T04:39:35Z", "author_association": "NONE", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1381301\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ppwwyyxx\">@ppwwyyxx</a> , this works for my OOP use-case. I wasn't aware of <code>original_name_scope</code>, this could use some docs!</p>\n<p>One tricky case with this pattern: If you want to re-open the scope and create new variables, how do you give the appropriate names to the created ops in the re-opened scope? Here's the workaround:</p>\n<p>First attempt:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> scope:\n    x <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1.0</span>)\n    x2 <span class=\"pl-k\">=</span> tf.multiply(x, <span class=\"pl-c1\">2</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>x2<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-k\">with</span> tf.variable_scope(scope):\n    y <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>y<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2.0</span>)\n    y2 <span class=\"pl-k\">=</span> tf.multiply(y, <span class=\"pl-c1\">2</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>y2<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-c1\">print</span>(x, x2, y, y2)</pre></div>\n<p>outputs <code>Tensor(\"foo/x/read:0\", shape=(), dtype=float32) Tensor(\"foo/x2:0\", shape=(), dtype=float32) Tensor(\"foo/y/read:0\", shape=(), dtype=float32) Tensor(\"foo_1/y2:0\", shape=(), dtype=float32)</code>. This is wrong for <code>foo_1/y2</code>.</p>\n<p>Next (ugly approach): Add a <code>with tf.name_scope(scope.original_name_scope):</code> block inside of the <code>with tf.variable_scope(scope):</code> block. This leads to correct output <code>Tensor(\"foo/x/read:0\", shape=(), dtype=float32) Tensor(\"foo/x2:0\", shape=(), dtype=float32) Tensor(\"foo/y/read:0\", shape=(), dtype=float32) Tensor(\"foo/y2:0\", shape=(), dtype=float32)</code></p>", "body_text": "Thanks @ppwwyyxx , this works for my OOP use-case. I wasn't aware of original_name_scope, this could use some docs!\nOne tricky case with this pattern: If you want to re-open the scope and create new variables, how do you give the appropriate names to the created ops in the re-opened scope? Here's the workaround:\nFirst attempt:\nimport tensorflow as tf\n\nwith tf.variable_scope('foo') as scope:\n    x = tf.get_variable('x', initializer=1.0)\n    x2 = tf.multiply(x, 2, name='x2')\n\nwith tf.variable_scope(scope):\n    y = tf.get_variable('y', initializer=2.0)\n    y2 = tf.multiply(y, 2, name='y2')\n\nprint(x, x2, y, y2)\noutputs Tensor(\"foo/x/read:0\", shape=(), dtype=float32) Tensor(\"foo/x2:0\", shape=(), dtype=float32) Tensor(\"foo/y/read:0\", shape=(), dtype=float32) Tensor(\"foo_1/y2:0\", shape=(), dtype=float32). This is wrong for foo_1/y2.\nNext (ugly approach): Add a with tf.name_scope(scope.original_name_scope): block inside of the with tf.variable_scope(scope): block. This leads to correct output Tensor(\"foo/x/read:0\", shape=(), dtype=float32) Tensor(\"foo/x2:0\", shape=(), dtype=float32) Tensor(\"foo/y/read:0\", shape=(), dtype=float32) Tensor(\"foo/y2:0\", shape=(), dtype=float32)", "body": "Thanks @ppwwyyxx , this works for my OOP use-case. I wasn't aware of ``original_name_scope``, this could use some docs!\r\n\r\nOne tricky case with this pattern: If you want to re-open the scope and create new variables, how do you give the appropriate names to the created ops in the re-opened scope? Here's the workaround:\r\n\r\nFirst attempt:\r\n```python\r\nimport tensorflow as tf\r\n\r\nwith tf.variable_scope('foo') as scope:\r\n    x = tf.get_variable('x', initializer=1.0)\r\n    x2 = tf.multiply(x, 2, name='x2')\r\n\r\nwith tf.variable_scope(scope):\r\n    y = tf.get_variable('y', initializer=2.0)\r\n    y2 = tf.multiply(y, 2, name='y2')\r\n\r\nprint(x, x2, y, y2)\r\n```\r\noutputs ``Tensor(\"foo/x/read:0\", shape=(), dtype=float32) Tensor(\"foo/x2:0\", shape=(), dtype=float32) Tensor(\"foo/y/read:0\", shape=(), dtype=float32) Tensor(\"foo_1/y2:0\", shape=(), dtype=float32)``. This is wrong for ``foo_1/y2``.\r\n\r\nNext (ugly approach): Add a ``with tf.name_scope(scope.original_name_scope):`` block inside of the ``with tf.variable_scope(scope):`` block. This leads to correct output ``Tensor(\"foo/x/read:0\", shape=(), dtype=float32) Tensor(\"foo/x2:0\", shape=(), dtype=float32) Tensor(\"foo/y/read:0\", shape=(), dtype=float32) Tensor(\"foo/y2:0\", shape=(), dtype=float32)``\r\n\r\n"}