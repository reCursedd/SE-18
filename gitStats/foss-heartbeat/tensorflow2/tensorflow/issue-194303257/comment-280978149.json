{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/280978149", "html_url": "https://github.com/tensorflow/tensorflow/issues/6189#issuecomment-280978149", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6189", "id": 280978149, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDk3ODE0OQ==", "user": {"login": "eamartin", "id": 287200, "node_id": "MDQ6VXNlcjI4NzIwMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/287200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eamartin", "html_url": "https://github.com/eamartin", "followers_url": "https://api.github.com/users/eamartin/followers", "following_url": "https://api.github.com/users/eamartin/following{/other_user}", "gists_url": "https://api.github.com/users/eamartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/eamartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eamartin/subscriptions", "organizations_url": "https://api.github.com/users/eamartin/orgs", "repos_url": "https://api.github.com/users/eamartin/repos", "events_url": "https://api.github.com/users/eamartin/events{/privacy}", "received_events_url": "https://api.github.com/users/eamartin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-20T03:12:40Z", "updated_at": "2017-02-20T03:12:40Z", "author_association": "NONE", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1381301\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ppwwyyxx\">@ppwwyyxx</a> . The main issue here that <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7032458\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nasimrahaman\">@nasimrahaman</a> and I are looking for is the naming. Additionally, there's no need for the variable scope just to access the variables as the variables themselves could be saved on the instance (no <code>get_variable</code> call).</p>\n<p>For my previous example, the suggested scheme would currently give the names:</p>\n<div class=\"highlight highlight-source-python\"><pre>f0 <span class=\"pl-k\">=</span> Foo()      <span class=\"pl-c\"><span class=\"pl-c\">#</span> Foo/__init__/x</span>\nf1 <span class=\"pl-k\">=</span> Foo()      <span class=\"pl-c\"><span class=\"pl-c\">#</span> Foo_1/__init__/x</span>\nf0.meth(<span class=\"pl-c1\">1.0</span>)    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Foo_2/meth/*</span>\nf0.meth(<span class=\"pl-c1\">2.0</span>)    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Foo_3/meth/*</span>\nf1.meth(<span class=\"pl-c1\">3.0</span>)    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Foo_4/meth/*</span></pre></div>\n<p>which doesn't help at all with distinguishing calls to different instances of <code>Foo</code>.</p>", "body_text": "Thanks @ppwwyyxx . The main issue here that @nasimrahaman and I are looking for is the naming. Additionally, there's no need for the variable scope just to access the variables as the variables themselves could be saved on the instance (no get_variable call).\nFor my previous example, the suggested scheme would currently give the names:\nf0 = Foo()      # Foo/__init__/x\nf1 = Foo()      # Foo_1/__init__/x\nf0.meth(1.0)    # Foo_2/meth/*\nf0.meth(2.0)    # Foo_3/meth/*\nf1.meth(3.0)    # Foo_4/meth/*\nwhich doesn't help at all with distinguishing calls to different instances of Foo.", "body": "Thanks @ppwwyyxx . The main issue here that @nasimrahaman and I are looking for is the naming. Additionally, there's no need for the variable scope just to access the variables as the variables themselves could be saved on the instance (no ``get_variable`` call). \r\n\r\nFor my previous example, the suggested scheme would currently give the names:\r\n```python\r\nf0 = Foo()      # Foo/__init__/x\r\nf1 = Foo()      # Foo_1/__init__/x\r\nf0.meth(1.0)    # Foo_2/meth/*\r\nf0.meth(2.0)    # Foo_3/meth/*\r\nf1.meth(3.0)    # Foo_4/meth/*\r\n```\r\nwhich doesn't help at all with distinguishing calls to different instances of ``Foo``."}