{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6189", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6189/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6189/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6189/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6189", "id": 194303257, "node_id": "MDU6SXNzdWUxOTQzMDMyNTc=", "number": 6189, "title": "Inconsistent behavior for tf.variable_scope", "user": {"login": "nasimrahaman", "id": 7032458, "node_id": "MDQ6VXNlcjcwMzI0NTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/7032458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nasimrahaman", "html_url": "https://github.com/nasimrahaman", "followers_url": "https://api.github.com/users/nasimrahaman/followers", "following_url": "https://api.github.com/users/nasimrahaman/following{/other_user}", "gists_url": "https://api.github.com/users/nasimrahaman/gists{/gist_id}", "starred_url": "https://api.github.com/users/nasimrahaman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nasimrahaman/subscriptions", "organizations_url": "https://api.github.com/users/nasimrahaman/orgs", "repos_url": "https://api.github.com/users/nasimrahaman/repos", "events_url": "https://api.github.com/users/nasimrahaman/events{/privacy}", "received_events_url": "https://api.github.com/users/nasimrahaman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 284443156, "node_id": "MDU6TGFiZWwyODQ0NDMxNTY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:docs", "name": "type:docs", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 17, "created_at": "2016-12-08T10:45:38Z", "updated_at": "2018-01-10T03:19:33Z", "closed_at": "2017-12-21T07:09:52Z", "author_association": "NONE", "body_html": "<h4>Problem:</h4>\n<p>Tensorflow doesn't place ops (e.g. <code>mul</code>) in pre-existing variable scopes (and automatically creates a new scope instead).</p>\n<h4>Minimal Reproducible Example</h4>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>layer123<span class=\"pl-pds\">'</span></span>):\n    v <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>v<span class=\"pl-pds\">'</span></span>, [], <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.constant_initializer(<span class=\"pl-c1\">42</span>., tf.float32))\n    w <span class=\"pl-k\">=</span> v <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>\n<span class=\"pl-c1\">print</span>(w.name)    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Prints 'layer123/mul:0'</span></pre></div>\n<p>However,</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>layer123<span class=\"pl-pds\">'</span></span>):\n    v <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>v<span class=\"pl-pds\">'</span></span>, [], <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.constant_initializer(<span class=\"pl-c1\">42</span>., tf.float32))\n\n<span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>layer123<span class=\"pl-pds\">'</span></span>):\n    w <span class=\"pl-k\">=</span> v <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>\n\n<span class=\"pl-c1\">print</span>(w.name)    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Prints 'layer123_1/mul:0'</span></pre></div>\n<p>Observe that for the latter, the op <code>w</code> is placed in a different variable scope, auto-named <code>layer123_1</code>.</p>\n<p>I've tried the following, to the same effect:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>layer123<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> scope:\n    v <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>v<span class=\"pl-pds\">'</span></span>, [], <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.constant_initializer(<span class=\"pl-c1\">42</span>., tf.float32))\n\n<span class=\"pl-k\">with</span> tf.variable_scope(scope):\n    w <span class=\"pl-k\">=</span> v <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>\n\n<span class=\"pl-c1\">print</span>(w.name)    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Prints 'layer123_1/mul:0'</span></pre></div>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>layer123<span class=\"pl-pds\">'</span></span>):\n    v <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>v<span class=\"pl-pds\">'</span></span>, [], <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.constant_initializer(<span class=\"pl-c1\">42</span>., tf.float32))\n\n<span class=\"pl-k\">with</span> tf.variable_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>layer123<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>):\n    w <span class=\"pl-k\">=</span> v <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>\n\n<span class=\"pl-c1\">print</span>(w.name)    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Prints 'layer123_1/mul:0'</span></pre></div>\n<h4>VersionSpec</h4>\n<p>Tensorflow version: 0.11.0 (GPU)<br>\nOS: Ubuntu 14.04 (w/ CUDA 8)</p>", "body_text": "Problem:\nTensorflow doesn't place ops (e.g. mul) in pre-existing variable scopes (and automatically creates a new scope instead).\nMinimal Reproducible Example\nwith tf.variable_scope('layer123'):\n    v = tf.get_variable('v', [], initializer=tf.constant_initializer(42., tf.float32))\n    w = v * 2\nprint(w.name)    # Prints 'layer123/mul:0'\nHowever,\nwith tf.variable_scope('layer123'):\n    v = tf.get_variable('v', [], initializer=tf.constant_initializer(42., tf.float32))\n\nwith tf.variable_scope('layer123'):\n    w = v * 2\n\nprint(w.name)    # Prints 'layer123_1/mul:0'\nObserve that for the latter, the op w is placed in a different variable scope, auto-named layer123_1.\nI've tried the following, to the same effect:\nwith tf.variable_scope('layer123') as scope:\n    v = tf.get_variable('v', [], initializer=tf.constant_initializer(42., tf.float32))\n\nwith tf.variable_scope(scope):\n    w = v * 2\n\nprint(w.name)    # Prints 'layer123_1/mul:0'\nwith tf.variable_scope('layer123'):\n    v = tf.get_variable('v', [], initializer=tf.constant_initializer(42., tf.float32))\n\nwith tf.variable_scope('layer123', reuse=True):\n    w = v * 2\n\nprint(w.name)    # Prints 'layer123_1/mul:0'\nVersionSpec\nTensorflow version: 0.11.0 (GPU)\nOS: Ubuntu 14.04 (w/ CUDA 8)", "body": "#### Problem:\r\nTensorflow doesn't place ops (e.g. `mul`) in pre-existing variable scopes (and automatically creates a new scope instead). \r\n\r\n#### Minimal Reproducible Example\r\n```python\r\nwith tf.variable_scope('layer123'):\r\n    v = tf.get_variable('v', [], initializer=tf.constant_initializer(42., tf.float32))\r\n    w = v * 2\r\nprint(w.name)    # Prints 'layer123/mul:0'\r\n```\r\n\r\nHowever, \r\n```python\r\nwith tf.variable_scope('layer123'):\r\n    v = tf.get_variable('v', [], initializer=tf.constant_initializer(42., tf.float32))\r\n\r\nwith tf.variable_scope('layer123'):\r\n    w = v * 2\r\n\r\nprint(w.name)    # Prints 'layer123_1/mul:0'\r\n```\r\n\r\nObserve that for the latter, the op `w` is placed in a different variable scope, auto-named `layer123_1`.\r\n\r\nI've tried the following, to the same effect:\r\n\r\n```python\r\nwith tf.variable_scope('layer123') as scope:\r\n    v = tf.get_variable('v', [], initializer=tf.constant_initializer(42., tf.float32))\r\n\r\nwith tf.variable_scope(scope):\r\n    w = v * 2\r\n\r\nprint(w.name)    # Prints 'layer123_1/mul:0'\r\n```\r\n\r\n```python\r\nwith tf.variable_scope('layer123'):\r\n    v = tf.get_variable('v', [], initializer=tf.constant_initializer(42., tf.float32))\r\n\r\nwith tf.variable_scope('layer123', reuse=True):\r\n    w = v * 2\r\n\r\nprint(w.name)    # Prints 'layer123_1/mul:0'\r\n```\r\n\r\n#### VersionSpec\r\nTensorflow version: 0.11.0 (GPU)\r\nOS: Ubuntu 14.04 (w/ CUDA 8)"}