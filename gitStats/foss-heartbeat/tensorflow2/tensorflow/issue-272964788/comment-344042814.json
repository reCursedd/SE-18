{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/344042814", "html_url": "https://github.com/tensorflow/tensorflow/issues/14452#issuecomment-344042814", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14452", "id": 344042814, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDA0MjgxNA==", "user": {"login": "asoehlke", "id": 15350401, "node_id": "MDQ6VXNlcjE1MzUwNDAx", "avatar_url": "https://avatars2.githubusercontent.com/u/15350401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asoehlke", "html_url": "https://github.com/asoehlke", "followers_url": "https://api.github.com/users/asoehlke/followers", "following_url": "https://api.github.com/users/asoehlke/following{/other_user}", "gists_url": "https://api.github.com/users/asoehlke/gists{/gist_id}", "starred_url": "https://api.github.com/users/asoehlke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asoehlke/subscriptions", "organizations_url": "https://api.github.com/users/asoehlke/orgs", "repos_url": "https://api.github.com/users/asoehlke/repos", "events_url": "https://api.github.com/users/asoehlke/events{/privacy}", "received_events_url": "https://api.github.com/users/asoehlke/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-13T20:11:15Z", "updated_at": "2017-11-13T20:11:15Z", "author_association": "NONE", "body_html": "<p>I have a similar problem with non-trainable variables (trainable=False) which are also modified within the model. A description of what I found out so far is below.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4441724\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/GPhilo\">@GPhilo</a>: Can it be that the value of global_step is modified when processing the model? The name sounds like a kind of counter?<br>\nIf it is modeled like this then I guess it needs to remain a variable, a const value could not be changed in the model.</p>\n<p>Unfortunately, blacklisting the variables seems not to be enough, when trying to use the model I now got the error that these variables are not initialized:<br>\nAttempting to use uninitialized value rnn_state_c_0<br>\n[[Node: rnn_state_c_0/read = Identity[T=DT_FLOAT, _class=[\"loc:@rnn_state_c_0\"], _device=\"/job:localhost/replica:0/task:0/cpu:0\"](rnn_state_c_0)]]</p>\n<p>Some further investigation: The init node of the model is gone in the frozen model.<br>\nIn the attached files:</p>\n<ul>\n<li>BachAccompanist.exported.pbtxt is the original exported graph</li>\n<li>BachAccompanist.patched.pbtxt is a patched version of the exported graph, I manually copied the init node to a new node \"initVars\" and kept only the blacklisted variables as input.</li>\n</ul>\n<p>When I imported the patched frozen graph and ran the initVars node first, then the \"uninitialized variables\" error is gone.<br>\nI reexported this model that I imported from the frozen model as BachAccompanist.frozen.reexported.pbtxt</p>\n<p>Unfortunatly I now seem to get only get a None result when running the model:<br>\noutput_step = sess.run(\"output\", {in_data : tick_data})<br>\nprint(output_step)<br>\n-&gt; None<br>\nBut this might also be a different problem.</p>\n<p>Suggestions:</p>\n<ul>\n<li>when freezing the model it would be good to have an option to only freeze the trainable variables.</li>\n<li>the init node should remain for the blacklisted variables</li>\n</ul>\n<p><strong>System information</strong></p>\n<pre><code>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu Studio 16.04\nTensorFlow installed from (source or binary): source and binary\nTensorFlow version (use command below): release 1.4.0\nPython version: 3.6.3 (source installation), 3.4.5 (binary installation)\nBazel version (if compiling from source): 0.7.0\nGCC/Compiler version (if compiling from source): gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4)\nCUDA/cuDNN version: -\nGPU model and memory: -\nExact command to reproduce:\n</code></pre>\n<p>freeze_graph --input_checkpoint BachAccompanist.pb.ckpt --input_graph BachAccompanist.exported.pbtxt --output_node_names output,state_update,initVars --input_binary False  --variable_names_blacklist rnn_state_h_0,rnn_state_c_0,rnn_state_h_1,rnn_state_c_1,rnn_state_h_2,rnn_state_c_2,rnn/multi_rnn_cell/cell_0/lstm_cell/w_f_diag,rnn/multi_rnn_cell/cell_0/lstm_cell/w_i_diag,rnn/multi_rnn_cell/cell_0/lstm_cell/w_o_diag,rnn/multi_rnn_cell/cell_1/lstm_cell/w_f_diag,rnn/multi_rnn_cell/cell_1/lstm_cell/w_i_diag,rnn/multi_rnn_cell/cell_1/lstm_cell/w_o_diag,rnn/multi_rnn_cell/cell_2/lstm_cell/w_f_diag,rnn/multi_rnn_cell/cell_2/lstm_cell/w_i_diag,rnn/multi_rnn_cell/cell_2/lstm_cell/w_o_diag --output_graph BachAccompanist.frozen.pb</p>\n<p>Used models:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/1468266/models.zip\">models.zip</a></p>", "body_text": "I have a similar problem with non-trainable variables (trainable=False) which are also modified within the model. A description of what I found out so far is below.\n@GPhilo: Can it be that the value of global_step is modified when processing the model? The name sounds like a kind of counter?\nIf it is modeled like this then I guess it needs to remain a variable, a const value could not be changed in the model.\nUnfortunately, blacklisting the variables seems not to be enough, when trying to use the model I now got the error that these variables are not initialized:\nAttempting to use uninitialized value rnn_state_c_0\n[[Node: rnn_state_c_0/read = Identity[T=DT_FLOAT, _class=[\"loc:@rnn_state_c_0\"], _device=\"/job:localhost/replica:0/task:0/cpu:0\"](rnn_state_c_0)]]\nSome further investigation: The init node of the model is gone in the frozen model.\nIn the attached files:\n\nBachAccompanist.exported.pbtxt is the original exported graph\nBachAccompanist.patched.pbtxt is a patched version of the exported graph, I manually copied the init node to a new node \"initVars\" and kept only the blacklisted variables as input.\n\nWhen I imported the patched frozen graph and ran the initVars node first, then the \"uninitialized variables\" error is gone.\nI reexported this model that I imported from the frozen model as BachAccompanist.frozen.reexported.pbtxt\nUnfortunatly I now seem to get only get a None result when running the model:\noutput_step = sess.run(\"output\", {in_data : tick_data})\nprint(output_step)\n-> None\nBut this might also be a different problem.\nSuggestions:\n\nwhen freezing the model it would be good to have an option to only freeze the trainable variables.\nthe init node should remain for the blacklisted variables\n\nSystem information\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu Studio 16.04\nTensorFlow installed from (source or binary): source and binary\nTensorFlow version (use command below): release 1.4.0\nPython version: 3.6.3 (source installation), 3.4.5 (binary installation)\nBazel version (if compiling from source): 0.7.0\nGCC/Compiler version (if compiling from source): gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4)\nCUDA/cuDNN version: -\nGPU model and memory: -\nExact command to reproduce:\n\nfreeze_graph --input_checkpoint BachAccompanist.pb.ckpt --input_graph BachAccompanist.exported.pbtxt --output_node_names output,state_update,initVars --input_binary False  --variable_names_blacklist rnn_state_h_0,rnn_state_c_0,rnn_state_h_1,rnn_state_c_1,rnn_state_h_2,rnn_state_c_2,rnn/multi_rnn_cell/cell_0/lstm_cell/w_f_diag,rnn/multi_rnn_cell/cell_0/lstm_cell/w_i_diag,rnn/multi_rnn_cell/cell_0/lstm_cell/w_o_diag,rnn/multi_rnn_cell/cell_1/lstm_cell/w_f_diag,rnn/multi_rnn_cell/cell_1/lstm_cell/w_i_diag,rnn/multi_rnn_cell/cell_1/lstm_cell/w_o_diag,rnn/multi_rnn_cell/cell_2/lstm_cell/w_f_diag,rnn/multi_rnn_cell/cell_2/lstm_cell/w_i_diag,rnn/multi_rnn_cell/cell_2/lstm_cell/w_o_diag --output_graph BachAccompanist.frozen.pb\nUsed models:\nmodels.zip", "body": "I have a similar problem with non-trainable variables (trainable=False) which are also modified within the model. A description of what I found out so far is below.\r\n\r\n@GPhilo: Can it be that the value of global_step is modified when processing the model? The name sounds like a kind of counter?\r\nIf it is modeled like this then I guess it needs to remain a variable, a const value could not be changed in the model.\r\n\r\n\r\nUnfortunately, blacklisting the variables seems not to be enough, when trying to use the model I now got the error that these variables are not initialized:\r\nAttempting to use uninitialized value rnn_state_c_0\r\n\t \\[\\[Node: rnn_state_c_0/read = Identity\\[T=DT_FLOAT, _class=[\"loc:@rnn_state_c_0\"], _device=\"/job:localhost/replica:0/task:0/cpu:0\"](rnn_state_c_0)]]\r\n\r\nSome further investigation: The init node of the model is gone in the frozen model. \r\nIn the attached files:\r\n- BachAccompanist.exported.pbtxt is the original exported graph\r\n- BachAccompanist.patched.pbtxt is a patched version of the exported graph, I manually copied the init node to a new node \"initVars\" and kept only the blacklisted variables as input.\r\n\r\nWhen I imported the patched frozen graph and ran the initVars node first, then the \"uninitialized variables\" error is gone.\r\nI reexported this model that I imported from the frozen model as BachAccompanist.frozen.reexported.pbtxt\r\n\r\nUnfortunatly I now seem to get only get a None result when running the model:\r\n output_step = sess.run(\"output\", {in_data : tick_data})\r\n print(output_step)\r\n-> None\r\nBut this might also be a different problem.\r\n\r\nSuggestions:\r\n- when freezing the model it would be good to have an option to only freeze the trainable variables. \r\n- the init node should remain for the blacklisted variables \r\n\r\n**System information**\r\n\r\n    Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no\r\n    OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu Studio 16.04\r\n    TensorFlow installed from (source or binary): source and binary\r\n    TensorFlow version (use command below): release 1.4.0\r\n    Python version: 3.6.3 (source installation), 3.4.5 (binary installation)\r\n    Bazel version (if compiling from source): 0.7.0\r\n    GCC/Compiler version (if compiling from source): gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4)\r\n    CUDA/cuDNN version: -\r\n    GPU model and memory: -\r\n    Exact command to reproduce:\r\nfreeze_graph --input_checkpoint BachAccompanist.pb.ckpt --input_graph BachAccompanist.exported.pbtxt --output_node_names output,state_update,initVars --input_binary False  --variable_names_blacklist rnn_state_h_0,rnn_state_c_0,rnn_state_h_1,rnn_state_c_1,rnn_state_h_2,rnn_state_c_2,rnn/multi_rnn_cell/cell_0/lstm_cell/w_f_diag,rnn/multi_rnn_cell/cell_0/lstm_cell/w_i_diag,rnn/multi_rnn_cell/cell_0/lstm_cell/w_o_diag,rnn/multi_rnn_cell/cell_1/lstm_cell/w_f_diag,rnn/multi_rnn_cell/cell_1/lstm_cell/w_i_diag,rnn/multi_rnn_cell/cell_1/lstm_cell/w_o_diag,rnn/multi_rnn_cell/cell_2/lstm_cell/w_f_diag,rnn/multi_rnn_cell/cell_2/lstm_cell/w_i_diag,rnn/multi_rnn_cell/cell_2/lstm_cell/w_o_diag --output_graph BachAccompanist.frozen.pb\r\n\r\nUsed models:\r\n[models.zip](https://github.com/tensorflow/tensorflow/files/1468266/models.zip)\r\n\r\n\r\n \r\n"}