{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/114654541", "pull_request_review_id": 36139669, "id": 114654541, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDY1NDU0MQ==", "diff_hunk": "@@ -0,0 +1,125 @@\n+/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n+#include \"tensorflow/core/framework/op.h\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/tensor_types.h\"\n+#include \"tensorflow/core/framework/register_types.h\"\n+#include \"tensorflow/core/kernels/bounds_check.h\"\n+#include \"tensorflow/contrib/repeat/kernels/repeat_op.h\"\n+\n+namespace tensorflow{\n+\n+typedef Eigen::ThreadPoolDevice CPUDevice;\n+#if GOOGLE_CUDA\n+typedef Eigen::GpuDevice GPUDevice;\n+#endif // GOOGLE_CUDA\n+\n+template <typename Device, typename T>\n+class RepeatOp : public OpKernel {\n+ public:\n+  explicit RepeatOp(OpKernelConstruction* context) : OpKernel(context) {\n+    OP_REQUIRES_OK(context, context->GetAttr(\"axis\", &axis_));\n+  }\n+  \n+  void Compute(OpKernelContext* context) override {\n+    const Tensor& input = context->input(0);\n+    const Tensor& repeats = context->input(1);\n+    const int input_rank = input.dims()==0 ? 1 : input.dims();\n+    const int32 axis = axis_>=0 ? axis_ : axis_+input_rank;\n+    \n+    OP_REQUIRES(context, TensorShapeUtils::IsVector(repeats.shape()) ||\n+                         TensorShapeUtils::IsScalar(repeats.shape()),\n+                errors::InvalidArgument(\"`repeats` expects a scalar or a 1-D vector.\"));\n+    OP_REQUIRES(context, FastBoundsCheck(axis, input_rank),\n+                errors::InvalidArgument(\n+                    \"Expected -\", input_rank, \" <= `axis` < \", input_rank));\n+    OP_REQUIRES(context, repeats.NumElements() == input.dim_size(axis) ||\n+                         repeats.NumElements() == 1,\n+                errors::InvalidArgument(\n+                    \"Expected `repeats` argument to be a vector of length \",\n+                    input.dim_size(axis_), \" or 1, but got length \",\n+                    repeats.NumElements()));\n+    \n+    auto repeats_flat = repeats.flat<int32>();\n+    TensorShape output_shape({1});\n+    int old_dim;\n+    if (input.dims() != 0) {\n+      output_shape = input.shape();\n+      old_dim = input.shape().dim_size(axis);\n+    } else {\n+      old_dim = 1;\n+    }\n+    int new_dim = 0;\n+    if (repeats.NumElements() == 1) {\n+      new_dim = repeats_flat(0) * old_dim;\n+    } else {\n+      const int N = repeats_flat.size();\n+      for (int i = 0; i < N; ++i) {\n+        new_dim += repeats_flat(i);\n+      }\n+    }\n+    output_shape.set_dim(axis, new_dim);\n+    \n+    Tensor* output = NULL;\n+    OP_REQUIRES_OK(context, context->allocate_output(0, output_shape, &output));\n+    \n+\n+#if GOOGLE_CUDA\n+    if (std::is_same<Device, GPUDevice>::value) {\n+      RepeatGPUImpl<T>(context->eigen_gpu_device(), input, repeats_flat, axis, output);\n+      return ;\n+    }\n+#endif // GOOGLE_CUDA\n+\n+    RepeatCPUImplV2<T>(context->device(), input, repeats_flat,\n+                       axis, 10000, output); ", "path": "tensorflow/contrib/repeat/kernels/repeat_op.cc", "position": null, "original_position": 89, "commit_id": "a81df6aff5a399d566502ef7fdf3dedd38ee0f46", "original_commit_id": "6d725adcfa53bda6126e4097d096e9601e1902e3", "user": {"login": "zycdragonball", "id": 26096551, "node_id": "MDQ6VXNlcjI2MDk2NTUx", "avatar_url": "https://avatars0.githubusercontent.com/u/26096551?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zycdragonball", "html_url": "https://github.com/zycdragonball", "followers_url": "https://api.github.com/users/zycdragonball/followers", "following_url": "https://api.github.com/users/zycdragonball/following{/other_user}", "gists_url": "https://api.github.com/users/zycdragonball/gists{/gist_id}", "starred_url": "https://api.github.com/users/zycdragonball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zycdragonball/subscriptions", "organizations_url": "https://api.github.com/users/zycdragonball/orgs", "repos_url": "https://api.github.com/users/zycdragonball/repos", "events_url": "https://api.github.com/users/zycdragonball/events{/privacy}", "received_events_url": "https://api.github.com/users/zycdragonball/received_events", "type": "User", "site_admin": false}, "body": "Done", "created_at": "2017-05-03T21:09:45Z", "updated_at": "2017-09-27T06:06:37Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8954#discussion_r114654541", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8954", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/114654541"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8954#discussion_r114654541"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8954"}}, "body_html": "<p>Done</p>", "body_text": "Done", "in_reply_to_id": 114591088}