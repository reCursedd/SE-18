{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/404301463", "html_url": "https://github.com/tensorflow/tensorflow/issues/19720#issuecomment-404301463", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19720", "id": 404301463, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDMwMTQ2Mw==", "user": {"login": "iRonJ", "id": 6108031, "node_id": "MDQ6VXNlcjYxMDgwMzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6108031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iRonJ", "html_url": "https://github.com/iRonJ", "followers_url": "https://api.github.com/users/iRonJ/followers", "following_url": "https://api.github.com/users/iRonJ/following{/other_user}", "gists_url": "https://api.github.com/users/iRonJ/gists{/gist_id}", "starred_url": "https://api.github.com/users/iRonJ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iRonJ/subscriptions", "organizations_url": "https://api.github.com/users/iRonJ/orgs", "repos_url": "https://api.github.com/users/iRonJ/repos", "events_url": "https://api.github.com/users/iRonJ/events{/privacy}", "received_events_url": "https://api.github.com/users/iRonJ/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-11T20:36:34Z", "updated_at": "2018-07-11T20:37:29Z", "author_association": "NONE", "body_html": "<p>So the cause of this issue is the SIP in Mac OS, basically when python launches, due to SIP, the subprocess of Tensorflow doesn't get passed the environment variable for the library locations, so _pywrap_tensorflow_internal.so as referenced in the error message can't find the library locations.</p>\n<p>The solution is to link _pywrap_tensorflow_internal.so so rather than relying on environment variables, it checks the file path directly (in this case looking for /usr/local/cuda/lib/).</p>\n<p>The workaround, so you don't have to rebuild everything is to use the command line tool \"install_name_tool\" to update the object file linking. To do this you just run this command, using the appropriate path for where your tensorflow wheel installed, you'll need to do this for 2 object files actually:<br>\n<code>install_name_tool -change @rpath/libcusolver.9.2.dylib /usr/local/cuda/lib/libcusolver.9.2.dylib -change @rpath/libcudart.9.2.dylib /usr/local/cuda/lib/libcudart.9.2.dylib   -change @rpath/libcublas.9.2.dylib /usr/local/cuda/lib/libcublas.9.2.dylib **CHANGETHISPATH**/python3.5/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so </code></p>\n<p><code>install_name_tool -change @rpath/libcudart.9.2.dylib /usr/local/cuda/lib/libcudart.9.2.dylib -change @rpath/libcublas.9.2.dylib /usr/local/cuda/lib/libcublas.9.2.dylib -change @rpath/libcudnn.7.dylib /usr/local/cuda/lib/libcudnn.7.dylib -change @rpath/libcufft.9.2.dylib /usr/local/cuda/lib/libcufft.9.2.dylib -change @rpath/libcurand.9.2.dylib /usr/local/cuda/lib/libcurand.9.2.dylib -change @rpath/libcudart.9.2.dylib /usr/local/cuda/lib/libcudart.9.2.dylib  **CHANGETHISPATH**/python3.5/site-packages/tensorflow/libtensorflow_framework.so</code></p>\n<p>The permanent solution seems to be to add a flag to the compile per <a href=\"https://stackoverflow.com/questions/39927235/alternative-for-the-dyld-library-path-trick-since-mac-os-10-11-el-capitan-with-s\" rel=\"nofollow\">https://stackoverflow.com/questions/39927235/alternative-for-the-dyld-library-path-trick-since-mac-os-10-11-el-capitan-with-s</a> but I don't know enough about the tensorflow build to say where this needs to go</p>", "body_text": "So the cause of this issue is the SIP in Mac OS, basically when python launches, due to SIP, the subprocess of Tensorflow doesn't get passed the environment variable for the library locations, so _pywrap_tensorflow_internal.so as referenced in the error message can't find the library locations.\nThe solution is to link _pywrap_tensorflow_internal.so so rather than relying on environment variables, it checks the file path directly (in this case looking for /usr/local/cuda/lib/).\nThe workaround, so you don't have to rebuild everything is to use the command line tool \"install_name_tool\" to update the object file linking. To do this you just run this command, using the appropriate path for where your tensorflow wheel installed, you'll need to do this for 2 object files actually:\ninstall_name_tool -change @rpath/libcusolver.9.2.dylib /usr/local/cuda/lib/libcusolver.9.2.dylib -change @rpath/libcudart.9.2.dylib /usr/local/cuda/lib/libcudart.9.2.dylib   -change @rpath/libcublas.9.2.dylib /usr/local/cuda/lib/libcublas.9.2.dylib **CHANGETHISPATH**/python3.5/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so \ninstall_name_tool -change @rpath/libcudart.9.2.dylib /usr/local/cuda/lib/libcudart.9.2.dylib -change @rpath/libcublas.9.2.dylib /usr/local/cuda/lib/libcublas.9.2.dylib -change @rpath/libcudnn.7.dylib /usr/local/cuda/lib/libcudnn.7.dylib -change @rpath/libcufft.9.2.dylib /usr/local/cuda/lib/libcufft.9.2.dylib -change @rpath/libcurand.9.2.dylib /usr/local/cuda/lib/libcurand.9.2.dylib -change @rpath/libcudart.9.2.dylib /usr/local/cuda/lib/libcudart.9.2.dylib  **CHANGETHISPATH**/python3.5/site-packages/tensorflow/libtensorflow_framework.so\nThe permanent solution seems to be to add a flag to the compile per https://stackoverflow.com/questions/39927235/alternative-for-the-dyld-library-path-trick-since-mac-os-10-11-el-capitan-with-s but I don't know enough about the tensorflow build to say where this needs to go", "body": "So the cause of this issue is the SIP in Mac OS, basically when python launches, due to SIP, the subprocess of Tensorflow doesn't get passed the environment variable for the library locations, so _pywrap_tensorflow_internal.so as referenced in the error message can't find the library locations.\r\n\r\nThe solution is to link _pywrap_tensorflow_internal.so so rather than relying on environment variables, it checks the file path directly (in this case looking for /usr/local/cuda/lib/<dylib name>).\r\n\r\nThe workaround, so you don't have to rebuild everything is to use the command line tool \"install_name_tool\" to update the object file linking. To do this you just run this command, using the appropriate path for where your tensorflow wheel installed, you'll need to do this for 2 object files actually:\r\n`install_name_tool -change @rpath/libcusolver.9.2.dylib /usr/local/cuda/lib/libcusolver.9.2.dylib -change @rpath/libcudart.9.2.dylib /usr/local/cuda/lib/libcudart.9.2.dylib   -change @rpath/libcublas.9.2.dylib /usr/local/cuda/lib/libcublas.9.2.dylib **CHANGETHISPATH**/python3.5/site-packages/tensorflow/python/_pywrap_tensorflow_internal.so\r\n`\r\n\r\n\r\n`install_name_tool -change @rpath/libcudart.9.2.dylib /usr/local/cuda/lib/libcudart.9.2.dylib -change @rpath/libcublas.9.2.dylib /usr/local/cuda/lib/libcublas.9.2.dylib -change @rpath/libcudnn.7.dylib /usr/local/cuda/lib/libcudnn.7.dylib -change @rpath/libcufft.9.2.dylib /usr/local/cuda/lib/libcufft.9.2.dylib -change @rpath/libcurand.9.2.dylib /usr/local/cuda/lib/libcurand.9.2.dylib -change @rpath/libcudart.9.2.dylib /usr/local/cuda/lib/libcudart.9.2.dylib  **CHANGETHISPATH**/python3.5/site-packages/tensorflow/libtensorflow_framework.so`\r\n\r\nThe permanent solution seems to be to add a flag to the compile per https://stackoverflow.com/questions/39927235/alternative-for-the-dyld-library-path-trick-since-mac-os-10-11-el-capitan-with-s but I don't know enough about the tensorflow build to say where this needs to go"}