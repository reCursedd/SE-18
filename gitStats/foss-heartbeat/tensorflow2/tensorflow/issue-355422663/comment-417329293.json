{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/417329293", "html_url": "https://github.com/tensorflow/tensorflow/issues/21964#issuecomment-417329293", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21964", "id": 417329293, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzMyOTI5Mw==", "user": {"login": "gongliyu", "id": 7122320, "node_id": "MDQ6VXNlcjcxMjIzMjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/7122320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gongliyu", "html_url": "https://github.com/gongliyu", "followers_url": "https://api.github.com/users/gongliyu/followers", "following_url": "https://api.github.com/users/gongliyu/following{/other_user}", "gists_url": "https://api.github.com/users/gongliyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/gongliyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gongliyu/subscriptions", "organizations_url": "https://api.github.com/users/gongliyu/orgs", "repos_url": "https://api.github.com/users/gongliyu/repos", "events_url": "https://api.github.com/users/gongliyu/events{/privacy}", "received_events_url": "https://api.github.com/users/gongliyu/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-30T13:58:49Z", "updated_at": "2018-08-30T13:59:41Z", "author_association": "NONE", "body_html": "<p>Thanks,</p>\n<p>Currently, I did the following wrapping for a workaround</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">sparse_concat</span>(<span class=\"pl-smi\">values</span>, <span class=\"pl-smi\">axis</span>, <span class=\"pl-k\">*</span><span class=\"pl-smi\">args</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kwargs</span>):\n    shapes <span class=\"pl-k\">=</span> [x.get_shape() <span class=\"pl-k\">for</span> x <span class=\"pl-k\">in</span> values]\n    res <span class=\"pl-k\">=</span> tf.sparse_concat(axis, values, <span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">all</span>(x.is_fully_defined() <span class=\"pl-k\">for</span> x <span class=\"pl-k\">in</span> shapes):\n        dense_shape <span class=\"pl-k\">=</span> shapes[<span class=\"pl-c1\">0</span>].as_list()\n        D <span class=\"pl-k\">=</span> <span class=\"pl-c1\">sum</span>(x.as_list()[axis] <span class=\"pl-k\">for</span> x <span class=\"pl-k\">in</span> shapes)\n        dense_shape[axis] <span class=\"pl-k\">=</span> D\n        res <span class=\"pl-k\">=</span> tf.SparseTensor(<span class=\"pl-v\">indices</span><span class=\"pl-k\">=</span>res.indices,\n                              <span class=\"pl-v\">values</span><span class=\"pl-k\">=</span>res.values,\n                              <span class=\"pl-v\">dense_shape</span><span class=\"pl-k\">=</span>dense_shape)\n\n    <span class=\"pl-k\">return</span> res\n</pre></div>", "body_text": "Thanks,\nCurrently, I did the following wrapping for a workaround\ndef sparse_concat(values, axis, *args, **kwargs):\n    shapes = [x.get_shape() for x in values]\n    res = tf.sparse_concat(axis, values, *args, **kwargs)\n    if all(x.is_fully_defined() for x in shapes):\n        dense_shape = shapes[0].as_list()\n        D = sum(x.as_list()[axis] for x in shapes)\n        dense_shape[axis] = D\n        res = tf.SparseTensor(indices=res.indices,\n                              values=res.values,\n                              dense_shape=dense_shape)\n\n    return res", "body": "Thanks,\r\n\r\nCurrently, I did the following wrapping for a workaround\r\n\r\n```python\r\ndef sparse_concat(values, axis, *args, **kwargs):\r\n    shapes = [x.get_shape() for x in values]\r\n    res = tf.sparse_concat(axis, values, *args, **kwargs)\r\n    if all(x.is_fully_defined() for x in shapes):\r\n        dense_shape = shapes[0].as_list()\r\n        D = sum(x.as_list()[axis] for x in shapes)\r\n        dense_shape[axis] = D\r\n        res = tf.SparseTensor(indices=res.indices,\r\n                              values=res.values,\r\n                              dense_shape=dense_shape)\r\n\r\n    return res\r\n\r\n```"}