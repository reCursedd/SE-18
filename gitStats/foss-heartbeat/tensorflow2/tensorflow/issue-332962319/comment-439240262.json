{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/439240262", "html_url": "https://github.com/tensorflow/tensorflow/issues/20073#issuecomment-439240262", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20073", "id": 439240262, "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTI0MDI2Mg==", "user": {"login": "C-Pro", "id": 1990084, "node_id": "MDQ6VXNlcjE5OTAwODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1990084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/C-Pro", "html_url": "https://github.com/C-Pro", "followers_url": "https://api.github.com/users/C-Pro/followers", "following_url": "https://api.github.com/users/C-Pro/following{/other_user}", "gists_url": "https://api.github.com/users/C-Pro/gists{/gist_id}", "starred_url": "https://api.github.com/users/C-Pro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/C-Pro/subscriptions", "organizations_url": "https://api.github.com/users/C-Pro/orgs", "repos_url": "https://api.github.com/users/C-Pro/repos", "events_url": "https://api.github.com/users/C-Pro/events{/privacy}", "received_events_url": "https://api.github.com/users/C-Pro/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-16T00:33:25Z", "updated_at": "2018-11-16T00:33:25Z", "author_association": "NONE", "body_html": "<p>For those still struggling, here is my workaround - instead of saving whole model, i just save and load weights. Obviously in this case you need exact same model defined in learning and inference code.<br>\nE.g.:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">makeModel</span>(<span class=\"pl-smi\">env</span>, <span class=\"pl-smi\">shape</span>, <span class=\"pl-smi\">fname</span>, <span class=\"pl-smi\">lr</span>):\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> does not work due to https://github.com/tensorflow/tensorflow/issues/20073</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> if os.path.isfile(fname):</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>    print(\"Loading model\")</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>    return load_model(fname)</span>\n\n    m <span class=\"pl-k\">=</span> Sequential()\n    m.add(InputLayer(<span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span>shape<span class=\"pl-k\">+</span>(<span class=\"pl-c1\">4</span>,)))\n    m.add(Conv2D(<span class=\"pl-c1\">32</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">8</span>, <span class=\"pl-v\">strides</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>))\n    m.add(Conv2D(<span class=\"pl-c1\">64</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>, <span class=\"pl-v\">strides</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>))\n    m.add(Conv2D(<span class=\"pl-c1\">64</span>, <span class=\"pl-v\">kernel_size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>))\n    m.add(Dense(<span class=\"pl-c1\">512</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">activity_regularizer</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>l2<span class=\"pl-pds\">\"</span></span>))\n    m.add(Flatten())\n    m.add(Dense(env.action_space.n, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>linear<span class=\"pl-pds\">\"</span></span>))\n    m.compile(<span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>huber_loss, <span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span>tf.keras.optimizers.RMSprop(lr))\n    <span class=\"pl-k\">if</span> os.path.isfile(fname):\n       m.load_weights(fname)\n    <span class=\"pl-k\">return</span> m</pre></div>", "body_text": "For those still struggling, here is my workaround - instead of saving whole model, i just save and load weights. Obviously in this case you need exact same model defined in learning and inference code.\nE.g.:\ndef makeModel(env, shape, fname, lr):\n\n    # does not work due to https://github.com/tensorflow/tensorflow/issues/20073\n    # if os.path.isfile(fname):\n    #    print(\"Loading model\")\n    #    return load_model(fname)\n\n    m = Sequential()\n    m.add(InputLayer(input_shape=shape+(4,)))\n    m.add(Conv2D(32, kernel_size=8, strides=4, activation='relu'))\n    m.add(Conv2D(64, kernel_size=4, strides=2, activation='relu'))\n    m.add(Conv2D(64, kernel_size=3, activation='relu'))\n    m.add(Dense(512, activation='relu', activity_regularizer=\"l2\"))\n    m.add(Flatten())\n    m.add(Dense(env.action_space.n, activation=\"linear\"))\n    m.compile(loss=huber_loss, optimizer=tf.keras.optimizers.RMSprop(lr))\n    if os.path.isfile(fname):\n       m.load_weights(fname)\n    return m", "body": "For those still struggling, here is my workaround - instead of saving whole model, i just save and load weights. Obviously in this case you need exact same model defined in learning and inference code.\r\nE.g.:\r\n```python\r\ndef makeModel(env, shape, fname, lr):\r\n\r\n    # does not work due to https://github.com/tensorflow/tensorflow/issues/20073\r\n    # if os.path.isfile(fname):\r\n    #    print(\"Loading model\")\r\n    #    return load_model(fname)\r\n\r\n    m = Sequential()\r\n    m.add(InputLayer(input_shape=shape+(4,)))\r\n    m.add(Conv2D(32, kernel_size=8, strides=4, activation='relu'))\r\n    m.add(Conv2D(64, kernel_size=4, strides=2, activation='relu'))\r\n    m.add(Conv2D(64, kernel_size=3, activation='relu'))\r\n    m.add(Dense(512, activation='relu', activity_regularizer=\"l2\"))\r\n    m.add(Flatten())\r\n    m.add(Dense(env.action_space.n, activation=\"linear\"))\r\n    m.compile(loss=huber_loss, optimizer=tf.keras.optimizers.RMSprop(lr))\r\n    if os.path.isfile(fname):\r\n       m.load_weights(fname)\r\n    return m\r\n```"}