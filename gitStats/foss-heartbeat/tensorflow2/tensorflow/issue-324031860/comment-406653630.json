{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/406653630", "html_url": "https://github.com/tensorflow/tensorflow/issues/19354#issuecomment-406653630", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19354", "id": 406653630, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNjY1MzYzMA==", "user": {"login": "guschmue", "id": 22941064, "node_id": "MDQ6VXNlcjIyOTQxMDY0", "avatar_url": "https://avatars3.githubusercontent.com/u/22941064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guschmue", "html_url": "https://github.com/guschmue", "followers_url": "https://api.github.com/users/guschmue/followers", "following_url": "https://api.github.com/users/guschmue/following{/other_user}", "gists_url": "https://api.github.com/users/guschmue/gists{/gist_id}", "starred_url": "https://api.github.com/users/guschmue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guschmue/subscriptions", "organizations_url": "https://api.github.com/users/guschmue/orgs", "repos_url": "https://api.github.com/users/guschmue/repos", "events_url": "https://api.github.com/users/guschmue/events{/privacy}", "received_events_url": "https://api.github.com/users/guschmue/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-20T16:29:28Z", "updated_at": "2018-07-20T16:29:28Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think splitting into multiple dlls is the only way to handle the large pdbs.<br>\nOne issue that might come with this is the symbol exports from the dll done by <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/cmake/tools/create_def_file.py\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/cmake/tools/create_def_file.py</a> ... it is good enough to handle kernels in _lstm_ops.dll  but I'm not sure if it exports enough symbols to keep all kernels happy. In case additional symbols need to be exported, there is a 64k limit on the number of symbols and for gpu builds 59k are used today ... not much room to grow.<br>\nIn case you need a workaround to just debug a specific issue: I used to have the issue with the pdb size during the port of the cuda to windows and could get around it by generating symbols selective in cmake for the modules I needed. Or alternatively you can delete the pdb's you don't care about and re-link with  /p:BuildProjectReferences=false ... total hack of course.</p>", "body_text": "I think splitting into multiple dlls is the only way to handle the large pdbs.\nOne issue that might come with this is the symbol exports from the dll done by https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/cmake/tools/create_def_file.py ... it is good enough to handle kernels in _lstm_ops.dll  but I'm not sure if it exports enough symbols to keep all kernels happy. In case additional symbols need to be exported, there is a 64k limit on the number of symbols and for gpu builds 59k are used today ... not much room to grow.\nIn case you need a workaround to just debug a specific issue: I used to have the issue with the pdb size during the port of the cuda to windows and could get around it by generating symbols selective in cmake for the modules I needed. Or alternatively you can delete the pdb's you don't care about and re-link with  /p:BuildProjectReferences=false ... total hack of course.", "body": "I think splitting into multiple dlls is the only way to handle the large pdbs. \r\nOne issue that might come with this is the symbol exports from the dll done by https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/cmake/tools/create_def_file.py ... it is good enough to handle kernels in _lstm_ops.dll  but I'm not sure if it exports enough symbols to keep all kernels happy. In case additional symbols need to be exported, there is a 64k limit on the number of symbols and for gpu builds 59k are used today ... not much room to grow.\r\nIn case you need a workaround to just debug a specific issue: I used to have the issue with the pdb size during the port of the cuda to windows and could get around it by generating symbols selective in cmake for the modules I needed. Or alternatively you can delete the pdb's you don't care about and re-link with  /p:BuildProjectReferences=false ... total hack of course."}