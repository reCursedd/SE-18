{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17186", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17186/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17186/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17186/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17186", "id": 299220298, "node_id": "MDU6SXNzdWUyOTkyMjAyOTg=", "number": 17186, "title": "Conv2D is not called if it has only control dependency", "user": {"login": "sj6077", "id": 2465713, "node_id": "MDQ6VXNlcjI0NjU3MTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2465713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sj6077", "html_url": "https://github.com/sj6077", "followers_url": "https://api.github.com/users/sj6077/followers", "following_url": "https://api.github.com/users/sj6077/following{/other_user}", "gists_url": "https://api.github.com/users/sj6077/gists{/gist_id}", "starred_url": "https://api.github.com/users/sj6077/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sj6077/subscriptions", "organizations_url": "https://api.github.com/users/sj6077/orgs", "repos_url": "https://api.github.com/users/sj6077/repos", "events_url": "https://api.github.com/users/sj6077/events{/privacy}", "received_events_url": "https://api.github.com/users/sj6077/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-02-22T04:43:40Z", "updated_at": "2018-04-20T15:04:01Z", "closed_at": "2018-04-20T15:04:01Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nsource</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\nr1.5</li>\n<li><strong>Python version</strong>:<br>\n2</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\n0.5.4</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\n9.0/7.0</li>\n<li><strong>GPU model and memory</strong>:<br>\nTitan XP, 12GB</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>If conv2d operation has control dependency in the graph, the operation is not executed at all.<br>\nI've tested with tf.tfprof and timeline. If I connect the conv2d with its value, it is finally executed.<br>\nIs it intended behavior in TensorFlow?</p>\n<h3>Source code / logs</h3>\n<pre><code>```\nopts = tf.contrib.tfprof.model_analyzer.PRINT_ALL_TIMING_MEMORY\nopts['min_accelerator_micros'] = 1\nrun_metadata = tf.RunMetadata()\n\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth = True\n#config.allow_soft_placement = True\nconfig.inter_op_parallelism_threads=0\nconfig.graph_options.optimizer_options.opt_level = tf.OptimizerOptions.L0\nbatch = 32\nsize = 224\nin_channels = 3\nout_channels = 1\nfilter_size = 7\ninp = tf.ones(shape=[batch, size, size, in_channels], dtype=tf.float32)\nv = tf.Variable(inp)\nfilters = tf.ones(shape=[filter_size, filter_size, in_channels, out_channels], dtype=tf.float32)\nconv2d = tf.nn.conv2d(v, filters, [1,1,1,1], padding='VALID')\nwith tf.control_dependencies([conv2d]): \n  train = tf.no_op() \nwith tf.Session(config=config) as sess:\n  sess.run(tf.global_variables_initializer())\n  sess.run(train, options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE), run_metadata=run_metadata)\n  # conv2d is not executed\n\n  sess.run(conv_ops, options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE), run_metadata=run_metadata)\n  # conv2d is executed\nroot_node = tf.contrib.tfprof.model_analyzer.print_model_analysis(\n              tf.get_default_graph(),\n              run_meta=run_metadata,\n              tfprof_options=opts)\n</code></pre>\n<pre><code></code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux Ubuntu 16.04\nTensorFlow installed from (source or binary):\nsource\nTensorFlow version (use command below):\nr1.5\nPython version:\n2\nBazel version (if compiling from source):\n0.5.4\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\n9.0/7.0\nGPU model and memory:\nTitan XP, 12GB\n\nDescribe the problem\nIf conv2d operation has control dependency in the graph, the operation is not executed at all.\nI've tested with tf.tfprof and timeline. If I connect the conv2d with its value, it is finally executed.\nIs it intended behavior in TensorFlow?\nSource code / logs\n```\nopts = tf.contrib.tfprof.model_analyzer.PRINT_ALL_TIMING_MEMORY\nopts['min_accelerator_micros'] = 1\nrun_metadata = tf.RunMetadata()\n\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth = True\n#config.allow_soft_placement = True\nconfig.inter_op_parallelism_threads=0\nconfig.graph_options.optimizer_options.opt_level = tf.OptimizerOptions.L0\nbatch = 32\nsize = 224\nin_channels = 3\nout_channels = 1\nfilter_size = 7\ninp = tf.ones(shape=[batch, size, size, in_channels], dtype=tf.float32)\nv = tf.Variable(inp)\nfilters = tf.ones(shape=[filter_size, filter_size, in_channels, out_channels], dtype=tf.float32)\nconv2d = tf.nn.conv2d(v, filters, [1,1,1,1], padding='VALID')\nwith tf.control_dependencies([conv2d]): \n  train = tf.no_op() \nwith tf.Session(config=config) as sess:\n  sess.run(tf.global_variables_initializer())\n  sess.run(train, options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE), run_metadata=run_metadata)\n  # conv2d is not executed\n\n  sess.run(conv_ops, options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE), run_metadata=run_metadata)\n  # conv2d is executed\nroot_node = tf.contrib.tfprof.model_analyzer.print_model_analysis(\n              tf.get_default_graph(),\n              run_meta=run_metadata,\n              tfprof_options=opts)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nLinux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**:\r\nsource\r\n- **TensorFlow version (use command below)**:\r\nr1.5\r\n- **Python version**: \r\n2\r\n- **Bazel version (if compiling from source)**:\r\n0.5.4\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n9.0/7.0\r\n- **GPU model and memory**:\r\nTitan XP, 12GB\r\n\r\n### Describe the problem\r\nIf conv2d operation has control dependency in the graph, the operation is not executed at all. \r\nI've tested with tf.tfprof and timeline. If I connect the conv2d with its value, it is finally executed.\r\nIs it intended behavior in TensorFlow?\r\n\r\n### Source code / logs\r\n    ```\r\n    opts = tf.contrib.tfprof.model_analyzer.PRINT_ALL_TIMING_MEMORY\r\n    opts['min_accelerator_micros'] = 1\r\n    run_metadata = tf.RunMetadata()\r\n\r\n    config = tf.ConfigProto()\r\n    config.gpu_options.allow_growth = True\r\n    #config.allow_soft_placement = True\r\n    config.inter_op_parallelism_threads=0\r\n    config.graph_options.optimizer_options.opt_level = tf.OptimizerOptions.L0\r\n    batch = 32\r\n    size = 224\r\n    in_channels = 3\r\n    out_channels = 1\r\n    filter_size = 7\r\n    inp = tf.ones(shape=[batch, size, size, in_channels], dtype=tf.float32)\r\n    v = tf.Variable(inp)\r\n    filters = tf.ones(shape=[filter_size, filter_size, in_channels, out_channels], dtype=tf.float32)\r\n    conv2d = tf.nn.conv2d(v, filters, [1,1,1,1], padding='VALID')\r\n    with tf.control_dependencies([conv2d]): \r\n      train = tf.no_op() \r\n    with tf.Session(config=config) as sess:\r\n      sess.run(tf.global_variables_initializer())\r\n      sess.run(train, options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE), run_metadata=run_metadata)\r\n      # conv2d is not executed\r\n\r\n      sess.run(conv_ops, options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE), run_metadata=run_metadata)\r\n      # conv2d is executed\r\n    root_node = tf.contrib.tfprof.model_analyzer.print_model_analysis(\r\n                  tf.get_default_graph(),\r\n                  run_meta=run_metadata,\r\n                  tfprof_options=opts)\r\n```"}