{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16990", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16990/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16990/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16990/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16990", "id": 296872598, "node_id": "MDU6SXNzdWUyOTY4NzI1OTg=", "number": 16990, "title": "[Feature request] Adding scaffold parameter estimator heads", "user": {"login": "eisenjulian", "id": 7776575, "node_id": "MDQ6VXNlcjc3NzY1NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7776575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eisenjulian", "html_url": "https://github.com/eisenjulian", "followers_url": "https://api.github.com/users/eisenjulian/followers", "following_url": "https://api.github.com/users/eisenjulian/following{/other_user}", "gists_url": "https://api.github.com/users/eisenjulian/gists{/gist_id}", "starred_url": "https://api.github.com/users/eisenjulian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eisenjulian/subscriptions", "organizations_url": "https://api.github.com/users/eisenjulian/orgs", "repos_url": "https://api.github.com/users/eisenjulian/repos", "events_url": "https://api.github.com/users/eisenjulian/events{/privacy}", "received_events_url": "https://api.github.com/users/eisenjulian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ispirmustafa", "id": 19293677, "node_id": "MDQ6VXNlcjE5MjkzNjc3", "avatar_url": "https://avatars1.githubusercontent.com/u/19293677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ispirmustafa", "html_url": "https://github.com/ispirmustafa", "followers_url": "https://api.github.com/users/ispirmustafa/followers", "following_url": "https://api.github.com/users/ispirmustafa/following{/other_user}", "gists_url": "https://api.github.com/users/ispirmustafa/gists{/gist_id}", "starred_url": "https://api.github.com/users/ispirmustafa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ispirmustafa/subscriptions", "organizations_url": "https://api.github.com/users/ispirmustafa/orgs", "repos_url": "https://api.github.com/users/ispirmustafa/repos", "events_url": "https://api.github.com/users/ispirmustafa/events{/privacy}", "received_events_url": "https://api.github.com/users/ispirmustafa/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ispirmustafa", "id": 19293677, "node_id": "MDQ6VXNlcjE5MjkzNjc3", "avatar_url": "https://avatars1.githubusercontent.com/u/19293677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ispirmustafa", "html_url": "https://github.com/ispirmustafa", "followers_url": "https://api.github.com/users/ispirmustafa/followers", "following_url": "https://api.github.com/users/ispirmustafa/following{/other_user}", "gists_url": "https://api.github.com/users/ispirmustafa/gists{/gist_id}", "starred_url": "https://api.github.com/users/ispirmustafa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ispirmustafa/subscriptions", "organizations_url": "https://api.github.com/users/ispirmustafa/orgs", "repos_url": "https://api.github.com/users/ispirmustafa/repos", "events_url": "https://api.github.com/users/ispirmustafa/events{/privacy}", "received_events_url": "https://api.github.com/users/ispirmustafa/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2018-02-13T20:21:47Z", "updated_at": "2018-07-13T13:01:20Z", "closed_at": "2018-03-04T13:39:12Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4</li>\n<li><strong>Python version</strong>: 3.6.3</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When creating custom estimators, using the Heads defined <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/estimator/canned/head.py\">here</a> reduces an important part of the boilerplate as well as guarantee uniform evaluation against canned estimator instances. However, one key parameter is missing in in <code>create_estimator_spec</code> function, which is the <code>scaffold</code> that one can pass into an <code>EstimatorSpec</code>. One example where that is needed is if you want to initialize a large tensor with a numpy array, for example for loading an embedding file from word2vec. This <a href=\"https://stackoverflow.com/questions/44680769/loading-pre-trained-word2vec-to-initialise-embedding-lookup-in-the-estimator-mod\" rel=\"nofollow\">StackOverflow question</a> also describes the issue.</p>\n<h3>Source code / logs</h3>\n<p>This is my normal code, currently impossible to use with heads. Actually, it might not be impossible, but this seems to me like the cleaner solution. I have the <a href=\"https://github.com/eisenjulian/tensorflow/commit/9e6c004f07d2ba5c17d58007092f513b54077198\">tiny PR</a> ready if you think this is a valuable change. Thanks a lot for your time!</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">model_fn</span>(<span class=\"pl-smi\">mode</span>, <span class=\"pl-smi\">features</span>, <span class=\"pl-smi\">labels</span>, <span class=\"pl-smi\">hparams</span>):\n  embed_ph <span class=\"pl-k\">=</span> tf.placeholder(\n      <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[hparams.vocab_size, hparams.embedding_size], \n      <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n  embeddings <span class=\"pl-k\">=</span> tf.Variable(embed_ph)\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Define your model</span>\n  <span class=\"pl-k\">return</span> tf.estimator.EstimatorSpec(\n      <span class=\"pl-c1\">...</span>, <span class=\"pl-c\"><span class=\"pl-c\">#</span> normal EstimatorSpec args</span>\n      <span class=\"pl-v\">scaffold</span><span class=\"pl-k\">=</span>tf.train.Scaffold(<span class=\"pl-v\">init_feed_dict</span><span class=\"pl-k\">=</span>{embed_ph: my_embedding_numpy_array})\n  )</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): 1.4\nPython version: 3.6.3\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nWhen creating custom estimators, using the Heads defined here reduces an important part of the boilerplate as well as guarantee uniform evaluation against canned estimator instances. However, one key parameter is missing in in create_estimator_spec function, which is the scaffold that one can pass into an EstimatorSpec. One example where that is needed is if you want to initialize a large tensor with a numpy array, for example for loading an embedding file from word2vec. This StackOverflow question also describes the issue.\nSource code / logs\nThis is my normal code, currently impossible to use with heads. Actually, it might not be impossible, but this seems to me like the cleaner solution. I have the tiny PR ready if you think this is a valuable change. Thanks a lot for your time!\ndef model_fn(mode, features, labels, hparams):\n  embed_ph = tf.placeholder(\n      shape=[hparams.vocab_size, hparams.embedding_size], \n      dtype=tf.float32)\n  embeddings = tf.Variable(embed_ph)\n  # Define your model\n  return tf.estimator.EstimatorSpec(\n      ..., # normal EstimatorSpec args\n      scaffold=tf.train.Scaffold(init_feed_dict={embed_ph: my_embedding_numpy_array})\n  )", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: 1.4\r\n- **Python version**: 3.6.3\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nWhen creating custom estimators, using the Heads defined [here](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/estimator/canned/head.py) reduces an important part of the boilerplate as well as guarantee uniform evaluation against canned estimator instances. However, one key parameter is missing in in `create_estimator_spec` function, which is the `scaffold` that one can pass into an `EstimatorSpec`. One example where that is needed is if you want to initialize a large tensor with a numpy array, for example for loading an embedding file from word2vec. This [StackOverflow question](https://stackoverflow.com/questions/44680769/loading-pre-trained-word2vec-to-initialise-embedding-lookup-in-the-estimator-mod) also describes the issue.\r\n\r\n### Source code / logs\r\nThis is my normal code, currently impossible to use with heads. Actually, it might not be impossible, but this seems to me like the cleaner solution. I have the [tiny PR](https://github.com/eisenjulian/tensorflow/commit/9e6c004f07d2ba5c17d58007092f513b54077198) ready if you think this is a valuable change. Thanks a lot for your time!\r\n\r\n```python\r\ndef model_fn(mode, features, labels, hparams):\r\n  embed_ph = tf.placeholder(\r\n      shape=[hparams.vocab_size, hparams.embedding_size], \r\n      dtype=tf.float32)\r\n  embeddings = tf.Variable(embed_ph)\r\n  # Define your model\r\n  return tf.estimator.EstimatorSpec(\r\n      ..., # normal EstimatorSpec args\r\n      scaffold=tf.train.Scaffold(init_feed_dict={embed_ph: my_embedding_numpy_array})\r\n  )\r\n```\r\n"}