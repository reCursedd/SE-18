{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/338434923", "html_url": "https://github.com/tensorflow/tensorflow/issues/672#issuecomment-338434923", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/672", "id": 338434923, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODQzNDkyMw==", "user": {"login": "aribenjamin", "id": 9724569, "node_id": "MDQ6VXNlcjk3MjQ1Njk=", "avatar_url": "https://avatars0.githubusercontent.com/u/9724569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aribenjamin", "html_url": "https://github.com/aribenjamin", "followers_url": "https://api.github.com/users/aribenjamin/followers", "following_url": "https://api.github.com/users/aribenjamin/following{/other_user}", "gists_url": "https://api.github.com/users/aribenjamin/gists{/gist_id}", "starred_url": "https://api.github.com/users/aribenjamin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aribenjamin/subscriptions", "organizations_url": "https://api.github.com/users/aribenjamin/orgs", "repos_url": "https://api.github.com/users/aribenjamin/repos", "events_url": "https://api.github.com/users/aribenjamin/events{/privacy}", "received_events_url": "https://api.github.com/users/aribenjamin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-21T21:51:10Z", "updated_at": "2017-10-21T21:51:10Z", "author_association": "NONE", "body_html": "<p>The documentation for <code>partial_run</code> is a little ambiguous. If you're wondering, like I and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1832155\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/markusdr\">@markusdr</a> were, \"does <code>partial_run</code> keep computed values stored?\", the example in the docs doesn't clear much up. The example there (modified to work standalone) is:</p>\n<pre><code>import tensorflow as tf\na = tf.placeholder(tf.float32, shape=[])\nb = tf.placeholder(tf.float32, shape=[])\nc = tf.placeholder(tf.float32, shape=[])\nr1 = tf.add(a, b)\nr2 = tf.multiply(r1, c)\n\nwith tf.Session() as sess:\n    h = sess.partial_run_setup([r1, r2], [a, b, c])\n    res = sess.partial_run(h, r1, feed_dict={a: 1, b: 2})\n    res = sess.partial_run(h, r2, feed_dict={c: res})\n    \n    print(res)\n</code></pre>\n<p>This returns <code>9.0</code>. But do we always need to need the result of a previous <code>partial_run</code> as input? Changing the input of the last line shows that this is not the case. Internal values are stored.</p>\n<pre><code>import tensorflow as tf\na = tf.placeholder(tf.float32, shape=[])\nb = tf.placeholder(tf.float32, shape=[])\nc = tf.placeholder(tf.float32, shape=[])\nr1 = tf.add(a, b)\nr2 = tf.multiply(r1, c)\n\nwith tf.Session() as sess:\n    h = sess.partial_run_setup([r1, r2], [a, b, c])\n    res = sess.partial_run(h, r1, feed_dict={a: 1, b: 2})\n    res = sess.partial_run(h, r2, feed_dict={c: 2})\n    \n    print(res)\n</code></pre>\n<p>Returns <code>6.0</code>.</p>", "body_text": "The documentation for partial_run is a little ambiguous. If you're wondering, like I and @markusdr were, \"does partial_run keep computed values stored?\", the example in the docs doesn't clear much up. The example there (modified to work standalone) is:\nimport tensorflow as tf\na = tf.placeholder(tf.float32, shape=[])\nb = tf.placeholder(tf.float32, shape=[])\nc = tf.placeholder(tf.float32, shape=[])\nr1 = tf.add(a, b)\nr2 = tf.multiply(r1, c)\n\nwith tf.Session() as sess:\n    h = sess.partial_run_setup([r1, r2], [a, b, c])\n    res = sess.partial_run(h, r1, feed_dict={a: 1, b: 2})\n    res = sess.partial_run(h, r2, feed_dict={c: res})\n    \n    print(res)\n\nThis returns 9.0. But do we always need to need the result of a previous partial_run as input? Changing the input of the last line shows that this is not the case. Internal values are stored.\nimport tensorflow as tf\na = tf.placeholder(tf.float32, shape=[])\nb = tf.placeholder(tf.float32, shape=[])\nc = tf.placeholder(tf.float32, shape=[])\nr1 = tf.add(a, b)\nr2 = tf.multiply(r1, c)\n\nwith tf.Session() as sess:\n    h = sess.partial_run_setup([r1, r2], [a, b, c])\n    res = sess.partial_run(h, r1, feed_dict={a: 1, b: 2})\n    res = sess.partial_run(h, r2, feed_dict={c: 2})\n    \n    print(res)\n\nReturns 6.0.", "body": "The documentation for `partial_run` is a little ambiguous. If you're wondering, like I and @markusdr were, \"does `partial_run` keep computed values stored?\", the example in the docs doesn't clear much up. The example there (modified to work standalone) is:\r\n```\r\nimport tensorflow as tf\r\na = tf.placeholder(tf.float32, shape=[])\r\nb = tf.placeholder(tf.float32, shape=[])\r\nc = tf.placeholder(tf.float32, shape=[])\r\nr1 = tf.add(a, b)\r\nr2 = tf.multiply(r1, c)\r\n\r\nwith tf.Session() as sess:\r\n    h = sess.partial_run_setup([r1, r2], [a, b, c])\r\n    res = sess.partial_run(h, r1, feed_dict={a: 1, b: 2})\r\n    res = sess.partial_run(h, r2, feed_dict={c: res})\r\n    \r\n    print(res)\r\n```\r\nThis returns `9.0`. But do we always need to need the result of a previous `partial_run` as input? Changing the input of the last line shows that this is not the case. Internal values are stored.\r\n```\r\nimport tensorflow as tf\r\na = tf.placeholder(tf.float32, shape=[])\r\nb = tf.placeholder(tf.float32, shape=[])\r\nc = tf.placeholder(tf.float32, shape=[])\r\nr1 = tf.add(a, b)\r\nr2 = tf.multiply(r1, c)\r\n\r\nwith tf.Session() as sess:\r\n    h = sess.partial_run_setup([r1, r2], [a, b, c])\r\n    res = sess.partial_run(h, r1, feed_dict={a: 1, b: 2})\r\n    res = sess.partial_run(h, r2, feed_dict={c: 2})\r\n    \r\n    print(res)\r\n```\r\nReturns `6.0`."}