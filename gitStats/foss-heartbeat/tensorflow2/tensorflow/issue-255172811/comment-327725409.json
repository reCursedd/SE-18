{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/327725409", "html_url": "https://github.com/tensorflow/tensorflow/issues/12811#issuecomment-327725409", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12811", "id": 327725409, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzcyNTQwOQ==", "user": {"login": "Kitter", "id": 1551630, "node_id": "MDQ6VXNlcjE1NTE2MzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1551630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kitter", "html_url": "https://github.com/Kitter", "followers_url": "https://api.github.com/users/Kitter/followers", "following_url": "https://api.github.com/users/Kitter/following{/other_user}", "gists_url": "https://api.github.com/users/Kitter/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kitter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kitter/subscriptions", "organizations_url": "https://api.github.com/users/Kitter/orgs", "repos_url": "https://api.github.com/users/Kitter/repos", "events_url": "https://api.github.com/users/Kitter/events{/privacy}", "received_events_url": "https://api.github.com/users/Kitter/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-07T08:15:21Z", "updated_at": "2017-09-07T08:16:14Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> :</p>\n<p>python code:</p>\n<pre><code>encoder_size = 64\ndecoder_size = 17\nmodel_file='/test/model.pb'\nwith tf.gfile.FastGFile(model_file, 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    _ = tf.import_graph_def(graph_def, name='')\n\nwith tf.Session() as sess:\n    input_feed={}\n    file_name = \"/test/test.png\"\n    img = Image.open(file_name)\n    im = img.convert('L')\n    im = np.asarray(im, dtype=np.uint8)\n    imdata = np.array([[im]], dtype=int)\n    input_feed['img_data:0']= imdata\n    input_feed['zero_paddings:0']= np.zeros(shape=[1, 1, 512], dtype=float)\n    for l in range(int(encoder_size) - 1):\n        input_feed['encoder_mask'+str(l)+':0'] = np.array([[1]], dtype=float)\n    input_feed['encoder_mask'+str(int(encoder_size) - 1)+':0'] = np.array([[0]], dtype=float)\n    input_feed['decoder0:0'] = np.array([1], dtype=int)\n    outputs= []\n    decoders = []\n    for l in range(int(decoder_size)):\n        if l == 0:\n            decoder = sess.graph.get_tensor_by_name('model_with_buckets/embedding_attention_decoder_3/attention_decoder/AttnOutputProjection/AttnOutputProjection/BiasAdd:0')\n        else:\n            decoder = sess.graph.get_tensor_by_name('model_with_buckets/embedding_attention_decoder_3/attention_decoder/AttnOutputProjection_' + str(l) + '/AttnOutputProjection/BiasAdd:0')\n        decoders.append(decoder)\n    decoders=sess.run(decoders,input_feed)\n    decoders=np.argmax(decoders, 2)\n    for output in decoders:\n        outputs.append(output[0])\n    print(outputs)\n</code></pre>\n<p>Java code:</p>\n<pre><code>   private static final int DECODER_SIZE = 17;\n   private static float[][][][] convertImageToArray(BufferedImage bf) {\n        int width = bf.getWidth();\n        int height = bf.getHeight();\n        int[] data = new int[width * height];\n        bf.getRGB(0, 0, width, height, data, 0, width);\n        float[][][][] rgbArray = new float[1][1][height][width];\n        for (int i = 0; i &lt; height; i++) {\n            for (int j = 0; j &lt; width; j++) {\n                rgbArray[0][0][i][j] = data[i * width + j];\n            }\n        }\n        return rgbArray;\n   }\n\n   String imageFilePath = \"/test/test.png\";\n   String modelDir=\"/test/model.pb\";\n   byte[] graphDef = Files.readAllBytes(Paths.get(modelDir));\n   File imageFile = new File(imageFilePath);\n   BufferedImage im = ImageIO.read(imageFile);\n   float[][][][] imgData = convertImageToArray(im);\n   Graph g = new Graph();\n   g.importGraphDef(graphDef);\n   Session s = new Session(g);\n   String imageData = \"img_data\";\n   String decodeName = \"decoder0\";\n   int encoderSize = 64;\n   String zeroPaddingName = \"zero_paddings\";\n   Runner runner = s.runner().feed(imageData, Tensor.create(imgData));\n   runner = runner.feed(decodeName, Tensor.create(new int[]{1}));\n   runner = runner.feed(zeroPaddingName,  Tensor.create(new float[1][1][512]));\n   for(int index = 0; index &lt; encoderSize; index++){\n        float[][] encoderMask = new float[1][1];\n        encoderMask[0][0] = 1;\n        if(index == encoderSize - 1) encoderMask[0][0] = 0;\n        String encoderMaskName = \"encoder_mask\" + index;\n        runner = runner.feed(encoderMaskName, Tensor.create(encoderMask));\n    }\n   String outputName;\n   int[] encodes = new int[DECODER_SIZE];\n   String prefix = \"model_with_buckets/embedding_attention_decoder_3/attention_decoder/AttnOutputProjection\";\n   for(int index = 0; index &lt; DECODER_SIZE; index++){\n       if(index == 0){\n           outputName = prefix + \"/AttnOutputProjection/BiasAdd\";\n       } else {\n           outputName = prefix + \"_\" + index + \"/AttnOutputProjection/BiasAdd\";\n       }\n       runner.fetch(outputName);\n    }\n   List&lt;Tensor&gt; tensorList = runner.runAndFetchMetadata().outputs;\n   s.close();\n   for(Tensor result : tensorList){\n      final long[] rshape = result.shape();\n      if (result.numDimensions() != 2 || rshape[0] != 1) {\n          throw new RuntimeException(String.format(\n              \"Expected model to produce a [1 N] shaped tensor where N is the number of labels, instead it produced one with shape %s\",\n              Arrays.toString(rshape)));\n      }\n      int charNum = (int) rshape[1];\n      float[] outputs = result.copyTo(new float[1][charNum])[0];\n      int bestLabelIdx = maxIndex(outputs);\n      int index = tensorList.indexOf(result);\n      encodes[index] = bestLabelIdx;\n   }\n</code></pre>\n<p>saved model: <a href=\"http://61.136.1.102:9001/model.pb\" rel=\"nofollow\">model.pb</a></p>", "body_text": "@asimshankar :\npython code:\nencoder_size = 64\ndecoder_size = 17\nmodel_file='/test/model.pb'\nwith tf.gfile.FastGFile(model_file, 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    _ = tf.import_graph_def(graph_def, name='')\n\nwith tf.Session() as sess:\n    input_feed={}\n    file_name = \"/test/test.png\"\n    img = Image.open(file_name)\n    im = img.convert('L')\n    im = np.asarray(im, dtype=np.uint8)\n    imdata = np.array([[im]], dtype=int)\n    input_feed['img_data:0']= imdata\n    input_feed['zero_paddings:0']= np.zeros(shape=[1, 1, 512], dtype=float)\n    for l in range(int(encoder_size) - 1):\n        input_feed['encoder_mask'+str(l)+':0'] = np.array([[1]], dtype=float)\n    input_feed['encoder_mask'+str(int(encoder_size) - 1)+':0'] = np.array([[0]], dtype=float)\n    input_feed['decoder0:0'] = np.array([1], dtype=int)\n    outputs= []\n    decoders = []\n    for l in range(int(decoder_size)):\n        if l == 0:\n            decoder = sess.graph.get_tensor_by_name('model_with_buckets/embedding_attention_decoder_3/attention_decoder/AttnOutputProjection/AttnOutputProjection/BiasAdd:0')\n        else:\n            decoder = sess.graph.get_tensor_by_name('model_with_buckets/embedding_attention_decoder_3/attention_decoder/AttnOutputProjection_' + str(l) + '/AttnOutputProjection/BiasAdd:0')\n        decoders.append(decoder)\n    decoders=sess.run(decoders,input_feed)\n    decoders=np.argmax(decoders, 2)\n    for output in decoders:\n        outputs.append(output[0])\n    print(outputs)\n\nJava code:\n   private static final int DECODER_SIZE = 17;\n   private static float[][][][] convertImageToArray(BufferedImage bf) {\n        int width = bf.getWidth();\n        int height = bf.getHeight();\n        int[] data = new int[width * height];\n        bf.getRGB(0, 0, width, height, data, 0, width);\n        float[][][][] rgbArray = new float[1][1][height][width];\n        for (int i = 0; i < height; i++) {\n            for (int j = 0; j < width; j++) {\n                rgbArray[0][0][i][j] = data[i * width + j];\n            }\n        }\n        return rgbArray;\n   }\n\n   String imageFilePath = \"/test/test.png\";\n   String modelDir=\"/test/model.pb\";\n   byte[] graphDef = Files.readAllBytes(Paths.get(modelDir));\n   File imageFile = new File(imageFilePath);\n   BufferedImage im = ImageIO.read(imageFile);\n   float[][][][] imgData = convertImageToArray(im);\n   Graph g = new Graph();\n   g.importGraphDef(graphDef);\n   Session s = new Session(g);\n   String imageData = \"img_data\";\n   String decodeName = \"decoder0\";\n   int encoderSize = 64;\n   String zeroPaddingName = \"zero_paddings\";\n   Runner runner = s.runner().feed(imageData, Tensor.create(imgData));\n   runner = runner.feed(decodeName, Tensor.create(new int[]{1}));\n   runner = runner.feed(zeroPaddingName,  Tensor.create(new float[1][1][512]));\n   for(int index = 0; index < encoderSize; index++){\n        float[][] encoderMask = new float[1][1];\n        encoderMask[0][0] = 1;\n        if(index == encoderSize - 1) encoderMask[0][0] = 0;\n        String encoderMaskName = \"encoder_mask\" + index;\n        runner = runner.feed(encoderMaskName, Tensor.create(encoderMask));\n    }\n   String outputName;\n   int[] encodes = new int[DECODER_SIZE];\n   String prefix = \"model_with_buckets/embedding_attention_decoder_3/attention_decoder/AttnOutputProjection\";\n   for(int index = 0; index < DECODER_SIZE; index++){\n       if(index == 0){\n           outputName = prefix + \"/AttnOutputProjection/BiasAdd\";\n       } else {\n           outputName = prefix + \"_\" + index + \"/AttnOutputProjection/BiasAdd\";\n       }\n       runner.fetch(outputName);\n    }\n   List<Tensor> tensorList = runner.runAndFetchMetadata().outputs;\n   s.close();\n   for(Tensor result : tensorList){\n      final long[] rshape = result.shape();\n      if (result.numDimensions() != 2 || rshape[0] != 1) {\n          throw new RuntimeException(String.format(\n              \"Expected model to produce a [1 N] shaped tensor where N is the number of labels, instead it produced one with shape %s\",\n              Arrays.toString(rshape)));\n      }\n      int charNum = (int) rshape[1];\n      float[] outputs = result.copyTo(new float[1][charNum])[0];\n      int bestLabelIdx = maxIndex(outputs);\n      int index = tensorList.indexOf(result);\n      encodes[index] = bestLabelIdx;\n   }\n\nsaved model: model.pb", "body": "@asimshankar :\r\n\r\npython code:\r\n\r\n    encoder_size = 64\r\n    decoder_size = 17\r\n    model_file='/test/model.pb'\r\n    with tf.gfile.FastGFile(model_file, 'rb') as f:\r\n        graph_def = tf.GraphDef()\r\n        graph_def.ParseFromString(f.read())\r\n        _ = tf.import_graph_def(graph_def, name='')\r\n   \r\n    with tf.Session() as sess:\r\n        input_feed={}\r\n        file_name = \"/test/test.png\"\r\n        img = Image.open(file_name)\r\n        im = img.convert('L')\r\n        im = np.asarray(im, dtype=np.uint8)\r\n        imdata = np.array([[im]], dtype=int)\r\n        input_feed['img_data:0']= imdata\r\n        input_feed['zero_paddings:0']= np.zeros(shape=[1, 1, 512], dtype=float)\r\n        for l in range(int(encoder_size) - 1):\r\n            input_feed['encoder_mask'+str(l)+':0'] = np.array([[1]], dtype=float)\r\n        input_feed['encoder_mask'+str(int(encoder_size) - 1)+':0'] = np.array([[0]], dtype=float)\r\n        input_feed['decoder0:0'] = np.array([1], dtype=int)\r\n        outputs= []\r\n        decoders = []\r\n        for l in range(int(decoder_size)):\r\n            if l == 0:\r\n                decoder = sess.graph.get_tensor_by_name('model_with_buckets/embedding_attention_decoder_3/attention_decoder/AttnOutputProjection/AttnOutputProjection/BiasAdd:0')\r\n            else:\r\n                decoder = sess.graph.get_tensor_by_name('model_with_buckets/embedding_attention_decoder_3/attention_decoder/AttnOutputProjection_' + str(l) + '/AttnOutputProjection/BiasAdd:0')\r\n            decoders.append(decoder)\r\n        decoders=sess.run(decoders,input_feed)\r\n        decoders=np.argmax(decoders, 2)\r\n        for output in decoders:\r\n            outputs.append(output[0])\r\n        print(outputs)\r\n\r\nJava code:\r\n\r\n       private static final int DECODER_SIZE = 17;\r\n       private static float[][][][] convertImageToArray(BufferedImage bf) {\r\n            int width = bf.getWidth();\r\n            int height = bf.getHeight();\r\n            int[] data = new int[width * height];\r\n            bf.getRGB(0, 0, width, height, data, 0, width);\r\n            float[][][][] rgbArray = new float[1][1][height][width];\r\n            for (int i = 0; i < height; i++) {\r\n                for (int j = 0; j < width; j++) {\r\n                    rgbArray[0][0][i][j] = data[i * width + j];\r\n                }\r\n            }\r\n            return rgbArray;\r\n       }\r\n\r\n       String imageFilePath = \"/test/test.png\";\r\n       String modelDir=\"/test/model.pb\";\r\n       byte[] graphDef = Files.readAllBytes(Paths.get(modelDir));\r\n       File imageFile = new File(imageFilePath);\r\n       BufferedImage im = ImageIO.read(imageFile);\r\n       float[][][][] imgData = convertImageToArray(im);\r\n       Graph g = new Graph();\r\n       g.importGraphDef(graphDef);\r\n       Session s = new Session(g);\r\n       String imageData = \"img_data\";\r\n       String decodeName = \"decoder0\";\r\n       int encoderSize = 64;\r\n       String zeroPaddingName = \"zero_paddings\";\r\n       Runner runner = s.runner().feed(imageData, Tensor.create(imgData));\r\n       runner = runner.feed(decodeName, Tensor.create(new int[]{1}));\r\n       runner = runner.feed(zeroPaddingName,  Tensor.create(new float[1][1][512]));\r\n       for(int index = 0; index < encoderSize; index++){\r\n            float[][] encoderMask = new float[1][1];\r\n            encoderMask[0][0] = 1;\r\n            if(index == encoderSize - 1) encoderMask[0][0] = 0;\r\n            String encoderMaskName = \"encoder_mask\" + index;\r\n            runner = runner.feed(encoderMaskName, Tensor.create(encoderMask));\r\n        }\r\n       String outputName;\r\n       int[] encodes = new int[DECODER_SIZE];\r\n       String prefix = \"model_with_buckets/embedding_attention_decoder_3/attention_decoder/AttnOutputProjection\";\r\n       for(int index = 0; index < DECODER_SIZE; index++){\r\n           if(index == 0){\r\n               outputName = prefix + \"/AttnOutputProjection/BiasAdd\";\r\n           } else {\r\n               outputName = prefix + \"_\" + index + \"/AttnOutputProjection/BiasAdd\";\r\n           }\r\n           runner.fetch(outputName);\r\n        }\r\n       List<Tensor> tensorList = runner.runAndFetchMetadata().outputs;\r\n       s.close();\r\n       for(Tensor result : tensorList){\r\n          final long[] rshape = result.shape();\r\n          if (result.numDimensions() != 2 || rshape[0] != 1) {\r\n              throw new RuntimeException(String.format(\r\n                  \"Expected model to produce a [1 N] shaped tensor where N is the number of labels, instead it produced one with shape %s\",\r\n                  Arrays.toString(rshape)));\r\n          }\r\n          int charNum = (int) rshape[1];\r\n          float[] outputs = result.copyTo(new float[1][charNum])[0];\r\n          int bestLabelIdx = maxIndex(outputs);\r\n          int index = tensorList.indexOf(result);\r\n          encodes[index] = bestLabelIdx;\r\n       }\r\n\r\n\r\nsaved model: [model.pb](http://61.136.1.102:9001/model.pb)\r\n"}