{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/385916616", "html_url": "https://github.com/tensorflow/tensorflow/issues/12811#issuecomment-385916616", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12811", "id": 385916616, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTkxNjYxNg==", "user": {"login": "Kitter", "id": 1551630, "node_id": "MDQ6VXNlcjE1NTE2MzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1551630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kitter", "html_url": "https://github.com/Kitter", "followers_url": "https://api.github.com/users/Kitter/followers", "following_url": "https://api.github.com/users/Kitter/following{/other_user}", "gists_url": "https://api.github.com/users/Kitter/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kitter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kitter/subscriptions", "organizations_url": "https://api.github.com/users/Kitter/orgs", "repos_url": "https://api.github.com/users/Kitter/repos", "events_url": "https://api.github.com/users/Kitter/events{/privacy}", "received_events_url": "https://api.github.com/users/Kitter/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-02T09:20:59Z", "updated_at": "2018-05-02T09:20:59Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=29559443\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/q657198385\">@q657198385</a><br>\nI use java.nio.file.Files to read image file data, then use tensorflow API to did the grayscale conversion. I get the correct result.</p>\n<p>source code:</p>\n<pre><code>private static Tensor constructAndExecuteGraphToNormalizeImage(byte[] imageBytes) {\n    Graph g = new Graph();\n    GraphBuilder b = new GraphBuilder(g);\n    final Output input = b.constant(\"img_data\", imageBytes);\n    final float mean = 117f;\n    final float scale = 1f;\n    Output output = b.binaryOp(\"Reshape\",b.div(b.sub(b.cast(b.decodeJpeg(input, 1), DataType.FLOAT), \n    b.constant(\"mean\", mean)), b.constant(\"scale\", scale)), b.constant(\"make_batch\", new int[]{1,1,32,256}));\n    Session s = new Session(g);\n    Tensor tensor = s.runner().fetch(output.op().name()).run().get(0);\n    s.close();\n    return tensor;\n}\nbyte[] imageBytes = Files.readAllBytes(Paths.get(\"src/test/resources/test.png\"));\nTensor image = constructAndExecuteGraphToNormalizeImage(imageBytes);\n</code></pre>", "body_text": "@q657198385\nI use java.nio.file.Files to read image file data, then use tensorflow API to did the grayscale conversion. I get the correct result.\nsource code:\nprivate static Tensor constructAndExecuteGraphToNormalizeImage(byte[] imageBytes) {\n    Graph g = new Graph();\n    GraphBuilder b = new GraphBuilder(g);\n    final Output input = b.constant(\"img_data\", imageBytes);\n    final float mean = 117f;\n    final float scale = 1f;\n    Output output = b.binaryOp(\"Reshape\",b.div(b.sub(b.cast(b.decodeJpeg(input, 1), DataType.FLOAT), \n    b.constant(\"mean\", mean)), b.constant(\"scale\", scale)), b.constant(\"make_batch\", new int[]{1,1,32,256}));\n    Session s = new Session(g);\n    Tensor tensor = s.runner().fetch(output.op().name()).run().get(0);\n    s.close();\n    return tensor;\n}\nbyte[] imageBytes = Files.readAllBytes(Paths.get(\"src/test/resources/test.png\"));\nTensor image = constructAndExecuteGraphToNormalizeImage(imageBytes);", "body": "@q657198385 \r\nI use java.nio.file.Files to read image file data, then use tensorflow API to did the grayscale conversion. I get the correct result.\r\n\r\nsource code:\r\n\r\n    private static Tensor constructAndExecuteGraphToNormalizeImage(byte[] imageBytes) {\r\n        Graph g = new Graph();\r\n        GraphBuilder b = new GraphBuilder(g);\r\n        final Output input = b.constant(\"img_data\", imageBytes);\r\n        final float mean = 117f;\r\n        final float scale = 1f;\r\n        Output output = b.binaryOp(\"Reshape\",b.div(b.sub(b.cast(b.decodeJpeg(input, 1), DataType.FLOAT), \r\n        b.constant(\"mean\", mean)), b.constant(\"scale\", scale)), b.constant(\"make_batch\", new int[]{1,1,32,256}));\r\n        Session s = new Session(g);\r\n        Tensor tensor = s.runner().fetch(output.op().name()).run().get(0);\r\n        s.close();\r\n        return tensor;\r\n    }\r\n    byte[] imageBytes = Files.readAllBytes(Paths.get(\"src/test/resources/test.png\"));\r\n    Tensor image = constructAndExecuteGraphToNormalizeImage(imageBytes);"}