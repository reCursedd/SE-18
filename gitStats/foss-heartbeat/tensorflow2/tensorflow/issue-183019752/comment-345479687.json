{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/345479687", "html_url": "https://github.com/tensorflow/tensorflow/issues/4965#issuecomment-345479687", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4965", "id": 345479687, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTQ3OTY4Nw==", "user": {"login": "dustinvtran", "id": 2569867, "node_id": "MDQ6VXNlcjI1Njk4Njc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2569867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dustinvtran", "html_url": "https://github.com/dustinvtran", "followers_url": "https://api.github.com/users/dustinvtran/followers", "following_url": "https://api.github.com/users/dustinvtran/following{/other_user}", "gists_url": "https://api.github.com/users/dustinvtran/gists{/gist_id}", "starred_url": "https://api.github.com/users/dustinvtran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dustinvtran/subscriptions", "organizations_url": "https://api.github.com/users/dustinvtran/orgs", "repos_url": "https://api.github.com/users/dustinvtran/repos", "events_url": "https://api.github.com/users/dustinvtran/events{/privacy}", "received_events_url": "https://api.github.com/users/dustinvtran/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-18T23:38:30Z", "updated_at": "2017-11-19T04:43:42Z", "author_association": "MEMBER", "body_html": "<p>Thanks for the details <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=24483645\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/awav\">@awav</a>. We're still thinking about the right design for MCMC in terms of TensorFlow idioms, flexibility, and composability. So far we've settled with two (possibly competing) approaches. One is which you aptly pointed out a few pain points, and another is a <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/bayesflow/python/ops/sgld_optimizer.py\">tf.train.Optimizer-style design</a> which <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3066843\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/JasperSnoek\">@JasperSnoek</a> is helping lead.</p>\n<p>Perhaps we can discuss with you and other GPflows dev in a video call on how the APIs might suit your applications?</p>", "body_text": "Thanks for the details @awav. We're still thinking about the right design for MCMC in terms of TensorFlow idioms, flexibility, and composability. So far we've settled with two (possibly competing) approaches. One is which you aptly pointed out a few pain points, and another is a tf.train.Optimizer-style design which @JasperSnoek is helping lead.\nPerhaps we can discuss with you and other GPflows dev in a video call on how the APIs might suit your applications?", "body": "Thanks for the details @awav. We're still thinking about the right design for MCMC in terms of TensorFlow idioms, flexibility, and composability. So far we've settled with two (possibly competing) approaches. One is which you aptly pointed out a few pain points, and another is a [tf.train.Optimizer-style design](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/bayesflow/python/ops/sgld_optimizer.py) which @JasperSnoek is helping lead.\r\n\r\nPerhaps we can discuss with you and other GPflows dev in a video call on how the APIs might suit your applications?"}