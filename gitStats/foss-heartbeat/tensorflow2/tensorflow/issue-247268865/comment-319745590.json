{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/319745590", "html_url": "https://github.com/tensorflow/tensorflow/pull/11960#issuecomment-319745590", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11960", "id": 319745590, "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTc0NTU5MA==", "user": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-02T17:42:18Z", "updated_at": "2017-08-02T17:42:18Z", "author_association": "MEMBER", "body_html": "<p>Ah I see. Unfortunately we really do not want every language binding to reimplement this code (it's extremely easy to introduce bugs, and forces us to allow dangerous graph modifications like creating cycles, as this patch does). It looks like you're familiar with C/++; would you be willing to help me with the C API while loop implementation? I'm working on getting the major gradient pieces in, but there are still many TODOs to resolve in the forward-pass loop implementation. I can help you get started with some of these if you like, and once I get the basic gradient code checked in we can possibly divide up that work as well. What do you think?</p>\n<p>Re: loading MetaGraphDefs, I too have noticed that loading while loops doesn't really work if you wanna continue graph construction. I haven't thought about this much either, since my immediate goal is to reimplement the current Python behavior. I agree it would be good to properly handle this though.</p>", "body_text": "Ah I see. Unfortunately we really do not want every language binding to reimplement this code (it's extremely easy to introduce bugs, and forces us to allow dangerous graph modifications like creating cycles, as this patch does). It looks like you're familiar with C/++; would you be willing to help me with the C API while loop implementation? I'm working on getting the major gradient pieces in, but there are still many TODOs to resolve in the forward-pass loop implementation. I can help you get started with some of these if you like, and once I get the basic gradient code checked in we can possibly divide up that work as well. What do you think?\nRe: loading MetaGraphDefs, I too have noticed that loading while loops doesn't really work if you wanna continue graph construction. I haven't thought about this much either, since my immediate goal is to reimplement the current Python behavior. I agree it would be good to properly handle this though.", "body": "Ah I see. Unfortunately we really do not want every language binding to reimplement this code (it's extremely easy to introduce bugs, and forces us to allow dangerous graph modifications like creating cycles, as this patch does). It looks like you're familiar with C/++; would you be willing to help me with the C API while loop implementation? I'm working on getting the major gradient pieces in, but there are still many TODOs to resolve in the forward-pass loop implementation. I can help you get started with some of these if you like, and once I get the basic gradient code checked in we can possibly divide up that work as well. What do you think?\r\n\r\nRe: loading MetaGraphDefs, I too have noticed that loading while loops doesn't really work if you wanna continue graph construction. I haven't thought about this much either, since my immediate goal is to reimplement the current Python behavior. I agree it would be good to properly handle this though."}