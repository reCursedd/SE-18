{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21069", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21069/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21069/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21069/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21069", "id": 343786417, "node_id": "MDU6SXNzdWUzNDM3ODY0MTc=", "number": 21069, "title": "writing tfrecord with multithreading is not fast as expected", "user": {"login": "hbi-tianyi", "id": 33295291, "node_id": "MDQ6VXNlcjMzMjk1Mjkx", "avatar_url": "https://avatars2.githubusercontent.com/u/33295291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hbi-tianyi", "html_url": "https://github.com/hbi-tianyi", "followers_url": "https://api.github.com/users/hbi-tianyi/followers", "following_url": "https://api.github.com/users/hbi-tianyi/following{/other_user}", "gists_url": "https://api.github.com/users/hbi-tianyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/hbi-tianyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hbi-tianyi/subscriptions", "organizations_url": "https://api.github.com/users/hbi-tianyi/orgs", "repos_url": "https://api.github.com/users/hbi-tianyi/repos", "events_url": "https://api.github.com/users/hbi-tianyi/events{/privacy}", "received_events_url": "https://api.github.com/users/hbi-tianyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "karmel", "id": 667809, "node_id": "MDQ6VXNlcjY2NzgwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/667809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karmel", "html_url": "https://github.com/karmel", "followers_url": "https://api.github.com/users/karmel/followers", "following_url": "https://api.github.com/users/karmel/following{/other_user}", "gists_url": "https://api.github.com/users/karmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/karmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karmel/subscriptions", "organizations_url": "https://api.github.com/users/karmel/orgs", "repos_url": "https://api.github.com/users/karmel/repos", "events_url": "https://api.github.com/users/karmel/events{/privacy}", "received_events_url": "https://api.github.com/users/karmel/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "karmel", "id": 667809, "node_id": "MDQ6VXNlcjY2NzgwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/667809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karmel", "html_url": "https://github.com/karmel", "followers_url": "https://api.github.com/users/karmel/followers", "following_url": "https://api.github.com/users/karmel/following{/other_user}", "gists_url": "https://api.github.com/users/karmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/karmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karmel/subscriptions", "organizations_url": "https://api.github.com/users/karmel/orgs", "repos_url": "https://api.github.com/users/karmel/repos", "events_url": "https://api.github.com/users/karmel/events{/privacy}", "received_events_url": "https://api.github.com/users/karmel/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-07-23T20:37:21Z", "updated_at": "2018-07-24T16:50:23Z", "closed_at": "2018-07-24T16:50:23Z", "author_association": "NONE", "body_html": "<p>System information<br>\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No<br>\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):<br>\nUbuntu 16.04 and MacOS High Sierra 10.13.4<br>\nTensorFlow installed from (source or binary): docker and virtualenv<br>\nTensorFlow version (use command below): v1.8.0-0-g93bc2e2072<br>\nPython version: 2.7.12<br>\nBazel version (if compiling from source):<br>\nGCC/Compiler version (if compiling from source):<br>\nCUDA/cuDNN version:<br>\nGPU model and memory:<br>\nExact command to reproduce: N/A</p>\n<h3>Describe the problem</h3>\n<p>Tried to write tfrecord w/ and w/o multithreading, and found the speed difference is not much (w/ 4 threads: 434 seconds; w/o multithread 590 seconds).  Not sure if I used it correctly. Is there any better way to write tfrecord faster?</p>\n<h3>Source code / logs</h3>\n<pre><code>import tensorflow as tf \nimport numpy as np \nimport threading \nimport time \n\n\ndef generate_data(shape=[15,28,60,1]):\n\treturn np.random.uniform(size=shape)\n\n\ndef _bytes_feature(value):\n\treturn tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\n\ndef _int64_feature(value):\n\treturn tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\n\ndef write_instances_to_tfrecord(tfrecord_file, filenames):\n\ttfrecord_writer = tf.python_io.TFRecordWriter(tfrecord_file)\n\tfor i, filename in enumerate(filenames):\n\t\tcurr_MFCC = generate_data()\n\t\tcurr_MFCC_raw = curr_MFCC.tostring()\n\t\tcurr_filename_raw = str(filename)+'-'+str(i)\n\t\texample = tf.train.Example(features=tf.train.Features(\n\t\t\tfeature={\n\t\t\t'MFCC': _bytes_feature(curr_MFCC_raw),\n\t\t\t'filename': _bytes_feature(curr_filename_raw)\n\t\t\t})\n\t\t)\n\t\ttfrecord_writer.write(example.SerializeToString())\n\ttfrecord_writer.close()\n\n\ndef test():\n\tthreading_start = time.time()\n\tcoord = tf.train.Coordinator()\n\tthreads = []\n\tfor thread_index in xrange(4):\n\t\targs = (str(thread_index), range(200000))\n\t\tt = threading.Thread(target=write_instances_to_tfrecord, args=args)\n\t\tt.start()\n\t\tthreads.append(t)\n\tcoord.join(threads)\n\tprint 'w/ threading takes', time.time()-threading_start\n\n\tstart = time.time()\n\twrite_instances_to_tfrecord('5', range(800000))\n\tprint 'w/o threading takes', time.time()-start\n\nif __name__ == '__main__':\n\ttest()\n</code></pre>", "body_text": "System information\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nUbuntu 16.04 and MacOS High Sierra 10.13.4\nTensorFlow installed from (source or binary): docker and virtualenv\nTensorFlow version (use command below): v1.8.0-0-g93bc2e2072\nPython version: 2.7.12\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce: N/A\nDescribe the problem\nTried to write tfrecord w/ and w/o multithreading, and found the speed difference is not much (w/ 4 threads: 434 seconds; w/o multithread 590 seconds).  Not sure if I used it correctly. Is there any better way to write tfrecord faster?\nSource code / logs\nimport tensorflow as tf \nimport numpy as np \nimport threading \nimport time \n\n\ndef generate_data(shape=[15,28,60,1]):\n\treturn np.random.uniform(size=shape)\n\n\ndef _bytes_feature(value):\n\treturn tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\n\ndef _int64_feature(value):\n\treturn tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\n\ndef write_instances_to_tfrecord(tfrecord_file, filenames):\n\ttfrecord_writer = tf.python_io.TFRecordWriter(tfrecord_file)\n\tfor i, filename in enumerate(filenames):\n\t\tcurr_MFCC = generate_data()\n\t\tcurr_MFCC_raw = curr_MFCC.tostring()\n\t\tcurr_filename_raw = str(filename)+'-'+str(i)\n\t\texample = tf.train.Example(features=tf.train.Features(\n\t\t\tfeature={\n\t\t\t'MFCC': _bytes_feature(curr_MFCC_raw),\n\t\t\t'filename': _bytes_feature(curr_filename_raw)\n\t\t\t})\n\t\t)\n\t\ttfrecord_writer.write(example.SerializeToString())\n\ttfrecord_writer.close()\n\n\ndef test():\n\tthreading_start = time.time()\n\tcoord = tf.train.Coordinator()\n\tthreads = []\n\tfor thread_index in xrange(4):\n\t\targs = (str(thread_index), range(200000))\n\t\tt = threading.Thread(target=write_instances_to_tfrecord, args=args)\n\t\tt.start()\n\t\tthreads.append(t)\n\tcoord.join(threads)\n\tprint 'w/ threading takes', time.time()-threading_start\n\n\tstart = time.time()\n\twrite_instances_to_tfrecord('5', range(800000))\n\tprint 'w/o threading takes', time.time()-start\n\nif __name__ == '__main__':\n\ttest()", "body": "System information\r\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\r\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\r\nUbuntu 16.04 and MacOS High Sierra 10.13.4\r\nTensorFlow installed from (source or binary): docker and virtualenv\r\nTensorFlow version (use command below): v1.8.0-0-g93bc2e2072\r\nPython version: 2.7.12\r\nBazel version (if compiling from source):\r\nGCC/Compiler version (if compiling from source):\r\nCUDA/cuDNN version:\r\nGPU model and memory:\r\nExact command to reproduce: N/A\r\n\r\n### Describe the problem\r\nTried to write tfrecord w/ and w/o multithreading, and found the speed difference is not much (w/ 4 threads: 434 seconds; w/o multithread 590 seconds).  Not sure if I used it correctly. Is there any better way to write tfrecord faster?\r\n\r\n### Source code / logs\r\n\r\n```\r\nimport tensorflow as tf \r\nimport numpy as np \r\nimport threading \r\nimport time \r\n\r\n\r\ndef generate_data(shape=[15,28,60,1]):\r\n\treturn np.random.uniform(size=shape)\r\n\r\n\r\ndef _bytes_feature(value):\r\n\treturn tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\r\n\r\n\r\ndef _int64_feature(value):\r\n\treturn tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\r\n\r\n\r\ndef write_instances_to_tfrecord(tfrecord_file, filenames):\r\n\ttfrecord_writer = tf.python_io.TFRecordWriter(tfrecord_file)\r\n\tfor i, filename in enumerate(filenames):\r\n\t\tcurr_MFCC = generate_data()\r\n\t\tcurr_MFCC_raw = curr_MFCC.tostring()\r\n\t\tcurr_filename_raw = str(filename)+'-'+str(i)\r\n\t\texample = tf.train.Example(features=tf.train.Features(\r\n\t\t\tfeature={\r\n\t\t\t'MFCC': _bytes_feature(curr_MFCC_raw),\r\n\t\t\t'filename': _bytes_feature(curr_filename_raw)\r\n\t\t\t})\r\n\t\t)\r\n\t\ttfrecord_writer.write(example.SerializeToString())\r\n\ttfrecord_writer.close()\r\n\r\n\r\ndef test():\r\n\tthreading_start = time.time()\r\n\tcoord = tf.train.Coordinator()\r\n\tthreads = []\r\n\tfor thread_index in xrange(4):\r\n\t\targs = (str(thread_index), range(200000))\r\n\t\tt = threading.Thread(target=write_instances_to_tfrecord, args=args)\r\n\t\tt.start()\r\n\t\tthreads.append(t)\r\n\tcoord.join(threads)\r\n\tprint 'w/ threading takes', time.time()-threading_start\r\n\r\n\tstart = time.time()\r\n\twrite_instances_to_tfrecord('5', range(800000))\r\n\tprint 'w/o threading takes', time.time()-start\r\n\r\nif __name__ == '__main__':\r\n\ttest()\r\n```\r\n"}