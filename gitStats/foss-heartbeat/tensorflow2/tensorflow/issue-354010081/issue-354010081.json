{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21872", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21872/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21872/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21872/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21872", "id": 354010081, "node_id": "MDU6SXNzdWUzNTQwMTAwODE=", "number": 21872, "title": "tf.enable_eager_execution() bug?", "user": {"login": "Q82822", "id": 36806042, "node_id": "MDQ6VXNlcjM2ODA2MDQy", "avatar_url": "https://avatars2.githubusercontent.com/u/36806042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Q82822", "html_url": "https://github.com/Q82822", "followers_url": "https://api.github.com/users/Q82822/followers", "following_url": "https://api.github.com/users/Q82822/following{/other_user}", "gists_url": "https://api.github.com/users/Q82822/gists{/gist_id}", "starred_url": "https://api.github.com/users/Q82822/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Q82822/subscriptions", "organizations_url": "https://api.github.com/users/Q82822/orgs", "repos_url": "https://api.github.com/users/Q82822/repos", "events_url": "https://api.github.com/users/Q82822/events{/privacy}", "received_events_url": "https://api.github.com/users/Q82822/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 736653459, "node_id": "MDU6TGFiZWw3MzY2NTM0NTk=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:eager", "name": "comp:eager", "color": "0052cc", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-08-25T12:52:02Z", "updated_at": "2018-09-17T22:27:58Z", "closed_at": "2018-09-17T22:27:58Z", "author_association": "NONE", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:window10</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.10</li>\n<li><strong>Python version</strong>:3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>i used the<code> tf.enable_eager_execution()</code> and create InceptionResNetV2 mode will be error and only InceptionResNetV2 have. I need use  <code>tf.enable_eager_execution()</code> can't without.</p>\n<p>how to fix it?</p>\n<h3>Source code / logs</h3>\n<p><code>import tensorflow as tf</code><br>\n<code>tf.enable_eager_execution()</code><br>\n<code>image_model =tf.keras.applications.InceptionResNetV2(include_top=False, weights='imagenet') </code><br>\n--error---<br>\nTypeError                                 Traceback (most recent call last)<br>\n in ()<br>\n----&gt; 1 image_model =tf.keras.applications.InceptionResNetV2(include_top=False, weights='imagenet')</p>\n<p>D:\\anaconda\\lib\\site-packages\\tensorflow\\python\\keras\\applications\\inception_resnet_v2.py in InceptionResNetV2(include_top, weights, input_tensor, input_shape, pooling, classes)<br>\n304   for block_idx in range(1, 11):<br>\n305     x = inception_resnet_block(<br>\n--&gt; 306         x, scale=0.17, block_type='block35', block_idx=block_idx)<br>\n307<br>\n308   # Mixed 6a (Reduction-A block): 17 x 17 x 1088</p>\n<p>D:\\anaconda\\lib\\site-packages\\tensorflow\\python\\keras\\applications\\inception_resnet_v2.py in inception_resnet_block(x, scale, block_type, block_idx, activation)<br>\n187       output_shape=K.int_shape(x)[1:],<br>\n188       arguments={'scale': scale},<br>\n--&gt; 189       name=block_name)([x, up])<br>\n190   if activation is not None:<br>\n191     x = Activation(activation, name=block_name + '_ac')(x)</p>\n<p>D:\\anaconda\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\base_layer.py in <strong>call</strong>(self, inputs, *args, **kwargs)<br>\n745           input_shapes = nest.map_structure(lambda x: x.shape, inputs)<br>\n746<br>\n--&gt; 747         output_shapes = self.compute_output_shape(input_shapes)<br>\n748         output_shapes = nest.flatten(output_shapes)<br>\n749         outputs = [</p>\n<p>D:\\anaconda\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\core.py in compute_output_shape(self, input_shape)<br>\n678<br>\n679   def compute_output_shape(self, input_shape):<br>\n--&gt; 680     input_shape = tuple(tensor_shape.TensorShape(input_shape).as_list())<br>\n681<br>\n682     if self._output_shape is None:</p>\n<p>D:\\anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py in <strong>init</strong>(self, dims)<br>\n539       else:<br>\n540         # Got a list of dimensions<br>\n--&gt; 541         self._dims = [as_dimension(d) for d in dims_iter]<br>\n542     self._ndims = None<br>\n543</p>\n<p>D:\\anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py in (.0)<br>\n539       else:<br>\n540         # Got a list of dimensions<br>\n--&gt; 541         self._dims = [as_dimension(d) for d in dims_iter]<br>\n542     self._ndims = None<br>\n543</p>\n<p>D:\\anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py in as_dimension(value)<br>\n480     return value<br>\n481   else:<br>\n--&gt; 482     return Dimension(value)<br>\n483<br>\n484</p>\n<p>D:\\anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py in <strong>init</strong>(self, value)<br>\n35       raise TypeError(\"Cannot convert %s to Dimension\" % value)<br>\n36     else:<br>\n---&gt; 37       self._value = int(value)<br>\n38       if (not isinstance(value, compat.bytes_or_text_types) and<br>\n39           self._value != value):</p>\n<p>TypeError: int() argument must be a string, a bytes-like object or a number, not 'TensorShape'</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):window10\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): 1.10\nPython version:3.6\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\ni used the tf.enable_eager_execution() and create InceptionResNetV2 mode will be error and only InceptionResNetV2 have. I need use  tf.enable_eager_execution() can't without.\nhow to fix it?\nSource code / logs\nimport tensorflow as tf\ntf.enable_eager_execution()\nimage_model =tf.keras.applications.InceptionResNetV2(include_top=False, weights='imagenet') \n--error---\nTypeError                                 Traceback (most recent call last)\n in ()\n----> 1 image_model =tf.keras.applications.InceptionResNetV2(include_top=False, weights='imagenet')\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\keras\\applications\\inception_resnet_v2.py in InceptionResNetV2(include_top, weights, input_tensor, input_shape, pooling, classes)\n304   for block_idx in range(1, 11):\n305     x = inception_resnet_block(\n--> 306         x, scale=0.17, block_type='block35', block_idx=block_idx)\n307\n308   # Mixed 6a (Reduction-A block): 17 x 17 x 1088\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\keras\\applications\\inception_resnet_v2.py in inception_resnet_block(x, scale, block_type, block_idx, activation)\n187       output_shape=K.int_shape(x)[1:],\n188       arguments={'scale': scale},\n--> 189       name=block_name)([x, up])\n190   if activation is not None:\n191     x = Activation(activation, name=block_name + '_ac')(x)\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\base_layer.py in call(self, inputs, *args, **kwargs)\n745           input_shapes = nest.map_structure(lambda x: x.shape, inputs)\n746\n--> 747         output_shapes = self.compute_output_shape(input_shapes)\n748         output_shapes = nest.flatten(output_shapes)\n749         outputs = [\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\core.py in compute_output_shape(self, input_shape)\n678\n679   def compute_output_shape(self, input_shape):\n--> 680     input_shape = tuple(tensor_shape.TensorShape(input_shape).as_list())\n681\n682     if self._output_shape is None:\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py in init(self, dims)\n539       else:\n540         # Got a list of dimensions\n--> 541         self._dims = [as_dimension(d) for d in dims_iter]\n542     self._ndims = None\n543\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py in (.0)\n539       else:\n540         # Got a list of dimensions\n--> 541         self._dims = [as_dimension(d) for d in dims_iter]\n542     self._ndims = None\n543\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py in as_dimension(value)\n480     return value\n481   else:\n--> 482     return Dimension(value)\n483\n484\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py in init(self, value)\n35       raise TypeError(\"Cannot convert %s to Dimension\" % value)\n36     else:\n---> 37       self._value = int(value)\n38       if (not isinstance(value, compat.bytes_or_text_types) and\n39           self._value != value):\nTypeError: int() argument must be a string, a bytes-like object or a number, not 'TensorShape'", "body": "\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:window10\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: 1.10\r\n- **Python version**:3.6\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\ni used the` tf.enable_eager_execution()` and create InceptionResNetV2 mode will be error and only InceptionResNetV2 have. I need use  `tf.enable_eager_execution()` can't without. \r\n\r\nhow to fix it?\r\n\r\n### Source code / logs\r\n`import tensorflow as tf`\r\n`tf.enable_eager_execution()`\r\n`image_model =tf.keras.applications.InceptionResNetV2(include_top=False, weights='imagenet')\r\n`\r\n--error---\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-2-b40bb13774b9> in <module>()\r\n----> 1 image_model =tf.keras.applications.InceptionResNetV2(include_top=False, weights='imagenet')\r\n\r\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\keras\\applications\\inception_resnet_v2.py in InceptionResNetV2(include_top, weights, input_tensor, input_shape, pooling, classes)\r\n    304   for block_idx in range(1, 11):\r\n    305     x = inception_resnet_block(\r\n--> 306         x, scale=0.17, block_type='block35', block_idx=block_idx)\r\n    307 \r\n    308   # Mixed 6a (Reduction-A block): 17 x 17 x 1088\r\n\r\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\keras\\applications\\inception_resnet_v2.py in inception_resnet_block(x, scale, block_type, block_idx, activation)\r\n    187       output_shape=K.int_shape(x)[1:],\r\n    188       arguments={'scale': scale},\r\n--> 189       name=block_name)([x, up])\r\n    190   if activation is not None:\r\n    191     x = Activation(activation, name=block_name + '_ac')(x)\r\n\r\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\base_layer.py in __call__(self, inputs, *args, **kwargs)\r\n    745           input_shapes = nest.map_structure(lambda x: x.shape, inputs)\r\n    746 \r\n--> 747         output_shapes = self.compute_output_shape(input_shapes)\r\n    748         output_shapes = nest.flatten(output_shapes)\r\n    749         outputs = [\r\n\r\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\core.py in compute_output_shape(self, input_shape)\r\n    678 \r\n    679   def compute_output_shape(self, input_shape):\r\n--> 680     input_shape = tuple(tensor_shape.TensorShape(input_shape).as_list())\r\n    681 \r\n    682     if self._output_shape is None:\r\n\r\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py in __init__(self, dims)\r\n    539       else:\r\n    540         # Got a list of dimensions\r\n--> 541         self._dims = [as_dimension(d) for d in dims_iter]\r\n    542     self._ndims = None\r\n    543 \r\n\r\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py in <listcomp>(.0)\r\n    539       else:\r\n    540         # Got a list of dimensions\r\n--> 541         self._dims = [as_dimension(d) for d in dims_iter]\r\n    542     self._ndims = None\r\n    543 \r\n\r\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py in as_dimension(value)\r\n    480     return value\r\n    481   else:\r\n--> 482     return Dimension(value)\r\n    483 \r\n    484 \r\n\r\nD:\\anaconda\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py in __init__(self, value)\r\n     35       raise TypeError(\"Cannot convert %s to Dimension\" % value)\r\n     36     else:\r\n---> 37       self._value = int(value)\r\n     38       if (not isinstance(value, compat.bytes_or_text_types) and\r\n     39           self._value != value):\r\n\r\nTypeError: int() argument must be a string, a bytes-like object or a number, not 'TensorShape'\r\n"}