{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/224646975", "html_url": "https://github.com/tensorflow/tensorflow/issues/1950#issuecomment-224646975", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1950", "id": 224646975, "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDY0Njk3NQ==", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-08T16:27:45Z", "updated_at": "2016-06-08T16:27:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=451747\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Remper\">@Remper</a>: What would the implementation look like?  I'm having trouble seeing how to make this not terrifyingly slow.  I suppose you could do binary search to find the matching sparse indices?</p>", "body_text": "@Remper: What would the implementation look like?  I'm having trouble seeing how to make this not terrifyingly slow.  I suppose you could do binary search to find the matching sparse indices?", "body": "@Remper: What would the implementation look like?  I'm having trouble seeing how to make this not terrifyingly slow.  I suppose you could do binary search to find the matching sparse indices? \n"}