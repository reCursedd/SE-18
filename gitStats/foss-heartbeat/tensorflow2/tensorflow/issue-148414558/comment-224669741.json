{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/224669741", "html_url": "https://github.com/tensorflow/tensorflow/issues/1950#issuecomment-224669741", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1950", "id": 224669741, "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDY2OTc0MQ==", "user": {"login": "Remper", "id": 451747, "node_id": "MDQ6VXNlcjQ1MTc0Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/451747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Remper", "html_url": "https://github.com/Remper", "followers_url": "https://api.github.com/users/Remper/followers", "following_url": "https://api.github.com/users/Remper/following{/other_user}", "gists_url": "https://api.github.com/users/Remper/gists{/gist_id}", "starred_url": "https://api.github.com/users/Remper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Remper/subscriptions", "organizations_url": "https://api.github.com/users/Remper/orgs", "repos_url": "https://api.github.com/users/Remper/repos", "events_url": "https://api.github.com/users/Remper/events{/privacy}", "received_events_url": "https://api.github.com/users/Remper/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-08T17:38:49Z", "updated_at": "2016-06-08T17:38:49Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=70511\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/girving\">@girving</a> ideally I would expect an explicit (via the separate op) or an implicit (when the SparseTensor is populated with data at runtime) way to build an index across the first dimension (or any given dimension). Then <code>tf.gather</code> would be just a search on that index.</p>\n<p>Going back to my original use case: originally I've needed to represent a dictionary that contained arrays of elements of varying size. I ended up using <code>tf.py_func</code>, but the performance isn't good this way. But for sure traversing all possible values in the SparseTensor of my size and filtering matches without any index would be even slower.</p>", "body_text": "@girving ideally I would expect an explicit (via the separate op) or an implicit (when the SparseTensor is populated with data at runtime) way to build an index across the first dimension (or any given dimension). Then tf.gather would be just a search on that index.\nGoing back to my original use case: originally I've needed to represent a dictionary that contained arrays of elements of varying size. I ended up using tf.py_func, but the performance isn't good this way. But for sure traversing all possible values in the SparseTensor of my size and filtering matches without any index would be even slower.", "body": "@girving ideally I would expect an explicit (via the separate op) or an implicit (when the SparseTensor is populated with data at runtime) way to build an index across the first dimension (or any given dimension). Then `tf.gather` would be just a search on that index.\n\nGoing back to my original use case: originally I've needed to represent a dictionary that contained arrays of elements of varying size. I ended up using `tf.py_func`, but the performance isn't good this way. But for sure traversing all possible values in the SparseTensor of my size and filtering matches without any index would be even slower.\n"}