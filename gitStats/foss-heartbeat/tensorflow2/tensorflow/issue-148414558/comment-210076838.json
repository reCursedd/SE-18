{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/210076838", "html_url": "https://github.com/tensorflow/tensorflow/issues/1950#issuecomment-210076838", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1950", "id": 210076838, "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDA3NjgzOA==", "user": {"login": "Remper", "id": 451747, "node_id": "MDQ6VXNlcjQ1MTc0Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/451747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Remper", "html_url": "https://github.com/Remper", "followers_url": "https://api.github.com/users/Remper/followers", "following_url": "https://api.github.com/users/Remper/following{/other_user}", "gists_url": "https://api.github.com/users/Remper/gists{/gist_id}", "starred_url": "https://api.github.com/users/Remper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Remper/subscriptions", "organizations_url": "https://api.github.com/users/Remper/orgs", "repos_url": "https://api.github.com/users/Remper/repos", "events_url": "https://api.github.com/users/Remper/events{/privacy}", "received_events_url": "https://api.github.com/users/Remper/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-14T17:55:51Z", "updated_at": "2016-04-14T17:56:14Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=592670\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/concretevitamin\">@concretevitamin</a></p>\n<ol>\n<li>For my use case I only need to gather by the first dimension</li>\n<li>If <code>tf.boolean_mask</code> would support SparseTensor as well, then it is much better to have SparseTensor as a result, but a new dense Tensor is fine too, since I don't need to select many rows at once.</li>\n</ol>\n<p>Basically, the idea is that I have a huge square matrix (5m by 5m) of booleans and I want to select a batch of rows at every iteration, which then are used as masks. Each row contains at most 400 values and SparseTensor is exactly what I need. I can do it on python side and feed it along with other input, but this solution is much cleaner.</p>\n<p>Thank you for the quick response!</p>", "body_text": "@concretevitamin\n\nFor my use case I only need to gather by the first dimension\nIf tf.boolean_mask would support SparseTensor as well, then it is much better to have SparseTensor as a result, but a new dense Tensor is fine too, since I don't need to select many rows at once.\n\nBasically, the idea is that I have a huge square matrix (5m by 5m) of booleans and I want to select a batch of rows at every iteration, which then are used as masks. Each row contains at most 400 values and SparseTensor is exactly what I need. I can do it on python side and feed it along with other input, but this solution is much cleaner.\nThank you for the quick response!", "body": "@concretevitamin \n\n1) For my use case I only need to gather by the first dimension\n2) If `tf.boolean_mask` would support SparseTensor as well, then it is much better to have SparseTensor as a result, but a new dense Tensor is fine too, since I don't need to select many rows at once.\n\nBasically, the idea is that I have a huge square matrix (5m by 5m) of booleans and I want to select a batch of rows at every iteration, which then are used as masks. Each row contains at most 400 values and SparseTensor is exactly what I need. I can do it on python side and feed it along with other input, but this solution is much cleaner.\n\nThank you for the quick response!\n"}