{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/405241355", "html_url": "https://github.com/tensorflow/tensorflow/issues/19909#issuecomment-405241355", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19909", "id": 405241355, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTI0MTM1NQ==", "user": {"login": "ilidar", "id": 2097662, "node_id": "MDQ6VXNlcjIwOTc2NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2097662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilidar", "html_url": "https://github.com/ilidar", "followers_url": "https://api.github.com/users/ilidar/followers", "following_url": "https://api.github.com/users/ilidar/following{/other_user}", "gists_url": "https://api.github.com/users/ilidar/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilidar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilidar/subscriptions", "organizations_url": "https://api.github.com/users/ilidar/orgs", "repos_url": "https://api.github.com/users/ilidar/repos", "events_url": "https://api.github.com/users/ilidar/events{/privacy}", "received_events_url": "https://api.github.com/users/ilidar/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-16T13:07:51Z", "updated_at": "2018-07-16T15:15:04Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=25300810\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/spivakoa\">@spivakoa</a> Try this modified code from tensorflow examples:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">bool</span> <span class=\"pl-en\">Run</span>(<span class=\"pl-k\">const</span> std::vector&lt;cv::Mat&gt; &amp;images, std::vector&lt;Result&gt; &amp;results) <span class=\"pl-k\">const</span> {\n    std::string inputLayer = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>image_tensor:0<span class=\"pl-pds\">\"</span></span>;\n    std::vector&lt;std::string&gt; outputLayer = {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>detection_boxes:0<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>detection_scores:0<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>detection_classes:0<span class=\"pl-pds\">\"</span></span>,\n                                            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>num_detections:0<span class=\"pl-pds\">\"</span></span>};\n\n    <span class=\"pl-k\">int</span> height = images.<span class=\"pl-c1\">front</span>().<span class=\"pl-smi\">rows</span>;\n    <span class=\"pl-k\">int</span> width = images.<span class=\"pl-c1\">front</span>().<span class=\"pl-smi\">cols</span>;\n    <span class=\"pl-k\">int</span> depth = <span class=\"pl-c1\">3</span>;\n    <span class=\"pl-k\">int</span> batch = (<span class=\"pl-k\">int</span>) images.<span class=\"pl-c1\">size</span>();\n    tensorflow::Tensor <span class=\"pl-smi\">input</span>(tensorflow::DT_UINT8, <span class=\"pl-c1\">tensorflow::TensorShape</span>({batch, height, width, depth}));\n    {\n        std::<span class=\"pl-c1\">uint8_t</span> *dataPtr = input.<span class=\"pl-smi\">flat</span>&lt;std::<span class=\"pl-c1\">uint8_t</span>&gt;().<span class=\"pl-c1\">data</span>();\n        <span class=\"pl-k\">for</span> (<span class=\"pl-k\">const</span> <span class=\"pl-k\">auto</span> &amp;image : images) {\n            cv::Mat <span class=\"pl-smi\">tmp</span>(height, width, CV_8UC3, dataPtr);\n            image.<span class=\"pl-c1\">convertTo</span>(tmp, CV_8UC3);\n            dataPtr += height * width * depth;\n        }\n    }\n\n    std::vector&lt;tensorflow::Tensor&gt; outputs;\n    tensorflow::Status runStatus = session_-&gt;<span class=\"pl-c1\">Run</span>({{inputLayer, input}}, outputLayer, {}, &amp;outputs);\n    <span class=\"pl-k\">if</span> (!runStatus.<span class=\"pl-c1\">ok</span>())\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n\n    <span class=\"pl-k\">auto</span> boxes = outputs[<span class=\"pl-c1\">0</span>].<span class=\"pl-smi\">flat_outer_dims</span>&lt;<span class=\"pl-k\">float</span>, <span class=\"pl-c1\">3</span>&gt;();\n    <span class=\"pl-k\">auto</span> scores = outputs[<span class=\"pl-c1\">1</span>].<span class=\"pl-smi\">matrix</span>&lt;<span class=\"pl-k\">float</span>&gt;();\n    <span class=\"pl-k\">auto</span> classes = outputs[<span class=\"pl-c1\">2</span>].<span class=\"pl-smi\">matrix</span>&lt;<span class=\"pl-k\">float</span>&gt;();\n    <span class=\"pl-k\">auto</span> num_detections = outputs[<span class=\"pl-c1\">3</span>].<span class=\"pl-smi\">flat</span>&lt;<span class=\"pl-k\">float</span>&gt;();\n\n    <span class=\"pl-k\">for</span> (<span class=\"pl-c1\">size_t</span> b = <span class=\"pl-c1\">0</span>; b &lt; batch; ++b) {\n        <span class=\"pl-k\">for</span> (<span class=\"pl-c1\">size_t</span> i = <span class=\"pl-c1\">0</span>; i &lt; <span class=\"pl-c1\">num_detections</span>(b); ++i) {\n            <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">scores</span>(b, i) &gt; <span class=\"pl-c1\">kProbabilityThreshold</span>) {\n                Result result;\n                result.<span class=\"pl-smi\">Score</span> = <span class=\"pl-c1\">scores</span>(b, i);\n                result.<span class=\"pl-smi\">ClassId</span> = <span class=\"pl-c1\">classes</span>(b, i);\n                result.<span class=\"pl-smi\">Box</span> = <span class=\"pl-c1\">cv::Rect</span>(\n                        <span class=\"pl-c1\">cv::Point</span>(<span class=\"pl-c1\">boxes</span>(b, i, <span class=\"pl-c1\">1</span>) * width, <span class=\"pl-c1\">boxes</span>(b, i, <span class=\"pl-c1\">0</span>) * height),\n                        <span class=\"pl-c1\">cv::Point</span>(<span class=\"pl-c1\">boxes</span>(b, i, <span class=\"pl-c1\">3</span>) * width, <span class=\"pl-c1\">boxes</span>(b, i, <span class=\"pl-c1\">2</span>) * height));\n                results.<span class=\"pl-c1\">push_back</span>(result);\n            }\n        }\n    }\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;\n}</pre></div>", "body_text": "@spivakoa Try this modified code from tensorflow examples:\nbool Run(const std::vector<cv::Mat> &images, std::vector<Result> &results) const {\n    std::string inputLayer = \"image_tensor:0\";\n    std::vector<std::string> outputLayer = {\"detection_boxes:0\", \"detection_scores:0\", \"detection_classes:0\",\n                                            \"num_detections:0\"};\n\n    int height = images.front().rows;\n    int width = images.front().cols;\n    int depth = 3;\n    int batch = (int) images.size();\n    tensorflow::Tensor input(tensorflow::DT_UINT8, tensorflow::TensorShape({batch, height, width, depth}));\n    {\n        std::uint8_t *dataPtr = input.flat<std::uint8_t>().data();\n        for (const auto &image : images) {\n            cv::Mat tmp(height, width, CV_8UC3, dataPtr);\n            image.convertTo(tmp, CV_8UC3);\n            dataPtr += height * width * depth;\n        }\n    }\n\n    std::vector<tensorflow::Tensor> outputs;\n    tensorflow::Status runStatus = session_->Run({{inputLayer, input}}, outputLayer, {}, &outputs);\n    if (!runStatus.ok())\n        return false;\n\n    auto boxes = outputs[0].flat_outer_dims<float, 3>();\n    auto scores = outputs[1].matrix<float>();\n    auto classes = outputs[2].matrix<float>();\n    auto num_detections = outputs[3].flat<float>();\n\n    for (size_t b = 0; b < batch; ++b) {\n        for (size_t i = 0; i < num_detections(b); ++i) {\n            if (scores(b, i) > kProbabilityThreshold) {\n                Result result;\n                result.Score = scores(b, i);\n                result.ClassId = classes(b, i);\n                result.Box = cv::Rect(\n                        cv::Point(boxes(b, i, 1) * width, boxes(b, i, 0) * height),\n                        cv::Point(boxes(b, i, 3) * width, boxes(b, i, 2) * height));\n                results.push_back(result);\n            }\n        }\n    }\n    return true;\n}", "body": "@spivakoa Try this modified code from tensorflow examples:\r\n```cpp\r\nbool Run(const std::vector<cv::Mat> &images, std::vector<Result> &results) const {\r\n    std::string inputLayer = \"image_tensor:0\";\r\n    std::vector<std::string> outputLayer = {\"detection_boxes:0\", \"detection_scores:0\", \"detection_classes:0\",\r\n                                            \"num_detections:0\"};\r\n\r\n    int height = images.front().rows;\r\n    int width = images.front().cols;\r\n    int depth = 3;\r\n    int batch = (int) images.size();\r\n    tensorflow::Tensor input(tensorflow::DT_UINT8, tensorflow::TensorShape({batch, height, width, depth}));\r\n    {\r\n        std::uint8_t *dataPtr = input.flat<std::uint8_t>().data();\r\n        for (const auto &image : images) {\r\n            cv::Mat tmp(height, width, CV_8UC3, dataPtr);\r\n            image.convertTo(tmp, CV_8UC3);\r\n            dataPtr += height * width * depth;\r\n        }\r\n    }\r\n\r\n    std::vector<tensorflow::Tensor> outputs;\r\n    tensorflow::Status runStatus = session_->Run({{inputLayer, input}}, outputLayer, {}, &outputs);\r\n    if (!runStatus.ok())\r\n        return false;\r\n\r\n    auto boxes = outputs[0].flat_outer_dims<float, 3>();\r\n    auto scores = outputs[1].matrix<float>();\r\n    auto classes = outputs[2].matrix<float>();\r\n    auto num_detections = outputs[3].flat<float>();\r\n\r\n    for (size_t b = 0; b < batch; ++b) {\r\n        for (size_t i = 0; i < num_detections(b); ++i) {\r\n            if (scores(b, i) > kProbabilityThreshold) {\r\n                Result result;\r\n                result.Score = scores(b, i);\r\n                result.ClassId = classes(b, i);\r\n                result.Box = cv::Rect(\r\n                        cv::Point(boxes(b, i, 1) * width, boxes(b, i, 0) * height),\r\n                        cv::Point(boxes(b, i, 3) * width, boxes(b, i, 2) * height));\r\n                results.push_back(result);\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n```"}