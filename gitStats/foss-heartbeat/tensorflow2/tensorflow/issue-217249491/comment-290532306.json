{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/290532306", "html_url": "https://github.com/tensorflow/tensorflow/issues/8753#issuecomment-290532306", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8753", "id": 290532306, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDUzMjMwNg==", "user": {"login": "caisq", "id": 16824702, "node_id": "MDQ6VXNlcjE2ODI0NzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/16824702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caisq", "html_url": "https://github.com/caisq", "followers_url": "https://api.github.com/users/caisq/followers", "following_url": "https://api.github.com/users/caisq/following{/other_user}", "gists_url": "https://api.github.com/users/caisq/gists{/gist_id}", "starred_url": "https://api.github.com/users/caisq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caisq/subscriptions", "organizations_url": "https://api.github.com/users/caisq/orgs", "repos_url": "https://api.github.com/users/caisq/repos", "events_url": "https://api.github.com/users/caisq/events{/privacy}", "received_events_url": "https://api.github.com/users/caisq/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-30T20:17:59Z", "updated_at": "2017-03-30T20:19:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3648878\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hqqxyy\">@hqqxyy</a> , the reason for the weirdness you are seeing is because your session is used in a multi-threaded way, which is not amenable to command-line interface debugging. Particularly, you do,</p>\n<div class=\"highlight highlight-source-python\"><pre>tf.train.start_queue_runners(<span class=\"pl-v\">sess</span><span class=\"pl-k\">=</span>sess)</pre></div>\n<p>after you wrap <code>sess</code> with <code>LocalCLIDebugWrapperSession</code>.</p>\n<p>So the program will try to launch the debugger CLI from at least 3 threads (two for your queue runners and one for your main thread that runs the <code>train_step</code> op).</p>\n<p>To workaround this problem, you can call <code>start_queue_runners</code> first, and then wrap the <code>sess</code>, e.g.,</p>\n<div class=\"highlight highlight-source-python\"><pre>tf.train.start_queue_runners(<span class=\"pl-v\">sess</span><span class=\"pl-k\">=</span>sess)\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">FLAGS</span>.debug:\n    sess <span class=\"pl-k\">=</span> tf_debug.LocalCLIDebugWrapperSession(sess, <span class=\"pl-v\">ui_type</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">FLAGS</span>.ui_type)\n    sess.add_tensor_filter(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>has_inf_or_nan<span class=\"pl-pds\">\"</span></span>, tf_debug.has_inf_or_nan)</pre></div>\n<p>This will let the debugger CLI run only on the main (training) thread. This solution assumes that you don't want to debug the data queue threads. But you do want to debug those, let me know and I can provide more info.</p>\n<p>I'll leave this bug open for now to remind myself to provide better documentation for this sort of issues.</p>", "body_text": "@hqqxyy , the reason for the weirdness you are seeing is because your session is used in a multi-threaded way, which is not amenable to command-line interface debugging. Particularly, you do,\ntf.train.start_queue_runners(sess=sess)\nafter you wrap sess with LocalCLIDebugWrapperSession.\nSo the program will try to launch the debugger CLI from at least 3 threads (two for your queue runners and one for your main thread that runs the train_step op).\nTo workaround this problem, you can call start_queue_runners first, and then wrap the sess, e.g.,\ntf.train.start_queue_runners(sess=sess)\n\nif FLAGS.debug:\n    sess = tf_debug.LocalCLIDebugWrapperSession(sess, ui_type=FLAGS.ui_type)\n    sess.add_tensor_filter(\"has_inf_or_nan\", tf_debug.has_inf_or_nan)\nThis will let the debugger CLI run only on the main (training) thread. This solution assumes that you don't want to debug the data queue threads. But you do want to debug those, let me know and I can provide more info.\nI'll leave this bug open for now to remind myself to provide better documentation for this sort of issues.", "body": "@hqqxyy , the reason for the weirdness you are seeing is because your session is used in a multi-threaded way, which is not amenable to command-line interface debugging. Particularly, you do,\r\n``` python\r\ntf.train.start_queue_runners(sess=sess)\r\n```\r\nafter you wrap `sess` with `LocalCLIDebugWrapperSession`. \r\n\r\nSo the program will try to launch the debugger CLI from at least 3 threads (two for your queue runners and one for your main thread that runs the `train_step` op).\r\n\r\nTo workaround this problem, you can call `start_queue_runners` first, and then wrap the `sess`, e.g.,\r\n``` python\r\ntf.train.start_queue_runners(sess=sess)\r\n\r\nif FLAGS.debug:\r\n    sess = tf_debug.LocalCLIDebugWrapperSession(sess, ui_type=FLAGS.ui_type)\r\n    sess.add_tensor_filter(\"has_inf_or_nan\", tf_debug.has_inf_or_nan)\r\n```\r\n\r\nThis will let the debugger CLI run only on the main (training) thread. This solution assumes that you don't want to debug the data queue threads. But you do want to debug those, let me know and I can provide more info.\r\n\r\nI'll leave this bug open for now to remind myself to provide better documentation for this sort of issues."}