{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14355", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14355/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14355/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14355/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14355", "id": 272122395, "node_id": "MDU6SXNzdWUyNzIxMjIzOTU=", "number": 14355, "title": "Java API and Node.js: java.lang.IllegalArgumentException: graphDef and prefix cannot be null", "user": {"login": "loretoparisi", "id": 163333, "node_id": "MDQ6VXNlcjE2MzMzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/163333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/loretoparisi", "html_url": "https://github.com/loretoparisi", "followers_url": "https://api.github.com/users/loretoparisi/followers", "following_url": "https://api.github.com/users/loretoparisi/following{/other_user}", "gists_url": "https://api.github.com/users/loretoparisi/gists{/gist_id}", "starred_url": "https://api.github.com/users/loretoparisi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/loretoparisi/subscriptions", "organizations_url": "https://api.github.com/users/loretoparisi/orgs", "repos_url": "https://api.github.com/users/loretoparisi/repos", "events_url": "https://api.github.com/users/loretoparisi/events{/privacy}", "received_events_url": "https://api.github.com/users/loretoparisi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-08T09:03:03Z", "updated_at": "2017-11-08T19:00:24Z", "closed_at": "2017-11-08T18:54:07Z", "author_association": "NONE", "body_html": "<p>I'm using <a href=\"https://github.com/joeferner/node-java\">node-java</a> to run the JAVA API within a <code>Node.js</code> application. Most of the work is done in Java, but I have some issues when loading the graph through node using the Java api <code>graph.importGraphDef</code> I get a <code>java.lang.IllegalArgumentException: graphDef and prefix cannot be null</code>.<br>\nI'm loading the inception graph as a binary file <code>tensorflow_inception_graph.pb</code> and passing it to the api like:</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> graph <span class=\"pl-k\">=</span> <span class=\"pl-smi\">java</span>.<span class=\"pl-en\">newInstanceSync</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.tensorflow.Graph<span class=\"pl-pds\">\"</span></span>);\n<span class=\"pl-k\">var</span> builder <span class=\"pl-k\">=</span> <span class=\"pl-smi\">java</span>.<span class=\"pl-en\">newInstanceSync</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.example.GraphBuilder<span class=\"pl-pds\">\"</span></span>, graph);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">getBinary</span> <span class=\"pl-k\">=</span> (<span class=\"pl-smi\">graphPath</span>, <span class=\"pl-smi\">asBuffer</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">false</span>, <span class=\"pl-smi\">cb</span>) <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-k\">let</span> readStream <span class=\"pl-k\">=</span> <span class=\"pl-smi\">fs</span>.<span class=\"pl-en\">createReadStream</span>(graphPath)\n    <span class=\"pl-k\">let</span> data <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>\n    <span class=\"pl-smi\">readStream</span>.<span class=\"pl-en\">setEncoding</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>binary<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-smi\">readStream</span>.<span class=\"pl-en\">once</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>error<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">err</span> <span class=\"pl-k\">=&gt;</span> {\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">cb</span>(err)\n    })\n    <span class=\"pl-smi\">readStream</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>data<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">chunk</span> <span class=\"pl-k\">=&gt;</span> (data <span class=\"pl-k\">+=</span> chunk))\n    <span class=\"pl-smi\">readStream</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>end<span class=\"pl-pds\">'</span></span>, () <span class=\"pl-k\">=&gt;</span> {\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">cb</span>(<span class=\"pl-c1\">null</span>, asBuffer <span class=\"pl-k\">?</span> <span class=\"pl-smi\">Buffer</span>.<span class=\"pl-en\">from</span>(data, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>binary<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">:</span> data)\n    })\n}\n\n<span class=\"pl-en\">getBinary</span>(graphPath, <span class=\"pl-c1\">true</span>, (<span class=\"pl-smi\">error</span>, <span class=\"pl-smi\">graphDef</span>) <span class=\"pl-k\">=&gt;</span> {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>type is<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-k\">typeof</span>(graphDef));\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>read graph %d<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">graphDef</span>.<span class=\"pl-c1\">length</span>);\n    <span class=\"pl-smi\">graph</span>.<span class=\"pl-en\">importGraphDefSync</span>(graphDef, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>);\n});</pre></div>\n<p>The graph object is loaded by <code>Node.js</code> since I can see its bytes length in the logs:<br>\nThe output is:</p>\n<div class=\"highlight highlight-source-shell\"><pre>Tensorflow.getVersion: 1.4.0\n2017-11-08 09:59:51.249872: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.2 AVX AVX2 FMA\n<span class=\"pl-c1\">type</span> is object\n<span class=\"pl-c1\">read</span> graph 53884595\n/MyProject/tensorflow/index.js:106\n                        graph.importGraphDefSync(graphDef,<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">;</span>\n                              ^\n\nError: Error running instance method\njava.lang.IllegalArgumentException: graphDef and prefix cannot be null\n\tat org.tensorflow.Graph.importGraphDef(Graph.java:127)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\n    at Error (native)\n    at getBinary (/MyProject/tensorflow/index.js:106:31)\n    at ReadStream.readStream.on (/MyProject/tensorflow/index.js:99:34)\n    at emitNone (events.js:91:20)\n    at ReadStream.emit (events.js:185:7)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickCallback (internal/process/next_tick.js:98:9)</pre></div>", "body_text": "I'm using node-java to run the JAVA API within a Node.js application. Most of the work is done in Java, but I have some issues when loading the graph through node using the Java api graph.importGraphDef I get a java.lang.IllegalArgumentException: graphDef and prefix cannot be null.\nI'm loading the inception graph as a binary file tensorflow_inception_graph.pb and passing it to the api like:\nvar graph = java.newInstanceSync(\"org.tensorflow.Graph\");\nvar builder = java.newInstanceSync(\"org.example.GraphBuilder\", graph);\n\nconst getBinary = (graphPath, asBuffer = false, cb) => {\n    let readStream = fs.createReadStream(graphPath)\n    let data = ''\n    readStream.setEncoding('binary')\n    readStream.once('error', err => {\n        return cb(err)\n    })\n    readStream.on('data', chunk => (data += chunk))\n    readStream.on('end', () => {\n        return cb(null, asBuffer ? Buffer.from(data, 'binary') : data)\n    })\n}\n\ngetBinary(graphPath, true, (error, graphDef) => {\n    console.log(\"type is\", typeof(graphDef));\n    console.log(\"read graph %d\", graphDef.length);\n    graph.importGraphDefSync(graphDef, \"\");\n});\nThe graph object is loaded by Node.js since I can see its bytes length in the logs:\nThe output is:\nTensorflow.getVersion: 1.4.0\n2017-11-08 09:59:51.249872: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.2 AVX AVX2 FMA\ntype is object\nread graph 53884595\n/MyProject/tensorflow/index.js:106\n                        graph.importGraphDefSync(graphDef,\"\");\n                              ^\n\nError: Error running instance method\njava.lang.IllegalArgumentException: graphDef and prefix cannot be null\n\tat org.tensorflow.Graph.importGraphDef(Graph.java:127)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\n    at Error (native)\n    at getBinary (/MyProject/tensorflow/index.js:106:31)\n    at ReadStream.readStream.on (/MyProject/tensorflow/index.js:99:34)\n    at emitNone (events.js:91:20)\n    at ReadStream.emit (events.js:185:7)\n    at endReadableNT (_stream_readable.js:974:12)\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\n    at process._tickCallback (internal/process/next_tick.js:98:9)", "body": "I'm using [node-java](https://github.com/joeferner/node-java) to run the JAVA API within a `Node.js` application. Most of the work is done in Java, but I have some issues when loading the graph through node using the Java api `graph.importGraphDef` I get a `java.lang.IllegalArgumentException: graphDef and prefix cannot be null`.\r\nI'm loading the inception graph as a binary file `tensorflow_inception_graph.pb` and passing it to the api like:\r\n\r\n```javascript\r\nvar graph = java.newInstanceSync(\"org.tensorflow.Graph\");\r\nvar builder = java.newInstanceSync(\"org.example.GraphBuilder\", graph);\r\n\r\nconst getBinary = (graphPath, asBuffer = false, cb) => {\r\n    let readStream = fs.createReadStream(graphPath)\r\n    let data = ''\r\n    readStream.setEncoding('binary')\r\n    readStream.once('error', err => {\r\n        return cb(err)\r\n    })\r\n    readStream.on('data', chunk => (data += chunk))\r\n    readStream.on('end', () => {\r\n        return cb(null, asBuffer ? Buffer.from(data, 'binary') : data)\r\n    })\r\n}\r\n\r\ngetBinary(graphPath, true, (error, graphDef) => {\r\n    console.log(\"type is\", typeof(graphDef));\r\n    console.log(\"read graph %d\", graphDef.length);\r\n    graph.importGraphDefSync(graphDef, \"\");\r\n});\r\n```\r\n\r\nThe graph object is loaded by `Node.js` since I can see its bytes length in the logs:\r\nThe output is:\r\n\r\n```bash\r\nTensorflow.getVersion: 1.4.0\r\n2017-11-08 09:59:51.249872: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.2 AVX AVX2 FMA\r\ntype is object\r\nread graph 53884595\r\n/MyProject/tensorflow/index.js:106\r\n                        graph.importGraphDefSync(graphDef,\"\");\r\n                              ^\r\n\r\nError: Error running instance method\r\njava.lang.IllegalArgumentException: graphDef and prefix cannot be null\r\n\tat org.tensorflow.Graph.importGraphDef(Graph.java:127)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\r\n    at Error (native)\r\n    at getBinary (/MyProject/tensorflow/index.js:106:31)\r\n    at ReadStream.readStream.on (/MyProject/tensorflow/index.js:99:34)\r\n    at emitNone (events.js:91:20)\r\n    at ReadStream.emit (events.js:185:7)\r\n    at endReadableNT (_stream_readable.js:974:12)\r\n    at _combinedTickCallback (internal/process/next_tick.js:74:11)\r\n    at process._tickCallback (internal/process/next_tick.js:98:9)\r\n```"}