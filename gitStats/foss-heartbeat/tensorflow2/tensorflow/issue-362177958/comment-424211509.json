{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/424211509", "html_url": "https://github.com/tensorflow/tensorflow/issues/22413#issuecomment-424211509", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22413", "id": 424211509, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDIxMTUwOQ==", "user": {"login": "IMBurbank", "id": 21133719, "node_id": "MDQ6VXNlcjIxMTMzNzE5", "avatar_url": "https://avatars1.githubusercontent.com/u/21133719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IMBurbank", "html_url": "https://github.com/IMBurbank", "followers_url": "https://api.github.com/users/IMBurbank/followers", "following_url": "https://api.github.com/users/IMBurbank/following{/other_user}", "gists_url": "https://api.github.com/users/IMBurbank/gists{/gist_id}", "starred_url": "https://api.github.com/users/IMBurbank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IMBurbank/subscriptions", "organizations_url": "https://api.github.com/users/IMBurbank/orgs", "repos_url": "https://api.github.com/users/IMBurbank/repos", "events_url": "https://api.github.com/users/IMBurbank/events{/privacy}", "received_events_url": "https://api.github.com/users/IMBurbank/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-25T05:26:58Z", "updated_at": "2018-09-25T05:27:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I'm sharing my findings for the night in case there's any community input. I'll work on putting this comment into a PR tomorrow.</p>\n<p>The <code>tf_inspect.py</code> module already looks configured to shim python 2 for use with the <code>tf_inspect.getfullargspec</code> wrapper, but from what I see the current implementation has two coupled issues:</p>\n<ol>\n<li>\n<p><code>tf_inspect.getargspec</code> is used locally for <code>_getfullargspec</code> with python 2, and called for tests in <code>tf_inspect_test.py</code>, but it's also exposed for potential misuse without much documentation.</p>\n</li>\n<li>\n<p>Several modules (beyond unit tests) fall into the trap of calling the exposed <code>tf_inspect.getargspec</code> directly. Python 3 calls to any of these modules will call the deprecated python 2 function.</p>\n</li>\n</ol>\n<p>The main change that I'd recommend to <code>tf_inspect.py</code> would be adding a warning into the <code>tf_inspect.getargspec</code> function signature to call <code>tf_inspect.getfullargspec</code> instead.</p>\n<p>Non-unit-test files directly calling <code>tf_inspect.getargspec</code> should changed to use the existing cross-compatible wrapper.</p>\n<p>And (bonus issue), a unit test needs to be written for <code>tf_inspect.getfullargspec</code>.</p>", "body_text": "I'm sharing my findings for the night in case there's any community input. I'll work on putting this comment into a PR tomorrow.\nThe tf_inspect.py module already looks configured to shim python 2 for use with the tf_inspect.getfullargspec wrapper, but from what I see the current implementation has two coupled issues:\n\n\ntf_inspect.getargspec is used locally for _getfullargspec with python 2, and called for tests in tf_inspect_test.py, but it's also exposed for potential misuse without much documentation.\n\n\nSeveral modules (beyond unit tests) fall into the trap of calling the exposed tf_inspect.getargspec directly. Python 3 calls to any of these modules will call the deprecated python 2 function.\n\n\nThe main change that I'd recommend to tf_inspect.py would be adding a warning into the tf_inspect.getargspec function signature to call tf_inspect.getfullargspec instead.\nNon-unit-test files directly calling tf_inspect.getargspec should changed to use the existing cross-compatible wrapper.\nAnd (bonus issue), a unit test needs to be written for tf_inspect.getfullargspec.", "body": "I'm sharing my findings for the night in case there's any community input. I'll work on putting this comment into a PR tomorrow.\r\n\r\nThe `tf_inspect.py` module already looks configured to shim python 2 for use with the `tf_inspect.getfullargspec` wrapper, but from what I see the current implementation has two coupled issues:\r\n\r\n1) `tf_inspect.getargspec` is used locally for `_getfullargspec` with python 2, and called for tests in `tf_inspect_test.py`, but it's also exposed for potential misuse without much documentation. \r\n\r\n2) Several modules (beyond unit tests) fall into the trap of calling the exposed `tf_inspect.getargspec` directly. Python 3 calls to any of these modules will call the deprecated python 2 function.\r\n\r\nThe main change that I'd recommend to `tf_inspect.py` would be adding a warning into the `tf_inspect.getargspec` function signature to call `tf_inspect.getfullargspec` instead. \r\n\r\nNon-unit-test files directly calling `tf_inspect.getargspec` should changed to use the existing cross-compatible wrapper.\r\n\r\nAnd (bonus issue), a unit test needs to be written for `tf_inspect.getfullargspec`."}