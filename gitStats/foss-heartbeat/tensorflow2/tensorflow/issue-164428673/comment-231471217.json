{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/231471217", "html_url": "https://github.com/tensorflow/tensorflow/pull/3229#issuecomment-231471217", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3229", "id": 231471217, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQ3MTIxNw==", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-08T20:59:03Z", "updated_at": "2016-07-08T21:03:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It is natural to think it would help, but I do think this would cause more confusion for users down the road rather than less, in particular for users who write their own optimizers.  As I said above, your current implementation of <code>maximize</code> is wrong in the presence of derived classes.  If you fix it to call <code>minimize</code> the situation improves, but not enough: the result is still fragile if someone writes an optimizer and decides to override both minimize and maximize, then a third person overrides just minimize, etc.  These fears are based on experience: it's already surprisingly difficult to robustly inherit from optimizers in nonstandard ways, so I'm leery of making it worse in order to save 1 character.</p>", "body_text": "It is natural to think it would help, but I do think this would cause more confusion for users down the road rather than less, in particular for users who write their own optimizers.  As I said above, your current implementation of maximize is wrong in the presence of derived classes.  If you fix it to call minimize the situation improves, but not enough: the result is still fragile if someone writes an optimizer and decides to override both minimize and maximize, then a third person overrides just minimize, etc.  These fears are based on experience: it's already surprisingly difficult to robustly inherit from optimizers in nonstandard ways, so I'm leery of making it worse in order to save 1 character.", "body": "It is natural to think it would help, but I do think this would cause more confusion for users down the road rather than less, in particular for users who write their own optimizers.  As I said above, your current implementation of `maximize` is wrong in the presence of derived classes.  If you fix it to call `minimize` the situation improves, but not enough: the result is still fragile if someone writes an optimizer and decides to override both minimize and maximize, then a third person overrides just minimize, etc.  These fears are based on experience: it's already surprisingly difficult to robustly inherit from optimizers in nonstandard ways, so I'm leery of making it worse in order to save 1 character.\n"}