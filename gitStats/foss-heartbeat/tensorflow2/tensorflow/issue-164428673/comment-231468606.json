{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/231468606", "html_url": "https://github.com/tensorflow/tensorflow/pull/3229#issuecomment-231468606", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3229", "id": 231468606, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQ2ODYwNg==", "user": {"login": "Mazecreator", "id": 18412448, "node_id": "MDQ6VXNlcjE4NDEyNDQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/18412448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mazecreator", "html_url": "https://github.com/Mazecreator", "followers_url": "https://api.github.com/users/Mazecreator/followers", "following_url": "https://api.github.com/users/Mazecreator/following{/other_user}", "gists_url": "https://api.github.com/users/Mazecreator/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mazecreator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mazecreator/subscriptions", "organizations_url": "https://api.github.com/users/Mazecreator/orgs", "repos_url": "https://api.github.com/users/Mazecreator/repos", "events_url": "https://api.github.com/users/Mazecreator/events{/privacy}", "received_events_url": "https://api.github.com/users/Mazecreator/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-08T20:47:32Z", "updated_at": "2016-07-08T20:48:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I am sure I can now use (-COST), but I am just trying to make it easier for people in the future and have code more readable.  When maximizing, it really isn't a COST that is being maximized so that isn't intuitive and certainly -COST was not clear to me and not likely clear to many readers of future code so it seems like Maximize() would simply round out Optimization.  You can then minimize a cost or maximize a value function.  It seems like this will help make the python wrapper easier to use.</p>\n<p>I did think about changes to \"minimize()\" in the future, so in my implementation, I didn't call \"minimize()\" from the \"maximize()\" function but use it as a reference.  \"maximize\" only depends upon the \"compute_gradients\" &amp; \"apply_gradients\" functions.  I think this is a simple addition that will have benefit in the long run.</p>\n<p>I can write a test based upon \"testBasic\" in \"optimizer_test.py\" if that is required for a core change.  I have done a simple bench test to test maximize() within my local repository.  I can call it \"testBasicMaximize\" but I am unsure how to get it to run during the build test phase.</p>", "body_text": "I am sure I can now use (-COST), but I am just trying to make it easier for people in the future and have code more readable.  When maximizing, it really isn't a COST that is being maximized so that isn't intuitive and certainly -COST was not clear to me and not likely clear to many readers of future code so it seems like Maximize() would simply round out Optimization.  You can then minimize a cost or maximize a value function.  It seems like this will help make the python wrapper easier to use.\nI did think about changes to \"minimize()\" in the future, so in my implementation, I didn't call \"minimize()\" from the \"maximize()\" function but use it as a reference.  \"maximize\" only depends upon the \"compute_gradients\" & \"apply_gradients\" functions.  I think this is a simple addition that will have benefit in the long run.\nI can write a test based upon \"testBasic\" in \"optimizer_test.py\" if that is required for a core change.  I have done a simple bench test to test maximize() within my local repository.  I can call it \"testBasicMaximize\" but I am unsure how to get it to run during the build test phase.", "body": "I am sure I can now use (-COST), but I am just trying to make it easier for people in the future and have code more readable.  When maximizing, it really isn't a COST that is being maximized so that isn't intuitive and certainly -COST was not clear to me and not likely clear to many readers of future code so it seems like Maximize() would simply round out Optimization.  You can then minimize a cost or maximize a value function.  It seems like this will help make the python wrapper easier to use.\n\nI did think about changes to \"minimize()\" in the future, so in my implementation, I didn't call \"minimize()\" from the \"maximize()\" function but use it as a reference.  \"maximize\" only depends upon the \"compute_gradients\" & \"apply_gradients\" functions.  I think this is a simple addition that will have benefit in the long run.\n\nI can write a test based upon \"testBasic\" in \"optimizer_test.py\" if that is required for a core change.  I have done a simple bench test to test maximize() within my local repository.  I can call it \"testBasicMaximize\" but I am unsure how to get it to run during the build test phase.\n"}