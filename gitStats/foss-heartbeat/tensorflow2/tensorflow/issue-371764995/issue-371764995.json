{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23090", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23090/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23090/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23090/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/23090", "id": 371764995, "node_id": "MDExOlB1bGxSZXF1ZXN0MjI0MTM5ODI2", "number": 23090, "title": "[aborted] Clean up binary element-wise assertions", "user": {"login": "frreiss", "id": 12436991, "node_id": "MDQ6VXNlcjEyNDM2OTkx", "avatar_url": "https://avatars1.githubusercontent.com/u/12436991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frreiss", "html_url": "https://github.com/frreiss", "followers_url": "https://api.github.com/users/frreiss/followers", "following_url": "https://api.github.com/users/frreiss/following{/other_user}", "gists_url": "https://api.github.com/users/frreiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/frreiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frreiss/subscriptions", "organizations_url": "https://api.github.com/users/frreiss/orgs", "repos_url": "https://api.github.com/users/frreiss/repos", "events_url": "https://api.github.com/users/frreiss/events{/privacy}", "received_events_url": "https://api.github.com/users/frreiss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 390482148, "node_id": "MDU6TGFiZWwzOTA0ODIxNDg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20review", "name": "awaiting review", "color": "fef2c0", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-10-19T00:41:20Z", "updated_at": "2018-10-19T18:56:43Z", "closed_at": "2018-10-19T18:30:17Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23090", "html_url": "https://github.com/tensorflow/tensorflow/pull/23090", "diff_url": "https://github.com/tensorflow/tensorflow/pull/23090.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/23090.patch"}, "body_html": "<p><strong>Edit: Accidentally messed up my branch. Recreating my changes in a new branch and resubmitting this PR.</strong></p>\n<p>TensorFlow 1.5 added two pieces of useful functionality to the <code>assert_equals</code> op. In eager mode, <code>assert_equals</code> now prints a more useful error message that pinpoints which elements of the input tensors differ (see <a href=\"https://github.com/tensorflow/tensorflow/commit/361c55899cb524ca078c65eabdd3d79bfc10c8f9\">commit 361c55899cb524ca078c65eabdd3d79bfc10c8f9</a>). In graph mode, <code>assert_equals</code> now evaluates the assertion at graph construction time when both inputs can be evaluated statically (see <a href=\"https://github.com/tensorflow/tensorflow/commit/cfbeafe11d9b86f8685c1c0f97d285885b5a5f1f\">commit cfbeafe11d9b86f8685c1c0f97d285885b5a5f1f</a>).</p>\n<p>This PR ports this additional functionality to the other binary element-wise assertion ops <code>assert_none_equal</code>, <code>assert_less</code>, <code>assert_less_equal</code>, <code>assert_greater</code>, and <code>assert_greater_equal</code>.</p>\n<p><strong>Before:</strong></p>\n<pre><code>In [1]: import numpy as np \n   ...: import tensorflow as tf \n   ...: tf.enable_eager_execution() \n   ...: zeros = np.zeros(1000) \n   ...: mostly_ones = np.full(1000, 1.) \n   ...: mostly_ones[567] = 0. \n   ...: tf.assert_none_equal(zeros, mostly_ones, summarize=3)            \n       \n---------------------------------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\n&lt;ipython-input-1-23dba1a27a31&gt; in &lt;module&gt;\n      5 mostly_ones = np.full(1000, 1.)\n      6 mostly_ones[567] = 0.\n----&gt; 7 tf.assert_none_equal(zeros, mostly_ones, summarize=3)\n[...stack trace continues...]\n\nInvalidArgumentError: Expected 'tf.Tensor(False, shape=(), dtype=bool)' to be true. Summarized data: b''\nb'Condition x != y did not hold for every single element:'\nb'x (shape=(1000,) dtype=float64) = '\n0.0, 0.0, 0.0, ...\nb'y (shape=(1000,) dtype=float64) = '\n1.0, 1.0, 1.0, ...\n</code></pre>\n<p><strong>After:</strong></p>\n<pre><code>In [1]: import numpy as np \n   ...: import tensorflow as tf \n   ...: tf.enable_eager_execution() \n   ...: zeros = np.zeros(1000) \n   ...: mostly_ones = np.full(1000, 1.) \n   ...: mostly_ones[567] = 0. \n   ...: tf.assert_none_equal(zeros, mostly_ones, summarize=3)                \n                                       \n---------------------------------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\n&lt;ipython-input-1-1c86ae0b9399&gt; in &lt;module&gt;\n      5 mostly_ones = np.full(1000, 1.)\n      6 mostly_ones[567] = 0.\n----&gt; 7 tf.assert_none_equal(zeros, mostly_ones)\n[...stack trace continues...]\n\nInvalidArgumentError: Condition x != y did not hold.\nIndices of first 1 different values:\n[[567]]\nCorresponding x values:\n[0.]\nCorresponding y values:\n[0.]\nFirst 3 elements of x:\n[0. 0. 0.]\nFirst 3 elements of y:\n[1. 1. 1.]\n</code></pre>\n<p>The ops <code>assert_negative</code>, <code>assert_non_negative</code>, <code>assert_positive</code>, and <code>assert_non_positive</code> also get some of the new functionality, as they are based on <code>assert_less</code> and <code>assert_less_equal</code>.</p>\n<p><strong>Before:</strong></p>\n<pre><code>In [1]: import tensorflow as tf \n   ...: tf.assert_non_negative(-1.)                                             \nOut[1]: &lt;tf.Operation 'assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge' type=Merge&gt;\n</code></pre>\n<p><strong>After:</strong></p>\n<pre><code>In [1]: import tensorflow as tf \n   ...: tf.assert_non_negative(-1.)                               \n                                            \n---------------------------------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\n&lt;ipython-input-1-c2ddbad603d6&gt; in &lt;module&gt;\n      1 import tensorflow as tf\n----&gt; 2 tf.assert_non_negative(-1.)\n[...stack trace continues...]\n\nInvalidArgumentError: \nCondition x &gt;= 0 did not hold element-wise:\nx (assert_non_negative/x:0) = \n-1.0\n</code></pre>\n<p>I also removed some unnecessary newlines from the error messages and fixed a glitch in the handling of the <code>message</code> parameter when the <code>data</code> parameter is used.<br>\n<strong>Before:</strong></p>\n<pre><code>In [1]: import tensorflow as tf \n   ...: tf.assert_equal(1., 0., data=[3.], message=\"My error message\")          \n\n---------------------------------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\n&lt;ipython-input-1-ef2b26ad5e73&gt; in &lt;module&gt;\n      1 import tensorflow as tf\n----&gt; 2 tf.assert_equal(1., 0., data=[3.], message=\"My error message\")\n                                    [snip!]\nInvalidArgumentError: 3.0\n</code></pre>\n<p><strong>After:</strong></p>\n<pre><code>In [1]: import tensorflow as tf \n   ...: tf.assert_equal(1., 0., data=[3.], message=\"My error message\")                  \n                      \n---------------------------------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\n&lt;ipython-input-1-ef2b26ad5e73&gt; in &lt;module&gt;\n      1 import tensorflow as tf\n----&gt; 2 tf.assert_equal(1., 0., data=[3.], message=\"My error message\")\n[...stack trace continues...]\n\nInvalidArgumentError: My error message\n3.0\n</code></pre>\n<p>In the process, I replaced a bunch of near-duplicate code and documentation across the <code>assert_*</code> functions with a single function (<code>_binary_assert()</code> in <code>check_ops.py</code>) and common blocks of documentation (<code>_binary_assert_doc()</code> and <code>_unary_assert_doc()</code> in <code>check_ops.py</code>). <code>check_ops.py</code> is now about 125 lines shorter.</p>\n<p>I added some new regression tests to cover static assertion checks in graph mode and modified some existing tests to account for the new functionality.</p>\n<p>I built a local copy of the documentation for the <code>tf.debugging</code> package and reviewed all the resulting Markdown files.</p>", "body_text": "Edit: Accidentally messed up my branch. Recreating my changes in a new branch and resubmitting this PR.\nTensorFlow 1.5 added two pieces of useful functionality to the assert_equals op. In eager mode, assert_equals now prints a more useful error message that pinpoints which elements of the input tensors differ (see commit 361c55899cb524ca078c65eabdd3d79bfc10c8f9). In graph mode, assert_equals now evaluates the assertion at graph construction time when both inputs can be evaluated statically (see commit cfbeafe11d9b86f8685c1c0f97d285885b5a5f1f).\nThis PR ports this additional functionality to the other binary element-wise assertion ops assert_none_equal, assert_less, assert_less_equal, assert_greater, and assert_greater_equal.\nBefore:\nIn [1]: import numpy as np \n   ...: import tensorflow as tf \n   ...: tf.enable_eager_execution() \n   ...: zeros = np.zeros(1000) \n   ...: mostly_ones = np.full(1000, 1.) \n   ...: mostly_ones[567] = 0. \n   ...: tf.assert_none_equal(zeros, mostly_ones, summarize=3)            \n       \n---------------------------------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\n<ipython-input-1-23dba1a27a31> in <module>\n      5 mostly_ones = np.full(1000, 1.)\n      6 mostly_ones[567] = 0.\n----> 7 tf.assert_none_equal(zeros, mostly_ones, summarize=3)\n[...stack trace continues...]\n\nInvalidArgumentError: Expected 'tf.Tensor(False, shape=(), dtype=bool)' to be true. Summarized data: b''\nb'Condition x != y did not hold for every single element:'\nb'x (shape=(1000,) dtype=float64) = '\n0.0, 0.0, 0.0, ...\nb'y (shape=(1000,) dtype=float64) = '\n1.0, 1.0, 1.0, ...\n\nAfter:\nIn [1]: import numpy as np \n   ...: import tensorflow as tf \n   ...: tf.enable_eager_execution() \n   ...: zeros = np.zeros(1000) \n   ...: mostly_ones = np.full(1000, 1.) \n   ...: mostly_ones[567] = 0. \n   ...: tf.assert_none_equal(zeros, mostly_ones, summarize=3)                \n                                       \n---------------------------------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\n<ipython-input-1-1c86ae0b9399> in <module>\n      5 mostly_ones = np.full(1000, 1.)\n      6 mostly_ones[567] = 0.\n----> 7 tf.assert_none_equal(zeros, mostly_ones)\n[...stack trace continues...]\n\nInvalidArgumentError: Condition x != y did not hold.\nIndices of first 1 different values:\n[[567]]\nCorresponding x values:\n[0.]\nCorresponding y values:\n[0.]\nFirst 3 elements of x:\n[0. 0. 0.]\nFirst 3 elements of y:\n[1. 1. 1.]\n\nThe ops assert_negative, assert_non_negative, assert_positive, and assert_non_positive also get some of the new functionality, as they are based on assert_less and assert_less_equal.\nBefore:\nIn [1]: import tensorflow as tf \n   ...: tf.assert_non_negative(-1.)                                             \nOut[1]: <tf.Operation 'assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge' type=Merge>\n\nAfter:\nIn [1]: import tensorflow as tf \n   ...: tf.assert_non_negative(-1.)                               \n                                            \n---------------------------------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\n<ipython-input-1-c2ddbad603d6> in <module>\n      1 import tensorflow as tf\n----> 2 tf.assert_non_negative(-1.)\n[...stack trace continues...]\n\nInvalidArgumentError: \nCondition x >= 0 did not hold element-wise:\nx (assert_non_negative/x:0) = \n-1.0\n\nI also removed some unnecessary newlines from the error messages and fixed a glitch in the handling of the message parameter when the data parameter is used.\nBefore:\nIn [1]: import tensorflow as tf \n   ...: tf.assert_equal(1., 0., data=[3.], message=\"My error message\")          \n\n---------------------------------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\n<ipython-input-1-ef2b26ad5e73> in <module>\n      1 import tensorflow as tf\n----> 2 tf.assert_equal(1., 0., data=[3.], message=\"My error message\")\n                                    [snip!]\nInvalidArgumentError: 3.0\n\nAfter:\nIn [1]: import tensorflow as tf \n   ...: tf.assert_equal(1., 0., data=[3.], message=\"My error message\")                  \n                      \n---------------------------------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\n<ipython-input-1-ef2b26ad5e73> in <module>\n      1 import tensorflow as tf\n----> 2 tf.assert_equal(1., 0., data=[3.], message=\"My error message\")\n[...stack trace continues...]\n\nInvalidArgumentError: My error message\n3.0\n\nIn the process, I replaced a bunch of near-duplicate code and documentation across the assert_* functions with a single function (_binary_assert() in check_ops.py) and common blocks of documentation (_binary_assert_doc() and _unary_assert_doc() in check_ops.py). check_ops.py is now about 125 lines shorter.\nI added some new regression tests to cover static assertion checks in graph mode and modified some existing tests to account for the new functionality.\nI built a local copy of the documentation for the tf.debugging package and reviewed all the resulting Markdown files.", "body": "**Edit: Accidentally messed up my branch. Recreating my changes in a new branch and resubmitting this PR.**\r\n\r\nTensorFlow 1.5 added two pieces of useful functionality to the `assert_equals` op. In eager mode, `assert_equals` now prints a more useful error message that pinpoints which elements of the input tensors differ (see [commit 361c55899cb524ca078c65eabdd3d79bfc10c8f9](https://github.com/tensorflow/tensorflow/commit/361c55899cb524ca078c65eabdd3d79bfc10c8f9)). In graph mode, `assert_equals` now evaluates the assertion at graph construction time when both inputs can be evaluated statically (see [commit cfbeafe11d9b86f8685c1c0f97d285885b5a5f1f](https://github.com/tensorflow/tensorflow/commit/cfbeafe11d9b86f8685c1c0f97d285885b5a5f1f)).\r\n\r\nThis PR ports this additional functionality to the other binary element-wise assertion ops `assert_none_equal`, `assert_less`, `assert_less_equal`, `assert_greater`, and `assert_greater_equal`. \r\n\r\n**Before:**\r\n```\r\nIn [1]: import numpy as np \r\n   ...: import tensorflow as tf \r\n   ...: tf.enable_eager_execution() \r\n   ...: zeros = np.zeros(1000) \r\n   ...: mostly_ones = np.full(1000, 1.) \r\n   ...: mostly_ones[567] = 0. \r\n   ...: tf.assert_none_equal(zeros, mostly_ones, summarize=3)            \r\n       \r\n---------------------------------------------------------------------------\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n<ipython-input-1-23dba1a27a31> in <module>\r\n      5 mostly_ones = np.full(1000, 1.)\r\n      6 mostly_ones[567] = 0.\r\n----> 7 tf.assert_none_equal(zeros, mostly_ones, summarize=3)\r\n[...stack trace continues...]\r\n\r\nInvalidArgumentError: Expected 'tf.Tensor(False, shape=(), dtype=bool)' to be true. Summarized data: b''\r\nb'Condition x != y did not hold for every single element:'\r\nb'x (shape=(1000,) dtype=float64) = '\r\n0.0, 0.0, 0.0, ...\r\nb'y (shape=(1000,) dtype=float64) = '\r\n1.0, 1.0, 1.0, ...\r\n```\r\n**After:**\r\n```\r\nIn [1]: import numpy as np \r\n   ...: import tensorflow as tf \r\n   ...: tf.enable_eager_execution() \r\n   ...: zeros = np.zeros(1000) \r\n   ...: mostly_ones = np.full(1000, 1.) \r\n   ...: mostly_ones[567] = 0. \r\n   ...: tf.assert_none_equal(zeros, mostly_ones, summarize=3)                \r\n                                       \r\n---------------------------------------------------------------------------\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n<ipython-input-1-1c86ae0b9399> in <module>\r\n      5 mostly_ones = np.full(1000, 1.)\r\n      6 mostly_ones[567] = 0.\r\n----> 7 tf.assert_none_equal(zeros, mostly_ones)\r\n[...stack trace continues...]\r\n\r\nInvalidArgumentError: Condition x != y did not hold.\r\nIndices of first 1 different values:\r\n[[567]]\r\nCorresponding x values:\r\n[0.]\r\nCorresponding y values:\r\n[0.]\r\nFirst 3 elements of x:\r\n[0. 0. 0.]\r\nFirst 3 elements of y:\r\n[1. 1. 1.]\r\n```\r\n\r\nThe ops `assert_negative`, `assert_non_negative`, `assert_positive`, and `assert_non_positive` also get some of the new functionality, as they are based on `assert_less` and `assert_less_equal`.\r\n\r\n**Before:**\r\n```\r\nIn [1]: import tensorflow as tf \r\n   ...: tf.assert_non_negative(-1.)                                             \r\nOut[1]: <tf.Operation 'assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge' type=Merge>\r\n```\r\n**After:**\r\n```\r\nIn [1]: import tensorflow as tf \r\n   ...: tf.assert_non_negative(-1.)                               \r\n                                            \r\n---------------------------------------------------------------------------\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n<ipython-input-1-c2ddbad603d6> in <module>\r\n      1 import tensorflow as tf\r\n----> 2 tf.assert_non_negative(-1.)\r\n[...stack trace continues...]\r\n\r\nInvalidArgumentError: \r\nCondition x >= 0 did not hold element-wise:\r\nx (assert_non_negative/x:0) = \r\n-1.0\r\n```\r\n\r\nI also removed some unnecessary newlines from the error messages and fixed a glitch in the handling of the `message` parameter when the `data` parameter is used.\r\n**Before:**\r\n```\r\nIn [1]: import tensorflow as tf \r\n   ...: tf.assert_equal(1., 0., data=[3.], message=\"My error message\")          \r\n\r\n---------------------------------------------------------------------------\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n<ipython-input-1-ef2b26ad5e73> in <module>\r\n      1 import tensorflow as tf\r\n----> 2 tf.assert_equal(1., 0., data=[3.], message=\"My error message\")\r\n                                    [snip!]\r\nInvalidArgumentError: 3.0\r\n```\r\n**After:**\r\n```\r\nIn [1]: import tensorflow as tf \r\n   ...: tf.assert_equal(1., 0., data=[3.], message=\"My error message\")                  \r\n                      \r\n---------------------------------------------------------------------------\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n<ipython-input-1-ef2b26ad5e73> in <module>\r\n      1 import tensorflow as tf\r\n----> 2 tf.assert_equal(1., 0., data=[3.], message=\"My error message\")\r\n[...stack trace continues...]\r\n\r\nInvalidArgumentError: My error message\r\n3.0\r\n```\r\n\r\nIn the process, I replaced a bunch of near-duplicate code and documentation across the `assert_*` functions with a single function (`_binary_assert()` in `check_ops.py`) and common blocks of documentation (`_binary_assert_doc()` and `_unary_assert_doc()` in `check_ops.py`). `check_ops.py` is now about 125 lines shorter.\r\n\r\nI added some new regression tests to cover static assertion checks in graph mode and modified some existing tests to account for the new functionality.\r\n\r\nI built a local copy of the documentation for the `tf.debugging` package and reviewed all the resulting Markdown files.\r\n"}