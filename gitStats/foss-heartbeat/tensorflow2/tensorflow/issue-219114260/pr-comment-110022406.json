{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/110022406", "pull_request_review_id": 31138416, "id": 110022406, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDAyMjQwNg==", "diff_hunk": "@@ -0,0 +1,130 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/contrib/verbs/verbs_server_lib.h\"\n+\n+#include \"tensorflow/contrib/verbs/rdma_mgr.h\"\n+#include \"tensorflow/contrib/verbs/rdma_rendezvous_mgr.h\"\n+#include \"tensorflow/core/distributed_runtime/server_lib.h\"\n+#include \"tensorflow/core/lib/core/status.h\"\n+#include \"tensorflow/core/platform/env.h\"\n+\n+namespace tensorflow {\n+\n+namespace {\n+// static utility function\n+RendezvousMgrInterface* NewRdmaRendezvousMgr(const WorkerEnv* env) {\n+  return new RdmaRendezvousMgr(env);\n+}\n+\n+}  // namespace\n+\n+VerbsServer::VerbsServer(const ServerDef& server_def, Env* env)\n+    : GrpcServer(server_def, env), verbs_state_(DISCONNECTED) {}\n+\n+VerbsServer::~VerbsServer() {\n+  TF_CHECK_OK(Stop());\n+  TF_CHECK_OK(Join());\n+  delete rdma_mgr_;\n+  delete verbs_service_;\n+}\n+\n+Status VerbsServer::Init(ServiceCreationFunction service_func, \n+              RendezvousMgrCreationFunction rendezvous_mgr_func) {\n+  Status s = GrpcServer::Init(service_func, rendezvous_mgr_func);\n+  {\n+    mutex_lock l(mu_);\n+    CHECK_EQ(verbs_state_, DISCONNECTED);\n+    rdma_mgr_ = new RdmaMgr(worker_env(), channel_cache());\n+    // set rdma_mgr for verbs_service and rdma_rendezvous_mgr \n+    verbs_service_->SetRdmaMgr(rdma_mgr_);\n+    dynamic_cast<RdmaRendezvousMgr*>(worker_env()->rendezvous_mgr)\n+            ->SetRdmaMgr(rdma_mgr_);\n+  }\n+  return s;\n+}\n+\n+Status VerbsServer::Start() {\n+  Status s = GrpcServer::Start();\n+  {\n+    mutex_lock l(mu_);\n+    if (verbs_state_ == DISCONNECTED) {\n+      // verbs_thread needs to be initiated\n+      // before rdma_mgr sets up the rdma channels.\n+      verbs_thread_.reset(\n+        worker_env()->env->StartThread(ThreadOptions(), \"TF_verbs_service\",\n+                            [this] { verbs_service_->HandleRPCsLoop(); }));\n+      rdma_mgr_->SetupChannels();\n+      verbs_state_ = CONNECTED;\n+    }\n+  }\n+  return s;\n+}\n+\n+Status VerbsServer::Join() {\n+  Status s = GrpcServer::Join();\n+  {\n+    mutex_lock l(mu_);\n+    if (verbs_state_ == CONNECTED) {\n+      verbs_state_ = DISCONNECTED;\n+      verbs_thread_.reset();\n+    }\n+  }\n+  return s;\n+}\n+\n+/* static */\n+Status VerbsServer::Create(const ServerDef& server_def, Env* env,\n+                          std::unique_ptr<ServerInterface>* out_server) {\n+  std::unique_ptr<VerbsServer> ret(new VerbsServer(server_def, Env::Default()));\n+  ServiceCreationFunction service_func = [&ret](const WorkerEnv* worker_env,\n+      ::grpc::ServerBuilder* builder) {\n+    return SetNewVerbsService(&ret->verbs_service_, worker_env, builder);\n+  };\n+  TF_RETURN_IF_ERROR(ret->Init(service_func, NewRdmaRendezvousMgr));\n+  *out_server = std::move(ret);\n+  return Status::OK();\n+}\n+\n+namespace {\n+\n+class VerbsServerFactory : public ServerFactory {\n+ public:\n+  bool AcceptsOptions(const ServerDef& server_def) override {\n+    return server_def.protocol() == \"verbs\";", "path": "tensorflow/contrib/verbs/verbs_server_lib.cc", "position": null, "original_position": 106, "commit_id": "b5581b2ffb75b98561f64fc6d0a72d40680d8723", "original_commit_id": "ed6a8d6cd51fd5b97a95b1682b805b2d63564126", "user": {"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}, "body": "Maybe use \"grpc+verbs\" as the protocol, since this is a hybrid. ", "created_at": "2017-04-05T20:40:24Z", "updated_at": "2017-04-10T19:22:04Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8943#discussion_r110022406", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8943", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/110022406"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8943#discussion_r110022406"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8943"}}, "body_html": "<p>Maybe use \"grpc+verbs\" as the protocol, since this is a hybrid.</p>", "body_text": "Maybe use \"grpc+verbs\" as the protocol, since this is a hybrid."}