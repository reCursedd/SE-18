{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/110339097", "pull_request_review_id": 31505236, "id": 110339097, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDMzOTA5Nw==", "diff_hunk": "@@ -0,0 +1,140 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include <unordered_set>\n+#include \"tensorflow/contrib/verbs/rdma_rendezvous_mgr.h\"\n+#include \"tensorflow/contrib/verbs/verbs_util.h\"\n+#include \"tensorflow/core/common_runtime/device.h\"\n+#include \"tensorflow/core/common_runtime/device_mgr.h\"\n+#include \"tensorflow/core/common_runtime/dma_helper.h\"\n+#include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/lib/strings/numbers.h\"\n+#include \"tensorflow/core/lib/strings/str_util.h\"\n+\n+namespace tensorflow {\n+\n+class RdmaRemoteRendezvous : public BaseRemoteRendezvous {\n+ public:\n+  RdmaRemoteRendezvous(const WorkerEnv* env, int64 step_id, RdmaMgr* rdma_mgr)\n+      : BaseRemoteRendezvous(env, step_id, true), rdma_mgr_(rdma_mgr) {}\n+ protected:\n+  void RecvFromRemoteAsync(const Rendezvous::ParsedKey& parsed,\n+                           const Rendezvous::Args& args,\n+                           DoneCallback done) override;\n+ private:\n+  ~RdmaRemoteRendezvous() override {}\n+  RdmaMgr* rdma_mgr_;\n+\n+  TF_DISALLOW_COPY_AND_ASSIGN(RdmaRemoteRendezvous);\n+};\n+\n+void RdmaRemoteRendezvous::RecvFromRemoteAsync(\n+    const Rendezvous::ParsedKey& parsed, const Rendezvous::Args& recv_args, \n+    DoneCallback done) { \n+  Status s;\n+  // parse src_name and dst_name\n+  string src_name, dst_name, unused;\n+  if (!DeviceNameUtils::SplitDeviceName(parsed.src_device,\n+                                        &src_name, &unused)) {\n+    s = errors::Internal(\"Could not parse src name.\");\n+  }\n+  CHECK(s.ok()) << \"s is not ok, error code \" << s.error_message();\n+  if (!s.ok()) {\n+    done(s, Args(), recv_args, Tensor{}, false);\n+    return;\n+  }\n+  if (!DeviceNameUtils::SplitDeviceName(parsed.dst_device,\n+                                        &dst_name, &unused)) {\n+    s = errors::Internal(\"Could not parse dst name.\");\n+  }\n+  CHECK(s.ok()) << \"s is not ok, error code \" << s.error_message();\n+  if (!s.ok()) {\n+    done(s, Args(), recv_args, Tensor{}, false);\n+    return;\n+  }\n+  CHECK(dst_name.compare(rdma_mgr_->local_worker()) == 0);\n+  RdmaChannel* rc = rdma_mgr_->FindChannel(src_name);\n+  string key(std::move(parsed.FullKey().ToString()));\n+  string key_with_step_id = VerbsUtil::AppendStepidToKey(key, step_id_);\n+  // insert callback\n+  rc->InsertRecvCallback(key_with_step_id, \n+    [this, key, key_with_step_id, rc, recv_args, parsed, done](){\n+      Status s;     \n+      Device* src_dev;\n+      s = env_->device_mgr->LookupDevice(\"CPU:0\", &src_dev);\n+      CHECK(s.ok()) << \"s is not ok, error code \" << s.error_message();\n+      if (!s.ok()) {\n+        done(s, Args(), recv_args, Tensor(), true);\n+        return;\n+      }\n+      Device* dst_dev;\n+      s = env_->device_mgr->LookupDevice(parsed.dst_device, &dst_dev);\n+      CHECK(s.ok()) << \"s is not ok, error code \" << s.error_message();\n+      if (!s.ok()) {\n+        done(s, Args(), recv_args, Tensor(), true);\n+        return;\n+      }\n+      AllocatorAttributes src_alloc_attr;\n+      src_alloc_attr.set_on_host(true);             ", "path": "tensorflow/contrib/verbs/rdma_rendezvous_mgr.cc", "position": null, "original_position": 90, "commit_id": "b5581b2ffb75b98561f64fc6d0a72d40680d8723", "original_commit_id": "ed6a8d6cd51fd5b97a95b1682b805b2d63564126", "user": {"login": "junshi15", "id": 12075848, "node_id": "MDQ6VXNlcjEyMDc1ODQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/12075848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/junshi15", "html_url": "https://github.com/junshi15", "followers_url": "https://api.github.com/users/junshi15/followers", "following_url": "https://api.github.com/users/junshi15/following{/other_user}", "gists_url": "https://api.github.com/users/junshi15/gists{/gist_id}", "starred_url": "https://api.github.com/users/junshi15/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/junshi15/subscriptions", "organizations_url": "https://api.github.com/users/junshi15/orgs", "repos_url": "https://api.github.com/users/junshi15/repos", "events_url": "https://api.github.com/users/junshi15/events{/privacy}", "received_events_url": "https://api.github.com/users/junshi15/received_events", "type": "User", "site_admin": false}, "body": "removed", "created_at": "2017-04-07T08:20:46Z", "updated_at": "2017-04-10T19:22:04Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8943#discussion_r110339097", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8943", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/110339097"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8943#discussion_r110339097"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8943"}}, "body_html": "<p>removed</p>", "body_text": "removed", "in_reply_to_id": 110021298}