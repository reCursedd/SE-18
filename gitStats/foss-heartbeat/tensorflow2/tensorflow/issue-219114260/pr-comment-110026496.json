{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/110026496", "pull_request_review_id": 31138416, "id": 110026496, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMDAyNjQ5Ng==", "diff_hunk": "@@ -0,0 +1,157 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"grpc++/alarm.h\"\n+#include \"grpc++/grpc++.h\"\n+#include \"grpc++/server_builder.h\"\n+\n+#include \"tensorflow/contrib/verbs/grpc_verbs_service.h\"\n+#include \"tensorflow/core/distributed_runtime/rpc/grpc_util.h\"\n+\n+namespace tensorflow {\n+\n+GrpcVerbsService::GrpcVerbsService(const WorkerEnv* worker_env,\n+      ::grpc::ServerBuilder* builder)\n+      : is_shutdown_(false), worker_env_(worker_env) {\n+    builder->RegisterService(&verbs_service_);\n+    cq_ = builder->AddCompletionQueue().release();\n+}\n+\n+GrpcVerbsService::~GrpcVerbsService() {\n+  delete shutdown_alarm_;\n+  delete cq_;\n+}\n+\n+void GrpcVerbsService::Shutdown() {\n+  bool did_shutdown = false;\n+  {\n+    mutex_lock l(shutdown_mu_);\n+    if (!is_shutdown_) {\n+      LOG(INFO) << \"Shutting down GrpcWorkerService.\";\n+      is_shutdown_ = true;\n+      did_shutdown = true;\n+    }\n+  }\n+  if (did_shutdown) {\n+    shutdown_alarm_ =\n+        new ::grpc::Alarm(cq_, gpr_now(GPR_CLOCK_MONOTONIC), nullptr);\n+  }\n+}\n+  \n+// This macro creates a new request for the given RPC method name\n+// (e.g., `ENQUEUE_REQUEST(GetRemoteAddress, false);`), and enqueues it on\n+// `this->cq_`.\n+//\n+// This macro is invoked one or more times for each RPC method to\n+// ensure that there are sufficient completion queue entries to\n+// handle incoming requests without blocking.\n+//\n+// The implementation of the request handler for each RPC method\n+// must ensure that it calls ENQUEUE_REQUEST() for that RPC method,\n+// to keep accepting new requests.\n+#define ENQUEUE_REQUEST(method, supports_cancel)                              \\\n+  do {                                                                        \\\n+    mutex_lock l(shutdown_mu_);                                               \\\n+    if (!is_shutdown_) {                                                      \\\n+      Call<GrpcVerbsService, grpc::VerbsService::AsyncService,                \\\n+           method##Request, method##Response>::                               \\\n+          EnqueueRequest(&verbs_service_, cq_,                                \\\n+                         &grpc::VerbsService::AsyncService::Request##method,  \\\n+                         &GrpcVerbsService::method##Handler,                  \\\n+                         (supports_cancel));                                  \\\n+    }                                                                         \\\n+  } while (0)\n+\n+// This method blocks forever handling requests from the completion queue.\n+void GrpcVerbsService::HandleRPCsLoop() {\n+  for (int i = 0; i < 10; ++i) {\n+    ENQUEUE_REQUEST(GetRemoteAddress, false);\n+  }\n+\n+  void* tag;\n+  bool ok;\n+\n+  while (cq_->Next(&tag, &ok)) {\n+    UntypedCall<GrpcVerbsService>::Tag* callback_tag =\n+        static_cast<UntypedCall<GrpcVerbsService>::Tag*>(tag);\n+    if (callback_tag) {\n+      callback_tag->OnCompleted(this, ok);\n+    } else {\n+      cq_->Shutdown();\n+    }\n+  }\n+}\n+\n+void GrpcVerbsService::GetRemoteAddressHandler(WorkerCall\n+     <GetRemoteAddressRequest, GetRemoteAddressResponse>* call) {\n+  Status s = GetRemoteAddressSync(&call->request, &call->response);\n+  call->SendResponse(ToGrpcStatus(s));\n+  ENQUEUE_REQUEST(GetRemoteAddress, false);\n+}\n+\n+// synchronous method\n+Status GrpcVerbsService::GetRemoteAddressSync(\n+                        const GetRemoteAddressRequest* request,\n+                        GetRemoteAddressResponse* response) {\n+  // analyzing request\n+  // the channel setting part is redundant.\n+  string remote_host_name = request->host_name();", "path": "tensorflow/contrib/verbs/grpc_verbs_service.cc", "position": null, "original_position": 110, "commit_id": "b5581b2ffb75b98561f64fc6d0a72d40680d8723", "original_commit_id": "ed6a8d6cd51fd5b97a95b1682b805b2d63564126", "user": {"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}, "body": "const string", "created_at": "2017-04-05T20:59:10Z", "updated_at": "2017-04-10T19:22:04Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8943#discussion_r110026496", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8943", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/110026496"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8943#discussion_r110026496"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8943"}}, "body_html": "<p>const string</p>", "body_text": "const string"}