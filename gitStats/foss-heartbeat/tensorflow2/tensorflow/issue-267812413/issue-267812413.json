{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13924", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13924/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13924/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13924/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/13924", "id": 267812413, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ4MjM2ODI1", "number": 13924, "title": "Add clang style check as part of the sanity check", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, {"login": "benoitsteiner", "id": 6969686, "node_id": "MDQ6VXNlcjY5Njk2ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6969686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benoitsteiner", "html_url": "https://github.com/benoitsteiner", "followers_url": "https://api.github.com/users/benoitsteiner/followers", "following_url": "https://api.github.com/users/benoitsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/benoitsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/benoitsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benoitsteiner/subscriptions", "organizations_url": "https://api.github.com/users/benoitsteiner/orgs", "repos_url": "https://api.github.com/users/benoitsteiner/repos", "events_url": "https://api.github.com/users/benoitsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/benoitsteiner/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2017-10-23T20:48:51Z", "updated_at": "2017-10-27T13:59:01Z", "closed_at": "2017-10-27T03:04:59Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13924", "html_url": "https://github.com/tensorflow/tensorflow/pull/13924", "diff_url": "https://github.com/tensorflow/tensorflow/pull/13924.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/13924.patch"}, "body_html": "<p>This fix is an effort to add clang style check as part of the sanity check.</p>\n<p><strong>NOTE: Not sure if this PR is relevant so feel free to close it if it doesn't make sense</strong></p>\n<p>In <code>CONTRIBUTING.md</code> it has been advised to run <code>clang-format --style=google file.cc</code> so that Google coding style is conformed. However, there is no sanity check in the current Jenkins build so current .cc and .h files in the repo are not really conforming to the coding style.</p>\n<p>This actually causes issues. In case a PR is submitted with <code>clang-format --style=google file.cc</code>, the reviewer may see additional unrelated changes which might be a distraction. The developer may also spent additional time to manually check for any discrepancies manually with additional unrelated style changes.</p>\n<p>This fix adds the clang-format check to the ci build so that when <code>ci_sanity.sh</code> is running, it will use clang-format to make sure the code is conforming to the coding style as specified in <code>CONTRIBUTING.md</code>.</p>\n<p>One thing that might need to take notice is the header order of the Eigen library. See<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"267507835\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/13907\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/13907/hovercard?comment_id=338718110&amp;comment_type=issue_comment\" href=\"https://github.com/tensorflow/tensorflow/pull/13907#issuecomment-338718110\">#13907 (comment)</a> for further details.</p>\n<p>Basically, if Eigen headers could be placed in any order, then no additional steps are needed. Otherwise, it is always possible to place the Eigen headers at the top, then leave one empty line like:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>third_party/eigen3/unsupported/Eigen/CXX11/Tensor<span class=\"pl-pds\">\"</span></span>\n\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/op.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/op_kernel.h<span class=\"pl-pds\">\"</span></span>\n...</pre></div>\n<p>In this way, even a run of <code>clang-format -i --style=google file.cc</code> will still respect the order and leave Eigen header at the top.</p>\n<p>This PR is experimeal so it only checks <code>tensorflow/core/ops</code> directory. Other files could be added if this PR is OK.</p>\n<p>This PR also sanitizes all files in <code>tensorflow/core/ops</code> directory so that it conforms to coding style requirement.</p>\n<p>Signed-off-by: Yong Tang <a href=\"mailto:yong.tang.github@outlook.com\">yong.tang.github@outlook.com</a></p>", "body_text": "This fix is an effort to add clang style check as part of the sanity check.\nNOTE: Not sure if this PR is relevant so feel free to close it if it doesn't make sense\nIn CONTRIBUTING.md it has been advised to run clang-format --style=google file.cc so that Google coding style is conformed. However, there is no sanity check in the current Jenkins build so current .cc and .h files in the repo are not really conforming to the coding style.\nThis actually causes issues. In case a PR is submitted with clang-format --style=google file.cc, the reviewer may see additional unrelated changes which might be a distraction. The developer may also spent additional time to manually check for any discrepancies manually with additional unrelated style changes.\nThis fix adds the clang-format check to the ci build so that when ci_sanity.sh is running, it will use clang-format to make sure the code is conforming to the coding style as specified in CONTRIBUTING.md.\nOne thing that might need to take notice is the header order of the Eigen library. See\n#13907 (comment) for further details.\nBasically, if Eigen headers could be placed in any order, then no additional steps are needed. Otherwise, it is always possible to place the Eigen headers at the top, then leave one empty line like:\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n...\nIn this way, even a run of clang-format -i --style=google file.cc will still respect the order and leave Eigen header at the top.\nThis PR is experimeal so it only checks tensorflow/core/ops directory. Other files could be added if this PR is OK.\nThis PR also sanitizes all files in tensorflow/core/ops directory so that it conforms to coding style requirement.\nSigned-off-by: Yong Tang yong.tang.github@outlook.com", "body": "This fix is an effort to add clang style check as part of the sanity check.\r\n\r\n**NOTE: Not sure if this PR is relevant so feel free to close it if it doesn't make sense**\r\n\r\nIn `CONTRIBUTING.md` it has been advised to run `clang-format --style=google file.cc` so that Google coding style is conformed. However, there is no sanity check in the current Jenkins build so current .cc and .h files in the repo are not really conforming to the coding style.\r\n\r\nThis actually causes issues. In case a PR is submitted with `clang-format --style=google file.cc`, the reviewer may see additional unrelated changes which might be a distraction. The developer may also spent additional time to manually check for any discrepancies manually with additional unrelated style changes.\r\n\r\nThis fix adds the clang-format check to the ci build so that when `ci_sanity.sh` is running, it will use clang-format to make sure the code is conforming to the coding style as specified in `CONTRIBUTING.md`.\r\n\r\nOne thing that might need to take notice is the header order of the Eigen library. See\r\nhttps://github.com/tensorflow/tensorflow/pull/13907#issuecomment-338718110 for further details.\r\n\r\nBasically, if Eigen headers could be placed in any order, then no additional steps are needed. Otherwise, it is always possible to place the Eigen headers at the top, then leave one empty line like:\r\n```cpp\r\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\r\n\r\n#include \"tensorflow/core/framework/op.h\"\r\n#include \"tensorflow/core/framework/op_kernel.h\"\r\n...\r\n```\r\n\r\nIn this way, even a run of `clang-format -i --style=google file.cc` will still respect the order and leave Eigen header at the top.\r\n\r\nThis PR is experimeal so it only checks `tensorflow/core/ops` directory. Other files could be added if this PR is OK.\r\n\r\nThis PR also sanitizes all files in `tensorflow/core/ops` directory so that it conforms to coding style requirement.\r\n\r\nSigned-off-by: Yong Tang <yong.tang.github@outlook.com>"}