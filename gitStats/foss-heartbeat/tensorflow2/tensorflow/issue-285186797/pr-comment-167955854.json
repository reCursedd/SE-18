{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/167955854", "pull_request_review_id": 96247720, "id": 167955854, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2Nzk1NTg1NA==", "diff_hunk": "@@ -292,108 +312,183 @@ def random_flip_left_right(image, seed=None):\n def flip_left_right(image):\n   \"\"\"Flip an image horizontally (left to right).\n \n-  Outputs the contents of `image` flipped along the second dimension, which is\n-  `width`.\n+  Outputs the contents of `image` flipped along the width dimension.\n \n   See also `reverse()`.\n \n   Args:\n-    image: A 3-D tensor of shape `[height, width, channels].`\n+    image: 4-D Tensor of shape `[batch, height, width, channels]` or\n+           3-D Tensor of shape `[height, width, channels]`.\n \n   Returns:\n-    A 3-D tensor of the same type and shape as `image`.\n+    A tensor of the same type and shape as `image`.\n \n   Raises:\n     ValueError: if the shape of `image` not supported.\n   \"\"\"\n   with ops.name_scope(None, 'flip_left_right', [image]) as scope:\n     image = ops.convert_to_tensor(image, name='image')\n-    image = _Assert3DImage(image)\n-    return fix_image_flip_shape(image, array_ops.reverse(\n-        image, [1], name=scope))\n+    image = _AssertAtLeast3DImage(image)\n+    shape = image.get_shape()\n+    if shape.ndims == 3 or shape.ndims is None:\n+      return fix_image_flip_shape(image, array_ops.reverse(image, [1]))\n+    elif shape.ndims == 4:\n+      return array_ops.reverse(image, [2])\n+    else:\n+      raise ValueError('\\'image\\' must have either 3 or 4 dimensions.')\n \n \n @tf_export('image.flip_up_down')\n def flip_up_down(image):\n   \"\"\"Flip an image vertically (upside down).\n \n-  Outputs the contents of `image` flipped along the first dimension, which is\n-  `height`.\n+  Outputs the contents of `image` flipped along the height dimension.\n \n   See also `reverse()`.\n \n   Args:\n-    image: A 3-D tensor of shape `[height, width, channels].`\n+    image: 4-D Tensor of shape `[batch, height, width, channels]` or\n+           3-D Tensor of shape `[height, width, channels]`.\n \n   Returns:\n-    A 3-D tensor of the same type and shape as `image`.\n+    A tensor of the same type and shape as `image`.\n \n   Raises:\n     ValueError: if the shape of `image` not supported.\n   \"\"\"\n   with ops.name_scope(None, 'flip_up_down', [image]) as scope:\n     image = ops.convert_to_tensor(image, name='image')\n-    image = _Assert3DImage(image)\n-    return fix_image_flip_shape(image, array_ops.reverse(\n-        image, [0], name=scope))\n+    image = _AssertAtLeast3DImage(image)\n+    shape = image.get_shape()\n+    if shape.ndims == 3 or shape.ndims is None:\n+      return fix_image_flip_shape(image, array_ops.reverse(image, [0]))\n+    elif shape.ndims == 4:\n+      return array_ops.reverse(image, [1])\n+    else:\n+      raise ValueError('\\'image\\' must have either 3 or 4 dimensions.')\n \n \n @tf_export('image.rot90')\n def rot90(image, k=1, name=None):\n-  \"\"\"Rotate an image counter-clockwise by 90 degrees.\n+  \"\"\"Rotate image(s) counter-clockwise by 90 degrees.\n \n   Args:\n-    image: A 3-D tensor of shape `[height, width, channels]`.\n+    image: 4-D Tensor of shape `[batch, height, width, channels]` or\n+           3-D Tensor of shape `[height, width, channels]`.\n     k: A scalar integer. The number of times the image is rotated by 90 degrees.\n     name: A name for this operation (optional).\n \n   Returns:\n-    A rotated 3-D tensor of the same type and shape as `image`.\n+    A rotated tensor of the same type and shape as `image`.\n+\n+  Raises:\n+    ValueError: if the shape of `image` not supported.\n   \"\"\"\n   with ops.name_scope(name, 'rot90', [image, k]) as scope:\n     image = ops.convert_to_tensor(image, name='image')\n-    image = _Assert3DImage(image)\n+    image = _AssertAtLeast3DImage(image)\n     k = ops.convert_to_tensor(k, dtype=dtypes.int32, name='k')\n     k.get_shape().assert_has_rank(0)\n     k = math_ops.mod(k, 4)\n \n-    def _rot90():\n-      return array_ops.transpose(array_ops.reverse_v2(image, [1]), [1, 0, 2])\n+    shape = image.get_shape()\n+    if shape.ndims == 3 or shape.ndims is None:\n+      return _rot90_3D(image, k, scope)\n+    elif shape.ndims == 4:\n+      return _rot90_4D(image, k, scope)", "path": "tensorflow/python/ops/image_ops_impl.py", "position": 134, "original_position": 134, "commit_id": "0f689f8a18458b265d7290a496bf3e400332f247", "original_commit_id": "1753869ebd685cd8e16fe25307fb40679c10d9f1", "user": {"login": "JoshVarty", "id": 1249087, "node_id": "MDQ6VXNlcjEyNDkwODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1249087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshVarty", "html_url": "https://github.com/JoshVarty", "followers_url": "https://api.github.com/users/JoshVarty/followers", "following_url": "https://api.github.com/users/JoshVarty/following{/other_user}", "gists_url": "https://api.github.com/users/JoshVarty/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshVarty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshVarty/subscriptions", "organizations_url": "https://api.github.com/users/JoshVarty/orgs", "repos_url": "https://api.github.com/users/JoshVarty/repos", "events_url": "https://api.github.com/users/JoshVarty/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshVarty/received_events", "type": "User", "site_admin": false}, "body": "Introducing two methods for `_rot90_3D` and `_rot90_4D` is unfortunate. I'd definitely welcome a better suggestion. The other alternative was to stagger `if shape.ndims == 3` checks throughout the method which didn't really help readability either.", "created_at": "2018-02-13T18:22:58Z", "updated_at": "2018-02-14T16:18:11Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/15726#discussion_r167955854", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15726", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/167955854"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/15726#discussion_r167955854"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15726"}}, "body_html": "<p>Introducing two methods for <code>_rot90_3D</code> and <code>_rot90_4D</code> is unfortunate. I'd definitely welcome a better suggestion. The other alternative was to stagger <code>if shape.ndims == 3</code> checks throughout the method which didn't really help readability either.</p>", "body_text": "Introducing two methods for _rot90_3D and _rot90_4D is unfortunate. I'd definitely welcome a better suggestion. The other alternative was to stagger if shape.ndims == 3 checks throughout the method which didn't really help readability either."}