{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22406", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22406/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22406/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22406/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22406", "id": 362101547, "node_id": "MDU6SXNzdWUzNjIxMDE1NDc=", "number": 22406, "title": "Exporting trained TensorFlow models to C++", "user": {"login": "taotaolin", "id": 11807206, "node_id": "MDQ6VXNlcjExODA3MjA2", "avatar_url": "https://avatars3.githubusercontent.com/u/11807206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taotaolin", "html_url": "https://github.com/taotaolin", "followers_url": "https://api.github.com/users/taotaolin/followers", "following_url": "https://api.github.com/users/taotaolin/following{/other_user}", "gists_url": "https://api.github.com/users/taotaolin/gists{/gist_id}", "starred_url": "https://api.github.com/users/taotaolin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taotaolin/subscriptions", "organizations_url": "https://api.github.com/users/taotaolin/orgs", "repos_url": "https://api.github.com/users/taotaolin/repos", "events_url": "https://api.github.com/users/taotaolin/events{/privacy}", "received_events_url": "https://api.github.com/users/taotaolin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "harshini-gadige", "id": 42781361, "node_id": "MDQ6VXNlcjQyNzgxMzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/42781361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshini-gadige", "html_url": "https://github.com/harshini-gadige", "followers_url": "https://api.github.com/users/harshini-gadige/followers", "following_url": "https://api.github.com/users/harshini-gadige/following{/other_user}", "gists_url": "https://api.github.com/users/harshini-gadige/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshini-gadige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshini-gadige/subscriptions", "organizations_url": "https://api.github.com/users/harshini-gadige/orgs", "repos_url": "https://api.github.com/users/harshini-gadige/repos", "events_url": "https://api.github.com/users/harshini-gadige/events{/privacy}", "received_events_url": "https://api.github.com/users/harshini-gadige/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "harshini-gadige", "id": 42781361, "node_id": "MDQ6VXNlcjQyNzgxMzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/42781361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshini-gadige", "html_url": "https://github.com/harshini-gadige", "followers_url": "https://api.github.com/users/harshini-gadige/followers", "following_url": "https://api.github.com/users/harshini-gadige/following{/other_user}", "gists_url": "https://api.github.com/users/harshini-gadige/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshini-gadige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshini-gadige/subscriptions", "organizations_url": "https://api.github.com/users/harshini-gadige/orgs", "repos_url": "https://api.github.com/users/harshini-gadige/repos", "events_url": "https://api.github.com/users/harshini-gadige/events{/privacy}", "received_events_url": "https://api.github.com/users/harshini-gadige/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-09-20T09:38:20Z", "updated_at": "2018-09-20T16:33:06Z", "closed_at": "2018-09-20T16:33:06Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>**Have I written custom code **: NO</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: win7 X64    Visual Studio 2015</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: No</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: r 1.10</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.15</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA 9.0  /  CUDNN 7.2.1</li>\n<li><strong>GPU model and memory</strong>: 1080Ti / 11G</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>I trained a <code>graph.pb</code> file with python \uff0c i want to Exporting trained TensorFlow models to C++\uff0c<br>\nI refer to some code on github, but still can't successfully import trained models using C++.Using the MNIST data.</p>\n<pre><code>TF_Graph* LoadGraphDef( const char* file )\n\t{\n\t\tif (file == nullptr)\n\t\t{\n\t\t\treturn nullptr;\n\t\t}\n\n\t\tTF_Buffer* buffer = ReadBufferFromFile( file );\n\t\tif (buffer == nullptr)\n\t\t{\n\t\t\treturn nullptr;\n\t\t}\n\n\t\tTF_Graph* graph = TF_NewGraph();\n\t\tTF_Status* status = TF_NewStatus();\n\t\tTF_ImportGraphDefOptions* opts = TF_NewImportGraphDefOptions();\n\n\t\tTF_GraphImportGraphDef( graph, buffer, opts, status );\n\t\tTF_DeleteImportGraphDefOptions( opts );\n\t\tTF_DeleteBuffer( buffer );\n\n\t\tif (TF_GetCode( status ) != TF_OK)\n\t\t{\n\t\t\tTF_DeleteGraph( graph );\n\t\t\tgraph = nullptr;\n\t\t}\n\n\t\tTF_DeleteStatus( status );\n\n\t\treturn graph;\n\t}\n\nTF_Tensor* CreateTensor( TF_DataType data_type,\n\t\tconst std::int64_t* dims, std::size_t num_dims,\n\t\tconst void* data, std::size_t len )\n\t{\n\t\tif (dims == nullptr || data == nullptr)\n\t\t{\n\t\t\treturn nullptr;\n\t\t}\n\t\tTF_Tensor* tensor = TF_AllocateTensor( data_type, dims, static_cast&lt;int&gt;(num_dims), len );\n\t\tif (tensor == nullptr)\n\t\t{\n\t\t\treturn nullptr;\n\t\t}\n\t\tvoid* tensor_data = TF_TensorData( tensor );\n\t\tif (tensor_data == nullptr)\n\t\t{\n\t\t\tTF_DeleteTensor( tensor );\n\t\t\treturn nullptr;\n\t\t}\n\t\tstd::memcpy( tensor_data, data, std::min( len, TF_TensorByteSize( tensor ) ) );\n\n\t\treturn tensor;\n\t}\n</code></pre>\n<pre><code>\tTF_Graph* graph = tf_utils::LoadGraphDef( \"graph.pb\" );\n\tif (graph == nullptr)\n\t{\n\t\tstd::cout &lt;&lt; \"Can't load graph\" &lt;&lt; std::endl;\n\t\treturn 1;\n\t}\n\tTF_Output input_op = { TF_GraphOperationByName( graph, \"input\" ), 0 };\n\tif (input_op.oper == nullptr)\n\t{\n\t\tstd::cout &lt;&lt; \"Can't init input_op\" &lt;&lt; std::endl;\n\t\treturn 2;\n\t}\n\tconst std::vector&lt;std::int64_t&gt; input_dims = { 1, 784 };\n\tconst std::vector&lt;float&gt; input_vals = {\n\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 223, 255, 255, 223, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 223, 255, 255, 255, 255, 255, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 255, 255, 255, 255, 255, 255, 151, 0, 72, 223, 223, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 255, 255, 255, 167, 8, 0, 0, 0, 96, 239, 255, 255, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 223, 255, 255, 255, 255, 0, 0, 0, 0, 104, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 255, 255, 255, 255, 183, 0, 0, 72, 223, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 223, 96, 0, 0, 0, 231, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 72, 255, 255, 255, 255, 151, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 255, 255, 255, 0, 0, 0, 96, 239, 255, 255, 255, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 255, 255, 167, 0, 0, 128, 255, 255, 255, 255, 151, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 8, 0, 104, 255, 255, 255, 255, 151, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 231, 255, 255, 183, 8, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 255, 255, 255, 8, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 247, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 255, 255, 255, 255, 255, 255, 151, 0, 0, 0, 0, 0, 0, 247, 255, 255, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 255, 255, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 255, 255, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0\n\t};\n\n\tTF_Tensor* input_tensor = tf_utils::CreateTensor( TF_FLOAT,\n\t\tinput_dims.data(), input_dims.size(),\n\t\tinput_vals.data(), input_vals.size() * sizeof( float ) );\n\n\tTF_Output out_op = { TF_GraphOperationByName( graph, \"output\" ), 0 };\n\tif (out_op.oper == nullptr)\n\t{\n\t\tstd::cout &lt;&lt; \"Can't init out_op\" &lt;&lt; std::endl;\n\t\treturn 3;\n\t}\n</code></pre>\n<p>input_vals is the array corresponding to the minist picture, I want to know how <code>TF_AllocateTensor( data_type, dims, static_cast&lt;int&gt;(num_dims), len )</code> should be used and  what <code>dims</code> and <code>static_cast&lt;int&gt;(num_dims)</code> stand for?</p>\n<p><a href=\"https://github.com/taotaolin/tensorflow_test/\">This link</a> Detailed partial code</p>", "body_text": "System information\n\n**Have I written custom code **: NO\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): win7 X64    Visual Studio 2015\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: No\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): r 1.10\nPython version: 3.6\nBazel version (if compiling from source): 0.15\nCUDA/cuDNN version: CUDA 9.0  /  CUDNN 7.2.1\nGPU model and memory: 1080Ti / 11G\nExact command to reproduce:\n\nI trained a graph.pb file with python \uff0c i want to Exporting trained TensorFlow models to C++\uff0c\nI refer to some code on github, but still can't successfully import trained models using C++.Using the MNIST data.\nTF_Graph* LoadGraphDef( const char* file )\n\t{\n\t\tif (file == nullptr)\n\t\t{\n\t\t\treturn nullptr;\n\t\t}\n\n\t\tTF_Buffer* buffer = ReadBufferFromFile( file );\n\t\tif (buffer == nullptr)\n\t\t{\n\t\t\treturn nullptr;\n\t\t}\n\n\t\tTF_Graph* graph = TF_NewGraph();\n\t\tTF_Status* status = TF_NewStatus();\n\t\tTF_ImportGraphDefOptions* opts = TF_NewImportGraphDefOptions();\n\n\t\tTF_GraphImportGraphDef( graph, buffer, opts, status );\n\t\tTF_DeleteImportGraphDefOptions( opts );\n\t\tTF_DeleteBuffer( buffer );\n\n\t\tif (TF_GetCode( status ) != TF_OK)\n\t\t{\n\t\t\tTF_DeleteGraph( graph );\n\t\t\tgraph = nullptr;\n\t\t}\n\n\t\tTF_DeleteStatus( status );\n\n\t\treturn graph;\n\t}\n\nTF_Tensor* CreateTensor( TF_DataType data_type,\n\t\tconst std::int64_t* dims, std::size_t num_dims,\n\t\tconst void* data, std::size_t len )\n\t{\n\t\tif (dims == nullptr || data == nullptr)\n\t\t{\n\t\t\treturn nullptr;\n\t\t}\n\t\tTF_Tensor* tensor = TF_AllocateTensor( data_type, dims, static_cast<int>(num_dims), len );\n\t\tif (tensor == nullptr)\n\t\t{\n\t\t\treturn nullptr;\n\t\t}\n\t\tvoid* tensor_data = TF_TensorData( tensor );\n\t\tif (tensor_data == nullptr)\n\t\t{\n\t\t\tTF_DeleteTensor( tensor );\n\t\t\treturn nullptr;\n\t\t}\n\t\tstd::memcpy( tensor_data, data, std::min( len, TF_TensorByteSize( tensor ) ) );\n\n\t\treturn tensor;\n\t}\n\n\tTF_Graph* graph = tf_utils::LoadGraphDef( \"graph.pb\" );\n\tif (graph == nullptr)\n\t{\n\t\tstd::cout << \"Can't load graph\" << std::endl;\n\t\treturn 1;\n\t}\n\tTF_Output input_op = { TF_GraphOperationByName( graph, \"input\" ), 0 };\n\tif (input_op.oper == nullptr)\n\t{\n\t\tstd::cout << \"Can't init input_op\" << std::endl;\n\t\treturn 2;\n\t}\n\tconst std::vector<std::int64_t> input_dims = { 1, 784 };\n\tconst std::vector<float> input_vals = {\n\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 223, 255, 255, 223, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 223, 255, 255, 255, 255, 255, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 255, 255, 255, 255, 255, 255, 151, 0, 72, 223, 223, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 255, 255, 255, 167, 8, 0, 0, 0, 96, 239, 255, 255, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 223, 255, 255, 255, 255, 0, 0, 0, 0, 104, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 255, 255, 255, 255, 183, 0, 0, 72, 223, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 223, 96, 0, 0, 0, 231, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 72, 255, 255, 255, 255, 151, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 255, 255, 255, 0, 0, 0, 96, 239, 255, 255, 255, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 255, 255, 167, 0, 0, 128, 255, 255, 255, 255, 151, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 8, 0, 104, 255, 255, 255, 255, 151, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 231, 255, 255, 183, 8, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 255, 255, 255, 8, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 247, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 255, 255, 255, 255, 255, 255, 151, 0, 0, 0, 0, 0, 0, 247, 255, 255, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 255, 255, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 255, 255, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0\n\t};\n\n\tTF_Tensor* input_tensor = tf_utils::CreateTensor( TF_FLOAT,\n\t\tinput_dims.data(), input_dims.size(),\n\t\tinput_vals.data(), input_vals.size() * sizeof( float ) );\n\n\tTF_Output out_op = { TF_GraphOperationByName( graph, \"output\" ), 0 };\n\tif (out_op.oper == nullptr)\n\t{\n\t\tstd::cout << \"Can't init out_op\" << std::endl;\n\t\treturn 3;\n\t}\n\ninput_vals is the array corresponding to the minist picture, I want to know how TF_AllocateTensor( data_type, dims, static_cast<int>(num_dims), len ) should be used and  what dims and static_cast<int>(num_dims) stand for?\nThis link Detailed partial code", "body": "\r\n### System information\r\n- **Have I written custom code **: NO\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: win7 X64    Visual Studio 2015\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: No\r\n- **TensorFlow installed from (source or binary)**: source \r\n- **TensorFlow version (use command below)**: r 1.10\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: 0.15\r\n- **CUDA/cuDNN version**: CUDA 9.0  /  CUDNN 7.2.1\r\n- **GPU model and memory**: 1080Ti / 11G\r\n- **Exact command to reproduce**:\r\n\r\nI trained a `graph.pb` file with python \uff0c i want to Exporting trained TensorFlow models to C++\uff0c\r\nI refer to some code on github, but still can't successfully import trained models using C++.Using the MNIST data.\r\n\r\n```\r\nTF_Graph* LoadGraphDef( const char* file )\r\n\t{\r\n\t\tif (file == nullptr)\r\n\t\t{\r\n\t\t\treturn nullptr;\r\n\t\t}\r\n\r\n\t\tTF_Buffer* buffer = ReadBufferFromFile( file );\r\n\t\tif (buffer == nullptr)\r\n\t\t{\r\n\t\t\treturn nullptr;\r\n\t\t}\r\n\r\n\t\tTF_Graph* graph = TF_NewGraph();\r\n\t\tTF_Status* status = TF_NewStatus();\r\n\t\tTF_ImportGraphDefOptions* opts = TF_NewImportGraphDefOptions();\r\n\r\n\t\tTF_GraphImportGraphDef( graph, buffer, opts, status );\r\n\t\tTF_DeleteImportGraphDefOptions( opts );\r\n\t\tTF_DeleteBuffer( buffer );\r\n\r\n\t\tif (TF_GetCode( status ) != TF_OK)\r\n\t\t{\r\n\t\t\tTF_DeleteGraph( graph );\r\n\t\t\tgraph = nullptr;\r\n\t\t}\r\n\r\n\t\tTF_DeleteStatus( status );\r\n\r\n\t\treturn graph;\r\n\t}\r\n\r\nTF_Tensor* CreateTensor( TF_DataType data_type,\r\n\t\tconst std::int64_t* dims, std::size_t num_dims,\r\n\t\tconst void* data, std::size_t len )\r\n\t{\r\n\t\tif (dims == nullptr || data == nullptr)\r\n\t\t{\r\n\t\t\treturn nullptr;\r\n\t\t}\r\n\t\tTF_Tensor* tensor = TF_AllocateTensor( data_type, dims, static_cast<int>(num_dims), len );\r\n\t\tif (tensor == nullptr)\r\n\t\t{\r\n\t\t\treturn nullptr;\r\n\t\t}\r\n\t\tvoid* tensor_data = TF_TensorData( tensor );\r\n\t\tif (tensor_data == nullptr)\r\n\t\t{\r\n\t\t\tTF_DeleteTensor( tensor );\r\n\t\t\treturn nullptr;\r\n\t\t}\r\n\t\tstd::memcpy( tensor_data, data, std::min( len, TF_TensorByteSize( tensor ) ) );\r\n\r\n\t\treturn tensor;\r\n\t}\r\n```\r\n\r\n```\r\n\tTF_Graph* graph = tf_utils::LoadGraphDef( \"graph.pb\" );\r\n\tif (graph == nullptr)\r\n\t{\r\n\t\tstd::cout << \"Can't load graph\" << std::endl;\r\n\t\treturn 1;\r\n\t}\r\n\tTF_Output input_op = { TF_GraphOperationByName( graph, \"input\" ), 0 };\r\n\tif (input_op.oper == nullptr)\r\n\t{\r\n\t\tstd::cout << \"Can't init input_op\" << std::endl;\r\n\t\treturn 2;\r\n\t}\r\n\tconst std::vector<std::int64_t> input_dims = { 1, 784 };\r\n\tconst std::vector<float> input_vals = {\r\n\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 223, 255, 255, 223, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 223, 255, 255, 255, 255, 255, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 255, 255, 255, 255, 255, 255, 151, 0, 72, 223, 223, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 255, 255, 255, 167, 8, 0, 0, 0, 96, 239, 255, 255, 247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 223, 255, 255, 255, 255, 0, 0, 0, 0, 104, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 255, 255, 255, 255, 183, 0, 0, 72, 223, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 223, 96, 0, 0, 0, 231, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 72, 255, 255, 255, 255, 151, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 255, 255, 255, 0, 0, 0, 96, 239, 255, 255, 255, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 255, 255, 167, 0, 0, 128, 255, 255, 255, 255, 151, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 8, 0, 104, 255, 255, 255, 255, 151, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 231, 255, 255, 183, 8, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 255, 255, 255, 8, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 247, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 255, 255, 255, 255, 255, 255, 151, 0, 0, 0, 0, 0, 0, 247, 255, 255, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 255, 255, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 255, 255, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0\r\n\t};\r\n\r\n\tTF_Tensor* input_tensor = tf_utils::CreateTensor( TF_FLOAT,\r\n\t\tinput_dims.data(), input_dims.size(),\r\n\t\tinput_vals.data(), input_vals.size() * sizeof( float ) );\r\n\r\n\tTF_Output out_op = { TF_GraphOperationByName( graph, \"output\" ), 0 };\r\n\tif (out_op.oper == nullptr)\r\n\t{\r\n\t\tstd::cout << \"Can't init out_op\" << std::endl;\r\n\t\treturn 3;\r\n\t}\r\n```\r\ninput_vals is the array corresponding to the minist picture, I want to know how `TF_AllocateTensor( data_type, dims, static_cast<int>(num_dims), len )` should be used and  what `dims` and `static_cast<int>(num_dims)` stand for?\r\n\r\n\r\n[This link](https://github.com/taotaolin/tensorflow_test/) Detailed partial code"}