{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/372561365", "html_url": "https://github.com/tensorflow/tensorflow/pull/17545#issuecomment-372561365", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17545", "id": 372561365, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjU2MTM2NQ==", "user": {"login": "shoyer", "id": 1217238, "node_id": "MDQ6VXNlcjEyMTcyMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoyer", "html_url": "https://github.com/shoyer", "followers_url": "https://api.github.com/users/shoyer/followers", "following_url": "https://api.github.com/users/shoyer/following{/other_user}", "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions", "organizations_url": "https://api.github.com/users/shoyer/orgs", "repos_url": "https://api.github.com/users/shoyer/repos", "events_url": "https://api.github.com/users/shoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/shoyer/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-13T06:34:53Z", "updated_at": "2018-03-13T06:34:53Z", "author_association": "MEMBER", "body_html": "<p>This needs to be slightly more complicated because we can't safely cast every other type to a Dimension, only integers/None.</p>\n<p>For example, currently Tensor + Dimension -&gt; Tensor:</p>\n<pre><code>&gt;&gt;&gt; tf.constant(1) + tf.Dimension(2)\n&lt;tf.Tensor 'add:0' shape=() dtype=int32&gt;\n</code></pre>\n<p>This existing behavior would break with this patch.</p>\n<p>On the other hand, Dimension + Tensor is currently an error. But it should probably return a Tensor instead (at least if the Dimension has known size).</p>\n<p>To fix this, special methods like <code>__add__</code> and <code>__radd__</code> need to return <code>NotImplemented</code> when they encounter a type they don't recognize, instead of trying to cast everything to a Dimension. Something like:</p>\n<pre><code>def __add__(self, other):\n  if other is not None and not isinstance(other, int):\n    return NotImplemented\n  # existing implementation\n</code></pre>", "body_text": "This needs to be slightly more complicated because we can't safely cast every other type to a Dimension, only integers/None.\nFor example, currently Tensor + Dimension -> Tensor:\n>>> tf.constant(1) + tf.Dimension(2)\n<tf.Tensor 'add:0' shape=() dtype=int32>\n\nThis existing behavior would break with this patch.\nOn the other hand, Dimension + Tensor is currently an error. But it should probably return a Tensor instead (at least if the Dimension has known size).\nTo fix this, special methods like __add__ and __radd__ need to return NotImplemented when they encounter a type they don't recognize, instead of trying to cast everything to a Dimension. Something like:\ndef __add__(self, other):\n  if other is not None and not isinstance(other, int):\n    return NotImplemented\n  # existing implementation", "body": "This needs to be slightly more complicated because we can't safely cast every other type to a Dimension, only integers/None.\r\n\r\nFor example, currently Tensor + Dimension -> Tensor:\r\n```\r\n>>> tf.constant(1) + tf.Dimension(2)\r\n<tf.Tensor 'add:0' shape=() dtype=int32>\r\n```\r\nThis existing behavior would break with this patch.\r\n\r\nOn the other hand, Dimension + Tensor is currently an error. But it should probably return a Tensor instead (at least if the Dimension has known size).\r\n\r\nTo fix this, special methods like `__add__` and `__radd__` need to return `NotImplemented` when they encounter a type they don't recognize, instead of trying to cast everything to a Dimension. Something like:\r\n```\r\ndef __add__(self, other):\r\n  if other is not None and not isinstance(other, int):\r\n    return NotImplemented\r\n  # existing implementation\r\n```"}