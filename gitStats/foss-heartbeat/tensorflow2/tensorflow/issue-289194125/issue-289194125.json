{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16186", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16186/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16186/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16186/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16186", "id": 289194125, "node_id": "MDU6SXNzdWUyODkxOTQxMjU=", "number": 16186, "title": "A bug when applying MultiRNNCell?", "user": {"login": "BruceChen034020", "id": 29891885, "node_id": "MDQ6VXNlcjI5ODkxODg1", "avatar_url": "https://avatars1.githubusercontent.com/u/29891885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BruceChen034020", "html_url": "https://github.com/BruceChen034020", "followers_url": "https://api.github.com/users/BruceChen034020/followers", "following_url": "https://api.github.com/users/BruceChen034020/following{/other_user}", "gists_url": "https://api.github.com/users/BruceChen034020/gists{/gist_id}", "starred_url": "https://api.github.com/users/BruceChen034020/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BruceChen034020/subscriptions", "organizations_url": "https://api.github.com/users/BruceChen034020/orgs", "repos_url": "https://api.github.com/users/BruceChen034020/repos", "events_url": "https://api.github.com/users/BruceChen034020/events{/privacy}", "received_events_url": "https://api.github.com/users/BruceChen034020/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-17T09:23:15Z", "updated_at": "2018-03-02T10:16:24Z", "closed_at": "2018-01-30T23:31:09Z", "author_association": "NONE", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: This code is very similar to an official example</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip install tensorflow</li>\n<li><strong>TensorFlow version (use command below)</strong>: b'unknown' 1.4.0</li>\n<li><strong>Python version</strong>: Python 3.5.2 :: Anaconda 4.2.0 (64-bit)</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>tf.nn.MultiRNNCell sometimes doesn't work.</p>\n<p>It raises an issue like this:<br>\nValueError: Dimensions must be equal, but are 64 and 96 for 'lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_1' (op: 'MatMul') with input shapes: [128,64], [96,128].</p>\n<h3>Source code / logs</h3>\n<p>import tensorflow as tf<br>\nimport numpy as np</p>\n<p>hidden_layer_size = 32<br>\nembed = tf.zeros((128, 6, 64), dtype=tf.float32)</p>\n<p>num_LSTM_layers = 2<br>\nwith tf.variable_scope(\"lstm\"):</p>\n<pre><code>lstm_cell = tf.contrib.rnn.BasicLSTMCell(hidden_layer_size, forget_bias=1.0)\ncell = tf.contrib.rnn.MultiRNNCell(cells=[lstm_cell]*num_LSTM_layers, state_is_tuple=True)\noutputs, states = tf.nn.dynamic_rnn(cell, embed, dtype=tf.float32)\n</code></pre>\n<p>Error:<br>\nValueError: Dimensions must be equal, but are 64 and 96 for 'lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_1' (op: 'MatMul') with input shapes: [128,64], [96,128].</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): This code is very similar to an official example\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nTensorFlow installed from (source or binary): pip install tensorflow\nTensorFlow version (use command below): b'unknown' 1.4.0\nPython version: Python 3.5.2 :: Anaconda 4.2.0 (64-bit)\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\ntf.nn.MultiRNNCell sometimes doesn't work.\nIt raises an issue like this:\nValueError: Dimensions must be equal, but are 64 and 96 for 'lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_1' (op: 'MatMul') with input shapes: [128,64], [96,128].\nSource code / logs\nimport tensorflow as tf\nimport numpy as np\nhidden_layer_size = 32\nembed = tf.zeros((128, 6, 64), dtype=tf.float32)\nnum_LSTM_layers = 2\nwith tf.variable_scope(\"lstm\"):\nlstm_cell = tf.contrib.rnn.BasicLSTMCell(hidden_layer_size, forget_bias=1.0)\ncell = tf.contrib.rnn.MultiRNNCell(cells=[lstm_cell]*num_LSTM_layers, state_is_tuple=True)\noutputs, states = tf.nn.dynamic_rnn(cell, embed, dtype=tf.float32)\n\nError:\nValueError: Dimensions must be equal, but are 64 and 96 for 'lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_1' (op: 'MatMul') with input shapes: [128,64], [96,128].", "body": "\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: This code is very similar to an official example\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **TensorFlow installed from (source or binary)**: pip install tensorflow\r\n- **TensorFlow version (use command below)**: b'unknown' 1.4.0\r\n- **Python version**: Python 3.5.2 :: Anaconda 4.2.0 (64-bit)\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\ntf.nn.MultiRNNCell sometimes doesn't work.\r\n\r\nIt raises an issue like this:\r\nValueError: Dimensions must be equal, but are 64 and 96 for 'lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_1' (op: 'MatMul') with input shapes: [128,64], [96,128].\r\n\r\n### Source code / logs\r\n  import tensorflow as tf\r\n  import numpy as np\r\n\r\n  hidden_layer_size = 32\r\n  embed = tf.zeros((128, 6, 64), dtype=tf.float32)\r\n\r\n  num_LSTM_layers = 2\r\n  with tf.variable_scope(\"lstm\"):\r\n    \r\n    lstm_cell = tf.contrib.rnn.BasicLSTMCell(hidden_layer_size, forget_bias=1.0)\r\n    cell = tf.contrib.rnn.MultiRNNCell(cells=[lstm_cell]*num_LSTM_layers, state_is_tuple=True)\r\n    outputs, states = tf.nn.dynamic_rnn(cell, embed, dtype=tf.float32)\r\n   \r\nError:\r\nValueError: Dimensions must be equal, but are 64 and 96 for 'lstm/rnn/while/rnn/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_1' (op: 'MatMul') with input shapes: [128,64], [96,128].\r\n\r\n"}