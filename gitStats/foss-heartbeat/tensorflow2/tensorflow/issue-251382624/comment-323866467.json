{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/323866467", "html_url": "https://github.com/tensorflow/tensorflow/pull/12407#issuecomment-323866467", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12407", "id": 323866467, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzg2NjQ2Nw==", "user": {"login": "keveman", "id": 229914, "node_id": "MDQ6VXNlcjIyOTkxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/229914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keveman", "html_url": "https://github.com/keveman", "followers_url": "https://api.github.com/users/keveman/followers", "following_url": "https://api.github.com/users/keveman/following{/other_user}", "gists_url": "https://api.github.com/users/keveman/gists{/gist_id}", "starred_url": "https://api.github.com/users/keveman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keveman/subscriptions", "organizations_url": "https://api.github.com/users/keveman/orgs", "repos_url": "https://api.github.com/users/keveman/repos", "events_url": "https://api.github.com/users/keveman/events{/privacy}", "received_events_url": "https://api.github.com/users/keveman/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-21T22:12:44Z", "updated_at": "2017-08-21T22:12:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5453737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tatatodd\">@tatatodd</a> for the response. I did notice that code before I embarked on this. However, we wanted to be able to call this from Python, so I needed going from GraphDef -&gt; SessionModule. Actually, the better piece of code that I can reuse is a combination of <code>InitGraph</code> and <code>CompileGraph</code> in your <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/aot/compile.h\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/aot/compile.h</a>. Also, the BUILD visibility of the various components is not suitable for making tensorflow a git submodule under a different project. Here is what would be ideal for our (Cerebras) use case:</p>\n<pre><code>with tf.Graph().as_default() as g:\n  a = tf.placeholder(tf.int32, shape=[2, 2])\n  b = tf.placeholder(tf.int32, shape=[2])\n  c = tf.add(a, b, name=\"c\")\n# xla_graph would be a xla::SessionModule\nxla_graph = tf2xla.GraphDefToXla(g.as_graph_def(), [\"c:0\"])\n</code></pre>\n<p>Now, <code>tf2xla</code> can be something that we build on our own using the stock <code>tensorflow</code> repo as a git submodule, or if you think this is going to be more generally useful, this can be in <code>tf</code> module itself. The former would require changing the visibility of some of the libraries to <code>//visibility:public</code>. Either way, I am willing to do the necessary work. But please let me know what you think the best approach is.</p>", "body_text": "Thanks @tatatodd for the response. I did notice that code before I embarked on this. However, we wanted to be able to call this from Python, so I needed going from GraphDef -> SessionModule. Actually, the better piece of code that I can reuse is a combination of InitGraph and CompileGraph in your https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/aot/compile.h. Also, the BUILD visibility of the various components is not suitable for making tensorflow a git submodule under a different project. Here is what would be ideal for our (Cerebras) use case:\nwith tf.Graph().as_default() as g:\n  a = tf.placeholder(tf.int32, shape=[2, 2])\n  b = tf.placeholder(tf.int32, shape=[2])\n  c = tf.add(a, b, name=\"c\")\n# xla_graph would be a xla::SessionModule\nxla_graph = tf2xla.GraphDefToXla(g.as_graph_def(), [\"c:0\"])\n\nNow, tf2xla can be something that we build on our own using the stock tensorflow repo as a git submodule, or if you think this is going to be more generally useful, this can be in tf module itself. The former would require changing the visibility of some of the libraries to //visibility:public. Either way, I am willing to do the necessary work. But please let me know what you think the best approach is.", "body": "Thanks @tatatodd for the response. I did notice that code before I embarked on this. However, we wanted to be able to call this from Python, so I needed going from GraphDef -> SessionModule. Actually, the better piece of code that I can reuse is a combination of `InitGraph` and `CompileGraph` in your https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/aot/compile.h. Also, the BUILD visibility of the various components is not suitable for making tensorflow a git submodule under a different project. Here is what would be ideal for our (Cerebras) use case:\r\n\r\n    with tf.Graph().as_default() as g:\r\n      a = tf.placeholder(tf.int32, shape=[2, 2])\r\n      b = tf.placeholder(tf.int32, shape=[2])\r\n      c = tf.add(a, b, name=\"c\")\r\n    # xla_graph would be a xla::SessionModule\r\n    xla_graph = tf2xla.GraphDefToXla(g.as_graph_def(), [\"c:0\"])\r\n\r\nNow, `tf2xla` can be something that we build on our own using the stock `tensorflow` repo as a git submodule, or if you think this is going to be more generally useful, this can be in `tf` module itself. The former would require changing the visibility of some of the libraries to `//visibility:public`. Either way, I am willing to do the necessary work. But please let me know what you think the best approach is.\r\n"}