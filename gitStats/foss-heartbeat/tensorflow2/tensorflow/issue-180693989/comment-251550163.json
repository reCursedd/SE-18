{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/251550163", "html_url": "https://github.com/tensorflow/tensorflow/issues/4732#issuecomment-251550163", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4732", "id": 251550163, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTU1MDE2Mw==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-05T00:18:08Z", "updated_at": "2016-10-05T00:23:36Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Ah, good point, increasing capacity, number of threads, and adding <code>time.sleep</code> in main thread to preload the examples makes <code>preloaded_reader</code> example as fast as feed_dict one.</p>\n<p><a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/yaroslavvb/stuff/commit/226099cd883df5aa5b08483581d66960ada90e22/hovercard\" href=\"https://github.com/yaroslavvb/stuff/commit/226099cd883df5aa5b08483581d66960ada90e22\">yaroslavvb/stuff@<tt>226099c</tt></a></p>\n<p>Note that simply increasing capacity/number of threads didn't help. I suspect Python just ran the main queue until it ran out of examples, and went back to slow behavior with blocking. Possibly this is specific to tiny models like MNIST -- when the main computation loop takes 1-2ms, then GIL is only released for 2ms, and  there's not enough time for the data-preloading threads to pre-empt the computation thread, so that thread will always be starved of examples</p>\n<p>Also, seems that there's no way to increase number of threads in <code>slice_input_producer</code></p>", "body_text": "Ah, good point, increasing capacity, number of threads, and adding time.sleep in main thread to preload the examples makes preloaded_reader example as fast as feed_dict one.\nyaroslavvb/stuff@226099c\nNote that simply increasing capacity/number of threads didn't help. I suspect Python just ran the main queue until it ran out of examples, and went back to slow behavior with blocking. Possibly this is specific to tiny models like MNIST -- when the main computation loop takes 1-2ms, then GIL is only released for 2ms, and  there's not enough time for the data-preloading threads to pre-empt the computation thread, so that thread will always be starved of examples\nAlso, seems that there's no way to increase number of threads in slice_input_producer", "body": "Ah, good point, increasing capacity, number of threads, and adding `time.sleep` in main thread to preload the examples makes `preloaded_reader` example as fast as feed_dict one.\n\nhttps://github.com/yaroslavvb/stuff/commit/226099cd883df5aa5b08483581d66960ada90e22\n\nNote that simply increasing capacity/number of threads didn't help. I suspect Python just ran the main queue until it ran out of examples, and went back to slow behavior with blocking. Possibly this is specific to tiny models like MNIST -- when the main computation loop takes 1-2ms, then GIL is only released for 2ms, and  there's not enough time for the data-preloading threads to pre-empt the computation thread, so that thread will always be starved of examples\n\nAlso, seems that there's no way to increase number of threads in `slice_input_producer`\n"}