{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/343340503", "html_url": "https://github.com/tensorflow/tensorflow/issues/14359#issuecomment-343340503", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14359", "id": 343340503, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzM0MDUwMw==", "user": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-10T00:48:59Z", "updated_at": "2017-11-10T00:48:59Z", "author_association": "MEMBER", "body_html": "<p>Your <code>Lambda</code> layer unfortunately breaks the model topology. So when you're defining your model, it's not taking into account the layers that came before <code>c</code>, because <code>c</code> is not being tracked as an input to your <code>Lambda</code> layer. Here's how to do it correctly in the general case:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">func</span>(<span class=\"pl-smi\">inputs</span>):\n    <span class=\"pl-k\">return</span> tf.add(inputs[<span class=\"pl-c1\">0</span>], inputs[<span class=\"pl-c1\">1</span>])\n\na <span class=\"pl-k\">=</span> tf.keras.Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">64</span>,))\nb <span class=\"pl-k\">=</span> tf.keras.layers.Dense(<span class=\"pl-c1\">5</span>)(a)\nc <span class=\"pl-k\">=</span> tf.keras.layers.Dense(<span class=\"pl-c1\">5</span>)(a)\nd <span class=\"pl-k\">=</span> tf.keras.layers.Lambda(func)([b, c])\nmodel <span class=\"pl-k\">=</span> tf.keras.models.Model(a, d)\nmodel.trainable_weights</pre></div>\n<p>But really in your case you could do:</p>\n<div class=\"highlight highlight-source-python\"><pre>a <span class=\"pl-k\">=</span> tf.keras.Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">64</span>,))\nb <span class=\"pl-k\">=</span> tf.keras.layers.Dense(<span class=\"pl-c1\">5</span>)(a)\nc <span class=\"pl-k\">=</span> tf.keras.layers.Dense(<span class=\"pl-c1\">5</span>)(a)\nd <span class=\"pl-k\">=</span> tf.keras.layers.add([b, c])\nmodel <span class=\"pl-k\">=</span> tf.keras.models.Model(a, d)\nmodel.trainable_weights</pre></div>", "body_text": "Your Lambda layer unfortunately breaks the model topology. So when you're defining your model, it's not taking into account the layers that came before c, because c is not being tracked as an input to your Lambda layer. Here's how to do it correctly in the general case:\ndef func(inputs):\n    return tf.add(inputs[0], inputs[1])\n\na = tf.keras.Input(shape=(64,))\nb = tf.keras.layers.Dense(5)(a)\nc = tf.keras.layers.Dense(5)(a)\nd = tf.keras.layers.Lambda(func)([b, c])\nmodel = tf.keras.models.Model(a, d)\nmodel.trainable_weights\nBut really in your case you could do:\na = tf.keras.Input(shape=(64,))\nb = tf.keras.layers.Dense(5)(a)\nc = tf.keras.layers.Dense(5)(a)\nd = tf.keras.layers.add([b, c])\nmodel = tf.keras.models.Model(a, d)\nmodel.trainable_weights", "body": "Your `Lambda` layer unfortunately breaks the model topology. So when you're defining your model, it's not taking into account the layers that came before `c`, because `c` is not being tracked as an input to your `Lambda` layer. Here's how to do it correctly in the general case:\r\n\r\n```python\r\ndef func(inputs):\r\n    return tf.add(inputs[0], inputs[1])\r\n\r\na = tf.keras.Input(shape=(64,))\r\nb = tf.keras.layers.Dense(5)(a)\r\nc = tf.keras.layers.Dense(5)(a)\r\nd = tf.keras.layers.Lambda(func)([b, c])\r\nmodel = tf.keras.models.Model(a, d)\r\nmodel.trainable_weights\r\n```\r\n\r\nBut really in your case you could do:\r\n\r\n```python\r\na = tf.keras.Input(shape=(64,))\r\nb = tf.keras.layers.Dense(5)(a)\r\nc = tf.keras.layers.Dense(5)(a)\r\nd = tf.keras.layers.add([b, c])\r\nmodel = tf.keras.models.Model(a, d)\r\nmodel.trainable_weights\r\n```"}