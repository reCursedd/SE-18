{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14359", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14359/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14359/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14359/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14359", "id": 272179775, "node_id": "MDU6SXNzdWUyNzIxNzk3NzU=", "number": 14359, "title": "Keras model.trainable_weights does not return all trainable weights", "user": {"login": "humcasma", "id": 1998537, "node_id": "MDQ6VXNlcjE5OTg1Mzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1998537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humcasma", "html_url": "https://github.com/humcasma", "followers_url": "https://api.github.com/users/humcasma/followers", "following_url": "https://api.github.com/users/humcasma/following{/other_user}", "gists_url": "https://api.github.com/users/humcasma/gists{/gist_id}", "starred_url": "https://api.github.com/users/humcasma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humcasma/subscriptions", "organizations_url": "https://api.github.com/users/humcasma/orgs", "repos_url": "https://api.github.com/users/humcasma/repos", "events_url": "https://api.github.com/users/humcasma/events{/privacy}", "received_events_url": "https://api.github.com/users/humcasma/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-11-08T12:23:58Z", "updated_at": "2017-11-10T00:49:00Z", "closed_at": "2017-11-10T00:48:59Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: YES</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: MacOS 10.12.6</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: BINARY</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.4.0-rc1-11-g130a514 1.4.0</li>\n<li><strong>Python version</strong>: 3.5.4</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When creating a Keras model where two \"towers\" are merged with help of a Lambda layer, not all trainable weights are added to <code>trainable_weights</code>.</p>\n<h3>Source code / logs</h3>\n<p>The code below creates a model with four trainable variables: 2 weights and 2 biases. However, <code>model.trainable_weights</code> returns only one weight and one bias.</p>\n<pre><code>def func(x,y):\n    return tf.add(x,y)\n\na= tf.keras.layers.Input(shape= (64,))\nb = tf.keras.layers.Dense(5)(a)\nc = tf.keras.layers.Dense(5)(a)\nd = tf.keras.layers.Lambda(func, arguments={'y':c})(b)\nmodel = tf.keras.models.Model(a, d)\nmodel.trainable_weights\n</code></pre>\n<p><em>Output</em>:<br>\n<code>[&lt;tf.Variable 'dense/kernel:0' shape=(64, 5) dtype=float32_ref&gt;, &lt;tf.Variable 'dense/bias:0' shape=(5,) dtype=float32_ref&gt;] </code></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): YES\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.12.6\nTensorFlow installed from (source or binary): BINARY\nTensorFlow version (use command below): v1.4.0-rc1-11-g130a514 1.4.0\nPython version: 3.5.4\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nWhen creating a Keras model where two \"towers\" are merged with help of a Lambda layer, not all trainable weights are added to trainable_weights.\nSource code / logs\nThe code below creates a model with four trainable variables: 2 weights and 2 biases. However, model.trainable_weights returns only one weight and one bias.\ndef func(x,y):\n    return tf.add(x,y)\n\na= tf.keras.layers.Input(shape= (64,))\nb = tf.keras.layers.Dense(5)(a)\nc = tf.keras.layers.Dense(5)(a)\nd = tf.keras.layers.Lambda(func, arguments={'y':c})(b)\nmodel = tf.keras.models.Model(a, d)\nmodel.trainable_weights\n\nOutput:\n[<tf.Variable 'dense/kernel:0' shape=(64, 5) dtype=float32_ref>, <tf.Variable 'dense/bias:0' shape=(5,) dtype=float32_ref>]", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: YES\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: MacOS 10.12.6\r\n- **TensorFlow installed from (source or binary)**: BINARY\r\n- **TensorFlow version (use command below)**: v1.4.0-rc1-11-g130a514 1.4.0\r\n- **Python version**: 3.5.4\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nWhen creating a Keras model where two \"towers\" are merged with help of a Lambda layer, not all trainable weights are added to `trainable_weights`.\r\n\r\n### Source code / logs\r\nThe code below creates a model with four trainable variables: 2 weights and 2 biases. However, `model.trainable_weights` returns only one weight and one bias. \r\n\r\n```\r\ndef func(x,y):\r\n    return tf.add(x,y)\r\n\r\na= tf.keras.layers.Input(shape= (64,))\r\nb = tf.keras.layers.Dense(5)(a)\r\nc = tf.keras.layers.Dense(5)(a)\r\nd = tf.keras.layers.Lambda(func, arguments={'y':c})(b)\r\nmodel = tf.keras.models.Model(a, d)\r\nmodel.trainable_weights\r\n```\r\n_Output_:\r\n`[<tf.Variable 'dense/kernel:0' shape=(64, 5) dtype=float32_ref>, <tf.Variable 'dense/bias:0' shape=(5,) dtype=float32_ref>]\r\n`"}