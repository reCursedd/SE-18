{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17176", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17176/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17176/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17176/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17176", "id": 299112398, "node_id": "MDU6SXNzdWUyOTkxMTIzOTg=", "number": 17176, "title": "Feature request: Provide API to test whether a copy of TensorFlow has MKL support", "user": {"login": "frreiss", "id": 12436991, "node_id": "MDQ6VXNlcjEyNDM2OTkx", "avatar_url": "https://avatars1.githubusercontent.com/u/12436991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frreiss", "html_url": "https://github.com/frreiss", "followers_url": "https://api.github.com/users/frreiss/followers", "following_url": "https://api.github.com/users/frreiss/following{/other_user}", "gists_url": "https://api.github.com/users/frreiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/frreiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frreiss/subscriptions", "organizations_url": "https://api.github.com/users/frreiss/orgs", "repos_url": "https://api.github.com/users/frreiss/repos", "events_url": "https://api.github.com/users/frreiss/events{/privacy}", "received_events_url": "https://api.github.com/users/frreiss/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-02-21T20:14:12Z", "updated_at": "2018-03-19T22:50:40Z", "closed_at": "2018-03-17T01:17:28Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Source</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.5.0-9-gc959ec7</li>\n<li><strong>Python version</strong>: 3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.10.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: c++ (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609</li>\n<li><strong>CUDA/cuDNN version</strong>: n/a</li>\n<li><strong>GPU model and memory</strong>: n/a</li>\n<li><strong>Exact command to reproduce</strong>: n/a</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I have built a copy of TensorFlow with MKL-DNN support. The MKL convolution operators work much better with the \"channels_first\" (NCHW) data format. On non-MKL, non-GPU builds, the \"channels_first\" data format does not work for me, because a CPU version of average pooling is not implemented for that data format.</p>\n<p>I would like to have my scripts test whether the current copy of TensorFlow has either MKL or GPU support, and if so, to use the \"channels_first\" data format. I can easily test for GPU support with <code>tf.test.is_built_with_cuda()</code>. However, there does not seem to be a corresponding API to test for MKL-DNN support. Would it be possible to add one?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): Source\nTensorFlow version (use command below): v1.5.0-9-gc959ec7\nPython version: 3.5\nBazel version (if compiling from source): 0.10.0\nGCC/Compiler version (if compiling from source): c++ (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\nExact command to reproduce: n/a\n\nDescribe the problem\nI have built a copy of TensorFlow with MKL-DNN support. The MKL convolution operators work much better with the \"channels_first\" (NCHW) data format. On non-MKL, non-GPU builds, the \"channels_first\" data format does not work for me, because a CPU version of average pooling is not implemented for that data format.\nI would like to have my scripts test whether the current copy of TensorFlow has either MKL or GPU support, and if so, to use the \"channels_first\" data format. I can easily test for GPU support with tf.test.is_built_with_cuda(). However, there does not seem to be a corresponding API to test for MKL-DNN support. Would it be possible to add one?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: Source\r\n- **TensorFlow version (use command below)**: v1.5.0-9-gc959ec7\r\n- **Python version**: 3.5\r\n- **Bazel version (if compiling from source)**: 0.10.0\r\n- **GCC/Compiler version (if compiling from source)**: c++ (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609\r\n- **CUDA/cuDNN version**: n/a\r\n- **GPU model and memory**: n/a\r\n- **Exact command to reproduce**: n/a\r\n\r\n### Describe the problem\r\nI have built a copy of TensorFlow with MKL-DNN support. The MKL convolution operators work much better with the \"channels_first\" (NCHW) data format. On non-MKL, non-GPU builds, the \"channels_first\" data format does not work for me, because a CPU version of average pooling is not implemented for that data format.\r\n\r\nI would like to have my scripts test whether the current copy of TensorFlow has either MKL or GPU support, and if so, to use the \"channels_first\" data format. I can easily test for GPU support with `tf.test.is_built_with_cuda()`. However, there does not seem to be a corresponding API to test for MKL-DNN support. Would it be possible to add one?\r\n"}