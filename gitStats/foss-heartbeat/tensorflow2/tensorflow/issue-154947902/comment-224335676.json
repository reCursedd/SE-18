{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/224335676", "html_url": "https://github.com/tensorflow/tensorflow/issues/2382#issuecomment-224335676", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2382", "id": 224335676, "node_id": "MDEyOklzc3VlQ29tbWVudDIyNDMzNTY3Ng==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-07T16:26:19Z", "updated_at": "2016-06-07T16:26:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=70511\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/girving\">@girving</a>: You can initialize it from a <code>tf.placeholder()</code> and feed a value when you run the variable's initializer op. There's no sugar for it, but something like the following should work:</p>\n<div class=\"highlight highlight-source-python\"><pre>init_val <span class=\"pl-k\">=</span> np.array(<span class=\"pl-c1\">...</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Construct a large numpy array.</span>\ninit_placeholder <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>init_val.shape)\nv <span class=\"pl-k\">=</span> tf.Variable(init_placeholder)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ...</span>\nsess.run(v.initializer, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{init_placeholder: init_val})</pre></div>", "body_text": "@girving: You can initialize it from a tf.placeholder() and feed a value when you run the variable's initializer op. There's no sugar for it, but something like the following should work:\ninit_val = np.array(...)  # Construct a large numpy array.\ninit_placeholder = tf.placeholder(tf.float32, shape=init_val.shape)\nv = tf.Variable(init_placeholder)\n# ...\nsess.run(v.initializer, feed_dict={init_placeholder: init_val})", "body": "@girving: You can initialize it from a `tf.placeholder()` and feed a value when you run the variable's initializer op. There's no sugar for it, but something like the following should work:\n\n``` python\ninit_val = np.array(...)  # Construct a large numpy array.\ninit_placeholder = tf.placeholder(tf.float32, shape=init_val.shape)\nv = tf.Variable(init_placeholder)\n# ...\nsess.run(v.initializer, feed_dict={init_placeholder: init_val})\n```\n"}