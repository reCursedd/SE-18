{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17097", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17097/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17097/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17097/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17097", "id": 298028356, "node_id": "MDU6SXNzdWUyOTgwMjgzNTY=", "number": 17097, "title": "Feature request: complex support in initializers", "user": {"login": "carlthome", "id": 1595907, "node_id": "MDQ6VXNlcjE1OTU5MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1595907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlthome", "html_url": "https://github.com/carlthome", "followers_url": "https://api.github.com/users/carlthome/followers", "following_url": "https://api.github.com/users/carlthome/following{/other_user}", "gists_url": "https://api.github.com/users/carlthome/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlthome/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlthome/subscriptions", "organizations_url": "https://api.github.com/users/carlthome/orgs", "repos_url": "https://api.github.com/users/carlthome/repos", "events_url": "https://api.github.com/users/carlthome/events{/privacy}", "received_events_url": "https://api.github.com/users/carlthome/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-02-17T19:08:36Z", "updated_at": "2018-02-27T10:20:58Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>AFAIK no initializers work with tf.complex64 and tf.complex128 (is there a mathematical reason for this?).</p>\n<p>My current workaround is to call them twice (once for the real part and once for the imaginary), as</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">complex_initializer</span>(<span class=\"pl-smi\">base_initializer</span>):\n    f <span class=\"pl-k\">=</span> base_initializer()\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">initializer</span>(<span class=\"pl-k\">*</span><span class=\"pl-smi\">args</span>, <span class=\"pl-smi\">dtype</span><span class=\"pl-k\">=</span>tf.complex64, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kwargs</span>):\n        real <span class=\"pl-k\">=</span> f(<span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n        imag <span class=\"pl-k\">=</span> f(<span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n        <span class=\"pl-k\">return</span> tf.complex(real, imag)\n\n    <span class=\"pl-k\">return</span> initializer\n\n\ntf.get_variable(\n        <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>my_complex_variable<span class=\"pl-pds\">'</span></span>,\n        <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>],\n        <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.complex64,\n        <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>complex_initializer(tf.random_normal_initializer))</pre></div>\n<p>which seems to work fine so I'm wondering why this isn't built-in already?</p>", "body_text": "AFAIK no initializers work with tf.complex64 and tf.complex128 (is there a mathematical reason for this?).\nMy current workaround is to call them twice (once for the real part and once for the imaginary), as\ndef complex_initializer(base_initializer):\n    f = base_initializer()\n\n    def initializer(*args, dtype=tf.complex64, **kwargs):\n        real = f(*args, **kwargs)\n        imag = f(*args, **kwargs)\n        return tf.complex(real, imag)\n\n    return initializer\n\n\ntf.get_variable(\n        name='my_complex_variable',\n        shape=[1],\n        dtype=tf.complex64,\n        initializer=complex_initializer(tf.random_normal_initializer))\nwhich seems to work fine so I'm wondering why this isn't built-in already?", "body": "AFAIK no initializers work with tf.complex64 and tf.complex128 (is there a mathematical reason for this?).\r\n\r\nMy current workaround is to call them twice (once for the real part and once for the imaginary), as\r\n```py\r\ndef complex_initializer(base_initializer):\r\n    f = base_initializer()\r\n\r\n    def initializer(*args, dtype=tf.complex64, **kwargs):\r\n        real = f(*args, **kwargs)\r\n        imag = f(*args, **kwargs)\r\n        return tf.complex(real, imag)\r\n\r\n    return initializer\r\n\r\n\r\ntf.get_variable(\r\n        name='my_complex_variable',\r\n        shape=[1],\r\n        dtype=tf.complex64,\r\n        initializer=complex_initializer(tf.random_normal_initializer))\r\n```\r\nwhich seems to work fine so I'm wondering why this isn't built-in already?\r\n"}