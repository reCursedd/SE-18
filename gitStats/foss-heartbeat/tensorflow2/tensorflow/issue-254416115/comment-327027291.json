{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/327027291", "html_url": "https://github.com/tensorflow/tensorflow/issues/12733#issuecomment-327027291", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12733", "id": 327027291, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzAyNzI5MQ==", "user": {"login": "RylanSchaeffer", "id": 8942987, "node_id": "MDQ6VXNlcjg5NDI5ODc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8942987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RylanSchaeffer", "html_url": "https://github.com/RylanSchaeffer", "followers_url": "https://api.github.com/users/RylanSchaeffer/followers", "following_url": "https://api.github.com/users/RylanSchaeffer/following{/other_user}", "gists_url": "https://api.github.com/users/RylanSchaeffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/RylanSchaeffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RylanSchaeffer/subscriptions", "organizations_url": "https://api.github.com/users/RylanSchaeffer/orgs", "repos_url": "https://api.github.com/users/RylanSchaeffer/repos", "events_url": "https://api.github.com/users/RylanSchaeffer/events{/privacy}", "received_events_url": "https://api.github.com/users/RylanSchaeffer/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-04T20:57:24Z", "updated_at": "2017-09-04T20:57:24Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=49262\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jart\">@jart</a> , I can see why you think I'm escalating my problem, but there is an issue with TensorFlow's <code>Seq2Seq</code> module - during validation, no <code>Helper</code> subclass resolves the <code>Incompatible shapes</code> error.</p>\n<p>I don't know if the existing helpers should solve this problem or if something new is needed, so this issue can be thought of as either a feature request or a bug. One solution is that <code>GreedyEmbeddingHelper</code>, <code>SampleEmbeddingHelper</code>, etc. should optionally take in the length of the target sequence if known (i.e. during validation) and dynamically ensure that the decoder's output matches the length of the target sequence.</p>\n<p>The simplest solution would be to use <code>ScheduledOutputTrainingHelper</code> with <code>sampling_probability = 1</code>, but this seems to overloads the purpose of the <code>ScheduledOutputTrainingHelper</code> class.</p>\n<p>My point regarding the NMT tutorial is that I believe the tutorial could have the same error if it didn't use a <code>TrainingHelper</code> during validation.</p>\n<p>Please reopen the issue.</p>", "body_text": "@jart , I can see why you think I'm escalating my problem, but there is an issue with TensorFlow's Seq2Seq module - during validation, no Helper subclass resolves the Incompatible shapes error.\nI don't know if the existing helpers should solve this problem or if something new is needed, so this issue can be thought of as either a feature request or a bug. One solution is that GreedyEmbeddingHelper, SampleEmbeddingHelper, etc. should optionally take in the length of the target sequence if known (i.e. during validation) and dynamically ensure that the decoder's output matches the length of the target sequence.\nThe simplest solution would be to use ScheduledOutputTrainingHelper with sampling_probability = 1, but this seems to overloads the purpose of the ScheduledOutputTrainingHelper class.\nMy point regarding the NMT tutorial is that I believe the tutorial could have the same error if it didn't use a TrainingHelper during validation.\nPlease reopen the issue.", "body": "@jart , I can see why you think I'm escalating my problem, but there is an issue with TensorFlow's `Seq2Seq` module - during validation, no `Helper` subclass resolves the `Incompatible shapes` error.\r\n\r\nI don't know if the existing helpers should solve this problem or if something new is needed, so this issue can be thought of as either a feature request or a bug. One solution is that `GreedyEmbeddingHelper`, `SampleEmbeddingHelper`, etc. should optionally take in the length of the target sequence if known (i.e. during validation) and dynamically ensure that the decoder's output matches the length of the target sequence.\r\n\r\nThe simplest solution would be to use `ScheduledOutputTrainingHelper` with `sampling_probability = 1`, but this seems to overloads the purpose of the `ScheduledOutputTrainingHelper` class.\r\n\r\nMy point regarding the NMT tutorial is that I believe the tutorial could have the same error if it didn't use a `TrainingHelper` during validation.\r\n\r\nPlease reopen the issue."}