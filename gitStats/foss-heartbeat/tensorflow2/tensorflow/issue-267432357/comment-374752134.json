{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/374752134", "html_url": "https://github.com/tensorflow/tensorflow/issues/13895#issuecomment-374752134", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13895", "id": 374752134, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDc1MjEzNA==", "user": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-20T20:51:34Z", "updated_at": "2018-03-20T20:51:34Z", "author_association": "MEMBER", "body_html": "<p><code>train_and_evaluate</code> <em>will</em> evaluate after each epoch (or more precisely in intervals you can set yourself). As you say it will also load the checkpoint after each epoch. So I do indeed not understand the problem. From your description I think it would solve your problem just fine, unless there is a performance problem, and I have tried to explain why I don't think performance is an issue here.</p>\n<p>As I explained above, Estimator does make some tradeoffs where it enforces things that are unnecessary in order to ensure that the transition to distributed training will work smoothly. If Estimator is not suitable for your use case (and especially if you do not need distributed training), you should look into tf.keras.Model.</p>\n<p>I do suggest you keep your comments civil, otherwise it will be hard to have a constructive discussion.</p>", "body_text": "train_and_evaluate will evaluate after each epoch (or more precisely in intervals you can set yourself). As you say it will also load the checkpoint after each epoch. So I do indeed not understand the problem. From your description I think it would solve your problem just fine, unless there is a performance problem, and I have tried to explain why I don't think performance is an issue here.\nAs I explained above, Estimator does make some tradeoffs where it enforces things that are unnecessary in order to ensure that the transition to distributed training will work smoothly. If Estimator is not suitable for your use case (and especially if you do not need distributed training), you should look into tf.keras.Model.\nI do suggest you keep your comments civil, otherwise it will be hard to have a constructive discussion.", "body": "`train_and_evaluate` *will* evaluate after each epoch (or more precisely in intervals you can set yourself). As you say it will also load the checkpoint after each epoch. So I do indeed not understand the problem. From your description I think it would solve your problem just fine, unless there is a performance problem, and I have tried to explain why I don't think performance is an issue here. \r\n\r\nAs I explained above, Estimator does make some tradeoffs where it enforces things that are unnecessary in order to ensure that the transition to distributed training will work smoothly. If Estimator is not suitable for your use case (and especially if you do not need distributed training), you should look into tf.keras.Model.\r\n\r\nI do suggest you keep your comments civil, otherwise it will be hard to have a constructive discussion."}