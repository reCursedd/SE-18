{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/396499500", "html_url": "https://github.com/tensorflow/tensorflow/issues/13895#issuecomment-396499500", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13895", "id": 396499500, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NjQ5OTUwMA==", "user": {"login": "shanest", "id": 351655, "node_id": "MDQ6VXNlcjM1MTY1NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/351655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shanest", "html_url": "https://github.com/shanest", "followers_url": "https://api.github.com/users/shanest/followers", "following_url": "https://api.github.com/users/shanest/following{/other_user}", "gists_url": "https://api.github.com/users/shanest/gists{/gist_id}", "starred_url": "https://api.github.com/users/shanest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shanest/subscriptions", "organizations_url": "https://api.github.com/users/shanest/orgs", "repos_url": "https://api.github.com/users/shanest/repos", "events_url": "https://api.github.com/users/shanest/events{/privacy}", "received_events_url": "https://api.github.com/users/shanest/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-12T07:52:35Z", "updated_at": "2018-06-12T07:52:35Z", "author_association": "NONE", "body_html": "<p>What about the following solution, where we pass in the same estimator to a <code>SessionRunHook</code> and evaluate it every certain number of steps (which could be calculated to be roughly one epoch).  As far as I can tell, since <code>train</code> is only called once, it doesn't recreate its graph [though the calls to <code>evaluate</code> will].  Does this break things?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">EvalEarlyStopHook</span>(<span class=\"pl-e\">tf</span>.<span class=\"pl-e\">train</span>.<span class=\"pl-e\">SessionRunHook</span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-c1\">self</span>, <span class=\"pl-e\">estimator</span>, <span class=\"pl-e\">eval_input_fn</span>, <span class=\"pl-e\">num_steps</span>):\n\n        <span class=\"pl-c1\">self</span>._estimator <span class=\"pl-k\">=</span> estimator\n        <span class=\"pl-c1\">self</span>._input_fn <span class=\"pl-k\">=</span> eval_input\n        <span class=\"pl-c1\">self</span>._num_steps <span class=\"pl-k\">=</span> num_steps\n\n    <span class=\"pl-c1\">...</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">after_run</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">run_context</span>, <span class=\"pl-smi\">run_values</span>):\n\n        global_step <span class=\"pl-k\">=</span> run_values.results[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>global_step<span class=\"pl-pds\">'</span></span>]\n        <span class=\"pl-k\">if</span> (global_step<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>) <span class=\"pl-k\">%</span> <span class=\"pl-c1\">self</span>._num_steps <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>:\n            ev_results <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>._estimator.evaluate(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>._input_fn)\n\n            <span class=\"pl-k\">if</span> do_stuff_with_results:\n                 run_context.request_stop()</pre></div>\n<p>With the main call being something like:</p>\n<div class=\"highlight highlight-source-python\"><pre>estimator.train(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>train_input_fn,\n                        <span class=\"pl-v\">hooks</span><span class=\"pl-k\">=</span>[EvalEarlyStopHook(estimator, eval_input_fn, num_steps))</pre></div>", "body_text": "What about the following solution, where we pass in the same estimator to a SessionRunHook and evaluate it every certain number of steps (which could be calculated to be roughly one epoch).  As far as I can tell, since train is only called once, it doesn't recreate its graph [though the calls to evaluate will].  Does this break things?\nclass EvalEarlyStopHook(tf.train.SessionRunHook)\n\n    def __init__(self, estimator, eval_input_fn, num_steps):\n\n        self._estimator = estimator\n        self._input_fn = eval_input\n        self._num_steps = num_steps\n\n    ...\n\n    def after_run(self, run_context, run_values):\n\n        global_step = run_values.results['global_step']\n        if (global_step-1) % self._num_steps == 0:\n            ev_results = self._estimator.evaluate(input_fn=self._input_fn)\n\n            if do_stuff_with_results:\n                 run_context.request_stop()\nWith the main call being something like:\nestimator.train(input_fn=train_input_fn,\n                        hooks=[EvalEarlyStopHook(estimator, eval_input_fn, num_steps))", "body": "What about the following solution, where we pass in the same estimator to a `SessionRunHook` and evaluate it every certain number of steps (which could be calculated to be roughly one epoch).  As far as I can tell, since `train` is only called once, it doesn't recreate its graph [though the calls to `evaluate` will].  Does this break things?\r\n\r\n```python\r\nclass EvalEarlyStopHook(tf.train.SessionRunHook)\r\n\r\n    def __init__(self, estimator, eval_input_fn, num_steps):\r\n\r\n        self._estimator = estimator\r\n        self._input_fn = eval_input\r\n        self._num_steps = num_steps\r\n\r\n    ...\r\n\r\n    def after_run(self, run_context, run_values):\r\n\r\n        global_step = run_values.results['global_step']\r\n        if (global_step-1) % self._num_steps == 0:\r\n            ev_results = self._estimator.evaluate(input_fn=self._input_fn)\r\n\r\n            if do_stuff_with_results:\r\n                 run_context.request_stop()\r\n```\r\n\r\nWith the main call being something like:\r\n\r\n```python\r\nestimator.train(input_fn=train_input_fn,\r\n                        hooks=[EvalEarlyStopHook(estimator, eval_input_fn, num_steps))\r\n```"}