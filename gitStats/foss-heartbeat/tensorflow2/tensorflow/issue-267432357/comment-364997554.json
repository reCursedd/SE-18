{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/364997554", "html_url": "https://github.com/tensorflow/tensorflow/issues/13895#issuecomment-364997554", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13895", "id": 364997554, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDk5NzU1NA==", "user": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-12T17:27:02Z", "updated_at": "2018-02-12T17:27:02Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=19293677\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ispirmustafa\">@ispirmustafa</a> FYI also.</p>\n<p>Sorry you all are frustrated. It also appears the documentation is adding to your confusion. Let me clarify a few points:</p>\n<ul>\n<li>Estimator will evaluate during training. See the train_and_evaluate documentation. It sounds like you're doing single machine execution.</li>\n<li>You can simply pass a function returning a dataset to Estimator. There shouldn't be a problem swapping out inputs.</li>\n<li>Estimator will run the <code>model_fn</code> every time you call <code>train</code>, <code>predict</code>, or <code>evaluate</code>.</li>\n<li>It will automatically reload the last checkpoint (or you can specify one)</li>\n<li>You don't have to worry about reuse between train and eval. As long as your variables are called the same (most likely, simply by using the same or similar enough code to create the layers or raw variables), they will be automatically shared between training and evaluation.</li>\n<li>Personally, I would stay away from <code>reuse</code>, and I would never use <code>variable_scope</code>. If you must (or have an existing model using this), that's fine. You can use either of these features to reuse variables within your model. Note that has absolutely no effect on whether variables are shared between training and evaluation. Unless you take steps to prevent it, variables are always shared between training and evaluation.</li>\n</ul>", "body_text": "@ispirmustafa FYI also.\nSorry you all are frustrated. It also appears the documentation is adding to your confusion. Let me clarify a few points:\n\nEstimator will evaluate during training. See the train_and_evaluate documentation. It sounds like you're doing single machine execution.\nYou can simply pass a function returning a dataset to Estimator. There shouldn't be a problem swapping out inputs.\nEstimator will run the model_fn every time you call train, predict, or evaluate.\nIt will automatically reload the last checkpoint (or you can specify one)\nYou don't have to worry about reuse between train and eval. As long as your variables are called the same (most likely, simply by using the same or similar enough code to create the layers or raw variables), they will be automatically shared between training and evaluation.\nPersonally, I would stay away from reuse, and I would never use variable_scope. If you must (or have an existing model using this), that's fine. You can use either of these features to reuse variables within your model. Note that has absolutely no effect on whether variables are shared between training and evaluation. Unless you take steps to prevent it, variables are always shared between training and evaluation.", "body": "@ispirmustafa FYI also.\r\n\r\nSorry you all are frustrated. It also appears the documentation is adding to your confusion. Let me clarify a few points:\r\n\r\n* Estimator will evaluate during training. See the train_and_evaluate documentation. It sounds like you're doing single machine execution.\r\n* You can simply pass a function returning a dataset to Estimator. There shouldn't be a problem swapping out inputs.\r\n* Estimator will run the `model_fn` every time you call `train`, `predict`, or `evaluate`. \r\n* It will automatically reload the last checkpoint (or you can specify one)\r\n* You don't have to worry about reuse between train and eval. As long as your variables are called the same (most likely, simply by using the same or similar enough code to create the layers or raw variables), they will be automatically shared between training and evaluation.\r\n* Personally, I would stay away from `reuse`, and I would never use `variable_scope`. If you must (or have an existing model using this), that's fine. You can use either of these features to reuse variables within your model. Note that has absolutely no effect on whether variables are shared between training and evaluation. Unless you take steps to prevent it, variables are always shared between training and evaluation."}