{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/190416381", "html_url": "https://github.com/tensorflow/tensorflow/issues/1323#issuecomment-190416381", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1323", "id": 190416381, "node_id": "MDEyOklzc3VlQ29tbWVudDE5MDQxNjM4MQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-02-29T21:59:40Z", "updated_at": "2016-02-29T21:59:40Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Yes, this seems to happen because, internally, we compute <code>tf.mul(x, y)</code> where <code>x</code> has shape <code>[None, 2000]</code> and <code>y</code> has shape <code>[batch_size, 1000]</code>. If <code>batch_size</code> is 1, then it can't tell whether <code>None</code> is actually <code>1</code> (i.e. there's no broadcasting), or a number greater than <code>1</code> (i.e. broadcasting happens).</p>\n<p>The typical way to deal with issues like this - when shape inference is hard to do - is to have the higher-level library function (e.g. <code>BasicLSTMCell()</code>) call <code>Tensor.set_shape()</code> with the statically known shape.</p>", "body_text": "Yes, this seems to happen because, internally, we compute tf.mul(x, y) where x has shape [None, 2000] and y has shape [batch_size, 1000]. If batch_size is 1, then it can't tell whether None is actually 1 (i.e. there's no broadcasting), or a number greater than 1 (i.e. broadcasting happens).\nThe typical way to deal with issues like this - when shape inference is hard to do - is to have the higher-level library function (e.g. BasicLSTMCell()) call Tensor.set_shape() with the statically known shape.", "body": "Yes, this seems to happen because, internally, we compute `tf.mul(x, y)` where `x` has shape `[None, 2000]` and `y` has shape `[batch_size, 1000]`. If `batch_size` is 1, then it can't tell whether `None` is actually `1` (i.e. there's no broadcasting), or a number greater than `1` (i.e. broadcasting happens).\n\nThe typical way to deal with issues like this - when shape inference is hard to do - is to have the higher-level library function (e.g. `BasicLSTMCell()`) call `Tensor.set_shape()` with the statically known shape.\n"}