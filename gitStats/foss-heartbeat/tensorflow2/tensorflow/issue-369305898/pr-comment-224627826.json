{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224627826", "pull_request_review_id": 164045076, "id": 224627826, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyNDYyNzgyNg==", "diff_hunk": "@@ -66,23 +66,22 @@ build:gdr --define=with_gdr_support=true\n build:ngraph --define=with_ngraph_support=true\n build:verbs --define=with_verbs_support=true\n \n+\n build --define=use_fast_cpp_protos=true\n build --define=allow_oversize_protos=true\n build --define=grpc_no_ares=true\n \n-build --spawn_strategy=standalone\n-build --genrule_strategy=standalone\n-build -c opt\n+\n+#build --spawn_strategy=standalone", "path": "bazel_defaults", "position": 12, "original_position": 13, "commit_id": "2603df688e187a4c6357da890ed2ce47d7e87c77", "original_commit_id": "a4e8f8a73874203d52be97a08b8f2344e30bcf4f", "user": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "body": "I just checked out and experimented with the two following commands:\r\n```\r\n1 - bazel build -s tensorflow/tools/pip_package:build_pip_package\r\n2 - bazel build -s -c dbg tensorflow/tools/pip_package:build_pip_package\r\n```\r\n`-s` forces bazel to write out the subcommands.\r\nHere is what I see. With the first command, I verified that `-O2` is passed to my command:\r\n```\r\n/usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -B/usr/bin -B/usr/bin -Wunused-but-set-parameter -Wno-free-nonheap-object -fno-omit-frame-pointer -g0 -O2 '-D_FORTIFY_SOURCE=1' -DNDEBUG -ffunction-sections -fdata-sections -MD -MF\r\n```\r\nHowever, When I run the second command, I see no O2 passed to the command:\r\n```\r\n/usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -B/usr/bin -B/usr/bin -Wunused-but-set-parameter -Wno-free-nonheap-object -fno-omit-frame-pointer -g '-std=c++0x' -MD -MF \r\n```\r\n\r\nSo even though we have this in our bazelrc, the option I provide through the command line overrides the option in bazelrc. Therefore, I do not think having `-c opt` here forces users out of a debug build.", "created_at": "2018-10-11T22:50:07Z", "updated_at": "2018-10-11T23:23:39Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22906#discussion_r224627826", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22906", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/224627826"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22906#discussion_r224627826"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22906"}}, "body_html": "<p>I just checked out and experimented with the two following commands:</p>\n<pre><code>1 - bazel build -s tensorflow/tools/pip_package:build_pip_package\n2 - bazel build -s -c dbg tensorflow/tools/pip_package:build_pip_package\n</code></pre>\n<p><code>-s</code> forces bazel to write out the subcommands.<br>\nHere is what I see. With the first command, I verified that <code>-O2</code> is passed to my command:</p>\n<pre><code>/usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -B/usr/bin -B/usr/bin -Wunused-but-set-parameter -Wno-free-nonheap-object -fno-omit-frame-pointer -g0 -O2 '-D_FORTIFY_SOURCE=1' -DNDEBUG -ffunction-sections -fdata-sections -MD -MF\n</code></pre>\n<p>However, When I run the second command, I see no O2 passed to the command:</p>\n<pre><code>/usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -B/usr/bin -B/usr/bin -Wunused-but-set-parameter -Wno-free-nonheap-object -fno-omit-frame-pointer -g '-std=c++0x' -MD -MF \n</code></pre>\n<p>So even though we have this in our bazelrc, the option I provide through the command line overrides the option in bazelrc. Therefore, I do not think having <code>-c opt</code> here forces users out of a debug build.</p>", "body_text": "I just checked out and experimented with the two following commands:\n1 - bazel build -s tensorflow/tools/pip_package:build_pip_package\n2 - bazel build -s -c dbg tensorflow/tools/pip_package:build_pip_package\n\n-s forces bazel to write out the subcommands.\nHere is what I see. With the first command, I verified that -O2 is passed to my command:\n/usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -B/usr/bin -B/usr/bin -Wunused-but-set-parameter -Wno-free-nonheap-object -fno-omit-frame-pointer -g0 -O2 '-D_FORTIFY_SOURCE=1' -DNDEBUG -ffunction-sections -fdata-sections -MD -MF\n\nHowever, When I run the second command, I see no O2 passed to the command:\n/usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -B/usr/bin -B/usr/bin -Wunused-but-set-parameter -Wno-free-nonheap-object -fno-omit-frame-pointer -g '-std=c++0x' -MD -MF \n\nSo even though we have this in our bazelrc, the option I provide through the command line overrides the option in bazelrc. Therefore, I do not think having -c opt here forces users out of a debug build.", "in_reply_to_id": 224610654}