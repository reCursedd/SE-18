{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/78400122", "pull_request_review_id": null, "id": 78400122, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4NDAwMTIy", "diff_hunk": "@@ -810,5 +810,27 @@ def testInitFromCheckpointWithScopes(self):\n       self.assertAllEqual(init_value0, var0.eval())\n       self.assertAllEqual(init_value1, var1.eval())\n \n+class ZeroInitializerOpTest(tf.test.TestCase):\n+\n+  def _testZeroInitializer(self, shape, dtype):\n+    var0 = tf.Variable(tf.zeros(shape, dtype=dtype))\n+    var1 = tf.Variable(tf.ones(shape, dtype=dtype))\n+    var0_zero = tf.contrib.framework.zero_initializer(var0)\n+    var1_zero = tf.contrib.framework.zero_initializer(var1)", "path": "tensorflow/contrib/framework/python/ops/variables_test.py", "position": null, "original_position": 10, "commit_id": "32f95e65a29c60629b8ae0b9db2891d50c8f1c1b", "original_commit_id": "3b33a6518b3550e60f325b8f1390f70f264680b9", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "body": "My suggestion was that you make an op which takes any constant float value (0.0 by default) and initializes the variable to have that value repeated in all entries. Then you can replace also things which are not zero initialized (like your ones-initialized variable, which weirdly gets initialized with zero by your zero_initializer op).\n\nI'd also like it if the syntax was more like var0 = tf.Variable(tf.zero_initializer(shape, dtype)) to make it work seamlessly with the existing infrastructure such as initialize_all_variables.\n", "created_at": "2016-09-12T15:55:14Z", "updated_at": "2016-09-27T10:47:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4077#discussion_r78400122", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4077", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/78400122"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4077#discussion_r78400122"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4077"}}, "body_html": "<p>My suggestion was that you make an op which takes any constant float value (0.0 by default) and initializes the variable to have that value repeated in all entries. Then you can replace also things which are not zero initialized (like your ones-initialized variable, which weirdly gets initialized with zero by your zero_initializer op).</p>\n<p>I'd also like it if the syntax was more like var0 = tf.Variable(tf.zero_initializer(shape, dtype)) to make it work seamlessly with the existing infrastructure such as initialize_all_variables.</p>", "body_text": "My suggestion was that you make an op which takes any constant float value (0.0 by default) and initializes the variable to have that value repeated in all entries. Then you can replace also things which are not zero initialized (like your ones-initialized variable, which weirdly gets initialized with zero by your zero_initializer op).\nI'd also like it if the syntax was more like var0 = tf.Variable(tf.zero_initializer(shape, dtype)) to make it work seamlessly with the existing infrastructure such as initialize_all_variables.", "in_reply_to_id": 78382447}