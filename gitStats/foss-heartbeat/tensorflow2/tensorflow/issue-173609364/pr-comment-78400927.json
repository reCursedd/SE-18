{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/78400927", "pull_request_review_id": null, "id": 78400927, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4NDAwOTI3", "diff_hunk": "@@ -0,0 +1,70 @@\n+/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#ifndef TENSORFLOW_KERNELS_ZERO_INITIALIZER_OP_H_\n+#define TENSORFLOW_KERNELS_ZERO_INITIALIZER_OP_H_\n+\n+#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+\n+namespace tensorflow {\n+\n+template <typename T>\n+class ZeroInitializerOp : public OpKernel {\n+  public:\n+    explicit ZeroInitializerOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n+      OP_REQUIRES_OK(ctx, ctx->GetAttr(\"use_locking\", &use_exclusive_lock_));", "path": "tensorflow/core/kernels/zero_initializer_op.h", "position": null, "original_position": 28, "commit_id": "32f95e65a29c60629b8ae0b9db2891d50c8f1c1b", "original_commit_id": "3b33a6518b3550e60f325b8f1390f70f264680b9", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "body": "I was asking what is the value of use_locking=false here. In AssignOp use_locking=false lets more than one concurrent assign happen to the variable (which isn't helpful for assign but is for assign_add and even more so scatter_add where you're unlikely to see race conditions). There is no point in initializing the variable more than once concurrently, or assigning it while the initializer is running, so you should always grab the lock and not take use_locking as an attr.\n", "created_at": "2016-09-12T15:59:49Z", "updated_at": "2016-09-27T10:47:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4077#discussion_r78400927", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4077", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/78400927"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4077#discussion_r78400927"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4077"}}, "body_html": "<p>I was asking what is the value of use_locking=false here. In AssignOp use_locking=false lets more than one concurrent assign happen to the variable (which isn't helpful for assign but is for assign_add and even more so scatter_add where you're unlikely to see race conditions). There is no point in initializing the variable more than once concurrently, or assigning it while the initializer is running, so you should always grab the lock and not take use_locking as an attr.</p>", "body_text": "I was asking what is the value of use_locking=false here. In AssignOp use_locking=false lets more than one concurrent assign happen to the variable (which isn't helpful for assign but is for assign_add and even more so scatter_add where you're unlikely to see race conditions). There is no point in initializing the variable more than once concurrently, or assigning it while the initializer is running, so you should always grab the lock and not take use_locking as an attr.", "in_reply_to_id": 78382819}