{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/249441536", "html_url": "https://github.com/tensorflow/tensorflow/issues/3473#issuecomment-249441536", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3473", "id": 249441536, "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTQ0MTUzNg==", "user": {"login": "robertnishihara", "id": 249517, "node_id": "MDQ6VXNlcjI0OTUxNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/249517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robertnishihara", "html_url": "https://github.com/robertnishihara", "followers_url": "https://api.github.com/users/robertnishihara/followers", "following_url": "https://api.github.com/users/robertnishihara/following{/other_user}", "gists_url": "https://api.github.com/users/robertnishihara/gists{/gist_id}", "starred_url": "https://api.github.com/users/robertnishihara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robertnishihara/subscriptions", "organizations_url": "https://api.github.com/users/robertnishihara/orgs", "repos_url": "https://api.github.com/users/robertnishihara/repos", "events_url": "https://api.github.com/users/robertnishihara/events{/privacy}", "received_events_url": "https://api.github.com/users/robertnishihara/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-25T19:33:08Z", "updated_at": "2016-09-25T19:33:08Z", "author_association": "NONE", "body_html": "<p>Yeah, \"that\" means \"keeping modules from importing each other\". In the code example in the original post, I think that replacing <code>file1.py</code> with the code below addresses the issue. I'm not sure how to deal with this in general however.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> file2 <span class=\"pl-c\"><span class=\"pl-c\">#</span> Can also reproduce the error with a single file by having file1 import itself</span>\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf <span class=\"pl-c\"><span class=\"pl-c\">#</span> The order of these two imports doesn't matter</span>\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>__main__<span class=\"pl-pds\">\"</span></span>:\n  sess <span class=\"pl-k\">=</span> tf.Session() <span class=\"pl-c\"><span class=\"pl-c\">#</span> Removing the assignment fixes the problem</span></pre></div>", "body_text": "Yeah, \"that\" means \"keeping modules from importing each other\". In the code example in the original post, I think that replacing file1.py with the code below addresses the issue. I'm not sure how to deal with this in general however.\nimport file2 # Can also reproduce the error with a single file by having file1 import itself\nimport tensorflow as tf # The order of these two imports doesn't matter\n\nif __name__ == \"__main__\":\n  sess = tf.Session() # Removing the assignment fixes the problem", "body": "Yeah, \"that\" means \"keeping modules from importing each other\". In the code example in the original post, I think that replacing `file1.py` with the code below addresses the issue. I'm not sure how to deal with this in general however.\n\n``` python\nimport file2 # Can also reproduce the error with a single file by having file1 import itself\nimport tensorflow as tf # The order of these two imports doesn't matter\n\nif __name__ == \"__main__\":\n  sess = tf.Session() # Removing the assignment fixes the problem\n```\n"}