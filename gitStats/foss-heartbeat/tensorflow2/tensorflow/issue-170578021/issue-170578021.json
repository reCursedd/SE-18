{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3745", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3745/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3745/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3745/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3745", "id": 170578021, "node_id": "MDU6SXNzdWUxNzA1NzgwMjE=", "number": 3745, "title": "Tensorflow and import IPython errors", "user": {"login": "gustavla", "id": 902935, "node_id": "MDQ6VXNlcjkwMjkzNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/902935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gustavla", "html_url": "https://github.com/gustavla", "followers_url": "https://api.github.com/users/gustavla/followers", "following_url": "https://api.github.com/users/gustavla/following{/other_user}", "gists_url": "https://api.github.com/users/gustavla/gists{/gist_id}", "starred_url": "https://api.github.com/users/gustavla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gustavla/subscriptions", "organizations_url": "https://api.github.com/users/gustavla/orgs", "repos_url": "https://api.github.com/users/gustavla/repos", "events_url": "https://api.github.com/users/gustavla/events{/privacy}", "received_events_url": "https://api.github.com/users/gustavla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-11T06:25:23Z", "updated_at": "2016-08-15T04:38:39Z", "closed_at": "2016-08-11T18:16:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p>When I use a thread-based data queue in Tensorflow and also include <code>import IPython</code>, I get various errors thrown at the very end of the Tensorflow session. Since I am offering a \"solution\" (do not import IPython), I am fine closing this immediately and re-opening if necessary. I am filing this mostly to have these errors and the cause on file in case it happens to someone else.</p>\n<h3>Environment info</h3>\n<p>64-bit CentOS / cuda 7.5.18 / cudnn 5.0.5 / bazel 0.2.1 / python 3.4.4 / ipython 4.0.3</p>\n<p>Tensorflow installed from source: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/83fe2a5b7328e1b754b53cbbcf9b313450a2f863/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/83fe2a5b7328e1b754b53cbbcf9b313450a2f863\"><tt>83fe2a5</tt></a></p>\n<h3>Steps to reproduce</h3>\n<ol>\n<li>\n<p>Create file <code>files.txt</code> (lines omitted):</p>\n<pre><code>file0\nfile1\n...\nfile10\n</code></pre>\n</li>\n<li>\n<p>Create file <code>bug.py</code></p>\n<pre><code>import tensorflow as tf\nimport IPython  # &lt;-- remove and errors stop happening\n\nwith tf.Session() as sess:\n    filename_queue = tf.train.string_input_producer(['files.txt'], shuffle=True)\n    reader = tf.TextLineReader()\n    key, value = reader.read(filename_queue)\n    batch_size = 3\n    min_after_dequeue = 10\n    capacity = min_after_dequeue + 3 * batch_size\n    batch_fn = tf.train.shuffle_batch(\n            [value], batch_size=batch_size, capacity=capacity,\n            min_after_dequeue=min_after_dequeue)\n\n    sess.run(tf.initialize_all_variables())\n    coord = tf.train.Coordinator()\n    threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n    try:\n        while not coord.should_stop():\n            print(sess.run(batch_fn))\n            break\n    except tf.errors.OutOfRangeError:\n        pass\n    finally:\n        coord.request_stop()\n    coord.join(threads)\n</code></pre>\n</li>\n<li>\n<p>Run <code>python bug.py</code> (repeatedly if no error occurs)</p>\n</li>\n</ol>\n<h3>What have you tried?</h3>\n<p>Removing <code>import IPython</code> fixes it. I have only tested it on one platform, so I do not know if this is a universal problem.</p>\n<p>Of course, this might also happen if packages that import IPython are imported. It originally happened to me when I imported ipdb.</p>\n<h3>Errors</h3>\n<p>In the tradition of thread-related bugs, the error message is not deterministic and 100 runs breaks down as follows (I am being thorough here to make these searchable):</p>\n<table>\n<thead>\n<tr>\n<th>Occurrences</th>\n<th>Error</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>35</td>\n<td>No error</td>\n</tr>\n<tr>\n<td>34</td>\n<td>Error 1</td>\n</tr>\n<tr>\n<td>29</td>\n<td>Error 2</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Error 3</td>\n</tr>\n</tbody>\n</table>\n<p>Investigating these errors further leads nowhere, since it is clear that Python is behaving erratically and variables that are clearly set one line can be corrupted the next.</p>\n<h4>Error 1</h4>\n<pre><code>Exception ignored in: &lt;bound method Session.__del__ of &lt;tensorflow.python.client.session.Session object at 0x7f12d1d75908&gt;&gt;\nTraceback (most recent call last):\n  File \"/.../python3.4/site-packages/tensorflow/python/client/session.py\", line 524, in __del__\nAttributeError: 'NoneType' object has no attribute 'raise_exception_on_not_ok_status'\n</code></pre>\n<h4>Error 2</h4>\n<pre><code>Exception ignored in: &lt;bound method Session.__del__ of &lt;tensorflow.python.client.session.Session object at 0x7fde89961908&gt;&gt;\nTraceback (most recent call last):\n  File \"/.../python3.4/site-packages/tensorflow/python/client/session.py\", line 524, in __del__\n  File \"/share/data/vision-greg/common/anaconda3/lib/python3.4/contextlib.py\", line 126, in helper\nTypeError: 'NoneType' object is not callable\n</code></pre>\n<h4>Error 3</h4>\n<pre><code>Exception ignored in: &lt;bound method Session.__del__ of &lt;tensorflow.python.client.session.Session object at 0x7feec524b908&gt;&gt;\nTraceback (most recent call last):\n  File \"/.../python3.4/site-packages/tensorflow/python/client/session.py\", line 524, in __del__\n  File \"/share/data/vision-greg/common/anaconda3/lib/python3.4/contextlib.py\", line 59, in __enter__\n  File \"/.../python3.4/site-packages/tensorflow/python/framework/errors.py\", line 452, in raise_exception_on_not_ok_status\nUnboundLocalError: local variable 'status' referenced before assignment\n</code></pre>", "body_text": "When I use a thread-based data queue in Tensorflow and also include import IPython, I get various errors thrown at the very end of the Tensorflow session. Since I am offering a \"solution\" (do not import IPython), I am fine closing this immediately and re-opening if necessary. I am filing this mostly to have these errors and the cause on file in case it happens to someone else.\nEnvironment info\n64-bit CentOS / cuda 7.5.18 / cudnn 5.0.5 / bazel 0.2.1 / python 3.4.4 / ipython 4.0.3\nTensorflow installed from source: 83fe2a5\nSteps to reproduce\n\n\nCreate file files.txt (lines omitted):\nfile0\nfile1\n...\nfile10\n\n\n\nCreate file bug.py\nimport tensorflow as tf\nimport IPython  # <-- remove and errors stop happening\n\nwith tf.Session() as sess:\n    filename_queue = tf.train.string_input_producer(['files.txt'], shuffle=True)\n    reader = tf.TextLineReader()\n    key, value = reader.read(filename_queue)\n    batch_size = 3\n    min_after_dequeue = 10\n    capacity = min_after_dequeue + 3 * batch_size\n    batch_fn = tf.train.shuffle_batch(\n            [value], batch_size=batch_size, capacity=capacity,\n            min_after_dequeue=min_after_dequeue)\n\n    sess.run(tf.initialize_all_variables())\n    coord = tf.train.Coordinator()\n    threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n    try:\n        while not coord.should_stop():\n            print(sess.run(batch_fn))\n            break\n    except tf.errors.OutOfRangeError:\n        pass\n    finally:\n        coord.request_stop()\n    coord.join(threads)\n\n\n\nRun python bug.py (repeatedly if no error occurs)\n\n\nWhat have you tried?\nRemoving import IPython fixes it. I have only tested it on one platform, so I do not know if this is a universal problem.\nOf course, this might also happen if packages that import IPython are imported. It originally happened to me when I imported ipdb.\nErrors\nIn the tradition of thread-related bugs, the error message is not deterministic and 100 runs breaks down as follows (I am being thorough here to make these searchable):\n\n\n\nOccurrences\nError\n\n\n\n\n35\nNo error\n\n\n34\nError 1\n\n\n29\nError 2\n\n\n2\nError 3\n\n\n\nInvestigating these errors further leads nowhere, since it is clear that Python is behaving erratically and variables that are clearly set one line can be corrupted the next.\nError 1\nException ignored in: <bound method Session.__del__ of <tensorflow.python.client.session.Session object at 0x7f12d1d75908>>\nTraceback (most recent call last):\n  File \"/.../python3.4/site-packages/tensorflow/python/client/session.py\", line 524, in __del__\nAttributeError: 'NoneType' object has no attribute 'raise_exception_on_not_ok_status'\n\nError 2\nException ignored in: <bound method Session.__del__ of <tensorflow.python.client.session.Session object at 0x7fde89961908>>\nTraceback (most recent call last):\n  File \"/.../python3.4/site-packages/tensorflow/python/client/session.py\", line 524, in __del__\n  File \"/share/data/vision-greg/common/anaconda3/lib/python3.4/contextlib.py\", line 126, in helper\nTypeError: 'NoneType' object is not callable\n\nError 3\nException ignored in: <bound method Session.__del__ of <tensorflow.python.client.session.Session object at 0x7feec524b908>>\nTraceback (most recent call last):\n  File \"/.../python3.4/site-packages/tensorflow/python/client/session.py\", line 524, in __del__\n  File \"/share/data/vision-greg/common/anaconda3/lib/python3.4/contextlib.py\", line 59, in __enter__\n  File \"/.../python3.4/site-packages/tensorflow/python/framework/errors.py\", line 452, in raise_exception_on_not_ok_status\nUnboundLocalError: local variable 'status' referenced before assignment", "body": "When I use a thread-based data queue in Tensorflow and also include `import IPython`, I get various errors thrown at the very end of the Tensorflow session. Since I am offering a \"solution\" (do not import IPython), I am fine closing this immediately and re-opening if necessary. I am filing this mostly to have these errors and the cause on file in case it happens to someone else.\n### Environment info\n\n64-bit CentOS / cuda 7.5.18 / cudnn 5.0.5 / bazel 0.2.1 / python 3.4.4 / ipython 4.0.3\n\nTensorflow installed from source: 83fe2a5b7328e1b754b53cbbcf9b313450a2f863\n### Steps to reproduce\n1. Create file `files.txt` (lines omitted): \n   \n   ```\n   file0\n   file1\n   ...\n   file10\n   ```\n2. Create file `bug.py`\n   \n   ```\n   import tensorflow as tf\n   import IPython  # <-- remove and errors stop happening\n   \n   with tf.Session() as sess:\n       filename_queue = tf.train.string_input_producer(['files.txt'], shuffle=True)\n       reader = tf.TextLineReader()\n       key, value = reader.read(filename_queue)\n       batch_size = 3\n       min_after_dequeue = 10\n       capacity = min_after_dequeue + 3 * batch_size\n       batch_fn = tf.train.shuffle_batch(\n               [value], batch_size=batch_size, capacity=capacity,\n               min_after_dequeue=min_after_dequeue)\n   \n       sess.run(tf.initialize_all_variables())\n       coord = tf.train.Coordinator()\n       threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n       try:\n           while not coord.should_stop():\n               print(sess.run(batch_fn))\n               break\n       except tf.errors.OutOfRangeError:\n           pass\n       finally:\n           coord.request_stop()\n       coord.join(threads)\n   ```\n3. Run `python bug.py` (repeatedly if no error occurs) \n### What have you tried?\n\nRemoving `import IPython` fixes it. I have only tested it on one platform, so I do not know if this is a universal problem.\n\nOf course, this might also happen if packages that import IPython are imported. It originally happened to me when I imported ipdb.\n### Errors\n\nIn the tradition of thread-related bugs, the error message is not deterministic and 100 runs breaks down as follows (I am being thorough here to make these searchable):\n\n| Occurrences | Error |\n| --- | --- |\n| 35 | No error |\n| 34 | Error 1 |\n| 29 | Error 2 |\n| 2 | Error 3 |\n\nInvestigating these errors further leads nowhere, since it is clear that Python is behaving erratically and variables that are clearly set one line can be corrupted the next.\n#### Error 1\n\n```\nException ignored in: <bound method Session.__del__ of <tensorflow.python.client.session.Session object at 0x7f12d1d75908>>\nTraceback (most recent call last):\n  File \"/.../python3.4/site-packages/tensorflow/python/client/session.py\", line 524, in __del__\nAttributeError: 'NoneType' object has no attribute 'raise_exception_on_not_ok_status'\n```\n#### Error 2\n\n```\nException ignored in: <bound method Session.__del__ of <tensorflow.python.client.session.Session object at 0x7fde89961908>>\nTraceback (most recent call last):\n  File \"/.../python3.4/site-packages/tensorflow/python/client/session.py\", line 524, in __del__\n  File \"/share/data/vision-greg/common/anaconda3/lib/python3.4/contextlib.py\", line 126, in helper\nTypeError: 'NoneType' object is not callable\n```\n#### Error 3\n\n```\nException ignored in: <bound method Session.__del__ of <tensorflow.python.client.session.Session object at 0x7feec524b908>>\nTraceback (most recent call last):\n  File \"/.../python3.4/site-packages/tensorflow/python/client/session.py\", line 524, in __del__\n  File \"/share/data/vision-greg/common/anaconda3/lib/python3.4/contextlib.py\", line 59, in __enter__\n  File \"/.../python3.4/site-packages/tensorflow/python/framework/errors.py\", line 452, in raise_exception_on_not_ok_status\nUnboundLocalError: local variable 'status' referenced before assignment\n```\n"}