{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/398463819", "html_url": "https://github.com/tensorflow/tensorflow/pull/19779#issuecomment-398463819", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19779", "id": 398463819, "node_id": "MDEyOklzc3VlQ29tbWVudDM5ODQ2MzgxOQ==", "user": {"login": "Huizerd", "id": 15855769, "node_id": "MDQ6VXNlcjE1ODU1NzY5", "avatar_url": "https://avatars0.githubusercontent.com/u/15855769?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Huizerd", "html_url": "https://github.com/Huizerd", "followers_url": "https://api.github.com/users/Huizerd/followers", "following_url": "https://api.github.com/users/Huizerd/following{/other_user}", "gists_url": "https://api.github.com/users/Huizerd/gists{/gist_id}", "starred_url": "https://api.github.com/users/Huizerd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Huizerd/subscriptions", "organizations_url": "https://api.github.com/users/Huizerd/orgs", "repos_url": "https://api.github.com/users/Huizerd/repos", "events_url": "https://api.github.com/users/Huizerd/events{/privacy}", "received_events_url": "https://api.github.com/users/Huizerd/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-19T16:35:36Z", "updated_at": "2018-06-19T16:36:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The following code will give you <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"329525191\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/19778\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/19778/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/19778\">#19778</a>:</p>\n<p>Edit: thanks a lot for helping me out/teaching me how to make a test!!</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow.contrib.model_pruning <span class=\"pl-k\">as</span> pruning\n\ntf.reset_default_graph()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Global step.</span>\nglobal_step <span class=\"pl-k\">=</span> tf.train.get_or_create_global_step()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Input data.</span>\ndata <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>data<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">1</span>], <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.random_normal_initializer())\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Single conv layer with pruning mask.</span>\noutputs <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>\nkernel <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>]\nconv <span class=\"pl-k\">=</span> pruning.masked_conv2d(data, outputs, kernel)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    \n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Pruning hyperparameters.</span>\n    pruning_hparams <span class=\"pl-k\">=</span> pruning.get_pruning_hparams().parse(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Pruning object.</span>\n    pruning_obj <span class=\"pl-k\">=</span> pruning.Pruning(pruning_hparams, <span class=\"pl-v\">global_step</span><span class=\"pl-k\">=</span>global_step)\n    \n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Pruning summaries.</span>\n    pruning_obj.add_pruning_summaries()\n    \n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Summary.</span>\n    summary_writer <span class=\"pl-k\">=</span> tf.summary.FileWriter(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>.<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">graph</span><span class=\"pl-k\">=</span>sess.graph)</pre></div>", "body_text": "The following code will give you #19778:\nEdit: thanks a lot for helping me out/teaching me how to make a test!!\nimport tensorflow as tf\nimport tensorflow.contrib.model_pruning as pruning\n\ntf.reset_default_graph()\n\n# Global step.\nglobal_step = tf.train.get_or_create_global_step()\n\n# Input data.\ndata = tf.get_variable('data', shape=[1, 10, 10, 1], initializer=tf.random_normal_initializer())\n\n# Single conv layer with pruning mask.\noutputs = 1\nkernel = [2, 2]\nconv = pruning.masked_conv2d(data, outputs, kernel)\n\nwith tf.Session() as sess:\n    \n    # Pruning hyperparameters.\n    pruning_hparams = pruning.get_pruning_hparams().parse(\"\")\n\n    # Pruning object.\n    pruning_obj = pruning.Pruning(pruning_hparams, global_step=global_step)\n    \n    # Pruning summaries.\n    pruning_obj.add_pruning_summaries()\n    \n    # Summary.\n    summary_writer = tf.summary.FileWriter('.', graph=sess.graph)", "body": "The following code will give you #19778:\r\n\r\nEdit: thanks a lot for helping me out/teaching me how to make a test!!\r\n\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow.contrib.model_pruning as pruning\r\n\r\ntf.reset_default_graph()\r\n\r\n# Global step.\r\nglobal_step = tf.train.get_or_create_global_step()\r\n\r\n# Input data.\r\ndata = tf.get_variable('data', shape=[1, 10, 10, 1], initializer=tf.random_normal_initializer())\r\n\r\n# Single conv layer with pruning mask.\r\noutputs = 1\r\nkernel = [2, 2]\r\nconv = pruning.masked_conv2d(data, outputs, kernel)\r\n\r\nwith tf.Session() as sess:\r\n    \r\n    # Pruning hyperparameters.\r\n    pruning_hparams = pruning.get_pruning_hparams().parse(\"\")\r\n\r\n    # Pruning object.\r\n    pruning_obj = pruning.Pruning(pruning_hparams, global_step=global_step)\r\n    \r\n    # Pruning summaries.\r\n    pruning_obj.add_pruning_summaries()\r\n    \r\n    # Summary.\r\n    summary_writer = tf.summary.FileWriter('.', graph=sess.graph)\r\n```"}