{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2775", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2775/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2775/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2775/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2775", "id": 159556792, "node_id": "MDU6SXNzdWUxNTk1NTY3OTI=", "number": 2775, "title": "Bazel fail to resolve submodule tensorflow", "user": {"login": "jvmvik", "id": 330204, "node_id": "MDQ6VXNlcjMzMDIwNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/330204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvmvik", "html_url": "https://github.com/jvmvik", "followers_url": "https://api.github.com/users/jvmvik/followers", "following_url": "https://api.github.com/users/jvmvik/following{/other_user}", "gists_url": "https://api.github.com/users/jvmvik/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvmvik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvmvik/subscriptions", "organizations_url": "https://api.github.com/users/jvmvik/orgs", "repos_url": "https://api.github.com/users/jvmvik/repos", "events_url": "https://api.github.com/users/jvmvik/events{/privacy}", "received_events_url": "https://api.github.com/users/jvmvik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, {"login": "andrewharp", "id": 3376817, "node_id": "MDQ6VXNlcjMzNzY4MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3376817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewharp", "html_url": "https://github.com/andrewharp", "followers_url": "https://api.github.com/users/andrewharp/followers", "following_url": "https://api.github.com/users/andrewharp/following{/other_user}", "gists_url": "https://api.github.com/users/andrewharp/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewharp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewharp/subscriptions", "organizations_url": "https://api.github.com/users/andrewharp/orgs", "repos_url": "https://api.github.com/users/andrewharp/repos", "events_url": "https://api.github.com/users/andrewharp/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewharp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2016-06-10T04:29:15Z", "updated_at": "2016-08-15T23:20:48Z", "closed_at": "2016-08-15T23:20:48Z", "author_association": "NONE", "body_html": "<p>It does not seem possible to build an Android application where TensorFlow r0.9 is a submodule.</p>\n<p>The trick should have been to set the correct path prefix and give a repository name, but it does not work:</p>\n<p><code>tf_workspace( path_prefix = tensorflow_path, tf_repo_name = \"@caloric_lab\" ) </code><br>\nBazel: 0.2.1-homebrew<br>\nOSX El Capitan</p>\n<p>WORKSPACE file:</p>\n<pre><code>tensorflow_path = \u201cpath/to/tensorflow\"\n\nlocal_repository(\n    name = \"org_tensorflow\",\n    path = tensorflow_path\n)\n\nandroid_sdk_repository(\n    name = \"androidsdk\",\n    api_level = 23,\n    build_tools_version = \"23.0.3\",\n    # Replace with path to Android SDK on your system\n    path = \"/Users/&lt;user&gt;/Library/Android/sdk/\",\n)\n\nandroid_ndk_repository(\n    name=\"androidndk\",\n    path=\"/Users/&lt;user&gt;/workspace/android/android-ndk-r10e/\",\n    api_level=21)\n\n# Please add all new TensorFlow dependencies in workspace.bzl.\nload(\"@org_tensorflow//tensorflow:workspace.bzl\", \"tf_workspace\")\ntf_workspace(\n  path_prefix = tensorflow_path,\n  tf_repo_name = \"@caloric_lab\"\n )\n\n# Specify the minimum required bazel version.\nload(\"@org_tensorflow//tensorflow:tensorflow.bzl\", \"check_version\")\ncheck_version(\"0.2.0\")\n\nbind(\n name   = \"android_tensorflow_lib\",\n actual = \"@org_tensorflow//tensorflow/core:android_tensorflow_lib\"\n)\n</code></pre>\n<p>BUILD file:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> Description:</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>   Tensorflow camera demo app for Android.</span>\n\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>package(default_visibility = [\"//visibility:public\"])</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>licenses([\"notice\"])  # Apache 2.0</span>\n\nload(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@org_tensorflow//tensorflow:tensorflow.bzl<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tf_copts<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>exports_files([\"LICENSE\"])</span>\n\ncc_binary(\n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>caloric_lab.so<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> glob([\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jni/**/*.cc<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jni/**/*.h<span class=\"pl-pds\">\"</span></span>,\n    ]) <span class=\"pl-k\">+</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>:libpthread.so<span class=\"pl-pds\">\"</span></span>],\n    <span class=\"pl-v\">copts</span> <span class=\"pl-k\">=</span> tf_copts(),\n    <span class=\"pl-v\">linkopts</span> <span class=\"pl-k\">=</span> [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-landroid<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-ljnigraphics<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-llog<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-lm<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-z defs<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-s<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-Wl,--icf=all<span class=\"pl-pds\">\"</span></span>,           <span class=\"pl-c\"><span class=\"pl-c\">#</span> Identical Code Folding</span>\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-Wl,--exclude-libs,ALL<span class=\"pl-pds\">\"</span></span>,  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Exclude syms in all libs from auto export</span>\n    ],\n    <span class=\"pl-v\">linkshared</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>,\n    <span class=\"pl-v\">linkstatic</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>,\n    <span class=\"pl-v\">tags</span> <span class=\"pl-k\">=</span> [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>manual<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>notap<span class=\"pl-pds\">\"</span></span>,\n    ],\n    <span class=\"pl-v\">deps</span> <span class=\"pl-k\">=</span> [\n    ]\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>\"@org_tensorflow//tensorflow/core:android_tensorflow_lib\"</span>\n)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> This library only exists as a workaround to satisfy dependencies</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> that declare -lpthread in their linkopts. Although Android supports</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> pthreads, it does not provide it as a separate library.</span>\ncc_binary(\n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>libpthread.so<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> [],\n    <span class=\"pl-v\">linkopts</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-shared<span class=\"pl-pds\">\"</span></span>],\n    <span class=\"pl-v\">tags</span> <span class=\"pl-k\">=</span> [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>manual<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>notap<span class=\"pl-pds\">\"</span></span>,\n    ],\n)\n\ncc_library(\n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>caloric_lab_native_libs<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>:libpthread.so<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>:caloric_lab.so<span class=\"pl-pds\">\"</span></span>\n    ],\n    <span class=\"pl-v\">tags</span> <span class=\"pl-k\">=</span> [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>manual<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>notap<span class=\"pl-pds\">\"</span></span>,\n    ],\n)\n\nandroid_binary(\n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>caloric_lab<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> glob([\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>src/**/*.java<span class=\"pl-pds\">\"</span></span>,\n    ]),\n    <span class=\"pl-v\">assets</span> <span class=\"pl-k\">=</span> glob([<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>assets/**<span class=\"pl-pds\">\"</span></span>]),\n    <span class=\"pl-v\">assets_dir</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>assets<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">custom_package</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.tensorflow.demo<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">inline_constants</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>,\n    <span class=\"pl-v\">manifest</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>AndroidManifest.xml<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">resource_files</span> <span class=\"pl-k\">=</span> glob([<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>res/**<span class=\"pl-pds\">\"</span></span>]),\n    <span class=\"pl-v\">tags</span> <span class=\"pl-k\">=</span> [\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>manual<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>notap<span class=\"pl-pds\">\"</span></span>,\n    ],\n    <span class=\"pl-v\">deps</span> <span class=\"pl-k\">=</span> [\n      <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>:caloric_lab_native_libs<span class=\"pl-pds\">\"</span></span>,\n    ],\n)\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>\"@org_tensorflow//tensorflow/core:android_tensorflow_lib\"</span>\n\nfilegroup(\n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>all_files<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> glob(\n        [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>**/*<span class=\"pl-pds\">\"</span></span>],\n        <span class=\"pl-v\">exclude</span> <span class=\"pl-k\">=</span> [\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>**/METADATA<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>**/OWNERS<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bin/**<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>gen/**<span class=\"pl-pds\">\"</span></span>,\n        ],\n    ),\n    <span class=\"pl-v\">visibility</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@org_tensorflow//tensorflow:__subpackages__<span class=\"pl-pds\">\"</span></span>],\n)\n\nfilegroup(\n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>java_files<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> glob([<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>src/**/*.java<span class=\"pl-pds\">\"</span></span>]),\n)\n\nfilegroup(\n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jni_files<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> glob([\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jni/**/*.cc<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jni/**/*.h<span class=\"pl-pds\">\"</span></span>,\n    ]),\n)\n\nfilegroup(\n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>resource_files<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> glob([<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>res/**<span class=\"pl-pds\">\"</span></span>]),\n)\n\nexports_files([<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>AndroidManifest.xml<span class=\"pl-pds\">\"</span></span>])</pre></div>\n<p>Thanks for your attention<br>\nVictor</p>", "body_text": "It does not seem possible to build an Android application where TensorFlow r0.9 is a submodule.\nThe trick should have been to set the correct path prefix and give a repository name, but it does not work:\ntf_workspace( path_prefix = tensorflow_path, tf_repo_name = \"@caloric_lab\" ) \nBazel: 0.2.1-homebrew\nOSX El Capitan\nWORKSPACE file:\ntensorflow_path = \u201cpath/to/tensorflow\"\n\nlocal_repository(\n    name = \"org_tensorflow\",\n    path = tensorflow_path\n)\n\nandroid_sdk_repository(\n    name = \"androidsdk\",\n    api_level = 23,\n    build_tools_version = \"23.0.3\",\n    # Replace with path to Android SDK on your system\n    path = \"/Users/<user>/Library/Android/sdk/\",\n)\n\nandroid_ndk_repository(\n    name=\"androidndk\",\n    path=\"/Users/<user>/workspace/android/android-ndk-r10e/\",\n    api_level=21)\n\n# Please add all new TensorFlow dependencies in workspace.bzl.\nload(\"@org_tensorflow//tensorflow:workspace.bzl\", \"tf_workspace\")\ntf_workspace(\n  path_prefix = tensorflow_path,\n  tf_repo_name = \"@caloric_lab\"\n )\n\n# Specify the minimum required bazel version.\nload(\"@org_tensorflow//tensorflow:tensorflow.bzl\", \"check_version\")\ncheck_version(\"0.2.0\")\n\nbind(\n name   = \"android_tensorflow_lib\",\n actual = \"@org_tensorflow//tensorflow/core:android_tensorflow_lib\"\n)\n\nBUILD file:\n# Description:\n#   Tensorflow camera demo app for Android.\n\n\n#package(default_visibility = [\"//visibility:public\"])\n\n#licenses([\"notice\"])  # Apache 2.0\n\nload(\"@org_tensorflow//tensorflow:tensorflow.bzl\", \"tf_copts\")\n\n#exports_files([\"LICENSE\"])\n\ncc_binary(\n    name = \"caloric_lab.so\",\n    srcs = glob([\n        \"jni/**/*.cc\",\n        \"jni/**/*.h\",\n    ]) + [\":libpthread.so\"],\n    copts = tf_copts(),\n    linkopts = [\n        \"-landroid\",\n        \"-ljnigraphics\",\n        \"-llog\",\n        \"-lm\",\n        \"-z defs\",\n        \"-s\",\n        \"-Wl,--icf=all\",           # Identical Code Folding\n        \"-Wl,--exclude-libs,ALL\",  # Exclude syms in all libs from auto export\n    ],\n    linkshared = 1,\n    linkstatic = 1,\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n    ]\n    #\"@org_tensorflow//tensorflow/core:android_tensorflow_lib\"\n)\n\n# This library only exists as a workaround to satisfy dependencies\n# that declare -lpthread in their linkopts. Although Android supports\n# pthreads, it does not provide it as a separate library.\ncc_binary(\n    name = \"libpthread.so\",\n    srcs = [],\n    linkopts = [\"-shared\"],\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n)\n\ncc_library(\n    name = \"caloric_lab_native_libs\",\n    srcs = [\n        \":libpthread.so\",\n        \":caloric_lab.so\"\n    ],\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n)\n\nandroid_binary(\n    name = \"caloric_lab\",\n    srcs = glob([\n        \"src/**/*.java\",\n    ]),\n    assets = glob([\"assets/**\"]),\n    assets_dir = \"assets\",\n    custom_package = \"org.tensorflow.demo\",\n    inline_constants = 1,\n    manifest = \"AndroidManifest.xml\",\n    resource_files = glob([\"res/**\"]),\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n      \":caloric_lab_native_libs\",\n    ],\n)\n#\"@org_tensorflow//tensorflow/core:android_tensorflow_lib\"\n\nfilegroup(\n    name = \"all_files\",\n    srcs = glob(\n        [\"**/*\"],\n        exclude = [\n            \"**/METADATA\",\n            \"**/OWNERS\",\n            \"bin/**\",\n            \"gen/**\",\n        ],\n    ),\n    visibility = [\"@org_tensorflow//tensorflow:__subpackages__\"],\n)\n\nfilegroup(\n    name = \"java_files\",\n    srcs = glob([\"src/**/*.java\"]),\n)\n\nfilegroup(\n    name = \"jni_files\",\n    srcs = glob([\n        \"jni/**/*.cc\",\n        \"jni/**/*.h\",\n    ]),\n)\n\nfilegroup(\n    name = \"resource_files\",\n    srcs = glob([\"res/**\"]),\n)\n\nexports_files([\"AndroidManifest.xml\"])\nThanks for your attention\nVictor", "body": "It does not seem possible to build an Android application where TensorFlow r0.9 is a submodule.\n\nThe trick should have been to set the correct path prefix and give a repository name, but it does not work:\n\n`tf_workspace(\n  path_prefix = tensorflow_path,\n  tf_repo_name = \"@caloric_lab\"\n )\n`\nBazel: 0.2.1-homebrew\nOSX El Capitan\n\nWORKSPACE file:\n\n```\ntensorflow_path = \u201cpath/to/tensorflow\"\n\nlocal_repository(\n    name = \"org_tensorflow\",\n    path = tensorflow_path\n)\n\nandroid_sdk_repository(\n    name = \"androidsdk\",\n    api_level = 23,\n    build_tools_version = \"23.0.3\",\n    # Replace with path to Android SDK on your system\n    path = \"/Users/<user>/Library/Android/sdk/\",\n)\n\nandroid_ndk_repository(\n    name=\"androidndk\",\n    path=\"/Users/<user>/workspace/android/android-ndk-r10e/\",\n    api_level=21)\n\n# Please add all new TensorFlow dependencies in workspace.bzl.\nload(\"@org_tensorflow//tensorflow:workspace.bzl\", \"tf_workspace\")\ntf_workspace(\n  path_prefix = tensorflow_path,\n  tf_repo_name = \"@caloric_lab\"\n )\n\n# Specify the minimum required bazel version.\nload(\"@org_tensorflow//tensorflow:tensorflow.bzl\", \"check_version\")\ncheck_version(\"0.2.0\")\n\nbind(\n name   = \"android_tensorflow_lib\",\n actual = \"@org_tensorflow//tensorflow/core:android_tensorflow_lib\"\n)\n```\n\nBUILD file:\n\n``` python\n# Description:\n#   Tensorflow camera demo app for Android.\n\n\n#package(default_visibility = [\"//visibility:public\"])\n\n#licenses([\"notice\"])  # Apache 2.0\n\nload(\"@org_tensorflow//tensorflow:tensorflow.bzl\", \"tf_copts\")\n\n#exports_files([\"LICENSE\"])\n\ncc_binary(\n    name = \"caloric_lab.so\",\n    srcs = glob([\n        \"jni/**/*.cc\",\n        \"jni/**/*.h\",\n    ]) + [\":libpthread.so\"],\n    copts = tf_copts(),\n    linkopts = [\n        \"-landroid\",\n        \"-ljnigraphics\",\n        \"-llog\",\n        \"-lm\",\n        \"-z defs\",\n        \"-s\",\n        \"-Wl,--icf=all\",           # Identical Code Folding\n        \"-Wl,--exclude-libs,ALL\",  # Exclude syms in all libs from auto export\n    ],\n    linkshared = 1,\n    linkstatic = 1,\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n    ]\n    #\"@org_tensorflow//tensorflow/core:android_tensorflow_lib\"\n)\n\n# This library only exists as a workaround to satisfy dependencies\n# that declare -lpthread in their linkopts. Although Android supports\n# pthreads, it does not provide it as a separate library.\ncc_binary(\n    name = \"libpthread.so\",\n    srcs = [],\n    linkopts = [\"-shared\"],\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n)\n\ncc_library(\n    name = \"caloric_lab_native_libs\",\n    srcs = [\n        \":libpthread.so\",\n        \":caloric_lab.so\"\n    ],\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n)\n\nandroid_binary(\n    name = \"caloric_lab\",\n    srcs = glob([\n        \"src/**/*.java\",\n    ]),\n    assets = glob([\"assets/**\"]),\n    assets_dir = \"assets\",\n    custom_package = \"org.tensorflow.demo\",\n    inline_constants = 1,\n    manifest = \"AndroidManifest.xml\",\n    resource_files = glob([\"res/**\"]),\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n      \":caloric_lab_native_libs\",\n    ],\n)\n#\"@org_tensorflow//tensorflow/core:android_tensorflow_lib\"\n\nfilegroup(\n    name = \"all_files\",\n    srcs = glob(\n        [\"**/*\"],\n        exclude = [\n            \"**/METADATA\",\n            \"**/OWNERS\",\n            \"bin/**\",\n            \"gen/**\",\n        ],\n    ),\n    visibility = [\"@org_tensorflow//tensorflow:__subpackages__\"],\n)\n\nfilegroup(\n    name = \"java_files\",\n    srcs = glob([\"src/**/*.java\"]),\n)\n\nfilegroup(\n    name = \"jni_files\",\n    srcs = glob([\n        \"jni/**/*.cc\",\n        \"jni/**/*.h\",\n    ]),\n)\n\nfilegroup(\n    name = \"resource_files\",\n    srcs = glob([\"res/**\"]),\n)\n\nexports_files([\"AndroidManifest.xml\"])\n```\n\nThanks for your attention\nVictor\n"}