{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21572", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21572/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21572/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21572/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21572", "id": 349985008, "node_id": "MDU6SXNzdWUzNDk5ODUwMDg=", "number": 21572, "title": "tf.estimator.train_and_evaluate got wrong Evaluation accuray and loss", "user": {"login": "honeytidy", "id": 1021165, "node_id": "MDQ6VXNlcjEwMjExNjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1021165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honeytidy", "html_url": "https://github.com/honeytidy", "followers_url": "https://api.github.com/users/honeytidy/followers", "following_url": "https://api.github.com/users/honeytidy/following{/other_user}", "gists_url": "https://api.github.com/users/honeytidy/gists{/gist_id}", "starred_url": "https://api.github.com/users/honeytidy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honeytidy/subscriptions", "organizations_url": "https://api.github.com/users/honeytidy/orgs", "repos_url": "https://api.github.com/users/honeytidy/repos", "events_url": "https://api.github.com/users/honeytidy/events{/privacy}", "received_events_url": "https://api.github.com/users/honeytidy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-08-13T11:08:50Z", "updated_at": "2018-10-11T17:55:36Z", "closed_at": "2018-08-30T09:10:25Z", "author_association": "NONE", "body_html": "<p>I use tf.estimator.train_and_evaluate to train and evaluate my model. This is my code:</p>\n<pre><code>def model_fn(features, labels, mode):\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n    with slim.arg_scope(resnet_v2.resnet_arg_scope()):\n        logits, endpoints = resnet_v2.resnet_v2_50(features, num_classes=cls_num,\n                is_training=is_training)\n    logits = tf.squeeze(logits, [1, 2])\n    preds = tf.argmax(logits, 1)\n    loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)\n    accuracy = tf.metrics.accuracy(labels=labels, predictions=preds)\n    metrics = {'accuracy': accuracy}\n    if mode == tf.estimator.ModeKeys.EVAL:\n        return tf.estimator.EstimatorSpec(mode, loss=loss, eval_metric_ops=metrics)\n    optimizer = tf.train.AdagradOptimizer(learning_rate=0.1)\n    train_op = optimizer.minimize(loss, global_step=tf.train.get_global_step())\n    return tf.estimator.EstimatorSpec(mode, loss=loss, train_op=train_op)\n\ndef train_input_fn():\n    dataset = tf.data.Dataset.from_tensor_slices((np.array(img_train), label_train))\n    dataset = dataset.repeat(5).batch(8)\n    return dataset\n\ndef eval_input_fn():\n    dataset = tf.data.Dataset.from_tensor_slices((np.array(img_test), label_test))\n    dataset = dataset.repeat(1).batch(8)\n    return dataset\n\nestimator = tf.estimator.Estimator(model_fn=model_fn, model_dir='logs')\ntrain_spec = tf.estimator.TrainSpec(input_fn=train_input_fn)\neval_specs = tf.estimator.EvalSpec(input_fn=eval_input_fn)\ntf.estimator.train_and_evaluate(estimator, train_spec, eval_specs)\n</code></pre>\n<p>The training step is ok and the loss became very small (about 0.001), but the evaluation result is wrong (the following is the evaluaiton log):</p>\n<pre><code>...\nINFO:tensorflow:Saving dict for global step 625: accuracy = 0.5, global_step = 625, loss = 1330830600000.0\n...\n</code></pre>\n<p>The task is very simple, just a binaray classfication. I don not think it is overfitting. Is there something wrong for my evaluation code?</p>", "body_text": "I use tf.estimator.train_and_evaluate to train and evaluate my model. This is my code:\ndef model_fn(features, labels, mode):\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n    with slim.arg_scope(resnet_v2.resnet_arg_scope()):\n        logits, endpoints = resnet_v2.resnet_v2_50(features, num_classes=cls_num,\n                is_training=is_training)\n    logits = tf.squeeze(logits, [1, 2])\n    preds = tf.argmax(logits, 1)\n    loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)\n    accuracy = tf.metrics.accuracy(labels=labels, predictions=preds)\n    metrics = {'accuracy': accuracy}\n    if mode == tf.estimator.ModeKeys.EVAL:\n        return tf.estimator.EstimatorSpec(mode, loss=loss, eval_metric_ops=metrics)\n    optimizer = tf.train.AdagradOptimizer(learning_rate=0.1)\n    train_op = optimizer.minimize(loss, global_step=tf.train.get_global_step())\n    return tf.estimator.EstimatorSpec(mode, loss=loss, train_op=train_op)\n\ndef train_input_fn():\n    dataset = tf.data.Dataset.from_tensor_slices((np.array(img_train), label_train))\n    dataset = dataset.repeat(5).batch(8)\n    return dataset\n\ndef eval_input_fn():\n    dataset = tf.data.Dataset.from_tensor_slices((np.array(img_test), label_test))\n    dataset = dataset.repeat(1).batch(8)\n    return dataset\n\nestimator = tf.estimator.Estimator(model_fn=model_fn, model_dir='logs')\ntrain_spec = tf.estimator.TrainSpec(input_fn=train_input_fn)\neval_specs = tf.estimator.EvalSpec(input_fn=eval_input_fn)\ntf.estimator.train_and_evaluate(estimator, train_spec, eval_specs)\n\nThe training step is ok and the loss became very small (about 0.001), but the evaluation result is wrong (the following is the evaluaiton log):\n...\nINFO:tensorflow:Saving dict for global step 625: accuracy = 0.5, global_step = 625, loss = 1330830600000.0\n...\n\nThe task is very simple, just a binaray classfication. I don not think it is overfitting. Is there something wrong for my evaluation code?", "body": "I use tf.estimator.train_and_evaluate to train and evaluate my model. This is my code:\r\n\r\n```\r\ndef model_fn(features, labels, mode):\r\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\r\n    with slim.arg_scope(resnet_v2.resnet_arg_scope()):\r\n        logits, endpoints = resnet_v2.resnet_v2_50(features, num_classes=cls_num,\r\n                is_training=is_training)\r\n    logits = tf.squeeze(logits, [1, 2])\r\n    preds = tf.argmax(logits, 1)\r\n    loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)\r\n    accuracy = tf.metrics.accuracy(labels=labels, predictions=preds)\r\n    metrics = {'accuracy': accuracy}\r\n    if mode == tf.estimator.ModeKeys.EVAL:\r\n        return tf.estimator.EstimatorSpec(mode, loss=loss, eval_metric_ops=metrics)\r\n    optimizer = tf.train.AdagradOptimizer(learning_rate=0.1)\r\n    train_op = optimizer.minimize(loss, global_step=tf.train.get_global_step())\r\n    return tf.estimator.EstimatorSpec(mode, loss=loss, train_op=train_op)\r\n\r\ndef train_input_fn():\r\n    dataset = tf.data.Dataset.from_tensor_slices((np.array(img_train), label_train))\r\n    dataset = dataset.repeat(5).batch(8)\r\n    return dataset\r\n\r\ndef eval_input_fn():\r\n    dataset = tf.data.Dataset.from_tensor_slices((np.array(img_test), label_test))\r\n    dataset = dataset.repeat(1).batch(8)\r\n    return dataset\r\n\r\nestimator = tf.estimator.Estimator(model_fn=model_fn, model_dir='logs')\r\ntrain_spec = tf.estimator.TrainSpec(input_fn=train_input_fn)\r\neval_specs = tf.estimator.EvalSpec(input_fn=eval_input_fn)\r\ntf.estimator.train_and_evaluate(estimator, train_spec, eval_specs)\r\n```\r\nThe training step is ok and the loss became very small (about 0.001), but the evaluation result is wrong (the following is the evaluaiton log):\r\n\r\n```\r\n...\r\nINFO:tensorflow:Saving dict for global step 625: accuracy = 0.5, global_step = 625, loss = 1330830600000.0\r\n...\r\n```\r\nThe task is very simple, just a binaray classfication. I don not think it is overfitting. Is there something wrong for my evaluation code?"}