{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/347686629", "html_url": "https://github.com/tensorflow/tensorflow/issues/14914#issuecomment-347686629", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14914", "id": 347686629, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzY4NjYyOQ==", "user": {"login": "lvilnis", "id": 994930, "node_id": "MDQ6VXNlcjk5NDkzMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/994930?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lvilnis", "html_url": "https://github.com/lvilnis", "followers_url": "https://api.github.com/users/lvilnis/followers", "following_url": "https://api.github.com/users/lvilnis/following{/other_user}", "gists_url": "https://api.github.com/users/lvilnis/gists{/gist_id}", "starred_url": "https://api.github.com/users/lvilnis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lvilnis/subscriptions", "organizations_url": "https://api.github.com/users/lvilnis/orgs", "repos_url": "https://api.github.com/users/lvilnis/repos", "events_url": "https://api.github.com/users/lvilnis/events{/privacy}", "received_events_url": "https://api.github.com/users/lvilnis/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-28T22:33:16Z", "updated_at": "2017-11-28T22:33:16Z", "author_association": "NONE", "body_html": "<p>Yeah as does regular python, for not just xor:</p>\n<pre><code>&gt;&gt;&gt; True &amp; True\nTrue\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.bool\n&lt;type 'bool'&gt;\n&gt;&gt;&gt; a=np.asarray([True,False,False,True],dtype=np.bool)\n&gt;&gt;&gt; b=np.asarray([False,False,True,True],dtype=np.bool)\n&gt;&gt;&gt; a ^ b\narray([ True, False,  True, False], dtype=bool)\n&gt;&gt;&gt; a &amp; b\narray([False, False, False,  True], dtype=bool)\n&gt;&gt;&gt; a | b\narray([ True, False,  True,  True], dtype=bool)\n&gt;&gt;&gt; \n</code></pre>\n<p>This is actually better than overriding \"and\" and \"or\" because these TF operators never shortcircuit AFAIK. This would be really nice to have in regular mode, not just immediate.</p>", "body_text": "Yeah as does regular python, for not just xor:\n>>> True & True\nTrue\n>>> import numpy as np\n>>> np.bool\n<type 'bool'>\n>>> a=np.asarray([True,False,False,True],dtype=np.bool)\n>>> b=np.asarray([False,False,True,True],dtype=np.bool)\n>>> a ^ b\narray([ True, False,  True, False], dtype=bool)\n>>> a & b\narray([False, False, False,  True], dtype=bool)\n>>> a | b\narray([ True, False,  True,  True], dtype=bool)\n>>> \n\nThis is actually better than overriding \"and\" and \"or\" because these TF operators never shortcircuit AFAIK. This would be really nice to have in regular mode, not just immediate.", "body": "Yeah as does regular python, for not just xor:\r\n\r\n```\r\n>>> True & True\r\nTrue\r\n>>> import numpy as np\r\n>>> np.bool\r\n<type 'bool'>\r\n>>> a=np.asarray([True,False,False,True],dtype=np.bool)\r\n>>> b=np.asarray([False,False,True,True],dtype=np.bool)\r\n>>> a ^ b\r\narray([ True, False,  True, False], dtype=bool)\r\n>>> a & b\r\narray([False, False, False,  True], dtype=bool)\r\n>>> a | b\r\narray([ True, False,  True,  True], dtype=bool)\r\n>>> \r\n```\r\n\r\nThis is actually better than overriding \"and\" and \"or\" because these TF operators never shortcircuit AFAIK. This would be really nice to have in regular mode, not just immediate."}