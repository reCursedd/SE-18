{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/360655394", "html_url": "https://github.com/tensorflow/tensorflow/issues/14181#issuecomment-360655394", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14181", "id": 360655394, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDY1NTM5NA==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-26T01:19:36Z", "updated_at": "2018-01-26T01:19:36Z", "author_association": "MEMBER", "body_html": "<p>I don't think this bug has a reasonable solution, so I'm going to close.</p>\n<p>I don't want to run gc.collect() manually. We make Graphs for Defuns (and therefore Dataset map_funcs) and every time a ResourceVariable is created. It requires a sweep through all objects and could slow down graph building significantly.</p>\n<p>It is <a href=\"https://github.com/tensorflow/tensorflow/blob/8a87518ae7074d5a0da779089e7024cd0920bba4/tensorflow/python/ops/resource_variable_ops.py#L77\">possible to allow a graph's memory to be freed</a> without running the garbage collector, but it's sufficiently niche that I don't think it warrants a new \"manual graph delete\" API (but if someone wants to factor that into python.util as a non-public-API utility I'm happy to review a pull request).</p>\n<p>Otherwise eager execution allows continually redefining what gets executed without creating work for the garbage collector.</p>", "body_text": "I don't think this bug has a reasonable solution, so I'm going to close.\nI don't want to run gc.collect() manually. We make Graphs for Defuns (and therefore Dataset map_funcs) and every time a ResourceVariable is created. It requires a sweep through all objects and could slow down graph building significantly.\nIt is possible to allow a graph's memory to be freed without running the garbage collector, but it's sufficiently niche that I don't think it warrants a new \"manual graph delete\" API (but if someone wants to factor that into python.util as a non-public-API utility I'm happy to review a pull request).\nOtherwise eager execution allows continually redefining what gets executed without creating work for the garbage collector.", "body": "I don't think this bug has a reasonable solution, so I'm going to close.\r\n\r\nI don't want to run gc.collect() manually. We make Graphs for Defuns (and therefore Dataset map_funcs) and every time a ResourceVariable is created. It requires a sweep through all objects and could slow down graph building significantly.\r\n\r\nIt is [possible to allow a graph's memory to be freed](https://github.com/tensorflow/tensorflow/blob/8a87518ae7074d5a0da779089e7024cd0920bba4/tensorflow/python/ops/resource_variable_ops.py#L77) without running the garbage collector, but it's sufficiently niche that I don't think it warrants a new \"manual graph delete\" API (but if someone wants to factor that into python.util as a non-public-API utility I'm happy to review a pull request).\r\n\r\nOtherwise eager execution allows continually redefining what gets executed without creating work for the garbage collector.\r\n\r\n"}