{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/729", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/729/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/729/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/729/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/729", "id": 125703679, "node_id": "MDU6SXNzdWUxMjU3MDM2Nzk=", "number": 729, "title": "Parameter Server in python", "user": {"login": "illuzen", "id": 6833917, "node_id": "MDQ6VXNlcjY4MzM5MTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6833917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/illuzen", "html_url": "https://github.com/illuzen", "followers_url": "https://api.github.com/users/illuzen/followers", "following_url": "https://api.github.com/users/illuzen/following{/other_user}", "gists_url": "https://api.github.com/users/illuzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/illuzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/illuzen/subscriptions", "organizations_url": "https://api.github.com/users/illuzen/orgs", "repos_url": "https://api.github.com/users/illuzen/repos", "events_url": "https://api.github.com/users/illuzen/events{/privacy}", "received_events_url": "https://api.github.com/users/illuzen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-08T22:01:15Z", "updated_at": "2016-01-08T23:01:53Z", "closed_at": "2016-01-08T23:01:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hello, I'm trying to implement an asynchronous parameter server, DistBelief style using TensorFlow. I found that minimize() is split into two functions, compute_gradients and apply_gradients, so my plan is to insert a network boundary between them. I have a question about how to evaluate all the gradients simultaneously and pull them out all at once. I understand that eval only evaluates the subgraph necessary, but it also only returns one tensor, not the chain of tensors required to compute that tensor.</p>\n<p>How can I do this more efficiently? I took the Deep MNIST example as a starting point:</p>\n<pre><code>import tensorflow as tf\nimport download_mnist\n\ndef weight_variable(shape, name):\n   initial = tf.truncated_normal(shape, stddev=0.1)\n   return tf.Variable(initial, name=name)\n\ndef bias_variable(shape, name):\n   initial = tf.constant(0.1, shape=shape)\n   return tf.Variable(initial, name=name)\n\ndef conv2d(x, W):\n   return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n   return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                         strides=[1, 2, 2, 1], padding='SAME')\n\nmnist = download_mnist.read_data_sets('MNIST_data', one_hot=True)\nsession = tf.InteractiveSession()\nx = tf.placeholder(\"float\", shape=[None, 784], name='x')\nx_image = tf.reshape(x, [-1,28,28,1], name='reshape')\ny_ = tf.placeholder(\"float\", shape=[None, 10], name='y_')\nW_conv1 = weight_variable([5, 5, 1, 32], 'W_conv1')\nb_conv1 = bias_variable([32], 'b_conv1')\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\nW_conv2 = weight_variable([5, 5, 32, 64], 'W_conv2')\nb_conv2 = bias_variable([64], 'b_conv2')\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\nW_fc1 = weight_variable([7 * 7 * 64, 1024], 'W_fc1')\nb_fc1 = bias_variable([1024], 'b_fc1')\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\nkeep_prob = tf.placeholder(\"float\", name='keep_prob')\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\nW_fc2 = weight_variable([1024, 10], 'W_fc2')\nb_fc2 = bias_variable([10], 'b_fc2')\ny_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n\nvariables = [W_conv1, b_conv1, W_conv2, b_conv2, W_fc1, b_fc1, W_fc2, b_fc2]\nloss = -tf.reduce_sum(y_ * tf.log(y_conv))\noptimizer = tf.train.AdamOptimizer(1e-4)\ncorrect_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\ncompute_gradients = optimizer.compute_gradients(loss)\nsession.run(tf.initialize_all_variables())\n\nbatch = mnist.train.next_batch(50)\nfeed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5}\n\n\ngradients = []\nfor grad_var in compute_gradients:\n    grad = grad_var[0].eval(feed_dict=feed_dict)\n    var = grad_var[1]\n    gradients.append((grad, var))\n</code></pre>\n<p>I think this last for loop is actually recalculating the last gradient several times, whereas the first gradient is computed only once? How can I grab all the gradients without recomputing them?</p>", "body_text": "Hello, I'm trying to implement an asynchronous parameter server, DistBelief style using TensorFlow. I found that minimize() is split into two functions, compute_gradients and apply_gradients, so my plan is to insert a network boundary between them. I have a question about how to evaluate all the gradients simultaneously and pull them out all at once. I understand that eval only evaluates the subgraph necessary, but it also only returns one tensor, not the chain of tensors required to compute that tensor.\nHow can I do this more efficiently? I took the Deep MNIST example as a starting point:\nimport tensorflow as tf\nimport download_mnist\n\ndef weight_variable(shape, name):\n   initial = tf.truncated_normal(shape, stddev=0.1)\n   return tf.Variable(initial, name=name)\n\ndef bias_variable(shape, name):\n   initial = tf.constant(0.1, shape=shape)\n   return tf.Variable(initial, name=name)\n\ndef conv2d(x, W):\n   return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n   return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                         strides=[1, 2, 2, 1], padding='SAME')\n\nmnist = download_mnist.read_data_sets('MNIST_data', one_hot=True)\nsession = tf.InteractiveSession()\nx = tf.placeholder(\"float\", shape=[None, 784], name='x')\nx_image = tf.reshape(x, [-1,28,28,1], name='reshape')\ny_ = tf.placeholder(\"float\", shape=[None, 10], name='y_')\nW_conv1 = weight_variable([5, 5, 1, 32], 'W_conv1')\nb_conv1 = bias_variable([32], 'b_conv1')\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\nW_conv2 = weight_variable([5, 5, 32, 64], 'W_conv2')\nb_conv2 = bias_variable([64], 'b_conv2')\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\nW_fc1 = weight_variable([7 * 7 * 64, 1024], 'W_fc1')\nb_fc1 = bias_variable([1024], 'b_fc1')\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\nkeep_prob = tf.placeholder(\"float\", name='keep_prob')\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\nW_fc2 = weight_variable([1024, 10], 'W_fc2')\nb_fc2 = bias_variable([10], 'b_fc2')\ny_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n\nvariables = [W_conv1, b_conv1, W_conv2, b_conv2, W_fc1, b_fc1, W_fc2, b_fc2]\nloss = -tf.reduce_sum(y_ * tf.log(y_conv))\noptimizer = tf.train.AdamOptimizer(1e-4)\ncorrect_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\ncompute_gradients = optimizer.compute_gradients(loss)\nsession.run(tf.initialize_all_variables())\n\nbatch = mnist.train.next_batch(50)\nfeed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5}\n\n\ngradients = []\nfor grad_var in compute_gradients:\n    grad = grad_var[0].eval(feed_dict=feed_dict)\n    var = grad_var[1]\n    gradients.append((grad, var))\n\nI think this last for loop is actually recalculating the last gradient several times, whereas the first gradient is computed only once? How can I grab all the gradients without recomputing them?", "body": "Hello, I'm trying to implement an asynchronous parameter server, DistBelief style using TensorFlow. I found that minimize() is split into two functions, compute_gradients and apply_gradients, so my plan is to insert a network boundary between them. I have a question about how to evaluate all the gradients simultaneously and pull them out all at once. I understand that eval only evaluates the subgraph necessary, but it also only returns one tensor, not the chain of tensors required to compute that tensor.\n\nHow can I do this more efficiently? I took the Deep MNIST example as a starting point:\n\n```\nimport tensorflow as tf\nimport download_mnist\n\ndef weight_variable(shape, name):\n   initial = tf.truncated_normal(shape, stddev=0.1)\n   return tf.Variable(initial, name=name)\n\ndef bias_variable(shape, name):\n   initial = tf.constant(0.1, shape=shape)\n   return tf.Variable(initial, name=name)\n\ndef conv2d(x, W):\n   return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n   return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                         strides=[1, 2, 2, 1], padding='SAME')\n\nmnist = download_mnist.read_data_sets('MNIST_data', one_hot=True)\nsession = tf.InteractiveSession()\nx = tf.placeholder(\"float\", shape=[None, 784], name='x')\nx_image = tf.reshape(x, [-1,28,28,1], name='reshape')\ny_ = tf.placeholder(\"float\", shape=[None, 10], name='y_')\nW_conv1 = weight_variable([5, 5, 1, 32], 'W_conv1')\nb_conv1 = bias_variable([32], 'b_conv1')\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\nW_conv2 = weight_variable([5, 5, 32, 64], 'W_conv2')\nb_conv2 = bias_variable([64], 'b_conv2')\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\nW_fc1 = weight_variable([7 * 7 * 64, 1024], 'W_fc1')\nb_fc1 = bias_variable([1024], 'b_fc1')\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\nkeep_prob = tf.placeholder(\"float\", name='keep_prob')\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\nW_fc2 = weight_variable([1024, 10], 'W_fc2')\nb_fc2 = bias_variable([10], 'b_fc2')\ny_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n\nvariables = [W_conv1, b_conv1, W_conv2, b_conv2, W_fc1, b_fc1, W_fc2, b_fc2]\nloss = -tf.reduce_sum(y_ * tf.log(y_conv))\noptimizer = tf.train.AdamOptimizer(1e-4)\ncorrect_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\ncompute_gradients = optimizer.compute_gradients(loss)\nsession.run(tf.initialize_all_variables())\n\nbatch = mnist.train.next_batch(50)\nfeed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5}\n\n\ngradients = []\nfor grad_var in compute_gradients:\n    grad = grad_var[0].eval(feed_dict=feed_dict)\n    var = grad_var[1]\n    gradients.append((grad, var))\n```\n\nI think this last for loop is actually recalculating the last gradient several times, whereas the first gradient is computed only once? How can I grab all the gradients without recomputing them?\n"}