{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21239", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21239/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21239/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21239/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21239", "id": 345685373, "node_id": "MDU6SXNzdWUzNDU2ODUzNzM=", "number": 21239, "title": "GPU doesn't work when I request PoseNet API (@tensorflow-models/posenet) with node.js and express", "user": {"login": "j20232", "id": 13940471, "node_id": "MDQ6VXNlcjEzOTQwNDcx", "avatar_url": "https://avatars3.githubusercontent.com/u/13940471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/j20232", "html_url": "https://github.com/j20232", "followers_url": "https://api.github.com/users/j20232/followers", "following_url": "https://api.github.com/users/j20232/following{/other_user}", "gists_url": "https://api.github.com/users/j20232/gists{/gist_id}", "starred_url": "https://api.github.com/users/j20232/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/j20232/subscriptions", "organizations_url": "https://api.github.com/users/j20232/orgs", "repos_url": "https://api.github.com/users/j20232/repos", "events_url": "https://api.github.com/users/j20232/events{/privacy}", "received_events_url": "https://api.github.com/users/j20232/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "poxvoculi", "id": 15676913, "node_id": "MDQ6VXNlcjE1Njc2OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/15676913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poxvoculi", "html_url": "https://github.com/poxvoculi", "followers_url": "https://api.github.com/users/poxvoculi/followers", "following_url": "https://api.github.com/users/poxvoculi/following{/other_user}", "gists_url": "https://api.github.com/users/poxvoculi/gists{/gist_id}", "starred_url": "https://api.github.com/users/poxvoculi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poxvoculi/subscriptions", "organizations_url": "https://api.github.com/users/poxvoculi/orgs", "repos_url": "https://api.github.com/users/poxvoculi/repos", "events_url": "https://api.github.com/users/poxvoculi/events{/privacy}", "received_events_url": "https://api.github.com/users/poxvoculi/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-07-30T09:44:33Z", "updated_at": "2018-08-02T05:18:39Z", "closed_at": "2018-08-02T05:18:39Z", "author_association": "NONE", "body_html": "<h3>Problem</h3>\n<p>Excuse me.<br>\nI implemented demo app with tensorflow-models/posenet, node.js and express.<br>\nI replaced the sample code as follows, but GPU may not work when executing estimateMultiplePoses().<br>\nCould you tell me how to run my code on GPU?</p>\n<p>For example, I got a very low response when I post my API to a localhost server.</p>\n<pre><code>$curl -X POST -F thumbnail=@./picture.png localhost:3000/upload\n</code></pre>\n<p>[At server log]<br>\nI want to get the response less than 100 ms.<br>\nI got the response less than 30 ms when I didn't use PoseNet API, so thought that this low response was caused by not running on GPU.</p>\n<pre><code>POST /upload 200 2110.888 ms - 9372\n</code></pre>\n<p>However,  the process may be alive when building the server.</p>\n<pre><code>$ nvidia-smi\nTue Jul 31 10:27:38 2018       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 396.37                 Driver Version: 396.37                    |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  GeForce GTX 107...  On   | 00000000:01:00.0  On |                  N/A |\n| 27%   40C    P8    13W / 180W |   7732MiB /  8116MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n|   1  GeForce GTX 107...  On   | 00000000:02:00.0 Off |                  N/A |\n| 27%   38C    P8    12W / 180W |   7723MiB /  8119MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID   Type   Process name                             Usage      |\n|=============================================================================|\n|    0      1252      G   /usr/lib/xorg/Xorg                           281MiB |\n|    0      2068      G   compiz                                       226MiB |\n|    0      2435      G   ...-token=...                                 61MiB |\n|    0      2697      G   unity-control-center                          15MiB |\n|    0      2945      G   ...-token=...                                 92MiB |\n|    0     14062      G   ...-token=...                                 66MiB |\n|    0     26892      C   node                                        6983MiB |\n|    1     26892      C   node                                        7711MiB |\n+-----------------------------------------------------------------------------+\n\n</code></pre>\n<p>regards.</p>\n<hr>\n<h3>Custom Code</h3>\n<p>./routes/index.js</p>\n<pre><code>\nvar posenet = require('@tensorflow-models/posenet');\nvar tf = require('@tensorflow/tfjs');\nrequire('@tensorflow/tfjs-node-gpu');\n\nvar express = require('express');\nvar router = express.Router();\nvar multer = require('multer');\nvar upload = multer({dest: \"./uploads/\"}).single('thumbnail');\nvar Canvas = require('canvas');\nvar Image = Canvas.Image;\n\nconst state = {\n  input: {\n    imageScaleFactor: 0.5,\n    flipHorizontal: false,\n    outputStride: 16,\n  },\n  detection: {\n    maxPoseDetections: 5,\n    minPoseConfidence: 0.15,\n    minPartConfidence: 0.1,\n    nmsRadius: 30.0,\n  },\n};\n\nfunction createHTMLCanvasElementFromRequest(req){\n    const img = new Image;\n    img.src = req.file.path;\n    const canvas = new Canvas(img.width,img.height); \n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(img, 0, 0, img.width, img.height);\n    return canvas;\n}\n\nfunction detectPoses(req, res){\n  const canvas = createHTMLCanvasElementFromRequest(req);\n  async function usePoseNet(req){\n    const net = await posenet.load();\n    const poses = await net.estimateMultiplePoses(  canvas, \n                                                  state.input.imageScaleFactor, \n                                                  state.input.flipHorizontal, \n                                                  state.input.outputStride, \n                                                  state.detection.maxPoseDetections,\n                                                  state.detection.minPartConfidence, \n                                                  state.detection.nmsRadius);\n    return poses;\n  }\n  usePoseNet(req).then( json_res =&gt;{\n    res.send({\n        \"OriginalName\": req.file.originalname,\n        \"FileName\": req.file.filename,\n        \"Size\": req.file.size,\n        \"Width\": canvas.width,\n        \"Height\": canvas.height,\n        \"Context\": json_res\n    })\n  }).catch(e =&gt; {\n    res.send({\n        \"Error\": e\n    });\n  });\n}\n\nfunction failedToGetImages(req,res, err){\n  res.send({\n        \"Destination\": req.file.destination,\n        \"Error\": err\n      });\n}\n\nrouter.post('/upload', function(req, res){\n  upload(req, res, function(err){\n    res.header('Content-Type', 'application/json; charset=utf-8');\n    err? failedToGetImages(req,res,err) : detectPoses(req, res);\n  });\n});\n\nmodule.exports = router;\n\n</code></pre>\n<hr>\n<p>./app.js</p>\n<pre><code>\nvar createError = require('http-errors');\nvar express = require('express');\nvar path = require('path');\nvar cookieParser = require('cookie-parser');\nvar logger = require('morgan');\n\nvar indexRouter = require('./routes/index');\n\nvar app = express();\n\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(cookieParser());\napp.use(express.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', indexRouter);\n\napp.use(function (req, res, next) {\n  res.header('Access-Control-Allow-Origin', req.headers.origin);\n  res.header('Access-Control-Allow-Headers', 'X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept');\n  res.header('Access-Control-Allow-Methods', 'POST, GET, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Credentials', true);\n  res.header('Access-Control-Max-Age', '86400');\n  next();\n});\n\napp.options('*', function (req, res) {\n  res.sendStatus(200);\n});\n\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\n\nmodule.exports = app;\n\n</code></pre>\n<hr>\n<p>./bin/www</p>\n<pre><code>\n#!/usr/bin/env node\n\nvar app = require('../app');\nvar debug = require('debug')('roboserver:server');\nvar http = require('http');\n\nvar port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\nvar server = http.createServer(app);\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port &gt;= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n\n</code></pre>\n<hr>\n<h3>System information</h3>\n<ul>\n<li>OS Platform and Distribution:  ubuntu 16.04.4 LTS</li>\n<li>TensorFlow installed from: <a href=\"https://github.com/tensorflow/tfjs\">https://github.com/tensorflow/tfjs</a></li>\n<li>TensorFlow version: 0.12.0</li>\n<li>Bazel version: N/A</li>\n<li>CUDA/ cuDNN: 8.0/6.0</li>\n<li>GPU model and memory: GeForce GTX 1070 Ti 8GB * 2</li>\n<li>Memory:<br>\nSMBIOS 3.0.0 present.<br>\nHandle 0x0043, DMI type 16, 23 bytes<br>\nPhysical Memory Array<br>\nLocation: System Board Or Motherboard<br>\nUse: System Memory<br>\nError Correction Type: None<br>\nMaximum Capacity: 32 GB<br>\nError Information Handle: Not Provided<br>\nNumber Of Devices: 2</li>\n</ul>\n<p>Handle 0x0044, DMI type 17, 40 bytes<br>\nMemory Device<br>\nArray Handle: 0x0043<br>\nError Information Handle: Not Provided<br>\nTotal Width: Unknown<br>\nData Width: Unknown<br>\nSize: No Module Installed<br>\nForm Factor: Unknown<br>\nSet: None<br>\nLocator: ChannelA-DIMM1<br>\nBank Locator: BANK 0<br>\nType: Unknown<br>\nType Detail: None<br>\nSpeed: Unknown<br>\nManufacturer: Not Specified<br>\nSerial Number: Not Specified<br>\nAsset Tag: Not Specified<br>\nPart Number: Not Specified<br>\nRank: Unknown<br>\nConfigured Clock Speed: Unknown<br>\nMinimum Voltage: Unknown<br>\nMaximum Voltage: Unknown<br>\nConfigured Voltage: Unknown</p>\n<p>Handle 0x0045, DMI type 17, 40 bytes<br>\nMemory Device<br>\nArray Handle: 0x0043<br>\nError Information Handle: Not Provided<br>\nTotal Width: 64 bits<br>\nData Width: 64 bits<br>\nSize: 16384 MB<br>\nForm Factor: DIMM<br>\nSet: None<br>\nLocator: ChannelA-DIMM2<br>\nBank Locator: BANK 1<br>\nType: DDR4<br>\nType Detail: Synchronous Unbuffered (Unregistered)<br>\nSpeed: 2133 MHz<br>\nManufacturer: Corsair<br>\nSerial Number: 00000000<br>\nAsset Tag: 9876543210<br>\nPart Number: CMK32GX4M2B3000C15<br>\nRank: 2<br>\nConfigured Clock Speed: 2133 MHz<br>\nMinimum Voltage: Unknown<br>\nMaximum Voltage: Unknown<br>\nConfigured Voltage: 1.2 V</p>\n<p>Handle 0x0046, DMI type 17, 40 bytes<br>\nMemory Device<br>\nArray Handle: 0x0043<br>\nError Information Handle: Not Provided<br>\nTotal Width: Unknown<br>\nData Width: Unknown<br>\nSize: No Module Installed<br>\nForm Factor: Unknown<br>\nSet: None<br>\nLocator: ChannelB-DIMM1<br>\nBank Locator: BANK 2<br>\nType: Unknown<br>\nType Detail: None<br>\nSpeed: Unknown<br>\nManufacturer: Not Specified<br>\nSerial Number: Not Specified<br>\nAsset Tag: Not Specified<br>\nPart Number: Not Specified<br>\nRank: Unknown<br>\nConfigured Clock Speed: Unknown<br>\nMinimum Voltage: Unknown<br>\nMaximum Voltage: Unknown<br>\nConfigured Voltage: Unknown</p>\n<p>Handle 0x0047, DMI type 17, 40 bytes<br>\nMemory Device<br>\nArray Handle: 0x0043<br>\nError Information Handle: Not Provided<br>\nTotal Width: 64 bits<br>\nData Width: 64 bits<br>\nSize: 16384 MB<br>\nForm Factor: DIMM<br>\nSet: None<br>\nLocator: ChannelB-DIMM2<br>\nBank Locator: BANK 3<br>\nType: DDR4<br>\nType Detail: Synchronous Unbuffered (Unregistered)<br>\nSpeed: 2133 MHz<br>\nManufacturer: Corsair<br>\nSerial Number: 00000000<br>\nAsset Tag: 9876543210<br>\nPart Number: CMK32GX4M2B3000C15<br>\nRank: 2<br>\nConfigured Clock Speed: 2133 MHz<br>\nMinimum Voltage: Unknown<br>\nMaximum Voltage: Unknown<br>\nConfigured Voltage: 1.2 V</p>\n<ul>\n<li>Exact command to reproduce: node ./bin/www</li>\n<li>Mobile device: N/A</li>\n<li>Browser: Google Chrome</li>\n<li>npm: 6.1.0</li>\n<li>node: 10.6.0</li>\n<li>@tensorflow-models/posenet: 0.2.2</li>\n<li>@tensorflow/tfjs-node: 0.1.9</li>\n<li>@tensorflow/tfjs-node-gpu: 0.1.9</li>\n<li>gcc: 5.4.0</li>\n</ul>", "body_text": "Problem\nExcuse me.\nI implemented demo app with tensorflow-models/posenet, node.js and express.\nI replaced the sample code as follows, but GPU may not work when executing estimateMultiplePoses().\nCould you tell me how to run my code on GPU?\nFor example, I got a very low response when I post my API to a localhost server.\n$curl -X POST -F thumbnail=@./picture.png localhost:3000/upload\n\n[At server log]\nI want to get the response less than 100 ms.\nI got the response less than 30 ms when I didn't use PoseNet API, so thought that this low response was caused by not running on GPU.\nPOST /upload 200 2110.888 ms - 9372\n\nHowever,  the process may be alive when building the server.\n$ nvidia-smi\nTue Jul 31 10:27:38 2018       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 396.37                 Driver Version: 396.37                    |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  GeForce GTX 107...  On   | 00000000:01:00.0  On |                  N/A |\n| 27%   40C    P8    13W / 180W |   7732MiB /  8116MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n|   1  GeForce GTX 107...  On   | 00000000:02:00.0 Off |                  N/A |\n| 27%   38C    P8    12W / 180W |   7723MiB /  8119MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID   Type   Process name                             Usage      |\n|=============================================================================|\n|    0      1252      G   /usr/lib/xorg/Xorg                           281MiB |\n|    0      2068      G   compiz                                       226MiB |\n|    0      2435      G   ...-token=...                                 61MiB |\n|    0      2697      G   unity-control-center                          15MiB |\n|    0      2945      G   ...-token=...                                 92MiB |\n|    0     14062      G   ...-token=...                                 66MiB |\n|    0     26892      C   node                                        6983MiB |\n|    1     26892      C   node                                        7711MiB |\n+-----------------------------------------------------------------------------+\n\n\nregards.\n\nCustom Code\n./routes/index.js\n\nvar posenet = require('@tensorflow-models/posenet');\nvar tf = require('@tensorflow/tfjs');\nrequire('@tensorflow/tfjs-node-gpu');\n\nvar express = require('express');\nvar router = express.Router();\nvar multer = require('multer');\nvar upload = multer({dest: \"./uploads/\"}).single('thumbnail');\nvar Canvas = require('canvas');\nvar Image = Canvas.Image;\n\nconst state = {\n  input: {\n    imageScaleFactor: 0.5,\n    flipHorizontal: false,\n    outputStride: 16,\n  },\n  detection: {\n    maxPoseDetections: 5,\n    minPoseConfidence: 0.15,\n    minPartConfidence: 0.1,\n    nmsRadius: 30.0,\n  },\n};\n\nfunction createHTMLCanvasElementFromRequest(req){\n    const img = new Image;\n    img.src = req.file.path;\n    const canvas = new Canvas(img.width,img.height); \n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(img, 0, 0, img.width, img.height);\n    return canvas;\n}\n\nfunction detectPoses(req, res){\n  const canvas = createHTMLCanvasElementFromRequest(req);\n  async function usePoseNet(req){\n    const net = await posenet.load();\n    const poses = await net.estimateMultiplePoses(  canvas, \n                                                  state.input.imageScaleFactor, \n                                                  state.input.flipHorizontal, \n                                                  state.input.outputStride, \n                                                  state.detection.maxPoseDetections,\n                                                  state.detection.minPartConfidence, \n                                                  state.detection.nmsRadius);\n    return poses;\n  }\n  usePoseNet(req).then( json_res =>{\n    res.send({\n        \"OriginalName\": req.file.originalname,\n        \"FileName\": req.file.filename,\n        \"Size\": req.file.size,\n        \"Width\": canvas.width,\n        \"Height\": canvas.height,\n        \"Context\": json_res\n    })\n  }).catch(e => {\n    res.send({\n        \"Error\": e\n    });\n  });\n}\n\nfunction failedToGetImages(req,res, err){\n  res.send({\n        \"Destination\": req.file.destination,\n        \"Error\": err\n      });\n}\n\nrouter.post('/upload', function(req, res){\n  upload(req, res, function(err){\n    res.header('Content-Type', 'application/json; charset=utf-8');\n    err? failedToGetImages(req,res,err) : detectPoses(req, res);\n  });\n});\n\nmodule.exports = router;\n\n\n\n./app.js\n\nvar createError = require('http-errors');\nvar express = require('express');\nvar path = require('path');\nvar cookieParser = require('cookie-parser');\nvar logger = require('morgan');\n\nvar indexRouter = require('./routes/index');\n\nvar app = express();\n\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(cookieParser());\napp.use(express.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', indexRouter);\n\napp.use(function (req, res, next) {\n  res.header('Access-Control-Allow-Origin', req.headers.origin);\n  res.header('Access-Control-Allow-Headers', 'X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept');\n  res.header('Access-Control-Allow-Methods', 'POST, GET, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Credentials', true);\n  res.header('Access-Control-Max-Age', '86400');\n  next();\n});\n\napp.options('*', function (req, res) {\n  res.sendStatus(200);\n});\n\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\n\nmodule.exports = app;\n\n\n\n./bin/www\n\n#!/usr/bin/env node\n\nvar app = require('../app');\nvar debug = require('debug')('roboserver:server');\nvar http = require('http');\n\nvar port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\nvar server = http.createServer(app);\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n\n\n\nSystem information\n\nOS Platform and Distribution:  ubuntu 16.04.4 LTS\nTensorFlow installed from: https://github.com/tensorflow/tfjs\nTensorFlow version: 0.12.0\nBazel version: N/A\nCUDA/ cuDNN: 8.0/6.0\nGPU model and memory: GeForce GTX 1070 Ti 8GB * 2\nMemory:\nSMBIOS 3.0.0 present.\nHandle 0x0043, DMI type 16, 23 bytes\nPhysical Memory Array\nLocation: System Board Or Motherboard\nUse: System Memory\nError Correction Type: None\nMaximum Capacity: 32 GB\nError Information Handle: Not Provided\nNumber Of Devices: 2\n\nHandle 0x0044, DMI type 17, 40 bytes\nMemory Device\nArray Handle: 0x0043\nError Information Handle: Not Provided\nTotal Width: Unknown\nData Width: Unknown\nSize: No Module Installed\nForm Factor: Unknown\nSet: None\nLocator: ChannelA-DIMM1\nBank Locator: BANK 0\nType: Unknown\nType Detail: None\nSpeed: Unknown\nManufacturer: Not Specified\nSerial Number: Not Specified\nAsset Tag: Not Specified\nPart Number: Not Specified\nRank: Unknown\nConfigured Clock Speed: Unknown\nMinimum Voltage: Unknown\nMaximum Voltage: Unknown\nConfigured Voltage: Unknown\nHandle 0x0045, DMI type 17, 40 bytes\nMemory Device\nArray Handle: 0x0043\nError Information Handle: Not Provided\nTotal Width: 64 bits\nData Width: 64 bits\nSize: 16384 MB\nForm Factor: DIMM\nSet: None\nLocator: ChannelA-DIMM2\nBank Locator: BANK 1\nType: DDR4\nType Detail: Synchronous Unbuffered (Unregistered)\nSpeed: 2133 MHz\nManufacturer: Corsair\nSerial Number: 00000000\nAsset Tag: 9876543210\nPart Number: CMK32GX4M2B3000C15\nRank: 2\nConfigured Clock Speed: 2133 MHz\nMinimum Voltage: Unknown\nMaximum Voltage: Unknown\nConfigured Voltage: 1.2 V\nHandle 0x0046, DMI type 17, 40 bytes\nMemory Device\nArray Handle: 0x0043\nError Information Handle: Not Provided\nTotal Width: Unknown\nData Width: Unknown\nSize: No Module Installed\nForm Factor: Unknown\nSet: None\nLocator: ChannelB-DIMM1\nBank Locator: BANK 2\nType: Unknown\nType Detail: None\nSpeed: Unknown\nManufacturer: Not Specified\nSerial Number: Not Specified\nAsset Tag: Not Specified\nPart Number: Not Specified\nRank: Unknown\nConfigured Clock Speed: Unknown\nMinimum Voltage: Unknown\nMaximum Voltage: Unknown\nConfigured Voltage: Unknown\nHandle 0x0047, DMI type 17, 40 bytes\nMemory Device\nArray Handle: 0x0043\nError Information Handle: Not Provided\nTotal Width: 64 bits\nData Width: 64 bits\nSize: 16384 MB\nForm Factor: DIMM\nSet: None\nLocator: ChannelB-DIMM2\nBank Locator: BANK 3\nType: DDR4\nType Detail: Synchronous Unbuffered (Unregistered)\nSpeed: 2133 MHz\nManufacturer: Corsair\nSerial Number: 00000000\nAsset Tag: 9876543210\nPart Number: CMK32GX4M2B3000C15\nRank: 2\nConfigured Clock Speed: 2133 MHz\nMinimum Voltage: Unknown\nMaximum Voltage: Unknown\nConfigured Voltage: 1.2 V\n\nExact command to reproduce: node ./bin/www\nMobile device: N/A\nBrowser: Google Chrome\nnpm: 6.1.0\nnode: 10.6.0\n@tensorflow-models/posenet: 0.2.2\n@tensorflow/tfjs-node: 0.1.9\n@tensorflow/tfjs-node-gpu: 0.1.9\ngcc: 5.4.0", "body": "### Problem\r\nExcuse me.\r\nI implemented demo app with tensorflow-models/posenet, node.js and express.\r\nI replaced the sample code as follows, but GPU may not work when executing estimateMultiplePoses().\r\nCould you tell me how to run my code on GPU?\r\n\r\nFor example, I got a very low response when I post my API to a localhost server.\r\n\r\n```\r\n$curl -X POST -F thumbnail=@./picture.png localhost:3000/upload\r\n```\r\n\r\n[At server log] \r\nI want to get the response less than 100 ms.\r\nI got the response less than 30 ms when I didn't use PoseNet API, so thought that this low response was caused by not running on GPU.\r\n\r\n```\r\nPOST /upload 200 2110.888 ms - 9372\r\n```\r\n\r\nHowever,  the process may be alive when building the server.\r\n\r\n```\r\n$ nvidia-smi\r\nTue Jul 31 10:27:38 2018       \r\n+-----------------------------------------------------------------------------+\r\n| NVIDIA-SMI 396.37                 Driver Version: 396.37                    |\r\n|-------------------------------+----------------------+----------------------+\r\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\r\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\r\n|===============================+======================+======================|\r\n|   0  GeForce GTX 107...  On   | 00000000:01:00.0  On |                  N/A |\r\n| 27%   40C    P8    13W / 180W |   7732MiB /  8116MiB |      0%      Default |\r\n+-------------------------------+----------------------+----------------------+\r\n|   1  GeForce GTX 107...  On   | 00000000:02:00.0 Off |                  N/A |\r\n| 27%   38C    P8    12W / 180W |   7723MiB /  8119MiB |      0%      Default |\r\n+-------------------------------+----------------------+----------------------+\r\n                                                                               \r\n+-----------------------------------------------------------------------------+\r\n| Processes:                                                       GPU Memory |\r\n|  GPU       PID   Type   Process name                             Usage      |\r\n|=============================================================================|\r\n|    0      1252      G   /usr/lib/xorg/Xorg                           281MiB |\r\n|    0      2068      G   compiz                                       226MiB |\r\n|    0      2435      G   ...-token=...                                 61MiB |\r\n|    0      2697      G   unity-control-center                          15MiB |\r\n|    0      2945      G   ...-token=...                                 92MiB |\r\n|    0     14062      G   ...-token=...                                 66MiB |\r\n|    0     26892      C   node                                        6983MiB |\r\n|    1     26892      C   node                                        7711MiB |\r\n+-----------------------------------------------------------------------------+\r\n\r\n```\r\n\r\nregards.\r\n\r\n----\r\n### Custom Code\r\n\r\n./routes/index.js\r\n\r\n``` \r\n\r\nvar posenet = require('@tensorflow-models/posenet');\r\nvar tf = require('@tensorflow/tfjs');\r\nrequire('@tensorflow/tfjs-node-gpu');\r\n\r\nvar express = require('express');\r\nvar router = express.Router();\r\nvar multer = require('multer');\r\nvar upload = multer({dest: \"./uploads/\"}).single('thumbnail');\r\nvar Canvas = require('canvas');\r\nvar Image = Canvas.Image;\r\n\r\nconst state = {\r\n  input: {\r\n    imageScaleFactor: 0.5,\r\n    flipHorizontal: false,\r\n    outputStride: 16,\r\n  },\r\n  detection: {\r\n    maxPoseDetections: 5,\r\n    minPoseConfidence: 0.15,\r\n    minPartConfidence: 0.1,\r\n    nmsRadius: 30.0,\r\n  },\r\n};\r\n\r\nfunction createHTMLCanvasElementFromRequest(req){\r\n    const img = new Image;\r\n    img.src = req.file.path;\r\n    const canvas = new Canvas(img.width,img.height); \r\n    const ctx = canvas.getContext('2d');\r\n    ctx.drawImage(img, 0, 0, img.width, img.height);\r\n    return canvas;\r\n}\r\n\r\nfunction detectPoses(req, res){\r\n  const canvas = createHTMLCanvasElementFromRequest(req);\r\n  async function usePoseNet(req){\r\n    const net = await posenet.load();\r\n    const poses = await net.estimateMultiplePoses(  canvas, \r\n                                                  state.input.imageScaleFactor, \r\n                                                  state.input.flipHorizontal, \r\n                                                  state.input.outputStride, \r\n                                                  state.detection.maxPoseDetections,\r\n                                                  state.detection.minPartConfidence, \r\n                                                  state.detection.nmsRadius);\r\n    return poses;\r\n  }\r\n  usePoseNet(req).then( json_res =>{\r\n    res.send({\r\n        \"OriginalName\": req.file.originalname,\r\n        \"FileName\": req.file.filename,\r\n        \"Size\": req.file.size,\r\n        \"Width\": canvas.width,\r\n        \"Height\": canvas.height,\r\n        \"Context\": json_res\r\n    })\r\n  }).catch(e => {\r\n    res.send({\r\n        \"Error\": e\r\n    });\r\n  });\r\n}\r\n\r\nfunction failedToGetImages(req,res, err){\r\n  res.send({\r\n        \"Destination\": req.file.destination,\r\n        \"Error\": err\r\n      });\r\n}\r\n\r\nrouter.post('/upload', function(req, res){\r\n  upload(req, res, function(err){\r\n    res.header('Content-Type', 'application/json; charset=utf-8');\r\n    err? failedToGetImages(req,res,err) : detectPoses(req, res);\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n\r\n```\r\n\r\n----\r\n\r\n./app.js\r\n\r\n```\r\n\r\nvar createError = require('http-errors');\r\nvar express = require('express');\r\nvar path = require('path');\r\nvar cookieParser = require('cookie-parser');\r\nvar logger = require('morgan');\r\n\r\nvar indexRouter = require('./routes/index');\r\n\r\nvar app = express();\r\n\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'pug');\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(cookieParser());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use('/', indexRouter);\r\n\r\napp.use(function (req, res, next) {\r\n  res.header('Access-Control-Allow-Origin', req.headers.origin);\r\n  res.header('Access-Control-Allow-Headers', 'X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept');\r\n  res.header('Access-Control-Allow-Methods', 'POST, GET, PUT, DELETE, OPTIONS');\r\n  res.header('Access-Control-Allow-Credentials', true);\r\n  res.header('Access-Control-Max-Age', '86400');\r\n  next();\r\n});\r\n\r\napp.options('*', function (req, res) {\r\n  res.sendStatus(200);\r\n});\r\n\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\n\r\n\r\nmodule.exports = app;\r\n\r\n```\r\n\r\n---\r\n\r\n./bin/www\r\n\r\n```\r\n\r\n#!/usr/bin/env node\r\n\r\nvar app = require('../app');\r\nvar debug = require('debug')('roboserver:server');\r\nvar http = require('http');\r\n\r\nvar port = normalizePort(process.env.PORT || '3000');\r\napp.set('port', port);\r\n\r\nvar server = http.createServer(app);\r\n\r\nserver.listen(port);\r\nserver.on('error', onError);\r\nserver.on('listening', onListening);\r\n\r\nfunction normalizePort(val) {\r\n  var port = parseInt(val, 10);\r\n\r\n  if (isNaN(port)) {\r\n    // named pipe\r\n    return val;\r\n  }\r\n\r\n  if (port >= 0) {\r\n    // port number\r\n    return port;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction onError(error) {\r\n  if (error.syscall !== 'listen') {\r\n    throw error;\r\n  }\r\n\r\n  var bind = typeof port === 'string'\r\n    ? 'Pipe ' + port\r\n    : 'Port ' + port;\r\n\r\n  // handle specific listen errors with friendly messages\r\n  switch (error.code) {\r\n    case 'EACCES':\r\n      console.error(bind + ' requires elevated privileges');\r\n      process.exit(1);\r\n      break;\r\n    case 'EADDRINUSE':\r\n      console.error(bind + ' is already in use');\r\n      process.exit(1);\r\n      break;\r\n    default:\r\n      throw error;\r\n  }\r\n}\r\n\r\nfunction onListening() {\r\n  var addr = server.address();\r\n  var bind = typeof addr === 'string'\r\n    ? 'pipe ' + addr\r\n    : 'port ' + addr.port;\r\n  debug('Listening on ' + bind);\r\n}\r\n\r\n```\r\n\r\n-----\r\n\r\n### System information\r\n- OS Platform and Distribution:  ubuntu 16.04.4 LTS\r\n- TensorFlow installed from: https://github.com/tensorflow/tfjs\r\n- TensorFlow version: 0.12.0\r\n- Bazel version: N/A\r\n- CUDA/ cuDNN: 8.0/6.0\r\n- GPU model and memory: GeForce GTX 1070 Ti 8GB * 2\r\n- Memory:\r\nSMBIOS 3.0.0 present.\r\nHandle 0x0043, DMI type 16, 23 bytes\r\nPhysical Memory Array\r\n\tLocation: System Board Or Motherboard\r\n\tUse: System Memory\r\n\tError Correction Type: None\r\n\tMaximum Capacity: 32 GB\r\n\tError Information Handle: Not Provided\r\n\tNumber Of Devices: 2\r\n\r\nHandle 0x0044, DMI type 17, 40 bytes\r\nMemory Device\r\n\tArray Handle: 0x0043\r\n\tError Information Handle: Not Provided\r\n\tTotal Width: Unknown\r\n\tData Width: Unknown\r\n\tSize: No Module Installed\r\n\tForm Factor: Unknown\r\n\tSet: None\r\n\tLocator: ChannelA-DIMM1\r\n\tBank Locator: BANK 0\r\n\tType: Unknown\r\n\tType Detail: None\r\n\tSpeed: Unknown\r\n\tManufacturer: Not Specified\r\n\tSerial Number: Not Specified\r\n\tAsset Tag: Not Specified\r\n\tPart Number: Not Specified\r\n\tRank: Unknown\r\n\tConfigured Clock Speed: Unknown\r\n\tMinimum Voltage: Unknown\r\n\tMaximum Voltage: Unknown\r\n\tConfigured Voltage: Unknown\r\n\r\nHandle 0x0045, DMI type 17, 40 bytes\r\nMemory Device\r\n\tArray Handle: 0x0043\r\n\tError Information Handle: Not Provided\r\n\tTotal Width: 64 bits\r\n\tData Width: 64 bits\r\n\tSize: 16384 MB\r\n\tForm Factor: DIMM\r\n\tSet: None\r\n\tLocator: ChannelA-DIMM2\r\n\tBank Locator: BANK 1\r\n\tType: DDR4\r\n\tType Detail: Synchronous Unbuffered (Unregistered)\r\n\tSpeed: 2133 MHz\r\n\tManufacturer: Corsair\r\n\tSerial Number: 00000000\r\n\tAsset Tag: 9876543210\r\n\tPart Number: CMK32GX4M2B3000C15  \r\n\tRank: 2\r\n\tConfigured Clock Speed: 2133 MHz\r\n\tMinimum Voltage: Unknown\r\n\tMaximum Voltage: Unknown\r\n\tConfigured Voltage: 1.2 V\r\n\r\nHandle 0x0046, DMI type 17, 40 bytes\r\nMemory Device\r\n\tArray Handle: 0x0043\r\n\tError Information Handle: Not Provided\r\n\tTotal Width: Unknown\r\n\tData Width: Unknown\r\n\tSize: No Module Installed\r\n\tForm Factor: Unknown\r\n\tSet: None\r\n\tLocator: ChannelB-DIMM1\r\n\tBank Locator: BANK 2\r\n\tType: Unknown\r\n\tType Detail: None\r\n\tSpeed: Unknown\r\n\tManufacturer: Not Specified\r\n\tSerial Number: Not Specified\r\n\tAsset Tag: Not Specified\r\n\tPart Number: Not Specified\r\n\tRank: Unknown\r\n\tConfigured Clock Speed: Unknown\r\n\tMinimum Voltage: Unknown\r\n\tMaximum Voltage: Unknown\r\n\tConfigured Voltage: Unknown\r\n\r\nHandle 0x0047, DMI type 17, 40 bytes\r\nMemory Device\r\n\tArray Handle: 0x0043\r\n\tError Information Handle: Not Provided\r\n\tTotal Width: 64 bits\r\n\tData Width: 64 bits\r\n\tSize: 16384 MB\r\n\tForm Factor: DIMM\r\n\tSet: None\r\n\tLocator: ChannelB-DIMM2\r\n\tBank Locator: BANK 3\r\n\tType: DDR4\r\n\tType Detail: Synchronous Unbuffered (Unregistered)\r\n\tSpeed: 2133 MHz\r\n\tManufacturer: Corsair\r\n\tSerial Number: 00000000\r\n\tAsset Tag: 9876543210\r\n\tPart Number: CMK32GX4M2B3000C15  \r\n\tRank: 2\r\n\tConfigured Clock Speed: 2133 MHz\r\n\tMinimum Voltage: Unknown\r\n\tMaximum Voltage: Unknown\r\n\tConfigured Voltage: 1.2 V\r\n\r\n- Exact command to reproduce: node ./bin/www\r\n- Mobile device: N/A\r\n- Browser: Google Chrome \r\n- npm: 6.1.0\r\n- node: 10.6.0\r\n- @tensorflow-models/posenet: 0.2.2\r\n- @tensorflow/tfjs-node: 0.1.9\r\n- @tensorflow/tfjs-node-gpu: 0.1.9\r\n- gcc: 5.4.0"}