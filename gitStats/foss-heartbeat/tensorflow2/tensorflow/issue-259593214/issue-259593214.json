{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13217", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13217/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13217/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13217/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/13217", "id": 259593214, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQyNDE2Mjcz", "number": 13217, "title": "Fixes #12401: Use traceback instead of inspect for frame information", "user": {"login": "JettJones", "id": 1045582, "node_id": "MDQ6VXNlcjEwNDU1ODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1045582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JettJones", "html_url": "https://github.com/JettJones", "followers_url": "https://api.github.com/users/JettJones/followers", "following_url": "https://api.github.com/users/JettJones/following{/other_user}", "gists_url": "https://api.github.com/users/JettJones/gists{/gist_id}", "starred_url": "https://api.github.com/users/JettJones/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JettJones/subscriptions", "organizations_url": "https://api.github.com/users/JettJones/orgs", "repos_url": "https://api.github.com/users/JettJones/repos", "events_url": "https://api.github.com/users/JettJones/events{/privacy}", "received_events_url": "https://api.github.com/users/JettJones/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 419840263, "node_id": "MDU6TGFiZWw0MTk4NDAyNjM=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20testing%20(then%20merge)", "name": "awaiting testing (then merge)", "color": "c2e0c6", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "sb2nov", "id": 1517779, "node_id": "MDQ6VXNlcjE1MTc3Nzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1517779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sb2nov", "html_url": "https://github.com/sb2nov", "followers_url": "https://api.github.com/users/sb2nov/followers", "following_url": "https://api.github.com/users/sb2nov/following{/other_user}", "gists_url": "https://api.github.com/users/sb2nov/gists{/gist_id}", "starred_url": "https://api.github.com/users/sb2nov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sb2nov/subscriptions", "organizations_url": "https://api.github.com/users/sb2nov/orgs", "repos_url": "https://api.github.com/users/sb2nov/repos", "events_url": "https://api.github.com/users/sb2nov/events{/privacy}", "received_events_url": "https://api.github.com/users/sb2nov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "sb2nov", "id": 1517779, "node_id": "MDQ6VXNlcjE1MTc3Nzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1517779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sb2nov", "html_url": "https://github.com/sb2nov", "followers_url": "https://api.github.com/users/sb2nov/followers", "following_url": "https://api.github.com/users/sb2nov/following{/other_user}", "gists_url": "https://api.github.com/users/sb2nov/gists{/gist_id}", "starred_url": "https://api.github.com/users/sb2nov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sb2nov/subscriptions", "organizations_url": "https://api.github.com/users/sb2nov/orgs", "repos_url": "https://api.github.com/users/sb2nov/repos", "events_url": "https://api.github.com/users/sb2nov/events{/privacy}", "received_events_url": "https://api.github.com/users/sb2nov/received_events", "type": "User", "site_admin": false}, {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 21, "created_at": "2017-09-21T18:41:51Z", "updated_at": "2017-09-26T16:03:36Z", "closed_at": "2017-09-26T14:16:55Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13217", "html_url": "https://github.com/tensorflow/tensorflow/pull/13217", "diff_url": "https://github.com/tensorflow/tensorflow/pull/13217.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/13217.patch"}, "body_html": "<p><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"251334977\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/12401\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/12401/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/12401\">#12401</a> - import tensorflow.contrib.layers takes a very long time</p>\n<p>I learned (while rebasing this diff) that the issue of slow imports of tensorflow.contrib.layers was fixed earlier this week: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"246189479\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/11830\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/11830/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/11830\">#11830</a>. <g-emoji class=\"g-emoji\" alias=\"tada\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png\">\ud83c\udf89</g-emoji> Since the diff is ready,  I want to put up the diff for the sake of history, but I understand if at this point the further speedup is minor enough to ignore.</p>\n<p>The speedup is a factor of 2, while the original fix is a factor of 100.</p>\n<hr>\n<p>My performance tests compared three versions:</p>\n<ul>\n<li>original implementation with inspect.stack()</li>\n<li>traceback(limit)</li>\n<li>current_frame + inspect</li>\n</ul>\n<p>I also found that the original implementation was sensitive to the depth of the current stack, and a file importing another file generally increased that call depth by 5.  Which is to say, in practice, my code importing <code>tensorflow.config</code> at an import depth of 7 had much worse performance than the baseline test of just importing <code>tensorflow.config</code></p>\n<table>\n<thead>\n<tr>\n<th>Test</th>\n<th>Timing</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>python2 - inspect.stack</td>\n<td>7.8 sec</td>\n</tr>\n<tr>\n<td>python2 - inspect.getframeinfo</td>\n<td>0.12 sec</td>\n</tr>\n<tr>\n<td>python2 - traceback.extract_stack</td>\n<td>0.04 sec</td>\n</tr>\n<tr>\n<td>python3 - inspect.stack</td>\n<td>22.8 sec</td>\n</tr>\n<tr>\n<td>python3 - inspect.getframeinfo</td>\n<td>0.14 sec</td>\n</tr>\n<tr>\n<td>python3 - traceback.extract_stack</td>\n<td>0.07 sec</td>\n</tr>\n</tbody>\n</table>\n<p>^ tests are the total of 1000 runs with a stack of 200, to give easy to compare numbers.<br>\n<a href=\"https://gist.github.com/JettJones/c236494013f22723c1822126df944b12\">https://gist.github.com/JettJones/c236494013f22723c1822126df944b12</a></p>\n<p>This functionality of adding a decorator name from the call stack is covered by the existing unit test:</p>\n<ul>\n<li>testSetsDecoratorNameToFunctionThatCallsMakeDecoratorIfAbsent</li>\n</ul>\n<p>And pylint did not report any issues on these changes</p>", "body_text": "#12401 - import tensorflow.contrib.layers takes a very long time\nI learned (while rebasing this diff) that the issue of slow imports of tensorflow.contrib.layers was fixed earlier this week: #11830. \ud83c\udf89 Since the diff is ready,  I want to put up the diff for the sake of history, but I understand if at this point the further speedup is minor enough to ignore.\nThe speedup is a factor of 2, while the original fix is a factor of 100.\n\nMy performance tests compared three versions:\n\noriginal implementation with inspect.stack()\ntraceback(limit)\ncurrent_frame + inspect\n\nI also found that the original implementation was sensitive to the depth of the current stack, and a file importing another file generally increased that call depth by 5.  Which is to say, in practice, my code importing tensorflow.config at an import depth of 7 had much worse performance than the baseline test of just importing tensorflow.config\n\n\n\nTest\nTiming\n\n\n\n\npython2 - inspect.stack\n7.8 sec\n\n\npython2 - inspect.getframeinfo\n0.12 sec\n\n\npython2 - traceback.extract_stack\n0.04 sec\n\n\npython3 - inspect.stack\n22.8 sec\n\n\npython3 - inspect.getframeinfo\n0.14 sec\n\n\npython3 - traceback.extract_stack\n0.07 sec\n\n\n\n^ tests are the total of 1000 runs with a stack of 200, to give easy to compare numbers.\nhttps://gist.github.com/JettJones/c236494013f22723c1822126df944b12\nThis functionality of adding a decorator name from the call stack is covered by the existing unit test:\n\ntestSetsDecoratorNameToFunctionThatCallsMakeDecoratorIfAbsent\n\nAnd pylint did not report any issues on these changes", "body": "#12401 - import tensorflow.contrib.layers takes a very long time\r\n\r\nI learned (while rebasing this diff) that the issue of slow imports of tensorflow.contrib.layers was fixed earlier this week: https://github.com/tensorflow/tensorflow/pull/11830. \ud83c\udf89 Since the diff is ready,  I want to put up the diff for the sake of history, but I understand if at this point the further speedup is minor enough to ignore.\r\n\r\nThe speedup is a factor of 2, while the original fix is a factor of 100.   \r\n\r\n----\r\n\r\nMy performance tests compared three versions:\r\n- original implementation with inspect.stack()\r\n- traceback(limit)\r\n- current_frame + inspect\r\n\r\nI also found that the original implementation was sensitive to the depth of the current stack, and a file importing another file generally increased that call depth by 5.  Which is to say, in practice, my code importing `tensorflow.config` at an import depth of 7 had much worse performance than the baseline test of just importing `tensorflow.config`\r\n\r\n\r\n| Test  | Timing |\r\n| -- | -- |\r\n| python2 - inspect.stack |  7.8 sec |\r\n| python2 - inspect.getframeinfo  |  0.12 sec   |\r\n| python2 - traceback.extract_stack  |  0.04 sec   |\r\n| python3 - inspect.stack |  22.8 sec |\r\n| python3 - inspect.getframeinfo  |  0.14 sec   |\r\n| python3 - traceback.extract_stack  |  0.07 sec   |\r\n\r\n^ tests are the total of 1000 runs with a stack of 200, to give easy to compare numbers.\r\nhttps://gist.github.com/JettJones/c236494013f22723c1822126df944b12\r\n\r\nThis functionality of adding a decorator name from the call stack is covered by the existing unit test:\r\n* testSetsDecoratorNameToFunctionThatCallsMakeDecoratorIfAbsent\r\n\r\nAnd pylint did not report any issues on these changes\r\n"}