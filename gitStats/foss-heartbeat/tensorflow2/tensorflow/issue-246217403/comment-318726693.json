{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/318726693", "html_url": "https://github.com/tensorflow/tensorflow/issues/11839#issuecomment-318726693", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11839", "id": 318726693, "node_id": "MDEyOklzc3VlQ29tbWVudDMxODcyNjY5Mw==", "user": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-28T18:18:14Z", "updated_at": "2017-07-28T18:18:14Z", "author_association": "MEMBER", "body_html": "<p>This behavior is confusing but it is not a bug. When calling <code>variables_to_restore</code>, you are supposed to indicate what variables have moving averages through its <code>moving_avg_variables</code> parameter. <code>ExponentialMovingAverage</code> doesn't actually use its own stored averages to determine what variables have moving averages, but instead relies on <code>moving_avg_variables</code>.  <code>moving_avg_variables</code> defaults to <code>variables.moving_average_variables() + variables.trainable_variables()</code>, which is why Variable <code>c</code> is included.</p>\n<p>I believe the reason <code>variables_to_restore</code> acts this way is that it is typically called during evaluation, while the moving averages were set during training. During evaluation, no moving averages are set, so <code>variables_to_restore</code> cannot rely on the  <code>ExponentialMovingAverage</code>'s stored moving averages, which is why it uses <code>moving_avg_variables</code> instead.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1766524\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sguada\">@sguada</a>, I think we should change the description to something like \"If a variable is in <code>moving_avg_variables</code>, use its moving average variable name as the restore name; otherwise, use the variable name.\" What do you think?</p>", "body_text": "This behavior is confusing but it is not a bug. When calling variables_to_restore, you are supposed to indicate what variables have moving averages through its moving_avg_variables parameter. ExponentialMovingAverage doesn't actually use its own stored averages to determine what variables have moving averages, but instead relies on moving_avg_variables.  moving_avg_variables defaults to variables.moving_average_variables() + variables.trainable_variables(), which is why Variable c is included.\nI believe the reason variables_to_restore acts this way is that it is typically called during evaluation, while the moving averages were set during training. During evaluation, no moving averages are set, so variables_to_restore cannot rely on the  ExponentialMovingAverage's stored moving averages, which is why it uses moving_avg_variables instead.\n@sguada, I think we should change the description to something like \"If a variable is in moving_avg_variables, use its moving average variable name as the restore name; otherwise, use the variable name.\" What do you think?", "body": "This behavior is confusing but it is not a bug. When calling `variables_to_restore`, you are supposed to indicate what variables have moving averages through its `moving_avg_variables` parameter. `ExponentialMovingAverage` doesn't actually use its own stored averages to determine what variables have moving averages, but instead relies on `moving_avg_variables`.  `moving_avg_variables` defaults to `variables.moving_average_variables() + variables.trainable_variables()`, which is why Variable `c` is included.\r\n\r\nI believe the reason `variables_to_restore` acts this way is that it is typically called during evaluation, while the moving averages were set during training. During evaluation, no moving averages are set, so `variables_to_restore` cannot rely on the  `ExponentialMovingAverage`'s stored moving averages, which is why it uses `moving_avg_variables` instead.\r\n\r\n@sguada, I think we should change the description to something like \"If a variable is in `moving_avg_variables`, use its moving average variable name as the restore name; otherwise, use the variable name.\" What do you think?"}