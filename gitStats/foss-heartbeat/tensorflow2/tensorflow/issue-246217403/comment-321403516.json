{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/321403516", "html_url": "https://github.com/tensorflow/tensorflow/issues/11839#issuecomment-321403516", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11839", "id": 321403516, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTQwMzUxNg==", "user": {"login": "sguada", "id": 1766524, "node_id": "MDQ6VXNlcjE3NjY1MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1766524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sguada", "html_url": "https://github.com/sguada", "followers_url": "https://api.github.com/users/sguada/followers", "following_url": "https://api.github.com/users/sguada/following{/other_user}", "gists_url": "https://api.github.com/users/sguada/gists{/gist_id}", "starred_url": "https://api.github.com/users/sguada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sguada/subscriptions", "organizations_url": "https://api.github.com/users/sguada/orgs", "repos_url": "https://api.github.com/users/sguada/repos", "events_url": "https://api.github.com/users/sguada/events{/privacy}", "received_events_url": "https://api.github.com/users/sguada/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-09T22:54:10Z", "updated_at": "2017-08-09T22:54:10Z", "author_association": "MEMBER", "body_html": "<p>As the docs and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6510203\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/reedwm\">@reedwm</a>  mentioned by default <code>ema.variables_to_restore()</code> uses <code>tf.moving_average_variables() + tf.trainable_variables()</code>.</p>\n<p>But you can get the behavior that want by doing</p>\n<pre><code>x = tf.Variable(12.,name='x')\ny = tf.Variable(34.,name='y')\nz = tf.Variable(0, trainable=False)\nema = tf.train.ExponentialMovingAverage(.0)\nema.apply([x])\nvariables_to_restore = ema.variables_to_restore(tf.moving_average_variables())\nprint(variables_to_restore)\n\ninit = tf.global_variables_initializer()\nwith tf.Session() as sess:\n    init.run()\n    saver = tf.train.Saver(variables_to_restore)\n    saver.restore(sess, './model.ckpt')\n</code></pre>", "body_text": "As the docs and @reedwm  mentioned by default ema.variables_to_restore() uses tf.moving_average_variables() + tf.trainable_variables().\nBut you can get the behavior that want by doing\nx = tf.Variable(12.,name='x')\ny = tf.Variable(34.,name='y')\nz = tf.Variable(0, trainable=False)\nema = tf.train.ExponentialMovingAverage(.0)\nema.apply([x])\nvariables_to_restore = ema.variables_to_restore(tf.moving_average_variables())\nprint(variables_to_restore)\n\ninit = tf.global_variables_initializer()\nwith tf.Session() as sess:\n    init.run()\n    saver = tf.train.Saver(variables_to_restore)\n    saver.restore(sess, './model.ckpt')", "body": "As the docs and @reedwm  mentioned by default `ema.variables_to_restore()` uses `tf.moving_average_variables() + tf.trainable_variables()`.\r\n\r\nBut you can get the behavior that want by doing\r\n\r\n```\r\nx = tf.Variable(12.,name='x')\r\ny = tf.Variable(34.,name='y')\r\nz = tf.Variable(0, trainable=False)\r\nema = tf.train.ExponentialMovingAverage(.0)\r\nema.apply([x])\r\nvariables_to_restore = ema.variables_to_restore(tf.moving_average_variables())\r\nprint(variables_to_restore)\r\n\r\ninit = tf.global_variables_initializer()\r\nwith tf.Session() as sess:\r\n    init.run()\r\n    saver = tf.train.Saver(variables_to_restore)\r\n    saver.restore(sess, './model.ckpt')\r\n```"}