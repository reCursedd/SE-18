{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/215845406", "html_url": "https://github.com/tensorflow/tensorflow/issues/2034#issuecomment-215845406", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2034", "id": 215845406, "node_id": "MDEyOklzc3VlQ29tbWVudDIxNTg0NTQwNg==", "user": {"login": "stephenroller", "id": 31896, "node_id": "MDQ6VXNlcjMxODk2", "avatar_url": "https://avatars2.githubusercontent.com/u/31896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stephenroller", "html_url": "https://github.com/stephenroller", "followers_url": "https://api.github.com/users/stephenroller/followers", "following_url": "https://api.github.com/users/stephenroller/following{/other_user}", "gists_url": "https://api.github.com/users/stephenroller/gists{/gist_id}", "starred_url": "https://api.github.com/users/stephenroller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stephenroller/subscriptions", "organizations_url": "https://api.github.com/users/stephenroller/orgs", "repos_url": "https://api.github.com/users/stephenroller/repos", "events_url": "https://api.github.com/users/stephenroller/events{/privacy}", "received_events_url": "https://api.github.com/users/stephenroller/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-29T18:45:42Z", "updated_at": "2016-04-29T18:45:42Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Yeah, it seems wrong that skflow is being automatically loaded. If nothing else, it's adding a whole bunch of unnecessary startup time to a submodule that may not ever be used...</p>\n<p>However, it's explicitly not a dependency: it's wrapped in an ImportError that has smart fallback behavior. The fallback behavior doesn't trigger the segfault, as it doesn't have these cascading imports to this obscure module.</p>\n<p>But explicitly importing numpy in tf.contrib.learn wouldn't help; numpy is imported nearly a dozen times before then, by scikit-learn, scipy <em>and</em> tf.contrib.learn.</p>\n<p>Looking at the specfun module, it calls import_array and doesn't properly define a PY_ARRAY_UNIQUE_SYMBOL like all c modules are supposed to do. And I <em>think</em> TensorFlow is doing things in the wrong order, either in <code>numpy.c</code> or <code>numpy.h</code>. The result is that you have both modules slightly misbehaving about import_array and overwriting some function pointers somewhere, hence the segfault. I'm still confirming this though.</p>", "body_text": "Yeah, it seems wrong that skflow is being automatically loaded. If nothing else, it's adding a whole bunch of unnecessary startup time to a submodule that may not ever be used...\nHowever, it's explicitly not a dependency: it's wrapped in an ImportError that has smart fallback behavior. The fallback behavior doesn't trigger the segfault, as it doesn't have these cascading imports to this obscure module.\nBut explicitly importing numpy in tf.contrib.learn wouldn't help; numpy is imported nearly a dozen times before then, by scikit-learn, scipy and tf.contrib.learn.\nLooking at the specfun module, it calls import_array and doesn't properly define a PY_ARRAY_UNIQUE_SYMBOL like all c modules are supposed to do. And I think TensorFlow is doing things in the wrong order, either in numpy.c or numpy.h. The result is that you have both modules slightly misbehaving about import_array and overwriting some function pointers somewhere, hence the segfault. I'm still confirming this though.", "body": "Yeah, it seems wrong that skflow is being automatically loaded. If nothing else, it's adding a whole bunch of unnecessary startup time to a submodule that may not ever be used...\n\nHowever, it's explicitly not a dependency: it's wrapped in an ImportError that has smart fallback behavior. The fallback behavior doesn't trigger the segfault, as it doesn't have these cascading imports to this obscure module.\n\nBut explicitly importing numpy in tf.contrib.learn wouldn't help; numpy is imported nearly a dozen times before then, by scikit-learn, scipy _and_ tf.contrib.learn.\n\nLooking at the specfun module, it calls import_array and doesn't properly define a PY_ARRAY_UNIQUE_SYMBOL like all c modules are supposed to do. And I _think_ TensorFlow is doing things in the wrong order, either in `numpy.c` or `numpy.h`. The result is that you have both modules slightly misbehaving about import_array and overwriting some function pointers somewhere, hence the segfault. I'm still confirming this though.\n"}