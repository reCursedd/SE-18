{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5300", "id": 91579523, "node_id": "MDExOlB1bGxSZXF1ZXN0OTE1Nzk1MjM=", "html_url": "https://github.com/tensorflow/tensorflow/pull/5300", "diff_url": "https://github.com/tensorflow/tensorflow/pull/5300.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/5300.patch", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5300", "number": 5300, "state": "closed", "locked": false, "title": "Add atrous_conv2d_transpose python function", "user": {"login": "guotong1988", "id": 4702353, "node_id": "MDQ6VXNlcjQ3MDIzNTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4702353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guotong1988", "html_url": "https://github.com/guotong1988", "followers_url": "https://api.github.com/users/guotong1988/followers", "following_url": "https://api.github.com/users/guotong1988/following{/other_user}", "gists_url": "https://api.github.com/users/guotong1988/gists{/gist_id}", "starred_url": "https://api.github.com/users/guotong1988/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guotong1988/subscriptions", "organizations_url": "https://api.github.com/users/guotong1988/orgs", "repos_url": "https://api.github.com/users/guotong1988/repos", "events_url": "https://api.github.com/users/guotong1988/events{/privacy}", "received_events_url": "https://api.github.com/users/guotong1988/received_events", "type": "User", "site_admin": false}, "body": "Issue description : https://github.com/tensorflow/tensorflow/issues/4668\r\n\r\nThis is the first commit of the issue.\r\nI will commit the unit test later.\r\nI will also add the comment for the method.\r\n\r\n**Thank you for any advice.**\r\n\r\nNow I test it with:\r\n\r\n```\r\n\r\n# Input, output: [batch, height, width, depth]\r\nx_image = tf.placeholder(tf.float32,shape=[1])\r\nx = tf.reshape(x_image,[1,1,1,1])\r\n\r\n#Filter: W [kernel_height, kernel_width, output_depth, input_depth]\r\nW_cpu = np.array([[1,-1,1],[1,1,1],[-1,1,-1]],dtype=np.float32)\r\nW = tf.Variable(W_cpu)\r\nW = tf.reshape(W, [3,3,1,1])\r\n\r\nstrides=[1, 1, 1, 1]\r\npadding='VALID'\r\n\r\ny = tf.nn.atrous_conv2d_transpose(x, W, [1,5,5,1], 2, strides, padding)\r\n\r\nx_data = np.array([1],dtype=np.float32)\r\nwith tf.Session() as sess:\r\n    init = tf.initialize_all_variables()\r\n    sess.run(init)\r\n\r\n    x = (sess.run(x, feed_dict={x_image: x_data}))\r\n    W = (sess.run(W, feed_dict={x_image: x_data}))\r\n    y = (sess.run(y, feed_dict={x_image: x_data}))\r\n\r\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshape(1) is :\"\r\n    print x.reshape(1)\r\n    print \"\"\r\n\r\n    print \"The shape of x:\\t\", W.shape, \",\\t and the W.reshape(3,3) is :\"\r\n    print W.reshape(3,3)\r\n    print \"\"\r\n\r\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshape(5,5) is :\"\r\n    print y.reshape(5,5)\r\n    print \"\"\r\n```\r\n\r\nand \r\n\r\n```\r\n  def testAtrousConv2DTransposeSingleStride(self):\r\n    with self.test_session():\r\n      strides = [1, 1, 1, 1]\r\n\r\n      # Input, output: [batch, height, width, depth]\r\n      x_shape = [2, 6, 4, 3]\r\n      y_shape = [2, 6, 4, 2]\r\n\r\n      # Filter: [kernel_height, kernel_width, output_depth, input_depth]\r\n      f_shape = [3, 3, 2, 3]\r\n\r\n      x = tf.constant(1.0, shape=x_shape, name=\"x\", dtype=tf.float32)\r\n      f = tf.constant(1.0, shape=f_shape, name=\"filter\", dtype=tf.float32)\r\n\r\n      output = tf.nn.atrous_conv2d_transpose(x, f, y_shape, 2, strides=strides,\r\n                                      padding=\"SAME\")\r\n\r\n      value = output.eval()\r\n      print(value)\r\n```", "created_at": "2016-10-31T09:39:18Z", "updated_at": "2016-12-07T00:06:12Z", "closed_at": "2016-12-07T00:06:12Z", "merged_at": null, "merge_commit_sha": "32a490fff0555d13fa407ee68efc9a59103d485f", "assignee": {"login": "gpapan", "id": 6232317, "node_id": "MDQ6VXNlcjYyMzIzMTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6232317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpapan", "html_url": "https://github.com/gpapan", "followers_url": "https://api.github.com/users/gpapan/followers", "following_url": "https://api.github.com/users/gpapan/following{/other_user}", "gists_url": "https://api.github.com/users/gpapan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpapan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpapan/subscriptions", "organizations_url": "https://api.github.com/users/gpapan/orgs", "repos_url": "https://api.github.com/users/gpapan/repos", "events_url": "https://api.github.com/users/gpapan/events{/privacy}", "received_events_url": "https://api.github.com/users/gpapan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gpapan", "id": 6232317, "node_id": "MDQ6VXNlcjYyMzIzMTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6232317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpapan", "html_url": "https://github.com/gpapan", "followers_url": "https://api.github.com/users/gpapan/followers", "following_url": "https://api.github.com/users/gpapan/following{/other_user}", "gists_url": "https://api.github.com/users/gpapan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpapan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpapan/subscriptions", "organizations_url": "https://api.github.com/users/gpapan/orgs", "repos_url": "https://api.github.com/users/gpapan/repos", "events_url": "https://api.github.com/users/gpapan/events{/privacy}", "received_events_url": "https://api.github.com/users/gpapan/received_events", "type": "User", "site_admin": false}], "requested_reviewers": [], "requested_teams": [], "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}, {"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "milestone": null, "commits_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5300/commits", "review_comments_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5300/comments", "review_comment_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments{/number}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5300/comments", "statuses_url": "https://api.github.com/repos/tensorflow/tensorflow/statuses/9a2e3026babfff2c981265176cc334d75b7dfbc2", "head": {"label": "guotong1988:issue-4668", "ref": "issue-4668", "sha": "9a2e3026babfff2c981265176cc334d75b7dfbc2", "user": {"login": "guotong1988", "id": 4702353, "node_id": "MDQ6VXNlcjQ3MDIzNTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4702353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guotong1988", "html_url": "https://github.com/guotong1988", "followers_url": "https://api.github.com/users/guotong1988/followers", "following_url": "https://api.github.com/users/guotong1988/following{/other_user}", "gists_url": "https://api.github.com/users/guotong1988/gists{/gist_id}", "starred_url": "https://api.github.com/users/guotong1988/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guotong1988/subscriptions", "organizations_url": "https://api.github.com/users/guotong1988/orgs", "repos_url": "https://api.github.com/users/guotong1988/repos", "events_url": "https://api.github.com/users/guotong1988/events{/privacy}", "received_events_url": "https://api.github.com/users/guotong1988/received_events", "type": "User", "site_admin": false}, "repo": null}, "base": {"label": "tensorflow:master", "ref": "master", "sha": "56cfe7967f5e2e98f0a7c674952c3f22c19b83de", "user": {"login": "tensorflow", "id": 15658638, "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1NjU4NjM4", "avatar_url": "https://avatars1.githubusercontent.com/u/15658638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow", "html_url": "https://github.com/tensorflow", "followers_url": "https://api.github.com/users/tensorflow/followers", "following_url": "https://api.github.com/users/tensorflow/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow/orgs", "repos_url": "https://api.github.com/users/tensorflow/repos", "events_url": "https://api.github.com/users/tensorflow/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow/received_events", "type": "Organization", "site_admin": false}, "repo": {"id": 45717250, "node_id": "MDEwOlJlcG9zaXRvcnk0NTcxNzI1MA==", "name": "tensorflow", "full_name": "tensorflow/tensorflow", "private": false, "owner": {"login": "tensorflow", "id": 15658638, "node_id": "MDEyOk9yZ2FuaXphdGlvbjE1NjU4NjM4", "avatar_url": "https://avatars1.githubusercontent.com/u/15658638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow", "html_url": "https://github.com/tensorflow", "followers_url": "https://api.github.com/users/tensorflow/followers", "following_url": "https://api.github.com/users/tensorflow/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow/orgs", "repos_url": "https://api.github.com/users/tensorflow/repos", "events_url": "https://api.github.com/users/tensorflow/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow/received_events", "type": "Organization", "site_admin": false}, "html_url": "https://github.com/tensorflow/tensorflow", "description": "An Open Source Machine Learning Framework for Everyone", "fork": false, "url": "https://api.github.com/repos/tensorflow/tensorflow", "forks_url": "https://api.github.com/repos/tensorflow/tensorflow/forks", "keys_url": "https://api.github.com/repos/tensorflow/tensorflow/keys{/key_id}", "collaborators_url": "https://api.github.com/repos/tensorflow/tensorflow/collaborators{/collaborator}", "teams_url": "https://api.github.com/repos/tensorflow/tensorflow/teams", "hooks_url": "https://api.github.com/repos/tensorflow/tensorflow/hooks", "issue_events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/events{/number}", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/events", "assignees_url": "https://api.github.com/repos/tensorflow/tensorflow/assignees{/user}", "branches_url": "https://api.github.com/repos/tensorflow/tensorflow/branches{/branch}", "tags_url": "https://api.github.com/repos/tensorflow/tensorflow/tags", "blobs_url": "https://api.github.com/repos/tensorflow/tensorflow/git/blobs{/sha}", "git_tags_url": "https://api.github.com/repos/tensorflow/tensorflow/git/tags{/sha}", "git_refs_url": "https://api.github.com/repos/tensorflow/tensorflow/git/refs{/sha}", "trees_url": "https://api.github.com/repos/tensorflow/tensorflow/git/trees{/sha}", "statuses_url": "https://api.github.com/repos/tensorflow/tensorflow/statuses/{sha}", "languages_url": "https://api.github.com/repos/tensorflow/tensorflow/languages", "stargazers_url": "https://api.github.com/repos/tensorflow/tensorflow/stargazers", "contributors_url": "https://api.github.com/repos/tensorflow/tensorflow/contributors", "subscribers_url": "https://api.github.com/repos/tensorflow/tensorflow/subscribers", "subscription_url": "https://api.github.com/repos/tensorflow/tensorflow/subscription", "commits_url": "https://api.github.com/repos/tensorflow/tensorflow/commits{/sha}", "git_commits_url": "https://api.github.com/repos/tensorflow/tensorflow/git/commits{/sha}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/comments{/number}", "issue_comment_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments{/number}", "contents_url": "https://api.github.com/repos/tensorflow/tensorflow/contents/{+path}", "compare_url": "https://api.github.com/repos/tensorflow/tensorflow/compare/{base}...{head}", "merges_url": "https://api.github.com/repos/tensorflow/tensorflow/merges", "archive_url": "https://api.github.com/repos/tensorflow/tensorflow/{archive_format}{/ref}", "downloads_url": "https://api.github.com/repos/tensorflow/tensorflow/downloads", "issues_url": "https://api.github.com/repos/tensorflow/tensorflow/issues{/number}", "pulls_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls{/number}", "milestones_url": "https://api.github.com/repos/tensorflow/tensorflow/milestones{/number}", "notifications_url": "https://api.github.com/repos/tensorflow/tensorflow/notifications{?since,all,participating}", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/labels{/name}", "releases_url": "https://api.github.com/repos/tensorflow/tensorflow/releases{/id}", "deployments_url": "https://api.github.com/repos/tensorflow/tensorflow/deployments", "created_at": "2015-11-07T01:19:20Z", "updated_at": "2018-11-24T20:25:08Z", "pushed_at": "2018-11-24T18:40:19Z", "git_url": "git://github.com/tensorflow/tensorflow.git", "ssh_url": "git@github.com:tensorflow/tensorflow.git", "clone_url": "https://github.com/tensorflow/tensorflow.git", "svn_url": "https://github.com/tensorflow/tensorflow", "homepage": "https://tensorflow.org", "size": 284546, "stargazers_count": 115177, "watchers_count": 115177, "language": "C++", "has_issues": true, "has_projects": true, "has_downloads": true, "has_wiki": false, "has_pages": false, "forks_count": 69947, "mirror_url": null, "archived": false, "open_issues_count": 1759, "license": {"key": "apache-2.0", "name": "Apache License 2.0", "spdx_id": "Apache-2.0", "url": "https://api.github.com/licenses/apache-2.0", "node_id": "MDc6TGljZW5zZTI="}, "forks": 69947, "open_issues": 1759, "watchers": 115177, "default_branch": "master"}}, "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5300"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/5300"}, "issue": {"href": "https://api.github.com/repos/tensorflow/tensorflow/issues/5300"}, "comments": {"href": "https://api.github.com/repos/tensorflow/tensorflow/issues/5300/comments"}, "review_comments": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5300/comments"}, "review_comment": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments{/number}"}, "commits": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5300/commits"}, "statuses": {"href": "https://api.github.com/repos/tensorflow/tensorflow/statuses/9a2e3026babfff2c981265176cc334d75b7dfbc2"}}, "author_association": "CONTRIBUTOR", "body_html": "<p>Issue description : <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"180203707\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/4668\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/4668/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/4668\">#4668</a></p>\n<p>This is the first commit of the issue.<br>\nI will commit the unit test later.<br>\nI will also add the comment for the method.</p>\n<p><strong>Thank you for any advice.</strong></p>\n<p>Now I test it with:</p>\n<pre><code>\n# Input, output: [batch, height, width, depth]\nx_image = tf.placeholder(tf.float32,shape=[1])\nx = tf.reshape(x_image,[1,1,1,1])\n\n#Filter: W [kernel_height, kernel_width, output_depth, input_depth]\nW_cpu = np.array([[1,-1,1],[1,1,1],[-1,1,-1]],dtype=np.float32)\nW = tf.Variable(W_cpu)\nW = tf.reshape(W, [3,3,1,1])\n\nstrides=[1, 1, 1, 1]\npadding='VALID'\n\ny = tf.nn.atrous_conv2d_transpose(x, W, [1,5,5,1], 2, strides, padding)\n\nx_data = np.array([1],dtype=np.float32)\nwith tf.Session() as sess:\n    init = tf.initialize_all_variables()\n    sess.run(init)\n\n    x = (sess.run(x, feed_dict={x_image: x_data}))\n    W = (sess.run(W, feed_dict={x_image: x_data}))\n    y = (sess.run(y, feed_dict={x_image: x_data}))\n\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshape(1) is :\"\n    print x.reshape(1)\n    print \"\"\n\n    print \"The shape of x:\\t\", W.shape, \",\\t and the W.reshape(3,3) is :\"\n    print W.reshape(3,3)\n    print \"\"\n\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshape(5,5) is :\"\n    print y.reshape(5,5)\n    print \"\"\n</code></pre>\n<p>and</p>\n<pre><code>  def testAtrousConv2DTransposeSingleStride(self):\n    with self.test_session():\n      strides = [1, 1, 1, 1]\n\n      # Input, output: [batch, height, width, depth]\n      x_shape = [2, 6, 4, 3]\n      y_shape = [2, 6, 4, 2]\n\n      # Filter: [kernel_height, kernel_width, output_depth, input_depth]\n      f_shape = [3, 3, 2, 3]\n\n      x = tf.constant(1.0, shape=x_shape, name=\"x\", dtype=tf.float32)\n      f = tf.constant(1.0, shape=f_shape, name=\"filter\", dtype=tf.float32)\n\n      output = tf.nn.atrous_conv2d_transpose(x, f, y_shape, 2, strides=strides,\n                                      padding=\"SAME\")\n\n      value = output.eval()\n      print(value)\n</code></pre>", "body_text": "Issue description : #4668\nThis is the first commit of the issue.\nI will commit the unit test later.\nI will also add the comment for the method.\nThank you for any advice.\nNow I test it with:\n\n# Input, output: [batch, height, width, depth]\nx_image = tf.placeholder(tf.float32,shape=[1])\nx = tf.reshape(x_image,[1,1,1,1])\n\n#Filter: W [kernel_height, kernel_width, output_depth, input_depth]\nW_cpu = np.array([[1,-1,1],[1,1,1],[-1,1,-1]],dtype=np.float32)\nW = tf.Variable(W_cpu)\nW = tf.reshape(W, [3,3,1,1])\n\nstrides=[1, 1, 1, 1]\npadding='VALID'\n\ny = tf.nn.atrous_conv2d_transpose(x, W, [1,5,5,1], 2, strides, padding)\n\nx_data = np.array([1],dtype=np.float32)\nwith tf.Session() as sess:\n    init = tf.initialize_all_variables()\n    sess.run(init)\n\n    x = (sess.run(x, feed_dict={x_image: x_data}))\n    W = (sess.run(W, feed_dict={x_image: x_data}))\n    y = (sess.run(y, feed_dict={x_image: x_data}))\n\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshape(1) is :\"\n    print x.reshape(1)\n    print \"\"\n\n    print \"The shape of x:\\t\", W.shape, \",\\t and the W.reshape(3,3) is :\"\n    print W.reshape(3,3)\n    print \"\"\n\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshape(5,5) is :\"\n    print y.reshape(5,5)\n    print \"\"\n\nand\n  def testAtrousConv2DTransposeSingleStride(self):\n    with self.test_session():\n      strides = [1, 1, 1, 1]\n\n      # Input, output: [batch, height, width, depth]\n      x_shape = [2, 6, 4, 3]\n      y_shape = [2, 6, 4, 2]\n\n      # Filter: [kernel_height, kernel_width, output_depth, input_depth]\n      f_shape = [3, 3, 2, 3]\n\n      x = tf.constant(1.0, shape=x_shape, name=\"x\", dtype=tf.float32)\n      f = tf.constant(1.0, shape=f_shape, name=\"filter\", dtype=tf.float32)\n\n      output = tf.nn.atrous_conv2d_transpose(x, f, y_shape, 2, strides=strides,\n                                      padding=\"SAME\")\n\n      value = output.eval()\n      print(value)", "merged": false, "mergeable": null, "rebaseable": null, "mergeable_state": "unknown", "merged_by": null, "comments": 19, "review_comments": 0, "maintainer_can_modify": false, "commits": 0, "additions": 0, "deletions": 0, "changed_files": 0}