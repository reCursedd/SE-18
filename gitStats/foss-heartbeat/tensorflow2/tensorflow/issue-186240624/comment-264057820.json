{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/264057820", "html_url": "https://github.com/tensorflow/tensorflow/pull/5300#issuecomment-264057820", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5300", "id": 264057820, "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDA1NzgyMA==", "user": {"login": "guotong1988", "id": 4702353, "node_id": "MDQ6VXNlcjQ3MDIzNTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4702353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guotong1988", "html_url": "https://github.com/guotong1988", "followers_url": "https://api.github.com/users/guotong1988/followers", "following_url": "https://api.github.com/users/guotong1988/following{/other_user}", "gists_url": "https://api.github.com/users/guotong1988/gists{/gist_id}", "starred_url": "https://api.github.com/users/guotong1988/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guotong1988/subscriptions", "organizations_url": "https://api.github.com/users/guotong1988/orgs", "repos_url": "https://api.github.com/users/guotong1988/repos", "events_url": "https://api.github.com/users/guotong1988/events{/privacy}", "received_events_url": "https://api.github.com/users/guotong1988/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-01T02:07:44Z", "updated_at": "2016-12-01T02:07:44Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I write another example ,  and I think my commit may be right.</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\n# Input, output: [batch, height, width, depth]\nx_image = tf.placeholder(tf.float32,shape=[2,2])\nx = tf.reshape(x_image,[1,2,2,1])\n\n#Filter: W [kernel_height, kernel_width, output_depth, input_depth]\nW_cpu = np.array([[1,-1,1],[1,1,1],[-1,1,-1]],dtype=np.float32)\nW = tf.Variable(W_cpu)\nW = tf.reshape(W, [3,3,1,1])\n\nstrides=[1, 1, 1, 1]\npadding='VALID'\n\ny = tf.nn.atrous_conv2d_transpose(x, W, [1,5,5,1], 2, strides, padding)\n\nx_data = np.array([[1,1],[1,1]],dtype=np.float32)\nwith tf.Session() as sess:\n    init = tf.initialize_all_variables()\n    sess.run(init)\n\n    x = (sess.run(x, feed_dict={x_image: x_data}))\n    W = (sess.run(W, feed_dict={x_image: x_data}))\n    y = (sess.run(y, feed_dict={x_image: x_data}))\n\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshape(2,2) is :\"\n    print x.reshape([2,2])\n    print \"\"\n\n    print \"The shape of x:\\t\", W.shape, \",\\t and the W.reshape(3,3) is :\"\n    print W.reshape(3,3)\n    print \"\"\n\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshape(6,6) is :\"\n    print y.reshape(6,6)\n    print \"\"\n</code></pre>", "body_text": "I write another example ,  and I think my commit may be right.\nimport numpy as np\nimport tensorflow as tf\n\n# Input, output: [batch, height, width, depth]\nx_image = tf.placeholder(tf.float32,shape=[2,2])\nx = tf.reshape(x_image,[1,2,2,1])\n\n#Filter: W [kernel_height, kernel_width, output_depth, input_depth]\nW_cpu = np.array([[1,-1,1],[1,1,1],[-1,1,-1]],dtype=np.float32)\nW = tf.Variable(W_cpu)\nW = tf.reshape(W, [3,3,1,1])\n\nstrides=[1, 1, 1, 1]\npadding='VALID'\n\ny = tf.nn.atrous_conv2d_transpose(x, W, [1,5,5,1], 2, strides, padding)\n\nx_data = np.array([[1,1],[1,1]],dtype=np.float32)\nwith tf.Session() as sess:\n    init = tf.initialize_all_variables()\n    sess.run(init)\n\n    x = (sess.run(x, feed_dict={x_image: x_data}))\n    W = (sess.run(W, feed_dict={x_image: x_data}))\n    y = (sess.run(y, feed_dict={x_image: x_data}))\n\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshape(2,2) is :\"\n    print x.reshape([2,2])\n    print \"\"\n\n    print \"The shape of x:\\t\", W.shape, \",\\t and the W.reshape(3,3) is :\"\n    print W.reshape(3,3)\n    print \"\"\n\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshape(6,6) is :\"\n    print y.reshape(6,6)\n    print \"\"", "body": "I write another example ,  and I think my commit may be right.\r\n\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n# Input, output: [batch, height, width, depth]\r\nx_image = tf.placeholder(tf.float32,shape=[2,2])\r\nx = tf.reshape(x_image,[1,2,2,1])\r\n\r\n#Filter: W [kernel_height, kernel_width, output_depth, input_depth]\r\nW_cpu = np.array([[1,-1,1],[1,1,1],[-1,1,-1]],dtype=np.float32)\r\nW = tf.Variable(W_cpu)\r\nW = tf.reshape(W, [3,3,1,1])\r\n\r\nstrides=[1, 1, 1, 1]\r\npadding='VALID'\r\n\r\ny = tf.nn.atrous_conv2d_transpose(x, W, [1,5,5,1], 2, strides, padding)\r\n\r\nx_data = np.array([[1,1],[1,1]],dtype=np.float32)\r\nwith tf.Session() as sess:\r\n    init = tf.initialize_all_variables()\r\n    sess.run(init)\r\n\r\n    x = (sess.run(x, feed_dict={x_image: x_data}))\r\n    W = (sess.run(W, feed_dict={x_image: x_data}))\r\n    y = (sess.run(y, feed_dict={x_image: x_data}))\r\n\r\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshape(2,2) is :\"\r\n    print x.reshape([2,2])\r\n    print \"\"\r\n\r\n    print \"The shape of x:\\t\", W.shape, \",\\t and the W.reshape(3,3) is :\"\r\n    print W.reshape(3,3)\r\n    print \"\"\r\n\r\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshape(6,6) is :\"\r\n    print y.reshape(6,6)\r\n    print \"\"\r\n```\r\n"}