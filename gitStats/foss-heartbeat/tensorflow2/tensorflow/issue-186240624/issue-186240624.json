{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5300", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5300/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5300/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5300/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/5300", "id": 186240624, "node_id": "MDExOlB1bGxSZXF1ZXN0OTE1Nzk1MjM=", "number": 5300, "title": "Add atrous_conv2d_transpose python function", "user": {"login": "guotong1988", "id": 4702353, "node_id": "MDQ6VXNlcjQ3MDIzNTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4702353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guotong1988", "html_url": "https://github.com/guotong1988", "followers_url": "https://api.github.com/users/guotong1988/followers", "following_url": "https://api.github.com/users/guotong1988/following{/other_user}", "gists_url": "https://api.github.com/users/guotong1988/gists{/gist_id}", "starred_url": "https://api.github.com/users/guotong1988/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guotong1988/subscriptions", "organizations_url": "https://api.github.com/users/guotong1988/orgs", "repos_url": "https://api.github.com/users/guotong1988/repos", "events_url": "https://api.github.com/users/guotong1988/events{/privacy}", "received_events_url": "https://api.github.com/users/guotong1988/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}, {"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "gpapan", "id": 6232317, "node_id": "MDQ6VXNlcjYyMzIzMTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6232317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpapan", "html_url": "https://github.com/gpapan", "followers_url": "https://api.github.com/users/gpapan/followers", "following_url": "https://api.github.com/users/gpapan/following{/other_user}", "gists_url": "https://api.github.com/users/gpapan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpapan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpapan/subscriptions", "organizations_url": "https://api.github.com/users/gpapan/orgs", "repos_url": "https://api.github.com/users/gpapan/repos", "events_url": "https://api.github.com/users/gpapan/events{/privacy}", "received_events_url": "https://api.github.com/users/gpapan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gpapan", "id": 6232317, "node_id": "MDQ6VXNlcjYyMzIzMTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6232317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpapan", "html_url": "https://github.com/gpapan", "followers_url": "https://api.github.com/users/gpapan/followers", "following_url": "https://api.github.com/users/gpapan/following{/other_user}", "gists_url": "https://api.github.com/users/gpapan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpapan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpapan/subscriptions", "organizations_url": "https://api.github.com/users/gpapan/orgs", "repos_url": "https://api.github.com/users/gpapan/repos", "events_url": "https://api.github.com/users/gpapan/events{/privacy}", "received_events_url": "https://api.github.com/users/gpapan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 19, "created_at": "2016-10-31T09:39:18Z", "updated_at": "2016-12-07T00:06:12Z", "closed_at": "2016-12-07T00:06:12Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5300", "html_url": "https://github.com/tensorflow/tensorflow/pull/5300", "diff_url": "https://github.com/tensorflow/tensorflow/pull/5300.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/5300.patch"}, "body_html": "<p>Issue description : <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"180203707\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/4668\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/4668/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/4668\">#4668</a></p>\n<p>This is the first commit of the issue.<br>\nI will commit the unit test later.<br>\nI will also add the comment for the method.</p>\n<p><strong>Thank you for any advice.</strong></p>\n<p>Now I test it with:</p>\n<pre><code>\n# Input, output: [batch, height, width, depth]\nx_image = tf.placeholder(tf.float32,shape=[1])\nx = tf.reshape(x_image,[1,1,1,1])\n\n#Filter: W [kernel_height, kernel_width, output_depth, input_depth]\nW_cpu = np.array([[1,-1,1],[1,1,1],[-1,1,-1]],dtype=np.float32)\nW = tf.Variable(W_cpu)\nW = tf.reshape(W, [3,3,1,1])\n\nstrides=[1, 1, 1, 1]\npadding='VALID'\n\ny = tf.nn.atrous_conv2d_transpose(x, W, [1,5,5,1], 2, strides, padding)\n\nx_data = np.array([1],dtype=np.float32)\nwith tf.Session() as sess:\n    init = tf.initialize_all_variables()\n    sess.run(init)\n\n    x = (sess.run(x, feed_dict={x_image: x_data}))\n    W = (sess.run(W, feed_dict={x_image: x_data}))\n    y = (sess.run(y, feed_dict={x_image: x_data}))\n\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshape(1) is :\"\n    print x.reshape(1)\n    print \"\"\n\n    print \"The shape of x:\\t\", W.shape, \",\\t and the W.reshape(3,3) is :\"\n    print W.reshape(3,3)\n    print \"\"\n\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshape(5,5) is :\"\n    print y.reshape(5,5)\n    print \"\"\n</code></pre>\n<p>and</p>\n<pre><code>  def testAtrousConv2DTransposeSingleStride(self):\n    with self.test_session():\n      strides = [1, 1, 1, 1]\n\n      # Input, output: [batch, height, width, depth]\n      x_shape = [2, 6, 4, 3]\n      y_shape = [2, 6, 4, 2]\n\n      # Filter: [kernel_height, kernel_width, output_depth, input_depth]\n      f_shape = [3, 3, 2, 3]\n\n      x = tf.constant(1.0, shape=x_shape, name=\"x\", dtype=tf.float32)\n      f = tf.constant(1.0, shape=f_shape, name=\"filter\", dtype=tf.float32)\n\n      output = tf.nn.atrous_conv2d_transpose(x, f, y_shape, 2, strides=strides,\n                                      padding=\"SAME\")\n\n      value = output.eval()\n      print(value)\n</code></pre>", "body_text": "Issue description : #4668\nThis is the first commit of the issue.\nI will commit the unit test later.\nI will also add the comment for the method.\nThank you for any advice.\nNow I test it with:\n\n# Input, output: [batch, height, width, depth]\nx_image = tf.placeholder(tf.float32,shape=[1])\nx = tf.reshape(x_image,[1,1,1,1])\n\n#Filter: W [kernel_height, kernel_width, output_depth, input_depth]\nW_cpu = np.array([[1,-1,1],[1,1,1],[-1,1,-1]],dtype=np.float32)\nW = tf.Variable(W_cpu)\nW = tf.reshape(W, [3,3,1,1])\n\nstrides=[1, 1, 1, 1]\npadding='VALID'\n\ny = tf.nn.atrous_conv2d_transpose(x, W, [1,5,5,1], 2, strides, padding)\n\nx_data = np.array([1],dtype=np.float32)\nwith tf.Session() as sess:\n    init = tf.initialize_all_variables()\n    sess.run(init)\n\n    x = (sess.run(x, feed_dict={x_image: x_data}))\n    W = (sess.run(W, feed_dict={x_image: x_data}))\n    y = (sess.run(y, feed_dict={x_image: x_data}))\n\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshape(1) is :\"\n    print x.reshape(1)\n    print \"\"\n\n    print \"The shape of x:\\t\", W.shape, \",\\t and the W.reshape(3,3) is :\"\n    print W.reshape(3,3)\n    print \"\"\n\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshape(5,5) is :\"\n    print y.reshape(5,5)\n    print \"\"\n\nand\n  def testAtrousConv2DTransposeSingleStride(self):\n    with self.test_session():\n      strides = [1, 1, 1, 1]\n\n      # Input, output: [batch, height, width, depth]\n      x_shape = [2, 6, 4, 3]\n      y_shape = [2, 6, 4, 2]\n\n      # Filter: [kernel_height, kernel_width, output_depth, input_depth]\n      f_shape = [3, 3, 2, 3]\n\n      x = tf.constant(1.0, shape=x_shape, name=\"x\", dtype=tf.float32)\n      f = tf.constant(1.0, shape=f_shape, name=\"filter\", dtype=tf.float32)\n\n      output = tf.nn.atrous_conv2d_transpose(x, f, y_shape, 2, strides=strides,\n                                      padding=\"SAME\")\n\n      value = output.eval()\n      print(value)", "body": "Issue description : https://github.com/tensorflow/tensorflow/issues/4668\r\n\r\nThis is the first commit of the issue.\r\nI will commit the unit test later.\r\nI will also add the comment for the method.\r\n\r\n**Thank you for any advice.**\r\n\r\nNow I test it with:\r\n\r\n```\r\n\r\n# Input, output: [batch, height, width, depth]\r\nx_image = tf.placeholder(tf.float32,shape=[1])\r\nx = tf.reshape(x_image,[1,1,1,1])\r\n\r\n#Filter: W [kernel_height, kernel_width, output_depth, input_depth]\r\nW_cpu = np.array([[1,-1,1],[1,1,1],[-1,1,-1]],dtype=np.float32)\r\nW = tf.Variable(W_cpu)\r\nW = tf.reshape(W, [3,3,1,1])\r\n\r\nstrides=[1, 1, 1, 1]\r\npadding='VALID'\r\n\r\ny = tf.nn.atrous_conv2d_transpose(x, W, [1,5,5,1], 2, strides, padding)\r\n\r\nx_data = np.array([1],dtype=np.float32)\r\nwith tf.Session() as sess:\r\n    init = tf.initialize_all_variables()\r\n    sess.run(init)\r\n\r\n    x = (sess.run(x, feed_dict={x_image: x_data}))\r\n    W = (sess.run(W, feed_dict={x_image: x_data}))\r\n    y = (sess.run(y, feed_dict={x_image: x_data}))\r\n\r\n    print \"The shape of x:\\t\", x.shape, \",\\t and the x.reshape(1) is :\"\r\n    print x.reshape(1)\r\n    print \"\"\r\n\r\n    print \"The shape of x:\\t\", W.shape, \",\\t and the W.reshape(3,3) is :\"\r\n    print W.reshape(3,3)\r\n    print \"\"\r\n\r\n    print \"The shape of y:\\t\", y.shape, \",\\t and the y.reshape(5,5) is :\"\r\n    print y.reshape(5,5)\r\n    print \"\"\r\n```\r\n\r\nand \r\n\r\n```\r\n  def testAtrousConv2DTransposeSingleStride(self):\r\n    with self.test_session():\r\n      strides = [1, 1, 1, 1]\r\n\r\n      # Input, output: [batch, height, width, depth]\r\n      x_shape = [2, 6, 4, 3]\r\n      y_shape = [2, 6, 4, 2]\r\n\r\n      # Filter: [kernel_height, kernel_width, output_depth, input_depth]\r\n      f_shape = [3, 3, 2, 3]\r\n\r\n      x = tf.constant(1.0, shape=x_shape, name=\"x\", dtype=tf.float32)\r\n      f = tf.constant(1.0, shape=f_shape, name=\"filter\", dtype=tf.float32)\r\n\r\n      output = tf.nn.atrous_conv2d_transpose(x, f, y_shape, 2, strides=strides,\r\n                                      padding=\"SAME\")\r\n\r\n      value = output.eval()\r\n      print(value)\r\n```"}