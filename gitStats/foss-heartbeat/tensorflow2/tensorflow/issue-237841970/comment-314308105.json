{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/314308105", "html_url": "https://github.com/tensorflow/tensorflow/pull/10985#issuecomment-314308105", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10985", "id": 314308105, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDMwODEwNQ==", "user": {"login": "zhongzyd", "id": 6659973, "node_id": "MDQ6VXNlcjY2NTk5NzM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6659973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongzyd", "html_url": "https://github.com/zhongzyd", "followers_url": "https://api.github.com/users/zhongzyd/followers", "following_url": "https://api.github.com/users/zhongzyd/following{/other_user}", "gists_url": "https://api.github.com/users/zhongzyd/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongzyd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongzyd/subscriptions", "organizations_url": "https://api.github.com/users/zhongzyd/orgs", "repos_url": "https://api.github.com/users/zhongzyd/repos", "events_url": "https://api.github.com/users/zhongzyd/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongzyd/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-11T02:50:32Z", "updated_at": "2017-07-11T02:50:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1766524\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sguada\">@sguada</a><br>\nEq. (16) uses uniform distribution.<br>\nIf <strong>W</strong> is sampled from a uniform distribution in the range <strong>[-sqrt(6) / sqrt(n_in + n_out), sqrt(6) / sqrt(n_in + n_out)]</strong>, then it has a standard deviation of <strong>sqrt(2) / sqrt(n_in + n_out)</strong>.<br>\nSo when <strong>W</strong> is sampled from a <strong>normal distribution</strong>, the standard deviation should be <strong>sqrt(2) / sqrt(n_in + n_out)</strong>.</p>\n<p>You could check the code in <strong><a href=\"https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/layers/python/layers/initializers.py\">https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/layers/python/layers/initializers.py</a></strong> .<br>\nIf <strong>mode == 'FAN_AVG'</strong>, it uses a standard deviation of <strong>sqrt(2) / sqrt(n_in + n_out)</strong> for normal distribution. Because it is sampled from a <strong>truncated normal distribution</strong>, so it multiply the factor with 1.3 to keep the standard deviation at <strong>sqrt(2) / sqrt(n_in + n_out)</strong>.</p>", "body_text": "@sguada\nEq. (16) uses uniform distribution.\nIf W is sampled from a uniform distribution in the range [-sqrt(6) / sqrt(n_in + n_out), sqrt(6) / sqrt(n_in + n_out)], then it has a standard deviation of sqrt(2) / sqrt(n_in + n_out).\nSo when W is sampled from a normal distribution, the standard deviation should be sqrt(2) / sqrt(n_in + n_out).\nYou could check the code in https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/layers/python/layers/initializers.py .\nIf mode == 'FAN_AVG', it uses a standard deviation of sqrt(2) / sqrt(n_in + n_out) for normal distribution. Because it is sampled from a truncated normal distribution, so it multiply the factor with 1.3 to keep the standard deviation at sqrt(2) / sqrt(n_in + n_out).", "body": "@sguada \r\nEq. (16) uses uniform distribution.  \r\nIf **W** is sampled from a uniform distribution in the range **[-sqrt(6) / sqrt(n_in + n_out), sqrt(6) / sqrt(n_in + n_out)]**, then it has a standard deviation of **sqrt(2) / sqrt(n_in + n_out)**.\r\nSo when **W** is sampled from a **normal distribution**, the standard deviation should be **sqrt(2) / sqrt(n_in + n_out)**. \r\n\r\nYou could check the code in **https://github.com/tensorflow/tensorflow/blob/r1.2/tensorflow/contrib/layers/python/layers/initializers.py** .\r\nIf **mode == 'FAN_AVG'**, it uses a standard deviation of **sqrt(2) / sqrt(n_in + n_out)** for normal distribution. Because it is sampled from a **truncated normal distribution**, so it multiply the factor with 1.3 to keep the standard deviation at **sqrt(2) / sqrt(n_in + n_out)**."}