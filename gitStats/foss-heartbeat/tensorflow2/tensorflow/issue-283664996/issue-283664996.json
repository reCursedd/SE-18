{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15527", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15527/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15527/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15527/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15527", "id": 283664996, "node_id": "MDU6SXNzdWUyODM2NjQ5OTY=", "number": 15527, "title": "[Bug] Tensorflow serving loads incorrect model weights when using saved model main_op", "user": {"login": "zmjjmz", "id": 1694612, "node_id": "MDQ6VXNlcjE2OTQ2MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1694612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmjjmz", "html_url": "https://github.com/zmjjmz", "followers_url": "https://api.github.com/users/zmjjmz/followers", "following_url": "https://api.github.com/users/zmjjmz/following{/other_user}", "gists_url": "https://api.github.com/users/zmjjmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmjjmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmjjmz/subscriptions", "organizations_url": "https://api.github.com/users/zmjjmz/orgs", "repos_url": "https://api.github.com/users/zmjjmz/repos", "events_url": "https://api.github.com/users/zmjjmz/events{/privacy}", "received_events_url": "https://api.github.com/users/zmjjmz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-12-20T19:06:51Z", "updated_at": "2018-01-26T17:32:16Z", "closed_at": "2018-01-26T17:32:16Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Debian 3.16.36 x86_64</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary (pip)</li>\n<li><strong>TensorFlow version (use command below)</strong>: Git version 1.4.0-19-ga52c8d9 Release version 1.4.1</li>\n<li><strong>Python version</strong>: 2.7.9</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>: See attached gist</li>\n</ul>\n<p>Hey there,</p>\n<p>I've documented a lot of this bug over on this <a href=\"https://github.com/tensorflow/serving/issues/656\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/serving/issues/656/hovercard\">issue</a> on the tensorflow serving repository, which was closed with the direction to open an issue here.</p>\n<p>Essentially, the bug is as follows: I have an embedding layer in Keras that uses some pre-initialized weights. When I export the model for use by TF serving, I note the following behavior:</p>\n<ul>\n<li>The keras model itself has no issue outputting the correct results</li>\n<li>The exported model itself (upon inspection) has the correct weights</li>\n<li>The result values from TF serving are incorrect.</li>\n</ul>\n<p>I've narrowed it down to an issue with <code>tensorflow.python.ops.variables.global_variables_initializer</code>, as follows:</p>\n<p>When specifying the <code>main_op</code> argument in <code>tensorflow.saved_model.builder.SavedModelBuilder.add_meta_graph_and_variables</code>, if I use <code>tensorflow.saved_model.main_op.main_op()</code> I encounter this issue.</p>\n<p>If instead, I use a control flow group that excludes the global variables initializer as follows:</p>\n<pre><code>main_op_new = control_flow_ops.group(                 \n            lookup_ops.tables_initializer(),          \n            variables.local_variables_initializer(),  \n)                                                     \n</code></pre>\n<p>I do not encounter this issue. I've attached the full code for reproducing this issue (with the caveat of needing <code>tensorflow_model_server</code> running) <a href=\"https://gist.github.com/zmjjmz/ce9c7a896933a02953cae0069a2ca21e\">here</a></p>\n<p>Here's the example output with the global variables initializer: <a href=\"https://gist.github.com/zmjjmz/d739cdfa52148eb814450e48cbf8ddb6\">https://gist.github.com/zmjjmz/d739cdfa52148eb814450e48cbf8ddb6</a></p>\n<p>If you comment out line 83 of the repro code and uncomment line 84, you should get the correct output as shown here: <a href=\"https://gist.github.com/zmjjmz/9edee5b4eeff94f383122545d80ee55f\">https://gist.github.com/zmjjmz/9edee5b4eeff94f383122545d80ee55f</a></p>\n<p>Thanks for helpin out</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Debian 3.16.36 x86_64\nTensorFlow installed from (source or binary): Binary (pip)\nTensorFlow version (use command below): Git version 1.4.0-19-ga52c8d9 Release version 1.4.1\nPython version: 2.7.9\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce: See attached gist\n\nHey there,\nI've documented a lot of this bug over on this issue on the tensorflow serving repository, which was closed with the direction to open an issue here.\nEssentially, the bug is as follows: I have an embedding layer in Keras that uses some pre-initialized weights. When I export the model for use by TF serving, I note the following behavior:\n\nThe keras model itself has no issue outputting the correct results\nThe exported model itself (upon inspection) has the correct weights\nThe result values from TF serving are incorrect.\n\nI've narrowed it down to an issue with tensorflow.python.ops.variables.global_variables_initializer, as follows:\nWhen specifying the main_op argument in tensorflow.saved_model.builder.SavedModelBuilder.add_meta_graph_and_variables, if I use tensorflow.saved_model.main_op.main_op() I encounter this issue.\nIf instead, I use a control flow group that excludes the global variables initializer as follows:\nmain_op_new = control_flow_ops.group(                 \n            lookup_ops.tables_initializer(),          \n            variables.local_variables_initializer(),  \n)                                                     \n\nI do not encounter this issue. I've attached the full code for reproducing this issue (with the caveat of needing tensorflow_model_server running) here\nHere's the example output with the global variables initializer: https://gist.github.com/zmjjmz/d739cdfa52148eb814450e48cbf8ddb6\nIf you comment out line 83 of the repro code and uncomment line 84, you should get the correct output as shown here: https://gist.github.com/zmjjmz/9edee5b4eeff94f383122545d80ee55f\nThanks for helpin out", "body": "\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Debian 3.16.36 x86_64\r\n- **TensorFlow installed from (source or binary)**: Binary (pip)\r\n- **TensorFlow version (use command below)**: Git version 1.4.0-19-ga52c8d9 Release version 1.4.1\r\n- **Python version**: 2.7.9\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**: See attached gist\r\n\r\nHey there,\r\n\r\nI've documented a lot of this bug over on this [issue](https://github.com/tensorflow/serving/issues/656) on the tensorflow serving repository, which was closed with the direction to open an issue here.\r\n\r\nEssentially, the bug is as follows: I have an embedding layer in Keras that uses some pre-initialized weights. When I export the model for use by TF serving, I note the following behavior:\r\n\r\n- The keras model itself has no issue outputting the correct results\r\n- The exported model itself (upon inspection) has the correct weights\r\n- The result values from TF serving are incorrect.\r\n\r\nI've narrowed it down to an issue with `tensorflow.python.ops.variables.global_variables_initializer`, as follows:\r\n\r\nWhen specifying the `main_op` argument in `tensorflow.saved_model.builder.SavedModelBuilder.add_meta_graph_and_variables`, if I use `tensorflow.saved_model.main_op.main_op()` I encounter this issue. \r\n\r\nIf instead, I use a control flow group that excludes the global variables initializer as follows:\r\n\r\n```\r\nmain_op_new = control_flow_ops.group(                 \r\n            lookup_ops.tables_initializer(),          \r\n            variables.local_variables_initializer(),  \r\n)                                                     \r\n```\r\n\r\nI do not encounter this issue. I've attached the full code for reproducing this issue (with the caveat of needing `tensorflow_model_server` running) [here](https://gist.github.com/zmjjmz/ce9c7a896933a02953cae0069a2ca21e)\r\n\r\nHere's the example output with the global variables initializer: https://gist.github.com/zmjjmz/d739cdfa52148eb814450e48cbf8ddb6\r\n\r\nIf you comment out line 83 of the repro code and uncomment line 84, you should get the correct output as shown here: https://gist.github.com/zmjjmz/9edee5b4eeff94f383122545d80ee55f\r\n\r\nThanks for helpin out\r\n\r\n\r\n\r\n\r\n"}