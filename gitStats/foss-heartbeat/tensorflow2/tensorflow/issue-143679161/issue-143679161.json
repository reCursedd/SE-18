{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1653", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1653/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1653/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1653/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1653", "id": 143679161, "node_id": "MDU6SXNzdWUxNDM2NzkxNjE=", "number": 1653, "title": "Anyone implemented a Deconvolutional layer combined the Keras and Tensorflow?", "user": {"login": "meanmee", "id": 8026086, "node_id": "MDQ6VXNlcjgwMjYwODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8026086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meanmee", "html_url": "https://github.com/meanmee", "followers_url": "https://api.github.com/users/meanmee/followers", "following_url": "https://api.github.com/users/meanmee/following{/other_user}", "gists_url": "https://api.github.com/users/meanmee/gists{/gist_id}", "starred_url": "https://api.github.com/users/meanmee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meanmee/subscriptions", "organizations_url": "https://api.github.com/users/meanmee/orgs", "repos_url": "https://api.github.com/users/meanmee/repos", "events_url": "https://api.github.com/users/meanmee/events{/privacy}", "received_events_url": "https://api.github.com/users/meanmee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-26T08:45:00Z", "updated_at": "2016-06-28T14:21:21Z", "closed_at": "2016-06-28T14:21:21Z", "author_association": "NONE", "body_html": "<p>I am a little confused by the output shape in conv_transpose( ) function. How to calculate it?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Convolution2D_Transpose</span>(<span class=\"pl-e\">Layer</span>):\n    input_ndim <span class=\"pl-k\">=</span> <span class=\"pl-c1\">4</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">nb_filter</span>, <span class=\"pl-smi\">nb_row</span>, <span class=\"pl-smi\">nb_col</span>,\n                 <span class=\"pl-smi\">init</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>glorot_uniform<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>linear<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">weights</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>,\n                 <span class=\"pl-smi\">border_mode</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>valid<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">subsample</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>),<span class=\"pl-smi\">deconv_shape</span> <span class=\"pl-k\">=</span> (),\n                 <span class=\"pl-smi\">W_regularizer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">b_regularizer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">activity_regularizer</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>,\n                 <span class=\"pl-smi\">W_constraint</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">b_constraint</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kwargs</span>):\n\n        <span class=\"pl-k\">if</span> border_mode <span class=\"pl-k\">not</span> <span class=\"pl-k\">in</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>valid<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>same<span class=\"pl-pds\">'</span></span>}:\n            <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">Exception</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Invalid border mode for Convolution2D:<span class=\"pl-pds\">'</span></span>, border_mode)\n        <span class=\"pl-c1\">self</span>.nb_filter <span class=\"pl-k\">=</span> nb_filter\n        <span class=\"pl-c1\">self</span>.nb_row <span class=\"pl-k\">=</span> nb_row\n        <span class=\"pl-c1\">self</span>.nb_col <span class=\"pl-k\">=</span> nb_col\n        <span class=\"pl-c1\">self</span>.deconv_shape <span class=\"pl-k\">=</span> deconv_shape\n        <span class=\"pl-c1\">self</span>.init <span class=\"pl-k\">=</span> initializations.get(init)\n        <span class=\"pl-c1\">self</span>.activation <span class=\"pl-k\">=</span> activations.get(activation)\n        <span class=\"pl-k\">assert</span> border_mode <span class=\"pl-k\">in</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>valid<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>same<span class=\"pl-pds\">'</span></span>}, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>border_mode must be in {valid, same}<span class=\"pl-pds\">'</span></span>\n        <span class=\"pl-c1\">self</span>.border_mode <span class=\"pl-k\">=</span> border_mode\n        <span class=\"pl-c1\">self</span>.subsample <span class=\"pl-k\">=</span> <span class=\"pl-c1\">tuple</span>(subsample)\n\n        <span class=\"pl-c1\">self</span>.W_regularizer <span class=\"pl-k\">=</span> regularizers.get(W_regularizer)\n        <span class=\"pl-c1\">self</span>.b_regularizer <span class=\"pl-k\">=</span> regularizers.get(b_regularizer)\n        <span class=\"pl-c1\">self</span>.activity_regularizer <span class=\"pl-k\">=</span> regularizers.get(activity_regularizer)\n\n        <span class=\"pl-c1\">self</span>.W_constraint <span class=\"pl-k\">=</span> constraints.get(W_constraint)\n        <span class=\"pl-c1\">self</span>.b_constraint <span class=\"pl-k\">=</span> constraints.get(b_constraint)\n        <span class=\"pl-c1\">self</span>.constraints <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">self</span>.W_constraint, <span class=\"pl-c1\">self</span>.b_constraint]\n\n        <span class=\"pl-c1\">self</span>.initial_weights <span class=\"pl-k\">=</span> weights\n        <span class=\"pl-c1\">self</span>.input <span class=\"pl-k\">=</span> K.placeholder(<span class=\"pl-v\">ndim</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>)\n        <span class=\"pl-c1\">super</span>(Convolution2D_Transpose, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>(<span class=\"pl-k\">**</span>kwargs)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">build</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        stack_size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.input_shape[<span class=\"pl-c1\">1</span>]\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span>self.W_shape = (self.nb_filter, stack_size, self.nb_row, self.nb_col)</span>\n        <span class=\"pl-c1\">self</span>.W_shape <span class=\"pl-k\">=</span> ( <span class=\"pl-c1\">self</span>.nb_col, <span class=\"pl-c1\">self</span>.nb_row, stack_size, <span class=\"pl-c1\">self</span>.nb_filter)\n        <span class=\"pl-c1\">print</span> <span class=\"pl-c1\">self</span>.W_shape\n        <span class=\"pl-c1\">self</span>.W <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.init(<span class=\"pl-c1\">self</span>.W_shape)\n        <span class=\"pl-c1\">self</span>.b <span class=\"pl-k\">=</span> K.zeros((<span class=\"pl-c1\">self</span>.nb_filter,))\n        <span class=\"pl-c1\">self</span>.trainable_weights <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">self</span>.W, <span class=\"pl-c1\">self</span>.b]\n        <span class=\"pl-c1\">self</span>.regularizers <span class=\"pl-k\">=</span> []\n\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.W_regularizer:\n            <span class=\"pl-c1\">self</span>.W_regularizer.set_param(<span class=\"pl-c1\">self</span>.W)\n            <span class=\"pl-c1\">self</span>.regularizers.append(<span class=\"pl-c1\">self</span>.W_regularizer)\n\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.b_regularizer:\n            <span class=\"pl-c1\">self</span>.b_regularizer.set_param(<span class=\"pl-c1\">self</span>.b)\n            <span class=\"pl-c1\">self</span>.regularizers.append(<span class=\"pl-c1\">self</span>.b_regularizer)\n\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.activity_regularizer:\n            <span class=\"pl-c1\">self</span>.activity_regularizer.set_layer(<span class=\"pl-c1\">self</span>)\n            <span class=\"pl-c1\">self</span>.regularizers.append(<span class=\"pl-c1\">self</span>.activity_regularizer)\n\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.initial_weights <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">None</span>:\n            <span class=\"pl-c1\">self</span>.set_weights(<span class=\"pl-c1\">self</span>.initial_weights)\n            <span class=\"pl-k\">del</span> <span class=\"pl-c1\">self</span>.initial_weights\n\n    <span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">output_shape</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        input_shape <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.input_shape\n        rows <span class=\"pl-k\">=</span> input_shape[<span class=\"pl-c1\">2</span>]\n        cols <span class=\"pl-k\">=</span> input_shape[<span class=\"pl-c1\">3</span>]\n        <span class=\"pl-c1\">self</span>.deconv_shape <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">self</span>.nb_filter, input_shape[<span class=\"pl-c1\">0</span>], rows<span class=\"pl-k\">+</span><span class=\"pl-c1\">2</span>, cols<span class=\"pl-k\">+</span><span class=\"pl-c1\">2</span>)\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>.deconv_shape\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">get_output</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">train</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n        X <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.get_input(train)\n        X <span class=\"pl-k\">=</span> K.permute_dimensions(X,(<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">1</span>))\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span>batch_size = tf.shape(X)[0]</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span>deconv_shape = tf.pack([batch_size, 40, 40, 32])</span>\n        <span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>deconv_shape: <span class=\"pl-c1\">{0}</span><span class=\"pl-pds\">'</span></span>.format(<span class=\"pl-c1\">self</span>.deconv_shape)\n        <span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>value: <span class=\"pl-c1\">{0}</span><span class=\"pl-pds\">'</span></span>.format(X)\n        <span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>W shape: <span class=\"pl-c1\">{0}</span><span class=\"pl-pds\">'</span></span>.format(K.eval(<span class=\"pl-c1\">self</span>.W).shape)\n        conv_out <span class=\"pl-k\">=</span> tf.nn.conv2d_transpose(X, <span class=\"pl-c1\">self</span>.W, <span class=\"pl-v\">strides</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.subsample,\n                            <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>VALID<span class=\"pl-pds\">'</span></span>,\n                            <span class=\"pl-v\">output_shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.deconv_shape)\n\n        output <span class=\"pl-k\">=</span> conv_out <span class=\"pl-k\">+</span> K.reshape(<span class=\"pl-c1\">self</span>.b, (<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">self</span>.nb_filter))\n        <span class=\"pl-k\">return</span> output\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">get_config</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        config <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">self</span>.<span class=\"pl-c1\">__class__</span>.<span class=\"pl-c1\">__name__</span>,\n                  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>nb_filter<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">self</span>.nb_filter,\n                  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>nb_row<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">self</span>.nb_row,\n                  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>nb_col<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">self</span>.nb_col,\n                  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>init<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">self</span>.init.<span class=\"pl-c1\">__name__</span>,\n                  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>activation<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">self</span>.activation.<span class=\"pl-c1\">__name__</span>,\n                  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>border_mode<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">self</span>.border_mode,\n                  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>subsample<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">self</span>.subsample,\n                  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>W_regularizer<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">self</span>.W_regularizer.get_config() <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.W_regularizer <span class=\"pl-k\">else</span> <span class=\"pl-c1\">None</span>,\n                  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>b_regularizer<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">self</span>.b_regularizer.get_config() <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.b_regularizer <span class=\"pl-k\">else</span> <span class=\"pl-c1\">None</span>,\n                  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>activity_regularizer<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">self</span>.activity_regularizer.get_config() <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.activity_regularizer <span class=\"pl-k\">else</span> <span class=\"pl-c1\">None</span>,\n                  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>W_constraint<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">self</span>.W_constraint.get_config() <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.W_constraint <span class=\"pl-k\">else</span> <span class=\"pl-c1\">None</span>,\n                  <span class=\"pl-s\"><span class=\"pl-pds\">'</span>b_constraint<span class=\"pl-pds\">'</span></span>: <span class=\"pl-c1\">self</span>.b_constraint.get_config() <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.b_constraint <span class=\"pl-k\">else</span> <span class=\"pl-c1\">None</span>}\n        base_config <span class=\"pl-k\">=</span> <span class=\"pl-c1\">super</span>(Convolution2D_Transpose, <span class=\"pl-c1\">self</span>).get_config()\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">dict</span>(<span class=\"pl-c1\">list</span>(base_config.items()) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">list</span>(config.items()))</pre></div>", "body_text": "I am a little confused by the output shape in conv_transpose( ) function. How to calculate it?\nclass Convolution2D_Transpose(Layer):\n    input_ndim = 4\n\n    def __init__(self, nb_filter, nb_row, nb_col,\n                 init='glorot_uniform', activation='linear', weights=None,\n                 border_mode='valid', subsample=(1, 1),deconv_shape = (),\n                 W_regularizer=None, b_regularizer=None, activity_regularizer=None,\n                 W_constraint=None, b_constraint=None, **kwargs):\n\n        if border_mode not in {'valid', 'same'}:\n            raise Exception('Invalid border mode for Convolution2D:', border_mode)\n        self.nb_filter = nb_filter\n        self.nb_row = nb_row\n        self.nb_col = nb_col\n        self.deconv_shape = deconv_shape\n        self.init = initializations.get(init)\n        self.activation = activations.get(activation)\n        assert border_mode in {'valid', 'same'}, 'border_mode must be in {valid, same}'\n        self.border_mode = border_mode\n        self.subsample = tuple(subsample)\n\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n        self.activity_regularizer = regularizers.get(activity_regularizer)\n\n        self.W_constraint = constraints.get(W_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n        self.constraints = [self.W_constraint, self.b_constraint]\n\n        self.initial_weights = weights\n        self.input = K.placeholder(ndim=4)\n        super(Convolution2D_Transpose, self).__init__(**kwargs)\n\n    def build(self):\n        stack_size = self.input_shape[1]\n        #self.W_shape = (self.nb_filter, stack_size, self.nb_row, self.nb_col)\n        self.W_shape = ( self.nb_col, self.nb_row, stack_size, self.nb_filter)\n        print self.W_shape\n        self.W = self.init(self.W_shape)\n        self.b = K.zeros((self.nb_filter,))\n        self.trainable_weights = [self.W, self.b]\n        self.regularizers = []\n\n        if self.W_regularizer:\n            self.W_regularizer.set_param(self.W)\n            self.regularizers.append(self.W_regularizer)\n\n        if self.b_regularizer:\n            self.b_regularizer.set_param(self.b)\n            self.regularizers.append(self.b_regularizer)\n\n        if self.activity_regularizer:\n            self.activity_regularizer.set_layer(self)\n            self.regularizers.append(self.activity_regularizer)\n\n        if self.initial_weights is not None:\n            self.set_weights(self.initial_weights)\n            del self.initial_weights\n\n    @property\n    def output_shape(self):\n        input_shape = self.input_shape\n        rows = input_shape[2]\n        cols = input_shape[3]\n        self.deconv_shape = (self.nb_filter, input_shape[0], rows+2, cols+2)\n        return self.deconv_shape\n\n    def get_output(self, train=False):\n        X = self.get_input(train)\n        X = K.permute_dimensions(X,(0,2,3,1))\n        #batch_size = tf.shape(X)[0]\n        #deconv_shape = tf.pack([batch_size, 40, 40, 32])\n        print 'deconv_shape: {0}'.format(self.deconv_shape)\n        print 'value: {0}'.format(X)\n        print 'W shape: {0}'.format(K.eval(self.W).shape)\n        conv_out = tf.nn.conv2d_transpose(X, self.W, strides=self.subsample,\n                            padding='VALID',\n                            output_shape=self.deconv_shape)\n\n        output = conv_out + K.reshape(self.b, (1, 1, 1,self.nb_filter))\n        return output\n\n    def get_config(self):\n        config = {'name': self.__class__.__name__,\n                  'nb_filter': self.nb_filter,\n                  'nb_row': self.nb_row,\n                  'nb_col': self.nb_col,\n                  'init': self.init.__name__,\n                  'activation': self.activation.__name__,\n                  'border_mode': self.border_mode,\n                  'subsample': self.subsample,\n                  'W_regularizer': self.W_regularizer.get_config() if self.W_regularizer else None,\n                  'b_regularizer': self.b_regularizer.get_config() if self.b_regularizer else None,\n                  'activity_regularizer': self.activity_regularizer.get_config() if self.activity_regularizer else None,\n                  'W_constraint': self.W_constraint.get_config() if self.W_constraint else None,\n                  'b_constraint': self.b_constraint.get_config() if self.b_constraint else None}\n        base_config = super(Convolution2D_Transpose, self).get_config()\n        return dict(list(base_config.items()) + list(config.items()))", "body": "I am a little confused by the output shape in conv_transpose( ) function. How to calculate it?\n\n``` python\nclass Convolution2D_Transpose(Layer):\n    input_ndim = 4\n\n    def __init__(self, nb_filter, nb_row, nb_col,\n                 init='glorot_uniform', activation='linear', weights=None,\n                 border_mode='valid', subsample=(1, 1),deconv_shape = (),\n                 W_regularizer=None, b_regularizer=None, activity_regularizer=None,\n                 W_constraint=None, b_constraint=None, **kwargs):\n\n        if border_mode not in {'valid', 'same'}:\n            raise Exception('Invalid border mode for Convolution2D:', border_mode)\n        self.nb_filter = nb_filter\n        self.nb_row = nb_row\n        self.nb_col = nb_col\n        self.deconv_shape = deconv_shape\n        self.init = initializations.get(init)\n        self.activation = activations.get(activation)\n        assert border_mode in {'valid', 'same'}, 'border_mode must be in {valid, same}'\n        self.border_mode = border_mode\n        self.subsample = tuple(subsample)\n\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n        self.activity_regularizer = regularizers.get(activity_regularizer)\n\n        self.W_constraint = constraints.get(W_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n        self.constraints = [self.W_constraint, self.b_constraint]\n\n        self.initial_weights = weights\n        self.input = K.placeholder(ndim=4)\n        super(Convolution2D_Transpose, self).__init__(**kwargs)\n\n    def build(self):\n        stack_size = self.input_shape[1]\n        #self.W_shape = (self.nb_filter, stack_size, self.nb_row, self.nb_col)\n        self.W_shape = ( self.nb_col, self.nb_row, stack_size, self.nb_filter)\n        print self.W_shape\n        self.W = self.init(self.W_shape)\n        self.b = K.zeros((self.nb_filter,))\n        self.trainable_weights = [self.W, self.b]\n        self.regularizers = []\n\n        if self.W_regularizer:\n            self.W_regularizer.set_param(self.W)\n            self.regularizers.append(self.W_regularizer)\n\n        if self.b_regularizer:\n            self.b_regularizer.set_param(self.b)\n            self.regularizers.append(self.b_regularizer)\n\n        if self.activity_regularizer:\n            self.activity_regularizer.set_layer(self)\n            self.regularizers.append(self.activity_regularizer)\n\n        if self.initial_weights is not None:\n            self.set_weights(self.initial_weights)\n            del self.initial_weights\n\n    @property\n    def output_shape(self):\n        input_shape = self.input_shape\n        rows = input_shape[2]\n        cols = input_shape[3]\n        self.deconv_shape = (self.nb_filter, input_shape[0], rows+2, cols+2)\n        return self.deconv_shape\n\n    def get_output(self, train=False):\n        X = self.get_input(train)\n        X = K.permute_dimensions(X,(0,2,3,1))\n        #batch_size = tf.shape(X)[0]\n        #deconv_shape = tf.pack([batch_size, 40, 40, 32])\n        print 'deconv_shape: {0}'.format(self.deconv_shape)\n        print 'value: {0}'.format(X)\n        print 'W shape: {0}'.format(K.eval(self.W).shape)\n        conv_out = tf.nn.conv2d_transpose(X, self.W, strides=self.subsample,\n                            padding='VALID',\n                            output_shape=self.deconv_shape)\n\n        output = conv_out + K.reshape(self.b, (1, 1, 1,self.nb_filter))\n        return output\n\n    def get_config(self):\n        config = {'name': self.__class__.__name__,\n                  'nb_filter': self.nb_filter,\n                  'nb_row': self.nb_row,\n                  'nb_col': self.nb_col,\n                  'init': self.init.__name__,\n                  'activation': self.activation.__name__,\n                  'border_mode': self.border_mode,\n                  'subsample': self.subsample,\n                  'W_regularizer': self.W_regularizer.get_config() if self.W_regularizer else None,\n                  'b_regularizer': self.b_regularizer.get_config() if self.b_regularizer else None,\n                  'activity_regularizer': self.activity_regularizer.get_config() if self.activity_regularizer else None,\n                  'W_constraint': self.W_constraint.get_config() if self.W_constraint else None,\n                  'b_constraint': self.b_constraint.get_config() if self.b_constraint else None}\n        base_config = super(Convolution2D_Transpose, self).get_config()\n        return dict(list(base_config.items()) + list(config.items()))\n```\n"}