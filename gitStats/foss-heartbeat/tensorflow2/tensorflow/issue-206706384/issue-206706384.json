{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7406", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7406/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7406/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7406/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7406", "id": 206706384, "node_id": "MDU6SXNzdWUyMDY3MDYzODQ=", "number": 7406, "title": "Should check whether n_class is zero before calling sample_n() in mixture.py", "user": {"login": "botonchou", "id": 3041643, "node_id": "MDQ6VXNlcjMwNDE2NDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3041643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botonchou", "html_url": "https://github.com/botonchou", "followers_url": "https://api.github.com/users/botonchou/followers", "following_url": "https://api.github.com/users/botonchou/following{/other_user}", "gists_url": "https://api.github.com/users/botonchou/gists{/gist_id}", "starred_url": "https://api.github.com/users/botonchou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botonchou/subscriptions", "organizations_url": "https://api.github.com/users/botonchou/orgs", "repos_url": "https://api.github.com/users/botonchou/repos", "events_url": "https://api.github.com/users/botonchou/events{/privacy}", "received_events_url": "https://api.github.com/users/botonchou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-10T04:31:14Z", "updated_at": "2017-03-22T16:54:14Z", "closed_at": "2017-03-22T16:54:14Z", "author_association": "NONE", "body_html": "<h3>Problem Description</h3>\n<p>Mixture model first use categorical to sample how much samples it need for each mixture components (this is variable <code>n_class</code> at <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/distributions/python/ops/mixture.py#L308\">line 308</a>, but it actually means <strong>number of samples per component</strong>), and then it pass <code>n_class</code> to <code>sample_n()</code>.</p>\n<p>The problem is <code>n_class</code> could be 0 and you can't pass <code>shape=0</code> to <code>tf.random_gamma(shape, alpha, ...)</code>, which is used in Beta distribution. (see <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/distributions/python/ops/mixture.py#L310\">line 310</a> in mixture.py)</p>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<p>It's easy to reproduce: just create a mixture of Beta + Uniform with 50/50 probability. Half of the time it'll sample from uniform, and half of the time it'll sample from Beta.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span>!/usr/bin/python</span>\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nds <span class=\"pl-k\">=</span> tf.contrib.distributions\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Create mixture distribution of Beta + Uniform</span>\ncomponents <span class=\"pl-k\">=</span> [ds.Beta(<span class=\"pl-c1\">2</span>., <span class=\"pl-c1\">2</span>.), ds.Uniform(<span class=\"pl-v\">a</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>., <span class=\"pl-v\">b</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>.)]\ncat <span class=\"pl-k\">=</span> ds.Categorical(<span class=\"pl-v\">p</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">0.5</span>, <span class=\"pl-c1\">0.5</span>])\nmix <span class=\"pl-k\">=</span> ds.Mixture(<span class=\"pl-v\">cat</span><span class=\"pl-k\">=</span>cat, <span class=\"pl-v\">components</span><span class=\"pl-k\">=</span>components)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> get ONLY 1 sample</span>\nx <span class=\"pl-k\">=</span> mix.sample_n(<span class=\"pl-c1\">1</span>)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(tf.global_variables_initializer())    \n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> repeats until crash</span>\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1000</span>):\n        <span class=\"pl-c1\">print</span> sess.run(x)</pre></div>\n<h3>What other attempted solutions have you tried?</h3>\n<p>Two possible solutions:</p>\n<ol>\n<li>\n<p>Add a conditional branch in <strong>mixture.py</strong> like this (tested with the above script):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> INSTEAD OF DOING</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> samples_class_c = self.components[c].sample_n(n_class, seed=seed)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> DO THIS</span>\nsamples_class_c <span class=\"pl-k\">=</span> control_flow_ops.cond(\n    math_ops.equal(n_class, <span class=\"pl-c1\">0</span>),\n    <span class=\"pl-k\">lambda</span>: array_ops.zeros(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">self</span>.components[c].dtype),\n    <span class=\"pl-k\">lambda</span>: <span class=\"pl-c1\">self</span>.components[c].sample_n(n_class, <span class=\"pl-v\">seed</span><span class=\"pl-k\">=</span>seed)\n)</pre></div>\n<p>Just create a zero tensor with shape 0 when <code>n_class</code> is <strong>0</strong> and let the reshape operator at <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/distributions/python/ops/mixture.py#L330\">line 330</a> to worry about the shape.</p>\n</li>\n<li>\n<p>Support <code>shape=0</code> in <code>random_gamma(shape, alpha, ...)</code>. Personally I think it's a bad idea. It already caused <code>InvalidArgumentError</code> exception, which means the one who implemented this might already considered this problem before.</p>\n</li>\n</ol>\n<h3>Logs or other output that would be helpful</h3>\n<p>(If logs are large, please upload as attachment or provide link).</p>\n<div class=\"highlight highlight-source-shell\"><pre>I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcurand.so locally\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node <span class=\"pl-c1\">read</span> from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties: \nname: TITAN X (Pascal)\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.531\npciBusID 0000:02:00.0\nTotal memory: 11.90GiB\nFree memory: 337.50MiB\nW tensorflow/stream_executor/cuda/cuda_driver.cc:590] creating context when one is currently active<span class=\"pl-k\">;</span> existing: 0x4190110\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node <span class=\"pl-c1\">read</span> from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 1 with properties: \nname: GeForce GTX 980 Ti\nmajor: 5 minor: 2 memoryClockRate (GHz) 1.076\npciBusID 0000:01:00.0\nTotal memory: 5.93GiB\nFree memory: 5.08GiB\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:777] Peer access not supported between device ordinals 0 and 1\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:777] Peer access not supported between device ordinals 1 and 0\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0 1 \nI tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y N \nI tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 1:   N Y \nI tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -<span class=\"pl-k\">&gt;</span> (device: 0, name: TITAN X (Pascal), pci bus id: 0000:02:00.0)\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:1) -<span class=\"pl-k\">&gt;</span> (device: 1, name: GeForce GTX 980 Ti, pci bus id: 0000:01:00.0)\n[ 0.32805401]\n[ 0.2802822]\nW tensorflow/core/framework/op_kernel.cc:975] Invalid argument: Input shape should have non-zero element count, got: 0\n\t [[Node: Beta/sample_n/random_gamma_1/RandomGamma <span class=\"pl-k\">=</span> RandomGamma[S<span class=\"pl-k\">=</span>DT_INT32, T<span class=\"pl-k\">=</span>DT_FLOAT, seed<span class=\"pl-k\">=</span>0, seed2<span class=\"pl-k\">=</span>0, _device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:localhost/replica:0/task:0/cpu:0<span class=\"pl-pds\">\"</span></span>](Beta/sample_n/random_gamma_1/shape/_25, Beta/sample_n/random_gamma_1/add/_27)]]\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bug.py<span class=\"pl-pds\">\"</span></span>, line 21, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n    print sess.run(x)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line 766, <span class=\"pl-k\">in</span> run\n    run_metadata_ptr)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line 964, <span class=\"pl-k\">in</span> _run\n    feed_dict_string, options, run_metadata)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line 1014, <span class=\"pl-k\">in</span> _do_run\n    target_list, options, run_metadata)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py<span class=\"pl-pds\">\"</span></span>, line 1034, <span class=\"pl-k\">in</span> _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Input shape should have non-zero element count, got: 0\n\t [[Node: Beta/sample_n/random_gamma_1/RandomGamma <span class=\"pl-k\">=</span> RandomGamma[S<span class=\"pl-k\">=</span>DT_INT32, T<span class=\"pl-k\">=</span>DT_FLOAT, seed<span class=\"pl-k\">=</span>0, seed2<span class=\"pl-k\">=</span>0, _device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:localhost/replica:0/task:0/cpu:0<span class=\"pl-pds\">\"</span></span>](Beta/sample_n/random_gamma_1/shape/_25, Beta/sample_n/random_gamma_1/add/_27)]]\n\nCaused by op u<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Beta/sample_n/random_gamma_1/RandomGamma<span class=\"pl-pds\">'</span></span>, defined at:\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bug.py<span class=\"pl-pds\">\"</span></span>, line 15, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n    x = mix.sample_n(1)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/distribution.py<span class=\"pl-pds\">\"</span></span>, line 574, <span class=\"pl-k\">in</span> sample_n\n    x = self._sample_n(n, seed, <span class=\"pl-k\">**</span>condition_kwargs)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/mixture.py<span class=\"pl-pds\">\"</span></span>, line 313, <span class=\"pl-k\">in</span> _sample_n\n    samples_class_c = self.components[c].sample_n(n_class, seed=seed)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/distribution.py<span class=\"pl-pds\">\"</span></span>, line 574, <span class=\"pl-k\">in</span> sample_n\n    x = self._sample_n(n, seed, <span class=\"pl-k\">**</span>condition_kwargs)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/beta.py<span class=\"pl-pds\">\"</span></span>, line 205, <span class=\"pl-k\">in</span> _sample_n\n    seed=distribution_util.gen_new_seed(seed, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>beta<span class=\"pl-pds\">\"</span></span>))\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/random_ops.py<span class=\"pl-pds\">\"</span></span>, line 437, <span class=\"pl-k\">in</span> random_gamma\n    seed2=seed2) / beta\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_random_ops.py<span class=\"pl-pds\">\"</span></span>, line 122, <span class=\"pl-k\">in</span> _random_gamma\n    seed=seed, seed2=seed2, name=name)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.py<span class=\"pl-pds\">\"</span></span>, line 759, <span class=\"pl-k\">in</span> apply_op\n    op_def=op_def)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py<span class=\"pl-pds\">\"</span></span>, line 2240, <span class=\"pl-k\">in</span> create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py<span class=\"pl-pds\">\"</span></span>, line 1128, <span class=\"pl-k\">in</span> __init__\n    self._traceback = <span class=\"pl-en\">_extract_stack</span>()\n\nInvalidArgumentError (see above <span class=\"pl-k\">for</span> traceback): Input shape should have non-zero element count, got: 0\n\t [[Node: Beta/sample_n/random_gamma_1/RandomGamma <span class=\"pl-k\">=</span> RandomGamma[S<span class=\"pl-k\">=</span>DT_INT32, T<span class=\"pl-k\">=</span>DT_FLOAT, seed<span class=\"pl-k\">=</span>0, seed2<span class=\"pl-k\">=</span>0, _device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:localhost/replica:0/task:0/cpu:0<span class=\"pl-pds\">\"</span></span>](Beta/sample_n/random_gamma_1/shape/_25, Beta/sample_n/random_gamma_1/add/_27)]]</pre></div>\n<p>P.S. The variable name <code>n_class</code> confused me for a while.</p>", "body_text": "Problem Description\nMixture model first use categorical to sample how much samples it need for each mixture components (this is variable n_class at line 308, but it actually means number of samples per component), and then it pass n_class to sample_n().\nThe problem is n_class could be 0 and you can't pass shape=0 to tf.random_gamma(shape, alpha, ...), which is used in Beta distribution. (see line 310 in mixture.py)\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nIt's easy to reproduce: just create a mixture of Beta + Uniform with 50/50 probability. Half of the time it'll sample from uniform, and half of the time it'll sample from Beta.\n#!/usr/bin/python\nimport tensorflow as tf\nds = tf.contrib.distributions\n\n# Create mixture distribution of Beta + Uniform\ncomponents = [ds.Beta(2., 2.), ds.Uniform(a=0., b=1.)]\ncat = ds.Categorical(p=[0.5, 0.5])\nmix = ds.Mixture(cat=cat, components=components)\n\n# get ONLY 1 sample\nx = mix.sample_n(1)\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())    \n    # repeats until crash\n    for i in range(1000):\n        print sess.run(x)\nWhat other attempted solutions have you tried?\nTwo possible solutions:\n\n\nAdd a conditional branch in mixture.py like this (tested with the above script):\n# INSTEAD OF DOING\n# samples_class_c = self.components[c].sample_n(n_class, seed=seed)\n# DO THIS\nsamples_class_c = control_flow_ops.cond(\n    math_ops.equal(n_class, 0),\n    lambda: array_ops.zeros(0, self.components[c].dtype),\n    lambda: self.components[c].sample_n(n_class, seed=seed)\n)\nJust create a zero tensor with shape 0 when n_class is 0 and let the reshape operator at line 330 to worry about the shape.\n\n\nSupport shape=0 in random_gamma(shape, alpha, ...). Personally I think it's a bad idea. It already caused InvalidArgumentError exception, which means the one who implemented this might already considered this problem before.\n\n\nLogs or other output that would be helpful\n(If logs are large, please upload as attachment or provide link).\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcurand.so locally\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties: \nname: TITAN X (Pascal)\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.531\npciBusID 0000:02:00.0\nTotal memory: 11.90GiB\nFree memory: 337.50MiB\nW tensorflow/stream_executor/cuda/cuda_driver.cc:590] creating context when one is currently active; existing: 0x4190110\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 1 with properties: \nname: GeForce GTX 980 Ti\nmajor: 5 minor: 2 memoryClockRate (GHz) 1.076\npciBusID 0000:01:00.0\nTotal memory: 5.93GiB\nFree memory: 5.08GiB\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:777] Peer access not supported between device ordinals 0 and 1\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:777] Peer access not supported between device ordinals 1 and 0\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0 1 \nI tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y N \nI tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 1:   N Y \nI tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: TITAN X (Pascal), pci bus id: 0000:02:00.0)\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:1) -> (device: 1, name: GeForce GTX 980 Ti, pci bus id: 0000:01:00.0)\n[ 0.32805401]\n[ 0.2802822]\nW tensorflow/core/framework/op_kernel.cc:975] Invalid argument: Input shape should have non-zero element count, got: 0\n\t [[Node: Beta/sample_n/random_gamma_1/RandomGamma = RandomGamma[S=DT_INT32, T=DT_FLOAT, seed=0, seed2=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Beta/sample_n/random_gamma_1/shape/_25, Beta/sample_n/random_gamma_1/add/_27)]]\nTraceback (most recent call last):\n  File \"bug.py\", line 21, in <module>\n    print sess.run(x)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 766, in run\n    run_metadata_ptr)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 964, in _run\n    feed_dict_string, options, run_metadata)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 1014, in _do_run\n    target_list, options, run_metadata)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 1034, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Input shape should have non-zero element count, got: 0\n\t [[Node: Beta/sample_n/random_gamma_1/RandomGamma = RandomGamma[S=DT_INT32, T=DT_FLOAT, seed=0, seed2=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Beta/sample_n/random_gamma_1/shape/_25, Beta/sample_n/random_gamma_1/add/_27)]]\n\nCaused by op u'Beta/sample_n/random_gamma_1/RandomGamma', defined at:\n  File \"bug.py\", line 15, in <module>\n    x = mix.sample_n(1)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/distribution.py\", line 574, in sample_n\n    x = self._sample_n(n, seed, **condition_kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/mixture.py\", line 313, in _sample_n\n    samples_class_c = self.components[c].sample_n(n_class, seed=seed)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/distribution.py\", line 574, in sample_n\n    x = self._sample_n(n, seed, **condition_kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/beta.py\", line 205, in _sample_n\n    seed=distribution_util.gen_new_seed(seed, \"beta\"))\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/random_ops.py\", line 437, in random_gamma\n    seed2=seed2) / beta\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_random_ops.py\", line 122, in _random_gamma\n    seed=seed, seed2=seed2, name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.py\", line 759, in apply_op\n    op_def=op_def)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2240, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1128, in __init__\n    self._traceback = _extract_stack()\n\nInvalidArgumentError (see above for traceback): Input shape should have non-zero element count, got: 0\n\t [[Node: Beta/sample_n/random_gamma_1/RandomGamma = RandomGamma[S=DT_INT32, T=DT_FLOAT, seed=0, seed2=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Beta/sample_n/random_gamma_1/shape/_25, Beta/sample_n/random_gamma_1/add/_27)]]\nP.S. The variable name n_class confused me for a while.", "body": "### Problem Description\r\nMixture model first use categorical to sample how much samples it need for each mixture components (this is variable `n_class` at [line 308](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/distributions/python/ops/mixture.py#L308), but it actually means **number of samples per component**), and then it pass `n_class` to `sample_n()`.\r\n\r\nThe problem is `n_class` could be 0 and you can't pass `shape=0` to `tf.random_gamma(shape, alpha, ...)`, which is used in Beta distribution. (see [line 310](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/distributions/python/ops/mixture.py#L310) in mixture.py)\r\n\r\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\r\nIt's easy to reproduce: just create a mixture of Beta + Uniform with 50/50 probability. Half of the time it'll sample from uniform, and half of the time it'll sample from Beta.\r\n```python\r\n#!/usr/bin/python\r\nimport tensorflow as tf\r\nds = tf.contrib.distributions\r\n\r\n# Create mixture distribution of Beta + Uniform\r\ncomponents = [ds.Beta(2., 2.), ds.Uniform(a=0., b=1.)]\r\ncat = ds.Categorical(p=[0.5, 0.5])\r\nmix = ds.Mixture(cat=cat, components=components)\r\n\r\n# get ONLY 1 sample\r\nx = mix.sample_n(1)\r\n\r\nwith tf.Session() as sess:\r\n    sess.run(tf.global_variables_initializer())    \r\n    # repeats until crash\r\n    for i in range(1000):\r\n        print sess.run(x)\r\n```\r\n### What other attempted solutions have you tried?\r\n\r\nTwo possible solutions:\r\n\r\n1. Add a conditional branch in **mixture.py** like this (tested with the above script):\r\n    ```python\r\n    # INSTEAD OF DOING\r\n    # samples_class_c = self.components[c].sample_n(n_class, seed=seed)\r\n    # DO THIS\r\n    samples_class_c = control_flow_ops.cond(\r\n        math_ops.equal(n_class, 0),\r\n        lambda: array_ops.zeros(0, self.components[c].dtype),\r\n        lambda: self.components[c].sample_n(n_class, seed=seed)\r\n    )\r\n    ```\r\n    Just create a zero tensor with shape 0 when `n_class` is **0** and let the reshape operator at [line 330](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/distributions/python/ops/mixture.py#L330) to worry about the shape.\r\n\r\n2. Support `shape=0` in `random_gamma(shape, alpha, ...)`. Personally I think it's a bad idea. It already caused `InvalidArgumentError` exception, which means the one who implemented this might already considered this problem before.\r\n\r\n### Logs or other output that would be helpful\r\n(If logs are large, please upload as attachment or provide link).\r\n```bash\r\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcublas.so locally\r\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcudnn.so locally\r\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcufft.so locally\r\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcuda.so.1 locally\r\nI tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcurand.so locally\r\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\r\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties: \r\nname: TITAN X (Pascal)\r\nmajor: 6 minor: 1 memoryClockRate (GHz) 1.531\r\npciBusID 0000:02:00.0\r\nTotal memory: 11.90GiB\r\nFree memory: 337.50MiB\r\nW tensorflow/stream_executor/cuda/cuda_driver.cc:590] creating context when one is currently active; existing: 0x4190110\r\nI tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\r\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 1 with properties: \r\nname: GeForce GTX 980 Ti\r\nmajor: 5 minor: 2 memoryClockRate (GHz) 1.076\r\npciBusID 0000:01:00.0\r\nTotal memory: 5.93GiB\r\nFree memory: 5.08GiB\r\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:777] Peer access not supported between device ordinals 0 and 1\r\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:777] Peer access not supported between device ordinals 1 and 0\r\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0 1 \r\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y N \r\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 1:   N Y \r\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: TITAN X (Pascal), pci bus id: 0000:02:00.0)\r\nI tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:1) -> (device: 1, name: GeForce GTX 980 Ti, pci bus id: 0000:01:00.0)\r\n[ 0.32805401]\r\n[ 0.2802822]\r\nW tensorflow/core/framework/op_kernel.cc:975] Invalid argument: Input shape should have non-zero element count, got: 0\r\n\t [[Node: Beta/sample_n/random_gamma_1/RandomGamma = RandomGamma[S=DT_INT32, T=DT_FLOAT, seed=0, seed2=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Beta/sample_n/random_gamma_1/shape/_25, Beta/sample_n/random_gamma_1/add/_27)]]\r\nTraceback (most recent call last):\r\n  File \"bug.py\", line 21, in <module>\r\n    print sess.run(x)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 766, in run\r\n    run_metadata_ptr)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 964, in _run\r\n    feed_dict_string, options, run_metadata)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 1014, in _do_run\r\n    target_list, options, run_metadata)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/client/session.py\", line 1034, in _do_call\r\n    raise type(e)(node_def, op, message)\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Input shape should have non-zero element count, got: 0\r\n\t [[Node: Beta/sample_n/random_gamma_1/RandomGamma = RandomGamma[S=DT_INT32, T=DT_FLOAT, seed=0, seed2=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Beta/sample_n/random_gamma_1/shape/_25, Beta/sample_n/random_gamma_1/add/_27)]]\r\n\r\nCaused by op u'Beta/sample_n/random_gamma_1/RandomGamma', defined at:\r\n  File \"bug.py\", line 15, in <module>\r\n    x = mix.sample_n(1)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/distribution.py\", line 574, in sample_n\r\n    x = self._sample_n(n, seed, **condition_kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/mixture.py\", line 313, in _sample_n\r\n    samples_class_c = self.components[c].sample_n(n_class, seed=seed)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/distribution.py\", line 574, in sample_n\r\n    x = self._sample_n(n, seed, **condition_kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/distributions/python/ops/beta.py\", line 205, in _sample_n\r\n    seed=distribution_util.gen_new_seed(seed, \"beta\"))\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/random_ops.py\", line 437, in random_gamma\r\n    seed2=seed2) / beta\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/gen_random_ops.py\", line 122, in _random_gamma\r\n    seed=seed, seed2=seed2, name=name)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/op_def_library.py\", line 759, in apply_op\r\n    op_def=op_def)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2240, in create_op\r\n    original_op=self._default_original_op, op_def=op_def)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 1128, in __init__\r\n    self._traceback = _extract_stack()\r\n\r\nInvalidArgumentError (see above for traceback): Input shape should have non-zero element count, got: 0\r\n\t [[Node: Beta/sample_n/random_gamma_1/RandomGamma = RandomGamma[S=DT_INT32, T=DT_FLOAT, seed=0, seed2=0, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Beta/sample_n/random_gamma_1/shape/_25, Beta/sample_n/random_gamma_1/add/_27)]]\r\n```\r\n\r\nP.S. The variable name `n_class` confused me for a while."}