{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120493844", "pull_request_review_id": 42461378, "id": 120493844, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMDQ5Mzg0NA==", "diff_hunk": "@@ -205,6 +205,207 @@ class SliceOp : public OpKernel {\n   }\n };\n \n+#ifdef INTEL_MKL\n+template <typename Device, typename T>\n+class MklSliceOp : public OpKernel {\n+ public:\n+  explicit MklSliceOp(OpKernelConstruction* context) : OpKernel(context) {}\n+\n+  void Compute(OpKernelContext* context) override {\n+    TensorShape output_shape;\n+    bool is_identity = true;", "path": "tensorflow/core/kernels/slice_op.cc", "position": null, "original_position": 12, "commit_id": "af0019038082113ecc4d274850845a16ad518837", "original_commit_id": "a79b740f74648d430b8cd99d46c5bd9957c268c2", "user": {"login": "nhasabni", "id": 22304502, "node_id": "MDQ6VXNlcjIyMzA0NTAy", "avatar_url": "https://avatars0.githubusercontent.com/u/22304502?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhasabni", "html_url": "https://github.com/nhasabni", "followers_url": "https://api.github.com/users/nhasabni/followers", "following_url": "https://api.github.com/users/nhasabni/following{/other_user}", "gists_url": "https://api.github.com/users/nhasabni/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhasabni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhasabni/subscriptions", "organizations_url": "https://api.github.com/users/nhasabni/orgs", "repos_url": "https://api.github.com/users/nhasabni/repos", "events_url": "https://api.github.com/users/nhasabni/events{/privacy}", "received_events_url": "https://api.github.com/users/nhasabni/received_events", "type": "User", "site_admin": false}, "body": "I had thought about various implementation choices. \r\n\r\n1) Since we are special casing for 4-D tensor slicing over channel, I thought about instantiating HandleCase function for 4-D. But instantiating templates for member functions require templates for class (SliceOp) to be instantiated as well. And I thought that instantiating Slice for CPU and float type is not ideal, since the optimization is equally effective for types other than float. \r\n\r\n2) Inheriting from SliceOp would work to reduce common code in Compute, but I would need to invoke SliceOp::Compute from MklSliceOp::Compute. Is that advised? If that is fine, I can go ahead with the 2nd option.", "created_at": "2017-06-06T22:07:21Z", "updated_at": "2017-06-07T19:01:25Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10295#discussion_r120493844", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10295", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/120493844"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10295#discussion_r120493844"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10295"}}, "body_html": "<p>I had thought about various implementation choices.</p>\n<ol>\n<li>\n<p>Since we are special casing for 4-D tensor slicing over channel, I thought about instantiating HandleCase function for 4-D. But instantiating templates for member functions require templates for class (SliceOp) to be instantiated as well. And I thought that instantiating Slice for CPU and float type is not ideal, since the optimization is equally effective for types other than float.</p>\n</li>\n<li>\n<p>Inheriting from SliceOp would work to reduce common code in Compute, but I would need to invoke SliceOp::Compute from MklSliceOp::Compute. Is that advised? If that is fine, I can go ahead with the 2nd option.</p>\n</li>\n</ol>", "body_text": "I had thought about various implementation choices.\n\n\nSince we are special casing for 4-D tensor slicing over channel, I thought about instantiating HandleCase function for 4-D. But instantiating templates for member functions require templates for class (SliceOp) to be instantiated as well. And I thought that instantiating Slice for CPU and float type is not ideal, since the optimization is equally effective for types other than float.\n\n\nInheriting from SliceOp would work to reduce common code in Compute, but I would need to invoke SliceOp::Compute from MklSliceOp::Compute. Is that advised? If that is fine, I can go ahead with the 2nd option.", "in_reply_to_id": 120216824}