{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/384488997", "html_url": "https://github.com/tensorflow/tensorflow/issues/17684#issuecomment-384488997", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17684", "id": 384488997, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDQ4ODk5Nw==", "user": {"login": "GarryLau", "id": 14019923, "node_id": "MDQ6VXNlcjE0MDE5OTIz", "avatar_url": "https://avatars1.githubusercontent.com/u/14019923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GarryLau", "html_url": "https://github.com/GarryLau", "followers_url": "https://api.github.com/users/GarryLau/followers", "following_url": "https://api.github.com/users/GarryLau/following{/other_user}", "gists_url": "https://api.github.com/users/GarryLau/gists{/gist_id}", "starred_url": "https://api.github.com/users/GarryLau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GarryLau/subscriptions", "organizations_url": "https://api.github.com/users/GarryLau/orgs", "repos_url": "https://api.github.com/users/GarryLau/repos", "events_url": "https://api.github.com/users/GarryLau/events{/privacy}", "received_events_url": "https://api.github.com/users/GarryLau/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-26T02:02:33Z", "updated_at": "2018-04-26T02:02:33Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7061773\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/smitshilu\">@smitshilu</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7997966\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Neargye\">@Neargye</a> The method to generate eval.pbtxt is in the following:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">export_eval_pbtxt</span>():\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Export eval.pbtxt.<span class=\"pl-pds\">\"\"\"</span></span>\n  <span class=\"pl-k\">with</span> tf.Graph().as_default() <span class=\"pl-k\">as</span> g:\n    images <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32,<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>,<span class=\"pl-c1\">224</span>,<span class=\"pl-c1\">224</span>,<span class=\"pl-c1\">3</span>])\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> using one of the following methods to create graph, depends on you</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>_, _ = mobilenet_v1.mobilenet_v1(inputs=images,num_classes=NUM_CLASSES, is_training=False)</span>\n    <span class=\"pl-k\">with</span> slim.arg_scope(mobilenet_v1.mobilenet_v1_arg_scope(<span class=\"pl-v\">is_training</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>,<span class=\"pl-v\">regularize_depthwise</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)):\n      _, _ <span class=\"pl-k\">=</span> mobilenet_v1.mobilenet_v1(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>images, <span class=\"pl-v\">is_training</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-v\">depth_multiplier</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1.0</span>, <span class=\"pl-v\">num_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">NUM_CLASSES</span>)\n    eval_graph_file <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/home/garylau/Desktop/mobilenet_v1/mobilenet_v1_eval.pbtxt<span class=\"pl-pds\">'</span></span>\n    <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n        <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(eval_graph_file, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>w<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n            f.write(<span class=\"pl-c1\">str</span>(g.as_graph_def()))</pre></div>\n<p>Then, call the function to generate eval.pbtxt.<br>\nHope to help you.</p>", "body_text": "@smitshilu @Neargye The method to generate eval.pbtxt is in the following:\ndef export_eval_pbtxt():\n  \"\"\"Export eval.pbtxt.\"\"\"\n  with tf.Graph().as_default() as g:\n    images = tf.placeholder(dtype=tf.float32,shape=[None,224,224,3])\n    # using one of the following methods to create graph, depends on you\n    #_, _ = mobilenet_v1.mobilenet_v1(inputs=images,num_classes=NUM_CLASSES, is_training=False)\n    with slim.arg_scope(mobilenet_v1.mobilenet_v1_arg_scope(is_training=False,regularize_depthwise=True)):\n      _, _ = mobilenet_v1.mobilenet_v1(inputs=images, is_training=False, depth_multiplier=1.0, num_classes=NUM_CLASSES)\n    eval_graph_file = '/home/garylau/Desktop/mobilenet_v1/mobilenet_v1_eval.pbtxt'\n    with tf.Session() as sess:\n        with open(eval_graph_file, 'w') as f:\n            f.write(str(g.as_graph_def()))\nThen, call the function to generate eval.pbtxt.\nHope to help you.", "body": "@smitshilu @Neargye The method to generate eval.pbtxt is in the following:\r\n```python\r\ndef export_eval_pbtxt():\r\n  \"\"\"Export eval.pbtxt.\"\"\"\r\n  with tf.Graph().as_default() as g:\r\n    images = tf.placeholder(dtype=tf.float32,shape=[None,224,224,3])\r\n    # using one of the following methods to create graph, depends on you\r\n    #_, _ = mobilenet_v1.mobilenet_v1(inputs=images,num_classes=NUM_CLASSES, is_training=False)\r\n    with slim.arg_scope(mobilenet_v1.mobilenet_v1_arg_scope(is_training=False,regularize_depthwise=True)):\r\n      _, _ = mobilenet_v1.mobilenet_v1(inputs=images, is_training=False, depth_multiplier=1.0, num_classes=NUM_CLASSES)\r\n    eval_graph_file = '/home/garylau/Desktop/mobilenet_v1/mobilenet_v1_eval.pbtxt'\r\n    with tf.Session() as sess:\r\n        with open(eval_graph_file, 'w') as f:\r\n            f.write(str(g.as_graph_def()))\r\n```\r\nThen, call the function to generate eval.pbtxt.\r\nHope to help you."}