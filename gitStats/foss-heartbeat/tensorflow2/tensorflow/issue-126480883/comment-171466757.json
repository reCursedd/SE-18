{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/171466757", "html_url": "https://github.com/tensorflow/tensorflow/pull/764#issuecomment-171466757", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/764", "id": 171466757, "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTQ2Njc1Nw==", "user": {"login": "jfsantos", "id": 5733, "node_id": "MDQ6VXNlcjU3MzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfsantos", "html_url": "https://github.com/jfsantos", "followers_url": "https://api.github.com/users/jfsantos/followers", "following_url": "https://api.github.com/users/jfsantos/following{/other_user}", "gists_url": "https://api.github.com/users/jfsantos/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfsantos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfsantos/subscriptions", "organizations_url": "https://api.github.com/users/jfsantos/orgs", "repos_url": "https://api.github.com/users/jfsantos/repos", "events_url": "https://api.github.com/users/jfsantos/events{/privacy}", "received_events_url": "https://api.github.com/users/jfsantos/received_events", "type": "User", "site_admin": false}, "created_at": "2016-01-13T23:08:24Z", "updated_at": "2016-01-13T23:12:22Z", "author_association": "CONTRIBUTOR", "body_html": "<p>To add to the weirdness of this issue: something (maybe SWIG?) adds the following macros to pywrap_tensorflow.cc:</p>\n<pre><code>#if PY_VERSION_HEX &gt;= 0x03000000\n\n#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&amp;PyType_Type)\n#define PyInt_Check(x) PyLong_Check(x)\n#define PyInt_AsLong(x) PyLong_AsLong(x)\n#define PyInt_FromLong(x) PyLong_FromLong(x)\n#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)\n#define PyString_Check(name) PyBytes_Check(name)\n#define PyString_FromString(x) PyUnicode_FromString(x)\n#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)\n#define PyString_AsString(str) PyBytes_AsString(str)\n#define PyString_Size(str) PyBytes_Size(str)    \n#define PyString_InternFromString(key) PyUnicode_InternFromString(key)\n#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE\n#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)\n#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)\n\n#endif\n</code></pre>\n<p>These should be defined and avoid the issue without any other workarounds but that never happens, which probably means both PY_VERSION_HEX and PY_MAJOR_VERSION are not defined correctly. The script in <code>util/python/python_config.sh</code> seems to be working properly, as the links to python_include and python_lib are correct.</p>", "body_text": "To add to the weirdness of this issue: something (maybe SWIG?) adds the following macros to pywrap_tensorflow.cc:\n#if PY_VERSION_HEX >= 0x03000000\n\n#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)\n#define PyInt_Check(x) PyLong_Check(x)\n#define PyInt_AsLong(x) PyLong_AsLong(x)\n#define PyInt_FromLong(x) PyLong_FromLong(x)\n#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)\n#define PyString_Check(name) PyBytes_Check(name)\n#define PyString_FromString(x) PyUnicode_FromString(x)\n#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)\n#define PyString_AsString(str) PyBytes_AsString(str)\n#define PyString_Size(str) PyBytes_Size(str)    \n#define PyString_InternFromString(key) PyUnicode_InternFromString(key)\n#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE\n#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)\n#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)\n\n#endif\n\nThese should be defined and avoid the issue without any other workarounds but that never happens, which probably means both PY_VERSION_HEX and PY_MAJOR_VERSION are not defined correctly. The script in util/python/python_config.sh seems to be working properly, as the links to python_include and python_lib are correct.", "body": "To add to the weirdness of this issue: something (maybe SWIG?) adds the following macros to pywrap_tensorflow.cc:\n\n```\n#if PY_VERSION_HEX >= 0x03000000\n\n#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)\n#define PyInt_Check(x) PyLong_Check(x)\n#define PyInt_AsLong(x) PyLong_AsLong(x)\n#define PyInt_FromLong(x) PyLong_FromLong(x)\n#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)\n#define PyString_Check(name) PyBytes_Check(name)\n#define PyString_FromString(x) PyUnicode_FromString(x)\n#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)\n#define PyString_AsString(str) PyBytes_AsString(str)\n#define PyString_Size(str) PyBytes_Size(str)    \n#define PyString_InternFromString(key) PyUnicode_InternFromString(key)\n#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE\n#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)\n#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)\n\n#endif\n```\n\nThese should be defined and avoid the issue without any other workarounds but that never happens, which probably means both PY_VERSION_HEX and PY_MAJOR_VERSION are not defined correctly. The script in `util/python/python_config.sh` seems to be working properly, as the links to python_include and python_lib are correct. \n"}