{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/382048934", "html_url": "https://github.com/tensorflow/tensorflow/issues/18598#issuecomment-382048934", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18598", "id": 382048934, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MjA0ODkzNA==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-17T16:05:45Z", "updated_at": "2018-04-17T16:05:45Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=22060313\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/annarev\">@annarev</a> I think the tf_export could be explicitly called based on python 2 or 3 to address the issue. The following diff might work:</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-c1\">diff --git a/tensorflow/python/util/compat.py b/tensorflow/python/util/compat.py</span>\nindex 4163fca..738479c 100644\n<span class=\"pl-md\">--- a/tensorflow/python/util/compat.py</span>\n<span class=\"pl-mi1\">+++ b/tensorflow/python/util/compat.py</span>\n<span class=\"pl-mdr\">@@ -45,7 +45,6 @@</span> from tensorflow.python.util.tf_export import tf_export\n from tensorflow.python.util.tf_export import tf_export\n \n \n<span class=\"pl-md\"><span class=\"pl-md\">-</span>@tf_export('compat.as_bytes', 'compat.as_str')</span>\n def as_bytes(bytes_or_text, encoding='utf-8'):\n   \"\"\"Converts either bytes or unicode to `bytes`, using utf-8 encoding for text.\n \n<span class=\"pl-mdr\">@@ -68,7 +67,6 @@</span> def as_bytes(bytes_or_text, encoding='utf-8'):\n                     (bytes_or_text,))\n \n \n<span class=\"pl-md\"><span class=\"pl-md\">-</span>@tf_export('compat.as_text')</span>\n def as_text(bytes_or_text, encoding='utf-8'):\n   \"\"\"Returns the given argument as a unicode string.\n \n<span class=\"pl-mdr\">@@ -93,8 +91,12 @@</span> def as_text(bytes_or_text, encoding='utf-8'):\n # Convert an object to a `str` in both Python 2 and 3.\n if _six.PY2:\n   as_str = as_bytes\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  tf_export('compat.as_bytes', 'compat.as_str')(as_bytes)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  tf_export('compat.as_text')(as_text)</span>\n else:\n   as_str = as_text\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  tf_export('compat.as_bytes')(as_bytes)</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  tf_export('compat.as_text', 'compat.as_str')(as_text)</span>\n \n \n @tf_export('compat.as_str_any')</pre></div>", "body_text": "@mrry @annarev I think the tf_export could be explicitly called based on python 2 or 3 to address the issue. The following diff might work:\ndiff --git a/tensorflow/python/util/compat.py b/tensorflow/python/util/compat.py\nindex 4163fca..738479c 100644\n--- a/tensorflow/python/util/compat.py\n+++ b/tensorflow/python/util/compat.py\n@@ -45,7 +45,6 @@ from tensorflow.python.util.tf_export import tf_export\n from tensorflow.python.util.tf_export import tf_export\n \n \n-@tf_export('compat.as_bytes', 'compat.as_str')\n def as_bytes(bytes_or_text, encoding='utf-8'):\n   \"\"\"Converts either bytes or unicode to `bytes`, using utf-8 encoding for text.\n \n@@ -68,7 +67,6 @@ def as_bytes(bytes_or_text, encoding='utf-8'):\n                     (bytes_or_text,))\n \n \n-@tf_export('compat.as_text')\n def as_text(bytes_or_text, encoding='utf-8'):\n   \"\"\"Returns the given argument as a unicode string.\n \n@@ -93,8 +91,12 @@ def as_text(bytes_or_text, encoding='utf-8'):\n # Convert an object to a `str` in both Python 2 and 3.\n if _six.PY2:\n   as_str = as_bytes\n+  tf_export('compat.as_bytes', 'compat.as_str')(as_bytes)\n+  tf_export('compat.as_text')(as_text)\n else:\n   as_str = as_text\n+  tf_export('compat.as_bytes')(as_bytes)\n+  tf_export('compat.as_text', 'compat.as_str')(as_text)\n \n \n @tf_export('compat.as_str_any')", "body": "@mrry @annarev I think the tf_export could be explicitly called based on python 2 or 3 to address the issue. The following diff might work:\r\n```diff\r\ndiff --git a/tensorflow/python/util/compat.py b/tensorflow/python/util/compat.py\r\nindex 4163fca..738479c 100644\r\n--- a/tensorflow/python/util/compat.py\r\n+++ b/tensorflow/python/util/compat.py\r\n@@ -45,7 +45,6 @@ from tensorflow.python.util.tf_export import tf_export\r\n from tensorflow.python.util.tf_export import tf_export\r\n \r\n \r\n-@tf_export('compat.as_bytes', 'compat.as_str')\r\n def as_bytes(bytes_or_text, encoding='utf-8'):\r\n   \"\"\"Converts either bytes or unicode to `bytes`, using utf-8 encoding for text.\r\n \r\n@@ -68,7 +67,6 @@ def as_bytes(bytes_or_text, encoding='utf-8'):\r\n                     (bytes_or_text,))\r\n \r\n \r\n-@tf_export('compat.as_text')\r\n def as_text(bytes_or_text, encoding='utf-8'):\r\n   \"\"\"Returns the given argument as a unicode string.\r\n \r\n@@ -93,8 +91,12 @@ def as_text(bytes_or_text, encoding='utf-8'):\r\n # Convert an object to a `str` in both Python 2 and 3.\r\n if _six.PY2:\r\n   as_str = as_bytes\r\n+  tf_export('compat.as_bytes', 'compat.as_str')(as_bytes)\r\n+  tf_export('compat.as_text')(as_text)\r\n else:\r\n   as_str = as_text\r\n+  tf_export('compat.as_bytes')(as_bytes)\r\n+  tf_export('compat.as_text', 'compat.as_str')(as_text)\r\n \r\n \r\n @tf_export('compat.as_str_any')\r\n```"}