{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/353672141", "html_url": "https://github.com/tensorflow/tensorflow/pull/15368#issuecomment-353672141", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15368", "id": 353672141, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzY3MjE0MQ==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-22T20:47:04Z", "updated_at": "2017-12-22T20:47:04Z", "author_association": "MEMBER", "body_html": "<p>The way I'd go about removing it, is by changing <code>data = [\":all_opensource_files\"]</code> to list legitimate top-level build targets instead, which is what <a href=\"https://github.com/tensorflow/tensorflow/blob/3571514ec20d3da04b82abd239a4e5817dbfd5d8/tensorflow/tools/pip_package/BUILD#L141\"><code>:build_pip_package</code></a> does. Then Bazel figures out all the transitive stuff.</p>\n<p>This would bring some small benefits aside from cleanup. For example, <a href=\"https://github.com/tensorflow/tensorflow/blob/3571514ec20d3da04b82abd239a4e5817dbfd5d8/tensorflow/tools/test/BUILD#L108\"><code>:check_futures_test</code></a> would be able to test generated sources too.</p>\n<p>The <code>:all_opensource_files</code> pattern is mostly useful with tools like <a href=\"https://github.com/google/moe\">MOE</a> when Bazel is building your tarball and you're willing to put up with the extra pain to avoid doing things like leaking the assembly code for some space age algorithm that got schlepped in from part of the monolithic codebase you've never seen.</p>\n<p>So if we're 100% on board with Copybara, removing should be doable with some toil.</p>", "body_text": "The way I'd go about removing it, is by changing data = [\":all_opensource_files\"] to list legitimate top-level build targets instead, which is what :build_pip_package does. Then Bazel figures out all the transitive stuff.\nThis would bring some small benefits aside from cleanup. For example, :check_futures_test would be able to test generated sources too.\nThe :all_opensource_files pattern is mostly useful with tools like MOE when Bazel is building your tarball and you're willing to put up with the extra pain to avoid doing things like leaking the assembly code for some space age algorithm that got schlepped in from part of the monolithic codebase you've never seen.\nSo if we're 100% on board with Copybara, removing should be doable with some toil.", "body": "The way I'd go about removing it, is by changing `data = [\":all_opensource_files\"]` to list legitimate top-level build targets instead, which is what [`:build_pip_package`](https://github.com/tensorflow/tensorflow/blob/3571514ec20d3da04b82abd239a4e5817dbfd5d8/tensorflow/tools/pip_package/BUILD#L141) does. Then Bazel figures out all the transitive stuff.\r\n\r\nThis would bring some small benefits aside from cleanup. For example, [`:check_futures_test`](https://github.com/tensorflow/tensorflow/blob/3571514ec20d3da04b82abd239a4e5817dbfd5d8/tensorflow/tools/test/BUILD#L108) would be able to test generated sources too.\r\n\r\nThe `:all_opensource_files` pattern is mostly useful with tools like [MOE](https://github.com/google/moe) when Bazel is building your tarball and you're willing to put up with the extra pain to avoid doing things like leaking the assembly code for some space age algorithm that got schlepped in from part of the monolithic codebase you've never seen.\r\n\r\nSo if we're 100% on board with Copybara, removing should be doable with some toil."}