{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/265646568", "html_url": "https://github.com/tensorflow/tensorflow/issues/5349#issuecomment-265646568", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5349", "id": 265646568, "node_id": "MDEyOklzc3VlQ29tbWVudDI2NTY0NjU2OA==", "user": {"login": "llhe", "id": 192829, "node_id": "MDQ6VXNlcjE5MjgyOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/192829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llhe", "html_url": "https://github.com/llhe", "followers_url": "https://api.github.com/users/llhe/followers", "following_url": "https://api.github.com/users/llhe/following{/other_user}", "gists_url": "https://api.github.com/users/llhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/llhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llhe/subscriptions", "organizations_url": "https://api.github.com/users/llhe/orgs", "repos_url": "https://api.github.com/users/llhe/repos", "events_url": "https://api.github.com/users/llhe/events{/privacy}", "received_events_url": "https://api.github.com/users/llhe/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-08T03:54:26Z", "updated_at": "2016-12-08T03:54:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=125935\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/GregBowyer\">@GregBowyer</a> Here is an example that I use to build another 3rd party poco library which is also <code>configure-make-make install</code> pattern, hope this can help:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">POCO_HEADERS</span> <span class=\"pl-k\">=</span> [                                                                \n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>include/Poco/Process.h<span class=\"pl-pds\">\"</span></span>,                                               \n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>include/Poco/MemoryStream.h<span class=\"pl-pds\">\"</span></span>, \n        <span class=\"pl-c1\">......</span>\n]\n<span class=\"pl-c1\">POCO_LIBRARIES</span> <span class=\"pl-k\">=</span> [                                                              \n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lib/libPocoNetSSL.a<span class=\"pl-pds\">\"</span></span>,                                                  \n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lib/libPocoCrypto.a<span class=\"pl-pds\">\"</span></span>,                                                  \n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lib/libPocoNet.a<span class=\"pl-pds\">\"</span></span>,                                                     \n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lib/libPocoUtil.a<span class=\"pl-pds\">\"</span></span>,                                                    \n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lib/libPocoXML.a<span class=\"pl-pds\">\"</span></span>,                                                     \n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lib/libPocoJSON.a<span class=\"pl-pds\">\"</span></span>,                                                    \n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lib/libPocoFoundation.a<span class=\"pl-pds\">\"</span></span>,                                              \n]                                                                               \n                                                                                \ngenrule(                                                                        \n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>make<span class=\"pl-pds\">'</span></span>,                                                              \n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> glob(                                                                \n        [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>**/*<span class=\"pl-pds\">\"</span></span>],                                                               \n        <span class=\"pl-v\">exclude</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>**/*.psd<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>**/*.txt<span class=\"pl-pds\">\"</span></span>], <span class=\"pl-c\"><span class=\"pl-c\">#</span> supress bazel complain            </span>\n    ),                                                                          \n    <span class=\"pl-v\">outs</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">POCO_HEADERS</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">POCO_LIBRARIES</span>,                                       \n    <span class=\"pl-v\">cmd</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pushd $$(dirname $(location configure)); workdir=$$(mktemp -d -t poco-build.XXXXXXXXXX); cp -aL * $$workdir; pushd $$workdir; ./configure --static --cflags='-fPIC -Wl,-Bdynamic -lpthread -Wl,-Bdynamic -ldl -Wl,-Bdynamic -lrt' --omit=ApacheConnector,Data,MongoDB,PageCompiler,CppParser,CppUnit,NetSSL_Win,PocoDoc,PDF,ProGen,SevenZip,Zip --no-sharedmemory --no-sharedlibs --no-fpenvironment --no-tests --no-samples --prefix=$$workdir/install; make -j10; make install; popd; popd; cp -a $$workdir/install/* $(@D); rm -rf $$workdir<span class=\"pl-pds\">\"</span></span>,\n)                                                                               \n                                                                                \ncc_library(                                                                     \n    <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>poco<span class=\"pl-pds\">\"</span></span>,                                                              \n    <span class=\"pl-v\">hdrs</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">POCO_HEADERS</span>,                                                        \n    <span class=\"pl-v\">srcs</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">POCO_LIBRARIES</span>,                                                      \n    <span class=\"pl-v\">includes</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>include<span class=\"pl-pds\">\"</span></span>],                                                     \n    <span class=\"pl-v\">visibility</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>//visibility:public<span class=\"pl-pds\">\"</span></span>],                                       \n    <span class=\"pl-v\">linkopts</span> <span class=\"pl-k\">=</span> [                                                                \n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-lssl<span class=\"pl-pds\">\"</span></span>,                                                                \n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-lcrypto<span class=\"pl-pds\">\"</span></span>,                                                             \n    ],                                                                          \n) </pre></div>", "body_text": "@GregBowyer Here is an example that I use to build another 3rd party poco library which is also configure-make-make install pattern, hope this can help:\nPOCO_HEADERS = [                                                                \n        \"include/Poco/Process.h\",                                               \n        \"include/Poco/MemoryStream.h\", \n        ......\n]\nPOCO_LIBRARIES = [                                                              \n        \"lib/libPocoNetSSL.a\",                                                  \n        \"lib/libPocoCrypto.a\",                                                  \n        \"lib/libPocoNet.a\",                                                     \n        \"lib/libPocoUtil.a\",                                                    \n        \"lib/libPocoXML.a\",                                                     \n        \"lib/libPocoJSON.a\",                                                    \n        \"lib/libPocoFoundation.a\",                                              \n]                                                                               \n                                                                                \ngenrule(                                                                        \n    name = 'make',                                                              \n    srcs = glob(                                                                \n        [\"**/*\"],                                                               \n        exclude = [\"**/*.psd\", \"**/*.txt\"], # supress bazel complain            \n    ),                                                                          \n    outs = POCO_HEADERS + POCO_LIBRARIES,                                       \n    cmd = \"pushd $$(dirname $(location configure)); workdir=$$(mktemp -d -t poco-build.XXXXXXXXXX); cp -aL * $$workdir; pushd $$workdir; ./configure --static --cflags='-fPIC -Wl,-Bdynamic -lpthread -Wl,-Bdynamic -ldl -Wl,-Bdynamic -lrt' --omit=ApacheConnector,Data,MongoDB,PageCompiler,CppParser,CppUnit,NetSSL_Win,PocoDoc,PDF,ProGen,SevenZip,Zip --no-sharedmemory --no-sharedlibs --no-fpenvironment --no-tests --no-samples --prefix=$$workdir/install; make -j10; make install; popd; popd; cp -a $$workdir/install/* $(@D); rm -rf $$workdir\",\n)                                                                               \n                                                                                \ncc_library(                                                                     \n    name = \"poco\",                                                              \n    hdrs = POCO_HEADERS,                                                        \n    srcs = POCO_LIBRARIES,                                                      \n    includes = [\"include\"],                                                     \n    visibility = [\"//visibility:public\"],                                       \n    linkopts = [                                                                \n        \"-lssl\",                                                                \n        \"-lcrypto\",                                                             \n    ],                                                                          \n)", "body": "@GregBowyer Here is an example that I use to build another 3rd party poco library which is also `configure-make-make install` pattern, hope this can help:\r\n```py\r\nPOCO_HEADERS = [                                                                \r\n        \"include/Poco/Process.h\",                                               \r\n        \"include/Poco/MemoryStream.h\", \r\n        ......\r\n]\r\nPOCO_LIBRARIES = [                                                              \r\n        \"lib/libPocoNetSSL.a\",                                                  \r\n        \"lib/libPocoCrypto.a\",                                                  \r\n        \"lib/libPocoNet.a\",                                                     \r\n        \"lib/libPocoUtil.a\",                                                    \r\n        \"lib/libPocoXML.a\",                                                     \r\n        \"lib/libPocoJSON.a\",                                                    \r\n        \"lib/libPocoFoundation.a\",                                              \r\n]                                                                               \r\n                                                                                \r\ngenrule(                                                                        \r\n    name = 'make',                                                              \r\n    srcs = glob(                                                                \r\n        [\"**/*\"],                                                               \r\n        exclude = [\"**/*.psd\", \"**/*.txt\"], # supress bazel complain            \r\n    ),                                                                          \r\n    outs = POCO_HEADERS + POCO_LIBRARIES,                                       \r\n    cmd = \"pushd $$(dirname $(location configure)); workdir=$$(mktemp -d -t poco-build.XXXXXXXXXX); cp -aL * $$workdir; pushd $$workdir; ./configure --static --cflags='-fPIC -Wl,-Bdynamic -lpthread -Wl,-Bdynamic -ldl -Wl,-Bdynamic -lrt' --omit=ApacheConnector,Data,MongoDB,PageCompiler,CppParser,CppUnit,NetSSL_Win,PocoDoc,PDF,ProGen,SevenZip,Zip --no-sharedmemory --no-sharedlibs --no-fpenvironment --no-tests --no-samples --prefix=$$workdir/install; make -j10; make install; popd; popd; cp -a $$workdir/install/* $(@D); rm -rf $$workdir\",\r\n)                                                                               \r\n                                                                                \r\ncc_library(                                                                     \r\n    name = \"poco\",                                                              \r\n    hdrs = POCO_HEADERS,                                                        \r\n    srcs = POCO_LIBRARIES,                                                      \r\n    includes = [\"include\"],                                                     \r\n    visibility = [\"//visibility:public\"],                                       \r\n    linkopts = [                                                                \r\n        \"-lssl\",                                                                \r\n        \"-lcrypto\",                                                             \r\n    ],                                                                          \r\n) \r\n```"}