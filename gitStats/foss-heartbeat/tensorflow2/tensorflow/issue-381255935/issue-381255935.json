{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23779", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23779/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23779/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23779/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23779", "id": 381255935, "node_id": "MDU6SXNzdWUzODEyNTU5MzU=", "number": 23779, "title": "Error on Label's datatype when enable eager execution in Colab ", "user": {"login": "dailiang18bb", "id": 15603436, "node_id": "MDQ6VXNlcjE1NjAzNDM2", "avatar_url": "https://avatars0.githubusercontent.com/u/15603436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dailiang18bb", "html_url": "https://github.com/dailiang18bb", "followers_url": "https://api.github.com/users/dailiang18bb/followers", "following_url": "https://api.github.com/users/dailiang18bb/following{/other_user}", "gists_url": "https://api.github.com/users/dailiang18bb/gists{/gist_id}", "starred_url": "https://api.github.com/users/dailiang18bb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dailiang18bb/subscriptions", "organizations_url": "https://api.github.com/users/dailiang18bb/orgs", "repos_url": "https://api.github.com/users/dailiang18bb/repos", "events_url": "https://api.github.com/users/dailiang18bb/events{/privacy}", "received_events_url": "https://api.github.com/users/dailiang18bb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 736653459, "node_id": "MDU6TGFiZWw3MzY2NTM0NTk=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:eager", "name": "comp:eager", "color": "0052cc", "default": false}, {"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": {"login": "harshini-gadige", "id": 42781361, "node_id": "MDQ6VXNlcjQyNzgxMzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/42781361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshini-gadige", "html_url": "https://github.com/harshini-gadige", "followers_url": "https://api.github.com/users/harshini-gadige/followers", "following_url": "https://api.github.com/users/harshini-gadige/following{/other_user}", "gists_url": "https://api.github.com/users/harshini-gadige/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshini-gadige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshini-gadige/subscriptions", "organizations_url": "https://api.github.com/users/harshini-gadige/orgs", "repos_url": "https://api.github.com/users/harshini-gadige/repos", "events_url": "https://api.github.com/users/harshini-gadige/events{/privacy}", "received_events_url": "https://api.github.com/users/harshini-gadige/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "harshini-gadige", "id": 42781361, "node_id": "MDQ6VXNlcjQyNzgxMzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/42781361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshini-gadige", "html_url": "https://github.com/harshini-gadige", "followers_url": "https://api.github.com/users/harshini-gadige/followers", "following_url": "https://api.github.com/users/harshini-gadige/following{/other_user}", "gists_url": "https://api.github.com/users/harshini-gadige/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshini-gadige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshini-gadige/subscriptions", "organizations_url": "https://api.github.com/users/harshini-gadige/orgs", "repos_url": "https://api.github.com/users/harshini-gadige/repos", "events_url": "https://api.github.com/users/harshini-gadige/events{/privacy}", "received_events_url": "https://api.github.com/users/harshini-gadige/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-11-15T17:04:42Z", "updated_at": "2018-11-21T18:11:31Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Mac OS X 10.14.1 - Colab</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: None</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Colab build in</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.12.0</li>\n<li><strong>Python version</strong>: Colab Python2</li>\n<li><strong>Bazel version (if compiling from source)</strong>: None</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: None</li>\n<li><strong>CUDA/cuDNN version</strong>: None</li>\n<li><strong>GPU model and memory</strong>: None</li>\n<li><strong>Exact command to reproduce</strong>: None</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>When I run the simple DNN on MNIST without eager execution, it works fine. However, when I enable eager execution then fit the model, I got the error said that my <code>train_labels</code> and <code>test_labels</code> has to be <code>int64</code> tensor which are originally <code>uint8</code> tensor. The error is shown as below:</p>\n<p><code>InvalidArgumentError: cannot compute Equal as input #0(zero-based) was expected to be a int64 tensor but is a uint8 tensor [Op:Equal]</code></p>\n<p>Although, I can fix it by using <code>train_labels = train_labels.astype(np.int64)</code> ,It looks like the error should be fixed in the source code.</p>\n<h3>Source code to reproduce the issue in Colab</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\ntf.enable_eager_execution()\n\nmnist <span class=\"pl-k\">=</span> tf.keras.datasets.mnist\n(train_images, train_labels), (test_images, test_labels) <span class=\"pl-k\">=</span> mnist.load_data()\n\ntrain_images <span class=\"pl-k\">=</span> train_images <span class=\"pl-k\">/</span> <span class=\"pl-c1\">255.0</span>\ntest_images <span class=\"pl-k\">=</span> test_images <span class=\"pl-k\">/</span> <span class=\"pl-c1\">255.0</span>\n\nmodel <span class=\"pl-k\">=</span> tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(<span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">28</span>,<span class=\"pl-c1\">28</span>)),\n  tf.keras.layers.Dense(<span class=\"pl-c1\">512</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu),\n  tf.keras.layers.Dropout(<span class=\"pl-c1\">0.2</span>),\n  tf.keras.layers.Dense(<span class=\"pl-c1\">128</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu),\n  tf.keras.layers.Dropout(<span class=\"pl-c1\">0.2</span>),\n  tf.keras.layers.Dense(<span class=\"pl-c1\">10</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.softmax)\n])\n\nmodel.compile(<span class=\"pl-v\">optimizer</span> <span class=\"pl-k\">=</span> tf.train.AdamOptimizer(<span class=\"pl-c1\">0.001</span>),<span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>sparse_categorical_crossentropy<span class=\"pl-pds\">'</span></span>,<span class=\"pl-v\">metrics</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>accuracy<span class=\"pl-pds\">'</span></span>])\n\nmodel.summary()\n\nhistory <span class=\"pl-k\">=</span> model.fit(<span class=\"pl-v\">x</span> <span class=\"pl-k\">=</span> train_images,<span class=\"pl-v\">y</span> <span class=\"pl-k\">=</span> train_labels,<span class=\"pl-v\">validation_split</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.1</span>,<span class=\"pl-v\">batch_size</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">256</span>,<span class=\"pl-v\">verbose</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>,<span class=\"pl-v\">shuffle</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>,<span class=\"pl-v\">epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>)\n</pre></div>\n<h3>Other info / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre>InvalidArgumentErrorTraceback (most recent call last)\n<span class=\"pl-k\">&lt;</span>ipython<span class=\"pl-k\">-</span><span class=\"pl-c1\">input</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">6</span><span class=\"pl-k\">-</span><span class=\"pl-ii\">7bdf2a937371</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>()\n      <span class=\"pl-c1\">5</span>                     verbose<span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>,\n      <span class=\"pl-c1\">6</span>                     shuffle <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>,\n<span class=\"pl-ii\">----</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">7</span>                     epochs<span class=\"pl-k\">=</span><span class=\"pl-c1\">10</span>)\n      <span class=\"pl-c1\">8</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span>##########################################</span>\n .\n .\n .\n .\n .\n .     \n      \n<span class=\"pl-k\">/</span>usr<span class=\"pl-k\">/</span>local<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python2.7<span class=\"pl-k\">/</span>dist<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>six.pyc <span class=\"pl-k\">in</span> raise_from(value, from_value)\n    <span class=\"pl-c1\">735</span> <span class=\"pl-k\">else</span>:\n    <span class=\"pl-c1\">736</span>     <span class=\"pl-k\">def</span> <span class=\"pl-en\">raise_from</span>(<span class=\"pl-smi\">value</span>, <span class=\"pl-smi\">from_value</span>):\n<span class=\"pl-ii\">--</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">737</span>         <span class=\"pl-k\">raise</span> value\n    <span class=\"pl-c1\">738</span> \n    <span class=\"pl-c1\">739</span> \n\nInvalidArgumentError: cannot compute Equal <span class=\"pl-k\">as</span> <span class=\"pl-c1\">input</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span>0(zero-based) was expected to be a int64 tensor but is a uint8 tensor [Op:Equal]</span>\n</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS X 10.14.1 - Colab\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: None\nTensorFlow installed from (source or binary): Colab build in\nTensorFlow version (use command below): 1.12.0\nPython version: Colab Python2\nBazel version (if compiling from source): None\nGCC/Compiler version (if compiling from source): None\nCUDA/cuDNN version: None\nGPU model and memory: None\nExact command to reproduce: None\n\nDescribe the problem\nWhen I run the simple DNN on MNIST without eager execution, it works fine. However, when I enable eager execution then fit the model, I got the error said that my train_labels and test_labels has to be int64 tensor which are originally uint8 tensor. The error is shown as below:\nInvalidArgumentError: cannot compute Equal as input #0(zero-based) was expected to be a int64 tensor but is a uint8 tensor [Op:Equal]\nAlthough, I can fix it by using train_labels = train_labels.astype(np.int64) ,It looks like the error should be fixed in the source code.\nSource code to reproduce the issue in Colab\nimport tensorflow as tf\nimport numpy as np\n\ntf.enable_eager_execution()\n\nmnist = tf.keras.datasets.mnist\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n\ntrain_images = train_images / 255.0\ntest_images = test_images / 255.0\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28,28)),\n  tf.keras.layers.Dense(512, activation=tf.nn.relu),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(128, activation=tf.nn.relu),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])\n\nmodel.compile(optimizer = tf.train.AdamOptimizer(0.001),loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n\nmodel.summary()\n\nhistory = model.fit(x = train_images,y = train_labels,validation_split=0.1,batch_size = 256,verbose=2,shuffle = True,epochs=10)\n\nOther info / logs\nInvalidArgumentErrorTraceback (most recent call last)\n<ipython-input-6-7bdf2a937371> in <module>()\n      5                     verbose=2,\n      6                     shuffle = True,\n----> 7                     epochs=10)\n      8 ###########################################\n .\n .\n .\n .\n .\n .     \n      \n/usr/local/lib/python2.7/dist-packages/six.pyc in raise_from(value, from_value)\n    735 else:\n    736     def raise_from(value, from_value):\n--> 737         raise value\n    738 \n    739 \n\nInvalidArgumentError: cannot compute Equal as input #0(zero-based) was expected to be a int64 tensor but is a uint8 tensor [Op:Equal]", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Mac OS X 10.14.1 - Colab\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: None\r\n- **TensorFlow installed from (source or binary)**: Colab build in\r\n- **TensorFlow version (use command below)**: 1.12.0\r\n- **Python version**: Colab Python2\r\n- **Bazel version (if compiling from source)**: None\r\n- **GCC/Compiler version (if compiling from source)**: None\r\n- **CUDA/cuDNN version**: None\r\n- **GPU model and memory**: None\r\n- **Exact command to reproduce**: None\r\n\r\n\r\n### Describe the problem\r\nWhen I run the simple DNN on MNIST without eager execution, it works fine. However, when I enable eager execution then fit the model, I got the error said that my `train_labels` and `test_labels` has to be `int64` tensor which are originally `uint8` tensor. The error is shown as below:\r\n\r\n`InvalidArgumentError: cannot compute Equal as input #0(zero-based) was expected to be a int64 tensor but is a uint8 tensor [Op:Equal]`\r\n\r\nAlthough, I can fix it by using `train_labels = train_labels.astype(np.int64)` ,It looks like the error should be fixed in the source code.\r\n\r\n\r\n\r\n### Source code to reproduce the issue in Colab\r\n\r\n```python\r\n\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ntf.enable_eager_execution()\r\n\r\nmnist = tf.keras.datasets.mnist\r\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\r\n\r\ntrain_images = train_images / 255.0\r\ntest_images = test_images / 255.0\r\n\r\nmodel = tf.keras.models.Sequential([\r\n  tf.keras.layers.Flatten(input_shape=(28,28)),\r\n  tf.keras.layers.Dense(512, activation=tf.nn.relu),\r\n  tf.keras.layers.Dropout(0.2),\r\n  tf.keras.layers.Dense(128, activation=tf.nn.relu),\r\n  tf.keras.layers.Dropout(0.2),\r\n  tf.keras.layers.Dense(10, activation=tf.nn.softmax)\r\n])\r\n\r\nmodel.compile(optimizer = tf.train.AdamOptimizer(0.001),loss='sparse_categorical_crossentropy',metrics=['accuracy'])\r\n\r\nmodel.summary()\r\n\r\nhistory = model.fit(x = train_images,y = train_labels,validation_split=0.1,batch_size = 256,verbose=2,shuffle = True,epochs=10)\r\n\r\n```\r\n\r\n\r\n### Other info / logs\r\n\r\n\r\n```Python traceback\r\n\r\nInvalidArgumentErrorTraceback (most recent call last)\r\n<ipython-input-6-7bdf2a937371> in <module>()\r\n      5                     verbose=2,\r\n      6                     shuffle = True,\r\n----> 7                     epochs=10)\r\n      8 ###########################################\r\n .\r\n .\r\n .\r\n .\r\n .\r\n .     \r\n      \r\n/usr/local/lib/python2.7/dist-packages/six.pyc in raise_from(value, from_value)\r\n    735 else:\r\n    736     def raise_from(value, from_value):\r\n--> 737         raise value\r\n    738 \r\n    739 \r\n\r\nInvalidArgumentError: cannot compute Equal as input #0(zero-based) was expected to be a int64 tensor but is a uint8 tensor [Op:Equal]\r\n\r\n```\r\n\r\n\r\n\t\t"}