{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/346955732", "html_url": "https://github.com/tensorflow/tensorflow/issues/12539#issuecomment-346955732", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12539", "id": 346955732, "node_id": "MDEyOklzc3VlQ29tbWVudDM0Njk1NTczMg==", "user": {"login": "vade", "id": 65011, "node_id": "MDQ6VXNlcjY1MDEx", "avatar_url": "https://avatars1.githubusercontent.com/u/65011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vade", "html_url": "https://github.com/vade", "followers_url": "https://api.github.com/users/vade/followers", "following_url": "https://api.github.com/users/vade/following{/other_user}", "gists_url": "https://api.github.com/users/vade/gists{/gist_id}", "starred_url": "https://api.github.com/users/vade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vade/subscriptions", "organizations_url": "https://api.github.com/users/vade/orgs", "repos_url": "https://api.github.com/users/vade/repos", "events_url": "https://api.github.com/users/vade/events{/privacy}", "received_events_url": "https://api.github.com/users/vade/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-25T17:55:07Z", "updated_at": "2017-11-25T17:57:50Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi. So this issue is now partially resolved, partially due to stale project headers and also resolving an issue introduced in 1.4 by way of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"251878546\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/12482\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/12482/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/12482\">#12482</a>.</p>\n<p>In my particular case, getting the C++ Api of TF 1.4 via libtensorflow_cc.so properly linking into my app I needed to</p>\n<p><strong>1 Compile TF via the normal instructions</strong></p>\n<ul>\n<li>bazel clean</li>\n<li>./configure</li>\n<li>bazel build --config=opt //tensorflow:libtensorflow_cc.so</li>\n</ul>\n<p><strong>2 Configure Xcode</strong></p>\n<ul>\n<li>copy libtensorflow_cc.so &amp; libtensorflow_framework.so from to my project from bazel-bin/tensorflow/</li>\n<li>Ensure my Library Search Paths in my Xcode Build Settings referenced the containing folder for libtensorflow_cc.so &amp; libtensorflow_framework.so (Xcode should do this automatically but it helps to check).</li>\n</ul>\n<p><strong>3 Setup headers</strong></p>\n<ul>\n<li>Run a script to nab all of the headers and deposit them to a single location</li>\n<li>Grab the <strong>generated</strong> protocol buffer headers from the libtensorflow_cc bazel build output and add them to my include folder.</li>\n<li>Ensure Xcode references this include folder in the build settings.</li>\n<li>Finally, edit mutex.h to fix NSync compile issues once you've jumped through those hoops. (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"251878546\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/12482\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/12482/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/12482\">#12482</a>)</li>\n</ul>\n<p>Hopefully this is helpful to someone in the future!</p>", "body_text": "Hi. So this issue is now partially resolved, partially due to stale project headers and also resolving an issue introduced in 1.4 by way of #12482.\nIn my particular case, getting the C++ Api of TF 1.4 via libtensorflow_cc.so properly linking into my app I needed to\n1 Compile TF via the normal instructions\n\nbazel clean\n./configure\nbazel build --config=opt //tensorflow:libtensorflow_cc.so\n\n2 Configure Xcode\n\ncopy libtensorflow_cc.so & libtensorflow_framework.so from to my project from bazel-bin/tensorflow/\nEnsure my Library Search Paths in my Xcode Build Settings referenced the containing folder for libtensorflow_cc.so & libtensorflow_framework.so (Xcode should do this automatically but it helps to check).\n\n3 Setup headers\n\nRun a script to nab all of the headers and deposit them to a single location\nGrab the generated protocol buffer headers from the libtensorflow_cc bazel build output and add them to my include folder.\nEnsure Xcode references this include folder in the build settings.\nFinally, edit mutex.h to fix NSync compile issues once you've jumped through those hoops. (#12482)\n\nHopefully this is helpful to someone in the future!", "body": "Hi. So this issue is now partially resolved, partially due to stale project headers and also resolving an issue introduced in 1.4 by way of https://github.com/tensorflow/tensorflow/issues/12482.\r\n\r\nIn my particular case, getting the C++ Api of TF 1.4 via libtensorflow_cc.so properly linking into my app I needed to\r\n\r\n**1 Compile TF via the normal instructions**\r\n* bazel clean\r\n* ./configure\r\n* bazel build --config=opt //tensorflow:libtensorflow_cc.so\r\n\r\n**2 Configure Xcode**\r\n* copy libtensorflow_cc.so & libtensorflow_framework.so from to my project from bazel-bin/tensorflow/\r\n* Ensure my Library Search Paths in my Xcode Build Settings referenced the containing folder for libtensorflow_cc.so & libtensorflow_framework.so (Xcode should do this automatically but it helps to check).\r\n\r\n**3 Setup headers**\r\n* Run a script to nab all of the headers and deposit them to a single location\r\n* Grab the **generated** protocol buffer headers from the libtensorflow_cc bazel build output and add them to my include folder.\r\n* Ensure Xcode references this include folder in the build settings.\r\n* Finally, edit mutex.h to fix NSync compile issues once you've jumped through those hoops. (#12482)\r\n\r\nHopefully this is helpful to someone in the future!"}