{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22190", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22190/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22190/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22190/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22190", "id": 358639740, "node_id": "MDU6SXNzdWUzNTg2Mzk3NDA=", "number": 22190, "title": "metrics=['accuracy'] seems to be calculated differently if one uses tf.data inputs instead of numpy arrays for keras model", "user": {"login": "Efaq", "id": 42271354, "node_id": "MDQ6VXNlcjQyMjcxMzU0", "avatar_url": "https://avatars2.githubusercontent.com/u/42271354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Efaq", "html_url": "https://github.com/Efaq", "followers_url": "https://api.github.com/users/Efaq/followers", "following_url": "https://api.github.com/users/Efaq/following{/other_user}", "gists_url": "https://api.github.com/users/Efaq/gists{/gist_id}", "starred_url": "https://api.github.com/users/Efaq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Efaq/subscriptions", "organizations_url": "https://api.github.com/users/Efaq/orgs", "repos_url": "https://api.github.com/users/Efaq/repos", "events_url": "https://api.github.com/users/Efaq/events{/privacy}", "received_events_url": "https://api.github.com/users/Efaq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-09-10T14:06:57Z", "updated_at": "2018-10-04T17:40:56Z", "closed_at": "2018-10-04T17:40:56Z", "author_association": "NONE", "body_html": "<p>Please go to Stack Overflow for help and support:</p>\n<p><a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">https://stackoverflow.com/questions/tagged/tensorflow</a></p>\n<p>If you open a GitHub issue, here is our policy:</p>\n<ol>\n<li>It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).</li>\n<li>The form below must be filled out.</li>\n<li>It shouldn't be a TensorBoard issue. Those go <a href=\"https://github.com/tensorflow/tensorboard/issues\">here</a>.</li>\n</ol>\n<p><strong>Here's why we have that policy</strong>: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: <strong>YES</strong></li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: <strong>Windows 10</strong></li>\n<li><strong>Mobile device</strong>:na</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: <strong>binary</strong></li>\n<li><strong>TensorFlow version (use command below)</strong>:<strong>1.11.0-dev20180907</strong></li>\n<li><strong>Python version</strong>:<strong>3.6.3</strong></li>\n<li><strong>Bazel version (if compiling from source)</strong>:na</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:na</li>\n<li><strong>CUDA/cuDNN version</strong>:na</li>\n<li><strong>GPU model and memory</strong>:na</li>\n<li><strong>Exact command to reproduce</strong>:na</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<p>Given the same piece of code for loading mnist data and training a keras model in tensorflow, the metric \"accuracy\" given as argument to keras_model.compile(metrics=[...]) generates very different values (order of 0.10 versus order of 0.90) depending on if you use numpy arrays or tf.data datasets as training inputs. Note that the values of the loss in each case are very close. I suspect that \"accuracy\" is being calculated differently depending on the type of input (numpy or tf.data), or that it is being calculated wrong in one of the cases.<br>\nIn particular, as an example, using numpy arrays as input, one can get the pair loss: 0.2086 - acc: 0.9389 in one of the steps, while the same loss in with tf.data gives the pair loss: 0.2086 - acc: 0.1024.</p>\n<h3>Source code / logs</h3>\n<p>Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.</p>\n<p>The code below as it is can be run and training with tf.data datasets will be performed. If you comment the block between <code>#Train with tf.data datasets</code> and <code>########################</code> and uncomment the block between <code>#Train with numpy arrays</code> and <code>########################</code>, training with numpy arrays as inputs will be performed.</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\nnp.random.seed(1)\ntf.set_random_seed(1)\nBATCH_SIZE = 32\n\n#Import mnist dataset as numpy arrays\n(x_train, y_train), (_, _) = tf.keras.datasets.mnist.load_data()#Import\nx_train = x_train / 255.0 #normalizing\ny_train = y_train.astype(dtype='float32')\nx_train = x_train.astype(dtype='float32')\n\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1]*x_train.shape[2]))#Reshaping the 2D picture\n\n##############################################################################################\n#THIS BLOCK CREATES A DATASET FROM THE NUMPY ARRAYS. IT WILL BE USED FOR THE CASE OF TF.DATA DATASET INPUTS\ntfdata_dataset_train = tf.data.Dataset.from_tensor_slices((x_train, y_train))\ntfdata_dataset_train = tfdata_dataset_train.batch(BATCH_SIZE).repeat()\n##############################################################################################\n\n#Create model\nkeras_model = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(512, activation=tf.nn.relu),\n    tf.keras.layers.Dropout(0.2, seed=1),\n    tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])\n\n#Compile the model\nkeras_model.compile(optimizer=tf.keras.optimizers.Adam(),\n                    loss=tf.keras.losses.sparse_categorical_crossentropy,\n                    metrics=['accuracy'])\n\n#Train with numpy arrays\n#keras_training_history = keras_model.fit(x_train,\n#                y_train,\n#                epochs=1\n#                )\n########################\n\n#Train with tf.data datasets\nkeras_training_history = keras_model.fit(tfdata_dataset_train,\n                epochs=1,\n                steps_per_epoch=60000//BATCH_SIZE\n                )\n########################\n</code></pre>", "body_text": "Please go to Stack Overflow for help and support:\nhttps://stackoverflow.com/questions/tagged/tensorflow\nIf you open a GitHub issue, here is our policy:\n\nIt must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\nThe form below must be filled out.\nIt shouldn't be a TensorBoard issue. Those go here.\n\nHere's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): YES\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nMobile device:na\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below):1.11.0-dev20180907\nPython version:3.6.3\nBazel version (if compiling from source):na\nGCC/Compiler version (if compiling from source):na\nCUDA/cuDNN version:na\nGPU model and memory:na\nExact command to reproduce:na\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\nGiven the same piece of code for loading mnist data and training a keras model in tensorflow, the metric \"accuracy\" given as argument to keras_model.compile(metrics=[...]) generates very different values (order of 0.10 versus order of 0.90) depending on if you use numpy arrays or tf.data datasets as training inputs. Note that the values of the loss in each case are very close. I suspect that \"accuracy\" is being calculated differently depending on the type of input (numpy or tf.data), or that it is being calculated wrong in one of the cases.\nIn particular, as an example, using numpy arrays as input, one can get the pair loss: 0.2086 - acc: 0.9389 in one of the steps, while the same loss in with tf.data gives the pair loss: 0.2086 - acc: 0.1024.\nSource code / logs\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\nThe code below as it is can be run and training with tf.data datasets will be performed. If you comment the block between #Train with tf.data datasets and ######################## and uncomment the block between #Train with numpy arrays and ########################, training with numpy arrays as inputs will be performed.\nimport tensorflow as tf\nimport numpy as np\n\nnp.random.seed(1)\ntf.set_random_seed(1)\nBATCH_SIZE = 32\n\n#Import mnist dataset as numpy arrays\n(x_train, y_train), (_, _) = tf.keras.datasets.mnist.load_data()#Import\nx_train = x_train / 255.0 #normalizing\ny_train = y_train.astype(dtype='float32')\nx_train = x_train.astype(dtype='float32')\n\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1]*x_train.shape[2]))#Reshaping the 2D picture\n\n##############################################################################################\n#THIS BLOCK CREATES A DATASET FROM THE NUMPY ARRAYS. IT WILL BE USED FOR THE CASE OF TF.DATA DATASET INPUTS\ntfdata_dataset_train = tf.data.Dataset.from_tensor_slices((x_train, y_train))\ntfdata_dataset_train = tfdata_dataset_train.batch(BATCH_SIZE).repeat()\n##############################################################################################\n\n#Create model\nkeras_model = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(512, activation=tf.nn.relu),\n    tf.keras.layers.Dropout(0.2, seed=1),\n    tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])\n\n#Compile the model\nkeras_model.compile(optimizer=tf.keras.optimizers.Adam(),\n                    loss=tf.keras.losses.sparse_categorical_crossentropy,\n                    metrics=['accuracy'])\n\n#Train with numpy arrays\n#keras_training_history = keras_model.fit(x_train,\n#                y_train,\n#                epochs=1\n#                )\n########################\n\n#Train with tf.data datasets\nkeras_training_history = keras_model.fit(tfdata_dataset_train,\n                epochs=1,\n                steps_per_epoch=60000//BATCH_SIZE\n                )\n########################", "body": "Please go to Stack Overflow for help and support:\r\n\r\nhttps://stackoverflow.com/questions/tagged/tensorflow\r\n\r\nIf you open a GitHub issue, here is our policy:\r\n\r\n1. It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\r\n2. The form below must be filled out.\r\n3. It shouldn't be a TensorBoard issue. Those go [here](https://github.com/tensorflow/tensorboard/issues).\r\n\r\n**Here's why we have that policy**: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: **YES**\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: **Windows 10**\r\n- **Mobile device**:na\r\n- **TensorFlow installed from (source or binary)**: **binary**\r\n- **TensorFlow version (use command below)**:**1.11.0-dev20180907**\r\n- **Python version**:**3.6.3**\r\n- **Bazel version (if compiling from source)**:na\r\n- **GCC/Compiler version (if compiling from source)**:na\r\n- **CUDA/cuDNN version**:na\r\n- **GPU model and memory**:na\r\n- **Exact command to reproduce**:na\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n\r\nGiven the same piece of code for loading mnist data and training a keras model in tensorflow, the metric \"accuracy\" given as argument to keras_model.compile(metrics=[...]) generates very different values (order of 0.10 versus order of 0.90) depending on if you use numpy arrays or tf.data datasets as training inputs. Note that the values of the loss in each case are very close. I suspect that \"accuracy\" is being calculated differently depending on the type of input (numpy or tf.data), or that it is being calculated wrong in one of the cases.\r\nIn particular, as an example, using numpy arrays as input, one can get the pair loss: 0.2086 - acc: 0.9389 in one of the steps, while the same loss in with tf.data gives the pair loss: 0.2086 - acc: 0.1024.\r\n\r\n### Source code / logs\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\r\n\r\nThe code below as it is can be run and training with tf.data datasets will be performed. If you comment the block between `#Train with tf.data datasets` and `########################` and uncomment the block between `#Train with numpy arrays` and `########################`, training with numpy arrays as inputs will be performed.\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\nnp.random.seed(1)\r\ntf.set_random_seed(1)\r\nBATCH_SIZE = 32\r\n\r\n#Import mnist dataset as numpy arrays\r\n(x_train, y_train), (_, _) = tf.keras.datasets.mnist.load_data()#Import\r\nx_train = x_train / 255.0 #normalizing\r\ny_train = y_train.astype(dtype='float32')\r\nx_train = x_train.astype(dtype='float32')\r\n\r\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1]*x_train.shape[2]))#Reshaping the 2D picture\r\n\r\n##############################################################################################\r\n#THIS BLOCK CREATES A DATASET FROM THE NUMPY ARRAYS. IT WILL BE USED FOR THE CASE OF TF.DATA DATASET INPUTS\r\ntfdata_dataset_train = tf.data.Dataset.from_tensor_slices((x_train, y_train))\r\ntfdata_dataset_train = tfdata_dataset_train.batch(BATCH_SIZE).repeat()\r\n##############################################################################################\r\n\r\n#Create model\r\nkeras_model = tf.keras.models.Sequential([\r\n    tf.keras.layers.Dense(512, activation=tf.nn.relu),\r\n    tf.keras.layers.Dropout(0.2, seed=1),\r\n    tf.keras.layers.Dense(10, activation=tf.nn.softmax)\r\n])\r\n\r\n#Compile the model\r\nkeras_model.compile(optimizer=tf.keras.optimizers.Adam(),\r\n                    loss=tf.keras.losses.sparse_categorical_crossentropy,\r\n                    metrics=['accuracy'])\r\n\r\n#Train with numpy arrays\r\n#keras_training_history = keras_model.fit(x_train,\r\n#                y_train,\r\n#                epochs=1\r\n#                )\r\n########################\r\n\r\n#Train with tf.data datasets\r\nkeras_training_history = keras_model.fit(tfdata_dataset_train,\r\n                epochs=1,\r\n                steps_per_epoch=60000//BATCH_SIZE\r\n                )\r\n########################\r\n```\r\n\r\n\r\n"}