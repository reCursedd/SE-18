{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/430712751", "html_url": "https://github.com/tensorflow/tensorflow/issues/23041#issuecomment-430712751", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23041", "id": 430712751, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDcxMjc1MQ==", "user": {"login": "omalleyt12", "id": 29100818, "node_id": "MDQ6VXNlcjI5MTAwODE4", "avatar_url": "https://avatars3.githubusercontent.com/u/29100818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omalleyt12", "html_url": "https://github.com/omalleyt12", "followers_url": "https://api.github.com/users/omalleyt12/followers", "following_url": "https://api.github.com/users/omalleyt12/following{/other_user}", "gists_url": "https://api.github.com/users/omalleyt12/gists{/gist_id}", "starred_url": "https://api.github.com/users/omalleyt12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omalleyt12/subscriptions", "organizations_url": "https://api.github.com/users/omalleyt12/orgs", "repos_url": "https://api.github.com/users/omalleyt12/repos", "events_url": "https://api.github.com/users/omalleyt12/events{/privacy}", "received_events_url": "https://api.github.com/users/omalleyt12/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-17T17:14:50Z", "updated_at": "2018-10-17T17:14:50Z", "author_association": "NONE", "body_html": "<p>I can take a look at this, in the meantime you could always use a Lambda layer:</p>\n<div class=\"highlight highlight-source-python\"><pre>Lambda(\n  <span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: tf.image.resize_bilinear(x, (H, W), <span class=\"pl-v\">align_corners</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>), <span class=\"pl-v\">output_shape</span><span class=\"pl-k\">=</span>(H, W, C))(data))</pre></div>", "body_text": "I can take a look at this, in the meantime you could always use a Lambda layer:\nLambda(\n  lambda x: tf.image.resize_bilinear(x, (H, W), align_corners=True), output_shape=(H, W, C))(data))", "body": "I can take a look at this, in the meantime you could always use a Lambda layer:\r\n\r\n```python\r\nLambda(\r\n  lambda x: tf.image.resize_bilinear(x, (H, W), align_corners=True), output_shape=(H, W, C))(data))\r\n```"}