{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12992", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12992/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12992/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12992/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12992", "id": 256933833, "node_id": "MDU6SXNzdWUyNTY5MzM4MzM=", "number": 12992, "title": "Mixture model with gaussians fails to create", "user": {"login": "ArtemiyFirsov", "id": 4475110, "node_id": "MDQ6VXNlcjQ0NzUxMTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4475110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArtemiyFirsov", "html_url": "https://github.com/ArtemiyFirsov", "followers_url": "https://api.github.com/users/ArtemiyFirsov/followers", "following_url": "https://api.github.com/users/ArtemiyFirsov/following{/other_user}", "gists_url": "https://api.github.com/users/ArtemiyFirsov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArtemiyFirsov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArtemiyFirsov/subscriptions", "organizations_url": "https://api.github.com/users/ArtemiyFirsov/orgs", "repos_url": "https://api.github.com/users/ArtemiyFirsov/repos", "events_url": "https://api.github.com/users/ArtemiyFirsov/events{/privacy}", "received_events_url": "https://api.github.com/users/ArtemiyFirsov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-12T06:40:44Z", "updated_at": "2017-09-14T16:39:57Z", "closed_at": "2017-09-14T16:39:57Z", "author_association": "NONE", "body_html": "<p>Hello!</p>\n<p>I have written some code to model GMM and further prob some data points. I already have weights and other params for initialization. Here is the code:</p>\n<pre><code>ds = tf.contrib.distributions\ngaussians = []\nfor i in range(0, len(weights)):\n    mns = means[i]\n    covs = covariances[i]\n    gaussians.append(ds.MultivariateNormalFullCovariance(loc=np.array(means).astype(np.float64), covariance_matrix=np.array(covariances).astype(np.float64)))\n\ngmm = ds.Mixture(\n  cat=ds.Categorical(probs=weights.astype(np.float64)),\n  components=gaussians\n)\n</code></pre>\n<p>However in this stage:<br>\n<code> cat=ds.Categorical(probs=weights.astype(np.float64)),</code></p>\n<p>there is this error:</p>\n<blockquote>\n<p>Traceback (most recent call last):<br>\nFile \"D:\\Programs\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py\", line 560, in merge_with<br>\nself.assert_same_rank(other)<br>\nFile \"D:\\Programs\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py\", line 605, in assert_same_rank<br>\nother))<br>\nValueError: Shapes () and (32,) must have the same rank</p>\n</blockquote>\n<p>I have 32 gaussians per mixture, data has 26 features.<br>\nWeights is a list of floats, means - list of floats for each gaussian, covariances - matrix in form of list of lists for each gaussian.</p>\n<p>I started to see why Shapes is just empty, and found this piece of code from tf from exception:</p>\n<pre><code>  @property\n  def batch_shape(self):\n    \"\"\"Shape of a single sample from a single event index as a `TensorShape`.\n\n    May be partially defined or unknown.\n\n    The batch dimensions are indexes into independent, non-identical\n    parameterizations of this distribution.\n\n    Returns:\n      batch_shape: `TensorShape`, possibly unknown.\n    \"\"\"\n    return self._batch_shape()\n</code></pre>\n<p>So, the problem might be somewhere in <strong>self._batch_shape()</strong> function. And in categorical.py, I found this lines of code:</p>\n<pre><code> def _batch_shape(self):\n    return self.logits.get_shape()[:-1]\n</code></pre>\n<p>When debugging, I found out that this exact function is hit when Shape check is performed. And <strong>self.logits.get_shape()</strong> does return Shape(32,), but taking <strong>[:-1]</strong> from it, leads to an error.</p>\n<p>Is this an intended behaviour?</p>", "body_text": "Hello!\nI have written some code to model GMM and further prob some data points. I already have weights and other params for initialization. Here is the code:\nds = tf.contrib.distributions\ngaussians = []\nfor i in range(0, len(weights)):\n    mns = means[i]\n    covs = covariances[i]\n    gaussians.append(ds.MultivariateNormalFullCovariance(loc=np.array(means).astype(np.float64), covariance_matrix=np.array(covariances).astype(np.float64)))\n\ngmm = ds.Mixture(\n  cat=ds.Categorical(probs=weights.astype(np.float64)),\n  components=gaussians\n)\n\nHowever in this stage:\n cat=ds.Categorical(probs=weights.astype(np.float64)),\nthere is this error:\n\nTraceback (most recent call last):\nFile \"D:\\Programs\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py\", line 560, in merge_with\nself.assert_same_rank(other)\nFile \"D:\\Programs\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py\", line 605, in assert_same_rank\nother))\nValueError: Shapes () and (32,) must have the same rank\n\nI have 32 gaussians per mixture, data has 26 features.\nWeights is a list of floats, means - list of floats for each gaussian, covariances - matrix in form of list of lists for each gaussian.\nI started to see why Shapes is just empty, and found this piece of code from tf from exception:\n  @property\n  def batch_shape(self):\n    \"\"\"Shape of a single sample from a single event index as a `TensorShape`.\n\n    May be partially defined or unknown.\n\n    The batch dimensions are indexes into independent, non-identical\n    parameterizations of this distribution.\n\n    Returns:\n      batch_shape: `TensorShape`, possibly unknown.\n    \"\"\"\n    return self._batch_shape()\n\nSo, the problem might be somewhere in self._batch_shape() function. And in categorical.py, I found this lines of code:\n def _batch_shape(self):\n    return self.logits.get_shape()[:-1]\n\nWhen debugging, I found out that this exact function is hit when Shape check is performed. And self.logits.get_shape() does return Shape(32,), but taking [:-1] from it, leads to an error.\nIs this an intended behaviour?", "body": "Hello! \r\n\r\nI have written some code to model GMM and further prob some data points. I already have weights and other params for initialization. Here is the code:\r\n\r\n```\r\nds = tf.contrib.distributions\r\ngaussians = []\r\nfor i in range(0, len(weights)):\r\n    mns = means[i]\r\n    covs = covariances[i]\r\n    gaussians.append(ds.MultivariateNormalFullCovariance(loc=np.array(means).astype(np.float64), covariance_matrix=np.array(covariances).astype(np.float64)))\r\n\r\ngmm = ds.Mixture(\r\n  cat=ds.Categorical(probs=weights.astype(np.float64)),\r\n  components=gaussians\r\n)\r\n```\r\n\r\nHowever in this stage:\r\n` cat=ds.Categorical(probs=weights.astype(np.float64)),`\r\n\r\nthere is this error:\r\n\r\n> Traceback (most recent call last):\r\n>   File \"D:\\Programs\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py\", line 560, in merge_with\r\n>     self.assert_same_rank(other)\r\n>   File \"D:\\Programs\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_shape.py\", line 605, in assert_same_rank\r\n>     other))\r\n> ValueError: Shapes () and (32,) must have the same rank\r\n\r\nI have 32 gaussians per mixture, data has 26 features. \r\nWeights is a list of floats, means - list of floats for each gaussian, covariances - matrix in form of list of lists for each gaussian.\r\n\r\nI started to see why Shapes is just empty, and found this piece of code from tf from exception:\r\n```\r\n  @property\r\n  def batch_shape(self):\r\n    \"\"\"Shape of a single sample from a single event index as a `TensorShape`.\r\n\r\n    May be partially defined or unknown.\r\n\r\n    The batch dimensions are indexes into independent, non-identical\r\n    parameterizations of this distribution.\r\n\r\n    Returns:\r\n      batch_shape: `TensorShape`, possibly unknown.\r\n    \"\"\"\r\n    return self._batch_shape()\r\n```\r\n\r\nSo, the problem might be somewhere in **self._batch_shape()** function. And in categorical.py, I found this lines of code:\r\n \r\n```\r\n def _batch_shape(self):\r\n    return self.logits.get_shape()[:-1]\r\n```\r\n\r\nWhen debugging, I found out that this exact function is hit when Shape check is performed. And **self.logits.get_shape()** does return Shape(32,), but taking **[:-1]** from it, leads to an error. \r\n\r\nIs this an intended behaviour?\r\n\r\n\r\n"}