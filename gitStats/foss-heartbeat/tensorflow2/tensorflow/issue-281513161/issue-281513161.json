{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15320", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15320/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15320/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15320/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15320", "id": 281513161, "node_id": "MDU6SXNzdWUyODE1MTMxNjE=", "number": 15320, "title": "Multi-core CPU performance dropped for MKL TF build", "user": {"login": "BogdanRuzh", "id": 20704139, "node_id": "MDQ6VXNlcjIwNzA0MTM5", "avatar_url": "https://avatars3.githubusercontent.com/u/20704139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BogdanRuzh", "html_url": "https://github.com/BogdanRuzh", "followers_url": "https://api.github.com/users/BogdanRuzh/followers", "following_url": "https://api.github.com/users/BogdanRuzh/following{/other_user}", "gists_url": "https://api.github.com/users/BogdanRuzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/BogdanRuzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BogdanRuzh/subscriptions", "organizations_url": "https://api.github.com/users/BogdanRuzh/orgs", "repos_url": "https://api.github.com/users/BogdanRuzh/repos", "events_url": "https://api.github.com/users/BogdanRuzh/events{/privacy}", "received_events_url": "https://api.github.com/users/BogdanRuzh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 13, "created_at": "2017-12-12T19:43:31Z", "updated_at": "2018-01-31T21:28:37Z", "closed_at": "2018-01-31T21:28:18Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04 LTS (64-bit)</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: Tensorflow r1.4</li>\n<li><strong>Python version</strong>: Python version: 2.7.12</li>\n<li><strong>Bazel version (if compiling from source)</strong>: Bazel release 0.7.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609</li>\n<li><strong>CUDA/cuDNN version</strong>: no CUDA</li>\n<li><strong>GPU model and memory</strong>: no GPU, but i7-6850K with 32Gb ddr4</li>\n<li><strong>Exact command to reproduce</strong>: run the script below</li>\n</ul>\n<p>Tested on two machines:</p>\n<ol>\n<li>i7-6850K with 32Gb ddr4</li>\n<li>two Xeon x5650 with 24Gb ddr3</li>\n</ol>\n<h3>Describe the problem</h3>\n<p>When I build Tensorflow with MKL it dropped CPU performance in a strange way. Performance of individual core is much higher, but for multicore is much worse.<br>\nIt's a big epic bottleneck for my project and I can't solve it by myself. I will appreciate any help!</p>\n<ol>\n<li>TF installation from sources with MKL support</li>\n</ol>\n<blockquote>\n<p>Tensorflow r1.4 installed from source. Configured with jemalloc as malloc support and other configure settings ignored.<br>\n$ bazel build --config=mkl -c opt //tensorflow/tools/pip_package:build_pip_package<br>\n$ bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg<br>\n$ pip install /tmp/tensorflow_pkg/tensorflow-1.4.1-cp27-cp27mu-linux_x86_64.whl</p>\n</blockquote>\n<p><strong>Run tests:</strong><br>\none core: 0.03s<br>\nall cores: 0.12s</p>\n<ol start=\"2\">\n<li>TF installation with pip</li>\n</ol>\n<blockquote>\n<p>$ pip install tensorflow<br>\n(tensorflow-1.4.1-cp27-cp27mu-manylinux1_x86_64.whl installed)</p>\n</blockquote>\n<p><strong>Run tests:</strong><br>\none core: 0.16s<br>\nall cores: 0.03s</p>\n<h3>Source code / logs</h3>\n<pre><code>    import time\n    import numpy as np\n    import tensorflow as tf\n\n    from tensorflow.contrib import slim\n    from tensorflow.contrib.slim.python.slim.nets.inception_v1 import inception_v1, inception_v1_arg_scope\n\n\n    input_shape = (1, 224, 224, 3)\n    features = tf.placeholder(tf.float32, input_shape)\n\n    with slim.arg_scope(inception_v1_arg_scope()):\n        predictions, end_points = inception_v1(features, is_training=False)\n\n    # remove to utilize all cores\n    session_conf = tf.ConfigProto(intra_op_parallelism_threads=1,\n                                  inter_op_parallelism_threads=1)\n\n    with tf.Session(config=session_conf) as sess:\n        sess.run(tf.global_variables_initializer())\n        sess.run(tf.local_variables_initializer())\n\n        images = np.random.random(input_shape)\n        consumption = []\n        for i in range(10):\n            tick = time.time()\n            sess.run(predictions, feed_dict={features: images})\n            consumption.append(time.time() - tick)\n\n        print np.mean(consumption)\n</code></pre>", "body_text": "System information\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04 LTS (64-bit)\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): Tensorflow r1.4\nPython version: Python version: 2.7.12\nBazel version (if compiling from source): Bazel release 0.7.0\nGCC/Compiler version (if compiling from source): gcc (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\nCUDA/cuDNN version: no CUDA\nGPU model and memory: no GPU, but i7-6850K with 32Gb ddr4\nExact command to reproduce: run the script below\n\nTested on two machines:\n\ni7-6850K with 32Gb ddr4\ntwo Xeon x5650 with 24Gb ddr3\n\nDescribe the problem\nWhen I build Tensorflow with MKL it dropped CPU performance in a strange way. Performance of individual core is much higher, but for multicore is much worse.\nIt's a big epic bottleneck for my project and I can't solve it by myself. I will appreciate any help!\n\nTF installation from sources with MKL support\n\n\nTensorflow r1.4 installed from source. Configured with jemalloc as malloc support and other configure settings ignored.\n$ bazel build --config=mkl -c opt //tensorflow/tools/pip_package:build_pip_package\n$ bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg\n$ pip install /tmp/tensorflow_pkg/tensorflow-1.4.1-cp27-cp27mu-linux_x86_64.whl\n\nRun tests:\none core: 0.03s\nall cores: 0.12s\n\nTF installation with pip\n\n\n$ pip install tensorflow\n(tensorflow-1.4.1-cp27-cp27mu-manylinux1_x86_64.whl installed)\n\nRun tests:\none core: 0.16s\nall cores: 0.03s\nSource code / logs\n    import time\n    import numpy as np\n    import tensorflow as tf\n\n    from tensorflow.contrib import slim\n    from tensorflow.contrib.slim.python.slim.nets.inception_v1 import inception_v1, inception_v1_arg_scope\n\n\n    input_shape = (1, 224, 224, 3)\n    features = tf.placeholder(tf.float32, input_shape)\n\n    with slim.arg_scope(inception_v1_arg_scope()):\n        predictions, end_points = inception_v1(features, is_training=False)\n\n    # remove to utilize all cores\n    session_conf = tf.ConfigProto(intra_op_parallelism_threads=1,\n                                  inter_op_parallelism_threads=1)\n\n    with tf.Session(config=session_conf) as sess:\n        sess.run(tf.global_variables_initializer())\n        sess.run(tf.local_variables_initializer())\n\n        images = np.random.random(input_shape)\n        consumption = []\n        for i in range(10):\n            tick = time.time()\n            sess.run(predictions, feed_dict={features: images})\n            consumption.append(time.time() - tick)\n\n        print np.mean(consumption)", "body": "### System information\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04 LTS (64-bit)\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: Tensorflow r1.4\r\n- **Python version**: Python version: 2.7.12\r\n- **Bazel version (if compiling from source)**: Bazel release 0.7.0\r\n- **GCC/Compiler version (if compiling from source)**: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609\r\n- **CUDA/cuDNN version**: no CUDA\r\n- **GPU model and memory**: no GPU, but i7-6850K with 32Gb ddr4\r\n- **Exact command to reproduce**: run the script below\r\n\r\nTested on two machines:\r\n1) i7-6850K with 32Gb ddr4\r\n2) two Xeon x5650 with 24Gb ddr3\r\n\r\n### Describe the problem\r\nWhen I build Tensorflow with MKL it dropped CPU performance in a strange way. Performance of individual core is much higher, but for multicore is much worse.\r\nIt's a big epic bottleneck for my project and I can't solve it by myself. I will appreciate any help!\r\n\r\n1) TF installation from sources with MKL support\r\n> Tensorflow r1.4 installed from source. Configured with jemalloc as malloc support and other configure settings ignored.\r\n> $ bazel build --config=mkl -c opt //tensorflow/tools/pip_package:build_pip_package\r\n> $ bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg\r\n> $ pip install /tmp/tensorflow_pkg/tensorflow-1.4.1-cp27-cp27mu-linux_x86_64.whl\r\n\r\n**Run tests:** \r\none core: 0.03s\r\nall cores: 0.12s\r\n\r\n2) TF installation with pip\r\n> $ pip install tensorflow\r\n> (tensorflow-1.4.1-cp27-cp27mu-manylinux1_x86_64.whl installed)\r\n\r\n**Run tests:**\r\none core: 0.16s\r\nall cores: 0.03s\r\n\r\n\r\n### Source code / logs\r\n\r\n```\r\n    import time\r\n    import numpy as np\r\n    import tensorflow as tf\r\n\r\n    from tensorflow.contrib import slim\r\n    from tensorflow.contrib.slim.python.slim.nets.inception_v1 import inception_v1, inception_v1_arg_scope\r\n\r\n\r\n    input_shape = (1, 224, 224, 3)\r\n    features = tf.placeholder(tf.float32, input_shape)\r\n\r\n    with slim.arg_scope(inception_v1_arg_scope()):\r\n        predictions, end_points = inception_v1(features, is_training=False)\r\n\r\n    # remove to utilize all cores\r\n    session_conf = tf.ConfigProto(intra_op_parallelism_threads=1,\r\n                                  inter_op_parallelism_threads=1)\r\n\r\n    with tf.Session(config=session_conf) as sess:\r\n        sess.run(tf.global_variables_initializer())\r\n        sess.run(tf.local_variables_initializer())\r\n\r\n        images = np.random.random(input_shape)\r\n        consumption = []\r\n        for i in range(10):\r\n            tick = time.time()\r\n            sess.run(predictions, feed_dict={features: images})\r\n            consumption.append(time.time() - tick)\r\n\r\n        print np.mean(consumption)\r\n```"}