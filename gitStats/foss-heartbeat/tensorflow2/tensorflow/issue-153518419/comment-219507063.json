{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/219507063", "html_url": "https://github.com/tensorflow/tensorflow/issues/2255#issuecomment-219507063", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2255", "id": 219507063, "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTUwNzA2Mw==", "user": {"login": "NickShahML", "id": 14891677, "node_id": "MDQ6VXNlcjE0ODkxNjc3", "avatar_url": "https://avatars2.githubusercontent.com/u/14891677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NickShahML", "html_url": "https://github.com/NickShahML", "followers_url": "https://api.github.com/users/NickShahML/followers", "following_url": "https://api.github.com/users/NickShahML/following{/other_user}", "gists_url": "https://api.github.com/users/NickShahML/gists{/gist_id}", "starred_url": "https://api.github.com/users/NickShahML/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NickShahML/subscriptions", "organizations_url": "https://api.github.com/users/NickShahML/orgs", "repos_url": "https://api.github.com/users/NickShahML/repos", "events_url": "https://api.github.com/users/NickShahML/events{/privacy}", "received_events_url": "https://api.github.com/users/NickShahML/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-16T18:34:04Z", "updated_at": "2016-05-16T18:34:04Z", "author_association": "NONE", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a></p>\n<p>Here's the full situation. TensorFlow has operations such as batch_ifft which only accept complex64 numbers. To implement papers like unitary RNN's <a href=\"http://arxiv.org/abs/1511.06464\" rel=\"nofollow\">http://arxiv.org/abs/1511.06464</a>, we need these transforms.</p>\n<p>We also need to operate in the complex domain. Now you can simulate imaginary numbers with float32 numbers, but still -- we can't use FFT's which is a critical piece.</p>\n<p>There are many other networks that use complex numbers like Associative LSTMs which could receive significant speed boosts if complex64 could be backproped. Thanks!</p>", "body_text": "Thanks @mrry\nHere's the full situation. TensorFlow has operations such as batch_ifft which only accept complex64 numbers. To implement papers like unitary RNN's http://arxiv.org/abs/1511.06464, we need these transforms.\nWe also need to operate in the complex domain. Now you can simulate imaginary numbers with float32 numbers, but still -- we can't use FFT's which is a critical piece.\nThere are many other networks that use complex numbers like Associative LSTMs which could receive significant speed boosts if complex64 could be backproped. Thanks!", "body": "Thanks @mrry \n\nHere's the full situation. TensorFlow has operations such as batch_ifft which only accept complex64 numbers. To implement papers like unitary RNN's http://arxiv.org/abs/1511.06464, we need these transforms. \n\nWe also need to operate in the complex domain. Now you can simulate imaginary numbers with float32 numbers, but still -- we can't use FFT's which is a critical piece. \n\nThere are many other networks that use complex numbers like Associative LSTMs which could receive significant speed boosts if complex64 could be backproped. Thanks!\n"}