{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/225328171", "html_url": "https://github.com/tensorflow/tensorflow/issues/2255#issuecomment-225328171", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2255", "id": 225328171, "node_id": "MDEyOklzc3VlQ29tbWVudDIyNTMyODE3MQ==", "user": {"login": "NickShahML", "id": 14891677, "node_id": "MDQ6VXNlcjE0ODkxNjc3", "avatar_url": "https://avatars2.githubusercontent.com/u/14891677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NickShahML", "html_url": "https://github.com/NickShahML", "followers_url": "https://api.github.com/users/NickShahML/followers", "following_url": "https://api.github.com/users/NickShahML/following{/other_user}", "gists_url": "https://api.github.com/users/NickShahML/gists{/gist_id}", "starred_url": "https://api.github.com/users/NickShahML/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NickShahML/subscriptions", "organizations_url": "https://api.github.com/users/NickShahML/orgs", "repos_url": "https://api.github.com/users/NickShahML/repos", "events_url": "https://api.github.com/users/NickShahML/events{/privacy}", "received_events_url": "https://api.github.com/users/NickShahML/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-11T01:12:25Z", "updated_at": "2016-06-11T01:12:25Z", "author_association": "NONE", "body_html": "<p>Reporting back to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=890531\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ibab\">@ibab</a>  -- I tried <code>tf.complex(var,var)</code> and unfortunately it produced the same error as above. I looked at your crossed out message and I am running this on a titan x -- so this could be the problem. Here's my weight matrix code:</p>\n<div class=\"highlight highlight-source-python\"><pre>  <span class=\"pl-k\">with</span> tf.variable_scope(scope <span class=\"pl-k\">or</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Enhanced_Linear<span class=\"pl-pds\">\"</span></span>):\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span>this will make a class for these variables so you can reference them in the future. </span>\n\n    <span class=\"pl-s\"><span class=\"pl-pds\">'''</span>initialize weight matrix properly<span class=\"pl-pds\">'''</span></span>\n    <span class=\"pl-k\">if</span> weight_initializer <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>uniform_unit<span class=\"pl-pds\">\"</span></span>:\n      matrix <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Uniform_Matrix<span class=\"pl-pds\">\"</span></span>, [total_arg_size, output_size], <span class=\"pl-v\">initializer</span> <span class=\"pl-k\">=</span> tf.uniform_unit_scaling_initializer()) \n    <span class=\"pl-k\">elif</span> weight_initializer <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>truncated<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">or</span> weight_initializer <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>truncated_uniform<span class=\"pl-pds\">\"</span></span>:\n      <span class=\"pl-k\">if</span> complex_weights: \n        real_w <span class=\"pl-k\">=</span> tf.Variable(tf.truncated_normal([total_arg_size, output_size], <span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.1</span>), <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>complex_weight_real<span class=\"pl-pds\">\"</span></span>)\n        imag_w <span class=\"pl-k\">=</span> tf.Variable(tf.truncated_normal([total_arg_size, output_size], <span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.1</span>), <span class=\"pl-v\">name</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>complex_weight_imag<span class=\"pl-pds\">\"</span></span>)\n        matrix <span class=\"pl-k\">=</span> tf.complex(real_w, imag_w)</pre></div>", "body_text": "Reporting back to @ibab  -- I tried tf.complex(var,var) and unfortunately it produced the same error as above. I looked at your crossed out message and I am running this on a titan x -- so this could be the problem. Here's my weight matrix code:\n  with tf.variable_scope(scope or \"Enhanced_Linear\"):\n  #this will make a class for these variables so you can reference them in the future. \n\n    '''initialize weight matrix properly'''\n    if weight_initializer == \"uniform_unit\":\n      matrix = tf.get_variable(\"Uniform_Matrix\", [total_arg_size, output_size], initializer = tf.uniform_unit_scaling_initializer()) \n    elif weight_initializer == \"truncated\" or weight_initializer == \"truncated_uniform\":\n      if complex_weights: \n        real_w = tf.Variable(tf.truncated_normal([total_arg_size, output_size], stddev=0.1), name = \"complex_weight_real\")\n        imag_w = tf.Variable(tf.truncated_normal([total_arg_size, output_size], stddev=0.1), name = \"complex_weight_imag\")\n        matrix = tf.complex(real_w, imag_w)", "body": "Reporting back to @ibab  -- I tried `tf.complex(var,var)` and unfortunately it produced the same error as above. I looked at your crossed out message and I am running this on a titan x -- so this could be the problem. Here's my weight matrix code:\n\n``` python\n  with tf.variable_scope(scope or \"Enhanced_Linear\"):\n  #this will make a class for these variables so you can reference them in the future. \n\n    '''initialize weight matrix properly'''\n    if weight_initializer == \"uniform_unit\":\n      matrix = tf.get_variable(\"Uniform_Matrix\", [total_arg_size, output_size], initializer = tf.uniform_unit_scaling_initializer()) \n    elif weight_initializer == \"truncated\" or weight_initializer == \"truncated_uniform\":\n      if complex_weights: \n        real_w = tf.Variable(tf.truncated_normal([total_arg_size, output_size], stddev=0.1), name = \"complex_weight_real\")\n        imag_w = tf.Variable(tf.truncated_normal([total_arg_size, output_size], stddev=0.1), name = \"complex_weight_imag\")\n        matrix = tf.complex(real_w, imag_w)\n```\n"}