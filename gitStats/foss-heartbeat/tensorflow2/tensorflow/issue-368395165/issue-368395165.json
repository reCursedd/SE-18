{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22850", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22850/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22850/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22850/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22850", "id": 368395165, "node_id": "MDU6SXNzdWUzNjgzOTUxNjU=", "number": 22850, "title": "Tensorflow 1.11 breaks simple keras estimator: global step does not increment", "user": {"login": "vijaykyr", "id": 17679104, "node_id": "MDQ6VXNlcjE3Njc5MTA0", "avatar_url": "https://avatars1.githubusercontent.com/u/17679104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vijaykyr", "html_url": "https://github.com/vijaykyr", "followers_url": "https://api.github.com/users/vijaykyr/followers", "following_url": "https://api.github.com/users/vijaykyr/following{/other_user}", "gists_url": "https://api.github.com/users/vijaykyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/vijaykyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vijaykyr/subscriptions", "organizations_url": "https://api.github.com/users/vijaykyr/orgs", "repos_url": "https://api.github.com/users/vijaykyr/repos", "events_url": "https://api.github.com/users/vijaykyr/events{/privacy}", "received_events_url": "https://api.github.com/users/vijaykyr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1052194238, "node_id": "MDU6TGFiZWwxMDUyMTk0MjM4", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/release", "name": "release", "color": "3d7fb5", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "karmel", "id": 667809, "node_id": "MDQ6VXNlcjY2NzgwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/667809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karmel", "html_url": "https://github.com/karmel", "followers_url": "https://api.github.com/users/karmel/followers", "following_url": "https://api.github.com/users/karmel/following{/other_user}", "gists_url": "https://api.github.com/users/karmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/karmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karmel/subscriptions", "organizations_url": "https://api.github.com/users/karmel/orgs", "repos_url": "https://api.github.com/users/karmel/repos", "events_url": "https://api.github.com/users/karmel/events{/privacy}", "received_events_url": "https://api.github.com/users/karmel/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "karmel", "id": 667809, "node_id": "MDQ6VXNlcjY2NzgwOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/667809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karmel", "html_url": "https://github.com/karmel", "followers_url": "https://api.github.com/users/karmel/followers", "following_url": "https://api.github.com/users/karmel/following{/other_user}", "gists_url": "https://api.github.com/users/karmel/gists{/gist_id}", "starred_url": "https://api.github.com/users/karmel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karmel/subscriptions", "organizations_url": "https://api.github.com/users/karmel/orgs", "repos_url": "https://api.github.com/users/karmel/repos", "events_url": "https://api.github.com/users/karmel/events{/privacy}", "received_events_url": "https://api.github.com/users/karmel/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-10-09T20:58:31Z", "updated_at": "2018-11-01T16:58:13Z", "closed_at": "2018-11-01T16:58:13Z", "author_association": "NONE", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: running on colab.sandbox.google.com</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.11</li>\n<li><strong>Python version</strong>: 3.6</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>The below code illustrates a minimal keras model that is then converted to an estimator using tf.keras.estimator.model_to_estimator() and and run using tf.estimator.train_and_evaluate().</p>\n<p>The code runs properly up until Tensorflow 1.10, however upon upgrading to Tensorflow 1.11 the global step fails to increment, resulting in training never ending.</p>\n<p>You can reproduce by the running the below code on colab.sandbox.google.com, observe it doesn't increment. Then downgrade to 1.10 and observe it works as expected.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> shutil\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-c1\">print</span>(tf.<span class=\"pl-c1\">__version__</span>)\n\n<span class=\"pl-k\">from</span> tensorflow <span class=\"pl-k\">import</span> keras\n<span class=\"pl-k\">from</span> tensorflow.python.keras.layers <span class=\"pl-k\">import</span> Dense\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>Hyperparameters</span>\nunits<span class=\"pl-k\">=</span><span class=\"pl-c1\">64</span>\nnum_classes<span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>\nbatch_size<span class=\"pl-k\">=</span><span class=\"pl-c1\">128</span>\nmodel_dir<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>model_files<span class=\"pl-pds\">'</span></span>\n\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>## 1. Generate Data</span>\ndata <span class=\"pl-k\">=</span> np.random.random((<span class=\"pl-c1\">1000</span>, <span class=\"pl-c1\">100</span>))\nlabels <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-c1\">3</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1000</span>, <span class=\"pl-c1\">1</span>))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>## 2. Input Function</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">input_fn</span>(<span class=\"pl-smi\">features</span>, <span class=\"pl-smi\">labels</span>, <span class=\"pl-smi\">batch_size</span>, <span class=\"pl-smi\">mode</span>):\n    dataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensor_slices((features, labels))\n      \n    <span class=\"pl-k\">if</span> mode <span class=\"pl-k\">==</span> tf.estimator.ModeKeys.<span class=\"pl-c1\">TRAIN</span>:\n      dataset <span class=\"pl-k\">=</span> dataset.repeat()\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Shuffle, repeat, and batch the examples.</span>\n    <span class=\"pl-k\">return</span> dataset.batch(batch_size)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>## 3. Model Code</span>\nmodel <span class=\"pl-k\">=</span> keras.models.Sequential()\nmodel.add(Dense(<span class=\"pl-v\">units</span><span class=\"pl-k\">=</span>units, <span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">100</span>,), <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>,))\nmodel.add(Dense(<span class=\"pl-v\">units</span><span class=\"pl-k\">=</span>num_classes, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>softmax<span class=\"pl-pds\">'</span></span>))\nmodel.compile(<span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>adam<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>sparse_categorical_crossentropy<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">metrics</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>accuracy<span class=\"pl-pds\">'</span></span>])\n\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>## 4. Estimator Code</span>\nshutil.rmtree(model_dir, <span class=\"pl-v\">ignore_errors</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> start fresh each time</span>\nestimator <span class=\"pl-k\">=</span> tf.keras.estimator.model_to_estimator(<span class=\"pl-v\">keras_model</span><span class=\"pl-k\">=</span>model, <span class=\"pl-v\">model_dir</span><span class=\"pl-k\">=</span>model_dir)\n\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Create TrainSpec</span>\ntrain_spec <span class=\"pl-k\">=</span> tf.estimator.TrainSpec(\n    <span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span>: input_fn(\n        data,\n        labels,\n        batch_size,\n        <span class=\"pl-v\">mode</span><span class=\"pl-k\">=</span>tf.estimator.ModeKeys.<span class=\"pl-c1\">TRAIN</span>),\n    <span class=\"pl-v\">max_steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">100</span>\n)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Create EvalSpec</span>\neval_spec <span class=\"pl-k\">=</span> tf.estimator.EvalSpec(\n    <span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span>: input_fn(\n        data,\n        labels,\n        batch_size,\n        <span class=\"pl-v\">mode</span><span class=\"pl-k\">=</span>tf.estimator.ModeKeys.<span class=\"pl-c1\">EVAL</span>),\n    <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>\n)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Start training</span>\ntf.estimator.train_and_evaluate(estimator, train_spec, eval_spec)</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): running on colab.sandbox.google.com\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.11\nPython version: 3.6\n\nDescribe the problem\nThe below code illustrates a minimal keras model that is then converted to an estimator using tf.keras.estimator.model_to_estimator() and and run using tf.estimator.train_and_evaluate().\nThe code runs properly up until Tensorflow 1.10, however upon upgrading to Tensorflow 1.11 the global step fails to increment, resulting in training never ending.\nYou can reproduce by the running the below code on colab.sandbox.google.com, observe it doesn't increment. Then downgrade to 1.10 and observe it works as expected.\nSource code / logs\nimport shutil\nimport numpy as np\nimport tensorflow as tf\nprint(tf.__version__)\n\nfrom tensorflow import keras\nfrom tensorflow.python.keras.layers import Dense\n\n#Hyperparameters\nunits=64\nnum_classes=3\nbatch_size=128\nmodel_dir='model_files'\n\n\n### 1. Generate Data\ndata = np.random.random((1000, 100))\nlabels = np.random.randint(3, size=(1000, 1))\n\n### 2. Input Function\ndef input_fn(features, labels, batch_size, mode):\n    dataset = tf.data.Dataset.from_tensor_slices((features, labels))\n      \n    if mode == tf.estimator.ModeKeys.TRAIN:\n      dataset = dataset.repeat()\n\n    # Shuffle, repeat, and batch the examples.\n    return dataset.batch(batch_size)\n\n### 3. Model Code\nmodel = keras.models.Sequential()\nmodel.add(Dense(units=units, input_shape=(100,), activation='relu',))\nmodel.add(Dense(units=num_classes, activation='softmax'))\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\n\n### 4. Estimator Code\nshutil.rmtree(model_dir, ignore_errors=True) # start fresh each time\nestimator = tf.keras.estimator.model_to_estimator(keras_model=model, model_dir=model_dir)\n\n\n# Create TrainSpec\ntrain_spec = tf.estimator.TrainSpec(\n    input_fn=lambda: input_fn(\n        data,\n        labels,\n        batch_size,\n        mode=tf.estimator.ModeKeys.TRAIN),\n    max_steps=100\n)\n\n# Create EvalSpec\neval_spec = tf.estimator.EvalSpec(\n    input_fn=lambda: input_fn(\n        data,\n        labels,\n        batch_size,\n        mode=tf.estimator.ModeKeys.EVAL),\n    steps=None\n)\n\n# Start training\ntf.estimator.train_and_evaluate(estimator, train_spec, eval_spec)", "body": "\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: running on colab.sandbox.google.com\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.11\r\n- **Python version**: 3.6\r\n\r\n### Describe the problem\r\n\r\nThe below code illustrates a minimal keras model that is then converted to an estimator using tf.keras.estimator.model_to_estimator() and and run using tf.estimator.train_and_evaluate().\r\n\r\nThe code runs properly up until Tensorflow 1.10, however upon upgrading to Tensorflow 1.11 the global step fails to increment, resulting in training never ending. \r\n\r\nYou can reproduce by the running the below code on colab.sandbox.google.com, observe it doesn't increment. Then downgrade to 1.10 and observe it works as expected.\r\n\r\n### Source code / logs\r\n\r\n```python\r\nimport shutil\r\nimport numpy as np\r\nimport tensorflow as tf\r\nprint(tf.__version__)\r\n\r\nfrom tensorflow import keras\r\nfrom tensorflow.python.keras.layers import Dense\r\n\r\n#Hyperparameters\r\nunits=64\r\nnum_classes=3\r\nbatch_size=128\r\nmodel_dir='model_files'\r\n\r\n\r\n### 1. Generate Data\r\ndata = np.random.random((1000, 100))\r\nlabels = np.random.randint(3, size=(1000, 1))\r\n\r\n### 2. Input Function\r\ndef input_fn(features, labels, batch_size, mode):\r\n    dataset = tf.data.Dataset.from_tensor_slices((features, labels))\r\n      \r\n    if mode == tf.estimator.ModeKeys.TRAIN:\r\n      dataset = dataset.repeat()\r\n\r\n    # Shuffle, repeat, and batch the examples.\r\n    return dataset.batch(batch_size)\r\n\r\n### 3. Model Code\r\nmodel = keras.models.Sequential()\r\nmodel.add(Dense(units=units, input_shape=(100,), activation='relu',))\r\nmodel.add(Dense(units=num_classes, activation='softmax'))\r\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\r\n\r\n\r\n### 4. Estimator Code\r\nshutil.rmtree(model_dir, ignore_errors=True) # start fresh each time\r\nestimator = tf.keras.estimator.model_to_estimator(keras_model=model, model_dir=model_dir)\r\n\r\n\r\n# Create TrainSpec\r\ntrain_spec = tf.estimator.TrainSpec(\r\n    input_fn=lambda: input_fn(\r\n        data,\r\n        labels,\r\n        batch_size,\r\n        mode=tf.estimator.ModeKeys.TRAIN),\r\n    max_steps=100\r\n)\r\n\r\n# Create EvalSpec\r\neval_spec = tf.estimator.EvalSpec(\r\n    input_fn=lambda: input_fn(\r\n        data,\r\n        labels,\r\n        batch_size,\r\n        mode=tf.estimator.ModeKeys.EVAL),\r\n    steps=None\r\n)\r\n\r\n# Start training\r\ntf.estimator.train_and_evaluate(estimator, train_spec, eval_spec)\r\n```"}