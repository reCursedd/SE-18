{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/288605272", "html_url": "https://github.com/tensorflow/tensorflow/issues/8571#issuecomment-288605272", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8571", "id": 288605272, "node_id": "MDEyOklzc3VlQ29tbWVudDI4ODYwNTI3Mg==", "user": {"login": "zakizhou", "id": 19201532, "node_id": "MDQ6VXNlcjE5MjAxNTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/19201532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zakizhou", "html_url": "https://github.com/zakizhou", "followers_url": "https://api.github.com/users/zakizhou/followers", "following_url": "https://api.github.com/users/zakizhou/following{/other_user}", "gists_url": "https://api.github.com/users/zakizhou/gists{/gist_id}", "starred_url": "https://api.github.com/users/zakizhou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zakizhou/subscriptions", "organizations_url": "https://api.github.com/users/zakizhou/orgs", "repos_url": "https://api.github.com/users/zakizhou/repos", "events_url": "https://api.github.com/users/zakizhou/events{/privacy}", "received_events_url": "https://api.github.com/users/zakizhou/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-23T03:11:51Z", "updated_at": "2017-03-23T03:11:51Z", "author_association": "NONE", "body_html": "<pre><code>import tensorflow as tf\nfrom tensorflow.contrib.rnn import core_rnn_cell\nclass Option(object):\n    def __init__(self, filename, batch_size):\n        self.sequences, self.labels, self.sequence_lengths = produce_input(filename=filename, batch_size=batch_size)\n        self.vocab_size = 90000\n        self.embedding_size = 500\n        self.hidden_units = 56\n        self.num_classes = 2\n\n\n\noption = Option('train', 72)\nembedding = tf.get_variable(name='embedding',\n                            shape=[option.vocab_size, option.embedding_size],\n                            initializer=tf.truncated_normal_initializer(stddev=0.05),\n                            dtype=tf.float32)\nlookup = tf.nn.embedding_lookup(embedding, option.sequences)\nlstm_cell = core_rnn_cell.BasicLSTMCell(num_units=option.hidden_units, state_is_tuple=True)\noutput, state = tf.nn.dynamic_rnn(cell=lstm_cell,\n                                  inputs=lookup,\n                                  sequence_length=option.sequence_lengths,\n                                  dtype=tf.float32)\noutput\nOut[6]: \n&lt;tf.Tensor 'rnn/transpose:0' shape=(72, ?, 56) dtype=float32&gt;\nlookup\nOut[7]: \n&lt;tf.Tensor 'embedding_lookup:0' shape=(72, ?, 500) dtype=float32&gt;\nstate\nOut[8]: \nLSTMStateTuple(c=&lt;tf.Tensor 'rnn/while/Exit_2:0' shape=(?, 56) dtype=float32&gt;, h=&lt;tf.Tensor 'rnn/while/Exit_3:0' shape=(?, 56) dtype=float32&gt;)\n\n</code></pre>", "body_text": "import tensorflow as tf\nfrom tensorflow.contrib.rnn import core_rnn_cell\nclass Option(object):\n    def __init__(self, filename, batch_size):\n        self.sequences, self.labels, self.sequence_lengths = produce_input(filename=filename, batch_size=batch_size)\n        self.vocab_size = 90000\n        self.embedding_size = 500\n        self.hidden_units = 56\n        self.num_classes = 2\n\n\n\noption = Option('train', 72)\nembedding = tf.get_variable(name='embedding',\n                            shape=[option.vocab_size, option.embedding_size],\n                            initializer=tf.truncated_normal_initializer(stddev=0.05),\n                            dtype=tf.float32)\nlookup = tf.nn.embedding_lookup(embedding, option.sequences)\nlstm_cell = core_rnn_cell.BasicLSTMCell(num_units=option.hidden_units, state_is_tuple=True)\noutput, state = tf.nn.dynamic_rnn(cell=lstm_cell,\n                                  inputs=lookup,\n                                  sequence_length=option.sequence_lengths,\n                                  dtype=tf.float32)\noutput\nOut[6]: \n<tf.Tensor 'rnn/transpose:0' shape=(72, ?, 56) dtype=float32>\nlookup\nOut[7]: \n<tf.Tensor 'embedding_lookup:0' shape=(72, ?, 500) dtype=float32>\nstate\nOut[8]: \nLSTMStateTuple(c=<tf.Tensor 'rnn/while/Exit_2:0' shape=(?, 56) dtype=float32>, h=<tf.Tensor 'rnn/while/Exit_3:0' shape=(?, 56) dtype=float32>)", "body": "```\r\nimport tensorflow as tf\r\nfrom tensorflow.contrib.rnn import core_rnn_cell\r\nclass Option(object):\r\n    def __init__(self, filename, batch_size):\r\n        self.sequences, self.labels, self.sequence_lengths = produce_input(filename=filename, batch_size=batch_size)\r\n        self.vocab_size = 90000\r\n        self.embedding_size = 500\r\n        self.hidden_units = 56\r\n        self.num_classes = 2\r\n\r\n\r\n\r\noption = Option('train', 72)\r\nembedding = tf.get_variable(name='embedding',\r\n                            shape=[option.vocab_size, option.embedding_size],\r\n                            initializer=tf.truncated_normal_initializer(stddev=0.05),\r\n                            dtype=tf.float32)\r\nlookup = tf.nn.embedding_lookup(embedding, option.sequences)\r\nlstm_cell = core_rnn_cell.BasicLSTMCell(num_units=option.hidden_units, state_is_tuple=True)\r\noutput, state = tf.nn.dynamic_rnn(cell=lstm_cell,\r\n                                  inputs=lookup,\r\n                                  sequence_length=option.sequence_lengths,\r\n                                  dtype=tf.float32)\r\noutput\r\nOut[6]: \r\n<tf.Tensor 'rnn/transpose:0' shape=(72, ?, 56) dtype=float32>\r\nlookup\r\nOut[7]: \r\n<tf.Tensor 'embedding_lookup:0' shape=(72, ?, 500) dtype=float32>\r\nstate\r\nOut[8]: \r\nLSTMStateTuple(c=<tf.Tensor 'rnn/while/Exit_2:0' shape=(?, 56) dtype=float32>, h=<tf.Tensor 'rnn/while/Exit_3:0' shape=(?, 56) dtype=float32>)\r\n\r\n```"}