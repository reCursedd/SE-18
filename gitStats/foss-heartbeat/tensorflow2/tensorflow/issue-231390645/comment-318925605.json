{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/318925605", "html_url": "https://github.com/tensorflow/tensorflow/issues/10196#issuecomment-318925605", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10196", "id": 318925605, "node_id": "MDEyOklzc3VlQ29tbWVudDMxODkyNTYwNQ==", "user": {"login": "woodshop", "id": 4654379, "node_id": "MDQ6VXNlcjQ2NTQzNzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4654379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woodshop", "html_url": "https://github.com/woodshop", "followers_url": "https://api.github.com/users/woodshop/followers", "following_url": "https://api.github.com/users/woodshop/following{/other_user}", "gists_url": "https://api.github.com/users/woodshop/gists{/gist_id}", "starred_url": "https://api.github.com/users/woodshop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woodshop/subscriptions", "organizations_url": "https://api.github.com/users/woodshop/orgs", "repos_url": "https://api.github.com/users/woodshop/repos", "events_url": "https://api.github.com/users/woodshop/events{/privacy}", "received_events_url": "https://api.github.com/users/woodshop/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-30T20:00:41Z", "updated_at": "2017-07-30T20:00:41Z", "author_association": "NONE", "body_html": "<p>This issue appears to be the same as <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"191232312\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/5804\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/5804/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/5804\">#5804</a>, which has been open for a while now. Perhaps it's low-priority for the developers.</p>\n<p>However, I suggest that <code>ffmpeg.decode_audio</code> is not always a great solution for reading audio files, especially in large numbers. As you point out, decode_audio relies on the external ffmpeg library. In addition, for each audio file, it induces an additional disk write and read because it creates a temporary file during decoding. (According to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"191232312\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/5804\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/5804/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/5804\">#5804</a>, the naming of these files is part of the multithreading problem.) For many thousands of audio files, that's a lot of disk IO.</p>\n<p>Instead, perhaps preprocess your audio files offline by decoding them (with ffmpeg or any other tool) and saving them into TFRecords. Decoded audio files can be encapsulated in <code>tf.train.SequenceExample</code> instances. Use the <code>SerializeToString</code> method to save a <code>SequenceExample</code> to a <code>TFRecord</code> using a <code>tf.python_io.TFRecordWriter</code> instance. Use a <code>tf.TFRecordReader</code> instance to read examples from the record and <code>tf.parse_single_sequence_example</code> to parse the examples.</p>", "body_text": "This issue appears to be the same as #5804, which has been open for a while now. Perhaps it's low-priority for the developers.\nHowever, I suggest that ffmpeg.decode_audio is not always a great solution for reading audio files, especially in large numbers. As you point out, decode_audio relies on the external ffmpeg library. In addition, for each audio file, it induces an additional disk write and read because it creates a temporary file during decoding. (According to #5804, the naming of these files is part of the multithreading problem.) For many thousands of audio files, that's a lot of disk IO.\nInstead, perhaps preprocess your audio files offline by decoding them (with ffmpeg or any other tool) and saving them into TFRecords. Decoded audio files can be encapsulated in tf.train.SequenceExample instances. Use the SerializeToString method to save a SequenceExample to a TFRecord using a tf.python_io.TFRecordWriter instance. Use a tf.TFRecordReader instance to read examples from the record and tf.parse_single_sequence_example to parse the examples.", "body": "This issue appears to be the same as #5804, which has been open for a while now. Perhaps it's low-priority for the developers. \r\n\r\nHowever, I suggest that `ffmpeg.decode_audio` is not always a great solution for reading audio files, especially in large numbers. As you point out, decode_audio relies on the external ffmpeg library. In addition, for each audio file, it induces an additional disk write and read because it creates a temporary file during decoding. (According to #5804, the naming of these files is part of the multithreading problem.) For many thousands of audio files, that's a lot of disk IO. \r\n\r\nInstead, perhaps preprocess your audio files offline by decoding them (with ffmpeg or any other tool) and saving them into TFRecords. Decoded audio files can be encapsulated in `tf.train.SequenceExample` instances. Use the `SerializeToString` method to save a `SequenceExample` to a `TFRecord` using a `tf.python_io.TFRecordWriter` instance. Use a `tf.TFRecordReader` instance to read examples from the record and `tf.parse_single_sequence_example` to parse the examples."}