{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/219047149", "html_url": "https://github.com/tensorflow/tensorflow/issues/2318#issuecomment-219047149", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2318", "id": 219047149, "node_id": "MDEyOklzc3VlQ29tbWVudDIxOTA0NzE0OQ==", "user": {"login": "rdadolf", "id": 6673605, "node_id": "MDQ6VXNlcjY2NzM2MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6673605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdadolf", "html_url": "https://github.com/rdadolf", "followers_url": "https://api.github.com/users/rdadolf/followers", "following_url": "https://api.github.com/users/rdadolf/following{/other_user}", "gists_url": "https://api.github.com/users/rdadolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdadolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdadolf/subscriptions", "organizations_url": "https://api.github.com/users/rdadolf/orgs", "repos_url": "https://api.github.com/users/rdadolf/repos", "events_url": "https://api.github.com/users/rdadolf/events{/privacy}", "received_events_url": "https://api.github.com/users/rdadolf/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-13T13:45:50Z", "updated_at": "2016-05-13T13:45:50Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>I am in total agreement with you, but I think \"numpy array likes\" are a well defined duck type -- they're anything that implements the <code>__array__</code> method.</p>\n<p>Importantly, I do not propose to test this by seeing if coercing something to an array with np.array works. NumPy is far too willing to convert anything into 0d object arrays, though I think most NumPy devs agree that this is a bad idea.</p>\n</blockquote>\n<p>This seems convincing. It avoids ambiguity by explicitly foisting the decisions on the  <code>__array__</code> method author, which is a plus.</p>\n<p>I probably should have directed my emoji-flavored vitriol elsewhere. Or perhaps, you know, actually taken the time to write a coherent response.</p>\n<blockquote>\n<p>On a related note, whatever choice we make here for coercing arrays in tf.constant should also hold for values put into feed_dict for Session.run.</p>\n</blockquote>\n<p>This doesn't seem compatible with session's <a href=\"https://github.com/tensorflow/tensorflow/blob/4a4f2461533847dde239851ecebe5056088a828c/tensorflow/python/client/session.py#L223\">existing method</a>, which is apparently distinct (?) from the one used for <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/ops.py#L690\">normal conversion</a>, which is also incompatible. Both use direct type comparisons, not duck-typing checks. It seems like both locations would need to change. Maybe <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> has already dealt with this.</p>", "body_text": "I am in total agreement with you, but I think \"numpy array likes\" are a well defined duck type -- they're anything that implements the __array__ method.\nImportantly, I do not propose to test this by seeing if coercing something to an array with np.array works. NumPy is far too willing to convert anything into 0d object arrays, though I think most NumPy devs agree that this is a bad idea.\n\nThis seems convincing. It avoids ambiguity by explicitly foisting the decisions on the  __array__ method author, which is a plus.\nI probably should have directed my emoji-flavored vitriol elsewhere. Or perhaps, you know, actually taken the time to write a coherent response.\n\nOn a related note, whatever choice we make here for coercing arrays in tf.constant should also hold for values put into feed_dict for Session.run.\n\nThis doesn't seem compatible with session's existing method, which is apparently distinct (?) from the one used for normal conversion, which is also incompatible. Both use direct type comparisons, not duck-typing checks. It seems like both locations would need to change. Maybe @mrry has already dealt with this.", "body": "> I am in total agreement with you, but I think \"numpy array likes\" are a well defined duck type -- they're anything that implements the `__array__` method.\n> \n> Importantly, I do not propose to test this by seeing if coercing something to an array with np.array works. NumPy is far too willing to convert anything into 0d object arrays, though I think most NumPy devs agree that this is a bad idea.\n\nThis seems convincing. It avoids ambiguity by explicitly foisting the decisions on the  `__array__` method author, which is a plus.\n\nI probably should have directed my emoji-flavored vitriol elsewhere. Or perhaps, you know, actually taken the time to write a coherent response.\n\n> On a related note, whatever choice we make here for coercing arrays in tf.constant should also hold for values put into feed_dict for Session.run.\n\nThis doesn't seem compatible with session's [existing method](https://github.com/tensorflow/tensorflow/blob/4a4f2461533847dde239851ecebe5056088a828c/tensorflow/python/client/session.py#L223), which is apparently distinct (?) from the one used for [normal conversion](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/framework/ops.py#L690), which is also incompatible. Both use direct type comparisons, not duck-typing checks. It seems like both locations would need to change. Maybe @mrry has already dealt with this.\n"}