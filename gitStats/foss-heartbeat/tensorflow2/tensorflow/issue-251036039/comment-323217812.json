{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/323217812", "html_url": "https://github.com/tensorflow/tensorflow/issues/12367#issuecomment-323217812", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12367", "id": 323217812, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMzIxNzgxMg==", "user": {"login": "Ouwen", "id": 5455421, "node_id": "MDQ6VXNlcjU0NTU0MjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5455421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ouwen", "html_url": "https://github.com/Ouwen", "followers_url": "https://api.github.com/users/Ouwen/followers", "following_url": "https://api.github.com/users/Ouwen/following{/other_user}", "gists_url": "https://api.github.com/users/Ouwen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ouwen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ouwen/subscriptions", "organizations_url": "https://api.github.com/users/Ouwen/orgs", "repos_url": "https://api.github.com/users/Ouwen/repos", "events_url": "https://api.github.com/users/Ouwen/events{/privacy}", "received_events_url": "https://api.github.com/users/Ouwen/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-17T23:07:45Z", "updated_at": "2017-08-17T23:07:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Correct me if I'm wrong, the generic signature you are referring to seems to be the <code>PredictOutput</code> class</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/2133b83376a3439924a0bb9bac7b4a8b716a6fc0/tensorflow/python/estimator/export/export_output.py#L153-L159\">tensorflow/tensorflow/python/estimator/export/export_output.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 153 to 159\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/2133b83376a3439924a0bb9bac7b4a8b716a6fc0\">2133b83</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L153\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"153\"></td>\n          <td id=\"LC153\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">class</span> <span class=\"pl-en\">PredictOutput</span>(<span class=\"pl-e\">ExportOutput</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L154\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"154\"></td>\n          <td id=\"LC154\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Represents the output of a generic prediction head.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L155\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"155\"></td>\n          <td id=\"LC155\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-s\"></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L156\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"156\"></td>\n          <td id=\"LC156\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-s\">  A generic prediction need not be either a classification or a regression.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L157\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"157\"></td>\n          <td id=\"LC157\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-s\"></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L158\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"158\"></td>\n          <td id=\"LC158\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-s\">  Named outputs must be provided as a dict from string to `Tensor`,</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L159\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"159\"></td>\n          <td id=\"LC159\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-s\">  <span class=\"pl-pds\">\"\"\"</span></span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>However, for the canned estimator model it is using a head which doesn't include the <code>PredictOutput</code> class as an export output.</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/2133b83376a3439924a0bb9bac7b4a8b716a6fc0/tensorflow/python/estimator/canned/head.py#L661-L673\">tensorflow/tensorflow/python/estimator/canned/head.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 661 to 673\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/2133b83376a3439924a0bb9bac7b4a8b716a6fc0\">2133b83</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L661\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"661\"></td>\n          <td id=\"LC661\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> classifier_output <span class=\"pl-k\">=</span> export_output.ClassificationOutput( </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L662\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"662\"></td>\n          <td id=\"LC662\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-v\">scores</span><span class=\"pl-k\">=</span>scores, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L663\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"663\"></td>\n          <td id=\"LC663\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c\"><span class=\"pl-c\">#</span> `ClassificationOutput` requires string classes.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L664\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"664\"></td>\n          <td id=\"LC664\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-v\">classes</span><span class=\"pl-k\">=</span>export_output_classes) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L665\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"665\"></td>\n          <td id=\"LC665\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">return</span> model_fn.EstimatorSpec( </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L666\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"666\"></td>\n          <td id=\"LC666\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-v\">mode</span><span class=\"pl-k\">=</span>model_fn.ModeKeys.<span class=\"pl-c1\">PREDICT</span>, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L667\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"667\"></td>\n          <td id=\"LC667\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-v\">predictions</span><span class=\"pl-k\">=</span>predictions, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L668\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"668\"></td>\n          <td id=\"LC668\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-v\">export_outputs</span><span class=\"pl-k\">=</span>{ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L669\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"669\"></td>\n          <td id=\"LC669\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>: classifier_output,  <span class=\"pl-c\"><span class=\"pl-c\">#</span> to be same as other heads.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L670\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"670\"></td>\n          <td id=\"LC670\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-s\"><span class=\"pl-pds\">'</span>classification<span class=\"pl-pds\">'</span></span>: classifier_output,  <span class=\"pl-c\"><span class=\"pl-c\">#</span> to be called by name.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L671\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"671\"></td>\n          <td id=\"LC671\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-c1\">_DEFAULT_SERVING_KEY</span>: classifier_output,  <span class=\"pl-c\"><span class=\"pl-c\">#</span> default</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L672\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"672\"></td>\n          <td id=\"LC672\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-s\"><span class=\"pl-pds\">'</span>regression<span class=\"pl-pds\">'</span></span>: export_output.RegressionOutput(<span class=\"pl-v\">value</span><span class=\"pl-k\">=</span>logistic) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L673\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"673\"></td>\n          <td id=\"LC673\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     }) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>Is there a clean way for the inputs to a <code>SavedModel</code> estimator model to be multiple tensors as opposed to 1 serialized string tensor?</p>", "body_text": "Correct me if I'm wrong, the generic signature you are referring to seems to be the PredictOutput class\n\n  \n    \n      tensorflow/tensorflow/python/estimator/export/export_output.py\n    \n    \n        Lines 153 to 159\n      in\n      2133b83\n    \n    \n    \n    \n\n        \n          \n           class PredictOutput(ExportOutput): \n        \n\n        \n          \n             \"\"\"Represents the output of a generic prediction head. \n        \n\n        \n          \n            \n        \n\n        \n          \n             A generic prediction need not be either a classification or a regression. \n        \n\n        \n          \n            \n        \n\n        \n          \n             Named outputs must be provided as a dict from string to `Tensor`, \n        \n\n        \n          \n             \"\"\" \n        \n    \n  \n\n\nHowever, for the canned estimator model it is using a head which doesn't include the PredictOutput class as an export output.\n\n  \n    \n      tensorflow/tensorflow/python/estimator/canned/head.py\n    \n    \n        Lines 661 to 673\n      in\n      2133b83\n    \n    \n    \n    \n\n        \n          \n           classifier_output = export_output.ClassificationOutput( \n        \n\n        \n          \n               scores=scores, \n        \n\n        \n          \n               # `ClassificationOutput` requires string classes. \n        \n\n        \n          \n               classes=export_output_classes) \n        \n\n        \n          \n           return model_fn.EstimatorSpec( \n        \n\n        \n          \n               mode=model_fn.ModeKeys.PREDICT, \n        \n\n        \n          \n               predictions=predictions, \n        \n\n        \n          \n               export_outputs={ \n        \n\n        \n          \n                   '': classifier_output,  # to be same as other heads. \n        \n\n        \n          \n                   'classification': classifier_output,  # to be called by name. \n        \n\n        \n          \n                   _DEFAULT_SERVING_KEY: classifier_output,  # default \n        \n\n        \n          \n                   'regression': export_output.RegressionOutput(value=logistic) \n        \n\n        \n          \n               }) \n        \n    \n  \n\n\nIs there a clean way for the inputs to a SavedModel estimator model to be multiple tensors as opposed to 1 serialized string tensor?", "body": "Correct me if I'm wrong, the generic signature you are referring to seems to be the `PredictOutput` class\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/2133b83376a3439924a0bb9bac7b4a8b716a6fc0/tensorflow/python/estimator/export/export_output.py#L153-L159\r\n\r\nHowever, for the canned estimator model it is using a head which doesn't include the `PredictOutput` class as an export output.\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/2133b83376a3439924a0bb9bac7b4a8b716a6fc0/tensorflow/python/estimator/canned/head.py#L661-L673\r\n\r\nIs there a clean way for the inputs to a `SavedModel` estimator model to be multiple tensors as opposed to 1 serialized string tensor?"}