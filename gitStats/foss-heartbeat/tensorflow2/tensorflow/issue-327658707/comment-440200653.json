{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/440200653", "html_url": "https://github.com/tensorflow/tensorflow/issues/19643#issuecomment-440200653", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19643", "id": 440200653, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDIwMDY1Mw==", "user": {"login": "jchia", "id": 446676, "node_id": "MDQ6VXNlcjQ0NjY3Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/446676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jchia", "html_url": "https://github.com/jchia", "followers_url": "https://api.github.com/users/jchia/followers", "following_url": "https://api.github.com/users/jchia/following{/other_user}", "gists_url": "https://api.github.com/users/jchia/gists{/gist_id}", "starred_url": "https://api.github.com/users/jchia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jchia/subscriptions", "organizations_url": "https://api.github.com/users/jchia/orgs", "repos_url": "https://api.github.com/users/jchia/repos", "events_url": "https://api.github.com/users/jchia/events{/privacy}", "received_events_url": "https://api.github.com/users/jchia/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-20T09:19:24Z", "updated_at": "2018-11-20T09:19:58Z", "author_association": "NONE", "body_html": "<blockquote>\n<p>You can retrieve the updates created by your BatchNormalization layer via:</p>\n<div class=\"highlight highlight-source-python\"><pre>updates <span class=\"pl-k\">=</span> layer.updates</pre></div>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=710255\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fchollet\">@fchollet</a> Design philosophy aside, I'm not sure how this works. Under 1.12, the following code prints the empty list for the first <code>print</code> and raises an <code>AttributeError</code> on the second print, because a <code>Tensor</code> does not have an <code>updates</code> attribute. According to your prescribed approach, I should be getting a non-empty list of update ops from <code>bn.updates</code>. How's it supposed to work? How should the code be modified?</p>\n<pre><code>#!/usr/bin/env python3\n\nimport tensorflow as tf\nimport tensorflow.keras.layers as kl\n\ndef main():\n    g = tf.Graph()\n    with g.as_default():\n        layer = tf.placeholder(name='x', shape=(4, 4), dtype=tf.float32)\n        bn = kl.BatchNormalization()\n        print(bn.updates)\n        layer = bn(layer, training=True)\n        print(layer.updates)\n\nmain()\n</code></pre>", "body_text": "You can retrieve the updates created by your BatchNormalization layer via:\nupdates = layer.updates\n\n@fchollet Design philosophy aside, I'm not sure how this works. Under 1.12, the following code prints the empty list for the first print and raises an AttributeError on the second print, because a Tensor does not have an updates attribute. According to your prescribed approach, I should be getting a non-empty list of update ops from bn.updates. How's it supposed to work? How should the code be modified?\n#!/usr/bin/env python3\n\nimport tensorflow as tf\nimport tensorflow.keras.layers as kl\n\ndef main():\n    g = tf.Graph()\n    with g.as_default():\n        layer = tf.placeholder(name='x', shape=(4, 4), dtype=tf.float32)\n        bn = kl.BatchNormalization()\n        print(bn.updates)\n        layer = bn(layer, training=True)\n        print(layer.updates)\n\nmain()", "body": "> You can retrieve the updates created by your BatchNormalization layer via:\r\n> \r\n> ```python\r\n> updates = layer.updates\r\n> ```\r\n\r\n@fchollet Design philosophy aside, I'm not sure how this works. Under 1.12, the following code prints the empty list for the first `print` and raises an `AttributeError` on the second print, because a `Tensor` does not have an `updates` attribute. According to your prescribed approach, I should be getting a non-empty list of update ops from `bn.updates`. How's it supposed to work? How should the code be modified?\r\n\r\n```\r\n#!/usr/bin/env python3\r\n\r\nimport tensorflow as tf\r\nimport tensorflow.keras.layers as kl\r\n\r\ndef main():\r\n    g = tf.Graph()\r\n    with g.as_default():\r\n        layer = tf.placeholder(name='x', shape=(4, 4), dtype=tf.float32)\r\n        bn = kl.BatchNormalization()\r\n        print(bn.updates)\r\n        layer = bn(layer, training=True)\r\n        print(layer.updates)\r\n\r\nmain()\r\n```"}