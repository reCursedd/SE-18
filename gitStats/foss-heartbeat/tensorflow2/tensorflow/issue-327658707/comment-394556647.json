{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/394556647", "html_url": "https://github.com/tensorflow/tensorflow/issues/19643#issuecomment-394556647", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19643", "id": 394556647, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDU1NjY0Nw==", "user": {"login": "jackd", "id": 659115, "node_id": "MDQ6VXNlcjY1OTExNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/659115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackd", "html_url": "https://github.com/jackd", "followers_url": "https://api.github.com/users/jackd/followers", "following_url": "https://api.github.com/users/jackd/following{/other_user}", "gists_url": "https://api.github.com/users/jackd/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackd/subscriptions", "organizations_url": "https://api.github.com/users/jackd/orgs", "repos_url": "https://api.github.com/users/jackd/repos", "events_url": "https://api.github.com/users/jackd/events{/privacy}", "received_events_url": "https://api.github.com/users/jackd/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-05T02:03:09Z", "updated_at": "2018-06-05T02:03:09Z", "author_association": "NONE", "body_html": "<p>... ... ... you're obviously entitled to make design choices such as this, but for what it's worth: I think this is a terrible decision. I'm no fan of the <code>collections</code> system used by tensorflow, but changing it in this subpackage is:</p>\n<ul>\n<li>inconsistent with the rest of tensorflow;</li>\n<li>inconsistent with previous <code>tf.keras</code> versions - even within 1.8.0; and</li>\n<li>inconsistent with other usages of collections by <code>tf.keras.layers</code> (see code below)</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nx <span class=\"pl-k\">=</span> tf.zeros(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\ny <span class=\"pl-k\">=</span> tf.keras.layers.Dense(<span class=\"pl-c1\">4</span>)(x)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>variables: <span class=\"pl-c1\">%d</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-c1\">len</span>(tf.get_collection(tf.GraphKeys.<span class=\"pl-c1\">GLOBAL_VARIABLES</span>)))</pre></div>\n<p>I can appreciate as a separate package it may be convenient to force people to do things only 'the keras way', and I'd be less opposed if this issue was in the main keras repository. However, keras exists within tensorflow as well as external to it, so I'd expect it to follow its conventions. This change is breaking for anyone who uses non-keras session management (e.g. estimators) - myself included. I'd love to be able to mix and match tensorflow and keras - mostly to use other people's code, and take advantage of the excellent <code>tf.keras.applications</code> - but decisions like this make me more and more inclined to purge any reference to it, since there seems to be no guarantee about forward compatibility.</p>", "body_text": "... ... ... you're obviously entitled to make design choices such as this, but for what it's worth: I think this is a terrible decision. I'm no fan of the collections system used by tensorflow, but changing it in this subpackage is:\n\ninconsistent with the rest of tensorflow;\ninconsistent with previous tf.keras versions - even within 1.8.0; and\ninconsistent with other usages of collections by tf.keras.layers (see code below)\n\nimport tensorflow as tf\nx = tf.zeros(shape=(2, 3), dtype=tf.float32)\ny = tf.keras.layers.Dense(4)(x)\nprint('variables: %d' % len(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)))\nI can appreciate as a separate package it may be convenient to force people to do things only 'the keras way', and I'd be less opposed if this issue was in the main keras repository. However, keras exists within tensorflow as well as external to it, so I'd expect it to follow its conventions. This change is breaking for anyone who uses non-keras session management (e.g. estimators) - myself included. I'd love to be able to mix and match tensorflow and keras - mostly to use other people's code, and take advantage of the excellent tf.keras.applications - but decisions like this make me more and more inclined to purge any reference to it, since there seems to be no guarantee about forward compatibility.", "body": "... ... ... you're obviously entitled to make design choices such as this, but for what it's worth: I think this is a terrible decision. I'm no fan of the `collections` system used by tensorflow, but changing it in this subpackage is:\r\n* inconsistent with the rest of tensorflow;\r\n* inconsistent with previous `tf.keras` versions - even within 1.8.0; and\r\n* inconsistent with other usages of collections by `tf.keras.layers` (see code below)\r\n```python\r\nimport tensorflow as tf\r\nx = tf.zeros(shape=(2, 3), dtype=tf.float32)\r\ny = tf.keras.layers.Dense(4)(x)\r\nprint('variables: %d' % len(tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)))\r\n```\r\n\r\nI can appreciate as a separate package it may be convenient to force people to do things only 'the keras way', and I'd be less opposed if this issue was in the main keras repository. However, keras exists within tensorflow as well as external to it, so I'd expect it to follow its conventions. This change is breaking for anyone who uses non-keras session management (e.g. estimators) - myself included. I'd love to be able to mix and match tensorflow and keras - mostly to use other people's code, and take advantage of the excellent `tf.keras.applications` - but decisions like this make me more and more inclined to purge any reference to it, since there seems to be no guarantee about forward compatibility."}