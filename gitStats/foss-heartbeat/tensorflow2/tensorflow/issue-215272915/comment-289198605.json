{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/289198605", "html_url": "https://github.com/tensorflow/tensorflow/pull/8534#issuecomment-289198605", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8534", "id": 289198605, "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTE5ODYwNQ==", "user": {"login": "snnn", "id": 856316, "node_id": "MDQ6VXNlcjg1NjMxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/856316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snnn", "html_url": "https://github.com/snnn", "followers_url": "https://api.github.com/users/snnn/followers", "following_url": "https://api.github.com/users/snnn/following{/other_user}", "gists_url": "https://api.github.com/users/snnn/gists{/gist_id}", "starred_url": "https://api.github.com/users/snnn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snnn/subscriptions", "organizations_url": "https://api.github.com/users/snnn/orgs", "repos_url": "https://api.github.com/users/snnn/repos", "events_url": "https://api.github.com/users/snnn/events{/privacy}", "received_events_url": "https://api.github.com/users/snnn/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-25T08:46:34Z", "updated_at": "2017-03-25T08:46:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>input data: A text file in libsvm format, 10906667862 bytes, 164540416 lines, with CRLF line terminators</p>\n<p>test code 1:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>mutex<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>Windows.h<span class=\"pl-pds\">&gt;</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">&lt;</span>stdio.h<span class=\"pl-pds\">&gt;</span></span>\n\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/platform/env.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/lib/core/errors.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/lib/io/inputbuffer.h<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-k\">using</span> <span class=\"pl-k\">namespace</span> <span class=\"pl-en\">tensorflow</span><span class=\"pl-k\">;</span>\n\n<span class=\"pl-k\">int</span> <span class=\"pl-en\">test1</span>(<span class=\"pl-k\">const</span> <span class=\"pl-k\">char</span>* filename) {\n\tLARGE_INTEGER li;\n\t<span class=\"pl-c1\">QueryPerformanceFrequency</span>(&amp;li);\n\tEnv* env = <span class=\"pl-c1\">Env::Default</span>();\n\tstd::unique_ptr&lt;RandomAccessFile&gt; file_;\n\t<span class=\"pl-k\">const</span> ::tensorflow::Status status = env-&gt;<span class=\"pl-c1\">NewRandomAccessFile</span>(filename, &amp;file_);\n\t<span class=\"pl-k\">if</span> (!status.<span class=\"pl-c1\">ok</span>()) {\n\t\t<span class=\"pl-k\">return</span> -<span class=\"pl-c1\">1</span>;\n\t}\n\tLARGE_INTEGER startTime, endTime;\n\t<span class=\"pl-k\">int</span> <span class=\"pl-c1\">kBufferSize</span> = <span class=\"pl-c1\">2</span> * <span class=\"pl-c1\">1024</span> * <span class=\"pl-c1\">1024</span>;\n\tio::InputBuffer* input_buffer = <span class=\"pl-k\">new</span> <span class=\"pl-c1\">io::InputBuffer</span>(file_.<span class=\"pl-c1\">get</span>(), <span class=\"pl-c1\">kBufferSize</span>);\n\t<span class=\"pl-c1\">QueryPerformanceCounter</span>(&amp;startTime);\n\tstring line_contents;\n\t<span class=\"pl-k\">while</span> (<span class=\"pl-c1\">true</span>) {\n\t\tStatus status = input_buffer-&gt;<span class=\"pl-c1\">ReadLine</span>(&amp;line_contents);\n\t\t<span class=\"pl-k\">if</span> (<span class=\"pl-c1\">errors::IsOutOfRange</span>(status)) {\n\t\t\t<span class=\"pl-k\">break</span>;\n\t\t}\n\t\t<span class=\"pl-k\">if</span> (!status.<span class=\"pl-c1\">ok</span>()) {\n\t\t\t<span class=\"pl-k\">return</span> -<span class=\"pl-c1\">1</span>;\n\t\t}\n\t}\n\t<span class=\"pl-c1\">QueryPerformanceCounter</span>(&amp;endTime);\n\t<span class=\"pl-k\">const</span> <span class=\"pl-k\">double</span> seconds = ((endTime.<span class=\"pl-smi\">QuadPart</span> - startTime.<span class=\"pl-smi\">QuadPart</span>) / (<span class=\"pl-k\">double</span>)li.<span class=\"pl-smi\">QuadPart</span>);\n\t<span class=\"pl-c1\">printf</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dur = %g<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>, seconds);\n\t<span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;\n}</pre></div>\n<p>test code 2:<br>\nAlmost the same as test code 1, with only one line change:</p>\n<pre><code>while (true) {\n    string line_contents;  // this line is moved from the line before \"while(true)\"\n    Status status = input_buffer-&gt;ReadLine(&amp;line_contents);\n}\n</code></pre>\n<p>Result:</p>\n<table>\n<thead>\n<tr>\n<td>\u00a0</td>\n<td>Before</td>\n<td>After</td>\n<td>Changes</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>test1</td>\n<td>67 seconds</td>\n<td>26 seconds</td>\n<td> - 61%</td>\n</tr>\n<tr>\n<td>test2(cache line_contents)</td>\n<td>34 seconds</td>\n<td>19 seconds</td>\n<td> - 44%</td>\n</tr>\n</tbody>\n</table>", "body_text": "input data: A text file in libsvm format, 10906667862 bytes, 164540416 lines, with CRLF line terminators\ntest code 1:\n#include <mutex>\n#include <Windows.h>\n#include <stdio.h>\n\n#include \"tensorflow/core/platform/env.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/io/inputbuffer.h\"\nusing namespace tensorflow;\n\nint test1(const char* filename) {\n\tLARGE_INTEGER li;\n\tQueryPerformanceFrequency(&li);\n\tEnv* env = Env::Default();\n\tstd::unique_ptr<RandomAccessFile> file_;\n\tconst ::tensorflow::Status status = env->NewRandomAccessFile(filename, &file_);\n\tif (!status.ok()) {\n\t\treturn -1;\n\t}\n\tLARGE_INTEGER startTime, endTime;\n\tint kBufferSize = 2 * 1024 * 1024;\n\tio::InputBuffer* input_buffer = new io::InputBuffer(file_.get(), kBufferSize);\n\tQueryPerformanceCounter(&startTime);\n\tstring line_contents;\n\twhile (true) {\n\t\tStatus status = input_buffer->ReadLine(&line_contents);\n\t\tif (errors::IsOutOfRange(status)) {\n\t\t\tbreak;\n\t\t}\n\t\tif (!status.ok()) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\tQueryPerformanceCounter(&endTime);\n\tconst double seconds = ((endTime.QuadPart - startTime.QuadPart) / (double)li.QuadPart);\n\tprintf(\"dur = %g\\n\", seconds);\n\treturn 0;\n}\ntest code 2:\nAlmost the same as test code 1, with only one line change:\nwhile (true) {\n    string line_contents;  // this line is moved from the line before \"while(true)\"\n    Status status = input_buffer->ReadLine(&line_contents);\n}\n\nResult:\n\n\n\n\u00a0\nBefore\nAfter\nChanges\n\n\n\n\ntest1\n67 seconds\n26 seconds\n - 61%\n\n\ntest2(cache line_contents)\n34 seconds\n19 seconds\n - 44%", "body": "input data: A text file in libsvm format, 10906667862 bytes, 164540416 lines, with CRLF line terminators\r\n\r\ntest code 1:\r\n```cpp\r\n#include <mutex>\r\n#include <Windows.h>\r\n#include <stdio.h>\r\n\r\n#include \"tensorflow/core/platform/env.h\"\r\n#include \"tensorflow/core/lib/core/errors.h\"\r\n#include \"tensorflow/core/lib/io/inputbuffer.h\"\r\nusing namespace tensorflow;\r\n\r\nint test1(const char* filename) {\r\n\tLARGE_INTEGER li;\r\n\tQueryPerformanceFrequency(&li);\r\n\tEnv* env = Env::Default();\r\n\tstd::unique_ptr<RandomAccessFile> file_;\r\n\tconst ::tensorflow::Status status = env->NewRandomAccessFile(filename, &file_);\r\n\tif (!status.ok()) {\r\n\t\treturn -1;\r\n\t}\r\n\tLARGE_INTEGER startTime, endTime;\r\n\tint kBufferSize = 2 * 1024 * 1024;\r\n\tio::InputBuffer* input_buffer = new io::InputBuffer(file_.get(), kBufferSize);\r\n\tQueryPerformanceCounter(&startTime);\r\n\tstring line_contents;\r\n\twhile (true) {\r\n\t\tStatus status = input_buffer->ReadLine(&line_contents);\r\n\t\tif (errors::IsOutOfRange(status)) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tif (!status.ok()) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\tQueryPerformanceCounter(&endTime);\r\n\tconst double seconds = ((endTime.QuadPart - startTime.QuadPart) / (double)li.QuadPart);\r\n\tprintf(\"dur = %g\\n\", seconds);\r\n\treturn 0;\r\n}\r\n```\r\ntest code 2:\r\nAlmost the same as test code 1, with only one line change:\r\n```\r\nwhile (true) {\r\n    string line_contents;  // this line is moved from the line before \"while(true)\"\r\n    Status status = input_buffer->ReadLine(&line_contents);\r\n}\r\n```\r\nResult:\r\n\r\n<table>\r\n<thead>\r\n<tr>\r\n<td>&nbsp;</td>\r\n<td>Before</td>\r\n<td>After</td>\r\n<td>Changes</td>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>test1</td>\r\n<td>67 seconds</td>\r\n<td>26 seconds</td>\r\n<td> - 61%</td>\r\n</tr>\r\n<tr>\r\n<td>test2(cache line_contents)</td>\r\n<td>34 seconds</td>\r\n<td>19 seconds</td>\r\n<td> - 44%</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n"}