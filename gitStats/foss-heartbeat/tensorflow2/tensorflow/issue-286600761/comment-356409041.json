{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/356409041", "html_url": "https://github.com/tensorflow/tensorflow/issues/15933#issuecomment-356409041", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15933", "id": 356409041, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjQwOTA0MQ==", "user": {"login": "Gemesys", "id": 16905336, "node_id": "MDQ6VXNlcjE2OTA1MzM2", "avatar_url": "https://avatars1.githubusercontent.com/u/16905336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gemesys", "html_url": "https://github.com/Gemesys", "followers_url": "https://api.github.com/users/Gemesys/followers", "following_url": "https://api.github.com/users/Gemesys/following{/other_user}", "gists_url": "https://api.github.com/users/Gemesys/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gemesys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gemesys/subscriptions", "organizations_url": "https://api.github.com/users/Gemesys/orgs", "repos_url": "https://api.github.com/users/Gemesys/repos", "events_url": "https://api.github.com/users/Gemesys/events{/privacy}", "received_events_url": "https://api.github.com/users/Gemesys/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-09T20:47:11Z", "updated_at": "2018-01-09T20:47:11Z", "author_association": "NONE", "body_html": "<p>Thank you, quaeler, for posting your results.   This is really useful.  I was starting to think that there must be a problem in my Linux installation, because the MacOS version basically blows up to almost a white screen by interation 3000.  I've been investigating various examples of 32-bit overflow bugs and problems in various Python packages, looking at anywhere TensorFlow or Python is producing different results on different platforms, and there are a few.</p>\n<p>One that I found was a production server versus a development environment giving completely different results, which turned out to be a bug in a library called \"bottleneck\", used in the \"pandas\" data tool for Python.  There is a Stackoverflow note on that issue: <a href=\"https://stackoverflow.com/questions/43525492/unexpected-32-bit-integer-overflow-in-pandas-numpy-int64-python-3-6?noredirect=1&amp;lq=1\" rel=\"nofollow\">https://stackoverflow.com/questions/43525492/unexpected-32-bit-integer-overflow-in-pandas-numpy-int64-python-3-6?noredirect=1&amp;lq=1</a></p>\n<p>I am wondering if some of the speed-up code from \"bottleneck\" made it into TensorFlow, with the 32-bit overflow bug included, in one of the versions.  Possible?</p>\n<p>Here are the results of just the first three images, .ie the initial image (supposed to be stars), and the generated image at iteration 1000, and at iteration 2000, after which I interrupted the program. I changed the laplace damping value from a positive number in the TensorFlow example of \"raindrops on a pond\" to a negative value  to simulate accretion... stars forming instead of raindrops falling.</p>\n<p>You can see, the Macbook version evolves completely differently, with the generated values all going to positive numbers, while the Linux version evolves to what you are also seeing, a tensor of positive and negative values, which creates an interesting pattern.  I basically have the same issue the fellow in the \"integer-overflow-in-pandas-numpy\" had, two machines with identical software and basically the same architecture that <em>should</em> behave the same, but clearly do not.  Something is amiss.</p>\n<p>I've checked that the defaults in the two Python's seem to be the same, all the packages are the same, and have just updated Pillow to 5.0.0 on both machines, with no change in observed behaviour.  I will try to reduce this issue to a simple case where one of the machines is producing an obviously wrong result.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/16905336/34741796-dc34be28-f551-11e7-816e-ddda7b18ed9b.jpg\"><img src=\"https://user-images.githubusercontent.com/16905336/34741796-dc34be28-f551-11e7-816e-ddda7b18ed9b.jpg\" alt=\"linux_img_20180109_152259_sml\" style=\"max-width:100%;\"></a><br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/16905336/34741802-e2d0e946-f551-11e7-9a73-b1f65c98d98b.jpg\"><img src=\"https://user-images.githubusercontent.com/16905336/34741802-e2d0e946-f551-11e7-9a73-b1f65c98d98b.jpg\" alt=\"mac_img_20180109_152340_sml\" style=\"max-width:100%;\"></a></p>", "body_text": "Thank you, quaeler, for posting your results.   This is really useful.  I was starting to think that there must be a problem in my Linux installation, because the MacOS version basically blows up to almost a white screen by interation 3000.  I've been investigating various examples of 32-bit overflow bugs and problems in various Python packages, looking at anywhere TensorFlow or Python is producing different results on different platforms, and there are a few.\nOne that I found was a production server versus a development environment giving completely different results, which turned out to be a bug in a library called \"bottleneck\", used in the \"pandas\" data tool for Python.  There is a Stackoverflow note on that issue: https://stackoverflow.com/questions/43525492/unexpected-32-bit-integer-overflow-in-pandas-numpy-int64-python-3-6?noredirect=1&lq=1\nI am wondering if some of the speed-up code from \"bottleneck\" made it into TensorFlow, with the 32-bit overflow bug included, in one of the versions.  Possible?\nHere are the results of just the first three images, .ie the initial image (supposed to be stars), and the generated image at iteration 1000, and at iteration 2000, after which I interrupted the program. I changed the laplace damping value from a positive number in the TensorFlow example of \"raindrops on a pond\" to a negative value  to simulate accretion... stars forming instead of raindrops falling.\nYou can see, the Macbook version evolves completely differently, with the generated values all going to positive numbers, while the Linux version evolves to what you are also seeing, a tensor of positive and negative values, which creates an interesting pattern.  I basically have the same issue the fellow in the \"integer-overflow-in-pandas-numpy\" had, two machines with identical software and basically the same architecture that should behave the same, but clearly do not.  Something is amiss.\nI've checked that the defaults in the two Python's seem to be the same, all the packages are the same, and have just updated Pillow to 5.0.0 on both machines, with no change in observed behaviour.  I will try to reduce this issue to a simple case where one of the machines is producing an obviously wrong result.", "body": "Thank you, quaeler, for posting your results.   This is really useful.  I was starting to think that there must be a problem in my Linux installation, because the MacOS version basically blows up to almost a white screen by interation 3000.  I've been investigating various examples of 32-bit overflow bugs and problems in various Python packages, looking at anywhere TensorFlow or Python is producing different results on different platforms, and there are a few.  \r\n\r\nOne that I found was a production server versus a development environment giving completely different results, which turned out to be a bug in a library called \"bottleneck\", used in the \"pandas\" data tool for Python.  There is a Stackoverflow note on that issue: https://stackoverflow.com/questions/43525492/unexpected-32-bit-integer-overflow-in-pandas-numpy-int64-python-3-6?noredirect=1&lq=1   \r\n\r\nI am wondering if some of the speed-up code from \"bottleneck\" made it into TensorFlow, with the 32-bit overflow bug included, in one of the versions.  Possible?\r\n\r\nHere are the results of just the first three images, .ie the initial image (supposed to be stars), and the generated image at iteration 1000, and at iteration 2000, after which I interrupted the program. I changed the laplace damping value from a positive number in the TensorFlow example of \"raindrops on a pond\" to a negative value  to simulate accretion... stars forming instead of raindrops falling.\r\n\r\nYou can see, the Macbook version evolves completely differently, with the generated values all going to positive numbers, while the Linux version evolves to what you are also seeing, a tensor of positive and negative values, which creates an interesting pattern.  I basically have the same issue the fellow in the \"integer-overflow-in-pandas-numpy\" had, two machines with identical software and basically the same architecture that *should* behave the same, but clearly do not.  Something is amiss.\r\n\r\nI've checked that the defaults in the two Python's seem to be the same, all the packages are the same, and have just updated Pillow to 5.0.0 on both machines, with no change in observed behaviour.  I will try to reduce this issue to a simple case where one of the machines is producing an obviously wrong result. \r\n\r\n![linux_img_20180109_152259_sml](https://user-images.githubusercontent.com/16905336/34741796-dc34be28-f551-11e7-816e-ddda7b18ed9b.jpg)\r\n![mac_img_20180109_152340_sml](https://user-images.githubusercontent.com/16905336/34741802-e2d0e946-f551-11e7-9a73-b1f65c98d98b.jpg)\r\n"}