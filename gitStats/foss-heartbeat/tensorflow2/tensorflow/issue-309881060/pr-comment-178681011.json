{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/178681011", "pull_request_review_id": 108777459, "id": 178681011, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODY4MTAxMQ==", "diff_hunk": "@@ -0,0 +1,74 @@\n+load(\"@io_bazel_rules_go//go:def.bzl\", \"go_library\", \"go_test\")\n+\n+licenses([\"notice\"])  # Apache 2.0\n+\n+exports_files([\"LICENSE\"])\n+\n+sh_test(\n+    name = \"test\",\n+    size = \"small\",\n+    srcs = [\"test.sh\"],\n+    data = [\n+        \":all_files\",  # Go sources\n+        \"//tensorflow:libtensorflow.so\",  # C library\n+        \"//tensorflow/c:headers\",  # C library header\n+        \"//tensorflow/cc/saved_model:saved_model_half_plus_two\",  # Testdata for LoadSavedModel\n+    ],\n+)\n+\n+filegroup(\n+    name = \"all_files\",\n+    srcs = glob(\n+        [\"**/*\"],\n+        exclude = [\n+            \"**/METADATA\",\n+            \"**/OWNERS\",\n+        ],\n+    ),\n+    visibility = [\"//tensorflow:__subpackages__\"],\n+)\n+\n+go_library(\n+    name = \"go_default_library\",\n+    srcs = [\n+        \"doc.go\",\n+        \"graph.go\",\n+        \"lib.go\",\n+        \"operation.go\",\n+        \"saved_model.go\",\n+        \"session.go\",\n+        \"shape.go\",\n+        \"status.go\",\n+        \"tensor.go\",\n+        \"version.go\",\n+        \"//tensorflow/c:headers\",  # C library header\n+    ],\n+    cgo = True,\n+    clinkopts = [\"-L/usr/local/lib -ltensorflow\"],", "path": "tensorflow/go/BUILD.bazel", "position": null, "original_position": 47, "commit_id": "c67a92aa1fd354d4e3a428159bdbe38d8dc8093e", "original_commit_id": "b7190b44a63da4b8024bdb2d195411fd729ccc4e", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "body": "I know it's possible to `import cgo` and have source code comments that schlep in pkg-config. So could it do something like this?\r\n\r\n```sh\r\nTF_CFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_compile_flags()))') )\r\nTF_LFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_link_flags()))') )\r\ng++ -std=c++11 -shared zero_out.cc -o zero_out.so -fPIC ${TF_CFLAGS[@]} ${TF_LFLAGS[@]} -O2\r\n```\r\n\r\n*Note: copied from https://www.tensorflow.org/extend/adding_an_op*\r\n\r\nOut of curiosity, why have the go bindings in the TensorFlow repository, if it TensorFlow comes from the system? Hosting the code in this repo, it might make more sense to statically link TensorFlow. Or possibly have libframework.so etc. specified as `data = [...]` and then you can reference them when `bazel run`.", "created_at": "2018-04-02T23:52:13Z", "updated_at": "2018-09-11T07:22:28Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/18100#discussion_r178681011", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18100", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/178681011"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/18100#discussion_r178681011"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18100"}}, "body_html": "<p>I know it's possible to <code>import cgo</code> and have source code comments that schlep in pkg-config. So could it do something like this?</p>\n<div class=\"highlight highlight-source-shell\"><pre>TF_CFLAGS=( <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>python -c <span class=\"pl-s\"><span class=\"pl-pds\">'</span>import tensorflow as tf; print(\" \".join(tf.sysconfig.get_compile_flags()))<span class=\"pl-pds\">'</span></span><span class=\"pl-pds\">)</span></span> )\nTF_LFLAGS=( <span class=\"pl-s\"><span class=\"pl-pds\">$(</span>python -c <span class=\"pl-s\"><span class=\"pl-pds\">'</span>import tensorflow as tf; print(\" \".join(tf.sysconfig.get_link_flags()))<span class=\"pl-pds\">'</span></span><span class=\"pl-pds\">)</span></span> )\ng++ -std=c++11 -shared zero_out.cc -o zero_out.so -fPIC <span class=\"pl-smi\">${TF_CFLAGS[@]}</span> <span class=\"pl-smi\">${TF_LFLAGS[@]}</span> -O2</pre></div>\n<p><em>Note: copied from <a href=\"https://www.tensorflow.org/extend/adding_an_op\" rel=\"nofollow\">https://www.tensorflow.org/extend/adding_an_op</a></em></p>\n<p>Out of curiosity, why have the go bindings in the TensorFlow repository, if it TensorFlow comes from the system? Hosting the code in this repo, it might make more sense to statically link TensorFlow. Or possibly have libframework.so etc. specified as <code>data = [...]</code> and then you can reference them when <code>bazel run</code>.</p>", "body_text": "I know it's possible to import cgo and have source code comments that schlep in pkg-config. So could it do something like this?\nTF_CFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_compile_flags()))') )\nTF_LFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_link_flags()))') )\ng++ -std=c++11 -shared zero_out.cc -o zero_out.so -fPIC ${TF_CFLAGS[@]} ${TF_LFLAGS[@]} -O2\nNote: copied from https://www.tensorflow.org/extend/adding_an_op\nOut of curiosity, why have the go bindings in the TensorFlow repository, if it TensorFlow comes from the system? Hosting the code in this repo, it might make more sense to statically link TensorFlow. Or possibly have libframework.so etc. specified as data = [...] and then you can reference them when bazel run.", "in_reply_to_id": 178164979}