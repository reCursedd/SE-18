{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/390075659", "html_url": "https://github.com/tensorflow/tensorflow/issues/19279#issuecomment-390075659", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19279", "id": 390075659, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDA3NTY1OQ==", "user": {"login": "Craigacp", "id": 729696, "node_id": "MDQ6VXNlcjcyOTY5Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/729696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Craigacp", "html_url": "https://github.com/Craigacp", "followers_url": "https://api.github.com/users/Craigacp/followers", "following_url": "https://api.github.com/users/Craigacp/following{/other_user}", "gists_url": "https://api.github.com/users/Craigacp/gists{/gist_id}", "starred_url": "https://api.github.com/users/Craigacp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Craigacp/subscriptions", "organizations_url": "https://api.github.com/users/Craigacp/orgs", "repos_url": "https://api.github.com/users/Craigacp/repos", "events_url": "https://api.github.com/users/Craigacp/events{/privacy}", "received_events_url": "https://api.github.com/users/Craigacp/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-18T02:28:47Z", "updated_at": "2018-05-18T02:33:36Z", "author_association": "NONE", "body_html": "<p>It's a feature request. I updated the original post with the missing question from the issue template.</p>\n<p>I'm proposing to add a new Saver which behaves differently to the rest, as the other savers all require a filesystem. The new saver would add a save node which emits a tensor wrapping a byte array describing the graph, and a restore node which accepts a tensor wrapping a byte array. The formats can be the same as the proprietary internal format the current Savers use, as I don't care what the actual data is, I just need to be able to read and write it from something other than a filesystem.</p>\n<p>I'd like to discuss whether such a patch would be accepted, and any considerations that need to be worked in wrt oddities in the current file based format. I'm happy to implement it, but given serialisation is very low level I thought it worth discussing to see if it's a sensible approach first.</p>", "body_text": "It's a feature request. I updated the original post with the missing question from the issue template.\nI'm proposing to add a new Saver which behaves differently to the rest, as the other savers all require a filesystem. The new saver would add a save node which emits a tensor wrapping a byte array describing the graph, and a restore node which accepts a tensor wrapping a byte array. The formats can be the same as the proprietary internal format the current Savers use, as I don't care what the actual data is, I just need to be able to read and write it from something other than a filesystem.\nI'd like to discuss whether such a patch would be accepted, and any considerations that need to be worked in wrt oddities in the current file based format. I'm happy to implement it, but given serialisation is very low level I thought it worth discussing to see if it's a sensible approach first.", "body": "It's a feature request. I updated the original post with the missing question from the issue template.\r\n\r\nI'm proposing to add a new Saver which behaves differently to the rest, as the other savers all require a filesystem. The new saver would add a save node which emits a tensor wrapping a byte array describing the graph, and a restore node which accepts a tensor wrapping a byte array. The formats can be the same as the proprietary internal format the current Savers use, as I don't care what the actual data is, I just need to be able to read and write it from something other than a filesystem.\r\n\r\nI'd like to discuss whether such a patch would be accepted, and any considerations that need to be worked in wrt oddities in the current file based format. I'm happy to implement it, but given serialisation is very low level I thought it worth discussing to see if it's a sensible approach first."}