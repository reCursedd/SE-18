{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/317598405", "html_url": "https://github.com/tensorflow/tensorflow/issues/11696#issuecomment-317598405", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11696", "id": 317598405, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzU5ODQwNQ==", "user": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-25T01:06:57Z", "updated_at": "2017-07-25T01:06:57Z", "author_association": "MEMBER", "body_html": "<p>This is somewhat expected behavior, and it is not unique to tf.Print()</p>\n<pre><code>a = tf.constant([[1,2],[3,4],[5,6],[7,8]])\npartitions = tf.dynamic_partition(a,range(a.shape[0]),a.shape[0])\n</code></pre>\n<p>This is a property tf.convert_to_tensor() i.e.</p>\n<pre><code>&gt;&gt;&gt; tf.convert_to_tensor([tf.constant([1,2]), tf.constant([3,4])])\n&lt;tf.Tensor 'packed:0' shape=(2, 2) dtype=int32&gt;\n&gt;&gt;&gt; sess.run(tf.convert_to_tensor([tf.constant([1,2]), tf.constant([3,4])]))\narray([[1, 2],\n       [3, 4]], dtype=int32)\n</code></pre>\n<p>The point is that if you think of tensors of the same shape embedded as lists as being a generalized form of plain python lists it makes sense to convert them into a unified tensor if possible.</p>\n<p>i.e.</p>\n<pre><code>tf.convert_to_tensor([tf.constant(1), tf.constant(2)]) == tf.constant([1,2])\n</code></pre>\n<p>however this is an error</p>\n<pre><code>tf.convert_to_tensor([tf.constant(1), tf.constant([2,3])]) == tf.constant([1,2])\n</code></pre>\n<p>So in essence this is expected behavior. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a>, anythign else to add?</p>", "body_text": "This is somewhat expected behavior, and it is not unique to tf.Print()\na = tf.constant([[1,2],[3,4],[5,6],[7,8]])\npartitions = tf.dynamic_partition(a,range(a.shape[0]),a.shape[0])\n\nThis is a property tf.convert_to_tensor() i.e.\n>>> tf.convert_to_tensor([tf.constant([1,2]), tf.constant([3,4])])\n<tf.Tensor 'packed:0' shape=(2, 2) dtype=int32>\n>>> sess.run(tf.convert_to_tensor([tf.constant([1,2]), tf.constant([3,4])]))\narray([[1, 2],\n       [3, 4]], dtype=int32)\n\nThe point is that if you think of tensors of the same shape embedded as lists as being a generalized form of plain python lists it makes sense to convert them into a unified tensor if possible.\ni.e.\ntf.convert_to_tensor([tf.constant(1), tf.constant(2)]) == tf.constant([1,2])\n\nhowever this is an error\ntf.convert_to_tensor([tf.constant(1), tf.constant([2,3])]) == tf.constant([1,2])\n\nSo in essence this is expected behavior. @ebrevdo, anythign else to add?", "body": "This is somewhat expected behavior, and it is not unique to tf.Print()\r\n```\r\na = tf.constant([[1,2],[3,4],[5,6],[7,8]])\r\npartitions = tf.dynamic_partition(a,range(a.shape[0]),a.shape[0])\r\n```\r\nThis is a property tf.convert_to_tensor() i.e.\r\n```\r\n>>> tf.convert_to_tensor([tf.constant([1,2]), tf.constant([3,4])])\r\n<tf.Tensor 'packed:0' shape=(2, 2) dtype=int32>\r\n>>> sess.run(tf.convert_to_tensor([tf.constant([1,2]), tf.constant([3,4])]))\r\narray([[1, 2],\r\n       [3, 4]], dtype=int32)\r\n```\r\nThe point is that if you think of tensors of the same shape embedded as lists as being a generalized form of plain python lists it makes sense to convert them into a unified tensor if possible.\r\n\r\ni.e.\r\n```\r\ntf.convert_to_tensor([tf.constant(1), tf.constant(2)]) == tf.constant([1,2])\r\n```\r\nhowever this is an error\r\n```\r\ntf.convert_to_tensor([tf.constant(1), tf.constant([2,3])]) == tf.constant([1,2])\r\n```\r\n\r\nSo in essence this is expected behavior. @ebrevdo, anythign else to add?\r\n"}