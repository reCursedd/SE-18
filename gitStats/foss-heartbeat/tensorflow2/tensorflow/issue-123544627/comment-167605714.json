{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/167605714", "html_url": "https://github.com/tensorflow/tensorflow/issues/591#issuecomment-167605714", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/591", "id": 167605714, "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzYwNTcxNA==", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "created_at": "2015-12-28T17:13:48Z", "updated_at": "2015-12-28T17:13:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=112599\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Mistobaan\">@Mistobaan</a>: Not sure what you mean by a minimal code example.  The desired behavior would be that <code>tf.Print(input, data)</code> works even if <code>data</code> contains a mix of <code>IndexedSlices</code> objects and things that can be converted to tensors, and the desired outcome would be output that looks something like</p>\n<pre><code># tf.Print(_, [xs, IndexedSlices(ys, zs)])\n... [x...] IndexedSlices([y...], [z...])\n</code></pre>\n<p>Since it would be nice if the new functionality allowed <code>Tensor</code> and <code>IndexedSlices</code> to be mixed in the same call to <code>Print</code>, the best way to implement it might be to add an optional list of extra strings to <code>Print</code>, perhaps as a \"extras: list(string) = []\" attr.  The above would then be implemented in Python as something like</p>\n<pre><code>gen_logging_ops._print(_, [xs, ys, zs], prefixes=[\"\", \"IndexedSlices(\", \", \", \")\"])\n</code></pre>\n<p>inside the Python wrapper version in <code>tf.Print</code>.</p>", "body_text": "@Mistobaan: Not sure what you mean by a minimal code example.  The desired behavior would be that tf.Print(input, data) works even if data contains a mix of IndexedSlices objects and things that can be converted to tensors, and the desired outcome would be output that looks something like\n# tf.Print(_, [xs, IndexedSlices(ys, zs)])\n... [x...] IndexedSlices([y...], [z...])\n\nSince it would be nice if the new functionality allowed Tensor and IndexedSlices to be mixed in the same call to Print, the best way to implement it might be to add an optional list of extra strings to Print, perhaps as a \"extras: list(string) = []\" attr.  The above would then be implemented in Python as something like\ngen_logging_ops._print(_, [xs, ys, zs], prefixes=[\"\", \"IndexedSlices(\", \", \", \")\"])\n\ninside the Python wrapper version in tf.Print.", "body": "@Mistobaan: Not sure what you mean by a minimal code example.  The desired behavior would be that `tf.Print(input, data)` works even if `data` contains a mix of `IndexedSlices` objects and things that can be converted to tensors, and the desired outcome would be output that looks something like\n\n```\n# tf.Print(_, [xs, IndexedSlices(ys, zs)])\n... [x...] IndexedSlices([y...], [z...])\n```\n\nSince it would be nice if the new functionality allowed `Tensor` and `IndexedSlices` to be mixed in the same call to `Print`, the best way to implement it might be to add an optional list of extra strings to `Print`, perhaps as a \"extras: list(string) = []\" attr.  The above would then be implemented in Python as something like\n\n```\ngen_logging_ops._print(_, [xs, ys, zs], prefixes=[\"\", \"IndexedSlices(\", \", \", \")\"])\n```\n\ninside the Python wrapper version in `tf.Print`.\n"}