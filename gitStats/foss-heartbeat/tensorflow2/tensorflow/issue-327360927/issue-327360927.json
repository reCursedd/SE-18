{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19626", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19626/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19626/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19626/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19626", "id": 327360927, "node_id": "MDU6SXNzdWUzMjczNjA5Mjc=", "number": 19626, "title": "FailedPreconditionError: Table already initialized when use Feature Column in Eager mode", "user": {"login": "byronyi", "id": 2613663, "node_id": "MDQ6VXNlcjI2MTM2NjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2613663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/byronyi", "html_url": "https://github.com/byronyi", "followers_url": "https://api.github.com/users/byronyi/followers", "following_url": "https://api.github.com/users/byronyi/following{/other_user}", "gists_url": "https://api.github.com/users/byronyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/byronyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/byronyi/subscriptions", "organizations_url": "https://api.github.com/users/byronyi/orgs", "repos_url": "https://api.github.com/users/byronyi/repos", "events_url": "https://api.github.com/users/byronyi/events{/privacy}", "received_events_url": "https://api.github.com/users/byronyi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 736653459, "node_id": "MDU6TGFiZWw3MzY2NTM0NTk=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:eager", "name": "comp:eager", "color": "0052cc", "default": false}, {"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-05-29T15:01:06Z", "updated_at": "2018-11-10T18:49:03Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Latest Mac OS</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.8.0</li>\n<li><strong>Python version</strong>: 3.6.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: see below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-ii\">--------------------------------------------------------------------------</span><span class=\"pl-k\">-</span>\nFailedPreconditionError                   Traceback (most recent call last)\n<span class=\"pl-k\">&lt;</span>ipython<span class=\"pl-k\">-</span><span class=\"pl-c1\">input</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span><span class=\"pl-k\">-</span><span class=\"pl-ii\">443ffe416ebf</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>()\n      <span class=\"pl-c1\">7</span> \n      <span class=\"pl-c1\">8</span> features <span class=\"pl-k\">=</span> df.to_dict(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>series<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-ii\">----</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">9</span> input_layer <span class=\"pl-k\">=</span> tf.feature_column.input_layer(features, columns)\n\n<span class=\"pl-k\">/</span>usr<span class=\"pl-k\">/</span>local<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>feature_column<span class=\"pl-k\">/</span>feature_column.py <span class=\"pl-k\">in</span> input_layer(features, feature_columns, weight_collections, trainable, cols_to_vars)\n    <span class=\"pl-c1\">275</span>   <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">    276   return _internal_input_layer(features, feature_columns, weight_collections,</span>\n<span class=\"pl-s\">--&gt; 277                                trainable, cols_to_vars)</span>\n<span class=\"pl-s\">    278 </span>\n<span class=\"pl-s\">    279 </span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _internal_input_layer(features, feature_columns, weight_collections, trainable, cols_to_vars, scope)</span>\n<span class=\"pl-s\">    200             builder,</span>\n<span class=\"pl-s\">    201             weight_collections=weight_collections,</span>\n<span class=\"pl-s\">--&gt; 202             trainable=trainable)</span>\n<span class=\"pl-s\">    203         num_elements = column._variable_shape.num_elements()  # pylint: disable=protected-access</span>\n<span class=\"pl-s\">    204         batch_size = array_ops.shape(tensor)[0]</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _get_dense_tensor(***failed resolving arguments***)</span>\n<span class=\"pl-s\">   3300     # Feature has been already transformed. Return the intermediate</span>\n<span class=\"pl-s\">   3301     # representation created by _transform_feature.</span>\n<span class=\"pl-s\">-&gt; 3302     return inputs.get(self)</span>\n<span class=\"pl-s\">   3303 </span>\n<span class=\"pl-s\">   3304   def _get_sequence_dense_tensor(</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in get(self, key)</span>\n<span class=\"pl-s\">   2098     column = key</span>\n<span class=\"pl-s\">   2099     logging.debug('Transforming feature_column <span class=\"pl-c1\">%s</span>.', column)</span>\n<span class=\"pl-s\">-&gt; 2100     transformed = column._transform_feature(self)  # pylint: disable=protected-access</span>\n<span class=\"pl-s\">   2101     if transformed is None:</span>\n<span class=\"pl-s\">   2102       raise ValueError('Column <span class=\"pl-c1\">{}</span> is not supported.'.format(column.name))</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _transform_feature(self, inputs)</span>\n<span class=\"pl-s\">   3229       ValueError: if input rank is not known at graph building time.</span>\n<span class=\"pl-s\">   3230     <span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-ii\">-&gt;</span> <span class=\"pl-c1\">3231</span>     id_weight_pair <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.categorical_column._get_sparse_tensors(inputs)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> pylint: disable=protected-access</span>\n   <span class=\"pl-c1\">3232</span>     id_tensor <span class=\"pl-k\">=</span> id_weight_pair.id_tensor\n   <span class=\"pl-c1\">3233</span>     weight_tensor <span class=\"pl-k\">=</span> id_weight_pair.weight_tensor\n\n<span class=\"pl-k\">/</span>usr<span class=\"pl-k\">/</span>local<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>feature_column<span class=\"pl-k\">/</span>feature_column.py <span class=\"pl-k\">in</span> _get_sparse_tensors(<span class=\"pl-c1\">self</span>, inputs, weight_collections, trainable)\n   <span class=\"pl-c1\">2872</span>   <span class=\"pl-k\">def</span> <span class=\"pl-en\">_get_sparse_tensors</span>(\n   2873       <span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">inputs</span>, <span class=\"pl-smi\">weight_collections</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n<span class=\"pl-ii\">-&gt;</span> <span class=\"pl-c1\">2874</span>     <span class=\"pl-k\">return</span> _CategoricalColumn.IdWeightPair(inputs.get(<span class=\"pl-c1\">self</span>), <span class=\"pl-c1\">None</span>)\n   <span class=\"pl-c1\">2875</span> \n   <span class=\"pl-c1\">2876</span> \n\n<span class=\"pl-k\">/</span>usr<span class=\"pl-k\">/</span>local<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>feature_column<span class=\"pl-k\">/</span>feature_column.py <span class=\"pl-k\">in</span> get(<span class=\"pl-c1\">self</span>, key)\n   <span class=\"pl-c1\">2098</span>     column <span class=\"pl-k\">=</span> key\n   <span class=\"pl-c1\">2099</span>     logging.debug(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Transforming feature_column <span class=\"pl-c1\">%s</span>.<span class=\"pl-pds\">'</span></span>, column)\n<span class=\"pl-ii\">-&gt;</span> <span class=\"pl-c1\">2100</span>     transformed <span class=\"pl-k\">=</span> column._transform_feature(<span class=\"pl-c1\">self</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> pylint: disable=protected-access</span>\n   <span class=\"pl-c1\">2101</span>     <span class=\"pl-k\">if</span> transformed <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n   <span class=\"pl-c1\">2102</span>       <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">ValueError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Column <span class=\"pl-c1\">{}</span> is not supported.<span class=\"pl-pds\">'</span></span>.format(column.name))\n\n<span class=\"pl-k\">/</span>usr<span class=\"pl-k\">/</span>local<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>feature_column<span class=\"pl-k\">/</span>feature_column.py <span class=\"pl-k\">in</span> _transform_feature(<span class=\"pl-c1\">self</span>, inputs)\n   <span class=\"pl-c1\">2863</span>         num_oov_buckets<span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.num_oov_buckets,\n   <span class=\"pl-c1\">2864</span>         dtype<span class=\"pl-k\">=</span>key_dtype,\n<span class=\"pl-ii\">-&gt;</span> <span class=\"pl-c1\">2865</span>         name<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">{}</span>_lookup<span class=\"pl-pds\">'</span></span>.format(<span class=\"pl-c1\">self</span>.key)).lookup(input_tensor)\n   <span class=\"pl-c1\">2866</span> \n   <span class=\"pl-c1\">2867</span>   <span class=\"pl-k\">@</span><span class=\"pl-c1\">property</span>\n\n<span class=\"pl-k\">/</span>usr<span class=\"pl-k\">/</span>local<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>ops<span class=\"pl-k\">/</span>lookup_ops.py <span class=\"pl-k\">in</span> index_table_from_tensor(vocabulary_list, num_oov_buckets, default_value, hasher_spec, dtype, name)\n   <span class=\"pl-c1\">1097</span>           name<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>table_init<span class=\"pl-pds\">\"</span></span>)\n   <span class=\"pl-c1\">1098</span>       table <span class=\"pl-k\">=</span> HashTable(\n<span class=\"pl-ii\">-&gt;</span> <span class=\"pl-c1\">1099</span>           init, default_value, <span class=\"pl-v\">shared_name</span><span class=\"pl-k\">=</span>shared_name, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>hash_table_scope)\n   <span class=\"pl-c1\">1100</span>     <span class=\"pl-k\">if</span> num_oov_buckets:\n   <span class=\"pl-c1\">1101</span>       table <span class=\"pl-k\">=</span> IdTableWithHashBuckets(\n\n<span class=\"pl-k\">/</span>usr<span class=\"pl-k\">/</span>local<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>ops<span class=\"pl-k\">/</span>lookup_ops.py <span class=\"pl-k\">in</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-c1\">self</span>, initializer, default_value, shared_name, name)\n    <span class=\"pl-c1\">277</span>           <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>scope)\n    <span class=\"pl-c1\">278</span> \n<span class=\"pl-ii\">--</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">279</span>       <span class=\"pl-c1\">super</span>(HashTable, <span class=\"pl-c1\">self</span>).<span class=\"pl-c1\">__init__</span>(table_ref, default_value, initializer)\n    <span class=\"pl-c1\">280</span> \n    <span class=\"pl-c1\">281</span> \n\n<span class=\"pl-k\">/</span>usr<span class=\"pl-k\">/</span>local<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>ops<span class=\"pl-k\">/</span>lookup_ops.py <span class=\"pl-k\">in</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-c1\">self</span>, table_ref, default_value, initializer)\n    <span class=\"pl-c1\">169</span>         default_value, dtype<span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>._value_dtype)\n    <span class=\"pl-c1\">170</span>     <span class=\"pl-c1\">self</span>._default_value.get_shape().merge_with(tensor_shape.scalar())\n<span class=\"pl-ii\">--</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">171</span>     <span class=\"pl-c1\">self</span>._init <span class=\"pl-k\">=</span> initializer.initialize(<span class=\"pl-c1\">self</span>)\n    <span class=\"pl-c1\">172</span> \n    <span class=\"pl-c1\">173</span>   <span class=\"pl-k\">@</span><span class=\"pl-c1\">property</span>\n\n<span class=\"pl-k\">/</span>usr<span class=\"pl-k\">/</span>local<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>ops<span class=\"pl-k\">/</span>lookup_ops.py <span class=\"pl-k\">in</span> initialize(<span class=\"pl-c1\">self</span>, table)\n    <span class=\"pl-c1\">348</span>                             <span class=\"pl-c1\">self</span>._values)) <span class=\"pl-k\">as</span> scope:\n    <span class=\"pl-c1\">349</span>       init_op <span class=\"pl-k\">=</span> gen_lookup_ops.initialize_table_v2(\n<span class=\"pl-ii\">--</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">350</span>           table.table_ref, <span class=\"pl-c1\">self</span>._keys, <span class=\"pl-c1\">self</span>._values, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>scope)\n    <span class=\"pl-c1\">351</span>     ops.add_to_collection(ops.GraphKeys.<span class=\"pl-c1\">TABLE_INITIALIZERS</span>, init_op)\n    <span class=\"pl-c1\">352</span>     <span class=\"pl-k\">return</span> init_op\n\n<span class=\"pl-k\">/</span>usr<span class=\"pl-k\">/</span>local<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>tensorflow<span class=\"pl-k\">/</span>python<span class=\"pl-k\">/</span>ops<span class=\"pl-k\">/</span>gen_lookup_ops.py <span class=\"pl-k\">in</span> initialize_table_v2(table_handle, keys, values, name)\n    <span class=\"pl-c1\">404</span>       <span class=\"pl-k\">else</span>:\n    <span class=\"pl-c1\">405</span>         message <span class=\"pl-k\">=</span> e.message\n<span class=\"pl-ii\">--</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">406</span>       _six.raise_from(_core._status_to_exception(e.code, message), <span class=\"pl-c1\">None</span>)\n    <span class=\"pl-c1\">407</span> \n    <span class=\"pl-c1\">408</span> \n\n<span class=\"pl-k\">/</span>usr<span class=\"pl-k\">/</span>local<span class=\"pl-k\">/</span>lib<span class=\"pl-k\">/</span>python3.6<span class=\"pl-k\">/</span>site<span class=\"pl-k\">-</span>packages<span class=\"pl-k\">/</span>six.py <span class=\"pl-k\">in</span> raise_from(value, from_value)\n\nFailedPreconditionError: Table already initialized. [Op:InitializeTableV2] name: input_layer<span class=\"pl-k\">/</span>Col2_indicator<span class=\"pl-k\">/</span>Col2_lookup<span class=\"pl-k\">/</span>hash_table<span class=\"pl-k\">/</span>table_init<span class=\"pl-k\">/</span></pre></div>\n<h3>Source code / logs</h3>\n<p>Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> pandas <span class=\"pl-k\">as</span> pd\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\ntf.enable_eager_execution()\ndf <span class=\"pl-k\">=</span> pd.DataFrame([[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>A1<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>A2<span class=\"pl-pds\">'</span></span>], [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>B1<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>B2<span class=\"pl-pds\">'</span></span>], [<span class=\"pl-s\"><span class=\"pl-pds\">'</span>C1<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>C2<span class=\"pl-pds\">'</span></span>]], <span class=\"pl-v\">columns</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Col1<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Col2<span class=\"pl-pds\">'</span></span>])\n\ncolumns <span class=\"pl-k\">=</span> [\n    tf.feature_column.indicator_column(\n        tf.feature_column.categorical_column_with_vocabulary_list(col, df[col].unique())) <span class=\"pl-k\">for</span> col <span class=\"pl-k\">in</span> df.columns\n]\n\nfeatures <span class=\"pl-k\">=</span> df.to_dict(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>list<span class=\"pl-pds\">'</span></span>)\ninput_layer <span class=\"pl-k\">=</span> tf.feature_column.input_layer(features, columns)</pre></div>", "body_text": "Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Latest Mac OS\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.8.0\nPython version: 3.6.5\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: see below\n\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\n---------------------------------------------------------------------------\nFailedPreconditionError                   Traceback (most recent call last)\n<ipython-input-2-443ffe416ebf> in <module>()\n      7 \n      8 features = df.to_dict('series')\n----> 9 input_layer = tf.feature_column.input_layer(features, columns)\n\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in input_layer(features, feature_columns, weight_collections, trainable, cols_to_vars)\n    275   \"\"\"\n    276   return _internal_input_layer(features, feature_columns, weight_collections,\n--> 277                                trainable, cols_to_vars)\n    278 \n    279 \n\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _internal_input_layer(features, feature_columns, weight_collections, trainable, cols_to_vars, scope)\n    200             builder,\n    201             weight_collections=weight_collections,\n--> 202             trainable=trainable)\n    203         num_elements = column._variable_shape.num_elements()  # pylint: disable=protected-access\n    204         batch_size = array_ops.shape(tensor)[0]\n\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _get_dense_tensor(***failed resolving arguments***)\n   3300     # Feature has been already transformed. Return the intermediate\n   3301     # representation created by _transform_feature.\n-> 3302     return inputs.get(self)\n   3303 \n   3304   def _get_sequence_dense_tensor(\n\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in get(self, key)\n   2098     column = key\n   2099     logging.debug('Transforming feature_column %s.', column)\n-> 2100     transformed = column._transform_feature(self)  # pylint: disable=protected-access\n   2101     if transformed is None:\n   2102       raise ValueError('Column {} is not supported.'.format(column.name))\n\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _transform_feature(self, inputs)\n   3229       ValueError: if input rank is not known at graph building time.\n   3230     \"\"\"\n-> 3231     id_weight_pair = self.categorical_column._get_sparse_tensors(inputs)  # pylint: disable=protected-access\n   3232     id_tensor = id_weight_pair.id_tensor\n   3233     weight_tensor = id_weight_pair.weight_tensor\n\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _get_sparse_tensors(self, inputs, weight_collections, trainable)\n   2872   def _get_sparse_tensors(\n   2873       self, inputs, weight_collections=None, trainable=None):\n-> 2874     return _CategoricalColumn.IdWeightPair(inputs.get(self), None)\n   2875 \n   2876 \n\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in get(self, key)\n   2098     column = key\n   2099     logging.debug('Transforming feature_column %s.', column)\n-> 2100     transformed = column._transform_feature(self)  # pylint: disable=protected-access\n   2101     if transformed is None:\n   2102       raise ValueError('Column {} is not supported.'.format(column.name))\n\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _transform_feature(self, inputs)\n   2863         num_oov_buckets=self.num_oov_buckets,\n   2864         dtype=key_dtype,\n-> 2865         name='{}_lookup'.format(self.key)).lookup(input_tensor)\n   2866 \n   2867   @property\n\n/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/lookup_ops.py in index_table_from_tensor(vocabulary_list, num_oov_buckets, default_value, hasher_spec, dtype, name)\n   1097           name=\"table_init\")\n   1098       table = HashTable(\n-> 1099           init, default_value, shared_name=shared_name, name=hash_table_scope)\n   1100     if num_oov_buckets:\n   1101       table = IdTableWithHashBuckets(\n\n/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/lookup_ops.py in __init__(self, initializer, default_value, shared_name, name)\n    277           name=scope)\n    278 \n--> 279       super(HashTable, self).__init__(table_ref, default_value, initializer)\n    280 \n    281 \n\n/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/lookup_ops.py in __init__(self, table_ref, default_value, initializer)\n    169         default_value, dtype=self._value_dtype)\n    170     self._default_value.get_shape().merge_with(tensor_shape.scalar())\n--> 171     self._init = initializer.initialize(self)\n    172 \n    173   @property\n\n/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/lookup_ops.py in initialize(self, table)\n    348                             self._values)) as scope:\n    349       init_op = gen_lookup_ops.initialize_table_v2(\n--> 350           table.table_ref, self._keys, self._values, name=scope)\n    351     ops.add_to_collection(ops.GraphKeys.TABLE_INITIALIZERS, init_op)\n    352     return init_op\n\n/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gen_lookup_ops.py in initialize_table_v2(table_handle, keys, values, name)\n    404       else:\n    405         message = e.message\n--> 406       _six.raise_from(_core._status_to_exception(e.code, message), None)\n    407 \n    408 \n\n/usr/local/lib/python3.6/site-packages/six.py in raise_from(value, from_value)\n\nFailedPreconditionError: Table already initialized. [Op:InitializeTableV2] name: input_layer/Col2_indicator/Col2_lookup/hash_table/table_init/\nSource code / logs\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\nimport pandas as pd\nimport tensorflow as tf\n\ntf.enable_eager_execution()\ndf = pd.DataFrame([['A1', 'A2'], ['B1', 'B2'], ['C1', 'C2']], columns=['Col1', 'Col2'])\n\ncolumns = [\n    tf.feature_column.indicator_column(\n        tf.feature_column.categorical_column_with_vocabulary_list(col, df[col].unique())) for col in df.columns\n]\n\nfeatures = df.to_dict('list')\ninput_layer = tf.feature_column.input_layer(features, columns)", "body": "- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Latest Mac OS\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.8.0\r\n- **Python version**: 3.6.5\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: see below\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nFailedPreconditionError                   Traceback (most recent call last)\r\n<ipython-input-2-443ffe416ebf> in <module>()\r\n      7 \r\n      8 features = df.to_dict('series')\r\n----> 9 input_layer = tf.feature_column.input_layer(features, columns)\r\n\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in input_layer(features, feature_columns, weight_collections, trainable, cols_to_vars)\r\n    275   \"\"\"\r\n    276   return _internal_input_layer(features, feature_columns, weight_collections,\r\n--> 277                                trainable, cols_to_vars)\r\n    278 \r\n    279 \r\n\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _internal_input_layer(features, feature_columns, weight_collections, trainable, cols_to_vars, scope)\r\n    200             builder,\r\n    201             weight_collections=weight_collections,\r\n--> 202             trainable=trainable)\r\n    203         num_elements = column._variable_shape.num_elements()  # pylint: disable=protected-access\r\n    204         batch_size = array_ops.shape(tensor)[0]\r\n\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _get_dense_tensor(***failed resolving arguments***)\r\n   3300     # Feature has been already transformed. Return the intermediate\r\n   3301     # representation created by _transform_feature.\r\n-> 3302     return inputs.get(self)\r\n   3303 \r\n   3304   def _get_sequence_dense_tensor(\r\n\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in get(self, key)\r\n   2098     column = key\r\n   2099     logging.debug('Transforming feature_column %s.', column)\r\n-> 2100     transformed = column._transform_feature(self)  # pylint: disable=protected-access\r\n   2101     if transformed is None:\r\n   2102       raise ValueError('Column {} is not supported.'.format(column.name))\r\n\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _transform_feature(self, inputs)\r\n   3229       ValueError: if input rank is not known at graph building time.\r\n   3230     \"\"\"\r\n-> 3231     id_weight_pair = self.categorical_column._get_sparse_tensors(inputs)  # pylint: disable=protected-access\r\n   3232     id_tensor = id_weight_pair.id_tensor\r\n   3233     weight_tensor = id_weight_pair.weight_tensor\r\n\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _get_sparse_tensors(self, inputs, weight_collections, trainable)\r\n   2872   def _get_sparse_tensors(\r\n   2873       self, inputs, weight_collections=None, trainable=None):\r\n-> 2874     return _CategoricalColumn.IdWeightPair(inputs.get(self), None)\r\n   2875 \r\n   2876 \r\n\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in get(self, key)\r\n   2098     column = key\r\n   2099     logging.debug('Transforming feature_column %s.', column)\r\n-> 2100     transformed = column._transform_feature(self)  # pylint: disable=protected-access\r\n   2101     if transformed is None:\r\n   2102       raise ValueError('Column {} is not supported.'.format(column.name))\r\n\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/feature_column/feature_column.py in _transform_feature(self, inputs)\r\n   2863         num_oov_buckets=self.num_oov_buckets,\r\n   2864         dtype=key_dtype,\r\n-> 2865         name='{}_lookup'.format(self.key)).lookup(input_tensor)\r\n   2866 \r\n   2867   @property\r\n\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/lookup_ops.py in index_table_from_tensor(vocabulary_list, num_oov_buckets, default_value, hasher_spec, dtype, name)\r\n   1097           name=\"table_init\")\r\n   1098       table = HashTable(\r\n-> 1099           init, default_value, shared_name=shared_name, name=hash_table_scope)\r\n   1100     if num_oov_buckets:\r\n   1101       table = IdTableWithHashBuckets(\r\n\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/lookup_ops.py in __init__(self, initializer, default_value, shared_name, name)\r\n    277           name=scope)\r\n    278 \r\n--> 279       super(HashTable, self).__init__(table_ref, default_value, initializer)\r\n    280 \r\n    281 \r\n\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/lookup_ops.py in __init__(self, table_ref, default_value, initializer)\r\n    169         default_value, dtype=self._value_dtype)\r\n    170     self._default_value.get_shape().merge_with(tensor_shape.scalar())\r\n--> 171     self._init = initializer.initialize(self)\r\n    172 \r\n    173   @property\r\n\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/lookup_ops.py in initialize(self, table)\r\n    348                             self._values)) as scope:\r\n    349       init_op = gen_lookup_ops.initialize_table_v2(\r\n--> 350           table.table_ref, self._keys, self._values, name=scope)\r\n    351     ops.add_to_collection(ops.GraphKeys.TABLE_INITIALIZERS, init_op)\r\n    352     return init_op\r\n\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/ops/gen_lookup_ops.py in initialize_table_v2(table_handle, keys, values, name)\r\n    404       else:\r\n    405         message = e.message\r\n--> 406       _six.raise_from(_core._status_to_exception(e.code, message), None)\r\n    407 \r\n    408 \r\n\r\n/usr/local/lib/python3.6/site-packages/six.py in raise_from(value, from_value)\r\n\r\nFailedPreconditionError: Table already initialized. [Op:InitializeTableV2] name: input_layer/Col2_indicator/Col2_lookup/hash_table/table_init/\r\n```\r\n\r\n### Source code / logs\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\r\n\r\n```python\r\n\r\nimport pandas as pd\r\nimport tensorflow as tf\r\n\r\ntf.enable_eager_execution()\r\ndf = pd.DataFrame([['A1', 'A2'], ['B1', 'B2'], ['C1', 'C2']], columns=['Col1', 'Col2'])\r\n\r\ncolumns = [\r\n    tf.feature_column.indicator_column(\r\n        tf.feature_column.categorical_column_with_vocabulary_list(col, df[col].unique())) for col in df.columns\r\n]\r\n\r\nfeatures = df.to_dict('list')\r\ninput_layer = tf.feature_column.input_layer(features, columns)\r\n```"}