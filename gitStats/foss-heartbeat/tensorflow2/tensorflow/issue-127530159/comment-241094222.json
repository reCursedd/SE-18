{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/241094222", "html_url": "https://github.com/tensorflow/tensorflow/issues/813#issuecomment-241094222", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/813", "id": 241094222, "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTA5NDIyMg==", "user": {"login": "kbrems", "id": 456665, "node_id": "MDQ6VXNlcjQ1NjY2NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/456665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbrems", "html_url": "https://github.com/kbrems", "followers_url": "https://api.github.com/users/kbrems/followers", "following_url": "https://api.github.com/users/kbrems/following{/other_user}", "gists_url": "https://api.github.com/users/kbrems/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbrems/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbrems/subscriptions", "organizations_url": "https://api.github.com/users/kbrems/orgs", "repos_url": "https://api.github.com/users/kbrems/repos", "events_url": "https://api.github.com/users/kbrems/events{/privacy}", "received_events_url": "https://api.github.com/users/kbrems/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-19T18:16:07Z", "updated_at": "2016-08-19T18:16:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p>As a potential alternative, we have implemented a python-only framework for adding custom operators to tensorflow, the Operator Vectorization Library:<br>\n<a href=\"https://github.com/opveclib/opveclib\">https://github.com/opveclib/opveclib</a>. Multi-threaded C++ and CUDA code is automatically generated from the python operators, which can be used in a Tensorflow application with only a binary install of tensorflow. We have implemented cumsum and cumprod operators as an example and benchmarks against the new Tensorflow/Eigen scan operators on the original example in this issue are favorable - test code at: <a href=\"https://github.com/opveclib/opveclib/blob/master/opveclib/examples/test_accumulate.py\">https://github.com/opveclib/opveclib/blob/master/opveclib/examples/test_accumulate.py</a></p>\n<p>input: X = np.random.uniform(0, 1, size=(10000,1000))<br>\nMachine: 48 CPU cores<br>\nGPU - GeForce GTX TITAN<br>\nDEBUG:opveclib:Best numpy time (ms): 148.728299141<br>\nDEBUG:opveclib:Best ovl cpp time (ms): 41.827047<br>\nDEBUG:opveclib:Best ovl cuda time  (ms): 4.738103<br>\nDEBUG:opveclib:Best tf + ovl time  (ms) on /cpu:0 :62.8859996796<br>\nDEBUG:opveclib:Best tf cumsum time  (ms) on /cpu:0 :141.862869263<br>\nDEBUG:opveclib:Best tf + ovl time  (ms) on /gpu:0 :4.96506690979<br>\nDEBUG:opveclib:Best tf cumsum time  (ms) on /gpu:0 :9.82308387756</p>", "body_text": "As a potential alternative, we have implemented a python-only framework for adding custom operators to tensorflow, the Operator Vectorization Library:\nhttps://github.com/opveclib/opveclib. Multi-threaded C++ and CUDA code is automatically generated from the python operators, which can be used in a Tensorflow application with only a binary install of tensorflow. We have implemented cumsum and cumprod operators as an example and benchmarks against the new Tensorflow/Eigen scan operators on the original example in this issue are favorable - test code at: https://github.com/opveclib/opveclib/blob/master/opveclib/examples/test_accumulate.py\ninput: X = np.random.uniform(0, 1, size=(10000,1000))\nMachine: 48 CPU cores\nGPU - GeForce GTX TITAN\nDEBUG:opveclib:Best numpy time (ms): 148.728299141\nDEBUG:opveclib:Best ovl cpp time (ms): 41.827047\nDEBUG:opveclib:Best ovl cuda time  (ms): 4.738103\nDEBUG:opveclib:Best tf + ovl time  (ms) on /cpu:0 :62.8859996796\nDEBUG:opveclib:Best tf cumsum time  (ms) on /cpu:0 :141.862869263\nDEBUG:opveclib:Best tf + ovl time  (ms) on /gpu:0 :4.96506690979\nDEBUG:opveclib:Best tf cumsum time  (ms) on /gpu:0 :9.82308387756", "body": "As a potential alternative, we have implemented a python-only framework for adding custom operators to tensorflow, the Operator Vectorization Library: \nhttps://github.com/opveclib/opveclib. Multi-threaded C++ and CUDA code is automatically generated from the python operators, which can be used in a Tensorflow application with only a binary install of tensorflow. We have implemented cumsum and cumprod operators as an example and benchmarks against the new Tensorflow/Eigen scan operators on the original example in this issue are favorable - test code at: https://github.com/opveclib/opveclib/blob/master/opveclib/examples/test_accumulate.py\n\ninput: X = np.random.uniform(0, 1, size=(10000,1000))\nMachine: 48 CPU cores\nGPU - GeForce GTX TITAN\nDEBUG:opveclib:Best numpy time (ms): 148.728299141\nDEBUG:opveclib:Best ovl cpp time (ms): 41.827047\nDEBUG:opveclib:Best ovl cuda time  (ms): 4.738103\nDEBUG:opveclib:Best tf + ovl time  (ms) on /cpu:0 :62.8859996796\nDEBUG:opveclib:Best tf cumsum time  (ms) on /cpu:0 :141.862869263\nDEBUG:opveclib:Best tf + ovl time  (ms) on /gpu:0 :4.96506690979\nDEBUG:opveclib:Best tf cumsum time  (ms) on /gpu:0 :9.82308387756\n"}