{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/203548426", "pull_request_review_id": 138458059, "id": 203548426, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzU0ODQyNg==", "diff_hunk": "@@ -32,6 +33,319 @@ using mkldnn::stream;\n \n namespace tensorflow {\n \n+#ifndef INTEL_MKL_ML\n+\n+using mkldnn::memory;\n+using mkldnn::pooling_max;\n+using mkldnn::pooling_avg;\n+using mkldnn::pooling_avg_include_padding;\n+using mkldnn::pooling_avg_exclude_padding;\n+using mkldnn::prop_kind;\n+\n+struct MklPoolingParams {\n+  memory::dims src_dims;\n+  memory::dims dst_dims;\n+  memory::dims filter_dims;\n+  memory::dims strides;\n+  memory::dims padding_left;\n+  memory::dims padding_right;\n+  mkldnn::algorithm alg_kind;\n+\n+  MklPoolingParams(memory::dims src_dims,\n+    memory::dims dst_dims, memory::dims filter_dims,\n+    memory::dims strides, memory::dims padding_left,\n+    memory::dims padding_right, mkldnn::algorithm alg_kind) :\n+      src_dims(src_dims),  dst_dims(dst_dims),\n+      filter_dims(filter_dims), strides(strides),\n+      padding_left(padding_left), padding_right(padding_right),\n+      alg_kind(alg_kind) {\n+  }\n+};\n+\n+template <typename T>\n+class MklPoolingFwdPrimitive : public MklPrimitive {\n+ public:\n+  explicit MklPoolingFwdPrimitive(const MklPoolingParams& fwdParams) :\n+           cpu_engine_(engine::cpu, 0) {\n+    context_.fwd_stream.reset(new stream(stream::kind::eager));\n+    if (context_.fwd == nullptr)\n+       Setup(fwdParams);\n+  }\n+\n+  ~MklPoolingFwdPrimitive() {}\n+\n+  // Pooling forward execute\n+  //   src_data:  input data buffer of src\n+  //   ws_data:   input data buffer of workspace\n+  //   dst_data:  output data buffer of dst\n+  void Execute(const T* src_data, const T* dst_data,\n+      const void* ws_data = nullptr);\n+\n+  std::shared_ptr<mkldnn::pooling_forward::primitive_desc>\n+  GetPoolingFwdPd() const {\n+    return context_.fwd_pd;\n+  }\n+\n+  memory::format GetSrcMemoryFormat() const {\n+    return context_.src_fmt;\n+  }\n+\n+  memory::format GetDstMemoryFormat() const {\n+    return context_.dst_fmt;\n+  }\n+\n+ private:\n+  void Setup(const MklPoolingParams& fwdParams);\n+\n+  struct PoolingFwdContext {\n+    // algorithm\n+    mkldnn::algorithm alg_kind;\n+\n+    // expected memory format\n+    memory::format src_fmt;\n+    memory::format dst_fmt;\n+    memory::format ws_fmt;\n+\n+    // workspace shape\n+    memory::dims ws_dims;\n+    memory::data_type ws_dt;\n+    size_t ws_size;\n+\n+    // MKL-DNN memory, just dummy data\n+    std::shared_ptr<mkldnn::memory> ws_mem;\n+    std::shared_ptr<mkldnn::memory> src_mem;\n+    std::shared_ptr<mkldnn::memory> dst_mem;\n+\n+    // desc & primitive desc\n+    std::shared_ptr<mkldnn::pooling_forward::desc> fwd_desc;\n+    std::shared_ptr<mkldnn::pooling_forward::primitive_desc> fwd_pd;\n+\n+    // memory desc\n+    std::shared_ptr<mkldnn::memory::desc> src_md;\n+    std::shared_ptr<mkldnn::memory::desc> dst_md;\n+\n+    // Pooling primitive\n+    std::shared_ptr<mkldnn::pooling_forward> fwd;\n+    std::shared_ptr<mkldnn::stream> fwd_stream;\n+    std::vector<mkldnn::primitive> fwd_primitives;\n+\n+    PoolingFwdContext() :\n+      src_fmt(memory::format::any), dst_fmt(memory::format::any),\n+      ws_fmt(memory::format::any), ws_mem(nullptr), src_mem(nullptr),\n+      dst_mem(nullptr), fwd_desc(nullptr), fwd_pd(nullptr), src_md(nullptr),\n+      dst_md(nullptr), fwd(nullptr), fwd_stream(nullptr) {\n+    }\n+  };\n+\n+  struct PoolingFwdContext context_;\n+  engine cpu_engine_;\n+};\n+\n+template <typename T>\n+class MklPoolingFwdPrimitiveFactory : public MklPrimitiveFactory<T> {\n+ public:\n+  static MklPoolingFwdPrimitive<T>* Get(const MklPoolingParams& fwdParams) {\n+    MklPoolingFwdPrimitive<T>* pooling_forward = nullptr;\n+\n+    // Get pooling primitive from the pool\n+    pooling_forward = static_cast<MklPoolingFwdPrimitive<T>*>(\n+      MklPoolingFwdPrimitiveFactory<T>::GetInstance().GetPoolingFwd(fwdParams));\n+\n+    if (pooling_forward == nullptr) {\n+       pooling_forward = new MklPoolingFwdPrimitive<T>(fwdParams);\n+       MklPoolingFwdPrimitiveFactory<T>::GetInstance().SetPoolingFwd(\n+           fwdParams, pooling_forward);\n+    }\n+    return pooling_forward;\n+  }\n+\n+  static MklPoolingFwdPrimitiveFactory& GetInstance() {\n+    static MklPoolingFwdPrimitiveFactory instance_;\n+    return instance_;\n+  }\n+\n+ private:\n+  MklPoolingFwdPrimitiveFactory() {}\n+  ~MklPoolingFwdPrimitiveFactory() {}\n+\n+  // The key to be created will be used to get/set pooling\n+  // primitive op from reuse perspective.\n+  // A pooling key is a string which concates key parameters\n+  // as well as algorithm kind (max versus avg).\n+  static std::string CreateKey(const MklPoolingParams& fwdParams) {\n+    std::string prefix = \"pooling_fwd\";\n+    FactoryKeyCreator key_creator;\n+    key_creator.AddAsKey(prefix);\n+    key_creator.AddAsKey(fwdParams.src_dims);\n+    key_creator.AddAsKey(fwdParams.dst_dims);\n+    key_creator.AddAsKey(fwdParams.filter_dims);\n+    key_creator.AddAsKey(fwdParams.strides);\n+    key_creator.AddAsKey(fwdParams.padding_left);\n+    key_creator.AddAsKey(fwdParams.padding_right);\n+    key_creator.AddAsKey<int>(static_cast<int>(fwdParams.alg_kind));\n+    return key_creator.GetKey();\n+  }\n+\n+  MklPrimitive* GetPoolingFwd(const MklPoolingParams& fwdParams) {\n+    std::string key = CreateKey(fwdParams);\n+    return this->GetOp(key);\n+  }\n+\n+  void SetPoolingFwd(const MklPoolingParams& fwdParams, MklPrimitive *op) {\n+    std::string key = CreateKey(fwdParams);\n+    this->SetOp(key, op);\n+  }\n+};\n+\n+\n+template <typename T>\n+class MklPoolingBwdPrimitive : public MklPrimitive {\n+ public:\n+  explicit MklPoolingBwdPrimitive(const MklPoolingParams& bwdParams) :\n+           cpu_engine(engine::cpu, 0) {\n+    context_.bwd_stream.reset(new stream(stream::kind::eager));\n+    if (context_.bwd == nullptr)\n+      Setup(bwdParams);\n+  }\n+\n+  ~MklPoolingBwdPrimitive() {}\n+\n+  // Pooling backward execute\n+  //   diff_dst_data:  input data buffer of diff_dst\n+  //   diff_src_data:  output data buffer of diff_src\n+  //   ws_data:        input data buffer of workspace\n+  void Execute(const T* diff_dst_data, const T* diff_src_data,\n+               const void* ws_data = nullptr);\n+\n+ public:\n+  std::shared_ptr<mkldnn::pooling_forward::primitive_desc>\n+  GetPoolingFwdPd() const {\n+    return context_.fwd_pd;\n+  }\n+  std::shared_ptr<mkldnn::pooling_backward::primitive_desc>\n+  GetPoolingBwdPd() const {\n+    return context_.bwd_pd;\n+  }\n+\n+  memory::format GetDiffDstFormat() const {\n+    return context_.diff_dst_fmt;\n+  }\n+\n+  mkldnn::memory::data_type GetWorkspaceDataType() const {\n+    return context_.ws_dt;\n+  }\n+  memory::format GetWorkspaceFormat() const {\n+    return context_.ws_fmt;\n+  }\n+\n+ private:\n+  void Setup(const MklPoolingParams& bwdParams);\n+\n+  // Primitive reuse context for pooling bwd ops\n+  struct PoolingBwdContext {\n+    // algorithm\n+    mkldnn::algorithm alg_kind;\n+\n+    // expected memory format\n+    mkldnn::memory::format diff_src_fmt;\n+    mkldnn::memory::format diff_dst_fmt;\n+    mkldnn::memory::format ws_fmt;\n+\n+    // workspace attribute\n+    mkldnn::memory::dims ws_dims;\n+    mkldnn::memory::data_type ws_dt;\n+\n+    // MKL-DNN memory\n+    std::shared_ptr<mkldnn::memory> ws_mem;\n+    std::shared_ptr<mkldnn::memory> diff_src_mem;\n+    std::shared_ptr<mkldnn::memory> diff_dst_mem;\n+\n+    // memory desc\n+    std::shared_ptr<mkldnn::memory::desc> diff_src_md;\n+    std::shared_ptr<mkldnn::memory::desc> diff_dst_md;\n+\n+    // desc & primitive desc\n+    std::shared_ptr<mkldnn::pooling_forward::desc> fwd_desc;\n+    std::shared_ptr<mkldnn::pooling_backward::desc> bwd_desc;\n+    std::shared_ptr<mkldnn::pooling_forward::primitive_desc> fwd_pd;\n+    std::shared_ptr<mkldnn::pooling_backward::primitive_desc> bwd_pd;\n+\n+    // pooling primitive\n+    std::shared_ptr<mkldnn::pooling_backward> bwd;\n+    std::shared_ptr<mkldnn::stream> bwd_stream;\n+\n+    std::vector<mkldnn::primitive> bwd_primitives;\n+\n+    PoolingBwdContext() :\n+      diff_src_fmt(memory::format::any), diff_dst_fmt(memory::format::any),\n+      ws_fmt(memory::format::any), ws_mem(nullptr), diff_src_mem(nullptr),\n+      diff_dst_mem(nullptr), diff_src_md(nullptr), diff_dst_md(nullptr),\n+      fwd_desc(nullptr), bwd_desc(nullptr), fwd_pd(nullptr), bwd_pd(nullptr),\n+      bwd(nullptr), bwd_stream(nullptr) {\n+    }\n+  };\n+\n+  struct PoolingBwdContext context_;\n+  engine cpu_engine;\n+};\n+\n+template <typename T>\n+class MklPoolingBwdPrimitiveFactory : public MklPrimitiveFactory<T> {\n+ public:\n+  static MklPoolingBwdPrimitive<T> *Get(const MklPoolingParams& bwdParams) {\n+    MklPoolingBwdPrimitive<T>* pooling_backward = nullptr;\n+\n+    // Find a pooling backward primitive from the pool\n+    // If it does not exist, create a new one\n+    pooling_backward = static_cast<MklPoolingBwdPrimitive<T>*>(\n+      MklPoolingBwdPrimitiveFactory<T>::GetInstance().GetPoolingBwd(bwdParams));\n+    if (pooling_backward == nullptr) {\n+      pooling_backward = new MklPoolingBwdPrimitive<T>(bwdParams);\n+      MklPoolingBwdPrimitiveFactory<T>::GetInstance().SetPoolingBwd(\n+          bwdParams, pooling_backward);\n+    }\n+    return pooling_backward;\n+  }\n+\n+  static MklPoolingBwdPrimitiveFactory& GetInstance() {\n+    static MklPoolingBwdPrimitiveFactory instance_;\n+    return instance_;\n+  }\n+\n+ private:\n+  MklPoolingBwdPrimitiveFactory() {}\n+  ~MklPoolingBwdPrimitiveFactory() {}\n+\n+  // The key to be created will be used to get/set pooling\n+  // primitive op from reuse perspective.\n+  // A pooling key is a string which concates key parameters\n+  // as well as algorithm kind (max versus avg).\n+  static std::string CreateKey(const MklPoolingParams& bwdParams) {\n+    std::string prefix = \"pooling_bwd\";\n+    FactoryKeyCreator key_creator;\n+    key_creator.AddAsKey(prefix);", "path": "tensorflow/core/kernels/mkl_pooling_ops_common.h", "position": 301, "original_position": 302, "commit_id": "6fdc6be324df7e3f7e3162e161ef4e869bd888fb", "original_commit_id": "d490493cd4848422e5480e8a30a0a88af07641ad", "user": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "body": "There's a lot of code duplication between the Fwd and Bwd class. Perhaps derive one from the other or both from a shared base class?", "created_at": "2018-07-18T22:20:53Z", "updated_at": "2018-07-31T15:47:59Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/19403#discussion_r203548426", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19403", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/203548426"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/19403#discussion_r203548426"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19403"}}, "body_html": "<p>There's a lot of code duplication between the Fwd and Bwd class. Perhaps derive one from the other or both from a shared base class?</p>", "body_text": "There's a lot of code duplication between the Fwd and Bwd class. Perhaps derive one from the other or both from a shared base class?"}