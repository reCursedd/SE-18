{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/204527837", "pull_request_review_id": 139622055, "id": 204527837, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDUyNzgzNw==", "diff_hunk": "@@ -616,98 +646,104 @@ class MklMaxPoolingGradOp : public MklPoolingBackwardOpBase<T> {\n  public:\n   explicit MklMaxPoolingGradOp(OpKernelConstruction* context)\n       : MklPoolingBackwardOpBase<T>(context) {}\n-\n   void Compute(OpKernelContext* context) override {\n     try {\n       auto cpu_engine = engine(engine::cpu, 0);\n       const Tensor& orig_input_tensor =\n           MklGetInput(context, kInputTensorIndexOrigInput);\n-      const Tensor& orig_output_tensor =\n-          MklGetInput(context, kInputTensorIndexOrigOutput);\n       const Tensor& grad_tensor =\n           MklGetInput(context, kInputTensorIndexGradient);\n       const Tensor& workspace_tensor =\n           MklGetInput(context, kInputTensorIndexWorkspace);\n-      MklDnnShape orig_input_mkl_shape, orig_output_mkl_shape, grad_mkl_shape,\n-          workspace_mkl_shape;\n+      MklDnnShape orig_input_mkl_shape, grad_mkl_shape;\n       GetMklShape(context, kInputTensorIndexOrigInput, &orig_input_mkl_shape);\n-      GetMklShape(context, kInputTensorIndexOrigOutput, &orig_output_mkl_shape);\n       GetMklShape(context, kInputTensorIndexGradient, &grad_mkl_shape);\n-      GetMklShape(context, kInputTensorIndexWorkspace, &workspace_mkl_shape);\n-\n-      SanityCheckInputs(context, orig_input_tensor, orig_output_tensor,\n-                        grad_tensor, workspace_tensor, orig_input_mkl_shape,\n-                        orig_output_mkl_shape, grad_mkl_shape,\n-                        workspace_mkl_shape);\n       if (!context->status().ok()) return;\n \n       MklDnnData<T> grad_dnn_data(&cpu_engine);\n       MklDnnData<uint8> workspace_dnn_data(&cpu_engine);\n-      MklDnnData<T> output_dnn_data(&cpu_engine);\n-      Tensor* output_tensor = nullptr;\n+\n       MklPoolParameters pool_params;\n-      TensorShape orig_input_shape;\n-      memory::dims output_dims_mkl_order, orig_input_dims_mkl_order;\n-      memory::desc original_input_md = ConfigureOriginalInput(\n-          context, orig_input_tensor, orig_input_mkl_shape,\n-          &orig_input_dims_mkl_order, &pool_params, &orig_input_shape);\n-\n-      memory::desc original_output_md = this->ConfigureOriginalOutput(\n-          pool_params, orig_output_mkl_shape, output_dims_mkl_order);\n-\n-      memory::desc target_diff_dst_md = this->ConfigureInputGradient(\n-          grad_mkl_shape, grad_tensor, &grad_dnn_data, original_output_md);\n-\n-      output_dnn_data.SetUsrMem(original_input_md);\n-\n-      // Create the forward pooling primitive descriptor so we can\n-      // pass it as a hint to the backward pooling primitive descriptor\n-      auto pool_fwd_desc = pooling_forward::desc(\n-          prop_kind::forward, algorithm::pooling_max, original_input_md,\n-          original_output_md,\n-          memory::dims({pool_params.row_stride, pool_params.col_stride}),\n-          memory::dims({pool_params.window_rows, pool_params.window_cols}),\n-          memory::dims({static_cast<int>(pool_params.pad_top),\n-                        static_cast<int>(pool_params.pad_left)}),\n-          memory::dims({static_cast<int>(pool_params.pad_bottom),\n-                        static_cast<int>(pool_params.pad_right)}),\n-          TFPaddingToMklDnnPadding(this->padding_));\n-      auto pool_fwd_prim_desc =\n-          pooling_forward::primitive_desc(pool_fwd_desc, cpu_engine);\n-\n-      auto pool_bkwd_desc = pooling_backward::desc(\n-          algorithm::pooling_max, output_dnn_data.GetUsrMemDesc(),\n-          target_diff_dst_md,\n-          memory::dims({pool_params.row_stride, pool_params.col_stride}),\n-          memory::dims({pool_params.window_rows, pool_params.window_cols}),\n-          memory::dims({static_cast<int>(pool_params.pad_top),\n-                        static_cast<int>(pool_params.pad_left)}),\n-          memory::dims({static_cast<int>(pool_params.pad_bottom),\n-                        static_cast<int>(pool_params.pad_right)}),\n-          TFPaddingToMklDnnPadding(this->padding_));\n-      auto pool_bkwd_prim_desc = pooling_backward::primitive_desc(\n-          pool_bkwd_desc, cpu_engine, pool_fwd_prim_desc);\n-\n-      this->AllocateOutputTensor(context, pool_bkwd_prim_desc,\n+      TensorShape orig_input_shape = orig_input_tensor.shape();\n+      this->InitMklPoolParameters(context, &pool_params,\n+          orig_input_mkl_shape, orig_input_shape);\n+\n+      memory::dims filter_dims, strides, padding_left, padding_right;\n+      this->PoolParamsToDims(&pool_params, &filter_dims, &strides,\n+          &padding_left, &padding_right);\n+\n+      memory::dims diff_dst_dims = grad_mkl_shape.IsMklTensor()\n+          ? grad_mkl_shape.GetSizesAsMklDnnDims()\n+          : TFShapeToMklDnnDimsInNCHW(grad_tensor.shape(),\n+                                      this->data_format_tf_);\n+      memory::dims orig_input_dims_mkl_order =\n+          orig_input_mkl_shape.IsMklTensor()\n+          ? orig_input_mkl_shape.GetSizesAsMklDnnDims()\n+          : TFShapeToMklDnnDimsInNCHW(orig_input_shape,\n+                                      this->data_format_tf_);\n+\n+      memory::dims output_dims_mkl_order;\n+      this->GetOutputDims(pool_params, &output_dims_mkl_order);\n+\n+      MklPoolingParams bwdParams(orig_input_dims_mkl_order,\n+          output_dims_mkl_order, filter_dims, strides,\n+          padding_left, padding_right, algorithm::pooling_max);\n+      MklPoolingBwdPrimitive<T> *pooling_bwd =\n+        MklPoolingBwdPrimitiveFactory<T>::Get(bwdParams);\n+\n+      // allocate output tensor and memory primitive\n+      Tensor* output_tensor = nullptr;\n+      this->AllocateOutputTensor(context, *(pooling_bwd->GetPoolingBwdPd()),\n                                  orig_input_dims_mkl_order,\n                                  this->data_format_mkldnn_, &output_tensor);\n-      output_dnn_data.SetUsrMemDataHandle(output_tensor);\n-\n-      ConfigureWorkspace(workspace_tensor,\n-                         pool_fwd_prim_desc.workspace_primitive_desc(),\n-                         &workspace_dnn_data);\n-      this->PrepareAndExecuteNet(\n-          pool_bkwd_prim_desc, &grad_dnn_data, &output_dnn_data,\n-          memory::primitive_desc(target_diff_dst_md, cpu_engine),\n-          &workspace_dnn_data);\n-    } catch (mkldnn::error& e) {\n-      string error_msg = \"Status: \" + std::to_string(e.status) +\n-                         \", message: \" + string(e.message) + \", in file \" +\n-                         string(__FILE__) + \":\" + std::to_string(__LINE__);\n-      OP_REQUIRES_OK(context, errors::Aborted(\"Compute received an exception:\",\n-                                              error_msg));\n+      // get diff_dst mem desc\n+      memory::desc diff_dst_md = grad_mkl_shape.IsMklTensor()\n+                               ? grad_mkl_shape.GetMklLayout()\n+                               : memory::desc(diff_dst_dims, MklDnnType<T>(),\n+                                              this->data_format_mkldnn_);\n+      // check if diff_dst needs to be reordered\n+      T* diff_dst_data = nullptr;", "path": "tensorflow/core/kernels/mkl_maxpooling_op.cc", "position": null, "original_position": 278, "commit_id": "6fdc6be324df7e3f7e3162e161ef4e869bd888fb", "original_commit_id": "d490493cd4848422e5480e8a30a0a88af07641ad", "user": {"login": "gzmkl", "id": 29215195, "node_id": "MDQ6VXNlcjI5MjE1MTk1", "avatar_url": "https://avatars0.githubusercontent.com/u/29215195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gzmkl", "html_url": "https://github.com/gzmkl", "followers_url": "https://api.github.com/users/gzmkl/followers", "following_url": "https://api.github.com/users/gzmkl/following{/other_user}", "gists_url": "https://api.github.com/users/gzmkl/gists{/gist_id}", "starred_url": "https://api.github.com/users/gzmkl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gzmkl/subscriptions", "organizations_url": "https://api.github.com/users/gzmkl/orgs", "repos_url": "https://api.github.com/users/gzmkl/repos", "events_url": "https://api.github.com/users/gzmkl/events{/privacy}", "received_events_url": "https://api.github.com/users/gzmkl/received_events", "type": "User", "site_admin": false}, "body": "Done with code change", "created_at": "2018-07-23T19:33:43Z", "updated_at": "2018-07-31T15:47:59Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/19403#discussion_r204527837", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19403", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/204527837"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/19403#discussion_r204527837"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19403"}}, "body_html": "<p>Done with code change</p>", "body_text": "Done with code change", "in_reply_to_id": 203507925}