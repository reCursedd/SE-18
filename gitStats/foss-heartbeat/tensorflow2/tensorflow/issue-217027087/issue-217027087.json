{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8722", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8722/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8722/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8722/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/8722", "id": 217027087, "node_id": "MDExOlB1bGxSZXF1ZXN0MTEyNjE0MzUw", "number": 8722, "title": "Added support for case callables to return namedtuples", "user": {"login": "palimarrao", "id": 2838319, "node_id": "MDQ6VXNlcjI4MzgzMTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/2838319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/palimarrao", "html_url": "https://github.com/palimarrao", "followers_url": "https://api.github.com/users/palimarrao/followers", "following_url": "https://api.github.com/users/palimarrao/following{/other_user}", "gists_url": "https://api.github.com/users/palimarrao/gists{/gist_id}", "starred_url": "https://api.github.com/users/palimarrao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/palimarrao/subscriptions", "organizations_url": "https://api.github.com/users/palimarrao/orgs", "repos_url": "https://api.github.com/users/palimarrao/repos", "events_url": "https://api.github.com/users/palimarrao/events{/privacy}", "received_events_url": "https://api.github.com/users/palimarrao/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2017-03-26T04:44:13Z", "updated_at": "2017-03-29T01:32:44Z", "closed_at": "2017-03-29T01:32:44Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8722", "html_url": "https://github.com/tensorflow/tensorflow/pull/8722", "diff_url": "https://github.com/tensorflow/tensorflow/pull/8722.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/8722.patch"}, "body_html": "<p>This commit adds support for<code> namedtuple</code> to be used with <code>tf.case</code>.</p>\n<p><code>tf.cond</code> already supports <code>namedtuple</code>:</p>\n<pre><code>nt = collections.namedtuple('Point', ['x', 'y'])\nf1 = lambda: nt(tf.Variable(1), tf.Variable(2))\nf2 = lambda: nt(tf.Variable(3), tf.Variable(4))\nc  = tf.cond(tf.less(1,0), f1, f2)\nprint c\n\nOutput\n[&lt;tf.Tensor 'cond/Merge:0' shape=() dtype=int32&gt;, &lt;tf.Tensor 'cond/Merge_1:0' shape=() dtype=int32&gt;]\n</code></pre>\n<p>However, if</p>\n<pre><code>c =  tf.case([(tf.less(1,0), f1)], default=f2)\nprint c\n\nOutput\nTypeError: __new__() takes exactly 3 arguments (2 given)\n</code></pre>\n<p>After this commit, the output for above is<br>\n<code>[&lt;tf.Tensor 'case/If_1/Merge:0' shape=() dtype=int32&gt;, &lt;tf.Tensor 'case/If_1/Merge_1:0' shape=() dtype=int32&gt;] </code></p>\n<p>Using <code>namedtuple</code> with <code>tf.case</code> should have the same effect as using a regular tuple.</p>\n<pre><code>nt = collections.namedtuple('Point', ['x', 'y'])\n\nf1 = lambda: nt(tf.Variable(1), tf.Variable(2))\nf2 = lambda: nt(tf.Variable(3), tf.Variable(4))\n\nf3 = lambda: (tf.Variable(1), tf.Variable(2))\nf4 = lambda: (tf.Variable(3), tf.Variable(4))\n\nc1  = tf.case([(tf.less(1,0), f1)], default=f2)\nc2  = tf.case([(tf.less(1,0), f3)], default=f4)\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    print \"With namedtuple: \",\n    v = sess.run(c1)\n    print v\n\n    print \"With tuple: \",\n    v2 = sess.run(c2)\n    print v2\n\nOutput\nWith namedtuple:  [3, 4]\nWith tuple:  [3, 4]\n</code></pre>", "body_text": "This commit adds support for namedtuple to be used with tf.case.\ntf.cond already supports namedtuple:\nnt = collections.namedtuple('Point', ['x', 'y'])\nf1 = lambda: nt(tf.Variable(1), tf.Variable(2))\nf2 = lambda: nt(tf.Variable(3), tf.Variable(4))\nc  = tf.cond(tf.less(1,0), f1, f2)\nprint c\n\nOutput\n[<tf.Tensor 'cond/Merge:0' shape=() dtype=int32>, <tf.Tensor 'cond/Merge_1:0' shape=() dtype=int32>]\n\nHowever, if\nc =  tf.case([(tf.less(1,0), f1)], default=f2)\nprint c\n\nOutput\nTypeError: __new__() takes exactly 3 arguments (2 given)\n\nAfter this commit, the output for above is\n[<tf.Tensor 'case/If_1/Merge:0' shape=() dtype=int32>, <tf.Tensor 'case/If_1/Merge_1:0' shape=() dtype=int32>] \nUsing namedtuple with tf.case should have the same effect as using a regular tuple.\nnt = collections.namedtuple('Point', ['x', 'y'])\n\nf1 = lambda: nt(tf.Variable(1), tf.Variable(2))\nf2 = lambda: nt(tf.Variable(3), tf.Variable(4))\n\nf3 = lambda: (tf.Variable(1), tf.Variable(2))\nf4 = lambda: (tf.Variable(3), tf.Variable(4))\n\nc1  = tf.case([(tf.less(1,0), f1)], default=f2)\nc2  = tf.case([(tf.less(1,0), f3)], default=f4)\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    print \"With namedtuple: \",\n    v = sess.run(c1)\n    print v\n\n    print \"With tuple: \",\n    v2 = sess.run(c2)\n    print v2\n\nOutput\nWith namedtuple:  [3, 4]\nWith tuple:  [3, 4]", "body": "This commit adds support for` namedtuple` to be used with `tf.case`. \r\n\r\n`tf.cond` already supports `namedtuple`:\r\n\r\n```\r\nnt = collections.namedtuple('Point', ['x', 'y'])\r\nf1 = lambda: nt(tf.Variable(1), tf.Variable(2))\r\nf2 = lambda: nt(tf.Variable(3), tf.Variable(4))\r\nc  = tf.cond(tf.less(1,0), f1, f2)\r\nprint c\r\n\r\nOutput\r\n[<tf.Tensor 'cond/Merge:0' shape=() dtype=int32>, <tf.Tensor 'cond/Merge_1:0' shape=() dtype=int32>]\r\n```\r\n\r\nHowever, if \r\n```\r\nc =  tf.case([(tf.less(1,0), f1)], default=f2)\r\nprint c\r\n\r\nOutput\r\nTypeError: __new__() takes exactly 3 arguments (2 given)\r\n```\r\n\r\nAfter this commit, the output for above is\r\n`[<tf.Tensor 'case/If_1/Merge:0' shape=() dtype=int32>, <tf.Tensor 'case/If_1/Merge_1:0' shape=() dtype=int32>]\r\n`\r\n\r\nUsing `namedtuple` with `tf.case` should have the same effect as using a regular tuple.\r\n\r\n```\r\nnt = collections.namedtuple('Point', ['x', 'y'])\r\n\r\nf1 = lambda: nt(tf.Variable(1), tf.Variable(2))\r\nf2 = lambda: nt(tf.Variable(3), tf.Variable(4))\r\n\r\nf3 = lambda: (tf.Variable(1), tf.Variable(2))\r\nf4 = lambda: (tf.Variable(3), tf.Variable(4))\r\n\r\nc1  = tf.case([(tf.less(1,0), f1)], default=f2)\r\nc2  = tf.case([(tf.less(1,0), f3)], default=f4)\r\n\r\nwith tf.Session() as sess:\r\n    sess.run(tf.global_variables_initializer())\r\n\r\n    print \"With namedtuple: \",\r\n    v = sess.run(c1)\r\n    print v\r\n\r\n    print \"With tuple: \",\r\n    v2 = sess.run(c2)\r\n    print v2\r\n\r\nOutput\r\nWith namedtuple:  [3, 4]\r\nWith tuple:  [3, 4]\r\n```\r\n\r\n"}