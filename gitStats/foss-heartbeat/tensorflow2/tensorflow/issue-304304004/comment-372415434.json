{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/372415434", "html_url": "https://github.com/tensorflow/tensorflow/issues/17641#issuecomment-372415434", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17641", "id": 372415434, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MjQxNTQzNA==", "user": {"login": "carlthome", "id": 1595907, "node_id": "MDQ6VXNlcjE1OTU5MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1595907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlthome", "html_url": "https://github.com/carlthome", "followers_url": "https://api.github.com/users/carlthome/followers", "following_url": "https://api.github.com/users/carlthome/following{/other_user}", "gists_url": "https://api.github.com/users/carlthome/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlthome/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlthome/subscriptions", "organizations_url": "https://api.github.com/users/carlthome/orgs", "repos_url": "https://api.github.com/users/carlthome/repos", "events_url": "https://api.github.com/users/carlthome/events{/privacy}", "received_events_url": "https://api.github.com/users/carlthome/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-12T18:28:15Z", "updated_at": "2018-03-12T18:30:38Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Wow, you're one fast potato <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6932348\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yongtang\">@yongtang</a>! <g-emoji class=\"g-emoji\" alias=\"smiley\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f603.png\">\ud83d\ude03</g-emoji></p>\n<blockquote>\n<p>I think one potential issue is that python's float is implemented as C double, so there are some discrepancies here.</p>\n</blockquote>\n<p>Yeah, and I guess it can be a little confusing to have <code>tf.as_dtype(\"float\")</code> be 32-bit while <code>tf.as_dtype(float)</code> would give doubles. I'd probably stick with tf.float32 <a href=\"https://github.com/tensorflow/tensorflow/pull/17652/files#diff-85e323da48079f7831b7e9f6ec24cda2R655\">here</a> for consistency, despite not matching NumPy, especially considering how the vast majority of TensorFlow users assume single precision floats (e.g. for GPU model training).</p>\n<p><code>tf.as_dtype(\"double\") == tf.float64</code>, also.</p>", "body_text": "Wow, you're one fast potato @yongtang! \ud83d\ude03\n\nI think one potential issue is that python's float is implemented as C double, so there are some discrepancies here.\n\nYeah, and I guess it can be a little confusing to have tf.as_dtype(\"float\") be 32-bit while tf.as_dtype(float) would give doubles. I'd probably stick with tf.float32 here for consistency, despite not matching NumPy, especially considering how the vast majority of TensorFlow users assume single precision floats (e.g. for GPU model training).\ntf.as_dtype(\"double\") == tf.float64, also.", "body": "Wow, you're one fast potato @yongtang! \ud83d\ude03\r\n\r\n>I think one potential issue is that python's float is implemented as C double, so there are some discrepancies here.\r\n\r\nYeah, and I guess it can be a little confusing to have `tf.as_dtype(\"float\")` be 32-bit while `tf.as_dtype(float)` would give doubles. I'd probably stick with tf.float32 [here](https://github.com/tensorflow/tensorflow/pull/17652/files#diff-85e323da48079f7831b7e9f6ec24cda2R655) for consistency, despite not matching NumPy, especially considering how the vast majority of TensorFlow users assume single precision floats (e.g. for GPU model training).\r\n\r\n`tf.as_dtype(\"double\") == tf.float64`, also."}