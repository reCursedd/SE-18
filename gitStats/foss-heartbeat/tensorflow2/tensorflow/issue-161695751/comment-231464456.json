{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/231464456", "html_url": "https://github.com/tensorflow/tensorflow/issues/2995#issuecomment-231464456", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2995", "id": 231464456, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMTQ2NDQ1Ng==", "user": {"login": "yluo42", "id": 6149558, "node_id": "MDQ6VXNlcjYxNDk1NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6149558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yluo42", "html_url": "https://github.com/yluo42", "followers_url": "https://api.github.com/users/yluo42/followers", "following_url": "https://api.github.com/users/yluo42/following{/other_user}", "gists_url": "https://api.github.com/users/yluo42/gists{/gist_id}", "starred_url": "https://api.github.com/users/yluo42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yluo42/subscriptions", "organizations_url": "https://api.github.com/users/yluo42/orgs", "repos_url": "https://api.github.com/users/yluo42/repos", "events_url": "https://api.github.com/users/yluo42/events{/privacy}", "received_events_url": "https://api.github.com/users/yluo42/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-08T20:28:57Z", "updated_at": "2016-07-08T20:28:57Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4123635\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/gallupliu\">@gallupliu</a> A simple skeleton is like:</p>\n<div class=\"highlight highlight-source-python\"><pre>output <span class=\"pl-k\">=</span> <span class=\"pl-c1\">input</span>\n<span class=\"pl-k\">for</span> n <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(num_layer):\n        lstm_fw <span class=\"pl-k\">=</span> LSTMCell(n_hidden, <span class=\"pl-v\">state_is_tuple</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n        lstm_bw <span class=\"pl-k\">=</span> LSTMCell(n_hidden, <span class=\"pl-v\">state_is_tuple</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n\n        _initial_state_fw <span class=\"pl-k\">=</span> lstm_fw.zero_state(batch_size, tf.float32)\n        _initial_state_bw <span class=\"pl-k\">=</span> lstm_bw.zero_state(batch_size, tf.float32)\n\n        output, _states <span class=\"pl-k\">=</span> bidirectional_rnn(lstm_fw, lstm_bw, output, \n                                                  <span class=\"pl-v\">initial_state_fw</span><span class=\"pl-k\">=</span>_initial_state_fw,\n                                                  <span class=\"pl-v\">initial_state_bw</span><span class=\"pl-k\">=</span>_initial_state_bw, \n                                                  <span class=\"pl-v\">scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>BLSTM_<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">+</span><span class=\"pl-c1\">str</span>(n<span class=\"pl-k\">+</span><span class=\"pl-c1\">1</span>))\n        output_fw <span class=\"pl-k\">=</span> output[<span class=\"pl-c1\">0</span>]\n        output_bw <span class=\"pl-k\">=</span> output[<span class=\"pl-c1\">1</span>]\n        output <span class=\"pl-k\">=</span> tf.concat(<span class=\"pl-c1\">2</span>, [output_fw, output_bw])</pre></div>\n<p>Using <code>bidirectional_dynamic_rnn</code> would make you create the model faster.</p>", "body_text": "@gallupliu A simple skeleton is like:\noutput = input\nfor n in range(num_layer):\n        lstm_fw = LSTMCell(n_hidden, state_is_tuple=True)\n        lstm_bw = LSTMCell(n_hidden, state_is_tuple=True)\n\n        _initial_state_fw = lstm_fw.zero_state(batch_size, tf.float32)\n        _initial_state_bw = lstm_bw.zero_state(batch_size, tf.float32)\n\n        output, _states = bidirectional_rnn(lstm_fw, lstm_bw, output, \n                                                  initial_state_fw=_initial_state_fw,\n                                                  initial_state_bw=_initial_state_bw, \n                                                  scope='BLSTM_'+str(n+1))\n        output_fw = output[0]\n        output_bw = output[1]\n        output = tf.concat(2, [output_fw, output_bw])\nUsing bidirectional_dynamic_rnn would make you create the model faster.", "body": "@gallupliu A simple skeleton is like:\n\n``` python\noutput = input\nfor n in range(num_layer):\n        lstm_fw = LSTMCell(n_hidden, state_is_tuple=True)\n        lstm_bw = LSTMCell(n_hidden, state_is_tuple=True)\n\n        _initial_state_fw = lstm_fw.zero_state(batch_size, tf.float32)\n        _initial_state_bw = lstm_bw.zero_state(batch_size, tf.float32)\n\n        output, _states = bidirectional_rnn(lstm_fw, lstm_bw, output, \n                                                  initial_state_fw=_initial_state_fw,\n                                                  initial_state_bw=_initial_state_bw, \n                                                  scope='BLSTM_'+str(n+1))\n        output_fw = output[0]\n        output_bw = output[1]\n        output = tf.concat(2, [output_fw, output_bw])\n```\n\nUsing `bidirectional_dynamic_rnn` would make you create the model faster.\n"}