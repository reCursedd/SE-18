{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/246035084", "html_url": "https://github.com/tensorflow/tensorflow/issues/4282#issuecomment-246035084", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4282", "id": 246035084, "node_id": "MDEyOklzc3VlQ29tbWVudDI0NjAzNTA4NA==", "user": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "created_at": "2016-09-09T20:46:56Z", "updated_at": "2016-09-09T20:46:56Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8816362\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rueberger\">@rueberger</a> nice that you found as solution to your immediate problem!<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=592670\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/concretevitamin\">@concretevitamin</a> can correct me if what I say below is wrong, or if we have future plans to improve things.</p>\n<p>I think you can classify this as an \"implementation quirk\".  Let's start with the representation of sparse tensors.  Basically you can think of SparseTensor as a convenient wrapper around 3 underlying tensors, which represent the indices, values and shape independently:<br>\n<a href=\"https://www.tensorflow.org/versions/r0.10/api_docs/python/sparse_ops.html#SparseTensor\" rel=\"nofollow\">https://www.tensorflow.org/versions/r0.10/api_docs/python/sparse_ops.html#SparseTensor</a></p>\n<p>For a regular ops on non-sparse tensors, the shape of the output is determined by the shapes of the input tensors, as you expect.</p>\n<p>Let's say that's all we're given, and we try to implement SparseTensor ourselves, on top of this framework.  Well the problem is that the shape of the SparseTensor is no longer fixed; since it is itself represented as a tensor.</p>\n<p>Another way to look at at:</p>\n<ul>\n<li>The shape of <code>[1,2,3]</code> is <code>[3]</code>, since we have a 1-dimensional vector with 3 elements.</li>\n<li>The shape of <code>[4,6]</code> is <code>[2]</code></li>\n<li>The shape of the <code>shape = [4, 6]</code> variable in your example is <code>[2]</code></li>\n</ul>\n<p>So basically if we limit ourselves to looking at the shapes, and not at the values, we end up the behavior you've reported.  Hope this helps!</p>", "body_text": "@rueberger nice that you found as solution to your immediate problem!\n@concretevitamin can correct me if what I say below is wrong, or if we have future plans to improve things.\nI think you can classify this as an \"implementation quirk\".  Let's start with the representation of sparse tensors.  Basically you can think of SparseTensor as a convenient wrapper around 3 underlying tensors, which represent the indices, values and shape independently:\nhttps://www.tensorflow.org/versions/r0.10/api_docs/python/sparse_ops.html#SparseTensor\nFor a regular ops on non-sparse tensors, the shape of the output is determined by the shapes of the input tensors, as you expect.\nLet's say that's all we're given, and we try to implement SparseTensor ourselves, on top of this framework.  Well the problem is that the shape of the SparseTensor is no longer fixed; since it is itself represented as a tensor.\nAnother way to look at at:\n\nThe shape of [1,2,3] is [3], since we have a 1-dimensional vector with 3 elements.\nThe shape of [4,6] is [2]\nThe shape of the shape = [4, 6] variable in your example is [2]\n\nSo basically if we limit ourselves to looking at the shapes, and not at the values, we end up the behavior you've reported.  Hope this helps!", "body": "@rueberger nice that you found as solution to your immediate problem!\n@concretevitamin can correct me if what I say below is wrong, or if we have future plans to improve things.\n\nI think you can classify this as an \"implementation quirk\".  Let's start with the representation of sparse tensors.  Basically you can think of SparseTensor as a convenient wrapper around 3 underlying tensors, which represent the indices, values and shape independently:\nhttps://www.tensorflow.org/versions/r0.10/api_docs/python/sparse_ops.html#SparseTensor\n\nFor a regular ops on non-sparse tensors, the shape of the output is determined by the shapes of the input tensors, as you expect.\n\nLet's say that's all we're given, and we try to implement SparseTensor ourselves, on top of this framework.  Well the problem is that the shape of the SparseTensor is no longer fixed; since it is itself represented as a tensor.\n\nAnother way to look at at:\n- The shape of `[1,2,3]` is `[3]`, since we have a 1-dimensional vector with 3 elements.\n- The shape of `[4,6]` is `[2]`\n- The shape of the `shape = [4, 6]` variable in your example is `[2]`\n\nSo basically if we limit ourselves to looking at the shapes, and not at the values, we end up the behavior you've reported.  Hope this helps!\n"}