{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4282", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4282/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4282/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4282/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4282", "id": 175842270, "node_id": "MDU6SXNzdWUxNzU4NDIyNzA=", "number": 4282, "title": "Unspecified dimension after tf.sparse_tensor_dense_matmul", "user": {"login": "rueberger", "id": 8816362, "node_id": "MDQ6VXNlcjg4MTYzNjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/8816362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rueberger", "html_url": "https://github.com/rueberger", "followers_url": "https://api.github.com/users/rueberger/followers", "following_url": "https://api.github.com/users/rueberger/following{/other_user}", "gists_url": "https://api.github.com/users/rueberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/rueberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rueberger/subscriptions", "organizations_url": "https://api.github.com/users/rueberger/orgs", "repos_url": "https://api.github.com/users/rueberger/repos", "events_url": "https://api.github.com/users/rueberger/events{/privacy}", "received_events_url": "https://api.github.com/users/rueberger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-09-08T19:30:03Z", "updated_at": "2017-06-16T18:20:10Z", "closed_at": "2017-06-16T18:20:10Z", "author_association": "NONE", "body_html": "<h3>Environment info</h3>\n<p>Operating System:</p>\n<p>Problem encountered on linux CPU build installed from <code>47501a5ebc62fcb8a3d7832722d39997696897dc</code>.</p>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<pre><code>import tensorflow as tf\nindices = [[0, 0], [1, 2]]\nvalues = [1., 1.]\nshape = [4, 6]\ntest_sparse = tf.SparseTensor(indices, values, shape)\nv = tf.ones((6, 1))\n\nsess = tf.Session()\nsess.run(tf.initialize_all_variables())\n\nmult = tf.sparse_tensor_dense_matmul(test_sparse, v)\nprint(mult)\n--&gt; &lt;tf.Tensor 'SparseTensorDenseMatMul_1/SparseTensorDenseMatMul:0' shape=(?, 1) dtype=float32&gt;\n\n# but of course\nsess.run(mult).shape\n--&gt; (4, 1)\n</code></pre>\n<p>My question is: why is it that the shape of <code>mult</code> is partially unspecified before run time? It can be inferred from the shape of <code>test_sparse</code> and <code>v</code> that <code>mult</code> will have shape <code>(4, 1)</code>.</p>\n<p>This is very annoying because it prevents me from initializing a Variable with the result of a sparse matmul as in the following:</p>\n<pre><code>mult_val = tf.Variable(tf.sparse_tensor_dense_matmul(test_sparse, v))\n--&gt; ValueError: initial_value must have a shape specified: Tensor(\"SparseTensorDenseMatMul/SparseTensorDenseMatMul:0\", shape=(?, 1), dtype=float32)\n</code></pre>\n<p>On the other hand, dense matmul has the desired behavior:</p>\n<pre><code>dense_mult = tf.matmul(tf.sparse_tensor_to_dense(test_sparse, v))\ndense_mult.get_shape()\n--&gt; TensorShape([Dimension(4), Dimension(1)])\n</code></pre>\n<p>So why does sparse matmul behave differently? Is this a bug? An implementation quirk?</p>\n<p>In the meanwhile, how can I initialize a Variable with the result of a sparse matmul without having to densify the sparse matrix first?</p>", "body_text": "Environment info\nOperating System:\nProblem encountered on linux CPU build installed from 47501a5ebc62fcb8a3d7832722d39997696897dc.\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nimport tensorflow as tf\nindices = [[0, 0], [1, 2]]\nvalues = [1., 1.]\nshape = [4, 6]\ntest_sparse = tf.SparseTensor(indices, values, shape)\nv = tf.ones((6, 1))\n\nsess = tf.Session()\nsess.run(tf.initialize_all_variables())\n\nmult = tf.sparse_tensor_dense_matmul(test_sparse, v)\nprint(mult)\n--> <tf.Tensor 'SparseTensorDenseMatMul_1/SparseTensorDenseMatMul:0' shape=(?, 1) dtype=float32>\n\n# but of course\nsess.run(mult).shape\n--> (4, 1)\n\nMy question is: why is it that the shape of mult is partially unspecified before run time? It can be inferred from the shape of test_sparse and v that mult will have shape (4, 1).\nThis is very annoying because it prevents me from initializing a Variable with the result of a sparse matmul as in the following:\nmult_val = tf.Variable(tf.sparse_tensor_dense_matmul(test_sparse, v))\n--> ValueError: initial_value must have a shape specified: Tensor(\"SparseTensorDenseMatMul/SparseTensorDenseMatMul:0\", shape=(?, 1), dtype=float32)\n\nOn the other hand, dense matmul has the desired behavior:\ndense_mult = tf.matmul(tf.sparse_tensor_to_dense(test_sparse, v))\ndense_mult.get_shape()\n--> TensorShape([Dimension(4), Dimension(1)])\n\nSo why does sparse matmul behave differently? Is this a bug? An implementation quirk?\nIn the meanwhile, how can I initialize a Variable with the result of a sparse matmul without having to densify the sparse matrix first?", "body": "### Environment info\n\nOperating System:\n\nProblem encountered on linux CPU build installed from `47501a5ebc62fcb8a3d7832722d39997696897dc`.  \n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\n\n```\nimport tensorflow as tf\nindices = [[0, 0], [1, 2]]\nvalues = [1., 1.]\nshape = [4, 6]\ntest_sparse = tf.SparseTensor(indices, values, shape)\nv = tf.ones((6, 1))\n\nsess = tf.Session()\nsess.run(tf.initialize_all_variables())\n\nmult = tf.sparse_tensor_dense_matmul(test_sparse, v)\nprint(mult)\n--> <tf.Tensor 'SparseTensorDenseMatMul_1/SparseTensorDenseMatMul:0' shape=(?, 1) dtype=float32>\n\n# but of course\nsess.run(mult).shape\n--> (4, 1)\n```\n\nMy question is: why is it that the shape of `mult` is partially unspecified before run time? It can be inferred from the shape of `test_sparse` and `v` that `mult` will have shape `(4, 1)`. \n\nThis is very annoying because it prevents me from initializing a Variable with the result of a sparse matmul as in the following:\n\n```\nmult_val = tf.Variable(tf.sparse_tensor_dense_matmul(test_sparse, v))\n--> ValueError: initial_value must have a shape specified: Tensor(\"SparseTensorDenseMatMul/SparseTensorDenseMatMul:0\", shape=(?, 1), dtype=float32)\n```\n\nOn the other hand, dense matmul has the desired behavior:\n\n```\ndense_mult = tf.matmul(tf.sparse_tensor_to_dense(test_sparse, v))\ndense_mult.get_shape()\n--> TensorShape([Dimension(4), Dimension(1)])\n```\n\nSo why does sparse matmul behave differently? Is this a bug? An implementation quirk? \n\nIn the meanwhile, how can I initialize a Variable with the result of a sparse matmul without having to densify the sparse matrix first?\n"}