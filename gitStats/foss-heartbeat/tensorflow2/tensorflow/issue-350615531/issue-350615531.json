{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21616", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21616/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21616/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21616/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/21616", "id": 350615531, "node_id": "MDExOlB1bGxSZXF1ZXN0MjA4NDI0NTI1", "number": 21616, "title": "[Java] Render secondary factory for default output types", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}, {"id": 987666414, "node_id": "MDU6TGFiZWw5ODc2NjY0MTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/ready%20to%20pull", "name": "ready to pull", "color": "2cd643", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "protoget", "id": 5117188, "node_id": "MDQ6VXNlcjUxMTcxODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5117188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/protoget", "html_url": "https://github.com/protoget", "followers_url": "https://api.github.com/users/protoget/followers", "following_url": "https://api.github.com/users/protoget/following{/other_user}", "gists_url": "https://api.github.com/users/protoget/gists{/gist_id}", "starred_url": "https://api.github.com/users/protoget/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/protoget/subscriptions", "organizations_url": "https://api.github.com/users/protoget/orgs", "repos_url": "https://api.github.com/users/protoget/repos", "events_url": "https://api.github.com/users/protoget/events{/privacy}", "received_events_url": "https://api.github.com/users/protoget/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "protoget", "id": 5117188, "node_id": "MDQ6VXNlcjUxMTcxODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5117188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/protoget", "html_url": "https://github.com/protoget", "followers_url": "https://api.github.com/users/protoget/followers", "following_url": "https://api.github.com/users/protoget/following{/other_user}", "gists_url": "https://api.github.com/users/protoget/gists{/gist_id}", "starred_url": "https://api.github.com/users/protoget/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/protoget/subscriptions", "organizations_url": "https://api.github.com/users/protoget/orgs", "repos_url": "https://api.github.com/users/protoget/repos", "events_url": "https://api.github.com/users/protoget/events{/privacy}", "received_events_url": "https://api.github.com/users/protoget/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-08-14T22:08:37Z", "updated_at": "2018-08-28T22:19:58Z", "closed_at": "2018-08-28T22:19:58Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21616", "html_url": "https://github.com/tensorflow/tensorflow/pull/21616", "diff_url": "https://github.com/tensorflow/tensorflow/pull/21616.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/21616.patch"}, "body_html": "<p>This is an API optimization. Right now, when an attribute of an operation is optional (i.e. has a default value if not provided explicitly by the user), it ends up in the <code>Options</code> nested class of that operation. Since the operation factory accepts a vararg value of <code>Options...</code>, it could be passed or left empty.</p>\n<p>The exception is the case where that attribute is the type of an output. Since the value of the attribute alter the generic type of the produce tensors, it need to be passed explicitly in the invokation, like in:</p>\n<pre><code>ArgMax&lt;Long&gt; argMax = ops.argMax(input, dimension, Long.class)\n</code></pre>\n<p>But that makes the signature of the factory a bit too verbose, since most of the time the user would be more than happy with the default output type (<code>Long</code> in this case) and would prefer not specifying it.</p>\n<p>To handle such case, this PR creates a secondary factory method for those operations, where the default output type is implicitly provided by the API. So while it is still possible to the <code>ArgMax</code> the previous (to allow output type customization), it is now also possible to simply call:</p>\n<pre><code>ArgMax&lt;Long&gt; argMax = ops.argMax(input, dimension)\n</code></pre>\n<p>CC: <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> , please note that this PR must be merge after <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"350255513\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/21589\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/21589/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/21589\">#21589</a> (which is already accepted) or it will fail to compile</p>", "body_text": "This is an API optimization. Right now, when an attribute of an operation is optional (i.e. has a default value if not provided explicitly by the user), it ends up in the Options nested class of that operation. Since the operation factory accepts a vararg value of Options..., it could be passed or left empty.\nThe exception is the case where that attribute is the type of an output. Since the value of the attribute alter the generic type of the produce tensors, it need to be passed explicitly in the invokation, like in:\nArgMax<Long> argMax = ops.argMax(input, dimension, Long.class)\n\nBut that makes the signature of the factory a bit too verbose, since most of the time the user would be more than happy with the default output type (Long in this case) and would prefer not specifying it.\nTo handle such case, this PR creates a secondary factory method for those operations, where the default output type is implicitly provided by the API. So while it is still possible to the ArgMax the previous (to allow output type customization), it is now also possible to simply call:\nArgMax<Long> argMax = ops.argMax(input, dimension)\n\nCC: @asimshankar , please note that this PR must be merge after #21589 (which is already accepted) or it will fail to compile", "body": "This is an API optimization. Right now, when an attribute of an operation is optional (i.e. has a default value if not provided explicitly by the user), it ends up in the `Options` nested class of that operation. Since the operation factory accepts a vararg value of `Options...`, it could be passed or left empty.\r\n\r\nThe exception is the case where that attribute is the type of an output. Since the value of the attribute alter the generic type of the produce tensors, it need to be passed explicitly in the invokation, like in:\r\n```\r\nArgMax<Long> argMax = ops.argMax(input, dimension, Long.class)\r\n```\r\nBut that makes the signature of the factory a bit too verbose, since most of the time the user would be more than happy with the default output type (`Long` in this case) and would prefer not specifying it.\r\n\r\nTo handle such case, this PR creates a secondary factory method for those operations, where the default output type is implicitly provided by the API. So while it is still possible to the `ArgMax` the previous (to allow output type customization), it is now also possible to simply call:\r\n```\r\nArgMax<Long> argMax = ops.argMax(input, dimension)\r\n```\r\n\r\nCC: @asimshankar , please note that this PR must be merge after #21589 (which is already accepted) or it will fail to compile "}