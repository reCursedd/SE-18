{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15288", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15288/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15288/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15288/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15288", "id": 281228903, "node_id": "MDU6SXNzdWUyODEyMjg5MDM=", "number": 15288, "title": "Eager: eager mode considerably slower than standard TensorFlow for large matrix multiplications ", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 736653459, "node_id": "MDU6TGFiZWw3MzY2NTM0NTk=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:eager", "name": "comp:eager", "color": "0052cc", "default": false}, {"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-12-12T01:46:28Z", "updated_at": "2018-01-17T19:22:14Z", "closed_at": "2018-01-17T19:22:14Z", "author_association": "NONE", "body_html": "<p>We have been benchmarking eager mode versus standard TensorFlow for large square matrix multiplications, specifically the time to run</p>\n<p>m = tf.matmul(A, B) (in eager mode)</p>\n<p>versus</p>\n<p>m = sess.run(self.c, feed_dict={self.A:A, self.B:B})</p>\n<p>in non-eager mode.</p>\n<p>We find that while runtimes are comparable for small matrices, eager mode is considerably slower for repeated multiplications of large matrices (eg, of dimension 15,000). The first multiplication is fast, but subsequent multiplications take much longer, even after resetting the computation graph. Is this expected behavior? We are running everything on a GPU.</p>", "body_text": "We have been benchmarking eager mode versus standard TensorFlow for large square matrix multiplications, specifically the time to run\nm = tf.matmul(A, B) (in eager mode)\nversus\nm = sess.run(self.c, feed_dict={self.A:A, self.B:B})\nin non-eager mode.\nWe find that while runtimes are comparable for small matrices, eager mode is considerably slower for repeated multiplications of large matrices (eg, of dimension 15,000). The first multiplication is fast, but subsequent multiplications take much longer, even after resetting the computation graph. Is this expected behavior? We are running everything on a GPU.", "body": "We have been benchmarking eager mode versus standard TensorFlow for large square matrix multiplications, specifically the time to run\r\n\r\nm = tf.matmul(A, B) (in eager mode) \r\n\r\nversus \r\n\r\nm = sess.run(self.c, feed_dict={self.A:A, self.B:B})\r\n\r\nin non-eager mode. \r\n\r\nWe find that while runtimes are comparable for small matrices, eager mode is considerably slower for repeated multiplications of large matrices (eg, of dimension 15,000). The first multiplication is fast, but subsequent multiplications take much longer, even after resetting the computation graph. Is this expected behavior? We are running everything on a GPU. \r\n"}