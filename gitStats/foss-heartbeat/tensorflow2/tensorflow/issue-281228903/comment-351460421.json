{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/351460421", "html_url": "https://github.com/tensorflow/tensorflow/issues/15288#issuecomment-351460421", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15288", "id": 351460421, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTQ2MDQyMQ==", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-13T17:19:29Z", "updated_at": "2017-12-13T17:19:29Z", "author_association": "NONE", "body_html": "<p>Thanks! Version info:</p>\n<p>Python 3.4.5 (default, Nov  9 2016, 16:24:59)<br>\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux<br>\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>import tensorflow as tf<br>\ntf.<strong>version</strong><br>\n'1.5.0-dev20171127'</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>a stripped-down version of our code is below, along with our output when we run it. Essentially what we do is compute how long it takes to multiply matrices of various sizes. for each matrix size we run five trials. The odd thing is that for large matrices (10000 x 10000) the first trial is fast, but subsequent multiplications are very slow (see output below code).</p>\n<pre><code>import tensorflow as tf\nimport tensorflow.contrib.eager as tfe\nimport numpy as np\nimport time\nimport functools\n\nimport random\nimport json\nimport sys\n\nclass BenchmarkBaseClass():\n    # checked\n    def __init__(self):\n        self.n_trials = 5\n        self.eager = eager\n    def generate_data(self):\n        pass\n    def run_computation(self, data):\n        pass\n    def time_computation(self):\n        times = []\n        print(\"Benchmarking with eager = %s\" % eager)\n        for i in range(self.n_trials):\n            np.random.seed(i)\n            random.seed(i)\n            data = self.generate_data()\n            t0 = time.time()\n            with tf.device(\"/gpu:0\"):\n                self.run_computation(data)\n            times.append(time.time() - t0)\n            print('Runtime is: %2.3f' % times[-1])\n        return times\n\nclass MatrixMultiplicationBenchmark(BenchmarkBaseClass):\n    # checked\n    def __init__(self, p):\n        self.p = p\n        BenchmarkBaseClass.__init__(self)\n    def generate_data(self):\n        A = np.random.random([self.p, self.p])\n        B = np.random.random([self.p, self.p])\n        if not eager:\n            self.A = tf.placeholder(tf.float32, shape=(self.p, self.p))#tf.constant(A)\n            self.B = tf.placeholder(tf.float32, shape=(self.p, self.p))\n            self.c = tf.matmul(self.A, self.B)#self.a, self.b)\n            init = tf.initialize_all_variables()\n            sess.run(init)\n        return A, B\n    def run_computation(self, matrices):\n        A, B = matrices\n        if eager:\n            m = tf.matmul(A, B)\n        else:\n            m = sess.run(self.c, feed_dict={self.A:A, self.B:B})\n\ndef run_all_trials(benchmark_name):\n    if benchmark_name == 'matrix_multiplication':\n        all_param_sets = [{'p':500}, {'p':1000}, {'p':2000}, {'p':5000}, {'p':10000}]\n        class_to_use = MatrixMultiplicationBenchmark\n    else:\n        raise Exception(\"Invalid benchmark name\")\n\n    all_times = []\n    for param_set in all_param_sets:\n        print('Parameters: %s' % param_set)\n        benchmark = class_to_use(**param_set)\n        times = benchmark.time_computation()\n        all_times.append(times)\n\nbenchmark_name = sys.argv[1]\neager = sys.argv[2]\ntrial_number = sys.argv[3]\n\nassert eager in ['True', 'False']\nassert benchmark_name in ['matrix_multiplication', 'autoencoder', 'matrix_inversion']\nprint(\"Running benchmark: %s\" % benchmark_name)\neager = (eager == 'True')\n\nif eager:\n    tfe.enable_eager_execution()\nelse:\n    sess = tf.Session()\n\nrun_all_trials(benchmark_name)\n</code></pre>\n<p>Output: (run with command python3 mwe.py matrix_multiplication True blar)</p>\n<p>Running benchmark: matrix_multiplication<br>\nParameters: {'p': 500}<br>\nBenchmarking with eager = True<br>\n2017-12-12 20:02:33.330365: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA<br>\n2017-12-12 20:02:33.637878: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1062] Found device 0 with properties:<br>\nname: TITAN X (Pascal) major: 6 minor: 1 memoryClockRate(GHz): 1.531<br>\npciBusID: 0000:81:00.0<br>\ntotalMemory: 11.90GiB freeMemory: 11.76GiB<br>\n2017-12-12 20:02:33.637949: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1152] Creating TensorFlow device (/device:GPU:0) -&gt; (device: 0, name: TITAN X (Pascal), pci bus id: 0000:81:00.0, compute capability: 6.1)<br>\nRuntime is: 8.477<br>\nRuntime is: 0.001<br>\nRuntime is: 0.001<br>\nRuntime is: 0.001<br>\nRuntime is: 0.001<br>\nParameters: {'p': 1000}<br>\nBenchmarking with eager = True<br>\nRuntime is: 0.003<br>\nRuntime is: 0.003<br>\nRuntime is: 0.003<br>\nRuntime is: 0.003<br>\nRuntime is: 0.003<br>\nParameters: {'p': 2000}<br>\nBenchmarking with eager = True<br>\nRuntime is: 0.009<br>\nRuntime is: 0.009<br>\nRuntime is: 0.008<br>\nRuntime is: 0.008<br>\nRuntime is: 0.008<br>\nParameters: {'p': 5000}<br>\nBenchmarking with eager = True<br>\nRuntime is: 0.046<br>\nRuntime is: 0.078<br>\nRuntime is: 0.079<br>\nRuntime is: 0.079<br>\nRuntime is: 0.079<br>\nParameters: {'p': 10000}<br>\nBenchmarking with eager = True<br>\nRuntime is: 0.181<br>\nRuntime is: 2.829<br>\nRuntime is: 2.830<br>\nRuntime is: 2.836<br>\nRuntime is: 2.863</p>", "body_text": "Thanks! Version info:\nPython 3.4.5 (default, Nov  9 2016, 16:24:59)\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport tensorflow as tf\ntf.version\n'1.5.0-dev20171127'\n\n\n\na stripped-down version of our code is below, along with our output when we run it. Essentially what we do is compute how long it takes to multiply matrices of various sizes. for each matrix size we run five trials. The odd thing is that for large matrices (10000 x 10000) the first trial is fast, but subsequent multiplications are very slow (see output below code).\nimport tensorflow as tf\nimport tensorflow.contrib.eager as tfe\nimport numpy as np\nimport time\nimport functools\n\nimport random\nimport json\nimport sys\n\nclass BenchmarkBaseClass():\n    # checked\n    def __init__(self):\n        self.n_trials = 5\n        self.eager = eager\n    def generate_data(self):\n        pass\n    def run_computation(self, data):\n        pass\n    def time_computation(self):\n        times = []\n        print(\"Benchmarking with eager = %s\" % eager)\n        for i in range(self.n_trials):\n            np.random.seed(i)\n            random.seed(i)\n            data = self.generate_data()\n            t0 = time.time()\n            with tf.device(\"/gpu:0\"):\n                self.run_computation(data)\n            times.append(time.time() - t0)\n            print('Runtime is: %2.3f' % times[-1])\n        return times\n\nclass MatrixMultiplicationBenchmark(BenchmarkBaseClass):\n    # checked\n    def __init__(self, p):\n        self.p = p\n        BenchmarkBaseClass.__init__(self)\n    def generate_data(self):\n        A = np.random.random([self.p, self.p])\n        B = np.random.random([self.p, self.p])\n        if not eager:\n            self.A = tf.placeholder(tf.float32, shape=(self.p, self.p))#tf.constant(A)\n            self.B = tf.placeholder(tf.float32, shape=(self.p, self.p))\n            self.c = tf.matmul(self.A, self.B)#self.a, self.b)\n            init = tf.initialize_all_variables()\n            sess.run(init)\n        return A, B\n    def run_computation(self, matrices):\n        A, B = matrices\n        if eager:\n            m = tf.matmul(A, B)\n        else:\n            m = sess.run(self.c, feed_dict={self.A:A, self.B:B})\n\ndef run_all_trials(benchmark_name):\n    if benchmark_name == 'matrix_multiplication':\n        all_param_sets = [{'p':500}, {'p':1000}, {'p':2000}, {'p':5000}, {'p':10000}]\n        class_to_use = MatrixMultiplicationBenchmark\n    else:\n        raise Exception(\"Invalid benchmark name\")\n\n    all_times = []\n    for param_set in all_param_sets:\n        print('Parameters: %s' % param_set)\n        benchmark = class_to_use(**param_set)\n        times = benchmark.time_computation()\n        all_times.append(times)\n\nbenchmark_name = sys.argv[1]\neager = sys.argv[2]\ntrial_number = sys.argv[3]\n\nassert eager in ['True', 'False']\nassert benchmark_name in ['matrix_multiplication', 'autoencoder', 'matrix_inversion']\nprint(\"Running benchmark: %s\" % benchmark_name)\neager = (eager == 'True')\n\nif eager:\n    tfe.enable_eager_execution()\nelse:\n    sess = tf.Session()\n\nrun_all_trials(benchmark_name)\n\nOutput: (run with command python3 mwe.py matrix_multiplication True blar)\nRunning benchmark: matrix_multiplication\nParameters: {'p': 500}\nBenchmarking with eager = True\n2017-12-12 20:02:33.330365: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA\n2017-12-12 20:02:33.637878: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1062] Found device 0 with properties:\nname: TITAN X (Pascal) major: 6 minor: 1 memoryClockRate(GHz): 1.531\npciBusID: 0000:81:00.0\ntotalMemory: 11.90GiB freeMemory: 11.76GiB\n2017-12-12 20:02:33.637949: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1152] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: TITAN X (Pascal), pci bus id: 0000:81:00.0, compute capability: 6.1)\nRuntime is: 8.477\nRuntime is: 0.001\nRuntime is: 0.001\nRuntime is: 0.001\nRuntime is: 0.001\nParameters: {'p': 1000}\nBenchmarking with eager = True\nRuntime is: 0.003\nRuntime is: 0.003\nRuntime is: 0.003\nRuntime is: 0.003\nRuntime is: 0.003\nParameters: {'p': 2000}\nBenchmarking with eager = True\nRuntime is: 0.009\nRuntime is: 0.009\nRuntime is: 0.008\nRuntime is: 0.008\nRuntime is: 0.008\nParameters: {'p': 5000}\nBenchmarking with eager = True\nRuntime is: 0.046\nRuntime is: 0.078\nRuntime is: 0.079\nRuntime is: 0.079\nRuntime is: 0.079\nParameters: {'p': 10000}\nBenchmarking with eager = True\nRuntime is: 0.181\nRuntime is: 2.829\nRuntime is: 2.830\nRuntime is: 2.836\nRuntime is: 2.863", "body": "Thanks! Version info: \r\n\r\nPython 3.4.5 (default, Nov  9 2016, 16:24:59)\r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import tensorflow as tf\r\n>>> tf.__version__\r\n'1.5.0-dev20171127'\r\n\r\na stripped-down version of our code is below, along with our output when we run it. Essentially what we do is compute how long it takes to multiply matrices of various sizes. for each matrix size we run five trials. The odd thing is that for large matrices (10000 x 10000) the first trial is fast, but subsequent multiplications are very slow (see output below code).\r\n\r\n```\r\nimport tensorflow as tf\r\nimport tensorflow.contrib.eager as tfe\r\nimport numpy as np\r\nimport time\r\nimport functools\r\n\r\nimport random\r\nimport json\r\nimport sys\r\n\r\nclass BenchmarkBaseClass():\r\n    # checked\r\n    def __init__(self):\r\n        self.n_trials = 5\r\n        self.eager = eager\r\n    def generate_data(self):\r\n        pass\r\n    def run_computation(self, data):\r\n        pass\r\n    def time_computation(self):\r\n        times = []\r\n        print(\"Benchmarking with eager = %s\" % eager)\r\n        for i in range(self.n_trials):\r\n            np.random.seed(i)\r\n            random.seed(i)\r\n            data = self.generate_data()\r\n            t0 = time.time()\r\n            with tf.device(\"/gpu:0\"):\r\n                self.run_computation(data)\r\n            times.append(time.time() - t0)\r\n            print('Runtime is: %2.3f' % times[-1])\r\n        return times\r\n\r\nclass MatrixMultiplicationBenchmark(BenchmarkBaseClass):\r\n    # checked\r\n    def __init__(self, p):\r\n        self.p = p\r\n        BenchmarkBaseClass.__init__(self)\r\n    def generate_data(self):\r\n        A = np.random.random([self.p, self.p])\r\n        B = np.random.random([self.p, self.p])\r\n        if not eager:\r\n            self.A = tf.placeholder(tf.float32, shape=(self.p, self.p))#tf.constant(A)\r\n            self.B = tf.placeholder(tf.float32, shape=(self.p, self.p))\r\n            self.c = tf.matmul(self.A, self.B)#self.a, self.b)\r\n            init = tf.initialize_all_variables()\r\n            sess.run(init)\r\n        return A, B\r\n    def run_computation(self, matrices):\r\n        A, B = matrices\r\n        if eager:\r\n            m = tf.matmul(A, B)\r\n        else:\r\n            m = sess.run(self.c, feed_dict={self.A:A, self.B:B})\r\n\r\ndef run_all_trials(benchmark_name):\r\n    if benchmark_name == 'matrix_multiplication':\r\n        all_param_sets = [{'p':500}, {'p':1000}, {'p':2000}, {'p':5000}, {'p':10000}]\r\n        class_to_use = MatrixMultiplicationBenchmark\r\n    else:\r\n        raise Exception(\"Invalid benchmark name\")\r\n\r\n    all_times = []\r\n    for param_set in all_param_sets:\r\n        print('Parameters: %s' % param_set)\r\n        benchmark = class_to_use(**param_set)\r\n        times = benchmark.time_computation()\r\n        all_times.append(times)\r\n\r\nbenchmark_name = sys.argv[1]\r\neager = sys.argv[2]\r\ntrial_number = sys.argv[3]\r\n\r\nassert eager in ['True', 'False']\r\nassert benchmark_name in ['matrix_multiplication', 'autoencoder', 'matrix_inversion']\r\nprint(\"Running benchmark: %s\" % benchmark_name)\r\neager = (eager == 'True')\r\n\r\nif eager:\r\n    tfe.enable_eager_execution()\r\nelse:\r\n    sess = tf.Session()\r\n\r\nrun_all_trials(benchmark_name)\r\n```\r\n\r\nOutput: (run with command python3 mwe.py matrix_multiplication True blar)\r\n\r\nRunning benchmark: matrix_multiplication\r\nParameters: {'p': 500}\r\nBenchmarking with eager = True\r\n2017-12-12 20:02:33.330365: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA\r\n2017-12-12 20:02:33.637878: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1062] Found device 0 with properties:\r\nname: TITAN X (Pascal) major: 6 minor: 1 memoryClockRate(GHz): 1.531\r\npciBusID: 0000:81:00.0\r\ntotalMemory: 11.90GiB freeMemory: 11.76GiB\r\n2017-12-12 20:02:33.637949: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1152] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: TITAN X (Pascal), pci bus id: 0000:81:00.0, compute capability: 6.1)\r\nRuntime is: 8.477\r\nRuntime is: 0.001\r\nRuntime is: 0.001\r\nRuntime is: 0.001\r\nRuntime is: 0.001\r\nParameters: {'p': 1000}\r\nBenchmarking with eager = True\r\nRuntime is: 0.003\r\nRuntime is: 0.003\r\nRuntime is: 0.003\r\nRuntime is: 0.003\r\nRuntime is: 0.003\r\nParameters: {'p': 2000}\r\nBenchmarking with eager = True\r\nRuntime is: 0.009\r\nRuntime is: 0.009\r\nRuntime is: 0.008\r\nRuntime is: 0.008\r\nRuntime is: 0.008\r\nParameters: {'p': 5000}\r\nBenchmarking with eager = True\r\nRuntime is: 0.046\r\nRuntime is: 0.078\r\nRuntime is: 0.079\r\nRuntime is: 0.079\r\nRuntime is: 0.079\r\nParameters: {'p': 10000}\r\nBenchmarking with eager = True\r\nRuntime is: 0.181\r\nRuntime is: 2.829\r\nRuntime is: 2.830\r\nRuntime is: 2.836\r\nRuntime is: 2.863"}