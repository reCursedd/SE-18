{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/233665028", "html_url": "https://github.com/tensorflow/tensorflow/issues/3354#issuecomment-233665028", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3354", "id": 233665028, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzY2NTAyOA==", "user": {"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-19T15:13:56Z", "updated_at": "2016-07-19T15:13:56Z", "author_association": "MEMBER", "body_html": "<p>I just checked in PR <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"166230073\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/3382\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/3382/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/3382\">#3382</a> which fixes the immediate problem, and also makes it less likely that it will happen in the future. The summary is that we used to have an explicit list of files that were needed for the core library, and this was fragile because individual .cc files are often added, breaking the build. To make things more robust, I've switched over to a wildcard-based approach together with a blacklist of excluded files, which mirrors the Bazel build rule more closely and so should break less often.</p>\n<p>Please give this a try if you get a chance and let me know how it goes.</p>", "body_text": "I just checked in PR #3382 which fixes the immediate problem, and also makes it less likely that it will happen in the future. The summary is that we used to have an explicit list of files that were needed for the core library, and this was fragile because individual .cc files are often added, breaking the build. To make things more robust, I've switched over to a wildcard-based approach together with a blacklist of excluded files, which mirrors the Bazel build rule more closely and so should break less often.\nPlease give this a try if you get a chance and let me know how it goes.", "body": "I just checked in PR #3382 which fixes the immediate problem, and also makes it less likely that it will happen in the future. The summary is that we used to have an explicit list of files that were needed for the core library, and this was fragile because individual .cc files are often added, breaking the build. To make things more robust, I've switched over to a wildcard-based approach together with a blacklist of excluded files, which mirrors the Bazel build rule more closely and so should break less often.\n\nPlease give this a try if you get a chance and let me know how it goes.\n"}