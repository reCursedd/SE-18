{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19627", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19627/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19627/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19627/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19627", "id": 327383548, "node_id": "MDU6SXNzdWUzMjczODM1NDg=", "number": 19627, "title": "tf.image.resize_bilinear vs cv2.resize", "user": {"login": "holyseven", "id": 13829174, "node_id": "MDQ6VXNlcjEzODI5MTc0", "avatar_url": "https://avatars3.githubusercontent.com/u/13829174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/holyseven", "html_url": "https://github.com/holyseven", "followers_url": "https://api.github.com/users/holyseven/followers", "following_url": "https://api.github.com/users/holyseven/following{/other_user}", "gists_url": "https://api.github.com/users/holyseven/gists{/gist_id}", "starred_url": "https://api.github.com/users/holyseven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/holyseven/subscriptions", "organizations_url": "https://api.github.com/users/holyseven/orgs", "repos_url": "https://api.github.com/users/holyseven/repos", "events_url": "https://api.github.com/users/holyseven/events{/privacy}", "received_events_url": "https://api.github.com/users/holyseven/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-29T15:54:32Z", "updated_at": "2018-05-30T22:54:27Z", "closed_at": "2018-05-29T18:02:17Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu14.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4.0</li>\n<li><strong>Python version</strong>: 2.7</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>Not to compare with opencv, but ... when the scale factor is larger, the unchanged part at right-bottom is larger. I found this a little bothersome. Set <code>align_corners=True</code> is not always reasonable because the four corners are not always supposed to be fixed in the corner.</p>\n<p>So is there anyway to make it a little more \"symmetry\"?</p>\n<p>Code to reproduce:</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\nimport cv2\nnp.set_printoptions(precision=3)\nresize_shape = (10, 10)\n\na = np.ones((1, 2, 2, 1), dtype=np.float32)\na[0, 0, 0, 0] = 5.0\na[0, 1, 1, 0] = 5.0\n\nb = tf.constant(a, dtype=tf.float32)\nc = tf.image.resize_bilinear(b, resize_shape)\n\nwith tf.Session() as sess:\n    np_c = sess.run(c)\n    print np_c[0, :, :, 0]\n\nprint cv2.resize(a[0], resize_shape, interpolation=cv2.INTER_LINEAR)\n</code></pre>\n<p>Obtained results:</p>\n<pre><code># tf.image.resize_bilinear\n[[ 5.    4.2   3.4   2.6   1.8   1.    1.    1.    1.    1.  ]\n [ 4.2   3.72  3.24  2.76  2.28  1.8   1.8   1.8   1.8   1.8 ]\n [ 3.4   3.24  3.08  2.92  2.76  2.6   2.6   2.6   2.6   2.6 ]\n [ 2.6   2.76  2.92  3.08  3.24  3.4   3.4   3.4   3.4   3.4 ]\n [ 1.8   2.28  2.76  3.24  3.72  4.2   4.2   4.2   4.2   4.2 ]\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]]\n# cv2.resize\n[[ 5.    5.    5.    4.2   3.4   2.6   1.8   1.    1.    1.  ]\n [ 5.    5.    5.    4.2   3.4   2.6   1.8   1.    1.    1.  ]\n [ 5.    5.    5.    4.2   3.4   2.6   1.8   1.    1.    1.  ]\n [ 4.2   4.2   4.2   3.72  3.24  2.76  2.28  1.8   1.8   1.8 ]\n [ 3.4   3.4   3.4   3.24  3.08  2.92  2.76  2.6   2.6   2.6 ]\n [ 2.6   2.6   2.6   2.76  2.92  3.08  3.24  3.4   3.4   3.4 ]\n [ 1.8   1.8   1.8   2.28  2.76  3.24  3.72  4.2   4.2   4.2 ]\n [ 1.    1.    1.    1.8   2.6   3.4   4.2   5.    5.    5.  ]\n [ 1.    1.    1.    1.8   2.6   3.4   4.2   5.    5.    5.  ]\n [ 1.    1.    1.    1.8   2.6   3.4   4.2   5.    5.    5.  ]]\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu14.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.4.0\nPython version: 2.7\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nNot to compare with opencv, but ... when the scale factor is larger, the unchanged part at right-bottom is larger. I found this a little bothersome. Set align_corners=True is not always reasonable because the four corners are not always supposed to be fixed in the corner.\nSo is there anyway to make it a little more \"symmetry\"?\nCode to reproduce:\nimport tensorflow as tf\nimport numpy as np\nimport cv2\nnp.set_printoptions(precision=3)\nresize_shape = (10, 10)\n\na = np.ones((1, 2, 2, 1), dtype=np.float32)\na[0, 0, 0, 0] = 5.0\na[0, 1, 1, 0] = 5.0\n\nb = tf.constant(a, dtype=tf.float32)\nc = tf.image.resize_bilinear(b, resize_shape)\n\nwith tf.Session() as sess:\n    np_c = sess.run(c)\n    print np_c[0, :, :, 0]\n\nprint cv2.resize(a[0], resize_shape, interpolation=cv2.INTER_LINEAR)\n\nObtained results:\n# tf.image.resize_bilinear\n[[ 5.    4.2   3.4   2.6   1.8   1.    1.    1.    1.    1.  ]\n [ 4.2   3.72  3.24  2.76  2.28  1.8   1.8   1.8   1.8   1.8 ]\n [ 3.4   3.24  3.08  2.92  2.76  2.6   2.6   2.6   2.6   2.6 ]\n [ 2.6   2.76  2.92  3.08  3.24  3.4   3.4   3.4   3.4   3.4 ]\n [ 1.8   2.28  2.76  3.24  3.72  4.2   4.2   4.2   4.2   4.2 ]\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]]\n# cv2.resize\n[[ 5.    5.    5.    4.2   3.4   2.6   1.8   1.    1.    1.  ]\n [ 5.    5.    5.    4.2   3.4   2.6   1.8   1.    1.    1.  ]\n [ 5.    5.    5.    4.2   3.4   2.6   1.8   1.    1.    1.  ]\n [ 4.2   4.2   4.2   3.72  3.24  2.76  2.28  1.8   1.8   1.8 ]\n [ 3.4   3.4   3.4   3.24  3.08  2.92  2.76  2.6   2.6   2.6 ]\n [ 2.6   2.6   2.6   2.76  2.92  3.08  3.24  3.4   3.4   3.4 ]\n [ 1.8   1.8   1.8   2.28  2.76  3.24  3.72  4.2   4.2   4.2 ]\n [ 1.    1.    1.    1.8   2.6   3.4   4.2   5.    5.    5.  ]\n [ 1.    1.    1.    1.8   2.6   3.4   4.2   5.    5.    5.  ]\n [ 1.    1.    1.    1.8   2.6   3.4   4.2   5.    5.    5.  ]]", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu14.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.4.0\r\n- **Python version**: 2.7\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\nNot to compare with opencv, but ... when the scale factor is larger, the unchanged part at right-bottom is larger. I found this a little bothersome. Set `align_corners=True` is not always reasonable because the four corners are not always supposed to be fixed in the corner.\r\n\r\nSo is there anyway to make it a little more \"symmetry\"?\r\n\r\nCode to reproduce:\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\nimport cv2\r\nnp.set_printoptions(precision=3)\r\nresize_shape = (10, 10)\r\n\r\na = np.ones((1, 2, 2, 1), dtype=np.float32)\r\na[0, 0, 0, 0] = 5.0\r\na[0, 1, 1, 0] = 5.0\r\n\r\nb = tf.constant(a, dtype=tf.float32)\r\nc = tf.image.resize_bilinear(b, resize_shape)\r\n\r\nwith tf.Session() as sess:\r\n    np_c = sess.run(c)\r\n    print np_c[0, :, :, 0]\r\n\r\nprint cv2.resize(a[0], resize_shape, interpolation=cv2.INTER_LINEAR)\r\n```\r\nObtained results:\r\n```\r\n# tf.image.resize_bilinear\r\n[[ 5.    4.2   3.4   2.6   1.8   1.    1.    1.    1.    1.  ]\r\n [ 4.2   3.72  3.24  2.76  2.28  1.8   1.8   1.8   1.8   1.8 ]\r\n [ 3.4   3.24  3.08  2.92  2.76  2.6   2.6   2.6   2.6   2.6 ]\r\n [ 2.6   2.76  2.92  3.08  3.24  3.4   3.4   3.4   3.4   3.4 ]\r\n [ 1.8   2.28  2.76  3.24  3.72  4.2   4.2   4.2   4.2   4.2 ]\r\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]\r\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]\r\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]\r\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]\r\n [ 1.    1.8   2.6   3.4   4.2   5.    5.    5.    5.    5.  ]]\r\n# cv2.resize\r\n[[ 5.    5.    5.    4.2   3.4   2.6   1.8   1.    1.    1.  ]\r\n [ 5.    5.    5.    4.2   3.4   2.6   1.8   1.    1.    1.  ]\r\n [ 5.    5.    5.    4.2   3.4   2.6   1.8   1.    1.    1.  ]\r\n [ 4.2   4.2   4.2   3.72  3.24  2.76  2.28  1.8   1.8   1.8 ]\r\n [ 3.4   3.4   3.4   3.24  3.08  2.92  2.76  2.6   2.6   2.6 ]\r\n [ 2.6   2.6   2.6   2.76  2.92  3.08  3.24  3.4   3.4   3.4 ]\r\n [ 1.8   1.8   1.8   2.28  2.76  3.24  3.72  4.2   4.2   4.2 ]\r\n [ 1.    1.    1.    1.8   2.6   3.4   4.2   5.    5.    5.  ]\r\n [ 1.    1.    1.    1.8   2.6   3.4   4.2   5.    5.    5.  ]\r\n [ 1.    1.    1.    1.8   2.6   3.4   4.2   5.    5.    5.  ]]\r\n```\r\n\r\n\r\n"}