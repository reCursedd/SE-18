{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/374734853", "html_url": "https://github.com/tensorflow/tensorflow/issues/17246#issuecomment-374734853", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17246", "id": 374734853, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDczNDg1Mw==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-20T19:54:30Z", "updated_at": "2018-03-20T19:54:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p>That benchmark was done using a loop with calls to <code>_mm256_stream_load_si256</code> and <code>_mm256_stream_si256</code> rather than memcpy.</p>\n<p>I tried using <a href=\"https://github.com/diux-dev/cluster/blob/master/psbench/memcpy_classic.cc\">regular memcpy</a> and the performance is very close, so I think stock memcpy is already using stream version.</p>\n<p>However, single threaded performance is quite far from multi-threaded performance. Here's an experiment on AWS c5.18xlarge instance (dual 18-core Skylake), it runs 6x faster than single-threaded memcpy, copying 100MB array in 2.7ms. Skylakes <a href=\"https://www.anandtech.com/show/11544/intel-skylake-ep-vs-amd-epyc-7000-cpu-battle-of-the-decade/12\" rel=\"nofollow\">supposedly have</a> 200 GB/second memory bandwidth</p>\n<pre><code>wget -N https://raw.githubusercontent.com/diux-dev/cluster/master/psbench/memcpy_fast.cc\ng++ -std=c++0x memcpy_fast.cc -pthread -march=native -O6 -o memcpy_fast\nnumactl --cpunodebind 0 --membind 0 ./memcpy_fast 100 16\nStream copy 16 threads: 2.7 ms, 37.33 GB/sec\nStream copy 16 threads: 2.7 ms, 37.41 GB/sec\nStream copy 16 threads: 2.7 ms, 37.19 GB/sec\nStream copy 16 threads: 2.7 ms, 37.27 GB/sec\n</code></pre>\n<p>This <a href=\"http://web.archive.org/web/20131223174037/http://software.intel.com/en-us/articles/memcpy-performance/\" rel=\"nofollow\">article</a> talks limitations of default <code>memcpy</code>. Since it's precompiled, it doesn't use the latest instructions (ie, Skylakes have AVX512). Apparently <code>icc</code> replaces <code>memcpy</code> with machine optimized version</p>", "body_text": "That benchmark was done using a loop with calls to _mm256_stream_load_si256 and _mm256_stream_si256 rather than memcpy.\nI tried using regular memcpy and the performance is very close, so I think stock memcpy is already using stream version.\nHowever, single threaded performance is quite far from multi-threaded performance. Here's an experiment on AWS c5.18xlarge instance (dual 18-core Skylake), it runs 6x faster than single-threaded memcpy, copying 100MB array in 2.7ms. Skylakes supposedly have 200 GB/second memory bandwidth\nwget -N https://raw.githubusercontent.com/diux-dev/cluster/master/psbench/memcpy_fast.cc\ng++ -std=c++0x memcpy_fast.cc -pthread -march=native -O6 -o memcpy_fast\nnumactl --cpunodebind 0 --membind 0 ./memcpy_fast 100 16\nStream copy 16 threads: 2.7 ms, 37.33 GB/sec\nStream copy 16 threads: 2.7 ms, 37.41 GB/sec\nStream copy 16 threads: 2.7 ms, 37.19 GB/sec\nStream copy 16 threads: 2.7 ms, 37.27 GB/sec\n\nThis article talks limitations of default memcpy. Since it's precompiled, it doesn't use the latest instructions (ie, Skylakes have AVX512). Apparently icc replaces memcpy with machine optimized version", "body": "That benchmark was done using a loop with calls to `_mm256_stream_load_si256` and `_mm256_stream_si256` rather than memcpy. \r\n\r\nI tried using [regular memcpy](https://github.com/diux-dev/cluster/blob/master/psbench/memcpy_classic.cc) and the performance is very close, so I think stock memcpy is already using stream version.\r\n\r\nHowever, single threaded performance is quite far from multi-threaded performance. Here's an experiment on AWS c5.18xlarge instance (dual 18-core Skylake), it runs 6x faster than single-threaded memcpy, copying 100MB array in 2.7ms. Skylakes [supposedly have](https://www.anandtech.com/show/11544/intel-skylake-ep-vs-amd-epyc-7000-cpu-battle-of-the-decade/12) 200 GB/second memory bandwidth\r\n\r\n```\r\nwget -N https://raw.githubusercontent.com/diux-dev/cluster/master/psbench/memcpy_fast.cc\r\ng++ -std=c++0x memcpy_fast.cc -pthread -march=native -O6 -o memcpy_fast\r\nnumactl --cpunodebind 0 --membind 0 ./memcpy_fast 100 16\r\nStream copy 16 threads: 2.7 ms, 37.33 GB/sec\r\nStream copy 16 threads: 2.7 ms, 37.41 GB/sec\r\nStream copy 16 threads: 2.7 ms, 37.19 GB/sec\r\nStream copy 16 threads: 2.7 ms, 37.27 GB/sec\r\n```\r\n\r\nThis [article](http://web.archive.org/web/20131223174037/http://software.intel.com/en-us/articles/memcpy-performance/) talks limitations of default `memcpy`. Since it's precompiled, it doesn't use the latest instructions (ie, Skylakes have AVX512). Apparently `icc` replaces `memcpy` with machine optimized version"}