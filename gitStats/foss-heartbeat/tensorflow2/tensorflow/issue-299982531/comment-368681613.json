{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/368681613", "html_url": "https://github.com/tensorflow/tensorflow/issues/17246#issuecomment-368681613", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17246", "id": 368681613, "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODY4MTYxMw==", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-26T22:58:33Z", "updated_at": "2018-02-26T22:58:33Z", "author_association": "MEMBER", "body_html": "<p>The code which fetches tensors is <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/core/ndarray_tensor.cc#L331\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/core/ndarray_tensor.cc#L331</a> which calls <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.cc#L227\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.cc#L227</a> which triggers a copy if the refcount is not 1 (and it's never 1 for variables). It does the copy with normal memcpy.</p>\n<p>I remember people caring passionately about us not simply forwarding the memory when tensorflow still holds a reference to it as it can break some py_func use cases and some multithreaded use cases.</p>\n<p>So I guess we should use a faster memcpy?</p>", "body_text": "The code which fetches tensors is https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/core/ndarray_tensor.cc#L331 which calls https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.cc#L227 which triggers a copy if the refcount is not 1 (and it's never 1 for variables). It does the copy with normal memcpy.\nI remember people caring passionately about us not simply forwarding the memory when tensorflow still holds a reference to it as it can break some py_func use cases and some multithreaded use cases.\nSo I guess we should use a faster memcpy?", "body": "The code which fetches tensors is https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/lib/core/ndarray_tensor.cc#L331 which calls https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.cc#L227 which triggers a copy if the refcount is not 1 (and it's never 1 for variables). It does the copy with normal memcpy. \r\n\r\nI remember people caring passionately about us not simply forwarding the memory when tensorflow still holds a reference to it as it can break some py_func use cases and some multithreaded use cases.\r\n\r\nSo I guess we should use a faster memcpy?\r\n"}