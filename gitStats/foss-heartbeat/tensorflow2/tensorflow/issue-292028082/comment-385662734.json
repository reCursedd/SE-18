{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/385662734", "html_url": "https://github.com/tensorflow/tensorflow/issues/16468#issuecomment-385662734", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16468", "id": 385662734, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTY2MjczNA==", "user": {"login": "bhack", "id": 1710528, "node_id": "MDQ6VXNlcjE3MTA1Mjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1710528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bhack", "html_url": "https://github.com/bhack", "followers_url": "https://api.github.com/users/bhack/followers", "following_url": "https://api.github.com/users/bhack/following{/other_user}", "gists_url": "https://api.github.com/users/bhack/gists{/gist_id}", "starred_url": "https://api.github.com/users/bhack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bhack/subscriptions", "organizations_url": "https://api.github.com/users/bhack/orgs", "repos_url": "https://api.github.com/users/bhack/repos", "events_url": "https://api.github.com/users/bhack/events{/privacy}", "received_events_url": "https://api.github.com/users/bhack/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-01T12:45:38Z", "updated_at": "2018-05-01T12:45:38Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I've also tried the to visualize the official <a href=\"https://keras.io/getting-started/functional-api-guide/#more-examples\" rel=\"nofollow\">Shared vision model</a>.</p>\n<pre><code>digit_input = ks.Input(shape=(27, 27, 1))\nx = ks.layers.Conv2D(64, (3, 3))(digit_input)\nx = ks.layers.Conv2D(64, (3, 3))(x)\nx = ks.layers.MaxPooling2D((2, 2))(x)\nout = ks.layers.Flatten()(x)\n\nvision_model = ks.Model(digit_input, out)\n\n# Then define the tell-digits-apart model\ndigit_a = ks.Input(shape=(27, 27, 1))\ndigit_b = ks.Input(shape=(27, 27, 1))\n\n# The vision model will be shared, weights and all\nout_a = vision_model(digit_a)\nout_b = vision_model(digit_b)\n\nconcatenated = ks.layers.concatenate([out_a, out_b])\nout = ks.layers.Dense(1, activation='sigmoid')(concatenated)\n\nclassification_model = ks.Model([digit_a, digit_b], out)\n</code></pre>\n<p>And seems that there is still an external branch<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/1710528/39473072-5572d272-4d4d-11e8-88a8-1bde5d9fabc5.png\"><img src=\"https://user-images.githubusercontent.com/1710528/39473072-5572d272-4d4d-11e8-88a8-1bde5d9fabc5.png\" alt=\"keras_model\" style=\"max-width:100%;\"></a></p>", "body_text": "I've also tried the to visualize the official Shared vision model.\ndigit_input = ks.Input(shape=(27, 27, 1))\nx = ks.layers.Conv2D(64, (3, 3))(digit_input)\nx = ks.layers.Conv2D(64, (3, 3))(x)\nx = ks.layers.MaxPooling2D((2, 2))(x)\nout = ks.layers.Flatten()(x)\n\nvision_model = ks.Model(digit_input, out)\n\n# Then define the tell-digits-apart model\ndigit_a = ks.Input(shape=(27, 27, 1))\ndigit_b = ks.Input(shape=(27, 27, 1))\n\n# The vision model will be shared, weights and all\nout_a = vision_model(digit_a)\nout_b = vision_model(digit_b)\n\nconcatenated = ks.layers.concatenate([out_a, out_b])\nout = ks.layers.Dense(1, activation='sigmoid')(concatenated)\n\nclassification_model = ks.Model([digit_a, digit_b], out)\n\nAnd seems that there is still an external branch", "body": "I've also tried the to visualize the official [Shared vision model](https://keras.io/getting-started/functional-api-guide/#more-examples).\r\n```\r\ndigit_input = ks.Input(shape=(27, 27, 1))\r\nx = ks.layers.Conv2D(64, (3, 3))(digit_input)\r\nx = ks.layers.Conv2D(64, (3, 3))(x)\r\nx = ks.layers.MaxPooling2D((2, 2))(x)\r\nout = ks.layers.Flatten()(x)\r\n\r\nvision_model = ks.Model(digit_input, out)\r\n\r\n# Then define the tell-digits-apart model\r\ndigit_a = ks.Input(shape=(27, 27, 1))\r\ndigit_b = ks.Input(shape=(27, 27, 1))\r\n\r\n# The vision model will be shared, weights and all\r\nout_a = vision_model(digit_a)\r\nout_b = vision_model(digit_b)\r\n\r\nconcatenated = ks.layers.concatenate([out_a, out_b])\r\nout = ks.layers.Dense(1, activation='sigmoid')(concatenated)\r\n\r\nclassification_model = ks.Model([digit_a, digit_b], out)\r\n```\r\nAnd seems that there is still an external branch\r\n![keras_model](https://user-images.githubusercontent.com/1710528/39473072-5572d272-4d4d-11e8-88a8-1bde5d9fabc5.png)\r\n\r\n"}