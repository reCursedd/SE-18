{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/270939646", "html_url": "https://github.com/tensorflow/tensorflow/pull/6662#issuecomment-270939646", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6662", "id": 270939646, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDkzOTY0Ng==", "user": {"login": "Hvass-Labs", "id": 13588114, "node_id": "MDQ6VXNlcjEzNTg4MTE0", "avatar_url": "https://avatars2.githubusercontent.com/u/13588114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hvass-Labs", "html_url": "https://github.com/Hvass-Labs", "followers_url": "https://api.github.com/users/Hvass-Labs/followers", "following_url": "https://api.github.com/users/Hvass-Labs/following{/other_user}", "gists_url": "https://api.github.com/users/Hvass-Labs/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hvass-Labs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hvass-Labs/subscriptions", "organizations_url": "https://api.github.com/users/Hvass-Labs/orgs", "repos_url": "https://api.github.com/users/Hvass-Labs/repos", "events_url": "https://api.github.com/users/Hvass-Labs/events{/privacy}", "received_events_url": "https://api.github.com/users/Hvass-Labs/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-06T16:18:43Z", "updated_at": "2017-01-06T16:18:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I have now added some unit-tests to the pull-request. I have tried to follow the style in <code>image_ops_test.py</code></p>\n<p>I have a few remarks:</p>\n<ul>\n<li>\n<p>It appears that some of the tests in <code>image_ops_test.py</code> merely test the TensorFlow implementation against an equivalent numpy implementation. I'm not sure I agree that this is a good way of testing, because you're likely to make the same mistakes in both implementations. Nevertheless, I didn't want to handcraft large test-cases, so I did the same :-) This has been supplemented with a few small hand-made test-cases, and I also tested the function using a Python Notebook - which is a superior kind of testing, but it cannot be automated.</p>\n</li>\n<li>\n<p>I couldn't quite figure out the naming conventions used for the private test-functions but it is presumably of minor importance how I named private functions in these unit-tests. You may rename them if you wish.</p>\n</li>\n<li>\n<p>I also wanted to test if the proper exception was raised for incorrect arguments, but <code>assertRaises()</code> didn't really seem suited for that purpose.</p>\n</li>\n<li>\n<p>As usual, my code-comments are more verbose. I believe this is very helpful to those of us who don't work on TensorFlow-core every day, as it makes it easier for us to grasp what the intention is with the code.</p>\n</li>\n<li>\n<p>I have not tested using bazel. Officially bazel only supports Ubuntu 15 and I use Ubuntu 16. I did some internet searches and found out that bazel installation may involve several steps and dependencies, and it could be difficult or impossible to remove if something went wrong. I didn't want to take the risk of breaking my Linux or TensorFlow installation just to run this unit-test, as it would take me several days to reinstall everything. So I ran the test-code in the same Python Notebook provided above, and just hacked it slightly with a few imports so it could run there. It should run in bazel. Please test this.</p>\n</li>\n</ul>", "body_text": "I have now added some unit-tests to the pull-request. I have tried to follow the style in image_ops_test.py\nI have a few remarks:\n\n\nIt appears that some of the tests in image_ops_test.py merely test the TensorFlow implementation against an equivalent numpy implementation. I'm not sure I agree that this is a good way of testing, because you're likely to make the same mistakes in both implementations. Nevertheless, I didn't want to handcraft large test-cases, so I did the same :-) This has been supplemented with a few small hand-made test-cases, and I also tested the function using a Python Notebook - which is a superior kind of testing, but it cannot be automated.\n\n\nI couldn't quite figure out the naming conventions used for the private test-functions but it is presumably of minor importance how I named private functions in these unit-tests. You may rename them if you wish.\n\n\nI also wanted to test if the proper exception was raised for incorrect arguments, but assertRaises() didn't really seem suited for that purpose.\n\n\nAs usual, my code-comments are more verbose. I believe this is very helpful to those of us who don't work on TensorFlow-core every day, as it makes it easier for us to grasp what the intention is with the code.\n\n\nI have not tested using bazel. Officially bazel only supports Ubuntu 15 and I use Ubuntu 16. I did some internet searches and found out that bazel installation may involve several steps and dependencies, and it could be difficult or impossible to remove if something went wrong. I didn't want to take the risk of breaking my Linux or TensorFlow installation just to run this unit-test, as it would take me several days to reinstall everything. So I ran the test-code in the same Python Notebook provided above, and just hacked it slightly with a few imports so it could run there. It should run in bazel. Please test this.", "body": "I have now added some unit-tests to the pull-request. I have tried to follow the style in `image_ops_test.py`\r\n\r\nI have a few remarks:\r\n\r\n- It appears that some of the tests in `image_ops_test.py` merely test the TensorFlow implementation against an equivalent numpy implementation. I'm not sure I agree that this is a good way of testing, because you're likely to make the same mistakes in both implementations. Nevertheless, I didn't want to handcraft large test-cases, so I did the same :-) This has been supplemented with a few small hand-made test-cases, and I also tested the function using a Python Notebook - which is a superior kind of testing, but it cannot be automated.\r\n\r\n- I couldn't quite figure out the naming conventions used for the private test-functions but it is presumably of minor importance how I named private functions in these unit-tests. You may rename them if you wish.\r\n\r\n- I also wanted to test if the proper exception was raised for incorrect arguments, but `assertRaises()` didn't really seem suited for that purpose.\r\n\r\n- As usual, my code-comments are more verbose. I believe this is very helpful to those of us who don't work on TensorFlow-core every day, as it makes it easier for us to grasp what the intention is with the code.\r\n\r\n- I have not tested using bazel. Officially bazel only supports Ubuntu 15 and I use Ubuntu 16. I did some internet searches and found out that bazel installation may involve several steps and dependencies, and it could be difficult or impossible to remove if something went wrong. I didn't want to take the risk of breaking my Linux or TensorFlow installation just to run this unit-test, as it would take me several days to reinstall everything. So I ran the test-code in the same Python Notebook provided above, and just hacked it slightly with a few imports so it could run there. It should run in bazel. Please test this.\r\n"}