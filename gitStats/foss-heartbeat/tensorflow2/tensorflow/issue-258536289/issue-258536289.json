{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13127", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13127/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13127/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13127/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13127", "id": 258536289, "node_id": "MDU6SXNzdWUyNTg1MzYyODk=", "number": 13127, "title": "Build Tensorflow on Windows with /MT option", "user": {"login": "alex-petrenko", "id": 5497775, "node_id": "MDQ6VXNlcjU0OTc3NzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5497775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-petrenko", "html_url": "https://github.com/alex-petrenko", "followers_url": "https://api.github.com/users/alex-petrenko/followers", "following_url": "https://api.github.com/users/alex-petrenko/following{/other_user}", "gists_url": "https://api.github.com/users/alex-petrenko/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-petrenko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-petrenko/subscriptions", "organizations_url": "https://api.github.com/users/alex-petrenko/orgs", "repos_url": "https://api.github.com/users/alex-petrenko/repos", "events_url": "https://api.github.com/users/alex-petrenko/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-petrenko/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586558, "node_id": "MDU6TGFiZWw0MDQ1ODY1NTg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:community%20support", "name": "stat:community support", "color": "f4b400", "default": false}, {"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-09-18T16:09:46Z", "updated_at": "2018-04-14T00:38:54Z", "closed_at": "2017-10-15T17:44:24Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10 64-bit</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.3.0 release</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: - (using CMake 3.9.1)</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<pre><code>First: add /MT key to CMAKE_CXX_FLAGS_RELEASE in CMakeLists.txt\nset(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /MT /D_ITERATOR_DEBUG_LEVEL=0\")\n\nThen, CMake and build:\n\n$ cmake .. -G\"Visual Studio 15 2017 Win64\" -Dtensorflow_BUILD_PYTHON_BINDINGS=OFF -Dtensorflow_ENABLE_GRPC_SUPPORT=OFF -Dtensorflow_BUILD_SHARED_LIB=ON\n$ MSBuild /m:2 /p:PreferredToolArchitecture=x64 /p:Configuration=Release tensorflow.vcxproj\n</code></pre>\n<h3>Describe the problem</h3>\n<p>I am getting a lot of link errors of the following type for many 3rd party libraries tensorflow links against:</p>\n<pre><code>(Link target) -&gt;\n         nsync.lib(mu.obj) : error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MD_DynamicRelease' doesn't match value 'MT_StaticRelease' in gen_proto_text_functions.obj [C:\\all\\lib\\tensorflow\\tensorflow\\contrib\\cmake\\bu\n       ild\\proto_text.vcxproj]\n</code></pre>\n<p>I am not really sure if that's supposed to work, so it can be considered a feature request. I would really like to build tensorflow with /MT to make my application as portable as possible.<br>\nCurrently, I build tensorflow.dll with Visual Studio 2017 and default switches (/MD), and therefore the resulting application requires Microsoft Redistributable C++ libraries for Visual Studio 2017.</p>\n<p>If building with /MT is supposed to work, maybe someone could give me a hint how to get it right (and then we can close the issue)? I guess, digging into build options of every third-party library and adding /MT there?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10 64-bit\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): 1.3.0 release\nPython version: 3.6\nBazel version (if compiling from source): - (using CMake 3.9.1)\nExact command to reproduce:\n\nFirst: add /MT key to CMAKE_CXX_FLAGS_RELEASE in CMakeLists.txt\nset(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /MT /D_ITERATOR_DEBUG_LEVEL=0\")\n\nThen, CMake and build:\n\n$ cmake .. -G\"Visual Studio 15 2017 Win64\" -Dtensorflow_BUILD_PYTHON_BINDINGS=OFF -Dtensorflow_ENABLE_GRPC_SUPPORT=OFF -Dtensorflow_BUILD_SHARED_LIB=ON\n$ MSBuild /m:2 /p:PreferredToolArchitecture=x64 /p:Configuration=Release tensorflow.vcxproj\n\nDescribe the problem\nI am getting a lot of link errors of the following type for many 3rd party libraries tensorflow links against:\n(Link target) ->\n         nsync.lib(mu.obj) : error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MD_DynamicRelease' doesn't match value 'MT_StaticRelease' in gen_proto_text_functions.obj [C:\\all\\lib\\tensorflow\\tensorflow\\contrib\\cmake\\bu\n       ild\\proto_text.vcxproj]\n\nI am not really sure if that's supposed to work, so it can be considered a feature request. I would really like to build tensorflow with /MT to make my application as portable as possible.\nCurrently, I build tensorflow.dll with Visual Studio 2017 and default switches (/MD), and therefore the resulting application requires Microsoft Redistributable C++ libraries for Visual Studio 2017.\nIf building with /MT is supposed to work, maybe someone could give me a hint how to get it right (and then we can close the issue)? I guess, digging into build options of every third-party library and adding /MT there?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10 64-bit\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: 1.3.0 release\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: - (using CMake 3.9.1)\r\n- **Exact command to reproduce**:\r\n\r\n```\r\nFirst: add /MT key to CMAKE_CXX_FLAGS_RELEASE in CMakeLists.txt\r\nset(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /MT /D_ITERATOR_DEBUG_LEVEL=0\")\r\n\r\nThen, CMake and build:\r\n\r\n$ cmake .. -G\"Visual Studio 15 2017 Win64\" -Dtensorflow_BUILD_PYTHON_BINDINGS=OFF -Dtensorflow_ENABLE_GRPC_SUPPORT=OFF -Dtensorflow_BUILD_SHARED_LIB=ON\r\n$ MSBuild /m:2 /p:PreferredToolArchitecture=x64 /p:Configuration=Release tensorflow.vcxproj\r\n```\r\n\r\n### Describe the problem\r\nI am getting a lot of link errors of the following type for many 3rd party libraries tensorflow links against:\r\n\r\n```\r\n(Link target) ->\r\n         nsync.lib(mu.obj) : error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MD_DynamicRelease' doesn't match value 'MT_StaticRelease' in gen_proto_text_functions.obj [C:\\all\\lib\\tensorflow\\tensorflow\\contrib\\cmake\\bu\r\n       ild\\proto_text.vcxproj]\r\n```\r\n\r\nI am not really sure if that's supposed to work, so it can be considered a feature request. I would really like to build tensorflow with /MT to make my application as portable as possible.\r\nCurrently, I build tensorflow.dll with Visual Studio 2017 and default switches (/MD), and therefore the resulting application requires Microsoft Redistributable C++ libraries for Visual Studio 2017.\r\n\r\nIf building with /MT is supposed to work, maybe someone could give me a hint how to get it right (and then we can close the issue)? I guess, digging into build options of every third-party library and adding /MT there?"}