{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/336713030", "html_url": "https://github.com/tensorflow/tensorflow/issues/13127#issuecomment-336713030", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13127", "id": 336713030, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjcxMzAzMA==", "user": {"login": "alex-petrenko", "id": 5497775, "node_id": "MDQ6VXNlcjU0OTc3NzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5497775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-petrenko", "html_url": "https://github.com/alex-petrenko", "followers_url": "https://api.github.com/users/alex-petrenko/followers", "following_url": "https://api.github.com/users/alex-petrenko/following{/other_user}", "gists_url": "https://api.github.com/users/alex-petrenko/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-petrenko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-petrenko/subscriptions", "organizations_url": "https://api.github.com/users/alex-petrenko/orgs", "repos_url": "https://api.github.com/users/alex-petrenko/repos", "events_url": "https://api.github.com/users/alex-petrenko/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-petrenko/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-15T13:52:25Z", "updated_at": "2017-10-15T13:53:37Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It turns out you actually can do it; just like <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> said you can pass /MT option to each and every 3rd party library tensorflow depends on. On Windows, all of them are built with CMake, so usually, you just need to add the flag to the CMake options.</p>\n<p>In my case, I wanted to build a version with static runtime to simplify the deployment, to eliminate the dependency on the Microsoft C++ Runtime Libraries. However, I faced problems with other libraries that I use (namely, OpenCV) and I ended up just adding vcruntime140.dll (and a couple of other Microsoft dlls) to my distribution. I recommend this solution to anyone facing the same problem: it's easier to implement and is much less error-prone.</p>\n<p>If you're building a standalone app for Windows and you have a separate installer, even better is to include the Microsoft C++ Redistributable Package into your installer. I didn't have an installer (because we build a <a href=\"https://www.assetstore.unity3d.com/en/#!/content/100613\" rel=\"nofollow\">plugin</a>, not a standalone app), so I just added Microsoft .dlls near the tensorflow.dll</p>\n<p>I think this issue can be closed. I don't think it's a good idea to mess with CMake build system of tensorflow to add the /MT build option.</p>", "body_text": "It turns out you actually can do it; just like @mrry said you can pass /MT option to each and every 3rd party library tensorflow depends on. On Windows, all of them are built with CMake, so usually, you just need to add the flag to the CMake options.\nIn my case, I wanted to build a version with static runtime to simplify the deployment, to eliminate the dependency on the Microsoft C++ Runtime Libraries. However, I faced problems with other libraries that I use (namely, OpenCV) and I ended up just adding vcruntime140.dll (and a couple of other Microsoft dlls) to my distribution. I recommend this solution to anyone facing the same problem: it's easier to implement and is much less error-prone.\nIf you're building a standalone app for Windows and you have a separate installer, even better is to include the Microsoft C++ Redistributable Package into your installer. I didn't have an installer (because we build a plugin, not a standalone app), so I just added Microsoft .dlls near the tensorflow.dll\nI think this issue can be closed. I don't think it's a good idea to mess with CMake build system of tensorflow to add the /MT build option.", "body": "It turns out you actually can do it; just like @mrry said you can pass /MT option to each and every 3rd party library tensorflow depends on. On Windows, all of them are built with CMake, so usually, you just need to add the flag to the CMake options.\r\n\r\nIn my case, I wanted to build a version with static runtime to simplify the deployment, to eliminate the dependency on the Microsoft C++ Runtime Libraries. However, I faced problems with other libraries that I use (namely, OpenCV) and I ended up just adding vcruntime140.dll (and a couple of other Microsoft dlls) to my distribution. I recommend this solution to anyone facing the same problem: it's easier to implement and is much less error-prone.\r\n\r\nIf you're building a standalone app for Windows and you have a separate installer, even better is to include the Microsoft C++ Redistributable Package into your installer. I didn't have an installer (because we build a [plugin](https://www.assetstore.unity3d.com/en/#!/content/100613), not a standalone app), so I just added Microsoft .dlls near the tensorflow.dll\r\n\r\nI think this issue can be closed. I don't think it's a good idea to mess with CMake build system of tensorflow to add the /MT build option."}