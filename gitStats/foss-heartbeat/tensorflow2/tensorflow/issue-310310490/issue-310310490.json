{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18157", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18157/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18157/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18157/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18157", "id": 310310490, "node_id": "MDU6SXNzdWUzMTAzMTA0OTA=", "number": 18157, "title": "Failed to convert object of type <class 'werkzeug.datastructures.File.Storage> to tensor.", "user": {"login": "dhinar1991", "id": 26268279, "node_id": "MDQ6VXNlcjI2MjY4Mjc5", "avatar_url": "https://avatars2.githubusercontent.com/u/26268279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhinar1991", "html_url": "https://github.com/dhinar1991", "followers_url": "https://api.github.com/users/dhinar1991/followers", "following_url": "https://api.github.com/users/dhinar1991/following{/other_user}", "gists_url": "https://api.github.com/users/dhinar1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhinar1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhinar1991/subscriptions", "organizations_url": "https://api.github.com/users/dhinar1991/orgs", "repos_url": "https://api.github.com/users/dhinar1991/repos", "events_url": "https://api.github.com/users/dhinar1991/events{/privacy}", "received_events_url": "https://api.github.com/users/dhinar1991/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-04-01T09:21:32Z", "updated_at": "2018-04-03T01:53:11Z", "closed_at": "2018-04-03T01:53:11Z", "author_association": "NONE", "body_html": "<p>This is my client python file that uses flask framework to create REST api.  I am running this inside a docker machine. So this take an input .txt file and read the contents of it.</p>\n<pre><code>from flask import Flask, render_template, request, url_for, jsonify\nimport json\nimport tensorflow as tf \nimport numpy as np \nimport os \nimport argparse\nimport sys\nfrom google.protobuf import json_format\nfrom datetime import datetime \nfrom werkzeug import secure_filename\n\nfrom grpc.beta import implementations\nfrom tensorflow_serving.apis import predict_pb2\nfrom tensorflow_serving.apis import prediction_service_pb2\n\ntf.app.flags.DEFINE_string('server', 'localhost:9000', 'PredictionService host:port')\nFLAGS = tf.app.flags.FLAGS\n\napp = Flask(__name__)\n\nclass mainSessRunning():\n    \n    def __init__(self):\n        host, port = FLAGS.server.split(':')\n        channel = implementations.insecure_channel(host, int(port))\n        self.stub = prediction_service_pb2.beta_create_PredictionService_stub(channel)\n\n        self.request = predict_pb2.PredictRequest()\n        self.request.model_spec.name = 'example_model'\n        self.request.model_spec.signature_name = 'prediction'\n\n    def inference(self, val_x):\n        #temp_data = numpy.random.randn(100, 3).astype(numpy.float32)\n        #temp_data = val_x.astype(np.float32).reshape(-1, 3)\n        data = val_x\n        self.request.inputs['input'].CopyFrom(tf.contrib.util.make_tensor_proto(data))\n        result = self.stub.Predict(self.request, 5.0)\n        return result\n\nrun = mainSessRunning()\n\nprint(\"Initialization done. \")\n\n# Define a route for the default URL, which loads the form\n@app.route('/inference', methods=['POST'])\ndef inference():\n    request_data = request.files['file']\n    result = run.inference(request_data)\n    r = json_format.MessageToJson(result)\n    return jsonify({'result':r})\n\n@app.route('/test', methods=['GET'])\ndef test_serv():\n    return (\"Hello\")\n        \nif __name__ == \"__main__\":\n    app.run(host= '0.0.0.0')\n    \n    \n\n\n</code></pre>\n<p>When i try too run it produces error,<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/26268279/38171661-117fa570-35bc-11e8-9f12-dd6242552794.JPG\"><img src=\"https://user-images.githubusercontent.com/26268279/38171661-117fa570-35bc-11e8-9f12-dd6242552794.JPG\" alt=\"capture\" style=\"max-width:100%;\"></a></p>\n<p>Is this a bug?</p>", "body_text": "This is my client python file that uses flask framework to create REST api.  I am running this inside a docker machine. So this take an input .txt file and read the contents of it.\nfrom flask import Flask, render_template, request, url_for, jsonify\nimport json\nimport tensorflow as tf \nimport numpy as np \nimport os \nimport argparse\nimport sys\nfrom google.protobuf import json_format\nfrom datetime import datetime \nfrom werkzeug import secure_filename\n\nfrom grpc.beta import implementations\nfrom tensorflow_serving.apis import predict_pb2\nfrom tensorflow_serving.apis import prediction_service_pb2\n\ntf.app.flags.DEFINE_string('server', 'localhost:9000', 'PredictionService host:port')\nFLAGS = tf.app.flags.FLAGS\n\napp = Flask(__name__)\n\nclass mainSessRunning():\n    \n    def __init__(self):\n        host, port = FLAGS.server.split(':')\n        channel = implementations.insecure_channel(host, int(port))\n        self.stub = prediction_service_pb2.beta_create_PredictionService_stub(channel)\n\n        self.request = predict_pb2.PredictRequest()\n        self.request.model_spec.name = 'example_model'\n        self.request.model_spec.signature_name = 'prediction'\n\n    def inference(self, val_x):\n        #temp_data = numpy.random.randn(100, 3).astype(numpy.float32)\n        #temp_data = val_x.astype(np.float32).reshape(-1, 3)\n        data = val_x\n        self.request.inputs['input'].CopyFrom(tf.contrib.util.make_tensor_proto(data))\n        result = self.stub.Predict(self.request, 5.0)\n        return result\n\nrun = mainSessRunning()\n\nprint(\"Initialization done. \")\n\n# Define a route for the default URL, which loads the form\n@app.route('/inference', methods=['POST'])\ndef inference():\n    request_data = request.files['file']\n    result = run.inference(request_data)\n    r = json_format.MessageToJson(result)\n    return jsonify({'result':r})\n\n@app.route('/test', methods=['GET'])\ndef test_serv():\n    return (\"Hello\")\n        \nif __name__ == \"__main__\":\n    app.run(host= '0.0.0.0')\n    \n    \n\n\n\nWhen i try too run it produces error,\n\nIs this a bug?", "body": "This is my client python file that uses flask framework to create REST api.  I am running this inside a docker machine. So this take an input .txt file and read the contents of it.\r\n\r\n```\r\nfrom flask import Flask, render_template, request, url_for, jsonify\r\nimport json\r\nimport tensorflow as tf \r\nimport numpy as np \r\nimport os \r\nimport argparse\r\nimport sys\r\nfrom google.protobuf import json_format\r\nfrom datetime import datetime \r\nfrom werkzeug import secure_filename\r\n\r\nfrom grpc.beta import implementations\r\nfrom tensorflow_serving.apis import predict_pb2\r\nfrom tensorflow_serving.apis import prediction_service_pb2\r\n\r\ntf.app.flags.DEFINE_string('server', 'localhost:9000', 'PredictionService host:port')\r\nFLAGS = tf.app.flags.FLAGS\r\n\r\napp = Flask(__name__)\r\n\r\nclass mainSessRunning():\r\n    \r\n    def __init__(self):\r\n        host, port = FLAGS.server.split(':')\r\n        channel = implementations.insecure_channel(host, int(port))\r\n        self.stub = prediction_service_pb2.beta_create_PredictionService_stub(channel)\r\n\r\n        self.request = predict_pb2.PredictRequest()\r\n        self.request.model_spec.name = 'example_model'\r\n        self.request.model_spec.signature_name = 'prediction'\r\n\r\n    def inference(self, val_x):\r\n        #temp_data = numpy.random.randn(100, 3).astype(numpy.float32)\r\n        #temp_data = val_x.astype(np.float32).reshape(-1, 3)\r\n        data = val_x\r\n        self.request.inputs['input'].CopyFrom(tf.contrib.util.make_tensor_proto(data))\r\n        result = self.stub.Predict(self.request, 5.0)\r\n        return result\r\n\r\nrun = mainSessRunning()\r\n\r\nprint(\"Initialization done. \")\r\n\r\n# Define a route for the default URL, which loads the form\r\n@app.route('/inference', methods=['POST'])\r\ndef inference():\r\n    request_data = request.files['file']\r\n    result = run.inference(request_data)\r\n    r = json_format.MessageToJson(result)\r\n    return jsonify({'result':r})\r\n\r\n@app.route('/test', methods=['GET'])\r\ndef test_serv():\r\n    return (\"Hello\")\r\n        \r\nif __name__ == \"__main__\":\r\n    app.run(host= '0.0.0.0')\r\n    \r\n    \r\n\r\n\r\n```\r\n\r\n\r\nWhen i try too run it produces error, \r\n![capture](https://user-images.githubusercontent.com/26268279/38171661-117fa570-35bc-11e8-9f12-dd6242552794.JPG)\r\n\r\nIs this a bug?\r\n\r\n"}