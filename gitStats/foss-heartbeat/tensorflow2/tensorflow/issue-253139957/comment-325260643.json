{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/325260643", "html_url": "https://github.com/tensorflow/tensorflow/pull/12627#issuecomment-325260643", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12627", "id": 325260643, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTI2MDY0Mw==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-28T05:03:14Z", "updated_at": "2017-08-28T05:03:14Z", "author_association": "MEMBER", "body_html": "<p>Thanks for the PR. Indeed, I think the missing conversion is a bug.<br>\nAnswering your questions:</p>\n<ol>\n<li>\n<p>The layout for string <code>tensorflow::Tensor</code>s is a flattened array of <code>std::string</code> objects (so you'll see use of <code>flat&lt;string&gt;</code> at various places, like <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/core/framework/tensor.cc#L870\">this</a>). This layout isn't a contiguous piece of memory, so isn't quite amenably to say a single <code>memcpy</code> of the contents (and which is why there are various specializations for string-valued tensors to ensure their contents are contiguous, for example the helper for <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/core/framework/tensor.cc#L161\"><code>Tensor::AsProtoTensorContent</code></a>).</p>\n</li>\n<li>\n<p>What you suggest might be possible, but might also open a separate can of worms. I'd be tempted to defer on this until there is a stronger demonstrated need for the performance benefit (are you using models that involve large string tensors as inputs/outputs?)</p>\n</li>\n<li>\n<p>Will have to look into this separately. (Could you provide a simple reproduction using the C API as opposed to using your Scala wrappers?)</p>\n</li>\n</ol>", "body_text": "Thanks for the PR. Indeed, I think the missing conversion is a bug.\nAnswering your questions:\n\n\nThe layout for string tensorflow::Tensors is a flattened array of std::string objects (so you'll see use of flat<string> at various places, like this). This layout isn't a contiguous piece of memory, so isn't quite amenably to say a single memcpy of the contents (and which is why there are various specializations for string-valued tensors to ensure their contents are contiguous, for example the helper for Tensor::AsProtoTensorContent).\n\n\nWhat you suggest might be possible, but might also open a separate can of worms. I'd be tempted to defer on this until there is a stronger demonstrated need for the performance benefit (are you using models that involve large string tensors as inputs/outputs?)\n\n\nWill have to look into this separately. (Could you provide a simple reproduction using the C API as opposed to using your Scala wrappers?)", "body": "Thanks for the PR. Indeed, I think the missing conversion is a bug.\r\nAnswering your questions:\r\n\r\n1. The layout for string `tensorflow::Tensor`s is a flattened array of `std::string` objects (so you'll see use of `flat<string>` at various places, like [this](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/core/framework/tensor.cc#L870)). This layout isn't a contiguous piece of memory, so isn't quite amenably to say a single `memcpy` of the contents (and which is why there are various specializations for string-valued tensors to ensure their contents are contiguous, for example the helper for [`Tensor::AsProtoTensorContent`](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/core/framework/tensor.cc#L161)).\r\n\r\n2. What you suggest might be possible, but might also open a separate can of worms. I'd be tempted to defer on this until there is a stronger demonstrated need for the performance benefit (are you using models that involve large string tensors as inputs/outputs?)\r\n\r\n3. Will have to look into this separately. (Could you provide a simple reproduction using the C API as opposed to using your Scala wrappers?)\r\n"}