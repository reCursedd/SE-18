{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12627", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12627/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12627/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12627/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/12627", "id": 253139957, "node_id": "MDExOlB1bGxSZXF1ZXN0MTM3ODIwNzI0", "number": 12627, "title": "Eager API String Tensors (and others that need to be copied) Fix", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 419840263, "node_id": "MDU6TGFiZWw0MTk4NDAyNjM=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20testing%20(then%20merge)", "name": "awaiting testing (then merge)", "color": "c2e0c6", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 17, "created_at": "2017-08-27T04:12:27Z", "updated_at": "2017-09-04T05:32:13Z", "closed_at": "2017-09-04T05:32:13Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12627", "html_url": "https://github.com/tensorflow/tensorflow/pull/12627", "diff_url": "https://github.com/tensorflow/tensorflow/pull/12627.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/12627.patch"}, "body_html": "<p>This PR partially fixes the issue related to string tensors, described in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"253062719\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/12612\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/12612/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/12612\">#12612</a>. Note that there are still some issues remaining related to string tensors:</p>\n<ol>\n<li>There is a small inconsistency when dealing with TFE tensors now in that for the string data type, a copy of the provided <code>TF_Tensor</code> is created, whereas for others types that's not the case. This can be problematic when users of the API attempt to use the underlying tensor buffer directly (e.g., to read values of specific elements). The problem could potentially be alleviated if the same memory layout is used for string <code>TF_Tensor</code>s and <code>tensorflow::Tensor</code>s. I'm not sure why that's not the case and I'm also not sure what the memory layout for string tensors is internally (could someone provide some insight into that please?).</li>\n<li>The above-mentioned problem could be partially alleviated by providing a TFE function for obtaining a byte array representation of the <code>i</code>th element in the flattened (row-major) tensor. That is currently the only use I have found for directly accessing the underlying buffer.</li>\n<li>This fix resolves the issues specific to string tensors and the eager execution API, but one issue related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"253062719\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/12612\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/12612/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/12612\">#12612</a> still remains. When I try to use some ops, such as the <code>Unpack</code> op, I get the following error (<strong>no matter what the data type of the tensor is</strong>): <code>C  [libtensorflow.so+0x20f0]  TFE_TensorHandleDeviceName+0x0</code>. I plan to look more into this, but please let me know if you can see a reason why this might be happening.</li>\n</ol>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> could you please give me some information on what the memory layout is for string tensors internally and on why we cannot use the same representation for the C API <code>TF_Tensor</code>s? That would resolve points 1 and 2 above. I think that a function for obtaining the <code>i</code>th element would still be very useful though, in either case. :)</p>", "body_text": "This PR partially fixes the issue related to string tensors, described in #12612. Note that there are still some issues remaining related to string tensors:\n\nThere is a small inconsistency when dealing with TFE tensors now in that for the string data type, a copy of the provided TF_Tensor is created, whereas for others types that's not the case. This can be problematic when users of the API attempt to use the underlying tensor buffer directly (e.g., to read values of specific elements). The problem could potentially be alleviated if the same memory layout is used for string TF_Tensors and tensorflow::Tensors. I'm not sure why that's not the case and I'm also not sure what the memory layout for string tensors is internally (could someone provide some insight into that please?).\nThe above-mentioned problem could be partially alleviated by providing a TFE function for obtaining a byte array representation of the ith element in the flattened (row-major) tensor. That is currently the only use I have found for directly accessing the underlying buffer.\nThis fix resolves the issues specific to string tensors and the eager execution API, but one issue related to #12612 still remains. When I try to use some ops, such as the Unpack op, I get the following error (no matter what the data type of the tensor is): C  [libtensorflow.so+0x20f0]  TFE_TensorHandleDeviceName+0x0. I plan to look more into this, but please let me know if you can see a reason why this might be happening.\n\n@alextp could you please give me some information on what the memory layout is for string tensors internally and on why we cannot use the same representation for the C API TF_Tensors? That would resolve points 1 and 2 above. I think that a function for obtaining the ith element would still be very useful though, in either case. :)", "body": "This PR partially fixes the issue related to string tensors, described in #12612. Note that there are still some issues remaining related to string tensors:\r\n1. There is a small inconsistency when dealing with TFE tensors now in that for the string data type, a copy of the provided `TF_Tensor` is created, whereas for others types that's not the case. This can be problematic when users of the API attempt to use the underlying tensor buffer directly (e.g., to read values of specific elements). The problem could potentially be alleviated if the same memory layout is used for string `TF_Tensor`s and `tensorflow::Tensor`s. I'm not sure why that's not the case and I'm also not sure what the memory layout for string tensors is internally (could someone provide some insight into that please?).\r\n2. The above-mentioned problem could be partially alleviated by providing a TFE function for obtaining a byte array representation of the `i`th element in the flattened (row-major) tensor. That is currently the only use I have found for directly accessing the underlying buffer.\r\n3. This fix resolves the issues specific to string tensors and the eager execution API, but one issue related to #12612 still remains. When I try to use some ops, such as the `Unpack` op, I get the following error (**no matter what the data type of the tensor is**): `C  [libtensorflow.so+0x20f0]  TFE_TensorHandleDeviceName+0x0`. I plan to look more into this, but please let me know if you can see a reason why this might be happening.\r\n\r\n@alextp could you please give me some information on what the memory layout is for string tensors internally and on why we cannot use the same representation for the C API `TF_Tensor`s? That would resolve points 1 and 2 above. I think that a function for obtaining the `i`th element would still be very useful though, in either case. :)"}