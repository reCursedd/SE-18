{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/325357538", "html_url": "https://github.com/tensorflow/tensorflow/pull/12627#issuecomment-325357538", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12627", "id": 325357538, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTM1NzUzOA==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-28T13:45:48Z", "updated_at": "2017-08-28T13:45:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> In response to your answers:</p>\n<ol>\n<li>I sort of expected that but wasn't sure. Thanks for verifying. :)</li>\n<li>I can see this not being a priority and to be honest, I cannot really say what the potential bad side effects of this would be (assuming the obtained element was a copy of the corresponding bytes in the buffer). Just to put this into perspective though, and for future reference, I would like to describe why I think such a feature could be useful. Currently, I'm using the eager API to offer numpy-like functionality in Scala. I think many people might use it in that way, given that not many languages offer a tensor computation library as powerful as numpy. The current API works fine for creating and manipulating tensors within TensorFlow, but whenever one wants to obtain the value of a particular element they would have to first slice the tensor to obtain a scalar tensor containing that value, and then copy the result to CPU and resolve using the TFE resolve function. Then they can obtain a pointer to the <code>TF_Tensor</code> buffer and read that element. Furthermore, if they want to iterate over elements, they would need to do the same, without the slicing component. Therefore, a function for obtaining a single element given the flattened index, and a method for iterating over tensor elements, might be useful. I also noticed that such methods are already provided in <code>tensorflow::Tensor</code>, in C++, so I'm not sure why it would be bad to wrap them for TFE tensors.</li>\n<li>I'll try to submit an issue for this later today or tomorrow with a C++ code fragment. :)</li>\n</ol>", "body_text": "@asimshankar In response to your answers:\n\nI sort of expected that but wasn't sure. Thanks for verifying. :)\nI can see this not being a priority and to be honest, I cannot really say what the potential bad side effects of this would be (assuming the obtained element was a copy of the corresponding bytes in the buffer). Just to put this into perspective though, and for future reference, I would like to describe why I think such a feature could be useful. Currently, I'm using the eager API to offer numpy-like functionality in Scala. I think many people might use it in that way, given that not many languages offer a tensor computation library as powerful as numpy. The current API works fine for creating and manipulating tensors within TensorFlow, but whenever one wants to obtain the value of a particular element they would have to first slice the tensor to obtain a scalar tensor containing that value, and then copy the result to CPU and resolve using the TFE resolve function. Then they can obtain a pointer to the TF_Tensor buffer and read that element. Furthermore, if they want to iterate over elements, they would need to do the same, without the slicing component. Therefore, a function for obtaining a single element given the flattened index, and a method for iterating over tensor elements, might be useful. I also noticed that such methods are already provided in tensorflow::Tensor, in C++, so I'm not sure why it would be bad to wrap them for TFE tensors.\nI'll try to submit an issue for this later today or tomorrow with a C++ code fragment. :)", "body": "@asimshankar In response to your answers:\r\n1. I sort of expected that but wasn't sure. Thanks for verifying. :)\r\n2. I can see this not being a priority and to be honest, I cannot really say what the potential bad side effects of this would be (assuming the obtained element was a copy of the corresponding bytes in the buffer). Just to put this into perspective though, and for future reference, I would like to describe why I think such a feature could be useful. Currently, I'm using the eager API to offer numpy-like functionality in Scala. I think many people might use it in that way, given that not many languages offer a tensor computation library as powerful as numpy. The current API works fine for creating and manipulating tensors within TensorFlow, but whenever one wants to obtain the value of a particular element they would have to first slice the tensor to obtain a scalar tensor containing that value, and then copy the result to CPU and resolve using the TFE resolve function. Then they can obtain a pointer to the `TF_Tensor` buffer and read that element. Furthermore, if they want to iterate over elements, they would need to do the same, without the slicing component. Therefore, a function for obtaining a single element given the flattened index, and a method for iterating over tensor elements, might be useful. I also noticed that such methods are already provided in `tensorflow::Tensor`, in C++, so I'm not sure why it would be bad to wrap them for TFE tensors.\r\n3. I'll try to submit an issue for this later today or tomorrow with a C++ code fragment. :)"}