{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/114653600", "pull_request_review_id": 36135884, "id": 114653600, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDY1MzYwMA==", "diff_hunk": "@@ -0,0 +1,58 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.util.List;\n+\n+/** Unit tests for {@link org.tensorflow.Operation}. */\n+@RunWith(JUnit4.class)\n+public class OperationTest {\n+\n+  @Test\n+  public void outputListLength() {\n+    try (Graph g = new Graph()) {\n+\n+      checkSplit(g, \"t1\", new int[] {0, 1}, 1);", "path": "tensorflow/java/src/test/java/org/tensorflow/OperationTest.java", "position": null, "original_position": 35, "commit_id": "806c37e64eadcf3dad936824a6bdf76376f56d2f", "original_commit_id": "3d91f2d9b3685b9036bf19496c7be633d43eeba3", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "It might be better to have a helper function return the integer value and then the `assert` call can be in the test, that way the line number rendered on test failures is more useful and you don't need to use the string names to locate the failure. Something like:\r\n\r\n```java\r\npublic void outputListLength() {\r\n  assertEquals(1, split(new int[]{0, 1}, 1));\r\n  assertEquals(2, split(new int[]{0, 1}, 2));\r\n  assertEquals(3, split(new int[]{0,1,2}, 3));\r\n}\r\n\r\n@Test\r\npublic void  outputListLengthFailsOnInvalidName() {\r\n  ...\r\n}\r\n\r\nprivate int split(int[] values, int num_split) {\r\n  try (Graph g = new Graph()) {\r\n    return g.opBuilder(\"Split\", \"Split\")\r\n      .addInput(TestUtil.constant(g, \"split_dim\", 0))\r\n      .addInput(TestUtil.constant(g, \"values\", values)\r\n      .setAttr(\"num_split\", num_split)\r\n      .build()\r\n      .outputListLength(\"output\");\r\n  }\r\n}\r\n```", "created_at": "2017-05-03T21:06:03Z", "updated_at": "2017-05-04T02:34:22Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9640#discussion_r114653600", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9640", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/114653600"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9640#discussion_r114653600"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9640"}}, "body_html": "<p>It might be better to have a helper function return the integer value and then the <code>assert</code> call can be in the test, that way the line number rendered on test failures is more useful and you don't need to use the string names to locate the failure. Something like:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> outputListLength() {\n  assertEquals(<span class=\"pl-c1\">1</span>, split(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>}, <span class=\"pl-c1\">1</span>));\n  assertEquals(<span class=\"pl-c1\">2</span>, split(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>}, <span class=\"pl-c1\">2</span>));\n  assertEquals(<span class=\"pl-c1\">3</span>, split(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>}, <span class=\"pl-c1\">3</span>));\n}\n\n<span class=\"pl-k\">@Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span>  outputListLengthFailsOnInvalidName() {\n  <span class=\"pl-c1\">...</span>\n}\n\n<span class=\"pl-k\">private</span> <span class=\"pl-k\">int</span> split(<span class=\"pl-k\">int</span>[] values, <span class=\"pl-k\">int</span> num_split) {\n  <span class=\"pl-k\">try</span> (<span class=\"pl-smi\">Graph</span> g <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Graph</span>()) {\n    <span class=\"pl-k\">return</span> g<span class=\"pl-k\">.</span>opBuilder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Split<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Split<span class=\"pl-pds\">\"</span></span>)\n      .addInput(<span class=\"pl-smi\">TestUtil</span><span class=\"pl-k\">.</span>constant(g, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>split_dim<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">0</span>))\n      .addInput(<span class=\"pl-smi\">TestUtil</span><span class=\"pl-k\">.</span>constant(g, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>values<span class=\"pl-pds\">\"</span></span>, values)\n      .setAttr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>num_split<span class=\"pl-pds\">\"</span></span>, num_split)\n      .build()\n      .outputListLength(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>output<span class=\"pl-pds\">\"</span></span>);\n  }\n}</pre></div>", "body_text": "It might be better to have a helper function return the integer value and then the assert call can be in the test, that way the line number rendered on test failures is more useful and you don't need to use the string names to locate the failure. Something like:\npublic void outputListLength() {\n  assertEquals(1, split(new int[]{0, 1}, 1));\n  assertEquals(2, split(new int[]{0, 1}, 2));\n  assertEquals(3, split(new int[]{0,1,2}, 3));\n}\n\n@Test\npublic void  outputListLengthFailsOnInvalidName() {\n  ...\n}\n\nprivate int split(int[] values, int num_split) {\n  try (Graph g = new Graph()) {\n    return g.opBuilder(\"Split\", \"Split\")\n      .addInput(TestUtil.constant(g, \"split_dim\", 0))\n      .addInput(TestUtil.constant(g, \"values\", values)\n      .setAttr(\"num_split\", num_split)\n      .build()\n      .outputListLength(\"output\");\n  }\n}"}