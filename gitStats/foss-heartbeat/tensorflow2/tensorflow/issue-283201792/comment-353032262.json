{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/353032262", "html_url": "https://github.com/tensorflow/tensorflow/issues/15480#issuecomment-353032262", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15480", "id": 353032262, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzAzMjI2Mg==", "user": {"login": "axelurbiz", "id": 22867844, "node_id": "MDQ6VXNlcjIyODY3ODQ0", "avatar_url": "https://avatars0.githubusercontent.com/u/22867844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axelurbiz", "html_url": "https://github.com/axelurbiz", "followers_url": "https://api.github.com/users/axelurbiz/followers", "following_url": "https://api.github.com/users/axelurbiz/following{/other_user}", "gists_url": "https://api.github.com/users/axelurbiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/axelurbiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axelurbiz/subscriptions", "organizations_url": "https://api.github.com/users/axelurbiz/orgs", "repos_url": "https://api.github.com/users/axelurbiz/repos", "events_url": "https://api.github.com/users/axelurbiz/events{/privacy}", "received_events_url": "https://api.github.com/users/axelurbiz/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-20T10:56:46Z", "updated_at": "2017-12-20T11:01:03Z", "author_association": "NONE", "body_html": "<p>This is not the case here.</p>\n<p>The issue seems on passing tensors to the logits argument in the loss function. For instance if I pass a constant as below, the issue goes away.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.python.framework <span class=\"pl-k\">import</span> constant_op\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\nx <span class=\"pl-k\">=</span> np.random.uniform(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-v\">size</span> <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>))\ny <span class=\"pl-k\">=</span> np.random.choice(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>) \ny <span class=\"pl-k\">=</span> y.reshape(<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">1</span>)\n\nX <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>float32<span class=\"pl-pds\">\"</span></span>, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">3</span>])\nY <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>int32<span class=\"pl-pds\">\"</span></span>, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">1</span>])\n\nweights <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>w<span class=\"pl-pds\">'</span></span>: tf.Variable(tf.random_uniform([<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>]))}\nbiases <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>: tf.Variable(tf.zeros([<span class=\"pl-c1\">3</span>]))}\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>logits = tf.add(tf.matmul(X, weights['w']), biases['b'])</span>\n\nlogits <span class=\"pl-k\">=</span> constant_op.constant([[<span class=\"pl-c1\">1.6</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.4</span>, <span class=\"pl-c1\">0.8</span>], [<span class=\"pl-c1\">1.5</span>, <span class=\"pl-c1\">0.8</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.0</span>],\n                                     [<span class=\"pl-c1\">0.2</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.8</span>, <span class=\"pl-c1\">4.0</span>]])\nloss <span class=\"pl-k\">=</span> tf.reduce_mean(tf.contrib.kernel_methods.sparse_multiclass_hinge_loss(<span class=\"pl-v\">logits</span><span class=\"pl-k\">=</span>logits, <span class=\"pl-v\">labels</span><span class=\"pl-k\">=</span>Y))\n\ninit <span class=\"pl-k\">=</span> tf.global_variables_initializer()\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(init)\n    res <span class=\"pl-k\">=</span> sess.run(loss, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{X: x, Y: y}) \n\n\nres</pre></div>", "body_text": "This is not the case here.\nThe issue seems on passing tensors to the logits argument in the loss function. For instance if I pass a constant as below, the issue goes away.\nimport tensorflow as tf\nfrom tensorflow.python.framework import constant_op\nimport numpy as np\n\nx = np.random.uniform(0, 1, size = (3, 3))\ny = np.random.choice(3, 3) \ny = y.reshape(3, 1)\n\nX = tf.placeholder(\"float32\", [None, 3])\nY = tf.placeholder(\"int32\", [None, 1])\n\nweights = {'w': tf.Variable(tf.random_uniform([3, 3]))}\nbiases = {'b': tf.Variable(tf.zeros([3]))}\n\n#logits = tf.add(tf.matmul(X, weights['w']), biases['b'])\n\nlogits = constant_op.constant([[1.6, -0.4, 0.8], [1.5, 0.8, -1.0],\n                                     [0.2, -1.8, 4.0]])\nloss = tf.reduce_mean(tf.contrib.kernel_methods.sparse_multiclass_hinge_loss(logits=logits, labels=Y))\n\ninit = tf.global_variables_initializer()\n\nwith tf.Session() as sess:\n    sess.run(init)\n    res = sess.run(loss, feed_dict={X: x, Y: y}) \n\n\nres", "body": "This is not the case here.\r\n\r\nThe issue seems on passing tensors to the logits argument in the loss function. For instance if I pass a constant as below, the issue goes away.\r\n\r\n\r\n```python\r\nimport tensorflow as tf\r\nfrom tensorflow.python.framework import constant_op\r\nimport numpy as np\r\n\r\nx = np.random.uniform(0, 1, size = (3, 3))\r\ny = np.random.choice(3, 3) \r\ny = y.reshape(3, 1)\r\n\r\nX = tf.placeholder(\"float32\", [None, 3])\r\nY = tf.placeholder(\"int32\", [None, 1])\r\n\r\nweights = {'w': tf.Variable(tf.random_uniform([3, 3]))}\r\nbiases = {'b': tf.Variable(tf.zeros([3]))}\r\n\r\n#logits = tf.add(tf.matmul(X, weights['w']), biases['b'])\r\n\r\nlogits = constant_op.constant([[1.6, -0.4, 0.8], [1.5, 0.8, -1.0],\r\n                                     [0.2, -1.8, 4.0]])\r\nloss = tf.reduce_mean(tf.contrib.kernel_methods.sparse_multiclass_hinge_loss(logits=logits, labels=Y))\r\n\r\ninit = tf.global_variables_initializer()\r\n\r\nwith tf.Session() as sess:\r\n    sess.run(init)\r\n    res = sess.run(loss, feed_dict={X: x, Y: y}) \r\n\r\n\r\nres\r\n```\r\n"}