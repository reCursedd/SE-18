{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/353078527", "html_url": "https://github.com/tensorflow/tensorflow/issues/15480#issuecomment-353078527", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15480", "id": 353078527, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzA3ODUyNw==", "user": {"login": "axelurbiz", "id": 22867844, "node_id": "MDQ6VXNlcjIyODY3ODQ0", "avatar_url": "https://avatars0.githubusercontent.com/u/22867844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axelurbiz", "html_url": "https://github.com/axelurbiz", "followers_url": "https://api.github.com/users/axelurbiz/followers", "following_url": "https://api.github.com/users/axelurbiz/following{/other_user}", "gists_url": "https://api.github.com/users/axelurbiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/axelurbiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axelurbiz/subscriptions", "organizations_url": "https://api.github.com/users/axelurbiz/orgs", "repos_url": "https://api.github.com/users/axelurbiz/repos", "events_url": "https://api.github.com/users/axelurbiz/events{/privacy}", "received_events_url": "https://api.github.com/users/axelurbiz/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-20T14:34:00Z", "updated_at": "2017-12-20T14:34:55Z", "author_association": "NONE", "body_html": "<hr>\n<p>ValueError                                Traceback (most recent call last)<br>\n in ()<br>\n14 logits = tf.add(tf.matmul(X, weights['w']), biases['b'])<br>\n15<br>\n---&gt; 16 loss = tf.reduce_mean(tf.contrib.kernel_methods.sparse_multiclass_hinge_loss(logits=logits, labels=Y))<br>\n17<br>\n18 init = tf.global_variables_initializer()</p>\n<p>/users/.local/lib/python2.7/site-packages/tensorflow/contrib/kernel_methods/python/losses.pyc in sparse_multiclass_hinge_loss(labels, logits, weights, scope, loss_collection, reduction)<br>\n114     # Compute the logits tensor corresponding to the correct class per instance.<br>\n115     example_indices = array_ops.reshape(<br>\n--&gt; 116         math_ops.range(batch_size), shape=[batch_size, 1])<br>\n117     indices = array_ops.concat(<br>\n118         [</p>\n<p>/users/.local/lib/python2.7/site-packages/tensorflow/python/ops/math_ops.pyc in range(start, limit, delta, dtype, name)<br>\n1215   with ops.name_scope(name, \"Range\", [start, limit, delta]) as name:<br>\n1216     start = ops.convert_to_tensor(start, dtype=dtype, name=\"start\")<br>\n-&gt; 1217     limit = ops.convert_to_tensor(limit, dtype=dtype, name=\"limit\")<br>\n1218     delta = ops.convert_to_tensor(delta, dtype=dtype, name=\"delta\")<br>\n1219</p>\n<p>/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in convert_to_tensor(value, dtype, name, preferred_dtype)<br>\n834       name=name,<br>\n835       preferred_dtype=preferred_dtype,<br>\n--&gt; 836       as_ref=False)<br>\n837<br>\n838</p>\n<p>/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx)<br>\n924<br>\n925     if ret is None:<br>\n--&gt; 926       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)<br>\n927<br>\n928     if ret is NotImplemented:</p>\n<p>/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/constant_op.pyc in _constant_tensor_conversion_function(v, dtype, name, as_ref)<br>\n227                                          as_ref=False):<br>\n228   _ = as_ref<br>\n--&gt; 229   return constant(v, dtype=dtype, name=name)<br>\n230<br>\n231</p>\n<p>/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/constant_op.pyc in constant(value, dtype, shape, name, verify_shape)<br>\n206   tensor_value.tensor.CopyFrom(<br>\n207       tensor_util.make_tensor_proto(<br>\n--&gt; 208           value, dtype=dtype, shape=shape, verify_shape=verify_shape))<br>\n209   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)<br>\n210   const_tensor = g.create_op(</p>\n<p>/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/tensor_util.pyc in make_tensor_proto(values, dtype, shape, verify_shape)<br>\n369   else:<br>\n370     if values is None:<br>\n--&gt; 371       raise ValueError(\"None values not supported.\")<br>\n372     # if dtype is provided, forces numpy array to be the type<br>\n373     # provided if possible.</p>\n<p>ValueError: None values not supported.</p>", "body_text": "ValueError                                Traceback (most recent call last)\n in ()\n14 logits = tf.add(tf.matmul(X, weights['w']), biases['b'])\n15\n---> 16 loss = tf.reduce_mean(tf.contrib.kernel_methods.sparse_multiclass_hinge_loss(logits=logits, labels=Y))\n17\n18 init = tf.global_variables_initializer()\n/users/.local/lib/python2.7/site-packages/tensorflow/contrib/kernel_methods/python/losses.pyc in sparse_multiclass_hinge_loss(labels, logits, weights, scope, loss_collection, reduction)\n114     # Compute the logits tensor corresponding to the correct class per instance.\n115     example_indices = array_ops.reshape(\n--> 116         math_ops.range(batch_size), shape=[batch_size, 1])\n117     indices = array_ops.concat(\n118         [\n/users/.local/lib/python2.7/site-packages/tensorflow/python/ops/math_ops.pyc in range(start, limit, delta, dtype, name)\n1215   with ops.name_scope(name, \"Range\", [start, limit, delta]) as name:\n1216     start = ops.convert_to_tensor(start, dtype=dtype, name=\"start\")\n-> 1217     limit = ops.convert_to_tensor(limit, dtype=dtype, name=\"limit\")\n1218     delta = ops.convert_to_tensor(delta, dtype=dtype, name=\"delta\")\n1219\n/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in convert_to_tensor(value, dtype, name, preferred_dtype)\n834       name=name,\n835       preferred_dtype=preferred_dtype,\n--> 836       as_ref=False)\n837\n838\n/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx)\n924\n925     if ret is None:\n--> 926       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n927\n928     if ret is NotImplemented:\n/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/constant_op.pyc in _constant_tensor_conversion_function(v, dtype, name, as_ref)\n227                                          as_ref=False):\n228   _ = as_ref\n--> 229   return constant(v, dtype=dtype, name=name)\n230\n231\n/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/constant_op.pyc in constant(value, dtype, shape, name, verify_shape)\n206   tensor_value.tensor.CopyFrom(\n207       tensor_util.make_tensor_proto(\n--> 208           value, dtype=dtype, shape=shape, verify_shape=verify_shape))\n209   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)\n210   const_tensor = g.create_op(\n/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/tensor_util.pyc in make_tensor_proto(values, dtype, shape, verify_shape)\n369   else:\n370     if values is None:\n--> 371       raise ValueError(\"None values not supported.\")\n372     # if dtype is provided, forces numpy array to be the type\n373     # provided if possible.\nValueError: None values not supported.", "body": "---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-3-b3ef74c071b2> in <module>()\r\n     14 logits = tf.add(tf.matmul(X, weights['w']), biases['b'])\r\n     15 \r\n---> 16 loss = tf.reduce_mean(tf.contrib.kernel_methods.sparse_multiclass_hinge_loss(logits=logits, labels=Y))\r\n     17 \r\n     18 init = tf.global_variables_initializer()\r\n\r\n/users/.local/lib/python2.7/site-packages/tensorflow/contrib/kernel_methods/python/losses.pyc in sparse_multiclass_hinge_loss(labels, logits, weights, scope, loss_collection, reduction)\r\n    114     # Compute the logits tensor corresponding to the correct class per instance.\r\n    115     example_indices = array_ops.reshape(\r\n--> 116         math_ops.range(batch_size), shape=[batch_size, 1])\r\n    117     indices = array_ops.concat(\r\n    118         [\r\n\r\n/users/.local/lib/python2.7/site-packages/tensorflow/python/ops/math_ops.pyc in range(start, limit, delta, dtype, name)\r\n   1215   with ops.name_scope(name, \"Range\", [start, limit, delta]) as name:\r\n   1216     start = ops.convert_to_tensor(start, dtype=dtype, name=\"start\")\r\n-> 1217     limit = ops.convert_to_tensor(limit, dtype=dtype, name=\"limit\")\r\n   1218     delta = ops.convert_to_tensor(delta, dtype=dtype, name=\"delta\")\r\n   1219 \r\n\r\n/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in convert_to_tensor(value, dtype, name, preferred_dtype)\r\n    834       name=name,\r\n    835       preferred_dtype=preferred_dtype,\r\n--> 836       as_ref=False)\r\n    837 \r\n    838 \r\n\r\n/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/ops.pyc in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx)\r\n    924 \r\n    925     if ret is None:\r\n--> 926       ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\r\n    927 \r\n    928     if ret is NotImplemented:\r\n\r\n/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/constant_op.pyc in _constant_tensor_conversion_function(v, dtype, name, as_ref)\r\n    227                                          as_ref=False):\r\n    228   _ = as_ref\r\n--> 229   return constant(v, dtype=dtype, name=name)\r\n    230 \r\n    231 \r\n\r\n/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/constant_op.pyc in constant(value, dtype, shape, name, verify_shape)\r\n    206   tensor_value.tensor.CopyFrom(\r\n    207       tensor_util.make_tensor_proto(\r\n--> 208           value, dtype=dtype, shape=shape, verify_shape=verify_shape))\r\n    209   dtype_value = attr_value_pb2.AttrValue(type=tensor_value.tensor.dtype)\r\n    210   const_tensor = g.create_op(\r\n\r\n/users/.local/lib/python2.7/site-packages/tensorflow/python/framework/tensor_util.pyc in make_tensor_proto(values, dtype, shape, verify_shape)\r\n    369   else:\r\n    370     if values is None:\r\n--> 371       raise ValueError(\"None values not supported.\")\r\n    372     # if dtype is provided, forces numpy array to be the type\r\n    373     # provided if possible.\r\n\r\nValueError: None values not supported.\r\n"}