{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13561", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13561/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13561/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13561/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/13561", "id": 263689802, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ1MzE4ODk3", "number": 13561, "title": "Improve shape inference for `tf.slice`", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 419840263, "node_id": "MDU6TGFiZWw0MTk4NDAyNjM=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20testing%20(then%20merge)", "name": "awaiting testing (then merge)", "color": "c2e0c6", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "cwhipkey", "id": 17578177, "node_id": "MDQ6VXNlcjE3NTc4MTc3", "avatar_url": "https://avatars0.githubusercontent.com/u/17578177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cwhipkey", "html_url": "https://github.com/cwhipkey", "followers_url": "https://api.github.com/users/cwhipkey/followers", "following_url": "https://api.github.com/users/cwhipkey/following{/other_user}", "gists_url": "https://api.github.com/users/cwhipkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/cwhipkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cwhipkey/subscriptions", "organizations_url": "https://api.github.com/users/cwhipkey/orgs", "repos_url": "https://api.github.com/users/cwhipkey/repos", "events_url": "https://api.github.com/users/cwhipkey/events{/privacy}", "received_events_url": "https://api.github.com/users/cwhipkey/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cwhipkey", "id": 17578177, "node_id": "MDQ6VXNlcjE3NTc4MTc3", "avatar_url": "https://avatars0.githubusercontent.com/u/17578177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cwhipkey", "html_url": "https://github.com/cwhipkey", "followers_url": "https://api.github.com/users/cwhipkey/followers", "following_url": "https://api.github.com/users/cwhipkey/following{/other_user}", "gists_url": "https://api.github.com/users/cwhipkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/cwhipkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cwhipkey/subscriptions", "organizations_url": "https://api.github.com/users/cwhipkey/orgs", "repos_url": "https://api.github.com/users/cwhipkey/repos", "events_url": "https://api.github.com/users/cwhipkey/events{/privacy}", "received_events_url": "https://api.github.com/users/cwhipkey/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2017-10-08T03:32:52Z", "updated_at": "2017-10-13T17:34:17Z", "closed_at": "2017-10-13T17:08:56Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13561", "html_url": "https://github.com/tensorflow/tensorflow/pull/13561", "diff_url": "https://github.com/tensorflow/tensorflow/pull/13561.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/13561.patch"}, "body_html": "<p>This fix is an effort to address the issue raised by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"179330299\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/4590\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/4590/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/4590\">#4590</a> where improvement of shape inference for <code>tf.slice</code> is needed.</p>\n<p>When one of the size element is unknwon, the output shape is completely unknwon (with right rank):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> z <span class=\"pl-k\">=</span> tf.zeros((<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>))\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> z.get_shape().as_list()\n[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> m <span class=\"pl-k\">=</span> tf.slice(z, [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>], [tf.constant(<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> m.get_shape().as_list()\n[<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">None</span>]</pre></div>\n<p>This fix improves the shape inference so that as long as the size element is not unknown or <code>-1</code>, the right shape will shown up:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> z <span class=\"pl-k\">=</span> tf.zeros((<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>))\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> z.get_shape().as_list()\n[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>]\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> m <span class=\"pl-k\">=</span> tf.slice(z, [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>], [tf.constant(<span class=\"pl-c1\">1</span>) <span class=\"pl-k\">+</span> <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> m.get_shape().as_list()\n[<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">None</span>]</pre></div>\n<p>Note: this fix does not handle the case where one of the size element is <code>-1</code> and one of the size element is unknown. However, it is an improvement nevertheless.</p>\n<p>Signed-off-by: Yong Tang <a href=\"mailto:yong.tang.github@outlook.com\">yong.tang.github@outlook.com</a></p>", "body_text": "This fix is an effort to address the issue raised by #4590 where improvement of shape inference for tf.slice is needed.\nWhen one of the size element is unknwon, the output shape is completely unknwon (with right rank):\n>>> import tensorflow as tf\n>>> z = tf.zeros((1, 2, 3))\n>>> z.get_shape().as_list()\n[1, 2, 3]\n>>> m = tf.slice(z, [0, 0, 0], [tf.constant(1) + 0, 2, -1])\n>>> m.get_shape().as_list()\n[None, None, None]\nThis fix improves the shape inference so that as long as the size element is not unknown or -1, the right shape will shown up:\n>>> import tensorflow as tf\n>>> z = tf.zeros((1, 2, 3))\n>>> z.get_shape().as_list()\n[1, 2, 3]\n>>> m = tf.slice(z, [0, 0, 0], [tf.constant(1) + 0, 2, -1])\n>>> m.get_shape().as_list()\n[None, 2, None]\nNote: this fix does not handle the case where one of the size element is -1 and one of the size element is unknown. However, it is an improvement nevertheless.\nSigned-off-by: Yong Tang yong.tang.github@outlook.com", "body": "This fix is an effort to address the issue raised by #4590 where improvement of shape inference for `tf.slice` is needed.\r\n\r\nWhen one of the size element is unknwon, the output shape is completely unknwon (with right rank):\r\n```python\r\n>>> import tensorflow as tf\r\n>>> z = tf.zeros((1, 2, 3))\r\n>>> z.get_shape().as_list()\r\n[1, 2, 3]\r\n>>> m = tf.slice(z, [0, 0, 0], [tf.constant(1) + 0, 2, -1])\r\n>>> m.get_shape().as_list()\r\n[None, None, None]\r\n```\r\n\r\nThis fix improves the shape inference so that as long as the size element is not unknown or `-1`, the right shape will shown up:\r\n```python\r\n>>> import tensorflow as tf\r\n>>> z = tf.zeros((1, 2, 3))\r\n>>> z.get_shape().as_list()\r\n[1, 2, 3]\r\n>>> m = tf.slice(z, [0, 0, 0], [tf.constant(1) + 0, 2, -1])\r\n>>> m.get_shape().as_list()\r\n[None, 2, None]\r\n```\r\n\r\nNote: this fix does not handle the case where one of the size element is `-1` and one of the size element is unknown. However, it is an improvement nevertheless.\r\n\r\nSigned-off-by: Yong Tang <yong.tang.github@outlook.com>"}