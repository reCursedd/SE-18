{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22394", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22394/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22394/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22394/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22394", "id": 361947764, "node_id": "MDU6SXNzdWUzNjE5NDc3NjQ=", "number": 22394, "title": "Tensorflow == operator is inconsistent with NumPy, other TF comparison operators", "user": {"login": "bbrister", "id": 9013122, "node_id": "MDQ6VXNlcjkwMTMxMjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9013122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbrister", "html_url": "https://github.com/bbrister", "followers_url": "https://api.github.com/users/bbrister/followers", "following_url": "https://api.github.com/users/bbrister/following{/other_user}", "gists_url": "https://api.github.com/users/bbrister/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbrister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbrister/subscriptions", "organizations_url": "https://api.github.com/users/bbrister/orgs", "repos_url": "https://api.github.com/users/bbrister/repos", "events_url": "https://api.github.com/users/bbrister/events{/privacy}", "received_events_url": "https://api.github.com/users/bbrister/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-09-19T22:13:05Z", "updated_at": "2018-09-20T22:00:53Z", "closed_at": "2018-09-20T22:00:53Z", "author_association": "NONE", "body_html": "<p>Please go to Stack Overflow for help and support:</p>\n<p><a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">https://stackoverflow.com/questions/tagged/tensorflow</a></p>\n<p>If you open a GitHub issue, here is our policy:</p>\n<ol>\n<li>It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).</li>\n<li>The form below must be filled out.</li>\n<li>It shouldn't be a TensorBoard issue. Those go <a href=\"https://github.com/tensorflow/tensorboard/issues\">here</a>.</li>\n</ol>\n<p><strong>Here's why we have that policy</strong>: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Y</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 18</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.7.0</li>\n<li><strong>Python version</strong>: 2.7</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.0</li>\n<li><strong>GPU model and memory</strong>: not relevant</li>\n<li><strong>Exact command to reproduce</strong>: A == B</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<p>Hello,</p>\n<p>I recently ran into a bug in my code where I was trying to use the == operator to compare arrays element-wise. I found out that == was comparing the entire array, rather than comparing element-wise, so the whole expression evaluated to false. The false scalar was then broadcast across other arrays in the program, making the bug difficult to detect. I was able to fix the bug by using the function tf.equal().</p>\n<p>My question is, why does == have this behavior in Tensorflow? In Numpy, == compares arrays element-wise. Even in Tensorflow, the other comparison operators (&gt;, &gt;=. &lt;, &lt;=) operate element-wise. Is there a specific reason for breaking this convention only for the == operator?</p>\n<h3>Source code / logs</h3>\n<p>Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.</p>\n<p>Numpy code:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>import numpy as np<br>\nA = np.eye(3)<br>\nA == 1<br>\narray([[ True, False, False],<br>\n[False,  True, False],<br>\n[False, False,  True]])</p>\n</blockquote>\n</blockquote>\n</blockquote>", "body_text": "Please go to Stack Overflow for help and support:\nhttps://stackoverflow.com/questions/tagged/tensorflow\nIf you open a GitHub issue, here is our policy:\n\nIt must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\nThe form below must be filled out.\nIt shouldn't be a TensorBoard issue. Those go here.\n\nHere's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Y\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): 1.7.0\nPython version: 2.7\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: 9.0\nGPU model and memory: not relevant\nExact command to reproduce: A == B\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\nHello,\nI recently ran into a bug in my code where I was trying to use the == operator to compare arrays element-wise. I found out that == was comparing the entire array, rather than comparing element-wise, so the whole expression evaluated to false. The false scalar was then broadcast across other arrays in the program, making the bug difficult to detect. I was able to fix the bug by using the function tf.equal().\nMy question is, why does == have this behavior in Tensorflow? In Numpy, == compares arrays element-wise. Even in Tensorflow, the other comparison operators (>, >=. <, <=) operate element-wise. Is there a specific reason for breaking this convention only for the == operator?\nSource code / logs\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\nNumpy code:\n\n\n\nimport numpy as np\nA = np.eye(3)\nA == 1\narray([[ True, False, False],\n[False,  True, False],\n[False, False,  True]])", "body": "Please go to Stack Overflow for help and support:\r\n\r\nhttps://stackoverflow.com/questions/tagged/tensorflow\r\n\r\nIf you open a GitHub issue, here is our policy:\r\n\r\n1. It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\r\n2. The form below must be filled out.\r\n3. It shouldn't be a TensorBoard issue. Those go [here](https://github.com/tensorflow/tensorboard/issues).\r\n\r\n**Here's why we have that policy**: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Y\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 18\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: 1.7.0\r\n- **Python version**: 2.7\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**: \r\n- **CUDA/cuDNN version**: 9.0\r\n- **GPU model and memory**: not relevant\r\n- **Exact command to reproduce**: A == B\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n\r\nHello,\r\n\r\nI recently ran into a bug in my code where I was trying to use the == operator to compare arrays element-wise. I found out that == was comparing the entire array, rather than comparing element-wise, so the whole expression evaluated to false. The false scalar was then broadcast across other arrays in the program, making the bug difficult to detect. I was able to fix the bug by using the function tf.equal().\r\n\r\nMy question is, why does == have this behavior in Tensorflow? In Numpy, == compares arrays element-wise. Even in Tensorflow, the other comparison operators (>, >=. <, <=) operate element-wise. Is there a specific reason for breaking this convention only for the == operator?\r\n\r\n### Source code / logs\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\r\n\r\nNumpy code:\r\n\r\n>>> import numpy as np\r\n>>> A = np.eye(3)\r\n>>> A == 1\r\narray([[ True, False, False],\r\n       [False,  True, False],\r\n       [False, False,  True]])\r\n"}