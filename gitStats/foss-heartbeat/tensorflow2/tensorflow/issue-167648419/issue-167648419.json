{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3510", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3510/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3510/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3510/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3510", "id": 167648419, "node_id": "MDU6SXNzdWUxNjc2NDg0MTk=", "number": 3510, "title": "`tf.reduce_min/max/mean` returns uninitialized value on tensors with zero-size dimension", "user": {"login": "bgshih", "id": 7835749, "node_id": "MDQ6VXNlcjc4MzU3NDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/7835749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgshih", "html_url": "https://github.com/bgshih", "followers_url": "https://api.github.com/users/bgshih/followers", "following_url": "https://api.github.com/users/bgshih/following{/other_user}", "gists_url": "https://api.github.com/users/bgshih/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgshih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgshih/subscriptions", "organizations_url": "https://api.github.com/users/bgshih/orgs", "repos_url": "https://api.github.com/users/bgshih/repos", "events_url": "https://api.github.com/users/bgshih/events{/privacy}", "received_events_url": "https://api.github.com/users/bgshih/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-26T16:11:00Z", "updated_at": "2016-07-29T05:41:51Z", "closed_at": "2016-07-28T20:01:20Z", "author_association": "NONE", "body_html": "<p>I find that <code>tf.reduce_min/max/mean</code> returns uninitialized value (<code>nan</code> for example) on tensors with a zero-size dimension. This would cause problems, for example, when computing loss in an object detection problem, where an input image may contain no object. Please consider defining its behaviour on such inputs, e.g. outputing zeros, raising errors, etc.</p>\n<h3>Environment info</h3>\n<ul>\n<li>Operating System: Ubuntu 14.04 LTS</li>\n<li>CUDA 7.5, cuDNN 4.0</li>\n<li>TF version: 0.9.0rc0, pip version (gpu, python 2.7)</li>\n</ul>\n<h3>Steps to reproduce</h3>\n<pre><code>import tensorflow as tf\nwith tf.Session():\n  print(tf.reduce_max(tf.constant(-1.0, shape=[0, 10])).eval())\n</code></pre>\n<p>Output:</p>\n<pre><code>-3.40282e+38\n</code></pre>\n<p>Also works for <code>tf.reduce_min</code>, <code>tf.reduce_mean</code>, but not for <code>tf.reduce_sum</code>.</p>", "body_text": "I find that tf.reduce_min/max/mean returns uninitialized value (nan for example) on tensors with a zero-size dimension. This would cause problems, for example, when computing loss in an object detection problem, where an input image may contain no object. Please consider defining its behaviour on such inputs, e.g. outputing zeros, raising errors, etc.\nEnvironment info\n\nOperating System: Ubuntu 14.04 LTS\nCUDA 7.5, cuDNN 4.0\nTF version: 0.9.0rc0, pip version (gpu, python 2.7)\n\nSteps to reproduce\nimport tensorflow as tf\nwith tf.Session():\n  print(tf.reduce_max(tf.constant(-1.0, shape=[0, 10])).eval())\n\nOutput:\n-3.40282e+38\n\nAlso works for tf.reduce_min, tf.reduce_mean, but not for tf.reduce_sum.", "body": "I find that `tf.reduce_min/max/mean` returns uninitialized value (`nan` for example) on tensors with a zero-size dimension. This would cause problems, for example, when computing loss in an object detection problem, where an input image may contain no object. Please consider defining its behaviour on such inputs, e.g. outputing zeros, raising errors, etc.\n### Environment info\n- Operating System: Ubuntu 14.04 LTS\n- CUDA 7.5, cuDNN 4.0\n- TF version: 0.9.0rc0, pip version (gpu, python 2.7)\n### Steps to reproduce\n\n```\nimport tensorflow as tf\nwith tf.Session():\n  print(tf.reduce_max(tf.constant(-1.0, shape=[0, 10])).eval())\n```\n\nOutput:\n\n```\n-3.40282e+38\n```\n\nAlso works for `tf.reduce_min`, `tf.reduce_mean`, but not for `tf.reduce_sum`.\n"}