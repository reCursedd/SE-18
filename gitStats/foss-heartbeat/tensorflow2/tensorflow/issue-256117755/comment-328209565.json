{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/328209565", "html_url": "https://github.com/tensorflow/tensorflow/issues/12895#issuecomment-328209565", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12895", "id": 328209565, "node_id": "MDEyOklzc3VlQ29tbWVudDMyODIwOTU2NQ==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-08T20:45:14Z", "updated_at": "2017-09-08T20:45:14Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3731025\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/allenlavoie\">@allenlavoie</a> I just realized (after trying it) that pulling the pywrap so file doesn't really work for me because it depends on the Python libraries. Is there no other temporary solution we can use until the fix comes out? Maybe having a separate build target \"libtensorflow_all.so\", or something like that, that exports everything. Would that be acceptable? Aside from breaking the API, which I agree is not great, the binary increases in size by about 9MB (from ~98MB to ~107MB for Mac). Therefore, I believe that having a separate build target might not be too bad.</p>\n<p>I have a package I'm creating and releasing to Sonatype for my Scala API that can optionally include pre-compiled binaries. Given that I use some custom ops, I need to be able to distribute those too and that's why I'm trying to find a temporary solution for the next 1-2 months until the fix is out.</p>", "body_text": "@asimshankar @allenlavoie I just realized (after trying it) that pulling the pywrap so file doesn't really work for me because it depends on the Python libraries. Is there no other temporary solution we can use until the fix comes out? Maybe having a separate build target \"libtensorflow_all.so\", or something like that, that exports everything. Would that be acceptable? Aside from breaking the API, which I agree is not great, the binary increases in size by about 9MB (from ~98MB to ~107MB for Mac). Therefore, I believe that having a separate build target might not be too bad.\nI have a package I'm creating and releasing to Sonatype for my Scala API that can optionally include pre-compiled binaries. Given that I use some custom ops, I need to be able to distribute those too and that's why I'm trying to find a temporary solution for the next 1-2 months until the fix is out.", "body": "@asimshankar @allenlavoie I just realized (after trying it) that pulling the pywrap so file doesn't really work for me because it depends on the Python libraries. Is there no other temporary solution we can use until the fix comes out? Maybe having a separate build target \"libtensorflow_all.so\", or something like that, that exports everything. Would that be acceptable? Aside from breaking the API, which I agree is not great, the binary increases in size by about 9MB (from ~98MB to ~107MB for Mac). Therefore, I believe that having a separate build target might not be too bad.\r\n\r\nI have a package I'm creating and releasing to Sonatype for my Scala API that can optionally include pre-compiled binaries. Given that I use some custom ops, I need to be able to distribute those too and that's why I'm trying to find a temporary solution for the next 1-2 months until the fix is out."}