{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/332638489", "html_url": "https://github.com/tensorflow/tensorflow/issues/12895#issuecomment-332638489", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12895", "id": 332638489, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjYzODQ4OQ==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-27T20:01:01Z", "updated_at": "2017-09-27T20:01:01Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3731025\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/allenlavoie\">@allenlavoie</a> That's actually great! Thanks! :) I get my code to compile with these changes. I only have one problem, which is that the JVM might invoke the op library loading function multiple times (even if I only do it from a synchronized static block). This is because the TensorFlow library might remain loaded in the background across multiple Java/Scala runs. This results in a fatal error where multiple kernels are registered for the same op. Is there a way to make <code>REGISTER_KERNEL_BUILDER</code> conditional on whether a kernel has already been registered for that op? Thanks a lot! :)</p>", "body_text": "@allenlavoie That's actually great! Thanks! :) I get my code to compile with these changes. I only have one problem, which is that the JVM might invoke the op library loading function multiple times (even if I only do it from a synchronized static block). This is because the TensorFlow library might remain loaded in the background across multiple Java/Scala runs. This results in a fatal error where multiple kernels are registered for the same op. Is there a way to make REGISTER_KERNEL_BUILDER conditional on whether a kernel has already been registered for that op? Thanks a lot! :)", "body": "@allenlavoie That's actually great! Thanks! :) I get my code to compile with these changes. I only have one problem, which is that the JVM might invoke the op library loading function multiple times (even if I only do it from a synchronized static block). This is because the TensorFlow library might remain loaded in the background across multiple Java/Scala runs. This results in a fatal error where multiple kernels are registered for the same op. Is there a way to make `REGISTER_KERNEL_BUILDER` conditional on whether a kernel has already been registered for that op? Thanks a lot! :)"}