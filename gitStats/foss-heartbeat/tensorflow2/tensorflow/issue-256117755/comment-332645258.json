{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/332645258", "html_url": "https://github.com/tensorflow/tensorflow/issues/12895#issuecomment-332645258", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12895", "id": 332645258, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjY0NTI1OA==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-27T20:28:29Z", "updated_at": "2017-09-27T20:28:29Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3731025\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/allenlavoie\">@allenlavoie</a> FYI, I'm currently doing the following which is a bit ugly:</p>\n<pre><code>namespace tensorflow {\nnamespace kernel_factory {\n\nstruct KernelRegistration {\n  KernelRegistration(const KernelDef&amp; d, StringPiece c,\n                     kernel_factory::OpKernelRegistrar::Factory f)\n      : def(d), kernel_class_name(c.ToString()), factory(f) {}\n  const KernelDef def;\n  const string kernel_class_name;\n  const kernel_factory::OpKernelRegistrar::Factory factory;\n};\n\nauto jvmCallbackOpInitializer = []{\n  auto* reg = reinterpret_cast&lt;std::unordered_multimap&lt;string, KernelRegistration&gt;*&gt;(GlobalKernelRegistry());\n  if (reg-&gt;find(strings::StrCat(\"JVMCallback:\", DeviceTypeString(DEVICE_CPU), \":\")) == reg-&gt;end()) {\n    REGISTER_KERNEL_BUILDER(Name(\"JVMCallback\").Device(DEVICE_CPU), JVMCallbackOp);\n    REGISTER_KERNEL_BUILDER(Name(\"JVMCallbackStateless\").Device(DEVICE_CPU), JVMCallbackOp);\n  }\n  return 0;\n}();\n\n}\n}\n</code></pre>", "body_text": "@allenlavoie FYI, I'm currently doing the following which is a bit ugly:\nnamespace tensorflow {\nnamespace kernel_factory {\n\nstruct KernelRegistration {\n  KernelRegistration(const KernelDef& d, StringPiece c,\n                     kernel_factory::OpKernelRegistrar::Factory f)\n      : def(d), kernel_class_name(c.ToString()), factory(f) {}\n  const KernelDef def;\n  const string kernel_class_name;\n  const kernel_factory::OpKernelRegistrar::Factory factory;\n};\n\nauto jvmCallbackOpInitializer = []{\n  auto* reg = reinterpret_cast<std::unordered_multimap<string, KernelRegistration>*>(GlobalKernelRegistry());\n  if (reg->find(strings::StrCat(\"JVMCallback:\", DeviceTypeString(DEVICE_CPU), \":\")) == reg->end()) {\n    REGISTER_KERNEL_BUILDER(Name(\"JVMCallback\").Device(DEVICE_CPU), JVMCallbackOp);\n    REGISTER_KERNEL_BUILDER(Name(\"JVMCallbackStateless\").Device(DEVICE_CPU), JVMCallbackOp);\n  }\n  return 0;\n}();\n\n}\n}", "body": "@allenlavoie FYI, I'm currently doing the following which is a bit ugly:\r\n```\r\nnamespace tensorflow {\r\nnamespace kernel_factory {\r\n\r\nstruct KernelRegistration {\r\n  KernelRegistration(const KernelDef& d, StringPiece c,\r\n                     kernel_factory::OpKernelRegistrar::Factory f)\r\n      : def(d), kernel_class_name(c.ToString()), factory(f) {}\r\n  const KernelDef def;\r\n  const string kernel_class_name;\r\n  const kernel_factory::OpKernelRegistrar::Factory factory;\r\n};\r\n\r\nauto jvmCallbackOpInitializer = []{\r\n  auto* reg = reinterpret_cast<std::unordered_multimap<string, KernelRegistration>*>(GlobalKernelRegistry());\r\n  if (reg->find(strings::StrCat(\"JVMCallback:\", DeviceTypeString(DEVICE_CPU), \":\")) == reg->end()) {\r\n    REGISTER_KERNEL_BUILDER(Name(\"JVMCallback\").Device(DEVICE_CPU), JVMCallbackOp);\r\n    REGISTER_KERNEL_BUILDER(Name(\"JVMCallbackStateless\").Device(DEVICE_CPU), JVMCallbackOp);\r\n  }\r\n  return 0;\r\n}();\r\n\r\n}\r\n}\r\n```"}