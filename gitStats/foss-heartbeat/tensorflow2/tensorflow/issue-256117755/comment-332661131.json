{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/332661131", "html_url": "https://github.com/tensorflow/tensorflow/issues/12895#issuecomment-332661131", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12895", "id": 332661131, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMjY2MTEzMQ==", "user": {"login": "eaplatanios", "id": 1294940, "node_id": "MDQ6VXNlcjEyOTQ5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1294940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eaplatanios", "html_url": "https://github.com/eaplatanios", "followers_url": "https://api.github.com/users/eaplatanios/followers", "following_url": "https://api.github.com/users/eaplatanios/following{/other_user}", "gists_url": "https://api.github.com/users/eaplatanios/gists{/gist_id}", "starred_url": "https://api.github.com/users/eaplatanios/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eaplatanios/subscriptions", "organizations_url": "https://api.github.com/users/eaplatanios/orgs", "repos_url": "https://api.github.com/users/eaplatanios/repos", "events_url": "https://api.github.com/users/eaplatanios/events{/privacy}", "received_events_url": "https://api.github.com/users/eaplatanios/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-27T21:29:05Z", "updated_at": "2017-09-27T21:29:05Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Yeah I was also surprised at that behavior, but I noticed online that other people have had similar experiences by calling TF_LoadLibrary multiple times.</p>\n<p>They don't seem to be. I get this error when trying to compile <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/python_api.cc\">this</a> from outside bazel (i.e., from within my library):</p>\n<pre><code>Undefined symbols for architecture x86_64:\n[error]   \"tensorflow::Node::set_requested_device(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;)\", referenced from:\n[error]       tensorflow::SetRequestedDevice(TF_Graph*, TF_Operation*, char const*) in tf_python_api.cc.o\n[error]   \"tensorflow::Graph::RemoveEdge(tensorflow::Edge const*)\", referenced from:\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\n[error]       tensorflow::ClearControlInputs(TF_Graph*, TF_Operation*) in tf_python_api.cc.o\n[error]   \"tensorflow::Graph::kControlSlot\", referenced from:\n[error]       tensorflow::AddControlInput(TF_Graph*, TF_Operation*, TF_Operation*) in tf_python_api.cc.o\n[error]       tensorflow::ClearControlInputs(TF_Graph*, TF_Operation*) in tf_python_api.cc.o\n[error]   \"tensorflow::Graph::AddEdge(tensorflow::Node*, int, tensorflow::Node*, int)\", referenced from:\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\n[error]       tensorflow::AddControlInput(TF_Graph*, TF_Operation*, TF_Operation*) in tf_python_api.cc.o\n[error]   \"nsync::nsync_mu_lock(nsync::nsync_mu_s_*)\", referenced from:\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\n[error]       tensorflow::AddControlInput(TF_Graph*, TF_Operation*, TF_Operation*) in tf_python_api.cc.o\n[error]       tensorflow::ClearControlInputs(TF_Graph*, TF_Operation*) in tf_python_api.cc.o\n[error]       tensorflow::SetRequestedDevice(TF_Graph*, TF_Operation*, char const*) in tf_python_api.cc.o\n[error]   \"nsync::nsync_mu_unlock(nsync::nsync_mu_s_*)\", referenced from:\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\n[error]       tensorflow::AddControlInput(TF_Graph*, TF_Operation*, TF_Operation*) in tf_python_api.cc.o\n[error]       tensorflow::ClearControlInputs(TF_Graph*, TF_Operation*) in tf_python_api.cc.o\n[error]       tensorflow::SetRequestedDevice(TF_Graph*, TF_Operation*, char const*) in tf_python_api.cc.o\n[error]   \"tensorflow::Node::input_edge(int, tensorflow::Edge const**) const\", referenced from:\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\n[error] ld: symbol(s) not found for architecture x86_64\n</code></pre>", "body_text": "Yeah I was also surprised at that behavior, but I noticed online that other people have had similar experiences by calling TF_LoadLibrary multiple times.\nThey don't seem to be. I get this error when trying to compile this from outside bazel (i.e., from within my library):\nUndefined symbols for architecture x86_64:\n[error]   \"tensorflow::Node::set_requested_device(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)\", referenced from:\n[error]       tensorflow::SetRequestedDevice(TF_Graph*, TF_Operation*, char const*) in tf_python_api.cc.o\n[error]   \"tensorflow::Graph::RemoveEdge(tensorflow::Edge const*)\", referenced from:\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\n[error]       tensorflow::ClearControlInputs(TF_Graph*, TF_Operation*) in tf_python_api.cc.o\n[error]   \"tensorflow::Graph::kControlSlot\", referenced from:\n[error]       tensorflow::AddControlInput(TF_Graph*, TF_Operation*, TF_Operation*) in tf_python_api.cc.o\n[error]       tensorflow::ClearControlInputs(TF_Graph*, TF_Operation*) in tf_python_api.cc.o\n[error]   \"tensorflow::Graph::AddEdge(tensorflow::Node*, int, tensorflow::Node*, int)\", referenced from:\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\n[error]       tensorflow::AddControlInput(TF_Graph*, TF_Operation*, TF_Operation*) in tf_python_api.cc.o\n[error]   \"nsync::nsync_mu_lock(nsync::nsync_mu_s_*)\", referenced from:\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\n[error]       tensorflow::AddControlInput(TF_Graph*, TF_Operation*, TF_Operation*) in tf_python_api.cc.o\n[error]       tensorflow::ClearControlInputs(TF_Graph*, TF_Operation*) in tf_python_api.cc.o\n[error]       tensorflow::SetRequestedDevice(TF_Graph*, TF_Operation*, char const*) in tf_python_api.cc.o\n[error]   \"nsync::nsync_mu_unlock(nsync::nsync_mu_s_*)\", referenced from:\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\n[error]       tensorflow::AddControlInput(TF_Graph*, TF_Operation*, TF_Operation*) in tf_python_api.cc.o\n[error]       tensorflow::ClearControlInputs(TF_Graph*, TF_Operation*) in tf_python_api.cc.o\n[error]       tensorflow::SetRequestedDevice(TF_Graph*, TF_Operation*, char const*) in tf_python_api.cc.o\n[error]   \"tensorflow::Node::input_edge(int, tensorflow::Edge const**) const\", referenced from:\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\n[error] ld: symbol(s) not found for architecture x86_64", "body": "Yeah I was also surprised at that behavior, but I noticed online that other people have had similar experiences by calling TF_LoadLibrary multiple times.\r\n\r\nThey don't seem to be. I get this error when trying to compile [this](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/python_api.cc) from outside bazel (i.e., from within my library):\r\n```\r\nUndefined symbols for architecture x86_64:\r\n[error]   \"tensorflow::Node::set_requested_device(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)\", referenced from:\r\n[error]       tensorflow::SetRequestedDevice(TF_Graph*, TF_Operation*, char const*) in tf_python_api.cc.o\r\n[error]   \"tensorflow::Graph::RemoveEdge(tensorflow::Edge const*)\", referenced from:\r\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\r\n[error]       tensorflow::ClearControlInputs(TF_Graph*, TF_Operation*) in tf_python_api.cc.o\r\n[error]   \"tensorflow::Graph::kControlSlot\", referenced from:\r\n[error]       tensorflow::AddControlInput(TF_Graph*, TF_Operation*, TF_Operation*) in tf_python_api.cc.o\r\n[error]       tensorflow::ClearControlInputs(TF_Graph*, TF_Operation*) in tf_python_api.cc.o\r\n[error]   \"tensorflow::Graph::AddEdge(tensorflow::Node*, int, tensorflow::Node*, int)\", referenced from:\r\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\r\n[error]       tensorflow::AddControlInput(TF_Graph*, TF_Operation*, TF_Operation*) in tf_python_api.cc.o\r\n[error]   \"nsync::nsync_mu_lock(nsync::nsync_mu_s_*)\", referenced from:\r\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\r\n[error]       tensorflow::AddControlInput(TF_Graph*, TF_Operation*, TF_Operation*) in tf_python_api.cc.o\r\n[error]       tensorflow::ClearControlInputs(TF_Graph*, TF_Operation*) in tf_python_api.cc.o\r\n[error]       tensorflow::SetRequestedDevice(TF_Graph*, TF_Operation*, char const*) in tf_python_api.cc.o\r\n[error]   \"nsync::nsync_mu_unlock(nsync::nsync_mu_s_*)\", referenced from:\r\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\r\n[error]       tensorflow::AddControlInput(TF_Graph*, TF_Operation*, TF_Operation*) in tf_python_api.cc.o\r\n[error]       tensorflow::ClearControlInputs(TF_Graph*, TF_Operation*) in tf_python_api.cc.o\r\n[error]       tensorflow::SetRequestedDevice(TF_Graph*, TF_Operation*, char const*) in tf_python_api.cc.o\r\n[error]   \"tensorflow::Node::input_edge(int, tensorflow::Edge const**) const\", referenced from:\r\n[error]       tensorflow::UpdateInput(TF_Graph*, TF_Operation*, int, TF_Output) in tf_python_api.cc.o\r\n[error] ld: symbol(s) not found for architecture x86_64\r\n```"}