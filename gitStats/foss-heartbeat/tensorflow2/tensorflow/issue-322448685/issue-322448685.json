{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19235", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19235/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19235/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19235/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19235", "id": 322448685, "node_id": "MDU6SXNzdWUzMjI0NDg2ODU=", "number": 19235, "title": "Bottleneck retrained model predicts one class after applying transforms and opimize_for_inference. ", "user": {"login": "h3nok", "id": 22085306, "node_id": "MDQ6VXNlcjIyMDg1MzA2", "avatar_url": "https://avatars3.githubusercontent.com/u/22085306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h3nok", "html_url": "https://github.com/h3nok", "followers_url": "https://api.github.com/users/h3nok/followers", "following_url": "https://api.github.com/users/h3nok/following{/other_user}", "gists_url": "https://api.github.com/users/h3nok/gists{/gist_id}", "starred_url": "https://api.github.com/users/h3nok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h3nok/subscriptions", "organizations_url": "https://api.github.com/users/h3nok/orgs", "repos_url": "https://api.github.com/users/h3nok/repos", "events_url": "https://api.github.com/users/h3nok/events{/privacy}", "received_events_url": "https://api.github.com/users/h3nok/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-05-11T22:09:28Z", "updated_at": "2018-05-18T14:00:33Z", "closed_at": "2018-05-18T13:59:48Z", "author_association": "NONE", "body_html": "<p>Summary :</p>\n<p><strong>Have I written custom code</strong> - Mostly using the retrain script from the tensorflow for poets tutorial. I added custom code to validate network but didn't change the training procedure.<br>\n<strong>OS Platform and Distribution</strong> -  Windows 7 x64. Training and evaluation is done on a windows machine using Anconda python distribution. Once I freeze the model I then copy it to a linux box with CentOS 7 x86_64 to do the transformation. The transformed model is then copied back to the windows box for further analysis before deployment.<br>\n<strong>TensorFlow installed from</strong> - anaconda cloud<br>\n<strong>TensorFlow version</strong> - 1.2.1<br>\n<strong>Bazel version</strong> - 0.8.1<br>\n<strong>CUDA/cuDNN version</strong> - 8 / 7<br>\n<strong>GPU model and memory</strong> - GTX 970 4GB<br>\n<strong>Exact command to reproduce</strong> - N/A</p>\n<p>I have asked the same question on stackoverflow</p>\n<p><a href=\"https://stackoverflow.com/questions/50243492/inception-v3-retrained-model-incorrect-predictions-after-using-optimize-for-infe/50263837#50263837\" rel=\"nofollow\">https://stackoverflow.com/questions/50243492/inception-v3-retrained-model-incorrect-predictions-after-using-optimize-for-infe/50263837#50263837</a></p>\n<p>and opencv help</p>\n<p><a href=\"http://answers.opencv.org/question/191168/inception-v3-retrained-model-incorrect-predictions-after-using-optimize_for_inference-and-graph_transform-tools/\" rel=\"nofollow\">http://answers.opencv.org/question/191168/inception-v3-retrained-model-incorrect-predictions-after-using-optimize_for_inference-and-graph_transform-tools/</a></p>\n<p>I can really use some suggestions:</p>\n<ol>\n<li>I followed the tensorflow for poets tutorial to retrain inception V3 for 3-class image task</li>\n</ol>\n<p><a href=\"https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/#0\" rel=\"nofollow\">https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/#0</a></p>\n<ol start=\"2\">\n<li>\n<p>The network fits the data well and i'm able to validate the frozen model using tensorflow python which predicts unseen samples at 97 % accuracy</p>\n</li>\n<li>\n<p>The frozen model has to be integrated to a legacy application which uses opencv::DNN module. To get the forzen model ready I applied</p>\n</li>\n</ol>\n<ul>\n<li>optimize_for_inference</li>\n<li>graph_transforms with \" remove_nodes(op=PlaceholderWithDefault) strip_unused_nodes(type=float, shape=\"1,299,299,3\") sort_by_execution_order\" flags</li>\n</ul>\n<ol start=\"4\">\n<li>Loaded transformed model with opencv and run some more validation before deployment. The transformed version could not match (not even close) the trained original model.  It mostly predicts a single class.</li>\n</ol>\n<p>I used opencv blobFromImage function with swapRB set to true.</p>\n<p>I tried to normalize input by subtracting ImageNet mean as well as my training set mean. Unsuccessful in both cases.</p>\n<p>I just have no idea what is causing for the model to be so different after its transformed.</p>\n<p>Thanks for your time</p>", "body_text": "Summary :\nHave I written custom code - Mostly using the retrain script from the tensorflow for poets tutorial. I added custom code to validate network but didn't change the training procedure.\nOS Platform and Distribution -  Windows 7 x64. Training and evaluation is done on a windows machine using Anconda python distribution. Once I freeze the model I then copy it to a linux box with CentOS 7 x86_64 to do the transformation. The transformed model is then copied back to the windows box for further analysis before deployment.\nTensorFlow installed from - anaconda cloud\nTensorFlow version - 1.2.1\nBazel version - 0.8.1\nCUDA/cuDNN version - 8 / 7\nGPU model and memory - GTX 970 4GB\nExact command to reproduce - N/A\nI have asked the same question on stackoverflow\nhttps://stackoverflow.com/questions/50243492/inception-v3-retrained-model-incorrect-predictions-after-using-optimize-for-infe/50263837#50263837\nand opencv help\nhttp://answers.opencv.org/question/191168/inception-v3-retrained-model-incorrect-predictions-after-using-optimize_for_inference-and-graph_transform-tools/\nI can really use some suggestions:\n\nI followed the tensorflow for poets tutorial to retrain inception V3 for 3-class image task\n\nhttps://codelabs.developers.google.com/codelabs/tensorflow-for-poets/#0\n\n\nThe network fits the data well and i'm able to validate the frozen model using tensorflow python which predicts unseen samples at 97 % accuracy\n\n\nThe frozen model has to be integrated to a legacy application which uses opencv::DNN module. To get the forzen model ready I applied\n\n\n\noptimize_for_inference\ngraph_transforms with \" remove_nodes(op=PlaceholderWithDefault) strip_unused_nodes(type=float, shape=\"1,299,299,3\") sort_by_execution_order\" flags\n\n\nLoaded transformed model with opencv and run some more validation before deployment. The transformed version could not match (not even close) the trained original model.  It mostly predicts a single class.\n\nI used opencv blobFromImage function with swapRB set to true.\nI tried to normalize input by subtracting ImageNet mean as well as my training set mean. Unsuccessful in both cases.\nI just have no idea what is causing for the model to be so different after its transformed.\nThanks for your time", "body": "\r\nSummary : \r\n\r\n**Have I written custom code** - Mostly using the retrain script from the tensorflow for poets tutorial. I added custom code to validate network but didn't change the training procedure. \r\n**OS Platform and Distribution** -  Windows 7 x64. Training and evaluation is done on a windows machine using Anconda python distribution. Once I freeze the model I then copy it to a linux box with CentOS 7 x86_64 to do the transformation. The transformed model is then copied back to the windows box for further analysis before deployment.\r\n**TensorFlow installed from** - anaconda cloud \r\n**TensorFlow version** - 1.2.1 \r\n**Bazel version** - 0.8.1\r\n**CUDA/cuDNN version** - 8 / 7 \r\n**GPU model and memory** - GTX 970 4GB \r\n**Exact command to reproduce** - N/A\r\n\r\nI have asked the same question on stackoverflow \r\n\r\nhttps://stackoverflow.com/questions/50243492/inception-v3-retrained-model-incorrect-predictions-after-using-optimize-for-infe/50263837#50263837\r\n\r\nand opencv help \r\n\r\nhttp://answers.opencv.org/question/191168/inception-v3-retrained-model-incorrect-predictions-after-using-optimize_for_inference-and-graph_transform-tools/\r\n\r\nI can really use some suggestions: \r\n\r\n1. I followed the tensorflow for poets tutorial to retrain inception V3 for 3-class image task \r\n\r\nhttps://codelabs.developers.google.com/codelabs/tensorflow-for-poets/#0\r\n\r\n2. The network fits the data well and i'm able to validate the frozen model using tensorflow python which predicts unseen samples at 97 % accuracy \r\n\r\n3. The frozen model has to be integrated to a legacy application which uses opencv::DNN module. To get the forzen model ready I applied \r\n  - optimize_for_inference \r\n  - graph_transforms with \" remove_nodes(op=PlaceholderWithDefault) strip_unused_nodes(type=float, shape=\\\"1,299,299,3\\\") sort_by_execution_order\" flags \r\n\r\n4. Loaded transformed model with opencv and run some more validation before deployment. The transformed version could not match (not even close) the trained original model.  It mostly predicts a single class. \r\n\r\nI used opencv blobFromImage function with swapRB set to true. \r\n\r\nI tried to normalize input by subtracting ImageNet mean as well as my training set mean. Unsuccessful in both cases. \r\n\r\n\r\nI just have no idea what is causing for the model to be so different after its transformed. \r\n\r\nThanks for your time \r\n\r\n\r\n"}