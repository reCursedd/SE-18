{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4231", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4231/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4231/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4231/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/4231", "id": 175308854, "node_id": "MDU6SXNzdWUxNzUzMDg4NTQ=", "number": 4231, "title": "variable_scope raise exception if reuse=False and no name_or_scope", "user": {"login": "cancan101", "id": 51059, "node_id": "MDQ6VXNlcjUxMDU5", "avatar_url": "https://avatars1.githubusercontent.com/u/51059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cancan101", "html_url": "https://github.com/cancan101", "followers_url": "https://api.github.com/users/cancan101/followers", "following_url": "https://api.github.com/users/cancan101/following{/other_user}", "gists_url": "https://api.github.com/users/cancan101/gists{/gist_id}", "starred_url": "https://api.github.com/users/cancan101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cancan101/subscriptions", "organizations_url": "https://api.github.com/users/cancan101/orgs", "repos_url": "https://api.github.com/users/cancan101/repos", "events_url": "https://api.github.com/users/cancan101/events{/privacy}", "received_events_url": "https://api.github.com/users/cancan101/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-06T17:49:25Z", "updated_at": "2016-09-16T16:41:07Z", "closed_at": "2016-09-16T16:41:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Right now <code>variable_scope</code> <a href=\"https://github.com/tensorflow/tensorflow/blob/5c07198777fd641ffb5f55fa6604050ccf55e8c8/tensorflow/python/ops/variable_scope.py#L1373\">raises an exception</a> if <code>reuse=True</code> and there is no <code>name_or_scope</code>, but there is no similar error when <code>reuse=False</code> (explicitly set and not using default of <code>None</code>).</p>\n<p>Obviously no error should be raised when <code>reuse=None</code> but I think as a safety check if I have explicitly set <code>reuse=False</code>, then I do want to raise an error if I have forgotten to set the scope for a given layer / node.</p>\n<p>I am using this construct in tf-slim to deal with creating a different graph for training vs validation. Right now if I forget to assign a <code>scope</code> to a given layer, than the call to create the graph will not fail even though I want it to.</p>", "body_text": "Right now variable_scope raises an exception if reuse=True and there is no name_or_scope, but there is no similar error when reuse=False (explicitly set and not using default of None).\nObviously no error should be raised when reuse=None but I think as a safety check if I have explicitly set reuse=False, then I do want to raise an error if I have forgotten to set the scope for a given layer / node.\nI am using this construct in tf-slim to deal with creating a different graph for training vs validation. Right now if I forget to assign a scope to a given layer, than the call to create the graph will not fail even though I want it to.", "body": "Right now `variable_scope` [raises an exception](https://github.com/tensorflow/tensorflow/blob/5c07198777fd641ffb5f55fa6604050ccf55e8c8/tensorflow/python/ops/variable_scope.py#L1373) if `reuse=True` and there is no `name_or_scope`, but there is no similar error when `reuse=False` (explicitly set and not using default of `None`). \n\nObviously no error should be raised when `reuse=None` but I think as a safety check if I have explicitly set `reuse=False`, then I do want to raise an error if I have forgotten to set the scope for a given layer / node.\n\nI am using this construct in tf-slim to deal with creating a different graph for training vs validation. Right now if I forget to assign a `scope` to a given layer, than the call to create the graph will not fail even though I want it to.\n"}