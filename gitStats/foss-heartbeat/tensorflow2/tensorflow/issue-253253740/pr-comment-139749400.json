{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/139749400", "pull_request_review_id": 63725792, "id": 139749400, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTc0OTQwMA==", "diff_hunk": "@@ -285,6 +285,77 @@ def testNumpyInputFnWithMismatchLengthOfInputs(self):\n             num_epochs=1)\n         failing_input_fn()\n \n+  def testNumpyInputFnWhenLabelIsDictionary(self):\n+    a = np.arange(4) * 1.0\n+    b = np.arange(32, 36)\n+    x = {'a': a, 'b': b}\n+    y = {'y1': np.arange(-32, -28), 'y2': np.arange(32, 28, -1)}\n+\n+    with self.test_session() as session:\n+      input_fn = numpy_io.numpy_input_fn(\n+        x, y, batch_size=2, shuffle=False, num_epochs=1)\n+      features_tensor, targets_tensor = input_fn()\n+\n+      coord = coordinator.Coordinator()\n+      threads = queue_runner_impl.start_queue_runners(session, coord=coord)\n+\n+      features, targets = session.run([features_tensor, targets_tensor])\n+      self.assertEqual(len(features), 2)\n+      self.assertAllEqual(features['a'], [0, 1])\n+      self.assertAllEqual(features['b'], [32, 33])\n+      self.assertEqual(len(targets), 2)\n+      self.assertAllEqual(targets['y1'], [-32, -31])\n+      self.assertAllEqual(targets['y2'], [32, 31])\n+\n+      session.run([features_tensor, targets_tensor])\n+      with self.assertRaises(errors.OutOfRangeError):\n+        session.run([features_tensor, targets_tensor])\n+\n+      coord.request_stop()\n+      coord.join(threads)\n+\n+  def testNumpyInputFnWhenLabelIsEmptyDictionary(self):\n+    a = np.arange(4) * 1.0\n+    b = np.arange(32, 36)\n+    x = {'a': a, 'b': b}\n+    y = {}\n+\n+    with self.test_session() as session:\n+      input_fn = numpy_io.numpy_input_fn(\n+        x, y, batch_size=2, shuffle=False, num_epochs=1)\n+      features_tensor = input_fn()", "path": "tensorflow/python/estimator/inputs/numpy_io_test.py", "position": 21, "original_position": 42, "commit_id": "6aa603ded604de4fa301ee7bebf69f06c4590e80", "original_commit_id": "dcce6044dc05ed2e6cda601df5b300333859be4f", "user": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "body": "`x = {}` makes no sense (testing for it and raise an appropriate error would be nice), `y = {}` does make sense for unlabeled problems. As does `y=None`.\r\n\r\nHowever, I got confused because even though the docs don't mention it, this function sometimes returns only `features`, and sometimes it returns `(features, labels)`. \r\n\r\nI would find it somewhat odd if the return type changed based on the content of the dict (or non-content).", "created_at": "2017-09-19T16:42:00Z", "updated_at": "2017-10-06T11:43:04Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12645#discussion_r139749400", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12645", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/139749400"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12645#discussion_r139749400"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12645"}}, "body_html": "<p><code>x = {}</code> makes no sense (testing for it and raise an appropriate error would be nice), <code>y = {}</code> does make sense for unlabeled problems. As does <code>y=None</code>.</p>\n<p>However, I got confused because even though the docs don't mention it, this function sometimes returns only <code>features</code>, and sometimes it returns <code>(features, labels)</code>.</p>\n<p>I would find it somewhat odd if the return type changed based on the content of the dict (or non-content).</p>", "body_text": "x = {} makes no sense (testing for it and raise an appropriate error would be nice), y = {} does make sense for unlabeled problems. As does y=None.\nHowever, I got confused because even though the docs don't mention it, this function sometimes returns only features, and sometimes it returns (features, labels).\nI would find it somewhat odd if the return type changed based on the content of the dict (or non-content).", "in_reply_to_id": 139602380}