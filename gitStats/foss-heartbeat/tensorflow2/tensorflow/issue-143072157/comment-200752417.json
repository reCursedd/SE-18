{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/200752417", "html_url": "https://github.com/tensorflow/tensorflow/issues/1606#issuecomment-200752417", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1606", "id": 200752417, "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDc1MjQxNw==", "user": {"login": "fayeshine", "id": 11470826, "node_id": "MDQ6VXNlcjExNDcwODI2", "avatar_url": "https://avatars0.githubusercontent.com/u/11470826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fayeshine", "html_url": "https://github.com/fayeshine", "followers_url": "https://api.github.com/users/fayeshine/followers", "following_url": "https://api.github.com/users/fayeshine/following{/other_user}", "gists_url": "https://api.github.com/users/fayeshine/gists{/gist_id}", "starred_url": "https://api.github.com/users/fayeshine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fayeshine/subscriptions", "organizations_url": "https://api.github.com/users/fayeshine/orgs", "repos_url": "https://api.github.com/users/fayeshine/repos", "events_url": "https://api.github.com/users/fayeshine/events{/privacy}", "received_events_url": "https://api.github.com/users/fayeshine/received_events", "type": "User", "site_admin": false}, "created_at": "2016-03-24T09:28:08Z", "updated_at": "2016-03-24T09:28:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p>You can do it in this way, maybe a little tedious</p>\n<p>res = tf.pack([tf.argmax(y,1), tf.argmax(y_,1)])<br>\nans = res.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels})<br>\nimport numpy as np<br>\nimport pandas as pd<br>\nconfusion = np.zeros([10,10],int)<br>\nfor p in ans.T:<br>\nconfusion[p[0],p[1]]+=1<br>\nprint(pd.DataFrame(confusion))</p>", "body_text": "You can do it in this way, maybe a little tedious\nres = tf.pack([tf.argmax(y,1), tf.argmax(y_,1)])\nans = res.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels})\nimport numpy as np\nimport pandas as pd\nconfusion = np.zeros([10,10],int)\nfor p in ans.T:\nconfusion[p[0],p[1]]+=1\nprint(pd.DataFrame(confusion))", "body": "You can do it in this way, maybe a little tedious\n\nres = tf.pack([tf.argmax(y,1), tf.argmax(y_,1)])\nans = res.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels})\nimport numpy as np\nimport pandas as pd\nconfusion = np.zeros([10,10],int)\nfor p in ans.T:\n    confusion[p[0],p[1]]+=1\nprint(pd.DataFrame(confusion))\n"}