{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3693", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3693/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3693/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3693/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3693", "id": 169840274, "node_id": "MDU6SXNzdWUxNjk4NDAyNzQ=", "number": 3693, "title": "MNIST TensorFlow Website Example problem", "user": {"login": "adonisDias", "id": 15174899, "node_id": "MDQ6VXNlcjE1MTc0ODk5", "avatar_url": "https://avatars2.githubusercontent.com/u/15174899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adonisDias", "html_url": "https://github.com/adonisDias", "followers_url": "https://api.github.com/users/adonisDias/followers", "following_url": "https://api.github.com/users/adonisDias/following{/other_user}", "gists_url": "https://api.github.com/users/adonisDias/gists{/gist_id}", "starred_url": "https://api.github.com/users/adonisDias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adonisDias/subscriptions", "organizations_url": "https://api.github.com/users/adonisDias/orgs", "repos_url": "https://api.github.com/users/adonisDias/repos", "events_url": "https://api.github.com/users/adonisDias/events{/privacy}", "received_events_url": "https://api.github.com/users/adonisDias/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-08-08T04:13:46Z", "updated_at": "2018-01-31T13:38:36Z", "closed_at": "2016-08-09T15:47:30Z", "author_association": "NONE", "body_html": "<p>Hi! When i run the example of MNIST Deep model (got on the tensorflow website) in a jupyter notebook i get this error: The kernel appears to have died. It will restart automatically.<br>\nThis happens in the line:<br>\nprint(\"test accuracy %g\"%accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))</p>\n<p>COMPLETE CODE TENSORFLOW WEBSITE:<br>\nfrom tensorflow.examples.tutorials.mnist import input_data<br>\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)</p>\n<p>from <strong>future</strong> import absolute_import<br>\nfrom <strong>future</strong> import division<br>\nfrom <strong>future</strong> import print_function</p>\n<p>import gzip<br>\nimport os<br>\nimport tempfile</p>\n<p>import numpy<br>\nfrom six.moves import urllib<br>\nfrom six.moves import xrange  # pylint: disable=redefined-builtin<br>\nimport tensorflow as tf<br>\nfrom tensorflow.contrib.learn.python.learn.datasets.mnist import read_data_sets</p>\n<p>sess = tf.InteractiveSession()</p>\n<p>x = tf.placeholder(tf.float32, shape=[None, 784])<br>\ny_ = tf.placeholder(tf.float32, shape=[None, 10])<br>\nW = tf.Variable(tf.zeros([784,10]))<br>\nb = tf.Variable(tf.zeros([10]))<br>\nsess.run(tf.initialize_all_variables())</p>\n<p>y = tf.nn.softmax(tf.matmul(x,W) + b)<br>\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))<br>\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)<br>\nfor i in range(1000):<br>\nbatch = mnist.train.next_batch(100)<br>\ntrain_step.run(feed_dict={x: batch[0], y_: batch[1]})</p>\n<p>correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))<br>\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))<br>\nprint(accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels}))</p>\n<p>def weight_variable(shape):<br>\ninitial = tf.truncated_normal(shape, stddev=0.1)<br>\nreturn tf.Variable(initial)</p>\n<p>def bias_variable(shape):<br>\ninitial = tf.constant(0.1, shape=shape)<br>\nreturn tf.Variable(initial)<br>\ndef conv2d(x, W):<br>\nreturn tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')</p>\n<p>def max_pool_2x2(x):<br>\nreturn tf.nn.max_pool(x, ksize=[1, 2, 2, 1],<br>\nstrides=[1, 2, 2, 1], padding='SAME')</p>\n<p>W_conv1 = weight_variable([5, 5, 1, 32])<br>\nb_conv1 = bias_variable([32])</p>\n<p>x_image = tf.reshape(x, [-1,28,28,1])</p>\n<p>h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)<br>\nh_pool1 = max_pool_2x2(h_conv1)</p>\n<p>W_conv2 = weight_variable([5, 5, 32, 64])<br>\nb_conv2 = bias_variable([64])</p>\n<p>h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)<br>\nh_pool2 = max_pool_2x2(h_conv2)</p>\n<p>W_fc1 = weight_variable([7 * 7 * 64, 1024])<br>\nb_fc1 = bias_variable([1024])</p>\n<p>h_pool2_flat = tf.reshape(h_pool2, [-1, 7_7_64])<br>\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</p>\n<p>keep_prob = tf.placeholder(tf.float32)<br>\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</p>\n<p>W_fc2 = weight_variable([1024, 10])<br>\nb_fc2 = bias_variable([10])</p>\n<p>y_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</p>\n<p>cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y_conv), reduction_indices=[1]))<br>\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)<br>\ncorrect_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))<br>\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</p>\n<p>sess.run(tf.initialize_all_variables())</p>\n<p>for i in range(200):<br>\nbatch = mnist.train.next_batch(50)<br>\nif i%100 == 0:<br>\ntrain_accuracy = accuracy.eval(feed_dict={<br>\nx:batch[0], y_: batch[1], keep_prob: 1.0})<br>\nprint(\"step %d, training accuracy %g\"%(i, train_accuracy))<br>\ntrain_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})</p>\n<p>print(\"test accuracy %g\"%accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))</p>\n<p>Please, help! Thanks!!</p>", "body_text": "Hi! When i run the example of MNIST Deep model (got on the tensorflow website) in a jupyter notebook i get this error: The kernel appears to have died. It will restart automatically.\nThis happens in the line:\nprint(\"test accuracy %g\"%accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))\nCOMPLETE CODE TENSORFLOW WEBSITE:\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\nfrom future import absolute_import\nfrom future import division\nfrom future import print_function\nimport gzip\nimport os\nimport tempfile\nimport numpy\nfrom six.moves import urllib\nfrom six.moves import xrange  # pylint: disable=redefined-builtin\nimport tensorflow as tf\nfrom tensorflow.contrib.learn.python.learn.datasets.mnist import read_data_sets\nsess = tf.InteractiveSession()\nx = tf.placeholder(tf.float32, shape=[None, 784])\ny_ = tf.placeholder(tf.float32, shape=[None, 10])\nW = tf.Variable(tf.zeros([784,10]))\nb = tf.Variable(tf.zeros([10]))\nsess.run(tf.initialize_all_variables())\ny = tf.nn.softmax(tf.matmul(x,W) + b)\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\nfor i in range(1000):\nbatch = mnist.train.next_batch(100)\ntrain_step.run(feed_dict={x: batch[0], y_: batch[1]})\ncorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint(accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels}))\ndef weight_variable(shape):\ninitial = tf.truncated_normal(shape, stddev=0.1)\nreturn tf.Variable(initial)\ndef bias_variable(shape):\ninitial = tf.constant(0.1, shape=shape)\nreturn tf.Variable(initial)\ndef conv2d(x, W):\nreturn tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\ndef max_pool_2x2(x):\nreturn tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\nstrides=[1, 2, 2, 1], padding='SAME')\nW_conv1 = weight_variable([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\nx_image = tf.reshape(x, [-1,28,28,1])\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\nW_conv2 = weight_variable([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\nW_fc1 = weight_variable([7 * 7 * 64, 1024])\nb_fc1 = bias_variable([1024])\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7_7_64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\nW_fc2 = weight_variable([1024, 10])\nb_fc2 = bias_variable([10])\ny_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y_conv), reduction_indices=[1]))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\ncorrect_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nsess.run(tf.initialize_all_variables())\nfor i in range(200):\nbatch = mnist.train.next_batch(50)\nif i%100 == 0:\ntrain_accuracy = accuracy.eval(feed_dict={\nx:batch[0], y_: batch[1], keep_prob: 1.0})\nprint(\"step %d, training accuracy %g\"%(i, train_accuracy))\ntrain_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\nprint(\"test accuracy %g\"%accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))\nPlease, help! Thanks!!", "body": "Hi! When i run the example of MNIST Deep model (got on the tensorflow website) in a jupyter notebook i get this error: The kernel appears to have died. It will restart automatically.\nThis happens in the line: \nprint(\"test accuracy %g\"%accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))\n\nCOMPLETE CODE TENSORFLOW WEBSITE:\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n\nfrom **future** import absolute_import\nfrom **future** import division\nfrom **future** import print_function\n\nimport gzip\nimport os\nimport tempfile\n\nimport numpy\nfrom six.moves import urllib\nfrom six.moves import xrange  # pylint: disable=redefined-builtin\nimport tensorflow as tf\nfrom tensorflow.contrib.learn.python.learn.datasets.mnist import read_data_sets\n\nsess = tf.InteractiveSession()\n\nx = tf.placeholder(tf.float32, shape=[None, 784])\ny_ = tf.placeholder(tf.float32, shape=[None, 10])\nW = tf.Variable(tf.zeros([784,10]))\nb = tf.Variable(tf.zeros([10]))\nsess.run(tf.initialize_all_variables())\n\ny = tf.nn.softmax(tf.matmul(x,W) + b)\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ \\* tf.log(y), reduction_indices=[1]))\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\nfor i in range(1000):\n  batch = mnist.train.next_batch(100)\n  train_step.run(feed_dict={x: batch[0], y_: batch[1]})\n\ncorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint(accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels}))\n\ndef weight_variable(shape):\n  initial = tf.truncated_normal(shape, stddev=0.1)\n  return tf.Variable(initial)\n\ndef bias_variable(shape):\n  initial = tf.constant(0.1, shape=shape)\n  return tf.Variable(initial)\ndef conv2d(x, W):\n  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\ndef max_pool_2x2(x):\n  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n                        strides=[1, 2, 2, 1], padding='SAME')\n\nW_conv1 = weight_variable([5, 5, 1, 32])\nb_conv1 = bias_variable([32])\n\nx_image = tf.reshape(x, [-1,28,28,1])\n\nh_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\nh_pool1 = max_pool_2x2(h_conv1)\n\nW_conv2 = weight_variable([5, 5, 32, 64])\nb_conv2 = bias_variable([64])\n\nh_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\nh_pool2 = max_pool_2x2(h_conv2)\n\nW_fc1 = weight_variable([7 \\* 7 \\* 64, 1024])\nb_fc1 = bias_variable([1024])\n\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7_7_64])\nh_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\nkeep_prob = tf.placeholder(tf.float32)\nh_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\nW_fc2 = weight_variable([1024, 10])\nb_fc2 = bias_variable([10])\n\ny_conv=tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)\n\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ \\* tf.log(y_conv), reduction_indices=[1]))\ntrain_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\ncorrect_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\nsess.run(tf.initialize_all_variables())\n\nfor i in range(200):\n  batch = mnist.train.next_batch(50)\n  if i%100 == 0:\n    train_accuracy = accuracy.eval(feed_dict={\n        x:batch[0], y_: batch[1], keep_prob: 1.0})\n    print(\"step %d, training accuracy %g\"%(i, train_accuracy))\n  train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n\nprint(\"test accuracy %g\"%accuracy.eval(feed_dict={x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))\n\nPlease, help! Thanks!!\n"}