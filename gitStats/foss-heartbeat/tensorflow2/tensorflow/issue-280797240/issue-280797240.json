{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15250", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15250/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15250/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15250/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15250", "id": 280797240, "node_id": "MDU6SXNzdWUyODA3OTcyNDA=", "number": 15250, "title": "Batch Norm variance output mismatches with tf 1.4.0", "user": {"login": "n3011", "id": 3139632, "node_id": "MDQ6VXNlcjMxMzk2MzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3139632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n3011", "html_url": "https://github.com/n3011", "followers_url": "https://api.github.com/users/n3011/followers", "following_url": "https://api.github.com/users/n3011/following{/other_user}", "gists_url": "https://api.github.com/users/n3011/gists{/gist_id}", "starred_url": "https://api.github.com/users/n3011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n3011/subscriptions", "organizations_url": "https://api.github.com/users/n3011/orgs", "repos_url": "https://api.github.com/users/n3011/repos", "events_url": "https://api.github.com/users/n3011/events{/privacy}", "received_events_url": "https://api.github.com/users/n3011/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2017-12-10T09:58:04Z", "updated_at": "2018-01-03T10:22:17Z", "closed_at": "2018-01-03T10:22:17Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from  binary</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4.0</li>\n<li><strong>Python version</strong>:  2.7.0</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: 8.0/5.0</li>\n<li><strong>GPU model and memory</strong>: GTX1080 and 8 GB</li>\n<li><strong>Exact command to reproduce</strong>: python test_google_bn.py</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Batch normalization test failed with tensorflow version 1.4.0 but the same test passed with tensorflow version 1.3.0.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> test_google_bn.py</span>\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> pytest\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> numpy.testing <span class=\"pl-k\">import</span> assert_array_almost_equal\n<span class=\"pl-k\">from</span> tensorflow.python.ops <span class=\"pl-k\">import</span> control_flow_ops\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">test_delayed_update_moving_vars</span>():\n    <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n        height, width <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>\n        image_shape <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">10</span>, height, width, <span class=\"pl-c1\">3</span>)\n        image_values <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-k\">*</span>image_shape)\n        expected_mean <span class=\"pl-k\">=</span> np.mean(image_values, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>))\n        expected_var <span class=\"pl-k\">=</span> np.var(image_values, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>))\n        images <span class=\"pl-k\">=</span> tf.constant(image_values, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>image_shape, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n        decay <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.1</span>\n        epsilon <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1e-5</span>\n        output <span class=\"pl-k\">=</span> tf.contrib.layers.batch_norm(images, <span class=\"pl-v\">is_training</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, <span class=\"pl-v\">reuse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-v\">decay</span><span class=\"pl-k\">=</span>decay, <span class=\"pl-v\">epsilon</span><span class=\"pl-k\">=</span>epsilon,\n                            <span class=\"pl-v\">updates_collections</span><span class=\"pl-k\">=</span>tf.GraphKeys.<span class=\"pl-c1\">UPDATE_OPS</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>BatchNorm<span class=\"pl-pds\">'</span></span>)\n        update_ops <span class=\"pl-k\">=</span> tf.get_collection(tf.GraphKeys.<span class=\"pl-c1\">UPDATE_OPS</span>)\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> updates_ops are added to UPDATE_OPS collection.</span>\n        <span class=\"pl-k\">assert</span> <span class=\"pl-c1\">len</span>(update_ops) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">2</span>\n        <span class=\"pl-k\">with</span> tf.control_dependencies(update_ops):\n            barrier <span class=\"pl-k\">=</span> tf.no_op(<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>barrier<span class=\"pl-pds\">'</span></span>)\n        output <span class=\"pl-k\">=</span> control_flow_ops.with_dependencies([barrier], output)\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> Initialize all variables</span>\n        sess.run(tf.global_variables_initializer())\n        moving_mean <span class=\"pl-k\">=</span> tf.contrib.framework.get_variables(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>BatchNorm/moving_mean<span class=\"pl-pds\">'</span></span>)[<span class=\"pl-c1\">0</span>]\n        moving_variance <span class=\"pl-k\">=</span> tf.contrib.framework.get_variables(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>BatchNorm/moving_variance<span class=\"pl-pds\">'</span></span>)[<span class=\"pl-c1\">0</span>]\n        mean, variance <span class=\"pl-k\">=</span> sess.run([moving_mean, moving_variance])\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> After initialization moving_mean == 0 and moving_variance == 1.</span>\n        assert_array_almost_equal(mean, [<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">*</span> <span class=\"pl-c1\">3</span>)\n        assert_array_almost_equal(variance, [<span class=\"pl-c1\">1</span>] <span class=\"pl-k\">*</span> <span class=\"pl-c1\">3</span>)\n        <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>):\n            sess.run([output])\n        mean <span class=\"pl-k\">=</span> moving_mean.eval()\n        variance <span class=\"pl-k\">=</span> moving_variance.eval()\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> After 10 updates with decay 0.1 moving_mean == expected_mean and</span>\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> moving_variance == expected_var.</span>\n        assert_array_almost_equal(mean, expected_mean, <span class=\"pl-v\">decimal</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>)\n        assert_array_almost_equal(variance, expected_var, <span class=\"pl-v\">decimal</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>)</pre></div>\n<blockquote>\n<pre><code>      assert_array_almost_equal(variance, expected_var, decimal=4)\n</code></pre>\n</blockquote>\n<pre><code>       AssertionError: \n       Arrays are not almost equal to 4 decimals\n       \n       (mismatch 100.0%)\n        x: array([ 0.08  ,  0.0908,  0.0773], dtype=float32)\n        y: array([ 0.0792,  0.0898,  0.0764])\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from  binary: binary\nTensorFlow version (use command below): 1.4.0\nPython version:  2.7.0\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: 8.0/5.0\nGPU model and memory: GTX1080 and 8 GB\nExact command to reproduce: python test_google_bn.py\n\nDescribe the problem\nBatch normalization test failed with tensorflow version 1.4.0 but the same test passed with tensorflow version 1.3.0.\nSource code / logs\n# test_google_bn.py\nimport numpy as np\nimport pytest\nimport tensorflow as tf\nfrom numpy.testing import assert_array_almost_equal\nfrom tensorflow.python.ops import control_flow_ops\ndef test_delayed_update_moving_vars():\n    with tf.Session() as sess:\n        height, width = 3, 3\n        image_shape = (10, height, width, 3)\n        image_values = np.random.rand(*image_shape)\n        expected_mean = np.mean(image_values, axis=(0, 1, 2))\n        expected_var = np.var(image_values, axis=(0, 1, 2))\n        images = tf.constant(image_values, shape=image_shape, dtype=tf.float32)\n        decay = 0.1\n        epsilon = 1e-5\n        output = tf.contrib.layers.batch_norm(images, is_training=True, reuse=None, decay=decay, epsilon=epsilon,\n                            updates_collections=tf.GraphKeys.UPDATE_OPS, name='BatchNorm')\n        update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)\n        # updates_ops are added to UPDATE_OPS collection.\n        assert len(update_ops) == 2\n        with tf.control_dependencies(update_ops):\n            barrier = tf.no_op(name='barrier')\n        output = control_flow_ops.with_dependencies([barrier], output)\n        # Initialize all variables\n        sess.run(tf.global_variables_initializer())\n        moving_mean = tf.contrib.framework.get_variables('BatchNorm/moving_mean')[0]\n        moving_variance = tf.contrib.framework.get_variables('BatchNorm/moving_variance')[0]\n        mean, variance = sess.run([moving_mean, moving_variance])\n        # After initialization moving_mean == 0 and moving_variance == 1.\n        assert_array_almost_equal(mean, [0] * 3)\n        assert_array_almost_equal(variance, [1] * 3)\n        for _ in range(10):\n            sess.run([output])\n        mean = moving_mean.eval()\n        variance = moving_variance.eval()\n        # After 10 updates with decay 0.1 moving_mean == expected_mean and\n        # moving_variance == expected_var.\n        assert_array_almost_equal(mean, expected_mean, decimal=4)\n        assert_array_almost_equal(variance, expected_var, decimal=4)\n\n      assert_array_almost_equal(variance, expected_var, decimal=4)\n\n\n       AssertionError: \n       Arrays are not almost equal to 4 decimals\n       \n       (mismatch 100.0%)\n        x: array([ 0.08  ,  0.0908,  0.0773], dtype=float32)\n        y: array([ 0.0792,  0.0898,  0.0764])", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from  binary**: binary\r\n- **TensorFlow version (use command below)**: 1.4.0\r\n- **Python version**:  2.7.0\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: 8.0/5.0\r\n- **GPU model and memory**: GTX1080 and 8 GB\r\n- **Exact command to reproduce**: python test_google_bn.py\r\n\r\n### Describe the problem\r\nBatch normalization test failed with tensorflow version 1.4.0 but the same test passed with tensorflow version 1.3.0. \r\n\r\n\r\n### Source code / logs\r\n```Python\r\n# test_google_bn.py\r\nimport numpy as np\r\nimport pytest\r\nimport tensorflow as tf\r\nfrom numpy.testing import assert_array_almost_equal\r\nfrom tensorflow.python.ops import control_flow_ops\r\ndef test_delayed_update_moving_vars():\r\n    with tf.Session() as sess:\r\n        height, width = 3, 3\r\n        image_shape = (10, height, width, 3)\r\n        image_values = np.random.rand(*image_shape)\r\n        expected_mean = np.mean(image_values, axis=(0, 1, 2))\r\n        expected_var = np.var(image_values, axis=(0, 1, 2))\r\n        images = tf.constant(image_values, shape=image_shape, dtype=tf.float32)\r\n        decay = 0.1\r\n        epsilon = 1e-5\r\n        output = tf.contrib.layers.batch_norm(images, is_training=True, reuse=None, decay=decay, epsilon=epsilon,\r\n                            updates_collections=tf.GraphKeys.UPDATE_OPS, name='BatchNorm')\r\n        update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)\r\n        # updates_ops are added to UPDATE_OPS collection.\r\n        assert len(update_ops) == 2\r\n        with tf.control_dependencies(update_ops):\r\n            barrier = tf.no_op(name='barrier')\r\n        output = control_flow_ops.with_dependencies([barrier], output)\r\n        # Initialize all variables\r\n        sess.run(tf.global_variables_initializer())\r\n        moving_mean = tf.contrib.framework.get_variables('BatchNorm/moving_mean')[0]\r\n        moving_variance = tf.contrib.framework.get_variables('BatchNorm/moving_variance')[0]\r\n        mean, variance = sess.run([moving_mean, moving_variance])\r\n        # After initialization moving_mean == 0 and moving_variance == 1.\r\n        assert_array_almost_equal(mean, [0] * 3)\r\n        assert_array_almost_equal(variance, [1] * 3)\r\n        for _ in range(10):\r\n            sess.run([output])\r\n        mean = moving_mean.eval()\r\n        variance = moving_variance.eval()\r\n        # After 10 updates with decay 0.1 moving_mean == expected_mean and\r\n        # moving_variance == expected_var.\r\n        assert_array_almost_equal(mean, expected_mean, decimal=4)\r\n        assert_array_almost_equal(variance, expected_var, decimal=4)\r\n```\r\n\r\n>           assert_array_almost_equal(variance, expected_var, decimal=4)\r\n           AssertionError: \r\n           Arrays are not almost equal to 4 decimals\r\n           \r\n           (mismatch 100.0%)\r\n            x: array([ 0.08  ,  0.0908,  0.0773], dtype=float32)\r\n            y: array([ 0.0792,  0.0898,  0.0764])\r\n\r\n\r\n"}