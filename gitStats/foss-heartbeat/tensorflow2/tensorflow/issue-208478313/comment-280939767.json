{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/280939767", "html_url": "https://github.com/tensorflow/tensorflow/pull/7628#issuecomment-280939767", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7628", "id": 280939767, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MDkzOTc2Nw==", "user": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-19T18:55:38Z", "updated_at": "2017-02-19T18:55:38Z", "author_association": "MEMBER", "body_html": "<p>OK, there is some documentation here, but it's for adding an op outside of the code base.<br>\n<a href=\"https://www.tensorflow.org/versions/r0.10/how_tos/adding_an_op/\" rel=\"nofollow\">https://www.tensorflow.org/versions/r0.10/how_tos/adding_an_op/</a></p>\n<p>The steps are: build the kernel, as you did. You should <code>REGISTER_KERNEL</code> for the various devices and data types that you want to support. Second, create an op and call <code>REGISTER_OP</code>. That is the wrapper \"declaration\" of the op that will cause some python code to be generated. BTW, you'll also need a gradient for best results. The op should now be imported like the other math ops, supposing you put them in the same place as <code>sin</code>. Finally, you should declare the ops as part of the public API (which will require review), <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/math_ops.py#L50\">here</a>. I would suggest exporting as <code>tf.sinh</code> rather than <code>tf.nn.sinh</code> even though we have <code>tf.nn.tanh</code>.</p>", "body_text": "OK, there is some documentation here, but it's for adding an op outside of the code base.\nhttps://www.tensorflow.org/versions/r0.10/how_tos/adding_an_op/\nThe steps are: build the kernel, as you did. You should REGISTER_KERNEL for the various devices and data types that you want to support. Second, create an op and call REGISTER_OP. That is the wrapper \"declaration\" of the op that will cause some python code to be generated. BTW, you'll also need a gradient for best results. The op should now be imported like the other math ops, supposing you put them in the same place as sin. Finally, you should declare the ops as part of the public API (which will require review), here. I would suggest exporting as tf.sinh rather than tf.nn.sinh even though we have tf.nn.tanh.", "body": "OK, there is some documentation here, but it's for adding an op outside of the code base.\r\nhttps://www.tensorflow.org/versions/r0.10/how_tos/adding_an_op/\r\n\r\nThe steps are: build the kernel, as you did. You should `REGISTER_KERNEL` for the various devices and data types that you want to support. Second, create an op and call `REGISTER_OP`. That is the wrapper \"declaration\" of the op that will cause some python code to be generated. BTW, you'll also need a gradient for best results. The op should now be imported like the other math ops, supposing you put them in the same place as `sin`. Finally, you should declare the ops as part of the public API (which will require review), [here](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/math_ops.py#L50). I would suggest exporting as `tf.sinh` rather than `tf.nn.sinh` even though we have `tf.nn.tanh`."}