{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21844", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21844/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21844/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21844/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21844", "id": 353682521, "node_id": "MDU6SXNzdWUzNTM2ODI1MjE=", "number": 21844, "title": "How to reshape and slice a variable without converting it to an untrainable tensor?", "user": {"login": "yashkant", "id": 17530895, "node_id": "MDQ6VXNlcjE3NTMwODk1", "avatar_url": "https://avatars2.githubusercontent.com/u/17530895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yashkant", "html_url": "https://github.com/yashkant", "followers_url": "https://api.github.com/users/yashkant/followers", "following_url": "https://api.github.com/users/yashkant/following{/other_user}", "gists_url": "https://api.github.com/users/yashkant/gists{/gist_id}", "starred_url": "https://api.github.com/users/yashkant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yashkant/subscriptions", "organizations_url": "https://api.github.com/users/yashkant/orgs", "repos_url": "https://api.github.com/users/yashkant/repos", "events_url": "https://api.github.com/users/yashkant/events{/privacy}", "received_events_url": "https://api.github.com/users/yashkant/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, {"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-08-24T07:56:05Z", "updated_at": "2018-09-25T17:02:17Z", "closed_at": "2018-09-25T17:02:17Z", "author_association": "NONE", "body_html": "<p>[Feature Request]</p>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: pip-install</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.10.0-0-g656e7a2b34 1.10.0</li>\n<li><strong>Python version</strong>: Python 2.7.12</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>: Cuda compilation tools, release 7.5, V7.5.17</li>\n<li><strong>GPU model and memory</strong>: TITAN Xp</li>\n<li><strong>Exact command to reproduce</strong>:  Described below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I am using custom trainable variables in my layers, I pass the variables as a parameter to the layer (which are custom too).</p>\n<p>I want to set (or pass) only a slice of my trainable variables array to the layer.</p>\n<p>For example:</p>\n<pre><code>custom_train_vars = tf.get_variable(name, [10,30,60,60], initializer=initializer, trainable=trainable)\nlayer_weight = custom_train_vars[2]\nx = my_custom_conv_layer(x, layer_weight, args..)\n</code></pre>\n<p>The problem is after slicing (or reshaping with <code>tf.reshape</code>) the variable i.e. <code>layer_weight = custom_train_vars[2]</code>, it gets converted to the type <code>Tensor(\"strided_slice:0\",args..)</code></p>\n<p>And I'm unable to use this as a training variable inside my custom layer, because my optimizer throws an error while finding the gradient of this Tensor.</p>\n<p>For example:</p>\n<pre><code>Optimizer.compute_gradients(train_loss, layer_weight)\n</code></pre>\n<p>Is there a workaround/feature where the slicing won't change the type of variable?</p>", "body_text": "[Feature Request]\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary): pip-install\nTensorFlow version (use command below): v1.10.0-0-g656e7a2b34 1.10.0\nPython version: Python 2.7.12\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: Cuda compilation tools, release 7.5, V7.5.17\nGPU model and memory: TITAN Xp\nExact command to reproduce:  Described below\n\nDescribe the problem\nI am using custom trainable variables in my layers, I pass the variables as a parameter to the layer (which are custom too).\nI want to set (or pass) only a slice of my trainable variables array to the layer.\nFor example:\ncustom_train_vars = tf.get_variable(name, [10,30,60,60], initializer=initializer, trainable=trainable)\nlayer_weight = custom_train_vars[2]\nx = my_custom_conv_layer(x, layer_weight, args..)\n\nThe problem is after slicing (or reshaping with tf.reshape) the variable i.e. layer_weight = custom_train_vars[2], it gets converted to the type Tensor(\"strided_slice:0\",args..)\nAnd I'm unable to use this as a training variable inside my custom layer, because my optimizer throws an error while finding the gradient of this Tensor.\nFor example:\nOptimizer.compute_gradients(train_loss, layer_weight)\n\nIs there a workaround/feature where the slicing won't change the type of variable?", "body": "[Feature Request]\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\n- **TensorFlow installed from (source or binary)**: pip-install\r\n- **TensorFlow version (use command below)**: v1.10.0-0-g656e7a2b34 1.10.0\r\n- **Python version**: Python 2.7.12\r\n- **Bazel version (if compiling from source)**: \r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**: Cuda compilation tools, release 7.5, V7.5.17\r\n- **GPU model and memory**: TITAN Xp \r\n- **Exact command to reproduce**:  Described below \r\n\r\n\r\n### Describe the problem\r\n\r\nI am using custom trainable variables in my layers, I pass the variables as a parameter to the layer (which are custom too).\r\n\r\nI want to set (or pass) only a slice of my trainable variables array to the layer. \r\n\r\nFor example: \r\n\r\n    custom_train_vars = tf.get_variable(name, [10,30,60,60], initializer=initializer, trainable=trainable)\r\n    layer_weight = custom_train_vars[2]\r\n    x = my_custom_conv_layer(x, layer_weight, args..)\r\n\r\n\r\nThe problem is after slicing (or reshaping with `tf.reshape`) the variable i.e. `layer_weight = custom_train_vars[2]`, it gets converted to the type `Tensor(\"strided_slice:0\",args..)`\r\n\r\nAnd I'm unable to use this as a training variable inside my custom layer, because my optimizer throws an error while finding the gradient of this Tensor. \r\n\r\nFor example:\r\n\r\n    Optimizer.compute_gradients(train_loss, layer_weight)\r\n\r\n Is there a workaround/feature where the slicing won't change the type of variable? \r\n\r\n"}