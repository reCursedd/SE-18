{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23769", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23769/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23769/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23769/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23769", "id": 381113066, "node_id": "MDU6SXNzdWUzODExMTMwNjY=", "number": 23769, "title": "Error when feeding tf.keras model in custom loss function", "user": {"login": "batzner", "id": 10948237, "node_id": "MDQ6VXNlcjEwOTQ4MjM3", "avatar_url": "https://avatars3.githubusercontent.com/u/10948237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/batzner", "html_url": "https://github.com/batzner", "followers_url": "https://api.github.com/users/batzner/followers", "following_url": "https://api.github.com/users/batzner/following{/other_user}", "gists_url": "https://api.github.com/users/batzner/gists{/gist_id}", "starred_url": "https://api.github.com/users/batzner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/batzner/subscriptions", "organizations_url": "https://api.github.com/users/batzner/orgs", "repos_url": "https://api.github.com/users/batzner/repos", "events_url": "https://api.github.com/users/batzner/events{/privacy}", "received_events_url": "https://api.github.com/users/batzner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-15T11:12:56Z", "updated_at": "2018-11-15T11:12:56Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><em>Please make sure that this is a bug. As per our <a href=\"https://github.com/tensorflow/tensorflow/blob/master/ISSUES.md\">GitHub Policy</a>, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template</em></p>\n<p><strong>System information</strong></p>\n<ul>\n<li>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes</li>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux openSUSE Leap 42.3</li>\n<li>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: none</li>\n<li>TensorFlow installed from (source or binary): binary</li>\n<li>TensorFlow version (use command below): v1.12.0-0-ga6d8ffae09 1.12.0</li>\n<li>Python version: 3.4.6</li>\n<li>Bazel version (if compiling from source): none</li>\n<li>GCC/Compiler version (if compiling from source): none</li>\n<li>CUDA/cuDNN version: none</li>\n<li>GPU model and memory: none</li>\n</ul>\n<p>You can collect some of this information using our environment capture <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">script</a><br>\nYou can also obtain the TensorFlow version with<br>\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<p><strong>Describe the current behavior</strong></p>\n<p>I am trying to add adversarial training to my <code>tf.keras</code> model. For this, I added a custom loss function, which feeds the model the adversarially perturbed input and adds the cross-entropy to the loss.</p>\n<p>The problem is that feeding the model a tensor in the custom loss function leads to a <code>TypeError: argument of type 'NoDependency' is not iterable</code>. I have reduced it to a minimal example that simply feeds the model zeros below.</p>\n<p>If I call <code>model(model.input)</code> before the custom loss function is called, it surprisingly works.</p>\n<p><strong>Describe the expected behavior</strong></p>\n<p>The expected behavior would be the model compiling and fitting as it does with the <code>model(model.input)</code> line uncommented. The example below would also work when defining the <code>y_pred_zeros = model(tf.zeros((32, 20)))</code> outside of the <code>loss</code> function. But for adversarial training, I need to call the model inside of the loss function.</p>\n<p><strong>Code to reproduce the issue</strong></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nmodel <span class=\"pl-k\">=</span> tf.keras.Sequential([\n    tf.keras.layers.Dense(<span class=\"pl-c1\">10</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>relu<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">20</span>,)),\n    tf.keras.layers.Dense(<span class=\"pl-c1\">5</span>)\n])\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> With the following line uncommented, it works.</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> model(model.input)</span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">loss</span>(<span class=\"pl-smi\">y_true</span>, <span class=\"pl-smi\">y_pred</span>):\n    loss <span class=\"pl-k\">=</span> tf.keras.losses.mean_squared_error(y_true, y_pred)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Feed zeros to the model and add the mean of the output to the loss</span>\n    y_pred_zeros <span class=\"pl-k\">=</span> model(tf.zeros((<span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">20</span>)))\n\n    <span class=\"pl-k\">return</span> loss <span class=\"pl-k\">+</span> tf.reduce_mean(y_pred_zeros)\n\nmodel.compile(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sgd<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>loss)\n\nx_train, y_train <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">20</span>), np.random.randn(<span class=\"pl-c1\">100</span>, <span class=\"pl-c1\">5</span>)\nmodel.fit(x_train, y_train)</pre></div>\n<p><strong>Other info / logs</strong></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">/</span>home<span class=\"pl-k\">/</span>kilian<span class=\"pl-k\">/</span>Desktop<span class=\"pl-k\">/</span>venv<span class=\"pl-k\">/</span><span class=\"pl-c1\">bin</span><span class=\"pl-k\">/</span>python <span class=\"pl-k\">/</span>home<span class=\"pl-k\">/</span>kilian<span class=\"pl-k\">/</span>Desktop<span class=\"pl-k\">/</span>tmp.py\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/kilian/Desktop/tmp.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">20</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n    model.compile(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>sgd<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>loss)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/kilian/Desktop/venv/lib/python3.4/site-packages/tensorflow/python/training/checkpointable/base.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">474</span>, <span class=\"pl-k\">in</span> _method_wrapper\n    method(<span class=\"pl-c1\">self</span>, <span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/kilian/Desktop/venv/lib/python3.4/site-packages/tensorflow/python/keras/engine/training.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">617</span>, <span class=\"pl-k\">in</span> <span class=\"pl-c1\">compile</span>\n    output_loss <span class=\"pl-k\">=</span> weighted_loss(y_true, y_pred, sample_weight, mask)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/kilian/Desktop/venv/lib/python3.4/site-packages/tensorflow/python/keras/engine/training_utils.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">598</span>, <span class=\"pl-k\">in</span> weighted\n    score_array <span class=\"pl-k\">=</span> fn(y_true, y_pred)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/kilian/Desktop/tmp.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">16</span>, <span class=\"pl-k\">in</span> loss\n    y_pred_zeros <span class=\"pl-k\">=</span> model(tf.zeros((<span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">20</span>)))\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/kilian/Desktop/venv/lib/python3.4/site-packages/tensorflow/python/keras/engine/base_layer.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">704</span>, <span class=\"pl-k\">in</span> <span class=\"pl-c1\">__call__</span>\n    <span class=\"pl-k\">if</span> (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>mask<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">in</span> <span class=\"pl-c1\">self</span>._call_fn_args <span class=\"pl-k\">and</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>mask<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">not</span> <span class=\"pl-k\">in</span> kwargs <span class=\"pl-k\">and</span>\n<span class=\"pl-c1\">TypeError</span>: argument of <span class=\"pl-c1\">type</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>NoDependency<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> iterable\n\nProcess finished <span class=\"pl-k\">with</span> <span class=\"pl-c1\">exit</span> code <span class=\"pl-c1\">1</span></pre></div>", "body_text": "Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux openSUSE Leap 42.3\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: none\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.12.0-0-ga6d8ffae09 1.12.0\nPython version: 3.4.6\nBazel version (if compiling from source): none\nGCC/Compiler version (if compiling from source): none\nCUDA/cuDNN version: none\nGPU model and memory: none\n\nYou can collect some of this information using our environment capture script\nYou can also obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the current behavior\nI am trying to add adversarial training to my tf.keras model. For this, I added a custom loss function, which feeds the model the adversarially perturbed input and adds the cross-entropy to the loss.\nThe problem is that feeding the model a tensor in the custom loss function leads to a TypeError: argument of type 'NoDependency' is not iterable. I have reduced it to a minimal example that simply feeds the model zeros below.\nIf I call model(model.input) before the custom loss function is called, it surprisingly works.\nDescribe the expected behavior\nThe expected behavior would be the model compiling and fitting as it does with the model(model.input) line uncommented. The example below would also work when defining the y_pred_zeros = model(tf.zeros((32, 20))) outside of the loss function. But for adversarial training, I need to call the model inside of the loss function.\nCode to reproduce the issue\nimport numpy as np\nimport tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(10, activation='relu', input_shape=(20,)),\n    tf.keras.layers.Dense(5)\n])\n\n# With the following line uncommented, it works.\n# model(model.input)\n\ndef loss(y_true, y_pred):\n    loss = tf.keras.losses.mean_squared_error(y_true, y_pred)\n\n    # Feed zeros to the model and add the mean of the output to the loss\n    y_pred_zeros = model(tf.zeros((32, 20)))\n\n    return loss + tf.reduce_mean(y_pred_zeros)\n\nmodel.compile('sgd', loss=loss)\n\nx_train, y_train = np.random.randn(100, 20), np.random.randn(100, 5)\nmodel.fit(x_train, y_train)\nOther info / logs\n/home/kilian/Desktop/venv/bin/python /home/kilian/Desktop/tmp.py\nTraceback (most recent call last):\n  File \"/home/kilian/Desktop/tmp.py\", line 20, in <module>\n    model.compile('sgd', loss=loss)\n  File \"/home/kilian/Desktop/venv/lib/python3.4/site-packages/tensorflow/python/training/checkpointable/base.py\", line 474, in _method_wrapper\n    method(self, *args, **kwargs)\n  File \"/home/kilian/Desktop/venv/lib/python3.4/site-packages/tensorflow/python/keras/engine/training.py\", line 617, in compile\n    output_loss = weighted_loss(y_true, y_pred, sample_weight, mask)\n  File \"/home/kilian/Desktop/venv/lib/python3.4/site-packages/tensorflow/python/keras/engine/training_utils.py\", line 598, in weighted\n    score_array = fn(y_true, y_pred)\n  File \"/home/kilian/Desktop/tmp.py\", line 16, in loss\n    y_pred_zeros = model(tf.zeros((32, 20)))\n  File \"/home/kilian/Desktop/venv/lib/python3.4/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 704, in __call__\n    if ('mask' in self._call_fn_args and 'mask' not in kwargs and\nTypeError: argument of type 'NoDependency' is not iterable\n\nProcess finished with exit code 1", "body": "<em>Please make sure that this is a bug. As per our [GitHub Policy](https://github.com/tensorflow/tensorflow/blob/master/ISSUES.md), we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template</em>\r\n\r\n**System information**\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux openSUSE Leap 42.3\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: none\r\n- TensorFlow installed from (source or binary): binary\r\n- TensorFlow version (use command below): v1.12.0-0-ga6d8ffae09 1.12.0\r\n- Python version: 3.4.6\r\n- Bazel version (if compiling from source): none\r\n- GCC/Compiler version (if compiling from source): none\r\n- CUDA/cuDNN version: none\r\n- GPU model and memory: none\r\n\r\n\r\nYou can collect some of this information using our environment capture [script](https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh)\r\nYou can also obtain the TensorFlow version with\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n**Describe the current behavior**\r\n\r\nI am trying to add adversarial training to my `tf.keras` model. For this, I added a custom loss function, which feeds the model the adversarially perturbed input and adds the cross-entropy to the loss. \r\n\r\nThe problem is that feeding the model a tensor in the custom loss function leads to a `TypeError: argument of type 'NoDependency' is not iterable`. I have reduced it to a minimal example that simply feeds the model zeros below. \r\n\r\nIf I call `model(model.input)` before the custom loss function is called, it surprisingly works.\r\n\r\n**Describe the expected behavior**\r\n\r\nThe expected behavior would be the model compiling and fitting as it does with the `model(model.input)` line uncommented. The example below would also work when defining the `y_pred_zeros = model(tf.zeros((32, 20)))` outside of the `loss` function. But for adversarial training, I need to call the model inside of the loss function.\r\n\r\n**Code to reproduce the issue**\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nmodel = tf.keras.Sequential([\r\n    tf.keras.layers.Dense(10, activation='relu', input_shape=(20,)),\r\n    tf.keras.layers.Dense(5)\r\n])\r\n\r\n# With the following line uncommented, it works.\r\n# model(model.input)\r\n\r\ndef loss(y_true, y_pred):\r\n    loss = tf.keras.losses.mean_squared_error(y_true, y_pred)\r\n\r\n    # Feed zeros to the model and add the mean of the output to the loss\r\n    y_pred_zeros = model(tf.zeros((32, 20)))\r\n\r\n    return loss + tf.reduce_mean(y_pred_zeros)\r\n\r\nmodel.compile('sgd', loss=loss)\r\n\r\nx_train, y_train = np.random.randn(100, 20), np.random.randn(100, 5)\r\nmodel.fit(x_train, y_train)\r\n```\r\n\r\n**Other info / logs**\r\n```python\r\n/home/kilian/Desktop/venv/bin/python /home/kilian/Desktop/tmp.py\r\nTraceback (most recent call last):\r\n  File \"/home/kilian/Desktop/tmp.py\", line 20, in <module>\r\n    model.compile('sgd', loss=loss)\r\n  File \"/home/kilian/Desktop/venv/lib/python3.4/site-packages/tensorflow/python/training/checkpointable/base.py\", line 474, in _method_wrapper\r\n    method(self, *args, **kwargs)\r\n  File \"/home/kilian/Desktop/venv/lib/python3.4/site-packages/tensorflow/python/keras/engine/training.py\", line 617, in compile\r\n    output_loss = weighted_loss(y_true, y_pred, sample_weight, mask)\r\n  File \"/home/kilian/Desktop/venv/lib/python3.4/site-packages/tensorflow/python/keras/engine/training_utils.py\", line 598, in weighted\r\n    score_array = fn(y_true, y_pred)\r\n  File \"/home/kilian/Desktop/tmp.py\", line 16, in loss\r\n    y_pred_zeros = model(tf.zeros((32, 20)))\r\n  File \"/home/kilian/Desktop/venv/lib/python3.4/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 704, in __call__\r\n    if ('mask' in self._call_fn_args and 'mask' not in kwargs and\r\nTypeError: argument of type 'NoDependency' is not iterable\r\n\r\nProcess finished with exit code 1\r\n```\r\n"}