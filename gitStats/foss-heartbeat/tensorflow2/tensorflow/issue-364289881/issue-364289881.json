{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22555", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22555/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22555/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22555/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22555", "id": 364289881, "node_id": "MDU6SXNzdWUzNjQyODk4ODE=", "number": 22555, "title": "[Feature Request]Add support of model.eval() and model.train()", "user": {"login": "chenghuige", "id": 6323467, "node_id": "MDQ6VXNlcjYzMjM0Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6323467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenghuige", "html_url": "https://github.com/chenghuige", "followers_url": "https://api.github.com/users/chenghuige/followers", "following_url": "https://api.github.com/users/chenghuige/following{/other_user}", "gists_url": "https://api.github.com/users/chenghuige/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenghuige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenghuige/subscriptions", "organizations_url": "https://api.github.com/users/chenghuige/orgs", "repos_url": "https://api.github.com/users/chenghuige/repos", "events_url": "https://api.github.com/users/chenghuige/events{/privacy}", "received_events_url": "https://api.github.com/users/chenghuige/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "wt-huang", "id": 42785337, "node_id": "MDQ6VXNlcjQyNzg1MzM3", "avatar_url": "https://avatars0.githubusercontent.com/u/42785337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wt-huang", "html_url": "https://github.com/wt-huang", "followers_url": "https://api.github.com/users/wt-huang/followers", "following_url": "https://api.github.com/users/wt-huang/following{/other_user}", "gists_url": "https://api.github.com/users/wt-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/wt-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wt-huang/subscriptions", "organizations_url": "https://api.github.com/users/wt-huang/orgs", "repos_url": "https://api.github.com/users/wt-huang/repos", "events_url": "https://api.github.com/users/wt-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/wt-huang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wt-huang", "id": 42785337, "node_id": "MDQ6VXNlcjQyNzg1MzM3", "avatar_url": "https://avatars0.githubusercontent.com/u/42785337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wt-huang", "html_url": "https://github.com/wt-huang", "followers_url": "https://api.github.com/users/wt-huang/followers", "following_url": "https://api.github.com/users/wt-huang/following{/other_user}", "gists_url": "https://api.github.com/users/wt-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/wt-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wt-huang/subscriptions", "organizations_url": "https://api.github.com/users/wt-huang/orgs", "repos_url": "https://api.github.com/users/wt-huang/repos", "events_url": "https://api.github.com/users/wt-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/wt-huang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-09-27T03:21:03Z", "updated_at": "2018-10-24T18:22:02Z", "closed_at": "2018-10-23T14:28:24Z", "author_association": "NONE", "body_html": "<p>For pytorch, you can use model.eval or mdoel.train to make sure different behavior like dropout.<br>\nFor tf keras interface however if you write class using keras.Model, you still need to pass all training=training in call function, I think this is less elegant.<br>\nSo can we support model.train, model.eval ? when set model.train then all layer and model declared in <strong>init</strong> is in training mode.</p>", "body_text": "For pytorch, you can use model.eval or mdoel.train to make sure different behavior like dropout.\nFor tf keras interface however if you write class using keras.Model, you still need to pass all training=training in call function, I think this is less elegant.\nSo can we support model.train, model.eval ? when set model.train then all layer and model declared in init is in training mode.", "body": "For pytorch, you can use model.eval or mdoel.train to make sure different behavior like dropout.\r\nFor tf keras interface however if you write class using keras.Model, you still need to pass all training=training in call function, I think this is less elegant. \r\nSo can we support model.train, model.eval ? when set model.train then all layer and model declared in __init__ is in training mode."}