{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/416771802", "html_url": "https://github.com/tensorflow/tensorflow/issues/20218#issuecomment-416771802", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20218", "id": 416771802, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNjc3MTgwMg==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-28T23:21:42Z", "updated_at": "2018-08-28T23:21:42Z", "author_association": "MEMBER", "body_html": "<p>I will follow up and properly patch variable slicing.</p>\n<p>After that it's still leaking memory, but it looks like it's a zeros/ones caching issue with backprop. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=122911\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/akshaym\">@akshaym</a> was going to take a look (at <a href=\"https://github.com/LeoLai930603/Eager_OOM_reproduce/tree/master\">https://github.com/LeoLai930603/Eager_OOM_reproduce/tree/master</a> ).</p>\n<p>I think it's a caching issue because clearing the cache after <code>train_step</code> (in eager_biLSTM_trainer.py) keeps the memory stable and means the number of PyObjects doesn't increase:</p>\n<pre><code>from tensorflow.python.eager import context\ncontext.context()._clear_caches()  # Increasing memory and PyObject count without this\nimport gc\ngc.collect()\nprint(len(gc.get_objects()))\n</code></pre>", "body_text": "I will follow up and properly patch variable slicing.\nAfter that it's still leaking memory, but it looks like it's a zeros/ones caching issue with backprop. @akshaym was going to take a look (at https://github.com/LeoLai930603/Eager_OOM_reproduce/tree/master ).\nI think it's a caching issue because clearing the cache after train_step (in eager_biLSTM_trainer.py) keeps the memory stable and means the number of PyObjects doesn't increase:\nfrom tensorflow.python.eager import context\ncontext.context()._clear_caches()  # Increasing memory and PyObject count without this\nimport gc\ngc.collect()\nprint(len(gc.get_objects()))", "body": "I will follow up and properly patch variable slicing.\r\n\r\nAfter that it's still leaking memory, but it looks like it's a zeros/ones caching issue with backprop. @akshaym was going to take a look (at https://github.com/LeoLai930603/Eager_OOM_reproduce/tree/master ).\r\n\r\nI think it's a caching issue because clearing the cache after `train_step` (in eager_biLSTM_trainer.py) keeps the memory stable and means the number of PyObjects doesn't increase:\r\n\r\n```\r\nfrom tensorflow.python.eager import context\r\ncontext.context()._clear_caches()  # Increasing memory and PyObject count without this\r\nimport gc\r\ngc.collect()\r\nprint(len(gc.get_objects()))\r\n```\r\n"}