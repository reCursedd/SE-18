{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/213576889", "html_url": "https://github.com/tensorflow/tensorflow/issues/2062#issuecomment-213576889", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2062", "id": 213576889, "node_id": "MDEyOklzc3VlQ29tbWVudDIxMzU3Njg4OQ==", "user": {"login": "yuanbyu", "id": 2342391, "node_id": "MDQ6VXNlcjIzNDIzOTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2342391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuanbyu", "html_url": "https://github.com/yuanbyu", "followers_url": "https://api.github.com/users/yuanbyu/followers", "following_url": "https://api.github.com/users/yuanbyu/following{/other_user}", "gists_url": "https://api.github.com/users/yuanbyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuanbyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuanbyu/subscriptions", "organizations_url": "https://api.github.com/users/yuanbyu/orgs", "repos_url": "https://api.github.com/users/yuanbyu/repos", "events_url": "https://api.github.com/users/yuanbyu/events{/privacy}", "received_events_url": "https://api.github.com/users/yuanbyu/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-22T20:24:45Z", "updated_at": "2016-04-22T20:24:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p>You need to move the count_up_to op inside the conditional branch you want it to be executed.</p>\n<pre><code>a = tf.Variable(0)\n\ndef todo_if_true():\n  incr = a.count_up_to(1)\n  with tf.control_dependencies([incr]):\n    return tf.identity(a)\ndef todo_if_false():\n  return tf.identity(a)\n\ng = tf.cond(tf.constant(False), todo_if_true, todo_if_false)\n</code></pre>\n<p>I have added the following paragraph to the doc:</p>\n<p>Note that the conditional execution applies only to the operations defined in<br>\nfn1 and fn2. Consider the following simple program:</p>\n<div class=\"highlight highlight-source-python\"><pre>  z <span class=\"pl-k\">=</span> tf.mul(a, b)\n  result <span class=\"pl-k\">=</span> tf.cond(x <span class=\"pl-k\">&lt;</span> y, <span class=\"pl-k\">lambda</span>: tf.add(x, z), <span class=\"pl-k\">lambda</span>: tf.square(y))</pre></div>\n<p>If x &lt; y, the tf.add operation will be executed and tf.square<br>\noperation will not be executed. Since z is needed for at least one<br>\nbranch of the cond, the tf.mul operation is always executed, unconditionally.<br>\nAlthough this behavior is consistent with the dataflow model of TensorFlow,<br>\nit has occasionally surprised some users who expected a lazier semantics.</p>", "body_text": "You need to move the count_up_to op inside the conditional branch you want it to be executed.\na = tf.Variable(0)\n\ndef todo_if_true():\n  incr = a.count_up_to(1)\n  with tf.control_dependencies([incr]):\n    return tf.identity(a)\ndef todo_if_false():\n  return tf.identity(a)\n\ng = tf.cond(tf.constant(False), todo_if_true, todo_if_false)\n\nI have added the following paragraph to the doc:\nNote that the conditional execution applies only to the operations defined in\nfn1 and fn2. Consider the following simple program:\n  z = tf.mul(a, b)\n  result = tf.cond(x < y, lambda: tf.add(x, z), lambda: tf.square(y))\nIf x < y, the tf.add operation will be executed and tf.square\noperation will not be executed. Since z is needed for at least one\nbranch of the cond, the tf.mul operation is always executed, unconditionally.\nAlthough this behavior is consistent with the dataflow model of TensorFlow,\nit has occasionally surprised some users who expected a lazier semantics.", "body": "You need to move the count_up_to op inside the conditional branch you want it to be executed.\n\n```\na = tf.Variable(0)\n\ndef todo_if_true():\n  incr = a.count_up_to(1)\n  with tf.control_dependencies([incr]):\n    return tf.identity(a)\ndef todo_if_false():\n  return tf.identity(a)\n\ng = tf.cond(tf.constant(False), todo_if_true, todo_if_false)\n```\n\nI have added the following paragraph to the doc:\n\n Note that the conditional execution applies only to the operations defined in\n  fn1 and fn2. Consider the following simple program:\n\n``` python\n  z = tf.mul(a, b)\n  result = tf.cond(x < y, lambda: tf.add(x, z), lambda: tf.square(y))\n```\n\n  If x < y, the tf.add operation will be executed and tf.square\n  operation will not be executed. Since z is needed for at least one\n  branch of the cond, the tf.mul operation is always executed, unconditionally.\n  Although this behavior is consistent with the dataflow model of TensorFlow,\n  it has occasionally surprised some users who expected a lazier semantics.\n"}