{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21345", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21345/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21345/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21345/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21345", "id": 347113599, "node_id": "MDU6SXNzdWUzNDcxMTM1OTk=", "number": 21345, "title": "import_graph_def ERROR when NodeDef contains NameAttrList (func) message defined in attr_value.proto - makes the graph unusable / unloadable in TF 1.8 or 1.9 (works in 1.7). ValueError: NodeDef mentions attr '<my_attr>' not in Op<>", "user": {"login": "sjain-stanford", "id": 19234106, "node_id": "MDQ6VXNlcjE5MjM0MTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/19234106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjain-stanford", "html_url": "https://github.com/sjain-stanford", "followers_url": "https://api.github.com/users/sjain-stanford/followers", "following_url": "https://api.github.com/users/sjain-stanford/following{/other_user}", "gists_url": "https://api.github.com/users/sjain-stanford/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjain-stanford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjain-stanford/subscriptions", "organizations_url": "https://api.github.com/users/sjain-stanford/orgs", "repos_url": "https://api.github.com/users/sjain-stanford/repos", "events_url": "https://api.github.com/users/sjain-stanford/events{/privacy}", "received_events_url": "https://api.github.com/users/sjain-stanford/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "angersson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angersson", "html_url": "https://github.com/angersson", "followers_url": "https://api.github.com/users/angersson/followers", "following_url": "https://api.github.com/users/angersson/following{/other_user}", "gists_url": "https://api.github.com/users/angersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angersson/subscriptions", "organizations_url": "https://api.github.com/users/angersson/orgs", "repos_url": "https://api.github.com/users/angersson/repos", "events_url": "https://api.github.com/users/angersson/events{/privacy}", "received_events_url": "https://api.github.com/users/angersson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "angersson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angersson", "html_url": "https://github.com/angersson", "followers_url": "https://api.github.com/users/angersson/followers", "following_url": "https://api.github.com/users/angersson/following{/other_user}", "gists_url": "https://api.github.com/users/angersson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angersson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angersson/subscriptions", "organizations_url": "https://api.github.com/users/angersson/orgs", "repos_url": "https://api.github.com/users/angersson/repos", "events_url": "https://api.github.com/users/angersson/events{/privacy}", "received_events_url": "https://api.github.com/users/angersson/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-08-02T17:54:06Z", "updated_at": "2018-08-08T01:29:23Z", "closed_at": "2018-08-07T23:37:35Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: n/a</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.9.0-0-g25c197e023 1.9.0</li>\n<li><strong>Python version</strong>: Python 3.5.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>: n/a</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: n/a</li>\n<li><strong>CUDA/cuDNN version</strong>: n/a</li>\n<li><strong>GPU model and memory</strong>: n/a</li>\n<li><strong>Exact command to reproduce</strong>: See below.</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Our simplified code <code>modify.py</code> below does the following:</p>\n<ul>\n<li>Loads an existing TF graph from <code>graph1.pb</code> into <code>graph_def = tf.GraphDef()</code></li>\n<li>To each node within the <code>graph_def</code>, adds user-defined attributes using <code>NameAttrList func</code> protobuf message in <a href=\"https://github.com/tensorflow/tensorflow/blob/25c197e02393bd44f50079945409009dd4d434f8/tensorflow/core/framework/attr_value.proto#L40-L44\">attr_value.proto</a>.</li>\n<li>Saves out the modified <code>graph_def</code> to <code>graph2.pb</code></li>\n<li>Loads this new <code>graph2.pb</code> and imports to default graph --&gt; Works in TF 1.7, fails in TF 1.8/1.9</li>\n</ul>\n<p>This flow works fine in TF 1.7. However due to an added constraint in TF 1.8 or 1.9, when importing a graph containing nodes with user-defined attributes, it fails as follows (full error log included below):</p>\n<pre><code>tensorflow.python.framework.errors_impl.InvalidArgumentError: NodeDef mentions attr 'my_attr' not in Op&lt;name=VariableV2; signature= -&gt; ref:Ref(dtype); attr=shape:shape; attr=dtype:type; attr=container:string,default=\"\"; attr=shared_name:string,default=\"\"; is_stateful=true&gt;; \nNodeDef: import/loss3_classifier/biases = VariableV2[_class=[\"loc:@import/loss3_classifier/biases\"], _output_shapes=[[1000]], container=\"\", dtype=DT_FLOAT, my_attr=attr_name[data1=8, data2=2], shape=[1000], shared_name=\"\"](). \n(Check whether your GraphDef-interpreting binary is up to date with your GraphDef-generating binary.).\n</code></pre>\n<p>This is not an issue with the GraphDef interpreting binary mismatching with GraphDef-generating binary, since the same binary is used to generate and interpret. I believe this is failing because the check to ensure all attrs within the NodeDef are valid doesn't account for user-defined attributes given using <code>NameAttrList func</code> message in <a href=\"https://github.com/tensorflow/tensorflow/blob/25c197e02393bd44f50079945409009dd4d434f8/tensorflow/core/framework/attr_value.proto#L40-L44\">attr_value.proto</a>.</p>\n<p>This is breaking some of our production code written in TF1.7, when migrating to TF1.9, since the graph is no longer loadable.</p>\n<h3>Attachments</h3>\n<p><a href=\"https://github.com/tensorflow/tensorflow/files/2254600/graphs_attachment.zip\">graphs_attachment.zip</a><br>\nContains:</p>\n<ul>\n<li>graph1.pb</li>\n<li>graph2.pb</li>\n<li>tensorboard events file for graph1.pb</li>\n<li>tensorboard events file for graph2.pb (can only generate using TF1.7, fails with TF1.8/1.9)</li>\n<li>modify.py script</li>\n</ul>\n<h3>Source code / logs</h3>\n<h4>modify.py</h4>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">add_attr_to_tf_node</span>(<span class=\"pl-smi\">node</span>, <span class=\"pl-smi\">key</span>, <span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">data</span>):\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span> Add a dictionary 'data' to a TF graph node,</span>\n<span class=\"pl-s\">  with optional label 'name'. Key is 'key'.</span>\n<span class=\"pl-s\">  Each element of 'data' should be a tf.AttrValue() instance</span>\n<span class=\"pl-s\">  e.g.  a1 = tf.AttrValue(i=8)</span>\n<span class=\"pl-s\">        a2 = tf.AttrValue(i=2)</span>\n<span class=\"pl-s\">        attrs = {\"data1\": a1, \"data2\": a2}</span>\n<span class=\"pl-s\">  <span class=\"pl-pds\">\"\"\"</span></span>\n  <span class=\"pl-k\">if</span> name <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n    node.attr[key].CopyFrom(tf.AttrValue(<span class=\"pl-v\">func</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>attr<span class=\"pl-pds\">\"</span></span>: data}))\n  <span class=\"pl-k\">else</span>:\n    node.attr[key].CopyFrom(tf.AttrValue(<span class=\"pl-v\">func</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>: name, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>attr<span class=\"pl-pds\">\"</span></span>: data}))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Create empty graph_def</span>\ngraph_def <span class=\"pl-k\">=</span> tf.GraphDef()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Parse/Load from graph1.pb</span>\n<span class=\"pl-k\">with</span> tf.gfile.GFile(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>graph1.pb<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n  graph_def.ParseFromString(f.read())\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Add user attributes to each node in graph_def</span>\n<span class=\"pl-k\">for</span> node <span class=\"pl-k\">in</span> graph_def.node:\n  a1 <span class=\"pl-k\">=</span> tf.AttrValue(<span class=\"pl-v\">i</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">8</span>)\n  a2 <span class=\"pl-k\">=</span> tf.AttrValue(<span class=\"pl-v\">i</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\n  attrs <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>data1<span class=\"pl-pds\">\"</span></span>: a1, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>data2<span class=\"pl-pds\">\"</span></span>: a2}\n  add_attr_to_tf_node(node, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>my_attr<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>attr_name<span class=\"pl-pds\">'</span></span>, attrs)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Serialize/Save modified graph_def to graph2.pb</span>\n<span class=\"pl-k\">with</span> tf.gfile.GFile(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>graph2.pb<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>wb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n  f.write(graph_def.SerializeToString())\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Parse/Load from graph2.pb</span>\n<span class=\"pl-k\">with</span> tf.gfile.GFile(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>graph2.pb<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n  graph_def.ParseFromString(f.read())\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Import graph_def to defalt graph --&gt; WORKS IN TF-1.7, ERROR WITH TF-1.8/1.9</span>\ntf.import_graph_def(graph_def)</pre></div>\n<h4>TensorFlow 1.7:</h4>\n<p>No issues.</p>\n<h4>TensorFlow 1.8/1.9 (ERROR LOG):</h4>\n<pre><code>Traceback (most recent call last):\n  File \"/scratch/tensorflow_1p8/lib/python3.5/site-packages/tensorflow/python/framework/importer.py\", line 489, in import_graph_def\n    graph._c_graph, serialized, options)  # pylint: disable=protected-access\ntensorflow.python.framework.errors_impl.InvalidArgumentError: NodeDef mentions attr 'my_attr' not in Op&lt;name=VariableV2; signature= -&gt; ref:Ref(dtype); attr=shape:shape; attr=dtype:type; attr=container:string,default=\"\"; attr=shared_name:string,default=\"\"; is_stateful=true&gt;; NodeDef: import/loss3_classifier/biases = VariableV2[_class=[\"loc:@import/loss3_classifier/biases\"], _output_shapes=[[1000]], container=\"\", dtype=DT_FLOAT, my_attr=attr_name[data1=8, data2=2], shape=[1000], shared_name=\"\"](). (Check whether your GraphDef-interpreting binary is up to date with your GraphDef-generating binary.).\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"modify.py\", line 37, in &lt;module&gt;\n    tf.import_graph_def(graph_def)\n  File \"/scratch/tensorflow_1p8/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py\", line 432, in new_func\n    return func(*args, **kwargs)\n  File \"/scratch/tensorflow_1p8/lib/python3.5/site-packages/tensorflow/python/framework/importer.py\", line 493, in import_graph_def\n    raise ValueError(str(e))\nValueError: NodeDef mentions attr 'my_attr' not in Op&lt;name=VariableV2; signature= -&gt; ref:Ref(dtype); attr=shape:shape; attr=dtype:type; attr=container:string,default=\"\"; attr=shared_name:string,default=\"\"; is_stateful=true&gt;; NodeDef: import/loss3_classifier/biases = VariableV2[_class=[\"loc:@import/loss3_classifier/biases\"], _output_shapes=[[1000]], container=\"\", dtype=DT_FLOAT, my_attr=attr_name[data1=8, data2=2], shape=[1000], shared_name=\"\"](). (Check whether your GraphDef-interpreting binary is up to date with your GraphDef-generating binary.).\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: n/a\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): v1.9.0-0-g25c197e023 1.9.0\nPython version: Python 3.5.2\nBazel version (if compiling from source): n/a\nGCC/Compiler version (if compiling from source): n/a\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\nExact command to reproduce: See below.\n\nDescribe the problem\nOur simplified code modify.py below does the following:\n\nLoads an existing TF graph from graph1.pb into graph_def = tf.GraphDef()\nTo each node within the graph_def, adds user-defined attributes using NameAttrList func protobuf message in attr_value.proto.\nSaves out the modified graph_def to graph2.pb\nLoads this new graph2.pb and imports to default graph --> Works in TF 1.7, fails in TF 1.8/1.9\n\nThis flow works fine in TF 1.7. However due to an added constraint in TF 1.8 or 1.9, when importing a graph containing nodes with user-defined attributes, it fails as follows (full error log included below):\ntensorflow.python.framework.errors_impl.InvalidArgumentError: NodeDef mentions attr 'my_attr' not in Op<name=VariableV2; signature= -> ref:Ref(dtype); attr=shape:shape; attr=dtype:type; attr=container:string,default=\"\"; attr=shared_name:string,default=\"\"; is_stateful=true>; \nNodeDef: import/loss3_classifier/biases = VariableV2[_class=[\"loc:@import/loss3_classifier/biases\"], _output_shapes=[[1000]], container=\"\", dtype=DT_FLOAT, my_attr=attr_name[data1=8, data2=2], shape=[1000], shared_name=\"\"](). \n(Check whether your GraphDef-interpreting binary is up to date with your GraphDef-generating binary.).\n\nThis is not an issue with the GraphDef interpreting binary mismatching with GraphDef-generating binary, since the same binary is used to generate and interpret. I believe this is failing because the check to ensure all attrs within the NodeDef are valid doesn't account for user-defined attributes given using NameAttrList func message in attr_value.proto.\nThis is breaking some of our production code written in TF1.7, when migrating to TF1.9, since the graph is no longer loadable.\nAttachments\ngraphs_attachment.zip\nContains:\n\ngraph1.pb\ngraph2.pb\ntensorboard events file for graph1.pb\ntensorboard events file for graph2.pb (can only generate using TF1.7, fails with TF1.8/1.9)\nmodify.py script\n\nSource code / logs\nmodify.py\nimport tensorflow as tf\n\ndef add_attr_to_tf_node(node, key, name, data):\n  \"\"\" Add a dictionary 'data' to a TF graph node,\n  with optional label 'name'. Key is 'key'.\n  Each element of 'data' should be a tf.AttrValue() instance\n  e.g.  a1 = tf.AttrValue(i=8)\n        a2 = tf.AttrValue(i=2)\n        attrs = {\"data1\": a1, \"data2\": a2}\n  \"\"\"\n  if name is None:\n    node.attr[key].CopyFrom(tf.AttrValue(func={\"attr\": data}))\n  else:\n    node.attr[key].CopyFrom(tf.AttrValue(func={\"name\": name, \"attr\": data}))\n\n# Create empty graph_def\ngraph_def = tf.GraphDef()\n\n# Parse/Load from graph1.pb\nwith tf.gfile.GFile('graph1.pb', 'rb') as f:\n  graph_def.ParseFromString(f.read())\n\n# Add user attributes to each node in graph_def\nfor node in graph_def.node:\n  a1 = tf.AttrValue(i=8)\n  a2 = tf.AttrValue(i=2)\n  attrs = {\"data1\": a1, \"data2\": a2}\n  add_attr_to_tf_node(node, 'my_attr', 'attr_name', attrs)\n\n# Serialize/Save modified graph_def to graph2.pb\nwith tf.gfile.GFile('graph2.pb', 'wb') as f:\n  f.write(graph_def.SerializeToString())\n\n# Parse/Load from graph2.pb\nwith tf.gfile.GFile('graph2.pb', 'rb') as f:\n  graph_def.ParseFromString(f.read())\n\n# Import graph_def to defalt graph --> WORKS IN TF-1.7, ERROR WITH TF-1.8/1.9\ntf.import_graph_def(graph_def)\nTensorFlow 1.7:\nNo issues.\nTensorFlow 1.8/1.9 (ERROR LOG):\nTraceback (most recent call last):\n  File \"/scratch/tensorflow_1p8/lib/python3.5/site-packages/tensorflow/python/framework/importer.py\", line 489, in import_graph_def\n    graph._c_graph, serialized, options)  # pylint: disable=protected-access\ntensorflow.python.framework.errors_impl.InvalidArgumentError: NodeDef mentions attr 'my_attr' not in Op<name=VariableV2; signature= -> ref:Ref(dtype); attr=shape:shape; attr=dtype:type; attr=container:string,default=\"\"; attr=shared_name:string,default=\"\"; is_stateful=true>; NodeDef: import/loss3_classifier/biases = VariableV2[_class=[\"loc:@import/loss3_classifier/biases\"], _output_shapes=[[1000]], container=\"\", dtype=DT_FLOAT, my_attr=attr_name[data1=8, data2=2], shape=[1000], shared_name=\"\"](). (Check whether your GraphDef-interpreting binary is up to date with your GraphDef-generating binary.).\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"modify.py\", line 37, in <module>\n    tf.import_graph_def(graph_def)\n  File \"/scratch/tensorflow_1p8/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py\", line 432, in new_func\n    return func(*args, **kwargs)\n  File \"/scratch/tensorflow_1p8/lib/python3.5/site-packages/tensorflow/python/framework/importer.py\", line 493, in import_graph_def\n    raise ValueError(str(e))\nValueError: NodeDef mentions attr 'my_attr' not in Op<name=VariableV2; signature= -> ref:Ref(dtype); attr=shape:shape; attr=dtype:type; attr=container:string,default=\"\"; attr=shared_name:string,default=\"\"; is_stateful=true>; NodeDef: import/loss3_classifier/biases = VariableV2[_class=[\"loc:@import/loss3_classifier/biases\"], _output_shapes=[[1000]], container=\"\", dtype=DT_FLOAT, my_attr=attr_name[data1=8, data2=2], shape=[1000], shared_name=\"\"](). (Check whether your GraphDef-interpreting binary is up to date with your GraphDef-generating binary.).", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: n/a\r\n- **TensorFlow installed from (source or binary)**: binary \r\n- **TensorFlow version (use command below)**: v1.9.0-0-g25c197e023 1.9.0\r\n- **Python version**: Python 3.5.2\r\n- **Bazel version (if compiling from source)**: n/a\r\n- **GCC/Compiler version (if compiling from source)**: n/a\r\n- **CUDA/cuDNN version**: n/a\r\n- **GPU model and memory**: n/a\r\n- **Exact command to reproduce**: See below.\r\n\r\n### Describe the problem\r\nOur simplified code `modify.py` below does the following: \r\n\r\n- Loads an existing TF graph from `graph1.pb` into `graph_def = tf.GraphDef()`\r\n- To each node within the `graph_def`, adds user-defined attributes using `NameAttrList func` protobuf message in [attr_value.proto](https://github.com/tensorflow/tensorflow/blob/25c197e02393bd44f50079945409009dd4d434f8/tensorflow/core/framework/attr_value.proto#L40-L44).\r\n- Saves out the modified `graph_def` to `graph2.pb`\r\n- Loads this new `graph2.pb` and imports to default graph --> Works in TF 1.7, fails in TF 1.8/1.9\r\n\r\nThis flow works fine in TF 1.7. However due to an added constraint in TF 1.8 or 1.9, when importing a graph containing nodes with user-defined attributes, it fails as follows (full error log included below):\r\n```\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: NodeDef mentions attr 'my_attr' not in Op<name=VariableV2; signature= -> ref:Ref(dtype); attr=shape:shape; attr=dtype:type; attr=container:string,default=\"\"; attr=shared_name:string,default=\"\"; is_stateful=true>; \r\nNodeDef: import/loss3_classifier/biases = VariableV2[_class=[\"loc:@import/loss3_classifier/biases\"], _output_shapes=[[1000]], container=\"\", dtype=DT_FLOAT, my_attr=attr_name[data1=8, data2=2], shape=[1000], shared_name=\"\"](). \r\n(Check whether your GraphDef-interpreting binary is up to date with your GraphDef-generating binary.).\r\n```\r\n\r\nThis is not an issue with the GraphDef interpreting binary mismatching with GraphDef-generating binary, since the same binary is used to generate and interpret. I believe this is failing because the check to ensure all attrs within the NodeDef are valid doesn't account for user-defined attributes given using `NameAttrList func` message in [attr_value.proto](https://github.com/tensorflow/tensorflow/blob/25c197e02393bd44f50079945409009dd4d434f8/tensorflow/core/framework/attr_value.proto#L40-L44). \r\n\r\nThis is breaking some of our production code written in TF1.7, when migrating to TF1.9, since the graph is no longer loadable.\r\n\r\n### Attachments\r\n[graphs_attachment.zip](https://github.com/tensorflow/tensorflow/files/2254600/graphs_attachment.zip)\r\nContains:\r\n- graph1.pb\r\n- graph2.pb\r\n- tensorboard events file for graph1.pb\r\n- tensorboard events file for graph2.pb (can only generate using TF1.7, fails with TF1.8/1.9)\r\n- modify.py script\r\n\r\n### Source code / logs\r\n#### modify.py\r\n```python\r\nimport tensorflow as tf\r\n\r\ndef add_attr_to_tf_node(node, key, name, data):\r\n  \"\"\" Add a dictionary 'data' to a TF graph node,\r\n  with optional label 'name'. Key is 'key'.\r\n  Each element of 'data' should be a tf.AttrValue() instance\r\n  e.g.  a1 = tf.AttrValue(i=8)\r\n        a2 = tf.AttrValue(i=2)\r\n        attrs = {\"data1\": a1, \"data2\": a2}\r\n  \"\"\"\r\n  if name is None:\r\n    node.attr[key].CopyFrom(tf.AttrValue(func={\"attr\": data}))\r\n  else:\r\n    node.attr[key].CopyFrom(tf.AttrValue(func={\"name\": name, \"attr\": data}))\r\n\r\n# Create empty graph_def\r\ngraph_def = tf.GraphDef()\r\n\r\n# Parse/Load from graph1.pb\r\nwith tf.gfile.GFile('graph1.pb', 'rb') as f:\r\n  graph_def.ParseFromString(f.read())\r\n\r\n# Add user attributes to each node in graph_def\r\nfor node in graph_def.node:\r\n  a1 = tf.AttrValue(i=8)\r\n  a2 = tf.AttrValue(i=2)\r\n  attrs = {\"data1\": a1, \"data2\": a2}\r\n  add_attr_to_tf_node(node, 'my_attr', 'attr_name', attrs)\r\n\r\n# Serialize/Save modified graph_def to graph2.pb\r\nwith tf.gfile.GFile('graph2.pb', 'wb') as f:\r\n  f.write(graph_def.SerializeToString())\r\n\r\n# Parse/Load from graph2.pb\r\nwith tf.gfile.GFile('graph2.pb', 'rb') as f:\r\n  graph_def.ParseFromString(f.read())\r\n\r\n# Import graph_def to defalt graph --> WORKS IN TF-1.7, ERROR WITH TF-1.8/1.9\r\ntf.import_graph_def(graph_def)\r\n```\r\n#### TensorFlow 1.7:\r\nNo issues. \r\n\r\n#### TensorFlow 1.8/1.9 (ERROR LOG):\r\n```\r\nTraceback (most recent call last):\r\n  File \"/scratch/tensorflow_1p8/lib/python3.5/site-packages/tensorflow/python/framework/importer.py\", line 489, in import_graph_def\r\n    graph._c_graph, serialized, options)  # pylint: disable=protected-access\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: NodeDef mentions attr 'my_attr' not in Op<name=VariableV2; signature= -> ref:Ref(dtype); attr=shape:shape; attr=dtype:type; attr=container:string,default=\"\"; attr=shared_name:string,default=\"\"; is_stateful=true>; NodeDef: import/loss3_classifier/biases = VariableV2[_class=[\"loc:@import/loss3_classifier/biases\"], _output_shapes=[[1000]], container=\"\", dtype=DT_FLOAT, my_attr=attr_name[data1=8, data2=2], shape=[1000], shared_name=\"\"](). (Check whether your GraphDef-interpreting binary is up to date with your GraphDef-generating binary.).\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"modify.py\", line 37, in <module>\r\n    tf.import_graph_def(graph_def)\r\n  File \"/scratch/tensorflow_1p8/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py\", line 432, in new_func\r\n    return func(*args, **kwargs)\r\n  File \"/scratch/tensorflow_1p8/lib/python3.5/site-packages/tensorflow/python/framework/importer.py\", line 493, in import_graph_def\r\n    raise ValueError(str(e))\r\nValueError: NodeDef mentions attr 'my_attr' not in Op<name=VariableV2; signature= -> ref:Ref(dtype); attr=shape:shape; attr=dtype:type; attr=container:string,default=\"\"; attr=shared_name:string,default=\"\"; is_stateful=true>; NodeDef: import/loss3_classifier/biases = VariableV2[_class=[\"loc:@import/loss3_classifier/biases\"], _output_shapes=[[1000]], container=\"\", dtype=DT_FLOAT, my_attr=attr_name[data1=8, data2=2], shape=[1000], shared_name=\"\"](). (Check whether your GraphDef-interpreting binary is up to date with your GraphDef-generating binary.).\r\n```"}