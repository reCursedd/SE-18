{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/338231694", "html_url": "https://github.com/tensorflow/tensorflow/issues/13838#issuecomment-338231694", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13838", "id": 338231694, "node_id": "MDEyOklzc3VlQ29tbWVudDMzODIzMTY5NA==", "user": {"login": "KeironO", "id": 4386515, "node_id": "MDQ6VXNlcjQzODY1MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/4386515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KeironO", "html_url": "https://github.com/KeironO", "followers_url": "https://api.github.com/users/KeironO/followers", "following_url": "https://api.github.com/users/KeironO/following{/other_user}", "gists_url": "https://api.github.com/users/KeironO/gists{/gist_id}", "starred_url": "https://api.github.com/users/KeironO/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KeironO/subscriptions", "organizations_url": "https://api.github.com/users/KeironO/orgs", "repos_url": "https://api.github.com/users/KeironO/repos", "events_url": "https://api.github.com/users/KeironO/events{/privacy}", "received_events_url": "https://api.github.com/users/KeironO/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-20T14:59:33Z", "updated_at": "2017-10-20T14:59:48Z", "author_association": "NONE", "body_html": "<p>I've stripped out a bit.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> os, copy\n<span class=\"pl-k\">from</span> keras.preprocessing.image <span class=\"pl-k\">import</span> ImageDataGenerator\n<span class=\"pl-k\">from</span> keras.applications.vgg16 <span class=\"pl-k\">import</span> <span class=\"pl-c1\">VGG16</span>\n<span class=\"pl-k\">from</span> keras.models <span class=\"pl-k\">import</span> Sequential, Model\n<span class=\"pl-k\">from</span> keras.layers <span class=\"pl-k\">import</span> Dropout, Flatten, Dense, GlobalAveragePooling2D\n<span class=\"pl-k\">from</span> keras.optimizers <span class=\"pl-k\">import</span> <span class=\"pl-c1\">SGD</span>\n<span class=\"pl-k\">from</span> keras.callbacks <span class=\"pl-k\">import</span> EarlyStopping, ModelCheckpoint, CSVLogger\n\n<span class=\"pl-k\">from</span> keras <span class=\"pl-k\">import</span> backend <span class=\"pl-k\">as</span> K\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.python.tools <span class=\"pl-k\">import</span> freeze_graph\n<span class=\"pl-k\">from</span> tensorflow.python.tools <span class=\"pl-k\">import</span> optimize_for_inference_lib\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Global Variables</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Input values</span>\nheight, width, nb_channels  <span class=\"pl-k\">=</span> <span class=\"pl-c1\">150</span>, <span class=\"pl-c1\">150</span>, <span class=\"pl-c1\">3</span>\n\ndata_directory <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/keo7/Data/PVS/<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Data directories</span>\ntrain_directory <span class=\"pl-k\">=</span> os.path.join(data_directory, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>train/<span class=\"pl-pds\">\"</span></span>)\nvalidation_directory <span class=\"pl-k\">=</span> os.path.join(data_directory, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>val/<span class=\"pl-pds\">\"</span></span>)\ntest_directory <span class=\"pl-k\">=</span> os.path.join(data_directory, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test/<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Training parameters</span>\n\n<span class=\"pl-c1\">MODEL_NAME</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>VGG16<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">create_model</span>():\n    model <span class=\"pl-k\">=</span> VGG16(<span class=\"pl-v\">weights</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>imagenet<span class=\"pl-pds\">\"</span></span>,\n                  <span class=\"pl-v\">include_top</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>,\n                  <span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span>[height,width, nb_channels])\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Freeze layers we don't want to train.</span>\n\n    <span class=\"pl-k\">for</span> layer <span class=\"pl-k\">in</span> model.layers[:<span class=\"pl-c1\">5</span>]:\n        layer.trainable <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Output layers</span>\n\n    output_layers <span class=\"pl-k\">=</span> model.output\n    output_layers <span class=\"pl-k\">=</span> Flatten()(output_layers)\n    output_layers <span class=\"pl-k\">=</span> Dense(<span class=\"pl-c1\">1024</span>,\n                          <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>relu<span class=\"pl-pds\">\"</span></span>)(output_layers)\n    output_layers <span class=\"pl-k\">=</span> Dropout(<span class=\"pl-c1\">0.5</span>)(output_layers)\n    output_layers <span class=\"pl-k\">=</span> Dense(<span class=\"pl-c1\">1024</span>,\n                          <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>relu<span class=\"pl-pds\">\"</span></span>)(output_layers)\n    predictions <span class=\"pl-k\">=</span> Dense(nb_classes,\n                        <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>softmax<span class=\"pl-pds\">\"</span></span>)(output_layers)\n\n    final_model <span class=\"pl-k\">=</span> Model(<span class=\"pl-v\">input</span> <span class=\"pl-k\">=</span> model.input,\n                        <span class=\"pl-v\">output</span> <span class=\"pl-k\">=</span> predictions)\n    final_model.compile(<span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>categorical_crossentropy<span class=\"pl-pds\">\"</span></span>,\n                        <span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span>SGD(<span class=\"pl-v\">lr</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.0001</span>,\n                                      <span class=\"pl-v\">momentum</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.9</span>),\n                        <span class=\"pl-v\">metrics</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>accuracy<span class=\"pl-pds\">\"</span></span>])\n\n    <span class=\"pl-k\">return</span> final_model\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">export_model</span>(<span class=\"pl-smi\">saver</span>, <span class=\"pl-smi\">model</span>, <span class=\"pl-smi\">input_node_names</span>, <span class=\"pl-smi\">output_node_name</span>):\n    tf.train.write_graph(K.get_session().graph_def, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>out<span class=\"pl-pds\">'</span></span>, \\\n        <span class=\"pl-c1\">MODEL_NAME</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>_graph.pbtxt<span class=\"pl-pds\">'</span></span>)\n\n    saver.save(K.get_session(), <span class=\"pl-s\"><span class=\"pl-pds\">'</span>out/<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">MODEL_NAME</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>.chkp<span class=\"pl-pds\">'</span></span>)\n\n    freeze_graph.freeze_graph(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>out/<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">MODEL_NAME</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>_graph.pbtxt<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">None</span>, \\\n        <span class=\"pl-c1\">False</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>out/<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">MODEL_NAME</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>.chkp<span class=\"pl-pds\">'</span></span>, output_node_name, \\\n        <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>save/restore_all<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>save/Const:0<span class=\"pl-pds\">\"</span></span>, \\\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>out/frozen_<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">MODEL_NAME</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>.pb<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">True</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)\n\n    input_graph_def <span class=\"pl-k\">=</span> tf.GraphDef()\n    <span class=\"pl-k\">with</span> tf.gfile.Open(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>out/frozen_<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">MODEL_NAME</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>.pb<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rb<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> f:\n        input_graph_def.ParseFromString(f.read())\n\n    output_graph_def <span class=\"pl-k\">=</span> optimize_for_inference_lib.optimize_for_inference(\n            input_graph_def, input_node_names, [output_node_name],\n            tf.float32.as_datatype_enum)\n\n    <span class=\"pl-k\">with</span> tf.gfile.FastGFile(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>out/opt_<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">MODEL_NAME</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>.pb<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>wb<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> f:\n        f.write(output_graph_def.SerializeToString())\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>__main__<span class=\"pl-pds\">\"</span></span>:\n    model <span class=\"pl-k\">=</span> create_model()\n    model.summary()\n    export_model(tf.train.Saver(), model, [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input_1<span class=\"pl-pds\">\"</span></span>], <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dense_3/kernel<span class=\"pl-pds\">\"</span></span>)</pre></div>", "body_text": "I've stripped out a bit.\nimport os, copy\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.vgg16 import VGG16\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dropout, Flatten, Dense, GlobalAveragePooling2D\nfrom keras.optimizers import SGD\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, CSVLogger\n\nfrom keras import backend as K\n\nimport tensorflow as tf\nfrom tensorflow.python.tools import freeze_graph\nfrom tensorflow.python.tools import optimize_for_inference_lib\n\n# Global Variables\n\n# Input values\nheight, width, nb_channels  = 150, 150, 3\n\ndata_directory = \"/home/keo7/Data/PVS/\"\n\n# Data directories\ntrain_directory = os.path.join(data_directory, \"train/\")\nvalidation_directory = os.path.join(data_directory, \"val/\")\ntest_directory = os.path.join(data_directory, \"test/\")\n\n# Training parameters\n\nMODEL_NAME = \"VGG16\"\n\ndef create_model():\n    model = VGG16(weights=\"imagenet\",\n                  include_top=False,\n                  input_shape=[height,width, nb_channels])\n\n    # Freeze layers we don't want to train.\n\n    for layer in model.layers[:5]:\n        layer.trainable = False\n\n    # Output layers\n\n    output_layers = model.output\n    output_layers = Flatten()(output_layers)\n    output_layers = Dense(1024,\n                          activation=\"relu\")(output_layers)\n    output_layers = Dropout(0.5)(output_layers)\n    output_layers = Dense(1024,\n                          activation=\"relu\")(output_layers)\n    predictions = Dense(nb_classes,\n                        activation=\"softmax\")(output_layers)\n\n    final_model = Model(input = model.input,\n                        output = predictions)\n    final_model.compile(loss=\"categorical_crossentropy\",\n                        optimizer=SGD(lr=0.0001,\n                                      momentum=0.9),\n                        metrics=[\"accuracy\"])\n\n    return final_model\n\ndef export_model(saver, model, input_node_names, output_node_name):\n    tf.train.write_graph(K.get_session().graph_def, 'out', \\\n        MODEL_NAME + '_graph.pbtxt')\n\n    saver.save(K.get_session(), 'out/' + MODEL_NAME + '.chkp')\n\n    freeze_graph.freeze_graph('out/' + MODEL_NAME + '_graph.pbtxt', None, \\\n        False, 'out/' + MODEL_NAME + '.chkp', output_node_name, \\\n        \"save/restore_all\", \"save/Const:0\", \\\n        'out/frozen_' + MODEL_NAME + '.pb', True, \"\")\n\n    input_graph_def = tf.GraphDef()\n    with tf.gfile.Open('out/frozen_' + MODEL_NAME + '.pb', \"rb\") as f:\n        input_graph_def.ParseFromString(f.read())\n\n    output_graph_def = optimize_for_inference_lib.optimize_for_inference(\n            input_graph_def, input_node_names, [output_node_name],\n            tf.float32.as_datatype_enum)\n\n    with tf.gfile.FastGFile('out/opt_' + MODEL_NAME + '.pb', \"wb\") as f:\n        f.write(output_graph_def.SerializeToString())\nif __name__ == \"__main__\":\n    model = create_model()\n    model.summary()\n    export_model(tf.train.Saver(), model, [\"input_1\"], \"dense_3/kernel\")", "body": "I've stripped out a bit.\r\n\r\n```python\r\nimport os, copy\r\nfrom keras.preprocessing.image import ImageDataGenerator\r\nfrom keras.applications.vgg16 import VGG16\r\nfrom keras.models import Sequential, Model\r\nfrom keras.layers import Dropout, Flatten, Dense, GlobalAveragePooling2D\r\nfrom keras.optimizers import SGD\r\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, CSVLogger\r\n\r\nfrom keras import backend as K\r\n\r\nimport tensorflow as tf\r\nfrom tensorflow.python.tools import freeze_graph\r\nfrom tensorflow.python.tools import optimize_for_inference_lib\r\n\r\n# Global Variables\r\n\r\n# Input values\r\nheight, width, nb_channels  = 150, 150, 3\r\n\r\ndata_directory = \"/home/keo7/Data/PVS/\"\r\n\r\n# Data directories\r\ntrain_directory = os.path.join(data_directory, \"train/\")\r\nvalidation_directory = os.path.join(data_directory, \"val/\")\r\ntest_directory = os.path.join(data_directory, \"test/\")\r\n\r\n# Training parameters\r\n\r\nMODEL_NAME = \"VGG16\"\r\n\r\ndef create_model():\r\n    model = VGG16(weights=\"imagenet\",\r\n                  include_top=False,\r\n                  input_shape=[height,width, nb_channels])\r\n\r\n    # Freeze layers we don't want to train.\r\n\r\n    for layer in model.layers[:5]:\r\n        layer.trainable = False\r\n\r\n    # Output layers\r\n\r\n    output_layers = model.output\r\n    output_layers = Flatten()(output_layers)\r\n    output_layers = Dense(1024,\r\n                          activation=\"relu\")(output_layers)\r\n    output_layers = Dropout(0.5)(output_layers)\r\n    output_layers = Dense(1024,\r\n                          activation=\"relu\")(output_layers)\r\n    predictions = Dense(nb_classes,\r\n                        activation=\"softmax\")(output_layers)\r\n\r\n    final_model = Model(input = model.input,\r\n                        output = predictions)\r\n    final_model.compile(loss=\"categorical_crossentropy\",\r\n                        optimizer=SGD(lr=0.0001,\r\n                                      momentum=0.9),\r\n                        metrics=[\"accuracy\"])\r\n\r\n    return final_model\r\n\r\ndef export_model(saver, model, input_node_names, output_node_name):\r\n    tf.train.write_graph(K.get_session().graph_def, 'out', \\\r\n        MODEL_NAME + '_graph.pbtxt')\r\n\r\n    saver.save(K.get_session(), 'out/' + MODEL_NAME + '.chkp')\r\n\r\n    freeze_graph.freeze_graph('out/' + MODEL_NAME + '_graph.pbtxt', None, \\\r\n        False, 'out/' + MODEL_NAME + '.chkp', output_node_name, \\\r\n        \"save/restore_all\", \"save/Const:0\", \\\r\n        'out/frozen_' + MODEL_NAME + '.pb', True, \"\")\r\n\r\n    input_graph_def = tf.GraphDef()\r\n    with tf.gfile.Open('out/frozen_' + MODEL_NAME + '.pb', \"rb\") as f:\r\n        input_graph_def.ParseFromString(f.read())\r\n\r\n    output_graph_def = optimize_for_inference_lib.optimize_for_inference(\r\n            input_graph_def, input_node_names, [output_node_name],\r\n            tf.float32.as_datatype_enum)\r\n\r\n    with tf.gfile.FastGFile('out/opt_' + MODEL_NAME + '.pb', \"wb\") as f:\r\n        f.write(output_graph_def.SerializeToString())\r\nif __name__ == \"__main__\":\r\n    model = create_model()\r\n    model.summary()\r\n    export_model(tf.train.Saver(), model, [\"input_1\"], \"dense_3/kernel\")\r\n"}