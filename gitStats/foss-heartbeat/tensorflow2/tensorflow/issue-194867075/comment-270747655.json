{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/270747655", "html_url": "https://github.com/tensorflow/tensorflow/issues/6256#issuecomment-270747655", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6256", "id": 270747655, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDc0NzY1NQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-05T20:24:36Z", "updated_at": "2017-01-05T20:24:36Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Most of the improvement from that change will be for the common case where client, master, and worker are in the same address space (like in <code>session_benchmark.py</code>). If I've understood the code correctly (since you have a <code>tf.Session(server.target)</code>) it should also speed up feeds like this one in Universe's A3C implementation:</p>\n<p><a href=\"https://github.com/openai/universe-starter-agent/blob/ea74a5104ffa19c81562f65000ac56be78e0e0ac/a3c.py#L276\">https://github.com/openai/universe-starter-agent/blob/ea74a5104ffa19c81562f65000ac56be78e0e0ac/a3c.py#L276</a></p>\n<p>We haven't tried hard (yet) to optimize the case where the client and master are in different processes, although it may be possible to slip in an implementation that avoids a copy when serializing fed tensors into a gRPC call.</p>", "body_text": "Most of the improvement from that change will be for the common case where client, master, and worker are in the same address space (like in session_benchmark.py). If I've understood the code correctly (since you have a tf.Session(server.target)) it should also speed up feeds like this one in Universe's A3C implementation:\nhttps://github.com/openai/universe-starter-agent/blob/ea74a5104ffa19c81562f65000ac56be78e0e0ac/a3c.py#L276\nWe haven't tried hard (yet) to optimize the case where the client and master are in different processes, although it may be possible to slip in an implementation that avoids a copy when serializing fed tensors into a gRPC call.", "body": "Most of the improvement from that change will be for the common case where client, master, and worker are in the same address space (like in `session_benchmark.py`). If I've understood the code correctly (since you have a `tf.Session(server.target)`) it should also speed up feeds like this one in Universe's A3C implementation:\r\n\r\nhttps://github.com/openai/universe-starter-agent/blob/ea74a5104ffa19c81562f65000ac56be78e0e0ac/a3c.py#L276\r\n\r\nWe haven't tried hard (yet) to optimize the case where the client and master are in different processes, although it may be possible to slip in an implementation that avoids a copy when serializing fed tensors into a gRPC call."}