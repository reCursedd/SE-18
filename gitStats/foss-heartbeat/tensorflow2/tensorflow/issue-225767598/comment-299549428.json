{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/299549428", "html_url": "https://github.com/tensorflow/tensorflow/issues/9600#issuecomment-299549428", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9600", "id": 299549428, "node_id": "MDEyOklzc3VlQ29tbWVudDI5OTU0OTQyOA==", "user": {"login": "chris-chris", "id": 3013964, "node_id": "MDQ6VXNlcjMwMTM5NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3013964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-chris", "html_url": "https://github.com/chris-chris", "followers_url": "https://api.github.com/users/chris-chris/followers", "following_url": "https://api.github.com/users/chris-chris/following{/other_user}", "gists_url": "https://api.github.com/users/chris-chris/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-chris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-chris/subscriptions", "organizations_url": "https://api.github.com/users/chris-chris/orgs", "repos_url": "https://api.github.com/users/chris-chris/repos", "events_url": "https://api.github.com/users/chris-chris/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-chris/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-05T19:02:53Z", "updated_at": "2017-05-05T19:02:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> Okay, I'll make it quick.</p>\n<p>There are two tasks.</p>\n<ol>\n<li>\n<p>Add initializer parameter to GRUCell, MultiRNNCell<br>\nI've done this issue. I'll make a PR for this one first.</p>\n</li>\n<li>\n<p>Add layer_norm, norm_gain, norm_shift parameters<br>\nto TimeFreqLSTMCell, CoupledInputForgetGateLSTMCell, GridLSTMCell, BidirectionalGridLSTMCell ( all LSTMCells in rnn_cell.py )</p>\n</li>\n</ol>\n<pre><code>    Args:\n      layer_norm: If `True`, layer normalization will be applied.\n      norm_gain: float, The layer normalization gain initial value. If\n        `layer_norm` has been set to `False`, this argument will be ignored.\n      norm_shift: float, The layer normalization shift initial value. If\n        `layer_norm` has been set to `False`, this argument will be ignored.\n</code></pre>\n<p>This issue will take some more time to apply because I couldn't find a way to make general wrapper like <code>LayerNormWrapper</code>(I named it).</p>\n<p>I think I need to add layer_norm parameters to all those LSTMCells, and implement it separately.<br>\nIf you have any good idea, please tell me.</p>", "body_text": "@ebrevdo Okay, I'll make it quick.\nThere are two tasks.\n\n\nAdd initializer parameter to GRUCell, MultiRNNCell\nI've done this issue. I'll make a PR for this one first.\n\n\nAdd layer_norm, norm_gain, norm_shift parameters\nto TimeFreqLSTMCell, CoupledInputForgetGateLSTMCell, GridLSTMCell, BidirectionalGridLSTMCell ( all LSTMCells in rnn_cell.py )\n\n\n    Args:\n      layer_norm: If `True`, layer normalization will be applied.\n      norm_gain: float, The layer normalization gain initial value. If\n        `layer_norm` has been set to `False`, this argument will be ignored.\n      norm_shift: float, The layer normalization shift initial value. If\n        `layer_norm` has been set to `False`, this argument will be ignored.\n\nThis issue will take some more time to apply because I couldn't find a way to make general wrapper like LayerNormWrapper(I named it).\nI think I need to add layer_norm parameters to all those LSTMCells, and implement it separately.\nIf you have any good idea, please tell me.", "body": "@ebrevdo Okay, I'll make it quick.\r\n\r\nThere are two tasks.\r\n1. Add initializer parameter to GRUCell, MultiRNNCell\r\nI've done this issue. I'll make a PR for this one first.\r\n\r\n2. Add layer_norm, norm_gain, norm_shift parameters\r\n to TimeFreqLSTMCell, CoupledInputForgetGateLSTMCell, GridLSTMCell, BidirectionalGridLSTMCell ( all LSTMCells in rnn_cell.py )\r\n\r\n```\r\n    Args:\r\n      layer_norm: If `True`, layer normalization will be applied.\r\n      norm_gain: float, The layer normalization gain initial value. If\r\n        `layer_norm` has been set to `False`, this argument will be ignored.\r\n      norm_shift: float, The layer normalization shift initial value. If\r\n        `layer_norm` has been set to `False`, this argument will be ignored.\r\n```\r\n\r\nThis issue will take some more time to apply because I couldn't find a way to make general wrapper like `LayerNormWrapper`(I named it).\r\n\r\nI think I need to add layer_norm parameters to all those LSTMCells, and implement it separately.\r\nIf you have any good idea, please tell me.\r\n\r\n"}