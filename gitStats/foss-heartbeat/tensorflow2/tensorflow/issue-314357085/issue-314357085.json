{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18522", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18522/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18522/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18522/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18522", "id": 314357085, "node_id": "MDU6SXNzdWUzMTQzNTcwODU=", "number": 18522, "title": "Error building 1.8 RC-0 'eye_functor_gpu.cu.pic.o was not created'", "user": {"login": "tsoernes", "id": 6782404, "node_id": "MDQ6VXNlcjY3ODI0MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/6782404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsoernes", "html_url": "https://github.com/tsoernes", "followers_url": "https://api.github.com/users/tsoernes/followers", "following_url": "https://api.github.com/users/tsoernes/following{/other_user}", "gists_url": "https://api.github.com/users/tsoernes/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsoernes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsoernes/subscriptions", "organizations_url": "https://api.github.com/users/tsoernes/orgs", "repos_url": "https://api.github.com/users/tsoernes/repos", "events_url": "https://api.github.com/users/tsoernes/events{/privacy}", "received_events_url": "https://api.github.com/users/tsoernes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-04-14T19:55:43Z", "updated_at": "2018-05-17T01:04:16Z", "closed_at": "2018-05-17T01:04:16Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: N/A</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Fedora 27 x64</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.8.0 RC-0 (zip)</li>\n<li><strong>Python version</strong>: 3.6.4</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.12.0-1.fc27</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 6.4.0-6</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.1 / 7.0.5.15-3.fc27</li>\n<li><strong>GPU model and memory</strong>: GTX 1060</li>\n<li><strong>Exact command to reproduce</strong>: <code>$ bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package </code></li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I get nearly 6k files into the build and it fails with:</p>\n<pre><code>INFO: From Compiling tensorflow/core/kernels/eye_functor_gpu.cu.cc [for host]:\n/usr/include/bits/floatn.h(61): error: invalid argument to attribute \"__mode__\"\n/usr/include/bits/floatn.h(73): error: identifier \"__float128\" is undefined\n</code></pre>\n<p>Add <code>\"#define _BITS_FLOATN_H\"</code> to <code>cuda/host_defines.h</code>, and build again.<br>\nGets further but fails at:</p>\n<pre><code>INFO: From Compiling tensorflow/core/kernels/eye_functor_gpu.cu.cc:\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:248:   required by substitution of 'template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; &gt; constexpr std::tuple&lt; &lt;template-parameter-1-1&gt; &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; = &lt;missing&gt;]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;'\n       return __and_&lt;is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;...&gt;::value;\n                                                                   ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:362:   required by substitution of 'template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; &gt; constexpr std::tuple&lt; &lt;template-parameter-1-1&gt; &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; = &lt;missing&gt;]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;'\n       return __and_&lt;is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;...&gt;::value;\n                                                                 ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_NonNestedTuple() [with _SrcTuple = const std::tuple&lt;int, int, int&gt;&amp;; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:662:419:   required by substitution of 'template&lt;class ... _UElements, class _Dummy, typename std::enable_if&lt;((std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ConstructibleTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(std::is_same&lt;_Dummy, void&gt;::value &amp;&amp; (1ul == 1)), int, int, int&gt;::_NonNestedTuple&lt;const tuple&lt;_Elements ...&gt;&amp;&gt;()), bool&gt;::type &lt;anonymous&gt; &gt; constexpr std::tuple&lt; &lt;template-parameter-1-1&gt; &gt;::tuple(const std::tuple&lt;_Args1 ...&gt;&amp;) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if&lt;((std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ConstructibleTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(std::is_same&lt;_Dummy, void&gt;::value &amp;&amp; (1ul == 1)), int, int, int&gt;::_NonNestedTuple&lt;const tuple&lt;_Elements ...&gt;&amp;&gt;()), bool&gt;::type &lt;anonymous&gt; = &lt;missing&gt;]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:495:244: error: wrong number of template arguments (4, should be 2)\n       return  __and_&lt;__not_&lt;is_same&lt;tuple&lt;_Elements...&gt;,\n                                                                                                                                                                                                                                                    ^    \n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/type_traits:1558:8: note: provided for 'template&lt;class _From, class _To&gt; struct std::is_convertible'\n     struct is_convertible\n        ^~~~~~~~~~~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_NonNestedTuple() [with _SrcTuple = const std::tuple&lt;int, int, int&gt;&amp;; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {std::tuple&lt;int, int, int&gt;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:248:   required by substitution of 'template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; &gt; constexpr std::tuple&lt; &lt;template-parameter-1-1&gt; &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {std::tuple&lt;int, int, int&gt;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; = &lt;missing&gt;]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;'\n       return __and_&lt;is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;...&gt;::value;\n                                                                   ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {std::tuple&lt;int, int, int&gt;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple&lt;int, int, int&gt;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:362:   required by substitution of 'template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; &gt; constexpr std::tuple&lt; &lt;template-parameter-1-1&gt; &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {std::tuple&lt;int, int, int&gt;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; = &lt;missing&gt;]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;'\n       return __and_&lt;is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;...&gt;::value;\n                                                                 ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple&lt;int, int, int&gt;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_NonNestedTuple() [with _SrcTuple = std::tuple&lt;int, int, int&gt;&amp;&amp;; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:686:422:   required by substitution of 'template&lt;class ... _UElements, class _Dummy, typename std::enable_if&lt;((std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(std::is_same&lt;_Dummy, void&gt;::value &amp;&amp; (1ul == 1)), int, int, int&gt;::_NonNestedTuple&lt;tuple&lt;_Elements ...&gt;&amp;&amp;&gt;()), bool&gt;::type &lt;anonymous&gt; &gt; constexpr std::tuple&lt; &lt;template-parameter-1-1&gt; &gt;::tuple(std::tuple&lt;_Args1 ...&gt;&amp;&amp;) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if&lt;((std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(std::is_same&lt;_Dummy, void&gt;::value &amp;&amp; (1ul == 1)), int, int, int&gt;::_NonNestedTuple&lt;tuple&lt;_Elements ...&gt;&amp;&amp;&gt;()), bool&gt;::type &lt;anonymous&gt; = &lt;missing&gt;]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:495:244: error: wrong number of template arguments (4, should be 2)\n       return  __and_&lt;__not_&lt;is_same&lt;tuple&lt;_Elements...&gt;,\n                                                                                                                                                                                                                                                    ^    \n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/type_traits:1558:8: note: provided for 'template&lt;class _From, class _To&gt; struct std::is_convertible'\n     struct is_convertible\n        ^~~~~~~~~~~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_NonNestedTuple() [with _SrcTuple = std::tuple&lt;int, int, int&gt;&amp;&amp;; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\nERROR: /home/torstein/progs/tensorflow-1.8.0-rc0/tensorflow/core/kernels/BUILD:1864:1: output 'tensorflow/core/kernels/_objs/eye_functor_gpu/tensorflow/core/kernels/eye_functor_gpu.cu.o' was not created\nERROR: /home/torstein/progs/tensorflow-1.8.0-rc0/tensorflow/core/kernels/BUILD:1864:1: not all outputs were created or valid\nTarget //tensorflow/tools/pip_package:build_pip_package failed to build\nUse --verbose_failures to see the command lines of failed build steps.\nINFO: Elapsed time: 48.261s, Critical Path: 33.18s\nFAILED: Build did NOT complete successfully\n</code></pre>\n<p>Build conf:</p>\n<pre><code>build --action_env PYTHON_BIN_PATH=\"/usr/bin/python3\"\nbuild --action_env PYTHON_LIB_PATH=\"/usr/local/lib64/python3.6/site-packages\"\nbuild --force_python=py3\nbuild --host_force_python=py3\nbuild --python_path=\"/usr/bin/python3\"\nbuild --define with_jemalloc=true\nbuild:gcp --define with_gcp_support=true\nbuild:hdfs --define with_hdfs_support=true\nbuild:s3 --define with_s3_support=true\nbuild:kafka --define with_kafka_support=true\nbuild:xla --define with_xla_support=true\nbuild:gdr --define with_gdr_support=true\nbuild:verbs --define with_verbs_support=true\nbuild --action_env TF_NEED_OPENCL_SYCL=\"0\"\nbuild --action_env TF_NEED_CUDA=\"1\"\nbuild --action_env CUDA_TOOLKIT_PATH=\"/usr\"\nbuild --action_env TF_CUDA_VERSION=\"9.1\"\nbuild --action_env CUDNN_INSTALL_PATH=\"/usr\"\nbuild --action_env TF_CUDNN_VERSION=\"7\"\nbuild --action_env TF_NCCL_VERSION=\"2\"\nbuild --action_env TF_CUDA_COMPUTE_CAPABILITIES=\"6.1\"\nbuild --action_env LD_LIBRARY_PATH=\"/usr/include/cuda:/usr/include:/usr:/usr/lib64:/usr/include/cuda:/usr:/usr/include\"\nbuild --action_env TF_CUDA_CLANG=\"0\"\nbuild --action_env GCC_HOST_COMPILER_PATH=\"/usr/bin/cuda-gcc\"\nbuild --config=cuda\ntest --config=cuda\nbuild --define grpc_no_ares=true\nbuild:opt --copt=-march=native\nbuild:opt --host_copt=-march=native\nbuild:opt --define with_default_optimizations=true\nbuild --copt=-DGEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK\nbuild --host_copt=-DGEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK\n</code></pre>\n<p>Same error happens on master branch.</p>\n<p>If I add the build flag <code>--cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\"</code>, it fails at different place:</p>\n<pre><code>INFO: From Compiling tensorflow/core/kernels/spacetodepth_op_gpu.cu.cc:\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:248:   required by substitution of 'template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; &gt; constexpr std::tuple&lt; &lt;template-parameter-1-1&gt; &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; = &lt;missing&gt;]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;'\n       return __and_&lt;is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;...&gt;::value;\n                                                                   ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:362:   required by substitution of 'template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; &gt; constexpr std::tuple&lt; &lt;template-parameter-1-1&gt; &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; = &lt;missing&gt;]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;'\n       return __and_&lt;is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;...&gt;::value;\n                                                                 ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_NonNestedTuple() [with _SrcTuple = const std::tuple&lt;int, int, int&gt;&amp;; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:662:419:   required by substitution of 'template&lt;class ... _UElements, class _Dummy, typename std::enable_if&lt;((std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ConstructibleTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(std::is_same&lt;_Dummy, void&gt;::value &amp;&amp; (1ul == 1)), int, int, int&gt;::_NonNestedTuple&lt;const tuple&lt;_Elements ...&gt;&amp;&gt;()), bool&gt;::type &lt;anonymous&gt; &gt; constexpr std::tuple&lt; &lt;template-parameter-1-1&gt; &gt;::tuple(const std::tuple&lt;_Args1 ...&gt;&amp;) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if&lt;((std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ConstructibleTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(std::is_same&lt;_Dummy, void&gt;::value &amp;&amp; (1ul == 1)), int, int, int&gt;::_NonNestedTuple&lt;const tuple&lt;_Elements ...&gt;&amp;&gt;()), bool&gt;::type &lt;anonymous&gt; = &lt;missing&gt;]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:495:244: error: wrong number of template arguments (4, should be 2)\n       return  __and_&lt;__not_&lt;is_same&lt;tuple&lt;_Elements...&gt;,\n                                                                                                                                                                                                                                                    ^    \n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/type_traits:1558:8: note: provided for 'template&lt;class _From, class _To&gt; struct std::is_convertible'\n     struct is_convertible\n        ^~~~~~~~~~~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_NonNestedTuple() [with _SrcTuple = const std::tuple&lt;int, int, int&gt;&amp;; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {std::tuple&lt;int, int, int&gt;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:248:   required by substitution of 'template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; &gt; constexpr std::tuple&lt; &lt;template-parameter-1-1&gt; &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {std::tuple&lt;int, int, int&gt;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; = &lt;missing&gt;]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;'\n       return __and_&lt;is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;...&gt;::value;\n                                                                   ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {std::tuple&lt;int, int, int&gt;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple&lt;int, int, int&gt;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:362:   required by substitution of 'template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; &gt; constexpr std::tuple&lt; &lt;template-parameter-1-1&gt; &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {std::tuple&lt;int, int, int&gt;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type &lt;anonymous&gt; = &lt;missing&gt;]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;'\n       return __and_&lt;is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;...&gt;::value;\n                                                                 ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple&lt;int, int, int&gt;}; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_NonNestedTuple() [with _SrcTuple = std::tuple&lt;int, int, int&gt;&amp;&amp;; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:686:422:   required by substitution of 'template&lt;class ... _UElements, class _Dummy, typename std::enable_if&lt;((std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(std::is_same&lt;_Dummy, void&gt;::value &amp;&amp; (1ul == 1)), int, int, int&gt;::_NonNestedTuple&lt;tuple&lt;_Elements ...&gt;&amp;&amp;&gt;()), bool&gt;::type &lt;anonymous&gt; &gt; constexpr std::tuple&lt; &lt;template-parameter-1-1&gt; &gt;::tuple(std::tuple&lt;_Args1 ...&gt;&amp;&amp;) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if&lt;((std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(std::is_same&lt;_Dummy, void&gt;::value &amp;&amp; (1ul == 1)), int, int, int&gt;::_NonNestedTuple&lt;tuple&lt;_Elements ...&gt;&amp;&amp;&gt;()), bool&gt;::type &lt;anonymous&gt; = &lt;missing&gt;]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:495:244: error: wrong number of template arguments (4, should be 2)\n       return  __and_&lt;__not_&lt;is_same&lt;tuple&lt;_Elements...&gt;,\n                                                                                                                                                                                                                                                    ^    \n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/type_traits:1558:8: note: provided for 'template&lt;class _From, class _To&gt; struct std::is_convertible'\n     struct is_convertible\n        ^~~~~~~~~~~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;&lt;anonymous&gt;, _Elements&gt;::_NonNestedTuple() [with _SrcTuple = std::tuple&lt;int, int, int&gt;&amp;&amp;; bool &lt;anonymous&gt; = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\nERROR: /home/torstein/progs/tensorflow-1.8.0-rc0/tensorflow/core/kernels/BUILD:3659:1: output 'tensorflow/core/kernels/_objs/depth_space_ops_gpu/tensorflow/core/kernels/spacetodepth_op_gpu.cu.o' was not created\nERROR: /home/torstein/progs/tensorflow-1.8.0-rc0/tensorflow/core/kernels/BUILD:3659:1: not all outputs were created or valid\nTarget //tensorflow/tools/pip_package:build_pip_package failed to build\nUse --verbose_failures to see the command lines of failed build steps.\nINFO: Elapsed time: 111.410s, Critical Path: 35.53s\nFAILED: Build did NOT complete successfully\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): N/A\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Fedora 27 x64\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): 1.8.0 RC-0 (zip)\nPython version: 3.6.4\nBazel version (if compiling from source): 0.12.0-1.fc27\nGCC/Compiler version (if compiling from source): 6.4.0-6\nCUDA/cuDNN version: 9.1 / 7.0.5.15-3.fc27\nGPU model and memory: GTX 1060\nExact command to reproduce: $ bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package \n\nDescribe the problem\nI get nearly 6k files into the build and it fails with:\nINFO: From Compiling tensorflow/core/kernels/eye_functor_gpu.cu.cc [for host]:\n/usr/include/bits/floatn.h(61): error: invalid argument to attribute \"__mode__\"\n/usr/include/bits/floatn.h(73): error: identifier \"__float128\" is undefined\n\nAdd \"#define _BITS_FLOATN_H\" to cuda/host_defines.h, and build again.\nGets further but fails at:\nINFO: From Compiling tensorflow/core/kernels/eye_functor_gpu.cu.cc:\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:248:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<int, int, int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible<_Elements, _UElements&&>'\n       return __and_<is_constructible<_Elements, _UElements&&>...>::value;\n                                                                   ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:362:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<int, int, int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible<_UElements&&, _Elements>'\n       return __and_<is_convertible<_UElements&&, _Elements>...>::value;\n                                                                 ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<int, int, int>&; bool <anonymous> = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:662:419:   required by substitution of 'template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(const std::tuple<_Args1 ...>&) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> = <missing>]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:495:244: error: wrong number of template arguments (4, should be 2)\n       return  __and_<__not_<is_same<tuple<_Elements...>,\n                                                                                                                                                                                                                                                    ^    \n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/type_traits:1558:8: note: provided for 'template<class _From, class _To> struct std::is_convertible'\n     struct is_convertible\n        ^~~~~~~~~~~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<int, int, int>&; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:248:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<int, int, int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible<_Elements, _UElements&&>'\n       return __and_<is_constructible<_Elements, _UElements&&>...>::value;\n                                                                   ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:362:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<int, int, int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible<_UElements&&, _Elements>'\n       return __and_<is_convertible<_UElements&&, _Elements>...>::value;\n                                                                 ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<int, int, int>&&; bool <anonymous> = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:686:422:   required by substitution of 'template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(std::tuple<_Args1 ...>&&) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> = <missing>]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:495:244: error: wrong number of template arguments (4, should be 2)\n       return  __and_<__not_<is_same<tuple<_Elements...>,\n                                                                                                                                                                                                                                                    ^    \n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/type_traits:1558:8: note: provided for 'template<class _From, class _To> struct std::is_convertible'\n     struct is_convertible\n        ^~~~~~~~~~~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<int, int, int>&&; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\nERROR: /home/torstein/progs/tensorflow-1.8.0-rc0/tensorflow/core/kernels/BUILD:1864:1: output 'tensorflow/core/kernels/_objs/eye_functor_gpu/tensorflow/core/kernels/eye_functor_gpu.cu.o' was not created\nERROR: /home/torstein/progs/tensorflow-1.8.0-rc0/tensorflow/core/kernels/BUILD:1864:1: not all outputs were created or valid\nTarget //tensorflow/tools/pip_package:build_pip_package failed to build\nUse --verbose_failures to see the command lines of failed build steps.\nINFO: Elapsed time: 48.261s, Critical Path: 33.18s\nFAILED: Build did NOT complete successfully\n\nBuild conf:\nbuild --action_env PYTHON_BIN_PATH=\"/usr/bin/python3\"\nbuild --action_env PYTHON_LIB_PATH=\"/usr/local/lib64/python3.6/site-packages\"\nbuild --force_python=py3\nbuild --host_force_python=py3\nbuild --python_path=\"/usr/bin/python3\"\nbuild --define with_jemalloc=true\nbuild:gcp --define with_gcp_support=true\nbuild:hdfs --define with_hdfs_support=true\nbuild:s3 --define with_s3_support=true\nbuild:kafka --define with_kafka_support=true\nbuild:xla --define with_xla_support=true\nbuild:gdr --define with_gdr_support=true\nbuild:verbs --define with_verbs_support=true\nbuild --action_env TF_NEED_OPENCL_SYCL=\"0\"\nbuild --action_env TF_NEED_CUDA=\"1\"\nbuild --action_env CUDA_TOOLKIT_PATH=\"/usr\"\nbuild --action_env TF_CUDA_VERSION=\"9.1\"\nbuild --action_env CUDNN_INSTALL_PATH=\"/usr\"\nbuild --action_env TF_CUDNN_VERSION=\"7\"\nbuild --action_env TF_NCCL_VERSION=\"2\"\nbuild --action_env TF_CUDA_COMPUTE_CAPABILITIES=\"6.1\"\nbuild --action_env LD_LIBRARY_PATH=\"/usr/include/cuda:/usr/include:/usr:/usr/lib64:/usr/include/cuda:/usr:/usr/include\"\nbuild --action_env TF_CUDA_CLANG=\"0\"\nbuild --action_env GCC_HOST_COMPILER_PATH=\"/usr/bin/cuda-gcc\"\nbuild --config=cuda\ntest --config=cuda\nbuild --define grpc_no_ares=true\nbuild:opt --copt=-march=native\nbuild:opt --host_copt=-march=native\nbuild:opt --define with_default_optimizations=true\nbuild --copt=-DGEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK\nbuild --host_copt=-DGEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK\n\nSame error happens on master branch.\nIf I add the build flag --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\", it fails at different place:\nINFO: From Compiling tensorflow/core/kernels/spacetodepth_op_gpu.cu.cc:\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:248:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<int, int, int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible<_Elements, _UElements&&>'\n       return __and_<is_constructible<_Elements, _UElements&&>...>::value;\n                                                                   ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:362:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<int, int, int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible<_UElements&&, _Elements>'\n       return __and_<is_convertible<_UElements&&, _Elements>...>::value;\n                                                                 ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<int, int, int>&; bool <anonymous> = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:662:419:   required by substitution of 'template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(const std::tuple<_Args1 ...>&) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> = <missing>]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:495:244: error: wrong number of template arguments (4, should be 2)\n       return  __and_<__not_<is_same<tuple<_Elements...>,\n                                                                                                                                                                                                                                                    ^    \n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/type_traits:1558:8: note: provided for 'template<class _From, class _To> struct std::is_convertible'\n     struct is_convertible\n        ^~~~~~~~~~~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<int, int, int>&; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:248:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<int, int, int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible<_Elements, _UElements&&>'\n       return __and_<is_constructible<_Elements, _UElements&&>...>::value;\n                                                                   ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:362:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<int, int, int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible<_UElements&&, _Elements>'\n       return __and_<is_convertible<_UElements&&, _Elements>...>::value;\n                                                                 ^~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<int, int, int>&&; bool <anonymous> = true; _Elements = {int, int, int}]':\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:686:422:   required by substitution of 'template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(std::tuple<_Args1 ...>&&) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> = <missing>]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:495:244: error: wrong number of template arguments (4, should be 2)\n       return  __and_<__not_<is_same<tuple<_Elements...>,\n                                                                                                                                                                                                                                                    ^    \n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/type_traits:1558:8: note: provided for 'template<class _From, class _To> struct std::is_convertible'\n     struct is_convertible\n        ^~~~~~~~~~~~~~\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<int, int, int>&&; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\n     }\n ^\nERROR: /home/torstein/progs/tensorflow-1.8.0-rc0/tensorflow/core/kernels/BUILD:3659:1: output 'tensorflow/core/kernels/_objs/depth_space_ops_gpu/tensorflow/core/kernels/spacetodepth_op_gpu.cu.o' was not created\nERROR: /home/torstein/progs/tensorflow-1.8.0-rc0/tensorflow/core/kernels/BUILD:3659:1: not all outputs were created or valid\nTarget //tensorflow/tools/pip_package:build_pip_package failed to build\nUse --verbose_failures to see the command lines of failed build steps.\nINFO: Elapsed time: 111.410s, Critical Path: 35.53s\nFAILED: Build did NOT complete successfully", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: N/A\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Fedora 27 x64\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: 1.8.0 RC-0 (zip)\r\n- **Python version**: 3.6.4\r\n- **Bazel version (if compiling from source)**: 0.12.0-1.fc27\r\n- **GCC/Compiler version (if compiling from source)**: 6.4.0-6\r\n- **CUDA/cuDNN version**: 9.1 / 7.0.5.15-3.fc27\r\n- **GPU model and memory**: GTX 1060\r\n- **Exact command to reproduce**: `$ bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package `\r\n\r\n### Describe the problem\r\nI get nearly 6k files into the build and it fails with:\r\n```\r\nINFO: From Compiling tensorflow/core/kernels/eye_functor_gpu.cu.cc [for host]:\r\n/usr/include/bits/floatn.h(61): error: invalid argument to attribute \"__mode__\"\r\n/usr/include/bits/floatn.h(73): error: identifier \"__float128\" is undefined\r\n```\r\nAdd `\"#define _BITS_FLOATN_H\"` to `cuda/host_defines.h`, and build again.\r\nGets further but fails at:\r\n```\r\nINFO: From Compiling tensorflow/core/kernels/eye_functor_gpu.cu.cc:\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:248:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<int, int, int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\r\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible<_Elements, _UElements&&>'\r\n       return __and_<is_constructible<_Elements, _UElements&&>...>::value;\r\n                                                                   ^~~~~\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n     }\r\n ^\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:362:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<int, int, int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\r\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible<_UElements&&, _Elements>'\r\n       return __and_<is_convertible<_UElements&&, _Elements>...>::value;\r\n                                                                 ^~~~~\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n     }\r\n ^\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<int, int, int>&; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:662:419:   required by substitution of 'template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(const std::tuple<_Args1 ...>&) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> = <missing>]'\r\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:495:244: error: wrong number of template arguments (4, should be 2)\r\n       return  __and_<__not_<is_same<tuple<_Elements...>,\r\n                                                                                                                                                                                                                                                    ^    \r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/type_traits:1558:8: note: provided for 'template<class _From, class _To> struct std::is_convertible'\r\n     struct is_convertible\r\n        ^~~~~~~~~~~~~~\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<int, int, int>&; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n     }\r\n ^\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:248:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<int, int, int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\r\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible<_Elements, _UElements&&>'\r\n       return __and_<is_constructible<_Elements, _UElements&&>...>::value;\r\n                                                                   ^~~~~\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n     }\r\n ^\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:362:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<int, int, int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\r\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible<_UElements&&, _Elements>'\r\n       return __and_<is_convertible<_UElements&&, _Elements>...>::value;\r\n                                                                 ^~~~~\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n     }\r\n ^\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<int, int, int>&&; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:686:422:   required by substitution of 'template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(std::tuple<_Args1 ...>&&) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> = <missing>]'\r\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:495:244: error: wrong number of template arguments (4, should be 2)\r\n       return  __and_<__not_<is_same<tuple<_Elements...>,\r\n                                                                                                                                                                                                                                                    ^    \r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/type_traits:1558:8: note: provided for 'template<class _From, class _To> struct std::is_convertible'\r\n     struct is_convertible\r\n        ^~~~~~~~~~~~~~\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<int, int, int>&&; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n     }\r\n ^\r\nERROR: /home/torstein/progs/tensorflow-1.8.0-rc0/tensorflow/core/kernels/BUILD:1864:1: output 'tensorflow/core/kernels/_objs/eye_functor_gpu/tensorflow/core/kernels/eye_functor_gpu.cu.o' was not created\r\nERROR: /home/torstein/progs/tensorflow-1.8.0-rc0/tensorflow/core/kernels/BUILD:1864:1: not all outputs were created or valid\r\nTarget //tensorflow/tools/pip_package:build_pip_package failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 48.261s, Critical Path: 33.18s\r\nFAILED: Build did NOT complete successfully\r\n```\r\n\r\nBuild conf:\r\n```\r\nbuild --action_env PYTHON_BIN_PATH=\"/usr/bin/python3\"\r\nbuild --action_env PYTHON_LIB_PATH=\"/usr/local/lib64/python3.6/site-packages\"\r\nbuild --force_python=py3\r\nbuild --host_force_python=py3\r\nbuild --python_path=\"/usr/bin/python3\"\r\nbuild --define with_jemalloc=true\r\nbuild:gcp --define with_gcp_support=true\r\nbuild:hdfs --define with_hdfs_support=true\r\nbuild:s3 --define with_s3_support=true\r\nbuild:kafka --define with_kafka_support=true\r\nbuild:xla --define with_xla_support=true\r\nbuild:gdr --define with_gdr_support=true\r\nbuild:verbs --define with_verbs_support=true\r\nbuild --action_env TF_NEED_OPENCL_SYCL=\"0\"\r\nbuild --action_env TF_NEED_CUDA=\"1\"\r\nbuild --action_env CUDA_TOOLKIT_PATH=\"/usr\"\r\nbuild --action_env TF_CUDA_VERSION=\"9.1\"\r\nbuild --action_env CUDNN_INSTALL_PATH=\"/usr\"\r\nbuild --action_env TF_CUDNN_VERSION=\"7\"\r\nbuild --action_env TF_NCCL_VERSION=\"2\"\r\nbuild --action_env TF_CUDA_COMPUTE_CAPABILITIES=\"6.1\"\r\nbuild --action_env LD_LIBRARY_PATH=\"/usr/include/cuda:/usr/include:/usr:/usr/lib64:/usr/include/cuda:/usr:/usr/include\"\r\nbuild --action_env TF_CUDA_CLANG=\"0\"\r\nbuild --action_env GCC_HOST_COMPILER_PATH=\"/usr/bin/cuda-gcc\"\r\nbuild --config=cuda\r\ntest --config=cuda\r\nbuild --define grpc_no_ares=true\r\nbuild:opt --copt=-march=native\r\nbuild:opt --host_copt=-march=native\r\nbuild:opt --define with_default_optimizations=true\r\nbuild --copt=-DGEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK\r\nbuild --host_copt=-DGEMMLOWP_ALLOW_SLOW_SCALAR_FALLBACK\r\n```\r\nSame error happens on master branch.\r\n\r\nIf I add the build flag `--cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\"`, it fails at different place:\r\n```\r\nINFO: From Compiling tensorflow/core/kernels/spacetodepth_op_gpu.cu.cc:\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:248:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<int, int, int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\r\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible<_Elements, _UElements&&>'\r\n       return __and_<is_constructible<_Elements, _UElements&&>...>::value;\r\n                                                                   ^~~~~\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n     }\r\n ^\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:362:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<int, int, int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\r\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible<_UElements&&, _Elements>'\r\n       return __and_<is_convertible<_UElements&&, _Elements>...>::value;\r\n                                                                 ^~~~~\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n     }\r\n ^\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<int, int, int>&; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:662:419:   required by substitution of 'template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(const std::tuple<_Args1 ...>&) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> = <missing>]'\r\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:495:244: error: wrong number of template arguments (4, should be 2)\r\n       return  __and_<__not_<is_same<tuple<_Elements...>,\r\n                                                                                                                                                                                                                                                    ^    \r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/type_traits:1558:8: note: provided for 'template<class _From, class _To> struct std::is_convertible'\r\n     struct is_convertible\r\n        ^~~~~~~~~~~~~~\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<int, int, int>&; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n     }\r\n ^\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:248:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<int, int, int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\r\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible<_Elements, _UElements&&>'\r\n       return __and_<is_constructible<_Elements, _UElements&&>...>::value;\r\n                                                                   ^~~~~\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n     }\r\n ^\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:626:362:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<int, int, int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\r\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible<_UElements&&, _Elements>'\r\n       return __and_<is_convertible<_UElements&&, _Elements>...>::value;\r\n                                                                 ^~~~~\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n     }\r\n ^\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<int, int, int>&&; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:686:422:   required by substitution of 'template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(std::tuple<_Args1 ...>&&) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> = <missing>]'\r\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:495:244: error: wrong number of template arguments (4, should be 2)\r\n       return  __and_<__not_<is_same<tuple<_Elements...>,\r\n                                                                                                                                                                                                                                                    ^    \r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/type_traits:1558:8: note: provided for 'template<class _From, class _To> struct std::is_convertible'\r\n     struct is_convertible\r\n        ^~~~~~~~~~~~~~\r\n/usr/lib64/gcc/x86_64-redhat-linux/6.4.0/include/c++/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<int, int, int>&&; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n     }\r\n ^\r\nERROR: /home/torstein/progs/tensorflow-1.8.0-rc0/tensorflow/core/kernels/BUILD:3659:1: output 'tensorflow/core/kernels/_objs/depth_space_ops_gpu/tensorflow/core/kernels/spacetodepth_op_gpu.cu.o' was not created\r\nERROR: /home/torstein/progs/tensorflow-1.8.0-rc0/tensorflow/core/kernels/BUILD:3659:1: not all outputs were created or valid\r\nTarget //tensorflow/tools/pip_package:build_pip_package failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 111.410s, Critical Path: 35.53s\r\nFAILED: Build did NOT complete successfully\r\n```\r\n"}