{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/103810351", "pull_request_review_id": 24612101, "id": 103810351, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMzgxMDM1MQ==", "diff_hunk": "@@ -0,0 +1,107 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#ifndef TENSORFLOW_CORE_COMMON_RUNTIME_MKL_LAYER_REGISTRY_H_\n+#define TENSORFLOW_CORE_COMMON_RUNTIME_MKL_LAYER_REGISTRY_H_\n+\n+#ifdef INTEL_MKL\n+\n+#include <set>\n+#include <map>\n+#include <utility>\n+#include <string>\n+\n+#include \"tensorflow/core/framework/types.pb.h\"\n+\n+namespace tensorflow {\n+\n+// A global MKLLayerRegistry is used to hold information about all MKL-compliant\n+// layers. Registry maintains information about <opname,T> pair supported\n+// by MKL API.\n+class MklLayerRegistry {\n+ public:\n+  // Add an optimization pass to the registry.\n+  // Registration is done based on opname supported by a layer.\n+  //\n+  // @input: name of the MKL-compliant op\n+  // @input: Data type of the MKL-compliant op\n+  // @return: none.\n+  void Register(const std::string& opname, DataType T);\n+\n+  // Check whether opname is registered as MKL-compliant in the registry.\n+  //\n+  // @input: name of the op\n+  // @input: datatype of the op\n+  // @return: true if opname along with datatype is registered\n+  // as MKL-compliant; false otherwise.\n+  bool Find(const std::string& opname, DataType T) const;\n+\n+  // Clear whole registry. Mostly used for unit test.\n+  // @input: None\n+  // @return: None\n+  void Clear(void);\n+\n+  // Returns the global registry of MKL layers\n+  static MklLayerRegistry* Instance();\n+\n+ private:\n+  /// map to hold op names and the supported types for compliant layers\n+  std::map<string, std::set<DataType>> mkl_layer_ops_;\n+  /// Only single registry for MKL registration\n+  static MklLayerRegistry* mkl_layer_registry_;\n+\n+ private:\n+  // Private constructor - for singleton pattern\n+  MklLayerRegistry() {}\n+\n+  TF_DISALLOW_COPY_AND_ASSIGN(MklLayerRegistry);\n+};\n+\n+// Helper class to allow us to register MKL layers from ops\n+class MklLayerRegistrar {\n+ public:\n+  MklLayerRegistrar(const std::string& opname, DataType T) {\n+    MklLayerRegistry::Instance()->Register(opname, T);\n+  }\n+};\n+\n+///////////////////////////////////////////////////////////\n+//           Public interface for registration\n+///////////////////////////////////////////////////////////\n+\n+// We do not need any types other than half, float, and double for MKL for now.\n+#define REGISTER_MKL_LAYER_half(opname)                                 \\\n+  REGISTER_MKL_LAYER_UNIQ_HELPER(__COUNTER__, std::string(opname), DT_DOUBLE)", "path": "tensorflow/core/common_runtime/mkl_layer_registry.h", "position": null, "original_position": 86, "commit_id": "25290780329e3e95d76357d12fafc9cf54b1f7ba", "original_commit_id": "835f8a53c1598bb5efdc60c858165bc0f7724f81", "user": {"login": "andydavis1", "id": 15696327, "node_id": "MDQ6VXNlcjE1Njk2MzI3", "avatar_url": "https://avatars0.githubusercontent.com/u/15696327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andydavis1", "html_url": "https://github.com/andydavis1", "followers_url": "https://api.github.com/users/andydavis1/followers", "following_url": "https://api.github.com/users/andydavis1/following{/other_user}", "gists_url": "https://api.github.com/users/andydavis1/gists{/gist_id}", "starred_url": "https://api.github.com/users/andydavis1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andydavis1/subscriptions", "organizations_url": "https://api.github.com/users/andydavis1/orgs", "repos_url": "https://api.github.com/users/andydavis1/repos", "events_url": "https://api.github.com/users/andydavis1/events{/privacy}", "received_events_url": "https://api.github.com/users/andydavis1/received_events", "type": "User", "site_admin": false}, "body": "Did you intend to put DT_HALF here?", "created_at": "2017-03-01T22:49:32Z", "updated_at": "2017-03-09T00:23:24Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/7937#discussion_r103810351", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7937", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/103810351"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/7937#discussion_r103810351"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7937"}}, "body_html": "<p>Did you intend to put DT_HALF here?</p>", "body_text": "Did you intend to put DT_HALF here?"}