{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/147540115", "pull_request_review_id": 72656642, "id": 147540115, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzU0MDExNQ==", "diff_hunk": "@@ -1917,6 +1919,64 @@ def f2(): return tf.add(y, 23)\n # pylint: enable=g-doc-args\n \n \n+def smart_cond(pred, true_fn=None, false_fn=None, name=None):\n+  \"\"\"Return either `true_fn()` if predicate `pred` is true else `false_fn()`.\n+\n+  If `pred` is a bool or has a constant value, we return either `true_fn()`\n+  or `false_fn()`, otherwise we use `tf.cond` to dynamically route to both.\n+\n+  Arguments:\n+    pred: A scalar determining whether to return the result of `true_fn` or\n+      `false_fn`.\n+    true_fn: The callable to be performed if pred is true.\n+    false_fn: The callable to be performed if pred is false.\n+    name: Optional name prefix when using `tf.cond`.\n+\n+  Returns:\n+    Tensors returned by the call to either `true_fn` or `false_fn`.\n+\n+  Raises:\n+    TypeError: If `true_fn` or `false_fn` is not callable.\n+  \"\"\"\n+  if not callable(true_fn):\n+    raise TypeError('`true_fn` must be callable.')\n+  if not callable(false_fn):\n+    raise TypeError('`false_fn` must be callable.')\n+\n+  pred_value = constant_value(pred)\n+  if pred_value is not None:\n+    if pred_value:\n+      return true_fn()\n+    else:\n+      return false_fn()\n+  else:\n+    return cond(pred, true_fn=true_fn, false_fn=false_fn, name=name)\n+\n+\n+def constant_value(pred):\n+  \"\"\"Return the bool value for `pred`, or None if `pred` had a dynamic value.\n+\n+  Arguments:\n+    pred: A scalar, either a Python bool or a TensorFlow boolean variable\n+      or tensor.\n+\n+  Returns:\n+    True or False if `pred` has a constant boolean value, None otherwise.\n+\n+  Raises:\n+    TypeError: If `pred` is not a Variable, Tensor or bool.\n+  \"\"\"\n+  if isinstance(pred, bool):\n+    pred_value = pred\n+  elif isinstance(pred, variables.Variable):\n+    pred_value = None\n+  elif isinstance(pred, ops.Tensor):", "path": "tensorflow/python/ops/control_flow_ops.py", "position": null, "original_position": 71, "commit_id": "8d792ce5c4e8ac8bc13d09ab9e3e2f6bc0148a0c", "original_commit_id": "eea791330a729f7a42a785502bdc96dc2200290f", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "call this smart_constant_value and add it to tf.contrib.framework?", "created_at": "2017-10-28T00:27:34Z", "updated_at": "2018-02-16T01:14:22Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13954#discussion_r147540115", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13954", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/147540115"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13954#discussion_r147540115"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13954"}}, "body_html": "<p>call this smart_constant_value and add it to tf.contrib.framework?</p>", "body_text": "call this smart_constant_value and add it to tf.contrib.framework?"}