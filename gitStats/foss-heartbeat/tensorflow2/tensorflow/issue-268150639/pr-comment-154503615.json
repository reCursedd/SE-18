{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154503615", "pull_request_review_id": 80681860, "id": 154503615, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDUwMzYxNQ==", "diff_hunk": "@@ -178,61 +178,46 @@ def deconv_output_length(input_length, filter_size, padding, stride):\n   return input_length\n \n \n-def smart_cond(pred, fn1, fn2, name=None):\n-  \"\"\"Return either `fn1()` or `fn2()` based on the boolean predicate `pred`.\n+def smart_cond(pred, true_fn=None, false_fn=None, name=None):\n+  \"\"\"Return either `true_fn()` if predicate `pred` is true else `false_fn()`.\n \n-  If `pred` is a bool or has a constant value, we return either `fn1()`\n-  or `fn2()`, otherwise we use `tf.cond` to dynamically route to both.\n+  If `pred` is a bool or has a constant value, we return either `true_fn()`\n+  or `false_fn()`, otherwise we use `tf.cond` to dynamically route to both.\n \n   Arguments:\n-    pred: A scalar determining whether to return the result of `fn1` or `fn2`.\n-    fn1: The callable to be performed if pred is true.\n-    fn2: The callable to be performed if pred is false.\n+    pred: A scalar determining whether to return the result of `true_fn` or\n+      `false_fn`.\n+    true_fn: The callable to be performed if pred is true.\n+    false_fn: The callable to be performed if pred is false.\n     name: Optional name prefix when using `tf.cond`.\n \n   Returns:\n-    Tensors returned by the call to either `fn1` or `fn2`.\n+    Tensors returned by the call to either `true_fn` or `false_fn`.\n \n   Raises:\n-    TypeError: If `fn1` or `fn2` is not callable.\n+    TypeError: If `true_fn` or `false_fn` is not callable.\n   \"\"\"\n-  if not callable(fn1):\n-    raise TypeError('`fn1` must be callable.')\n-  if not callable(fn2):\n-    raise TypeError('`fn2` must be callable.')\n-\n-  pred_value = constant_value(pred)\n-  if pred_value is not None:\n-    if pred_value:\n-      return fn1()\n-    else:\n-      return fn2()\n-  else:\n-    return control_flow_ops.cond(pred, fn1, fn2, name)\n+  if isinstance(pred, variables.Variable):\n+    return control_flow_ops.cond(pred, true_fn=true_fn, false_fn=false_fn, name=name)\n+  return control_flow_ops.smart_cond(pred, true_fn=true_fn, false_fn=false_fn, name=name)", "path": "tensorflow/python/layers/utils.py", "position": null, "original_position": 47, "commit_id": "8d792ce5c4e8ac8bc13d09ab9e3e2f6bc0148a0c", "original_commit_id": "90aaa626138c3b8dc37bbfa60b90b1614e83dd9f", "user": {"login": "GeorgyZhou", "id": 21117844, "node_id": "MDQ6VXNlcjIxMTE3ODQ0", "avatar_url": "https://avatars2.githubusercontent.com/u/21117844?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GeorgyZhou", "html_url": "https://github.com/GeorgyZhou", "followers_url": "https://api.github.com/users/GeorgyZhou/followers", "following_url": "https://api.github.com/users/GeorgyZhou/following{/other_user}", "gists_url": "https://api.github.com/users/GeorgyZhou/gists{/gist_id}", "starred_url": "https://api.github.com/users/GeorgyZhou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GeorgyZhou/subscriptions", "organizations_url": "https://api.github.com/users/GeorgyZhou/orgs", "repos_url": "https://api.github.com/users/GeorgyZhou/repos", "events_url": "https://api.github.com/users/GeorgyZhou/events{/privacy}", "received_events_url": "https://api.github.com/users/GeorgyZhou/received_events", "type": "User", "site_admin": false}, "body": "@sguada That is to say, `tensorflow/python/ops/variables.py` is using `cond` function of `tensorflow/python/ops/control_flow_ops.py`. If we do need consider using `Variables` class of `variables.py` in `control_flow_ops.py`. We may consider two solutions without circular dependencies:\r\n1. Move `smart_cond` to some other places that's not depended by `tensorflow/python/ops/variables.py` and do that inclusion.\r\n2. Just import that specific class `Variables` from `/tensorflow/python/ops.variables.py`\r\n\r\nOtherwise, I think current version can at least work well with the demands of #13903. Let me know what you think is right and I will go for implementing that.", "created_at": "2017-12-02T18:48:54Z", "updated_at": "2018-02-16T01:14:22Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13954#discussion_r154503615", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13954", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154503615"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13954#discussion_r154503615"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13954"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1766524\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sguada\">@sguada</a> That is to say, <code>tensorflow/python/ops/variables.py</code> is using <code>cond</code> function of <code>tensorflow/python/ops/control_flow_ops.py</code>. If we do need consider using <code>Variables</code> class of <code>variables.py</code> in <code>control_flow_ops.py</code>. We may consider two solutions without circular dependencies:</p>\n<ol>\n<li>Move <code>smart_cond</code> to some other places that's not depended by <code>tensorflow/python/ops/variables.py</code> and do that inclusion.</li>\n<li>Just import that specific class <code>Variables</code> from <code>/tensorflow/python/ops.variables.py</code></li>\n</ol>\n<p>Otherwise, I think current version can at least work well with the demands of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"267472076\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/13903\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/13903/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/13903\">#13903</a>. Let me know what you think is right and I will go for implementing that.</p>", "body_text": "@sguada That is to say, tensorflow/python/ops/variables.py is using cond function of tensorflow/python/ops/control_flow_ops.py. If we do need consider using Variables class of variables.py in control_flow_ops.py. We may consider two solutions without circular dependencies:\n\nMove smart_cond to some other places that's not depended by tensorflow/python/ops/variables.py and do that inclusion.\nJust import that specific class Variables from /tensorflow/python/ops.variables.py\n\nOtherwise, I think current version can at least work well with the demands of #13903. Let me know what you think is right and I will go for implementing that.", "in_reply_to_id": 153389927}