{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/356816371", "html_url": "https://github.com/tensorflow/tensorflow/issues/14699#issuecomment-356816371", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14699", "id": 356816371, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjgxNjM3MQ==", "user": {"login": "Multihuntr", "id": 10515040, "node_id": "MDQ6VXNlcjEwNTE1MDQw", "avatar_url": "https://avatars2.githubusercontent.com/u/10515040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Multihuntr", "html_url": "https://github.com/Multihuntr", "followers_url": "https://api.github.com/users/Multihuntr/followers", "following_url": "https://api.github.com/users/Multihuntr/following{/other_user}", "gists_url": "https://api.github.com/users/Multihuntr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Multihuntr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Multihuntr/subscriptions", "organizations_url": "https://api.github.com/users/Multihuntr/orgs", "repos_url": "https://api.github.com/users/Multihuntr/repos", "events_url": "https://api.github.com/users/Multihuntr/events{/privacy}", "received_events_url": "https://api.github.com/users/Multihuntr/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-11T03:47:17Z", "updated_at": "2018-01-11T03:52:10Z", "author_association": "NONE", "body_html": "<p>Ah, that's actually a fairly general workaround. Instead of adding ops to the UPDATE_OPS, you enforce that it must be completed before getting the output of your branch in the <code>tf.cond</code>.</p>\n<p>So the workaround to the OPs problem is to rewrite their <code>myfunc2</code> as follows:</p>\n<pre><code>  def myfunc2():\n      with tf.control_dependencies([count.assign_add(10.0)]):\n        return 1\n</code></pre>\n<p>P.S. Sorry for triple post</p>", "body_text": "Ah, that's actually a fairly general workaround. Instead of adding ops to the UPDATE_OPS, you enforce that it must be completed before getting the output of your branch in the tf.cond.\nSo the workaround to the OPs problem is to rewrite their myfunc2 as follows:\n  def myfunc2():\n      with tf.control_dependencies([count.assign_add(10.0)]):\n        return 1\n\nP.S. Sorry for triple post", "body": "Ah, that's actually a fairly general workaround. Instead of adding ops to the UPDATE_OPS, you enforce that it must be completed before getting the output of your branch in the `tf.cond`.\r\n\r\nSo the workaround to the OPs problem is to rewrite their `myfunc2` as follows:\r\n\r\n```\r\n  def myfunc2():\r\n      with tf.control_dependencies([count.assign_add(10.0)]):\r\n        return 1\r\n```\r\n\r\nP.S. Sorry for triple post"}