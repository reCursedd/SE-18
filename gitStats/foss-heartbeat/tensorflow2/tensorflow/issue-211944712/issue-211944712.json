{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8100", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8100/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8100/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8100/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8100", "id": 211944712, "node_id": "MDU6SXNzdWUyMTE5NDQ3MTI=", "number": 8100, "title": "XLA Design :: Incorporate Polyhedral Compilation (through LLVM Polly).", "user": {"login": "annanay25", "id": 10982987, "node_id": "MDQ6VXNlcjEwOTgyOTg3", "avatar_url": "https://avatars2.githubusercontent.com/u/10982987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/annanay25", "html_url": "https://github.com/annanay25", "followers_url": "https://api.github.com/users/annanay25/followers", "following_url": "https://api.github.com/users/annanay25/following{/other_user}", "gists_url": "https://api.github.com/users/annanay25/gists{/gist_id}", "starred_url": "https://api.github.com/users/annanay25/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/annanay25/subscriptions", "organizations_url": "https://api.github.com/users/annanay25/orgs", "repos_url": "https://api.github.com/users/annanay25/repos", "events_url": "https://api.github.com/users/annanay25/events{/privacy}", "received_events_url": "https://api.github.com/users/annanay25/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 30, "created_at": "2017-03-05T10:43:50Z", "updated_at": "2018-02-08T01:01:22Z", "closed_at": "2018-02-08T01:01:22Z", "author_association": "NONE", "body_html": "<p>Polyhedral Compilation is a method of modeling iterations of loop nests into points on a multidimensional space (Determined by the loop nest depth). A detailed description can be found on the website as given <a href=\"http://polyhedral.info/\" rel=\"nofollow\">here</a>.</p>\n<p>Is it possible to pass the deeply nested kernels (for-loops) modeled in TensorFlow via XLA-JIT (or independently) through <a href=\"http://polly.llvm.org/\" rel=\"nofollow\">Polly</a> that will extract dependence information and perform scheduling using Polyhedral compilation? Tensorflow Ops can be reproduced and modeled to basic math operators and can be applied to points on the Integer Polyhedra.</p>\n<p>This can lead to significant speedup in program execution. However, since Polyhedral compilation can be expensive, it can lead to increase in compile time. (Trade-off in compile time)</p>\n<p>I am a student working on Polyhedral Compilation and would love to contribute to this if it spans out!</p>", "body_text": "Polyhedral Compilation is a method of modeling iterations of loop nests into points on a multidimensional space (Determined by the loop nest depth). A detailed description can be found on the website as given here.\nIs it possible to pass the deeply nested kernels (for-loops) modeled in TensorFlow via XLA-JIT (or independently) through Polly that will extract dependence information and perform scheduling using Polyhedral compilation? Tensorflow Ops can be reproduced and modeled to basic math operators and can be applied to points on the Integer Polyhedra.\nThis can lead to significant speedup in program execution. However, since Polyhedral compilation can be expensive, it can lead to increase in compile time. (Trade-off in compile time)\nI am a student working on Polyhedral Compilation and would love to contribute to this if it spans out!", "body": "Polyhedral Compilation is a method of modeling iterations of loop nests into points on a multidimensional space (Determined by the loop nest depth). A detailed description can be found on the website as given [here](http://polyhedral.info/).\r\n\r\nIs it possible to pass the deeply nested kernels (for-loops) modeled in TensorFlow via XLA-JIT (or independently) through [Polly](http://polly.llvm.org/) that will extract dependence information and perform scheduling using Polyhedral compilation? Tensorflow Ops can be reproduced and modeled to basic math operators and can be applied to points on the Integer Polyhedra. \r\n\r\nThis can lead to significant speedup in program execution. However, since Polyhedral compilation can be expensive, it can lead to increase in compile time. (Trade-off in compile time)\r\n\r\nI am a student working on Polyhedral Compilation and would love to contribute to this if it spans out!"}