{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/302421728", "html_url": "https://github.com/tensorflow/tensorflow/issues/9742#issuecomment-302421728", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9742", "id": 302421728, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjQyMTcyOA==", "user": {"login": "sirfz", "id": 4741099, "node_id": "MDQ6VXNlcjQ3NDEwOTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4741099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sirfz", "html_url": "https://github.com/sirfz", "followers_url": "https://api.github.com/users/sirfz/followers", "following_url": "https://api.github.com/users/sirfz/following{/other_user}", "gists_url": "https://api.github.com/users/sirfz/gists{/gist_id}", "starred_url": "https://api.github.com/users/sirfz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sirfz/subscriptions", "organizations_url": "https://api.github.com/users/sirfz/orgs", "repos_url": "https://api.github.com/users/sirfz/repos", "events_url": "https://api.github.com/users/sirfz/events{/privacy}", "received_events_url": "https://api.github.com/users/sirfz/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-18T14:31:37Z", "updated_at": "2017-05-18T14:31:58Z", "author_association": "NONE", "body_html": "<p>Thanks for the suggestion <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a>, sounds fair enough (and worth it given the significant memory/performance improvement).</p>\n<p>Not sure it's worth it to look into the difference between the environments given that I found the main bottleneck now which is in the protobuf serialization. For what it's worth the protobuf implementation type in my case is cpp.</p>\n<p>As for your last question, I already tested with <code>tf.random_normal_initializer</code> instead of <code>tf.constant_initializer</code> with a numpy array and there's no issue at all.</p>", "body_text": "Thanks for the suggestion @yaroslavvb, sounds fair enough (and worth it given the significant memory/performance improvement).\nNot sure it's worth it to look into the difference between the environments given that I found the main bottleneck now which is in the protobuf serialization. For what it's worth the protobuf implementation type in my case is cpp.\nAs for your last question, I already tested with tf.random_normal_initializer instead of tf.constant_initializer with a numpy array and there's no issue at all.", "body": "Thanks for the suggestion @yaroslavvb, sounds fair enough (and worth it given the significant memory/performance improvement).\r\n\r\nNot sure it's worth it to look into the difference between the environments given that I found the main bottleneck now which is in the protobuf serialization. For what it's worth the protobuf implementation type in my case is cpp.\r\n\r\nAs for your last question, I already tested with `tf.random_normal_initializer` instead of `tf.constant_initializer` with a numpy array and there's no issue at all."}