{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/302213459", "html_url": "https://github.com/tensorflow/tensorflow/issues/9742#issuecomment-302213459", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9742", "id": 302213459, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjIxMzQ1OQ==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-17T19:53:40Z", "updated_at": "2017-05-17T19:53:40Z", "author_association": "CONTRIBUTOR", "body_html": "<p><code>memory_util</code> only captures memory allocated by TF runtime, so this suggests the problem is elsewhere. Earlier you said that the extra memory comes from memory allocated by <code>MergePartialFromCodedStream</code> which could suggests that extra memory was allocated by protobuf library.</p>\n<p>Note that you are initializing your layers with huge constants. Those constants get serialized into GraphDef protobufs. There might be a bug somewhere which causes memory allocated by this serialization not to be freed.</p>\n<p>As a work-around, you could try not using constant nodes to initialize your variables. You can initialize them directly from numpy arrays by using tf.placeholder and providing value through feed_dict, for examples see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"227835602\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/9821\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/9821/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/9821\">#9821</a></p>", "body_text": "memory_util only captures memory allocated by TF runtime, so this suggests the problem is elsewhere. Earlier you said that the extra memory comes from memory allocated by MergePartialFromCodedStream which could suggests that extra memory was allocated by protobuf library.\nNote that you are initializing your layers with huge constants. Those constants get serialized into GraphDef protobufs. There might be a bug somewhere which causes memory allocated by this serialization not to be freed.\nAs a work-around, you could try not using constant nodes to initialize your variables. You can initialize them directly from numpy arrays by using tf.placeholder and providing value through feed_dict, for examples see #9821", "body": "`memory_util` only captures memory allocated by TF runtime, so this suggests the problem is elsewhere. Earlier you said that the extra memory comes from memory allocated by `MergePartialFromCodedStream` which could suggests that extra memory was allocated by protobuf library.\r\n\r\nNote that you are initializing your layers with huge constants. Those constants get serialized into GraphDef protobufs. There might be a bug somewhere which causes memory allocated by this serialization not to be freed.\r\n\r\nAs a work-around, you could try not using constant nodes to initialize your variables. You can initialize them directly from numpy arrays by using tf.placeholder and providing value through feed_dict, for examples see https://github.com/tensorflow/tensorflow/issues/9821"}