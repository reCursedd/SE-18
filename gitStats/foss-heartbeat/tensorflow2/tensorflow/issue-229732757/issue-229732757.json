{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10010", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10010/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10010/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10010/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10010", "id": 229732757, "node_id": "MDU6SXNzdWUyMjk3MzI3NTc=", "number": 10010, "title": "[Feature]: Bazel - Building TensorFlow with Polly-enabled-LLVM.", "user": {"login": "annanay25", "id": 10982987, "node_id": "MDQ6VXNlcjEwOTgyOTg3", "avatar_url": "https://avatars2.githubusercontent.com/u/10982987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/annanay25", "html_url": "https://github.com/annanay25", "followers_url": "https://api.github.com/users/annanay25/followers", "following_url": "https://api.github.com/users/annanay25/following{/other_user}", "gists_url": "https://api.github.com/users/annanay25/gists{/gist_id}", "starred_url": "https://api.github.com/users/annanay25/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/annanay25/subscriptions", "organizations_url": "https://api.github.com/users/annanay25/orgs", "repos_url": "https://api.github.com/users/annanay25/repos", "events_url": "https://api.github.com/users/annanay25/events{/privacy}", "received_events_url": "https://api.github.com/users/annanay25/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-18T16:26:34Z", "updated_at": "2017-05-19T10:26:57Z", "closed_at": "2017-05-19T10:26:57Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 14.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Source</li>\n<li><strong>TensorFlow version (use command below)</strong>: ('v1.0.0-1783-g4c3bb1a', '1.0.0')</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.4.5</li>\n<li><strong>CUDA/cuDNN version</strong>: -</li>\n<li><strong>GPU model and memory</strong>: -</li>\n<li><strong>Exact command to reproduce</strong>: <code>bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package</code></li>\n</ul>\n<h4>TensorFlow build:</h4>\n<p>Built from source.</p>\n<pre><code>$ git rev-parse HEAD\na33022c1470ce1334766b0cad38d9e91c17a2e5d\n</code></pre>\n<h3>Description:</h3>\n<p>This is a feature request.<br>\nAs part of my Google Summer of Code project, I am trying to build TensorFlow with Polly-enabled LLVM. To do this, I have been trying to port Opt and Polly to bazel. I tried placing this dummy rule at the end of the <a href=\"https://github.com/tensorflow/tensorflow/blob/master/third_party/llvm/llvm.BUILD\">llvm.BUILD</a> file.</p>\n<pre><code>cc_library(\n    name = \"opt\",\n    srcs = glob([\n        \"tools/opt/*.c\",\n        \"tools/opt/*.cpp\",\n        \"tools/opt/*.h\",\n    ]),     \n    hdrs = glob([\n        \"tools/opt/*.h\",\n    ]),     \n    copts = [\"-Iexternal/llvm/tools/opt\",\"-Iexternal/llvm/include\"],\n    deps = [\n        \":intrinsics_gen\",\n    ],\n)\n</code></pre>\n<p>But this does not seem to work. All the other targets defined in the file are building:</p>\n<pre><code>tensorflow/bazel-bin/external/llvm/_objs# ls\naarch64_asm_printer   arm_asm_printer   bit_reader            execution_engine  mc                 objc_arc              powerpc_info   transform_utils   x86_utils\naarch64_code_gen      arm_code_gen      bit_writer            global_i_sel      mc_disassembler    object                profile_data   vectorize\naarch64_desc          arm_desc          code_gen              inst_combine      mc_parser          orc_jit               runtime_dyld   x86_asm_printer\naarch64_disassembler  arm_disassembler  core                  instrumentation   nvptx_asm_printer  powerpc_asm_printer   scalar         x86_code_gen\naarch64_info          arm_info          debug_info_code_view  ipo               nvptx_code_gen     powerpc_code_gen      selection_dag  x86_desc\naarch64_utils         asm_parser        debug_info_msf        ir_reader         nvptx_desc         powerpc_desc          support        x86_disassembler\nanalysis              asm_printer       demangle              linker            nvptx_info         powerpc_disassembler  target         x86_info\n\n</code></pre>\n<p>I know that I have to define opt as a dependency in my build configuration. I can't see why this doesn't do the same.</p>\n<p>Thanks.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 14.04\nTensorFlow installed from (source or binary): Source\nTensorFlow version (use command below): ('v1.0.0-1783-g4c3bb1a', '1.0.0')\nBazel version (if compiling from source): 0.4.5\nCUDA/cuDNN version: -\nGPU model and memory: -\nExact command to reproduce: bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package\n\nTensorFlow build:\nBuilt from source.\n$ git rev-parse HEAD\na33022c1470ce1334766b0cad38d9e91c17a2e5d\n\nDescription:\nThis is a feature request.\nAs part of my Google Summer of Code project, I am trying to build TensorFlow with Polly-enabled LLVM. To do this, I have been trying to port Opt and Polly to bazel. I tried placing this dummy rule at the end of the llvm.BUILD file.\ncc_library(\n    name = \"opt\",\n    srcs = glob([\n        \"tools/opt/*.c\",\n        \"tools/opt/*.cpp\",\n        \"tools/opt/*.h\",\n    ]),     \n    hdrs = glob([\n        \"tools/opt/*.h\",\n    ]),     \n    copts = [\"-Iexternal/llvm/tools/opt\",\"-Iexternal/llvm/include\"],\n    deps = [\n        \":intrinsics_gen\",\n    ],\n)\n\nBut this does not seem to work. All the other targets defined in the file are building:\ntensorflow/bazel-bin/external/llvm/_objs# ls\naarch64_asm_printer   arm_asm_printer   bit_reader            execution_engine  mc                 objc_arc              powerpc_info   transform_utils   x86_utils\naarch64_code_gen      arm_code_gen      bit_writer            global_i_sel      mc_disassembler    object                profile_data   vectorize\naarch64_desc          arm_desc          code_gen              inst_combine      mc_parser          orc_jit               runtime_dyld   x86_asm_printer\naarch64_disassembler  arm_disassembler  core                  instrumentation   nvptx_asm_printer  powerpc_asm_printer   scalar         x86_code_gen\naarch64_info          arm_info          debug_info_code_view  ipo               nvptx_code_gen     powerpc_code_gen      selection_dag  x86_desc\naarch64_utils         asm_parser        debug_info_msf        ir_reader         nvptx_desc         powerpc_desc          support        x86_disassembler\nanalysis              asm_printer       demangle              linker            nvptx_info         powerpc_disassembler  target         x86_info\n\n\nI know that I have to define opt as a dependency in my build configuration. I can't see why this doesn't do the same.\nThanks.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 14.04\r\n- **TensorFlow installed from (source or binary)**: Source\r\n- **TensorFlow version (use command below)**: ('v1.0.0-1783-g4c3bb1a', '1.0.0')\r\n- **Bazel version (if compiling from source)**: 0.4.5\r\n- **CUDA/cuDNN version**: -\r\n- **GPU model and memory**: -\r\n- **Exact command to reproduce**: ```bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package```\r\n\r\n#### TensorFlow build: \r\nBuilt from source. \r\n```\r\n$ git rev-parse HEAD\r\na33022c1470ce1334766b0cad38d9e91c17a2e5d\r\n```\r\n### Description:\r\nThis is a feature request. \r\nAs part of my Google Summer of Code project, I am trying to build TensorFlow with Polly-enabled LLVM. To do this, I have been trying to port Opt and Polly to bazel. I tried placing this dummy rule at the end of the [llvm.BUILD](https://github.com/tensorflow/tensorflow/blob/master/third_party/llvm/llvm.BUILD) file. \r\n\r\n```\r\ncc_library(\r\n    name = \"opt\",\r\n    srcs = glob([\r\n        \"tools/opt/*.c\",\r\n        \"tools/opt/*.cpp\",\r\n        \"tools/opt/*.h\",\r\n    ]),     \r\n    hdrs = glob([\r\n        \"tools/opt/*.h\",\r\n    ]),     \r\n    copts = [\"-Iexternal/llvm/tools/opt\",\"-Iexternal/llvm/include\"],\r\n    deps = [\r\n        \":intrinsics_gen\",\r\n    ],\r\n)\r\n```\r\n\r\nBut this does not seem to work. All the other targets defined in the file are building:\r\n\r\n```\r\ntensorflow/bazel-bin/external/llvm/_objs# ls\r\naarch64_asm_printer   arm_asm_printer   bit_reader            execution_engine  mc                 objc_arc              powerpc_info   transform_utils   x86_utils\r\naarch64_code_gen      arm_code_gen      bit_writer            global_i_sel      mc_disassembler    object                profile_data   vectorize\r\naarch64_desc          arm_desc          code_gen              inst_combine      mc_parser          orc_jit               runtime_dyld   x86_asm_printer\r\naarch64_disassembler  arm_disassembler  core                  instrumentation   nvptx_asm_printer  powerpc_asm_printer   scalar         x86_code_gen\r\naarch64_info          arm_info          debug_info_code_view  ipo               nvptx_code_gen     powerpc_code_gen      selection_dag  x86_desc\r\naarch64_utils         asm_parser        debug_info_msf        ir_reader         nvptx_desc         powerpc_desc          support        x86_disassembler\r\nanalysis              asm_printer       demangle              linker            nvptx_info         powerpc_disassembler  target         x86_info\r\n\r\n```\r\n\r\nI know that I have to define opt as a dependency in my build configuration. I can't see why this doesn't do the same.\r\n\r\nThanks.\r\n"}