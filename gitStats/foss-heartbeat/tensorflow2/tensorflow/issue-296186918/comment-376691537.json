{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/376691537", "html_url": "https://github.com/tensorflow/tensorflow/issues/16933#issuecomment-376691537", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16933", "id": 376691537, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NjY5MTUzNw==", "user": {"login": "mbrio", "id": 13557, "node_id": "MDQ6VXNlcjEzNTU3", "avatar_url": "https://avatars2.githubusercontent.com/u/13557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrio", "html_url": "https://github.com/mbrio", "followers_url": "https://api.github.com/users/mbrio/followers", "following_url": "https://api.github.com/users/mbrio/following{/other_user}", "gists_url": "https://api.github.com/users/mbrio/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrio/subscriptions", "organizations_url": "https://api.github.com/users/mbrio/orgs", "repos_url": "https://api.github.com/users/mbrio/repos", "events_url": "https://api.github.com/users/mbrio/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrio/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-27T22:06:29Z", "updated_at": "2018-03-27T22:06:29Z", "author_association": "NONE", "body_html": "<p>I'd like to add to this, it seems as though the instantiation of a <code>tf.train.Features</code> object takes a tremendous amount of time. A very simple example of timings on my machine:</p>\n<div class=\"highlight highlight-source-python\"><pre>start <span class=\"pl-k\">=</span> time.perf_counter()\n\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">2000000</span>):\n    example <span class=\"pl-k\">=</span> tf.train.Example()\n\ntime.perf_counter() <span class=\"pl-k\">-</span> start</pre></div>\n<p>The instantiation of <em>2,000,000</em> examples with no features takes <em>.76</em> seconds.</p>\n<div class=\"highlight highlight-source-python\"><pre>start <span class=\"pl-k\">=</span> time.perf_counter()\n\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">2000000</span>):\n    example <span class=\"pl-k\">=</span> tf.train.Example()\n    feature_1 <span class=\"pl-k\">=</span> tf.train.Int64List(<span class=\"pl-v\">value</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>])\n    feature_2 <span class=\"pl-k\">=</span> tf.train.Int64List(<span class=\"pl-v\">value</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>])\n        \ntime.perf_counter() <span class=\"pl-k\">-</span> start</pre></div>\n<p>The instantiation of <em>2,000,000</em> examples and two <code>tf.train.Int64List</code> objects takes <em>5</em> seconds.</p>\n<div class=\"highlight highlight-source-python\"><pre>start <span class=\"pl-k\">=</span> time.perf_counter()\n\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">2000000</span>):\n    example <span class=\"pl-k\">=</span> tf.train.Example()\n    feature <span class=\"pl-k\">=</span> tf.train.Feature(<span class=\"pl-v\">int64_list</span><span class=\"pl-k\">=</span>tf.train.Int64List(<span class=\"pl-v\">value</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>]))\n    label <span class=\"pl-k\">=</span> tf.train.Feature(<span class=\"pl-v\">int64_list</span><span class=\"pl-k\">=</span>tf.train.Int64List(<span class=\"pl-v\">value</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>]))\n        \ntime.perf_counter() <span class=\"pl-k\">-</span> start</pre></div>\n<p>The instantiation of <em>2,000,000</em> examples and two <code>tf.train.Int64List</code> features takes <em>11</em> seconds.</p>\n<div class=\"highlight highlight-source-python\"><pre>start <span class=\"pl-k\">=</span> time.perf_counter()\n\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">2000000</span>):\n    example <span class=\"pl-k\">=</span> tf.train.Example(<span class=\"pl-v\">features</span> <span class=\"pl-k\">=</span> tf.train.Features(\n            <span class=\"pl-v\">feature</span><span class=\"pl-k\">=</span>{\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>src<span class=\"pl-pds\">'</span></span>: tf.train.Feature(<span class=\"pl-v\">int64_list</span><span class=\"pl-k\">=</span>tf.train.Int64List(<span class=\"pl-v\">value</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>])),\n                <span class=\"pl-s\"><span class=\"pl-pds\">'</span>dst<span class=\"pl-pds\">'</span></span>: tf.train.Feature(<span class=\"pl-v\">int64_list</span><span class=\"pl-k\">=</span>tf.train.Int64List(<span class=\"pl-v\">value</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>])),\n            }\n        )\n    )\n        \ntime.perf_counter() <span class=\"pl-k\">-</span> start</pre></div>\n<p>The instantiation of <em>2,000,000</em> examples with two <code>tf.train.Int64List</code> features takes <em>41</em> seconds.</p>\n<p>And finally, when I put it all together with a TFRecordWriter:</p>\n<div class=\"highlight highlight-source-python\"><pre>start <span class=\"pl-k\">=</span> time.perf_counter()\n\n<span class=\"pl-k\">with</span> tf.python_io.TFRecordWriter(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/mnt/data/repository/test.tfrecord<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> writer:\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">2000000</span>):\n        example <span class=\"pl-k\">=</span> tf.train.Example(<span class=\"pl-v\">features</span> <span class=\"pl-k\">=</span> tf.train.Features(\n                <span class=\"pl-v\">feature</span><span class=\"pl-k\">=</span>{\n                    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>src<span class=\"pl-pds\">'</span></span>: tf.train.Feature(<span class=\"pl-v\">int64_list</span><span class=\"pl-k\">=</span>tf.train.Int64List(<span class=\"pl-v\">value</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>])),\n                    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>dst<span class=\"pl-pds\">'</span></span>: tf.train.Feature(<span class=\"pl-v\">int64_list</span><span class=\"pl-k\">=</span>tf.train.Int64List(<span class=\"pl-v\">value</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>])),\n                }\n            )\n        )\n\n        serialized <span class=\"pl-k\">=</span> example.SerializeToString()\n        writer.write(serialized)\n        \ntime.perf_counter() <span class=\"pl-k\">-</span> start</pre></div>\n<p>The final timing is <em>64</em> seconds for <em>2,000,000</em> records.</p>\n<p>Unfortunately when you have a dataset that's got 1 billion rows it means that it takes 8.8 hours just to convert to tfrecord files.</p>", "body_text": "I'd like to add to this, it seems as though the instantiation of a tf.train.Features object takes a tremendous amount of time. A very simple example of timings on my machine:\nstart = time.perf_counter()\n\nfor i in range(2000000):\n    example = tf.train.Example()\n\ntime.perf_counter() - start\nThe instantiation of 2,000,000 examples with no features takes .76 seconds.\nstart = time.perf_counter()\n\nfor i in range(2000000):\n    example = tf.train.Example()\n    feature_1 = tf.train.Int64List(value=[10])\n    feature_2 = tf.train.Int64List(value=[10])\n        \ntime.perf_counter() - start\nThe instantiation of 2,000,000 examples and two tf.train.Int64List objects takes 5 seconds.\nstart = time.perf_counter()\n\nfor i in range(2000000):\n    example = tf.train.Example()\n    feature = tf.train.Feature(int64_list=tf.train.Int64List(value=[10]))\n    label = tf.train.Feature(int64_list=tf.train.Int64List(value=[10]))\n        \ntime.perf_counter() - start\nThe instantiation of 2,000,000 examples and two tf.train.Int64List features takes 11 seconds.\nstart = time.perf_counter()\n\nfor i in range(2000000):\n    example = tf.train.Example(features = tf.train.Features(\n            feature={\n                'src': tf.train.Feature(int64_list=tf.train.Int64List(value=[10])),\n                'dst': tf.train.Feature(int64_list=tf.train.Int64List(value=[10])),\n            }\n        )\n    )\n        \ntime.perf_counter() - start\nThe instantiation of 2,000,000 examples with two tf.train.Int64List features takes 41 seconds.\nAnd finally, when I put it all together with a TFRecordWriter:\nstart = time.perf_counter()\n\nwith tf.python_io.TFRecordWriter('/mnt/data/repository/test.tfrecord') as writer:\n    for i in range(2000000):\n        example = tf.train.Example(features = tf.train.Features(\n                feature={\n                    'src': tf.train.Feature(int64_list=tf.train.Int64List(value=[10])),\n                    'dst': tf.train.Feature(int64_list=tf.train.Int64List(value=[10])),\n                }\n            )\n        )\n\n        serialized = example.SerializeToString()\n        writer.write(serialized)\n        \ntime.perf_counter() - start\nThe final timing is 64 seconds for 2,000,000 records.\nUnfortunately when you have a dataset that's got 1 billion rows it means that it takes 8.8 hours just to convert to tfrecord files.", "body": "I'd like to add to this, it seems as though the instantiation of a `tf.train.Features` object takes a tremendous amount of time. A very simple example of timings on my machine:\r\n\r\n```python\r\nstart = time.perf_counter()\r\n\r\nfor i in range(2000000):\r\n    example = tf.train.Example()\r\n\r\ntime.perf_counter() - start\r\n```\r\n\r\nThe instantiation of *2,000,000* examples with no features takes *.76* seconds.\r\n\r\n```python\r\nstart = time.perf_counter()\r\n\r\nfor i in range(2000000):\r\n    example = tf.train.Example()\r\n    feature_1 = tf.train.Int64List(value=[10])\r\n    feature_2 = tf.train.Int64List(value=[10])\r\n        \r\ntime.perf_counter() - start\r\n```\r\n\r\nThe instantiation of *2,000,000* examples and two `tf.train.Int64List` objects takes *5* seconds.\r\n\r\n```python\r\nstart = time.perf_counter()\r\n\r\nfor i in range(2000000):\r\n    example = tf.train.Example()\r\n    feature = tf.train.Feature(int64_list=tf.train.Int64List(value=[10]))\r\n    label = tf.train.Feature(int64_list=tf.train.Int64List(value=[10]))\r\n        \r\ntime.perf_counter() - start\r\n```\r\n\r\nThe instantiation of *2,000,000* examples and two `tf.train.Int64List` features takes *11* seconds.\r\n\r\n```python\r\nstart = time.perf_counter()\r\n\r\nfor i in range(2000000):\r\n    example = tf.train.Example(features = tf.train.Features(\r\n            feature={\r\n                'src': tf.train.Feature(int64_list=tf.train.Int64List(value=[10])),\r\n                'dst': tf.train.Feature(int64_list=tf.train.Int64List(value=[10])),\r\n            }\r\n        )\r\n    )\r\n        \r\ntime.perf_counter() - start\r\n```\r\n\r\nThe instantiation of *2,000,000* examples with two `tf.train.Int64List` features takes *41* seconds.\r\n\r\nAnd finally, when I put it all together with a TFRecordWriter:\r\n\r\n```python\r\nstart = time.perf_counter()\r\n\r\nwith tf.python_io.TFRecordWriter('/mnt/data/repository/test.tfrecord') as writer:\r\n    for i in range(2000000):\r\n        example = tf.train.Example(features = tf.train.Features(\r\n                feature={\r\n                    'src': tf.train.Feature(int64_list=tf.train.Int64List(value=[10])),\r\n                    'dst': tf.train.Feature(int64_list=tf.train.Int64List(value=[10])),\r\n                }\r\n            )\r\n        )\r\n\r\n        serialized = example.SerializeToString()\r\n        writer.write(serialized)\r\n        \r\ntime.perf_counter() - start\r\n```\r\n\r\nThe final timing is *64* seconds for *2,000,000* records.\r\n\r\nUnfortunately when you have a dataset that's got 1 billion rows it means that it takes 8.8 hours just to convert to tfrecord files."}