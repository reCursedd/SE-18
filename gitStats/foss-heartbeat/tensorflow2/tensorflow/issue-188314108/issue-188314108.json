{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5500", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5500/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5500/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5500/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/5500", "id": 188314108, "node_id": "MDU6SXNzdWUxODgzMTQxMDg=", "number": 5500, "title": "tf.case unexpected behaviour with tf.placeholder in predicate ", "user": {"login": "schmiflo", "id": 8803950, "node_id": "MDQ6VXNlcjg4MDM5NTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8803950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schmiflo", "html_url": "https://github.com/schmiflo", "followers_url": "https://api.github.com/users/schmiflo/followers", "following_url": "https://api.github.com/users/schmiflo/following{/other_user}", "gists_url": "https://api.github.com/users/schmiflo/gists{/gist_id}", "starred_url": "https://api.github.com/users/schmiflo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schmiflo/subscriptions", "organizations_url": "https://api.github.com/users/schmiflo/orgs", "repos_url": "https://api.github.com/users/schmiflo/repos", "events_url": "https://api.github.com/users/schmiflo/events{/privacy}", "received_events_url": "https://api.github.com/users/schmiflo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "yuanbyu", "id": 2342391, "node_id": "MDQ6VXNlcjIzNDIzOTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2342391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuanbyu", "html_url": "https://github.com/yuanbyu", "followers_url": "https://api.github.com/users/yuanbyu/followers", "following_url": "https://api.github.com/users/yuanbyu/following{/other_user}", "gists_url": "https://api.github.com/users/yuanbyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuanbyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuanbyu/subscriptions", "organizations_url": "https://api.github.com/users/yuanbyu/orgs", "repos_url": "https://api.github.com/users/yuanbyu/repos", "events_url": "https://api.github.com/users/yuanbyu/events{/privacy}", "received_events_url": "https://api.github.com/users/yuanbyu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "yuanbyu", "id": 2342391, "node_id": "MDQ6VXNlcjIzNDIzOTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2342391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuanbyu", "html_url": "https://github.com/yuanbyu", "followers_url": "https://api.github.com/users/yuanbyu/followers", "following_url": "https://api.github.com/users/yuanbyu/following{/other_user}", "gists_url": "https://api.github.com/users/yuanbyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuanbyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuanbyu/subscriptions", "organizations_url": "https://api.github.com/users/yuanbyu/orgs", "repos_url": "https://api.github.com/users/yuanbyu/repos", "events_url": "https://api.github.com/users/yuanbyu/events{/privacy}", "received_events_url": "https://api.github.com/users/yuanbyu/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2016-11-09T18:09:20Z", "updated_at": "2017-06-16T17:05:39Z", "closed_at": "2017-06-16T17:05:39Z", "author_association": "NONE", "body_html": "<p>I am using a <code>tf.case</code> to distinguish between <code>N</code> different cases to return exactly one of <code>N</code> output tensors. Crucially, I am using a <code>tf.placeholder</code> in the predicates. The toy example below exemplifies my code:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nN <span class=\"pl-k\">=</span> <span class=\"pl-c1\">6</span>\nlength <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>{})\n\ntensors <span class=\"pl-k\">=</span>[tf.constant(i <span class=\"pl-k\">*</span> <span class=\"pl-c1\">100</span>) <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(N)]\ndefault <span class=\"pl-k\">=</span> <span class=\"pl-k\">lambda</span>: tf.constant(<span class=\"pl-k\">-</span><span class=\"pl-c1\">2</span>)\npredicates <span class=\"pl-k\">=</span> [(tf.equal(length, tf.constant(i, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32)), <span class=\"pl-k\">lambda</span>: tensors[i]) <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(N)]\n\nmycase <span class=\"pl-k\">=</span> tf.case(predicates, default, <span class=\"pl-v\">exclusive</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> session:\n  session.run(tf.initialize_all_variables())\n\n  <span class=\"pl-k\">for</span> l <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(N):\n    out <span class=\"pl-k\">=</span> session.run(mycase, <span class=\"pl-v\">feed_dict</span> <span class=\"pl-k\">=</span> {length : l})\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>output <span class=\"pl-c1\">%d</span><span class=\"pl-cce\">\\t</span>(length = <span class=\"pl-c1\">%d</span>)<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> (out,l))</pre></div>\n<p>As output I would expect</p>\n<pre><code>output 0\t(length = 0)\noutput 100\t(length = 1)\noutput 200\t(length = 2)\noutput 300\t(length = 3)\noutput 400\t(length = 4)\noutput 500\t(length = 5)\n</code></pre>\n<p>However, I get</p>\n<pre><code>output 500\t(length = 0)\noutput 500\t(length = 1)\noutput 500\t(length = 2)\noutput 500\t(length = 3)\noutput 500\t(length = 4)\noutput 500\t(length = 5)\n\n</code></pre>\n<p>Comparing a constant to a placeholder usually does not cause problems. Am I stretching something too far by emulating such dynamic behaviour using <code>case</code> plus <code>palceholder</code>?</p>\n<p>Setup: Ubuntu 14.04, tensorflow 0.11.0rc2 from the provided tensorflow-0.11.0rc2-cp34-cp34m-linux_x86_64.whl</p>", "body_text": "I am using a tf.case to distinguish between N different cases to return exactly one of N output tensors. Crucially, I am using a tf.placeholder in the predicates. The toy example below exemplifies my code:\nimport tensorflow as tf\n\nN = 6\nlength = tf.placeholder(dtype=tf.int32, shape={})\n\ntensors =[tf.constant(i * 100) for i in range(N)]\ndefault = lambda: tf.constant(-2)\npredicates = [(tf.equal(length, tf.constant(i, dtype=tf.int32)), lambda: tensors[i]) for i in range(N)]\n\nmycase = tf.case(predicates, default, exclusive=True)\n\nwith tf.Session() as session:\n  session.run(tf.initialize_all_variables())\n\n  for l in range(N):\n    out = session.run(mycase, feed_dict = {length : l})\n    print(\"output %d\\t(length = %d)\" % (out,l))\nAs output I would expect\noutput 0\t(length = 0)\noutput 100\t(length = 1)\noutput 200\t(length = 2)\noutput 300\t(length = 3)\noutput 400\t(length = 4)\noutput 500\t(length = 5)\n\nHowever, I get\noutput 500\t(length = 0)\noutput 500\t(length = 1)\noutput 500\t(length = 2)\noutput 500\t(length = 3)\noutput 500\t(length = 4)\noutput 500\t(length = 5)\n\n\nComparing a constant to a placeholder usually does not cause problems. Am I stretching something too far by emulating such dynamic behaviour using case plus palceholder?\nSetup: Ubuntu 14.04, tensorflow 0.11.0rc2 from the provided tensorflow-0.11.0rc2-cp34-cp34m-linux_x86_64.whl", "body": "I am using a `tf.case` to distinguish between `N` different cases to return exactly one of `N` output tensors. Crucially, I am using a `tf.placeholder` in the predicates. The toy example below exemplifies my code:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nN = 6\r\nlength = tf.placeholder(dtype=tf.int32, shape={})\r\n\r\ntensors =[tf.constant(i * 100) for i in range(N)]\r\ndefault = lambda: tf.constant(-2)\r\npredicates = [(tf.equal(length, tf.constant(i, dtype=tf.int32)), lambda: tensors[i]) for i in range(N)]\r\n\r\nmycase = tf.case(predicates, default, exclusive=True)\r\n\r\nwith tf.Session() as session:\r\n  session.run(tf.initialize_all_variables())\r\n\r\n  for l in range(N):\r\n    out = session.run(mycase, feed_dict = {length : l})\r\n    print(\"output %d\\t(length = %d)\" % (out,l))\r\n  ```\r\nAs output I would expect \r\n```\r\noutput 0\t(length = 0)\r\noutput 100\t(length = 1)\r\noutput 200\t(length = 2)\r\noutput 300\t(length = 3)\r\noutput 400\t(length = 4)\r\noutput 500\t(length = 5)\r\n```\r\nHowever, I get\r\n```\r\noutput 500\t(length = 0)\r\noutput 500\t(length = 1)\r\noutput 500\t(length = 2)\r\noutput 500\t(length = 3)\r\noutput 500\t(length = 4)\r\noutput 500\t(length = 5)\r\n\r\n```\r\n\r\nComparing a constant to a placeholder usually does not cause problems. Am I stretching something too far by emulating such dynamic behaviour using `case` plus `palceholder`?\r\n\r\n \r\nSetup: Ubuntu 14.04, tensorflow 0.11.0rc2 from the provided tensorflow-0.11.0rc2-cp34-cp34m-linux_x86_64.whl\r\n\r\n\r\n"}