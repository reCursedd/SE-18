{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/362902045", "html_url": "https://github.com/tensorflow/tensorflow/issues/16510#issuecomment-362902045", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16510", "id": 362902045, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MjkwMjA0NQ==", "user": {"login": "selcouthlyBlue", "id": 13268675, "node_id": "MDQ6VXNlcjEzMjY4Njc1", "avatar_url": "https://avatars2.githubusercontent.com/u/13268675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/selcouthlyBlue", "html_url": "https://github.com/selcouthlyBlue", "followers_url": "https://api.github.com/users/selcouthlyBlue/followers", "following_url": "https://api.github.com/users/selcouthlyBlue/following{/other_user}", "gists_url": "https://api.github.com/users/selcouthlyBlue/gists{/gist_id}", "starred_url": "https://api.github.com/users/selcouthlyBlue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/selcouthlyBlue/subscriptions", "organizations_url": "https://api.github.com/users/selcouthlyBlue/orgs", "repos_url": "https://api.github.com/users/selcouthlyBlue/repos", "events_url": "https://api.github.com/users/selcouthlyBlue/events{/privacy}", "received_events_url": "https://api.github.com/users/selcouthlyBlue/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-04T12:09:48Z", "updated_at": "2018-02-04T12:09:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Applying tf.shape worked although I applied it in only one part of the lstm2d like so:</p>\n<pre><code>def images_to_sequence(tensor):\n  _, _, width, depth = _shape(tensor)\n  s = array_ops.shape(tensor)\n  batch_size, height = s[0], s[1]\n  transposed = array_ops.transpose(tensor, [2, 0, 1, 3])\n  return array_ops.reshape(transposed,\n                           [width, batch_size * height, depth])\n</code></pre>\n<p>With that, <code>sequence_to_images</code> was also modified to take in a known dimension (height) of the tensor:</p>\n<pre><code>def sequence_to_images(tensor, height):\n  width, num_batches, depth = _shape(tensor)\n  if num_batches is None:\n    num_batches = -1\n  else:\n    num_batches = num_batches // height\n  reshaped = array_ops.reshape(tensor,\n                               [width, num_batches, height, depth])\n  return array_ops.transpose(reshaped, [1, 2, 0, 3])\n</code></pre>\n<p>I already pushed these changes.</p>", "body_text": "Applying tf.shape worked although I applied it in only one part of the lstm2d like so:\ndef images_to_sequence(tensor):\n  _, _, width, depth = _shape(tensor)\n  s = array_ops.shape(tensor)\n  batch_size, height = s[0], s[1]\n  transposed = array_ops.transpose(tensor, [2, 0, 1, 3])\n  return array_ops.reshape(transposed,\n                           [width, batch_size * height, depth])\n\nWith that, sequence_to_images was also modified to take in a known dimension (height) of the tensor:\ndef sequence_to_images(tensor, height):\n  width, num_batches, depth = _shape(tensor)\n  if num_batches is None:\n    num_batches = -1\n  else:\n    num_batches = num_batches // height\n  reshaped = array_ops.reshape(tensor,\n                               [width, num_batches, height, depth])\n  return array_ops.transpose(reshaped, [1, 2, 0, 3])\n\nI already pushed these changes.", "body": "Applying tf.shape worked although I applied it in only one part of the lstm2d like so:\r\n\r\n```\r\ndef images_to_sequence(tensor):\r\n  _, _, width, depth = _shape(tensor)\r\n  s = array_ops.shape(tensor)\r\n  batch_size, height = s[0], s[1]\r\n  transposed = array_ops.transpose(tensor, [2, 0, 1, 3])\r\n  return array_ops.reshape(transposed,\r\n                           [width, batch_size * height, depth])\r\n```\r\n\r\nWith that, `sequence_to_images` was also modified to take in a known dimension (height) of the tensor:\r\n\r\n```\r\ndef sequence_to_images(tensor, height):\r\n  width, num_batches, depth = _shape(tensor)\r\n  if num_batches is None:\r\n    num_batches = -1\r\n  else:\r\n    num_batches = num_batches // height\r\n  reshaped = array_ops.reshape(tensor,\r\n                               [width, num_batches, height, depth])\r\n  return array_ops.transpose(reshaped, [1, 2, 0, 3])\r\n```\r\n\r\nI already pushed these changes."}