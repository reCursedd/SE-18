{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/239077760", "html_url": "https://github.com/tensorflow/tensorflow/issues/3545#issuecomment-239077760", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3545", "id": 239077760, "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTA3Nzc2MA==", "user": {"login": "npanpaliya", "id": 14196089, "node_id": "MDQ6VXNlcjE0MTk2MDg5", "avatar_url": "https://avatars3.githubusercontent.com/u/14196089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npanpaliya", "html_url": "https://github.com/npanpaliya", "followers_url": "https://api.github.com/users/npanpaliya/followers", "following_url": "https://api.github.com/users/npanpaliya/following{/other_user}", "gists_url": "https://api.github.com/users/npanpaliya/gists{/gist_id}", "starred_url": "https://api.github.com/users/npanpaliya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npanpaliya/subscriptions", "organizations_url": "https://api.github.com/users/npanpaliya/orgs", "repos_url": "https://api.github.com/users/npanpaliya/repos", "events_url": "https://api.github.com/users/npanpaliya/events{/privacy}", "received_events_url": "https://api.github.com/users/npanpaliya/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-11T05:39:33Z", "updated_at": "2016-08-11T05:40:55Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Here are the files with both outputs. The one with std=c++11 doesn't have <strong>linux defined (it has __linux</strong> defined though) while the other one without it, has <strong>linux and __linux</strong> defined.</p>\n<p>Even if __linux is defined, sched_getaffinity does not give us expected output. It gives us logical no. of cores, i.e. max possible threads (no. of sockets * core per socket * threads per core) which is pretty high on Power and it degrades the performance adversely. We also tested that using physical core size gives the best performance. All the existing relevant APIs like std::thread::hardware_concurrency(), omp_get_max_threads(), omp_get_num_procs(), get_nprocs(), etc. give the logical core size. We could not find any API giving us required size.<br>\nHwloc library is the one that provides the required API. We would anyway call this API only for power architectures, for non-power arch, sched_getaffinity will still be functional.<br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/412613/WithOUTStdc.11.txt\">WithOUTStdc++11.txt</a><br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/412614/WithStdc.11.txt\">WithStdc++11.txt</a></p>", "body_text": "Here are the files with both outputs. The one with std=c++11 doesn't have linux defined (it has __linux defined though) while the other one without it, has linux and __linux defined.\nEven if __linux is defined, sched_getaffinity does not give us expected output. It gives us logical no. of cores, i.e. max possible threads (no. of sockets * core per socket * threads per core) which is pretty high on Power and it degrades the performance adversely. We also tested that using physical core size gives the best performance. All the existing relevant APIs like std::thread::hardware_concurrency(), omp_get_max_threads(), omp_get_num_procs(), get_nprocs(), etc. give the logical core size. We could not find any API giving us required size.\nHwloc library is the one that provides the required API. We would anyway call this API only for power architectures, for non-power arch, sched_getaffinity will still be functional.\nWithOUTStdc++11.txt\nWithStdc++11.txt", "body": "Here are the files with both outputs. The one with std=c++11 doesn't have **linux defined (it has __linux** defined though) while the other one without it, has **linux and __linux** defined.\n\nEven if __linux is defined, sched_getaffinity does not give us expected output. It gives us logical no. of cores, i.e. max possible threads (no. of sockets \\* core per socket \\* threads per core) which is pretty high on Power and it degrades the performance adversely. We also tested that using physical core size gives the best performance. All the existing relevant APIs like std::thread::hardware_concurrency(), omp_get_max_threads(), omp_get_num_procs(), get_nprocs(), etc. give the logical core size. We could not find any API giving us required size. \nHwloc library is the one that provides the required API. We would anyway call this API only for power architectures, for non-power arch, sched_getaffinity will still be functional.\n[WithOUTStdc++11.txt](https://github.com/tensorflow/tensorflow/files/412613/WithOUTStdc.11.txt)\n[WithStdc++11.txt](https://github.com/tensorflow/tensorflow/files/412614/WithStdc.11.txt)\n"}