{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/239440113", "html_url": "https://github.com/tensorflow/tensorflow/issues/3545#issuecomment-239440113", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3545", "id": 239440113, "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTQ0MDExMw==", "user": {"login": "npanpaliya", "id": 14196089, "node_id": "MDQ6VXNlcjE0MTk2MDg5", "avatar_url": "https://avatars3.githubusercontent.com/u/14196089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npanpaliya", "html_url": "https://github.com/npanpaliya", "followers_url": "https://api.github.com/users/npanpaliya/followers", "following_url": "https://api.github.com/users/npanpaliya/following{/other_user}", "gists_url": "https://api.github.com/users/npanpaliya/gists{/gist_id}", "starred_url": "https://api.github.com/users/npanpaliya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npanpaliya/subscriptions", "organizations_url": "https://api.github.com/users/npanpaliya/orgs", "repos_url": "https://api.github.com/users/npanpaliya/repos", "events_url": "https://api.github.com/users/npanpaliya/events{/privacy}", "received_events_url": "https://api.github.com/users/npanpaliya/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-12T13:03:03Z", "updated_at": "2016-08-12T13:08:49Z", "author_association": "CONTRIBUTOR", "body_html": "<p>What I've observed on most of our development machines that no. of threads per core is usually 8. So, sched_getaffinity returns values like 160 or 128. This value is (no. of threads per core * no. of cores per socket * no. of sockets). We did perform various tests with different thread count, and with 160 threads, we got degraded performance, and with even 4, the performance was no good. So, trying out further values, we settled at 32 or 40 which gave us the best performance. This means threads equal to actual physical no. of cores will work the best. On x86, we usually have less no. of threads per core (probably 1 or 2) which will give thread count approximately 20 or 32 that must be the best bet.</p>\n<p>I'm not sure about exact computation that suffered the performance hit on Power. We tested Googlenet-tensorflow Inception v3 models for training some images. I'll get back to you on this.</p>", "body_text": "What I've observed on most of our development machines that no. of threads per core is usually 8. So, sched_getaffinity returns values like 160 or 128. This value is (no. of threads per core * no. of cores per socket * no. of sockets). We did perform various tests with different thread count, and with 160 threads, we got degraded performance, and with even 4, the performance was no good. So, trying out further values, we settled at 32 or 40 which gave us the best performance. This means threads equal to actual physical no. of cores will work the best. On x86, we usually have less no. of threads per core (probably 1 or 2) which will give thread count approximately 20 or 32 that must be the best bet.\nI'm not sure about exact computation that suffered the performance hit on Power. We tested Googlenet-tensorflow Inception v3 models for training some images. I'll get back to you on this.", "body": "What I've observed on most of our development machines that no. of threads per core is usually 8. So, sched_getaffinity returns values like 160 or 128. This value is (no. of threads per core \\* no. of cores per socket \\* no. of sockets). We did perform various tests with different thread count, and with 160 threads, we got degraded performance, and with even 4, the performance was no good. So, trying out further values, we settled at 32 or 40 which gave us the best performance. This means threads equal to actual physical no. of cores will work the best. On x86, we usually have less no. of threads per core (probably 1 or 2) which will give thread count approximately 20 or 32 that must be the best bet. \n\nI'm not sure about exact computation that suffered the performance hit on Power. We tested Googlenet-tensorflow Inception v3 models for training some images. I'll get back to you on this.\n"}