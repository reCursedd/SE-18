{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/290100490", "html_url": "https://github.com/tensorflow/tensorflow/issues/8776#issuecomment-290100490", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8776", "id": 290100490, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDEwMDQ5MA==", "user": {"login": "jwayne", "id": 1303177, "node_id": "MDQ6VXNlcjEzMDMxNzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1303177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwayne", "html_url": "https://github.com/jwayne", "followers_url": "https://api.github.com/users/jwayne/followers", "following_url": "https://api.github.com/users/jwayne/following{/other_user}", "gists_url": "https://api.github.com/users/jwayne/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwayne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwayne/subscriptions", "organizations_url": "https://api.github.com/users/jwayne/orgs", "repos_url": "https://api.github.com/users/jwayne/repos", "events_url": "https://api.github.com/users/jwayne/events{/privacy}", "received_events_url": "https://api.github.com/users/jwayne/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-29T14:05:51Z", "updated_at": "2017-03-29T14:05:51Z", "author_association": "NONE", "body_html": "<p>OK, back to the original bug.  This is what weirds me out.  <code>test(behavior=1)</code> gives the unexpected behavior, while <code>test(behavior=2)</code> gives the expected behavior:</p>\n<pre><code>def test(behavior):\n    global_step = tf.Variable(0, dtype=tf.int64)\n    train_op = tf.assign(global_step, global_step + 1)\n\n    learning_rate = tf.Variable(0.1, dtype=tf.float32, name='learning_rate')\n\n    if behavior == 1:\n        case_tensors = [\n            (tf.equal(global_step, 2), tf.constant(0.01, dtype=tf.float32)),\n            (tf.equal(global_step, 4), tf.constant(0.001, dtype=tf.float32)),\n        ]\n        cases = [(pred, lambda: fn_tensor) for pred, fn_tensor in case_tensors]\n    elif behavior == 2:\n        x = tf.constant(0.01, dtype=tf.float32)\n        y = tf.constant(0.001, dtype=tf.float32)\n        cases = [\n            (tf.equal(global_step, 2), lambda: x),\n            (tf.equal(global_step, 4), lambda: y),\n        ]\n    update = tf.case(cases, default=lambda: learning_rate)\n    updated_learning_rate = tf.assign(learning_rate, update)\n\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        for _ in xrange(6):\n            print sess.run([global_step, update, updated_learning_rate])\n            sess.run(train_op)\n</code></pre>\n<p>In particular, the output of <code>test(1)</code>:</p>\n<pre><code>[0, 0.1, 0.1]\n[1, 0.1, 0.1]\n[2, 0.001, 0.001]\n[3, 0.001, 0.001]\n[4, 0.001, 0.001]\n[5, 0.001, 0.001]\n</code></pre>\n<p>The output of <code>test(2)</code>:</p>\n<pre><code>[0, 0.1, 0.1]\n[1, 0.1, 0.1]\n[2, 0.0099999998, 0.0099999998]\n[3, 0.0099999998, 0.0099999998]\n[4, 0.001, 0.001]\n[5, 0.001, 0.001]\n</code></pre>", "body_text": "OK, back to the original bug.  This is what weirds me out.  test(behavior=1) gives the unexpected behavior, while test(behavior=2) gives the expected behavior:\ndef test(behavior):\n    global_step = tf.Variable(0, dtype=tf.int64)\n    train_op = tf.assign(global_step, global_step + 1)\n\n    learning_rate = tf.Variable(0.1, dtype=tf.float32, name='learning_rate')\n\n    if behavior == 1:\n        case_tensors = [\n            (tf.equal(global_step, 2), tf.constant(0.01, dtype=tf.float32)),\n            (tf.equal(global_step, 4), tf.constant(0.001, dtype=tf.float32)),\n        ]\n        cases = [(pred, lambda: fn_tensor) for pred, fn_tensor in case_tensors]\n    elif behavior == 2:\n        x = tf.constant(0.01, dtype=tf.float32)\n        y = tf.constant(0.001, dtype=tf.float32)\n        cases = [\n            (tf.equal(global_step, 2), lambda: x),\n            (tf.equal(global_step, 4), lambda: y),\n        ]\n    update = tf.case(cases, default=lambda: learning_rate)\n    updated_learning_rate = tf.assign(learning_rate, update)\n\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        for _ in xrange(6):\n            print sess.run([global_step, update, updated_learning_rate])\n            sess.run(train_op)\n\nIn particular, the output of test(1):\n[0, 0.1, 0.1]\n[1, 0.1, 0.1]\n[2, 0.001, 0.001]\n[3, 0.001, 0.001]\n[4, 0.001, 0.001]\n[5, 0.001, 0.001]\n\nThe output of test(2):\n[0, 0.1, 0.1]\n[1, 0.1, 0.1]\n[2, 0.0099999998, 0.0099999998]\n[3, 0.0099999998, 0.0099999998]\n[4, 0.001, 0.001]\n[5, 0.001, 0.001]", "body": "OK, back to the original bug.  This is what weirds me out.  `test(behavior=1)` gives the unexpected behavior, while `test(behavior=2)` gives the expected behavior:\r\n\r\n```\r\ndef test(behavior):\r\n    global_step = tf.Variable(0, dtype=tf.int64)\r\n    train_op = tf.assign(global_step, global_step + 1)\r\n\r\n    learning_rate = tf.Variable(0.1, dtype=tf.float32, name='learning_rate')\r\n\r\n    if behavior == 1:\r\n        case_tensors = [\r\n            (tf.equal(global_step, 2), tf.constant(0.01, dtype=tf.float32)),\r\n            (tf.equal(global_step, 4), tf.constant(0.001, dtype=tf.float32)),\r\n        ]\r\n        cases = [(pred, lambda: fn_tensor) for pred, fn_tensor in case_tensors]\r\n    elif behavior == 2:\r\n        x = tf.constant(0.01, dtype=tf.float32)\r\n        y = tf.constant(0.001, dtype=tf.float32)\r\n        cases = [\r\n            (tf.equal(global_step, 2), lambda: x),\r\n            (tf.equal(global_step, 4), lambda: y),\r\n        ]\r\n    update = tf.case(cases, default=lambda: learning_rate)\r\n    updated_learning_rate = tf.assign(learning_rate, update)\r\n\r\n    with tf.Session() as sess:\r\n        sess.run(tf.global_variables_initializer())\r\n        for _ in xrange(6):\r\n            print sess.run([global_step, update, updated_learning_rate])\r\n            sess.run(train_op)\r\n```\r\n\r\nIn particular, the output of `test(1)`:\r\n\r\n```\r\n[0, 0.1, 0.1]\r\n[1, 0.1, 0.1]\r\n[2, 0.001, 0.001]\r\n[3, 0.001, 0.001]\r\n[4, 0.001, 0.001]\r\n[5, 0.001, 0.001]\r\n```\r\n\r\nThe output of `test(2)`:\r\n\r\n```\r\n[0, 0.1, 0.1]\r\n[1, 0.1, 0.1]\r\n[2, 0.0099999998, 0.0099999998]\r\n[3, 0.0099999998, 0.0099999998]\r\n[4, 0.001, 0.001]\r\n[5, 0.001, 0.001]\r\n```"}