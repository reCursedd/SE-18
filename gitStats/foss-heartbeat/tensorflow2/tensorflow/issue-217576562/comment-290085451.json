{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/290085451", "html_url": "https://github.com/tensorflow/tensorflow/issues/8776#issuecomment-290085451", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8776", "id": 290085451, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDA4NTQ1MQ==", "user": {"login": "jwayne", "id": 1303177, "node_id": "MDQ6VXNlcjEzMDMxNzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1303177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwayne", "html_url": "https://github.com/jwayne", "followers_url": "https://api.github.com/users/jwayne/followers", "following_url": "https://api.github.com/users/jwayne/following{/other_user}", "gists_url": "https://api.github.com/users/jwayne/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwayne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwayne/subscriptions", "organizations_url": "https://api.github.com/users/jwayne/orgs", "repos_url": "https://api.github.com/users/jwayne/repos", "events_url": "https://api.github.com/users/jwayne/events{/privacy}", "received_events_url": "https://api.github.com/users/jwayne/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-29T13:13:24Z", "updated_at": "2017-03-29T13:13:38Z", "author_association": "NONE", "body_html": "<p>In particular, if I want it such that if no condition is met, then I want to keep learning_rate the same, then this seems difficult with both tf.where and tf.case (the latter because I cannot let a lambda return an already-constructed tensor).</p>\n<p>Happy to post this on SO if that's more appropriate, thanks</p>", "body_text": "In particular, if I want it such that if no condition is met, then I want to keep learning_rate the same, then this seems difficult with both tf.where and tf.case (the latter because I cannot let a lambda return an already-constructed tensor).\nHappy to post this on SO if that's more appropriate, thanks", "body": "In particular, if I want it such that if no condition is met, then I want to keep learning_rate the same, then this seems difficult with both tf.where and tf.case (the latter because I cannot let a lambda return an already-constructed tensor).\r\n\r\nHappy to post this on SO if that's more appropriate, thanks"}