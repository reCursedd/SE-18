{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/289935788", "html_url": "https://github.com/tensorflow/tensorflow/issues/8776#issuecomment-289935788", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8776", "id": 289935788, "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTkzNTc4OA==", "user": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-28T23:27:11Z", "updated_at": "2017-03-28T23:27:11Z", "author_association": "MEMBER", "body_html": "<pre><code>case_tensors = [\n    (tf.equal(global_step, 2), tf.constant(0.01, dtype=tf.float32)),\n    (tf.equal(global_step, 4), tf.constant(0.001, dtype=tf.float32)),\n]\ncases = [(pred, lambda: fn_tensor) for pred, fn_tensor in case_tensors]\n</code></pre>\n<p>I believe this is your problem. You are constructing a lambda of already created op handles. You need to give the conditional control over when to actually create the ops... i.e.</p>\n<pre><code>cases = [\n    (tf.equal(global_step, 2), lambda: tf.constant(0.01, dtype=tf.float32)),\n    (tf.equal(global_step, 4), labmda: tf.constant(0.001, dtype=tf.float32)),\n]\n</code></pre>\n<p>You may also need a control dependency between global_step and your case. Honestly, I'd recommend using tf.where for this type of usage anyways.</p>", "body_text": "case_tensors = [\n    (tf.equal(global_step, 2), tf.constant(0.01, dtype=tf.float32)),\n    (tf.equal(global_step, 4), tf.constant(0.001, dtype=tf.float32)),\n]\ncases = [(pred, lambda: fn_tensor) for pred, fn_tensor in case_tensors]\n\nI believe this is your problem. You are constructing a lambda of already created op handles. You need to give the conditional control over when to actually create the ops... i.e.\ncases = [\n    (tf.equal(global_step, 2), lambda: tf.constant(0.01, dtype=tf.float32)),\n    (tf.equal(global_step, 4), labmda: tf.constant(0.001, dtype=tf.float32)),\n]\n\nYou may also need a control dependency between global_step and your case. Honestly, I'd recommend using tf.where for this type of usage anyways.", "body": "```\r\ncase_tensors = [\r\n    (tf.equal(global_step, 2), tf.constant(0.01, dtype=tf.float32)),\r\n    (tf.equal(global_step, 4), tf.constant(0.001, dtype=tf.float32)),\r\n]\r\ncases = [(pred, lambda: fn_tensor) for pred, fn_tensor in case_tensors]\r\n```\r\nI believe this is your problem. You are constructing a lambda of already created op handles. You need to give the conditional control over when to actually create the ops... i.e.\r\n```\r\ncases = [\r\n    (tf.equal(global_step, 2), lambda: tf.constant(0.01, dtype=tf.float32)),\r\n    (tf.equal(global_step, 4), labmda: tf.constant(0.001, dtype=tf.float32)),\r\n]\r\n```\r\nYou may also need a control dependency between global_step and your case. Honestly, I'd recommend using tf.where for this type of usage anyways.\r\n"}