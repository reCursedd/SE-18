{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/407868867", "html_url": "https://github.com/tensorflow/tensorflow/issues/21121#issuecomment-407868867", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21121", "id": 407868867, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNzg2ODg2Nw==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-25T19:30:54Z", "updated_at": "2018-07-25T19:30:54Z", "author_association": "MEMBER", "body_html": "<p>This is working more or less as intended. It's an unfortunate combination, but we're trying to (slowly) move away from global collections. So I expect the resolution will be not to have a global trainable variable collection.</p>\n<p>Does that make sense? If you'd like to explain the use-case, we can see what the alternatives are. For example if you'd like to toggle trainability, I'd suggest keeping the variables in a tf.keras.Model and switching model.trainable:</p>\n<pre><code>&gt;&gt;&gt; import tensorflow as tf\n&gt;&gt;&gt; m = tf.keras.Model()\n&gt;&gt;&gt; m.v = tf.Variable(1., trainable=True)\n&gt;&gt;&gt; m.trainable_variables\n[&lt;tf.Variable 'Variable:0' shape=() dtype=float32_ref&gt;]\n&gt;&gt;&gt; m.trainable = False\n&gt;&gt;&gt; m.trainable_variables\n[]\n</code></pre>\n<p>You can have multiple sub-models with different <code>trainable</code> attributes, and trainable variables will be aggregated from those. Then the aggregated list can be passed to an optimizer's <code>var_list</code> (or whatever else).</p>", "body_text": "This is working more or less as intended. It's an unfortunate combination, but we're trying to (slowly) move away from global collections. So I expect the resolution will be not to have a global trainable variable collection.\nDoes that make sense? If you'd like to explain the use-case, we can see what the alternatives are. For example if you'd like to toggle trainability, I'd suggest keeping the variables in a tf.keras.Model and switching model.trainable:\n>>> import tensorflow as tf\n>>> m = tf.keras.Model()\n>>> m.v = tf.Variable(1., trainable=True)\n>>> m.trainable_variables\n[<tf.Variable 'Variable:0' shape=() dtype=float32_ref>]\n>>> m.trainable = False\n>>> m.trainable_variables\n[]\n\nYou can have multiple sub-models with different trainable attributes, and trainable variables will be aggregated from those. Then the aggregated list can be passed to an optimizer's var_list (or whatever else).", "body": "This is working more or less as intended. It's an unfortunate combination, but we're trying to (slowly) move away from global collections. So I expect the resolution will be not to have a global trainable variable collection.\r\n\r\nDoes that make sense? If you'd like to explain the use-case, we can see what the alternatives are. For example if you'd like to toggle trainability, I'd suggest keeping the variables in a tf.keras.Model and switching model.trainable:\r\n\r\n```\r\n>>> import tensorflow as tf\r\n>>> m = tf.keras.Model()\r\n>>> m.v = tf.Variable(1., trainable=True)\r\n>>> m.trainable_variables\r\n[<tf.Variable 'Variable:0' shape=() dtype=float32_ref>]\r\n>>> m.trainable = False\r\n>>> m.trainable_variables\r\n[]\r\n```\r\n\r\nYou can have multiple sub-models with different `trainable` attributes, and trainable variables will be aggregated from those. Then the aggregated list can be passed to an optimizer's `var_list` (or whatever else)."}