{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/333027841", "html_url": "https://github.com/tensorflow/tensorflow/issues/13310#issuecomment-333027841", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13310", "id": 333027841, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzAyNzg0MQ==", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-29T04:25:43Z", "updated_at": "2017-09-29T04:25:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>SparseTensor could generally be relaxed to support a non-vector values.  In fact, the <code>scatter_nd</code> and <code>gather_nd</code> ops already support this structure - so creating a ST with the given block structure is straightforward.</p>\n<p>If we allow this relaxation, then a <code>SparseTensor</code> would also subsume <code>IndexedSlices</code>; since a special case of <code>scatter_nd</code> and <code>gather_nd</code> are <code>scatter</code> and <code>gather</code>.</p>\n<p>Many of the existing ops would continue to work, emitting a specific type of <code>SparseTensor</code>.  I haven't investigated what ops need to be really updated to support them in the new generality.  For example, <code>tf.sparse_tensor_to_dense</code> would need to be updated to just use <code>tf.scatter_nd</code> (very easy change); and new unit tests would have to be added.  There are probably a couple more ops we would want to update to support block sparse tensors.</p>", "body_text": "SparseTensor could generally be relaxed to support a non-vector values.  In fact, the scatter_nd and gather_nd ops already support this structure - so creating a ST with the given block structure is straightforward.\nIf we allow this relaxation, then a SparseTensor would also subsume IndexedSlices; since a special case of scatter_nd and gather_nd are scatter and gather.\nMany of the existing ops would continue to work, emitting a specific type of SparseTensor.  I haven't investigated what ops need to be really updated to support them in the new generality.  For example, tf.sparse_tensor_to_dense would need to be updated to just use tf.scatter_nd (very easy change); and new unit tests would have to be added.  There are probably a couple more ops we would want to update to support block sparse tensors.", "body": "SparseTensor could generally be relaxed to support a non-vector values.  In fact, the `scatter_nd` and `gather_nd` ops already support this structure - so creating a ST with the given block structure is straightforward.\r\n\r\nIf we allow this relaxation, then a `SparseTensor` would also subsume `IndexedSlices`; since a special case of `scatter_nd` and `gather_nd` are `scatter` and `gather`.\r\n\r\nMany of the existing ops would continue to work, emitting a specific type of `SparseTensor`.  I haven't investigated what ops need to be really updated to support them in the new generality.  For example, `tf.sparse_tensor_to_dense` would need to be updated to just use `tf.scatter_nd` (very easy change); and new unit tests would have to be added.  There are probably a couple more ops we would want to update to support block sparse tensors."}