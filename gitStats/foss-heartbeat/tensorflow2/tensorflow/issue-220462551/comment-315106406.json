{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/315106406", "html_url": "https://github.com/tensorflow/tensorflow/issues/9080#issuecomment-315106406", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9080", "id": 315106406, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTEwNjQwNg==", "user": {"login": "elefthei", "id": 766892, "node_id": "MDQ6VXNlcjc2Njg5Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/766892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elefthei", "html_url": "https://github.com/elefthei", "followers_url": "https://api.github.com/users/elefthei/followers", "following_url": "https://api.github.com/users/elefthei/following{/other_user}", "gists_url": "https://api.github.com/users/elefthei/gists{/gist_id}", "starred_url": "https://api.github.com/users/elefthei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elefthei/subscriptions", "organizations_url": "https://api.github.com/users/elefthei/orgs", "repos_url": "https://api.github.com/users/elefthei/repos", "events_url": "https://api.github.com/users/elefthei/events{/privacy}", "received_events_url": "https://api.github.com/users/elefthei/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-13T15:06:27Z", "updated_at": "2017-07-13T15:09:04Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Alright, here's my report, and it's not a great one :'(</p>\n<p><strong>Cuda streams are used everywhere in Tensorflow.</strong></p>\n<p>For BLAS (tensorflow/stream_executor/cuda/cuda_blas.cc)<br>\nFor DNN (tensorflow/stream_executor/cuda/cuda_dnn.cc)<br>\nFor everything else (tensorflow/stream_executor/cuda/cuda_gpu_executor.cc)</p>\n<p>So yeah, good luck with that. Cuda streams are like operation queues, so they are used throughout as the parallelization semantics for running multiple cuda operations concurrently in Tensorflow. It will require somebody to rewrite <em>all</em> of the Cuda code to be MPS compatible. So yeah, this issue will rewrite a huge rewrite.</p>\n<p>Searching for cudaStream:</p>\n<pre><code>tensorflow/contrib/nccl/kernels/nccl_manager.cc:  const cudaStream_t* cu_stream = reinterpret_cast&lt;const cudaStream_t*&gt;(\ntensorflow/contrib/nccl/kernels/nccl_manager.cc:      comm_stream-&gt;implementation()-&gt;CudaStreamMemberHack());\ntensorflow/core/common_runtime/gpu/gpu_device.cc:class EigenCudaStreamDevice : public ::Eigen::StreamInterface {\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  EigenCudaStreamDevice()\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  ~EigenCudaStreamDevice() override {}\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  void Reinitialize(OpKernelContext* context, const cudaStream_t* cuda_stream,\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  const cudaStream_t&amp; stream() const override { return *stream_; }\ntensorflow/core/common_runtime/gpu/gpu_device.cc:    cudaError_t err = cudaStreamAddCallback(*stream_, asyncFree, afData, 0);\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  static void CUDART_CB asyncFree(cudaStream_t stream, cudaError_t status,\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  const cudaStream_t* stream_;          // Not owned.\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  TF_DISALLOW_COPY_AND_ASSIGN(EigenCudaStreamDevice);\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  void Reinitialize(OpKernelContext* context, const cudaStream_t* cuda_stream,\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  EigenCudaStreamDevice stream_device_;\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  const cudaStream_t* cuda_stream = reinterpret_cast&lt;const cudaStream_t*&gt;(\ntensorflow/core/common_runtime/gpu/gpu_device.cc:      streams_[stream_id]-&gt;compute-&gt;implementation()-&gt;CudaStreamMemberHack());\ntensorflow/core/kernels/cuda_solvers.cc:  explicit CudaSolverHandles(cudaStream_t stream) {\ntensorflow/core/kernels/cuda_solvers.cc:    std::unordered_map&lt;cudaStream_t, std::unique_ptr&lt;CudaSolverHandles&gt;&gt;;\ntensorflow/core/kernels/cuda_solvers.cc:  const cudaStream_t* cu_stream_ptr = CHECK_NOTNULL(\ntensorflow/core/kernels/cuda_solvers.cc:      reinterpret_cast&lt;const cudaStream_t*&gt;(context-&gt;op_device_context()\ntensorflow/core/kernels/cuda_solvers.cc:                                                -&gt;CudaStreamMemberHack()));\ntensorflow/core/kernels/cuda_solvers.h:  cudaStream_t cuda_stream_;\ntensorflow/core/kernels/topk_op_gpu.cu.cc:cudaError LaunchTopKKernel(const cudaStream_t&amp; stream, int num_shards,\ntensorflow/core/kernels/topk_op_gpu.cu.cc:  const cudaStream_t&amp; cu_stream = GetCudaStream(ctx);\ntensorflow/core/kernels/topk_op_gpu.cu.cc:      const cudaStream_t&amp; cu_stream = GetCudaStream(context);\ntensorflow/core/kernels/where_op_gpu.cu.cc:    const cudaStream_t&amp; cu_stream = GetCudaStream(ctx);\ntensorflow/core/kernels/where_op_gpu.cu.cc:    const cudaStream_t&amp; cu_stream = GetCudaStream(ctx);\ntensorflow/core/util/cuda_kernel_helper.h:inline const cudaStream_t&amp; GetCudaStream(OpKernelContext* context) {\ntensorflow/core/util/cuda_kernel_helper.h:  const cudaStream_t* ptr = CHECK_NOTNULL(\ntensorflow/core/util/cuda_kernel_helper.h:      reinterpret_cast&lt;const cudaStream_t*&gt;(context-&gt;op_device_context()\ntensorflow/core/util/cuda_kernel_helper.h:                                                -&gt;CudaStreamMemberHack()));\ntensorflow/core/util/cuda_kernel_helper_test.cu.cc:  Eigen::CudaStreamDevice stream;\ntensorflow/stream_executor/cuda/cuda_blas.cc:  CHECK(AsCUDAStreamValue(stream) != nullptr);\ntensorflow/stream_executor/cuda/cuda_blas.cc:      wrap::cublasSetStream(parent_, blas_, AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_blas.cc:    if (!timer-&gt;Init() || !timer-&gt;Start(AsCUDAStream(stream))) {\ntensorflow/stream_executor/cuda/cuda_blas.cc:    if (!timer-&gt;Stop(AsCUDAStream(stream))) {\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    if (!timer-&gt;Start(AsCUDAStream(stream))) {\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    if (!timer-&gt;Stop(AsCUDAStream(stream))) {\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    timer-&gt;Start(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    timer-&gt;Stop(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    timer-&gt;Start(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    timer-&gt;Stop(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_event.cc:port::Status CUDAEvent::Record(CUDAStream* stream) {\ntensorflow/stream_executor/cuda/cuda_event.h:  port::Status Record(CUDAStream* stream);\ntensorflow/stream_executor/cuda/cuda_fft.cc:  auto ret = wrap::cufftSetStream(parent, plan, AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  CUstream custream = AsCUDAStreamValue(stream);\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:      AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:      AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                           AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                           AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                           AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return CUDADriver::AddStreamCallback(context_, AsCUDAStreamValue(stream),\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return AsCUDAEvent(event)-&gt;Record(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                    AsCUDAStream(stream)-&gt;cuda_stream(),\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return AsCUDAStream(stream)-&gt;Init();\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  CUDAStream *cuda_stream = AsCUDAStream(stream);\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  CUevent other_completed_event = *AsCUDAStream(other)-&gt;completed_event();\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                    AsCUDAStreamValue(other))\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return CUDADriver::WaitStreamOnEvent(context_, AsCUDAStreamValue(dependent),\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return AsCUDATimer(timer)-&gt;Start(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return AsCUDATimer(timer)-&gt;Stop(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return CUDADriver::SynchronizeStream(context_, AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return std::unique_ptr&lt;internal::StreamInterface&gt;(new CUDAStream(this));\ntensorflow/stream_executor/cuda/cuda_rng.cc:      wrap::curandSetStream(parent_, rng_, AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_stream.cc:bool CUDAStream::Init() {\ntensorflow/stream_executor/cuda/cuda_stream.cc:void CUDAStream::Destroy() {\ntensorflow/stream_executor/cuda/cuda_stream.cc:bool CUDAStream::IsIdle() const {\ntensorflow/stream_executor/cuda/cuda_stream.cc:CUDAStream *AsCUDAStream(Stream *stream) {\ntensorflow/stream_executor/cuda/cuda_stream.cc:  return static_cast&lt;CUDAStream *&gt;(stream-&gt;implementation());\ntensorflow/stream_executor/cuda/cuda_stream.cc:CUstream AsCUDAStreamValue(Stream *stream) {\ntensorflow/stream_executor/cuda/cuda_stream.cc:  return AsCUDAStream(stream)-&gt;cuda_stream();\ntensorflow/stream_executor/cuda/cuda_stream.h:// Defines the CUDAStream type - the CUDA-specific implementation of the generic\ntensorflow/stream_executor/cuda/cuda_stream.h:class CUDAStream : public internal::StreamInterface {\ntensorflow/stream_executor/cuda/cuda_stream.h:  explicit CUDAStream(CUDAExecutor *parent)\ntensorflow/stream_executor/cuda/cuda_stream.h:  ~CUDAStream() override {}\ntensorflow/stream_executor/cuda/cuda_stream.h:  void *CudaStreamHack() override { return cuda_stream_; }\ntensorflow/stream_executor/cuda/cuda_stream.h:  void **CudaStreamMemberHack() override {\ntensorflow/stream_executor/cuda/cuda_stream.h:  // Precond: this CUDAStream has been allocated (otherwise passing a nullptr\ntensorflow/stream_executor/cuda/cuda_stream.h:// Converts a Stream to the underlying CUDAStream implementation.\ntensorflow/stream_executor/cuda/cuda_stream.h:CUDAStream *AsCUDAStream(Stream *stream);\ntensorflow/stream_executor/cuda/cuda_stream.h:// Extracts a CUstream from a CUDAStream-backed Stream object.\ntensorflow/stream_executor/cuda/cuda_stream.h:CUstream AsCUDAStreamValue(Stream *stream);\ntensorflow/stream_executor/cuda/cuda_timer.cc:bool CUDATimer::Start(CUDAStream *stream) {\ntensorflow/stream_executor/cuda/cuda_timer.cc:bool CUDATimer::Stop(CUDAStream *stream) {\ntensorflow/stream_executor/cuda/cuda_timer.h:class CUDAStream;\ntensorflow/stream_executor/cuda/cuda_timer.h:  bool Start(CUDAStream *stream);\ntensorflow/stream_executor/cuda/cuda_timer.h:  bool Stop(CUDAStream *stream);\ntensorflow/stream_executor/host/host_stream.h:  void *CudaStreamHack() override { return nullptr; }\ntensorflow/stream_executor/host/host_stream.h:  void **CudaStreamMemberHack() override { return nullptr; }\ntensorflow/stream_executor/stream_executor_internal.h:  virtual void *CudaStreamHack() { return nullptr; }\ntensorflow/stream_executor/stream_executor_internal.h:  // See the above comment on CudaStreamHack -- this further breaks abstraction\ntensorflow/stream_executor/stream_executor_internal.h:  virtual void **CudaStreamMemberHack() { return nullptr; }\n</code></pre>", "body_text": "Alright, here's my report, and it's not a great one :'(\nCuda streams are used everywhere in Tensorflow.\nFor BLAS (tensorflow/stream_executor/cuda/cuda_blas.cc)\nFor DNN (tensorflow/stream_executor/cuda/cuda_dnn.cc)\nFor everything else (tensorflow/stream_executor/cuda/cuda_gpu_executor.cc)\nSo yeah, good luck with that. Cuda streams are like operation queues, so they are used throughout as the parallelization semantics for running multiple cuda operations concurrently in Tensorflow. It will require somebody to rewrite all of the Cuda code to be MPS compatible. So yeah, this issue will rewrite a huge rewrite.\nSearching for cudaStream:\ntensorflow/contrib/nccl/kernels/nccl_manager.cc:  const cudaStream_t* cu_stream = reinterpret_cast<const cudaStream_t*>(\ntensorflow/contrib/nccl/kernels/nccl_manager.cc:      comm_stream->implementation()->CudaStreamMemberHack());\ntensorflow/core/common_runtime/gpu/gpu_device.cc:class EigenCudaStreamDevice : public ::Eigen::StreamInterface {\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  EigenCudaStreamDevice()\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  ~EigenCudaStreamDevice() override {}\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  void Reinitialize(OpKernelContext* context, const cudaStream_t* cuda_stream,\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  const cudaStream_t& stream() const override { return *stream_; }\ntensorflow/core/common_runtime/gpu/gpu_device.cc:    cudaError_t err = cudaStreamAddCallback(*stream_, asyncFree, afData, 0);\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  static void CUDART_CB asyncFree(cudaStream_t stream, cudaError_t status,\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  const cudaStream_t* stream_;          // Not owned.\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  TF_DISALLOW_COPY_AND_ASSIGN(EigenCudaStreamDevice);\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  void Reinitialize(OpKernelContext* context, const cudaStream_t* cuda_stream,\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  EigenCudaStreamDevice stream_device_;\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  const cudaStream_t* cuda_stream = reinterpret_cast<const cudaStream_t*>(\ntensorflow/core/common_runtime/gpu/gpu_device.cc:      streams_[stream_id]->compute->implementation()->CudaStreamMemberHack());\ntensorflow/core/kernels/cuda_solvers.cc:  explicit CudaSolverHandles(cudaStream_t stream) {\ntensorflow/core/kernels/cuda_solvers.cc:    std::unordered_map<cudaStream_t, std::unique_ptr<CudaSolverHandles>>;\ntensorflow/core/kernels/cuda_solvers.cc:  const cudaStream_t* cu_stream_ptr = CHECK_NOTNULL(\ntensorflow/core/kernels/cuda_solvers.cc:      reinterpret_cast<const cudaStream_t*>(context->op_device_context()\ntensorflow/core/kernels/cuda_solvers.cc:                                                ->CudaStreamMemberHack()));\ntensorflow/core/kernels/cuda_solvers.h:  cudaStream_t cuda_stream_;\ntensorflow/core/kernels/topk_op_gpu.cu.cc:cudaError LaunchTopKKernel(const cudaStream_t& stream, int num_shards,\ntensorflow/core/kernels/topk_op_gpu.cu.cc:  const cudaStream_t& cu_stream = GetCudaStream(ctx);\ntensorflow/core/kernels/topk_op_gpu.cu.cc:      const cudaStream_t& cu_stream = GetCudaStream(context);\ntensorflow/core/kernels/where_op_gpu.cu.cc:    const cudaStream_t& cu_stream = GetCudaStream(ctx);\ntensorflow/core/kernels/where_op_gpu.cu.cc:    const cudaStream_t& cu_stream = GetCudaStream(ctx);\ntensorflow/core/util/cuda_kernel_helper.h:inline const cudaStream_t& GetCudaStream(OpKernelContext* context) {\ntensorflow/core/util/cuda_kernel_helper.h:  const cudaStream_t* ptr = CHECK_NOTNULL(\ntensorflow/core/util/cuda_kernel_helper.h:      reinterpret_cast<const cudaStream_t*>(context->op_device_context()\ntensorflow/core/util/cuda_kernel_helper.h:                                                ->CudaStreamMemberHack()));\ntensorflow/core/util/cuda_kernel_helper_test.cu.cc:  Eigen::CudaStreamDevice stream;\ntensorflow/stream_executor/cuda/cuda_blas.cc:  CHECK(AsCUDAStreamValue(stream) != nullptr);\ntensorflow/stream_executor/cuda/cuda_blas.cc:      wrap::cublasSetStream(parent_, blas_, AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_blas.cc:    if (!timer->Init() || !timer->Start(AsCUDAStream(stream))) {\ntensorflow/stream_executor/cuda/cuda_blas.cc:    if (!timer->Stop(AsCUDAStream(stream))) {\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    if (!timer->Start(AsCUDAStream(stream))) {\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    if (!timer->Stop(AsCUDAStream(stream))) {\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    timer->Start(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    timer->Stop(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    timer->Start(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    timer->Stop(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_event.cc:port::Status CUDAEvent::Record(CUDAStream* stream) {\ntensorflow/stream_executor/cuda/cuda_event.h:  port::Status Record(CUDAStream* stream);\ntensorflow/stream_executor/cuda/cuda_fft.cc:  auto ret = wrap::cufftSetStream(parent, plan, AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  CUstream custream = AsCUDAStreamValue(stream);\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:      AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:      AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                           AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                           AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                           AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return CUDADriver::AddStreamCallback(context_, AsCUDAStreamValue(stream),\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return AsCUDAEvent(event)->Record(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                    AsCUDAStream(stream)->cuda_stream(),\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return AsCUDAStream(stream)->Init();\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  CUDAStream *cuda_stream = AsCUDAStream(stream);\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  CUevent other_completed_event = *AsCUDAStream(other)->completed_event();\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                    AsCUDAStreamValue(other))\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return CUDADriver::WaitStreamOnEvent(context_, AsCUDAStreamValue(dependent),\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return AsCUDATimer(timer)->Start(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return AsCUDATimer(timer)->Stop(AsCUDAStream(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return CUDADriver::SynchronizeStream(context_, AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return std::unique_ptr<internal::StreamInterface>(new CUDAStream(this));\ntensorflow/stream_executor/cuda/cuda_rng.cc:      wrap::curandSetStream(parent_, rng_, AsCUDAStreamValue(stream));\ntensorflow/stream_executor/cuda/cuda_stream.cc:bool CUDAStream::Init() {\ntensorflow/stream_executor/cuda/cuda_stream.cc:void CUDAStream::Destroy() {\ntensorflow/stream_executor/cuda/cuda_stream.cc:bool CUDAStream::IsIdle() const {\ntensorflow/stream_executor/cuda/cuda_stream.cc:CUDAStream *AsCUDAStream(Stream *stream) {\ntensorflow/stream_executor/cuda/cuda_stream.cc:  return static_cast<CUDAStream *>(stream->implementation());\ntensorflow/stream_executor/cuda/cuda_stream.cc:CUstream AsCUDAStreamValue(Stream *stream) {\ntensorflow/stream_executor/cuda/cuda_stream.cc:  return AsCUDAStream(stream)->cuda_stream();\ntensorflow/stream_executor/cuda/cuda_stream.h:// Defines the CUDAStream type - the CUDA-specific implementation of the generic\ntensorflow/stream_executor/cuda/cuda_stream.h:class CUDAStream : public internal::StreamInterface {\ntensorflow/stream_executor/cuda/cuda_stream.h:  explicit CUDAStream(CUDAExecutor *parent)\ntensorflow/stream_executor/cuda/cuda_stream.h:  ~CUDAStream() override {}\ntensorflow/stream_executor/cuda/cuda_stream.h:  void *CudaStreamHack() override { return cuda_stream_; }\ntensorflow/stream_executor/cuda/cuda_stream.h:  void **CudaStreamMemberHack() override {\ntensorflow/stream_executor/cuda/cuda_stream.h:  // Precond: this CUDAStream has been allocated (otherwise passing a nullptr\ntensorflow/stream_executor/cuda/cuda_stream.h:// Converts a Stream to the underlying CUDAStream implementation.\ntensorflow/stream_executor/cuda/cuda_stream.h:CUDAStream *AsCUDAStream(Stream *stream);\ntensorflow/stream_executor/cuda/cuda_stream.h:// Extracts a CUstream from a CUDAStream-backed Stream object.\ntensorflow/stream_executor/cuda/cuda_stream.h:CUstream AsCUDAStreamValue(Stream *stream);\ntensorflow/stream_executor/cuda/cuda_timer.cc:bool CUDATimer::Start(CUDAStream *stream) {\ntensorflow/stream_executor/cuda/cuda_timer.cc:bool CUDATimer::Stop(CUDAStream *stream) {\ntensorflow/stream_executor/cuda/cuda_timer.h:class CUDAStream;\ntensorflow/stream_executor/cuda/cuda_timer.h:  bool Start(CUDAStream *stream);\ntensorflow/stream_executor/cuda/cuda_timer.h:  bool Stop(CUDAStream *stream);\ntensorflow/stream_executor/host/host_stream.h:  void *CudaStreamHack() override { return nullptr; }\ntensorflow/stream_executor/host/host_stream.h:  void **CudaStreamMemberHack() override { return nullptr; }\ntensorflow/stream_executor/stream_executor_internal.h:  virtual void *CudaStreamHack() { return nullptr; }\ntensorflow/stream_executor/stream_executor_internal.h:  // See the above comment on CudaStreamHack -- this further breaks abstraction\ntensorflow/stream_executor/stream_executor_internal.h:  virtual void **CudaStreamMemberHack() { return nullptr; }", "body": "Alright, here's my report, and it's not a great one :'(\r\n \r\n**Cuda streams are used everywhere in Tensorflow.** \r\n\r\nFor BLAS (tensorflow/stream_executor/cuda/cuda_blas.cc)\r\nFor DNN (tensorflow/stream_executor/cuda/cuda_dnn.cc)\r\nFor everything else (tensorflow/stream_executor/cuda/cuda_gpu_executor.cc)\r\n\r\nSo yeah, good luck with that. Cuda streams are like operation queues, so they are used throughout as the parallelization semantics for running multiple cuda operations concurrently in Tensorflow. It will require somebody to rewrite _all_ of the Cuda code to be MPS compatible. So yeah, this issue will rewrite a huge rewrite. \r\n\r\nSearching for cudaStream:\r\n\r\n```\r\ntensorflow/contrib/nccl/kernels/nccl_manager.cc:  const cudaStream_t* cu_stream = reinterpret_cast<const cudaStream_t*>(\r\ntensorflow/contrib/nccl/kernels/nccl_manager.cc:      comm_stream->implementation()->CudaStreamMemberHack());\r\ntensorflow/core/common_runtime/gpu/gpu_device.cc:class EigenCudaStreamDevice : public ::Eigen::StreamInterface {\r\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  EigenCudaStreamDevice()\r\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  ~EigenCudaStreamDevice() override {}\r\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  void Reinitialize(OpKernelContext* context, const cudaStream_t* cuda_stream,\r\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  const cudaStream_t& stream() const override { return *stream_; }\r\ntensorflow/core/common_runtime/gpu/gpu_device.cc:    cudaError_t err = cudaStreamAddCallback(*stream_, asyncFree, afData, 0);\r\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  static void CUDART_CB asyncFree(cudaStream_t stream, cudaError_t status,\r\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  const cudaStream_t* stream_;          // Not owned.\r\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  TF_DISALLOW_COPY_AND_ASSIGN(EigenCudaStreamDevice);\r\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  void Reinitialize(OpKernelContext* context, const cudaStream_t* cuda_stream,\r\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  EigenCudaStreamDevice stream_device_;\r\ntensorflow/core/common_runtime/gpu/gpu_device.cc:  const cudaStream_t* cuda_stream = reinterpret_cast<const cudaStream_t*>(\r\ntensorflow/core/common_runtime/gpu/gpu_device.cc:      streams_[stream_id]->compute->implementation()->CudaStreamMemberHack());\r\ntensorflow/core/kernels/cuda_solvers.cc:  explicit CudaSolverHandles(cudaStream_t stream) {\r\ntensorflow/core/kernels/cuda_solvers.cc:    std::unordered_map<cudaStream_t, std::unique_ptr<CudaSolverHandles>>;\r\ntensorflow/core/kernels/cuda_solvers.cc:  const cudaStream_t* cu_stream_ptr = CHECK_NOTNULL(\r\ntensorflow/core/kernels/cuda_solvers.cc:      reinterpret_cast<const cudaStream_t*>(context->op_device_context()\r\ntensorflow/core/kernels/cuda_solvers.cc:                                                ->CudaStreamMemberHack()));\r\ntensorflow/core/kernels/cuda_solvers.h:  cudaStream_t cuda_stream_;\r\ntensorflow/core/kernels/topk_op_gpu.cu.cc:cudaError LaunchTopKKernel(const cudaStream_t& stream, int num_shards,\r\ntensorflow/core/kernels/topk_op_gpu.cu.cc:  const cudaStream_t& cu_stream = GetCudaStream(ctx);\r\ntensorflow/core/kernels/topk_op_gpu.cu.cc:      const cudaStream_t& cu_stream = GetCudaStream(context);\r\ntensorflow/core/kernels/where_op_gpu.cu.cc:    const cudaStream_t& cu_stream = GetCudaStream(ctx);\r\ntensorflow/core/kernels/where_op_gpu.cu.cc:    const cudaStream_t& cu_stream = GetCudaStream(ctx);\r\ntensorflow/core/util/cuda_kernel_helper.h:inline const cudaStream_t& GetCudaStream(OpKernelContext* context) {\r\ntensorflow/core/util/cuda_kernel_helper.h:  const cudaStream_t* ptr = CHECK_NOTNULL(\r\ntensorflow/core/util/cuda_kernel_helper.h:      reinterpret_cast<const cudaStream_t*>(context->op_device_context()\r\ntensorflow/core/util/cuda_kernel_helper.h:                                                ->CudaStreamMemberHack()));\r\ntensorflow/core/util/cuda_kernel_helper_test.cu.cc:  Eigen::CudaStreamDevice stream;\r\ntensorflow/stream_executor/cuda/cuda_blas.cc:  CHECK(AsCUDAStreamValue(stream) != nullptr);\r\ntensorflow/stream_executor/cuda/cuda_blas.cc:      wrap::cublasSetStream(parent_, blas_, AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_blas.cc:    if (!timer->Init() || !timer->Start(AsCUDAStream(stream))) {\r\ntensorflow/stream_executor/cuda/cuda_blas.cc:    if (!timer->Stop(AsCUDAStream(stream))) {\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    if (!timer->Start(AsCUDAStream(stream))) {\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    if (!timer->Stop(AsCUDAStream(stream))) {\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    timer->Start(AsCUDAStream(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    timer->Stop(AsCUDAStream(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    timer->Start(AsCUDAStream(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:    timer->Stop(AsCUDAStream(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_dnn.cc:                                     AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_event.cc:port::Status CUDAEvent::Record(CUDAStream* stream) {\r\ntensorflow/stream_executor/cuda/cuda_event.h:  port::Status Record(CUDAStream* stream);\r\ntensorflow/stream_executor/cuda/cuda_fft.cc:  auto ret = wrap::cufftSetStream(parent, plan, AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  CUstream custream = AsCUDAStreamValue(stream);\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:      AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:      AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                           AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                           AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                           AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return CUDADriver::AddStreamCallback(context_, AsCUDAStreamValue(stream),\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return AsCUDAEvent(event)->Record(AsCUDAStream(stream));\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                    AsCUDAStream(stream)->cuda_stream(),\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return AsCUDAStream(stream)->Init();\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  CUDAStream *cuda_stream = AsCUDAStream(stream);\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  CUevent other_completed_event = *AsCUDAStream(other)->completed_event();\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:                                    AsCUDAStreamValue(other))\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return CUDADriver::WaitStreamOnEvent(context_, AsCUDAStreamValue(dependent),\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return AsCUDATimer(timer)->Start(AsCUDAStream(stream));\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return AsCUDATimer(timer)->Stop(AsCUDAStream(stream));\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return CUDADriver::SynchronizeStream(context_, AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_gpu_executor.cc:  return std::unique_ptr<internal::StreamInterface>(new CUDAStream(this));\r\ntensorflow/stream_executor/cuda/cuda_rng.cc:      wrap::curandSetStream(parent_, rng_, AsCUDAStreamValue(stream));\r\ntensorflow/stream_executor/cuda/cuda_stream.cc:bool CUDAStream::Init() {\r\ntensorflow/stream_executor/cuda/cuda_stream.cc:void CUDAStream::Destroy() {\r\ntensorflow/stream_executor/cuda/cuda_stream.cc:bool CUDAStream::IsIdle() const {\r\ntensorflow/stream_executor/cuda/cuda_stream.cc:CUDAStream *AsCUDAStream(Stream *stream) {\r\ntensorflow/stream_executor/cuda/cuda_stream.cc:  return static_cast<CUDAStream *>(stream->implementation());\r\ntensorflow/stream_executor/cuda/cuda_stream.cc:CUstream AsCUDAStreamValue(Stream *stream) {\r\ntensorflow/stream_executor/cuda/cuda_stream.cc:  return AsCUDAStream(stream)->cuda_stream();\r\ntensorflow/stream_executor/cuda/cuda_stream.h:// Defines the CUDAStream type - the CUDA-specific implementation of the generic\r\ntensorflow/stream_executor/cuda/cuda_stream.h:class CUDAStream : public internal::StreamInterface {\r\ntensorflow/stream_executor/cuda/cuda_stream.h:  explicit CUDAStream(CUDAExecutor *parent)\r\ntensorflow/stream_executor/cuda/cuda_stream.h:  ~CUDAStream() override {}\r\ntensorflow/stream_executor/cuda/cuda_stream.h:  void *CudaStreamHack() override { return cuda_stream_; }\r\ntensorflow/stream_executor/cuda/cuda_stream.h:  void **CudaStreamMemberHack() override {\r\ntensorflow/stream_executor/cuda/cuda_stream.h:  // Precond: this CUDAStream has been allocated (otherwise passing a nullptr\r\ntensorflow/stream_executor/cuda/cuda_stream.h:// Converts a Stream to the underlying CUDAStream implementation.\r\ntensorflow/stream_executor/cuda/cuda_stream.h:CUDAStream *AsCUDAStream(Stream *stream);\r\ntensorflow/stream_executor/cuda/cuda_stream.h:// Extracts a CUstream from a CUDAStream-backed Stream object.\r\ntensorflow/stream_executor/cuda/cuda_stream.h:CUstream AsCUDAStreamValue(Stream *stream);\r\ntensorflow/stream_executor/cuda/cuda_timer.cc:bool CUDATimer::Start(CUDAStream *stream) {\r\ntensorflow/stream_executor/cuda/cuda_timer.cc:bool CUDATimer::Stop(CUDAStream *stream) {\r\ntensorflow/stream_executor/cuda/cuda_timer.h:class CUDAStream;\r\ntensorflow/stream_executor/cuda/cuda_timer.h:  bool Start(CUDAStream *stream);\r\ntensorflow/stream_executor/cuda/cuda_timer.h:  bool Stop(CUDAStream *stream);\r\ntensorflow/stream_executor/host/host_stream.h:  void *CudaStreamHack() override { return nullptr; }\r\ntensorflow/stream_executor/host/host_stream.h:  void **CudaStreamMemberHack() override { return nullptr; }\r\ntensorflow/stream_executor/stream_executor_internal.h:  virtual void *CudaStreamHack() { return nullptr; }\r\ntensorflow/stream_executor/stream_executor_internal.h:  // See the above comment on CudaStreamHack -- this further breaks abstraction\r\ntensorflow/stream_executor/stream_executor_internal.h:  virtual void **CudaStreamMemberHack() { return nullptr; }\r\n```"}