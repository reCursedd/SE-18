{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/414592196", "html_url": "https://github.com/tensorflow/tensorflow/issues/20694#issuecomment-414592196", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20694", "id": 414592196, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDU5MjE5Ng==", "user": {"login": "fgr1986", "id": 10627849, "node_id": "MDQ6VXNlcjEwNjI3ODQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/10627849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fgr1986", "html_url": "https://github.com/fgr1986", "followers_url": "https://api.github.com/users/fgr1986/followers", "following_url": "https://api.github.com/users/fgr1986/following{/other_user}", "gists_url": "https://api.github.com/users/fgr1986/gists{/gist_id}", "starred_url": "https://api.github.com/users/fgr1986/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fgr1986/subscriptions", "organizations_url": "https://api.github.com/users/fgr1986/orgs", "repos_url": "https://api.github.com/users/fgr1986/repos", "events_url": "https://api.github.com/users/fgr1986/events{/privacy}", "received_events_url": "https://api.github.com/users/fgr1986/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-21T08:21:30Z", "updated_at": "2018-08-21T08:21:30Z", "author_association": "NONE", "body_html": "<p>Dear <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1450614\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/suharshs\">@suharshs</a> , thank you for your response, but I don't think I can relate your information to the problem I am concerned with: both after a training operation and more especially, after the inference operation, weights and activations can acquire more values than those quantized.<br>\nTo summarize, the weights/activations acquire more values than those that they should, 2^b bits.</p>\n<p>It is my understanding that the expected behavior should be that the maximum number of values they can be map to should be less or equal 2^b bits.<br>\nIf you manually place a FakeQuant operation after a tensor, the  quantization takes place correctly. Therefore I would expect the same for the whole graph quantization.</p>\n<p>In the code above, you can see the problem with</p>\n<pre><code>        print('weights different values in OUT_CH (', OUT_CH, ') elements:',\n              len(np.unique(weights)))\n</code></pre>\n<p>Thank you</p>", "body_text": "Dear @suharshs , thank you for your response, but I don't think I can relate your information to the problem I am concerned with: both after a training operation and more especially, after the inference operation, weights and activations can acquire more values than those quantized.\nTo summarize, the weights/activations acquire more values than those that they should, 2^b bits.\nIt is my understanding that the expected behavior should be that the maximum number of values they can be map to should be less or equal 2^b bits.\nIf you manually place a FakeQuant operation after a tensor, the  quantization takes place correctly. Therefore I would expect the same for the whole graph quantization.\nIn the code above, you can see the problem with\n        print('weights different values in OUT_CH (', OUT_CH, ') elements:',\n              len(np.unique(weights)))\n\nThank you", "body": "Dear @suharshs , thank you for your response, but I don't think I can relate your information to the problem I am concerned with: both after a training operation and more especially, after the inference operation, weights and activations can acquire more values than those quantized.\r\nTo summarize, the weights/activations acquire more values than those that they should, 2^b bits.\r\n\r\nIt is my understanding that the expected behavior should be that the maximum number of values they can be map to should be less or equal 2^b bits.\r\nIf you manually place a FakeQuant operation after a tensor, the  quantization takes place correctly. Therefore I would expect the same for the whole graph quantization.\r\n\r\nIn the code above, you can see the problem with\r\n\r\n```\r\n        print('weights different values in OUT_CH (', OUT_CH, ') elements:',\r\n              len(np.unique(weights)))\r\n```\r\n\r\nThank you"}