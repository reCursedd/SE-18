{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/301709156", "html_url": "https://github.com/tensorflow/tensorflow/pull/9760#issuecomment-301709156", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9760", "id": 301709156, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTcwOTE1Ng==", "user": {"login": "DavidNorman", "id": 606831, "node_id": "MDQ6VXNlcjYwNjgzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/606831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidNorman", "html_url": "https://github.com/DavidNorman", "followers_url": "https://api.github.com/users/DavidNorman/followers", "following_url": "https://api.github.com/users/DavidNorman/following{/other_user}", "gists_url": "https://api.github.com/users/DavidNorman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidNorman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidNorman/subscriptions", "organizations_url": "https://api.github.com/users/DavidNorman/orgs", "repos_url": "https://api.github.com/users/DavidNorman/repos", "events_url": "https://api.github.com/users/DavidNorman/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidNorman/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-16T08:14:27Z", "updated_at": "2017-05-16T08:14:27Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for the review.   I decided to leave the name of the headers only libraries \"xxx_headers_lib\", to be consistent with things like \"framework_headers_lib\" and \"stream_executor_headers_lib\".</p>\n<p>Incidentally, I have been talking to the bazel people who are working on allowing bazel to be able to describe a shared library target that depends on a mixture of other shared objects and static libraries.   this should help remove the need for these header only targets.  not sure when that is coming though.</p>\n<p>anyway - these particular ones are needed for more than just static library hiding - they also expose the API without creating circular dependencies, and allow access to some headers that are part of non-public libraries.</p>\n<p>i am not creating an independent shared object for my plugin at the moment.  protobuf doesn't work for the case where 2 shared objects both link to it and are loaded into the same address space.</p>", "body_text": "Thanks for the review.   I decided to leave the name of the headers only libraries \"xxx_headers_lib\", to be consistent with things like \"framework_headers_lib\" and \"stream_executor_headers_lib\".\nIncidentally, I have been talking to the bazel people who are working on allowing bazel to be able to describe a shared library target that depends on a mixture of other shared objects and static libraries.   this should help remove the need for these header only targets.  not sure when that is coming though.\nanyway - these particular ones are needed for more than just static library hiding - they also expose the API without creating circular dependencies, and allow access to some headers that are part of non-public libraries.\ni am not creating an independent shared object for my plugin at the moment.  protobuf doesn't work for the case where 2 shared objects both link to it and are loaded into the same address space.", "body": "Thanks for the review.   I decided to leave the name of the headers only libraries \"xxx_headers_lib\", to be consistent with things like \"framework_headers_lib\" and \"stream_executor_headers_lib\". \r\n\r\nIncidentally, I have been talking to the bazel people who are working on allowing bazel to be able to describe a shared library target that depends on a mixture of other shared objects and static libraries.   this should help remove the need for these header only targets.  not sure when that is coming though.\r\n\r\nanyway - these particular ones are needed for more than just static library hiding - they also expose the API without creating circular dependencies, and allow access to some headers that are part of non-public libraries.\r\n\r\ni am not creating an independent shared object for my plugin at the moment.  protobuf doesn't work for the case where 2 shared objects both link to it and are loaded into the same address space.\r\n"}