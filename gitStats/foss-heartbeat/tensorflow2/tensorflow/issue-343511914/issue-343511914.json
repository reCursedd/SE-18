{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21046", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21046/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21046/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21046/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/21046", "id": 343511914, "node_id": "MDExOlB1bGxSZXF1ZXN0MjAzMTI2NzY4", "number": 21046, "title": "Adding a callback function to improve flexibility of Keras", "user": {"login": "wangqin4377", "id": 5886719, "node_id": "MDQ6VXNlcjU4ODY3MTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5886719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wangqin4377", "html_url": "https://github.com/wangqin4377", "followers_url": "https://api.github.com/users/wangqin4377/followers", "following_url": "https://api.github.com/users/wangqin4377/following{/other_user}", "gists_url": "https://api.github.com/users/wangqin4377/gists{/gist_id}", "starred_url": "https://api.github.com/users/wangqin4377/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wangqin4377/subscriptions", "organizations_url": "https://api.github.com/users/wangqin4377/orgs", "repos_url": "https://api.github.com/users/wangqin4377/repos", "events_url": "https://api.github.com/users/wangqin4377/events{/privacy}", "received_events_url": "https://api.github.com/users/wangqin4377/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136613, "node_id": "MDU6TGFiZWwzMDAxMzY2MTM=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20no", "name": "cla: no", "color": "eb6420", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-23T07:06:10Z", "updated_at": "2018-07-23T07:51:35Z", "closed_at": "2018-07-23T07:51:35Z", "author_association": "NONE", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21046", "html_url": "https://github.com/tensorflow/tensorflow/pull/21046", "diff_url": "https://github.com/tensorflow/tensorflow/pull/21046.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/21046.patch"}, "body_html": "<p>Hello everyone, I added one member function in <code>DirectoryIterator</code> class allow developer to register callback functions when pumping data by <code>flow_from_directory</code> of <code>ImageDataGenerator</code> class. It's can improve flexibility when have complex data structure of feature and label. It's very useful to register a customize function to process their own logic to integrate the <code>batch_x</code> and <code>batch_y</code>. It can make the <code>DirectoryIterator</code> pump the data structure what the model required.</p>\n<blockquote>\n<p>example:</p>\n</blockquote>\n<pre><code>def process_train_batch_X(raw_x_batch, filenames, index_array):\n    tmp_temperature = []\n    tmp_time = []\n    for i, j in enumerate(index_array):\n        tmp_temperature.append(get_temp_from_str(filenames[j]))\n        tmp_time.append(get_time_from_str(filenames[j]))\n    # get discretization array from the filename\n    x_batch_wet = utils.discretization(tmp_temperature)\n    x_batch_time = utils.discretization(tmp_time)\n    x_batch = [raw_x_batch, x_batch_wet, x_batch_time]\n    return x_batch\n\ndef process_batch_Y(raw_x_batch, filenames, index_array):\n    .....\n\ntrain_iterator.register_batch_processor(process_train_batch_X, process_batch_Y)\n</code></pre>", "body_text": "Hello everyone, I added one member function in DirectoryIterator class allow developer to register callback functions when pumping data by flow_from_directory of ImageDataGenerator class. It's can improve flexibility when have complex data structure of feature and label. It's very useful to register a customize function to process their own logic to integrate the batch_x and batch_y. It can make the DirectoryIterator pump the data structure what the model required.\n\nexample:\n\ndef process_train_batch_X(raw_x_batch, filenames, index_array):\n    tmp_temperature = []\n    tmp_time = []\n    for i, j in enumerate(index_array):\n        tmp_temperature.append(get_temp_from_str(filenames[j]))\n        tmp_time.append(get_time_from_str(filenames[j]))\n    # get discretization array from the filename\n    x_batch_wet = utils.discretization(tmp_temperature)\n    x_batch_time = utils.discretization(tmp_time)\n    x_batch = [raw_x_batch, x_batch_wet, x_batch_time]\n    return x_batch\n\ndef process_batch_Y(raw_x_batch, filenames, index_array):\n    .....\n\ntrain_iterator.register_batch_processor(process_train_batch_X, process_batch_Y)", "body": "Hello everyone, I added one member function in `DirectoryIterator` class allow developer to register callback functions when pumping data by `flow_from_directory` of `ImageDataGenerator` class. It's can improve flexibility when have complex data structure of feature and label. It's very useful to register a customize function to process their own logic to integrate the `batch_x` and `batch_y`. It can make the `DirectoryIterator` pump the data structure what the model required.\r\n\r\n> example:\r\n\r\n```\r\ndef process_train_batch_X(raw_x_batch, filenames, index_array):\r\n    tmp_temperature = []\r\n    tmp_time = []\r\n    for i, j in enumerate(index_array):\r\n        tmp_temperature.append(get_temp_from_str(filenames[j]))\r\n        tmp_time.append(get_time_from_str(filenames[j]))\r\n    # get discretization array from the filename\r\n    x_batch_wet = utils.discretization(tmp_temperature)\r\n    x_batch_time = utils.discretization(tmp_time)\r\n    x_batch = [raw_x_batch, x_batch_wet, x_batch_time]\r\n    return x_batch\r\n\r\ndef process_batch_Y(raw_x_batch, filenames, index_array):\r\n    .....\r\n\r\ntrain_iterator.register_batch_processor(process_train_batch_X, process_batch_Y)\r\n```"}