{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/374420900", "html_url": "https://github.com/tensorflow/tensorflow/pull/17846#issuecomment-374420900", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17846", "id": 374420900, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDQyMDkwMA==", "user": {"login": "allenlavoie", "id": 3731025, "node_id": "MDQ6VXNlcjM3MzEwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3731025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenlavoie", "html_url": "https://github.com/allenlavoie", "followers_url": "https://api.github.com/users/allenlavoie/followers", "following_url": "https://api.github.com/users/allenlavoie/following{/other_user}", "gists_url": "https://api.github.com/users/allenlavoie/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenlavoie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenlavoie/subscriptions", "organizations_url": "https://api.github.com/users/allenlavoie/orgs", "repos_url": "https://api.github.com/users/allenlavoie/repos", "events_url": "https://api.github.com/users/allenlavoie/events{/privacy}", "received_events_url": "https://api.github.com/users/allenlavoie/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-19T23:30:56Z", "updated_at": "2018-03-19T23:30:56Z", "author_association": "MEMBER", "body_html": "<p>This seems problematic to me (but maybe I'm missing context). It looks like it's including a second copy of the protocol buffer implementation / arena allocator in the op library?</p>\n<p>I don't know much about the Raspberry Pi build, but the way the symbol in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"304121251\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/17619\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/17619/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/17619\">#17619</a> should be defined is either (1) via linking to libtensorflow_framework.so when building normally, or (2) from _pywrap_tensorflow_internal.so via RTLD_GLOBAL when building with --config=monolithic (which may be the default for Raspberry Pi).</p>\n<p>Linking in a second copy of protocol buffers for a custom/contrib op may work in some cases (if the same arena allocator happens to be used consistently), but I wouldn't rely on it.</p>\n<p>So I think this should be wrapped in a select() so that it's Raspberry Pi-specific if it's necessary there. I don't see why it would be, though, since presumably we already have a copy of protocol buffers in that build too (but it'd need debugging to figure out what's going wrong with the linking, so I'm not necessarily opposed to this as a temporary hack on that platform).</p>", "body_text": "This seems problematic to me (but maybe I'm missing context). It looks like it's including a second copy of the protocol buffer implementation / arena allocator in the op library?\nI don't know much about the Raspberry Pi build, but the way the symbol in #17619 should be defined is either (1) via linking to libtensorflow_framework.so when building normally, or (2) from _pywrap_tensorflow_internal.so via RTLD_GLOBAL when building with --config=monolithic (which may be the default for Raspberry Pi).\nLinking in a second copy of protocol buffers for a custom/contrib op may work in some cases (if the same arena allocator happens to be used consistently), but I wouldn't rely on it.\nSo I think this should be wrapped in a select() so that it's Raspberry Pi-specific if it's necessary there. I don't see why it would be, though, since presumably we already have a copy of protocol buffers in that build too (but it'd need debugging to figure out what's going wrong with the linking, so I'm not necessarily opposed to this as a temporary hack on that platform).", "body": "This seems problematic to me (but maybe I'm missing context). It looks like it's including a second copy of the protocol buffer implementation / arena allocator in the op library?\r\n\r\nI don't know much about the Raspberry Pi build, but the way the symbol in https://github.com/tensorflow/tensorflow/issues/17619 should be defined is either (1) via linking to libtensorflow_framework.so when building normally, or (2) from _pywrap_tensorflow_internal.so via RTLD_GLOBAL when building with --config=monolithic (which may be the default for Raspberry Pi).\r\n\r\nLinking in a second copy of protocol buffers for a custom/contrib op may work in some cases (if the same arena allocator happens to be used consistently), but I wouldn't rely on it.\r\n\r\nSo I think this should be wrapped in a select() so that it's Raspberry Pi-specific if it's necessary there. I don't see why it would be, though, since presumably we already have a copy of protocol buffers in that build too (but it'd need debugging to figure out what's going wrong with the linking, so I'm not necessarily opposed to this as a temporary hack on that platform)."}