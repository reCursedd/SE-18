{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15161", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15161/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15161/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15161/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15161", "id": 279838630, "node_id": "MDU6SXNzdWUyNzk4Mzg2MzA=", "number": 15161, "title": "Create Simple DNNClassifier ", "user": {"login": "Giuseppe-Accardo", "id": 33551525, "node_id": "MDQ6VXNlcjMzNTUxNTI1", "avatar_url": "https://avatars0.githubusercontent.com/u/33551525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Giuseppe-Accardo", "html_url": "https://github.com/Giuseppe-Accardo", "followers_url": "https://api.github.com/users/Giuseppe-Accardo/followers", "following_url": "https://api.github.com/users/Giuseppe-Accardo/following{/other_user}", "gists_url": "https://api.github.com/users/Giuseppe-Accardo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Giuseppe-Accardo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Giuseppe-Accardo/subscriptions", "organizations_url": "https://api.github.com/users/Giuseppe-Accardo/orgs", "repos_url": "https://api.github.com/users/Giuseppe-Accardo/repos", "events_url": "https://api.github.com/users/Giuseppe-Accardo/events{/privacy}", "received_events_url": "https://api.github.com/users/Giuseppe-Accardo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2017-12-06T17:24:12Z", "updated_at": "2018-05-17T00:59:17Z", "closed_at": "2018-05-17T00:59:17Z", "author_association": "NONE", "body_html": "<p>Hi, I'm beginner in Machine Learning and Tensorflow.<br>\nI edited <a href=\"https://www.tensorflow.org/get_started/estimator\" rel=\"nofollow\">this</a> to adapt it to my dataset (102 features-input and 4 classes-output).</p>\n<p><strong>Question:</strong><br>\nThis simple approach is correct for a simple classifier?<br>\nWhy can't I change the number of nodes and levels (compilier gives errors)?</p>\n<p><strong>Code:</strong></p>\n<pre><code>from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nimport os\nfrom six.moves.urllib.request import urlopen\nimport numpy as np\nimport tensorflow as tf\nimport EstraiFeature as ef\nfrom pyAudioAnalysis import audioBasicIO\n# Datasets (Training and Testing set doesn't refer to iris)\nIRIS_TRAINING = \"/Users/giuseppeaccardo/Documents/python/Depressione/TrainingSet.csv\" \nIRIS_TEST = \"/Users/giuseppeaccardo/Documents/python/Depressione/TestingSet.csv\" \n\ndef main():\n    # Load datasets.\n    training_set = tf.contrib.learn.datasets.base.load_csv_with_header(\n        filename=IRIS_TRAINING,\n        target_dtype=np.int,\n        features_dtype=np.float32)\n    test_set = tf.contrib.learn.datasets.base.load_csv_with_header(\n        filename=IRIS_TEST,\n        target_dtype=np.int,\n        features_dtype=np.float32)\n\n    # Specify that all features have real-value data\n    feature_columns = [tf.feature_column.numeric_column(\"x\", shape=[102])]\n    \n    # Build 3 layer DNN with 10, 20, 10 units respectively. How can I change this values? \n    classifier = tf.estimator.DNNClassifier(feature_columns=feature_columns,\n                                          hidden_units=[10,20, 10],\n                                          n_classes=4,\n                                          model_dir=\"/tmp/depres_model\")\n    \n   # Define the TRAINING inputs, includes both the feature (DNN input end) and target (DNN output end)\n    train_input_fn = tf.estimator.inputs.numpy_input_fn(\n        x={\"x\": np.array(training_set.data)}, #training_set.data\n        y=np.array(training_set.target), #training_set.target\n        num_epochs=None,\n        shuffle=True)\n    \n    # Fit model.\n    print(\"Training classfier...\")\n    classifier.train(\n        input_fn = train_input_fn,\n        steps = 2000)\n\n    #Define the TEST inputs, both feature and target\n    test_input_fn = tf.estimator.inputs.numpy_input_fn(\n        x={\"x\":np.array(test_set.data)},\n        y=np.array(test_set.target),\n        num_epochs=1,\n        shuffle=False)\n\n    #Evaluate accuracy after training\n    accuracy_score = classifier.evaluate(\n        input_fn=test_input_fn)[\"accuracy\"]\n\n    print(\"\\nTest Accuracy: {0:f}\\n\".format(accuracy_score))\n    # Bag of words  approach -&gt; Conta le label pi\u00f9 ripetute per ogni mid range\n    # PREDIZIONE\n    #Predict with new data\n    filename = \"/Users/giuseppeaccardo/Documents/python/Depressione/dataset/audio/426_AUDIO.wav\"\n    [Fs, signal] = audioBasicIO.readAudioFile(filename)  # read audio signal\n    [mtFeatures, _] = ef.estraiFeatureMt(signal, Fs)\n    mtF = mtFeatures.T       \n    new_samples = np.array(\n        mtF, dtype=np.float32\n    )        \n\n    predict_input_fn = tf.estimator.inputs.numpy_input_fn(\n        x={\"x\":new_samples},\n        num_epochs=1,\n        shuffle=False\n    )\n\n    predictions = list(classifier.predict(input_fn=predict_input_fn))\n    countLabel = [0,0,0,0]\n    classPredict = 0\n    \n    for p in predictions:\n        countLabel[int(p[\"class_ids\"])] +=1\n        \n    print(countLabel)\n    print(\"Prevision is \"+ str(countLabel.index(max(countLabel))) ) \n    \nif __name__ == \"__main__\":\n    main()\n</code></pre>", "body_text": "Hi, I'm beginner in Machine Learning and Tensorflow.\nI edited this to adapt it to my dataset (102 features-input and 4 classes-output).\nQuestion:\nThis simple approach is correct for a simple classifier?\nWhy can't I change the number of nodes and levels (compilier gives errors)?\nCode:\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nimport os\nfrom six.moves.urllib.request import urlopen\nimport numpy as np\nimport tensorflow as tf\nimport EstraiFeature as ef\nfrom pyAudioAnalysis import audioBasicIO\n# Datasets (Training and Testing set doesn't refer to iris)\nIRIS_TRAINING = \"/Users/giuseppeaccardo/Documents/python/Depressione/TrainingSet.csv\" \nIRIS_TEST = \"/Users/giuseppeaccardo/Documents/python/Depressione/TestingSet.csv\" \n\ndef main():\n    # Load datasets.\n    training_set = tf.contrib.learn.datasets.base.load_csv_with_header(\n        filename=IRIS_TRAINING,\n        target_dtype=np.int,\n        features_dtype=np.float32)\n    test_set = tf.contrib.learn.datasets.base.load_csv_with_header(\n        filename=IRIS_TEST,\n        target_dtype=np.int,\n        features_dtype=np.float32)\n\n    # Specify that all features have real-value data\n    feature_columns = [tf.feature_column.numeric_column(\"x\", shape=[102])]\n    \n    # Build 3 layer DNN with 10, 20, 10 units respectively. How can I change this values? \n    classifier = tf.estimator.DNNClassifier(feature_columns=feature_columns,\n                                          hidden_units=[10,20, 10],\n                                          n_classes=4,\n                                          model_dir=\"/tmp/depres_model\")\n    \n   # Define the TRAINING inputs, includes both the feature (DNN input end) and target (DNN output end)\n    train_input_fn = tf.estimator.inputs.numpy_input_fn(\n        x={\"x\": np.array(training_set.data)}, #training_set.data\n        y=np.array(training_set.target), #training_set.target\n        num_epochs=None,\n        shuffle=True)\n    \n    # Fit model.\n    print(\"Training classfier...\")\n    classifier.train(\n        input_fn = train_input_fn,\n        steps = 2000)\n\n    #Define the TEST inputs, both feature and target\n    test_input_fn = tf.estimator.inputs.numpy_input_fn(\n        x={\"x\":np.array(test_set.data)},\n        y=np.array(test_set.target),\n        num_epochs=1,\n        shuffle=False)\n\n    #Evaluate accuracy after training\n    accuracy_score = classifier.evaluate(\n        input_fn=test_input_fn)[\"accuracy\"]\n\n    print(\"\\nTest Accuracy: {0:f}\\n\".format(accuracy_score))\n    # Bag of words  approach -> Conta le label pi\u00f9 ripetute per ogni mid range\n    # PREDIZIONE\n    #Predict with new data\n    filename = \"/Users/giuseppeaccardo/Documents/python/Depressione/dataset/audio/426_AUDIO.wav\"\n    [Fs, signal] = audioBasicIO.readAudioFile(filename)  # read audio signal\n    [mtFeatures, _] = ef.estraiFeatureMt(signal, Fs)\n    mtF = mtFeatures.T       \n    new_samples = np.array(\n        mtF, dtype=np.float32\n    )        \n\n    predict_input_fn = tf.estimator.inputs.numpy_input_fn(\n        x={\"x\":new_samples},\n        num_epochs=1,\n        shuffle=False\n    )\n\n    predictions = list(classifier.predict(input_fn=predict_input_fn))\n    countLabel = [0,0,0,0]\n    classPredict = 0\n    \n    for p in predictions:\n        countLabel[int(p[\"class_ids\"])] +=1\n        \n    print(countLabel)\n    print(\"Prevision is \"+ str(countLabel.index(max(countLabel))) ) \n    \nif __name__ == \"__main__\":\n    main()", "body": "Hi, I'm beginner in Machine Learning and Tensorflow.\r\nI edited [this](https://www.tensorflow.org/get_started/estimator) to adapt it to my dataset (102 features-input and 4 classes-output).\r\n\r\n**Question:**\r\nThis simple approach is correct for a simple classifier?\r\nWhy can't I change the number of nodes and levels (compilier gives errors)? \r\n\r\n**Code:**\r\n\r\n```\r\nfrom __future__ import absolute_import\r\nfrom __future__ import division\r\nfrom __future__ import print_function\r\nimport os\r\nfrom six.moves.urllib.request import urlopen\r\nimport numpy as np\r\nimport tensorflow as tf\r\nimport EstraiFeature as ef\r\nfrom pyAudioAnalysis import audioBasicIO\r\n# Datasets (Training and Testing set doesn't refer to iris)\r\nIRIS_TRAINING = \"/Users/giuseppeaccardo/Documents/python/Depressione/TrainingSet.csv\" \r\nIRIS_TEST = \"/Users/giuseppeaccardo/Documents/python/Depressione/TestingSet.csv\" \r\n\r\ndef main():\r\n    # Load datasets.\r\n    training_set = tf.contrib.learn.datasets.base.load_csv_with_header(\r\n        filename=IRIS_TRAINING,\r\n        target_dtype=np.int,\r\n        features_dtype=np.float32)\r\n    test_set = tf.contrib.learn.datasets.base.load_csv_with_header(\r\n        filename=IRIS_TEST,\r\n        target_dtype=np.int,\r\n        features_dtype=np.float32)\r\n\r\n    # Specify that all features have real-value data\r\n    feature_columns = [tf.feature_column.numeric_column(\"x\", shape=[102])]\r\n    \r\n    # Build 3 layer DNN with 10, 20, 10 units respectively. How can I change this values? \r\n    classifier = tf.estimator.DNNClassifier(feature_columns=feature_columns,\r\n                                          hidden_units=[10,20, 10],\r\n                                          n_classes=4,\r\n                                          model_dir=\"/tmp/depres_model\")\r\n    \r\n   # Define the TRAINING inputs, includes both the feature (DNN input end) and target (DNN output end)\r\n    train_input_fn = tf.estimator.inputs.numpy_input_fn(\r\n        x={\"x\": np.array(training_set.data)}, #training_set.data\r\n        y=np.array(training_set.target), #training_set.target\r\n        num_epochs=None,\r\n        shuffle=True)\r\n    \r\n    # Fit model.\r\n    print(\"Training classfier...\")\r\n    classifier.train(\r\n        input_fn = train_input_fn,\r\n        steps = 2000)\r\n\r\n    #Define the TEST inputs, both feature and target\r\n    test_input_fn = tf.estimator.inputs.numpy_input_fn(\r\n        x={\"x\":np.array(test_set.data)},\r\n        y=np.array(test_set.target),\r\n        num_epochs=1,\r\n        shuffle=False)\r\n\r\n    #Evaluate accuracy after training\r\n    accuracy_score = classifier.evaluate(\r\n        input_fn=test_input_fn)[\"accuracy\"]\r\n\r\n    print(\"\\nTest Accuracy: {0:f}\\n\".format(accuracy_score))\r\n    # Bag of words  approach -> Conta le label pi\u00f9 ripetute per ogni mid range\r\n    # PREDIZIONE\r\n    #Predict with new data\r\n    filename = \"/Users/giuseppeaccardo/Documents/python/Depressione/dataset/audio/426_AUDIO.wav\"\r\n    [Fs, signal] = audioBasicIO.readAudioFile(filename)  # read audio signal\r\n    [mtFeatures, _] = ef.estraiFeatureMt(signal, Fs)\r\n    mtF = mtFeatures.T       \r\n    new_samples = np.array(\r\n        mtF, dtype=np.float32\r\n    )        \r\n\r\n    predict_input_fn = tf.estimator.inputs.numpy_input_fn(\r\n        x={\"x\":new_samples},\r\n        num_epochs=1,\r\n        shuffle=False\r\n    )\r\n\r\n    predictions = list(classifier.predict(input_fn=predict_input_fn))\r\n    countLabel = [0,0,0,0]\r\n    classPredict = 0\r\n    \r\n    for p in predictions:\r\n        countLabel[int(p[\"class_ids\"])] +=1\r\n        \r\n    print(countLabel)\r\n    print(\"Prevision is \"+ str(countLabel.index(max(countLabel))) ) \r\n    \r\nif __name__ == \"__main__\":\r\n    main()\r\n```"}