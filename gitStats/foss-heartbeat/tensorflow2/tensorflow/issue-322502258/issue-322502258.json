{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19244", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19244/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19244/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19244/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19244", "id": 322502258, "node_id": "MDU6SXNzdWUzMjI1MDIyNTg=", "number": 19244, "title": "tf.contrib.data.prefetch_to_device not compatible with tf.data.Iterator.from_structure", "user": {"login": "RunOrVeith", "id": 12949211, "node_id": "MDQ6VXNlcjEyOTQ5MjEx", "avatar_url": "https://avatars3.githubusercontent.com/u/12949211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RunOrVeith", "html_url": "https://github.com/RunOrVeith", "followers_url": "https://api.github.com/users/RunOrVeith/followers", "following_url": "https://api.github.com/users/RunOrVeith/following{/other_user}", "gists_url": "https://api.github.com/users/RunOrVeith/gists{/gist_id}", "starred_url": "https://api.github.com/users/RunOrVeith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RunOrVeith/subscriptions", "organizations_url": "https://api.github.com/users/RunOrVeith/orgs", "repos_url": "https://api.github.com/users/RunOrVeith/repos", "events_url": "https://api.github.com/users/RunOrVeith/events{/privacy}", "received_events_url": "https://api.github.com/users/RunOrVeith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-05-12T11:00:33Z", "updated_at": "2018-07-26T18:10:29Z", "closed_at": "2018-07-26T18:10:29Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\ntensorflow-gpu binary</li>\n<li><strong>Bazel Version</strong>:<br>\nN/A</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\nv1.8.0-0-g93bc2e2072 1.8.0</li>\n<li><strong>Python version</strong>:<br>\n3.6.3</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\nCUDA 9.0 cuDNN 7.0.3</li>\n<li><strong>GPU model and memory</strong>:<br>\nGTX 1070 8 GB VRAM</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MyData</span>(<span class=\"pl-c1\">object</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__call__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n         <span class=\"pl-k\">return</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">100</span>)\n\nexpected_shapes <span class=\"pl-k\">=</span> []\nexpected_types <span class=\"pl-k\">=</span> tf.int32\niterator <span class=\"pl-k\">=</span> tf.data.Iterator.from_structure(<span class=\"pl-v\">output_types</span><span class=\"pl-k\">=</span>expected_types, <span class=\"pl-v\">output_shapes</span><span class=\"pl-k\">=</span>expected_shapes)\ndataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_generator(MyData(), <span class=\"pl-v\">output_types</span><span class=\"pl-k\">=</span>expected_types, <span class=\"pl-v\">output_shapes</span><span class=\"pl-k\">=</span>expected_shapes)\n\nprefetch_op <span class=\"pl-k\">=</span> tf.contrib.data.prefetch_to_device(<span class=\"pl-v\">device</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/gpu:0<span class=\"pl-pds\">\"</span></span>)\ndataset <span class=\"pl-k\">=</span> dataset.apply(prefetch_op)\ninitializer <span class=\"pl-k\">=</span> iterator.make_initializer(dataset)</pre></div>\n<h3>Describe the problem</h3>\n<p>This raises <code>NotImplementedError: prefetch_to_device() must be the last transformation in a dataset pipeline</code>.</p>\n<p>It is not possible to apply this to the dataset after the initializer has been created, since a new dataset is returned, instead of it being modified in place.</p>\n<p>If one reads through <a href=\"https://github.com/tensorflow/tensorflow/commit/4681562607bf4001ecd61492f1e7567be9212c6f\">this testcase</a>, it is clear that it works when creating the iterator from the dataset.</p>\n<p>It is  <strong>not</strong> clear from <a href=\"https://www.tensorflow.org/api_docs/python/tf/data/Iterator#make_initializer\" rel=\"nofollow\">the documentation of <code>make_initializer</code></a> that this function is a transformation of the dataset and thus counts as an additional step after prefetching.<br>\nI am not sure if this is a bug/was overlooked, or is known to be not implemented.</p>\n<p><strong>Proposed short term solution</strong>:</p>\n<ol>\n<li>Mention in the <a href=\"https://www.tensorflow.org/versions/master/api_docs/python/tf/contrib/data/prefetch_to_device\" rel=\"nofollow\">documentation of <code>prefetch_to_device</code></a>, that it is not supported in combination with <code>make_initializer</code>.</li>\n<li>Mention in the documentation of <code>make_initializer</code> that this operation modifies the dataset<br>\n(although I don't think this is the correct choice of words, the issue is with a call to <code>dataset._as_variant_tensor</code> in <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/data/ops/iterator_ops.py\"><code>make_initializer</code> line 308</a>).</li>\n</ol>\n<p><strong>Proposed longterm solution</strong>:</p>\n<ol>\n<li><em>This is already a TODO in line 289 of <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/data/python/ops/prefetching_ops.py\">prefetching_ops.py</a></em>:<br>\nImplement <code>_as_variant_tensor</code> for <code>_PrefetchToDeviceDataset</code>.</li>\n</ol>\n<h3>Reason why this is needed:</h3>\n<p>Creating the data pipeline using <code>from_structure</code> and  <code>make_initializer</code> allows to dynamically switch the input source to the network, e.g. between training and testing set after an epoch without having to reinitialize the graph or fall back to using feed dicts.</p>\n<h3>Source code / logs</h3>\n<p>Exact stack trace of the error:</p>\n<div class=\"highlight highlight-source-shell\"><pre>Traceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test.py<span class=\"pl-pds\">\"</span></span>, line 14, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n    initializer = iterator.make_initializer(dataset)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/veith/.pyenv/versions/3.6.3/lib/python3.6/site-packages/tensorflow/python/data/ops/iterator_ops.py<span class=\"pl-pds\">\"</span></span>, line 308, <span class=\"pl-k\">in</span> make_initializer\n    <span class=\"pl-en\">dataset._as_variant_tensor</span>(), self._iterator_resource, name=name)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> pylint: disable=protected-access</span>\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/home/veith/.pyenv/versions/3.6.3/lib/python3.6/site-packages/tensorflow/contrib/data/python/ops/prefetching_ops.py<span class=\"pl-pds\">\"</span></span>, line 291, <span class=\"pl-k\">in</span> _as_variant_tensor\n    raise <span class=\"pl-en\">NotImplementedError(\"`prefetch_to_device</span>()<span class=\"pl-s\"><span class=\"pl-pds\">`</span> must be the last <span class=\"pl-s\"><span class=\"pl-pds\">\"</span></span></span>\n<span class=\"pl-s\"><span class=\"pl-s\">NotImplementedError: <span class=\"pl-s\"><span class=\"pl-pds\">`</span>prefetch_to_device()<span class=\"pl-pds\">`</span></span> must be the last transformation in a dataset pipeline.</span></span></pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux Ubuntu 16.04\nTensorFlow installed from (source or binary):\ntensorflow-gpu binary\nBazel Version:\nN/A\nTensorFlow version (use command below):\nv1.8.0-0-g93bc2e2072 1.8.0\nPython version:\n3.6.3\nCUDA/cuDNN version:\nCUDA 9.0 cuDNN 7.0.3\nGPU model and memory:\nGTX 1070 8 GB VRAM\nExact command to reproduce:\n\nimport tensorflow as tf\n\nclass MyData(object):\n    def __call__(self):\n         return range(100)\n\nexpected_shapes = []\nexpected_types = tf.int32\niterator = tf.data.Iterator.from_structure(output_types=expected_types, output_shapes=expected_shapes)\ndataset = tf.data.Dataset.from_generator(MyData(), output_types=expected_types, output_shapes=expected_shapes)\n\nprefetch_op = tf.contrib.data.prefetch_to_device(device=\"/gpu:0\")\ndataset = dataset.apply(prefetch_op)\ninitializer = iterator.make_initializer(dataset)\nDescribe the problem\nThis raises NotImplementedError: prefetch_to_device() must be the last transformation in a dataset pipeline.\nIt is not possible to apply this to the dataset after the initializer has been created, since a new dataset is returned, instead of it being modified in place.\nIf one reads through this testcase, it is clear that it works when creating the iterator from the dataset.\nIt is  not clear from the documentation of make_initializer that this function is a transformation of the dataset and thus counts as an additional step after prefetching.\nI am not sure if this is a bug/was overlooked, or is known to be not implemented.\nProposed short term solution:\n\nMention in the documentation of prefetch_to_device, that it is not supported in combination with make_initializer.\nMention in the documentation of make_initializer that this operation modifies the dataset\n(although I don't think this is the correct choice of words, the issue is with a call to dataset._as_variant_tensor in make_initializer line 308).\n\nProposed longterm solution:\n\nThis is already a TODO in line 289 of prefetching_ops.py:\nImplement _as_variant_tensor for _PrefetchToDeviceDataset.\n\nReason why this is needed:\nCreating the data pipeline using from_structure and  make_initializer allows to dynamically switch the input source to the network, e.g. between training and testing set after an epoch without having to reinitialize the graph or fall back to using feed dicts.\nSource code / logs\nExact stack trace of the error:\nTraceback (most recent call last):\n  File \"test.py\", line 14, in <module>\n    initializer = iterator.make_initializer(dataset)\n  File \"/home/veith/.pyenv/versions/3.6.3/lib/python3.6/site-packages/tensorflow/python/data/ops/iterator_ops.py\", line 308, in make_initializer\n    dataset._as_variant_tensor(), self._iterator_resource, name=name)  # pylint: disable=protected-access\n  File \"/home/veith/.pyenv/versions/3.6.3/lib/python3.6/site-packages/tensorflow/contrib/data/python/ops/prefetching_ops.py\", line 291, in _as_variant_tensor\n    raise NotImplementedError(\"`prefetch_to_device()` must be the last \"\nNotImplementedError: `prefetch_to_device()` must be the last transformation in a dataset pipeline.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nLinux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**:\r\ntensorflow-gpu binary\r\n- **Bazel Version**:\r\nN/A\r\n- **TensorFlow version (use command below)**:\r\nv1.8.0-0-g93bc2e2072 1.8.0\r\n- **Python version**: \r\n3.6.3\r\n- **CUDA/cuDNN version**:\r\nCUDA 9.0 cuDNN 7.0.3\r\n- **GPU model and memory**:\r\nGTX 1070 8 GB VRAM\r\n- **Exact command to reproduce**:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\nclass MyData(object):\r\n    def __call__(self):\r\n         return range(100)\r\n\r\nexpected_shapes = []\r\nexpected_types = tf.int32\r\niterator = tf.data.Iterator.from_structure(output_types=expected_types, output_shapes=expected_shapes)\r\ndataset = tf.data.Dataset.from_generator(MyData(), output_types=expected_types, output_shapes=expected_shapes)\r\n\r\nprefetch_op = tf.contrib.data.prefetch_to_device(device=\"/gpu:0\")\r\ndataset = dataset.apply(prefetch_op)\r\ninitializer = iterator.make_initializer(dataset)\r\n```\r\n\r\n### Describe the problem\r\n\r\nThis raises `NotImplementedError: prefetch_to_device() must be the last transformation in a dataset pipeline`. \r\n\r\nIt is not possible to apply this to the dataset after the initializer has been created, since a new dataset is returned, instead of it being modified in place.\r\n\r\nIf one reads through [this testcase](https://github.com/tensorflow/tensorflow/commit/4681562607bf4001ecd61492f1e7567be9212c6f), it is clear that it works when creating the iterator from the dataset.\r\n\r\nIt is  **not** clear from [the documentation of `make_initializer`](https://www.tensorflow.org/api_docs/python/tf/data/Iterator#make_initializer) that this function is a transformation of the dataset and thus counts as an additional step after prefetching. \r\nI am not sure if this is a bug/was overlooked, or is known to be not implemented.\r\n\r\n**Proposed short term solution**:\r\n1. Mention in the [documentation of `prefetch_to_device`](https://www.tensorflow.org/versions/master/api_docs/python/tf/contrib/data/prefetch_to_device), that it is not supported in combination with `make_initializer`.\r\n2. Mention in the documentation of `make_initializer` that this operation modifies the dataset\r\n(although I don't think this is the correct choice of words, the issue is with a call to `dataset._as_variant_tensor` in [`make_initializer` line 308](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/data/ops/iterator_ops.py)).\r\n\r\n**Proposed longterm solution**:\r\n1. _This is already a TODO in line 289 of [prefetching_ops.py](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/data/python/ops/prefetching_ops.py)_:\r\nImplement `_as_variant_tensor` for `_PrefetchToDeviceDataset`.\r\n\r\n### Reason why this is needed:\r\n\r\nCreating the data pipeline using `from_structure` and  `make_initializer` allows to dynamically switch the input source to the network, e.g. between training and testing set after an epoch without having to reinitialize the graph or fall back to using feed dicts.\r\n\r\n### Source code / logs\r\n\r\nExact stack trace of the error:\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 14, in <module>\r\n    initializer = iterator.make_initializer(dataset)\r\n  File \"/home/veith/.pyenv/versions/3.6.3/lib/python3.6/site-packages/tensorflow/python/data/ops/iterator_ops.py\", line 308, in make_initializer\r\n    dataset._as_variant_tensor(), self._iterator_resource, name=name)  # pylint: disable=protected-access\r\n  File \"/home/veith/.pyenv/versions/3.6.3/lib/python3.6/site-packages/tensorflow/contrib/data/python/ops/prefetching_ops.py\", line 291, in _as_variant_tensor\r\n    raise NotImplementedError(\"`prefetch_to_device()` must be the last \"\r\nNotImplementedError: `prefetch_to_device()` must be the last transformation in a dataset pipeline.\r\n```\r\n"}