{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/201332633", "html_url": "https://github.com/tensorflow/tensorflow/issues/1628#issuecomment-201332633", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1628", "id": 201332633, "node_id": "MDEyOklzc3VlQ29tbWVudDIwMTMzMjYzMw==", "user": {"login": "kmitchner", "id": 832925, "node_id": "MDQ6VXNlcjgzMjkyNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/832925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmitchner", "html_url": "https://github.com/kmitchner", "followers_url": "https://api.github.com/users/kmitchner/followers", "following_url": "https://api.github.com/users/kmitchner/following{/other_user}", "gists_url": "https://api.github.com/users/kmitchner/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmitchner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmitchner/subscriptions", "organizations_url": "https://api.github.com/users/kmitchner/orgs", "repos_url": "https://api.github.com/users/kmitchner/repos", "events_url": "https://api.github.com/users/kmitchner/events{/privacy}", "received_events_url": "https://api.github.com/users/kmitchner/received_events", "type": "User", "site_admin": false}, "created_at": "2016-03-25T15:26:30Z", "updated_at": "2016-03-25T15:26:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p>These are all managed through a class, I have separate training scripts that train models and save them into their own folders. I then had a classify script that I passed a file to, it instantiated 5 of the below classes attempting to load each of the sessions from their respective folders.  It throws the error above on all sessions but the first.  I tried changing the order of the sessions being loaded so it's definitely something being \"shared\" between the first and subsequent sessions.</p>\n<p>Code below is truncated</p>\n<pre><code>imports...\n\nclass TextModel(object):\n\n   def __init__(self, path, disable_gpu=False):\n        self.path = path.rstrip('/')\n        ...\n\n    ...\n\n    def save_session(self, folder, step=None):\n        with self.graph.as_default():\n            with self.session.as_default():\n                try:\n                    self.saver\n                except:\n                    self.saver = tf.train.Saver()\n\n                if not os.path.exists(folder):\n                    os.makedirs(folder)\n                self.saver.save(self.session, folder+\"/session\", global_step=step)\n\n  def save_model(self):\n        with self.graph.as_default():\n            with self.session.as_default():\n                self.save_session(self.path)\n                with open(self.path+\"/saver_def.pkl\", \"wb\") as f:\n                    pickle.dump(self.saver.as_saver_def(),f)\n                var_names = [v.name for v in tf.all_variables()]\n                with open(self.path+\"/var_names.json\", \"wb\") as f:\n                    json.dump(var_names, f)\n                try:\n                    os.rename(self.path+\"/graph\",self.path+\"/graph_\"+str(time.time()))\n                    print(\"Existing graph folder renamed to \"+self.path+\"/graph\"+time.time()+\"\\n\", file=sys.stderr)\n                except:\n                    pass\n                try:\n                    tf.train.write_graph(self.session.graph_def, self.path+\"/graph\", \"graph\", as_text=False)\n                except:\n                    print(\"Graph folder not created\\n\", file=sys.stderr)\n\ndef load_model(self):\n            with open(self.path+\"/var_names.json\", \"r\") as f:\n                var_names = json.load(f)\n            with open(self.path+\"/saver_def.pkl\", \"r\") as f:\n                saver_def = pickle.load(f)\n                self.session = tf.Session(config=self.tf_config)\n                self.graph = self.session.graph\n                with self.graph.as_default():\n                    with open(self.path+\"/graph/graph\", 'rb') as f:\n                        graph_def = tf.GraphDef.FromString(f.read())\n                        self.graph_variables = tf.import_graph_def(graph_def, return_elements=var_names, name=\"\")\n\n                    self.saver = tf.train.Saver(saver_def=saver_def)\n                    self.saver.restore(self.session, self.path+\"/session\")\n                    with self.session.as_default():\n                        tf.initialize_all_variables()\n                        self.model_loaded = True\n</code></pre>", "body_text": "These are all managed through a class, I have separate training scripts that train models and save them into their own folders. I then had a classify script that I passed a file to, it instantiated 5 of the below classes attempting to load each of the sessions from their respective folders.  It throws the error above on all sessions but the first.  I tried changing the order of the sessions being loaded so it's definitely something being \"shared\" between the first and subsequent sessions.\nCode below is truncated\nimports...\n\nclass TextModel(object):\n\n   def __init__(self, path, disable_gpu=False):\n        self.path = path.rstrip('/')\n        ...\n\n    ...\n\n    def save_session(self, folder, step=None):\n        with self.graph.as_default():\n            with self.session.as_default():\n                try:\n                    self.saver\n                except:\n                    self.saver = tf.train.Saver()\n\n                if not os.path.exists(folder):\n                    os.makedirs(folder)\n                self.saver.save(self.session, folder+\"/session\", global_step=step)\n\n  def save_model(self):\n        with self.graph.as_default():\n            with self.session.as_default():\n                self.save_session(self.path)\n                with open(self.path+\"/saver_def.pkl\", \"wb\") as f:\n                    pickle.dump(self.saver.as_saver_def(),f)\n                var_names = [v.name for v in tf.all_variables()]\n                with open(self.path+\"/var_names.json\", \"wb\") as f:\n                    json.dump(var_names, f)\n                try:\n                    os.rename(self.path+\"/graph\",self.path+\"/graph_\"+str(time.time()))\n                    print(\"Existing graph folder renamed to \"+self.path+\"/graph\"+time.time()+\"\\n\", file=sys.stderr)\n                except:\n                    pass\n                try:\n                    tf.train.write_graph(self.session.graph_def, self.path+\"/graph\", \"graph\", as_text=False)\n                except:\n                    print(\"Graph folder not created\\n\", file=sys.stderr)\n\ndef load_model(self):\n            with open(self.path+\"/var_names.json\", \"r\") as f:\n                var_names = json.load(f)\n            with open(self.path+\"/saver_def.pkl\", \"r\") as f:\n                saver_def = pickle.load(f)\n                self.session = tf.Session(config=self.tf_config)\n                self.graph = self.session.graph\n                with self.graph.as_default():\n                    with open(self.path+\"/graph/graph\", 'rb') as f:\n                        graph_def = tf.GraphDef.FromString(f.read())\n                        self.graph_variables = tf.import_graph_def(graph_def, return_elements=var_names, name=\"\")\n\n                    self.saver = tf.train.Saver(saver_def=saver_def)\n                    self.saver.restore(self.session, self.path+\"/session\")\n                    with self.session.as_default():\n                        tf.initialize_all_variables()\n                        self.model_loaded = True", "body": "These are all managed through a class, I have separate training scripts that train models and save them into their own folders. I then had a classify script that I passed a file to, it instantiated 5 of the below classes attempting to load each of the sessions from their respective folders.  It throws the error above on all sessions but the first.  I tried changing the order of the sessions being loaded so it's definitely something being \"shared\" between the first and subsequent sessions.\n\nCode below is truncated\n\n```\nimports...\n\nclass TextModel(object):\n\n   def __init__(self, path, disable_gpu=False):\n        self.path = path.rstrip('/')\n        ...\n\n    ...\n\n    def save_session(self, folder, step=None):\n        with self.graph.as_default():\n            with self.session.as_default():\n                try:\n                    self.saver\n                except:\n                    self.saver = tf.train.Saver()\n\n                if not os.path.exists(folder):\n                    os.makedirs(folder)\n                self.saver.save(self.session, folder+\"/session\", global_step=step)\n\n  def save_model(self):\n        with self.graph.as_default():\n            with self.session.as_default():\n                self.save_session(self.path)\n                with open(self.path+\"/saver_def.pkl\", \"wb\") as f:\n                    pickle.dump(self.saver.as_saver_def(),f)\n                var_names = [v.name for v in tf.all_variables()]\n                with open(self.path+\"/var_names.json\", \"wb\") as f:\n                    json.dump(var_names, f)\n                try:\n                    os.rename(self.path+\"/graph\",self.path+\"/graph_\"+str(time.time()))\n                    print(\"Existing graph folder renamed to \"+self.path+\"/graph\"+time.time()+\"\\n\", file=sys.stderr)\n                except:\n                    pass\n                try:\n                    tf.train.write_graph(self.session.graph_def, self.path+\"/graph\", \"graph\", as_text=False)\n                except:\n                    print(\"Graph folder not created\\n\", file=sys.stderr)\n\ndef load_model(self):\n            with open(self.path+\"/var_names.json\", \"r\") as f:\n                var_names = json.load(f)\n            with open(self.path+\"/saver_def.pkl\", \"r\") as f:\n                saver_def = pickle.load(f)\n                self.session = tf.Session(config=self.tf_config)\n                self.graph = self.session.graph\n                with self.graph.as_default():\n                    with open(self.path+\"/graph/graph\", 'rb') as f:\n                        graph_def = tf.GraphDef.FromString(f.read())\n                        self.graph_variables = tf.import_graph_def(graph_def, return_elements=var_names, name=\"\")\n\n                    self.saver = tf.train.Saver(saver_def=saver_def)\n                    self.saver.restore(self.session, self.path+\"/session\")\n                    with self.session.as_default():\n                        tf.initialize_all_variables()\n                        self.model_loaded = True\n```\n"}