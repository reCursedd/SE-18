{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19717", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19717/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19717/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19717/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19717", "id": 328807755, "node_id": "MDU6SXNzdWUzMjg4MDc3NTU=", "number": 19717, "title": "`ScipyOptimizerInterface` fails with `scatter_add` and `scatter_update`", "user": {"login": "david-cortes", "id": 11860098, "node_id": "MDQ6VXNlcjExODYwMDk4", "avatar_url": "https://avatars0.githubusercontent.com/u/11860098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/david-cortes", "html_url": "https://github.com/david-cortes", "followers_url": "https://api.github.com/users/david-cortes/followers", "following_url": "https://api.github.com/users/david-cortes/following{/other_user}", "gists_url": "https://api.github.com/users/david-cortes/gists{/gist_id}", "starred_url": "https://api.github.com/users/david-cortes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/david-cortes/subscriptions", "organizations_url": "https://api.github.com/users/david-cortes/orgs", "repos_url": "https://api.github.com/users/david-cortes/repos", "events_url": "https://api.github.com/users/david-cortes/events{/privacy}", "received_events_url": "https://api.github.com/users/david-cortes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-06-03T07:45:46Z", "updated_at": "2018-10-04T20:58:12Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>If I try to build some loss function which in its calculations includes an <code>scatter_add</code> or <code>scatter_update</code> and optimize it using <code>ScipyOptimizerInterface</code>, TensorFlow will fail in calculating the gradient.</p>\n<p>Here's an example with a variant of low-rank matrix factorization in which I add an extra variable, which adds to some of the rows of one of the matrices in the low-rank factorization:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np, tensorflow <span class=\"pl-k\">as</span> tf\n\nnrow <span class=\"pl-k\">=</span> <span class=\"pl-c1\">20</span>\nncol <span class=\"pl-k\">=</span> <span class=\"pl-c1\">30</span>\nk <span class=\"pl-k\">=</span> <span class=\"pl-c1\">15</span>\nnrow_add <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\nncol_mult_add <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5</span>\nregularization <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1e-6</span>\n\nnp.random.seed(<span class=\"pl-c1\">1</span>)\nX <span class=\"pl-k\">=</span> np.random.normal(<span class=\"pl-v\">size</span> <span class=\"pl-k\">=</span> (nrow, ncol)).astype(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>float32<span class=\"pl-pds\">'</span></span>)\nX2 <span class=\"pl-k\">=</span> np.random.normal(<span class=\"pl-v\">size</span> <span class=\"pl-k\">=</span> (nrow_add, ncol_mult_add)).astype(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>float32<span class=\"pl-pds\">'</span></span>)\nix_row_add <span class=\"pl-k\">=</span> np.random.choice(np.arange(nrow), <span class=\"pl-v\">replace</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span>nrow_add).astype(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>int32<span class=\"pl-pds\">'</span></span>)\n\nA <span class=\"pl-k\">=</span> tf.Variable(tf.random_normal([nrow, k]))\nB <span class=\"pl-k\">=</span> tf.Variable(tf.random_normal([ncol, k]))\nA2 <span class=\"pl-k\">=</span> tf.Variable(tf.random_normal([ncol_mult_add, k]))\n\nXtf <span class=\"pl-k\">=</span> tf.placeholder(tf.float32)\nX2tf <span class=\"pl-k\">=</span> tf.placeholder(tf.float32)\n\nA_added <span class=\"pl-k\">=</span> tf.scatter_add(A, ix_row_add, tf.matmul(X2, A2))\npred_x <span class=\"pl-k\">=</span> tf.matmul(A_added, B, <span class=\"pl-v\">transpose_b</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nloss <span class=\"pl-k\">=</span> tf.losses.mean_squared_error(Xtf, pred_x)\nloss <span class=\"pl-k\">+=</span> regularization <span class=\"pl-k\">*</span> (tf.nn.l2_loss(A) <span class=\"pl-k\">+</span> tf.nn.l2_loss(A2) <span class=\"pl-k\">+</span> tf.nn.l2_loss(B))\n\noptimizer <span class=\"pl-k\">=</span> tf.contrib.opt.ScipyOptimizerInterface(loss, <span class=\"pl-v\">method</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>L-BFGS-B<span class=\"pl-pds\">'</span></span>)\nmodel <span class=\"pl-k\">=</span> tf.global_variables_initializer()\nsess<span class=\"pl-k\">=</span>tf.Session()\nsess.run(model)\n<span class=\"pl-k\">with</span> sess:\n    sess.run(model)\n    optimizer.minimize(sess, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{Xtf:X, X2tf:X2})\n    Aopt <span class=\"pl-k\">=</span> A.eval(<span class=\"pl-v\">session</span><span class=\"pl-k\">=</span>sess)\n    A2opt <span class=\"pl-k\">=</span> A2.eval(<span class=\"pl-v\">session</span><span class=\"pl-k\">=</span>sess)\n    Bopt <span class=\"pl-k\">=</span> B.eval(<span class=\"pl-v\">session</span><span class=\"pl-k\">=</span>sess)</pre></div>\n<p>Throws:</p>\n<pre><code>InvalidArgumentError: Input 0 of node ScatterAdd was passed float from _arg_Variable_0_2:0 incompatible with expected float_ref.\n</code></pre>\n<p>Information about my system:</p>\n<ul>\n<li>Have I written custom code: No</li>\n<li>OS Platform and Distribution: Debian buster/sid 64-bit</li>\n<li>TensorFlow installed from: binary (PyPI)</li>\n<li>TensorFlow version: 1.7.0</li>\n<li>Python version: 3.6.3</li>\n<li>Bazel version: N/A</li>\n<li>GCC/Compiler version: N/A</li>\n<li>CUDA/cuDNN version: N/A</li>\n<li>GPU model and memory: N/A</li>\n<li>Exact command to reproduce: N/A</li>\n</ul>", "body_text": "If I try to build some loss function which in its calculations includes an scatter_add or scatter_update and optimize it using ScipyOptimizerInterface, TensorFlow will fail in calculating the gradient.\nHere's an example with a variant of low-rank matrix factorization in which I add an extra variable, which adds to some of the rows of one of the matrices in the low-rank factorization:\nimport numpy as np, tensorflow as tf\n\nnrow = 20\nncol = 30\nk = 15\nnrow_add = 10\nncol_mult_add = 5\nregularization = 1e-6\n\nnp.random.seed(1)\nX = np.random.normal(size = (nrow, ncol)).astype('float32')\nX2 = np.random.normal(size = (nrow_add, ncol_mult_add)).astype('float32')\nix_row_add = np.random.choice(np.arange(nrow), replace=False, size=nrow_add).astype('int32')\n\nA = tf.Variable(tf.random_normal([nrow, k]))\nB = tf.Variable(tf.random_normal([ncol, k]))\nA2 = tf.Variable(tf.random_normal([ncol_mult_add, k]))\n\nXtf = tf.placeholder(tf.float32)\nX2tf = tf.placeholder(tf.float32)\n\nA_added = tf.scatter_add(A, ix_row_add, tf.matmul(X2, A2))\npred_x = tf.matmul(A_added, B, transpose_b=True)\nloss = tf.losses.mean_squared_error(Xtf, pred_x)\nloss += regularization * (tf.nn.l2_loss(A) + tf.nn.l2_loss(A2) + tf.nn.l2_loss(B))\n\noptimizer = tf.contrib.opt.ScipyOptimizerInterface(loss, method='L-BFGS-B')\nmodel = tf.global_variables_initializer()\nsess=tf.Session()\nsess.run(model)\nwith sess:\n    sess.run(model)\n    optimizer.minimize(sess, feed_dict={Xtf:X, X2tf:X2})\n    Aopt = A.eval(session=sess)\n    A2opt = A2.eval(session=sess)\n    Bopt = B.eval(session=sess)\nThrows:\nInvalidArgumentError: Input 0 of node ScatterAdd was passed float from _arg_Variable_0_2:0 incompatible with expected float_ref.\n\nInformation about my system:\n\nHave I written custom code: No\nOS Platform and Distribution: Debian buster/sid 64-bit\nTensorFlow installed from: binary (PyPI)\nTensorFlow version: 1.7.0\nPython version: 3.6.3\nBazel version: N/A\nGCC/Compiler version: N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\nExact command to reproduce: N/A", "body": "If I try to build some loss function which in its calculations includes an `scatter_add` or `scatter_update` and optimize it using `ScipyOptimizerInterface`, TensorFlow will fail in calculating the gradient.\r\n\r\nHere's an example with a variant of low-rank matrix factorization in which I add an extra variable, which adds to some of the rows of one of the matrices in the low-rank factorization:\r\n\r\n```python\r\nimport numpy as np, tensorflow as tf\r\n\r\nnrow = 20\r\nncol = 30\r\nk = 15\r\nnrow_add = 10\r\nncol_mult_add = 5\r\nregularization = 1e-6\r\n\r\nnp.random.seed(1)\r\nX = np.random.normal(size = (nrow, ncol)).astype('float32')\r\nX2 = np.random.normal(size = (nrow_add, ncol_mult_add)).astype('float32')\r\nix_row_add = np.random.choice(np.arange(nrow), replace=False, size=nrow_add).astype('int32')\r\n\r\nA = tf.Variable(tf.random_normal([nrow, k]))\r\nB = tf.Variable(tf.random_normal([ncol, k]))\r\nA2 = tf.Variable(tf.random_normal([ncol_mult_add, k]))\r\n\r\nXtf = tf.placeholder(tf.float32)\r\nX2tf = tf.placeholder(tf.float32)\r\n\r\nA_added = tf.scatter_add(A, ix_row_add, tf.matmul(X2, A2))\r\npred_x = tf.matmul(A_added, B, transpose_b=True)\r\nloss = tf.losses.mean_squared_error(Xtf, pred_x)\r\nloss += regularization * (tf.nn.l2_loss(A) + tf.nn.l2_loss(A2) + tf.nn.l2_loss(B))\r\n\r\noptimizer = tf.contrib.opt.ScipyOptimizerInterface(loss, method='L-BFGS-B')\r\nmodel = tf.global_variables_initializer()\r\nsess=tf.Session()\r\nsess.run(model)\r\nwith sess:\r\n    sess.run(model)\r\n    optimizer.minimize(sess, feed_dict={Xtf:X, X2tf:X2})\r\n    Aopt = A.eval(session=sess)\r\n    A2opt = A2.eval(session=sess)\r\n    Bopt = B.eval(session=sess)\r\n``` \r\n\r\nThrows:\r\n```\r\nInvalidArgumentError: Input 0 of node ScatterAdd was passed float from _arg_Variable_0_2:0 incompatible with expected float_ref.\r\n```\r\n\r\nInformation about my system:\r\n* Have I written custom code: No\r\n* OS Platform and Distribution: Debian buster/sid 64-bit\r\n* TensorFlow installed from: binary (PyPI)\r\n* TensorFlow version: 1.7.0\r\n* Python version: 3.6.3\r\n* Bazel version: N/A\r\n* GCC/Compiler version: N/A\r\n* CUDA/cuDNN version: N/A\r\n* GPU model and memory: N/A\r\n* Exact command to reproduce: N/A"}