{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/380275065", "html_url": "https://github.com/tensorflow/tensorflow/issues/18402#issuecomment-380275065", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18402", "id": 380275065, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDI3NTA2NQ==", "user": {"login": "jlebar", "id": 150663, "node_id": "MDQ6VXNlcjE1MDY2Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/150663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlebar", "html_url": "https://github.com/jlebar", "followers_url": "https://api.github.com/users/jlebar/followers", "following_url": "https://api.github.com/users/jlebar/following{/other_user}", "gists_url": "https://api.github.com/users/jlebar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlebar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlebar/subscriptions", "organizations_url": "https://api.github.com/users/jlebar/orgs", "repos_url": "https://api.github.com/users/jlebar/repos", "events_url": "https://api.github.com/users/jlebar/events{/privacy}", "received_events_url": "https://api.github.com/users/jlebar/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-10T23:05:08Z", "updated_at": "2018-04-10T23:05:08Z", "author_association": "MEMBER", "body_html": "<p>Hi, thanks for letting me know that you're hitting this problem.</p>\n<p>I would like to understand what is the minimal change we can make to address this problem you're experiencing, so as to minimize the amount of defensive coding we have to do in TF around a compiler that is not used in any of our CI bots.  It's not clear to me that converting every tuple used inside of a StatusOr into a struct is the minimal change.</p>\n<p>I wonder if simply <code>return {Unimplemented(...)}</code> would be sufficient.  (Although you really shouldn't need that.)  I don't have access to a copy of gcc6; would you be willing to try that (or make a reproducer on gcc.godbolt.org)?</p>\n<p>I'm going to see how hard it would be to convert StreamExecutor's StatusOr into TF's StatusOr.  TF's StatusOr is more sophisticated, and may avoid this problem.  (It would be great if you could check this as well.)  If it does not avoid this problem, we can try to fix it so that it does.</p>", "body_text": "Hi, thanks for letting me know that you're hitting this problem.\nI would like to understand what is the minimal change we can make to address this problem you're experiencing, so as to minimize the amount of defensive coding we have to do in TF around a compiler that is not used in any of our CI bots.  It's not clear to me that converting every tuple used inside of a StatusOr into a struct is the minimal change.\nI wonder if simply return {Unimplemented(...)} would be sufficient.  (Although you really shouldn't need that.)  I don't have access to a copy of gcc6; would you be willing to try that (or make a reproducer on gcc.godbolt.org)?\nI'm going to see how hard it would be to convert StreamExecutor's StatusOr into TF's StatusOr.  TF's StatusOr is more sophisticated, and may avoid this problem.  (It would be great if you could check this as well.)  If it does not avoid this problem, we can try to fix it so that it does.", "body": "Hi, thanks for letting me know that you're hitting this problem.\r\n\r\nI would like to understand what is the minimal change we can make to address this problem you're experiencing, so as to minimize the amount of defensive coding we have to do in TF around a compiler that is not used in any of our CI bots.  It's not clear to me that converting every tuple used inside of a StatusOr into a struct is the minimal change.\r\n\r\nI wonder if simply `return {Unimplemented(...)}` would be sufficient.  (Although you really shouldn't need that.)  I don't have access to a copy of gcc6; would you be willing to try that (or make a reproducer on gcc.godbolt.org)?\r\n\r\nI'm going to see how hard it would be to convert StreamExecutor's StatusOr into TF's StatusOr.  TF's StatusOr is more sophisticated, and may avoid this problem.  (It would be great if you could check this as well.)  If it does not avoid this problem, we can try to fix it so that it does."}