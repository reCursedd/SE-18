{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18402", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18402/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18402/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18402/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18402", "id": 313113950, "node_id": "MDU6SXNzdWUzMTMxMTM5NTA=", "number": 18402, "title": "DnnSupport::GetVersion() is failing with 'too perfect fowarding' issue with gcc-6", "user": {"login": "samikama", "id": 10539540, "node_id": "MDQ6VXNlcjEwNTM5NTQw", "avatar_url": "https://avatars0.githubusercontent.com/u/10539540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samikama", "html_url": "https://github.com/samikama", "followers_url": "https://api.github.com/users/samikama/followers", "following_url": "https://api.github.com/users/samikama/following{/other_user}", "gists_url": "https://api.github.com/users/samikama/gists{/gist_id}", "starred_url": "https://api.github.com/users/samikama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samikama/subscriptions", "organizations_url": "https://api.github.com/users/samikama/orgs", "repos_url": "https://api.github.com/users/samikama/repos", "events_url": "https://api.github.com/users/samikama/events{/privacy}", "received_events_url": "https://api.github.com/users/samikama/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 12, "created_at": "2018-04-10T22:40:06Z", "updated_at": "2018-04-11T22:20:15Z", "closed_at": "2018-04-11T22:20:15Z", "author_association": "CONTRIBUTOR", "body_html": "<p>A similar issue was <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"290693626\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/16309\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/16309/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/16309\">#16309</a><br>\nnewly added DnnSupport::GetVersion() call is causing gcc-6 compilation to fail. Using a structure instead of a tuple could workaround the issue.</p>\n<blockquote>\n<p>INFO: From Compiling tensorflow/contrib/seq2seq/kernels/beam_search_ops_gpu.cu.cc [for host]:<br>\n/usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC&lt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; bool  = true; _Elements = {int, int, int}]':<br>\n/usr/include/c++/6/tuple:626:248:   required by substitution of 'template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type  &gt; constexpr std::tuple&lt;  &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type  = ]'<br>\n./tensorflow/stream_executor/dnn.h:891:91:   required from here<br>\n/usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;'<br>\nreturn _<em>and</em>&lt;is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;...&gt;::value;<br>\n^~~~~<br>\n/usr/include/c++/6/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; bool  = true; _Elements = {int, int, int}]' not a return-statement<br>\n}<br>\n^<br>\n/usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC&lt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; bool  = true; _Elements = {int, int, int}]':<br>\n/usr/include/c++/6/tuple:626:362:   required by substitution of 'template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type  &gt; constexpr std::tuple&lt;  &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type  = ]'<br>\n./tensorflow/stream_executor/dnn.h:891:91:   required from here<br>\n/usr/include/c++/6/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;'<br>\nreturn _<em>and</em>&lt;is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;...&gt;::value;<br>\n^~~~~<br>\n/usr/include/c++/6/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple&lt;int, int, int&gt;&amp;}; bool  = true; _Elements = {int, int, int}]' not a return-statement<br>\n}<br>\n^<br>\n/usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC&lt;, _Elements&gt;::_NonNestedTuple() [with _SrcTuple = const std::tuple&lt;int, int, int&gt;&amp;; bool  = true; _Elements = {int, int, int}]':<br>\n/usr/include/c++/6/tuple:662:419:   required by substitution of 'template&lt;class ... _UElements, class _Dummy, typename std::enable_if&lt;((std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ConstructibleTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(std::is_same&lt;_Dummy, void&gt;::value &amp;&amp; (1ul == 1)), int, int, int&gt;::_NonNestedTuple&lt;const tuple&lt;_Elements ...&gt;&amp;&gt;()), bool&gt;::type  &gt; constexpr std::tuple&lt;  &gt;::tuple(const std::tuple&lt;_Args1 ...&gt;&amp;) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if&lt;((std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ConstructibleTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(std::is_same&lt;_Dummy, void&gt;::value &amp;&amp; (1ul == 1)), int, int, int&gt;::_NonNestedTuple&lt;const tuple&lt;_Elements ...&gt;&amp;&gt;()), bool&gt;::type  = ]'<br>\n./tensorflow/stream_executor/dnn.h:891:91:   required from here<br>\n/usr/include/c++/6/tuple:495:244: error: wrong number of template arguments (4, should be 2)<br>\nreturn  _<em>and</em>&lt;_<em>not</em>&lt;is_same&lt;tuple&lt;_Elements...&gt;,<br>\n^<br>\n/usr/include/c++/6/type_traits:1558:8: note: provided for 'template&lt;class _From, class _To&gt; struct std::is_convertible'<br>\nstruct is_convertible<br>\n^~~~~~~~~~~~~~<br>\n/usr/include/c++/6/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;, _Elements&gt;::_NonNestedTuple() [with _SrcTuple = const std::tuple&lt;int, int, int&gt;&amp;; bool  = true; _Elements = {int, int, int}]' not a return-statement<br>\n}<br>\n^<br>\n/usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC&lt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {std::tuple&lt;int, int, int&gt;}; bool  = true; _Elements = {int, int, int}]':<br>\n/usr/include/c++/6/tuple:626:248:   required by substitution of 'template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type  &gt; constexpr std::tuple&lt;  &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {std::tuple&lt;int, int, int&gt;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type  = ]'<br>\n./tensorflow/stream_executor/dnn.h:891:91:   required from here<br>\n/usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;'<br>\nreturn _<em>and</em>&lt;is_constructible&lt;_Elements, _UElements&amp;&amp;&gt;...&gt;::value;<br>\n^~~~~<br>\n/usr/include/c++/6/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;, _Elements&gt;::_MoveConstructibleTuple() [with _UElements = {std::tuple&lt;int, int, int&gt;}; bool  = true; _Elements = {int, int, int}]' not a return-statement<br>\n}<br>\n^<br>\n/usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC&lt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple&lt;int, int, int&gt;}; bool  = true; _Elements = {int, int, int}]':<br>\n/usr/include/c++/6/tuple:626:362:   required by substitution of 'template&lt;class ... _UElements, typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type  &gt; constexpr std::tuple&lt;  &gt;::tuple(_UElements&amp;&amp; ...) [with _UElements = {std::tuple&lt;int, int, int&gt;}; typename std::enable_if&lt;(((std::_TC&lt;(sizeof... (_UElements) == 1), int, int, int&gt;::_NotSameTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; (3ul &gt;= 1)), bool&gt;::type  = ]'<br>\n./tensorflow/stream_executor/dnn.h:891:91:   required from here<br>\n/usr/include/c++/6/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;'<br>\nreturn _<em>and</em>&lt;is_convertible&lt;_UElements&amp;&amp;, _Elements&gt;...&gt;::value;<br>\n^~~~~<br>\n/usr/include/c++/6/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;, _Elements&gt;::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple&lt;int, int, int&gt;}; bool  = true; _Elements = {int, int, int}]' not a return-statement<br>\n}<br>\n^<br>\n/usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC&lt;, _Elements&gt;::_NonNestedTuple() [with _SrcTuple = std::tuple&lt;int, int, int&gt;&amp;&amp;; bool  = true; _Elements = {int, int, int}]':<br>\n/usr/include/c++/6/tuple:686:422:   required by substitution of 'template&lt;class ... _UElements, class _Dummy, typename std::enable_if&lt;((std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(std::is_same&lt;_Dummy, void&gt;::value &amp;&amp; (1ul == 1)), int, int, int&gt;::_NonNestedTuple&lt;tuple&lt;_Elements ...&gt;&amp;&amp;&gt;()), bool&gt;::type  &gt; constexpr std::tuple&lt;  &gt;::tuple(std::tuple&lt;_Args1 ...&gt;&amp;&amp;) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if&lt;((std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_MoveConstructibleTuple&lt;_UElements ...&gt;() &amp;&amp; std::_TC&lt;(1ul == sizeof... (_UElements)), int, int, int&gt;::_ImplicitlyMoveConvertibleTuple&lt;_UElements ...&gt;()) &amp;&amp; std::_TC&lt;(std::is_same&lt;_Dummy, void&gt;::value &amp;&amp; (1ul == 1)), int, int, int&gt;::_NonNestedTuple&lt;tuple&lt;_Elements ...&gt;&amp;&amp;&gt;()), bool&gt;::type  = ]'<br>\n./tensorflow/stream_executor/dnn.h:891:91:   required from here<br>\n/usr/include/c++/6/tuple:495:244: error: wrong number of template arguments (4, should be 2)<br>\nreturn  _<em>and</em>&lt;_<em>not</em>&lt;is_same&lt;tuple&lt;_Elements...&gt;,<br>\n^<br>\n/usr/include/c++/6/type_traits:1558:8: note: provided for 'template&lt;class _From, class _To&gt; struct std::is_convertible'<br>\nstruct is_convertible<br>\n^~~~~~~~~~~~~~<br>\n/usr/include/c++/6/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC&lt;, _Elements&gt;::_NonNestedTuple() [with _SrcTuple = std::tuple&lt;int, int, int&gt;&amp;&amp;; bool  = true; _Elements = {int, int, int}]' not a return-statement<br>\n}</p>\n</blockquote>", "body_text": "A similar issue was #16309\nnewly added DnnSupport::GetVersion() call is causing gcc-6 compilation to fail. Using a structure instead of a tuple could workaround the issue.\n\nINFO: From Compiling tensorflow/contrib/seq2seq/kernels/beam_search_ops_gpu.cu.cc [for host]:\n/usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC<, _Elements>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool  = true; _Elements = {int, int, int}]':\n/usr/include/c++/6/tuple:626:248:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type  > constexpr std::tuple<  >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<int, int, int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type  = ]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible<_Elements, _UElements&&>'\nreturn _and<is_constructible<_Elements, _UElements&&>...>::value;\n^~~~~\n/usr/include/c++/6/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC<, _Elements>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool  = true; _Elements = {int, int, int}]' not a return-statement\n}\n^\n/usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC<, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool  = true; _Elements = {int, int, int}]':\n/usr/include/c++/6/tuple:626:362:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type  > constexpr std::tuple<  >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<int, int, int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type  = ]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/include/c++/6/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible<_UElements&&, _Elements>'\nreturn _and<is_convertible<_UElements&&, _Elements>...>::value;\n^~~~~\n/usr/include/c++/6/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC<, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool  = true; _Elements = {int, int, int}]' not a return-statement\n}\n^\n/usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC<, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<int, int, int>&; bool  = true; _Elements = {int, int, int}]':\n/usr/include/c++/6/tuple:662:419:   required by substitution of 'template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type  > constexpr std::tuple<  >::tuple(const std::tuple<_Args1 ...>&) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type  = ]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/include/c++/6/tuple:495:244: error: wrong number of template arguments (4, should be 2)\nreturn  _and<_not<is_same<tuple<_Elements...>,\n^\n/usr/include/c++/6/type_traits:1558:8: note: provided for 'template<class _From, class _To> struct std::is_convertible'\nstruct is_convertible\n^~~~~~~~~~~~~~\n/usr/include/c++/6/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC<, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<int, int, int>&; bool  = true; _Elements = {int, int, int}]' not a return-statement\n}\n^\n/usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC<, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool  = true; _Elements = {int, int, int}]':\n/usr/include/c++/6/tuple:626:248:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type  > constexpr std::tuple<  >::tuple(_UElements&& ...) [with _UElements = {std::tuple<int, int, int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type  = ]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible<_Elements, _UElements&&>'\nreturn _and<is_constructible<_Elements, _UElements&&>...>::value;\n^~~~~\n/usr/include/c++/6/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC<, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool  = true; _Elements = {int, int, int}]' not a return-statement\n}\n^\n/usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC<, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool  = true; _Elements = {int, int, int}]':\n/usr/include/c++/6/tuple:626:362:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type  > constexpr std::tuple<  >::tuple(_UElements&& ...) [with _UElements = {std::tuple<int, int, int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type  = ]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/include/c++/6/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible<_UElements&&, _Elements>'\nreturn _and<is_convertible<_UElements&&, _Elements>...>::value;\n^~~~~\n/usr/include/c++/6/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC<, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool  = true; _Elements = {int, int, int}]' not a return-statement\n}\n^\n/usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC<, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<int, int, int>&&; bool  = true; _Elements = {int, int, int}]':\n/usr/include/c++/6/tuple:686:422:   required by substitution of 'template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type  > constexpr std::tuple<  >::tuple(std::tuple<_Args1 ...>&&) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type  = ]'\n./tensorflow/stream_executor/dnn.h:891:91:   required from here\n/usr/include/c++/6/tuple:495:244: error: wrong number of template arguments (4, should be 2)\nreturn  _and<_not<is_same<tuple<_Elements...>,\n^\n/usr/include/c++/6/type_traits:1558:8: note: provided for 'template<class _From, class _To> struct std::is_convertible'\nstruct is_convertible\n^~~~~~~~~~~~~~\n/usr/include/c++/6/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC<, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<int, int, int>&&; bool  = true; _Elements = {int, int, int}]' not a return-statement\n}", "body": "A similar issue was #16309\r\nnewly added DnnSupport::GetVersion() call is causing gcc-6 compilation to fail. Using a structure instead of a tuple could workaround the issue.\r\n\r\n\r\n> INFO: From Compiling tensorflow/contrib/seq2seq/kernels/beam_search_ops_gpu.cu.cc [for host]:\r\n> /usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n> /usr/include/c++/6/tuple:626:248:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<int, int, int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\r\n> ./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n> /usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible<_Elements, _UElements&&>'\r\n>        return __and_<is_constructible<_Elements, _UElements&&>...>::value;\r\n>                                                                    ^~~~~\r\n> /usr/include/c++/6/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n>      }\r\n>  ^\r\n> /usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n> /usr/include/c++/6/tuple:626:362:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<int, int, int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\r\n> ./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n> /usr/include/c++/6/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible<_UElements&&, _Elements>'\r\n>        return __and_<is_convertible<_UElements&&, _Elements>...>::value;\r\n>                                                                  ^~~~~\r\n> /usr/include/c++/6/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<int, int, int>&}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n>      }\r\n>  ^\r\n> /usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<int, int, int>&; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n> /usr/include/c++/6/tuple:662:419:   required by substitution of 'template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(const std::tuple<_Args1 ...>&) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> = <missing>]'\r\n> ./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n> /usr/include/c++/6/tuple:495:244: error: wrong number of template arguments (4, should be 2)\r\n>        return  __and_<__not_<is_same<tuple<_Elements...>,\r\n>                                                                                                                                                                                                                                                     ^    \r\n> /usr/include/c++/6/type_traits:1558:8: note: provided for 'template<class _From, class _To> struct std::is_convertible'\r\n>      struct is_convertible\r\n>         ^~~~~~~~~~~~~~\r\n> /usr/include/c++/6/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<int, int, int>&; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n>      }\r\n>  ^\r\n> /usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n> /usr/include/c++/6/tuple:626:248:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<int, int, int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\r\n> ./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n> /usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding 'std::is_constructible<_Elements, _UElements&&>'\r\n>        return __and_<is_constructible<_Elements, _UElements&&>...>::value;\r\n>                                                                    ^~~~~\r\n> /usr/include/c++/6/tuple:484:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n>      }\r\n>  ^\r\n> /usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n> /usr/include/c++/6/tuple:626:362:   required by substitution of 'template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<int, int, int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), int, int, int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]'\r\n> ./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n> /usr/include/c++/6/tuple:489:65: error: mismatched argument pack lengths while expanding 'std::is_convertible<_UElements&&, _Elements>'\r\n>        return __and_<is_convertible<_UElements&&, _Elements>...>::value;\r\n>                                                                  ^~~~~\r\n> /usr/include/c++/6/tuple:490:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<int, int, int>}; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n>      }\r\n>  ^\r\n> /usr/include/c++/6/tuple: In instantiation of 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<int, int, int>&&; bool <anonymous> = true; _Elements = {int, int, int}]':\r\n> /usr/include/c++/6/tuple:686:422:   required by substitution of 'template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(std::tuple<_Args1 ...>&&) [with _UElements = {int, int, int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), int, int, int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), int, int, int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> = <missing>]'\r\n> ./tensorflow/stream_executor/dnn.h:891:91:   required from here\r\n> /usr/include/c++/6/tuple:495:244: error: wrong number of template arguments (4, should be 2)\r\n>        return  __and_<__not_<is_same<tuple<_Elements...>,\r\n>                                                                                                                                                                                                                                                     ^    \r\n> /usr/include/c++/6/type_traits:1558:8: note: provided for 'template<class _From, class _To> struct std::is_convertible'\r\n>      struct is_convertible\r\n>         ^~~~~~~~~~~~~~\r\n> /usr/include/c++/6/tuple:502:1: error: body of constexpr function 'static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<int, int, int>&&; bool <anonymous> = true; _Elements = {int, int, int}]' not a return-statement\r\n>      }\r\n> "}