{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2929", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2929/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2929/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2929/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2929", "id": 160894230, "node_id": "MDU6SXNzdWUxNjA4OTQyMzA=", "number": 2929, "title": "IOS - No OpKernel was registered to support Op 'Conv2DBackpropInput' with these attrs", "user": {"login": "morgangiraud", "id": 1278248, "node_id": "MDQ6VXNlcjEyNzgyNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1278248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/morgangiraud", "html_url": "https://github.com/morgangiraud", "followers_url": "https://api.github.com/users/morgangiraud/followers", "following_url": "https://api.github.com/users/morgangiraud/following{/other_user}", "gists_url": "https://api.github.com/users/morgangiraud/gists{/gist_id}", "starred_url": "https://api.github.com/users/morgangiraud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/morgangiraud/subscriptions", "organizations_url": "https://api.github.com/users/morgangiraud/orgs", "repos_url": "https://api.github.com/users/morgangiraud/repos", "events_url": "https://api.github.com/users/morgangiraud/events{/privacy}", "received_events_url": "https://api.github.com/users/morgangiraud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 12, "created_at": "2016-06-17T13:58:03Z", "updated_at": "2017-08-24T06:35:05Z", "closed_at": "2016-06-22T14:18:33Z", "author_association": "NONE", "body_html": "<p>Hi everyone,</p>\n<p>We are trying to load a very simple graph inside IOS that we generate and freeze with python.<br>\nRight now, we have this following error:</p>\n<pre><code>E Running model failed: Invalid argument: \nNo OpKernel was registered to support Op 'Conv2DBackpropInput' with these attrs\n     [[Node: convt = Conv2DBackpropInput[T=DT_FLOAT, data_format=\"NHWC\", padding=\"SAME\", strides=[1, 1, 1, 1], use_cudnn_on_gpu=true](Shape, W/read, x)]]\n</code></pre>\n<p>Here is the python script generating the model:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> tools <span class=\"pl-k\">import</span> freeze_graph\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Init session<span class=\"pl-pds\">'</span></span>)\nsess <span class=\"pl-k\">=</span> tf.InteractiveSession()\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Define vars and ops<span class=\"pl-pds\">'</span></span>)\nx <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">600</span>, <span class=\"pl-c1\">600</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>)\nW <span class=\"pl-k\">=</span> tf.Variable(tf.truncated_normal([<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>], <span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.1</span>), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>W<span class=\"pl-pds\">\"</span></span>)\nconvt <span class=\"pl-k\">=</span> tf.nn.conv2d_transpose(x, W, tf.shape(x), <span class=\"pl-v\">strides</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>], <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>SAME<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>convt<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Init vars<span class=\"pl-pds\">'</span></span>)\ninit <span class=\"pl-k\">=</span> tf.initialize_all_variables()\nsess.run(init)\n\ninput_graph_name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input_graph.pb<span class=\"pl-pds\">\"</span></span>\n\nsaver <span class=\"pl-k\">=</span> tf.train.Saver(<span class=\"pl-v\">var_list</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>)\nsaver.save(sess, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>data/conv<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">global_step</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>)\n\ngraph_def <span class=\"pl-k\">=</span> sess.graph.as_graph_def()\ntf.train.write_graph(graph_def, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>data<span class=\"pl-pds\">\"</span></span>, input_graph_name)\n\ninput_graph_path <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>data/<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> input_graph_name\ninput_saver_def_path <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>\ninput_binary <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>\ninput_checkpoint_path <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>data/conv<span class=\"pl-pds\">'</span></span>\noutput_node_names <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>convt<span class=\"pl-pds\">\"</span></span>\nrestore_op_name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>save/restore_all<span class=\"pl-pds\">\"</span></span>\nfilename_tensor_name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>save/Const:0<span class=\"pl-pds\">\"</span></span>\noutput_graph_path <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>data/frozen_convt.pb<span class=\"pl-pds\">\"</span></span>\nclear_devices <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n\nfreeze_graph.freeze_graph(input_graph_path, input_saver_def_path,\n                          input_binary, input_checkpoint_path,\n                          output_node_names, restore_op_name,\n                          filename_tensor_name, output_graph_path,\n                          clear_devices, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p>Here is the Objective-C++ interesting part:</p>\n<div class=\"highlight highlight-source-c\"><pre> <span class=\"pl-c\"><span class=\"pl-c\">//</span>  2. Load the network</span>\n\n  NSString* network_path = FilePathForResourceName(@<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>frozen_conv<span class=\"pl-pds\">\"</span></span>, @<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pb<span class=\"pl-pds\">\"</span></span>);\n  <span class=\"pl-en\">PortableReadFileToProto</span>([network_path UTF8String], &amp;tensorflow_graph);\n\n  <span class=\"pl-en\">LOG</span>(INFO) &lt;&lt; \"Creating session.\";\n  tensorflow::Status s = session-&gt;<span class=\"pl-en\">Create</span>(tensorflow_graph);\n\n  <span class=\"pl-k\">if</span> (!s.ok()) {\n    <span class=\"pl-c1\">LOG</span>(ERROR) &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Could not create Tensorflow Graph: <span class=\"pl-pds\">\"</span></span> &lt;&lt; s;\n  }\n\n\n  <span class=\"pl-c\"><span class=\"pl-c\">//</span>  3. Run the network</span>\n\n    std::string input_layer = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x:0<span class=\"pl-pds\">\"</span></span>;\n    std::string output_layer = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>convt:0<span class=\"pl-pds\">\"</span></span>;\n\n    std::vector&lt;tensorflow::Tensor&gt; outputs;\n    tensorflow::Status run_status = session-&gt;<span class=\"pl-en\">Run</span>({{input_layer, image_tensor}},\n                                                 {output_layer}, {}, &amp;outputs);\n\n\n    <span class=\"pl-k\">if</span> (!run_status.ok()) {\n      <span class=\"pl-c1\">LOG</span>(ERROR) &lt;&lt; <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Running model failed: <span class=\"pl-pds\">\"</span></span> &lt;&lt; run_status;\n    }</pre></div>\n<p>We are using:</p>\n<ul>\n<li>Python 3.5.1 for the script</li>\n<li>The python tensorflow build is downloaded from <code>https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0rc0-py3-none-any.whl</code></li>\n<li>The compiled tensorflow for IOS is from the master branch 2 hour ago using the script <code>build_all_ios.sh</code></li>\n<li>We have <strong>no</strong> problem running the IOS example</li>\n<li>We have <strong>no</strong> problem running a one standard convolutional graph frozen with custom python script</li>\n<li>We checked that the file <code>tensorflow/core/ops/nn_ops.cc</code> is in the generated txt files (and this is the file containing the registering of the op 'Conv2DBackpropInput')</li>\n</ul>\n<p>I would be gratefull if anyone has an idea on why IOS seems to not be able to find the <code>Conv2DBackpropInput</code> Op ?</p>", "body_text": "Hi everyone,\nWe are trying to load a very simple graph inside IOS that we generate and freeze with python.\nRight now, we have this following error:\nE Running model failed: Invalid argument: \nNo OpKernel was registered to support Op 'Conv2DBackpropInput' with these attrs\n     [[Node: convt = Conv2DBackpropInput[T=DT_FLOAT, data_format=\"NHWC\", padding=\"SAME\", strides=[1, 1, 1, 1], use_cudnn_on_gpu=true](Shape, W/read, x)]]\n\nHere is the python script generating the model:\nfrom tools import freeze_graph\n\nimport tensorflow as tf\n\nprint('Init session')\nsess = tf.InteractiveSession()\n\nprint('Define vars and ops')\nx = tf.placeholder(tf.float32, shape=[None, 600, 600, 3], name=\"x\")\nW = tf.Variable(tf.truncated_normal([3, 3, 3, 3], stddev=0.1), name=\"W\")\nconvt = tf.nn.conv2d_transpose(x, W, tf.shape(x), strides=[1, 1, 1, 1], padding='SAME', name=\"convt\")\n\nprint('Init vars')\ninit = tf.initialize_all_variables()\nsess.run(init)\n\ninput_graph_name = \"input_graph.pb\"\n\nsaver = tf.train.Saver(var_list=None)\nsaver.save(sess, 'data/conv', global_step=None)\n\ngraph_def = sess.graph.as_graph_def()\ntf.train.write_graph(graph_def, \"data\", input_graph_name)\n\ninput_graph_path = 'data/' + input_graph_name\ninput_saver_def_path = \"\"\ninput_binary = False\ninput_checkpoint_path = 'data/conv'\noutput_node_names = \"convt\"\nrestore_op_name = \"save/restore_all\"\nfilename_tensor_name = \"save/Const:0\"\noutput_graph_path = \"data/frozen_convt.pb\"\nclear_devices = True\n\nfreeze_graph.freeze_graph(input_graph_path, input_saver_def_path,\n                          input_binary, input_checkpoint_path,\n                          output_node_names, restore_op_name,\n                          filename_tensor_name, output_graph_path,\n                          clear_devices, \"\")\nHere is the Objective-C++ interesting part:\n //  2. Load the network\n\n  NSString* network_path = FilePathForResourceName(@\"frozen_conv\", @\"pb\");\n  PortableReadFileToProto([network_path UTF8String], &tensorflow_graph);\n\n  LOG(INFO) << \"Creating session.\";\n  tensorflow::Status s = session->Create(tensorflow_graph);\n\n  if (!s.ok()) {\n    LOG(ERROR) << \"Could not create Tensorflow Graph: \" << s;\n  }\n\n\n  //  3. Run the network\n\n    std::string input_layer = \"x:0\";\n    std::string output_layer = \"convt:0\";\n\n    std::vector<tensorflow::Tensor> outputs;\n    tensorflow::Status run_status = session->Run({{input_layer, image_tensor}},\n                                                 {output_layer}, {}, &outputs);\n\n\n    if (!run_status.ok()) {\n      LOG(ERROR) << \"Running model failed: \" << run_status;\n    }\nWe are using:\n\nPython 3.5.1 for the script\nThe python tensorflow build is downloaded from https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0rc0-py3-none-any.whl\nThe compiled tensorflow for IOS is from the master branch 2 hour ago using the script build_all_ios.sh\nWe have no problem running the IOS example\nWe have no problem running a one standard convolutional graph frozen with custom python script\nWe checked that the file tensorflow/core/ops/nn_ops.cc is in the generated txt files (and this is the file containing the registering of the op 'Conv2DBackpropInput')\n\nI would be gratefull if anyone has an idea on why IOS seems to not be able to find the Conv2DBackpropInput Op ?", "body": "Hi everyone,\n\nWe are trying to load a very simple graph inside IOS that we generate and freeze with python.\nRight now, we have this following error:\n\n```\nE Running model failed: Invalid argument: \nNo OpKernel was registered to support Op 'Conv2DBackpropInput' with these attrs\n     [[Node: convt = Conv2DBackpropInput[T=DT_FLOAT, data_format=\"NHWC\", padding=\"SAME\", strides=[1, 1, 1, 1], use_cudnn_on_gpu=true](Shape, W/read, x)]]\n```\n\nHere is the python script generating the model:\n\n``` python\nfrom tools import freeze_graph\n\nimport tensorflow as tf\n\nprint('Init session')\nsess = tf.InteractiveSession()\n\nprint('Define vars and ops')\nx = tf.placeholder(tf.float32, shape=[None, 600, 600, 3], name=\"x\")\nW = tf.Variable(tf.truncated_normal([3, 3, 3, 3], stddev=0.1), name=\"W\")\nconvt = tf.nn.conv2d_transpose(x, W, tf.shape(x), strides=[1, 1, 1, 1], padding='SAME', name=\"convt\")\n\nprint('Init vars')\ninit = tf.initialize_all_variables()\nsess.run(init)\n\ninput_graph_name = \"input_graph.pb\"\n\nsaver = tf.train.Saver(var_list=None)\nsaver.save(sess, 'data/conv', global_step=None)\n\ngraph_def = sess.graph.as_graph_def()\ntf.train.write_graph(graph_def, \"data\", input_graph_name)\n\ninput_graph_path = 'data/' + input_graph_name\ninput_saver_def_path = \"\"\ninput_binary = False\ninput_checkpoint_path = 'data/conv'\noutput_node_names = \"convt\"\nrestore_op_name = \"save/restore_all\"\nfilename_tensor_name = \"save/Const:0\"\noutput_graph_path = \"data/frozen_convt.pb\"\nclear_devices = True\n\nfreeze_graph.freeze_graph(input_graph_path, input_saver_def_path,\n                          input_binary, input_checkpoint_path,\n                          output_node_names, restore_op_name,\n                          filename_tensor_name, output_graph_path,\n                          clear_devices, \"\")\n```\n\nHere is the Objective-C++ interesting part:\n\n``` C\n //  2. Load the network\n\n  NSString* network_path = FilePathForResourceName(@\"frozen_conv\", @\"pb\");\n  PortableReadFileToProto([network_path UTF8String], &tensorflow_graph);\n\n  LOG(INFO) << \"Creating session.\";\n  tensorflow::Status s = session->Create(tensorflow_graph);\n\n  if (!s.ok()) {\n    LOG(ERROR) << \"Could not create Tensorflow Graph: \" << s;\n  }\n\n\n  //  3. Run the network\n\n    std::string input_layer = \"x:0\";\n    std::string output_layer = \"convt:0\";\n\n    std::vector<tensorflow::Tensor> outputs;\n    tensorflow::Status run_status = session->Run({{input_layer, image_tensor}},\n                                                 {output_layer}, {}, &outputs);\n\n\n    if (!run_status.ok()) {\n      LOG(ERROR) << \"Running model failed: \" << run_status;\n    }\n```\n\nWe are using:\n- Python 3.5.1 for the script\n- The python tensorflow build is downloaded from `https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0rc0-py3-none-any.whl`\n- The compiled tensorflow for IOS is from the master branch 2 hour ago using the script `build_all_ios.sh`\n- We have **no** problem running the IOS example\n- We have **no** problem running a one standard convolutional graph frozen with custom python script\n- We checked that the file `tensorflow/core/ops/nn_ops.cc` is in the generated txt files (and this is the file containing the registering of the op 'Conv2DBackpropInput')\n\nI would be gratefull if anyone has an idea on why IOS seems to not be able to find the `Conv2DBackpropInput` Op ?\n"}