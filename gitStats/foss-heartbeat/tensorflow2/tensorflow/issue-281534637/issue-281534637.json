{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15321", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15321/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15321/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15321/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15321", "id": 281534637, "node_id": "MDU6SXNzdWUyODE1MzQ2Mzc=", "number": 15321, "title": "Feature Request: Support for DT_STRING type in ScatterNd kernel.", "user": {"login": "MtDersvan", "id": 7069222, "node_id": "MDQ6VXNlcjcwNjkyMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7069222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MtDersvan", "html_url": "https://github.com/MtDersvan", "followers_url": "https://api.github.com/users/MtDersvan/followers", "following_url": "https://api.github.com/users/MtDersvan/following{/other_user}", "gists_url": "https://api.github.com/users/MtDersvan/gists{/gist_id}", "starred_url": "https://api.github.com/users/MtDersvan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MtDersvan/subscriptions", "organizations_url": "https://api.github.com/users/MtDersvan/orgs", "repos_url": "https://api.github.com/users/MtDersvan/repos", "events_url": "https://api.github.com/users/MtDersvan/events{/privacy}", "received_events_url": "https://api.github.com/users/MtDersvan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-12T20:57:31Z", "updated_at": "2018-04-23T06:52:56Z", "closed_at": "2018-04-23T06:52:56Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: -</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: MacOs, Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binaries</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\nv1.3.0-rc1-5542-g03a1651cbb 1.5.0-dev20171206<br>\nand<br>\nv1.4.0-rc1-11-g130a514 1.4.0</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: -</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: -</li>\n<li><strong>CUDA/cuDNN version</strong>: -</li>\n<li><strong>GPU model and memory</strong>: -</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nindices <span class=\"pl-k\">=</span> tf.constant(\n    [[i] <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">37</span>)] <span class=\"pl-k\">+</span>\\\n    [[i] <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">37</span>,<span class=\"pl-c1\">37</span><span class=\"pl-k\">+</span><span class=\"pl-c1\">18</span>)] <span class=\"pl-k\">+</span>\\\n    [[i] <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">37</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">37</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">2</span><span class=\"pl-k\">+</span><span class=\"pl-c1\">9</span>)] <span class=\"pl-k\">+</span>\\\n    [[i] <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">37</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">37</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">3</span><span class=\"pl-k\">+</span><span class=\"pl-c1\">36</span>)]\n)\nupdates <span class=\"pl-k\">=</span> tf.ones([<span class=\"pl-c1\">100</span>,<span class=\"pl-c1\">13</span>])\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> This line:</span>\nupdates <span class=\"pl-k\">=</span> tf.as_string(updates)\nshape <span class=\"pl-k\">=</span> tf.constant([<span class=\"pl-c1\">37</span><span class=\"pl-k\">*</span><span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">13</span>])\nsc<span class=\"pl-k\">=</span>tf.scatter_nd(indices, updates, shape)\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    <span class=\"pl-c1\">print</span>(sess.run(sc))</pre></div>\n<h3>Describe the problem</h3>\n<p><code>tf.scatter_nd</code> supports most of the other types except <code>DT_STRING</code>, and throws the following error:</p>\n<div class=\"highlight highlight-text-shell-session\"><pre><span class=\"pl-c1\">---------------------------------------------------------------------------</span>\n<span class=\"pl-c1\">NotFoundError                             Traceback (most recent call last)</span>\n<span class=\"pl-c1\">&lt;ipython-input-196-71592cd7f940&gt; in &lt;module&gt;()</span>\n<span class=\"pl-c1\">      9 updates = tf.as_string(updates)</span>\n<span class=\"pl-c1\">     10 shape = tf.constant([37*4, 13])</span>\n<span class=\"pl-c1\">---&gt; 11 sc=tf.scatter_nd(indices, updates, shape)</span>\n\n<span class=\"pl-c1\">~/tf-nightly/lib/python3.6/site-packages/tensorflow/python/ops/gen_array_ops.py in scatter_nd(indices, updates, shape, name)</span>\n<span class=\"pl-c1\">   4395     _attrs = (\"T\", _attr_T, \"Tindices\", _attr_Tindices)</span>\n<span class=\"pl-c1\">   4396     _result = _execute.execute(b\"ScatterNd\", 1, inputs=_inputs_flat,</span>\n<span class=\"pl-c1\">-&gt; 4397                                attrs=_attrs, ctx=_ctx, name=name)</span>\n<span class=\"pl-c1\">   4398   _execute.record_gradient(</span>\n<span class=\"pl-c1\">   4399       \"ScatterNd\", _inputs_flat, _attrs, _result, name)</span>\n\n<span class=\"pl-c1\">~/tf-nightly/lib/python3.6/site-packages/tensorflow/python/eager/execute.py in quick_execute(op_name, num_outputs, inputs, attrs, ctx, name)</span>\n<span class=\"pl-c1\">     64     else:</span>\n<span class=\"pl-c1\">     65       message = e.message</span>\n<span class=\"pl-c1\">---&gt; 66     six.raise_from(core._status_to_exception(e.code, message), None)</span>\n<span class=\"pl-c1\">     67   # pylint: enable=protected-access</span>\n<span class=\"pl-c1\">     68   return tensors</span>\n\n<span class=\"pl-c1\">~/tf-nightly/lib/python3.6/site-packages/six.py in raise_from(value, from_value)</span>\n\n<span class=\"pl-c1\">NotFoundError: No registered 'ScatterNd' OpKernel for CPU devices compatible with node ScatterNd = ScatterNd[T=DT_STRING, Tindices=DT_INT32](dummy_input, dummy_input, dummy_input)</span>\n<span class=\"pl-c1\">\t (OpKernel was found, but attributes didn't match)</span>\n<span class=\"pl-c1\">\t.  Registered:  device='CPU'; T in [DT_INT64]; Tindices in [DT_INT32]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_INT64]; Tindices in [DT_INT64]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_INT32]; Tindices in [DT_INT32]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_INT32]; Tindices in [DT_INT64]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_UINT16]; Tindices in [DT_INT32]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_UINT16]; Tindices in [DT_INT64]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_INT16]; Tindices in [DT_INT32]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_INT16]; Tindices in [DT_INT64]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_UINT8]; Tindices in [DT_INT32]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_UINT8]; Tindices in [DT_INT64]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_INT8]; Tindices in [DT_INT32]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_INT8]; Tindices in [DT_INT64]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_HALF]; Tindices in [DT_INT32]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_HALF]; Tindices in [DT_INT64]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_FLOAT]; Tindices in [DT_INT32]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_FLOAT]; Tindices in [DT_INT64]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_DOUBLE]; Tindices in [DT_INT32]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_DOUBLE]; Tindices in [DT_INT64]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_COMPLEX64]; Tindices in [DT_INT32]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_COMPLEX64]; Tindices in [DT_INT64]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_COMPLEX128]; Tindices in [DT_INT32]</span>\n<span class=\"pl-c1\">  device='CPU'; T in [DT_COMPLEX128]; Tindices in [DT_INT64]</span>\n<span class=\"pl-c1\"> [Op:ScatterNd]</span>\n</pre></div>\n<h3>Question</h3>\n<p>Is it possible to get <code>tf.scatter_nd</code> to work with strings, for example, an empty string as a default value?<br>\nAlso, on the related note, rn the default values are <code>0</code> or <code>0.0</code>, can the function be extended to use an arbitrary value (e.g. a padding symbol)?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): -\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOs, Ubuntu 16.04\nTensorFlow installed from (source or binary): binaries\nTensorFlow version (use command below):\nv1.3.0-rc1-5542-g03a1651cbb 1.5.0-dev20171206\nand\nv1.4.0-rc1-11-g130a514 1.4.0\nPython version: 3.6\nBazel version (if compiling from source): -\nGCC/Compiler version (if compiling from source): -\nCUDA/cuDNN version: -\nGPU model and memory: -\nExact command to reproduce:\n\nimport tensorflow as tf\nindices = tf.constant(\n    [[i] for i in range(37)] +\\\n    [[i] for i in range(37,37+18)] +\\\n    [[i] for i in range(37*2,37*2+9)] +\\\n    [[i] for i in range(37*3,37*3+36)]\n)\nupdates = tf.ones([100,13])\n# This line:\nupdates = tf.as_string(updates)\nshape = tf.constant([37*4, 13])\nsc=tf.scatter_nd(indices, updates, shape)\nwith tf.Session() as sess:\n    print(sess.run(sc))\nDescribe the problem\ntf.scatter_nd supports most of the other types except DT_STRING, and throws the following error:\n---------------------------------------------------------------------------\nNotFoundError                             Traceback (most recent call last)\n<ipython-input-196-71592cd7f940> in <module>()\n      9 updates = tf.as_string(updates)\n     10 shape = tf.constant([37*4, 13])\n---> 11 sc=tf.scatter_nd(indices, updates, shape)\n\n~/tf-nightly/lib/python3.6/site-packages/tensorflow/python/ops/gen_array_ops.py in scatter_nd(indices, updates, shape, name)\n   4395     _attrs = (\"T\", _attr_T, \"Tindices\", _attr_Tindices)\n   4396     _result = _execute.execute(b\"ScatterNd\", 1, inputs=_inputs_flat,\n-> 4397                                attrs=_attrs, ctx=_ctx, name=name)\n   4398   _execute.record_gradient(\n   4399       \"ScatterNd\", _inputs_flat, _attrs, _result, name)\n\n~/tf-nightly/lib/python3.6/site-packages/tensorflow/python/eager/execute.py in quick_execute(op_name, num_outputs, inputs, attrs, ctx, name)\n     64     else:\n     65       message = e.message\n---> 66     six.raise_from(core._status_to_exception(e.code, message), None)\n     67   # pylint: enable=protected-access\n     68   return tensors\n\n~/tf-nightly/lib/python3.6/site-packages/six.py in raise_from(value, from_value)\n\nNotFoundError: No registered 'ScatterNd' OpKernel for CPU devices compatible with node ScatterNd = ScatterNd[T=DT_STRING, Tindices=DT_INT32](dummy_input, dummy_input, dummy_input)\n\t (OpKernel was found, but attributes didn't match)\n\t.  Registered:  device='CPU'; T in [DT_INT64]; Tindices in [DT_INT32]\n  device='CPU'; T in [DT_INT64]; Tindices in [DT_INT64]\n  device='CPU'; T in [DT_INT32]; Tindices in [DT_INT32]\n  device='CPU'; T in [DT_INT32]; Tindices in [DT_INT64]\n  device='CPU'; T in [DT_UINT16]; Tindices in [DT_INT32]\n  device='CPU'; T in [DT_UINT16]; Tindices in [DT_INT64]\n  device='CPU'; T in [DT_INT16]; Tindices in [DT_INT32]\n  device='CPU'; T in [DT_INT16]; Tindices in [DT_INT64]\n  device='CPU'; T in [DT_UINT8]; Tindices in [DT_INT32]\n  device='CPU'; T in [DT_UINT8]; Tindices in [DT_INT64]\n  device='CPU'; T in [DT_INT8]; Tindices in [DT_INT32]\n  device='CPU'; T in [DT_INT8]; Tindices in [DT_INT64]\n  device='CPU'; T in [DT_HALF]; Tindices in [DT_INT32]\n  device='CPU'; T in [DT_HALF]; Tindices in [DT_INT64]\n  device='CPU'; T in [DT_FLOAT]; Tindices in [DT_INT32]\n  device='CPU'; T in [DT_FLOAT]; Tindices in [DT_INT64]\n  device='CPU'; T in [DT_DOUBLE]; Tindices in [DT_INT32]\n  device='CPU'; T in [DT_DOUBLE]; Tindices in [DT_INT64]\n  device='CPU'; T in [DT_COMPLEX64]; Tindices in [DT_INT32]\n  device='CPU'; T in [DT_COMPLEX64]; Tindices in [DT_INT64]\n  device='CPU'; T in [DT_COMPLEX128]; Tindices in [DT_INT32]\n  device='CPU'; T in [DT_COMPLEX128]; Tindices in [DT_INT64]\n [Op:ScatterNd]\n\nQuestion\nIs it possible to get tf.scatter_nd to work with strings, for example, an empty string as a default value?\nAlso, on the related note, rn the default values are 0 or 0.0, can the function be extended to use an arbitrary value (e.g. a padding symbol)?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: -\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: MacOs, Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: binaries\r\n- **TensorFlow version (use command below)**: \r\nv1.3.0-rc1-5542-g03a1651cbb 1.5.0-dev20171206\r\nand\r\nv1.4.0-rc1-11-g130a514 1.4.0\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: -\r\n- **GCC/Compiler version (if compiling from source)**: -\r\n- **CUDA/cuDNN version**: -\r\n- **GPU model and memory**: -\r\n- **Exact command to reproduce**:\r\n~~~python\r\nimport tensorflow as tf\r\nindices = tf.constant(\r\n    [[i] for i in range(37)] +\\\r\n    [[i] for i in range(37,37+18)] +\\\r\n    [[i] for i in range(37*2,37*2+9)] +\\\r\n    [[i] for i in range(37*3,37*3+36)]\r\n)\r\nupdates = tf.ones([100,13])\r\n# This line:\r\nupdates = tf.as_string(updates)\r\nshape = tf.constant([37*4, 13])\r\nsc=tf.scatter_nd(indices, updates, shape)\r\nwith tf.Session() as sess:\r\n    print(sess.run(sc))\r\n~~~\r\n\r\n### Describe the problem\r\n`tf.scatter_nd` supports most of the other types except `DT_STRING`, and throws the following error:\r\n~~~console\r\n---------------------------------------------------------------------------\r\nNotFoundError                             Traceback (most recent call last)\r\n<ipython-input-196-71592cd7f940> in <module>()\r\n      9 updates = tf.as_string(updates)\r\n     10 shape = tf.constant([37*4, 13])\r\n---> 11 sc=tf.scatter_nd(indices, updates, shape)\r\n\r\n~/tf-nightly/lib/python3.6/site-packages/tensorflow/python/ops/gen_array_ops.py in scatter_nd(indices, updates, shape, name)\r\n   4395     _attrs = (\"T\", _attr_T, \"Tindices\", _attr_Tindices)\r\n   4396     _result = _execute.execute(b\"ScatterNd\", 1, inputs=_inputs_flat,\r\n-> 4397                                attrs=_attrs, ctx=_ctx, name=name)\r\n   4398   _execute.record_gradient(\r\n   4399       \"ScatterNd\", _inputs_flat, _attrs, _result, name)\r\n\r\n~/tf-nightly/lib/python3.6/site-packages/tensorflow/python/eager/execute.py in quick_execute(op_name, num_outputs, inputs, attrs, ctx, name)\r\n     64     else:\r\n     65       message = e.message\r\n---> 66     six.raise_from(core._status_to_exception(e.code, message), None)\r\n     67   # pylint: enable=protected-access\r\n     68   return tensors\r\n\r\n~/tf-nightly/lib/python3.6/site-packages/six.py in raise_from(value, from_value)\r\n\r\nNotFoundError: No registered 'ScatterNd' OpKernel for CPU devices compatible with node ScatterNd = ScatterNd[T=DT_STRING, Tindices=DT_INT32](dummy_input, dummy_input, dummy_input)\r\n\t (OpKernel was found, but attributes didn't match)\r\n\t.  Registered:  device='CPU'; T in [DT_INT64]; Tindices in [DT_INT32]\r\n  device='CPU'; T in [DT_INT64]; Tindices in [DT_INT64]\r\n  device='CPU'; T in [DT_INT32]; Tindices in [DT_INT32]\r\n  device='CPU'; T in [DT_INT32]; Tindices in [DT_INT64]\r\n  device='CPU'; T in [DT_UINT16]; Tindices in [DT_INT32]\r\n  device='CPU'; T in [DT_UINT16]; Tindices in [DT_INT64]\r\n  device='CPU'; T in [DT_INT16]; Tindices in [DT_INT32]\r\n  device='CPU'; T in [DT_INT16]; Tindices in [DT_INT64]\r\n  device='CPU'; T in [DT_UINT8]; Tindices in [DT_INT32]\r\n  device='CPU'; T in [DT_UINT8]; Tindices in [DT_INT64]\r\n  device='CPU'; T in [DT_INT8]; Tindices in [DT_INT32]\r\n  device='CPU'; T in [DT_INT8]; Tindices in [DT_INT64]\r\n  device='CPU'; T in [DT_HALF]; Tindices in [DT_INT32]\r\n  device='CPU'; T in [DT_HALF]; Tindices in [DT_INT64]\r\n  device='CPU'; T in [DT_FLOAT]; Tindices in [DT_INT32]\r\n  device='CPU'; T in [DT_FLOAT]; Tindices in [DT_INT64]\r\n  device='CPU'; T in [DT_DOUBLE]; Tindices in [DT_INT32]\r\n  device='CPU'; T in [DT_DOUBLE]; Tindices in [DT_INT64]\r\n  device='CPU'; T in [DT_COMPLEX64]; Tindices in [DT_INT32]\r\n  device='CPU'; T in [DT_COMPLEX64]; Tindices in [DT_INT64]\r\n  device='CPU'; T in [DT_COMPLEX128]; Tindices in [DT_INT32]\r\n  device='CPU'; T in [DT_COMPLEX128]; Tindices in [DT_INT64]\r\n [Op:ScatterNd]\r\n\r\n~~~\r\n\r\n### Question\r\nIs it possible to get `tf.scatter_nd` to work with strings, for example, an empty string as a default value?\r\nAlso, on the related note, rn the default values are `0` or `0.0`, can the function be extended to use an arbitrary value (e.g. a padding symbol)?\r\n"}