{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/525", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/525/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/525/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/525/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/525", "id": 122572625, "node_id": "MDU6SXNzdWUxMjI1NzI2MjU=", "number": 525, "title": "Consider adding tf.identity_like()", "user": {"login": "NickShahML", "id": 14891677, "node_id": "MDQ6VXNlcjE0ODkxNjc3", "avatar_url": "https://avatars2.githubusercontent.com/u/14891677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NickShahML", "html_url": "https://github.com/NickShahML", "followers_url": "https://api.github.com/users/NickShahML/followers", "following_url": "https://api.github.com/users/NickShahML/following{/other_user}", "gists_url": "https://api.github.com/users/NickShahML/gists{/gist_id}", "starred_url": "https://api.github.com/users/NickShahML/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NickShahML/subscriptions", "organizations_url": "https://api.github.com/users/NickShahML/orgs", "repos_url": "https://api.github.com/users/NickShahML/repos", "events_url": "https://api.github.com/users/NickShahML/events{/privacy}", "received_events_url": "https://api.github.com/users/NickShahML/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-12-16T18:29:25Z", "updated_at": "2017-02-09T22:37:44Z", "closed_at": "2015-12-19T00:44:27Z", "author_association": "NONE", "body_html": "<p>Hey TF,</p>\n<p>This is not a big deal, but you may want to add an identity_like function that theano has here:<br>\n<a href=\"http://nullege.com/codes/search/theano.tensor.identity_like\" rel=\"nofollow\">http://nullege.com/codes/search/theano.tensor.identity_like</a></p>\n<p>It would be useful for orthogonality with RNN's.</p>\n<p>It would basically be something like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">identity_like</span>(<span class=\"pl-smi\">input_tensor</span>, <span class=\"pl-smi\">scope</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span>):\n  <span class=\"pl-k\">with</span> tf.variable_scope(scope <span class=\"pl-k\">or</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>identity_like<span class=\"pl-pds\">\"</span></span>): <span class=\"pl-c\"><span class=\"pl-c\">#</span>in this linear scope, the library that you're retriving is Linear</span>\n    shape_0 <span class=\"pl-k\">=</span> tf.shape(input_tensor)[<span class=\"pl-c1\">0</span>]\n  <span class=\"pl-k\">return</span> tf.diag(tf.ones(shape_0))</pre></div>", "body_text": "Hey TF,\nThis is not a big deal, but you may want to add an identity_like function that theano has here:\nhttp://nullege.com/codes/search/theano.tensor.identity_like\nIt would be useful for orthogonality with RNN's.\nIt would basically be something like:\ndef identity_like(input_tensor, scope = None):\n  with tf.variable_scope(scope or \"identity_like\"): #in this linear scope, the library that you're retriving is Linear\n    shape_0 = tf.shape(input_tensor)[0]\n  return tf.diag(tf.ones(shape_0))", "body": "Hey TF, \n\nThis is not a big deal, but you may want to add an identity_like function that theano has here:\nhttp://nullege.com/codes/search/theano.tensor.identity_like\n\nIt would be useful for orthogonality with RNN's. \n\nIt would basically be something like:\n\n``` python\ndef identity_like(input_tensor, scope = None):\n  with tf.variable_scope(scope or \"identity_like\"): #in this linear scope, the library that you're retriving is Linear\n    shape_0 = tf.shape(input_tensor)[0]\n  return tf.diag(tf.ones(shape_0))\n```\n"}