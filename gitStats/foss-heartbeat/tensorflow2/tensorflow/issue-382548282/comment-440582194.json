{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/440582194", "html_url": "https://github.com/tensorflow/tensorflow/issues/23873#issuecomment-440582194", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23873", "id": 440582194, "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDU4MjE5NA==", "user": {"login": "galeone", "id": 8427788, "node_id": "MDQ6VXNlcjg0Mjc3ODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8427788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/galeone", "html_url": "https://github.com/galeone", "followers_url": "https://api.github.com/users/galeone/followers", "following_url": "https://api.github.com/users/galeone/following{/other_user}", "gists_url": "https://api.github.com/users/galeone/gists{/gist_id}", "starred_url": "https://api.github.com/users/galeone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/galeone/subscriptions", "organizations_url": "https://api.github.com/users/galeone/orgs", "repos_url": "https://api.github.com/users/galeone/repos", "events_url": "https://api.github.com/users/galeone/events{/privacy}", "received_events_url": "https://api.github.com/users/galeone/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-21T08:43:33Z", "updated_at": "2018-11-21T11:23:09Z", "author_association": "NONE", "body_html": "<p>I don't see the rationale here.<br>\n<code>generator</code> is a function that creates a new <code>Model</code>, if I call <code>generator</code> again, I create a new model, that's not what I want.</p>\n<p>I created <code>G</code> calling <code>generator</code> and <code>G</code> is the model I want to use.</p>\n<p>The problem is that <code>G.updates</code> are a set of operations that are not added to the graph because I defined the model using the keras layers (that are not a replacement for tf.layers - sadly).</p>\n<p>Moreover, <code>G.updates</code> need an input that a \"generic\" input that Keras overwrites when calling <code>model.fit</code>, <code>compile</code>, <code>train_on_batch</code> and so on.</p>\n<p>But if I try to run <code>sess.run(G.updates)</code> it raises an error since the input is not defined.</p>\n<p>This is wrong, since if I defined <code>G_z = G(z)</code> I want that when I call <code>train_g</code>, that's a function of <code>G(z)</code>, all the required operations for the training [hence also the update ops] must be executed (or at least, added to the graph, so I can trigger the update operations when the training steps are executed).</p>", "body_text": "I don't see the rationale here.\ngenerator is a function that creates a new Model, if I call generator again, I create a new model, that's not what I want.\nI created G calling generator and G is the model I want to use.\nThe problem is that G.updates are a set of operations that are not added to the graph because I defined the model using the keras layers (that are not a replacement for tf.layers - sadly).\nMoreover, G.updates need an input that a \"generic\" input that Keras overwrites when calling model.fit, compile, train_on_batch and so on.\nBut if I try to run sess.run(G.updates) it raises an error since the input is not defined.\nThis is wrong, since if I defined G_z = G(z) I want that when I call train_g, that's a function of G(z), all the required operations for the training [hence also the update ops] must be executed (or at least, added to the graph, so I can trigger the update operations when the training steps are executed).", "body": "I don't see the rationale here.\r\n`generator` is a function that creates a new `Model`, if I call `generator` again, I create a new model, that's not what I want.\r\n\r\nI created `G` calling `generator` and `G` is the model I want to use.\r\n\r\nThe problem is that `G.updates` are a set of operations that are not added to the graph because I defined the model using the keras layers (that are not a replacement for tf.layers - sadly).\r\n\r\nMoreover, `G.updates` need an input that a \"generic\" input that Keras overwrites when calling `model.fit`, `compile`, `train_on_batch` and so on.\r\n\r\nBut if I try to run `sess.run(G.updates)` it raises an error since the input is not defined.\r\n\r\nThis is wrong, since if I defined `G_z = G(z)` I want that when I call `train_g`, that's a function of `G(z)`, all the required operations for the training [hence also the update ops] must be executed (or at least, added to the graph, so I can trigger the update operations when the training steps are executed)."}