{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/422924660", "html_url": "https://github.com/tensorflow/tensorflow/pull/22286#issuecomment-422924660", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22286", "id": 422924660, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjkyNDY2MA==", "user": {"login": "nhasabni", "id": 22304502, "node_id": "MDQ6VXNlcjIyMzA0NTAy", "avatar_url": "https://avatars0.githubusercontent.com/u/22304502?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhasabni", "html_url": "https://github.com/nhasabni", "followers_url": "https://api.github.com/users/nhasabni/followers", "following_url": "https://api.github.com/users/nhasabni/following{/other_user}", "gists_url": "https://api.github.com/users/nhasabni/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhasabni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhasabni/subscriptions", "organizations_url": "https://api.github.com/users/nhasabni/orgs", "repos_url": "https://api.github.com/users/nhasabni/repos", "events_url": "https://api.github.com/users/nhasabni/events{/privacy}", "received_events_url": "https://api.github.com/users/nhasabni/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-19T19:13:24Z", "updated_at": "2018-09-19T19:13:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=986732\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tatianashp\">@tatianashp</a> I think I will need some input to fix the issue. I am not sure if the TensorFlow core API exists for what I am looking for. I think <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1994308\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/akshayka\">@akshayka</a> have worked on relevant piece of code. So if they can comment, that would be great.</p>\n<p><strong>The main issue that I was trying to address was</strong>: some unit tests fail with MKL graph passes because these graph passes need the definition of standard operators (like Const) in order to rewrite graphs. The definitions of these standard operators are only available in <code>OpRegistry::Global</code>, and the code in <code>partitioned_function_ops.cc</code> was not passing <code>OpRegistry::Global()</code> to the graph passes. That is why my change was to pass <code>OpRegistry::Global()</code> while creating graph in <code>partitioned_function_ops.cc</code>.</p>\n<p>But with my change, <code>python:eager_test</code> is failing because it cannot find a symbol <code>add_9n57JfTlx2g</code> (The precise error is <code>graph.cc:379] Non-OK-status: ops_.LookUpOpDef(node-&gt;type_str    ing(), &amp;op_def) status: Not found: Op type not registered add_9n57JfTlx2g</code>.</p>\n<p>I tried to debug <code>eager_test</code> failure. I see that, by default, <code>partitioned_function_ops.cc</code> passes <code>flib_def</code> and the <code>default_registry()</code> for that <code>flib_def</code> from the graph for the input function while creating a graph that is passed to the graph optimization passes. I feel that my change passes <code>OpRegistry::Global()</code> instead of <code>default_registry()</code> for input <code>flib_def</code> while creating the graph. And I think this is creating the problem in `.</p>\n<p>I think the solution should allow us to create a graph using both <code>default_registry</code> from input <code>flib_def</code> and <code>OpRegistry::Global()</code>. But I do not think such API exists.</p>\n<p>Thanks.</p>", "body_text": "@tatianashp I think I will need some input to fix the issue. I am not sure if the TensorFlow core API exists for what I am looking for. I think @mrry and @akshayka have worked on relevant piece of code. So if they can comment, that would be great.\nThe main issue that I was trying to address was: some unit tests fail with MKL graph passes because these graph passes need the definition of standard operators (like Const) in order to rewrite graphs. The definitions of these standard operators are only available in OpRegistry::Global, and the code in partitioned_function_ops.cc was not passing OpRegistry::Global() to the graph passes. That is why my change was to pass OpRegistry::Global() while creating graph in partitioned_function_ops.cc.\nBut with my change, python:eager_test is failing because it cannot find a symbol add_9n57JfTlx2g (The precise error is graph.cc:379] Non-OK-status: ops_.LookUpOpDef(node->type_str    ing(), &op_def) status: Not found: Op type not registered add_9n57JfTlx2g.\nI tried to debug eager_test failure. I see that, by default, partitioned_function_ops.cc passes flib_def and the default_registry() for that flib_def from the graph for the input function while creating a graph that is passed to the graph optimization passes. I feel that my change passes OpRegistry::Global() instead of default_registry() for input flib_def while creating the graph. And I think this is creating the problem in `.\nI think the solution should allow us to create a graph using both default_registry from input flib_def and OpRegistry::Global(). But I do not think such API exists.\nThanks.", "body": "@tatianashp I think I will need some input to fix the issue. I am not sure if the TensorFlow core API exists for what I am looking for. I think @mrry and @akshayka have worked on relevant piece of code. So if they can comment, that would be great.\r\n\r\n**The main issue that I was trying to address was**: some unit tests fail with MKL graph passes because these graph passes need the definition of standard operators (like Const) in order to rewrite graphs. The definitions of these standard operators are only available in `OpRegistry::Global`, and the code in `partitioned_function_ops.cc` was not passing `OpRegistry::Global()` to the graph passes. That is why my change was to pass `OpRegistry::Global()` while creating graph in `partitioned_function_ops.cc`.\r\n\r\nBut with my change, `python:eager_test` is failing because it cannot find a symbol `add_9n57JfTlx2g` (The precise error is ```graph.cc:379] Non-OK-status: ops_.LookUpOpDef(node->type_str    ing(), &op_def) status: Not found: Op type not registered add_9n57JfTlx2g```. \r\n\r\nI tried to debug `eager_test` failure. I see that, by default, `partitioned_function_ops.cc` passes `flib_def` and the `default_registry()` for that `flib_def` from the graph for the input function while creating a graph that is passed to the graph optimization passes. I feel that my change passes `OpRegistry::Global()` instead of `default_registry()` for input `flib_def` while creating the graph. And I think this is creating the problem in `.\r\n\r\nI think the solution should allow us to create a graph using both `default_registry` from input `flib_def` and `OpRegistry::Global()`. But I do not think such API exists.\r\n\r\nThanks."}