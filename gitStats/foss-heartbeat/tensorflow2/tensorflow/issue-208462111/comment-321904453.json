{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/321904453", "html_url": "https://github.com/tensorflow/tensorflow/issues/7623#issuecomment-321904453", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7623", "id": 321904453, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMTkwNDQ1Mw==", "user": {"login": "arnoudbuzing", "id": 3236874, "node_id": "MDQ6VXNlcjMyMzY4NzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/3236874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arnoudbuzing", "html_url": "https://github.com/arnoudbuzing", "followers_url": "https://api.github.com/users/arnoudbuzing/followers", "following_url": "https://api.github.com/users/arnoudbuzing/following{/other_user}", "gists_url": "https://api.github.com/users/arnoudbuzing/gists{/gist_id}", "starred_url": "https://api.github.com/users/arnoudbuzing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arnoudbuzing/subscriptions", "organizations_url": "https://api.github.com/users/arnoudbuzing/orgs", "repos_url": "https://api.github.com/users/arnoudbuzing/repos", "events_url": "https://api.github.com/users/arnoudbuzing/events{/privacy}", "received_events_url": "https://api.github.com/users/arnoudbuzing/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-11T19:54:15Z", "updated_at": "2017-08-11T19:54:15Z", "author_association": "NONE", "body_html": "<p>One additional note that helped me figure things out (after reading all of the other advice and still having issues). This note may be useful for either the CPU or the GPU version of tensorflow.</p>\n<p>On Windows, there is a Python dynamic library called <code>_pywrap_tensorflow_internal.pyd</code> in a location similar to this one:</p>\n<p><code>C:\\Users\\username\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\_pywrap_tensorflow_internal.pyd</code></p>\n<p>This library in turn has dependencies on other libraries, which you can print out with the <code>dumpbin.exe</code> command that comes with Visual Studio:</p>\n<p><code>\"c:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\dumpbin.exe\" /dependents C:\\Users\\username\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\_pywrap_tensorflow_internal.pyd</code></p>\n<p>The output will include something like this:</p>\n<p><code>KERNEL32.dll WSOCK32.dll WS2_32.dll SHLWAPI.dll nvcuda.dll cublas64_80.dll cufft64_80.dll curand64_80.dll cudnn64_6.dll python36.dll MSVCP140.dll VCRUNTIME140.dll</code></p>\n<p>At this point you can simply use the <code>where</code> command to make sure you have all these libraries, e.g.:</p>\n<p><code>where kernel32.dll</code><br>\n<code>where nvcuda.dll</code></p>\n<p>Etc.</p>\n<p>If the <code>where</code> command fails, then the library is either not on <code>%PATH%</code> or it is missing altogether.</p>\n<p>In my case, I did everything right, but had a newer version of the cudnn library (I had <code>cudnn64_7.dll</code> but it was looking for <code>cudnn64_6.dll</code>).</p>\n<p>Almost all of the problems I have seen with this issue come down to checking that these libraries exist and can be found.</p>", "body_text": "One additional note that helped me figure things out (after reading all of the other advice and still having issues). This note may be useful for either the CPU or the GPU version of tensorflow.\nOn Windows, there is a Python dynamic library called _pywrap_tensorflow_internal.pyd in a location similar to this one:\nC:\\Users\\username\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\_pywrap_tensorflow_internal.pyd\nThis library in turn has dependencies on other libraries, which you can print out with the dumpbin.exe command that comes with Visual Studio:\n\"c:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\dumpbin.exe\" /dependents C:\\Users\\username\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\_pywrap_tensorflow_internal.pyd\nThe output will include something like this:\nKERNEL32.dll WSOCK32.dll WS2_32.dll SHLWAPI.dll nvcuda.dll cublas64_80.dll cufft64_80.dll curand64_80.dll cudnn64_6.dll python36.dll MSVCP140.dll VCRUNTIME140.dll\nAt this point you can simply use the where command to make sure you have all these libraries, e.g.:\nwhere kernel32.dll\nwhere nvcuda.dll\nEtc.\nIf the where command fails, then the library is either not on %PATH% or it is missing altogether.\nIn my case, I did everything right, but had a newer version of the cudnn library (I had cudnn64_7.dll but it was looking for cudnn64_6.dll).\nAlmost all of the problems I have seen with this issue come down to checking that these libraries exist and can be found.", "body": "One additional note that helped me figure things out (after reading all of the other advice and still having issues). This note may be useful for either the CPU or the GPU version of tensorflow.\r\n\r\nOn Windows, there is a Python dynamic library called `_pywrap_tensorflow_internal.pyd` in a location similar to this one:\r\n\r\n`C:\\Users\\username\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\_pywrap_tensorflow_internal.pyd`\r\n\r\nThis library in turn has dependencies on other libraries, which you can print out with the `dumpbin.exe` command that comes with Visual Studio:\r\n\r\n`\"c:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\dumpbin.exe\" /dependents C:\\Users\\username\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\tensorflow\\python\\_pywrap_tensorflow_internal.pyd`\r\n\r\nThe output will include something like this:\r\n\r\n`\r\n    KERNEL32.dll\r\n    WSOCK32.dll\r\n    WS2_32.dll\r\n    SHLWAPI.dll\r\n    nvcuda.dll\r\n    cublas64_80.dll\r\n    cufft64_80.dll\r\n    curand64_80.dll\r\n    cudnn64_6.dll\r\n    python36.dll\r\n    MSVCP140.dll\r\n    VCRUNTIME140.dll\r\n`\r\n\r\nAt this point you can simply use the `where` command to make sure you have all these libraries, e.g.:\r\n\r\n`where kernel32.dll`\r\n`where nvcuda.dll`\r\n\r\nEtc.\r\n\r\nIf the `where` command fails, then the library is either not on `%PATH%` or it is missing altogether.\r\n\r\nIn my case, I did everything right, but had a newer version of the cudnn library (I had `cudnn64_7.dll` but it was looking for `cudnn64_6.dll`).\r\n\r\nAlmost all of the problems I have seen with this issue come down to checking that these libraries exist and can be found.\r\n\r\n"}