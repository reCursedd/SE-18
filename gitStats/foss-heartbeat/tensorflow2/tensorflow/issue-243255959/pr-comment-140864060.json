{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/140864060", "pull_request_review_id": 64757494, "id": 140864060, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDg2NDA2MA==", "diff_hunk": "@@ -88,28 +89,30 @@ private static Tensor constructAndExecuteGraphToNormalizeImage(byte[] imageBytes\n       // Since the graph is being constructed once per execution here, we can use a constant for the\n       // input image. If the graph were to be re-used for multiple input images, a placeholder would\n       // have been more appropriate.\n-      final Output input = b.constant(\"input\", imageBytes);\n-      final Output output =\n+      final Output<String> input = b.stringConstant(\"input\", imageBytes);\n+      final Output<Float> output =\n           b.div(\n               b.sub(\n                   b.resizeBilinear(\n                       b.expandDims(\n-                          b.cast(b.decodeJpeg(input, 3), DataType.FLOAT),\n+                          b.cast(b.decodeJpeg(input, 3), Float.class),\n                           b.constant(\"make_batch\", 0)),\n                       b.constant(\"size\", new int[] {H, W})),\n                   b.constant(\"mean\", mean)),\n               b.constant(\"scale\", scale));\n       try (Session s = new Session(g)) {\n-        return s.runner().fetch(output.op().name()).run().get(0);\n+        Tensor<?> result = s.runner().fetch(output.op().name()).run().get(0);\n+        return (Tensor<Float>) result;\n       }\n     }\n   }\n \n-  private static float[] executeInceptionGraph(byte[] graphDef, Tensor image) {\n+  private static float[] executeInceptionGraph(byte[] graphDef, Tensor<Float> image) {\n     try (Graph g = new Graph()) {\n       g.importGraphDef(graphDef);\n       try (Session s = new Session(g);\n-          Tensor result = s.runner().feed(\"input\", image).fetch(\"output\").run().get(0)) {\n+          Tensor<?> result =", "path": "tensorflow/java/src/main/java/org/tensorflow/examples/LabelImage.java", "position": null, "original_position": 58, "commit_id": "bf2c8b494abf6c330c87b3ba18e6644fc8c0b22d", "original_commit_id": "d594284af0ace286b153f1fd7c424731e3f65c2c", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "```java\r\nTensor<Float> result = s.runner().feed(\"input\", image).fetch(\"output\").run().get(0).expect(Float.class);\r\n```\r\n?", "created_at": "2017-09-25T18:46:07Z", "updated_at": "2017-09-28T14:09:48Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11535#discussion_r140864060", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11535", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/140864060"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11535#discussion_r140864060"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11535"}}, "body_html": "<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">Tensor&lt;<span class=\"pl-smi\">Float</span>&gt;</span> result <span class=\"pl-k\">=</span> s<span class=\"pl-k\">.</span>runner()<span class=\"pl-k\">.</span>feed(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>input<span class=\"pl-pds\">\"</span></span>, image)<span class=\"pl-k\">.</span>fetch(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>output<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>run()<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>)<span class=\"pl-k\">.</span>expect(<span class=\"pl-smi\">Float</span><span class=\"pl-k\">.</span>class);</pre></div>\n<p>?</p>", "body_text": "Tensor<Float> result = s.runner().feed(\"input\", image).fetch(\"output\").run().get(0).expect(Float.class);\n?"}