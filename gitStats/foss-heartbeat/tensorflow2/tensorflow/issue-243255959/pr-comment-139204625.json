{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/139204625", "pull_request_review_id": 63108404, "id": 139204625, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzOTIwNDYyNQ==", "diff_hunk": "@@ -148,122 +151,137 @@ public void composite() {\n     try (Graph g = new Graph();\n         Session sess = new Session(g)) {\n       Scope s = new Scope(g);\n-      Output data = Const.create(s.withName(\"data\"), new int[] {600, 470, 170, 430, 300}).output();\n+      Output<TFInt32> data = Const.create(s.withName(\"data\"), new int[] {600, 470, 170, 430, 300}).output();\n \n       // Create a composite op with a customized name\n-      Variance var1 = Variance.create(s.withName(\"example\"), data);\n+      Variance<TFInt32> var1 = Variance.create(s.withName(\"example\"), data, TFInt32.class);\n       assertEquals(\"example/variance\", var1.output().op().name());\n \n       // Confirm internally added ops have the right names.\n       assertNotNull(g.operation(\"example/squared_deviation\"));\n       assertNotNull(g.operation(\"example/Mean\"));\n-      assertNotNull(g.operation(\"example/zero\"));\n+      //assertNotNull(g.operation(\"example/zero\"));\n \n       // Same composite op with a default name\n-      Variance var2 = Variance.create(s, data);\n+      Variance<TFInt32> var2 = Variance.create(s, data, TFInt32.class);\n       assertEquals(\"variance/variance\", var2.output().op().name());\n \n       // Confirm internally added ops have the right names.\n       assertNotNull(g.operation(\"variance/squared_deviation\"));\n       assertNotNull(g.operation(\"variance/Mean\"));\n-      assertNotNull(g.operation(\"variance/zero\"));\n+      //assertNotNull(g.operation(\"variance/zero\"));\n \n       // Verify correct results as well.\n-      Tensor result = sess.runner().fetch(var1.output()).run().get(0);\n+      Tensor<TFInt32> result = sess.runner().fetch(var1.output()).run().get(0).expect(TFInt32.class);\n       assertEquals(21704, result.intValue());\n-      result = sess.runner().fetch(var2.output()).run().get(0);\n+      result = sess.runner().fetch(var2.output()).run().get(0).expect(TFInt32.class);\n       assertEquals(21704, result.intValue());\n     }\n   }\n \n   // \"handwritten\" sample operator classes\n-  private static final class Const {\n-    private final Output output;\n-\n-    static Const create(Scope s, Object v) {\n-      try (Tensor value = Tensor.create(v)) {\n-        return new Const(\n+  private static final class Const<T> {\n+    private final Output<T> output;\n+    \n+    static Const<TFInt32> create(Scope s, int v) {\n+      return create(s, Tensor.create(v, TFInt32.class));\n+    }\n+    static Const<TFInt32> create(Scope s, int[] v) {\n+      return create(s, Tensor.create(v, TFInt32.class));\n+    }\n+    static <T> Const<T> create(Scope s, Tensor<T> value) {\n+      return new Const<T>(\n+          s.graph()\n+          .opBuilder(\"Const\", s.makeOpName(\"Const\"))\n+          .setAttr(\"dtype\", value.dataType())\n+          .setAttr(\"value\", value)\n+          .build()\n+          .<T>output(0));\n+    }\n+    static <T extends TFType> Const<T> create(Scope s, Object v, Class<T> type) {\n+      try (Tensor<T> value = Tensor.create(v, type)) {\n+        return new Const<T>(\n             s.graph()\n                 .opBuilder(\"Const\", s.makeOpName(\"Const\"))\n                 .setAttr(\"dtype\", value.dataType())\n                 .setAttr(\"value\", value)\n                 .build()\n-                .output(0));\n+                .<T>output(0));\n       }\n     }\n \n-    Const(Output o) {\n+    Const(Output<T> o) {\n       output = o;\n     }\n \n-    Output output() {\n+    Output<T> output() {\n       return output;\n     }\n   }\n \n-  private static final class Mean {\n-    private final Output output;\n+  private static final class Mean<T> {\n+    private final Output<T> output;\n \n-    static Mean create(Scope s, Output input, Output reductionIndices) {\n-      return new Mean(\n+    static <T> Mean<T> create(Scope s, Output<T> input, Output<T> reductionIndices) {\n+      return new Mean<T>(\n           s.graph()\n               .opBuilder(\"Mean\", s.makeOpName(\"Mean\"))\n               .addInput(input)\n               .addInput(reductionIndices)\n               .build()\n-              .output(0));\n+              .<T>output(0));\n     }\n \n-    Mean(Output o) {\n+    Mean(Output<T> o) {\n       output = o;\n     }\n \n-    Output output() {\n+    Output<T> output() {\n       return output;\n     }\n   }\n+  \n+  private static final class SquaredDifference<T> {\n+    private final Output<T> output;\n \n-  private static final class SquaredDifference {\n-    private final Output output;\n-\n-    static SquaredDifference create(Scope s, Output x, Output y) {\n-      return new SquaredDifference(\n+    static <T> SquaredDifference<T> create(Scope s, Output<T> x, Output<T> y) {\n+      return new SquaredDifference<T>(\n           s.graph()\n               .opBuilder(\"SquaredDifference\", s.makeOpName(\"SquaredDifference\"))\n               .addInput(x)\n               .addInput(y)\n               .build()\n-              .output(0));\n+              .<T>output(0));\n     }\n \n-    SquaredDifference(Output o) {\n+    SquaredDifference(Output<T> o) {\n       output = o;\n     }\n \n-    Output output() {\n+    Output<T> output() {\n       return output;\n     }\n   }\n \n-  private static final class Variance {\n-    private final Output output;\n+  private static final class Variance<T> {\n+    private final Output<T> output;\n \n-    static Variance create(Scope base, Output x) {\n+    static <T extends TFType> Variance<T> create(Scope base, Output<T> x, Class<T> type) {\n       Scope s = base.withSubScope(\"variance\");\n-      Output zero = Const.create(s.withName(\"zero\"), new int[] {0}).output();\n-      Output sqdiff =\n+      Output<T> zero = Const.create(base, Types.zeroValue(type), type).output();", "path": "tensorflow/java/src/test/java/org/tensorflow/op/ScopeTest.java", "position": null, "original_position": 185, "commit_id": "bf2c8b494abf6c330c87b3ba18e6644fc8c0b22d", "original_commit_id": "e424a03d18cd093b540789086ad3f2d328418682", "user": {"login": "andrewcmyers", "id": 4623813, "node_id": "MDQ6VXNlcjQ2MjM4MTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4623813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewcmyers", "html_url": "https://github.com/andrewcmyers", "followers_url": "https://api.github.com/users/andrewcmyers/followers", "following_url": "https://api.github.com/users/andrewcmyers/following{/other_user}", "gists_url": "https://api.github.com/users/andrewcmyers/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewcmyers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewcmyers/subscriptions", "organizations_url": "https://api.github.com/users/andrewcmyers/orgs", "repos_url": "https://api.github.com/users/andrewcmyers/repos", "events_url": "https://api.github.com/users/andrewcmyers/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewcmyers/received_events", "type": "User", "site_admin": false}, "body": "Unfortunately not. Variance is a parameterized class -- it's Variance\u27e8T\u27e9. So Const.create needs to infer - at compile time - from its argument what the type of output is that's being created. I suppose that the (generic) computation of zeroValue, and the table from Types, could be moved into this test if we think it's not generally useful.", "created_at": "2017-09-15T17:22:21Z", "updated_at": "2017-09-28T14:09:48Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11535#discussion_r139204625", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11535", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/139204625"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11535#discussion_r139204625"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11535"}}, "body_html": "<p>Unfortunately not. Variance is a parameterized class -- it's Variance\u27e8T\u27e9. So Const.create needs to infer - at compile time - from its argument what the type of output is that's being created. I suppose that the (generic) computation of zeroValue, and the table from Types, could be moved into this test if we think it's not generally useful.</p>", "body_text": "Unfortunately not. Variance is a parameterized class -- it's Variance\u27e8T\u27e9. So Const.create needs to infer - at compile time - from its argument what the type of output is that's being created. I suppose that the (generic) computation of zeroValue, and the table from Types, could be moved into this test if we think it's not generally useful.", "in_reply_to_id": 139072297}