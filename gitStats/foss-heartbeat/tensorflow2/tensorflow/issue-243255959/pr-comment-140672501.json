{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/140672501", "pull_request_review_id": 64757494, "id": 140672501, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDY3MjUwMQ==", "diff_hunk": "@@ -28,89 +28,123 @@\n import java.util.HashMap;\n \n /**\n- * A typed multi-dimensional array.\n+ * A statically typed multi-dimensional array whose elements are of a type described by T.\n  *\n  * <p>Instances of a Tensor are <b>not</b> thread-safe.\n  *\n  * <p><b>WARNING:</b> Resources consumed by the Tensor object <b>must</b> be explicitly freed by\n  * invoking the {@link #close()} method when the object is no longer needed. For example, using a\n- * try-with-resources block like:\n+ * try-with-resources block:\n  *\n  * <pre>{@code\n- * try(Tensor t = Tensor.create(...)) {\n+ * try (Tensor t = Tensor.create(...)) {\n  *   doSomethingWith(t);\n  * }\n  * }</pre>\n  */\n-public final class Tensor implements AutoCloseable {\n+public final class Tensor<T> implements AutoCloseable {\n \n   /**\n-   * Create a Tensor from a Java object.\n+   * Creates a Tensor from a Java object.\n    *\n-   * <p>A Tensor is a multi-dimensional array of elements of a limited set of types ({@link\n-   * DataType}). Thus, not all Java objects can be converted to a Tensor. In particular, {@code obj}\n-   * must be either a primitive (float, double, int, long, boolean) or a multi-dimensional array of\n-   * one of those primitives. For example:\n+   * <p>A {@code Tensor} is a multi-dimensional array of elements of a limited set of types ({@link\n+   * types}), so not all Java objects can be converted to a {@code Tensor}. In particular, the\n+   * argument {@code obj} must be either a primitive (float, double, int, long, boolean, byte) or a\n+   * multi-dimensional array of one of those primitives. The argument {@code type} specifies how to\n+   * interpret the first argument as a TensorFlow type. For example:\n    *\n    * <pre>{@code\n    * // Valid: A 64-bit integer scalar.\n-   * Tensor s = Tensor.create(42L);\n+   * Tensor<Long> s = Tensor.create(42L, Long.class);\n    *\n    * // Valid: A 3x2 matrix of floats.\n    * float[][] matrix = new float[3][2];\n-   * Tensor m = Tensor.create(matrix);\n+   * Tensor<Float> m = Tensor.create(matrix, Float.class);\n    *\n    * // Invalid: Will throw an IllegalArgumentException as an arbitrary Object\n    * // does not fit into the TensorFlow type system.\n-   * Tensor o = Tensor.create(new Object());\n+   * Tensor<?> o = Tensor.create(new Object(), ...);\n    *\n    * // Invalid: Will throw an IllegalArgumentException since there are\n    * // a differing number of elements in each row of this 2-D array.\n    * int[][] twoD = new int[2][];\n    * twoD[0] = new int[1];\n    * twoD[1] = new int[2];\n-   * Tensor x = Tensor.create(twoD);\n+   * Tensor<Integer> x = Tensor.create(twoD, Integer.class);\n    * }</pre>\n    *\n-   * {@link DataType#STRING} typed Tensors are multi-dimensionary arrays of arbitrary byte sequences\n-   * and thus have {@code byte[]} and not {@code String}-valued elements. For example:\n+   * {@link types.String} typed Tensors are multi-dimensional arrays of arbitrary byte sequences, so\n+   * can be initialized from arrays of {@code byte[]} elements. For example:\n    *\n    * <pre>{@code\n-   * // Valid: A DataType.STRING tensor.\n-   * Tensor s = Tensor.create(new byte[]{1, 2, 3});\n+   * // Valid: A String tensor.\n+   * Tensor<String> s = Tensor.create(new byte[]{1, 2, 3}, String.class);", "path": "tensorflow/java/src/main/java/org/tensorflow/Tensor.java", "position": 71, "original_position": 71, "commit_id": "bf2c8b494abf6c330c87b3ba18e6644fc8c0b22d", "original_commit_id": "d594284af0ace286b153f1fd7c424731e3f65c2c", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "As I see this, I think it can be confusing - that `Tensor<String>` doesn't take a `String` as the argument to `create()` (and it's really the only type where there is such a mismatch). What do you think about adding an `org.tensorflow.types.Bytes` class and using that?\r\n\r\nSo it would be:\r\n\r\n```\r\nTensor<Bytes> s = Tensor.create(new byte[]{1, 2, 3}, Bytes.class);\r\n```\r\n", "created_at": "2017-09-25T00:26:37Z", "updated_at": "2017-09-28T14:09:48Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11535#discussion_r140672501", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11535", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/140672501"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11535#discussion_r140672501"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11535"}}, "body_html": "<p>As I see this, I think it can be confusing - that <code>Tensor&lt;String&gt;</code> doesn't take a <code>String</code> as the argument to <code>create()</code> (and it's really the only type where there is such a mismatch). What do you think about adding an <code>org.tensorflow.types.Bytes</code> class and using that?</p>\n<p>So it would be:</p>\n<pre><code>Tensor&lt;Bytes&gt; s = Tensor.create(new byte[]{1, 2, 3}, Bytes.class);\n</code></pre>", "body_text": "As I see this, I think it can be confusing - that Tensor<String> doesn't take a String as the argument to create() (and it's really the only type where there is such a mismatch). What do you think about adding an org.tensorflow.types.Bytes class and using that?\nSo it would be:\nTensor<Bytes> s = Tensor.create(new byte[]{1, 2, 3}, Bytes.class);"}