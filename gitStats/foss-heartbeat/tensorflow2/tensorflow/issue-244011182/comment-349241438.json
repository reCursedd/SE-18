{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/349241438", "html_url": "https://github.com/tensorflow/tensorflow/issues/11603#issuecomment-349241438", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11603", "id": 349241438, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTI0MTQzOA==", "user": {"login": "npanpaliya", "id": 14196089, "node_id": "MDQ6VXNlcjE0MTk2MDg5", "avatar_url": "https://avatars3.githubusercontent.com/u/14196089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npanpaliya", "html_url": "https://github.com/npanpaliya", "followers_url": "https://api.github.com/users/npanpaliya/followers", "following_url": "https://api.github.com/users/npanpaliya/following{/other_user}", "gists_url": "https://api.github.com/users/npanpaliya/gists{/gist_id}", "starred_url": "https://api.github.com/users/npanpaliya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npanpaliya/subscriptions", "organizations_url": "https://api.github.com/users/npanpaliya/orgs", "repos_url": "https://api.github.com/users/npanpaliya/repos", "events_url": "https://api.github.com/users/npanpaliya/events{/privacy}", "received_events_url": "https://api.github.com/users/npanpaliya/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-05T09:10:23Z", "updated_at": "2017-12-05T09:11:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Tried the change done in Eigen's PR in Power specific files Altivec/PacketMath.h. However, just swapping the arguments of max function didn't work on Power.<br>\nThen I wrote a small program to see the behavior of vec_max and _mm_max_ps on Power and x86 respectively, which are called in Eigen's max function. And from the output of the program, it seems Power's builtin function for max calculation has a different behavior as compared to x86's intrinsics.<br>\nChecked std::max too and it always gives 1st argument on both Power and x86.</p>\n<p><strong>Output on Power:</strong></p>\n<pre><code>Output of vecMaxFunc(vector of NaNs, Vector of zeros)\nVec output at location [0] is 0\nVec output at location [1] is 0\nVec output at location [2] is 0\nVec output at location [3] is 0\n\nOutput of vecMaxFunc(vector of zeros, Vector of NaNs)\nVec output at location [0] is 0\nVec output at location [1] is 0\nVec output at location [2] is 0\nVec output at location [3] is 0\n\nstd::max NaN compared with 0: nan\nstd::max 0 compared with NaN: 0\n</code></pre>\n<p><strong>Output on X86:</strong></p>\n<pre><code>Output of vecMaxFunc(vector of NaNs, Vector of zeros)\nVec output at location [0] is 0\nVec output at location [1] is 0\nVec output at location [2] is 0\nVec output at location [3] is 0\n\nOutput of vecMaxFunc(vector of zeros, Vector of NaNs)\nVec output at location [0] is nan\nVec output at location [1] is nan\nVec output at location [2] is nan\nVec output at location [3] is nan\n\nstd::max NaN compared with 0: nan\nstd::max 0 compared with NaN: 0\n</code></pre>\n<p>I'm still working on this to see if we can get some work-around or fix from IBM's respective team.</p>", "body_text": "Tried the change done in Eigen's PR in Power specific files Altivec/PacketMath.h. However, just swapping the arguments of max function didn't work on Power.\nThen I wrote a small program to see the behavior of vec_max and _mm_max_ps on Power and x86 respectively, which are called in Eigen's max function. And from the output of the program, it seems Power's builtin function for max calculation has a different behavior as compared to x86's intrinsics.\nChecked std::max too and it always gives 1st argument on both Power and x86.\nOutput on Power:\nOutput of vecMaxFunc(vector of NaNs, Vector of zeros)\nVec output at location [0] is 0\nVec output at location [1] is 0\nVec output at location [2] is 0\nVec output at location [3] is 0\n\nOutput of vecMaxFunc(vector of zeros, Vector of NaNs)\nVec output at location [0] is 0\nVec output at location [1] is 0\nVec output at location [2] is 0\nVec output at location [3] is 0\n\nstd::max NaN compared with 0: nan\nstd::max 0 compared with NaN: 0\n\nOutput on X86:\nOutput of vecMaxFunc(vector of NaNs, Vector of zeros)\nVec output at location [0] is 0\nVec output at location [1] is 0\nVec output at location [2] is 0\nVec output at location [3] is 0\n\nOutput of vecMaxFunc(vector of zeros, Vector of NaNs)\nVec output at location [0] is nan\nVec output at location [1] is nan\nVec output at location [2] is nan\nVec output at location [3] is nan\n\nstd::max NaN compared with 0: nan\nstd::max 0 compared with NaN: 0\n\nI'm still working on this to see if we can get some work-around or fix from IBM's respective team.", "body": "Tried the change done in Eigen's PR in Power specific files Altivec/PacketMath.h. However, just swapping the arguments of max function didn't work on Power.\r\nThen I wrote a small program to see the behavior of vec_max and _mm_max_ps on Power and x86 respectively, which are called in Eigen's max function. And from the output of the program, it seems Power's builtin function for max calculation has a different behavior as compared to x86's intrinsics.\r\nChecked std::max too and it always gives 1st argument on both Power and x86.\r\n\r\n**Output on Power:**\r\n```\r\nOutput of vecMaxFunc(vector of NaNs, Vector of zeros)\r\nVec output at location [0] is 0\r\nVec output at location [1] is 0\r\nVec output at location [2] is 0\r\nVec output at location [3] is 0\r\n\r\nOutput of vecMaxFunc(vector of zeros, Vector of NaNs)\r\nVec output at location [0] is 0\r\nVec output at location [1] is 0\r\nVec output at location [2] is 0\r\nVec output at location [3] is 0\r\n\r\nstd::max NaN compared with 0: nan\r\nstd::max 0 compared with NaN: 0\r\n```\r\n\r\n\r\n**Output on X86:**\r\n```\r\nOutput of vecMaxFunc(vector of NaNs, Vector of zeros)\r\nVec output at location [0] is 0\r\nVec output at location [1] is 0\r\nVec output at location [2] is 0\r\nVec output at location [3] is 0\r\n\r\nOutput of vecMaxFunc(vector of zeros, Vector of NaNs)\r\nVec output at location [0] is nan\r\nVec output at location [1] is nan\r\nVec output at location [2] is nan\r\nVec output at location [3] is nan\r\n\r\nstd::max NaN compared with 0: nan\r\nstd::max 0 compared with NaN: 0\r\n```\r\n\r\nI'm still working on this to see if we can get some work-around or fix from IBM's respective team.\r\n"}