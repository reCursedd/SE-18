{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/77094235", "pull_request_review_id": null, "id": 77094235, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc3MDk0MjM1", "diff_hunk": "@@ -478,6 +478,14 @@ REGISTER_OP(\"Ceil\")\n Returns element-wise smallest integer in not less than x.\n )doc\");\n \n+REGISTER_OP(\"Rint\")\n+    .Input(\"x: T\")\n+    .Output(\"y: T\")\n+    .Attr(\"T: {float, double}\")\n+    .Doc(R\"doc(\n+Returns element-wise integer closest to x.", "path": "tensorflow/core/ops/math_ops.cc", "position": null, "original_position": 9, "commit_id": "9696341a6a1779eb2888917909cfeab8ddf32644", "original_commit_id": "0bfab954645d0a2c02f3e2f54382bdd84f950024", "user": {"login": "Mistobaan", "id": 112599, "node_id": "MDQ6VXNlcjExMjU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/112599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mistobaan", "html_url": "https://github.com/Mistobaan", "followers_url": "https://api.github.com/users/Mistobaan/followers", "following_url": "https://api.github.com/users/Mistobaan/following{/other_user}", "gists_url": "https://api.github.com/users/Mistobaan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mistobaan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mistobaan/subscriptions", "organizations_url": "https://api.github.com/users/Mistobaan/orgs", "repos_url": "https://api.github.com/users/Mistobaan/repos", "events_url": "https://api.github.com/users/Mistobaan/events{/privacy}", "received_events_url": "https://api.github.com/users/Mistobaan/received_events", "type": "User", "site_admin": false}, "body": "The result of the operation depends on the underlying C++ implementation and default setting.\n\nTo be certain at all the times what is our rounding, we can explicitly set the `std::fesetround(FE_TONEAREST);` when entering the C++ context and restore the previous mode if is not set to FE_TONEAREST.\n\n```\nsave_rint_setting = std::fegetround();\nstd::fesetround(FE_TONEAREST);\nstd::rint(value);\nstd::fesetround(save_rint_setting);\n```\n\n### Default settings\n- The gnu library is set to `FE_TONEAREST` by default.\n  http://www.gnu.org/software/libc/manual/html_node/Rounding.html\n- The cudnn library _seems_ to use a logic like TONEAREST http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#standard-functions but is not something explicitly set.\n  I can just just ignore this entire issue and say in the description that does rounding 'to nearest'.\n", "created_at": "2016-08-31T23:52:14Z", "updated_at": "2016-11-16T01:53:35Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4113#discussion_r77094235", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4113", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/77094235"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4113#discussion_r77094235"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4113"}}, "body_html": "<p>The result of the operation depends on the underlying C++ implementation and default setting.</p>\n<p>To be certain at all the times what is our rounding, we can explicitly set the <code>std::fesetround(FE_TONEAREST);</code> when entering the C++ context and restore the previous mode if is not set to FE_TONEAREST.</p>\n<pre><code>save_rint_setting = std::fegetround();\nstd::fesetround(FE_TONEAREST);\nstd::rint(value);\nstd::fesetround(save_rint_setting);\n</code></pre>\n<h3>Default settings</h3>\n<ul>\n<li>The gnu library is set to <code>FE_TONEAREST</code> by default.<br>\n<a href=\"http://www.gnu.org/software/libc/manual/html_node/Rounding.html\" rel=\"nofollow\">http://www.gnu.org/software/libc/manual/html_node/Rounding.html</a></li>\n<li>The cudnn library <em>seems</em> to use a logic like TONEAREST <a href=\"http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#standard-functions\" rel=\"nofollow\">http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#standard-functions</a> but is not something explicitly set.<br>\nI can just just ignore this entire issue and say in the description that does rounding 'to nearest'.</li>\n</ul>", "body_text": "The result of the operation depends on the underlying C++ implementation and default setting.\nTo be certain at all the times what is our rounding, we can explicitly set the std::fesetround(FE_TONEAREST); when entering the C++ context and restore the previous mode if is not set to FE_TONEAREST.\nsave_rint_setting = std::fegetround();\nstd::fesetround(FE_TONEAREST);\nstd::rint(value);\nstd::fesetround(save_rint_setting);\n\nDefault settings\n\nThe gnu library is set to FE_TONEAREST by default.\nhttp://www.gnu.org/software/libc/manual/html_node/Rounding.html\nThe cudnn library seems to use a logic like TONEAREST http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#standard-functions but is not something explicitly set.\nI can just just ignore this entire issue and say in the description that does rounding 'to nearest'.", "in_reply_to_id": 77022260}