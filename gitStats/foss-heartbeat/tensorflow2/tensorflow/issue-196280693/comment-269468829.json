{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/269468829", "html_url": "https://github.com/tensorflow/tensorflow/pull/6387#issuecomment-269468829", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6387", "id": 269468829, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTQ2ODgyOQ==", "user": {"login": "AndreasMadsen", "id": 505333, "node_id": "MDQ6VXNlcjUwNTMzMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/505333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreasMadsen", "html_url": "https://github.com/AndreasMadsen", "followers_url": "https://api.github.com/users/AndreasMadsen/followers", "following_url": "https://api.github.com/users/AndreasMadsen/following{/other_user}", "gists_url": "https://api.github.com/users/AndreasMadsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreasMadsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreasMadsen/subscriptions", "organizations_url": "https://api.github.com/users/AndreasMadsen/orgs", "repos_url": "https://api.github.com/users/AndreasMadsen/repos", "events_url": "https://api.github.com/users/AndreasMadsen/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreasMadsen/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-28T12:10:36Z", "updated_at": "2016-12-28T12:10:36Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>Oh, I think you can't use fprop in bprop when fprop is decorated with bprop like you have. Just make an fprop_raw function, same as your fprop but without <code>@Defun</code>, and call that one in bprop and fprop.</p>\n</blockquote>\n<p>That was it. It a little strange, as <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"180147209\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/4661\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/4661/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/4661\">#4661</a> is about depending on <code>fprop</code> in <code>bprop</code>.</p>\n<p>Anyway, I'm getting a new error.</p>\n<pre><code>PYTHONPATH=tensorflow/_python_build python3 tensorflow/tensorflow/contrib/sparsemax/python/kernel_tests/sparsemax_test.py\n/Users/Andreas/Sites/tensorflow/_python_build/tensorflow/python/framework/function.py:969: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\n  argspec = inspect.getargspec(func)\nEE.\n======================================================================\nERROR: testDouble (__main__.SparsemaxTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tensorflow/tensorflow/contrib/sparsemax/python/kernel_tests/sparsemax_test.py\", line 258, in testDouble\n    self._test_dtype('float64')\n  File \"tensorflow/tensorflow/contrib/sparsemax/python/kernel_tests/sparsemax_test.py\", line 224, in _test_dtype\n    self._test_sparsemax_against_numpy(dtype, random, use_gpu=False)\n  File \"tensorflow/tensorflow/contrib/sparsemax/python/kernel_tests/sparsemax_test.py\", line 88, in _test_sparsemax_against_numpy\n    self.assertShapeEqual(p_sparemax, tf_sparsemax_op)\n  File \"/Users/Andreas/Sites/tensorflow/_python_build/tensorflow/python/framework/test_util.py\", line 594, in assertShapeEqual\n    self.assertAllEqual(np_array.shape, tf_tensor.get_shape().as_list())\n  File \"/Users/Andreas/Sites/tensorflow/_python_build/tensorflow/python/framework/tensor_shape.py\", line 782, in as_list\n    raise ValueError(\"as_list() is not defined on an unknown TensorShape.\")\nValueError: as_list() is not defined on an unknown TensorShape.\n</code></pre>\n<p>I don't understand why the TensorShape would be unknown, as the sparsemax op is passed the numpy array directly. The tests also worked for both the kernel and <code>name_scope</code> implementations.</p>", "body_text": "Oh, I think you can't use fprop in bprop when fprop is decorated with bprop like you have. Just make an fprop_raw function, same as your fprop but without @Defun, and call that one in bprop and fprop.\n\nThat was it. It a little strange, as #4661 is about depending on fprop in bprop.\nAnyway, I'm getting a new error.\nPYTHONPATH=tensorflow/_python_build python3 tensorflow/tensorflow/contrib/sparsemax/python/kernel_tests/sparsemax_test.py\n/Users/Andreas/Sites/tensorflow/_python_build/tensorflow/python/framework/function.py:969: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\n  argspec = inspect.getargspec(func)\nEE.\n======================================================================\nERROR: testDouble (__main__.SparsemaxTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tensorflow/tensorflow/contrib/sparsemax/python/kernel_tests/sparsemax_test.py\", line 258, in testDouble\n    self._test_dtype('float64')\n  File \"tensorflow/tensorflow/contrib/sparsemax/python/kernel_tests/sparsemax_test.py\", line 224, in _test_dtype\n    self._test_sparsemax_against_numpy(dtype, random, use_gpu=False)\n  File \"tensorflow/tensorflow/contrib/sparsemax/python/kernel_tests/sparsemax_test.py\", line 88, in _test_sparsemax_against_numpy\n    self.assertShapeEqual(p_sparemax, tf_sparsemax_op)\n  File \"/Users/Andreas/Sites/tensorflow/_python_build/tensorflow/python/framework/test_util.py\", line 594, in assertShapeEqual\n    self.assertAllEqual(np_array.shape, tf_tensor.get_shape().as_list())\n  File \"/Users/Andreas/Sites/tensorflow/_python_build/tensorflow/python/framework/tensor_shape.py\", line 782, in as_list\n    raise ValueError(\"as_list() is not defined on an unknown TensorShape.\")\nValueError: as_list() is not defined on an unknown TensorShape.\n\nI don't understand why the TensorShape would be unknown, as the sparsemax op is passed the numpy array directly. The tests also worked for both the kernel and name_scope implementations.", "body": "> Oh, I think you can't use fprop in bprop when fprop is decorated with bprop like you have. Just make an fprop_raw function, same as your fprop but without `@Defun`, and call that one in bprop and fprop.\r\n\r\nThat was it. It a little strange, as #4661 is about depending on `fprop` in `bprop`.\r\n\r\nAnyway, I'm getting a new error.\r\n\r\n```\r\nPYTHONPATH=tensorflow/_python_build python3 tensorflow/tensorflow/contrib/sparsemax/python/kernel_tests/sparsemax_test.py\r\n/Users/Andreas/Sites/tensorflow/_python_build/tensorflow/python/framework/function.py:969: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\r\n  argspec = inspect.getargspec(func)\r\nEE.\r\n======================================================================\r\nERROR: testDouble (__main__.SparsemaxTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"tensorflow/tensorflow/contrib/sparsemax/python/kernel_tests/sparsemax_test.py\", line 258, in testDouble\r\n    self._test_dtype('float64')\r\n  File \"tensorflow/tensorflow/contrib/sparsemax/python/kernel_tests/sparsemax_test.py\", line 224, in _test_dtype\r\n    self._test_sparsemax_against_numpy(dtype, random, use_gpu=False)\r\n  File \"tensorflow/tensorflow/contrib/sparsemax/python/kernel_tests/sparsemax_test.py\", line 88, in _test_sparsemax_against_numpy\r\n    self.assertShapeEqual(p_sparemax, tf_sparsemax_op)\r\n  File \"/Users/Andreas/Sites/tensorflow/_python_build/tensorflow/python/framework/test_util.py\", line 594, in assertShapeEqual\r\n    self.assertAllEqual(np_array.shape, tf_tensor.get_shape().as_list())\r\n  File \"/Users/Andreas/Sites/tensorflow/_python_build/tensorflow/python/framework/tensor_shape.py\", line 782, in as_list\r\n    raise ValueError(\"as_list() is not defined on an unknown TensorShape.\")\r\nValueError: as_list() is not defined on an unknown TensorShape.\r\n```\r\n\r\nI don't understand why the TensorShape would be unknown, as the sparsemax op is passed the numpy array directly. The tests also worked for both the kernel and `name_scope` implementations."}