{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/269569774", "html_url": "https://github.com/tensorflow/tensorflow/pull/6387#issuecomment-269569774", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6387", "id": 269569774, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTU2OTc3NA==", "user": {"login": "AndreasMadsen", "id": 505333, "node_id": "MDQ6VXNlcjUwNTMzMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/505333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreasMadsen", "html_url": "https://github.com/AndreasMadsen", "followers_url": "https://api.github.com/users/AndreasMadsen/followers", "following_url": "https://api.github.com/users/AndreasMadsen/following{/other_user}", "gists_url": "https://api.github.com/users/AndreasMadsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreasMadsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreasMadsen/subscriptions", "organizations_url": "https://api.github.com/users/AndreasMadsen/orgs", "repos_url": "https://api.github.com/users/AndreasMadsen/repos", "events_url": "https://api.github.com/users/AndreasMadsen/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreasMadsen/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-29T01:47:57Z", "updated_at": "2016-12-29T01:47:57Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>You could do a tf.set_shape at the end to set the shape of the Tensor properly. Or just use assertEqual on x.shape and y.shape if x and y are numpy objects.</p>\n</blockquote>\n<p>I find it really odd that I have to do that, but okay.</p>\n<p>Here are the benchmark results:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">kernel CPU</th>\n<th align=\"left\">kernel GPU</th>\n<th align=\"left\">name_scope CPU</th>\n<th align=\"left\">Defun CPU</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">(1000, 10) sparsemax</td>\n<td align=\"left\">0.097 \u00b1 0.0053</td>\n<td align=\"left\">0.110 \u00b1 0.0645</td>\n<td align=\"left\">0.347 \u00b1 0.0573</td>\n<td align=\"left\">0.372 \u00b1 0.0941</td>\n</tr>\n<tr>\n<td align=\"left\">(1000, 10) sparsemax_grad</td>\n<td align=\"left\">0.163 \u00b1 0.0022</td>\n<td align=\"left\">0.109 \u00b1 0.0032</td>\n<td align=\"left\">0.534 \u00b1 0.0066</td>\n<td align=\"left\">0.687 \u00b1 0.0093</td>\n</tr>\n<tr>\n<td align=\"left\">(1000, 10) sparsemax_loss</td>\n<td align=\"left\">0.133 \u00b1 0.0037</td>\n<td align=\"left\">0.105 \u00b1 0.0029</td>\n<td align=\"left\">0.358 \u00b1 0.0047</td>\n<td align=\"left\">0.399 \u00b1 0.0043</td>\n</tr>\n<tr>\n<td align=\"left\">(1000, 10) sparsemax_loss_grad</td>\n<td align=\"left\">0.132 \u00b1 0.0033</td>\n<td align=\"left\">0.091 \u00b1 0.0014</td>\n<td align=\"left\">0.573 \u00b1 0.0078</td>\n<td align=\"left\">0.959 \u00b1 0.0118</td>\n</tr>\n<tr>\n<td align=\"left\">(1000, 100) sparsemax</td>\n<td align=\"left\">0.602 \u00b1 0.0535</td>\n<td align=\"left\">0.221 \u00b1 0.0042</td>\n<td align=\"left\">1.509 \u00b1 0.0626</td>\n<td align=\"left\">1.494 \u00b1 0.0701</td>\n</tr>\n<tr>\n<td align=\"left\">(1000, 100) sparsemax_grad</td>\n<td align=\"left\">1.045 \u00b1 0.0275</td>\n<td align=\"left\">0.238 \u00b1 0.0046</td>\n<td align=\"left\">2.429 \u00b1 0.0511</td>\n<td align=\"left\">2.967 \u00b1 0.0461</td>\n</tr>\n<tr>\n<td align=\"left\">(1000, 100) sparsemax_loss</td>\n<td align=\"left\">0.819 \u00b1 0.0410</td>\n<td align=\"left\">0.281 \u00b1 0.0044</td>\n<td align=\"left\">1.741 \u00b1 0.0390</td>\n<td align=\"left\">1.739 \u00b1 0.0420</td>\n</tr>\n<tr>\n<td align=\"left\">(1000, 100) sparsemax_loss_grad</td>\n<td align=\"left\">0.984 \u00b1 0.0472</td>\n<td align=\"left\">0.227 \u00b1 0.0031</td>\n<td align=\"left\">2.634 \u00b1 0.0455</td>\n<td align=\"left\">3.752 \u00b1 0.0364</td>\n</tr>\n<tr>\n<td align=\"left\">(1000, 512) sparsemax</td>\n<td align=\"left\">3.180 \u00b1 0.0149</td>\n<td align=\"left\">1.739 \u00b1 0.0463</td>\n<td align=\"left\">6.008 \u00b1 0.0546</td>\n<td align=\"left\">5.677 \u00b1 0.0560</td>\n</tr>\n<tr>\n<td align=\"left\">(1000, 512) sparsemax_grad</td>\n<td align=\"left\">3.972 \u00b1 0.0260</td>\n<td align=\"left\">1.779 \u00b1 0.0169</td>\n<td align=\"left\">8.192 \u00b1 0.0301</td>\n<td align=\"left\">11.660 \u00b1 0.0233</td>\n</tr>\n<tr>\n<td align=\"left\">(1000, 512) sparsemax_loss</td>\n<td align=\"left\">3.496 \u00b1 0.0271</td>\n<td align=\"left\">1.688 \u00b1 0.0088</td>\n<td align=\"left\">6.319 \u00b1 0.0404</td>\n<td align=\"left\">6.370 \u00b1 0.0203</td>\n</tr>\n<tr>\n<td align=\"left\">(1000, 512) sparsemax_loss_grad</td>\n<td align=\"left\">3.807 \u00b1 0.0859</td>\n<td align=\"left\">1.720 \u00b1 0.0073</td>\n<td align=\"left\">9.001 \u00b1 0.0540</td>\n<td align=\"left\">13.823 \u00b1 0.0294</td>\n</tr>\n<tr>\n<td align=\"left\">(20, 16384) sparsemax</td>\n<td align=\"left\">2.748 \u00b1 0.0427</td>\n<td align=\"left\">26.740 \u00b1 0.0171</td>\n<td align=\"left\">4.808 \u00b1 0.0598</td>\n<td align=\"left\">4.691 \u00b1 0.0679</td>\n</tr>\n<tr>\n<td align=\"left\">(20, 16384) sparsemax_grad</td>\n<td align=\"left\">3.417 \u00b1 0.0588</td>\n<td align=\"left\">26.715 \u00b1 0.0147</td>\n<td align=\"left\">6.217 \u00b1 0.0557</td>\n<td align=\"left\">9.567 \u00b1 0.0327</td>\n</tr>\n<tr>\n<td align=\"left\">(20, 16384) sparsemax_loss</td>\n<td align=\"left\">3.148 \u00b1 0.0744</td>\n<td align=\"left\">27.026 \u00b1 0.0262</td>\n<td align=\"left\">5.056 \u00b1 0.0366</td>\n<td align=\"left\">5.272 \u00b1 0.0159</td>\n</tr>\n<tr>\n<td align=\"left\">(20, 16384) sparsemax_loss_grad</td>\n<td align=\"left\">3.422 \u00b1 0.0411</td>\n<td align=\"left\">26.772 \u00b1 0.0108</td>\n<td align=\"left\">6.851 \u00b1 0.0401</td>\n<td align=\"left\">11.347 \u00b1 0.0505</td>\n</tr>\n</tbody>\n</table>", "body_text": "You could do a tf.set_shape at the end to set the shape of the Tensor properly. Or just use assertEqual on x.shape and y.shape if x and y are numpy objects.\n\nI find it really odd that I have to do that, but okay.\nHere are the benchmark results:\n\n\n\n\nkernel CPU\nkernel GPU\nname_scope CPU\nDefun CPU\n\n\n\n\n(1000, 10) sparsemax\n0.097 \u00b1 0.0053\n0.110 \u00b1 0.0645\n0.347 \u00b1 0.0573\n0.372 \u00b1 0.0941\n\n\n(1000, 10) sparsemax_grad\n0.163 \u00b1 0.0022\n0.109 \u00b1 0.0032\n0.534 \u00b1 0.0066\n0.687 \u00b1 0.0093\n\n\n(1000, 10) sparsemax_loss\n0.133 \u00b1 0.0037\n0.105 \u00b1 0.0029\n0.358 \u00b1 0.0047\n0.399 \u00b1 0.0043\n\n\n(1000, 10) sparsemax_loss_grad\n0.132 \u00b1 0.0033\n0.091 \u00b1 0.0014\n0.573 \u00b1 0.0078\n0.959 \u00b1 0.0118\n\n\n(1000, 100) sparsemax\n0.602 \u00b1 0.0535\n0.221 \u00b1 0.0042\n1.509 \u00b1 0.0626\n1.494 \u00b1 0.0701\n\n\n(1000, 100) sparsemax_grad\n1.045 \u00b1 0.0275\n0.238 \u00b1 0.0046\n2.429 \u00b1 0.0511\n2.967 \u00b1 0.0461\n\n\n(1000, 100) sparsemax_loss\n0.819 \u00b1 0.0410\n0.281 \u00b1 0.0044\n1.741 \u00b1 0.0390\n1.739 \u00b1 0.0420\n\n\n(1000, 100) sparsemax_loss_grad\n0.984 \u00b1 0.0472\n0.227 \u00b1 0.0031\n2.634 \u00b1 0.0455\n3.752 \u00b1 0.0364\n\n\n(1000, 512) sparsemax\n3.180 \u00b1 0.0149\n1.739 \u00b1 0.0463\n6.008 \u00b1 0.0546\n5.677 \u00b1 0.0560\n\n\n(1000, 512) sparsemax_grad\n3.972 \u00b1 0.0260\n1.779 \u00b1 0.0169\n8.192 \u00b1 0.0301\n11.660 \u00b1 0.0233\n\n\n(1000, 512) sparsemax_loss\n3.496 \u00b1 0.0271\n1.688 \u00b1 0.0088\n6.319 \u00b1 0.0404\n6.370 \u00b1 0.0203\n\n\n(1000, 512) sparsemax_loss_grad\n3.807 \u00b1 0.0859\n1.720 \u00b1 0.0073\n9.001 \u00b1 0.0540\n13.823 \u00b1 0.0294\n\n\n(20, 16384) sparsemax\n2.748 \u00b1 0.0427\n26.740 \u00b1 0.0171\n4.808 \u00b1 0.0598\n4.691 \u00b1 0.0679\n\n\n(20, 16384) sparsemax_grad\n3.417 \u00b1 0.0588\n26.715 \u00b1 0.0147\n6.217 \u00b1 0.0557\n9.567 \u00b1 0.0327\n\n\n(20, 16384) sparsemax_loss\n3.148 \u00b1 0.0744\n27.026 \u00b1 0.0262\n5.056 \u00b1 0.0366\n5.272 \u00b1 0.0159\n\n\n(20, 16384) sparsemax_loss_grad\n3.422 \u00b1 0.0411\n26.772 \u00b1 0.0108\n6.851 \u00b1 0.0401\n11.347 \u00b1 0.0505", "body": "> You could do a tf.set_shape at the end to set the shape of the Tensor properly. Or just use assertEqual on x.shape and y.shape if x and y are numpy objects.\r\n\r\nI find it really odd that I have to do that, but okay.\r\n\r\nHere are the benchmark results:\r\n\r\n|                                 | kernel CPU     | kernel GPU      | name_scope CPU   | Defun CPU       |\r\n|:--------------------------------|:---------------|:----------------|:-----------------|:----------------|\r\n| (1000, 10) sparsemax            | 0.097 \u00b1 0.0053 | 0.110 \u00b1 0.0645  | 0.347 \u00b1 0.0573   | 0.372 \u00b1 0.0941  |\r\n| (1000, 10) sparsemax_grad       | 0.163 \u00b1 0.0022 | 0.109 \u00b1 0.0032  | 0.534 \u00b1 0.0066   | 0.687 \u00b1 0.0093  |\r\n| (1000, 10) sparsemax_loss       | 0.133 \u00b1 0.0037 | 0.105 \u00b1 0.0029  | 0.358 \u00b1 0.0047   | 0.399 \u00b1 0.0043  |\r\n| (1000, 10) sparsemax_loss_grad  | 0.132 \u00b1 0.0033 | 0.091 \u00b1 0.0014  | 0.573 \u00b1 0.0078   | 0.959 \u00b1 0.0118  |\r\n| (1000, 100) sparsemax           | 0.602 \u00b1 0.0535 | 0.221 \u00b1 0.0042  | 1.509 \u00b1 0.0626   | 1.494 \u00b1 0.0701  |\r\n| (1000, 100) sparsemax_grad      | 1.045 \u00b1 0.0275 | 0.238 \u00b1 0.0046  | 2.429 \u00b1 0.0511   | 2.967 \u00b1 0.0461  |\r\n| (1000, 100) sparsemax_loss      | 0.819 \u00b1 0.0410 | 0.281 \u00b1 0.0044  | 1.741 \u00b1 0.0390   | 1.739 \u00b1 0.0420  |\r\n| (1000, 100) sparsemax_loss_grad | 0.984 \u00b1 0.0472 | 0.227 \u00b1 0.0031  | 2.634 \u00b1 0.0455   | 3.752 \u00b1 0.0364  |\r\n| (1000, 512) sparsemax           | 3.180 \u00b1 0.0149 | 1.739 \u00b1 0.0463  | 6.008 \u00b1 0.0546   | 5.677 \u00b1 0.0560  |\r\n| (1000, 512) sparsemax_grad      | 3.972 \u00b1 0.0260 | 1.779 \u00b1 0.0169  | 8.192 \u00b1 0.0301   | 11.660 \u00b1 0.0233 |\r\n| (1000, 512) sparsemax_loss      | 3.496 \u00b1 0.0271 | 1.688 \u00b1 0.0088  | 6.319 \u00b1 0.0404   | 6.370 \u00b1 0.0203  |\r\n| (1000, 512) sparsemax_loss_grad | 3.807 \u00b1 0.0859 | 1.720 \u00b1 0.0073  | 9.001 \u00b1 0.0540   | 13.823 \u00b1 0.0294 |\r\n| (20, 16384) sparsemax           | 2.748 \u00b1 0.0427 | 26.740 \u00b1 0.0171 | 4.808 \u00b1 0.0598   | 4.691 \u00b1 0.0679  |\r\n| (20, 16384) sparsemax_grad      | 3.417 \u00b1 0.0588 | 26.715 \u00b1 0.0147 | 6.217 \u00b1 0.0557   | 9.567 \u00b1 0.0327  |\r\n| (20, 16384) sparsemax_loss      | 3.148 \u00b1 0.0744 | 27.026 \u00b1 0.0262 | 5.056 \u00b1 0.0366   | 5.272 \u00b1 0.0159  |\r\n| (20, 16384) sparsemax_loss_grad | 3.422 \u00b1 0.0411 | 26.772 \u00b1 0.0108 | 6.851 \u00b1 0.0401   | 11.347 \u00b1 0.0505 |"}