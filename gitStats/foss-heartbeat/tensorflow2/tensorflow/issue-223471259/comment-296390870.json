{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/296390870", "html_url": "https://github.com/tensorflow/tensorflow/issues/9374#issuecomment-296390870", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9374", "id": 296390870, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjM5MDg3MA==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-22T18:03:47Z", "updated_at": "2017-04-22T18:03:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Yes, I believe calling <code>device_lib.list_local_devices()</code> <a href=\"https://github.com/tensorflow/tensorflow/blob/48d9915ebca770b40c4497a13c3edb87b6b042d0/tensorflow/python/client/device_lib.i#L32\">invokes the (morally static) <code>DeviceFactory::AddDevices()</code> code</a> for the GPU devices, but doesn't take a <code>ConfigProto</code>  and so passes <a href=\"https://github.com/tensorflow/tensorflow/blob/48d9915ebca770b40c4497a13c3edb87b6b042d0/tensorflow/python/client/device_lib.i#L30\">an empty <code>SessionOptions</code></a> to the factory.</p>\n<p>There's no good reason for that... IIRC we added <code>device_lib.py</code> in order to be able to print diagnostic information about the available devices when running benchmarks, and none of the benchmarks depended on configuring the device initialization. I don't know if there's a technical limitation in the GPU device code that prevents multiple instantiations, or separating the enumeration from the instantiation. <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"212210885\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/8136\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/8136/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/8136\">#8136</a> contains a feature request for rationalizing the runtime initialization code, so it might be worth chiming in there.</p>", "body_text": "Yes, I believe calling device_lib.list_local_devices() invokes the (morally static) DeviceFactory::AddDevices() code for the GPU devices, but doesn't take a ConfigProto  and so passes an empty SessionOptions to the factory.\nThere's no good reason for that... IIRC we added device_lib.py in order to be able to print diagnostic information about the available devices when running benchmarks, and none of the benchmarks depended on configuring the device initialization. I don't know if there's a technical limitation in the GPU device code that prevents multiple instantiations, or separating the enumeration from the instantiation. #8136 contains a feature request for rationalizing the runtime initialization code, so it might be worth chiming in there.", "body": "Yes, I believe calling `device_lib.list_local_devices()` [invokes the (morally static) `DeviceFactory::AddDevices()` code](https://github.com/tensorflow/tensorflow/blob/48d9915ebca770b40c4497a13c3edb87b6b042d0/tensorflow/python/client/device_lib.i#L32) for the GPU devices, but doesn't take a `ConfigProto`  and so passes [an empty `SessionOptions`](https://github.com/tensorflow/tensorflow/blob/48d9915ebca770b40c4497a13c3edb87b6b042d0/tensorflow/python/client/device_lib.i#L30) to the factory.\r\n\r\nThere's no good reason for that... IIRC we added `device_lib.py` in order to be able to print diagnostic information about the available devices when running benchmarks, and none of the benchmarks depended on configuring the device initialization. I don't know if there's a technical limitation in the GPU device code that prevents multiple instantiations, or separating the enumeration from the instantiation. #8136 contains a feature request for rationalizing the runtime initialization code, so it might be worth chiming in there."}