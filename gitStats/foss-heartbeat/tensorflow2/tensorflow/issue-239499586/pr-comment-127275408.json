{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/127275408", "pull_request_review_id": 49844077, "id": 127275408, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNzI3NTQwOA==", "diff_hunk": "@@ -1,18 +0,0 @@\n-/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.", "path": "tensorflow/core/kernels/slice_op_cpu_impl_6.cc", "position": null, "original_position": 1, "commit_id": "23f08f5bc71771c90e3c4f6998fd88aa27865682", "original_commit_id": "f928df6548c68d6ea22e7143d1334a0adad31f50", "user": {"login": "yanchen036", "id": 3898819, "node_id": "MDQ6VXNlcjM4OTg4MTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3898819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchen036", "html_url": "https://github.com/yanchen036", "followers_url": "https://api.github.com/users/yanchen036/followers", "following_url": "https://api.github.com/users/yanchen036/following{/other_user}", "gists_url": "https://api.github.com/users/yanchen036/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchen036/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchen036/subscriptions", "organizations_url": "https://api.github.com/users/yanchen036/orgs", "repos_url": "https://api.github.com/users/yanchen036/repos", "events_url": "https://api.github.com/users/yanchen036/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchen036/received_events", "type": "User", "site_admin": false}, "body": "Do you means these?\r\nfile: tensorflow/core/kernels/slice_op.h\r\n```C++\r\ntemplate <typename Device, typename T, int NDIMS>\r\nstruct Slice {\r\n  void operator()(const Device& d, Tensor* out, const Tensor& in,\r\n                  const gtl::ArraySlice<int64>& slice_indices,\r\n                  const gtl::ArraySlice<int64>& slice_sizes) {\r\n    switch (in.dims()) {\r\n      case NDIMS:\r\n        internal::SliceUsingEigen<Device, T, NDIMS>(d, out, in, slice_indices, slice_sizes);\r\n        break;\r\n      default:\r\n        if (Eigen::internal::is_same<Device, Eigen::GpuDevice>::value) {\r\n          internal::SliceSimpleGpu<Device, T>(d, out, in, slice_indices);\r\n        } else {\r\n          internal::SliceSimple<Device, T>(d, out, in, slice_indices);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n};\r\n```\r\nand file: tensorflow/core/kernels/slice_op_cpu_impl_1.cc\r\n```C++\r\n#define CPU_PROVIDED_IXDIM 1\r\n#include \"tensorflow/core/kernels/slice_op_cpu_impl.h\"\r\n#undef CPU_PROVIDED_IXDIM\r\n```", "created_at": "2017-07-13T17:09:49Z", "updated_at": "2017-11-02T06:17:16Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11140#discussion_r127275408", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11140", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/127275408"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11140#discussion_r127275408"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11140"}}, "body_html": "<p>Do you means these?<br>\nfile: tensorflow/core/kernels/slice_op.h</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">template </span>&lt;<span class=\"pl-k\">typename</span> Device, <span class=\"pl-k\">typename</span> T, <span class=\"pl-k\">int</span> NDIMS&gt;\n<span class=\"pl-k\">struct</span> <span class=\"pl-en\">Slice</span> {\n  <span class=\"pl-k\">void</span> <span class=\"pl-en\">operator</span>()(<span class=\"pl-k\">const</span> Device&amp; d, Tensor* out, <span class=\"pl-k\">const</span> Tensor&amp; in,\n                  <span class=\"pl-k\">const</span> gtl::ArraySlice&lt;int64&gt;&amp; slice_indices,\n                  <span class=\"pl-k\">const</span> gtl::ArraySlice&lt;int64&gt;&amp; slice_sizes) {\n    <span class=\"pl-k\">switch</span> (in.<span class=\"pl-c1\">dims</span>()) {\n      <span class=\"pl-k\">case</span> NDIMS:\n        internal::SliceUsingEigen&lt;Device, T, NDIMS&gt;(d, out, in, slice_indices, slice_sizes);\n        <span class=\"pl-k\">break</span>;\n      <span class=\"pl-k\">default</span>:\n        <span class=\"pl-k\">if</span> (Eigen::internal::is_same&lt;Device, Eigen::GpuDevice&gt;::value) {\n          internal::SliceSimpleGpu&lt;Device, T&gt;(d, out, in, slice_indices);\n        } <span class=\"pl-k\">else</span> {\n          internal::SliceSimple&lt;Device, T&gt;(d, out, in, slice_indices);\n        }\n        <span class=\"pl-k\">break</span>;\n    }\n  }\n};</pre></div>\n<p>and file: tensorflow/core/kernels/slice_op_cpu_impl_1.cc</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">define</span> <span class=\"pl-en\">CPU_PROVIDED_IXDIM</span> <span class=\"pl-c1\">1</span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/kernels/slice_op_cpu_impl.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">undef</span> CPU_PROVIDED_IXDIM</pre></div>", "body_text": "Do you means these?\nfile: tensorflow/core/kernels/slice_op.h\ntemplate <typename Device, typename T, int NDIMS>\nstruct Slice {\n  void operator()(const Device& d, Tensor* out, const Tensor& in,\n                  const gtl::ArraySlice<int64>& slice_indices,\n                  const gtl::ArraySlice<int64>& slice_sizes) {\n    switch (in.dims()) {\n      case NDIMS:\n        internal::SliceUsingEigen<Device, T, NDIMS>(d, out, in, slice_indices, slice_sizes);\n        break;\n      default:\n        if (Eigen::internal::is_same<Device, Eigen::GpuDevice>::value) {\n          internal::SliceSimpleGpu<Device, T>(d, out, in, slice_indices);\n        } else {\n          internal::SliceSimple<Device, T>(d, out, in, slice_indices);\n        }\n        break;\n    }\n  }\n};\nand file: tensorflow/core/kernels/slice_op_cpu_impl_1.cc\n#define CPU_PROVIDED_IXDIM 1\n#include \"tensorflow/core/kernels/slice_op_cpu_impl.h\"\n#undef CPU_PROVIDED_IXDIM", "in_reply_to_id": 125165741}