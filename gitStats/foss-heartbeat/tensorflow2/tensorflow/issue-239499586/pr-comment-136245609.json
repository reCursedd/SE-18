{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/136245609", "pull_request_review_id": 59755401, "id": 136245609, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjI0NTYwOQ==", "diff_hunk": "@@ -19,31 +19,84 @@ limitations under the License.\n // Functor definition for SliceOp, must be compilable by nvcc.\n \n #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n+#include \"tensorflow/core/framework/tensor.h\"\n #include \"tensorflow/core/framework/tensor_types.h\"\n+#include \"tensorflow/core/kernels/ops_util.h\"\n \n namespace tensorflow {\n-namespace functor {\n+\n+namespace internal {\n+\n+template <typename Device, typename T>\n+void SliceSimple(const Device& d, Tensor* out, const Tensor& in,\n+                 const gtl::ArraySlice<int64>& slice_indices);\n+template <typename Device, typename T>\n+void SliceSimpleGpu(const Device& d, Tensor* out, const Tensor& in,\n+                 const gtl::ArraySlice<int64>& slice_indices);\n+\n+template <typename Device, typename T>\n+void SliceSimple(const Device& d, Tensor* out, const Tensor& in,\n+                 const gtl::ArraySlice<int64>& slice_indices) {\n+  const int ndims = in.dims();\n+  const int64 nelem = out->NumElements();\n+  const gtl::InlinedVector<int64, 8> in_strides = ComputeStride<int64>(in.shape());\n+  const gtl::InlinedVector<int64, 8> out_strides = ComputeStride<int64>(out->shape());\n+  const T* p = in.flat<T>().data();\n+  T* q = out->flat<T>().data();\n+\n+  for (int64 o_idx = 0; o_idx < nelem; ++o_idx) {", "path": "tensorflow/core/kernels/slice_op.h", "position": null, "original_position": 30, "commit_id": "23f08f5bc71771c90e3c4f6998fd88aa27865682", "original_commit_id": "a5ed7f6106abf2acf58444e45fccc3b65082c5ff", "user": {"login": "yanchen036", "id": 3898819, "node_id": "MDQ6VXNlcjM4OTg4MTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3898819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchen036", "html_url": "https://github.com/yanchen036", "followers_url": "https://api.github.com/users/yanchen036/followers", "following_url": "https://api.github.com/users/yanchen036/following{/other_user}", "gists_url": "https://api.github.com/users/yanchen036/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchen036/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchen036/subscriptions", "organizations_url": "https://api.github.com/users/yanchen036/orgs", "repos_url": "https://api.github.com/users/yanchen036/repos", "events_url": "https://api.github.com/users/yanchen036/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchen036/received_events", "type": "User", "site_admin": false}, "body": "How about use a buffer to record all outer's i_idx and t, in this way, I can switch the inner loop and outer loop. It's space-time tradeoff.", "created_at": "2017-08-31T04:53:42Z", "updated_at": "2017-11-02T06:17:16Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11140#discussion_r136245609", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11140", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/136245609"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11140#discussion_r136245609"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11140"}}, "body_html": "<p>How about use a buffer to record all outer's i_idx and t, in this way, I can switch the inner loop and outer loop. It's space-time tradeoff.</p>", "body_text": "How about use a buffer to record all outer's i_idx and t, in this way, I can switch the inner loop and outer loop. It's space-time tradeoff.", "in_reply_to_id": 129375448}