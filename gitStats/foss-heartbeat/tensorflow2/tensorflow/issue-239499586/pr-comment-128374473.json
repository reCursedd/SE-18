{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/128374473", "pull_request_review_id": 51048449, "id": 128374473, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODM3NDQ3Mw==", "diff_hunk": "@@ -19,31 +19,84 @@ limitations under the License.\n // Functor definition for SliceOp, must be compilable by nvcc.\n \n #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n+#include \"tensorflow/core/framework/tensor.h\"\n #include \"tensorflow/core/framework/tensor_types.h\"\n+#include \"tensorflow/core/kernels/ops_util.h\"\n \n namespace tensorflow {\n-namespace functor {\n+\n+namespace internal {\n+\n+template <typename Device, typename T>\n+void SliceSimple(const Device& d, Tensor* out, const Tensor& in,\n+                 const gtl::ArraySlice<int64>& slice_indices);\n+template <typename Device, typename T>\n+void SliceSimpleGpu(const Device& d, Tensor* out, const Tensor& in,\n+                 const gtl::ArraySlice<int64>& slice_indices);\n+\n+template <typename Device, typename T>\n+void SliceSimple(const Device& d, Tensor* out, const Tensor& in,\n+                 const gtl::ArraySlice<int64>& slice_indices) {\n+  const int ndims = in.dims();\n+  const int64 nelem = out->NumElements();\n+  gtl::InlinedVector<int64, 8> in_strides = ComputeStride<int64>(in.shape());\n+  gtl::InlinedVector<int64, 8> out_strides = ComputeStride<int64>(out->shape());\n+  const T* p = in.flat<T>().data();\n+  T* q = out->flat<T>().data();\n+\n+  for (int64 o_idx = 0; o_idx < nelem; ++o_idx) {\n+    int64 i_idx = 0;\n+    int64 t = o_idx;\n+    for (int i = 0; i < ndims; ++i) {\n+      i_idx += (t / out_strides[i] + slice_indices[i]) * in_strides[i];\n+      t %= out_strides[i];\n+    }\n+    q[o_idx] = p[i_idx];\n+  }\n+}\n \n template <typename Device, typename T, int NDIMS>\n+void SliceUsingEigen(const Device& d, Tensor* out, const Tensor& in,\n+                 const gtl::ArraySlice<int64>& slice_indices,\n+                 const gtl::ArraySlice<int64>& slice_sizes) {\n+  auto input = in.tensor<T, NDIMS>();\n+  auto output = out->tensor<T, NDIMS>();\n+  Eigen::DSizes<int, NDIMS> indices;\n+  for (int i = 0; i < NDIMS; ++i) {\n+    indices[i] = slice_indices[i];\n+  }\n+  Eigen::DSizes<int, NDIMS> sizes;\n+  for (int i = 0; i < NDIMS; ++i) {\n+    sizes[i] = slice_sizes[i];\n+  }\n+  bool use_64bit = (input.size() > Eigen::NumTraits<int>::highest());", "path": "tensorflow/core/kernels/slice_op.h", "position": null, "original_position": 55, "commit_id": "23f08f5bc71771c90e3c4f6998fd88aa27865682", "original_commit_id": "294a3547655948ef5b4ce7e980c0e8bac2184fec", "user": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "body": "const. No need for parens.", "created_at": "2017-07-19T21:38:14Z", "updated_at": "2017-11-02T06:17:16Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11140#discussion_r128374473", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11140", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/128374473"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11140#discussion_r128374473"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11140"}}, "body_html": "<p>const. No need for parens.</p>", "body_text": "const. No need for parens."}