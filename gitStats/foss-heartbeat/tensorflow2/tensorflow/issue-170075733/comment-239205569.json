{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/239205569", "html_url": "https://github.com/tensorflow/tensorflow/issues/3703#issuecomment-239205569", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3703", "id": 239205569, "node_id": "MDEyOklzc3VlQ29tbWVudDIzOTIwNTU2OQ==", "user": {"login": "jayswinney", "id": 6809524, "node_id": "MDQ6VXNlcjY4MDk1MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/6809524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayswinney", "html_url": "https://github.com/jayswinney", "followers_url": "https://api.github.com/users/jayswinney/followers", "following_url": "https://api.github.com/users/jayswinney/following{/other_user}", "gists_url": "https://api.github.com/users/jayswinney/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayswinney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayswinney/subscriptions", "organizations_url": "https://api.github.com/users/jayswinney/orgs", "repos_url": "https://api.github.com/users/jayswinney/repos", "events_url": "https://api.github.com/users/jayswinney/events{/privacy}", "received_events_url": "https://api.github.com/users/jayswinney/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-11T15:57:20Z", "updated_at": "2016-08-11T15:59:51Z", "author_association": "NONE", "body_html": "<p>If anyone comes here looking for an RNN to run the above example, this is about the shortest script I could come up with:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-c1\">EPOCHS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10000</span>\n<span class=\"pl-c1\">PRINT_STEP</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1000</span>\n\ndata <span class=\"pl-k\">=</span> np.array([[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>], [ <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>], [<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">7</span>]])\ntarget <span class=\"pl-k\">=</span> np.array([[<span class=\"pl-c1\">6</span>], [<span class=\"pl-c1\">7</span>], [<span class=\"pl-c1\">8</span>]])\n\nx_ <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, data.shape[<span class=\"pl-c1\">1</span>]])\ny_ <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">1</span>])\n\ncell <span class=\"pl-k\">=</span> tf.nn.rnn_cell.BasicRNNCell(<span class=\"pl-v\">num_units</span><span class=\"pl-k\">=</span>data.shape[<span class=\"pl-c1\">1</span>])\n\noutputs, states <span class=\"pl-k\">=</span> tf.nn.rnn(cell, [x_], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\noutputs <span class=\"pl-k\">=</span> outputs[<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>]\n\nW <span class=\"pl-k\">=</span> tf.Variable(tf.random_normal([data.shape[<span class=\"pl-c1\">1</span>], <span class=\"pl-c1\">1</span>]))     \nb <span class=\"pl-k\">=</span> tf.Variable(tf.random_normal([<span class=\"pl-c1\">1</span>]))\n\ny <span class=\"pl-k\">=</span> tf.matmul(outputs, W) <span class=\"pl-k\">+</span> b\n\ncost <span class=\"pl-k\">=</span> tf.reduce_mean(tf.square(y <span class=\"pl-k\">-</span> y_))\ntrain_op <span class=\"pl-k\">=</span> tf.train.RMSPropOptimizer(<span class=\"pl-c1\">0.005</span>, <span class=\"pl-c1\">0.2</span>).minimize(cost)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    tf.initialize_all_variables().run()\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">EPOCHS</span>):\n        sess.run(train_op, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x_:data, y_:target})\n        <span class=\"pl-k\">if</span> i <span class=\"pl-k\">%</span> <span class=\"pl-c1\">PRINT_STEP</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>:\n            c <span class=\"pl-k\">=</span> sess.run(cost, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x_:data, y_:target})\n            <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>training cost:<span class=\"pl-pds\">'</span></span>, c)\n\n    response <span class=\"pl-k\">=</span> sess.run(y, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x_:data})\n    <span class=\"pl-c1\">print</span>(response)\n</pre></div>\n<p>run on version 0.10.0rc0</p>", "body_text": "If anyone comes here looking for an RNN to run the above example, this is about the shortest script I could come up with:\nimport numpy as np\nimport tensorflow as tf\n\nEPOCHS = 10000\nPRINT_STEP = 1000\n\ndata = np.array([[1, 2, 3, 4, 5], [ 2, 3, 4, 5, 6], [3, 4, 5, 6, 7]])\ntarget = np.array([[6], [7], [8]])\n\nx_ = tf.placeholder(tf.float32, [None, data.shape[1]])\ny_ = tf.placeholder(tf.float32, [None, 1])\n\ncell = tf.nn.rnn_cell.BasicRNNCell(num_units=data.shape[1])\n\noutputs, states = tf.nn.rnn(cell, [x_], dtype=tf.float32)\noutputs = outputs[-1]\n\nW = tf.Variable(tf.random_normal([data.shape[1], 1]))     \nb = tf.Variable(tf.random_normal([1]))\n\ny = tf.matmul(outputs, W) + b\n\ncost = tf.reduce_mean(tf.square(y - y_))\ntrain_op = tf.train.RMSPropOptimizer(0.005, 0.2).minimize(cost)\n\nwith tf.Session() as sess:\n    tf.initialize_all_variables().run()\n    for i in range(EPOCHS):\n        sess.run(train_op, feed_dict={x_:data, y_:target})\n        if i % PRINT_STEP == 0:\n            c = sess.run(cost, feed_dict={x_:data, y_:target})\n            print('training cost:', c)\n\n    response = sess.run(y, feed_dict={x_:data})\n    print(response)\n\nrun on version 0.10.0rc0", "body": "If anyone comes here looking for an RNN to run the above example, this is about the shortest script I could come up with:\n\n``` python\nimport numpy as np\nimport tensorflow as tf\n\nEPOCHS = 10000\nPRINT_STEP = 1000\n\ndata = np.array([[1, 2, 3, 4, 5], [ 2, 3, 4, 5, 6], [3, 4, 5, 6, 7]])\ntarget = np.array([[6], [7], [8]])\n\nx_ = tf.placeholder(tf.float32, [None, data.shape[1]])\ny_ = tf.placeholder(tf.float32, [None, 1])\n\ncell = tf.nn.rnn_cell.BasicRNNCell(num_units=data.shape[1])\n\noutputs, states = tf.nn.rnn(cell, [x_], dtype=tf.float32)\noutputs = outputs[-1]\n\nW = tf.Variable(tf.random_normal([data.shape[1], 1]))     \nb = tf.Variable(tf.random_normal([1]))\n\ny = tf.matmul(outputs, W) + b\n\ncost = tf.reduce_mean(tf.square(y - y_))\ntrain_op = tf.train.RMSPropOptimizer(0.005, 0.2).minimize(cost)\n\nwith tf.Session() as sess:\n    tf.initialize_all_variables().run()\n    for i in range(EPOCHS):\n        sess.run(train_op, feed_dict={x_:data, y_:target})\n        if i % PRINT_STEP == 0:\n            c = sess.run(cost, feed_dict={x_:data, y_:target})\n            print('training cost:', c)\n\n    response = sess.run(y, feed_dict={x_:data})\n    print(response)\n\n```\n\nrun on version 0.10.0rc0\n"}