{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/238993735", "html_url": "https://github.com/tensorflow/tensorflow/issues/3703#issuecomment-238993735", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3703", "id": 238993735, "node_id": "MDEyOklzc3VlQ29tbWVudDIzODk5MzczNQ==", "user": {"login": "jayswinney", "id": 6809524, "node_id": "MDQ6VXNlcjY4MDk1MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/6809524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayswinney", "html_url": "https://github.com/jayswinney", "followers_url": "https://api.github.com/users/jayswinney/followers", "following_url": "https://api.github.com/users/jayswinney/following{/other_user}", "gists_url": "https://api.github.com/users/jayswinney/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayswinney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayswinney/subscriptions", "organizations_url": "https://api.github.com/users/jayswinney/orgs", "repos_url": "https://api.github.com/users/jayswinney/repos", "events_url": "https://api.github.com/users/jayswinney/events{/privacy}", "received_events_url": "https://api.github.com/users/jayswinney/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-10T20:29:21Z", "updated_at": "2016-08-10T20:31:08Z", "author_association": "NONE", "body_html": "<p>upgrading to '0.10.0rc0' gives a similar error to the original</p>\n<pre><code>---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-8-7914af068076&gt; in &lt;module&gt;()\n      2 y = [1, 1, 1]\n      3 regr = TensorFlowRNNRegressor(rnn_size=5)\n----&gt; 4 regr.fit(np.array(X), np.array(y))\n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/base.py in fit(self, x, y, steps, monitors, logdir)\n    164                       feed_fn=self._data_feeder.get_feed_dict_fn(),\n    165                       steps=steps or self.steps,\n--&gt; 166                       monitors=monitors)\n    167     return self\n    168 \n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _train_model(self, input_fn, steps, feed_fn, init_op, init_feed_fn, init_fn, device_fn, monitors, log_every_steps, fail_on_nan_loss, max_steps)\n    548       features, targets = input_fn()\n    549       self._check_inputs(features, targets)\n--&gt; 550       train_op, loss_op = self._get_train_ops(features, targets)\n    551 \n    552       # Add default monitors.\n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _get_train_ops(self, features, targets)\n    818       Tuple of train `Operation` and loss `Tensor`.\n    819     \"\"\"\n--&gt; 820     _, loss, train_op = self._call_model_fn(features, targets, ModeKeys.TRAIN)\n    821     return train_op, loss\n    822 \n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _call_model_fn(self, features, targets, mode)\n    801         return self._model_fn(features, targets, mode=mode, params=self.params)\n    802       else:\n--&gt; 803         return self._model_fn(features, targets, mode=mode)\n    804     return self._model_fn(features, targets)\n    805 \n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/base.py in _model_fn(features, targets, mode)\n    376       if self.class_weight is not None:\n    377         constant_op.constant(self.class_weight, name='class_weight')\n--&gt; 378       predictions, loss = model_fn(features, targets)\n    379       if isinstance(self.learning_rate, types.FunctionType):\n    380         learning_rate = self.learning_rate(contrib_framework.get_global_step())\n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/rnn.py in _model_fn(self, x, y)\n    236                                 models.linear_regression, self.sequence_length,\n    237                                 self.initial_state, self.attn_length,\n--&gt; 238                                 self.attn_size, self.attn_vec_size)(x, y)\n    239 \n    240   @property\n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/models.py in rnn_estimator(x, y)\n    410                            dtype=dtypes.float32,\n    411                            sequence_length=sequence_length,\n--&gt; 412                            initial_state=initial_state)\n    413     return target_predictor_fn(encoding, y)\n    414 \n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/python/ops/rnn.py in rnn(cell, inputs, initial_state, dtype, sequence_length, scope)\n    128     raise TypeError(\"cell must be an instance of RNNCell\")\n    129   if not nest.is_sequence(inputs):\n--&gt; 130     raise TypeError(\"inputs must be a sequence\")\n    131   if not inputs:\n    132     raise ValueError(\"inputs must not be empty\")\n\nTypeError: inputs must be a sequence\n</code></pre>", "body_text": "upgrading to '0.10.0rc0' gives a similar error to the original\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-8-7914af068076> in <module>()\n      2 y = [1, 1, 1]\n      3 regr = TensorFlowRNNRegressor(rnn_size=5)\n----> 4 regr.fit(np.array(X), np.array(y))\n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/base.py in fit(self, x, y, steps, monitors, logdir)\n    164                       feed_fn=self._data_feeder.get_feed_dict_fn(),\n    165                       steps=steps or self.steps,\n--> 166                       monitors=monitors)\n    167     return self\n    168 \n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _train_model(self, input_fn, steps, feed_fn, init_op, init_feed_fn, init_fn, device_fn, monitors, log_every_steps, fail_on_nan_loss, max_steps)\n    548       features, targets = input_fn()\n    549       self._check_inputs(features, targets)\n--> 550       train_op, loss_op = self._get_train_ops(features, targets)\n    551 \n    552       # Add default monitors.\n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _get_train_ops(self, features, targets)\n    818       Tuple of train `Operation` and loss `Tensor`.\n    819     \"\"\"\n--> 820     _, loss, train_op = self._call_model_fn(features, targets, ModeKeys.TRAIN)\n    821     return train_op, loss\n    822 \n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _call_model_fn(self, features, targets, mode)\n    801         return self._model_fn(features, targets, mode=mode, params=self.params)\n    802       else:\n--> 803         return self._model_fn(features, targets, mode=mode)\n    804     return self._model_fn(features, targets)\n    805 \n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/base.py in _model_fn(features, targets, mode)\n    376       if self.class_weight is not None:\n    377         constant_op.constant(self.class_weight, name='class_weight')\n--> 378       predictions, loss = model_fn(features, targets)\n    379       if isinstance(self.learning_rate, types.FunctionType):\n    380         learning_rate = self.learning_rate(contrib_framework.get_global_step())\n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/rnn.py in _model_fn(self, x, y)\n    236                                 models.linear_regression, self.sequence_length,\n    237                                 self.initial_state, self.attn_length,\n--> 238                                 self.attn_size, self.attn_vec_size)(x, y)\n    239 \n    240   @property\n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/models.py in rnn_estimator(x, y)\n    410                            dtype=dtypes.float32,\n    411                            sequence_length=sequence_length,\n--> 412                            initial_state=initial_state)\n    413     return target_predictor_fn(encoding, y)\n    414 \n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/python/ops/rnn.py in rnn(cell, inputs, initial_state, dtype, sequence_length, scope)\n    128     raise TypeError(\"cell must be an instance of RNNCell\")\n    129   if not nest.is_sequence(inputs):\n--> 130     raise TypeError(\"inputs must be a sequence\")\n    131   if not inputs:\n    132     raise ValueError(\"inputs must not be empty\")\n\nTypeError: inputs must be a sequence", "body": "upgrading to '0.10.0rc0' gives a similar error to the original\n\n```\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-8-7914af068076> in <module>()\n      2 y = [1, 1, 1]\n      3 regr = TensorFlowRNNRegressor(rnn_size=5)\n----> 4 regr.fit(np.array(X), np.array(y))\n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/base.py in fit(self, x, y, steps, monitors, logdir)\n    164                       feed_fn=self._data_feeder.get_feed_dict_fn(),\n    165                       steps=steps or self.steps,\n--> 166                       monitors=monitors)\n    167     return self\n    168 \n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _train_model(self, input_fn, steps, feed_fn, init_op, init_feed_fn, init_fn, device_fn, monitors, log_every_steps, fail_on_nan_loss, max_steps)\n    548       features, targets = input_fn()\n    549       self._check_inputs(features, targets)\n--> 550       train_op, loss_op = self._get_train_ops(features, targets)\n    551 \n    552       # Add default monitors.\n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _get_train_ops(self, features, targets)\n    818       Tuple of train `Operation` and loss `Tensor`.\n    819     \"\"\"\n--> 820     _, loss, train_op = self._call_model_fn(features, targets, ModeKeys.TRAIN)\n    821     return train_op, loss\n    822 \n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _call_model_fn(self, features, targets, mode)\n    801         return self._model_fn(features, targets, mode=mode, params=self.params)\n    802       else:\n--> 803         return self._model_fn(features, targets, mode=mode)\n    804     return self._model_fn(features, targets)\n    805 \n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/base.py in _model_fn(features, targets, mode)\n    376       if self.class_weight is not None:\n    377         constant_op.constant(self.class_weight, name='class_weight')\n--> 378       predictions, loss = model_fn(features, targets)\n    379       if isinstance(self.learning_rate, types.FunctionType):\n    380         learning_rate = self.learning_rate(contrib_framework.get_global_step())\n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/estimators/rnn.py in _model_fn(self, x, y)\n    236                                 models.linear_regression, self.sequence_length,\n    237                                 self.initial_state, self.attn_length,\n--> 238                                 self.attn_size, self.attn_vec_size)(x, y)\n    239 \n    240   @property\n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/contrib/learn/python/learn/models.py in rnn_estimator(x, y)\n    410                            dtype=dtypes.float32,\n    411                            sequence_length=sequence_length,\n--> 412                            initial_state=initial_state)\n    413     return target_predictor_fn(encoding, y)\n    414 \n\n/home/jay/.local/lib/python3.5/site-packages/tensorflow/python/ops/rnn.py in rnn(cell, inputs, initial_state, dtype, sequence_length, scope)\n    128     raise TypeError(\"cell must be an instance of RNNCell\")\n    129   if not nest.is_sequence(inputs):\n--> 130     raise TypeError(\"inputs must be a sequence\")\n    131   if not inputs:\n    132     raise ValueError(\"inputs must not be empty\")\n\nTypeError: inputs must be a sequence\n```\n"}