{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/83684068", "pull_request_review_id": 4511510, "id": 83684068, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNjg0MDY4", "diff_hunk": "@@ -690,6 +695,31 @@ def _get_single_variable(self,\n     return v\n \n \n+  # Initialize variable when no initializer provided\n+  def _get_default_initializer(self, shape=None, dtype=dtypes.float32):\n+    \"\"\"Use this function to provide a default and corresponding initializer of dtype\n+\n+    Args:\n+      dtype: Type of the new or existing variable.(defaults to `DT_FLOAT`).\n+\n+    Returns:\n+      initializer and initializing_from_value. See documentation of get_variable above.\n+\n+    Raises:\n+      TypeError: When giving unsupported dtype.\n+    \"\"\"\n+    if dtype.is_floating:\n+      initializer = init_ops.uniform_unit_scaling_initializer()\n+      initializing_from_value = False\n+    elif dtype.is_integer or dtype.is_unsigned or dtype.is_bool or dtype.is_complex:\n+      initializer = init_ops.zeros_initializer(shape=shape, dtype=dtype.base_dtype)\n+      initializing_from_value=True\n+    else:\n+      raise TypeError(\"You need to give an initializer for %s\" % dtype)", "path": "tensorflow/python/ops/variable_scope.py", "position": null, "original_position": 52, "commit_id": "41d85ee1f58332c076ffc0e8b28d8015de9f4a23", "original_commit_id": "60755181b64ead3ffb5dd86659837500d296924b", "user": {"login": "DjangoPeng", "id": 16943353, "node_id": "MDQ6VXNlcjE2OTQzMzUz", "avatar_url": "https://avatars3.githubusercontent.com/u/16943353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DjangoPeng", "html_url": "https://github.com/DjangoPeng", "followers_url": "https://api.github.com/users/DjangoPeng/followers", "following_url": "https://api.github.com/users/DjangoPeng/following{/other_user}", "gists_url": "https://api.github.com/users/DjangoPeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/DjangoPeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DjangoPeng/subscriptions", "organizations_url": "https://api.github.com/users/DjangoPeng/orgs", "repos_url": "https://api.github.com/users/DjangoPeng/repos", "events_url": "https://api.github.com/users/DjangoPeng/events{/privacy}", "received_events_url": "https://api.github.com/users/DjangoPeng/received_events", "type": "User", "site_admin": false}, "body": "Yep, so we can handle the complex dtype here as well\n", "created_at": "2016-10-17T16:41:49Z", "updated_at": "2016-12-01T14:37:54Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4826#discussion_r83684068", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4826", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/83684068"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4826#discussion_r83684068"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4826"}}, "body_html": "<p>Yep, so we can handle the complex dtype here as well</p>", "body_text": "Yep, so we can handle the complex dtype here as well", "in_reply_to_id": 83671717}