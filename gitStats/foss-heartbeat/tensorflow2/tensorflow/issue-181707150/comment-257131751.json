{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/257131751", "html_url": "https://github.com/tensorflow/tensorflow/pull/4826#issuecomment-257131751", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4826", "id": 257131751, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzEzMTc1MQ==", "user": {"login": "DjangoPeng", "id": 16943353, "node_id": "MDQ6VXNlcjE2OTQzMzUz", "avatar_url": "https://avatars3.githubusercontent.com/u/16943353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DjangoPeng", "html_url": "https://github.com/DjangoPeng", "followers_url": "https://api.github.com/users/DjangoPeng/followers", "following_url": "https://api.github.com/users/DjangoPeng/following{/other_user}", "gists_url": "https://api.github.com/users/DjangoPeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/DjangoPeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DjangoPeng/subscriptions", "organizations_url": "https://api.github.com/users/DjangoPeng/orgs", "repos_url": "https://api.github.com/users/DjangoPeng/repos", "events_url": "https://api.github.com/users/DjangoPeng/events{/privacy}", "received_events_url": "https://api.github.com/users/DjangoPeng/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-30T04:40:21Z", "updated_at": "2016-10-30T04:42:39Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20959853\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/drpngx\">@drpngx</a>  I revert all commits before and add more informative comments. Then I re-pushed the branch. Now, it would be better to review and merge.</p>\n<h2>Change log:</h2>\n<h3>dtypes.py</h3>\n<p>Add <code>is_bool()</code>  function for <code>if</code> judgement in <code>_get_default_initializer</code>. And <code>DT_BOOL</code> can use <code>zeros_initializer</code> to initialize with <code>FALSE</code>, so I combine it with <code>DT_INT</code> and <code>DT_UINT</code> to avoid duplicating code block.</p>\n<h3>variable_scope.py</h3>\n<p>Add <code>_get_default_initializer()</code> private function to provide a default initializer and a corresponding value when no explicit initializer provided. Now, it can handle <code>DT_FLOAT/DT_INT/DT_UINT/DT_BOOL</code>. In other dtype case, it would raise a <code>ValueError</code> with info <code>\"An initializer for variable %s is required\" % name</code>.</p>\n<h3>variable_scope_test.py</h3>\n<p>Add <code>testInitFromNonInitializer()</code> for single_variable and partitioned_variable.</p>", "body_text": "@ebrevdo @drpngx  I revert all commits before and add more informative comments. Then I re-pushed the branch. Now, it would be better to review and merge.\nChange log:\ndtypes.py\nAdd is_bool()  function for if judgement in _get_default_initializer. And DT_BOOL can use zeros_initializer to initialize with FALSE, so I combine it with DT_INT and DT_UINT to avoid duplicating code block.\nvariable_scope.py\nAdd _get_default_initializer() private function to provide a default initializer and a corresponding value when no explicit initializer provided. Now, it can handle DT_FLOAT/DT_INT/DT_UINT/DT_BOOL. In other dtype case, it would raise a ValueError with info \"An initializer for variable %s is required\" % name.\nvariable_scope_test.py\nAdd testInitFromNonInitializer() for single_variable and partitioned_variable.", "body": "@ebrevdo @drpngx  I revert all commits before and add more informative comments. Then I re-pushed the branch. Now, it would be better to review and merge. \n\n## Change log:\n\n### dtypes.py\n\nAdd `is_bool()`  function for `if` judgement in `_get_default_initializer`. And `DT_BOOL` can use `zeros_initializer` to initialize with `FALSE`, so I combine it with `DT_INT` and `DT_UINT` to avoid duplicating code block.\n\n### variable_scope.py\n\nAdd `_get_default_initializer()` private function to provide a default initializer and a corresponding value when no explicit initializer provided. Now, it can handle `DT_FLOAT/DT_INT/DT_UINT/DT_BOOL`. In other dtype case, it would raise a `ValueError` with info `\"An initializer for variable %s is required\" % name`.\n\n### variable_scope_test.py\n\nAdd `testInitFromNonInitializer()` for single_variable and partitioned_variable.\n"}