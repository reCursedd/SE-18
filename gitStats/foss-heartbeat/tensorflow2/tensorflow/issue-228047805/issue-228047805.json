{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9841", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9841/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9841/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9841/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9841", "id": 228047805, "node_id": "MDU6SXNzdWUyMjgwNDc4MDU=", "number": 9841, "title": "Unable to use two gmms in one classifier in tf gpu 1.1", "user": {"login": "ruiann", "id": 5110107, "node_id": "MDQ6VXNlcjUxMTAxMDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/5110107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruiann", "html_url": "https://github.com/ruiann", "followers_url": "https://api.github.com/users/ruiann/followers", "following_url": "https://api.github.com/users/ruiann/following{/other_user}", "gists_url": "https://api.github.com/users/ruiann/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruiann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruiann/subscriptions", "organizations_url": "https://api.github.com/users/ruiann/orgs", "repos_url": "https://api.github.com/users/ruiann/repos", "events_url": "https://api.github.com/users/ruiann/events{/privacy}", "received_events_url": "https://api.github.com/users/ruiann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-11T16:19:32Z", "updated_at": "2017-05-12T07:10:33Z", "closed_at": "2017-05-11T20:11:21Z", "author_association": "NONE", "body_html": "<p>I've tried to use tf.contrib.factorization.python.ops' gmm model</p>\n<p>I've watched the gmm_test.py as the doc about this model is not clear to use</p>\n<p>My code is as below</p>\n<pre><code>class DTW_GMM:\n    def __init__(self, cluster_num=3):\n        self.genuine_graph = tf.Graph()\n        self.forgery_graph = tf.Graph()\n        with self.genuine_graph.as_default():\n            self.genuine_gmm = gmm.GMM(cluster_num)\n        with self.forgery_graph.as_default():\n            self.forgery_gmm = gmm.GMM(cluster_num)\n\n    def compare(self, reference, target):\n        channel_dtw = []\n        for channel_index in range(len(reference)):\n            dis, _, _, _ = dtw(reference[channel_index], target[channel_index], dist=my_custom_norm)\n            channel_dtw.append(dis)\n        return channel_dtw\n\n    def input_fn(self, data):\n        def fn():\n            return data, None\n        return fn\n\n    def train_genuine(self, data, steps=10):\n        with self.genuine_graph.as_default():\n            self.genuine_gmm.fit(input_fn=self.input_fn(data), steps=steps)\n\n    def train_forgery(self, data, steps=10):\n        with self.forgery_graph.as_default():\n            self.forgery_gmm.fit(input_fn=self.input_fn(data), steps=steps)\n\n    def infer(self, data):\n        genuine_score = self.genuine_gmm.score(input_fn=self.input_fn(data), steps=1)\n        forgery_score = self.forgery_gmm.score(input_fn=self.input_fn(data), steps=1)\n        return genuine_score &gt;= forgery_score\n\nbatch_size = 64\nloop = 100\n\n\ndef train():\n    model = DTW_GMM()\n    data = Data()\n\n    sess = tf.Session()\n    with sess.as_default():\n        sess.run(tf.global_variables_initializer())\n        for step in range(loop):\n            print('step: {}'.format(step))\n            genuine_data = []\n            forgery_data = []\n            for i in range(batch_size):\n                reference, target = data.get_genuine_pair()\n                genuine_data.append(model.compare(reference, target))\n                reference, target = data.get_fake_pair()\n                forgery_data.append(model.compare(reference, target))\n            genuine_data = tf.constant(genuine_data, dtype=np.float32)\n            forgery_data = tf.constant(forgery_data, dtype=np.float32)\n            model.train_genuine(genuine_data)\n            model.train_forgery(forgery_data)\n</code></pre>\n<p>Even I try to define graph for each of the two gmm, it still connot work with the error log:</p>\n<pre><code>  File \"DTW_GMM.py\", line 39, in train_genuine\n    self.genuine_gmm.fit(input_fn=self.input_fn(data), steps=steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.py\", line 281, in new_func\n    return func(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 430, in fit\n    loss = self._train_model(input_fn=input_fn, hooks=hooks)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 927, in _train_model\n    model_fn_ops = self._get_train_ops(features, labels)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1132, in _get_train_ops\n    return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1103, in _call_model_fn\n    model_fn_results = self._model_fn(features, labels, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm.py\", line 137, in _model_fn\n    self._params)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm_ops.py\", line 498, in gmm\n    covariance_type, random_seed)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm_ops.py\", line 147, in __init__\n    self._create_variables(data, initial_means)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm_ops.py\", line 173, in _create_variables\n    _init_clusters_random(data, self._num_classes, self._random_seed),\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm_ops.py\", line 81, in _init_clusters_random\n    [check_ops.assert_less_equal(num_clusters, num_data)]):\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 3595, in control_dependencies\n    return get_default_graph().control_dependencies(control_inputs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 3324, in control_dependencies\n    c = self.as_graph_element(c)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2414, in as_graph_element\n    return self._as_graph_element_locked(obj, allow_tensor, allow_operation)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2498, in _as_graph_element_locked\n    raise ValueError(\"Operation %s is not an element of this graph.\" % obj)\nValueError: Operation name: \"assert_less_equal/Assert/Assert\"\nop: \"Assert\"\ninput: \"assert_less_equal/All\"\ninput: \"assert_less_equal/Assert/Assert/data_0\"\ninput: \"assert_less_equal/Assert/Assert/data_1\"\ninput: \"assert_less_equal/Assert/Assert/data_2\"\ninput: \"assert_less_equal/x\"\ninput: \"assert_less_equal/Assert/Assert/data_4\"\ninput: \"assert_less_equal/Assert/Assert/data_5\"\ninput: \"strided_slice_1\"\nattr {\n  key: \"T\"\n  value {\n    list {\n      type: DT_STRING\n      type: DT_STRING\n      type: DT_STRING\n      type: DT_INT32\n      type: DT_STRING\n      type: DT_STRING\n      type: DT_INT32\n    }\n  }\n}\nattr {\n  key: \"summarize\"\n  value {\n    i: 3\n  }\n}\n is not an element of this graph.\n</code></pre>\n<p>The input is a constant tensor with shape of [batch_size, 4]</p>", "body_text": "I've tried to use tf.contrib.factorization.python.ops' gmm model\nI've watched the gmm_test.py as the doc about this model is not clear to use\nMy code is as below\nclass DTW_GMM:\n    def __init__(self, cluster_num=3):\n        self.genuine_graph = tf.Graph()\n        self.forgery_graph = tf.Graph()\n        with self.genuine_graph.as_default():\n            self.genuine_gmm = gmm.GMM(cluster_num)\n        with self.forgery_graph.as_default():\n            self.forgery_gmm = gmm.GMM(cluster_num)\n\n    def compare(self, reference, target):\n        channel_dtw = []\n        for channel_index in range(len(reference)):\n            dis, _, _, _ = dtw(reference[channel_index], target[channel_index], dist=my_custom_norm)\n            channel_dtw.append(dis)\n        return channel_dtw\n\n    def input_fn(self, data):\n        def fn():\n            return data, None\n        return fn\n\n    def train_genuine(self, data, steps=10):\n        with self.genuine_graph.as_default():\n            self.genuine_gmm.fit(input_fn=self.input_fn(data), steps=steps)\n\n    def train_forgery(self, data, steps=10):\n        with self.forgery_graph.as_default():\n            self.forgery_gmm.fit(input_fn=self.input_fn(data), steps=steps)\n\n    def infer(self, data):\n        genuine_score = self.genuine_gmm.score(input_fn=self.input_fn(data), steps=1)\n        forgery_score = self.forgery_gmm.score(input_fn=self.input_fn(data), steps=1)\n        return genuine_score >= forgery_score\n\nbatch_size = 64\nloop = 100\n\n\ndef train():\n    model = DTW_GMM()\n    data = Data()\n\n    sess = tf.Session()\n    with sess.as_default():\n        sess.run(tf.global_variables_initializer())\n        for step in range(loop):\n            print('step: {}'.format(step))\n            genuine_data = []\n            forgery_data = []\n            for i in range(batch_size):\n                reference, target = data.get_genuine_pair()\n                genuine_data.append(model.compare(reference, target))\n                reference, target = data.get_fake_pair()\n                forgery_data.append(model.compare(reference, target))\n            genuine_data = tf.constant(genuine_data, dtype=np.float32)\n            forgery_data = tf.constant(forgery_data, dtype=np.float32)\n            model.train_genuine(genuine_data)\n            model.train_forgery(forgery_data)\n\nEven I try to define graph for each of the two gmm, it still connot work with the error log:\n  File \"DTW_GMM.py\", line 39, in train_genuine\n    self.genuine_gmm.fit(input_fn=self.input_fn(data), steps=steps)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.py\", line 281, in new_func\n    return func(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 430, in fit\n    loss = self._train_model(input_fn=input_fn, hooks=hooks)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 927, in _train_model\n    model_fn_ops = self._get_train_ops(features, labels)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1132, in _get_train_ops\n    return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1103, in _call_model_fn\n    model_fn_results = self._model_fn(features, labels, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm.py\", line 137, in _model_fn\n    self._params)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm_ops.py\", line 498, in gmm\n    covariance_type, random_seed)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm_ops.py\", line 147, in __init__\n    self._create_variables(data, initial_means)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm_ops.py\", line 173, in _create_variables\n    _init_clusters_random(data, self._num_classes, self._random_seed),\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm_ops.py\", line 81, in _init_clusters_random\n    [check_ops.assert_less_equal(num_clusters, num_data)]):\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 3595, in control_dependencies\n    return get_default_graph().control_dependencies(control_inputs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 3324, in control_dependencies\n    c = self.as_graph_element(c)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2414, in as_graph_element\n    return self._as_graph_element_locked(obj, allow_tensor, allow_operation)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2498, in _as_graph_element_locked\n    raise ValueError(\"Operation %s is not an element of this graph.\" % obj)\nValueError: Operation name: \"assert_less_equal/Assert/Assert\"\nop: \"Assert\"\ninput: \"assert_less_equal/All\"\ninput: \"assert_less_equal/Assert/Assert/data_0\"\ninput: \"assert_less_equal/Assert/Assert/data_1\"\ninput: \"assert_less_equal/Assert/Assert/data_2\"\ninput: \"assert_less_equal/x\"\ninput: \"assert_less_equal/Assert/Assert/data_4\"\ninput: \"assert_less_equal/Assert/Assert/data_5\"\ninput: \"strided_slice_1\"\nattr {\n  key: \"T\"\n  value {\n    list {\n      type: DT_STRING\n      type: DT_STRING\n      type: DT_STRING\n      type: DT_INT32\n      type: DT_STRING\n      type: DT_STRING\n      type: DT_INT32\n    }\n  }\n}\nattr {\n  key: \"summarize\"\n  value {\n    i: 3\n  }\n}\n is not an element of this graph.\n\nThe input is a constant tensor with shape of [batch_size, 4]", "body": "I've tried to use tf.contrib.factorization.python.ops' gmm model\r\n\r\nI've watched the gmm_test.py as the doc about this model is not clear to use\r\n\r\nMy code is as below\r\n\r\n```\r\nclass DTW_GMM:\r\n    def __init__(self, cluster_num=3):\r\n        self.genuine_graph = tf.Graph()\r\n        self.forgery_graph = tf.Graph()\r\n        with self.genuine_graph.as_default():\r\n            self.genuine_gmm = gmm.GMM(cluster_num)\r\n        with self.forgery_graph.as_default():\r\n            self.forgery_gmm = gmm.GMM(cluster_num)\r\n\r\n    def compare(self, reference, target):\r\n        channel_dtw = []\r\n        for channel_index in range(len(reference)):\r\n            dis, _, _, _ = dtw(reference[channel_index], target[channel_index], dist=my_custom_norm)\r\n            channel_dtw.append(dis)\r\n        return channel_dtw\r\n\r\n    def input_fn(self, data):\r\n        def fn():\r\n            return data, None\r\n        return fn\r\n\r\n    def train_genuine(self, data, steps=10):\r\n        with self.genuine_graph.as_default():\r\n            self.genuine_gmm.fit(input_fn=self.input_fn(data), steps=steps)\r\n\r\n    def train_forgery(self, data, steps=10):\r\n        with self.forgery_graph.as_default():\r\n            self.forgery_gmm.fit(input_fn=self.input_fn(data), steps=steps)\r\n\r\n    def infer(self, data):\r\n        genuine_score = self.genuine_gmm.score(input_fn=self.input_fn(data), steps=1)\r\n        forgery_score = self.forgery_gmm.score(input_fn=self.input_fn(data), steps=1)\r\n        return genuine_score >= forgery_score\r\n\r\nbatch_size = 64\r\nloop = 100\r\n\r\n\r\ndef train():\r\n    model = DTW_GMM()\r\n    data = Data()\r\n\r\n    sess = tf.Session()\r\n    with sess.as_default():\r\n        sess.run(tf.global_variables_initializer())\r\n        for step in range(loop):\r\n            print('step: {}'.format(step))\r\n            genuine_data = []\r\n            forgery_data = []\r\n            for i in range(batch_size):\r\n                reference, target = data.get_genuine_pair()\r\n                genuine_data.append(model.compare(reference, target))\r\n                reference, target = data.get_fake_pair()\r\n                forgery_data.append(model.compare(reference, target))\r\n            genuine_data = tf.constant(genuine_data, dtype=np.float32)\r\n            forgery_data = tf.constant(forgery_data, dtype=np.float32)\r\n            model.train_genuine(genuine_data)\r\n            model.train_forgery(forgery_data)\r\n```\r\n\r\nEven I try to define graph for each of the two gmm, it still connot work with the error log:\r\n\r\n```\r\n  File \"DTW_GMM.py\", line 39, in train_genuine\r\n    self.genuine_gmm.fit(input_fn=self.input_fn(data), steps=steps)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.py\", line 281, in new_func\r\n    return func(*args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 430, in fit\r\n    loss = self._train_model(input_fn=input_fn, hooks=hooks)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 927, in _train_model\r\n    model_fn_ops = self._get_train_ops(features, labels)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1132, in _get_train_ops\r\n    return self._call_model_fn(features, labels, model_fn_lib.ModeKeys.TRAIN)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1103, in _call_model_fn\r\n    model_fn_results = self._model_fn(features, labels, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm.py\", line 137, in _model_fn\r\n    self._params)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm_ops.py\", line 498, in gmm\r\n    covariance_type, random_seed)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm_ops.py\", line 147, in __init__\r\n    self._create_variables(data, initial_means)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm_ops.py\", line 173, in _create_variables\r\n    _init_clusters_random(data, self._num_classes, self._random_seed),\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/factorization/python/ops/gmm_ops.py\", line 81, in _init_clusters_random\r\n    [check_ops.assert_less_equal(num_clusters, num_data)]):\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 3595, in control_dependencies\r\n    return get_default_graph().control_dependencies(control_inputs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 3324, in control_dependencies\r\n    c = self.as_graph_element(c)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2414, in as_graph_element\r\n    return self._as_graph_element_locked(obj, allow_tensor, allow_operation)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 2498, in _as_graph_element_locked\r\n    raise ValueError(\"Operation %s is not an element of this graph.\" % obj)\r\nValueError: Operation name: \"assert_less_equal/Assert/Assert\"\r\nop: \"Assert\"\r\ninput: \"assert_less_equal/All\"\r\ninput: \"assert_less_equal/Assert/Assert/data_0\"\r\ninput: \"assert_less_equal/Assert/Assert/data_1\"\r\ninput: \"assert_less_equal/Assert/Assert/data_2\"\r\ninput: \"assert_less_equal/x\"\r\ninput: \"assert_less_equal/Assert/Assert/data_4\"\r\ninput: \"assert_less_equal/Assert/Assert/data_5\"\r\ninput: \"strided_slice_1\"\r\nattr {\r\n  key: \"T\"\r\n  value {\r\n    list {\r\n      type: DT_STRING\r\n      type: DT_STRING\r\n      type: DT_STRING\r\n      type: DT_INT32\r\n      type: DT_STRING\r\n      type: DT_STRING\r\n      type: DT_INT32\r\n    }\r\n  }\r\n}\r\nattr {\r\n  key: \"summarize\"\r\n  value {\r\n    i: 3\r\n  }\r\n}\r\n is not an element of this graph.\r\n```\r\n\r\nThe input is a constant tensor with shape of [batch_size, 4]"}