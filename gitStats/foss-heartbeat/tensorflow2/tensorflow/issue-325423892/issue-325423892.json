{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19473", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19473/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19473/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19473/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19473", "id": 325423892, "node_id": "MDU6SXNzdWUzMjU0MjM4OTI=", "number": 19473, "title": "Random initialization of a GPU variable with more than INT32_MAX elements crashes with CUDA_ERROR_ILLEGAL_ADDRESS", "user": {"login": "cbcase", "id": 238403, "node_id": "MDQ6VXNlcjIzODQwMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/238403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbcase", "html_url": "https://github.com/cbcase", "followers_url": "https://api.github.com/users/cbcase/followers", "following_url": "https://api.github.com/users/cbcase/following{/other_user}", "gists_url": "https://api.github.com/users/cbcase/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbcase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbcase/subscriptions", "organizations_url": "https://api.github.com/users/cbcase/orgs", "repos_url": "https://api.github.com/users/cbcase/repos", "events_url": "https://api.github.com/users/cbcase/events{/privacy}", "received_events_url": "https://api.github.com/users/cbcase/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": {"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "robieta", "id": 13089297, "node_id": "MDQ6VXNlcjEzMDg5Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/13089297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robieta", "html_url": "https://github.com/robieta", "followers_url": "https://api.github.com/users/robieta/followers", "following_url": "https://api.github.com/users/robieta/following{/other_user}", "gists_url": "https://api.github.com/users/robieta/gists{/gist_id}", "starred_url": "https://api.github.com/users/robieta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robieta/subscriptions", "organizations_url": "https://api.github.com/users/robieta/orgs", "repos_url": "https://api.github.com/users/robieta/repos", "events_url": "https://api.github.com/users/robieta/events{/privacy}", "received_events_url": "https://api.github.com/users/robieta/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-05-22T19:03:07Z", "updated_at": "2018-11-14T19:18:56Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.8.0</li>\n<li><strong>Python version</strong>: 3.5.2</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.0</li>\n<li><strong>GPU model and memory</strong>: V100</li>\n<li><strong>Bazel version</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>: see below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Random initialization of a GPU variable with more than INT32_MAX elements crashes with CUDA_ERROR_ILLEGAL_ADDRESS.</p>\n<h3>Source code / logs</h3>\n<p>The following code runs with no problem (ran into this with large embedding tables):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nn <span class=\"pl-k\">=</span> <span class=\"pl-c1\">13417676</span>\nh <span class=\"pl-k\">=</span> <span class=\"pl-c1\">160</span>\nx <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>, [n, h])\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(tf.global_variables_initializer())</pre></div>\n<p>The following code crashes with CUDA_ERROR_ILLEGAL_ACCESS:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nn <span class=\"pl-k\">=</span> <span class=\"pl-c1\">13417677</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> increased by 1</span>\nh <span class=\"pl-k\">=</span> <span class=\"pl-c1\">160</span>\nx <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>, [n, h])\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(tf.global_variables_initializer())</pre></div>\n<p>Running with <code>cuda-memcheck</code> reports the following:</p>\n<pre><code>========= Invalid __global__ write of size 16\n=========     at 0x00000850 in void tensorflow::functor::FillPhiloxRandomKernelLaunch&lt;tensorflow::random::UniformDistribution&lt;tensorflow::random::PhiloxRandom, float&gt;&gt;(tensorflow::random::PhiloxRandom, tensorflow::random::PhiloxRandomResultElementType*, __int64, tensorflow::functor::FillPhiloxRandomKernelLaunch&lt;tensorflow::random::UniformDistribution&lt;tensorflow::random::PhiloxRandom, float&gt;&gt;)\n=========     by thread (1023,0,0) in block (127,0,0)\n=========     Address 0x7f7e3c6806f0 is out of bounds\n</code></pre>\n<p>Checking the source code, the following looks suspicious to me: <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/982549ea3423df4270ff154e5c764beb43d472da/tensorflow/core/kernels/random_op_gpu.cu.cc#L136\">tensorflow/tensorflow/core/kernels/random_op_gpu.cu.cc</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 136\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/982549ea3423df4270ff154e5c764beb43d472da\">982549e</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L136\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"136\"></td>\n          <td id=\"LC136\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> int32 offset = thread_id * <span class=\"pl-c1\">kGroupSize</span>; </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>The <code>int32 offset</code> variable is later used to index into the output array -- and I believe it can overflow and generate an illegal negative index.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): 1.8.0\nPython version: 3.5.2\nCUDA/cuDNN version: 9.0\nGPU model and memory: V100\nBazel version: N/A\nExact command to reproduce: see below\n\nDescribe the problem\nRandom initialization of a GPU variable with more than INT32_MAX elements crashes with CUDA_ERROR_ILLEGAL_ADDRESS.\nSource code / logs\nThe following code runs with no problem (ran into this with large embedding tables):\nimport tensorflow as tf\nn = 13417676\nh = 160\nx = tf.get_variable('x', [n, h])\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\nThe following code crashes with CUDA_ERROR_ILLEGAL_ACCESS:\nimport tensorflow as tf\nn = 13417677 # increased by 1\nh = 160\nx = tf.get_variable('x', [n, h])\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\nRunning with cuda-memcheck reports the following:\n========= Invalid __global__ write of size 16\n=========     at 0x00000850 in void tensorflow::functor::FillPhiloxRandomKernelLaunch<tensorflow::random::UniformDistribution<tensorflow::random::PhiloxRandom, float>>(tensorflow::random::PhiloxRandom, tensorflow::random::PhiloxRandomResultElementType*, __int64, tensorflow::functor::FillPhiloxRandomKernelLaunch<tensorflow::random::UniformDistribution<tensorflow::random::PhiloxRandom, float>>)\n=========     by thread (1023,0,0) in block (127,0,0)\n=========     Address 0x7f7e3c6806f0 is out of bounds\n\nChecking the source code, the following looks suspicious to me: \n  \n    \n      tensorflow/tensorflow/core/kernels/random_op_gpu.cu.cc\n    \n    \n         Line 136\n      in\n      982549e\n    \n    \n    \n    \n\n        \n          \n           int32 offset = thread_id * kGroupSize; \n        \n    \n  \n\n\nThe int32 offset variable is later used to index into the output array -- and I believe it can overflow and generate an illegal negative index.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: 1.8.0\r\n- **Python version**: 3.5.2\r\n- **CUDA/cuDNN version**: 9.0\r\n- **GPU model and memory**: V100\r\n- **Bazel version**: N/A\r\n- **Exact command to reproduce**: see below\r\n\r\n### Describe the problem\r\nRandom initialization of a GPU variable with more than INT32_MAX elements crashes with CUDA_ERROR_ILLEGAL_ADDRESS.\r\n\r\n### Source code / logs\r\nThe following code runs with no problem (ran into this with large embedding tables):\r\n```python\r\nimport tensorflow as tf\r\nn = 13417676\r\nh = 160\r\nx = tf.get_variable('x', [n, h])\r\nwith tf.Session() as sess:\r\n    sess.run(tf.global_variables_initializer())\r\n```\r\nThe following code crashes with CUDA_ERROR_ILLEGAL_ACCESS:\r\n```python\r\nimport tensorflow as tf\r\nn = 13417677 # increased by 1\r\nh = 160\r\nx = tf.get_variable('x', [n, h])\r\nwith tf.Session() as sess:\r\n    sess.run(tf.global_variables_initializer())\r\n```\r\n\r\nRunning with `cuda-memcheck` reports the following:\r\n```\r\n========= Invalid __global__ write of size 16\r\n=========     at 0x00000850 in void tensorflow::functor::FillPhiloxRandomKernelLaunch<tensorflow::random::UniformDistribution<tensorflow::random::PhiloxRandom, float>>(tensorflow::random::PhiloxRandom, tensorflow::random::PhiloxRandomResultElementType*, __int64, tensorflow::functor::FillPhiloxRandomKernelLaunch<tensorflow::random::UniformDistribution<tensorflow::random::PhiloxRandom, float>>)\r\n=========     by thread (1023,0,0) in block (127,0,0)\r\n=========     Address 0x7f7e3c6806f0 is out of bounds\r\n```\r\n\r\nChecking the source code, the following looks suspicious to me: https://github.com/tensorflow/tensorflow/blob/982549ea3423df4270ff154e5c764beb43d472da/tensorflow/core/kernels/random_op_gpu.cu.cc#L136\r\n\r\nThe `int32 offset` variable is later used to index into the output array -- and I believe it can overflow and generate an illegal negative index."}