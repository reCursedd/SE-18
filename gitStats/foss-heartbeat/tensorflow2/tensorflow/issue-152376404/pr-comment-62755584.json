{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/62755584", "pull_request_review_id": null, "id": 62755584, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzU1NTg0", "diff_hunk": "@@ -1917,7 +1917,6 @@ def one_hot(indices, depth, on_value=1, off_value=0,\n             axis, dtype], name, \"one_hot\") as name:\n     on_value = ops.convert_to_tensor(on_value, dtype=dtype, name=\"on_value\")", "path": "tensorflow/python/ops/array_ops.py", "position": null, "original_position": 2, "commit_id": "325f7369becc9ffc32be285a9bdc728ada158418", "original_commit_id": "d5973cced2fb296b81dd65226211d4c109575841", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "No. They should with with tensors.  Sounds like a bug in cast.  Let's fix\nthat either by adding support for cast integers to complex or remove\ndtype=complex from the test.\nOn May 10, 2016 12:47 PM, \"Sam Abrahams\" notifications@github.com wrote:\n\n> In tensorflow/python/ops/array_ops.py\n> https://github.com/tensorflow/tensorflow/pull/2187#discussion_r62739194:\n> \n> > @@ -1917,7 +1917,6 @@ def one_hot(indices, depth, on_value=1, off_value=0,\n> >              axis, dtype], name, \"one_hot\") as name:\n> >      on_value = ops.convert_to_tensor(on_value, dtype=dtype, name=\"on_value\")\n> \n> @ebrevdo https://github.com/ebrevdo When these are switched to cast, we\n> end up with an UnimplementedError when trying to cast standard Python\n> numbers to complex64, while convert_to_tensor has code coverage for this.\n> Might we stick with convert_to_tensor for now and switch after the\n> appropriate cast implementations are covered? From what I understand, the\n> main downside of convert_to_tensor is that it may not work properly when\n> on_value and off_value are passed in as Tensor objects, but I imagine\n> most people just passing in normal Python types.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/tensorflow/tensorflow/pull/2187/files/d5973cced2fb296b81dd65226211d4c109575841#r62739194\n", "created_at": "2016-05-10T21:26:59Z", "updated_at": "2016-05-22T07:31:30Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/2187#discussion_r62755584", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2187", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/62755584"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/2187#discussion_r62755584"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2187"}}, "body_html": "<p>No. They should with with tensors.  Sounds like a bug in cast.  Let's fix<br>\nthat either by adding support for cast integers to complex or remove<br>\ndtype=complex from the test.<br>\nOn May 10, 2016 12:47 PM, \"Sam Abrahams\" <a href=\"mailto:notifications@github.com\">notifications@github.com</a> wrote:</p>\n<blockquote>\n<p>In tensorflow/python/ops/array_ops.py<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"152376404\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/2187\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/2187/hovercard?comment_id=62739194&amp;comment_type=review_comment\" href=\"https://github.com/tensorflow/tensorflow/pull/2187#discussion_r62739194\">#2187 (comment)</a>:</p>\n<blockquote>\n<p>@@ -1917,7 +1917,6 @@ def one_hot(indices, depth, on_value=1, off_value=0,<br>\naxis, dtype], name, \"one_hot\") as name:<br>\non_value = ops.convert_to_tensor(on_value, dtype=dtype, name=\"on_value\")</p>\n</blockquote>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> <a href=\"https://github.com/ebrevdo\">https://github.com/ebrevdo</a> When these are switched to cast, we<br>\nend up with an UnimplementedError when trying to cast standard Python<br>\nnumbers to complex64, while convert_to_tensor has code coverage for this.<br>\nMight we stick with convert_to_tensor for now and switch after the<br>\nappropriate cast implementations are covered? From what I understand, the<br>\nmain downside of convert_to_tensor is that it may not work properly when<br>\non_value and off_value are passed in as Tensor objects, but I imagine<br>\nmost people just passing in normal Python types.</p>\n<p>\u2014<br>\nYou are receiving this because you were mentioned.<br>\nReply to this email directly or view it on GitHub<br>\n<a href=\"https://github.com/tensorflow/tensorflow/pull/2187/files/d5973cced2fb296b81dd65226211d4c109575841#r62739194\">https://github.com/tensorflow/tensorflow/pull/2187/files/d5973cced2fb296b81dd65226211d4c109575841#r62739194</a></p>\n</blockquote>", "body_text": "No. They should with with tensors.  Sounds like a bug in cast.  Let's fix\nthat either by adding support for cast integers to complex or remove\ndtype=complex from the test.\nOn May 10, 2016 12:47 PM, \"Sam Abrahams\" notifications@github.com wrote:\n\nIn tensorflow/python/ops/array_ops.py\n#2187 (comment):\n\n@@ -1917,7 +1917,6 @@ def one_hot(indices, depth, on_value=1, off_value=0,\naxis, dtype], name, \"one_hot\") as name:\non_value = ops.convert_to_tensor(on_value, dtype=dtype, name=\"on_value\")\n\n@ebrevdo https://github.com/ebrevdo When these are switched to cast, we\nend up with an UnimplementedError when trying to cast standard Python\nnumbers to complex64, while convert_to_tensor has code coverage for this.\nMight we stick with convert_to_tensor for now and switch after the\nappropriate cast implementations are covered? From what I understand, the\nmain downside of convert_to_tensor is that it may not work properly when\non_value and off_value are passed in as Tensor objects, but I imagine\nmost people just passing in normal Python types.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/tensorflow/tensorflow/pull/2187/files/d5973cced2fb296b81dd65226211d4c109575841#r62739194"}