{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/62739194", "pull_request_review_id": null, "id": 62739194, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzM5MTk0", "diff_hunk": "@@ -1917,7 +1917,6 @@ def one_hot(indices, depth, on_value=1, off_value=0,\n             axis, dtype], name, \"one_hot\") as name:\n     on_value = ops.convert_to_tensor(on_value, dtype=dtype, name=\"on_value\")", "path": "tensorflow/python/ops/array_ops.py", "position": null, "original_position": 2, "commit_id": "325f7369becc9ffc32be285a9bdc728ada158418", "original_commit_id": "d5973cced2fb296b81dd65226211d4c109575841", "user": {"login": "samjabrahams", "id": 11607205, "node_id": "MDQ6VXNlcjExNjA3MjA1", "avatar_url": "https://avatars0.githubusercontent.com/u/11607205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samjabrahams", "html_url": "https://github.com/samjabrahams", "followers_url": "https://api.github.com/users/samjabrahams/followers", "following_url": "https://api.github.com/users/samjabrahams/following{/other_user}", "gists_url": "https://api.github.com/users/samjabrahams/gists{/gist_id}", "starred_url": "https://api.github.com/users/samjabrahams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samjabrahams/subscriptions", "organizations_url": "https://api.github.com/users/samjabrahams/orgs", "repos_url": "https://api.github.com/users/samjabrahams/repos", "events_url": "https://api.github.com/users/samjabrahams/events{/privacy}", "received_events_url": "https://api.github.com/users/samjabrahams/received_events", "type": "User", "site_admin": false}, "body": "@ebrevdo When these are switched to `cast`, we end up with an `UnimplementedError` when trying to cast standard Python numbers to `complex64`, while `convert_to_tensor` has code coverage for this. Might we stick with `convert_to_tensor` for now and switch after the appropriate `cast` implementations are covered? From what I understand, the main downside of `convert_to_tensor` is that it may not work properly when `on_value` and `off_value` are passed in as Tensor objects, but I imagine most people just passing in normal Python types.\n", "created_at": "2016-05-10T19:47:07Z", "updated_at": "2016-05-22T07:31:30Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/2187#discussion_r62739194", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2187", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/62739194"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/2187#discussion_r62739194"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2187"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> When these are switched to <code>cast</code>, we end up with an <code>UnimplementedError</code> when trying to cast standard Python numbers to <code>complex64</code>, while <code>convert_to_tensor</code> has code coverage for this. Might we stick with <code>convert_to_tensor</code> for now and switch after the appropriate <code>cast</code> implementations are covered? From what I understand, the main downside of <code>convert_to_tensor</code> is that it may not work properly when <code>on_value</code> and <code>off_value</code> are passed in as Tensor objects, but I imagine most people just passing in normal Python types.</p>", "body_text": "@ebrevdo When these are switched to cast, we end up with an UnimplementedError when trying to cast standard Python numbers to complex64, while convert_to_tensor has code coverage for this. Might we stick with convert_to_tensor for now and switch after the appropriate cast implementations are covered? From what I understand, the main downside of convert_to_tensor is that it may not work properly when on_value and off_value are passed in as Tensor objects, but I imagine most people just passing in normal Python types."}