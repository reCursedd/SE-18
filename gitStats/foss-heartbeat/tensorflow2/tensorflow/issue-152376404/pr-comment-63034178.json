{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/63034178", "pull_request_review_id": null, "id": 63034178, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDM0MTc4", "diff_hunk": "@@ -113,44 +113,68 @@ class OneHotOp : public OpKernel {\n   TF_DISALLOW_COPY_AND_ASSIGN(OneHotOp);\n };\n \n-#define REGISTER_ONE_HOT(type)                           \\\n-  REGISTER_KERNEL_BUILDER(Name(\"OneHot\")                 \\\n-                              .Device(DEVICE_CPU)        \\\n-                              .TypeConstraint<type>(\"T\") \\\n-                              .HostMemory(\"depth\"),      \\\n-                          OneHotOp<CPUDevice, type>);\n+#define REGISTER_ONE_HOT_INDEX(type, index_type)                  \\\n+  REGISTER_KERNEL_BUILDER(Name(\"OneHot\")                          \\\n+                              .Device(DEVICE_CPU)                 \\\n+                              .TypeConstraint<index_type>(\"TI\")   \\\n+                              .TypeConstraint<type>(\"T\")          \\\n+                              .HostMemory(\"depth\"),               \\\n+                          OneHotOp<CPUDevice, type, index_type>);\n \n-TF_CALL_NUMBER_TYPES(REGISTER_ONE_HOT);\n+#define REGISTER_ONE_HOT(type)          \\\n+  REGISTER_ONE_HOT_INDEX(type, int8);   \\\n+  REGISTER_ONE_HOT_INDEX(type, int16);  \\\n+  REGISTER_ONE_HOT_INDEX(type, int32);  \\\n+  REGISTER_ONE_HOT_INDEX(type, int64);  \\\n+  REGISTER_ONE_HOT_INDEX(type, uint8)\n+\n+TF_CALL_ALL_TYPES(REGISTER_ONE_HOT);\n \n #if GOOGLE_CUDA\n \n // Forward declarations of the functor specializations for GPU.\n namespace functor {\n-#define DECLARE_GPU_SPEC(T)                                                   \\\n-  template <>                                                                 \\\n-  void OneHot<GPUDevice, T>::Compute(                                         \\\n-      const GPUDevice& d, const typename TTypes<int64>::ConstMatrix& indices, \\\n-      const typename TTypes<T>::ConstScalar& on_value,                        \\\n-      const typename TTypes<T>::ConstScalar& off_value,                       \\\n-      typename TTypes<T, 3>::Tensor* output);                                 \\\n-  extern template struct OneHot<GPUDevice, T>;\n+#define DECLARE_GPU_SPEC_INDEX(T, TI)                                       \\\n+  template <>                                                               \\\n+  void OneHot<GPUDevice, T, TI>::Compute(                                   \\\n+      const GPUDevice& d, const typename TTypes<TI>::ConstMatrix& indices,  \\\n+      const typename TTypes<T>::ConstScalar& on_value,                      \\\n+      const typename TTypes<T>::ConstScalar& off_value,                     \\\n+      typename TTypes<T, 3>::Tensor* output);                               \\\n+  extern template struct OneHot<GPUDevice, T, TI>;\n+\n+#define DECLARE_GPU_SPEC(T)          \\\n+  DECLARE_GPU_SPEC_INDEX(T, int8);   \\", "path": "tensorflow/core/kernels/one_hot_op.cc", "position": null, "original_position": 86, "commit_id": "325f7369becc9ffc32be285a9bdc728ada158418", "original_commit_id": "d86beb13aa0bb59913444b9471659e0e498966b7", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "we only need int32 and int64.  no one uses indexing with other types and this bloats the C++ objects (every instantiation of a template creates a complete copy of the code, \\* all the types)\n", "created_at": "2016-05-12T14:52:00Z", "updated_at": "2016-05-22T07:31:30Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/2187#discussion_r63034178", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2187", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/63034178"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/2187#discussion_r63034178"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2187"}}, "body_html": "<p>we only need int32 and int64.  no one uses indexing with other types and this bloats the C++ objects (every instantiation of a template creates a complete copy of the code, * all the types)</p>", "body_text": "we only need int32 and int64.  no one uses indexing with other types and this bloats the C++ objects (every instantiation of a template creates a complete copy of the code, * all the types)"}