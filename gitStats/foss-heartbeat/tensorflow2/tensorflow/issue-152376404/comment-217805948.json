{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/217805948", "html_url": "https://github.com/tensorflow/tensorflow/pull/2187#issuecomment-217805948", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2187", "id": 217805948, "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzgwNTk0OA==", "user": {"login": "samjabrahams", "id": 11607205, "node_id": "MDQ6VXNlcjExNjA3MjA1", "avatar_url": "https://avatars0.githubusercontent.com/u/11607205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samjabrahams", "html_url": "https://github.com/samjabrahams", "followers_url": "https://api.github.com/users/samjabrahams/followers", "following_url": "https://api.github.com/users/samjabrahams/following{/other_user}", "gists_url": "https://api.github.com/users/samjabrahams/gists{/gist_id}", "starred_url": "https://api.github.com/users/samjabrahams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samjabrahams/subscriptions", "organizations_url": "https://api.github.com/users/samjabrahams/orgs", "repos_url": "https://api.github.com/users/samjabrahams/repos", "events_url": "https://api.github.com/users/samjabrahams/events{/privacy}", "received_events_url": "https://api.github.com/users/samjabrahams/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-09T08:31:17Z", "updated_at": "2016-05-09T08:31:53Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Sorry it took a while to get something posted! I've pushed the WIP, and the code is working as intended. Not sure if this is the most elegant solution, however. I have a couple of questions:</p>\n<ul>\n<li>Is there a better pattern to iterate over combinations of data types when using <code>REGISTER_KERNEL_BUILDER</code>? I'm wondering if we should just extend <code>indices</code> compatibility to be of any <code>int</code> type. Ideally, I'd like to use both <code>TF_CALL_NUMBER_TYPES</code> and <code>TF_CALL_INTEGRAL_TYPES</code> (or modified versions of those macros), but they aren't designed for builders with multiple generic types. For example, in <a href=\"https://github.com/tensorflow/tensorflow/pull/2187/files#diff-9069716f50988af959734fd72f49c31fR116\">lines 116-133</a>, I wrote nearly identical code in order to register an implementation for both <code>int32</code> and <code>int64</code>. I could copy and paste a bunch for <code>int8</code>, <code>int16</code>, etc., but I figured I would ask first.</li>\n<li>Am I going overboard with the tests? I modified them to iterate over NumPy dtypes and TensorFlow dtypes, as we weren't testing <code>tf.constant</code> objects before (<a href=\"https://github.com/tensorflow/tensorflow/issues/1799#issuecomment-215913080\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1799/hovercard\">which gave us surprise errors</a>). However, this jumps the test time from ~2.5 seconds to ~5 seconds for CPU-only, and from ~4.5 seconds to ~9 seconds with GPU.</li>\n</ul>\n<p>Thanks!</p>", "body_text": "Sorry it took a while to get something posted! I've pushed the WIP, and the code is working as intended. Not sure if this is the most elegant solution, however. I have a couple of questions:\n\nIs there a better pattern to iterate over combinations of data types when using REGISTER_KERNEL_BUILDER? I'm wondering if we should just extend indices compatibility to be of any int type. Ideally, I'd like to use both TF_CALL_NUMBER_TYPES and TF_CALL_INTEGRAL_TYPES (or modified versions of those macros), but they aren't designed for builders with multiple generic types. For example, in lines 116-133, I wrote nearly identical code in order to register an implementation for both int32 and int64. I could copy and paste a bunch for int8, int16, etc., but I figured I would ask first.\nAm I going overboard with the tests? I modified them to iterate over NumPy dtypes and TensorFlow dtypes, as we weren't testing tf.constant objects before (which gave us surprise errors). However, this jumps the test time from ~2.5 seconds to ~5 seconds for CPU-only, and from ~4.5 seconds to ~9 seconds with GPU.\n\nThanks!", "body": "Sorry it took a while to get something posted! I've pushed the WIP, and the code is working as intended. Not sure if this is the most elegant solution, however. I have a couple of questions:\n- Is there a better pattern to iterate over combinations of data types when using `REGISTER_KERNEL_BUILDER`? I'm wondering if we should just extend `indices` compatibility to be of any `int` type. Ideally, I'd like to use both `TF_CALL_NUMBER_TYPES` and `TF_CALL_INTEGRAL_TYPES` (or modified versions of those macros), but they aren't designed for builders with multiple generic types. For example, in [lines 116-133](https://github.com/tensorflow/tensorflow/pull/2187/files#diff-9069716f50988af959734fd72f49c31fR116), I wrote nearly identical code in order to register an implementation for both `int32` and `int64`. I could copy and paste a bunch for `int8`, `int16`, etc., but I figured I would ask first.\n- Am I going overboard with the tests? I modified them to iterate over NumPy dtypes and TensorFlow dtypes, as we weren't testing `tf.constant` objects before ([which gave us surprise errors](https://github.com/tensorflow/tensorflow/issues/1799#issuecomment-215913080)). However, this jumps the test time from ~2.5 seconds to ~5 seconds for CPU-only, and from ~4.5 seconds to ~9 seconds with GPU.\n\nThanks!\n"}