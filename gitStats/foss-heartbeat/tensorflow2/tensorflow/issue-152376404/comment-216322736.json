{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/216322736", "html_url": "https://github.com/tensorflow/tensorflow/pull/2187#issuecomment-216322736", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2187", "id": 216322736, "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjMyMjczNg==", "user": {"login": "samjabrahams", "id": 11607205, "node_id": "MDQ6VXNlcjExNjA3MjA1", "avatar_url": "https://avatars0.githubusercontent.com/u/11607205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samjabrahams", "html_url": "https://github.com/samjabrahams", "followers_url": "https://api.github.com/users/samjabrahams/followers", "following_url": "https://api.github.com/users/samjabrahams/following{/other_user}", "gists_url": "https://api.github.com/users/samjabrahams/gists{/gist_id}", "starred_url": "https://api.github.com/users/samjabrahams/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samjabrahams/subscriptions", "organizations_url": "https://api.github.com/users/samjabrahams/orgs", "repos_url": "https://api.github.com/users/samjabrahams/repos", "events_url": "https://api.github.com/users/samjabrahams/events{/privacy}", "received_events_url": "https://api.github.com/users/samjabrahams/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-02T18:39:13Z", "updated_at": "2016-05-02T18:39:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks, good to know.</p>\n<p>The issue, as seen <a href=\"https://github.com/tensorflow/tensorflow/issues/1799#issuecomment-215913080\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1799/hovercard\">here</a>, is that when a tensor with a defined data-type is passed to <code>convert_to_tensor</code> with a different datatype, we get a ValueError. For example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> a <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">3</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> b <span class=\"pl-k\">=</span> tf.convert_to_tensor(a, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int64)\n\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stdin&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">565</span>, <span class=\"pl-k\">in</span> convert_to_tensor\n    ret <span class=\"pl-k\">=</span> conversion_func(value, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>name, <span class=\"pl-v\">as_ref</span><span class=\"pl-k\">=</span>as_ref)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">510</span>, <span class=\"pl-k\">in</span> _TensorTensorConversionFunction\n    <span class=\"pl-k\">%</span> (dtype.name, t.dtype.name, <span class=\"pl-c1\">str</span>(t)))\n<span class=\"pl-c1\">ValueError</span>: Tensor conversion requested dtype int64 <span class=\"pl-k\">for</span> Tensor <span class=\"pl-k\">with</span> dtype int32: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Tensor(\"Const_2:0\", shape=(), dtype=int32)<span class=\"pl-pds\">'</span></span></pre></div>\n<p>You get similar results with Tensors of different data types. Numpy arrays work fine, however. I'm not sure whether this is intended behavior for <code>convert_to_tensor</code>.</p>\n<p>I understand the primary use case for <code>one_hot</code> will be when reading in data from a file, so having to convert TensorFlow objects isn't crucial, but the thought was to support as many data types as possible.</p>", "body_text": "Thanks, good to know.\nThe issue, as seen here, is that when a tensor with a defined data-type is passed to convert_to_tensor with a different datatype, we get a ValueError. For example:\n>>> import tensorflow as tf\n>>> a = tf.constant(3, dtype=tf.int32)\n>>> b = tf.convert_to_tensor(a, dtype=tf.int64)\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 565, in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 510, in _TensorTensorConversionFunction\n    % (dtype.name, t.dtype.name, str(t)))\nValueError: Tensor conversion requested dtype int64 for Tensor with dtype int32: 'Tensor(\"Const_2:0\", shape=(), dtype=int32)'\nYou get similar results with Tensors of different data types. Numpy arrays work fine, however. I'm not sure whether this is intended behavior for convert_to_tensor.\nI understand the primary use case for one_hot will be when reading in data from a file, so having to convert TensorFlow objects isn't crucial, but the thought was to support as many data types as possible.", "body": "Thanks, good to know.\n\nThe issue, as seen [here](https://github.com/tensorflow/tensorflow/issues/1799#issuecomment-215913080), is that when a tensor with a defined data-type is passed to `convert_to_tensor` with a different datatype, we get a ValueError. For example:\n\n``` python\n>>> import tensorflow as tf\n>>> a = tf.constant(3, dtype=tf.int32)\n>>> b = tf.convert_to_tensor(a, dtype=tf.int64)\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 565, in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/ops.py\", line 510, in _TensorTensorConversionFunction\n    % (dtype.name, t.dtype.name, str(t)))\nValueError: Tensor conversion requested dtype int64 for Tensor with dtype int32: 'Tensor(\"Const_2:0\", shape=(), dtype=int32)'\n```\n\nYou get similar results with Tensors of different data types. Numpy arrays work fine, however. I'm not sure whether this is intended behavior for `convert_to_tensor`. \n\nI understand the primary use case for `one_hot` will be when reading in data from a file, so having to convert TensorFlow objects isn't crucial, but the thought was to support as many data types as possible.\n"}