{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/86749340", "pull_request_review_id": 7390267, "id": 86749340, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2NzQ5MzQw", "diff_hunk": "@@ -340,3 +341,45 @@ def __call__(self, shape, dtype=dtypes.float32, partition_info=None):\n     \"\"\"Generate a tensor used to initialize a variable.\"\"\"\n     return random_ops._random_walk(shape, self._nonlinearity, dtype,\n                                    seed=self._seed)\n+\n+\n+def orthogonal_initializer(gain=1.0, dtype=dtypes.float32, seed=None):\n+  \"\"\"Returns an initializer that generates an orthogonal rotation matrix.\n+\n+  Initialize a tensor using an orthogonal matrix.\n+\n+  Args:\n+    gain: multiplicative factor to apply to the orthogonal matrix\n+    dtype: The type of the output.\n+    seed: A Python integer. Used to create random seeds. See\n+      [`set_random_seed`](../../api_docs/python/constant_op.md#set_random_seed)\n+      for behavior.\n+\n+  Returns:\n+    An initializer that generates orthogonal tensors\n+\n+  Raises:\n+    ValueError: if `dtype` is not a floating point type.\n+  \"\"\"\n+  def _initializer(shape, dtype=_assert_float_dtype(dtype), partition_info=None):\n+    # Flatten the input shape with the last dimension remaining its original shape so it works for conv2d", "path": "tensorflow/python/ops/init_ops.py", "position": null, "original_position": 33, "commit_id": "1cb31e3ea41334e3718bad0f33a92dd5030ca229", "original_commit_id": "b0d3dea6bc5d141c67c976f3cc04115e1b7446d2", "user": {"login": "tillahoffmann", "id": 966348, "node_id": "MDQ6VXNlcjk2NjM0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/966348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tillahoffmann", "html_url": "https://github.com/tillahoffmann", "followers_url": "https://api.github.com/users/tillahoffmann/followers", "following_url": "https://api.github.com/users/tillahoffmann/following{/other_user}", "gists_url": "https://api.github.com/users/tillahoffmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tillahoffmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tillahoffmann/subscriptions", "organizations_url": "https://api.github.com/users/tillahoffmann/orgs", "repos_url": "https://api.github.com/users/tillahoffmann/repos", "events_url": "https://api.github.com/users/tillahoffmann/events{/privacy}", "received_events_url": "https://api.github.com/users/tillahoffmann/received_events", "type": "User", "site_admin": false}, "body": "I would be keen to keep the functionality as is but document more clearly as you suggested. The main reason is that I find\n\n``` python\nweights = tf.get_variable('weights', (5, 5, 8, 32), tf.float32, \n                          tf.orthogonal_initializer())\n```\n\nmuch more straightforward than\n\n``` python\nweights = tf.reshape(\n  tf.get_variable('weights', (200, 32), tf.float32, tf.orthogonal_initializer()), \n  (5, 5, 8, 32)\n)\n```\n", "created_at": "2016-11-07T10:39:39Z", "updated_at": "2016-11-14T18:50:06Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/5164#discussion_r86749340", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5164", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/86749340"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/5164#discussion_r86749340"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5164"}}, "body_html": "<p>I would be keen to keep the functionality as is but document more clearly as you suggested. The main reason is that I find</p>\n<div class=\"highlight highlight-source-python\"><pre>weights <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>weights<span class=\"pl-pds\">'</span></span>, (<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">32</span>), tf.float32, \n                          tf.orthogonal_initializer())</pre></div>\n<p>much more straightforward than</p>\n<div class=\"highlight highlight-source-python\"><pre>weights <span class=\"pl-k\">=</span> tf.reshape(\n  tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>weights<span class=\"pl-pds\">'</span></span>, (<span class=\"pl-c1\">200</span>, <span class=\"pl-c1\">32</span>), tf.float32, tf.orthogonal_initializer()), \n  (<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">8</span>, <span class=\"pl-c1\">32</span>)\n)</pre></div>", "body_text": "I would be keen to keep the functionality as is but document more clearly as you suggested. The main reason is that I find\nweights = tf.get_variable('weights', (5, 5, 8, 32), tf.float32, \n                          tf.orthogonal_initializer())\nmuch more straightforward than\nweights = tf.reshape(\n  tf.get_variable('weights', (200, 32), tf.float32, tf.orthogonal_initializer()), \n  (5, 5, 8, 32)\n)", "in_reply_to_id": 86027431}