{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/418907154", "html_url": "https://github.com/tensorflow/tensorflow/issues/22062#issuecomment-418907154", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22062", "id": 418907154, "node_id": "MDEyOklzc3VlQ29tbWVudDQxODkwNzE1NA==", "user": {"login": "ybsave", "id": 26417094, "node_id": "MDQ6VXNlcjI2NDE3MDk0", "avatar_url": "https://avatars0.githubusercontent.com/u/26417094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ybsave", "html_url": "https://github.com/ybsave", "followers_url": "https://api.github.com/users/ybsave/followers", "following_url": "https://api.github.com/users/ybsave/following{/other_user}", "gists_url": "https://api.github.com/users/ybsave/gists{/gist_id}", "starred_url": "https://api.github.com/users/ybsave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ybsave/subscriptions", "organizations_url": "https://api.github.com/users/ybsave/orgs", "repos_url": "https://api.github.com/users/ybsave/repos", "events_url": "https://api.github.com/users/ybsave/events{/privacy}", "received_events_url": "https://api.github.com/users/ybsave/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-05T22:53:16Z", "updated_at": "2018-09-06T16:26:02Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3731025\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/allenlavoie\">@allenlavoie</a> Thank you for your explanation. I tried to use a custom layer to perform the tf.gather; however, the load_model still crashed. My codes are</p>\n<pre><code>class IndexLayer(Layer):\n  def __init__(self, valid_idx, **kwargs):\n\tself.valid_idx = valid_idx\n\tsuper(IndexLayer, self).__init__(trainable=False, **kwargs)\n\n  def build(self, input_shape):\n\tsuper(IndexLayer, self).build(input_shape)\n\n  def call(self, inputs):\n\treturn tf.gather(inputs, self.valid_idx, axis=-1)\n\n  def get_config(self):\n\tbase_config = super(IndexLayer, self).get_config()\n\tbase_config['valid_idx'] = self.valid_idx\n\treturn base_config\n\n  def from_config(cls, config):\n\treturn cls(**config)\n\ndef test_lambda_layer():\n  data_input = keras.Input(shape=(1,4,5), dtype=float)\n  mask = [0,1,1,0,1]\n  valid_out_idx = np.nonzero(mask)[0]\n  #x = Lambda(lambda t: tf.gather(t, np.nonzero(mask)[0], axis=-1))(data_input)\n  x = IndexLayer(valid_out_idx)(data_input)\n  x = Conv2D(5, 1, use_bias=False, kernel_initializer='ones',\n\t\t\t trainable=False)(x)\n  model = keras.Model(inputs=data_input, outputs=x)\n  model.summary()\n\n  data = np.ones((1,1,4,5), dtype=float)\n  print(model.predict(data))\n\n  model.save('test.h5')\n\n  new_model = keras.models.load_model('test.h5')\n  new_model.summary()\n\n  print(new_model.predict(data))\n</code></pre>\n<p>and the error messages are</p>\n<pre><code>  File \"test_keras.py\", line 332, in &lt;module&gt;\n\tmain()\n  File \"test_keras.py\", line 329, in main\n\ttest_lambda_layer()\n  File \"test_keras.py\", line 317, in test_lambda_layer\n\tnew_model = keras.models.load_model('test.h5')\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\saving.py\", line 230, in load_model\n\tmodel = model_from_config(model_config, custom_objects=custom_objects)\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\saving.py\", line 310, in model_from_config\n\treturn deserialize(config, custom_objects=custom_objects)\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\serialization.py\", line 64, in deserialize\n\tprintable_module_name='layer')\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\generic_utils.py\", line 173, in deserialize_keras_object\n\tlist(custom_objects.items())))\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\network.py\", line 1292, in from_config\n\tprocess_layer(layer_data)\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\network.py\", line 1278, in process_layer\n\tlayer = deserialize_layer(layer_data, custom_objects=custom_objects)\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\serialization.py\", line 64, in deserialize\n\tprintable_module_name='layer')\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\generic_utils.py\", line 163, in deserialize_keras_object\n\traise ValueError('Unknown ' + printable_module_name + ': ' + class_name)\nValueError: Unknown layer: IndexLayer\n</code></pre>\n<p>If I change the line</p>\n<pre><code>new_model = keras.models.load_model('test.h5')\n</code></pre>\n<p>to</p>\n<pre><code>new_model = keras.models.load_model('test.h5', custom_objects={'IndexLayer':IndexLayer})\n</code></pre>\n<p>The error becomes</p>\n<pre><code>File \"test_keras.py\", line 325, in test_lambda_layer\ncustom_objects={'IndexLayer':IndexLayer})\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\saving.py\", line 230, in load_model\nmodel = model_from_config(model_config, custom_objects=custom_objects)\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\saving.py\", line 310, in model_from_config\nreturn deserialize(config, custom_objects=custom_objects)\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\serialization.py\", line 64, in deserialize\nprintable_module_name='layer')\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\generic_utils.py\", line 173, in deserialize_keras_object\nlist(custom_objects.items())))\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\network.py\", line 1292, in from_config\nprocess_layer(layer_data)\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\network.py\", line 1278, in process_layer\nlayer = deserialize_layer(layer_data, custom_objects=custom_objects)\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\serialization.py\", line 64, in deserialize\nprintable_module_name='layer')\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\generic_utils.py\", line 175, in deserialize_keras_object\nreturn cls.from_config(config['config'])\nTypeError: from_config() missing 1 required positional argument: 'config'\n</code></pre>\n<p>Did I miss something or incorrectly implement something?</p>\n<p>Btw: do you mean that my original codes would be supported in future Tensorflow versions? Will the numpy data be serialized/deserialized in the future? Actually, I am quite confused in <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=29100818\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/omalleyt12\">@omalleyt12</a> 's original response; I do not understand why hard coded the values is OK but using a constant like variable is not.</p>\n<p>Thanks.</p>", "body_text": "@allenlavoie Thank you for your explanation. I tried to use a custom layer to perform the tf.gather; however, the load_model still crashed. My codes are\nclass IndexLayer(Layer):\n  def __init__(self, valid_idx, **kwargs):\n\tself.valid_idx = valid_idx\n\tsuper(IndexLayer, self).__init__(trainable=False, **kwargs)\n\n  def build(self, input_shape):\n\tsuper(IndexLayer, self).build(input_shape)\n\n  def call(self, inputs):\n\treturn tf.gather(inputs, self.valid_idx, axis=-1)\n\n  def get_config(self):\n\tbase_config = super(IndexLayer, self).get_config()\n\tbase_config['valid_idx'] = self.valid_idx\n\treturn base_config\n\n  def from_config(cls, config):\n\treturn cls(**config)\n\ndef test_lambda_layer():\n  data_input = keras.Input(shape=(1,4,5), dtype=float)\n  mask = [0,1,1,0,1]\n  valid_out_idx = np.nonzero(mask)[0]\n  #x = Lambda(lambda t: tf.gather(t, np.nonzero(mask)[0], axis=-1))(data_input)\n  x = IndexLayer(valid_out_idx)(data_input)\n  x = Conv2D(5, 1, use_bias=False, kernel_initializer='ones',\n\t\t\t trainable=False)(x)\n  model = keras.Model(inputs=data_input, outputs=x)\n  model.summary()\n\n  data = np.ones((1,1,4,5), dtype=float)\n  print(model.predict(data))\n\n  model.save('test.h5')\n\n  new_model = keras.models.load_model('test.h5')\n  new_model.summary()\n\n  print(new_model.predict(data))\n\nand the error messages are\n  File \"test_keras.py\", line 332, in <module>\n\tmain()\n  File \"test_keras.py\", line 329, in main\n\ttest_lambda_layer()\n  File \"test_keras.py\", line 317, in test_lambda_layer\n\tnew_model = keras.models.load_model('test.h5')\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\saving.py\", line 230, in load_model\n\tmodel = model_from_config(model_config, custom_objects=custom_objects)\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\saving.py\", line 310, in model_from_config\n\treturn deserialize(config, custom_objects=custom_objects)\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\serialization.py\", line 64, in deserialize\n\tprintable_module_name='layer')\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\generic_utils.py\", line 173, in deserialize_keras_object\n\tlist(custom_objects.items())))\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\network.py\", line 1292, in from_config\n\tprocess_layer(layer_data)\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\network.py\", line 1278, in process_layer\n\tlayer = deserialize_layer(layer_data, custom_objects=custom_objects)\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\serialization.py\", line 64, in deserialize\n\tprintable_module_name='layer')\n  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\generic_utils.py\", line 163, in deserialize_keras_object\n\traise ValueError('Unknown ' + printable_module_name + ': ' + class_name)\nValueError: Unknown layer: IndexLayer\n\nIf I change the line\nnew_model = keras.models.load_model('test.h5')\n\nto\nnew_model = keras.models.load_model('test.h5', custom_objects={'IndexLayer':IndexLayer})\n\nThe error becomes\nFile \"test_keras.py\", line 325, in test_lambda_layer\ncustom_objects={'IndexLayer':IndexLayer})\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\saving.py\", line 230, in load_model\nmodel = model_from_config(model_config, custom_objects=custom_objects)\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\saving.py\", line 310, in model_from_config\nreturn deserialize(config, custom_objects=custom_objects)\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\serialization.py\", line 64, in deserialize\nprintable_module_name='layer')\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\generic_utils.py\", line 173, in deserialize_keras_object\nlist(custom_objects.items())))\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\network.py\", line 1292, in from_config\nprocess_layer(layer_data)\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\network.py\", line 1278, in process_layer\nlayer = deserialize_layer(layer_data, custom_objects=custom_objects)\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\serialization.py\", line 64, in deserialize\nprintable_module_name='layer')\nFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\generic_utils.py\", line 175, in deserialize_keras_object\nreturn cls.from_config(config['config'])\nTypeError: from_config() missing 1 required positional argument: 'config'\n\nDid I miss something or incorrectly implement something?\nBtw: do you mean that my original codes would be supported in future Tensorflow versions? Will the numpy data be serialized/deserialized in the future? Actually, I am quite confused in @omalleyt12 's original response; I do not understand why hard coded the values is OK but using a constant like variable is not.\nThanks.", "body": "@allenlavoie Thank you for your explanation. I tried to use a custom layer to perform the tf.gather; however, the load_model still crashed. My codes are\r\n\r\n\tclass IndexLayer(Layer):\r\n\t  def __init__(self, valid_idx, **kwargs):\r\n\t\tself.valid_idx = valid_idx\r\n\t\tsuper(IndexLayer, self).__init__(trainable=False, **kwargs)\r\n\r\n\t  def build(self, input_shape):\r\n\t\tsuper(IndexLayer, self).build(input_shape)\r\n\r\n\t  def call(self, inputs):\r\n\t\treturn tf.gather(inputs, self.valid_idx, axis=-1)\r\n\r\n\t  def get_config(self):\r\n\t\tbase_config = super(IndexLayer, self).get_config()\r\n\t\tbase_config['valid_idx'] = self.valid_idx\r\n\t\treturn base_config\r\n\r\n\t  def from_config(cls, config):\r\n\t\treturn cls(**config)\r\n\r\n\tdef test_lambda_layer():\r\n\t  data_input = keras.Input(shape=(1,4,5), dtype=float)\r\n\t  mask = [0,1,1,0,1]\r\n\t  valid_out_idx = np.nonzero(mask)[0]\r\n\t  #x = Lambda(lambda t: tf.gather(t, np.nonzero(mask)[0], axis=-1))(data_input)\r\n\t  x = IndexLayer(valid_out_idx)(data_input)\r\n\t  x = Conv2D(5, 1, use_bias=False, kernel_initializer='ones',\r\n\t\t\t\t trainable=False)(x)\r\n\t  model = keras.Model(inputs=data_input, outputs=x)\r\n\t  model.summary()\r\n\r\n\t  data = np.ones((1,1,4,5), dtype=float)\r\n\t  print(model.predict(data))\r\n\r\n\t  model.save('test.h5')\r\n\r\n\t  new_model = keras.models.load_model('test.h5')\r\n\t  new_model.summary()\r\n\r\n\t  print(new_model.predict(data))\r\n\r\nand the error messages are\r\n\r\n\t  File \"test_keras.py\", line 332, in <module>\r\n\t\tmain()\r\n\t  File \"test_keras.py\", line 329, in main\r\n\t\ttest_lambda_layer()\r\n\t  File \"test_keras.py\", line 317, in test_lambda_layer\r\n\t\tnew_model = keras.models.load_model('test.h5')\r\n\t  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\saving.py\", line 230, in load_model\r\n\t\tmodel = model_from_config(model_config, custom_objects=custom_objects)\r\n\t  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\saving.py\", line 310, in model_from_config\r\n\t\treturn deserialize(config, custom_objects=custom_objects)\r\n\t  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\serialization.py\", line 64, in deserialize\r\n\t\tprintable_module_name='layer')\r\n\t  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\generic_utils.py\", line 173, in deserialize_keras_object\r\n\t\tlist(custom_objects.items())))\r\n\t  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\network.py\", line 1292, in from_config\r\n\t\tprocess_layer(layer_data)\r\n\t  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\network.py\", line 1278, in process_layer\r\n\t\tlayer = deserialize_layer(layer_data, custom_objects=custom_objects)\r\n\t  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\serialization.py\", line 64, in deserialize\r\n\t\tprintable_module_name='layer')\r\n\t  File \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\generic_utils.py\", line 163, in deserialize_keras_object\r\n\t\traise ValueError('Unknown ' + printable_module_name + ': ' + class_name)\r\n\tValueError: Unknown layer: IndexLayer\r\n\r\n\r\nIf I change the line\r\n\r\n    new_model = keras.models.load_model('test.h5')\r\nto\r\n\r\n    new_model = keras.models.load_model('test.h5', custom_objects={'IndexLayer':IndexLayer})\r\n\r\nThe error becomes\r\n\r\n\tFile \"test_keras.py\", line 325, in test_lambda_layer\r\n\tcustom_objects={'IndexLayer':IndexLayer})\r\n\tFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\saving.py\", line 230, in load_model\r\n\tmodel = model_from_config(model_config, custom_objects=custom_objects)\r\n\tFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\saving.py\", line 310, in model_from_config\r\n\treturn deserialize(config, custom_objects=custom_objects)\r\n\tFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\serialization.py\", line 64, in deserialize\r\n\tprintable_module_name='layer')\r\n\tFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\generic_utils.py\", line 173, in deserialize_keras_object\r\n\tlist(custom_objects.items())))\r\n\tFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\network.py\", line 1292, in from_config\r\n\tprocess_layer(layer_data)\r\n\tFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\network.py\", line 1278, in process_layer\r\n\tlayer = deserialize_layer(layer_data, custom_objects=custom_objects)\r\n\tFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\serialization.py\", line 64, in deserialize\r\n\tprintable_module_name='layer')\r\n\tFile \"C:\\Program Files\\Python36\\lib\\site-packages\\tensorflow\\python\\keras\\utils\\generic_utils.py\", line 175, in deserialize_keras_object\r\n\treturn cls.from_config(config['config'])\r\n\tTypeError: from_config() missing 1 required positional argument: 'config'\r\n\r\nDid I miss something or incorrectly implement something?\r\n\r\nBtw: do you mean that my original codes would be supported in future Tensorflow versions? Will the numpy data be serialized/deserialized in the future? Actually, I am quite confused in @omalleyt12 's original response; I do not understand why hard coded the values is OK but using a constant like variable is not. \r\n\r\nThanks.\r\n"}