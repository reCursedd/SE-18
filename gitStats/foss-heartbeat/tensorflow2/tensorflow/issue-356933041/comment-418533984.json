{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/418533984", "html_url": "https://github.com/tensorflow/tensorflow/issues/22062#issuecomment-418533984", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22062", "id": 418533984, "node_id": "MDEyOklzc3VlQ29tbWVudDQxODUzMzk4NA==", "user": {"login": "omalleyt12", "id": 29100818, "node_id": "MDQ6VXNlcjI5MTAwODE4", "avatar_url": "https://avatars3.githubusercontent.com/u/29100818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omalleyt12", "html_url": "https://github.com/omalleyt12", "followers_url": "https://api.github.com/users/omalleyt12/followers", "following_url": "https://api.github.com/users/omalleyt12/following{/other_user}", "gists_url": "https://api.github.com/users/omalleyt12/gists{/gist_id}", "starred_url": "https://api.github.com/users/omalleyt12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omalleyt12/subscriptions", "organizations_url": "https://api.github.com/users/omalleyt12/orgs", "repos_url": "https://api.github.com/users/omalleyt12/repos", "events_url": "https://api.github.com/users/omalleyt12/events{/privacy}", "received_events_url": "https://api.github.com/users/omalleyt12/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-04T22:08:38Z", "updated_at": "2018-09-04T22:08:38Z", "author_association": "NONE", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=26417094\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ybsave\">@ybsave</a>, the problem is that your Lambda layer is relying on the global variable <code>valid_out_idx</code> inside its <code>lambda</code>. This is going to prevent you from loading the saved model in a different file anyway, I'd recommend hardcoding <code>valid_out_idx</code> like below or passing it in as another Input to your Model.</p>\n<p>This works for me:</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Input, Lambda, Conv2D\n\ndef test_lambda_layer():\n  data_input = keras.Input(shape=(1,4,5), dtype=float)\n  mask = [0,1,1,0,1]\n  valid_out_idx = np.nonzero(mask)[0]\n  # hardcode valid_out_idx\n  x = Lambda(lambda t: tf.gather(t, np.nonzero([0,1,1,0,1])[0], axis=-1))(data_input)\n  x = Conv2D(5, 1, use_bias=False, kernel_initializer='ones', trainable=False)(x)\n  model = keras.Model(inputs=data_input, outputs=x)\n  model.summary()\n\n  data = np.ones((1,1,4,5), dtype=float)\n  print(model.predict(data))\n\n  model.save('test.h5')\n\n  new_model = keras.models.load_model('test.h5')\n  new_model.summary()\n\n  print(new_model.predict(data))\n</code></pre>", "body_text": "Hi @ybsave, the problem is that your Lambda layer is relying on the global variable valid_out_idx inside its lambda. This is going to prevent you from loading the saved model in a different file anyway, I'd recommend hardcoding valid_out_idx like below or passing it in as another Input to your Model.\nThis works for me:\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Input, Lambda, Conv2D\n\ndef test_lambda_layer():\n  data_input = keras.Input(shape=(1,4,5), dtype=float)\n  mask = [0,1,1,0,1]\n  valid_out_idx = np.nonzero(mask)[0]\n  # hardcode valid_out_idx\n  x = Lambda(lambda t: tf.gather(t, np.nonzero([0,1,1,0,1])[0], axis=-1))(data_input)\n  x = Conv2D(5, 1, use_bias=False, kernel_initializer='ones', trainable=False)(x)\n  model = keras.Model(inputs=data_input, outputs=x)\n  model.summary()\n\n  data = np.ones((1,1,4,5), dtype=float)\n  print(model.predict(data))\n\n  model.save('test.h5')\n\n  new_model = keras.models.load_model('test.h5')\n  new_model.summary()\n\n  print(new_model.predict(data))", "body": "Hi @ybsave, the problem is that your Lambda layer is relying on the global variable `valid_out_idx` inside its `lambda`. This is going to prevent you from loading the saved model in a different file anyway, I'd recommend hardcoding `valid_out_idx` like below or passing it in as another Input to your Model.\r\n\r\nThis works for me:\r\n\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\nfrom tensorflow import keras\r\nfrom tensorflow.keras.layers import Input, Lambda, Conv2D\r\n\r\ndef test_lambda_layer():\r\n  data_input = keras.Input(shape=(1,4,5), dtype=float)\r\n  mask = [0,1,1,0,1]\r\n  valid_out_idx = np.nonzero(mask)[0]\r\n  # hardcode valid_out_idx\r\n  x = Lambda(lambda t: tf.gather(t, np.nonzero([0,1,1,0,1])[0], axis=-1))(data_input)\r\n  x = Conv2D(5, 1, use_bias=False, kernel_initializer='ones', trainable=False)(x)\r\n  model = keras.Model(inputs=data_input, outputs=x)\r\n  model.summary()\r\n\r\n  data = np.ones((1,1,4,5), dtype=float)\r\n  print(model.predict(data))\r\n\r\n  model.save('test.h5')\r\n\r\n  new_model = keras.models.load_model('test.h5')\r\n  new_model.summary()\r\n\r\n  print(new_model.predict(data))\r\n```\r\n"}