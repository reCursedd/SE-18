{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12917", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12917/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12917/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12917/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/12917", "id": 256324036, "node_id": "MDU6SXNzdWUyNTYzMjQwMzY=", "number": 12917, "title": "SVD on GPU: complex values, interface cleanup (Discussion)", "user": {"login": "shamanDevel", "id": 1770337, "node_id": "MDQ6VXNlcjE3NzAzMzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1770337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shamanDevel", "html_url": "https://github.com/shamanDevel", "followers_url": "https://api.github.com/users/shamanDevel/followers", "following_url": "https://api.github.com/users/shamanDevel/following{/other_user}", "gists_url": "https://api.github.com/users/shamanDevel/gists{/gist_id}", "starred_url": "https://api.github.com/users/shamanDevel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shamanDevel/subscriptions", "organizations_url": "https://api.github.com/users/shamanDevel/orgs", "repos_url": "https://api.github.com/users/shamanDevel/repos", "events_url": "https://api.github.com/users/shamanDevel/events{/privacy}", "received_events_url": "https://api.github.com/users/shamanDevel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2017-09-08T17:41:04Z", "updated_at": "2018-09-28T21:28:01Z", "closed_at": "2018-09-28T21:28:01Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi,<br>\npull request <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"246567835\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/11878\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/11878/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/11878\">#11878</a> brought an implementation of the SVD on the GPU. But at the moment, only real values are supported.</p>\n<p>The current status when applying the SVD (M=USV') on a complex matrix M:</p>\n<ul>\n<li>The python interface declares U,V as complex, S as real</li>\n<li>The C++ kernel definition declares both U,V and S as complex<br>\n(This simplified the CPU implementation using Eigen)</li>\n<li>The python code then immediately casts S to the reals</li>\n<li>The GPU solver (cuSolver) would, however, output the singular values directly as reals</li>\n</ul>\n<p>This leads to the following questions / ideas / suggestions<br>\n(credit goes also to <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16907534\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rmlarsen\">@rmlarsen</a> for discussion this the first time with me)</p>\n<ul>\n<li>Change the kernel definition: Add a new kernel (V2 suffix) that returns S as a real type</li>\n<li>Implement the complex support on GPUs</li>\n<li>Adopt the CPU code to also use the new kernel definition<br>\nOR<br>\nKeep both definitions and let the python wrapper to choose between the two versions based on the target device (CPU vs GPU)</li>\n<li>...?</li>\n</ul>\n<p>What do you think?</p>", "body_text": "Hi,\npull request #11878 brought an implementation of the SVD on the GPU. But at the moment, only real values are supported.\nThe current status when applying the SVD (M=USV') on a complex matrix M:\n\nThe python interface declares U,V as complex, S as real\nThe C++ kernel definition declares both U,V and S as complex\n(This simplified the CPU implementation using Eigen)\nThe python code then immediately casts S to the reals\nThe GPU solver (cuSolver) would, however, output the singular values directly as reals\n\nThis leads to the following questions / ideas / suggestions\n(credit goes also to @rmlarsen for discussion this the first time with me)\n\nChange the kernel definition: Add a new kernel (V2 suffix) that returns S as a real type\nImplement the complex support on GPUs\nAdopt the CPU code to also use the new kernel definition\nOR\nKeep both definitions and let the python wrapper to choose between the two versions based on the target device (CPU vs GPU)\n...?\n\nWhat do you think?", "body": "Hi,\r\npull request #11878 brought an implementation of the SVD on the GPU. But at the moment, only real values are supported.\r\n\r\nThe current status when applying the SVD (M=USV') on a complex matrix M:\r\n- The python interface declares U,V as complex, S as real\r\n- The C++ kernel definition declares both U,V and S as complex\r\n   (This simplified the CPU implementation using Eigen)\r\n- The python code then immediately casts S to the reals\r\n- The GPU solver (cuSolver) would, however, output the singular values directly as reals\r\n\r\nThis leads to the following questions / ideas / suggestions\r\n(credit goes also to @rmlarsen for discussion this the first time with me)\r\n- Change the kernel definition: Add a new kernel (V2 suffix) that returns S as a real type\r\n- Implement the complex support on GPUs\r\n- Adopt the CPU code to also use the new kernel definition\r\n   OR\r\n    Keep both definitions and let the python wrapper to choose between the two versions based on the target device (CPU vs GPU)\r\n- ...?\r\n\r\nWhat do you think?"}