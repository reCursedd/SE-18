{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/220993825", "pull_request_review_id": 159535717, "id": 220993825, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDk5MzgyNQ==", "diff_hunk": "@@ -147,38 +146,29 @@ def _apply_sparse_shared(self, grad, var, indices,\n     m_slice = array_ops.gather(m, indices)\n     m_t_slice = m_slice * beta1_t + grad * (1 - beta1_t)\n     with ops.control_dependencies([m_t_slice]):\n-      m_t = scatter_update(m, indices, m_t_slice)\n+      m_t = scatter_op_wrapper.update(m, indices, m_t_slice)\n     # u_t = max(beta2 * u, abs(g_t))\n     v = self.get_slot(var, \"v\")\n     v_slice = array_ops.gather(v, indices)\n     v_t_slice = math_ops.maximum(v_slice * beta2_t, math_ops.abs(grad))\n     with ops.control_dependencies([v_t_slice]):\n-      v_t = scatter_update(v, indices, v_t_slice)\n+      v_t = scatter_op_wrapper.update(v, indices, v_t_slice)\n     # theta_t = theta - lr / (1 - beta1^t) * m_t / u_t\n     var_slice = -lr_t / (1 - beta1_power) * (m_t_slice /\n                                              (v_t_slice + epsilon_t))\n     with ops.control_dependencies([var_slice]):\n-      var_update = scatter_add(var, indices, var_slice)\n+      var_update = scatter_op_wrapper.add(var, indices, var_slice)\n     return control_flow_ops.group(*[var_update, m_t, v_t])\n \n   def _apply_sparse(self, grad, var):\n     return self._apply_sparse_shared(\n         grad.values, var, grad.indices,\n-        lambda x, i, v: state_ops.scatter_add(  # pylint: disable=g-long-lambda\n-            x, i, v, use_locking=self._use_locking),\n-        lambda x, i, v: state_ops.scatter_update(  # pylint: disable=g-long-lambda\n-            x, i, v, use_locking=self._use_locking))\n-\n-  def _resource_scatter_update(self, x, i, v):\n-    with ops.control_dependencies(\n-        [resource_variable_ops.resource_scatter_update(\n-            x.handle, i, v)]):\n-      return x.value()\n+        adam.AdamOptimizer._ScatterOpWrapper(self._use_locking))", "path": "tensorflow/contrib/opt/python/training/adamax.py", "position": null, "original_position": 44, "commit_id": "d37204edfaad3c7cbd361687422d40e2b9bb4d87", "original_commit_id": "df26537ea43493a086f279a5ae8262dc79d03f20", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "body": "Add a pylint annotation about the protected access use", "created_at": "2018-09-27T16:33:52Z", "updated_at": "2018-10-06T03:21:52Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22533#discussion_r220993825", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22533", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/220993825"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22533#discussion_r220993825"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22533"}}, "body_html": "<p>Add a pylint annotation about the protected access use</p>", "body_text": "Add a pylint annotation about the protected access use"}