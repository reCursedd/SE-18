{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/123560490", "pull_request_review_id": 45776897, "id": 123560490, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzU2MDQ5MA==", "diff_hunk": "@@ -97,6 +99,46 @@ public Output output(int idx) {\n     return new Output(this, idx);\n   }\n \n+  @Override\n+  public int hashCode() {\n+    Graph.Reference r = graph.ref();\n+    try {\n+      // xor the first and last 32 bits of the underlying 64-bit pointer value.\n+      return (int) (unsafeNativeHandle ^ (unsafeNativeHandle >>> 32));", "path": "tensorflow/java/src/main/java/org/tensorflow/Operation.java", "position": null, "original_position": 48, "commit_id": "b43a96b1b611206a6c743892c9d25c515771a416", "original_commit_id": "2e4e4263be8ae371f066078cb7e957a33af39ab8", "user": {"login": "kbsriram", "id": 1495065, "node_id": "MDQ6VXNlcjE0OTUwNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1495065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbsriram", "html_url": "https://github.com/kbsriram", "followers_url": "https://api.github.com/users/kbsriram/followers", "following_url": "https://api.github.com/users/kbsriram/following{/other_user}", "gists_url": "https://api.github.com/users/kbsriram/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbsriram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbsriram/subscriptions", "organizations_url": "https://api.github.com/users/kbsriram/orgs", "repos_url": "https://api.github.com/users/kbsriram/repos", "events_url": "https://api.github.com/users/kbsriram/events{/privacy}", "received_events_url": "https://api.github.com/users/kbsriram/received_events", "type": "User", "site_admin": false}, "body": "This works too - just two heads-up:\r\n- A new object is created each time .hashCode() is called.\r\n- .equals() can throw exceptions when the underlying graph is deleted, but .hashCode() will never throw exceptions - pragmatically don't see any issues here other than exactly when adding/fetching items from a cache/collection with stale objects trigger exceptions.", "created_at": "2017-06-22T16:33:32Z", "updated_at": "2017-06-22T18:55:48Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10849#discussion_r123560490", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10849", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/123560490"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10849#discussion_r123560490"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10849"}}, "body_html": "<p>This works too - just two heads-up:</p>\n<ul>\n<li>A new object is created each time .hashCode() is called.</li>\n<li>.equals() can throw exceptions when the underlying graph is deleted, but .hashCode() will never throw exceptions - pragmatically don't see any issues here other than exactly when adding/fetching items from a cache/collection with stale objects trigger exceptions.</li>\n</ul>", "body_text": "This works too - just two heads-up:\n\nA new object is created each time .hashCode() is called.\n.equals() can throw exceptions when the underlying graph is deleted, but .hashCode() will never throw exceptions - pragmatically don't see any issues here other than exactly when adding/fetching items from a cache/collection with stale objects trigger exceptions.", "in_reply_to_id": 123535105}