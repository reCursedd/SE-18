{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/123541163", "pull_request_review_id": 45746729, "id": 123541163, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzU0MTE2Mw==", "diff_hunk": "@@ -46,6 +52,96 @@ public void outputListLengthFailsOnInvalidName() {\n   }\n \n   @Test\n+  public void operationEquality() {\n+    Operation op1;\n+    try (Graph g = new Graph()) {\n+      op1 = TestUtil.constant(g, \"op1\", 1).op();\n+      Operation op2 = TestUtil.constant(g, \"op2\", 2).op();\n+      Operation op3 = new Operation(g, op1.getUnsafeNativeHandle());\n+      Operation op4 = g.operation(\"op1\");\n+      assertEquals(op1, op1);\n+      assertNotEquals(op1, op2);\n+      assertNotSame(op1, op3);\n+      assertEquals(op1, op3);\n+      assertEquals(op1.hashCode(), op3.hashCode());\n+      assertNotSame(op1, op4);\n+      assertNotSame(op3, op4);\n+      assertEquals(op1, op4);\n+      assertEquals(op1.hashCode(), op4.hashCode());\n+      assertEquals(op3, op4);\n+      assertNotEquals(op2, op3);\n+      assertNotEquals(op2, op4);\n+    }\n+    try (Graph g = new Graph()) {\n+      Operation newOp1 = TestUtil.constant(g, \"op1\", 1).op();\n+      assertNotEquals(op1, newOp1);\n+    }\n+  }\n+\n+  @Test\n+  public void operationCollection() {\n+    try (Graph g = new Graph()) {\n+      Operation op1 = TestUtil.constant(g, \"op1\", 1).op();\n+      Operation op2 = TestUtil.constant(g, \"op2\", 2).op();\n+      Operation op3 = new Operation(g, op1.getUnsafeNativeHandle());\n+      Operation op4 = g.operation(\"op1\");\n+      Set<Operation> ops = new HashSet<>();\n+      ops.addAll(Arrays.asList(op1, op2, op3, op4));\n+      assertEquals(2, ops.size());\n+      assertTrue(ops.contains(op1));\n+      assertTrue(ops.contains(op2));\n+      assertTrue(ops.contains(op3));\n+      assertTrue(ops.contains(op4));\n+    }\n+  }\n+\n+  @Test\n+  public void operationToString() {\n+    try (Graph g = new Graph()) {\n+      Operation op = TestUtil.constant(g, \"c\", new int[] {1}).op();\n+      assertEquals(\"<Const 'c'>\", op.toString());\n+    }\n+  }\n+\n+  @Test\n+  public void outputEquality() {\n+    try (Graph g = new Graph()) {\n+      Output output = TestUtil.constant(g, \"c\", 1);\n+      Output output1 = output.op().output(0);\n+      Output output2 = g.operation(\"c\").output(0);\n+      assertNotSame(output, output1);", "path": "tensorflow/java/src/test/java/org/tensorflow/OperationTest.java", "position": null, "original_position": 76, "commit_id": "b43a96b1b611206a6c743892c9d25c515771a416", "original_commit_id": "2e4e4263be8ae371f066078cb7e957a33af39ab8", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "I understand why you have this assertion, but this isn't something we want to promise, right? As in, it should be fine if `Operation.output(index)` were to cache and return the same objects?\r\n\r\nI'd suggest that the assertions be for behavior that we want to guarantee from the public API and not be testing the details of the specific implementation (https://testing.googleblog.com/2013/08/testing-on-toilet-test-behavior-not.html). The same goes for the `operationEquality` test, where it should be fine for `Graph.operation()` to return the same `Operation` object when possible.", "created_at": "2017-06-22T15:21:46Z", "updated_at": "2017-06-22T18:55:48Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10849#discussion_r123541163", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10849", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/123541163"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10849#discussion_r123541163"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10849"}}, "body_html": "<p>I understand why you have this assertion, but this isn't something we want to promise, right? As in, it should be fine if <code>Operation.output(index)</code> were to cache and return the same objects?</p>\n<p>I'd suggest that the assertions be for behavior that we want to guarantee from the public API and not be testing the details of the specific implementation (<a href=\"https://testing.googleblog.com/2013/08/testing-on-toilet-test-behavior-not.html\" rel=\"nofollow\">https://testing.googleblog.com/2013/08/testing-on-toilet-test-behavior-not.html</a>). The same goes for the <code>operationEquality</code> test, where it should be fine for <code>Graph.operation()</code> to return the same <code>Operation</code> object when possible.</p>", "body_text": "I understand why you have this assertion, but this isn't something we want to promise, right? As in, it should be fine if Operation.output(index) were to cache and return the same objects?\nI'd suggest that the assertions be for behavior that we want to guarantee from the public API and not be testing the details of the specific implementation (https://testing.googleblog.com/2013/08/testing-on-toilet-test-behavior-not.html). The same goes for the operationEquality test, where it should be fine for Graph.operation() to return the same Operation object when possible."}