{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15724", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15724/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15724/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15724/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15724", "id": 285180663, "node_id": "MDU6SXNzdWUyODUxODA2NjM=", "number": 15724, "title": "How to register all kernels to Android lib", "user": {"login": "xumengwei", "id": 23546158, "node_id": "MDQ6VXNlcjIzNTQ2MTU4", "avatar_url": "https://avatars3.githubusercontent.com/u/23546158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xumengwei", "html_url": "https://github.com/xumengwei", "followers_url": "https://api.github.com/users/xumengwei/followers", "following_url": "https://api.github.com/users/xumengwei/following{/other_user}", "gists_url": "https://api.github.com/users/xumengwei/gists{/gist_id}", "starred_url": "https://api.github.com/users/xumengwei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xumengwei/subscriptions", "organizations_url": "https://api.github.com/users/xumengwei/orgs", "repos_url": "https://api.github.com/users/xumengwei/repos", "events_url": "https://api.github.com/users/xumengwei/events{/privacy}", "received_events_url": "https://api.github.com/users/xumengwei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-30T03:16:38Z", "updated_at": "2018-01-03T01:57:02Z", "closed_at": "2018-01-03T01:57:02Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: MacOS</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.0.1</li>\n<li><strong>Python version</strong>: 3.4</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.4</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>I am trying to compile a Android lib which can load a MetaGraph into a session as <a href=\"https://stackoverflow.com/questions/35508866/tensorflow-different-ways-to-export-and-run-graph-in-c/43639305#43639305\" rel=\"nofollow\">this link</a> specifies. I first extracts a GraphDef from this MetaGraph and uses this GraphDef to generate <code>ops_to_register.h</code>. Then I compile the lib as</p>\n<p><code>bazel build my_model/test:test_lib --copt=-DSELECTIVE_REGISTRATION  --crosstool_top=//external:android/crosstool    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain    --cpu=armeabi-v7a</code></p>\n<p>However when I trying to run the test_lib, it complains some kernels are not registered. Then I brutally adds all kernels to be registered as</p>\n<p><code>#define SHOULD_REGISTER_OP_KERNEL(clz) true</code></p>\n<p>However, it still complains</p>\n<pre><code>Error creating graph: Invalid argument: No OpKernel was registered to support Op 'Const' with these attrs.  Registered devices: [CPU], Registered kernels:\n  &lt;no registered kernels&gt;\n\n\t [[Node: save/RestoreV2_8/shape_and_slices = Const[_output_shapes=[[1]], dtype=DT_STRING, value=Tensor&lt;type: string shape: [1] values: &gt;]()]]\n</code></pre>\n<p>How can I solve this by adding this Const kernel or simply registering all kernels?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.0.1\nPython version: 3.4\nBazel version (if compiling from source): 0.4\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nI am trying to compile a Android lib which can load a MetaGraph into a session as this link specifies. I first extracts a GraphDef from this MetaGraph and uses this GraphDef to generate ops_to_register.h. Then I compile the lib as\nbazel build my_model/test:test_lib --copt=-DSELECTIVE_REGISTRATION  --crosstool_top=//external:android/crosstool    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain    --cpu=armeabi-v7a\nHowever when I trying to run the test_lib, it complains some kernels are not registered. Then I brutally adds all kernels to be registered as\n#define SHOULD_REGISTER_OP_KERNEL(clz) true\nHowever, it still complains\nError creating graph: Invalid argument: No OpKernel was registered to support Op 'Const' with these attrs.  Registered devices: [CPU], Registered kernels:\n  <no registered kernels>\n\n\t [[Node: save/RestoreV2_8/shape_and_slices = Const[_output_shapes=[[1]], dtype=DT_STRING, value=Tensor<type: string shape: [1] values: >]()]]\n\nHow can I solve this by adding this Const kernel or simply registering all kernels?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: MacOS\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.0.1\r\n- **Python version**: 3.4\r\n- **Bazel version (if compiling from source)**: 0.4\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\nI am trying to compile a Android lib which can load a MetaGraph into a session as [this link](https://stackoverflow.com/questions/35508866/tensorflow-different-ways-to-export-and-run-graph-in-c/43639305#43639305) specifies. I first extracts a GraphDef from this MetaGraph and uses this GraphDef to generate `ops_to_register.h`. Then I compile the lib as \r\n\r\n`bazel build my_model/test:test_lib --copt=-DSELECTIVE_REGISTRATION  --crosstool_top=//external:android/crosstool    --host_crosstool_top=@bazel_tools//tools/cpp:toolchain    --cpu=armeabi-v7a`\r\n\r\nHowever when I trying to run the test_lib, it complains some kernels are not registered. Then I brutally adds all kernels to be registered as\r\n\r\n`#define SHOULD_REGISTER_OP_KERNEL(clz) true`\r\n\r\nHowever, it still complains\r\n\r\n```\r\nError creating graph: Invalid argument: No OpKernel was registered to support Op 'Const' with these attrs.  Registered devices: [CPU], Registered kernels:\r\n  <no registered kernels>\r\n\r\n\t [[Node: save/RestoreV2_8/shape_and_slices = Const[_output_shapes=[[1]], dtype=DT_STRING, value=Tensor<type: string shape: [1] values: >]()]]\r\n```\r\n\r\nHow can I solve this by adding this Const kernel or simply registering all kernels?"}