{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/271144583", "html_url": "https://github.com/tensorflow/tensorflow/pull/6615#issuecomment-271144583", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6615", "id": 271144583, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTE0NDU4Mw==", "user": {"login": "DavidNorman", "id": 606831, "node_id": "MDQ6VXNlcjYwNjgzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/606831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidNorman", "html_url": "https://github.com/DavidNorman", "followers_url": "https://api.github.com/users/DavidNorman/followers", "following_url": "https://api.github.com/users/DavidNorman/following{/other_user}", "gists_url": "https://api.github.com/users/DavidNorman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidNorman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidNorman/subscriptions", "organizations_url": "https://api.github.com/users/DavidNorman/orgs", "repos_url": "https://api.github.com/users/DavidNorman/repos", "events_url": "https://api.github.com/users/DavidNorman/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidNorman/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-08T11:14:02Z", "updated_at": "2017-01-08T11:14:02Z", "author_association": "CONTRIBUTOR", "body_html": "<p>indeed it did seem like the check for existing device placement was a no-op, but i was expecting there to be an outside case that I wasn't aware of.</p>\n<p>it seems that the generator placement doesn't follow the explicit placement though.   the explicit placement comes in through the GetDevicesForNode.  In the case of a generator node, even if there is an explicit placement, the assigned node is determined by the location of the consumer.   This would have applied when a generator node had only one consumer, too.</p>\n<p>I could generate a simple python test that demonstrates the problem, if you would like.</p>", "body_text": "indeed it did seem like the check for existing device placement was a no-op, but i was expecting there to be an outside case that I wasn't aware of.\nit seems that the generator placement doesn't follow the explicit placement though.   the explicit placement comes in through the GetDevicesForNode.  In the case of a generator node, even if there is an explicit placement, the assigned node is determined by the location of the consumer.   This would have applied when a generator node had only one consumer, too.\nI could generate a simple python test that demonstrates the problem, if you would like.", "body": "indeed it did seem like the check for existing device placement was a no-op, but i was expecting there to be an outside case that I wasn't aware of.\r\n\r\nit seems that the generator placement doesn't follow the explicit placement though.   the explicit placement comes in through the GetDevicesForNode.  In the case of a generator node, even if there is an explicit placement, the assigned node is determined by the location of the consumer.   This would have applied when a generator node had only one consumer, too.\r\n\r\nI could generate a simple python test that demonstrates the problem, if you would like.\r\n"}