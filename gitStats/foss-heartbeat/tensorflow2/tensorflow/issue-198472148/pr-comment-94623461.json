{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/94623461", "pull_request_review_id": 15153621, "id": 94623461, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NjIzNDYx", "diff_hunk": "@@ -1138,5 +1138,98 @@ TEST_F(SimplePlacerTest, TestUnsatisfiableConstraintWithReferenceConnections) {\n                   .contains(\"Cannot colocate nodes 'var' and 'assign'\"));\n }\n \n+// Test that a generator node follows its consumers (where there are several\n+// consumer nodes on the same devices).\n+TEST_F(SimplePlacerTest, TestGeneratorNodeFollowsConsumerNode) {\n+  Graph g(OpRegistry::Global());\n+  {  // Scope for temporary variables used to construct g.\n+    GraphDefBuilder b(GraphDefBuilder::kFailImmediately);\n+\n+    // A variable is only on CPU\n+    Node* var1_cpu = ops::SourceOp(\"VariableCPU\", b.opts().WithName(\"var1_cpu\"));\n+    Node* var2_cpu = ops::SourceOp(\"VariableCPU\", b.opts().WithName(\"var2_cpu\"));\n+\n+    // The constant to be assigned can be on both GPU or CPU.\n+    //\n+    // Because of the heuristic, it gets placed on CPU to avoid a\n+    // copy.\n+    Node* input = ops::SourceOp(\"TestCPUGPUOutput\", b.opts().WithName(\"in\"));\n+\n+    // The assigns are bound to CPU by the reference edge.\n+    ops::BinaryOp(\"TestAssign\", var1_cpu, input, b.opts().WithName(\"assign1\"));\n+    ops::BinaryOp(\"TestAssign\", var2_cpu, input, b.opts().WithName(\"assign2\"));\n+\n+    TF_EXPECT_OK(BuildGraph(b, &g));\n+  }\n+\n+  TF_EXPECT_OK(Place(&g));\n+  EXPECT_COLOCATED(g, \"var1_cpu\", \"in\");\n+  EXPECT_COLOCATED(g, \"assign1\", \"in\");\n+  EXPECT_COLOCATED(g, \"var2_cpu\", \"in\");\n+  EXPECT_COLOCATED(g, \"assign2\", \"in\");\n+}\n+\n+// Test that a generator node does not follow its consumers (where there are\n+// several consumers on different devices).\n+TEST_F(SimplePlacerTest, TestGeneratorNodeDoesntFollowNonColocatedConsumers) {\n+  Graph g(OpRegistry::Global());\n+  {  // Scope for temporary variables used to construct g.\n+    GraphDefBuilder b(GraphDefBuilder::kFailImmediately);\n+\n+    // A variable is only on CPU\n+    Node* var1_cpu = ops::SourceOp(\"VariableCPU\", b.opts().WithName(\"var1_cpu\"));\n+    Node* var2_cpu = ops::SourceOp(\"VariableCPU\", b.opts().WithName(\"var2_cpu\"));\n+\n+    // The constant to be assigned can be on both GPU or CPU.\n+    //\n+    // Because of the heuristic, it ought to be on the GPU (cannot be\n+    // co-located with both consumers, so goes to the 'standard' place)\n+    Node* input = ops::SourceOp(\"TestCPUGPUOutput\", b.opts().WithName(\"in\"));\n+\n+    // The assigns are bound to CPU by the reference edge.\n+    ops::BinaryOp(\"TestAssign\", var1_cpu, input, b.opts().WithName(\"assign1\"));\n+    ops::BinaryOp(\"TestAssign\", var2_cpu, input, b.opts().WithName(\"assign2\"));\n+\n+    TF_EXPECT_OK(BuildGraph(b, &g));\n+\n+    GetNodeByName(g, \"var1_cpu\")\n+    ->set_assigned_device_name(\"/job:a/replica:0/task:0/cpu:1\");", "path": "tensorflow/core/common_runtime/simple_placer_test.cc", "position": null, "original_position": 59, "commit_id": "414b29ae71d241a9074b18f1f6b4ad14c998a5eb", "original_commit_id": "314957c888cddb183c12b41927b76aed9f26f96b", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "can you run clang-format --style=google on this file to get consistency in spacing?", "created_at": "2017-01-04T17:10:21Z", "updated_at": "2017-01-12T09:57:37Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/6615#discussion_r94623461", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6615", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/94623461"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/6615#discussion_r94623461"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6615"}}, "body_html": "<p>can you run clang-format --style=google on this file to get consistency in spacing?</p>", "body_text": "can you run clang-format --style=google on this file to get consistency in spacing?"}