{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/94766672", "pull_request_review_id": 15302392, "id": 94766672, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NzY2Njcy", "diff_hunk": "@@ -785,9 +785,23 @@ Status SimplePlacer::Run() {\n \n     // Heuristic A application.\n     if (IsGeneratorNode(node)) {\n-      const Node* output = (*node->out_edges().begin())->dst();\n+      EdgeSet::const_iterator it(node->out_edges().begin());\n+\n+      const Node* output = (*it)->dst();\n       const string& output_device_name = output->assigned_device_name();\n-      if (CanAssignToDevice(output_device_name, devices)) {\n+      it++;\n+\n+      bool all_consumers_on_same_device(true);\n+      while (it != node->out_edges().end()) {\n+        if ((*it)->dst()->assigned_device_name() != output_device_name) {\n+          all_consumers_on_same_device = false;\n+          break;\n+        }\n+        it++;\n+      }\n+", "path": "tensorflow/core/common_runtime/simple_placer.cc", "position": null, "original_position": 42, "commit_id": "414b29ae71d241a9074b18f1f6b4ad14c998a5eb", "original_commit_id": "314957c888cddb183c12b41927b76aed9f26f96b", "user": {"login": "DavidNorman", "id": 606831, "node_id": "MDQ6VXNlcjYwNjgzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/606831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidNorman", "html_url": "https://github.com/DavidNorman", "followers_url": "https://api.github.com/users/DavidNorman/followers", "following_url": "https://api.github.com/users/DavidNorman/following{/other_user}", "gists_url": "https://api.github.com/users/DavidNorman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidNorman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidNorman/subscriptions", "organizations_url": "https://api.github.com/users/DavidNorman/orgs", "repos_url": "https://api.github.com/users/DavidNorman/repos", "events_url": "https://api.github.com/users/DavidNorman/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidNorman/received_events", "type": "User", "site_admin": false}, "body": "My code pulls the name from the 1st iterator value, then tests it against all of the others.  Your code captures 'output_device_name', which is the name from the 1st iterator value.  This would need to be read in your version of the code too.\r\n\r\nWhat we need is a:\r\n\r\nstd::when_calling_with_elements_from_a_collection_every_return_value_of_a_functor_is_the_same()\r\n\r\nIt might exist.  My in-depth knowledge of the std c++ library is limited to pre 2004.\r\n\r\nnevertheless - i will replace the while(.....) part of my code with the std::all_of(), since I can still start with the second element.\r\n\r\n```\r\nbool same_device = std::all_of(it, node->out_edges().end(), \r\n                                   [output_device_name](const Edge* e) { \r\n                                       return e->dst()->assigned_device_name() == output_device_name;\r\n                                   }) \r\n```", "created_at": "2017-01-05T13:26:24Z", "updated_at": "2017-01-12T09:57:37Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/6615#discussion_r94766672", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6615", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/94766672"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/6615#discussion_r94766672"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/6615"}}, "body_html": "<p>My code pulls the name from the 1st iterator value, then tests it against all of the others.  Your code captures 'output_device_name', which is the name from the 1st iterator value.  This would need to be read in your version of the code too.</p>\n<p>What we need is a:</p>\n<p>std::when_calling_with_elements_from_a_collection_every_return_value_of_a_functor_is_the_same()</p>\n<p>It might exist.  My in-depth knowledge of the std c++ library is limited to pre 2004.</p>\n<p>nevertheless - i will replace the while(.....) part of my code with the std::all_of(), since I can still start with the second element.</p>\n<pre><code>bool same_device = std::all_of(it, node-&gt;out_edges().end(), \n                                   [output_device_name](const Edge* e) { \n                                       return e-&gt;dst()-&gt;assigned_device_name() == output_device_name;\n                                   }) \n</code></pre>", "body_text": "My code pulls the name from the 1st iterator value, then tests it against all of the others.  Your code captures 'output_device_name', which is the name from the 1st iterator value.  This would need to be read in your version of the code too.\nWhat we need is a:\nstd::when_calling_with_elements_from_a_collection_every_return_value_of_a_functor_is_the_same()\nIt might exist.  My in-depth knowledge of the std c++ library is limited to pre 2004.\nnevertheless - i will replace the while(.....) part of my code with the std::all_of(), since I can still start with the second element.\nbool same_device = std::all_of(it, node->out_edges().end(), \n                                   [output_device_name](const Edge* e) { \n                                       return e->dst()->assigned_device_name() == output_device_name;\n                                   })", "in_reply_to_id": 94623187}