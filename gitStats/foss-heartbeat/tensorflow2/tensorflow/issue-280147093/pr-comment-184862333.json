{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/184862333", "pull_request_review_id": 116146019, "id": 184862333, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDg2MjMzMw==", "diff_hunk": "@@ -0,0 +1,236 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/register_types.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/framework/tensor_util.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/lib/strings/str_util.h\"\n+#include \"tensorflow/core/util/sparse/sparse_tensor.h\"\n+\n+using tensorflow::sparse::SparseTensor;\n+\n+namespace tensorflow {\n+\n+struct ReduceDetails {\n+  // The dimensions to call Reorder() with.\n+  std::vector<int64> reorder_dims;\n+  // The dimensions to call group() with after Reorder().\n+  std::vector<int64> group_by_dims;\n+  // The shape after reduction.\n+  TensorShape reduced_shape;\n+};\n+\n+ReduceDetails SparseTensorReduceHelper(const SparseTensor& sp,\n+                                       gtl::ArraySlice<int32> axes_slice) {\n+  ReduceDetails reduction;\n+\n+  std::vector<int32> reduction_axes(axes_slice.begin(), axes_slice.end());\n+  int ndims = sp.dims();\n+  for (int64 i = 0; i < reduction_axes.size(); ++i) {\n+    reduction_axes[i] = (reduction_axes[i] + ndims) % ndims;\n+  }\n+  std::sort(reduction_axes.begin(), reduction_axes.end());\n+\n+  // (0) Calculate the grouping dimensions:\n+  // group_by_dims == {0, .., NDIMS-1} \\ reduction_axes.\n+  std::vector<int64> perm(ndims);\n+  std::iota(perm.begin(), perm.end(), 0);\n+\n+  // Requires perm and reduction_axes_ be sorted; group_by_dims will be\n+  // sorted as well.\n+  std::set_difference(\n+      perm.begin(), perm.end(), reduction_axes.begin(), reduction_axes.end(),\n+      std::inserter(reduction.group_by_dims, reduction.group_by_dims.begin()));\n+\n+  // Now append the rest of the axes (the complement of group_by_dims_);\n+  // result is used by Reorder().\n+  reduction.reorder_dims = reduction.group_by_dims;\n+  std::set_difference(perm.begin(), perm.end(), reduction.group_by_dims.begin(),\n+                      reduction.group_by_dims.end(),\n+                      std::back_inserter(reduction.reorder_dims));\n+\n+  // (1) Calculate the shape after reduction.\n+  auto sp_shape = sp.shape();\n+  std::vector<int64> out_dim_sizes;\n+  out_dim_sizes = sp.PickDims(reduction.group_by_dims);\n+\n+  reduction.reduced_shape = TensorShape(out_dim_sizes);\n+  return reduction;\n+}\n+\n+std::vector<int64> getRowOfTensor(const Tensor t, const int64 i) {\n+  std::vector<int64> res;\n+  auto t_values = t.matrix<int64>();\n+  for (int64 j = 0; j < t.shape().dim_size(1); j++) {\n+    res.push_back(t_values(i, j));\n+  }\n+  return res;\n+}\n+\n+// This operator is used for tiling a to a new SparseTensor like b\n+template <typename T>\n+class SparseTileLikeOp : public OpKernel {\n+ public:\n+  explicit SparseTileLikeOp(OpKernelConstruction* context)\n+      : OpKernel(context) {}\n+\n+  void Compute(OpKernelContext* ctx) override {\n+    // define tensors\n+    const Tensor *a_indices_t, *a_values_t, *a_shape_t, *b_indices_t,\n+        *b_values_t, *b_shape_t, *axes_t;\n+\n+    OP_REQUIRES_OK(ctx, ctx->input(\"a_input_indices\", &a_indices_t));\n+    OP_REQUIRES_OK(ctx, ctx->input(\"a_input_values\", &a_values_t));\n+    OP_REQUIRES_OK(ctx, ctx->input(\"a_input_shape\", &a_shape_t));\n+    OP_REQUIRES_OK(ctx, ctx->input(\"b_input_indices\", &b_indices_t));\n+    OP_REQUIRES_OK(ctx, ctx->input(\"b_input_values\", &b_values_t));\n+    OP_REQUIRES_OK(ctx, ctx->input(\"b_input_shape\", &b_shape_t));\n+    OP_REQUIRES_OK(ctx, ctx->input(\"axes\", &axes_t));\n+\n+    ValidateInput(ctx, a_indices_t, a_values_t, a_shape_t, b_indices_t,\n+                  b_values_t, b_shape_t, axes_t);\n+\n+    // set values for out_values", "path": "tensorflow/contrib/layers/kernels/sparse_tile_like_kernel.cc", "position": null, "original_position": 108, "commit_id": "65961683050079b9bb8d2c6a66120dd9d476cc07", "original_commit_id": "d3dbb9cc1c68e6c1c16a2a038ea91fad4cadd4f2", "user": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "body": "Here and everywhere: capitalize and punctuate comments.", "created_at": "2018-04-28T18:55:45Z", "updated_at": "2018-06-12T08:59:52Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/15184#discussion_r184862333", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15184", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/184862333"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/15184#discussion_r184862333"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15184"}}, "body_html": "<p>Here and everywhere: capitalize and punctuate comments.</p>", "body_text": "Here and everywhere: capitalize and punctuate comments."}