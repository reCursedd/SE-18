{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/240592991", "html_url": "https://github.com/tensorflow/tensorflow/issues/3738#issuecomment-240592991", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3738", "id": 240592991, "node_id": "MDEyOklzc3VlQ29tbWVudDI0MDU5Mjk5MQ==", "user": {"login": "msevrens", "id": 1441846, "node_id": "MDQ6VXNlcjE0NDE4NDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1441846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msevrens", "html_url": "https://github.com/msevrens", "followers_url": "https://api.github.com/users/msevrens/followers", "following_url": "https://api.github.com/users/msevrens/following{/other_user}", "gists_url": "https://api.github.com/users/msevrens/gists{/gist_id}", "starred_url": "https://api.github.com/users/msevrens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msevrens/subscriptions", "organizations_url": "https://api.github.com/users/msevrens/orgs", "repos_url": "https://api.github.com/users/msevrens/repos", "events_url": "https://api.github.com/users/msevrens/events{/privacy}", "received_events_url": "https://api.github.com/users/msevrens/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-18T00:47:58Z", "updated_at": "2016-08-18T00:47:58Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a><br>\nI don't think this really solves my fundamental issue. If one token in the batch to the inner LSTM has a length of 100 and the rest have a length of 3 there will always be a huge performance deficit if they are batched. Either the tokens are batched together, or they're looped over. The output of this is fed into a higher LSTM which only has a batch size of 1.</p>\n<p>The batching approach is unreasonably slow when one token is far longer than the rest, the nested loop approach is throwing an obscure error.</p>", "body_text": "@ebrevdo\nI don't think this really solves my fundamental issue. If one token in the batch to the inner LSTM has a length of 100 and the rest have a length of 3 there will always be a huge performance deficit if they are batched. Either the tokens are batched together, or they're looped over. The output of this is fed into a higher LSTM which only has a batch size of 1.\nThe batching approach is unreasonably slow when one token is far longer than the rest, the nested loop approach is throwing an obscure error.", "body": "@ebrevdo \nI don't think this really solves my fundamental issue. If one token in the batch to the inner LSTM has a length of 100 and the rest have a length of 3 there will always be a huge performance deficit if they are batched. Either the tokens are batched together, or they're looped over. The output of this is fed into a higher LSTM which only has a batch size of 1.\n\nThe batching approach is unreasonably slow when one token is far longer than the rest, the nested loop approach is throwing an obscure error.\n"}