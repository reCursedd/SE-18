{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23395", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23395/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23395/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23395/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23395", "id": 375816554, "node_id": "MDU6SXNzdWUzNzU4MTY1NTQ=", "number": 23395, "title": "deploying the Tensorflow model in Python", "user": {"login": "JafferWilson", "id": 13446197, "node_id": "MDQ6VXNlcjEzNDQ2MTk3", "avatar_url": "https://avatars3.githubusercontent.com/u/13446197?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JafferWilson", "html_url": "https://github.com/JafferWilson", "followers_url": "https://api.github.com/users/JafferWilson/followers", "following_url": "https://api.github.com/users/JafferWilson/following{/other_user}", "gists_url": "https://api.github.com/users/JafferWilson/gists{/gist_id}", "starred_url": "https://api.github.com/users/JafferWilson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JafferWilson/subscriptions", "organizations_url": "https://api.github.com/users/JafferWilson/orgs", "repos_url": "https://api.github.com/users/JafferWilson/repos", "events_url": "https://api.github.com/users/JafferWilson/events{/privacy}", "received_events_url": "https://api.github.com/users/JafferWilson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "harshini-gadige", "id": 42781361, "node_id": "MDQ6VXNlcjQyNzgxMzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/42781361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshini-gadige", "html_url": "https://github.com/harshini-gadige", "followers_url": "https://api.github.com/users/harshini-gadige/followers", "following_url": "https://api.github.com/users/harshini-gadige/following{/other_user}", "gists_url": "https://api.github.com/users/harshini-gadige/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshini-gadige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshini-gadige/subscriptions", "organizations_url": "https://api.github.com/users/harshini-gadige/orgs", "repos_url": "https://api.github.com/users/harshini-gadige/repos", "events_url": "https://api.github.com/users/harshini-gadige/events{/privacy}", "received_events_url": "https://api.github.com/users/harshini-gadige/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "harshini-gadige", "id": 42781361, "node_id": "MDQ6VXNlcjQyNzgxMzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/42781361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshini-gadige", "html_url": "https://github.com/harshini-gadige", "followers_url": "https://api.github.com/users/harshini-gadige/followers", "following_url": "https://api.github.com/users/harshini-gadige/following{/other_user}", "gists_url": "https://api.github.com/users/harshini-gadige/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshini-gadige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshini-gadige/subscriptions", "organizations_url": "https://api.github.com/users/harshini-gadige/orgs", "repos_url": "https://api.github.com/users/harshini-gadige/repos", "events_url": "https://api.github.com/users/harshini-gadige/events{/privacy}", "received_events_url": "https://api.github.com/users/harshini-gadige/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-10-31T06:25:59Z", "updated_at": "2018-11-20T18:28:54Z", "closed_at": "2018-11-20T18:28:54Z", "author_association": "NONE", "body_html": "<p>While I am training everything is working fine but when I move on for a realtime forecast or prediction, the output what I received flunked. I do not know why is this happening. I used the reference of teh code from here: <a href=\"https://www.kaggle.com/raoulma/ny-stock-price-prediction-rnn-lstm-gru/notebook\" rel=\"nofollow\">https://www.kaggle.com/raoulma/ny-stock-price-prediction-rnn-lstm-gru/notebook</a> And tried to implement or deploy using the same code with few changes.</p>\n<p>See the following code:</p>\n<pre><code>import numpy as np\nimport pandas as pd\nimport sklearn\nimport sklearn.preprocessing\nimport datetime\nimport os\nimport tensorflow as tf\n\ndf = pd.read_csv(\"Realtime_Values.csv\", index_col = 0)\ndf.info()\ndef load_data(stock,seq_len):\n\n    data_raw = stock.as_matrix() # convert to numpy array\n    data = []\n\n    for index in range(len(data_raw) - seq_len): \n        data.append(data_raw[index: index + seq_len])\n    #print(len(data))\n    data = np.array(data);\n\n    x_forecast = data[:,:-1,:]\n    return x_forecast\n\ndef normalize_data(df):\n    cols = list(df.columns.values)\n    min_max_scaler = sklearn.preprocessing.MinMaxScaler()\n    df = pd.DataFrame(min_max_scaler.fit_transform(df.values))\n    df.columns = cols\n    return df\nmodel_path =\"modelsOHLC\"\nseq_len = 9\n# parameters\nn_steps = seq_len-1 \nn_inputs = 4\nn_neurons = 100 \nn_outputs = 4\nn_layers = 4\nlearning_rate = 0.01\nbatch_size = 10\nn_epochs = 1000\ntf.reset_default_graph()\n\nX = tf.placeholder(tf.float32, [None, n_steps, n_inputs])\ny = tf.placeholder(tf.float32, [None, n_outputs])\nlayers = [tf.contrib.rnn.BasicRNNCell(num_units=n_neurons, activation=tf.nn.elu)\n          for layer in range(n_layers)]\nmulti_layer_cell = tf.contrib.rnn.MultiRNNCell(layers)\nrnn_outputs, states = tf.nn.dynamic_rnn(multi_layer_cell, X, dtype=tf.float32)\n\nstacked_rnn_outputs = tf.reshape(rnn_outputs, [-1, n_neurons]) \nstacked_outputs = tf.layers.dense(stacked_rnn_outputs, n_outputs)\noutputs = tf.reshape(stacked_outputs, [-1, n_steps, n_outputs])\noutputs = outputs[:,n_steps-1,:] # keep only last output of sequence\n\nloss = tf.reduce_mean(tf.square(outputs - y)) # loss function = mean squared error \noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate) \ntraining_op = optimizer.minimize(loss)\nsaver = tf.train.Saver()\nsess  =tf.Session()\nsess.run(tf.global_variables_initializer())    \nif(tf.train.checkpoint_exists(tf.train.latest_checkpoint(model_path))):\n        saver.restore(sess, tf.train.latest_checkpoint(model_path))\ndf = normalize_data(df)\nx_forecast = load_data(df,seq_len)\ny_forecast_pred = sess.run(outputs, feed_dict={X: x_forecast})\nprint(y_forecast_pred)\n</code></pre>\n<p>I am getting weird output values and are not expected. The training and testing worked well. But when it came to real time scenario, everything was gone and I thought that need to train again. Why my saved models are not working as expected? This is truely a tensorflow bug.</p>\n<p><strong>System information</strong></p>\n<ul>\n<li>\n<p>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No</p>\n</li>\n<li>\n<p>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10</p>\n</li>\n<li>\n<p>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: I dont know that. I am using desktop PC.</p>\n</li>\n<li>\n<p>TensorFlow installed from (source or binary): pip</p>\n</li>\n<li>\n<p>TensorFlow version (use command below): b'v1.10.0-rc1-19-g656e7a2b34' 1.10.0</p>\n</li>\n<li>\n<p>Python version: Python 3.5</p>\n</li>\n<li>\n<p>Bazel version (if compiling from source): ?</p>\n</li>\n<li>\n<p>GCC/Compiler version (if compiling from source): ?</p>\n</li>\n<li>\n<p>CUDA/cuDNN version: 9.0</p>\n</li>\n<li>\n<p>GPU model and memory: Not available right now.</p>\n</li>\n</ul>", "body_text": "While I am training everything is working fine but when I move on for a realtime forecast or prediction, the output what I received flunked. I do not know why is this happening. I used the reference of teh code from here: https://www.kaggle.com/raoulma/ny-stock-price-prediction-rnn-lstm-gru/notebook And tried to implement or deploy using the same code with few changes.\nSee the following code:\nimport numpy as np\nimport pandas as pd\nimport sklearn\nimport sklearn.preprocessing\nimport datetime\nimport os\nimport tensorflow as tf\n\ndf = pd.read_csv(\"Realtime_Values.csv\", index_col = 0)\ndf.info()\ndef load_data(stock,seq_len):\n\n    data_raw = stock.as_matrix() # convert to numpy array\n    data = []\n\n    for index in range(len(data_raw) - seq_len): \n        data.append(data_raw[index: index + seq_len])\n    #print(len(data))\n    data = np.array(data);\n\n    x_forecast = data[:,:-1,:]\n    return x_forecast\n\ndef normalize_data(df):\n    cols = list(df.columns.values)\n    min_max_scaler = sklearn.preprocessing.MinMaxScaler()\n    df = pd.DataFrame(min_max_scaler.fit_transform(df.values))\n    df.columns = cols\n    return df\nmodel_path =\"modelsOHLC\"\nseq_len = 9\n# parameters\nn_steps = seq_len-1 \nn_inputs = 4\nn_neurons = 100 \nn_outputs = 4\nn_layers = 4\nlearning_rate = 0.01\nbatch_size = 10\nn_epochs = 1000\ntf.reset_default_graph()\n\nX = tf.placeholder(tf.float32, [None, n_steps, n_inputs])\ny = tf.placeholder(tf.float32, [None, n_outputs])\nlayers = [tf.contrib.rnn.BasicRNNCell(num_units=n_neurons, activation=tf.nn.elu)\n          for layer in range(n_layers)]\nmulti_layer_cell = tf.contrib.rnn.MultiRNNCell(layers)\nrnn_outputs, states = tf.nn.dynamic_rnn(multi_layer_cell, X, dtype=tf.float32)\n\nstacked_rnn_outputs = tf.reshape(rnn_outputs, [-1, n_neurons]) \nstacked_outputs = tf.layers.dense(stacked_rnn_outputs, n_outputs)\noutputs = tf.reshape(stacked_outputs, [-1, n_steps, n_outputs])\noutputs = outputs[:,n_steps-1,:] # keep only last output of sequence\n\nloss = tf.reduce_mean(tf.square(outputs - y)) # loss function = mean squared error \noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate) \ntraining_op = optimizer.minimize(loss)\nsaver = tf.train.Saver()\nsess  =tf.Session()\nsess.run(tf.global_variables_initializer())    \nif(tf.train.checkpoint_exists(tf.train.latest_checkpoint(model_path))):\n        saver.restore(sess, tf.train.latest_checkpoint(model_path))\ndf = normalize_data(df)\nx_forecast = load_data(df,seq_len)\ny_forecast_pred = sess.run(outputs, feed_dict={X: x_forecast})\nprint(y_forecast_pred)\n\nI am getting weird output values and are not expected. The training and testing worked well. But when it came to real time scenario, everything was gone and I thought that need to train again. Why my saved models are not working as expected? This is truely a tensorflow bug.\nSystem information\n\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\n\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\n\n\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: I dont know that. I am using desktop PC.\n\n\nTensorFlow installed from (source or binary): pip\n\n\nTensorFlow version (use command below): b'v1.10.0-rc1-19-g656e7a2b34' 1.10.0\n\n\nPython version: Python 3.5\n\n\nBazel version (if compiling from source): ?\n\n\nGCC/Compiler version (if compiling from source): ?\n\n\nCUDA/cuDNN version: 9.0\n\n\nGPU model and memory: Not available right now.", "body": " While I am training everything is working fine but when I move on for a realtime forecast or prediction, the output what I received flunked. I do not know why is this happening. I used the reference of teh code from here: https://www.kaggle.com/raoulma/ny-stock-price-prediction-rnn-lstm-gru/notebook And tried to implement or deploy using the same code with few changes.\r\n\r\nSee the following code:\r\n```\r\nimport numpy as np\r\nimport pandas as pd\r\nimport sklearn\r\nimport sklearn.preprocessing\r\nimport datetime\r\nimport os\r\nimport tensorflow as tf\r\n\r\ndf = pd.read_csv(\"Realtime_Values.csv\", index_col = 0)\r\ndf.info()\r\ndef load_data(stock,seq_len):\r\n\r\n    data_raw = stock.as_matrix() # convert to numpy array\r\n    data = []\r\n\r\n    for index in range(len(data_raw) - seq_len): \r\n        data.append(data_raw[index: index + seq_len])\r\n    #print(len(data))\r\n    data = np.array(data);\r\n\r\n    x_forecast = data[:,:-1,:]\r\n    return x_forecast\r\n\r\ndef normalize_data(df):\r\n    cols = list(df.columns.values)\r\n    min_max_scaler = sklearn.preprocessing.MinMaxScaler()\r\n    df = pd.DataFrame(min_max_scaler.fit_transform(df.values))\r\n    df.columns = cols\r\n    return df\r\nmodel_path =\"modelsOHLC\"\r\nseq_len = 9\r\n# parameters\r\nn_steps = seq_len-1 \r\nn_inputs = 4\r\nn_neurons = 100 \r\nn_outputs = 4\r\nn_layers = 4\r\nlearning_rate = 0.01\r\nbatch_size = 10\r\nn_epochs = 1000\r\ntf.reset_default_graph()\r\n\r\nX = tf.placeholder(tf.float32, [None, n_steps, n_inputs])\r\ny = tf.placeholder(tf.float32, [None, n_outputs])\r\nlayers = [tf.contrib.rnn.BasicRNNCell(num_units=n_neurons, activation=tf.nn.elu)\r\n          for layer in range(n_layers)]\r\nmulti_layer_cell = tf.contrib.rnn.MultiRNNCell(layers)\r\nrnn_outputs, states = tf.nn.dynamic_rnn(multi_layer_cell, X, dtype=tf.float32)\r\n\r\nstacked_rnn_outputs = tf.reshape(rnn_outputs, [-1, n_neurons]) \r\nstacked_outputs = tf.layers.dense(stacked_rnn_outputs, n_outputs)\r\noutputs = tf.reshape(stacked_outputs, [-1, n_steps, n_outputs])\r\noutputs = outputs[:,n_steps-1,:] # keep only last output of sequence\r\n\r\nloss = tf.reduce_mean(tf.square(outputs - y)) # loss function = mean squared error \r\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate) \r\ntraining_op = optimizer.minimize(loss)\r\nsaver = tf.train.Saver()\r\nsess  =tf.Session()\r\nsess.run(tf.global_variables_initializer())    \r\nif(tf.train.checkpoint_exists(tf.train.latest_checkpoint(model_path))):\r\n        saver.restore(sess, tf.train.latest_checkpoint(model_path))\r\ndf = normalize_data(df)\r\nx_forecast = load_data(df,seq_len)\r\ny_forecast_pred = sess.run(outputs, feed_dict={X: x_forecast})\r\nprint(y_forecast_pred)\r\n```\r\nI am getting weird output values and are not expected. The training and testing worked well. But when it came to real time scenario, everything was gone and I thought that need to train again. Why my saved models are not working as expected? This is truely a tensorflow bug.\r\n\r\n**System information**\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: I dont know that. I am using desktop PC.\r\n- TensorFlow installed from (source or binary): pip\r\n- TensorFlow version (use command below): b'v1.10.0-rc1-19-g656e7a2b34' 1.10.0\r\n\r\n- Python version: Python 3.5\r\n- Bazel version (if compiling from source): ?\r\n- GCC/Compiler version (if compiling from source): ?\r\n- CUDA/cuDNN version: 9.0\r\n- GPU model and memory: Not available right now."}