{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/349076304", "html_url": "https://github.com/tensorflow/tensorflow/issues/15040#issuecomment-349076304", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15040", "id": 349076304, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTA3NjMwNA==", "user": {"login": "ferreirafabio", "id": 4440904, "node_id": "MDQ6VXNlcjQ0NDA5MDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/4440904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ferreirafabio", "html_url": "https://github.com/ferreirafabio", "followers_url": "https://api.github.com/users/ferreirafabio/followers", "following_url": "https://api.github.com/users/ferreirafabio/following{/other_user}", "gists_url": "https://api.github.com/users/ferreirafabio/gists{/gist_id}", "starred_url": "https://api.github.com/users/ferreirafabio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ferreirafabio/subscriptions", "organizations_url": "https://api.github.com/users/ferreirafabio/orgs", "repos_url": "https://api.github.com/users/ferreirafabio/repos", "events_url": "https://api.github.com/users/ferreirafabio/events{/privacy}", "received_events_url": "https://api.github.com/users/ferreirafabio/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-04T19:23:40Z", "updated_at": "2017-12-04T19:25:57Z", "author_association": "NONE", "body_html": "<p>I was thinking about providing a pipeline that receives common video formats as input and produces tfrecords as output. Some parameters (e.g. frames per batch sample, color-depth etc.) could allow for adjusting the data usage/efficiency when calling a transcoding method.</p>\n<p>Relating to your statement, I believe there certainly should be a way of directly feeding frames from raw video formats into the computation graph. However, I think both solutions (with and without tfrecords) target different use-cases. For example, one wants to make use of queue runners / memory front-loading and multi-threading which, based on my (mediocre) TensorFlow knowledge, is better served with tfrecords. Or am I underestimating something?</p>\n<p>That's also where my implementation I stated above could play a role if you/the team agrees. If there's no general interest in integrating this feature into the framework, I think some TensorFlow users would at least profit from a reference to the above implementation in the documentation.</p>", "body_text": "I was thinking about providing a pipeline that receives common video formats as input and produces tfrecords as output. Some parameters (e.g. frames per batch sample, color-depth etc.) could allow for adjusting the data usage/efficiency when calling a transcoding method.\nRelating to your statement, I believe there certainly should be a way of directly feeding frames from raw video formats into the computation graph. However, I think both solutions (with and without tfrecords) target different use-cases. For example, one wants to make use of queue runners / memory front-loading and multi-threading which, based on my (mediocre) TensorFlow knowledge, is better served with tfrecords. Or am I underestimating something?\nThat's also where my implementation I stated above could play a role if you/the team agrees. If there's no general interest in integrating this feature into the framework, I think some TensorFlow users would at least profit from a reference to the above implementation in the documentation.", "body": "I was thinking about providing a pipeline that receives common video formats as input and produces tfrecords as output. Some parameters (e.g. frames per batch sample, color-depth etc.) could allow for adjusting the data usage/efficiency when calling a transcoding method. \r\n\r\nRelating to your statement, I believe there certainly should be a way of directly feeding frames from raw video formats into the computation graph. However, I think both solutions (with and without tfrecords) target different use-cases. For example, one wants to make use of queue runners / memory front-loading and multi-threading which, based on my (mediocre) TensorFlow knowledge, is better served with tfrecords. Or am I underestimating something?\r\n\r\nThat's also where my implementation I stated above could play a role if you/the team agrees. If there's no general interest in integrating this feature into the framework, I think some TensorFlow users would at least profit from a reference to the above implementation in the documentation."}