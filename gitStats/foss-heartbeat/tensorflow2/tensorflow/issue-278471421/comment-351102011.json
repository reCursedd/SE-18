{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/351102011", "html_url": "https://github.com/tensorflow/tensorflow/issues/15040#issuecomment-351102011", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15040", "id": 351102011, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTEwMjAxMQ==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-12T16:19:06Z", "updated_at": "2017-12-12T16:19:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Example code is useful, but in the interests of keeping the core repository small, it's something we don't typically merge into the core. My general rule for this is: \"If it can be built entirely using public APIs, and there is no performance downside to doing so, it doesn't need to be in the repository.\"</p>\n<p>As I mentioned above, if there is some augmentation to <code>tf.data</code> that makes it easier to work with video, I'd be interested in that. I think you might be confused about the roles of TFRecords and <code>tf.data</code>: TFRecords is simply a data format, and <code>tf.data</code> is a library for reading data in many formats, including TFRecords. <code>tf.data</code> can perform multithreaded and pipelined reads of many different formats, including TFRecords, but potentially also including various video formats.</p>", "body_text": "Example code is useful, but in the interests of keeping the core repository small, it's something we don't typically merge into the core. My general rule for this is: \"If it can be built entirely using public APIs, and there is no performance downside to doing so, it doesn't need to be in the repository.\"\nAs I mentioned above, if there is some augmentation to tf.data that makes it easier to work with video, I'd be interested in that. I think you might be confused about the roles of TFRecords and tf.data: TFRecords is simply a data format, and tf.data is a library for reading data in many formats, including TFRecords. tf.data can perform multithreaded and pipelined reads of many different formats, including TFRecords, but potentially also including various video formats.", "body": "Example code is useful, but in the interests of keeping the core repository small, it's something we don't typically merge into the core. My general rule for this is: \"If it can be built entirely using public APIs, and there is no performance downside to doing so, it doesn't need to be in the repository.\"\r\n\r\nAs I mentioned above, if there is some augmentation to `tf.data` that makes it easier to work with video, I'd be interested in that. I think you might be confused about the roles of TFRecords and `tf.data`: TFRecords is simply a data format, and `tf.data` is a library for reading data in many formats, including TFRecords. `tf.data` can perform multithreaded and pipelined reads of many different formats, including TFRecords, but potentially also including various video formats."}