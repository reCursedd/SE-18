{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14285", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14285/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14285/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14285/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14285", "id": 271427246, "node_id": "MDU6SXNzdWUyNzE0MjcyNDY=", "number": 14285, "title": "TF 1.4.0 on MacOSX: crash, object was probably modified after being freed", "user": {"login": "albertz", "id": 59132, "node_id": "MDQ6VXNlcjU5MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/59132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertz", "html_url": "https://github.com/albertz", "followers_url": "https://api.github.com/users/albertz/followers", "following_url": "https://api.github.com/users/albertz/following{/other_user}", "gists_url": "https://api.github.com/users/albertz/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertz/subscriptions", "organizations_url": "https://api.github.com/users/albertz/orgs", "repos_url": "https://api.github.com/users/albertz/repos", "events_url": "https://api.github.com/users/albertz/events{/privacy}", "received_events_url": "https://api.github.com/users/albertz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-06T10:33:10Z", "updated_at": "2017-11-07T13:05:02Z", "closed_at": "2017-11-07T13:05:02Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: MacOSX 10.13</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary, via <code>pip3.6 install tensorflow</code></li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.4.0-rc1-11-g130a514 1.4.0</li>\n<li><strong>Python version</strong>:  3.6.3, via Homebrew</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>TensorFlow crashes in some cases. This occurred only now with version TF 1.4.0. It is a test of my test suite (<a href=\"https://github.com/rwth-i6/returnn/blob/4a69d0a1e74fb1ac7f76fc8c27694d906f9a8642/tests/test_TFEngine.py#L459\">this one</a>). I can try to come up with a reduced test case but maybe the current information is already enough to identify the problem.</p>\n<p>On the terminal, I see this:</p>\n<pre><code>Python(60770,0x70000fafb000) malloc: *** error for object 0x7fb861518b48: incorrect checksum for freed object - object was probably modified after being freed.\n*** set a breakpoint in malloc_error_break to debug\nfish: Job 1, 'python3 tests/test_TFEngine.py test_engine_train_simple_attention' terminated by signal SIGABRT (Abort)\n</code></pre>\n<p>The crashed thread stacktrace:</p>\n<pre><code>Thread 15 Crashed:\n0   libsystem_kernel.dylib        \t0x00007fff7c559fce __pthread_kill + 10\n1   libsystem_pthread.dylib       \t0x00007fff7c697150 pthread_kill + 333\n2   libsystem_c.dylib             \t0x00007fff7c4b632a abort + 127\n3   libsystem_malloc.dylib        \t0x00007fff7c5beb28 szone_error + 596\n4   libsystem_malloc.dylib        \t0x00007fff7c5c9ea5 tiny_free_no_lock + 2439\n5   libsystem_malloc.dylib        \t0x00007fff7c5ca254 free_tiny + 628\n6   libtensorflow_framework.so    \t0x00000001091927c2 tensorflow::Tensor::~Tensor() + 50\n7   libtensorflow_framework.so    \t0x00000001095d1b2e tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long) + 5646\n8   libtensorflow_framework.so    \t0x00000001095d9d90 std::__1::__function::__func&lt;std::__1::__bind&lt;void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&amp;, long long&amp;&gt;, std::__1::allocator&lt;std::__1::__bind&lt;void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&amp;, long long&amp;&gt; &gt;, void ()&gt;::operator()() + 80\n9   libtensorflow_framework.so    \t0x0000000109277fc2 Eigen::NonBlockingThreadPoolTempl&lt;tensorflow::thread::EigenEnvironment&gt;::WorkerLoop(int) + 1922\n10  libtensorflow_framework.so    \t0x0000000109277734 std::__1::__function::__func&lt;tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function&lt;void ()&gt;)::'lambda'(), std::__1::allocator&lt;tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function&lt;void ()&gt;)::'lambda'()&gt;, void ()&gt;::operator()() + 52\n11  libtensorflow_framework.so    \t0x000000010929a9c0 void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::function&lt;void ()&gt; &gt; &gt;(void*) + 96\n12  libsystem_pthread.dylib       \t0x00007fff7c6946c1 _pthread_body + 340\n13  libsystem_pthread.dylib       \t0x00007fff7c69456d _pthread_start + 377\n14  libsystem_pthread.dylib       \t0x00007fff7c693c5d thread_start + 13\n</code></pre>\n<p>Alternatively, I sometimes get this crashed thread stacktrace:</p>\n<pre><code>Thread 12 Crashed:\n0   libtensorflow_framework.so    \t0x000000010e9fd5b7 tensorflow::Tensor::CheckTypeAndIsAligned(tensorflow::DataType) const + 71\n1   _pywrap_tensorflow_internal.so\t0x0000000108b16932 tensorflow::(anonymous namespace)::CheckNumericsOp&lt;Eigen::ThreadPoolDevice, float&gt;::Compute(tensorflow::OpKernelContext*) + 98\n2   libtensorflow_framework.so    \t0x000000010ee6d88d tensorflow::ThreadPoolDevice::Compute(tensorflow::OpKernel*, tensorflow::OpKernelContext*) + 301\n3   libtensorflow_framework.so    \t0x000000010ee3c82b tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long) + 4875\n4   libtensorflow_framework.so    \t0x000000010ee44d90 std::__1::__function::__func&lt;std::__1::__bind&lt;void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&amp;, long long&amp;&gt;, std::__1::allocator&lt;std::__1::__bind&lt;void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&amp;, long long&amp;&gt; &gt;, void ()&gt;::operator()() + 80\n5   libtensorflow_framework.so    \t0x000000010eae2fc2 Eigen::NonBlockingThreadPoolTempl&lt;tensorflow::thread::EigenEnvironment&gt;::WorkerLoop(int) + 1922\n6   libtensorflow_framework.so    \t0x000000010eae2734 std::__1::__function::__func&lt;tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function&lt;void ()&gt;)::'lambda'(), std::__1::allocator&lt;tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function&lt;void ()&gt;)::'lambda'()&gt;, void ()&gt;::operator()() + 52\n7   libtensorflow_framework.so    \t0x000000010eb059c0 void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::function&lt;void ()&gt; &gt; &gt;(void*) + 96\n8   libsystem_pthread.dylib       \t0x00007fff7c6946c1 _pthread_body + 340\n9   libsystem_pthread.dylib       \t0x00007fff7c69456d _pthread_start + 377\n10  libsystem_pthread.dylib       \t0x00007fff7c693c5d thread_start + 13\n</code></pre>\n<p>Maybe the main thread stacktrace is also relevant:</p>\n<pre><code>Thread 0:: Dispatch queue: com.apple.main-thread\n0   libsystem_kernel.dylib        \t0x00007fff7c559e7e __psynch_cvwait + 10\n1   libsystem_pthread.dylib       \t0x00007fff7c695662 _pthread_cond_wait + 732\n2   libc++.1.dylib                \t0x00007fff7a449cb0 std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) + 18\n3   _pywrap_tensorflow_internal.so\t0x000000010dc2d23b nsync::nsync_mu_semaphore_p_with_deadline(nsync::nsync_semaphore_s_*, timespec) + 363\n4   _pywrap_tensorflow_internal.so\t0x000000010dc29c97 nsync::nsync_cv_wait_with_deadline_generic(nsync::nsync_cv_s_*, void*, void (*)(void*), void (*)(void*), timespec, nsync::nsync_note_s_*) + 423\n5   _pywrap_tensorflow_internal.so\t0x000000010dc2a3d1 nsync::nsync_cv_wait(nsync::nsync_cv_s_*, nsync::nsync_mu_s_*) + 49\n6   _pywrap_tensorflow_internal.so\t0x000000010dc3771b tensorflow::DirectSession::WaitForNotification(tensorflow::Notification*, long long) + 107\n7   _pywrap_tensorflow_internal.so\t0x000000010dc332a6 tensorflow::DirectSession::WaitForNotification(tensorflow::DirectSession::RunState*, tensorflow::CancellationManager*, long long) + 38\n8   _pywrap_tensorflow_internal.so\t0x000000010dc2fe3e tensorflow::DirectSession::Run(tensorflow::RunOptions const&amp;, std::__1::vector&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, tensorflow::Tensor&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, tensorflow::Tensor&gt; &gt; &gt; const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__1::vector&lt;tensorflow::Tensor, std::__1::allocator&lt;tensorflow::Tensor&gt; &gt;*, tensorflow::RunMetadata*) + 3438\n9   _pywrap_tensorflow_internal.so\t0x000000010bf0827e TF_Run_Helper(tensorflow::Session*, char const*, TF_Buffer const*, std::__1::vector&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, tensorflow::Tensor&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, tensorflow::Tensor&gt; &gt; &gt; const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, TF_Tensor**, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, TF_Buffer*, TF_Status*) + 750\n10  _pywrap_tensorflow_internal.so\t0x000000010bf07eb6 TF_Run + 1286\n11  _pywrap_tensorflow_internal.so\t0x000000010bc990b3 tensorflow::TF_Run_wrapper_helper(TF_DeprecatedSession*, char const*, TF_Buffer const*, _object*, tensorflow::gtl::InlinedVector&lt;char const*, 8&gt; const&amp;, tensorflow::gtl::InlinedVector&lt;char const*, 8&gt; const&amp;, TF_Status*, tensorflow::gtl::InlinedVector&lt;_object*, 8&gt;*, TF_Buffer*) + 1683\n12  _pywrap_tensorflow_internal.so\t0x000000010bc997e4 tensorflow::TF_Run_wrapper(TF_DeprecatedSession*, TF_Buffer const*, _object*, tensorflow::gtl::InlinedVector&lt;char const*, 8&gt; const&amp;, tensorflow::gtl::InlinedVector&lt;char const*, 8&gt; const&amp;, TF_Status*, tensorflow::gtl::InlinedVector&lt;_object*, 8&gt;*, TF_Buffer*) + 52\n13  _pywrap_tensorflow_internal.so\t0x000000010bc5b885 _wrap_TF_Run(_object*, _object*) + 1861\n14  org.python.python             \t0x000000010797b5dd _PyCFunction_FastCallDict + 166\n...\n</code></pre>\n<p>The full MacOSX crash report with the stacktrace of all threads can be seen <a href=\"https://gist.github.com/albertz/6f92b691d6025f47f8ec3a738a8ba970\">here</a>.</p>\n<p>On another run, I also got this stacktrace:</p>\n<pre><code>Crashed Thread:        0  Dispatch queue: com.apple.main-thread\n\nException Type:        EXC_BAD_ACCESS (SIGSEGV)\nException Codes:       EXC_I386_GPFLT\nException Note:        EXC_CORPSE_NOTIFY\n\nTermination Signal:    Segmentation fault: 11\nTermination Reason:    Namespace SIGNAL, Code 0xb\nTerminating Process:   exc handler [0]\n\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\n0   libtensorflow_framework.so    \t0x0000000115d21a1e tensorflow::(anonymous namespace)::AddArgToSig(tensorflow::NodeDef const&amp;, tensorflow::OpDef_ArgDef const&amp;, tensorflow::gtl::InlinedVector&lt;tensorflow::DataType, 4&gt;*) + 78\n1   libtensorflow_framework.so    \t0x0000000115d21942 tensorflow::InOutTypesForNode(tensorflow::NodeDef const&amp;, tensorflow::OpDef const&amp;, tensorflow::gtl::InlinedVector&lt;tensorflow::DataType, 4&gt;*, tensorflow::gtl::InlinedVector&lt;tensorflow::DataType, 4&gt;*) + 82\n2   libtensorflow_framework.so    \t0x0000000115d22829 tensorflow::ValidateNodeDef(tensorflow::NodeDef const&amp;, tensorflow::OpDef const&amp;) + 1881\n3   _pywrap_tensorflow_internal.so\t0x0000000110f83e16 tensorflow::graph::ValidateGraphDef(tensorflow::GraphDef const&amp;, tensorflow::OpRegistryInterface const&amp;) + 134\n4   _pywrap_tensorflow_internal.so\t0x0000000110eef9c3 tensorflow::GraphExecutionState::Extend(tensorflow::GraphDef const&amp;, std::__1::unique_ptr&lt;tensorflow::GraphExecutionState, std::__1::default_delete&lt;tensorflow::GraphExecutionState&gt; &gt;*) const + 2147\n5   _pywrap_tensorflow_internal.so\t0x0000000110d18e03 tensorflow::DirectSession::ExtendLocked(tensorflow::GraphDef const&amp;) + 131\n6   _pywrap_tensorflow_internal.so\t0x0000000110d18eb3 tensorflow::DirectSession::Extend(tensorflow::GraphDef const&amp;) + 67\n7   _pywrap_tensorflow_internal.so\t0x000000010eff04f6 TF_ExtendGraph + 102\n8   _pywrap_tensorflow_internal.so\t0x000000010ed43b71 _wrap_TF_ExtendGraph(_object*, _object*) + 273\n9   org.python.python             \t0x000000010d57d5dd _PyCFunction_FastCallDict + 166\n...\n</code></pre>\n<p>And yet another stacktrace:</p>\n<pre><code>Thread 13 Crashed:\n0   _pywrap_tensorflow_internal.so\t0x0000000107a4016a tensorflow::TTypes&lt;int, 3ul, long&gt;::ConstTensor tensorflow::Tensor::bit_casted_shaped&lt;int, 3ul&gt;(tensorflow::gtl::ArraySlice&lt;long long&gt;) const + 42\n1   _pywrap_tensorflow_internal.so\t0x0000000107a45a6e void tensorflow::HandleStridedSliceGradCase&lt;Eigen::ThreadPoolDevice, float, 3&gt;(tensorflow::OpKernelContext*, tensorflow::gtl::ArraySlice&lt;long long&gt; const&amp;, tensorflow::gtl::ArraySlice&lt;long long&gt; const&amp;, tensorflow::gtl::ArraySlice&lt;long long&gt; const&amp;, tensorflow::TensorShape const&amp;, bool, tensorflow::Tensor*) + 302\n2   _pywrap_tensorflow_internal.so\t0x00000001079ff7ac tensorflow::StridedSliceGradOp&lt;Eigen::ThreadPoolDevice, float&gt;::Compute(tensorflow::OpKernelContext*) + 2556\n3   libtensorflow_framework.so    \t0x000000010644788d tensorflow::ThreadPoolDevice::Compute(tensorflow::OpKernel*, tensorflow::OpKernelContext*) + 301\n4   libtensorflow_framework.so    \t0x000000010641682b tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long) + 4875\n5   libtensorflow_framework.so    \t0x000000010641ed90 std::__1::__function::__func&lt;std::__1::__bind&lt;void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&amp;, long long&amp;&gt;, std::__1::allocator&lt;std::__1::__bind&lt;void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&amp;, long long&amp;&gt; &gt;, void ()&gt;::operator()() + 80\n6   libtensorflow_framework.so    \t0x00000001060bcfc2 Eigen::NonBlockingThreadPoolTempl&lt;tensorflow::thread::EigenEnvironment&gt;::WorkerLoop(int) + 1922\n7   libtensorflow_framework.so    \t0x00000001060bc734 std::__1::__function::__func&lt;tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function&lt;void ()&gt;)::'lambda'(), std::__1::allocator&lt;tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function&lt;void ()&gt;)::'lambda'()&gt;, void ()&gt;::operator()() + 52\n8   libtensorflow_framework.so    \t0x00000001060df9c0 void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::function&lt;void ()&gt; &gt; &gt;(void*) + 96\n9   libsystem_pthread.dylib       \t0x00007fff7c6946c1 _pthread_body + 340\n10  libsystem_pthread.dylib       \t0x00007fff7c69456d _pthread_start + 377\n11  libsystem_pthread.dylib       \t0x00007fff7c693c5d thread_start + 13\n</code></pre>\n<p>Or this:</p>\n<pre><code>Thread 12 Crashed:\n0   libsystem_kernel.dylib        \t0x00007fff7c55a1ea __semwait_signal_nocancel + 10\n1   libsystem_c.dylib             \t0x00007fff7c460097 nanosleep$NOCANCEL + 188\n2   libsystem_c.dylib             \t0x00007fff7c488931 usleep$NOCANCEL + 53\n3   libsystem_c.dylib             \t0x00007fff7c4b6334 abort + 137\n4   libsystem_malloc.dylib        \t0x00007fff7c5beb28 szone_error + 596\n5   libsystem_malloc.dylib        \t0x00007fff7c5b3658 tiny_malloc_from_free_list + 1155\n6   libsystem_malloc.dylib        \t0x00007fff7c5b2403 szone_malloc_should_clear + 422\n7   libsystem_malloc.dylib        \t0x00007fff7c5b2201 malloc_zone_malloc + 103\n8   libsystem_malloc.dylib        \t0x00007fff7c5b150b malloc + 24\n9   libc++abi.dylib               \t0x00007fff7a49b628 operator new(unsigned long) + 40\n10  _pywrap_tensorflow_internal.so\t0x0000000108c9bc16 tensorflow::ApplyAdamOp&lt;Eigen::ThreadPoolDevice, float&gt;::Compute(tensorflow::OpKernelContext*) + 70\n11  libtensorflow_framework.so    \t0x000000010e45488d tensorflow::ThreadPoolDevice::Compute(tensorflow::OpKernel*, tensorflow::OpKernelContext*) + 301\n12  libtensorflow_framework.so    \t0x000000010e42382b tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long) + 4875\n13  libtensorflow_framework.so    \t0x000000010e42bd90 std::__1::__function::__func&lt;std::__1::__bind&lt;void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&amp;, long long&amp;&gt;, std::__1::allocator&lt;std::__1::__bind&lt;void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&amp;, long long&amp;&gt; &gt;, void ()&gt;::operator()() + 80\n14  libtensorflow_framework.so    \t0x000000010e0c9fc2 Eigen::NonBlockingThreadPoolTempl&lt;tensorflow::thread::EigenEnvironment&gt;::WorkerLoop(int) + 1922\n15  libtensorflow_framework.so    \t0x000000010e0c9734 std::__1::__function::__func&lt;tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function&lt;void ()&gt;)::'lambda'(), std::__1::allocator&lt;tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function&lt;void ()&gt;)::'lambda'()&gt;, void ()&gt;::operator()() + 52\n16  libtensorflow_framework.so    \t0x000000010e0ec9c0 void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::function&lt;void ()&gt; &gt; &gt;(void*) + 96\n17  libsystem_pthread.dylib       \t0x00007fff7c6946c1 _pthread_body + 340\n18  libsystem_pthread.dylib       \t0x00007fff7c69456d _pthread_start + 377\n19  libsystem_pthread.dylib       \t0x00007fff7c693c5d thread_start + 13\n</code></pre>\n<p>This might be related to our own C++ operation which has worked fine so far (we used it since TF 0.8), although of course this might be triggered only now by some race condition. Is there anything new I need to take care of? I think this NSync stuff is new?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOSX 10.13\nTensorFlow installed from (source or binary): binary, via pip3.6 install tensorflow\nTensorFlow version (use command below): v1.4.0-rc1-11-g130a514 1.4.0\nPython version:  3.6.3, via Homebrew\n\nDescribe the problem\nTensorFlow crashes in some cases. This occurred only now with version TF 1.4.0. It is a test of my test suite (this one). I can try to come up with a reduced test case but maybe the current information is already enough to identify the problem.\nOn the terminal, I see this:\nPython(60770,0x70000fafb000) malloc: *** error for object 0x7fb861518b48: incorrect checksum for freed object - object was probably modified after being freed.\n*** set a breakpoint in malloc_error_break to debug\nfish: Job 1, 'python3 tests/test_TFEngine.py test_engine_train_simple_attention' terminated by signal SIGABRT (Abort)\n\nThe crashed thread stacktrace:\nThread 15 Crashed:\n0   libsystem_kernel.dylib        \t0x00007fff7c559fce __pthread_kill + 10\n1   libsystem_pthread.dylib       \t0x00007fff7c697150 pthread_kill + 333\n2   libsystem_c.dylib             \t0x00007fff7c4b632a abort + 127\n3   libsystem_malloc.dylib        \t0x00007fff7c5beb28 szone_error + 596\n4   libsystem_malloc.dylib        \t0x00007fff7c5c9ea5 tiny_free_no_lock + 2439\n5   libsystem_malloc.dylib        \t0x00007fff7c5ca254 free_tiny + 628\n6   libtensorflow_framework.so    \t0x00000001091927c2 tensorflow::Tensor::~Tensor() + 50\n7   libtensorflow_framework.so    \t0x00000001095d1b2e tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long) + 5646\n8   libtensorflow_framework.so    \t0x00000001095d9d90 std::__1::__function::__func<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&>, std::__1::allocator<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&> >, void ()>::operator()() + 80\n9   libtensorflow_framework.so    \t0x0000000109277fc2 Eigen::NonBlockingThreadPoolTempl<tensorflow::thread::EigenEnvironment>::WorkerLoop(int) + 1922\n10  libtensorflow_framework.so    \t0x0000000109277734 std::__1::__function::__func<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'(), std::__1::allocator<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'()>, void ()>::operator()() + 52\n11  libtensorflow_framework.so    \t0x000000010929a9c0 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::function<void ()> > >(void*) + 96\n12  libsystem_pthread.dylib       \t0x00007fff7c6946c1 _pthread_body + 340\n13  libsystem_pthread.dylib       \t0x00007fff7c69456d _pthread_start + 377\n14  libsystem_pthread.dylib       \t0x00007fff7c693c5d thread_start + 13\n\nAlternatively, I sometimes get this crashed thread stacktrace:\nThread 12 Crashed:\n0   libtensorflow_framework.so    \t0x000000010e9fd5b7 tensorflow::Tensor::CheckTypeAndIsAligned(tensorflow::DataType) const + 71\n1   _pywrap_tensorflow_internal.so\t0x0000000108b16932 tensorflow::(anonymous namespace)::CheckNumericsOp<Eigen::ThreadPoolDevice, float>::Compute(tensorflow::OpKernelContext*) + 98\n2   libtensorflow_framework.so    \t0x000000010ee6d88d tensorflow::ThreadPoolDevice::Compute(tensorflow::OpKernel*, tensorflow::OpKernelContext*) + 301\n3   libtensorflow_framework.so    \t0x000000010ee3c82b tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long) + 4875\n4   libtensorflow_framework.so    \t0x000000010ee44d90 std::__1::__function::__func<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&>, std::__1::allocator<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&> >, void ()>::operator()() + 80\n5   libtensorflow_framework.so    \t0x000000010eae2fc2 Eigen::NonBlockingThreadPoolTempl<tensorflow::thread::EigenEnvironment>::WorkerLoop(int) + 1922\n6   libtensorflow_framework.so    \t0x000000010eae2734 std::__1::__function::__func<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'(), std::__1::allocator<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'()>, void ()>::operator()() + 52\n7   libtensorflow_framework.so    \t0x000000010eb059c0 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::function<void ()> > >(void*) + 96\n8   libsystem_pthread.dylib       \t0x00007fff7c6946c1 _pthread_body + 340\n9   libsystem_pthread.dylib       \t0x00007fff7c69456d _pthread_start + 377\n10  libsystem_pthread.dylib       \t0x00007fff7c693c5d thread_start + 13\n\nMaybe the main thread stacktrace is also relevant:\nThread 0:: Dispatch queue: com.apple.main-thread\n0   libsystem_kernel.dylib        \t0x00007fff7c559e7e __psynch_cvwait + 10\n1   libsystem_pthread.dylib       \t0x00007fff7c695662 _pthread_cond_wait + 732\n2   libc++.1.dylib                \t0x00007fff7a449cb0 std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 18\n3   _pywrap_tensorflow_internal.so\t0x000000010dc2d23b nsync::nsync_mu_semaphore_p_with_deadline(nsync::nsync_semaphore_s_*, timespec) + 363\n4   _pywrap_tensorflow_internal.so\t0x000000010dc29c97 nsync::nsync_cv_wait_with_deadline_generic(nsync::nsync_cv_s_*, void*, void (*)(void*), void (*)(void*), timespec, nsync::nsync_note_s_*) + 423\n5   _pywrap_tensorflow_internal.so\t0x000000010dc2a3d1 nsync::nsync_cv_wait(nsync::nsync_cv_s_*, nsync::nsync_mu_s_*) + 49\n6   _pywrap_tensorflow_internal.so\t0x000000010dc3771b tensorflow::DirectSession::WaitForNotification(tensorflow::Notification*, long long) + 107\n7   _pywrap_tensorflow_internal.so\t0x000000010dc332a6 tensorflow::DirectSession::WaitForNotification(tensorflow::DirectSession::RunState*, tensorflow::CancellationManager*, long long) + 38\n8   _pywrap_tensorflow_internal.so\t0x000000010dc2fe3e tensorflow::DirectSession::Run(tensorflow::RunOptions const&, std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor> > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<tensorflow::Tensor, std::__1::allocator<tensorflow::Tensor> >*, tensorflow::RunMetadata*) + 3438\n9   _pywrap_tensorflow_internal.so\t0x000000010bf0827e TF_Run_Helper(tensorflow::Session*, char const*, TF_Buffer const*, std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor> > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, TF_Tensor**, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, TF_Buffer*, TF_Status*) + 750\n10  _pywrap_tensorflow_internal.so\t0x000000010bf07eb6 TF_Run + 1286\n11  _pywrap_tensorflow_internal.so\t0x000000010bc990b3 tensorflow::TF_Run_wrapper_helper(TF_DeprecatedSession*, char const*, TF_Buffer const*, _object*, tensorflow::gtl::InlinedVector<char const*, 8> const&, tensorflow::gtl::InlinedVector<char const*, 8> const&, TF_Status*, tensorflow::gtl::InlinedVector<_object*, 8>*, TF_Buffer*) + 1683\n12  _pywrap_tensorflow_internal.so\t0x000000010bc997e4 tensorflow::TF_Run_wrapper(TF_DeprecatedSession*, TF_Buffer const*, _object*, tensorflow::gtl::InlinedVector<char const*, 8> const&, tensorflow::gtl::InlinedVector<char const*, 8> const&, TF_Status*, tensorflow::gtl::InlinedVector<_object*, 8>*, TF_Buffer*) + 52\n13  _pywrap_tensorflow_internal.so\t0x000000010bc5b885 _wrap_TF_Run(_object*, _object*) + 1861\n14  org.python.python             \t0x000000010797b5dd _PyCFunction_FastCallDict + 166\n...\n\nThe full MacOSX crash report with the stacktrace of all threads can be seen here.\nOn another run, I also got this stacktrace:\nCrashed Thread:        0  Dispatch queue: com.apple.main-thread\n\nException Type:        EXC_BAD_ACCESS (SIGSEGV)\nException Codes:       EXC_I386_GPFLT\nException Note:        EXC_CORPSE_NOTIFY\n\nTermination Signal:    Segmentation fault: 11\nTermination Reason:    Namespace SIGNAL, Code 0xb\nTerminating Process:   exc handler [0]\n\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\n0   libtensorflow_framework.so    \t0x0000000115d21a1e tensorflow::(anonymous namespace)::AddArgToSig(tensorflow::NodeDef const&, tensorflow::OpDef_ArgDef const&, tensorflow::gtl::InlinedVector<tensorflow::DataType, 4>*) + 78\n1   libtensorflow_framework.so    \t0x0000000115d21942 tensorflow::InOutTypesForNode(tensorflow::NodeDef const&, tensorflow::OpDef const&, tensorflow::gtl::InlinedVector<tensorflow::DataType, 4>*, tensorflow::gtl::InlinedVector<tensorflow::DataType, 4>*) + 82\n2   libtensorflow_framework.so    \t0x0000000115d22829 tensorflow::ValidateNodeDef(tensorflow::NodeDef const&, tensorflow::OpDef const&) + 1881\n3   _pywrap_tensorflow_internal.so\t0x0000000110f83e16 tensorflow::graph::ValidateGraphDef(tensorflow::GraphDef const&, tensorflow::OpRegistryInterface const&) + 134\n4   _pywrap_tensorflow_internal.so\t0x0000000110eef9c3 tensorflow::GraphExecutionState::Extend(tensorflow::GraphDef const&, std::__1::unique_ptr<tensorflow::GraphExecutionState, std::__1::default_delete<tensorflow::GraphExecutionState> >*) const + 2147\n5   _pywrap_tensorflow_internal.so\t0x0000000110d18e03 tensorflow::DirectSession::ExtendLocked(tensorflow::GraphDef const&) + 131\n6   _pywrap_tensorflow_internal.so\t0x0000000110d18eb3 tensorflow::DirectSession::Extend(tensorflow::GraphDef const&) + 67\n7   _pywrap_tensorflow_internal.so\t0x000000010eff04f6 TF_ExtendGraph + 102\n8   _pywrap_tensorflow_internal.so\t0x000000010ed43b71 _wrap_TF_ExtendGraph(_object*, _object*) + 273\n9   org.python.python             \t0x000000010d57d5dd _PyCFunction_FastCallDict + 166\n...\n\nAnd yet another stacktrace:\nThread 13 Crashed:\n0   _pywrap_tensorflow_internal.so\t0x0000000107a4016a tensorflow::TTypes<int, 3ul, long>::ConstTensor tensorflow::Tensor::bit_casted_shaped<int, 3ul>(tensorflow::gtl::ArraySlice<long long>) const + 42\n1   _pywrap_tensorflow_internal.so\t0x0000000107a45a6e void tensorflow::HandleStridedSliceGradCase<Eigen::ThreadPoolDevice, float, 3>(tensorflow::OpKernelContext*, tensorflow::gtl::ArraySlice<long long> const&, tensorflow::gtl::ArraySlice<long long> const&, tensorflow::gtl::ArraySlice<long long> const&, tensorflow::TensorShape const&, bool, tensorflow::Tensor*) + 302\n2   _pywrap_tensorflow_internal.so\t0x00000001079ff7ac tensorflow::StridedSliceGradOp<Eigen::ThreadPoolDevice, float>::Compute(tensorflow::OpKernelContext*) + 2556\n3   libtensorflow_framework.so    \t0x000000010644788d tensorflow::ThreadPoolDevice::Compute(tensorflow::OpKernel*, tensorflow::OpKernelContext*) + 301\n4   libtensorflow_framework.so    \t0x000000010641682b tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long) + 4875\n5   libtensorflow_framework.so    \t0x000000010641ed90 std::__1::__function::__func<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&>, std::__1::allocator<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&> >, void ()>::operator()() + 80\n6   libtensorflow_framework.so    \t0x00000001060bcfc2 Eigen::NonBlockingThreadPoolTempl<tensorflow::thread::EigenEnvironment>::WorkerLoop(int) + 1922\n7   libtensorflow_framework.so    \t0x00000001060bc734 std::__1::__function::__func<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'(), std::__1::allocator<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'()>, void ()>::operator()() + 52\n8   libtensorflow_framework.so    \t0x00000001060df9c0 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::function<void ()> > >(void*) + 96\n9   libsystem_pthread.dylib       \t0x00007fff7c6946c1 _pthread_body + 340\n10  libsystem_pthread.dylib       \t0x00007fff7c69456d _pthread_start + 377\n11  libsystem_pthread.dylib       \t0x00007fff7c693c5d thread_start + 13\n\nOr this:\nThread 12 Crashed:\n0   libsystem_kernel.dylib        \t0x00007fff7c55a1ea __semwait_signal_nocancel + 10\n1   libsystem_c.dylib             \t0x00007fff7c460097 nanosleep$NOCANCEL + 188\n2   libsystem_c.dylib             \t0x00007fff7c488931 usleep$NOCANCEL + 53\n3   libsystem_c.dylib             \t0x00007fff7c4b6334 abort + 137\n4   libsystem_malloc.dylib        \t0x00007fff7c5beb28 szone_error + 596\n5   libsystem_malloc.dylib        \t0x00007fff7c5b3658 tiny_malloc_from_free_list + 1155\n6   libsystem_malloc.dylib        \t0x00007fff7c5b2403 szone_malloc_should_clear + 422\n7   libsystem_malloc.dylib        \t0x00007fff7c5b2201 malloc_zone_malloc + 103\n8   libsystem_malloc.dylib        \t0x00007fff7c5b150b malloc + 24\n9   libc++abi.dylib               \t0x00007fff7a49b628 operator new(unsigned long) + 40\n10  _pywrap_tensorflow_internal.so\t0x0000000108c9bc16 tensorflow::ApplyAdamOp<Eigen::ThreadPoolDevice, float>::Compute(tensorflow::OpKernelContext*) + 70\n11  libtensorflow_framework.so    \t0x000000010e45488d tensorflow::ThreadPoolDevice::Compute(tensorflow::OpKernel*, tensorflow::OpKernelContext*) + 301\n12  libtensorflow_framework.so    \t0x000000010e42382b tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long) + 4875\n13  libtensorflow_framework.so    \t0x000000010e42bd90 std::__1::__function::__func<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&>, std::__1::allocator<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&> >, void ()>::operator()() + 80\n14  libtensorflow_framework.so    \t0x000000010e0c9fc2 Eigen::NonBlockingThreadPoolTempl<tensorflow::thread::EigenEnvironment>::WorkerLoop(int) + 1922\n15  libtensorflow_framework.so    \t0x000000010e0c9734 std::__1::__function::__func<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'(), std::__1::allocator<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'()>, void ()>::operator()() + 52\n16  libtensorflow_framework.so    \t0x000000010e0ec9c0 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::function<void ()> > >(void*) + 96\n17  libsystem_pthread.dylib       \t0x00007fff7c6946c1 _pthread_body + 340\n18  libsystem_pthread.dylib       \t0x00007fff7c69456d _pthread_start + 377\n19  libsystem_pthread.dylib       \t0x00007fff7c693c5d thread_start + 13\n\nThis might be related to our own C++ operation which has worked fine so far (we used it since TF 0.8), although of course this might be triggered only now by some race condition. Is there anything new I need to take care of? I think this NSync stuff is new?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: MacOSX 10.13\r\n- **TensorFlow installed from (source or binary)**: binary, via `pip3.6 install tensorflow`\r\n- **TensorFlow version (use command below)**: v1.4.0-rc1-11-g130a514 1.4.0\r\n- **Python version**:  3.6.3, via Homebrew\r\n\r\n### Describe the problem\r\n\r\nTensorFlow crashes in some cases. This occurred only now with version TF 1.4.0. It is a test of my test suite ([this one](https://github.com/rwth-i6/returnn/blob/4a69d0a1e74fb1ac7f76fc8c27694d906f9a8642/tests/test_TFEngine.py#L459)). I can try to come up with a reduced test case but maybe the current information is already enough to identify the problem.\r\n\r\nOn the terminal, I see this:\r\n```\r\nPython(60770,0x70000fafb000) malloc: *** error for object 0x7fb861518b48: incorrect checksum for freed object - object was probably modified after being freed.\r\n*** set a breakpoint in malloc_error_break to debug\r\nfish: Job 1, 'python3 tests/test_TFEngine.py test_engine_train_simple_attention' terminated by signal SIGABRT (Abort)\r\n```\r\n\r\nThe crashed thread stacktrace:\r\n```\r\nThread 15 Crashed:\r\n0   libsystem_kernel.dylib        \t0x00007fff7c559fce __pthread_kill + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7c697150 pthread_kill + 333\r\n2   libsystem_c.dylib             \t0x00007fff7c4b632a abort + 127\r\n3   libsystem_malloc.dylib        \t0x00007fff7c5beb28 szone_error + 596\r\n4   libsystem_malloc.dylib        \t0x00007fff7c5c9ea5 tiny_free_no_lock + 2439\r\n5   libsystem_malloc.dylib        \t0x00007fff7c5ca254 free_tiny + 628\r\n6   libtensorflow_framework.so    \t0x00000001091927c2 tensorflow::Tensor::~Tensor() + 50\r\n7   libtensorflow_framework.so    \t0x00000001095d1b2e tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long) + 5646\r\n8   libtensorflow_framework.so    \t0x00000001095d9d90 std::__1::__function::__func<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&>, std::__1::allocator<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&> >, void ()>::operator()() + 80\r\n9   libtensorflow_framework.so    \t0x0000000109277fc2 Eigen::NonBlockingThreadPoolTempl<tensorflow::thread::EigenEnvironment>::WorkerLoop(int) + 1922\r\n10  libtensorflow_framework.so    \t0x0000000109277734 std::__1::__function::__func<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'(), std::__1::allocator<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'()>, void ()>::operator()() + 52\r\n11  libtensorflow_framework.so    \t0x000000010929a9c0 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::function<void ()> > >(void*) + 96\r\n12  libsystem_pthread.dylib       \t0x00007fff7c6946c1 _pthread_body + 340\r\n13  libsystem_pthread.dylib       \t0x00007fff7c69456d _pthread_start + 377\r\n14  libsystem_pthread.dylib       \t0x00007fff7c693c5d thread_start + 13\r\n```\r\n\r\nAlternatively, I sometimes get this crashed thread stacktrace:\r\n```\r\nThread 12 Crashed:\r\n0   libtensorflow_framework.so    \t0x000000010e9fd5b7 tensorflow::Tensor::CheckTypeAndIsAligned(tensorflow::DataType) const + 71\r\n1   _pywrap_tensorflow_internal.so\t0x0000000108b16932 tensorflow::(anonymous namespace)::CheckNumericsOp<Eigen::ThreadPoolDevice, float>::Compute(tensorflow::OpKernelContext*) + 98\r\n2   libtensorflow_framework.so    \t0x000000010ee6d88d tensorflow::ThreadPoolDevice::Compute(tensorflow::OpKernel*, tensorflow::OpKernelContext*) + 301\r\n3   libtensorflow_framework.so    \t0x000000010ee3c82b tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long) + 4875\r\n4   libtensorflow_framework.so    \t0x000000010ee44d90 std::__1::__function::__func<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&>, std::__1::allocator<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&> >, void ()>::operator()() + 80\r\n5   libtensorflow_framework.so    \t0x000000010eae2fc2 Eigen::NonBlockingThreadPoolTempl<tensorflow::thread::EigenEnvironment>::WorkerLoop(int) + 1922\r\n6   libtensorflow_framework.so    \t0x000000010eae2734 std::__1::__function::__func<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'(), std::__1::allocator<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'()>, void ()>::operator()() + 52\r\n7   libtensorflow_framework.so    \t0x000000010eb059c0 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::function<void ()> > >(void*) + 96\r\n8   libsystem_pthread.dylib       \t0x00007fff7c6946c1 _pthread_body + 340\r\n9   libsystem_pthread.dylib       \t0x00007fff7c69456d _pthread_start + 377\r\n10  libsystem_pthread.dylib       \t0x00007fff7c693c5d thread_start + 13\r\n```\r\n\r\nMaybe the main thread stacktrace is also relevant:\r\n```\r\nThread 0:: Dispatch queue: com.apple.main-thread\r\n0   libsystem_kernel.dylib        \t0x00007fff7c559e7e __psynch_cvwait + 10\r\n1   libsystem_pthread.dylib       \t0x00007fff7c695662 _pthread_cond_wait + 732\r\n2   libc++.1.dylib                \t0x00007fff7a449cb0 std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&) + 18\r\n3   _pywrap_tensorflow_internal.so\t0x000000010dc2d23b nsync::nsync_mu_semaphore_p_with_deadline(nsync::nsync_semaphore_s_*, timespec) + 363\r\n4   _pywrap_tensorflow_internal.so\t0x000000010dc29c97 nsync::nsync_cv_wait_with_deadline_generic(nsync::nsync_cv_s_*, void*, void (*)(void*), void (*)(void*), timespec, nsync::nsync_note_s_*) + 423\r\n5   _pywrap_tensorflow_internal.so\t0x000000010dc2a3d1 nsync::nsync_cv_wait(nsync::nsync_cv_s_*, nsync::nsync_mu_s_*) + 49\r\n6   _pywrap_tensorflow_internal.so\t0x000000010dc3771b tensorflow::DirectSession::WaitForNotification(tensorflow::Notification*, long long) + 107\r\n7   _pywrap_tensorflow_internal.so\t0x000000010dc332a6 tensorflow::DirectSession::WaitForNotification(tensorflow::DirectSession::RunState*, tensorflow::CancellationManager*, long long) + 38\r\n8   _pywrap_tensorflow_internal.so\t0x000000010dc2fe3e tensorflow::DirectSession::Run(tensorflow::RunOptions const&, std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor> > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::vector<tensorflow::Tensor, std::__1::allocator<tensorflow::Tensor> >*, tensorflow::RunMetadata*) + 3438\r\n9   _pywrap_tensorflow_internal.so\t0x000000010bf0827e TF_Run_Helper(tensorflow::Session*, char const*, TF_Buffer const*, std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, tensorflow::Tensor> > > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, TF_Tensor**, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, TF_Buffer*, TF_Status*) + 750\r\n10  _pywrap_tensorflow_internal.so\t0x000000010bf07eb6 TF_Run + 1286\r\n11  _pywrap_tensorflow_internal.so\t0x000000010bc990b3 tensorflow::TF_Run_wrapper_helper(TF_DeprecatedSession*, char const*, TF_Buffer const*, _object*, tensorflow::gtl::InlinedVector<char const*, 8> const&, tensorflow::gtl::InlinedVector<char const*, 8> const&, TF_Status*, tensorflow::gtl::InlinedVector<_object*, 8>*, TF_Buffer*) + 1683\r\n12  _pywrap_tensorflow_internal.so\t0x000000010bc997e4 tensorflow::TF_Run_wrapper(TF_DeprecatedSession*, TF_Buffer const*, _object*, tensorflow::gtl::InlinedVector<char const*, 8> const&, tensorflow::gtl::InlinedVector<char const*, 8> const&, TF_Status*, tensorflow::gtl::InlinedVector<_object*, 8>*, TF_Buffer*) + 52\r\n13  _pywrap_tensorflow_internal.so\t0x000000010bc5b885 _wrap_TF_Run(_object*, _object*) + 1861\r\n14  org.python.python             \t0x000000010797b5dd _PyCFunction_FastCallDict + 166\r\n...\r\n```\r\n\r\nThe full MacOSX crash report with the stacktrace of all threads can be seen [here](https://gist.github.com/albertz/6f92b691d6025f47f8ec3a738a8ba970).\r\n\r\nOn another run, I also got this stacktrace:\r\n```\r\nCrashed Thread:        0  Dispatch queue: com.apple.main-thread\r\n\r\nException Type:        EXC_BAD_ACCESS (SIGSEGV)\r\nException Codes:       EXC_I386_GPFLT\r\nException Note:        EXC_CORPSE_NOTIFY\r\n\r\nTermination Signal:    Segmentation fault: 11\r\nTermination Reason:    Namespace SIGNAL, Code 0xb\r\nTerminating Process:   exc handler [0]\r\n\r\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\r\n0   libtensorflow_framework.so    \t0x0000000115d21a1e tensorflow::(anonymous namespace)::AddArgToSig(tensorflow::NodeDef const&, tensorflow::OpDef_ArgDef const&, tensorflow::gtl::InlinedVector<tensorflow::DataType, 4>*) + 78\r\n1   libtensorflow_framework.so    \t0x0000000115d21942 tensorflow::InOutTypesForNode(tensorflow::NodeDef const&, tensorflow::OpDef const&, tensorflow::gtl::InlinedVector<tensorflow::DataType, 4>*, tensorflow::gtl::InlinedVector<tensorflow::DataType, 4>*) + 82\r\n2   libtensorflow_framework.so    \t0x0000000115d22829 tensorflow::ValidateNodeDef(tensorflow::NodeDef const&, tensorflow::OpDef const&) + 1881\r\n3   _pywrap_tensorflow_internal.so\t0x0000000110f83e16 tensorflow::graph::ValidateGraphDef(tensorflow::GraphDef const&, tensorflow::OpRegistryInterface const&) + 134\r\n4   _pywrap_tensorflow_internal.so\t0x0000000110eef9c3 tensorflow::GraphExecutionState::Extend(tensorflow::GraphDef const&, std::__1::unique_ptr<tensorflow::GraphExecutionState, std::__1::default_delete<tensorflow::GraphExecutionState> >*) const + 2147\r\n5   _pywrap_tensorflow_internal.so\t0x0000000110d18e03 tensorflow::DirectSession::ExtendLocked(tensorflow::GraphDef const&) + 131\r\n6   _pywrap_tensorflow_internal.so\t0x0000000110d18eb3 tensorflow::DirectSession::Extend(tensorflow::GraphDef const&) + 67\r\n7   _pywrap_tensorflow_internal.so\t0x000000010eff04f6 TF_ExtendGraph + 102\r\n8   _pywrap_tensorflow_internal.so\t0x000000010ed43b71 _wrap_TF_ExtendGraph(_object*, _object*) + 273\r\n9   org.python.python             \t0x000000010d57d5dd _PyCFunction_FastCallDict + 166\r\n...\r\n```\r\n\r\nAnd yet another stacktrace:\r\n```\r\nThread 13 Crashed:\r\n0   _pywrap_tensorflow_internal.so\t0x0000000107a4016a tensorflow::TTypes<int, 3ul, long>::ConstTensor tensorflow::Tensor::bit_casted_shaped<int, 3ul>(tensorflow::gtl::ArraySlice<long long>) const + 42\r\n1   _pywrap_tensorflow_internal.so\t0x0000000107a45a6e void tensorflow::HandleStridedSliceGradCase<Eigen::ThreadPoolDevice, float, 3>(tensorflow::OpKernelContext*, tensorflow::gtl::ArraySlice<long long> const&, tensorflow::gtl::ArraySlice<long long> const&, tensorflow::gtl::ArraySlice<long long> const&, tensorflow::TensorShape const&, bool, tensorflow::Tensor*) + 302\r\n2   _pywrap_tensorflow_internal.so\t0x00000001079ff7ac tensorflow::StridedSliceGradOp<Eigen::ThreadPoolDevice, float>::Compute(tensorflow::OpKernelContext*) + 2556\r\n3   libtensorflow_framework.so    \t0x000000010644788d tensorflow::ThreadPoolDevice::Compute(tensorflow::OpKernel*, tensorflow::OpKernelContext*) + 301\r\n4   libtensorflow_framework.so    \t0x000000010641682b tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long) + 4875\r\n5   libtensorflow_framework.so    \t0x000000010641ed90 std::__1::__function::__func<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&>, std::__1::allocator<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&> >, void ()>::operator()() + 80\r\n6   libtensorflow_framework.so    \t0x00000001060bcfc2 Eigen::NonBlockingThreadPoolTempl<tensorflow::thread::EigenEnvironment>::WorkerLoop(int) + 1922\r\n7   libtensorflow_framework.so    \t0x00000001060bc734 std::__1::__function::__func<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'(), std::__1::allocator<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'()>, void ()>::operator()() + 52\r\n8   libtensorflow_framework.so    \t0x00000001060df9c0 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::function<void ()> > >(void*) + 96\r\n9   libsystem_pthread.dylib       \t0x00007fff7c6946c1 _pthread_body + 340\r\n10  libsystem_pthread.dylib       \t0x00007fff7c69456d _pthread_start + 377\r\n11  libsystem_pthread.dylib       \t0x00007fff7c693c5d thread_start + 13\r\n```\r\n\r\nOr this:\r\n```\r\nThread 12 Crashed:\r\n0   libsystem_kernel.dylib        \t0x00007fff7c55a1ea __semwait_signal_nocancel + 10\r\n1   libsystem_c.dylib             \t0x00007fff7c460097 nanosleep$NOCANCEL + 188\r\n2   libsystem_c.dylib             \t0x00007fff7c488931 usleep$NOCANCEL + 53\r\n3   libsystem_c.dylib             \t0x00007fff7c4b6334 abort + 137\r\n4   libsystem_malloc.dylib        \t0x00007fff7c5beb28 szone_error + 596\r\n5   libsystem_malloc.dylib        \t0x00007fff7c5b3658 tiny_malloc_from_free_list + 1155\r\n6   libsystem_malloc.dylib        \t0x00007fff7c5b2403 szone_malloc_should_clear + 422\r\n7   libsystem_malloc.dylib        \t0x00007fff7c5b2201 malloc_zone_malloc + 103\r\n8   libsystem_malloc.dylib        \t0x00007fff7c5b150b malloc + 24\r\n9   libc++abi.dylib               \t0x00007fff7a49b628 operator new(unsigned long) + 40\r\n10  _pywrap_tensorflow_internal.so\t0x0000000108c9bc16 tensorflow::ApplyAdamOp<Eigen::ThreadPoolDevice, float>::Compute(tensorflow::OpKernelContext*) + 70\r\n11  libtensorflow_framework.so    \t0x000000010e45488d tensorflow::ThreadPoolDevice::Compute(tensorflow::OpKernel*, tensorflow::OpKernelContext*) + 301\r\n12  libtensorflow_framework.so    \t0x000000010e42382b tensorflow::(anonymous namespace)::ExecutorState::Process(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long) + 4875\r\n13  libtensorflow_framework.so    \t0x000000010e42bd90 std::__1::__function::__func<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&>, std::__1::allocator<std::__1::__bind<void (tensorflow::(anonymous namespace)::ExecutorState::*)(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, long long), tensorflow::(anonymous namespace)::ExecutorState*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, long long&> >, void ()>::operator()() + 80\r\n14  libtensorflow_framework.so    \t0x000000010e0c9fc2 Eigen::NonBlockingThreadPoolTempl<tensorflow::thread::EigenEnvironment>::WorkerLoop(int) + 1922\r\n15  libtensorflow_framework.so    \t0x000000010e0c9734 std::__1::__function::__func<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'(), std::__1::allocator<tensorflow::thread::EigenEnvironment::CreateThread(std::__1::function<void ()>)::'lambda'()>, void ()>::operator()() + 52\r\n16  libtensorflow_framework.so    \t0x000000010e0ec9c0 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::function<void ()> > >(void*) + 96\r\n17  libsystem_pthread.dylib       \t0x00007fff7c6946c1 _pthread_body + 340\r\n18  libsystem_pthread.dylib       \t0x00007fff7c69456d _pthread_start + 377\r\n19  libsystem_pthread.dylib       \t0x00007fff7c693c5d thread_start + 13\r\n```\r\n\r\nThis might be related to our own C++ operation which has worked fine so far (we used it since TF 0.8), although of course this might be triggered only now by some race condition. Is there anything new I need to take care of? I think this NSync stuff is new?\r\n"}