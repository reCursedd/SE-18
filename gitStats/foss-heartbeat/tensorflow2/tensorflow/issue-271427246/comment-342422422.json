{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/342422422", "html_url": "https://github.com/tensorflow/tensorflow/issues/14285#issuecomment-342422422", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14285", "id": 342422422, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MjQyMjQyMg==", "user": {"login": "albertz", "id": 59132, "node_id": "MDQ6VXNlcjU5MTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/59132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertz", "html_url": "https://github.com/albertz", "followers_url": "https://api.github.com/users/albertz/followers", "following_url": "https://api.github.com/users/albertz/following{/other_user}", "gists_url": "https://api.github.com/users/albertz/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertz/subscriptions", "organizations_url": "https://api.github.com/users/albertz/orgs", "repos_url": "https://api.github.com/users/albertz/repos", "events_url": "https://api.github.com/users/albertz/events{/privacy}", "received_events_url": "https://api.github.com/users/albertz/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-07T09:20:49Z", "updated_at": "2017-11-07T10:18:31Z", "author_association": "NONE", "body_html": "<p>Thanks for the answers. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3731025\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/allenlavoie\">@allenlavoie</a>  The symbol you refer to is inside <code>struct Context</code> (a macro trick to make <code>OpKernelContext* context</code> from the outer scope available inside the functions there), so I don't think that symbol causes confusion.</p>\n<p>However, it's good that you mention libsystem_malloc.dylib. So, you assume the <code>malloc</code> from libsystem_malloc overwrites the <code>malloc</code> from libtensorflow_framework?<br>\nShould it also use jemalloc for <code>operator new</code>?<br>\nAre you sure it should use jemalloc on MacOSX? When looking into libtensorflow_framework, I see lots of references to <code>_malloc</code>, which I think should resolve to the one in libsystem_malloc.</p>\n<p>The <code>RTLD_GLOBAL</code> loaded lib is from <code>tensorflow.contrib.rnn.python.ops</code> and not my own. I wanted to access some symbols from that op (<code>LSTMBlock</code> utilities) inside my own op. Do you think that will cause the problem? But why exactly? Maybe I should link instead to it? <code>otool -L contrib/rnn/python/ops/_lstm_ops.so</code> gives me:</p>\n<pre><code>\t@rpath/_lstm_ops.so (compatibility version 0.0.0, current version 0.0.0)\n\t@rpath/libtensorflow_framework.so (compatibility version 0.0.0, current version 0.0.0)\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1)\n</code></pre>\n<p>The same for <code>libtensorflow_framework.so</code> gives me:</p>\n<pre><code>\t@rpath/libtensorflow_framework.so (compatibility version 0.0.0, current version 0.0.0)\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1)\n\t/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit (compatibility version 1.0.0, current version 275.0.0)\n</code></pre>\n<p>And <code>libSystem.B.dylib</code> links to <code>/usr/lib/system/libsystem_malloc.dylib</code>.<br>\n<strong>Edit: I just removed that <code>RTLD_GLOBAL</code> lib loading as I didn't need it anyway for the CPU-only version of my op. It made no difference. So that is not related to the problem.</strong><br>\n<strong>Edit 2: Also note, this whole workaround is there basically to solve <a href=\"https://stackoverflow.com/questions/41428756/own-tensorflow-op-with-cublassgemm\" rel=\"nofollow\">this</a>. Related is <a href=\"https://github.com/tensorflow/tensorflow/issues/6602\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/6602/hovercard\">this issue</a>.</strong><br>\n<strong>Edit 3: The problem also happens when I remove any of the custom <code>sgemm_</code> calls, which might have been related. But the crash still happens.</strong></p>\n<p>My own custom op, I load via <code>tf.load_op_library</code> (<a href=\"https://github.com/rwth-i6/returnn/blob/e06729e54131d4122d550bd0d576750b966a3f38/TFUtil.py#L2171\">here</a>), so I guess it will use <code>RTLD_LOCAL</code>.</p>", "body_text": "Thanks for the answers. @allenlavoie  The symbol you refer to is inside struct Context (a macro trick to make OpKernelContext* context from the outer scope available inside the functions there), so I don't think that symbol causes confusion.\nHowever, it's good that you mention libsystem_malloc.dylib. So, you assume the malloc from libsystem_malloc overwrites the malloc from libtensorflow_framework?\nShould it also use jemalloc for operator new?\nAre you sure it should use jemalloc on MacOSX? When looking into libtensorflow_framework, I see lots of references to _malloc, which I think should resolve to the one in libsystem_malloc.\nThe RTLD_GLOBAL loaded lib is from tensorflow.contrib.rnn.python.ops and not my own. I wanted to access some symbols from that op (LSTMBlock utilities) inside my own op. Do you think that will cause the problem? But why exactly? Maybe I should link instead to it? otool -L contrib/rnn/python/ops/_lstm_ops.so gives me:\n\t@rpath/_lstm_ops.so (compatibility version 0.0.0, current version 0.0.0)\n\t@rpath/libtensorflow_framework.so (compatibility version 0.0.0, current version 0.0.0)\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1)\n\nThe same for libtensorflow_framework.so gives me:\n\t@rpath/libtensorflow_framework.so (compatibility version 0.0.0, current version 0.0.0)\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1)\n\t/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit (compatibility version 1.0.0, current version 275.0.0)\n\nAnd libSystem.B.dylib links to /usr/lib/system/libsystem_malloc.dylib.\nEdit: I just removed that RTLD_GLOBAL lib loading as I didn't need it anyway for the CPU-only version of my op. It made no difference. So that is not related to the problem.\nEdit 2: Also note, this whole workaround is there basically to solve this. Related is this issue.\nEdit 3: The problem also happens when I remove any of the custom sgemm_ calls, which might have been related. But the crash still happens.\nMy own custom op, I load via tf.load_op_library (here), so I guess it will use RTLD_LOCAL.", "body": "Thanks for the answers. @allenlavoie  The symbol you refer to is inside `struct Context` (a macro trick to make `OpKernelContext* context` from the outer scope available inside the functions there), so I don't think that symbol causes confusion.\r\n\r\nHowever, it's good that you mention libsystem_malloc.dylib. So, you assume the `malloc` from libsystem_malloc overwrites the `malloc` from libtensorflow_framework?\r\nShould it also use jemalloc for `operator new`?\r\nAre you sure it should use jemalloc on MacOSX? When looking into libtensorflow_framework, I see lots of references to `_malloc`, which I think should resolve to the one in libsystem_malloc.\r\n\r\nThe `RTLD_GLOBAL` loaded lib is from `tensorflow.contrib.rnn.python.ops` and not my own. I wanted to access some symbols from that op (`LSTMBlock` utilities) inside my own op. Do you think that will cause the problem? But why exactly? Maybe I should link instead to it? `otool -L contrib/rnn/python/ops/_lstm_ops.so` gives me:\r\n```\r\n\t@rpath/_lstm_ops.so (compatibility version 0.0.0, current version 0.0.0)\r\n\t@rpath/libtensorflow_framework.so (compatibility version 0.0.0, current version 0.0.0)\r\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1)\r\n```\r\nThe same for `libtensorflow_framework.so` gives me:\r\n```\r\n\t@rpath/libtensorflow_framework.so (compatibility version 0.0.0, current version 0.0.0)\r\n\t/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1)\r\n\t/System/Library/Frameworks/IOKit.framework/Versions/A/IOKit (compatibility version 1.0.0, current version 275.0.0)\r\n```\r\nAnd `libSystem.B.dylib` links to `/usr/lib/system/libsystem_malloc.dylib`.\r\n**Edit: I just removed that `RTLD_GLOBAL` lib loading as I didn't need it anyway for the CPU-only version of my op. It made no difference. So that is not related to the problem.**\r\n**Edit 2: Also note, this whole workaround is there basically to solve [this](https://stackoverflow.com/questions/41428756/own-tensorflow-op-with-cublassgemm). Related is [this issue](https://github.com/tensorflow/tensorflow/issues/6602).**\r\n**Edit 3: The problem also happens when I remove any of the custom `sgemm_` calls, which might have been related. But the crash still happens.**\r\n\r\nMy own custom op, I load via `tf.load_op_library` ([here](https://github.com/rwth-i6/returnn/blob/e06729e54131d4122d550bd0d576750b966a3f38/TFUtil.py#L2171)), so I guess it will use `RTLD_LOCAL`.\r\n"}