{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/340672049", "html_url": "https://github.com/tensorflow/tensorflow/issues/14116#issuecomment-340672049", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14116", "id": 340672049, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDY3MjA0OQ==", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-31T06:25:01Z", "updated_at": "2017-10-31T06:25:01Z", "author_association": "MEMBER", "body_html": "<p>Thanks for your quick reply, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=49262\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jart\">@jart</a> . The <code>u</code> prefixes is intended to show that <code>py_func</code> cannot handle unicode string correctly.</p>\n<p>I indeed find that byte string always works well:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">test_string</span>(<span class=\"pl-smi\">x</span>):\n  x <span class=\"pl-k\">=</span> x.decode(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>utf8<span class=\"pl-pds\">\"</span></span>)\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> res = do_something_on(x)</span>\n  <span class=\"pl-k\">return</span> res.encode(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>utf8<span class=\"pl-pds\">\"</span></span>)</pre></div>\n<p>However, the workground really burdens users. It could be better if <code>py_func</code> can handle unicode string as well. Thank you.</p>", "body_text": "Thanks for your quick reply, @jart . The u prefixes is intended to show that py_func cannot handle unicode string correctly.\nI indeed find that byte string always works well:\ndef test_string(x):\n  x = x.decode(\"utf8\")\n  # res = do_something_on(x)\n  return res.encode(\"utf8\")\nHowever, the workground really burdens users. It could be better if py_func can handle unicode string as well. Thank you.", "body": "Thanks for your quick reply, @jart . The `u` prefixes is intended to show that `py_func` cannot handle unicode string correctly. \r\n\r\nI indeed find that byte string always works well:\r\n```python\r\ndef test_string(x):\r\n  x = x.decode(\"utf8\")\r\n  # res = do_something_on(x)\r\n  return res.encode(\"utf8\")\r\n```\r\nHowever, the workground really burdens users. It could be better if `py_func` can handle unicode string as well. Thank you."}