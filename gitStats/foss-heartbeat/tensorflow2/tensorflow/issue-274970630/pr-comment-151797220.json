{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/151797220", "pull_request_review_id": 77570653, "id": 151797220, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTc5NzIyMA==", "diff_hunk": "@@ -57,34 +61,15 @@ __global__ void RangeInitKernel(const T start, const T delta, const int32 size,\n   CUDA_1D_KERNEL_LOOP(i, size) { out[i] = start + i * delta; }\n }\n \n-__global__ void FindEndpointsKernel(const int32* partitions, int32 size,\n-                                    int32 nump, int32* start, int32* end) {\n-  CUDA_1D_KERNEL_LOOP(i, size) {\n-    int32 current = ldg(partitions + i);\n-    if (FastBoundsCheck(current, nump)) {\n-      if (i == 0)\n-        start[current] = i;\n-      else {\n-        int32 before = ldg(partitions + i - 1);\n-        if (before != current) start[current] = i;\n-      }\n-      if (i == size - 1)\n-        end[current] = i + 1;\n-      else {\n-        int32 after = ldg(partitions + i + 1);\n-        if (after != current) end[current] = i + 1;\n-      }\n-    }\n-  }\n-}\n-\n-// We create a local version of subtract, because the tf.subtract kernel\n-// is not defined for int32. We use it to compute the length of an interval\n-// by subtracting the endpoints.\n-__global__ void IntervalLengthKernel(int32* start, int32 size, int32* end) {\n-  CUDA_1D_KERNEL_LOOP(i, size) {\n-    int32 start_point = ldg(start + i);\n-    end[i] = end[i] - start_point;\n+__global__ void MoveValuesKernel(const int32* keys, const int32* values,\n+                                 const int32* size, int32 out_size,\n+                                 int32* out) {\n+  int32 N = ldg(size);\n+  if (N > out_size) N = out_size;", "path": "tensorflow/core/kernels/dynamic_partition_op_gpu.cu.cc", "position": null, "original_position": 71, "commit_id": "5b95ac1a2d5447b69532775029d7777399abc863", "original_commit_id": "b94e744534405a0d492920421e978152987ffa49", "user": {"login": "ekelsen", "id": 2533174, "node_id": "MDQ6VXNlcjI1MzMxNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2533174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekelsen", "html_url": "https://github.com/ekelsen", "followers_url": "https://api.github.com/users/ekelsen/followers", "following_url": "https://api.github.com/users/ekelsen/following{/other_user}", "gists_url": "https://api.github.com/users/ekelsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekelsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekelsen/subscriptions", "organizations_url": "https://api.github.com/users/ekelsen/orgs", "repos_url": "https://api.github.com/users/ekelsen/repos", "events_url": "https://api.github.com/users/ekelsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ekelsen/received_events", "type": "User", "site_admin": false}, "body": "int32 N = min(ldg(size), out_size);", "created_at": "2017-11-17T21:48:02Z", "updated_at": "2017-11-18T15:58:30Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14665#discussion_r151797220", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14665", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/151797220"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14665#discussion_r151797220"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14665"}}, "body_html": "<p>int32 N = min(ldg(size), out_size);</p>", "body_text": "int32 N = min(ldg(size), out_size);"}