{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/66903324", "pull_request_review_id": null, "id": 66903324, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTAzMzI0", "diff_hunk": "@@ -0,0 +1,126 @@\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+\"\"\"Non-linear estimator tests.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import random\n+\n+import numpy as np\n+import tensorflow as tf\n+from tensorflow.contrib.learn.python.learn.estimators._sklearn import accuracy_score\n+from tensorflow.contrib.learn.python.learn.estimators._sklearn import mean_squared_error\n+\n+\n+def rnn_input_fn(x):\n+  return tf.split(1, 5, x)\n+\n+data = np.array(\n+    list([[2, 1, 2, 2, 3], [2, 2, 3, 4, 5], [3, 3, 1, 2, 1], [2, 4, 5, 4, 1]\n+         ]),\n+    dtype=np.float32)\n+# labels for classification\n+labels = np.array(list([1, 0, 1, 0]), dtype=np.float32)\n+# targets for regression\n+targets = np.array(list([10, 16, 10, 16]), dtype=np.float32)\n+test_data = np.array(list([[1, 3, 3, 2, 1], [2, 3, 4, 5, 6]]),\n+                     dtype=np.float32)\n+\n+class RNNTest(tf.test.TestCase):\n+  \"\"\"Non-linear estimator tests.\"\"\"\n+\n+  def setUp(self):\n+    random.seed(42)\n+    tf.set_random_seed(42)\n+\n+  def testRNN(self):\n+    # Classification\n+    classifier = tf.contrib.learn.TensorFlowRNNClassifier(rnn_size=2,\n+                                                          cell_type=\"lstm\",\n+                                                          n_classes=2,\n+                                                          input_op_fn=rnn_input_fn)\n+    classifier.fit(data, labels)\n+    # pylint: disable=pointless-statement\n+    classifier.weights_\n+    classifier.bias_\n+    # pylint: enable=pointless-statement\n+    predictions = classifier.predict(test_data)\n+    self.assertAllClose(predictions, np.array([1, 0]))\n+\n+    classifier = tf.contrib.learn.TensorFlowRNNClassifier(rnn_size=2,\n+                                                          cell_type=\"rnn\",\n+                                                          n_classes=2,\n+                                                          input_op_fn=rnn_input_fn,\n+                                                          num_layers=2)\n+    classifier.fit(data, labels)\n+    classifier = tf.contrib.learn.TensorFlowRNNClassifier(\n+        rnn_size=2, cell_type=\"invalid_cell_type\", n_classes=2,\n+        input_op_fn=rnn_input_fn, num_layers=2)\n+    with self.assertRaises(ValueError):\n+      classifier.fit(data, labels)\n+\n+    # Regression\n+    regressor = tf.contrib.learn.TensorFlowRNNRegressor(rnn_size=2,\n+                                                        cell_type=\"gru\",\n+                                                        input_op_fn=rnn_input_fn)\n+    regressor.fit(data, targets)\n+    # pylint: disable=pointless-statement\n+    regressor.weights_\n+    regressor.bias_\n+    # pylint: enable=pointless-statement\n+    predictions = regressor.predict(test_data)\n+\n+    # bidirectional rnn with attention\n+    classifier = tf.contrib.learn.TensorFlowRNNClassifier(rnn_size=2,\n+                                                          cell_type=\"lstm\",\n+                                                          n_classes=2,\n+                                                          input_op_fn=rnn_input_fn,\n+                                                          bidirectional=False,\n+                                                          attn_length=2,\n+                                                          attn_size=2,\n+                                                          attn_vec_size=2)\n+    classifier.fit(data, labels)\n+    predictions = classifier.predict(test_data)\n+    self.assertAllClose(predictions, np.array([1, 0]))\n+\n+  def testBidirectionalRNN(self):\n+    # Classification\n+    classifier = tf.contrib.learn.TensorFlowRNNClassifier(rnn_size=2,\n+                                                          cell_type=\"lstm\",\n+                                                          n_classes=2,\n+                                                          input_op_fn=rnn_input_fn,\n+                                                          bidirectional=True)\n+    classifier.fit(data, labels)\n+    predictions = classifier.predict(test_data)\n+    self.assertAllClose(predictions, np.array([1, 0]))\n+\n+    # bidirectional rnn with attention\n+    classifier = tf.contrib.learn.TensorFlowRNNClassifier(rnn_size=2,\n+                                                          cell_type=\"lstm\",\n+                                                          n_classes=2,\n+                                                          input_op_fn=rnn_input_fn,\n+                                                          bidirectional=True,\n+                                                          attn_length=2,\n+                                                          attn_size=2,\n+                                                          attn_vec_size=2)\n+    classifier.fit(data, labels)\n+    predictions = classifier.predict(test_data)\n+    self.assertAllClose(predictions, np.array([1, 0]))\n+", "path": "tensorflow/contrib/learn/python/learn/estimators/rnn_test.py", "position": 105, "original_position": 124, "commit_id": "ac80141f0718c26b1d759b2a78286734f6681f4e", "original_commit_id": "10f868ebd315a97236964bcab8deaf11606466b8", "user": {"login": "ilblackdragon", "id": 175486, "node_id": "MDQ6VXNlcjE3NTQ4Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/175486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilblackdragon", "html_url": "https://github.com/ilblackdragon", "followers_url": "https://api.github.com/users/ilblackdragon/followers", "following_url": "https://api.github.com/users/ilblackdragon/following{/other_user}", "gists_url": "https://api.github.com/users/ilblackdragon/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilblackdragon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilblackdragon/subscriptions", "organizations_url": "https://api.github.com/users/ilblackdragon/orgs", "repos_url": "https://api.github.com/users/ilblackdragon/repos", "events_url": "https://api.github.com/users/ilblackdragon/events{/privacy}", "received_events_url": "https://api.github.com/users/ilblackdragon/received_events", "type": "User", "site_admin": false}, "body": "two new lines between top level functions / classes / etc.\n", "created_at": "2016-06-14T03:10:01Z", "updated_at": "2016-06-14T03:57:16Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/2820#discussion_r66903324", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2820", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/66903324"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/2820#discussion_r66903324"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/2820"}}, "body_html": "<p>two new lines between top level functions / classes / etc.</p>", "body_text": "two new lines between top level functions / classes / etc."}