{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/285092629", "html_url": "https://github.com/tensorflow/tensorflow/issues/8191#issuecomment-285092629", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8191", "id": 285092629, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTA5MjYyOQ==", "user": {"login": "tongda", "id": 653425, "node_id": "MDQ6VXNlcjY1MzQyNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/653425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tongda", "html_url": "https://github.com/tongda", "followers_url": "https://api.github.com/users/tongda/followers", "following_url": "https://api.github.com/users/tongda/following{/other_user}", "gists_url": "https://api.github.com/users/tongda/gists{/gist_id}", "starred_url": "https://api.github.com/users/tongda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tongda/subscriptions", "organizations_url": "https://api.github.com/users/tongda/orgs", "repos_url": "https://api.github.com/users/tongda/repos", "events_url": "https://api.github.com/users/tongda/events{/privacy}", "received_events_url": "https://api.github.com/users/tongda/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-08T16:35:15Z", "updated_at": "2017-03-08T16:35:15Z", "author_association": "NONE", "body_html": "<p>I met the same issue. If you are all using compiled version on master branch, I believe that we are the same issue caused by the <a href=\"https://github.com/tensorflow/tensorflow/commit/54d50ffec8df4f748694632dbe5ebde9971e2c9e\">recent commit</a>. As the commit message says:</p>\n<blockquote>\n<p>Make all RNNCells in tf.contrib.rnn act like tf.layers Layers, but with stricter semantics for no<br>\nw:</p>\n<ol>\n<li>\n<p>Upon first use of <strong>call</strong>, the used scope is stored in the cell. The RNNCell tries to create weights in that scope but if some are already set, an error is raised unless the RNNCell was constructed with argument reuse=True.</p>\n</li>\n<li>\n<p>A subsequent use of <strong>call</strong> of the same cell instance must be in the same scope.<br>\nIf it is not, an error is raised.</p>\n</li>\n</ol>\n</blockquote>\n<p>From my case, which is running the <a href=\"https://github.com/tensorflow/models/tree/master/tutorials/rnn/ptb\">ptb tutorial</a>, the solution is just to add a parameter named with <code>reuse</code> like this at line 112:</p>\n<pre><code>def lstm_cell():\n  return tf.contrib.rnn.BasicLSTMCell(\n      size, forget_bias=0.0, state_is_tuple=True, reuse=tf.get_variable_scope().reuse)\n</code></pre>\n<p>Then it works.</p>", "body_text": "I met the same issue. If you are all using compiled version on master branch, I believe that we are the same issue caused by the recent commit. As the commit message says:\n\nMake all RNNCells in tf.contrib.rnn act like tf.layers Layers, but with stricter semantics for no\nw:\n\n\nUpon first use of call, the used scope is stored in the cell. The RNNCell tries to create weights in that scope but if some are already set, an error is raised unless the RNNCell was constructed with argument reuse=True.\n\n\nA subsequent use of call of the same cell instance must be in the same scope.\nIf it is not, an error is raised.\n\n\n\nFrom my case, which is running the ptb tutorial, the solution is just to add a parameter named with reuse like this at line 112:\ndef lstm_cell():\n  return tf.contrib.rnn.BasicLSTMCell(\n      size, forget_bias=0.0, state_is_tuple=True, reuse=tf.get_variable_scope().reuse)\n\nThen it works.", "body": "I met the same issue. If you are all using compiled version on master branch, I believe that we are the same issue caused by the [recent commit](https://github.com/tensorflow/tensorflow/commit/54d50ffec8df4f748694632dbe5ebde9971e2c9e). As the commit message says:\r\n\r\n> Make all RNNCells in tf.contrib.rnn act like tf.layers Layers, but with stricter semantics for no\r\nw:\r\n>\r\n>    1. Upon first use of __call__, the used scope is stored in the cell. The RNNCell tries to create weights in that scope but if some are already set, an error is raised unless the RNNCell was constructed with argument reuse=True.\r\n>\r\n>    2. A subsequent use of __call__ of the same cell instance must be in the same scope.\r\n>       If it is not, an error is raised.\r\n\r\nFrom my case, which is running the [ptb tutorial](https://github.com/tensorflow/models/tree/master/tutorials/rnn/ptb), the solution is just to add a parameter named with `reuse` like this at line 112:\r\n\r\n    def lstm_cell():\r\n      return tf.contrib.rnn.BasicLSTMCell(\r\n          size, forget_bias=0.0, state_is_tuple=True, reuse=tf.get_variable_scope().reuse)\r\n\r\nThen it works."}