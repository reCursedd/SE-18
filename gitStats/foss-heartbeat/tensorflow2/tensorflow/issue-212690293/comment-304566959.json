{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/304566959", "html_url": "https://github.com/tensorflow/tensorflow/issues/8191#issuecomment-304566959", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8191", "id": 304566959, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNDU2Njk1OQ==", "user": {"login": "SunnerLi", "id": 11500871, "node_id": "MDQ6VXNlcjExNTAwODcx", "avatar_url": "https://avatars0.githubusercontent.com/u/11500871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SunnerLi", "html_url": "https://github.com/SunnerLi", "followers_url": "https://api.github.com/users/SunnerLi/followers", "following_url": "https://api.github.com/users/SunnerLi/following{/other_user}", "gists_url": "https://api.github.com/users/SunnerLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/SunnerLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SunnerLi/subscriptions", "organizations_url": "https://api.github.com/users/SunnerLi/orgs", "repos_url": "https://api.github.com/users/SunnerLi/repos", "events_url": "https://api.github.com/users/SunnerLi/events{/privacy}", "received_events_url": "https://api.github.com/users/SunnerLi/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-29T03:52:35Z", "updated_at": "2017-05-29T03:52:58Z", "author_association": "NONE", "body_html": "<p>As the rookie, I raise some of my opinion.<br>\nThe following code will make this similar mistake occure:<br>\n(Piece of my code)</p>\n<div class=\"highlight highlight-source-python\"><pre>lstm_cell <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.LSTMCell(<span class=\"pl-c1\">self</span>.num_hidden)\nlstm_entity <span class=\"pl-k\">=</span> tf.contrib.rnn.DropoutWrapper(lstm_cell, <span class=\"pl-v\">output_keep_prob</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.5</span>)\nlayer <span class=\"pl-k\">=</span> tf.contrib.rnn.MultiRNNCell([lstm_entity] <span class=\"pl-k\">*</span> <span class=\"pl-c1\">self</span>.num_layer)\n__, _ <span class=\"pl-k\">=</span> tf.nn.dynamic_rnn(layer, <span class=\"pl-c1\">self</span>.data, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float64)</pre></div>\n<p>The error dump as the following:</p>\n<pre><code>Traceback (most recent call last):\n  File \"IntentNet.py\", line 71, in &lt;module&gt;\n    net = Net(data, target, 5, 1)\n  File \"IntentNet.py\", line 45, in __init__\n    __, _ = tf.nn.dynamic_rnn(layer, self.data, dtype=tf.float64)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/rnn.py\", line 553, in dynamic_rnn\n    dtype=dtype)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/rnn.py\", line 720, in _dynamic_rnn_loop\n    swap_memory=swap_memory)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 2623, in while_loop\n    result = context.BuildLoop(cond, body, loop_vars, shape_invariants)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 2456, in BuildLoop\n    pred, body, original_loop_vars, loop_vars, shape_invariants)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 2406, in _BuildLoop\n    body_result = body(*packed_vars_for_body)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/rnn.py\", line 705, in _time_step\n    (output, new_state) = call_cell()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/rnn.py\", line 691, in &lt;lambda&gt;\n    call_cell = lambda: cell(input_t, state)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.py\", line 953, in __call__\n    cur_inp, new_state = cell(cur_inp, cur_state)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.py\", line 713, in __call__\n    output, new_state = self._cell(inputs, state, scope)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.py\", line 235, in __call__\n    with _checked_scope(self, scope or \"basic_lstm_cell\", reuse=self._reuse):\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\n    return self.gen.next()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.py\", line 77, in _checked_scope\n    type(cell).__name__))\nValueError: Attempt to reuse RNNCell &lt;tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.BasicLSTMCell object at 0x7fe4fc7bd150&gt; with a different variable scope than its first use.  First use of cell was with scope 'rnn/multi_rnn_cell/cell_0/basic_lstm_cell', this attempt is with scope 'rnn/multi_rnn_cell/cell_1/basic_lstm_cell'.  Please create a new instance of the cell if you would like it to use a different set of weights.  If before you were using: MultiRNNCell([BasicLSTMCell(...)] * num_layers), change to: MultiRNNCell([BasicLSTMCell(...) for _ in range(num_layers)]).  If before you were using the same cell instance as both the forward and reverse cell of a bidirectional RNN, simply create two instances (one for forward, one for reverse).  In May 2017, we will start transitioning this cell's behavior to use existing stored weights, if any, when it is called with scope=None (which can lead to silent model degradation, so this error will remain until then.)\n</code></pre>\n<p>But after I do the revision, It can work.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">lstm_cell = self.LSTMCell(self.num_hidden)</span>\n<span class=\"pl-s\">lstm_entity = tf.contrib.rnn.DropoutWrapper(lstm_cell, output_keep_prob=0.5)</span>\n<span class=\"pl-s\">layer = tf.contrib.rnn.MultiRNNCell([lstm_entity] * self.num_layer)</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\nlayer <span class=\"pl-k\">=</span> []\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">self</span>.num_layer):\n    lstm_cell <span class=\"pl-k\">=</span> <span class=\"pl-c1\">self</span>.LSTMCell(<span class=\"pl-c1\">self</span>.num_hidden)\n    lstm_entity <span class=\"pl-k\">=</span> tf.contrib.rnn.DropoutWrapper(lstm_cell, <span class=\"pl-v\">output_keep_prob</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.5</span>)\n    layer.append(lstm_entity)\nlayer <span class=\"pl-k\">=</span> tf.contrib.rnn.MultiRNNCell(layer)\n__, _ <span class=\"pl-k\">=</span> tf.nn.dynamic_rnn(layer, <span class=\"pl-c1\">self</span>.data, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float64)</pre></div>", "body_text": "As the rookie, I raise some of my opinion.\nThe following code will make this similar mistake occure:\n(Piece of my code)\nlstm_cell = self.LSTMCell(self.num_hidden)\nlstm_entity = tf.contrib.rnn.DropoutWrapper(lstm_cell, output_keep_prob=0.5)\nlayer = tf.contrib.rnn.MultiRNNCell([lstm_entity] * self.num_layer)\n__, _ = tf.nn.dynamic_rnn(layer, self.data, dtype=tf.float64)\nThe error dump as the following:\nTraceback (most recent call last):\n  File \"IntentNet.py\", line 71, in <module>\n    net = Net(data, target, 5, 1)\n  File \"IntentNet.py\", line 45, in __init__\n    __, _ = tf.nn.dynamic_rnn(layer, self.data, dtype=tf.float64)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/rnn.py\", line 553, in dynamic_rnn\n    dtype=dtype)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/rnn.py\", line 720, in _dynamic_rnn_loop\n    swap_memory=swap_memory)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 2623, in while_loop\n    result = context.BuildLoop(cond, body, loop_vars, shape_invariants)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 2456, in BuildLoop\n    pred, body, original_loop_vars, loop_vars, shape_invariants)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 2406, in _BuildLoop\n    body_result = body(*packed_vars_for_body)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/rnn.py\", line 705, in _time_step\n    (output, new_state) = call_cell()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/rnn.py\", line 691, in <lambda>\n    call_cell = lambda: cell(input_t, state)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.py\", line 953, in __call__\n    cur_inp, new_state = cell(cur_inp, cur_state)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.py\", line 713, in __call__\n    output, new_state = self._cell(inputs, state, scope)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.py\", line 235, in __call__\n    with _checked_scope(self, scope or \"basic_lstm_cell\", reuse=self._reuse):\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\n    return self.gen.next()\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.py\", line 77, in _checked_scope\n    type(cell).__name__))\nValueError: Attempt to reuse RNNCell <tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.BasicLSTMCell object at 0x7fe4fc7bd150> with a different variable scope than its first use.  First use of cell was with scope 'rnn/multi_rnn_cell/cell_0/basic_lstm_cell', this attempt is with scope 'rnn/multi_rnn_cell/cell_1/basic_lstm_cell'.  Please create a new instance of the cell if you would like it to use a different set of weights.  If before you were using: MultiRNNCell([BasicLSTMCell(...)] * num_layers), change to: MultiRNNCell([BasicLSTMCell(...) for _ in range(num_layers)]).  If before you were using the same cell instance as both the forward and reverse cell of a bidirectional RNN, simply create two instances (one for forward, one for reverse).  In May 2017, we will start transitioning this cell's behavior to use existing stored weights, if any, when it is called with scope=None (which can lead to silent model degradation, so this error will remain until then.)\n\nBut after I do the revision, It can work.\n\"\"\"\nlstm_cell = self.LSTMCell(self.num_hidden)\nlstm_entity = tf.contrib.rnn.DropoutWrapper(lstm_cell, output_keep_prob=0.5)\nlayer = tf.contrib.rnn.MultiRNNCell([lstm_entity] * self.num_layer)\n\"\"\"\nlayer = []\nfor i in range(self.num_layer):\n    lstm_cell = self.LSTMCell(self.num_hidden)\n    lstm_entity = tf.contrib.rnn.DropoutWrapper(lstm_cell, output_keep_prob=0.5)\n    layer.append(lstm_entity)\nlayer = tf.contrib.rnn.MultiRNNCell(layer)\n__, _ = tf.nn.dynamic_rnn(layer, self.data, dtype=tf.float64)", "body": "As the rookie, I raise some of my opinion.\r\nThe following code will make this similar mistake occure:\r\n(Piece of my code)\r\n```python\r\nlstm_cell = self.LSTMCell(self.num_hidden)\r\nlstm_entity = tf.contrib.rnn.DropoutWrapper(lstm_cell, output_keep_prob=0.5)\r\nlayer = tf.contrib.rnn.MultiRNNCell([lstm_entity] * self.num_layer)\r\n__, _ = tf.nn.dynamic_rnn(layer, self.data, dtype=tf.float64)\r\n```\r\nThe error dump as the following:\r\n```\r\nTraceback (most recent call last):\r\n  File \"IntentNet.py\", line 71, in <module>\r\n    net = Net(data, target, 5, 1)\r\n  File \"IntentNet.py\", line 45, in __init__\r\n    __, _ = tf.nn.dynamic_rnn(layer, self.data, dtype=tf.float64)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/rnn.py\", line 553, in dynamic_rnn\r\n    dtype=dtype)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/rnn.py\", line 720, in _dynamic_rnn_loop\r\n    swap_memory=swap_memory)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 2623, in while_loop\r\n    result = context.BuildLoop(cond, body, loop_vars, shape_invariants)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 2456, in BuildLoop\r\n    pred, body, original_loop_vars, loop_vars, shape_invariants)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 2406, in _BuildLoop\r\n    body_result = body(*packed_vars_for_body)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/rnn.py\", line 705, in _time_step\r\n    (output, new_state) = call_cell()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/ops/rnn.py\", line 691, in <lambda>\r\n    call_cell = lambda: cell(input_t, state)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.py\", line 953, in __call__\r\n    cur_inp, new_state = cell(cur_inp, cur_state)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.py\", line 713, in __call__\r\n    output, new_state = self._cell(inputs, state, scope)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.py\", line 235, in __call__\r\n    with _checked_scope(self, scope or \"basic_lstm_cell\", reuse=self._reuse):\r\n  File \"/usr/lib/python2.7/contextlib.py\", line 17, in __enter__\r\n    return self.gen.next()\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/rnn/python/ops/core_rnn_cell_impl.py\", line 77, in _checked_scope\r\n    type(cell).__name__))\r\nValueError: Attempt to reuse RNNCell <tensorflow.contrib.rnn.python.ops.core_rnn_cell_impl.BasicLSTMCell object at 0x7fe4fc7bd150> with a different variable scope than its first use.  First use of cell was with scope 'rnn/multi_rnn_cell/cell_0/basic_lstm_cell', this attempt is with scope 'rnn/multi_rnn_cell/cell_1/basic_lstm_cell'.  Please create a new instance of the cell if you would like it to use a different set of weights.  If before you were using: MultiRNNCell([BasicLSTMCell(...)] * num_layers), change to: MultiRNNCell([BasicLSTMCell(...) for _ in range(num_layers)]).  If before you were using the same cell instance as both the forward and reverse cell of a bidirectional RNN, simply create two instances (one for forward, one for reverse).  In May 2017, we will start transitioning this cell's behavior to use existing stored weights, if any, when it is called with scope=None (which can lead to silent model degradation, so this error will remain until then.)\r\n```\r\n\r\nBut after I do the revision, It can work.\r\n```python\r\n\"\"\"\r\nlstm_cell = self.LSTMCell(self.num_hidden)\r\nlstm_entity = tf.contrib.rnn.DropoutWrapper(lstm_cell, output_keep_prob=0.5)\r\nlayer = tf.contrib.rnn.MultiRNNCell([lstm_entity] * self.num_layer)\r\n\"\"\"\r\nlayer = []\r\nfor i in range(self.num_layer):\r\n    lstm_cell = self.LSTMCell(self.num_hidden)\r\n    lstm_entity = tf.contrib.rnn.DropoutWrapper(lstm_cell, output_keep_prob=0.5)\r\n    layer.append(lstm_entity)\r\nlayer = tf.contrib.rnn.MultiRNNCell(layer)\r\n__, _ = tf.nn.dynamic_rnn(layer, self.data, dtype=tf.float64)\r\n```"}