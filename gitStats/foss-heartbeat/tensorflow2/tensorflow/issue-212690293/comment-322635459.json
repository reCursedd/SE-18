{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/322635459", "html_url": "https://github.com/tensorflow/tensorflow/issues/8191#issuecomment-322635459", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8191", "id": 322635459, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMjYzNTQ1OQ==", "user": {"login": "LevineHuang", "id": 19391116, "node_id": "MDQ6VXNlcjE5MzkxMTE2", "avatar_url": "https://avatars1.githubusercontent.com/u/19391116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LevineHuang", "html_url": "https://github.com/LevineHuang", "followers_url": "https://api.github.com/users/LevineHuang/followers", "following_url": "https://api.github.com/users/LevineHuang/following{/other_user}", "gists_url": "https://api.github.com/users/LevineHuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/LevineHuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LevineHuang/subscriptions", "organizations_url": "https://api.github.com/users/LevineHuang/orgs", "repos_url": "https://api.github.com/users/LevineHuang/repos", "events_url": "https://api.github.com/users/LevineHuang/events{/privacy}", "received_events_url": "https://api.github.com/users/LevineHuang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-16T01:23:30Z", "updated_at": "2017-08-16T01:38:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16899081\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Tshzzz\">@Tshzzz</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=677913\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jtubert\">@jtubert</a><br>\nthx, your solution worked for me. My tf verstion is 1.1.0.</p>\n<p>I changed from:</p>\n<div class=\"highlight highlight-source-python\"><pre>    lstm_cell <span class=\"pl-k\">=</span> tf.contrib.rnn.BasicLSTMCell(<span class=\"pl-c1\">HIDDEN_SIZE</span>, <span class=\"pl-v\">state_is_tuple</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n    cell <span class=\"pl-k\">=</span> tf.contrib.rnn.MultiRNNCell([lstm_cell() <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">NUM_LAYERS</span>)])\n    output, _ <span class=\"pl-k\">=</span> tf.nn.dynamic_rnn(cell, X, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)  </pre></div>\n<p>to:</p>\n<div class=\"highlight highlight-source-python\"><pre>    cells<span class=\"pl-k\">=</span>[]\n    <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">NUM_LAYERS</span>):\n        cell <span class=\"pl-k\">=</span> tf.contrib.rnn.BasicLSTMCell(<span class=\"pl-c1\">HIDDEN_SIZE</span>, <span class=\"pl-v\">state_is_tuple</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n        cells.append(cell)\n    multicell <span class=\"pl-k\">=</span> tf.contrib.rnn.MultiRNNCell(cells, <span class=\"pl-v\">state_is_tuple</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n    output, _ <span class=\"pl-k\">=</span> tf.nn.dynamic_rnn(multicell, X, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)</pre></div>", "body_text": "@Tshzzz @jtubert\nthx, your solution worked for me. My tf verstion is 1.1.0.\nI changed from:\n    lstm_cell = tf.contrib.rnn.BasicLSTMCell(HIDDEN_SIZE, state_is_tuple=True)\n    cell = tf.contrib.rnn.MultiRNNCell([lstm_cell() for _ in range(NUM_LAYERS)])\n    output, _ = tf.nn.dynamic_rnn(cell, X, dtype=tf.float32)  \nto:\n    cells=[]\n    for _ in range(NUM_LAYERS):\n        cell = tf.contrib.rnn.BasicLSTMCell(HIDDEN_SIZE, state_is_tuple=True)\n        cells.append(cell)\n    multicell = tf.contrib.rnn.MultiRNNCell(cells, state_is_tuple=True)\n    output, _ = tf.nn.dynamic_rnn(multicell, X, dtype=tf.float32)", "body": "@Tshzzz @jtubert \r\nthx, your solution worked for me. My tf verstion is 1.1.0.\r\n\r\nI changed from:\r\n```python\r\n    lstm_cell = tf.contrib.rnn.BasicLSTMCell(HIDDEN_SIZE, state_is_tuple=True)\r\n    cell = tf.contrib.rnn.MultiRNNCell([lstm_cell() for _ in range(NUM_LAYERS)])\r\n    output, _ = tf.nn.dynamic_rnn(cell, X, dtype=tf.float32)  \r\n```\r\nto:\r\n```python\r\n    cells=[]\r\n    for _ in range(NUM_LAYERS):\r\n        cell = tf.contrib.rnn.BasicLSTMCell(HIDDEN_SIZE, state_is_tuple=True)\r\n        cells.append(cell)\r\n    multicell = tf.contrib.rnn.MultiRNNCell(cells, state_is_tuple=True)\r\n    output, _ = tf.nn.dynamic_rnn(multicell, X, dtype=tf.float32)\r\n```\r\n"}