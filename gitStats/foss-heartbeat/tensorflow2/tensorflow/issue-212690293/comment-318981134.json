{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/318981134", "html_url": "https://github.com/tensorflow/tensorflow/issues/8191#issuecomment-318981134", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8191", "id": 318981134, "node_id": "MDEyOklzc3VlQ29tbWVudDMxODk4MTEzNA==", "user": {"login": "huxuanlai", "id": 5986163, "node_id": "MDQ6VXNlcjU5ODYxNjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/5986163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huxuanlai", "html_url": "https://github.com/huxuanlai", "followers_url": "https://api.github.com/users/huxuanlai/followers", "following_url": "https://api.github.com/users/huxuanlai/following{/other_user}", "gists_url": "https://api.github.com/users/huxuanlai/gists{/gist_id}", "starred_url": "https://api.github.com/users/huxuanlai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huxuanlai/subscriptions", "organizations_url": "https://api.github.com/users/huxuanlai/orgs", "repos_url": "https://api.github.com/users/huxuanlai/repos", "events_url": "https://api.github.com/users/huxuanlai/events{/privacy}", "received_events_url": "https://api.github.com/users/huxuanlai/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-31T06:36:59Z", "updated_at": "2017-07-31T06:36:59Z", "author_association": "NONE", "body_html": "<p>Move the code on cell definition into seq2seq_f:</p>\n<pre><code>def seq2seq_f(encoder_inputs, decoder_inputs, do_decode):\n      def single_cell():\n        return tf.contrib.rnn.GRUCell(size)\n      if use_lstm:\n        def single_cell():\n          return tf.contrib.rnn.BasicLSTMCell(size)\n      cell = single_cell()\n      if num_layers &gt; 1:\n        cell = tf.contrib.rnn.MultiRNNCell([single_cell() for _ in range(num_layers)])\n      return tf.contrib.legacy_seq2seq.embedding_attention_seq2seq(\n\t  ...\n\t  )\n</code></pre>\n<p>Then \"python translate.py --data_dir data/ --train_dir checkpoint/ --size=256 --num_layers=2 --steps_per_checkpoint=50\" can work.</p>", "body_text": "Move the code on cell definition into seq2seq_f:\ndef seq2seq_f(encoder_inputs, decoder_inputs, do_decode):\n      def single_cell():\n        return tf.contrib.rnn.GRUCell(size)\n      if use_lstm:\n        def single_cell():\n          return tf.contrib.rnn.BasicLSTMCell(size)\n      cell = single_cell()\n      if num_layers > 1:\n        cell = tf.contrib.rnn.MultiRNNCell([single_cell() for _ in range(num_layers)])\n      return tf.contrib.legacy_seq2seq.embedding_attention_seq2seq(\n\t  ...\n\t  )\n\nThen \"python translate.py --data_dir data/ --train_dir checkpoint/ --size=256 --num_layers=2 --steps_per_checkpoint=50\" can work.", "body": "Move the code on cell definition into seq2seq_f:\r\n\r\n```\r\ndef seq2seq_f(encoder_inputs, decoder_inputs, do_decode):\r\n      def single_cell():\r\n        return tf.contrib.rnn.GRUCell(size)\r\n      if use_lstm:\r\n        def single_cell():\r\n          return tf.contrib.rnn.BasicLSTMCell(size)\r\n      cell = single_cell()\r\n      if num_layers > 1:\r\n        cell = tf.contrib.rnn.MultiRNNCell([single_cell() for _ in range(num_layers)])\r\n      return tf.contrib.legacy_seq2seq.embedding_attention_seq2seq(\r\n\t  ...\r\n\t  )\r\n```\r\nThen \"python translate.py --data_dir data/ --train_dir checkpoint/ --size=256 --num_layers=2 --steps_per_checkpoint=50\" can work.\r\n\r\n"}