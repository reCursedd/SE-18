{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19084", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19084/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19084/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19084/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19084", "id": 320269082, "node_id": "MDU6SXNzdWUzMjAyNjkwODI=", "number": 19084, "title": "tensorflow.nn.dynamic_rnn with variable as init_state cannot work with Estimator.train", "user": {"login": "iron9light", "id": 64274, "node_id": "MDQ6VXNlcjY0Mjc0", "avatar_url": "https://avatars3.githubusercontent.com/u/64274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iron9light", "html_url": "https://github.com/iron9light", "followers_url": "https://api.github.com/users/iron9light/followers", "following_url": "https://api.github.com/users/iron9light/following{/other_user}", "gists_url": "https://api.github.com/users/iron9light/gists{/gist_id}", "starred_url": "https://api.github.com/users/iron9light/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iron9light/subscriptions", "organizations_url": "https://api.github.com/users/iron9light/orgs", "repos_url": "https://api.github.com/users/iron9light/repos", "events_url": "https://api.github.com/users/iron9light/events{/privacy}", "received_events_url": "https://api.github.com/users/iron9light/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, {"login": "qlzh727", "id": 5118881, "node_id": "MDQ6VXNlcjUxMTg4ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5118881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qlzh727", "html_url": "https://github.com/qlzh727", "followers_url": "https://api.github.com/users/qlzh727/followers", "following_url": "https://api.github.com/users/qlzh727/following{/other_user}", "gists_url": "https://api.github.com/users/qlzh727/gists{/gist_id}", "starred_url": "https://api.github.com/users/qlzh727/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qlzh727/subscriptions", "organizations_url": "https://api.github.com/users/qlzh727/orgs", "repos_url": "https://api.github.com/users/qlzh727/repos", "events_url": "https://api.github.com/users/qlzh727/events{/privacy}", "received_events_url": "https://api.github.com/users/qlzh727/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 13, "created_at": "2018-05-04T13:10:17Z", "updated_at": "2018-11-11T18:39:38Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:Windows10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:binary</li>\n<li><strong>TensorFlow version (use command below)</strong>:1.8.0</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I wrote my own function to generate the init state variable</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">get_initial_cell_state</span>(<span class=\"pl-smi\">cell</span>, <span class=\"pl-smi\">batch_size</span>, <span class=\"pl-smi\">dtype</span>):\n  state_size <span class=\"pl-k\">=</span> cell.state_size\n  i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">get_state_shape</span>(<span class=\"pl-smi\">s</span>):\n    c <span class=\"pl-k\">=</span> _concat(<span class=\"pl-c1\">1</span>, s, <span class=\"pl-v\">static</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n    <span class=\"pl-k\">nonlocal</span> i\n    name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>init_state_<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">str</span>(i)\n    i <span class=\"pl-k\">=</span> i <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>\n    size <span class=\"pl-k\">=</span> tf.get_variable(name, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>c, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype, <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.initializers.zeros)\n    size <span class=\"pl-k\">=</span> tf.tile(size, [batch_size] <span class=\"pl-k\">+</span> [<span class=\"pl-c1\">1</span>] <span class=\"pl-k\">*</span> (<span class=\"pl-c1\">len</span>(c) <span class=\"pl-k\">-</span> <span class=\"pl-c1\">1</span>))\n    <span class=\"pl-k\">return</span> size\n  <span class=\"pl-k\">return</span> nest.map_structure(get_state_shape, state_size)</pre></div>\n<p>And use it as below:</p>\n<div class=\"highlight highlight-source-python\"><pre>  rnn_output, _ <span class=\"pl-k\">=</span> tf.nn.dynamic_rnn(\n    <span class=\"pl-v\">cell</span><span class=\"pl-k\">=</span>cell,\n    <span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>inputs,\n    <span class=\"pl-v\">initial_state</span><span class=\"pl-k\">=</span>get_initial_cell_state(cell, <span class=\"pl-v\">batch_size</span><span class=\"pl-k\">=</span>batch_size, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32),\n    <span class=\"pl-v\">parallel_iterations</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">128</span>,\n    <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32\n  )</pre></div>\n<p>It's compilable and runnable. But got this error:</p>\n<p><code>WARNING:tensorflow:It seems that global step (tf.train.get_global_step) has not been increased. Current value (could be stable): 0 vs previous value: 0. You could increase the global step by passing tf.train.get_global_step() to Optimizer.apply_gradients or Optimizer.minimize.</code></p>\n<p>I use Estimator to train. If I don't use this init state variable, everything goes fine.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):Windows10\nTensorFlow installed from (source or binary):binary\nTensorFlow version (use command below):1.8.0\nPython version: 3.6\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nDescribe the problem\nI wrote my own function to generate the init state variable\ndef get_initial_cell_state(cell, batch_size, dtype):\n  state_size = cell.state_size\n  i = 0\n  def get_state_shape(s):\n    c = _concat(1, s, static=True)\n    nonlocal i\n    name = \"init_state_\" + str(i)\n    i = i + 1\n    size = tf.get_variable(name, shape=c, dtype=dtype, initializer=tf.initializers.zeros)\n    size = tf.tile(size, [batch_size] + [1] * (len(c) - 1))\n    return size\n  return nest.map_structure(get_state_shape, state_size)\nAnd use it as below:\n  rnn_output, _ = tf.nn.dynamic_rnn(\n    cell=cell,\n    inputs=inputs,\n    initial_state=get_initial_cell_state(cell, batch_size=batch_size, dtype=tf.float32),\n    parallel_iterations=128,\n    dtype=tf.float32\n  )\nIt's compilable and runnable. But got this error:\nWARNING:tensorflow:It seems that global step (tf.train.get_global_step) has not been increased. Current value (could be stable): 0 vs previous value: 0. You could increase the global step by passing tf.train.get_global_step() to Optimizer.apply_gradients or Optimizer.minimize.\nI use Estimator to train. If I don't use this init state variable, everything goes fine.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:Windows10\r\n- **TensorFlow installed from (source or binary)**:binary\r\n- **TensorFlow version (use command below)**:1.8.0\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nI wrote my own function to generate the init state variable\r\n\r\n```python\r\ndef get_initial_cell_state(cell, batch_size, dtype):\r\n  state_size = cell.state_size\r\n  i = 0\r\n  def get_state_shape(s):\r\n    c = _concat(1, s, static=True)\r\n    nonlocal i\r\n    name = \"init_state_\" + str(i)\r\n    i = i + 1\r\n    size = tf.get_variable(name, shape=c, dtype=dtype, initializer=tf.initializers.zeros)\r\n    size = tf.tile(size, [batch_size] + [1] * (len(c) - 1))\r\n    return size\r\n  return nest.map_structure(get_state_shape, state_size)\r\n```\r\n\r\nAnd use it as below:\r\n\r\n```python\r\n  rnn_output, _ = tf.nn.dynamic_rnn(\r\n    cell=cell,\r\n    inputs=inputs,\r\n    initial_state=get_initial_cell_state(cell, batch_size=batch_size, dtype=tf.float32),\r\n    parallel_iterations=128,\r\n    dtype=tf.float32\r\n  )\r\n```\r\n\r\nIt's compilable and runnable. But got this error:\r\n\r\n`WARNING:tensorflow:It seems that global step (tf.train.get_global_step) has not been increased. Current value (could be stable): 0 vs previous value: 0. You could increase the global step by passing tf.train.get_global_step() to Optimizer.apply_gradients or Optimizer.minimize.`\r\n\r\nI use Estimator to train. If I don't use this init state variable, everything goes fine.\r\n"}