{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/420725107", "html_url": "https://github.com/tensorflow/tensorflow/issues/19084#issuecomment-420725107", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19084", "id": 420725107, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDcyNTEwNw==", "user": {"login": "qlzh727", "id": 5118881, "node_id": "MDQ6VXNlcjUxMTg4ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5118881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qlzh727", "html_url": "https://github.com/qlzh727", "followers_url": "https://api.github.com/users/qlzh727/followers", "following_url": "https://api.github.com/users/qlzh727/following{/other_user}", "gists_url": "https://api.github.com/users/qlzh727/gists{/gist_id}", "starred_url": "https://api.github.com/users/qlzh727/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qlzh727/subscriptions", "organizations_url": "https://api.github.com/users/qlzh727/orgs", "repos_url": "https://api.github.com/users/qlzh727/repos", "events_url": "https://api.github.com/users/qlzh727/events{/privacy}", "received_events_url": "https://api.github.com/users/qlzh727/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-12T17:08:08Z", "updated_at": "2018-09-12T17:08:08Z", "author_association": "MEMBER", "body_html": "<p>Sorry for the very late reply. If the initial state need to be a variable, I think it should be attached to the cell itself. So the workaround could be:</p>\n<pre><code>def create_initial_cell_state(cell, inputs, dtype=tf.float32):\n  state_size = cell.state_size\n  batch = inputs.shape[0].value\n\n  cell._initial_state_weight = cell.add_variable(\n      \"init_state\", shape=[batch, state_size], initializer=tf.initializers.zeros, dtype=dtype)\n\n  return cell._initial_state_weight\n\ntf.nn.dynamic_rnn(\n        cell=cell,\n        inputs=x,\n        dtype=tf.float32,\n        initial_state=create_initial_cell_state(cell, x) if self._rnn_init_state_trainable else None\n)\n</code></pre>\n<p>This should work for the simple cell state, like u give in your sample code for GRU. LSTM might need some updates since it has tuple state.</p>\n<p>I ran some local test and it works without the warning message.</p>", "body_text": "Sorry for the very late reply. If the initial state need to be a variable, I think it should be attached to the cell itself. So the workaround could be:\ndef create_initial_cell_state(cell, inputs, dtype=tf.float32):\n  state_size = cell.state_size\n  batch = inputs.shape[0].value\n\n  cell._initial_state_weight = cell.add_variable(\n      \"init_state\", shape=[batch, state_size], initializer=tf.initializers.zeros, dtype=dtype)\n\n  return cell._initial_state_weight\n\ntf.nn.dynamic_rnn(\n        cell=cell,\n        inputs=x,\n        dtype=tf.float32,\n        initial_state=create_initial_cell_state(cell, x) if self._rnn_init_state_trainable else None\n)\n\nThis should work for the simple cell state, like u give in your sample code for GRU. LSTM might need some updates since it has tuple state.\nI ran some local test and it works without the warning message.", "body": "Sorry for the very late reply. If the initial state need to be a variable, I think it should be attached to the cell itself. So the workaround could be:\r\n\r\n```\r\ndef create_initial_cell_state(cell, inputs, dtype=tf.float32):\r\n  state_size = cell.state_size\r\n  batch = inputs.shape[0].value\r\n\r\n  cell._initial_state_weight = cell.add_variable(\r\n      \"init_state\", shape=[batch, state_size], initializer=tf.initializers.zeros, dtype=dtype)\r\n\r\n  return cell._initial_state_weight\r\n\r\ntf.nn.dynamic_rnn(\r\n        cell=cell,\r\n        inputs=x,\r\n        dtype=tf.float32,\r\n        initial_state=create_initial_cell_state(cell, x) if self._rnn_init_state_trainable else None\r\n)\r\n```\r\n\r\nThis should work for the simple cell state, like u give in your sample code for GRU. LSTM might need some updates since it has tuple state.\r\n\r\nI ran some local test and it works without the warning message. "}