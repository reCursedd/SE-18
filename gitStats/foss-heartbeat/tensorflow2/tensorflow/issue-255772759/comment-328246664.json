{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/328246664", "html_url": "https://github.com/tensorflow/tensorflow/issues/12859#issuecomment-328246664", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12859", "id": 328246664, "node_id": "MDEyOklzc3VlQ29tbWVudDMyODI0NjY2NA==", "user": {"login": "gmichaeljaison", "id": 4497234, "node_id": "MDQ6VXNlcjQ0OTcyMzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4497234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmichaeljaison", "html_url": "https://github.com/gmichaeljaison", "followers_url": "https://api.github.com/users/gmichaeljaison/followers", "following_url": "https://api.github.com/users/gmichaeljaison/following{/other_user}", "gists_url": "https://api.github.com/users/gmichaeljaison/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmichaeljaison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmichaeljaison/subscriptions", "organizations_url": "https://api.github.com/users/gmichaeljaison/orgs", "repos_url": "https://api.github.com/users/gmichaeljaison/repos", "events_url": "https://api.github.com/users/gmichaeljaison/events{/privacy}", "received_events_url": "https://api.github.com/users/gmichaeljaison/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-09T01:42:55Z", "updated_at": "2017-09-09T15:38:26Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> Thanks, It works without any hooks <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji>. So the solution is to invoke the <code>iterator.string_handle()</code> before creating the <code>MonitoredSession</code>.</p>\n<pre><code># Iterator Handle and MonitoredTrainingSession\n\ndataset_train = Dataset.range(10)\ndataset_val = Dataset.range(90, 100)\n\niter_train_handle = dataset_train.make_one_shot_iterator().string_handle()\niter_val_handle = dataset_val.make_one_shot_iterator().string_handle()\n\nhandle = tf.placeholder(tf.string, shape=[])\niterator = Iterator.from_string_handle(\n    handle, dataset_train.output_types, dataset_train.output_shapes)\nnext_batch = iterator.get_next()\n\nwith tf.train.MonitoredTrainingSession() as sess:\n    handle_train, handle_val = sess.run([iter_train_handle, iter_val_handle])\n    \n    for step in range(10):\n        print('train', sess.run(next_batch, feed_dict={handle: handle_train}))\n        \n        if step % 3 == 0:\n            print('val', sess.run(next_batch, feed_dict={handle: handle_val}))\n\nOutput:\n('train', 0)\n('val', 90)\n('train', 1)\n('train', 2)\n('val', 91)\n('train', 3)\n</code></pre>", "body_text": "@mrry Thanks, It works without any hooks \ud83d\udc4d. So the solution is to invoke the iterator.string_handle() before creating the MonitoredSession.\n# Iterator Handle and MonitoredTrainingSession\n\ndataset_train = Dataset.range(10)\ndataset_val = Dataset.range(90, 100)\n\niter_train_handle = dataset_train.make_one_shot_iterator().string_handle()\niter_val_handle = dataset_val.make_one_shot_iterator().string_handle()\n\nhandle = tf.placeholder(tf.string, shape=[])\niterator = Iterator.from_string_handle(\n    handle, dataset_train.output_types, dataset_train.output_shapes)\nnext_batch = iterator.get_next()\n\nwith tf.train.MonitoredTrainingSession() as sess:\n    handle_train, handle_val = sess.run([iter_train_handle, iter_val_handle])\n    \n    for step in range(10):\n        print('train', sess.run(next_batch, feed_dict={handle: handle_train}))\n        \n        if step % 3 == 0:\n            print('val', sess.run(next_batch, feed_dict={handle: handle_val}))\n\nOutput:\n('train', 0)\n('val', 90)\n('train', 1)\n('train', 2)\n('val', 91)\n('train', 3)", "body": "@mrry Thanks, It works without any hooks \ud83d\udc4d. So the solution is to invoke the `iterator.string_handle()` before creating the `MonitoredSession`.\r\n\r\n```\r\n# Iterator Handle and MonitoredTrainingSession\r\n\r\ndataset_train = Dataset.range(10)\r\ndataset_val = Dataset.range(90, 100)\r\n\r\niter_train_handle = dataset_train.make_one_shot_iterator().string_handle()\r\niter_val_handle = dataset_val.make_one_shot_iterator().string_handle()\r\n\r\nhandle = tf.placeholder(tf.string, shape=[])\r\niterator = Iterator.from_string_handle(\r\n    handle, dataset_train.output_types, dataset_train.output_shapes)\r\nnext_batch = iterator.get_next()\r\n\r\nwith tf.train.MonitoredTrainingSession() as sess:\r\n    handle_train, handle_val = sess.run([iter_train_handle, iter_val_handle])\r\n    \r\n    for step in range(10):\r\n        print('train', sess.run(next_batch, feed_dict={handle: handle_train}))\r\n        \r\n        if step % 3 == 0:\r\n            print('val', sess.run(next_batch, feed_dict={handle: handle_val}))\r\n\r\nOutput:\r\n('train', 0)\r\n('val', 90)\r\n('train', 1)\r\n('train', 2)\r\n('val', 91)\r\n('train', 3)\r\n```\r\n"}