{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/308533379", "html_url": "https://github.com/tensorflow/tensorflow/pull/10368#issuecomment-308533379", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10368", "id": 308533379, "node_id": "MDEyOklzc3VlQ29tbWVudDMwODUzMzM3OQ==", "user": {"login": "zhangyaobit", "id": 1034716, "node_id": "MDQ6VXNlcjEwMzQ3MTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1034716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhangyaobit", "html_url": "https://github.com/zhangyaobit", "followers_url": "https://api.github.com/users/zhangyaobit/followers", "following_url": "https://api.github.com/users/zhangyaobit/following{/other_user}", "gists_url": "https://api.github.com/users/zhangyaobit/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhangyaobit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhangyaobit/subscriptions", "organizations_url": "https://api.github.com/users/zhangyaobit/orgs", "repos_url": "https://api.github.com/users/zhangyaobit/repos", "events_url": "https://api.github.com/users/zhangyaobit/events{/privacy}", "received_events_url": "https://api.github.com/users/zhangyaobit/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-14T19:26:42Z", "updated_at": "2017-06-14T19:26:42Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2465713\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/sj6077\">@sj6077</a>, Thanks for the contribution! I'm not sure how updating initializers and snapshot nodes inside C++ auto_parallel.cc would help, as the C++ code doesn't return the modified metagraph back. Currently they have to be on the python side, for example, like <a href=\"https://gist.github.com/zhangyaobit/08c0b776e4b7a4f786714d46e723ee8a\">this</a>.</p>\n<p>We do plan to come up with a better solution that avoids importing and exporting graph and thus directly uses session.run with ConfigProto to specify the optimizers (currently this is not possible because metagraph is not passed to the optimizer, that's why the ptb code has to use the tf_optimizer.OptimizeGraph interface).</p>\n<p>However, once we solved the problem of passing metagraph to the optimizer, we don't need to use import/export or tf_optimizer any more and I think it may make sense to update initializers and snapshot nodes inside C++ auto_parallel.cc and we can revisit this issue.</p>\n<p>I don't know about your use case. Could you provide some skeleton code/usage pattern to show how this change would help? Thanks.</p>", "body_text": "@sj6077, Thanks for the contribution! I'm not sure how updating initializers and snapshot nodes inside C++ auto_parallel.cc would help, as the C++ code doesn't return the modified metagraph back. Currently they have to be on the python side, for example, like this.\nWe do plan to come up with a better solution that avoids importing and exporting graph and thus directly uses session.run with ConfigProto to specify the optimizers (currently this is not possible because metagraph is not passed to the optimizer, that's why the ptb code has to use the tf_optimizer.OptimizeGraph interface).\nHowever, once we solved the problem of passing metagraph to the optimizer, we don't need to use import/export or tf_optimizer any more and I think it may make sense to update initializers and snapshot nodes inside C++ auto_parallel.cc and we can revisit this issue.\nI don't know about your use case. Could you provide some skeleton code/usage pattern to show how this change would help? Thanks.", "body": "@sj6077, Thanks for the contribution! I'm not sure how updating initializers and snapshot nodes inside C++ auto_parallel.cc would help, as the C++ code doesn't return the modified metagraph back. Currently they have to be on the python side, for example, like [this](https://gist.github.com/zhangyaobit/08c0b776e4b7a4f786714d46e723ee8a).\r\n\r\nWe do plan to come up with a better solution that avoids importing and exporting graph and thus directly uses session.run with ConfigProto to specify the optimizers (currently this is not possible because metagraph is not passed to the optimizer, that's why the ptb code has to use the tf_optimizer.OptimizeGraph interface). \r\n\r\nHowever, once we solved the problem of passing metagraph to the optimizer, we don't need to use import/export or tf_optimizer any more and I think it may make sense to update initializers and snapshot nodes inside C++ auto_parallel.cc and we can revisit this issue.\r\n\r\nI don't know about your use case. Could you provide some skeleton code/usage pattern to show how this change would help? Thanks."}