{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7581", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7581/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7581/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7581/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7581", "id": 208157089, "node_id": "MDU6SXNzdWUyMDgxNTcwODk=", "number": 7581, "title": "Status of Allocator API", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-16T15:38:50Z", "updated_at": "2017-06-23T15:33:14Z", "closed_at": "2017-06-23T15:33:14Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Making this issue to track status of allocator C API, based on discussion at tfdev conference: cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15258583\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/josh11b\">@josh11b</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=463737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vrv\">@vrv</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=88808\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/skye\">@skye</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=229914\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/keveman\">@keveman</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15736910\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zheng-xq\">@zheng-xq</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=229914\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/keveman\">@keveman</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2342391\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yuanbyu\">@yuanbyu</a></p>\n<p>Currently allocator API is not public. This API, in <code>tensorflow/core/framework/allocator.h</code>, and more specifically, <code>bytes_in_use</code>, is currently the only practical way to implement user ops that</p>\n<ol>\n<li>Decide what to do based on available memory (like <code>foldr</code>, <code>map_fn</code>, with <code>swap_memory=True</code> option)</li>\n<li>Report available memory to user (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"207903232\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/7537\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/7537/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/7537\">#7537</a>)</li>\n</ol>\n<p>The three options are:</p>\n<ol>\n<li>Make this API public</li>\n<li>Keep this API non-public, but make it possible to create a user-op that uses this API.</li>\n<li>Keep this API non-public and do not provide a way to use it from user-op.</li>\n</ol>\n<p>Currently it's somewhere between 2 and 3. API is not public and you can build user-op like <a href=\"https://github.com/yaroslavvb/memory_probe_ops\">memory_probe_op</a> with gcc, but not with Bazel. From an op-creator standpoint, 1 is preferable to 2 and 2 is preferable to 3.</p>\n<p>Similar issue was <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"138951694\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1419\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1419/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/1419\">#1419</a> where people tried to make a custom reader user op that uses methods from <code>reader_base.h</code>. The final solution was the opposite -- it was possible to make work with bazel (by commenting out <code>disallowed_deps</code> line), but not with <code>gcc</code>.</p>", "body_text": "Making this issue to track status of allocator C API, based on discussion at tfdev conference: cc @josh11b @vrv @skye @keveman @zheng-xq @keveman @yuanbyu\nCurrently allocator API is not public. This API, in tensorflow/core/framework/allocator.h, and more specifically, bytes_in_use, is currently the only practical way to implement user ops that\n\nDecide what to do based on available memory (like foldr, map_fn, with swap_memory=True option)\nReport available memory to user (#7537)\n\nThe three options are:\n\nMake this API public\nKeep this API non-public, but make it possible to create a user-op that uses this API.\nKeep this API non-public and do not provide a way to use it from user-op.\n\nCurrently it's somewhere between 2 and 3. API is not public and you can build user-op like memory_probe_op with gcc, but not with Bazel. From an op-creator standpoint, 1 is preferable to 2 and 2 is preferable to 3.\nSimilar issue was #1419 where people tried to make a custom reader user op that uses methods from reader_base.h. The final solution was the opposite -- it was possible to make work with bazel (by commenting out disallowed_deps line), but not with gcc.", "body": "Making this issue to track status of allocator C API, based on discussion at tfdev conference: cc @josh11b @vrv @skye @keveman @zheng-xq @keveman @yuanbyu \r\n\r\nCurrently allocator API is not public. This API, in `tensorflow/core/framework/allocator.h`, and more specifically, `bytes_in_use`, is currently the only practical way to implement user ops that\r\n\r\n1. Decide what to do based on available memory (like `foldr`, `map_fn`, with `swap_memory=True` option)\r\n2. Report available memory to user (https://github.com/tensorflow/tensorflow/issues/7537)\r\n\r\nThe three options are:\r\n\r\n1. Make this API public\r\n2. Keep this API non-public, but make it possible to create a user-op that uses this API.\r\n3. Keep this API non-public and do not provide a way to use it from user-op.\r\n\r\nCurrently it's somewhere between 2 and 3. API is not public and you can build user-op like [memory_probe_op](https://github.com/yaroslavvb/memory_probe_ops) with gcc, but not with Bazel. From an op-creator standpoint, 1 is preferable to 2 and 2 is preferable to 3. \r\n\r\nSimilar issue was https://github.com/tensorflow/tensorflow/issues/1419 where people tried to make a custom reader user op that uses methods from `reader_base.h`. The final solution was the opposite -- it was possible to make work with bazel (by commenting out `disallowed_deps` line), but not with `gcc`."}