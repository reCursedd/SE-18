{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8238", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8238/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8238/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8238/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8238", "id": 213000689, "node_id": "MDU6SXNzdWUyMTMwMDA2ODk=", "number": 8238, "title": "OS/X compile error with tensorflow/compiler/xla/service/allocation_tracker.cc", "user": {"login": "DavidNorman", "id": 606831, "node_id": "MDQ6VXNlcjYwNjgzMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/606831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DavidNorman", "html_url": "https://github.com/DavidNorman", "followers_url": "https://api.github.com/users/DavidNorman/followers", "following_url": "https://api.github.com/users/DavidNorman/following{/other_user}", "gists_url": "https://api.github.com/users/DavidNorman/gists{/gist_id}", "starred_url": "https://api.github.com/users/DavidNorman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DavidNorman/subscriptions", "organizations_url": "https://api.github.com/users/DavidNorman/orgs", "repos_url": "https://api.github.com/users/DavidNorman/repos", "events_url": "https://api.github.com/users/DavidNorman/events{/privacy}", "received_events_url": "https://api.github.com/users/DavidNorman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173351, "node_id": "MDU6TGFiZWw0NzMxNzMzNTE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:build/install", "name": "type:build/install", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-09T10:52:03Z", "updated_at": "2017-03-15T00:54:57Z", "closed_at": "2017-03-15T00:54:57Z", "author_association": "CONTRIBUTOR", "body_html": "<p>There is a length/signed/unsigned mismatch in an inline vector initialization.</p>\n<pre><code>tensorflow/compiler/xla/service/allocation_tracker.cc:178:54: error: non-constant-expression cannot be narrowed from type 'std::vector&lt;se::DeviceMemoryBase&gt;::size_type' (aka 'unsigned long') to 'long long' in initializer list [-Wc++11-narrowing]\n        ShapeUtil::GetSubshape(allocation-&gt;shape(), {i}),\n                                                     ^\ntensorflow/compiler/xla/service/allocation_tracker.cc:178:54: note: insert an explicit cast to silence this issue\n        ShapeUtil::GetSubshape(allocation-&gt;shape(), {i}),\n                                                     ^\n                                                     static_cast&lt;long long&gt;( )\n1 error generated.\n</code></pre>\n<p>diff:</p>\n<pre><code>--- a/tensorflow/compiler/xla/service/allocation_tracker.cc\n+++ b/tensorflow/compiler/xla/service/allocation_tracker.cc\n@@ -175,7 +175,7 @@ StatusOr&lt;std::vector&lt;GlobalDataHandle&gt;&gt; AllocationTracker::DeconstructTuple(\n        i &lt; element_bases.size(); ++i) {\n     element_handles.push_back(RegisterInternal(\n         allocation-&gt;backend(), allocation-&gt;device_ordinal(), element_bases[i],\n-        ShapeUtil::GetSubshape(allocation-&gt;shape(), {i}),\n+        ShapeUtil::GetSubshape(allocation-&gt;shape(), {static_cast&lt;long long&gt;(i)}),\n         tensorflow::strings::StrCat(allocation-&gt;tag(), \".element_\", i),\n         /*initial_ref_count=*/2));\n   }\n</code></pre>", "body_text": "There is a length/signed/unsigned mismatch in an inline vector initialization.\ntensorflow/compiler/xla/service/allocation_tracker.cc:178:54: error: non-constant-expression cannot be narrowed from type 'std::vector<se::DeviceMemoryBase>::size_type' (aka 'unsigned long') to 'long long' in initializer list [-Wc++11-narrowing]\n        ShapeUtil::GetSubshape(allocation->shape(), {i}),\n                                                     ^\ntensorflow/compiler/xla/service/allocation_tracker.cc:178:54: note: insert an explicit cast to silence this issue\n        ShapeUtil::GetSubshape(allocation->shape(), {i}),\n                                                     ^\n                                                     static_cast<long long>( )\n1 error generated.\n\ndiff:\n--- a/tensorflow/compiler/xla/service/allocation_tracker.cc\n+++ b/tensorflow/compiler/xla/service/allocation_tracker.cc\n@@ -175,7 +175,7 @@ StatusOr<std::vector<GlobalDataHandle>> AllocationTracker::DeconstructTuple(\n        i < element_bases.size(); ++i) {\n     element_handles.push_back(RegisterInternal(\n         allocation->backend(), allocation->device_ordinal(), element_bases[i],\n-        ShapeUtil::GetSubshape(allocation->shape(), {i}),\n+        ShapeUtil::GetSubshape(allocation->shape(), {static_cast<long long>(i)}),\n         tensorflow::strings::StrCat(allocation->tag(), \".element_\", i),\n         /*initial_ref_count=*/2));\n   }", "body": "There is a length/signed/unsigned mismatch in an inline vector initialization.\r\n\r\n```\r\ntensorflow/compiler/xla/service/allocation_tracker.cc:178:54: error: non-constant-expression cannot be narrowed from type 'std::vector<se::DeviceMemoryBase>::size_type' (aka 'unsigned long') to 'long long' in initializer list [-Wc++11-narrowing]\r\n        ShapeUtil::GetSubshape(allocation->shape(), {i}),\r\n                                                     ^\r\ntensorflow/compiler/xla/service/allocation_tracker.cc:178:54: note: insert an explicit cast to silence this issue\r\n        ShapeUtil::GetSubshape(allocation->shape(), {i}),\r\n                                                     ^\r\n                                                     static_cast<long long>( )\r\n1 error generated.\r\n```\r\n\r\ndiff:\r\n\r\n```\r\n--- a/tensorflow/compiler/xla/service/allocation_tracker.cc\r\n+++ b/tensorflow/compiler/xla/service/allocation_tracker.cc\r\n@@ -175,7 +175,7 @@ StatusOr<std::vector<GlobalDataHandle>> AllocationTracker::DeconstructTuple(\r\n        i < element_bases.size(); ++i) {\r\n     element_handles.push_back(RegisterInternal(\r\n         allocation->backend(), allocation->device_ordinal(), element_bases[i],\r\n-        ShapeUtil::GetSubshape(allocation->shape(), {i}),\r\n+        ShapeUtil::GetSubshape(allocation->shape(), {static_cast<long long>(i)}),\r\n         tensorflow::strings::StrCat(allocation->tag(), \".element_\", i),\r\n         /*initial_ref_count=*/2));\r\n   }\r\n```\r\n"}