{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/385530828", "html_url": "https://github.com/tensorflow/tensorflow/issues/17168#issuecomment-385530828", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17168", "id": 385530828, "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTUzMDgyOA==", "user": {"login": "fchollet", "id": 710255, "node_id": "MDQ6VXNlcjcxMDI1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/710255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fchollet", "html_url": "https://github.com/fchollet", "followers_url": "https://api.github.com/users/fchollet/followers", "following_url": "https://api.github.com/users/fchollet/following{/other_user}", "gists_url": "https://api.github.com/users/fchollet/gists{/gist_id}", "starred_url": "https://api.github.com/users/fchollet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fchollet/subscriptions", "organizations_url": "https://api.github.com/users/fchollet/orgs", "repos_url": "https://api.github.com/users/fchollet/repos", "events_url": "https://api.github.com/users/fchollet/events{/privacy}", "received_events_url": "https://api.github.com/users/fchollet/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-30T21:13:58Z", "updated_at": "2018-04-30T21:13:58Z", "author_association": "MEMBER", "body_html": "<p>This is generally not supported. But certain TF metrics can work with Keras.</p>\n<p>A metrics function, in Keras, for the time being, is a stateless tensor function that takes as arguments <code>(y_true, y_pred)</code> (target tensor and prediction tensor). If you're looking at a stateless TF metric (a metric that does not create weight variables in the background when you call it), then you can wrap it to have this signature, in most cases. Then you can pass the wrapped function to Keras.</p>\n<p>Any stateful metric, in Keras, should be implemented as a metrics layer. <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/_impl/keras/metrics_test.py#L81-L119\">Here is an example</a>.</p>\n<p>In general, we recommend using only metrics from <code>tf.keras.metrics</code> with tf.keras. Yes, we're aware it's a bad UX to have multiple incompatible metrics modules, and we'll fix it in the future.</p>", "body_text": "This is generally not supported. But certain TF metrics can work with Keras.\nA metrics function, in Keras, for the time being, is a stateless tensor function that takes as arguments (y_true, y_pred) (target tensor and prediction tensor). If you're looking at a stateless TF metric (a metric that does not create weight variables in the background when you call it), then you can wrap it to have this signature, in most cases. Then you can pass the wrapped function to Keras.\nAny stateful metric, in Keras, should be implemented as a metrics layer. Here is an example.\nIn general, we recommend using only metrics from tf.keras.metrics with tf.keras. Yes, we're aware it's a bad UX to have multiple incompatible metrics modules, and we'll fix it in the future.", "body": "This is generally not supported. But certain TF metrics can work with Keras.\r\n\r\nA metrics function, in Keras, for the time being, is a stateless tensor function that takes as arguments `(y_true, y_pred)` (target tensor and prediction tensor). If you're looking at a stateless TF metric (a metric that does not create weight variables in the background when you call it), then you can wrap it to have this signature, in most cases. Then you can pass the wrapped function to Keras.\r\n\r\nAny stateful metric, in Keras, should be implemented as a metrics layer. [Here is an example](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/_impl/keras/metrics_test.py#L81-L119).\r\n\r\nIn general, we recommend using only metrics from `tf.keras.metrics` with tf.keras. Yes, we're aware it's a bad UX to have multiple incompatible metrics modules, and we'll fix it in the future."}