{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/270768720", "html_url": "https://github.com/tensorflow/tensorflow/issues/6473#issuecomment-270768720", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6473", "id": 270768720, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDc2ODcyMA==", "user": {"login": "MircoT", "id": 2707823, "node_id": "MDQ6VXNlcjI3MDc4MjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/2707823?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MircoT", "html_url": "https://github.com/MircoT", "followers_url": "https://api.github.com/users/MircoT/followers", "following_url": "https://api.github.com/users/MircoT/following{/other_user}", "gists_url": "https://api.github.com/users/MircoT/gists{/gist_id}", "starred_url": "https://api.github.com/users/MircoT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MircoT/subscriptions", "organizations_url": "https://api.github.com/users/MircoT/orgs", "repos_url": "https://api.github.com/users/MircoT/repos", "events_url": "https://api.github.com/users/MircoT/events{/privacy}", "received_events_url": "https://api.github.com/users/MircoT/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-05T21:54:42Z", "updated_at": "2017-01-05T21:54:42Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I solved the problem with the tip you gave me but I want to explain better what is the situation:</p>\n<p>I have a new op for TensorFlow and I used gcc to compile it and I already use the flag mentioned above, the one you have in the note of the documentation, but I forgot it for some libraries and so I had the mismatch of the functions.</p>\n<p>With the correct build of the op (using -D_GLIBCXX_USE_CXX11_ABI=0) I had similar problems because I use a TensorFlow python package builded from sources, with bazel. Building from source without the option <code>-cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\"</code> caused the same problem with a different function.</p>\n<p>For the moment I don't have the project of the new op that uses the bazel toolchain, so I compiled again the TensorFlow package from sources with that option and all went well.</p>\n<p>If I can guess a conclusion, working with the sources of TF and building the new op from there have no problem, despite the use or not of <code>-cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\"</code>. Otherwise if you have a compiled TF from sources and you want to use the <strong>gcc</strong> build option is better to work with the same ABI.</p>\n<p>I do not know if it is appropriate add a note on the building from source with that flag, to remain aligned with the official package. This is only a misunderstanding because you can choose to compile the new op with different options.</p>\n<p>I'm sorry for the delay but I made some tests to be sure about the situation.</p>", "body_text": "I solved the problem with the tip you gave me but I want to explain better what is the situation:\nI have a new op for TensorFlow and I used gcc to compile it and I already use the flag mentioned above, the one you have in the note of the documentation, but I forgot it for some libraries and so I had the mismatch of the functions.\nWith the correct build of the op (using -D_GLIBCXX_USE_CXX11_ABI=0) I had similar problems because I use a TensorFlow python package builded from sources, with bazel. Building from source without the option -cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" caused the same problem with a different function.\nFor the moment I don't have the project of the new op that uses the bazel toolchain, so I compiled again the TensorFlow package from sources with that option and all went well.\nIf I can guess a conclusion, working with the sources of TF and building the new op from there have no problem, despite the use or not of -cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\". Otherwise if you have a compiled TF from sources and you want to use the gcc build option is better to work with the same ABI.\nI do not know if it is appropriate add a note on the building from source with that flag, to remain aligned with the official package. This is only a misunderstanding because you can choose to compile the new op with different options.\nI'm sorry for the delay but I made some tests to be sure about the situation.", "body": "I solved the problem with the tip you gave me but I want to explain better what is the situation:\r\n\r\nI have a new op for TensorFlow and I used gcc to compile it and I already use the flag mentioned above, the one you have in the note of the documentation, but I forgot it for some libraries and so I had the mismatch of the functions.\r\n\r\nWith the correct build of the op (using -D_GLIBCXX_USE_CXX11_ABI=0) I had similar problems because I use a TensorFlow python package builded from sources, with bazel. Building from source without the option `-cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\"` caused the same problem with a different function.\r\n\r\nFor the moment I don't have the project of the new op that uses the bazel toolchain, so I compiled again the TensorFlow package from sources with that option and all went well.\r\n\r\nIf I can guess a conclusion, working with the sources of TF and building the new op from there have no problem, despite the use or not of `-cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\"`. Otherwise if you have a compiled TF from sources and you want to use the **gcc** build option is better to work with the same ABI.\r\n\r\nI do not know if it is appropriate add a note on the building from source with that flag, to remain aligned with the official package. This is only a misunderstanding because you can choose to compile the new op with different options.\r\n\r\nI'm sorry for the delay but I made some tests to be sure about the situation."}