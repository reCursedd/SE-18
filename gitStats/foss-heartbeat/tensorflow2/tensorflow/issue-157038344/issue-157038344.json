{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2516", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2516/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2516/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2516/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2516", "id": 157038344, "node_id": "MDU6SXNzdWUxNTcwMzgzNDQ=", "number": 2516, "title": "tf.test.compute_gradient returns unexpected analytical Jacobian for complex polynomial", "user": {"login": "woodshop", "id": 4654379, "node_id": "MDQ6VXNlcjQ2NTQzNzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4654379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woodshop", "html_url": "https://github.com/woodshop", "followers_url": "https://api.github.com/users/woodshop/followers", "following_url": "https://api.github.com/users/woodshop/following{/other_user}", "gists_url": "https://api.github.com/users/woodshop/gists{/gist_id}", "starred_url": "https://api.github.com/users/woodshop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woodshop/subscriptions", "organizations_url": "https://api.github.com/users/woodshop/orgs", "repos_url": "https://api.github.com/users/woodshop/repos", "events_url": "https://api.github.com/users/woodshop/events{/privacy}", "received_events_url": "https://api.github.com/users/woodshop/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2016-05-26T17:37:00Z", "updated_at": "2016-06-07T17:40:30Z", "closed_at": "2016-06-07T17:40:22Z", "author_association": "NONE", "body_html": "<h3>Environment info</h3>\n<p>Operating System: Ubuntu 14.04.4 LTS<br>\nTitan X GPU<br>\nPython 2.7.11</p>\n<p>Installed version of CUDA and cuDNN: Cuda 7.5, cuDNN 5.0.5<br>\n(please attach the output of <code>ls -l /path/to/cuda/lib/libcud*</code>):</p>\n<pre><code>(tensorflow)sarroff@eltopo:~$ ls -l /usr/local/cuda/lib64/libcud*\n-rw-r--r-- 1 root root   322936 Aug 15  2015 /usr/local/cuda/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root       16 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so -&gt; libcudart.so.7.5\nlrwxrwxrwx 1 root root       19 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5 -&gt; libcudart.so.7.5.18\n-rwxr-xr-x 1 root root   383336 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5.18\n-rw-r--r-- 1 root root   720192 Aug 15  2015 /usr/local/cuda/lib64/libcudart_static.a\n-rwxr-xr-x 1 root root 59909104 May 22 13:27 /usr/local/cuda/lib64/libcudnn.so\n-rwxr-xr-x 1 root root 59909104 May 22 13:27 /usr/local/cuda/lib64/libcudnn.so.5\n-rwxr-xr-x 1 root root 59909104 May 22 13:27 /usr/local/cuda/lib64/libcudnn.so.5.0.5\n-rw-r--r-- 1 root root 58775484 May 22 13:27 /usr/local/cuda/lib64/libcudnn_static.a\n</code></pre>\n<ol>\n<li>Which pip package you installed.<br>\nN/A (Installed from source)</li>\n<li>The output from python -c \"import tensorflow; print(tensorflow.<strong>version</strong>)\".</li>\n</ol>\n<pre><code>(tensorflow)sarroff@eltopo:~$ python -c \"import tensorflow; print(tensorflow.__version__)\"\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally\n0.8.0\n</code></pre>\n<p>If installed from sources, provide the commit hash:<br>\n<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/4b7bc3174ed67b4a0eb1803537c9d00f132e9ae7/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/4b7bc3174ed67b4a0eb1803537c9d00f132e9ae7\"><tt>4b7bc31</tt></a></p>\n<h3>Steps to reproduce</h3>\n<p>I have a complex variable z = x+iy and complex polynomial function f(z) = z^2. I am computing df/dz. <code>tf.gradients</code> returns the expected value but the returned analytical value of <code>tf.test.compute_gradient</code> does not:</p>\n<p>(In Python shell, logging messages snipped.)</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> z <span class=\"pl-k\">=</span> np.asarray(np.random.randn() <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1<span class=\"pl-k\">j</span></span><span class=\"pl-k\">*</span>np.random.randn(), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.complex64)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> Value of z</span>\n<span class=\"pl-c1\">...</span> <span class=\"pl-c1\">print</span> z\n(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1.15801084042</span><span class=\"pl-k\">+</span><span class=\"pl-c1\">0.433556616306<span class=\"pl-k\">j</span></span>)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> z_tf <span class=\"pl-k\">=</span> tf.constant(z)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> f <span class=\"pl-k\">=</span> z_tf<span class=\"pl-k\">**</span><span class=\"pl-c1\">2</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n<span class=\"pl-c1\">...</span>     analytical, numerical <span class=\"pl-k\">=</span> tf.test.compute_gradient(z_tf, (), f, (), <span class=\"pl-v\">x_init_value</span><span class=\"pl-k\">=</span>z)\n<span class=\"pl-c1\">...</span>     df_dz <span class=\"pl-k\">=</span> sess.run(tf.gradients(f, z_tf))\n<span class=\"pl-c1\">...</span> \n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> Expected derivative</span>\n<span class=\"pl-c1\">...</span> <span class=\"pl-c1\">2</span><span class=\"pl-k\">*</span>z\n(<span class=\"pl-k\">-</span><span class=\"pl-c1\">2.3160216808319092</span><span class=\"pl-k\">+</span><span class=\"pl-c1\">0.86711323261260986<span class=\"pl-k\">j</span></span>)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> \n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> Automatically computed derivative:</span>\n<span class=\"pl-c1\">...</span> <span class=\"pl-c1\">print</span> df_dz\n[(<span class=\"pl-k\">-</span><span class=\"pl-c1\">2.3160217</span><span class=\"pl-k\">+</span><span class=\"pl-c1\">0.86711359<span class=\"pl-k\">j</span></span>)]\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> \n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> analytical derivative from compute_gradient</span>\n<span class=\"pl-c1\">...</span> <span class=\"pl-c1\">print</span> analytical\n[[<span class=\"pl-k\">-</span><span class=\"pl-c1\">2.31602168</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.86711359</span>]\n [ <span class=\"pl-c1\">0.86711359</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">2.31602168</span>]]\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> \n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c\"><span class=\"pl-c\">#</span> numerical derivative from compute_gradient</span>\n<span class=\"pl-c1\">...</span> <span class=\"pl-c1\">print</span> numerical\n[[<span class=\"pl-k\">-</span><span class=\"pl-c1\">2.31617689</span>  <span class=\"pl-c1\">0.86712837</span>]\n [<span class=\"pl-k\">-</span><span class=\"pl-c1\">0.86700916</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">2.31587887</span>]]</pre></div>\n<p>According to the <a href=\"https://www.tensorflow.org/versions/r0.8/api_docs/python/test.html#compute_gradient\" rel=\"nofollow\">TensorFlow API documentation</a>, <code>compute_gradient</code> returns the analytical and numerical Jacobians</p>\n<pre><code>J[:m, :n] = d(Re y)/d(Re x)\nJ[:m, n:] = d(Im y)/d(Re x)\nJ[m:, :n] = d(Re y)/d(Im x)\nJ[m:, n:] = d(Im y)/d(Im x)\n</code></pre>\n<p>It appears that the analytical Jacobian is incorrect, and more specifically, that <code>J[:m, n:] = d(Im y)/d(Re x)</code> and <code>J[m:, :n] = d(Re y)/d(Im x)</code> may be swapped.</p>", "body_text": "Environment info\nOperating System: Ubuntu 14.04.4 LTS\nTitan X GPU\nPython 2.7.11\nInstalled version of CUDA and cuDNN: Cuda 7.5, cuDNN 5.0.5\n(please attach the output of ls -l /path/to/cuda/lib/libcud*):\n(tensorflow)sarroff@eltopo:~$ ls -l /usr/local/cuda/lib64/libcud*\n-rw-r--r-- 1 root root   322936 Aug 15  2015 /usr/local/cuda/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root       16 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.7.5\nlrwxrwxrwx 1 root root       19 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5 -> libcudart.so.7.5.18\n-rwxr-xr-x 1 root root   383336 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5.18\n-rw-r--r-- 1 root root   720192 Aug 15  2015 /usr/local/cuda/lib64/libcudart_static.a\n-rwxr-xr-x 1 root root 59909104 May 22 13:27 /usr/local/cuda/lib64/libcudnn.so\n-rwxr-xr-x 1 root root 59909104 May 22 13:27 /usr/local/cuda/lib64/libcudnn.so.5\n-rwxr-xr-x 1 root root 59909104 May 22 13:27 /usr/local/cuda/lib64/libcudnn.so.5.0.5\n-rw-r--r-- 1 root root 58775484 May 22 13:27 /usr/local/cuda/lib64/libcudnn_static.a\n\n\nWhich pip package you installed.\nN/A (Installed from source)\nThe output from python -c \"import tensorflow; print(tensorflow.version)\".\n\n(tensorflow)sarroff@eltopo:~$ python -c \"import tensorflow; print(tensorflow.__version__)\"\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally\n0.8.0\n\nIf installed from sources, provide the commit hash:\n4b7bc31\nSteps to reproduce\nI have a complex variable z = x+iy and complex polynomial function f(z) = z^2. I am computing df/dz. tf.gradients returns the expected value but the returned analytical value of tf.test.compute_gradient does not:\n(In Python shell, logging messages snipped.)\n>>> import numpy as np\n>>> z = np.asarray(np.random.randn() + 1j*np.random.randn(), dtype=np.complex64)\n>>> # Value of z\n... print z\n(-1.15801084042+0.433556616306j)\n>>> z_tf = tf.constant(z)\n>>> f = z_tf**2\n>>> with tf.Session() as sess:\n...     analytical, numerical = tf.test.compute_gradient(z_tf, (), f, (), x_init_value=z)\n...     df_dz = sess.run(tf.gradients(f, z_tf))\n... \n>>> # Expected derivative\n... 2*z\n(-2.3160216808319092+0.86711323261260986j)\n>>> \n>>> # Automatically computed derivative:\n... print df_dz\n[(-2.3160217+0.86711359j)]\n>>> \n>>> # analytical derivative from compute_gradient\n... print analytical\n[[-2.31602168 -0.86711359]\n [ 0.86711359 -2.31602168]]\n>>> \n>>> # numerical derivative from compute_gradient\n... print numerical\n[[-2.31617689  0.86712837]\n [-0.86700916 -2.31587887]]\nAccording to the TensorFlow API documentation, compute_gradient returns the analytical and numerical Jacobians\nJ[:m, :n] = d(Re y)/d(Re x)\nJ[:m, n:] = d(Im y)/d(Re x)\nJ[m:, :n] = d(Re y)/d(Im x)\nJ[m:, n:] = d(Im y)/d(Im x)\n\nIt appears that the analytical Jacobian is incorrect, and more specifically, that J[:m, n:] = d(Im y)/d(Re x) and J[m:, :n] = d(Re y)/d(Im x) may be swapped.", "body": "### Environment info\n\nOperating System: Ubuntu 14.04.4 LTS\nTitan X GPU\nPython 2.7.11\n\nInstalled version of CUDA and cuDNN: Cuda 7.5, cuDNN 5.0.5\n(please attach the output of `ls -l /path/to/cuda/lib/libcud*`):\n\n```\n(tensorflow)sarroff@eltopo:~$ ls -l /usr/local/cuda/lib64/libcud*\n-rw-r--r-- 1 root root   322936 Aug 15  2015 /usr/local/cuda/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root       16 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.7.5\nlrwxrwxrwx 1 root root       19 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5 -> libcudart.so.7.5.18\n-rwxr-xr-x 1 root root   383336 Aug 15  2015 /usr/local/cuda/lib64/libcudart.so.7.5.18\n-rw-r--r-- 1 root root   720192 Aug 15  2015 /usr/local/cuda/lib64/libcudart_static.a\n-rwxr-xr-x 1 root root 59909104 May 22 13:27 /usr/local/cuda/lib64/libcudnn.so\n-rwxr-xr-x 1 root root 59909104 May 22 13:27 /usr/local/cuda/lib64/libcudnn.so.5\n-rwxr-xr-x 1 root root 59909104 May 22 13:27 /usr/local/cuda/lib64/libcudnn.so.5.0.5\n-rw-r--r-- 1 root root 58775484 May 22 13:27 /usr/local/cuda/lib64/libcudnn_static.a\n```\n1. Which pip package you installed.\n   N/A (Installed from source)\n2. The output from python -c \"import tensorflow; print(tensorflow.__version__)\".\n\n```\n(tensorflow)sarroff@eltopo:~$ python -c \"import tensorflow; print(tensorflow.__version__)\"\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally\n0.8.0\n```\n\nIf installed from sources, provide the commit hash:\n4b7bc3174ed67b4a0eb1803537c9d00f132e9ae7\n### Steps to reproduce\n\nI have a complex variable z = x+iy and complex polynomial function f(z) = z^2. I am computing df/dz. `tf.gradients` returns the expected value but the returned analytical value of `tf.test.compute_gradient` does not:\n\n(In Python shell, logging messages snipped.)\n\n``` python\n>>> import numpy as np\n>>> z = np.asarray(np.random.randn() + 1j*np.random.randn(), dtype=np.complex64)\n>>> # Value of z\n... print z\n(-1.15801084042+0.433556616306j)\n>>> z_tf = tf.constant(z)\n>>> f = z_tf**2\n>>> with tf.Session() as sess:\n...     analytical, numerical = tf.test.compute_gradient(z_tf, (), f, (), x_init_value=z)\n...     df_dz = sess.run(tf.gradients(f, z_tf))\n... \n>>> # Expected derivative\n... 2*z\n(-2.3160216808319092+0.86711323261260986j)\n>>> \n>>> # Automatically computed derivative:\n... print df_dz\n[(-2.3160217+0.86711359j)]\n>>> \n>>> # analytical derivative from compute_gradient\n... print analytical\n[[-2.31602168 -0.86711359]\n [ 0.86711359 -2.31602168]]\n>>> \n>>> # numerical derivative from compute_gradient\n... print numerical\n[[-2.31617689  0.86712837]\n [-0.86700916 -2.31587887]]\n```\n\nAccording to the [TensorFlow API documentation](https://www.tensorflow.org/versions/r0.8/api_docs/python/test.html#compute_gradient), `compute_gradient` returns the analytical and numerical Jacobians\n\n```\nJ[:m, :n] = d(Re y)/d(Re x)\nJ[:m, n:] = d(Im y)/d(Re x)\nJ[m:, :n] = d(Re y)/d(Im x)\nJ[m:, n:] = d(Im y)/d(Im x)\n```\n\nIt appears that the analytical Jacobian is incorrect, and more specifically, that `J[:m, n:] = d(Im y)/d(Re x)` and `J[m:, :n] = d(Re y)/d(Im x)` may be swapped.\n"}