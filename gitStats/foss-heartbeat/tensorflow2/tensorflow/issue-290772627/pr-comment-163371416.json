{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/163371416", "pull_request_review_id": 90974613, "id": 163371416, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzM3MTQxNg==", "diff_hunk": "@@ -31,7 +32,7 @@ class BuiltinFunctionTransformer(gast.NodeTransformer):\n   def _convert_len(self, node):\n \n     def template(args):\n-      tf.shape(args)[0]  # pylint:disable=undefined-variable,expression-not-assigned\n+      tf.shape(args)[0]  # pylint:disable=expression-not-assigned", "path": "tensorflow/contrib/py2tf/convert/builtin_functions.py", "position": null, "original_position": 13, "commit_id": "e2b9a5bf9022b6a324f590ab929420036a40d8e7", "original_commit_id": "5f01052b4d608793b0349f9823f2701c6a682f85", "user": {"login": "mdanatg", "id": 26628547, "node_id": "MDQ6VXNlcjI2NjI4NTQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/26628547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdanatg", "html_url": "https://github.com/mdanatg", "followers_url": "https://api.github.com/users/mdanatg/followers", "following_url": "https://api.github.com/users/mdanatg/following{/other_user}", "gists_url": "https://api.github.com/users/mdanatg/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdanatg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdanatg/subscriptions", "organizations_url": "https://api.github.com/users/mdanatg/orgs", "repos_url": "https://api.github.com/users/mdanatg/repos", "events_url": "https://api.github.com/users/mdanatg/events{/privacy}", "received_events_url": "https://api.github.com/users/mdanatg/received_events", "type": "User", "site_admin": false}, "body": "@alexbw FYI\r\n\r\nWhat I think is confusing about these blocks is that they are meant to be code templates (the `template` function is never called, only parsed into an AST). They are used to generate user-visible code, hence the use of `tf`.\r\n\r\nI can think of a number of solutions, as far as linters are concerned:\r\n\r\n1. Add a dummy `tf` variable to trick the linter\r\n2. Add linter-suppression code (that's what those `#pylint:disable` lines were meant for); for flake8, I believe that would be `#noqa`\r\n3. Rewrite the templates as string constants; we lose any syntax checking that way, but things become less confusing.\r\n\r\n(1) could be applied in this very CL, I think\r\n(2) could also be fairly quick to implement (maybe it's a good short-term fix)\r\n(3) would take a bit longer\r\n\r\nSpecifically, for (3) we would go from:\r\n\r\n    def template(args):\r\n      ...code...\r\n\r\nto\r\n\r\n    template = parse_template(\r\n          args,\r\n          \"\"\"\r\n              ...code...\r\n          \"\"\")", "created_at": "2018-01-23T20:45:36Z", "updated_at": "2018-01-25T23:24:35Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/16318#discussion_r163371416", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16318", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/163371416"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/16318#discussion_r163371416"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/16318"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=161935\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alexbw\">@alexbw</a> FYI</p>\n<p>What I think is confusing about these blocks is that they are meant to be code templates (the <code>template</code> function is never called, only parsed into an AST). They are used to generate user-visible code, hence the use of <code>tf</code>.</p>\n<p>I can think of a number of solutions, as far as linters are concerned:</p>\n<ol>\n<li>Add a dummy <code>tf</code> variable to trick the linter</li>\n<li>Add linter-suppression code (that's what those <code>#pylint:disable</code> lines were meant for); for flake8, I believe that would be <code>#noqa</code></li>\n<li>Rewrite the templates as string constants; we lose any syntax checking that way, but things become less confusing.</li>\n</ol>\n<p>(1) could be applied in this very CL, I think<br>\n(2) could also be fairly quick to implement (maybe it's a good short-term fix)<br>\n(3) would take a bit longer</p>\n<p>Specifically, for (3) we would go from:</p>\n<pre><code>def template(args):\n  ...code...\n</code></pre>\n<p>to</p>\n<pre><code>template = parse_template(\n      args,\n      \"\"\"\n          ...code...\n      \"\"\")\n</code></pre>", "body_text": "@alexbw FYI\nWhat I think is confusing about these blocks is that they are meant to be code templates (the template function is never called, only parsed into an AST). They are used to generate user-visible code, hence the use of tf.\nI can think of a number of solutions, as far as linters are concerned:\n\nAdd a dummy tf variable to trick the linter\nAdd linter-suppression code (that's what those #pylint:disable lines were meant for); for flake8, I believe that would be #noqa\nRewrite the templates as string constants; we lose any syntax checking that way, but things become less confusing.\n\n(1) could be applied in this very CL, I think\n(2) could also be fairly quick to implement (maybe it's a good short-term fix)\n(3) would take a bit longer\nSpecifically, for (3) we would go from:\ndef template(args):\n  ...code...\n\nto\ntemplate = parse_template(\n      args,\n      \"\"\"\n          ...code...\n      \"\"\")", "in_reply_to_id": 163366611}