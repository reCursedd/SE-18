{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/294778959", "html_url": "https://github.com/tensorflow/tensorflow/issues/9284#issuecomment-294778959", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9284", "id": 294778959, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDc3ODk1OQ==", "user": {"login": "tillahoffmann", "id": 966348, "node_id": "MDQ6VXNlcjk2NjM0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/966348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tillahoffmann", "html_url": "https://github.com/tillahoffmann", "followers_url": "https://api.github.com/users/tillahoffmann/followers", "following_url": "https://api.github.com/users/tillahoffmann/following{/other_user}", "gists_url": "https://api.github.com/users/tillahoffmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tillahoffmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tillahoffmann/subscriptions", "organizations_url": "https://api.github.com/users/tillahoffmann/orgs", "repos_url": "https://api.github.com/users/tillahoffmann/repos", "events_url": "https://api.github.com/users/tillahoffmann/events{/privacy}", "received_events_url": "https://api.github.com/users/tillahoffmann/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-18T10:48:41Z", "updated_at": "2017-04-18T10:48:41Z", "author_association": "CONTRIBUTOR", "body_html": "<p>A workaround might be the following but I don't know how bad the overheads are.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">broadcastable_where</span>(<span class=\"pl-smi\">condition</span>, <span class=\"pl-smi\">x</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">y</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-k\">*</span><span class=\"pl-smi\">args</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">kwargs</span>):\n    <span class=\"pl-k\">if</span> x <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">and</span> y <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n        <span class=\"pl-k\">return</span> tf.where(condition, x, y, <span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n    <span class=\"pl-k\">else</span>:\n        _shape <span class=\"pl-k\">=</span> tf.broadcast_dynamic_shape(tf.shape(condition), tf.shape(x))\n        _broadcaster <span class=\"pl-k\">=</span> tf.ones(_shape)\n        <span class=\"pl-k\">return</span> tf.where(\n            condition <span class=\"pl-k\">&amp;</span> (_broadcaster <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0.0</span>), \n            x <span class=\"pl-k\">*</span> _broadcaster,\n            y <span class=\"pl-k\">*</span> _broadcaster,\n            <span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs\n        )</pre></div>", "body_text": "A workaround might be the following but I don't know how bad the overheads are.\ndef broadcastable_where(condition, x=None, y=None, *args, **kwargs):\n    if x is None and y is None:\n        return tf.where(condition, x, y, *args, **kwargs)\n    else:\n        _shape = tf.broadcast_dynamic_shape(tf.shape(condition), tf.shape(x))\n        _broadcaster = tf.ones(_shape)\n        return tf.where(\n            condition & (_broadcaster > 0.0), \n            x * _broadcaster,\n            y * _broadcaster,\n            *args, **kwargs\n        )", "body": "A workaround might be the following but I don't know how bad the overheads are.\r\n\r\n```python\r\ndef broadcastable_where(condition, x=None, y=None, *args, **kwargs):\r\n    if x is None and y is None:\r\n        return tf.where(condition, x, y, *args, **kwargs)\r\n    else:\r\n        _shape = tf.broadcast_dynamic_shape(tf.shape(condition), tf.shape(x))\r\n        _broadcaster = tf.ones(_shape)\r\n        return tf.where(\r\n            condition & (_broadcaster > 0.0), \r\n            x * _broadcaster,\r\n            y * _broadcaster,\r\n            *args, **kwargs\r\n        )\r\n```"}