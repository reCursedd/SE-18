{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/355857728", "html_url": "https://github.com/tensorflow/tensorflow/issues/9284#issuecomment-355857728", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9284", "id": 355857728, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTg1NzcyOA==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-07T22:22:10Z", "updated_at": "2018-01-07T22:22:10Z", "author_association": "MEMBER", "body_html": "<p>I was trying to add the implementation but noticed that there are some incompatibilities between the current behavior of <code>tf.where</code> and the <code>broadcast</code> used by other ops in TensorFlow.</p>\n<p>The current behavior of <code>tf.where</code> is to <code>broadcast</code> of vector starts with the beginning of the dimension. But the broadcast for other ops is from the end of the dimension.</p>\n<p>For example, <code>[16]</code> and <code>[16, 2, 8]</code> is a valid op for <code>tf.where</code>. See:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/faf7f05f5ed3d92405656a318fb2d571a7d31532/tensorflow/python/kernel_tests/cwise_ops_test.py#L1602-L1614\">tensorflow/tensorflow/python/kernel_tests/cwise_ops_test.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 1602 to 1614\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/faf7f05f5ed3d92405656a318fb2d571a7d31532\">faf7f05</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L1602\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1602\"></td>\n          <td id=\"LC1602\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">testBasic</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1603\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1603\"></td>\n          <td id=\"LC1603\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   c <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">16</span>).astype(np.bool) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1604\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1604\"></td>\n          <td id=\"LC1604\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   x <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-c1\">16</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">8</span>) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">100</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1605\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1605\"></td>\n          <td id=\"LC1605\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   y <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-c1\">16</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">8</span>) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">100</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1606\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1606\"></td>\n          <td id=\"LC1606\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">for</span> t <span class=\"pl-k\">in</span> [ </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1607\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1607\"></td>\n          <td id=\"LC1607\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       np.float16, np.float32, np.float64, np.int32, np.int64, np.complex64, </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1608\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1608\"></td>\n          <td id=\"LC1608\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       np.complex128 </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1609\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1609\"></td>\n          <td id=\"LC1609\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   ]: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1610\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1610\"></td>\n          <td id=\"LC1610\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     xt <span class=\"pl-k\">=</span> x.astype(t) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1611\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1611\"></td>\n          <td id=\"LC1611\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     yt <span class=\"pl-k\">=</span> y.astype(t) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1612\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1612\"></td>\n          <td id=\"LC1612\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-c1\">self</span>._compare(c, xt, yt, <span class=\"pl-v\">use_gpu</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1613\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1613\"></td>\n          <td id=\"LC1613\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> t <span class=\"pl-k\">in</span> [np.float16, np.float32, np.float64]: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1614\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1614\"></td>\n          <td id=\"LC1614\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-c1\">self</span>._compare(c, xt, yt, <span class=\"pl-v\">use_gpu</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>But <code>[16]</code> and <code>[16, 2, 8]</code> will throw out an error for <code>np.where</code>:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> \n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> c <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">16</span>).astype(np.bool)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> x <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-c1\">16</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">8</span>) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">100</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> y <span class=\"pl-k\">=</span> np.random.rand(<span class=\"pl-c1\">16</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">8</span>) <span class=\"pl-k\">*</span> <span class=\"pl-c1\">100</span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> \n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> np.where(c, x, y)\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stdin&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n<span class=\"pl-c1\">ValueError</span>: operands could <span class=\"pl-k\">not</span> be broadcast together <span class=\"pl-k\">with</span> shapes (<span class=\"pl-c1\">16</span>,) (<span class=\"pl-c1\">16</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">8</span>) (<span class=\"pl-c1\">16</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">8</span>) \n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> </pre></div>", "body_text": "I was trying to add the implementation but noticed that there are some incompatibilities between the current behavior of tf.where and the broadcast used by other ops in TensorFlow.\nThe current behavior of tf.where is to broadcast of vector starts with the beginning of the dimension. But the broadcast for other ops is from the end of the dimension.\nFor example, [16] and [16, 2, 8] is a valid op for tf.where. See:\n\n  \n    \n      tensorflow/tensorflow/python/kernel_tests/cwise_ops_test.py\n    \n    \n        Lines 1602 to 1614\n      in\n      faf7f05\n    \n    \n    \n    \n\n        \n          \n           def testBasic(self): \n        \n\n        \n          \n             c = np.random.randint(0, 2, 16).astype(np.bool) \n        \n\n        \n          \n             x = np.random.rand(16, 2, 8) * 100 \n        \n\n        \n          \n             y = np.random.rand(16, 2, 8) * 100 \n        \n\n        \n          \n             for t in [ \n        \n\n        \n          \n                 np.float16, np.float32, np.float64, np.int32, np.int64, np.complex64, \n        \n\n        \n          \n                 np.complex128 \n        \n\n        \n          \n             ]: \n        \n\n        \n          \n               xt = x.astype(t) \n        \n\n        \n          \n               yt = y.astype(t) \n        \n\n        \n          \n               self._compare(c, xt, yt, use_gpu=False) \n        \n\n        \n          \n               if t in [np.float16, np.float32, np.float64]: \n        \n\n        \n          \n                 self._compare(c, xt, yt, use_gpu=True) \n        \n    \n  \n\n\nBut [16] and [16, 2, 8] will throw out an error for np.where:\n>>> import numpy as np\n>>> \n>>> c = np.random.randint(0, 2, 16).astype(np.bool)\n>>> x = np.random.rand(16, 2, 8) * 100\n>>> y = np.random.rand(16, 2, 8) * 100\n>>> \n>>> np.where(c, x, y)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: operands could not be broadcast together with shapes (16,) (16,2,8) (16,2,8) \n>>>", "body": "I was trying to add the implementation but noticed that there are some incompatibilities between the current behavior of `tf.where` and the `broadcast` used by other ops in TensorFlow.\r\n\r\nThe current behavior of `tf.where` is to `broadcast` of vector starts with the beginning of the dimension. But the broadcast for other ops is from the end of the dimension.\r\n\r\nFor example, `[16]` and `[16, 2, 8]` is a valid op for `tf.where`. See:\r\nhttps://github.com/tensorflow/tensorflow/blob/faf7f05f5ed3d92405656a318fb2d571a7d31532/tensorflow/python/kernel_tests/cwise_ops_test.py#L1602-L1614\r\n\r\nBut `[16]` and `[16, 2, 8]` will throw out an error for `np.where`:\r\n```python\r\n>>> import numpy as np\r\n>>> \r\n>>> c = np.random.randint(0, 2, 16).astype(np.bool)\r\n>>> x = np.random.rand(16, 2, 8) * 100\r\n>>> y = np.random.rand(16, 2, 8) * 100\r\n>>> \r\n>>> np.where(c, x, y)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nValueError: operands could not be broadcast together with shapes (16,) (16,2,8) (16,2,8) \r\n>>> \r\n```\r\n"}