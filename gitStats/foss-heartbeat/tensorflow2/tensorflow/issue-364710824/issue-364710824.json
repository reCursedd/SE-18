{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22579", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22579/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22579/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22579/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22579", "id": 364710824, "node_id": "MDU6SXNzdWUzNjQ3MTA4MjQ=", "number": 22579, "title": "save tensorflow  model to .pb file ", "user": {"login": "omrylcn", "id": 24555636, "node_id": "MDQ6VXNlcjI0NTU1NjM2", "avatar_url": "https://avatars2.githubusercontent.com/u/24555636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omrylcn", "html_url": "https://github.com/omrylcn", "followers_url": "https://api.github.com/users/omrylcn/followers", "following_url": "https://api.github.com/users/omrylcn/following{/other_user}", "gists_url": "https://api.github.com/users/omrylcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/omrylcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omrylcn/subscriptions", "organizations_url": "https://api.github.com/users/omrylcn/orgs", "repos_url": "https://api.github.com/users/omrylcn/repos", "events_url": "https://api.github.com/users/omrylcn/events{/privacy}", "received_events_url": "https://api.github.com/users/omrylcn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "harshini-gadige", "id": 42781361, "node_id": "MDQ6VXNlcjQyNzgxMzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/42781361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshini-gadige", "html_url": "https://github.com/harshini-gadige", "followers_url": "https://api.github.com/users/harshini-gadige/followers", "following_url": "https://api.github.com/users/harshini-gadige/following{/other_user}", "gists_url": "https://api.github.com/users/harshini-gadige/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshini-gadige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshini-gadige/subscriptions", "organizations_url": "https://api.github.com/users/harshini-gadige/orgs", "repos_url": "https://api.github.com/users/harshini-gadige/repos", "events_url": "https://api.github.com/users/harshini-gadige/events{/privacy}", "received_events_url": "https://api.github.com/users/harshini-gadige/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "harshini-gadige", "id": 42781361, "node_id": "MDQ6VXNlcjQyNzgxMzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/42781361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshini-gadige", "html_url": "https://github.com/harshini-gadige", "followers_url": "https://api.github.com/users/harshini-gadige/followers", "following_url": "https://api.github.com/users/harshini-gadige/following{/other_user}", "gists_url": "https://api.github.com/users/harshini-gadige/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshini-gadige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshini-gadige/subscriptions", "organizations_url": "https://api.github.com/users/harshini-gadige/orgs", "repos_url": "https://api.github.com/users/harshini-gadige/repos", "events_url": "https://api.github.com/users/harshini-gadige/events{/privacy}", "received_events_url": "https://api.github.com/users/harshini-gadige/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-09-28T01:45:37Z", "updated_at": "2018-09-28T12:57:31Z", "closed_at": "2018-09-28T12:57:31Z", "author_association": "NONE", "body_html": "<p>Hi I wonder , how do I save model to .pb file to retrain model  ? Below ,there is sample model for experiment. Thanks for helping</p>\n<p>#######################################################################<br>\nx=tf.placeholder(tf.float32,shape=[None,2],name=\"x\")<br>\ny=tf.placeholder(tf.float32,shape=[None,1],name=\"y\")</p>\n<p>with tf.name_scope(\"dnn\"):<br>\nlayer1=tf.layers.dense(x,15,activation=tf.nn.relu,<br>\nkernel_initializer= tf.initializers.truncated_normal(),name=\"layer1\")<br>\nlayer2=tf.layers.dense(layer1,20,activation=tf.nn.relu,<br>\nkernel_initializer= tf.initializers.truncated_normal(),name=\"layer2\")<br>\nlogits=tf.layers.dense(layer2,1,<br>\nkernel_initializer= tf.initializers.truncated_normal(),name=\"logits\")<br>\nout=tf.nn.sigmoid(logits,name=\"out\")</p>\n<p>with tf.name_scope(\"train\"):<br>\nloss=tf.losses.sigmoid_cross_entropy(multi_class_labels=y,logits=logits)<br>\ntrain_op=tf.train.AdamOptimizer().minimize(loss)</p>\n<p>with tf.name_scope(\"eval\"):<br>\ncorrect=tf.equal(tf.round(out),y)<br>\naccuracy = tf.reduce_mean(tf.cast(correct, tf.float32))</p>\n<p>saver=tf.train.Saver()</p>\n<p>epochs=2000<br>\nwith tf.Session( ) as sess:<br>\nsess.run(tf.global_variables_initializer())<br>\nfor epoch in range(epochs+1):<br>\nsess.run(train_op,feed_dict={x:trainx,y:trainy})<br>\nif epoch%1000==0:<br>\nl,a=sess.run([loss,accuracy],feed_dict={x:trainx,y:trainy})<br>\nprint(\"Epoch {} | Accuracy : {:.2f} | Loss :{:.2f}\".format(epoch,a,l))<br>\nsaver.save(sess,\"./moon_model\")<br>\ntf.train.write_graph(sess.graph.as_graph_def(), '.', 'moon_model.pbtxt', as_text=True)</p>\n<p>########################################################################<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"115896656\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/3\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/3/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/3\">#3</a></p>", "body_text": "Hi I wonder , how do I save model to .pb file to retrain model  ? Below ,there is sample model for experiment. Thanks for helping\n#######################################################################\nx=tf.placeholder(tf.float32,shape=[None,2],name=\"x\")\ny=tf.placeholder(tf.float32,shape=[None,1],name=\"y\")\nwith tf.name_scope(\"dnn\"):\nlayer1=tf.layers.dense(x,15,activation=tf.nn.relu,\nkernel_initializer= tf.initializers.truncated_normal(),name=\"layer1\")\nlayer2=tf.layers.dense(layer1,20,activation=tf.nn.relu,\nkernel_initializer= tf.initializers.truncated_normal(),name=\"layer2\")\nlogits=tf.layers.dense(layer2,1,\nkernel_initializer= tf.initializers.truncated_normal(),name=\"logits\")\nout=tf.nn.sigmoid(logits,name=\"out\")\nwith tf.name_scope(\"train\"):\nloss=tf.losses.sigmoid_cross_entropy(multi_class_labels=y,logits=logits)\ntrain_op=tf.train.AdamOptimizer().minimize(loss)\nwith tf.name_scope(\"eval\"):\ncorrect=tf.equal(tf.round(out),y)\naccuracy = tf.reduce_mean(tf.cast(correct, tf.float32))\nsaver=tf.train.Saver()\nepochs=2000\nwith tf.Session( ) as sess:\nsess.run(tf.global_variables_initializer())\nfor epoch in range(epochs+1):\nsess.run(train_op,feed_dict={x:trainx,y:trainy})\nif epoch%1000==0:\nl,a=sess.run([loss,accuracy],feed_dict={x:trainx,y:trainy})\nprint(\"Epoch {} | Accuracy : {:.2f} | Loss :{:.2f}\".format(epoch,a,l))\nsaver.save(sess,\"./moon_model\")\ntf.train.write_graph(sess.graph.as_graph_def(), '.', 'moon_model.pbtxt', as_text=True)\n#########################################################################3", "body": "Hi I wonder , how do I save model to .pb file to retrain model  ? Below ,there is sample model for experiment. Thanks for helping\r\n\r\n#######################################################################\r\nx=tf.placeholder(tf.float32,shape=[None,2],name=\"x\")\r\ny=tf.placeholder(tf.float32,shape=[None,1],name=\"y\")\r\n\r\nwith tf.name_scope(\"dnn\"):\r\n      layer1=tf.layers.dense(x,15,activation=tf.nn.relu,\r\n                           kernel_initializer= tf.initializers.truncated_normal(),name=\"layer1\")\r\n    layer2=tf.layers.dense(layer1,20,activation=tf.nn.relu,\r\n                           kernel_initializer= tf.initializers.truncated_normal(),name=\"layer2\")\r\n    logits=tf.layers.dense(layer2,1,\r\n                           kernel_initializer= tf.initializers.truncated_normal(),name=\"logits\")\r\n    out=tf.nn.sigmoid(logits,name=\"out\")\r\n    \r\nwith tf.name_scope(\"train\"):\r\n    loss=tf.losses.sigmoid_cross_entropy(multi_class_labels=y,logits=logits)\r\n    train_op=tf.train.AdamOptimizer().minimize(loss)\r\n\r\nwith tf.name_scope(\"eval\"):\r\n    correct=tf.equal(tf.round(out),y)\r\n    accuracy = tf.reduce_mean(tf.cast(correct, tf.float32))\r\n\r\nsaver=tf.train.Saver()\r\n\r\nepochs=2000\r\nwith tf.Session( ) as sess:\r\n    sess.run(tf.global_variables_initializer())\r\n    for epoch in range(epochs+1):\r\n        sess.run(train_op,feed_dict={x:trainx,y:trainy})\r\n        if epoch%1000==0:\r\n            l,a=sess.run([loss,accuracy],feed_dict={x:trainx,y:trainy})\r\n            print(\"Epoch {} | Accuracy : {:.2f} | Loss :{:.2f}\".format(epoch,a,l))\r\n            saver.save(sess,\"./moon_model\")\r\n    tf.train.write_graph(sess.graph.as_graph_def(), '.', 'moon_model.pbtxt', as_text=True)\r\n\r\n#########################################################################3\r\n\r\n"}