{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17207", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17207/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17207/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17207/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17207", "id": 299578961, "node_id": "MDU6SXNzdWUyOTk1Nzg5NjE=", "number": 17207, "title": "TF Keras inference is way slower than Numpy", "user": {"login": "alexschoeberl", "id": 7230667, "node_id": "MDQ6VXNlcjcyMzA2Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/7230667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexschoeberl", "html_url": "https://github.com/alexschoeberl", "followers_url": "https://api.github.com/users/alexschoeberl/followers", "following_url": "https://api.github.com/users/alexschoeberl/following{/other_user}", "gists_url": "https://api.github.com/users/alexschoeberl/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexschoeberl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexschoeberl/subscriptions", "organizations_url": "https://api.github.com/users/alexschoeberl/orgs", "repos_url": "https://api.github.com/users/alexschoeberl/repos", "events_url": "https://api.github.com/users/alexschoeberl/events{/privacy}", "received_events_url": "https://api.github.com/users/alexschoeberl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-23T02:30:13Z", "updated_at": "2018-02-23T06:40:32Z", "closed_at": "2018-02-23T06:22:48Z", "author_association": "NONE", "body_html": "<p>I'm working on a reinforcement learning model implemented with Keras and Tensorflow. I have to do frequent calls to model.predict() on single inputs.</p>\n<p>While testing inference on a simple pretrained model, I noticed that using Keras' model.predict is WAY slower than just using Numpy on stored weights. Why is it that slow and how can I accelerate it? Using pure Numpy is not viable for complex models.</p>\n<pre><code>import timeit\nimport numpy as np\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense\n\nw = np.array([[-1., 1., 0., 0.], [0., 0., -1., 1.]]).T\nb = np.array([ 15., -15., -21., 21.])\n\nmodel = Sequential()\nmodel.add(Dense(4, input_dim=2, activation='linear'))\nmodel.layers[0].set_weights([w.T, b])\nmodel.compile(loss='mse', optimizer='adam')\n\nstate = np.array([-23.5, 17.8])\n\ndef predict_very_slow():\n    return model.predict(state[np.newaxis])[0]\n\ndef predict_slow():\n    ws = model.layers[0].get_weights()\n    return np.matmul(ws[0].T, state) + ws[1]\n\ndef predict_fast():\n    return np.matmul(w, state) + b\n\nprint(\n    timeit.timeit(predict_very_slow, number=10000),\n    timeit.timeit(predict_slow, number=10000),\n    timeit.timeit(predict_fast, number=10000)\n)\n# 5.168972805004538 1.6963867129435828 0.021918574168087623\n# 5.461319456664639 1.5491559107269515 0.021502970783442876\n</code></pre>\n<p>I'm using Tensorflow for CPU, version 1.5.0 installed from pypi for python 3.5 on Windows 10.</p>", "body_text": "I'm working on a reinforcement learning model implemented with Keras and Tensorflow. I have to do frequent calls to model.predict() on single inputs.\nWhile testing inference on a simple pretrained model, I noticed that using Keras' model.predict is WAY slower than just using Numpy on stored weights. Why is it that slow and how can I accelerate it? Using pure Numpy is not viable for complex models.\nimport timeit\nimport numpy as np\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense\n\nw = np.array([[-1., 1., 0., 0.], [0., 0., -1., 1.]]).T\nb = np.array([ 15., -15., -21., 21.])\n\nmodel = Sequential()\nmodel.add(Dense(4, input_dim=2, activation='linear'))\nmodel.layers[0].set_weights([w.T, b])\nmodel.compile(loss='mse', optimizer='adam')\n\nstate = np.array([-23.5, 17.8])\n\ndef predict_very_slow():\n    return model.predict(state[np.newaxis])[0]\n\ndef predict_slow():\n    ws = model.layers[0].get_weights()\n    return np.matmul(ws[0].T, state) + ws[1]\n\ndef predict_fast():\n    return np.matmul(w, state) + b\n\nprint(\n    timeit.timeit(predict_very_slow, number=10000),\n    timeit.timeit(predict_slow, number=10000),\n    timeit.timeit(predict_fast, number=10000)\n)\n# 5.168972805004538 1.6963867129435828 0.021918574168087623\n# 5.461319456664639 1.5491559107269515 0.021502970783442876\n\nI'm using Tensorflow for CPU, version 1.5.0 installed from pypi for python 3.5 on Windows 10.", "body": "I'm working on a reinforcement learning model implemented with Keras and Tensorflow. I have to do frequent calls to model.predict() on single inputs.\r\n\r\nWhile testing inference on a simple pretrained model, I noticed that using Keras' model.predict is WAY slower than just using Numpy on stored weights. Why is it that slow and how can I accelerate it? Using pure Numpy is not viable for complex models.\r\n\r\n    import timeit\r\n    import numpy as np\r\n    from tensorflow.python.keras.models import Sequential\r\n    from tensorflow.python.keras.layers import Dense\r\n    \r\n    w = np.array([[-1., 1., 0., 0.], [0., 0., -1., 1.]]).T\r\n    b = np.array([ 15., -15., -21., 21.])\r\n    \r\n    model = Sequential()\r\n    model.add(Dense(4, input_dim=2, activation='linear'))\r\n    model.layers[0].set_weights([w.T, b])\r\n    model.compile(loss='mse', optimizer='adam')\r\n    \r\n    state = np.array([-23.5, 17.8])\r\n    \r\n    def predict_very_slow():\r\n        return model.predict(state[np.newaxis])[0]\r\n    \r\n    def predict_slow():\r\n        ws = model.layers[0].get_weights()\r\n        return np.matmul(ws[0].T, state) + ws[1]\r\n    \r\n    def predict_fast():\r\n        return np.matmul(w, state) + b\r\n    \r\n    print(\r\n        timeit.timeit(predict_very_slow, number=10000),\r\n        timeit.timeit(predict_slow, number=10000),\r\n        timeit.timeit(predict_fast, number=10000)\r\n    )\r\n    # 5.168972805004538 1.6963867129435828 0.021918574168087623\r\n    # 5.461319456664639 1.5491559107269515 0.021502970783442876\r\n\r\nI'm using Tensorflow for CPU, version 1.5.0 installed from pypi for python 3.5 on Windows 10."}