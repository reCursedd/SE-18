{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/345211197", "html_url": "https://github.com/tensorflow/tensorflow/issues/14633#issuecomment-345211197", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14633", "id": 345211197, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTIxMTE5Nw==", "user": {"login": "awav", "id": 24483645, "node_id": "MDQ6VXNlcjI0NDgzNjQ1", "avatar_url": "https://avatars0.githubusercontent.com/u/24483645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/awav", "html_url": "https://github.com/awav", "followers_url": "https://api.github.com/users/awav/followers", "following_url": "https://api.github.com/users/awav/following{/other_user}", "gists_url": "https://api.github.com/users/awav/gists{/gist_id}", "starred_url": "https://api.github.com/users/awav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/awav/subscriptions", "organizations_url": "https://api.github.com/users/awav/orgs", "repos_url": "https://api.github.com/users/awav/repos", "events_url": "https://api.github.com/users/awav/events{/privacy}", "received_events_url": "https://api.github.com/users/awav/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-17T10:51:17Z", "updated_at": "2017-11-17T10:52:13Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>, The motivation is that the same iterator can be used with different data sources and another iterators can also be involved, hence we need to re-initialize only iterators and variables for which sources were altered. In other words, we need to be able to filter initialized variables at model's variables (&amp;iterators) list. In <a href=\"https://github.com/GPflow/GPflow\">GPflow</a>, the model can look as:</p>\n<pre><code>In [6]: model = gpflow.models.SVGP(X=np.random.randn(10, 1),\n   ...:                                 Y=np.random.randn(10, 1),\n   ...:                                 kern=gpflow.kernels.RBF(1),\n   ...:                                 likelihood=gpflow.likelihoods.Gaussian(),\n   ...:                                 Z=np.random.randn(10, 1),\n   ...:                                 minibatch_size=1)\n</code></pre>\n<p>and X, Y will be transformed into minibatch interators, numpy arrays are passed to the placeholders. User is able to change this values any time.</p>", "body_text": "@mrry, The motivation is that the same iterator can be used with different data sources and another iterators can also be involved, hence we need to re-initialize only iterators and variables for which sources were altered. In other words, we need to be able to filter initialized variables at model's variables (&iterators) list. In GPflow, the model can look as:\nIn [6]: model = gpflow.models.SVGP(X=np.random.randn(10, 1),\n   ...:                                 Y=np.random.randn(10, 1),\n   ...:                                 kern=gpflow.kernels.RBF(1),\n   ...:                                 likelihood=gpflow.likelihoods.Gaussian(),\n   ...:                                 Z=np.random.randn(10, 1),\n   ...:                                 minibatch_size=1)\n\nand X, Y will be transformed into minibatch interators, numpy arrays are passed to the placeholders. User is able to change this values any time.", "body": "@mrry, The motivation is that the same iterator can be used with different data sources and another iterators can also be involved, hence we need to re-initialize only iterators and variables for which sources were altered. In other words, we need to be able to filter initialized variables at model's variables (&iterators) list. In [GPflow](https://github.com/GPflow/GPflow), the model can look as:\r\n\r\n```\r\nIn [6]: model = gpflow.models.SVGP(X=np.random.randn(10, 1),\r\n   ...:                                 Y=np.random.randn(10, 1),\r\n   ...:                                 kern=gpflow.kernels.RBF(1),\r\n   ...:                                 likelihood=gpflow.likelihoods.Gaussian(),\r\n   ...:                                 Z=np.random.randn(10, 1),\r\n   ...:                                 minibatch_size=1)\r\n```\r\nand X, Y will be transformed into minibatch interators, numpy arrays are passed to the placeholders. User is able to change this values any time."}