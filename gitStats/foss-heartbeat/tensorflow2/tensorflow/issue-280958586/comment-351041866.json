{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/351041866", "html_url": "https://github.com/tensorflow/tensorflow/issues/15266#issuecomment-351041866", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15266", "id": 351041866, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTA0MTg2Ng==", "user": {"login": "sandipmgiri", "id": 16284232, "node_id": "MDQ6VXNlcjE2Mjg0MjMy", "avatar_url": "https://avatars0.githubusercontent.com/u/16284232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandipmgiri", "html_url": "https://github.com/sandipmgiri", "followers_url": "https://api.github.com/users/sandipmgiri/followers", "following_url": "https://api.github.com/users/sandipmgiri/following{/other_user}", "gists_url": "https://api.github.com/users/sandipmgiri/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandipmgiri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandipmgiri/subscriptions", "organizations_url": "https://api.github.com/users/sandipmgiri/orgs", "repos_url": "https://api.github.com/users/sandipmgiri/repos", "events_url": "https://api.github.com/users/sandipmgiri/events{/privacy}", "received_events_url": "https://api.github.com/users/sandipmgiri/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-12T12:49:14Z", "updated_at": "2017-12-27T09:08:24Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Continued with the debugging, found following things:</p>\n<p><strong>For IsFiniteScalarF32 sub-test we are getting incorrect value at line</strong>:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/tests/array_elementwise_ops_test.cc#L99\">https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/tests/array_elementwise_ops_test.cc#L99</a><br>\n<code>auto result = builder.IsFinite(builder.ConstantR0&lt;float&gt;(NAN));</code><br>\nand <a href=\"https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/tests/array_elementwise_ops_test.cc#L104\">https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/tests/array_elementwise_ops_test.cc#L104</a><br>\n<code>auto result_non_canonical = builder.IsFinite(builder.ConstantR0&lt;float&gt;(kNonCanonicalNaN));</code></p>\n<p><code>builder.ConstantR0&lt;float&gt;(...)</code> on ppc64le incorrectly returning True instead of False when passed a NaN/kNonCanonicalNaN.</p>\n<p><strong>For IsFiniteR1F32s sub-test we are getting incorrect value at line</strong> <a href=\"https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/tests/array_elementwise_ops_test.cc#L122-L123\">https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/tests/array_elementwise_ops_test.cc#L122-L123</a></p>\n<pre><code> auto a = builder.ConstantR1&lt;float&gt;(\n      {{NAN, 7.0f, kNonCanonicalNaN, -1.0f, inf, -inf}});\n</code></pre>\n<p><code>builder.ConstantR1&lt;float&gt;(...) </code>on ppc64le incorrectly returning True instead of False when passed a NaN/kNonCanonicalNaN.</p>\n<p>Looked at <code>builder.ConstantR0&lt;float&gt;(...)</code> implementation, ConstantR0 defined in <a href=\"https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/client/computation_builder.h#L829-L831\">https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/client/computation_builder.h#L829-L831</a></p>\n<pre><code>template &lt;typename NativeT&gt;\nComputationDataHandle ComputationBuilder::ConstantR0(NativeT value) {\n  return ConstantOp([value](Literal* literal) { literal-&gt;PopulateR0(value); });\n</code></pre>\n<p>, going further, goes to ConstantOp([value](Literal* literal) { literal-&gt;PopulateR0(value); }); in <a href=\"https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/client/computation_builder.cc#L161-L164\">https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/client/computation_builder.cc#L161-L164</a></p>\n<pre><code>ComputationDataHandle ComputationBuilder::ConstantOp(\n    const PopulateLiteral&amp; populate) {\n  if (!first_error_.ok() || !PrepareComputation().ok()) {\n    return ComputationDataHandle();\n</code></pre>\n<p>Currently Putting prints and comparing the results with x86 to find exact difference.</p>", "body_text": "Continued with the debugging, found following things:\nFor IsFiniteScalarF32 sub-test we are getting incorrect value at line:\nhttps://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/tests/array_elementwise_ops_test.cc#L99\nauto result = builder.IsFinite(builder.ConstantR0<float>(NAN));\nand https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/tests/array_elementwise_ops_test.cc#L104\nauto result_non_canonical = builder.IsFinite(builder.ConstantR0<float>(kNonCanonicalNaN));\nbuilder.ConstantR0<float>(...) on ppc64le incorrectly returning True instead of False when passed a NaN/kNonCanonicalNaN.\nFor IsFiniteR1F32s sub-test we are getting incorrect value at line https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/tests/array_elementwise_ops_test.cc#L122-L123\n auto a = builder.ConstantR1<float>(\n      {{NAN, 7.0f, kNonCanonicalNaN, -1.0f, inf, -inf}});\n\nbuilder.ConstantR1<float>(...) on ppc64le incorrectly returning True instead of False when passed a NaN/kNonCanonicalNaN.\nLooked at builder.ConstantR0<float>(...) implementation, ConstantR0 defined in https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/client/computation_builder.h#L829-L831\ntemplate <typename NativeT>\nComputationDataHandle ComputationBuilder::ConstantR0(NativeT value) {\n  return ConstantOp([value](Literal* literal) { literal->PopulateR0(value); });\n\n, going further, goes to ConstantOp([value](Literal* literal) { literal->PopulateR0(value); }); in https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/client/computation_builder.cc#L161-L164\nComputationDataHandle ComputationBuilder::ConstantOp(\n    const PopulateLiteral& populate) {\n  if (!first_error_.ok() || !PrepareComputation().ok()) {\n    return ComputationDataHandle();\n\nCurrently Putting prints and comparing the results with x86 to find exact difference.", "body": "Continued with the debugging, found following things:\r\n\r\n**For IsFiniteScalarF32 sub-test we are getting incorrect value at line**: \r\nhttps://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/tests/array_elementwise_ops_test.cc#L99\r\n`auto result = builder.IsFinite(builder.ConstantR0<float>(NAN));`\r\nand https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/tests/array_elementwise_ops_test.cc#L104\r\n`auto result_non_canonical = builder.IsFinite(builder.ConstantR0<float>(kNonCanonicalNaN));`\r\n\r\n`builder.ConstantR0<float>(...)` on ppc64le incorrectly returning True instead of False when passed a NaN/kNonCanonicalNaN.\r\n\r\n**For IsFiniteR1F32s sub-test we are getting incorrect value at line** https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/tests/array_elementwise_ops_test.cc#L122-L123\r\n```\r\n auto a = builder.ConstantR1<float>(\r\n      {{NAN, 7.0f, kNonCanonicalNaN, -1.0f, inf, -inf}});\r\n```\r\n\r\n`builder.ConstantR1<float>(...) `on ppc64le incorrectly returning True instead of False when passed a NaN/kNonCanonicalNaN.\r\n\r\nLooked at `builder.ConstantR0<float>(...)` implementation, ConstantR0 defined in https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/client/computation_builder.h#L829-L831\r\n\r\n```\r\ntemplate <typename NativeT>\r\nComputationDataHandle ComputationBuilder::ConstantR0(NativeT value) {\r\n  return ConstantOp([value](Literal* literal) { literal->PopulateR0(value); });\r\n```\r\n\r\n, going further, goes to ConstantOp([value](Literal* literal) { literal->PopulateR0(value); }); in https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/compiler/xla/client/computation_builder.cc#L161-L164\r\n\r\n```\r\nComputationDataHandle ComputationBuilder::ConstantOp(\r\n    const PopulateLiteral& populate) {\r\n  if (!first_error_.ok() || !PrepareComputation().ok()) {\r\n    return ComputationDataHandle();\r\n```\r\n\r\nCurrently Putting prints and comparing the results with x86 to find exact difference.\r\n\r\n"}