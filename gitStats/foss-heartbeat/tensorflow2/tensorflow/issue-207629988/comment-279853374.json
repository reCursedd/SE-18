{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/279853374", "html_url": "https://github.com/tensorflow/tensorflow/issues/7508#issuecomment-279853374", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7508", "id": 279853374, "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTg1MzM3NA==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-14T22:14:26Z", "updated_at": "2017-02-14T22:14:26Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Nice reproducible example!</p>\n<p>It works if you do <code>^x</code> instead of <code>x</code></p>\n<p><code>   tf.import_graph_def(g1.as_graph_def(), input_map={\"^x\": z})</code></p>\n<p>Looking at the relevant logic, in importer.py, it seems it takes name of node directly from graphdef, so \"x\" would have two names, \"x\" and \"^x\" depending on the role, and you'd need to specify two remapping rules for it. Not ideal, not sure if there's an easy way to fix it, cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> because he left a comment there</p>\n<pre><code>  for i, input_name in enumerate(\n      [_CanonicalInputName(x) for x in node.input]):\n</code></pre>", "body_text": "Nice reproducible example!\nIt works if you do ^x instead of x\n   tf.import_graph_def(g1.as_graph_def(), input_map={\"^x\": z})\nLooking at the relevant logic, in importer.py, it seems it takes name of node directly from graphdef, so \"x\" would have two names, \"x\" and \"^x\" depending on the role, and you'd need to specify two remapping rules for it. Not ideal, not sure if there's an easy way to fix it, cc @mrry because he left a comment there\n  for i, input_name in enumerate(\n      [_CanonicalInputName(x) for x in node.input]):", "body": "Nice reproducible example!\r\n\r\nIt works if you do `^x` instead of `x`\r\n\r\n`    tf.import_graph_def(g1.as_graph_def(), input_map={\"^x\": z})\r\n`\r\n\r\nLooking at the relevant logic, in importer.py, it seems it takes name of node directly from graphdef, so \"x\" would have two names, \"x\" and \"^x\" depending on the role, and you'd need to specify two remapping rules for it. Not ideal, not sure if there's an easy way to fix it, cc @mrry because he left a comment there \r\n\r\n      for i, input_name in enumerate(\r\n          [_CanonicalInputName(x) for x in node.input]):\r\n"}