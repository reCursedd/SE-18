{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/337826440", "html_url": "https://github.com/tensorflow/tensorflow/issues/13827#issuecomment-337826440", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13827", "id": 337826440, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzgyNjQ0MA==", "user": {"login": "Ouwen", "id": 5455421, "node_id": "MDQ6VXNlcjU0NTU0MjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5455421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ouwen", "html_url": "https://github.com/Ouwen", "followers_url": "https://api.github.com/users/Ouwen/followers", "following_url": "https://api.github.com/users/Ouwen/following{/other_user}", "gists_url": "https://api.github.com/users/Ouwen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ouwen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ouwen/subscriptions", "organizations_url": "https://api.github.com/users/Ouwen/orgs", "repos_url": "https://api.github.com/users/Ouwen/repos", "events_url": "https://api.github.com/users/Ouwen/events{/privacy}", "received_events_url": "https://api.github.com/users/Ouwen/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-19T07:44:51Z", "updated_at": "2017-10-19T07:59:31Z", "author_association": "CONTRIBUTOR", "body_html": "<p>So here is what I've found after looking through the code. This error is propagated from tensorflow version <code>0.5.0</code> to <code>1.4.0-rc0</code></p>\n<p><code>tf.float16</code> <code>None</code> values pass without any problems because they are not checked in <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L273-L291\"><code>_TF_TO_IS_OK</code></a>. <code>None</code> values are thus not stopped by the <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L376\"><code>_AssertCompatible</code></a> call, where they continue onward to be transformed into <code>nan</code> values by <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L377\"><code>np.array</code></a></p>\n<p>For <code>float32</code>, and  <code>float64</code> types, <code>None</code> values are caught by the <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L294-L303\"><code>_AssertCompatible</code></a>, and since they are not an instance of <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L243\"><code>compat.real_types</code></a> <code>(_numbers.Real, _np.integer, _np.floating)</code> a <code>TypeError</code> is raised.</p>\n<p>So while the following produces an error:</p>\n<pre><code>sess = tf.Session()\nprint(sess.run(tf.constant([1, 2, 3, 4, 5, 6, None], dtype=tf.float32)))\n// TypeError: Expected float32, got None of type '_Message' instead.\n</code></pre>\n<p>Using explicit <code>nan</code> will not cause an error</p>\n<pre><code>sess = tf.Session()\nprint(sess.run(tf.constant([1, 2, 3, 4, 5, 6, float('nan')], dtype=tf.float32)))\n</code></pre>\n<p>Since the <code>convert_to_tensor</code> abstraction states the <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/ops.py#L575-L578\">following are equivalent</a></p>\n<pre><code>value_1 = my_func(tf.constant([[1.0, 2.0], [3.0, 4.0]]))\nvalue_2 = my_func([[1.0, 2.0], [3.0, 4.0]])\nvalue_3 = my_func(np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float32))\n</code></pre>\n<p>I believe that the below should be equivalent as well</p>\n<pre><code>value_a = my_func(tf.constant([[1.0, 2.0], [3.0, None]], dtype=tf.float32))\nvalue_b = my_func(np.array([[1.0, 2.0], [3.0, None]], dtype=np.float32))\n</code></pre>\n<p>Given what has been found, I would like to</p>\n<ol>\n<li>\n<p>Update <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L240-L243\"><code>_FilterFloat</code></a> to allow for <code>None</code> values.</p>\n</li>\n<li>\n<p>Add <code>tf.float16</code> into the  <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L273-L291\"><code>_TF_TO_IS_OK</code></a> dictionary with the <code>_FilterFloat</code> function</p>\n</li>\n<li>\n<p>Add a test into <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/ops_test.py\"><code>ops_test.py</code></a> named <code>testConvertToTensorFloatNoneValue</code></p>\n</li>\n</ol>\n<p>Please let me know if this is a good plan assuming nothing breaks.</p>", "body_text": "So here is what I've found after looking through the code. This error is propagated from tensorflow version 0.5.0 to 1.4.0-rc0\ntf.float16 None values pass without any problems because they are not checked in _TF_TO_IS_OK. None values are thus not stopped by the _AssertCompatible call, where they continue onward to be transformed into nan values by np.array\nFor float32, and  float64 types, None values are caught by the _AssertCompatible, and since they are not an instance of compat.real_types (_numbers.Real, _np.integer, _np.floating) a TypeError is raised.\nSo while the following produces an error:\nsess = tf.Session()\nprint(sess.run(tf.constant([1, 2, 3, 4, 5, 6, None], dtype=tf.float32)))\n// TypeError: Expected float32, got None of type '_Message' instead.\n\nUsing explicit nan will not cause an error\nsess = tf.Session()\nprint(sess.run(tf.constant([1, 2, 3, 4, 5, 6, float('nan')], dtype=tf.float32)))\n\nSince the convert_to_tensor abstraction states the following are equivalent\nvalue_1 = my_func(tf.constant([[1.0, 2.0], [3.0, 4.0]]))\nvalue_2 = my_func([[1.0, 2.0], [3.0, 4.0]])\nvalue_3 = my_func(np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float32))\n\nI believe that the below should be equivalent as well\nvalue_a = my_func(tf.constant([[1.0, 2.0], [3.0, None]], dtype=tf.float32))\nvalue_b = my_func(np.array([[1.0, 2.0], [3.0, None]], dtype=np.float32))\n\nGiven what has been found, I would like to\n\n\nUpdate _FilterFloat to allow for None values.\n\n\nAdd tf.float16 into the  _TF_TO_IS_OK dictionary with the _FilterFloat function\n\n\nAdd a test into ops_test.py named testConvertToTensorFloatNoneValue\n\n\nPlease let me know if this is a good plan assuming nothing breaks.", "body": "So here is what I've found after looking through the code. This error is propagated from tensorflow version `0.5.0` to `1.4.0-rc0`\r\n\r\n`tf.float16` `None` values pass without any problems because they are not checked in [`_TF_TO_IS_OK`](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L273-L291). `None` values are thus not stopped by the [`_AssertCompatible`](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L376) call, where they continue onward to be transformed into `nan` values by [`np.array`](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L377)\r\n\r\nFor `float32`, and  `float64` types, `None` values are caught by the [`_AssertCompatible`](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L294-L303), and since they are not an instance of [`compat.real_types`](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L243) `(_numbers.Real, _np.integer, _np.floating)` a `TypeError` is raised.\r\n\r\nSo while the following produces an error: \r\n```\r\nsess = tf.Session()\r\nprint(sess.run(tf.constant([1, 2, 3, 4, 5, 6, None], dtype=tf.float32)))\r\n// TypeError: Expected float32, got None of type '_Message' instead.\r\n```\r\n\r\nUsing explicit `nan` will not cause an error\r\n```\r\nsess = tf.Session()\r\nprint(sess.run(tf.constant([1, 2, 3, 4, 5, 6, float('nan')], dtype=tf.float32)))\r\n```\r\n\r\nSince the `convert_to_tensor` abstraction states the [following are equivalent](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/ops.py#L575-L578)\r\n```\r\nvalue_1 = my_func(tf.constant([[1.0, 2.0], [3.0, 4.0]]))\r\nvalue_2 = my_func([[1.0, 2.0], [3.0, 4.0]])\r\nvalue_3 = my_func(np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float32))\r\n```\r\nI believe that the below should be equivalent as well\r\n```\r\nvalue_a = my_func(tf.constant([[1.0, 2.0], [3.0, None]], dtype=tf.float32))\r\nvalue_b = my_func(np.array([[1.0, 2.0], [3.0, None]], dtype=np.float32))\r\n```\r\n\r\nGiven what has been found, I would like to\r\n1. Update [`_FilterFloat`](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L240-L243) to allow for `None` values.\r\n\r\n2. Add `tf.float16` into the  [`_TF_TO_IS_OK`](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/tensor_util.py#L273-L291) dictionary with the `_FilterFloat` function\r\n\r\n3. Add a test into [`ops_test.py`](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/python/framework/ops_test.py) named `testConvertToTensorFloatNoneValue`\r\n\r\nPlease let me know if this is a good plan assuming nothing breaks."}