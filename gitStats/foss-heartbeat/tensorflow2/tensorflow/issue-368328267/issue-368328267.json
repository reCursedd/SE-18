{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22846", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22846/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22846/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22846/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22846", "id": 368328267, "node_id": "MDU6SXNzdWUzNjgzMjgyNjc=", "number": 22846, "title": "TensorFlow Lite for Microcontrollers needs to follow alignment while allocating/access memory", "user": {"login": "niruyadla", "id": 26728802, "node_id": "MDQ6VXNlcjI2NzI4ODAy", "avatar_url": "https://avatars1.githubusercontent.com/u/26728802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niruyadla", "html_url": "https://github.com/niruyadla", "followers_url": "https://api.github.com/users/niruyadla/followers", "following_url": "https://api.github.com/users/niruyadla/following{/other_user}", "gists_url": "https://api.github.com/users/niruyadla/gists{/gist_id}", "starred_url": "https://api.github.com/users/niruyadla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niruyadla/subscriptions", "organizations_url": "https://api.github.com/users/niruyadla/orgs", "repos_url": "https://api.github.com/users/niruyadla/repos", "events_url": "https://api.github.com/users/niruyadla/events{/privacy}", "received_events_url": "https://api.github.com/users/niruyadla/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 750616506, "node_id": "MDU6TGFiZWw3NTA2MTY1MDY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:lite", "name": "comp:lite", "color": "0052cc", "default": false}], "state": "open", "locked": false, "assignee": {"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, {"login": "wt-huang", "id": 42785337, "node_id": "MDQ6VXNlcjQyNzg1MzM3", "avatar_url": "https://avatars0.githubusercontent.com/u/42785337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wt-huang", "html_url": "https://github.com/wt-huang", "followers_url": "https://api.github.com/users/wt-huang/followers", "following_url": "https://api.github.com/users/wt-huang/following{/other_user}", "gists_url": "https://api.github.com/users/wt-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/wt-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wt-huang/subscriptions", "organizations_url": "https://api.github.com/users/wt-huang/orgs", "repos_url": "https://api.github.com/users/wt-huang/repos", "events_url": "https://api.github.com/users/wt-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/wt-huang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-10-09T17:59:24Z", "updated_at": "2018-11-13T22:11:00Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=161459\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/petewarden\">@petewarden</a>, we have cross compiled TensorFlow Lite for  Microcontrollers for our audio platforms, while running \"micro_speech_test\" our processor throw below LoadStoreAlignmentCause exception.<br>\n<strong><em>WARNING</em> Unhandled user exception: LoadStoreAlignmentCause (0x57ffe02b)</strong><br>\nIn general our processor expects to be 4 byte aligned while accessing memory.<br>\nAfter debugging code we found AllocateMemory() is not following memory aligned, Following patch is fixing the issue,however this will have some penalty for cycles in our hardware.</p>\n<p>Original code:<br>\nuint8_t* SimpleTensorAllocator::AllocateMemory(size_t size) {<br>\nif ((data_size_ + size) &gt; data_size_max_) {<br>\n// TODO(petewarden): Add error reporting beyond returning null!<br>\nreturn nullptr;<br>\n}<br>\nuint8_t* result = data_;<br>\ndata_ += size;<br>\ndata_size_ += size;<br>\nreturn result;<br>\n}</p>\n<p>After aligned to 4 bytes:<br>\nuint8_t* SimpleTensorAllocator::AllocateMemory(size_t size) {<br>\nint align = 4;<br>\nuint8_t <em>result = (uint8_t</em>)((intptr_t)(data_ + align - 1) &amp; (~(align - 1)));<br>\nint aligned_size = result - data_ + size;<br>\nif ((data_size_ + aligned_size) &gt; data_size_max_) {<br>\n// TODO(petewarden): Add error reporting beyond returning null!<br>\nreturn nullptr;<br>\n}<br>\ndata_ += aligned_size;<br>\ndata_size_ += aligned_size;<br>\nreturn result;<br>\n}</p>\n<p>It is good idea to write code for TensorFlow Lite for Microcontrollers follows memory alignment with an argument default to 4bytes and allow overwrite to custom number may be 8 and so on..</p>", "body_text": "@petewarden, we have cross compiled TensorFlow Lite for  Microcontrollers for our audio platforms, while running \"micro_speech_test\" our processor throw below LoadStoreAlignmentCause exception.\nWARNING Unhandled user exception: LoadStoreAlignmentCause (0x57ffe02b)\nIn general our processor expects to be 4 byte aligned while accessing memory.\nAfter debugging code we found AllocateMemory() is not following memory aligned, Following patch is fixing the issue,however this will have some penalty for cycles in our hardware.\nOriginal code:\nuint8_t* SimpleTensorAllocator::AllocateMemory(size_t size) {\nif ((data_size_ + size) > data_size_max_) {\n// TODO(petewarden): Add error reporting beyond returning null!\nreturn nullptr;\n}\nuint8_t* result = data_;\ndata_ += size;\ndata_size_ += size;\nreturn result;\n}\nAfter aligned to 4 bytes:\nuint8_t* SimpleTensorAllocator::AllocateMemory(size_t size) {\nint align = 4;\nuint8_t result = (uint8_t)((intptr_t)(data_ + align - 1) & (~(align - 1)));\nint aligned_size = result - data_ + size;\nif ((data_size_ + aligned_size) > data_size_max_) {\n// TODO(petewarden): Add error reporting beyond returning null!\nreturn nullptr;\n}\ndata_ += aligned_size;\ndata_size_ += aligned_size;\nreturn result;\n}\nIt is good idea to write code for TensorFlow Lite for Microcontrollers follows memory alignment with an argument default to 4bytes and allow overwrite to custom number may be 8 and so on..", "body": "@petewarden, we have cross compiled TensorFlow Lite for  Microcontrollers for our audio platforms, while running \"micro_speech_test\" our processor throw below LoadStoreAlignmentCause exception.\r\n***WARNING* Unhandled user exception: LoadStoreAlignmentCause (0x57ffe02b)**\r\nIn general our processor expects to be 4 byte aligned while accessing memory.\r\nAfter debugging code we found AllocateMemory() is not following memory aligned, Following patch is fixing the issue,however this will have some penalty for cycles in our hardware.\r\n\r\nOriginal code:\r\nuint8_t* SimpleTensorAllocator::AllocateMemory(size_t size) {\r\n  if ((data_size_ + size) > data_size_max_) {\r\n    // TODO(petewarden): Add error reporting beyond returning null!\r\n    return nullptr;\r\n  }\r\n  uint8_t* result = data_;\r\n  data_ += size;\r\n  data_size_ += size;\r\n  return result;\r\n}\r\n\r\nAfter aligned to 4 bytes:\r\n uint8_t* SimpleTensorAllocator::AllocateMemory(size_t size) {\r\n       int align = 4;\r\n       uint8_t *result = (uint8_t*)((intptr_t)(data_ + align - 1) & (~(align - 1)));\r\n       int aligned_size = result - data_ + size;\r\n  if ((data_size_ + aligned_size) > data_size_max_) {\r\n     // TODO(petewarden): Add error reporting beyond returning null!\r\n     return nullptr;\r\n   }\r\n  data_ += aligned_size;\r\n  data_size_ += aligned_size;\r\n  return result;\r\n }\r\n\r\nIt is good idea to write code for TensorFlow Lite for Microcontrollers follows memory alignment with an argument default to 4bytes and allow overwrite to custom number may be 8 and so on..\r\n\r\n "}