{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/195232071", "pull_request_review_id": 128559918, "id": 195232071, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTIzMjA3MQ==", "diff_hunk": "@@ -0,0 +1,368 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include <aws/core/Aws.h>\n+#include <aws/core/config/AWSProfileConfigLoader.h>\n+#include <aws/core/utils/Outcome.h>\n+#include <aws/kinesis/KinesisClient.h>\n+#include <aws/kinesis/model/DescribeStreamRequest.h>\n+#include <aws/kinesis/model/GetRecordsRequest.h>\n+#include <aws/kinesis/model/GetShardIteratorRequest.h>\n+#include <aws/kinesis/model/PutRecordsRequest.h>\n+#include <aws/kinesis/model/ShardIteratorType.h>\n+#include \"tensorflow/core/framework/dataset.h\"\n+#include \"tensorflow/core/platform/s3/aws_crypto.h\"\n+\n+namespace tensorflow {\n+namespace {\n+\n+Aws::Client::ClientConfiguration& GetDefaultClientConfig() {\n+  static mutex mu(LINKER_INITIALIZED);\n+  static bool init(false);\n+  static Aws::Client::ClientConfiguration config;\n+\n+  std::lock_guard<mutex> lock(mu);\n+\n+  if (!init) {\n+    const char* endpoint = getenv(\"KINESIS_ENDPOINT\");\n+    if (endpoint) {\n+      config.endpointOverride = Aws::String(endpoint);\n+    }\n+    const char* region = getenv(\"AWS_REGION\");\n+    if (region) {\n+      config.region = Aws::String(region);\n+    } else {\n+      // Load config file (e.g., ~/.aws/config) only if AWS_SDK_LOAD_CONFIG\n+      // is set with a truthy value.\n+      const char* load_config_env = getenv(\"AWS_SDK_LOAD_CONFIG\");\n+      string load_config =\n+          load_config_env ? str_util::Lowercase(load_config_env) : \"\";\n+      if (load_config == \"true\" || load_config == \"1\") {\n+        Aws::String config_file;\n+        // If AWS_CONFIG_FILE is set then use it, otherwise use ~/.aws/config.\n+        const char* config_file_env = getenv(\"AWS_CONFIG_FILE\");\n+        if (config_file_env) {\n+          config_file = config_file_env;\n+        } else {\n+          const char* home_env = getenv(\"HOME\");\n+          if (home_env) {\n+            config_file = home_env;\n+            config_file += \"/.aws/config\";\n+          }\n+        }\n+        Aws::Config::AWSConfigFileProfileConfigLoader loader(config_file);\n+        loader.Load();\n+        auto profiles = loader.GetProfiles();\n+        if (!profiles[\"default\"].GetRegion().empty()) {\n+          config.region = profiles[\"default\"].GetRegion();\n+        }\n+      }\n+    }\n+    const char* use_https = getenv(\"KINESIS_USE_HTTPS\");\n+    if (use_https) {\n+      if (use_https[0] == '0') {\n+        config.scheme = Aws::Http::Scheme::HTTP;\n+      } else {\n+        config.scheme = Aws::Http::Scheme::HTTPS;\n+      }\n+    }\n+    const char* verify_ssl = getenv(\"KINESIS_VERIFY_SSL\");\n+    if (verify_ssl) {\n+      if (verify_ssl[0] == '0') {\n+        config.verifySSL = false;\n+      } else {\n+        config.verifySSL = true;\n+      }\n+    }\n+    const char* connect_timeout = getenv(\"KINESIS_CONNECT_TIMEOUT_MSEC\");\n+    if (connect_timeout) {\n+      int64 timeout;\n+\n+      if (strings::safe_strto64(connect_timeout, &timeout)) {\n+        config.connectTimeoutMs = timeout;\n+      }\n+    }\n+    const char* request_timeout = getenv(\"KINESIS_REQUEST_TIMEOUT_MSEC\");\n+    if (request_timeout) {\n+      int64 timeout;\n+\n+      if (strings::safe_strto64(request_timeout, &timeout)) {\n+        config.requestTimeoutMs = timeout;\n+      }\n+    }\n+\n+    init = true;\n+  }\n+\n+  return config;\n+};\n+\n+static mutex mu(LINKER_INITIALIZED);\n+static unsigned count(0);\n+void AwsInitAPI() {\n+  std::lock_guard<mutex> lock(mu);\n+  count++;\n+  if (count == 1) {\n+    Aws::SDKOptions options;\n+    options.cryptoOptions.sha256Factory_create_fn = []() {\n+      return Aws::MakeShared<AWSSHA256Factory>(AWSCryptoAllocationTag);\n+    };\n+    options.cryptoOptions.sha256HMACFactory_create_fn = []() {\n+      return Aws::MakeShared<AWSSHA256HmacFactory>(AWSCryptoAllocationTag);\n+    };\n+    Aws::InitAPI(options);\n+  }\n+}\n+void AwsShutdownAPI() {\n+  std::lock_guard<mutex> lock(mu);\n+  count--;\n+  if (count == 0) {\n+    Aws::SDKOptions options;\n+    Aws::ShutdownAPI(options);\n+  }\n+}\n+void ShutdownClient(Aws::Kinesis::KinesisClient* client) {\n+  if (client != nullptr) {\n+    delete client;\n+    AwsShutdownAPI();\n+  }\n+}\n+}\n+class KinesisDatasetOp : public DatasetOpKernel {\n+ public:\n+  using DatasetOpKernel::DatasetOpKernel;\n+\n+  void MakeDataset(OpKernelContext* ctx, DatasetBase** output) override {\n+    std::string stream = \"\";\n+    OP_REQUIRES_OK(ctx,\n+                   ParseScalarArgument<std::string>(ctx, \"stream\", &stream));\n+    std::string shard = \"\";\n+    OP_REQUIRES_OK(ctx, ParseScalarArgument<std::string>(ctx, \"shard\", &shard));\n+    bool eof = false;\n+    OP_REQUIRES_OK(ctx, ParseScalarArgument<bool>(ctx, \"eof\", &eof));\n+    int64 interval = -1;\n+    OP_REQUIRES_OK(ctx, ParseScalarArgument<int64>(ctx, \"interval\", &interval));\n+    OP_REQUIRES(ctx, (interval > 0),\n+                errors::InvalidArgument(\n+                    \"Interval value should be large than 0, got \", interval));\n+    *output = new Dataset(ctx, stream, shard, eof, interval);\n+  }\n+\n+ private:\n+  class Dataset : public GraphDatasetBase {\n+   public:\n+    Dataset(OpKernelContext* ctx, const string& stream, const string& shard,\n+            const bool eof, const int64 interval)\n+        : GraphDatasetBase(ctx),\n+          stream_(stream),\n+          shard_(shard),\n+          eof_(eof),\n+          interval_(interval) {}\n+\n+    std::unique_ptr<IteratorBase> MakeIteratorInternal(\n+        const string& prefix) const override {\n+      return std::unique_ptr<IteratorBase>(\n+          new Iterator({this, strings::StrCat(prefix, \"::Kinesis\")}));\n+    }\n+\n+    const DataTypeVector& output_dtypes() const override {\n+      static DataTypeVector* dtypes = new DataTypeVector({DT_STRING});\n+      return *dtypes;\n+    }\n+\n+    const std::vector<PartialTensorShape>& output_shapes() const override {\n+      static std::vector<PartialTensorShape>* shapes =\n+          new std::vector<PartialTensorShape>({{}});\n+      return *shapes;\n+    }\n+\n+    string DebugString() const override { return \"KinesisDatasetOp::Dataset\"; }\n+\n+   protected:\n+    Status AsGraphDefInternal(DatasetGraphDefBuilder* b,\n+                              Node** output) const override {\n+      Node* stream = nullptr;\n+      TF_RETURN_IF_ERROR(b->AddScalar(stream_, &stream));\n+      Node* shard = nullptr;\n+      TF_RETURN_IF_ERROR(b->AddScalar(shard_, &shard));\n+      Node* eof = nullptr;\n+      TF_RETURN_IF_ERROR(b->AddScalar(eof_, &eof));\n+      Node* interval = nullptr;\n+      TF_RETURN_IF_ERROR(b->AddScalar(interval_, &interval));\n+      TF_RETURN_IF_ERROR(\n+          b->AddDataset(this, {stream, shard, eof, interval}, output));\n+      return Status::OK();\n+    }\n+\n+   private:\n+    class Iterator : public DatasetIterator<Dataset> {\n+     public:\n+      explicit Iterator(const Params& params)\n+          : DatasetIterator<Dataset>(params),\n+            client_(nullptr, ShutdownClient) {}\n+\n+      Status GetNextInternal(IteratorContext* ctx,\n+                             std::vector<Tensor>* out_tensors,\n+                             bool* end_of_sequence) override {\n+        mutex_lock l(mu_);\n+        if (iterator_ == \"\") {\n+          TF_RETURN_IF_ERROR(SetupStreamsLocked(ctx->env()));\n+        }\n+        do {\n+          Aws::Kinesis::Model::GetRecordsRequest request;\n+          auto outcome = client_->GetRecords(\n+              request.WithShardIterator(iterator_).WithLimit(1));\n+          if (!outcome.IsSuccess()) {\n+            string error =\n+                strings::StrCat(outcome.GetError().GetExceptionName().c_str(),\n+                                \": \", outcome.GetError().GetMessage().c_str());\n+            return errors::Internal(error);\n+          }\n+          if (outcome.GetResult().GetRecords().size() == 0) {\n+            // If return 0 record then nothing available at the moment.\n+            if (dataset()->eof_) {\n+              *end_of_sequence = true;\n+              return Status::OK();\n+            }\n+            // Continue the loop after a period of time.\n+            ctx->env()->SleepForMicroseconds(dataset()->interval_);\n+            continue;\n+          }\n+          if (outcome.GetResult().GetRecords().size() != 1) {\n+            return errors::Internal(\"invalid records number \",\n+                                    outcome.GetResult().GetRecords().size(),\n+                                    \" returned\");\n+          }\n+\n+          iterator_ = outcome.GetResult().GetNextShardIterator();\n+\n+          StringPiece value(\n+              (const char*)outcome.GetResult()\n+                  .GetRecords()[0]\n+                  .GetData()\n+                  .GetUnderlyingData(),\n+              outcome.GetResult().GetRecords()[0].GetData().GetLength());\n+          Tensor value_tensor(ctx->allocator({}), DT_STRING, {});\n+          value_tensor.scalar<std::string>()() = std::string(value);\n+          out_tensors->emplace_back(std::move(value_tensor));\n+\n+          *end_of_sequence = false;\n+          return Status::OK();\n+        } while (true);\n+      }\n+\n+     protected:\n+      Status SaveInternal(IteratorStateWriter* writer) override {\n+        return errors::Unimplemented(\"SaveInternal is currently not supported\");\n+      }\n+\n+      Status RestoreInternal(IteratorContext* ctx,\n+                             IteratorStateReader* reader) override {\n+        return errors::Unimplemented(\n+            \"RestoreInternal is currently not supported\");\n+      }\n+\n+     private:\n+      // Sets up Kinesis streams to read from.\n+      Status SetupStreamsLocked(Env* env) EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n+        AwsInitAPI();\n+        client_.reset(\n+            new Aws::Kinesis::KinesisClient(GetDefaultClientConfig()));\n+\n+        Aws::Kinesis::Model::DescribeStreamRequest request;\n+        auto outcome = client_->DescribeStream(\n+            request.WithStreamName(dataset()->stream_.c_str()));\n+        if (!outcome.IsSuccess()) {\n+          string error =\n+              strings::StrCat(outcome.GetError().GetExceptionName().c_str(),\n+                              \": \", outcome.GetError().GetMessage().c_str());\n+          return errors::Internal(error);\n+        }\n+        Aws::String shard;\n+        Aws::String sequence;\n+        if (dataset()->shard_ == \"\") {\n+          if (outcome.GetResult().GetStreamDescription().GetShards().size() !=\n+              1) {\n+            return errors::InvalidArgument(\n+                \"shard has to be provided unless the stream only have one \"\n+                \"shard, there are \",\n+                outcome.GetResult().GetStreamDescription().GetShards().size(),\n+                \" shards in stream \", dataset()->stream_);\n+          }\n+          shard = outcome.GetResult()\n+                      .GetStreamDescription()\n+                      .GetShards()[0]\n+                      .GetShardId();\n+          sequence = outcome.GetResult()\n+                         .GetStreamDescription()\n+                         .GetShards()[0]\n+                         .GetSequenceNumberRange()\n+                         .GetStartingSequenceNumber();\n+        } else {\n+          for (auto entry :\n+               outcome.GetResult().GetStreamDescription().GetShards()) {\n+            if (entry.GetShardId() == dataset()->shard_.c_str()) {\n+              shard = entry.GetShardId();\n+              sequence =\n+                  entry.GetSequenceNumberRange().GetStartingSequenceNumber();\n+              break;\n+            }\n+          }\n+          if (shard == \"\") {\n+            return errors::InvalidArgument(\"no shard \",\n+                                           dataset()->shard_.c_str(),\n+                                           \" in stream \", dataset()->stream_);\n+          }\n+        }\n+\n+        Aws::Kinesis::Model::GetShardIteratorRequest iterator_request;\n+        auto iterator_outcome = client_->GetShardIterator(\n+            iterator_request.WithStreamName(dataset()->stream_.c_str())\n+                .WithShardId(shard)\n+                .WithShardIteratorType(\n+                    Aws::Kinesis::Model::ShardIteratorType::AT_SEQUENCE_NUMBER)\n+                .WithStartingSequenceNumber(sequence));\n+        if (!iterator_outcome.IsSuccess()) {\n+          string error = strings::StrCat(\n+              iterator_outcome.GetError().GetExceptionName().c_str(), \": \",\n+              iterator_outcome.GetError().GetMessage().c_str());\n+          return errors::Internal(error);\n+        }\n+        iterator_ = iterator_outcome.GetResult().GetShardIterator();\n+        return Status::OK();\n+      }\n+\n+      // Resets all Kinesis streams.\n+      void ResetStreamsLocked() EXCLUSIVE_LOCKS_REQUIRED(mu_) {", "path": "tensorflow/contrib/kinesis/kernels/kinesis_dataset_ops.cc", "position": null, "original_position": 348, "commit_id": "9d119a1df765b5d45b6680a1d33b180648f102bf", "original_commit_id": "6e78998783dbb457f12286c5f2ca58cd5b635e96", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "body": "Thanks @mrry. The method has been removed.", "created_at": "2018-06-13T20:52:49Z", "updated_at": "2018-06-29T23:15:25Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/19712#discussion_r195232071", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19712", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/195232071"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/19712#discussion_r195232071"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19712"}}, "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>. The method has been removed.</p>", "body_text": "Thanks @mrry. The method has been removed.", "in_reply_to_id": 193570876}