{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/291256112", "html_url": "https://github.com/tensorflow/tensorflow/issues/8911#issuecomment-291256112", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8911", "id": 291256112, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTI1NjExMg==", "user": {"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-03T19:59:14Z", "updated_at": "2017-04-03T19:59:14Z", "author_association": "MEMBER", "body_html": "<p>I'm not sure exactly, we should probably ask Martin Wicke. What I mean is: we definitely don't want to loose 3x performance of an important optimizer just because of \"python is easier to maintain\". But it is easier to maintain, so we probably don't want to add C++ kernels that we'll have to maintain for just 10% performance gain. Where the balance lies exactly is harder to say, it's a tradeoff. If the kernels are small and readable and the performance gains are big, I guess we'll want them, and vice versa. What are the performance gains from having separate kernels in this case?</p>", "body_text": "I'm not sure exactly, we should probably ask Martin Wicke. What I mean is: we definitely don't want to loose 3x performance of an important optimizer just because of \"python is easier to maintain\". But it is easier to maintain, so we probably don't want to add C++ kernels that we'll have to maintain for just 10% performance gain. Where the balance lies exactly is harder to say, it's a tradeoff. If the kernels are small and readable and the performance gains are big, I guess we'll want them, and vice versa. What are the performance gains from having separate kernels in this case?", "body": "I'm not sure exactly, we should probably ask Martin Wicke. What I mean is: we definitely don't want to loose 3x performance of an important optimizer just because of \"python is easier to maintain\". But it is easier to maintain, so we probably don't want to add C++ kernels that we'll have to maintain for just 10% performance gain. Where the balance lies exactly is harder to say, it's a tradeoff. If the kernels are small and readable and the performance gains are big, I guess we'll want them, and vice versa. What are the performance gains from having separate kernels in this case?"}