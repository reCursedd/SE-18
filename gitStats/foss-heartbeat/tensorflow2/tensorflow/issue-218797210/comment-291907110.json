{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/291907110", "html_url": "https://github.com/tensorflow/tensorflow/issues/8911#issuecomment-291907110", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8911", "id": 291907110, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTkwNzExMA==", "user": {"login": "siryog90", "id": 8366121, "node_id": "MDQ6VXNlcjgzNjYxMjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/8366121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siryog90", "html_url": "https://github.com/siryog90", "followers_url": "https://api.github.com/users/siryog90/followers", "following_url": "https://api.github.com/users/siryog90/following{/other_user}", "gists_url": "https://api.github.com/users/siryog90/gists{/gist_id}", "starred_url": "https://api.github.com/users/siryog90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siryog90/subscriptions", "organizations_url": "https://api.github.com/users/siryog90/orgs", "repos_url": "https://api.github.com/users/siryog90/repos", "events_url": "https://api.github.com/users/siryog90/events{/privacy}", "received_events_url": "https://api.github.com/users/siryog90/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-05T15:54:39Z", "updated_at": "2017-04-05T17:31:04Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4586769\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/AshishBora\">@AshishBora</a> Correct me if I am wrong, but are you suggesting we use the <em>original</em> network to compute the Lp-PathNorm by temporarily replacing the original weights with ones raised to power <code>p</code>?<br>\nIf so, wouldn't the non-linearities of the network still apply to the weights?<br>\nOr do you suggest to build a new network with the same architecture, where the non-linearities are replaced with the identity function, and pass the input through this, helper network?</p>", "body_text": "@AshishBora Correct me if I am wrong, but are you suggesting we use the original network to compute the Lp-PathNorm by temporarily replacing the original weights with ones raised to power p?\nIf so, wouldn't the non-linearities of the network still apply to the weights?\nOr do you suggest to build a new network with the same architecture, where the non-linearities are replaced with the identity function, and pass the input through this, helper network?", "body": "@AshishBora Correct me if I am wrong, but are you suggesting we use the _original_ network to compute the Lp-PathNorm by temporarily replacing the original weights with ones raised to power `p`? \r\nIf so, wouldn't the non-linearities of the network still apply to the weights? \r\nOr do you suggest to build a new network with the same architecture, where the non-linearities are replaced with the identity function, and pass the input through this, helper network?\r\n"}