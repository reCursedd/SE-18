{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21537", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21537/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21537/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21537/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21537", "id": 349397394, "node_id": "MDU6SXNzdWUzNDkzOTczOTQ=", "number": 21537, "title": "problem when num_enqueue == batch_size", "user": {"login": "cag51", "id": 5068824, "node_id": "MDQ6VXNlcjUwNjg4MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5068824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cag51", "html_url": "https://github.com/cag51", "followers_url": "https://api.github.com/users/cag51/followers", "following_url": "https://api.github.com/users/cag51/following{/other_user}", "gists_url": "https://api.github.com/users/cag51/gists{/gist_id}", "starred_url": "https://api.github.com/users/cag51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cag51/subscriptions", "organizations_url": "https://api.github.com/users/cag51/orgs", "repos_url": "https://api.github.com/users/cag51/repos", "events_url": "https://api.github.com/users/cag51/events{/privacy}", "received_events_url": "https://api.github.com/users/cag51/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-08-10T06:55:19Z", "updated_at": "2018-11-20T18:32:01Z", "closed_at": "2018-11-20T18:32:01Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>\n<p><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes</p>\n</li>\n<li>\n<p><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux Ubuntu 18.04</p>\n</li>\n<li>\n<p><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:<br>\nN/A</p>\n</li>\n<li>\n<p><strong>TensorFlow installed from (source or binary)</strong>:<br>\nsource</p>\n</li>\n<li>\n<p><strong>TensorFlow version (use command below)</strong>:<br>\nv1.08, v1.10</p>\n</li>\n<li>\n<p><strong>Python version</strong>:<br>\n2.7</p>\n</li>\n<li>\n<p><strong>Bazel version (if compiling from source)</strong>:<br>\n0.16.0</p>\n</li>\n<li>\n<p><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\n6.4.0</p>\n</li>\n<li>\n<p><strong>CUDA/cuDNN version</strong>:<br>\n9.2</p>\n</li>\n<li>\n<p><strong>GPU model and memory</strong>:<br>\nNVIDIA 1080 Ti</p>\n</li>\n<li>\n<p><strong>Exact command to reproduce</strong>:</p>\n</li>\n</ul>\n<pre><code>      image_list = [ tf.image.crop_to_bounding_box(image, 16, 16, 224, 224),\n                    tf.image.crop_to_bounding_box(image, 0, 0, 224, 224),\n                    tf.image.crop_to_bounding_box(image, 32, 0, 224, 224),\n                    tf.image.crop_to_bounding_box(image, 0, 32, 224, 224),\n                    tf.image.crop_to_bounding_box(image, 32, 32, 224, 224),\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 16, 16, 224, 224)),\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 0, 0, 224, 224)),\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 32, 0, 224, 224)),\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 0, 32, 224, 224)),\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 32, 32, 224, 224)) ]\n      image = tf.stack([image_list[x] for x in range(10)], axis=0)\n      label = tf.stack([label for x in range(10)], axis=0)\n\n    #Make batches\n    if objective == \"test\":  x, y_ = tf.train.batch([image, label], batch_size=10,        capacity=200,  num_threads=2, enqueue_many=True, allow_smaller_final_batch=True)\n</code></pre>\n<p>And then evaluate accuracy with:</p>\n<pre><code>  for i in range(int(math.ceil(nTest))):\n    pred, trueLabel, top_five_ = sess.run([test_y, test_y_, top_five])\n    pred = int(np.argmax(np.mean(pred, axis=0)))\n    truth = int(np.argmax(trueLabel[0]))\n    test_accuracy_ = (1. if pred == truth else 0.)\n    accuracies.append(test_accuracy_)\naccuracy = np.mean(accuracies)\n</code></pre>\n<h3>Describe the problem</h3>\n<p>When there are 10 images being enqueued into a tf.train.batch() with batch_size = 10, the reported accuracy is artificially low (e.g., 5%). If you change the batch_size to a higher number (e.g., 100) [and adjust the accuracy calculation accordingly], the reported accuracy is much higher (e.g., 50%). Seems there's some bug about num_enqueued == batch_size.</p>", "body_text": "System information\n\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes\n\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux Ubuntu 18.04\n\n\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nN/A\n\n\nTensorFlow installed from (source or binary):\nsource\n\n\nTensorFlow version (use command below):\nv1.08, v1.10\n\n\nPython version:\n2.7\n\n\nBazel version (if compiling from source):\n0.16.0\n\n\nGCC/Compiler version (if compiling from source):\n6.4.0\n\n\nCUDA/cuDNN version:\n9.2\n\n\nGPU model and memory:\nNVIDIA 1080 Ti\n\n\nExact command to reproduce:\n\n\n      image_list = [ tf.image.crop_to_bounding_box(image, 16, 16, 224, 224),\n                    tf.image.crop_to_bounding_box(image, 0, 0, 224, 224),\n                    tf.image.crop_to_bounding_box(image, 32, 0, 224, 224),\n                    tf.image.crop_to_bounding_box(image, 0, 32, 224, 224),\n                    tf.image.crop_to_bounding_box(image, 32, 32, 224, 224),\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 16, 16, 224, 224)),\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 0, 0, 224, 224)),\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 32, 0, 224, 224)),\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 0, 32, 224, 224)),\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 32, 32, 224, 224)) ]\n      image = tf.stack([image_list[x] for x in range(10)], axis=0)\n      label = tf.stack([label for x in range(10)], axis=0)\n\n    #Make batches\n    if objective == \"test\":  x, y_ = tf.train.batch([image, label], batch_size=10,        capacity=200,  num_threads=2, enqueue_many=True, allow_smaller_final_batch=True)\n\nAnd then evaluate accuracy with:\n  for i in range(int(math.ceil(nTest))):\n    pred, trueLabel, top_five_ = sess.run([test_y, test_y_, top_five])\n    pred = int(np.argmax(np.mean(pred, axis=0)))\n    truth = int(np.argmax(trueLabel[0]))\n    test_accuracy_ = (1. if pred == truth else 0.)\n    accuracies.append(test_accuracy_)\naccuracy = np.mean(accuracies)\n\nDescribe the problem\nWhen there are 10 images being enqueued into a tf.train.batch() with batch_size = 10, the reported accuracy is artificially low (e.g., 5%). If you change the batch_size to a higher number (e.g., 100) [and adjust the accuracy calculation accordingly], the reported accuracy is much higher (e.g., 50%). Seems there's some bug about num_enqueued == batch_size.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes\r\n\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nLinux Ubuntu 18.04 \r\n\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\nN/A\r\n\r\n- **TensorFlow installed from (source or binary)**:\r\nsource \r\n\r\n- **TensorFlow version (use command below)**: \r\nv1.08, v1.10\r\n\r\n- **Python version**:\r\n2.7\r\n\r\n- **Bazel version (if compiling from source)**:\r\n0.16.0\r\n\r\n- **GCC/Compiler version (if compiling from source)**:\r\n6.4.0 \r\n\r\n- **CUDA/cuDNN version**:\r\n9.2\r\n\r\n- **GPU model and memory**:\r\nNVIDIA 1080 Ti\r\n\r\n- **Exact command to reproduce**:\r\n```\r\n      image_list = [ tf.image.crop_to_bounding_box(image, 16, 16, 224, 224),\r\n                    tf.image.crop_to_bounding_box(image, 0, 0, 224, 224),\r\n                    tf.image.crop_to_bounding_box(image, 32, 0, 224, 224),\r\n                    tf.image.crop_to_bounding_box(image, 0, 32, 224, 224),\r\n                    tf.image.crop_to_bounding_box(image, 32, 32, 224, 224),\r\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 16, 16, 224, 224)),\r\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 0, 0, 224, 224)),\r\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 32, 0, 224, 224)),\r\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 0, 32, 224, 224)),\r\n                    tf.image.flip_left_right(tf.image.crop_to_bounding_box(image, 32, 32, 224, 224)) ]\r\n      image = tf.stack([image_list[x] for x in range(10)], axis=0)\r\n      label = tf.stack([label for x in range(10)], axis=0)\r\n\r\n    #Make batches\r\n    if objective == \"test\":  x, y_ = tf.train.batch([image, label], batch_size=10,        capacity=200,  num_threads=2, enqueue_many=True, allow_smaller_final_batch=True)\r\n```\r\nAnd then evaluate accuracy with:\r\n```\r\n  for i in range(int(math.ceil(nTest))):\r\n    pred, trueLabel, top_five_ = sess.run([test_y, test_y_, top_five])\r\n    pred = int(np.argmax(np.mean(pred, axis=0)))\r\n    truth = int(np.argmax(trueLabel[0]))\r\n    test_accuracy_ = (1. if pred == truth else 0.)\r\n    accuracies.append(test_accuracy_)\r\naccuracy = np.mean(accuracies)\r\n```\r\n\r\n### Describe the problem\r\nWhen there are 10 images being enqueued into a tf.train.batch() with batch_size = 10, the reported accuracy is artificially low (e.g., 5%). If you change the batch_size to a higher number (e.g., 100) [and adjust the accuracy calculation accordingly], the reported accuracy is much higher (e.g., 50%). Seems there's some bug about num_enqueued == batch_size. \r\n\r\n"}