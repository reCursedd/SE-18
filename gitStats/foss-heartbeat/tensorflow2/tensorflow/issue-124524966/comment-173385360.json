{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/173385360", "html_url": "https://github.com/tensorflow/tensorflow/pull/662#issuecomment-173385360", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/662", "id": 173385360, "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzM4NTM2MA==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2016-01-20T22:40:43Z", "updated_at": "2016-01-20T22:40:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think that there's a better way to solve your problem:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">get_output</span>(<span class=\"pl-smi\">img</span>):\n    img <span class=\"pl-k\">=</span> tf.train.limit_epochs([img], <span class=\"pl-v\">num_epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Produce infinitely many times.</span>\n    img <span class=\"pl-k\">=</span> tf.train.batch(img, <span class=\"pl-c1\">128</span>, <span class=\"pl-v\">enqueue_many</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Enqueues a batch at a time.</span>\n\n    img <span class=\"pl-k\">=</span> tf.reshape(img, [<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">28</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">28</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">3</span>])\n    W <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>W<span class=\"pl-pds\">'</span></span>, [<span class=\"pl-c1\">28</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">28</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">10</span>],\n                        <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.truncated_normal_initializer(<span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0.1</span>))\n    out <span class=\"pl-k\">=</span> tf.matmul(img, W)\n    <span class=\"pl-k\">return</span> tf.sigmoid(out)</pre></div>\n<p>On my workstation, this modified version of your benchmark takes between 0.05 and 0.08 seconds.</p>", "body_text": "I think that there's a better way to solve your problem:\ndef get_output(img):\n    img = tf.train.limit_epochs([img], num_epochs=None)  # Produce infinitely many times.\n    img = tf.train.batch(img, 128, enqueue_many=True)  # Enqueues a batch at a time.\n\n    img = tf.reshape(img, [-1, 28 * 28 * 3])\n    W = tf.get_variable('W', [28 * 28 * 3, 10],\n                        initializer=tf.truncated_normal_initializer(stddev=0.1))\n    out = tf.matmul(img, W)\n    return tf.sigmoid(out)\nOn my workstation, this modified version of your benchmark takes between 0.05 and 0.08 seconds.", "body": "I think that there's a better way to solve your problem:\n\n``` python\ndef get_output(img):\n    img = tf.train.limit_epochs([img], num_epochs=None)  # Produce infinitely many times.\n    img = tf.train.batch(img, 128, enqueue_many=True)  # Enqueues a batch at a time.\n\n    img = tf.reshape(img, [-1, 28 * 28 * 3])\n    W = tf.get_variable('W', [28 * 28 * 3, 10],\n                        initializer=tf.truncated_normal_initializer(stddev=0.1))\n    out = tf.matmul(img, W)\n    return tf.sigmoid(out)\n```\n\nOn my workstation, this modified version of your benchmark takes between 0.05 and 0.08 seconds.\n"}