{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/389839225", "html_url": "https://github.com/tensorflow/tensorflow/issues/19298#issuecomment-389839225", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19298", "id": 389839225, "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTgzOTIyNQ==", "user": {"login": "jto", "id": 197582, "node_id": "MDQ6VXNlcjE5NzU4Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/197582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jto", "html_url": "https://github.com/jto", "followers_url": "https://api.github.com/users/jto/followers", "following_url": "https://api.github.com/users/jto/following{/other_user}", "gists_url": "https://api.github.com/users/jto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jto/subscriptions", "organizations_url": "https://api.github.com/users/jto/orgs", "repos_url": "https://api.github.com/users/jto/repos", "events_url": "https://api.github.com/users/jto/events{/privacy}", "received_events_url": "https://api.github.com/users/jto/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-17T11:48:22Z", "updated_at": "2018-05-17T11:48:22Z", "author_association": "NONE", "body_html": "<p>I <em>think</em> sbt creates a different classloader to run each test class.</p>\n<p>Maybe <code>isLoaded</code> could list the currently loaded libraries and look for the presence of <code>libtensorflow</code> ?</p>\n<p>Something along the line of:</p>\n<div class=\"highlight highlight-source-scala\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">isInClasspath</span><span class=\"pl-k\">:</span> <span class=\"pl-k\">Boolean</span> <span class=\"pl-k\">=</span> {\n  <span class=\"pl-k\">import</span> <span class=\"pl-en\">scala</span>.<span class=\"pl-en\">collection</span>.<span class=\"pl-en\">JavaConverters</span>.<span class=\"pl-en\">_</span>\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">libs</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">classOf</span>[<span class=\"pl-en\">ClassLoader</span>].getDeclaredField(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>loadedLibraryNames<span class=\"pl-pds\">\"</span></span>)\n  libs.setAccessible(<span class=\"pl-c1\">true</span>)\n  <span class=\"pl-k\">val</span> <span class=\"pl-smi\">loadedLibs</span> <span class=\"pl-k\">=</span> \n      libs.get(<span class=\"pl-en\">ClassLoader</span>.getSystemClassLoader())\n        .<span class=\"pl-c1\">asInstanceOf</span>[java.util.<span class=\"pl-en\">Vector</span>[<span class=\"pl-k\">String</span>]]\n        .asScala\n  loadedLibs.exists(_.contains(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>libtensorflow<span class=\"pl-pds\">\"</span></span>))\n}</pre></div>", "body_text": "I think sbt creates a different classloader to run each test class.\nMaybe isLoaded could list the currently loaded libraries and look for the presence of libtensorflow ?\nSomething along the line of:\ndef isInClasspath: Boolean = {\n  import scala.collection.JavaConverters._\n  val libs = classOf[ClassLoader].getDeclaredField(\"loadedLibraryNames\")\n  libs.setAccessible(true)\n  val loadedLibs = \n      libs.get(ClassLoader.getSystemClassLoader())\n        .asInstanceOf[java.util.Vector[String]]\n        .asScala\n  loadedLibs.exists(_.contains(\"libtensorflow\"))\n}", "body": "I *think* sbt creates a different classloader to run each test class.\r\n\r\nMaybe `isLoaded` could list the currently loaded libraries and look for the presence of `libtensorflow` ?\r\n\r\nSomething along the line of:\r\n\r\n```scala\r\ndef isInClasspath: Boolean = {\r\n  import scala.collection.JavaConverters._\r\n  val libs = classOf[ClassLoader].getDeclaredField(\"loadedLibraryNames\")\r\n  libs.setAccessible(true)\r\n  val loadedLibs = \r\n      libs.get(ClassLoader.getSystemClassLoader())\r\n        .asInstanceOf[java.util.Vector[String]]\r\n        .asScala\r\n  loadedLibs.exists(_.contains(\"libtensorflow\"))\r\n}\r\n``` "}