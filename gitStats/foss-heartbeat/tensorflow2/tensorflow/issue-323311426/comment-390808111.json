{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/390808111", "html_url": "https://github.com/tensorflow/tensorflow/issues/19298#issuecomment-390808111", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19298", "id": 390808111, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDgwODExMQ==", "user": {"login": "saudet", "id": 3328023, "node_id": "MDQ6VXNlcjMzMjgwMjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3328023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saudet", "html_url": "https://github.com/saudet", "followers_url": "https://api.github.com/users/saudet/followers", "following_url": "https://api.github.com/users/saudet/following{/other_user}", "gists_url": "https://api.github.com/users/saudet/gists{/gist_id}", "starred_url": "https://api.github.com/users/saudet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saudet/subscriptions", "organizations_url": "https://api.github.com/users/saudet/orgs", "repos_url": "https://api.github.com/users/saudet/repos", "events_url": "https://api.github.com/users/saudet/events{/privacy}", "received_events_url": "https://api.github.com/users/saudet/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-21T23:00:35Z", "updated_at": "2018-05-21T23:00:35Z", "author_association": "NONE", "body_html": "<p>It doesn't, class loaders isolate multiple versions of the same class from each other. We could do it through the file system I guess, but loading isn't the issue. The issue is that the life of the JNI library is associated with the class loader that loaded it, and it might get unloaded once that class loader is garbage collected. So the only real \"fix\" is to load any class that need JNI with the system class loader.</p>\n<p>In a way though something like JavaCPP but standardized would make it easy to get all those details right in one place for as many libraries as we need, and then not worry about them at least. I wish the Panama team would understand the need for something like this, sigh...</p>", "body_text": "It doesn't, class loaders isolate multiple versions of the same class from each other. We could do it through the file system I guess, but loading isn't the issue. The issue is that the life of the JNI library is associated with the class loader that loaded it, and it might get unloaded once that class loader is garbage collected. So the only real \"fix\" is to load any class that need JNI with the system class loader.\nIn a way though something like JavaCPP but standardized would make it easy to get all those details right in one place for as many libraries as we need, and then not worry about them at least. I wish the Panama team would understand the need for something like this, sigh...", "body": "It doesn't, class loaders isolate multiple versions of the same class from each other. We could do it through the file system I guess, but loading isn't the issue. The issue is that the life of the JNI library is associated with the class loader that loaded it, and it might get unloaded once that class loader is garbage collected. So the only real \"fix\" is to load any class that need JNI with the system class loader.\r\n\r\nIn a way though something like JavaCPP but standardized would make it easy to get all those details right in one place for as many libraries as we need, and then not worry about them at least. I wish the Panama team would understand the need for something like this, sigh..."}