{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/389723401", "html_url": "https://github.com/tensorflow/tensorflow/issues/19298#issuecomment-389723401", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19298", "id": 389723401, "node_id": "MDEyOklzc3VlQ29tbWVudDM4OTcyMzQwMQ==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-17T02:20:04Z", "updated_at": "2018-05-17T03:36:24Z", "author_association": "MEMBER", "body_html": "<p>Hmm...I'm not familiar with class loading/unloading in <code>sbt</code>, but I suspect the following:</p>\n<ul>\n<li>The <code>NativeLibrary</code> class is being loaded multiple times, by different instances of a <code>ClassLoader</code> (does that sound like something <code>sbt +test</code> would do?)</li>\n<li>The first time it is loaded it successfully loads the library (via <code>System.loadLibrary(...)</code>).</li>\n<li>The second time around, I'm not clear on why the <code>isLoaded</code> check is failing, but it is (can that happen when a different <code>ClassLoader</code> is used?).</li>\n</ul>\n<p>I tried a hack to replace the <a href=\"https://github.com/tensorflow/tensorflow/blob/2c5e94c075454bf23bfa5a8a83e2d05011f4758e/tensorflow/java/src/main/java/org/tensorflow/NativeLibrary.java#L87\">temporary directory</a> with a fixed path, hoping that calling <code>System.loadLibrary</code> on the same path as before would be a no-op (as per <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#loadLibrary(java.lang.String)\" rel=\"nofollow\">javadoc</a>), but that didn't help either and I saw <code>java.lang.UnsatisfiedLinkError: Native Library /tmp/tensorflow_native_libraries-0/libtensorflow_jni.so already loaded in another classloader</code>. Which seems to suggest that there is some association between native libraries and class loaders?</p>\n<p>For the record, what changed between version 1.3 and 1.4 was the the shared library was split into two (<code>libtensorflow_framework.so</code> and <code>libtensorflow_jni.so</code>) - with the latter depending on the former.</p>\n<p>In the interim, I think adding <code>fork := true</code> in <code>build.sbt</code> would work around this problem.</p>\n<p>I'll think about a solution, ideas are welcome.</p>", "body_text": "Hmm...I'm not familiar with class loading/unloading in sbt, but I suspect the following:\n\nThe NativeLibrary class is being loaded multiple times, by different instances of a ClassLoader (does that sound like something sbt +test would do?)\nThe first time it is loaded it successfully loads the library (via System.loadLibrary(...)).\nThe second time around, I'm not clear on why the isLoaded check is failing, but it is (can that happen when a different ClassLoader is used?).\n\nI tried a hack to replace the temporary directory with a fixed path, hoping that calling System.loadLibrary on the same path as before would be a no-op (as per javadoc), but that didn't help either and I saw java.lang.UnsatisfiedLinkError: Native Library /tmp/tensorflow_native_libraries-0/libtensorflow_jni.so already loaded in another classloader. Which seems to suggest that there is some association between native libraries and class loaders?\nFor the record, what changed between version 1.3 and 1.4 was the the shared library was split into two (libtensorflow_framework.so and libtensorflow_jni.so) - with the latter depending on the former.\nIn the interim, I think adding fork := true in build.sbt would work around this problem.\nI'll think about a solution, ideas are welcome.", "body": "Hmm...I'm not familiar with class loading/unloading in `sbt`, but I suspect the following:\r\n\r\n- The `NativeLibrary` class is being loaded multiple times, by different instances of a `ClassLoader` (does that sound like something `sbt +test` would do?)\r\n- The first time it is loaded it successfully loads the library (via `System.loadLibrary(...)`).\r\n- The second time around, I'm not clear on why the `isLoaded` check is failing, but it is (can that happen when a different `ClassLoader` is used?).\r\n\r\nI tried a hack to replace the [temporary directory](https://github.com/tensorflow/tensorflow/blob/2c5e94c075454bf23bfa5a8a83e2d05011f4758e/tensorflow/java/src/main/java/org/tensorflow/NativeLibrary.java#L87) with a fixed path, hoping that calling `System.loadLibrary` on the same path as before would be a no-op (as per [javadoc](https://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#loadLibrary(java.lang.String))), but that didn't help either and I saw `java.lang.UnsatisfiedLinkError: Native Library /tmp/tensorflow_native_libraries-0/libtensorflow_jni.so already loaded in another classloader`. Which seems to suggest that there is some association between native libraries and class loaders?\r\n\r\nFor the record, what changed between version 1.3 and 1.4 was the the shared library was split into two (`libtensorflow_framework.so` and `libtensorflow_jni.so`) - with the latter depending on the former.\r\n\r\nIn the interim, I think adding `fork := true` in `build.sbt` would work around this problem.\r\n\r\nI'll think about a solution, ideas are welcome."}