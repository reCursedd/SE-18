{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13687", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13687/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13687/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13687/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13687", "id": 265267958, "node_id": "MDU6SXNzdWUyNjUyNjc5NTg=", "number": 13687, "title": "scatter_nd doesn't check indices for out-of-bounds on GPU when using float32", "user": {"login": "matthias-k", "id": 4093707, "node_id": "MDQ6VXNlcjQwOTM3MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4093707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthias-k", "html_url": "https://github.com/matthias-k", "followers_url": "https://api.github.com/users/matthias-k/followers", "following_url": "https://api.github.com/users/matthias-k/following{/other_user}", "gists_url": "https://api.github.com/users/matthias-k/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthias-k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthias-k/subscriptions", "organizations_url": "https://api.github.com/users/matthias-k/orgs", "repos_url": "https://api.github.com/users/matthias-k/repos", "events_url": "https://api.github.com/users/matthias-k/events{/privacy}", "received_events_url": "https://api.github.com/users/matthias-k/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-10-13T12:12:27Z", "updated_at": "2018-01-05T20:53:31Z", "closed_at": "2018-01-05T20:53:31Z", "author_association": "NONE", "body_html": "<p>I noticed that the <code>scatter_nd</code> command behaves inconsistently with respect to checking the given indices. In most cases the command raises an error when trying to set an index that is out of bound for the given shape. However, on the GPU when <code>updates</code> is of dtype <code>tf.float32</code> this check is not performed and invalid indices are just ignored. In the case of tf.int32 or always when on the CPU, and exception is raised. See below for detailed information and a minimal example that has been adapted from the <code>scatter_nd</code> documentation.</p>\n<p>Additionally I noticed that the <code>scatter_nd</code> documentation doesn't state whether a bound check is performed or not. That might be worth adding.</p>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nyes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\ninstalled from binary via pip (GPU version)</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\nv1.3.0-rc2-20-g0787eee 1.3.0</li>\n<li><strong>Python version</strong>:<br>\n3.5.2</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\ncuda8.0/cuDNN6 (via docker container <code>nvidia/cuda:8.0-cudnn6-devel</code>)</li>\n<li><strong>GPU model and memory</strong>:<br>\nGeForce GTX 1080 (8112 MB)</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> doesn't fail with invalid index on GPU (but it should)</span>\n<span class=\"pl-k\">with</span> tf.Graph().as_default() <span class=\"pl-k\">as</span> g:\n    indices <span class=\"pl-k\">=</span> tf.constant([[<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">4</span>], [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">3</span>], [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">7</span>]])\n    updates <span class=\"pl-k\">=</span> tf.constant([<span class=\"pl-c1\">9</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">11</span>, <span class=\"pl-c1\">12</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n    scatter <span class=\"pl-k\">=</span> tf.scatter_nd(indices, updates, (<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">10</span>))\n    <span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">graph</span><span class=\"pl-k\">=</span>g) <span class=\"pl-k\">as</span> session:\n        <span class=\"pl-c1\">print</span>(session.run(scatter))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> fails with invalid index error</span>\n<span class=\"pl-k\">with</span> tf.Graph().as_default() <span class=\"pl-k\">as</span> g:\n    indices <span class=\"pl-k\">=</span> tf.constant([[<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">4</span>], [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">3</span>], [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">7</span>]])\n    updates <span class=\"pl-k\">=</span> tf.constant([<span class=\"pl-c1\">9</span>, <span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">11</span>, <span class=\"pl-c1\">12</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32)\n    scatter <span class=\"pl-k\">=</span> tf.scatter_nd(indices, updates, (<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">10</span>))\n    <span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">graph</span><span class=\"pl-k\">=</span>g) <span class=\"pl-k\">as</span> session:\n        <span class=\"pl-c1\">print</span>(session.run(scatter))</pre></div>", "body_text": "I noticed that the scatter_nd command behaves inconsistently with respect to checking the given indices. In most cases the command raises an error when trying to set an index that is out of bound for the given shape. However, on the GPU when updates is of dtype tf.float32 this check is not performed and invalid indices are just ignored. In the case of tf.int32 or always when on the CPU, and exception is raised. See below for detailed information and a minimal example that has been adapted from the scatter_nd documentation.\nAdditionally I noticed that the scatter_nd documentation doesn't state whether a bound check is performed or not. That might be worth adding.\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nyes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux Ubuntu 16.04\nTensorFlow installed from (source or binary):\ninstalled from binary via pip (GPU version)\nTensorFlow version (use command below):\nv1.3.0-rc2-20-g0787eee 1.3.0\nPython version:\n3.5.2\nCUDA/cuDNN version:\ncuda8.0/cuDNN6 (via docker container nvidia/cuda:8.0-cudnn6-devel)\nGPU model and memory:\nGeForce GTX 1080 (8112 MB)\nExact command to reproduce:\n\n# doesn't fail with invalid index on GPU (but it should)\nwith tf.Graph().as_default() as g:\n    indices = tf.constant([[0, 4], [0, 3], [0, 1], [2, 7]])\n    updates = tf.constant([9, 10, 11, 12], dtype=tf.float32)\n    scatter = tf.scatter_nd(indices, updates, (1, 10))\n    with tf.Session(graph=g) as session:\n        print(session.run(scatter))\n\n# fails with invalid index error\nwith tf.Graph().as_default() as g:\n    indices = tf.constant([[0, 4], [0, 3], [0, 1], [2, 7]])\n    updates = tf.constant([9, 10, 11, 12], dtype=tf.int32)\n    scatter = tf.scatter_nd(indices, updates, (1, 10))\n    with tf.Session(graph=g) as session:\n        print(session.run(scatter))", "body": "I noticed that the `scatter_nd` command behaves inconsistently with respect to checking the given indices. In most cases the command raises an error when trying to set an index that is out of bound for the given shape. However, on the GPU when `updates` is of dtype `tf.float32` this check is not performed and invalid indices are just ignored. In the case of tf.int32 or always when on the CPU, and exception is raised. See below for detailed information and a minimal example that has been adapted from the `scatter_nd` documentation.\r\n\r\nAdditionally I noticed that the `scatter_nd` documentation doesn't state whether a bound check is performed or not. That might be worth adding.\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n  yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nLinux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**:\r\ninstalled from binary via pip (GPU version)\r\n- **TensorFlow version (use command below)**:\r\nv1.3.0-rc2-20-g0787eee 1.3.0\r\n- **Python version**: \r\n3.5.2\r\n- **CUDA/cuDNN version**:\r\ncuda8.0/cuDNN6 (via docker container `nvidia/cuda:8.0-cudnn6-devel`)\r\n- **GPU model and memory**:\r\nGeForce GTX 1080 (8112 MB)\r\n- **Exact command to reproduce**:\r\n```python\r\n\r\n# doesn't fail with invalid index on GPU (but it should)\r\nwith tf.Graph().as_default() as g:\r\n    indices = tf.constant([[0, 4], [0, 3], [0, 1], [2, 7]])\r\n    updates = tf.constant([9, 10, 11, 12], dtype=tf.float32)\r\n    scatter = tf.scatter_nd(indices, updates, (1, 10))\r\n    with tf.Session(graph=g) as session:\r\n        print(session.run(scatter))\r\n\r\n# fails with invalid index error\r\nwith tf.Graph().as_default() as g:\r\n    indices = tf.constant([[0, 4], [0, 3], [0, 1], [2, 7]])\r\n    updates = tf.constant([9, 10, 11, 12], dtype=tf.int32)\r\n    scatter = tf.scatter_nd(indices, updates, (1, 10))\r\n    with tf.Session(graph=g) as session:\r\n        print(session.run(scatter))\r\n```"}