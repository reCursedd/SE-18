{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5485", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5485/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5485/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5485/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/5485", "id": 188119805, "node_id": "MDU6SXNzdWUxODgxMTk4MDU=", "number": 5485, "title": "Possible bug when instantiating multi RNN cell in PTB LSTM model", "user": {"login": "glarchev", "id": 958267, "node_id": "MDQ6VXNlcjk1ODI2Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/958267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glarchev", "html_url": "https://github.com/glarchev", "followers_url": "https://api.github.com/users/glarchev/followers", "following_url": "https://api.github.com/users/glarchev/following{/other_user}", "gists_url": "https://api.github.com/users/glarchev/gists{/gist_id}", "starred_url": "https://api.github.com/users/glarchev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glarchev/subscriptions", "organizations_url": "https://api.github.com/users/glarchev/orgs", "repos_url": "https://api.github.com/users/glarchev/repos", "events_url": "https://api.github.com/users/glarchev/events{/privacy}", "received_events_url": "https://api.github.com/users/glarchev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2016-11-08T22:20:40Z", "updated_at": "2016-11-09T02:11:55Z", "closed_at": "2016-11-09T02:11:20Z", "author_association": "NONE", "body_html": "<p>Note sure whether this is a bug, since TensorFlow API is unclear on this. Would like someone more familiar with TensorFlow to investigate.</p>\n<p>The possible bug is in file tensorflow/models/rnn/ptb/ptb_word_lm.py on line 115. The line reads:</p>\n<p>cell = tf.nn.rnn_cell.MultiRNNCell([lstm_cell] * config.num_layers, state_is_tuple=True)</p>\n<p>According to the API reference, the constructor for MultiRNNCell is:</p>\n<p>tf.nn.rnn_cell.MultiRNNCell.<strong>init</strong>(cells, state_is_tuple=True)</p>\n<p>where</p>\n<p>cells: list of RNNCells that will be composed in this order.</p>\n<p>The following notation:</p>\n<p>[lstm_cell] * config.num_layers</p>\n<p>will create a list of size config.num_layers, where each element in the list is a reference to the same object lstm_cell. This potentially means that if we modify one layer of \"cell\", we will also be modifying all the other layers. Is this what we want?</p>", "body_text": "Note sure whether this is a bug, since TensorFlow API is unclear on this. Would like someone more familiar with TensorFlow to investigate.\nThe possible bug is in file tensorflow/models/rnn/ptb/ptb_word_lm.py on line 115. The line reads:\ncell = tf.nn.rnn_cell.MultiRNNCell([lstm_cell] * config.num_layers, state_is_tuple=True)\nAccording to the API reference, the constructor for MultiRNNCell is:\ntf.nn.rnn_cell.MultiRNNCell.init(cells, state_is_tuple=True)\nwhere\ncells: list of RNNCells that will be composed in this order.\nThe following notation:\n[lstm_cell] * config.num_layers\nwill create a list of size config.num_layers, where each element in the list is a reference to the same object lstm_cell. This potentially means that if we modify one layer of \"cell\", we will also be modifying all the other layers. Is this what we want?", "body": "Note sure whether this is a bug, since TensorFlow API is unclear on this. Would like someone more familiar with TensorFlow to investigate.\r\n\r\nThe possible bug is in file tensorflow/models/rnn/ptb/ptb_word_lm.py on line 115. The line reads:\r\n\r\ncell = tf.nn.rnn_cell.MultiRNNCell([lstm_cell] * config.num_layers, state_is_tuple=True)\r\n\r\nAccording to the API reference, the constructor for MultiRNNCell is:\r\n\r\ntf.nn.rnn_cell.MultiRNNCell.__init__(cells, state_is_tuple=True)\r\n\r\nwhere \r\n\r\ncells: list of RNNCells that will be composed in this order.\r\n\r\nThe following notation:\r\n\r\n[lstm_cell] * config.num_layers \r\n\r\nwill create a list of size config.num_layers, where each element in the list is a reference to the same object lstm_cell. This potentially means that if we modify one layer of \"cell\", we will also be modifying all the other layers. Is this what we want?"}