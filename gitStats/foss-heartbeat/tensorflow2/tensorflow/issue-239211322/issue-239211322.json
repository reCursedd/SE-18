{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11115", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11115/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11115/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11115/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11115", "id": 239211322, "node_id": "MDU6SXNzdWUyMzkyMTEzMjI=", "number": 11115, "title": "Unecessary type checking for shape_invariants in tf.while_loop()", "user": {"login": "TheButlah", "id": 6969415, "node_id": "MDQ6VXNlcjY5Njk0MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/6969415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheButlah", "html_url": "https://github.com/TheButlah", "followers_url": "https://api.github.com/users/TheButlah/followers", "following_url": "https://api.github.com/users/TheButlah/following{/other_user}", "gists_url": "https://api.github.com/users/TheButlah/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheButlah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheButlah/subscriptions", "organizations_url": "https://api.github.com/users/TheButlah/orgs", "repos_url": "https://api.github.com/users/TheButlah/repos", "events_url": "https://api.github.com/users/TheButlah/events{/privacy}", "received_events_url": "https://api.github.com/users/TheButlah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-28T15:51:48Z", "updated_at": "2017-09-29T01:00:40Z", "closed_at": "2017-09-29T01:00:29Z", "author_association": "NONE", "body_html": "<p>Apologies in advance if this is not the right place to post this or I did something wrong, I am new to GitHhub issues and TensorFlow.</p>\n<h3>Describe the problem</h3>\n<p>In <code>tf.while_loop</code>, when passing in <code>shape_invariants</code>, it is not (easily) possible to specify a shape invariant for a state variable belonging to a <code>BasicLSTMCell</code>. This is because the <code>tf.while_loop</code> makes a <code>nest.assert_same_structure(loop_vars, shape_invariants)</code> call, and uses the default parameter <code>type_check=True</code>. what this means, however, is that there is no way to manually pass a nested tuple in to specify an invariant for the state. For example, if the shape invariant for the LSTM state in the <code>shape_invariants</code> tuple is</p>\n<p><code>tuple(tf.TensorShape((None, size)) for size in lstm_cell.state_size)</code></p>\n<p>then <code>tf.while_loop</code> fails with the exception</p>\n<p><code>TypeError: The two structures don't have the same sequence type. First structure has type &lt;class 'tensorflow.python.ops.rnn_cell_impl.LSTMStateTuple'&gt;, while second structure has type &lt;type 'tuple'&gt;.</code></p>\n<p>However, LSTMStateTuple is simply a named tuple, so why does this not work? You can circumvent this restriction with the following code:</p>\n<p><code>tf.contrib.rnn.LSTMStateTuple(*tuple(tf.TensorShape((None, size)) for size in lstm_cell.state_size))</code></p>\n<p>But this seems like a hack and just feels wrong. I think that either type checking should be turned off for the purposes of <code>shape_invariants</code>, or some more intelligent type checking should be applied. Would this make sense?</p>", "body_text": "Apologies in advance if this is not the right place to post this or I did something wrong, I am new to GitHhub issues and TensorFlow.\nDescribe the problem\nIn tf.while_loop, when passing in shape_invariants, it is not (easily) possible to specify a shape invariant for a state variable belonging to a BasicLSTMCell. This is because the tf.while_loop makes a nest.assert_same_structure(loop_vars, shape_invariants) call, and uses the default parameter type_check=True. what this means, however, is that there is no way to manually pass a nested tuple in to specify an invariant for the state. For example, if the shape invariant for the LSTM state in the shape_invariants tuple is\ntuple(tf.TensorShape((None, size)) for size in lstm_cell.state_size)\nthen tf.while_loop fails with the exception\nTypeError: The two structures don't have the same sequence type. First structure has type <class 'tensorflow.python.ops.rnn_cell_impl.LSTMStateTuple'>, while second structure has type <type 'tuple'>.\nHowever, LSTMStateTuple is simply a named tuple, so why does this not work? You can circumvent this restriction with the following code:\ntf.contrib.rnn.LSTMStateTuple(*tuple(tf.TensorShape((None, size)) for size in lstm_cell.state_size))\nBut this seems like a hack and just feels wrong. I think that either type checking should be turned off for the purposes of shape_invariants, or some more intelligent type checking should be applied. Would this make sense?", "body": "Apologies in advance if this is not the right place to post this or I did something wrong, I am new to GitHhub issues and TensorFlow.\r\n\r\n### Describe the problem\r\nIn `tf.while_loop`, when passing in `shape_invariants`, it is not (easily) possible to specify a shape invariant for a state variable belonging to a `BasicLSTMCell`. This is because the `tf.while_loop` makes a `nest.assert_same_structure(loop_vars, shape_invariants)` call, and uses the default parameter `type_check=True`. what this means, however, is that there is no way to manually pass a nested tuple in to specify an invariant for the state. For example, if the shape invariant for the LSTM state in the `shape_invariants` tuple is\r\n\r\n`tuple(tf.TensorShape((None, size)) for size in lstm_cell.state_size)` \r\n\r\nthen `tf.while_loop` fails with the exception \r\n\r\n`TypeError: The two structures don't have the same sequence type. First structure has type <class 'tensorflow.python.ops.rnn_cell_impl.LSTMStateTuple'>, while second structure has type <type 'tuple'>.`\r\n\r\nHowever, LSTMStateTuple is simply a named tuple, so why does this not work? You can circumvent this restriction with the following code:\r\n\r\n`tf.contrib.rnn.LSTMStateTuple(*tuple(tf.TensorShape((None, size)) for size in lstm_cell.state_size))`\r\n\r\nBut this seems like a hack and just feels wrong. I think that either type checking should be turned off for the purposes of `shape_invariants`, or some more intelligent type checking should be applied. Would this make sense?"}