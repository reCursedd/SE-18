{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/279772590", "html_url": "https://github.com/tensorflow/tensorflow/pull/7487#issuecomment-279772590", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7487", "id": 279772590, "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTc3MjU5MA==", "user": {"login": "drasmuss", "id": 1952220, "node_id": "MDQ6VXNlcjE5NTIyMjA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1952220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drasmuss", "html_url": "https://github.com/drasmuss", "followers_url": "https://api.github.com/users/drasmuss/followers", "following_url": "https://api.github.com/users/drasmuss/following{/other_user}", "gists_url": "https://api.github.com/users/drasmuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/drasmuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drasmuss/subscriptions", "organizations_url": "https://api.github.com/users/drasmuss/orgs", "repos_url": "https://api.github.com/users/drasmuss/repos", "events_url": "https://api.github.com/users/drasmuss/events{/privacy}", "received_events_url": "https://api.github.com/users/drasmuss/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-14T17:16:13Z", "updated_at": "2017-02-14T17:16:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I did some speed tests, and it seems like implementation 2 (with the <code>n-1</code> <code>dynamic_stitches</code>) is the fastest.  That kind of surprised me, but I guess the masking operation is more expensive than the dynamic stitching.  Exactly where that tradeoff lies will probably depend on the size of the gradient versus the number of inputs.  But in general I think we expect the number of inputs to be fairly small, so the implementation 2 approach scales fairly well.</p>\n<p>Let me know if that sounds good, and I'll squash them all and just keep implementation 2.</p>", "body_text": "I did some speed tests, and it seems like implementation 2 (with the n-1 dynamic_stitches) is the fastest.  That kind of surprised me, but I guess the masking operation is more expensive than the dynamic stitching.  Exactly where that tradeoff lies will probably depend on the size of the gradient versus the number of inputs.  But in general I think we expect the number of inputs to be fairly small, so the implementation 2 approach scales fairly well.\nLet me know if that sounds good, and I'll squash them all and just keep implementation 2.", "body": "I did some speed tests, and it seems like implementation 2 (with the `n-1` `dynamic_stitches`) is the fastest.  That kind of surprised me, but I guess the masking operation is more expensive than the dynamic stitching.  Exactly where that tradeoff lies will probably depend on the size of the gradient versus the number of inputs.  But in general I think we expect the number of inputs to be fairly small, so the implementation 2 approach scales fairly well.\r\n\r\nLet me know if that sounds good, and I'll squash them all and just keep implementation 2."}