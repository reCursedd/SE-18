{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/279742563", "html_url": "https://github.com/tensorflow/tensorflow/pull/7487#issuecomment-279742563", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7487", "id": 279742563, "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTc0MjU2Mw==", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-14T15:40:01Z", "updated_at": "2017-02-14T15:40:01Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It looks like your implementation does <code>n-1</code> dynamic stitches if there are n inputs.  It seems like this could be reduce to a single dynamic stitch by dynamically stitching from constant tensors 0, 1, ... to get a <code>source</code> tensor that says where each destination came from.  This source tensor could then be used to mask out the inputs.  If that makes sense, could you see how it compares speed-wise?</p>\n<p>Also, please rewrite the gradient tests to use <code>tf.test.compute_gradient_error</code>.  Comparing against numerical gradients avoids more possibilities for error, so it's good to do it unless there's a compelling reason.</p>", "body_text": "It looks like your implementation does n-1 dynamic stitches if there are n inputs.  It seems like this could be reduce to a single dynamic stitch by dynamically stitching from constant tensors 0, 1, ... to get a source tensor that says where each destination came from.  This source tensor could then be used to mask out the inputs.  If that makes sense, could you see how it compares speed-wise?\nAlso, please rewrite the gradient tests to use tf.test.compute_gradient_error.  Comparing against numerical gradients avoids more possibilities for error, so it's good to do it unless there's a compelling reason.", "body": "It looks like your implementation does `n-1` dynamic stitches if there are n inputs.  It seems like this could be reduce to a single dynamic stitch by dynamically stitching from constant tensors 0, 1, ... to get a `source` tensor that says where each destination came from.  This source tensor could then be used to mask out the inputs.  If that makes sense, could you see how it compares speed-wise?\r\n\r\nAlso, please rewrite the gradient tests to use `tf.test.compute_gradient_error`.  Comparing against numerical gradients avoids more possibilities for error, so it's good to do it unless there's a compelling reason."}