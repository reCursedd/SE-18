{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6209", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6209/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6209/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6209/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6209", "id": 194552829, "node_id": "MDU6SXNzdWUxOTQ1NTI4Mjk=", "number": 6209, "title": "Bug: while_loop gives invalid gradients (NaN) even when loss is computed using only non NaNs", "user": {"login": "rdipietro", "id": 5150559, "node_id": "MDQ6VXNlcjUxNTA1NTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/5150559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdipietro", "html_url": "https://github.com/rdipietro", "followers_url": "https://api.github.com/users/rdipietro/followers", "following_url": "https://api.github.com/users/rdipietro/following{/other_user}", "gists_url": "https://api.github.com/users/rdipietro/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdipietro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdipietro/subscriptions", "organizations_url": "https://api.github.com/users/rdipietro/orgs", "repos_url": "https://api.github.com/users/rdipietro/repos", "events_url": "https://api.github.com/users/rdipietro/events{/privacy}", "received_events_url": "https://api.github.com/users/rdipietro/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "yuanbyu", "id": 2342391, "node_id": "MDQ6VXNlcjIzNDIzOTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2342391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuanbyu", "html_url": "https://github.com/yuanbyu", "followers_url": "https://api.github.com/users/yuanbyu/followers", "following_url": "https://api.github.com/users/yuanbyu/following{/other_user}", "gists_url": "https://api.github.com/users/yuanbyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuanbyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuanbyu/subscriptions", "organizations_url": "https://api.github.com/users/yuanbyu/orgs", "repos_url": "https://api.github.com/users/yuanbyu/repos", "events_url": "https://api.github.com/users/yuanbyu/events{/privacy}", "received_events_url": "https://api.github.com/users/yuanbyu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "yuanbyu", "id": 2342391, "node_id": "MDQ6VXNlcjIzNDIzOTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2342391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuanbyu", "html_url": "https://github.com/yuanbyu", "followers_url": "https://api.github.com/users/yuanbyu/followers", "following_url": "https://api.github.com/users/yuanbyu/following{/other_user}", "gists_url": "https://api.github.com/users/yuanbyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuanbyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuanbyu/subscriptions", "organizations_url": "https://api.github.com/users/yuanbyu/orgs", "repos_url": "https://api.github.com/users/yuanbyu/repos", "events_url": "https://api.github.com/users/yuanbyu/events{/privacy}", "received_events_url": "https://api.github.com/users/yuanbyu/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2016-12-09T09:45:41Z", "updated_at": "2017-02-17T05:06:16Z", "closed_at": "2017-02-17T05:06:16Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?</h3>\n<p><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"157280822\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/2540\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/2540/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/2540\">#2540</a> is the only thing that is seemingly related, but it's a different issue.</p>\n<h3>Environment info</h3>\n<p>Operating System: Ubuntu 14.04</p>\n<p>Installed version of CUDA and cuDNN: This bug occurs even if I only use CPUs.</p>\n<p>Compiled from source. Commit hash: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/a5074383617a9947f248a0ddd56b94f9fb0f970b/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/a5074383617a9947f248a0ddd56b94f9fb0f970b\"><tt>a507438</tt></a></p>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<p>Overview: Build a minimalist RNN-like model and compute derivatives with respect to the loss. Allow the ability to specify invalid time steps using NaNs.</p>\n<p>Behavior:</p>\n<ul>\n<li>If no NaNs are included, it works</li>\n<li>If only one invalid time step is included, it still works (odd)</li>\n<li>If two or more invalid time steps are included, it fails.</li>\n<li>If we change <code>INVALID_FLOAT_SYMBOL</code> to, say, <code>0.12345</code>, then it works as expected.</li>\n</ul>\n<pre><code>import tensorflow as tf\nimport numpy as np\n\nINVALID_FLOAT_SYMBOL = np.nan\n\nw = tf.Variable(1.0)\ninputs = tf.placeholder(tf.float32, shape=[None])\ntargets = tf.placeholder(tf.float32, shape=[None])\nT = tf.size(inputs)\n\nx_ta = tf.TensorArray(tf.float32, size=T).unpack(inputs)\nh_ta = tf.TensorArray(tf.float32, size=T)\n\ndef cond(t, h, h_ta):\n  return tf.less(t, T)\n\ndef body(t, h, h_ta):\n  x = x_ta.read(t)\n  h = w * h + x\n  h_ta = h_ta.write(t, h)\n  return t + 1, h, h_ta\n\nt = tf.constant(0)\nh = tf.constant(0.0)\n_, _, h_ta = tf.while_loop(cond, body, [t, h, h_ta])\noutputs = h_ta.pack()\n\ninvalid_mask = tf.is_nan(inputs) if np.isnan(INVALID_FLOAT_SYMBOL) else tf.equal(inputs, INVALID_FLOAT_SYMBOL)\nvalid_mask = tf.logical_not(invalid_mask)\n\nvalid_outputs = tf.boolean_mask(outputs, valid_mask)\nvalid_targets = tf.boolean_mask(targets, valid_mask)\n\nvalid_losses = tf.nn.sigmoid_cross_entropy_with_logits(valid_outputs, valid_targets)\nvalid_loss = tf.reduce_sum(valid_losses)\n\ngrad, = tf.gradients(valid_loss, w)\n\nsess = tf.Session()\nsess.run(tf.initialize_all_variables())\n</code></pre>\n<h3>Logs or other output that would be helpful</h3>\n<p>(If logs are large, please upload as attachment or provide link).</p>\n<pre><code># Case 1: INVALID_FLOAT_SYMBOL = np.nan, but no INVALID symbol is used.\nprint(sess.run(grad, feed_dict={inputs: [1.0, 2.0, 3.0],\n                                targets: [1.0, 1.0, 1.0]}))\n# Correctly prints -0.0573164\n\n# Case 2: INVALID_FLOAT_SYMBOL = np.nan, and one INVALID symbol is used.\nprint(sess.run(grad, feed_dict={inputs: [1.0, 2.0, 3.0, INVALID_FLOAT_SYMBOL],\n                                targets: [1.0, 1.0, 1.0, INVALID_FLOAT_SYMBOL]}))\n# Correctly prints -0.0573164\n\n# Case 3: INVALID_FLOAT_SYMBOL = np.nan, and two INVALID symbols are used.\nprint(sess.run(grad, feed_dict={inputs: [1.0, 2.0, 3.0, INVALID_FLOAT_SYMBOL, INVALID_FLOAT_SYMBOL],\n                                targets: [1.0, 1.0, 1.0, INVALID_FLOAT_SYMBOL, INVALID_FLOAT_SYMBOL]}))\n# Incorrectly prints nan\n\n# Case 4: INVALID_FLOAT_SYMBOL = 0.12345, and two INVALID symbols are used.\nprint(sess.run(grad, feed_dict={inputs: [1.0, 2.0, 3.0, INVALID_FLOAT_SYMBOL, INVALID_FLOAT_SYMBOL],\n                                targets: [1.0, 1.0, 1.0, INVALID_FLOAT_SYMBOL, INVALID_FLOAT_SYMBOL]}))\n# Correctly prints -0.0573164\n</code></pre>", "body_text": "What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\n#2540 is the only thing that is seemingly related, but it's a different issue.\nEnvironment info\nOperating System: Ubuntu 14.04\nInstalled version of CUDA and cuDNN: This bug occurs even if I only use CPUs.\nCompiled from source. Commit hash: a507438\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nOverview: Build a minimalist RNN-like model and compute derivatives with respect to the loss. Allow the ability to specify invalid time steps using NaNs.\nBehavior:\n\nIf no NaNs are included, it works\nIf only one invalid time step is included, it still works (odd)\nIf two or more invalid time steps are included, it fails.\nIf we change INVALID_FLOAT_SYMBOL to, say, 0.12345, then it works as expected.\n\nimport tensorflow as tf\nimport numpy as np\n\nINVALID_FLOAT_SYMBOL = np.nan\n\nw = tf.Variable(1.0)\ninputs = tf.placeholder(tf.float32, shape=[None])\ntargets = tf.placeholder(tf.float32, shape=[None])\nT = tf.size(inputs)\n\nx_ta = tf.TensorArray(tf.float32, size=T).unpack(inputs)\nh_ta = tf.TensorArray(tf.float32, size=T)\n\ndef cond(t, h, h_ta):\n  return tf.less(t, T)\n\ndef body(t, h, h_ta):\n  x = x_ta.read(t)\n  h = w * h + x\n  h_ta = h_ta.write(t, h)\n  return t + 1, h, h_ta\n\nt = tf.constant(0)\nh = tf.constant(0.0)\n_, _, h_ta = tf.while_loop(cond, body, [t, h, h_ta])\noutputs = h_ta.pack()\n\ninvalid_mask = tf.is_nan(inputs) if np.isnan(INVALID_FLOAT_SYMBOL) else tf.equal(inputs, INVALID_FLOAT_SYMBOL)\nvalid_mask = tf.logical_not(invalid_mask)\n\nvalid_outputs = tf.boolean_mask(outputs, valid_mask)\nvalid_targets = tf.boolean_mask(targets, valid_mask)\n\nvalid_losses = tf.nn.sigmoid_cross_entropy_with_logits(valid_outputs, valid_targets)\nvalid_loss = tf.reduce_sum(valid_losses)\n\ngrad, = tf.gradients(valid_loss, w)\n\nsess = tf.Session()\nsess.run(tf.initialize_all_variables())\n\nLogs or other output that would be helpful\n(If logs are large, please upload as attachment or provide link).\n# Case 1: INVALID_FLOAT_SYMBOL = np.nan, but no INVALID symbol is used.\nprint(sess.run(grad, feed_dict={inputs: [1.0, 2.0, 3.0],\n                                targets: [1.0, 1.0, 1.0]}))\n# Correctly prints -0.0573164\n\n# Case 2: INVALID_FLOAT_SYMBOL = np.nan, and one INVALID symbol is used.\nprint(sess.run(grad, feed_dict={inputs: [1.0, 2.0, 3.0, INVALID_FLOAT_SYMBOL],\n                                targets: [1.0, 1.0, 1.0, INVALID_FLOAT_SYMBOL]}))\n# Correctly prints -0.0573164\n\n# Case 3: INVALID_FLOAT_SYMBOL = np.nan, and two INVALID symbols are used.\nprint(sess.run(grad, feed_dict={inputs: [1.0, 2.0, 3.0, INVALID_FLOAT_SYMBOL, INVALID_FLOAT_SYMBOL],\n                                targets: [1.0, 1.0, 1.0, INVALID_FLOAT_SYMBOL, INVALID_FLOAT_SYMBOL]}))\n# Incorrectly prints nan\n\n# Case 4: INVALID_FLOAT_SYMBOL = 0.12345, and two INVALID symbols are used.\nprint(sess.run(grad, feed_dict={inputs: [1.0, 2.0, 3.0, INVALID_FLOAT_SYMBOL, INVALID_FLOAT_SYMBOL],\n                                targets: [1.0, 1.0, 1.0, INVALID_FLOAT_SYMBOL, INVALID_FLOAT_SYMBOL]}))\n# Correctly prints -0.0573164", "body": "### What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\r\n\r\nhttps://github.com/tensorflow/tensorflow/issues/2540 is the only thing that is seemingly related, but it's a different issue.\r\n\r\n### Environment info\r\nOperating System: Ubuntu 14.04\r\n\r\nInstalled version of CUDA and cuDNN: This bug occurs even if I only use CPUs.\r\n\r\nCompiled from source. Commit hash: a5074383617a9947f248a0ddd56b94f9fb0f970b\r\n\r\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\r\n\r\nOverview: Build a minimalist RNN-like model and compute derivatives with respect to the loss. Allow the ability to specify invalid time steps using NaNs.\r\n\r\nBehavior:\r\n- If no NaNs are included, it works\r\n- If only one invalid time step is included, it still works (odd)\r\n- If two or more invalid time steps are included, it fails.\r\n- If we change `INVALID_FLOAT_SYMBOL` to, say, `0.12345`, then it works as expected.\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\nINVALID_FLOAT_SYMBOL = np.nan\r\n\r\nw = tf.Variable(1.0)\r\ninputs = tf.placeholder(tf.float32, shape=[None])\r\ntargets = tf.placeholder(tf.float32, shape=[None])\r\nT = tf.size(inputs)\r\n\r\nx_ta = tf.TensorArray(tf.float32, size=T).unpack(inputs)\r\nh_ta = tf.TensorArray(tf.float32, size=T)\r\n\r\ndef cond(t, h, h_ta):\r\n  return tf.less(t, T)\r\n\r\ndef body(t, h, h_ta):\r\n  x = x_ta.read(t)\r\n  h = w * h + x\r\n  h_ta = h_ta.write(t, h)\r\n  return t + 1, h, h_ta\r\n\r\nt = tf.constant(0)\r\nh = tf.constant(0.0)\r\n_, _, h_ta = tf.while_loop(cond, body, [t, h, h_ta])\r\noutputs = h_ta.pack()\r\n\r\ninvalid_mask = tf.is_nan(inputs) if np.isnan(INVALID_FLOAT_SYMBOL) else tf.equal(inputs, INVALID_FLOAT_SYMBOL)\r\nvalid_mask = tf.logical_not(invalid_mask)\r\n\r\nvalid_outputs = tf.boolean_mask(outputs, valid_mask)\r\nvalid_targets = tf.boolean_mask(targets, valid_mask)\r\n\r\nvalid_losses = tf.nn.sigmoid_cross_entropy_with_logits(valid_outputs, valid_targets)\r\nvalid_loss = tf.reduce_sum(valid_losses)\r\n\r\ngrad, = tf.gradients(valid_loss, w)\r\n\r\nsess = tf.Session()\r\nsess.run(tf.initialize_all_variables())\r\n```\r\n\r\n### Logs or other output that would be helpful\r\n(If logs are large, please upload as attachment or provide link).\r\n\r\n```\r\n# Case 1: INVALID_FLOAT_SYMBOL = np.nan, but no INVALID symbol is used.\r\nprint(sess.run(grad, feed_dict={inputs: [1.0, 2.0, 3.0],\r\n                                targets: [1.0, 1.0, 1.0]}))\r\n# Correctly prints -0.0573164\r\n\r\n# Case 2: INVALID_FLOAT_SYMBOL = np.nan, and one INVALID symbol is used.\r\nprint(sess.run(grad, feed_dict={inputs: [1.0, 2.0, 3.0, INVALID_FLOAT_SYMBOL],\r\n                                targets: [1.0, 1.0, 1.0, INVALID_FLOAT_SYMBOL]}))\r\n# Correctly prints -0.0573164\r\n\r\n# Case 3: INVALID_FLOAT_SYMBOL = np.nan, and two INVALID symbols are used.\r\nprint(sess.run(grad, feed_dict={inputs: [1.0, 2.0, 3.0, INVALID_FLOAT_SYMBOL, INVALID_FLOAT_SYMBOL],\r\n                                targets: [1.0, 1.0, 1.0, INVALID_FLOAT_SYMBOL, INVALID_FLOAT_SYMBOL]}))\r\n# Incorrectly prints nan\r\n\r\n# Case 4: INVALID_FLOAT_SYMBOL = 0.12345, and two INVALID symbols are used.\r\nprint(sess.run(grad, feed_dict={inputs: [1.0, 2.0, 3.0, INVALID_FLOAT_SYMBOL, INVALID_FLOAT_SYMBOL],\r\n                                targets: [1.0, 1.0, 1.0, INVALID_FLOAT_SYMBOL, INVALID_FLOAT_SYMBOL]}))\r\n# Correctly prints -0.0573164\r\n```"}