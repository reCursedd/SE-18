{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/395330322", "html_url": "https://github.com/tensorflow/tensorflow/pull/19079#issuecomment-395330322", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19079", "id": 395330322, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTMzMDMyMg==", "user": {"login": "ed-alertedh", "id": 24605895, "node_id": "MDQ6VXNlcjI0NjA1ODk1", "avatar_url": "https://avatars1.githubusercontent.com/u/24605895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ed-alertedh", "html_url": "https://github.com/ed-alertedh", "followers_url": "https://api.github.com/users/ed-alertedh/followers", "following_url": "https://api.github.com/users/ed-alertedh/following{/other_user}", "gists_url": "https://api.github.com/users/ed-alertedh/gists{/gist_id}", "starred_url": "https://api.github.com/users/ed-alertedh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ed-alertedh/subscriptions", "organizations_url": "https://api.github.com/users/ed-alertedh/orgs", "repos_url": "https://api.github.com/users/ed-alertedh/repos", "events_url": "https://api.github.com/users/ed-alertedh/events{/privacy}", "received_events_url": "https://api.github.com/users/ed-alertedh/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-07T08:03:32Z", "updated_at": "2018-06-07T08:03:32Z", "author_association": "NONE", "body_html": "<p>Just ran into this - using batches of 256 I'm finding the trapezoidal AUC is way off. I know it's only ever going to be an estimate but careful_interpolation seems to at least be in the right ballpark. In case it saves someone else a few minutes, here is how to implement <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=7244943\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/roumposg\">@roumposg</a>'s suggestion:</p>\n<pre><code>def my_auc(labels, predictions):\n    return {'auc_pr_careful_interpolation': tf.metrics.auc(labels, predictions['logistic'], curve='PR',\n                                                            summation_method='careful_interpolation')}\n\nself._estimator = tf.contrib.estimator.add_metrics(estimator, my_auc)\n</code></pre>", "body_text": "Just ran into this - using batches of 256 I'm finding the trapezoidal AUC is way off. I know it's only ever going to be an estimate but careful_interpolation seems to at least be in the right ballpark. In case it saves someone else a few minutes, here is how to implement @roumposg's suggestion:\ndef my_auc(labels, predictions):\n    return {'auc_pr_careful_interpolation': tf.metrics.auc(labels, predictions['logistic'], curve='PR',\n                                                            summation_method='careful_interpolation')}\n\nself._estimator = tf.contrib.estimator.add_metrics(estimator, my_auc)", "body": "Just ran into this - using batches of 256 I'm finding the trapezoidal AUC is way off. I know it's only ever going to be an estimate but careful_interpolation seems to at least be in the right ballpark. In case it saves someone else a few minutes, here is how to implement @roumposg's suggestion:\r\n\r\n    def my_auc(labels, predictions):\r\n        return {'auc_pr_careful_interpolation': tf.metrics.auc(labels, predictions['logistic'], curve='PR',\r\n                                                                summation_method='careful_interpolation')}\r\n\r\n    self._estimator = tf.contrib.estimator.add_metrics(estimator, my_auc)"}