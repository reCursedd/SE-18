{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13117", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13117/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13117/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13117/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13117", "id": 258414042, "node_id": "MDU6SXNzdWUyNTg0MTQwNDI=", "number": 13117, "title": "'DNNClassifier' object has no attribute '_train_model'", "user": {"login": "soma11soma11", "id": 13162266, "node_id": "MDQ6VXNlcjEzMTYyMjY2", "avatar_url": "https://avatars3.githubusercontent.com/u/13162266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soma11soma11", "html_url": "https://github.com/soma11soma11", "followers_url": "https://api.github.com/users/soma11soma11/followers", "following_url": "https://api.github.com/users/soma11soma11/following{/other_user}", "gists_url": "https://api.github.com/users/soma11soma11/gists{/gist_id}", "starred_url": "https://api.github.com/users/soma11soma11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soma11soma11/subscriptions", "organizations_url": "https://api.github.com/users/soma11soma11/orgs", "repos_url": "https://api.github.com/users/soma11soma11/repos", "events_url": "https://api.github.com/users/soma11soma11/events{/privacy}", "received_events_url": "https://api.github.com/users/soma11soma11/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-18T09:18:12Z", "updated_at": "2017-09-18T10:10:28Z", "closed_at": "2017-09-18T10:10:28Z", "author_association": "NONE", "body_html": "<p>I got an error saying \"'DNNClassifier' object has no attribute '_train_model'\" when I run this.</p>\n<pre><code>from tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"/tmp/data/\")\nX_train = mnist.train.images\nX_test = mnist.test.images\ny_train = mnist.train.labels.astype(\"int\")\ny_test = mnist.test.labels.astype(\"int\")\nimport tensorflow as tf\n\nconfig = tf.contrib.learn.RunConfig(tf_random_seed=42) # not shown in the config\nfeature_cols = tf.contrib.learn.infer_real_valued_columns_from_input(X_train)\ndnn_clf = tf.contrib.learn.DNNClassifier(hidden_units=[300,100], n_classes=10, feature_columns=feature_cols, config=config)\ndnn_clf = tf.contrib.learn.SKCompat(dnn_clf) # if TensorFlow &gt;= 1.1\ndnn_clf.fit(X_train, y_train, batch_size=50, steps=40000)\n</code></pre>", "body_text": "I got an error saying \"'DNNClassifier' object has no attribute '_train_model'\" when I run this.\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"/tmp/data/\")\nX_train = mnist.train.images\nX_test = mnist.test.images\ny_train = mnist.train.labels.astype(\"int\")\ny_test = mnist.test.labels.astype(\"int\")\nimport tensorflow as tf\n\nconfig = tf.contrib.learn.RunConfig(tf_random_seed=42) # not shown in the config\nfeature_cols = tf.contrib.learn.infer_real_valued_columns_from_input(X_train)\ndnn_clf = tf.contrib.learn.DNNClassifier(hidden_units=[300,100], n_classes=10, feature_columns=feature_cols, config=config)\ndnn_clf = tf.contrib.learn.SKCompat(dnn_clf) # if TensorFlow >= 1.1\ndnn_clf.fit(X_train, y_train, batch_size=50, steps=40000)", "body": "I got an error saying \"'DNNClassifier' object has no attribute '_train_model'\" when I run this.\r\n\r\n```\r\nfrom tensorflow.examples.tutorials.mnist import input_data\r\nmnist = input_data.read_data_sets(\"/tmp/data/\")\r\nX_train = mnist.train.images\r\nX_test = mnist.test.images\r\ny_train = mnist.train.labels.astype(\"int\")\r\ny_test = mnist.test.labels.astype(\"int\")\r\nimport tensorflow as tf\r\n\r\nconfig = tf.contrib.learn.RunConfig(tf_random_seed=42) # not shown in the config\r\nfeature_cols = tf.contrib.learn.infer_real_valued_columns_from_input(X_train)\r\ndnn_clf = tf.contrib.learn.DNNClassifier(hidden_units=[300,100], n_classes=10, feature_columns=feature_cols, config=config)\r\ndnn_clf = tf.contrib.learn.SKCompat(dnn_clf) # if TensorFlow >= 1.1\r\ndnn_clf.fit(X_train, y_train, batch_size=50, steps=40000)\r\n```\r\n"}