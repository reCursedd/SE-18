{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/420839436", "html_url": "https://github.com/tensorflow/tensorflow/issues/16768#issuecomment-420839436", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16768", "id": 420839436, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDgzOTQzNg==", "user": {"login": "ltjds", "id": 27246889, "node_id": "MDQ6VXNlcjI3MjQ2ODg5", "avatar_url": "https://avatars1.githubusercontent.com/u/27246889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltjds", "html_url": "https://github.com/ltjds", "followers_url": "https://api.github.com/users/ltjds/followers", "following_url": "https://api.github.com/users/ltjds/following{/other_user}", "gists_url": "https://api.github.com/users/ltjds/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltjds/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltjds/subscriptions", "organizations_url": "https://api.github.com/users/ltjds/orgs", "repos_url": "https://api.github.com/users/ltjds/repos", "events_url": "https://api.github.com/users/ltjds/events{/privacy}", "received_events_url": "https://api.github.com/users/ltjds/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-13T00:10:51Z", "updated_at": "2018-09-13T00:10:51Z", "author_association": "NONE", "body_html": "<p>I found that it helps to build your own generator function that yields X and y in the shape needed. You'll have to use <code>model.fit_generator</code>, and make sure you can change around the size of the 'sub-batches' within the generator. For example:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">generator</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">maxbatch</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>):\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Let `alldata` just be all your data, of course.</span>\n    <span class=\"pl-k\">for</span> batch <span class=\"pl-k\">in</span> alldata:\n        <span class=\"pl-c\"><span class=\"pl-c\">#</span> ... do stuff to your batch if you want</span>\n        x, y <span class=\"pl-k\">=</span> batch\n        <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> maxbatch:\n            <span class=\"pl-k\">return</span> x, y\n\n        <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">0</span>, size, maxbatch):\n            <span class=\"pl-k\">if</span> i <span class=\"pl-k\">+</span> maxbatch <span class=\"pl-k\">&gt;</span> size:\n                <span class=\"pl-k\">yield</span> x[i: size], y[i: size]\n            <span class=\"pl-k\">else</span>:\n                <span class=\"pl-k\">yield</span> x[i: i<span class=\"pl-k\">+</span>maxbatch], y[i: i<span class=\"pl-k\">+</span>maxbatch]\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Then you can fit your model with this function</span>\nmodel.fit_generator(<span class=\"pl-c1\">self</span>.generator, <span class=\"pl-c1\">...</span>)</pre></div>\n<p>I also found that (if appropriate) using dropout can help.</p>", "body_text": "I found that it helps to build your own generator function that yields X and y in the shape needed. You'll have to use model.fit_generator, and make sure you can change around the size of the 'sub-batches' within the generator. For example:\ndef generator(self, maxbatch=None):\n\n    # Let `alldata` just be all your data, of course.\n    for batch in alldata:\n        # ... do stuff to your batch if you want\n        x, y = batch\n        if not maxbatch:\n            return x, y\n\n        for i in range(0, size, maxbatch):\n            if i + maxbatch > size:\n                yield x[i: size], y[i: size]\n            else:\n                yield x[i: i+maxbatch], y[i: i+maxbatch]\n\n# Then you can fit your model with this function\nmodel.fit_generator(self.generator, ...)\nI also found that (if appropriate) using dropout can help.", "body": "I found that it helps to build your own generator function that yields X and y in the shape needed. You'll have to use `model.fit_generator`, and make sure you can change around the size of the 'sub-batches' within the generator. For example:\r\n\r\n```python\r\ndef generator(self, maxbatch=None):\r\n\r\n    # Let `alldata` just be all your data, of course.\r\n    for batch in alldata:\r\n        # ... do stuff to your batch if you want\r\n        x, y = batch\r\n        if not maxbatch:\r\n            return x, y\r\n\r\n        for i in range(0, size, maxbatch):\r\n            if i + maxbatch > size:\r\n                yield x[i: size], y[i: size]\r\n            else:\r\n                yield x[i: i+maxbatch], y[i: i+maxbatch]\r\n\r\n# Then you can fit your model with this function\r\nmodel.fit_generator(self.generator, ...)\r\n```\r\n\r\nI also found that (if appropriate) using dropout can help."}