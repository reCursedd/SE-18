{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/271888411", "html_url": "https://github.com/tensorflow/tensorflow/issues/6781#issuecomment-271888411", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6781", "id": 271888411, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTg4ODQxMQ==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-11T14:53:12Z", "updated_at": "2017-01-11T14:53:12Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4010391\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/souterjk\">@souterjk</a> : Such questions are better suited for Stackoverflow as <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=49262\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jart\">@jart</a> pointed out. That said, use of the placeholder is like any other operation. The following example shows construction of a trivial graph to add two float tensors and then repeated invocation of the single graph using placeholders:</p>\n<div class=\"highlight highlight-source-java\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-smi\">example</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.tensorflow.DataType</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.tensorflow.Graph</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.tensorflow.Output</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.tensorflow.Session</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.tensorflow.Tensor</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Example</span> {\n  <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-k\">String</span>[] <span class=\"pl-v\">args</span>) {\n    <span class=\"pl-k\">try</span> (<span class=\"pl-smi\">Graph</span> g <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Graph</span>();\n\t <span class=\"pl-smi\">Session</span> s <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Session</span>(g)) {\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Construct a graph to add two float Tensors, using placeholders.</span>\n      <span class=\"pl-smi\">Output</span> x <span class=\"pl-k\">=</span> g<span class=\"pl-k\">.</span>opBuilder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Placeholder<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>setAttr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dtype<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">DataType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FLOAT</span>)<span class=\"pl-k\">.</span>build()<span class=\"pl-k\">.</span>output(<span class=\"pl-c1\">0</span>);\n      <span class=\"pl-smi\">Output</span> y <span class=\"pl-k\">=</span> g<span class=\"pl-k\">.</span>opBuilder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Placeholder<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>y<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>setAttr(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dtype<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">DataType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>FLOAT</span>)<span class=\"pl-k\">.</span>build()<span class=\"pl-k\">.</span>output(<span class=\"pl-c1\">0</span>);\n      <span class=\"pl-smi\">Output</span> z <span class=\"pl-k\">=</span> g<span class=\"pl-k\">.</span>opBuilder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Add<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>z<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>addInput(x)<span class=\"pl-k\">.</span>addInput(y)<span class=\"pl-k\">.</span>build()<span class=\"pl-k\">.</span>output(<span class=\"pl-c1\">0</span>);\n      <span class=\"pl-c\"><span class=\"pl-c\">//</span> Execute the graph multiple times, each time with a different value of x and y</span>\n      <span class=\"pl-k\">float</span>[] <span class=\"pl-smi\">X</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">float</span>[]{<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>,<span class=\"pl-c1\">3</span>};\n      <span class=\"pl-k\">float</span>[] <span class=\"pl-smi\">Y</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">float</span>[]{<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">6</span>};\n      <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i <span class=\"pl-k\">&lt;</span> <span class=\"pl-smi\">X</span><span class=\"pl-k\">.</span>length; i<span class=\"pl-k\">++</span>) {\n        <span class=\"pl-k\">try</span> (<span class=\"pl-smi\">Tensor</span> tx <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Tensor</span><span class=\"pl-k\">.</span>create(<span class=\"pl-k\">X</span>[i]);\n\t     <span class=\"pl-smi\">Tensor</span> ty <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Tensor</span><span class=\"pl-k\">.</span>create(<span class=\"pl-k\">Y</span>[i]);\n\t     <span class=\"pl-smi\">Tensor</span> tz <span class=\"pl-k\">=</span> s<span class=\"pl-k\">.</span>runner()<span class=\"pl-k\">.</span>feed(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>, tx)<span class=\"pl-k\">.</span>feed(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>y<span class=\"pl-pds\">\"</span></span>, ty)<span class=\"pl-k\">.</span>fetch(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>z<span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>run()<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>)) {\n\t  <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(<span class=\"pl-k\">X</span>[i] <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> + <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-k\">Y</span>[i] <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> = <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> tz<span class=\"pl-k\">.</span>floatValue());\n\t}\n      }\n    }\n  }\n}</pre></div>", "body_text": "@souterjk : Such questions are better suited for Stackoverflow as @jart pointed out. That said, use of the placeholder is like any other operation. The following example shows construction of a trivial graph to add two float tensors and then repeated invocation of the single graph using placeholders:\npackage example;\n\nimport org.tensorflow.DataType;\nimport org.tensorflow.Graph;\nimport org.tensorflow.Output;\nimport org.tensorflow.Session;\nimport org.tensorflow.Tensor;\n\npublic class Example {\n  public static void main(String[] args) {\n    try (Graph g = new Graph();\n\t Session s = new Session(g)) {\n      // Construct a graph to add two float Tensors, using placeholders.\n      Output x = g.opBuilder(\"Placeholder\", \"x\").setAttr(\"dtype\", DataType.FLOAT).build().output(0);\n      Output y = g.opBuilder(\"Placeholder\", \"y\").setAttr(\"dtype\", DataType.FLOAT).build().output(0);\n      Output z = g.opBuilder(\"Add\", \"z\").addInput(x).addInput(y).build().output(0);\n      // Execute the graph multiple times, each time with a different value of x and y\n      float[] X = new float[]{1,2,3};\n      float[] Y = new float[]{4,5,6};\n      for (int i = 0; i < X.length; i++) {\n        try (Tensor tx = Tensor.create(X[i]);\n\t     Tensor ty = Tensor.create(Y[i]);\n\t     Tensor tz = s.runner().feed(\"x\", tx).feed(\"y\", ty).fetch(\"z\").run().get(0)) {\n\t  System.out.println(X[i] + \" + \" + Y[i] + \" = \" + tz.floatValue());\n\t}\n      }\n    }\n  }\n}", "body": "@souterjk : Such questions are better suited for Stackoverflow as @jart pointed out. That said, use of the placeholder is like any other operation. The following example shows construction of a trivial graph to add two float tensors and then repeated invocation of the single graph using placeholders:\r\n\r\n```java\r\npackage example;\r\n\r\nimport org.tensorflow.DataType;\r\nimport org.tensorflow.Graph;\r\nimport org.tensorflow.Output;\r\nimport org.tensorflow.Session;\r\nimport org.tensorflow.Tensor;\r\n\r\npublic class Example {\r\n  public static void main(String[] args) {\r\n    try (Graph g = new Graph();\r\n\t Session s = new Session(g)) {\r\n      // Construct a graph to add two float Tensors, using placeholders.\r\n      Output x = g.opBuilder(\"Placeholder\", \"x\").setAttr(\"dtype\", DataType.FLOAT).build().output(0);\r\n      Output y = g.opBuilder(\"Placeholder\", \"y\").setAttr(\"dtype\", DataType.FLOAT).build().output(0);\r\n      Output z = g.opBuilder(\"Add\", \"z\").addInput(x).addInput(y).build().output(0);\r\n      // Execute the graph multiple times, each time with a different value of x and y\r\n      float[] X = new float[]{1,2,3};\r\n      float[] Y = new float[]{4,5,6};\r\n      for (int i = 0; i < X.length; i++) {\r\n        try (Tensor tx = Tensor.create(X[i]);\r\n\t     Tensor ty = Tensor.create(Y[i]);\r\n\t     Tensor tz = s.runner().feed(\"x\", tx).feed(\"y\", ty).fetch(\"z\").run().get(0)) {\r\n\t  System.out.println(X[i] + \" + \" + Y[i] + \" = \" + tz.floatValue());\r\n\t}\r\n      }\r\n    }\r\n  }\r\n}\r\n```"}