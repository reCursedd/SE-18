{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/302835567", "html_url": "https://github.com/tensorflow/tensorflow/issues/10014#issuecomment-302835567", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10014", "id": 302835567, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjgzNTU2Nw==", "user": {"login": "qimingj", "id": 13439553, "node_id": "MDQ6VXNlcjEzNDM5NTUz", "avatar_url": "https://avatars2.githubusercontent.com/u/13439553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qimingj", "html_url": "https://github.com/qimingj", "followers_url": "https://api.github.com/users/qimingj/followers", "following_url": "https://api.github.com/users/qimingj/following{/other_user}", "gists_url": "https://api.github.com/users/qimingj/gists{/gist_id}", "starred_url": "https://api.github.com/users/qimingj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qimingj/subscriptions", "organizations_url": "https://api.github.com/users/qimingj/orgs", "repos_url": "https://api.github.com/users/qimingj/repos", "events_url": "https://api.github.com/users/qimingj/events{/privacy}", "received_events_url": "https://api.github.com/users/qimingj/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-19T23:57:27Z", "updated_at": "2017-05-19T23:57:27Z", "author_association": "NONE", "body_html": "<p>In the case 3): sess.run([id_default, id_regular], feed_dict={regular: [5, 5]})</p>\n<p>In order to get it working as expected we'll need:</p>\n<p>default = tf.placeholder_with_default(tf.ones_like(regular), shape=[None])</p>\n<p>It connects \"regular\" with \"default\" that way. Otherwise, you do need a \"batch_run\" so TF can infer the batch size.</p>\n<p>In the case 4): sess.run([id_default, id_regular], feed_dict={default: [2, None], regular: [5, 5]})</p>\n<p>It doesn't complain if you use tf.float32, and you get:</p>\n<p>('4) missing some data', [array([  2.,  nan], dtype=float32), array([ 5.,  5.], dtype=float32)])</p>\n<p>Don't know why it doesn't work for int types. If it works, we may be able to use tf.scan to update \"nan\" values to default values.</p>", "body_text": "In the case 3): sess.run([id_default, id_regular], feed_dict={regular: [5, 5]})\nIn order to get it working as expected we'll need:\ndefault = tf.placeholder_with_default(tf.ones_like(regular), shape=[None])\nIt connects \"regular\" with \"default\" that way. Otherwise, you do need a \"batch_run\" so TF can infer the batch size.\nIn the case 4): sess.run([id_default, id_regular], feed_dict={default: [2, None], regular: [5, 5]})\nIt doesn't complain if you use tf.float32, and you get:\n('4) missing some data', [array([  2.,  nan], dtype=float32), array([ 5.,  5.], dtype=float32)])\nDon't know why it doesn't work for int types. If it works, we may be able to use tf.scan to update \"nan\" values to default values.", "body": "In the case 3): sess.run([id_default, id_regular], feed_dict={regular: [5, 5]})\r\n\r\nIn order to get it working as expected we'll need:\r\n\r\n  default = tf.placeholder_with_default(tf.ones_like(regular), shape=[None])\r\n\r\nIt connects \"regular\" with \"default\" that way. Otherwise, you do need a \"batch_run\" so TF can infer the batch size.\r\n\r\nIn the case 4): sess.run([id_default, id_regular], feed_dict={default: [2, None], regular: [5, 5]})\r\n\r\nIt doesn't complain if you use tf.float32, and you get:\r\n\r\n('4) missing some data', [array([  2.,  nan], dtype=float32), array([ 5.,  5.], dtype=float32)])\r\n\r\nDon't know why it doesn't work for int types. If it works, we may be able to use tf.scan to update \"nan\" values to default values.\r\n\r\n\r\n"}