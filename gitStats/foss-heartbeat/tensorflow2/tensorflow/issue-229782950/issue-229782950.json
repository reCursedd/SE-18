{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10014", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10014/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10014/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10014/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10014", "id": 229782950, "node_id": "MDU6SXNzdWUyMjk3ODI5NTA=", "number": 10014, "title": "feature request: make placeholder_with_default work in batch prediction", "user": {"login": "brandondutra", "id": 21314536, "node_id": "MDQ6VXNlcjIxMzE0NTM2", "avatar_url": "https://avatars0.githubusercontent.com/u/21314536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondutra", "html_url": "https://github.com/brandondutra", "followers_url": "https://api.github.com/users/brandondutra/followers", "following_url": "https://api.github.com/users/brandondutra/following{/other_user}", "gists_url": "https://api.github.com/users/brandondutra/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondutra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondutra/subscriptions", "organizations_url": "https://api.github.com/users/brandondutra/orgs", "repos_url": "https://api.github.com/users/brandondutra/repos", "events_url": "https://api.github.com/users/brandondutra/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondutra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-05-18T19:40:51Z", "updated_at": "2017-06-05T20:47:26Z", "closed_at": "2017-06-05T20:47:26Z", "author_association": "NONE", "body_html": "<p>cc <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=13439553\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/qimingj\">@qimingj</a></p>\n<p>I ran into an issue with building a model that has missing values. During training, I can fill in missing values via the options to tf.decode_csv or tf.parse_example. I want to make my exported saved model also handle missing values. I know how to do this if the model reads from tf.example string or csv string, but this is impossible if the model takes each input tensor individually through placeholders.</p>\n<p>I looked at tf.placeholder_with_default(), but this function has useless behavior in batch prediction. As an example:</p>\n<pre><code>import tensorflow as tf\n\nwith tf.Session() as sess:\n\tdefault = tf.placeholder_with_default([1], shape=[None])\n\tregular = tf.placeholder(tf.int32, shape=[None])\n\n\tid_default = tf.identity(default)\n\tid_regular = tf.identity(regular)\n\n\tprint('1) normal 1 example', sess.run([id_default, id_regular], feed_dict={default: [2], regular: [5]}))\n\tprint('2) normal batch example', sess.run([id_default, id_regular], feed_dict={default: [2, 2], regular: [5, 5]}))\n\tprint('3) missing 1 column in batch', sess.run([id_default, id_regular], feed_dict={regular: [5, 5]}))\n\tprint('4) missing some data', sess.run([id_default, id_regular], feed_dict={default: [2, None], regular: [5, 5]}))\t\n</code></pre>\n<p>The output is</p>\n<pre><code>('1) normal 1 example', [array([2], dtype=int32), array([5], dtype=int32)])\n('2) normal batch example', [array([2, 2], dtype=int32), array([5, 5], dtype=int32)])\n('3) missing 1 column in batch', [array([1], dtype=int32), array([5, 5], dtype=int32)])\nTraceback (most recent call last):\n  File \"placeholders.py\", line 13, in &lt;module&gt;\n    print('4) missing some data', sess.run([id_default, id_regular], feed_dict={default: [2, None], regular: [5, 5]}))\n  File \"/usr/local/google/home/brandondutra/miniconda2/envs/cml/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 767, in run\n    run_metadata_ptr)\n  File \"/usr/local/google/home/brandondutra/miniconda2/envs/cml/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 938, in _run\n    np_val = np.asarray(subfeed_val, dtype=subfeed_dtype)\n  File \"/usr/local/google/home/brandondutra/miniconda2/envs/cml/lib/python2.7/site-packages/numpy/core/numeric.py\", line 531, in asarray\n    return array(a, dtype, copy=False, order=order)\nTypeError: long() argument must be a string or a number, not 'NoneType'\n</code></pre>\n<p>Note how line 3 is incorrect: I expected a result of [1,1], [5,5]</p>\n<p>Also, placeholder_with_default does not allow some values to be missing in a batch as line 4 shows.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: no</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 14.04.1</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: ('v1.0.0-65-g4763edf-dirty', '1.0.1')</li>\n<li><strong>Bazel version (if compiling from source)</strong>: n/a</li>\n<li><strong>CUDA/cuDNN version</strong>: n/a</li>\n<li><strong>GPU model and memory</strong>: n/a</li>\n<li><strong>Exact command to reproduce</strong>: n/a</li>\n</ul>", "body_text": "cc @qimingj\nI ran into an issue with building a model that has missing values. During training, I can fill in missing values via the options to tf.decode_csv or tf.parse_example. I want to make my exported saved model also handle missing values. I know how to do this if the model reads from tf.example string or csv string, but this is impossible if the model takes each input tensor individually through placeholders.\nI looked at tf.placeholder_with_default(), but this function has useless behavior in batch prediction. As an example:\nimport tensorflow as tf\n\nwith tf.Session() as sess:\n\tdefault = tf.placeholder_with_default([1], shape=[None])\n\tregular = tf.placeholder(tf.int32, shape=[None])\n\n\tid_default = tf.identity(default)\n\tid_regular = tf.identity(regular)\n\n\tprint('1) normal 1 example', sess.run([id_default, id_regular], feed_dict={default: [2], regular: [5]}))\n\tprint('2) normal batch example', sess.run([id_default, id_regular], feed_dict={default: [2, 2], regular: [5, 5]}))\n\tprint('3) missing 1 column in batch', sess.run([id_default, id_regular], feed_dict={regular: [5, 5]}))\n\tprint('4) missing some data', sess.run([id_default, id_regular], feed_dict={default: [2, None], regular: [5, 5]}))\t\n\nThe output is\n('1) normal 1 example', [array([2], dtype=int32), array([5], dtype=int32)])\n('2) normal batch example', [array([2, 2], dtype=int32), array([5, 5], dtype=int32)])\n('3) missing 1 column in batch', [array([1], dtype=int32), array([5, 5], dtype=int32)])\nTraceback (most recent call last):\n  File \"placeholders.py\", line 13, in <module>\n    print('4) missing some data', sess.run([id_default, id_regular], feed_dict={default: [2, None], regular: [5, 5]}))\n  File \"/usr/local/google/home/brandondutra/miniconda2/envs/cml/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 767, in run\n    run_metadata_ptr)\n  File \"/usr/local/google/home/brandondutra/miniconda2/envs/cml/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 938, in _run\n    np_val = np.asarray(subfeed_val, dtype=subfeed_dtype)\n  File \"/usr/local/google/home/brandondutra/miniconda2/envs/cml/lib/python2.7/site-packages/numpy/core/numeric.py\", line 531, in asarray\n    return array(a, dtype, copy=False, order=order)\nTypeError: long() argument must be a string or a number, not 'NoneType'\n\nNote how line 3 is incorrect: I expected a result of [1,1], [5,5]\nAlso, placeholder_with_default does not allow some values to be missing in a batch as line 4 shows.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 14.04.1\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): ('v1.0.0-65-g4763edf-dirty', '1.0.1')\nBazel version (if compiling from source): n/a\nCUDA/cuDNN version: n/a\nGPU model and memory: n/a\nExact command to reproduce: n/a", "body": "cc @qimingj\r\n\r\nI ran into an issue with building a model that has missing values. During training, I can fill in missing values via the options to tf.decode_csv or tf.parse_example. I want to make my exported saved model also handle missing values. I know how to do this if the model reads from tf.example string or csv string, but this is impossible if the model takes each input tensor individually through placeholders. \r\n\r\nI looked at tf.placeholder_with_default(), but this function has useless behavior in batch prediction. As an example:\r\n\r\n```\r\nimport tensorflow as tf\r\n\r\nwith tf.Session() as sess:\r\n\tdefault = tf.placeholder_with_default([1], shape=[None])\r\n\tregular = tf.placeholder(tf.int32, shape=[None])\r\n\r\n\tid_default = tf.identity(default)\r\n\tid_regular = tf.identity(regular)\r\n\r\n\tprint('1) normal 1 example', sess.run([id_default, id_regular], feed_dict={default: [2], regular: [5]}))\r\n\tprint('2) normal batch example', sess.run([id_default, id_regular], feed_dict={default: [2, 2], regular: [5, 5]}))\r\n\tprint('3) missing 1 column in batch', sess.run([id_default, id_regular], feed_dict={regular: [5, 5]}))\r\n\tprint('4) missing some data', sess.run([id_default, id_regular], feed_dict={default: [2, None], regular: [5, 5]}))\t\r\n```\r\nThe output is\r\n```\r\n('1) normal 1 example', [array([2], dtype=int32), array([5], dtype=int32)])\r\n('2) normal batch example', [array([2, 2], dtype=int32), array([5, 5], dtype=int32)])\r\n('3) missing 1 column in batch', [array([1], dtype=int32), array([5, 5], dtype=int32)])\r\nTraceback (most recent call last):\r\n  File \"placeholders.py\", line 13, in <module>\r\n    print('4) missing some data', sess.run([id_default, id_regular], feed_dict={default: [2, None], regular: [5, 5]}))\r\n  File \"/usr/local/google/home/brandondutra/miniconda2/envs/cml/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 767, in run\r\n    run_metadata_ptr)\r\n  File \"/usr/local/google/home/brandondutra/miniconda2/envs/cml/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 938, in _run\r\n    np_val = np.asarray(subfeed_val, dtype=subfeed_dtype)\r\n  File \"/usr/local/google/home/brandondutra/miniconda2/envs/cml/lib/python2.7/site-packages/numpy/core/numeric.py\", line 531, in asarray\r\n    return array(a, dtype, copy=False, order=order)\r\nTypeError: long() argument must be a string or a number, not 'NoneType'\r\n```\r\n\r\nNote how line 3 is incorrect: I expected a result of [1,1], [5,5]\r\n\r\nAlso, placeholder_with_default does not allow some values to be missing in a batch as line 4 shows. \r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: no\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 14.04.1\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: ('v1.0.0-65-g4763edf-dirty', '1.0.1')\r\n- **Bazel version (if compiling from source)**: n/a\r\n- **CUDA/cuDNN version**: n/a\r\n- **GPU model and memory**: n/a\r\n- **Exact command to reproduce**: n/a\r\n"}