{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/302832543", "html_url": "https://github.com/tensorflow/tensorflow/issues/10014#issuecomment-302832543", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10014", "id": 302832543, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjgzMjU0Mw==", "user": {"login": "brandondutra", "id": 21314536, "node_id": "MDQ6VXNlcjIxMzE0NTM2", "avatar_url": "https://avatars0.githubusercontent.com/u/21314536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondutra", "html_url": "https://github.com/brandondutra", "followers_url": "https://api.github.com/users/brandondutra/followers", "following_url": "https://api.github.com/users/brandondutra/following{/other_user}", "gists_url": "https://api.github.com/users/brandondutra/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondutra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondutra/subscriptions", "organizations_url": "https://api.github.com/users/brandondutra/orgs", "repos_url": "https://api.github.com/users/brandondutra/repos", "events_url": "https://api.github.com/users/brandondutra/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondutra/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-19T23:27:42Z", "updated_at": "2017-05-19T23:27:42Z", "author_association": "NONE", "body_html": "<p>I was comparing them to how tf.parse_example would work. If instead I passed two tf.examples (that had features named 'default' and 'regular'), and they both were missing the 'default' feature, and the feature spec had a default value for the 'default' feature, both examples would inject the default value when I call session.run. Now, this default injection would happen at tf.parse_example and not the placeholder.</p>\n<p>I fully agree the values of regular do not influence id_default. During bath prediction of a trained model, I'm thinking of the line (note I changed the data)</p>\n<p><code>sess.run([id_default, id_regular], feed_dict={regular: [5, 6]})</code></p>\n<p>as a batch prediction request. I'm think of this as if there are two requests</p>\n<p>Request 1) get id_default, id_regular given {regular=5} (so id_default would use the default value, and I would get id_default=1, id_regular=5</p>\n<p>Request 2) get id_default, id_regular given {regular=6} (so id_default would use the default value, and I would get id_default=1, id_regular=6</p>\n<p>I guess the wall I'm running into is that I cannot tell TF I want to run batch prediction and it should replace None with that tensor's placeholder. For example, I would like</p>\n<p><code>sess.run([id_default, id_regular], feed_dict={regular: [5, 6, 7], default: [None, 3, None]})</code></p>\n<p>To return [1,3,1], [5,6,7]. Is this possible using placeholders? Or is there some kind of 'session.batch_run'? I think the only way to get this working currently is to use csv input or tf.example input, and not tensor input.</p>", "body_text": "I was comparing them to how tf.parse_example would work. If instead I passed two tf.examples (that had features named 'default' and 'regular'), and they both were missing the 'default' feature, and the feature spec had a default value for the 'default' feature, both examples would inject the default value when I call session.run. Now, this default injection would happen at tf.parse_example and not the placeholder.\nI fully agree the values of regular do not influence id_default. During bath prediction of a trained model, I'm thinking of the line (note I changed the data)\nsess.run([id_default, id_regular], feed_dict={regular: [5, 6]})\nas a batch prediction request. I'm think of this as if there are two requests\nRequest 1) get id_default, id_regular given {regular=5} (so id_default would use the default value, and I would get id_default=1, id_regular=5\nRequest 2) get id_default, id_regular given {regular=6} (so id_default would use the default value, and I would get id_default=1, id_regular=6\nI guess the wall I'm running into is that I cannot tell TF I want to run batch prediction and it should replace None with that tensor's placeholder. For example, I would like\nsess.run([id_default, id_regular], feed_dict={regular: [5, 6, 7], default: [None, 3, None]})\nTo return [1,3,1], [5,6,7]. Is this possible using placeholders? Or is there some kind of 'session.batch_run'? I think the only way to get this working currently is to use csv input or tf.example input, and not tensor input.", "body": "I was comparing them to how tf.parse_example would work. If instead I passed two tf.examples (that had features named 'default' and 'regular'), and they both were missing the 'default' feature, and the feature spec had a default value for the 'default' feature, both examples would inject the default value when I call session.run. Now, this default injection would happen at tf.parse_example and not the placeholder.\r\n\r\nI fully agree the values of regular do not influence id_default. During bath prediction of a trained model, I'm thinking of the line (note I changed the data)\r\n\r\n`sess.run([id_default, id_regular], feed_dict={regular: [5, 6]})`\r\n\r\nas a batch prediction request. I'm think of this as if there are two requests\r\n\r\nRequest 1) get id_default, id_regular given {regular=5} (so id_default would use the default value, and I would get id_default=1, id_regular=5\r\n\r\nRequest 2) get id_default, id_regular given {regular=6} (so id_default would use the default value, and I would get id_default=1, id_regular=6\r\n\r\nI guess the wall I'm running into is that I cannot tell TF I want to run batch prediction and it should replace None with that tensor's placeholder. For example, I would like \r\n\r\n`sess.run([id_default, id_regular], feed_dict={regular: [5, 6, 7], default: [None, 3, None]})`\r\n\r\nTo return [1,3,1], [5,6,7]. Is this possible using placeholders? Or is there some kind of 'session.batch_run'? I think the only way to get this working currently is to use csv input or tf.example input, and not tensor input."}