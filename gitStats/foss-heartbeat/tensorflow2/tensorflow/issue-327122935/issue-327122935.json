{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19602", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19602/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19602/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19602/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19602", "id": 327122935, "node_id": "MDU6SXNzdWUzMjcxMjI5MzU=", "number": 19602, "title": "[Feature Request] Named Dimensions", "user": {"login": "Hoeze", "id": 1200058, "node_id": "MDQ6VXNlcjEyMDAwNTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1200058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hoeze", "html_url": "https://github.com/Hoeze", "followers_url": "https://api.github.com/users/Hoeze/followers", "following_url": "https://api.github.com/users/Hoeze/following{/other_user}", "gists_url": "https://api.github.com/users/Hoeze/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hoeze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hoeze/subscriptions", "organizations_url": "https://api.github.com/users/Hoeze/orgs", "repos_url": "https://api.github.com/users/Hoeze/repos", "events_url": "https://api.github.com/users/Hoeze/events{/privacy}", "received_events_url": "https://api.github.com/users/Hoeze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-05-28T21:50:21Z", "updated_at": "2018-05-30T00:59:28Z", "closed_at": "2018-05-30T00:07:22Z", "author_association": "NONE", "body_html": "<p>Having named dimensions would be a nice improvement to dynamic shapes.<br>\nI'm thinking about a similar system like <a href=\"http://xarray.pydata.org/en/stable/data-structures.html#dataset\" rel=\"nofollow\">xarray's</a>.</p>\n<p>Example of current code:</p>\n<pre><code>images = tf.placeholder(tf.float32, shape=(None, None, None, 3))\nimages_shape = tf.shape(images)\nones = tf.ones(images_shape, dtype=images.dtype)\nimages_plus1 = images + ones \nprint(images_plus1)\n</code></pre>\n<blockquote>\n<p>&lt;tf.Tensor 'add:0' shape=(?, ?, ?, 3) dtype=float32&gt;</p>\n</blockquote>\n<p>Due to the \"None\" - Dimensions it's hard to distinguish them, especially when using reshaping ops.<br>\nIn my opinion some type of \"tf.Dimension\" would be better:</p>\n<pre><code>image_dim_0 = tf.Dimension(size=None, name=\"image_dim_0\")\nimage_dim_1 = tf.Dimension(size=None, name=\"image_dim_1\")\nimage_dim_2 = tf.Dimension(size=None, name=\"image_dim_2\")\n\nimages = tf.placeholder(tf.float32, shape=(image_dim_0, image_dim_1, image_dim_2, 3))\nimages_shape = tf.shape(images)\nones = tf.ones(images_shape, dtype=images.dtype)\nimages_plus1 = images + ones \nprint(images_plus1)\n</code></pre>\n<blockquote>\n<p>&lt;tf.Tensor 'add:0' shape=(<strong>image_dim_0:</strong> ?, <strong>image_dim_1:</strong> ?, <strong>image_dim_2:</strong> ?, 3) dtype=float32&gt;</p>\n</blockquote>\n<p>Also, this maybe helps to do some shape inference?</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 18.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.8.0</li>\n<li><strong>Python version</strong>: 3.6.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: none</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: none</li>\n<li><strong>CUDA/cuDNN version</strong>: none</li>\n<li><strong>GPU model and memory</strong>: none</li>\n<li><strong>Exact command to reproduce</strong>: none</li>\n</ul>", "body_text": "Having named dimensions would be a nice improvement to dynamic shapes.\nI'm thinking about a similar system like xarray's.\nExample of current code:\nimages = tf.placeholder(tf.float32, shape=(None, None, None, 3))\nimages_shape = tf.shape(images)\nones = tf.ones(images_shape, dtype=images.dtype)\nimages_plus1 = images + ones \nprint(images_plus1)\n\n\n<tf.Tensor 'add:0' shape=(?, ?, ?, 3) dtype=float32>\n\nDue to the \"None\" - Dimensions it's hard to distinguish them, especially when using reshaping ops.\nIn my opinion some type of \"tf.Dimension\" would be better:\nimage_dim_0 = tf.Dimension(size=None, name=\"image_dim_0\")\nimage_dim_1 = tf.Dimension(size=None, name=\"image_dim_1\")\nimage_dim_2 = tf.Dimension(size=None, name=\"image_dim_2\")\n\nimages = tf.placeholder(tf.float32, shape=(image_dim_0, image_dim_1, image_dim_2, 3))\nimages_shape = tf.shape(images)\nones = tf.ones(images_shape, dtype=images.dtype)\nimages_plus1 = images + ones \nprint(images_plus1)\n\n\n<tf.Tensor 'add:0' shape=(image_dim_0: ?, image_dim_1: ?, image_dim_2: ?, 3) dtype=float32>\n\nAlso, this maybe helps to do some shape inference?\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.8.0\nPython version: 3.6.5\nBazel version (if compiling from source): none\nGCC/Compiler version (if compiling from source): none\nCUDA/cuDNN version: none\nGPU model and memory: none\nExact command to reproduce: none", "body": "Having named dimensions would be a nice improvement to dynamic shapes.\r\nI'm thinking about a similar system like [xarray's](http://xarray.pydata.org/en/stable/data-structures.html#dataset).\r\n\r\nExample of current code:\r\n```\r\nimages = tf.placeholder(tf.float32, shape=(None, None, None, 3))\r\nimages_shape = tf.shape(images)\r\nones = tf.ones(images_shape, dtype=images.dtype)\r\nimages_plus1 = images + ones \r\nprint(images_plus1)\r\n```\r\n> <tf.Tensor 'add:0' shape=(?, ?, ?, 3) dtype=float32>\r\n\r\nDue to the \"None\" - Dimensions it's hard to distinguish them, especially when using reshaping ops.\r\nIn my opinion some type of \"tf.Dimension\" would be better:\r\n```\r\nimage_dim_0 = tf.Dimension(size=None, name=\"image_dim_0\")\r\nimage_dim_1 = tf.Dimension(size=None, name=\"image_dim_1\")\r\nimage_dim_2 = tf.Dimension(size=None, name=\"image_dim_2\")\r\n\r\nimages = tf.placeholder(tf.float32, shape=(image_dim_0, image_dim_1, image_dim_2, 3))\r\nimages_shape = tf.shape(images)\r\nones = tf.ones(images_shape, dtype=images.dtype)\r\nimages_plus1 = images + ones \r\nprint(images_plus1)\r\n```\r\n> <tf.Tensor 'add:0' shape=(**image_dim_0:** ?, **image_dim_1:** ?, **image_dim_2:** ?, 3) dtype=float32>\r\n\r\nAlso, this maybe helps to do some shape inference?\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 18.04\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.8.0\r\n- **Python version**: 3.6.5\r\n- **Bazel version (if compiling from source)**: none\r\n- **GCC/Compiler version (if compiling from source)**: none\r\n- **CUDA/cuDNN version**: none\r\n- **GPU model and memory**: none\r\n- **Exact command to reproduce**: none\r\n"}