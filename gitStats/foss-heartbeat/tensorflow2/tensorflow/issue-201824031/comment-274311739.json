{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/274311739", "html_url": "https://github.com/tensorflow/tensorflow/issues/6955#issuecomment-274311739", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6955", "id": 274311739, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDMxMTczOQ==", "user": {"login": "sjperkins", "id": 3530212, "node_id": "MDQ6VXNlcjM1MzAyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3530212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjperkins", "html_url": "https://github.com/sjperkins", "followers_url": "https://api.github.com/users/sjperkins/followers", "following_url": "https://api.github.com/users/sjperkins/following{/other_user}", "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions", "organizations_url": "https://api.github.com/users/sjperkins/orgs", "repos_url": "https://api.github.com/users/sjperkins/repos", "events_url": "https://api.github.com/users/sjperkins/events{/privacy}", "received_events_url": "https://api.github.com/users/sjperkins/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-22T06:16:37Z", "updated_at": "2017-01-22T06:16:37Z", "author_association": "CONTRIBUTOR", "body_html": "<blockquote>\n<p>however, having a way of pointing to data instead of copying would still be very nice \u2013 especially if we could point to data already on the GPU in some way.</p>\n</blockquote>\n<p>As <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> notes here: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"160794964\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/2919\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/2919/hovercard?comment_id=226660045&amp;comment_type=issue_comment\" href=\"https://github.com/tensorflow/tensorflow/issues/2919#issuecomment-226660045\">#2919 (comment)</a> there's also a <a href=\"https://github.com/tensorflow/tensorflow/blob/1084748efa3234c7daa824718aeb7df7b9252def/tensorflow/python/client/tf_session_helper.cc#L460-L470\">memcpy </a> for copying numpy array contents into python <code>Session.run()</code>. I'm mentioning this because I think there are similar issues across languages.</p>\n<p>A similar python solution may involve creating a Tensor that wraps the numpy array but does not own the data.</p>\n<p>Another possible solution involves explicitly allowing the user to pass array data by move or reference (C++ style). Move would assign ownership for the data to tensorflow, while by ref would leave ownership to the calling python/C++ code.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> S:\n  S.run([ops], <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x: <span class=\"pl-c1\">...</span>}, <span class=\"pl-v\">move_feed_dict</span><span class=\"pl-k\">=</span>{y:<span class=\"pl-c1\">...</span>}, <span class=\"pl-v\">ref_feed_dict</span><span class=\"pl-k\">=</span>{z: <span class=\"pl-c1\">...</span>}</pre></div>\n<p>It would be nice for this to be consistent across languages.</p>", "body_text": "however, having a way of pointing to data instead of copying would still be very nice \u2013 especially if we could point to data already on the GPU in some way.\n\nAs @yaroslavvb notes here: #2919 (comment) there's also a memcpy  for copying numpy array contents into python Session.run(). I'm mentioning this because I think there are similar issues across languages.\nA similar python solution may involve creating a Tensor that wraps the numpy array but does not own the data.\nAnother possible solution involves explicitly allowing the user to pass array data by move or reference (C++ style). Move would assign ownership for the data to tensorflow, while by ref would leave ownership to the calling python/C++ code.\nwith tf.Session() as S:\n  S.run([ops], feed_dict={x: ...}, move_feed_dict={y:...}, ref_feed_dict={z: ...}\nIt would be nice for this to be consistent across languages.", "body": "> however, having a way of pointing to data instead of copying would still be very nice \u2013 especially if we could point to data already on the GPU in some way.\r\n\r\nAs @yaroslavvb notes here: https://github.com/tensorflow/tensorflow/issues/2919#issuecomment-226660045 there's also a [memcpy ](https://github.com/tensorflow/tensorflow/blob/1084748efa3234c7daa824718aeb7df7b9252def/tensorflow/python/client/tf_session_helper.cc#L460-L470) for copying numpy array contents into python `Session.run()`. I'm mentioning this because I think there are similar issues across languages.\r\n\r\nA similar python solution may involve creating a Tensor that wraps the numpy array but does not own the data.\r\n\r\nAnother possible solution involves explicitly allowing the user to pass array data by move or reference (C++ style). Move would assign ownership for the data to tensorflow, while by ref would leave ownership to the calling python/C++ code.\r\n\r\n```python\r\nwith tf.Session() as S:\r\n  S.run([ops], feed_dict={x: ...}, move_feed_dict={y:...}, ref_feed_dict={z: ...}\r\n```\r\n\r\nIt would be nice for this to be consistent across languages."}