{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/412684405", "html_url": "https://github.com/tensorflow/tensorflow/pull/21202#issuecomment-412684405", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21202", "id": 412684405, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjY4NDQwNQ==", "user": {"login": "bstriner", "id": 12462956, "node_id": "MDQ6VXNlcjEyNDYyOTU2", "avatar_url": "https://avatars3.githubusercontent.com/u/12462956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstriner", "html_url": "https://github.com/bstriner", "followers_url": "https://api.github.com/users/bstriner/followers", "following_url": "https://api.github.com/users/bstriner/following{/other_user}", "gists_url": "https://api.github.com/users/bstriner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstriner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstriner/subscriptions", "organizations_url": "https://api.github.com/users/bstriner/orgs", "repos_url": "https://api.github.com/users/bstriner/repos", "events_url": "https://api.github.com/users/bstriner/events{/privacy}", "received_events_url": "https://api.github.com/users/bstriner/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-13T22:19:09Z", "updated_at": "2018-08-13T22:19:09Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> the renames seem cleaner if we do them in the cpps, but I'm willing to go either way. Bulky to have custom wrappers for a few functions just because of the <code>async</code> name conflict.</p>\n<ul>\n<li>Unfortunately, no purely swig renaming like there is for function names</li>\n<li>A macro would work, but just blanket replacing the word <code>async</code> feels like overkill</li>\n<li>Could create new functions that wrap the old functions and have better parameter names</li>\n<li>Could rename the parameters in the cpps</li>\n</ul>\n<p>Any way we do it, any thoughts on the rename? <code>async_</code> is closest typographically but maybe something like <code>is_async</code> is better semantically.</p>\n<p>Thanks!</p>", "body_text": "@asimshankar the renames seem cleaner if we do them in the cpps, but I'm willing to go either way. Bulky to have custom wrappers for a few functions just because of the async name conflict.\n\nUnfortunately, no purely swig renaming like there is for function names\nA macro would work, but just blanket replacing the word async feels like overkill\nCould create new functions that wrap the old functions and have better parameter names\nCould rename the parameters in the cpps\n\nAny way we do it, any thoughts on the rename? async_ is closest typographically but maybe something like is_async is better semantically.\nThanks!", "body": "@asimshankar the renames seem cleaner if we do them in the cpps, but I'm willing to go either way. Bulky to have custom wrappers for a few functions just because of the `async` name conflict.\r\n- Unfortunately, no purely swig renaming like there is for function names\r\n- A macro would work, but just blanket replacing the word `async` feels like overkill\r\n- Could create new functions that wrap the old functions and have better parameter names\r\n- Could rename the parameters in the cpps\r\n\r\nAny way we do it, any thoughts on the rename? `async_` is closest typographically but maybe something like `is_async` is better semantically.\r\n\r\nThanks!"}