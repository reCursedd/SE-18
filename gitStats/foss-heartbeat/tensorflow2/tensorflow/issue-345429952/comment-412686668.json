{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/412686668", "html_url": "https://github.com/tensorflow/tensorflow/pull/21202#issuecomment-412686668", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21202", "id": 412686668, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjY4NjY2OA==", "user": {"login": "bstriner", "id": 12462956, "node_id": "MDQ6VXNlcjEyNDYyOTU2", "avatar_url": "https://avatars3.githubusercontent.com/u/12462956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstriner", "html_url": "https://github.com/bstriner", "followers_url": "https://api.github.com/users/bstriner/followers", "following_url": "https://api.github.com/users/bstriner/following{/other_user}", "gists_url": "https://api.github.com/users/bstriner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstriner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstriner/subscriptions", "organizations_url": "https://api.github.com/users/bstriner/orgs", "repos_url": "https://api.github.com/users/bstriner/repos", "events_url": "https://api.github.com/users/bstriner/events{/privacy}", "received_events_url": "https://api.github.com/users/bstriner/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-13T22:28:20Z", "updated_at": "2018-08-13T22:28:20Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> BTW, do the <code>const_cast</code>s in TF bother anyone else? This idiom tastes like spaghetti: <code>reinterpret_cast&lt;T*&gt;(const_cast&lt;char*&gt;((out-&gt;tensor_data().data())));</code>.</p>\n<p>The void pointer gets casted up to <code>const</code> then <code>const_cast</code>ed back, and gets casted from <code>void</code> to <code>char</code> to <code>T</code>. Getting <code>out-&gt;buf_</code> would be great if there was an accessor.</p>", "body_text": "@asimshankar BTW, do the const_casts in TF bother anyone else? This idiom tastes like spaghetti: reinterpret_cast<T*>(const_cast<char*>((out->tensor_data().data())));.\nThe void pointer gets casted up to const then const_casted back, and gets casted from void to char to T. Getting out->buf_ would be great if there was an accessor.", "body": "@asimshankar BTW, do the `const_cast`s in TF bother anyone else? This idiom tastes like spaghetti: `reinterpret_cast<T*>(const_cast<char*>((out->tensor_data().data())));`.\r\n\r\nThe void pointer gets casted up to `const` then `const_cast`ed back, and gets casted from `void` to `char` to `T`. Getting `out->buf_` would be great if there was an accessor."}