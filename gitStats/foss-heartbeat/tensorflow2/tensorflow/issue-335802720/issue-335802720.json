{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20305", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20305/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20305/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20305/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20305", "id": 335802720, "node_id": "MDU6SXNzdWUzMzU4MDI3MjA=", "number": 20305, "title": "Compiling TF from source on Debian9 does not work as documented - partial fix", "user": {"login": "schloegl", "id": 1644245, "node_id": "MDQ6VXNlcjE2NDQyNDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1644245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schloegl", "html_url": "https://github.com/schloegl", "followers_url": "https://api.github.com/users/schloegl/followers", "following_url": "https://api.github.com/users/schloegl/following{/other_user}", "gists_url": "https://api.github.com/users/schloegl/gists{/gist_id}", "starred_url": "https://api.github.com/users/schloegl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schloegl/subscriptions", "organizations_url": "https://api.github.com/users/schloegl/orgs", "repos_url": "https://api.github.com/users/schloegl/repos", "events_url": "https://api.github.com/users/schloegl/events{/privacy}", "received_events_url": "https://api.github.com/users/schloegl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-06-26T12:46:40Z", "updated_at": "2018-11-13T18:56:02Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:</li>\n</ul>\n<p>Debian 9, with nvidia-driver 390, and nvidia-cuda-toolkit 9.1.85 from the repository \"stretch-backports\"</p>\n<ul>\n<li><strong>TensorFlow installed from (source or binary)</strong>:</li>\n</ul>\n<p>trying to install from source - but this fails (see description below)</p>\n<ul>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n1.8</li>\n<li><strong>Python version</strong>:<br>\n3.5.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\n0.14.1</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\n6.3</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\n9.1/7.1</li>\n<li><strong>GPU model and memory</strong>:<br>\nGTX1080Ti</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<pre><code>\nTF_NEED_CUDA=1 \\\nGCC_HOST_COMPILER_PATH=/usr/bin/gcc \\\nCUDA_TOOLKIT_PATH=/usr \\\nTF_CUDA_VERSION=9.1 \\\nTF_CUDNN_VERSION=7.1 \\\nCUDNN_INSTALL_PATH=/mnt/nfs/clustersw/shared/cuda/cudnn-9.1-linux-x64-v7.1/ \\\nTF_CUDA_COMPUTE_CAPABILITIES=5.2,6.1,6.2 \\\n./configure \n\nbazel build \nbazel build //tensorflow/tools/pip_package:build_pip_package \n</code></pre>\n<h3>Describe the problem</h3>\n<p>I was trying to install TF 1.8 on a  Debian 9 system with python/3.5.2, Cuda 9.1, cudnn 7.1. Because all attempts to used some some precomiled TF wheels failed, I'm trying to install TF from source. Cuda, and libcupti are installed from stretch-backports repository<br>\napt-get install -t stretch-backports nvidia-cuda-toolkit libcupti-dev nvidia-driver</p>\n<p>In order to compile TF from source, the following changes to the build system where necessary.</p>\n<pre><code>diff --git a/configure.py b/configure.py\nindex ad585fa52e..af5ead70da 100644\n--- a/configure.py\n+++ b/configure.py\n@@ -33,12 +33,12 @@ except ImportError:\n   from distutils.spawn import find_executable as which\n # pylint: enable=g-import-not-at-top\n \n-_DEFAULT_CUDA_VERSION = '9.0'\n-_DEFAULT_CUDNN_VERSION = '7'\n+_DEFAULT_CUDA_VERSION = '9.1'\n+_DEFAULT_CUDNN_VERSION = '7.1'\n _DEFAULT_NCCL_VERSION = '1.3'\n-_DEFAULT_CUDA_COMPUTE_CAPABILITIES = '3.5,5.2'\n-_DEFAULT_CUDA_PATH = '/usr/local/cuda'\n-_DEFAULT_CUDA_PATH_LINUX = '/opt/cuda'\n+_DEFAULT_CUDA_COMPUTE_CAPABILITIES = '5.2,6.1,6.2'\n+_DEFAULT_CUDA_PATH = '/usr'\n+_DEFAULT_CUDA_PATH_LINUX = '/usr'\n _DEFAULT_CUDA_PATH_WIN = ('C:/Program Files/NVIDIA GPU Computing '\n                           'Toolkit/CUDA/v%s' % _DEFAULT_CUDA_VERSION)\n _DEFAULT_TENSORRT_PATH_LINUX = '/usr/lib/%s-linux-gnu' % platform.machine()\n@@ -839,7 +839,7 @@ def set_tf_cuda_version(environ_cp):\n     if is_windows():\n       cuda_rt_lib_path = 'lib/x64/cudart.lib'\n     elif is_linux():\n-      cuda_rt_lib_path = 'lib64/libcudart.so.%s' % tf_cuda_version\n+      cuda_rt_lib_path = 'lib/x86_64-linux-gnu/libcudart.so.%s' % tf_cuda_version\n     elif is_macos():\n       cuda_rt_lib_path = 'lib/libcudart.%s.dylib' % tf_cuda_version\n \ndiff --git a/third_party/gpus/cuda_configure.bzl b/third_party/gpus/cuda_configure.bzl\nindex c90c66912d..f55d0a455e 100644\n--- a/third_party/gpus/cuda_configure.bzl\n+++ b/third_party/gpus/cuda_configure.bzl\n@@ -59,6 +59,7 @@ CUDA_LIB_PATHS = [\n CUPTI_HEADER_PATHS = [\n   \"extras/CUPTI/include/\",\n   \"include/cuda/CUPTI/\",\n+  \"include/\"\n ]\n \n # Lookup paths for the cupti library, relative to the\n@@ -67,7 +68,7 @@ CUPTI_HEADER_PATHS = [\n # the other CUDA libraries but rather in a special extras/CUPTI directory.\n CUPTI_LIB_PATHS = [\n   \"extras/CUPTI/lib64/\",\n-  \"lib/x86_64-linux-gnu\",\n+  \"lib/x86_64-linux-gnu/\",\n   \"lib64/\",\n   \"extras/CUPTI/libx64/\",\n   \"extras/CUPTI/lib/\",\n@@ -94,6 +95,7 @@ CUDNN_INCLUDE_PATHS = [\n NVVM_LIBDEVICE_PATHS = [\n   \"nvvm/libdevice/\",\n   \"share/cuda/\",\n+  \"lib/nvidia-cuda-toolkit/libdevice/\"\n ]\n \n load(\"//third_party/clang_toolchain:download_clang.bzl\", \"download_clang\")`\n</code></pre>\n<p>With these changes, \"bazel build\" was sucessful. However, the command<br>\nbazel build //tensorflow/tools/pip_package:build_pip_package<br>\nwould still fail with</p>\n<p><code>bazel build //tensorflow/tools/pip_package:build_pip_package  WARNING: Output base '/nfs/scistore12/jonasgrp/schloegl/.cache/bazel/_bazel_schloegl/8678486dd934320ead8a15f39d2403d9' is on NFS. This may lead to surprising failures and undetermined behavior. Starting local Bazel server and connecting to it... .......................... ERROR: /nfs/scistore_grp/schloegl/.cache/bazel/_bazel_schloegl/8678486dd934320ead8a15f39d2403d9/external/local_config_cuda/cuda/BUILD:48526:11: in cmd attribute of genrule rule @local_config_cuda//cuda:cuda-include: '$SocketInputStream' syntax is not supported; use '$(SocketInputStream)' instead for \"Make\" variables, or escape the '$' as '$$' if you intended this for the shell ERROR: Analysis of target '//tensorflow/tools/pip_package:build_pip_package' failed; build aborted: Analysis of target '@local_config_cuda//cuda:cuda-include' failed; build aborted INFO: Elapsed time: 7.423s INFO: 0 processes. FAILED: Build did NOT complete successfully (186 packages loaded) </code></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\n\nDebian 9, with nvidia-driver 390, and nvidia-cuda-toolkit 9.1.85 from the repository \"stretch-backports\"\n\nTensorFlow installed from (source or binary):\n\ntrying to install from source - but this fails (see description below)\n\nTensorFlow version (use command below):\n1.8\nPython version:\n3.5.2\nBazel version (if compiling from source):\n0.14.1\nGCC/Compiler version (if compiling from source):\n6.3\nCUDA/cuDNN version:\n9.1/7.1\nGPU model and memory:\nGTX1080Ti\nExact command to reproduce:\n\n\nTF_NEED_CUDA=1 \\\nGCC_HOST_COMPILER_PATH=/usr/bin/gcc \\\nCUDA_TOOLKIT_PATH=/usr \\\nTF_CUDA_VERSION=9.1 \\\nTF_CUDNN_VERSION=7.1 \\\nCUDNN_INSTALL_PATH=/mnt/nfs/clustersw/shared/cuda/cudnn-9.1-linux-x64-v7.1/ \\\nTF_CUDA_COMPUTE_CAPABILITIES=5.2,6.1,6.2 \\\n./configure \n\nbazel build \nbazel build //tensorflow/tools/pip_package:build_pip_package \n\nDescribe the problem\nI was trying to install TF 1.8 on a  Debian 9 system with python/3.5.2, Cuda 9.1, cudnn 7.1. Because all attempts to used some some precomiled TF wheels failed, I'm trying to install TF from source. Cuda, and libcupti are installed from stretch-backports repository\napt-get install -t stretch-backports nvidia-cuda-toolkit libcupti-dev nvidia-driver\nIn order to compile TF from source, the following changes to the build system where necessary.\ndiff --git a/configure.py b/configure.py\nindex ad585fa52e..af5ead70da 100644\n--- a/configure.py\n+++ b/configure.py\n@@ -33,12 +33,12 @@ except ImportError:\n   from distutils.spawn import find_executable as which\n # pylint: enable=g-import-not-at-top\n \n-_DEFAULT_CUDA_VERSION = '9.0'\n-_DEFAULT_CUDNN_VERSION = '7'\n+_DEFAULT_CUDA_VERSION = '9.1'\n+_DEFAULT_CUDNN_VERSION = '7.1'\n _DEFAULT_NCCL_VERSION = '1.3'\n-_DEFAULT_CUDA_COMPUTE_CAPABILITIES = '3.5,5.2'\n-_DEFAULT_CUDA_PATH = '/usr/local/cuda'\n-_DEFAULT_CUDA_PATH_LINUX = '/opt/cuda'\n+_DEFAULT_CUDA_COMPUTE_CAPABILITIES = '5.2,6.1,6.2'\n+_DEFAULT_CUDA_PATH = '/usr'\n+_DEFAULT_CUDA_PATH_LINUX = '/usr'\n _DEFAULT_CUDA_PATH_WIN = ('C:/Program Files/NVIDIA GPU Computing '\n                           'Toolkit/CUDA/v%s' % _DEFAULT_CUDA_VERSION)\n _DEFAULT_TENSORRT_PATH_LINUX = '/usr/lib/%s-linux-gnu' % platform.machine()\n@@ -839,7 +839,7 @@ def set_tf_cuda_version(environ_cp):\n     if is_windows():\n       cuda_rt_lib_path = 'lib/x64/cudart.lib'\n     elif is_linux():\n-      cuda_rt_lib_path = 'lib64/libcudart.so.%s' % tf_cuda_version\n+      cuda_rt_lib_path = 'lib/x86_64-linux-gnu/libcudart.so.%s' % tf_cuda_version\n     elif is_macos():\n       cuda_rt_lib_path = 'lib/libcudart.%s.dylib' % tf_cuda_version\n \ndiff --git a/third_party/gpus/cuda_configure.bzl b/third_party/gpus/cuda_configure.bzl\nindex c90c66912d..f55d0a455e 100644\n--- a/third_party/gpus/cuda_configure.bzl\n+++ b/third_party/gpus/cuda_configure.bzl\n@@ -59,6 +59,7 @@ CUDA_LIB_PATHS = [\n CUPTI_HEADER_PATHS = [\n   \"extras/CUPTI/include/\",\n   \"include/cuda/CUPTI/\",\n+  \"include/\"\n ]\n \n # Lookup paths for the cupti library, relative to the\n@@ -67,7 +68,7 @@ CUPTI_HEADER_PATHS = [\n # the other CUDA libraries but rather in a special extras/CUPTI directory.\n CUPTI_LIB_PATHS = [\n   \"extras/CUPTI/lib64/\",\n-  \"lib/x86_64-linux-gnu\",\n+  \"lib/x86_64-linux-gnu/\",\n   \"lib64/\",\n   \"extras/CUPTI/libx64/\",\n   \"extras/CUPTI/lib/\",\n@@ -94,6 +95,7 @@ CUDNN_INCLUDE_PATHS = [\n NVVM_LIBDEVICE_PATHS = [\n   \"nvvm/libdevice/\",\n   \"share/cuda/\",\n+  \"lib/nvidia-cuda-toolkit/libdevice/\"\n ]\n \n load(\"//third_party/clang_toolchain:download_clang.bzl\", \"download_clang\")`\n\nWith these changes, \"bazel build\" was sucessful. However, the command\nbazel build //tensorflow/tools/pip_package:build_pip_package\nwould still fail with\nbazel build //tensorflow/tools/pip_package:build_pip_package  WARNING: Output base '/nfs/scistore12/jonasgrp/schloegl/.cache/bazel/_bazel_schloegl/8678486dd934320ead8a15f39d2403d9' is on NFS. This may lead to surprising failures and undetermined behavior. Starting local Bazel server and connecting to it... .......................... ERROR: /nfs/scistore_grp/schloegl/.cache/bazel/_bazel_schloegl/8678486dd934320ead8a15f39d2403d9/external/local_config_cuda/cuda/BUILD:48526:11: in cmd attribute of genrule rule @local_config_cuda//cuda:cuda-include: '$SocketInputStream' syntax is not supported; use '$(SocketInputStream)' instead for \"Make\" variables, or escape the '$' as '$$' if you intended this for the shell ERROR: Analysis of target '//tensorflow/tools/pip_package:build_pip_package' failed; build aborted: Analysis of target '@local_config_cuda//cuda:cuda-include' failed; build aborted INFO: Elapsed time: 7.423s INFO: 0 processes. FAILED: Build did NOT complete successfully (186 packages loaded)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\n\r\nDebian 9, with nvidia-driver 390, and nvidia-cuda-toolkit 9.1.85 from the repository \"stretch-backports\"\r\n\r\n- **TensorFlow installed from (source or binary)**:\r\n\r\ntrying to install from source - but this fails (see description below) \r\n\r\n- **TensorFlow version (use command below)**:\r\n1.8\r\n- **Python version**: \r\n3.5.2\r\n- **Bazel version (if compiling from source)**:\r\n0.14.1\r\n- **GCC/Compiler version (if compiling from source)**:\r\n6.3\r\n- **CUDA/cuDNN version**:\r\n9.1/7.1\r\n- **GPU model and memory**:\r\nGTX1080Ti\r\n- **Exact command to reproduce**:\r\n```\r\n\r\nTF_NEED_CUDA=1 \\\r\nGCC_HOST_COMPILER_PATH=/usr/bin/gcc \\\r\nCUDA_TOOLKIT_PATH=/usr \\\r\nTF_CUDA_VERSION=9.1 \\\r\nTF_CUDNN_VERSION=7.1 \\\r\nCUDNN_INSTALL_PATH=/mnt/nfs/clustersw/shared/cuda/cudnn-9.1-linux-x64-v7.1/ \\\r\nTF_CUDA_COMPUTE_CAPABILITIES=5.2,6.1,6.2 \\\r\n./configure \r\n\r\nbazel build \r\nbazel build //tensorflow/tools/pip_package:build_pip_package \r\n```\r\n### Describe the problem\r\nI was trying to install TF 1.8 on a  Debian 9 system with python/3.5.2, Cuda 9.1, cudnn 7.1. Because all attempts to used some some precomiled TF wheels failed, I'm trying to install TF from source. Cuda, and libcupti are installed from stretch-backports repository \r\n    apt-get install -t stretch-backports nvidia-cuda-toolkit libcupti-dev nvidia-driver\r\n\r\nIn order to compile TF from source, the following changes to the build system where necessary.\r\n\r\n```\r\ndiff --git a/configure.py b/configure.py\r\nindex ad585fa52e..af5ead70da 100644\r\n--- a/configure.py\r\n+++ b/configure.py\r\n@@ -33,12 +33,12 @@ except ImportError:\r\n   from distutils.spawn import find_executable as which\r\n # pylint: enable=g-import-not-at-top\r\n \r\n-_DEFAULT_CUDA_VERSION = '9.0'\r\n-_DEFAULT_CUDNN_VERSION = '7'\r\n+_DEFAULT_CUDA_VERSION = '9.1'\r\n+_DEFAULT_CUDNN_VERSION = '7.1'\r\n _DEFAULT_NCCL_VERSION = '1.3'\r\n-_DEFAULT_CUDA_COMPUTE_CAPABILITIES = '3.5,5.2'\r\n-_DEFAULT_CUDA_PATH = '/usr/local/cuda'\r\n-_DEFAULT_CUDA_PATH_LINUX = '/opt/cuda'\r\n+_DEFAULT_CUDA_COMPUTE_CAPABILITIES = '5.2,6.1,6.2'\r\n+_DEFAULT_CUDA_PATH = '/usr'\r\n+_DEFAULT_CUDA_PATH_LINUX = '/usr'\r\n _DEFAULT_CUDA_PATH_WIN = ('C:/Program Files/NVIDIA GPU Computing '\r\n                           'Toolkit/CUDA/v%s' % _DEFAULT_CUDA_VERSION)\r\n _DEFAULT_TENSORRT_PATH_LINUX = '/usr/lib/%s-linux-gnu' % platform.machine()\r\n@@ -839,7 +839,7 @@ def set_tf_cuda_version(environ_cp):\r\n     if is_windows():\r\n       cuda_rt_lib_path = 'lib/x64/cudart.lib'\r\n     elif is_linux():\r\n-      cuda_rt_lib_path = 'lib64/libcudart.so.%s' % tf_cuda_version\r\n+      cuda_rt_lib_path = 'lib/x86_64-linux-gnu/libcudart.so.%s' % tf_cuda_version\r\n     elif is_macos():\r\n       cuda_rt_lib_path = 'lib/libcudart.%s.dylib' % tf_cuda_version\r\n \r\ndiff --git a/third_party/gpus/cuda_configure.bzl b/third_party/gpus/cuda_configure.bzl\r\nindex c90c66912d..f55d0a455e 100644\r\n--- a/third_party/gpus/cuda_configure.bzl\r\n+++ b/third_party/gpus/cuda_configure.bzl\r\n@@ -59,6 +59,7 @@ CUDA_LIB_PATHS = [\r\n CUPTI_HEADER_PATHS = [\r\n   \"extras/CUPTI/include/\",\r\n   \"include/cuda/CUPTI/\",\r\n+  \"include/\"\r\n ]\r\n \r\n # Lookup paths for the cupti library, relative to the\r\n@@ -67,7 +68,7 @@ CUPTI_HEADER_PATHS = [\r\n # the other CUDA libraries but rather in a special extras/CUPTI directory.\r\n CUPTI_LIB_PATHS = [\r\n   \"extras/CUPTI/lib64/\",\r\n-  \"lib/x86_64-linux-gnu\",\r\n+  \"lib/x86_64-linux-gnu/\",\r\n   \"lib64/\",\r\n   \"extras/CUPTI/libx64/\",\r\n   \"extras/CUPTI/lib/\",\r\n@@ -94,6 +95,7 @@ CUDNN_INCLUDE_PATHS = [\r\n NVVM_LIBDEVICE_PATHS = [\r\n   \"nvvm/libdevice/\",\r\n   \"share/cuda/\",\r\n+  \"lib/nvidia-cuda-toolkit/libdevice/\"\r\n ]\r\n \r\n load(\"//third_party/clang_toolchain:download_clang.bzl\", \"download_clang\")`\r\n```\r\n\r\n\r\nWith these changes, \"bazel build\" was sucessful. However, the command \r\n   bazel build //tensorflow/tools/pip_package:build_pip_package\r\nwould still fail with \r\n\r\n`bazel build //tensorflow/tools/pip_package:build_pip_package \r\nWARNING: Output base '/nfs/scistore12/jonasgrp/schloegl/.cache/bazel/_bazel_schloegl/8678486dd934320ead8a15f39d2403d9' is on NFS. This may lead to surprising failures and undetermined behavior.\r\nStarting local Bazel server and connecting to it...\r\n..........................\r\nERROR: /nfs/scistore_grp/schloegl/.cache/bazel/_bazel_schloegl/8678486dd934320ead8a15f39d2403d9/external/local_config_cuda/cuda/BUILD:48526:11: in cmd attribute of genrule rule @local_config_cuda//cuda:cuda-include: '$SocketInputStream' syntax is not supported; use '$(SocketInputStream)' instead for \"Make\" variables, or escape the '$' as '$$' if you intended this for the shell\r\nERROR: Analysis of target '//tensorflow/tools/pip_package:build_pip_package' failed; build aborted: Analysis of target '@local_config_cuda//cuda:cuda-include' failed; build aborted\r\nINFO: Elapsed time: 7.423s\r\nINFO: 0 processes.\r\nFAILED: Build did NOT complete successfully (186 packages loaded)\r\n`\r\n\r\n"}