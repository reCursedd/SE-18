{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/298375115", "html_url": "https://github.com/tensorflow/tensorflow/pull/8668#issuecomment-298375115", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8668", "id": 298375115, "node_id": "MDEyOklzc3VlQ29tbWVudDI5ODM3NTExNQ==", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-01T17:04:16Z", "updated_at": "2017-05-01T17:04:25Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I think this PR could be saved if we added the following to DType:</p>\n<pre><code>def __int__(self):\n    return self.as_datatype_enum\n</code></pre>\n<p>So that implicit conversion to int would happen.</p>\n<p>This seems safe to do for a few reasons:</p>\n<ul>\n<li>Callers invoking implicit conversion are naturally expecting to understand the 'enum' of the DType.</li>\n<li>We validate the correctness of the DType enum value during construction, so the return value of the int is always a true DType.</li>\n</ul>\n<p>The only potential ambiguity is whether we want to ever return ref types, or their base enum, but since we're moving away from ref types towards resource types, I think it doesn't matter.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23509001\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Mycosynth\">@Mycosynth</a> can you try making the change to add an <strong>int</strong> method to DType?  If you don't want to, let us know and we can take a look first.</p>", "body_text": "I think this PR could be saved if we added the following to DType:\ndef __int__(self):\n    return self.as_datatype_enum\n\nSo that implicit conversion to int would happen.\nThis seems safe to do for a few reasons:\n\nCallers invoking implicit conversion are naturally expecting to understand the 'enum' of the DType.\nWe validate the correctness of the DType enum value during construction, so the return value of the int is always a true DType.\n\nThe only potential ambiguity is whether we want to ever return ref types, or their base enum, but since we're moving away from ref types towards resource types, I think it doesn't matter.\n@Mycosynth can you try making the change to add an int method to DType?  If you don't want to, let us know and we can take a look first.", "body": "I think this PR could be saved if we added the following to DType:\r\n```\r\ndef __int__(self):\r\n    return self.as_datatype_enum\r\n```\r\nSo that implicit conversion to int would happen.\r\n\r\nThis seems safe to do for a few reasons:\r\n\r\n- Callers invoking implicit conversion are naturally expecting to understand the 'enum' of the DType.\r\n- We validate the correctness of the DType enum value during construction, so the return value of the int is always a true DType.\r\n\r\nThe only potential ambiguity is whether we want to ever return ref types, or their base enum, but since we're moving away from ref types towards resource types, I think it doesn't matter.\r\n\r\n@Mycosynth can you try making the change to add an __int__ method to DType?  If you don't want to, let us know and we can take a look first."}