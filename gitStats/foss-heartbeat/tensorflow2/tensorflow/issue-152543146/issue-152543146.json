{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2192", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2192/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2192/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2192/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2192", "id": 152543146, "node_id": "MDU6SXNzdWUxNTI1NDMxNDY=", "number": 2192, "title": "Row distances Tensorflow for models like K-Means, SOM and RBFN", "user": {"login": "RobRomijnders", "id": 16174021, "node_id": "MDQ6VXNlcjE2MTc0MDIx", "avatar_url": "https://avatars2.githubusercontent.com/u/16174021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RobRomijnders", "html_url": "https://github.com/RobRomijnders", "followers_url": "https://api.github.com/users/RobRomijnders/followers", "following_url": "https://api.github.com/users/RobRomijnders/following{/other_user}", "gists_url": "https://api.github.com/users/RobRomijnders/gists{/gist_id}", "starred_url": "https://api.github.com/users/RobRomijnders/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RobRomijnders/subscriptions", "organizations_url": "https://api.github.com/users/RobRomijnders/orgs", "repos_url": "https://api.github.com/users/RobRomijnders/repos", "events_url": "https://api.github.com/users/RobRomijnders/events{/privacy}", "received_events_url": "https://api.github.com/users/RobRomijnders/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-05-02T12:26:03Z", "updated_at": "2016-05-03T07:28:43Z", "closed_at": "2016-05-03T07:28:43Z", "author_association": "NONE", "body_html": "<p>I am wondering if Tensorflow has some op for fast calculation of distances. For example like Matlab's <a href=\"http://nl.mathworks.com/help/stats/pdist.html\" rel=\"nofollow\">pdist</a> or <a href=\"http://nl.mathworks.com/help/stats/pdist2.html\" rel=\"nofollow\">pdist2</a></p>\n<p>Or do you know of any way to optimize this piece of code?</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hidden_layer<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> scope:\n  centroids <span class=\"pl-k\">=</span> tf.Variable(tf.random_uniform([num_centr,D],<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32),<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>centroids<span class=\"pl-pds\">'</span></span>)\n  var <span class=\"pl-k\">=</span> tf.Variable(tf.truncated_normal([num_centr],<span class=\"pl-v\">mean</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">225</span>,<span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>,<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32))\n  exp_list <span class=\"pl-k\">=</span> []\n\n  <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-v\">xrange</span>(num_centr):\n        exp_list.append(tf.exp((<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span><span class=\"pl-k\">*</span>tf.reduce_sum(tf.square(tf.sub(x,centroids[i,:])),<span class=\"pl-c1\">1</span>))<span class=\"pl-k\">/</span>(<span class=\"pl-c1\">2</span><span class=\"pl-k\">*</span>var[i])))\n        phi <span class=\"pl-k\">=</span> tf.transpose(tf.pack(exp_list))</pre></div>\n<p>For now my code works and the results beautifully surpass my expectations. My prof deemed this impossible. With Tensorflow, I was able to prototype within two hours.<br>\nFor future, I am curious if TensorFlow can improve this for-loop for calculating distances with a function like matlab's pdist()</p>\n<p>Thanks for your help!</p>\n<p>Rob</p>", "body_text": "I am wondering if Tensorflow has some op for fast calculation of distances. For example like Matlab's pdist or pdist2\nOr do you know of any way to optimize this piece of code?\nwith tf.name_scope(\"Hidden_layer\") as scope:\n  centroids = tf.Variable(tf.random_uniform([num_centr,D],dtype=tf.float32),name='centroids')\n  var = tf.Variable(tf.truncated_normal([num_centr],mean=225,stddev=1,dtype=tf.float32))\n  exp_list = []\n\n  for i in xrange(num_centr):\n        exp_list.append(tf.exp((-1*tf.reduce_sum(tf.square(tf.sub(x,centroids[i,:])),1))/(2*var[i])))\n        phi = tf.transpose(tf.pack(exp_list))\nFor now my code works and the results beautifully surpass my expectations. My prof deemed this impossible. With Tensorflow, I was able to prototype within two hours.\nFor future, I am curious if TensorFlow can improve this for-loop for calculating distances with a function like matlab's pdist()\nThanks for your help!\nRob", "body": "I am wondering if Tensorflow has some op for fast calculation of distances. For example like Matlab's [pdist](http://nl.mathworks.com/help/stats/pdist.html) or [pdist2](http://nl.mathworks.com/help/stats/pdist2.html)\n\nOr do you know of any way to optimize this piece of code?\n\n``` python\nwith tf.name_scope(\"Hidden_layer\") as scope:\n  centroids = tf.Variable(tf.random_uniform([num_centr,D],dtype=tf.float32),name='centroids')\n  var = tf.Variable(tf.truncated_normal([num_centr],mean=225,stddev=1,dtype=tf.float32))\n  exp_list = []\n\n  for i in xrange(num_centr):\n        exp_list.append(tf.exp((-1*tf.reduce_sum(tf.square(tf.sub(x,centroids[i,:])),1))/(2*var[i])))\n        phi = tf.transpose(tf.pack(exp_list))\n```\n\nFor now my code works and the results beautifully surpass my expectations. My prof deemed this impossible. With Tensorflow, I was able to prototype within two hours. \nFor future, I am curious if TensorFlow can improve this for-loop for calculating distances with a function like matlab's pdist()\n\nThanks for your help!\n\nRob\n"}