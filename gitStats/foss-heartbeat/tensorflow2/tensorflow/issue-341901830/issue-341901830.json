{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20880", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20880/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20880/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20880/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20880", "id": 341901830, "node_id": "MDU6SXNzdWUzNDE5MDE4MzA=", "number": 20880, "title": "AttributeError: 'DataFrame' object has no attribute 'dtype'", "user": {"login": "vishwas31", "id": 29334358, "node_id": "MDQ6VXNlcjI5MzM0MzU4", "avatar_url": "https://avatars1.githubusercontent.com/u/29334358?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vishwas31", "html_url": "https://github.com/vishwas31", "followers_url": "https://api.github.com/users/vishwas31/followers", "following_url": "https://api.github.com/users/vishwas31/following{/other_user}", "gists_url": "https://api.github.com/users/vishwas31/gists{/gist_id}", "starred_url": "https://api.github.com/users/vishwas31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vishwas31/subscriptions", "organizations_url": "https://api.github.com/users/vishwas31/orgs", "repos_url": "https://api.github.com/users/vishwas31/repos", "events_url": "https://api.github.com/users/vishwas31/events{/privacy}", "received_events_url": "https://api.github.com/users/vishwas31/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rohan100jain", "id": 144114, "node_id": "MDQ6VXNlcjE0NDExNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/144114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohan100jain", "html_url": "https://github.com/rohan100jain", "followers_url": "https://api.github.com/users/rohan100jain/followers", "following_url": "https://api.github.com/users/rohan100jain/following{/other_user}", "gists_url": "https://api.github.com/users/rohan100jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohan100jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohan100jain/subscriptions", "organizations_url": "https://api.github.com/users/rohan100jain/orgs", "repos_url": "https://api.github.com/users/rohan100jain/repos", "events_url": "https://api.github.com/users/rohan100jain/events{/privacy}", "received_events_url": "https://api.github.com/users/rohan100jain/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-07-17T12:40:36Z", "updated_at": "2018-10-08T17:21:32Z", "closed_at": "2018-10-08T17:21:32Z", "author_association": "NONE", "body_html": "<p>Please go to Stack Overflow for help and support:</p>\n<p><a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">https://stackoverflow.com/questions/tagged/tensorflow</a></p>\n<p>If you open a GitHub issue, here is our policy:</p>\n<ol>\n<li>It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).</li>\n<li>The form below must be filled out.</li>\n<li>It shouldn't be a TensorBoard issue. Those go <a href=\"https://github.com/tensorflow/tensorboard/issues\">here</a>.</li>\n</ol>\n<p><strong>Here's why we have that policy</strong>: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:</li>\n<li><strong>TensorFlow version (use command below)</strong>:</li>\n<li><strong>Python version</strong>:</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>AttributeError: 'DataFrame' object has no attribute 'dtype'</p>\n<h3>Source code / logs</h3>\n<hr>\n<p>AttributeError                            Traceback (most recent call last)<br>\n in ()<br>\n----&gt; 1 <strong>reg.fit(input_fn=training_input_fn(batch_size=BATCH_SIZE),steps=STEPS_PER_EPOCH)</strong></p>\n<p>~/anaconda3/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)<br>\n430                 'in a future version' if date is None else ('after %s' % date),<br>\n431                 instructions)<br>\n--&gt; 432       return func(*args, **kwargs)<br>\n433     return tf_decorator.make_decorator(func, new_func, 'deprecated',<br>\n434                                        _add_deprecated_arg_notice_to_docstring(</p>\n<p>~/anaconda3/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)<br>\n522       hooks.append(basic_session_run_hooks.StopAtStepHook(steps, max_steps))<br>\n523<br>\n--&gt; 524     loss = self._train_model(input_fn=input_fn, hooks=hooks)<br>\n525     logging.info('Loss for final step: %s.', loss)<br>\n526     return self</p>\n<p>~/anaconda3/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _train_model(self, input_fn, hooks)<br>\n1036       random_seed.set_random_seed(self._config.tf_random_seed)<br>\n1037       global_step = training_util.create_global_step(g)<br>\n-&gt; 1038       features, labels = input_fn()<br>\n1039       self._check_inputs(features, labels)<br>\n1040       training_util._get_or_create_global_step_read()  # pylint: disable=protected-access</p>\n<p>~/anaconda3/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/numpy_io.py in input_fn()<br>\n194         num_threads=num_threads,<br>\n195         enqueue_size=batch_size,<br>\n--&gt; 196         num_epochs=num_epochs)<br>\n197<br>\n198     batch = (</p>\n<p>~/anaconda3/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/queues/feeding_functions.py in _enqueue_data(data, capacity, shuffle, min_after_dequeue, num_threads, seed, name, enqueue_size, num_epochs, pad_value)<br>\n390     elif isinstance(data, collections.OrderedDict):<br>\n391       types = [dtypes.int64<br>\n--&gt; 392               ] + [dtypes.as_dtype(col.dtype) for col in data.values()]<br>\n393       queue_shapes = [()] + [col.shape[1:] for col in data.values()]<br>\n394       get_feed_fn = _OrderedDictNumpyFeedFn</p>\n<p>~/anaconda3/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/queues/feeding_functions.py in (.0)<br>\n390     elif isinstance(data, collections.OrderedDict):<br>\n391       types = [dtypes.int64<br>\n--&gt; 392               ] + [dtypes.as_dtype(col.dtype) for col in data.values()]<br>\n393       queue_shapes = [()] + [col.shape[1:] for col in data.values()]<br>\n394       get_feed_fn = _OrderedDictNumpyFeedFn</p>\n<p>~/anaconda3/lib/python3.6/site-packages/pandas/core/generic.py in <strong>getattr</strong>(self, name)<br>\n4370             if self._info_axis._can_hold_identifiers_and_holds_name(name):<br>\n4371                 return self[name]<br>\n-&gt; 4372             return object.<strong>getattribute</strong>(self, name)<br>\n4373<br>\n4374     def <strong>setattr</strong>(self, name, value):</p>", "body_text": "Please go to Stack Overflow for help and support:\nhttps://stackoverflow.com/questions/tagged/tensorflow\nIf you open a GitHub issue, here is our policy:\n\nIt must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\nThe form below must be filled out.\nIt shouldn't be a TensorBoard issue. Those go here.\n\nHere's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nTensorFlow installed from (source or binary):\nTensorFlow version (use command below):\nPython version:\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nAttributeError: 'DataFrame' object has no attribute 'dtype'\nSource code / logs\n\nAttributeError                            Traceback (most recent call last)\n in ()\n----> 1 reg.fit(input_fn=training_input_fn(batch_size=BATCH_SIZE),steps=STEPS_PER_EPOCH)\n~/anaconda3/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n430                 'in a future version' if date is None else ('after %s' % date),\n431                 instructions)\n--> 432       return func(*args, **kwargs)\n433     return tf_decorator.make_decorator(func, new_func, 'deprecated',\n434                                        _add_deprecated_arg_notice_to_docstring(\n~/anaconda3/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\n522       hooks.append(basic_session_run_hooks.StopAtStepHook(steps, max_steps))\n523\n--> 524     loss = self._train_model(input_fn=input_fn, hooks=hooks)\n525     logging.info('Loss for final step: %s.', loss)\n526     return self\n~/anaconda3/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _train_model(self, input_fn, hooks)\n1036       random_seed.set_random_seed(self._config.tf_random_seed)\n1037       global_step = training_util.create_global_step(g)\n-> 1038       features, labels = input_fn()\n1039       self._check_inputs(features, labels)\n1040       training_util._get_or_create_global_step_read()  # pylint: disable=protected-access\n~/anaconda3/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/numpy_io.py in input_fn()\n194         num_threads=num_threads,\n195         enqueue_size=batch_size,\n--> 196         num_epochs=num_epochs)\n197\n198     batch = (\n~/anaconda3/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/queues/feeding_functions.py in _enqueue_data(data, capacity, shuffle, min_after_dequeue, num_threads, seed, name, enqueue_size, num_epochs, pad_value)\n390     elif isinstance(data, collections.OrderedDict):\n391       types = [dtypes.int64\n--> 392               ] + [dtypes.as_dtype(col.dtype) for col in data.values()]\n393       queue_shapes = [()] + [col.shape[1:] for col in data.values()]\n394       get_feed_fn = _OrderedDictNumpyFeedFn\n~/anaconda3/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/queues/feeding_functions.py in (.0)\n390     elif isinstance(data, collections.OrderedDict):\n391       types = [dtypes.int64\n--> 392               ] + [dtypes.as_dtype(col.dtype) for col in data.values()]\n393       queue_shapes = [()] + [col.shape[1:] for col in data.values()]\n394       get_feed_fn = _OrderedDictNumpyFeedFn\n~/anaconda3/lib/python3.6/site-packages/pandas/core/generic.py in getattr(self, name)\n4370             if self._info_axis._can_hold_identifiers_and_holds_name(name):\n4371                 return self[name]\n-> 4372             return object.getattribute(self, name)\n4373\n4374     def setattr(self, name, value):", "body": "Please go to Stack Overflow for help and support:\r\n\r\nhttps://stackoverflow.com/questions/tagged/tensorflow\r\n\r\nIf you open a GitHub issue, here is our policy:\r\n\r\n1. It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\r\n2. The form below must be filled out.\r\n3. It shouldn't be a TensorBoard issue. Those go [here](https://github.com/tensorflow/tensorboard/issues).\r\n\r\n**Here's why we have that policy**: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\n- **TensorFlow installed from (source or binary)**:\r\n- **TensorFlow version (use command below)**:\r\n- **Python version**: \r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\nAttributeError: 'DataFrame' object has no attribute 'dtype'\r\n\r\n\r\n### Source code / logs\r\n\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-14-3c90f2017a02> in <module>()\r\n----> 1 **reg.fit(input_fn=training_input_fn(batch_size=BATCH_SIZE),steps=STEPS_PER_EPOCH)**\r\n\r\n~/anaconda3/lib/python3.6/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\r\n    430                 'in a future version' if date is None else ('after %s' % date),\r\n    431                 instructions)\r\n--> 432       return func(*args, **kwargs)\r\n    433     return tf_decorator.make_decorator(func, new_func, 'deprecated',\r\n    434                                        _add_deprecated_arg_notice_to_docstring(\r\n\r\n~/anaconda3/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in fit(self, x, y, input_fn, steps, batch_size, monitors, max_steps)\r\n    522       hooks.append(basic_session_run_hooks.StopAtStepHook(steps, max_steps))\r\n    523 \r\n--> 524     loss = self._train_model(input_fn=input_fn, hooks=hooks)\r\n    525     logging.info('Loss for final step: %s.', loss)\r\n    526     return self\r\n\r\n~/anaconda3/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py in _train_model(self, input_fn, hooks)\r\n   1036       random_seed.set_random_seed(self._config.tf_random_seed)\r\n   1037       global_step = training_util.create_global_step(g)\r\n-> 1038       features, labels = input_fn()\r\n   1039       self._check_inputs(features, labels)\r\n   1040       training_util._get_or_create_global_step_read()  # pylint: disable=protected-access\r\n\r\n~/anaconda3/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/numpy_io.py in input_fn()\r\n    194         num_threads=num_threads,\r\n    195         enqueue_size=batch_size,\r\n--> 196         num_epochs=num_epochs)\r\n    197 \r\n    198     batch = (\r\n\r\n~/anaconda3/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/queues/feeding_functions.py in _enqueue_data(data, capacity, shuffle, min_after_dequeue, num_threads, seed, name, enqueue_size, num_epochs, pad_value)\r\n    390     elif isinstance(data, collections.OrderedDict):\r\n    391       types = [dtypes.int64\r\n--> 392               ] + [dtypes.as_dtype(col.dtype) for col in data.values()]\r\n    393       queue_shapes = [()] + [col.shape[1:] for col in data.values()]\r\n    394       get_feed_fn = _OrderedDictNumpyFeedFn\r\n\r\n~/anaconda3/lib/python3.6/site-packages/tensorflow/python/estimator/inputs/queues/feeding_functions.py in <listcomp>(.0)\r\n    390     elif isinstance(data, collections.OrderedDict):\r\n    391       types = [dtypes.int64\r\n--> 392               ] + [dtypes.as_dtype(col.dtype) for col in data.values()]\r\n    393       queue_shapes = [()] + [col.shape[1:] for col in data.values()]\r\n    394       get_feed_fn = _OrderedDictNumpyFeedFn\r\n\r\n~/anaconda3/lib/python3.6/site-packages/pandas/core/generic.py in __getattr__(self, name)\r\n   4370             if self._info_axis._can_hold_identifiers_and_holds_name(name):\r\n   4371                 return self[name]\r\n-> 4372             return object.__getattribute__(self, name)\r\n   4373 \r\n   4374     def __setattr__(self, name, value):\r\n"}