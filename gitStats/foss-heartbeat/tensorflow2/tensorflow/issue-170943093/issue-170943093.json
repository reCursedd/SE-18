{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3775", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3775/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3775/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3775/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3775", "id": 170943093, "node_id": "MDU6SXNzdWUxNzA5NDMwOTM=", "number": 3775, "title": "reduce_mean is not numerically accurate on GPU", "user": {"login": "zhengwy888", "id": 1190730, "node_id": "MDQ6VXNlcjExOTA3MzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1190730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhengwy888", "html_url": "https://github.com/zhengwy888", "followers_url": "https://api.github.com/users/zhengwy888/followers", "following_url": "https://api.github.com/users/zhengwy888/following{/other_user}", "gists_url": "https://api.github.com/users/zhengwy888/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhengwy888/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhengwy888/subscriptions", "organizations_url": "https://api.github.com/users/zhengwy888/orgs", "repos_url": "https://api.github.com/users/zhengwy888/repos", "events_url": "https://api.github.com/users/zhengwy888/events{/privacy}", "received_events_url": "https://api.github.com/users/zhengwy888/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-08-12T19:32:56Z", "updated_at": "2016-09-08T07:38:13Z", "closed_at": "2016-09-08T07:38:13Z", "author_association": "NONE", "body_html": "<p>For smaller size matrix tf.reduce_mean works fine.<br>\nBut for larger size matrix floating point results are not accurate.</p>\n<p>I am running on CUDA 7.0, Titan X.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nmat3 <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mat3<span class=\"pl-pds\">\"</span></span>, [<span class=\"pl-c1\">4500</span>,<span class=\"pl-c1\">4500</span>], <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.constant_initializer(<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>.))\nreduce_mat3_ref <span class=\"pl-k\">=</span> tf.reduce_mean(mat3)\n<span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> sess:\n    tf.initialize_all_variables().run()\n    reduce1 <span class=\"pl-k\">=</span> sess.run(reduce_mat3_ref)\n    <span class=\"pl-c1\">print</span>(reduce1) <span class=\"pl-c\"><span class=\"pl-c\">#</span> on CPU this is -1.0, on GPU this produces -1.00006</span>\n    <span class=\"pl-k\">assert</span>(reduce1 <span class=\"pl-k\">==</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>.) </pre></div>", "body_text": "For smaller size matrix tf.reduce_mean works fine.\nBut for larger size matrix floating point results are not accurate.\nI am running on CUDA 7.0, Titan X.\nimport tensorflow as tf\n\nmat3 = tf.get_variable(\"mat3\", [4500,4500], initializer=tf.constant_initializer(-1.))\nreduce_mat3_ref = tf.reduce_mean(mat3)\nwith tf.Session('') as sess:\n    tf.initialize_all_variables().run()\n    reduce1 = sess.run(reduce_mat3_ref)\n    print(reduce1) # on CPU this is -1.0, on GPU this produces -1.00006\n    assert(reduce1 == -1.)", "body": "For smaller size matrix tf.reduce_mean works fine. \nBut for larger size matrix floating point results are not accurate.\n\nI am running on CUDA 7.0, Titan X.\n\n``` python\nimport tensorflow as tf\n\nmat3 = tf.get_variable(\"mat3\", [4500,4500], initializer=tf.constant_initializer(-1.))\nreduce_mat3_ref = tf.reduce_mean(mat3)\nwith tf.Session('') as sess:\n    tf.initialize_all_variables().run()\n    reduce1 = sess.run(reduce_mat3_ref)\n    print(reduce1) # on CPU this is -1.0, on GPU this produces -1.00006\n    assert(reduce1 == -1.) \n```\n"}