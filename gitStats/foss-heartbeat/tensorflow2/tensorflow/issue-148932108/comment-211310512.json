{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/211310512", "html_url": "https://github.com/tensorflow/tensorflow/issues/1996#issuecomment-211310512", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1996", "id": 211310512, "node_id": "MDEyOklzc3VlQ29tbWVudDIxMTMxMDUxMg==", "user": {"login": "mckelvin", "id": 865677, "node_id": "MDQ6VXNlcjg2NTY3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/865677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mckelvin", "html_url": "https://github.com/mckelvin", "followers_url": "https://api.github.com/users/mckelvin/followers", "following_url": "https://api.github.com/users/mckelvin/following{/other_user}", "gists_url": "https://api.github.com/users/mckelvin/gists{/gist_id}", "starred_url": "https://api.github.com/users/mckelvin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mckelvin/subscriptions", "organizations_url": "https://api.github.com/users/mckelvin/orgs", "repos_url": "https://api.github.com/users/mckelvin/repos", "events_url": "https://api.github.com/users/mckelvin/events{/privacy}", "received_events_url": "https://api.github.com/users/mckelvin/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-18T10:10:30Z", "updated_at": "2016-04-18T10:10:30Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1710528\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bhack\">@bhack</a> You got it! I've pushed the initial code to <a href=\"https://github.com/douban/tfmesos\">https://github.com/douban/tfmesos</a> as well as <a href=\"https://hub.docker.com/r/tfmesos/tfmesos/\" rel=\"nofollow\">https://hub.docker.com/r/tfmesos/tfmesos/</a> (<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=572167\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/windreamer\">@windreamer</a> is the main developer of tfmesos).</p>\n<p>If you have <a href=\"http://mesos.apache.org/documentation/latest/docker-containerizer/\" rel=\"nofollow\">mesos+docker</a> installed, you can run the demo now. Before you start, you should pull tfmesos docker images on mesos server and slaves, via: <code>docker pull tfmesos/tfmesos</code> .</p>\n<p><strong>Notice:</strong> There're still some unsolved issues in tfmesos and it's not production ready. For example, the tfmesos container is running in <code>root</code> mode, which is dangerous. We're still working on it. Feel free to PR / issue if you have any idea/suggestion.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> coding: utf-8</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> ~/demo.py</span>\n\n<span class=\"pl-k\">import</span> sys\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tfmesos <span class=\"pl-k\">import</span> cluster\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">argv</span>):\n    jobs_def <span class=\"pl-k\">=</span> [\n        {\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ps<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>num<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">2</span>\n        },\n        {\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>worker<span class=\"pl-pds\">\"</span></span>,\n            <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>num<span class=\"pl-pds\">\"</span></span>: <span class=\"pl-c1\">2</span>\n        },\n    ]\n    mesos_master <span class=\"pl-k\">=</span> sys.argv[<span class=\"pl-c1\">1</span>]\n    <span class=\"pl-k\">with</span> cluster(jobs_def, <span class=\"pl-v\">master</span><span class=\"pl-k\">=</span>mesos_master, <span class=\"pl-v\">quiet</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>) <span class=\"pl-k\">as</span> targets:\n        <span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/job:ps/task:0<span class=\"pl-pds\">'</span></span>):\n            a <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">10</span>)\n\n        <span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/job:ps/task:1<span class=\"pl-pds\">'</span></span>):\n            b <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">32</span>)\n\n        <span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:worker/task:1<span class=\"pl-pds\">\"</span></span>):\n            op <span class=\"pl-k\">=</span> a <span class=\"pl-k\">+</span> b\n\n        <span class=\"pl-k\">with</span> tf.Session(targets[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/job:worker/task:0<span class=\"pl-pds\">'</span></span>]) <span class=\"pl-k\">as</span> sess:\n            <span class=\"pl-c1\">print</span> sess.run(op)\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    main(sys.argv)</pre></div>\n<pre><code>mckelvin@mesos1 ~ $ cat ./run.sh\n#!/bin/sh\ndocker run \\\n    -e MESOS_MASTER=mesos1 \\\n    -e DOCKER_IMAGE=tfmesos/tfmesos:latest \\\n    --net=host \\\n    -v /home/mckelvin/demo.py:/tmp/demo.py \\\n    --rm \\\n    -it \\\n    tfmesos/tfmesos:latest \\\n    python /tmp/demo.py mesos1\n</code></pre>\n<pre><code>mckelvin@mesos1 ~ $ ./run.sh\n2016-04-18 09:59:22,804 [INFO] [tfmesos.scheduler] Tensorflow cluster registered. ( http://mesos1:5050/#/frameworks/8beedc27-4bea-4f33-85b9-b440697419bd-0293 )\n2016-04-18 09:59:26,142 [INFO] [tfmesos.scheduler] Device /job:ps/task:0 activated @ grpc://mesos1:52382\n2016-04-18 09:59:26,150 [INFO] [tfmesos.scheduler] Device /job:ps/task:1 activated @ grpc://mesos1:44664\n2016-04-18 09:59:26,158 [INFO] [tfmesos.scheduler] Device /job:worker/task:0 activated @ grpc://mesos1:32984\n2016-04-18 09:59:26,166 [INFO] [tfmesos.scheduler] Device /job:worker/task:1 activated @ grpc://mesos1:32032\n42\n2016-04-18 09:59:26,190 [DEBUG] [tfmesos.scheduler] exit\n</code></pre>", "body_text": "@bhack You got it! I've pushed the initial code to https://github.com/douban/tfmesos as well as https://hub.docker.com/r/tfmesos/tfmesos/ (@windreamer is the main developer of tfmesos).\nIf you have mesos+docker installed, you can run the demo now. Before you start, you should pull tfmesos docker images on mesos server and slaves, via: docker pull tfmesos/tfmesos .\nNotice: There're still some unsolved issues in tfmesos and it's not production ready. For example, the tfmesos container is running in root mode, which is dangerous. We're still working on it. Feel free to PR / issue if you have any idea/suggestion.\n# coding: utf-8\n# ~/demo.py\n\nimport sys\nimport tensorflow as tf\nfrom tfmesos import cluster\n\n\ndef main(argv):\n    jobs_def = [\n        {\n            \"name\": \"ps\",\n            \"num\": 2\n        },\n        {\n            \"name\": \"worker\",\n            \"num\": 2\n        },\n    ]\n    mesos_master = sys.argv[1]\n    with cluster(jobs_def, master=mesos_master, quiet=False) as targets:\n        with tf.device('/job:ps/task:0'):\n            a = tf.constant(10)\n\n        with tf.device('/job:ps/task:1'):\n            b = tf.constant(32)\n\n        with tf.device(\"/job:worker/task:1\"):\n            op = a + b\n\n        with tf.Session(targets['/job:worker/task:0']) as sess:\n            print sess.run(op)\n\n\nif __name__ == '__main__':\n    main(sys.argv)\nmckelvin@mesos1 ~ $ cat ./run.sh\n#!/bin/sh\ndocker run \\\n    -e MESOS_MASTER=mesos1 \\\n    -e DOCKER_IMAGE=tfmesos/tfmesos:latest \\\n    --net=host \\\n    -v /home/mckelvin/demo.py:/tmp/demo.py \\\n    --rm \\\n    -it \\\n    tfmesos/tfmesos:latest \\\n    python /tmp/demo.py mesos1\n\nmckelvin@mesos1 ~ $ ./run.sh\n2016-04-18 09:59:22,804 [INFO] [tfmesos.scheduler] Tensorflow cluster registered. ( http://mesos1:5050/#/frameworks/8beedc27-4bea-4f33-85b9-b440697419bd-0293 )\n2016-04-18 09:59:26,142 [INFO] [tfmesos.scheduler] Device /job:ps/task:0 activated @ grpc://mesos1:52382\n2016-04-18 09:59:26,150 [INFO] [tfmesos.scheduler] Device /job:ps/task:1 activated @ grpc://mesos1:44664\n2016-04-18 09:59:26,158 [INFO] [tfmesos.scheduler] Device /job:worker/task:0 activated @ grpc://mesos1:32984\n2016-04-18 09:59:26,166 [INFO] [tfmesos.scheduler] Device /job:worker/task:1 activated @ grpc://mesos1:32032\n42\n2016-04-18 09:59:26,190 [DEBUG] [tfmesos.scheduler] exit", "body": "@bhack You got it! I've pushed the initial code to https://github.com/douban/tfmesos as well as https://hub.docker.com/r/tfmesos/tfmesos/ (@windreamer is the main developer of tfmesos).\n\nIf you have [mesos+docker](http://mesos.apache.org/documentation/latest/docker-containerizer/) installed, you can run the demo now. Before you start, you should pull tfmesos docker images on mesos server and slaves, via: `docker pull tfmesos/tfmesos` .\n\n**Notice:** There're still some unsolved issues in tfmesos and it's not production ready. For example, the tfmesos container is running in `root` mode, which is dangerous. We're still working on it. Feel free to PR / issue if you have any idea/suggestion.\n\n``` python\n# coding: utf-8\n# ~/demo.py\n\nimport sys\nimport tensorflow as tf\nfrom tfmesos import cluster\n\n\ndef main(argv):\n    jobs_def = [\n        {\n            \"name\": \"ps\",\n            \"num\": 2\n        },\n        {\n            \"name\": \"worker\",\n            \"num\": 2\n        },\n    ]\n    mesos_master = sys.argv[1]\n    with cluster(jobs_def, master=mesos_master, quiet=False) as targets:\n        with tf.device('/job:ps/task:0'):\n            a = tf.constant(10)\n\n        with tf.device('/job:ps/task:1'):\n            b = tf.constant(32)\n\n        with tf.device(\"/job:worker/task:1\"):\n            op = a + b\n\n        with tf.Session(targets['/job:worker/task:0']) as sess:\n            print sess.run(op)\n\n\nif __name__ == '__main__':\n    main(sys.argv)\n```\n\n```\nmckelvin@mesos1 ~ $ cat ./run.sh\n#!/bin/sh\ndocker run \\\n    -e MESOS_MASTER=mesos1 \\\n    -e DOCKER_IMAGE=tfmesos/tfmesos:latest \\\n    --net=host \\\n    -v /home/mckelvin/demo.py:/tmp/demo.py \\\n    --rm \\\n    -it \\\n    tfmesos/tfmesos:latest \\\n    python /tmp/demo.py mesos1\n```\n\n```\nmckelvin@mesos1 ~ $ ./run.sh\n2016-04-18 09:59:22,804 [INFO] [tfmesos.scheduler] Tensorflow cluster registered. ( http://mesos1:5050/#/frameworks/8beedc27-4bea-4f33-85b9-b440697419bd-0293 )\n2016-04-18 09:59:26,142 [INFO] [tfmesos.scheduler] Device /job:ps/task:0 activated @ grpc://mesos1:52382\n2016-04-18 09:59:26,150 [INFO] [tfmesos.scheduler] Device /job:ps/task:1 activated @ grpc://mesos1:44664\n2016-04-18 09:59:26,158 [INFO] [tfmesos.scheduler] Device /job:worker/task:0 activated @ grpc://mesos1:32984\n2016-04-18 09:59:26,166 [INFO] [tfmesos.scheduler] Device /job:worker/task:1 activated @ grpc://mesos1:32032\n42\n2016-04-18 09:59:26,190 [DEBUG] [tfmesos.scheduler] exit\n```\n"}