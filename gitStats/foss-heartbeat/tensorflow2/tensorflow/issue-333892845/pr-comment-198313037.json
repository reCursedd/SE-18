{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/198313037", "pull_request_review_id": 132223310, "id": 198313037, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODMxMzAzNw==", "diff_hunk": "@@ -130,3 +132,55 @@ Java_org_tensorflow_Graph_toGraphDef(JNIEnv* env, jclass clazz, jlong handle) {\n   TF_DeleteBuffer(buf);\n   return ret;\n }\n+\n+JNIEXPORT jlongArray JNICALL\n+Java_org_tensorflow_Graph_addGradients(JNIEnv* env, jclass clazz, jlong handle,\n+    jlongArray y_handles, jintArray y_indices,\n+    jlongArray x_handles, jintArray x_indices,\n+    jlongArray dx_handles, jintArray dx_indices) {\n+\n+  TF_Graph* g = requireHandle(env, handle);\n+  if (g == nullptr) return nullptr;\n+\n+  const jint ny = env->GetArrayLength(y_handles);\n+  const jint nx = env->GetArrayLength(x_handles);\n+\n+  std::unique_ptr<TF_Output[]> y(new TF_Output[ny]);\n+  std::unique_ptr<TF_Output[]> x(new TF_Output[nx]);\n+  std::unique_ptr<TF_Output[]> dx(nullptr);\n+  std::unique_ptr<TF_Output[]> dy(new TF_Output[nx]);\n+\n+  resolveOutputs(env, \"y\", y_handles, y_indices, y.get(), ny);\n+  resolveOutputs(env, \"x\", x_handles, x_indices, x.get(), nx);\n+  if (dx_handles != nullptr) {\n+    if (env->GetArrayLength(dx_handles) != ny) {\n+      throwException(env, kIllegalArgumentException,\n+                     \"expected %d, got %d dx handles\", ny,\n+                     env->GetArrayLength(dx_handles));\n+    }\n+    dx.reset(new TF_Output[ny]);\n+    resolveOutputs(env, \"dx\", dx_handles, dx_indices, dx.get(), ny);\n+  }\n+  if (env->ExceptionCheck()) return nullptr;\n+\n+  TF_Status* status = TF_NewStatus();\n+  TF_AddGradients(g, y.get(), ny, x.get(), nx, dx.get(), status, dy.get());\n+\n+  if (!throwExceptionIfNotOK(env, status)) {\n+    TF_DeleteStatus(status);\n+    return nullptr;\n+  }\n+  TF_DeleteStatus(status);\n+\n+  // returned array contains both op handles and output indices, in pair\n+  jlongArray dy_handles_and_indices = env->NewLongArray(nx << 1);\n+  jlong* dy_elems = env->GetLongArrayElements(dy_handles_and_indices, nullptr);\n+  for (int i = 0, j = nx; i < nx; ++i, ++j) {", "path": "tensorflow/java/src/main/native/graph_jni.cc", "position": 57, "original_position": 57, "commit_id": "b7baff70bbdc2c785bda47c9eb06584ae46fd3b3", "original_commit_id": "4584d0fb9dd18af7a55d16f61dcecab1d1430b92", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "body": "Ironically, I was using the format you proposed in my previous commit. I switched to the new one lately because:\r\n- that could be the new 'standard' for returning more than one value in a JNI binding, e.g. if we had 4 arrays to return, each of different length, the previous format won't work while the second will\r\n- we might find some optimization later to simply split the array in two instead of copying its elements one by one\r\n- I personally found it more elegant to iterate using two iterators at the same time :)\r\n\r\nI don't remind reverting to the previous version if you want to.", "created_at": "2018-06-26T22:08:13Z", "updated_at": "2018-06-28T03:08:41Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20133#discussion_r198313037", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20133", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/198313037"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20133#discussion_r198313037"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20133"}}, "body_html": "<p>Ironically, I was using the format you proposed in my previous commit. I switched to the new one lately because:</p>\n<ul>\n<li>that could be the new 'standard' for returning more than one value in a JNI binding, e.g. if we had 4 arrays to return, each of different length, the previous format won't work while the second will</li>\n<li>we might find some optimization later to simply split the array in two instead of copying its elements one by one</li>\n<li>I personally found it more elegant to iterate using two iterators at the same time :)</li>\n</ul>\n<p>I don't remind reverting to the previous version if you want to.</p>", "body_text": "Ironically, I was using the format you proposed in my previous commit. I switched to the new one lately because:\n\nthat could be the new 'standard' for returning more than one value in a JNI binding, e.g. if we had 4 arrays to return, each of different length, the previous format won't work while the second will\nwe might find some optimization later to simply split the array in two instead of copying its elements one by one\nI personally found it more elegant to iterate using two iterators at the same time :)\n\nI don't remind reverting to the previous version if you want to.", "in_reply_to_id": 197993889}