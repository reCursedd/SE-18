{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/361704988", "html_url": "https://github.com/tensorflow/tensorflow/pull/16306#issuecomment-361704988", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16306", "id": 361704988, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTcwNDk4OA==", "user": {"login": "benoitsteiner", "id": 6969686, "node_id": "MDQ6VXNlcjY5Njk2ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6969686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benoitsteiner", "html_url": "https://github.com/benoitsteiner", "followers_url": "https://api.github.com/users/benoitsteiner/followers", "following_url": "https://api.github.com/users/benoitsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/benoitsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/benoitsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benoitsteiner/subscriptions", "organizations_url": "https://api.github.com/users/benoitsteiner/orgs", "repos_url": "https://api.github.com/users/benoitsteiner/repos", "events_url": "https://api.github.com/users/benoitsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/benoitsteiner/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-30T19:23:06Z", "updated_at": "2018-01-30T19:23:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=407784\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yangjunpro\">@yangjunpro</a>: Here is where we are with respect to loop optimizations:</p>\n<ul>\n<li>We have completed the work on shape inference for loops. Since most of the optimizations we do depend on shape information, this allowed us to optimize the body and fanout of loops using existing  optimizers.</li>\n<li>We implemented utilities that are helpful when optimizing loops (frame identification, ...)</li>\n<li>We barely started to work on loop invariant code motion. Since you're miles ahead of us here, it will be much more productive to leverage your code.</li>\n<li>We are thinking about optimizing the 0 iteration case by removing the loop body, enter, exit, merge, switch, and next iteration nodes. We haven't found this to be a common pattern though, so we haven't started  to work on this.</li>\n<li>Ultimately, we'd like to infer the iteration count when it is static, or an upper bound otherwise. This will enable us to detect and optimize the 1 iteration case by removing all the loop logic. This will also enable us to apply the memory optimizations we're working on to loops. We haven't started work on this either though.</li>\n<li>We're also thinking about experimenting with partial loop unrolling. We aren't planning to work on this until we can analyze the loop iteration counter though.</li>\n</ul>\n<p>Let us know if any of this is also on your radar, or if you have other optimizations in mind, and we'd be happy to align our efforts with yours. This will avoid further duplication of effort.</p>", "body_text": "@yangjunpro: Here is where we are with respect to loop optimizations:\n\nWe have completed the work on shape inference for loops. Since most of the optimizations we do depend on shape information, this allowed us to optimize the body and fanout of loops using existing  optimizers.\nWe implemented utilities that are helpful when optimizing loops (frame identification, ...)\nWe barely started to work on loop invariant code motion. Since you're miles ahead of us here, it will be much more productive to leverage your code.\nWe are thinking about optimizing the 0 iteration case by removing the loop body, enter, exit, merge, switch, and next iteration nodes. We haven't found this to be a common pattern though, so we haven't started  to work on this.\nUltimately, we'd like to infer the iteration count when it is static, or an upper bound otherwise. This will enable us to detect and optimize the 1 iteration case by removing all the loop logic. This will also enable us to apply the memory optimizations we're working on to loops. We haven't started work on this either though.\nWe're also thinking about experimenting with partial loop unrolling. We aren't planning to work on this until we can analyze the loop iteration counter though.\n\nLet us know if any of this is also on your radar, or if you have other optimizations in mind, and we'd be happy to align our efforts with yours. This will avoid further duplication of effort.", "body": "@yangjunpro: Here is where we are with respect to loop optimizations:\r\n * We have completed the work on shape inference for loops. Since most of the optimizations we do depend on shape information, this allowed us to optimize the body and fanout of loops using existing  optimizers.\r\n * We implemented utilities that are helpful when optimizing loops (frame identification, ...)\r\n * We barely started to work on loop invariant code motion. Since you're miles ahead of us here, it will be much more productive to leverage your code.\r\n * We are thinking about optimizing the 0 iteration case by removing the loop body, enter, exit, merge, switch, and next iteration nodes. We haven't found this to be a common pattern though, so we haven't started  to work on this.\r\n * Ultimately, we'd like to infer the iteration count when it is static, or an upper bound otherwise. This will enable us to detect and optimize the 1 iteration case by removing all the loop logic. This will also enable us to apply the memory optimizations we're working on to loops. We haven't started work on this either though.\r\n * We're also thinking about experimenting with partial loop unrolling. We aren't planning to work on this until we can analyze the loop iteration counter though.\r\n\r\nLet us know if any of this is also on your radar, or if you have other optimizations in mind, and we'd be happy to align our efforts with yours. This will avoid further duplication of effort.\r\n"}