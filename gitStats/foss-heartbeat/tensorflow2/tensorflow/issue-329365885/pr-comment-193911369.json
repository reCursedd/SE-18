{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/193911369", "pull_request_review_id": 126983660, "id": 193911369, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MzkxMTM2OQ==", "diff_hunk": "@@ -211,5 +217,76 @@ TEST_F(TupleSimplifierTest, IncompatibleTuples) {\n   EXPECT_THAT(computation->root_instruction(), tuple);\n }\n \n+TEST_F(TupleSimplifierTest, CanExcludeEntryComputation) {\n+  //  Verify that the root computation can be excluded\n+  auto module = CreateNewModule();\n+\n+  HloInstruction* p0;\n+  HloInstruction* p1;\n+  HloComputation* c0;\n+  HloComputation* c1;\n+  HloComputation* entry;\n+\n+  {\n+    HloComputation::Builder builder(TestName() + \"_1\");\n+    p0 = builder.AddInstruction(\n+        HloInstruction::CreateParameter(0, tuple_shape_, \"param\"));\n+    HloInstruction* gte0 = builder.AddInstruction(\n+        HloInstruction::CreateGetTupleElement(scalar_shape_, p0, 0));\n+    HloInstruction* gte1 = builder.AddInstruction(\n+        HloInstruction::CreateGetTupleElement(scalar_shape_, p0, 1));\n+    HloInstruction* gte2 = builder.AddInstruction(\n+        HloInstruction::CreateGetTupleElement(scalar_shape_, p0, 2));\n+\n+    builder.AddInstruction(HloInstruction::CreateTuple({gte0, gte1, gte2}));\n+\n+    c0 = module->AddEmbeddedComputation(builder.Build());\n+  }\n+  {\n+    HloComputation::Builder builder(TestName() + \"_2\");\n+    p1 = builder.AddInstruction(\n+        HloInstruction::CreateParameter(0, tuple_shape_, \"param\"));\n+    HloInstruction* gte0 = builder.AddInstruction(\n+        HloInstruction::CreateGetTupleElement(scalar_shape_, p1, 0));\n+    HloInstruction* gte1 = builder.AddInstruction(\n+        HloInstruction::CreateGetTupleElement(scalar_shape_, p1, 1));\n+    HloInstruction* gte2 = builder.AddInstruction(\n+        HloInstruction::CreateGetTupleElement(scalar_shape_, p1, 2));\n+\n+    builder.AddInstruction(HloInstruction::CreateTuple({gte0, gte1, gte2}));\n+\n+    c1 = module->AddEmbeddedComputation(builder.Build());\n+  }\n+  {\n+    HloComputation::Builder builder(TestName() + \"_Entry\");\n+    HloInstruction* tuple_param = builder.AddInstruction(\n+        HloInstruction::CreateParameter(0, tuple_shape_, \"param\"));\n+    HloInstruction* call0 = builder.AddInstruction(\n+        HloInstruction::CreateCall(tuple_shape_, {tuple_param}, c0));\n+    HloInstruction* call1 = builder.AddInstruction(\n+        HloInstruction::CreateCall(tuple_shape_, {tuple_param}, c1));\n+    HloInstruction* gte0 = builder.AddInstruction(\n+        HloInstruction::CreateGetTupleElement(scalar_shape_, call0, 0));\n+    HloInstruction* gte1 = builder.AddInstruction(\n+        HloInstruction::CreateGetTupleElement(scalar_shape_, call1, 1));\n+    HloInstruction* tuple0 =\n+        builder.AddInstruction(HloInstruction::CreateTuple({gte0, gte1}));\n+    HloInstruction* gte2 = builder.AddInstruction(\n+        HloInstruction::CreateGetTupleElement(scalar_shape_, tuple0, 0));\n+    HloInstruction* gte3 = builder.AddInstruction(\n+        HloInstruction::CreateGetTupleElement(scalar_shape_, tuple0, 1));\n+\n+    builder.AddInstruction(HloInstruction::CreateTuple({gte2, gte3}));\n+\n+    entry = module->AddEntryComputation(builder.Build());\n+  }\n+\n+  Run(module.get(), /*change_expected=*/true, /*exclude_entry=*/ true);", "path": "tensorflow/compiler/xla/service/tuple_simplifier_test.cc", "position": 81, "original_position": 81, "commit_id": "76b5f2093f53d30e1a623309891c1e38f9ea8d9a", "original_commit_id": "76b5f2093f53d30e1a623309891c1e38f9ea8d9a", "user": {"login": "jlebar", "id": 150663, "node_id": "MDQ6VXNlcjE1MDY2Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/150663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlebar", "html_url": "https://github.com/jlebar", "followers_url": "https://api.github.com/users/jlebar/followers", "following_url": "https://api.github.com/users/jlebar/following{/other_user}", "gists_url": "https://api.github.com/users/jlebar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlebar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlebar/subscriptions", "organizations_url": "https://api.github.com/users/jlebar/orgs", "repos_url": "https://api.github.com/users/jlebar/repos", "events_url": "https://api.github.com/users/jlebar/events{/privacy}", "received_events_url": "https://api.github.com/users/jlebar/received_events", "type": "User", "site_admin": false}, "body": "Our style is no space between end of the comment and `true`.\r\n\r\n(Sorry...  :-/  I believe clang-format will catch this, and it looks like we have open-sourced a `.clang-format` file for XLA.  If you use clang-format it's very important to configure it only to format the lines you actually changed.  Otherwise you'll have tons of spurious whitespace changes to the file -- its format is not stable.  The git-clang-format script in LLVM is one way to do this.  https://github.com/llvm-mirror/clang/blob/master/tools/clang-format/git-clang-format)", "created_at": "2018-06-07T22:52:44Z", "updated_at": "2018-06-07T22:53:28Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/19769#discussion_r193911369", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19769", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/193911369"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/19769#discussion_r193911369"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19769"}}, "body_html": "<p>Our style is no space between end of the comment and <code>true</code>.</p>\n<p>(Sorry...  :-/  I believe clang-format will catch this, and it looks like we have open-sourced a <code>.clang-format</code> file for XLA.  If you use clang-format it's very important to configure it only to format the lines you actually changed.  Otherwise you'll have tons of spurious whitespace changes to the file -- its format is not stable.  The git-clang-format script in LLVM is one way to do this.  <a href=\"https://github.com/llvm-mirror/clang/blob/master/tools/clang-format/git-clang-format\">https://github.com/llvm-mirror/clang/blob/master/tools/clang-format/git-clang-format</a>)</p>", "body_text": "Our style is no space between end of the comment and true.\n(Sorry...  :-/  I believe clang-format will catch this, and it looks like we have open-sourced a .clang-format file for XLA.  If you use clang-format it's very important to configure it only to format the lines you actually changed.  Otherwise you'll have tons of spurious whitespace changes to the file -- its format is not stable.  The git-clang-format script in LLVM is one way to do this.  https://github.com/llvm-mirror/clang/blob/master/tools/clang-format/git-clang-format)"}