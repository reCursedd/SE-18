{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/85968371", "pull_request_review_id": 6649877, "id": 85968371, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1OTY4Mzcx", "diff_hunk": "@@ -0,0 +1,111 @@\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+\"\"\"Seq2seq layer operations for use in neural networks.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from tensorflow.python.ops import tensor_array_ops\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import variable_scope as vs\n+from tensorflow.python.ops import math_ops\n+from tensorflow.python.ops import control_flow_ops\n+from tensorflow.python.ops import rnn\n+\n+from tensorflow.contrib import layers\n+\n+__all__ = [\"rnn_decoder\"]\n+\n+def rnn_decoder(cell, decoder_fn, inputs=None,\n+                    sequence_lengths=None,\n+                    parallel_iterations=None,\n+                    swap_memory=False, time_major=False, scope=None):\n+  if inputs is not None:\n+    # Testing input dimensions\n+    if inputs.get_shape().ndims is not None and inputs.get_shape().ndims < 3:\n+      raise ValueError(\"Inputs must have at least three dimensions\")\n+    if inputs.get_shape()[-1] is None:\n+      raise ValueError(\"Inputs must not be `None` in the feature (3'rd) \"\n+                       \"dimension\")\n+    # Setup of RNN (dimensions, sizes, length, initial state, dtype)\n+    if not time_major:\n+      # [batch, seq, features] -> [seq, batch, features]\n+      inputs = array_ops.transpose(inputs, perm=[1, 0, 2])\n+\n+    dtype = inputs.dtype\n+    # Get data input information\n+    input_depth = int(inputs.get_shape()[2])\n+    max_time = array_ops.shape(inputs)[0]\n+    # Setup decoder inputs as TensorArray\n+    inputs_ta = tensor_array_ops.TensorArray(dtype, size=0, dynamic_size=True)\n+    inputs_ta = inputs_ta.unpack(inputs)\n+\n+  def loop_fn(time, cell_output, cell_state, loop_state):\n+    if cell_state == None: # first call, before while loop (in raw_rnn)\n+      assert cell_output is None\n+      assert loop_state is None \n+      context_state = None\n+    else: # subsequent calls, inside while loop, after cell excution \n+      if isinstance(loop_state, tuple):\n+        (done, context_state) = loop_state\n+      else:\n+        done = loop_state\n+        context_state = None\n+\n+    # call decoder function\n+    if inputs is not None: # training\n+      # get next_cell_input\n+      if cell_state == None:\n+        next_cell_input = inputs_ta.read(0)\n+      else:\n+        batch_size = array_ops.shape(done)[0]\n+        next_cell_input = control_flow_ops.cond(\n+            math_ops.equal(time, max_time),\n+            lambda: array_ops.zeros([batch_size, input_depth], dtype=dtype),\n+            lambda: inputs_ta.read(time))\n+      (next_done, next_cell_state, _, emit_output, next_context_state) = (\n+        decoder_fn(time, cell_state, cell_output, context_state))\n+    else: # inference\n+      # next_cell_input is obtained through decoder_fn\n+      (next_done, next_cell_state, next_cell_input, emit_output, next_context_state) = (\n+            decoder_fn(time, cell_state, cell_output, context_state))\n+\n+    # check if we are done\n+    if next_done is None: # training\n+      next_done = time >= sequence_lengths\n+\n+    # build next_loop_state\n+    if next_context_state is None:\n+      next_loop_state = next_done\n+    else:\n+      next_loop_state = (next_done, next_context_state)\n+\n+    return (next_done, next_cell_input, next_cell_state,\n+            emit_output, next_loop_state)\n+\n+  # Run raw_rnn function\n+  outputs_ta, state, _ = (\n+      rnn.raw_rnn(cell, loop_fn,", "path": "tensorflow/contrib/seq2seq/python/ops/seq2seq.py", "position": null, "original_position": 103, "commit_id": "cf9f5d32c2d618e7dd98fe222b92aec1a3cf9dd4", "original_commit_id": "ff3c9cbb2cf847499c32ca5633af3f7c16f26f63", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "bring this up to the previous line.\n", "created_at": "2016-11-01T16:42:35Z", "updated_at": "2016-11-30T17:47:01Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4686#discussion_r85968371", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4686", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/85968371"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4686#discussion_r85968371"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4686"}}, "body_html": "<p>bring this up to the previous line.</p>", "body_text": "bring this up to the previous line."}