{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/86899588", "pull_request_review_id": 7534556, "id": 86899588, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2ODk5NTg4", "diff_hunk": "@@ -0,0 +1,114 @@\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+\"\"\"Tests for contrib.seq2seq.python.seq2seq.layers_ops.\"\"\"\n+# pylint: disable=unused-import,g-bad-import-order\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+# pylint: enable=unused-import\n+\n+import tensorflow as tf\n+\n+\n+class Seq2SeqTest(tf.test.TestCase):\n+\n+  # test a default call of rnn_decoder\n+  def test_rnn_decoder(self):\n+    pass\n+\n+  # test default call with time_major=True\n+  def test_dynamic_rnn_decoder_time_major(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope(\"root\", initializer=tf.constant_initializer(0.5)) as varscope:\n+        # Define inputs/outputs to model\n+        batch_size = 2\n+        input_size = 3\n+        decoder_input_size = 4\n+        encoder_size = 8\n+        decoder_size = encoder_size\n+        input_sequence_length = 8\n+        decoder_sequence_length = 9\n+        output_size = 20\n+        start_of_sequence_id = end_of_sequence_id = 3\n+        decoder_embeddings = tf.get_variable('decoder_embeddings',\n+            [output_size, decoder_input_size],\n+            initializer=tf.random_normal_initializer(stddev=0.1))\n+        inputs = tf.constant(0.5, shape=[input_sequence_length, batch_size,\n+                                         input_size])\n+        decoder_inputs = tf.constant(0.4, shape=[decoder_sequence_length,\n+                                                 batch_size,\n+                                                 decoder_input_size])\n+        decoder_length = tf.constant(decoder_sequence_length, dtype=tf.int32,\n+                                     shape=[batch_size,])\n+\n+        # Define model\n+        encoder_outputs, encoder_state = tf.nn.dynamic_rnn(\n+            cell=tf.nn.rnn_cell.GRUCell(encoder_size), inputs=inputs,\n+            dtype=tf.float32, time_major=True, scope=\"rnn\")\n+        decoder_cell = tf.nn.rnn_cell.GRUCell(decoder_size)\n+        decoder_cell = tf.nn.rnn_cell.OutputProjectionWrapper(decoder_cell,", "path": "tensorflow/contrib/seq2seq/python/kernel_tests/seq2seq_test.py", "position": null, "original_position": 62, "commit_id": "cf9f5d32c2d618e7dd98fe222b92aec1a3cf9dd4", "original_commit_id": "59304d5cf967a584f7fccadc6cc68266343e79aa", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "we're trying to get rid of the output projection wrapper; so let's not use it in unit tests.\n\ni'm also confused: here you use an output projection; and in the inference one you use a separate tensor called decoder_embeddings.  when doing inference, looks like you're oging to perform a projection once and then AGAIN for decoder_embeddings.\n\nmakes more sense to just keep decoder_cell w/o this wrapper, and take the output of training and do a manual projection with decoder_embeddings.  and keep the inference_fn as is.\n", "created_at": "2016-11-08T00:17:25Z", "updated_at": "2016-11-30T17:47:01Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4686#discussion_r86899588", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4686", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/86899588"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4686#discussion_r86899588"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4686"}}, "body_html": "<p>we're trying to get rid of the output projection wrapper; so let's not use it in unit tests.</p>\n<p>i'm also confused: here you use an output projection; and in the inference one you use a separate tensor called decoder_embeddings.  when doing inference, looks like you're oging to perform a projection once and then AGAIN for decoder_embeddings.</p>\n<p>makes more sense to just keep decoder_cell w/o this wrapper, and take the output of training and do a manual projection with decoder_embeddings.  and keep the inference_fn as is.</p>", "body_text": "we're trying to get rid of the output projection wrapper; so let's not use it in unit tests.\ni'm also confused: here you use an output projection; and in the inference one you use a separate tensor called decoder_embeddings.  when doing inference, looks like you're oging to perform a projection once and then AGAIN for decoder_embeddings.\nmakes more sense to just keep decoder_cell w/o this wrapper, and take the output of training and do a manual projection with decoder_embeddings.  and keep the inference_fn as is."}