{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/259769136", "html_url": "https://github.com/tensorflow/tensorflow/pull/4686#issuecomment-259769136", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4686", "id": 259769136, "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTc2OTEzNg==", "user": {"login": "lmthang", "id": 396613, "node_id": "MDQ6VXNlcjM5NjYxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/396613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lmthang", "html_url": "https://github.com/lmthang", "followers_url": "https://api.github.com/users/lmthang/followers", "following_url": "https://api.github.com/users/lmthang/following{/other_user}", "gists_url": "https://api.github.com/users/lmthang/gists{/gist_id}", "starred_url": "https://api.github.com/users/lmthang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lmthang/subscriptions", "organizations_url": "https://api.github.com/users/lmthang/orgs", "repos_url": "https://api.github.com/users/lmthang/repos", "events_url": "https://api.github.com/users/lmthang/events{/privacy}", "received_events_url": "https://api.github.com/users/lmthang/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-10T18:31:40Z", "updated_at": "2016-11-10T18:32:52Z", "author_association": "NONE", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=12167999\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alrojo\">@alrojo</a>,</p>\n<p>To elaborate <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a>'s point, here's a concrete piece of code that works:</p>\n<div class=\"highlight highlight-source-python\"><pre>logits <span class=\"pl-k\">=</span> layers.linear(cell_output, num_decoder_symbols, <span class=\"pl-v\">scope</span><span class=\"pl-k\">=</span>scope)\nnext_input_id <span class=\"pl-k\">=</span> math_ops.cast(math_ops.argmax(logits, <span class=\"pl-c1\">1</span>), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype)</pre></div>\n<p>to replace the following line in <code>simple_decoder_fn_inference</code>:</p>\n<div class=\"highlight highlight-source-python\"><pre>next_input_id <span class=\"pl-k\">=</span> math_ops.cast(math_ops.argmax(cell_output, <span class=\"pl-c1\">1</span>), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype)</pre></div>\n<p>Note that <code>layers</code> is from contrib.layers.python.layers.</p>", "body_text": "Hi @alrojo,\nTo elaborate @ebrevdo's point, here's a concrete piece of code that works:\nlogits = layers.linear(cell_output, num_decoder_symbols, scope=scope)\nnext_input_id = math_ops.cast(math_ops.argmax(logits, 1), dtype=dtype)\nto replace the following line in simple_decoder_fn_inference:\nnext_input_id = math_ops.cast(math_ops.argmax(cell_output, 1), dtype=dtype)\nNote that layers is from contrib.layers.python.layers.", "body": "Hi @alrojo,\n\nTo elaborate @ebrevdo's point, here's a concrete piece of code that works:\n\n``` python\nlogits = layers.linear(cell_output, num_decoder_symbols, scope=scope)\nnext_input_id = math_ops.cast(math_ops.argmax(logits, 1), dtype=dtype)\n```\n\nto replace the following line in `simple_decoder_fn_inference`:\n\n``` python\nnext_input_id = math_ops.cast(math_ops.argmax(cell_output, 1), dtype=dtype)\n```\n\nNote that `layers` is from contrib.layers.python.layers.\n"}