{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/81366650", "pull_request_review_id": 2352239, "id": 81366650, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgxMzY2NjUw", "diff_hunk": "@@ -1127,3 +1130,171 @@ def model_with_buckets(encoder_inputs, decoder_inputs, targets, weights,\n               softmax_loss_function=softmax_loss_function))\n \n   return outputs, losses\n+\n+\n+\"\"\"Used to project encoder state in `dynamic_rnn_decoder`\"\"\"\n+encoder_projection = partial(fully_connected, activation_fn=math_ops.tanh)\n+\n+\n+def dynamic_rnn_decoder(cell, decoder_inputs, initial_state,", "path": "tensorflow/python/ops/seq2seq.py", "position": null, "original_position": 27, "commit_id": "cf9f5d32c2d618e7dd98fe222b92aec1a3cf9dd4", "original_commit_id": "4485171154ac71349e1820263e47d755ec3322a2", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "in general we never build the training & eval subgraphs into the same graph.  i dont think we want to start supporting that here.  i'm worried about the API here, mainly because it's fairly monolithic and implements a specific format of seq2seq training.\n\non top of that, specific algorithms (even seq2seq ones) that are coming from the open source community into contrib need to be vetted as implementing a very major/popular NN architecture.  because someone internal will have to become a maintainer of that code.  so not only should this method be broken up, you'll need to provide justification that these are, indeed, very popular architectures by providing links to the url/article you're implementing, and it probably needs to be sufficiently well cited.\n", "created_at": "2016-09-30T15:56:53Z", "updated_at": "2016-11-30T17:47:01Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4686#discussion_r81366650", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4686", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/81366650"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4686#discussion_r81366650"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4686"}}, "body_html": "<p>in general we never build the training &amp; eval subgraphs into the same graph.  i dont think we want to start supporting that here.  i'm worried about the API here, mainly because it's fairly monolithic and implements a specific format of seq2seq training.</p>\n<p>on top of that, specific algorithms (even seq2seq ones) that are coming from the open source community into contrib need to be vetted as implementing a very major/popular NN architecture.  because someone internal will have to become a maintainer of that code.  so not only should this method be broken up, you'll need to provide justification that these are, indeed, very popular architectures by providing links to the url/article you're implementing, and it probably needs to be sufficiently well cited.</p>", "body_text": "in general we never build the training & eval subgraphs into the same graph.  i dont think we want to start supporting that here.  i'm worried about the API here, mainly because it's fairly monolithic and implements a specific format of seq2seq training.\non top of that, specific algorithms (even seq2seq ones) that are coming from the open source community into contrib need to be vetted as implementing a very major/popular NN architecture.  because someone internal will have to become a maintainer of that code.  so not only should this method be broken up, you'll need to provide justification that these are, indeed, very popular architectures by providing links to the url/article you're implementing, and it probably needs to be sufficiently well cited."}