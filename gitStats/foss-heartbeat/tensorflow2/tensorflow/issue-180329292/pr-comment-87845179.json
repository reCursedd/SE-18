{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/87845179", "pull_request_review_id": 8439824, "id": 87845179, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3ODQ1MTc5", "diff_hunk": "@@ -0,0 +1,114 @@\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+\"\"\"Tests for contrib.seq2seq.python.seq2seq.layers_ops.\"\"\"\n+# pylint: disable=unused-import,g-bad-import-order\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+# pylint: enable=unused-import\n+\n+import tensorflow as tf\n+\n+\n+class Seq2SeqTest(tf.test.TestCase):\n+\n+  # test a default call of rnn_decoder\n+  def test_rnn_decoder(self):\n+    pass\n+\n+  # test default call with time_major=True\n+  def test_dynamic_rnn_decoder_time_major(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope(\"root\", initializer=tf.constant_initializer(0.5)) as varscope:\n+        # Define inputs/outputs to model\n+        batch_size = 2\n+        input_size = 3\n+        decoder_input_size = 4\n+        encoder_size = 8\n+        decoder_size = encoder_size\n+        input_sequence_length = 8\n+        decoder_sequence_length = 9\n+        output_size = 20\n+        start_of_sequence_id = end_of_sequence_id = 3\n+        decoder_embeddings = tf.get_variable('decoder_embeddings',\n+            [output_size, decoder_input_size],\n+            initializer=tf.random_normal_initializer(stddev=0.1))\n+        inputs = tf.constant(0.5, shape=[input_sequence_length, batch_size,\n+                                         input_size])\n+        decoder_inputs = tf.constant(0.4, shape=[decoder_sequence_length,\n+                                                 batch_size,\n+                                                 decoder_input_size])\n+        decoder_length = tf.constant(decoder_sequence_length, dtype=tf.int32,\n+                                     shape=[batch_size,])\n+\n+        # Define model\n+        encoder_outputs, encoder_state = tf.nn.dynamic_rnn(\n+            cell=tf.nn.rnn_cell.GRUCell(encoder_size), inputs=inputs,\n+            dtype=tf.float32, time_major=True, scope=\"rnn\")\n+        decoder_cell = tf.nn.rnn_cell.GRUCell(decoder_size)\n+        decoder_cell = tf.nn.rnn_cell.OutputProjectionWrapper(decoder_cell,\n+                                                              output_size)\n+\n+        # Train decoder\n+        decoder_fn_train = tf.contrib.seq2seq.simple_decoder_fn_train(\n+            encoder_state=encoder_state)\n+        decoder_outputs_train, decoder_state_train = (\n+          tf.contrib.seq2seq.dynamic_rnn_decoder(\n+              cell=decoder_cell,\n+              decoder_fn=decoder_fn_train,\n+              inputs=decoder_inputs,\n+              sequence_lengths=decoder_length,\n+              time_major=True))\n+\n+        # Inference decoder\n+        varscope.reuse_variables()\n+        decoder_fn_inference = tf.contrib.seq2seq.simple_decoder_fn_inference(\n+            encoder_state=encoder_state,\n+            embeddings=decoder_embeddings,\n+            start_of_sequence_id=start_of_sequence_id,\n+            end_of_sequence_id=end_of_sequence_id,\n+            maximum_length=decoder_sequence_length,\n+            dtype=tf.int32)\n+        decoder_outputs_inference, decoder_state_inference = (\n+          tf.contrib.seq2seq.dynamic_rnn_decoder(\n+              cell=decoder_cell,\n+              decoder_fn=decoder_fn_inference,\n+              time_major=True))\n+\n+        # Run model\n+        tf.initialize_all_variables().run()\n+        decoder_outputs_train_res, decoder_state_train_res = sess.run(\n+            [decoder_outputs_train, decoder_state_train])\n+        decoder_outputs_inference_res, decoder_state_inference_res = sess.run(\n+            [decoder_outputs_inference, decoder_state_inference])\n+\n+        # Assert outputs\n+        self.assertEqual((decoder_sequence_length, batch_size, output_size),\n+                         decoder_outputs_train_res.shape)\n+        self.assertEqual((batch_size, decoder_size),\n+                         decoder_outputs_inference_res.shape[0:2])\n+        self.assertEqual((batch_size, decoder_size),\n+                         decoder_state_train_res.shape)\n+        self.assertEqual((batch_size, decoder_size),\n+                         decoder_state_inference_res.shape)\n+        # The dynamic decoder might end earlier than `maximal_length`\n+        # under inference\n+        true_value = (decoder_sequence_length>=", "path": "tensorflow/contrib/seq2seq/python/kernel_tests/seq2seq_test.py", "position": null, "original_position": 109, "commit_id": "cf9f5d32c2d618e7dd98fe222b92aec1a3cf9dd4", "original_commit_id": "59304d5cf967a584f7fccadc6cc68266343e79aa", "user": {"login": "alrojo", "id": 12167999, "node_id": "MDQ6VXNlcjEyMTY3OTk5", "avatar_url": "https://avatars1.githubusercontent.com/u/12167999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alrojo", "html_url": "https://github.com/alrojo", "followers_url": "https://api.github.com/users/alrojo/followers", "following_url": "https://api.github.com/users/alrojo/following{/other_user}", "gists_url": "https://api.github.com/users/alrojo/gists{/gist_id}", "starred_url": "https://api.github.com/users/alrojo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alrojo/subscriptions", "organizations_url": "https://api.github.com/users/alrojo/orgs", "repos_url": "https://api.github.com/users/alrojo/repos", "events_url": "https://api.github.com/users/alrojo/events{/privacy}", "received_events_url": "https://api.github.com/users/alrojo/received_events", "type": "User", "site_admin": false}, "body": "@ebrevdo would you like to keep `kernel_tests` as is, or modify `dynamic_rnn_decoder` to also return the sequence_lengths in order to support value assertion? (as elaborated above)\n", "created_at": "2016-11-14T17:05:52Z", "updated_at": "2016-11-30T17:47:01Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4686#discussion_r87845179", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4686", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/87845179"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4686#discussion_r87845179"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4686"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> would you like to keep <code>kernel_tests</code> as is, or modify <code>dynamic_rnn_decoder</code> to also return the sequence_lengths in order to support value assertion? (as elaborated above)</p>", "body_text": "@ebrevdo would you like to keep kernel_tests as is, or modify dynamic_rnn_decoder to also return the sequence_lengths in order to support value assertion? (as elaborated above)", "in_reply_to_id": 86899685}