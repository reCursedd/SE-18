{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20500", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20500/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20500/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20500/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20500", "id": 337765771, "node_id": "MDU6SXNzdWUzMzc3NjU3NzE=", "number": 20500, "title": "problem while compiling as c++ lib (libtensorflow_cc.so)", "user": {"login": "aimhabo", "id": 12708080, "node_id": "MDQ6VXNlcjEyNzA4MDgw", "avatar_url": "https://avatars3.githubusercontent.com/u/12708080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aimhabo", "html_url": "https://github.com/aimhabo", "followers_url": "https://api.github.com/users/aimhabo/followers", "following_url": "https://api.github.com/users/aimhabo/following{/other_user}", "gists_url": "https://api.github.com/users/aimhabo/gists{/gist_id}", "starred_url": "https://api.github.com/users/aimhabo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aimhabo/subscriptions", "organizations_url": "https://api.github.com/users/aimhabo/orgs", "repos_url": "https://api.github.com/users/aimhabo/repos", "events_url": "https://api.github.com/users/aimhabo/events{/privacy}", "received_events_url": "https://api.github.com/users/aimhabo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cy89", "id": 29663194, "node_id": "MDQ6VXNlcjI5NjYzMTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/29663194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cy89", "html_url": "https://github.com/cy89", "followers_url": "https://api.github.com/users/cy89/followers", "following_url": "https://api.github.com/users/cy89/following{/other_user}", "gists_url": "https://api.github.com/users/cy89/gists{/gist_id}", "starred_url": "https://api.github.com/users/cy89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cy89/subscriptions", "organizations_url": "https://api.github.com/users/cy89/orgs", "repos_url": "https://api.github.com/users/cy89/repos", "events_url": "https://api.github.com/users/cy89/events{/privacy}", "received_events_url": "https://api.github.com/users/cy89/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 15, "created_at": "2018-07-03T06:48:20Z", "updated_at": "2018-10-16T13:40:25Z", "closed_at": "2018-10-16T13:40:25Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:  no</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:  Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.8</li>\n<li><strong>Python version</strong>:  2.7.12</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.14.1</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 5.4.0</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.0/7.1.2</li>\n<li><strong>GPU model and memory</strong>: GTX850M 2GB</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nsudo apt-get purge eigen* &amp;&amp; sudo apt-get install libeigen3-dev<br>\n(move eigen3 to /usr/local/ )</li>\n</ul>\n<p>git clone <a href=\"https://github.com/google/protobuf.git\">https://github.com/google/protobuf.git</a><br>\n./autogen.sh &amp;&amp; ./configure &amp;&amp; make &amp;&amp; sudo make install</p>\n<p>git clone --recurse-submodules <a href=\"https://github.com/tensorflow/tensorflow.git\">https://github.com/tensorflow/tensorflow.git</a> -b r1.8<br>\n./configure<br>\nbazel build //tensorflow:libtensorflow_cc.so<br>\n(make soft link to libs and includes)</p>\n<h3>Describe the problem</h3>\n<p>firstly, shows that lost lots of *.pb.h,<br>\nand I generate files like 'protoc --cpp_out=./  tensorflow/core/protobuf/*.proto', so on other folders.</p>\n<p>after that I got lots of error like image shows below:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/12708080/42200462-ee7205a2-7ec5-11e8-9ae6-f77cbca15e7d.png\"><img src=\"https://user-images.githubusercontent.com/12708080/42200462-ee7205a2-7ec5-11e8-9ae6-f77cbca15e7d.png\" alt=\"2018-07-03 13-34-24\" style=\"max-width:100%;\"></a></p>\n<p>after adding <code>-std=c++11</code> to <code>CFLAGS</code> in Makefile...</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/12708080/42200504-2ac3d666-7ec6-11e8-8b72-abfd1e592e7d.png\"><img src=\"https://user-images.githubusercontent.com/12708080/42200504-2ac3d666-7ec6-11e8-8b72-abfd1e592e7d.png\" alt=\"2018-07-03 13-36-55\" style=\"max-width:100%;\"></a></p>\n<p>comment the <code>template&lt;&gt;</code> line...</p>\n<p>and... now I cant understand that why highest() and lowest() can passed, but infinity() and quiet_NaN() failed. whats the difference between them in coding layer?<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/12708080/42201994-9738cc56-7ecc-11e8-881c-b4629e30a46d.png\"><img src=\"https://user-images.githubusercontent.com/12708080/42201994-9738cc56-7ecc-11e8-881c-b4629e30a46d.png\" alt=\"2018-07-03 14-22-52\" style=\"max-width:100%;\"></a></p>\n<p>comment them too...<br>\nnow it cant find c++5 files<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/12708080/42204043-24109112-7ed3-11e8-9ec0-6a1a078015a4.png\"><img src=\"https://user-images.githubusercontent.com/12708080/42204043-24109112-7ed3-11e8-9ec0-6a1a078015a4.png\" alt=\"2018-07-03 15-09-20\" style=\"max-width:100%;\"></a></p>\n<p>and here's my Makefile</p>\n<pre><code>GPU=1\nCUDNN=1\nCUDNN_HALF=0\nOPENCV=1\nAVX=0\nOPENMP=0\nLIBSO=1\nEXECT=1\n\n# set GPU=1 and CUDNN=1 to speedup on GPU\n# set CUDNN_HALF=1 to further speedup 3 x times (Mixed-precision using Tensor Cores) on GPU Tesla V100, Titan V, DGX-2\n# set AVX=1 and OPENMP=1 to speedup on CPU (if error occurs then set AVX=0)\n\nDEBUG=0\n\nARCH= -gencode arch=compute_50,code=[sm_50,compute_50]\n\nOS := $(shell uname)\n\n# Tesla V100\n# ARCH= -gencode arch=compute_70,code=[sm_70,compute_70]\n\n# GTX 1080, GTX 1070, GTX 1060, GTX 1050, GTX 1030, Titan Xp, Tesla P40, Tesla P4\n# ARCH= -gencode arch=compute_61,code=sm_61 -gencode arch=compute_61,code=compute_61\n\n# GP100/Tesla P100 \\96 DGX-1\n# ARCH= -gencode arch=compute_60,code=sm_60\n\n# For Jetson Tx1 uncomment:\n# ARCH= -gencode arch=compute_51,code=[sm_51,compute_51]\n\n# For Jetson Tx2 or Drive-PX2 uncomment:\n# ARCH= -gencode arch=compute_62,code=[sm_62,compute_62]\n\n\nVPATH=./darkSrc/ ./feature/ ./matching/ ./thirdPart/ ./thirdPart/munkres/ ./thirdPart/munkres/adapters/\nEXEC=deepsort\nOBJDIR=./obj/\n\nifeq ($(LIBSO), 1)\nLIBNAMESO=deepsort.so\nAPPNAMESO=uselib\nendif\n\nCC=gcc\nCPP=g++\nNVCC=/usr/local/cuda/bin/nvcc\nOPTS=-Ofast\nLDFLAGS= -lm -pthread\nCOMMON=\nCFLAGS=-w -std=c++11\n#-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas\n\nifeq ($(DEBUG), 1)\nOPTS= -O0 -g\nelse\nifeq ($(AVX), 1)\nCFLAGS+= -ffp-contract=fast -mavx -msse4.1 -msse4a\nendif\nendif\n\nCFLAGS+=$(OPTS)\n\nifeq ($(OPENCV), 1)\nCOMMON+= -DOPENCV\nCFLAGS+= -DOPENCV\nLDFLAGS+= `pkg-config --libs tensorflow opencv`\nCOMMON+= `pkg-config --cflags tensorflow opencv`\nendif\n\nifeq ($(OPENMP), 1)\nCFLAGS+= -fopenmp\nLDFLAGS+= -lgomp\nendif\n\nifeq ($(GPU), 1)\nCOMMON+= -DGPU -I/usr/local/cuda/include/\nCFLAGS+= -DGPU\nifeq ($(OS),Darwin) #MAC\nLDFLAGS+= -L/usr/local/cuda/lib -lcuda -lcudart -lcublas -lcurand\nelse\nLDFLAGS+= -L/usr/local/cuda/lib64 -lcuda -lcudart -lcublas -lcurand\nendif\nendif\n\nifeq ($(CUDNN), 1)\nCOMMON+= -DCUDNN\nifeq ($(OS),Darwin) #MAC\nCFLAGS+= -DCUDNN -I/usr/local/cuda/include\nLDFLAGS+= -L/usr/local/cuda/lib -lcudnn\nelse\nCFLAGS+= -DCUDNN -I/usr/local/cudnn/include\nLDFLAGS+= -L/usr/local/cudnn/lib64 -lcudnn\nendif\nendif\n\nifeq ($(CUDNN_HALF), 1)\nCOMMON+= -DCUDNN_HALF\nCFLAGS+= -DCUDNN_HALF\nARCH+= -gencode arch=compute_70,code=[sm_70,compute_70]\nendif\n\nOBJ= activation_layer.o activations.o avgpool_layer.o batchnorm_layer.o blas.o box.o col2im.o connected_layer.o convolutional_layer.o cost_layer.o crnn_layer.o crop_layer.o cuda.o data.o deconvolutional_layer.o demo.o detection_layer.o dropout_layer.o gemm.o gettimeofday.o gru_layer.o im2col.o image.o layer.o list.o local_layer.o matrix.o maxpool_layer.o network.o normalization_layer.o option_list.o parser.o region_layer.o reorg_layer.o rnn_layer.o route_layer.o shortcut_layer.o softmax_layer.o tree.o utils.o\nifeq ($(GPU), 1)\nLDFLAGS+= -lstdc++\nOBJ+= convolutional_kernels.o activation_kernels.o im2col_kernels.o col2im_kernels.o blas_kernels.o crop_layer_kernels.o dropout_layer_kernels.o maxpool_layer_kernels.o network_kernels.o avgpool_layer_kernels.o\nendif\n\nOBJS = $(addprefix $(OBJDIR), $(OBJ))\nDEPS = $(wildcard darkSrc/*.h) Makefile\n\nall: obj backup results $(EXEC) $(LIBNAMESO) $(APPNAMESO)\n\nifeq ($(LIBSO), 1)\nCFLAGS+= -fPIC\n\n$(LIBNAMESO): $(OBJS) ./errmsg.hpp ./VideoTracker.hpp ./errmsg.cpp ./VideoTracker.cpp ./feature/dataType.hpp ./feature/FeatureTensor.hpp ./feature/model.hpp ./matching/kalmanfilter.hpp ./matching/linear_assignment.hpp ./matching/nn_matching.hpp ./matching/tracker.hpp ./matching/track.hpp ./feature/FeatureTensor.cpp ./feature/model.cpp ./matching/kalmanfilter.cpp ./matching/linear_assignment.cpp ./matching/nn_matching.cpp ./matching/track.cpp ./matching/tracker.cpp ./thirdPart/hungarianoper.cpp\n\t$(CPP) -shared -std=c++11 -fvisibility=hidden -DYOLODLL_EXPORTS $(COMMON) $(CFLAGS) $(OBJS) ./errmsg.cpp ./VideoTracker.cpp ./feature/FeatureTensor.cpp ./feature/model.cpp ./matching/kalmanfilter.cpp ./matching/linear_assignment.cpp ./matching/nn_matching.cpp ./matching/track.cpp ./matching/tracker.cpp ./thirdPart/hungarianoper.cpp -o $@ $(LDFLAGS)\n\n$(APPNAMESO): $(LIBNAMESO) ./*.hpp ./*/*.hpp ./main.cpp\n\t$(CPP) -std=c++11 $(COMMON) $(CFLAGS) -o $@  ./main.cpp $(LDFLAGS) -L ./ -l:$(LIBNAMESO)\nendif\n\nifeq ($(EXECT), 1)\n$(EXEC): $(OBJS)\n\t$(CPP) $(COMMON) $(CFLAGS) $^ -o $@ $(LDFLAGS)\nendif\n\n$(OBJDIR)%.o: %.c $(DEPS)\n\t$(CC) $(COMMON) $(CFLAGS) -c $&lt; -o $@\n\n$(OBJDIR)%.o: %.cpp $(DEPS)\n\t$(CPP) $(COMMON) $(CFLAGS) -c $&lt; -o $@\n\n$(OBJDIR)%.o: %.cu $(DEPS)\n\t$(NVCC) $(ARCH) $(COMMON) --compiler-options \"$(CFLAGS)\" -c $&lt; -o $@\n\nobj:\n\tmkdir -p obj\nbackup:\n\tmkdir -p backup\nresults:\n\tmkdir -p results\n\n.PHONY: clean\n\nvalgrind:\n\tVALGRIND=\"valgrind --log-file=valgrind-%p.log\" $(MAKE)\n\nclean:\n\trm -rf $(OBJS) $(EXEC) $(LIBNAMESO) $(APPNAMESO)\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):  no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):  Ubuntu 16.04\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): 1.8\nPython version:  2.7.12\nBazel version (if compiling from source): 0.14.1\nGCC/Compiler version (if compiling from source): 5.4.0\nCUDA/cuDNN version: 9.0/7.1.2\nGPU model and memory: GTX850M 2GB\nExact command to reproduce:\nsudo apt-get purge eigen* && sudo apt-get install libeigen3-dev\n(move eigen3 to /usr/local/ )\n\ngit clone https://github.com/google/protobuf.git\n./autogen.sh && ./configure && make && sudo make install\ngit clone --recurse-submodules https://github.com/tensorflow/tensorflow.git -b r1.8\n./configure\nbazel build //tensorflow:libtensorflow_cc.so\n(make soft link to libs and includes)\nDescribe the problem\nfirstly, shows that lost lots of *.pb.h,\nand I generate files like 'protoc --cpp_out=./  tensorflow/core/protobuf/*.proto', so on other folders.\nafter that I got lots of error like image shows below:\n\nafter adding -std=c++11 to CFLAGS in Makefile...\n\ncomment the template<> line...\nand... now I cant understand that why highest() and lowest() can passed, but infinity() and quiet_NaN() failed. whats the difference between them in coding layer?\n\ncomment them too...\nnow it cant find c++5 files\n\nand here's my Makefile\nGPU=1\nCUDNN=1\nCUDNN_HALF=0\nOPENCV=1\nAVX=0\nOPENMP=0\nLIBSO=1\nEXECT=1\n\n# set GPU=1 and CUDNN=1 to speedup on GPU\n# set CUDNN_HALF=1 to further speedup 3 x times (Mixed-precision using Tensor Cores) on GPU Tesla V100, Titan V, DGX-2\n# set AVX=1 and OPENMP=1 to speedup on CPU (if error occurs then set AVX=0)\n\nDEBUG=0\n\nARCH= -gencode arch=compute_50,code=[sm_50,compute_50]\n\nOS := $(shell uname)\n\n# Tesla V100\n# ARCH= -gencode arch=compute_70,code=[sm_70,compute_70]\n\n# GTX 1080, GTX 1070, GTX 1060, GTX 1050, GTX 1030, Titan Xp, Tesla P40, Tesla P4\n# ARCH= -gencode arch=compute_61,code=sm_61 -gencode arch=compute_61,code=compute_61\n\n# GP100/Tesla P100 \\96 DGX-1\n# ARCH= -gencode arch=compute_60,code=sm_60\n\n# For Jetson Tx1 uncomment:\n# ARCH= -gencode arch=compute_51,code=[sm_51,compute_51]\n\n# For Jetson Tx2 or Drive-PX2 uncomment:\n# ARCH= -gencode arch=compute_62,code=[sm_62,compute_62]\n\n\nVPATH=./darkSrc/ ./feature/ ./matching/ ./thirdPart/ ./thirdPart/munkres/ ./thirdPart/munkres/adapters/\nEXEC=deepsort\nOBJDIR=./obj/\n\nifeq ($(LIBSO), 1)\nLIBNAMESO=deepsort.so\nAPPNAMESO=uselib\nendif\n\nCC=gcc\nCPP=g++\nNVCC=/usr/local/cuda/bin/nvcc\nOPTS=-Ofast\nLDFLAGS= -lm -pthread\nCOMMON=\nCFLAGS=-w -std=c++11\n#-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas\n\nifeq ($(DEBUG), 1)\nOPTS= -O0 -g\nelse\nifeq ($(AVX), 1)\nCFLAGS+= -ffp-contract=fast -mavx -msse4.1 -msse4a\nendif\nendif\n\nCFLAGS+=$(OPTS)\n\nifeq ($(OPENCV), 1)\nCOMMON+= -DOPENCV\nCFLAGS+= -DOPENCV\nLDFLAGS+= `pkg-config --libs tensorflow opencv`\nCOMMON+= `pkg-config --cflags tensorflow opencv`\nendif\n\nifeq ($(OPENMP), 1)\nCFLAGS+= -fopenmp\nLDFLAGS+= -lgomp\nendif\n\nifeq ($(GPU), 1)\nCOMMON+= -DGPU -I/usr/local/cuda/include/\nCFLAGS+= -DGPU\nifeq ($(OS),Darwin) #MAC\nLDFLAGS+= -L/usr/local/cuda/lib -lcuda -lcudart -lcublas -lcurand\nelse\nLDFLAGS+= -L/usr/local/cuda/lib64 -lcuda -lcudart -lcublas -lcurand\nendif\nendif\n\nifeq ($(CUDNN), 1)\nCOMMON+= -DCUDNN\nifeq ($(OS),Darwin) #MAC\nCFLAGS+= -DCUDNN -I/usr/local/cuda/include\nLDFLAGS+= -L/usr/local/cuda/lib -lcudnn\nelse\nCFLAGS+= -DCUDNN -I/usr/local/cudnn/include\nLDFLAGS+= -L/usr/local/cudnn/lib64 -lcudnn\nendif\nendif\n\nifeq ($(CUDNN_HALF), 1)\nCOMMON+= -DCUDNN_HALF\nCFLAGS+= -DCUDNN_HALF\nARCH+= -gencode arch=compute_70,code=[sm_70,compute_70]\nendif\n\nOBJ= activation_layer.o activations.o avgpool_layer.o batchnorm_layer.o blas.o box.o col2im.o connected_layer.o convolutional_layer.o cost_layer.o crnn_layer.o crop_layer.o cuda.o data.o deconvolutional_layer.o demo.o detection_layer.o dropout_layer.o gemm.o gettimeofday.o gru_layer.o im2col.o image.o layer.o list.o local_layer.o matrix.o maxpool_layer.o network.o normalization_layer.o option_list.o parser.o region_layer.o reorg_layer.o rnn_layer.o route_layer.o shortcut_layer.o softmax_layer.o tree.o utils.o\nifeq ($(GPU), 1)\nLDFLAGS+= -lstdc++\nOBJ+= convolutional_kernels.o activation_kernels.o im2col_kernels.o col2im_kernels.o blas_kernels.o crop_layer_kernels.o dropout_layer_kernels.o maxpool_layer_kernels.o network_kernels.o avgpool_layer_kernels.o\nendif\n\nOBJS = $(addprefix $(OBJDIR), $(OBJ))\nDEPS = $(wildcard darkSrc/*.h) Makefile\n\nall: obj backup results $(EXEC) $(LIBNAMESO) $(APPNAMESO)\n\nifeq ($(LIBSO), 1)\nCFLAGS+= -fPIC\n\n$(LIBNAMESO): $(OBJS) ./errmsg.hpp ./VideoTracker.hpp ./errmsg.cpp ./VideoTracker.cpp ./feature/dataType.hpp ./feature/FeatureTensor.hpp ./feature/model.hpp ./matching/kalmanfilter.hpp ./matching/linear_assignment.hpp ./matching/nn_matching.hpp ./matching/tracker.hpp ./matching/track.hpp ./feature/FeatureTensor.cpp ./feature/model.cpp ./matching/kalmanfilter.cpp ./matching/linear_assignment.cpp ./matching/nn_matching.cpp ./matching/track.cpp ./matching/tracker.cpp ./thirdPart/hungarianoper.cpp\n\t$(CPP) -shared -std=c++11 -fvisibility=hidden -DYOLODLL_EXPORTS $(COMMON) $(CFLAGS) $(OBJS) ./errmsg.cpp ./VideoTracker.cpp ./feature/FeatureTensor.cpp ./feature/model.cpp ./matching/kalmanfilter.cpp ./matching/linear_assignment.cpp ./matching/nn_matching.cpp ./matching/track.cpp ./matching/tracker.cpp ./thirdPart/hungarianoper.cpp -o $@ $(LDFLAGS)\n\n$(APPNAMESO): $(LIBNAMESO) ./*.hpp ./*/*.hpp ./main.cpp\n\t$(CPP) -std=c++11 $(COMMON) $(CFLAGS) -o $@  ./main.cpp $(LDFLAGS) -L ./ -l:$(LIBNAMESO)\nendif\n\nifeq ($(EXECT), 1)\n$(EXEC): $(OBJS)\n\t$(CPP) $(COMMON) $(CFLAGS) $^ -o $@ $(LDFLAGS)\nendif\n\n$(OBJDIR)%.o: %.c $(DEPS)\n\t$(CC) $(COMMON) $(CFLAGS) -c $< -o $@\n\n$(OBJDIR)%.o: %.cpp $(DEPS)\n\t$(CPP) $(COMMON) $(CFLAGS) -c $< -o $@\n\n$(OBJDIR)%.o: %.cu $(DEPS)\n\t$(NVCC) $(ARCH) $(COMMON) --compiler-options \"$(CFLAGS)\" -c $< -o $@\n\nobj:\n\tmkdir -p obj\nbackup:\n\tmkdir -p backup\nresults:\n\tmkdir -p results\n\n.PHONY: clean\n\nvalgrind:\n\tVALGRIND=\"valgrind --log-file=valgrind-%p.log\" $(MAKE)\n\nclean:\n\trm -rf $(OBJS) $(EXEC) $(LIBNAMESO) $(APPNAMESO)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:  no\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:  Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: 1.8\r\n- **Python version**:  2.7.12\r\n- **Bazel version (if compiling from source)**: 0.14.1\r\n- **GCC/Compiler version (if compiling from source)**: 5.4.0\r\n- **CUDA/cuDNN version**: 9.0/7.1.2\r\n- **GPU model and memory**: GTX850M 2GB\r\n- **Exact command to reproduce**:\r\nsudo apt-get purge eigen* && sudo apt-get install libeigen3-dev\r\n(move eigen3 to /usr/local/ )\r\n\r\ngit clone https://github.com/google/protobuf.git\r\n./autogen.sh && ./configure && make && sudo make install\r\n\r\ngit clone --recurse-submodules https://github.com/tensorflow/tensorflow.git -b r1.8\r\n./configure\r\nbazel build //tensorflow:libtensorflow_cc.so\r\n(make soft link to libs and includes)\r\n\r\n### Describe the problem\r\nfirstly, shows that lost lots of *.pb.h,\r\nand I generate files like 'protoc --cpp_out=./  tensorflow/core/protobuf/\\*.proto', so on other folders.\r\n\r\nafter that I got lots of error like image shows below:\r\n\r\n![2018-07-03 13-34-24](https://user-images.githubusercontent.com/12708080/42200462-ee7205a2-7ec5-11e8-9ae6-f77cbca15e7d.png)\r\n\r\nafter adding `-std=c++11` to `CFLAGS` in Makefile...\r\n\r\n![2018-07-03 13-36-55](https://user-images.githubusercontent.com/12708080/42200504-2ac3d666-7ec6-11e8-8b72-abfd1e592e7d.png)\r\n\r\ncomment the `template<>` line...\r\n\r\nand... now I cant understand that why highest() and lowest() can passed, but infinity() and quiet_NaN() failed. whats the difference between them in coding layer?\r\n![2018-07-03 14-22-52](https://user-images.githubusercontent.com/12708080/42201994-9738cc56-7ecc-11e8-881c-b4629e30a46d.png)\r\n\r\ncomment them too...\r\nnow it cant find c++5 files\r\n![2018-07-03 15-09-20](https://user-images.githubusercontent.com/12708080/42204043-24109112-7ed3-11e8-9ec0-6a1a078015a4.png)\r\n\r\n\r\nand here's my Makefile\r\n\r\n```\r\nGPU=1\r\nCUDNN=1\r\nCUDNN_HALF=0\r\nOPENCV=1\r\nAVX=0\r\nOPENMP=0\r\nLIBSO=1\r\nEXECT=1\r\n\r\n# set GPU=1 and CUDNN=1 to speedup on GPU\r\n# set CUDNN_HALF=1 to further speedup 3 x times (Mixed-precision using Tensor Cores) on GPU Tesla V100, Titan V, DGX-2\r\n# set AVX=1 and OPENMP=1 to speedup on CPU (if error occurs then set AVX=0)\r\n\r\nDEBUG=0\r\n\r\nARCH= -gencode arch=compute_50,code=[sm_50,compute_50]\r\n\r\nOS := $(shell uname)\r\n\r\n# Tesla V100\r\n# ARCH= -gencode arch=compute_70,code=[sm_70,compute_70]\r\n\r\n# GTX 1080, GTX 1070, GTX 1060, GTX 1050, GTX 1030, Titan Xp, Tesla P40, Tesla P4\r\n# ARCH= -gencode arch=compute_61,code=sm_61 -gencode arch=compute_61,code=compute_61\r\n\r\n# GP100/Tesla P100 \\96 DGX-1\r\n# ARCH= -gencode arch=compute_60,code=sm_60\r\n\r\n# For Jetson Tx1 uncomment:\r\n# ARCH= -gencode arch=compute_51,code=[sm_51,compute_51]\r\n\r\n# For Jetson Tx2 or Drive-PX2 uncomment:\r\n# ARCH= -gencode arch=compute_62,code=[sm_62,compute_62]\r\n\r\n\r\nVPATH=./darkSrc/ ./feature/ ./matching/ ./thirdPart/ ./thirdPart/munkres/ ./thirdPart/munkres/adapters/\r\nEXEC=deepsort\r\nOBJDIR=./obj/\r\n\r\nifeq ($(LIBSO), 1)\r\nLIBNAMESO=deepsort.so\r\nAPPNAMESO=uselib\r\nendif\r\n\r\nCC=gcc\r\nCPP=g++\r\nNVCC=/usr/local/cuda/bin/nvcc\r\nOPTS=-Ofast\r\nLDFLAGS= -lm -pthread\r\nCOMMON=\r\nCFLAGS=-w -std=c++11\r\n#-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas\r\n\r\nifeq ($(DEBUG), 1)\r\nOPTS= -O0 -g\r\nelse\r\nifeq ($(AVX), 1)\r\nCFLAGS+= -ffp-contract=fast -mavx -msse4.1 -msse4a\r\nendif\r\nendif\r\n\r\nCFLAGS+=$(OPTS)\r\n\r\nifeq ($(OPENCV), 1)\r\nCOMMON+= -DOPENCV\r\nCFLAGS+= -DOPENCV\r\nLDFLAGS+= `pkg-config --libs tensorflow opencv`\r\nCOMMON+= `pkg-config --cflags tensorflow opencv`\r\nendif\r\n\r\nifeq ($(OPENMP), 1)\r\nCFLAGS+= -fopenmp\r\nLDFLAGS+= -lgomp\r\nendif\r\n\r\nifeq ($(GPU), 1)\r\nCOMMON+= -DGPU -I/usr/local/cuda/include/\r\nCFLAGS+= -DGPU\r\nifeq ($(OS),Darwin) #MAC\r\nLDFLAGS+= -L/usr/local/cuda/lib -lcuda -lcudart -lcublas -lcurand\r\nelse\r\nLDFLAGS+= -L/usr/local/cuda/lib64 -lcuda -lcudart -lcublas -lcurand\r\nendif\r\nendif\r\n\r\nifeq ($(CUDNN), 1)\r\nCOMMON+= -DCUDNN\r\nifeq ($(OS),Darwin) #MAC\r\nCFLAGS+= -DCUDNN -I/usr/local/cuda/include\r\nLDFLAGS+= -L/usr/local/cuda/lib -lcudnn\r\nelse\r\nCFLAGS+= -DCUDNN -I/usr/local/cudnn/include\r\nLDFLAGS+= -L/usr/local/cudnn/lib64 -lcudnn\r\nendif\r\nendif\r\n\r\nifeq ($(CUDNN_HALF), 1)\r\nCOMMON+= -DCUDNN_HALF\r\nCFLAGS+= -DCUDNN_HALF\r\nARCH+= -gencode arch=compute_70,code=[sm_70,compute_70]\r\nendif\r\n\r\nOBJ= activation_layer.o activations.o avgpool_layer.o batchnorm_layer.o blas.o box.o col2im.o connected_layer.o convolutional_layer.o cost_layer.o crnn_layer.o crop_layer.o cuda.o data.o deconvolutional_layer.o demo.o detection_layer.o dropout_layer.o gemm.o gettimeofday.o gru_layer.o im2col.o image.o layer.o list.o local_layer.o matrix.o maxpool_layer.o network.o normalization_layer.o option_list.o parser.o region_layer.o reorg_layer.o rnn_layer.o route_layer.o shortcut_layer.o softmax_layer.o tree.o utils.o\r\nifeq ($(GPU), 1)\r\nLDFLAGS+= -lstdc++\r\nOBJ+= convolutional_kernels.o activation_kernels.o im2col_kernels.o col2im_kernels.o blas_kernels.o crop_layer_kernels.o dropout_layer_kernels.o maxpool_layer_kernels.o network_kernels.o avgpool_layer_kernels.o\r\nendif\r\n\r\nOBJS = $(addprefix $(OBJDIR), $(OBJ))\r\nDEPS = $(wildcard darkSrc/*.h) Makefile\r\n\r\nall: obj backup results $(EXEC) $(LIBNAMESO) $(APPNAMESO)\r\n\r\nifeq ($(LIBSO), 1)\r\nCFLAGS+= -fPIC\r\n\r\n$(LIBNAMESO): $(OBJS) ./errmsg.hpp ./VideoTracker.hpp ./errmsg.cpp ./VideoTracker.cpp ./feature/dataType.hpp ./feature/FeatureTensor.hpp ./feature/model.hpp ./matching/kalmanfilter.hpp ./matching/linear_assignment.hpp ./matching/nn_matching.hpp ./matching/tracker.hpp ./matching/track.hpp ./feature/FeatureTensor.cpp ./feature/model.cpp ./matching/kalmanfilter.cpp ./matching/linear_assignment.cpp ./matching/nn_matching.cpp ./matching/track.cpp ./matching/tracker.cpp ./thirdPart/hungarianoper.cpp\r\n\t$(CPP) -shared -std=c++11 -fvisibility=hidden -DYOLODLL_EXPORTS $(COMMON) $(CFLAGS) $(OBJS) ./errmsg.cpp ./VideoTracker.cpp ./feature/FeatureTensor.cpp ./feature/model.cpp ./matching/kalmanfilter.cpp ./matching/linear_assignment.cpp ./matching/nn_matching.cpp ./matching/track.cpp ./matching/tracker.cpp ./thirdPart/hungarianoper.cpp -o $@ $(LDFLAGS)\r\n\r\n$(APPNAMESO): $(LIBNAMESO) ./*.hpp ./*/*.hpp ./main.cpp\r\n\t$(CPP) -std=c++11 $(COMMON) $(CFLAGS) -o $@  ./main.cpp $(LDFLAGS) -L ./ -l:$(LIBNAMESO)\r\nendif\r\n\r\nifeq ($(EXECT), 1)\r\n$(EXEC): $(OBJS)\r\n\t$(CPP) $(COMMON) $(CFLAGS) $^ -o $@ $(LDFLAGS)\r\nendif\r\n\r\n$(OBJDIR)%.o: %.c $(DEPS)\r\n\t$(CC) $(COMMON) $(CFLAGS) -c $< -o $@\r\n\r\n$(OBJDIR)%.o: %.cpp $(DEPS)\r\n\t$(CPP) $(COMMON) $(CFLAGS) -c $< -o $@\r\n\r\n$(OBJDIR)%.o: %.cu $(DEPS)\r\n\t$(NVCC) $(ARCH) $(COMMON) --compiler-options \"$(CFLAGS)\" -c $< -o $@\r\n\r\nobj:\r\n\tmkdir -p obj\r\nbackup:\r\n\tmkdir -p backup\r\nresults:\r\n\tmkdir -p results\r\n\r\n.PHONY: clean\r\n\r\nvalgrind:\r\n\tVALGRIND=\"valgrind --log-file=valgrind-%p.log\" $(MAKE)\r\n\r\nclean:\r\n\trm -rf $(OBJS) $(EXEC) $(LIBNAMESO) $(APPNAMESO)\r\n```\r\n"}