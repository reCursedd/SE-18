{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/325133494", "html_url": "https://github.com/tensorflow/tensorflow/issues/12508#issuecomment-325133494", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12508", "id": 325133494, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTEzMzQ5NA==", "user": {"login": "mvsusp", "id": 142074, "node_id": "MDQ6VXNlcjE0MjA3NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/142074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvsusp", "html_url": "https://github.com/mvsusp", "followers_url": "https://api.github.com/users/mvsusp/followers", "following_url": "https://api.github.com/users/mvsusp/following{/other_user}", "gists_url": "https://api.github.com/users/mvsusp/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvsusp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvsusp/subscriptions", "organizations_url": "https://api.github.com/users/mvsusp/orgs", "repos_url": "https://api.github.com/users/mvsusp/repos", "events_url": "https://api.github.com/users/mvsusp/events{/privacy}", "received_events_url": "https://api.github.com/users/mvsusp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-26T14:36:14Z", "updated_at": "2017-08-26T14:36:14Z", "author_association": "NONE", "body_html": "<p>Hi, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1112263\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/facaiy\">@facaiy</a>. Here is a minimal reproducible test case:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> absolute_import\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> division\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> print_function\n\n<span class=\"pl-k\">import</span> os\n<span class=\"pl-k\">import</span> urllib\n\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Data sets</span>\n<span class=\"pl-k\">from</span> tensorflow.contrib.learn <span class=\"pl-k\">import</span> DNNClassifier\n\n<span class=\"pl-c1\">IRIS_TRAINING</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>iris_training.csv<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-c1\">IRIS_TRAINING_URL</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://download.tensorflow.org/data/iris_training.csv<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-c1\">IRIS_TEST</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>iris_test.csv<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-c1\">IRIS_TEST_URL</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>http://download.tensorflow.org/data/iris_test.csv<span class=\"pl-pds\">\"</span></span>\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>():\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> If the training and test sets aren't stored locally, download them.</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> os.path.exists(<span class=\"pl-c1\">IRIS_TRAINING</span>):\n        raw <span class=\"pl-k\">=</span> urllib.urlopen(<span class=\"pl-c1\">IRIS_TRAINING_URL</span>).read()\n        <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(<span class=\"pl-c1\">IRIS_TRAINING</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>w<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> f:\n            f.write(raw)\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> os.path.exists(<span class=\"pl-c1\">IRIS_TEST</span>):\n        raw <span class=\"pl-k\">=</span> urllib.urlopen(<span class=\"pl-c1\">IRIS_TEST_URL</span>).read()\n        <span class=\"pl-k\">with</span> <span class=\"pl-c1\">open</span>(<span class=\"pl-c1\">IRIS_TEST</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>w<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">as</span> f:\n            f.write(raw)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Load datasets.</span>\n    training_set <span class=\"pl-k\">=</span> tf.contrib.learn.datasets.base.load_csv_with_header(\n        <span class=\"pl-v\">filename</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">IRIS_TRAINING</span>,\n        <span class=\"pl-v\">target_dtype</span><span class=\"pl-k\">=</span>np.int,\n        <span class=\"pl-v\">features_dtype</span><span class=\"pl-k\">=</span>np.float32)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Specify that all features have real-value data</span>\n    feature_columns <span class=\"pl-k\">=</span> [tf.feature_column.numeric_column(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">4</span>])]\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Build 3 layer DNN with 10, 20, 10 units respectively.</span>\n    classifier <span class=\"pl-k\">=</span> DNNClassifier(<span class=\"pl-v\">feature_columns</span><span class=\"pl-k\">=</span>feature_columns,\n                               <span class=\"pl-v\">hidden_units</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">10</span>],\n                               <span class=\"pl-v\">n_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>,\n                               <span class=\"pl-v\">model_dir</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/tmp/iris_model<span class=\"pl-pds\">\"</span></span>)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Define the training inputs</span>\n    train_input_fn <span class=\"pl-k\">=</span> tf.estimator.inputs.numpy_input_fn(\n        <span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>: np.array(training_set.data)},\n        <span class=\"pl-v\">y</span><span class=\"pl-k\">=</span>np.array(training_set.target),\n        <span class=\"pl-v\">num_epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>,\n        <span class=\"pl-v\">shuffle</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Train model.</span>\n    classifier.fit(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>train_input_fn, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2000</span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">serving_input_fn</span>():\n        inputs <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>: tf.placeholder(tf.float32, [<span class=\"pl-c1\">4</span>])}\n        <span class=\"pl-k\">return</span> tf.estimator.export.ServingInputReceiver(inputs, inputs)\n\n    classifier.export_savedmodel(<span class=\"pl-v\">export_dir_base</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/tmp/iris_model<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">serving_input_fn</span><span class=\"pl-k\">=</span>serving_input_fn)\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>__main__<span class=\"pl-pds\">\"</span></span>:\n    main()</pre></div>\n<p>The error is:</p>\n<div class=\"highlight highlight-source-shell\"><pre>Traceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/reproducible_example.py<span class=\"pl-pds\">\"</span></span>, line 64, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n    <span class=\"pl-en\">main</span>()\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/reproducible_example.py<span class=\"pl-pds\">\"</span></span>, line 61, <span class=\"pl-k\">in</span> main\n    classifier.export_savedmodel(export_dir_base=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/tmp/iris_model<span class=\"pl-pds\">\"</span></span>, serving_input_fn=serving_input_fn)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/Users/mvs/python2.7/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py<span class=\"pl-pds\">\"</span></span>, line 1280, <span class=\"pl-k\">in</span> export_savedmodel\n    actual_default_output_alternative_key)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/Users/mvs/python2.7/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/utils/saved_model_export_utils.py<span class=\"pl-pds\">\"</span></span>, line 259, <span class=\"pl-k\">in</span> build_all_signature_defs\n    raise ValueError(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>A default input_alternative must be provided.<span class=\"pl-pds\">'</span></span>)\nValueError: A default input_alternative must be provided.</pre></div>", "body_text": "Hi, @facaiy. Here is a minimal reproducible test case:\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\nimport urllib\n\nimport numpy as np\nimport tensorflow as tf\n\n# Data sets\nfrom tensorflow.contrib.learn import DNNClassifier\n\nIRIS_TRAINING = \"iris_training.csv\"\nIRIS_TRAINING_URL = \"http://download.tensorflow.org/data/iris_training.csv\"\n\nIRIS_TEST = \"iris_test.csv\"\nIRIS_TEST_URL = \"http://download.tensorflow.org/data/iris_test.csv\"\n\n\ndef main():\n    # If the training and test sets aren't stored locally, download them.\n    if not os.path.exists(IRIS_TRAINING):\n        raw = urllib.urlopen(IRIS_TRAINING_URL).read()\n        with open(IRIS_TRAINING, \"w\") as f:\n            f.write(raw)\n\n    if not os.path.exists(IRIS_TEST):\n        raw = urllib.urlopen(IRIS_TEST_URL).read()\n        with open(IRIS_TEST, \"w\") as f:\n            f.write(raw)\n\n    # Load datasets.\n    training_set = tf.contrib.learn.datasets.base.load_csv_with_header(\n        filename=IRIS_TRAINING,\n        target_dtype=np.int,\n        features_dtype=np.float32)\n\n    # Specify that all features have real-value data\n    feature_columns = [tf.feature_column.numeric_column(\"x\", shape=[4])]\n\n    # Build 3 layer DNN with 10, 20, 10 units respectively.\n    classifier = DNNClassifier(feature_columns=feature_columns,\n                               hidden_units=[10, 20, 10],\n                               n_classes=3,\n                               model_dir=\"/tmp/iris_model\")\n    # Define the training inputs\n    train_input_fn = tf.estimator.inputs.numpy_input_fn(\n        x={\"x\": np.array(training_set.data)},\n        y=np.array(training_set.target),\n        num_epochs=None,\n        shuffle=True)\n\n    # Train model.\n    classifier.fit(input_fn=train_input_fn, steps=2000)\n\n    def serving_input_fn():\n        inputs = {'x': tf.placeholder(tf.float32, [4])}\n        return tf.estimator.export.ServingInputReceiver(inputs, inputs)\n\n    classifier.export_savedmodel(export_dir_base=\"/tmp/iris_model\", serving_input_fn=serving_input_fn)\n\nif __name__ == \"__main__\":\n    main()\nThe error is:\nTraceback (most recent call last):\n  File \"/reproducible_example.py\", line 64, in <module>\n    main()\n  File \"/reproducible_example.py\", line 61, in main\n    classifier.export_savedmodel(export_dir_base=\"/tmp/iris_model\", serving_input_fn=serving_input_fn)\n  File \"/Users/mvs/python2.7/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1280, in export_savedmodel\n    actual_default_output_alternative_key)\n  File \"/Users/mvs/python2.7/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/utils/saved_model_export_utils.py\", line 259, in build_all_signature_defs\n    raise ValueError('A default input_alternative must be provided.')\nValueError: A default input_alternative must be provided.", "body": "Hi, @facaiy. Here is a minimal reproducible test case:\r\n\r\n```python\r\nfrom __future__ import absolute_import\r\nfrom __future__ import division\r\nfrom __future__ import print_function\r\n\r\nimport os\r\nimport urllib\r\n\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n# Data sets\r\nfrom tensorflow.contrib.learn import DNNClassifier\r\n\r\nIRIS_TRAINING = \"iris_training.csv\"\r\nIRIS_TRAINING_URL = \"http://download.tensorflow.org/data/iris_training.csv\"\r\n\r\nIRIS_TEST = \"iris_test.csv\"\r\nIRIS_TEST_URL = \"http://download.tensorflow.org/data/iris_test.csv\"\r\n\r\n\r\ndef main():\r\n    # If the training and test sets aren't stored locally, download them.\r\n    if not os.path.exists(IRIS_TRAINING):\r\n        raw = urllib.urlopen(IRIS_TRAINING_URL).read()\r\n        with open(IRIS_TRAINING, \"w\") as f:\r\n            f.write(raw)\r\n\r\n    if not os.path.exists(IRIS_TEST):\r\n        raw = urllib.urlopen(IRIS_TEST_URL).read()\r\n        with open(IRIS_TEST, \"w\") as f:\r\n            f.write(raw)\r\n\r\n    # Load datasets.\r\n    training_set = tf.contrib.learn.datasets.base.load_csv_with_header(\r\n        filename=IRIS_TRAINING,\r\n        target_dtype=np.int,\r\n        features_dtype=np.float32)\r\n\r\n    # Specify that all features have real-value data\r\n    feature_columns = [tf.feature_column.numeric_column(\"x\", shape=[4])]\r\n\r\n    # Build 3 layer DNN with 10, 20, 10 units respectively.\r\n    classifier = DNNClassifier(feature_columns=feature_columns,\r\n                               hidden_units=[10, 20, 10],\r\n                               n_classes=3,\r\n                               model_dir=\"/tmp/iris_model\")\r\n    # Define the training inputs\r\n    train_input_fn = tf.estimator.inputs.numpy_input_fn(\r\n        x={\"x\": np.array(training_set.data)},\r\n        y=np.array(training_set.target),\r\n        num_epochs=None,\r\n        shuffle=True)\r\n\r\n    # Train model.\r\n    classifier.fit(input_fn=train_input_fn, steps=2000)\r\n\r\n    def serving_input_fn():\r\n        inputs = {'x': tf.placeholder(tf.float32, [4])}\r\n        return tf.estimator.export.ServingInputReceiver(inputs, inputs)\r\n\r\n    classifier.export_savedmodel(export_dir_base=\"/tmp/iris_model\", serving_input_fn=serving_input_fn)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nThe error is:\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"/reproducible_example.py\", line 64, in <module>\r\n    main()\r\n  File \"/reproducible_example.py\", line 61, in main\r\n    classifier.export_savedmodel(export_dir_base=\"/tmp/iris_model\", serving_input_fn=serving_input_fn)\r\n  File \"/Users/mvs/python2.7/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/estimators/estimator.py\", line 1280, in export_savedmodel\r\n    actual_default_output_alternative_key)\r\n  File \"/Users/mvs/python2.7/lib/python2.7/site-packages/tensorflow/contrib/learn/python/learn/utils/saved_model_export_utils.py\", line 259, in build_all_signature_defs\r\n    raise ValueError('A default input_alternative must be provided.')\r\nValueError: A default input_alternative must be provided.\r\n```"}