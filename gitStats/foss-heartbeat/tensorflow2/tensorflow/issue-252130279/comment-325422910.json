{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/325422910", "html_url": "https://github.com/tensorflow/tensorflow/issues/12508#issuecomment-325422910", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12508", "id": 325422910, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTQyMjkxMA==", "user": {"login": "mvsusp", "id": 142074, "node_id": "MDQ6VXNlcjE0MjA3NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/142074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvsusp", "html_url": "https://github.com/mvsusp", "followers_url": "https://api.github.com/users/mvsusp/followers", "following_url": "https://api.github.com/users/mvsusp/following{/other_user}", "gists_url": "https://api.github.com/users/mvsusp/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvsusp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvsusp/subscriptions", "organizations_url": "https://api.github.com/users/mvsusp/orgs", "repos_url": "https://api.github.com/users/mvsusp/repos", "events_url": "https://api.github.com/users/mvsusp/events{/privacy}", "received_events_url": "https://api.github.com/users/mvsusp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-28T17:39:33Z", "updated_at": "2017-08-28T17:39:33Z", "author_association": "NONE", "body_html": "<p>Hello <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1928352\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/samithaj\">@samithaj</a></p>\n<p>Canned estimator don't have a lot of documentation yet. Here it go my code:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">INPUT_TENSOR_NAME</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>inputs<span class=\"pl-pds\">'</span></span>\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">estimator</span>(<span class=\"pl-smi\">model_path</span>):\n    feature_columns <span class=\"pl-k\">=</span> [tf.feature_column.numeric_column(<span class=\"pl-c1\">INPUT_TENSOR_NAME</span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">4</span>])]\n    <span class=\"pl-k\">return</span> tf.estimator.DNNClassifier(<span class=\"pl-v\">feature_columns</span><span class=\"pl-k\">=</span>feature_columns,\n                                      <span class=\"pl-v\">hidden_units</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">10</span>],\n                                      <span class=\"pl-v\">n_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>,\n                                      <span class=\"pl-v\">model_dir</span><span class=\"pl-k\">=</span>model_path)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">serving_input_receiver_fn</span>():\n    feature_spec <span class=\"pl-k\">=</span> {<span class=\"pl-c1\">INPUT_TENSOR_NAME</span>: tf.FixedLenFeature(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">4</span>])}\n    <span class=\"pl-k\">return</span> tf.estimator.export.build_parsing_serving_input_receiver_fn(feature_spec)()\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">train_input_fn</span>(<span class=\"pl-smi\">training_dir</span>):\n    training_set <span class=\"pl-k\">=</span> tf.contrib.learn.datasets.base.load_csv_with_header(\n        <span class=\"pl-v\">filename</span><span class=\"pl-k\">=</span>os.path.join(training_dir, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>iris_training.csv<span class=\"pl-pds\">'</span></span>),\n        <span class=\"pl-v\">target_dtype</span><span class=\"pl-k\">=</span>np.int,\n        <span class=\"pl-v\">features_dtype</span><span class=\"pl-k\">=</span>np.float32)\n\n    <span class=\"pl-k\">return</span> tf.estimator.inputs.numpy_input_fn(\n        <span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>{<span class=\"pl-c1\">INPUT_TENSOR_NAME</span>: np.array(training_set.data)},\n        <span class=\"pl-v\">y</span><span class=\"pl-k\">=</span>np.array(training_set.target),\n        <span class=\"pl-v\">num_epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>,\n        <span class=\"pl-v\">shuffle</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)()\n</pre></div>\n<p>Hope it helps you!</p>", "body_text": "Hello @samithaj\nCanned estimator don't have a lot of documentation yet. Here it go my code:\nINPUT_TENSOR_NAME = 'inputs'\n\n\ndef estimator(model_path):\n    feature_columns = [tf.feature_column.numeric_column(INPUT_TENSOR_NAME, shape=[4])]\n    return tf.estimator.DNNClassifier(feature_columns=feature_columns,\n                                      hidden_units=[10, 20, 10],\n                                      n_classes=3,\n                                      model_dir=model_path)\n\n\ndef serving_input_receiver_fn():\n    feature_spec = {INPUT_TENSOR_NAME: tf.FixedLenFeature(dtype=tf.float32, shape=[4])}\n    return tf.estimator.export.build_parsing_serving_input_receiver_fn(feature_spec)()\n\n\ndef train_input_fn(training_dir):\n    training_set = tf.contrib.learn.datasets.base.load_csv_with_header(\n        filename=os.path.join(training_dir, 'iris_training.csv'),\n        target_dtype=np.int,\n        features_dtype=np.float32)\n\n    return tf.estimator.inputs.numpy_input_fn(\n        x={INPUT_TENSOR_NAME: np.array(training_set.data)},\n        y=np.array(training_set.target),\n        num_epochs=None,\n        shuffle=True)()\n\nHope it helps you!", "body": "Hello @samithaj \r\n\r\nCanned estimator don't have a lot of documentation yet. Here it go my code:\r\n\r\n```python\r\nINPUT_TENSOR_NAME = 'inputs'\r\n\r\n\r\ndef estimator(model_path):\r\n    feature_columns = [tf.feature_column.numeric_column(INPUT_TENSOR_NAME, shape=[4])]\r\n    return tf.estimator.DNNClassifier(feature_columns=feature_columns,\r\n                                      hidden_units=[10, 20, 10],\r\n                                      n_classes=3,\r\n                                      model_dir=model_path)\r\n\r\n\r\ndef serving_input_receiver_fn():\r\n    feature_spec = {INPUT_TENSOR_NAME: tf.FixedLenFeature(dtype=tf.float32, shape=[4])}\r\n    return tf.estimator.export.build_parsing_serving_input_receiver_fn(feature_spec)()\r\n\r\n\r\ndef train_input_fn(training_dir):\r\n    training_set = tf.contrib.learn.datasets.base.load_csv_with_header(\r\n        filename=os.path.join(training_dir, 'iris_training.csv'),\r\n        target_dtype=np.int,\r\n        features_dtype=np.float32)\r\n\r\n    return tf.estimator.inputs.numpy_input_fn(\r\n        x={INPUT_TENSOR_NAME: np.array(training_set.data)},\r\n        y=np.array(training_set.target),\r\n        num_epochs=None,\r\n        shuffle=True)()\r\n\r\n```\r\n\r\nHope it helps you!"}