{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/284000067", "html_url": "https://github.com/tensorflow/tensorflow/issues/8057#issuecomment-284000067", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8057", "id": 284000067, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDAwMDA2Nw==", "user": {"login": "faddey-w", "id": 12978216, "node_id": "MDQ6VXNlcjEyOTc4MjE2", "avatar_url": "https://avatars0.githubusercontent.com/u/12978216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faddey-w", "html_url": "https://github.com/faddey-w", "followers_url": "https://api.github.com/users/faddey-w/followers", "following_url": "https://api.github.com/users/faddey-w/following{/other_user}", "gists_url": "https://api.github.com/users/faddey-w/gists{/gist_id}", "starred_url": "https://api.github.com/users/faddey-w/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faddey-w/subscriptions", "organizations_url": "https://api.github.com/users/faddey-w/orgs", "repos_url": "https://api.github.com/users/faddey-w/repos", "events_url": "https://api.github.com/users/faddey-w/events{/privacy}", "received_events_url": "https://api.github.com/users/faddey-w/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-03T16:26:24Z", "updated_at": "2017-03-03T16:26:24Z", "author_association": "NONE", "body_html": "<p><code>AdamOptimizer</code> is the one built-in optimizer with such problem. So the simplest fast-and-dirty workaround is to do so:</p>\n<div class=\"highlight highlight-source-python\"><pre>model_variables <span class=\"pl-k\">=</span> my_model.get_variables_list()\noptimizer_slots <span class=\"pl-k\">=</span> [\n    optimizer.get_slot(var, name)\n    <span class=\"pl-k\">for</span> name <span class=\"pl-k\">in</span> optimizer.get_slot_names()\n    <span class=\"pl-k\">for</span> var <span class=\"pl-k\">in</span> model_variables\n]\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">isinstance</span>(optimizer, tf.train.AdamOptimizer):\n    optimizer_slots.extend([\n        optimizer._beta1_power, optimizer._beta2_power\n    ])\nall_variables <span class=\"pl-k\">=</span> [\n    <span class=\"pl-k\">*</span>model_variables,\n    <span class=\"pl-k\">*</span>optimizer_slots,\n    global_step,\n]\ninit_op <span class=\"pl-k\">=</span> tf.variables_initializer(all_variables)</pre></div>", "body_text": "AdamOptimizer is the one built-in optimizer with such problem. So the simplest fast-and-dirty workaround is to do so:\nmodel_variables = my_model.get_variables_list()\noptimizer_slots = [\n    optimizer.get_slot(var, name)\n    for name in optimizer.get_slot_names()\n    for var in model_variables\n]\nif isinstance(optimizer, tf.train.AdamOptimizer):\n    optimizer_slots.extend([\n        optimizer._beta1_power, optimizer._beta2_power\n    ])\nall_variables = [\n    *model_variables,\n    *optimizer_slots,\n    global_step,\n]\ninit_op = tf.variables_initializer(all_variables)", "body": "`AdamOptimizer` is the one built-in optimizer with such problem. So the simplest fast-and-dirty workaround is to do so:\r\n``` python\r\nmodel_variables = my_model.get_variables_list()\r\noptimizer_slots = [\r\n    optimizer.get_slot(var, name)\r\n    for name in optimizer.get_slot_names()\r\n    for var in model_variables\r\n]\r\nif isinstance(optimizer, tf.train.AdamOptimizer):\r\n    optimizer_slots.extend([\r\n        optimizer._beta1_power, optimizer._beta2_power\r\n    ])\r\nall_variables = [\r\n    *model_variables,\r\n    *optimizer_slots,\r\n    global_step,\r\n]\r\ninit_op = tf.variables_initializer(all_variables)\r\n```"}