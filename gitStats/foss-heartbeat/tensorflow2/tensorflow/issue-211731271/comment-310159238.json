{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/310159238", "html_url": "https://github.com/tensorflow/tensorflow/issues/8057#issuecomment-310159238", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8057", "id": 310159238, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDE1OTIzOA==", "user": {"login": "faddey-w", "id": 12978216, "node_id": "MDQ6VXNlcjEyOTc4MjE2", "avatar_url": "https://avatars0.githubusercontent.com/u/12978216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faddey-w", "html_url": "https://github.com/faddey-w", "followers_url": "https://api.github.com/users/faddey-w/followers", "following_url": "https://api.github.com/users/faddey-w/following{/other_user}", "gists_url": "https://api.github.com/users/faddey-w/gists{/gist_id}", "starred_url": "https://api.github.com/users/faddey-w/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faddey-w/subscriptions", "organizations_url": "https://api.github.com/users/faddey-w/orgs", "repos_url": "https://api.github.com/users/faddey-w/repos", "events_url": "https://api.github.com/users/faddey-w/events{/privacy}", "received_events_url": "https://api.github.com/users/faddey-w/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-21T18:03:50Z", "updated_at": "2017-06-21T18:03:50Z", "author_association": "NONE", "body_html": "<p>I understood here such a thing: variables <code>beta1_power</code> and <code>beta2_power</code> are specific to each call to <code>apply_gradients</code>, but not to the whole graph. So if we want to call <code>apply_gradients</code> twice, two separate pairs of beta accumulators should be created, even if both calls are made within the single graph. This does not fit into the concept of \"graph slots\". Definitely, we should separate these slots by graphs, but we cannot simply key these slots by graphs only.</p>\n<p>In general, the concept of slots is not suitable for cases when we need a separate variable for each application of gradients, as here. Keeping in mind that the original problem was the impossibility to retrieve beta accumulators without touching undocumented/protected API, I think that optimizers should add such \"per-application\" variables to some internal lists. But this seems to be quite ugly solution. Do anyone have better suggestion?</p>\n<p>Maybe it will be better simply to make <code>_get_beta_accumulators</code> public and documented? This is the only special case, therefore it is short-sighted and unjustified to invent a complex API for it.</p>", "body_text": "I understood here such a thing: variables beta1_power and beta2_power are specific to each call to apply_gradients, but not to the whole graph. So if we want to call apply_gradients twice, two separate pairs of beta accumulators should be created, even if both calls are made within the single graph. This does not fit into the concept of \"graph slots\". Definitely, we should separate these slots by graphs, but we cannot simply key these slots by graphs only.\nIn general, the concept of slots is not suitable for cases when we need a separate variable for each application of gradients, as here. Keeping in mind that the original problem was the impossibility to retrieve beta accumulators without touching undocumented/protected API, I think that optimizers should add such \"per-application\" variables to some internal lists. But this seems to be quite ugly solution. Do anyone have better suggestion?\nMaybe it will be better simply to make _get_beta_accumulators public and documented? This is the only special case, therefore it is short-sighted and unjustified to invent a complex API for it.", "body": "I understood here such a thing: variables `beta1_power` and `beta2_power` are specific to each call to `apply_gradients`, but not to the whole graph. So if we want to call `apply_gradients` twice, two separate pairs of beta accumulators should be created, even if both calls are made within the single graph. This does not fit into the concept of \"graph slots\". Definitely, we should separate these slots by graphs, but we cannot simply key these slots by graphs only.\r\n\r\nIn general, the concept of slots is not suitable for cases when we need a separate variable for each application of gradients, as here. Keeping in mind that the original problem was the impossibility to retrieve beta accumulators without touching undocumented/protected API, I think that optimizers should add such \"per-application\" variables to some internal lists. But this seems to be quite ugly solution. Do anyone have better suggestion? \r\n\r\nMaybe it will be better simply to make `_get_beta_accumulators` public and documented? This is the only special case, therefore it is short-sighted and unjustified to invent a complex API for it."}