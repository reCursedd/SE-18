{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8057", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8057/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8057/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8057/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8057", "id": 211731271, "node_id": "MDU6SXNzdWUyMTE3MzEyNzE=", "number": 8057, "title": "AdamOptimizer's slots \"beta1_power\" and \"beta2_power\" are not available via \"get_slot()\" and \"get_slot_names()\"", "user": {"login": "faddey-w", "id": 12978216, "node_id": "MDQ6VXNlcjEyOTc4MjE2", "avatar_url": "https://avatars0.githubusercontent.com/u/12978216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faddey-w", "html_url": "https://github.com/faddey-w", "followers_url": "https://api.github.com/users/faddey-w/followers", "following_url": "https://api.github.com/users/faddey-w/following{/other_user}", "gists_url": "https://api.github.com/users/faddey-w/gists{/gist_id}", "starred_url": "https://api.github.com/users/faddey-w/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faddey-w/subscriptions", "organizations_url": "https://api.github.com/users/faddey-w/orgs", "repos_url": "https://api.github.com/users/faddey-w/repos", "events_url": "https://api.github.com/users/faddey-w/events{/privacy}", "received_events_url": "https://api.github.com/users/faddey-w/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 20, "created_at": "2017-03-03T16:11:17Z", "updated_at": "2018-05-25T17:00:13Z", "closed_at": "2017-07-05T15:46:43Z", "author_association": "NONE", "body_html": "<p><strong>Preamble.</strong><br>\nI want to explicitly pass list of variables to <code>tf.variables_initializer()</code>. I do something like this:</p>\n<div class=\"highlight highlight-source-python\"><pre>model_variables <span class=\"pl-k\">=</span> my_model.get_variables_list()\noptimizer_slots <span class=\"pl-k\">=</span> [\n    optimizer.get_slot(var, name)\n    <span class=\"pl-k\">for</span> name <span class=\"pl-k\">in</span> optimizer.get_slot_names()\n    <span class=\"pl-k\">for</span> var <span class=\"pl-k\">in</span> model_variables\n]\nall_variables <span class=\"pl-k\">=</span> [\n    <span class=\"pl-k\">*</span>model_variables,\n    <span class=\"pl-k\">*</span>optimizer_slots,\n    global_step,\n]\ninit_op <span class=\"pl-k\">=</span> tf.variables_initializer(all_variables)</pre></div>\n<p>When I used the <code>AdamOptimizer</code>, I got such exception:</p>\n<pre><code>FailedPreconditionError (see above for traceback): Attempting to use uninitialized value beta2_power\n</code></pre>\n<p><strong>The problem.</strong><br>\nAfter digging into the TensorFlow sources, I found that AdamOptimizer overrides its <code>_create_slots()</code> in that way:</p>\n<div class=\"highlight highlight-source-python\"><pre>  <span class=\"pl-k\">def</span> <span class=\"pl-en\">_create_slots</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">var_list</span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Create the beta1 and beta2 accumulators on the same device as the first</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> variable.</span>\n    <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">self</span>._beta1_power <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span> <span class=\"pl-k\">or</span>\n        <span class=\"pl-c1\">self</span>._beta1_power.graph <span class=\"pl-k\">is</span> <span class=\"pl-k\">not</span> var_list[<span class=\"pl-c1\">0</span>].graph):\n      <span class=\"pl-k\">with</span> ops.colocate_with(var_list[<span class=\"pl-c1\">0</span>]):\n        <span class=\"pl-c1\">self</span>._beta1_power <span class=\"pl-k\">=</span> variables.Variable(<span class=\"pl-c1\">self</span>._beta1,\n                                               <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>beta1_power<span class=\"pl-pds\">\"</span></span>,\n                                               <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n        <span class=\"pl-c1\">self</span>._beta2_power <span class=\"pl-k\">=</span> variables.Variable(<span class=\"pl-c1\">self</span>._beta2,\n                                               <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>beta2_power<span class=\"pl-pds\">\"</span></span>,\n                                               <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Create slots for the first and second moments.</span>\n    <span class=\"pl-k\">for</span> v <span class=\"pl-k\">in</span> var_list:\n      <span class=\"pl-c1\">self</span>._zeros_slot(v, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>m<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">self</span>._name)\n      <span class=\"pl-c1\">self</span>._zeros_slot(v, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>v<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">self</span>._name)</pre></div>\n<p>It creates two <code>Variables</code> and does not store them into <code>self._slots</code>, therefore I can not access them using public interface.</p>\n<p>This problem refers to library's API design.</p>\n<p>I see that <em>beta1_power</em> and <em>beta2_power</em> slots are not subject to any variable while <code>self._slots</code> implies that each slot have both name and related variable, so there is no obvious solution... It may be reasonable to extend public API to cover such cases.</p>", "body_text": "Preamble.\nI want to explicitly pass list of variables to tf.variables_initializer(). I do something like this:\nmodel_variables = my_model.get_variables_list()\noptimizer_slots = [\n    optimizer.get_slot(var, name)\n    for name in optimizer.get_slot_names()\n    for var in model_variables\n]\nall_variables = [\n    *model_variables,\n    *optimizer_slots,\n    global_step,\n]\ninit_op = tf.variables_initializer(all_variables)\nWhen I used the AdamOptimizer, I got such exception:\nFailedPreconditionError (see above for traceback): Attempting to use uninitialized value beta2_power\n\nThe problem.\nAfter digging into the TensorFlow sources, I found that AdamOptimizer overrides its _create_slots() in that way:\n  def _create_slots(self, var_list):\n    # Create the beta1 and beta2 accumulators on the same device as the first\n    # variable.\n    if (self._beta1_power is None or\n        self._beta1_power.graph is not var_list[0].graph):\n      with ops.colocate_with(var_list[0]):\n        self._beta1_power = variables.Variable(self._beta1,\n                                               name=\"beta1_power\",\n                                               trainable=False)\n        self._beta2_power = variables.Variable(self._beta2,\n                                               name=\"beta2_power\",\n                                               trainable=False)\n    # Create slots for the first and second moments.\n    for v in var_list:\n      self._zeros_slot(v, \"m\", self._name)\n      self._zeros_slot(v, \"v\", self._name)\nIt creates two Variables and does not store them into self._slots, therefore I can not access them using public interface.\nThis problem refers to library's API design.\nI see that beta1_power and beta2_power slots are not subject to any variable while self._slots implies that each slot have both name and related variable, so there is no obvious solution... It may be reasonable to extend public API to cover such cases.", "body": "**Preamble.** \r\nI want to explicitly pass list of variables to `tf.variables_initializer()`. I do something like this:\r\n``` python\r\nmodel_variables = my_model.get_variables_list()\r\noptimizer_slots = [\r\n    optimizer.get_slot(var, name)\r\n    for name in optimizer.get_slot_names()\r\n    for var in model_variables\r\n]\r\nall_variables = [\r\n    *model_variables,\r\n    *optimizer_slots,\r\n    global_step,\r\n]\r\ninit_op = tf.variables_initializer(all_variables)\r\n```\r\n\r\nWhen I used the `AdamOptimizer`, I got such exception:\r\n```\r\nFailedPreconditionError (see above for traceback): Attempting to use uninitialized value beta2_power\r\n```\r\n\r\n**The problem.**\r\nAfter digging into the TensorFlow sources, I found that AdamOptimizer overrides its `_create_slots()` in that way:\r\n``` python\r\n  def _create_slots(self, var_list):\r\n    # Create the beta1 and beta2 accumulators on the same device as the first\r\n    # variable.\r\n    if (self._beta1_power is None or\r\n        self._beta1_power.graph is not var_list[0].graph):\r\n      with ops.colocate_with(var_list[0]):\r\n        self._beta1_power = variables.Variable(self._beta1,\r\n                                               name=\"beta1_power\",\r\n                                               trainable=False)\r\n        self._beta2_power = variables.Variable(self._beta2,\r\n                                               name=\"beta2_power\",\r\n                                               trainable=False)\r\n    # Create slots for the first and second moments.\r\n    for v in var_list:\r\n      self._zeros_slot(v, \"m\", self._name)\r\n      self._zeros_slot(v, \"v\", self._name)\r\n```\r\nIt creates two `Variables` and does not store them into `self._slots`, therefore I can not access them using public interface.\r\n\r\nThis problem refers to library's API design.\r\n\r\nI see that *beta1_power* and *beta2_power* slots are not subject to any variable while `self._slots` implies that each slot have both name and related variable, so there is no obvious solution... It may be reasonable to extend public API to cover such cases."}