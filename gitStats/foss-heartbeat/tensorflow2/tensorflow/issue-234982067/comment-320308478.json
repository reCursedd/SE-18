{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/320308478", "html_url": "https://github.com/tensorflow/tensorflow/issues/10607#issuecomment-320308478", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10607", "id": 320308478, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDMwODQ3OA==", "user": {"login": "frreiss", "id": 12436991, "node_id": "MDQ6VXNlcjEyNDM2OTkx", "avatar_url": "https://avatars1.githubusercontent.com/u/12436991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frreiss", "html_url": "https://github.com/frreiss", "followers_url": "https://api.github.com/users/frreiss/followers", "following_url": "https://api.github.com/users/frreiss/following{/other_user}", "gists_url": "https://api.github.com/users/frreiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/frreiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frreiss/subscriptions", "organizations_url": "https://api.github.com/users/frreiss/orgs", "repos_url": "https://api.github.com/users/frreiss/repos", "events_url": "https://api.github.com/users/frreiss/events{/privacy}", "received_events_url": "https://api.github.com/users/frreiss/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-04T17:34:19Z", "updated_at": "2017-08-04T17:34:19Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I am looking into this.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> would you prefer the rewrite to produce the same subgraph of operators that the current Python implementation of accumulate_n produces (a combination of Merge, TemporaryVariable, ZerosLike, Assign, AssignAdd, and DestroyTemporaryVariable), or would it be better to add two new internal C++ operators to match the design of ParallalConcat?</p>", "body_text": "I am looking into this.\n@alextp would you prefer the rewrite to produce the same subgraph of operators that the current Python implementation of accumulate_n produces (a combination of Merge, TemporaryVariable, ZerosLike, Assign, AssignAdd, and DestroyTemporaryVariable), or would it be better to add two new internal C++ operators to match the design of ParallalConcat?", "body": "I am looking into this. \r\n\r\n@alextp would you prefer the rewrite to produce the same subgraph of operators that the current Python implementation of accumulate_n produces (a combination of Merge, TemporaryVariable, ZerosLike, Assign, AssignAdd, and DestroyTemporaryVariable), or would it be better to add two new internal C++ operators to match the design of ParallalConcat?"}