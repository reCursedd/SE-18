{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/320309536", "html_url": "https://github.com/tensorflow/tensorflow/issues/10607#issuecomment-320309536", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10607", "id": 320309536, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDMwOTUzNg==", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-04T17:38:50Z", "updated_at": "2017-08-04T17:38:50Z", "author_association": "MEMBER", "body_html": "<div class=\"email-fragment\">I think it's possible to make it run faster if we use internal operators\nlike ParallelConcat, but the path of least resistance is to mimic the\nexisting implementation.</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Fri, Aug 4, 2017 at 10:37 AM, Fred Reiss ***@***.***&gt; wrote:\n I am looking into this.\n\n <a class=\"user-mention\" href=\"https://github.com/alextp\">@alextp</a> &lt;<a href=\"https://github.com/alextp\">https://github.com/alextp</a>&gt; would you prefer the rewrite to\n produce the same subgraph of operators that the current Python\n implementation of accumulate_n produces (a combination of Merge,\n TemporaryVariable, ZerosLike, Assign, AssignAdd, and\n DestroyTemporaryVariable), or would it be better to add two new internal\n C++ operators to match the design of ParallalConcat?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"234982067\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/10607\" href=\"https://github.com/tensorflow/tensorflow/issues/10607#issuecomment-320308478\">#10607 (comment)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/AAATxdeZHveFaTH5KjM4eD2V0Bb9Adbbks5sU1bPgaJpZM4N2BT2\">https://github.com/notifications/unsubscribe-auth/AAATxdeZHveFaTH5KjM4eD2V0Bb9Adbbks5sU1bPgaJpZM4N2BT2</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n<div class=\"email-signature-reply\">-- \n - Alex</div>\n</div>", "body_text": "I think it's possible to make it run faster if we use internal operators\nlike ParallelConcat, but the path of least resistance is to mimic the\nexisting implementation.\n\u2026\nOn Fri, Aug 4, 2017 at 10:37 AM, Fred Reiss ***@***.***> wrote:\n I am looking into this.\n\n @alextp <https://github.com/alextp> would you prefer the rewrite to\n produce the same subgraph of operators that the current Python\n implementation of accumulate_n produces (a combination of Merge,\n TemporaryVariable, ZerosLike, Assign, AssignAdd, and\n DestroyTemporaryVariable), or would it be better to add two new internal\n C++ operators to match the design of ParallalConcat?\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#10607 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/AAATxdeZHveFaTH5KjM4eD2V0Bb9Adbbks5sU1bPgaJpZM4N2BT2>\n .\n\n\n-- \n - Alex", "body": "I think it's possible to make it run faster if we use internal operators\nlike ParallelConcat, but the path of least resistance is to mimic the\nexisting implementation.\n\nOn Fri, Aug 4, 2017 at 10:37 AM, Fred Reiss <notifications@github.com>\nwrote:\n\n> I am looking into this.\n>\n> @alextp <https://github.com/alextp> would you prefer the rewrite to\n> produce the same subgraph of operators that the current Python\n> implementation of accumulate_n produces (a combination of Merge,\n> TemporaryVariable, ZerosLike, Assign, AssignAdd, and\n> DestroyTemporaryVariable), or would it be better to add two new internal\n> C++ operators to match the design of ParallalConcat?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/issues/10607#issuecomment-320308478>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAATxdeZHveFaTH5KjM4eD2V0Bb9Adbbks5sU1bPgaJpZM4N2BT2>\n> .\n>\n\n\n\n-- \n - Alex\n"}