{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15242", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15242/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15242/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15242/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15242", "id": 280776971, "node_id": "MDU6SXNzdWUyODA3NzY5NzE=", "number": 15242, "title": "Error using alexnet with Faster-RCNN?", "user": {"login": "faisalalamri", "id": 32904190, "node_id": "MDQ6VXNlcjMyOTA0MTkw", "avatar_url": "https://avatars1.githubusercontent.com/u/32904190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faisalalamri", "html_url": "https://github.com/faisalalamri", "followers_url": "https://api.github.com/users/faisalalamri/followers", "following_url": "https://api.github.com/users/faisalalamri/following{/other_user}", "gists_url": "https://api.github.com/users/faisalalamri/gists{/gist_id}", "starred_url": "https://api.github.com/users/faisalalamri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faisalalamri/subscriptions", "organizations_url": "https://api.github.com/users/faisalalamri/orgs", "repos_url": "https://api.github.com/users/faisalalamri/repos", "events_url": "https://api.github.com/users/faisalalamri/events{/privacy}", "received_events_url": "https://api.github.com/users/faisalalamri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2017-12-10T02:56:35Z", "updated_at": "2018-04-03T01:06:38Z", "closed_at": "2018-04-03T01:06:38Z", "author_association": "NONE", "body_html": "<p>Hi everyone,<br>\nI am doing object categories detection on COCO dataset using transfer learning (alexnet as a pre-trained with Faster RCNN). However, I am getting this error.</p>\n<blockquote>\n<p>Warning: An error occurred while using @(x)d.propose(x,minBoxSize,'MiniBatchSize',miniBatchSize) to process<br>\n/train2014/COCO_train2014_000000256230.jpg:<br>\nExpected input number 2, score, to be of size Mx1, but it is of size 0x0.<br>\nRegions from this image will not be used for training.<br>\nIn fastRCNNObjectDetector.invokeRegionProposalFcn (line 268)<br>\nIn fastRCNNObjectDetector&gt;@(x,filename)fastRCNNObjectDetector.invokeRegionProposalFcn(fcnCopy,x,filename) (line 158)<br>\nIn fastRCNNObjectDetector.extractRegionProposals (line 218)<br>\nIn fastRCNNObjectDetector.train (line 168)<br>\nIn trainFasterRCNNObjectDetector (line 359)<br>\nIn detection (line 75)</p>\n</blockquote>\n<p>**Can you please help me?<br>\nPlease have a look at the code, and let me know if there is any mistake?</p>\n<p>Thank you very much for your help and time in advance**</p>\n<p>P.S. training data (annotation) is stored in a table, where the first column contains paths and file names to images. The remaining columns contain bounding boxes related to the corresponding images. Each column represents a single object class, such as a person, bicycle, car \u2026 etc, as explained on <a href=\"https://uk.mathworks.com/help/vision/ref/trainfasterrcnnobjectdetector.html\" rel=\"nofollow\">https://uk.mathworks.com/help/vision/ref/trainfasterrcnnobjectdetector.html</a>.</p>\n<pre><code> \u2018clear all\nclose all\nclc\nTrain_data= load('************.mat'); %Load vehicle data set\naddpath('************'); % path of the training images\nnumClasses = width(Train_data);\nTrain_data(1:3,:)% Display first few rows of the data set.\nI = imread(Train_data.imageFilename{6}); % display one of the images with the bbox, \nI = insertShape(I, 'Rectangle', Train_data.person{6});\nI = imresize(I, 3);\nfigure\nimshow(I)\nnet = alexnet; % loading pre-trained model (alexnet in this case)\nnet.Layers\nlayersTransfer = net.Layers(1:end-3);\nlayers = [\n    layersTransfer\n    fullyConnectedLayer(numClasses,'WeightLearnRateFactor',20,'BiasLearnRateFactor',20)\n    softmaxLayer\n    classificationLayer];\noptionsStage1 = trainingOptions('sgdm', ...\n    'MaxEpochs', 10, ...\n    'InitialLearnRate', 1e-5);% Options for step 1.\noptionsStage2 = trainingOptions('sgdm', ...\n    'MaxEpochs', 10, ...\n    'InitialLearnRate', 1e-5);% Options for step 2.\noptionsStage3 = trainingOptions('sgdm', ...\n    'MaxEpochs', 10, ...\n    'InitialLearnRate', 1e-6); % Options for step 3.\noptionsStage4 = trainingOptions('sgdm', ...\n    'MaxEpochs', 10, ...\n    'InitialLearnRate', 1e-6);% Options for step 4.\noptions = [\n    optionsStage1\n    optionsStage2\n    optionsStage3\n    optionsStage4\n    ];\ndoTrainingAndEval = true; % Training network \nif doTrainingAndEval\n    rng(0);\n    detector = trainFasterRCNNObjectDetector(Train_data, layers, options, ...\n        'NegativeOverlapRange', [0 0.3], ...\n        'PositiveOverlapRange', [0.6 1], ...\n        'BoxPyramidScale', 1.2);\nelse\n    detector=load('*********.mat').\nend\nTest_data= load('************.mat');% tesing and evaluation  \naddpath('************'); % path of the testing image\nTest_data.imageFilename =Test_data.imageFilename;\nI = imread(Test_data.imageFilename{452}); % Read one of the images.\n [bboxes, scores,label] = detect(detector, I);% Run the detector.\nI = insertObjectAnnotation(I, 'rectangle', bboxes, scores);% Annotate detections in the image.\nfigure\nimshow(I)\nif doTrainingAndEval\n        resultsStruct = struct([]); % Run detector on each image in the test set and collect results.\n    for i = 1:height(Test_data)\n         I = imread(Test_data.imageFilename{i});        % Read the image.\n        [bboxes, scores, labels] = detect(detector, I);        % Run the detector.\n        resultsStruct(i).Boxes = bboxes;        % Collect the results.\n        resultsStruct(i).Scores = scores;\n       resultsStruct(i).Labels = labels;\n   end\n     results = struct2table(resultsStruct);    % Convert the results into a table.\nelse\n    results = data.results;    % Load results from disk.\nend\nexpectedResults = testData(:, 2:end); % Extract expected bounding box locations from test data.\n [ap, recall, precision] = evaluateDetectionPrecision(results, expectedResults);% Evaluate the    object detector using Average Precision metric.\nfigure;% Plot precision/recall curve\nplot(recall, precision)\nxlabel('Recall')\nylabel('Precision')\ngrid on\ntitle(sprintf('Average Precision = %.1f', ap))\u2019\n</code></pre>\n<p>Have I written custom code: I did the code, following the instructions available on matlab both Faster RCNN detection, and transfer learning webpages (<a href=\"https://uk.mathworks.com/help/vision/examples/object-detection-using-faster-r-cnn-deep-learning.html\" rel=\"nofollow\">https://uk.mathworks.com/help/vision/examples/object-detection-using-faster-r-cnn-deep-learning.html</a>) and (<a href=\"https://uk.mathworks.com/help/nnet/ug/pretrained-convolutional-neural-networks.html#bvm8b5x\" rel=\"nofollow\">https://uk.mathworks.com/help/nnet/ug/pretrained-convolutional-neural-networks.html#bvm8b5x</a>) respectively<br>\nOS Platform and Distribution: Linux, MATLAB2017a<br>\nCUDA/cuDNN version: 8.0, V8.0.44<br>\nGPU model and memory: NVIDIA Tesla K80</p>", "body_text": "Hi everyone,\nI am doing object categories detection on COCO dataset using transfer learning (alexnet as a pre-trained with Faster RCNN). However, I am getting this error.\n\nWarning: An error occurred while using @(x)d.propose(x,minBoxSize,'MiniBatchSize',miniBatchSize) to process\n/train2014/COCO_train2014_000000256230.jpg:\nExpected input number 2, score, to be of size Mx1, but it is of size 0x0.\nRegions from this image will not be used for training.\nIn fastRCNNObjectDetector.invokeRegionProposalFcn (line 268)\nIn fastRCNNObjectDetector>@(x,filename)fastRCNNObjectDetector.invokeRegionProposalFcn(fcnCopy,x,filename) (line 158)\nIn fastRCNNObjectDetector.extractRegionProposals (line 218)\nIn fastRCNNObjectDetector.train (line 168)\nIn trainFasterRCNNObjectDetector (line 359)\nIn detection (line 75)\n\n**Can you please help me?\nPlease have a look at the code, and let me know if there is any mistake?\nThank you very much for your help and time in advance**\nP.S. training data (annotation) is stored in a table, where the first column contains paths and file names to images. The remaining columns contain bounding boxes related to the corresponding images. Each column represents a single object class, such as a person, bicycle, car \u2026 etc, as explained on https://uk.mathworks.com/help/vision/ref/trainfasterrcnnobjectdetector.html.\n \u2018clear all\nclose all\nclc\nTrain_data= load('************.mat'); %Load vehicle data set\naddpath('************'); % path of the training images\nnumClasses = width(Train_data);\nTrain_data(1:3,:)% Display first few rows of the data set.\nI = imread(Train_data.imageFilename{6}); % display one of the images with the bbox, \nI = insertShape(I, 'Rectangle', Train_data.person{6});\nI = imresize(I, 3);\nfigure\nimshow(I)\nnet = alexnet; % loading pre-trained model (alexnet in this case)\nnet.Layers\nlayersTransfer = net.Layers(1:end-3);\nlayers = [\n    layersTransfer\n    fullyConnectedLayer(numClasses,'WeightLearnRateFactor',20,'BiasLearnRateFactor',20)\n    softmaxLayer\n    classificationLayer];\noptionsStage1 = trainingOptions('sgdm', ...\n    'MaxEpochs', 10, ...\n    'InitialLearnRate', 1e-5);% Options for step 1.\noptionsStage2 = trainingOptions('sgdm', ...\n    'MaxEpochs', 10, ...\n    'InitialLearnRate', 1e-5);% Options for step 2.\noptionsStage3 = trainingOptions('sgdm', ...\n    'MaxEpochs', 10, ...\n    'InitialLearnRate', 1e-6); % Options for step 3.\noptionsStage4 = trainingOptions('sgdm', ...\n    'MaxEpochs', 10, ...\n    'InitialLearnRate', 1e-6);% Options for step 4.\noptions = [\n    optionsStage1\n    optionsStage2\n    optionsStage3\n    optionsStage4\n    ];\ndoTrainingAndEval = true; % Training network \nif doTrainingAndEval\n    rng(0);\n    detector = trainFasterRCNNObjectDetector(Train_data, layers, options, ...\n        'NegativeOverlapRange', [0 0.3], ...\n        'PositiveOverlapRange', [0.6 1], ...\n        'BoxPyramidScale', 1.2);\nelse\n    detector=load('*********.mat').\nend\nTest_data= load('************.mat');% tesing and evaluation  \naddpath('************'); % path of the testing image\nTest_data.imageFilename =Test_data.imageFilename;\nI = imread(Test_data.imageFilename{452}); % Read one of the images.\n [bboxes, scores,label] = detect(detector, I);% Run the detector.\nI = insertObjectAnnotation(I, 'rectangle', bboxes, scores);% Annotate detections in the image.\nfigure\nimshow(I)\nif doTrainingAndEval\n        resultsStruct = struct([]); % Run detector on each image in the test set and collect results.\n    for i = 1:height(Test_data)\n         I = imread(Test_data.imageFilename{i});        % Read the image.\n        [bboxes, scores, labels] = detect(detector, I);        % Run the detector.\n        resultsStruct(i).Boxes = bboxes;        % Collect the results.\n        resultsStruct(i).Scores = scores;\n       resultsStruct(i).Labels = labels;\n   end\n     results = struct2table(resultsStruct);    % Convert the results into a table.\nelse\n    results = data.results;    % Load results from disk.\nend\nexpectedResults = testData(:, 2:end); % Extract expected bounding box locations from test data.\n [ap, recall, precision] = evaluateDetectionPrecision(results, expectedResults);% Evaluate the    object detector using Average Precision metric.\nfigure;% Plot precision/recall curve\nplot(recall, precision)\nxlabel('Recall')\nylabel('Precision')\ngrid on\ntitle(sprintf('Average Precision = %.1f', ap))\u2019\n\nHave I written custom code: I did the code, following the instructions available on matlab both Faster RCNN detection, and transfer learning webpages (https://uk.mathworks.com/help/vision/examples/object-detection-using-faster-r-cnn-deep-learning.html) and (https://uk.mathworks.com/help/nnet/ug/pretrained-convolutional-neural-networks.html#bvm8b5x) respectively\nOS Platform and Distribution: Linux, MATLAB2017a\nCUDA/cuDNN version: 8.0, V8.0.44\nGPU model and memory: NVIDIA Tesla K80", "body": "Hi everyone, \r\nI am doing object categories detection on COCO dataset using transfer learning (alexnet as a pre-trained with Faster RCNN). However, I am getting this error.\r\n\r\n> Warning: An error occurred while using @(x)d.propose(x,minBoxSize,'MiniBatchSize',miniBatchSize) to process\r\n> /train2014/COCO_train2014_000000256230.jpg:\r\n> Expected input number 2, score, to be of size Mx1, but it is of size 0x0.\r\n> Regions from this image will not be used for training. \r\n> In fastRCNNObjectDetector.invokeRegionProposalFcn (line 268)\r\n  In fastRCNNObjectDetector>@(x,filename)fastRCNNObjectDetector.invokeRegionProposalFcn(fcnCopy,x,filename) (line 158)\r\n  In fastRCNNObjectDetector.extractRegionProposals (line 218)\r\n  In fastRCNNObjectDetector.train (line 168)\r\n  In trainFasterRCNNObjectDetector (line 359)\r\n  In detection (line 75)\r\n\r\n\r\n**Can you please help me? \r\nPlease have a look at the code, and let me know if there is any mistake?\r\n\r\nThank you very much for your help and time in advance**\r\n\r\nP.S. training data (annotation) is stored in a table, where the first column contains paths and file names to images. The remaining columns contain bounding boxes related to the corresponding images. Each column represents a single object class, such as a person, bicycle, car \u2026 etc, as explained on https://uk.mathworks.com/help/vision/ref/trainfasterrcnnobjectdetector.html.\r\n\r\n     \u2018clear all\r\n    close all\r\n    clc\r\n    Train_data= load('************.mat'); %Load vehicle data set\r\n    addpath('************'); % path of the training images\r\n    numClasses = width(Train_data);\r\n    Train_data(1:3,:)% Display first few rows of the data set.\r\n    I = imread(Train_data.imageFilename{6}); % display one of the images with the bbox, \r\n    I = insertShape(I, 'Rectangle', Train_data.person{6});\r\n    I = imresize(I, 3);\r\n    figure\r\n    imshow(I)\r\n    net = alexnet; % loading pre-trained model (alexnet in this case)\r\n    net.Layers\r\n    layersTransfer = net.Layers(1:end-3);\r\n    layers = [\r\n        layersTransfer\r\n        fullyConnectedLayer(numClasses,'WeightLearnRateFactor',20,'BiasLearnRateFactor',20)\r\n        softmaxLayer\r\n        classificationLayer];\r\n    optionsStage1 = trainingOptions('sgdm', ...\r\n        'MaxEpochs', 10, ...\r\n        'InitialLearnRate', 1e-5);% Options for step 1.\r\n    optionsStage2 = trainingOptions('sgdm', ...\r\n        'MaxEpochs', 10, ...\r\n        'InitialLearnRate', 1e-5);% Options for step 2.\r\n    optionsStage3 = trainingOptions('sgdm', ...\r\n        'MaxEpochs', 10, ...\r\n        'InitialLearnRate', 1e-6); % Options for step 3.\r\n    optionsStage4 = trainingOptions('sgdm', ...\r\n        'MaxEpochs', 10, ...\r\n        'InitialLearnRate', 1e-6);% Options for step 4.\r\n    options = [\r\n        optionsStage1\r\n        optionsStage2\r\n        optionsStage3\r\n        optionsStage4\r\n        ];\r\n    doTrainingAndEval = true; % Training network \r\n    if doTrainingAndEval\r\n        rng(0);\r\n        detector = trainFasterRCNNObjectDetector(Train_data, layers, options, ...\r\n            'NegativeOverlapRange', [0 0.3], ...\r\n            'PositiveOverlapRange', [0.6 1], ...\r\n            'BoxPyramidScale', 1.2);\r\n    else\r\n        detector=load('*********.mat').\r\n    end\r\n    Test_data= load('************.mat');% tesing and evaluation  \r\n    addpath('************'); % path of the testing image\r\n    Test_data.imageFilename =Test_data.imageFilename;\r\n    I = imread(Test_data.imageFilename{452}); % Read one of the images.\r\n     [bboxes, scores,label] = detect(detector, I);% Run the detector.\r\n    I = insertObjectAnnotation(I, 'rectangle', bboxes, scores);% Annotate detections in the image.\r\n    figure\r\n    imshow(I)\r\n    if doTrainingAndEval\r\n            resultsStruct = struct([]); % Run detector on each image in the test set and collect results.\r\n        for i = 1:height(Test_data)\r\n             I = imread(Test_data.imageFilename{i});        % Read the image.\r\n            [bboxes, scores, labels] = detect(detector, I);        % Run the detector.\r\n            resultsStruct(i).Boxes = bboxes;        % Collect the results.\r\n            resultsStruct(i).Scores = scores;\r\n           resultsStruct(i).Labels = labels;\r\n       end\r\n         results = struct2table(resultsStruct);    % Convert the results into a table.\r\n    else\r\n        results = data.results;    % Load results from disk.\r\n    end\r\n    expectedResults = testData(:, 2:end); % Extract expected bounding box locations from test data.\r\n     [ap, recall, precision] = evaluateDetectionPrecision(results, expectedResults);% Evaluate the    object detector using Average Precision metric.\r\n    figure;% Plot precision/recall curve\r\n    plot(recall, precision)\r\n    xlabel('Recall')\r\n    ylabel('Precision')\r\n    grid on\r\n    title(sprintf('Average Precision = %.1f', ap))\u2019\r\n\r\n  \r\n\r\n\r\nHave I written custom code: I did the code, following the instructions available on matlab both Faster RCNN detection, and transfer learning webpages (https://uk.mathworks.com/help/vision/examples/object-detection-using-faster-r-cnn-deep-learning.html) and (https://uk.mathworks.com/help/nnet/ug/pretrained-convolutional-neural-networks.html#bvm8b5x) respectively  \r\nOS Platform and Distribution: Linux, MATLAB2017a\r\nCUDA/cuDNN version: 8.0, V8.0.44\r\nGPU model and memory: NVIDIA Tesla K80\r\n"}