{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23515", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23515/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23515/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23515/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23515", "id": 377294497, "node_id": "MDU6SXNzdWUzNzcyOTQ0OTc=", "number": 23515, "title": "[Eager] Error when training LinearRegressor estimator (Tensor.op)", "user": {"login": "fdiazgon", "id": 12219405, "node_id": "MDQ6VXNlcjEyMjE5NDA1", "avatar_url": "https://avatars0.githubusercontent.com/u/12219405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fdiazgon", "html_url": "https://github.com/fdiazgon", "followers_url": "https://api.github.com/users/fdiazgon/followers", "following_url": "https://api.github.com/users/fdiazgon/following{/other_user}", "gists_url": "https://api.github.com/users/fdiazgon/gists{/gist_id}", "starred_url": "https://api.github.com/users/fdiazgon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fdiazgon/subscriptions", "organizations_url": "https://api.github.com/users/fdiazgon/orgs", "repos_url": "https://api.github.com/users/fdiazgon/repos", "events_url": "https://api.github.com/users/fdiazgon/events{/privacy}", "received_events_url": "https://api.github.com/users/fdiazgon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 736653459, "node_id": "MDU6TGFiZWw3MzY2NTM0NTk=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:eager", "name": "comp:eager", "color": "0052cc", "default": false}], "state": "open", "locked": false, "assignee": {"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-11-05T08:27:32Z", "updated_at": "2018-11-22T18:51:16Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>Have I written custom code: <strong>Yes</strong>.</li>\n<li>OS Platform and Distribution: <strong>Ubuntu 18.04.1 LTS (Bionic Beaver)</strong>.</li>\n<li>TensorFlow installed from: <strong>binary</strong>.</li>\n<li>TensorFlow version: <strong>1.11.0</strong>.</li>\n<li>Python version: <strong>3.6.6</strong>.</li>\n<li>CUDA/cuDNN version: <strong>N/A. CPU only</strong>.</li>\n<li>GPU model and memory: <strong>N/A. CPU only</strong>.</li>\n<li>Other: <strong>Jupyter notebook, 4.4.0</strong></li>\n</ul>\n<p><strong>Describe the current behavior</strong></p>\n<p>In Eager mode, training a LinearRegressor Estimator calling <code>model.train(..)</code> fails with the following error:</p>\n<pre lang=\"text\"><code>Tensor.op is meaningless when eager execution is enabled.\n</code></pre>\n<p><strong>Describe the expected behavior</strong></p>\n<p><code>model.train(..)</code> returns without exceptions.</p>\n<p><strong>Code to reproduce the issue</strong></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\ntf.enable_eager_execution()\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">synthetic_dataset</span>(<span class=\"pl-smi\">w</span>, <span class=\"pl-smi\">b</span>, <span class=\"pl-smi\">noise_level</span>, <span class=\"pl-smi\">batch_size</span>, <span class=\"pl-smi\">num_batches</span>):\n    <span class=\"pl-k\">return</span> synthetic_dataset_helper(w, b,\n                                    tf.shape(w)[<span class=\"pl-c1\">0</span>], noise_level, batch_size,\n                                    num_batches)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">synthetic_dataset_helper</span>(<span class=\"pl-smi\">w</span>, <span class=\"pl-smi\">b</span>, <span class=\"pl-smi\">num_features</span>, <span class=\"pl-smi\">noise_level</span>, <span class=\"pl-smi\">batch_size</span>,\n                             <span class=\"pl-smi\">num_batches</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">batch</span>(<span class=\"pl-smi\">_</span>):\n        x <span class=\"pl-k\">=</span> tf.random_normal([batch_size, num_features])\n        y <span class=\"pl-k\">=</span> tf.matmul(x, w) <span class=\"pl-k\">+</span> b <span class=\"pl-k\">+</span> noise_level <span class=\"pl-k\">*</span> tf.random_normal([])\n        <span class=\"pl-k\">return</span> x, y\n\n    <span class=\"pl-k\">return</span> tf.data.Dataset.range(num_batches).map(batch)\n\ntrue_w <span class=\"pl-k\">=</span> [[<span class=\"pl-k\">-</span><span class=\"pl-c1\">2.0</span>], [<span class=\"pl-c1\">4.0</span>], [<span class=\"pl-c1\">1.0</span>]]\ntrue_b <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">0.5</span>]\nnoise_level <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.01</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Training constants.</span>\nbatch_size <span class=\"pl-k\">=</span> <span class=\"pl-c1\">64</span>\n\ndataset <span class=\"pl-k\">=</span> synthetic_dataset(true_w, true_b, noise_level, batch_size, <span class=\"pl-c1\">20</span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">input_train</span>():\n    <span class=\"pl-k\">return</span> (dataset.make_one_shot_iterator().get_next())\n\nfeature_columns <span class=\"pl-k\">=</span> [\n  tf.feature_column.numeric_column(<span class=\"pl-v\">key</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>),\n  tf.feature_column.numeric_column(<span class=\"pl-v\">key</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>b<span class=\"pl-pds\">\"</span></span>),\n  tf.feature_column.numeric_column(<span class=\"pl-v\">key</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>c<span class=\"pl-pds\">\"</span></span>),\n]\n\nmodel <span class=\"pl-k\">=</span> tf.estimator.LinearRegressor(<span class=\"pl-v\">feature_columns</span><span class=\"pl-k\">=</span>feature_columns)\nmodel.train(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>input_train)</pre></div>\n<p>The code is similar to the following official examples: <a href=\"https://github.com/tensorflow/tensorflow/blob/r1.11/tensorflow/examples/get_started/regression/linear_regression.py\">linear_regression.py</a> and <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/eager/python/examples/linear_regression/linear_regression.py\">linear_regression.py (eager)</a>.</p>", "body_text": "System information\n\nHave I written custom code: Yes.\nOS Platform and Distribution: Ubuntu 18.04.1 LTS (Bionic Beaver).\nTensorFlow installed from: binary.\nTensorFlow version: 1.11.0.\nPython version: 3.6.6.\nCUDA/cuDNN version: N/A. CPU only.\nGPU model and memory: N/A. CPU only.\nOther: Jupyter notebook, 4.4.0\n\nDescribe the current behavior\nIn Eager mode, training a LinearRegressor Estimator calling model.train(..) fails with the following error:\nTensor.op is meaningless when eager execution is enabled.\n\nDescribe the expected behavior\nmodel.train(..) returns without exceptions.\nCode to reproduce the issue\nimport tensorflow as tf\ntf.enable_eager_execution()\n\ndef synthetic_dataset(w, b, noise_level, batch_size, num_batches):\n    return synthetic_dataset_helper(w, b,\n                                    tf.shape(w)[0], noise_level, batch_size,\n                                    num_batches)\n\n\ndef synthetic_dataset_helper(w, b, num_features, noise_level, batch_size,\n                             num_batches):\n    def batch(_):\n        x = tf.random_normal([batch_size, num_features])\n        y = tf.matmul(x, w) + b + noise_level * tf.random_normal([])\n        return x, y\n\n    return tf.data.Dataset.range(num_batches).map(batch)\n\ntrue_w = [[-2.0], [4.0], [1.0]]\ntrue_b = [0.5]\nnoise_level = 0.01\n\n# Training constants.\nbatch_size = 64\n\ndataset = synthetic_dataset(true_w, true_b, noise_level, batch_size, 20)\n\ndef input_train():\n    return (dataset.make_one_shot_iterator().get_next())\n\nfeature_columns = [\n  tf.feature_column.numeric_column(key=\"a\"),\n  tf.feature_column.numeric_column(key=\"b\"),\n  tf.feature_column.numeric_column(key=\"c\"),\n]\n\nmodel = tf.estimator.LinearRegressor(feature_columns=feature_columns)\nmodel.train(input_fn=input_train)\nThe code is similar to the following official examples: linear_regression.py and linear_regression.py (eager).", "body": "**System information**\r\n- Have I written custom code: **Yes**.\r\n- OS Platform and Distribution: **Ubuntu 18.04.1 LTS (Bionic Beaver)**.\r\n- TensorFlow installed from: **binary**.\r\n- TensorFlow version: **1.11.0**.\r\n- Python version: **3.6.6**.\r\n- CUDA/cuDNN version: **N/A. CPU only**.\r\n- GPU model and memory: **N/A. CPU only**.\r\n- Other: **Jupyter notebook, 4.4.0**\r\n\r\n**Describe the current behavior**\r\n\r\nIn Eager mode, training a LinearRegressor Estimator calling `model.train(..)` fails with the following error:\r\n\r\n```text\r\nTensor.op is meaningless when eager execution is enabled.\r\n``` \r\n\r\n**Describe the expected behavior**\r\n\r\n`model.train(..)` returns without exceptions.\r\n\r\n**Code to reproduce the issue**\r\n\r\n```python\r\nimport tensorflow as tf\r\ntf.enable_eager_execution()\r\n\r\ndef synthetic_dataset(w, b, noise_level, batch_size, num_batches):\r\n    return synthetic_dataset_helper(w, b,\r\n                                    tf.shape(w)[0], noise_level, batch_size,\r\n                                    num_batches)\r\n\r\n\r\ndef synthetic_dataset_helper(w, b, num_features, noise_level, batch_size,\r\n                             num_batches):\r\n    def batch(_):\r\n        x = tf.random_normal([batch_size, num_features])\r\n        y = tf.matmul(x, w) + b + noise_level * tf.random_normal([])\r\n        return x, y\r\n\r\n    return tf.data.Dataset.range(num_batches).map(batch)\r\n\r\ntrue_w = [[-2.0], [4.0], [1.0]]\r\ntrue_b = [0.5]\r\nnoise_level = 0.01\r\n\r\n# Training constants.\r\nbatch_size = 64\r\n\r\ndataset = synthetic_dataset(true_w, true_b, noise_level, batch_size, 20)\r\n\r\ndef input_train():\r\n    return (dataset.make_one_shot_iterator().get_next())\r\n\r\nfeature_columns = [\r\n  tf.feature_column.numeric_column(key=\"a\"),\r\n  tf.feature_column.numeric_column(key=\"b\"),\r\n  tf.feature_column.numeric_column(key=\"c\"),\r\n]\r\n\r\nmodel = tf.estimator.LinearRegressor(feature_columns=feature_columns)\r\nmodel.train(input_fn=input_train)\r\n```\r\n\r\nThe code is similar to the following official examples: [linear_regression.py](https://github.com/tensorflow/tensorflow/blob/r1.11/tensorflow/examples/get_started/regression/linear_regression.py) and [linear_regression.py (eager)](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/eager/python/examples/linear_regression/linear_regression.py).\r\n"}