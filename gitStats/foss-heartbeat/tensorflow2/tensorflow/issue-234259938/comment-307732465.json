{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/307732465", "html_url": "https://github.com/tensorflow/tensorflow/issues/10492#issuecomment-307732465", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10492", "id": 307732465, "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzczMjQ2NQ==", "user": {"login": "baodingge", "id": 23653105, "node_id": "MDQ6VXNlcjIzNjUzMTA1", "avatar_url": "https://avatars1.githubusercontent.com/u/23653105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/baodingge", "html_url": "https://github.com/baodingge", "followers_url": "https://api.github.com/users/baodingge/followers", "following_url": "https://api.github.com/users/baodingge/following{/other_user}", "gists_url": "https://api.github.com/users/baodingge/gists{/gist_id}", "starred_url": "https://api.github.com/users/baodingge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/baodingge/subscriptions", "organizations_url": "https://api.github.com/users/baodingge/orgs", "repos_url": "https://api.github.com/users/baodingge/repos", "events_url": "https://api.github.com/users/baodingge/events{/privacy}", "received_events_url": "https://api.github.com/users/baodingge/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-12T09:07:34Z", "updated_at": "2017-06-12T09:07:34Z", "author_association": "NONE", "body_html": "<p>def distorted_inputs(filenames, batch_size, imagesize, img_channel):</p>\n<pre><code>filename_queue = tf.train.string_input_producer(filenames)\nreader = tf.TFRecordReader()\n_, serialized_example = reader.read(filename_queue)\n\nfeatures = tf.parse_single_example(serialized_example, features={\n\t\t\t'abs_path': tf.FixedLenFeature([], tf.string),\n\t\t\t'height':tf.FixedLenFeature([], tf.int64),\n\t\t\t'width' :tf.FixedLenFeature([], tf.int64),\n\t\t\t'img_raw':tf.FixedLenFeature([], tf.string),\n\t\t\t'label':tf.FixedLenFeature([], tf.int64)})\nheight = tf.cast(features['height'], tf.int32)\nwidth = tf.cast(features['width'], tf.int32)\nimages = tf.decode_raw(features['img_raw'], tf.float32)\nimages = tf.reshape(images, [height, width, img_channel])\n\ndistorted_image = tf.random_crop(images, [530, 530, img_channel])\ndistorted_image = tf.image.random_flip_left_right(distorted_image)\ndistorted_image = tf.image.random_brightness(distorted_image, max_delta=63)\ndistorted_image = tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)\ndistorted_image = tf.image.resize_images(distorted_image, (imagesize,imagesize))\nfloat_image = tf.image.per_image_standardization(distorted_image)\n\nlabel = tf.cast(features['label'], tf.int64)\nlabel = tf.reshape(label, [1])\nmin_after_dequeue = 1000\ncapacity = min_after_dequeue + 3*batch_size\nreturn tf.train.shuffle_batch(\n\t\t[float_image, label],\n\t\tbatch_size = batch_size,\n\t\tcapacity = capacity,\n\t\tmin_after_dequeue = min_after_dequeue)\n</code></pre>\n<p>I alse meet this problem a month ago, I test my code line by line, this is code can works well.<br>\nThe core problem is this : images = tf.reshape(images, [height, width, img_channel]).I think this can help you.Any question call me.</p>", "body_text": "def distorted_inputs(filenames, batch_size, imagesize, img_channel):\nfilename_queue = tf.train.string_input_producer(filenames)\nreader = tf.TFRecordReader()\n_, serialized_example = reader.read(filename_queue)\n\nfeatures = tf.parse_single_example(serialized_example, features={\n\t\t\t'abs_path': tf.FixedLenFeature([], tf.string),\n\t\t\t'height':tf.FixedLenFeature([], tf.int64),\n\t\t\t'width' :tf.FixedLenFeature([], tf.int64),\n\t\t\t'img_raw':tf.FixedLenFeature([], tf.string),\n\t\t\t'label':tf.FixedLenFeature([], tf.int64)})\nheight = tf.cast(features['height'], tf.int32)\nwidth = tf.cast(features['width'], tf.int32)\nimages = tf.decode_raw(features['img_raw'], tf.float32)\nimages = tf.reshape(images, [height, width, img_channel])\n\ndistorted_image = tf.random_crop(images, [530, 530, img_channel])\ndistorted_image = tf.image.random_flip_left_right(distorted_image)\ndistorted_image = tf.image.random_brightness(distorted_image, max_delta=63)\ndistorted_image = tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)\ndistorted_image = tf.image.resize_images(distorted_image, (imagesize,imagesize))\nfloat_image = tf.image.per_image_standardization(distorted_image)\n\nlabel = tf.cast(features['label'], tf.int64)\nlabel = tf.reshape(label, [1])\nmin_after_dequeue = 1000\ncapacity = min_after_dequeue + 3*batch_size\nreturn tf.train.shuffle_batch(\n\t\t[float_image, label],\n\t\tbatch_size = batch_size,\n\t\tcapacity = capacity,\n\t\tmin_after_dequeue = min_after_dequeue)\n\nI alse meet this problem a month ago, I test my code line by line, this is code can works well.\nThe core problem is this : images = tf.reshape(images, [height, width, img_channel]).I think this can help you.Any question call me.", "body": "def distorted_inputs(filenames, batch_size, imagesize, img_channel):\r\n\r\n\tfilename_queue = tf.train.string_input_producer(filenames)\r\n\treader = tf.TFRecordReader()\r\n\t_, serialized_example = reader.read(filename_queue)\r\n\r\n\tfeatures = tf.parse_single_example(serialized_example, features={\r\n\t\t\t\t'abs_path': tf.FixedLenFeature([], tf.string),\r\n\t\t\t\t'height':tf.FixedLenFeature([], tf.int64),\r\n\t\t\t\t'width' :tf.FixedLenFeature([], tf.int64),\r\n\t\t\t\t'img_raw':tf.FixedLenFeature([], tf.string),\r\n\t\t\t\t'label':tf.FixedLenFeature([], tf.int64)})\r\n\theight = tf.cast(features['height'], tf.int32)\r\n\twidth = tf.cast(features['width'], tf.int32)\r\n\timages = tf.decode_raw(features['img_raw'], tf.float32)\r\n\timages = tf.reshape(images, [height, width, img_channel])\r\n\t\r\n\tdistorted_image = tf.random_crop(images, [530, 530, img_channel])\r\n\tdistorted_image = tf.image.random_flip_left_right(distorted_image)\r\n\tdistorted_image = tf.image.random_brightness(distorted_image, max_delta=63)\r\n\tdistorted_image = tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)\r\n\tdistorted_image = tf.image.resize_images(distorted_image, (imagesize,imagesize))\r\n\tfloat_image = tf.image.per_image_standardization(distorted_image)\r\n\t\r\n\tlabel = tf.cast(features['label'], tf.int64)\r\n\tlabel = tf.reshape(label, [1])\r\n\tmin_after_dequeue = 1000\r\n\tcapacity = min_after_dequeue + 3*batch_size\r\n\treturn tf.train.shuffle_batch(\r\n\t\t\t[float_image, label],\r\n\t\t\tbatch_size = batch_size,\r\n\t\t\tcapacity = capacity,\r\n\t\t\tmin_after_dequeue = min_after_dequeue)\r\n\r\nI alse meet this problem a month ago, I test my code line by line, this is code can works well.\r\nThe core problem is this : images = tf.reshape(images, [height, width, img_channel]).I think this can help you.Any question call me."}