{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21485", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21485/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21485/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21485/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21485", "id": 348834201, "node_id": "MDU6SXNzdWUzNDg4MzQyMDE=", "number": 21485, "title": "Keras save_weights/load_weights error for custom layer", "user": {"login": "ybsave", "id": 26417094, "node_id": "MDQ6VXNlcjI2NDE3MDk0", "avatar_url": "https://avatars0.githubusercontent.com/u/26417094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ybsave", "html_url": "https://github.com/ybsave", "followers_url": "https://api.github.com/users/ybsave/followers", "following_url": "https://api.github.com/users/ybsave/following{/other_user}", "gists_url": "https://api.github.com/users/ybsave/gists{/gist_id}", "starred_url": "https://api.github.com/users/ybsave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ybsave/subscriptions", "organizations_url": "https://api.github.com/users/ybsave/orgs", "repos_url": "https://api.github.com/users/ybsave/repos", "events_url": "https://api.github.com/users/ybsave/events{/privacy}", "received_events_url": "https://api.github.com/users/ybsave/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-08T18:08:41Z", "updated_at": "2018-08-29T17:22:38Z", "closed_at": "2018-08-29T17:22:38Z", "author_association": "NONE", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Y</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>: N/A</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.9</li>\n<li><strong>Python version</strong>: 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.0/7</li>\n<li><strong>GPU model and memory</strong>: Quardo M4000</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I create a simple custom layer performing a multiply. However, if I do not define \"get_config()\" function for my custom layer, after saving and loading weights, the layer's weights are not loaded. If I implemented the \"get_config()\" function for my custom layer as suggested by many online discussions, the program crashed when calling \"save_weights\" with the error message \"TypeError: can't pickle _thread.RLock objects\". According to some online discussions, I change the \"self.add_variable\" by \"K.variable\", but the crash still happened. I have went through many online discussions on Github and Stackoverflow, but none worked for me. Therefore, I doubt whether there are some bugs for \"save_weights\" or I use it in a wrong way. Thank you.</p>\n<p>My codes are as follows:</p>\n<pre><code>class MaskLayer(Layer):\n  def __init__(self, data_format=None, **kwargs):\n\tself.data_format = data_format\n\tsuper(MaskLayer, self).__init__(trainable=False, **kwargs)\n\n  def build(self, input_shape):\n\tif self.data_format == 'channels_first':\n\t  channel_axis = 1\n\telse:\n\t  channel_axis = -1\n\tdimension = input_shape[channel_axis]\n\t# Either definition of self.mask below lead to the same results\n\tself.mask = self.add_variable(name='mask', shape=dimension, \n                                                        initializer='ones', trainable=False, dtype=self.dtype)\n#    self.mask = K.variable(np.ones(dimension), name='mask')\n\tsuper(MaskLayer, self).build(input_shape)\n\n  def call(self, inputs):\n\treturn inputs * self.mask\n\n  def set_weights(self, weights):\n\tK.batch_set_value([(self.mask, weights)])\n\n  # If this get_config is enalbed, the program crashed when calling \"save_weights\"\n#  def get_config(self):\n#    config = {'mask': self.mask}\n#    base_config = super(MaskLayer, self).get_config()\n#    return dict(list(base_config.items()) + list(config.items()))\n\t\ndef test():\n  data = np.ones((1,1,4,5), dtype=float)\n\n  model = keras.Sequential()\n  mask_layer = MaskLayer()\n  model.add(mask_layer)\n\n  for layer in model.layers:\n\tprint(layer.name)\n\tweights = layer.get_weights()\n\tprint(weights)\n  results = model.predict(data)\n  print(results)\n  print('-------------------------------')\n  mask_layer.set_weights([1,-1,0,2,-2])\n\n  for layer in model.layers:\n\tprint(layer.name)\n\tweights = layer.get_weights()\n\tprint(weights)\n  results = model.predict(data)\n  print(results)\n  print('-------------------------------')\n  \n  model.save_weights('models/test/test')\n\n  new_model = keras.Sequential()\n  mask_layer = MaskLayer()\n  new_model.add(mask_layer)\n\n  new_model.load_weights('models/test/test')\n  for layer in new_model.layers:\n\tprint(layer.name)\n\tweights = layer.get_weights()\n\tprint(weights)\n\n  results_new = new_model.predict(data)\n  print(results_new)\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Y\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.9\nPython version: 3.6\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: 9.0/7\nGPU model and memory: Quardo M4000\nExact command to reproduce: N/A\n\nDescribe the problem\nI create a simple custom layer performing a multiply. However, if I do not define \"get_config()\" function for my custom layer, after saving and loading weights, the layer's weights are not loaded. If I implemented the \"get_config()\" function for my custom layer as suggested by many online discussions, the program crashed when calling \"save_weights\" with the error message \"TypeError: can't pickle _thread.RLock objects\". According to some online discussions, I change the \"self.add_variable\" by \"K.variable\", but the crash still happened. I have went through many online discussions on Github and Stackoverflow, but none worked for me. Therefore, I doubt whether there are some bugs for \"save_weights\" or I use it in a wrong way. Thank you.\nMy codes are as follows:\nclass MaskLayer(Layer):\n  def __init__(self, data_format=None, **kwargs):\n\tself.data_format = data_format\n\tsuper(MaskLayer, self).__init__(trainable=False, **kwargs)\n\n  def build(self, input_shape):\n\tif self.data_format == 'channels_first':\n\t  channel_axis = 1\n\telse:\n\t  channel_axis = -1\n\tdimension = input_shape[channel_axis]\n\t# Either definition of self.mask below lead to the same results\n\tself.mask = self.add_variable(name='mask', shape=dimension, \n                                                        initializer='ones', trainable=False, dtype=self.dtype)\n#    self.mask = K.variable(np.ones(dimension), name='mask')\n\tsuper(MaskLayer, self).build(input_shape)\n\n  def call(self, inputs):\n\treturn inputs * self.mask\n\n  def set_weights(self, weights):\n\tK.batch_set_value([(self.mask, weights)])\n\n  # If this get_config is enalbed, the program crashed when calling \"save_weights\"\n#  def get_config(self):\n#    config = {'mask': self.mask}\n#    base_config = super(MaskLayer, self).get_config()\n#    return dict(list(base_config.items()) + list(config.items()))\n\t\ndef test():\n  data = np.ones((1,1,4,5), dtype=float)\n\n  model = keras.Sequential()\n  mask_layer = MaskLayer()\n  model.add(mask_layer)\n\n  for layer in model.layers:\n\tprint(layer.name)\n\tweights = layer.get_weights()\n\tprint(weights)\n  results = model.predict(data)\n  print(results)\n  print('-------------------------------')\n  mask_layer.set_weights([1,-1,0,2,-2])\n\n  for layer in model.layers:\n\tprint(layer.name)\n\tweights = layer.get_weights()\n\tprint(weights)\n  results = model.predict(data)\n  print(results)\n  print('-------------------------------')\n  \n  model.save_weights('models/test/test')\n\n  new_model = keras.Sequential()\n  mask_layer = MaskLayer()\n  new_model.add(mask_layer)\n\n  new_model.load_weights('models/test/test')\n  for layer in new_model.layers:\n\tprint(layer.name)\n\tweights = layer.get_weights()\n\tprint(weights)\n\n  results_new = new_model.predict(data)\n  print(results_new)", "body": "------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Y\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**: N/A\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.9\r\n- **Python version**: 3.6\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **GCC/Compiler version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: 9.0/7\r\n- **GPU model and memory**: Quardo M4000\r\n- **Exact command to reproduce**: N/A\r\n\r\n### Describe the problem\r\nI create a simple custom layer performing a multiply. However, if I do not define \"get_config()\" function for my custom layer, after saving and loading weights, the layer's weights are not loaded. If I implemented the \"get_config()\" function for my custom layer as suggested by many online discussions, the program crashed when calling \"save_weights\" with the error message \"TypeError: can't pickle _thread.RLock objects\". According to some online discussions, I change the \"self.add_variable\" by \"K.variable\", but the crash still happened. I have went through many online discussions on Github and Stackoverflow, but none worked for me. Therefore, I doubt whether there are some bugs for \"save_weights\" or I use it in a wrong way. Thank you.\r\n\r\nMy codes are as follows:\r\n\r\n\tclass MaskLayer(Layer):\r\n\t  def __init__(self, data_format=None, **kwargs):\r\n\t\tself.data_format = data_format\r\n\t\tsuper(MaskLayer, self).__init__(trainable=False, **kwargs)\r\n\r\n\t  def build(self, input_shape):\r\n\t\tif self.data_format == 'channels_first':\r\n\t\t  channel_axis = 1\r\n\t\telse:\r\n\t\t  channel_axis = -1\r\n\t\tdimension = input_shape[channel_axis]\r\n\t\t# Either definition of self.mask below lead to the same results\r\n\t\tself.mask = self.add_variable(name='mask', shape=dimension, \r\n                                                            initializer='ones', trainable=False, dtype=self.dtype)\r\n\t#    self.mask = K.variable(np.ones(dimension), name='mask')\r\n\t\tsuper(MaskLayer, self).build(input_shape)\r\n\r\n\t  def call(self, inputs):\r\n\t\treturn inputs * self.mask\r\n\r\n\t  def set_weights(self, weights):\r\n\t\tK.batch_set_value([(self.mask, weights)])\r\n\r\n\t  # If this get_config is enalbed, the program crashed when calling \"save_weights\"\r\n\t#  def get_config(self):\r\n\t#    config = {'mask': self.mask}\r\n\t#    base_config = super(MaskLayer, self).get_config()\r\n\t#    return dict(list(base_config.items()) + list(config.items()))\r\n\t\t\r\n\tdef test():\r\n\t  data = np.ones((1,1,4,5), dtype=float)\r\n\r\n\t  model = keras.Sequential()\r\n\t  mask_layer = MaskLayer()\r\n\t  model.add(mask_layer)\r\n\r\n\t  for layer in model.layers:\r\n\t\tprint(layer.name)\r\n\t\tweights = layer.get_weights()\r\n\t\tprint(weights)\r\n\t  results = model.predict(data)\r\n\t  print(results)\r\n\t  print('-------------------------------')\r\n\t  mask_layer.set_weights([1,-1,0,2,-2])\r\n\r\n\t  for layer in model.layers:\r\n\t\tprint(layer.name)\r\n\t\tweights = layer.get_weights()\r\n\t\tprint(weights)\r\n\t  results = model.predict(data)\r\n\t  print(results)\r\n\t  print('-------------------------------')\r\n\t  \r\n\t  model.save_weights('models/test/test')\r\n\r\n\t  new_model = keras.Sequential()\r\n\t  mask_layer = MaskLayer()\r\n\t  new_model.add(mask_layer)\r\n\r\n\t  new_model.load_weights('models/test/test')\r\n\t  for layer in new_model.layers:\r\n\t\tprint(layer.name)\r\n\t\tweights = layer.get_weights()\r\n\t\tprint(weights)\r\n\r\n\t  results_new = new_model.predict(data)\r\n\t  print(results_new)\r\n"}