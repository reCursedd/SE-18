{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11098", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11098/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11098/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11098/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11098", "id": 239045844, "node_id": "MDU6SXNzdWUyMzkwNDU4NDQ=", "number": 11098, "title": "tf.check_numerics does not raise error when used in tf.control_dependencies", "user": {"login": "korepwx", "id": 1984627, "node_id": "MDQ6VXNlcjE5ODQ2Mjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1984627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/korepwx", "html_url": "https://github.com/korepwx", "followers_url": "https://api.github.com/users/korepwx/followers", "following_url": "https://api.github.com/users/korepwx/following{/other_user}", "gists_url": "https://api.github.com/users/korepwx/gists{/gist_id}", "starred_url": "https://api.github.com/users/korepwx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/korepwx/subscriptions", "organizations_url": "https://api.github.com/users/korepwx/orgs", "repos_url": "https://api.github.com/users/korepwx/repos", "events_url": "https://api.github.com/users/korepwx/events{/privacy}", "received_events_url": "https://api.github.com/users/korepwx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-28T03:53:51Z", "updated_at": "2017-07-02T02:38:39Z", "closed_at": "2017-06-30T23:50:00Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: macOS Sierra 10.12.4</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.2.0</li>\n<li><strong>Bazel version (if compiling from source)</strong>: none</li>\n<li><strong>CUDA/cuDNN version</strong>: none</li>\n<li><strong>GPU model and memory</strong>: none</li>\n<li><strong>Exact command to reproduce</strong>: run the code below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<p><code>tf.check_numerics</code> does not raise error when used in <code>tf.control_dependencies</code>.  The code below should raise error, but it does not in TensorFlow 1.2.0</p>\n<h3>Source code / logs</h3>\n<p>Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nx <span class=\"pl-k\">=</span> tf.constant(np.nan)\n<span class=\"pl-k\">with</span> tf.control_dependencies([tf.check_numerics(x, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>nan<span class=\"pl-pds\">'</span></span>)]):\n    x <span class=\"pl-k\">=</span> tf.identity(x)\n\n<span class=\"pl-k\">with</span> tf.Session().as_default():\n    <span class=\"pl-c1\">print</span>(x.eval())</pre></div>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Sierra 10.12.4\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.2.0\nBazel version (if compiling from source): none\nCUDA/cuDNN version: none\nGPU model and memory: none\nExact command to reproduce: run the code below\n\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\ntf.check_numerics does not raise error when used in tf.control_dependencies.  The code below should raise error, but it does not in TensorFlow 1.2.0\nSource code / logs\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\nimport numpy as np\nimport tensorflow as tf\n\nx = tf.constant(np.nan)\nwith tf.control_dependencies([tf.check_numerics(x, 'nan')]):\n    x = tf.identity(x)\n\nwith tf.Session().as_default():\n    print(x.eval())", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: macOS Sierra 10.12.4\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.2.0\r\n- **Bazel version (if compiling from source)**: none\r\n- **CUDA/cuDNN version**: none\r\n- **GPU model and memory**: none\r\n- **Exact command to reproduce**: run the code below\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n\r\n`tf.check_numerics` does not raise error when used in `tf.control_dependencies`.  The code below should raise error, but it does not in TensorFlow 1.2.0\r\n\r\n### Source code / logs\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\r\n\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nx = tf.constant(np.nan)\r\nwith tf.control_dependencies([tf.check_numerics(x, 'nan')]):\r\n    x = tf.identity(x)\r\n\r\nwith tf.Session().as_default():\r\n    print(x.eval())\r\n```"}