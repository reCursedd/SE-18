{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/302415907", "html_url": "https://github.com/tensorflow/tensorflow/issues/9747#issuecomment-302415907", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9747", "id": 302415907, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjQxNTkwNw==", "user": {"login": "bsautermeister", "id": 2537736, "node_id": "MDQ6VXNlcjI1Mzc3MzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2537736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bsautermeister", "html_url": "https://github.com/bsautermeister", "followers_url": "https://api.github.com/users/bsautermeister/followers", "following_url": "https://api.github.com/users/bsautermeister/following{/other_user}", "gists_url": "https://api.github.com/users/bsautermeister/gists{/gist_id}", "starred_url": "https://api.github.com/users/bsautermeister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bsautermeister/subscriptions", "organizations_url": "https://api.github.com/users/bsautermeister/orgs", "repos_url": "https://api.github.com/users/bsautermeister/repos", "events_url": "https://api.github.com/users/bsautermeister/events{/privacy}", "received_events_url": "https://api.github.com/users/bsautermeister/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-18T14:13:00Z", "updated_at": "2017-05-19T07:49:11Z", "author_association": "NONE", "body_html": "<p>I'm just facing the same problem. To be more precise, I'm using <a href=\"https://www.tensorflow.org/api_docs/python/tf/metrics/accuracy\" rel=\"nofollow\">tf.metrics.accuracy()</a> in my training script, which uses local count variables internally.</p>\n<pre><code>_, accuracy_ = tf.metrics.accuracy(labels=y_ph, predictions=tf.argmax(model_y, axis=1))\ntf.add_to_collection('accuracy', accuracy_)\n</code></pre>\n<p>After saving and restoring the graph using <a href=\"https://www.tensorflow.org/api_docs/python/tf/train/import_meta_graph\" rel=\"nofollow\">tf.train.import_meta_graph()</a>, I'm not able so reuse the accuracy metric, because the required call to <a href=\"https://www.tensorflow.org/versions/master/api_docs/python/tf/initialize_local_variables\" rel=\"nofollow\">tf.initialize_local_variables()</a> fails as desribed  <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8947557\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/austinzh\">@austinzh</a>.</p>\n<pre><code>with tf.Session() as sess:\n    new_saver = tf.train.import_meta_graph('checkpoint/model.ckpt.meta')\n    new_saver.restore(sess, 'checkpoint/model.ckpt')\n    # ...\n    accuracy_ = tf.get_collection('accuracy')[0]\n    sess.run(tf.local_variables_initializer())\n    accuracy = sess.run(accuracy_, feed_dict={...})\n</code></pre>\n<p>is there already any progress on this?</p>\n<p><strong>EDIT:</strong><br>\nOS: Ubuntu 16.04<br>\nTF-Version: r1.1 (native pip, Python 2.7) CPU only</p>", "body_text": "I'm just facing the same problem. To be more precise, I'm using tf.metrics.accuracy() in my training script, which uses local count variables internally.\n_, accuracy_ = tf.metrics.accuracy(labels=y_ph, predictions=tf.argmax(model_y, axis=1))\ntf.add_to_collection('accuracy', accuracy_)\n\nAfter saving and restoring the graph using tf.train.import_meta_graph(), I'm not able so reuse the accuracy metric, because the required call to tf.initialize_local_variables() fails as desribed  @austinzh.\nwith tf.Session() as sess:\n    new_saver = tf.train.import_meta_graph('checkpoint/model.ckpt.meta')\n    new_saver.restore(sess, 'checkpoint/model.ckpt')\n    # ...\n    accuracy_ = tf.get_collection('accuracy')[0]\n    sess.run(tf.local_variables_initializer())\n    accuracy = sess.run(accuracy_, feed_dict={...})\n\nis there already any progress on this?\nEDIT:\nOS: Ubuntu 16.04\nTF-Version: r1.1 (native pip, Python 2.7) CPU only", "body": "I'm just facing the same problem. To be more precise, I'm using [tf.metrics.accuracy()](https://www.tensorflow.org/api_docs/python/tf/metrics/accuracy) in my training script, which uses local count variables internally.\r\n\r\n```\r\n_, accuracy_ = tf.metrics.accuracy(labels=y_ph, predictions=tf.argmax(model_y, axis=1))\r\ntf.add_to_collection('accuracy', accuracy_)\r\n```\r\n\r\nAfter saving and restoring the graph using [tf.train.import_meta_graph()](https://www.tensorflow.org/api_docs/python/tf/train/import_meta_graph), I'm not able so reuse the accuracy metric, because the required call to [tf.initialize_local_variables()](https://www.tensorflow.org/versions/master/api_docs/python/tf/initialize_local_variables) fails as desribed  @austinzh.\r\n\r\n```\r\nwith tf.Session() as sess:\r\n    new_saver = tf.train.import_meta_graph('checkpoint/model.ckpt.meta')\r\n    new_saver.restore(sess, 'checkpoint/model.ckpt')\r\n    # ...\r\n    accuracy_ = tf.get_collection('accuracy')[0]\r\n    sess.run(tf.local_variables_initializer())\r\n    accuracy = sess.run(accuracy_, feed_dict={...})\r\n```\r\n\r\n\r\nis there already any progress on this?\r\n\r\n**EDIT:**\r\nOS: Ubuntu 16.04\r\nTF-Version: r1.1 (native pip, Python 2.7) CPU only"}