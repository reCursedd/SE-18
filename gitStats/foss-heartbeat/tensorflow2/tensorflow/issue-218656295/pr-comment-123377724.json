{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/123377724", "pull_request_review_id": 45575633, "id": 123377724, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzM3NzcyNA==", "diff_hunk": "@@ -1921,6 +1921,182 @@ def call(self, inputs, state):\n \n     return new_h, new_state\n \n+class ConvLSTMCell(core_rnn_cell.RNNCell):\n+  \"\"\"Basic Convolutional LSTM recurrent network cell.\n+\n+  https://arxiv.org/pdf/1506.04214v1.pdf\n+  \"\"\"\n+\n+  def __init__(self,\n+               conv_ndims,\n+               input_shape,\n+               output_channels,\n+               kernel_shape,\n+               use_bias=True,\n+               skip_connection=False,\n+               forget_bias=1.0,\n+               initializers=None,\n+               name=\"conv_lstm\"):\n+    \"\"\"Construct ConvLSTMCell.\n+    Args:\n+      conv_ndims: Convolution dimensionality (1, 2 or 3).\n+      input_shape: Shape of the input as int tuple, excluding the batch size.\n+      output_channels: int, number of output channels of the conv LSTM.\n+      kernel_shape: Shape of kernel as in tuple (of size 1,2 or 3).\n+      use_bias: Use bias in convolutions.\n+      skip_connection: If set to `True`, concatenate the input to the\n+      output of the conv LSTM. Default: `False`.\n+      forget_bias: Forget bias.\n+      name: Name of the module.\n+    Raises:\n+      ValueError: If `skip_connection` is `True` and stride is different from 1\n+        or if `input_shape` is incompatible with `conv_ndims`.\n+    \"\"\"\n+    super(ConvLSTMCell, self).__init__(name=name)\n+\n+    if conv_ndims != len(input_shape)-1:\n+      raise ValueError(\"Invalid input_shape {} for conv_ndims={}.\".format(\n+          input_shape, conv_ndims))\n+\n+    self._conv_ndims = conv_ndims\n+    self._input_shape = input_shape\n+    self._output_channels = output_channels\n+    self._kernel_shape = kernel_shape\n+    self._use_bias = use_bias\n+    self._forget_bias = forget_bias\n+    self._skip_connection = skip_connection\n+\n+    self._total_output_channels = output_channels\n+    if self._skip_connection:\n+      self._total_output_channels += self._input_shape[-1]\n+\n+  @property\n+  def output_size(self):\n+    return self._input_shape[:-1] + [self._total_output_channels]\n+\n+  @property\n+  def state_size(self):\n+    return self._input_shape[:-1] + [self._output_channels]\n+\n+  def zero_state(self, batch_size, dtype):\n+    shape = ([batch_size]\n+            + self._input_shape[:-1]\n+            + [self._total_output_channels])\n+    zero_cell = array_ops.zeros(shape, dtype=dtype)\n+    zero_hidden = array_ops.zeros(shape, dtype=dtype)\n+    zero_state = core_rnn_cell.LSTMStateTuple(zero_cell, zero_hidden)\n+    return zero_state\n+\n+  def call(self, inputs, state, scope=None):\n+    cell, hidden = state\n+    new_hidden = _conv([inputs, hidden],\n+                       self._kernel_shape,\n+                       4*self._output_channels,\n+                       self._use_bias)\n+    gates = array_ops.split(value=new_hidden,\n+                            num_or_size_splits=4,\n+                            axis=self._conv_ndims+1)\n+\n+    input_gate, new_input, forget_gate, output_gate = gates\n+    new_cell = math_ops.sigmoid(forget_gate + self._forget_bias) * cell\n+    new_cell += math_ops.sigmoid(input_gate) * math_ops.tanh(new_input)\n+    output = math_ops.tanh(new_cell) * math_ops.sigmoid(output_gate)\n+\n+    if self._skip_connection:\n+      output = array_ops.concat([output, inputs], axis=-1)\n+    new_state = core_rnn_cell.LSTMStateTuple(new_cell, output)\n+    return output, new_state\n+\n+class Conv1DLSTMCell(ConvLSTMCell):\n+  \"\"\"1D convolutional LSTM.\"\"\"\n+\n+  def __init__(self, name=\"conv_1d_lstm\", **kwargs):\n+    \"\"\"Construct Conv1DLSTM. See `snt.ConvLSTM` for more details.\"\"\"\n+    super(Conv1DLSTMCell, self).__init__(conv_ndims=1, **kwargs)\n+\n+class Conv2DLSTMCell(ConvLSTMCell):\n+  \"\"\"2D convolutional LSTM.\"\"\"\n+\n+  def __init__(self, name=\"conv_2d_lstm\", **kwargs):\n+    \"\"\"Construct Conv2DLSTM. See `snt.ConvLSTM` for more details.\"\"\"\n+    super(Conv2DLSTMCell, self).__init__(conv_ndims=2, **kwargs)\n+\n+class Conv3DLSTMCell(ConvLSTMCell):\n+  \"\"\"3D convolutional LSTM.\"\"\"\n+\n+  def __init__(self, name=\"conv_3d_lstm\", **kwargs):\n+    \"\"\"Construct Conv3DLSTM. See `snt.ConvLSTM` for more details.\"\"\"\n+    super(Conv3DLSTMCell, self).__init__(conv_ndims=3, **kwargs)\n+\n+def _conv(args, \n+          filter_size,\n+          num_features,\n+          bias,\n+          bias_start=0.0,\n+          scope=None):", "path": "tensorflow/contrib/rnn/python/ops/rnn_cell.py", "position": null, "original_position": 116, "commit_id": "a884a920d776b48310a79cf82fa7813fe24451df", "original_commit_id": "6966c3cae24e4f17a195947f39960555e00a9d80", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "remove the scope argument.", "created_at": "2017-06-21T22:02:31Z", "updated_at": "2017-08-07T15:19:17Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8891#discussion_r123377724", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8891", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/123377724"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8891#discussion_r123377724"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8891"}}, "body_html": "<p>remove the scope argument.</p>", "body_text": "remove the scope argument."}