{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/123376979", "pull_request_review_id": 45574779, "id": 123376979, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzM3Njk3OQ==", "diff_hunk": "@@ -875,6 +875,125 @@ def testPhasedLSTMCell(self):\n         self.assertAllClose(res[1].c, expected_state_c)\n         self.assertAllClose(res[1].h, expected_state_h)\n \n+  def testConv1DLSTMCell(self):\n+    with self.test_session() as sess:\n+      shape = [2,1]\n+      filter_size = [3]\n+      num_features = 1\n+      batch_size = 2\n+      expected_state_c = np.array(\n+          [[[1.4375670191], [1.4375670191]],\n+           [[2.7542609292], [2.7542609292]]],\n+          dtype=np.float32)\n+      expected_state_h = np.array(\n+          [[[0.6529865603], [0.6529865603]],\n+           [[0.8736877431], [0.8736877431]]],\n+          dtype=np.float32)\n+      with variable_scope.variable_scope(\n+          \"root\", initializer=init_ops.constant_initializer(1.0/2.0)):\n+        x = array_ops.zeros([batch_size, 2, 1])\n+        #print(x.get_shape()[1:])\n+        cell = rnn_cell.Conv1DLSTMCell(input_shape=shape, kernel_shape=filter_size, output_channels=num_features)\n+        hidden = cell.zero_state(batch_size, dtypes.float32)\n+        output, state = cell(x, hidden)\n+\n+        sess.run([variables.global_variables_initializer()])\n+        res = sess.run([output, state], {\n+            hidden[0].name:\n+                np.array([[[1.],[1.]], [[2.],[2.]]]),\n+            x.name:\n+                np.array([[[1.],[1.]], [[2.],[2.]]]),\n+        })\n+        # This is a smoke test, making sure expected values are unchanged.\n+        self.assertEqual(len(res), 2)\n+        self.assertAllClose(res[0], res[1].h)\n+        self.assertAllClose(res[1].c, expected_state_c)\n+        self.assertAllClose(res[1].h, expected_state_h)\n+\n+  def testConv2DLSTMCell(self):\n+    with self.test_session() as sess:\n+      shape = [2,2,1]\n+      filter_size = [3,3]\n+      num_features = 1\n+      batch_size = 2\n+      expected_state_c = np.array(\n+          [[[[1.4375670191], [1.4375670191]],\n+            [[1.4375670191], [1.4375670191]]],\n+           [[[2.7542609292], [2.7542609292]],\n+            [[2.7542609292], [2.7542609292]]]],\n+          dtype=np.float32)\n+      expected_state_h = np.array(\n+          [[[[0.6529865603], [0.6529865603]],\n+            [[0.6529865603], [0.6529865603]]],\n+           [[[0.8736877431], [0.8736877431]],\n+            [[0.8736877431], [0.8736877431]]]],\n+          dtype=np.float32)\n+      with variable_scope.variable_scope(\n+          \"root\", initializer=init_ops.constant_initializer(1.0/4.0)):\n+        x = array_ops.zeros([batch_size, 2, 2, 1])\n+        cell = rnn_cell.Conv2DLSTMCell(input_shape=shape, kernel_shape=filter_size, output_channels=num_features)\n+        hidden = cell.zero_state(batch_size, dtypes.float32)\n+        output, state = cell(x, hidden)\n+\n+        sess.run([variables.global_variables_initializer()])\n+        res = sess.run([output, state], {\n+            hidden[0].name:\n+                np.array([[[[1.],[1.]], [[1.],[1.]]], [[[2.],[2.]], [[2.],[2.]]]]),\n+            x.name:\n+                np.array([[[[1.],[1.]], [[1.],[1.]]], [[[2.],[2.]], [[2.],[2.]]]]),\n+        })\n+        # This is a smoke test, making sure expected values are unchanged.\n+        self.assertEqual(len(res), 2)\n+        self.assertAllClose(res[0], res[1].h)\n+        self.assertAllClose(res[1].c, expected_state_c)\n+        self.assertAllClose(res[1].h, expected_state_h)\n+\n+  def testConv3DLSTMCell(self):\n+    with self.test_session() as sess:\n+      shape = [2,2,2,1]\n+      filter_size = [3,3,3]\n+      num_features = 1\n+      batch_size = 2\n+      expected_state_c = np.array(\n+         [[[[[1.4375670191], [1.4375670191]],\n+            [[1.4375670191], [1.4375670191]]],\n+           [[[1.4375670191], [1.4375670191]],\n+            [[1.4375670191], [1.4375670191]]]],\n+          [[[[2.7542609292], [2.7542609292]],\n+            [[2.7542609292], [2.7542609292]]],\n+           [[[2.7542609292], [2.7542609292]],\n+            [[2.7542609292], [2.7542609292]]]]],\n+          dtype=np.float32)\n+      expected_state_h = np.array(\n+         [[[[[0.6529865603], [0.6529865603]],\n+            [[0.6529865603], [0.6529865603]]],\n+           [[[0.6529865603], [0.6529865603]],\n+            [[0.6529865603], [0.6529865603]]]],\n+          [[[[0.8736877431], [0.8736877431]],\n+            [[0.8736877431], [0.8736877431]]],\n+           [[[0.8736877431], [0.8736877431]],\n+            [[0.8736877431], [0.8736877431]]]]],\n+          dtype=np.float32)\n+      with variable_scope.variable_scope(\n+          \"root\", initializer=init_ops.constant_initializer(1.0/8.0)):\n+        x = array_ops.zeros([batch_size, 2, 2, 2, 1])\n+        cell = rnn_cell.Conv3DLSTMCell(input_shape=shape, kernel_shape=filter_size, output_channels=num_features)\n+        hidden = cell.zero_state(batch_size, dtypes.float32)\n+        output, state = cell(x, hidden)\n+\n+        sess.run([variables.global_variables_initializer()])\n+        res = sess.run([output, state], {\n+            hidden[0].name:\n+                np.array([[[[[1.],[1.]], [[1.],[1.]]],[[[1.],[1.]], [[1.],[1.]]]], [[[[2.],[2.]], [[2.],[2.]]], [[[2.],[2.]], [[2.],[2.]]]]]),", "path": "tensorflow/contrib/rnn/python/kernel_tests/rnn_cell_test.py", "position": null, "original_position": 113, "commit_id": "a884a920d776b48310a79cf82fa7813fe24451df", "original_commit_id": "6966c3cae24e4f17a195947f39960555e00a9d80", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "nit: 80 char limit.", "created_at": "2017-06-21T21:58:31Z", "updated_at": "2017-08-07T15:19:17Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8891#discussion_r123376979", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8891", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/123376979"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8891#discussion_r123376979"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8891"}}, "body_html": "<p>nit: 80 char limit.</p>", "body_text": "nit: 80 char limit."}