{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/253875782", "html_url": "https://github.com/tensorflow/tensorflow/issues/4920#issuecomment-253875782", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4920", "id": 253875782, "node_id": "MDEyOklzc3VlQ29tbWVudDI1Mzg3NTc4Mg==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-14T18:00:46Z", "updated_at": "2016-10-14T18:00:46Z", "author_association": "CONTRIBUTOR", "body_html": "<p>BTW, here's a <a href=\"https://gist.github.com/yaroslavvb/d592394c0cedd32513f8fbb87ca05938\">work-around</a> using <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=724322\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/purpledog\">@purpledog</a> graph editor + <code>tf.is_variable_initialized()</code> to make <code>initialize_all_variables</code> work the same way whether or not <code>initialized_value</code> was used, and which works when initialization is split over several session runs. It works by adding temporary dependency on undocumented \"variable caching node\" <code>&lt;varname&gt;/read</code>. A more robust approach might be to add <code>initializer_once</code> to variables, which is like <code>initializer</code> but is only has effect when variable is not initialized, and add <code>tf.initialize_all_variables_once</code> that will initialize all uninitialized variables in correct order</p>", "body_text": "BTW, here's a work-around using @purpledog graph editor + tf.is_variable_initialized() to make initialize_all_variables work the same way whether or not initialized_value was used, and which works when initialization is split over several session runs. It works by adding temporary dependency on undocumented \"variable caching node\" <varname>/read. A more robust approach might be to add initializer_once to variables, which is like initializer but is only has effect when variable is not initialized, and add tf.initialize_all_variables_once that will initialize all uninitialized variables in correct order", "body": "BTW, here's a [work-around](https://gist.github.com/yaroslavvb/d592394c0cedd32513f8fbb87ca05938) using @purpledog graph editor + `tf.is_variable_initialized()` to make `initialize_all_variables` work the same way whether or not `initialized_value` was used, and which works when initialization is split over several session runs. It works by adding temporary dependency on undocumented \"variable caching node\" `<varname>/read`. A more robust approach might be to add `initializer_once` to variables, which is like `initializer` but is only has effect when variable is not initialized, and add `tf.initialize_all_variables_once` that will initialize all uninitialized variables in correct order\n"}