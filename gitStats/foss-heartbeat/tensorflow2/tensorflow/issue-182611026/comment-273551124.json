{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/273551124", "html_url": "https://github.com/tensorflow/tensorflow/issues/4920#issuecomment-273551124", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4920", "id": 273551124, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzU1MTEyNA==", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-18T17:59:29Z", "updated_at": "2017-01-18T17:59:29Z", "author_association": "MEMBER", "body_html": "<div class=\"email-fragment\">If you want variables' initializations to depend on each other you can use\nvar1.initialized_value in var2's initializer and this should work with the\nnormal tf.global_variables_initializer</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Wed, Jan 18, 2017 at 9:50 AM, Eric Martin ***@***.***&gt; wrote:\n <a class=\"user-mention\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> &lt;<a href=\"https://github.com/yaroslavvb\">https://github.com/yaroslavvb</a>&gt; I think the nicest solution\n here is having a toposorted list of the variables, and then making a\n Session.run call for each variables initializer. It might be possible to\n avoid the overhead of a bunch of Session.run calls by making a chain of\n control dependencies between initializers, but I doubt it since it appears\n data dependencies aren't obeyed during initialization.\n\n I was starting to write a toposort routine, but I realized the graph is\n constructed with ancestors first and the TF collections are appended to,\n which means tf.global_variables is already toposorted. This is a little\n bit of hack since it's not specified that TF collections are appended to,\n but I think it will always work to do something like\n\n for v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):\n     sess.run(v.initializer)\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"182611026\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/4920\" href=\"https://github.com/tensorflow/tensorflow/issues/4920#issuecomment-273548257\">#4920 (comment)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/AAATxQQrxYc_4IBYyapNwnNr2hpxA0ajks5rTlDugaJpZM4KVHy9\">https://github.com/notifications/unsubscribe-auth/AAATxQQrxYc_4IBYyapNwnNr2hpxA0ajks5rTlDugaJpZM4KVHy9</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n<div class=\"email-signature-reply\">-- \n - Alex</div>\n</div>", "body_text": "If you want variables' initializations to depend on each other you can use\nvar1.initialized_value in var2's initializer and this should work with the\nnormal tf.global_variables_initializer\n\u2026\nOn Wed, Jan 18, 2017 at 9:50 AM, Eric Martin ***@***.***> wrote:\n @yaroslavvb <https://github.com/yaroslavvb> I think the nicest solution\n here is having a toposorted list of the variables, and then making a\n Session.run call for each variables initializer. It might be possible to\n avoid the overhead of a bunch of Session.run calls by making a chain of\n control dependencies between initializers, but I doubt it since it appears\n data dependencies aren't obeyed during initialization.\n\n I was starting to write a toposort routine, but I realized the graph is\n constructed with ancestors first and the TF collections are appended to,\n which means tf.global_variables is already toposorted. This is a little\n bit of hack since it's not specified that TF collections are appended to,\n but I think it will always work to do something like\n\n for v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):\n     sess.run(v.initializer)\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#4920 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/AAATxQQrxYc_4IBYyapNwnNr2hpxA0ajks5rTlDugaJpZM4KVHy9>\n .\n\n\n-- \n - Alex", "body": "If you want variables' initializations to depend on each other you can use\nvar1.initialized_value in var2's initializer and this should work with the\nnormal tf.global_variables_initializer\n\nOn Wed, Jan 18, 2017 at 9:50 AM, Eric Martin <notifications@github.com>\nwrote:\n\n> @yaroslavvb <https://github.com/yaroslavvb> I think the nicest solution\n> here is having a toposorted list of the variables, and then making a\n> Session.run call for each variables initializer. It might be possible to\n> avoid the overhead of a bunch of Session.run calls by making a chain of\n> control dependencies between initializers, but I doubt it since it appears\n> data dependencies aren't obeyed during initialization.\n>\n> I was starting to write a toposort routine, but I realized the graph is\n> constructed with ancestors first and the TF collections are appended to,\n> which means tf.global_variables is already toposorted. This is a little\n> bit of hack since it's not specified that TF collections are appended to,\n> but I think it will always work to do something like\n>\n> for v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):\n>     sess.run(v.initializer)\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/issues/4920#issuecomment-273548257>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAATxQQrxYc_4IBYyapNwnNr2hpxA0ajks5rTlDugaJpZM4KVHy9>\n> .\n>\n\n\n\n-- \n - Alex\n"}