{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/274233922", "html_url": "https://github.com/tensorflow/tensorflow/issues/4920#issuecomment-274233922", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4920", "id": 274233922, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDIzMzkyMg==", "user": {"login": "ZhimingZhou", "id": 11959472, "node_id": "MDQ6VXNlcjExOTU5NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/11959472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZhimingZhou", "html_url": "https://github.com/ZhimingZhou", "followers_url": "https://api.github.com/users/ZhimingZhou/followers", "following_url": "https://api.github.com/users/ZhimingZhou/following{/other_user}", "gists_url": "https://api.github.com/users/ZhimingZhou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZhimingZhou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZhimingZhou/subscriptions", "organizations_url": "https://api.github.com/users/ZhimingZhou/orgs", "repos_url": "https://api.github.com/users/ZhimingZhou/repos", "events_url": "https://api.github.com/users/ZhimingZhou/events{/privacy}", "received_events_url": "https://api.github.com/users/ZhimingZhou/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-21T04:21:45Z", "updated_at": "2017-01-21T04:21:45Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> Thank for the new version. But I found it still re-do the initialization. There seems still have some modifications to the graph.</p>\n<p><code>BTW. The assert on 'unique tf.identity' seems not hold. In my case, some node have more than one identity. And adam optimizer's moving mean and variance parameter have zero consumer. [Strange, but it should be the case, according to the debug info]</code></p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=287200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/eamartin\">@eamartin</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a><br>\nI still have not found a efficient way to do the initialization, when it depends input data, and involving date flow. For example:</p>\n<pre><code>@eamartin \nx = tf.Variable(5.0)\ny = x + 1.0\nz = tf.Variable(tf.zeros_like(y))\n</code></pre>\n<p>initial_value or initialized_value() seems not suitable when involving data manipulation outside variable initializer. But this is essential when people want to do data dependent initialization.</p>\n<p>The following works, but it could be too slow. It rerun the graph for each variable.</p>\n<pre><code>@eamartin \nfor v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):\n    sess.run(v.initializer)\n</code></pre>\n<p>As you mentioned, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=287200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/eamartin\">@eamartin</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a>, I guess a simple workaround solution is run the variable initialization in order with one sess.run(). I tried but failed to finish it. For example, I tried adding all the variable in order, but it seems not work. Could you help? Thanks.</p>", "body_text": "@yaroslavvb Thank for the new version. But I found it still re-do the initialization. There seems still have some modifications to the graph.\nBTW. The assert on 'unique tf.identity' seems not hold. In my case, some node have more than one identity. And adam optimizer's moving mean and variance parameter have zero consumer. [Strange, but it should be the case, according to the debug info]\n@alextp @eamartin @yaroslavvb\nI still have not found a efficient way to do the initialization, when it depends input data, and involving date flow. For example:\n@eamartin \nx = tf.Variable(5.0)\ny = x + 1.0\nz = tf.Variable(tf.zeros_like(y))\n\ninitial_value or initialized_value() seems not suitable when involving data manipulation outside variable initializer. But this is essential when people want to do data dependent initialization.\nThe following works, but it could be too slow. It rerun the graph for each variable.\n@eamartin \nfor v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):\n    sess.run(v.initializer)\n\nAs you mentioned, @eamartin @yaroslavvb, I guess a simple workaround solution is run the variable initialization in order with one sess.run(). I tried but failed to finish it. For example, I tried adding all the variable in order, but it seems not work. Could you help? Thanks.", "body": "@yaroslavvb Thank for the new version. But I found it still re-do the initialization. There seems still have some modifications to the graph.  \r\n\r\n`BTW. The assert on 'unique tf.identity' seems not hold. In my case, some node have more than one identity. And adam optimizer's moving mean and variance parameter have zero consumer. [Strange, but it should be the case, according to the debug info]`\r\n\r\n@alextp @eamartin @yaroslavvb \r\nI still have not found a efficient way to do the initialization, when it depends input data, and involving date flow. For example:\r\n```\r\n@eamartin \r\nx = tf.Variable(5.0)\r\ny = x + 1.0\r\nz = tf.Variable(tf.zeros_like(y))\r\n```\r\ninitial_value or initialized_value() seems not suitable when involving data manipulation outside variable initializer. But this is essential when people want to do data dependent initialization.\r\n\r\nThe following works, but it could be too slow. It rerun the graph for each variable.\r\n```\r\n@eamartin \r\nfor v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES):\r\n    sess.run(v.initializer)\r\n```\r\n\r\nAs you mentioned, @eamartin @yaroslavvb, I guess a simple workaround solution is run the variable initialization in order with one sess.run(). I tried but failed to finish it. For example, I tried adding all the variable in order, but it seems not work. Could you help? Thanks."}