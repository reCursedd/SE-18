{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/263660128", "html_url": "https://github.com/tensorflow/tensorflow/issues/4920#issuecomment-263660128", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4920", "id": 263660128, "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzY2MDEyOA==", "user": {"login": "eamartin", "id": 287200, "node_id": "MDQ6VXNlcjI4NzIwMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/287200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eamartin", "html_url": "https://github.com/eamartin", "followers_url": "https://api.github.com/users/eamartin/followers", "following_url": "https://api.github.com/users/eamartin/following{/other_user}", "gists_url": "https://api.github.com/users/eamartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/eamartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eamartin/subscriptions", "organizations_url": "https://api.github.com/users/eamartin/orgs", "repos_url": "https://api.github.com/users/eamartin/repos", "events_url": "https://api.github.com/users/eamartin/events{/privacy}", "received_events_url": "https://api.github.com/users/eamartin/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-29T18:45:14Z", "updated_at": "2016-11-29T18:45:14Z", "author_association": "NONE", "body_html": "<p>Are there any PRs associated with this?</p>\n<p>I've written code several times that does something like</p>\n<div class=\"highlight highlight-source-python\"><pre>x <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">100</span>])\nv0 <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>v0<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.zeros_like(x))\nz <span class=\"pl-k\">=</span> x <span class=\"pl-k\">*</span> v0\nv1 <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>v1<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>tf.zeros_like(z))</pre></div>\n<p>This cannot be initialized with <code>tf.initialize_all_variables()</code> because <code>v1</code>'s initializer depends on <code>v0</code> (but only the shape). I've hacked around this by writing a <code>static_zeros_like</code> function that only uses shape info from graph definition time (<code>tensor.get_shape().as_list()</code>).</p>\n<p>It seems like the clean solution is to do a toposort on the graph consisting of all of the predecessors of any initializer. Executing the \"initializer graph\" nodes in this toposorted order will guarantee safe initialization.</p>", "body_text": "Are there any PRs associated with this?\nI've written code several times that does something like\nx = tf.placeholder(tf.float32, [100])\nv0 = tf.get_variable('v0', initializer=tf.zeros_like(x))\nz = x * v0\nv1 = tf.get_variable('v1', initializer=tf.zeros_like(z))\nThis cannot be initialized with tf.initialize_all_variables() because v1's initializer depends on v0 (but only the shape). I've hacked around this by writing a static_zeros_like function that only uses shape info from graph definition time (tensor.get_shape().as_list()).\nIt seems like the clean solution is to do a toposort on the graph consisting of all of the predecessors of any initializer. Executing the \"initializer graph\" nodes in this toposorted order will guarantee safe initialization.", "body": "Are there any PRs associated with this?\r\n\r\nI've written code several times that does something like\r\n```python\r\nx = tf.placeholder(tf.float32, [100])\r\nv0 = tf.get_variable('v0', initializer=tf.zeros_like(x))\r\nz = x * v0\r\nv1 = tf.get_variable('v1', initializer=tf.zeros_like(z))\r\n```\r\nThis cannot be initialized with ``tf.initialize_all_variables()`` because ``v1``'s initializer depends on ``v0`` (but only the shape). I've hacked around this by writing a ``static_zeros_like`` function that only uses shape info from graph definition time (``tensor.get_shape().as_list()``).\r\n\r\nIt seems like the clean solution is to do a toposort on the graph consisting of all of the predecessors of any initializer. Executing the \"initializer graph\" nodes in this toposorted order will guarantee safe initialization."}