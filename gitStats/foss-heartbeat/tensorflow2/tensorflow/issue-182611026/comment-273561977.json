{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/273561977", "html_url": "https://github.com/tensorflow/tensorflow/issues/4920#issuecomment-273561977", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4920", "id": 273561977, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzU2MTk3Nw==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-18T18:39:34Z", "updated_at": "2017-01-18T18:39:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> the problem with <code>initialized_value</code> is that it reruns initializers. This causes inconsistent results when your variable initialization has to be split over several <code>session.run</code> calls.</p>\n<p>A different snag is this situation -- your code does calculations based on Tensor <code>a</code>. Later you decide use <code>Variable</code> for <code>a</code> instead of <code>Tensor</code>. Now you have to go through your code and replace some instances of <code>a</code> with <code>a.initialized_value()</code></p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=287200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/eamartin\">@eamartin</a> -- I think  that's a reasonable replacement. First of all, overhead of <code>session.run</code> is something like 100 usec, and you probably won't have more than 1000 layers in your topological sort. Secondly, I think you could collapse it into a single <code>.run</code> call by using <code>tf.while</code> loop</p>", "body_text": "@alextp the problem with initialized_value is that it reruns initializers. This causes inconsistent results when your variable initialization has to be split over several session.run calls.\nA different snag is this situation -- your code does calculations based on Tensor a. Later you decide use Variable for a instead of Tensor. Now you have to go through your code and replace some instances of a with a.initialized_value()\n@eamartin -- I think  that's a reasonable replacement. First of all, overhead of session.run is something like 100 usec, and you probably won't have more than 1000 layers in your topological sort. Secondly, I think you could collapse it into a single .run call by using tf.while loop", "body": "@alextp the problem with `initialized_value` is that it reruns initializers. This causes inconsistent results when your variable initialization has to be split over several `session.run` calls.\r\n\r\nA different snag is this situation -- your code does calculations based on Tensor `a`. Later you decide use `Variable` for `a` instead of `Tensor`. Now you have to go through your code and replace some instances of `a` with `a.initialized_value()`\r\n\r\n@eamartin -- I think  that's a reasonable replacement. First of all, overhead of `session.run` is something like 100 usec, and you probably won't have more than 1000 layers in your topological sort. Secondly, I think you could collapse it into a single `.run` call by using `tf.while` loop"}