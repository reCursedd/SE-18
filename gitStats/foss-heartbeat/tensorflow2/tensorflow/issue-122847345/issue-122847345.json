{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/537", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/537/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/537/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/537/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/537", "id": 122847345, "node_id": "MDU6SXNzdWUxMjI4NDczNDU=", "number": 537, "title": "Is there a way to turn off variable reuse a number of scopes down?", "user": {"login": "cinjon", "id": 615351, "node_id": "MDQ6VXNlcjYxNTM1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/615351?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cinjon", "html_url": "https://github.com/cinjon", "followers_url": "https://api.github.com/users/cinjon/followers", "following_url": "https://api.github.com/users/cinjon/following{/other_user}", "gists_url": "https://api.github.com/users/cinjon/gists{/gist_id}", "starred_url": "https://api.github.com/users/cinjon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cinjon/subscriptions", "organizations_url": "https://api.github.com/users/cinjon/orgs", "repos_url": "https://api.github.com/users/cinjon/repos", "events_url": "https://api.github.com/users/cinjon/events{/privacy}", "received_events_url": "https://api.github.com/users/cinjon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lukaszkaiser", "id": 684901, "node_id": "MDQ6VXNlcjY4NDkwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/684901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszkaiser", "html_url": "https://github.com/lukaszkaiser", "followers_url": "https://api.github.com/users/lukaszkaiser/followers", "following_url": "https://api.github.com/users/lukaszkaiser/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszkaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszkaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszkaiser/subscriptions", "organizations_url": "https://api.github.com/users/lukaszkaiser/orgs", "repos_url": "https://api.github.com/users/lukaszkaiser/repos", "events_url": "https://api.github.com/users/lukaszkaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszkaiser/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 15, "created_at": "2015-12-17T23:44:06Z", "updated_at": "2016-12-10T19:49:03Z", "closed_at": "2015-12-19T00:13:41Z", "author_association": "NONE", "body_html": "<p>I'm having trouble with an under-sharing error for scope reuse. A specific example that I can point to using TF repo code is if we were to build an architecture with parallel attention modules.</p>\n<p>Say we did something in the attention_decoder in rnn/seq2seq.py like this:</p>\n<pre><code>        # module can be any of ['a', 'b', 'c'...]\n        with tf.variable_scope(module, reuse=None):\n          k = tf.get_variable('AttnW', [1, 1, attn_size, attention_vec_size])\n          hidden_features.append(tf.nn.conv2d(hidden, k, [1, 1, 1, 1], \"SAME\"))\n          v.append(tf.get_variable('AttnV', [attention_vec_size]))\n</code></pre>\n<p>I then build the model by running:</p>\n<pre><code>for module in modules:\n  _outputs, _losses = seq2seq.model_with_buckets(..., \n                  lambda x, y: seq2seq.embedding_attention_seq2seq(x, y, module, False), \n                  ...)\n  ...\n</code></pre>\n<p>This works just fine for one module, i.e. the first loop goes off without a hitch. When I get to the second module though, I get the following error:</p>\n<p>ValueError: Under-sharing: Variable embedding_attention_seq2seq/embedding_attention_decoder/attention_decoder/b/AttnW_0 does not exist, disallowed. Did you mean to set reuse=None in VarScope?</p>\n<p>I realize that I can build the variables up front and then push them through functions to where they're needed. However, that seems really bad because then there are floating variables built in the beginning that are way out of program scope. Is there a better way?</p>", "body_text": "I'm having trouble with an under-sharing error for scope reuse. A specific example that I can point to using TF repo code is if we were to build an architecture with parallel attention modules.\nSay we did something in the attention_decoder in rnn/seq2seq.py like this:\n        # module can be any of ['a', 'b', 'c'...]\n        with tf.variable_scope(module, reuse=None):\n          k = tf.get_variable('AttnW', [1, 1, attn_size, attention_vec_size])\n          hidden_features.append(tf.nn.conv2d(hidden, k, [1, 1, 1, 1], \"SAME\"))\n          v.append(tf.get_variable('AttnV', [attention_vec_size]))\n\nI then build the model by running:\nfor module in modules:\n  _outputs, _losses = seq2seq.model_with_buckets(..., \n                  lambda x, y: seq2seq.embedding_attention_seq2seq(x, y, module, False), \n                  ...)\n  ...\n\nThis works just fine for one module, i.e. the first loop goes off without a hitch. When I get to the second module though, I get the following error:\nValueError: Under-sharing: Variable embedding_attention_seq2seq/embedding_attention_decoder/attention_decoder/b/AttnW_0 does not exist, disallowed. Did you mean to set reuse=None in VarScope?\nI realize that I can build the variables up front and then push them through functions to where they're needed. However, that seems really bad because then there are floating variables built in the beginning that are way out of program scope. Is there a better way?", "body": "I'm having trouble with an under-sharing error for scope reuse. A specific example that I can point to using TF repo code is if we were to build an architecture with parallel attention modules.\n\nSay we did something in the attention_decoder in rnn/seq2seq.py like this:\n\n```\n        # module can be any of ['a', 'b', 'c'...]\n        with tf.variable_scope(module, reuse=None):\n          k = tf.get_variable('AttnW', [1, 1, attn_size, attention_vec_size])\n          hidden_features.append(tf.nn.conv2d(hidden, k, [1, 1, 1, 1], \"SAME\"))\n          v.append(tf.get_variable('AttnV', [attention_vec_size]))\n```\n\nI then build the model by running:\n\n```\nfor module in modules:\n  _outputs, _losses = seq2seq.model_with_buckets(..., \n                  lambda x, y: seq2seq.embedding_attention_seq2seq(x, y, module, False), \n                  ...)\n  ...\n```\n\nThis works just fine for one module, i.e. the first loop goes off without a hitch. When I get to the second module though, I get the following error:\n\nValueError: Under-sharing: Variable embedding_attention_seq2seq/embedding_attention_decoder/attention_decoder/b/AttnW_0 does not exist, disallowed. Did you mean to set reuse=None in VarScope?\n\nI realize that I can build the variables up front and then push them through functions to where they're needed. However, that seems really bad because then there are floating variables built in the beginning that are way out of program scope. Is there a better way?\n"}