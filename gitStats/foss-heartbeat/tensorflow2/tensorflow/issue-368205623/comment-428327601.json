{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/428327601", "html_url": "https://github.com/tensorflow/tensorflow/issues/22837#issuecomment-428327601", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22837", "id": 428327601, "node_id": "MDEyOklzc3VlQ29tbWVudDQyODMyNzYwMQ==", "user": {"login": "omalleyt12", "id": 29100818, "node_id": "MDQ6VXNlcjI5MTAwODE4", "avatar_url": "https://avatars3.githubusercontent.com/u/29100818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omalleyt12", "html_url": "https://github.com/omalleyt12", "followers_url": "https://api.github.com/users/omalleyt12/followers", "following_url": "https://api.github.com/users/omalleyt12/following{/other_user}", "gists_url": "https://api.github.com/users/omalleyt12/gists{/gist_id}", "starred_url": "https://api.github.com/users/omalleyt12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omalleyt12/subscriptions", "organizations_url": "https://api.github.com/users/omalleyt12/orgs", "repos_url": "https://api.github.com/users/omalleyt12/repos", "events_url": "https://api.github.com/users/omalleyt12/events{/privacy}", "received_events_url": "https://api.github.com/users/omalleyt12/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-09T19:51:45Z", "updated_at": "2018-10-09T19:51:45Z", "author_association": "NONE", "body_html": "<p>Working on a fix for this, in the meantime a workaround is to provide <code>input_shape</code> to the first Layer or your Model:</p>\n<div class=\"highlight highlight-source-python\"><pre>model <span class=\"pl-k\">=</span> tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten(<span class=\"pl-v\">input_shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">...</span>))\nmodel.add(tf.keras.layers.Dense(<span class=\"pl-c1\">128</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(<span class=\"pl-c1\">128</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(<span class=\"pl-c1\">10</span>, <span class=\"pl-v\">activation</span><span class=\"pl-k\">=</span>tf.nn.softmax))\n\nmodel.compile(<span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>adam<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>sparse_categorical_crossentropy<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">metrics</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>accuracy<span class=\"pl-pds\">'</span></span>])\n\nmodel.fit(x_train, y_train, <span class=\"pl-v\">epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n\nmodel.save(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>epic_num_reader.model<span class=\"pl-pds\">'</span></span>)</pre></div>", "body_text": "Working on a fix for this, in the meantime a workaround is to provide input_shape to the first Layer or your Model:\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten(input_shape=...))\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=3)\n\nmodel.save('epic_num_reader.model')", "body": "Working on a fix for this, in the meantime a workaround is to provide `input_shape` to the first Layer or your Model:\r\n\r\n```python\r\nmodel = tf.keras.models.Sequential()\r\nmodel.add(tf.keras.layers.Flatten(input_shape=...))\r\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\r\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\r\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))\r\n\r\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\r\n\r\nmodel.fit(x_train, y_train, epochs=3)\r\n\r\nmodel.save('epic_num_reader.model')\r\n```"}