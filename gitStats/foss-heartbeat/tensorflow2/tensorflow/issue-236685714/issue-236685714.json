{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10800", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10800/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10800/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10800/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10800", "id": 236685714, "node_id": "MDU6SXNzdWUyMzY2ODU3MTQ=", "number": 10800, "title": "tf.cond should be evaluated lazily", "user": {"login": "3rd3", "id": 2372391, "node_id": "MDQ6VXNlcjIzNzIzOTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2372391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/3rd3", "html_url": "https://github.com/3rd3", "followers_url": "https://api.github.com/users/3rd3/followers", "following_url": "https://api.github.com/users/3rd3/following{/other_user}", "gists_url": "https://api.github.com/users/3rd3/gists{/gist_id}", "starred_url": "https://api.github.com/users/3rd3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/3rd3/subscriptions", "organizations_url": "https://api.github.com/users/3rd3/orgs", "repos_url": "https://api.github.com/users/3rd3/repos", "events_url": "https://api.github.com/users/3rd3/events{/privacy}", "received_events_url": "https://api.github.com/users/3rd3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-06-17T21:41:08Z", "updated_at": "2017-07-01T13:48:20Z", "closed_at": "2017-06-30T18:11:07Z", "author_association": "NONE", "body_html": "<p>It should be possible to statically analyze the following graph such that the execution of the one branch is stopped early if the other branch is determined to be chosen. Am I missing some different function in TensorFlow that allows to do this? Perhaps using control dependencies?</p>\n<p>In the following code the identity matrix is multiplied many times and a placeholder threshold determines whether the second multiplication or the last is chosen as output of the graph.</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\nimport timeit\n\nN = 2048\n\nx = tf.placeholder(tf.float32, [N,N])\nt = tf.placeholder(tf.float32)\nnet = x\nstop = None\nfor i in range(300):\n  net = tf.matmul(net, net)\n  if i == 1:\n    stop = net\n\nnet = tf.cond(tf.reduce_sum(stop) &lt; t, lambda: stop * 0., lambda: net)\n\nsess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n\nr = None\n\nstart_time = timeit.default_timer()\nfor i in range(10):\n  r = sess.run(net, feed_dict={x: np.eye(N), t: N})\nprint(r)\nprint(timeit.default_timer() - start_time)\n\nstart_time = timeit.default_timer()\nfor i in range(10):\n  r = sess.run(net, feed_dict={x: np.eye(N), t: N + 1})\nprint(r)\nprint(timeit.default_timer() - start_time)\n</code></pre>\n<p>Both runs take roughly the same time even though the second run only depend on the first two matrix multiplications (at least if one accounts for the warm-up phase which give the first run a slight disadvantage).</p>\n<p>I hope I am not missing something obvious. Thanks.</p>", "body_text": "It should be possible to statically analyze the following graph such that the execution of the one branch is stopped early if the other branch is determined to be chosen. Am I missing some different function in TensorFlow that allows to do this? Perhaps using control dependencies?\nIn the following code the identity matrix is multiplied many times and a placeholder threshold determines whether the second multiplication or the last is chosen as output of the graph.\nimport tensorflow as tf\nimport numpy as np\nimport timeit\n\nN = 2048\n\nx = tf.placeholder(tf.float32, [N,N])\nt = tf.placeholder(tf.float32)\nnet = x\nstop = None\nfor i in range(300):\n  net = tf.matmul(net, net)\n  if i == 1:\n    stop = net\n\nnet = tf.cond(tf.reduce_sum(stop) < t, lambda: stop * 0., lambda: net)\n\nsess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n\nr = None\n\nstart_time = timeit.default_timer()\nfor i in range(10):\n  r = sess.run(net, feed_dict={x: np.eye(N), t: N})\nprint(r)\nprint(timeit.default_timer() - start_time)\n\nstart_time = timeit.default_timer()\nfor i in range(10):\n  r = sess.run(net, feed_dict={x: np.eye(N), t: N + 1})\nprint(r)\nprint(timeit.default_timer() - start_time)\n\nBoth runs take roughly the same time even though the second run only depend on the first two matrix multiplications (at least if one accounts for the warm-up phase which give the first run a slight disadvantage).\nI hope I am not missing something obvious. Thanks.", "body": "It should be possible to statically analyze the following graph such that the execution of the one branch is stopped early if the other branch is determined to be chosen. Am I missing some different function in TensorFlow that allows to do this? Perhaps using control dependencies?\r\n\r\nIn the following code the identity matrix is multiplied many times and a placeholder threshold determines whether the second multiplication or the last is chosen as output of the graph.\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\nimport timeit\r\n\r\nN = 2048\r\n\r\nx = tf.placeholder(tf.float32, [N,N])\r\nt = tf.placeholder(tf.float32)\r\nnet = x\r\nstop = None\r\nfor i in range(300):\r\n  net = tf.matmul(net, net)\r\n  if i == 1:\r\n    stop = net\r\n\r\nnet = tf.cond(tf.reduce_sum(stop) < t, lambda: stop * 0., lambda: net)\r\n\r\nsess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\r\n\r\nr = None\r\n\r\nstart_time = timeit.default_timer()\r\nfor i in range(10):\r\n  r = sess.run(net, feed_dict={x: np.eye(N), t: N})\r\nprint(r)\r\nprint(timeit.default_timer() - start_time)\r\n\r\nstart_time = timeit.default_timer()\r\nfor i in range(10):\r\n  r = sess.run(net, feed_dict={x: np.eye(N), t: N + 1})\r\nprint(r)\r\nprint(timeit.default_timer() - start_time)\r\n```\r\n\r\nBoth runs take roughly the same time even though the second run only depend on the first two matrix multiplications (at least if one accounts for the warm-up phase which give the first run a slight disadvantage).\r\n\r\nI hope I am not missing something obvious. Thanks."}