{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/312303620", "html_url": "https://github.com/tensorflow/tensorflow/issues/10800#issuecomment-312303620", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10800", "id": 312303620, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjMwMzYyMA==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-30T15:48:58Z", "updated_at": "2017-06-30T15:48:58Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2372391\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/3rd3\">@3rd3</a> it's possible to do this by modifying the graph on the client level. Lazy evaluation is implemented using <code>switch/merge</code> statements, and <code>tf.cond</code> inserts those statements around the tensors created in <code>tf.cond</code> call. If you want to add laziness to tensors that have already been created, you can use <code>graph_editor</code> to modify the graph with the proper structure.</p>\n<p>For instance, here's an example of modifying the graph to run variable initializer lazily -- <a href=\"https://gist.github.com/yaroslavvb/d67410e240369736fc4ba0267250ef27\">https://gist.github.com/yaroslavvb/d67410e240369736fc4ba0267250ef27</a></p>", "body_text": "@3rd3 it's possible to do this by modifying the graph on the client level. Lazy evaluation is implemented using switch/merge statements, and tf.cond inserts those statements around the tensors created in tf.cond call. If you want to add laziness to tensors that have already been created, you can use graph_editor to modify the graph with the proper structure.\nFor instance, here's an example of modifying the graph to run variable initializer lazily -- https://gist.github.com/yaroslavvb/d67410e240369736fc4ba0267250ef27", "body": "@3rd3 it's possible to do this by modifying the graph on the client level. Lazy evaluation is implemented using `switch/merge` statements, and `tf.cond` inserts those statements around the tensors created in `tf.cond` call. If you want to add laziness to tensors that have already been created, you can use `graph_editor` to modify the graph with the proper structure.\r\n\r\nFor instance, here's an example of modifying the graph to run variable initializer lazily -- https://gist.github.com/yaroslavvb/d67410e240369736fc4ba0267250ef27"}