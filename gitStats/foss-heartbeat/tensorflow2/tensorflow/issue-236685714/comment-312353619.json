{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/312353619", "html_url": "https://github.com/tensorflow/tensorflow/issues/10800#issuecomment-312353619", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10800", "id": 312353619, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjM1MzYxOQ==", "user": {"login": "3rd3", "id": 2372391, "node_id": "MDQ6VXNlcjIzNzIzOTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/2372391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/3rd3", "html_url": "https://github.com/3rd3", "followers_url": "https://api.github.com/users/3rd3/followers", "following_url": "https://api.github.com/users/3rd3/following{/other_user}", "gists_url": "https://api.github.com/users/3rd3/gists{/gist_id}", "starred_url": "https://api.github.com/users/3rd3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/3rd3/subscriptions", "organizations_url": "https://api.github.com/users/3rd3/orgs", "repos_url": "https://api.github.com/users/3rd3/repos", "events_url": "https://api.github.com/users/3rd3/events{/privacy}", "received_events_url": "https://api.github.com/users/3rd3/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-30T19:26:11Z", "updated_at": "2017-06-30T19:26:11Z", "author_association": "NONE", "body_html": "<p>I am wondering why you use imperative semantics here when static analysis and optimization is exactly the strong suit of declarative programming.</p>\n<p>It also seems that TensorFlow is already lazy in some regards because in the following case <code>y</code> is not computed since it is not queried.</p>\n<pre><code>x = tf.no_op()\ny = tf.no_op()\nsess.run(x)\n</code></pre>\n<p>Query laziness, but no branching laziness? This seems to me like an odd mix of different paradigms.</p>", "body_text": "I am wondering why you use imperative semantics here when static analysis and optimization is exactly the strong suit of declarative programming.\nIt also seems that TensorFlow is already lazy in some regards because in the following case y is not computed since it is not queried.\nx = tf.no_op()\ny = tf.no_op()\nsess.run(x)\n\nQuery laziness, but no branching laziness? This seems to me like an odd mix of different paradigms.", "body": "I am wondering why you use imperative semantics here when static analysis and optimization is exactly the strong suit of declarative programming.\r\n\r\nIt also seems that TensorFlow is already lazy in some regards because in the following case `y` is not computed since it is not queried.\r\n\r\n    x = tf.no_op()\r\n    y = tf.no_op()\r\n    sess.run(x)\r\n\r\nQuery laziness, but no branching laziness? This seems to me like an odd mix of different paradigms."}