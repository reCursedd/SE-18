{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/116256542", "pull_request_review_id": 37868553, "id": 116256542, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjI1NjU0Mg==", "diff_hunk": "@@ -558,6 +558,19 @@ contents: 0-D. PNG-encoded image.\n )doc\");\n \n // --------------------------------------------------------------------------\n+REGISTER_OP(\"DecodeBmp\")\n+    .Input(\"contents: string\")\n+    .Output(\"image: uint8\")", "path": "tensorflow/core/ops/image_ops.cc", "position": 6, "original_position": 6, "commit_id": "c8bf54f0283438e297b3cb0768f77f47635f65f3", "original_commit_id": "9f4d57ffd2a118942be5cce50e7aed4fcfab3f3c", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "Two thoughts here:\r\n\r\n1) uint8 isn't the only possible output: if the bpp is 32 bits, we'd want to be able to produce uint32 tensors, right?  If so, perhaps we can do:\r\n\r\n.Output(\"image: T\")\r\n.Attr(\"T: {uint8, uint16, uint32} = DT_UINT8\")\r\n\r\nI'm not sure what the default should be: are most bmp's only bpp == 8 ?\r\n\r\nYou then would need to templatize the OpKernel by output type, and register different kernels using TypeConstraint on REGISTER_KERNEL; let me know if you'd like some more pointers about how to do this!", "created_at": "2017-05-12T15:20:19Z", "updated_at": "2017-05-17T03:26:01Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9563#discussion_r116256542", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9563", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/116256542"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9563#discussion_r116256542"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9563"}}, "body_html": "<p>Two thoughts here:</p>\n<ol>\n<li>uint8 isn't the only possible output: if the bpp is 32 bits, we'd want to be able to produce uint32 tensors, right?  If so, perhaps we can do:</li>\n</ol>\n<p>.Output(\"image: T\")<br>\n.Attr(\"T: {uint8, uint16, uint32} = DT_UINT8\")</p>\n<p>I'm not sure what the default should be: are most bmp's only bpp == 8 ?</p>\n<p>You then would need to templatize the OpKernel by output type, and register different kernels using TypeConstraint on REGISTER_KERNEL; let me know if you'd like some more pointers about how to do this!</p>", "body_text": "Two thoughts here:\n\nuint8 isn't the only possible output: if the bpp is 32 bits, we'd want to be able to produce uint32 tensors, right?  If so, perhaps we can do:\n\n.Output(\"image: T\")\n.Attr(\"T: {uint8, uint16, uint32} = DT_UINT8\")\nI'm not sure what the default should be: are most bmp's only bpp == 8 ?\nYou then would need to templatize the OpKernel by output type, and register different kernels using TypeConstraint on REGISTER_KERNEL; let me know if you'd like some more pointers about how to do this!"}