{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/115887496", "pull_request_review_id": 37465512, "id": 115887496, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTg4NzQ5Ng==", "diff_hunk": "@@ -0,0 +1,104 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+// See docs in ../ops/image_ops.cc\n+\n+#include <memory>\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/register_types.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/framework/types.pb.h\"\n+#include \"tensorflow/core/lib/core/status.h\"\n+#include \"tensorflow/core/platform/logging.h\"\n+\n+namespace tensorflow {\n+\n+// Decode the contents of a BMP file\n+class DecodeBmpOp : public OpKernel {\n+ public:\n+  explicit DecodeBmpOp(OpKernelConstruction* context) : OpKernel(context) {\n+    OP_REQUIRES_OK(context, context->GetAttr(\"channels\", &channels));\n+    OP_REQUIRES(\n+        context, channels == 0 || channels == 3,\n+        errors::InvalidArgument(\"channels must be 0 or 3, got \", channels));\n+  }\n+\n+  void Compute(OpKernelContext* context) override {\n+    const Tensor& contents = context->input(0);\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(contents.shape()),\n+                errors::InvalidArgument(\"contents must be scalar, got shape \",\n+                                        contents.shape().DebugString()));\n+\n+    // Start decoding image to get shape details\n+    const StringPiece input = contents.scalar<string>()();\n+\n+    bool top_down = false;\n+    uint8* const img_bytes = (uint8*)input.data();\n+    const int header_size = *(reinterpret_cast<int*>(img_bytes + 10));\n+    const int width = *(reinterpret_cast<int*>(img_bytes + 18));\n+    const int height = *(reinterpret_cast<int*>(img_bytes + 22));\n+\n+    // if height is negative, data layout is top down\n+    // otherwise, it's bottom up\n+    top_down = (height < 0) ? true : false;\n+\n+    // Decode image, allocating tensor once the image size is known\n+    Tensor* output = nullptr;\n+    const ::tensorflow::Status status = context->allocate_output(", "path": "tensorflow/core/kernels/decode_bmp_op.cc", "position": null, "original_position": 61, "commit_id": "c8bf54f0283438e297b3cb0768f77f47635f65f3", "original_commit_id": "23480685f1967b1dc17f52b7a8a0660b5da825b8", "user": {"login": "freedomtan", "id": 3395998, "node_id": "MDQ6VXNlcjMzOTU5OTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3395998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/freedomtan", "html_url": "https://github.com/freedomtan", "followers_url": "https://api.github.com/users/freedomtan/followers", "following_url": "https://api.github.com/users/freedomtan/following{/other_user}", "gists_url": "https://api.github.com/users/freedomtan/gists{/gist_id}", "starred_url": "https://api.github.com/users/freedomtan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/freedomtan/subscriptions", "organizations_url": "https://api.github.com/users/freedomtan/orgs", "repos_url": "https://api.github.com/users/freedomtan/repos", "events_url": "https://api.github.com/users/freedomtan/events{/privacy}", "received_events_url": "https://api.github.com/users/freedomtan/received_events", "type": "User", "site_admin": false}, "body": "Well, I don't think putting `TF_RETURN_IF_ERROR()` here is the right way to do it. This is in `void Compute(OpKernelContext* context)`. As far as I know, `TF_RETURN_IF_ERROR()` will be expanded into something with `return a_status_variable`, so it will be rejected by gcc or clang.  I cannot find a way to use TF_RETURN_IF_ERROR() without more modifications to either this class or `class OpKernel`,  its base class. Any suggestion?\r\n", "created_at": "2017-05-11T01:09:41Z", "updated_at": "2017-05-17T03:26:01Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9563#discussion_r115887496", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9563", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/115887496"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9563#discussion_r115887496"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9563"}}, "body_html": "<p>Well, I don't think putting <code>TF_RETURN_IF_ERROR()</code> here is the right way to do it. This is in <code>void Compute(OpKernelContext* context)</code>. As far as I know, <code>TF_RETURN_IF_ERROR()</code> will be expanded into something with <code>return a_status_variable</code>, so it will be rejected by gcc or clang.  I cannot find a way to use TF_RETURN_IF_ERROR() without more modifications to either this class or <code>class OpKernel</code>,  its base class. Any suggestion?</p>", "body_text": "Well, I don't think putting TF_RETURN_IF_ERROR() here is the right way to do it. This is in void Compute(OpKernelContext* context). As far as I know, TF_RETURN_IF_ERROR() will be expanded into something with return a_status_variable, so it will be rejected by gcc or clang.  I cannot find a way to use TF_RETURN_IF_ERROR() without more modifications to either this class or class OpKernel,  its base class. Any suggestion?", "in_reply_to_id": 115794257}