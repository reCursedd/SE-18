{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60010727", "pull_request_review_id": null, "id": 60010727, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDEwNzI3", "diff_hunk": "@@ -327,11 +327,28 @@ def testConv2DKernelSmallerThanStrideValid(self):\n                        expected=expected_output)\n \n   def testConv2DKernelSmallerThanStrideSame(self):\n-    expected_output = [1, 3, 7, 9]\n+    #[[1 4 7 0]\n+    # [2 5 8 0]\n+    # [3 6 9 0]\n+    # [0 0 0 0]]\n     self._VerifyValues(tensor_in_sizes=[1, 3, 3, 1],\n                        filter_in_sizes=[1, 1, 1, 1],\n                        strides=[2, 2], padding=\"SAME\",\n-                       expected=expected_output)\n+                       expected=[1, 3, 7, 9])\n+    # [[1  5  9 13]\n+    #  [2  6 10 14]\n+    #  [3  7 11 15]\n+    #  [4  8 12 16]]\n+    self._VerifyValues(tensor_in_sizes=[1, 4, 4, 1],\n+                       filter_in_sizes=[1, 1, 1, 1],\n+                       strides=[2, 2], padding=\"SAME\",\n+                       expected=[1, 3, 9, 11])\n+\n+    # TODO this currently fails.\n+    #self._VerifyValues(tensor_in_sizes=[1, 8, 8, 1],", "path": "tensorflow/python/kernel_tests/conv_ops_test.py", "position": null, "original_position": 24, "commit_id": "5c158a47a4c2dc888c9620f7df766c20e2eb1350", "original_commit_id": "923d230b2ba86f26805c915d8e485a42b4800fce", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "Perhaps ignore that comment.  I'm just thinking about what's the right thing to do here, and I think instead of the change to use std::max(filter_size, stride_size), I think it might just be better to do real_padding = std::max(0, calculated_padding).\n\nWhy: the equations I usually go back to, from @Yangqing, master of understanding padding, is (for SAME):\n\nR' = ceil(float(R) / float(S))\nC' = ceil(float(C) / float(S))\nPr = ((R' - 1) \\* S + K - R) / 2\nPc = ((C' - 1) \\* S + K - C) / 2\n\n(R = num input rows, C = num input columns,  S = stride, K = filter size -- the latter two I'm assuming square filter and equal stride, but you can generalize).\n\nIn one case above (R=C=3, S=2, K=1), we have:  R' = C' = 2, Pr = Pc = 1 \\* 2 + 1 - 3 = 0, so it feels like the padding calculation is wrong for that case, since it's now calculated as '1' even though it's unneeded.\n\nIn the case that failed for you: R=C=4, S=2, K=1 we have R'=C'=2,  Pr = Pc = 1 \\* 2 + 1 - 4 = -1, so we have negative padding.  My guess is that you changed the code to avoid tripping the check failure -- if you use std::max(0, calculated_padding), I'm thinking the math will generally work out.  What do you think?\n", "created_at": "2016-04-18T06:37:44Z", "updated_at": "2016-04-19T00:24:17Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1991#discussion_r60010727", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1991", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/60010727"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1991#discussion_r60010727"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1991"}}, "body_html": "<p>Perhaps ignore that comment.  I'm just thinking about what's the right thing to do here, and I think instead of the change to use std::max(filter_size, stride_size), I think it might just be better to do real_padding = std::max(0, calculated_padding).</p>\n<p>Why: the equations I usually go back to, from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=551151\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Yangqing\">@Yangqing</a>, master of understanding padding, is (for SAME):</p>\n<p>R' = ceil(float(R) / float(S))<br>\nC' = ceil(float(C) / float(S))<br>\nPr = ((R' - 1) * S + K - R) / 2<br>\nPc = ((C' - 1) * S + K - C) / 2</p>\n<p>(R = num input rows, C = num input columns,  S = stride, K = filter size -- the latter two I'm assuming square filter and equal stride, but you can generalize).</p>\n<p>In one case above (R=C=3, S=2, K=1), we have:  R' = C' = 2, Pr = Pc = 1 * 2 + 1 - 3 = 0, so it feels like the padding calculation is wrong for that case, since it's now calculated as '1' even though it's unneeded.</p>\n<p>In the case that failed for you: R=C=4, S=2, K=1 we have R'=C'=2,  Pr = Pc = 1 * 2 + 1 - 4 = -1, so we have negative padding.  My guess is that you changed the code to avoid tripping the check failure -- if you use std::max(0, calculated_padding), I'm thinking the math will generally work out.  What do you think?</p>", "body_text": "Perhaps ignore that comment.  I'm just thinking about what's the right thing to do here, and I think instead of the change to use std::max(filter_size, stride_size), I think it might just be better to do real_padding = std::max(0, calculated_padding).\nWhy: the equations I usually go back to, from @Yangqing, master of understanding padding, is (for SAME):\nR' = ceil(float(R) / float(S))\nC' = ceil(float(C) / float(S))\nPr = ((R' - 1) * S + K - R) / 2\nPc = ((C' - 1) * S + K - C) / 2\n(R = num input rows, C = num input columns,  S = stride, K = filter size -- the latter two I'm assuming square filter and equal stride, but you can generalize).\nIn one case above (R=C=3, S=2, K=1), we have:  R' = C' = 2, Pr = Pc = 1 * 2 + 1 - 3 = 0, so it feels like the padding calculation is wrong for that case, since it's now calculated as '1' even though it's unneeded.\nIn the case that failed for you: R=C=4, S=2, K=1 we have R'=C'=2,  Pr = Pc = 1 * 2 + 1 - 4 = -1, so we have negative padding.  My guess is that you changed the code to avoid tripping the check failure -- if you use std::max(0, calculated_padding), I'm thinking the math will generally work out.  What do you think?"}