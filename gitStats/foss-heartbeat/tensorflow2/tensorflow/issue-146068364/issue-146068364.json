{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1782", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1782/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1782/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1782/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1782", "id": 146068364, "node_id": "MDU6SXNzdWUxNDYwNjgzNjQ=", "number": 1782, "title": "Why doesn't TensorBoard order objects according to information flow?", "user": {"login": "eriophora", "id": 6423093, "node_id": "MDQ6VXNlcjY0MjMwOTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6423093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eriophora", "html_url": "https://github.com/eriophora", "followers_url": "https://api.github.com/users/eriophora/followers", "following_url": "https://api.github.com/users/eriophora/following{/other_user}", "gists_url": "https://api.github.com/users/eriophora/gists{/gist_id}", "starred_url": "https://api.github.com/users/eriophora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eriophora/subscriptions", "organizations_url": "https://api.github.com/users/eriophora/orgs", "repos_url": "https://api.github.com/users/eriophora/repos", "events_url": "https://api.github.com/users/eriophora/events{/privacy}", "received_events_url": "https://api.github.com/users/eriophora/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "dsmilkov", "id": 2294279, "node_id": "MDQ6VXNlcjIyOTQyNzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2294279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsmilkov", "html_url": "https://github.com/dsmilkov", "followers_url": "https://api.github.com/users/dsmilkov/followers", "following_url": "https://api.github.com/users/dsmilkov/following{/other_user}", "gists_url": "https://api.github.com/users/dsmilkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsmilkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsmilkov/subscriptions", "organizations_url": "https://api.github.com/users/dsmilkov/orgs", "repos_url": "https://api.github.com/users/dsmilkov/repos", "events_url": "https://api.github.com/users/dsmilkov/events{/privacy}", "received_events_url": "https://api.github.com/users/dsmilkov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dsmilkov", "id": 2294279, "node_id": "MDQ6VXNlcjIyOTQyNzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2294279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsmilkov", "html_url": "https://github.com/dsmilkov", "followers_url": "https://api.github.com/users/dsmilkov/followers", "following_url": "https://api.github.com/users/dsmilkov/following{/other_user}", "gists_url": "https://api.github.com/users/dsmilkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsmilkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsmilkov/subscriptions", "organizations_url": "https://api.github.com/users/dsmilkov/orgs", "repos_url": "https://api.github.com/users/dsmilkov/repos", "events_url": "https://api.github.com/users/dsmilkov/events{/privacy}", "received_events_url": "https://api.github.com/users/dsmilkov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2016-04-05T18:19:49Z", "updated_at": "2016-07-25T20:25:02Z", "closed_at": "2016-07-25T20:25:02Z", "author_association": "NONE", "body_html": "<p>I would infer that TensorBoard orders objects according to how information flows through the graph, but this doesn't appear to be the case. Namely, considering Inception-v3. The operation makes it clear that, in each conv unit, batch normalization is performed on the output of the convolution layer:</p>\n<pre><code>conv = tf.nn.conv2d(inputs, weights, [1, stride, stride, 1],\n                    padding=padding)\nif batch_norm_params is not None:\n  with scopes.arg_scope([batch_norm], is_training=is_training,\n                        trainable=trainable, restore=restore):\n    outputs = batch_norm(conv, **batch_norm_params)\n</code></pre>\n<p>i.e., <code>outputs</code> is <code>batch_norm(conv(inputs, ...), ...)</code></p>\n<p>However, the TensorBoard representation of the graph orders <code>batch_norm</code> before the <code>conv</code> operation.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/6423093/14293082/e17a1776-fb1f-11e5-8073-341d087f11cb.png\"><img src=\"https://cloud.githubusercontent.com/assets/6423093/14293082/e17a1776-fb1f-11e5-8073-341d087f11cb.png\" alt=\"screenshot from 2016-04-05 11 15 36\" style=\"max-width:100%;\"></a></p>\n<p>Granted, these don't appear to be connected by a line. However, it <em>does</em> order the convolutions correctly:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/6423093/14293119/031168da-fb20-11e5-9c7a-8f2c6596088f.png\"><img src=\"https://cloud.githubusercontent.com/assets/6423093/14293119/031168da-fb20-11e5-9c7a-8f2c6596088f.png\" alt=\"screenshot from 2016-04-05 11 17 32\" style=\"max-width:100%;\"></a></p>\n<p>Is this due to the fact that these nodes are disconnected \"given\" <code>Identity...</code> and are thereby ordered alphabetically? Is there a way to disable this, and have it structure the graph according to the flow of information? Presumably it can disambiguate between the various <code>Identity...</code> nodes. Or am I interpreting this situation wrong?</p>", "body_text": "I would infer that TensorBoard orders objects according to how information flows through the graph, but this doesn't appear to be the case. Namely, considering Inception-v3. The operation makes it clear that, in each conv unit, batch normalization is performed on the output of the convolution layer:\nconv = tf.nn.conv2d(inputs, weights, [1, stride, stride, 1],\n                    padding=padding)\nif batch_norm_params is not None:\n  with scopes.arg_scope([batch_norm], is_training=is_training,\n                        trainable=trainable, restore=restore):\n    outputs = batch_norm(conv, **batch_norm_params)\n\ni.e., outputs is batch_norm(conv(inputs, ...), ...)\nHowever, the TensorBoard representation of the graph orders batch_norm before the conv operation.\n\nGranted, these don't appear to be connected by a line. However, it does order the convolutions correctly:\n\nIs this due to the fact that these nodes are disconnected \"given\" Identity... and are thereby ordered alphabetically? Is there a way to disable this, and have it structure the graph according to the flow of information? Presumably it can disambiguate between the various Identity... nodes. Or am I interpreting this situation wrong?", "body": "I would infer that TensorBoard orders objects according to how information flows through the graph, but this doesn't appear to be the case. Namely, considering Inception-v3. The operation makes it clear that, in each conv unit, batch normalization is performed on the output of the convolution layer:\n\n```\nconv = tf.nn.conv2d(inputs, weights, [1, stride, stride, 1],\n                    padding=padding)\nif batch_norm_params is not None:\n  with scopes.arg_scope([batch_norm], is_training=is_training,\n                        trainable=trainable, restore=restore):\n    outputs = batch_norm(conv, **batch_norm_params)\n```\n\ni.e., `outputs` is `batch_norm(conv(inputs, ...), ...)`\n\nHowever, the TensorBoard representation of the graph orders `batch_norm` before the `conv` operation. \n\n![screenshot from 2016-04-05 11 15 36](https://cloud.githubusercontent.com/assets/6423093/14293082/e17a1776-fb1f-11e5-8073-341d087f11cb.png)\n\nGranted, these don't appear to be connected by a line. However, it _does_ order the convolutions correctly:\n\n![screenshot from 2016-04-05 11 17 32](https://cloud.githubusercontent.com/assets/6423093/14293119/031168da-fb20-11e5-9c7a-8f2c6596088f.png)\n\nIs this due to the fact that these nodes are disconnected \"given\" `Identity...` and are thereby ordered alphabetically? Is there a way to disable this, and have it structure the graph according to the flow of information? Presumably it can disambiguate between the various `Identity...` nodes. Or am I interpreting this situation wrong?\n"}