{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/366437521", "html_url": "https://github.com/tensorflow/tensorflow/issues/16044#issuecomment-366437521", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16044", "id": 366437521, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjQzNzUyMQ==", "user": {"login": "squall-1002", "id": 19616286, "node_id": "MDQ6VXNlcjE5NjE2Mjg2", "avatar_url": "https://avatars1.githubusercontent.com/u/19616286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/squall-1002", "html_url": "https://github.com/squall-1002", "followers_url": "https://api.github.com/users/squall-1002/followers", "following_url": "https://api.github.com/users/squall-1002/following{/other_user}", "gists_url": "https://api.github.com/users/squall-1002/gists{/gist_id}", "starred_url": "https://api.github.com/users/squall-1002/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/squall-1002/subscriptions", "organizations_url": "https://api.github.com/users/squall-1002/orgs", "repos_url": "https://api.github.com/users/squall-1002/repos", "events_url": "https://api.github.com/users/squall-1002/events{/privacy}", "received_events_url": "https://api.github.com/users/squall-1002/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-17T12:16:36Z", "updated_at": "2018-02-17T12:17:27Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=275724\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/wileeam\">@wileeam</a> Of course: Recommender Systems ;)<br>\nIn RecSys I am dealing with lots of features of varying modalities, among them many categorical features. Assume we work on vehicle recommendations for an online market. I have colors, fuel types, maker IDs, model IDs, etc. The way we treat those features is to one-hot encode them. But, where colors or fuel types may have tens of possible values, we may have thousands of model IDs which is why I can't include this as a test as this would be way too much.<br>\nIn this case and I assume in others where people deal with multiple categorical features, one could profit from a higher abstraction of <strong>tf.one_hot</strong> which is why I propose <strong>tf.multi_one_hot</strong>.<br>\nHope that helps you to understand the practical use of it.</p>", "body_text": "@wileeam Of course: Recommender Systems ;)\nIn RecSys I am dealing with lots of features of varying modalities, among them many categorical features. Assume we work on vehicle recommendations for an online market. I have colors, fuel types, maker IDs, model IDs, etc. The way we treat those features is to one-hot encode them. But, where colors or fuel types may have tens of possible values, we may have thousands of model IDs which is why I can't include this as a test as this would be way too much.\nIn this case and I assume in others where people deal with multiple categorical features, one could profit from a higher abstraction of tf.one_hot which is why I propose tf.multi_one_hot.\nHope that helps you to understand the practical use of it.", "body": "@wileeam Of course: Recommender Systems ;)\r\nIn RecSys I am dealing with lots of features of varying modalities, among them many categorical features. Assume we work on vehicle recommendations for an online market. I have colors, fuel types, maker IDs, model IDs, etc. The way we treat those features is to one-hot encode them. But, where colors or fuel types may have tens of possible values, we may have thousands of model IDs which is why I can't include this as a test as this would be way too much.\r\nIn this case and I assume in others where people deal with multiple categorical features, one could profit from a higher abstraction of **tf.one_hot** which is why I propose **tf.multi_one_hot**.\r\nHope that helps you to understand the practical use of it."}