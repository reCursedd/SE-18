{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/207098209", "html_url": "https://github.com/tensorflow/tensorflow/issues/1157#issuecomment-207098209", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1157", "id": 207098209, "node_id": "MDEyOklzc3VlQ29tbWVudDIwNzA5ODIwOQ==", "user": {"login": "kirilg", "id": 229884, "node_id": "MDQ6VXNlcjIyOTg4NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/229884?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirilg", "html_url": "https://github.com/kirilg", "followers_url": "https://api.github.com/users/kirilg/followers", "following_url": "https://api.github.com/users/kirilg/following{/other_user}", "gists_url": "https://api.github.com/users/kirilg/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirilg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirilg/subscriptions", "organizations_url": "https://api.github.com/users/kirilg/orgs", "repos_url": "https://api.github.com/users/kirilg/repos", "events_url": "https://api.github.com/users/kirilg/events{/privacy}", "received_events_url": "https://api.github.com/users/kirilg/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-07T21:38:52Z", "updated_at": "2016-04-07T21:38:52Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3721087\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/damienmg\">@damienmg</a> I'm having the same issue with TensorFlow Serving compiled with cuda. Adding <code>cxx_builtin_include_directory: \"/usr/local/cuda-7.0/include\"</code> to the CROSSTOOL file works, but changing it to <code>\"/usr/local/cuda/include</code> (symlink) fails with the same error above (this rule is missing dependency declarations...)<br>\nThe path that works is user specific, so we can't add it as is.</p>\n<p>I tried to auto-configure using the link you provided, and got stuck in other places. The relevant part of the error message including the command it generated is:<br>\n<code>/usr/bin/gcc -shared -o bazel-out/local-opt/bin/tensorflow_serving/resources/libresource_values.so -no-canonical-prefixes -B/usr/bin -pass-exit-codes '-Wl,--build-id=md5' '-Wl,--hash-style=gnu' -Wl,rpath,/usr/local/cuda-7.0/lib -L/usr/local/cuda-7.0/lib -Wl,rpath,/usr/local/cuda-7.0/lib64 -L/usr/local/cuda-7.0/lib64 -Wl,--gc-sections -Wl,@bazel-out/local-opt/bin/tensorflow_serving/resources/libresource_values.so-2.params): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1. /usr/bin/ld: cannot find rpath: No such file or directory /usr/bin/ld: cannot find /usr/local/cuda-7.0/lib: File format not recognized /usr/bin/ld: cannot find rpath: No such file or directory /usr/bin/ld: cannot find /usr/local/cuda-7.0/lib64: File format not recognized collect2: error: ld returned 1 exit status</code></p>\n<p>note that it's using /usr/bin/gcc but TensorFlow's crosstool config uses clang/bin/crosstool_wrapper_driver_is_not_gcc. I only added<br>\n<code>load(\"@bazel_tools//tools/cpp:cc_configure.bzl\", \"cc_configure\") cc_configure()</code><br>\nand not sure if there's a way to configure the tool_path for gcc since cc_configure() is the only public function and it takes no parameters.</p>", "body_text": "@damienmg I'm having the same issue with TensorFlow Serving compiled with cuda. Adding cxx_builtin_include_directory: \"/usr/local/cuda-7.0/include\" to the CROSSTOOL file works, but changing it to \"/usr/local/cuda/include (symlink) fails with the same error above (this rule is missing dependency declarations...)\nThe path that works is user specific, so we can't add it as is.\nI tried to auto-configure using the link you provided, and got stuck in other places. The relevant part of the error message including the command it generated is:\n/usr/bin/gcc -shared -o bazel-out/local-opt/bin/tensorflow_serving/resources/libresource_values.so -no-canonical-prefixes -B/usr/bin -pass-exit-codes '-Wl,--build-id=md5' '-Wl,--hash-style=gnu' -Wl,rpath,/usr/local/cuda-7.0/lib -L/usr/local/cuda-7.0/lib -Wl,rpath,/usr/local/cuda-7.0/lib64 -L/usr/local/cuda-7.0/lib64 -Wl,--gc-sections -Wl,@bazel-out/local-opt/bin/tensorflow_serving/resources/libresource_values.so-2.params): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1. /usr/bin/ld: cannot find rpath: No such file or directory /usr/bin/ld: cannot find /usr/local/cuda-7.0/lib: File format not recognized /usr/bin/ld: cannot find rpath: No such file or directory /usr/bin/ld: cannot find /usr/local/cuda-7.0/lib64: File format not recognized collect2: error: ld returned 1 exit status\nnote that it's using /usr/bin/gcc but TensorFlow's crosstool config uses clang/bin/crosstool_wrapper_driver_is_not_gcc. I only added\nload(\"@bazel_tools//tools/cpp:cc_configure.bzl\", \"cc_configure\") cc_configure()\nand not sure if there's a way to configure the tool_path for gcc since cc_configure() is the only public function and it takes no parameters.", "body": "@damienmg I'm having the same issue with TensorFlow Serving compiled with cuda. Adding `cxx_builtin_include_directory: \"/usr/local/cuda-7.0/include\"` to the CROSSTOOL file works, but changing it to `\"/usr/local/cuda/include` (symlink) fails with the same error above (this rule is missing dependency declarations...)\nThe path that works is user specific, so we can't add it as is.\n\nI tried to auto-configure using the link you provided, and got stuck in other places. The relevant part of the error message including the command it generated is:\n`/usr/bin/gcc -shared -o bazel-out/local-opt/bin/tensorflow_serving/resources/libresource_values.so -no-canonical-prefixes -B/usr/bin -pass-exit-codes '-Wl,--build-id=md5' '-Wl,--hash-style=gnu' -Wl,rpath,/usr/local/cuda-7.0/lib -L/usr/local/cuda-7.0/lib -Wl,rpath,/usr/local/cuda-7.0/lib64 -L/usr/local/cuda-7.0/lib64 -Wl,--gc-sections -Wl,@bazel-out/local-opt/bin/tensorflow_serving/resources/libresource_values.so-2.params): com.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 1.\n/usr/bin/ld: cannot find rpath: No such file or directory\n/usr/bin/ld: cannot find /usr/local/cuda-7.0/lib: File format not recognized\n/usr/bin/ld: cannot find rpath: No such file or directory\n/usr/bin/ld: cannot find /usr/local/cuda-7.0/lib64: File format not recognized\ncollect2: error: ld returned 1 exit status`\n\nnote that it's using /usr/bin/gcc but TensorFlow's crosstool config uses clang/bin/crosstool_wrapper_driver_is_not_gcc. I only added\n`load(\"@bazel_tools//tools/cpp:cc_configure.bzl\", \"cc_configure\")\ncc_configure()`\nand not sure if there's a way to configure the tool_path for gcc since cc_configure() is the only public function and it takes no parameters. \n"}