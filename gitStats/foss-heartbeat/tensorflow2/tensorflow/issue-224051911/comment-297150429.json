{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/297150429", "html_url": "https://github.com/tensorflow/tensorflow/pull/9429#issuecomment-297150429", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9429", "id": 297150429, "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzE1MDQyOQ==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-25T20:10:58Z", "updated_at": "2017-04-26T03:53:51Z", "author_association": "CONTRIBUTOR", "body_html": "<p>BTW, that doesn't give uniform distribution over orthogonal matrices. Search for \"wrong distribution\" in <a href=\"https://arxiv.org/pdf/math-ph/0609050.pdf\" rel=\"nofollow\">https://arxiv.org/pdf/math-ph/0609050.pdf</a></p>\n<p>To do uniformly at random, need to adjust diagonal entries of the qr term. IE, something like this in numpy</p>\n<pre><code>from scipy import linalg\nimport numpy as np\ndef orthogonal_measure(n):\n    z = np.random.randn(n,n)\n    q, r = linalg.qr(z)\n    d = np.diagonal(r)\n    ph = d/np.absolute(d)\n    return q*ph\n\n</code></pre>\n<p>the difference is significant. IE, rotating single point in 3d by a random matrix using your approach<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/23068/25405556/8465cee0-29b8-11e7-9a54-3a57e23998aa.png\"><img width=\"397\" alt=\"screenshot 2017-04-25 13 09 13\" src=\"https://cloud.githubusercontent.com/assets/23068/25405556/8465cee0-29b8-11e7-9a54-3a57e23998aa.png\" style=\"max-width:100%;\"></a></p>\n<p>after normalization<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloud.githubusercontent.com/assets/23068/25405565/8a034ae4-29b8-11e7-9599-cd015d0a6ae3.png\"><img width=\"388\" alt=\"screenshot 2017-04-25 13 09 27\" src=\"https://cloud.githubusercontent.com/assets/23068/25405565/8a034ae4-29b8-11e7-9599-cd015d0a6ae3.png\" style=\"max-width:100%;\"></a></p>\n<p><a href=\"https://wolfr.am/lbWEtaFF\" rel=\"nofollow\">Notebook with sanity checks</a></p>", "body_text": "BTW, that doesn't give uniform distribution over orthogonal matrices. Search for \"wrong distribution\" in https://arxiv.org/pdf/math-ph/0609050.pdf\nTo do uniformly at random, need to adjust diagonal entries of the qr term. IE, something like this in numpy\nfrom scipy import linalg\nimport numpy as np\ndef orthogonal_measure(n):\n    z = np.random.randn(n,n)\n    q, r = linalg.qr(z)\n    d = np.diagonal(r)\n    ph = d/np.absolute(d)\n    return q*ph\n\n\nthe difference is significant. IE, rotating single point in 3d by a random matrix using your approach\n\nafter normalization\n\nNotebook with sanity checks", "body": "BTW, that doesn't give uniform distribution over orthogonal matrices. Search for \"wrong distribution\" in https://arxiv.org/pdf/math-ph/0609050.pdf\r\n\r\nTo do uniformly at random, need to adjust diagonal entries of the qr term. IE, something like this in numpy\r\n```\r\nfrom scipy import linalg\r\nimport numpy as np\r\ndef orthogonal_measure(n):\r\n    z = np.random.randn(n,n)\r\n    q, r = linalg.qr(z)\r\n    d = np.diagonal(r)\r\n    ph = d/np.absolute(d)\r\n    return q*ph\r\n\r\n```\r\n\r\nthe difference is significant. IE, rotating single point in 3d by a random matrix using your approach \r\n<img width=\"397\" alt=\"screenshot 2017-04-25 13 09 13\" src=\"https://cloud.githubusercontent.com/assets/23068/25405556/8465cee0-29b8-11e7-9a54-3a57e23998aa.png\">\r\n\r\nafter normalization\r\n<img width=\"388\" alt=\"screenshot 2017-04-25 13 09 27\" src=\"https://cloud.githubusercontent.com/assets/23068/25405565/8a034ae4-29b8-11e7-9599-cd015d0a6ae3.png\">\r\n\r\n[Notebook with sanity checks](https://wolfr.am/lbWEtaFF)"}