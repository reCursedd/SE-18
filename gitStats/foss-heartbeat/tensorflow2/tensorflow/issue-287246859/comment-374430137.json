{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/374430137", "html_url": "https://github.com/tensorflow/tensorflow/pull/15982#issuecomment-374430137", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15982", "id": 374430137, "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDQzMDEzNw==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-20T00:21:47Z", "updated_at": "2018-03-20T00:21:47Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> The PR has been rebase to merge conflict.</p>\n<p>However, after reviewing the code again, I realized that there is still one scenario where exiting <code>tf.where</code> is not compatible with <code>np.where</code> (below is the output before this PR):</p>\n<pre><code>$ python\nPython 2.7.12 (default, Dec  4 2017, 14:50:18)\n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import tensorflow as tf\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt;\n&gt;&gt;&gt; x = np.arange(4)\n&gt;&gt;&gt; y = np.zeros((4, 4))\n&gt;&gt;&gt; z = np.ones((4, 4))\n&gt;&gt;&gt;\n&gt;&gt;&gt; np.where(x &gt; 1, y, z)\narray([[1., 1., 0., 0.],\n       [1., 1., 0., 0.],\n       [1., 1., 0., 0.],\n       [1., 1., 0., 0.]])\n&gt;&gt;&gt; v = tf.where(x &gt; 1, y, z)\n&gt;&gt;&gt; tf.Session().run(v)\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n&gt;&gt;&gt;\n</code></pre>\n<p>As is shown from the above example, when x has the shape <code>(4)</code> and y/z has the shape <code>(4, 4)</code>, the broadcast orientation is different.</p>\n<p>Because of that, the current PR will fail several test cases.</p>\n<p>Unfortunately, I couldn't think of a way to make the proposed broadcasting changes in <code>tf.where</code> backward-compatible.</p>\n<p>I am wondering maybe it would be better to name a new op (e.g., <code>tf.where_v2</code>) so that it is compatible with numpy and not breaking existing users?</p>", "body_text": "@ebrevdo The PR has been rebase to merge conflict.\nHowever, after reviewing the code again, I realized that there is still one scenario where exiting tf.where is not compatible with np.where (below is the output before this PR):\n$ python\nPython 2.7.12 (default, Dec  4 2017, 14:50:18)\n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import tensorflow as tf\n>>> import numpy as np\n>>>\n>>> x = np.arange(4)\n>>> y = np.zeros((4, 4))\n>>> z = np.ones((4, 4))\n>>>\n>>> np.where(x > 1, y, z)\narray([[1., 1., 0., 0.],\n       [1., 1., 0., 0.],\n       [1., 1., 0., 0.],\n       [1., 1., 0., 0.]])\n>>> v = tf.where(x > 1, y, z)\n>>> tf.Session().run(v)\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n>>>\n\nAs is shown from the above example, when x has the shape (4) and y/z has the shape (4, 4), the broadcast orientation is different.\nBecause of that, the current PR will fail several test cases.\nUnfortunately, I couldn't think of a way to make the proposed broadcasting changes in tf.where backward-compatible.\nI am wondering maybe it would be better to name a new op (e.g., tf.where_v2) so that it is compatible with numpy and not breaking existing users?", "body": "@ebrevdo The PR has been rebase to merge conflict.\r\n\r\nHowever, after reviewing the code again, I realized that there is still one scenario where exiting `tf.where` is not compatible with `np.where` (below is the output before this PR):\r\n```\r\n$ python\r\nPython 2.7.12 (default, Dec  4 2017, 14:50:18)\r\n[GCC 5.4.0 20160609] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import tensorflow as tf\r\n>>> import numpy as np\r\n>>>\r\n>>> x = np.arange(4)\r\n>>> y = np.zeros((4, 4))\r\n>>> z = np.ones((4, 4))\r\n>>>\r\n>>> np.where(x > 1, y, z)\r\narray([[1., 1., 0., 0.],\r\n       [1., 1., 0., 0.],\r\n       [1., 1., 0., 0.],\r\n       [1., 1., 0., 0.]])\r\n>>> v = tf.where(x > 1, y, z)\r\n>>> tf.Session().run(v)\r\narray([[1., 1., 1., 1.],\r\n       [1., 1., 1., 1.],\r\n       [0., 0., 0., 0.],\r\n       [0., 0., 0., 0.]])\r\n>>>\r\n```\r\n\r\nAs is shown from the above example, when x has the shape `(4)` and y/z has the shape `(4, 4)`, the broadcast orientation is different.\r\n\r\nBecause of that, the current PR will fail several test cases.\r\n\r\nUnfortunately, I couldn't think of a way to make the proposed broadcasting changes in `tf.where` backward-compatible.\r\n\r\nI am wondering maybe it would be better to name a new op (e.g., `tf.where_v2`) so that it is compatible with numpy and not breaking existing users?\r\n"}