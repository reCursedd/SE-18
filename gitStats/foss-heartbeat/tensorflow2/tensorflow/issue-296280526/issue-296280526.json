{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16943", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16943/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16943/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16943/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16943", "id": 296280526, "node_id": "MDU6SXNzdWUyOTYyODA1MjY=", "number": 16943, "title": "tensorflow serving, add_meta_graph_and_variables() legacy_init_op doesn't surpport a tf.group of multi ops. ", "user": {"login": "linyuhui", "id": 30251361, "node_id": "MDQ6VXNlcjMwMjUxMzYx", "avatar_url": "https://avatars0.githubusercontent.com/u/30251361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linyuhui", "html_url": "https://github.com/linyuhui", "followers_url": "https://api.github.com/users/linyuhui/followers", "following_url": "https://api.github.com/users/linyuhui/following{/other_user}", "gists_url": "https://api.github.com/users/linyuhui/gists{/gist_id}", "starred_url": "https://api.github.com/users/linyuhui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linyuhui/subscriptions", "organizations_url": "https://api.github.com/users/linyuhui/orgs", "repos_url": "https://api.github.com/users/linyuhui/repos", "events_url": "https://api.github.com/users/linyuhui/events{/privacy}", "received_events_url": "https://api.github.com/users/linyuhui/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "reedwm", "id": 6510203, "node_id": "MDQ6VXNlcjY1MTAyMDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6510203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedwm", "html_url": "https://github.com/reedwm", "followers_url": "https://api.github.com/users/reedwm/followers", "following_url": "https://api.github.com/users/reedwm/following{/other_user}", "gists_url": "https://api.github.com/users/reedwm/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedwm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedwm/subscriptions", "organizations_url": "https://api.github.com/users/reedwm/orgs", "repos_url": "https://api.github.com/users/reedwm/repos", "events_url": "https://api.github.com/users/reedwm/events{/privacy}", "received_events_url": "https://api.github.com/users/reedwm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2018-02-12T06:51:52Z", "updated_at": "2018-04-17T18:07:40Z", "closed_at": "2018-04-17T18:07:40Z", "author_association": "NONE", "body_html": "<p>the new nmt model in tutorial <a href=\"url\">https://github.com/tensorflow/nmt</a> using index_table_from_file and the datasets API make_initializable_iterator. So when I want to deploy the model as serving,  in builder.add_meta_graph_and_variables(), I assigned legacy_init_op with an tf.group(tf.tables_initializer(), infer_model.iterator.initializer) or use tf.control_dependencies, when I export the model and run it, I met a error: Failed precondition: Table not initialized.</p>\n<pre lang=\"#\" data-meta=\"Build the signature_def_map.\"><code>    builder = tf.saved_model.builder.SavedModelBuilder(export_path)\n    tensor_info_src = tf.saved_model.utils.build_tensor_info(\n        infer_model.src_placeholder)\n    tensor_info_sample_words = tf.saved_model.utils.build_tensor_info(\n        loaded_infer_model.sample_words)\n\n    prediction_signature = (\n        tf.saved_model.signature_def_utils.build_signature_def(\n            inputs={'src': tensor_info_src},\n            outputs={'sample_words': tensor_info_sample_words},\n            method_name=tf.saved_model.signature_constants.PREDICT_METHOD_NAME))\n\n    with tf.control_dependencies([tf.tables_initializer()]):\n         op1 = tf.no_op()\n    with tf.control_dependencies([op1, infer_model.iterator.initializer]):\n         op2 = tf.no_op(name='legacy_init_op')\n\n    legacy_init_op = tf.group(tf.tables_initializer(), infer_model.iterator.initializer,\n                              name='legacy_init_op')\n    print(legacy_init_op)\n\n    table_init_op = tf.group(tf.tables_initializer(),\n                             name='legacy_init_op')\n    print(table_init_op)\n\n    builder.add_meta_graph_and_variables(\n        session, [tf.saved_model.tag_constants.SERVING],\n        signature_def_map={\n            'predict_chat': prediction_signature\n        },\n        legacy_init_op=op2)\n    builder.save()\n    print('Done exporting.')```\n</code></pre>", "body_text": "the new nmt model in tutorial https://github.com/tensorflow/nmt using index_table_from_file and the datasets API make_initializable_iterator. So when I want to deploy the model as serving,  in builder.add_meta_graph_and_variables(), I assigned legacy_init_op with an tf.group(tf.tables_initializer(), infer_model.iterator.initializer) or use tf.control_dependencies, when I export the model and run it, I met a error: Failed precondition: Table not initialized.\n    builder = tf.saved_model.builder.SavedModelBuilder(export_path)\n    tensor_info_src = tf.saved_model.utils.build_tensor_info(\n        infer_model.src_placeholder)\n    tensor_info_sample_words = tf.saved_model.utils.build_tensor_info(\n        loaded_infer_model.sample_words)\n\n    prediction_signature = (\n        tf.saved_model.signature_def_utils.build_signature_def(\n            inputs={'src': tensor_info_src},\n            outputs={'sample_words': tensor_info_sample_words},\n            method_name=tf.saved_model.signature_constants.PREDICT_METHOD_NAME))\n\n    with tf.control_dependencies([tf.tables_initializer()]):\n         op1 = tf.no_op()\n    with tf.control_dependencies([op1, infer_model.iterator.initializer]):\n         op2 = tf.no_op(name='legacy_init_op')\n\n    legacy_init_op = tf.group(tf.tables_initializer(), infer_model.iterator.initializer,\n                              name='legacy_init_op')\n    print(legacy_init_op)\n\n    table_init_op = tf.group(tf.tables_initializer(),\n                             name='legacy_init_op')\n    print(table_init_op)\n\n    builder.add_meta_graph_and_variables(\n        session, [tf.saved_model.tag_constants.SERVING],\n        signature_def_map={\n            'predict_chat': prediction_signature\n        },\n        legacy_init_op=op2)\n    builder.save()\n    print('Done exporting.')```", "body": "the new nmt model in tutorial [https://github.com/tensorflow/nmt](url) using index_table_from_file and the datasets API make_initializable_iterator. So when I want to deploy the model as serving,  in builder.add_meta_graph_and_variables(), I assigned legacy_init_op with an tf.group(tf.tables_initializer(), infer_model.iterator.initializer) or use tf.control_dependencies, when I export the model and run it, I met a error: Failed precondition: Table not initialized.\r\n\r\n```# Build the signature_def_map.\r\n    builder = tf.saved_model.builder.SavedModelBuilder(export_path)\r\n    tensor_info_src = tf.saved_model.utils.build_tensor_info(\r\n        infer_model.src_placeholder)\r\n    tensor_info_sample_words = tf.saved_model.utils.build_tensor_info(\r\n        loaded_infer_model.sample_words)\r\n\r\n    prediction_signature = (\r\n        tf.saved_model.signature_def_utils.build_signature_def(\r\n            inputs={'src': tensor_info_src},\r\n            outputs={'sample_words': tensor_info_sample_words},\r\n            method_name=tf.saved_model.signature_constants.PREDICT_METHOD_NAME))\r\n\r\n    with tf.control_dependencies([tf.tables_initializer()]):\r\n         op1 = tf.no_op()\r\n    with tf.control_dependencies([op1, infer_model.iterator.initializer]):\r\n         op2 = tf.no_op(name='legacy_init_op')\r\n\r\n    legacy_init_op = tf.group(tf.tables_initializer(), infer_model.iterator.initializer,\r\n                              name='legacy_init_op')\r\n    print(legacy_init_op)\r\n\r\n    table_init_op = tf.group(tf.tables_initializer(),\r\n                             name='legacy_init_op')\r\n    print(table_init_op)\r\n\r\n    builder.add_meta_graph_and_variables(\r\n        session, [tf.saved_model.tag_constants.SERVING],\r\n        signature_def_map={\r\n            'predict_chat': prediction_signature\r\n        },\r\n        legacy_init_op=op2)\r\n    builder.save()\r\n    print('Done exporting.')```"}