{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17374", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17374/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17374/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17374/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17374", "id": 301694811, "node_id": "MDU6SXNzdWUzMDE2OTQ4MTE=", "number": 17374, "title": "Potential resource leaks caused by unclear Java examples", "user": {"login": "mixalturek", "id": 5898096, "node_id": "MDQ6VXNlcjU4OTgwOTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5898096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mixalturek", "html_url": "https://github.com/mixalturek", "followers_url": "https://api.github.com/users/mixalturek/followers", "following_url": "https://api.github.com/users/mixalturek/following{/other_user}", "gists_url": "https://api.github.com/users/mixalturek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mixalturek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mixalturek/subscriptions", "organizations_url": "https://api.github.com/users/mixalturek/orgs", "repos_url": "https://api.github.com/users/mixalturek/repos", "events_url": "https://api.github.com/users/mixalturek/events{/privacy}", "received_events_url": "https://api.github.com/users/mixalturek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 284443156, "node_id": "MDU6TGFiZWwyODQ0NDMxNTY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:docs", "name": "type:docs", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-03-02T08:55:38Z", "updated_at": "2018-03-19T07:00:03Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<p>Java examples at <a href=\"https://www.tensorflow.org/\" rel=\"nofollow\">https://www.tensorflow.org/</a> for tensorflow 1.6.0.</p>\n<h3>Describe the problem</h3>\n<p><code>org.tensorflow.Session.Runner.run()</code> returns list of closables, Javadoc clearly states that the caller is responsible to free all of them. None of the Java examples I found at <a href=\"https://www.tensorflow.org/\" rel=\"nofollow\">https://www.tensorflow.org/</a> highlights that, I realized it by happy accident during in-depth reading implementation in Session.java quite long time after I wrote my code that uses TensorFlow.</p>\n<pre><code>    /**\n     * Execute the graph fragments necessary to compute all requested fetches.\n     *\n     * &lt;p&gt;&lt;b&gt;WARNING:&lt;/b&gt; The caller assumes ownership of all returned {@link Tensor}s, i.e., the\n     * caller must call {@link Tensor#close()} on all elements of the returned list to free up\n     * resources.\n     *\n     * ...\n     */\n    public List&lt;Tensor&lt;?&gt;&gt; run() {\n      return runHelper(false).outputs;\n    }\n</code></pre>\n<p>I'm not sure if the examples them-self contain any resource leak or not, they free only the first element of the list, but there may be more of them (in general). I would expect an explicit loop properly freeing all the returned resources there.</p>\n<p>Such examples for beginners should be as explicit as possible, 100% clear and understandable for anyone. A lot of people (like me) base core of their code on them which may easily introduce significant resource leak bugs to their applications.</p>\n<ul>\n<li><a href=\"https://www.tensorflow.org/install/install_java\" rel=\"nofollow\">https://www.tensorflow.org/install/install_java</a>, HelloTF example</li>\n<li><a href=\"https://www.tensorflow.org/install/install_java\" rel=\"nofollow\">https://www.tensorflow.org/install/install_java</a>, referenced advanced example LabelImage</li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/java/src/main/java/org/tensorflow/examples/LabelImage.java\">https://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/java/src/main/java/org/tensorflow/examples/LabelImage.java</a></li>\n</ul>\n<h3>Source code / logs</h3>\n<p>None.</p>", "body_text": "System information\nJava examples at https://www.tensorflow.org/ for tensorflow 1.6.0.\nDescribe the problem\norg.tensorflow.Session.Runner.run() returns list of closables, Javadoc clearly states that the caller is responsible to free all of them. None of the Java examples I found at https://www.tensorflow.org/ highlights that, I realized it by happy accident during in-depth reading implementation in Session.java quite long time after I wrote my code that uses TensorFlow.\n    /**\n     * Execute the graph fragments necessary to compute all requested fetches.\n     *\n     * <p><b>WARNING:</b> The caller assumes ownership of all returned {@link Tensor}s, i.e., the\n     * caller must call {@link Tensor#close()} on all elements of the returned list to free up\n     * resources.\n     *\n     * ...\n     */\n    public List<Tensor<?>> run() {\n      return runHelper(false).outputs;\n    }\n\nI'm not sure if the examples them-self contain any resource leak or not, they free only the first element of the list, but there may be more of them (in general). I would expect an explicit loop properly freeing all the returned resources there.\nSuch examples for beginners should be as explicit as possible, 100% clear and understandable for anyone. A lot of people (like me) base core of their code on them which may easily introduce significant resource leak bugs to their applications.\n\nhttps://www.tensorflow.org/install/install_java, HelloTF example\nhttps://www.tensorflow.org/install/install_java, referenced advanced example LabelImage\nhttps://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/java/src/main/java/org/tensorflow/examples/LabelImage.java\n\nSource code / logs\nNone.", "body": "### System information\r\n\r\nJava examples at https://www.tensorflow.org/ for tensorflow 1.6.0.\r\n\r\n### Describe the problem\r\n\r\n`org.tensorflow.Session.Runner.run()` returns list of closables, Javadoc clearly states that the caller is responsible to free all of them. None of the Java examples I found at https://www.tensorflow.org/ highlights that, I realized it by happy accident during in-depth reading implementation in Session.java quite long time after I wrote my code that uses TensorFlow.\r\n\r\n```\r\n    /**\r\n     * Execute the graph fragments necessary to compute all requested fetches.\r\n     *\r\n     * <p><b>WARNING:</b> The caller assumes ownership of all returned {@link Tensor}s, i.e., the\r\n     * caller must call {@link Tensor#close()} on all elements of the returned list to free up\r\n     * resources.\r\n     *\r\n     * ...\r\n     */\r\n    public List<Tensor<?>> run() {\r\n      return runHelper(false).outputs;\r\n    }\r\n```\r\n\r\nI'm not sure if the examples them-self contain any resource leak or not, they free only the first element of the list, but there may be more of them (in general). I would expect an explicit loop properly freeing all the returned resources there.\r\n\r\nSuch examples for beginners should be as explicit as possible, 100% clear and understandable for anyone. A lot of people (like me) base core of their code on them which may easily introduce significant resource leak bugs to their applications.\r\n\r\n- https://www.tensorflow.org/install/install_java, HelloTF example\r\n- https://www.tensorflow.org/install/install_java, referenced advanced example LabelImage\r\n- https://github.com/tensorflow/tensorflow/blob/r1.6/tensorflow/java/src/main/java/org/tensorflow/examples/LabelImage.java\r\n\r\n### Source code / logs\r\n\r\nNone.\r\n"}