{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/392762648", "html_url": "https://github.com/tensorflow/tensorflow/issues/17518#issuecomment-392762648", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17518", "id": 392762648, "node_id": "MDEyOklzc3VlQ29tbWVudDM5Mjc2MjY0OA==", "user": {"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-29T12:45:27Z", "updated_at": "2018-05-29T12:46:24Z", "author_association": "MEMBER", "body_html": "<p>Sorry, I didn't notice this issue was assigned to me until now. I changed the op from a hardwired <code>int64</code> to a choice of <code>int32</code> or <code>int64</code> in a previous PR. Previously, only <code>int64</code> was supported.</p>\n<p>The error you are seeing is because:<br>\na) tf.shape() returns an int32<br>\nb) the types of num_lower and num_upper must be the same.<br>\nc) the python <code>0</code> gets passed as an int64 by default.</p>\n<p>There's two easy workarounds: either explicitly pass the 0 value as a numpy int32 value:</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\na = tf.random_normal([5, 5])\nb = tf.random_normal([10, 10])\nc = tf.matrix_band_part(input=b, num_lower=np.int32(0), num_upper=tf.shape(a)[0])\n</code></pre>\n<p>or tell <code>tf.shape()</code> to return an int64 value:</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\na = tf.random_normal([5, 5])\nb = tf.random_normal([10, 10])\nc = tf.matrix_band_part(input=b, num_lower=0, num_upper=tf.shape(a, out_type=tf.int64)[0])\n</code></pre>\n<p>As to the larger usability question of \"should TensorFlow perform implicit promotions for integers\", it's probably better to open a new PR for that.</p>", "body_text": "Sorry, I didn't notice this issue was assigned to me until now. I changed the op from a hardwired int64 to a choice of int32 or int64 in a previous PR. Previously, only int64 was supported.\nThe error you are seeing is because:\na) tf.shape() returns an int32\nb) the types of num_lower and num_upper must be the same.\nc) the python 0 gets passed as an int64 by default.\nThere's two easy workarounds: either explicitly pass the 0 value as a numpy int32 value:\nimport numpy as np\nimport tensorflow as tf\n\na = tf.random_normal([5, 5])\nb = tf.random_normal([10, 10])\nc = tf.matrix_band_part(input=b, num_lower=np.int32(0), num_upper=tf.shape(a)[0])\n\nor tell tf.shape() to return an int64 value:\nimport numpy as np\nimport tensorflow as tf\n\na = tf.random_normal([5, 5])\nb = tf.random_normal([10, 10])\nc = tf.matrix_band_part(input=b, num_lower=0, num_upper=tf.shape(a, out_type=tf.int64)[0])\n\nAs to the larger usability question of \"should TensorFlow perform implicit promotions for integers\", it's probably better to open a new PR for that.", "body": "Sorry, I didn't notice this issue was assigned to me until now. I changed the op from a hardwired `int64` to a choice of `int32` or `int64` in a previous PR. Previously, only `int64` was supported.\r\n\r\nThe error you are seeing is because:\r\na) tf.shape() returns an int32\r\nb) the types of num_lower and num_upper must be the same.\r\nc) the python `0` gets passed as an int64 by default.\r\n\r\nThere's two easy workarounds: either explicitly pass the 0 value as a numpy int32 value:\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\na = tf.random_normal([5, 5])\r\nb = tf.random_normal([10, 10])\r\nc = tf.matrix_band_part(input=b, num_lower=np.int32(0), num_upper=tf.shape(a)[0])\r\n```\r\n\r\nor tell `tf.shape()` to return an int64 value:\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\na = tf.random_normal([5, 5])\r\nb = tf.random_normal([10, 10])\r\nc = tf.matrix_band_part(input=b, num_lower=0, num_upper=tf.shape(a, out_type=tf.int64)[0])\r\n```\r\n\r\nAs to the larger usability question of \"should TensorFlow perform implicit promotions for integers\", it's probably better to open a new PR for that.\r\n"}