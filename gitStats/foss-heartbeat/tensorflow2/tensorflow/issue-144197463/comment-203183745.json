{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/203183745", "html_url": "https://github.com/tensorflow/tensorflow/issues/1689#issuecomment-203183745", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1689", "id": 203183745, "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzE4Mzc0NQ==", "user": {"login": "MisayaZ", "id": 16910475, "node_id": "MDQ6VXNlcjE2OTEwNDc1", "avatar_url": "https://avatars2.githubusercontent.com/u/16910475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MisayaZ", "html_url": "https://github.com/MisayaZ", "followers_url": "https://api.github.com/users/MisayaZ/followers", "following_url": "https://api.github.com/users/MisayaZ/following{/other_user}", "gists_url": "https://api.github.com/users/MisayaZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/MisayaZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MisayaZ/subscriptions", "organizations_url": "https://api.github.com/users/MisayaZ/orgs", "repos_url": "https://api.github.com/users/MisayaZ/repos", "events_url": "https://api.github.com/users/MisayaZ/events{/privacy}", "received_events_url": "https://api.github.com/users/MisayaZ/received_events", "type": "User", "site_admin": false}, "created_at": "2016-03-30T01:28:04Z", "updated_at": "2016-04-05T01:56:36Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=229914\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/keveman\">@keveman</a>  That is right, I mean the time to run the operation. The way which I used to measure it is just like the example of  alexnet_benchmark.py, here is the code:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">inference</span>(<span class=\"pl-smi\">images</span>, <span class=\"pl-smi\">sep_kernels</span>):\n        conv_sepf <span class=\"pl-k\">=</span> tf.nn.conv2d(images, sep_kernelf, [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>], <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>SAME<span class=\"pl-pds\">'</span></span>)\n\n        <span class=\"pl-k\">return</span> conv_sepf</pre></div>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">time_tensorflow_run</span>(<span class=\"pl-smi\">target</span>,<span class=\"pl-smi\">session</span>):\n    num_steps_burn_in <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\n    total_duration <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.0</span>\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-v\">xrange</span>(<span class=\"pl-c1\">100</span> <span class=\"pl-k\">+</span> num_steps_burn_in):\n        start_time <span class=\"pl-k\">=</span> time.time()\n        _ <span class=\"pl-k\">=</span> session.run(target)\n        duration <span class=\"pl-k\">=</span> time.time() <span class=\"pl-k\">-</span> start_time\n        <span class=\"pl-k\">if</span> i <span class=\"pl-k\">&gt;</span> num_steps_burn_in:\n          <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> i <span class=\"pl-k\">%</span> <span class=\"pl-c1\">10</span>:\n            <span class=\"pl-c1\">print</span> (<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">%s</span>: step <span class=\"pl-c1\">%d</span>, duration = <span class=\"pl-c1\">%.5f</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span>\n               (datetime.now(), i <span class=\"pl-k\">-</span> num_steps_burn_in, duration))\n          total_duration <span class=\"pl-k\">+=</span> duration\n    mn <span class=\"pl-k\">=</span> total_duration <span class=\"pl-k\">/</span> <span class=\"pl-c1\">100</span>\n    <span class=\"pl-c1\">print</span> (<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">%s</span>:  100 steps, <span class=\"pl-c1\">%.5f</span> sec<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span>\n         (datetime.now(),mn))</pre></div>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">run_benchmark</span>():\n    <span class=\"pl-k\">with</span> tf.Graph().as_default():\n        images <span class=\"pl-k\">=</span> np.load(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>iamges_value.npy<span class=\"pl-pds\">\"</span></span>)\n        sep_kernels <span class=\"pl-k\">=</span> np.load(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sep_value2.npy<span class=\"pl-pds\">\"</span></span>)\n        conv <span class=\"pl-k\">=</span> inference(images, sep_kernels)\n\n        init <span class=\"pl-k\">=</span> tf.initialize_all_variables()\n        sess <span class=\"pl-k\">=</span> tf.Session()\n        sess.run(init)\n\n        time_tensorflow_run(conv, sess)\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>job done!<span class=\"pl-pds\">\"</span></span>)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">_</span>):\n    run_benchmark()\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    tf.app.run()</pre></div>\n<p>Thanks`</p>", "body_text": "@keveman  That is right, I mean the time to run the operation. The way which I used to measure it is just like the example of  alexnet_benchmark.py, here is the code:\ndef inference(images, sep_kernels):\n        conv_sepf = tf.nn.conv2d(images, sep_kernelf, [1, 1, 1, 1], padding='SAME')\n\n        return conv_sepf\ndef time_tensorflow_run(target,session):\n    num_steps_burn_in = 10\n    total_duration = 0.0\n    for i in xrange(100 + num_steps_burn_in):\n        start_time = time.time()\n        _ = session.run(target)\n        duration = time.time() - start_time\n        if i > num_steps_burn_in:\n          if not i % 10:\n            print ('%s: step %d, duration = %.5f' %\n               (datetime.now(), i - num_steps_burn_in, duration))\n          total_duration += duration\n    mn = total_duration / 100\n    print ('%s:  100 steps, %.5f sec' %\n         (datetime.now(),mn))\ndef run_benchmark():\n    with tf.Graph().as_default():\n        images = np.load(\"iamges_value.npy\")\n        sep_kernels = np.load(\"sep_value2.npy\")\n        conv = inference(images, sep_kernels)\n\n        init = tf.initialize_all_variables()\n        sess = tf.Session()\n        sess.run(init)\n\n        time_tensorflow_run(conv, sess)\n    print(\"job done!\")\n\n\ndef main(_):\n    run_benchmark()\n\n\nif __name__ == '__main__':\n    tf.app.run()\nThanks`", "body": "@keveman  That is right, I mean the time to run the operation. The way which I used to measure it is just like the example of  alexnet_benchmark.py, here is the code: \n\n``` python\ndef inference(images, sep_kernels):\n        conv_sepf = tf.nn.conv2d(images, sep_kernelf, [1, 1, 1, 1], padding='SAME')\n\n        return conv_sepf\n```\n\n``` python\ndef time_tensorflow_run(target,session):\n    num_steps_burn_in = 10\n    total_duration = 0.0\n    for i in xrange(100 + num_steps_burn_in):\n        start_time = time.time()\n        _ = session.run(target)\n        duration = time.time() - start_time\n        if i > num_steps_burn_in:\n          if not i % 10:\n            print ('%s: step %d, duration = %.5f' %\n               (datetime.now(), i - num_steps_burn_in, duration))\n          total_duration += duration\n    mn = total_duration / 100\n    print ('%s:  100 steps, %.5f sec' %\n         (datetime.now(),mn))\n```\n\n``` python\ndef run_benchmark():\n    with tf.Graph().as_default():\n        images = np.load(\"iamges_value.npy\")\n        sep_kernels = np.load(\"sep_value2.npy\")\n        conv = inference(images, sep_kernels)\n\n        init = tf.initialize_all_variables()\n        sess = tf.Session()\n        sess.run(init)\n\n        time_tensorflow_run(conv, sess)\n    print(\"job done!\")\n\n\ndef main(_):\n    run_benchmark()\n\n\nif __name__ == '__main__':\n    tf.app.run()\n```\n\nThanks`\n"}