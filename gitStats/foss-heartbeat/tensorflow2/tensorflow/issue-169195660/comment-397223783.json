{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/397223783", "html_url": "https://github.com/tensorflow/tensorflow/issues/3628#issuecomment-397223783", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3628", "id": 397223783, "node_id": "MDEyOklzc3VlQ29tbWVudDM5NzIyMzc4Mw==", "user": {"login": "kerolos", "id": 3300016, "node_id": "MDQ6VXNlcjMzMDAwMTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3300016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kerolos", "html_url": "https://github.com/kerolos", "followers_url": "https://api.github.com/users/kerolos/followers", "following_url": "https://api.github.com/users/kerolos/following{/other_user}", "gists_url": "https://api.github.com/users/kerolos/gists{/gist_id}", "starred_url": "https://api.github.com/users/kerolos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kerolos/subscriptions", "organizations_url": "https://api.github.com/users/kerolos/orgs", "repos_url": "https://api.github.com/users/kerolos/repos", "events_url": "https://api.github.com/users/kerolos/events{/privacy}", "received_events_url": "https://api.github.com/users/kerolos/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-14T08:59:54Z", "updated_at": "2018-06-14T09:00:35Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=274526\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/barbolo\">@barbolo</a> . i did your suggestion to delete Some Nodes and I saved the model correctly as pb format,<br>\nbut unfortunately, when I run the model in c++ I got the same prediction results. furthermore, I used TFlearn to create my model in Tensorflow.<br>\nthe layers that i used in TFlearn are (tflearn.layers.normalization.batch_normalization, max_pool_2d, conv_2d, dropout)</p>\n<h1><strong>The code in python:</strong></h1>\n<p>def freeze_graph(model):<br>\noutput_node_names = \"FullyConnected_2/Softmax\"# \"FullyConnected_2\" #input/X,<br>\ngraph = model.net.graph</p>\n<p>sess = model.session</p>\n<p>for v in sess.graph.get_operations():<br>\nprint(v.name)</p>\n<p>gd = sess.graph.as_graph_def()</p>\n<p>for node in gd.node:<br>\nif node.op == 'RefSwitch':<br>\nnode.op = 'Switch'<br>\nfor index in range(len(node.input)):<br>\nif 'moving_' in node.input[index]:<br>\nnode.input[index] = node.input[index] + '/read'<br>\nelif node.op == 'AssignSub':<br>\nnode.op = 'Sub'<br>\nif 'use_locking' in node.attr: del node.attr['use_locking']<br>\nelif node.op == 'AssignAdd':<br>\nnode.op = 'Add'<br>\nif 'use_locking' in node.attr: del node.attr['use_locking']</p>\n<p>output_graph_def = graph_util.convert_variables_to_constants(<br>\nsess, # The session is used to retrieve the weights<br>\ngd, # The graph_def is used to retrieve the nodes<br>\noutput_node_names.split(\",\") # The output node names are used to select the usefull nodes<br>\n)</p>\n<p>with tf.gfile.GFile(output_graph, \"wb\") as f:<br>\nf.write(output_graph_def.SerializeToString())<br>\nprint(\"%d ops in the final graph.\" % len(output_graph_def.node))</p>\n<h1>Run the session in c++</h1>\n<p>string input_layer = \"input/X:0\";//\"input/X:0\";<br>\nstring output_layer = \"FullyConnected_2/Softmax:0\";</p>\n<p>Status status = m_session-&gt;Run({{input_layer,resized_tensor}},<br>\n{output_layer}, {}, &amp;outputs);<br>\nstd::cout &lt;&lt; outputs[0].DebugString() &lt;&lt; \"\\n\"; ----&gt; the output is constant for all images</p>", "body_text": "@barbolo . i did your suggestion to delete Some Nodes and I saved the model correctly as pb format,\nbut unfortunately, when I run the model in c++ I got the same prediction results. furthermore, I used TFlearn to create my model in Tensorflow.\nthe layers that i used in TFlearn are (tflearn.layers.normalization.batch_normalization, max_pool_2d, conv_2d, dropout)\nThe code in python:\ndef freeze_graph(model):\noutput_node_names = \"FullyConnected_2/Softmax\"# \"FullyConnected_2\" #input/X,\ngraph = model.net.graph\nsess = model.session\nfor v in sess.graph.get_operations():\nprint(v.name)\ngd = sess.graph.as_graph_def()\nfor node in gd.node:\nif node.op == 'RefSwitch':\nnode.op = 'Switch'\nfor index in range(len(node.input)):\nif 'moving_' in node.input[index]:\nnode.input[index] = node.input[index] + '/read'\nelif node.op == 'AssignSub':\nnode.op = 'Sub'\nif 'use_locking' in node.attr: del node.attr['use_locking']\nelif node.op == 'AssignAdd':\nnode.op = 'Add'\nif 'use_locking' in node.attr: del node.attr['use_locking']\noutput_graph_def = graph_util.convert_variables_to_constants(\nsess, # The session is used to retrieve the weights\ngd, # The graph_def is used to retrieve the nodes\noutput_node_names.split(\",\") # The output node names are used to select the usefull nodes\n)\nwith tf.gfile.GFile(output_graph, \"wb\") as f:\nf.write(output_graph_def.SerializeToString())\nprint(\"%d ops in the final graph.\" % len(output_graph_def.node))\nRun the session in c++\nstring input_layer = \"input/X:0\";//\"input/X:0\";\nstring output_layer = \"FullyConnected_2/Softmax:0\";\nStatus status = m_session->Run({{input_layer,resized_tensor}},\n{output_layer}, {}, &outputs);\nstd::cout << outputs[0].DebugString() << \"\\n\"; ----> the output is constant for all images", "body": "@barbolo . i did your suggestion to delete Some Nodes and I saved the model correctly as pb format,\r\nbut unfortunately, when I run the model in c++ I got the same prediction results. furthermore, I used TFlearn to create my model in Tensorflow.\r\nthe layers that i used in TFlearn are (tflearn.layers.normalization.batch_normalization, max_pool_2d, conv_2d, dropout)\r\n\r\n# **The code in python:** \r\n\r\ndef freeze_graph(model):\r\noutput_node_names = \"FullyConnected_2/Softmax\"# \"FullyConnected_2\" #input/X,\r\ngraph = model.net.graph\r\n\r\nsess = model.session\r\n\r\nfor v in sess.graph.get_operations():\r\n  print(v.name)\r\n\r\ngd = sess.graph.as_graph_def()\r\n\r\nfor node in gd.node:            \r\n    if node.op == 'RefSwitch':\r\n        node.op = 'Switch'\r\n        for index in range(len(node.input)):\r\n            if 'moving_' in node.input[index]:\r\n                node.input[index] = node.input[index] + '/read'\r\n    elif node.op == 'AssignSub':\r\n        node.op = 'Sub'\r\n        if 'use_locking' in node.attr: del node.attr['use_locking']\r\n    elif node.op == 'AssignAdd':\r\n        node.op = 'Add'\r\n        if 'use_locking' in node.attr: del node.attr['use_locking']\r\n\r\noutput_graph_def = graph_util.convert_variables_to_constants(\r\n    sess, # The session is used to retrieve the weights\r\n    gd, # The graph_def is used to retrieve the nodes \r\n    output_node_names.split(\",\") # The output node names are used to select the usefull nodes\r\n) \r\n\r\nwith tf.gfile.GFile(output_graph, \"wb\") as f:\r\n    f.write(output_graph_def.SerializeToString())\r\nprint(\"%d ops in the final graph.\" % len(output_graph_def.node))\r\n\r\n\r\n#  Run the session in c++\r\n\r\nstring input_layer = \"input/X:0\";//\"input/X:0\";\r\nstring output_layer = \"FullyConnected_2/Softmax:0\";\r\n\r\nStatus status = m_session->Run({{input_layer,resized_tensor}},\r\n{output_layer}, {}, &outputs);\r\nstd::cout << outputs[0].DebugString() << \"\\n\"; ----> the output is constant for all images"}