{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/272149052", "html_url": "https://github.com/tensorflow/tensorflow/issues/3628#issuecomment-272149052", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3628", "id": 272149052, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjE0OTA1Mg==", "user": {"login": "barbolo", "id": 274526, "node_id": "MDQ6VXNlcjI3NDUyNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/274526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barbolo", "html_url": "https://github.com/barbolo", "followers_url": "https://api.github.com/users/barbolo/followers", "following_url": "https://api.github.com/users/barbolo/following{/other_user}", "gists_url": "https://api.github.com/users/barbolo/gists{/gist_id}", "starred_url": "https://api.github.com/users/barbolo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barbolo/subscriptions", "organizations_url": "https://api.github.com/users/barbolo/orgs", "repos_url": "https://api.github.com/users/barbolo/repos", "events_url": "https://api.github.com/users/barbolo/events{/privacy}", "received_events_url": "https://api.github.com/users/barbolo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-12T12:15:52Z", "updated_at": "2017-02-13T10:25:48Z", "author_association": "NONE", "body_html": "<p>The full script I use to convert a checkpoint model to a protobuf graph is below, in case more people using batch norm layers find it useful.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\">Convert model.ckpt to model.pb</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> absolute_import\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> division\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> print_function\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.python.framework <span class=\"pl-k\">import</span> graph_util\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> create a session</span>\nsess <span class=\"pl-k\">=</span> tf.Session()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> import best model</span>\nsaver <span class=\"pl-k\">=</span> tf.train.import_meta_graph(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>model.ckpt.meta<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> graph</span>\nsaver.restore(sess, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>model.ckpt<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c\"><span class=\"pl-c\">#</span> variables</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> get graph definition</span>\ngd <span class=\"pl-k\">=</span> sess.graph.as_graph_def()\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> fix batch norm nodes</span>\n<span class=\"pl-k\">for</span> node <span class=\"pl-k\">in</span> gd.node:\n  <span class=\"pl-k\">if</span> node.op <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>RefSwitch<span class=\"pl-pds\">'</span></span>:\n    node.op <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Switch<span class=\"pl-pds\">'</span></span>\n    <span class=\"pl-k\">for</span> index <span class=\"pl-k\">in</span> <span class=\"pl-v\">xrange</span>(<span class=\"pl-c1\">len</span>(node.input)):\n      <span class=\"pl-k\">if</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>moving_<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">in</span> node.input[index]:\n        node.input[index] <span class=\"pl-k\">=</span> node.input[index] <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/read<span class=\"pl-pds\">'</span></span>\n  <span class=\"pl-k\">elif</span> node.op <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>AssignSub<span class=\"pl-pds\">'</span></span>:\n    node.op <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Sub<span class=\"pl-pds\">'</span></span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>use_locking<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">in</span> node.attr: <span class=\"pl-k\">del</span> node.attr[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>use_locking<span class=\"pl-pds\">'</span></span>]\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> generate protobuf</span>\nconverted_graph_def <span class=\"pl-k\">=</span> graph_util.convert_variables_to_constants(sess, gd, [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>logits_set<span class=\"pl-pds\">\"</span></span>])\ntf.train.write_graph(converted_graph_def, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/path/to/save/<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>model.pb<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">as_text</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)</pre></div>", "body_text": "The full script I use to convert a checkpoint model to a protobuf graph is below, in case more people using batch norm layers find it useful.\n\"\"\"\nConvert model.ckpt to model.pb\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\nfrom tensorflow.python.framework import graph_util\n\n# create a session\nsess = tf.Session()\n\n# import best model\nsaver = tf.train.import_meta_graph('model.ckpt.meta') # graph\nsaver.restore(sess, 'model.ckpt') # variables\n\n# get graph definition\ngd = sess.graph.as_graph_def()\n\n# fix batch norm nodes\nfor node in gd.node:\n  if node.op == 'RefSwitch':\n    node.op = 'Switch'\n    for index in xrange(len(node.input)):\n      if 'moving_' in node.input[index]:\n        node.input[index] = node.input[index] + '/read'\n  elif node.op == 'AssignSub':\n    node.op = 'Sub'\n    if 'use_locking' in node.attr: del node.attr['use_locking']\n\n# generate protobuf\nconverted_graph_def = graph_util.convert_variables_to_constants(sess, gd, [\"logits_set\"])\ntf.train.write_graph(converted_graph_def, '/path/to/save/', 'model.pb', as_text=False)", "body": "The full script I use to convert a checkpoint model to a protobuf graph is below, in case more people using batch norm layers find it useful.\r\n\r\n```python\r\n\"\"\"\r\nConvert model.ckpt to model.pb\r\n\"\"\"\r\n\r\nfrom __future__ import absolute_import\r\nfrom __future__ import division\r\nfrom __future__ import print_function\r\n\r\nimport tensorflow as tf\r\nfrom tensorflow.python.framework import graph_util\r\n\r\n# create a session\r\nsess = tf.Session()\r\n\r\n# import best model\r\nsaver = tf.train.import_meta_graph('model.ckpt.meta') # graph\r\nsaver.restore(sess, 'model.ckpt') # variables\r\n\r\n# get graph definition\r\ngd = sess.graph.as_graph_def()\r\n\r\n# fix batch norm nodes\r\nfor node in gd.node:\r\n  if node.op == 'RefSwitch':\r\n    node.op = 'Switch'\r\n    for index in xrange(len(node.input)):\r\n      if 'moving_' in node.input[index]:\r\n        node.input[index] = node.input[index] + '/read'\r\n  elif node.op == 'AssignSub':\r\n    node.op = 'Sub'\r\n    if 'use_locking' in node.attr: del node.attr['use_locking']\r\n\r\n# generate protobuf\r\nconverted_graph_def = graph_util.convert_variables_to_constants(sess, gd, [\"logits_set\"])\r\ntf.train.write_graph(converted_graph_def, '/path/to/save/', 'model.pb', as_text=False)\r\n```\r\n"}