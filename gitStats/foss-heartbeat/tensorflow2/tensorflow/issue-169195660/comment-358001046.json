{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/358001046", "html_url": "https://github.com/tensorflow/tensorflow/issues/3628#issuecomment-358001046", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3628", "id": 358001046, "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODAwMTA0Ng==", "user": {"login": "Tauranis", "id": 9088856, "node_id": "MDQ6VXNlcjkwODg4NTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/9088856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tauranis", "html_url": "https://github.com/Tauranis", "followers_url": "https://api.github.com/users/Tauranis/followers", "following_url": "https://api.github.com/users/Tauranis/following{/other_user}", "gists_url": "https://api.github.com/users/Tauranis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tauranis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tauranis/subscriptions", "organizations_url": "https://api.github.com/users/Tauranis/orgs", "repos_url": "https://api.github.com/users/Tauranis/repos", "events_url": "https://api.github.com/users/Tauranis/events{/privacy}", "received_events_url": "https://api.github.com/users/Tauranis/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-16T15:36:47Z", "updated_at": "2018-01-17T13:00:53Z", "author_association": "NONE", "body_html": "<p>I'm facing the same problem using models provided by <a href=\"https://github.com/tensorflow/models/tree/master/research/slim/nets\">slim.</a> on TensorFlow 1.4.0 and training using the Estimator API</p>\n<ul>\n<li>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No</li>\n<li>OS Platform and Distribution: Linux Ubuntu 16.04</li>\n<li>TensorFlow installed from (source or binary): binary - from pip</li>\n<li>TensorFlow version: release 1.4.0</li>\n<li>Python version: 2.7</li>\n<li>Bazel version (if compiling from source): - Not applicable</li>\n<li>GCC/Compiler version (if compiling from source): - Not applicable</li>\n<li>CUDA/cuDNN version: 8/6</li>\n<li>GPU model and memory: GTX 770, 4GB</li>\n</ul>\n<p>The workaround that worked for me:</p>\n<ol>\n<li>Create the  graph from the source code</li>\n<li>Create my own input placeholder (as opposed to the batch iterator from estimator API)</li>\n<li>Restore trained checkpoint</li>\n<li>Save a new checkpoint</li>\n<li>Freeze graph</li>\n<li>Quantize (optinal)</li>\n</ol>\n<p>The code below is the one I'm currently using for steps 1-4</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> -*- coding: utf-8 -*-</span>\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> cnn_architecture <span class=\"pl-k\">import</span> cnn_architecture <span class=\"pl-c\"><span class=\"pl-c\">#</span> Define your architecture here</span>\n\ntf.logging.set_verbosity(tf.logging.<span class=\"pl-c1\">INFO</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Set default flags for the output directories</span>\n<span class=\"pl-c1\">FLAGS</span> <span class=\"pl-k\">=</span> tf.app.flags.<span class=\"pl-c1\">FLAGS</span>\ntf.app.flags.DEFINE_string(\n    <span class=\"pl-v\">flag_name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>checkpoint_path<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">default_value</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>,\n    <span class=\"pl-v\">docstring</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Checkpoint path<span class=\"pl-pds\">'</span></span>)\ntf.app.flags.DEFINE_string(\n    <span class=\"pl-v\">flag_name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>output_checkpoint_path<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">default_value</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>,\n    <span class=\"pl-v\">docstring</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Checkpoint path<span class=\"pl-pds\">'</span></span>)\ntf.app.flags.DEFINE_integer(<span class=\"pl-v\">flag_name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>image_size<span class=\"pl-pds\">'</span></span>,\n                            <span class=\"pl-v\">default_value</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">200</span>, <span class=\"pl-v\">docstring</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Image size<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">load_and_save_ckpt</span>():\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Create placeholders</span>\n    X <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(\n        <span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">FLAGS</span>.image_size, <span class=\"pl-c1\">FLAGS</span>.image_size, <span class=\"pl-c1\">3</span>), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>input<span class=\"pl-pds\">'</span></span>)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Load net architecture</span>\n    endpoint <span class=\"pl-k\">=</span> cnn_architecture(X, <span class=\"pl-v\">is_training</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Add softmax layer</span>\n    sm_endpoint <span class=\"pl-k\">=</span> tf.nn.softmax(endpoint, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>sm_endpoint<span class=\"pl-pds\">\"</span></span>)\n\n    saver <span class=\"pl-k\">=</span> tf.train.Saver()\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Open session</span>\n    <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n        sess.run(tf.global_variables_initializer())\n        saver.restore(sess, <span class=\"pl-c1\">FLAGS</span>.checkpoint_path)\n        saver.save(sess, <span class=\"pl-c1\">FLAGS</span>.output_checkpoint_path)\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>__main__<span class=\"pl-pds\">\"</span></span>:\n    load_and_save_ckpt()</pre></div>", "body_text": "I'm facing the same problem using models provided by slim. on TensorFlow 1.4.0 and training using the Estimator API\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution: Linux Ubuntu 16.04\nTensorFlow installed from (source or binary): binary - from pip\nTensorFlow version: release 1.4.0\nPython version: 2.7\nBazel version (if compiling from source): - Not applicable\nGCC/Compiler version (if compiling from source): - Not applicable\nCUDA/cuDNN version: 8/6\nGPU model and memory: GTX 770, 4GB\n\nThe workaround that worked for me:\n\nCreate the  graph from the source code\nCreate my own input placeholder (as opposed to the batch iterator from estimator API)\nRestore trained checkpoint\nSave a new checkpoint\nFreeze graph\nQuantize (optinal)\n\nThe code below is the one I'm currently using for steps 1-4\n# -*- coding: utf-8 -*-\nimport tensorflow as tf\nfrom cnn_architecture import cnn_architecture # Define your architecture here\n\ntf.logging.set_verbosity(tf.logging.INFO)\n\n# Set default flags for the output directories\nFLAGS = tf.app.flags.FLAGS\ntf.app.flags.DEFINE_string(\n    flag_name='checkpoint_path', default_value='',\n    docstring='Checkpoint path')\ntf.app.flags.DEFINE_string(\n    flag_name='output_checkpoint_path', default_value='',\n    docstring='Checkpoint path')\ntf.app.flags.DEFINE_integer(flag_name='image_size',\n                            default_value=200, docstring=\"Image size\")\n\ndef load_and_save_ckpt():\n\n    # Create placeholders\n    X = tf.placeholder(dtype=tf.float32, shape=(\n        None, FLAGS.image_size, FLAGS.image_size, 3), name='input')\n\n    # Load net architecture\n    endpoint = cnn_architecture(X, is_training=False)\n\n    # Add softmax layer\n    sm_endpoint = tf.nn.softmax(endpoint, name=\"sm_endpoint\")\n\n    saver = tf.train.Saver()\n\n    # Open session\n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        saver.restore(sess, FLAGS.checkpoint_path)\n        saver.save(sess, FLAGS.output_checkpoint_path)\n\nif __name__ == \"__main__\":\n    load_and_save_ckpt()", "body": "I'm facing the same problem using models provided by [slim.](https://github.com/tensorflow/models/tree/master/research/slim/nets) on TensorFlow 1.4.0 and training using the Estimator API\r\n\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No\r\n- OS Platform and Distribution: Linux Ubuntu 16.04\r\n- TensorFlow installed from (source or binary): binary - from pip\r\n- TensorFlow version: release 1.4.0\r\n- Python version: 2.7\r\n- Bazel version (if compiling from source): - Not applicable\r\n- GCC/Compiler version (if compiling from source): - Not applicable\r\n- CUDA/cuDNN version: 8/6\r\n- GPU model and memory: GTX 770, 4GB\r\n\r\nThe workaround that worked for me:\r\n\r\n1. Create the  graph from the source code  \r\n2. Create my own input placeholder (as opposed to the batch iterator from estimator API)\r\n3. Restore trained checkpoint \r\n4. Save a new checkpoint\r\n5. Freeze graph\r\n6. Quantize (optinal)\r\n\r\nThe code below is the one I'm currently using for steps 1-4\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\nimport tensorflow as tf\r\nfrom cnn_architecture import cnn_architecture # Define your architecture here\r\n\r\ntf.logging.set_verbosity(tf.logging.INFO)\r\n\r\n# Set default flags for the output directories\r\nFLAGS = tf.app.flags.FLAGS\r\ntf.app.flags.DEFINE_string(\r\n    flag_name='checkpoint_path', default_value='',\r\n    docstring='Checkpoint path')\r\ntf.app.flags.DEFINE_string(\r\n    flag_name='output_checkpoint_path', default_value='',\r\n    docstring='Checkpoint path')\r\ntf.app.flags.DEFINE_integer(flag_name='image_size',\r\n                            default_value=200, docstring=\"Image size\")\r\n\r\ndef load_and_save_ckpt():\r\n\r\n    # Create placeholders\r\n    X = tf.placeholder(dtype=tf.float32, shape=(\r\n        None, FLAGS.image_size, FLAGS.image_size, 3), name='input')\r\n\r\n    # Load net architecture\r\n    endpoint = cnn_architecture(X, is_training=False)\r\n\r\n    # Add softmax layer\r\n    sm_endpoint = tf.nn.softmax(endpoint, name=\"sm_endpoint\")\r\n\r\n    saver = tf.train.Saver()\r\n\r\n    # Open session\r\n    with tf.Session() as sess:\r\n        sess.run(tf.global_variables_initializer())\r\n        saver.restore(sess, FLAGS.checkpoint_path)\r\n        saver.save(sess, FLAGS.output_checkpoint_path)\r\n\r\nif __name__ == \"__main__\":\r\n    load_and_save_ckpt()\r\n```"}