{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/142449506", "pull_request_review_id": 66812311, "id": 142449506, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MjQ0OTUwNg==", "diff_hunk": "@@ -304,13 +308,72 @@ def _get_effective_padding_node_input(stride, padding,\n   return stride * effective_padding_output + padding\n \n \n-def compute_receptive_field_from_graph_def(graph_def, input_node, output_node):\n+class ReceptiveField:\n+  \"\"\"\n+  Receptive field of a convolutioanl neural network.\n+\n+  Args:\n+    size: Receptive field size.\n+    stride: Effective stride.\n+    padding: Effective padding.\n+  \"\"\"\n+  def __init__(self, size, stride, padding):\n+    self.size = np.asarray(size)\n+    self.stride = np.asarray(stride)\n+    self.padding = np.asarray(padding)\n+\n+  def compute_input_coordinates(self, x, axis=None):\n+    \"\"\"\n+    Computes the center of the receptive field that generated a feature.\n+\n+    Args:\n+      x: Coordinate of the feature.\n+      axis: The dimensions for which to compute the input coordinates.\n+\n+    Returns:\n+      y: Center of the receptive field that generated the feature.\n+    \"\"\"\n+    # Use all dimensions\n+    if axis is None:\n+      axis = range(self.size.size)\n+    # Ensure axis is a list because tuples have different indexing behavior\n+    axis = list(axis)\n+    return - self.padding[axis] + x * self.stride[axis] + \\\n+      (self.size[axis] - 1) / 2\n+\n+  def compute_feature_coordinates(self, y, axis=None):\n+    \"\"\"\n+    Computes the position of a feature given the center of a receptive field.\n+\n+    Args:\n+      y: Center of the receptive field.\n+      axis: The dimensions for which to compute the feature coordinates.\n+\n+    Returns:\n+      x: Coordinate of the feature.\n+    \"\"\"\n+    # Use all dimensions\n+    if axis is None:\n+      axis = range(self.size.size)\n+    # Ensure axis is a list because tuples have different indexing behavior\n+    axis = list(axis)\n+    return (y + self.padding[axis] + (1 - self.size[axis]) / 2) / \\\n+      self.stride[axis]\n+\n+  def __iter__(self):\n+    return iter(np.concatenate([self.size, self.stride, self.padding]))\n+\n+\n+def compute_receptive_field_from_graph_def(graph_def, input_node, output_node,\n+                                           stop_propagation=None):\n   \"\"\"Computes receptive field (RF) parameters from a GraphDef object.\n \n   Args:\n     graph_def: GraphDef object.\n     input_node: Name of the input node from graph.\n     output_node: Name of the output node from graph.\n+    stop_propagation: List of operation  or scope names for which to stop the", "path": "tensorflow/contrib/receptive_field/python/util/receptive_field.py", "position": null, "original_position": 96, "commit_id": "302207948bbc186a7d99813869313fefbfe8f256", "original_commit_id": "912fe504b01198d51aa809cd9230cdec67a71fb8", "user": {"login": "andrefaraujo", "id": 6316419, "node_id": "MDQ6VXNlcjYzMTY0MTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6316419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrefaraujo", "html_url": "https://github.com/andrefaraujo", "followers_url": "https://api.github.com/users/andrefaraujo/followers", "following_url": "https://api.github.com/users/andrefaraujo/following{/other_user}", "gists_url": "https://api.github.com/users/andrefaraujo/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrefaraujo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrefaraujo/subscriptions", "organizations_url": "https://api.github.com/users/andrefaraujo/orgs", "repos_url": "https://api.github.com/users/andrefaraujo/repos", "events_url": "https://api.github.com/users/andrefaraujo/events{/privacy}", "received_events_url": "https://api.github.com/users/andrefaraujo/received_events", "type": "User", "site_admin": false}, "body": "I understand the logic for the need of stop_propagation. I guess it is useful in order to compute receptive field information for specific paths of a network. (in other words, in a CNN there are multiple ways to go from input to output; stop_propagation supports measuring RF information for only part of the network).\r\nAre there some other cases where it is useful? Anyway, if you could add one or a couple more sentences to explain to the not-so-familiar reader when stop_propagation can be useful, it would be perfect.\r\n", "created_at": "2017-10-03T16:15:35Z", "updated_at": "2017-10-08T15:58:35Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13239#discussion_r142449506", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13239", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/142449506"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13239#discussion_r142449506"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13239"}}, "body_html": "<p>I understand the logic for the need of stop_propagation. I guess it is useful in order to compute receptive field information for specific paths of a network. (in other words, in a CNN there are multiple ways to go from input to output; stop_propagation supports measuring RF information for only part of the network).<br>\nAre there some other cases where it is useful? Anyway, if you could add one or a couple more sentences to explain to the not-so-familiar reader when stop_propagation can be useful, it would be perfect.</p>", "body_text": "I understand the logic for the need of stop_propagation. I guess it is useful in order to compute receptive field information for specific paths of a network. (in other words, in a CNN there are multiple ways to go from input to output; stop_propagation supports measuring RF information for only part of the network).\nAre there some other cases where it is useful? Anyway, if you could add one or a couple more sentences to explain to the not-so-familiar reader when stop_propagation can be useful, it would be perfect."}