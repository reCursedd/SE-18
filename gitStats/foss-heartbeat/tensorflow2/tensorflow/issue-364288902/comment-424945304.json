{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/424945304", "html_url": "https://github.com/tensorflow/tensorflow/issues/22554#issuecomment-424945304", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22554", "id": 424945304, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDk0NTMwNA==", "user": {"login": "panfengli", "id": 18660165, "node_id": "MDQ6VXNlcjE4NjYwMTY1", "avatar_url": "https://avatars2.githubusercontent.com/u/18660165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/panfengli", "html_url": "https://github.com/panfengli", "followers_url": "https://api.github.com/users/panfengli/followers", "following_url": "https://api.github.com/users/panfengli/following{/other_user}", "gists_url": "https://api.github.com/users/panfengli/gists{/gist_id}", "starred_url": "https://api.github.com/users/panfengli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/panfengli/subscriptions", "organizations_url": "https://api.github.com/users/panfengli/orgs", "repos_url": "https://api.github.com/users/panfengli/repos", "events_url": "https://api.github.com/users/panfengli/events{/privacy}", "received_events_url": "https://api.github.com/users/panfengli/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-27T03:16:59Z", "updated_at": "2018-09-27T03:17:56Z", "author_association": "NONE", "body_html": "<p>The one from the above link:</p>\n<pre><code>cmake_minimum_required(VERSION 3.5)\n\nset(CMAKE_C_COMPILER /opt/cuda/bin/gcc)\nset(CMAKE_CXX_COMPILER /opt/cuda/bin/g++)\n\nexecute_process(COMMAND python3 -c \"import tensorflow; print(tensorflow.sysconfig.get_include())\" OUTPUT_VARIABLE Tensorflow_INCLUDE_DIRS)\n\nfind_package(CUDA)\n\nset(CMAKE_CXX_FLAGS \"-std=c++11 -O2 ${CMAKE_CXX_FLAGS}\")\n\nif (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5.0 OR CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 5.0)\n  set(CMAKE_CXX_FLAGS \"-D_GLIBCXX_USE_CXX11_ABI=0 ${CMAKE_CXX_FLAGS}\")\nendif()\n\nSET(CUDA_PROPAGATE_HOST_FLAGS ON)\n\ninclude_directories(${Tensorflow_INCLUDE_DIRS})\n\ncuda_add_library(\n    add_one SHARED\n    cuda_op_kernel.cu\nadd_one.cc)\n</code></pre>\n<p>Currently Tensorflow only provides instructions for CPU ops as:</p>\n<pre><code>TF_CFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_compile_flags()))') )\nTF_LFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_link_flags()))') )\ng++ -std=c++11 -shared zero_out.cc -o zero_out.so -fPIC ${TF_CFLAGS[@]} ${TF_LFLAGS[@]} -O2\n</code></pre>", "body_text": "The one from the above link:\ncmake_minimum_required(VERSION 3.5)\n\nset(CMAKE_C_COMPILER /opt/cuda/bin/gcc)\nset(CMAKE_CXX_COMPILER /opt/cuda/bin/g++)\n\nexecute_process(COMMAND python3 -c \"import tensorflow; print(tensorflow.sysconfig.get_include())\" OUTPUT_VARIABLE Tensorflow_INCLUDE_DIRS)\n\nfind_package(CUDA)\n\nset(CMAKE_CXX_FLAGS \"-std=c++11 -O2 ${CMAKE_CXX_FLAGS}\")\n\nif (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5.0 OR CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 5.0)\n  set(CMAKE_CXX_FLAGS \"-D_GLIBCXX_USE_CXX11_ABI=0 ${CMAKE_CXX_FLAGS}\")\nendif()\n\nSET(CUDA_PROPAGATE_HOST_FLAGS ON)\n\ninclude_directories(${Tensorflow_INCLUDE_DIRS})\n\ncuda_add_library(\n    add_one SHARED\n    cuda_op_kernel.cu\nadd_one.cc)\n\nCurrently Tensorflow only provides instructions for CPU ops as:\nTF_CFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_compile_flags()))') )\nTF_LFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_link_flags()))') )\ng++ -std=c++11 -shared zero_out.cc -o zero_out.so -fPIC ${TF_CFLAGS[@]} ${TF_LFLAGS[@]} -O2", "body": "The one from the above link:\r\n\r\n```\r\ncmake_minimum_required(VERSION 3.5)\r\n\r\nset(CMAKE_C_COMPILER /opt/cuda/bin/gcc)\r\nset(CMAKE_CXX_COMPILER /opt/cuda/bin/g++)\r\n\r\nexecute_process(COMMAND python3 -c \"import tensorflow; print(tensorflow.sysconfig.get_include())\" OUTPUT_VARIABLE Tensorflow_INCLUDE_DIRS)\r\n\r\nfind_package(CUDA)\r\n\r\nset(CMAKE_CXX_FLAGS \"-std=c++11 -O2 ${CMAKE_CXX_FLAGS}\")\r\n\r\nif (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5.0 OR CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 5.0)\r\n  set(CMAKE_CXX_FLAGS \"-D_GLIBCXX_USE_CXX11_ABI=0 ${CMAKE_CXX_FLAGS}\")\r\nendif()\r\n\r\nSET(CUDA_PROPAGATE_HOST_FLAGS ON)\r\n\r\ninclude_directories(${Tensorflow_INCLUDE_DIRS})\r\n\r\ncuda_add_library(\r\n    add_one SHARED\r\n    cuda_op_kernel.cu\r\nadd_one.cc)\r\n```\r\n\r\nCurrently Tensorflow only provides instructions for CPU ops as:\r\n\r\n```\r\nTF_CFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_compile_flags()))') )\r\nTF_LFLAGS=( $(python -c 'import tensorflow as tf; print(\" \".join(tf.sysconfig.get_link_flags()))') )\r\ng++ -std=c++11 -shared zero_out.cc -o zero_out.so -fPIC ${TF_CFLAGS[@]} ${TF_LFLAGS[@]} -O2\r\n```"}