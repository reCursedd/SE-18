{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/360375675", "html_url": "https://github.com/tensorflow/tensorflow/issues/16260#issuecomment-360375675", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16260", "id": 360375675, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDM3NTY3NQ==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-25T06:40:09Z", "updated_at": "2018-01-25T06:40:09Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=35429407\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/wintsonpryme\">@wintsonpryme</a> : I apologize, but I'm not sure I fully follow your question. But hopefully some background here will be informative.</p>\n<p>If you're using maven and following the instructions at <a href=\"https://www.tensorflow.org/install/install_java#using_tensorflow_with_a_maven_project\" rel=\"nofollow\">https://www.tensorflow.org/install/install_java#using_tensorflow_with_a_maven_project</a><br>\nthen the native libraries are automatically be included (and extracted). This happens because the <a href=\"https://search.maven.org/#artifactdetails%7Corg.tensorflow%7Ctensorflow%7C1.5.0-rc1%7Cjar\" rel=\"nofollow\"><code>org.tensorflow:tensorflow</code></a> maven artifact in turns pulls in the <a href=\"https://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.tensorflow%22%20AND%20a%3A%22libtensorflow_jni%22\" rel=\"nofollow\"><code>org.tensorflow:libtensorflow_jni</code></a> artifact, which includes the platform specific native library, which is extracted on program run (via code in <code>NativeLibrary.java</code>). Is that not working for you? (More information on the structure of the Maven packages is in <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/java/maven#artifact-structure\">tensorflow/java/maven/README.md</a>)</p>\n<p>Note that for Windows, the release binaries do not yet include GPU support. So, for GPU support you'll have to build the native library from source, and then provide it to your Java program (setting <code>MAVEN_OPTS</code> if you're using maven, see <a href=\"https://github.com/asimshankar/java-tensorflow/tree/master/gpu#using-gpus\">this</a>). Though, in the future we hope to make this simpler by including the CUDA-enabled native library in the <a href=\"https://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.tensorflow%22%20AND%20a%3A%22libtensorflow_jni_gpu%22\" rel=\"nofollow\"><code>org.tensorflow:libtensorflow_jni_gpu</code></a> artifact.</p>\n<p>The code change you suggested isn't necessarily accurate. The native library might be built in two shared libraries or a single one, depending on whether <code>--config=monolithic</code> was provided to bazel during the builds. For Windows release, we currently build with <code>--config=monolithic</code>, so there is no <code>tensorflow_framework.dll</code>, and instead just a single dynamic library: <code>tensorflow.dll</code>.</p>\n<p>I'm not sure if I've helped with your concern. Please do let us know, or if you have a specific follow up question, we're happy to help. Thanks.</p>", "body_text": "@wintsonpryme : I apologize, but I'm not sure I fully follow your question. But hopefully some background here will be informative.\nIf you're using maven and following the instructions at https://www.tensorflow.org/install/install_java#using_tensorflow_with_a_maven_project\nthen the native libraries are automatically be included (and extracted). This happens because the org.tensorflow:tensorflow maven artifact in turns pulls in the org.tensorflow:libtensorflow_jni artifact, which includes the platform specific native library, which is extracted on program run (via code in NativeLibrary.java). Is that not working for you? (More information on the structure of the Maven packages is in tensorflow/java/maven/README.md)\nNote that for Windows, the release binaries do not yet include GPU support. So, for GPU support you'll have to build the native library from source, and then provide it to your Java program (setting MAVEN_OPTS if you're using maven, see this). Though, in the future we hope to make this simpler by including the CUDA-enabled native library in the org.tensorflow:libtensorflow_jni_gpu artifact.\nThe code change you suggested isn't necessarily accurate. The native library might be built in two shared libraries or a single one, depending on whether --config=monolithic was provided to bazel during the builds. For Windows release, we currently build with --config=monolithic, so there is no tensorflow_framework.dll, and instead just a single dynamic library: tensorflow.dll.\nI'm not sure if I've helped with your concern. Please do let us know, or if you have a specific follow up question, we're happy to help. Thanks.", "body": "@wintsonpryme : I apologize, but I'm not sure I fully follow your question. But hopefully some background here will be informative.\r\n\r\nIf you're using maven and following the instructions at https://www.tensorflow.org/install/install_java#using_tensorflow_with_a_maven_project\r\nthen the native libraries are automatically be included (and extracted). This happens because the [`org.tensorflow:tensorflow`](https://search.maven.org/#artifactdetails%7Corg.tensorflow%7Ctensorflow%7C1.5.0-rc1%7Cjar) maven artifact in turns pulls in the [`org.tensorflow:libtensorflow_jni`](https://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.tensorflow%22%20AND%20a%3A%22libtensorflow_jni%22) artifact, which includes the platform specific native library, which is extracted on program run (via code in `NativeLibrary.java`). Is that not working for you? (More information on the structure of the Maven packages is in [tensorflow/java/maven/README.md](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/java/maven#artifact-structure))\r\n\r\nNote that for Windows, the release binaries do not yet include GPU support. So, for GPU support you'll have to build the native library from source, and then provide it to your Java program (setting `MAVEN_OPTS` if you're using maven, see [this](https://github.com/asimshankar/java-tensorflow/tree/master/gpu#using-gpus)). Though, in the future we hope to make this simpler by including the CUDA-enabled native library in the [`org.tensorflow:libtensorflow_jni_gpu`](https://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.tensorflow%22%20AND%20a%3A%22libtensorflow_jni_gpu%22) artifact.\r\n\r\nThe code change you suggested isn't necessarily accurate. The native library might be built in two shared libraries or a single one, depending on whether `--config=monolithic` was provided to bazel during the builds. For Windows release, we currently build with `--config=monolithic`, so there is no `tensorflow_framework.dll`, and instead just a single dynamic library: `tensorflow.dll`.\r\n\r\nI'm not sure if I've helped with your concern. Please do let us know, or if you have a specific follow up question, we're happy to help. Thanks."}