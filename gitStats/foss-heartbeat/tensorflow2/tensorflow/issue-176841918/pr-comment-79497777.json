{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/79497777", "pull_request_review_id": 644512, "id": 79497777, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NDk3Nzc3", "diff_hunk": "@@ -111,5 +111,116 @@ class LBetaTestGpu(LBetaTest):\n   _use_gpu = True\n \n \n+class EinsumTest(tf.test.TestCase):\n+\n+  # standard cases\n+  simple_cases = [\n+    'ij,jk->ik',\n+    'ijk,jklm->il',\n+    'ij,jk,kl->il',\n+    'ijk->i',\n+  ]\n+\n+  # where axes are not in order\n+  misordered_cases = [\n+    'ji,kj->ik',\n+    'ikl,kji->kl',\n+    'klj,lki->ij',\n+  ]\n+\n+  # more than two arguments\n+  multiarg_cases = [\n+    'ijk,ijl,ikl->i',\n+    'i,ijk,j->k',\n+    'ij,ij,jk,kl->il',\n+  ]\n+\n+  invalid_cases = [\n+    # bad formats\n+    'ijk ijk',\n+    'ij,jk,kl'\n+    'ij->',\n+\n+    # axis in output that does not exist\n+    'ij,jk->im',\n+\n+    # incorrect number of dimensions\n+    'ij,jkl->kl',\n+  ]\n+\n+  dim_mismatch_cases = [\n+    ('ijk,jkl->il',\n+     [(2,3,4), (3,5,6)]),\n+\n+  ]\n+\n+  def test_simple(self):\n+    for case in self.simple_cases:\n+      self.run_test(case)\n+\n+  def test_misordered(self):\n+    for case in self.misordered_cases:\n+      self.run_test(case)\n+\n+  def test_multiarg(self):\n+    for case in self.multiarg_cases:\n+      self.run_test(case)\n+\n+  def test_invalid(self):\n+    for axes in self.invalid_cases:\n+      result = None\n+      inputs = [\n+        tf.placeholder(tf.float32, shape=(3,4)),\n+        tf.placeholder(tf.float32, shape=(3,4)),\n+      ]\n+\n+      try:\n+        result = tf.einsum(axes, *inputs)\n+      except AssertionError as e:\n+        print(e)\n+      assert result is None, \\\n+        \"An exception should have been thrown.\"\n+\n+  def test_dim_mismatch(self):\n+    for axes, input_shapes in self.dim_mismatch_cases:\n+      inputs = [\n+        tf.placeholder(tf.float32, shape=shape)\n+        for shape in input_shapes\n+      ]\n+      result = None\n+      try:\n+        result = tf.einsum(axes, *inputs)\n+      except AssertionError:\n+        pass\n+      assert result is None, \"An exception should have been thrown.\"\n+\n+  def run_test(self, axes):\n+    all_axes = {ax: np.random.randint(4, 12)\n+                for ax in axes if ax.isalpha()}\n+\n+    input_vals = []\n+    input_axes, _, _ = axes.partition('->')\n+\n+    for idx in input_axes.split(','):\n+      shape = [all_axes[ax] for ax in idx]\n+      input_vals.append(np.random.random(shape))\n+\n+    input_tensors = [tf.constant(val) for val in input_vals]\n+    output_tensor = tf.einsum(axes, *input_tensors)\n+\n+    with self.test_session():\n+      output_value = output_tensor.eval()\n+\n+    correct_value = np.einsum(axes, *input_vals)\n+\n+    err = np.abs(correct_value - output_value).max()\n+    print(axes, err)\n+    assert err < 1e-8\n+\n+\n+class EinsumTestGpu(EinsumTest):", "path": "tensorflow/python/ops/special_math_ops_test.py", "position": null, "original_position": 111, "commit_id": "5903f2967cd61aa261eb9d327dd1b1a0d8ff16df", "original_commit_id": "c23a6f8f0204e0de54fd3b4a01c63a21d7e62a78", "user": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "body": "You should remove this class, and always enable processing on the GPU. We run the tests on CPU only and GPU machines. The other tests using the same pattern are vestigial.\n", "created_at": "2016-09-19T21:52:23Z", "updated_at": "2016-09-19T23:49:19Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/4378#discussion_r79497777", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4378", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/79497777"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/4378#discussion_r79497777"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/4378"}}, "body_html": "<p>You should remove this class, and always enable processing on the GPU. We run the tests on CPU only and GPU machines. The other tests using the same pattern are vestigial.</p>", "body_text": "You should remove this class, and always enable processing on the GPU. We run the tests on CPU only and GPU machines. The other tests using the same pattern are vestigial."}