{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21016", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21016/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21016/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21016/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21016", "id": 343319211, "node_id": "MDU6SXNzdWUzNDMzMTkyMTE=", "number": 21016, "title": "keras model to estimator in eager mode does not support the use of nested subclassed models", "user": {"login": "bosmart", "id": 5089507, "node_id": "MDQ6VXNlcjUwODk1MDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5089507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bosmart", "html_url": "https://github.com/bosmart", "followers_url": "https://api.github.com/users/bosmart/followers", "following_url": "https://api.github.com/users/bosmart/following{/other_user}", "gists_url": "https://api.github.com/users/bosmart/gists{/gist_id}", "starred_url": "https://api.github.com/users/bosmart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bosmart/subscriptions", "organizations_url": "https://api.github.com/users/bosmart/orgs", "repos_url": "https://api.github.com/users/bosmart/repos", "events_url": "https://api.github.com/users/bosmart/events{/privacy}", "received_events_url": "https://api.github.com/users/bosmart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "tanzhenyu", "id": 15220929, "node_id": "MDQ6VXNlcjE1MjIwOTI5", "avatar_url": "https://avatars3.githubusercontent.com/u/15220929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tanzhenyu", "html_url": "https://github.com/tanzhenyu", "followers_url": "https://api.github.com/users/tanzhenyu/followers", "following_url": "https://api.github.com/users/tanzhenyu/following{/other_user}", "gists_url": "https://api.github.com/users/tanzhenyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tanzhenyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tanzhenyu/subscriptions", "organizations_url": "https://api.github.com/users/tanzhenyu/orgs", "repos_url": "https://api.github.com/users/tanzhenyu/repos", "events_url": "https://api.github.com/users/tanzhenyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tanzhenyu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tanzhenyu", "id": 15220929, "node_id": "MDQ6VXNlcjE1MjIwOTI5", "avatar_url": "https://avatars3.githubusercontent.com/u/15220929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tanzhenyu", "html_url": "https://github.com/tanzhenyu", "followers_url": "https://api.github.com/users/tanzhenyu/followers", "following_url": "https://api.github.com/users/tanzhenyu/following{/other_user}", "gists_url": "https://api.github.com/users/tanzhenyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tanzhenyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tanzhenyu/subscriptions", "organizations_url": "https://api.github.com/users/tanzhenyu/orgs", "repos_url": "https://api.github.com/users/tanzhenyu/repos", "events_url": "https://api.github.com/users/tanzhenyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tanzhenyu/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 11, "created_at": "2018-07-21T11:12:31Z", "updated_at": "2018-08-01T16:22:44Z", "closed_at": "2018-07-24T19:58:50Z", "author_association": "NONE", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li>\n<p><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes, code attached below.</p>\n</li>\n<li>\n<p><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux Ubuntu 18.04</p>\n</li>\n<li>\n<p><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:<br>\nN/A</p>\n</li>\n<li>\n<p><strong>TensorFlow installed from (source or binary)</strong>:<br>\nFrom source</p>\n</li>\n<li>\n<p><strong>TensorFlow version (use command below)</strong>:<br>\nb'v1.9.0-rc2-999-g78909bf81e' 1.9.0</p>\n</li>\n<li>\n<p><strong>Python version</strong>:<br>\n3.6.6</p>\n</li>\n<li>\n<p><strong>Bazel version (if compiling from source)</strong>:<br>\n0.16.0rc3</p>\n</li>\n<li>\n<p><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\n6</p>\n</li>\n<li>\n<p><strong>CUDA/cuDNN version</strong>:<br>\n9.1 / 7.1</p>\n</li>\n<li>\n<p><strong>GPU model and memory</strong>:<br>\nTitan X, 12GB</p>\n</li>\n<li>\n<p><strong>Exact command to reproduce</strong>:<br>\nRun the attached code.</p>\n</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>This is more of a feature request to add support for the use of nested subclassed models within keras model to estimator eager mode. There is a comment in the relevant section of the code (estimator/keras.py) which says:</p>\n<pre><code># This will not work for nested subclassed models used as layers.\n# This would be theoretically possible to support, but would add complexity.\n# Only do it if users complain.\n</code></pre>\n<h3>Source code / logs</h3>\n<pre><code>import copy\nimport tensorflow as tf\n\ntf.enable_eager_execution()\ntf.logging.set_verbosity(tf.logging.INFO)\n\nclass BaseModel(tf.keras.Model):\n    def __init__(self):\n        super(BaseModel, self).__init__()\n        self.dense1 = tf.keras.layers.Dense(units=10)\n        self.dense2 = tf.keras.layers.Dense(units=1)\n    def call(self, input):\n        \"\"\"Run the model.\"\"\"\n        result = self.dense1(input)\n        result = self.dense2(result)\n        return result\n    def get_config(self):\n        config = []\n        for layer in self.layers:\n            config.append({\n                'class_name': layer.__class__.__name__,\n                'config': layer.get_config()\n            })\n        return copy.deepcopy(config)\n\nclass NestedModel(tf.keras.Model):\n    def __init__(self):\n        super(NestedModel, self).__init__()\n        self.base_model = BaseModel()\n        self.dense = tf.keras.layers.Dense(units=1)\n    def call(self, input):\n        result = self.base_model(input)\n        result = self.dense(result)\n        return result\n    def get_config(self):\n        config = []\n        for layer in self.layers:\n            config.append({\n                'class_name': layer.__class__.__name__,\n                'config': layer.get_config()\n            })\n        return copy.deepcopy(config)\n\nmodel = NestedModel()\nmodel.compile(optimizer=tf.train.AdamOptimizer(learning_rate=0.0001), loss='mean_squared_error', metrics=['accuracy'])\nestimator = tf.keras.estimator.model_to_estimator(keras_model=model)\nestimator.train(input_fn=lambda: tf.data.Dataset.from_tensor_slices((tf.random_uniform([100, 10]), tf.random_uniform([100, ]))).batch(2).repeat(10))\n</code></pre>", "body_text": "System information\n\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes, code attached below.\n\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux Ubuntu 18.04\n\n\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nN/A\n\n\nTensorFlow installed from (source or binary):\nFrom source\n\n\nTensorFlow version (use command below):\nb'v1.9.0-rc2-999-g78909bf81e' 1.9.0\n\n\nPython version:\n3.6.6\n\n\nBazel version (if compiling from source):\n0.16.0rc3\n\n\nGCC/Compiler version (if compiling from source):\n6\n\n\nCUDA/cuDNN version:\n9.1 / 7.1\n\n\nGPU model and memory:\nTitan X, 12GB\n\n\nExact command to reproduce:\nRun the attached code.\n\n\nDescribe the problem\nThis is more of a feature request to add support for the use of nested subclassed models within keras model to estimator eager mode. There is a comment in the relevant section of the code (estimator/keras.py) which says:\n# This will not work for nested subclassed models used as layers.\n# This would be theoretically possible to support, but would add complexity.\n# Only do it if users complain.\n\nSource code / logs\nimport copy\nimport tensorflow as tf\n\ntf.enable_eager_execution()\ntf.logging.set_verbosity(tf.logging.INFO)\n\nclass BaseModel(tf.keras.Model):\n    def __init__(self):\n        super(BaseModel, self).__init__()\n        self.dense1 = tf.keras.layers.Dense(units=10)\n        self.dense2 = tf.keras.layers.Dense(units=1)\n    def call(self, input):\n        \"\"\"Run the model.\"\"\"\n        result = self.dense1(input)\n        result = self.dense2(result)\n        return result\n    def get_config(self):\n        config = []\n        for layer in self.layers:\n            config.append({\n                'class_name': layer.__class__.__name__,\n                'config': layer.get_config()\n            })\n        return copy.deepcopy(config)\n\nclass NestedModel(tf.keras.Model):\n    def __init__(self):\n        super(NestedModel, self).__init__()\n        self.base_model = BaseModel()\n        self.dense = tf.keras.layers.Dense(units=1)\n    def call(self, input):\n        result = self.base_model(input)\n        result = self.dense(result)\n        return result\n    def get_config(self):\n        config = []\n        for layer in self.layers:\n            config.append({\n                'class_name': layer.__class__.__name__,\n                'config': layer.get_config()\n            })\n        return copy.deepcopy(config)\n\nmodel = NestedModel()\nmodel.compile(optimizer=tf.train.AdamOptimizer(learning_rate=0.0001), loss='mean_squared_error', metrics=['accuracy'])\nestimator = tf.keras.estimator.model_to_estimator(keras_model=model)\nestimator.train(input_fn=lambda: tf.data.Dataset.from_tensor_slices((tf.random_uniform([100, 10]), tf.random_uniform([100, ]))).batch(2).repeat(10))", "body": "------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes, code attached below.\r\n\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nLinux Ubuntu 18.04\r\n\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\nN/A\r\n\r\n- **TensorFlow installed from (source or binary)**:\r\nFrom source\r\n\r\n- **TensorFlow version (use command below)**:\r\nb'v1.9.0-rc2-999-g78909bf81e' 1.9.0\r\n\r\n- **Python version**:\r\n3.6.6\r\n\r\n- **Bazel version (if compiling from source)**:\r\n0.16.0rc3\r\n\r\n- **GCC/Compiler version (if compiling from source)**:\r\n6\r\n\r\n- **CUDA/cuDNN version**:\r\n9.1 / 7.1\r\n\r\n- **GPU model and memory**:\r\nTitan X, 12GB\r\n\r\n- **Exact command to reproduce**:\r\nRun the attached code.\r\n\r\n### Describe the problem\r\nThis is more of a feature request to add support for the use of nested subclassed models within keras model to estimator eager mode. There is a comment in the relevant section of the code (estimator/keras.py) which says:\r\n\r\n    # This will not work for nested subclassed models used as layers.\r\n    # This would be theoretically possible to support, but would add complexity.\r\n    # Only do it if users complain.\r\n\r\n\r\n### Source code / logs\r\n```\r\nimport copy\r\nimport tensorflow as tf\r\n\r\ntf.enable_eager_execution()\r\ntf.logging.set_verbosity(tf.logging.INFO)\r\n\r\nclass BaseModel(tf.keras.Model):\r\n    def __init__(self):\r\n        super(BaseModel, self).__init__()\r\n        self.dense1 = tf.keras.layers.Dense(units=10)\r\n        self.dense2 = tf.keras.layers.Dense(units=1)\r\n    def call(self, input):\r\n        \"\"\"Run the model.\"\"\"\r\n        result = self.dense1(input)\r\n        result = self.dense2(result)\r\n        return result\r\n    def get_config(self):\r\n        config = []\r\n        for layer in self.layers:\r\n            config.append({\r\n                'class_name': layer.__class__.__name__,\r\n                'config': layer.get_config()\r\n            })\r\n        return copy.deepcopy(config)\r\n\r\nclass NestedModel(tf.keras.Model):\r\n    def __init__(self):\r\n        super(NestedModel, self).__init__()\r\n        self.base_model = BaseModel()\r\n        self.dense = tf.keras.layers.Dense(units=1)\r\n    def call(self, input):\r\n        result = self.base_model(input)\r\n        result = self.dense(result)\r\n        return result\r\n    def get_config(self):\r\n        config = []\r\n        for layer in self.layers:\r\n            config.append({\r\n                'class_name': layer.__class__.__name__,\r\n                'config': layer.get_config()\r\n            })\r\n        return copy.deepcopy(config)\r\n\r\nmodel = NestedModel()\r\nmodel.compile(optimizer=tf.train.AdamOptimizer(learning_rate=0.0001), loss='mean_squared_error', metrics=['accuracy'])\r\nestimator = tf.keras.estimator.model_to_estimator(keras_model=model)\r\nestimator.train(input_fn=lambda: tf.data.Dataset.from_tensor_slices((tf.random_uniform([100, 10]), tf.random_uniform([100, ]))).batch(2).repeat(10))\r\n```\r\n"}