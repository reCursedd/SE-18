{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/418828906", "html_url": "https://github.com/tensorflow/tensorflow/issues/17910#issuecomment-418828906", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17910", "id": 418828906, "node_id": "MDEyOklzc3VlQ29tbWVudDQxODgyODkwNg==", "user": {"login": "prb12", "id": 11547801, "node_id": "MDQ6VXNlcjExNTQ3ODAx", "avatar_url": "https://avatars1.githubusercontent.com/u/11547801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prb12", "html_url": "https://github.com/prb12", "followers_url": "https://api.github.com/users/prb12/followers", "following_url": "https://api.github.com/users/prb12/following{/other_user}", "gists_url": "https://api.github.com/users/prb12/gists{/gist_id}", "starred_url": "https://api.github.com/users/prb12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prb12/subscriptions", "organizations_url": "https://api.github.com/users/prb12/orgs", "repos_url": "https://api.github.com/users/prb12/repos", "events_url": "https://api.github.com/users/prb12/events{/privacy}", "received_events_url": "https://api.github.com/users/prb12/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-05T18:15:04Z", "updated_at": "2018-09-05T18:15:04Z", "author_association": "MEMBER", "body_html": "<p>Well, it's very hard to see what the problem might be from the \"modified code\" link you sent because the timeline capturing code is commented out in a way that obfuscates the original control-flow:</p>\n<pre><code>      #run_metadata = tf.RunMetadata()\n      #count = 0\n      while not mon_sess.should_stop():\n#        mon_sess.run(train_op, options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE), run_metadata=run_metadata)\n        mon_sess.run(train_op)\n#        from tensorflow.python.client import timeline\n#        trace = timeline.Timeline(step_stats=run_metadata.step_stats)\n#        trace_file = open('timeline_%d_cifar10_cpu.ctf.json' % (count), 'w')\n#        trace_file.write(trace.generate_chrome_trace_format())\n#        count += 1\n</code></pre>\n<p>But... the fact that you create the <code>tf.RunMetadata</code> protobuf outside the loop and potentially reuse it many times means that you quite probably have merged a bunch of <code>StepStats</code> into the same protobuf.  The <code>Timeline</code> code would be very confused by this.</p>\n<p>To debug, I would suggest writing <code>step_stats</code> to a file, or printing it out.  If there are numerous copies of the same step/ops in there then its not a timeline problem.</p>\n<p>But first I would try making a new <code>tf.RunMetadata</code> object for each <code>sess.run</code> call, make sure you just trace a <em>single</em> step and only write the trace file once.</p>\n<p>Failing any of those, I would suspect maybe something funny with the CUPTI library version and/or GPU driver-  but that seems very unlikely.</p>", "body_text": "Well, it's very hard to see what the problem might be from the \"modified code\" link you sent because the timeline capturing code is commented out in a way that obfuscates the original control-flow:\n      #run_metadata = tf.RunMetadata()\n      #count = 0\n      while not mon_sess.should_stop():\n#        mon_sess.run(train_op, options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE), run_metadata=run_metadata)\n        mon_sess.run(train_op)\n#        from tensorflow.python.client import timeline\n#        trace = timeline.Timeline(step_stats=run_metadata.step_stats)\n#        trace_file = open('timeline_%d_cifar10_cpu.ctf.json' % (count), 'w')\n#        trace_file.write(trace.generate_chrome_trace_format())\n#        count += 1\n\nBut... the fact that you create the tf.RunMetadata protobuf outside the loop and potentially reuse it many times means that you quite probably have merged a bunch of StepStats into the same protobuf.  The Timeline code would be very confused by this.\nTo debug, I would suggest writing step_stats to a file, or printing it out.  If there are numerous copies of the same step/ops in there then its not a timeline problem.\nBut first I would try making a new tf.RunMetadata object for each sess.run call, make sure you just trace a single step and only write the trace file once.\nFailing any of those, I would suspect maybe something funny with the CUPTI library version and/or GPU driver-  but that seems very unlikely.", "body": "Well, it's very hard to see what the problem might be from the \"modified code\" link you sent because the timeline capturing code is commented out in a way that obfuscates the original control-flow:\r\n```\r\n      #run_metadata = tf.RunMetadata()\r\n      #count = 0\r\n      while not mon_sess.should_stop():\r\n#        mon_sess.run(train_op, options=tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE), run_metadata=run_metadata)\r\n        mon_sess.run(train_op)\r\n#        from tensorflow.python.client import timeline\r\n#        trace = timeline.Timeline(step_stats=run_metadata.step_stats)\r\n#        trace_file = open('timeline_%d_cifar10_cpu.ctf.json' % (count), 'w')\r\n#        trace_file.write(trace.generate_chrome_trace_format())\r\n#        count += 1\r\n```\r\n\r\nBut... the fact that you create the `tf.RunMetadata` protobuf outside the loop and potentially reuse it many times means that you quite probably have merged a bunch of `StepStats` into the same protobuf.  The `Timeline` code would be very confused by this.  \r\n\r\nTo debug, I would suggest writing `step_stats` to a file, or printing it out.  If there are numerous copies of the same step/ops in there then its not a timeline problem.\r\n\r\nBut first I would try making a new `tf.RunMetadata` object for each `sess.run` call, make sure you just trace a *single* step and only write the trace file once.\r\n\r\nFailing any of those, I would suspect maybe something funny with the CUPTI library version and/or GPU driver-  but that seems very unlikely.\r\n\r\n"}