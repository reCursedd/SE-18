{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/112552128", "pull_request_review_id": 33877183, "id": 112552128, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjU1MjEyOA==", "diff_hunk": "@@ -0,0 +1,108 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+// See docs in ../ops/io_ops.cc.\n+\n+#include <memory>\n+#include <zmq.h>\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/lib/core/errors.h\"\n+\n+namespace tensorflow {\n+\n+class PollZmqOp : public AsyncOpKernel {\n+ public:\n+  explicit PollZmqOp(OpKernelConstruction* context) : AsyncOpKernel(context) {\n+    OP_REQUIRES_OK(context, context->GetAttr(\"address\", &address_));\n+    OP_REQUIRES_OK(context, context->GetAttr(\"timeout\", &timeout_));\n+    // Create a context and connect a REQ socket\n+    context_ = zmq_ctx_new();\n+    OP_REQUIRES(context, context_ != nullptr,\n+                errors::Internal(\"Failed to initialize context.\"));\n+    socket_ = zmq_socket(context_, ZMQ_REQ);\n+    OP_REQUIRES(context, socket_ != nullptr,\n+                errors::Internal(\"Failed to initialize socket.\"));\n+    OP_REQUIRES(context,\n+                zmq_setsockopt(socket_, ZMQ_RCVTIMEO,\n+                               &timeout_, sizeof(timeout_)) == 0,\n+                errors::Internal(\"Failed to set timeout.\"));\n+    OP_REQUIRES(context, zmq_connect(socket_, &address_[0]) == 0,\n+                errors::Internal(\"Failed to connect to \", address_, \".\"));\n+  }\n+\n+  ~PollZmqOp() {\n+    if (socket_ != nullptr) {\n+      zmq_close(socket_);\n+    }\n+    if (context_ != nullptr) {\n+      zmq_ctx_destroy(context_);\n+    }\n+  }\n+\n+  using AsyncOpKernel::AsyncOpKernel;\n+  void ComputeAsync(OpKernelContext* context, DoneCallback done) override {\n+    const Tensor* input;\n+    OP_REQUIRES_OK(context, context->input(\"request\", &input));\n+    OP_REQUIRES(context, TensorShapeUtils::IsScalar(input->shape()),\n+                errors::InvalidArgument(\n+                    \"Input message tensor must be scalar, but had shape: \",\n+                    input->shape().DebugString()));\n+\n+    Tensor* output = nullptr;\n+    OP_REQUIRES_OK(context, context->allocate_output(\"reply\",\n+                                                      TensorShape({}), &output));\n+\n+    // Get the message and response as string scalars\n+    auto request = input->scalar<string>()();\n+    auto &reply = output->scalar<string>()();\n+\n+    // Lock for exclusive access (destructor releases)\n+    mutex_lock lock(mu_);\n+\n+    // Prepare the message\n+    zmq_msg_t request_msg;\n+    OP_REQUIRES(context, zmq_msg_init_size(&request_msg, request.size()) == 0,\n+                errors::Internal(\"Failed to initialize request.\"));\n+    memmove(zmq_msg_data(&request_msg), &request[0], request.size());\n+    // Send the message (this also takes care of clean up)\n+    OP_REQUIRES(context, zmq_msg_send(&request_msg, socket_, 0) == request.size(),\n+                errors::Internal(\"Failed to send reply.\"));\n+\n+    // Get the response\n+    zmq_msg_t reply_msg;\n+    OP_REQUIRES(context, zmq_msg_init(&reply_msg) == 0,\n+                errors::Internal(\"Failed to initialize reply.\"));\n+    OP_REQUIRES(context, zmq_msg_recv(&reply_msg, socket_, 0) != -1,\n+                errors::Internal(\"Failed to receive reply within \", timeout_, \"ms.\"));\n+    // Copy the data and clean up\n+    reply.resize(zmq_msg_size(&reply_msg));\n+    memmove(&reply[0], zmq_msg_data(&reply_msg), zmq_msg_size(&reply_msg));\n+    OP_REQUIRES(context, zmq_msg_close(&reply_msg) == 0,\n+                errors::Internal(\"Failed to close reply message.\"));\n+    done();", "path": "tensorflow/contrib/io/kernels/zmq_op.cc", "position": null, "original_position": 95, "commit_id": "d70ab8bd61f5dae7ab26713b4f12f9231b244f82", "original_commit_id": "557cadb5bf0170599aeaf46b9713654a0ea0445f", "user": {"login": "tillahoffmann", "id": 966348, "node_id": "MDQ6VXNlcjk2NjM0OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/966348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tillahoffmann", "html_url": "https://github.com/tillahoffmann", "followers_url": "https://api.github.com/users/tillahoffmann/followers", "following_url": "https://api.github.com/users/tillahoffmann/following{/other_user}", "gists_url": "https://api.github.com/users/tillahoffmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/tillahoffmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tillahoffmann/subscriptions", "organizations_url": "https://api.github.com/users/tillahoffmann/orgs", "repos_url": "https://api.github.com/users/tillahoffmann/repos", "events_url": "https://api.github.com/users/tillahoffmann/events{/privacy}", "received_events_url": "https://api.github.com/users/tillahoffmann/received_events", "type": "User", "site_admin": false}, "body": "Unfortunately, letting ZMQ handle the callback doesn't seem to be easy. Let's postpone that to a separate PR if you're happy with it.", "created_at": "2017-04-20T20:24:28Z", "updated_at": "2017-04-20T20:24:28Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/8728#discussion_r112552128", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8728", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/112552128"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/8728#discussion_r112552128"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/8728"}}, "body_html": "<p>Unfortunately, letting ZMQ handle the callback doesn't seem to be easy. Let's postpone that to a separate PR if you're happy with it.</p>", "body_text": "Unfortunately, letting ZMQ handle the callback doesn't seem to be easy. Let's postpone that to a separate PR if you're happy with it.", "in_reply_to_id": 112364809}