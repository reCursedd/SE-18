{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22349", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22349/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22349/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22349/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22349", "id": 361389032, "node_id": "MDU6SXNzdWUzNjEzODkwMzI=", "number": 22349, "title": "Error in tf.contrib.distributions.fill_triangular_inverse", "user": {"login": "mbrubake", "id": 3383416, "node_id": "MDQ6VXNlcjMzODM0MTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3383416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubake", "html_url": "https://github.com/mbrubake", "followers_url": "https://api.github.com/users/mbrubake/followers", "following_url": "https://api.github.com/users/mbrubake/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubake/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubake/subscriptions", "organizations_url": "https://api.github.com/users/mbrubake/orgs", "repos_url": "https://api.github.com/users/mbrubake/repos", "events_url": "https://api.github.com/users/mbrubake/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubake/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "wt-huang", "id": 42785337, "node_id": "MDQ6VXNlcjQyNzg1MzM3", "avatar_url": "https://avatars0.githubusercontent.com/u/42785337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wt-huang", "html_url": "https://github.com/wt-huang", "followers_url": "https://api.github.com/users/wt-huang/followers", "following_url": "https://api.github.com/users/wt-huang/following{/other_user}", "gists_url": "https://api.github.com/users/wt-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/wt-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wt-huang/subscriptions", "organizations_url": "https://api.github.com/users/wt-huang/orgs", "repos_url": "https://api.github.com/users/wt-huang/repos", "events_url": "https://api.github.com/users/wt-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/wt-huang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wt-huang", "id": 42785337, "node_id": "MDQ6VXNlcjQyNzg1MzM3", "avatar_url": "https://avatars0.githubusercontent.com/u/42785337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wt-huang", "html_url": "https://github.com/wt-huang", "followers_url": "https://api.github.com/users/wt-huang/followers", "following_url": "https://api.github.com/users/wt-huang/following{/other_user}", "gists_url": "https://api.github.com/users/wt-huang/gists{/gist_id}", "starred_url": "https://api.github.com/users/wt-huang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wt-huang/subscriptions", "organizations_url": "https://api.github.com/users/wt-huang/orgs", "repos_url": "https://api.github.com/users/wt-huang/repos", "events_url": "https://api.github.com/users/wt-huang/events{/privacy}", "received_events_url": "https://api.github.com/users/wt-huang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-09-18T16:36:41Z", "updated_at": "2018-10-13T02:04:15Z", "closed_at": "2018-10-13T02:04:15Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<p>** TF Env Info: **<br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/2393567/tf_env.txt\">tf_env.txt</a></p>\n<p>** TF Version: **</p>\n<pre><code>$ python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\n/home/mab/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:34: FutureWarning: Conversion of the second argument of issubdtype\nfrom `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n  from ._conv import register_converters as _register_converters\nv1.10.1-0-g4dcfddc5d1 1.10.1\n</code></pre>\n<h3>Describe the problem</h3>\n<p>The function <code>fill_triangular_inverse</code> actually uses the upper triangular portion of the matrices when constructing the transformation.  This can be seen with the above code where a vector is converted to a lower triangular matrix with <code>fill_triangular</code> and then back to a vector with <code>fill_triangular_inverse</code>.  This works fine and reproduces the original vector unless there are non-zero entries added to the upper triangular portion of the intervening matrix.</p>\n<p>The fix for this should be relatively easy and include a call to <code>tf.matrix_band_part</code> at the beginning of <code>fill_triangular_inverse</code>.</p>\n<h3>Source code / logs</h3>\n<p>Source to reproduce the issue:</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\nimport tensorflow.contrib.distributions as tfdist\n\nd = 5\npar_d = d*(d+1)//2\nvec = tf.constant(np.random.randn(1,par_d))\nM_orig = tfdist.fill_triangular(vec)\nM = M_orig + tf.constant(np.triu(np.random.randn(d,d),1).reshape([1,d,d]))\nvec2 = tfdist.fill_triangular_inverse(M)\nvec3 = tfdist.fill_triangular_inverse(M_orig)\n\nwith tf.Session() as sess:\n    [vec_val,vec2_val,vec3_val] = sess.run([vec,vec2,vec3])\n\n    print(\"d = {}, w/upper error = {}, w/o upper error = {}\".format(d,np.linalg.norm(vec_val-vec2_val),np.linalg.norm(vec_val-vec3_val)))\n</code></pre>\n<p>Output on local installation:</p>\n<pre><code>d = 5, w/upper error = 2.6202726540863606, w/o upper error = 0.0\n</code></pre>", "body_text": "System information\n** TF Env Info: **\ntf_env.txt\n** TF Version: **\n$ python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\n/home/mab/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:34: FutureWarning: Conversion of the second argument of issubdtype\nfrom `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n  from ._conv import register_converters as _register_converters\nv1.10.1-0-g4dcfddc5d1 1.10.1\n\nDescribe the problem\nThe function fill_triangular_inverse actually uses the upper triangular portion of the matrices when constructing the transformation.  This can be seen with the above code where a vector is converted to a lower triangular matrix with fill_triangular and then back to a vector with fill_triangular_inverse.  This works fine and reproduces the original vector unless there are non-zero entries added to the upper triangular portion of the intervening matrix.\nThe fix for this should be relatively easy and include a call to tf.matrix_band_part at the beginning of fill_triangular_inverse.\nSource code / logs\nSource to reproduce the issue:\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow.contrib.distributions as tfdist\n\nd = 5\npar_d = d*(d+1)//2\nvec = tf.constant(np.random.randn(1,par_d))\nM_orig = tfdist.fill_triangular(vec)\nM = M_orig + tf.constant(np.triu(np.random.randn(d,d),1).reshape([1,d,d]))\nvec2 = tfdist.fill_triangular_inverse(M)\nvec3 = tfdist.fill_triangular_inverse(M_orig)\n\nwith tf.Session() as sess:\n    [vec_val,vec2_val,vec3_val] = sess.run([vec,vec2,vec3])\n\n    print(\"d = {}, w/upper error = {}, w/o upper error = {}\".format(d,np.linalg.norm(vec_val-vec2_val),np.linalg.norm(vec_val-vec3_val)))\n\nOutput on local installation:\nd = 5, w/upper error = 2.6202726540863606, w/o upper error = 0.0", "body": "### System information\r\n** TF Env Info: **\r\n[tf_env.txt](https://github.com/tensorflow/tensorflow/files/2393567/tf_env.txt)\r\n\r\n** TF Version: **\r\n```\r\n$ python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n/home/mab/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:34: FutureWarning: Conversion of the second argument of issubdtype\r\nfrom `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\r\n  from ._conv import register_converters as _register_converters\r\nv1.10.1-0-g4dcfddc5d1 1.10.1\r\n```\r\n\r\n### Describe the problem\r\nThe function ```fill_triangular_inverse``` actually uses the upper triangular portion of the matrices when constructing the transformation.  This can be seen with the above code where a vector is converted to a lower triangular matrix with ```fill_triangular``` and then back to a vector with ```fill_triangular_inverse```.  This works fine and reproduces the original vector unless there are non-zero entries added to the upper triangular portion of the intervening matrix.\r\n\r\nThe fix for this should be relatively easy and include a call to ```tf.matrix_band_part``` at the beginning of ```fill_triangular_inverse```.\r\n\r\n### Source code / logs\r\nSource to reproduce the issue:\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\nimport tensorflow.contrib.distributions as tfdist\r\n\r\nd = 5\r\npar_d = d*(d+1)//2\r\nvec = tf.constant(np.random.randn(1,par_d))\r\nM_orig = tfdist.fill_triangular(vec)\r\nM = M_orig + tf.constant(np.triu(np.random.randn(d,d),1).reshape([1,d,d]))\r\nvec2 = tfdist.fill_triangular_inverse(M)\r\nvec3 = tfdist.fill_triangular_inverse(M_orig)\r\n\r\nwith tf.Session() as sess:\r\n    [vec_val,vec2_val,vec3_val] = sess.run([vec,vec2,vec3])\r\n\r\n    print(\"d = {}, w/upper error = {}, w/o upper error = {}\".format(d,np.linalg.norm(vec_val-vec2_val),np.linalg.norm(vec_val-vec3_val)))\r\n```\r\n\r\nOutput on local installation:\r\n```\r\nd = 5, w/upper error = 2.6202726540863606, w/o upper error = 0.0\r\n```"}