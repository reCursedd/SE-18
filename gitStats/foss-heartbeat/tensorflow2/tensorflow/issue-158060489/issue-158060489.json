{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2616", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2616/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2616/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2616/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2616", "id": 158060489, "node_id": "MDU6SXNzdWUxNTgwNjA0ODk=", "number": 2616, "title": "[New Feature] Dimension Validation for CNNs ", "user": {"login": "konts6102", "id": 16810552, "node_id": "MDQ6VXNlcjE2ODEwNTUy", "avatar_url": "https://avatars3.githubusercontent.com/u/16810552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konts6102", "html_url": "https://github.com/konts6102", "followers_url": "https://api.github.com/users/konts6102/followers", "following_url": "https://api.github.com/users/konts6102/following{/other_user}", "gists_url": "https://api.github.com/users/konts6102/gists{/gist_id}", "starred_url": "https://api.github.com/users/konts6102/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konts6102/subscriptions", "organizations_url": "https://api.github.com/users/konts6102/orgs", "repos_url": "https://api.github.com/users/konts6102/repos", "events_url": "https://api.github.com/users/konts6102/events{/privacy}", "received_events_url": "https://api.github.com/users/konts6102/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-02T05:09:59Z", "updated_at": "2017-02-09T22:37:14Z", "closed_at": "2016-06-11T00:00:04Z", "author_association": "NONE", "body_html": "<p>In the deep MNIST samples for experts, the dimensions of the example network is defined as follows:</p>\n<p>[5, 5, 1, 32]<br>\n[5, 5, 32,64]<br>\n[7_7_64, 1024]<br>\n[1024, n_classes]</p>\n<p>It seems nice for us to implement functions that checks a validity of given network, if we've not done yet.</p>\n<p>Example Error or Warning Messages:</p>\n<p>1: u\" Dimension mismatch occurs at forward calculation from %s %s to %s %s: Input_dim=%s but Output_dim=%s  \"%( lower_component, lower_component,  upper_type, upper_name, Input_dim, Output_dim)</p>\n<p>\"lower_component\" and \"upper_componet\" are either function with out tf.Variable or anything with tf.Varriables.</p>\n<p>1-a: u\" Dimension mismatch occurs at forward calculations from linear-layer \"first-linear\" to linear-layer \"out\": Input_dim=1024 but Output_dim=1023\", if</p>\n<pre><code>'first-linear': tf.Variable(tf.random_normal([7*7*64, 1024])), \n'out': tf.Variable(tf.random_normal([1023, n_classes])) \n</code></pre>\n<p>2: u\" Dimension mismatch occurs at forward calculation:  Input_dim=%s  of %s %s is not divided by %s*%s, Note that output of %s %s reduce dimension from %s to %s \"%(Input_dim, lower_type, lower_name, out_width, out_height,  lower_type,  lower_name, Input_dim, Output_dim)</p>\n<p>2-a u\" Dimension mismatch occurs at forward calculation:  Input_dim=2048  of linear-layer \"wd1\" is not divided by 7*7, Note that output of function \"max_pool\" reduces dimension from 196 to 49 \"</p>\n<p>3: u\" Dimension mismatch occurs at forward calculation: At the conv-layer %s, for given weight of W2 =(W1-F+2P)/S+1 isn't an integer, where width W1=%s, F=%s, P=%s, S=%S  \"%(conv_layer_name, filter_size, padding, strides)</p>", "body_text": "In the deep MNIST samples for experts, the dimensions of the example network is defined as follows:\n[5, 5, 1, 32]\n[5, 5, 32,64]\n[7_7_64, 1024]\n[1024, n_classes]\nIt seems nice for us to implement functions that checks a validity of given network, if we've not done yet.\nExample Error or Warning Messages:\n1: u\" Dimension mismatch occurs at forward calculation from %s %s to %s %s: Input_dim=%s but Output_dim=%s  \"%( lower_component, lower_component,  upper_type, upper_name, Input_dim, Output_dim)\n\"lower_component\" and \"upper_componet\" are either function with out tf.Variable or anything with tf.Varriables.\n1-a: u\" Dimension mismatch occurs at forward calculations from linear-layer \"first-linear\" to linear-layer \"out\": Input_dim=1024 but Output_dim=1023\", if\n'first-linear': tf.Variable(tf.random_normal([7*7*64, 1024])), \n'out': tf.Variable(tf.random_normal([1023, n_classes])) \n\n2: u\" Dimension mismatch occurs at forward calculation:  Input_dim=%s  of %s %s is not divided by %s*%s, Note that output of %s %s reduce dimension from %s to %s \"%(Input_dim, lower_type, lower_name, out_width, out_height,  lower_type,  lower_name, Input_dim, Output_dim)\n2-a u\" Dimension mismatch occurs at forward calculation:  Input_dim=2048  of linear-layer \"wd1\" is not divided by 7*7, Note that output of function \"max_pool\" reduces dimension from 196 to 49 \"\n3: u\" Dimension mismatch occurs at forward calculation: At the conv-layer %s, for given weight of W2 =(W1-F+2P)/S+1 isn't an integer, where width W1=%s, F=%s, P=%s, S=%S  \"%(conv_layer_name, filter_size, padding, strides)", "body": "In the deep MNIST samples for experts, the dimensions of the example network is defined as follows: \n\n[5, 5, 1, 32]\n[5, 5, 32,64]\n[7_7_64, 1024]\n[1024, n_classes]\n\nIt seems nice for us to implement functions that checks a validity of given network, if we've not done yet. \n\nExample Error or Warning Messages:\n\n1: u\" Dimension mismatch occurs at forward calculation from %s %s to %s %s: Input_dim=%s but Output_dim=%s  \"%( lower_component, lower_component,  upper_type, upper_name, Input_dim, Output_dim)\n\n\"lower_component\" and \"upper_componet\" are either function with out tf.Variable or anything with tf.Varriables.\n\n1-a: u\" Dimension mismatch occurs at forward calculations from linear-layer \"first-linear\" to linear-layer \"out\": Input_dim=1024 but Output_dim=1023\", if \n\n```\n'first-linear': tf.Variable(tf.random_normal([7*7*64, 1024])), \n'out': tf.Variable(tf.random_normal([1023, n_classes])) \n```\n\n2: u\" Dimension mismatch occurs at forward calculation:  Input_dim=%s  of %s %s is not divided by %s*%s, Note that output of %s %s reduce dimension from %s to %s \"%(Input_dim, lower_type, lower_name, out_width, out_height,  lower_type,  lower_name, Input_dim, Output_dim)\n\n2-a u\" Dimension mismatch occurs at forward calculation:  Input_dim=2048  of linear-layer \"wd1\" is not divided by 7*7, Note that output of function \"max_pool\" reduces dimension from 196 to 49 \"\n\n3: u\" Dimension mismatch occurs at forward calculation: At the conv-layer %s, for given weight of W2 =(W1-F+2P)/S+1 isn't an integer, where width W1=%s, F=%s, P=%s, S=%S  \"%(conv_layer_name, filter_size, padding, strides)\n"}