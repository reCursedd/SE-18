{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15241", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15241/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15241/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15241/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15241", "id": 280775099, "node_id": "MDU6SXNzdWUyODA3NzUwOTk=", "number": 15241, "title": "Error using Faster RCNN in MATLAB. ", "user": {"login": "faisalalamri", "id": 32904190, "node_id": "MDQ6VXNlcjMyOTA0MTkw", "avatar_url": "https://avatars1.githubusercontent.com/u/32904190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faisalalamri", "html_url": "https://github.com/faisalalamri", "followers_url": "https://api.github.com/users/faisalalamri/followers", "following_url": "https://api.github.com/users/faisalalamri/following{/other_user}", "gists_url": "https://api.github.com/users/faisalalamri/gists{/gist_id}", "starred_url": "https://api.github.com/users/faisalalamri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faisalalamri/subscriptions", "organizations_url": "https://api.github.com/users/faisalalamri/orgs", "repos_url": "https://api.github.com/users/faisalalamri/repos", "events_url": "https://api.github.com/users/faisalalamri/events{/privacy}", "received_events_url": "https://api.github.com/users/faisalalamri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2017-12-10T02:19:24Z", "updated_at": "2018-05-03T03:31:18Z", "closed_at": "2018-05-03T03:31:18Z", "author_association": "NONE", "body_html": "<p>Hi there,<br>\nI am working on a project that is about detecting multiple object classes (object classes detection), where the dataset that I am using is MSCOCO (2014).<br>\nThe method that I am using is Faster RCNN detection method, where I am using matlab 2017a<br>\nPlease note that all training is done on a machine with a GPU (NVIDIA Tesla K80)<br>\nI have wrote the code attached in the zipped file, dropbox link for downloading is presented below. I have done this code by following the instructions available on matlab transfer learning page; it is about using alexnet as a pre-trained mode for Faster RCNN. Can you kindly have a look at the code and let me know, it has any errors, because I am getting an error when doing the evaluation<br>\nError is:<br>\nError using fasterRCNNObjectDetector/parseDetectInputs (line 680)<br>\nThe size of I must be larger than [227 227]. The minimum size is defined by the network's image input layer.<br>\nError in fasterRCNNObjectDetector/detect (line 447)<br>\nparams = this.parseDetectInputs(I, varargin{:});<br>\nI have resized the image to [400 400], which passed this errors, but still have another error with plotting the accuracy, IF I use less than 400 (e.g., [300 300]), the error will still appear, which I am not sure why, because alexnet input layer is in the size of [227 227], where 300 is still larger than.<br>\nError is: I am getting all the average precision (ap), recall values as zeros (0).</p>\n<p>To download the code and all materials: <a href=\"https://www.dropbox.com/sh/9u56ragkuz1ltgd/AADKvUXESezWsoaGfgLyE0Exa?dl=0\" rel=\"nofollow\">https://www.dropbox.com/sh/9u56ragkuz1ltgd/AADKvUXESezWsoaGfgLyE0Exa?dl=0</a><br>\nPlease note the zipped file contains:</p>\n<ol>\n<li>the training (transfer learning) code, named as run_20_classes.m</li>\n<li>.mat file,  named as pre-trained_20_classes.mat that contains the training and testing labels (annotations), stored as a table, where the first column contains paths and file names to images. The remaining columns contain bounding boxes related to the corresponding images. Each column represents a single object class, such as a person, bicycle, car \u2026 etc, as explain on <a href=\"https://uk.mathworks.com/help/vision/ref/trainfasterrcnnobjectdetector.html\" rel=\"nofollow\">https://uk.mathworks.com/help/vision/ref/trainfasterrcnnobjectdetector.html</a>. This mat file also includes the results of detection, saved as detector  the evaluation results.</li>\n<li>testing code, named as Testing.m</li>\n</ol>\n<p>Training images can be downloaded from: <a href=\"http://images.cocodataset.org/zips/train2014.zip\" rel=\"nofollow\">http://images.cocodataset.org/zips/train2014.zip</a><br>\nTesting images can be downloaded from: <a href=\"http://images.cocodataset.org/zips/val2014.zip\" rel=\"nofollow\">http://images.cocodataset.org/zips/val2014.zip</a></p>\n<p><strong>Can you please help me on how to improve the accuracy, or if my code is mistaken, can you please correct it?</strong><br>\nThank you very much for your help and time in advance</p>\n<p>Have I written custom code: I did the code, following the instructions available on matlab both Faster RCNN detection, and transfer learning webpages (<a href=\"https://uk.mathworks.com/help/vision/examples/object-detection-using-faster-r-cnn-deep-learning.html\" rel=\"nofollow\">https://uk.mathworks.com/help/vision/examples/object-detection-using-faster-r-cnn-deep-learning.html</a>) and (<a href=\"https://uk.mathworks.com/help/nnet/ug/pretrained-convolutional-neural-networks.html#bvm8b5x\" rel=\"nofollow\">https://uk.mathworks.com/help/nnet/ug/pretrained-convolutional-neural-networks.html#bvm8b5x</a>) respectively<br>\nOS Platform and Distribution: Linux, MATLAB2017a<br>\nCUDA/cuDNN version: 8.0, V8.0.44<br>\nGPU model and memory: NVIDIA Tesla K80<br>\nExact command to reproduce: training code (run_20_classes.m), testing (Testing.m)</p>", "body_text": "Hi there,\nI am working on a project that is about detecting multiple object classes (object classes detection), where the dataset that I am using is MSCOCO (2014).\nThe method that I am using is Faster RCNN detection method, where I am using matlab 2017a\nPlease note that all training is done on a machine with a GPU (NVIDIA Tesla K80)\nI have wrote the code attached in the zipped file, dropbox link for downloading is presented below. I have done this code by following the instructions available on matlab transfer learning page; it is about using alexnet as a pre-trained mode for Faster RCNN. Can you kindly have a look at the code and let me know, it has any errors, because I am getting an error when doing the evaluation\nError is:\nError using fasterRCNNObjectDetector/parseDetectInputs (line 680)\nThe size of I must be larger than [227 227]. The minimum size is defined by the network's image input layer.\nError in fasterRCNNObjectDetector/detect (line 447)\nparams = this.parseDetectInputs(I, varargin{:});\nI have resized the image to [400 400], which passed this errors, but still have another error with plotting the accuracy, IF I use less than 400 (e.g., [300 300]), the error will still appear, which I am not sure why, because alexnet input layer is in the size of [227 227], where 300 is still larger than.\nError is: I am getting all the average precision (ap), recall values as zeros (0).\nTo download the code and all materials: https://www.dropbox.com/sh/9u56ragkuz1ltgd/AADKvUXESezWsoaGfgLyE0Exa?dl=0\nPlease note the zipped file contains:\n\nthe training (transfer learning) code, named as run_20_classes.m\n.mat file,  named as pre-trained_20_classes.mat that contains the training and testing labels (annotations), stored as a table, where the first column contains paths and file names to images. The remaining columns contain bounding boxes related to the corresponding images. Each column represents a single object class, such as a person, bicycle, car \u2026 etc, as explain on https://uk.mathworks.com/help/vision/ref/trainfasterrcnnobjectdetector.html. This mat file also includes the results of detection, saved as detector  the evaluation results.\ntesting code, named as Testing.m\n\nTraining images can be downloaded from: http://images.cocodataset.org/zips/train2014.zip\nTesting images can be downloaded from: http://images.cocodataset.org/zips/val2014.zip\nCan you please help me on how to improve the accuracy, or if my code is mistaken, can you please correct it?\nThank you very much for your help and time in advance\nHave I written custom code: I did the code, following the instructions available on matlab both Faster RCNN detection, and transfer learning webpages (https://uk.mathworks.com/help/vision/examples/object-detection-using-faster-r-cnn-deep-learning.html) and (https://uk.mathworks.com/help/nnet/ug/pretrained-convolutional-neural-networks.html#bvm8b5x) respectively\nOS Platform and Distribution: Linux, MATLAB2017a\nCUDA/cuDNN version: 8.0, V8.0.44\nGPU model and memory: NVIDIA Tesla K80\nExact command to reproduce: training code (run_20_classes.m), testing (Testing.m)", "body": "Hi there, \r\nI am working on a project that is about detecting multiple object classes (object classes detection), where the dataset that I am using is MSCOCO (2014). \r\nThe method that I am using is Faster RCNN detection method, where I am using matlab 2017a\r\nPlease note that all training is done on a machine with a GPU (NVIDIA Tesla K80)\r\nI have wrote the code attached in the zipped file, dropbox link for downloading is presented below. I have done this code by following the instructions available on matlab transfer learning page; it is about using alexnet as a pre-trained mode for Faster RCNN. Can you kindly have a look at the code and let me know, it has any errors, because I am getting an error when doing the evaluation  \r\nError is:  \r\nError using fasterRCNNObjectDetector/parseDetectInputs (line 680)\r\nThe size of I must be larger than [227 227]. The minimum size is defined by the network's image input layer.\r\nError in fasterRCNNObjectDetector/detect (line 447)\r\n            params = this.parseDetectInputs(I, varargin{:});\r\nI have resized the image to [400 400], which passed this errors, but still have another error with plotting the accuracy, IF I use less than 400 (e.g., [300 300]), the error will still appear, which I am not sure why, because alexnet input layer is in the size of [227 227], where 300 is still larger than. \r\nError is: I am getting all the average precision (ap), recall values as zeros (0). \r\n\r\nTo download the code and all materials: https://www.dropbox.com/sh/9u56ragkuz1ltgd/AADKvUXESezWsoaGfgLyE0Exa?dl=0 \r\nPlease note the zipped file contains: \r\n1) the training (transfer learning) code, named as run_20_classes.m\r\n2) .mat file,  named as pre-trained_20_classes.mat that contains the training and testing labels (annotations), stored as a table, where the first column contains paths and file names to images. The remaining columns contain bounding boxes related to the corresponding images. Each column represents a single object class, such as a person, bicycle, car \u2026 etc, as explain on https://uk.mathworks.com/help/vision/ref/trainfasterrcnnobjectdetector.html. This mat file also includes the results of detection, saved as detector  the evaluation results.\r\n3) testing code, named as Testing.m\r\n\r\nTraining images can be downloaded from: http://images.cocodataset.org/zips/train2014.zip \r\nTesting images can be downloaded from: http://images.cocodataset.org/zips/val2014.zip \r\n\r\n**Can you please help me on how to improve the accuracy, or if my code is mistaken, can you please correct it?**\r\nThank you very much for your help and time in advance \r\n\r\n\r\nHave I written custom code: I did the code, following the instructions available on matlab both Faster RCNN detection, and transfer learning webpages (https://uk.mathworks.com/help/vision/examples/object-detection-using-faster-r-cnn-deep-learning.html) and (https://uk.mathworks.com/help/nnet/ug/pretrained-convolutional-neural-networks.html#bvm8b5x) respectively\r\nOS Platform and Distribution: Linux, MATLAB2017a\r\nCUDA/cuDNN version: 8.0, V8.0.44\r\nGPU model and memory: NVIDIA Tesla K80\r\nExact command to reproduce: training code (run_20_classes.m), testing (Testing.m)"}