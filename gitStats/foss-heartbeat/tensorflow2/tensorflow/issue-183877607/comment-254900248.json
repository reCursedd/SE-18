{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/254900248", "html_url": "https://github.com/tensorflow/tensorflow/issues/5066#issuecomment-254900248", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5066", "id": 254900248, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDkwMDI0OA==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-19T18:29:08Z", "updated_at": "2016-10-19T18:29:08Z", "author_association": "MEMBER", "body_html": "<p>What about <a href=\"http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#env-vars\" rel=\"nofollow\"><code>CUDA_VISIBLE_DEVICES</code></a>? That should control which process sees what GPUs. So you'd run one process with <code>CUDA_VISIBLE_DEVICES=0</code> and the other with <code>CUDA_VISIBLE_DEVICES=1</code>.</p>\n<p><code>device_count</code> is meant to limit the number of devices used - so it won't allocate memory on both devices. When <code>device_count</code> is 1, the device name will still be just <code>/gpu:0</code>.  You might find <a href=\"https://www.tensorflow.org/versions/r0.11/how_tos/using_gpu/index.html#allowing-gpu-memory-growth\" rel=\"nofollow\">https://www.tensorflow.org/versions/r0.11/how_tos/using_gpu/index.html#allowing-gpu-memory-growth</a> - which talks about limiting memory use interesting as well.</p>\n<p>But long story short, does <code>CUDA_VISIBLE_DEVICES</code> not do the trick?</p>", "body_text": "What about CUDA_VISIBLE_DEVICES? That should control which process sees what GPUs. So you'd run one process with CUDA_VISIBLE_DEVICES=0 and the other with CUDA_VISIBLE_DEVICES=1.\ndevice_count is meant to limit the number of devices used - so it won't allocate memory on both devices. When device_count is 1, the device name will still be just /gpu:0.  You might find https://www.tensorflow.org/versions/r0.11/how_tos/using_gpu/index.html#allowing-gpu-memory-growth - which talks about limiting memory use interesting as well.\nBut long story short, does CUDA_VISIBLE_DEVICES not do the trick?", "body": "What about [`CUDA_VISIBLE_DEVICES`](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#env-vars)? That should control which process sees what GPUs. So you'd run one process with `CUDA_VISIBLE_DEVICES=0` and the other with `CUDA_VISIBLE_DEVICES=1`.\n\n`device_count` is meant to limit the number of devices used - so it won't allocate memory on both devices. When `device_count` is 1, the device name will still be just `/gpu:0`.  You might find https://www.tensorflow.org/versions/r0.11/how_tos/using_gpu/index.html#allowing-gpu-memory-growth - which talks about limiting memory use interesting as well.\n\nBut long story short, does `CUDA_VISIBLE_DEVICES` not do the trick?\n"}