{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/373419279", "html_url": "https://github.com/tensorflow/tensorflow/issues/6110#issuecomment-373419279", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6110", "id": 373419279, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzQxOTI3OQ==", "user": {"login": "MatteoGlarey", "id": 28559562, "node_id": "MDQ6VXNlcjI4NTU5NTYy", "avatar_url": "https://avatars0.githubusercontent.com/u/28559562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatteoGlarey", "html_url": "https://github.com/MatteoGlarey", "followers_url": "https://api.github.com/users/MatteoGlarey/followers", "following_url": "https://api.github.com/users/MatteoGlarey/following{/other_user}", "gists_url": "https://api.github.com/users/MatteoGlarey/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatteoGlarey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatteoGlarey/subscriptions", "organizations_url": "https://api.github.com/users/MatteoGlarey/orgs", "repos_url": "https://api.github.com/users/MatteoGlarey/repos", "events_url": "https://api.github.com/users/MatteoGlarey/events{/privacy}", "received_events_url": "https://api.github.com/users/MatteoGlarey/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-15T15:35:32Z", "updated_at": "2018-03-20T09:53:58Z", "author_association": "NONE", "body_html": "<p>Thank you for the fast reply, I will try it as soon as possible!<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4105237\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ksbg\">@ksbg</a> I think I solved the problem of the format using tf.split and moving the pre-processing to the server-side:</p>\n<pre><code> input_ph = tf.placeholder(tf.string, [None, 3], \"input_placeholder\")\n    user, prod, qty = tf.split(input_ph, 3, 1)\n    with tf.name_scope('transactions_weights'):\n        indices = indices_add_ph(user, prod, user_array, prod_array)\n        qty_f = tf.string_to_number(qty, tf.float64)\n        weights_p = tf.SparseTensor(indices=tf.cast(indices, tf.int64),\n                                    values=tf.cast(tf.reshape(qty_f, [-1]), tf.float64),\n                                    dense_shape=[len(user_array), len(prod_array)])\n</code></pre>\n<p>It seems to work this way and I did not have to change the client:</p>\n<pre><code>request.inputs['transactions'].CopyFrom(\n            tf.contrib.util.make_tensor_proto([rating[1], rating[2], rating[0]], shape=[1, 3]))\n</code></pre>\n<p>So I send the user and the product name as strings (the third field is only to have compatibility for next steps).</p>", "body_text": "Thank you for the fast reply, I will try it as soon as possible!\n@ksbg I think I solved the problem of the format using tf.split and moving the pre-processing to the server-side:\n input_ph = tf.placeholder(tf.string, [None, 3], \"input_placeholder\")\n    user, prod, qty = tf.split(input_ph, 3, 1)\n    with tf.name_scope('transactions_weights'):\n        indices = indices_add_ph(user, prod, user_array, prod_array)\n        qty_f = tf.string_to_number(qty, tf.float64)\n        weights_p = tf.SparseTensor(indices=tf.cast(indices, tf.int64),\n                                    values=tf.cast(tf.reshape(qty_f, [-1]), tf.float64),\n                                    dense_shape=[len(user_array), len(prod_array)])\n\nIt seems to work this way and I did not have to change the client:\nrequest.inputs['transactions'].CopyFrom(\n            tf.contrib.util.make_tensor_proto([rating[1], rating[2], rating[0]], shape=[1, 3]))\n\nSo I send the user and the product name as strings (the third field is only to have compatibility for next steps).", "body": "Thank you for the fast reply, I will try it as soon as possible!\r\n@ksbg I think I solved the problem of the format using tf.split and moving the pre-processing to the server-side:\r\n```\r\n input_ph = tf.placeholder(tf.string, [None, 3], \"input_placeholder\")\r\n    user, prod, qty = tf.split(input_ph, 3, 1)\r\n    with tf.name_scope('transactions_weights'):\r\n        indices = indices_add_ph(user, prod, user_array, prod_array)\r\n        qty_f = tf.string_to_number(qty, tf.float64)\r\n        weights_p = tf.SparseTensor(indices=tf.cast(indices, tf.int64),\r\n                                    values=tf.cast(tf.reshape(qty_f, [-1]), tf.float64),\r\n                                    dense_shape=[len(user_array), len(prod_array)])\r\n```\r\nIt seems to work this way and I did not have to change the client: \r\n```\r\nrequest.inputs['transactions'].CopyFrom(\r\n            tf.contrib.util.make_tensor_proto([rating[1], rating[2], rating[0]], shape=[1, 3]))\r\n```\r\nSo I send the user and the product name as strings (the third field is only to have compatibility for next steps)."}