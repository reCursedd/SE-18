{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/326326278", "html_url": "https://github.com/tensorflow/tensorflow/issues/11613#issuecomment-326326278", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11613", "id": 326326278, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjMyNjI3OA==", "user": {"login": "axelv", "id": 1982751, "node_id": "MDQ6VXNlcjE5ODI3NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1982751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axelv", "html_url": "https://github.com/axelv", "followers_url": "https://api.github.com/users/axelv/followers", "following_url": "https://api.github.com/users/axelv/following{/other_user}", "gists_url": "https://api.github.com/users/axelv/gists{/gist_id}", "starred_url": "https://api.github.com/users/axelv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axelv/subscriptions", "organizations_url": "https://api.github.com/users/axelv/orgs", "repos_url": "https://api.github.com/users/axelv/repos", "events_url": "https://api.github.com/users/axelv/events{/privacy}", "received_events_url": "https://api.github.com/users/axelv/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-31T15:10:42Z", "updated_at": "2017-08-31T15:29:23Z", "author_association": "NONE", "body_html": "<p>Try implementing a custom key generator. If you use the option <code>make_keys_unique=True</code> Tensorflow creates unique keys withrandom key generator:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/contrib/training/python/training/sequence_queueing_state_saver.py\">sequence_queueing_state_saver.py</a></p>\n<pre><code>if make_keys_unique:\n      input_key = string_ops.string_join([\n          input_key,\n          string_ops.as_string(\n              random_ops.random_uniform(\n                  (), minval=0, maxval=100000000, dtype=dtypes.int32,\n                  seed=make_keys_unique_seed))])\n</code></pre>\n<p>If you need more than a million keys, there is a high chance you will encounter a collision.<br>\nA counting key generator fixed it for me:</p>\n<pre><code>key = tf.Variable(0)\n</code></pre>\n<pre><code>batch = tf.contrib.training.batch_sequences_with_states(\n        input_key=tf.as_string(key.assign_add(1)), ...)\n</code></pre>\n<p>However, I don't think I need millions of unique keys in the queue. So probably there is another underlying problem in my model.</p>", "body_text": "Try implementing a custom key generator. If you use the option make_keys_unique=True Tensorflow creates unique keys withrandom key generator:\nsequence_queueing_state_saver.py\nif make_keys_unique:\n      input_key = string_ops.string_join([\n          input_key,\n          string_ops.as_string(\n              random_ops.random_uniform(\n                  (), minval=0, maxval=100000000, dtype=dtypes.int32,\n                  seed=make_keys_unique_seed))])\n\nIf you need more than a million keys, there is a high chance you will encounter a collision.\nA counting key generator fixed it for me:\nkey = tf.Variable(0)\n\nbatch = tf.contrib.training.batch_sequences_with_states(\n        input_key=tf.as_string(key.assign_add(1)), ...)\n\nHowever, I don't think I need millions of unique keys in the queue. So probably there is another underlying problem in my model.", "body": "Try implementing a custom key generator. If you use the option `make_keys_unique=True` Tensorflow creates unique keys withrandom key generator:\r\n[sequence_queueing_state_saver.py](https://github.com/tensorflow/tensorflow/blob/r1.3/tensorflow/contrib/training/python/training/sequence_queueing_state_saver.py)\r\n```    \r\nif make_keys_unique:\r\n      input_key = string_ops.string_join([\r\n          input_key,\r\n          string_ops.as_string(\r\n              random_ops.random_uniform(\r\n                  (), minval=0, maxval=100000000, dtype=dtypes.int32,\r\n                  seed=make_keys_unique_seed))])\r\n```\r\nIf you need more than a million keys, there is a high chance you will encounter a collision.\r\nA counting key generator fixed it for me:\r\n```\r\nkey = tf.Variable(0)\r\n```\r\n```\r\nbatch = tf.contrib.training.batch_sequences_with_states(\r\n        input_key=tf.as_string(key.assign_add(1)), ...)\r\n```\r\nHowever, I don't think I need millions of unique keys in the queue. So probably there is another underlying problem in my model."}