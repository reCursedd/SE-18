{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/350837206", "html_url": "https://github.com/tensorflow/tensorflow/issues/15256#issuecomment-350837206", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15256", "id": 350837206, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDgzNzIwNg==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-11T19:49:30Z", "updated_at": "2017-12-11T19:49:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p>In TensorFlow 1.5, we'll deprecate <code>tf.data.Dataset.from_sparse_tensor_slices()</code> and fold its behavior into <code>tf.data.Dataset.from_tensor_slices()</code>: you'll be able to use a <code>tf.SparseTensor</code> in place of a <code>tf.Tensor</code> in that API (and many more), and it will work better with batching etc. You can try this out by installing the <code>tf-nightly</code> PIP package, or building from source. You'll be able to write:</p>\n<div class=\"highlight highlight-source-python\"><pre>point_cloud_feature_dataset <span class=\"pl-k\">=</span> tf.data.Dataset.from_tensor_slices(sparse_feature)\npoint_cloud_feature_dataset <span class=\"pl-k\">=</span> point_cloud_feature_dataset.shuffle(<span class=\"pl-v\">buffer_size</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">100000</span>)\npoint_cloud_feature_dataset <span class=\"pl-k\">=</span> point_cloud_feature_dataset.batch(<span class=\"pl-v\">batch_size</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">BATCH_SIZE</span>)\npoint_cloud_feature_dataset <span class=\"pl-k\">=</span> point_cloud_feature_dataset.repeat()\niterator_feature <span class=\"pl-k\">=</span> point_cloud_feature_dataset.make_one_shot_iterator()</pre></div>\n<p>For your current code, the <code>Dataset.from_sparse_tensor_slices()</code> source yields three tensors, representing the <code>indices</code>, <code>values</code>, and <code>dense_shape</code> of a sparse tensor. However, the batching will be incorrect, because it will apply to the indices, values, and dense_shape separately, and the resulting output of the iterator might not be a valid <code>tf.SparseTensor</code>.</p>", "body_text": "In TensorFlow 1.5, we'll deprecate tf.data.Dataset.from_sparse_tensor_slices() and fold its behavior into tf.data.Dataset.from_tensor_slices(): you'll be able to use a tf.SparseTensor in place of a tf.Tensor in that API (and many more), and it will work better with batching etc. You can try this out by installing the tf-nightly PIP package, or building from source. You'll be able to write:\npoint_cloud_feature_dataset = tf.data.Dataset.from_tensor_slices(sparse_feature)\npoint_cloud_feature_dataset = point_cloud_feature_dataset.shuffle(buffer_size = 100000)\npoint_cloud_feature_dataset = point_cloud_feature_dataset.batch(batch_size = BATCH_SIZE)\npoint_cloud_feature_dataset = point_cloud_feature_dataset.repeat()\niterator_feature = point_cloud_feature_dataset.make_one_shot_iterator()\nFor your current code, the Dataset.from_sparse_tensor_slices() source yields three tensors, representing the indices, values, and dense_shape of a sparse tensor. However, the batching will be incorrect, because it will apply to the indices, values, and dense_shape separately, and the resulting output of the iterator might not be a valid tf.SparseTensor.", "body": "In TensorFlow 1.5, we'll deprecate `tf.data.Dataset.from_sparse_tensor_slices()` and fold its behavior into `tf.data.Dataset.from_tensor_slices()`: you'll be able to use a `tf.SparseTensor` in place of a `tf.Tensor` in that API (and many more), and it will work better with batching etc. You can try this out by installing the `tf-nightly` PIP package, or building from source. You'll be able to write:\r\n\r\n```python\r\npoint_cloud_feature_dataset = tf.data.Dataset.from_tensor_slices(sparse_feature)\r\npoint_cloud_feature_dataset = point_cloud_feature_dataset.shuffle(buffer_size = 100000)\r\npoint_cloud_feature_dataset = point_cloud_feature_dataset.batch(batch_size = BATCH_SIZE)\r\npoint_cloud_feature_dataset = point_cloud_feature_dataset.repeat()\r\niterator_feature = point_cloud_feature_dataset.make_one_shot_iterator()\r\n```\r\n\r\nFor your current code, the `Dataset.from_sparse_tensor_slices()` source yields three tensors, representing the `indices`, `values`, and `dense_shape` of a sparse tensor. However, the batching will be incorrect, because it will apply to the indices, values, and dense_shape separately, and the resulting output of the iterator might not be a valid `tf.SparseTensor`."}