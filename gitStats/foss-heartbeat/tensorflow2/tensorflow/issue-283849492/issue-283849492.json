{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15552", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15552/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15552/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15552/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15552", "id": 283849492, "node_id": "MDU6SXNzdWUyODM4NDk0OTI=", "number": 15552, "title": "Tensorflow 1.4 C++ API considerably slower than Python", "user": {"login": "Goldesel23", "id": 10371630, "node_id": "MDQ6VXNlcjEwMzcxNjMw", "avatar_url": "https://avatars3.githubusercontent.com/u/10371630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Goldesel23", "html_url": "https://github.com/Goldesel23", "followers_url": "https://api.github.com/users/Goldesel23/followers", "following_url": "https://api.github.com/users/Goldesel23/following{/other_user}", "gists_url": "https://api.github.com/users/Goldesel23/gists{/gist_id}", "starred_url": "https://api.github.com/users/Goldesel23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Goldesel23/subscriptions", "organizations_url": "https://api.github.com/users/Goldesel23/orgs", "repos_url": "https://api.github.com/users/Goldesel23/repos", "events_url": "https://api.github.com/users/Goldesel23/events{/privacy}", "received_events_url": "https://api.github.com/users/Goldesel23/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-12-21T11:13:17Z", "updated_at": "2018-06-12T12:33:59Z", "closed_at": "2017-12-22T16:20:14Z", "author_association": "NONE", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source with all optimizations</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4</li>\n<li><strong>Python version</strong>:  3.5.2</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.8.1</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 5.4.0</li>\n<li><strong>CUDA/cuDNN version</strong>: 8.0 / 6.0</li>\n<li><strong>GPU model and memory</strong>: GTX960M</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I was trying to run several models and evaluate the performance with different batch sizes in python and c++ and noticed that the c++ API version is considerably slower than the python one. Both were compiled with the same optimizations and with cuda support.</p>\n<p>When I try to predict the output of a single 256x256 image in python it takes me 0.5 seconds, and when i do it in tensorflow c++ api it takes me 1.7 seconds. Notice that in python I was using a non deployed model (without freezing and transforming graph), whereas in C++ I did those transformations.</p>\n<p>Does anyone knows why this is happening? Is it because of the frozen and transformed graph?</p>\n<p>I always thought the C++ API would be at least as fast as the Python version.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04\nTensorFlow installed from (source or binary): source with all optimizations\nTensorFlow version (use command below): 1.4\nPython version:  3.5.2\nBazel version (if compiling from source): 0.8.1\nGCC/Compiler version (if compiling from source): 5.4.0\nCUDA/cuDNN version: 8.0 / 6.0\nGPU model and memory: GTX960M\n\nDescribe the problem\nI was trying to run several models and evaluate the performance with different batch sizes in python and c++ and noticed that the c++ API version is considerably slower than the python one. Both were compiled with the same optimizations and with cuda support.\nWhen I try to predict the output of a single 256x256 image in python it takes me 0.5 seconds, and when i do it in tensorflow c++ api it takes me 1.7 seconds. Notice that in python I was using a non deployed model (without freezing and transforming graph), whereas in C++ I did those transformations.\nDoes anyone knows why this is happening? Is it because of the frozen and transformed graph?\nI always thought the C++ API would be at least as fast as the Python version.", "body": "------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**: source with all optimizations\r\n- **TensorFlow version (use command below)**: 1.4\r\n- **Python version**:  3.5.2\r\n- **Bazel version (if compiling from source)**: 0.8.1\r\n- **GCC/Compiler version (if compiling from source)**: 5.4.0\r\n- **CUDA/cuDNN version**: 8.0 / 6.0\r\n- **GPU model and memory**: GTX960M\r\n\r\n### Describe the problem\r\n\r\nI was trying to run several models and evaluate the performance with different batch sizes in python and c++ and noticed that the c++ API version is considerably slower than the python one. Both were compiled with the same optimizations and with cuda support. \r\n\r\nWhen I try to predict the output of a single 256x256 image in python it takes me 0.5 seconds, and when i do it in tensorflow c++ api it takes me 1.7 seconds. Notice that in python I was using a non deployed model (without freezing and transforming graph), whereas in C++ I did those transformations. \r\n\r\nDoes anyone knows why this is happening? Is it because of the frozen and transformed graph?\r\n\r\nI always thought the C++ API would be at least as fast as the Python version. \r\n"}