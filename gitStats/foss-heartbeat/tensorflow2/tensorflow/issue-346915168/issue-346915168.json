{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21331", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21331/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21331/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21331/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21331", "id": 346915168, "node_id": "MDU6SXNzdWUzNDY5MTUxNjg=", "number": 21331, "title": "Inconsistent behavior for decode_bmp() with channels specification", "user": {"login": "wrongtest", "id": 7600935, "node_id": "MDQ6VXNlcjc2MDA5MzU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7600935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wrongtest", "html_url": "https://github.com/wrongtest", "followers_url": "https://api.github.com/users/wrongtest/followers", "following_url": "https://api.github.com/users/wrongtest/following{/other_user}", "gists_url": "https://api.github.com/users/wrongtest/gists{/gist_id}", "starred_url": "https://api.github.com/users/wrongtest/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wrongtest/subscriptions", "organizations_url": "https://api.github.com/users/wrongtest/orgs", "repos_url": "https://api.github.com/users/wrongtest/repos", "events_url": "https://api.github.com/users/wrongtest/events{/privacy}", "received_events_url": "https://api.github.com/users/wrongtest/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-08-02T08:42:31Z", "updated_at": "2018-08-31T07:31:59Z", "closed_at": "2018-08-27T20:09:15Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: 3.10.0-693.2.2.el7.x86_64</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.8.0</li>\n<li><strong>Python version</strong>: Python 2.7.14 :: Anaconda</li>\n<li><strong>Bazel version (if compiling from source)</strong>: None</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: None</li>\n<li><strong>CUDA/cuDNN version</strong>: None</li>\n<li><strong>GPU model and memory</strong>: None</li>\n<li><strong>Exact command to reproduce</strong>: See below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>We rely on tensorflow.image.decode_xxx() apis to load images. We expect a fixed channel size for decoded images and below code works:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\ndata <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.string, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>())\nimage <span class=\"pl-k\">=</span> tf.image.decode_jpeg(data, <span class=\"pl-v\">channels</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)</pre></div>\n<p>However, it does not work for tensorflow.image.decode_bmp() for every images. For example, a bmp image with channel model \"L\":<br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/2252717/my_image.bmp.zip\">my_image.bmp.zip</a></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\ndata <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.string, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>())\n\nimage_no_spec <span class=\"pl-k\">=</span> tf.image.decode_bmp(data)\nimage <span class=\"pl-k\">=</span> tf.image.decode_bmp(data, <span class=\"pl-v\">channels</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n\nmy_image <span class=\"pl-k\">=</span> <span class=\"pl-c1\">open</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my_image.bmp<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rb<span class=\"pl-pds\">\"</span></span>).read()\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    res <span class=\"pl-k\">=</span> sess.run(image_no_spec, {data: my_image})\n    <span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Decode shape: <span class=\"pl-pds\">\"</span></span>, res.shape   <span class=\"pl-c\"><span class=\"pl-c\">#</span> (666, 1000, 1)</span>\n\n    res <span class=\"pl-k\">=</span> sess.run(image, {data: my_image})\n    <span class=\"pl-c1\">print</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Decode shape: <span class=\"pl-pds\">\"</span></span>, res.shape  <span class=\"pl-c\"><span class=\"pl-c\">#</span> err</span></pre></div>\n<p>Since tensorflow.image.decode_image() is a wrapper for decode_xxx() api(s), it may benefits if we can specify channels for all formats safely.</p>\n<h3>Source code / logs</h3>\n<p>Decode shape:  (666, 1000, 1)<br>\nTraceback (most recent call last):<br>\nFile \"a.py\", line 12, in <br>\nres = sess.run(image, {data: my_image})<br>\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 905, in run<br>\nrun_metadata_ptr)<br>\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1137, in _run<br>\nfeed_dict_tensor, options, run_metadata)<br>\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1355, in _do_run<br>\noptions, run_metadata)<br>\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1374, in _do_call<br>\nraise type(e)(node_def, op, message)<br>\ntensorflow.python.framework.errors_impl.InvalidArgumentError: channels attribute 3 does not match bits per pixel from file 1<br>\n[[Node: DecodeBmp_1 = DecodeBmp<a href=\"_arg_Placeholder_0_0\">channels=3, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"</a>]]</p>\n<p>Caused by op u'DecodeBmp_1', defined at:<br>\nFile \"a.py\", line 5, in <br>\nimage = tf.image.decode_bmp(data, channels=3)<br>\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/ops/gen_image_ops.py\", line 513, in decode_bmp<br>\n\"DecodeBmp\", contents=contents, channels=channels, name=name)<br>\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper<br>\nop_def=op_def)<br>\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 3271, in create_op<br>\nop_def=op_def)<br>\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1650, in <strong>init</strong><br>\nself._traceback = self._graph._extract_stack()  # pylint: disable=protected-access</p>\n<p>InvalidArgumentError (see above for traceback): channels attribute 3 does not match bits per pixel from file 1<br>\n[[Node: DecodeBmp_1 = DecodeBmp<a href=\"_arg_Placeholder_0_0\">channels=3, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"</a>]]</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): 3.10.0-693.2.2.el7.x86_64\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.8.0\nPython version: Python 2.7.14 :: Anaconda\nBazel version (if compiling from source): None\nGCC/Compiler version (if compiling from source): None\nCUDA/cuDNN version: None\nGPU model and memory: None\nExact command to reproduce: See below\n\nDescribe the problem\nWe rely on tensorflow.image.decode_xxx() apis to load images. We expect a fixed channel size for decoded images and below code works:\nimport tensorflow as tf\ndata = tf.placeholder(dtype=tf.string, shape=())\nimage = tf.image.decode_jpeg(data, channels=3)\nHowever, it does not work for tensorflow.image.decode_bmp() for every images. For example, a bmp image with channel model \"L\":\nmy_image.bmp.zip\nimport tensorflow as tf\ndata = tf.placeholder(dtype=tf.string, shape=())\n\nimage_no_spec = tf.image.decode_bmp(data)\nimage = tf.image.decode_bmp(data, channels=3)\n\nmy_image = open(\"my_image.bmp\", \"rb\").read()\nwith tf.Session() as sess:\n    res = sess.run(image_no_spec, {data: my_image})\n    print \"Decode shape: \", res.shape   # (666, 1000, 1)\n\n    res = sess.run(image, {data: my_image})\n    print \"Decode shape: \", res.shape  # err\nSince tensorflow.image.decode_image() is a wrapper for decode_xxx() api(s), it may benefits if we can specify channels for all formats safely.\nSource code / logs\nDecode shape:  (666, 1000, 1)\nTraceback (most recent call last):\nFile \"a.py\", line 12, in \nres = sess.run(image, {data: my_image})\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 905, in run\nrun_metadata_ptr)\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1137, in _run\nfeed_dict_tensor, options, run_metadata)\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1355, in _do_run\noptions, run_metadata)\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1374, in _do_call\nraise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: channels attribute 3 does not match bits per pixel from file 1\n[[Node: DecodeBmp_1 = DecodeBmpchannels=3, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]]\nCaused by op u'DecodeBmp_1', defined at:\nFile \"a.py\", line 5, in \nimage = tf.image.decode_bmp(data, channels=3)\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/ops/gen_image_ops.py\", line 513, in decode_bmp\n\"DecodeBmp\", contents=contents, channels=channels, name=name)\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\nop_def=op_def)\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 3271, in create_op\nop_def=op_def)\nFile \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1650, in init\nself._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\nInvalidArgumentError (see above for traceback): channels attribute 3 does not match bits per pixel from file 1\n[[Node: DecodeBmp_1 = DecodeBmpchannels=3, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]]", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: 3.10.0-693.2.2.el7.x86_64\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.8.0\r\n- **Python version**: Python 2.7.14 :: Anaconda\r\n- **Bazel version (if compiling from source)**: None\r\n- **GCC/Compiler version (if compiling from source)**: None\r\n- **CUDA/cuDNN version**: None\r\n- **GPU model and memory**: None\r\n- **Exact command to reproduce**: See below\r\n\r\n### Describe the problem\r\nWe rely on tensorflow.image.decode_xxx() apis to load images. We expect a fixed channel size for decoded images and below code works:\r\n\r\n```python\r\nimport tensorflow as tf\r\ndata = tf.placeholder(dtype=tf.string, shape=())\r\nimage = tf.image.decode_jpeg(data, channels=3)\r\n```\r\n\r\nHowever, it does not work for tensorflow.image.decode_bmp() for every images. For example, a bmp image with channel model \"L\":\r\n[my_image.bmp.zip](https://github.com/tensorflow/tensorflow/files/2252717/my_image.bmp.zip)\r\n\r\n\r\n```python\r\nimport tensorflow as tf\r\ndata = tf.placeholder(dtype=tf.string, shape=())\r\n\r\nimage_no_spec = tf.image.decode_bmp(data)\r\nimage = tf.image.decode_bmp(data, channels=3)\r\n\r\nmy_image = open(\"my_image.bmp\", \"rb\").read()\r\nwith tf.Session() as sess:\r\n    res = sess.run(image_no_spec, {data: my_image})\r\n    print \"Decode shape: \", res.shape   # (666, 1000, 1)\r\n\r\n    res = sess.run(image, {data: my_image})\r\n    print \"Decode shape: \", res.shape  # err\r\n```\r\n\r\nSince tensorflow.image.decode_image() is a wrapper for decode_xxx() api(s), it may benefits if we can specify channels for all formats safely.\r\n\r\n### Source code / logs\r\n\r\nDecode shape:  (666, 1000, 1)\r\nTraceback (most recent call last):\r\n  File \"a.py\", line 12, in <module>\r\n    res = sess.run(image, {data: my_image})\r\n  File \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 905, in run\r\n    run_metadata_ptr)\r\n  File \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1137, in _run\r\n    feed_dict_tensor, options, run_metadata)\r\n  File \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1355, in _do_run\r\n    options, run_metadata)\r\n  File \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1374, in _do_call\r\n    raise type(e)(node_def, op, message)\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: channels attribute 3 does not match bits per pixel from file 1\r\n\t [[Node: DecodeBmp_1 = DecodeBmp[channels=3, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](_arg_Placeholder_0_0)]]\r\n\r\nCaused by op u'DecodeBmp_1', defined at:\r\n  File \"a.py\", line 5, in <module>\r\n    image = tf.image.decode_bmp(data, channels=3)\r\n  File \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/ops/gen_image_ops.py\", line 513, in decode_bmp\r\n    \"DecodeBmp\", contents=contents, channels=channels, name=name)\r\n  File \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\r\n    op_def=op_def)\r\n  File \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 3271, in create_op\r\n    op_def=op_def)\r\n  File \"/home/work/anaconda2/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1650, in __init__\r\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\r\n\r\nInvalidArgumentError (see above for traceback): channels attribute 3 does not match bits per pixel from file 1\r\n\t [[Node: DecodeBmp_1 = DecodeBmp[channels=3, _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"](_arg_Placeholder_0_0)]]\r\n\r\n"}