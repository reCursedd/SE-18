{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21647", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21647/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21647/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21647/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21647", "id": 351048294, "node_id": "MDU6SXNzdWUzNTEwNDgyOTQ=", "number": 21647, "title": "ValueError: Attempted to map inputs that were not found in graph_def: [input:0]", "user": {"login": "NylaWorker", "id": 25090956, "node_id": "MDQ6VXNlcjI1MDkwOTU2", "avatar_url": "https://avatars2.githubusercontent.com/u/25090956?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NylaWorker", "html_url": "https://github.com/NylaWorker", "followers_url": "https://api.github.com/users/NylaWorker/followers", "following_url": "https://api.github.com/users/NylaWorker/following{/other_user}", "gists_url": "https://api.github.com/users/NylaWorker/gists{/gist_id}", "starred_url": "https://api.github.com/users/NylaWorker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NylaWorker/subscriptions", "organizations_url": "https://api.github.com/users/NylaWorker/orgs", "repos_url": "https://api.github.com/users/NylaWorker/repos", "events_url": "https://api.github.com/users/NylaWorker/events{/privacy}", "received_events_url": "https://api.github.com/users/NylaWorker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-08-16T04:07:51Z", "updated_at": "2018-11-15T19:03:58Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Hello!</p>\n<p>I have asked this question in stackoverflow but at this point it merits a long post.</p>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nNo</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux Ubuntu 16.04</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:<br>\nNA</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\npip</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n1.8</li>\n<li><strong>Python version</strong>:<br>\nPython 2.7.12</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\nNA</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\nNA</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\n9.2</li>\n<li><strong>GPU model and memory</strong>:<br>\n7611MiB (gpu nvidia p4)</li>\n<li><strong>Exact command to reproduce</strong>:<br>\n<code>ValueError: Attempted to map inputs that were not found in graph_def: [input:0]</code></li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Trying to create a frozen graph, technically succeeding at doing that but then unable to run it. I am unsure about what the tags do. I want to use the model for inference,  but wasn't able to load it in a frozen graph in training and serving mode.  I suppose I have to restore the session? the documentation does not show that. And I double checked my output node's name is softmax. I saw the frozen graph in tensorboard and looks fine, but does not load into the graph. Help? I found people with issues like this but none resolved or their issues I already fixed in my code.</p>\n<h3>Source code / logs</h3>\n<p>This is the code to freeze from and not frozen  .pb file and its variables.</p>\n<pre><code>import tensorflow as tf\nexport_dir='../catmod'\nwith tf.Session(graph=tf.Graph()) as sess:\n    # I have not been able to find how the tags affect this. Does training work? I tried as well with serve\n    # serve gave the same error of input:0  * I checked with saved_model_cli\n    tf.saved_model.loader.load(sess, [tf.saved_model.tag_constants.TRAINING], export_dir)\n    output_graph = \"frozen_graph.pb\" \n    # changing nodes from refswitch to switch then moving it accordingly \n    for node in gd.node:\n        if node.op == 'RefSwitch':\n            node.op = 'Switch'\n            for index in xrange(len(node.input)):\n                if 'moving_' in node.input[index]:\n                    node.input[index] = node.input[index] + '/read'\n        elif node.op == 'AssignSub':\n            node.op = 'Sub'\n            if 'use_locking' in node.attr: del node.attr['use_locking']\n    gd = sess.graph.as_graph_def()\n    output_nodes=['softmax']\n    output_graph_def = tf.graph_util.convert_variables_to_constants(\n       sess, # The session is used to retrieve the weights\n       gd,\n       output_nodes# The output node names are used to select the usefull nodes\n    )\n\n\n\n    # Finally we serialize and dump the output graph to the filesystem\n    with tf.gfile.GFile(output_graph, \"wb\") as f:\n        f.write(output_graph_def.SerializeToString())\nsess.close()\n\n\n</code></pre>\n<p>This code is functional as I have used it with pre-frozen graphs.  (parts of) Code to load the frozen graph which I used with other frozen graphs that I got from the internet:</p>\n<pre><code>import tensorflow as tf\nimport numpy as np\nfrom tensorflow.python.platform import gfile\nfrom tensorflow.python.client import timeline\nfrom tensorflow.python.util import compat\n\n### Loading the model \n\ndef getModel(pb_frozen):\n    with gfile.FastGFile(pb_frozen,'rb') as f:\n        graph_def = tf.GraphDef()\n        graph_def.ParseFromString(f.read())\n    return graph_def\n\n# Running the model \ntf.logging.info(\"Starting execution\")\n\ngpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.50)\ntf.reset_default_graph()\n\ng = tf.Graph()\n\ndummy_input = np.random.random_sample((batch_size,224,224,3))\noutlist=[]\n# creating the graph \nwith g.as_default():\n    inc=tf.constant(dummy_input, dtype=tf.float32)\n    dataset=tf.data.Dataset.from_tensors(inc)\n    dataset=dataset.repeat()\n    iterator=dataset.make_one_shot_iterator()\n    next_element=iterator.get_next()\n    out = tf.import_graph_def(\n      graph_def=  getModel(pb_frozen), # loading graph \n      input_map={\"input\":next_element},\n      return_elements=['dense/bias']\n    )\n    out = out[0].outputs[0]\n    outlist.append(out)\n\n</code></pre>\n<p>And then is run in a session.</p>", "body_text": "Hello!\nI have asked this question in stackoverflow but at this point it merits a long post.\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nNo\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux Ubuntu 16.04\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nNA\nTensorFlow installed from (source or binary):\npip\nTensorFlow version (use command below):\n1.8\nPython version:\nPython 2.7.12\nBazel version (if compiling from source):\nNA\nGCC/Compiler version (if compiling from source):\nNA\nCUDA/cuDNN version:\n9.2\nGPU model and memory:\n7611MiB (gpu nvidia p4)\nExact command to reproduce:\nValueError: Attempted to map inputs that were not found in graph_def: [input:0]\n\nDescribe the problem\nTrying to create a frozen graph, technically succeeding at doing that but then unable to run it. I am unsure about what the tags do. I want to use the model for inference,  but wasn't able to load it in a frozen graph in training and serving mode.  I suppose I have to restore the session? the documentation does not show that. And I double checked my output node's name is softmax. I saw the frozen graph in tensorboard and looks fine, but does not load into the graph. Help? I found people with issues like this but none resolved or their issues I already fixed in my code.\nSource code / logs\nThis is the code to freeze from and not frozen  .pb file and its variables.\nimport tensorflow as tf\nexport_dir='../catmod'\nwith tf.Session(graph=tf.Graph()) as sess:\n    # I have not been able to find how the tags affect this. Does training work? I tried as well with serve\n    # serve gave the same error of input:0  * I checked with saved_model_cli\n    tf.saved_model.loader.load(sess, [tf.saved_model.tag_constants.TRAINING], export_dir)\n    output_graph = \"frozen_graph.pb\" \n    # changing nodes from refswitch to switch then moving it accordingly \n    for node in gd.node:\n        if node.op == 'RefSwitch':\n            node.op = 'Switch'\n            for index in xrange(len(node.input)):\n                if 'moving_' in node.input[index]:\n                    node.input[index] = node.input[index] + '/read'\n        elif node.op == 'AssignSub':\n            node.op = 'Sub'\n            if 'use_locking' in node.attr: del node.attr['use_locking']\n    gd = sess.graph.as_graph_def()\n    output_nodes=['softmax']\n    output_graph_def = tf.graph_util.convert_variables_to_constants(\n       sess, # The session is used to retrieve the weights\n       gd,\n       output_nodes# The output node names are used to select the usefull nodes\n    )\n\n\n\n    # Finally we serialize and dump the output graph to the filesystem\n    with tf.gfile.GFile(output_graph, \"wb\") as f:\n        f.write(output_graph_def.SerializeToString())\nsess.close()\n\n\n\nThis code is functional as I have used it with pre-frozen graphs.  (parts of) Code to load the frozen graph which I used with other frozen graphs that I got from the internet:\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.python.platform import gfile\nfrom tensorflow.python.client import timeline\nfrom tensorflow.python.util import compat\n\n### Loading the model \n\ndef getModel(pb_frozen):\n    with gfile.FastGFile(pb_frozen,'rb') as f:\n        graph_def = tf.GraphDef()\n        graph_def.ParseFromString(f.read())\n    return graph_def\n\n# Running the model \ntf.logging.info(\"Starting execution\")\n\ngpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.50)\ntf.reset_default_graph()\n\ng = tf.Graph()\n\ndummy_input = np.random.random_sample((batch_size,224,224,3))\noutlist=[]\n# creating the graph \nwith g.as_default():\n    inc=tf.constant(dummy_input, dtype=tf.float32)\n    dataset=tf.data.Dataset.from_tensors(inc)\n    dataset=dataset.repeat()\n    iterator=dataset.make_one_shot_iterator()\n    next_element=iterator.get_next()\n    out = tf.import_graph_def(\n      graph_def=  getModel(pb_frozen), # loading graph \n      input_map={\"input\":next_element},\n      return_elements=['dense/bias']\n    )\n    out = out[0].outputs[0]\n    outlist.append(out)\n\n\nAnd then is run in a session.", "body": "Hello! \r\n\r\nI have asked this question in stackoverflow but at this point it merits a long post. \r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nNo\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\n Linux Ubuntu 16.04\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\nNA\r\n- **TensorFlow installed from (source or binary)**:\r\npip \r\n- **TensorFlow version (use command below)**:\r\n1.8\r\n- **Python version**:\r\nPython 2.7.12\r\n- **Bazel version (if compiling from source)**:\r\nNA\r\n- **GCC/Compiler version (if compiling from source)**:\r\nNA\r\n- **CUDA/cuDNN version**:\r\n9.2\r\n- **GPU model and memory**:\r\n 7611MiB (gpu nvidia p4)\r\n- **Exact command to reproduce**:\r\n`ValueError: Attempted to map inputs that were not found in graph_def: [input:0]`\r\n\r\n\r\n### Describe the problem\r\nTrying to create a frozen graph, technically succeeding at doing that but then unable to run it. I am unsure about what the tags do. I want to use the model for inference,  but wasn't able to load it in a frozen graph in training and serving mode.  I suppose I have to restore the session? the documentation does not show that. And I double checked my output node's name is softmax. I saw the frozen graph in tensorboard and looks fine, but does not load into the graph. Help? I found people with issues like this but none resolved or their issues I already fixed in my code.\r\n\r\n### Source code / logs\r\nThis is the code to freeze from and not frozen  .pb file and its variables. \r\n```\r\nimport tensorflow as tf\r\nexport_dir='../catmod'\r\nwith tf.Session(graph=tf.Graph()) as sess:\r\n    # I have not been able to find how the tags affect this. Does training work? I tried as well with serve\r\n    # serve gave the same error of input:0  * I checked with saved_model_cli\r\n    tf.saved_model.loader.load(sess, [tf.saved_model.tag_constants.TRAINING], export_dir)\r\n    output_graph = \"frozen_graph.pb\" \r\n    # changing nodes from refswitch to switch then moving it accordingly \r\n    for node in gd.node:\r\n        if node.op == 'RefSwitch':\r\n            node.op = 'Switch'\r\n            for index in xrange(len(node.input)):\r\n                if 'moving_' in node.input[index]:\r\n                    node.input[index] = node.input[index] + '/read'\r\n        elif node.op == 'AssignSub':\r\n            node.op = 'Sub'\r\n            if 'use_locking' in node.attr: del node.attr['use_locking']\r\n    gd = sess.graph.as_graph_def()\r\n    output_nodes=['softmax']\r\n    output_graph_def = tf.graph_util.convert_variables_to_constants(\r\n       sess, # The session is used to retrieve the weights\r\n       gd,\r\n       output_nodes# The output node names are used to select the usefull nodes\r\n    )\r\n\r\n\r\n\r\n    # Finally we serialize and dump the output graph to the filesystem\r\n    with tf.gfile.GFile(output_graph, \"wb\") as f:\r\n        f.write(output_graph_def.SerializeToString())\r\nsess.close()\r\n\r\n\r\n```\r\nThis code is functional as I have used it with pre-frozen graphs.  (parts of) Code to load the frozen graph which I used with other frozen graphs that I got from the internet:\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\nfrom tensorflow.python.platform import gfile\r\nfrom tensorflow.python.client import timeline\r\nfrom tensorflow.python.util import compat\r\n\r\n### Loading the model \r\n\r\ndef getModel(pb_frozen):\r\n    with gfile.FastGFile(pb_frozen,'rb') as f:\r\n        graph_def = tf.GraphDef()\r\n        graph_def.ParseFromString(f.read())\r\n    return graph_def\r\n\r\n# Running the model \r\ntf.logging.info(\"Starting execution\")\r\n\r\ngpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.50)\r\ntf.reset_default_graph()\r\n\r\ng = tf.Graph()\r\n\r\ndummy_input = np.random.random_sample((batch_size,224,224,3))\r\noutlist=[]\r\n# creating the graph \r\nwith g.as_default():\r\n    inc=tf.constant(dummy_input, dtype=tf.float32)\r\n    dataset=tf.data.Dataset.from_tensors(inc)\r\n    dataset=dataset.repeat()\r\n    iterator=dataset.make_one_shot_iterator()\r\n    next_element=iterator.get_next()\r\n    out = tf.import_graph_def(\r\n      graph_def=  getModel(pb_frozen), # loading graph \r\n      input_map={\"input\":next_element},\r\n      return_elements=['dense/bias']\r\n    )\r\n    out = out[0].outputs[0]\r\n    outlist.append(out)\r\n\r\n``` \r\nAnd then is run in a session. \r\n\r\n\r\n"}