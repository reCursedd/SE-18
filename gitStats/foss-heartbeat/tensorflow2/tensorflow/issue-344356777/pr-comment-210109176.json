{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/210109176", "pull_request_review_id": 146258498, "id": 210109176, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDEwOTE3Ng==", "diff_hunk": "@@ -0,0 +1,96 @@\n+licenses([\"notice\"])  # 3-Clause BSD\n+\n+exports_files([\"license.txt\"])\n+\n+filegroup(\n+    name = \"LICENSE\",\n+    srcs = [\n+        \"license.txt\",\n+    ],\n+    visibility = [\"//visibility:public\"],\n+)\n+\n+load(\n+    \"@org_tensorflow//tensorflow:tensorflow.bzl\",\n+    \"tf_cc_test\"\n+)\n+\n+cc_library(\n+    name = \"ngraph_libs_linux\",\n+    srcs = [\n+        \"lib/libiomp5.so\",\n+        \"lib/libmklml_intel.so\",\n+    ],\n+    visibility = [\"//visibility:public\"],\n+)\n+\n+cc_library(", "path": "third_party/ngraph/ngraph_tf.BUILD", "position": 27, "original_position": 27, "commit_id": "bc6be507c71046dfc889a90e3949a903d5d1e6eb", "original_commit_id": "9523a98466d16cf01fc76a67b489f1124cf626ac", "user": {"login": "avijit-nervana", "id": 30507445, "node_id": "MDQ6VXNlcjMwNTA3NDQ1", "avatar_url": "https://avatars0.githubusercontent.com/u/30507445?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avijit-nervana", "html_url": "https://github.com/avijit-nervana", "followers_url": "https://api.github.com/users/avijit-nervana/followers", "following_url": "https://api.github.com/users/avijit-nervana/following{/other_user}", "gists_url": "https://api.github.com/users/avijit-nervana/gists{/gist_id}", "starred_url": "https://api.github.com/users/avijit-nervana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avijit-nervana/subscriptions", "organizations_url": "https://api.github.com/users/avijit-nervana/orgs", "repos_url": "https://api.github.com/users/avijit-nervana/repos", "events_url": "https://api.github.com/users/avijit-nervana/events{/privacy}", "received_events_url": "https://api.github.com/users/avijit-nervana/received_events", "type": "User", "site_admin": false}, "body": "@aaroey I am seeing `bazel` errors. I was able to add the `@ngraph_tf//:libngraph_tf.so` to the `//tensorflow:libtensorflow_cc.so` target by adding the following line:\r\n```\r\ntf_cc_shared_object(\r\n    name = \"libtensorflow_cc.so\",\r\n    srcs = if_ngraph([\"@ngraph_tf//:libngraph_tf.so\"]), <-- new line added\r\n    linkopts = select({\r\n        \"//tensorflow:darwin\": [\r\n            \"-Wl,-exported_symbols_list\",  # This line must be directly followed by the exported_symbols.lds file\r\n            \"$(location //tensorflow:tf_exported_symbols.lds)\",\r\n        ],\r\n```\r\nHowever, don't know how to add this dependency to the `pywrap_tensorflow_internal` as this is a `tf_py_wrap_cc(...)` and looks like `srcs` takes only a swig input file.\r\n\r\nWhat's the recommended way to add the .so to the python wrapper? \r\n\r\nAlso - if an external application uses the TensorFlow C++ API (e.g., a TensorFlow serving container) - then does the external application also need to link with `@ngraph_tf//:libngraph_tf.so`? ", "created_at": "2018-08-14T21:25:46Z", "updated_at": "2018-08-16T00:00:51Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21122#discussion_r210109176", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21122", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/210109176"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21122#discussion_r210109176"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21122"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=31743510\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/aaroey\">@aaroey</a> I am seeing <code>bazel</code> errors. I was able to add the <code>@ngraph_tf//:libngraph_tf.so</code> to the <code>//tensorflow:libtensorflow_cc.so</code> target by adding the following line:</p>\n<pre><code>tf_cc_shared_object(\n    name = \"libtensorflow_cc.so\",\n    srcs = if_ngraph([\"@ngraph_tf//:libngraph_tf.so\"]), &lt;-- new line added\n    linkopts = select({\n        \"//tensorflow:darwin\": [\n            \"-Wl,-exported_symbols_list\",  # This line must be directly followed by the exported_symbols.lds file\n            \"$(location //tensorflow:tf_exported_symbols.lds)\",\n        ],\n</code></pre>\n<p>However, don't know how to add this dependency to the <code>pywrap_tensorflow_internal</code> as this is a <code>tf_py_wrap_cc(...)</code> and looks like <code>srcs</code> takes only a swig input file.</p>\n<p>What's the recommended way to add the .so to the python wrapper?</p>\n<p>Also - if an external application uses the TensorFlow C++ API (e.g., a TensorFlow serving container) - then does the external application also need to link with <code>@ngraph_tf//:libngraph_tf.so</code>?</p>", "body_text": "@aaroey I am seeing bazel errors. I was able to add the @ngraph_tf//:libngraph_tf.so to the //tensorflow:libtensorflow_cc.so target by adding the following line:\ntf_cc_shared_object(\n    name = \"libtensorflow_cc.so\",\n    srcs = if_ngraph([\"@ngraph_tf//:libngraph_tf.so\"]), <-- new line added\n    linkopts = select({\n        \"//tensorflow:darwin\": [\n            \"-Wl,-exported_symbols_list\",  # This line must be directly followed by the exported_symbols.lds file\n            \"$(location //tensorflow:tf_exported_symbols.lds)\",\n        ],\n\nHowever, don't know how to add this dependency to the pywrap_tensorflow_internal as this is a tf_py_wrap_cc(...) and looks like srcs takes only a swig input file.\nWhat's the recommended way to add the .so to the python wrapper?\nAlso - if an external application uses the TensorFlow C++ API (e.g., a TensorFlow serving container) - then does the external application also need to link with @ngraph_tf//:libngraph_tf.so?", "in_reply_to_id": 209491686}