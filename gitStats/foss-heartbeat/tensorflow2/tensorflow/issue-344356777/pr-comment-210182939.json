{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/210182939", "pull_request_review_id": 146344003, "id": 210182939, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDE4MjkzOQ==", "diff_hunk": "@@ -0,0 +1,96 @@\n+licenses([\"notice\"])  # 3-Clause BSD\n+\n+exports_files([\"license.txt\"])\n+\n+filegroup(\n+    name = \"LICENSE\",\n+    srcs = [\n+        \"license.txt\",\n+    ],\n+    visibility = [\"//visibility:public\"],\n+)\n+\n+load(\n+    \"@org_tensorflow//tensorflow:tensorflow.bzl\",\n+    \"tf_cc_test\"\n+)\n+\n+cc_library(\n+    name = \"ngraph_libs_linux\",\n+    srcs = [\n+        \"lib/libiomp5.so\",\n+        \"lib/libmklml_intel.so\",\n+    ],\n+    visibility = [\"//visibility:public\"],\n+)\n+\n+cc_library(", "path": "third_party/ngraph/ngraph_tf.BUILD", "position": 27, "original_position": 27, "commit_id": "bc6be507c71046dfc889a90e3949a903d5d1e6eb", "original_commit_id": "9523a98466d16cf01fc76a67b489f1124cf626ac", "user": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "body": "So what we had in mind is, rather than explicit dynamic linking in tensorflow, ngraph build and users use this mechanism.\r\n\r\n1 - When building, core TF only needs to expose the registration mechanism for optimizers.\r\n2 - We build TF without ngraph\r\n3 - You build ngraph to your specifications.\r\n4 - Users load TF.\r\n5 - Users dlopen ngraph library. This triggers a static initializer that registers ngraph optimizer with the core TF optimizer registry.\r\n6 - Users then use ngraph code.\r\n\r\nSo following the above model:\r\n- TF should not explicitly link against ngraph\r\n- ngraph should explicitly link against libtensorflow_framework.so\r\n- no explicit bazel dependency should be needed\r\n- external applications can choose to explicitly link against ngraph, or they can simply dlopen ngraph. Either should just work.", "created_at": "2018-08-15T06:45:02Z", "updated_at": "2018-08-16T00:00:51Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/21122#discussion_r210182939", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21122", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/210182939"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/21122#discussion_r210182939"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/21122"}}, "body_html": "<p>So what we had in mind is, rather than explicit dynamic linking in tensorflow, ngraph build and users use this mechanism.</p>\n<p>1 - When building, core TF only needs to expose the registration mechanism for optimizers.<br>\n2 - We build TF without ngraph<br>\n3 - You build ngraph to your specifications.<br>\n4 - Users load TF.<br>\n5 - Users dlopen ngraph library. This triggers a static initializer that registers ngraph optimizer with the core TF optimizer registry.<br>\n6 - Users then use ngraph code.</p>\n<p>So following the above model:</p>\n<ul>\n<li>TF should not explicitly link against ngraph</li>\n<li>ngraph should explicitly link against libtensorflow_framework.so</li>\n<li>no explicit bazel dependency should be needed</li>\n<li>external applications can choose to explicitly link against ngraph, or they can simply dlopen ngraph. Either should just work.</li>\n</ul>", "body_text": "So what we had in mind is, rather than explicit dynamic linking in tensorflow, ngraph build and users use this mechanism.\n1 - When building, core TF only needs to expose the registration mechanism for optimizers.\n2 - We build TF without ngraph\n3 - You build ngraph to your specifications.\n4 - Users load TF.\n5 - Users dlopen ngraph library. This triggers a static initializer that registers ngraph optimizer with the core TF optimizer registry.\n6 - Users then use ngraph code.\nSo following the above model:\n\nTF should not explicitly link against ngraph\nngraph should explicitly link against libtensorflow_framework.so\nno explicit bazel dependency should be needed\nexternal applications can choose to explicitly link against ngraph, or they can simply dlopen ngraph. Either should just work.", "in_reply_to_id": 209491686}