{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/194451212", "html_url": "https://github.com/tensorflow/tensorflow/issues/932#issuecomment-194451212", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/932", "id": 194451212, "node_id": "MDEyOklzc3VlQ29tbWVudDE5NDQ1MTIxMg==", "user": {"login": "dvyukov", "id": 1095328, "node_id": "MDQ6VXNlcjEwOTUzMjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1095328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvyukov", "html_url": "https://github.com/dvyukov", "followers_url": "https://api.github.com/users/dvyukov/followers", "following_url": "https://api.github.com/users/dvyukov/following{/other_user}", "gists_url": "https://api.github.com/users/dvyukov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvyukov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvyukov/subscriptions", "organizations_url": "https://api.github.com/users/dvyukov/orgs", "repos_url": "https://api.github.com/users/dvyukov/repos", "events_url": "https://api.github.com/users/dvyukov/events{/privacy}", "received_events_url": "https://api.github.com/users/dvyukov/received_events", "type": "User", "site_admin": false}, "created_at": "2016-03-09T18:56:09Z", "updated_at": "2016-03-09T18:56:09Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15736910\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zheng-xq\">@zheng-xq</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=70511\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/girving\">@girving</a></p>\n<p>On Tue, Mar 8, 2016 at 8:08 PM, Zhifeng Chen wrote:</p>\n<blockquote>\n<p>The thread calling 'delete p' should have the sole ownership of p, where p is generally any c++ object.<br>\nSo, it's not valid if one thread is calling a threadpool p while another thread calling p-&gt;Add().</p>\n</blockquote>\n<p>That's true. But the thread pool waits for the existing tasks to finish in destructor. If you combine these two points, you conclude that tasks are not allowed to submit child tasks to the thread pool. Ever. That's just does not make sense. So you need to either (1) wait for <em>all</em> tasks to finish, including subtasks of existing tasks, or (2) don't wait in thread pool destructor at all, stop threads as soon as possible, assert that the queue is empty now and exit.</p>\n<p>I am working on a fix.</p>", "body_text": "@zheng-xq @girving\nOn Tue, Mar 8, 2016 at 8:08 PM, Zhifeng Chen wrote:\n\nThe thread calling 'delete p' should have the sole ownership of p, where p is generally any c++ object.\nSo, it's not valid if one thread is calling a threadpool p while another thread calling p->Add().\n\nThat's true. But the thread pool waits for the existing tasks to finish in destructor. If you combine these two points, you conclude that tasks are not allowed to submit child tasks to the thread pool. Ever. That's just does not make sense. So you need to either (1) wait for all tasks to finish, including subtasks of existing tasks, or (2) don't wait in thread pool destructor at all, stop threads as soon as possible, assert that the queue is empty now and exit.\nI am working on a fix.", "body": "@zheng-xq @girving \n\nOn Tue, Mar 8, 2016 at 8:08 PM, Zhifeng Chen wrote:\n\n> The thread calling 'delete p' should have the sole ownership of p, where p is generally any c++ object. \n> So, it's not valid if one thread is calling a threadpool p while another thread calling p->Add().\n\nThat's true. But the thread pool waits for the existing tasks to finish in destructor. If you combine these two points, you conclude that tasks are not allowed to submit child tasks to the thread pool. Ever. That's just does not make sense. So you need to either (1) wait for _all_ tasks to finish, including subtasks of existing tasks, or (2) don't wait in thread pool destructor at all, stop threads as soon as possible, assert that the queue is empty now and exit.\n\nI am working on a fix.\n"}