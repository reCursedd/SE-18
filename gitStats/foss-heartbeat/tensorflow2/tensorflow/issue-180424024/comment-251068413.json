{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/251068413", "html_url": "https://github.com/tensorflow/tensorflow/pull/4699#issuecomment-251068413", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4699", "id": 251068413, "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTA2ODQxMw==", "user": {"login": "davidzchen", "id": 5283042, "node_id": "MDQ6VXNlcjUyODMwNDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5283042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidzchen", "html_url": "https://github.com/davidzchen", "followers_url": "https://api.github.com/users/davidzchen/followers", "following_url": "https://api.github.com/users/davidzchen/following{/other_user}", "gists_url": "https://api.github.com/users/davidzchen/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidzchen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidzchen/subscriptions", "organizations_url": "https://api.github.com/users/davidzchen/orgs", "repos_url": "https://api.github.com/users/davidzchen/repos", "events_url": "https://api.github.com/users/davidzchen/events{/privacy}", "received_events_url": "https://api.github.com/users/davidzchen/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-03T09:55:23Z", "updated_at": "2016-10-03T09:55:23Z", "author_association": "MEMBER", "body_html": "<p>Interesting, it looks like it is failing at the following line:</p>\n<div class=\"highlight highlight-source-shell\"><pre>    <span class=\"pl-c1\">read</span> -p <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Please specify which gcc should be used by nvcc as the host compiler. [Default is <span class=\"pl-smi\">$default_gcc_host_compiler_path</span>]: <span class=\"pl-pds\">\"</span></span> GCC_HOST_COMPILER_PATH</pre></div>\n<p>which is exiting with exit code <code>1</code>.</p>\n<p>It seems that the current approach of piping in an empty file to the invocation of the configure script makes subsequent <code>read</code> commands to exit with an error code.</p>\n<p>I have added a <code>-d</code> flag to have the <code>configure</code> script use defaults when finding libraries and toolchains on the system and updating the <code>configured</code> script to invoke <code>configure</code> with that flag.</p>\n<p>Another command that causes <code>configure</code> to fail is when the script tries to resolve <code>libcudnn</code>. I found that the script only covers the case where <code>libcudnn</code> is installed to a <code>lib</code>/<code>lib64</code> directory, such as <code>/usr/local/cuda-7.5/lib64</code>, but not case where it isn't, such as <code>/usr/lib/x86_64-linux-gnu</code>, which is, in fact, the cuDNN install dir on the GPU docker image.</p>", "body_text": "Interesting, it looks like it is failing at the following line:\n    read -p \"Please specify which gcc should be used by nvcc as the host compiler. [Default is $default_gcc_host_compiler_path]: \" GCC_HOST_COMPILER_PATH\nwhich is exiting with exit code 1.\nIt seems that the current approach of piping in an empty file to the invocation of the configure script makes subsequent read commands to exit with an error code.\nI have added a -d flag to have the configure script use defaults when finding libraries and toolchains on the system and updating the configured script to invoke configure with that flag.\nAnother command that causes configure to fail is when the script tries to resolve libcudnn. I found that the script only covers the case where libcudnn is installed to a lib/lib64 directory, such as /usr/local/cuda-7.5/lib64, but not case where it isn't, such as /usr/lib/x86_64-linux-gnu, which is, in fact, the cuDNN install dir on the GPU docker image.", "body": "Interesting, it looks like it is failing at the following line:\n\n``` sh\n    read -p \"Please specify which gcc should be used by nvcc as the host compiler. [Default is $default_gcc_host_compiler_path]: \" GCC_HOST_COMPILER_PATH\n```\n\nwhich is exiting with exit code `1`.\n\nIt seems that the current approach of piping in an empty file to the invocation of the configure script makes subsequent `read` commands to exit with an error code.\n\nI have added a `-d` flag to have the `configure` script use defaults when finding libraries and toolchains on the system and updating the `configured` script to invoke `configure` with that flag.\n\nAnother command that causes `configure` to fail is when the script tries to resolve `libcudnn`. I found that the script only covers the case where `libcudnn` is installed to a `lib`/`lib64` directory, such as `/usr/local/cuda-7.5/lib64`, but not case where it isn't, such as `/usr/lib/x86_64-linux-gnu`, which is, in fact, the cuDNN install dir on the GPU docker image.\n"}