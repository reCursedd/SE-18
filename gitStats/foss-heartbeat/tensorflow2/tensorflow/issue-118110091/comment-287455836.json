{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/287455836", "html_url": "https://github.com/tensorflow/tensorflow/issues/312#issuecomment-287455836", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/312", "id": 287455836, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzQ1NTgzNg==", "user": {"login": "RalphMao", "id": 7092031, "node_id": "MDQ6VXNlcjcwOTIwMzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7092031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalphMao", "html_url": "https://github.com/RalphMao", "followers_url": "https://api.github.com/users/RalphMao/followers", "following_url": "https://api.github.com/users/RalphMao/following{/other_user}", "gists_url": "https://api.github.com/users/RalphMao/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalphMao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalphMao/subscriptions", "organizations_url": "https://api.github.com/users/RalphMao/orgs", "repos_url": "https://api.github.com/users/RalphMao/repos", "events_url": "https://api.github.com/users/RalphMao/events{/privacy}", "received_events_url": "https://api.github.com/users/RalphMao/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-17T19:56:31Z", "updated_at": "2017-03-17T19:56:31Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=38796628\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dandelionmane\">@dandelionmane</a> Thanks for your codes. But I found sometimes it would go wrong due to not-found variables.(I met one with Adam/Wxxx). I made a small change to your codes and it works fine for me.</p>\n<pre><code>def optimistic_restore(session, save_file):\n\treader = tf.train.NewCheckpointReader(save_file)\n\tsaved_shapes = reader.get_variable_to_shape_map()\n\tvar_names = sorted([(var.name, var.name.split(':')[0]) for var in tf.global_variables()\n\t\t\tif var.name.split(':')[0] in saved_shapes])\n\trestore_vars = []\n        name2var = dict(zip(map(lambda x:x.name.split(':')[0], tf.global_variables()), tf.global_variables()))\n\twith tf.variable_scope('', reuse=True):\n\t\tfor var_name, saved_var_name in var_names:\n\t\t\tcurr_var = name2var[saved_var_name]\n\t\t\tvar_shape = curr_var.get_shape().as_list()\n\t\t\tif var_shape == saved_shapes[saved_var_name]:\n\t\t\t\trestore_vars.append(curr_var)\n\tsaver = tf.train.Saver(restore_vars)\n\tsaver.restore(session, save_file)\n</code></pre>", "body_text": "@dandelionmane Thanks for your codes. But I found sometimes it would go wrong due to not-found variables.(I met one with Adam/Wxxx). I made a small change to your codes and it works fine for me.\ndef optimistic_restore(session, save_file):\n\treader = tf.train.NewCheckpointReader(save_file)\n\tsaved_shapes = reader.get_variable_to_shape_map()\n\tvar_names = sorted([(var.name, var.name.split(':')[0]) for var in tf.global_variables()\n\t\t\tif var.name.split(':')[0] in saved_shapes])\n\trestore_vars = []\n        name2var = dict(zip(map(lambda x:x.name.split(':')[0], tf.global_variables()), tf.global_variables()))\n\twith tf.variable_scope('', reuse=True):\n\t\tfor var_name, saved_var_name in var_names:\n\t\t\tcurr_var = name2var[saved_var_name]\n\t\t\tvar_shape = curr_var.get_shape().as_list()\n\t\t\tif var_shape == saved_shapes[saved_var_name]:\n\t\t\t\trestore_vars.append(curr_var)\n\tsaver = tf.train.Saver(restore_vars)\n\tsaver.restore(session, save_file)", "body": "@dandelionmane Thanks for your codes. But I found sometimes it would go wrong due to not-found variables.(I met one with Adam/Wxxx). I made a small change to your codes and it works fine for me.\r\n\r\n\tdef optimistic_restore(session, save_file):\r\n\t\treader = tf.train.NewCheckpointReader(save_file)\r\n\t\tsaved_shapes = reader.get_variable_to_shape_map()\r\n\t\tvar_names = sorted([(var.name, var.name.split(':')[0]) for var in tf.global_variables()\r\n\t\t\t\tif var.name.split(':')[0] in saved_shapes])\r\n\t\trestore_vars = []\r\n            name2var = dict(zip(map(lambda x:x.name.split(':')[0], tf.global_variables()), tf.global_variables()))\r\n\t\twith tf.variable_scope('', reuse=True):\r\n\t\t\tfor var_name, saved_var_name in var_names:\r\n\t\t\t\tcurr_var = name2var[saved_var_name]\r\n\t\t\t\tvar_shape = curr_var.get_shape().as_list()\r\n\t\t\t\tif var_shape == saved_shapes[saved_var_name]:\r\n\t\t\t\t\trestore_vars.append(curr_var)\r\n\t\tsaver = tf.train.Saver(restore_vars)\r\n\t\tsaver.restore(session, save_file)\r\n"}