{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22207", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22207/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22207/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22207/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/22207", "id": 358917475, "node_id": "MDU6SXNzdWUzNTg5MTc0NzU=", "number": 22207, "title": "Example in Keras guide does not work when training with tf.data datasets", "user": {"login": "Efaq", "id": 42271354, "node_id": "MDQ6VXNlcjQyMjcxMzU0", "avatar_url": "https://avatars2.githubusercontent.com/u/42271354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Efaq", "html_url": "https://github.com/Efaq", "followers_url": "https://api.github.com/users/Efaq/followers", "following_url": "https://api.github.com/users/Efaq/following{/other_user}", "gists_url": "https://api.github.com/users/Efaq/gists{/gist_id}", "starred_url": "https://api.github.com/users/Efaq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Efaq/subscriptions", "organizations_url": "https://api.github.com/users/Efaq/orgs", "repos_url": "https://api.github.com/users/Efaq/repos", "events_url": "https://api.github.com/users/Efaq/events{/privacy}", "received_events_url": "https://api.github.com/users/Efaq/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "pavithrasv", "id": 13326758, "node_id": "MDQ6VXNlcjEzMzI2NzU4", "avatar_url": "https://avatars0.githubusercontent.com/u/13326758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pavithrasv", "html_url": "https://github.com/pavithrasv", "followers_url": "https://api.github.com/users/pavithrasv/followers", "following_url": "https://api.github.com/users/pavithrasv/following{/other_user}", "gists_url": "https://api.github.com/users/pavithrasv/gists{/gist_id}", "starred_url": "https://api.github.com/users/pavithrasv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pavithrasv/subscriptions", "organizations_url": "https://api.github.com/users/pavithrasv/orgs", "repos_url": "https://api.github.com/users/pavithrasv/repos", "events_url": "https://api.github.com/users/pavithrasv/events{/privacy}", "received_events_url": "https://api.github.com/users/pavithrasv/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "pavithrasv", "id": 13326758, "node_id": "MDQ6VXNlcjEzMzI2NzU4", "avatar_url": "https://avatars0.githubusercontent.com/u/13326758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pavithrasv", "html_url": "https://github.com/pavithrasv", "followers_url": "https://api.github.com/users/pavithrasv/followers", "following_url": "https://api.github.com/users/pavithrasv/following{/other_user}", "gists_url": "https://api.github.com/users/pavithrasv/gists{/gist_id}", "starred_url": "https://api.github.com/users/pavithrasv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pavithrasv/subscriptions", "organizations_url": "https://api.github.com/users/pavithrasv/orgs", "repos_url": "https://api.github.com/users/pavithrasv/repos", "events_url": "https://api.github.com/users/pavithrasv/events{/privacy}", "received_events_url": "https://api.github.com/users/pavithrasv/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-09-11T07:17:29Z", "updated_at": "2018-11-10T18:51:00Z", "closed_at": null, "author_association": "NONE", "body_html": "<p>Please go to Stack Overflow for help and support:</p>\n<p><a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">https://stackoverflow.com/questions/tagged/tensorflow</a></p>\n<p>If you open a GitHub issue, here is our policy:</p>\n<ol>\n<li>It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).</li>\n<li>The form below must be filled out.</li>\n<li>It shouldn't be a TensorBoard issue. Those go <a href=\"https://github.com/tensorflow/tensorboard/issues\">here</a>.</li>\n</ol>\n<p><strong>Here's why we have that policy</strong>: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:no</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:Windows 10</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:na</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:binary</li>\n<li><strong>TensorFlow version (use command below)</strong>:1.11.0-dev20180907</li>\n<li><strong>Python version</strong>:v3.6.3:2c5fed8</li>\n<li><strong>Bazel version (if compiling from source)</strong>:na</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:na</li>\n<li><strong>CUDA/cuDNN version</strong>:na</li>\n<li><strong>GPU model and memory</strong>:na</li>\n<li><strong>Exact command to reproduce</strong>:na</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p>Describe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.</p>\n<p>When going through the tutorial in <a href=\"https://www.tensorflow.org/guide/keras\" rel=\"nofollow\">https://www.tensorflow.org/guide/keras</a>, training with numpy arrays works, but training with tf.data datasets only works if you first perform training with numpy arrays. I expected that you could train with tf.data datasets without first going through numpy arrays. This issue was first identified in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"341392070\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/20827\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/20827/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/20827\">#20827</a> but it was closed as solved at the moment, for some nightly build over tensorflow v1.9.</p>\n<h3>Source code / logs</h3>\n<p>Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.</p>\n<p>The code below works if one uncomments the line <code>#model.fit(data, labels, epochs=10, batch_size=32)</code>. If it runs as it is, it will give an error, showed below.</p>\n<p>Code:</p>\n<pre><code>import tensorflow as tf\nfrom tensorflow import keras\n\nmodel = keras.Sequential()\n# Adds a densely-connected layer with 64 units to the model:\nmodel.add(keras.layers.Dense(64, activation='relu'))\n# Add another:\nmodel.add(keras.layers.Dense(64, activation='relu'))\n# Add a softmax layer with 10 output units:\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\nmodel.compile(optimizer=tf.train.AdamOptimizer(0.001),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Configure a model for categorical classification.\nmodel.compile(optimizer=tf.train.RMSPropOptimizer(0.01),\n              loss=keras.losses.categorical_crossentropy,\n              metrics=[keras.metrics.categorical_accuracy])\n\nimport numpy as np\n\ndata = np.random.random((1000, 32))\nlabels = np.random.random((1000, 10))\n\n#model.fit(data, labels, epochs=10, batch_size=32)\n\n# Instantiates a toy dataset instance:\ndataset = tf.data.Dataset.from_tensor_slices((data, labels))\ndataset = dataset.batch(32)\ndataset = dataset.repeat()\n\n# Don't forget to specify `steps_per_epoch` when calling `fit` on a dataset.\nmodel.fit(dataset, epochs=10, steps_per_epoch=30)\n</code></pre>\n<p>Error:</p>\n<pre><code>Traceback (most recent call last):\n  File \"...\\tensorflow\\python\\framework\\op_def_library.py\", line 510, in _apply_op_helper\n    preferred_dtype=default_dtype)\n  File \"...\\tensorflow\\python\\framework\\ops.py\", line 1145, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"...\\tensorflow\\python\\ops\\variables.py\", line 799, in _TensorConversionFunction\n    \"of type '%s'\" % (dtype.name, v.dtype.name))\nValueError: Incompatible type conversion requested to type 'float64' for variable of type 'float32'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"...\\temp.py\", line 34, in &lt;module&gt;\n    model.fit(dataset, epochs=10, steps_per_epoch=30)\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 1440, in fit\n    validation_split=validation_split)\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 944, in _standardize_user_data\n    class_weight, batch_size)\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 984, in _standardize_weights\n    self._set_inputs(x)\n  File \"...\\tensorflow\\python\\training\\checkpointable\\base.py\", line 426, in _method_wrapper\n    method(self, *args, **kwargs)\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 1198, in _set_inputs\n    self._symbolic_set_inputs(inputs, training=training)\n  File \"...\\tensorflow\\python\\training\\checkpointable\\base.py\", line 426, in _method_wrapper\n    method(self, *args, **kwargs)\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 1282, in _symbolic_set_inputs\n    outputs = self.call(dummy_input_values, training=training)\n  File \"...\\tensorflow\\python\\keras\\engine\\sequential.py\", line 232, in call\n    inputs, training=training, mask=mask)\n  File \"...\\tensorflow\\python\\keras\\engine\\sequential.py\", line 250, in _call_and_compute_mask\n    x = layer.call(x, **kwargs)\n  File \"...\\tensorflow\\python\\keras\\layers\\core.py\", line 947, in call\n    outputs = gen_math_ops.mat_mul(inputs, self.kernel)\n  File \"...\\tensorflow\\python\\ops\\gen_math_ops.py\", line 4856, in mat_mul\n    name=name)\n  File \"...\\tensorflow\\python\\framework\\op_def_library.py\", line 546, in _apply_op_helper\n    inferred_from[input_arg.type_attr]))\nTypeError: Input 'b' of 'MatMul' Op has type float32 that does not match type float64 of argument 'a'.\n\nProcess finished with exit code 1\n</code></pre>", "body_text": "Please go to Stack Overflow for help and support:\nhttps://stackoverflow.com/questions/tagged/tensorflow\nIf you open a GitHub issue, here is our policy:\n\nIt must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\nThe form below must be filled out.\nIt shouldn't be a TensorBoard issue. Those go here.\n\nHere's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):Windows 10\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:na\nTensorFlow installed from (source or binary):binary\nTensorFlow version (use command below):1.11.0-dev20180907\nPython version:v3.6.3:2c5fed8\nBazel version (if compiling from source):na\nGCC/Compiler version (if compiling from source):na\nCUDA/cuDNN version:na\nGPU model and memory:na\nExact command to reproduce:na\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\nWhen going through the tutorial in https://www.tensorflow.org/guide/keras, training with numpy arrays works, but training with tf.data datasets only works if you first perform training with numpy arrays. I expected that you could train with tf.data datasets without first going through numpy arrays. This issue was first identified in #20827 but it was closed as solved at the moment, for some nightly build over tensorflow v1.9.\nSource code / logs\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\nThe code below works if one uncomments the line #model.fit(data, labels, epochs=10, batch_size=32). If it runs as it is, it will give an error, showed below.\nCode:\nimport tensorflow as tf\nfrom tensorflow import keras\n\nmodel = keras.Sequential()\n# Adds a densely-connected layer with 64 units to the model:\nmodel.add(keras.layers.Dense(64, activation='relu'))\n# Add another:\nmodel.add(keras.layers.Dense(64, activation='relu'))\n# Add a softmax layer with 10 output units:\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\nmodel.compile(optimizer=tf.train.AdamOptimizer(0.001),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Configure a model for categorical classification.\nmodel.compile(optimizer=tf.train.RMSPropOptimizer(0.01),\n              loss=keras.losses.categorical_crossentropy,\n              metrics=[keras.metrics.categorical_accuracy])\n\nimport numpy as np\n\ndata = np.random.random((1000, 32))\nlabels = np.random.random((1000, 10))\n\n#model.fit(data, labels, epochs=10, batch_size=32)\n\n# Instantiates a toy dataset instance:\ndataset = tf.data.Dataset.from_tensor_slices((data, labels))\ndataset = dataset.batch(32)\ndataset = dataset.repeat()\n\n# Don't forget to specify `steps_per_epoch` when calling `fit` on a dataset.\nmodel.fit(dataset, epochs=10, steps_per_epoch=30)\n\nError:\nTraceback (most recent call last):\n  File \"...\\tensorflow\\python\\framework\\op_def_library.py\", line 510, in _apply_op_helper\n    preferred_dtype=default_dtype)\n  File \"...\\tensorflow\\python\\framework\\ops.py\", line 1145, in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"...\\tensorflow\\python\\ops\\variables.py\", line 799, in _TensorConversionFunction\n    \"of type '%s'\" % (dtype.name, v.dtype.name))\nValueError: Incompatible type conversion requested to type 'float64' for variable of type 'float32'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"...\\temp.py\", line 34, in <module>\n    model.fit(dataset, epochs=10, steps_per_epoch=30)\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 1440, in fit\n    validation_split=validation_split)\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 944, in _standardize_user_data\n    class_weight, batch_size)\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 984, in _standardize_weights\n    self._set_inputs(x)\n  File \"...\\tensorflow\\python\\training\\checkpointable\\base.py\", line 426, in _method_wrapper\n    method(self, *args, **kwargs)\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 1198, in _set_inputs\n    self._symbolic_set_inputs(inputs, training=training)\n  File \"...\\tensorflow\\python\\training\\checkpointable\\base.py\", line 426, in _method_wrapper\n    method(self, *args, **kwargs)\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 1282, in _symbolic_set_inputs\n    outputs = self.call(dummy_input_values, training=training)\n  File \"...\\tensorflow\\python\\keras\\engine\\sequential.py\", line 232, in call\n    inputs, training=training, mask=mask)\n  File \"...\\tensorflow\\python\\keras\\engine\\sequential.py\", line 250, in _call_and_compute_mask\n    x = layer.call(x, **kwargs)\n  File \"...\\tensorflow\\python\\keras\\layers\\core.py\", line 947, in call\n    outputs = gen_math_ops.mat_mul(inputs, self.kernel)\n  File \"...\\tensorflow\\python\\ops\\gen_math_ops.py\", line 4856, in mat_mul\n    name=name)\n  File \"...\\tensorflow\\python\\framework\\op_def_library.py\", line 546, in _apply_op_helper\n    inferred_from[input_arg.type_attr]))\nTypeError: Input 'b' of 'MatMul' Op has type float32 that does not match type float64 of argument 'a'.\n\nProcess finished with exit code 1", "body": "Please go to Stack Overflow for help and support:\r\n\r\nhttps://stackoverflow.com/questions/tagged/tensorflow\r\n\r\nIf you open a GitHub issue, here is our policy:\r\n\r\n1. It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\r\n2. The form below must be filled out.\r\n3. It shouldn't be a TensorBoard issue. Those go [here](https://github.com/tensorflow/tensorboard/issues).\r\n\r\n**Here's why we have that policy**: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:no\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:Windows 10\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:na\r\n- **TensorFlow installed from (source or binary)**:binary\r\n- **TensorFlow version (use command below)**:1.11.0-dev20180907\r\n- **Python version**:v3.6.3:2c5fed8\r\n- **Bazel version (if compiling from source)**:na\r\n- **GCC/Compiler version (if compiling from source)**:na\r\n- **CUDA/cuDNN version**:na\r\n- **GPU model and memory**:na\r\n- **Exact command to reproduce**:na\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\nDescribe the problem clearly here. Be sure to convey here why it's a bug in TensorFlow or a feature request.\r\n\r\nWhen going through the tutorial in https://www.tensorflow.org/guide/keras, training with numpy arrays works, but training with tf.data datasets only works if you first perform training with numpy arrays. I expected that you could train with tf.data datasets without first going through numpy arrays. This issue was first identified in #20827 but it was closed as solved at the moment, for some nightly build over tensorflow v1.9.\r\n\r\n### Source code / logs\r\nInclude any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached. Try to provide a reproducible test case that is the bare minimum necessary to generate the problem.\r\n\r\nThe code below works if one uncomments the line `#model.fit(data, labels, epochs=10, batch_size=32)`. If it runs as it is, it will give an error, showed below.\r\n\r\nCode:\r\n\r\n```\r\nimport tensorflow as tf\r\nfrom tensorflow import keras\r\n\r\nmodel = keras.Sequential()\r\n# Adds a densely-connected layer with 64 units to the model:\r\nmodel.add(keras.layers.Dense(64, activation='relu'))\r\n# Add another:\r\nmodel.add(keras.layers.Dense(64, activation='relu'))\r\n# Add a softmax layer with 10 output units:\r\nmodel.add(keras.layers.Dense(10, activation='softmax'))\r\n\r\nmodel.compile(optimizer=tf.train.AdamOptimizer(0.001),\r\n              loss='categorical_crossentropy',\r\n              metrics=['accuracy'])\r\n\r\n# Configure a model for categorical classification.\r\nmodel.compile(optimizer=tf.train.RMSPropOptimizer(0.01),\r\n              loss=keras.losses.categorical_crossentropy,\r\n              metrics=[keras.metrics.categorical_accuracy])\r\n\r\nimport numpy as np\r\n\r\ndata = np.random.random((1000, 32))\r\nlabels = np.random.random((1000, 10))\r\n\r\n#model.fit(data, labels, epochs=10, batch_size=32)\r\n\r\n# Instantiates a toy dataset instance:\r\ndataset = tf.data.Dataset.from_tensor_slices((data, labels))\r\ndataset = dataset.batch(32)\r\ndataset = dataset.repeat()\r\n\r\n# Don't forget to specify `steps_per_epoch` when calling `fit` on a dataset.\r\nmodel.fit(dataset, epochs=10, steps_per_epoch=30)\r\n```\r\n\r\nError:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"...\\tensorflow\\python\\framework\\op_def_library.py\", line 510, in _apply_op_helper\r\n    preferred_dtype=default_dtype)\r\n  File \"...\\tensorflow\\python\\framework\\ops.py\", line 1145, in internal_convert_to_tensor\r\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\r\n  File \"...\\tensorflow\\python\\ops\\variables.py\", line 799, in _TensorConversionFunction\r\n    \"of type '%s'\" % (dtype.name, v.dtype.name))\r\nValueError: Incompatible type conversion requested to type 'float64' for variable of type 'float32'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"...\\temp.py\", line 34, in <module>\r\n    model.fit(dataset, epochs=10, steps_per_epoch=30)\r\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 1440, in fit\r\n    validation_split=validation_split)\r\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 944, in _standardize_user_data\r\n    class_weight, batch_size)\r\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 984, in _standardize_weights\r\n    self._set_inputs(x)\r\n  File \"...\\tensorflow\\python\\training\\checkpointable\\base.py\", line 426, in _method_wrapper\r\n    method(self, *args, **kwargs)\r\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 1198, in _set_inputs\r\n    self._symbolic_set_inputs(inputs, training=training)\r\n  File \"...\\tensorflow\\python\\training\\checkpointable\\base.py\", line 426, in _method_wrapper\r\n    method(self, *args, **kwargs)\r\n  File \"...\\tensorflow\\python\\keras\\engine\\training.py\", line 1282, in _symbolic_set_inputs\r\n    outputs = self.call(dummy_input_values, training=training)\r\n  File \"...\\tensorflow\\python\\keras\\engine\\sequential.py\", line 232, in call\r\n    inputs, training=training, mask=mask)\r\n  File \"...\\tensorflow\\python\\keras\\engine\\sequential.py\", line 250, in _call_and_compute_mask\r\n    x = layer.call(x, **kwargs)\r\n  File \"...\\tensorflow\\python\\keras\\layers\\core.py\", line 947, in call\r\n    outputs = gen_math_ops.mat_mul(inputs, self.kernel)\r\n  File \"...\\tensorflow\\python\\ops\\gen_math_ops.py\", line 4856, in mat_mul\r\n    name=name)\r\n  File \"...\\tensorflow\\python\\framework\\op_def_library.py\", line 546, in _apply_op_helper\r\n    inferred_from[input_arg.type_attr]))\r\nTypeError: Input 'b' of 'MatMul' Op has type float32 that does not match type float64 of argument 'a'.\r\n\r\nProcess finished with exit code 1\r\n```\r\n"}