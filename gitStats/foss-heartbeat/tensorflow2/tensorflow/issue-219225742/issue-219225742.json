{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8953", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8953/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8953/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8953/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8953", "id": 219225742, "node_id": "MDU6SXNzdWUyMTkyMjU3NDI=", "number": 8953, "title": "Enable full message with tf.Print", "user": {"login": "MicaelCarvalho", "id": 17184992, "node_id": "MDQ6VXNlcjE3MTg0OTky", "avatar_url": "https://avatars3.githubusercontent.com/u/17184992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicaelCarvalho", "html_url": "https://github.com/MicaelCarvalho", "followers_url": "https://api.github.com/users/MicaelCarvalho/followers", "following_url": "https://api.github.com/users/MicaelCarvalho/following{/other_user}", "gists_url": "https://api.github.com/users/MicaelCarvalho/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicaelCarvalho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicaelCarvalho/subscriptions", "organizations_url": "https://api.github.com/users/MicaelCarvalho/orgs", "repos_url": "https://api.github.com/users/MicaelCarvalho/repos", "events_url": "https://api.github.com/users/MicaelCarvalho/events{/privacy}", "received_events_url": "https://api.github.com/users/MicaelCarvalho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-04-04T11:54:26Z", "updated_at": "2018-07-27T07:35:55Z", "closed_at": "2017-04-04T12:18:59Z", "author_association": "CONTRIBUTOR", "body_html": "<p><strong>Operating System:</strong> Debian 4.8.15-2<br>\n<strong>Installed version of CUDA and cuDNN:</strong> CUDA 8, cuDNN 5<br>\n<strong>python3 -c \"import tensorflow; print(tensorflow.<strong>version</strong>)\":</strong> 1.0.1</p>\n<p><strong>Minimal reproducible example</strong></p>\n<pre><code>import tensorflow as tf\nph = tf.placeholder(tf.float32, [3,4,5,6])\nts = tf.shape(ph)\ntp = tf.Print(ts, [ts])\ntm = tf.reduce_mean(tp)\nsess = tf.Session()\nres = sess.run(tm)\n</code></pre>\n<p><strong>Output</strong><br>\n<code>I tensorflow/core/kernels/logging_ops.cc:79] [3 4 5...]</code></p>\n<p>Maybe there is some obvious way around this, but I couldn't find any on the <a href=\"https://www.tensorflow.org/api_docs/python/tf/Print\" rel=\"nofollow\">docs</a>. To state the obvious : I'm trying to see the full shape of the tensor, and not only the first 3 positions. In this example its size is 4, but I would like to be able to see whatever I want with whatever size it has.</p>\n<p>Furthermore, debugging into TensorFlow did became a problem when I got to line <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/logging_ops.py#L62\">62 of logging_ops.py</a>, where <code>gen_logging_ops</code> is used but it doesn't seem to be declared anywhere \u2014 and older versions already had this, I'm probably missing some link, because <code>grep</code> and <code>find</code> couldn't find anything useful:</p>\n<p><strong>Output of <code>grep</code></strong></p>\n<pre><code>tensorflow$ grep -R \"gen_logging_ops\" .\n./tensorflow/python/framework/function_test.py:from tensorflow.python.ops import gen_logging_ops\n./tensorflow/python/framework/function_test.py:      check = gen_logging_ops._assert(math_ops.greater(x, 0), [x])\n./tensorflow/python/ops/control_flow_ops.py:from tensorflow.python.ops import gen_logging_ops\n./tensorflow/python/ops/control_flow_ops.py:      return gen_logging_ops._assert(\n./tensorflow/python/ops/control_flow_ops.py:        return gen_logging_ops._assert(\n./tensorflow/python/ops/summary_ops.py:from tensorflow.python.ops import gen_logging_ops\n./tensorflow/python/ops/summary_ops.py:from tensorflow.python.ops.gen_logging_ops import *\n./tensorflow/python/ops/summary_ops.py:    val = gen_logging_ops._tensor_summary(\n./tensorflow/python/ops/logging_ops.py:from tensorflow.python.ops import gen_logging_ops\n./tensorflow/python/ops/logging_ops.py:from tensorflow.python.ops.gen_logging_ops import *\n./tensorflow/python/ops/logging_ops.py:  return gen_logging_ops._print(input_, data, message, first_n, summarize, name)\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._histogram_summary(\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._image_summary(\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._audio_summary_v2(tag=tag,\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._merge_summary(inputs=inputs, name=name)\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._scalar_summary(tags=tags, values=values, name=scope)\n./tensorflow/python/kernel_tests/control_flow_ops_py_test.py:from tensorflow.python.ops import gen_logging_ops\n./tensorflow/python/kernel_tests/control_flow_ops_py_test.py:        unguarded_assert = gen_logging_ops._assert(\n./tensorflow/python/summary/summary.py:from tensorflow.python.ops import gen_logging_ops as _gen_logging_ops\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._scalar_summary(\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._image_summary(\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._histogram_summary(\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._audio_summary_v2(\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._merge_summary(inputs=inputs, name=name)\n</code></pre>\n<p><strong>Output of <code>find</code></strong></p>\n<pre><code>tensorflow$ find . -iname \"*logging_ops*\"\n./tensorflow/core/ops/logging_ops.cc\n./tensorflow/core/kernels/logging_ops_test.cc\n./tensorflow/core/kernels/logging_ops.cc\n./tensorflow/python/ops/logging_ops.py\n./tensorflow/python/kernel_tests/logging_ops_test.py\n</code></pre>\n<p>Besides evaluating what I want with <code>sess.run</code> and manually printing it with python, is there any tensorflow-friendly solution to this? Debugging should be easier. :)</p>", "body_text": "Operating System: Debian 4.8.15-2\nInstalled version of CUDA and cuDNN: CUDA 8, cuDNN 5\npython3 -c \"import tensorflow; print(tensorflow.version)\": 1.0.1\nMinimal reproducible example\nimport tensorflow as tf\nph = tf.placeholder(tf.float32, [3,4,5,6])\nts = tf.shape(ph)\ntp = tf.Print(ts, [ts])\ntm = tf.reduce_mean(tp)\nsess = tf.Session()\nres = sess.run(tm)\n\nOutput\nI tensorflow/core/kernels/logging_ops.cc:79] [3 4 5...]\nMaybe there is some obvious way around this, but I couldn't find any on the docs. To state the obvious : I'm trying to see the full shape of the tensor, and not only the first 3 positions. In this example its size is 4, but I would like to be able to see whatever I want with whatever size it has.\nFurthermore, debugging into TensorFlow did became a problem when I got to line 62 of logging_ops.py, where gen_logging_ops is used but it doesn't seem to be declared anywhere \u2014 and older versions already had this, I'm probably missing some link, because grep and find couldn't find anything useful:\nOutput of grep\ntensorflow$ grep -R \"gen_logging_ops\" .\n./tensorflow/python/framework/function_test.py:from tensorflow.python.ops import gen_logging_ops\n./tensorflow/python/framework/function_test.py:      check = gen_logging_ops._assert(math_ops.greater(x, 0), [x])\n./tensorflow/python/ops/control_flow_ops.py:from tensorflow.python.ops import gen_logging_ops\n./tensorflow/python/ops/control_flow_ops.py:      return gen_logging_ops._assert(\n./tensorflow/python/ops/control_flow_ops.py:        return gen_logging_ops._assert(\n./tensorflow/python/ops/summary_ops.py:from tensorflow.python.ops import gen_logging_ops\n./tensorflow/python/ops/summary_ops.py:from tensorflow.python.ops.gen_logging_ops import *\n./tensorflow/python/ops/summary_ops.py:    val = gen_logging_ops._tensor_summary(\n./tensorflow/python/ops/logging_ops.py:from tensorflow.python.ops import gen_logging_ops\n./tensorflow/python/ops/logging_ops.py:from tensorflow.python.ops.gen_logging_ops import *\n./tensorflow/python/ops/logging_ops.py:  return gen_logging_ops._print(input_, data, message, first_n, summarize, name)\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._histogram_summary(\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._image_summary(\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._audio_summary_v2(tag=tag,\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._merge_summary(inputs=inputs, name=name)\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._scalar_summary(tags=tags, values=values, name=scope)\n./tensorflow/python/kernel_tests/control_flow_ops_py_test.py:from tensorflow.python.ops import gen_logging_ops\n./tensorflow/python/kernel_tests/control_flow_ops_py_test.py:        unguarded_assert = gen_logging_ops._assert(\n./tensorflow/python/summary/summary.py:from tensorflow.python.ops import gen_logging_ops as _gen_logging_ops\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._scalar_summary(\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._image_summary(\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._histogram_summary(\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._audio_summary_v2(\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._merge_summary(inputs=inputs, name=name)\n\nOutput of find\ntensorflow$ find . -iname \"*logging_ops*\"\n./tensorflow/core/ops/logging_ops.cc\n./tensorflow/core/kernels/logging_ops_test.cc\n./tensorflow/core/kernels/logging_ops.cc\n./tensorflow/python/ops/logging_ops.py\n./tensorflow/python/kernel_tests/logging_ops_test.py\n\nBesides evaluating what I want with sess.run and manually printing it with python, is there any tensorflow-friendly solution to this? Debugging should be easier. :)", "body": "**Operating System:** Debian 4.8.15-2\r\n**Installed version of CUDA and cuDNN:** CUDA 8, cuDNN 5\r\n**python3 -c \"import tensorflow; print(tensorflow.__version__)\":** 1.0.1\r\n\r\n**Minimal reproducible example**\r\n```\r\nimport tensorflow as tf\r\nph = tf.placeholder(tf.float32, [3,4,5,6])\r\nts = tf.shape(ph)\r\ntp = tf.Print(ts, [ts])\r\ntm = tf.reduce_mean(tp)\r\nsess = tf.Session()\r\nres = sess.run(tm)\r\n```\r\n\r\n**Output**\r\n`I tensorflow/core/kernels/logging_ops.cc:79] [3 4 5...]`\r\n\r\nMaybe there is some obvious way around this, but I couldn't find any on the [docs](https://www.tensorflow.org/api_docs/python/tf/Print). To state the obvious : I'm trying to see the full shape of the tensor, and not only the first 3 positions. In this example its size is 4, but I would like to be able to see whatever I want with whatever size it has.\r\n\r\nFurthermore, debugging into TensorFlow did became a problem when I got to line [62 of logging_ops.py](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/logging_ops.py#L62), where `gen_logging_ops` is used but it doesn't seem to be declared anywhere \u2014 and older versions already had this, I'm probably missing some link, because `grep` and `find` couldn't find anything useful:\r\n\r\n**Output of `grep`**\r\n```\r\ntensorflow$ grep -R \"gen_logging_ops\" .\r\n./tensorflow/python/framework/function_test.py:from tensorflow.python.ops import gen_logging_ops\r\n./tensorflow/python/framework/function_test.py:      check = gen_logging_ops._assert(math_ops.greater(x, 0), [x])\r\n./tensorflow/python/ops/control_flow_ops.py:from tensorflow.python.ops import gen_logging_ops\r\n./tensorflow/python/ops/control_flow_ops.py:      return gen_logging_ops._assert(\r\n./tensorflow/python/ops/control_flow_ops.py:        return gen_logging_ops._assert(\r\n./tensorflow/python/ops/summary_ops.py:from tensorflow.python.ops import gen_logging_ops\r\n./tensorflow/python/ops/summary_ops.py:from tensorflow.python.ops.gen_logging_ops import *\r\n./tensorflow/python/ops/summary_ops.py:    val = gen_logging_ops._tensor_summary(\r\n./tensorflow/python/ops/logging_ops.py:from tensorflow.python.ops import gen_logging_ops\r\n./tensorflow/python/ops/logging_ops.py:from tensorflow.python.ops.gen_logging_ops import *\r\n./tensorflow/python/ops/logging_ops.py:  return gen_logging_ops._print(input_, data, message, first_n, summarize, name)\r\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._histogram_summary(\r\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._image_summary(\r\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._audio_summary_v2(tag=tag,\r\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._merge_summary(inputs=inputs, name=name)\r\n./tensorflow/python/ops/logging_ops.py:    val = gen_logging_ops._scalar_summary(tags=tags, values=values, name=scope)\r\n./tensorflow/python/kernel_tests/control_flow_ops_py_test.py:from tensorflow.python.ops import gen_logging_ops\r\n./tensorflow/python/kernel_tests/control_flow_ops_py_test.py:        unguarded_assert = gen_logging_ops._assert(\r\n./tensorflow/python/summary/summary.py:from tensorflow.python.ops import gen_logging_ops as _gen_logging_ops\r\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._scalar_summary(\r\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._image_summary(\r\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._histogram_summary(\r\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._audio_summary_v2(\r\n./tensorflow/python/summary/summary.py:    val = _gen_logging_ops._merge_summary(inputs=inputs, name=name)\r\n```\r\n\r\n**Output of `find`**\r\n```\r\ntensorflow$ find . -iname \"*logging_ops*\"\r\n./tensorflow/core/ops/logging_ops.cc\r\n./tensorflow/core/kernels/logging_ops_test.cc\r\n./tensorflow/core/kernels/logging_ops.cc\r\n./tensorflow/python/ops/logging_ops.py\r\n./tensorflow/python/kernel_tests/logging_ops_test.py\r\n```\r\n\r\nBesides evaluating what I want with `sess.run` and manually printing it with python, is there any tensorflow-friendly solution to this? Debugging should be easier. :)"}