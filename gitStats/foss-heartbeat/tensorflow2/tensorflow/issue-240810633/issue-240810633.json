{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11309", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11309/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11309/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11309/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11309", "id": 240810633, "node_id": "MDU6SXNzdWUyNDA4MTA2MzM=", "number": 11309, "title": "Mixture of multivariate distributions", "user": {"login": "dustinvtran", "id": 2569867, "node_id": "MDQ6VXNlcjI1Njk4Njc=", "avatar_url": "https://avatars1.githubusercontent.com/u/2569867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dustinvtran", "html_url": "https://github.com/dustinvtran", "followers_url": "https://api.github.com/users/dustinvtran/followers", "following_url": "https://api.github.com/users/dustinvtran/following{/other_user}", "gists_url": "https://api.github.com/users/dustinvtran/gists{/gist_id}", "starred_url": "https://api.github.com/users/dustinvtran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dustinvtran/subscriptions", "organizations_url": "https://api.github.com/users/dustinvtran/orgs", "repos_url": "https://api.github.com/users/dustinvtran/repos", "events_url": "https://api.github.com/users/dustinvtran/events{/privacy}", "received_events_url": "https://api.github.com/users/dustinvtran/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-06T00:18:20Z", "updated_at": "2017-10-27T16:39:54Z", "closed_at": "2017-10-27T16:39:54Z", "author_association": "MEMBER", "body_html": "<p>Consider a mixture of 2-dimensional Gaussians in TensorFlow:</p>\n<div class=\"highlight highlight-source-python\"><pre>ds <span class=\"pl-k\">=</span> tf.contrib.distributions\n\ncat <span class=\"pl-k\">=</span> ds.Categorical(<span class=\"pl-v\">probs</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">0.3</span>, <span class=\"pl-c1\">0.2</span>, <span class=\"pl-c1\">0.5</span>])\ncomps <span class=\"pl-k\">=</span> [ds.MultivariateNormalDiag(<span class=\"pl-v\">loc</span><span class=\"pl-k\">=</span>[<span class=\"pl-k\">-</span><span class=\"pl-c1\">5.0</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">5.0</span>], <span class=\"pl-v\">scale_diag</span><span class=\"pl-k\">=</span>tf.ones(<span class=\"pl-c1\">2</span>)),\n         ds.MultivariateNormalDiag(<span class=\"pl-v\">loc</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">0.0</span>, <span class=\"pl-c1\">0.0</span>], <span class=\"pl-v\">scale_diag</span><span class=\"pl-k\">=</span>tf.ones(<span class=\"pl-c1\">2</span>)),\n         ds.MultivariateNormalDiag(<span class=\"pl-v\">loc</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">5.0</span>, <span class=\"pl-c1\">5.0</span>], <span class=\"pl-v\">scale_diag</span><span class=\"pl-k\">=</span>tf.ones(<span class=\"pl-c1\">2</span>))]\n\nmix <span class=\"pl-k\">=</span> ds.Mixture(<span class=\"pl-v\">cat</span><span class=\"pl-k\">=</span>cat, <span class=\"pl-v\">components</span><span class=\"pl-k\">=</span>comps)</pre></div>\n<p>This works because each <code>MultivariateNormalDiag</code> distribution has a batch shape of <code>()</code>. It is compatible with the <code>Categorical</code>'s batch shape.</p>\n<p>Now consider a mixture of 2-dimensional Bernoulli's, or Gamma's, or Laplace, or StudentT's. We need an equivalent <code>MultivariateBernoulli</code>, <code>MultivariateGamma</code>, etc. distribution which allows us to fix the batch shape and increase the event shape.</p>\n<p>Are there plans to make such distributions available?</p>\n<p>What about edge cases such as a matrixvariate (k-variate) Bernoulli, where additional parameter dimensions determine the batch shape and the event shape is fixed at 2 (k)?</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1794715\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ebrevdo\">@ebrevdo</a> , <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1137078\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jvdillon\">@jvdillon</a>. Issue motivated by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"236757865\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/blei-lab/edward/issues/686\" data-hovercard-type=\"issue\" data-hovercard-url=\"/blei-lab/edward/issues/686/hovercard\" href=\"https://github.com/blei-lab/edward/issues/686\">blei-lab/edward#686</a>.</p>", "body_text": "Consider a mixture of 2-dimensional Gaussians in TensorFlow:\nds = tf.contrib.distributions\n\ncat = ds.Categorical(probs=[0.3, 0.2, 0.5])\ncomps = [ds.MultivariateNormalDiag(loc=[-5.0, -5.0], scale_diag=tf.ones(2)),\n         ds.MultivariateNormalDiag(loc=[0.0, 0.0], scale_diag=tf.ones(2)),\n         ds.MultivariateNormalDiag(loc=[5.0, 5.0], scale_diag=tf.ones(2))]\n\nmix = ds.Mixture(cat=cat, components=comps)\nThis works because each MultivariateNormalDiag distribution has a batch shape of (). It is compatible with the Categorical's batch shape.\nNow consider a mixture of 2-dimensional Bernoulli's, or Gamma's, or Laplace, or StudentT's. We need an equivalent MultivariateBernoulli, MultivariateGamma, etc. distribution which allows us to fix the batch shape and increase the event shape.\nAre there plans to make such distributions available?\nWhat about edge cases such as a matrixvariate (k-variate) Bernoulli, where additional parameter dimensions determine the batch shape and the event shape is fixed at 2 (k)?\n@ebrevdo , @jvdillon. Issue motivated by blei-lab/edward#686.", "body": "Consider a mixture of 2-dimensional Gaussians in TensorFlow:\r\n```python\r\nds = tf.contrib.distributions\r\n\r\ncat = ds.Categorical(probs=[0.3, 0.2, 0.5])\r\ncomps = [ds.MultivariateNormalDiag(loc=[-5.0, -5.0], scale_diag=tf.ones(2)),\r\n         ds.MultivariateNormalDiag(loc=[0.0, 0.0], scale_diag=tf.ones(2)),\r\n         ds.MultivariateNormalDiag(loc=[5.0, 5.0], scale_diag=tf.ones(2))]\r\n\r\nmix = ds.Mixture(cat=cat, components=comps)\r\n```\r\nThis works because each `MultivariateNormalDiag` distribution has a batch shape of `()`. It is compatible with the `Categorical`'s batch shape.\r\n\r\nNow consider a mixture of 2-dimensional Bernoulli's, or Gamma's, or Laplace, or StudentT's. We need an equivalent `MultivariateBernoulli`, `MultivariateGamma`, etc. distribution which allows us to fix the batch shape and increase the event shape.\r\n\r\nAre there plans to make such distributions available? \r\n\r\nWhat about edge cases such as a matrixvariate (k-variate) Bernoulli, where additional parameter dimensions determine the batch shape and the event shape is fixed at 2 (k)?\r\n\r\n@ebrevdo , @jvdillon. Issue motivated by https://github.com/blei-lab/edward/issues/686."}