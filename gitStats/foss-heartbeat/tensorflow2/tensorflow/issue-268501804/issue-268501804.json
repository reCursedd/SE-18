{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13977", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13977/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13977/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13977/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13977", "id": 268501804, "node_id": "MDU6SXNzdWUyNjg1MDE4MDQ=", "number": 13977, "title": "Feature request: adding spectral functions for preserving phase information", "user": {"login": "aneergaard", "id": 10213572, "node_id": "MDQ6VXNlcjEwMjEzNTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/10213572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aneergaard", "html_url": "https://github.com/aneergaard", "followers_url": "https://api.github.com/users/aneergaard/followers", "following_url": "https://api.github.com/users/aneergaard/following{/other_user}", "gists_url": "https://api.github.com/users/aneergaard/gists{/gist_id}", "starred_url": "https://api.github.com/users/aneergaard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aneergaard/subscriptions", "organizations_url": "https://api.github.com/users/aneergaard/orgs", "repos_url": "https://api.github.com/users/aneergaard/repos", "events_url": "https://api.github.com/users/aneergaard/events{/privacy}", "received_events_url": "https://api.github.com/users/aneergaard/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "rryan", "id": 26527, "node_id": "MDQ6VXNlcjI2NTI3", "avatar_url": "https://avatars3.githubusercontent.com/u/26527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rryan", "html_url": "https://github.com/rryan", "followers_url": "https://api.github.com/users/rryan/followers", "following_url": "https://api.github.com/users/rryan/following{/other_user}", "gists_url": "https://api.github.com/users/rryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/rryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rryan/subscriptions", "organizations_url": "https://api.github.com/users/rryan/orgs", "repos_url": "https://api.github.com/users/rryan/repos", "events_url": "https://api.github.com/users/rryan/events{/privacy}", "received_events_url": "https://api.github.com/users/rryan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rryan", "id": 26527, "node_id": "MDQ6VXNlcjI2NTI3", "avatar_url": "https://avatars3.githubusercontent.com/u/26527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rryan", "html_url": "https://github.com/rryan", "followers_url": "https://api.github.com/users/rryan/followers", "following_url": "https://api.github.com/users/rryan/following{/other_user}", "gists_url": "https://api.github.com/users/rryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/rryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rryan/subscriptions", "organizations_url": "https://api.github.com/users/rryan/orgs", "repos_url": "https://api.github.com/users/rryan/repos", "events_url": "https://api.github.com/users/rryan/events{/privacy}", "received_events_url": "https://api.github.com/users/rryan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2017-10-25T18:30:17Z", "updated_at": "2018-11-13T15:55:04Z", "closed_at": "2017-11-23T16:41:09Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes (attempting to)</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Windows 10</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.3.0</li>\n<li><strong>Python version</strong>: 3.5.4</li>\n<li><strong>Bazel version (if compiling from source)</strong>: N/A</li>\n<li><strong>CUDA/cuDNN version</strong>: CUDA v8.0.60, cuDNN 6.0</li>\n<li><strong>GPU model and memory</strong>: GTX 1060 6 GB</li>\n<li><strong>Exact command to reproduce</strong>: N/A</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I am working on a data processing pipeline directly in my tensorflow graph. In that case, I would like to use continuous wavelet transforms (CWT) in order to transform time-series data into scalograms instead of spectrograms in order to increase time-frequency resolution. I can only find a single API for performing the CWT that is compatible directly with TF, but unfortunately, it is not 'enough' since the tf.conv2 operator does not work with inputs of different types (real, complex). I therefore am trying to fix my own op using TF's standard ops, but have hit a snag. The spectral ops rfft and irfft only return and accept positive frequency components, and for my purpose, I would have to apply phase transformations of the spectrum, resulting in non-Hermitian symmetry (in which case I cannot use the tf.spectral.irfft to inverse transform!). So what I request, are spectral ops that return and accept the full complex spectra of input signals.</p>\n<h3>Source code / logs</h3>\n<p>N/A</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes (attempting to)\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): 1.3.0\nPython version: 3.5.4\nBazel version (if compiling from source): N/A\nCUDA/cuDNN version: CUDA v8.0.60, cuDNN 6.0\nGPU model and memory: GTX 1060 6 GB\nExact command to reproduce: N/A\n\nDescribe the problem\nI am working on a data processing pipeline directly in my tensorflow graph. In that case, I would like to use continuous wavelet transforms (CWT) in order to transform time-series data into scalograms instead of spectrograms in order to increase time-frequency resolution. I can only find a single API for performing the CWT that is compatible directly with TF, but unfortunately, it is not 'enough' since the tf.conv2 operator does not work with inputs of different types (real, complex). I therefore am trying to fix my own op using TF's standard ops, but have hit a snag. The spectral ops rfft and irfft only return and accept positive frequency components, and for my purpose, I would have to apply phase transformations of the spectrum, resulting in non-Hermitian symmetry (in which case I cannot use the tf.spectral.irfft to inverse transform!). So what I request, are spectral ops that return and accept the full complex spectra of input signals.\nSource code / logs\nN/A", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes (attempting to)\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **TensorFlow installed from (source or binary)**: Binary\r\n- **TensorFlow version (use command below)**: 1.3.0\r\n- **Python version**: 3.5.4\r\n- **Bazel version (if compiling from source)**: N/A\r\n- **CUDA/cuDNN version**: CUDA v8.0.60, cuDNN 6.0\r\n- **GPU model and memory**: GTX 1060 6 GB\r\n- **Exact command to reproduce**: N/A\r\n\r\n### Describe the problem\r\nI am working on a data processing pipeline directly in my tensorflow graph. In that case, I would like to use continuous wavelet transforms (CWT) in order to transform time-series data into scalograms instead of spectrograms in order to increase time-frequency resolution. I can only find a single API for performing the CWT that is compatible directly with TF, but unfortunately, it is not 'enough' since the tf.conv2 operator does not work with inputs of different types (real, complex). I therefore am trying to fix my own op using TF's standard ops, but have hit a snag. The spectral ops rfft and irfft only return and accept positive frequency components, and for my purpose, I would have to apply phase transformations of the spectrum, resulting in non-Hermitian symmetry (in which case I cannot use the tf.spectral.irfft to inverse transform!). So what I request, are spectral ops that return and accept the full complex spectra of input signals. \r\n\r\n### Source code / logs\r\nN/A"}