{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21181", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21181/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21181/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21181/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21181", "id": 345131214, "node_id": "MDU6SXNzdWUzNDUxMzEyMTQ=", "number": 21181, "title": "Lambda Layer issue when receiving a list of DeferredTensor with a TensorShape shape", "user": {"login": "jnd77", "id": 3433639, "node_id": "MDQ6VXNlcjM0MzM2Mzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/3433639?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnd77", "html_url": "https://github.com/jnd77", "followers_url": "https://api.github.com/users/jnd77/followers", "following_url": "https://api.github.com/users/jnd77/following{/other_user}", "gists_url": "https://api.github.com/users/jnd77/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnd77/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnd77/subscriptions", "organizations_url": "https://api.github.com/users/jnd77/orgs", "repos_url": "https://api.github.com/users/jnd77/repos", "events_url": "https://api.github.com/users/jnd77/events{/privacy}", "received_events_url": "https://api.github.com/users/jnd77/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "omalleyt12", "id": 29100818, "node_id": "MDQ6VXNlcjI5MTAwODE4", "avatar_url": "https://avatars3.githubusercontent.com/u/29100818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omalleyt12", "html_url": "https://github.com/omalleyt12", "followers_url": "https://api.github.com/users/omalleyt12/followers", "following_url": "https://api.github.com/users/omalleyt12/following{/other_user}", "gists_url": "https://api.github.com/users/omalleyt12/gists{/gist_id}", "starred_url": "https://api.github.com/users/omalleyt12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omalleyt12/subscriptions", "organizations_url": "https://api.github.com/users/omalleyt12/orgs", "repos_url": "https://api.github.com/users/omalleyt12/repos", "events_url": "https://api.github.com/users/omalleyt12/events{/privacy}", "received_events_url": "https://api.github.com/users/omalleyt12/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "omalleyt12", "id": 29100818, "node_id": "MDQ6VXNlcjI5MTAwODE4", "avatar_url": "https://avatars3.githubusercontent.com/u/29100818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omalleyt12", "html_url": "https://github.com/omalleyt12", "followers_url": "https://api.github.com/users/omalleyt12/followers", "following_url": "https://api.github.com/users/omalleyt12/following{/other_user}", "gists_url": "https://api.github.com/users/omalleyt12/gists{/gist_id}", "starred_url": "https://api.github.com/users/omalleyt12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omalleyt12/subscriptions", "organizations_url": "https://api.github.com/users/omalleyt12/orgs", "repos_url": "https://api.github.com/users/omalleyt12/repos", "events_url": "https://api.github.com/users/omalleyt12/events{/privacy}", "received_events_url": "https://api.github.com/users/omalleyt12/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-07-27T08:08:49Z", "updated_at": "2018-08-16T16:32:25Z", "closed_at": "2018-08-16T16:32:25Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nMacOS</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nbinary</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\nv1.9.0-0-g25c197e023 1.9.0</li>\n<li><strong>Python version</strong>:<br>\nPython 3.6.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>:<br>\nSee below.</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Following <a href=\"https://github.com/tensorflow/tensorflow/issues/20338\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/20338/hovercard\">this issue</a>, I used the work-around and wrapped the result of <code>compute_output_shape</code> with tf.TensorShape.<br>\nHowever when using a Lambda layer with multiple inputs, the shape isn't handled properly and throws the exception:</p>\n<p><code>TypeError: int() argument must be a string, a bytes-like object or a number, not 'TensorShape'</code></p>\n<h3>Source code / logs</h3>\n<p>Here is a basic set-up to reproduce it:</p>\n<pre><code>import tensorflow as tf\n\nclass MyLayer(tf.layers.Layer):\n\n    def __init__(self, **kwargs):\n        super(MyLayer, self).__init__(**kwargs)\n\n    def call(self, x):\n        return x\n\n    def compute_output_shape(self, input_shape):\n        return tf.TensorShape(input_shape[0])\n\ntf.enable_eager_execution()\n\na = tf.keras.layers.Input(shape=[1])\nb = tf.keras.layers.Input(shape=[1])\nlayer_1 = MyLayer()(a)\nlayer_2 = MyLayer()(b)\n\nlayer_3 = tf.keras.layers.Lambda(lambda x: x[0])([layer_1, layer_2])\n</code></pre>\n<p>And the stack-trace:</p>\n<pre><code>\nTraceback (most recent call last):\n  File \"/Users/jnd/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-C/ch-0/181.5087.37/PyCharm CE.app/Contents/helpers/pydev/pydevd.py\", line 1664, in &lt;module&gt;\n    main()\n  File \"/Users/jnd/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-C/ch-0/181.5087.37/PyCharm CE.app/Contents/helpers/pydev/pydevd.py\", line 1658, in main\n    globals = debugger.run(setup['file'], None, None, is_module)\n  File \"/Users/jnd/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-C/ch-0/181.5087.37/PyCharm CE.app/Contents/helpers/pydev/pydevd.py\", line 1068, in run\n    pydev_imports.execfile(file, globals, locals)  # execute the script\n  File \"/Users/jnd/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-C/ch-0/181.5087.37/PyCharm CE.app/Contents/helpers/pydev/_pydev_imps/_pydev_execfile.py\", line 18, in execfile\n    exec(compile(contents+\"\\n\", file, 'exec'), glob, loc)\n  File \"/Users/jnd/dev/mask_rcnn/bug_replication.py\", line 23, in &lt;module&gt;\n    layer_3 = tf.keras.layers.Lambda(lambda x: x[0])([layer_1, layer_2])\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 714, in __call__\n    output_shapes = self.compute_output_shape(input_shapes)\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/keras/layers/core.py\", line 677, in compute_output_shape\n    input_shape = tuple(tensor_shape.TensorShape(input_shape).as_list())\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 541, in __init__\n    self._dims = [as_dimension(d) for d in dims_iter]\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 541, in &lt;listcomp&gt;\n    self._dims = [as_dimension(d) for d in dims_iter]\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 482, in as_dimension\n    return Dimension(value)\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 37, in __init__\n    self._value = int(value)\nTypeError: int() argument must be a string, a bytes-like object or a number, not 'TensorShape'\n\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nMacOS\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary):\nbinary\nTensorFlow version (use command below):\nv1.9.0-0-g25c197e023 1.9.0\nPython version:\nPython 3.6.6\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce:\nSee below.\n\nDescribe the problem\nFollowing this issue, I used the work-around and wrapped the result of compute_output_shape with tf.TensorShape.\nHowever when using a Lambda layer with multiple inputs, the shape isn't handled properly and throws the exception:\nTypeError: int() argument must be a string, a bytes-like object or a number, not 'TensorShape'\nSource code / logs\nHere is a basic set-up to reproduce it:\nimport tensorflow as tf\n\nclass MyLayer(tf.layers.Layer):\n\n    def __init__(self, **kwargs):\n        super(MyLayer, self).__init__(**kwargs)\n\n    def call(self, x):\n        return x\n\n    def compute_output_shape(self, input_shape):\n        return tf.TensorShape(input_shape[0])\n\ntf.enable_eager_execution()\n\na = tf.keras.layers.Input(shape=[1])\nb = tf.keras.layers.Input(shape=[1])\nlayer_1 = MyLayer()(a)\nlayer_2 = MyLayer()(b)\n\nlayer_3 = tf.keras.layers.Lambda(lambda x: x[0])([layer_1, layer_2])\n\nAnd the stack-trace:\n\nTraceback (most recent call last):\n  File \"/Users/jnd/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-C/ch-0/181.5087.37/PyCharm CE.app/Contents/helpers/pydev/pydevd.py\", line 1664, in <module>\n    main()\n  File \"/Users/jnd/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-C/ch-0/181.5087.37/PyCharm CE.app/Contents/helpers/pydev/pydevd.py\", line 1658, in main\n    globals = debugger.run(setup['file'], None, None, is_module)\n  File \"/Users/jnd/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-C/ch-0/181.5087.37/PyCharm CE.app/Contents/helpers/pydev/pydevd.py\", line 1068, in run\n    pydev_imports.execfile(file, globals, locals)  # execute the script\n  File \"/Users/jnd/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-C/ch-0/181.5087.37/PyCharm CE.app/Contents/helpers/pydev/_pydev_imps/_pydev_execfile.py\", line 18, in execfile\n    exec(compile(contents+\"\\n\", file, 'exec'), glob, loc)\n  File \"/Users/jnd/dev/mask_rcnn/bug_replication.py\", line 23, in <module>\n    layer_3 = tf.keras.layers.Lambda(lambda x: x[0])([layer_1, layer_2])\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 714, in __call__\n    output_shapes = self.compute_output_shape(input_shapes)\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/keras/layers/core.py\", line 677, in compute_output_shape\n    input_shape = tuple(tensor_shape.TensorShape(input_shape).as_list())\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 541, in __init__\n    self._dims = [as_dimension(d) for d in dims_iter]\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 541, in <listcomp>\n    self._dims = [as_dimension(d) for d in dims_iter]\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 482, in as_dimension\n    return Dimension(value)\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 37, in __init__\n    self._value = int(value)\nTypeError: int() argument must be a string, a bytes-like object or a number, not 'TensorShape'", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nMacOS\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\n- **TensorFlow installed from (source or binary)**:\r\nbinary\r\n- **TensorFlow version (use command below)**:\r\nv1.9.0-0-g25c197e023 1.9.0\r\n- **Python version**:\r\nPython 3.6.6\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**:\r\nSee below.\r\n\r\n### Describe the problem\r\nFollowing [this issue](https://github.com/tensorflow/tensorflow/issues/20338), I used the work-around and wrapped the result of `compute_output_shape` with tf.TensorShape.\r\nHowever when using a Lambda layer with multiple inputs, the shape isn't handled properly and throws the exception:\r\n\r\n`TypeError: int() argument must be a string, a bytes-like object or a number, not 'TensorShape'`\r\n\r\n### Source code / logs\r\nHere is a basic set-up to reproduce it:\r\n\r\n    import tensorflow as tf\r\n\r\n    class MyLayer(tf.layers.Layer):\r\n\r\n        def __init__(self, **kwargs):\r\n            super(MyLayer, self).__init__(**kwargs)\r\n\r\n        def call(self, x):\r\n            return x\r\n\r\n        def compute_output_shape(self, input_shape):\r\n            return tf.TensorShape(input_shape[0])\r\n\r\n    tf.enable_eager_execution()\r\n\r\n    a = tf.keras.layers.Input(shape=[1])\r\n    b = tf.keras.layers.Input(shape=[1])\r\n    layer_1 = MyLayer()(a)\r\n    layer_2 = MyLayer()(b)\r\n\r\n    layer_3 = tf.keras.layers.Lambda(lambda x: x[0])([layer_1, layer_2])\r\n\r\n\r\nAnd the stack-trace:\r\n\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/jnd/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-C/ch-0/181.5087.37/PyCharm CE.app/Contents/helpers/pydev/pydevd.py\", line 1664, in <module>\r\n    main()\r\n  File \"/Users/jnd/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-C/ch-0/181.5087.37/PyCharm CE.app/Contents/helpers/pydev/pydevd.py\", line 1658, in main\r\n    globals = debugger.run(setup['file'], None, None, is_module)\r\n  File \"/Users/jnd/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-C/ch-0/181.5087.37/PyCharm CE.app/Contents/helpers/pydev/pydevd.py\", line 1068, in run\r\n    pydev_imports.execfile(file, globals, locals)  # execute the script\r\n  File \"/Users/jnd/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-C/ch-0/181.5087.37/PyCharm CE.app/Contents/helpers/pydev/_pydev_imps/_pydev_execfile.py\", line 18, in execfile\r\n    exec(compile(contents+\"\\n\", file, 'exec'), glob, loc)\r\n  File \"/Users/jnd/dev/mask_rcnn/bug_replication.py\", line 23, in <module>\r\n    layer_3 = tf.keras.layers.Lambda(lambda x: x[0])([layer_1, layer_2])\r\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py\", line 714, in __call__\r\n    output_shapes = self.compute_output_shape(input_shapes)\r\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/keras/layers/core.py\", line 677, in compute_output_shape\r\n    input_shape = tuple(tensor_shape.TensorShape(input_shape).as_list())\r\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 541, in __init__\r\n    self._dims = [as_dimension(d) for d in dims_iter]\r\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 541, in <listcomp>\r\n    self._dims = [as_dimension(d) for d in dims_iter]\r\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 482, in as_dimension\r\n    return Dimension(value)\r\n  File \"/usr/local/anaconda3/envs/mask_rcnn_cpu/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py\", line 37, in __init__\r\n    self._value = int(value)\r\nTypeError: int() argument must be a string, a bytes-like object or a number, not 'TensorShape'\r\n\r\n```"}