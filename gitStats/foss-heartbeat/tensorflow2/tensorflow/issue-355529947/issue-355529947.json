{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21971", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21971/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21971/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21971/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21971", "id": 355529947, "node_id": "MDU6SXNzdWUzNTU1Mjk5NDc=", "number": 21971, "title": "InvalidArgumentError: Input to reshape is a tensor with 1 values, but the requested shape has 0", "user": {"login": "DanielMorales9", "id": 3338120, "node_id": "MDQ6VXNlcjMzMzgxMjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3338120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanielMorales9", "html_url": "https://github.com/DanielMorales9", "followers_url": "https://api.github.com/users/DanielMorales9/followers", "following_url": "https://api.github.com/users/DanielMorales9/following{/other_user}", "gists_url": "https://api.github.com/users/DanielMorales9/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanielMorales9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanielMorales9/subscriptions", "organizations_url": "https://api.github.com/users/DanielMorales9/orgs", "repos_url": "https://api.github.com/users/DanielMorales9/repos", "events_url": "https://api.github.com/users/DanielMorales9/events{/privacy}", "received_events_url": "https://api.github.com/users/DanielMorales9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-08-30T10:48:52Z", "updated_at": "2018-09-20T18:50:19Z", "closed_at": "2018-09-20T18:50:19Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>Custom code:</li>\n<li>OS Platform and Distribution: Windows 7 x64</li>\n<li>TensorFlow installed from: Anaconda</li>\n<li>Bazel version: N/A</li>\n<li>Tensorflow version 1.8.0:</li>\n<li>python 3.6.0 :</li>\n<li>Mobile device: N/A</li>\n<li>Exact command to reproduce: N/A</li>\n<li>GPU model and memory: NVIDIA QUADRO K1100M</li>\n<li>CUDA/cuDNN: 9.0.176/7.0</li>\n</ul>\n<h3>The Problem</h3>\n<p>I strongly believe there's a problem with the gradient computation.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\nl2_u <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>.\nl2_i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>.\ninit_std <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.1</span>\nnp_users <span class=\"pl-k\">=</span> np.int64(<span class=\"pl-c1\">100</span>)\nnp_items <span class=\"pl-k\">=</span> np.int64(<span class=\"pl-c1\">100</span>)\nn_factors <span class=\"pl-k\">=</span> np.int64(<span class=\"pl-c1\">10</span>)\nlr <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.1</span>\n\ntrain_x <span class=\"pl-k\">=</span> np.stack([np.random.randint(np_users, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>), np.random.randint(np_items, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>)], <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\ntrain_y <span class=\"pl-k\">=</span> np.random.randint(<span class=\"pl-c1\">2</span>, <span class=\"pl-v\">size</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">define_graph</span>():\n    tf.reset_default_graph()\n    n_users <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>n_users<span class=\"pl-pds\">'</span></span>)\n    n_items <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>n_items<span class=\"pl-pds\">'</span></span>)\n    x <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">2</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x<span class=\"pl-pds\">\"</span></span>)\n    y <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>y<span class=\"pl-pds\">\"</span></span>)\n    w <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>sample_weights<span class=\"pl-pds\">'</span></span>)\n    reg_u <span class=\"pl-k\">=</span> tf.constant(l2_u, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>lambda_u<span class=\"pl-pds\">'</span></span>)\n    reg_i <span class=\"pl-k\">=</span> tf.constant(l2_i, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>lambda_i<span class=\"pl-pds\">'</span></span>)\n\n    u_shape <span class=\"pl-k\">=</span> tf.stack([n_users, n_factors])\n    u_rnd <span class=\"pl-k\">=</span> tf.random_normal(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>u_shape, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32, <span class=\"pl-v\">mean</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>, <span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span>init_std)\n    U <span class=\"pl-k\">=</span> tf.verify_tensor_all_finite(\n                tf.Variable(u_rnd,\n                            <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n                            <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>users<span class=\"pl-pds\">\"</span></span>,\n                            <span class=\"pl-v\">validate_shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>), <span class=\"pl-v\">msg</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>NaN or Inf in parameters<span class=\"pl-pds\">'</span></span>)\n\n    i_shape <span class=\"pl-k\">=</span> tf.stack([n_items, n_factors])\n    i_rnd <span class=\"pl-k\">=</span> tf.random_normal(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>i_shape,\n                                <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32,\n                                <span class=\"pl-v\">mean</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>,\n                                <span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span>init_std)\n    I <span class=\"pl-k\">=</span> tf.verify_tensor_all_finite(\n                tf.Variable(i_rnd,\n                            <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n                            <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>items<span class=\"pl-pds\">\"</span></span>,\n                            <span class=\"pl-v\">validate_shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>), <span class=\"pl-v\">msg</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>NaN or Inf in parameters<span class=\"pl-pds\">'</span></span>)\n\n    ub_shape <span class=\"pl-k\">=</span> tf.expand_dims(n_users, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>)\n    ub_rnd <span class=\"pl-k\">=</span> tf.random_normal(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32,\n                                 <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>ub_shape,\n                                 <span class=\"pl-v\">mean</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>,\n                                 <span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span>init_std)\n    u_bias <span class=\"pl-k\">=</span> tf.verify_tensor_all_finite(\n                    tf.Variable(ub_rnd,\n                                <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n                                <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>u_bias<span class=\"pl-pds\">'</span></span>,\n                                <span class=\"pl-v\">validate_shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>), <span class=\"pl-v\">msg</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>NaN or Inf in parameters<span class=\"pl-pds\">'</span></span>)\n\n    ib_shape <span class=\"pl-k\">=</span> tf.expand_dims(n_items, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>)\n    ib_rnd <span class=\"pl-k\">=</span> tf.random_normal(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32,\n                                 <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>ib_shape,\n                                 <span class=\"pl-v\">mean</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">0</span>,\n                                 <span class=\"pl-v\">stddev</span><span class=\"pl-k\">=</span>init_std)\n    i_bias <span class=\"pl-k\">=</span> tf.verify_tensor_all_finite(\n                    tf.Variable(ib_rnd,\n                                <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n                                <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>i_bias<span class=\"pl-pds\">'</span></span>,\n                                <span class=\"pl-v\">validate_shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>), <span class=\"pl-v\">msg</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>NaN or Inf in parameters<span class=\"pl-pds\">'</span></span>)\n    g_bias <span class=\"pl-k\">=</span> tf.verify_tensor_all_finite(\n                    tf.Variable(<span class=\"pl-c1\">0</span>., \n                                <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32,\n                                <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>, \n                                <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>g_bias<span class=\"pl-pds\">'</span></span>), <span class=\"pl-v\">msg</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>NaN or Inf in parameters<span class=\"pl-pds\">'</span></span>)\n    users <span class=\"pl-k\">=</span> tf.nn.embedding_lookup(U, x[:, <span class=\"pl-c1\">0</span>])\n    items <span class=\"pl-k\">=</span> tf.nn.embedding_lookup(I, x[:, <span class=\"pl-c1\">1</span>])\n    \n    ub <span class=\"pl-k\">=</span> tf.expand_dims(tf.nn.embedding_lookup(u_bias, x[:, <span class=\"pl-c1\">0</span>]), <span class=\"pl-c1\">1</span>)\n    ib <span class=\"pl-k\">=</span> tf.expand_dims(tf.nn.embedding_lookup(i_bias, x[:, <span class=\"pl-c1\">1</span>]), <span class=\"pl-c1\">1</span>)\n    y_hat <span class=\"pl-k\">=</span> tf.reduce_sum(users <span class=\"pl-k\">*</span> items, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">keepdims</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>) <span class=\"pl-k\">+</span> ub <span class=\"pl-k\">+</span> ib <span class=\"pl-k\">+</span> g_bias\n    \n    loss <span class=\"pl-k\">=</span> tf.square(tf.expand_dims(y, <span class=\"pl-c1\">1</span>) <span class=\"pl-k\">-</span> tf.sigmoid(y_hat))\n    reduced_loss <span class=\"pl-k\">=</span> tf.reduce_mean(loss, <span class=\"pl-v\">keepdims</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n    reg_u <span class=\"pl-k\">=</span> l2_u <span class=\"pl-k\">*</span> tf.nn.l2_loss(U)\n    reg_i <span class=\"pl-k\">=</span> l2_i <span class=\"pl-k\">*</span> tf.nn.l2_loss(I)\n    reg <span class=\"pl-k\">=</span> reg_i <span class=\"pl-k\">+</span> reg_u\n    target <span class=\"pl-k\">=</span> reg <span class=\"pl-k\">+</span> reduced_loss\n    checked_target <span class=\"pl-k\">=</span> tf.verify_tensor_all_finite(target, \n                                                 <span class=\"pl-v\">msg</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>NaN or Inf in target value<span class=\"pl-pds\">'</span></span>,\n                                                 <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>target<span class=\"pl-pds\">'</span></span>)\n    trainer <span class=\"pl-k\">=</span> tf.train.GradientDescentOptimizer(<span class=\"pl-v\">learning_rate</span><span class=\"pl-k\">=</span>lr).minimize(checked_target)\n    <span class=\"pl-k\">return</span> trainer, n_users, n_items, x, y\n\n<span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/job:localhost/replica:0/task:0/device:CPU:0<span class=\"pl-pds\">'</span></span>):\n    op, n_users, n_items, x, y <span class=\"pl-k\">=</span> define_graph()\n\ninit <span class=\"pl-k\">=</span> tf.global_variables_initializer()\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run(init, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{n_users: np_users, n_items: np_items})\n\nsess.run(op, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x: train_x, y: train_y})</pre></div>\n<p>Error logs:</p>\n<div class=\"highlight highlight-source-shell\"><pre>InvalidArgumentError: Input to reshape is a tensor with 1 values, but the requested shape has 0\n\t [[Node: gradients/Mean_grad/Reshape <span class=\"pl-k\">=</span> Reshape[T<span class=\"pl-k\">=</span>DT_FLOAT, Tshape<span class=\"pl-k\">=</span>DT_INT32, _device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:localhost/replica:0/task:0/device:GPU:0<span class=\"pl-pds\">\"</span></span>](gradients/add_4_grad/Reshape_1, gradients/Mean_grad/DynamicStitch/_47, ^gradients/add_4_grad/tuple/group_deps)]]\n\nCaused by op <span class=\"pl-s\"><span class=\"pl-pds\">'</span>gradients/Mean_grad/Reshape<span class=\"pl-pds\">'</span></span>, defined at:\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\runpy.py<span class=\"pl-pds\">\"</span></span>, line 193, <span class=\"pl-k\">in</span> _run_module_as_main\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>__main__<span class=\"pl-pds\">\"</span></span>, mod_spec)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\runpy.py<span class=\"pl-pds\">\"</span></span>, line 85, <span class=\"pl-k\">in</span> _run_code\n    exec(code, run_globals)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\__main__.py<span class=\"pl-pds\">\"</span></span>, line 3, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n    <span class=\"pl-en\">app.launch_new_instance</span>()\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\traitlets\\config\\application.py<span class=\"pl-pds\">\"</span></span>, line 658, <span class=\"pl-k\">in</span> launch_instance\n    <span class=\"pl-en\">app.start</span>()\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\kernelapp.py<span class=\"pl-pds\">\"</span></span>, line 486, <span class=\"pl-k\">in</span> start\n    <span class=\"pl-en\">self.io_loop.start</span>()\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tornado\\platform\\asyncio.py<span class=\"pl-pds\">\"</span></span>, line 127, <span class=\"pl-k\">in</span> start\n    <span class=\"pl-en\">self.asyncio_loop.run_forever</span>()\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\asyncio\\base_events.py<span class=\"pl-pds\">\"</span></span>, line 422, <span class=\"pl-k\">in</span> run_forever\n    <span class=\"pl-en\">self._run_once</span>()\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\asyncio\\base_events.py<span class=\"pl-pds\">\"</span></span>, line 1434, <span class=\"pl-k\">in</span> _run_once\n    <span class=\"pl-en\">handle._run</span>()\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\asyncio\\events.py<span class=\"pl-pds\">\"</span></span>, line 145, <span class=\"pl-k\">in</span> _run\n    self._callback(<span class=\"pl-k\">*</span>self._args)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tornado\\platform\\asyncio.py<span class=\"pl-pds\">\"</span></span>, line 117, <span class=\"pl-k\">in</span> _handle_events\n    handler_func(fileobj, events)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tornado\\stack_context.py<span class=\"pl-pds\">\"</span></span>, line 276, <span class=\"pl-k\">in</span> null_wrapper\n    <span class=\"pl-k\">return</span> fn(<span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py<span class=\"pl-pds\">\"</span></span>, line 450, <span class=\"pl-k\">in</span> _handle_events\n    <span class=\"pl-en\">self._handle_recv</span>()\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py<span class=\"pl-pds\">\"</span></span>, line 480, <span class=\"pl-k\">in</span> _handle_recv\n    self._run_callback(callback, msg)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py<span class=\"pl-pds\">\"</span></span>, line 432, <span class=\"pl-k\">in</span> _run_callback\n    callback(<span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tornado\\stack_context.py<span class=\"pl-pds\">\"</span></span>, line 276, <span class=\"pl-k\">in</span> null_wrapper\n    <span class=\"pl-k\">return</span> fn(<span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\kernelbase.py<span class=\"pl-pds\">\"</span></span>, line 283, <span class=\"pl-k\">in</span> dispatcher\n    <span class=\"pl-k\">return</span> self.dispatch_shell(stream, msg)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\kernelbase.py<span class=\"pl-pds\">\"</span></span>, line 233, <span class=\"pl-k\">in</span> dispatch_shell\n    handler(stream, idents, msg)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\kernelbase.py<span class=\"pl-pds\">\"</span></span>, line 399, <span class=\"pl-k\">in</span> execute_request\n    user_expressions, allow_stdin)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\ipkernel.py<span class=\"pl-pds\">\"</span></span>, line 208, <span class=\"pl-k\">in</span> do_execute\n    res = shell.run_cell(code, store_history=store_history, silent=silent)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\zmqshell.py<span class=\"pl-pds\">\"</span></span>, line 537, <span class=\"pl-k\">in</span> run_cell\n    <span class=\"pl-k\">return</span> super(ZMQInteractiveShell, self).run_cell(<span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\IPython\\core\\interactiveshell.py<span class=\"pl-pds\">\"</span></span>, line 2662, <span class=\"pl-k\">in</span> run_cell\n    raw_cell, store_history, silent, shell_futures)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\IPython\\core\\interactiveshell.py<span class=\"pl-pds\">\"</span></span>, line 2785, <span class=\"pl-k\">in</span> _run_cell\n    interactivity=interactivity, compiler=compiler, result=result)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\IPython\\core\\interactiveshell.py<span class=\"pl-pds\">\"</span></span>, line 2903, <span class=\"pl-k\">in</span> run_ast_nodes\n    <span class=\"pl-k\">if</span> self.run_code(code, result):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\IPython\\core\\interactiveshell.py<span class=\"pl-pds\">\"</span></span>, line 2963, <span class=\"pl-k\">in</span> run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;ipython-input-210-ae7fb3e220df&gt;<span class=\"pl-pds\">\"</span></span>, line 2, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n    op, n_users, n_items, x, y = <span class=\"pl-en\">define_graph</span>()\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;ipython-input-209-8e2c9c7479df&gt;<span class=\"pl-pds\">\"</span></span>, line 72, <span class=\"pl-k\">in</span> define_graph\n    trainer = tf.train.GradientDescentOptimizer(learning_rate=lr).minimize(checked_target)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\training\\optimizer.py<span class=\"pl-pds\">\"</span></span>, line 414, <span class=\"pl-k\">in</span> minimize\n    grad_loss=grad_loss)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\training\\optimizer.py<span class=\"pl-pds\">\"</span></span>, line 526, <span class=\"pl-k\">in</span> compute_gradients\n    colocate_gradients_with_ops=colocate_gradients_with_ops)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gradients_impl.py<span class=\"pl-pds\">\"</span></span>, line 494, <span class=\"pl-k\">in</span> gradients\n    gate_gradients, aggregation_method, stop_gradients)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gradients_impl.py<span class=\"pl-pds\">\"</span></span>, line 636, <span class=\"pl-k\">in</span> _GradientsHelper\n    lambda: grad_fn(op, <span class=\"pl-k\">*</span>out_grads))\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gradients_impl.py<span class=\"pl-pds\">\"</span></span>, line 385, <span class=\"pl-k\">in</span> _MaybeCompile\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">grad_fn</span>()  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Exit early</span>\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gradients_impl.py<span class=\"pl-pds\">\"</span></span>, line 636, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>lambda<span class=\"pl-k\">&gt;</span>\n    lambda: grad_fn(op, <span class=\"pl-k\">*</span>out_grads))\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\math_grad.py<span class=\"pl-pds\">\"</span></span>, line 119, <span class=\"pl-k\">in</span> _MeanGrad\n    sum_grad = _SumGrad(op, grad)[0]\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\math_grad.py<span class=\"pl-pds\">\"</span></span>, line 83, <span class=\"pl-k\">in</span> _SumGrad\n    grad = array_ops.reshape(grad, output_shape_kept_dims)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gen_array_ops.py<span class=\"pl-pds\">\"</span></span>, line 6112, <span class=\"pl-k\">in</span> reshape\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Reshape<span class=\"pl-pds\">\"</span></span>, tensor=tensor, shape=shape, name=name)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py<span class=\"pl-pds\">\"</span></span>, line 787, <span class=\"pl-k\">in</span> _apply_op_helper\n    op_def=op_def)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py<span class=\"pl-pds\">\"</span></span>, line 3392, <span class=\"pl-k\">in</span> create_op\n    op_def=op_def)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py<span class=\"pl-pds\">\"</span></span>, line 1718, <span class=\"pl-k\">in</span> __init__\n    self._traceback = <span class=\"pl-en\">self._graph._extract_stack</span>()  <span class=\"pl-c\"><span class=\"pl-c\">#</span> pylint: disable=protected-access</span>\n\n...which was originally created as op <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Mean<span class=\"pl-pds\">'</span></span>, defined at:\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\runpy.py<span class=\"pl-pds\">\"</span></span>, line 193, <span class=\"pl-k\">in</span> _run_module_as_main\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>__main__<span class=\"pl-pds\">\"</span></span>, mod_spec)\n[elided 23 identical lines from previous traceback]\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;ipython-input-210-ae7fb3e220df&gt;<span class=\"pl-pds\">\"</span></span>, line 2, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n    op, n_users, n_items, x, y = <span class=\"pl-en\">define_graph</span>()\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;ipython-input-209-8e2c9c7479df&gt;<span class=\"pl-pds\">\"</span></span>, line 64, <span class=\"pl-k\">in</span> define_graph\n    reduced_loss = tf.reduce_mean(loss, keepdims=True)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\util\\deprecation.py<span class=\"pl-pds\">\"</span></span>, line 432, <span class=\"pl-k\">in</span> new_func\n    <span class=\"pl-k\">return</span> func(<span class=\"pl-k\">*</span>args, <span class=\"pl-k\">**</span>kwargs)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\math_ops.py<span class=\"pl-pds\">\"</span></span>, line 1562, <span class=\"pl-k\">in</span> reduce_mean\n    name=name))\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gen_math_ops.py<span class=\"pl-pds\">\"</span></span>, line 4495, <span class=\"pl-k\">in</span> mean\n    name=name)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py<span class=\"pl-pds\">\"</span></span>, line 787, <span class=\"pl-k\">in</span> _apply_op_helper\n    op_def=op_def)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py<span class=\"pl-pds\">\"</span></span>, line 3392, <span class=\"pl-k\">in</span> create_op\n    op_def=op_def)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py<span class=\"pl-pds\">\"</span></span>, line 1718, <span class=\"pl-k\">in</span> __init__\n    self._traceback = <span class=\"pl-en\">self._graph._extract_stack</span>()  <span class=\"pl-c\"><span class=\"pl-c\">#</span> pylint: disable=protected-access</span>\n\nInvalidArgumentError (see above <span class=\"pl-k\">for</span> traceback): Input to reshape is a tensor with 1 values, but the requested shape has 0\n\t [[Node: gradients/Mean_grad/Reshape <span class=\"pl-k\">=</span> Reshape[T<span class=\"pl-k\">=</span>DT_FLOAT, Tshape<span class=\"pl-k\">=</span>DT_INT32, _device<span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:localhost/replica:0/task:0/device:GPU:0<span class=\"pl-pds\">\"</span></span>](gradients/add_4_grad/Reshape_1, gradients/Mean_grad/DynamicStitch/_47, ^gradients/add_4_grad/tuple/group_deps)]]</pre></div>", "body_text": "System information\n\nCustom code:\nOS Platform and Distribution: Windows 7 x64\nTensorFlow installed from: Anaconda\nBazel version: N/A\nTensorflow version 1.8.0:\npython 3.6.0 :\nMobile device: N/A\nExact command to reproduce: N/A\nGPU model and memory: NVIDIA QUADRO K1100M\nCUDA/cuDNN: 9.0.176/7.0\n\nThe Problem\nI strongly believe there's a problem with the gradient computation.\nimport tensorflow as tf\nimport numpy as np\n\nl2_u = 0.\nl2_i = 0.\ninit_std = 0.1\nnp_users = np.int64(100)\nnp_items = np.int64(100)\nn_factors = np.int64(10)\nlr = 0.1\n\ntrain_x = np.stack([np.random.randint(np_users, size=1000), np.random.randint(np_items, size=1000)], axis=1)\ntrain_y = np.random.randint(2, size=1000)\n\ndef define_graph():\n    tf.reset_default_graph()\n    n_users = tf.placeholder(dtype=tf.int32, shape=[], name='n_users')\n    n_items = tf.placeholder(dtype=tf.int32, shape=[], name='n_items')\n    x = tf.placeholder(shape=[None, 2], dtype=tf.int32, name=\"x\")\n    y = tf.placeholder(shape=[None], dtype=tf.float32, name=\"y\")\n    w = tf.placeholder(tf.float32, shape=[None], name='sample_weights')\n    reg_u = tf.constant(l2_u, dtype=tf.float32, name='lambda_u')\n    reg_i = tf.constant(l2_i, dtype=tf.float32, name='lambda_i')\n\n    u_shape = tf.stack([n_users, n_factors])\n    u_rnd = tf.random_normal(shape=u_shape, dtype=tf.float32, mean=0, stddev=init_std)\n    U = tf.verify_tensor_all_finite(\n                tf.Variable(u_rnd,\n                            trainable=True,\n                            name=\"users\",\n                            validate_shape=False), msg='NaN or Inf in parameters')\n\n    i_shape = tf.stack([n_items, n_factors])\n    i_rnd = tf.random_normal(shape=i_shape,\n                                dtype=tf.float32,\n                                mean=0,\n                                stddev=init_std)\n    I = tf.verify_tensor_all_finite(\n                tf.Variable(i_rnd,\n                            trainable=True,\n                            name=\"items\",\n                            validate_shape=False), msg='NaN or Inf in parameters')\n\n    ub_shape = tf.expand_dims(n_users, axis=0)\n    ub_rnd = tf.random_normal(dtype=tf.float32,\n                                 shape=ub_shape,\n                                 mean=0,\n                                 stddev=init_std)\n    u_bias = tf.verify_tensor_all_finite(\n                    tf.Variable(ub_rnd,\n                                trainable=True,\n                                name='u_bias',\n                                validate_shape=False), msg='NaN or Inf in parameters')\n\n    ib_shape = tf.expand_dims(n_items, axis=0)\n    ib_rnd = tf.random_normal(dtype=tf.float32,\n                                 shape=ib_shape,\n                                 mean=0,\n                                 stddev=init_std)\n    i_bias = tf.verify_tensor_all_finite(\n                    tf.Variable(ib_rnd,\n                                trainable=True,\n                                name='i_bias',\n                                validate_shape=False), msg='NaN or Inf in parameters')\n    g_bias = tf.verify_tensor_all_finite(\n                    tf.Variable(0., \n                                dtype=tf.float32,\n                                trainable=True, \n                                name='g_bias'), msg='NaN or Inf in parameters')\n    users = tf.nn.embedding_lookup(U, x[:, 0])\n    items = tf.nn.embedding_lookup(I, x[:, 1])\n    \n    ub = tf.expand_dims(tf.nn.embedding_lookup(u_bias, x[:, 0]), 1)\n    ib = tf.expand_dims(tf.nn.embedding_lookup(i_bias, x[:, 1]), 1)\n    y_hat = tf.reduce_sum(users * items, axis=1, keepdims=True) + ub + ib + g_bias\n    \n    loss = tf.square(tf.expand_dims(y, 1) - tf.sigmoid(y_hat))\n    reduced_loss = tf.reduce_mean(loss, keepdims=True)\n    reg_u = l2_u * tf.nn.l2_loss(U)\n    reg_i = l2_i * tf.nn.l2_loss(I)\n    reg = reg_i + reg_u\n    target = reg + reduced_loss\n    checked_target = tf.verify_tensor_all_finite(target, \n                                                 msg='NaN or Inf in target value',\n                                                 name='target')\n    trainer = tf.train.GradientDescentOptimizer(learning_rate=lr).minimize(checked_target)\n    return trainer, n_users, n_items, x, y\n\nwith tf.device('/job:localhost/replica:0/task:0/device:CPU:0'):\n    op, n_users, n_items, x, y = define_graph()\n\ninit = tf.global_variables_initializer()\nsess = tf.Session()\nsess.run(init, feed_dict={n_users: np_users, n_items: np_items})\n\nsess.run(op, feed_dict={x: train_x, y: train_y})\nError logs:\nInvalidArgumentError: Input to reshape is a tensor with 1 values, but the requested shape has 0\n\t [[Node: gradients/Mean_grad/Reshape = Reshape[T=DT_FLOAT, Tshape=DT_INT32, _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"](gradients/add_4_grad/Reshape_1, gradients/Mean_grad/DynamicStitch/_47, ^gradients/add_4_grad/tuple/group_deps)]]\n\nCaused by op 'gradients/Mean_grad/Reshape', defined at:\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\runpy.py\", line 193, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\__main__.py\", line 3, in <module>\n    app.launch_new_instance()\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\traitlets\\config\\application.py\", line 658, in launch_instance\n    app.start()\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\kernelapp.py\", line 486, in start\n    self.io_loop.start()\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tornado\\platform\\asyncio.py\", line 127, in start\n    self.asyncio_loop.run_forever()\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\asyncio\\base_events.py\", line 422, in run_forever\n    self._run_once()\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\asyncio\\base_events.py\", line 1434, in _run_once\n    handle._run()\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\asyncio\\events.py\", line 145, in _run\n    self._callback(*self._args)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tornado\\platform\\asyncio.py\", line 117, in _handle_events\n    handler_func(fileobj, events)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tornado\\stack_context.py\", line 276, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 450, in _handle_events\n    self._handle_recv()\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 480, in _handle_recv\n    self._run_callback(callback, msg)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 432, in _run_callback\n    callback(*args, **kwargs)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tornado\\stack_context.py\", line 276, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 283, in dispatcher\n    return self.dispatch_shell(stream, msg)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 233, in dispatch_shell\n    handler(stream, idents, msg)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 399, in execute_request\n    user_expressions, allow_stdin)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\ipkernel.py\", line 208, in do_execute\n    res = shell.run_cell(code, store_history=store_history, silent=silent)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\zmqshell.py\", line 537, in run_cell\n    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2662, in run_cell\n    raw_cell, store_history, silent, shell_futures)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2785, in _run_cell\n    interactivity=interactivity, compiler=compiler, result=result)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2903, in run_ast_nodes\n    if self.run_code(code, result):\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2963, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"<ipython-input-210-ae7fb3e220df>\", line 2, in <module>\n    op, n_users, n_items, x, y = define_graph()\n  File \"<ipython-input-209-8e2c9c7479df>\", line 72, in define_graph\n    trainer = tf.train.GradientDescentOptimizer(learning_rate=lr).minimize(checked_target)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\training\\optimizer.py\", line 414, in minimize\n    grad_loss=grad_loss)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\training\\optimizer.py\", line 526, in compute_gradients\n    colocate_gradients_with_ops=colocate_gradients_with_ops)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gradients_impl.py\", line 494, in gradients\n    gate_gradients, aggregation_method, stop_gradients)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gradients_impl.py\", line 636, in _GradientsHelper\n    lambda: grad_fn(op, *out_grads))\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gradients_impl.py\", line 385, in _MaybeCompile\n    return grad_fn()  # Exit early\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gradients_impl.py\", line 636, in <lambda>\n    lambda: grad_fn(op, *out_grads))\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\math_grad.py\", line 119, in _MeanGrad\n    sum_grad = _SumGrad(op, grad)[0]\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\math_grad.py\", line 83, in _SumGrad\n    grad = array_ops.reshape(grad, output_shape_kept_dims)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gen_array_ops.py\", line 6112, in reshape\n    \"Reshape\", tensor=tensor, shape=shape, name=name)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py\", line 787, in _apply_op_helper\n    op_def=op_def)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 3392, in create_op\n    op_def=op_def)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 1718, in __init__\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\n\n...which was originally created as op 'Mean', defined at:\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\runpy.py\", line 193, in _run_module_as_main\n    \"__main__\", mod_spec)\n[elided 23 identical lines from previous traceback]\n  File \"<ipython-input-210-ae7fb3e220df>\", line 2, in <module>\n    op, n_users, n_items, x, y = define_graph()\n  File \"<ipython-input-209-8e2c9c7479df>\", line 64, in define_graph\n    reduced_loss = tf.reduce_mean(loss, keepdims=True)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\util\\deprecation.py\", line 432, in new_func\n    return func(*args, **kwargs)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\math_ops.py\", line 1562, in reduce_mean\n    name=name))\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gen_math_ops.py\", line 4495, in mean\n    name=name)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py\", line 787, in _apply_op_helper\n    op_def=op_def)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 3392, in create_op\n    op_def=op_def)\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 1718, in __init__\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\n\nInvalidArgumentError (see above for traceback): Input to reshape is a tensor with 1 values, but the requested shape has 0\n\t [[Node: gradients/Mean_grad/Reshape = Reshape[T=DT_FLOAT, Tshape=DT_INT32, _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"](gradients/add_4_grad/Reshape_1, gradients/Mean_grad/DynamicStitch/_47, ^gradients/add_4_grad/tuple/group_deps)]]", "body": "### System information\r\n- Custom code:\r\n- OS Platform and Distribution: Windows 7 x64\r\n- TensorFlow installed from: Anaconda\r\n- Bazel version: N/A\r\n- Tensorflow version 1.8.0:\r\n- python 3.6.0 :\r\n- Mobile device: N/A\r\n- Exact command to reproduce: N/A\r\n- GPU model and memory: NVIDIA QUADRO K1100M\r\n- CUDA/cuDNN: 9.0.176/7.0\r\n\r\n### The Problem\r\n\r\nI strongly believe there's a problem with the gradient computation. \r\n\r\n\r\n``````python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\nl2_u = 0.\r\nl2_i = 0.\r\ninit_std = 0.1\r\nnp_users = np.int64(100)\r\nnp_items = np.int64(100)\r\nn_factors = np.int64(10)\r\nlr = 0.1\r\n\r\ntrain_x = np.stack([np.random.randint(np_users, size=1000), np.random.randint(np_items, size=1000)], axis=1)\r\ntrain_y = np.random.randint(2, size=1000)\r\n\r\ndef define_graph():\r\n    tf.reset_default_graph()\r\n    n_users = tf.placeholder(dtype=tf.int32, shape=[], name='n_users')\r\n    n_items = tf.placeholder(dtype=tf.int32, shape=[], name='n_items')\r\n    x = tf.placeholder(shape=[None, 2], dtype=tf.int32, name=\"x\")\r\n    y = tf.placeholder(shape=[None], dtype=tf.float32, name=\"y\")\r\n    w = tf.placeholder(tf.float32, shape=[None], name='sample_weights')\r\n    reg_u = tf.constant(l2_u, dtype=tf.float32, name='lambda_u')\r\n    reg_i = tf.constant(l2_i, dtype=tf.float32, name='lambda_i')\r\n\r\n    u_shape = tf.stack([n_users, n_factors])\r\n    u_rnd = tf.random_normal(shape=u_shape, dtype=tf.float32, mean=0, stddev=init_std)\r\n    U = tf.verify_tensor_all_finite(\r\n                tf.Variable(u_rnd,\r\n                            trainable=True,\r\n                            name=\"users\",\r\n                            validate_shape=False), msg='NaN or Inf in parameters')\r\n\r\n    i_shape = tf.stack([n_items, n_factors])\r\n    i_rnd = tf.random_normal(shape=i_shape,\r\n                                dtype=tf.float32,\r\n                                mean=0,\r\n                                stddev=init_std)\r\n    I = tf.verify_tensor_all_finite(\r\n                tf.Variable(i_rnd,\r\n                            trainable=True,\r\n                            name=\"items\",\r\n                            validate_shape=False), msg='NaN or Inf in parameters')\r\n\r\n    ub_shape = tf.expand_dims(n_users, axis=0)\r\n    ub_rnd = tf.random_normal(dtype=tf.float32,\r\n                                 shape=ub_shape,\r\n                                 mean=0,\r\n                                 stddev=init_std)\r\n    u_bias = tf.verify_tensor_all_finite(\r\n                    tf.Variable(ub_rnd,\r\n                                trainable=True,\r\n                                name='u_bias',\r\n                                validate_shape=False), msg='NaN or Inf in parameters')\r\n\r\n    ib_shape = tf.expand_dims(n_items, axis=0)\r\n    ib_rnd = tf.random_normal(dtype=tf.float32,\r\n                                 shape=ib_shape,\r\n                                 mean=0,\r\n                                 stddev=init_std)\r\n    i_bias = tf.verify_tensor_all_finite(\r\n                    tf.Variable(ib_rnd,\r\n                                trainable=True,\r\n                                name='i_bias',\r\n                                validate_shape=False), msg='NaN or Inf in parameters')\r\n    g_bias = tf.verify_tensor_all_finite(\r\n                    tf.Variable(0., \r\n                                dtype=tf.float32,\r\n                                trainable=True, \r\n                                name='g_bias'), msg='NaN or Inf in parameters')\r\n    users = tf.nn.embedding_lookup(U, x[:, 0])\r\n    items = tf.nn.embedding_lookup(I, x[:, 1])\r\n    \r\n    ub = tf.expand_dims(tf.nn.embedding_lookup(u_bias, x[:, 0]), 1)\r\n    ib = tf.expand_dims(tf.nn.embedding_lookup(i_bias, x[:, 1]), 1)\r\n    y_hat = tf.reduce_sum(users * items, axis=1, keepdims=True) + ub + ib + g_bias\r\n    \r\n    loss = tf.square(tf.expand_dims(y, 1) - tf.sigmoid(y_hat))\r\n    reduced_loss = tf.reduce_mean(loss, keepdims=True)\r\n    reg_u = l2_u * tf.nn.l2_loss(U)\r\n    reg_i = l2_i * tf.nn.l2_loss(I)\r\n    reg = reg_i + reg_u\r\n    target = reg + reduced_loss\r\n    checked_target = tf.verify_tensor_all_finite(target, \r\n                                                 msg='NaN or Inf in target value',\r\n                                                 name='target')\r\n    trainer = tf.train.GradientDescentOptimizer(learning_rate=lr).minimize(checked_target)\r\n    return trainer, n_users, n_items, x, y\r\n\r\nwith tf.device('/job:localhost/replica:0/task:0/device:CPU:0'):\r\n    op, n_users, n_items, x, y = define_graph()\r\n\r\ninit = tf.global_variables_initializer()\r\nsess = tf.Session()\r\nsess.run(init, feed_dict={n_users: np_users, n_items: np_items})\r\n\r\nsess.run(op, feed_dict={x: train_x, y: train_y})\r\n``````\r\nError logs:\r\n\r\n``````bash\r\nInvalidArgumentError: Input to reshape is a tensor with 1 values, but the requested shape has 0\r\n\t [[Node: gradients/Mean_grad/Reshape = Reshape[T=DT_FLOAT, Tshape=DT_INT32, _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"](gradients/add_4_grad/Reshape_1, gradients/Mean_grad/DynamicStitch/_47, ^gradients/add_4_grad/tuple/group_deps)]]\r\n\r\nCaused by op 'gradients/Mean_grad/Reshape', defined at:\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\__main__.py\", line 3, in <module>\r\n    app.launch_new_instance()\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\traitlets\\config\\application.py\", line 658, in launch_instance\r\n    app.start()\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\kernelapp.py\", line 486, in start\r\n    self.io_loop.start()\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tornado\\platform\\asyncio.py\", line 127, in start\r\n    self.asyncio_loop.run_forever()\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\asyncio\\base_events.py\", line 422, in run_forever\r\n    self._run_once()\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\asyncio\\base_events.py\", line 1434, in _run_once\r\n    handle._run()\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\asyncio\\events.py\", line 145, in _run\r\n    self._callback(*self._args)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tornado\\platform\\asyncio.py\", line 117, in _handle_events\r\n    handler_func(fileobj, events)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tornado\\stack_context.py\", line 276, in null_wrapper\r\n    return fn(*args, **kwargs)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 450, in _handle_events\r\n    self._handle_recv()\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 480, in _handle_recv\r\n    self._run_callback(callback, msg)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\zmq\\eventloop\\zmqstream.py\", line 432, in _run_callback\r\n    callback(*args, **kwargs)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tornado\\stack_context.py\", line 276, in null_wrapper\r\n    return fn(*args, **kwargs)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 283, in dispatcher\r\n    return self.dispatch_shell(stream, msg)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 233, in dispatch_shell\r\n    handler(stream, idents, msg)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 399, in execute_request\r\n    user_expressions, allow_stdin)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\ipkernel.py\", line 208, in do_execute\r\n    res = shell.run_cell(code, store_history=store_history, silent=silent)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\ipykernel\\zmqshell.py\", line 537, in run_cell\r\n    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2662, in run_cell\r\n    raw_cell, store_history, silent, shell_futures)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2785, in _run_cell\r\n    interactivity=interactivity, compiler=compiler, result=result)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2903, in run_ast_nodes\r\n    if self.run_code(code, result):\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2963, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-210-ae7fb3e220df>\", line 2, in <module>\r\n    op, n_users, n_items, x, y = define_graph()\r\n  File \"<ipython-input-209-8e2c9c7479df>\", line 72, in define_graph\r\n    trainer = tf.train.GradientDescentOptimizer(learning_rate=lr).minimize(checked_target)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\training\\optimizer.py\", line 414, in minimize\r\n    grad_loss=grad_loss)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\training\\optimizer.py\", line 526, in compute_gradients\r\n    colocate_gradients_with_ops=colocate_gradients_with_ops)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gradients_impl.py\", line 494, in gradients\r\n    gate_gradients, aggregation_method, stop_gradients)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gradients_impl.py\", line 636, in _GradientsHelper\r\n    lambda: grad_fn(op, *out_grads))\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gradients_impl.py\", line 385, in _MaybeCompile\r\n    return grad_fn()  # Exit early\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gradients_impl.py\", line 636, in <lambda>\r\n    lambda: grad_fn(op, *out_grads))\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\math_grad.py\", line 119, in _MeanGrad\r\n    sum_grad = _SumGrad(op, grad)[0]\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\math_grad.py\", line 83, in _SumGrad\r\n    grad = array_ops.reshape(grad, output_shape_kept_dims)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gen_array_ops.py\", line 6112, in reshape\r\n    \"Reshape\", tensor=tensor, shape=shape, name=name)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py\", line 787, in _apply_op_helper\r\n    op_def=op_def)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 3392, in create_op\r\n    op_def=op_def)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 1718, in __init__\r\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\r\n\r\n...which was originally created as op 'Mean', defined at:\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n[elided 23 identical lines from previous traceback]\r\n  File \"<ipython-input-210-ae7fb3e220df>\", line 2, in <module>\r\n    op, n_users, n_items, x, y = define_graph()\r\n  File \"<ipython-input-209-8e2c9c7479df>\", line 64, in define_graph\r\n    reduced_loss = tf.reduce_mean(loss, keepdims=True)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\util\\deprecation.py\", line 432, in new_func\r\n    return func(*args, **kwargs)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\math_ops.py\", line 1562, in reduce_mean\r\n    name=name))\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\ops\\gen_math_ops.py\", line 4495, in mean\r\n    name=name)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py\", line 787, in _apply_op_helper\r\n    op_def=op_def)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 3392, in create_op\r\n    op_def=op_def)\r\n  File \"C:\\Users\\Daniel\\Anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 1718, in __init__\r\n    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-access\r\n\r\nInvalidArgumentError (see above for traceback): Input to reshape is a tensor with 1 values, but the requested shape has 0\r\n\t [[Node: gradients/Mean_grad/Reshape = Reshape[T=DT_FLOAT, Tshape=DT_INT32, _device=\"/job:localhost/replica:0/task:0/device:GPU:0\"](gradients/add_4_grad/Reshape_1, gradients/Mean_grad/DynamicStitch/_47, ^gradients/add_4_grad/tuple/group_deps)]]\r\n``````"}