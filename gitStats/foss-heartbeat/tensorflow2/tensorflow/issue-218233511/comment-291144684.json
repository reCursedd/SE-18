{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/291144684", "html_url": "https://github.com/tensorflow/tensorflow/issues/8842#issuecomment-291144684", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8842", "id": 291144684, "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTE0NDY4NA==", "user": {"login": "jamieas", "id": 25069093, "node_id": "MDQ6VXNlcjI1MDY5MDkz", "avatar_url": "https://avatars0.githubusercontent.com/u/25069093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamieas", "html_url": "https://github.com/jamieas", "followers_url": "https://api.github.com/users/jamieas/followers", "following_url": "https://api.github.com/users/jamieas/following{/other_user}", "gists_url": "https://api.github.com/users/jamieas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamieas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamieas/subscriptions", "organizations_url": "https://api.github.com/users/jamieas/orgs", "repos_url": "https://api.github.com/users/jamieas/repos", "events_url": "https://api.github.com/users/jamieas/events{/privacy}", "received_events_url": "https://api.github.com/users/jamieas/received_events", "type": "User", "site_admin": false}, "created_at": "2017-04-03T13:36:22Z", "updated_at": "2017-04-03T13:36:22Z", "author_association": "NONE", "body_html": "<p>The relevant part of that trace is</p>\n<blockquote>\n<p>Error while processing column .Rank of input Tensor (1) should be the same as output_rank (3). For example, sequence data should typically be 3 dimensional (rank 3) while non-sequence data is typically 2 dimensional (rank 2).</p>\n</blockquote>\n<p>Sequence input should generally have rank 3, where the first two dimensions are batch size and sequence length. In the following example, the (not very useful) Estimator learns to predict the mean of a sequence:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c1\">BATCH_SIZE</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">32</span>\n<span class=\"pl-c1\">SEQUENCE_LENGTH</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">16</span>\n    \n\nxc <span class=\"pl-k\">=</span> tf.contrib.layers.real_valued_column(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)\nestimator <span class=\"pl-k\">=</span> tf.contrib.learn.DynamicRnnEstimator(<span class=\"pl-v\">problem_type</span> <span class=\"pl-k\">=</span> constants.ProblemType.<span class=\"pl-c1\">LINEAR_REGRESSION</span>,\n                                                 <span class=\"pl-v\">prediction_type</span> <span class=\"pl-k\">=</span> PredictionType.<span class=\"pl-c1\">SINGLE_VALUE</span>,\n                                                 <span class=\"pl-v\">sequence_feature_columns</span> <span class=\"pl-k\">=</span> [xc],\n                                                 <span class=\"pl-v\">context_feature_columns</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span>,\n                                                 <span class=\"pl-v\">num_units</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5</span>,\n                                                 <span class=\"pl-v\">cell_type</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>lstm<span class=\"pl-pds\">'</span></span>, \n                                                 <span class=\"pl-v\">optimizer</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>SGD<span class=\"pl-pds\">'</span></span>,\n                                                 <span class=\"pl-v\">learning_rate</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.1</span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">get_train_inputs</span>():\n  x <span class=\"pl-k\">=</span> tf.random_uniform([<span class=\"pl-c1\">BATCH_SIZE</span>, <span class=\"pl-c1\">SEQUENCE_LENGTH</span>])\n  y <span class=\"pl-k\">=</span> tf.reduce_mean(x, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n  x <span class=\"pl-k\">=</span> tf.expand_dims(x, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>)\n  <span class=\"pl-k\">return</span> {<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>: x}, y\n\nestimator.fit(<span class=\"pl-v\">input_fn</span><span class=\"pl-k\">=</span>get_train_inputs, <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>)</pre></div>", "body_text": "The relevant part of that trace is\n\nError while processing column .Rank of input Tensor (1) should be the same as output_rank (3). For example, sequence data should typically be 3 dimensional (rank 3) while non-sequence data is typically 2 dimensional (rank 2).\n\nSequence input should generally have rank 3, where the first two dimensions are batch size and sequence length. In the following example, the (not very useful) Estimator learns to predict the mean of a sequence:\nBATCH_SIZE = 32\nSEQUENCE_LENGTH = 16\n    \n\nxc = tf.contrib.layers.real_valued_column(\"\")\nestimator = tf.contrib.learn.DynamicRnnEstimator(problem_type = constants.ProblemType.LINEAR_REGRESSION,\n                                                 prediction_type = PredictionType.SINGLE_VALUE,\n                                                 sequence_feature_columns = [xc],\n                                                 context_feature_columns = None,\n                                                 num_units = 5,\n                                                 cell_type = 'lstm', \n                                                 optimizer = 'SGD',\n                                                 learning_rate = 0.1)\n\ndef get_train_inputs():\n  x = tf.random_uniform([BATCH_SIZE, SEQUENCE_LENGTH])\n  y = tf.reduce_mean(x, axis=1)\n  x = tf.expand_dims(x, axis=2)\n  return {\"\": x}, y\n\nestimator.fit(input_fn=get_train_inputs, steps=1000)", "body": "The relevant part of that trace is\r\n\r\n> Error while processing column .Rank of input Tensor (1) should be the same as output_rank (3). For example, sequence data should typically be 3 dimensional (rank 3) while non-sequence data is typically 2 dimensional (rank 2).\r\n\r\nSequence input should generally have rank 3, where the first two dimensions are batch size and sequence length. In the following example, the (not very useful) Estimator learns to predict the mean of a sequence:\r\n\r\n```python\r\nBATCH_SIZE = 32\r\nSEQUENCE_LENGTH = 16\r\n    \r\n\r\nxc = tf.contrib.layers.real_valued_column(\"\")\r\nestimator = tf.contrib.learn.DynamicRnnEstimator(problem_type = constants.ProblemType.LINEAR_REGRESSION,\r\n                                                 prediction_type = PredictionType.SINGLE_VALUE,\r\n                                                 sequence_feature_columns = [xc],\r\n                                                 context_feature_columns = None,\r\n                                                 num_units = 5,\r\n                                                 cell_type = 'lstm', \r\n                                                 optimizer = 'SGD',\r\n                                                 learning_rate = 0.1)\r\n\r\ndef get_train_inputs():\r\n  x = tf.random_uniform([BATCH_SIZE, SEQUENCE_LENGTH])\r\n  y = tf.reduce_mean(x, axis=1)\r\n  x = tf.expand_dims(x, axis=2)\r\n  return {\"\": x}, y\r\n\r\nestimator.fit(input_fn=get_train_inputs, steps=1000)\r\n```"}