{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/315929729", "html_url": "https://github.com/tensorflow/tensorflow/issues/11552#issuecomment-315929729", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11552", "id": 315929729, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTkyOTcyOQ==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-18T01:16:26Z", "updated_at": "2017-07-18T01:16:26Z", "author_association": "MEMBER", "body_html": "<p>I think the documentation is correct, but any suggestions to improve it will be appreciated.</p>\n<p>RE: Problem 1: The documentation suggests that <code>record_defaults</code> must contain <code>One tensor per column of the input record</code>. So, it needs to match with the number of columns in the input. If it doesn't the op will fail. For example:</p>\n<div class=\"highlight highlight-source-python\"><pre>value <span class=\"pl-k\">=</span> tf.placeholder(tf.string)\nparsed <span class=\"pl-k\">=</span> tf.decode_csv(value, <span class=\"pl-v\">record_defaults</span><span class=\"pl-k\">=</span>[[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>]])\nrun <span class=\"pl-k\">=</span> tf.Session().make_callable(parsed, [value])\n\n<span class=\"pl-c1\">print</span>(run(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a<span class=\"pl-pds\">\"</span></span>)) <span class=\"pl-c\"><span class=\"pl-c\">#</span> Correctly \"decodes\" this single column CSV into string tensor</span>\n\n<span class=\"pl-c1\">print</span>(run(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a,b,c<span class=\"pl-pds\">\"</span></span>)) <span class=\"pl-c\"><span class=\"pl-c\">#</span> Will throw an exception saying  \"Expect 1 fields but have 2 in record 0\"</span></pre></div>\n<p>RE: Problem 2: An \"empty element\" means an empty tensor, i.e., a zero-element tensor with the expected type of the value of the column. Without any additional context information, TensorFlow interprets <code>[]</code> as a float32 tensor, just like say numpy does (well numpy typically uses float64):</p>\n<div class=\"highlight highlight-source-python\"><pre>tf.constant([]).dtype <span class=\"pl-c\"><span class=\"pl-c\">#</span> This will be tf.float32</span>\nnp.array([]).dtype    <span class=\"pl-c\"><span class=\"pl-c\">#</span> This will be np.float64</span></pre></div>\n<p>To explicitly provide a zero-element tensor of the correct type, e.g., int32, you could use <code>tf.constant([], tf.int32)</code> (and similarly in numpy <code>np.array([], np.int32)</code>).</p>\n<p>So, for your example, I'd do something like:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> value <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>a,b,c<span class=\"pl-pds\">\"</span></span>]\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> empty <span class=\"pl-k\">=</span> tf.constant([], tf.string)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> Or np.array([], np.string) </span>\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> parts_val <span class=\"pl-k\">=</span> tf.decode_csv(value, <span class=\"pl-v\">field_delim</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">record_defaults</span> <span class=\"pl-k\">=</span> [[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>], empty])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> parts_val\n[<span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>DecodeCSV:0<span class=\"pl-pds\">'</span></span> shape=(<span class=\"pl-c1\">1</span>,) dtype=string<span class=\"pl-k\">&gt;</span>,\n <span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>DecodeCSV:1<span class=\"pl-pds\">'</span></span> shape=(<span class=\"pl-c1\">1</span>,) dtype=string<span class=\"pl-k\">&gt;</span>]</pre></div>\n<p>Hope that helps. Since this is not a bug, I'm going to close this out.<br>\nIf you'd like to contribute suggestions to improve the documentation, we'd be more that happy to hear (or even better, feel free to send a PR editing the documentation <a href=\"https://github.com/tensorflow/tensorflow/blob/e85d3df/tensorflow/core/ops/parsing_ops.cc#L338\">here</a>)</p>\n<p>Hope that helps!</p>", "body_text": "I think the documentation is correct, but any suggestions to improve it will be appreciated.\nRE: Problem 1: The documentation suggests that record_defaults must contain One tensor per column of the input record. So, it needs to match with the number of columns in the input. If it doesn't the op will fail. For example:\nvalue = tf.placeholder(tf.string)\nparsed = tf.decode_csv(value, record_defaults=[[\"\"]])\nrun = tf.Session().make_callable(parsed, [value])\n\nprint(run(\"a\")) # Correctly \"decodes\" this single column CSV into string tensor\n\nprint(run(\"a,b,c\")) # Will throw an exception saying  \"Expect 1 fields but have 2 in record 0\"\nRE: Problem 2: An \"empty element\" means an empty tensor, i.e., a zero-element tensor with the expected type of the value of the column. Without any additional context information, TensorFlow interprets [] as a float32 tensor, just like say numpy does (well numpy typically uses float64):\ntf.constant([]).dtype # This will be tf.float32\nnp.array([]).dtype    # This will be np.float64\nTo explicitly provide a zero-element tensor of the correct type, e.g., int32, you could use tf.constant([], tf.int32) (and similarly in numpy np.array([], np.int32)).\nSo, for your example, I'd do something like:\n>>> value = [\"a,b,c\"]\n>>> empty = tf.constant([], tf.string)  # Or np.array([], np.string) \n>>> parts_val = tf.decode_csv(value, field_delim=\",\", record_defaults = [[\"\"], empty])\n>>> parts_val\n[<tf.Tensor 'DecodeCSV:0' shape=(1,) dtype=string>,\n <tf.Tensor 'DecodeCSV:1' shape=(1,) dtype=string>]\nHope that helps. Since this is not a bug, I'm going to close this out.\nIf you'd like to contribute suggestions to improve the documentation, we'd be more that happy to hear (or even better, feel free to send a PR editing the documentation here)\nHope that helps!", "body": "I think the documentation is correct, but any suggestions to improve it will be appreciated.\r\n\r\nRE: Problem 1: The documentation suggests that `record_defaults` must contain `One tensor per column of the input record`. So, it needs to match with the number of columns in the input. If it doesn't the op will fail. For example:\r\n\r\n```python\r\nvalue = tf.placeholder(tf.string)\r\nparsed = tf.decode_csv(value, record_defaults=[[\"\"]])\r\nrun = tf.Session().make_callable(parsed, [value])\r\n\r\nprint(run(\"a\")) # Correctly \"decodes\" this single column CSV into string tensor\r\n\r\nprint(run(\"a,b,c\")) # Will throw an exception saying  \"Expect 1 fields but have 2 in record 0\"\r\n```\r\n\r\nRE: Problem 2: An \"empty element\" means an empty tensor, i.e., a zero-element tensor with the expected type of the value of the column. Without any additional context information, TensorFlow interprets `[]` as a float32 tensor, just like say numpy does (well numpy typically uses float64):\r\n\r\n```python\r\ntf.constant([]).dtype # This will be tf.float32\r\nnp.array([]).dtype    # This will be np.float64\r\n```\r\n\r\nTo explicitly provide a zero-element tensor of the correct type, e.g., int32, you could use `tf.constant([], tf.int32)` (and similarly in numpy `np.array([], np.int32)`).\r\n\r\nSo, for your example, I'd do something like:\r\n\r\n```python\r\n>>> value = [\"a,b,c\"]\r\n>>> empty = tf.constant([], tf.string)  # Or np.array([], np.string) \r\n>>> parts_val = tf.decode_csv(value, field_delim=\",\", record_defaults = [[\"\"], empty])\r\n>>> parts_val\r\n[<tf.Tensor 'DecodeCSV:0' shape=(1,) dtype=string>,\r\n <tf.Tensor 'DecodeCSV:1' shape=(1,) dtype=string>]\r\n```\r\n\r\nHope that helps. Since this is not a bug, I'm going to close this out. \r\nIf you'd like to contribute suggestions to improve the documentation, we'd be more that happy to hear (or even better, feel free to send a PR editing the documentation [here](https://github.com/tensorflow/tensorflow/blob/e85d3df/tensorflow/core/ops/parsing_ops.cc#L338))\r\n\r\nHope that helps!"}