{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/235574496", "pull_request_review_id": 177471733, "id": 235574496, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNTU3NDQ5Ng==", "diff_hunk": "@@ -131,6 +131,56 @@ Status NMSShapeFn(InferenceContext* c) {\n   return Status::OK();\n }\n \n+Status NMSLiteShapeFn(InferenceContext* c) {\n+  //Get inputs and validate ranks\n+  ShapeHandle boxes;\n+  //boxes is a tensor of Dimensions [batch_size, num_anchors, q, 4]\n+  TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 4, &boxes));\n+  ShapeHandle scores;\n+  //scores is a tensor of Dimensions [batch_size, num_anchors, num_classes]\n+  TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 3, &scores));\n+  ShapeHandle max_output_size_per_class;\n+  TF_RETURN_IF_ERROR(c->WithRank(c->input(2), 0, &max_output_size_per_class));\n+  ShapeHandle max_total_size;\n+  TF_RETURN_IF_ERROR(c->WithRank(c->input(3), 0, &max_total_size));\n+  ShapeHandle iou_threshold;\n+  TF_RETURN_IF_ERROR(c->WithRank(c->input(4), 0, &iou_threshold));\n+  ShapeHandle score_threshold;\n+  TF_RETURN_IF_ERROR(c->WithRank(c->input(5), 0, &score_threshold));\n+\n+  DimensionHandle unused;\n+  //boxes[1] and scores[1] are both num_anchors\n+  TF_RETURN_IF_ERROR(c->Merge(c->Dim(boxes, 1), c->Dim(scores, 1), &unused));\n+  // The boxes[3] is 4.\n+  TF_RETURN_IF_ERROR(c->WithValue(c->Dim(boxes, 3), 4, &unused));\n+\n+  bool pad_per_class;\n+  TF_RETURN_IF_ERROR(c->GetAttr(\"pad_per_class\", &pad_per_class));\n+  if(!pad_per_class) {\n+    DimensionHandle output_dim;\n+    DimensionHandle batch_dim = c->Dim(boxes, 0);\n+    \n+    TF_RETURN_IF_ERROR(c->MakeDimForScalarInput(3, &output_dim));\n+    if(c->ValueKnown(output_dim) && c->Value(output_dim) <= 0) {\n+      return errors::InvalidArgument(\"max_total_size should be > 0 \");\n+    }\n+    c->set_output(0, c->MakeShape({batch_dim, output_dim, 4}));\n+    c->set_output(1, c->MakeShape({batch_dim, output_dim}));\n+    c->set_output(2, c->MakeShape({batch_dim, output_dim}));\n+    c->set_output(4, c->MakeShape({batch_dim, output_dim}));\n+  }\n+  else {\n+    //TODO SR Can all the outputs be unknowndim?\n+    c->set_output(0, c->Vector(c->UnknownDim()));\n+    c->set_output(1, c->Vector(c->UnknownDim()));", "path": "tensorflow/core/ops/image_ops.cc", "position": 45, "original_position": 45, "commit_id": "e433fd8adab6a6646f9c6c738ce70682a15193bb", "original_commit_id": "e433fd8adab6a6646f9c6c738ce70682a15193bb", "user": {"login": "azaks2", "id": 40365382, "node_id": "MDQ6VXNlcjQwMzY1Mzgy", "avatar_url": "https://avatars2.githubusercontent.com/u/40365382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azaks2", "html_url": "https://github.com/azaks2", "followers_url": "https://api.github.com/users/azaks2/followers", "following_url": "https://api.github.com/users/azaks2/following{/other_user}", "gists_url": "https://api.github.com/users/azaks2/gists{/gist_id}", "starred_url": "https://api.github.com/users/azaks2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azaks2/subscriptions", "organizations_url": "https://api.github.com/users/azaks2/orgs", "repos_url": "https://api.github.com/users/azaks2/repos", "events_url": "https://api.github.com/users/azaks2/events{/privacy}", "received_events_url": "https://api.github.com/users/azaks2/received_events", "type": "User", "site_admin": false}, "body": "we do know the output size:\r\n\r\nmin(max_output_size, max_output_size_per_class*classes)", "created_at": "2018-11-22T00:39:40Z", "updated_at": "2018-11-22T00:39:40Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23567#discussion_r235574496", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23567", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/235574496"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23567#discussion_r235574496"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23567"}}, "body_html": "<p>we do know the output size:</p>\n<p>min(max_output_size, max_output_size_per_class*classes)</p>", "body_text": "we do know the output size:\nmin(max_output_size, max_output_size_per_class*classes)"}