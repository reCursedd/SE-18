{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9020", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9020/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9020/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9020/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9020", "id": 219909079, "node_id": "MDU6SXNzdWUyMTk5MDkwNzk=", "number": 9020, "title": "tf.image.crop_and_resize not working with uint8 images", "user": {"login": "Lescurel", "id": 20063731, "node_id": "MDQ6VXNlcjIwMDYzNzMx", "avatar_url": "https://avatars2.githubusercontent.com/u/20063731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lescurel", "html_url": "https://github.com/Lescurel", "followers_url": "https://api.github.com/users/Lescurel/followers", "following_url": "https://api.github.com/users/Lescurel/following{/other_user}", "gists_url": "https://api.github.com/users/Lescurel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lescurel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lescurel/subscriptions", "organizations_url": "https://api.github.com/users/Lescurel/orgs", "repos_url": "https://api.github.com/users/Lescurel/repos", "events_url": "https://api.github.com/users/Lescurel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lescurel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "gpapan", "id": 6232317, "node_id": "MDQ6VXNlcjYyMzIzMTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6232317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpapan", "html_url": "https://github.com/gpapan", "followers_url": "https://api.github.com/users/gpapan/followers", "following_url": "https://api.github.com/users/gpapan/following{/other_user}", "gists_url": "https://api.github.com/users/gpapan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpapan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpapan/subscriptions", "organizations_url": "https://api.github.com/users/gpapan/orgs", "repos_url": "https://api.github.com/users/gpapan/repos", "events_url": "https://api.github.com/users/gpapan/events{/privacy}", "received_events_url": "https://api.github.com/users/gpapan/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gpapan", "id": 6232317, "node_id": "MDQ6VXNlcjYyMzIzMTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6232317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpapan", "html_url": "https://github.com/gpapan", "followers_url": "https://api.github.com/users/gpapan/followers", "following_url": "https://api.github.com/users/gpapan/following{/other_user}", "gists_url": "https://api.github.com/users/gpapan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpapan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpapan/subscriptions", "organizations_url": "https://api.github.com/users/gpapan/orgs", "repos_url": "https://api.github.com/users/gpapan/repos", "events_url": "https://api.github.com/users/gpapan/events{/privacy}", "received_events_url": "https://api.github.com/users/gpapan/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2017-04-06T14:01:26Z", "updated_at": "2017-12-17T23:29:32Z", "closed_at": "2017-04-07T21:39:09Z", "author_association": "NONE", "body_html": "<h3>Installation</h3>\n<ul>\n<li>Custom code</li>\n<li>Pip install</li>\n<li><em>TensorFlow version</em>: 1.0.1</li>\n<li>Python 2.7.9</li>\n<li>CPU based</li>\n<li>Debian 3.16.39-1+deb8u2 (2017-03-07) x86_64 GNU/Linux</li>\n</ul>\n<h3>Problem</h3>\n<p>When reading images with opencv and then trying to use crop_and_resize on a tensor of uint8 data type, i get the following error :</p>\n<pre><code>InvalidArgumentError (see above for traceback): No OpKernel was registered to support Op 'CropAndResize' with these attrs.  Registered devices: [CPU], Registered kernels:\n  device='CPU'; T in [DT_FLOAT]\n\n\t [[Node: generate_resized_crop = CropAndResize[T=DT_UINT8, extrapolation_value=0, method=\"bilinear\"](ExpandDims, stack, zeros_like, generate_resized_crop/crop_size)]]\n</code></pre>\n<p>However, when casting my tensor in float32, the program works perfectly.<br>\nBut the <a href=\"https://www.tensorflow.org/versions/master/api_docs/python/tf/image/crop_and_resize\" rel=\"nofollow\">documentation</a> specifies that it should work with uint8 datatype.</p>\n<h3>Source Code</h3>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> cv2\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nframe<span class=\"pl-k\">=</span>cv2.imread(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>path to img.jpg<span class=\"pl-pds\">'</span></span>,<span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\nraw_image<span class=\"pl-k\">=</span>tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.uint8, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>frame.shape, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>input_image<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">img2batch</span>(<span class=\"pl-smi\">input_image</span>):\n    raw_sample_tensor_4d<span class=\"pl-k\">=</span>tf.expand_dims(input_image, <span class=\"pl-c1\">0</span>)\n    patches_top<span class=\"pl-k\">=</span>[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">0.5</span>]\n    patches_bottom <span class=\"pl-k\">=</span>[<span class=\"pl-c1\">0.25</span>,<span class=\"pl-c1\">0.75</span>]\n    boxes<span class=\"pl-k\">=</span>tf.stack([patches_top, patches_top, patches_bottom, patches_bottom], <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n    crops<span class=\"pl-k\">=</span>tf.image.crop_and_resize(raw_sample_tensor_4d, boxes, <span class=\"pl-v\">box_ind</span><span class=\"pl-k\">=</span>tf.zeros_like(patches_top, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32), <span class=\"pl-v\">crop_size</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">200</span>,<span class=\"pl-c1\">200</span>], <span class=\"pl-v\">method</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bilinear<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">extrapolation_value</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>generate_resized_crop<span class=\"pl-pds\">\"</span></span>)\n    <span class=\"pl-k\">return</span> crops\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    myBatchedImage<span class=\"pl-k\">=</span>sess.run(img2batch(raw_image), <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{raw_image:frame})</pre></div>\n<p>Problem solved with :</p>\n<div class=\"highlight highlight-source-python\"><pre>crops<span class=\"pl-k\">=</span>tf.image.crop_and_resize(tf.cast(raw_sample_tensor_4d, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32), boxes, <span class=\"pl-v\">box_ind</span><span class=\"pl-k\">=</span>tf.zeros_like(patches_top, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32), <span class=\"pl-v\">crop_size</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">200</span>,<span class=\"pl-c1\">200</span>], <span class=\"pl-v\">method</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bilinear<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">extrapolation_value</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>generate_resized_crop<span class=\"pl-pds\">\"</span></span>)</pre></div>", "body_text": "Installation\n\nCustom code\nPip install\nTensorFlow version: 1.0.1\nPython 2.7.9\nCPU based\nDebian 3.16.39-1+deb8u2 (2017-03-07) x86_64 GNU/Linux\n\nProblem\nWhen reading images with opencv and then trying to use crop_and_resize on a tensor of uint8 data type, i get the following error :\nInvalidArgumentError (see above for traceback): No OpKernel was registered to support Op 'CropAndResize' with these attrs.  Registered devices: [CPU], Registered kernels:\n  device='CPU'; T in [DT_FLOAT]\n\n\t [[Node: generate_resized_crop = CropAndResize[T=DT_UINT8, extrapolation_value=0, method=\"bilinear\"](ExpandDims, stack, zeros_like, generate_resized_crop/crop_size)]]\n\nHowever, when casting my tensor in float32, the program works perfectly.\nBut the documentation specifies that it should work with uint8 datatype.\nSource Code\nimport cv2\nimport tensorflow as tf\n\nframe=cv2.imread('path to img.jpg',-1)\nraw_image=tf.placeholder(dtype=tf.uint8, shape=frame.shape, name='input_image')\n\ndef img2batch(input_image):\n    raw_sample_tensor_4d=tf.expand_dims(input_image, 0)\n    patches_top=[0,0.5]\n    patches_bottom =[0.25,0.75]\n    boxes=tf.stack([patches_top, patches_top, patches_bottom, patches_bottom], axis=1)\n    crops=tf.image.crop_and_resize(raw_sample_tensor_4d, boxes, box_ind=tf.zeros_like(patches_top, dtype=tf.int32), crop_size=[200,200], method=\"bilinear\", extrapolation_value=None, name=\"generate_resized_crop\")\n    return crops\n\nwith tf.Session() as sess:\n    myBatchedImage=sess.run(img2batch(raw_image), feed_dict={raw_image:frame})\nProblem solved with :\ncrops=tf.image.crop_and_resize(tf.cast(raw_sample_tensor_4d, dtype=tf.float32), boxes, box_ind=tf.zeros_like(patches_top, dtype=tf.int32), crop_size=[200,200], method=\"bilinear\", extrapolation_value=None, name=\"generate_resized_crop\")", "body": "### Installation\r\n- Custom code\r\n- Pip install\r\n- *TensorFlow version*: 1.0.1\r\n- Python 2.7.9\r\n- CPU based\r\n- Debian 3.16.39-1+deb8u2 (2017-03-07) x86_64 GNU/Linux\r\n\r\n### Problem \r\n\r\nWhen reading images with opencv and then trying to use crop_and_resize on a tensor of uint8 data type, i get the following error : \r\n\r\n```\r\nInvalidArgumentError (see above for traceback): No OpKernel was registered to support Op 'CropAndResize' with these attrs.  Registered devices: [CPU], Registered kernels:\r\n  device='CPU'; T in [DT_FLOAT]\r\n\r\n\t [[Node: generate_resized_crop = CropAndResize[T=DT_UINT8, extrapolation_value=0, method=\"bilinear\"](ExpandDims, stack, zeros_like, generate_resized_crop/crop_size)]]\r\n```\r\n\r\nHowever, when casting my tensor in float32, the program works perfectly.\r\nBut the [documentation](https://www.tensorflow.org/versions/master/api_docs/python/tf/image/crop_and_resize) specifies that it should work with uint8 datatype. \r\n\r\n### Source Code\r\n```Python\r\nimport cv2\r\nimport tensorflow as tf\r\n\r\nframe=cv2.imread('path to img.jpg',-1)\r\nraw_image=tf.placeholder(dtype=tf.uint8, shape=frame.shape, name='input_image')\r\n\r\ndef img2batch(input_image):\r\n    raw_sample_tensor_4d=tf.expand_dims(input_image, 0)\r\n    patches_top=[0,0.5]\r\n    patches_bottom =[0.25,0.75]\r\n    boxes=tf.stack([patches_top, patches_top, patches_bottom, patches_bottom], axis=1)\r\n    crops=tf.image.crop_and_resize(raw_sample_tensor_4d, boxes, box_ind=tf.zeros_like(patches_top, dtype=tf.int32), crop_size=[200,200], method=\"bilinear\", extrapolation_value=None, name=\"generate_resized_crop\")\r\n    return crops\r\n\r\nwith tf.Session() as sess:\r\n    myBatchedImage=sess.run(img2batch(raw_image), feed_dict={raw_image:frame})\r\n```\r\nProblem solved with : \r\n```Python\r\ncrops=tf.image.crop_and_resize(tf.cast(raw_sample_tensor_4d, dtype=tf.float32), boxes, box_ind=tf.zeros_like(patches_top, dtype=tf.int32), crop_size=[200,200], method=\"bilinear\", extrapolation_value=None, name=\"generate_resized_crop\")\r\n```"}