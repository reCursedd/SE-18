{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/191625549", "pull_request_review_id": 124230652, "id": 191625549, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTYyNTU0OQ==", "diff_hunk": "@@ -0,0 +1,1143 @@\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+\n+import logging\n+import collections\n+\n+from tensorflow.python.framework import dtypes as tf_types\n+from tensorflow.python.framework.errors import OpError\n+from tensorflow.python.framework import ops\n+from tensorflow.python.ops import parsing_ops\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.platform import test\n+\n+from tensorflow.contrib.avro.python.parse_avro_record import parse_avro_record\n+from tensorflow.contrib.avro.python.utils.avro_record_utilities import get_record_value, serialize, parse_schema\n+from tensorflow.contrib.avro.python.utils.tensor_utilities import fill_in_fixed_len, fill_in_fixed_len_sequence, \\\n+    get_end_indices, get_n_elements_per_batch\n+import tensorflow.contrib.avro.python.utils.numerr as nr\n+\n+\n+class DataForTest(collections.namedtuple('DataForTest', ['schema', 'data', 'features', 'should_pass'])):\n+    \"\"\"\n+    Test data contains a schema, data, features (for parsing), and whether this test is expected to pass or fail.\n+    \"\"\"\n+\n+\n+class ParseAvroRecordTest(test.TestCase):\n+\n+    def __init__(self, *args, **kwargs):\n+        super(ParseAvroRecordTest, self).__init__(*args, **kwargs)\n+\n+    def setUp(self):\n+        \"\"\"\n+        Setup fixture for test cases.\n+        \"\"\"\n+        log_root = logging.getLogger()  # set logging level\n+        log_root.setLevel(logging.INFO)\n+\n+    def run_test(self, test_case):\n+        \"\"\"\n+        Runs a test case.\n+        \"\"\"\n+        # Run over all test cases\n+        schema_object = parse_schema(test_case.schema)\n+        with ops.Graph().as_default() as g, self.test_session(graph=g) as sess:\n+            str_input = array_ops.placeholder(tf_types.string)\n+\n+            parsed = parse_avro_record(str_input, test_case.schema, test_case.features)\n+            records = test_case.data\n+            # To test batch processing summarize all test data points into one batch\n+            serialized = [serialize(record, schema_object) for record in records]\n+            # If this test case should pass ensure that all thresholds are met\n+            if test_case.should_pass:\n+                # Here is where we execute our parser within TensorFlow\n+                tensors = sess.run(parsed, feed_dict={str_input: serialized})\n+                # Go over all key, value pairs in the features; keys are strings and values are TensorFlow type info\n+                for key, value in test_case.features.iteritems():\n+                    # Get all intended tensor values from the test data\n+                    tensor_be = len(records)*[None]\n+                    for i_record, record in enumerate(records):\n+                        record_value = get_record_value(record, key, value.dtype)\n+                        tensor_be[i_record] = record_value\n+                    # Get the actual tensor\n+                    tensor_is = tensors[key]\n+                    # Apply different test for the different tensor types: fixed length, var length, sparse\n+                    if isinstance(value, parsing_ops.FixedLenSequenceFeature):\n+                        logging.info(\"Comparing fixed length feature {0}.\".format(key))\n+                        tensor_be = fill_in_fixed_len_sequence(tensor_be,\n+                                                               end_indices=get_end_indices(tensor_is),\n+                                                               n_elements_per_batch=get_n_elements_per_batch(tensor_is),\n+                                                               default_value=value.default_value)\n+                        assert nr.almost_equal_dense_tensor(tensor_is, tensor_be), \\", "path": "tensorflow/contrib/avro/python/tests/parse_avro_record_test.py", "position": null, "original_position": 74, "commit_id": "bdf790d5c888e59d593230286edaaf5314daaee5", "original_commit_id": "abf605ba22c95f52116b765c90f889b9f17692c1", "user": {"login": "fraudies", "id": 1770877, "node_id": "MDQ6VXNlcjE3NzA4Nzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1770877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fraudies", "html_url": "https://github.com/fraudies", "followers_url": "https://api.github.com/users/fraudies/followers", "following_url": "https://api.github.com/users/fraudies/following{/other_user}", "gists_url": "https://api.github.com/users/fraudies/gists{/gist_id}", "starred_url": "https://api.github.com/users/fraudies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fraudies/subscriptions", "organizations_url": "https://api.github.com/users/fraudies/orgs", "repos_url": "https://api.github.com/users/fraudies/repos", "events_url": "https://api.github.com/users/fraudies/events{/privacy}", "received_events_url": "https://api.github.com/users/fraudies/received_events", "type": "User", "site_admin": false}, "body": "Used AssertAllClose for values and AssertAllEqual for indices (in the case sparse vectors).", "created_at": "2018-05-30T02:13:03Z", "updated_at": "2018-10-22T21:28:38Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/18224#discussion_r191625549", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18224", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/191625549"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/18224#discussion_r191625549"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18224"}}, "body_html": "<p>Used AssertAllClose for values and AssertAllEqual for indices (in the case sparse vectors).</p>", "body_text": "Used AssertAllClose for values and AssertAllEqual for indices (in the case sparse vectors).", "in_reply_to_id": 181108894}