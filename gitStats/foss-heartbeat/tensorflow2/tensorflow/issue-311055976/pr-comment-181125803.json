{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/181125803", "pull_request_review_id": 111647900, "id": 181125803, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTEyNTgwMw==", "diff_hunk": "@@ -0,0 +1,1143 @@\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+\n+import logging\n+import collections\n+\n+from tensorflow.python.framework import dtypes as tf_types\n+from tensorflow.python.framework.errors import OpError\n+from tensorflow.python.framework import ops\n+from tensorflow.python.ops import parsing_ops\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.platform import test\n+\n+from tensorflow.contrib.avro.python.parse_avro_record import parse_avro_record\n+from tensorflow.contrib.avro.python.utils.avro_record_utilities import get_record_value, serialize, parse_schema\n+from tensorflow.contrib.avro.python.utils.tensor_utilities import fill_in_fixed_len, fill_in_fixed_len_sequence, \\\n+    get_end_indices, get_n_elements_per_batch\n+import tensorflow.contrib.avro.python.utils.numerr as nr\n+\n+\n+class DataForTest(collections.namedtuple('DataForTest', ['schema', 'data', 'features', 'should_pass'])):\n+    \"\"\"\n+    Test data contains a schema, data, features (for parsing), and whether this test is expected to pass or fail.\n+    \"\"\"\n+\n+\n+class ParseAvroRecordTest(test.TestCase):\n+\n+    def __init__(self, *args, **kwargs):\n+        super(ParseAvroRecordTest, self).__init__(*args, **kwargs)\n+\n+    def setUp(self):\n+        \"\"\"\n+        Setup fixture for test cases.\n+        \"\"\"\n+        log_root = logging.getLogger()  # set logging level\n+        log_root.setLevel(logging.INFO)\n+\n+    def run_test(self, test_case):\n+        \"\"\"\n+        Runs a test case.\n+        \"\"\"\n+        # Run over all test cases\n+        schema_object = parse_schema(test_case.schema)\n+        with ops.Graph().as_default() as g, self.test_session(graph=g) as sess:\n+            str_input = array_ops.placeholder(tf_types.string)\n+\n+            parsed = parse_avro_record(str_input, test_case.schema, test_case.features)\n+            records = test_case.data\n+            # To test batch processing summarize all test data points into one batch\n+            serialized = [serialize(record, schema_object) for record in records]\n+            # If this test case should pass ensure that all thresholds are met\n+            if test_case.should_pass:\n+                # Here is where we execute our parser within TensorFlow\n+                tensors = sess.run(parsed, feed_dict={str_input: serialized})\n+                # Go over all key, value pairs in the features; keys are strings and values are TensorFlow type info\n+                for key, value in test_case.features.iteritems():\n+                    # Get all intended tensor values from the test data\n+                    tensor_be = len(records)*[None]\n+                    for i_record, record in enumerate(records):\n+                        record_value = get_record_value(record, key, value.dtype)", "path": "tensorflow/contrib/avro/python/tests/parse_avro_record_test.py", "position": null, "original_position": 63, "commit_id": "bdf790d5c888e59d593230286edaaf5314daaee5", "original_commit_id": "abf605ba22c95f52116b765c90f889b9f17692c1", "user": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "body": "get_record_value is non-trivial, so it's hard to know what this is returning and probably needs test cases itself. Instead of automatically deriving the expected values here, I would add the expected values to your individual test cases below. This is more verbose, but will make the tests much easier to read and more obviously correct.", "created_at": "2018-04-12T15:33:35Z", "updated_at": "2018-10-22T21:28:38Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/18224#discussion_r181125803", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18224", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/181125803"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/18224#discussion_r181125803"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18224"}}, "body_html": "<p>get_record_value is non-trivial, so it's hard to know what this is returning and probably needs test cases itself. Instead of automatically deriving the expected values here, I would add the expected values to your individual test cases below. This is more verbose, but will make the tests much easier to read and more obviously correct.</p>", "body_text": "get_record_value is non-trivial, so it's hard to know what this is returning and probably needs test cases itself. Instead of automatically deriving the expected values here, I would add the expected values to your individual test cases below. This is more verbose, but will make the tests much easier to read and more obviously correct."}