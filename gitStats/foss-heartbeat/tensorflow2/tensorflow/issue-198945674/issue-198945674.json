{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6666", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6666/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6666/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6666/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6666", "id": 198945674, "node_id": "MDU6SXNzdWUxOTg5NDU2NzQ=", "number": 6666, "title": "tf.train.Saver does not restore input queue", "user": {"login": "bodokaiser", "id": 1780466, "node_id": "MDQ6VXNlcjE3ODA0NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1780466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bodokaiser", "html_url": "https://github.com/bodokaiser", "followers_url": "https://api.github.com/users/bodokaiser/followers", "following_url": "https://api.github.com/users/bodokaiser/following{/other_user}", "gists_url": "https://api.github.com/users/bodokaiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/bodokaiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bodokaiser/subscriptions", "organizations_url": "https://api.github.com/users/bodokaiser/orgs", "repos_url": "https://api.github.com/users/bodokaiser/repos", "events_url": "https://api.github.com/users/bodokaiser/events{/privacy}", "received_events_url": "https://api.github.com/users/bodokaiser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-01-05T12:32:32Z", "updated_at": "2017-06-26T19:36:01Z", "closed_at": "2017-01-05T17:36:26Z", "author_association": "NONE", "body_html": "<p><strong>example.py</strong></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nqueue <span class=\"pl-k\">=</span> tf.train.string_input_producer([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>data.txt<span class=\"pl-pds\">'</span></span>])\n\nreader <span class=\"pl-k\">=</span> tf.TextLineReader()\n_, line <span class=\"pl-k\">=</span> reader.read(queue)\n\nglobal_step <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">0</span>, <span class=\"pl-v\">trainable</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>global_step<span class=\"pl-pds\">'</span></span>)\nglobal_step_op <span class=\"pl-k\">=</span> tf.assign_add(global_step, <span class=\"pl-c1\">1</span>)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    saver <span class=\"pl-k\">=</span> tf.train.Saver()\n    coord <span class=\"pl-k\">=</span> tf.train.Coordinator()\n    threads <span class=\"pl-k\">=</span> tf.train.start_queue_runners(<span class=\"pl-v\">coord</span><span class=\"pl-k\">=</span>coord)\n\n    latest_checkpoint <span class=\"pl-k\">=</span> tf.train.latest_checkpoint(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/tmp<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-k\">if</span> latest_checkpoint:\n        saver.restore(sess, latest_checkpoint)\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>restored from<span class=\"pl-pds\">'</span></span>, latest_checkpoint)\n    <span class=\"pl-k\">else</span>:\n        sess.run([\n            tf.local_variables_initializer(),\n            tf.global_variables_initializer(),\n        ])\n\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">5</span>):\n        value, step <span class=\"pl-k\">=</span> sess.run([line, global_step_op])\n\n        <span class=\"pl-c1\">print</span>(value, step)\n\n    coord.request_stop()\n    coord.join(threads)\n\n    saver.save(sess, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/tmp/model<span class=\"pl-pds\">'</span></span>)</pre></div>\n<p><strong>data.txt</strong></p>\n<pre lang=\"txt\"><code>line 1\nline 2\nline 3\nline 4\nline 5\nline 6\n</code></pre>\n<p>Will output on first run <code>python3 example.py</code>:</p>\n<blockquote>\n<p>b'line 1' 1<br>\nb'line 2' 2<br>\nb'line 3' 3</p>\n</blockquote>\n<p>Will output on second run <code>python3 example.py</code>:</p>\n<blockquote>\n<p>restored from /tmp/model<br>\nb'line 1' 4<br>\nb'line 2' 5<br>\nb'line 3' 6</p>\n</blockquote>\n<p>but expected:</p>\n<blockquote>\n<p>restored from /tmp/model<br>\nb'line 4' 4<br>\nb'line 5' 5<br>\nb'line 6' 6</p>\n</blockquote>", "body_text": "example.py\nimport tensorflow as tf\n\nqueue = tf.train.string_input_producer(['data.txt'])\n\nreader = tf.TextLineReader()\n_, line = reader.read(queue)\n\nglobal_step = tf.Variable(0, trainable=False, name='global_step')\nglobal_step_op = tf.assign_add(global_step, 1)\n\nwith tf.Session() as sess:\n    saver = tf.train.Saver()\n    coord = tf.train.Coordinator()\n    threads = tf.train.start_queue_runners(coord=coord)\n\n    latest_checkpoint = tf.train.latest_checkpoint('/tmp')\n    if latest_checkpoint:\n        saver.restore(sess, latest_checkpoint)\n        print('restored from', latest_checkpoint)\n    else:\n        sess.run([\n            tf.local_variables_initializer(),\n            tf.global_variables_initializer(),\n        ])\n\n    for i in range(5):\n        value, step = sess.run([line, global_step_op])\n\n        print(value, step)\n\n    coord.request_stop()\n    coord.join(threads)\n\n    saver.save(sess, '/tmp/model')\ndata.txt\nline 1\nline 2\nline 3\nline 4\nline 5\nline 6\n\nWill output on first run python3 example.py:\n\nb'line 1' 1\nb'line 2' 2\nb'line 3' 3\n\nWill output on second run python3 example.py:\n\nrestored from /tmp/model\nb'line 1' 4\nb'line 2' 5\nb'line 3' 6\n\nbut expected:\n\nrestored from /tmp/model\nb'line 4' 4\nb'line 5' 5\nb'line 6' 6", "body": "**example.py**\r\n```python\r\nimport tensorflow as tf\r\n\r\nqueue = tf.train.string_input_producer(['data.txt'])\r\n\r\nreader = tf.TextLineReader()\r\n_, line = reader.read(queue)\r\n\r\nglobal_step = tf.Variable(0, trainable=False, name='global_step')\r\nglobal_step_op = tf.assign_add(global_step, 1)\r\n\r\nwith tf.Session() as sess:\r\n    saver = tf.train.Saver()\r\n    coord = tf.train.Coordinator()\r\n    threads = tf.train.start_queue_runners(coord=coord)\r\n\r\n    latest_checkpoint = tf.train.latest_checkpoint('/tmp')\r\n    if latest_checkpoint:\r\n        saver.restore(sess, latest_checkpoint)\r\n        print('restored from', latest_checkpoint)\r\n    else:\r\n        sess.run([\r\n            tf.local_variables_initializer(),\r\n            tf.global_variables_initializer(),\r\n        ])\r\n\r\n    for i in range(5):\r\n        value, step = sess.run([line, global_step_op])\r\n\r\n        print(value, step)\r\n\r\n    coord.request_stop()\r\n    coord.join(threads)\r\n\r\n    saver.save(sess, '/tmp/model')\r\n```\r\n\r\n**data.txt**\r\n```txt\r\nline 1\r\nline 2\r\nline 3\r\nline 4\r\nline 5\r\nline 6\r\n```\r\n\r\nWill output on first run `python3 example.py`:\r\n> b'line 1' 1\r\n> b'line 2' 2\r\n> b'line 3' 3\r\n\r\nWill output on second run `python3 example.py`:\r\n> restored from /tmp/model\r\n> b'line 1' 4\r\n> b'line 2' 5\r\n> b'line 3' 6\r\n\r\nbut expected:\r\n> restored from /tmp/model\r\n> b'line 4' 4\r\n> b'line 5' 5\r\n> b'line 6' 6"}