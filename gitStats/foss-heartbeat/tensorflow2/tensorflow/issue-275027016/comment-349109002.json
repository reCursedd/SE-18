{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/349109002", "html_url": "https://github.com/tensorflow/tensorflow/issues/14675#issuecomment-349109002", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14675", "id": 349109002, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTEwOTAwMg==", "user": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-04T21:19:07Z", "updated_at": "2017-12-04T21:19:07Z", "author_association": "MEMBER", "body_html": "<p>Adding <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2533174\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ekelsen\">@ekelsen</a>, who has thought alot about TF determinism.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=287200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/eamartin\">@eamartin</a> I defnitely agree that TF should strive for \"easy reproducibility\".</p>\n<p>For reference, I think the current logic for determining the implicit <code>op_seed</code> is based on the <code>id</code> of the last graph node:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/a83154967bb2955acc234f4a64b63b505508b728/tensorflow/python/framework/random_seed.py#L64\">tensorflow/tensorflow/python/framework/random_seed.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 64\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/a83154967bb2955acc234f4a64b63b505508b728\">a831549</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L64\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"64\"></td>\n          <td id=\"LC64\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> op_seed <span class=\"pl-k\">=</span> ops.get_default_graph()._last_id </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>Another way to think of this is that the current logic is based on the structure of the graph; if the user doesn't change the structure of the graph, the <code>op_seed</code> will remain the same.  Your suggestion is to base it on the tensor name instead.</p>\n<p>You've given a great example of how a \"tiny change\" to the user's implementation of <code>mean</code> causes unexpected changes to random init, given the existing logic.  If instead we changed to your proposal based on tensor names, the same unexpected changes to random init would occur, if the user made a \"tiny change\" to the name of a tensor, but kept the structure of the graph the same.</p>\n<p>So what this really boils down to is which approach we think is more intuitive.  My point is that neither approach is a clear winner.  I wouldn't want to add even more complexity (e.g. <code>tf.set_op_seed_default_algorithm</code>) just for this.</p>", "body_text": "Adding @ekelsen, who has thought alot about TF determinism.\n@eamartin I defnitely agree that TF should strive for \"easy reproducibility\".\nFor reference, I think the current logic for determining the implicit op_seed is based on the id of the last graph node:\n\n  \n    \n      tensorflow/tensorflow/python/framework/random_seed.py\n    \n    \n         Line 64\n      in\n      a831549\n    \n    \n    \n    \n\n        \n          \n           op_seed = ops.get_default_graph()._last_id \n        \n    \n  \n\n\nAnother way to think of this is that the current logic is based on the structure of the graph; if the user doesn't change the structure of the graph, the op_seed will remain the same.  Your suggestion is to base it on the tensor name instead.\nYou've given a great example of how a \"tiny change\" to the user's implementation of mean causes unexpected changes to random init, given the existing logic.  If instead we changed to your proposal based on tensor names, the same unexpected changes to random init would occur, if the user made a \"tiny change\" to the name of a tensor, but kept the structure of the graph the same.\nSo what this really boils down to is which approach we think is more intuitive.  My point is that neither approach is a clear winner.  I wouldn't want to add even more complexity (e.g. tf.set_op_seed_default_algorithm) just for this.", "body": "Adding @ekelsen, who has thought alot about TF determinism.\r\n\r\n@eamartin I defnitely agree that TF should strive for \"easy reproducibility\".\r\n\r\nFor reference, I think the current logic for determining the implicit `op_seed` is based on the `id` of the last graph node:\r\nhttps://github.com/tensorflow/tensorflow/blob/a83154967bb2955acc234f4a64b63b505508b728/tensorflow/python/framework/random_seed.py#L64\r\n\r\nAnother way to think of this is that the current logic is based on the structure of the graph; if the user doesn't change the structure of the graph, the `op_seed` will remain the same.  Your suggestion is to base it on the tensor name instead.\r\n\r\nYou've given a great example of how a \"tiny change\" to the user's implementation of `mean` causes unexpected changes to random init, given the existing logic.  If instead we changed to your proposal based on tensor names, the same unexpected changes to random init would occur, if the user made a \"tiny change\" to the name of a tensor, but kept the structure of the graph the same.\r\n\r\nSo what this really boils down to is which approach we think is more intuitive.  My point is that neither approach is a clear winner.  I wouldn't want to add even more complexity (e.g. `tf.set_op_seed_default_algorithm`) just for this."}