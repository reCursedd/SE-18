{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/349328256", "html_url": "https://github.com/tensorflow/tensorflow/issues/14675#issuecomment-349328256", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14675", "id": 349328256, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTMyODI1Ng==", "user": {"login": "eamartin", "id": 287200, "node_id": "MDQ6VXNlcjI4NzIwMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/287200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eamartin", "html_url": "https://github.com/eamartin", "followers_url": "https://api.github.com/users/eamartin/followers", "following_url": "https://api.github.com/users/eamartin/following{/other_user}", "gists_url": "https://api.github.com/users/eamartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/eamartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eamartin/subscriptions", "organizations_url": "https://api.github.com/users/eamartin/orgs", "repos_url": "https://api.github.com/users/eamartin/repos", "events_url": "https://api.github.com/users/eamartin/events{/privacy}", "received_events_url": "https://api.github.com/users/eamartin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-05T14:55:46Z", "updated_at": "2017-12-05T14:55:46Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1112263\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/facaiy\">@facaiy</a> I agree that changing the graph at all breaks the current conditions for reproducibility, but I'm suggesting that there should be a best-effort attempt to stay reproducible even with small graph changes.</p>\n<p>Being able to directly reproduce a experiment is powerful, but I think it's even more powerful to hold all things constant and tweak just one aspect of an experiment.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5453737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tatatodd\">@tatatodd</a> I agree that both names or op id based seeding are fragile to small changes. However, the user generally has more control over op names than op id based seeding. I think it''s significantly easier to control op names (by setting name kwarg) than it is control graph building order (restructure your entire program so all random ops are declared first). Variable name is a local property where op id is a global property.</p>\n<p>Personally, I assign name to all of my variables by using <code>variable_scope</code> and <code>get_variable</code>. These names generally don't change while I edit my experiments unless I do something like adding an extra variable scope or manually a name. I believe this variable naming scheme is TF best practice and practiced relatively widely, so name based seeding would get many users a significant amount of control over reproducibility for free.</p>", "body_text": "@facaiy I agree that changing the graph at all breaks the current conditions for reproducibility, but I'm suggesting that there should be a best-effort attempt to stay reproducible even with small graph changes.\nBeing able to directly reproduce a experiment is powerful, but I think it's even more powerful to hold all things constant and tweak just one aspect of an experiment.\n@tatatodd I agree that both names or op id based seeding are fragile to small changes. However, the user generally has more control over op names than op id based seeding. I think it''s significantly easier to control op names (by setting name kwarg) than it is control graph building order (restructure your entire program so all random ops are declared first). Variable name is a local property where op id is a global property.\nPersonally, I assign name to all of my variables by using variable_scope and get_variable. These names generally don't change while I edit my experiments unless I do something like adding an extra variable scope or manually a name. I believe this variable naming scheme is TF best practice and practiced relatively widely, so name based seeding would get many users a significant amount of control over reproducibility for free.", "body": "@facaiy I agree that changing the graph at all breaks the current conditions for reproducibility, but I'm suggesting that there should be a best-effort attempt to stay reproducible even with small graph changes. \r\n\r\nBeing able to directly reproduce a experiment is powerful, but I think it's even more powerful to hold all things constant and tweak just one aspect of an experiment. \r\n\r\n@tatatodd I agree that both names or op id based seeding are fragile to small changes. However, the user generally has more control over op names than op id based seeding. I think it''s significantly easier to control op names (by setting name kwarg) than it is control graph building order (restructure your entire program so all random ops are declared first). Variable name is a local property where op id is a global property.\r\n\r\nPersonally, I assign name to all of my variables by using ``variable_scope`` and ``get_variable``. These names generally don't change while I edit my experiments unless I do something like adding an extra variable scope or manually a name. I believe this variable naming scheme is TF best practice and practiced relatively widely, so name based seeding would get many users a significant amount of control over reproducibility for free."}