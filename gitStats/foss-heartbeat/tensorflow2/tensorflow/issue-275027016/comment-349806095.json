{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/349806095", "html_url": "https://github.com/tensorflow/tensorflow/issues/14675#issuecomment-349806095", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14675", "id": 349806095, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTgwNjA5NQ==", "user": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-06T23:11:25Z", "updated_at": "2017-12-06T23:11:25Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=287200\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/eamartin\">@eamartin</a> I agree that name-based op seeding is probably an overall better choice; as you point out, it's more commonly (and easily) controlled by the user.  But I'm unsure whether the benefit is worth the implementation cost - let's discuss the concrete points below.</p>\n<p>Ping <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=2533174\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ekelsen\">@ekelsen</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=5061\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/alextp\">@alextp</a> <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> to get their input as well.</p>\n<p>Assuming for a moment that we wanted to make this change, there are two things that worry me.</p>\n<ol>\n<li>\n<p>It might not be easy to implement.  Note that the <code>op_seed</code> is attached as an attribute to each GraphNode, for ops that need the <code>op_seed</code>.  Right now we determine the <code>op_seed</code> purely in python code.  But (I think) we assign unique values to node names in C++ code, during graph building:<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/ad1310a87caa14c495ad7ab47db7572443b2e7ef/tensorflow/core/graph/graph_constructor.cc#L201\">tensorflow/tensorflow/core/graph/graph_constructor.cc</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 201\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/ad1310a87caa14c495ad7ab47db7572443b2e7ef\">ad1310a</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L201\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"201\"></td>\n          <td id=\"LC201\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">void</span> <span class=\"pl-en\">UniquifyNames</span>(<span class=\"pl-k\">const</span> std::vector&lt;<span class=\"pl-k\">bool</span>&gt;&amp; input_already_exists, </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<br>\nThere might be a chicken-and-egg sequencing problem here, where we don't know the unique node name until we've built the graph, but we need the node name to compute the <code>op_seed</code>.  I don't think there's a theoretical problem here that prevents us from making this work, but it might be hard in practice.</p>\n</li>\n<li>\n<p>Should we retain support for both name-based and order-based op seeding, and keep the default as order-based?  My preference is that our final state only supports name-based op seeding, and not both.<br>\nHaving both just seems like unnecessary complexity, and will probably lead to more confusion down the road.  However I'm not sure whether it's feasible to make this change.  Seems ok to me, but I'll let others weigh in with their thoughts.</p>\n</li>\n</ol>", "body_text": "@eamartin I agree that name-based op seeding is probably an overall better choice; as you point out, it's more commonly (and easily) controlled by the user.  But I'm unsure whether the benefit is worth the implementation cost - let's discuss the concrete points below.\nPing @ekelsen @alextp @asimshankar to get their input as well.\nAssuming for a moment that we wanted to make this change, there are two things that worry me.\n\n\nIt might not be easy to implement.  Note that the op_seed is attached as an attribute to each GraphNode, for ops that need the op_seed.  Right now we determine the op_seed purely in python code.  But (I think) we assign unique values to node names in C++ code, during graph building:\n\n  \n    \n      tensorflow/tensorflow/core/graph/graph_constructor.cc\n    \n    \n         Line 201\n      in\n      ad1310a\n    \n    \n    \n    \n\n        \n          \n           void UniquifyNames(const std::vector<bool>& input_already_exists, \n        \n    \n  \n\n\nThere might be a chicken-and-egg sequencing problem here, where we don't know the unique node name until we've built the graph, but we need the node name to compute the op_seed.  I don't think there's a theoretical problem here that prevents us from making this work, but it might be hard in practice.\n\n\nShould we retain support for both name-based and order-based op seeding, and keep the default as order-based?  My preference is that our final state only supports name-based op seeding, and not both.\nHaving both just seems like unnecessary complexity, and will probably lead to more confusion down the road.  However I'm not sure whether it's feasible to make this change.  Seems ok to me, but I'll let others weigh in with their thoughts.", "body": "@eamartin I agree that name-based op seeding is probably an overall better choice; as you point out, it's more commonly (and easily) controlled by the user.  But I'm unsure whether the benefit is worth the implementation cost - let's discuss the concrete points below.\r\n\r\nPing @ekelsen @alextp @asimshankar to get their input as well.\r\n\r\nAssuming for a moment that we wanted to make this change, there are two things that worry me.\r\n\r\n1. It might not be easy to implement.  Note that the `op_seed` is attached as an attribute to each GraphNode, for ops that need the `op_seed`.  Right now we determine the `op_seed` purely in python code.  But (I think) we assign unique values to node names in C++ code, during graph building:\r\nhttps://github.com/tensorflow/tensorflow/blob/ad1310a87caa14c495ad7ab47db7572443b2e7ef/tensorflow/core/graph/graph_constructor.cc#L201\r\nThere might be a chicken-and-egg sequencing problem here, where we don't know the unique node name until we've built the graph, but we need the node name to compute the `op_seed`.  I don't think there's a theoretical problem here that prevents us from making this work, but it might be hard in practice.\r\n\r\n2. Should we retain support for both name-based and order-based op seeding, and keep the default as order-based?  My preference is that our final state only supports name-based op seeding, and not both. \r\n Having both just seems like unnecessary complexity, and will probably lead to more confusion down the road.  However I'm not sure whether it's feasible to make this change.  Seems ok to me, but I'll let others weigh in with their thoughts."}