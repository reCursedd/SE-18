{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/345406091", "html_url": "https://github.com/tensorflow/tensorflow/issues/14675#issuecomment-345406091", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14675", "id": 345406091, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTQwNjA5MQ==", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-18T01:12:20Z", "updated_at": "2017-11-18T01:12:20Z", "author_association": "MEMBER", "body_html": "<p>I guess that operators consume the random number, see the example below, <code>-0.3459</code> is the second number generated by random in fact:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">build_graph</span>(<span class=\"pl-smi\">toggle</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n    tf.set_random_seed(<span class=\"pl-c1\">2017</span>)\n    <span class=\"pl-k\">for</span> n <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>):\n        tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>b_<span class=\"pl-c1\">%d</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> n, [])\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>():\n    <span class=\"pl-k\">for</span> toggle <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">False</span>]:\n        <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">1</span>):\n            g <span class=\"pl-k\">=</span> tf.Graph()\n            <span class=\"pl-k\">with</span> g.as_default():\n                build_graph(toggle)\n\n                <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n                    sess.run(tf.global_variables_initializer())\n\n                    <span class=\"pl-k\">for</span> b <span class=\"pl-k\">in</span> tf.trainable_variables():\n                        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>bias_name=<span class=\"pl-c1\">%s</span><span class=\"pl-cce\">\\t</span>bias_val = <span class=\"pl-c1\">%.4f</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> (b.name, sess.run(b)))\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    main()</pre></div>\n<p>output:</p>\n<div class=\"highlight highlight-source-python\"><pre>bias_name<span class=\"pl-k\">=</span>b_0:<span class=\"pl-c1\">0</span> bias_val <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.4373</span>\nbias_name<span class=\"pl-k\">=</span>b_1:<span class=\"pl-c1\">0</span> bias_val <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.3459</span>\nbias_name<span class=\"pl-k\">=</span>b_2:<span class=\"pl-c1\">0</span> bias_val <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.2771</span>\nbias_name<span class=\"pl-k\">=</span>b_3:<span class=\"pl-c1\">0</span> bias_val <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.4072</span>\nbias_name<span class=\"pl-k\">=</span>b_4:<span class=\"pl-c1\">0</span> bias_val <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.6182</span>\nbias_name<span class=\"pl-k\">=</span>b_5:<span class=\"pl-c1\">0</span> bias_val <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1.6991</span>\nbias_name<span class=\"pl-k\">=</span>b_6:<span class=\"pl-c1\">0</span> bias_val <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.3959</span>\nbias_name<span class=\"pl-k\">=</span>b_7:<span class=\"pl-c1\">0</span> bias_val <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.7480</span>\nbias_name<span class=\"pl-k\">=</span>b_8:<span class=\"pl-c1\">0</span> bias_val <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1.3848</span>\nbias_name<span class=\"pl-k\">=</span>b_9:<span class=\"pl-c1\">0</span> bias_val <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">0.9725</span></pre></div>", "body_text": "I guess that operators consume the random number, see the example below, -0.3459 is the second number generated by random in fact:\nimport tensorflow as tf\n\ndef build_graph(toggle=False):\n    tf.set_random_seed(2017)\n    for n in range(10):\n        tf.get_variable('b_%d' % n, [])\n\n\ndef main():\n    for toggle in [False]:\n        for i in range(1):\n            g = tf.Graph()\n            with g.as_default():\n                build_graph(toggle)\n\n                with tf.Session() as sess:\n                    sess.run(tf.global_variables_initializer())\n\n                    for b in tf.trainable_variables():\n                        print('bias_name=%s\\tbias_val = %.4f' % (b.name, sess.run(b)))\n\n\nif __name__ == '__main__':\n    main()\noutput:\nbias_name=b_0:0 bias_val = 1.4373\nbias_name=b_1:0 bias_val = -0.3459\nbias_name=b_2:0 bias_val = 0.2771\nbias_name=b_3:0 bias_val = -0.4072\nbias_name=b_4:0 bias_val = 0.6182\nbias_name=b_5:0 bias_val = 1.6991\nbias_name=b_6:0 bias_val = 0.3959\nbias_name=b_7:0 bias_val = 0.7480\nbias_name=b_8:0 bias_val = -1.3848\nbias_name=b_9:0 bias_val = -0.9725", "body": "I guess that operators consume the random number, see the example below, `-0.3459` is the second number generated by random in fact:\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\ndef build_graph(toggle=False):\r\n    tf.set_random_seed(2017)\r\n    for n in range(10):\r\n        tf.get_variable('b_%d' % n, [])\r\n\r\n\r\ndef main():\r\n    for toggle in [False]:\r\n        for i in range(1):\r\n            g = tf.Graph()\r\n            with g.as_default():\r\n                build_graph(toggle)\r\n\r\n                with tf.Session() as sess:\r\n                    sess.run(tf.global_variables_initializer())\r\n\r\n                    for b in tf.trainable_variables():\r\n                        print('bias_name=%s\\tbias_val = %.4f' % (b.name, sess.run(b)))\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\noutput:\r\n```python\r\nbias_name=b_0:0 bias_val = 1.4373\r\nbias_name=b_1:0 bias_val = -0.3459\r\nbias_name=b_2:0 bias_val = 0.2771\r\nbias_name=b_3:0 bias_val = -0.4072\r\nbias_name=b_4:0 bias_val = 0.6182\r\nbias_name=b_5:0 bias_val = 1.6991\r\nbias_name=b_6:0 bias_val = 0.3959\r\nbias_name=b_7:0 bias_val = 0.7480\r\nbias_name=b_8:0 bias_val = -1.3848\r\nbias_name=b_9:0 bias_val = -0.9725\r\n```"}