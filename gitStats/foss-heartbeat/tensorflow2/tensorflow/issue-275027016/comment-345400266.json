{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/345400266", "html_url": "https://github.com/tensorflow/tensorflow/issues/14675#issuecomment-345400266", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14675", "id": 345400266, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTQwMDI2Ng==", "user": {"login": "eamartin", "id": 287200, "node_id": "MDQ6VXNlcjI4NzIwMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/287200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eamartin", "html_url": "https://github.com/eamartin", "followers_url": "https://api.github.com/users/eamartin/followers", "following_url": "https://api.github.com/users/eamartin/following{/other_user}", "gists_url": "https://api.github.com/users/eamartin/gists{/gist_id}", "starred_url": "https://api.github.com/users/eamartin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eamartin/subscriptions", "organizations_url": "https://api.github.com/users/eamartin/orgs", "repos_url": "https://api.github.com/users/eamartin/repos", "events_url": "https://api.github.com/users/eamartin/events{/privacy}", "received_events_url": "https://api.github.com/users/eamartin/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-18T00:18:12Z", "updated_at": "2017-11-18T00:18:12Z", "author_association": "NONE", "body_html": "<p>I've created a small reproducible example.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">build_graph</span>(<span class=\"pl-smi\">toggle</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n    tf.set_random_seed(<span class=\"pl-c1\">2017</span>)\n    x <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">20</span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>)\n\n    <span class=\"pl-k\">if</span> toggle:\n        z <span class=\"pl-k\">=</span> tf.reduce_mean(x)\n    <span class=\"pl-k\">else</span>:\n        z <span class=\"pl-k\">=</span> tf.reduce_sum(x) <span class=\"pl-k\">/</span> tf.cast(tf.shape(x)[<span class=\"pl-c1\">0</span>], tf.float32)\n\n    b <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>, [])\n    y <span class=\"pl-k\">=</span> x <span class=\"pl-k\">+</span> b\n\n    <span class=\"pl-k\">return</span> z\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>():\n    <span class=\"pl-k\">for</span> toggle <span class=\"pl-k\">in</span> [<span class=\"pl-c1\">False</span>, <span class=\"pl-c1\">True</span>]:\n        <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">2</span>):\n            g <span class=\"pl-k\">=</span> tf.Graph()\n            <span class=\"pl-k\">with</span> g.as_default():\n                build_graph(toggle)\n\n                <span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n                    sess.run(tf.global_variables_initializer())\n\n                    b <span class=\"pl-k\">=</span> tf.trainable_variables()[<span class=\"pl-c1\">0</span>]\n                    <span class=\"pl-c1\">print</span> (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>toggle=<span class=\"pl-c1\">%s</span><span class=\"pl-cce\">\\t</span>iter=<span class=\"pl-c1\">%d</span><span class=\"pl-cce\">\\t</span>bias_name=<span class=\"pl-c1\">%s</span><span class=\"pl-cce\">\\t</span>bias_val = <span class=\"pl-c1\">%.4f</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span>\n                           (toggle, i, b.name, sess.run(b)))\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    main()\n</pre></div>\n<p>Output when I run this:</p>\n<pre><code>toggle=False    iter=0  bias_name=b:0   bias_val = -0.3459\ntoggle=False    iter=1  bias_name=b:0   bias_val = -0.3459\ntoggle=True     iter=0  bias_name=b:0   bias_val = -1.4101\ntoggle=True     iter=1  bias_name=b:0   bias_val = -1.4101\n</code></pre>\n<p>Note that the <code>bias_val</code> is consistent with a given value of toggle but not across changing values of toggle.</p>\n<p>Observation: If I move the <code>get_variable</code> call before the toggle branch then the variable is always initialized to the same value.</p>", "body_text": "I've created a small reproducible example.\nimport tensorflow as tf\n\ndef build_graph(toggle=False):\n    tf.set_random_seed(2017)\n    x = tf.placeholder(tf.float32, [20], name='x')\n\n    if toggle:\n        z = tf.reduce_mean(x)\n    else:\n        z = tf.reduce_sum(x) / tf.cast(tf.shape(x)[0], tf.float32)\n\n    b = tf.get_variable('b', [])\n    y = x + b\n\n    return z\n\ndef main():\n    for toggle in [False, True]:\n        for i in range(2):\n            g = tf.Graph()\n            with g.as_default():\n                build_graph(toggle)\n\n                with tf.Session() as sess:\n                    sess.run(tf.global_variables_initializer())\n\n                    b = tf.trainable_variables()[0]\n                    print ('toggle=%s\\titer=%d\\tbias_name=%s\\tbias_val = %.4f' %\n                           (toggle, i, b.name, sess.run(b)))\n\nif __name__ == '__main__':\n    main()\n\nOutput when I run this:\ntoggle=False    iter=0  bias_name=b:0   bias_val = -0.3459\ntoggle=False    iter=1  bias_name=b:0   bias_val = -0.3459\ntoggle=True     iter=0  bias_name=b:0   bias_val = -1.4101\ntoggle=True     iter=1  bias_name=b:0   bias_val = -1.4101\n\nNote that the bias_val is consistent with a given value of toggle but not across changing values of toggle.\nObservation: If I move the get_variable call before the toggle branch then the variable is always initialized to the same value.", "body": "I've created a small reproducible example.\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\ndef build_graph(toggle=False):\r\n    tf.set_random_seed(2017)\r\n    x = tf.placeholder(tf.float32, [20], name='x')\r\n\r\n    if toggle:\r\n        z = tf.reduce_mean(x)\r\n    else:\r\n        z = tf.reduce_sum(x) / tf.cast(tf.shape(x)[0], tf.float32)\r\n\r\n    b = tf.get_variable('b', [])\r\n    y = x + b\r\n\r\n    return z\r\n\r\ndef main():\r\n    for toggle in [False, True]:\r\n        for i in range(2):\r\n            g = tf.Graph()\r\n            with g.as_default():\r\n                build_graph(toggle)\r\n\r\n                with tf.Session() as sess:\r\n                    sess.run(tf.global_variables_initializer())\r\n\r\n                    b = tf.trainable_variables()[0]\r\n                    print ('toggle=%s\\titer=%d\\tbias_name=%s\\tbias_val = %.4f' %\r\n                           (toggle, i, b.name, sess.run(b)))\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n\r\n```\r\n\r\nOutput when I run this:\r\n```\r\ntoggle=False    iter=0  bias_name=b:0   bias_val = -0.3459\r\ntoggle=False    iter=1  bias_name=b:0   bias_val = -0.3459\r\ntoggle=True     iter=0  bias_name=b:0   bias_val = -1.4101\r\ntoggle=True     iter=1  bias_name=b:0   bias_val = -1.4101\r\n```\r\n\r\nNote that the ``bias_val`` is consistent with a given value of toggle but not across changing values of toggle. \r\n\r\nObservation: If I move the ``get_variable`` call before the toggle branch then the variable is always initialized to the same value."}