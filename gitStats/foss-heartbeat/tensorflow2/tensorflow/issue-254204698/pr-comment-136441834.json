{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/136441834", "pull_request_review_id": 59982513, "id": 136441834, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjQ0MTgzNA==", "diff_hunk": "@@ -679,6 +682,30 @@ TEST_F(CWiseUnaryGradTest, Atan_Complex) {\n   }\n }\n \n+TEST_F(CWiseUnaryGradTest, Lgamma) {\n+  auto x_fn = [this](const int i) { return RV({0, -1, 1, -2, 2, -3, 3}); };\n+  auto dy_fn = [this](const float x) { return x + RV({-2, 2, -3, 3, -4, 4}); };\n+  auto dx_fn = [this](const float x, const float dy) {\n+    // where is digamma? Eigen::digamma ?", "path": "tensorflow/cc/gradients/math_grad_test.cc", "position": null, "original_position": 18, "commit_id": "f7b8c38cd1abfcc5bd6a6ecf11c218f1c74c6772", "original_commit_id": "98a2bab17ee5de636ad88891aaf0b0c8082fb585", "user": {"login": "kbsriram", "id": 1495065, "node_id": "MDQ6VXNlcjE0OTUwNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1495065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbsriram", "html_url": "https://github.com/kbsriram", "followers_url": "https://api.github.com/users/kbsriram/followers", "following_url": "https://api.github.com/users/kbsriram/following{/other_user}", "gists_url": "https://api.github.com/users/kbsriram/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbsriram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbsriram/subscriptions", "organizations_url": "https://api.github.com/users/kbsriram/orgs", "repos_url": "https://api.github.com/users/kbsriram/repos", "events_url": "https://api.github.com/users/kbsriram/events{/privacy}", "received_events_url": "https://api.github.com/users/kbsriram/received_events", "type": "User", "site_admin": false}, "body": "Hm... don't have any guidance here, though it strikes me all these tests probably should use ComputeGradientError anyway :-) but unfortunately it currently only tests for real-valued inputs, not complex ones.\r\n\r\nIn the interests of simplicity, maybe one alternative is to use `NaryGradTest` rather than the `CWiseUnaryGradTest`, and add a note that it doesn't test complex values? You'll want to select values away from any poles to avoid numeric estimation errors. Maybe something like\r\n```c++\r\nTEST_F(NaryGradTest, Lgamma) {\r\n// ...\r\n  TensorShape shape({2, 3});\r\n  auto x = PlaceHolder(scope_, DT_FLOAT, Placeholder::Shape(shape));\r\n  auto y = Lgamma(scope_, x);\r\n  Tensor x_init_value = test::AsTensor<float>({ /* six random float values, but not close to any poles for Lgamma */}, {2, 3});\r\n  RunTest(x, x_init_value, y, shape);\r\n}", "created_at": "2017-08-31T20:33:49Z", "updated_at": "2017-09-07T22:01:39Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/12720#discussion_r136441834", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12720", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/136441834"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/12720#discussion_r136441834"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12720"}}, "body_html": "<p>Hm... don't have any guidance here, though it strikes me all these tests probably should use ComputeGradientError anyway :-) but unfortunately it currently only tests for real-valued inputs, not complex ones.</p>\n<p>In the interests of simplicity, maybe one alternative is to use <code>NaryGradTest</code> rather than the <code>CWiseUnaryGradTest</code>, and add a note that it doesn't test complex values? You'll want to select values away from any poles to avoid numeric estimation errors. Maybe something like</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-en\">TEST_F</span>(NaryGradTest, Lgamma) {\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> ...</span>\n  TensorShape <span class=\"pl-smi\">shape</span>({<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>});\n  <span class=\"pl-k\">auto</span> x = <span class=\"pl-c1\">PlaceHolder</span>(scope_, DT_FLOAT, <span class=\"pl-c1\">Placeholder::Shape</span>(shape));\n  <span class=\"pl-k\">auto</span> y = <span class=\"pl-c1\">Lgamma</span>(scope_, x);\n  Tensor x_init_value = test::AsTensor&lt;<span class=\"pl-k\">float</span>&gt;({ <span class=\"pl-c\"><span class=\"pl-c\">/*</span> six random float values, but not close to any poles for Lgamma <span class=\"pl-c\">*/</span></span>}, {<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>});\n  <span class=\"pl-c1\">RunTest</span>(x, x_init_value, y, shape);\n}</pre></div>", "body_text": "Hm... don't have any guidance here, though it strikes me all these tests probably should use ComputeGradientError anyway :-) but unfortunately it currently only tests for real-valued inputs, not complex ones.\nIn the interests of simplicity, maybe one alternative is to use NaryGradTest rather than the CWiseUnaryGradTest, and add a note that it doesn't test complex values? You'll want to select values away from any poles to avoid numeric estimation errors. Maybe something like\nTEST_F(NaryGradTest, Lgamma) {\n// ...\n  TensorShape shape({2, 3});\n  auto x = PlaceHolder(scope_, DT_FLOAT, Placeholder::Shape(shape));\n  auto y = Lgamma(scope_, x);\n  Tensor x_init_value = test::AsTensor<float>({ /* six random float values, but not close to any poles for Lgamma */}, {2, 3});\n  RunTest(x, x_init_value, y, shape);\n}", "in_reply_to_id": 136242126}