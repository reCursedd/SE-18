{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/400784757", "html_url": "https://github.com/tensorflow/tensorflow/issues/20309#issuecomment-400784757", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20309", "id": 400784757, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDc4NDc1Nw==", "user": {"login": "zhangyaobit", "id": 1034716, "node_id": "MDQ6VXNlcjEwMzQ3MTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1034716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhangyaobit", "html_url": "https://github.com/zhangyaobit", "followers_url": "https://api.github.com/users/zhangyaobit/followers", "following_url": "https://api.github.com/users/zhangyaobit/following{/other_user}", "gists_url": "https://api.github.com/users/zhangyaobit/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhangyaobit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhangyaobit/subscriptions", "organizations_url": "https://api.github.com/users/zhangyaobit/orgs", "repos_url": "https://api.github.com/users/zhangyaobit/repos", "events_url": "https://api.github.com/users/zhangyaobit/events{/privacy}", "received_events_url": "https://api.github.com/users/zhangyaobit/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-27T18:30:38Z", "updated_at": "2018-06-27T19:54:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=26657721\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/moboehle\">@moboehle</a> for the detailed report and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> helping on debugging the issue.</p>\n<p>With 1x1 filter in NWC format, the underlying Conv implementation is GEMM-based, which could be faster than the non-GEMM-based Conv implementation in NCW format, as you have already observed. NCW is in general faster than NWC, but 1x1 filter is an exception (which we also observed previously).</p>\n<p>We plan to add auto-tuning support in future for layout optimizer, which will address this issue (<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15736910\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zheng-xq\">@zheng-xq</a> can provide more details); currently it would use NCW layout for the whole model in a blanket manner. This is less ideal but ok for most models because (1) there are typically fewer conv layers with 1x1 filter than the conv layers with non-1x1 filters (2) the conv layers with 1x1 filter are also much cheaper computationally. But I think your model might be an exception, which extensively uses 1x1 filters.</p>\n<p>Before the auto-tuning support, you have a few options to work around this: (1) turn off layout optimizer, and manually specify the data format for each conv, this will achieve the optimal result; it is just that it takes manual effort to implement, (2) either turn on or off layout optimizer considering the overall model-level speed and memory metrics; this produces less than optimal results, but at least give you some control.</p>", "body_text": "Thanks @moboehle for the detailed report and @asimshankar helping on debugging the issue.\nWith 1x1 filter in NWC format, the underlying Conv implementation is GEMM-based, which could be faster than the non-GEMM-based Conv implementation in NCW format, as you have already observed. NCW is in general faster than NWC, but 1x1 filter is an exception (which we also observed previously).\nWe plan to add auto-tuning support in future for layout optimizer, which will address this issue (@zheng-xq can provide more details); currently it would use NCW layout for the whole model in a blanket manner. This is less ideal but ok for most models because (1) there are typically fewer conv layers with 1x1 filter than the conv layers with non-1x1 filters (2) the conv layers with 1x1 filter are also much cheaper computationally. But I think your model might be an exception, which extensively uses 1x1 filters.\nBefore the auto-tuning support, you have a few options to work around this: (1) turn off layout optimizer, and manually specify the data format for each conv, this will achieve the optimal result; it is just that it takes manual effort to implement, (2) either turn on or off layout optimizer considering the overall model-level speed and memory metrics; this produces less than optimal results, but at least give you some control.", "body": "Thanks @moboehle for the detailed report and @asimshankar helping on debugging the issue.\r\n\r\nWith 1x1 filter in NWC format, the underlying Conv implementation is GEMM-based, which could be faster than the non-GEMM-based Conv implementation in NCW format, as you have already observed. NCW is in general faster than NWC, but 1x1 filter is an exception (which we also observed previously).\r\n\r\nWe plan to add auto-tuning support in future for layout optimizer, which will address this issue (@zheng-xq can provide more details); currently it would use NCW layout for the whole model in a blanket manner. This is less ideal but ok for most models because (1) there are typically fewer conv layers with 1x1 filter than the conv layers with non-1x1 filters (2) the conv layers with 1x1 filter are also much cheaper computationally. But I think your model might be an exception, which extensively uses 1x1 filters.\r\n\r\nBefore the auto-tuning support, you have a few options to work around this: (1) turn off layout optimizer, and manually specify the data format for each conv, this will achieve the optimal result; it is just that it takes manual effort to implement, (2) either turn on or off layout optimizer considering the overall model-level speed and memory metrics; this produces less than optimal results, but at least give you some control."}