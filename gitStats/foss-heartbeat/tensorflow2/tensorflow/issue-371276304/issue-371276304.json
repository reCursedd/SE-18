{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23054", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23054/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23054/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23054/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23054", "id": 371276304, "node_id": "MDU6SXNzdWUzNzEyNzYzMDQ=", "number": 23054, "title": "tanh on CPU exceeds range (and is inconsistent)", "user": {"login": "CamdenCU", "id": 23249050, "node_id": "MDQ6VXNlcjIzMjQ5MDUw", "avatar_url": "https://avatars3.githubusercontent.com/u/23249050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CamdenCU", "html_url": "https://github.com/CamdenCU", "followers_url": "https://api.github.com/users/CamdenCU/followers", "following_url": "https://api.github.com/users/CamdenCU/following{/other_user}", "gists_url": "https://api.github.com/users/CamdenCU/gists{/gist_id}", "starred_url": "https://api.github.com/users/CamdenCU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CamdenCU/subscriptions", "organizations_url": "https://api.github.com/users/CamdenCU/orgs", "repos_url": "https://api.github.com/users/CamdenCU/repos", "events_url": "https://api.github.com/users/CamdenCU/events{/privacy}", "received_events_url": "https://api.github.com/users/CamdenCU/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1097547147, "node_id": "MDU6TGFiZWwxMDk3NTQ3MTQ3", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:ops", "name": "comp:ops", "color": "0052cc", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, {"login": "harshini-gadige", "id": 42781361, "node_id": "MDQ6VXNlcjQyNzgxMzYx", "avatar_url": "https://avatars1.githubusercontent.com/u/42781361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harshini-gadige", "html_url": "https://github.com/harshini-gadige", "followers_url": "https://api.github.com/users/harshini-gadige/followers", "following_url": "https://api.github.com/users/harshini-gadige/following{/other_user}", "gists_url": "https://api.github.com/users/harshini-gadige/gists{/gist_id}", "starred_url": "https://api.github.com/users/harshini-gadige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harshini-gadige/subscriptions", "organizations_url": "https://api.github.com/users/harshini-gadige/orgs", "repos_url": "https://api.github.com/users/harshini-gadige/repos", "events_url": "https://api.github.com/users/harshini-gadige/events{/privacy}", "received_events_url": "https://api.github.com/users/harshini-gadige/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-10-17T21:34:41Z", "updated_at": "2018-11-09T18:51:56Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Linux Ubuntu 18.04.1 LTS</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary (or source)</li>\n<li><strong>TensorFlow version (use command below)</strong>: ('v1.10.0-0-g656e7a2b34', '1.10.0')</li>\n<li><strong>Python version</strong>: Python 2.7.15rc1</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A, CPU problem</li>\n<li><strong>GPU model and memory</strong>: N/A</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<pre><code>import numpy\nimport tensorflow\nsess = tensorflow.Session()\nsess.run(tensorflow.tanh(numpy.arange(8.8,9.0,0.01,dtype=numpy.float32)))\n</code></pre>\n<h3>Describe the problem</h3>\n<p>tanh on float32s can return values outside of the range [-1,1] when run on a CPU, which suggests a bug in its implementation.  This occurs across multiple machines and builds (but does not seem to occur for me when running on a GPU, or when using numpy instead of tensorflow).  On the system specs given above, the commands produce two instances of 1.0000001:</p>\n<pre><code>&gt;&gt;&gt; sess.run(tensorflow.tanh(numpy.arange(8.8,9.0,0.01,dtype=numpy.float32)))\narray([1.        , 1.        , 0.99999994, 1.0000001 , 1.        ,\n       0.99999994, 0.9999998 , 0.99999994, 0.9999998 , 1.        ,\n       1.0000001 , 0.9999998 , 1.        , 0.99999994, 0.9999998 ,\n       0.99999994, 1.        , 1.        , 0.9999998 , 1.        ],\n      dtype=float32)\n</code></pre>\n<p>Of lesser concern, return values also differ on the same system when specifying overlapping ranges (here 8.8 changed to 8.9 does not match second half of above):</p>\n<pre><code>&gt;&gt;&gt; sess.run(tensorflow.tanh(numpy.arange(8.9,9.0,0.01,dtype=numpy.float32)))\narray([1.        , 0.99999994, 1.        , 0.99999994, 1.0000001 ,\n       0.9999998 , 1.        , 1.0000001 , 1.        , 1.        ],\n      dtype=float32)\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 18.04.1 LTS\nTensorFlow installed from (source or binary): binary (or source)\nTensorFlow version (use command below): ('v1.10.0-0-g656e7a2b34', '1.10.0')\nPython version: Python 2.7.15rc1\nCUDA/cuDNN version: N/A, CPU problem\nGPU model and memory: N/A\nExact command to reproduce:\n\nimport numpy\nimport tensorflow\nsess = tensorflow.Session()\nsess.run(tensorflow.tanh(numpy.arange(8.8,9.0,0.01,dtype=numpy.float32)))\n\nDescribe the problem\ntanh on float32s can return values outside of the range [-1,1] when run on a CPU, which suggests a bug in its implementation.  This occurs across multiple machines and builds (but does not seem to occur for me when running on a GPU, or when using numpy instead of tensorflow).  On the system specs given above, the commands produce two instances of 1.0000001:\n>>> sess.run(tensorflow.tanh(numpy.arange(8.8,9.0,0.01,dtype=numpy.float32)))\narray([1.        , 1.        , 0.99999994, 1.0000001 , 1.        ,\n       0.99999994, 0.9999998 , 0.99999994, 0.9999998 , 1.        ,\n       1.0000001 , 0.9999998 , 1.        , 0.99999994, 0.9999998 ,\n       0.99999994, 1.        , 1.        , 0.9999998 , 1.        ],\n      dtype=float32)\n\nOf lesser concern, return values also differ on the same system when specifying overlapping ranges (here 8.8 changed to 8.9 does not match second half of above):\n>>> sess.run(tensorflow.tanh(numpy.arange(8.9,9.0,0.01,dtype=numpy.float32)))\narray([1.        , 0.99999994, 1.        , 0.99999994, 1.0000001 ,\n       0.9999998 , 1.        , 1.0000001 , 1.        , 1.        ],\n      dtype=float32)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux Ubuntu 18.04.1 LTS\r\n- **TensorFlow installed from (source or binary)**: binary (or source)\r\n- **TensorFlow version (use command below)**: ('v1.10.0-0-g656e7a2b34', '1.10.0')\r\n- **Python version**: Python 2.7.15rc1\r\n- **CUDA/cuDNN version**: N/A, CPU problem\r\n- **GPU model and memory**: N/A\r\n- **Exact command to reproduce**: \r\n```\r\nimport numpy\r\nimport tensorflow\r\nsess = tensorflow.Session()\r\nsess.run(tensorflow.tanh(numpy.arange(8.8,9.0,0.01,dtype=numpy.float32)))\r\n```\r\n\r\n### Describe the problem\r\ntanh on float32s can return values outside of the range [-1,1] when run on a CPU, which suggests a bug in its implementation.  This occurs across multiple machines and builds (but does not seem to occur for me when running on a GPU, or when using numpy instead of tensorflow).  On the system specs given above, the commands produce two instances of 1.0000001:\r\n```\r\n>>> sess.run(tensorflow.tanh(numpy.arange(8.8,9.0,0.01,dtype=numpy.float32)))\r\narray([1.        , 1.        , 0.99999994, 1.0000001 , 1.        ,\r\n       0.99999994, 0.9999998 , 0.99999994, 0.9999998 , 1.        ,\r\n       1.0000001 , 0.9999998 , 1.        , 0.99999994, 0.9999998 ,\r\n       0.99999994, 1.        , 1.        , 0.9999998 , 1.        ],\r\n      dtype=float32)\r\n```\r\n\r\nOf lesser concern, return values also differ on the same system when specifying overlapping ranges (here 8.8 changed to 8.9 does not match second half of above):\r\n```\r\n>>> sess.run(tensorflow.tanh(numpy.arange(8.9,9.0,0.01,dtype=numpy.float32)))\r\narray([1.        , 0.99999994, 1.        , 0.99999994, 1.0000001 ,\r\n       0.9999998 , 1.        , 1.0000001 , 1.        , 1.        ],\r\n      dtype=float32)\r\n```"}