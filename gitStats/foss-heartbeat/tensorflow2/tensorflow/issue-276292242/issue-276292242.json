{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14826", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14826/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14826/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14826/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14826", "id": 276292242, "node_id": "MDU6SXNzdWUyNzYyOTIyNDI=", "number": 14826, "title": "bug about tensorflow can not call opencv imread properly", "user": {"login": "BKZero", "id": 18680778, "node_id": "MDQ6VXNlcjE4NjgwNzc4", "avatar_url": "https://avatars2.githubusercontent.com/u/18680778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BKZero", "html_url": "https://github.com/BKZero", "followers_url": "https://api.github.com/users/BKZero/followers", "following_url": "https://api.github.com/users/BKZero/following{/other_user}", "gists_url": "https://api.github.com/users/BKZero/gists{/gist_id}", "starred_url": "https://api.github.com/users/BKZero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BKZero/subscriptions", "organizations_url": "https://api.github.com/users/BKZero/orgs", "repos_url": "https://api.github.com/users/BKZero/repos", "events_url": "https://api.github.com/users/BKZero/events{/privacy}", "received_events_url": "https://api.github.com/users/BKZero/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}, {"id": 473173351, "node_id": "MDU6TGFiZWw0NzMxNzMzNTE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:build/install", "name": "type:build/install", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-11-23T08:16:13Z", "updated_at": "2018-01-11T22:18:57Z", "closed_at": "2018-01-11T22:18:57Z", "author_association": "NONE", "body_html": "<hr>\n<h3>System information</h3>\n<p>**- <strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes</p>\n<ul>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: ubuntu 14.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4</li>\n<li><strong>Python version</strong>: 2.7(but actually i am talking about c++ code)</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.5.4/0.7.0 all tried</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:  4.8.4</li>\n<li><strong>CUDA/cuDNN version</strong>: N/A</li>\n<li><strong>GPU model and memory</strong>: CPU mode</li>\n<li><strong>Exact command to reproduce</strong>: bazel run -c opt //tensorflow/cc/face:face**</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>i add opencv as a third party lib to tensorflow, and modify the workspace and BUILD file to include it to the project. it works well when i use tensorflow 1.2.1 or version before it. recently i update my tensorflow to the newest version, it recommand i must update my bazel at least 0.5.4(i use 0.5.2 with jdk7 before).<br>\nand when i update bazel, and move my own code to the new project, compiling seems ok. but when i run the binary, it seems not right. i can not load a jpeg file when i use cv::imread, it doesn't crash, but return a cv::Mat with size 0. in the new project, i can load a bmp file properly, so i guess it is because the project does not link the libjpeg.<br>\nbut i never need to link the libjpeg manually, because it is included in the opencv library. so i guess there is a bug in the new version of tensorflow.<br>\ni have tried the linkopt with -ljpeg, but it does not work.</p>\n<h3>Source code / logs</h3>\n<p>WORKSPACE File:<br>\nnew_local_repository(<br>\nname = \"opencv\",<br>\npath = \"/usr/local\",<br>\nbuild_file = \"opencv.BUILD\",<br>\n)<br>\nBUILD file of opencv:<br>\ncc_library(<br>\nname = \"opencv\",<br>\nsrcs = glob([\"lib/<em>.so</em>\"]),<br>\nhdrs = glob([\"include/**/*.hpp\"]),<br>\nincludes = [\"include\"],<br>\nvisibility = [\"//visibility:public\"],<br>\nlinkstatic = 1,<br>\n)<br>\nBUILD file of my code<br>\ntf_cc_binary(<br>\nname = \"face\",<br>\nsrcs = [\"face.cc\"],<br>\nincludes = [\".\"],<br>\ndeps = [<br>\n\"//tensorflow/cc:cc_ops\",<br>\n\"//tensorflow/cc:client_session\",<br>\n\"//tensorflow/core:tensorflow\",<br>\n\"@opencv//:opencv\",<br>\n],<br>\ncopts = [\"-fopenmp\"],<br>\nlinkopts = [\"-lgomp\", \"-ljpeg\"],<br>\n)<br>\nmy code:<br>\ncv::Mat img = cv::imread(\"pic.jpg\");<br>\nstd::cout&lt;&lt;line&lt;&lt;\" \"&lt;&lt;img.channels()&lt;&lt;\" \"&lt;&lt;img.cols&lt;&lt;\" \"&lt;&lt;img.rows&lt;&lt;endl;<br>\nthe log will be: pic.jpg 1 0 0<br>\nbut if i read a bmp file:<br>\ncv::Mat img = cv::imread(\"pic.bmp\");<br>\nstd::cout&lt;&lt;line&lt;&lt;\" \"&lt;&lt;img.channels()&lt;&lt;\" \"&lt;&lt;img.cols&lt;&lt;\" \"&lt;&lt;img.rows&lt;&lt;endl;<br>\nthe log will be: pic.bmp 3 500 355</p>", "body_text": "System information\n**- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): ubuntu 14.04\nTensorFlow installed from (source or binary): source\nTensorFlow version (use command below): 1.4\nPython version: 2.7(but actually i am talking about c++ code)\nBazel version (if compiling from source): 0.5.4/0.7.0 all tried\nGCC/Compiler version (if compiling from source):  4.8.4\nCUDA/cuDNN version: N/A\nGPU model and memory: CPU mode\nExact command to reproduce: bazel run -c opt //tensorflow/cc/face:face**\n\nDescribe the problem\ni add opencv as a third party lib to tensorflow, and modify the workspace and BUILD file to include it to the project. it works well when i use tensorflow 1.2.1 or version before it. recently i update my tensorflow to the newest version, it recommand i must update my bazel at least 0.5.4(i use 0.5.2 with jdk7 before).\nand when i update bazel, and move my own code to the new project, compiling seems ok. but when i run the binary, it seems not right. i can not load a jpeg file when i use cv::imread, it doesn't crash, but return a cv::Mat with size 0. in the new project, i can load a bmp file properly, so i guess it is because the project does not link the libjpeg.\nbut i never need to link the libjpeg manually, because it is included in the opencv library. so i guess there is a bug in the new version of tensorflow.\ni have tried the linkopt with -ljpeg, but it does not work.\nSource code / logs\nWORKSPACE File:\nnew_local_repository(\nname = \"opencv\",\npath = \"/usr/local\",\nbuild_file = \"opencv.BUILD\",\n)\nBUILD file of opencv:\ncc_library(\nname = \"opencv\",\nsrcs = glob([\"lib/.so\"]),\nhdrs = glob([\"include/**/*.hpp\"]),\nincludes = [\"include\"],\nvisibility = [\"//visibility:public\"],\nlinkstatic = 1,\n)\nBUILD file of my code\ntf_cc_binary(\nname = \"face\",\nsrcs = [\"face.cc\"],\nincludes = [\".\"],\ndeps = [\n\"//tensorflow/cc:cc_ops\",\n\"//tensorflow/cc:client_session\",\n\"//tensorflow/core:tensorflow\",\n\"@opencv//:opencv\",\n],\ncopts = [\"-fopenmp\"],\nlinkopts = [\"-lgomp\", \"-ljpeg\"],\n)\nmy code:\ncv::Mat img = cv::imread(\"pic.jpg\");\nstd::cout<<line<<\" \"<<img.channels()<<\" \"<<img.cols<<\" \"<<img.rows<<endl;\nthe log will be: pic.jpg 1 0 0\nbut if i read a bmp file:\ncv::Mat img = cv::imread(\"pic.bmp\");\nstd::cout<<line<<\" \"<<img.channels()<<\" \"<<img.cols<<\" \"<<img.rows<<endl;\nthe log will be: pic.bmp 3 500 355", "body": "\r\n------------------------\r\n\r\n### System information\r\n**- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: ubuntu 14.04\r\n- **TensorFlow installed from (source or binary)**: source\r\n- **TensorFlow version (use command below)**: 1.4\r\n- **Python version**: 2.7(but actually i am talking about c++ code)\r\n- **Bazel version (if compiling from source)**: 0.5.4/0.7.0 all tried\r\n- **GCC/Compiler version (if compiling from source)**:  4.8.4\r\n- **CUDA/cuDNN version**: N/A\r\n- **GPU model and memory**: CPU mode\r\n- **Exact command to reproduce**: bazel run -c opt //tensorflow/cc/face:face**\r\n\r\n### Describe the problem\r\ni add opencv as a third party lib to tensorflow, and modify the workspace and BUILD file to include it to the project. it works well when i use tensorflow 1.2.1 or version before it. recently i update my tensorflow to the newest version, it recommand i must update my bazel at least 0.5.4(i use 0.5.2 with jdk7 before).\r\nand when i update bazel, and move my own code to the new project, compiling seems ok. but when i run the binary, it seems not right. i can not load a jpeg file when i use cv::imread, it doesn't crash, but return a cv::Mat with size 0. in the new project, i can load a bmp file properly, so i guess it is because the project does not link the libjpeg.\r\nbut i never need to link the libjpeg manually, because it is included in the opencv library. so i guess there is a bug in the new version of tensorflow.\r\ni have tried the linkopt with -ljpeg, but it does not work.\r\n\r\n### Source code / logs\r\nWORKSPACE File:\r\nnew_local_repository(\r\n  name = \"opencv\",\r\n  path = \"/usr/local\",\r\n  build_file = \"opencv.BUILD\",\r\n)\r\nBUILD file of opencv:\r\ncc_library(\r\n    name = \"opencv\",\r\n    srcs = glob([\"lib/*.so*\"]),\r\n    hdrs = glob([\"include/**/*.hpp\"]),\r\n    includes = [\"include\"],\r\n    visibility = [\"//visibility:public\"], \r\n    linkstatic = 1,\r\n)\r\nBUILD file of my code\r\ntf_cc_binary(\r\n    name = \"face\",\r\n    srcs = [\"face.cc\"],\r\n    includes = [\".\"],\r\n    deps = [\r\n        \"//tensorflow/cc:cc_ops\",\r\n        \"//tensorflow/cc:client_session\",\r\n        \"//tensorflow/core:tensorflow\",\r\n        \"@opencv//:opencv\",\r\n    ],\r\n    copts = [\"-fopenmp\"],\r\n    linkopts = [\"-lgomp\", \"-ljpeg\"],\r\n)\r\nmy code:\r\n        cv::Mat img = cv::imread(\"pic.jpg\");\r\n        std::cout<<line<<\" \"<<img.channels()<<\" \"<<img.cols<<\" \"<<img.rows<<endl;\r\nthe log will be: pic.jpg 1 0 0\r\nbut if i read a bmp file:\r\n        cv::Mat img = cv::imread(\"pic.bmp\");\r\n        std::cout<<line<<\" \"<<img.channels()<<\" \"<<img.cols<<\" \"<<img.rows<<endl;\r\nthe log will be: pic.bmp 3 500 355\r\n"}