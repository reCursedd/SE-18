{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/151286654", "pull_request_review_id": 76968383, "id": 151286654, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1MTI4NjY1NA==", "diff_hunk": "@@ -0,0 +1,112 @@\n+/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include \"tensorflow/core/framework/op_kernel.h\"\n+#include \"tensorflow/core/framework/tensor.h\"\n+#include \"tensorflow/core/framework/tensor_shape.h\"\n+#include \"tensorflow/core/framework/types.h\"\n+#include \"tensorflow/core/lib/core/errors.h\"\n+#include \"tensorflow/core/lib/strings/numbers.h\"\n+#include \"tensorflow/core/lib/strings/str_util.h\"\n+\n+namespace tensorflow {\n+\n+template <typename T>\n+class DecodeLibsvmOp : public OpKernel {\n+ public:\n+  explicit DecodeLibsvmOp(OpKernelConstruction* ctx) : OpKernel(ctx) {\n+    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"num_features\", &num_features_));\n+  }\n+\n+  void Compute(OpKernelContext* ctx) override {\n+    const Tensor* input_tensor;\n+    OP_REQUIRES_OK(ctx, ctx->input(\"input\", &input_tensor));\n+    const auto& input_flat = input_tensor->flat<string>();\n+\n+    Tensor* label_tensor;\n+    Tensor* feature_tensor;\n+    OP_REQUIRES_OK(ctx,\n+                   ctx->allocate_output(0, TensorShape({input_flat.size()}),\n+                                        &label_tensor));\n+    OP_REQUIRES_OK(ctx, ctx->allocate_output(\n+                            1, TensorShape({input_flat.size(), num_features_}),\n+                            &feature_tensor));\n+\n+    auto label = label_tensor->flat<int64>();\n+    auto feature = feature_tensor->matrix<T>();\n+    for (int i = 0; i < input_flat.size(); ++i) {\n+      std::vector<string> entries =\n+          str_util::Split(input_flat(i), \" \", str_util::SkipEmpty());\n+      OP_REQUIRES(ctx, (entries.size() > 0),\n+                  errors::InvalidArgument(\"No entries found for input[\", i,\n+                                          \"]: \\\"\", input_flat(i), \"\\\"\"));\n+      int64 label_value;", "path": "tensorflow/contrib/libsvm/kernels/decode_libsvm_op.cc", "position": null, "original_position": 55, "commit_id": "2de6cfd86fe521fd63d48eea7f25ed32f1f55309", "original_commit_id": "646cb84cc9a11c88432facda3d3b4d42ad9c3ae3", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "body": "In the implementation [I've seen](https://ece.uwaterloo.ca/~nnikvand/Coderep/libsvm-3.16/tools/checkdata.py) it appears that labels are treated as floating-point values. This was initially surprising to me, but I suppose it is possible that you'd have a dataset that maps sparse features to continuous values....\r\n\r\n(There's also a multi-label form, but that could be handled by a separate op that returns *two* `tf.SparseTensor` objects.)", "created_at": "2017-11-15T23:49:31Z", "updated_at": "2017-12-15T18:46:40Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/14330#discussion_r151286654", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14330", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/151286654"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/14330#discussion_r151286654"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14330"}}, "body_html": "<p>In the implementation <a href=\"https://ece.uwaterloo.ca/~nnikvand/Coderep/libsvm-3.16/tools/checkdata.py\" rel=\"nofollow\">I've seen</a> it appears that labels are treated as floating-point values. This was initially surprising to me, but I suppose it is possible that you'd have a dataset that maps sparse features to continuous values....</p>\n<p>(There's also a multi-label form, but that could be handled by a separate op that returns <em>two</em> <code>tf.SparseTensor</code> objects.)</p>", "body_text": "In the implementation I've seen it appears that labels are treated as floating-point values. This was initially surprising to me, but I suppose it is possible that you'd have a dataset that maps sparse features to continuous values....\n(There's also a multi-label form, but that could be handled by a separate op that returns two tf.SparseTensor objects.)", "in_reply_to_id": 150366506}