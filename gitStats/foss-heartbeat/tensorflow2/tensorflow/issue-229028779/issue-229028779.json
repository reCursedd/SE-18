{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9934", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9934/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9934/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9934/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9934", "id": 229028779, "node_id": "MDU6SXNzdWUyMjkwMjg3Nzk=", "number": 9934, "title": "No OpKernel was registered to support Op 'GatherNd' with these attrs", "user": {"login": "Koshub", "id": 7643346, "node_id": "MDQ6VXNlcjc2NDMzNDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/7643346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Koshub", "html_url": "https://github.com/Koshub", "followers_url": "https://api.github.com/users/Koshub/followers", "following_url": "https://api.github.com/users/Koshub/following{/other_user}", "gists_url": "https://api.github.com/users/Koshub/gists{/gist_id}", "starred_url": "https://api.github.com/users/Koshub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Koshub/subscriptions", "organizations_url": "https://api.github.com/users/Koshub/orgs", "repos_url": "https://api.github.com/users/Koshub/repos", "events_url": "https://api.github.com/users/Koshub/events{/privacy}", "received_events_url": "https://api.github.com/users/Koshub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-16T13:15:46Z", "updated_at": "2017-06-21T10:11:22Z", "closed_at": "2017-05-19T21:36:27Z", "author_association": "NONE", "body_html": "<p>env: macOS<br>\ntf version: master brunch</p>\n<p>I built tensorflow on <code>macOS</code> using <code>build_all_ios.sh</code>. Then I tried to load <code>frozen.pb</code> data created by python program. Here is a code to load graph in <code>iOS</code>:</p>\n<pre><code>    Status status;\n    Session *session;\n    \n    status = NewSession(SessionOptions(), &amp;session);\n    if (!status.ok()) {\n        return NO;\n    }\n    \n    GraphDef graph;\n    NSString *modelPath = [[NSBundle bundleForClass:[self class]] pathForResource:@\"frozen\" ofType:@\"pb\"];\n    status = ReadBinaryProto(Env::Default(), modelPath.fileSystemRepresentation, &amp;graph);\n    if (!status.ok()) {\n        return NO;\n    }\n    \n    status = session-&gt;Create(graph);\n    if (!status.ok()) {\n        std::cout &lt;&lt; status.ToString() &lt;&lt; \"\\n\";\n        return NO;\n    }\n</code></pre>\n<p>First thing is with default build settings <code>libtensorflow-core.a</code> is extremely large - more then 400 MB that is not applicable for using in mobile devices. In any case while loading <code>graph</code> I got and error:</p>\n<pre><code>Invalid argument: No OpKernel was registered to support Op 'Less' with these attrs.  Registered devices: [CPU], Registered kernels:\n     device='CPU'; T in [DT_FLOAT]\n     \n     [[Node: GRU-RNN/rnn/while/Less = Less[T=DT_INT32](GRU-RNN/rnn/while/Merge, GRU-RNN/rnn/while/Less/Enter)]]\n</code></pre>\n<p>I could not find how to solve it except manually change next files:</p>\n<ol>\n<li>added next code to <code>cwise_op_less.cc</code></li>\n</ol>\n<pre><code>#if defined(__ANDROID_TYPES_SLIM__)\n// We only register the first type when we have multi-argument calls in the\n// case where we're trying to reduce executable size, but it turns out that the\n// int32 version of this op is needed, so explicitly include it.\nREGISTER(BinaryOp, CPU, \"Less\", functor::less, int32);\n#endif  // __ANDROID_TYPES_SLIM__\n</code></pre>\n<ol start=\"2\">\n<li>added next code to <code>cwise_op_add_2.cc</code></li>\n</ol>\n<pre><code>#if defined(__ANDROID_TYPES_SLIM__)\n    // We only register the first type when we have multi-argument calls in the\n    // case where we're trying to reduce executable size, but it turns out that the\n    // int32 version of this op is needed, so explicitly include it.\n    REGISTER(BinaryOp, CPU, \"Add\", functor::add, int32);\n#endif  // __ANDROID_TYPES_SLIM__\n</code></pre>\n<p>The second change was added because of the same error but for <code>Add</code> operation.</p>\n<p>Then, I have got another error:</p>\n<pre><code>Invalid argument: No OpKernel was registered to support Op 'GatherNd' with these attrs.  Registered devices: [CPU], Registered kernels:\n  &lt;no registered kernels&gt;\n\n\t [[Node: GatherNd = GatherNd[Tindices=DT_INT32, Tparams=DT_FLOAT](GRU-RNN/rnn/transpose, stack)]]\n</code></pre>\n<p>I think this is because python script contains <code>tf.gather_nd</code> function. I found that <code>tf_op_files.txt</code> does not contain any <code>gather*</code> functions, so I tried to add them manually but I don't know that exactly should I add and where. Can you please provide some information about that and probably add some issues about <code>Less</code> and <code>Add</code> operations for <code>Int32</code> type?</p>", "body_text": "env: macOS\ntf version: master brunch\nI built tensorflow on macOS using build_all_ios.sh. Then I tried to load frozen.pb data created by python program. Here is a code to load graph in iOS:\n    Status status;\n    Session *session;\n    \n    status = NewSession(SessionOptions(), &session);\n    if (!status.ok()) {\n        return NO;\n    }\n    \n    GraphDef graph;\n    NSString *modelPath = [[NSBundle bundleForClass:[self class]] pathForResource:@\"frozen\" ofType:@\"pb\"];\n    status = ReadBinaryProto(Env::Default(), modelPath.fileSystemRepresentation, &graph);\n    if (!status.ok()) {\n        return NO;\n    }\n    \n    status = session->Create(graph);\n    if (!status.ok()) {\n        std::cout << status.ToString() << \"\\n\";\n        return NO;\n    }\n\nFirst thing is with default build settings libtensorflow-core.a is extremely large - more then 400 MB that is not applicable for using in mobile devices. In any case while loading graph I got and error:\nInvalid argument: No OpKernel was registered to support Op 'Less' with these attrs.  Registered devices: [CPU], Registered kernels:\n     device='CPU'; T in [DT_FLOAT]\n     \n     [[Node: GRU-RNN/rnn/while/Less = Less[T=DT_INT32](GRU-RNN/rnn/while/Merge, GRU-RNN/rnn/while/Less/Enter)]]\n\nI could not find how to solve it except manually change next files:\n\nadded next code to cwise_op_less.cc\n\n#if defined(__ANDROID_TYPES_SLIM__)\n// We only register the first type when we have multi-argument calls in the\n// case where we're trying to reduce executable size, but it turns out that the\n// int32 version of this op is needed, so explicitly include it.\nREGISTER(BinaryOp, CPU, \"Less\", functor::less, int32);\n#endif  // __ANDROID_TYPES_SLIM__\n\n\nadded next code to cwise_op_add_2.cc\n\n#if defined(__ANDROID_TYPES_SLIM__)\n    // We only register the first type when we have multi-argument calls in the\n    // case where we're trying to reduce executable size, but it turns out that the\n    // int32 version of this op is needed, so explicitly include it.\n    REGISTER(BinaryOp, CPU, \"Add\", functor::add, int32);\n#endif  // __ANDROID_TYPES_SLIM__\n\nThe second change was added because of the same error but for Add operation.\nThen, I have got another error:\nInvalid argument: No OpKernel was registered to support Op 'GatherNd' with these attrs.  Registered devices: [CPU], Registered kernels:\n  <no registered kernels>\n\n\t [[Node: GatherNd = GatherNd[Tindices=DT_INT32, Tparams=DT_FLOAT](GRU-RNN/rnn/transpose, stack)]]\n\nI think this is because python script contains tf.gather_nd function. I found that tf_op_files.txt does not contain any gather* functions, so I tried to add them manually but I don't know that exactly should I add and where. Can you please provide some information about that and probably add some issues about Less and Add operations for Int32 type?", "body": "env: macOS\r\ntf version: master brunch\r\n\r\nI built tensorflow on `macOS` using `build_all_ios.sh`. Then I tried to load `frozen.pb` data created by python program. Here is a code to load graph in `iOS`:\r\n\r\n```\r\n    Status status;\r\n    Session *session;\r\n    \r\n    status = NewSession(SessionOptions(), &session);\r\n    if (!status.ok()) {\r\n        return NO;\r\n    }\r\n    \r\n    GraphDef graph;\r\n    NSString *modelPath = [[NSBundle bundleForClass:[self class]] pathForResource:@\"frozen\" ofType:@\"pb\"];\r\n    status = ReadBinaryProto(Env::Default(), modelPath.fileSystemRepresentation, &graph);\r\n    if (!status.ok()) {\r\n        return NO;\r\n    }\r\n    \r\n    status = session->Create(graph);\r\n    if (!status.ok()) {\r\n        std::cout << status.ToString() << \"\\n\";\r\n        return NO;\r\n    }\r\n```\r\n\r\n First thing is with default build settings `libtensorflow-core.a` is extremely large - more then 400 MB that is not applicable for using in mobile devices. In any case while loading `graph` I got and error:\r\n\r\n```\r\nInvalid argument: No OpKernel was registered to support Op 'Less' with these attrs.  Registered devices: [CPU], Registered kernels:\r\n     device='CPU'; T in [DT_FLOAT]\r\n     \r\n     [[Node: GRU-RNN/rnn/while/Less = Less[T=DT_INT32](GRU-RNN/rnn/while/Merge, GRU-RNN/rnn/while/Less/Enter)]]\r\n```\r\n\r\nI could not find how to solve it except manually change next files:\r\n1) added next code to `cwise_op_less.cc`\r\n\r\n```\r\n#if defined(__ANDROID_TYPES_SLIM__)\r\n// We only register the first type when we have multi-argument calls in the\r\n// case where we're trying to reduce executable size, but it turns out that the\r\n// int32 version of this op is needed, so explicitly include it.\r\nREGISTER(BinaryOp, CPU, \"Less\", functor::less, int32);\r\n#endif  // __ANDROID_TYPES_SLIM__\r\n```\r\n2) added next code to `cwise_op_add_2.cc`\r\n\r\n```\r\n#if defined(__ANDROID_TYPES_SLIM__)\r\n    // We only register the first type when we have multi-argument calls in the\r\n    // case where we're trying to reduce executable size, but it turns out that the\r\n    // int32 version of this op is needed, so explicitly include it.\r\n    REGISTER(BinaryOp, CPU, \"Add\", functor::add, int32);\r\n#endif  // __ANDROID_TYPES_SLIM__\r\n```\r\n\r\nThe second change was added because of the same error but for `Add` operation.\r\n\r\nThen, I have got another error:\r\n```\r\nInvalid argument: No OpKernel was registered to support Op 'GatherNd' with these attrs.  Registered devices: [CPU], Registered kernels:\r\n  <no registered kernels>\r\n\r\n\t [[Node: GatherNd = GatherNd[Tindices=DT_INT32, Tparams=DT_FLOAT](GRU-RNN/rnn/transpose, stack)]]\r\n```\r\n I think this is because python script contains `tf.gather_nd` function. I found that `tf_op_files.txt` does not contain any `gather*` functions, so I tried to add them manually but I don't know that exactly should I add and where. Can you please provide some information about that and probably add some issues about `Less` and `Add` operations for `Int32` type?"}