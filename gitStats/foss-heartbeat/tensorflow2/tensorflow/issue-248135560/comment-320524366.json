{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/320524366", "html_url": "https://github.com/tensorflow/tensorflow/issues/12052#issuecomment-320524366", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12052", "id": 320524366, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDUyNDM2Ng==", "user": {"login": "4F2E4A2E", "id": 64590, "node_id": "MDQ6VXNlcjY0NTkw", "avatar_url": "https://avatars1.githubusercontent.com/u/64590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/4F2E4A2E", "html_url": "https://github.com/4F2E4A2E", "followers_url": "https://api.github.com/users/4F2E4A2E/followers", "following_url": "https://api.github.com/users/4F2E4A2E/following{/other_user}", "gists_url": "https://api.github.com/users/4F2E4A2E/gists{/gist_id}", "starred_url": "https://api.github.com/users/4F2E4A2E/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/4F2E4A2E/subscriptions", "organizations_url": "https://api.github.com/users/4F2E4A2E/orgs", "repos_url": "https://api.github.com/users/4F2E4A2E/repos", "events_url": "https://api.github.com/users/4F2E4A2E/events{/privacy}", "received_events_url": "https://api.github.com/users/4F2E4A2E/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-06T18:38:41Z", "updated_at": "2017-08-06T18:38:41Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I am trying to get cuDNN 7 with CUDA 8/9 running. CUDA 8 is not supported by the GTX 1080 Ti - at least the installer says so ^^</p>\n<p>I am having a big time trouble getting it running together. I want to point out this great article that sums up what i already have tried: <a href=\"https://nitishmutha.github.io/tensorflow/2017/01/22/TensorFlow-with-gpu-for-windows.html\" rel=\"nofollow\">https://nitishmutha.github.io/tensorflow/2017/01/22/TensorFlow-with-gpu-for-windows.html</a></p>\n<p>The CUDA examples are working via Visual-Studio in both setup combinations.<br>\nHere the output of the deviceQuery.exe which was compiled using Visual-Studio:</p>\n<pre><code>PS C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v9.0\\bin\\win64\\Release&gt; deviceQuery.exe\nC:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v9.0\\bin\\win64\\Release\\deviceQuery.exe Starting...\n\n CUDA Device Query (Runtime API) version (CUDART static linking)\n\nDetected 1 CUDA Capable device(s)\n\nDevice 0: \"GeForce GTX 1080 Ti\"\n  CUDA Driver Version / Runtime Version          9.0 / 9.0\n  CUDA Capability Major/Minor version number:    6.1\n  Total amount of global memory:                 11264 MBytes (11811160064 bytes)\n  (28) Multiprocessors, (128) CUDA Cores/MP:     3584 CUDA Cores\n  GPU Max Clock rate:                            1683 MHz (1.68 GHz)\n  Memory Clock rate:                             5505 Mhz\n  Memory Bus Width:                              352-bit\n  L2 Cache Size:                                 2883584 bytes\n  Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)\n  Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers\n  Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers\n  Total amount of constant memory:               65536 bytes\n  Total amount of shared memory per block:       49152 bytes\n  Total number of registers available per block: 65536\n  Warp size:                                     32\n  Maximum number of threads per multiprocessor:  2048\n  Maximum number of threads per block:           1024\n  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\n  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n  Maximum memory pitch:                          2147483647 bytes\n  Texture alignment:                             512 bytes\n  Concurrent copy and kernel execution:          Yes with 2 copy engine(s)\n  Run time limit on kernels:                     Yes\n  Integrated GPU sharing Host Memory:            No\n  Support host page-locked memory mapping:       Yes\n  Alignment requirement for Surfaces:            Yes\n  Device has ECC support:                        Disabled\n  CUDA Device Driver Mode (TCC or WDDM):         WDDM (Windows Display Driver Model)\n  Device supports Unified Addressing (UVA):      Yes\n  Supports Cooperative Kernel Launch:            No\n  Supports MultiDevice Co-op Kernel Launch:      No\n  Device PCI Domain ID / Bus ID / location ID:   0 / 1 / 0\n  Compute Mode:\n     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;\n\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 9.0, CUDA Runtime Version = 9.0, NumDevs = 1, Device0 = GeForce GTX 1080 Ti\nResult = PASS\n</code></pre>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23486130\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/tfboyd\">@tfboyd</a> do you have any link confirming the cuDNN update from Nvidea?</p>", "body_text": "I am trying to get cuDNN 7 with CUDA 8/9 running. CUDA 8 is not supported by the GTX 1080 Ti - at least the installer says so ^^\nI am having a big time trouble getting it running together. I want to point out this great article that sums up what i already have tried: https://nitishmutha.github.io/tensorflow/2017/01/22/TensorFlow-with-gpu-for-windows.html\nThe CUDA examples are working via Visual-Studio in both setup combinations.\nHere the output of the deviceQuery.exe which was compiled using Visual-Studio:\nPS C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v9.0\\bin\\win64\\Release> deviceQuery.exe\nC:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v9.0\\bin\\win64\\Release\\deviceQuery.exe Starting...\n\n CUDA Device Query (Runtime API) version (CUDART static linking)\n\nDetected 1 CUDA Capable device(s)\n\nDevice 0: \"GeForce GTX 1080 Ti\"\n  CUDA Driver Version / Runtime Version          9.0 / 9.0\n  CUDA Capability Major/Minor version number:    6.1\n  Total amount of global memory:                 11264 MBytes (11811160064 bytes)\n  (28) Multiprocessors, (128) CUDA Cores/MP:     3584 CUDA Cores\n  GPU Max Clock rate:                            1683 MHz (1.68 GHz)\n  Memory Clock rate:                             5505 Mhz\n  Memory Bus Width:                              352-bit\n  L2 Cache Size:                                 2883584 bytes\n  Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)\n  Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers\n  Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers\n  Total amount of constant memory:               65536 bytes\n  Total amount of shared memory per block:       49152 bytes\n  Total number of registers available per block: 65536\n  Warp size:                                     32\n  Maximum number of threads per multiprocessor:  2048\n  Maximum number of threads per block:           1024\n  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\n  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n  Maximum memory pitch:                          2147483647 bytes\n  Texture alignment:                             512 bytes\n  Concurrent copy and kernel execution:          Yes with 2 copy engine(s)\n  Run time limit on kernels:                     Yes\n  Integrated GPU sharing Host Memory:            No\n  Support host page-locked memory mapping:       Yes\n  Alignment requirement for Surfaces:            Yes\n  Device has ECC support:                        Disabled\n  CUDA Device Driver Mode (TCC or WDDM):         WDDM (Windows Display Driver Model)\n  Device supports Unified Addressing (UVA):      Yes\n  Supports Cooperative Kernel Launch:            No\n  Supports MultiDevice Co-op Kernel Launch:      No\n  Device PCI Domain ID / Bus ID / location ID:   0 / 1 / 0\n  Compute Mode:\n     < Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) >\n\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 9.0, CUDA Runtime Version = 9.0, NumDevs = 1, Device0 = GeForce GTX 1080 Ti\nResult = PASS\n\n@tfboyd do you have any link confirming the cuDNN update from Nvidea?", "body": "I am trying to get cuDNN 7 with CUDA 8/9 running. CUDA 8 is not supported by the GTX 1080 Ti - at least the installer says so ^^\r\n\r\nI am having a big time trouble getting it running together. I want to point out this great article that sums up what i already have tried: https://nitishmutha.github.io/tensorflow/2017/01/22/TensorFlow-with-gpu-for-windows.html\r\n\r\nThe CUDA examples are working via Visual-Studio in both setup combinations.\r\nHere the output of the deviceQuery.exe which was compiled using Visual-Studio:\r\n```\r\nPS C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v9.0\\bin\\win64\\Release> deviceQuery.exe\r\nC:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v9.0\\bin\\win64\\Release\\deviceQuery.exe Starting...\r\n\r\n CUDA Device Query (Runtime API) version (CUDART static linking)\r\n\r\nDetected 1 CUDA Capable device(s)\r\n\r\nDevice 0: \"GeForce GTX 1080 Ti\"\r\n  CUDA Driver Version / Runtime Version          9.0 / 9.0\r\n  CUDA Capability Major/Minor version number:    6.1\r\n  Total amount of global memory:                 11264 MBytes (11811160064 bytes)\r\n  (28) Multiprocessors, (128) CUDA Cores/MP:     3584 CUDA Cores\r\n  GPU Max Clock rate:                            1683 MHz (1.68 GHz)\r\n  Memory Clock rate:                             5505 Mhz\r\n  Memory Bus Width:                              352-bit\r\n  L2 Cache Size:                                 2883584 bytes\r\n  Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)\r\n  Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers\r\n  Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers\r\n  Total amount of constant memory:               65536 bytes\r\n  Total amount of shared memory per block:       49152 bytes\r\n  Total number of registers available per block: 65536\r\n  Warp size:                                     32\r\n  Maximum number of threads per multiprocessor:  2048\r\n  Maximum number of threads per block:           1024\r\n  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\r\n  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\r\n  Maximum memory pitch:                          2147483647 bytes\r\n  Texture alignment:                             512 bytes\r\n  Concurrent copy and kernel execution:          Yes with 2 copy engine(s)\r\n  Run time limit on kernels:                     Yes\r\n  Integrated GPU sharing Host Memory:            No\r\n  Support host page-locked memory mapping:       Yes\r\n  Alignment requirement for Surfaces:            Yes\r\n  Device has ECC support:                        Disabled\r\n  CUDA Device Driver Mode (TCC or WDDM):         WDDM (Windows Display Driver Model)\r\n  Device supports Unified Addressing (UVA):      Yes\r\n  Supports Cooperative Kernel Launch:            No\r\n  Supports MultiDevice Co-op Kernel Launch:      No\r\n  Device PCI Domain ID / Bus ID / location ID:   0 / 1 / 0\r\n  Compute Mode:\r\n     < Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) >\r\n\r\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 9.0, CUDA Runtime Version = 9.0, NumDevs = 1, Device0 = GeForce GTX 1080 Ti\r\nResult = PASS\r\n```\r\n\r\n@tfboyd do you have any link confirming the cuDNN update from Nvidea?"}