{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/220063749", "html_url": "https://github.com/tensorflow/tensorflow/pull/2417#issuecomment-220063749", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2417", "id": 220063749, "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDA2Mzc0OQ==", "user": {"login": "ibab", "id": 890531, "node_id": "MDQ6VXNlcjg5MDUzMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/890531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibab", "html_url": "https://github.com/ibab", "followers_url": "https://api.github.com/users/ibab/followers", "following_url": "https://api.github.com/users/ibab/following{/other_user}", "gists_url": "https://api.github.com/users/ibab/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibab/subscriptions", "organizations_url": "https://api.github.com/users/ibab/orgs", "repos_url": "https://api.github.com/users/ibab/repos", "events_url": "https://api.github.com/users/ibab/events{/privacy}", "received_events_url": "https://api.github.com/users/ibab/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-18T15:28:59Z", "updated_at": "2016-05-18T15:30:52Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Thanks for the comments!</p>\n<p><code>testOverloadComparisons</code> doesn't test for <code>complex64</code> because we can't define <code>greater/less</code> ops for it.<br>\nThe second part of <code>testOverloadComparisons</code> only seems to operate on booleans.<br>\n(And, strangely, tests <code>tf.equal</code> and <code>tf.not_equal</code> instead of the overloaded operators).<br>\nShould I add <code>_EQ</code> and <code>_NEQ</code> lambdas to test the overloading for <code>==</code> and <code>!=</code>?<br>\nThen it would make sense to add <code>complex64</code> and <code>complex128</code> to the test.</p>\n<p>Also, what should I do about the ordering of types in various macros and type lists that <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=901975\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/hunkim\">@hunkim</a> rightfully pointed out?<br>\nI've tried to always append <code>complex128</code> at the end, as that's what has seemingly been done for previous types.</p>", "body_text": "Thanks for the comments!\ntestOverloadComparisons doesn't test for complex64 because we can't define greater/less ops for it.\nThe second part of testOverloadComparisons only seems to operate on booleans.\n(And, strangely, tests tf.equal and tf.not_equal instead of the overloaded operators).\nShould I add _EQ and _NEQ lambdas to test the overloading for == and !=?\nThen it would make sense to add complex64 and complex128 to the test.\nAlso, what should I do about the ordering of types in various macros and type lists that @hunkim rightfully pointed out?\nI've tried to always append complex128 at the end, as that's what has seemingly been done for previous types.", "body": "Thanks for the comments!\n\n`testOverloadComparisons` doesn't test for `complex64` because we can't define `greater/less` ops for it.\nThe second part of `testOverloadComparisons` only seems to operate on booleans.\n(And, strangely, tests `tf.equal` and `tf.not_equal` instead of the overloaded operators).\nShould I add `_EQ` and `_NEQ` lambdas to test the overloading for `==` and `!=`?\nThen it would make sense to add `complex64` and `complex128` to the test.\n\nAlso, what should I do about the ordering of types in various macros and type lists that @hunkim rightfully pointed out?\nI've tried to always append `complex128` at the end, as that's what has seemingly been done for previous types.\n"}