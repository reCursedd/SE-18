{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20626", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20626/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20626/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20626/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20626", "id": 339233259, "node_id": "MDU6SXNzdWUzMzkyMzMyNTk=", "number": 20626, "title": "Dataset.concatenate() agrees to concat dictionaries with different keys", "user": {"login": "zachmoshe", "id": 4789087, "node_id": "MDQ6VXNlcjQ3ODkwODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4789087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zachmoshe", "html_url": "https://github.com/zachmoshe", "followers_url": "https://api.github.com/users/zachmoshe/followers", "following_url": "https://api.github.com/users/zachmoshe/following{/other_user}", "gists_url": "https://api.github.com/users/zachmoshe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zachmoshe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zachmoshe/subscriptions", "organizations_url": "https://api.github.com/users/zachmoshe/orgs", "repos_url": "https://api.github.com/users/zachmoshe/repos", "events_url": "https://api.github.com/users/zachmoshe/events{/privacy}", "received_events_url": "https://api.github.com/users/zachmoshe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shivaniag", "id": 16565716, "node_id": "MDQ6VXNlcjE2NTY1NzE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16565716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivaniag", "html_url": "https://github.com/shivaniag", "followers_url": "https://api.github.com/users/shivaniag/followers", "following_url": "https://api.github.com/users/shivaniag/following{/other_user}", "gists_url": "https://api.github.com/users/shivaniag/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivaniag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivaniag/subscriptions", "organizations_url": "https://api.github.com/users/shivaniag/orgs", "repos_url": "https://api.github.com/users/shivaniag/repos", "events_url": "https://api.github.com/users/shivaniag/events{/privacy}", "received_events_url": "https://api.github.com/users/shivaniag/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-07-08T15:10:05Z", "updated_at": "2018-08-10T01:13:37Z", "closed_at": "2018-08-10T01:13:37Z", "author_association": "NONE", "body_html": "<p>Please go to Stack Overflow for help and support:</p>\n<p><a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">https://stackoverflow.com/questions/tagged/tensorflow</a></p>\n<p>If you open a GitHub issue, here is our policy:</p>\n<ol>\n<li>It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).</li>\n<li>The form below must be filled out.</li>\n<li>It shouldn't be a TensorBoard issue. Those go <a href=\"https://github.com/tensorflow/tensorboard/issues\">here</a>.</li>\n</ol>\n<p><strong>Here's why we have that policy</strong>: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Mac OS 10.13.5</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.8.0</li>\n<li><strong>Python version</strong>: 3.6.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>: NA</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: NA</li>\n<li><strong>CUDA/cuDNN version</strong>: NA</li>\n<li><strong>GPU model and memory</strong>: NA</li>\n<li><strong>Exact command to reproduce</strong>: NA</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>It seems like Dataset.concatenate will concatenate datasets of dictionaries with different keys (values from the second key will be concatenated to the first one).<br>\n(a small demo is attached)</p>\n<p>I've looked at <code>python/data/util/nest.py</code> and in <code>_recursive_assert_same_structure</code> it seems like <code>_yield_value</code> only returns values for dictionaries.<br>\nIs that intended? I would expect it to either fail or put None in the missing fields.</p>\n<h3>Source code / logs</h3>\n<p>The following code:</p>\n<pre><code>ds1 = tf.data.Dataset.from_tensor_slices({'f1': list(range(20)), 'f2': [1]*20})\nds2 = tf.data.Dataset.from_tensor_slices({'f2': list(range(100,120)), 'f3': [2]*20})\ndataset = ds1.concatenate(ds2).batch(5)\ncurr_batch = dataset.make_one_shot_iterator().get_next()\n\nwith tf.Session() as sess:\n  for _ in range(8):\n    data = sess.run(curr_batch)\n    print(data)\n</code></pre>\n<p>Results in:</p>\n<pre><code>{'f1': array([0, 1, 2, 3, 4], dtype=int32), 'f2': array([1, 1, 1, 1, 1], dtype=int32)}\n{'f1': array([5, 6, 7, 8, 9], dtype=int32), 'f2': array([1, 1, 1, 1, 1], dtype=int32)}\n{'f1': array([10, 11, 12, 13, 14], dtype=int32), 'f2': array([1, 1, 1, 1, 1], dtype=int32)}\n{'f1': array([15, 16, 17, 18, 19], dtype=int32), 'f2': array([1, 1, 1, 1, 1], dtype=int32)}\n{'f1': array([100, 101, 102, 103, 104], dtype=int32), 'f2': array([2, 2, 2, 2, 2], dtype=int32)}\n{'f1': array([105, 106, 107, 108, 109], dtype=int32), 'f2': array([2, 2, 2, 2, 2], dtype=int32)}\n{'f1': array([110, 111, 112, 113, 114], dtype=int32), 'f2': array([2, 2, 2, 2, 2], dtype=int32)}\n{'f1': array([115, 116, 117, 118, 119], dtype=int32), 'f2': array([2, 2, 2, 2, 2], dtype=int32)}\n</code></pre>", "body_text": "Please go to Stack Overflow for help and support:\nhttps://stackoverflow.com/questions/tagged/tensorflow\nIf you open a GitHub issue, here is our policy:\n\nIt must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\nThe form below must be filled out.\nIt shouldn't be a TensorBoard issue. Those go here.\n\nHere's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac OS 10.13.5\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.8.0\nPython version: 3.6.5\nBazel version (if compiling from source): NA\nGCC/Compiler version (if compiling from source): NA\nCUDA/cuDNN version: NA\nGPU model and memory: NA\nExact command to reproduce: NA\n\nDescribe the problem\nIt seems like Dataset.concatenate will concatenate datasets of dictionaries with different keys (values from the second key will be concatenated to the first one).\n(a small demo is attached)\nI've looked at python/data/util/nest.py and in _recursive_assert_same_structure it seems like _yield_value only returns values for dictionaries.\nIs that intended? I would expect it to either fail or put None in the missing fields.\nSource code / logs\nThe following code:\nds1 = tf.data.Dataset.from_tensor_slices({'f1': list(range(20)), 'f2': [1]*20})\nds2 = tf.data.Dataset.from_tensor_slices({'f2': list(range(100,120)), 'f3': [2]*20})\ndataset = ds1.concatenate(ds2).batch(5)\ncurr_batch = dataset.make_one_shot_iterator().get_next()\n\nwith tf.Session() as sess:\n  for _ in range(8):\n    data = sess.run(curr_batch)\n    print(data)\n\nResults in:\n{'f1': array([0, 1, 2, 3, 4], dtype=int32), 'f2': array([1, 1, 1, 1, 1], dtype=int32)}\n{'f1': array([5, 6, 7, 8, 9], dtype=int32), 'f2': array([1, 1, 1, 1, 1], dtype=int32)}\n{'f1': array([10, 11, 12, 13, 14], dtype=int32), 'f2': array([1, 1, 1, 1, 1], dtype=int32)}\n{'f1': array([15, 16, 17, 18, 19], dtype=int32), 'f2': array([1, 1, 1, 1, 1], dtype=int32)}\n{'f1': array([100, 101, 102, 103, 104], dtype=int32), 'f2': array([2, 2, 2, 2, 2], dtype=int32)}\n{'f1': array([105, 106, 107, 108, 109], dtype=int32), 'f2': array([2, 2, 2, 2, 2], dtype=int32)}\n{'f1': array([110, 111, 112, 113, 114], dtype=int32), 'f2': array([2, 2, 2, 2, 2], dtype=int32)}\n{'f1': array([115, 116, 117, 118, 119], dtype=int32), 'f2': array([2, 2, 2, 2, 2], dtype=int32)}", "body": "Please go to Stack Overflow for help and support:\r\n\r\nhttps://stackoverflow.com/questions/tagged/tensorflow\r\n\r\nIf you open a GitHub issue, here is our policy:\r\n\r\n1. It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\r\n2. The form below must be filled out.\r\n3. It shouldn't be a TensorBoard issue. Those go [here](https://github.com/tensorflow/tensorboard/issues).\r\n\r\n**Here's why we have that policy**: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Mac OS 10.13.5\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.8.0\r\n- **Python version**: 3.6.5\r\n- **Bazel version (if compiling from source)**: NA\r\n- **GCC/Compiler version (if compiling from source)**: NA\r\n- **CUDA/cuDNN version**: NA\r\n- **GPU model and memory**: NA\r\n- **Exact command to reproduce**: NA\r\n\r\n### Describe the problem\r\n\r\nIt seems like Dataset.concatenate will concatenate datasets of dictionaries with different keys (values from the second key will be concatenated to the first one). \r\n(a small demo is attached)\r\n\r\nI've looked at `python/data/util/nest.py` and in `_recursive_assert_same_structure` it seems like `_yield_value` only returns values for dictionaries. \r\nIs that intended? I would expect it to either fail or put None in the missing fields. \r\n\r\n### Source code / logs\r\n\r\nThe following code: \r\n```\r\nds1 = tf.data.Dataset.from_tensor_slices({'f1': list(range(20)), 'f2': [1]*20})\r\nds2 = tf.data.Dataset.from_tensor_slices({'f2': list(range(100,120)), 'f3': [2]*20})\r\ndataset = ds1.concatenate(ds2).batch(5)\r\ncurr_batch = dataset.make_one_shot_iterator().get_next()\r\n\r\nwith tf.Session() as sess:\r\n  for _ in range(8):\r\n    data = sess.run(curr_batch)\r\n    print(data)\r\n```\r\nResults in:\r\n```\r\n{'f1': array([0, 1, 2, 3, 4], dtype=int32), 'f2': array([1, 1, 1, 1, 1], dtype=int32)}\r\n{'f1': array([5, 6, 7, 8, 9], dtype=int32), 'f2': array([1, 1, 1, 1, 1], dtype=int32)}\r\n{'f1': array([10, 11, 12, 13, 14], dtype=int32), 'f2': array([1, 1, 1, 1, 1], dtype=int32)}\r\n{'f1': array([15, 16, 17, 18, 19], dtype=int32), 'f2': array([1, 1, 1, 1, 1], dtype=int32)}\r\n{'f1': array([100, 101, 102, 103, 104], dtype=int32), 'f2': array([2, 2, 2, 2, 2], dtype=int32)}\r\n{'f1': array([105, 106, 107, 108, 109], dtype=int32), 'f2': array([2, 2, 2, 2, 2], dtype=int32)}\r\n{'f1': array([110, 111, 112, 113, 114], dtype=int32), 'f2': array([2, 2, 2, 2, 2], dtype=int32)}\r\n{'f1': array([115, 116, 117, 118, 119], dtype=int32), 'f2': array([2, 2, 2, 2, 2], dtype=int32)}\r\n```\r\n"}