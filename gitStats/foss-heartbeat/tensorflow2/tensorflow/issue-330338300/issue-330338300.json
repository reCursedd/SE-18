{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19838", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19838/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19838/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19838/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/19838", "id": 330338300, "node_id": "MDU6SXNzdWUzMzAzMzgzMDA=", "number": 19838, "title": "optimize_for_inference_lib.optimize_for_inference produces an invalid graph", "user": {"login": "yegord", "id": 1595829, "node_id": "MDQ6VXNlcjE1OTU4Mjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1595829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yegord", "html_url": "https://github.com/yegord", "followers_url": "https://api.github.com/users/yegord/followers", "following_url": "https://api.github.com/users/yegord/following{/other_user}", "gists_url": "https://api.github.com/users/yegord/gists{/gist_id}", "starred_url": "https://api.github.com/users/yegord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yegord/subscriptions", "organizations_url": "https://api.github.com/users/yegord/orgs", "repos_url": "https://api.github.com/users/yegord/repos", "events_url": "https://api.github.com/users/yegord/events{/privacy}", "received_events_url": "https://api.github.com/users/yegord/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-06-07T16:02:30Z", "updated_at": "2018-11-10T18:49:12Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes.</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nSource.</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\n1.8.0</li>\n<li><strong>Python version</strong>:<br>\n2.7.12</li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\n0.13.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\ngcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.9)</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\n9.0.176/7.0.5.15</li>\n<li><strong>GPU model and memory</strong>:<br>\n1080 Ti</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<pre><code>cat &gt; test.py &lt;&lt;EOF &amp;&amp; python test.py\nimport tensorflow as tf\n\nfrom collections import namedtuple\nfrom tensorflow.python.tools import optimize_for_inference_lib\n\n\ndef main():\n    with tf.Graph().as_default(), tf.Session() as session:\n        input = tf.placeholder(shape=[10], dtype=tf.float32)\n        output = top_k(input)\n\n        graph_def = session.graph.as_graph_def()\n\n    input_nodes = [input]\n    output_nodes = [output.values, output.indices]\n\n    graph_def = tf.graph_util.convert_variables_to_constants(\n        session, graph_def, [_get_node_name(t) for t in output_nodes]\n    )\n\n    with tf.Graph().as_default():\n        tf.import_graph_def(graph_def)  # OK\n\n    graph_def = optimize_for_inference_lib.optimize_for_inference(\n        input_graph_def=graph_def,\n        input_node_names=[_get_node_name(t) for t in input_nodes],\n        output_node_names=[_get_node_name(t) for t in output_nodes],\n        placeholder_type_enum=[node.dtype.as_datatype_enum for node in input_nodes]\n    )\n\n    with tf.Graph().as_default():\n        tf.import_graph_def(graph_def)  # ERROR\n\n\nTopKResult = namedtuple('TopKResult', ['values', 'indices'])\n\n\ndef top_k(input, k=1, sorted=True, name=None):\n    \"\"\"\n    A version of tf.nn.top_k tolerant to k == 0 and k &lt; tf.shape(input)[-1].\n    \"\"\"\n    k = tf.minimum(k, tf.shape(input)[-1])\n\n    return tf.cond(\n        tf.equal(k, 0),\n        lambda: TopKResult(\n            values=tf.zeros(\n                shape=tf.concat([tf.shape(input)[:-1], [0]], axis=0),\n                dtype=input.dtype\n            ),\n            indices=tf.zeros(\n                shape=tf.concat([tf.shape(input)[:-1], [0]], axis=0),\n                dtype=tf.int32\n            )\n        ),\n        lambda: TopKResult(**tf.nn.top_k(input, k, sorted, name)._asdict())\n    )\n\n\ndef _get_node_name(tensor):\n    assert tensor.name.endswith(':0')\n    return tensor.name[:-len(':0')]\n\n\nif __name__ == '__main__':\n    main()\nEOF\n</code></pre>\n<h3>Describe the problem</h3>\n<p><code>optimize_for_inference_lib.optimize_for_inference</code> produces an invalid graph for the graph generated by the above script. The returned GraphDef cannot be imported:</p>\n<pre><code>Traceback (most recent call last):\n  File \"test.py\", line 66, in &lt;module&gt;\n    main()\n  File \"test.py\", line 32, in main\n    tf.import_graph_def(graph_def)  # ERROR\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.py\", line 432, in new_func\n    return func(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/importer.py\", line 493, in import_graph_def\n    raise ValueError(str(e))\nValueError: NodeDef expected inputs '' do not match 1 inputs specified; Op&lt;name=Const; signature= -&gt; output:dtype; attr=value:tensor; attr=dtype:type&gt;; NodeDef: import/cond/zeros_1/Const = Const[dtype=DT_INT32, value=Tensor&lt;type: int32 shape: [] values: 0&gt;](import/cond/Switch:1)\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes.\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux Ubuntu 16.04\nTensorFlow installed from (source or binary):\nSource.\nTensorFlow version (use command below):\n1.8.0\nPython version:\n2.7.12\nBazel version (if compiling from source):\n0.13.0\nGCC/Compiler version (if compiling from source):\ngcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.9)\nCUDA/cuDNN version:\n9.0.176/7.0.5.15\nGPU model and memory:\n1080 Ti\nExact command to reproduce:\n\ncat > test.py <<EOF && python test.py\nimport tensorflow as tf\n\nfrom collections import namedtuple\nfrom tensorflow.python.tools import optimize_for_inference_lib\n\n\ndef main():\n    with tf.Graph().as_default(), tf.Session() as session:\n        input = tf.placeholder(shape=[10], dtype=tf.float32)\n        output = top_k(input)\n\n        graph_def = session.graph.as_graph_def()\n\n    input_nodes = [input]\n    output_nodes = [output.values, output.indices]\n\n    graph_def = tf.graph_util.convert_variables_to_constants(\n        session, graph_def, [_get_node_name(t) for t in output_nodes]\n    )\n\n    with tf.Graph().as_default():\n        tf.import_graph_def(graph_def)  # OK\n\n    graph_def = optimize_for_inference_lib.optimize_for_inference(\n        input_graph_def=graph_def,\n        input_node_names=[_get_node_name(t) for t in input_nodes],\n        output_node_names=[_get_node_name(t) for t in output_nodes],\n        placeholder_type_enum=[node.dtype.as_datatype_enum for node in input_nodes]\n    )\n\n    with tf.Graph().as_default():\n        tf.import_graph_def(graph_def)  # ERROR\n\n\nTopKResult = namedtuple('TopKResult', ['values', 'indices'])\n\n\ndef top_k(input, k=1, sorted=True, name=None):\n    \"\"\"\n    A version of tf.nn.top_k tolerant to k == 0 and k < tf.shape(input)[-1].\n    \"\"\"\n    k = tf.minimum(k, tf.shape(input)[-1])\n\n    return tf.cond(\n        tf.equal(k, 0),\n        lambda: TopKResult(\n            values=tf.zeros(\n                shape=tf.concat([tf.shape(input)[:-1], [0]], axis=0),\n                dtype=input.dtype\n            ),\n            indices=tf.zeros(\n                shape=tf.concat([tf.shape(input)[:-1], [0]], axis=0),\n                dtype=tf.int32\n            )\n        ),\n        lambda: TopKResult(**tf.nn.top_k(input, k, sorted, name)._asdict())\n    )\n\n\ndef _get_node_name(tensor):\n    assert tensor.name.endswith(':0')\n    return tensor.name[:-len(':0')]\n\n\nif __name__ == '__main__':\n    main()\nEOF\n\nDescribe the problem\noptimize_for_inference_lib.optimize_for_inference produces an invalid graph for the graph generated by the above script. The returned GraphDef cannot be imported:\nTraceback (most recent call last):\n  File \"test.py\", line 66, in <module>\n    main()\n  File \"test.py\", line 32, in main\n    tf.import_graph_def(graph_def)  # ERROR\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.py\", line 432, in new_func\n    return func(*args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/importer.py\", line 493, in import_graph_def\n    raise ValueError(str(e))\nValueError: NodeDef expected inputs '' do not match 1 inputs specified; Op<name=Const; signature= -> output:dtype; attr=value:tensor; attr=dtype:type>; NodeDef: import/cond/zeros_1/Const = Const[dtype=DT_INT32, value=Tensor<type: int32 shape: [] values: 0>](import/cond/Switch:1)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes.\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nLinux Ubuntu 16.04\r\n- **TensorFlow installed from (source or binary)**:\r\nSource.\r\n- **TensorFlow version (use command below)**:\r\n1.8.0\r\n- **Python version**: \r\n2.7.12\r\n- **Bazel version (if compiling from source)**:\r\n0.13.0\r\n- **GCC/Compiler version (if compiling from source)**:\r\ngcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.9)\r\n- **CUDA/cuDNN version**:\r\n9.0.176/7.0.5.15\r\n- **GPU model and memory**:\r\n1080 Ti\r\n- **Exact command to reproduce**:\r\n```\r\ncat > test.py <<EOF && python test.py\r\nimport tensorflow as tf\r\n\r\nfrom collections import namedtuple\r\nfrom tensorflow.python.tools import optimize_for_inference_lib\r\n\r\n\r\ndef main():\r\n    with tf.Graph().as_default(), tf.Session() as session:\r\n        input = tf.placeholder(shape=[10], dtype=tf.float32)\r\n        output = top_k(input)\r\n\r\n        graph_def = session.graph.as_graph_def()\r\n\r\n    input_nodes = [input]\r\n    output_nodes = [output.values, output.indices]\r\n\r\n    graph_def = tf.graph_util.convert_variables_to_constants(\r\n        session, graph_def, [_get_node_name(t) for t in output_nodes]\r\n    )\r\n\r\n    with tf.Graph().as_default():\r\n        tf.import_graph_def(graph_def)  # OK\r\n\r\n    graph_def = optimize_for_inference_lib.optimize_for_inference(\r\n        input_graph_def=graph_def,\r\n        input_node_names=[_get_node_name(t) for t in input_nodes],\r\n        output_node_names=[_get_node_name(t) for t in output_nodes],\r\n        placeholder_type_enum=[node.dtype.as_datatype_enum for node in input_nodes]\r\n    )\r\n\r\n    with tf.Graph().as_default():\r\n        tf.import_graph_def(graph_def)  # ERROR\r\n\r\n\r\nTopKResult = namedtuple('TopKResult', ['values', 'indices'])\r\n\r\n\r\ndef top_k(input, k=1, sorted=True, name=None):\r\n    \"\"\"\r\n    A version of tf.nn.top_k tolerant to k == 0 and k < tf.shape(input)[-1].\r\n    \"\"\"\r\n    k = tf.minimum(k, tf.shape(input)[-1])\r\n\r\n    return tf.cond(\r\n        tf.equal(k, 0),\r\n        lambda: TopKResult(\r\n            values=tf.zeros(\r\n                shape=tf.concat([tf.shape(input)[:-1], [0]], axis=0),\r\n                dtype=input.dtype\r\n            ),\r\n            indices=tf.zeros(\r\n                shape=tf.concat([tf.shape(input)[:-1], [0]], axis=0),\r\n                dtype=tf.int32\r\n            )\r\n        ),\r\n        lambda: TopKResult(**tf.nn.top_k(input, k, sorted, name)._asdict())\r\n    )\r\n\r\n\r\ndef _get_node_name(tensor):\r\n    assert tensor.name.endswith(':0')\r\n    return tensor.name[:-len(':0')]\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\nEOF\r\n```\r\n\r\n### Describe the problem\r\n\r\n`optimize_for_inference_lib.optimize_for_inference` produces an invalid graph for the graph generated by the above script. The returned GraphDef cannot be imported:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 66, in <module>\r\n    main()\r\n  File \"test.py\", line 32, in main\r\n    tf.import_graph_def(graph_def)  # ERROR\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/util/deprecation.py\", line 432, in new_func\r\n    return func(*args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/tensorflow/python/framework/importer.py\", line 493, in import_graph_def\r\n    raise ValueError(str(e))\r\nValueError: NodeDef expected inputs '' do not match 1 inputs specified; Op<name=Const; signature= -> output:dtype; attr=value:tensor; attr=dtype:type>; NodeDef: import/cond/zeros_1/Const = Const[dtype=DT_INT32, value=Tensor<type: int32 shape: [] values: 0>](import/cond/Switch:1)\r\n```\r\n"}