{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/271992925", "html_url": "https://github.com/tensorflow/tensorflow/issues/3388#issuecomment-271992925", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3388", "id": 271992925, "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTk5MjkyNQ==", "user": {"login": "ods94065", "id": 75564, "node_id": "MDQ6VXNlcjc1NTY0", "avatar_url": "https://avatars1.githubusercontent.com/u/75564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ods94065", "html_url": "https://github.com/ods94065", "followers_url": "https://api.github.com/users/ods94065/followers", "following_url": "https://api.github.com/users/ods94065/following{/other_user}", "gists_url": "https://api.github.com/users/ods94065/gists{/gist_id}", "starred_url": "https://api.github.com/users/ods94065/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ods94065/subscriptions", "organizations_url": "https://api.github.com/users/ods94065/orgs", "repos_url": "https://api.github.com/users/ods94065/repos", "events_url": "https://api.github.com/users/ods94065/events{/privacy}", "received_events_url": "https://api.github.com/users/ods94065/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-11T21:00:54Z", "updated_at": "2017-01-11T21:05:01Z", "author_association": "NONE", "body_html": "<p>Here's code that reproduces the Keras problem for me from a recent build of my test system. Ubuntu 14.04, Python 3.4 (default OS version), TensorFlow 0.12.1, Keras 1.2.0. pima.csv is a copy of <a href=\"http://archive.ics.uci.edu/ml/machine-learning-databases/pima-indians-diabetes/pima-indians-diabetes.data\" rel=\"nofollow\">this file</a>:</p>\n<pre><code>\"\"\"Verify that Keras works correctly.\n\nExample comes from: http://machinelearningmastery.com/tutorial-first-neural-network-python-keras/\n\"\"\"\nfrom keras import models\nfrom keras import layers\nimport numpy\nimport gc\n\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\ndataset = numpy.loadtxt('pima.csv', delimiter=',')\n# First 8 columns are the input variables\nX = dataset[:, 0:8]\n# Last column is the output variable\nY = dataset[:, 8]\n\n# Create fully-connected network with three layers.\n# The last layer has one neuron to predict the class.\nmodel = models.Sequential()\nmodel.add(layers.Dense(12, input_dim=8, init='uniform', activation='relu'))\nmodel.add(layers.Dense(8, init='uniform', activation='relu'))\nmodel.add(layers.Dense(1, init='uniform', activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X, Y, nb_epoch=150, batch_size=10, verbose=False)\n\nscores = model.evaluate(X, Y, verbose=False)\nprint('{}: {}%'.format(model.metrics_names[1], scores[1] * 100))\n\n# Explicitly reap session to avoid an AttributeError sometimes thrown by\n# TensorFlow on shutdown. See:\n# https://github.com/tensorflow/tensorflow/issues/3388\ngc.collect()\n</code></pre>\n<p><em>Update:</em> Calling <code>backend.clear_session()</code> instead of <code>gc.collect()</code> does indeed seem to fix the problem. Yay for not relying on GC magic! But this still really ought to be fixed. :-)</p>", "body_text": "Here's code that reproduces the Keras problem for me from a recent build of my test system. Ubuntu 14.04, Python 3.4 (default OS version), TensorFlow 0.12.1, Keras 1.2.0. pima.csv is a copy of this file:\n\"\"\"Verify that Keras works correctly.\n\nExample comes from: http://machinelearningmastery.com/tutorial-first-neural-network-python-keras/\n\"\"\"\nfrom keras import models\nfrom keras import layers\nimport numpy\nimport gc\n\n# fix random seed for reproducibility\nnumpy.random.seed(7)\n\ndataset = numpy.loadtxt('pima.csv', delimiter=',')\n# First 8 columns are the input variables\nX = dataset[:, 0:8]\n# Last column is the output variable\nY = dataset[:, 8]\n\n# Create fully-connected network with three layers.\n# The last layer has one neuron to predict the class.\nmodel = models.Sequential()\nmodel.add(layers.Dense(12, input_dim=8, init='uniform', activation='relu'))\nmodel.add(layers.Dense(8, init='uniform', activation='relu'))\nmodel.add(layers.Dense(1, init='uniform', activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X, Y, nb_epoch=150, batch_size=10, verbose=False)\n\nscores = model.evaluate(X, Y, verbose=False)\nprint('{}: {}%'.format(model.metrics_names[1], scores[1] * 100))\n\n# Explicitly reap session to avoid an AttributeError sometimes thrown by\n# TensorFlow on shutdown. See:\n# https://github.com/tensorflow/tensorflow/issues/3388\ngc.collect()\n\nUpdate: Calling backend.clear_session() instead of gc.collect() does indeed seem to fix the problem. Yay for not relying on GC magic! But this still really ought to be fixed. :-)", "body": "Here's code that reproduces the Keras problem for me from a recent build of my test system. Ubuntu 14.04, Python 3.4 (default OS version), TensorFlow 0.12.1, Keras 1.2.0. pima.csv is a copy of [this file](http://archive.ics.uci.edu/ml/machine-learning-databases/pima-indians-diabetes/pima-indians-diabetes.data):\r\n\r\n```\r\n\"\"\"Verify that Keras works correctly.\r\n\r\nExample comes from: http://machinelearningmastery.com/tutorial-first-neural-network-python-keras/\r\n\"\"\"\r\nfrom keras import models\r\nfrom keras import layers\r\nimport numpy\r\nimport gc\r\n\r\n# fix random seed for reproducibility\r\nnumpy.random.seed(7)\r\n\r\ndataset = numpy.loadtxt('pima.csv', delimiter=',')\r\n# First 8 columns are the input variables\r\nX = dataset[:, 0:8]\r\n# Last column is the output variable\r\nY = dataset[:, 8]\r\n\r\n# Create fully-connected network with three layers.\r\n# The last layer has one neuron to predict the class.\r\nmodel = models.Sequential()\r\nmodel.add(layers.Dense(12, input_dim=8, init='uniform', activation='relu'))\r\nmodel.add(layers.Dense(8, init='uniform', activation='relu'))\r\nmodel.add(layers.Dense(1, init='uniform', activation='sigmoid'))\r\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\r\nmodel.fit(X, Y, nb_epoch=150, batch_size=10, verbose=False)\r\n\r\nscores = model.evaluate(X, Y, verbose=False)\r\nprint('{}: {}%'.format(model.metrics_names[1], scores[1] * 100))\r\n\r\n# Explicitly reap session to avoid an AttributeError sometimes thrown by\r\n# TensorFlow on shutdown. See:\r\n# https://github.com/tensorflow/tensorflow/issues/3388\r\ngc.collect()\r\n```\r\n\r\n_Update:_ Calling `backend.clear_session()` instead of `gc.collect()` does indeed seem to fix the problem. Yay for not relying on GC magic! But this still really ought to be fixed. :-)"}