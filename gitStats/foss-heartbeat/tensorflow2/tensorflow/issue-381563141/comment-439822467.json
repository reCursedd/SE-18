{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/439822467", "html_url": "https://github.com/tensorflow/tensorflow/issues/23800#issuecomment-439822467", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23800", "id": 439822467, "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTgyMjQ2Nw==", "user": {"login": "jackwish", "id": 4936589, "node_id": "MDQ6VXNlcjQ5MzY1ODk=", "avatar_url": "https://avatars2.githubusercontent.com/u/4936589?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackwish", "html_url": "https://github.com/jackwish", "followers_url": "https://api.github.com/users/jackwish/followers", "following_url": "https://api.github.com/users/jackwish/following{/other_user}", "gists_url": "https://api.github.com/users/jackwish/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackwish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackwish/subscriptions", "organizations_url": "https://api.github.com/users/jackwish/orgs", "repos_url": "https://api.github.com/users/jackwish/repos", "events_url": "https://api.github.com/users/jackwish/events{/privacy}", "received_events_url": "https://api.github.com/users/jackwish/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-19T09:15:50Z", "updated_at": "2018-11-19T09:20:26Z", "author_association": "NONE", "body_html": "<p>I have looked into this a bit further. Far beyond expected, the <em>original</em> multiplier calculation code style and mine generate in/correct result for different Conv ops - listed as bellow.</p>\n<ul>\n<li>the indexing of conv starts from 1. Depthwise Conv is ignored (no verification of their result)</li>\n<li><em>correct</em> means same multiplier value as a test( or use gdb cli).<br>\nNot sure whether the classification accuracy of the network is impacted as I am focus on arithmetic result only.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>which conv</th>\n<th>original impl. correct</th>\n<th>new impl. correct</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td>2</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>3</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>4</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>5</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>6</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>7</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>8</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>9</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>10</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>11</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>12</td>\n<td>no</td>\n<td>no</td>\n</tr>\n<tr>\n<td>13</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>14</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>15</td>\n<td>no</td>\n<td>no</td>\n</tr>\n</tbody>\n</table>\n<p>FYI: debug code for <a href=\"https://github.com/jackwish/tensorflow/tree/d/lite/qconv-r1.12\">r1.12</a> has updated</p>", "body_text": "I have looked into this a bit further. Far beyond expected, the original multiplier calculation code style and mine generate in/correct result for different Conv ops - listed as bellow.\n\nthe indexing of conv starts from 1. Depthwise Conv is ignored (no verification of their result)\ncorrect means same multiplier value as a test( or use gdb cli).\nNot sure whether the classification accuracy of the network is impacted as I am focus on arithmetic result only.\n\n\n\n\nwhich conv\noriginal impl. correct\nnew impl. correct\n\n\n\n\n1\nyes\nno\n\n\n2\nno\nno\n\n\n3\nno\nyes\n\n\n4\nno\nyes\n\n\n5\nno\nno\n\n\n6\nno\nyes\n\n\n7\nno\nyes\n\n\n8\nno\nno\n\n\n9\nno\nyes\n\n\n10\nno\nyes\n\n\n11\nno\nyes\n\n\n12\nno\nno\n\n\n13\nno\nyes\n\n\n14\nno\nyes\n\n\n15\nno\nno\n\n\n\nFYI: debug code for r1.12 has updated", "body": "I have looked into this a bit further. Far beyond expected, the *original* multiplier calculation code style and mine generate in/correct result for different Conv ops - listed as bellow.\r\n* the indexing of conv starts from 1. Depthwise Conv is ignored (no verification of their result)\r\n* *correct* means same multiplier value as a test( or use gdb cli).\r\nNot sure whether the classification accuracy of the network is impacted as I am focus on arithmetic result only.\r\n\r\n| which conv | original impl. correct | new impl. correct |\r\n| -------- | -------- | -------- |\r\n| 1     |    yes     |    no     |\r\n| 2     |     no     |    no     |\r\n| 3     |     no     |    yes    |\r\n| 4     |     no     |    yes    |\r\n| 5    |       no     |    no    |\r\n| 6     |     no     |    yes    |\r\n| 7     |     no     |    yes    |\r\n| 8     |     no     |    no     |\r\n| 9     |     no     |    yes    |\r\n| 10    |     no     |    yes    |\r\n| 11    |     no     |    yes    |\r\n| 12   |       no     |    no    |\r\n| 13    |     no     |    yes    |\r\n| 14    |     no     |    yes    |\r\n| 15    |     no     |    no     |\r\n\r\nFYI: debug code for [r1.12](https://github.com/jackwish/tensorflow/tree/d/lite/qconv-r1.12) has updated"}