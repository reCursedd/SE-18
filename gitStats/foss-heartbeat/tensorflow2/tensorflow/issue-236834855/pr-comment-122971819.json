{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/122971819", "pull_request_review_id": 45131415, "id": 122971819, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjk3MTgxOQ==", "diff_hunk": "@@ -50,60 +50,81 @@ typedef Eigen::SyclDevice SYCLDevice;\n TF_CALL_REAL_NUMBER_TYPES(REGISTER_RELU_KERNELS);\n #undef REGISTER_RELU_KERNELS\n \n-#define REGISTER_ELU_KERNELS(type)                                  \\\n-  REGISTER_KERNEL_BUILDER(                                          \\\n-      Name(\"Elu\").Device(DEVICE_CPU).TypeConstraint<type>(\"T\"),     \\\n-      EluOp<CPUDevice, type>);                                      \\\n-  REGISTER_KERNEL_BUILDER(                                          \\\n-      Name(\"EluGrad\").Device(DEVICE_CPU).TypeConstraint<type>(\"T\"), \\\n-      EluGradOp<CPUDevice, type>)\n-\n-// Elu only makes sense with float or double.\n+#define REGISTER_ELU_KERNELS(type)                                   \\\n+  REGISTER_KERNEL_BUILDER(                                           \\\n+      Name(\"Elu\").Device(DEVICE_CPU).TypeConstraint<type>(\"T\"),      \\\n+      EluOp<CPUDevice, type>);                                       \\\n+  REGISTER_KERNEL_BUILDER(                                           \\\n+      Name(\"EluGrad\").Device(DEVICE_CPU).TypeConstraint<type>(\"T\"),  \\\n+      EluGradOp<CPUDevice, type>)                                    \\\n+  REGISTER_KERNEL_BUILDER(                                           \\\n+      Name(\"Selu\").Device(DEVICE_CPU).TypeConstraint<type>(\"T\"),     \\\n+      SeluOp<CPUDevice, type>);                                      \\\n+  REGISTER_KERNEL_BUILDER(                                           \\\n+      Name(\"SeluGrad\").Device(DEVICE_CPU).TypeConstraint<type>(\"T\"), \\\n+      SeluGradOp<CPUDevice, type>)\n+\n+// Elu and Selu only make sense with float or double.\n TF_CALL_GPU_NUMBER_TYPES(REGISTER_ELU_KERNELS);\n #undef REGISTER_ELU_KERNELS\n \n #if GOOGLE_CUDA\n // Forward declarations of the functor specializations for GPU.\n namespace functor {\n-#define DECLARE_GPU_SPEC(T)                                                    \\\n-  template <>                                                                  \\\n-  void Relu<GPUDevice, T>::operator()(                                         \\\n-      const GPUDevice& d, typename TTypes<T>::ConstTensor features,            \\\n-      typename TTypes<T>::Tensor activations);                                 \\\n-  extern template struct Relu<GPUDevice, T>;                                   \\\n-                                                                               \\\n-  template <>                                                                  \\\n-  void ReluGrad<GPUDevice, T>::operator()(                                     \\\n-      const GPUDevice& d, typename TTypes<T>::ConstTensor gradients,           \\\n-      typename TTypes<T>::ConstTensor features,                                \\\n-      typename TTypes<T>::Tensor backprops);                                   \\\n-  extern template struct ReluGrad<GPUDevice, T>;                               \\\n-                                                                               \\\n-  template <>                                                                  \\\n-  void Relu6<GPUDevice, T>::operator()(                                        \\\n-      const GPUDevice& d, typename TTypes<T>::ConstTensor features,            \\\n-      typename TTypes<T>::Tensor activations);                                 \\\n-  extern template struct Relu6<GPUDevice, T>;                                  \\\n-                                                                               \\\n-  template <>                                                                  \\\n-  void Relu6Grad<GPUDevice, T>::operator()(                                    \\\n-      const GPUDevice& d, typename TTypes<T>::ConstTensor gradients,           \\\n-      typename TTypes<T>::ConstTensor features,                                \\\n-      typename TTypes<T>::Tensor backprops);                                   \\\n-  extern template struct Relu6Grad<GPUDevice, T>;                              \\\n-                                                                               \\\n-  template <>                                                                  \\\n-  void Elu<GPUDevice, T>::operator()(const GPUDevice& d,                       \\\n-                                     typename TTypes<T>::ConstTensor features, \\\n-                                     typename TTypes<T>::Tensor activations);  \\\n-  extern template struct Elu<GPUDevice, T>;                                    \\\n-                                                                               \\\n-  template <>                                                                  \\\n-  void EluGrad<GPUDevice, T>::operator()(                                      \\\n-      const GPUDevice& d, typename TTypes<T>::ConstTensor gradients,           \\\n-      typename TTypes<T>::ConstTensor activations,                             \\\n-      typename TTypes<T>::Tensor backprops);                                   \\\n-  extern template struct EluGrad<GPUDevice, T>;\n+#define DECLARE_GPU_SPEC(T)                                                     \\\n+  template <>                                                                   \\\n+  void Relu<GPUDevice, T>::operator()(                                          \\\n+      const GPUDevice& d, typename TTypes<T>::ConstTensor features,             \\\n+      typename TTypes<T>::Tensor activations);                                  \\\n+  extern template struct Relu<GPUDevice, T>;                                    \\\n+                                                                                \\\n+  template <>                                                                   \\\n+  void ReluGrad<GPUDevice, T>::operator()(                                      \\\n+      const GPUDevice& d, typename TTypes<T>::ConstTensor gradients,            \\\n+      typename TTypes<T>::ConstTensor features,                                 \\\n+      typename TTypes<T>::Tensor backprops);                                    \\\n+  extern template struct ReluGrad<GPUDevice, T>;                                \\\n+                                                                                \\\n+  template <>                                                                   \\\n+  void Relu6<GPUDevice, T>::operator()(                                         \\\n+      const GPUDevice& d, typename TTypes<T>::ConstTensor features,             \\\n+      typename TTypes<T>::Tensor activations);                                  \\\n+  extern template struct Relu6<GPUDevice, T>;                                   \\\n+                                                                                \\\n+  template <>                                                                   \\\n+  void Relu6Grad<GPUDevice, T>::operator()(                                     \\\n+      const GPUDevice& d, typename TTypes<T>::ConstTensor gradients,            \\\n+      typename TTypes<T>::ConstTensor features,                                 \\\n+      typename TTypes<T>::Tensor backprops);                                    \\\n+  extern template struct Relu6Grad<GPUDevice, T>;                               \\\n+                                                                                \\\n+  template <>                                                                   \\\n+  void Elu<GPUDevice, T>::operator()(const GPUDevice& d,                        \\\n+                                     typename TTypes<T>::ConstTensor features,  \\\n+                                     typename TTypes<T>::Tensor activations);   \\\n+  extern template struct Elu<GPUDevice, T>;                                     \\\n+                                                                                \\\n+  template <>                                                                   \\\n+  void EluGrad<GPUDevice, T>::operator()(                                       \\\n+      const GPUDevice& d, typename TTypes<T>::ConstTensor gradients,            \\\n+      typename TTypes<T>::ConstTensor activations,                              \\\n+      typename TTypes<T>::Tensor backprops);                                    \\\n+  extern template struct EluGrad<GPUDevice, T>;                                 \\\n+                                                                                \\\n+  template <>                                                                   \\\n+  void Selu<GPUDevice, T>::operator()(const GPUDevice& d,                       \\", "path": "tensorflow/core/kernels/relu_op.cc", "position": null, "original_position": 114, "commit_id": "97bafa09a7403db67facb78757ec35eaca1215bb", "original_commit_id": "2950431bc6984c2d6b294eedacf649ab629a448f", "user": {"login": "futurely", "id": 9004594, "node_id": "MDQ6VXNlcjkwMDQ1OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/9004594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/futurely", "html_url": "https://github.com/futurely", "followers_url": "https://api.github.com/users/futurely/followers", "following_url": "https://api.github.com/users/futurely/following{/other_user}", "gists_url": "https://api.github.com/users/futurely/gists{/gist_id}", "starred_url": "https://api.github.com/users/futurely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/futurely/subscriptions", "organizations_url": "https://api.github.com/users/futurely/orgs", "repos_url": "https://api.github.com/users/futurely/repos", "events_url": "https://api.github.com/users/futurely/events{/privacy}", "received_events_url": "https://api.github.com/users/futurely/received_events", "type": "User", "site_admin": false}, "body": "If `const GPUDevice& d` is moved to the next line with 4 spaces indent, then the above lines after `#define DECLARE_GPU_SPEC(T)` wouldn't have to be changed.", "created_at": "2017-06-20T13:16:00Z", "updated_at": "2017-07-25T15:03:45Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/10818#discussion_r122971819", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10818", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/122971819"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/10818#discussion_r122971819"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/10818"}}, "body_html": "<p>If <code>const GPUDevice&amp; d</code> is moved to the next line with 4 spaces indent, then the above lines after <code>#define DECLARE_GPU_SPEC(T)</code> wouldn't have to be changed.</p>", "body_text": "If const GPUDevice& d is moved to the next line with 4 spaces indent, then the above lines after #define DECLARE_GPU_SPEC(T) wouldn't have to be changed."}