{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/401273054", "html_url": "https://github.com/tensorflow/tensorflow/issues/20059#issuecomment-401273054", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20059", "id": 401273054, "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTI3MzA1NA==", "user": {"login": "cipri-tom", "id": 2991890, "node_id": "MDQ6VXNlcjI5OTE4OTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2991890?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cipri-tom", "html_url": "https://github.com/cipri-tom", "followers_url": "https://api.github.com/users/cipri-tom/followers", "following_url": "https://api.github.com/users/cipri-tom/following{/other_user}", "gists_url": "https://api.github.com/users/cipri-tom/gists{/gist_id}", "starred_url": "https://api.github.com/users/cipri-tom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cipri-tom/subscriptions", "organizations_url": "https://api.github.com/users/cipri-tom/orgs", "repos_url": "https://api.github.com/users/cipri-tom/repos", "events_url": "https://api.github.com/users/cipri-tom/events{/privacy}", "received_events_url": "https://api.github.com/users/cipri-tom/received_events", "type": "User", "site_admin": false}, "created_at": "2018-06-29T07:32:02Z", "updated_at": "2018-06-29T07:32:02Z", "author_association": "NONE", "body_html": "<p>Thanks <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> for the reply! It took me a while to come back with new results as there were other things running on the machine, so benchmarking was not feasible.</p>\n<p>I tried with <code>num_parallel_batches=1</code> in v1.8, but didn't get anything out of it. It even seemed a bit slower, since I don't think there was any parallelism left (no <code>num_parallel_calls</code> in v1.8).</p>\n<p>I also tried with v1.9 RC <code>map_and_batch(num_parallel_calls=4)</code>, which is supposed to replicate the <code>.map(num_parallel_calls=4).batch()</code>. While it is faster than the above, 1.15 steps/sec (instead of 1/s), it is not as fast as map+batch, which gets me 1.3 steps/sec. I find this a bit strange</p>", "body_text": "Thanks @mrry for the reply! It took me a while to come back with new results as there were other things running on the machine, so benchmarking was not feasible.\nI tried with num_parallel_batches=1 in v1.8, but didn't get anything out of it. It even seemed a bit slower, since I don't think there was any parallelism left (no num_parallel_calls in v1.8).\nI also tried with v1.9 RC map_and_batch(num_parallel_calls=4), which is supposed to replicate the .map(num_parallel_calls=4).batch(). While it is faster than the above, 1.15 steps/sec (instead of 1/s), it is not as fast as map+batch, which gets me 1.3 steps/sec. I find this a bit strange", "body": "Thanks @mrry for the reply! It took me a while to come back with new results as there were other things running on the machine, so benchmarking was not feasible.\r\n\r\nI tried with `num_parallel_batches=1` in v1.8, but didn't get anything out of it. It even seemed a bit slower, since I don't think there was any parallelism left (no `num_parallel_calls` in v1.8).\r\n\r\nI also tried with v1.9 RC `map_and_batch(num_parallel_calls=4)`, which is supposed to replicate the `.map(num_parallel_calls=4).batch()`. While it is faster than the above, 1.15 steps/sec (instead of 1/s), it is not as fast as map+batch, which gets me 1.3 steps/sec. I find this a bit strange"}