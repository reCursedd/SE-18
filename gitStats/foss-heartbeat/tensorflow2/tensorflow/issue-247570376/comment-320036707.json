{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/320036707", "html_url": "https://github.com/tensorflow/tensorflow/issues/11982#issuecomment-320036707", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11982", "id": 320036707, "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDAzNjcwNw==", "user": {"login": "jaredmessenger", "id": 1002348, "node_id": "MDQ6VXNlcjEwMDIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1002348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaredmessenger", "html_url": "https://github.com/jaredmessenger", "followers_url": "https://api.github.com/users/jaredmessenger/followers", "following_url": "https://api.github.com/users/jaredmessenger/following{/other_user}", "gists_url": "https://api.github.com/users/jaredmessenger/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaredmessenger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaredmessenger/subscriptions", "organizations_url": "https://api.github.com/users/jaredmessenger/orgs", "repos_url": "https://api.github.com/users/jaredmessenger/repos", "events_url": "https://api.github.com/users/jaredmessenger/events{/privacy}", "received_events_url": "https://api.github.com/users/jaredmessenger/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-03T17:28:54Z", "updated_at": "2017-08-03T17:28:54Z", "author_association": "NONE", "body_html": "<p>For iOS, I'm not aware of a way to kill a process other than for the end-user to kill the entire app.<br>\nThe paradigm for long running processes is to subclass <code>NSOperation</code> and periodically check the <code>cancelled</code> property.</p>\n<pre><code>class TFSession: NSOperation {\n    override func main() {\n        if self.cancelled {\n            return\n        }\n        // Do some work\n        if self.cancelled {\n            return\n        }\n        // Do more work\n        // ...\n    }\n}\n</code></pre>\n<p>This obviously isn't a good solution since iOS is such a small part of Tensorflow, but what about a <code>cancel_op</code> that a developer can sprinkle throughout their graph? This has a different challenge of accepting a pointer in the <code>feed_dict</code> though.</p>", "body_text": "For iOS, I'm not aware of a way to kill a process other than for the end-user to kill the entire app.\nThe paradigm for long running processes is to subclass NSOperation and periodically check the cancelled property.\nclass TFSession: NSOperation {\n    override func main() {\n        if self.cancelled {\n            return\n        }\n        // Do some work\n        if self.cancelled {\n            return\n        }\n        // Do more work\n        // ...\n    }\n}\n\nThis obviously isn't a good solution since iOS is such a small part of Tensorflow, but what about a cancel_op that a developer can sprinkle throughout their graph? This has a different challenge of accepting a pointer in the feed_dict though.", "body": "For iOS, I'm not aware of a way to kill a process other than for the end-user to kill the entire app.\r\nThe paradigm for long running processes is to subclass `NSOperation` and periodically check the `cancelled` property.\r\n```\r\nclass TFSession: NSOperation {\r\n    override func main() {\r\n        if self.cancelled {\r\n            return\r\n        }\r\n        // Do some work\r\n        if self.cancelled {\r\n            return\r\n        }\r\n        // Do more work\r\n        // ...\r\n    }\r\n}\r\n```\r\nThis obviously isn't a good solution since iOS is such a small part of Tensorflow, but what about a `cancel_op` that a developer can sprinkle throughout their graph? This has a different challenge of accepting a pointer in the `feed_dict` though.  "}