{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8178", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8178/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8178/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8178/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8178", "id": 212549859, "node_id": "MDU6SXNzdWUyMTI1NDk4NTk=", "number": 8178, "title": "Forcing recomputation of graph expressions", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-07T20:31:25Z", "updated_at": "2017-03-07T21:22:32Z", "closed_at": "2017-03-07T21:22:32Z", "author_association": "CONTRIBUTOR", "body_html": "<p>We are using graph editor to rewrite the graph. It seems that there's some kind of caching going on, so that rewiring the graph after first <code>session.run</code> call has limited effect.</p>\n<p>Using <code>OptimizerOptions.L0</code> when creating session does not prevent this caching.</p>\n<p>It would be nice to have a way to force <code>TF_Run</code> run exactly the graph given to it by <code>TF_ExtendGraph</code>, rather than returning some internally cached result.</p>\n<p>This is similar to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"200336611\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/6804\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/6804/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/6804\">#6804</a> where <code>Defun</code> definitions are frozen at first <code>session.run</code> call</p>\n<p>Here's an example, we rewrite the graph to have \"v2\" use same initializer op as \"v1\". This has different effect depending on whether rewiring happens before or after first <code>session.run</code> call<br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=724322\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/purpledog\">@purpledog</a> have you seen something like this?</p>\n<pre><code>tf.reset_default_graph()\nv1 = tf.Variable([1. ,2. ,3.])\nv2 = tf.Variable([9., 9., 9.])\nconfig = tf.ConfigProto(graph_options=tf.GraphOptions(optimizer_options=tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)))\nsess = tf.Session(config=config)\n# uncommenting this changes final print from [1, 2, 3] to [9, 9, 9]\n# sess.run(tf.constant(1))\n\nge.reroute_a2b_ts(v1.initial_value, v2.initial_value)\ntf.get_default_graph()._version+=1   # make sure TF_ExtendGraph gets called\n\nsess.run(v2.initializer)\nprint(sess.run(v2))\n</code></pre>", "body_text": "We are using graph editor to rewrite the graph. It seems that there's some kind of caching going on, so that rewiring the graph after first session.run call has limited effect.\nUsing OptimizerOptions.L0 when creating session does not prevent this caching.\nIt would be nice to have a way to force TF_Run run exactly the graph given to it by TF_ExtendGraph, rather than returning some internally cached result.\nThis is similar to #6804 where Defun definitions are frozen at first session.run call\nHere's an example, we rewrite the graph to have \"v2\" use same initializer op as \"v1\". This has different effect depending on whether rewiring happens before or after first session.run call\n@purpledog have you seen something like this?\ntf.reset_default_graph()\nv1 = tf.Variable([1. ,2. ,3.])\nv2 = tf.Variable([9., 9., 9.])\nconfig = tf.ConfigProto(graph_options=tf.GraphOptions(optimizer_options=tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)))\nsess = tf.Session(config=config)\n# uncommenting this changes final print from [1, 2, 3] to [9, 9, 9]\n# sess.run(tf.constant(1))\n\nge.reroute_a2b_ts(v1.initial_value, v2.initial_value)\ntf.get_default_graph()._version+=1   # make sure TF_ExtendGraph gets called\n\nsess.run(v2.initializer)\nprint(sess.run(v2))", "body": "We are using graph editor to rewrite the graph. It seems that there's some kind of caching going on, so that rewiring the graph after first `session.run` call has limited effect.\r\n\r\nUsing `OptimizerOptions.L0` when creating session does not prevent this caching.\r\n\r\nIt would be nice to have a way to force `TF_Run` run exactly the graph given to it by `TF_ExtendGraph`, rather than returning some internally cached result.\r\n\r\nThis is similar to https://github.com/tensorflow/tensorflow/issues/6804 where `Defun` definitions are frozen at first `session.run` call\r\n\r\nHere's an example, we rewrite the graph to have \"v2\" use same initializer op as \"v1\". This has different effect depending on whether rewiring happens before or after first `session.run` call\r\n@purpledog have you seen something like this?\r\n  \r\n```\r\ntf.reset_default_graph()\r\nv1 = tf.Variable([1. ,2. ,3.])\r\nv2 = tf.Variable([9., 9., 9.])\r\nconfig = tf.ConfigProto(graph_options=tf.GraphOptions(optimizer_options=tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L0)))\r\nsess = tf.Session(config=config)\r\n# uncommenting this changes final print from [1, 2, 3] to [9, 9, 9]\r\n# sess.run(tf.constant(1))\r\n\r\nge.reroute_a2b_ts(v1.initial_value, v2.initial_value)\r\ntf.get_default_graph()._version+=1   # make sure TF_ExtendGraph gets called\r\n\r\nsess.run(v2.initializer)\r\nprint(sess.run(v2))\r\n```"}