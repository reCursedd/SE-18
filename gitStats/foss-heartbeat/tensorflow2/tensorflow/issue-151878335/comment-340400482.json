{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/340400482", "html_url": "https://github.com/tensorflow/tensorflow/issues/2169#issuecomment-340400482", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2169", "id": 340400482, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDQwMDQ4Mg==", "user": {"login": "Pepslee", "id": 13853798, "node_id": "MDQ6VXNlcjEzODUzNzk4", "avatar_url": "https://avatars1.githubusercontent.com/u/13853798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pepslee", "html_url": "https://github.com/Pepslee", "followers_url": "https://api.github.com/users/Pepslee/followers", "following_url": "https://api.github.com/users/Pepslee/following{/other_user}", "gists_url": "https://api.github.com/users/Pepslee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pepslee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pepslee/subscriptions", "organizations_url": "https://api.github.com/users/Pepslee/orgs", "repos_url": "https://api.github.com/users/Pepslee/repos", "events_url": "https://api.github.com/users/Pepslee/events{/privacy}", "received_events_url": "https://api.github.com/users/Pepslee/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-30T10:14:03Z", "updated_at": "2017-10-30T10:14:39Z", "author_association": "NONE", "body_html": "<p>Hi, yes, one_hot function is build one_hot_vector for each index. So, I`m trying to build matrix, which will have ones at the required indices, and then multiply it by the interpolated(nearest neighbor) pooled data.</p>\n<div class=\"highlight highlight-source-python\"><pre>[[<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">5</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">4</span>],\n [<span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">7</span>]]  <span class=\"pl-ii\">-&gt;</span> maxpoo <span class=\"pl-ii\">-&gt;</span> [[<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">4</span>],\n                                [<span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">7</span>]]   <span class=\"pl-ii\">-&gt;</span>   ind <span class=\"pl-k\">=</span> [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">7</span>] <span class=\"pl-ii\">-&gt;</span> one_hot <span class=\"pl-ii\">-&gt;</span>\n\n<span class=\"pl-ii\">-&gt;</span> [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>]\n   [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>]\n   [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>]\n   [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>]   <span class=\"pl-ii\">-&gt;</span>  merge(summ by vertical axis)  <span class=\"pl-ii\">-&gt;</span>  [<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>]\n\nthen reshape to  [[<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>], \n                  [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>]]\n\n<span class=\"pl-k\">and</span> then multiply by interpolated (nearest neighbor) data <span class=\"pl-k\">from</span> maxpool layer\n\n                [[<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">5</span>], [<span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>],\n                 [<span class=\"pl-c1\">6</span>, <span class=\"pl-c1\">6</span>], [<span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">7</span>]]   </pre></div>\n<p>i didn`t find some better function, to get ones_like index matrix.<br>\nThere are tf.sparse_to_dense  function in tensorflow, but it implemented only for CPU.</p>\n<p>Maybe someone will try to optimize this method of getting ones_like index matrix.</p>", "body_text": "Hi, yes, one_hot function is build one_hot_vector for each index. So, I`m trying to build matrix, which will have ones at the required indices, and then multiply it by the interpolated(nearest neighbor) pooled data.\n[[2, 5], [1, 4],\n [6, 1], [3, 7]]  -> maxpoo -> [[5, 4],\n                                [6, 7]]   ->   ind = [1, 3, 4, 7] -> one_hot ->\n\n-> [0, 1, 0, 0, 0, 0, 0, 0]\n   [0, 0, 0, 1, 0, 0, 0, 0]\n   [0, 0, 0, 0, 1, 0, 0, 0]\n   [0, 0, 0, 0, 0, 0, 0, 1]   ->  merge(summ by vertical axis)  ->  [0, 1, 0, 1, 1, 0, 0, 1]\n\nthen reshape to  [[0, 1, 0, 1], \n                  [1, 0, 0, 1]]\n\nand then multiply by interpolated (nearest neighbor) data from maxpool layer\n\n                [[5, 5], [4, 4],\n                 [6, 6], [7, 7]]   \ni didn`t find some better function, to get ones_like index matrix.\nThere are tf.sparse_to_dense  function in tensorflow, but it implemented only for CPU.\nMaybe someone will try to optimize this method of getting ones_like index matrix.", "body": "Hi, yes, one_hot function is build one_hot_vector for each index. So, I`m trying to build matrix, which will have ones at the required indices, and then multiply it by the interpolated(nearest neighbor) pooled data.\r\n``` python\r\n[[2, 5], [1, 4],\r\n [6, 1], [3, 7]]  -> maxpoo -> [[5, 4],\r\n                                [6, 7]]   ->   ind = [1, 3, 4, 7] -> one_hot ->\r\n\r\n-> [0, 1, 0, 0, 0, 0, 0, 0]\r\n   [0, 0, 0, 1, 0, 0, 0, 0]\r\n   [0, 0, 0, 0, 1, 0, 0, 0]\r\n   [0, 0, 0, 0, 0, 0, 0, 1]   ->  merge(summ by vertical axis)  ->  [0, 1, 0, 1, 1, 0, 0, 1]\r\n\r\nthen reshape to  [[0, 1, 0, 1], \r\n                  [1, 0, 0, 1]]\r\n\r\nand then multiply by interpolated (nearest neighbor) data from maxpool layer\r\n\r\n                [[5, 5], [4, 4],\r\n                 [6, 6], [7, 7]]   \r\n```\r\ni didn`t find some better function, to get ones_like index matrix.\r\nThere are tf.sparse_to_dense  function in tensorflow, but it implemented only for CPU.\r\n\r\nMaybe someone will try to optimize this method of getting ones_like index matrix."}