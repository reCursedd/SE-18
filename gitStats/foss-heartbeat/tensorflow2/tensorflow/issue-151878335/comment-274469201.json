{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/274469201", "html_url": "https://github.com/tensorflow/tensorflow/issues/2169#issuecomment-274469201", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2169", "id": 274469201, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDQ2OTIwMQ==", "user": {"login": "Pepslee", "id": 13853798, "node_id": "MDQ6VXNlcjEzODUzNzk4", "avatar_url": "https://avatars1.githubusercontent.com/u/13853798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pepslee", "html_url": "https://github.com/Pepslee", "followers_url": "https://api.github.com/users/Pepslee/followers", "following_url": "https://api.github.com/users/Pepslee/following{/other_user}", "gists_url": "https://api.github.com/users/Pepslee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pepslee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pepslee/subscriptions", "organizations_url": "https://api.github.com/users/Pepslee/orgs", "repos_url": "https://api.github.com/users/Pepslee/repos", "events_url": "https://api.github.com/users/Pepslee/events{/privacy}", "received_events_url": "https://api.github.com/users/Pepslee/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-23T11:50:54Z", "updated_at": "2017-01-23T11:50:54Z", "author_association": "NONE", "body_html": "<p>Remade code in one function</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">unpool</span>(<span class=\"pl-smi\">updates</span>, <span class=\"pl-smi\">mask</span>, <span class=\"pl-smi\">ksize</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">1</span>]):\n    input_shape <span class=\"pl-k\">=</span> updates.get_shape().as_list()\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span>  calculation new shape</span>\n    output_shape <span class=\"pl-k\">=</span> (input_shape[<span class=\"pl-c1\">0</span>], input_shape[<span class=\"pl-c1\">1</span>] <span class=\"pl-k\">*</span> ksize[<span class=\"pl-c1\">1</span>], input_shape[<span class=\"pl-c1\">2</span>] <span class=\"pl-k\">*</span> ksize[<span class=\"pl-c1\">2</span>], input_shape[<span class=\"pl-c1\">3</span>])\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> calculation indices for batch, height, width and feature maps</span>\n    one_like_mask <span class=\"pl-k\">=</span> tf.ones_like(mask)\n    batch_range <span class=\"pl-k\">=</span> tf.reshape(tf.range(output_shape[<span class=\"pl-c1\">0</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int64), <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[input_shape[<span class=\"pl-c1\">0</span>], <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>])\n    b <span class=\"pl-k\">=</span> one_like_mask <span class=\"pl-k\">*</span> batch_range\n    y <span class=\"pl-k\">=</span> mask <span class=\"pl-k\">//</span> (output_shape[<span class=\"pl-c1\">2</span>] <span class=\"pl-k\">*</span> output_shape[<span class=\"pl-c1\">3</span>])\n    x <span class=\"pl-k\">=</span> mask <span class=\"pl-k\">%</span> (output_shape[<span class=\"pl-c1\">2</span>] <span class=\"pl-k\">*</span> output_shape[<span class=\"pl-c1\">3</span>]) <span class=\"pl-k\">//</span> output_shape[<span class=\"pl-c1\">3</span>]\n    feature_range <span class=\"pl-k\">=</span> tf.range(output_shape[<span class=\"pl-c1\">3</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int64)\n    f <span class=\"pl-k\">=</span> one_like_mask <span class=\"pl-k\">*</span> feature_range\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> transpose indices &amp; reshape update values to one dimension</span>\n    updates_size <span class=\"pl-k\">=</span> tf.size(updates)\n    indices <span class=\"pl-k\">=</span> tf.transpose(tf.reshape(tf.stack([b, y, x, f]), [<span class=\"pl-c1\">4</span>, updates_size]))\n    values <span class=\"pl-k\">=</span> tf.reshape(updates, [updates_size])\n    ret <span class=\"pl-k\">=</span> tf.scatter_nd(indices, values, output_shape)\n    <span class=\"pl-k\">return</span> ret\n</pre></div>", "body_text": "Remade code in one function\ndef unpool(updates, mask, ksize=[1, 2, 2, 1]):\n    input_shape = updates.get_shape().as_list()\n    #  calculation new shape\n    output_shape = (input_shape[0], input_shape[1] * ksize[1], input_shape[2] * ksize[2], input_shape[3])\n    # calculation indices for batch, height, width and feature maps\n    one_like_mask = tf.ones_like(mask)\n    batch_range = tf.reshape(tf.range(output_shape[0], dtype=tf.int64), shape=[input_shape[0], 1, 1, 1])\n    b = one_like_mask * batch_range\n    y = mask // (output_shape[2] * output_shape[3])\n    x = mask % (output_shape[2] * output_shape[3]) // output_shape[3]\n    feature_range = tf.range(output_shape[3], dtype=tf.int64)\n    f = one_like_mask * feature_range\n    # transpose indices & reshape update values to one dimension\n    updates_size = tf.size(updates)\n    indices = tf.transpose(tf.reshape(tf.stack([b, y, x, f]), [4, updates_size]))\n    values = tf.reshape(updates, [updates_size])\n    ret = tf.scatter_nd(indices, values, output_shape)\n    return ret", "body": "Remade code in one function\r\n\r\n``` python\r\ndef unpool(updates, mask, ksize=[1, 2, 2, 1]):\r\n    input_shape = updates.get_shape().as_list()\r\n    #  calculation new shape\r\n    output_shape = (input_shape[0], input_shape[1] * ksize[1], input_shape[2] * ksize[2], input_shape[3])\r\n    # calculation indices for batch, height, width and feature maps\r\n    one_like_mask = tf.ones_like(mask)\r\n    batch_range = tf.reshape(tf.range(output_shape[0], dtype=tf.int64), shape=[input_shape[0], 1, 1, 1])\r\n    b = one_like_mask * batch_range\r\n    y = mask // (output_shape[2] * output_shape[3])\r\n    x = mask % (output_shape[2] * output_shape[3]) // output_shape[3]\r\n    feature_range = tf.range(output_shape[3], dtype=tf.int64)\r\n    f = one_like_mask * feature_range\r\n    # transpose indices & reshape update values to one dimension\r\n    updates_size = tf.size(updates)\r\n    indices = tf.transpose(tf.reshape(tf.stack([b, y, x, f]), [4, updates_size]))\r\n    values = tf.reshape(updates, [updates_size])\r\n    ret = tf.scatter_nd(indices, values, output_shape)\r\n    return ret\r\n\r\n```"}