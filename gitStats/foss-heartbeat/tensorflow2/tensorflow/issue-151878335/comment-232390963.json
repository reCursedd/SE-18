{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/232390963", "html_url": "https://github.com/tensorflow/tensorflow/issues/2169#issuecomment-232390963", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2169", "id": 232390963, "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjM5MDk2Mw==", "user": {"login": "girving", "id": 70511, "node_id": "MDQ6VXNlcjcwNTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/70511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/girving", "html_url": "https://github.com/girving", "followers_url": "https://api.github.com/users/girving/followers", "following_url": "https://api.github.com/users/girving/following{/other_user}", "gists_url": "https://api.github.com/users/girving/gists{/gist_id}", "starred_url": "https://api.github.com/users/girving/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/girving/subscriptions", "organizations_url": "https://api.github.com/users/girving/orgs", "repos_url": "https://api.github.com/users/girving/repos", "events_url": "https://api.github.com/users/girving/events{/privacy}", "received_events_url": "https://api.github.com/users/girving/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-13T15:25:38Z", "updated_at": "2016-07-13T15:25:38Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=8906225\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/syed-ahmed\">@syed-ahmed</a> To clarify, it will work but it's a bit awkward.  You can certainly store the indices, but the current <code>MaxPoolGradWithArgmax</code> op also wants the <em>values</em> that you originally passed to max pooling.  It should use only the shape from these values, but you still need to pass them in.  That's not too horrible when it's used as a gradient (though it's still a memory usage bug), but it is not clean enough to give it a nice name.</p>\n<p>The same bug occurred in the initial version of <code>conv_3d</code>, so if someone wants to fix this they can look at <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/conv_grad_ops_3d.cc\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/conv_grad_ops_3d.cc</a>.  The code defines a new op that takes an original shape input rather the whole original input, and uses the same C++ kernel to implement both of them (with a conditional based on name).</p>\n<p>If anyone does this, the new op can be given a nicer name like <code>max_unpool</code>.</p>", "body_text": "@syed-ahmed To clarify, it will work but it's a bit awkward.  You can certainly store the indices, but the current MaxPoolGradWithArgmax op also wants the values that you originally passed to max pooling.  It should use only the shape from these values, but you still need to pass them in.  That's not too horrible when it's used as a gradient (though it's still a memory usage bug), but it is not clean enough to give it a nice name.\nThe same bug occurred in the initial version of conv_3d, so if someone wants to fix this they can look at https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/conv_grad_ops_3d.cc.  The code defines a new op that takes an original shape input rather the whole original input, and uses the same C++ kernel to implement both of them (with a conditional based on name).\nIf anyone does this, the new op can be given a nicer name like max_unpool.", "body": "@syed-ahmed To clarify, it will work but it's a bit awkward.  You can certainly store the indices, but the current `MaxPoolGradWithArgmax` op also wants the _values_ that you originally passed to max pooling.  It should use only the shape from these values, but you still need to pass them in.  That's not too horrible when it's used as a gradient (though it's still a memory usage bug), but it is not clean enough to give it a nice name.\n\nThe same bug occurred in the initial version of `conv_3d`, so if someone wants to fix this they can look at https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/conv_grad_ops_3d.cc.  The code defines a new op that takes an original shape input rather the whole original input, and uses the same C++ kernel to implement both of them (with a conditional based on name).\n\nIf anyone does this, the new op can be given a nicer name like `max_unpool`.\n"}