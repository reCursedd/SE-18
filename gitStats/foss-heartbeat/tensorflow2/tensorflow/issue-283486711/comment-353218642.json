{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/353218642", "html_url": "https://github.com/tensorflow/tensorflow/pull/15515#issuecomment-353218642", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15515", "id": 353218642, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzIxODY0Mg==", "user": {"login": "rongjiecomputer", "id": 13115060, "node_id": "MDQ6VXNlcjEzMTE1MDYw", "avatar_url": "https://avatars2.githubusercontent.com/u/13115060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rongjiecomputer", "html_url": "https://github.com/rongjiecomputer", "followers_url": "https://api.github.com/users/rongjiecomputer/followers", "following_url": "https://api.github.com/users/rongjiecomputer/following{/other_user}", "gists_url": "https://api.github.com/users/rongjiecomputer/gists{/gist_id}", "starred_url": "https://api.github.com/users/rongjiecomputer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rongjiecomputer/subscriptions", "organizations_url": "https://api.github.com/users/rongjiecomputer/orgs", "repos_url": "https://api.github.com/users/rongjiecomputer/repos", "events_url": "https://api.github.com/users/rongjiecomputer/events{/privacy}", "received_events_url": "https://api.github.com/users/rongjiecomputer/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-21T00:04:11Z", "updated_at": "2017-12-21T00:04:11Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Example:</p>\n<div class=\"highlight highlight-source-c++\"><pre>  <span class=\"pl-en\">TF_ASSIGN_OR_RETURN</span>(a, foo(<span class=\"pl-c1\">10</span>));</pre></div>\n<p>In GCC, it will be expanded into:</p>\n<div class=\"highlight highlight-source-c++\"><pre><span class=\"pl-k\">auto</span> _status_or_value0 = (foo(<span class=\"pl-c1\">10</span>)); <span class=\"pl-k\">if</span> (!_status_or_value0.ok()) { <span class=\"pl-k\">return</span> _status_or_value0.<span class=\"pl-c1\">status</span>(); } a = std::move(_status_or_value0.ValueOrDie());</pre></div>\n<p>But in MSVC, it will be expanded into:</p>\n<div class=\"highlight highlight-source-c++\"><pre>(a, foo(<span class=\"pl-c1\">10</span>));</pre></div>\n<p>With warning C4003: not enough actual parameters for macro 'TF_STATUS_MACRO_GET_VARIADIC_IMPL'</p>\n<p>You can see in <a href=\"https://stackoverflow.com/questions/47752606/msvc-preprocessor-bug\" rel=\"nofollow\">https://stackoverflow.com/questions/47752606/msvc-preprocessor-bug</a> , StackOverflower said the original implementation is not standard-compliant. It works in GCC because GCC allows <code>__VA_ARGS__</code> to be empty as a compiler extension. MSVC does not allow that.</p>\n<p>The new implementation works in GCC as well. Can I just remove the old implementation and use the new one in all compilers?</p>", "body_text": "Example:\n  TF_ASSIGN_OR_RETURN(a, foo(10));\nIn GCC, it will be expanded into:\nauto _status_or_value0 = (foo(10)); if (!_status_or_value0.ok()) { return _status_or_value0.status(); } a = std::move(_status_or_value0.ValueOrDie());\nBut in MSVC, it will be expanded into:\n(a, foo(10));\nWith warning C4003: not enough actual parameters for macro 'TF_STATUS_MACRO_GET_VARIADIC_IMPL'\nYou can see in https://stackoverflow.com/questions/47752606/msvc-preprocessor-bug , StackOverflower said the original implementation is not standard-compliant. It works in GCC because GCC allows __VA_ARGS__ to be empty as a compiler extension. MSVC does not allow that.\nThe new implementation works in GCC as well. Can I just remove the old implementation and use the new one in all compilers?", "body": "Example:\r\n\r\n```cpp\r\n  TF_ASSIGN_OR_RETURN(a, foo(10));\r\n```\r\n\r\nIn GCC, it will be expanded into:\r\n\r\n```cpp\r\nauto _status_or_value0 = (foo(10)); if (!_status_or_value0.ok()) { return _status_or_value0.status(); } a = std::move(_status_or_value0.ValueOrDie());\r\n```\r\n\r\nBut in MSVC, it will be expanded into:\r\n\r\n```cpp\r\n(a, foo(10));\r\n```\r\n\r\nWith warning C4003: not enough actual parameters for macro 'TF_STATUS_MACRO_GET_VARIADIC_IMPL'\r\n\r\nYou can see in https://stackoverflow.com/questions/47752606/msvc-preprocessor-bug , StackOverflower said the original implementation is not standard-compliant. It works in GCC because GCC allows `__VA_ARGS__` to be empty as a compiler extension. MSVC does not allow that.\r\n\r\nThe new implementation works in GCC as well. Can I just remove the old implementation and use the new one in all compilers?"}