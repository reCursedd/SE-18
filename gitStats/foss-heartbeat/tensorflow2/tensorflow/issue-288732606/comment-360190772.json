{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/360190772", "html_url": "https://github.com/tensorflow/tensorflow/issues/16139#issuecomment-360190772", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16139", "id": 360190772, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDE5MDc3Mg==", "user": {"login": "cericson", "id": 6691014, "node_id": "MDQ6VXNlcjY2OTEwMTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/6691014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cericson", "html_url": "https://github.com/cericson", "followers_url": "https://api.github.com/users/cericson/followers", "following_url": "https://api.github.com/users/cericson/following{/other_user}", "gists_url": "https://api.github.com/users/cericson/gists{/gist_id}", "starred_url": "https://api.github.com/users/cericson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cericson/subscriptions", "organizations_url": "https://api.github.com/users/cericson/orgs", "repos_url": "https://api.github.com/users/cericson/repos", "events_url": "https://api.github.com/users/cericson/events{/privacy}", "received_events_url": "https://api.github.com/users/cericson/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-24T16:27:35Z", "updated_at": "2018-01-24T16:43:22Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=32753757\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/amathuri\">@amathuri</a> looks related to me. I must have missed that when searching for a solution to this problem.</p>\n<p>If it's helpful to anyone else, I did end up coming up with a workaround for my particular case. My architecture essentially has a separable 3D convolution, so I only need to convolve in one dimension at a time. My workaround was to use tf.nn.conv2d() instead, reshaping the z dimension into the batch dimension beforehand (so the shape is (depth, height, width, channels)). This lets me convolve in the x and y dimensions. Convolving in the z dimension is a little trickier, but I did it by swapping the x and z dimensions with tf.transpose(), convolving in x, then swapping the dimensions back.</p>\n<p>Unfortunately, this method prevents batching, so it may not be helpful for <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"276190388\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/14807\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/14807/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/14807\">#14807</a>. However, I may try something like this:<br>\n<a href=\"https://stackoverflow.com/questions/45987156/tensorflow-average-gradients-over-several-batches\" rel=\"nofollow\">https://stackoverflow.com/questions/45987156/tensorflow-average-gradients-over-several-batches</a><br>\nto do the batching instead.</p>", "body_text": "@amathuri looks related to me. I must have missed that when searching for a solution to this problem.\nIf it's helpful to anyone else, I did end up coming up with a workaround for my particular case. My architecture essentially has a separable 3D convolution, so I only need to convolve in one dimension at a time. My workaround was to use tf.nn.conv2d() instead, reshaping the z dimension into the batch dimension beforehand (so the shape is (depth, height, width, channels)). This lets me convolve in the x and y dimensions. Convolving in the z dimension is a little trickier, but I did it by swapping the x and z dimensions with tf.transpose(), convolving in x, then swapping the dimensions back.\nUnfortunately, this method prevents batching, so it may not be helpful for #14807. However, I may try something like this:\nhttps://stackoverflow.com/questions/45987156/tensorflow-average-gradients-over-several-batches\nto do the batching instead.", "body": "@amathuri looks related to me. I must have missed that when searching for a solution to this problem.\r\n\r\nIf it's helpful to anyone else, I did end up coming up with a workaround for my particular case. My architecture essentially has a separable 3D convolution, so I only need to convolve in one dimension at a time. My workaround was to use tf.nn.conv2d() instead, reshaping the z dimension into the batch dimension beforehand (so the shape is (depth, height, width, channels)). This lets me convolve in the x and y dimensions. Convolving in the z dimension is a little trickier, but I did it by swapping the x and z dimensions with tf.transpose(), convolving in x, then swapping the dimensions back.\r\n\r\nUnfortunately, this method prevents batching, so it may not be helpful for #14807. However, I may try something like this:\r\nhttps://stackoverflow.com/questions/45987156/tensorflow-average-gradients-over-several-batches\r\nto do the batching instead."}