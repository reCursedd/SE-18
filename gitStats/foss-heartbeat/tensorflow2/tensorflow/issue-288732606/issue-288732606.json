{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16139", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16139/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16139/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/16139/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/16139", "id": 288732606, "node_id": "MDU6SXNzdWUyODg3MzI2MDY=", "number": 16139, "title": "Segmentation fault when running optimization step with 3d convolution", "user": {"login": "cericson", "id": 6691014, "node_id": "MDQ6VXNlcjY2OTEwMTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/6691014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cericson", "html_url": "https://github.com/cericson", "followers_url": "https://api.github.com/users/cericson/followers", "following_url": "https://api.github.com/users/cericson/following{/other_user}", "gists_url": "https://api.github.com/users/cericson/gists{/gist_id}", "starred_url": "https://api.github.com/users/cericson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cericson/subscriptions", "organizations_url": "https://api.github.com/users/cericson/orgs", "repos_url": "https://api.github.com/users/cericson/repos", "events_url": "https://api.github.com/users/cericson/events{/privacy}", "received_events_url": "https://api.github.com/users/cericson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2018-01-15T22:29:25Z", "updated_at": "2018-11-20T07:52:01Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Arch Linux (4.14.13-1 linux kernel version)</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: source (using the package here: <a href=\"https://www.archlinux.org/packages/community/x86_64/python-tensorflow-cuda/\" rel=\"nofollow\">https://www.archlinux.org/packages/community/x86_64/python-tensorflow-cuda/</a>)</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.4.1</li>\n<li><strong>Python version</strong>: 3.6.4</li>\n<li><strong>Bazel version (if compiling from source)</strong>: 0.9.0</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 7.2.1</li>\n<li><strong>CUDA/cuDNN version</strong>: 9.1.85-1/7.0.5-2</li>\n<li><strong>GPU model and memory</strong>: NVidia Quadro K4200, 4028MiB</li>\n<li><strong>Exact command to reproduce</strong>: <code>python test.py</code><br>\nNote that the same code also fails in a Ubuntu docker container (Dockerfile attached).</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I set up a computation graph with a 3d convolution. I can evaluate the result of this graph, but when I attempt to optimize the parameters of the graph (<code>train_step.run(feed_dict={x: sample, y_: label})</code>), tensorflow segfaults.</p>\n<p>In a jupyterlab notebook running on Ubuntu, if I run the same code, the notebook hangs indefinitely at the same line. In both cases, the last line of the program is never run - \"ran train step\" is never printed.</p>\n<p>I also tried running this on my CPU with <code>os.environ['CUDA_VISIBLE_DEVICES'] = '-1'</code>. I get the same segfault.</p>\n<p>The segfault goes away if I do any of the following:</p>\n<ul>\n<li>Remove the 3d convolution</li>\n<li>Reduce the input size significantly (e.g. 100x smaller to 1 x 41 x 96 x 128 x 1)</li>\n<li>Reduce the kernel size significantly</li>\n</ul>\n<h3>Source code / logs</h3>\n<p>Minimal example code (test.py):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nsample <span class=\"pl-k\">=</span> np.zeros((<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">41</span>, <span class=\"pl-c1\">960</span>, <span class=\"pl-c1\">1280</span>, <span class=\"pl-c1\">1</span>))\nlabel <span class=\"pl-k\">=</span> np.zeros((<span class=\"pl-c1\">1</span>,))\n\nrc_kernel <span class=\"pl-k\">=</span> np.ones((<span class=\"pl-c1\">31</span>,))\n\nx <span class=\"pl-k\">=</span> tf.placeholder(tf.float64, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">41</span>, <span class=\"pl-c1\">960</span>, <span class=\"pl-c1\">1280</span>, <span class=\"pl-c1\">1</span>])\ny_ <span class=\"pl-k\">=</span> tf.placeholder(tf.float64, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>])\n\nW_conv_r <span class=\"pl-k\">=</span> tf.Variable(rc_kernel.reshape((<span class=\"pl-c1\">1</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>)))\nh_blur <span class=\"pl-k\">=</span> tf.nn.conv3d(x, W_conv_r, [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>], <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>VALID<span class=\"pl-pds\">\"</span></span>)\n\nh_sum <span class=\"pl-k\">=</span> tf.reduce_sum(tf.reduce_sum(tf.reduce_sum(h_blur, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>), <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>), <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\ny <span class=\"pl-k\">=</span> tf.sigmoid(h_sum)\n\nsq_err <span class=\"pl-k\">=</span> (y <span class=\"pl-k\">-</span> y_) <span class=\"pl-k\">**</span> <span class=\"pl-c1\">2</span>\n\ntrain_step <span class=\"pl-k\">=</span> tf.train.GradientDescentOptimizer(<span class=\"pl-c1\">0.1</span>).minimize(sq_err)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    sess.run(tf.global_variables_initializer())\n    E <span class=\"pl-k\">=</span> sq_err.eval(<span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x: sample, y_: label})\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\">f</span><span class=\"pl-pds\">'</span><span class=\"pl-s\">E = </span><span class=\"pl-c1\">{</span>E<span class=\"pl-c1\">}</span><span class=\"pl-pds\">'</span>)\n    train_step.run(<span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x: sample, y_: label})  <span class=\"pl-c\"><span class=\"pl-c\">#</span> fails here</span>\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ran train step<span class=\"pl-pds\">'</span></span>)</pre></div>\n<p>Dockerfile:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/1633128/Dockerfile.txt\">Dockerfile.txt</a></p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux (4.14.13-1 linux kernel version)\nTensorFlow installed from (source or binary): source (using the package here: https://www.archlinux.org/packages/community/x86_64/python-tensorflow-cuda/)\nTensorFlow version (use command below): 1.4.1\nPython version: 3.6.4\nBazel version (if compiling from source): 0.9.0\nGCC/Compiler version (if compiling from source): 7.2.1\nCUDA/cuDNN version: 9.1.85-1/7.0.5-2\nGPU model and memory: NVidia Quadro K4200, 4028MiB\nExact command to reproduce: python test.py\nNote that the same code also fails in a Ubuntu docker container (Dockerfile attached).\n\nDescribe the problem\nI set up a computation graph with a 3d convolution. I can evaluate the result of this graph, but when I attempt to optimize the parameters of the graph (train_step.run(feed_dict={x: sample, y_: label})), tensorflow segfaults.\nIn a jupyterlab notebook running on Ubuntu, if I run the same code, the notebook hangs indefinitely at the same line. In both cases, the last line of the program is never run - \"ran train step\" is never printed.\nI also tried running this on my CPU with os.environ['CUDA_VISIBLE_DEVICES'] = '-1'. I get the same segfault.\nThe segfault goes away if I do any of the following:\n\nRemove the 3d convolution\nReduce the input size significantly (e.g. 100x smaller to 1 x 41 x 96 x 128 x 1)\nReduce the kernel size significantly\n\nSource code / logs\nMinimal example code (test.py):\nimport numpy as np\nimport tensorflow as tf\n\nsample = np.zeros((1, 41, 960, 1280, 1))\nlabel = np.zeros((1,))\n\nrc_kernel = np.ones((31,))\n\nx = tf.placeholder(tf.float64, shape=[None, 41, 960, 1280, 1])\ny_ = tf.placeholder(tf.float64, shape=[None])\n\nW_conv_r = tf.Variable(rc_kernel.reshape((1, -1, 1, 1, 1)))\nh_blur = tf.nn.conv3d(x, W_conv_r, [1, 1, 1, 1, 1], \"VALID\")\n\nh_sum = tf.reduce_sum(tf.reduce_sum(tf.reduce_sum(h_blur, axis=3), axis=2), axis=1)\ny = tf.sigmoid(h_sum)\n\nsq_err = (y - y_) ** 2\n\ntrain_step = tf.train.GradientDescentOptimizer(0.1).minimize(sq_err)\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    E = sq_err.eval(feed_dict={x: sample, y_: label})\n    print(f'E = {E}')\n    train_step.run(feed_dict={x: sample, y_: label})  # fails here\n    print('ran train step')\nDockerfile:\nDockerfile.txt", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Arch Linux (4.14.13-1 linux kernel version)\r\n- **TensorFlow installed from (source or binary)**: source (using the package here: https://www.archlinux.org/packages/community/x86_64/python-tensorflow-cuda/)\r\n- **TensorFlow version (use command below)**: 1.4.1\r\n- **Python version**: 3.6.4\r\n- **Bazel version (if compiling from source)**: 0.9.0\r\n- **GCC/Compiler version (if compiling from source)**: 7.2.1\r\n- **CUDA/cuDNN version**: 9.1.85-1/7.0.5-2\r\n- **GPU model and memory**: NVidia Quadro K4200, 4028MiB\r\n- **Exact command to reproduce**: `python test.py`\r\nNote that the same code also fails in a Ubuntu docker container (Dockerfile attached).\r\n\r\n### Describe the problem\r\nI set up a computation graph with a 3d convolution. I can evaluate the result of this graph, but when I attempt to optimize the parameters of the graph (`train_step.run(feed_dict={x: sample, y_: label})`), tensorflow segfaults.\r\n\r\nIn a jupyterlab notebook running on Ubuntu, if I run the same code, the notebook hangs indefinitely at the same line. In both cases, the last line of the program is never run - \"ran train step\" is never printed.\r\n\r\nI also tried running this on my CPU with `os.environ['CUDA_VISIBLE_DEVICES'] = '-1'`. I get the same segfault.\r\n\r\nThe segfault goes away if I do any of the following:\r\n- Remove the 3d convolution\r\n- Reduce the input size significantly (e.g. 100x smaller to 1 x 41 x 96 x 128 x 1)\r\n- Reduce the kernel size significantly\r\n\r\n### Source code / logs\r\nMinimal example code (test.py):\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nsample = np.zeros((1, 41, 960, 1280, 1))\r\nlabel = np.zeros((1,))\r\n\r\nrc_kernel = np.ones((31,))\r\n\r\nx = tf.placeholder(tf.float64, shape=[None, 41, 960, 1280, 1])\r\ny_ = tf.placeholder(tf.float64, shape=[None])\r\n\r\nW_conv_r = tf.Variable(rc_kernel.reshape((1, -1, 1, 1, 1)))\r\nh_blur = tf.nn.conv3d(x, W_conv_r, [1, 1, 1, 1, 1], \"VALID\")\r\n\r\nh_sum = tf.reduce_sum(tf.reduce_sum(tf.reduce_sum(h_blur, axis=3), axis=2), axis=1)\r\ny = tf.sigmoid(h_sum)\r\n\r\nsq_err = (y - y_) ** 2\r\n\r\ntrain_step = tf.train.GradientDescentOptimizer(0.1).minimize(sq_err)\r\n\r\nwith tf.Session() as sess:\r\n    sess.run(tf.global_variables_initializer())\r\n    E = sq_err.eval(feed_dict={x: sample, y_: label})\r\n    print(f'E = {E}')\r\n    train_step.run(feed_dict={x: sample, y_: label})  # fails here\r\n    print('ran train step')\r\n```\r\n\r\nDockerfile:\r\n[Dockerfile.txt](https://github.com/tensorflow/tensorflow/files/1633128/Dockerfile.txt)"}