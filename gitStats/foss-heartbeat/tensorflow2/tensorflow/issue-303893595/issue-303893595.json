{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17593", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17593/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17593/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17593/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17593", "id": 303893595, "node_id": "MDU6SXNzdWUzMDM4OTM1OTU=", "number": 17593, "title": "tf.TensorShape equality comparison can return True for non-fully defined shapes", "user": {"login": "leandro-gracia-gil", "id": 8785797, "node_id": "MDQ6VXNlcjg3ODU3OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/8785797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leandro-gracia-gil", "html_url": "https://github.com/leandro-gracia-gil", "followers_url": "https://api.github.com/users/leandro-gracia-gil/followers", "following_url": "https://api.github.com/users/leandro-gracia-gil/following{/other_user}", "gists_url": "https://api.github.com/users/leandro-gracia-gil/gists{/gist_id}", "starred_url": "https://api.github.com/users/leandro-gracia-gil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leandro-gracia-gil/subscriptions", "organizations_url": "https://api.github.com/users/leandro-gracia-gil/orgs", "repos_url": "https://api.github.com/users/leandro-gracia-gil/repos", "events_url": "https://api.github.com/users/leandro-gracia-gil/events{/privacy}", "received_events_url": "https://api.github.com/users/leandro-gracia-gil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-03-09T16:12:52Z", "updated_at": "2018-08-24T21:55:11Z", "closed_at": "2018-08-24T21:55:11Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: yes, but trivial one-liner code.</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: platform independent problem</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: either</li>\n<li><strong>TensorFlow version (use command below)</strong>: v1.6.0-0-gd2e24b6039 1.6.0</li>\n<li><strong>Python version</strong>:  tested in 3.5 and 3.6</li>\n<li><strong>Bazel version (if compiling from source)</strong>: not relevant</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: not relevant</li>\n<li><strong>CUDA/cuDNN version</strong>: not relevant</li>\n<li><strong>GPU model and memory</strong>: not relevant</li>\n<li><strong>Exact command to reproduce</strong>: see source one-liner below</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>tf.TensorShape equality comparison is designed to return None if any of its dimensions has a value of None. However, there is one case when this behavior fails and returns True when it shouldn't.</p>\n<h3>Source code / logs</h3>\n<div class=\"highlight highlight-source-python\"><pre>dim <span class=\"pl-k\">=</span> tf.Dimension(<span class=\"pl-c1\">None</span>)\ntf.TensorShape(dim) <span class=\"pl-k\">==</span> tf.TensorShape(dim) <span class=\"pl-c\"><span class=\"pl-c\">#</span> Returns True instead of None.</span>\ntf.TensorShape([<span class=\"pl-c1\">None</span>]) <span class=\"pl-k\">==</span> tf.TensorShape([<span class=\"pl-c1\">None</span>]) <span class=\"pl-c\"><span class=\"pl-c\">#</span> Correctly returns None.</span></pre></div>\n<p>This can, of course, inadvertently appear in more complex shape manipulation codes and lead to unexpected results.</p>\n<p>A bit of debugging suggests that if the dimension objects inside the TensorShape have the same id, they are skipped when invoking <code>tf.Dimension.__eq__</code>. This might be because dimension comparison is triggered through the list containing them rather than individually iterating them.</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): yes, but trivial one-liner code.\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): platform independent problem\nTensorFlow installed from (source or binary): either\nTensorFlow version (use command below): v1.6.0-0-gd2e24b6039 1.6.0\nPython version:  tested in 3.5 and 3.6\nBazel version (if compiling from source): not relevant\nGCC/Compiler version (if compiling from source): not relevant\nCUDA/cuDNN version: not relevant\nGPU model and memory: not relevant\nExact command to reproduce: see source one-liner below\n\nDescribe the problem\ntf.TensorShape equality comparison is designed to return None if any of its dimensions has a value of None. However, there is one case when this behavior fails and returns True when it shouldn't.\nSource code / logs\ndim = tf.Dimension(None)\ntf.TensorShape(dim) == tf.TensorShape(dim) # Returns True instead of None.\ntf.TensorShape([None]) == tf.TensorShape([None]) # Correctly returns None.\nThis can, of course, inadvertently appear in more complex shape manipulation codes and lead to unexpected results.\nA bit of debugging suggests that if the dimension objects inside the TensorShape have the same id, they are skipped when invoking tf.Dimension.__eq__. This might be because dimension comparison is triggered through the list containing them rather than individually iterating them.", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: yes, but trivial one-liner code.\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: platform independent problem\r\n- **TensorFlow installed from (source or binary)**: either\r\n- **TensorFlow version (use command below)**: v1.6.0-0-gd2e24b6039 1.6.0\r\n- **Python version**:  tested in 3.5 and 3.6\r\n- **Bazel version (if compiling from source)**: not relevant\r\n- **GCC/Compiler version (if compiling from source)**: not relevant\r\n- **CUDA/cuDNN version**: not relevant\r\n- **GPU model and memory**: not relevant\r\n- **Exact command to reproduce**: see source one-liner below\r\n\r\n### Describe the problem\r\ntf.TensorShape equality comparison is designed to return None if any of its dimensions has a value of None. However, there is one case when this behavior fails and returns True when it shouldn't.\r\n\r\n### Source code / logs\r\n```python\r\ndim = tf.Dimension(None)\r\ntf.TensorShape(dim) == tf.TensorShape(dim) # Returns True instead of None.\r\ntf.TensorShape([None]) == tf.TensorShape([None]) # Correctly returns None.\r\n```\r\n\r\nThis can, of course, inadvertently appear in more complex shape manipulation codes and lead to unexpected results.\r\n\r\nA bit of debugging suggests that if the dimension objects inside the TensorShape have the same id, they are skipped when invoking `tf.Dimension.__eq__`. This might be because dimension comparison is triggered through the list containing them rather than individually iterating them."}