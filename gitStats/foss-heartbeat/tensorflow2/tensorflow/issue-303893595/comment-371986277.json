{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/371986277", "html_url": "https://github.com/tensorflow/tensorflow/issues/17593#issuecomment-371986277", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17593", "id": 371986277, "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTk4NjI3Nw==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-03-10T00:49:47Z", "updated_at": "2018-03-10T00:49:47Z", "author_association": "MEMBER", "body_html": "<p>In the implementation of <code>tf.Dimension</code>, I could see the return value will be None for <code>==</code> if any of the dimensions compared is None. However, I couldn't find any reference pointing to the same behavior of TensorShape. Not sure if None should be returned for '==' against TensorShape.</p>\n<p>I did find an issue related to the equality of TensorShape and that is related to the issue mentioned here:</p>\n<pre><code># python\nPython 2.7.12 (default, Dec  4 2017, 14:50:18) \n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import tensorflow as tf\n&gt;&gt;&gt; tf.TensorShape([None]) == tf.TensorShape([None])\nFalse\n&gt;&gt;&gt; tf.TensorShape([tf.Dimension(None)]) == tf.TensorShape([tf.Dimension(None)])\nFalse\n&gt;&gt;&gt; dim = tf.Dimension(None)\n&gt;&gt;&gt; tf.TensorShape([dim]) == tf.TensorShape([dim])\nTrue\n&gt;&gt;&gt; \n</code></pre>\n<p>The inconsistency is caused by the implementation in <code>as_dimension</code> where dimension is directly assigned. Created a PR <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"304024206\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/17607\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/17607/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/17607\">#17607</a> so that a copy of the value is performed (so that id will differ) to fix this issue.</p>", "body_text": "In the implementation of tf.Dimension, I could see the return value will be None for == if any of the dimensions compared is None. However, I couldn't find any reference pointing to the same behavior of TensorShape. Not sure if None should be returned for '==' against TensorShape.\nI did find an issue related to the equality of TensorShape and that is related to the issue mentioned here:\n# python\nPython 2.7.12 (default, Dec  4 2017, 14:50:18) \n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import tensorflow as tf\n>>> tf.TensorShape([None]) == tf.TensorShape([None])\nFalse\n>>> tf.TensorShape([tf.Dimension(None)]) == tf.TensorShape([tf.Dimension(None)])\nFalse\n>>> dim = tf.Dimension(None)\n>>> tf.TensorShape([dim]) == tf.TensorShape([dim])\nTrue\n>>> \n\nThe inconsistency is caused by the implementation in as_dimension where dimension is directly assigned. Created a PR #17607 so that a copy of the value is performed (so that id will differ) to fix this issue.", "body": "In the implementation of `tf.Dimension`, I could see the return value will be None for `==` if any of the dimensions compared is None. However, I couldn't find any reference pointing to the same behavior of TensorShape. Not sure if None should be returned for '==' against TensorShape.\r\n\r\nI did find an issue related to the equality of TensorShape and that is related to the issue mentioned here:\r\n```\r\n# python\r\nPython 2.7.12 (default, Dec  4 2017, 14:50:18) \r\n[GCC 5.4.0 20160609] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import tensorflow as tf\r\n>>> tf.TensorShape([None]) == tf.TensorShape([None])\r\nFalse\r\n>>> tf.TensorShape([tf.Dimension(None)]) == tf.TensorShape([tf.Dimension(None)])\r\nFalse\r\n>>> dim = tf.Dimension(None)\r\n>>> tf.TensorShape([dim]) == tf.TensorShape([dim])\r\nTrue\r\n>>> \r\n```\r\n\r\nThe inconsistency is caused by the implementation in `as_dimension` where dimension is directly assigned. Created a PR #17607 so that a copy of the value is performed (so that id will differ) to fix this issue."}