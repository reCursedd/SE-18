{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2068", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2068/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2068/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2068/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2068", "id": 150490267, "node_id": "MDU6SXNzdWUxNTA0OTAyNjc=", "number": 2068, "title": "No mechanism for handling user-defined Tensor wrappers in the arguments to `Session.run()`", "user": {"login": "matthew-pickett", "id": 2808902, "node_id": "MDQ6VXNlcjI4MDg5MDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/2808902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-pickett", "html_url": "https://github.com/matthew-pickett", "followers_url": "https://api.github.com/users/matthew-pickett/followers", "following_url": "https://api.github.com/users/matthew-pickett/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-pickett/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-pickett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-pickett/subscriptions", "organizations_url": "https://api.github.com/users/matthew-pickett/orgs", "repos_url": "https://api.github.com/users/matthew-pickett/repos", "events_url": "https://api.github.com/users/matthew-pickett/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-pickett/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-04-22T22:58:45Z", "updated_at": "2017-06-16T17:30:50Z", "closed_at": "2017-06-16T17:30:50Z", "author_association": "NONE", "body_html": "<p>GitHub issues are for bugs / installation problems / feature requests.<br>\nFor general support from the community, see <a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">StackOverflow</a>.<br>\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed<br>\nout of scope for GitHub Issues and point people to StackOverflow.</p>\n<p>For bugs or installation issues, please provide the following information.<br>\nThe more information you provide, the more easily we will be able to offer<br>\nhelp and advice.</p>\n<h3>Environment info</h3>\n<p>Operating System: Ubuntu 14.04</p>\n<p>Installed version of CUDA and cuDNN:<br>\n(please attach the output of <code>ls -l /path/to/cuda/lib/libcud*</code>):</p>\n<p>-rw-r--r-- 1 root root   322936 Feb 25 17:24 /usr/local/cuda/lib64/libcudadevrt.a<br>\nlrwxrwxrwx 1 root root       16 Feb 25 17:24 /usr/local/cuda/lib64/libcudart.so -&gt; libcudart.so.7.5<br>\nlrwxrwxrwx 1 root root       19 Feb 25 17:24 /usr/local/cuda/lib64/libcudart.so.7.5 -&gt; libcudart.so.7.5.18<br>\n-rwxr-xr-x 1 root root   383336 Feb 25 17:24 /usr/local/cuda/lib64/libcudart.so.7.5.18<br>\n-rw-r--r-- 1 root root   720192 Feb 25 17:24 /usr/local/cuda/lib64/libcudart_static.a<br>\n-rwxr-xr-x 1 root root 61453024 Feb 25 17:38 /usr/local/cuda/lib64/libcudnn.so<br>\n-rwxr-xr-x 1 root root 61453024 Feb 25 17:38 /usr/local/cuda/lib64/libcudnn.so.4<br>\n-rwxr-xr-x 1 root root 61453024 Feb 25 17:38 /usr/local/cuda/lib64/libcudnn.so.4.0.7<br>\n-rw-r--r-- 1 root root 62025862 Feb 25 17:38 /usr/local/cuda/lib64/libcudnn_static.a</p>\n<p>If installed from binary pip package, provide:</p>\n<ol>\n<li>Which pip package you installed.</li>\n</ol>\n<p>Version: 0.8.0rc0</p>\n<ol>\n<li>The output from python -c \"import tensorflow; print(tensorflow.<strong>version</strong>)\".</li>\n</ol>\n<p>I tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally<br>\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally<br>\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally<br>\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally<br>\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally<br>\n0.8.0rc0</p>\n<p>If installed from sources, provide the commit hash:</p>\n<h3>Steps to reproduce</h3>\n<p>A simple script to illustrate what I'm trying to do is pasted below. The conversion function works as advertised when applying a downstream TensorFlow operator to a registered class. However, it appears that the run function does not try to apply registered conversion functions to the fetches. It seems intuitive that it would try. Adding in this functionality would make libraries built on top of TensorFlow feel a bit more seamless.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> create some dummy class that wraps a tensor</span>\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">SquaredTensor</span>(<span class=\"pl-c1\">object</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">tensor</span>):\n        <span class=\"pl-c1\">self</span>.sq <span class=\"pl-k\">=</span> tf.square(tensor)\n\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> create conversion function back to a tensor</span>\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">squared_to_tensor</span>(<span class=\"pl-smi\">value</span>, <span class=\"pl-smi\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">name</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>, <span class=\"pl-smi\">as_ref</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>):\n    <span class=\"pl-k\">return</span> value.sq\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> register conversion function</span>\ntf.register_tensor_conversion_function(SquaredTensor, squared_to_tensor)\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    a <span class=\"pl-k\">=</span> np.random.random(<span class=\"pl-c1\">1000</span>)\n    b <span class=\"pl-k\">=</span> SquaredTensor(a)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> works as intended when a tf function is applied to class with conversion function</span>\n    c <span class=\"pl-k\">=</span> tf.sqrt(b)\n    c_eval <span class=\"pl-k\">=</span> sess.run([c])\n    <span class=\"pl-k\">assert</span> np.allclose(a, c_eval)\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> directly evaluating the registered class fails</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> seems like this should work by trying to apply conversions on run fetches:</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> b_eval = sess.run([b])</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> instead we need to explicitly convert:</span>\n    b_eval <span class=\"pl-k\">=</span> sess.run([b.sq])\n    <span class=\"pl-k\">assert</span> np.allclose(a<span class=\"pl-k\">*</span>a, b_eval)</pre></div>\n<h3>What have you tried?</h3>\n<h3>Logs or other output that would be helpful</h3>\n<p>(If logs are large, please upload as attachment).</p>\n<p>Trying to fetch a SquaredTensor directly yields:</p>\n<p><code>TypeError: Fetch argument &lt;__main__.SquaredTensor object at 0x7f63a5fa84d0&gt; of &lt;__main__.SquaredTensor object at 0x7f63a5fa84d0&gt; has invalid type &lt;class '__main__.SquaredTensor'&gt;, must be a string or Tensor. (Can not convert a SquaredTensor into a Tensor or Operation.)</code></p>", "body_text": "GitHub issues are for bugs / installation problems / feature requests.\nFor general support from the community, see StackOverflow.\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed\nout of scope for GitHub Issues and point people to StackOverflow.\nFor bugs or installation issues, please provide the following information.\nThe more information you provide, the more easily we will be able to offer\nhelp and advice.\nEnvironment info\nOperating System: Ubuntu 14.04\nInstalled version of CUDA and cuDNN:\n(please attach the output of ls -l /path/to/cuda/lib/libcud*):\n-rw-r--r-- 1 root root   322936 Feb 25 17:24 /usr/local/cuda/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root       16 Feb 25 17:24 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.7.5\nlrwxrwxrwx 1 root root       19 Feb 25 17:24 /usr/local/cuda/lib64/libcudart.so.7.5 -> libcudart.so.7.5.18\n-rwxr-xr-x 1 root root   383336 Feb 25 17:24 /usr/local/cuda/lib64/libcudart.so.7.5.18\n-rw-r--r-- 1 root root   720192 Feb 25 17:24 /usr/local/cuda/lib64/libcudart_static.a\n-rwxr-xr-x 1 root root 61453024 Feb 25 17:38 /usr/local/cuda/lib64/libcudnn.so\n-rwxr-xr-x 1 root root 61453024 Feb 25 17:38 /usr/local/cuda/lib64/libcudnn.so.4\n-rwxr-xr-x 1 root root 61453024 Feb 25 17:38 /usr/local/cuda/lib64/libcudnn.so.4.0.7\n-rw-r--r-- 1 root root 62025862 Feb 25 17:38 /usr/local/cuda/lib64/libcudnn_static.a\nIf installed from binary pip package, provide:\n\nWhich pip package you installed.\n\nVersion: 0.8.0rc0\n\nThe output from python -c \"import tensorflow; print(tensorflow.version)\".\n\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally\n0.8.0rc0\nIf installed from sources, provide the commit hash:\nSteps to reproduce\nA simple script to illustrate what I'm trying to do is pasted below. The conversion function works as advertised when applying a downstream TensorFlow operator to a registered class. However, it appears that the run function does not try to apply registered conversion functions to the fetches. It seems intuitive that it would try. Adding in this functionality would make libraries built on top of TensorFlow feel a bit more seamless.\nimport numpy as np\nimport tensorflow as tf\n\n\n# create some dummy class that wraps a tensor\nclass SquaredTensor(object):\n    def __init__(self, tensor):\n        self.sq = tf.square(tensor)\n\n\n# create conversion function back to a tensor\ndef squared_to_tensor(value, dtype=None, name=None, as_ref=False):\n    return value.sq\n\n# register conversion function\ntf.register_tensor_conversion_function(SquaredTensor, squared_to_tensor)\n\nwith tf.Session() as sess:\n    a = np.random.random(1000)\n    b = SquaredTensor(a)\n\n    # works as intended when a tf function is applied to class with conversion function\n    c = tf.sqrt(b)\n    c_eval = sess.run([c])\n    assert np.allclose(a, c_eval)\n\n    # directly evaluating the registered class fails\n    # seems like this should work by trying to apply conversions on run fetches:\n    # b_eval = sess.run([b])\n    # instead we need to explicitly convert:\n    b_eval = sess.run([b.sq])\n    assert np.allclose(a*a, b_eval)\nWhat have you tried?\nLogs or other output that would be helpful\n(If logs are large, please upload as attachment).\nTrying to fetch a SquaredTensor directly yields:\nTypeError: Fetch argument <__main__.SquaredTensor object at 0x7f63a5fa84d0> of <__main__.SquaredTensor object at 0x7f63a5fa84d0> has invalid type <class '__main__.SquaredTensor'>, must be a string or Tensor. (Can not convert a SquaredTensor into a Tensor or Operation.)", "body": "GitHub issues are for bugs / installation problems / feature requests.  \nFor general support from the community, see [StackOverflow](https://stackoverflow.com/questions/tagged/tensorflow).\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed\nout of scope for GitHub Issues and point people to StackOverflow.\n\nFor bugs or installation issues, please provide the following information.\nThe more information you provide, the more easily we will be able to offer\nhelp and advice.\n### Environment info\n\nOperating System: Ubuntu 14.04\n\nInstalled version of CUDA and cuDNN: \n(please attach the output of `ls -l /path/to/cuda/lib/libcud*`):\n\n-rw-r--r-- 1 root root   322936 Feb 25 17:24 /usr/local/cuda/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root       16 Feb 25 17:24 /usr/local/cuda/lib64/libcudart.so -> libcudart.so.7.5\nlrwxrwxrwx 1 root root       19 Feb 25 17:24 /usr/local/cuda/lib64/libcudart.so.7.5 -> libcudart.so.7.5.18\n-rwxr-xr-x 1 root root   383336 Feb 25 17:24 /usr/local/cuda/lib64/libcudart.so.7.5.18\n-rw-r--r-- 1 root root   720192 Feb 25 17:24 /usr/local/cuda/lib64/libcudart_static.a\n-rwxr-xr-x 1 root root 61453024 Feb 25 17:38 /usr/local/cuda/lib64/libcudnn.so\n-rwxr-xr-x 1 root root 61453024 Feb 25 17:38 /usr/local/cuda/lib64/libcudnn.so.4\n-rwxr-xr-x 1 root root 61453024 Feb 25 17:38 /usr/local/cuda/lib64/libcudnn.so.4.0.7\n-rw-r--r-- 1 root root 62025862 Feb 25 17:38 /usr/local/cuda/lib64/libcudnn_static.a\n\nIf installed from binary pip package, provide:\n1. Which pip package you installed.\n\nVersion: 0.8.0rc0\n1. The output from python -c \"import tensorflow; print(tensorflow.**version**)\".\n\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:105] successfully opened CUDA library libcurand.so locally\n0.8.0rc0\n\nIf installed from sources, provide the commit hash:\n### Steps to reproduce\n\nA simple script to illustrate what I'm trying to do is pasted below. The conversion function works as advertised when applying a downstream TensorFlow operator to a registered class. However, it appears that the run function does not try to apply registered conversion functions to the fetches. It seems intuitive that it would try. Adding in this functionality would make libraries built on top of TensorFlow feel a bit more seamless.\n\n``` python\nimport numpy as np\nimport tensorflow as tf\n\n\n# create some dummy class that wraps a tensor\nclass SquaredTensor(object):\n    def __init__(self, tensor):\n        self.sq = tf.square(tensor)\n\n\n# create conversion function back to a tensor\ndef squared_to_tensor(value, dtype=None, name=None, as_ref=False):\n    return value.sq\n\n# register conversion function\ntf.register_tensor_conversion_function(SquaredTensor, squared_to_tensor)\n\nwith tf.Session() as sess:\n    a = np.random.random(1000)\n    b = SquaredTensor(a)\n\n    # works as intended when a tf function is applied to class with conversion function\n    c = tf.sqrt(b)\n    c_eval = sess.run([c])\n    assert np.allclose(a, c_eval)\n\n    # directly evaluating the registered class fails\n    # seems like this should work by trying to apply conversions on run fetches:\n    # b_eval = sess.run([b])\n    # instead we need to explicitly convert:\n    b_eval = sess.run([b.sq])\n    assert np.allclose(a*a, b_eval)\n```\n### What have you tried?\n### Logs or other output that would be helpful\n\n(If logs are large, please upload as attachment).\n\nTrying to fetch a SquaredTensor directly yields:\n\n`TypeError: Fetch argument <__main__.SquaredTensor object at 0x7f63a5fa84d0> of <__main__.SquaredTensor object at 0x7f63a5fa84d0> has invalid type <class '__main__.SquaredTensor'>, must be a string or Tensor. (Can not convert a SquaredTensor into a Tensor or Operation.)`\n"}