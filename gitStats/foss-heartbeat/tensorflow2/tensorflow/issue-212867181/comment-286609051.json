{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/286609051", "html_url": "https://github.com/tensorflow/tensorflow/pull/8218#issuecomment-286609051", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8218", "id": 286609051, "node_id": "MDEyOklzc3VlQ29tbWVudDI4NjYwOTA1MQ==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2017-03-15T00:58:24Z", "updated_at": "2017-03-15T00:58:24Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=38796628\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dandelionmane\">@dandelionmane</a> I wrote this change under the assumption that dependent projects might choose to write their own ./configure scripts, that define the .bazelrc in their root directory.</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3721087\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/damienmg\">@damienmg</a> How robust can we make Bazel's <code>.bazelrc</code> discovery? Assume we have three .bazelrc files:</p>\n<ul>\n<li>~/.bazelrc</li>\n<li>~/tf_serving/.bazelrc</li>\n<li>~/tf_serving/tensorflow/.bazelrc</li>\n</ul>\n<p>If we build something inside ~/tf_serving/tensorflow/... then should all three bazelrc's be loaded? And if so, having the latter ones take priority?</p>", "body_text": "@dandelionmane I wrote this change under the assumption that dependent projects might choose to write their own ./configure scripts, that define the .bazelrc in their root directory.\n@damienmg How robust can we make Bazel's .bazelrc discovery? Assume we have three .bazelrc files:\n\n~/.bazelrc\n~/tf_serving/.bazelrc\n~/tf_serving/tensorflow/.bazelrc\n\nIf we build something inside ~/tf_serving/tensorflow/... then should all three bazelrc's be loaded? And if so, having the latter ones take priority?", "body": "@dandelionmane I wrote this change under the assumption that dependent projects might choose to write their own ./configure scripts, that define the .bazelrc in their root directory.\r\n\r\n@damienmg How robust can we make Bazel's `.bazelrc` discovery? Assume we have three .bazelrc files:\r\n\r\n- ~/.bazelrc\r\n- ~/tf_serving/.bazelrc\r\n- ~/tf_serving/tensorflow/.bazelrc\r\n\r\nIf we build something inside ~/tf_serving/tensorflow/... then should all three bazelrc's be loaded? And if so, having the latter ones take priority?"}