{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6235", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6235/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6235/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6235/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6235", "id": 194742619, "node_id": "MDU6SXNzdWUxOTQ3NDI2MTk=", "number": 6235, "title": "[Windows] Couldn't open CUDA library cupti64_80.dll", "user": {"login": "Ghost---Shadow", "id": 7743925, "node_id": "MDQ6VXNlcjc3NDM5MjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7743925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ghost---Shadow", "html_url": "https://github.com/Ghost---Shadow", "followers_url": "https://api.github.com/users/Ghost---Shadow/followers", "following_url": "https://api.github.com/users/Ghost---Shadow/following{/other_user}", "gists_url": "https://api.github.com/users/Ghost---Shadow/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ghost---Shadow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ghost---Shadow/subscriptions", "organizations_url": "https://api.github.com/users/Ghost---Shadow/orgs", "repos_url": "https://api.github.com/users/Ghost---Shadow/repos", "events_url": "https://api.github.com/users/Ghost---Shadow/events{/privacy}", "received_events_url": "https://api.github.com/users/Ghost---Shadow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2016-12-10T03:52:13Z", "updated_at": "2017-08-12T05:58:30Z", "closed_at": "2016-12-12T17:57:05Z", "author_association": "NONE", "body_html": "<p>NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.</p>\n<p>For general support from the community, see <a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">StackOverflow</a>.<br>\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed<br>\nout of scope for GitHub Issues and point people to StackOverflow.</p>\n<p>For bugs or installation issues, please provide the following information.<br>\nThe more information you provide, the more easily we will be able to offer<br>\nhelp and advice.</p>\n<h3>What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?</h3>\n<p><a href=\"https://github.com/tensorflow/tensorflow/issues/5968\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/5968/hovercard\">This issue </a> is not applicable for me as CuDNN is getting loaded. I checked the CuDNN folder manually, there is no such dll.</p>\n<h3>Environment info</h3>\n<p>Operating System: Windows 10 Pro</p>\n<p>Installed version of CUDA and cuDNN:<br>\n(please attach the output of <code>ls -l /path/to/cuda/lib/libcud*</code>):</p>\n<pre><code>D:\\TensorFlow&gt;nvcc --version\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2016 NVIDIA Corporation\nBuilt on Sat_Sep__3_19:05:48_CDT_2016\nCuda compilation tools, release 8.0, V8.0.44\n</code></pre>\n<pre><code>cudnn-8.0-windows10-x64-v5.1.zip\n</code></pre>\n<p>If installed from binary pip package, provide:</p>\n<ol>\n<li>A link to the pip package you installed: Sorry, I cant remember which package pip fetched. I just ran this command.</li>\n</ol>\n<pre><code>D:\\TensorFlow&gt;pip3.5 install --upgrade tensorflow-gpu\nRequirement already up-to-date: tensorflow-gpu in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages\nRequirement already up-to-date: wheel&gt;=0.26 in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from tensorflow-gpu)\nRequirement already up-to-date: six&gt;=1.10.0 in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from tensorflow-gpu)\nRequirement already up-to-date: numpy&gt;=1.11.0 in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from tensorflow-gpu)\nRequirement already up-to-date: protobuf==3.1.0 in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from tensorflow-gpu)\nRequirement already up-to-date: setuptools in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from protobuf==3.1.0-&gt;tensorflow-gpu)\n</code></pre>\n<ol start=\"2\">\n<li>The output from <code>python -c \"import tensorflow; print(tensorflow.__version__)\"</code>.</li>\n</ol>\n<pre><code>I c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cublas64_80.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cudnn64_5.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cufft64_80.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library nvcuda.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library curand64_80.dll locally\n0.12.0-rc1\n</code></pre>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<pre><code>import tensorflow as tf\nimport numpy as np\nimport random\n\nvLength = 8\n\nnodeCount = [vLength,8,8,vLength]\n\nSUMMARY_DIR = 'D:/Summary/'\n\nBATCH_SIZE = 10\nTRAIN_SIZE = 100\n\ndef model(x_t):    \n    layerCount = len(nodeCount)\n    layer = [None for _ in range(layerCount)]\n    weights = [None for _ in range(layerCount - 1)]\n    biases = [None for _ in range(layerCount - 1)]\n    layer[0] = x_t\n    for i in range(layerCount-1):\n        weights[i] = tf.Variable(tf.random_normal([nodeCount[i],nodeCount[i+1]]))\n        biases[i] = tf.Variable(tf.random_normal([nodeCount[i+1]]))\n          \n        layer[i+1] = tf.add(tf.matmul(layer[i],weights[i]),biases[i])\n        if(i != layerCount-2):\n            layer[i+1] = tf.nn.tanh(layer[i+1])\n        else:\n            layer[i+1] = tf.nn.softmax(layer[i+1])\n\n    return layer[i+1]\n\ndef getNextBatch():\n    v = [0.0 for _ in range(vLength)]\n    v[0] = 1.0\n\n    r = [None for _ in range(BATCH_SIZE)]\n    for i in range(BATCH_SIZE):\n        random.shuffle(v)\n        r[i] = v.copy()\n    return r,r\n    \nm = None\ndef trainNN():\n    x_t = tf.placeholder(tf.float32,[None,vLength],'input')\n    y_t = tf.placeholder(tf.float32, [None, vLength],'actual')\n    \n    m = model(x_t)    \n\n    with tf.name_scope('Cost_Function'):\n        cost = tf.reduce_mean(-tf.reduce_sum(y_t * tf.log(m)))\n        \n    with tf.name_scope('Learning_Rate'):\n        learning_rate = tf.Variable(0.5,dtype=tf.float32)\n\n    with tf.name_scope('Optimizer'):\n        optimizer = tf.train.AdamOptimizer().minimize(cost)\n\n    with tf.name_scope('testing'):\n        correct = tf.equal(tf.argmax(y_t,1),tf.argmax(m,1))\n        accuracy = tf.reduce_mean(tf.cast(correct,'float'))\n        tf.summary.scalar('accuracy',accuracy)\n\n    epochs = 10\n\n    with tf.Session() as sess:\n        merged = tf.summary.merge_all()\n        \n        sess.run(tf.global_variables_initializer())\n        \n        for epoch in range(epochs):            \n            tw = tf.summary.FileWriter(SUMMARY_DIR+'/epoch'+str(epoch),sess.graph)\n            epochLoss = 0\n            c = 0\n            for i in range(TRAIN_SIZE):\n                bx,by = getNextBatch()    \n                fd = {x_t:bx,y_t:by}                \n                run_metadata = tf.RunMetadata()\n                run_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\n                summary,c,_ = sess.run([merged,cost,optimizer],\n                              feed_dict=fd,\n                              options=run_options,\n                              run_metadata=run_metadata)\n                if(i%BATCH_SIZE == 0):\n                    tw.add_summary(summary,i)\n                    tw.add_run_metadata(run_metadata,'step%d'%i)\n                \n                epochLoss += c       \n            \n            tx,ty = getNextBatch()\n            print('Epoch ',epoch,'/',epochs,':',epochLoss/TRAIN_SIZE,' ',accuracy.eval({x_t:tx,y_t:ty}))\n       \n        tw.close()            \n\ntrainNN()\n</code></pre>\n<h3>What other attempted solutions have you tried?</h3>\n<p>I googled the said dll file. No, results.</p>\n<p>Could PTI stand for Parameter Tuning Interface?<br>\nI found <a href=\"http://www.socsci.uci.edu/~jkrichma/CARLsim/\" rel=\"nofollow\">this</a> link, but I am hesitant to installed anything that is not prescribed officially.</p>\n<h3>Logs or other output that would be helpful</h3>\n<p>(If logs are large, please upload as attachment or provide link).</p>\n<pre><code>D:\\TensorFlow&gt;D:\\TensorFlow\\identity_dnn_bare.py\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cublas64_80.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cudnn64_5.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cufft64_80.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library nvcuda.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library curand64_80.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:885] Found device 0 with properties:\nname: GeForce 930MX\nmajor: 5 minor: 0 memoryClockRate (GHz) 1.0195\npciBusID 0000:01:00.0\nTotal memory: 2.00GiB\nFree memory: 1.66GiB\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:906] DMA: 0\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:916] 0:   Y\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -&gt; (device: 0, name: GeForce 930MX, pci bus id: 0000:01:00.0)\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:119] Couldn't open CUDA library cupti64_80.dll\nF c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\platform\\default\\gpu\\cupti_wrapper.cc:59] Check failed: ::tensorflow::Status::OK() == (::tensorflow::Env::Default()-&gt;GetSymbolFromLibrary( GetDsoHandle(), kName, &amp;f)) (OK vs. Not found: cuptiActivityRegisterCallbacks not found)could not find cuptiActivityRegisterCallbacksin libcupti DSO\n</code></pre>", "body_text": "NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.\nFor general support from the community, see StackOverflow.\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed\nout of scope for GitHub Issues and point people to StackOverflow.\nFor bugs or installation issues, please provide the following information.\nThe more information you provide, the more easily we will be able to offer\nhelp and advice.\nWhat related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\nThis issue  is not applicable for me as CuDNN is getting loaded. I checked the CuDNN folder manually, there is no such dll.\nEnvironment info\nOperating System: Windows 10 Pro\nInstalled version of CUDA and cuDNN:\n(please attach the output of ls -l /path/to/cuda/lib/libcud*):\nD:\\TensorFlow>nvcc --version\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2016 NVIDIA Corporation\nBuilt on Sat_Sep__3_19:05:48_CDT_2016\nCuda compilation tools, release 8.0, V8.0.44\n\ncudnn-8.0-windows10-x64-v5.1.zip\n\nIf installed from binary pip package, provide:\n\nA link to the pip package you installed: Sorry, I cant remember which package pip fetched. I just ran this command.\n\nD:\\TensorFlow>pip3.5 install --upgrade tensorflow-gpu\nRequirement already up-to-date: tensorflow-gpu in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages\nRequirement already up-to-date: wheel>=0.26 in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from tensorflow-gpu)\nRequirement already up-to-date: six>=1.10.0 in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from tensorflow-gpu)\nRequirement already up-to-date: numpy>=1.11.0 in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from tensorflow-gpu)\nRequirement already up-to-date: protobuf==3.1.0 in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from tensorflow-gpu)\nRequirement already up-to-date: setuptools in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from protobuf==3.1.0->tensorflow-gpu)\n\n\nThe output from python -c \"import tensorflow; print(tensorflow.__version__)\".\n\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cublas64_80.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cudnn64_5.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cufft64_80.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library nvcuda.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library curand64_80.dll locally\n0.12.0-rc1\n\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nimport tensorflow as tf\nimport numpy as np\nimport random\n\nvLength = 8\n\nnodeCount = [vLength,8,8,vLength]\n\nSUMMARY_DIR = 'D:/Summary/'\n\nBATCH_SIZE = 10\nTRAIN_SIZE = 100\n\ndef model(x_t):    \n    layerCount = len(nodeCount)\n    layer = [None for _ in range(layerCount)]\n    weights = [None for _ in range(layerCount - 1)]\n    biases = [None for _ in range(layerCount - 1)]\n    layer[0] = x_t\n    for i in range(layerCount-1):\n        weights[i] = tf.Variable(tf.random_normal([nodeCount[i],nodeCount[i+1]]))\n        biases[i] = tf.Variable(tf.random_normal([nodeCount[i+1]]))\n          \n        layer[i+1] = tf.add(tf.matmul(layer[i],weights[i]),biases[i])\n        if(i != layerCount-2):\n            layer[i+1] = tf.nn.tanh(layer[i+1])\n        else:\n            layer[i+1] = tf.nn.softmax(layer[i+1])\n\n    return layer[i+1]\n\ndef getNextBatch():\n    v = [0.0 for _ in range(vLength)]\n    v[0] = 1.0\n\n    r = [None for _ in range(BATCH_SIZE)]\n    for i in range(BATCH_SIZE):\n        random.shuffle(v)\n        r[i] = v.copy()\n    return r,r\n    \nm = None\ndef trainNN():\n    x_t = tf.placeholder(tf.float32,[None,vLength],'input')\n    y_t = tf.placeholder(tf.float32, [None, vLength],'actual')\n    \n    m = model(x_t)    \n\n    with tf.name_scope('Cost_Function'):\n        cost = tf.reduce_mean(-tf.reduce_sum(y_t * tf.log(m)))\n        \n    with tf.name_scope('Learning_Rate'):\n        learning_rate = tf.Variable(0.5,dtype=tf.float32)\n\n    with tf.name_scope('Optimizer'):\n        optimizer = tf.train.AdamOptimizer().minimize(cost)\n\n    with tf.name_scope('testing'):\n        correct = tf.equal(tf.argmax(y_t,1),tf.argmax(m,1))\n        accuracy = tf.reduce_mean(tf.cast(correct,'float'))\n        tf.summary.scalar('accuracy',accuracy)\n\n    epochs = 10\n\n    with tf.Session() as sess:\n        merged = tf.summary.merge_all()\n        \n        sess.run(tf.global_variables_initializer())\n        \n        for epoch in range(epochs):            \n            tw = tf.summary.FileWriter(SUMMARY_DIR+'/epoch'+str(epoch),sess.graph)\n            epochLoss = 0\n            c = 0\n            for i in range(TRAIN_SIZE):\n                bx,by = getNextBatch()    \n                fd = {x_t:bx,y_t:by}                \n                run_metadata = tf.RunMetadata()\n                run_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\n                summary,c,_ = sess.run([merged,cost,optimizer],\n                              feed_dict=fd,\n                              options=run_options,\n                              run_metadata=run_metadata)\n                if(i%BATCH_SIZE == 0):\n                    tw.add_summary(summary,i)\n                    tw.add_run_metadata(run_metadata,'step%d'%i)\n                \n                epochLoss += c       \n            \n            tx,ty = getNextBatch()\n            print('Epoch ',epoch,'/',epochs,':',epochLoss/TRAIN_SIZE,' ',accuracy.eval({x_t:tx,y_t:ty}))\n       \n        tw.close()            \n\ntrainNN()\n\nWhat other attempted solutions have you tried?\nI googled the said dll file. No, results.\nCould PTI stand for Parameter Tuning Interface?\nI found this link, but I am hesitant to installed anything that is not prescribed officially.\nLogs or other output that would be helpful\n(If logs are large, please upload as attachment or provide link).\nD:\\TensorFlow>D:\\TensorFlow\\identity_dnn_bare.py\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cublas64_80.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cudnn64_5.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cufft64_80.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library nvcuda.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library curand64_80.dll locally\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:885] Found device 0 with properties:\nname: GeForce 930MX\nmajor: 5 minor: 0 memoryClockRate (GHz) 1.0195\npciBusID 0000:01:00.0\nTotal memory: 2.00GiB\nFree memory: 1.66GiB\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:906] DMA: 0\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:916] 0:   Y\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce 930MX, pci bus id: 0000:01:00.0)\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:119] Couldn't open CUDA library cupti64_80.dll\nF c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\platform\\default\\gpu\\cupti_wrapper.cc:59] Check failed: ::tensorflow::Status::OK() == (::tensorflow::Env::Default()->GetSymbolFromLibrary( GetDsoHandle(), kName, &f)) (OK vs. Not found: cuptiActivityRegisterCallbacks not found)could not find cuptiActivityRegisterCallbacksin libcupti DSO", "body": "NOTE: Only file GitHub issues for bugs and feature requests.  All other topics will be closed.\r\n\r\nFor general support from the community, see [StackOverflow](https://stackoverflow.com/questions/tagged/tensorflow).\r\nTo make bugs and feature requests more easy to find and organize, we close issues that are deemed\r\nout of scope for GitHub Issues and point people to StackOverflow.\r\n\r\nFor bugs or installation issues, please provide the following information.\r\nThe more information you provide, the more easily we will be able to offer\r\nhelp and advice.\r\n\r\n### What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\r\n\r\n[This issue ](https://github.com/tensorflow/tensorflow/issues/5968) is not applicable for me as CuDNN is getting loaded. I checked the CuDNN folder manually, there is no such dll.\r\n\r\n### Environment info\r\nOperating System: Windows 10 Pro\r\n\r\nInstalled version of CUDA and cuDNN: \r\n(please attach the output of `ls -l /path/to/cuda/lib/libcud*`):\r\n\r\n```\r\nD:\\TensorFlow>nvcc --version\r\nnvcc: NVIDIA (R) Cuda compiler driver\r\nCopyright (c) 2005-2016 NVIDIA Corporation\r\nBuilt on Sat_Sep__3_19:05:48_CDT_2016\r\nCuda compilation tools, release 8.0, V8.0.44\r\n```\r\n\r\n```\r\ncudnn-8.0-windows10-x64-v5.1.zip\r\n```\r\n\r\nIf installed from binary pip package, provide:\r\n\r\n1. A link to the pip package you installed: Sorry, I cant remember which package pip fetched. I just ran this command.\r\n```\r\nD:\\TensorFlow>pip3.5 install --upgrade tensorflow-gpu\r\nRequirement already up-to-date: tensorflow-gpu in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages\r\nRequirement already up-to-date: wheel>=0.26 in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from tensorflow-gpu)\r\nRequirement already up-to-date: six>=1.10.0 in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from tensorflow-gpu)\r\nRequirement already up-to-date: numpy>=1.11.0 in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from tensorflow-gpu)\r\nRequirement already up-to-date: protobuf==3.1.0 in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from tensorflow-gpu)\r\nRequirement already up-to-date: setuptools in c:\\users\\windows\\appdata\\local\\programs\\python\\python35\\lib\\site-packages (from protobuf==3.1.0->tensorflow-gpu)\r\n```\r\n2. The output from `python -c \"import tensorflow; print(tensorflow.__version__)\"`.\r\n\r\n```\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cublas64_80.dll locally\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cudnn64_5.dll locally\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cufft64_80.dll locally\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library nvcuda.dll locally\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library curand64_80.dll locally\r\n0.12.0-rc1\r\n```\r\n\r\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\r\n\r\n```\r\nimport tensorflow as tf\r\nimport numpy as np\r\nimport random\r\n\r\nvLength = 8\r\n\r\nnodeCount = [vLength,8,8,vLength]\r\n\r\nSUMMARY_DIR = 'D:/Summary/'\r\n\r\nBATCH_SIZE = 10\r\nTRAIN_SIZE = 100\r\n\r\ndef model(x_t):    \r\n    layerCount = len(nodeCount)\r\n    layer = [None for _ in range(layerCount)]\r\n    weights = [None for _ in range(layerCount - 1)]\r\n    biases = [None for _ in range(layerCount - 1)]\r\n    layer[0] = x_t\r\n    for i in range(layerCount-1):\r\n        weights[i] = tf.Variable(tf.random_normal([nodeCount[i],nodeCount[i+1]]))\r\n        biases[i] = tf.Variable(tf.random_normal([nodeCount[i+1]]))\r\n          \r\n        layer[i+1] = tf.add(tf.matmul(layer[i],weights[i]),biases[i])\r\n        if(i != layerCount-2):\r\n            layer[i+1] = tf.nn.tanh(layer[i+1])\r\n        else:\r\n            layer[i+1] = tf.nn.softmax(layer[i+1])\r\n\r\n    return layer[i+1]\r\n\r\ndef getNextBatch():\r\n    v = [0.0 for _ in range(vLength)]\r\n    v[0] = 1.0\r\n\r\n    r = [None for _ in range(BATCH_SIZE)]\r\n    for i in range(BATCH_SIZE):\r\n        random.shuffle(v)\r\n        r[i] = v.copy()\r\n    return r,r\r\n    \r\nm = None\r\ndef trainNN():\r\n    x_t = tf.placeholder(tf.float32,[None,vLength],'input')\r\n    y_t = tf.placeholder(tf.float32, [None, vLength],'actual')\r\n    \r\n    m = model(x_t)    \r\n\r\n    with tf.name_scope('Cost_Function'):\r\n        cost = tf.reduce_mean(-tf.reduce_sum(y_t * tf.log(m)))\r\n        \r\n    with tf.name_scope('Learning_Rate'):\r\n        learning_rate = tf.Variable(0.5,dtype=tf.float32)\r\n\r\n    with tf.name_scope('Optimizer'):\r\n        optimizer = tf.train.AdamOptimizer().minimize(cost)\r\n\r\n    with tf.name_scope('testing'):\r\n        correct = tf.equal(tf.argmax(y_t,1),tf.argmax(m,1))\r\n        accuracy = tf.reduce_mean(tf.cast(correct,'float'))\r\n        tf.summary.scalar('accuracy',accuracy)\r\n\r\n    epochs = 10\r\n\r\n    with tf.Session() as sess:\r\n        merged = tf.summary.merge_all()\r\n        \r\n        sess.run(tf.global_variables_initializer())\r\n        \r\n        for epoch in range(epochs):            \r\n            tw = tf.summary.FileWriter(SUMMARY_DIR+'/epoch'+str(epoch),sess.graph)\r\n            epochLoss = 0\r\n            c = 0\r\n            for i in range(TRAIN_SIZE):\r\n                bx,by = getNextBatch()    \r\n                fd = {x_t:bx,y_t:by}                \r\n                run_metadata = tf.RunMetadata()\r\n                run_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)\r\n                summary,c,_ = sess.run([merged,cost,optimizer],\r\n                              feed_dict=fd,\r\n                              options=run_options,\r\n                              run_metadata=run_metadata)\r\n                if(i%BATCH_SIZE == 0):\r\n                    tw.add_summary(summary,i)\r\n                    tw.add_run_metadata(run_metadata,'step%d'%i)\r\n                \r\n                epochLoss += c       \r\n            \r\n            tx,ty = getNextBatch()\r\n            print('Epoch ',epoch,'/',epochs,':',epochLoss/TRAIN_SIZE,' ',accuracy.eval({x_t:tx,y_t:ty}))\r\n       \r\n        tw.close()            \r\n\r\ntrainNN()\r\n```\r\n\r\n### What other attempted solutions have you tried?\r\nI googled the said dll file. No, results.\r\n\r\nCould PTI stand for Parameter Tuning Interface?\r\nI found [this](http://www.socsci.uci.edu/~jkrichma/CARLsim/) link, but I am hesitant to installed anything that is not prescribed officially.\r\n\r\n### Logs or other output that would be helpful\r\n(If logs are large, please upload as attachment or provide link).\r\n\r\n```\r\nD:\\TensorFlow>D:\\TensorFlow\\identity_dnn_bare.py\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cublas64_80.dll locally\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cudnn64_5.dll locally\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library cufft64_80.dll locally\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library nvcuda.dll locally\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:128] successfully opened CUDA library curand64_80.dll locally\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:885] Found device 0 with properties:\r\nname: GeForce 930MX\r\nmajor: 5 minor: 0 memoryClockRate (GHz) 1.0195\r\npciBusID 0000:01:00.0\r\nTotal memory: 2.00GiB\r\nFree memory: 1.66GiB\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:906] DMA: 0\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:916] 0:   Y\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce 930MX, pci bus id: 0000:01:00.0)\r\nI c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\stream_executor\\dso_loader.cc:119] Couldn't open CUDA library cupti64_80.dll\r\nF c:\\tf_jenkins\\home\\workspace\\release-win\\device\\gpu\\os\\windows\\tensorflow\\core\\platform\\default\\gpu\\cupti_wrapper.cc:59] Check failed: ::tensorflow::Status::OK() == (::tensorflow::Env::Default()->GetSymbolFromLibrary( GetDsoHandle(), kName, &f)) (OK vs. Not found: cuptiActivityRegisterCallbacks not found)could not find cuptiActivityRegisterCallbacksin libcupti DSO\r\n```\r\n"}