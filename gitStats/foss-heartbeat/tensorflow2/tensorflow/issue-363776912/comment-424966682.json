{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/424966682", "html_url": "https://github.com/tensorflow/tensorflow/issues/22512#issuecomment-424966682", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22512", "id": 424966682, "node_id": "MDEyOklzc3VlQ29tbWVudDQyNDk2NjY4Mg==", "user": {"login": "Overdrivr", "id": 1294805, "node_id": "MDQ6VXNlcjEyOTQ4MDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1294805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Overdrivr", "html_url": "https://github.com/Overdrivr", "followers_url": "https://api.github.com/users/Overdrivr/followers", "following_url": "https://api.github.com/users/Overdrivr/following{/other_user}", "gists_url": "https://api.github.com/users/Overdrivr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Overdrivr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Overdrivr/subscriptions", "organizations_url": "https://api.github.com/users/Overdrivr/orgs", "repos_url": "https://api.github.com/users/Overdrivr/repos", "events_url": "https://api.github.com/users/Overdrivr/events{/privacy}", "received_events_url": "https://api.github.com/users/Overdrivr/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-27T05:48:57Z", "updated_at": "2018-09-27T05:48:57Z", "author_association": "NONE", "body_html": "<p>You're correct, there is a configuration issue on the second machine.</p>\n<p>I have installed python 3.6.6 on it, created a new virtual env, only containing tensorflow, and can reproduce the issue.</p>\n<p>What puzzles me is that I have installed <strong>tensorflow-cpu</strong> on it, and I still get <code>_pywrap_tensorflow_internal</code> not found (And it's not the first time I've installed TF on a machine, I've done it for CPU and GPU version a good dozen of times).</p>\n<p>I have ran the following sanity check (updated for tensorflow 1.10.0, Cuda 9.0, cuDNN 7.0.X):</p>\n<pre><code>import ctypes\nimport imp\nimport sys\nfrom ctypes.util import find_library\n\ndef main():\n    check()\n\ndef check():\n    try:\n        import tensorflow as tf\n        print(\"TensorFlow successfully installed.\")\n        if tf.test.is_built_with_cuda():\n            print(\"The installed version of TensorFlow includes GPU support.\")\n        else:\n            print(\"The installed version of TensorFlow does not include GPU support.\")\n            #sys.exit(0)\n    except ImportError as e:\n        print(\"ERROR: Failed to import the TensorFlow module.\")\n        print('Reason: {}'.format(e))\n\n    candidate_explanation = False\n\n    python_version = sys.version_info.major, sys.version_info.minor\n    print(\"- Python version is %d.%d.\" % python_version)\n    if not (python_version == (3, 5) or python_version == (3, 6)):\n        candidate_explanation = True\n        print(\"- The official distribution of TensorFlow for Windows requires \"\n          \"Python version 3.5 or 3.6.\")\n\n    try:\n        _, pathname, _ = imp.find_module(\"tensorflow\")\n        print(\"- TensorFlow is installed at: %s\" % pathname)\n    except ImportError:\n        candidate_explanation = False\n        print(\"\"\"- No module named TensorFlow is installed in this Python environment. You may\ninstall it using the command `pip install tensorflow`.\"\"\")\n\n    try:\n        msvcp140 = ctypes.WinDLL(\"msvcp140.dll\")\n        msvcp140_path = find_library(\"msvcp140.dll\")\n        print('- msvcp140.dll Found at {}'.format(msvcp140_path))\n    except OSError:\n        candidate_explanation = True\n        print(\"\"\"\n- Could not load 'msvcp140.dll'. You may install this DLL by downloading Microsoft Visual\n  C++ 2015 Redistributable Update 3 from this URL:\n  https://www.microsoft.com/en-us/download/details.aspx?id=53587\"\"\")\n\n    try:\n        cudart64_90 = ctypes.WinDLL(\"cudart64_90.dll\")\n        cudart64_90_path = find_library(\"cudart64_90.dll\")\n        print('- Cuda 9.0 found at {}'.format(cudart64_90_path))\n        # TODO: Look for version.txt file in CUDA path\n    except OSError:\n        candidate_explanation = True\n        print(\"\"\"\n- Could not load 'cudart64_90.dll'. Download and install CUDA 9.0 from\n  this URL: https://developer.nvidia.com/cuda-toolkit\"\"\")\n\n    try:\n        nvcuda = ctypes.WinDLL(\"nvcuda.dll\")\n        nvcuda_path = find_library(\"nvcuda.dll\")\n        print('- nvcuda.dll found at {}'.format(nvcuda_path))\n    except OSError:\n        candidate_explanation = True\n        print(\"\"\"\n- Could not load 'nvcuda.dll'. The GPU version of TensorFlow requires that\n  this DLL be installed in a directory that is named in your %PATH%\n  environment variable. Typically it is installed in 'C:\\Windows\\System32'.\n  If it is not present, ensure that you have a CUDA-capable GPU with the\n  correct driver installed.\"\"\")\n\n    cudnn7_found = False\n    try:\n        cudnn7 = ctypes.WinDLL(\"cudnn64_7.dll\")\n        cudnn7_path = find_library(\"cudnn64_7.dll\")\n        print(\"- cuDNN Found at {}\".format(cudnn7_path))\n        cudnn7_found = True\n    except OSError:\n        candidate_explanation = True\n        print(\"\"\"\n- Could not load 'cudnn64_7.dll'. The GPU version of TensorFlow\n  requires that this DLL be installed in a directory that is named in\n  your %PATH% environment variable. Note that installing cuDNN is a\n  separate step from installing CUDA, and it is often found in a\n  different directory from the CUDA DLLs. You may install the\n  necessary DLL by downloading cuDNN 7.0 for Cuda 9.0 from this URL:\n  https://developer.nvidia.com/cudnn\"\"\")\n\n    if not candidate_explanation:\n        print(\"\"\"\n- All required DLLs appear to be present. Please open an issue on the\n  TensorFlow GitHub page: https://github.com/tensorflow/tensorflow/issues\"\"\")\n\n    sys.exit(-1)\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>Output:</p>\n<pre><code>ERROR: Failed to import the TensorFlow module.\nReason: Traceback (most recent call last):\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow_internal.py\", line 14, in swig_import_helper\n    return importlib.import_module(mname)\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\importlib\\__init__.py\", line 126, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 994, in _gcd_import\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 971, in _find_and_load\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 955, in _find_and_load_unlocked\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 658, in _load_unlocked\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 571, in module_from_spec\n  File \"&lt;frozen importlib._bootstrap_external&gt;\", line 922, in create_module\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 219, in _call_with_frames_removed\nImportError: DLL load failed: A dynamic link library (DLL) initialization routine failed.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow.py\", line 58, in &lt;module&gt;\n    from tensorflow.python.pywrap_tensorflow_internal import *\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow_internal.py\", line 17, in &lt;module&gt;\n    _pywrap_tensorflow_internal = swig_import_helper()\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow_internal.py\", line 16, in swig_import_helper\n    return importlib.import_module('_pywrap_tensorflow_internal')\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\importlib\\__init__.py\", line 126, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nModuleNotFoundError: No module named '_pywrap_tensorflow_internal'\n\n\nFailed to load the native TensorFlow runtime.\n\nSee https://www.tensorflow.org/install/install_sources#common_installation_problems\n\nfor some common reasons and solutions.  Include the entire stack trace\nabove this error message when asking for help.\n- Python version is 3.6.\n- TensorFlow is installed at: C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\n- msvcp140.dll Found at C:\\Windows\\system32\\msvcp140.dll\n- Cuda 9.0 found at C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.0\\bin\\cudart64_90.dll\n- nvcuda.dll found at C:\\Windows\\system32\\nvcuda.dll\n- cuDNN Found at C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.0\\bin\\cudnn64_7.dll\n\n- All required DLLs appear to be present. Please open an issue on the\n  TensorFlow GitHub page: https://github.com/tensorflow/tensorflow/issues\n</code></pre>\n<p>Basically, the sanity check does not highlight any error, yet there seems to be an issue loading some DLL. This is very weird, because I have installed TF-cpu and GPU on another machine with exactly the same specs two hours before that one (They are both freshly created machines on a cloud provider with the same base Windows 10 image).</p>", "body_text": "You're correct, there is a configuration issue on the second machine.\nI have installed python 3.6.6 on it, created a new virtual env, only containing tensorflow, and can reproduce the issue.\nWhat puzzles me is that I have installed tensorflow-cpu on it, and I still get _pywrap_tensorflow_internal not found (And it's not the first time I've installed TF on a machine, I've done it for CPU and GPU version a good dozen of times).\nI have ran the following sanity check (updated for tensorflow 1.10.0, Cuda 9.0, cuDNN 7.0.X):\nimport ctypes\nimport imp\nimport sys\nfrom ctypes.util import find_library\n\ndef main():\n    check()\n\ndef check():\n    try:\n        import tensorflow as tf\n        print(\"TensorFlow successfully installed.\")\n        if tf.test.is_built_with_cuda():\n            print(\"The installed version of TensorFlow includes GPU support.\")\n        else:\n            print(\"The installed version of TensorFlow does not include GPU support.\")\n            #sys.exit(0)\n    except ImportError as e:\n        print(\"ERROR: Failed to import the TensorFlow module.\")\n        print('Reason: {}'.format(e))\n\n    candidate_explanation = False\n\n    python_version = sys.version_info.major, sys.version_info.minor\n    print(\"- Python version is %d.%d.\" % python_version)\n    if not (python_version == (3, 5) or python_version == (3, 6)):\n        candidate_explanation = True\n        print(\"- The official distribution of TensorFlow for Windows requires \"\n          \"Python version 3.5 or 3.6.\")\n\n    try:\n        _, pathname, _ = imp.find_module(\"tensorflow\")\n        print(\"- TensorFlow is installed at: %s\" % pathname)\n    except ImportError:\n        candidate_explanation = False\n        print(\"\"\"- No module named TensorFlow is installed in this Python environment. You may\ninstall it using the command `pip install tensorflow`.\"\"\")\n\n    try:\n        msvcp140 = ctypes.WinDLL(\"msvcp140.dll\")\n        msvcp140_path = find_library(\"msvcp140.dll\")\n        print('- msvcp140.dll Found at {}'.format(msvcp140_path))\n    except OSError:\n        candidate_explanation = True\n        print(\"\"\"\n- Could not load 'msvcp140.dll'. You may install this DLL by downloading Microsoft Visual\n  C++ 2015 Redistributable Update 3 from this URL:\n  https://www.microsoft.com/en-us/download/details.aspx?id=53587\"\"\")\n\n    try:\n        cudart64_90 = ctypes.WinDLL(\"cudart64_90.dll\")\n        cudart64_90_path = find_library(\"cudart64_90.dll\")\n        print('- Cuda 9.0 found at {}'.format(cudart64_90_path))\n        # TODO: Look for version.txt file in CUDA path\n    except OSError:\n        candidate_explanation = True\n        print(\"\"\"\n- Could not load 'cudart64_90.dll'. Download and install CUDA 9.0 from\n  this URL: https://developer.nvidia.com/cuda-toolkit\"\"\")\n\n    try:\n        nvcuda = ctypes.WinDLL(\"nvcuda.dll\")\n        nvcuda_path = find_library(\"nvcuda.dll\")\n        print('- nvcuda.dll found at {}'.format(nvcuda_path))\n    except OSError:\n        candidate_explanation = True\n        print(\"\"\"\n- Could not load 'nvcuda.dll'. The GPU version of TensorFlow requires that\n  this DLL be installed in a directory that is named in your %PATH%\n  environment variable. Typically it is installed in 'C:\\Windows\\System32'.\n  If it is not present, ensure that you have a CUDA-capable GPU with the\n  correct driver installed.\"\"\")\n\n    cudnn7_found = False\n    try:\n        cudnn7 = ctypes.WinDLL(\"cudnn64_7.dll\")\n        cudnn7_path = find_library(\"cudnn64_7.dll\")\n        print(\"- cuDNN Found at {}\".format(cudnn7_path))\n        cudnn7_found = True\n    except OSError:\n        candidate_explanation = True\n        print(\"\"\"\n- Could not load 'cudnn64_7.dll'. The GPU version of TensorFlow\n  requires that this DLL be installed in a directory that is named in\n  your %PATH% environment variable. Note that installing cuDNN is a\n  separate step from installing CUDA, and it is often found in a\n  different directory from the CUDA DLLs. You may install the\n  necessary DLL by downloading cuDNN 7.0 for Cuda 9.0 from this URL:\n  https://developer.nvidia.com/cudnn\"\"\")\n\n    if not candidate_explanation:\n        print(\"\"\"\n- All required DLLs appear to be present. Please open an issue on the\n  TensorFlow GitHub page: https://github.com/tensorflow/tensorflow/issues\"\"\")\n\n    sys.exit(-1)\n\n\nif __name__ == '__main__':\n    main()\n\nOutput:\nERROR: Failed to import the TensorFlow module.\nReason: Traceback (most recent call last):\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow_internal.py\", line 14, in swig_import_helper\n    return importlib.import_module(mname)\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\importlib\\__init__.py\", line 126, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File \"<frozen importlib._bootstrap>\", line 994, in _gcd_import\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 658, in _load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 571, in module_from_spec\n  File \"<frozen importlib._bootstrap_external>\", line 922, in create_module\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\nImportError: DLL load failed: A dynamic link library (DLL) initialization routine failed.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow.py\", line 58, in <module>\n    from tensorflow.python.pywrap_tensorflow_internal import *\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow_internal.py\", line 17, in <module>\n    _pywrap_tensorflow_internal = swig_import_helper()\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow_internal.py\", line 16, in swig_import_helper\n    return importlib.import_module('_pywrap_tensorflow_internal')\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\importlib\\__init__.py\", line 126, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nModuleNotFoundError: No module named '_pywrap_tensorflow_internal'\n\n\nFailed to load the native TensorFlow runtime.\n\nSee https://www.tensorflow.org/install/install_sources#common_installation_problems\n\nfor some common reasons and solutions.  Include the entire stack trace\nabove this error message when asking for help.\n- Python version is 3.6.\n- TensorFlow is installed at: C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\n- msvcp140.dll Found at C:\\Windows\\system32\\msvcp140.dll\n- Cuda 9.0 found at C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.0\\bin\\cudart64_90.dll\n- nvcuda.dll found at C:\\Windows\\system32\\nvcuda.dll\n- cuDNN Found at C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.0\\bin\\cudnn64_7.dll\n\n- All required DLLs appear to be present. Please open an issue on the\n  TensorFlow GitHub page: https://github.com/tensorflow/tensorflow/issues\n\nBasically, the sanity check does not highlight any error, yet there seems to be an issue loading some DLL. This is very weird, because I have installed TF-cpu and GPU on another machine with exactly the same specs two hours before that one (They are both freshly created machines on a cloud provider with the same base Windows 10 image).", "body": "You're correct, there is a configuration issue on the second machine.\r\n\r\nI have installed python 3.6.6 on it, created a new virtual env, only containing tensorflow, and can reproduce the issue.\r\n\r\nWhat puzzles me is that I have installed **tensorflow-cpu** on it, and I still get `_pywrap_tensorflow_internal` not found (And it's not the first time I've installed TF on a machine, I've done it for CPU and GPU version a good dozen of times).\r\n\r\nI have ran the following sanity check (updated for tensorflow 1.10.0, Cuda 9.0, cuDNN 7.0.X):\r\n\r\n```\r\nimport ctypes\r\nimport imp\r\nimport sys\r\nfrom ctypes.util import find_library\r\n\r\ndef main():\r\n    check()\r\n\r\ndef check():\r\n    try:\r\n        import tensorflow as tf\r\n        print(\"TensorFlow successfully installed.\")\r\n        if tf.test.is_built_with_cuda():\r\n            print(\"The installed version of TensorFlow includes GPU support.\")\r\n        else:\r\n            print(\"The installed version of TensorFlow does not include GPU support.\")\r\n            #sys.exit(0)\r\n    except ImportError as e:\r\n        print(\"ERROR: Failed to import the TensorFlow module.\")\r\n        print('Reason: {}'.format(e))\r\n\r\n    candidate_explanation = False\r\n\r\n    python_version = sys.version_info.major, sys.version_info.minor\r\n    print(\"- Python version is %d.%d.\" % python_version)\r\n    if not (python_version == (3, 5) or python_version == (3, 6)):\r\n        candidate_explanation = True\r\n        print(\"- The official distribution of TensorFlow for Windows requires \"\r\n          \"Python version 3.5 or 3.6.\")\r\n\r\n    try:\r\n        _, pathname, _ = imp.find_module(\"tensorflow\")\r\n        print(\"- TensorFlow is installed at: %s\" % pathname)\r\n    except ImportError:\r\n        candidate_explanation = False\r\n        print(\"\"\"- No module named TensorFlow is installed in this Python environment. You may\r\ninstall it using the command `pip install tensorflow`.\"\"\")\r\n\r\n    try:\r\n        msvcp140 = ctypes.WinDLL(\"msvcp140.dll\")\r\n        msvcp140_path = find_library(\"msvcp140.dll\")\r\n        print('- msvcp140.dll Found at {}'.format(msvcp140_path))\r\n    except OSError:\r\n        candidate_explanation = True\r\n        print(\"\"\"\r\n- Could not load 'msvcp140.dll'. You may install this DLL by downloading Microsoft Visual\r\n  C++ 2015 Redistributable Update 3 from this URL:\r\n  https://www.microsoft.com/en-us/download/details.aspx?id=53587\"\"\")\r\n\r\n    try:\r\n        cudart64_90 = ctypes.WinDLL(\"cudart64_90.dll\")\r\n        cudart64_90_path = find_library(\"cudart64_90.dll\")\r\n        print('- Cuda 9.0 found at {}'.format(cudart64_90_path))\r\n        # TODO: Look for version.txt file in CUDA path\r\n    except OSError:\r\n        candidate_explanation = True\r\n        print(\"\"\"\r\n- Could not load 'cudart64_90.dll'. Download and install CUDA 9.0 from\r\n  this URL: https://developer.nvidia.com/cuda-toolkit\"\"\")\r\n\r\n    try:\r\n        nvcuda = ctypes.WinDLL(\"nvcuda.dll\")\r\n        nvcuda_path = find_library(\"nvcuda.dll\")\r\n        print('- nvcuda.dll found at {}'.format(nvcuda_path))\r\n    except OSError:\r\n        candidate_explanation = True\r\n        print(\"\"\"\r\n- Could not load 'nvcuda.dll'. The GPU version of TensorFlow requires that\r\n  this DLL be installed in a directory that is named in your %PATH%\r\n  environment variable. Typically it is installed in 'C:\\Windows\\System32'.\r\n  If it is not present, ensure that you have a CUDA-capable GPU with the\r\n  correct driver installed.\"\"\")\r\n\r\n    cudnn7_found = False\r\n    try:\r\n        cudnn7 = ctypes.WinDLL(\"cudnn64_7.dll\")\r\n        cudnn7_path = find_library(\"cudnn64_7.dll\")\r\n        print(\"- cuDNN Found at {}\".format(cudnn7_path))\r\n        cudnn7_found = True\r\n    except OSError:\r\n        candidate_explanation = True\r\n        print(\"\"\"\r\n- Could not load 'cudnn64_7.dll'. The GPU version of TensorFlow\r\n  requires that this DLL be installed in a directory that is named in\r\n  your %PATH% environment variable. Note that installing cuDNN is a\r\n  separate step from installing CUDA, and it is often found in a\r\n  different directory from the CUDA DLLs. You may install the\r\n  necessary DLL by downloading cuDNN 7.0 for Cuda 9.0 from this URL:\r\n  https://developer.nvidia.com/cudnn\"\"\")\r\n\r\n    if not candidate_explanation:\r\n        print(\"\"\"\r\n- All required DLLs appear to be present. Please open an issue on the\r\n  TensorFlow GitHub page: https://github.com/tensorflow/tensorflow/issues\"\"\")\r\n\r\n    sys.exit(-1)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nERROR: Failed to import the TensorFlow module.\r\nReason: Traceback (most recent call last):\r\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow_internal.py\", line 14, in swig_import_helper\r\n    return importlib.import_module(mname)\r\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\importlib\\__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 994, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 658, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 571, in module_from_spec\r\n  File \"<frozen importlib._bootstrap_external>\", line 922, in create_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\nImportError: DLL load failed: A dynamic link library (DLL) initialization routine failed.\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow.py\", line 58, in <module>\r\n    from tensorflow.python.pywrap_tensorflow_internal import *\r\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow_internal.py\", line 17, in <module>\r\n    _pywrap_tensorflow_internal = swig_import_helper()\r\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\\python\\pywrap_tensorflow_internal.py\", line 16, in swig_import_helper\r\n    return importlib.import_module('_pywrap_tensorflow_internal')\r\n  File \"C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\importlib\\__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\nModuleNotFoundError: No module named '_pywrap_tensorflow_internal'\r\n\r\n\r\nFailed to load the native TensorFlow runtime.\r\n\r\nSee https://www.tensorflow.org/install/install_sources#common_installation_problems\r\n\r\nfor some common reasons and solutions.  Include the entire stack trace\r\nabove this error message when asking for help.\r\n- Python version is 3.6.\r\n- TensorFlow is installed at: C:\\Users\\Paperspace\\.virtualenvs\\test-tf-vXVQRlro\\lib\\site-packages\\tensorflow\r\n- msvcp140.dll Found at C:\\Windows\\system32\\msvcp140.dll\r\n- Cuda 9.0 found at C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.0\\bin\\cudart64_90.dll\r\n- nvcuda.dll found at C:\\Windows\\system32\\nvcuda.dll\r\n- cuDNN Found at C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v9.0\\bin\\cudnn64_7.dll\r\n\r\n- All required DLLs appear to be present. Please open an issue on the\r\n  TensorFlow GitHub page: https://github.com/tensorflow/tensorflow/issues\r\n```\r\n\r\nBasically, the sanity check does not highlight any error, yet there seems to be an issue loading some DLL. This is very weird, because I have installed TF-cpu and GPU on another machine with exactly the same specs two hours before that one (They are both freshly created machines on a cloud provider with the same base Windows 10 image).   "}