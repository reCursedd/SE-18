{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/269850061", "html_url": "https://github.com/tensorflow/tensorflow/pull/6528#issuecomment-269850061", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6528", "id": 269850061, "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTg1MDA2MQ==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-31T05:14:08Z", "updated_at": "2016-12-31T06:14:31Z", "author_association": "MEMBER", "body_html": "<p>I still feel that this is making the lower level API more complicated and easier to mess up with. I guess I'm not seeing the convenience benefits that you are, particularly those that cannot be achieved with simple wrapper classes.</p>\n<p>I understand we're trying to balance between usability, power and maintainability in any API design. With reference counting here, I feel the latter can suffer quite a bit leading to very subtle bugs if there are <code>ref()</code>/<code>unref()</code> mismatches and it is easy to end up with them. Without this, it is clearer IMHO since every materialized <code>Tensor</code> needs to be <code>close()</code>d precisely once.</p>\n<p>Reference counting is beneficial when there is \"shared ownership\" of the resource. It isn't clear to me that this should be the default case. I'm thinking of <code>Tensor</code> more like a <code>RandomAccessFile</code> or <code>FileChannel</code> here. I'm not familiar enough with netty, but I'm sure there is a clear pattern to ensure that such objects are created and closed without reference counting support in those classes?</p>\n<p>Admittedly, this discussion of convenience and power is in the abstract. If there are real examples of code that we can use to iterate on, that might be more productive. Otherwise, I'm tempted to avoid reference counting here.</p>", "body_text": "I still feel that this is making the lower level API more complicated and easier to mess up with. I guess I'm not seeing the convenience benefits that you are, particularly those that cannot be achieved with simple wrapper classes.\nI understand we're trying to balance between usability, power and maintainability in any API design. With reference counting here, I feel the latter can suffer quite a bit leading to very subtle bugs if there are ref()/unref() mismatches and it is easy to end up with them. Without this, it is clearer IMHO since every materialized Tensor needs to be close()d precisely once.\nReference counting is beneficial when there is \"shared ownership\" of the resource. It isn't clear to me that this should be the default case. I'm thinking of Tensor more like a RandomAccessFile or FileChannel here. I'm not familiar enough with netty, but I'm sure there is a clear pattern to ensure that such objects are created and closed without reference counting support in those classes?\nAdmittedly, this discussion of convenience and power is in the abstract. If there are real examples of code that we can use to iterate on, that might be more productive. Otherwise, I'm tempted to avoid reference counting here.", "body": "I still feel that this is making the lower level API more complicated and easier to mess up with. I guess I'm not seeing the convenience benefits that you are, particularly those that cannot be achieved with simple wrapper classes.\r\n\r\nI understand we're trying to balance between usability, power and maintainability in any API design. With reference counting here, I feel the latter can suffer quite a bit leading to very subtle bugs if there are `ref()`/`unref()` mismatches and it is easy to end up with them. Without this, it is clearer IMHO since every materialized `Tensor` needs to be `close()`d precisely once.\r\n\r\nReference counting is beneficial when there is \"shared ownership\" of the resource. It isn't clear to me that this should be the default case. I'm thinking of `Tensor` more like a `RandomAccessFile` or `FileChannel` here. I'm not familiar enough with netty, but I'm sure there is a clear pattern to ensure that such objects are created and closed without reference counting support in those classes?\r\n\r\nAdmittedly, this discussion of convenience and power is in the abstract. If there are real examples of code that we can use to iterate on, that might be more productive. Otherwise, I'm tempted to avoid reference counting here."}