{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23595", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23595/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23595/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23595/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23595", "id": 378615417, "node_id": "MDU6SXNzdWUzNzg2MTU0MTc=", "number": 23595, "title": "Running Keras CNN model give different results on GPU than CPU.", "user": {"login": "yousefessam", "id": 27086798, "node_id": "MDQ6VXNlcjI3MDg2Nzk4", "avatar_url": "https://avatars0.githubusercontent.com/u/27086798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yousefessam", "html_url": "https://github.com/yousefessam", "followers_url": "https://api.github.com/users/yousefessam/followers", "following_url": "https://api.github.com/users/yousefessam/following{/other_user}", "gists_url": "https://api.github.com/users/yousefessam/gists{/gist_id}", "starred_url": "https://api.github.com/users/yousefessam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yousefessam/subscriptions", "organizations_url": "https://api.github.com/users/yousefessam/orgs", "repos_url": "https://api.github.com/users/yousefessam/repos", "events_url": "https://api.github.com/users/yousefessam/events{/privacy}", "received_events_url": "https://api.github.com/users/yousefessam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1097547538, "node_id": "MDU6TGFiZWwxMDk3NTQ3NTM4", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:gpu", "name": "comp:gpu", "color": "0052cc", "default": false}, {"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "open", "locked": false, "assignee": {"login": "azaks2", "id": 40365382, "node_id": "MDQ6VXNlcjQwMzY1Mzgy", "avatar_url": "https://avatars2.githubusercontent.com/u/40365382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azaks2", "html_url": "https://github.com/azaks2", "followers_url": "https://api.github.com/users/azaks2/followers", "following_url": "https://api.github.com/users/azaks2/following{/other_user}", "gists_url": "https://api.github.com/users/azaks2/gists{/gist_id}", "starred_url": "https://api.github.com/users/azaks2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azaks2/subscriptions", "organizations_url": "https://api.github.com/users/azaks2/orgs", "repos_url": "https://api.github.com/users/azaks2/repos", "events_url": "https://api.github.com/users/azaks2/events{/privacy}", "received_events_url": "https://api.github.com/users/azaks2/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "azaks2", "id": 40365382, "node_id": "MDQ6VXNlcjQwMzY1Mzgy", "avatar_url": "https://avatars2.githubusercontent.com/u/40365382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azaks2", "html_url": "https://github.com/azaks2", "followers_url": "https://api.github.com/users/azaks2/followers", "following_url": "https://api.github.com/users/azaks2/following{/other_user}", "gists_url": "https://api.github.com/users/azaks2/gists{/gist_id}", "starred_url": "https://api.github.com/users/azaks2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azaks2/subscriptions", "organizations_url": "https://api.github.com/users/azaks2/orgs", "repos_url": "https://api.github.com/users/azaks2/repos", "events_url": "https://api.github.com/users/azaks2/events{/privacy}", "received_events_url": "https://api.github.com/users/azaks2/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-11-08T07:53:01Z", "updated_at": "2018-11-13T21:56:23Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><em>Please make sure that this is a bug. As per our <a href=\"https://github.com/tensorflow/tensorflow/blob/master/ISSUES.md\">GitHub Policy</a>, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template</em></p>\n<p><strong>System information</strong></p>\n<ul>\n<li>Have I written custom code (as opposed to using a stock example script provided in TensorFlow):</li>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Debian</li>\n<li>TensorFlow version (use command below):<br>\nKeras, version 2.2.4 is used on Tensorflow CPU 1.5.0<br>\nKeras, version 2.2.4 is used on Tensorflow GPU 1.11.0</li>\n<li>Python version: 3</li>\n<li>GCC/Compiler version (if compiling from source):</li>\n<li>CUDA/cuDNN version: 7.2.1</li>\n<li>GPU model and memory: Telsa P4</li>\n</ul>\n<p><strong>Describe the current behaviour</strong><br>\nI trained a CNN model using Keras over Tensorflow. The results showed that the model has nearly 10% better accuracy than running on CPU for the same code.</p>\n<p><strong>Describe the expected behaviour</strong><br>\nI expected the same test accuracy on both GPU and CPU.</p>\n<p><strong>Code to reproduce the issue</strong><br>\nProvide a reproducible test case that is the bare minimum necessary to generate the problem.</p>\n<pre><code>from __future__ import print_function\nimport keras\nfrom keras.datasets import cifar10,mnist,cifar100\nfrom keras import Sequential,optimizers\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Activation, Flatten\nimport LoggerYN as YN\nimport numpy as np\nimport scipy.io as sio\nimport utilsYN as uYN\nimport datetime\nimport time\n\n\n\ndef initParameters(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay):\n    global Dataset    \n    global pbatchSize\n    global pnumClasses\n    global pEpochs\n    global pLearningRate\n    global pMomentum\n    global pWeightDecay\n    Dataset = dataset\n    pbatchSize = batchSize\n    pnumClasses = numClasses\n    pEpochs = epochs\n    pLearningRate = learningRate\n    pMomentum = momentum\n    pWeightDecay = weightDecay\n    \ndef NormalizeData(x_train,x_test):\n        x_train /= 255\n        x_test /= 255\n        return x_train, x_test\n\ndef CategorizeData(y_train,y_test,pnumClasses):\n    y_train = keras.utils.to_categorical(y_train, pnumClasses)\n    y_test = keras.utils.to_categorical(y_test, pnumClasses)\n    return y_train, y_test\n    \ndef loadData():\n\n    Dataset = cifar100\n    (x_train, y_train), (x_test, y_test) = Dataset.load_data(label_mode='fine') if fineFlag else Dataset.load_data()\n    \n    global imgRows\n    global imgCols\n    global inputShape\n    \n    imgRows = x_train.shape[1]\n    imgCols = x_train.shape[2]\n\n    try:\n        imgRGB_Dimensions = x_train.shape[3]\n    except Exception:\n        imgRGB_Dimensions = 1 #For Gray Scale Images\n\n    print(x_train.shape)\n    x_train = x_train.reshape(x_train.shape[0], imgRows, imgCols, imgRGB_Dimensions)\n    x_test = x_test.reshape(x_test.shape[0], imgRows, imgCols, imgRGB_Dimensions)\n    x_train = x_train.astype('float32')\n    x_test = x_test.astype('float32')\n    x_train, x_test = NormalizeData(x_train, x_test)\n    y_train, y_test = CategorizeData(y_train,y_test,pnumClasses)\n    inputShape = (imgRows, imgCols, imgRGB_Dimensions)\n    return x_train, y_train, x_test, y_test\n\n\ndef model_CIFAR100():\n    CIFAR_model = Sequential()\n    CIFAR_model.add(Conv2D(128, (3, 3), padding='same',strides=1,input_shape=inputShape))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(Conv2D(128, (3, 3)))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(MaxPooling2D(pool_size=(2, 2),strides=2,padding='valid'))\n    CIFAR_model.add(Dropout(0.1))\n    \n    CIFAR_model.add(Conv2D(256, (3, 3), padding='same',strides=1))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(Conv2D(256, (3, 3)))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(MaxPooling2D(pool_size=(2, 2),strides=2,padding='valid'))\n    CIFAR_model.add(Dropout(0.25))\n    \n    CIFAR_model.add(Conv2D(512, (3, 3), padding='same',strides=1))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(Conv2D(512, (3, 3)))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(MaxPooling2D(pool_size=(2, 2),strides=2,padding='valid'))\n    CIFAR_model.add(Dropout(0.5))\n    \n    \n    CIFAR_model.add(Flatten())\n    CIFAR_model.add(Dense(1024))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(Dropout(0.5))\n    CIFAR_model.add(Dense(pnumClasses))\n    CIFAR_model.add(Activation('softmax'))    \n    return CIFAR_model\n\n\ndef evaluateModel(model,x_test,y_test,verbose):\n    pLoss, pAcc = model.evaluate(x_test, y_test, verbose)\n    print(\"Test Loss\", pLoss)\n    print(\"Test Accuracy\", pAcc)\n     \n\n\ndef RunCIFAR100(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay):\n    initParameters(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay)\n    x_train, y_train, x_test, y_test = loadData()\n    CIFAR_model = model_CIFAR100()\n    CIFAR_sgd = optimizers.SGD(lr=learningRate, decay=weightDecay, momentum=momentum, nesterov=False)\n    CIFAR_model.compile(loss='categorical_crossentropy',optimizer=CIFAR_sgd, metrics=['accuracy'])\n    CIFAR_model.fit(x_train, y_train,batch_size=batchSize,epochs=epochs,validation_data=(x_test, y_test),shuffle=True)\n    evaluateModel(CIFAR_model,x_test, y_test, verbose=1)\n\n\ndef runModel(dataset,batchSize=128,numClasses=10,epochs=12,learningRate=0.01,momentum=0.5,weightDecay=1e-6):\n    RunCIFAR100(dataset,batchSize,numClasses=100,epochs=epochs,learningRate=learningRate,momentum=momentum,weightDecay=weightDecay)\n\ndef main():\n    runModel(\"cifar100\",epochs=200)\n</code></pre>", "body_text": "Please make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Debian\nTensorFlow version (use command below):\nKeras, version 2.2.4 is used on Tensorflow CPU 1.5.0\nKeras, version 2.2.4 is used on Tensorflow GPU 1.11.0\nPython version: 3\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version: 7.2.1\nGPU model and memory: Telsa P4\n\nDescribe the current behaviour\nI trained a CNN model using Keras over Tensorflow. The results showed that the model has nearly 10% better accuracy than running on CPU for the same code.\nDescribe the expected behaviour\nI expected the same test accuracy on both GPU and CPU.\nCode to reproduce the issue\nProvide a reproducible test case that is the bare minimum necessary to generate the problem.\nfrom __future__ import print_function\nimport keras\nfrom keras.datasets import cifar10,mnist,cifar100\nfrom keras import Sequential,optimizers\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Activation, Flatten\nimport LoggerYN as YN\nimport numpy as np\nimport scipy.io as sio\nimport utilsYN as uYN\nimport datetime\nimport time\n\n\n\ndef initParameters(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay):\n    global Dataset    \n    global pbatchSize\n    global pnumClasses\n    global pEpochs\n    global pLearningRate\n    global pMomentum\n    global pWeightDecay\n    Dataset = dataset\n    pbatchSize = batchSize\n    pnumClasses = numClasses\n    pEpochs = epochs\n    pLearningRate = learningRate\n    pMomentum = momentum\n    pWeightDecay = weightDecay\n    \ndef NormalizeData(x_train,x_test):\n        x_train /= 255\n        x_test /= 255\n        return x_train, x_test\n\ndef CategorizeData(y_train,y_test,pnumClasses):\n    y_train = keras.utils.to_categorical(y_train, pnumClasses)\n    y_test = keras.utils.to_categorical(y_test, pnumClasses)\n    return y_train, y_test\n    \ndef loadData():\n\n    Dataset = cifar100\n    (x_train, y_train), (x_test, y_test) = Dataset.load_data(label_mode='fine') if fineFlag else Dataset.load_data()\n    \n    global imgRows\n    global imgCols\n    global inputShape\n    \n    imgRows = x_train.shape[1]\n    imgCols = x_train.shape[2]\n\n    try:\n        imgRGB_Dimensions = x_train.shape[3]\n    except Exception:\n        imgRGB_Dimensions = 1 #For Gray Scale Images\n\n    print(x_train.shape)\n    x_train = x_train.reshape(x_train.shape[0], imgRows, imgCols, imgRGB_Dimensions)\n    x_test = x_test.reshape(x_test.shape[0], imgRows, imgCols, imgRGB_Dimensions)\n    x_train = x_train.astype('float32')\n    x_test = x_test.astype('float32')\n    x_train, x_test = NormalizeData(x_train, x_test)\n    y_train, y_test = CategorizeData(y_train,y_test,pnumClasses)\n    inputShape = (imgRows, imgCols, imgRGB_Dimensions)\n    return x_train, y_train, x_test, y_test\n\n\ndef model_CIFAR100():\n    CIFAR_model = Sequential()\n    CIFAR_model.add(Conv2D(128, (3, 3), padding='same',strides=1,input_shape=inputShape))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(Conv2D(128, (3, 3)))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(MaxPooling2D(pool_size=(2, 2),strides=2,padding='valid'))\n    CIFAR_model.add(Dropout(0.1))\n    \n    CIFAR_model.add(Conv2D(256, (3, 3), padding='same',strides=1))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(Conv2D(256, (3, 3)))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(MaxPooling2D(pool_size=(2, 2),strides=2,padding='valid'))\n    CIFAR_model.add(Dropout(0.25))\n    \n    CIFAR_model.add(Conv2D(512, (3, 3), padding='same',strides=1))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(Conv2D(512, (3, 3)))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(MaxPooling2D(pool_size=(2, 2),strides=2,padding='valid'))\n    CIFAR_model.add(Dropout(0.5))\n    \n    \n    CIFAR_model.add(Flatten())\n    CIFAR_model.add(Dense(1024))\n    CIFAR_model.add(Activation('relu'))\n    CIFAR_model.add(Dropout(0.5))\n    CIFAR_model.add(Dense(pnumClasses))\n    CIFAR_model.add(Activation('softmax'))    \n    return CIFAR_model\n\n\ndef evaluateModel(model,x_test,y_test,verbose):\n    pLoss, pAcc = model.evaluate(x_test, y_test, verbose)\n    print(\"Test Loss\", pLoss)\n    print(\"Test Accuracy\", pAcc)\n     \n\n\ndef RunCIFAR100(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay):\n    initParameters(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay)\n    x_train, y_train, x_test, y_test = loadData()\n    CIFAR_model = model_CIFAR100()\n    CIFAR_sgd = optimizers.SGD(lr=learningRate, decay=weightDecay, momentum=momentum, nesterov=False)\n    CIFAR_model.compile(loss='categorical_crossentropy',optimizer=CIFAR_sgd, metrics=['accuracy'])\n    CIFAR_model.fit(x_train, y_train,batch_size=batchSize,epochs=epochs,validation_data=(x_test, y_test),shuffle=True)\n    evaluateModel(CIFAR_model,x_test, y_test, verbose=1)\n\n\ndef runModel(dataset,batchSize=128,numClasses=10,epochs=12,learningRate=0.01,momentum=0.5,weightDecay=1e-6):\n    RunCIFAR100(dataset,batchSize,numClasses=100,epochs=epochs,learningRate=learningRate,momentum=momentum,weightDecay=weightDecay)\n\ndef main():\n    runModel(\"cifar100\",epochs=200)", "body": "<em>Please make sure that this is a bug. As per our [GitHub Policy](https://github.com/tensorflow/tensorflow/blob/master/ISSUES.md), we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template</em>\r\n\r\n**System information**\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow):\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Debian\r\n- TensorFlow version (use command below): \r\nKeras, version 2.2.4 is used on Tensorflow CPU 1.5.0 \r\nKeras, version 2.2.4 is used on Tensorflow GPU 1.11.0\r\n- Python version: 3 \r\n- GCC/Compiler version (if compiling from source):\r\n- CUDA/cuDNN version: 7.2.1\r\n- GPU model and memory: Telsa P4\r\n\r\n**Describe the current behaviour**\r\nI trained a CNN model using Keras over Tensorflow. The results showed that the model has nearly 10% better accuracy than running on CPU for the same code.\r\n\r\n**Describe the expected behaviour**\r\nI expected the same test accuracy on both GPU and CPU.\r\n\r\n**Code to reproduce the issue**\r\nProvide a reproducible test case that is the bare minimum necessary to generate the problem.\r\n\r\n\r\n\r\n```\r\nfrom __future__ import print_function\r\nimport keras\r\nfrom keras.datasets import cifar10,mnist,cifar100\r\nfrom keras import Sequential,optimizers\r\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Activation, Flatten\r\nimport LoggerYN as YN\r\nimport numpy as np\r\nimport scipy.io as sio\r\nimport utilsYN as uYN\r\nimport datetime\r\nimport time\r\n\r\n\r\n\r\ndef initParameters(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay):\r\n    global Dataset    \r\n    global pbatchSize\r\n    global pnumClasses\r\n    global pEpochs\r\n    global pLearningRate\r\n    global pMomentum\r\n    global pWeightDecay\r\n    Dataset = dataset\r\n    pbatchSize = batchSize\r\n    pnumClasses = numClasses\r\n    pEpochs = epochs\r\n    pLearningRate = learningRate\r\n    pMomentum = momentum\r\n    pWeightDecay = weightDecay\r\n    \r\ndef NormalizeData(x_train,x_test):\r\n        x_train /= 255\r\n        x_test /= 255\r\n        return x_train, x_test\r\n\r\ndef CategorizeData(y_train,y_test,pnumClasses):\r\n    y_train = keras.utils.to_categorical(y_train, pnumClasses)\r\n    y_test = keras.utils.to_categorical(y_test, pnumClasses)\r\n    return y_train, y_test\r\n    \r\ndef loadData():\r\n\r\n    Dataset = cifar100\r\n    (x_train, y_train), (x_test, y_test) = Dataset.load_data(label_mode='fine') if fineFlag else Dataset.load_data()\r\n    \r\n    global imgRows\r\n    global imgCols\r\n    global inputShape\r\n    \r\n    imgRows = x_train.shape[1]\r\n    imgCols = x_train.shape[2]\r\n\r\n    try:\r\n        imgRGB_Dimensions = x_train.shape[3]\r\n    except Exception:\r\n        imgRGB_Dimensions = 1 #For Gray Scale Images\r\n\r\n    print(x_train.shape)\r\n    x_train = x_train.reshape(x_train.shape[0], imgRows, imgCols, imgRGB_Dimensions)\r\n    x_test = x_test.reshape(x_test.shape[0], imgRows, imgCols, imgRGB_Dimensions)\r\n    x_train = x_train.astype('float32')\r\n    x_test = x_test.astype('float32')\r\n    x_train, x_test = NormalizeData(x_train, x_test)\r\n    y_train, y_test = CategorizeData(y_train,y_test,pnumClasses)\r\n    inputShape = (imgRows, imgCols, imgRGB_Dimensions)\r\n    return x_train, y_train, x_test, y_test\r\n\r\n\r\ndef model_CIFAR100():\r\n    CIFAR_model = Sequential()\r\n    CIFAR_model.add(Conv2D(128, (3, 3), padding='same',strides=1,input_shape=inputShape))\r\n    CIFAR_model.add(Activation('relu'))\r\n    CIFAR_model.add(Conv2D(128, (3, 3)))\r\n    CIFAR_model.add(Activation('relu'))\r\n    CIFAR_model.add(MaxPooling2D(pool_size=(2, 2),strides=2,padding='valid'))\r\n    CIFAR_model.add(Dropout(0.1))\r\n    \r\n    CIFAR_model.add(Conv2D(256, (3, 3), padding='same',strides=1))\r\n    CIFAR_model.add(Activation('relu'))\r\n    CIFAR_model.add(Conv2D(256, (3, 3)))\r\n    CIFAR_model.add(Activation('relu'))\r\n    CIFAR_model.add(MaxPooling2D(pool_size=(2, 2),strides=2,padding='valid'))\r\n    CIFAR_model.add(Dropout(0.25))\r\n    \r\n    CIFAR_model.add(Conv2D(512, (3, 3), padding='same',strides=1))\r\n    CIFAR_model.add(Activation('relu'))\r\n    CIFAR_model.add(Conv2D(512, (3, 3)))\r\n    CIFAR_model.add(Activation('relu'))\r\n    CIFAR_model.add(MaxPooling2D(pool_size=(2, 2),strides=2,padding='valid'))\r\n    CIFAR_model.add(Dropout(0.5))\r\n    \r\n    \r\n    CIFAR_model.add(Flatten())\r\n    CIFAR_model.add(Dense(1024))\r\n    CIFAR_model.add(Activation('relu'))\r\n    CIFAR_model.add(Dropout(0.5))\r\n    CIFAR_model.add(Dense(pnumClasses))\r\n    CIFAR_model.add(Activation('softmax'))    \r\n    return CIFAR_model\r\n\r\n\r\ndef evaluateModel(model,x_test,y_test,verbose):\r\n    pLoss, pAcc = model.evaluate(x_test, y_test, verbose)\r\n    print(\"Test Loss\", pLoss)\r\n    print(\"Test Accuracy\", pAcc)\r\n     \r\n\r\n\r\ndef RunCIFAR100(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay):\r\n    initParameters(dataset,batchSize,numClasses,epochs,learningRate,momentum,weightDecay)\r\n    x_train, y_train, x_test, y_test = loadData()\r\n    CIFAR_model = model_CIFAR100()\r\n    CIFAR_sgd = optimizers.SGD(lr=learningRate, decay=weightDecay, momentum=momentum, nesterov=False)\r\n    CIFAR_model.compile(loss='categorical_crossentropy',optimizer=CIFAR_sgd, metrics=['accuracy'])\r\n    CIFAR_model.fit(x_train, y_train,batch_size=batchSize,epochs=epochs,validation_data=(x_test, y_test),shuffle=True)\r\n    evaluateModel(CIFAR_model,x_test, y_test, verbose=1)\r\n\r\n\r\ndef runModel(dataset,batchSize=128,numClasses=10,epochs=12,learningRate=0.01,momentum=0.5,weightDecay=1e-6):\r\n    RunCIFAR100(dataset,batchSize,numClasses=100,epochs=epochs,learningRate=learningRate,momentum=momentum,weightDecay=weightDecay)\r\n\r\ndef main():\r\n    runModel(\"cifar100\",epochs=200)\r\n```\r\n"}