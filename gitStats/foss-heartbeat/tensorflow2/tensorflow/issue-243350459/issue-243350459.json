{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11549", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11549/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11549/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11549/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/11549", "id": 243350459, "node_id": "MDU6SXNzdWUyNDMzNTA0NTk=", "number": 11549, "title": "Running Model on tensorflow Distribution can't  save model for tensorflow serving", "user": {"login": "terryKing1992", "id": 22629426, "node_id": "MDQ6VXNlcjIyNjI5NDI2", "avatar_url": "https://avatars0.githubusercontent.com/u/22629426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terryKing1992", "html_url": "https://github.com/terryKing1992", "followers_url": "https://api.github.com/users/terryKing1992/followers", "following_url": "https://api.github.com/users/terryKing1992/following{/other_user}", "gists_url": "https://api.github.com/users/terryKing1992/gists{/gist_id}", "starred_url": "https://api.github.com/users/terryKing1992/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terryKing1992/subscriptions", "organizations_url": "https://api.github.com/users/terryKing1992/orgs", "repos_url": "https://api.github.com/users/terryKing1992/repos", "events_url": "https://api.github.com/users/terryKing1992/events{/privacy}", "received_events_url": "https://api.github.com/users/terryKing1992/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 27, "created_at": "2017-07-17T10:17:26Z", "updated_at": "2018-11-08T13:27:20Z", "closed_at": "2018-01-24T23:38:08Z", "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>OS Platform CentOS 7.1</strong>:</li>\n<li><strong>TensorFlow installed from binary)</strong>:</li>\n<li><strong>TensorFlow version 1.2.1</strong>:</li>\n<li><strong>Python version 2.7</strong>:</li>\n<li><strong>Bazel version 0.4.5</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>Situation One: I add saving model for tensorflow serving based on mnist model distribution version.<br>\nwhen i run this model on the same machine and start one ps server and two workers. saving model can work well.<br>\nSituation Two: but if the model runs on three different machines(eg: A, B, C). I start ps server on A machine, and B, C machine runs worker, there is something wrong on saving model code.</p>\n<p>Situation Three: then I try another situation, run ps server and one worker on A, another worker on B, the worker running on A machine saves model. it can work well again.</p>\n<p>Situation Four: and run ps server on A, the other worker on B, it can also work.</p>\n<p>I think it is an issue of tensorflow distribution on saving model using saved_model_builder.</p>\n<h3>Source code / logs</h3>\n<p>my mnist distribution code as bellow:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span>!/usr/bin/env python2.7</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Train and export a simple Softmax Regression TensorFlow model.</span>\n<span class=\"pl-s\">The model is from the TensorFlow \"MNIST For ML Beginner\" tutorial. This program</span>\n<span class=\"pl-s\">simply follows all its training instructions, and uses TensorFlow SavedModel to</span>\n<span class=\"pl-s\">export the trained model with proper signatures that can be loaded by standard</span>\n<span class=\"pl-s\">tensorflow_model_server.</span>\n<span class=\"pl-s\">Usage: mnist_export.py [--training_iteration=x] [--model_version=y] export_dir</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n\n<span class=\"pl-k\">import</span> os\n<span class=\"pl-k\">import</span> sys\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> This is a placeholder for a Google-internal import.</span>\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">from</span> tensorflow.python.ops <span class=\"pl-k\">import</span> variables\n<span class=\"pl-k\">from</span> tensorflow.core.protobuf <span class=\"pl-k\">import</span> saver_pb2\n\n<span class=\"pl-k\">from</span> tensorflow.python.saved_model <span class=\"pl-k\">import</span> builder <span class=\"pl-k\">as</span> saved_model_builder\n<span class=\"pl-k\">from</span> tensorflow.python.saved_model <span class=\"pl-k\">import</span> signature_constants\n<span class=\"pl-k\">from</span> tensorflow.python.saved_model <span class=\"pl-k\">import</span> signature_def_utils\n<span class=\"pl-k\">from</span> tensorflow.python.saved_model <span class=\"pl-k\">import</span> tag_constants\n<span class=\"pl-k\">from</span> tensorflow.python.saved_model <span class=\"pl-k\">import</span> utils\n<span class=\"pl-k\">from</span> tensorflow.python.util <span class=\"pl-k\">import</span> compat\n<span class=\"pl-k\">from</span> tensorflow.examples.tutorials.mnist <span class=\"pl-k\">import</span> input_data\n\n<span class=\"pl-k\">from</span> six.moves <span class=\"pl-k\">import</span> <span class=\"pl-v\">xrange</span>\n\ntf.app.flags.DEFINE_string(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ps_hosts<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Comma-separated list of hostname:port pairs<span class=\"pl-pds\">\"</span></span>)\n\ntf.app.flags.DEFINE_string(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>worker_hosts<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Comma-separated list of hostname:port pairs<span class=\"pl-pds\">\"</span></span>)\n\ntf.app.flags.DEFINE_string(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>job_name<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>One of 'ps', 'worker'<span class=\"pl-pds\">\"</span></span>)\n\ntf.app.flags.DEFINE_integer(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>task_index<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Index of task within the job<span class=\"pl-pds\">\"</span></span>)\ntf.app.flags.DEFINE_integer(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>batch_size<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">100</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Index of task within the job<span class=\"pl-pds\">\"</span></span>)\n\ntf.app.flags.DEFINE_integer(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>training_iteration<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">2</span>,\n                            <span class=\"pl-s\"><span class=\"pl-pds\">'</span>number of training iterations.<span class=\"pl-pds\">'</span></span>)\ntf.app.flags.DEFINE_integer(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>model_version<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>version number of the model.<span class=\"pl-pds\">'</span></span>)\ntf.app.flags.DEFINE_string(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>work_dir<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>model/<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Working directory.<span class=\"pl-pds\">'</span></span>)\ntf.app.flags.DEFINE_string(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>train_dir<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>MNIST_data/<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Working directory.<span class=\"pl-pds\">'</span></span>)\n\n\n<span class=\"pl-c1\">FLAGS</span> <span class=\"pl-k\">=</span> tf.app.flags.<span class=\"pl-c1\">FLAGS</span>\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">_</span>):\n    ps_hosts <span class=\"pl-k\">=</span> <span class=\"pl-c1\">FLAGS</span>.ps_hosts.split(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-pds\">\"</span></span>)\n\n    worker_hosts <span class=\"pl-k\">=</span> <span class=\"pl-c1\">FLAGS</span>.worker_hosts.split(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>,<span class=\"pl-pds\">\"</span></span>)\n    cluster <span class=\"pl-k\">=</span> tf.train.ClusterSpec({<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ps<span class=\"pl-pds\">\"</span></span>: ps_hosts, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>worker<span class=\"pl-pds\">\"</span></span>: worker_hosts})\n    server <span class=\"pl-k\">=</span> tf.train.Server(cluster, <span class=\"pl-v\">job_name</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">FLAGS</span>.job_name, <span class=\"pl-v\">task_index</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">FLAGS</span>.task_index)\n\n    <span class=\"pl-k\">if</span> <span class=\"pl-c1\">FLAGS</span>.job_name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ps<span class=\"pl-pds\">\"</span></span>:\n        server.join()\n    <span class=\"pl-k\">elif</span> <span class=\"pl-c1\">FLAGS</span>.job_name <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>worker<span class=\"pl-pds\">\"</span></span>:\n        train(server, cluster)\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">train</span>(<span class=\"pl-smi\">server</span>, <span class=\"pl-smi\">cluster</span>):\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> Train model</span>\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Training model...<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-k\">with</span> tf.device(\n            tf.train.replica_device_setter(<span class=\"pl-v\">worker_device</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/job:worker/task:<span class=\"pl-c1\">%d</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">%</span> <span class=\"pl-c1\">FLAGS</span>.task_index, <span class=\"pl-v\">cluster</span><span class=\"pl-k\">=</span>cluster)):\n        mnist <span class=\"pl-k\">=</span> input_data.read_data_sets(<span class=\"pl-c1\">FLAGS</span>.train_dir, <span class=\"pl-v\">one_hot</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n        serialized_tf_example <span class=\"pl-k\">=</span> tf.placeholder(tf.string, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>tf_example<span class=\"pl-pds\">'</span></span>)\n        feature_configs <span class=\"pl-k\">=</span> {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>: tf.FixedLenFeature(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">784</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32), }\n        tf_example <span class=\"pl-k\">=</span> tf.parse_example(serialized_tf_example, feature_configs)\n\n        x <span class=\"pl-k\">=</span> tf.identity(tf_example[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>], <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>x<span class=\"pl-pds\">'</span></span>)  <span class=\"pl-c\"><span class=\"pl-c\">#</span> use tf.identity() to assign name</span>\n        y_ <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>float<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">10</span>])\n\n        w <span class=\"pl-k\">=</span> tf.Variable(tf.zeros([<span class=\"pl-c1\">784</span>, <span class=\"pl-c1\">10</span>]))\n        b <span class=\"pl-k\">=</span> tf.Variable(tf.zeros([<span class=\"pl-c1\">10</span>]))\n\n        y <span class=\"pl-k\">=</span> tf.nn.softmax(tf.matmul(x, w) <span class=\"pl-k\">+</span> b, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>y<span class=\"pl-pds\">'</span></span>)\n        cross_entropy <span class=\"pl-k\">=</span> <span class=\"pl-k\">-</span>tf.reduce_sum(y_ <span class=\"pl-k\">*</span> tf.log(y))\n\n        global_step <span class=\"pl-k\">=</span> tf.Variable(<span class=\"pl-c1\">0</span>)\n        train_step <span class=\"pl-k\">=</span> tf.train.GradientDescentOptimizer(<span class=\"pl-c1\">0.01</span>).minimize(cross_entropy, <span class=\"pl-v\">global_step</span><span class=\"pl-k\">=</span>global_step)\n        values, indices <span class=\"pl-k\">=</span> tf.nn.top_k(y, <span class=\"pl-c1\">10</span>)\n\n        prediction_classes <span class=\"pl-k\">=</span> tf.contrib.lookup.index_to_string(\n            tf.to_int64(indices), <span class=\"pl-v\">mapping</span><span class=\"pl-k\">=</span>tf.constant([<span class=\"pl-c1\">str</span>(i) <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-v\">xrange</span>(<span class=\"pl-c1\">10</span>)]))\n        correct_prediction <span class=\"pl-k\">=</span> tf.equal(tf.argmax(y, <span class=\"pl-c1\">1</span>), tf.argmax(y_, <span class=\"pl-c1\">1</span>))\n        accuracy <span class=\"pl-k\">=</span> tf.reduce_mean(tf.cast(correct_prediction, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>float<span class=\"pl-pds\">'</span></span>))\n\n        summary_op <span class=\"pl-k\">=</span> tf.summary.merge_all()\n        init_op <span class=\"pl-k\">=</span> tf.global_variables_initializer()\n        saver <span class=\"pl-k\">=</span> tf.train.Saver()\n\n        sv <span class=\"pl-k\">=</span> tf.train.Supervisor(<span class=\"pl-v\">is_chief</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">FLAGS</span>.task_index <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>), <span class=\"pl-v\">logdir</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>train_logs<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">init_op</span><span class=\"pl-k\">=</span>init_op,\n                                 <span class=\"pl-v\">summary_op</span><span class=\"pl-k\">=</span>summary_op, <span class=\"pl-v\">saver</span><span class=\"pl-k\">=</span>saver, <span class=\"pl-v\">global_step</span><span class=\"pl-k\">=</span>global_step, <span class=\"pl-v\">save_model_secs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">600</span>)\n\n        <span class=\"pl-k\">with</span> sv.managed_session(server.target) <span class=\"pl-k\">as</span> sess:\n            step <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>\n\n            <span class=\"pl-k\">while</span> <span class=\"pl-k\">not</span> sv.should_stop() <span class=\"pl-k\">and</span> step <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">1000</span>:\n                batch_xs, batch_ys <span class=\"pl-k\">=</span> mnist.train.next_batch(<span class=\"pl-c1\">FLAGS</span>.batch_size)\n                train_feed <span class=\"pl-k\">=</span> {x: batch_xs, y_: batch_ys}\n\n                _, step <span class=\"pl-k\">=</span> sess.run([train_step, global_step], <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>train_feed)\n\n                <span class=\"pl-k\">if</span> step <span class=\"pl-k\">%</span> <span class=\"pl-c1\">1000</span> <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>:\n                    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>global step: <span class=\"pl-c1\">{}</span> , accuracy:<span class=\"pl-c1\">{}</span><span class=\"pl-pds\">\"</span></span>.format(step, sess.run(accuracy,\n                                                                                <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>train_feed)))\n\n            <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>training accuracy <span class=\"pl-c1\">%g</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> sess.run(\n                accuracy, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x: mnist.test.images,\n                                     y_: mnist.test.labels}))\n            <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Done training!<span class=\"pl-pds\">'</span></span>)\n            <span class=\"pl-k\">if</span> sv.is_chief:\n                <span class=\"pl-c\"><span class=\"pl-c\">#</span> Export model</span>\n                <span class=\"pl-c\"><span class=\"pl-c\">#</span> WARNING(break-tutorial-inline-code): The following code snippet is</span>\n                <span class=\"pl-c\"><span class=\"pl-c\">#</span> in-lined in tutorials, please update tutorial documents accordingly</span>\n                <span class=\"pl-c\"><span class=\"pl-c\">#</span> whenever code changes.</span>\n                sess.graph._unsafe_unfinalize()\n                export_path_base <span class=\"pl-k\">=</span> <span class=\"pl-c1\">FLAGS</span>.work_dir\n                export_path <span class=\"pl-k\">=</span> os.path.join(\n                    compat.as_bytes(export_path_base),\n                    compat.as_bytes(<span class=\"pl-c1\">str</span>(<span class=\"pl-c1\">FLAGS</span>.model_version)))\n                <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Exporting trained model to<span class=\"pl-pds\">'</span></span>, export_path)\n                builder <span class=\"pl-k\">=</span> saved_model_builder.SavedModelBuilder(export_path)\n\n                <span class=\"pl-c\"><span class=\"pl-c\">#</span> Build the signature_def_map.</span>\n                classification_inputs <span class=\"pl-k\">=</span> utils.build_tensor_info(serialized_tf_example)\n                classification_outputs_classes <span class=\"pl-k\">=</span> utils.build_tensor_info(prediction_classes)\n                classification_outputs_scores <span class=\"pl-k\">=</span> utils.build_tensor_info(values)\n\n                classification_signature <span class=\"pl-k\">=</span> signature_def_utils.build_signature_def(\n                    <span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>{signature_constants.<span class=\"pl-c1\">CLASSIFY_INPUTS</span>: classification_inputs},\n                    <span class=\"pl-v\">outputs</span><span class=\"pl-k\">=</span>{\n                        signature_constants.<span class=\"pl-c1\">CLASSIFY_OUTPUT_CLASSES</span>:\n                            classification_outputs_classes,\n                        signature_constants.<span class=\"pl-c1\">CLASSIFY_OUTPUT_SCORES</span>:\n                            classification_outputs_scores\n                    },\n                    <span class=\"pl-v\">method_name</span><span class=\"pl-k\">=</span>signature_constants.<span class=\"pl-c1\">CLASSIFY_METHOD_NAME</span>)\n\n                tensor_info_x <span class=\"pl-k\">=</span> utils.build_tensor_info(x)\n                tensor_info_y <span class=\"pl-k\">=</span> utils.build_tensor_info(y)\n\n                prediction_signature <span class=\"pl-k\">=</span> signature_def_utils.build_signature_def(\n                    <span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>images<span class=\"pl-pds\">'</span></span>: tensor_info_x},\n                    <span class=\"pl-v\">outputs</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">'</span>scores<span class=\"pl-pds\">'</span></span>: tensor_info_y},\n                    <span class=\"pl-v\">method_name</span><span class=\"pl-k\">=</span>signature_constants.<span class=\"pl-c1\">PREDICT_METHOD_NAME</span>)\n\n                legacy_init_op <span class=\"pl-k\">=</span> tf.group(tf.tables_initializer(), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>legacy_init_op<span class=\"pl-pds\">'</span></span>)\n\n                builder.add_meta_graph_and_variables(\n                    sess, [tag_constants.<span class=\"pl-c1\">SERVING</span>],\n                    <span class=\"pl-v\">signature_def_map</span><span class=\"pl-k\">=</span>{\n                        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>predict_images<span class=\"pl-pds\">'</span></span>:\n                            prediction_signature,\n                        signature_constants.<span class=\"pl-c1\">DEFAULT_SERVING_SIGNATURE_DEF_KEY</span>:\n                            classification_signature,\n                    },\n                    <span class=\"pl-v\">legacy_init_op</span><span class=\"pl-k\">=</span>legacy_init_op)\n\n                builder.save()\n\n                <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Done exporting!<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    tf.app.run()\n</pre></div>\n<h3>Error Log</h3>\n<pre><code>Extracting MNIST_data/train-images-idx3-ubyte.gz\nExtracting MNIST_data/train-labels-idx1-ubyte.gz\nExtracting MNIST_data/t10k-images-idx3-ubyte.gz\nExtracting MNIST_data/t10k-labels-idx1-ubyte.gz\nWARNING:tensorflow:From distribute_mnist_serving_model.py:85: index_to_string (from tensorflow.contrib.lookup.lookup_ops) is deprecated and will be removed after 2017-01-07.\nInstructions for updating:\nThis op will be removed after the deprecation date. Please switch to index_to_string_table_from_tensor and call the lookup method of the returned table.\n('Exporting trained model to', 'model/1')\n2017-07-17 17:30:10.703382: I tensorflow/core/distributed_runtime/master_session.cc:999] Start master session e5aa2c66bff69f11 with config:\nglobal step: 0 , accuracy:0.469999998808\ntraining accuracy 0.5701\nDone training!\nTraceback (most recent call last):\n  File \"distribute_mnist_serving_model.py\", line 176, in &lt;module&gt;\n    tf.app.run()\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/platform/app.py\", line 48, in run\n    _sys.exit(main(_sys.argv[:1] + flags_passthrough))\n  File \"distribute_mnist_serving_model.py\", line 58, in main\n    train(server, cluster)\n  File \"distribute_mnist_serving_model.py\", line 159, in train\n    legacy_init_op=legacy_init_op)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/saved_model/builder_impl.py\", line 362, in add_meta_graph_and_variables\n    saver.save(sess, variables_path, write_meta_graph=False, write_state=False)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1488, in save\n    raise exc\ntensorflow.python.framework.errors_impl.NotFoundError: model/1/variables/variables_temp_962a99f708244380a378c7e2218c6865\n         [[Node: save_1/SaveV2 = SaveV2[dtypes=[DT_FLOAT, DT_FLOAT, DT_INT32], _device=\"/job:ps/replica:0/task:0/cpu:0\"](save_1/ShardedFilename, save_1/SaveV2/tensor_names, save_1/SaveV2/shape_and_slices, Variable, Variable_1, Variable_2)]]\nCaused by op u'save_1/SaveV2', defined at:\n  File \"distribute_mnist_serving_model.py\", line 176, in &lt;module&gt;\n    tf.app.run()\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/platform/app.py\", line 48, in run\n    _sys.exit(main(_sys.argv[:1] + flags_passthrough))\n  File \"distribute_mnist_serving_model.py\", line 58, in main\n    train(server, cluster)\n  File \"distribute_mnist_serving_model.py\", line 159, in train\n    legacy_init_op=legacy_init_op)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/saved_model/builder_impl.py\", line 356, in add_meta_graph_and_variables\n    allow_empty=True)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1139, in __init__\n    self.build()\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1170, in build\n    restore_sequentially=self._restore_sequentially)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 685, in build\n    save_tensor = self._AddShardedSaveOps(filename_tensor, per_device)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 361, in _AddShardedSaveOps\n    return self._AddShardedSaveOpsForV2(filename_tensor, per_device)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 335, in _AddShardedSaveOpsForV2\n    sharded_saves.append(self._AddSaveOps(sharded_filename, saveables))\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 276, in _AddSaveOps\n    save = self.save_op(filename_tensor, saveables)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 219, in save_op\n    tensors)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 745, in save_v2\n    tensors=tensors, name=name)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 767, in apply_op\n    op_def=op_def)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 2506, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1269, in __init__\n    self._traceback = _extract_stack()\nNotFoundError (see above for traceback): model/1/variables/variables_temp_962a99f708244380a378c7e2218c6865\n         [[Node: save_1/SaveV2 = SaveV2[dtypes=[DT_FLOAT, DT_FLOAT, DT_INT32], _device=\"/job:ps/replica:0/task:0/cpu:0\"](save_1/ShardedFilename, save_1/SaveV2/tensor_names, save_1/SaveV2/shape_and_slices, Variable, Variable_1, Variable_2)]]\n</code></pre>\n<h3>The Correct Log</h3>\n<pre><code>Extracting MNIST_data/train-images-idx3-ubyte.gz\nExtracting MNIST_data/train-labels-idx1-ubyte.gz\nExtracting MNIST_data/t10k-images-idx3-ubyte.gz\nExtracting MNIST_data/t10k-labels-idx1-ubyte.gz\nWARNING:tensorflow:From distribute_mnist_serving_model.py:83: index_to_string (from tensorflow.contrib.lookup.lookup_ops) is deprecated and will be removed after 2017-01-07.\nInstructions for updating:\nThis op will be removed after the deprecation date. Please switch to index_to_string_table_from_tensor and call the lookup method of the returned table.\n('Exporting trained model to', 'model/1')\n2017-07-17 17:38:46.714706: I tensorflow/core/distributed_runtime/master_session.cc:999] Start master session 2618b797d2ef99b4 with config:\nglobal step: 0 , accuracy:0.479999989271\ntraining accuracy 0.5513\nDone training!\nDone exporting!\n</code></pre>\n<h3>Exact command to reproduce</h3>\n<p>Situation One: work well</p>\n<pre><code>python distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,A:2224 --job_name=ps --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,A:2224 --job_name=worker --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,A:2224 --job_name=worker --task_index=1\n</code></pre>\n<p>Situation Two: can't work</p>\n<pre><code>python distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2222,C:2222 --job_name=ps --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2222,C:2222 --job_name=worker --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2222,C:2222 --job_name=worker --task_index=1\n</code></pre>\n<p>Situation Three: work well</p>\n<pre><code>python distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,B:2222 --job_name=ps --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,B:2222 --job_name=worker --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,B:2222 --job_name=worker --task_index=1\n</code></pre>\n<p>Situation Four: work well</p>\n<pre><code>python distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2223,B:2222 --job_name=ps --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2223,B:2222 --job_name=worker --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2223,B:2222 --job_name=worker --task_index=1\n</code></pre>\n<p>I Don't know what cause this problem. how can i fix this issue? thanks a lot.</p>", "body_text": "System information\n\nOS Platform CentOS 7.1:\nTensorFlow installed from binary):\nTensorFlow version 1.2.1:\nPython version 2.7:\nBazel version 0.4.5:\n\nDescribe the problem\nSituation One: I add saving model for tensorflow serving based on mnist model distribution version.\nwhen i run this model on the same machine and start one ps server and two workers. saving model can work well.\nSituation Two: but if the model runs on three different machines(eg: A, B, C). I start ps server on A machine, and B, C machine runs worker, there is something wrong on saving model code.\nSituation Three: then I try another situation, run ps server and one worker on A, another worker on B, the worker running on A machine saves model. it can work well again.\nSituation Four: and run ps server on A, the other worker on B, it can also work.\nI think it is an issue of tensorflow distribution on saving model using saved_model_builder.\nSource code / logs\nmy mnist distribution code as bellow:\n#!/usr/bin/env python2.7\n\"\"\"Train and export a simple Softmax Regression TensorFlow model.\nThe model is from the TensorFlow \"MNIST For ML Beginner\" tutorial. This program\nsimply follows all its training instructions, and uses TensorFlow SavedModel to\nexport the trained model with proper signatures that can be loaded by standard\ntensorflow_model_server.\nUsage: mnist_export.py [--training_iteration=x] [--model_version=y] export_dir\n\"\"\"\n\nimport os\nimport sys\n\n# This is a placeholder for a Google-internal import.\n\nimport tensorflow as tf\nfrom tensorflow.python.ops import variables\nfrom tensorflow.core.protobuf import saver_pb2\n\nfrom tensorflow.python.saved_model import builder as saved_model_builder\nfrom tensorflow.python.saved_model import signature_constants\nfrom tensorflow.python.saved_model import signature_def_utils\nfrom tensorflow.python.saved_model import tag_constants\nfrom tensorflow.python.saved_model import utils\nfrom tensorflow.python.util import compat\nfrom tensorflow.examples.tutorials.mnist import input_data\n\nfrom six.moves import xrange\n\ntf.app.flags.DEFINE_string(\"ps_hosts\", \"\", \"Comma-separated list of hostname:port pairs\")\n\ntf.app.flags.DEFINE_string(\"worker_hosts\", \"\", \"Comma-separated list of hostname:port pairs\")\n\ntf.app.flags.DEFINE_string(\"job_name\", \"\", \"One of 'ps', 'worker'\")\n\ntf.app.flags.DEFINE_integer(\"task_index\", 0, \"Index of task within the job\")\ntf.app.flags.DEFINE_integer(\"batch_size\", 100, \"Index of task within the job\")\n\ntf.app.flags.DEFINE_integer('training_iteration', 2,\n                            'number of training iterations.')\ntf.app.flags.DEFINE_integer('model_version', 1, 'version number of the model.')\ntf.app.flags.DEFINE_string('work_dir', 'model/', 'Working directory.')\ntf.app.flags.DEFINE_string('train_dir', 'MNIST_data/', 'Working directory.')\n\n\nFLAGS = tf.app.flags.FLAGS\n\n\ndef main(_):\n    ps_hosts = FLAGS.ps_hosts.split(\",\")\n\n    worker_hosts = FLAGS.worker_hosts.split(\",\")\n    cluster = tf.train.ClusterSpec({\"ps\": ps_hosts, \"worker\": worker_hosts})\n    server = tf.train.Server(cluster, job_name=FLAGS.job_name, task_index=FLAGS.task_index)\n\n    if FLAGS.job_name == \"ps\":\n        server.join()\n    elif FLAGS.job_name == \"worker\":\n        train(server, cluster)\n\n\ndef train(server, cluster):\n    # Train model\n    print('Training model...')\n    with tf.device(\n            tf.train.replica_device_setter(worker_device=\"/job:worker/task:%d\" % FLAGS.task_index, cluster=cluster)):\n        mnist = input_data.read_data_sets(FLAGS.train_dir, one_hot=True)\n        serialized_tf_example = tf.placeholder(tf.string, name='tf_example')\n        feature_configs = {'x': tf.FixedLenFeature(shape=[784], dtype=tf.float32), }\n        tf_example = tf.parse_example(serialized_tf_example, feature_configs)\n\n        x = tf.identity(tf_example['x'], name='x')  # use tf.identity() to assign name\n        y_ = tf.placeholder('float', shape=[None, 10])\n\n        w = tf.Variable(tf.zeros([784, 10]))\n        b = tf.Variable(tf.zeros([10]))\n\n        y = tf.nn.softmax(tf.matmul(x, w) + b, name='y')\n        cross_entropy = -tf.reduce_sum(y_ * tf.log(y))\n\n        global_step = tf.Variable(0)\n        train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy, global_step=global_step)\n        values, indices = tf.nn.top_k(y, 10)\n\n        prediction_classes = tf.contrib.lookup.index_to_string(\n            tf.to_int64(indices), mapping=tf.constant([str(i) for i in xrange(10)]))\n        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, 'float'))\n\n        summary_op = tf.summary.merge_all()\n        init_op = tf.global_variables_initializer()\n        saver = tf.train.Saver()\n\n        sv = tf.train.Supervisor(is_chief=(FLAGS.task_index == 0), logdir=\"train_logs\", init_op=init_op,\n                                 summary_op=summary_op, saver=saver, global_step=global_step, save_model_secs=600)\n\n        with sv.managed_session(server.target) as sess:\n            step = 0\n\n            while not sv.should_stop() and step < 1000:\n                batch_xs, batch_ys = mnist.train.next_batch(FLAGS.batch_size)\n                train_feed = {x: batch_xs, y_: batch_ys}\n\n                _, step = sess.run([train_step, global_step], feed_dict=train_feed)\n\n                if step % 1000 == 0:\n                    print(\"global step: {} , accuracy:{}\".format(step, sess.run(accuracy,\n                                                                                feed_dict=train_feed)))\n\n            print('training accuracy %g' % sess.run(\n                accuracy, feed_dict={x: mnist.test.images,\n                                     y_: mnist.test.labels}))\n            print('Done training!')\n            if sv.is_chief:\n                # Export model\n                # WARNING(break-tutorial-inline-code): The following code snippet is\n                # in-lined in tutorials, please update tutorial documents accordingly\n                # whenever code changes.\n                sess.graph._unsafe_unfinalize()\n                export_path_base = FLAGS.work_dir\n                export_path = os.path.join(\n                    compat.as_bytes(export_path_base),\n                    compat.as_bytes(str(FLAGS.model_version)))\n                print('Exporting trained model to', export_path)\n                builder = saved_model_builder.SavedModelBuilder(export_path)\n\n                # Build the signature_def_map.\n                classification_inputs = utils.build_tensor_info(serialized_tf_example)\n                classification_outputs_classes = utils.build_tensor_info(prediction_classes)\n                classification_outputs_scores = utils.build_tensor_info(values)\n\n                classification_signature = signature_def_utils.build_signature_def(\n                    inputs={signature_constants.CLASSIFY_INPUTS: classification_inputs},\n                    outputs={\n                        signature_constants.CLASSIFY_OUTPUT_CLASSES:\n                            classification_outputs_classes,\n                        signature_constants.CLASSIFY_OUTPUT_SCORES:\n                            classification_outputs_scores\n                    },\n                    method_name=signature_constants.CLASSIFY_METHOD_NAME)\n\n                tensor_info_x = utils.build_tensor_info(x)\n                tensor_info_y = utils.build_tensor_info(y)\n\n                prediction_signature = signature_def_utils.build_signature_def(\n                    inputs={'images': tensor_info_x},\n                    outputs={'scores': tensor_info_y},\n                    method_name=signature_constants.PREDICT_METHOD_NAME)\n\n                legacy_init_op = tf.group(tf.tables_initializer(), name='legacy_init_op')\n\n                builder.add_meta_graph_and_variables(\n                    sess, [tag_constants.SERVING],\n                    signature_def_map={\n                        'predict_images':\n                            prediction_signature,\n                        signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY:\n                            classification_signature,\n                    },\n                    legacy_init_op=legacy_init_op)\n\n                builder.save()\n\n                print('Done exporting!')\n\nif __name__ == '__main__':\n    tf.app.run()\n\nError Log\nExtracting MNIST_data/train-images-idx3-ubyte.gz\nExtracting MNIST_data/train-labels-idx1-ubyte.gz\nExtracting MNIST_data/t10k-images-idx3-ubyte.gz\nExtracting MNIST_data/t10k-labels-idx1-ubyte.gz\nWARNING:tensorflow:From distribute_mnist_serving_model.py:85: index_to_string (from tensorflow.contrib.lookup.lookup_ops) is deprecated and will be removed after 2017-01-07.\nInstructions for updating:\nThis op will be removed after the deprecation date. Please switch to index_to_string_table_from_tensor and call the lookup method of the returned table.\n('Exporting trained model to', 'model/1')\n2017-07-17 17:30:10.703382: I tensorflow/core/distributed_runtime/master_session.cc:999] Start master session e5aa2c66bff69f11 with config:\nglobal step: 0 , accuracy:0.469999998808\ntraining accuracy 0.5701\nDone training!\nTraceback (most recent call last):\n  File \"distribute_mnist_serving_model.py\", line 176, in <module>\n    tf.app.run()\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/platform/app.py\", line 48, in run\n    _sys.exit(main(_sys.argv[:1] + flags_passthrough))\n  File \"distribute_mnist_serving_model.py\", line 58, in main\n    train(server, cluster)\n  File \"distribute_mnist_serving_model.py\", line 159, in train\n    legacy_init_op=legacy_init_op)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/saved_model/builder_impl.py\", line 362, in add_meta_graph_and_variables\n    saver.save(sess, variables_path, write_meta_graph=False, write_state=False)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1488, in save\n    raise exc\ntensorflow.python.framework.errors_impl.NotFoundError: model/1/variables/variables_temp_962a99f708244380a378c7e2218c6865\n         [[Node: save_1/SaveV2 = SaveV2[dtypes=[DT_FLOAT, DT_FLOAT, DT_INT32], _device=\"/job:ps/replica:0/task:0/cpu:0\"](save_1/ShardedFilename, save_1/SaveV2/tensor_names, save_1/SaveV2/shape_and_slices, Variable, Variable_1, Variable_2)]]\nCaused by op u'save_1/SaveV2', defined at:\n  File \"distribute_mnist_serving_model.py\", line 176, in <module>\n    tf.app.run()\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/platform/app.py\", line 48, in run\n    _sys.exit(main(_sys.argv[:1] + flags_passthrough))\n  File \"distribute_mnist_serving_model.py\", line 58, in main\n    train(server, cluster)\n  File \"distribute_mnist_serving_model.py\", line 159, in train\n    legacy_init_op=legacy_init_op)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/saved_model/builder_impl.py\", line 356, in add_meta_graph_and_variables\n    allow_empty=True)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1139, in __init__\n    self.build()\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1170, in build\n    restore_sequentially=self._restore_sequentially)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 685, in build\n    save_tensor = self._AddShardedSaveOps(filename_tensor, per_device)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 361, in _AddShardedSaveOps\n    return self._AddShardedSaveOpsForV2(filename_tensor, per_device)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 335, in _AddShardedSaveOpsForV2\n    sharded_saves.append(self._AddSaveOps(sharded_filename, saveables))\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 276, in _AddSaveOps\n    save = self.save_op(filename_tensor, saveables)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 219, in save_op\n    tensors)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 745, in save_v2\n    tensors=tensors, name=name)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 767, in apply_op\n    op_def=op_def)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 2506, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1269, in __init__\n    self._traceback = _extract_stack()\nNotFoundError (see above for traceback): model/1/variables/variables_temp_962a99f708244380a378c7e2218c6865\n         [[Node: save_1/SaveV2 = SaveV2[dtypes=[DT_FLOAT, DT_FLOAT, DT_INT32], _device=\"/job:ps/replica:0/task:0/cpu:0\"](save_1/ShardedFilename, save_1/SaveV2/tensor_names, save_1/SaveV2/shape_and_slices, Variable, Variable_1, Variable_2)]]\n\nThe Correct Log\nExtracting MNIST_data/train-images-idx3-ubyte.gz\nExtracting MNIST_data/train-labels-idx1-ubyte.gz\nExtracting MNIST_data/t10k-images-idx3-ubyte.gz\nExtracting MNIST_data/t10k-labels-idx1-ubyte.gz\nWARNING:tensorflow:From distribute_mnist_serving_model.py:83: index_to_string (from tensorflow.contrib.lookup.lookup_ops) is deprecated and will be removed after 2017-01-07.\nInstructions for updating:\nThis op will be removed after the deprecation date. Please switch to index_to_string_table_from_tensor and call the lookup method of the returned table.\n('Exporting trained model to', 'model/1')\n2017-07-17 17:38:46.714706: I tensorflow/core/distributed_runtime/master_session.cc:999] Start master session 2618b797d2ef99b4 with config:\nglobal step: 0 , accuracy:0.479999989271\ntraining accuracy 0.5513\nDone training!\nDone exporting!\n\nExact command to reproduce\nSituation One: work well\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,A:2224 --job_name=ps --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,A:2224 --job_name=worker --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,A:2224 --job_name=worker --task_index=1\n\nSituation Two: can't work\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2222,C:2222 --job_name=ps --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2222,C:2222 --job_name=worker --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2222,C:2222 --job_name=worker --task_index=1\n\nSituation Three: work well\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,B:2222 --job_name=ps --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,B:2222 --job_name=worker --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,B:2222 --job_name=worker --task_index=1\n\nSituation Four: work well\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2223,B:2222 --job_name=ps --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2223,B:2222 --job_name=worker --task_index=0\n\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2223,B:2222 --job_name=worker --task_index=1\n\nI Don't know what cause this problem. how can i fix this issue? thanks a lot.", "body": "### System information\r\n- **OS Platform CentOS 7.1**:\r\n- **TensorFlow installed from binary)**:\r\n- **TensorFlow version 1.2.1**:\r\n- **Python version 2.7**: \r\n- **Bazel version 0.4.5**:\r\n\r\n### Describe the problem\r\nSituation One: I add saving model for tensorflow serving based on mnist model distribution version.\r\nwhen i run this model on the same machine and start one ps server and two workers. saving model can work well.\r\nSituation Two: but if the model runs on three different machines(eg: A, B, C). I start ps server on A machine, and B, C machine runs worker, there is something wrong on saving model code.\r\n\r\nSituation Three: then I try another situation, run ps server and one worker on A, another worker on B, the worker running on A machine saves model. it can work well again.\r\n\r\nSituation Four: and run ps server on A, the other worker on B, it can also work.\r\n\r\nI think it is an issue of tensorflow distribution on saving model using saved_model_builder.\r\n\r\n### Source code / logs\r\nmy mnist distribution code as bellow:\r\n```python\r\n#!/usr/bin/env python2.7\r\n\"\"\"Train and export a simple Softmax Regression TensorFlow model.\r\nThe model is from the TensorFlow \"MNIST For ML Beginner\" tutorial. This program\r\nsimply follows all its training instructions, and uses TensorFlow SavedModel to\r\nexport the trained model with proper signatures that can be loaded by standard\r\ntensorflow_model_server.\r\nUsage: mnist_export.py [--training_iteration=x] [--model_version=y] export_dir\r\n\"\"\"\r\n\r\nimport os\r\nimport sys\r\n\r\n# This is a placeholder for a Google-internal import.\r\n\r\nimport tensorflow as tf\r\nfrom tensorflow.python.ops import variables\r\nfrom tensorflow.core.protobuf import saver_pb2\r\n\r\nfrom tensorflow.python.saved_model import builder as saved_model_builder\r\nfrom tensorflow.python.saved_model import signature_constants\r\nfrom tensorflow.python.saved_model import signature_def_utils\r\nfrom tensorflow.python.saved_model import tag_constants\r\nfrom tensorflow.python.saved_model import utils\r\nfrom tensorflow.python.util import compat\r\nfrom tensorflow.examples.tutorials.mnist import input_data\r\n\r\nfrom six.moves import xrange\r\n\r\ntf.app.flags.DEFINE_string(\"ps_hosts\", \"\", \"Comma-separated list of hostname:port pairs\")\r\n\r\ntf.app.flags.DEFINE_string(\"worker_hosts\", \"\", \"Comma-separated list of hostname:port pairs\")\r\n\r\ntf.app.flags.DEFINE_string(\"job_name\", \"\", \"One of 'ps', 'worker'\")\r\n\r\ntf.app.flags.DEFINE_integer(\"task_index\", 0, \"Index of task within the job\")\r\ntf.app.flags.DEFINE_integer(\"batch_size\", 100, \"Index of task within the job\")\r\n\r\ntf.app.flags.DEFINE_integer('training_iteration', 2,\r\n                            'number of training iterations.')\r\ntf.app.flags.DEFINE_integer('model_version', 1, 'version number of the model.')\r\ntf.app.flags.DEFINE_string('work_dir', 'model/', 'Working directory.')\r\ntf.app.flags.DEFINE_string('train_dir', 'MNIST_data/', 'Working directory.')\r\n\r\n\r\nFLAGS = tf.app.flags.FLAGS\r\n\r\n\r\ndef main(_):\r\n    ps_hosts = FLAGS.ps_hosts.split(\",\")\r\n\r\n    worker_hosts = FLAGS.worker_hosts.split(\",\")\r\n    cluster = tf.train.ClusterSpec({\"ps\": ps_hosts, \"worker\": worker_hosts})\r\n    server = tf.train.Server(cluster, job_name=FLAGS.job_name, task_index=FLAGS.task_index)\r\n\r\n    if FLAGS.job_name == \"ps\":\r\n        server.join()\r\n    elif FLAGS.job_name == \"worker\":\r\n        train(server, cluster)\r\n\r\n\r\ndef train(server, cluster):\r\n    # Train model\r\n    print('Training model...')\r\n    with tf.device(\r\n            tf.train.replica_device_setter(worker_device=\"/job:worker/task:%d\" % FLAGS.task_index, cluster=cluster)):\r\n        mnist = input_data.read_data_sets(FLAGS.train_dir, one_hot=True)\r\n        serialized_tf_example = tf.placeholder(tf.string, name='tf_example')\r\n        feature_configs = {'x': tf.FixedLenFeature(shape=[784], dtype=tf.float32), }\r\n        tf_example = tf.parse_example(serialized_tf_example, feature_configs)\r\n\r\n        x = tf.identity(tf_example['x'], name='x')  # use tf.identity() to assign name\r\n        y_ = tf.placeholder('float', shape=[None, 10])\r\n\r\n        w = tf.Variable(tf.zeros([784, 10]))\r\n        b = tf.Variable(tf.zeros([10]))\r\n\r\n        y = tf.nn.softmax(tf.matmul(x, w) + b, name='y')\r\n        cross_entropy = -tf.reduce_sum(y_ * tf.log(y))\r\n\r\n        global_step = tf.Variable(0)\r\n        train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy, global_step=global_step)\r\n        values, indices = tf.nn.top_k(y, 10)\r\n\r\n        prediction_classes = tf.contrib.lookup.index_to_string(\r\n            tf.to_int64(indices), mapping=tf.constant([str(i) for i in xrange(10)]))\r\n        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\r\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, 'float'))\r\n\r\n        summary_op = tf.summary.merge_all()\r\n        init_op = tf.global_variables_initializer()\r\n        saver = tf.train.Saver()\r\n\r\n        sv = tf.train.Supervisor(is_chief=(FLAGS.task_index == 0), logdir=\"train_logs\", init_op=init_op,\r\n                                 summary_op=summary_op, saver=saver, global_step=global_step, save_model_secs=600)\r\n\r\n        with sv.managed_session(server.target) as sess:\r\n            step = 0\r\n\r\n            while not sv.should_stop() and step < 1000:\r\n                batch_xs, batch_ys = mnist.train.next_batch(FLAGS.batch_size)\r\n                train_feed = {x: batch_xs, y_: batch_ys}\r\n\r\n                _, step = sess.run([train_step, global_step], feed_dict=train_feed)\r\n\r\n                if step % 1000 == 0:\r\n                    print(\"global step: {} , accuracy:{}\".format(step, sess.run(accuracy,\r\n                                                                                feed_dict=train_feed)))\r\n\r\n            print('training accuracy %g' % sess.run(\r\n                accuracy, feed_dict={x: mnist.test.images,\r\n                                     y_: mnist.test.labels}))\r\n            print('Done training!')\r\n            if sv.is_chief:\r\n                # Export model\r\n                # WARNING(break-tutorial-inline-code): The following code snippet is\r\n                # in-lined in tutorials, please update tutorial documents accordingly\r\n                # whenever code changes.\r\n                sess.graph._unsafe_unfinalize()\r\n                export_path_base = FLAGS.work_dir\r\n                export_path = os.path.join(\r\n                    compat.as_bytes(export_path_base),\r\n                    compat.as_bytes(str(FLAGS.model_version)))\r\n                print('Exporting trained model to', export_path)\r\n                builder = saved_model_builder.SavedModelBuilder(export_path)\r\n\r\n                # Build the signature_def_map.\r\n                classification_inputs = utils.build_tensor_info(serialized_tf_example)\r\n                classification_outputs_classes = utils.build_tensor_info(prediction_classes)\r\n                classification_outputs_scores = utils.build_tensor_info(values)\r\n\r\n                classification_signature = signature_def_utils.build_signature_def(\r\n                    inputs={signature_constants.CLASSIFY_INPUTS: classification_inputs},\r\n                    outputs={\r\n                        signature_constants.CLASSIFY_OUTPUT_CLASSES:\r\n                            classification_outputs_classes,\r\n                        signature_constants.CLASSIFY_OUTPUT_SCORES:\r\n                            classification_outputs_scores\r\n                    },\r\n                    method_name=signature_constants.CLASSIFY_METHOD_NAME)\r\n\r\n                tensor_info_x = utils.build_tensor_info(x)\r\n                tensor_info_y = utils.build_tensor_info(y)\r\n\r\n                prediction_signature = signature_def_utils.build_signature_def(\r\n                    inputs={'images': tensor_info_x},\r\n                    outputs={'scores': tensor_info_y},\r\n                    method_name=signature_constants.PREDICT_METHOD_NAME)\r\n\r\n                legacy_init_op = tf.group(tf.tables_initializer(), name='legacy_init_op')\r\n\r\n                builder.add_meta_graph_and_variables(\r\n                    sess, [tag_constants.SERVING],\r\n                    signature_def_map={\r\n                        'predict_images':\r\n                            prediction_signature,\r\n                        signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY:\r\n                            classification_signature,\r\n                    },\r\n                    legacy_init_op=legacy_init_op)\r\n\r\n                builder.save()\r\n\r\n                print('Done exporting!')\r\n\r\nif __name__ == '__main__':\r\n    tf.app.run()\r\n\r\n```\r\n### Error Log\r\n```\r\nExtracting MNIST_data/train-images-idx3-ubyte.gz\r\nExtracting MNIST_data/train-labels-idx1-ubyte.gz\r\nExtracting MNIST_data/t10k-images-idx3-ubyte.gz\r\nExtracting MNIST_data/t10k-labels-idx1-ubyte.gz\r\nWARNING:tensorflow:From distribute_mnist_serving_model.py:85: index_to_string (from tensorflow.contrib.lookup.lookup_ops) is deprecated and will be removed after 2017-01-07.\r\nInstructions for updating:\r\nThis op will be removed after the deprecation date. Please switch to index_to_string_table_from_tensor and call the lookup method of the returned table.\r\n('Exporting trained model to', 'model/1')\r\n2017-07-17 17:30:10.703382: I tensorflow/core/distributed_runtime/master_session.cc:999] Start master session e5aa2c66bff69f11 with config:\r\nglobal step: 0 , accuracy:0.469999998808\r\ntraining accuracy 0.5701\r\nDone training!\r\nTraceback (most recent call last):\r\n  File \"distribute_mnist_serving_model.py\", line 176, in <module>\r\n    tf.app.run()\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/platform/app.py\", line 48, in run\r\n    _sys.exit(main(_sys.argv[:1] + flags_passthrough))\r\n  File \"distribute_mnist_serving_model.py\", line 58, in main\r\n    train(server, cluster)\r\n  File \"distribute_mnist_serving_model.py\", line 159, in train\r\n    legacy_init_op=legacy_init_op)\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/saved_model/builder_impl.py\", line 362, in add_meta_graph_and_variables\r\n    saver.save(sess, variables_path, write_meta_graph=False, write_state=False)\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1488, in save\r\n    raise exc\r\ntensorflow.python.framework.errors_impl.NotFoundError: model/1/variables/variables_temp_962a99f708244380a378c7e2218c6865\r\n         [[Node: save_1/SaveV2 = SaveV2[dtypes=[DT_FLOAT, DT_FLOAT, DT_INT32], _device=\"/job:ps/replica:0/task:0/cpu:0\"](save_1/ShardedFilename, save_1/SaveV2/tensor_names, save_1/SaveV2/shape_and_slices, Variable, Variable_1, Variable_2)]]\r\nCaused by op u'save_1/SaveV2', defined at:\r\n  File \"distribute_mnist_serving_model.py\", line 176, in <module>\r\n    tf.app.run()\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/platform/app.py\", line 48, in run\r\n    _sys.exit(main(_sys.argv[:1] + flags_passthrough))\r\n  File \"distribute_mnist_serving_model.py\", line 58, in main\r\n    train(server, cluster)\r\n  File \"distribute_mnist_serving_model.py\", line 159, in train\r\n    legacy_init_op=legacy_init_op)\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/saved_model/builder_impl.py\", line 356, in add_meta_graph_and_variables\r\n    allow_empty=True)\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1139, in __init__\r\n    self.build()\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 1170, in build\r\n    restore_sequentially=self._restore_sequentially)\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 685, in build\r\n    save_tensor = self._AddShardedSaveOps(filename_tensor, per_device)\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 361, in _AddShardedSaveOps\r\n    return self._AddShardedSaveOpsForV2(filename_tensor, per_device)\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 335, in _AddShardedSaveOpsForV2\r\n    sharded_saves.append(self._AddSaveOps(sharded_filename, saveables))\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 276, in _AddSaveOps\r\n    save = self.save_op(filename_tensor, saveables)\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/training/saver.py\", line 219, in save_op\r\n    tensors)\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 745, in save_v2\r\n    tensors=tensors, name=name)\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 767, in apply_op\r\n    op_def=op_def)\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 2506, in create_op\r\n    original_op=self._default_original_op, op_def=op_def)\r\n  File \"/usr/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1269, in __init__\r\n    self._traceback = _extract_stack()\r\nNotFoundError (see above for traceback): model/1/variables/variables_temp_962a99f708244380a378c7e2218c6865\r\n         [[Node: save_1/SaveV2 = SaveV2[dtypes=[DT_FLOAT, DT_FLOAT, DT_INT32], _device=\"/job:ps/replica:0/task:0/cpu:0\"](save_1/ShardedFilename, save_1/SaveV2/tensor_names, save_1/SaveV2/shape_and_slices, Variable, Variable_1, Variable_2)]]\r\n```\r\n\r\n### The Correct Log\r\n```\r\nExtracting MNIST_data/train-images-idx3-ubyte.gz\r\nExtracting MNIST_data/train-labels-idx1-ubyte.gz\r\nExtracting MNIST_data/t10k-images-idx3-ubyte.gz\r\nExtracting MNIST_data/t10k-labels-idx1-ubyte.gz\r\nWARNING:tensorflow:From distribute_mnist_serving_model.py:83: index_to_string (from tensorflow.contrib.lookup.lookup_ops) is deprecated and will be removed after 2017-01-07.\r\nInstructions for updating:\r\nThis op will be removed after the deprecation date. Please switch to index_to_string_table_from_tensor and call the lookup method of the returned table.\r\n('Exporting trained model to', 'model/1')\r\n2017-07-17 17:38:46.714706: I tensorflow/core/distributed_runtime/master_session.cc:999] Start master session 2618b797d2ef99b4 with config:\r\nglobal step: 0 , accuracy:0.479999989271\r\ntraining accuracy 0.5513\r\nDone training!\r\nDone exporting!\r\n```\r\n\r\n### Exact command to reproduce\r\n\r\nSituation One: work well\r\n```\r\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,A:2224 --job_name=ps --task_index=0\r\n\r\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,A:2224 --job_name=worker --task_index=0\r\n\r\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,A:2224 --job_name=worker --task_index=1\r\n```\r\n\r\nSituation Two: can't work\r\n```\r\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2222,C:2222 --job_name=ps --task_index=0\r\n\r\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2222,C:2222 --job_name=worker --task_index=0\r\n\r\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2222,C:2222 --job_name=worker --task_index=1\r\n```\r\n\r\nSituation Three: work well\r\n```\r\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,B:2222 --job_name=ps --task_index=0\r\n\r\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,B:2222 --job_name=worker --task_index=0\r\n\r\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=A:2223,B:2222 --job_name=worker --task_index=1\r\n```\r\n\r\nSituation Four: work well\r\n```\r\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2223,B:2222 --job_name=ps --task_index=0\r\n\r\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2223,B:2222 --job_name=worker --task_index=0\r\n\r\npython distribute_mnist_serving_model.py --ps_hosts=A:2222 --worker_hosts=B:2223,B:2222 --job_name=worker --task_index=1\r\n```\r\n\r\nI Don't know what cause this problem. how can i fix this issue? thanks a lot."}