{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/309457981", "html_url": "https://github.com/tensorflow/tensorflow/issues/10659#issuecomment-309457981", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10659", "id": 309457981, "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTQ1Nzk4MQ==", "user": {"login": "Scitator", "id": 7606451, "node_id": "MDQ6VXNlcjc2MDY0NTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7606451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Scitator", "html_url": "https://github.com/Scitator", "followers_url": "https://api.github.com/users/Scitator/followers", "following_url": "https://api.github.com/users/Scitator/following{/other_user}", "gists_url": "https://api.github.com/users/Scitator/gists{/gist_id}", "starred_url": "https://api.github.com/users/Scitator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Scitator/subscriptions", "organizations_url": "https://api.github.com/users/Scitator/orgs", "repos_url": "https://api.github.com/users/Scitator/repos", "events_url": "https://api.github.com/users/Scitator/events{/privacy}", "received_events_url": "https://api.github.com/users/Scitator/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-19T14:32:27Z", "updated_at": "2017-06-19T14:32:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=26038604\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/adakum\">@adakum</a> Sorry, have released the <a href=\"https://github.com/Scitator/YATS2S\">repo</a> yesterday :)<br>\nThe code:</p>\n<pre><code>if isinstance(encoder_fw_state, rnn.LSTMStateTuple):  # LstmCell\n    state_c = tf.concat(\n        (encoder_fw_state.c, encoder_bw_state.c), 1, name=\"bidirectional_concat_c\")\n    state_h = tf.concat(\n        (encoder_fw_state.h, encoder_bw_state.h), 1, name=\"bidirectional_concat_h\")\n    self.state = rnn.LSTMStateTuple(c=state_c, h=state_h)\nelif isinstance(encoder_fw_state, tuple) \\\n        and isinstance(encoder_fw_state[0], rnn.LSTMStateTuple):  # MultiLstmCell\n    self.state = tuple(map(\n        lambda fw_state, bw_state: rnn.LSTMStateTuple(\n            c=tf.concat((fw_state.c, bw_state.c), 1,\n                        name=\"bidirectional_concat_c\"),\n            h=tf.concat((fw_state.h, bw_state.h), 1,\n                        name=\"bidirectional_concat_h\")),\n        encoder_fw_state, encoder_bw_state))\nelse:\n    self.state = tf.concat(\n        (encoder_fw_state, encoder_bw_state), 1,\n        name=\"bidirectional_state_concat\")\n</code></pre>\n<p><a href=\"https://github.com/Scitator/YATS2S/blob/versions/tf_1.2/seq2seq/rnn_encoder.py#L91\">working link</a></p>", "body_text": "@adakum Sorry, have released the repo yesterday :)\nThe code:\nif isinstance(encoder_fw_state, rnn.LSTMStateTuple):  # LstmCell\n    state_c = tf.concat(\n        (encoder_fw_state.c, encoder_bw_state.c), 1, name=\"bidirectional_concat_c\")\n    state_h = tf.concat(\n        (encoder_fw_state.h, encoder_bw_state.h), 1, name=\"bidirectional_concat_h\")\n    self.state = rnn.LSTMStateTuple(c=state_c, h=state_h)\nelif isinstance(encoder_fw_state, tuple) \\\n        and isinstance(encoder_fw_state[0], rnn.LSTMStateTuple):  # MultiLstmCell\n    self.state = tuple(map(\n        lambda fw_state, bw_state: rnn.LSTMStateTuple(\n            c=tf.concat((fw_state.c, bw_state.c), 1,\n                        name=\"bidirectional_concat_c\"),\n            h=tf.concat((fw_state.h, bw_state.h), 1,\n                        name=\"bidirectional_concat_h\")),\n        encoder_fw_state, encoder_bw_state))\nelse:\n    self.state = tf.concat(\n        (encoder_fw_state, encoder_bw_state), 1,\n        name=\"bidirectional_state_concat\")\n\nworking link", "body": "@adakum Sorry, have released the [repo](https://github.com/Scitator/YATS2S) yesterday :)\r\nThe code:\r\n```\r\nif isinstance(encoder_fw_state, rnn.LSTMStateTuple):  # LstmCell\r\n    state_c = tf.concat(\r\n        (encoder_fw_state.c, encoder_bw_state.c), 1, name=\"bidirectional_concat_c\")\r\n    state_h = tf.concat(\r\n        (encoder_fw_state.h, encoder_bw_state.h), 1, name=\"bidirectional_concat_h\")\r\n    self.state = rnn.LSTMStateTuple(c=state_c, h=state_h)\r\nelif isinstance(encoder_fw_state, tuple) \\\r\n        and isinstance(encoder_fw_state[0], rnn.LSTMStateTuple):  # MultiLstmCell\r\n    self.state = tuple(map(\r\n        lambda fw_state, bw_state: rnn.LSTMStateTuple(\r\n            c=tf.concat((fw_state.c, bw_state.c), 1,\r\n                        name=\"bidirectional_concat_c\"),\r\n            h=tf.concat((fw_state.h, bw_state.h), 1,\r\n                        name=\"bidirectional_concat_h\")),\r\n        encoder_fw_state, encoder_bw_state))\r\nelse:\r\n    self.state = tf.concat(\r\n        (encoder_fw_state, encoder_bw_state), 1,\r\n        name=\"bidirectional_state_concat\")\r\n```\r\n[working link](https://github.com/Scitator/YATS2S/blob/versions/tf_1.2/seq2seq/rnn_encoder.py#L91)"}