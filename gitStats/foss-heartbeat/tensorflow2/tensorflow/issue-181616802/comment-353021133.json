{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/353021133", "html_url": "https://github.com/tensorflow/tensorflow/issues/4814#issuecomment-353021133", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4814", "id": 353021133, "node_id": "MDEyOklzc3VlQ29tbWVudDM1MzAyMTEzMw==", "user": {"login": "shoeffner", "id": 1836815, "node_id": "MDQ6VXNlcjE4MzY4MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1836815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoeffner", "html_url": "https://github.com/shoeffner", "followers_url": "https://api.github.com/users/shoeffner/followers", "following_url": "https://api.github.com/users/shoeffner/following{/other_user}", "gists_url": "https://api.github.com/users/shoeffner/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoeffner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoeffner/subscriptions", "organizations_url": "https://api.github.com/users/shoeffner/orgs", "repos_url": "https://api.github.com/users/shoeffner/repos", "events_url": "https://api.github.com/users/shoeffner/events{/privacy}", "received_events_url": "https://api.github.com/users/shoeffner/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-20T10:07:44Z", "updated_at": "2017-12-20T10:07:44Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=34502974\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/studentSam0000\">@studentSam0000</a> You might want to take a look at this <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/slim#evaluation-loop\">tf slim example</a>, where they already use some metrics. However, if you really want to reset your streaming accuracy, you could probably use a hook in which you call the reset op, something along these lines:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">ResetHook</span>(<span class=\"pl-e\">tf</span>.<span class=\"pl-e\">train</span>.<span class=\"pl-e\">SessionRunHook</span>):\n    <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span>Hook to perform reset metrics every N steps.<span class=\"pl-pds\">\"\"\"</span></span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">reset_op</span>, <span class=\"pl-smi\">every_step</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">50</span>):\n        <span class=\"pl-c1\">self</span>.reset_op <span class=\"pl-k\">=</span> reset_op\n        <span class=\"pl-c1\">self</span>.every_step <span class=\"pl-k\">=</span> every_step\n        <span class=\"pl-c1\">self</span>.reset <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">begin</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-c1\">self</span>._global_step_tensor <span class=\"pl-k\">=</span> tf.train.get_global_step()\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>._global_step_tensor <span class=\"pl-k\">is</span> <span class=\"pl-c1\">None</span>:\n            <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">RuntimeError</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Global step should be created to use ResetHook.<span class=\"pl-pds\">\"</span></span>)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">before_run</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">run_context</span>):\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.reset:\n            <span class=\"pl-k\">return</span> tf.train.SessionRunArgs(<span class=\"pl-v\">fetches</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>.reset_op)\n        <span class=\"pl-k\">return</span> tf.train.SessionRunArgs(<span class=\"pl-v\">fetches</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">self</span>._global_step_tensor)\n\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">after_run</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">run_context</span>, <span class=\"pl-smi\">run_values</span>):\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">self</span>.reset:\n            <span class=\"pl-c1\">self</span>.reset <span class=\"pl-k\">=</span> <span class=\"pl-c1\">False</span>\n            <span class=\"pl-k\">return</span>\n        global_step <span class=\"pl-k\">=</span> run_values.results\n        <span class=\"pl-k\">if</span> global_step <span class=\"pl-k\">%</span> <span class=\"pl-c1\">self</span>.every_step <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>:\n            <span class=\"pl-c1\">self</span>.reset <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span></pre></div>\n<p>Using with the snippet above (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"181616802\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/4814\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/4814/hovercard?comment_id=314801758&amp;comment_type=issue_comment\" href=\"https://github.com/tensorflow/tensorflow/issues/4814#issuecomment-314801758\">#4814 (comment)</a>) you can then build something like this:</p>\n<div class=\"highlight highlight-source-python\"><pre>epoch_loss, epoch_loss_update, epoch_loss_reset <span class=\"pl-k\">=</span> create_reset_metric(\n                    tf.contrib.metrics.streaming_mean_squared_error, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>epoch_loss<span class=\"pl-pds\">'</span></span>,\n                    <span class=\"pl-v\">predictions</span><span class=\"pl-k\">=</span>output, <span class=\"pl-v\">labels</span><span class=\"pl-k\">=</span>target)\n\nreset_hook <span class=\"pl-k\">=</span> ResetHook(epoch_loss_reset, <span class=\"pl-c1\">10</span>)\n\ntf.contrib.slim.evaluation.evaluation_loop(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>local<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>checkpoints<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>logs<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">num_evals</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>, \n    <span class=\"pl-c1\">...</span>, <span class=\"pl-v\">hooks</span><span class=\"pl-k\">=</span>[reset_hook])</pre></div>\n<p>I haven't tested the hook, but I used a similar hook to <a href=\"https://github.com/shoeffner/ann3depth/blob/baa3455f873fe1a77b1132af410d285cf81b07e5/src/tfhelper.py#L192-L249\">perform traces</a> a while ago and just adjusted that one a little bit, but you should get the idea of how it works.</p>", "body_text": "@studentSam0000 You might want to take a look at this tf slim example, where they already use some metrics. However, if you really want to reset your streaming accuracy, you could probably use a hook in which you call the reset op, something along these lines:\nclass ResetHook(tf.train.SessionRunHook):\n    \"\"\"Hook to perform reset metrics every N steps.\"\"\"\n\n    def __init__(self, reset_op, every_step=50):\n        self.reset_op = reset_op\n        self.every_step = every_step\n        self.reset = False\n\n    def begin(self):\n        self._global_step_tensor = tf.train.get_global_step()\n        if self._global_step_tensor is None:\n            raise RuntimeError(\"Global step should be created to use ResetHook.\")\n\n    def before_run(self, run_context):\n        if self.reset:\n            return tf.train.SessionRunArgs(fetches=self.reset_op)\n        return tf.train.SessionRunArgs(fetches=self._global_step_tensor)\n\n    def after_run(self, run_context, run_values):\n        if self.reset:\n            self.reset = False\n            return\n        global_step = run_values.results\n        if global_step % self.every_step == 0:\n            self.reset = True\nUsing with the snippet above (#4814 (comment)) you can then build something like this:\nepoch_loss, epoch_loss_update, epoch_loss_reset = create_reset_metric(\n                    tf.contrib.metrics.streaming_mean_squared_error, 'epoch_loss',\n                    predictions=output, labels=target)\n\nreset_hook = ResetHook(epoch_loss_reset, 10)\n\ntf.contrib.slim.evaluation.evaluation_loop('local', 'checkpoints', 'logs', num_evals=1000, \n    ..., hooks=[reset_hook])\nI haven't tested the hook, but I used a similar hook to perform traces a while ago and just adjusted that one a little bit, but you should get the idea of how it works.", "body": "@studentSam0000 You might want to take a look at this [tf slim example](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/slim#evaluation-loop), where they already use some metrics. However, if you really want to reset your streaming accuracy, you could probably use a hook in which you call the reset op, something along these lines:\r\n\r\n```python\r\nclass ResetHook(tf.train.SessionRunHook):\r\n    \"\"\"Hook to perform reset metrics every N steps.\"\"\"\r\n\r\n    def __init__(self, reset_op, every_step=50):\r\n        self.reset_op = reset_op\r\n        self.every_step = every_step\r\n        self.reset = False\r\n\r\n    def begin(self):\r\n        self._global_step_tensor = tf.train.get_global_step()\r\n        if self._global_step_tensor is None:\r\n            raise RuntimeError(\"Global step should be created to use ResetHook.\")\r\n\r\n    def before_run(self, run_context):\r\n        if self.reset:\r\n            return tf.train.SessionRunArgs(fetches=self.reset_op)\r\n        return tf.train.SessionRunArgs(fetches=self._global_step_tensor)\r\n\r\n    def after_run(self, run_context, run_values):\r\n        if self.reset:\r\n            self.reset = False\r\n            return\r\n        global_step = run_values.results\r\n        if global_step % self.every_step == 0:\r\n            self.reset = True\r\n```\r\n\r\nUsing with the snippet above (https://github.com/tensorflow/tensorflow/issues/4814#issuecomment-314801758) you can then build something like this:\r\n\r\n```python\r\nepoch_loss, epoch_loss_update, epoch_loss_reset = create_reset_metric(\r\n                    tf.contrib.metrics.streaming_mean_squared_error, 'epoch_loss',\r\n                    predictions=output, labels=target)\r\n\r\nreset_hook = ResetHook(epoch_loss_reset, 10)\r\n\r\ntf.contrib.slim.evaluation.evaluation_loop('local', 'checkpoints', 'logs', num_evals=1000, \r\n    ..., hooks=[reset_hook])\r\n```\r\n\r\nI haven't tested the hook, but I used a similar hook to [perform traces](https://github.com/shoeffner/ann3depth/blob/baa3455f873fe1a77b1132af410d285cf81b07e5/src/tfhelper.py#L192-L249) a while ago and just adjusted that one a little bit, but you should get the idea of how it works."}