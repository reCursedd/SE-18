{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/314801758", "html_url": "https://github.com/tensorflow/tensorflow/issues/4814#issuecomment-314801758", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4814", "id": 314801758, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDgwMTc1OA==", "user": {"login": "shoeffner", "id": 1836815, "node_id": "MDQ6VXNlcjE4MzY4MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1836815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoeffner", "html_url": "https://github.com/shoeffner", "followers_url": "https://api.github.com/users/shoeffner/followers", "following_url": "https://api.github.com/users/shoeffner/following{/other_user}", "gists_url": "https://api.github.com/users/shoeffner/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoeffner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoeffner/subscriptions", "organizations_url": "https://api.github.com/users/shoeffner/orgs", "repos_url": "https://api.github.com/users/shoeffner/repos", "events_url": "https://api.github.com/users/shoeffner/events{/privacy}", "received_events_url": "https://api.github.com/users/shoeffner/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-12T15:15:04Z", "updated_at": "2017-07-13T15:17:31Z", "author_association": "NONE", "body_html": "<p>Concluding the suggestions by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4586769\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/AshishBora\">@AshishBora</a> (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"181616802\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/4814\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/4814/hovercard?comment_id=254197646&amp;comment_type=issue_comment\" href=\"https://github.com/tensorflow/tensorflow/issues/4814#issuecomment-254197646\">#4814 (comment)</a>) and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=21178140\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nathansilberman\">@nathansilberman</a> (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"181616802\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/4814\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/4814/hovercard?comment_id=305688961&amp;comment_type=issue_comment\" href=\"https://github.com/tensorflow/tensorflow/issues/4814#issuecomment-305688961\">#4814 (comment)</a>) I came up with this function to create all three ops with one call, while keeping the variables encapsulated (fixed a side effect issue <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=3627551\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/untom\">@untom</a> mentioned (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"181616802\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/4814\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/4814/hovercard?comment_id=314851485&amp;comment_type=issue_comment\" href=\"https://github.com/tensorflow/tensorflow/issues/4814#issuecomment-314851485\">#4814 (comment)</a>)):</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">create_reset_metric</span>(<span class=\"pl-smi\">metric</span>, <span class=\"pl-smi\">scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>reset_metrics<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">metric_args</span>):\n  <span class=\"pl-k\">with</span> tf.variable_scope(scope) <span class=\"pl-k\">as</span> scope:\n    metric_op, update_op <span class=\"pl-k\">=</span> metric(<span class=\"pl-k\">**</span>metric_args)\n    <span class=\"pl-c1\">vars</span> <span class=\"pl-k\">=</span> tf.contrib.framework.get_variables(\n                 scope, <span class=\"pl-v\">collection</span><span class=\"pl-k\">=</span>tf.GraphKeys.<span class=\"pl-c1\">LOCAL_VARIABLES</span>)\n    reset_op <span class=\"pl-k\">=</span> tf.variables_initializer(<span class=\"pl-c1\">vars</span>)\n  <span class=\"pl-k\">return</span> metric_op, update_op, reset_op</pre></div>\n<p>An example to create the operations inside the graph is then like this:</p>\n<div class=\"highlight highlight-source-python\"><pre>epoch_loss, epoch_loss_update, epoch_loss_reset <span class=\"pl-k\">=</span> create_reset_metric(\n                    tf.contrib.metrics.streaming_mean_squared_error, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>epoch_loss<span class=\"pl-pds\">'</span></span>,\n                    <span class=\"pl-v\">predictions</span><span class=\"pl-k\">=</span>output, <span class=\"pl-v\">labels</span><span class=\"pl-k\">=</span>target)</pre></div>", "body_text": "Concluding the suggestions by @AshishBora (#4814 (comment)) and @nathansilberman (#4814 (comment)) I came up with this function to create all three ops with one call, while keeping the variables encapsulated (fixed a side effect issue @untom mentioned (#4814 (comment))):\ndef create_reset_metric(metric, scope='reset_metrics', **metric_args):\n  with tf.variable_scope(scope) as scope:\n    metric_op, update_op = metric(**metric_args)\n    vars = tf.contrib.framework.get_variables(\n                 scope, collection=tf.GraphKeys.LOCAL_VARIABLES)\n    reset_op = tf.variables_initializer(vars)\n  return metric_op, update_op, reset_op\nAn example to create the operations inside the graph is then like this:\nepoch_loss, epoch_loss_update, epoch_loss_reset = create_reset_metric(\n                    tf.contrib.metrics.streaming_mean_squared_error, 'epoch_loss',\n                    predictions=output, labels=target)", "body": "Concluding the suggestions by @AshishBora (https://github.com/tensorflow/tensorflow/issues/4814#issuecomment-254197646) and @nathansilberman (https://github.com/tensorflow/tensorflow/issues/4814#issuecomment-305688961) I came up with this function to create all three ops with one call, while keeping the variables encapsulated (fixed a side effect issue @untom mentioned (https://github.com/tensorflow/tensorflow/issues/4814#issuecomment-314851485)):\r\n\r\n```python\r\ndef create_reset_metric(metric, scope='reset_metrics', **metric_args):\r\n  with tf.variable_scope(scope) as scope:\r\n    metric_op, update_op = metric(**metric_args)\r\n    vars = tf.contrib.framework.get_variables(\r\n                 scope, collection=tf.GraphKeys.LOCAL_VARIABLES)\r\n    reset_op = tf.variables_initializer(vars)\r\n  return metric_op, update_op, reset_op\r\n```\r\n\r\nAn example to create the operations inside the graph is then like this:\r\n\r\n```python\r\nepoch_loss, epoch_loss_update, epoch_loss_reset = create_reset_metric(\r\n                    tf.contrib.metrics.streaming_mean_squared_error, 'epoch_loss',\r\n                    predictions=output, labels=target)\r\n```"}