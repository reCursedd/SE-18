{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/327414391", "html_url": "https://github.com/tensorflow/tensorflow/issues/4814#issuecomment-327414391", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4814", "id": 327414391, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNzQxNDM5MQ==", "user": {"login": "llvim", "id": 7426917, "node_id": "MDQ6VXNlcjc0MjY5MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/7426917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llvim", "html_url": "https://github.com/llvim", "followers_url": "https://api.github.com/users/llvim/followers", "following_url": "https://api.github.com/users/llvim/following{/other_user}", "gists_url": "https://api.github.com/users/llvim/gists{/gist_id}", "starred_url": "https://api.github.com/users/llvim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llvim/subscriptions", "organizations_url": "https://api.github.com/users/llvim/orgs", "repos_url": "https://api.github.com/users/llvim/repos", "events_url": "https://api.github.com/users/llvim/events{/privacy}", "received_events_url": "https://api.github.com/users/llvim/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-06T08:32:42Z", "updated_at": "2017-09-06T08:35:18Z", "author_association": "NONE", "body_html": "<p>what's the best practice to use this</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\npred <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">3</span>],<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32)\nlabel <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">3</span>],<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32)\nv,op <span class=\"pl-k\">=</span> tf.metrics.accuracy(pred,label)\nreset_op <span class=\"pl-k\">=</span> tf.local_variables_initializer()\n\nsess <span class=\"pl-k\">=</span> tf.InteractiveSession()\nsess.run(reset_op)\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>):\n    <span class=\"pl-c1\">print</span>(sess.run([v,op,reset_op],{pred:[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>],label:[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>]}))</pre></div>\n<p>I get</p>\n<pre><code>[0.0, 1.0, None]\n[1.0, 1.0, None]\n[0.0, 0.0, None]\n[inf, 1.0, None]\n[0.0, 1.0, None]\n[0.0, 1.0, None]\n[1.0, 1.0, None]\n[inf, inf, None]\n[0.0, 0.0, None]\n[0.0, inf, None]\n</code></pre>\n<p>I add control dependency to this</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\npred <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">3</span>],<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32)\nlabel <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">3</span>],<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.int32)\nv,op <span class=\"pl-k\">=</span> tf.metrics.accuracy(pred,label)\nreset_op <span class=\"pl-k\">=</span> tf.local_variables_initializer()\nop <span class=\"pl-k\">=</span> tf.tuple([op],<span class=\"pl-v\">control_inputs</span><span class=\"pl-k\">=</span>[reset_op])[<span class=\"pl-c1\">0</span>]\nv <span class=\"pl-k\">=</span> tf.tuple([v],<span class=\"pl-v\">control_inputs</span><span class=\"pl-k\">=</span>[op])[<span class=\"pl-c1\">0</span>]\n\nsess <span class=\"pl-k\">=</span> tf.InteractiveSession()\nsess.run(reset_op)\n<span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>):\n    <span class=\"pl-c1\">print</span>(sess.run([v],{pred:[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>],label:[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">2</span>]}))</pre></div>\n<p>results is wired too</p>\n<pre><code>[0.0]\n[1.0]\n[0.0]\n[0.0]\n[0.0]\n[inf]\n[0.0]\n[1.0]\n[1.0]\n[1.0]\n</code></pre>", "body_text": "what's the best practice to use this\nimport tensorflow as tf\n\npred = tf.placeholder(shape=[3],dtype=tf.int32)\nlabel = tf.placeholder(shape=[3],dtype=tf.int32)\nv,op = tf.metrics.accuracy(pred,label)\nreset_op = tf.local_variables_initializer()\n\nsess = tf.InteractiveSession()\nsess.run(reset_op)\nfor i in range(10):\n    print(sess.run([v,op,reset_op],{pred:[0,1,2],label:[0,1,2]}))\nI get\n[0.0, 1.0, None]\n[1.0, 1.0, None]\n[0.0, 0.0, None]\n[inf, 1.0, None]\n[0.0, 1.0, None]\n[0.0, 1.0, None]\n[1.0, 1.0, None]\n[inf, inf, None]\n[0.0, 0.0, None]\n[0.0, inf, None]\n\nI add control dependency to this\nimport tensorflow as tf\n\npred = tf.placeholder(shape=[3],dtype=tf.int32)\nlabel = tf.placeholder(shape=[3],dtype=tf.int32)\nv,op = tf.metrics.accuracy(pred,label)\nreset_op = tf.local_variables_initializer()\nop = tf.tuple([op],control_inputs=[reset_op])[0]\nv = tf.tuple([v],control_inputs=[op])[0]\n\nsess = tf.InteractiveSession()\nsess.run(reset_op)\nfor i in range(10):\n    print(sess.run([v],{pred:[0,1,2],label:[0,1,2]}))\nresults is wired too\n[0.0]\n[1.0]\n[0.0]\n[0.0]\n[0.0]\n[inf]\n[0.0]\n[1.0]\n[1.0]\n[1.0]", "body": "what's the best practice to use this\r\n\r\n```python\r\nimport tensorflow as tf\r\n\r\npred = tf.placeholder(shape=[3],dtype=tf.int32)\r\nlabel = tf.placeholder(shape=[3],dtype=tf.int32)\r\nv,op = tf.metrics.accuracy(pred,label)\r\nreset_op = tf.local_variables_initializer()\r\n\r\nsess = tf.InteractiveSession()\r\nsess.run(reset_op)\r\nfor i in range(10):\r\n    print(sess.run([v,op,reset_op],{pred:[0,1,2],label:[0,1,2]}))\r\n```\r\n\r\nI get \r\n```\r\n[0.0, 1.0, None]\r\n[1.0, 1.0, None]\r\n[0.0, 0.0, None]\r\n[inf, 1.0, None]\r\n[0.0, 1.0, None]\r\n[0.0, 1.0, None]\r\n[1.0, 1.0, None]\r\n[inf, inf, None]\r\n[0.0, 0.0, None]\r\n[0.0, inf, None]\r\n```\r\nI add control dependency to this \r\n```python\r\nimport tensorflow as tf\r\n\r\npred = tf.placeholder(shape=[3],dtype=tf.int32)\r\nlabel = tf.placeholder(shape=[3],dtype=tf.int32)\r\nv,op = tf.metrics.accuracy(pred,label)\r\nreset_op = tf.local_variables_initializer()\r\nop = tf.tuple([op],control_inputs=[reset_op])[0]\r\nv = tf.tuple([v],control_inputs=[op])[0]\r\n\r\nsess = tf.InteractiveSession()\r\nsess.run(reset_op)\r\nfor i in range(10):\r\n    print(sess.run([v],{pred:[0,1,2],label:[0,1,2]}))\r\n```\r\nresults is wired too\r\n```\r\n[0.0]\r\n[1.0]\r\n[0.0]\r\n[0.0]\r\n[0.0]\r\n[inf]\r\n[0.0]\r\n[1.0]\r\n[1.0]\r\n[1.0]\r\n```\r\n"}