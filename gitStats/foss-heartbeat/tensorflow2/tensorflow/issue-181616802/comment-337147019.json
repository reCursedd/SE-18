{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/337147019", "html_url": "https://github.com/tensorflow/tensorflow/issues/4814#issuecomment-337147019", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/4814", "id": 337147019, "node_id": "MDEyOklzc3VlQ29tbWVudDMzNzE0NzAxOQ==", "user": {"login": "bsautermeister", "id": 2537736, "node_id": "MDQ6VXNlcjI1Mzc3MzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2537736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bsautermeister", "html_url": "https://github.com/bsautermeister", "followers_url": "https://api.github.com/users/bsautermeister/followers", "following_url": "https://api.github.com/users/bsautermeister/following{/other_user}", "gists_url": "https://api.github.com/users/bsautermeister/gists{/gist_id}", "starred_url": "https://api.github.com/users/bsautermeister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bsautermeister/subscriptions", "organizations_url": "https://api.github.com/users/bsautermeister/orgs", "repos_url": "https://api.github.com/users/bsautermeister/repos", "events_url": "https://api.github.com/users/bsautermeister/events{/privacy}", "received_events_url": "https://api.github.com/users/bsautermeister/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-17T07:46:51Z", "updated_at": "2017-10-17T08:07:38Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1836815\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/shoeffner\">@shoeffner</a> : I'm not sure if this has changed in the last version 1.3 of TF, but 'vars' is an empty list when I use your snippet above.</p>\n<p>To be more precise, I always run into the exception of my code, which is based on your proposal:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">MetricOp</span>(<span class=\"pl-c1\">object</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__init__</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>, <span class=\"pl-smi\">name</span>, <span class=\"pl-smi\">value</span>, <span class=\"pl-smi\">update</span>, <span class=\"pl-smi\">reset</span>):\n        <span class=\"pl-c1\">self</span>._name <span class=\"pl-k\">=</span> name\n        <span class=\"pl-c1\">self</span>._value <span class=\"pl-k\">=</span> value\n        <span class=\"pl-c1\">self</span>._update <span class=\"pl-k\">=</span> update\n        <span class=\"pl-c1\">self</span>._reset <span class=\"pl-k\">=</span> reset\n\n    <span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">name</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._name\n\n    <span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">value</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._value\n\n    <span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">update</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._update\n\n    <span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">reset</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">self</span>._reset\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">create_metric</span>(<span class=\"pl-smi\">scope</span>: <span class=\"pl-c1\">str</span>, <span class=\"pl-smi\">metric</span>: <span class=\"pl-c1\">callable</span>, <span class=\"pl-k\">**</span><span class=\"pl-smi\">metric_args</span>) -&gt; MetricOp:\n    <span class=\"pl-k\">with</span> tf.variable_scope(scope) <span class=\"pl-k\">as</span> scope:\n        metric_op, update_op <span class=\"pl-k\">=</span> metric(<span class=\"pl-k\">**</span>metric_args)\n        scope_vars <span class=\"pl-k\">=</span> tf.contrib.framework.get_variables(\n            scope, <span class=\"pl-v\">collection</span><span class=\"pl-k\">=</span>tf.GraphKeys.<span class=\"pl-c1\">LOCAL_VARIABLES</span>)\n\n        <span class=\"pl-k\">if</span> <span class=\"pl-c1\">len</span>(scope_vars) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>:\n            <span class=\"pl-k\">raise</span> <span class=\"pl-c1\">Exception</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No local variables found.<span class=\"pl-pds\">\"</span></span>)\n\n        reset_op <span class=\"pl-k\">=</span> tf.variables_initializer(scope_vars)\n    <span class=\"pl-k\">return</span> MetricOp(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>MetricOp<span class=\"pl-pds\">'</span></span>, metric_op, update_op, reset_op)</pre></div>\n<p>Sorry, could fix that by myself. It was caused by wrapping my coll to this function with a name_scope:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.name_scope(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Metrics<span class=\"pl-pds\">'</span></span>):  <span class=\"pl-c\"><span class=\"pl-c\">#</span> &lt;---</span>\n    targets <span class=\"pl-k\">=</span> tf.argmax(y, <span class=\"pl-c1\">1</span>)\n    accuracy_op <span class=\"pl-k\">=</span> metrics.create_metric(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Accuracy<span class=\"pl-pds\">\"</span></span>, tf.metrics.accuracy,\n                                        <span class=\"pl-v\">labels</span><span class=\"pl-k\">=</span>targets, <span class=\"pl-v\">predictions</span><span class=\"pl-k\">=</span>model.prediction_op)\n    precision_op <span class=\"pl-k\">=</span> metrics.create_metric(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Precision<span class=\"pl-pds\">\"</span></span>, tf.metrics.precision,\n                                         <span class=\"pl-v\">labels</span><span class=\"pl-k\">=</span>targets, <span class=\"pl-v\">predictions</span><span class=\"pl-k\">=</span>model.prediction_op)</pre></div>", "body_text": "@shoeffner : I'm not sure if this has changed in the last version 1.3 of TF, but 'vars' is an empty list when I use your snippet above.\nTo be more precise, I always run into the exception of my code, which is based on your proposal:\nclass MetricOp(object):\n    def __init__(self, name, value, update, reset):\n        self._name = name\n        self._value = value\n        self._update = update\n        self._reset = reset\n\n    @property\n    def name(self):\n        return self._name\n\n    @property\n    def value(self):\n        return self._value\n\n    @property\n    def update(self):\n        return self._update\n\n    @property\n    def reset(self):\n        return self._reset\n\n\ndef create_metric(scope: str, metric: callable, **metric_args) -> MetricOp:\n    with tf.variable_scope(scope) as scope:\n        metric_op, update_op = metric(**metric_args)\n        scope_vars = tf.contrib.framework.get_variables(\n            scope, collection=tf.GraphKeys.LOCAL_VARIABLES)\n\n        if len(scope_vars) == 0:\n            raise Exception(\"No local variables found.\")\n\n        reset_op = tf.variables_initializer(scope_vars)\n    return MetricOp('MetricOp', metric_op, update_op, reset_op)\nSorry, could fix that by myself. It was caused by wrapping my coll to this function with a name_scope:\nwith tf.name_scope('Metrics'):  # <---\n    targets = tf.argmax(y, 1)\n    accuracy_op = metrics.create_metric(\"Accuracy\", tf.metrics.accuracy,\n                                        labels=targets, predictions=model.prediction_op)\n    precision_op = metrics.create_metric(\"Precision\", tf.metrics.precision,\n                                         labels=targets, predictions=model.prediction_op)", "body": "@shoeffner : I'm not sure if this has changed in the last version 1.3 of TF, but 'vars' is an empty list when I use your snippet above.\r\n\r\nTo be more precise, I always run into the exception of my code, which is based on your proposal:\r\n\r\n```python\r\nclass MetricOp(object):\r\n    def __init__(self, name, value, update, reset):\r\n        self._name = name\r\n        self._value = value\r\n        self._update = update\r\n        self._reset = reset\r\n\r\n    @property\r\n    def name(self):\r\n        return self._name\r\n\r\n    @property\r\n    def value(self):\r\n        return self._value\r\n\r\n    @property\r\n    def update(self):\r\n        return self._update\r\n\r\n    @property\r\n    def reset(self):\r\n        return self._reset\r\n\r\n\r\ndef create_metric(scope: str, metric: callable, **metric_args) -> MetricOp:\r\n    with tf.variable_scope(scope) as scope:\r\n        metric_op, update_op = metric(**metric_args)\r\n        scope_vars = tf.contrib.framework.get_variables(\r\n            scope, collection=tf.GraphKeys.LOCAL_VARIABLES)\r\n\r\n        if len(scope_vars) == 0:\r\n            raise Exception(\"No local variables found.\")\r\n\r\n        reset_op = tf.variables_initializer(scope_vars)\r\n    return MetricOp('MetricOp', metric_op, update_op, reset_op)\r\n```\r\n\r\nSorry, could fix that by myself. It was caused by wrapping my coll to this function with a name_scope:\r\n\r\n```python\r\nwith tf.name_scope('Metrics'):  # <---\r\n    targets = tf.argmax(y, 1)\r\n    accuracy_op = metrics.create_metric(\"Accuracy\", tf.metrics.accuracy,\r\n                                        labels=targets, predictions=model.prediction_op)\r\n    precision_op = metrics.create_metric(\"Precision\", tf.metrics.precision,\r\n                                         labels=targets, predictions=model.prediction_op)\r\n```"}