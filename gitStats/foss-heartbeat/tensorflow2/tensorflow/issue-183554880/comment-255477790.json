{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/255477790", "html_url": "https://github.com/tensorflow/tensorflow/pull/5018#issuecomment-255477790", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5018", "id": 255477790, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTQ3Nzc5MA==", "user": {"login": "DrMarcII", "id": 4109465, "node_id": "MDQ6VXNlcjQxMDk0NjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/4109465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMarcII", "html_url": "https://github.com/DrMarcII", "followers_url": "https://api.github.com/users/DrMarcII/followers", "following_url": "https://api.github.com/users/DrMarcII/following{/other_user}", "gists_url": "https://api.github.com/users/DrMarcII/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMarcII/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMarcII/subscriptions", "organizations_url": "https://api.github.com/users/DrMarcII/orgs", "repos_url": "https://api.github.com/users/DrMarcII/repos", "events_url": "https://api.github.com/users/DrMarcII/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMarcII/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-21T22:12:29Z", "updated_at": "2016-10-21T22:12:29Z", "author_association": "NONE", "body_html": "<blockquote>\n<ol>\n<li>No git_repository()</li>\n</ol>\n</blockquote>\n<p>Done.</p>\n<blockquote>\n<ol>\n<li>No bind()</li>\n</ol>\n</blockquote>\n<p>Done.</p>\n<blockquote>\n<ol>\n<li>External URLs can't be uploaded to servers blocked by a certain firewall. Otherwise we'll get a ton of issues.</li>\n</ol>\n</blockquote>\n<p>We should be able to take care of this however we solve the same problem for other dependencies.</p>\n<blockquote>\n<ol>\n<li>Make available in //third_party/bazel_rules/rules_webtesting because we'd like to use this as our testing solution both internally and externally.</li>\n</ol>\n</blockquote>\n<p>Do you mean in Google? I am planning on pulling this in 2017Q1 and using it as the basis for web testing in Google.</p>\n<blockquote>\n<ol>\n<li>We would like to use statically compiled Headless Chromium without any dependencies[1] aren't listed in aptitude search ~prequired -F\"%p\" or rigorously specified by Bazel. Otherwise we have to deal with all these difficult to troubleshoot issues where people complain about things not working. Right now chrome-precise64.zip isn't hermetically sealed and depends on 74 .so files from the system. We'd rather pay the price of downloading another 100MB if it means it's guaranteed to work.</li>\n</ol>\n</blockquote>\n<p>I have successfully got this working for Linux. Currently headless_shell is not supported on MacOS, but I am thinking it may not be as much of an issue there (Mac OS has a more standardized configuration, so using regular Chrome/Chromium may be okay).</p>\n<blockquote>\n<ol>\n<li>If it hasn't been designed this way already, the build needs to guarantee that if we don't link a particular browser in the browsers = [...] list, then we won't pay the price of downloading it. We only want to pay for the functionality we're using.</li>\n</ol>\n</blockquote>\n<p>This is already true.</p>\n<blockquote>\n<ol>\n<li>Support for Mac and Linux. In the future we'll need Windows.</li>\n</ol>\n</blockquote>\n<p>Already supports Mac and Linux. Haven't tried to support Windows, but don't predict any significant blockers at this point.</p>\n<blockquote>\n<ol>\n<li>Google Noto fonts out of the box. Closure Rules already configure PhantomJS to use them rules_closure/third_party. Similar code exists internally at Google.</li>\n</ol>\n</blockquote>\n<p>I will look at how the Closure Rules does this and see about getting working.</p>\n<blockquote>\n<ol>\n<li>Bit-for-bit determinism of screenshot tests across G3/Linux/Mac/Windows with Headless Chromium. I managed to achieve this with Closure Rules on Linux. But I failed to achieve the same results on Darwin. This isn't a strict requirement. But without this, screenshot testing will likely be impossible and all tests will probably have to be hand-coded web driver tests.</li>\n</ol>\n</blockquote>\n<p>I am not a fan of screenshot tests as small changes in the environments can have significant effects on the screenshots. That said, we should be able to get consistency within controlled environments (we have done a fairly good job of this in the past couple years in G3).</p>", "body_text": "No git_repository()\n\n\nDone.\n\n\nNo bind()\n\n\nDone.\n\n\nExternal URLs can't be uploaded to servers blocked by a certain firewall. Otherwise we'll get a ton of issues.\n\n\nWe should be able to take care of this however we solve the same problem for other dependencies.\n\n\nMake available in //third_party/bazel_rules/rules_webtesting because we'd like to use this as our testing solution both internally and externally.\n\n\nDo you mean in Google? I am planning on pulling this in 2017Q1 and using it as the basis for web testing in Google.\n\n\nWe would like to use statically compiled Headless Chromium without any dependencies[1] aren't listed in aptitude search ~prequired -F\"%p\" or rigorously specified by Bazel. Otherwise we have to deal with all these difficult to troubleshoot issues where people complain about things not working. Right now chrome-precise64.zip isn't hermetically sealed and depends on 74 .so files from the system. We'd rather pay the price of downloading another 100MB if it means it's guaranteed to work.\n\n\nI have successfully got this working for Linux. Currently headless_shell is not supported on MacOS, but I am thinking it may not be as much of an issue there (Mac OS has a more standardized configuration, so using regular Chrome/Chromium may be okay).\n\n\nIf it hasn't been designed this way already, the build needs to guarantee that if we don't link a particular browser in the browsers = [...] list, then we won't pay the price of downloading it. We only want to pay for the functionality we're using.\n\n\nThis is already true.\n\n\nSupport for Mac and Linux. In the future we'll need Windows.\n\n\nAlready supports Mac and Linux. Haven't tried to support Windows, but don't predict any significant blockers at this point.\n\n\nGoogle Noto fonts out of the box. Closure Rules already configure PhantomJS to use them rules_closure/third_party. Similar code exists internally at Google.\n\n\nI will look at how the Closure Rules does this and see about getting working.\n\n\nBit-for-bit determinism of screenshot tests across G3/Linux/Mac/Windows with Headless Chromium. I managed to achieve this with Closure Rules on Linux. But I failed to achieve the same results on Darwin. This isn't a strict requirement. But without this, screenshot testing will likely be impossible and all tests will probably have to be hand-coded web driver tests.\n\n\nI am not a fan of screenshot tests as small changes in the environments can have significant effects on the screenshots. That said, we should be able to get consistency within controlled environments (we have done a fairly good job of this in the past couple years in G3).", "body": "> 1. No git_repository()\n\nDone.\n\n> 1. No bind()\n\nDone.\n\n> 1. External URLs can't be uploaded to servers blocked by a certain firewall. Otherwise we'll get a ton of issues.\n\nWe should be able to take care of this however we solve the same problem for other dependencies.\n\n> 1. Make available in //third_party/bazel_rules/rules_webtesting because we'd like to use this as our testing solution both internally and externally.\n\nDo you mean in Google? I am planning on pulling this in 2017Q1 and using it as the basis for web testing in Google.\n\n> 1. We would like to use statically compiled Headless Chromium without any dependencies[1] aren't listed in aptitude search ~prequired -F\"%p\" or rigorously specified by Bazel. Otherwise we have to deal with all these difficult to troubleshoot issues where people complain about things not working. Right now chrome-precise64.zip isn't hermetically sealed and depends on 74 .so files from the system. We'd rather pay the price of downloading another 100MB if it means it's guaranteed to work.\n\nI have successfully got this working for Linux. Currently headless_shell is not supported on MacOS, but I am thinking it may not be as much of an issue there (Mac OS has a more standardized configuration, so using regular Chrome/Chromium may be okay).\n\n> 1. If it hasn't been designed this way already, the build needs to guarantee that if we don't link a particular browser in the browsers = [...] list, then we won't pay the price of downloading it. We only want to pay for the functionality we're using.\n\nThis is already true.\n\n> 1. Support for Mac and Linux. In the future we'll need Windows.\n\nAlready supports Mac and Linux. Haven't tried to support Windows, but don't predict any significant blockers at this point.\n\n> 1. Google Noto fonts out of the box. Closure Rules already configure PhantomJS to use them rules_closure/third_party. Similar code exists internally at Google.\n\nI will look at how the Closure Rules does this and see about getting working.\n\n> 1. Bit-for-bit determinism of screenshot tests across G3/Linux/Mac/Windows with Headless Chromium. I managed to achieve this with Closure Rules on Linux. But I failed to achieve the same results on Darwin. This isn't a strict requirement. But without this, screenshot testing will likely be impossible and all tests will probably have to be hand-coded web driver tests.\n\nI am not a fan of screenshot tests as small changes in the environments can have significant effects on the screenshots. That said, we should be able to get consistency within controlled environments (we have done a fairly good job of this in the past couple years in G3).\n"}