{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/254720779", "html_url": "https://github.com/tensorflow/tensorflow/pull/5018#issuecomment-254720779", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5018", "id": 254720779, "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDcyMDc3OQ==", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "created_at": "2016-10-19T06:17:34Z", "updated_at": "2016-10-19T06:17:34Z", "author_association": "MEMBER", "body_html": "<p>I'm so happy work is being done with Bazel web testing. I'd love to merge this into TensorFlow today. The problem is there are blockers which prevent that from happening at this time. We had a chat offline about this.</p>\n<p>The main reason we can't merge this today is the additional 350MB of download and the additional 550MB of disk space. Everyone building TensorFlow from source will have to pay this price, even if they're not interested in testing TensorBoard. This is because we put <code>bazel fetch //tensorflow/...</code> in our <code>./configure</code> file to work around a bug in Bazel. So any external that's transitively referenced by our codebase is going to be fetched.</p>\n<p>We would definitely like to use rules_web in the future. So here's our concrete list of requirements:</p>\n<ol>\n<li>No <code>git_repository()</code></li>\n<li>No <code>bind()</code></li>\n<li>External URLs can't be uploaded to servers <a href=\"http://www.blockedinchina.net/\" rel=\"nofollow\">blocked</a> by a certain firewall. Otherwise we'll get a ton of issues.</li>\n<li>Make available in <code>//third_party/bazel_rules/rules_webtesting</code> because we'd like to use this as our testing solution both internally and externally.</li>\n<li>We would like to use statically compiled Headless Chromium without any dependencies[1] aren't listed in <code>aptitude search ~prequired -F\"%p\"</code> or rigorously specified by Bazel. Otherwise we have to deal with all these difficult to troubleshoot issues where people complain about things not working. Right now <code>chrome-precise64.zip</code> isn't hermetically sealed and depends on 74 <code>.so</code> files from the system. We'd rather pay the price of downloading another 100MB if it means it's guaranteed to work.</li>\n<li>If it hasn't been designed this way already, the build needs to guarantee that if we don't link a particular browser in the <code>browsers = [...]</code> list, then we won't pay the price of downloading it. We only want to pay for the functionality we're using.</li>\n<li>Support for Mac and Linux. In the future we'll need Windows.</li>\n<li>Google Noto fonts out of the box. Closure Rules already configure PhantomJS to use them <a href=\"https://github.com/bazelbuild/rules_closure/tree/master/third_party\">rules_closure/third_party</a>. Similar code exists internally at Google.</li>\n<li>Bit-for-bit determinism of screenshot tests across G3/Linux/Mac/Windows with Headless Chromium. I managed to achieve this with Closure Rules on Linux. But I failed to achieve the same results on Darwin. This isn't a strict requirement. But without this, screenshot testing will likely be impossible and all tests will probably have to be hand-coded web driver tests.</li>\n</ol>\n<p>[1] Here's how to build static headless Chromium. Be sure to ship the binary with a LICENSE file that contains the copyright notice / license for every single thing that gets statically linked.</p>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> https://www.chromium.org/developers/gn-build-configuration</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> https://chromium.googlesource.com/chromium/blink.git/+/master</span>\n\nsudo apt-get install build-essential bison gperf\nmkdir chromium\n<span class=\"pl-c1\">cd</span> chromium/\ngit clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\n<span class=\"pl-k\">export</span> PATH=<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>pwd<span class=\"pl-pds\">)</span></span>/depot_tools:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$PATH</span><span class=\"pl-pds\">\"</span></span>\nfetch --no-history chromium\ndu -sh <span class=\"pl-c1\">.</span>\ndf -h\n<span class=\"pl-c1\">cd</span> src\ngclient runhooks\ngn gen out/Release --args=<span class=\"pl-s\"><span class=\"pl-pds\">'</span>import(\"//build/args/headless.gn\") is_component_build=false optimize_for_size=true symbol_level=0 remove_webcore_debug_symbols=true<span class=\"pl-pds\">'</span></span>\nninja -C out/Release headless_shell\nls -hal out/Release/headless_shell\nstrip -s out/Release/headless_shell</pre></div>", "body_text": "I'm so happy work is being done with Bazel web testing. I'd love to merge this into TensorFlow today. The problem is there are blockers which prevent that from happening at this time. We had a chat offline about this.\nThe main reason we can't merge this today is the additional 350MB of download and the additional 550MB of disk space. Everyone building TensorFlow from source will have to pay this price, even if they're not interested in testing TensorBoard. This is because we put bazel fetch //tensorflow/... in our ./configure file to work around a bug in Bazel. So any external that's transitively referenced by our codebase is going to be fetched.\nWe would definitely like to use rules_web in the future. So here's our concrete list of requirements:\n\nNo git_repository()\nNo bind()\nExternal URLs can't be uploaded to servers blocked by a certain firewall. Otherwise we'll get a ton of issues.\nMake available in //third_party/bazel_rules/rules_webtesting because we'd like to use this as our testing solution both internally and externally.\nWe would like to use statically compiled Headless Chromium without any dependencies[1] aren't listed in aptitude search ~prequired -F\"%p\" or rigorously specified by Bazel. Otherwise we have to deal with all these difficult to troubleshoot issues where people complain about things not working. Right now chrome-precise64.zip isn't hermetically sealed and depends on 74 .so files from the system. We'd rather pay the price of downloading another 100MB if it means it's guaranteed to work.\nIf it hasn't been designed this way already, the build needs to guarantee that if we don't link a particular browser in the browsers = [...] list, then we won't pay the price of downloading it. We only want to pay for the functionality we're using.\nSupport for Mac and Linux. In the future we'll need Windows.\nGoogle Noto fonts out of the box. Closure Rules already configure PhantomJS to use them rules_closure/third_party. Similar code exists internally at Google.\nBit-for-bit determinism of screenshot tests across G3/Linux/Mac/Windows with Headless Chromium. I managed to achieve this with Closure Rules on Linux. But I failed to achieve the same results on Darwin. This isn't a strict requirement. But without this, screenshot testing will likely be impossible and all tests will probably have to be hand-coded web driver tests.\n\n[1] Here's how to build static headless Chromium. Be sure to ship the binary with a LICENSE file that contains the copyright notice / license for every single thing that gets statically linked.\n# https://www.chromium.org/developers/gn-build-configuration\n# https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md\n# https://chromium.googlesource.com/chromium/blink.git/+/master\n\nsudo apt-get install build-essential bison gperf\nmkdir chromium\ncd chromium/\ngit clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\nexport PATH=$(pwd)/depot_tools:\"$PATH\"\nfetch --no-history chromium\ndu -sh .\ndf -h\ncd src\ngclient runhooks\ngn gen out/Release --args='import(\"//build/args/headless.gn\") is_component_build=false optimize_for_size=true symbol_level=0 remove_webcore_debug_symbols=true'\nninja -C out/Release headless_shell\nls -hal out/Release/headless_shell\nstrip -s out/Release/headless_shell", "body": "I'm so happy work is being done with Bazel web testing. I'd love to merge this into TensorFlow today. The problem is there are blockers which prevent that from happening at this time. We had a chat offline about this.\n\nThe main reason we can't merge this today is the additional 350MB of download and the additional 550MB of disk space. Everyone building TensorFlow from source will have to pay this price, even if they're not interested in testing TensorBoard. This is because we put `bazel fetch //tensorflow/...` in our `./configure` file to work around a bug in Bazel. So any external that's transitively referenced by our codebase is going to be fetched.\n\nWe would definitely like to use rules_web in the future. So here's our concrete list of requirements:\n1. No `git_repository()`\n2. No `bind()`\n3. External URLs can't be uploaded to servers [blocked](http://www.blockedinchina.net/) by a certain firewall. Otherwise we'll get a ton of issues.\n4. Make available in `//third_party/bazel_rules/rules_webtesting` because we'd like to use this as our testing solution both internally and externally.\n5. We would like to use statically compiled Headless Chromium without any dependencies[1] aren't listed in `aptitude search ~prequired -F\"%p\"` or rigorously specified by Bazel. Otherwise we have to deal with all these difficult to troubleshoot issues where people complain about things not working. Right now `chrome-precise64.zip` isn't hermetically sealed and depends on 74 `.so` files from the system. We'd rather pay the price of downloading another 100MB if it means it's guaranteed to work.\n6. If it hasn't been designed this way already, the build needs to guarantee that if we don't link a particular browser in the `browsers = [...]` list, then we won't pay the price of downloading it. We only want to pay for the functionality we're using.\n7. Support for Mac and Linux. In the future we'll need Windows.\n8. Google Noto fonts out of the box. Closure Rules already configure PhantomJS to use them [rules_closure/third_party](https://github.com/bazelbuild/rules_closure/tree/master/third_party). Similar code exists internally at Google.\n9. Bit-for-bit determinism of screenshot tests across G3/Linux/Mac/Windows with Headless Chromium. I managed to achieve this with Closure Rules on Linux. But I failed to achieve the same results on Darwin. This isn't a strict requirement. But without this, screenshot testing will likely be impossible and all tests will probably have to be hand-coded web driver tests.\n\n[1] Here's how to build static headless Chromium. Be sure to ship the binary with a LICENSE file that contains the copyright notice / license for every single thing that gets statically linked.\n\n``` sh\n# https://www.chromium.org/developers/gn-build-configuration\n# https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md\n# https://chromium.googlesource.com/chromium/blink.git/+/master\n\nsudo apt-get install build-essential bison gperf\nmkdir chromium\ncd chromium/\ngit clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\nexport PATH=$(pwd)/depot_tools:\"$PATH\"\nfetch --no-history chromium\ndu -sh .\ndf -h\ncd src\ngclient runhooks\ngn gen out/Release --args='import(\"//build/args/headless.gn\") is_component_build=false optimize_for_size=true symbol_level=0 remove_webcore_debug_symbols=true'\nninja -C out/Release headless_shell\nls -hal out/Release/headless_shell\nstrip -s out/Release/headless_shell\n```\n"}