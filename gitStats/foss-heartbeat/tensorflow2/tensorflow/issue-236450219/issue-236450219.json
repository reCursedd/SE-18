{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10759", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10759/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10759/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10759/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/10759", "id": 236450219, "node_id": "MDU6SXNzdWUyMzY0NTAyMTk=", "number": 10759, "title": "GPU->CPU Memcpy failed Error or InternalError c2c fft failed Error when using FFT2D ", "user": {"login": "nicaogr", "id": 23408564, "node_id": "MDQ6VXNlcjIzNDA4NTY0", "avatar_url": "https://avatars3.githubusercontent.com/u/23408564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicaogr", "html_url": "https://github.com/nicaogr", "followers_url": "https://api.github.com/users/nicaogr/followers", "following_url": "https://api.github.com/users/nicaogr/following{/other_user}", "gists_url": "https://api.github.com/users/nicaogr/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicaogr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicaogr/subscriptions", "organizations_url": "https://api.github.com/users/nicaogr/orgs", "repos_url": "https://api.github.com/users/nicaogr/repos", "events_url": "https://api.github.com/users/nicaogr/events{/privacy}", "received_events_url": "https://api.github.com/users/nicaogr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473172988, "node_id": "MDU6TGFiZWw0NzMxNzI5ODg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:bug/performance", "name": "type:bug/performance", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-06-16T10:59:45Z", "updated_at": "2017-06-20T01:06:56Z", "closed_at": "2017-06-20T01:06:56Z", "author_association": "NONE", "body_html": "<h3>The problem</h3>\n<p>I wrote a python script that used FFT2D from tensorflow you can find the Python script attached : TestFFT2D.py using GPU.</p>\n<p>In this script, I first create a convolution apply to a tensor and than compute a loss between a reference input tensor and a variable one with ftt2d and ifft2d operations.</p>\n<p>When I launch my script, I get a GPU-&gt;CPU Memcpy failed Error or an InternalError c2c fft failed Error. I don't know why the error change when I run again my script.<br>\nI test my code on two differents machine with Ubuntu 16.04 one with a GeForce GTX 680 GPU and one with a GeForce GTX 1080. In both case, I can randomly get both of the error messages.<br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/1080533/Abandon.txt\">Abandon.txt</a><br>\n<a href=\"https://github.com/tensorflow/tensorflow/files/1080532/InternalError.txt\">InternalError.txt</a><br>\nSometimes, my machine just crashes and I need to reboot it.</p>\n<h3>Source code / logs</h3>\n<p>You can find the terminal messages errors attached.<br>\nThis is the TestFFT2D.py code : <a href=\"https://github.com/nicaogr/silver-octo-fortnight/blob/master/TestFFT2D.py\">TestFFT2D.py </a><br>\n`<br>\nimport tensorflow as tf<br>\nimport numpy as np</p>\n<p>def get_loss(sess,net,img_ref,layer):</p>\n<pre><code>total_loss  = 0.\n\nsess.run(net['input'].assign(img_ref))  \nx = net[layer]\na = sess.run(net[layer])\nx = tf.transpose(x, [0,3,1,2])\na = tf.transpose(a, [0,3,1,2])\n_,N,_,_ = a.shape\nF_x = tf.fft2d(tf.complex(x,0.))\nF_x_conj = tf.conj(F_x)\nF_a = tf.fft2d(tf.complex(a,0.))\nF_a_conj = tf.conj(F_a)\n\nfor i in range(N):\n    inter_corr_x = tf.multiply(F_x,F_x_conj)\n    inter_corr_a = tf.multiply(F_a,F_a_conj)\n    \n    ifft2_corr_x = tf.ifft2d(inter_corr_x)\n    ifft2_corr_a = tf.ifft2d(inter_corr_a)\n    \n    R_x = tf.real(ifft2_corr_x)\n    R_a = tf.real(ifft2_corr_a)\n    \n    style_loss = tf.nn.l2_loss(tf.subtract(R_x,R_a))  \n    total_loss += style_loss\n    \n    # Shift the tensor from on 1 unit on the dimension 1\n    F_x = tf.concat([tf.expand_dims(F_x[:,-1,:,:],0), F_x[:,:-1,:,:]], axis=1)\n    F_a = tf.concat([tf.expand_dims(F_a[:,-1,:,:],0), F_a[:,:-1,:,:]], axis=1)\n        \nreturn(total_loss)\n</code></pre>\n<p>def main(args):</p>\n<pre><code># Definition of the first operations :\nheight, width, numberChannels = 400,300,3\nnet = {}\ncurrent = tf.Variable(np.zeros((1, height, width, numberChannels), dtype=np.float32))\nnet['input'] = current\nkernel = tf.constant(np.random.uniform(low=-1,high=1,size=(400,300,3,64)),dtype=np.float32)\nconv = tf.nn.conv2d(current, kernel, strides=(1, 1, 1, 1),padding='SAME',name='conv')\nbias = tf.constant(np.random.uniform(low=-1,high=1,size=(64)),dtype=np.float32)\nconv_add_bias = tf.nn.bias_add(conv, bias)\nnet['conv1_1'] = conv_add_bias\n\nimg_ref = np.random.uniform(low=-128,high=128,size=(1, height, width, numberChannels))\ninit_img = np.random.uniform(low=-128,high=128,size=(1, height, width, numberChannels))\n\nsess = tf.Session()\n\nsess.run(net['input'].assign(img_ref))  \n# Definition of the loss \nloss = get_loss(sess,net,img_ref,'conv1_1')\n    \n# Preparation of the assignation operation\nplaceholder = tf.placeholder(tf.float32, shape=init_img.shape)\nassign_op = net['input'].assign(placeholder)\n    \nsess.run(tf.global_variables_initializer())\nsess.run(assign_op, {placeholder: init_img})\nprint(\"Before loss evaluation\")\nloss_evaluation = sess.run(loss)\nprint(\"loss_evaluation\",loss_evaluation)\n\nreturn(0)\n</code></pre>\n<p>if <strong>name</strong> == '<strong>main</strong>':<br>\nimport sys<br>\nsys.exit(main(sys.argv))<br>\n`</p>\n<h3>System information</h3>\n<ul>\n<li>**Have I written custom code **: TestFFT2D.py</li>\n<li><strong>OS Platform and Distribution</strong>: Linux Ubuntu 16.04</li>\n<li><strong>TensorFlow installed from</strong>: Source</li>\n<li><strong>TensorFlow version</strong>: v1.0.0-65-g4763edf-dirty 1.0.1</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\nCuda compilation tools, release 7.5, V7.5.17 and  cuDNN  5 with the GeForce GTX 680<br>\nCuda compilation tools, release 8.0, V8.0.61and cuDNN 5 with the GeForce GTX 1080</li>\n<li><strong>GPU model and memory</strong>: Tested on GeForce GTX 680 with 2Go and on GeForce GTX 1080 with 12Go</li>\n<li>** Python version**: Python 3.6.1 |Anaconda 4.4.0 (64-bit)|</li>\n<li><strong>Exact command to reproduce</strong>: python TestFFT2D.py : copy-paste the code above and run it with python 3</li>\n</ul>", "body_text": "The problem\nI wrote a python script that used FFT2D from tensorflow you can find the Python script attached : TestFFT2D.py using GPU.\nIn this script, I first create a convolution apply to a tensor and than compute a loss between a reference input tensor and a variable one with ftt2d and ifft2d operations.\nWhen I launch my script, I get a GPU->CPU Memcpy failed Error or an InternalError c2c fft failed Error. I don't know why the error change when I run again my script.\nI test my code on two differents machine with Ubuntu 16.04 one with a GeForce GTX 680 GPU and one with a GeForce GTX 1080. In both case, I can randomly get both of the error messages.\nAbandon.txt\nInternalError.txt\nSometimes, my machine just crashes and I need to reboot it.\nSource code / logs\nYou can find the terminal messages errors attached.\nThis is the TestFFT2D.py code : TestFFT2D.py \n`\nimport tensorflow as tf\nimport numpy as np\ndef get_loss(sess,net,img_ref,layer):\ntotal_loss  = 0.\n\nsess.run(net['input'].assign(img_ref))  \nx = net[layer]\na = sess.run(net[layer])\nx = tf.transpose(x, [0,3,1,2])\na = tf.transpose(a, [0,3,1,2])\n_,N,_,_ = a.shape\nF_x = tf.fft2d(tf.complex(x,0.))\nF_x_conj = tf.conj(F_x)\nF_a = tf.fft2d(tf.complex(a,0.))\nF_a_conj = tf.conj(F_a)\n\nfor i in range(N):\n    inter_corr_x = tf.multiply(F_x,F_x_conj)\n    inter_corr_a = tf.multiply(F_a,F_a_conj)\n    \n    ifft2_corr_x = tf.ifft2d(inter_corr_x)\n    ifft2_corr_a = tf.ifft2d(inter_corr_a)\n    \n    R_x = tf.real(ifft2_corr_x)\n    R_a = tf.real(ifft2_corr_a)\n    \n    style_loss = tf.nn.l2_loss(tf.subtract(R_x,R_a))  \n    total_loss += style_loss\n    \n    # Shift the tensor from on 1 unit on the dimension 1\n    F_x = tf.concat([tf.expand_dims(F_x[:,-1,:,:],0), F_x[:,:-1,:,:]], axis=1)\n    F_a = tf.concat([tf.expand_dims(F_a[:,-1,:,:],0), F_a[:,:-1,:,:]], axis=1)\n        \nreturn(total_loss)\n\ndef main(args):\n# Definition of the first operations :\nheight, width, numberChannels = 400,300,3\nnet = {}\ncurrent = tf.Variable(np.zeros((1, height, width, numberChannels), dtype=np.float32))\nnet['input'] = current\nkernel = tf.constant(np.random.uniform(low=-1,high=1,size=(400,300,3,64)),dtype=np.float32)\nconv = tf.nn.conv2d(current, kernel, strides=(1, 1, 1, 1),padding='SAME',name='conv')\nbias = tf.constant(np.random.uniform(low=-1,high=1,size=(64)),dtype=np.float32)\nconv_add_bias = tf.nn.bias_add(conv, bias)\nnet['conv1_1'] = conv_add_bias\n\nimg_ref = np.random.uniform(low=-128,high=128,size=(1, height, width, numberChannels))\ninit_img = np.random.uniform(low=-128,high=128,size=(1, height, width, numberChannels))\n\nsess = tf.Session()\n\nsess.run(net['input'].assign(img_ref))  \n# Definition of the loss \nloss = get_loss(sess,net,img_ref,'conv1_1')\n    \n# Preparation of the assignation operation\nplaceholder = tf.placeholder(tf.float32, shape=init_img.shape)\nassign_op = net['input'].assign(placeholder)\n    \nsess.run(tf.global_variables_initializer())\nsess.run(assign_op, {placeholder: init_img})\nprint(\"Before loss evaluation\")\nloss_evaluation = sess.run(loss)\nprint(\"loss_evaluation\",loss_evaluation)\n\nreturn(0)\n\nif name == 'main':\nimport sys\nsys.exit(main(sys.argv))\n`\nSystem information\n\n**Have I written custom code **: TestFFT2D.py\nOS Platform and Distribution: Linux Ubuntu 16.04\nTensorFlow installed from: Source\nTensorFlow version: v1.0.0-65-g4763edf-dirty 1.0.1\nCUDA/cuDNN version:\nCuda compilation tools, release 7.5, V7.5.17 and  cuDNN  5 with the GeForce GTX 680\nCuda compilation tools, release 8.0, V8.0.61and cuDNN 5 with the GeForce GTX 1080\nGPU model and memory: Tested on GeForce GTX 680 with 2Go and on GeForce GTX 1080 with 12Go\n** Python version**: Python 3.6.1 |Anaconda 4.4.0 (64-bit)|\nExact command to reproduce: python TestFFT2D.py : copy-paste the code above and run it with python 3", "body": "### The problem\r\nI wrote a python script that used FFT2D from tensorflow you can find the Python script attached : TestFFT2D.py using GPU.\r\n\r\nIn this script, I first create a convolution apply to a tensor and than compute a loss between a reference input tensor and a variable one with ftt2d and ifft2d operations.\r\n\r\nWhen I launch my script, I get a GPU->CPU Memcpy failed Error or an InternalError c2c fft failed Error. I don't know why the error change when I run again my script. \r\nI test my code on two differents machine with Ubuntu 16.04 one with a GeForce GTX 680 GPU and one with a GeForce GTX 1080. In both case, I can randomly get both of the error messages.\r\n[Abandon.txt](https://github.com/tensorflow/tensorflow/files/1080533/Abandon.txt)\r\n[InternalError.txt](https://github.com/tensorflow/tensorflow/files/1080532/InternalError.txt)\r\nSometimes, my machine just crashes and I need to reboot it.\r\n\r\n### Source code / logs\r\nYou can find the terminal messages errors attached.\r\nThis is the TestFFT2D.py code : [TestFFT2D.py ](https://github.com/nicaogr/silver-octo-fortnight/blob/master/TestFFT2D.py)\r\n`\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\ndef get_loss(sess,net,img_ref,layer):\r\n    \r\n    total_loss  = 0.\r\n    \r\n    sess.run(net['input'].assign(img_ref))  \r\n    x = net[layer]\r\n    a = sess.run(net[layer])\r\n    x = tf.transpose(x, [0,3,1,2])\r\n    a = tf.transpose(a, [0,3,1,2])\r\n    _,N,_,_ = a.shape\r\n    F_x = tf.fft2d(tf.complex(x,0.))\r\n    F_x_conj = tf.conj(F_x)\r\n    F_a = tf.fft2d(tf.complex(a,0.))\r\n    F_a_conj = tf.conj(F_a)\r\n    \r\n    for i in range(N):\r\n        inter_corr_x = tf.multiply(F_x,F_x_conj)\r\n        inter_corr_a = tf.multiply(F_a,F_a_conj)\r\n        \r\n        ifft2_corr_x = tf.ifft2d(inter_corr_x)\r\n        ifft2_corr_a = tf.ifft2d(inter_corr_a)\r\n        \r\n        R_x = tf.real(ifft2_corr_x)\r\n        R_a = tf.real(ifft2_corr_a)\r\n        \r\n        style_loss = tf.nn.l2_loss(tf.subtract(R_x,R_a))  \r\n        total_loss += style_loss\r\n        \r\n        # Shift the tensor from on 1 unit on the dimension 1\r\n        F_x = tf.concat([tf.expand_dims(F_x[:,-1,:,:],0), F_x[:,:-1,:,:]], axis=1)\r\n        F_a = tf.concat([tf.expand_dims(F_a[:,-1,:,:],0), F_a[:,:-1,:,:]], axis=1)\r\n            \r\n    return(total_loss)\r\n\r\ndef main(args):\r\n    \r\n    # Definition of the first operations :\r\n    height, width, numberChannels = 400,300,3\r\n    net = {}\r\n    current = tf.Variable(np.zeros((1, height, width, numberChannels), dtype=np.float32))\r\n    net['input'] = current\r\n    kernel = tf.constant(np.random.uniform(low=-1,high=1,size=(400,300,3,64)),dtype=np.float32)\r\n    conv = tf.nn.conv2d(current, kernel, strides=(1, 1, 1, 1),padding='SAME',name='conv')\r\n    bias = tf.constant(np.random.uniform(low=-1,high=1,size=(64)),dtype=np.float32)\r\n    conv_add_bias = tf.nn.bias_add(conv, bias)\r\n    net['conv1_1'] = conv_add_bias\r\n    \r\n    img_ref = np.random.uniform(low=-128,high=128,size=(1, height, width, numberChannels))\r\n    init_img = np.random.uniform(low=-128,high=128,size=(1, height, width, numberChannels))\r\n    \r\n    sess = tf.Session()\r\n    \r\n    sess.run(net['input'].assign(img_ref))  \r\n    # Definition of the loss \r\n    loss = get_loss(sess,net,img_ref,'conv1_1')\r\n        \r\n    # Preparation of the assignation operation\r\n    placeholder = tf.placeholder(tf.float32, shape=init_img.shape)\r\n    assign_op = net['input'].assign(placeholder)\r\n        \r\n    sess.run(tf.global_variables_initializer())\r\n    sess.run(assign_op, {placeholder: init_img})\r\n    print(\"Before loss evaluation\")\r\n    loss_evaluation = sess.run(loss)\r\n    print(\"loss_evaluation\",loss_evaluation)\r\n    \r\n    return(0)\r\n\r\nif __name__ == '__main__':\r\n    import sys\r\n    sys.exit(main(sys.argv))\r\n`\r\n### System information\r\n- **Have I written custom code **: TestFFT2D.py\r\n- **OS Platform and Distribution**: Linux Ubuntu 16.04\r\n- **TensorFlow installed from**: Source\r\n- **TensorFlow version**: v1.0.0-65-g4763edf-dirty 1.0.1\r\n- **CUDA/cuDNN version**:\r\nCuda compilation tools, release 7.5, V7.5.17 and  cuDNN  5 with the GeForce GTX 680\r\n Cuda compilation tools, release 8.0, V8.0.61and cuDNN 5 with the GeForce GTX 1080\r\n- **GPU model and memory**: Tested on GeForce GTX 680 with 2Go and on GeForce GTX 1080 with 12Go\r\n- ** Python version**: Python 3.6.1 |Anaconda 4.4.0 (64-bit)|\r\n- **Exact command to reproduce**: python TestFFT2D.py : copy-paste the code above and run it with python 3\r\n\r\n\r\n"}