{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14327", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14327/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14327/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14327/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14327", "id": 271920700, "node_id": "MDU6SXNzdWUyNzE5MjA3MDA=", "number": 14327, "title": "Mixed precision not enabled with TF1.4 on Tesla V100", "user": {"login": "furybubu", "id": 6081702, "node_id": "MDQ6VXNlcjYwODE3MDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/6081702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/furybubu", "html_url": "https://github.com/furybubu", "followers_url": "https://api.github.com/users/furybubu/followers", "following_url": "https://api.github.com/users/furybubu/following{/other_user}", "gists_url": "https://api.github.com/users/furybubu/gists{/gist_id}", "starred_url": "https://api.github.com/users/furybubu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/furybubu/subscriptions", "organizations_url": "https://api.github.com/users/furybubu/orgs", "repos_url": "https://api.github.com/users/furybubu/repos", "events_url": "https://api.github.com/users/furybubu/events{/privacy}", "received_events_url": "https://api.github.com/users/furybubu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-11-07T17:37:57Z", "updated_at": "2017-11-08T20:53:45Z", "closed_at": "2017-11-08T20:53:45Z", "author_association": "NONE", "body_html": "<p>Hi there,</p>\n<p>I was interested in testing my neural net (an Autoencoder that serves as a generator + a CNN as a discriminator)  that uses 3dconv/deconv layers with the new Volta architecture and benefit from the Mixed-Precision training. I compiled the most recent source code of Tensorflow 1.4 with CUDA 9 and CudNN 7.0 and cast all the trainable variables used by my conv/deconv layers to tf.float16. Also, all my input and output tensors have sizes that are multiple of 8.</p>\n<p>I have two issues so far:</p>\n<ul>\n<li>I do not see any substantial speed improvement, the training time is roughly similar to when using tf.float32. My understanding is that with the Volta and cuDNN 7.0, Mixed Precision should be  automatically detected by TF and hence should use Tensor Core math. Am I wrong, or is there anything I should do to enable it? FYI, I also tried the TF1.5 nighlty build, and it seems that it is even slower than my custom 1.4.</li>\n<li>I also noticed that the Maxpool3D layers are not supporting TF.float16 yet and need a float32 input. Any plan to change that anytime soon ?</li>\n</ul>\n<p>Thanks for your support!</p>", "body_text": "Hi there,\nI was interested in testing my neural net (an Autoencoder that serves as a generator + a CNN as a discriminator)  that uses 3dconv/deconv layers with the new Volta architecture and benefit from the Mixed-Precision training. I compiled the most recent source code of Tensorflow 1.4 with CUDA 9 and CudNN 7.0 and cast all the trainable variables used by my conv/deconv layers to tf.float16. Also, all my input and output tensors have sizes that are multiple of 8.\nI have two issues so far:\n\nI do not see any substantial speed improvement, the training time is roughly similar to when using tf.float32. My understanding is that with the Volta and cuDNN 7.0, Mixed Precision should be  automatically detected by TF and hence should use Tensor Core math. Am I wrong, or is there anything I should do to enable it? FYI, I also tried the TF1.5 nighlty build, and it seems that it is even slower than my custom 1.4.\nI also noticed that the Maxpool3D layers are not supporting TF.float16 yet and need a float32 input. Any plan to change that anytime soon ?\n\nThanks for your support!", "body": "Hi there,\r\n\r\nI was interested in testing my neural net (an Autoencoder that serves as a generator + a CNN as a discriminator)  that uses 3dconv/deconv layers with the new Volta architecture and benefit from the Mixed-Precision training. I compiled the most recent source code of Tensorflow 1.4 with CUDA 9 and CudNN 7.0 and cast all the trainable variables used by my conv/deconv layers to tf.float16. Also, all my input and output tensors have sizes that are multiple of 8. \r\n\r\nI have two issues so far:\r\n- I do not see any substantial speed improvement, the training time is roughly similar to when using tf.float32. My understanding is that with the Volta and cuDNN 7.0, Mixed Precision should be  automatically detected by TF and hence should use Tensor Core math. Am I wrong, or is there anything I should do to enable it? FYI, I also tried the TF1.5 nighlty build, and it seems that it is even slower than my custom 1.4.\r\n- I also noticed that the Maxpool3D layers are not supporting TF.float16 yet and need a float32 input. Any plan to change that anytime soon ?\r\n\r\nThanks for your support!"}