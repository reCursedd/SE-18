{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17359", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17359/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17359/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17359/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17359", "id": 301453658, "node_id": "MDU6SXNzdWUzMDE0NTM2NTg=", "number": 17359, "title": "Lack of documentation about: saving-restoring graphs & other languages API about this", "user": {"login": "iurilarosa", "id": 16984873, "node_id": "MDQ6VXNlcjE2OTg0ODcz", "avatar_url": "https://avatars3.githubusercontent.com/u/16984873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iurilarosa", "html_url": "https://github.com/iurilarosa", "followers_url": "https://api.github.com/users/iurilarosa/followers", "following_url": "https://api.github.com/users/iurilarosa/following{/other_user}", "gists_url": "https://api.github.com/users/iurilarosa/gists{/gist_id}", "starred_url": "https://api.github.com/users/iurilarosa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iurilarosa/subscriptions", "organizations_url": "https://api.github.com/users/iurilarosa/orgs", "repos_url": "https://api.github.com/users/iurilarosa/repos", "events_url": "https://api.github.com/users/iurilarosa/events{/privacy}", "received_events_url": "https://api.github.com/users/iurilarosa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 284443156, "node_id": "MDU6TGFiZWwyODQ0NDMxNTY=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:docs", "name": "type:docs", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2018-03-01T15:45:37Z", "updated_at": "2018-10-04T01:22:45Z", "closed_at": "2018-10-04T01:22:45Z", "author_association": "NONE", "body_html": "<p>I think that one of the main features of TensorFlow is its portability. I want to exploit it in a huge code written in C, where a small but computational heavy part can be computed using GPU through TF. So I started to study the problem about saving a graph, loading it to another code (possibly in another programming language) and passing it data to perform some computations.</p>\n<p>I'm finding very difficult to understand the documentation. I try to point the main problems:<br>\n1- there is no C API documentation despite it is the only \"other language\" which satisfies the stability promises, there is only a link to the <code>c_api.h</code> file in the repo that I find very difficult to understand;<br>\n2- it is very unclear how one can save a graph which can be restored and loaded in another code written in C (or maybe C++), and I don't find where is explained how one can run the graph in the other code passing data to it. Indeed, people had to write many tutorials, or ask many questions on StackOverflow which are unfortunately very outdated (e.g. <a href=\"https://medium.com/jim-fleming/loading-a-tensorflow-graph-with-the-c-api-4caaff88463f\" rel=\"nofollow\">here</a> and <a href=\"https://stackoverflow.com/questions/38947658/tensorflow-saving-into-loading-a-graph-from-a-file\" rel=\"nofollow\">here</a>);<br>\n3- as far as I can see there are many ways to do save/restoring but it is unclear when you should use one of these way or another. E.g. <code>saver.save</code> -&gt; <code>saver.restore</code>; <code>tf.train.write_graph</code> -&gt; <code>tf.import_graph_def</code> or C analogue <code>TF_GraphImportGraphDef</code>; <code>tf.saved_model.builder.SavedModelBuilder</code> -&gt; <code>saved_model.loader.load</code> or C analogue <code>LoadSavedModel</code>.</p>\n<p>The more I explore the documentation about this topic, the more questions arises, but I hope to have explained enough the issues I'm facing studying it. Shortly, I could say simply that we need a schematic and coherent page which can summarize the procedures about saving, loading, running graph at least from-to any languages which satisfy the stability promises, maybe with links to the specific standard methods and explanation about which of these ones could be used in a certain situation and why.</p>", "body_text": "I think that one of the main features of TensorFlow is its portability. I want to exploit it in a huge code written in C, where a small but computational heavy part can be computed using GPU through TF. So I started to study the problem about saving a graph, loading it to another code (possibly in another programming language) and passing it data to perform some computations.\nI'm finding very difficult to understand the documentation. I try to point the main problems:\n1- there is no C API documentation despite it is the only \"other language\" which satisfies the stability promises, there is only a link to the c_api.h file in the repo that I find very difficult to understand;\n2- it is very unclear how one can save a graph which can be restored and loaded in another code written in C (or maybe C++), and I don't find where is explained how one can run the graph in the other code passing data to it. Indeed, people had to write many tutorials, or ask many questions on StackOverflow which are unfortunately very outdated (e.g. here and here);\n3- as far as I can see there are many ways to do save/restoring but it is unclear when you should use one of these way or another. E.g. saver.save -> saver.restore; tf.train.write_graph -> tf.import_graph_def or C analogue TF_GraphImportGraphDef; tf.saved_model.builder.SavedModelBuilder -> saved_model.loader.load or C analogue LoadSavedModel.\nThe more I explore the documentation about this topic, the more questions arises, but I hope to have explained enough the issues I'm facing studying it. Shortly, I could say simply that we need a schematic and coherent page which can summarize the procedures about saving, loading, running graph at least from-to any languages which satisfy the stability promises, maybe with links to the specific standard methods and explanation about which of these ones could be used in a certain situation and why.", "body": "I think that one of the main features of TensorFlow is its portability. I want to exploit it in a huge code written in C, where a small but computational heavy part can be computed using GPU through TF. So I started to study the problem about saving a graph, loading it to another code (possibly in another programming language) and passing it data to perform some computations.\r\n\r\nI'm finding very difficult to understand the documentation. I try to point the main problems:\r\n1- there is no C API documentation despite it is the only \"other language\" which satisfies the stability promises, there is only a link to the `c_api.h` file in the repo that I find very difficult to understand;\r\n2- it is very unclear how one can save a graph which can be restored and loaded in another code written in C (or maybe C++), and I don't find where is explained how one can run the graph in the other code passing data to it. Indeed, people had to write many tutorials, or ask many questions on StackOverflow which are unfortunately very outdated (e.g. [here](https://medium.com/jim-fleming/loading-a-tensorflow-graph-with-the-c-api-4caaff88463f) and [here](https://stackoverflow.com/questions/38947658/tensorflow-saving-into-loading-a-graph-from-a-file));\r\n3- as far as I can see there are many ways to do save/restoring but it is unclear when you should use one of these way or another. E.g. `saver.save` -> `saver.restore`; `tf.train.write_graph` -> `tf.import_graph_def` or C analogue `TF_GraphImportGraphDef`; `tf.saved_model.builder.SavedModelBuilder` -> `saved_model.loader.load` or C analogue `LoadSavedModel`.\r\n\r\nThe more I explore the documentation about this topic, the more questions arises, but I hope to have explained enough the issues I'm facing studying it. Shortly, I could say simply that we need a schematic and coherent page which can summarize the procedures about saving, loading, running graph at least from-to any languages which satisfy the stability promises, maybe with links to the specific standard methods and explanation about which of these ones could be used in a certain situation and why.\r\n"}