{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/408257003", "html_url": "https://github.com/tensorflow/tensorflow/pull/20708#issuecomment-408257003", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20708", "id": 408257003, "node_id": "MDEyOklzc3VlQ29tbWVudDQwODI1NzAwMw==", "user": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-26T22:40:18Z", "updated_at": "2018-07-26T22:44:23Z", "author_association": "MEMBER", "body_html": "<blockquote>\n<p>In algorithm finding stage (conv_ops.cc, conv_grad_*.cc), use scratch_allocator.TotalByteSize() to populate the field inside AlgorithmDesc, which is embedded in ProfileResult to determine the best algorithm.</p>\n</blockquote>\n<p>Does that mean the scratch size field carries two meanings?</p>\n<ul>\n<li><code>AlgorithmConfig(...).algorithm_.algorithm_scratch_size_</code> is set to <code>scratch_allocator.TotalByteSize()</code>, meaning users intend to put a limit on the total scratch for use, this is passed from the user to the DNN library.</li>\n<li><code>ProfileResult(...).algorithm_.algorithm_scratch_size_</code> means the actual scratch memory needed by the very algorithm it keeps. This is passed from the DNN library to the users.</li>\n</ul>\n<p>If that's the case, I don't like the dual meaning of <code>algorithm_scratch_size_</code>. If we need both kinds of variables, we can create two of them, and handle them consistently.</p>\n<p>I almost feels like we want <code>AlgorithmConfig</code> to have a new field <code>scratch_size_limit_</code>, and <code>ProfileResult</code>/<code>AlgorithmDesc</code> to have a new field <code>scratch_size_used_</code>, but I'm not quite sure, as I don't know enough about MIOpen.</p>", "body_text": "In algorithm finding stage (conv_ops.cc, conv_grad_*.cc), use scratch_allocator.TotalByteSize() to populate the field inside AlgorithmDesc, which is embedded in ProfileResult to determine the best algorithm.\n\nDoes that mean the scratch size field carries two meanings?\n\nAlgorithmConfig(...).algorithm_.algorithm_scratch_size_ is set to scratch_allocator.TotalByteSize(), meaning users intend to put a limit on the total scratch for use, this is passed from the user to the DNN library.\nProfileResult(...).algorithm_.algorithm_scratch_size_ means the actual scratch memory needed by the very algorithm it keeps. This is passed from the DNN library to the users.\n\nIf that's the case, I don't like the dual meaning of algorithm_scratch_size_. If we need both kinds of variables, we can create two of them, and handle them consistently.\nI almost feels like we want AlgorithmConfig to have a new field scratch_size_limit_, and ProfileResult/AlgorithmDesc to have a new field scratch_size_used_, but I'm not quite sure, as I don't know enough about MIOpen.", "body": "> In algorithm finding stage (conv_ops.cc, conv_grad_*.cc), use scratch_allocator.TotalByteSize() to populate the field inside AlgorithmDesc, which is embedded in ProfileResult to determine the best algorithm.\r\n\r\nDoes that mean the scratch size field carries two meanings?\r\n* `AlgorithmConfig(...).algorithm_.algorithm_scratch_size_` is set to `scratch_allocator.TotalByteSize()`, meaning users intend to put a limit on the total scratch for use, this is passed from the user to the DNN library.\r\n* `ProfileResult(...).algorithm_.algorithm_scratch_size_` means the actual scratch memory needed by the very algorithm it keeps. This is passed from the DNN library to the users.\r\n\r\nIf that's the case, I don't like the dual meaning of `algorithm_scratch_size_`. If we need both kinds of variables, we can create two of them, and handle them consistently.\r\n\r\nI almost feels like we want `AlgorithmConfig` to have a new field `scratch_size_limit_`, and `ProfileResult`/`AlgorithmDesc` to have a new field `scratch_size_used_`, but I'm not quite sure, as I don't know enough about MIOpen."}