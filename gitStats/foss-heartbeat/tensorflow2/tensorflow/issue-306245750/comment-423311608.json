{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/423311608", "html_url": "https://github.com/tensorflow/tensorflow/issues/17810#issuecomment-423311608", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17810", "id": 423311608, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzMxMTYwOA==", "user": {"login": "feihugis", "id": 5057740, "node_id": "MDQ6VXNlcjUwNTc3NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5057740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feihugis", "html_url": "https://github.com/feihugis", "followers_url": "https://api.github.com/users/feihugis/followers", "following_url": "https://api.github.com/users/feihugis/following{/other_user}", "gists_url": "https://api.github.com/users/feihugis/gists{/gist_id}", "starred_url": "https://api.github.com/users/feihugis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feihugis/subscriptions", "organizations_url": "https://api.github.com/users/feihugis/orgs", "repos_url": "https://api.github.com/users/feihugis/repos", "events_url": "https://api.github.com/users/feihugis/events{/privacy}", "received_events_url": "https://api.github.com/users/feihugis/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-20T19:53:48Z", "updated_at": "2018-09-20T22:49:07Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=260360\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/darrengarvey\">@darrengarvey</a> Yeah, I implemented it in a similar way. Basically, I use <code>DFS</code> to search the files instead of <code>BFS</code> used in <code>MatchingFilesOp</code>. The files and dirs at each level are stored in a <code>priority_queue</code>, then the output for each <code>get_next</code> could be sorted.</p>\n<p>Sorting is not optional yet. I could make some change to make it optional. Will do some tests to see the performance difference.</p>", "body_text": "@darrengarvey Yeah, I implemented it in a similar way. Basically, I use DFS to search the files instead of BFS used in MatchingFilesOp. The files and dirs at each level are stored in a priority_queue, then the output for each get_next could be sorted.\nSorting is not optional yet. I could make some change to make it optional. Will do some tests to see the performance difference.", "body": "@darrengarvey Yeah, I implemented it in a similar way. Basically, I use `DFS` to search the files instead of `BFS` used in `MatchingFilesOp`. The files and dirs at each level are stored in a `priority_queue`, then the output for each `get_next` could be sorted. \r\n\r\nSorting is not optional yet. I could make some change to make it optional. Will do some tests to see the performance difference.\r\n  "}