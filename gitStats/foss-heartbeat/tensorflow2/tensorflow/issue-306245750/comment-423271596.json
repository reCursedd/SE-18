{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/423271596", "html_url": "https://github.com/tensorflow/tensorflow/issues/17810#issuecomment-423271596", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17810", "id": 423271596, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzI3MTU5Ng==", "user": {"login": "feihugis", "id": 5057740, "node_id": "MDQ6VXNlcjUwNTc3NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5057740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feihugis", "html_url": "https://github.com/feihugis", "followers_url": "https://api.github.com/users/feihugis/followers", "following_url": "https://api.github.com/users/feihugis/following{/other_user}", "gists_url": "https://api.github.com/users/feihugis/gists{/gist_id}", "starred_url": "https://api.github.com/users/feihugis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feihugis/subscriptions", "organizations_url": "https://api.github.com/users/feihugis/orgs", "repos_url": "https://api.github.com/users/feihugis/repos", "events_url": "https://api.github.com/users/feihugis/events{/privacy}", "received_events_url": "https://api.github.com/users/feihugis/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-20T17:41:43Z", "updated_at": "2018-09-20T17:41:43Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> and <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=144114\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rohan100jain\">@rohan100jain</a> I implemented a <code>MatchingFilesDatasetOp</code>, which could yield the matching files in a sorted order.</p>\n<p>The performance experiments run using <a href=\"https://gist.github.com/darrengarvey/ff05fbe28ab2061c101fe64353b467ff\">the script</a> posted by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=260360\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/darrengarvey\">@darrengarvey</a> , where <code>width</code> is the number of dirs at each level, and <code>depth</code> is the number of nested dirs.</p>\n<p>Here are the initial experiment results. What do you think of them?</p>\n<p>when <code>width = 1000</code> and <code>depth = 2</code>:<br>\n-- MatchingFilesDataset:</p>\n<pre><code>read first filename: time: 16.06 ms\nread second filename: time: 0.52 ms\nread 998 more filenames: time: 336.51 ms (0.34 ms per iteration)\n</code></pre>\n<p>-- Dataset.list_files():</p>\n<pre><code>read first filename: time: 253.91 ms\nread second filename: time: 0.27 ms\nread 998 more filenames: time: 135.77 ms (0.14 ms per iteration)\n</code></pre>\n<p>when <code>width = 1000</code> and <code>depth = 20</code>:<br>\n-- MatchingFilesDataset:</p>\n<pre><code>read first filename: time: 22.16 ms\nread second filename: time: 3.09 ms\nread 998 more filenames: time: 2269.14 ms (2.27 ms per iteration)\n</code></pre>\n<p>-- Dataset.list_files():</p>\n<pre><code>read first filename: time: 1860.96 ms\nread second filename: time: 0.38 ms\nread 998 more filenames: time: 127.23 ms (0.13 ms per iteration)\n</code></pre>", "body_text": "@mrry and @rohan100jain I implemented a MatchingFilesDatasetOp, which could yield the matching files in a sorted order.\nThe performance experiments run using the script posted by @darrengarvey , where width is the number of dirs at each level, and depth is the number of nested dirs.\nHere are the initial experiment results. What do you think of them?\nwhen width = 1000 and depth = 2:\n-- MatchingFilesDataset:\nread first filename: time: 16.06 ms\nread second filename: time: 0.52 ms\nread 998 more filenames: time: 336.51 ms (0.34 ms per iteration)\n\n-- Dataset.list_files():\nread first filename: time: 253.91 ms\nread second filename: time: 0.27 ms\nread 998 more filenames: time: 135.77 ms (0.14 ms per iteration)\n\nwhen width = 1000 and depth = 20:\n-- MatchingFilesDataset:\nread first filename: time: 22.16 ms\nread second filename: time: 3.09 ms\nread 998 more filenames: time: 2269.14 ms (2.27 ms per iteration)\n\n-- Dataset.list_files():\nread first filename: time: 1860.96 ms\nread second filename: time: 0.38 ms\nread 998 more filenames: time: 127.23 ms (0.13 ms per iteration)", "body": "@mrry and @rohan100jain I implemented a `MatchingFilesDatasetOp`, which could yield the matching files in a sorted order.\r\n\r\nThe performance experiments run using [the script](https://gist.github.com/darrengarvey/ff05fbe28ab2061c101fe64353b467ff) posted by @darrengarvey , where `width` is the number of dirs at each level, and `depth` is the number of nested dirs.\r\n\r\nHere are the initial experiment results. What do you think of them?\r\n\r\nwhen `width = 1000` and `depth = 2`:\r\n-- MatchingFilesDataset:\r\n```\r\nread first filename: time: 16.06 ms\r\nread second filename: time: 0.52 ms\r\nread 998 more filenames: time: 336.51 ms (0.34 ms per iteration)\r\n```\r\n-- Dataset.list_files():\r\n```\r\nread first filename: time: 253.91 ms\r\nread second filename: time: 0.27 ms\r\nread 998 more filenames: time: 135.77 ms (0.14 ms per iteration)\r\n```\r\n\r\nwhen `width = 1000` and `depth = 20`:\r\n-- MatchingFilesDataset:\r\n```\r\nread first filename: time: 22.16 ms\r\nread second filename: time: 3.09 ms\r\nread 998 more filenames: time: 2269.14 ms (2.27 ms per iteration)\r\n```\r\n\r\n-- Dataset.list_files():\r\n```\r\nread first filename: time: 1860.96 ms\r\nread second filename: time: 0.38 ms\r\nread 998 more filenames: time: 127.23 ms (0.13 ms per iteration)\r\n```"}