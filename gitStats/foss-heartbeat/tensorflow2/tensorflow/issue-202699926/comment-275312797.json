{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/275312797", "html_url": "https://github.com/tensorflow/tensorflow/issues/7030#issuecomment-275312797", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7030", "id": 275312797, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NTMxMjc5Nw==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-01-26T05:48:30Z", "updated_at": "2017-01-26T05:48:30Z", "author_association": "CONTRIBUTOR", "body_html": "<p>OK, custom op turned out to be relatively straightforward, I put it here: <a href=\"https://github.com/yaroslavvb/memory_probe_ops\">https://github.com/yaroslavvb/memory_probe_ops</a></p>\n<p>One snag is that when the op is placed on CPU, the allocator returns 0 for <code>bytes_in_use</code>, so this only works or GPUs. I still see LOGMEMORY messages coming from cpu allocations, so it seems this info gets lost somewhere.</p>\n<p>Also, when graph optimization are turned on, it sometimes returns 0, and I suspect that ctx-&gt;device()-&gt;GetAllocator() gives me a CPU allocator. This is despite run_metadata and log_device_placement showing the op as existing on GPU. Things go back to normal when setting up session with <code>tf.OptimizerOptions.L0</code></p>", "body_text": "OK, custom op turned out to be relatively straightforward, I put it here: https://github.com/yaroslavvb/memory_probe_ops\nOne snag is that when the op is placed on CPU, the allocator returns 0 for bytes_in_use, so this only works or GPUs. I still see LOGMEMORY messages coming from cpu allocations, so it seems this info gets lost somewhere.\nAlso, when graph optimization are turned on, it sometimes returns 0, and I suspect that ctx->device()->GetAllocator() gives me a CPU allocator. This is despite run_metadata and log_device_placement showing the op as existing on GPU. Things go back to normal when setting up session with tf.OptimizerOptions.L0", "body": "OK, custom op turned out to be relatively straightforward, I put it here: https://github.com/yaroslavvb/memory_probe_ops\r\n\r\nOne snag is that when the op is placed on CPU, the allocator returns 0 for `bytes_in_use`, so this only works or GPUs. I still see LOGMEMORY messages coming from cpu allocations, so it seems this info gets lost somewhere.\r\n\r\nAlso, when graph optimization are turned on, it sometimes returns 0, and I suspect that ctx->device()->GetAllocator() gives me a CPU allocator. This is despite run_metadata and log_device_placement showing the op as existing on GPU. Things go back to normal when setting up session with `tf.OptimizerOptions.L0`"}