{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/276717568", "html_url": "https://github.com/tensorflow/tensorflow/issues/7030#issuecomment-276717568", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7030", "id": 276717568, "node_id": "MDEyOklzc3VlQ29tbWVudDI3NjcxNzU2OA==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-01T17:09:45Z", "updated_at": "2017-02-01T17:12:04Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=463737\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/vrv\">@vrv</a> indeed, I was able to compile it successfully using g++ on Mac and Linux, and released final product here -- <a href=\"https://github.com/yaroslavvb/memory_probe_ops\">https://github.com/yaroslavvb/memory_probe_ops</a></p>\n<p>Curiously, I can build it using Bazel on MacOS without adding that dependency, using same version of bazel (0.4.3), it seems in MacOS the build is not fully hermetic</p>\n<p>The only remaining issue is that cpu allocator always reports 0 bytes allocated. There's this line in <code>allocator.cc</code></p>\n<p><code>static bool cpu_allocator_collect_stats = false; </code></p>\n<p>But it feels like it should be superceded by this line:</p>\n<p><code> if (cpu_allocator_collect_full_stats || LogMemory::IsEnabled()) {</code><br>\nso I'm still tracking that one down</p>", "body_text": "@vrv indeed, I was able to compile it successfully using g++ on Mac and Linux, and released final product here -- https://github.com/yaroslavvb/memory_probe_ops\nCuriously, I can build it using Bazel on MacOS without adding that dependency, using same version of bazel (0.4.3), it seems in MacOS the build is not fully hermetic\nThe only remaining issue is that cpu allocator always reports 0 bytes allocated. There's this line in allocator.cc\nstatic bool cpu_allocator_collect_stats = false; \nBut it feels like it should be superceded by this line:\n if (cpu_allocator_collect_full_stats || LogMemory::IsEnabled()) {\nso I'm still tracking that one down", "body": "@vrv indeed, I was able to compile it successfully using g++ on Mac and Linux, and released final product here -- https://github.com/yaroslavvb/memory_probe_ops\r\n\r\nCuriously, I can build it using Bazel on MacOS without adding that dependency, using same version of bazel (0.4.3), it seems in MacOS the build is not fully hermetic\r\n\r\nThe only remaining issue is that cpu allocator always reports 0 bytes allocated. There's this line in `allocator.cc`\r\n\r\n`static bool cpu_allocator_collect_stats = false;\r\n`\r\n\r\nBut it feels like it should be superceded by this line:\r\n\r\n`  if (cpu_allocator_collect_full_stats || LogMemory::IsEnabled()) {\r\n`\r\nso I'm still tracking that one down"}