{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/422650432", "html_url": "https://github.com/tensorflow/tensorflow/issues/22229#issuecomment-422650432", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/22229", "id": 422650432, "node_id": "MDEyOklzc3VlQ29tbWVudDQyMjY1MDQzMg==", "user": {"login": "Zantares", "id": 38638514, "node_id": "MDQ6VXNlcjM4NjM4NTE0", "avatar_url": "https://avatars0.githubusercontent.com/u/38638514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zantares", "html_url": "https://github.com/Zantares", "followers_url": "https://api.github.com/users/Zantares/followers", "following_url": "https://api.github.com/users/Zantares/following{/other_user}", "gists_url": "https://api.github.com/users/Zantares/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zantares/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zantares/subscriptions", "organizations_url": "https://api.github.com/users/Zantares/orgs", "repos_url": "https://api.github.com/users/Zantares/repos", "events_url": "https://api.github.com/users/Zantares/events{/privacy}", "received_events_url": "https://api.github.com/users/Zantares/received_events", "type": "User", "site_admin": false}, "created_at": "2018-09-19T04:43:15Z", "updated_at": "2018-09-19T04:43:15Z", "author_association": "NONE", "body_html": "<blockquote>\n<p>It is a known issue and I would not call it a bug.</p>\n<p>Theoretically the session configuration should be session-wise, but some of the session config will effect in resource initialization which is difficult to release unless the process is terminated.</p>\n<p>I would suggest you to detect GPU availability before your main TF process starts.</p>\n</blockquote>\n<p>The roof of this issue is <strong>list_devices()</strong> will initialize all available devices in this session, meanwhile the global intra thread pool is created. <strong>is_gpu_available()</strong> is just an instance, user may use this API anywhere, and TF API doc doesn't tell them there's side-effect here:</p>\n<blockquote>\n<p>list_devices<br>\nlist_devices()<br>\nLists available devices in this session.</p>\n<p>devices = sess.list_devices()<br>\nfor d in devices:<br>\nprint(d.name)<br>\nEach element in the list has the following properties: - name: A string with the full name of the device. ex: /job:worker/replica:0/task:3/device:CPU:0 - device_type: The type of the device (e.g. CPU, GPU, TPU.) - memory_limit: The maximum amount of memory available on the device. Note: depending on the device, it is possible the usable memory could be substantially less.</p>\n</blockquote>\n<p>I also listed how to solve this issue - just set the flag <strong>use_global_threadpool_</strong> to false. My question is, what is the effect of changing this flag, or why doesn't TF provide such API to set it?</p>", "body_text": "It is a known issue and I would not call it a bug.\nTheoretically the session configuration should be session-wise, but some of the session config will effect in resource initialization which is difficult to release unless the process is terminated.\nI would suggest you to detect GPU availability before your main TF process starts.\n\nThe roof of this issue is list_devices() will initialize all available devices in this session, meanwhile the global intra thread pool is created. is_gpu_available() is just an instance, user may use this API anywhere, and TF API doc doesn't tell them there's side-effect here:\n\nlist_devices\nlist_devices()\nLists available devices in this session.\ndevices = sess.list_devices()\nfor d in devices:\nprint(d.name)\nEach element in the list has the following properties: - name: A string with the full name of the device. ex: /job:worker/replica:0/task:3/device:CPU:0 - device_type: The type of the device (e.g. CPU, GPU, TPU.) - memory_limit: The maximum amount of memory available on the device. Note: depending on the device, it is possible the usable memory could be substantially less.\n\nI also listed how to solve this issue - just set the flag use_global_threadpool_ to false. My question is, what is the effect of changing this flag, or why doesn't TF provide such API to set it?", "body": "> It is a known issue and I would not call it a bug.\r\n> \r\n> Theoretically the session configuration should be session-wise, but some of the session config will effect in resource initialization which is difficult to release unless the process is terminated.\r\n> \r\n> I would suggest you to detect GPU availability before your main TF process starts.\r\n\r\nThe roof of this issue is **list_devices()** will initialize all available devices in this session, meanwhile the global intra thread pool is created. **is_gpu_available()** is just an instance, user may use this API anywhere, and TF API doc doesn't tell them there's side-effect here:\r\n\r\n> list_devices\r\n> list_devices()\r\n> Lists available devices in this session.\r\n> \r\n> devices = sess.list_devices()\r\n> for d in devices:\r\n>   print(d.name)\r\n> Each element in the list has the following properties: - name: A string with the full name of the device. ex: /job:worker/replica:0/task:3/device:CPU:0 - device_type: The type of the device (e.g. CPU, GPU, TPU.) - memory_limit: The maximum amount of memory available on the device. Note: depending on the device, it is possible the usable memory could be substantially less.\r\n\r\nI also listed how to solve this issue - just set the flag **use_global_threadpool_** to false. My question is, what is the effect of changing this flag, or why doesn't TF provide such API to set it?"}