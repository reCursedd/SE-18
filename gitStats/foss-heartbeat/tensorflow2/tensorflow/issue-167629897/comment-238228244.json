{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/238228244", "html_url": "https://github.com/tensorflow/tensorflow/issues/3507#issuecomment-238228244", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3507", "id": 238228244, "node_id": "MDEyOklzc3VlQ29tbWVudDIzODIyODI0NA==", "user": {"login": "akors", "id": 3023492, "node_id": "MDQ6VXNlcjMwMjM0OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/3023492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akors", "html_url": "https://github.com/akors", "followers_url": "https://api.github.com/users/akors/followers", "following_url": "https://api.github.com/users/akors/following{/other_user}", "gists_url": "https://api.github.com/users/akors/gists{/gist_id}", "starred_url": "https://api.github.com/users/akors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akors/subscriptions", "organizations_url": "https://api.github.com/users/akors/orgs", "repos_url": "https://api.github.com/users/akors/repos", "events_url": "https://api.github.com/users/akors/events{/privacy}", "received_events_url": "https://api.github.com/users/akors/received_events", "type": "User", "site_admin": false}, "created_at": "2016-08-08T13:01:48Z", "updated_at": "2016-08-08T13:01:48Z", "author_association": "NONE", "body_html": "<p>Glad I could help.</p>\n<blockquote>\n<p>I tried your instructions for compilation previously, but I got stuck in the part when it came to editting the CROSSTOOL file as I apt-get install-ed gcc-4.9 on my machine and I couldn't figure out the correct paths to set for the cxx_builtin_include_directory values.</p>\n</blockquote>\n<p>First, for CUDA 8, you need GCC 5.3.1, which is not available in the Repos. You have to compile that manually. Second, here's my patch to the CROSSTOOL file:</p>\n<div class=\"highlight highlight-source-diff\"><pre><span class=\"pl-c1\">diff --git a/third_party/gpus/crosstool/CROSSTOOL b/third_party/gpus/crosstool/CROSSTOOL</span>\nindex 8db81a9..d026738 100644\n<span class=\"pl-md\">--- a/third_party/gpus/crosstool/CROSSTOOL</span>\n<span class=\"pl-mi1\">+++ b/third_party/gpus/crosstool/CROSSTOOL</span>\n<span class=\"pl-mdr\">@@ -50,6 +50,7 @@</span> toolchain {\n   # Use \"-std=c++11\" for nvcc. For consistency, force both the host compiler\n   # and the device compiler to use \"-std=c++11\".\n   cxx_flag: \"-std=c++11\"\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  cxx_flag: \"-D_FORCE_INLINES\"</span>\n   linker_flag: \"-lstdc++\"\n   linker_flag: \"-B/usr/bin/\"\n\n<span class=\"pl-mdr\">@@ -57,8 +58,10 @@</span> toolchain {\n   # used by gcc. That works because bazel currently doesn't track files at\n   # absolute locations and has no remote execution, yet. However, this will need\n   # to be fixed, maybe with auto-detection?\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>  cxx_builtin_include_directory: \"/usr/lib/gcc/\"</span>\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>  cxx_builtin_include_directory: \"/usr/local/include\"</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  cxx_builtin_include_directory: \"/opt/gcc-5.3/lib/gcc/\"</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  cxx_builtin_include_directory: \"/opt/gcc-5.3/local/include\"</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  cxx_builtin_include_directory: \"/opt/gcc-5.3/include\"</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  cxx_builtin_include_directory: \"/usr/local/cuda-8.0/include/\"</span>\n   cxx_builtin_include_directory: \"/usr/include\"\n   tool_path { name: \"gcov\" path: \"/usr/bin/gcov\" }\n</pre></div>", "body_text": "Glad I could help.\n\nI tried your instructions for compilation previously, but I got stuck in the part when it came to editting the CROSSTOOL file as I apt-get install-ed gcc-4.9 on my machine and I couldn't figure out the correct paths to set for the cxx_builtin_include_directory values.\n\nFirst, for CUDA 8, you need GCC 5.3.1, which is not available in the Repos. You have to compile that manually. Second, here's my patch to the CROSSTOOL file:\ndiff --git a/third_party/gpus/crosstool/CROSSTOOL b/third_party/gpus/crosstool/CROSSTOOL\nindex 8db81a9..d026738 100644\n--- a/third_party/gpus/crosstool/CROSSTOOL\n+++ b/third_party/gpus/crosstool/CROSSTOOL\n@@ -50,6 +50,7 @@ toolchain {\n   # Use \"-std=c++11\" for nvcc. For consistency, force both the host compiler\n   # and the device compiler to use \"-std=c++11\".\n   cxx_flag: \"-std=c++11\"\n+  cxx_flag: \"-D_FORCE_INLINES\"\n   linker_flag: \"-lstdc++\"\n   linker_flag: \"-B/usr/bin/\"\n\n@@ -57,8 +58,10 @@ toolchain {\n   # used by gcc. That works because bazel currently doesn't track files at\n   # absolute locations and has no remote execution, yet. However, this will need\n   # to be fixed, maybe with auto-detection?\n-  cxx_builtin_include_directory: \"/usr/lib/gcc/\"\n-  cxx_builtin_include_directory: \"/usr/local/include\"\n+  cxx_builtin_include_directory: \"/opt/gcc-5.3/lib/gcc/\"\n+  cxx_builtin_include_directory: \"/opt/gcc-5.3/local/include\"\n+  cxx_builtin_include_directory: \"/opt/gcc-5.3/include\"\n+  cxx_builtin_include_directory: \"/usr/local/cuda-8.0/include/\"\n   cxx_builtin_include_directory: \"/usr/include\"\n   tool_path { name: \"gcov\" path: \"/usr/bin/gcov\" }", "body": "Glad I could help.\n\n> I tried your instructions for compilation previously, but I got stuck in the part when it came to editting the CROSSTOOL file as I apt-get install-ed gcc-4.9 on my machine and I couldn't figure out the correct paths to set for the cxx_builtin_include_directory values.\n\nFirst, for CUDA 8, you need GCC 5.3.1, which is not available in the Repos. You have to compile that manually. Second, here's my patch to the CROSSTOOL file:\n\n``` diff\ndiff --git a/third_party/gpus/crosstool/CROSSTOOL b/third_party/gpus/crosstool/CROSSTOOL\nindex 8db81a9..d026738 100644\n--- a/third_party/gpus/crosstool/CROSSTOOL\n+++ b/third_party/gpus/crosstool/CROSSTOOL\n@@ -50,6 +50,7 @@ toolchain {\n   # Use \"-std=c++11\" for nvcc. For consistency, force both the host compiler\n   # and the device compiler to use \"-std=c++11\".\n   cxx_flag: \"-std=c++11\"\n+  cxx_flag: \"-D_FORCE_INLINES\"\n   linker_flag: \"-lstdc++\"\n   linker_flag: \"-B/usr/bin/\"\n\n@@ -57,8 +58,10 @@ toolchain {\n   # used by gcc. That works because bazel currently doesn't track files at\n   # absolute locations and has no remote execution, yet. However, this will need\n   # to be fixed, maybe with auto-detection?\n-  cxx_builtin_include_directory: \"/usr/lib/gcc/\"\n-  cxx_builtin_include_directory: \"/usr/local/include\"\n+  cxx_builtin_include_directory: \"/opt/gcc-5.3/lib/gcc/\"\n+  cxx_builtin_include_directory: \"/opt/gcc-5.3/local/include\"\n+  cxx_builtin_include_directory: \"/opt/gcc-5.3/include\"\n+  cxx_builtin_include_directory: \"/usr/local/cuda-8.0/include/\"\n   cxx_builtin_include_directory: \"/usr/include\"\n   tool_path { name: \"gcov\" path: \"/usr/bin/gcov\" }\n\n```\n"}