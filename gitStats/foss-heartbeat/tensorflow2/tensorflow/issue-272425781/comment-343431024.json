{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/343431024", "html_url": "https://github.com/tensorflow/tensorflow/pull/14390#issuecomment-343431024", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14390", "id": 343431024, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MzQzMTAyNA==", "user": {"login": "facaiy", "id": 1112263, "node_id": "MDQ6VXNlcjExMTIyNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1112263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facaiy", "html_url": "https://github.com/facaiy", "followers_url": "https://api.github.com/users/facaiy/followers", "following_url": "https://api.github.com/users/facaiy/following{/other_user}", "gists_url": "https://api.github.com/users/facaiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/facaiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facaiy/subscriptions", "organizations_url": "https://api.github.com/users/facaiy/orgs", "repos_url": "https://api.github.com/users/facaiy/repos", "events_url": "https://api.github.com/users/facaiy/events{/privacy}", "received_events_url": "https://api.github.com/users/facaiy/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-10T10:04:27Z", "updated_at": "2017-11-11T03:51:28Z", "author_association": "MEMBER", "body_html": "<p><del>I revise <code>auxiliary_name_scope</code> to support name scope argument, and summary as below:</del></p>\n<ul>\n<li><del><code>auxiliary_name_scope=True</code>, create new name scope as before by default.</del></li>\n<li><del><code>auxiliary_name_scope=None</code> or <code>False</code>, don't create any name scope.</del></li>\n<li><del><code>auxiliary_name_scope=some_name_scope</code>, reuse it if <code>some_name_scope</code>  is <code>name_scope</code>.</del></li>\n</ul>\n<p>Now we can write one line code to reuse both variable_scope and its name_scope:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.variable_scope(s, <span class=\"pl-v\">auxiliary_name_scope</span><span class=\"pl-k\">=</span>s.original_name_scope) <span class=\"pl-k\">as</span> ss:\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> do something</span></pre></div>\n<p>or</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">with</span> tf.variable_scope(s, <span class=\"pl-v\">auxiliary_name_scope</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">None</span>) <span class=\"pl-k\">as</span> ss:\n     <span class=\"pl-k\">with</span> tf.name_scope(ss.original_name_scope) <span class=\"pl-k\">as</span> n:\n          <span class=\"pl-c\"><span class=\"pl-c\">#</span> do something</span></pre></div>", "body_text": "I revise auxiliary_name_scope to support name scope argument, and summary as below:\n\nauxiliary_name_scope=True, create new name scope as before by default.\nauxiliary_name_scope=None or False, don't create any name scope.\nauxiliary_name_scope=some_name_scope, reuse it if some_name_scope  is name_scope.\n\nNow we can write one line code to reuse both variable_scope and its name_scope:\nwith tf.variable_scope(s, auxiliary_name_scope=s.original_name_scope) as ss:\n    # do something\nor\nwith tf.variable_scope(s, auxiliary_name_scope=None) as ss:\n     with tf.name_scope(ss.original_name_scope) as n:\n          # do something", "body": "~I revise `auxiliary_name_scope` to support name scope argument, and summary as below:~\r\n+ ~`auxiliary_name_scope=True`, create new name scope as before by default.~\r\n+ ~`auxiliary_name_scope=None` or `False`, don't create any name scope.~\r\n+ ~`auxiliary_name_scope=some_name_scope`, reuse it if `some_name_scope`  is `name_scope`.~\r\n\r\nNow we can write one line code to reuse both variable_scope and its name_scope:\r\n\r\n```python\r\nwith tf.variable_scope(s, auxiliary_name_scope=s.original_name_scope) as ss:\r\n    # do something\r\n```\r\nor\r\n```python\r\nwith tf.variable_scope(s, auxiliary_name_scope=None) as ss:\r\n     with tf.name_scope(ss.original_name_scope) as n:\r\n          # do something\r\n```"}