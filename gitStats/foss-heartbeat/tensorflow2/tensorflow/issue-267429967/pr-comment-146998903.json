{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/146998903", "pull_request_review_id": 72024566, "id": 146998903, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0Njk5ODkwMw==", "diff_hunk": "@@ -0,0 +1,252 @@\n+# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"The Cauchy distribution class.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import math\n+\n+from tensorflow.python.framework import constant_op\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import ops\n+from tensorflow.python.framework import tensor_shape\n+from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import check_ops\n+from tensorflow.python.ops import math_ops\n+from tensorflow.python.ops import random_ops\n+from tensorflow.python.ops.distributions import distribution\n+\n+\n+__all__ = [\n+    \"Cauchy\",\n+    \"CauchyWithSoftplusScale\",\n+]\n+\n+\n+class Cauchy(distribution.Distribution):\n+  \"\"\"The Cauchy distribution with location `loc` and scale `scale`.\n+\n+  #### Mathematical details\n+\n+  The probability density function (pdf) is,\n+\n+  ```none\n+  pdf(x; loc, scale) = 1 / (pi*scale*(1+((x-loc)/scale)**2))\n+  ```\n+  where `loc` is the location, and `scale` is the scale.\n+\n+  The Cauchy distribution is a member of the [location-scale family](\n+  https://en.wikipedia.org/wiki/Location-scale_family), i.e.\n+\n+  ```none\n+  X ~ Cauchy(loc=0, scale=1)\n+  Y ~ Cauchy(loc=loc, scale=scale)\n+  Y = loc + scale * X\n+  ```\n+\n+  #### Examples\n+\n+  Examples of initialization of one or a batch of distributions.\n+\n+  ```python\n+  # Define a single scalar Cauchy distribution.\n+  dist = Cauchy(loc=0., scale=3.)\n+\n+  # Evaluate the cdf at 1, returning a scalar.\n+  dist.cdf(1.)\n+\n+  # Define a batch of two scalar valued Cauchy distributions.\n+  dist = Cauchy(loc=[1, 2.], scale=[11, 22.])\n+\n+  # Evaluate the pdf of the first distribution on 0, and the second on 1.5,\n+  # returning a length two tensor.\n+  dist.prob([0, 1.5])\n+\n+  # Get 3 samples, returning a 3 x 2 tensor.\n+  dist.sample([3])\n+  ```\n+\n+  Arguments are broadcast when possible.\n+\n+  ```python\n+  # Define a batch of two scalar valued Cauchy distributions.\n+  # Both have median 1, but different scales.\n+  dist = tf.contrib.distributions.Cauchy(loc=1., scale=[11, 22.])\n+  # Evaluate the pdf of both distributions on the same point, 3.0,\n+  # returning a length 2 tensor.\n+  dist.prob(3.0)\n+  ```\n+  \"\"\"\n+\n+  def __init__(self,\n+               loc,\n+               scale,\n+               validate_args=False,\n+               allow_nan_stats=True,\n+               name=\"Cauchy\"):\n+    \"\"\"Construct Cauchy distributions with loc and and scale `loc` and `scale`.\n+\n+    The parameters `loc` and `scale` must be shaped in a way that supports\n+    broadcasting (e.g. `loc + scale` is a valid operation).\n+\n+    Args:\n+      loc: Floating point tensor; the modes of the distribution(s).\n+      scale: Floating point tensor; the locations of the distribution(s).\n+        Must contain only positive values.\n+      validate_args: Python `bool`, default `False`. When `True` distribution\n+        parameters are checked for validity despite possibly degrading runtime\n+        performance. When `False` invalid inputs may silently render incorrect\n+        outputs.\n+      allow_nan_stats: Python `bool`, default `True`. When `True`,\n+        statistics (e.g., mean, mode, variance) use the value \"`NaN`\" to\n+        indicate the result is undefined. When `False`, an exception is raised\n+        if one or more of the statistic's batch members are undefined.\n+      name: Python `str` name prefixed to Ops created by this class.\n+\n+    Raises:\n+      TypeError: if `loc` and `scale` have different `dtype`.\n+    \"\"\"\n+    parameters = locals()\n+    with ops.name_scope(name, values=[loc, scale]):\n+      with ops.control_dependencies([check_ops.assert_positive(scale)] if\n+                                    validate_args else []):\n+        self._loc = array_ops.identity(loc, name=\"loc\")\n+        self._scale = array_ops.identity(scale, name=\"scale\")\n+        check_ops.assert_same_float_dtype([self._loc, self._scale])\n+    super(Cauchy, self).__init__(\n+        dtype=self._scale.dtype,\n+        reparameterization_type=distribution.FULLY_REPARAMETERIZED,\n+        validate_args=validate_args,\n+        allow_nan_stats=allow_nan_stats,\n+        parameters=parameters,\n+        graph_parents=[self._loc, self._scale],\n+        name=name)\n+\n+  @staticmethod\n+  def _param_shapes(sample_shape):\n+    return dict(\n+        zip((\"loc\", \"scale\"), ([ops.convert_to_tensor(\n+            sample_shape, dtype=dtypes.int32)] * 2)))\n+\n+  @property\n+  def loc(self):\n+    \"\"\"Distribution parameter for the mean.\"\"\"\n+    return self._loc\n+\n+  @property\n+  def scale(self):\n+    \"\"\"Distribution parameter for standard deviation.\"\"\"\n+    return self._scale\n+\n+  def _batch_shape_tensor(self):\n+    return array_ops.broadcast_dynamic_shape(\n+        array_ops.shape(self.loc),\n+        array_ops.shape(self.scale))\n+\n+  def _batch_shape(self):\n+    return array_ops.broadcast_static_shape(\n+        self.loc.get_shape(),\n+        self.scale.get_shape())\n+\n+  def _event_shape_tensor(self):\n+    return constant_op.constant([], dtype=dtypes.int32)\n+\n+  def _event_shape(self):\n+    return tensor_shape.scalar()\n+\n+  def _sample_n(self, n, seed=None):\n+    shape = array_ops.concat([[n], self.batch_shape_tensor()], 0)\n+    probs = random_ops.random_uniform(\n+        shape=shape, minval=0., maxval=1., dtype=self.loc.dtype, seed=seed)\n+    return self._quantile(probs)\n+\n+  def _log_prob(self, x):\n+    return self._log_unnormalized_prob(x) - self._log_normalization()\n+\n+  def _prob(self, x):", "path": "tensorflow/contrib/distributions/python/ops/cauchy.py", "position": null, "original_position": 180, "commit_id": "161fe1defd2234013e357c776c14ac75491be3ed", "original_commit_id": "881bf8dc8a99b6773cb97f60f3e20eaf12b02156", "user": {"login": "jvdillon", "id": 1137078, "node_id": "MDQ6VXNlcjExMzcwNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1137078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvdillon", "html_url": "https://github.com/jvdillon", "followers_url": "https://api.github.com/users/jvdillon/followers", "following_url": "https://api.github.com/users/jvdillon/following{/other_user}", "gists_url": "https://api.github.com/users/jvdillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvdillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvdillon/subscriptions", "organizations_url": "https://api.github.com/users/jvdillon/orgs", "repos_url": "https://api.github.com/users/jvdillon/repos", "events_url": "https://api.github.com/users/jvdillon/events{/privacy}", "received_events_url": "https://api.github.com/users/jvdillon/received_events", "type": "User", "site_admin": false}, "body": "Not needed; base class does this automatically.", "created_at": "2017-10-25T21:59:38Z", "updated_at": "2017-10-30T23:39:14Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13894#discussion_r146998903", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13894", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/146998903"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13894#discussion_r146998903"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13894"}}, "body_html": "<p>Not needed; base class does this automatically.</p>", "body_text": "Not needed; base class does this automatically."}