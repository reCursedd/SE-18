{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/409652021", "html_url": "https://github.com/tensorflow/tensorflow/issues/21250#issuecomment-409652021", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21250", "id": 409652021, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTY1MjAyMQ==", "user": {"login": "annemenini", "id": 13631130, "node_id": "MDQ6VXNlcjEzNjMxMTMw", "avatar_url": "https://avatars0.githubusercontent.com/u/13631130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/annemenini", "html_url": "https://github.com/annemenini", "followers_url": "https://api.github.com/users/annemenini/followers", "following_url": "https://api.github.com/users/annemenini/following{/other_user}", "gists_url": "https://api.github.com/users/annemenini/gists{/gist_id}", "starred_url": "https://api.github.com/users/annemenini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/annemenini/subscriptions", "organizations_url": "https://api.github.com/users/annemenini/orgs", "repos_url": "https://api.github.com/users/annemenini/repos", "events_url": "https://api.github.com/users/annemenini/events{/privacy}", "received_events_url": "https://api.github.com/users/annemenini/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-01T17:17:24Z", "updated_at": "2018-08-01T17:17:24Z", "author_association": "NONE", "body_html": "<p>The floating point complex numbers seem to be working as well. See bellow the new test case and output.<br>\nI am checking now if there is a unit test to be added and will start the pull request.</p>\n<h3>Source:</h3>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\n\nnp.random.seed(seed=0)\na = np.random.rand(2, 2) + 1j * np.random.rand(2, 2)\n\ninput1 = tf.placeholder(tf.complex64, shape=[2,2], name=\"input1\")\ninput2 = tf.placeholder(tf.float32, shape=[2, 2], name=\"input2\")\n\ninput1 = tf.Print(input1, [input1], \"input1: \")\ninput1 = tf.Print(input1, [tf.real(input1)], \"input1.real: \")\ninput2 = tf.Print(input2, [input2], \"input2: \")\n\noutput1 = tf.identity(input1, name=\"output1\")\noutput2 = tf.identity(input2, name=\"output2\")\n\nsess = tf.InteractiveSession()\n\nout1, out2 = sess.run([\"output1:0\", \"output2:0\"], {\"input1:0\": a, \"input2:0\": a.real})\n</code></pre>\n<h3>Output:</h3>\n<pre><code>input2: [[0.548813522 0.715189338][0.602763355]...]input1: [[0.548813522+0.423654795j 0.715189338+0.64589411j][0.602763355+0.437587202j]...]\n\ninput1.real: [[0.548813522 0.715189338][0.602763355]...]\n</code></pre>\n<p>Great to hear there are plans to improve even further the tf.Print, this feature is amazingly useful.</p>", "body_text": "The floating point complex numbers seem to be working as well. See bellow the new test case and output.\nI am checking now if there is a unit test to be added and will start the pull request.\nSource:\nimport numpy as np\nimport tensorflow as tf\n\n\nnp.random.seed(seed=0)\na = np.random.rand(2, 2) + 1j * np.random.rand(2, 2)\n\ninput1 = tf.placeholder(tf.complex64, shape=[2,2], name=\"input1\")\ninput2 = tf.placeholder(tf.float32, shape=[2, 2], name=\"input2\")\n\ninput1 = tf.Print(input1, [input1], \"input1: \")\ninput1 = tf.Print(input1, [tf.real(input1)], \"input1.real: \")\ninput2 = tf.Print(input2, [input2], \"input2: \")\n\noutput1 = tf.identity(input1, name=\"output1\")\noutput2 = tf.identity(input2, name=\"output2\")\n\nsess = tf.InteractiveSession()\n\nout1, out2 = sess.run([\"output1:0\", \"output2:0\"], {\"input1:0\": a, \"input2:0\": a.real})\n\nOutput:\ninput2: [[0.548813522 0.715189338][0.602763355]...]input1: [[0.548813522+0.423654795j 0.715189338+0.64589411j][0.602763355+0.437587202j]...]\n\ninput1.real: [[0.548813522 0.715189338][0.602763355]...]\n\nGreat to hear there are plans to improve even further the tf.Print, this feature is amazingly useful.", "body": "The floating point complex numbers seem to be working as well. See bellow the new test case and output. \r\nI am checking now if there is a unit test to be added and will start the pull request.\r\n### Source:\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n\r\nnp.random.seed(seed=0)\r\na = np.random.rand(2, 2) + 1j * np.random.rand(2, 2)\r\n\r\ninput1 = tf.placeholder(tf.complex64, shape=[2,2], name=\"input1\")\r\ninput2 = tf.placeholder(tf.float32, shape=[2, 2], name=\"input2\")\r\n\r\ninput1 = tf.Print(input1, [input1], \"input1: \")\r\ninput1 = tf.Print(input1, [tf.real(input1)], \"input1.real: \")\r\ninput2 = tf.Print(input2, [input2], \"input2: \")\r\n\r\noutput1 = tf.identity(input1, name=\"output1\")\r\noutput2 = tf.identity(input2, name=\"output2\")\r\n\r\nsess = tf.InteractiveSession()\r\n\r\nout1, out2 = sess.run([\"output1:0\", \"output2:0\"], {\"input1:0\": a, \"input2:0\": a.real})\r\n```\r\n### Output:\r\n```\r\ninput2: [[0.548813522 0.715189338][0.602763355]...]input1: [[0.548813522+0.423654795j 0.715189338+0.64589411j][0.602763355+0.437587202j]...]\r\n\r\ninput1.real: [[0.548813522 0.715189338][0.602763355]...]\r\n```\r\nGreat to hear there are plans to improve even further the tf.Print, this feature is amazingly useful."}