{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/390039177", "html_url": "https://github.com/tensorflow/tensorflow/pull/19136#issuecomment-390039177", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19136", "id": 390039177, "node_id": "MDEyOklzc3VlQ29tbWVudDM5MDAzOTE3Nw==", "user": {"login": "jktomer", "id": 7492685, "node_id": "MDQ6VXNlcjc0OTI2ODU=", "avatar_url": "https://avatars3.githubusercontent.com/u/7492685?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jktomer", "html_url": "https://github.com/jktomer", "followers_url": "https://api.github.com/users/jktomer/followers", "following_url": "https://api.github.com/users/jktomer/following{/other_user}", "gists_url": "https://api.github.com/users/jktomer/gists{/gist_id}", "starred_url": "https://api.github.com/users/jktomer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jktomer/subscriptions", "organizations_url": "https://api.github.com/users/jktomer/orgs", "repos_url": "https://api.github.com/users/jktomer/repos", "events_url": "https://api.github.com/users/jktomer/events{/privacy}", "received_events_url": "https://api.github.com/users/jktomer/received_events", "type": "User", "site_admin": false}, "created_at": "2018-05-17T22:57:46Z", "updated_at": "2018-05-17T22:57:46Z", "author_association": "NONE", "body_html": "<blockquote>\n<p>setenv: If you are always going to set the same values (KMP_BLOCKTIME=1 and OMP_PROC_BIND=true) and nobody else is using the variables, I don't think race conditions matter.</p>\n</blockquote>\n<p>Unfortunately this is not true. setenv() is inherently thread-hostile and can't really be fixed. The only safe way to do any changing of the environment is to make sure no other thread is live when you call setenv(), ideally by doing it so early that no other thread could even have been started.</p>\n<p>(setenv() modifies the global char** environ, possibly reallocating it; getenv() iterates over environ, which is also a globally-visible symbol that anyone else can iterate over directly. POSIX doesn't specify any locking on setenv or getenv, and at least glibc has a lock around the former but not the latter, so concurrent calls to setenv() and either getenv() or direct iteration over environ will cause segfaults.)</p>", "body_text": "setenv: If you are always going to set the same values (KMP_BLOCKTIME=1 and OMP_PROC_BIND=true) and nobody else is using the variables, I don't think race conditions matter.\n\nUnfortunately this is not true. setenv() is inherently thread-hostile and can't really be fixed. The only safe way to do any changing of the environment is to make sure no other thread is live when you call setenv(), ideally by doing it so early that no other thread could even have been started.\n(setenv() modifies the global char** environ, possibly reallocating it; getenv() iterates over environ, which is also a globally-visible symbol that anyone else can iterate over directly. POSIX doesn't specify any locking on setenv or getenv, and at least glibc has a lock around the former but not the latter, so concurrent calls to setenv() and either getenv() or direct iteration over environ will cause segfaults.)", "body": "> setenv: If you are always going to set the same values (KMP_BLOCKTIME=1 and OMP_PROC_BIND=true) and nobody else is using the variables, I don't think race conditions matter.\r\n\r\nUnfortunately this is not true. setenv() is inherently thread-hostile and can't really be fixed. The only safe way to do any changing of the environment is to make sure no other thread is live when you call setenv(), ideally by doing it so early that no other thread could even have been started.\r\n\r\n(setenv() modifies the global char** environ, possibly reallocating it; getenv() iterates over environ, which is also a globally-visible symbol that anyone else can iterate over directly. POSIX doesn't specify any locking on setenv or getenv, and at least glibc has a lock around the former but not the latter, so concurrent calls to setenv() and either getenv() or direct iteration over environ will cause segfaults.)"}