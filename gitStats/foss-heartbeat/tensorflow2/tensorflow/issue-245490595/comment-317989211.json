{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/317989211", "html_url": "https://github.com/tensorflow/tensorflow/issues/11758#issuecomment-317989211", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11758", "id": 317989211, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzk4OTIxMQ==", "user": {"login": "mbchang", "id": 6439365, "node_id": "MDQ6VXNlcjY0MzkzNjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6439365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbchang", "html_url": "https://github.com/mbchang", "followers_url": "https://api.github.com/users/mbchang/followers", "following_url": "https://api.github.com/users/mbchang/following{/other_user}", "gists_url": "https://api.github.com/users/mbchang/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbchang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbchang/subscriptions", "organizations_url": "https://api.github.com/users/mbchang/orgs", "repos_url": "https://api.github.com/users/mbchang/repos", "events_url": "https://api.github.com/users/mbchang/events{/privacy}", "received_events_url": "https://api.github.com/users/mbchang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-26T08:43:09Z", "updated_at": "2017-07-26T08:43:09Z", "author_association": "NONE", "body_html": "<p>When I turn it on, I get the error:</p>\n<pre><code>&gt;&gt;&gt; import tensorflow as tf\n&gt;&gt;&gt; sess = tf.Session()\n&gt;&gt;&gt; t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0], validate_args=True)\n&gt;&gt;&gt; print(sess.run(t.sample([1])))\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"[...]/python2.7/site-packages/tensorflow/python/client/session.py\", line 789, in run\n    run_metadata_ptr)\n  File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 997, in _run\n    feed_dict_string, options, run_metadata)\n  File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1132, in _do_run\n    target_list, options, run_metadata)\n  File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1152, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: assertion failed: [probs does not sum to 1.] [Condition x ~= y did not hold element-wise: x = ] [Categorical_2/Categorical/validate_probs/Sum:0] [0] [y = ] [Categorical_2/Categorical/validate_probs/Const:0] [1]\n\t [[Node: Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert = Assert[T=[DT_STRING, DT_STRING, DT_STRING, DT_FLOAT, DT_STRING, DT_STRING, DT_FLOAT], summarize=3, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_0, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_2, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_4, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_5, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_2)]]\n</code></pre>\n<p>It get the error only when I call <code>sess.run(t.sample([1])</code>, but not when I construct the distribution <code>t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0], validate_args=True)</code>. What is the design choice for this? Also, I am curious about the design choice behind <code>validate_args</code>, because it is unintuitive to mean that an invalid distribution would be useful at all, and so validating the arguments would be necessary in any case.</p>", "body_text": "When I turn it on, I get the error:\n>>> import tensorflow as tf\n>>> sess = tf.Session()\n>>> t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0], validate_args=True)\n>>> print(sess.run(t.sample([1])))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"[...]/python2.7/site-packages/tensorflow/python/client/session.py\", line 789, in run\n    run_metadata_ptr)\n  File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 997, in _run\n    feed_dict_string, options, run_metadata)\n  File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1132, in _do_run\n    target_list, options, run_metadata)\n  File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1152, in _do_call\n    raise type(e)(node_def, op, message)\ntensorflow.python.framework.errors_impl.InvalidArgumentError: assertion failed: [probs does not sum to 1.] [Condition x ~= y did not hold element-wise: x = ] [Categorical_2/Categorical/validate_probs/Sum:0] [0] [y = ] [Categorical_2/Categorical/validate_probs/Const:0] [1]\n\t [[Node: Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert = Assert[T=[DT_STRING, DT_STRING, DT_STRING, DT_FLOAT, DT_STRING, DT_STRING, DT_FLOAT], summarize=3, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_0, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_2, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_4, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_5, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_2)]]\n\nIt get the error only when I call sess.run(t.sample([1]), but not when I construct the distribution t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0], validate_args=True). What is the design choice for this? Also, I am curious about the design choice behind validate_args, because it is unintuitive to mean that an invalid distribution would be useful at all, and so validating the arguments would be necessary in any case.", "body": "When I turn it on, I get the error:\r\n```\r\n>>> import tensorflow as tf\r\n>>> sess = tf.Session()\r\n>>> t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0], validate_args=True)\r\n>>> print(sess.run(t.sample([1])))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"[...]/python2.7/site-packages/tensorflow/python/client/session.py\", line 789, in run\r\n    run_metadata_ptr)\r\n  File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 997, in _run\r\n    feed_dict_string, options, run_metadata)\r\n  File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1132, in _do_run\r\n    target_list, options, run_metadata)\r\n  File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1152, in _do_call\r\n    raise type(e)(node_def, op, message)\r\ntensorflow.python.framework.errors_impl.InvalidArgumentError: assertion failed: [probs does not sum to 1.] [Condition x ~= y did not hold element-wise: x = ] [Categorical_2/Categorical/validate_probs/Sum:0] [0] [y = ] [Categorical_2/Categorical/validate_probs/Const:0] [1]\r\n\t [[Node: Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert = Assert[T=[DT_STRING, DT_STRING, DT_STRING, DT_FLOAT, DT_STRING, DT_STRING, DT_FLOAT], summarize=3, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_0, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_2, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_4, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_5, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_2)]]\r\n```\r\nIt get the error only when I call `sess.run(t.sample([1])`, but not when I construct the distribution `t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0], validate_args=True)`. What is the design choice for this? Also, I am curious about the design choice behind `validate_args`, because it is unintuitive to mean that an invalid distribution would be useful at all, and so validating the arguments would be necessary in any case."}