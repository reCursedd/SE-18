{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/318045593", "html_url": "https://github.com/tensorflow/tensorflow/issues/11758#issuecomment-318045593", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11758", "id": 318045593, "node_id": "MDEyOklzc3VlQ29tbWVudDMxODA0NTU5Mw==", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-26T12:59:26Z", "updated_at": "2017-07-26T12:59:26Z", "author_association": "CONTRIBUTOR", "body_html": "<div class=\"email-fragment\">validate_args is very expensive, especially when on a GPU.  So it's\ndisabled by default.  Turn it on when developing models.</div>\n<span class=\"email-hidden-toggle\"><a href=\"#\">\u2026</a></span><div class=\"email-hidden-reply\">\n<div class=\"email-quoted-reply\">On Jul 26, 2017 1:44 AM, \"mbchang\" ***@***.***&gt; wrote:\n When I turn it on, I get the error:\n\n &gt;&gt;&gt; import tensorflow as tf\n &gt;&gt;&gt; sess = tf.Session()\n &gt;&gt;&gt; t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0], validate_args=True)\n &gt;&gt;&gt; print(sess.run(t.sample([1])))\n Traceback (most recent call last):\n   File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n   File \"[...]/python2.7/site-packages/tensorflow/python/client/session.py\", line 789, in run\n     run_metadata_ptr)\n   File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 997, in _run\n     feed_dict_string, options, run_metadata)\n   File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1132, in _do_run\n     target_list, options, run_metadata)\n   File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1152, in _do_call\n     raise type(e)(node_def, op, message)\n tensorflow.python.framework.errors_impl.InvalidArgumentError: assertion failed: [probs does not sum to 1.] [Condition x ~= y did not hold element-wise: x = ] [Categorical_2/Categorical/validate_probs/Sum:0] [0] [y = ] [Categorical_2/Categorical/validate_probs/Const:0] [1]\n \t [[Node: Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert = Assert[T=[DT_STRING, DT_STRING, DT_STRING, DT_FLOAT, DT_STRING, DT_STRING, DT_FLOAT], summarize=3, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_0, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_2, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_4, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_5, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_2)]]\n\n It get the error only when I call sess.run(t.sample([1]), but not when I\n construct the distribution t = tf.contrib.distributions.\n Categorical(probs=[0.0,0.0,0.0], validate_args=True). What is the design\n choice for this? Also, I am curious about the design choice behind\n validate_args, because it is unintuitive to mean that an invalid\n distribution would be useful at all, and so validating the arguments would\n be necessary in any case.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n &lt;<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"245490595\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/11758\" href=\"https://github.com/tensorflow/tensorflow/issues/11758#issuecomment-317989211\">#11758 (comment)</a>&gt;,\n or mute the thread\n &lt;<a href=\"https://github.com/notifications/unsubscribe-auth/ABtim3CMdscxD-Oubw5GEI2JdPLGr0mvks5sRvxSgaJpZM4Oi75q\">https://github.com/notifications/unsubscribe-auth/ABtim3CMdscxD-Oubw5GEI2JdPLGr0mvks5sRvxSgaJpZM4Oi75q</a>&gt;\n .\n</div>\n<div class=\"email-fragment\"></div>\n</div>", "body_text": "validate_args is very expensive, especially when on a GPU.  So it's\ndisabled by default.  Turn it on when developing models.\n\u2026\nOn Jul 26, 2017 1:44 AM, \"mbchang\" ***@***.***> wrote:\n When I turn it on, I get the error:\n\n >>> import tensorflow as tf\n >>> sess = tf.Session()\n >>> t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0], validate_args=True)\n >>> print(sess.run(t.sample([1])))\n Traceback (most recent call last):\n   File \"<stdin>\", line 1, in <module>\n   File \"[...]/python2.7/site-packages/tensorflow/python/client/session.py\", line 789, in run\n     run_metadata_ptr)\n   File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 997, in _run\n     feed_dict_string, options, run_metadata)\n   File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1132, in _do_run\n     target_list, options, run_metadata)\n   File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1152, in _do_call\n     raise type(e)(node_def, op, message)\n tensorflow.python.framework.errors_impl.InvalidArgumentError: assertion failed: [probs does not sum to 1.] [Condition x ~= y did not hold element-wise: x = ] [Categorical_2/Categorical/validate_probs/Sum:0] [0] [y = ] [Categorical_2/Categorical/validate_probs/Const:0] [1]\n \t [[Node: Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert = Assert[T=[DT_STRING, DT_STRING, DT_STRING, DT_FLOAT, DT_STRING, DT_STRING, DT_FLOAT], summarize=3, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_0, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_2, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_4, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_5, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_2)]]\n\n It get the error only when I call sess.run(t.sample([1]), but not when I\n construct the distribution t = tf.contrib.distributions.\n Categorical(probs=[0.0,0.0,0.0], validate_args=True). What is the design\n choice for this? Also, I am curious about the design choice behind\n validate_args, because it is unintuitive to mean that an invalid\n distribution would be useful at all, and so validating the arguments would\n be necessary in any case.\n\n \u2014\n You are receiving this because you were mentioned.\n Reply to this email directly, view it on GitHub\n <#11758 (comment)>,\n or mute the thread\n <https://github.com/notifications/unsubscribe-auth/ABtim3CMdscxD-Oubw5GEI2JdPLGr0mvks5sRvxSgaJpZM4Oi75q>\n .", "body": "validate_args is very expensive, especially when on a GPU.  So it's\ndisabled by default.  Turn it on when developing models.\n\nOn Jul 26, 2017 1:44 AM, \"mbchang\" <notifications@github.com> wrote:\n\n> When I turn it on, I get the error:\n>\n> >>> import tensorflow as tf\n> >>> sess = tf.Session()\n> >>> t = tf.contrib.distributions.Categorical(probs=[0.0,0.0,0.0], validate_args=True)\n> >>> print(sess.run(t.sample([1])))\n> Traceback (most recent call last):\n>   File \"<stdin>\", line 1, in <module>\n>   File \"[...]/python2.7/site-packages/tensorflow/python/client/session.py\", line 789, in run\n>     run_metadata_ptr)\n>   File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 997, in _run\n>     feed_dict_string, options, run_metadata)\n>   File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1132, in _do_run\n>     target_list, options, run_metadata)\n>   File \"[...]/lib/python2.7/site-packages/tensorflow/python/client/session.py\", line 1152, in _do_call\n>     raise type(e)(node_def, op, message)\n> tensorflow.python.framework.errors_impl.InvalidArgumentError: assertion failed: [probs does not sum to 1.] [Condition x ~= y did not hold element-wise: x = ] [Categorical_2/Categorical/validate_probs/Sum:0] [0] [y = ] [Categorical_2/Categorical/validate_probs/Const:0] [1]\n> \t [[Node: Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert = Assert[T=[DT_STRING, DT_STRING, DT_STRING, DT_FLOAT, DT_STRING, DT_STRING, DT_FLOAT], summarize=3, _device=\"/job:localhost/replica:0/task:0/cpu:0\"](Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_0, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_2, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_1, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_4, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/data_5, Categorical_2/Categorical/validate_probs/assert_close/Assert/AssertGuard/Assert/Switch_2)]]\n>\n> It get the error only when I call sess.run(t.sample([1]), but not when I\n> construct the distribution t = tf.contrib.distributions.\n> Categorical(probs=[0.0,0.0,0.0], validate_args=True). What is the design\n> choice for this? Also, I am curious about the design choice behind\n> validate_args, because it is unintuitive to mean that an invalid\n> distribution would be useful at all, and so validating the arguments would\n> be necessary in any case.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/tensorflow/tensorflow/issues/11758#issuecomment-317989211>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABtim3CMdscxD-Oubw5GEI2JdPLGr0mvks5sRvxSgaJpZM4Oi75q>\n> .\n>\n"}