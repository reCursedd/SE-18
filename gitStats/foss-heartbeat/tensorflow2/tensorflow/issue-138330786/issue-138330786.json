{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1378", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1378/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1378/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1378/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1378", "id": 138330786, "node_id": "MDU6SXNzdWUxMzgzMzA3ODY=", "number": 1378, "title": "load_op_library breaks when loading 2 different .so ", "user": {"login": "bcarpenter-pub", "id": 16929143, "node_id": "MDQ6VXNlcjE2OTI5MTQz", "avatar_url": "https://avatars1.githubusercontent.com/u/16929143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcarpenter-pub", "html_url": "https://github.com/bcarpenter-pub", "followers_url": "https://api.github.com/users/bcarpenter-pub/followers", "following_url": "https://api.github.com/users/bcarpenter-pub/following{/other_user}", "gists_url": "https://api.github.com/users/bcarpenter-pub/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcarpenter-pub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcarpenter-pub/subscriptions", "organizations_url": "https://api.github.com/users/bcarpenter-pub/orgs", "repos_url": "https://api.github.com/users/bcarpenter-pub/repos", "events_url": "https://api.github.com/users/bcarpenter-pub/events{/privacy}", "received_events_url": "https://api.github.com/users/bcarpenter-pub/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "keveman", "id": 229914, "node_id": "MDQ6VXNlcjIyOTkxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/229914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keveman", "html_url": "https://github.com/keveman", "followers_url": "https://api.github.com/users/keveman/followers", "following_url": "https://api.github.com/users/keveman/following{/other_user}", "gists_url": "https://api.github.com/users/keveman/gists{/gist_id}", "starred_url": "https://api.github.com/users/keveman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keveman/subscriptions", "organizations_url": "https://api.github.com/users/keveman/orgs", "repos_url": "https://api.github.com/users/keveman/repos", "events_url": "https://api.github.com/users/keveman/events{/privacy}", "received_events_url": "https://api.github.com/users/keveman/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "keveman", "id": 229914, "node_id": "MDQ6VXNlcjIyOTkxNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/229914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keveman", "html_url": "https://github.com/keveman", "followers_url": "https://api.github.com/users/keveman/followers", "following_url": "https://api.github.com/users/keveman/following{/other_user}", "gists_url": "https://api.github.com/users/keveman/gists{/gist_id}", "starred_url": "https://api.github.com/users/keveman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keveman/subscriptions", "organizations_url": "https://api.github.com/users/keveman/orgs", "repos_url": "https://api.github.com/users/keveman/repos", "events_url": "https://api.github.com/users/keveman/events{/privacy}", "received_events_url": "https://api.github.com/users/keveman/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2016-03-03T23:36:55Z", "updated_at": "2016-03-14T22:11:46Z", "closed_at": "2016-03-14T22:11:46Z", "author_association": "NONE", "body_html": "<p>For bugs/issues, please fill in the following.  The more information you<br>\nprovide, the more likely we can help you.</p>\n<h3>Environment info</h3>\n<p>Operating System:<br>\nRhel 7</p>\n<p>If installed from binary pip package, provide:</p>\n<ol>\n<li>Which pip package you installed.<br>\nBuilt from source.  0.7.1 master 3/3/2016</li>\n<li>The output from python -c \"import tensorflow; print(tensorflow.<strong>version</strong>)\".<br>\n0.7.1<br>\nIf installed from sources, provide the commit hash:<br>\n<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/99952d68444cd2b08e88af972bd9eb7034fbc1e7/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/99952d68444cd2b08e88af972bd9eb7034fbc1e7\"><tt>99952d6</tt></a></li>\n</ol>\n<h3>Steps to reproduce</h3>\n<ol>\n<li>Follow Instructions via:<br>\n<a href=\"https://www.tensorflow.org/versions/master/how_tos/adding_an_op/index.html\" rel=\"nofollow\">https://www.tensorflow.org/versions/master/how_tos/adding_an_op/index.html</a></li>\n<li>Create zero_out.cc and build zero_out.so</li>\n</ol>\n<pre><code>#include \"tensorflow/core/framework/op.h\"\n\nREGISTER_OP(\"ZeroOut\")\n    .Input(\"to_zero: int32\")\n    .Output(\"zeroed: int32\");\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n\nusing namespace tensorflow;\n\nclass ZeroOutOp : public OpKernel {\n public:\n  explicit ZeroOutOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    // Grab the input tensor\n    const Tensor&amp; input_tensor = context-&gt;input(0);\n    auto input = input_tensor.flat&lt;int32&gt;();\n\n    // Create an output tensor\n    Tensor* output_tensor = NULL;\n    OP_REQUIRES_OK(context, context-&gt;allocate_output(0, input_tensor.shape(),\n                                                     &amp;output_tensor));\n    auto output = output_tensor-&gt;template flat&lt;int32&gt;();\n\n    // Set all but the first element of the output tensor to 0.\n    const int N = input.size();\n    for (int i = 1; i &lt; N; i++) {\n      output(i) = 0;\n    }\n\n    // Preserve the first input value if possible.\n    if (N &gt; 0) output(0) = input(0);\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"ZeroOut\").Device(DEVICE_CPU), ZeroOutOp);\n</code></pre>\n<ol>\n<li>Create one_out.cc and build one_out.so</li>\n</ol>\n<pre><code>#include \"tensorflow/core/framework/op.h\"\n\nREGISTER_OP(\"OneOut\")\n    .Input(\"to_one: int32\")\n    .Output(\"oneed: int32\");\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n\nusing namespace tensorflow;\n\nclass OneOutOp : public OpKernel {\n public:\n  explicit OneOutOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    // Grab the input tensor\n    const Tensor&amp; input_tensor = context-&gt;input(0);\n    auto input = input_tensor.flat&lt;int32&gt;();\n\n    // Create an output tensor\n    Tensor* output_tensor = NULL;\n    OP_REQUIRES_OK(context, context-&gt;allocate_output(0, input_tensor.shape(),\n                                                     &amp;output_tensor));\n    auto output = output_tensor-&gt;template flat&lt;int32&gt;();\n\n    // Set all but the first element of the output tensor to 0.\n    const int N = input.size();\n    for (int i = 1; i &lt; N; i++) {\n      output(i) = 1;\n    }\n\n    // Preserve the first input value if possible.\n    if (N &gt; 0) output(0) = input(0);\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"OneOut\").Device(DEVICE_CPU), OneOutOp);\n</code></pre>\n<ol>\n<li>Attempt to load both so in same script:</li>\n</ol>\n<pre><code>import tensorflow as tf\n\nzero_out_module = tf.load_op_library('./zero_out.so')\none_out_module = tf.load_op_library('./one_out.so')\n\nwith tf.Session('') as session:\n    inputs = tf.constant([[1,1,1], [-2, -2, -2]], dtype=tf.int32)\n    print(inputs.eval())\n</code></pre>\n<ol>\n<li>Get Error:</li>\n</ol>\n<pre><code>F tensorflow/core/framework/op.cc:119] Check failed: ::tensorflow::Status::OK() == (RegisterAlreadyLocked(op_def)) (OK vs. Already exists: Op with name ZeroOu\nt)Attempting to register: Op&lt;name=ZeroOut; signature=to_zero:int32 -&gt; zeroed:int32&gt;\nAborted\n\n</code></pre>", "body_text": "For bugs/issues, please fill in the following.  The more information you\nprovide, the more likely we can help you.\nEnvironment info\nOperating System:\nRhel 7\nIf installed from binary pip package, provide:\n\nWhich pip package you installed.\nBuilt from source.  0.7.1 master 3/3/2016\nThe output from python -c \"import tensorflow; print(tensorflow.version)\".\n0.7.1\nIf installed from sources, provide the commit hash:\n99952d6\n\nSteps to reproduce\n\nFollow Instructions via:\nhttps://www.tensorflow.org/versions/master/how_tos/adding_an_op/index.html\nCreate zero_out.cc and build zero_out.so\n\n#include \"tensorflow/core/framework/op.h\"\n\nREGISTER_OP(\"ZeroOut\")\n    .Input(\"to_zero: int32\")\n    .Output(\"zeroed: int32\");\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n\nusing namespace tensorflow;\n\nclass ZeroOutOp : public OpKernel {\n public:\n  explicit ZeroOutOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    // Grab the input tensor\n    const Tensor& input_tensor = context->input(0);\n    auto input = input_tensor.flat<int32>();\n\n    // Create an output tensor\n    Tensor* output_tensor = NULL;\n    OP_REQUIRES_OK(context, context->allocate_output(0, input_tensor.shape(),\n                                                     &output_tensor));\n    auto output = output_tensor->template flat<int32>();\n\n    // Set all but the first element of the output tensor to 0.\n    const int N = input.size();\n    for (int i = 1; i < N; i++) {\n      output(i) = 0;\n    }\n\n    // Preserve the first input value if possible.\n    if (N > 0) output(0) = input(0);\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"ZeroOut\").Device(DEVICE_CPU), ZeroOutOp);\n\n\nCreate one_out.cc and build one_out.so\n\n#include \"tensorflow/core/framework/op.h\"\n\nREGISTER_OP(\"OneOut\")\n    .Input(\"to_one: int32\")\n    .Output(\"oneed: int32\");\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n\nusing namespace tensorflow;\n\nclass OneOutOp : public OpKernel {\n public:\n  explicit OneOutOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    // Grab the input tensor\n    const Tensor& input_tensor = context->input(0);\n    auto input = input_tensor.flat<int32>();\n\n    // Create an output tensor\n    Tensor* output_tensor = NULL;\n    OP_REQUIRES_OK(context, context->allocate_output(0, input_tensor.shape(),\n                                                     &output_tensor));\n    auto output = output_tensor->template flat<int32>();\n\n    // Set all but the first element of the output tensor to 0.\n    const int N = input.size();\n    for (int i = 1; i < N; i++) {\n      output(i) = 1;\n    }\n\n    // Preserve the first input value if possible.\n    if (N > 0) output(0) = input(0);\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"OneOut\").Device(DEVICE_CPU), OneOutOp);\n\n\nAttempt to load both so in same script:\n\nimport tensorflow as tf\n\nzero_out_module = tf.load_op_library('./zero_out.so')\none_out_module = tf.load_op_library('./one_out.so')\n\nwith tf.Session('') as session:\n    inputs = tf.constant([[1,1,1], [-2, -2, -2]], dtype=tf.int32)\n    print(inputs.eval())\n\n\nGet Error:\n\nF tensorflow/core/framework/op.cc:119] Check failed: ::tensorflow::Status::OK() == (RegisterAlreadyLocked(op_def)) (OK vs. Already exists: Op with name ZeroOu\nt)Attempting to register: Op<name=ZeroOut; signature=to_zero:int32 -> zeroed:int32>\nAborted", "body": "For bugs/issues, please fill in the following.  The more information you\nprovide, the more likely we can help you.\n### Environment info\n\nOperating System:\nRhel 7\n\nIf installed from binary pip package, provide:\n1. Which pip package you installed.\n   Built from source.  0.7.1 master 3/3/2016\n2. The output from python -c \"import tensorflow; print(tensorflow.**version**)\".\n   0.7.1\n   If installed from sources, provide the commit hash:\n   99952d68444cd2b08e88af972bd9eb7034fbc1e7\n### Steps to reproduce\n1.  Follow Instructions via:\n   https://www.tensorflow.org/versions/master/how_tos/adding_an_op/index.html\n2.  Create zero_out.cc and build zero_out.so\n\n```\n#include \"tensorflow/core/framework/op.h\"\n\nREGISTER_OP(\"ZeroOut\")\n    .Input(\"to_zero: int32\")\n    .Output(\"zeroed: int32\");\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n\nusing namespace tensorflow;\n\nclass ZeroOutOp : public OpKernel {\n public:\n  explicit ZeroOutOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    // Grab the input tensor\n    const Tensor& input_tensor = context->input(0);\n    auto input = input_tensor.flat<int32>();\n\n    // Create an output tensor\n    Tensor* output_tensor = NULL;\n    OP_REQUIRES_OK(context, context->allocate_output(0, input_tensor.shape(),\n                                                     &output_tensor));\n    auto output = output_tensor->template flat<int32>();\n\n    // Set all but the first element of the output tensor to 0.\n    const int N = input.size();\n    for (int i = 1; i < N; i++) {\n      output(i) = 0;\n    }\n\n    // Preserve the first input value if possible.\n    if (N > 0) output(0) = input(0);\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"ZeroOut\").Device(DEVICE_CPU), ZeroOutOp);\n```\n1.  Create one_out.cc and build one_out.so\n\n```\n#include \"tensorflow/core/framework/op.h\"\n\nREGISTER_OP(\"OneOut\")\n    .Input(\"to_one: int32\")\n    .Output(\"oneed: int32\");\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n\nusing namespace tensorflow;\n\nclass OneOutOp : public OpKernel {\n public:\n  explicit OneOutOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    // Grab the input tensor\n    const Tensor& input_tensor = context->input(0);\n    auto input = input_tensor.flat<int32>();\n\n    // Create an output tensor\n    Tensor* output_tensor = NULL;\n    OP_REQUIRES_OK(context, context->allocate_output(0, input_tensor.shape(),\n                                                     &output_tensor));\n    auto output = output_tensor->template flat<int32>();\n\n    // Set all but the first element of the output tensor to 0.\n    const int N = input.size();\n    for (int i = 1; i < N; i++) {\n      output(i) = 1;\n    }\n\n    // Preserve the first input value if possible.\n    if (N > 0) output(0) = input(0);\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"OneOut\").Device(DEVICE_CPU), OneOutOp);\n```\n1.  Attempt to load both so in same script:\n\n```\nimport tensorflow as tf\n\nzero_out_module = tf.load_op_library('./zero_out.so')\none_out_module = tf.load_op_library('./one_out.so')\n\nwith tf.Session('') as session:\n    inputs = tf.constant([[1,1,1], [-2, -2, -2]], dtype=tf.int32)\n    print(inputs.eval())\n```\n1. Get Error:\n\n```\nF tensorflow/core/framework/op.cc:119] Check failed: ::tensorflow::Status::OK() == (RegisterAlreadyLocked(op_def)) (OK vs. Already exists: Op with name ZeroOu\nt)Attempting to register: Op<name=ZeroOut; signature=to_zero:int32 -> zeroed:int32>\nAborted\n\n```\n"}