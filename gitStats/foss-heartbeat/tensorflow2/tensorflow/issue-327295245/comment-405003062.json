{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/405003062", "html_url": "https://github.com/tensorflow/tensorflow/issues/19619#issuecomment-405003062", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19619", "id": 405003062, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNTAwMzA2Mg==", "user": {"login": "lqw187927", "id": 20576785, "node_id": "MDQ6VXNlcjIwNTc2Nzg1", "avatar_url": "https://avatars2.githubusercontent.com/u/20576785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqw187927", "html_url": "https://github.com/lqw187927", "followers_url": "https://api.github.com/users/lqw187927/followers", "following_url": "https://api.github.com/users/lqw187927/following{/other_user}", "gists_url": "https://api.github.com/users/lqw187927/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqw187927/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqw187927/subscriptions", "organizations_url": "https://api.github.com/users/lqw187927/orgs", "repos_url": "https://api.github.com/users/lqw187927/repos", "events_url": "https://api.github.com/users/lqw187927/events{/privacy}", "received_events_url": "https://api.github.com/users/lqw187927/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-14T06:34:17Z", "updated_at": "2018-07-14T06:34:17Z", "author_association": "NONE", "body_html": "<div class=\"email-fragment\">do not send this email for me.\n\nAt 2018-07-14 12:30:52, \"Sami Kama\" &lt;notifications@github.com&gt; wrote:\n\n\n<a class=\"user-mention\" href=\"https://github.com/yegord\">@yegord</a>, please wait for <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"341207692\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/20794\" href=\"https://github.com/tensorflow/tensorflow/pull/20794\">#20794</a> and try\n\n#!/usr/bin/env pythonimport argparse\nimport subprocess\nimport tensorflow as tf\nimport numpy as np\nimport six\n\nfrom tensorflow.core.protobuf import config_pb2 as cpb2\nfrom tensorflow.core.protobuf import rewriter_config_pb2 as rwpb2\n\nfrom tensorflow.contrib import tensorrt as trt\n\nNUM_IMAGES=3INPUT_TENSORS= [u'placeholders/image_0', u'placeholders/image_1', u'placeholders/image_2', u'placeholders/num_images', u'placeholders/blend_coeff']\n\nOUTPUT_TENSORS= [u'detections/center_x', u'detections/center_y', u'detections/width', u'detections/height', u'detections/width_3d', u'detections/height_3d', u'detections/depth_3d', u'detections/class_id', u'detections/probability', u'detections/yaw', u'detections/properties/tl_rotation/class_id', u'detections/properties/tl_type/class_id', u'detections/properties/tl_road_tl_state/class_id', u'detections/properties/tl_bicycle_tl_state/class_id', u'detections/properties/tl_pedestrian_tl_state/class_id', u'detections/properties/tl_other_tl_state/class_id', u'detections/properties/tl_left_section/class_id', u'detections/properties/tl_left_section_state/class_id', u'detections/properties/tl_right_section/class_id', u'detections/properties/tl_right_section_state/class_id', u'segmentations/sdc1/0', u'segmentations/sdc1/1', u'segmentations/sdc1/2', u'visualizations/sdc1/0', u'visualizations/sdc1/1', u'visualizations/sdc1/2']\n\n\ndefmain():\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\n        '--mode',\n        choices=['tf', 'trt'],\n        required=True,\n        help='Evaluator to use.')\n\n    args = parser.parse_args()\n\n    graph_def = tf.GraphDef()\n    with tf.gfile.GFile('ssd-tensorflow.pb', 'rb') as f:\n        graph_def.ParseFromString(f.read())\n\n    with tf.Graph().as_default():\n        tf.import_graph_def(graph_def, name='')\n        run_graph(mode=args.mode)\n\ndefrun_graph(ntimes=100, mode='trt'):\n    image = np.zeros((1024, 768, 3), dtype=np.uint8)\n    feed_dict = {\n        tensor_name: image\n        for tensor_name inINPUT_TENSORS[:NUM_IMAGES]\n    }\n    feed_dict[u'placeholders/num_images'] =NUM_IMAGES\n    feed_dict[u'placeholders/blend_coeff'] =0.5\n\n    feed_dict = {\n        tf.get_default_graph().get_operation_by_name(key).outputs[0]: value\n        for key, value in six.iteritems(feed_dict)\n    }\n\n    output_tensors = [\n        tf.get_default_graph().get_operation_by_name(tensor_name).outputs[0]\n        for tensor_name inOUTPUT_TENSORS\n    ]\n    opt_config = rwpb2.RewriterConfig()\n    opt_config.meta_optimizer_iterations = opt_config.ONE\n    opt_config.optimizers.extend([\"constfold\", \"layout\"])\n    custom_op = opt_config.custom_optimizers.add()\n    custom_op.name =\"TensorRTOptimizer\"\n    custom_op.parameter_map[\"minimum_segment_size\"].i =10\n    custom_op.parameter_map[\"precision_mode\"].s =\"FP32\"\n    custom_op.parameter_map[\"max_batch_size\"].i =NUM_IMAGES\n    custom_op.parameter_map[\"is_dynamic_op\"].b =True\n    custom_op.parameter_map[\"max_workspace_size_bytes\"].i =1&lt;&lt;25\n\n    graph_options = cpb2.GraphOptions(rewrite_options=opt_config)\n    if mode =='trt':\n        config = tf.ConfigProto(graph_options=graph_options)\n    else:\n        config = tf.ConfigProto()\n\n    with tf.Session(config=config) as session:\n        for i in six.moves.xrange(ntimes):\n            session.run(output_tensors, feed_dict)\n        subprocess.check_call(['nvidia-smi'], close_fds=True)\n\n\nif__name__=='__main__':\n    main()\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.</div>", "body_text": "do not send this email for me.\n\nAt 2018-07-14 12:30:52, \"Sami Kama\" <notifications@github.com> wrote:\n\n\n@yegord, please wait for #20794 and try\n\n#!/usr/bin/env pythonimport argparse\nimport subprocess\nimport tensorflow as tf\nimport numpy as np\nimport six\n\nfrom tensorflow.core.protobuf import config_pb2 as cpb2\nfrom tensorflow.core.protobuf import rewriter_config_pb2 as rwpb2\n\nfrom tensorflow.contrib import tensorrt as trt\n\nNUM_IMAGES=3INPUT_TENSORS= [u'placeholders/image_0', u'placeholders/image_1', u'placeholders/image_2', u'placeholders/num_images', u'placeholders/blend_coeff']\n\nOUTPUT_TENSORS= [u'detections/center_x', u'detections/center_y', u'detections/width', u'detections/height', u'detections/width_3d', u'detections/height_3d', u'detections/depth_3d', u'detections/class_id', u'detections/probability', u'detections/yaw', u'detections/properties/tl_rotation/class_id', u'detections/properties/tl_type/class_id', u'detections/properties/tl_road_tl_state/class_id', u'detections/properties/tl_bicycle_tl_state/class_id', u'detections/properties/tl_pedestrian_tl_state/class_id', u'detections/properties/tl_other_tl_state/class_id', u'detections/properties/tl_left_section/class_id', u'detections/properties/tl_left_section_state/class_id', u'detections/properties/tl_right_section/class_id', u'detections/properties/tl_right_section_state/class_id', u'segmentations/sdc1/0', u'segmentations/sdc1/1', u'segmentations/sdc1/2', u'visualizations/sdc1/0', u'visualizations/sdc1/1', u'visualizations/sdc1/2']\n\n\ndefmain():\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\n        '--mode',\n        choices=['tf', 'trt'],\n        required=True,\n        help='Evaluator to use.')\n\n    args = parser.parse_args()\n\n    graph_def = tf.GraphDef()\n    with tf.gfile.GFile('ssd-tensorflow.pb', 'rb') as f:\n        graph_def.ParseFromString(f.read())\n\n    with tf.Graph().as_default():\n        tf.import_graph_def(graph_def, name='')\n        run_graph(mode=args.mode)\n\ndefrun_graph(ntimes=100, mode='trt'):\n    image = np.zeros((1024, 768, 3), dtype=np.uint8)\n    feed_dict = {\n        tensor_name: image\n        for tensor_name inINPUT_TENSORS[:NUM_IMAGES]\n    }\n    feed_dict[u'placeholders/num_images'] =NUM_IMAGES\n    feed_dict[u'placeholders/blend_coeff'] =0.5\n\n    feed_dict = {\n        tf.get_default_graph().get_operation_by_name(key).outputs[0]: value\n        for key, value in six.iteritems(feed_dict)\n    }\n\n    output_tensors = [\n        tf.get_default_graph().get_operation_by_name(tensor_name).outputs[0]\n        for tensor_name inOUTPUT_TENSORS\n    ]\n    opt_config = rwpb2.RewriterConfig()\n    opt_config.meta_optimizer_iterations = opt_config.ONE\n    opt_config.optimizers.extend([\"constfold\", \"layout\"])\n    custom_op = opt_config.custom_optimizers.add()\n    custom_op.name =\"TensorRTOptimizer\"\n    custom_op.parameter_map[\"minimum_segment_size\"].i =10\n    custom_op.parameter_map[\"precision_mode\"].s =\"FP32\"\n    custom_op.parameter_map[\"max_batch_size\"].i =NUM_IMAGES\n    custom_op.parameter_map[\"is_dynamic_op\"].b =True\n    custom_op.parameter_map[\"max_workspace_size_bytes\"].i =1<<25\n\n    graph_options = cpb2.GraphOptions(rewrite_options=opt_config)\n    if mode =='trt':\n        config = tf.ConfigProto(graph_options=graph_options)\n    else:\n        config = tf.ConfigProto()\n\n    with tf.Session(config=config) as session:\n        for i in six.moves.xrange(ntimes):\n            session.run(output_tensors, feed_dict)\n        subprocess.check_call(['nvidia-smi'], close_fds=True)\n\n\nif__name__=='__main__':\n    main()\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.", "body": "do not send this email for me.\n\nAt 2018-07-14 12:30:52, \"Sami Kama\" <notifications@github.com> wrote:\n\n\n@yegord, please wait for #20794 and try\n\n#!/usr/bin/env pythonimport argparse\nimport subprocess\nimport tensorflow as tf\nimport numpy as np\nimport six\n\nfrom tensorflow.core.protobuf import config_pb2 as cpb2\nfrom tensorflow.core.protobuf import rewriter_config_pb2 as rwpb2\n\nfrom tensorflow.contrib import tensorrt as trt\n\nNUM_IMAGES=3INPUT_TENSORS= [u'placeholders/image_0', u'placeholders/image_1', u'placeholders/image_2', u'placeholders/num_images', u'placeholders/blend_coeff']\n\nOUTPUT_TENSORS= [u'detections/center_x', u'detections/center_y', u'detections/width', u'detections/height', u'detections/width_3d', u'detections/height_3d', u'detections/depth_3d', u'detections/class_id', u'detections/probability', u'detections/yaw', u'detections/properties/tl_rotation/class_id', u'detections/properties/tl_type/class_id', u'detections/properties/tl_road_tl_state/class_id', u'detections/properties/tl_bicycle_tl_state/class_id', u'detections/properties/tl_pedestrian_tl_state/class_id', u'detections/properties/tl_other_tl_state/class_id', u'detections/properties/tl_left_section/class_id', u'detections/properties/tl_left_section_state/class_id', u'detections/properties/tl_right_section/class_id', u'detections/properties/tl_right_section_state/class_id', u'segmentations/sdc1/0', u'segmentations/sdc1/1', u'segmentations/sdc1/2', u'visualizations/sdc1/0', u'visualizations/sdc1/1', u'visualizations/sdc1/2']\n\n\ndefmain():\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\n        '--mode',\n        choices=['tf', 'trt'],\n        required=True,\n        help='Evaluator to use.')\n\n    args = parser.parse_args()\n\n    graph_def = tf.GraphDef()\n    with tf.gfile.GFile('ssd-tensorflow.pb', 'rb') as f:\n        graph_def.ParseFromString(f.read())\n\n    with tf.Graph().as_default():\n        tf.import_graph_def(graph_def, name='')\n        run_graph(mode=args.mode)\n\ndefrun_graph(ntimes=100, mode='trt'):\n    image = np.zeros((1024, 768, 3), dtype=np.uint8)\n    feed_dict = {\n        tensor_name: image\n        for tensor_name inINPUT_TENSORS[:NUM_IMAGES]\n    }\n    feed_dict[u'placeholders/num_images'] =NUM_IMAGES\n    feed_dict[u'placeholders/blend_coeff'] =0.5\n\n    feed_dict = {\n        tf.get_default_graph().get_operation_by_name(key).outputs[0]: value\n        for key, value in six.iteritems(feed_dict)\n    }\n\n    output_tensors = [\n        tf.get_default_graph().get_operation_by_name(tensor_name).outputs[0]\n        for tensor_name inOUTPUT_TENSORS\n    ]\n    opt_config = rwpb2.RewriterConfig()\n    opt_config.meta_optimizer_iterations = opt_config.ONE\n    opt_config.optimizers.extend([\"constfold\", \"layout\"])\n    custom_op = opt_config.custom_optimizers.add()\n    custom_op.name =\"TensorRTOptimizer\"\n    custom_op.parameter_map[\"minimum_segment_size\"].i =10\n    custom_op.parameter_map[\"precision_mode\"].s =\"FP32\"\n    custom_op.parameter_map[\"max_batch_size\"].i =NUM_IMAGES\n    custom_op.parameter_map[\"is_dynamic_op\"].b =True\n    custom_op.parameter_map[\"max_workspace_size_bytes\"].i =1<<25\n    \n    graph_options = cpb2.GraphOptions(rewrite_options=opt_config)\n    if mode =='trt':\n        config = tf.ConfigProto(graph_options=graph_options)\n    else:\n        config = tf.ConfigProto()\n\n    with tf.Session(config=config) as session:\n        for i in six.moves.xrange(ntimes):\n            session.run(output_tensors, feed_dict)\n        subprocess.check_call(['nvidia-smi'], close_fds=True)\n\n\nif__name__=='__main__':\n    main()\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread."}