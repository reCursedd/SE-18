{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/404997677", "html_url": "https://github.com/tensorflow/tensorflow/issues/19619#issuecomment-404997677", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19619", "id": 404997677, "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDk5NzY3Nw==", "user": {"login": "samikama", "id": 10539540, "node_id": "MDQ6VXNlcjEwNTM5NTQw", "avatar_url": "https://avatars0.githubusercontent.com/u/10539540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samikama", "html_url": "https://github.com/samikama", "followers_url": "https://api.github.com/users/samikama/followers", "following_url": "https://api.github.com/users/samikama/following{/other_user}", "gists_url": "https://api.github.com/users/samikama/gists{/gist_id}", "starred_url": "https://api.github.com/users/samikama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samikama/subscriptions", "organizations_url": "https://api.github.com/users/samikama/orgs", "repos_url": "https://api.github.com/users/samikama/repos", "events_url": "https://api.github.com/users/samikama/events{/privacy}", "received_events_url": "https://api.github.com/users/samikama/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-14T04:25:18Z", "updated_at": "2018-07-14T04:25:18Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1595829\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yegord\">@yegord</a>, please wait for <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"341207692\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/20794\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/20794/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/20794\">#20794</a> and try</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span>!/usr/bin/env python</span>\n\n<span class=\"pl-k\">import</span> argparse\n<span class=\"pl-k\">import</span> subprocess\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> six\n\n<span class=\"pl-k\">from</span> tensorflow.core.protobuf <span class=\"pl-k\">import</span> config_pb2 <span class=\"pl-k\">as</span> cpb2\n<span class=\"pl-k\">from</span> tensorflow.core.protobuf <span class=\"pl-k\">import</span> rewriter_config_pb2 <span class=\"pl-k\">as</span> rwpb2\n\n<span class=\"pl-k\">from</span> tensorflow.contrib <span class=\"pl-k\">import</span> tensorrt <span class=\"pl-k\">as</span> trt\n\n<span class=\"pl-c1\">NUM_IMAGES</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">3</span>\n\n<span class=\"pl-c1\">INPUT_TENSORS</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>placeholders/image_0<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>placeholders/image_1<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>placeholders/image_2<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>placeholders/num_images<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>placeholders/blend_coeff<span class=\"pl-pds\">'</span></span>]\n\n<span class=\"pl-c1\">OUTPUT_TENSORS</span> <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/center_x<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/center_y<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/width<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/height<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/width_3d<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/height_3d<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/depth_3d<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/class_id<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/probability<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/yaw<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/properties/tl_rotation/class_id<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/properties/tl_type/class_id<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/properties/tl_road_tl_state/class_id<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/properties/tl_bicycle_tl_state/class_id<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/properties/tl_pedestrian_tl_state/class_id<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/properties/tl_other_tl_state/class_id<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/properties/tl_left_section/class_id<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/properties/tl_left_section_state/class_id<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/properties/tl_right_section/class_id<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>detections/properties/tl_right_section_state/class_id<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>segmentations/sdc1/0<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>segmentations/sdc1/1<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>segmentations/sdc1/2<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>visualizations/sdc1/0<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>visualizations/sdc1/1<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>visualizations/sdc1/2<span class=\"pl-pds\">'</span></span>]\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">main</span>():\n    parser <span class=\"pl-k\">=</span> argparse.ArgumentParser()\n\n    parser.add_argument(\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>--mode<span class=\"pl-pds\">'</span></span>,\n        <span class=\"pl-v\">choices</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>tf<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>trt<span class=\"pl-pds\">'</span></span>],\n        <span class=\"pl-v\">required</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>,\n        <span class=\"pl-v\">help</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Evaluator to use.<span class=\"pl-pds\">'</span></span>)\n\n    args <span class=\"pl-k\">=</span> parser.parse_args()\n\n    graph_def <span class=\"pl-k\">=</span> tf.GraphDef()\n    <span class=\"pl-k\">with</span> tf.gfile.GFile(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ssd-tensorflow.pb<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rb<span class=\"pl-pds\">'</span></span>) <span class=\"pl-k\">as</span> f:\n        graph_def.ParseFromString(f.read())\n\n    <span class=\"pl-k\">with</span> tf.Graph().as_default():\n        tf.import_graph_def(graph_def, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-pds\">'</span></span>)\n        run_graph(<span class=\"pl-v\">mode</span><span class=\"pl-k\">=</span>args.mode)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">run_graph</span>(<span class=\"pl-smi\">ntimes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">100</span>, <span class=\"pl-smi\">mode</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>trt<span class=\"pl-pds\">'</span></span>):\n    image <span class=\"pl-k\">=</span> np.zeros((<span class=\"pl-c1\">1024</span>, <span class=\"pl-c1\">768</span>, <span class=\"pl-c1\">3</span>), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.uint8)\n    feed_dict <span class=\"pl-k\">=</span> {\n        tensor_name: image\n        <span class=\"pl-k\">for</span> tensor_name <span class=\"pl-k\">in</span> <span class=\"pl-c1\">INPUT_TENSORS</span>[:<span class=\"pl-c1\">NUM_IMAGES</span>]\n    }\n    feed_dict[<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>placeholders/num_images<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">NUM_IMAGES</span>\n    feed_dict[<span class=\"pl-s\"><span class=\"pl-k\">u</span><span class=\"pl-pds\">'</span>placeholders/blend_coeff<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.5</span>\n\n    feed_dict <span class=\"pl-k\">=</span> {\n        tf.get_default_graph().get_operation_by_name(key).outputs[<span class=\"pl-c1\">0</span>]: value\n        <span class=\"pl-k\">for</span> key, value <span class=\"pl-k\">in</span> six.iteritems(feed_dict)\n    }\n\n    output_tensors <span class=\"pl-k\">=</span> [\n        tf.get_default_graph().get_operation_by_name(tensor_name).outputs[<span class=\"pl-c1\">0</span>]\n        <span class=\"pl-k\">for</span> tensor_name <span class=\"pl-k\">in</span> <span class=\"pl-c1\">OUTPUT_TENSORS</span>\n    ]\n    opt_config <span class=\"pl-k\">=</span> rwpb2.RewriterConfig()\n    opt_config.meta_optimizer_iterations <span class=\"pl-k\">=</span> opt_config.<span class=\"pl-c1\">ONE</span>\n    opt_config.optimizers.extend([<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>constfold<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>layout<span class=\"pl-pds\">\"</span></span>])\n    custom_op <span class=\"pl-k\">=</span> opt_config.custom_optimizers.add()\n    custom_op.name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>TensorRTOptimizer<span class=\"pl-pds\">\"</span></span>\n    custom_op.parameter_map[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>minimum_segment_size<span class=\"pl-pds\">\"</span></span>].i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\n    custom_op.parameter_map[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>precision_mode<span class=\"pl-pds\">\"</span></span>].s <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>FP32<span class=\"pl-pds\">\"</span></span>\n    custom_op.parameter_map[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>max_batch_size<span class=\"pl-pds\">\"</span></span>].i <span class=\"pl-k\">=</span><span class=\"pl-c1\">NUM_IMAGES</span>\n    custom_op.parameter_map[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>is_dynamic_op<span class=\"pl-pds\">\"</span></span>].b <span class=\"pl-k\">=</span> <span class=\"pl-c1\">True</span>\n    custom_op.parameter_map[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>max_workspace_size_bytes<span class=\"pl-pds\">\"</span></span>].i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span> <span class=\"pl-k\">&lt;&lt;</span> <span class=\"pl-c1\">25</span>\n    \n    graph_options <span class=\"pl-k\">=</span> cpb2.GraphOptions(<span class=\"pl-v\">rewrite_options</span><span class=\"pl-k\">=</span>opt_config)\n    <span class=\"pl-k\">if</span> mode <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>trt<span class=\"pl-pds\">'</span></span>:\n        config <span class=\"pl-k\">=</span> tf.ConfigProto(<span class=\"pl-v\">graph_options</span><span class=\"pl-k\">=</span>graph_options)\n    <span class=\"pl-k\">else</span>:\n        config <span class=\"pl-k\">=</span> tf.ConfigProto()\n\n    <span class=\"pl-k\">with</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>config) <span class=\"pl-k\">as</span> session:\n        <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> six.moves.xrange(ntimes):\n            session.run(output_tensors, feed_dict)\n        subprocess.check_call([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>nvidia-smi<span class=\"pl-pds\">'</span></span>], <span class=\"pl-v\">close_fds</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    main()</pre></div>", "body_text": "@yegord, please wait for #20794 and try\n#!/usr/bin/env python\n\nimport argparse\nimport subprocess\nimport tensorflow as tf\nimport numpy as np\nimport six\n\nfrom tensorflow.core.protobuf import config_pb2 as cpb2\nfrom tensorflow.core.protobuf import rewriter_config_pb2 as rwpb2\n\nfrom tensorflow.contrib import tensorrt as trt\n\nNUM_IMAGES = 3\n\nINPUT_TENSORS = [u'placeholders/image_0', u'placeholders/image_1', u'placeholders/image_2', u'placeholders/num_images', u'placeholders/blend_coeff']\n\nOUTPUT_TENSORS = [u'detections/center_x', u'detections/center_y', u'detections/width', u'detections/height', u'detections/width_3d', u'detections/height_3d', u'detections/depth_3d', u'detections/class_id', u'detections/probability', u'detections/yaw', u'detections/properties/tl_rotation/class_id', u'detections/properties/tl_type/class_id', u'detections/properties/tl_road_tl_state/class_id', u'detections/properties/tl_bicycle_tl_state/class_id', u'detections/properties/tl_pedestrian_tl_state/class_id', u'detections/properties/tl_other_tl_state/class_id', u'detections/properties/tl_left_section/class_id', u'detections/properties/tl_left_section_state/class_id', u'detections/properties/tl_right_section/class_id', u'detections/properties/tl_right_section_state/class_id', u'segmentations/sdc1/0', u'segmentations/sdc1/1', u'segmentations/sdc1/2', u'visualizations/sdc1/0', u'visualizations/sdc1/1', u'visualizations/sdc1/2']\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\n        '--mode',\n        choices=['tf', 'trt'],\n        required=True,\n        help='Evaluator to use.')\n\n    args = parser.parse_args()\n\n    graph_def = tf.GraphDef()\n    with tf.gfile.GFile('ssd-tensorflow.pb', 'rb') as f:\n        graph_def.ParseFromString(f.read())\n\n    with tf.Graph().as_default():\n        tf.import_graph_def(graph_def, name='')\n        run_graph(mode=args.mode)\n\ndef run_graph(ntimes=100, mode='trt'):\n    image = np.zeros((1024, 768, 3), dtype=np.uint8)\n    feed_dict = {\n        tensor_name: image\n        for tensor_name in INPUT_TENSORS[:NUM_IMAGES]\n    }\n    feed_dict[u'placeholders/num_images'] = NUM_IMAGES\n    feed_dict[u'placeholders/blend_coeff'] = 0.5\n\n    feed_dict = {\n        tf.get_default_graph().get_operation_by_name(key).outputs[0]: value\n        for key, value in six.iteritems(feed_dict)\n    }\n\n    output_tensors = [\n        tf.get_default_graph().get_operation_by_name(tensor_name).outputs[0]\n        for tensor_name in OUTPUT_TENSORS\n    ]\n    opt_config = rwpb2.RewriterConfig()\n    opt_config.meta_optimizer_iterations = opt_config.ONE\n    opt_config.optimizers.extend([\"constfold\", \"layout\"])\n    custom_op = opt_config.custom_optimizers.add()\n    custom_op.name = \"TensorRTOptimizer\"\n    custom_op.parameter_map[\"minimum_segment_size\"].i = 10\n    custom_op.parameter_map[\"precision_mode\"].s = \"FP32\"\n    custom_op.parameter_map[\"max_batch_size\"].i =NUM_IMAGES\n    custom_op.parameter_map[\"is_dynamic_op\"].b = True\n    custom_op.parameter_map[\"max_workspace_size_bytes\"].i = 1 << 25\n    \n    graph_options = cpb2.GraphOptions(rewrite_options=opt_config)\n    if mode == 'trt':\n        config = tf.ConfigProto(graph_options=graph_options)\n    else:\n        config = tf.ConfigProto()\n\n    with tf.Session(config=config) as session:\n        for i in six.moves.xrange(ntimes):\n            session.run(output_tensors, feed_dict)\n        subprocess.check_call(['nvidia-smi'], close_fds=True)\n\n\nif __name__ == '__main__':\n    main()", "body": "@yegord, please wait for #20794 and try \r\n```python\r\n#!/usr/bin/env python\r\n\r\nimport argparse\r\nimport subprocess\r\nimport tensorflow as tf\r\nimport numpy as np\r\nimport six\r\n\r\nfrom tensorflow.core.protobuf import config_pb2 as cpb2\r\nfrom tensorflow.core.protobuf import rewriter_config_pb2 as rwpb2\r\n\r\nfrom tensorflow.contrib import tensorrt as trt\r\n\r\nNUM_IMAGES = 3\r\n\r\nINPUT_TENSORS = [u'placeholders/image_0', u'placeholders/image_1', u'placeholders/image_2', u'placeholders/num_images', u'placeholders/blend_coeff']\r\n\r\nOUTPUT_TENSORS = [u'detections/center_x', u'detections/center_y', u'detections/width', u'detections/height', u'detections/width_3d', u'detections/height_3d', u'detections/depth_3d', u'detections/class_id', u'detections/probability', u'detections/yaw', u'detections/properties/tl_rotation/class_id', u'detections/properties/tl_type/class_id', u'detections/properties/tl_road_tl_state/class_id', u'detections/properties/tl_bicycle_tl_state/class_id', u'detections/properties/tl_pedestrian_tl_state/class_id', u'detections/properties/tl_other_tl_state/class_id', u'detections/properties/tl_left_section/class_id', u'detections/properties/tl_left_section_state/class_id', u'detections/properties/tl_right_section/class_id', u'detections/properties/tl_right_section_state/class_id', u'segmentations/sdc1/0', u'segmentations/sdc1/1', u'segmentations/sdc1/2', u'visualizations/sdc1/0', u'visualizations/sdc1/1', u'visualizations/sdc1/2']\r\n\r\n\r\ndef main():\r\n    parser = argparse.ArgumentParser()\r\n\r\n    parser.add_argument(\r\n        '--mode',\r\n        choices=['tf', 'trt'],\r\n        required=True,\r\n        help='Evaluator to use.')\r\n\r\n    args = parser.parse_args()\r\n\r\n    graph_def = tf.GraphDef()\r\n    with tf.gfile.GFile('ssd-tensorflow.pb', 'rb') as f:\r\n        graph_def.ParseFromString(f.read())\r\n\r\n    with tf.Graph().as_default():\r\n        tf.import_graph_def(graph_def, name='')\r\n        run_graph(mode=args.mode)\r\n\r\ndef run_graph(ntimes=100, mode='trt'):\r\n    image = np.zeros((1024, 768, 3), dtype=np.uint8)\r\n    feed_dict = {\r\n        tensor_name: image\r\n        for tensor_name in INPUT_TENSORS[:NUM_IMAGES]\r\n    }\r\n    feed_dict[u'placeholders/num_images'] = NUM_IMAGES\r\n    feed_dict[u'placeholders/blend_coeff'] = 0.5\r\n\r\n    feed_dict = {\r\n        tf.get_default_graph().get_operation_by_name(key).outputs[0]: value\r\n        for key, value in six.iteritems(feed_dict)\r\n    }\r\n\r\n    output_tensors = [\r\n        tf.get_default_graph().get_operation_by_name(tensor_name).outputs[0]\r\n        for tensor_name in OUTPUT_TENSORS\r\n    ]\r\n    opt_config = rwpb2.RewriterConfig()\r\n    opt_config.meta_optimizer_iterations = opt_config.ONE\r\n    opt_config.optimizers.extend([\"constfold\", \"layout\"])\r\n    custom_op = opt_config.custom_optimizers.add()\r\n    custom_op.name = \"TensorRTOptimizer\"\r\n    custom_op.parameter_map[\"minimum_segment_size\"].i = 10\r\n    custom_op.parameter_map[\"precision_mode\"].s = \"FP32\"\r\n    custom_op.parameter_map[\"max_batch_size\"].i =NUM_IMAGES\r\n    custom_op.parameter_map[\"is_dynamic_op\"].b = True\r\n    custom_op.parameter_map[\"max_workspace_size_bytes\"].i = 1 << 25\r\n    \r\n    graph_options = cpb2.GraphOptions(rewrite_options=opt_config)\r\n    if mode == 'trt':\r\n        config = tf.ConfigProto(graph_options=graph_options)\r\n    else:\r\n        config = tf.ConfigProto()\r\n\r\n    with tf.Session(config=config) as session:\r\n        for i in six.moves.xrange(ntimes):\r\n            session.run(output_tensors, feed_dict)\r\n        subprocess.check_call(['nvidia-smi'], close_fds=True)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```"}