{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/328886837", "html_url": "https://github.com/tensorflow/tensorflow/issues/12148#issuecomment-328886837", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12148", "id": 328886837, "node_id": "MDEyOklzc3VlQ29tbWVudDMyODg4NjgzNw==", "user": {"login": "allredbw", "id": 992913, "node_id": "MDQ6VXNlcjk5MjkxMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/992913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allredbw", "html_url": "https://github.com/allredbw", "followers_url": "https://api.github.com/users/allredbw/followers", "following_url": "https://api.github.com/users/allredbw/following{/other_user}", "gists_url": "https://api.github.com/users/allredbw/gists{/gist_id}", "starred_url": "https://api.github.com/users/allredbw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allredbw/subscriptions", "organizations_url": "https://api.github.com/users/allredbw/orgs", "repos_url": "https://api.github.com/users/allredbw/repos", "events_url": "https://api.github.com/users/allredbw/events{/privacy}", "received_events_url": "https://api.github.com/users/allredbw/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-12T15:22:30Z", "updated_at": "2017-09-12T15:22:30Z", "author_association": "NONE", "body_html": "<p>Based on this SO <a href=\"https://stackoverflow.com/questions/44937001/feature-are-incompatible-with-given-information-in-evaluate-using-tf-contrib-l\" rel=\"nofollow\">answer</a>, I was able to resolve the error. When using <code>input_fn</code> in <code>ValidaitonMonitor()</code>, <code>fit()</code>, and <code>evaluate()</code>, features needed to be passed as a dictionary with the same key. That key also needed to specified in <code>tf.contrib.layers.real_valued_column()</code>. Here is a reproducible example:</p>\n<pre><code>import numpy as np\nfrom sklearn.cross_validation import train_test_split\nimport tensorflow as tf\nimport logging\n\nlogging.getLogger().setLevel(logging.INFO)\n\nn = 200\nx = np.array(range(n), dtype=np.float32)/(n/10)\nx = x[:,np.newaxis]\ny = np.sin(x.squeeze()) + np.random.normal(0, 0.5, n)\n\nx_train, x_test, y_train, y_test = train_test_split(y, y,\n                                                    train_size=0.8,\n                                                    test_size=0.2)\n\ndef get_inputs_for_fit(x, y):\n    x = {'x': tf.constant(x)}\n    y = tf.constant(y)\n    return x, y\n\nfeature_columns = [tf.contrib.layers.real_valued_column('x', dimension=1)]\n\nvalidation_monitor = tf.contrib.learn.monitors.ValidationMonitor(\n    input_fn=lambda: get_inputs_for_fit(x_test, y_test),\n    every_n_steps=50,\n    eval_steps=1)\n\nregressor = tf.contrib.learn.DNNRegressor(\n    feature_columns=feature_columns,\n    hidden_units=[10, 20, 10],\n    config=tf.contrib.learn.RunConfig(save_checkpoints_steps=validation_monitor._every_n_steps))\n\nregressor.fit(\n    input_fn=lambda: get_inputs_for_fit(x_train, y_train),\n    steps=2000,\n    monitors=[validation_monitor])\n\nprint regressor.evaluate(input_fn=lambda: get_inputs_for_fit(x_test, y_test),\n    steps=1)\n</code></pre>", "body_text": "Based on this SO answer, I was able to resolve the error. When using input_fn in ValidaitonMonitor(), fit(), and evaluate(), features needed to be passed as a dictionary with the same key. That key also needed to specified in tf.contrib.layers.real_valued_column(). Here is a reproducible example:\nimport numpy as np\nfrom sklearn.cross_validation import train_test_split\nimport tensorflow as tf\nimport logging\n\nlogging.getLogger().setLevel(logging.INFO)\n\nn = 200\nx = np.array(range(n), dtype=np.float32)/(n/10)\nx = x[:,np.newaxis]\ny = np.sin(x.squeeze()) + np.random.normal(0, 0.5, n)\n\nx_train, x_test, y_train, y_test = train_test_split(y, y,\n                                                    train_size=0.8,\n                                                    test_size=0.2)\n\ndef get_inputs_for_fit(x, y):\n    x = {'x': tf.constant(x)}\n    y = tf.constant(y)\n    return x, y\n\nfeature_columns = [tf.contrib.layers.real_valued_column('x', dimension=1)]\n\nvalidation_monitor = tf.contrib.learn.monitors.ValidationMonitor(\n    input_fn=lambda: get_inputs_for_fit(x_test, y_test),\n    every_n_steps=50,\n    eval_steps=1)\n\nregressor = tf.contrib.learn.DNNRegressor(\n    feature_columns=feature_columns,\n    hidden_units=[10, 20, 10],\n    config=tf.contrib.learn.RunConfig(save_checkpoints_steps=validation_monitor._every_n_steps))\n\nregressor.fit(\n    input_fn=lambda: get_inputs_for_fit(x_train, y_train),\n    steps=2000,\n    monitors=[validation_monitor])\n\nprint regressor.evaluate(input_fn=lambda: get_inputs_for_fit(x_test, y_test),\n    steps=1)", "body": "Based on this SO [answer](https://stackoverflow.com/questions/44937001/feature-are-incompatible-with-given-information-in-evaluate-using-tf-contrib-l), I was able to resolve the error. When using `input_fn` in `ValidaitonMonitor()`, `fit()`, and `evaluate()`, features needed to be passed as a dictionary with the same key. That key also needed to specified in `tf.contrib.layers.real_valued_column()`. Here is a reproducible example:\r\n\r\n```\r\nimport numpy as np\r\nfrom sklearn.cross_validation import train_test_split\r\nimport tensorflow as tf\r\nimport logging\r\n\r\nlogging.getLogger().setLevel(logging.INFO)\r\n\r\nn = 200\r\nx = np.array(range(n), dtype=np.float32)/(n/10)\r\nx = x[:,np.newaxis]\r\ny = np.sin(x.squeeze()) + np.random.normal(0, 0.5, n)\r\n\r\nx_train, x_test, y_train, y_test = train_test_split(y, y,\r\n                                                    train_size=0.8,\r\n                                                    test_size=0.2)\r\n\r\ndef get_inputs_for_fit(x, y):\r\n    x = {'x': tf.constant(x)}\r\n    y = tf.constant(y)\r\n    return x, y\r\n\r\nfeature_columns = [tf.contrib.layers.real_valued_column('x', dimension=1)]\r\n\r\nvalidation_monitor = tf.contrib.learn.monitors.ValidationMonitor(\r\n    input_fn=lambda: get_inputs_for_fit(x_test, y_test),\r\n    every_n_steps=50,\r\n    eval_steps=1)\r\n\r\nregressor = tf.contrib.learn.DNNRegressor(\r\n    feature_columns=feature_columns,\r\n    hidden_units=[10, 20, 10],\r\n    config=tf.contrib.learn.RunConfig(save_checkpoints_steps=validation_monitor._every_n_steps))\r\n\r\nregressor.fit(\r\n    input_fn=lambda: get_inputs_for_fit(x_train, y_train),\r\n    steps=2000,\r\n    monitors=[validation_monitor])\r\n\r\nprint regressor.evaluate(input_fn=lambda: get_inputs_for_fit(x_test, y_test),\r\n    steps=1)\r\n```"}