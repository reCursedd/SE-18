{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/345744167", "html_url": "https://github.com/tensorflow/tensorflow/issues/14583#issuecomment-345744167", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14583", "id": 345744167, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTc0NDE2Nw==", "user": {"login": "Linusnie", "id": 12471058, "node_id": "MDQ6VXNlcjEyNDcxMDU4", "avatar_url": "https://avatars1.githubusercontent.com/u/12471058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Linusnie", "html_url": "https://github.com/Linusnie", "followers_url": "https://api.github.com/users/Linusnie/followers", "following_url": "https://api.github.com/users/Linusnie/following{/other_user}", "gists_url": "https://api.github.com/users/Linusnie/gists{/gist_id}", "starred_url": "https://api.github.com/users/Linusnie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Linusnie/subscriptions", "organizations_url": "https://api.github.com/users/Linusnie/orgs", "repos_url": "https://api.github.com/users/Linusnie/repos", "events_url": "https://api.github.com/users/Linusnie/events{/privacy}", "received_events_url": "https://api.github.com/users/Linusnie/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-20T16:12:57Z", "updated_at": "2017-11-20T16:14:01Z", "author_association": "NONE", "body_html": "<p>in case anyone is interested I use the following code to get around the dimensionality requirements (works for any input with shape [batch, time, dims....] where the operation acts on dims):</p>\n<pre><code>def frame_wise_op(inputs, operation, **kwargs):\n    inputs_flat = tf.reshape(inputs, [-1] + inputs.shape[2:].as_list())\n\n    outputs_flat = operation(inputs_flat, **kwargs)\n\n    output_shape = tf.concat([tf.shape(inputs)[:2], tf.shape(outputs_flat)[1:]], 0)\n    outputs = tf.reshape(outputs_flat, output_shape)\n\n    return outputs\n</code></pre>\n<p>example use:</p>\n<pre><code>conv = frame_wise_op(inputs,\n                     operation=tf.layers.conv2d,\n                     filters=32,\n                     kernel_size=[5, 5])\nnet = frame_wise_op(net,\n                    operation=tf.layers.max_pooling2d,\n                    pool_size=[2, 2],\n                    strides=2)\n</code></pre>", "body_text": "in case anyone is interested I use the following code to get around the dimensionality requirements (works for any input with shape [batch, time, dims....] where the operation acts on dims):\ndef frame_wise_op(inputs, operation, **kwargs):\n    inputs_flat = tf.reshape(inputs, [-1] + inputs.shape[2:].as_list())\n\n    outputs_flat = operation(inputs_flat, **kwargs)\n\n    output_shape = tf.concat([tf.shape(inputs)[:2], tf.shape(outputs_flat)[1:]], 0)\n    outputs = tf.reshape(outputs_flat, output_shape)\n\n    return outputs\n\nexample use:\nconv = frame_wise_op(inputs,\n                     operation=tf.layers.conv2d,\n                     filters=32,\n                     kernel_size=[5, 5])\nnet = frame_wise_op(net,\n                    operation=tf.layers.max_pooling2d,\n                    pool_size=[2, 2],\n                    strides=2)", "body": "in case anyone is interested I use the following code to get around the dimensionality requirements (works for any input with shape [batch, time, dims....] where the operation acts on dims):\r\n\r\n```\r\ndef frame_wise_op(inputs, operation, **kwargs):\r\n    inputs_flat = tf.reshape(inputs, [-1] + inputs.shape[2:].as_list())\r\n\r\n    outputs_flat = operation(inputs_flat, **kwargs)\r\n\r\n    output_shape = tf.concat([tf.shape(inputs)[:2], tf.shape(outputs_flat)[1:]], 0)\r\n    outputs = tf.reshape(outputs_flat, output_shape)\r\n\r\n    return outputs\r\n```\r\n\r\nexample use:\r\n```\r\nconv = frame_wise_op(inputs,\r\n                     operation=tf.layers.conv2d,\r\n                     filters=32,\r\n                     kernel_size=[5, 5])\r\nnet = frame_wise_op(net,\r\n                    operation=tf.layers.max_pooling2d,\r\n                    pool_size=[2, 2],\r\n                    strides=2)\r\n```"}