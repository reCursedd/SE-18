{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/318979776", "html_url": "https://github.com/tensorflow/tensorflow/issues/11882#issuecomment-318979776", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/11882", "id": 318979776, "node_id": "MDEyOklzc3VlQ29tbWVudDMxODk3OTc3Ng==", "user": {"login": "jnjaby", "id": 16274959, "node_id": "MDQ6VXNlcjE2Mjc0OTU5", "avatar_url": "https://avatars3.githubusercontent.com/u/16274959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnjaby", "html_url": "https://github.com/jnjaby", "followers_url": "https://api.github.com/users/jnjaby/followers", "following_url": "https://api.github.com/users/jnjaby/following{/other_user}", "gists_url": "https://api.github.com/users/jnjaby/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnjaby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnjaby/subscriptions", "organizations_url": "https://api.github.com/users/jnjaby/orgs", "repos_url": "https://api.github.com/users/jnjaby/repos", "events_url": "https://api.github.com/users/jnjaby/events{/privacy}", "received_events_url": "https://api.github.com/users/jnjaby/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-31T06:28:00Z", "updated_at": "2017-08-01T01:18:11Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=326106\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/aselle\">@aselle</a> because the weight initialized by CPU and GPU are different. I try to initialize weights with another <code>tf.constant</code>. That really confuses.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\nnp.random.seed(<span class=\"pl-c1\">1234</span>)\nconv_ <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">56</span>)\nweight_ <span class=\"pl-k\">=</span> np.random.randn(<span class=\"pl-c1\">9</span>, <span class=\"pl-c1\">9</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">56</span>)\n\n<span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/cpu:0<span class=\"pl-pds\">\"</span></span>):\n    bottom <span class=\"pl-k\">=</span> tf.constant(conv_, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n    weight <span class=\"pl-k\">=</span> tf.constant(weight_, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>weight_cpu<span class=\"pl-pds\">\"</span></span>)\n    bias <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bias_cpu<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>np.zeros(<span class=\"pl-c1\">1</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32))\n\n    conv <span class=\"pl-k\">=</span> tf.nn.conv2d_transpose(bottom, weight, [<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">19</span>, <span class=\"pl-c1\">19</span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">1</span>], <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>SAME<span class=\"pl-pds\">'</span></span>)\n    conv_cpu <span class=\"pl-k\">=</span> tf.nn.bias_add(conv, bias)\n\n\n<span class=\"pl-k\">with</span> tf.device(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/gpu:0<span class=\"pl-pds\">'</span></span>):\n    bottom <span class=\"pl-k\">=</span> tf.constant(conv_, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n    weight <span class=\"pl-k\">=</span> tf.constant(weight_, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>weight_gpu<span class=\"pl-pds\">\"</span></span>)\n    bias <span class=\"pl-k\">=</span> tf.get_variable(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bias_gpu<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">initializer</span><span class=\"pl-k\">=</span>np.zeros(<span class=\"pl-c1\">1</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32))\n\n    conv <span class=\"pl-k\">=</span> tf.nn.conv2d_transpose(bottom, weight, [<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">19</span>, <span class=\"pl-c1\">19</span>, <span class=\"pl-c1\">1</span>], [<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">1</span>], <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>SAME<span class=\"pl-pds\">'</span></span>)\n    conv_gpu <span class=\"pl-k\">=</span> tf.nn.bias_add(conv, bias)\n\n\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run(tf.global_variables_initializer())\ncpu_a<span class=\"pl-k\">=</span>sess.run(conv_cpu)\ngpu_a<span class=\"pl-k\">=</span>sess.run(conv_gpu)\ngpu_b<span class=\"pl-k\">=</span>sess.run(conv_gpu)\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">rel_error</span>(<span class=\"pl-smi\">a</span>,<span class=\"pl-smi\">ref</span>):\n  <span class=\"pl-k\">return</span> np.max(np.abs((ref<span class=\"pl-k\">-</span>a)<span class=\"pl-k\">/</span>ref))\n\n<span class=\"pl-c1\">print</span> (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>relerror gpu_a vs cpu <span class=\"pl-c1\">%f</span> <span class=\"pl-cce\">\\n</span>relerror gpu_b vs cpu  <span class=\"pl-c1\">%f</span><span class=\"pl-pds\">'</span></span><span class=\"pl-k\">%</span>(rel_error(gpu_a, cpu_a), rel_error(gpu_b, cpu_a)))\n<span class=\"pl-c1\">print</span> (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>relerror gpu_a vs. gpu_b <span class=\"pl-c1\">%f</span> <span class=\"pl-pds\">'</span></span><span class=\"pl-k\">%</span>(rel_error(gpu_a, gpu_b)))\n\n<span class=\"pl-c1\">print</span> (np.array_equal(sess.run(conv_cpu), sess.run(conv_cpu)))\n<span class=\"pl-c1\">print</span> (np.array_equal(sess.run(conv_gpu), sess.run(conv_gpu)))</pre></div>", "body_text": "@aselle because the weight initialized by CPU and GPU are different. I try to initialize weights with another tf.constant. That really confuses.\nimport tensorflow as tf\nimport numpy as np\n\nnp.random.seed(1234)\nconv_ = np.random.randn(10, 7, 7, 56)\nweight_ = np.random.randn(9, 9, 1, 56)\n\nwith tf.device(\"/cpu:0\"):\n    bottom = tf.constant(conv_, dtype=tf.float32)\n    weight = tf.constant(weight_, dtype=tf.float32, name=\"weight_cpu\")\n    bias = tf.get_variable(\"bias_cpu\", initializer=np.zeros(1, dtype=np.float32))\n\n    conv = tf.nn.conv2d_transpose(bottom, weight, [10, 19, 19, 1], [1, 3, 3, 1], padding='SAME')\n    conv_cpu = tf.nn.bias_add(conv, bias)\n\n\nwith tf.device('/gpu:0'):\n    bottom = tf.constant(conv_, dtype=tf.float32)\n    weight = tf.constant(weight_, dtype=tf.float32, name=\"weight_gpu\")\n    bias = tf.get_variable(\"bias_gpu\", initializer=np.zeros(1, dtype=np.float32))\n\n    conv = tf.nn.conv2d_transpose(bottom, weight, [10, 19, 19, 1], [1, 3, 3, 1], padding='SAME')\n    conv_gpu = tf.nn.bias_add(conv, bias)\n\n\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\ncpu_a=sess.run(conv_cpu)\ngpu_a=sess.run(conv_gpu)\ngpu_b=sess.run(conv_gpu)\n\ndef rel_error(a,ref):\n  return np.max(np.abs((ref-a)/ref))\n\nprint ('relerror gpu_a vs cpu %f \\nrelerror gpu_b vs cpu  %f'%(rel_error(gpu_a, cpu_a), rel_error(gpu_b, cpu_a)))\nprint ('relerror gpu_a vs. gpu_b %f '%(rel_error(gpu_a, gpu_b)))\n\nprint (np.array_equal(sess.run(conv_cpu), sess.run(conv_cpu)))\nprint (np.array_equal(sess.run(conv_gpu), sess.run(conv_gpu)))", "body": "@aselle because the weight initialized by CPU and GPU are different. I try to initialize weights with another `tf.constant`. That really confuses.\r\n```python\r\nimport tensorflow as tf\r\nimport numpy as np\r\n\r\nnp.random.seed(1234)\r\nconv_ = np.random.randn(10, 7, 7, 56)\r\nweight_ = np.random.randn(9, 9, 1, 56)\r\n\r\nwith tf.device(\"/cpu:0\"):\r\n    bottom = tf.constant(conv_, dtype=tf.float32)\r\n    weight = tf.constant(weight_, dtype=tf.float32, name=\"weight_cpu\")\r\n    bias = tf.get_variable(\"bias_cpu\", initializer=np.zeros(1, dtype=np.float32))\r\n\r\n    conv = tf.nn.conv2d_transpose(bottom, weight, [10, 19, 19, 1], [1, 3, 3, 1], padding='SAME')\r\n    conv_cpu = tf.nn.bias_add(conv, bias)\r\n\r\n\r\nwith tf.device('/gpu:0'):\r\n    bottom = tf.constant(conv_, dtype=tf.float32)\r\n    weight = tf.constant(weight_, dtype=tf.float32, name=\"weight_gpu\")\r\n    bias = tf.get_variable(\"bias_gpu\", initializer=np.zeros(1, dtype=np.float32))\r\n\r\n    conv = tf.nn.conv2d_transpose(bottom, weight, [10, 19, 19, 1], [1, 3, 3, 1], padding='SAME')\r\n    conv_gpu = tf.nn.bias_add(conv, bias)\r\n\r\n\r\nsess = tf.Session()\r\nsess.run(tf.global_variables_initializer())\r\ncpu_a=sess.run(conv_cpu)\r\ngpu_a=sess.run(conv_gpu)\r\ngpu_b=sess.run(conv_gpu)\r\n\r\ndef rel_error(a,ref):\r\n  return np.max(np.abs((ref-a)/ref))\r\n\r\nprint ('relerror gpu_a vs cpu %f \\nrelerror gpu_b vs cpu  %f'%(rel_error(gpu_a, cpu_a), rel_error(gpu_b, cpu_a)))\r\nprint ('relerror gpu_a vs. gpu_b %f '%(rel_error(gpu_a, gpu_b)))\r\n\r\nprint (np.array_equal(sess.run(conv_cpu), sess.run(conv_cpu)))\r\nprint (np.array_equal(sess.run(conv_gpu), sess.run(conv_gpu)))\r\n```"}