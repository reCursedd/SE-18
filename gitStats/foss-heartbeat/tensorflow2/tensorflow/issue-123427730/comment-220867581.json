{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/220867581", "html_url": "https://github.com/tensorflow/tensorflow/issues/586#issuecomment-220867581", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/586", "id": 220867581, "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDg2NzU4MQ==", "user": {"login": "danijar", "id": 2111293, "node_id": "MDQ6VXNlcjIxMTEyOTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2111293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danijar", "html_url": "https://github.com/danijar", "followers_url": "https://api.github.com/users/danijar/followers", "following_url": "https://api.github.com/users/danijar/following{/other_user}", "gists_url": "https://api.github.com/users/danijar/gists{/gist_id}", "starred_url": "https://api.github.com/users/danijar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danijar/subscriptions", "organizations_url": "https://api.github.com/users/danijar/orgs", "repos_url": "https://api.github.com/users/danijar/repos", "events_url": "https://api.github.com/users/danijar/events{/privacy}", "received_events_url": "https://api.github.com/users/danijar/received_events", "type": "User", "site_admin": false}, "created_at": "2016-05-23T00:55:42Z", "updated_at": "2016-05-23T00:57:03Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a>  I totally agree that we shouldn't have both <code>.shape</code> and <code>.get_shape()</code>. One problem I have with the current <code>TensorShape</code> is that it cannot be combined into new shapes easily; please see the example below. Also, I think it's worth switching to the shorter and Numpy-equivalent <code>.shape</code> now (rather than waiting and breaking more code later).</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> a <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">None</span>])\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> b <span class=\"pl-k\">=</span> tf.reshape(a, [a.get_shape()[<span class=\"pl-c1\">0</span>], <span class=\"pl-c1\">10</span>, <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>])\nTraceback (most recent call last):\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&lt;stdin&gt;<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">in</span> <span class=\"pl-k\">&lt;</span>module<span class=\"pl-k\">&gt;</span>\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/lib/python3.5/site-packages/tensorflow/python/ops/gen_array_ops.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">1092</span>, <span class=\"pl-k\">in</span> reshape\n    name<span class=\"pl-k\">=</span>name)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/lib/python3.5/site-packages/tensorflow/python/ops/op_def_library.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">411</span>, <span class=\"pl-k\">in</span> apply_op\n    as_ref<span class=\"pl-k\">=</span>input_arg.is_ref)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">566</span>, <span class=\"pl-k\">in</span> convert_to_tensor\n    ret <span class=\"pl-k\">=</span> conversion_func(value, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>name, <span class=\"pl-v\">as_ref</span><span class=\"pl-k\">=</span>as_ref)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/lib/python3.5/site-packages/tensorflow/python/ops/constant_op.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">179</span>, <span class=\"pl-k\">in</span> _constant_tensor_conversion_function\n    <span class=\"pl-k\">return</span> constant(v, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span>name)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/lib/python3.5/site-packages/tensorflow/python/ops/constant_op.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">162</span>, <span class=\"pl-k\">in</span> constant\n    tensor_util.make_tensor_proto(value, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>shape))\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">332</span>, <span class=\"pl-k\">in</span> make_tensor_proto\n    _AssertCompatible(values, dtype)\n  File <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/usr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py<span class=\"pl-pds\">\"</span></span>, line <span class=\"pl-c1\">272</span>, <span class=\"pl-k\">in</span> _AssertCompatible\n    (dtype.name, <span class=\"pl-c1\">repr</span>(mismatch), <span class=\"pl-c1\">type</span>(mismatch).<span class=\"pl-c1\">__name__</span>))\n<span class=\"pl-c1\">TypeError</span>: Expected int32, got Dimension(<span class=\"pl-c1\">None</span>) of <span class=\"pl-c1\">type</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Dimension<span class=\"pl-pds\">'</span></span> instead.\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> </pre></div>", "body_text": "@mrry  I totally agree that we shouldn't have both .shape and .get_shape(). One problem I have with the current TensorShape is that it cannot be combined into new shapes easily; please see the example below. Also, I think it's worth switching to the shorter and Numpy-equivalent .shape now (rather than waiting and breaking more code later).\n>>> import tensorflow as tf\n>>> a = tf.placeholder(tf.float32, [None, None, None])\n>>> b = tf.reshape(a, [a.get_shape()[0], 10, -1])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 1092, in reshape\n    name=name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/op_def_library.py\", line 411, in apply_op\n    as_ref=input_arg.is_ref)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 566, in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/constant_op.py\", line 179, in _constant_tensor_conversion_function\n    return constant(v, dtype=dtype, name=name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/constant_op.py\", line 162, in constant\n    tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py\", line 332, in make_tensor_proto\n    _AssertCompatible(values, dtype)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py\", line 272, in _AssertCompatible\n    (dtype.name, repr(mismatch), type(mismatch).__name__))\nTypeError: Expected int32, got Dimension(None) of type 'Dimension' instead.\n>>>", "body": "@mrry  I totally agree that we shouldn't have both `.shape` and `.get_shape()`. One problem I have with the current `TensorShape` is that it cannot be combined into new shapes easily; please see the example below. Also, I think it's worth switching to the shorter and Numpy-equivalent `.shape` now (rather than waiting and breaking more code later).\n\n``` python\n>>> import tensorflow as tf\n>>> a = tf.placeholder(tf.float32, [None, None, None])\n>>> b = tf.reshape(a, [a.get_shape()[0], 10, -1])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 1092, in reshape\n    name=name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/op_def_library.py\", line 411, in apply_op\n    as_ref=input_arg.is_ref)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 566, in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/constant_op.py\", line 179, in _constant_tensor_conversion_function\n    return constant(v, dtype=dtype, name=name)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/ops/constant_op.py\", line 162, in constant\n    tensor_util.make_tensor_proto(value, dtype=dtype, shape=shape))\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py\", line 332, in make_tensor_proto\n    _AssertCompatible(values, dtype)\n  File \"/usr/lib/python3.5/site-packages/tensorflow/python/framework/tensor_util.py\", line 272, in _AssertCompatible\n    (dtype.name, repr(mismatch), type(mismatch).__name__))\nTypeError: Expected int32, got Dimension(None) of type 'Dimension' instead.\n>>> \n```\n"}