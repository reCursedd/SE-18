{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/263467029", "html_url": "https://github.com/tensorflow/tensorflow/issues/3340#issuecomment-263467029", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3340", "id": 263467029, "node_id": "MDEyOklzc3VlQ29tbWVudDI2MzQ2NzAyOQ==", "user": {"login": "npakhomova", "id": 17796836, "node_id": "MDQ6VXNlcjE3Nzk2ODM2", "avatar_url": "https://avatars0.githubusercontent.com/u/17796836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npakhomova", "html_url": "https://github.com/npakhomova", "followers_url": "https://api.github.com/users/npakhomova/followers", "following_url": "https://api.github.com/users/npakhomova/following{/other_user}", "gists_url": "https://api.github.com/users/npakhomova/gists{/gist_id}", "starred_url": "https://api.github.com/users/npakhomova/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npakhomova/subscriptions", "organizations_url": "https://api.github.com/users/npakhomova/orgs", "repos_url": "https://api.github.com/users/npakhomova/repos", "events_url": "https://api.github.com/users/npakhomova/events{/privacy}", "received_events_url": "https://api.github.com/users/npakhomova/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-29T03:33:09Z", "updated_at": "2016-11-29T06:07:06Z", "author_association": "NONE", "body_html": "<p>Hi, I've faced with the same problem.<br>\nThe only Estimator that have  save/restore methods are TensorFlowEstimator and it is deprecated and restore method throws  <code>NotImplementedError</code><br>\n<a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=4269898\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/terrytangyuan\">@terrytangyuan</a> Thank you for advising using the same model_dirrectory for restoring model.<br>\nBut I've faced with problem, that when restoring model from directory - it is also necessary to set (somehow) <code>self._targets_info </code> to initialize <code>target</code> variable in <code>tensorflow.contrib.learn.python.learn.estimators.estimator.Estimator#_get_predict_ops</code> method</p>\n<p>I've found the only way how to do it: use  <code>classifier.fit</code> method with <strong>step=0</strong></p>\n<p>So this is how my restore method looks like:</p>\n<pre><code>classifier = learn.Estimator(model_fn=myModel,model_dir=modelPath)\nclassifier.fit(train, target , steps=0)\nclassifier.predict(textForClassification,  as_iterable=True)\n</code></pre>\n<p><code>train</code> can be empty, but dimentional must be equal to initial,  <code>target</code>  - must contain target classes for classification</p>", "body_text": "Hi, I've faced with the same problem.\nThe only Estimator that have  save/restore methods are TensorFlowEstimator and it is deprecated and restore method throws  NotImplementedError\n@terrytangyuan Thank you for advising using the same model_dirrectory for restoring model.\nBut I've faced with problem, that when restoring model from directory - it is also necessary to set (somehow) self._targets_info  to initialize target variable in tensorflow.contrib.learn.python.learn.estimators.estimator.Estimator#_get_predict_ops method\nI've found the only way how to do it: use  classifier.fit method with step=0\nSo this is how my restore method looks like:\nclassifier = learn.Estimator(model_fn=myModel,model_dir=modelPath)\nclassifier.fit(train, target , steps=0)\nclassifier.predict(textForClassification,  as_iterable=True)\n\ntrain can be empty, but dimentional must be equal to initial,  target  - must contain target classes for classification", "body": "Hi, I've faced with the same problem.\r\nThe only Estimator that have  save/restore methods are TensorFlowEstimator and it is deprecated and restore method throws  `NotImplementedError`\r\n @terrytangyuan Thank you for advising using the same model_dirrectory for restoring model.\r\nBut I've faced with problem, that when restoring model from directory - it is also necessary to set (somehow) `self._targets_info ` to initialize `target` variable in `tensorflow.contrib.learn.python.learn.estimators.estimator.Estimator#_get_predict_ops` method\r\n\r\nI've found the only way how to do it: use  `classifier.fit` method with **step=0**\r\n\r\nSo this is how my restore method looks like:\r\n```\r\nclassifier = learn.Estimator(model_fn=myModel,model_dir=modelPath)\r\nclassifier.fit(train, target , steps=0)\r\nclassifier.predict(textForClassification,  as_iterable=True)\r\n```\r\n`train` can be empty, but dimentional must be equal to initial,  `target`  - must contain target classes for classification\r\n\r\n\r\n\r\n"}