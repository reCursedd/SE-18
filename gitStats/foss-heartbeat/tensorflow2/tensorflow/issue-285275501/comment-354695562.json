{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/354695562", "html_url": "https://github.com/tensorflow/tensorflow/issues/15760#issuecomment-354695562", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15760", "id": 354695562, "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDY5NTU2Mg==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-02T02:44:00Z", "updated_at": "2018-01-02T02:46:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The classic graph way would be to provide another registration mechanism. IE, using Theano <a href=\"http://deeplearning.net/software/theano/library/gradient.html\" rel=\"nofollow\">notation</a> in addition to \"right-operator\" and \"left-operator\", each op would support \"per-example left-operator\", which interprets input nxb matrix as a vectors of  backprops from b independent per-example losses, stacked together into a matrix.</p>\n<p>However, things seem to be moving in direction of \"eager\" mode which has much nicer autograd-style wrappers. Maybe <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1458824\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mattjj\">@mattjj</a> has some trick up his sleeve on how to accomplish this -- ie, how do you batch things up to compute k gradients for k examples efficiently?</p>", "body_text": "The classic graph way would be to provide another registration mechanism. IE, using Theano notation in addition to \"right-operator\" and \"left-operator\", each op would support \"per-example left-operator\", which interprets input nxb matrix as a vectors of  backprops from b independent per-example losses, stacked together into a matrix.\nHowever, things seem to be moving in direction of \"eager\" mode which has much nicer autograd-style wrappers. Maybe @mattjj has some trick up his sleeve on how to accomplish this -- ie, how do you batch things up to compute k gradients for k examples efficiently?", "body": "The classic graph way would be to provide another registration mechanism. IE, using Theano [notation](http://deeplearning.net/software/theano/library/gradient.html) in addition to \"right-operator\" and \"left-operator\", each op would support \"per-example left-operator\", which interprets input nxb matrix as a vectors of  backprops from b independent per-example losses, stacked together into a matrix.\r\n\r\nHowever, things seem to be moving in direction of \"eager\" mode which has much nicer autograd-style wrappers. Maybe @mattjj has some trick up his sleeve on how to accomplish this -- ie, how do you batch things up to compute k gradients for k examples efficiently?"}