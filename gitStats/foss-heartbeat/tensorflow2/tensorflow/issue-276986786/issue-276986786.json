{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14909", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14909/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14909/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14909/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/14909", "id": 276986786, "node_id": "MDU6SXNzdWUyNzY5ODY3ODY=", "number": 14909, "title": "Crossentropy loss function with weights by sample and by category and outcome", "user": {"login": "dickreuter", "id": 1256318, "node_id": "MDQ6VXNlcjEyNTYzMTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1256318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dickreuter", "html_url": "https://github.com/dickreuter", "followers_url": "https://api.github.com/users/dickreuter/followers", "following_url": "https://api.github.com/users/dickreuter/following{/other_user}", "gists_url": "https://api.github.com/users/dickreuter/gists{/gist_id}", "starred_url": "https://api.github.com/users/dickreuter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dickreuter/subscriptions", "organizations_url": "https://api.github.com/users/dickreuter/orgs", "repos_url": "https://api.github.com/users/dickreuter/repos", "events_url": "https://api.github.com/users/dickreuter/events{/privacy}", "received_events_url": "https://api.github.com/users/dickreuter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-27T11:31:51Z", "updated_at": "2017-11-28T02:49:56Z", "closed_at": "2017-11-28T02:49:56Z", "author_association": "NONE", "body_html": "<p>In my loss function I would like to weight each sample differently and in each sample, each category should be weighted differently as well depending on the outcome. Meaning if in a cross entropy the one_hot is correctly specified, a different weight needs to be applied than when the output is incorrect. So I would need two weights per category. A tensor with rank 3. One dimension for the samples, a second dimension for the amount of classes, and a third dimension that differentiates between correct and incorrect match.</p>\n<p>I have seen that with sparse_softmax_cross_entropy it is possible to pass in a weight, that serves as a coefficient for positive examples. This is a good start, but I would need to pass in a tensor instead, to treat each sample differently. weighted_cross_entropy_with_logits seems to work in a very similar way but doesn't offer that functionality.</p>\n<p>Is this a feature that could be added?</p>", "body_text": "In my loss function I would like to weight each sample differently and in each sample, each category should be weighted differently as well depending on the outcome. Meaning if in a cross entropy the one_hot is correctly specified, a different weight needs to be applied than when the output is incorrect. So I would need two weights per category. A tensor with rank 3. One dimension for the samples, a second dimension for the amount of classes, and a third dimension that differentiates between correct and incorrect match.\nI have seen that with sparse_softmax_cross_entropy it is possible to pass in a weight, that serves as a coefficient for positive examples. This is a good start, but I would need to pass in a tensor instead, to treat each sample differently. weighted_cross_entropy_with_logits seems to work in a very similar way but doesn't offer that functionality.\nIs this a feature that could be added?", "body": "In my loss function I would like to weight each sample differently and in each sample, each category should be weighted differently as well depending on the outcome. Meaning if in a cross entropy the one_hot is correctly specified, a different weight needs to be applied than when the output is incorrect. So I would need two weights per category. A tensor with rank 3. One dimension for the samples, a second dimension for the amount of classes, and a third dimension that differentiates between correct and incorrect match.\r\n\r\nI have seen that with sparse_softmax_cross_entropy it is possible to pass in a weight, that serves as a coefficient for positive examples. This is a good start, but I would need to pass in a tensor instead, to treat each sample differently. weighted_cross_entropy_with_logits seems to work in a very similar way but doesn't offer that functionality.\r\n\r\nIs this a feature that could be added?"}