{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/347412520", "html_url": "https://github.com/tensorflow/tensorflow/issues/12968#issuecomment-347412520", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12968", "id": 347412520, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzQxMjUyMA==", "user": {"login": "MtDersvan", "id": 7069222, "node_id": "MDQ6VXNlcjcwNjkyMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7069222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MtDersvan", "html_url": "https://github.com/MtDersvan", "followers_url": "https://api.github.com/users/MtDersvan/followers", "following_url": "https://api.github.com/users/MtDersvan/following{/other_user}", "gists_url": "https://api.github.com/users/MtDersvan/gists{/gist_id}", "starred_url": "https://api.github.com/users/MtDersvan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MtDersvan/subscriptions", "organizations_url": "https://api.github.com/users/MtDersvan/orgs", "repos_url": "https://api.github.com/users/MtDersvan/repos", "events_url": "https://api.github.com/users/MtDersvan/events{/privacy}", "received_events_url": "https://api.github.com/users/MtDersvan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-28T04:48:31Z", "updated_at": "2017-11-28T04:49:34Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20959853\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/drpngx\">@drpngx</a> I think the order of parameters doesn't need to be changed, <code>num_true</code> is always the first <code>.attr</code>, so switching it to an <code>.input</code> preserves the order. I have a simple working fix that leaves almost everything intact <a href=\"https://github.com/MtDersvan/tensorflow/tree/r1.4\">here</a> on <code>r1.4</code> branch. If you're interested I can submit a PR.<br>\nI did direct changes to <code>core/ops</code> and <code>core/kernels</code> instead of a <code>contrib</code> clone, due to the fact that it was too much of a hassle to replicate all candidate_samplers and range_samplers.<br>\nRight now ops take a single <code>tensor</code> instead of an <code>int</code> per batch.</p>\n<p>Future Work:<br>\nI haven't figured out yet how to make it to work with a list of tensors of shape <code>batch_size</code>, so each example in a batch can have it's own <code>num_true</code>. Because rn it needs all items in a batch to have the same number of <code>num_true</code>, which is computationally inefficient. Also, I left out one check in <code>ComputeAccidentalHits</code> - <code>.SetShapeFn()</code>.</p>", "body_text": "@drpngx I think the order of parameters doesn't need to be changed, num_true is always the first .attr, so switching it to an .input preserves the order. I have a simple working fix that leaves almost everything intact here on r1.4 branch. If you're interested I can submit a PR.\nI did direct changes to core/ops and core/kernels instead of a contrib clone, due to the fact that it was too much of a hassle to replicate all candidate_samplers and range_samplers.\nRight now ops take a single tensor instead of an int per batch.\nFuture Work:\nI haven't figured out yet how to make it to work with a list of tensors of shape batch_size, so each example in a batch can have it's own num_true. Because rn it needs all items in a batch to have the same number of num_true, which is computationally inefficient. Also, I left out one check in ComputeAccidentalHits - .SetShapeFn().", "body": "@drpngx I think the order of parameters doesn't need to be changed, `num_true` is always the first `.attr`, so switching it to an `.input` preserves the order. I have a simple working fix that leaves almost everything intact [here](https://github.com/MtDersvan/tensorflow/tree/r1.4) on `r1.4` branch. If you're interested I can submit a PR. \r\nI did direct changes to `core/ops` and `core/kernels` instead of a `contrib` clone, due to the fact that it was too much of a hassle to replicate all candidate_samplers and range_samplers.\r\nRight now ops take a single `tensor` instead of an `int` per batch.\r\n\r\nFuture Work:\r\nI haven't figured out yet how to make it to work with a list of tensors of shape `batch_size`, so each example in a batch can have it's own `num_true`. Because rn it needs all items in a batch to have the same number of `num_true`, which is computationally inefficient. Also, I left out one check in `ComputeAccidentalHits` - `.SetShapeFn()`."}