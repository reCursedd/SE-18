{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/330916363", "html_url": "https://github.com/tensorflow/tensorflow/issues/12968#issuecomment-330916363", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12968", "id": 330916363, "node_id": "MDEyOklzc3VlQ29tbWVudDMzMDkxNjM2Mw==", "user": {"login": "MtDersvan", "id": 7069222, "node_id": "MDQ6VXNlcjcwNjkyMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7069222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MtDersvan", "html_url": "https://github.com/MtDersvan", "followers_url": "https://api.github.com/users/MtDersvan/followers", "following_url": "https://api.github.com/users/MtDersvan/following{/other_user}", "gists_url": "https://api.github.com/users/MtDersvan/gists{/gist_id}", "starred_url": "https://api.github.com/users/MtDersvan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MtDersvan/subscriptions", "organizations_url": "https://api.github.com/users/MtDersvan/orgs", "repos_url": "https://api.github.com/users/MtDersvan/repos", "events_url": "https://api.github.com/users/MtDersvan/events{/privacy}", "received_events_url": "https://api.github.com/users/MtDersvan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-09-20T17:02:25Z", "updated_at": "2017-09-20T17:02:25Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=20959853\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/drpngx\">@drpngx</a> Sorry for the delay, too.<br>\nHere is a simple short toy example: <a href=\"https://pastebin.com/bNH8F4K5\" rel=\"nofollow\">https://pastebin.com/bNH8F4K5</a><br>\nHere is a stack trace: <a href=\"https://pastebin.com/H9fctCxt\" rel=\"nofollow\">https://pastebin.com/H9fctCxt</a><br>\nBasically there's a hardcoded <code>int(v)</code> in <code>_MakeInt</code> in <code>log_uniform_candidate_sampler</code> hard type restriction. And <code>_log_uniform_candidate_sampler</code> code is generated from a kernel which makes it harder to hack it on my own.</p>\n<p>If I understand <code>num_true</code> correctly (maybe I'm wrong?), but it should be a common case where the number of labels differs per example. Maybe there is a different sampler that supports variable <code>num_true</code>?</p>", "body_text": "@drpngx Sorry for the delay, too.\nHere is a simple short toy example: https://pastebin.com/bNH8F4K5\nHere is a stack trace: https://pastebin.com/H9fctCxt\nBasically there's a hardcoded int(v) in _MakeInt in log_uniform_candidate_sampler hard type restriction. And _log_uniform_candidate_sampler code is generated from a kernel which makes it harder to hack it on my own.\nIf I understand num_true correctly (maybe I'm wrong?), but it should be a common case where the number of labels differs per example. Maybe there is a different sampler that supports variable num_true?", "body": "@drpngx Sorry for the delay, too.\r\nHere is a simple short toy example: https://pastebin.com/bNH8F4K5\r\nHere is a stack trace: https://pastebin.com/H9fctCxt\r\nBasically there's a hardcoded `int(v)` in `_MakeInt` in `log_uniform_candidate_sampler` hard type restriction. And `_log_uniform_candidate_sampler` code is generated from a kernel which makes it harder to hack it on my own.\r\n\r\nIf I understand `num_true` correctly (maybe I'm wrong?), but it should be a common case where the number of labels differs per example. Maybe there is a different sampler that supports variable `num_true`?"}