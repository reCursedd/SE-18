{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17514", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17514/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17514/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17514/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17514", "id": 303205292, "node_id": "MDU6SXNzdWUzMDMyMDUyOTI=", "number": 17514, "title": "ImportError: No module named 'tensorflow.contrib.ios_examples.benchmark.benchmark.xcodeproj'", "user": {"login": "bhagyashripachkor", "id": 13975798, "node_id": "MDQ6VXNlcjEzOTc1Nzk4", "avatar_url": "https://avatars2.githubusercontent.com/u/13975798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bhagyashripachkor", "html_url": "https://github.com/bhagyashripachkor", "followers_url": "https://api.github.com/users/bhagyashripachkor/followers", "following_url": "https://api.github.com/users/bhagyashripachkor/following{/other_user}", "gists_url": "https://api.github.com/users/bhagyashripachkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/bhagyashripachkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bhagyashripachkor/subscriptions", "organizations_url": "https://api.github.com/users/bhagyashripachkor/orgs", "repos_url": "https://api.github.com/users/bhagyashripachkor/repos", "events_url": "https://api.github.com/users/bhagyashripachkor/events{/privacy}", "received_events_url": "https://api.github.com/users/bhagyashripachkor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "petewarden", "id": 161459, "node_id": "MDQ6VXNlcjE2MTQ1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/161459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petewarden", "html_url": "https://github.com/petewarden", "followers_url": "https://api.github.com/users/petewarden/followers", "following_url": "https://api.github.com/users/petewarden/following{/other_user}", "gists_url": "https://api.github.com/users/petewarden/gists{/gist_id}", "starred_url": "https://api.github.com/users/petewarden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petewarden/subscriptions", "organizations_url": "https://api.github.com/users/petewarden/orgs", "repos_url": "https://api.github.com/users/petewarden/repos", "events_url": "https://api.github.com/users/petewarden/events{/privacy}", "received_events_url": "https://api.github.com/users/petewarden/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 17, "created_at": "2018-03-07T18:14:18Z", "updated_at": "2018-07-17T15:36:52Z", "closed_at": "2018-07-17T15:36:52Z", "author_association": "NONE", "body_html": "<p>I am trying to create exe file for python application built on tkinter(8.6), python(3.6), keras(0.14), tensorflow(1.5),  cx_Freeze(5.1). All the package installs  were done through pip.<br>\nWindows 7-64 bit<br>\nI'm using command:- python setup.py build<br>\nBelow is my setup.py file:-</p>\n<p>import cx_Freeze<br>\nimport sys<br>\nimport matplotlib<br>\nimport os<br>\nimport pandas<br>\nimport tkinter.filedialog<br>\nimport keras<br>\nimport sklearn<br>\nimport numpy<br>\nimport tensorflow<br>\nimport openpyxl<br>\nimport datetime<br>\nbase = None</p>\n<p>os.environ['TCL_LIBRARY'] = r'C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\tcl\\tcl8.6'<br>\nos.environ['TK_LIBRARY'] = r'C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\tcl\\tk8.6'</p>\n<p>if sys.platform == 'win32':<br>\nbase = \"Win32GUI\"<br>\nfrom glob import glob<br>\n#data_files = [(\"Microsoft.VC120.CRT\", glob(r'C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\redist\\x64\\Microsoft.VC120.CRT*.*'))]<br>\nexecutables = [cx_Freeze.Executable(\"app-3.py\",base=base)]</p>\n<p>cx_Freeze.setup(<br>\nname = \"foreacast\",<br>\n#options = {\"build_exe\": {\"packages\":[\"tkinter\",\"matplotlib\"],\"include_files\":[\"numpy\"]}}<br>\noptions = { \"build_exe\": {\"packages\":[\"cx_Freeze\",\"datetime\",\"openpyxl\",\"tkinter\",\"numpy\",\"matplotlib\",\"pandas\",\"tkinter.filedialog\",\"keras\",\"sklearn\",\"tensorflow\"] }},<br>\nversion = \"0.1\",<br>\ndescription = \"test\",<br>\n#data_files=data_files,<br>\nexecutables = executables)<br>\nBelow is input file- app-3.py<br>\n#from tkinter import Tk, Label, Button, Frame<br>\nimport tkinter as tk<br>\nfrom tkinter.filedialog import askopenfilename<br>\nimport os<br>\nimport tkinter.messagebox<br>\nimport numpy as np<br>\nimport xlrd<br>\nimport datetime<br>\nimport matplotlib.pyplot as plt<br>\nimport pandas as pd<br>\nimport keras<br>\nfrom keras.models import Sequential<br>\nfrom keras.layers import LSTM<br>\nfrom keras.layers import Dense<br>\nfrom keras.layers import Dropout<br>\nfrom keras import optimizers<br>\nfrom sklearn.preprocessing import MinMaxScaler<br>\nfrom numpy.random import seed<br>\nimport tensorflow as tf<br>\nfrom tensorflow import set_random_seed<br>\nfrom openpyxl import load_workbook</p>\n<h1>Here, we are creating our class, Window, and inheriting from the Frame</h1>\n<h1>class. Frame is a class from the tkinter module. (see Lib/tkinter/<strong>init</strong>)</h1>\n<p>class Window(tk.Frame):</p>\n<pre><code># Define settings upon initialization. Here you can specify\ndef __init__(self, master=None):\n    \n    # parameters that you want to send through the Frame class. \n    tk.Frame.__init__(self, master,background=\"#66b3ff\")   \n\n    #reference to the master widget, which is the tk window                 \n    self.master = master\n\n    #with that, we want to then run init_window, which doesn't yet exist\n    self.init_window()\n\n    self.master.minsize(width=1400, height=900)\n    self.master.maxsize(width=1400, height=900)\n    self.master.configure(background=\"#8cb3d9\")\n#Creation of init_window\ndef close_window():\n    root.destroy()\n    \ndef init_window(self):\n\n    # changing the title of our master widget      \n    self.master.title(\"Call Volume Forecasting\")\n\n    tk.Label(root, text=\"Call Volume Forecasting\",font = \"Helvetica 28 bold italic\",bg = \"#3333ff\",fg = \"white\",width=20).grid(row=0,column=0,columnspan=4,padx=400, pady=20,sticky=tk.W)\n    \n    self.CheckAdvisor=tk.IntVar()\n    self.CheckShareholder=tk.IntVar()\n    self.CheckRetirement=tk.IntVar()\n    self.CheckFast=tk.IntVar()\n    self.CheckVIP=tk.IntVar()\n    self.CheckCGF=tk.IntVar()\n    self.CheckWT=tk.IntVar()\n    self.CheckIOBRP=tk.IntVar()\n    self.CheckFT=tk.IntVar()\n    self.CheckNJBEST=tk.IntVar()\n    self.CheckSelectAll=tk.IntVar()\n    self.CheckType = tk.IntVar()\n    self.input_file = \"\"\n    \n    tk.Button(root,text=\"Choose Input File\",command=self.choose_input_file,font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=15,height=1).grid(row=1, column = 0,columnspan=2, padx=200,pady=30,sticky=tk.W)\n              \n    self.input_file = tk.Text(root,width=80,height=2)\n    self.input_file.grid(row=1, column=1,columnspan=3,padx=50,pady=20, sticky=tk.W)\n    \n    self.advisorstate = tk.Checkbutton(root, text=\"Advisor\",  variable= self.CheckAdvisor,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.advisorstate.grid(row=2, column = 0, padx=100, pady=30,sticky=tk.W)\n    \n    self.shareholderstate = tk.Checkbutton(root, text=\"Shareholder\",variable= self.CheckShareholder, font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.shareholderstate.grid(row=3, column = 0, padx=100, pady=30,sticky=tk.W)\n    \n    self.retirementstate= tk.Checkbutton(root, text=\"Retirement\",variable= self.CheckRetirement,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.retirementstate.grid(row=4, column = 0, padx=100, pady=30,sticky=tk.W)\n    \n    self.faststate = tk.Checkbutton(root, text=\"Fast\",variable=self.CheckFast,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.faststate.grid(row=5, column = 0, padx=100, pady=30,sticky=tk.W)\n    \n    self.vipstate = tk.Checkbutton(root, text=\"VIP\",variable=self.CheckVIP,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.vipstate.grid(row=6, column = 0, padx=100, pady=30,sticky=tk.W)\n    \n    self.cgf = tk.Checkbutton(root, text=\"CGF\",variable=self.CheckCGF,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.cgf.grid(row=2, column = 1, padx=10, pady=30,sticky=tk.W)\n    \n    self.wt = tk.Checkbutton(root, text=\"WT\",variable=self.CheckWT,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.wt.grid(row=3, column = 1, padx=10, pady=30,sticky=tk.W)\n    \n    self.iobrp = tk.Checkbutton(root, text=\"IOBRP\",variable=self.CheckIOBRP,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.iobrp.grid(row=4, column = 1, padx=10, pady=30,sticky=tk.W)\n    \n    self.ft = tk.Checkbutton(root, text=\"FT 529\",variable=self.CheckFT,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.ft.grid(row=5, column = 1, padx=10, pady=30,sticky=tk.W)\n    \n    self.njbest = tk.Checkbutton(root, text=\"NJBEST\",variable=self.CheckNJBEST,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.njbest.grid(row=6, column = 1, padx=10, pady=30,sticky=tk.W)\n    \n    self.selectall = tk.Checkbutton(root, text=\"Select all skills\",variable=self.CheckSelectAll,command=self.cb_check,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\")\n    self.selectall.grid(row=4, column = 2,padx=10,pady=30,sticky=tk.W)\n    \n    self.daily = tk.Radiobutton(root, text=\"Daily\",variable=self.CheckType,value=1,font = \"Helvetica 18 bold italic\",width=10,bg=\"light grey\",anchor=tk.W)\n    self.daily.grid(row=3, column = 3, pady=30,sticky=tk.W)\n    \n    self.monthly = tk.Radiobutton(root, text=\"Monthly\",variable=self.CheckType,value=2,font = \"Helvetica 18 bold italic\",width=10,bg=\"light grey\",anchor=tk.W)\n    self.monthly.grid(row=4, column = 3, pady=30,sticky=tk.W)\n    \n    self.both = tk.Radiobutton(root, text=\"Both\",variable=self.CheckType,value=3,font = \"Helvetica 18 bold italic\",width=10,bg=\"light grey\",anchor=tk.W)\n    self.both.grid(row=5, column = 3, pady=30,sticky=tk.W)\n    \n    tk.Button(root, text=\"Build\",font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=10,height=1,command=self.build_models).grid(row=7, column = 0, padx=100,pady=30,sticky=tk.W)\n    tk.Button(root, text=\"Forecast\",font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=10,height=1,command=self.forecast_models).grid(row=7, column = 1, padx=50,pady=30,sticky=tk.W)\n    tk.Button(root, text=\"Clear\",font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=10,height=1,command = self.clear).grid(row=7, column = 2, padx=50,pady=30,sticky=tk.W)\n    tk.Button(root, text=\"Exit\",font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=10,height=1,command = self.close).grid(row=7, column = 3, padx=50,pady=30,sticky=tk.W)         \n\ndef cb_check(self):\n    if self.CheckSelectAll.get():\n        self.advisorstate.config(state=tk.DISABLED)\n        self.CheckAdvisor.set(0)\n        self.shareholderstate.config(state=tk.DISABLED)\n        self.CheckShareholder.set(0)\n        self.retirementstate.config(state=tk.DISABLED)\n        self.CheckRetirement.set(0)\n        self.faststate.config(state=tk.DISABLED)\n        self.CheckFast.set(0)\n        self.vipstate.config(state=tk.DISABLED)\n        self.CheckVIP.set(0)\n        self.cgf.config(state=tk.DISABLED)\n        self.CheckCGF.set(0)\n        self.wt.config(state=tk.DISABLED)\n        self.CheckWT.set(0)\n        self.iobrp.config(state=tk.DISABLED)\n        self.CheckIOBRP.set(0)\n        self.ft.config(state=tk.DISABLED)\n        self.CheckFT.set(0)\n        self.njbest.config(state=tk.DISABLED)\n        self.CheckNJBEST.set(0)\n    else:\n        self.advisorstate.config(state=tk.NORMAL)\n        self.shareholderstate.config(state=tk.NORMAL)\n        self.retirementstate.config(state=tk.NORMAL)\n        self.faststate.config(state=tk.NORMAL)\n        self.vipstate.config(state=tk.NORMAL)\n        self.cgf.config(state=tk.NORMAL)\n        self.wt.config(state=tk.NORMAL)\n        self.iobrp.config(state=tk.NORMAL)\n        self.ft.config(state=tk.NORMAL)\n        self.njbest.config(state=tk.NORMAL)\n\ndef close(self):\n    root.destroy()\n    \ndef clear(self):\n    #print(\"in claer\")\n    self.CheckAdvisor.set(0)\n    self.CheckShareholder.set(0)\n    self.CheckRetirement.set(0)\n    self.CheckFast.set(0)\n    self.CheckVIP.set(0)\n    self.CheckCGF.set(0)\n    self.CheckWT.set(0)\n    self.CheckIOBRP.set(0)\n    self.CheckFT.set(0)\n    self.CheckNJBEST.set(0)\n    self.CheckSelectAll.set(0)\n    self.CheckType.set(0)\n    self.input_file.delete('1.0', tk.END)\n    self.advisorstate.config(state=tk.NORMAL)\n    self.shareholderstate.config(state=tk.NORMAL)\n    self.retirementstate.config(state=tk.NORMAL)\n    self.faststate.config(state=tk.NORMAL)\n    self.vipstate.config(state=tk.NORMAL)\n    self.cgf.config(state=tk.NORMAL)\n    self.wt.config(state=tk.NORMAL)\n    self.iobrp.config(state=tk.NORMAL)\n    self.ft.config(state=tk.NORMAL)\n    self.njbest.config(state=tk.NORMAL)\n    self.input_file.config(state=tk.NORMAL)\n\ndef choose_input_file(self):\n    self.filename = askopenfilename()\n    if os.path.isfile(self.filename):\n        self.input_file.configure(state=tk.NORMAL)\n        self.input_file.insert(tk.INSERT,self.filename)\n        self.input_file.configure(state=tk.DISABLED)\n        fname = self.input_file.get(\"1.0\", \"end-1c\")\n        workbook = xlrd.open_workbook(fname,\"w\")\n        \n        #print(self.input_file)\n    else: \n        print(\"No file chosen\")\n        tkinter.messagebox.showinfo(title=\"\", message=\"Please select input file\")\n \ndef validation(self):\n    if len(self.input_file.get(\"1.0\", \"end-1c\")) == 0:\n        tkinter.messagebox.showinfo(title=\"\", message=\"Please select input file\")\n    else:\n        print(\"file selected\")\n        self.validate_chbox()\n        \n        \ndef validate_chbox(self):\n    if self.CheckAdvisor.get() == 0 and self.CheckShareholder.get() == 0 and self.CheckRetirement.get() == 0 and self.CheckFast.get() == 0 and self.CheckVIP.get() == 0 and self.CheckCGF.get() == 0 and self.CheckWT.get() == 0 and self.CheckIOBRP.get() == 0 and self.CheckFT.get() == 0 and self.CheckNJBEST.get() == 0 and self.CheckSelectAll.get() == 0:\n        tkinter.messagebox.showinfo(title=\"\", message=\"Please select the skill\")\n    else:\n        self.validate_radiobtn()\n        \ndef validate_radiobtn(self):\n    if self.CheckType.get() == 0:\n        tkinter.messagebox.showinfo(title=\"\", message=\"Please select the forecast type\")\n\ndef build_models(self):\n    self.validation()\n    self.build()\n\ndef build(self):\n    if self.CheckSelectAll.get() == 1:\n        self.buildAllModels()\n    else:\n        self.build_advisor_selected()\n\ndef buildAllModels(self):\n    print(\"in buildAllModels\")\n\ndef forecast_models(self):\n    self.validation()\n    self.forecast()\n    \ndef forecast(self):\n    if self.CheckSelectAll.get() == 1:\n        self.forecastAllModels()\n    else:\n        self.forecast_advisor_selected() \n        \ndef build_advisor_selected(self):\n    if self.CheckAdvisor.get() == 1:\n        if self.CheckType.get() == 1:\n            print(\"daily\")\n            self.build_advisor_daily()\n        elif self.CheckType.get() == 2:\n            print(\"monthly\")\n            self.advisor_monthly()\n        else:\n            print(\"both\")\n            self.advisor_both()\n\ndef forecast_advisor_selected(self):\n    if self.CheckAdvisor.get() == 1:\n        if self.CheckType.get() == 1:\n            print(\"daily\")\n            self.forecast_advisor_daily()\n        elif self.CheckType.get() == 2:\n            print(\"monthly\")\n            self.forecast_advisor_monthly()\n        else:\n            print(\"both\")\n            self.forecast_advisor_both()\n\ndef build_advisor_daily(self):\n    required_data = self.read_advisor_daily()\n    print(required_data)\n    #global advisor_build \n    #if global advisor_build ==0:\n    self.build_advisor_daily_model(required_data)\n    #else:\n        #print(\"advisor model already built.Please forecast\")\n        \ndef read_advisor_daily(self):\n    fname = self.input_file.get(\"1.0\", \"end-1c\")\n    workbook = xlrd.open_workbook(fname,\"w\")\n    #sheets = workbook.sheet_names()\n    date_col = []\n    required_data = []\n    sh = workbook.sheet_by_name(\"Daily_Data\")\n    for rownum in range(1,sh.nrows):\n        row_valaues = sh.row_values(rownum)\n        date_col.append(datetime.datetime(*xlrd.xldate_as_tuple(row_valaues[0],workbook.datemode)))\n        required_data.append(row_valaues[1])\n\n    required_data = pd.DataFrame(required_data)\n    required_data.replace('', np.nan, inplace=True)\n    required_data.dropna(inplace=True)\n    return required_data\n\n\ndef build_advisor_daily_model(self,required_data):\n    print(\"in build_advisor_daily_model\")\n    self.destroy()\n    print(required_data)\n    np.random.seed(12345) \n    tf.set_random_seed(12345)\n    tkinter.messagebox.showinfo(title=\"\", message=\"Advisor model building started\")\n    print(type(required_data))\n    data_set = required_data\n    tkinter.messagebox.showinfo(title=\"\", message=\"data set read\")\n    model_data_set = data_set.iloc[:,:]\n    model_data_set = model_data_set[model_data_set[0]&gt;0]\n    print(len(model_data_set))\n    a1=len(model_data_set)\n    print(type(model_data_set))\n    tkinter.messagebox.showinfo(title=\"\", message=a1)\n    modified_data = model_data_set\n    modified_data = modified_data.values.reshape(-1,1)\n    print(modified_data.shape)\n    print(modified_data)\n     \n    global sc \n    sc = MinMaxScaler(feature_range=(0,1))\n    train = sc.fit_transform(modified_data)\n    print(train[0:5,:])\n    print(train.shape)\n    print(train.shape[0])\n    print(train.shape[1])\n    \n    global y_train\n    X_train = []\n    y_train = []\n    l = len(modified_data)\n    print(l)\n    for i in range(60,l):\n        X_train.append(train[i-60:i,:])\n        y_train.append(train[i,:])\n    print(len(X_train))\n    print(len(y_train))\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    print(X_train.shape)\n    #print(X_train)\n    print(y_train.shape)\n    #X_train = X_train.reshape(X_train.shape[1],1)\n    print(X_train.shape[0])\n    tkinter.messagebox.showinfo(title=\"\", message=\"train data built\")\n    #total 60 columns, lag=20\n    global regressor\n    regressor = Sequential()\n    regressor.add(LSTM(units=60,return_sequences=True,input_shape=(X_train.shape[1],1)))\n    regressor.add(Dropout(0.2))\n    regressor.add(LSTM(units=60,return_sequences=True))\n    regressor.add(Dropout(0.2))\n    regressor.add(LSTM(units=60,return_sequences=True))\n    regressor.add(Dropout(0.2))\n    #regressor.add(LSTM(units=60,return_sequences=True))\n    #regressor.add(Dropout(0.2))\n    #regressor.add(LSTM(units=50,return_sequences=True))\n    #regressor.add(Dropout(0.2))\n    regressor.add(LSTM(units=60))\n    regressor.add(Dropout(0.2))\n    regressor.add(Dense(units=1))\n    #rmsprop = keras.optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=0.001, decay=0.001)\n    tkinter.messagebox.showinfo(title=\"\", message=\"compiling model\")\n    regressor.compile(optimizer='adam',loss='mean_squared_error',metrics=['accuracy'])\n    tkinter.messagebox.showinfo(title=\"\", message=\"model compilation complete\")\n    regressor.fit(X_train,y_train,epochs=300,batch_size=32,shuffle=False)\n    global advisor_build\n    advisor_build = 1\n    print(y_train)\n    tkinter.messagebox.showinfo(title=\"\", message=\"Advisor model building completed\")\n    #return (self.regressor,advisor_build,y_train)\n\ndef forecast_advisor_daily(self):\n    print(\"in forecast\")\n    global advisor_build\n    print(advisor_build)\n    global y_train\n    global sc\n    global regressor\n    #advisor_build = 1\n    if advisor_build == 1:\n        y_test = y_train\n        print(y_test)\n        print(len(y_test))\n        X_test_1 = []\n        prediciton_list = []\n        y_test = y_test.reshape(-1,1)\n        print(y_test.shape)\n\n        y_test = sc.transform(y_test)\n\n        X_test_1.append(y_test[-60:])\n        print(X_test_1)\n        X_test_1 = np.array(X_test_1)\n        print(X_test_1[0:5])\n        print(X_test_1.shape)\n        for x in range(20):\n\n            y_pred_1 = regressor.predict(X_test_1)\n\n            a = sc.inverse_transform(y_pred_1)\n            b = a[0][0]\n            X_test_1 = np.delete(X_test_1,0,axis=1)\n\n            a = y_pred_1[0][0]\n\n            X_test_1 = np.concatenate((X_test_1,np.zeros((1,1,1))),axis=1)\n            X_test_1 = np.insert(X_test_1,59,a,axis=1)\n            X_test_1 = np.delete(X_test_1,60,axis=1) \n\n            prediciton_list.append(b)\n\n        print(prediciton_list)\n        fname = self.input_file.get(\"1.0\", \"end-1c\")\n        workbook = xlrd.open_workbook(fname,\"w\")\n        date_col = []\n        required_data = []\n        sh = workbook.sheet_by_name(\"Daily_Data\")\n        for rownum in range(1,sh.nrows):\n            row_valaues = sh.row_values(rownum)\n            date_col.append(datetime.datetime(*xlrd.xldate_as_tuple(row_valaues[0],workbook.datemode)))\n            required_data.append(row_valaues[1])\n        required_data = pd.DataFrame(required_data)\n        print(required_data)\n        len1 = len(required_data)\n        required_data.replace('', np.nan, inplace=True)\n        z = required_data.last_valid_index()\n        print(z)\n        print(type(z))\n        ind = z\n        ind = ind + 1\n        y = required_data.loc[required_data.last_valid_index()]\n        print(y)\n        required_data.dropna(inplace=True)\n        print(required_data)\n        date_col = pd.DataFrame(date_col)\n        print(date_col)\n        end_date = date_col.iloc[z][0]\n        \n        z =  z + 2\n        y = z\n        print(z)\n        start_date = date_col.iloc[z][0]\n\n        print(start_date.date())\n\n\n        df2 = pd.DataFrame(prediciton_list)\n        print(df2)\n        df3 = []\n        for i in range(ind,ind+20):\n            df3.append(date_col.iloc[i][0])\n\n        df3 = pd.DataFrame(df3,columns = [\"Date\"])\n        print(df3)\n  \n\n        k = df3.loc[df3['Date'].isin(['2018-01-01','2018-01-15','2018-02-19','2018-03-30','2018-05-28','2018-07-04','2018-09-03','2018-11-23','2018-12-25'])]\n        print(k)\n        print(type(k))\n        print(len(k))\n        index_list = []\n     \n        if len(k) &gt;= 1:\n            for z in range(len(k)):\n                index_list.append(k.index[z])\n                print(index_list)\n     \n            for l in range(len(index_list)):\n                m = index_list[l]\n                df2.xs(m)[0] = 0\n        else:\n            print(\"no holidays\")\n        print(df2)\n        book = load_workbook(fname)\n        writer = pd.ExcelWriter(fname, engine='openpyxl') \n        writer.book = book\n        writer.sheets = dict((ws.title, ws) for ws in book.worksheets)\n        print(y)\n        df2.to_excel(writer, \"Daily_Output\", startcol=1,startrow=y,header=None,index=False)\n        \n        writer.save()\n        tkinter.messagebox.showinfo(title=\"\", message=\"Advisor forecasting completed\")\n        \n    else:\n        tkinter.messagebox.showinfo(title=\"\", message=\"please build  first and then forecast\")\ndef destroy(self):\n    global advisor_build\n    global regressor\n    regressor = None\n    global y_train\n    y_train = None\n    global sc\n    sc = None\n    advisor_build = 0\n</code></pre>\n<h1>=============================================================================</h1>\n<h1>def mean_absolute_percentage_error(y_true, y_pred):</h1>\n<h1>perc = [0 if x ==0 else np.abs((x-y)/x) for x,y in zip(y_true,y_pred)]</h1>\n<h1>return np.mean(perc[1]) * 100</h1>\n<h1>=============================================================================</h1>\n<p>root = tk.Tk()<br>\n#creation of an instance<br>\n#holiday_list = ['2018-01-01','2018-01-15','2018-02-19','2018-03-30','2018-05-28','2018-07-04','2018-09-03','2018-11-23','2018-12-25']<br>\nglobal advisor_build<br>\nglobal regressor<br>\nglobal y_train<br>\nglobal sc<br>\napp = Window(root)<br>\n#mainloop<br>\nroot.mainloop()</p>\n<p>Below is the error -<br>\nC:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36&gt;python setup.py build<br>\nUsing TensorFlow backend.<br>\nrunning build<br>\nrunning build_exe<br>\nTraceback (most recent call last):<br>\nFile \"setup.py\", line 38, in <br>\nexecutables = executables)<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag<br>\nes\\cx_Freeze\\dist.py\", line 349, in setup<br>\ndistutils.core.setup(**attrs)<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\c<br>\nore.py\", line 148, in setup<br>\ndist.run_commands()<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\d<br>\nist.py\", line 955, in run_commands<br>\nself.run_command(cmd)<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\d<br>\nist.py\", line 974, in run_command<br>\ncmd_obj.run()<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\c<br>\nommand\\build.py\", line 135, in run<br>\nself.run_command(cmd_name)<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\c<br>\nmd.py\", line 313, in run_command<br>\nself.distribution.run_command(command)<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\d<br>\nist.py\", line 974, in run_command<br>\ncmd_obj.run()<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag<br>\nes\\cx_Freeze\\dist.py\", line 219, in run<br>\nfreezer.Freeze()<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag<br>\nes\\cx_Freeze\\freezer.py\", line 616, in Freeze<br>\nself.finder = self._GetModuleFinder()<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag<br>\nes\\cx_Freeze\\freezer.py\", line 342, in _GetModuleFinder<br>\nfinder.IncludePackage(name)<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag<br>\nes\\cx_Freeze\\finder.py\", line 661, in IncludePackage<br>\nself._ImportAllSubModules(module, deferredImports)<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag<br>\nes\\cx_Freeze\\finder.py\", line 288, in _ImportAllSubModules<br>\nrecursive)<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag<br>\nes\\cx_Freeze\\finder.py\", line 288, in _ImportAllSubModules<br>\nrecursive)<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag<br>\nes\\cx_Freeze\\finder.py\", line 288, in _ImportAllSubModules<br>\nrecursive)<br>\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag<br>\nes\\cx_Freeze\\finder.py\", line 283, in _ImportAllSubModules<br>\nraise ImportError(\"No module named %r\" % subModuleName)<br>\nImportError: No module named 'tensorflow.contrib.ios_examples.benchmark.benchmar<br>\nk.xcodeproj'</p>\n<p>I have tried doing same steps for python 3.5, but with no luck.</p>", "body_text": "I am trying to create exe file for python application built on tkinter(8.6), python(3.6), keras(0.14), tensorflow(1.5),  cx_Freeze(5.1). All the package installs  were done through pip.\nWindows 7-64 bit\nI'm using command:- python setup.py build\nBelow is my setup.py file:-\nimport cx_Freeze\nimport sys\nimport matplotlib\nimport os\nimport pandas\nimport tkinter.filedialog\nimport keras\nimport sklearn\nimport numpy\nimport tensorflow\nimport openpyxl\nimport datetime\nbase = None\nos.environ['TCL_LIBRARY'] = r'C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\tcl\\tcl8.6'\nos.environ['TK_LIBRARY'] = r'C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\tcl\\tk8.6'\nif sys.platform == 'win32':\nbase = \"Win32GUI\"\nfrom glob import glob\n#data_files = [(\"Microsoft.VC120.CRT\", glob(r'C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\redist\\x64\\Microsoft.VC120.CRT*.*'))]\nexecutables = [cx_Freeze.Executable(\"app-3.py\",base=base)]\ncx_Freeze.setup(\nname = \"foreacast\",\n#options = {\"build_exe\": {\"packages\":[\"tkinter\",\"matplotlib\"],\"include_files\":[\"numpy\"]}}\noptions = { \"build_exe\": {\"packages\":[\"cx_Freeze\",\"datetime\",\"openpyxl\",\"tkinter\",\"numpy\",\"matplotlib\",\"pandas\",\"tkinter.filedialog\",\"keras\",\"sklearn\",\"tensorflow\"] }},\nversion = \"0.1\",\ndescription = \"test\",\n#data_files=data_files,\nexecutables = executables)\nBelow is input file- app-3.py\n#from tkinter import Tk, Label, Button, Frame\nimport tkinter as tk\nfrom tkinter.filedialog import askopenfilename\nimport os\nimport tkinter.messagebox\nimport numpy as np\nimport xlrd\nimport datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import LSTM\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras import optimizers\nfrom sklearn.preprocessing import MinMaxScaler\nfrom numpy.random import seed\nimport tensorflow as tf\nfrom tensorflow import set_random_seed\nfrom openpyxl import load_workbook\nHere, we are creating our class, Window, and inheriting from the Frame\nclass. Frame is a class from the tkinter module. (see Lib/tkinter/init)\nclass Window(tk.Frame):\n# Define settings upon initialization. Here you can specify\ndef __init__(self, master=None):\n    \n    # parameters that you want to send through the Frame class. \n    tk.Frame.__init__(self, master,background=\"#66b3ff\")   \n\n    #reference to the master widget, which is the tk window                 \n    self.master = master\n\n    #with that, we want to then run init_window, which doesn't yet exist\n    self.init_window()\n\n    self.master.minsize(width=1400, height=900)\n    self.master.maxsize(width=1400, height=900)\n    self.master.configure(background=\"#8cb3d9\")\n#Creation of init_window\ndef close_window():\n    root.destroy()\n    \ndef init_window(self):\n\n    # changing the title of our master widget      \n    self.master.title(\"Call Volume Forecasting\")\n\n    tk.Label(root, text=\"Call Volume Forecasting\",font = \"Helvetica 28 bold italic\",bg = \"#3333ff\",fg = \"white\",width=20).grid(row=0,column=0,columnspan=4,padx=400, pady=20,sticky=tk.W)\n    \n    self.CheckAdvisor=tk.IntVar()\n    self.CheckShareholder=tk.IntVar()\n    self.CheckRetirement=tk.IntVar()\n    self.CheckFast=tk.IntVar()\n    self.CheckVIP=tk.IntVar()\n    self.CheckCGF=tk.IntVar()\n    self.CheckWT=tk.IntVar()\n    self.CheckIOBRP=tk.IntVar()\n    self.CheckFT=tk.IntVar()\n    self.CheckNJBEST=tk.IntVar()\n    self.CheckSelectAll=tk.IntVar()\n    self.CheckType = tk.IntVar()\n    self.input_file = \"\"\n    \n    tk.Button(root,text=\"Choose Input File\",command=self.choose_input_file,font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=15,height=1).grid(row=1, column = 0,columnspan=2, padx=200,pady=30,sticky=tk.W)\n              \n    self.input_file = tk.Text(root,width=80,height=2)\n    self.input_file.grid(row=1, column=1,columnspan=3,padx=50,pady=20, sticky=tk.W)\n    \n    self.advisorstate = tk.Checkbutton(root, text=\"Advisor\",  variable= self.CheckAdvisor,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.advisorstate.grid(row=2, column = 0, padx=100, pady=30,sticky=tk.W)\n    \n    self.shareholderstate = tk.Checkbutton(root, text=\"Shareholder\",variable= self.CheckShareholder, font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.shareholderstate.grid(row=3, column = 0, padx=100, pady=30,sticky=tk.W)\n    \n    self.retirementstate= tk.Checkbutton(root, text=\"Retirement\",variable= self.CheckRetirement,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.retirementstate.grid(row=4, column = 0, padx=100, pady=30,sticky=tk.W)\n    \n    self.faststate = tk.Checkbutton(root, text=\"Fast\",variable=self.CheckFast,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.faststate.grid(row=5, column = 0, padx=100, pady=30,sticky=tk.W)\n    \n    self.vipstate = tk.Checkbutton(root, text=\"VIP\",variable=self.CheckVIP,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.vipstate.grid(row=6, column = 0, padx=100, pady=30,sticky=tk.W)\n    \n    self.cgf = tk.Checkbutton(root, text=\"CGF\",variable=self.CheckCGF,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.cgf.grid(row=2, column = 1, padx=10, pady=30,sticky=tk.W)\n    \n    self.wt = tk.Checkbutton(root, text=\"WT\",variable=self.CheckWT,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.wt.grid(row=3, column = 1, padx=10, pady=30,sticky=tk.W)\n    \n    self.iobrp = tk.Checkbutton(root, text=\"IOBRP\",variable=self.CheckIOBRP,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.iobrp.grid(row=4, column = 1, padx=10, pady=30,sticky=tk.W)\n    \n    self.ft = tk.Checkbutton(root, text=\"FT 529\",variable=self.CheckFT,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.ft.grid(row=5, column = 1, padx=10, pady=30,sticky=tk.W)\n    \n    self.njbest = tk.Checkbutton(root, text=\"NJBEST\",variable=self.CheckNJBEST,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\n    self.njbest.grid(row=6, column = 1, padx=10, pady=30,sticky=tk.W)\n    \n    self.selectall = tk.Checkbutton(root, text=\"Select all skills\",variable=self.CheckSelectAll,command=self.cb_check,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\")\n    self.selectall.grid(row=4, column = 2,padx=10,pady=30,sticky=tk.W)\n    \n    self.daily = tk.Radiobutton(root, text=\"Daily\",variable=self.CheckType,value=1,font = \"Helvetica 18 bold italic\",width=10,bg=\"light grey\",anchor=tk.W)\n    self.daily.grid(row=3, column = 3, pady=30,sticky=tk.W)\n    \n    self.monthly = tk.Radiobutton(root, text=\"Monthly\",variable=self.CheckType,value=2,font = \"Helvetica 18 bold italic\",width=10,bg=\"light grey\",anchor=tk.W)\n    self.monthly.grid(row=4, column = 3, pady=30,sticky=tk.W)\n    \n    self.both = tk.Radiobutton(root, text=\"Both\",variable=self.CheckType,value=3,font = \"Helvetica 18 bold italic\",width=10,bg=\"light grey\",anchor=tk.W)\n    self.both.grid(row=5, column = 3, pady=30,sticky=tk.W)\n    \n    tk.Button(root, text=\"Build\",font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=10,height=1,command=self.build_models).grid(row=7, column = 0, padx=100,pady=30,sticky=tk.W)\n    tk.Button(root, text=\"Forecast\",font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=10,height=1,command=self.forecast_models).grid(row=7, column = 1, padx=50,pady=30,sticky=tk.W)\n    tk.Button(root, text=\"Clear\",font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=10,height=1,command = self.clear).grid(row=7, column = 2, padx=50,pady=30,sticky=tk.W)\n    tk.Button(root, text=\"Exit\",font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=10,height=1,command = self.close).grid(row=7, column = 3, padx=50,pady=30,sticky=tk.W)         \n\ndef cb_check(self):\n    if self.CheckSelectAll.get():\n        self.advisorstate.config(state=tk.DISABLED)\n        self.CheckAdvisor.set(0)\n        self.shareholderstate.config(state=tk.DISABLED)\n        self.CheckShareholder.set(0)\n        self.retirementstate.config(state=tk.DISABLED)\n        self.CheckRetirement.set(0)\n        self.faststate.config(state=tk.DISABLED)\n        self.CheckFast.set(0)\n        self.vipstate.config(state=tk.DISABLED)\n        self.CheckVIP.set(0)\n        self.cgf.config(state=tk.DISABLED)\n        self.CheckCGF.set(0)\n        self.wt.config(state=tk.DISABLED)\n        self.CheckWT.set(0)\n        self.iobrp.config(state=tk.DISABLED)\n        self.CheckIOBRP.set(0)\n        self.ft.config(state=tk.DISABLED)\n        self.CheckFT.set(0)\n        self.njbest.config(state=tk.DISABLED)\n        self.CheckNJBEST.set(0)\n    else:\n        self.advisorstate.config(state=tk.NORMAL)\n        self.shareholderstate.config(state=tk.NORMAL)\n        self.retirementstate.config(state=tk.NORMAL)\n        self.faststate.config(state=tk.NORMAL)\n        self.vipstate.config(state=tk.NORMAL)\n        self.cgf.config(state=tk.NORMAL)\n        self.wt.config(state=tk.NORMAL)\n        self.iobrp.config(state=tk.NORMAL)\n        self.ft.config(state=tk.NORMAL)\n        self.njbest.config(state=tk.NORMAL)\n\ndef close(self):\n    root.destroy()\n    \ndef clear(self):\n    #print(\"in claer\")\n    self.CheckAdvisor.set(0)\n    self.CheckShareholder.set(0)\n    self.CheckRetirement.set(0)\n    self.CheckFast.set(0)\n    self.CheckVIP.set(0)\n    self.CheckCGF.set(0)\n    self.CheckWT.set(0)\n    self.CheckIOBRP.set(0)\n    self.CheckFT.set(0)\n    self.CheckNJBEST.set(0)\n    self.CheckSelectAll.set(0)\n    self.CheckType.set(0)\n    self.input_file.delete('1.0', tk.END)\n    self.advisorstate.config(state=tk.NORMAL)\n    self.shareholderstate.config(state=tk.NORMAL)\n    self.retirementstate.config(state=tk.NORMAL)\n    self.faststate.config(state=tk.NORMAL)\n    self.vipstate.config(state=tk.NORMAL)\n    self.cgf.config(state=tk.NORMAL)\n    self.wt.config(state=tk.NORMAL)\n    self.iobrp.config(state=tk.NORMAL)\n    self.ft.config(state=tk.NORMAL)\n    self.njbest.config(state=tk.NORMAL)\n    self.input_file.config(state=tk.NORMAL)\n\ndef choose_input_file(self):\n    self.filename = askopenfilename()\n    if os.path.isfile(self.filename):\n        self.input_file.configure(state=tk.NORMAL)\n        self.input_file.insert(tk.INSERT,self.filename)\n        self.input_file.configure(state=tk.DISABLED)\n        fname = self.input_file.get(\"1.0\", \"end-1c\")\n        workbook = xlrd.open_workbook(fname,\"w\")\n        \n        #print(self.input_file)\n    else: \n        print(\"No file chosen\")\n        tkinter.messagebox.showinfo(title=\"\", message=\"Please select input file\")\n \ndef validation(self):\n    if len(self.input_file.get(\"1.0\", \"end-1c\")) == 0:\n        tkinter.messagebox.showinfo(title=\"\", message=\"Please select input file\")\n    else:\n        print(\"file selected\")\n        self.validate_chbox()\n        \n        \ndef validate_chbox(self):\n    if self.CheckAdvisor.get() == 0 and self.CheckShareholder.get() == 0 and self.CheckRetirement.get() == 0 and self.CheckFast.get() == 0 and self.CheckVIP.get() == 0 and self.CheckCGF.get() == 0 and self.CheckWT.get() == 0 and self.CheckIOBRP.get() == 0 and self.CheckFT.get() == 0 and self.CheckNJBEST.get() == 0 and self.CheckSelectAll.get() == 0:\n        tkinter.messagebox.showinfo(title=\"\", message=\"Please select the skill\")\n    else:\n        self.validate_radiobtn()\n        \ndef validate_radiobtn(self):\n    if self.CheckType.get() == 0:\n        tkinter.messagebox.showinfo(title=\"\", message=\"Please select the forecast type\")\n\ndef build_models(self):\n    self.validation()\n    self.build()\n\ndef build(self):\n    if self.CheckSelectAll.get() == 1:\n        self.buildAllModels()\n    else:\n        self.build_advisor_selected()\n\ndef buildAllModels(self):\n    print(\"in buildAllModels\")\n\ndef forecast_models(self):\n    self.validation()\n    self.forecast()\n    \ndef forecast(self):\n    if self.CheckSelectAll.get() == 1:\n        self.forecastAllModels()\n    else:\n        self.forecast_advisor_selected() \n        \ndef build_advisor_selected(self):\n    if self.CheckAdvisor.get() == 1:\n        if self.CheckType.get() == 1:\n            print(\"daily\")\n            self.build_advisor_daily()\n        elif self.CheckType.get() == 2:\n            print(\"monthly\")\n            self.advisor_monthly()\n        else:\n            print(\"both\")\n            self.advisor_both()\n\ndef forecast_advisor_selected(self):\n    if self.CheckAdvisor.get() == 1:\n        if self.CheckType.get() == 1:\n            print(\"daily\")\n            self.forecast_advisor_daily()\n        elif self.CheckType.get() == 2:\n            print(\"monthly\")\n            self.forecast_advisor_monthly()\n        else:\n            print(\"both\")\n            self.forecast_advisor_both()\n\ndef build_advisor_daily(self):\n    required_data = self.read_advisor_daily()\n    print(required_data)\n    #global advisor_build \n    #if global advisor_build ==0:\n    self.build_advisor_daily_model(required_data)\n    #else:\n        #print(\"advisor model already built.Please forecast\")\n        \ndef read_advisor_daily(self):\n    fname = self.input_file.get(\"1.0\", \"end-1c\")\n    workbook = xlrd.open_workbook(fname,\"w\")\n    #sheets = workbook.sheet_names()\n    date_col = []\n    required_data = []\n    sh = workbook.sheet_by_name(\"Daily_Data\")\n    for rownum in range(1,sh.nrows):\n        row_valaues = sh.row_values(rownum)\n        date_col.append(datetime.datetime(*xlrd.xldate_as_tuple(row_valaues[0],workbook.datemode)))\n        required_data.append(row_valaues[1])\n\n    required_data = pd.DataFrame(required_data)\n    required_data.replace('', np.nan, inplace=True)\n    required_data.dropna(inplace=True)\n    return required_data\n\n\ndef build_advisor_daily_model(self,required_data):\n    print(\"in build_advisor_daily_model\")\n    self.destroy()\n    print(required_data)\n    np.random.seed(12345) \n    tf.set_random_seed(12345)\n    tkinter.messagebox.showinfo(title=\"\", message=\"Advisor model building started\")\n    print(type(required_data))\n    data_set = required_data\n    tkinter.messagebox.showinfo(title=\"\", message=\"data set read\")\n    model_data_set = data_set.iloc[:,:]\n    model_data_set = model_data_set[model_data_set[0]>0]\n    print(len(model_data_set))\n    a1=len(model_data_set)\n    print(type(model_data_set))\n    tkinter.messagebox.showinfo(title=\"\", message=a1)\n    modified_data = model_data_set\n    modified_data = modified_data.values.reshape(-1,1)\n    print(modified_data.shape)\n    print(modified_data)\n     \n    global sc \n    sc = MinMaxScaler(feature_range=(0,1))\n    train = sc.fit_transform(modified_data)\n    print(train[0:5,:])\n    print(train.shape)\n    print(train.shape[0])\n    print(train.shape[1])\n    \n    global y_train\n    X_train = []\n    y_train = []\n    l = len(modified_data)\n    print(l)\n    for i in range(60,l):\n        X_train.append(train[i-60:i,:])\n        y_train.append(train[i,:])\n    print(len(X_train))\n    print(len(y_train))\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    print(X_train.shape)\n    #print(X_train)\n    print(y_train.shape)\n    #X_train = X_train.reshape(X_train.shape[1],1)\n    print(X_train.shape[0])\n    tkinter.messagebox.showinfo(title=\"\", message=\"train data built\")\n    #total 60 columns, lag=20\n    global regressor\n    regressor = Sequential()\n    regressor.add(LSTM(units=60,return_sequences=True,input_shape=(X_train.shape[1],1)))\n    regressor.add(Dropout(0.2))\n    regressor.add(LSTM(units=60,return_sequences=True))\n    regressor.add(Dropout(0.2))\n    regressor.add(LSTM(units=60,return_sequences=True))\n    regressor.add(Dropout(0.2))\n    #regressor.add(LSTM(units=60,return_sequences=True))\n    #regressor.add(Dropout(0.2))\n    #regressor.add(LSTM(units=50,return_sequences=True))\n    #regressor.add(Dropout(0.2))\n    regressor.add(LSTM(units=60))\n    regressor.add(Dropout(0.2))\n    regressor.add(Dense(units=1))\n    #rmsprop = keras.optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=0.001, decay=0.001)\n    tkinter.messagebox.showinfo(title=\"\", message=\"compiling model\")\n    regressor.compile(optimizer='adam',loss='mean_squared_error',metrics=['accuracy'])\n    tkinter.messagebox.showinfo(title=\"\", message=\"model compilation complete\")\n    regressor.fit(X_train,y_train,epochs=300,batch_size=32,shuffle=False)\n    global advisor_build\n    advisor_build = 1\n    print(y_train)\n    tkinter.messagebox.showinfo(title=\"\", message=\"Advisor model building completed\")\n    #return (self.regressor,advisor_build,y_train)\n\ndef forecast_advisor_daily(self):\n    print(\"in forecast\")\n    global advisor_build\n    print(advisor_build)\n    global y_train\n    global sc\n    global regressor\n    #advisor_build = 1\n    if advisor_build == 1:\n        y_test = y_train\n        print(y_test)\n        print(len(y_test))\n        X_test_1 = []\n        prediciton_list = []\n        y_test = y_test.reshape(-1,1)\n        print(y_test.shape)\n\n        y_test = sc.transform(y_test)\n\n        X_test_1.append(y_test[-60:])\n        print(X_test_1)\n        X_test_1 = np.array(X_test_1)\n        print(X_test_1[0:5])\n        print(X_test_1.shape)\n        for x in range(20):\n\n            y_pred_1 = regressor.predict(X_test_1)\n\n            a = sc.inverse_transform(y_pred_1)\n            b = a[0][0]\n            X_test_1 = np.delete(X_test_1,0,axis=1)\n\n            a = y_pred_1[0][0]\n\n            X_test_1 = np.concatenate((X_test_1,np.zeros((1,1,1))),axis=1)\n            X_test_1 = np.insert(X_test_1,59,a,axis=1)\n            X_test_1 = np.delete(X_test_1,60,axis=1) \n\n            prediciton_list.append(b)\n\n        print(prediciton_list)\n        fname = self.input_file.get(\"1.0\", \"end-1c\")\n        workbook = xlrd.open_workbook(fname,\"w\")\n        date_col = []\n        required_data = []\n        sh = workbook.sheet_by_name(\"Daily_Data\")\n        for rownum in range(1,sh.nrows):\n            row_valaues = sh.row_values(rownum)\n            date_col.append(datetime.datetime(*xlrd.xldate_as_tuple(row_valaues[0],workbook.datemode)))\n            required_data.append(row_valaues[1])\n        required_data = pd.DataFrame(required_data)\n        print(required_data)\n        len1 = len(required_data)\n        required_data.replace('', np.nan, inplace=True)\n        z = required_data.last_valid_index()\n        print(z)\n        print(type(z))\n        ind = z\n        ind = ind + 1\n        y = required_data.loc[required_data.last_valid_index()]\n        print(y)\n        required_data.dropna(inplace=True)\n        print(required_data)\n        date_col = pd.DataFrame(date_col)\n        print(date_col)\n        end_date = date_col.iloc[z][0]\n        \n        z =  z + 2\n        y = z\n        print(z)\n        start_date = date_col.iloc[z][0]\n\n        print(start_date.date())\n\n\n        df2 = pd.DataFrame(prediciton_list)\n        print(df2)\n        df3 = []\n        for i in range(ind,ind+20):\n            df3.append(date_col.iloc[i][0])\n\n        df3 = pd.DataFrame(df3,columns = [\"Date\"])\n        print(df3)\n  \n\n        k = df3.loc[df3['Date'].isin(['2018-01-01','2018-01-15','2018-02-19','2018-03-30','2018-05-28','2018-07-04','2018-09-03','2018-11-23','2018-12-25'])]\n        print(k)\n        print(type(k))\n        print(len(k))\n        index_list = []\n     \n        if len(k) >= 1:\n            for z in range(len(k)):\n                index_list.append(k.index[z])\n                print(index_list)\n     \n            for l in range(len(index_list)):\n                m = index_list[l]\n                df2.xs(m)[0] = 0\n        else:\n            print(\"no holidays\")\n        print(df2)\n        book = load_workbook(fname)\n        writer = pd.ExcelWriter(fname, engine='openpyxl') \n        writer.book = book\n        writer.sheets = dict((ws.title, ws) for ws in book.worksheets)\n        print(y)\n        df2.to_excel(writer, \"Daily_Output\", startcol=1,startrow=y,header=None,index=False)\n        \n        writer.save()\n        tkinter.messagebox.showinfo(title=\"\", message=\"Advisor forecasting completed\")\n        \n    else:\n        tkinter.messagebox.showinfo(title=\"\", message=\"please build  first and then forecast\")\ndef destroy(self):\n    global advisor_build\n    global regressor\n    regressor = None\n    global y_train\n    y_train = None\n    global sc\n    sc = None\n    advisor_build = 0\n\n=============================================================================\ndef mean_absolute_percentage_error(y_true, y_pred):\nperc = [0 if x ==0 else np.abs((x-y)/x) for x,y in zip(y_true,y_pred)]\nreturn np.mean(perc[1]) * 100\n=============================================================================\nroot = tk.Tk()\n#creation of an instance\n#holiday_list = ['2018-01-01','2018-01-15','2018-02-19','2018-03-30','2018-05-28','2018-07-04','2018-09-03','2018-11-23','2018-12-25']\nglobal advisor_build\nglobal regressor\nglobal y_train\nglobal sc\napp = Window(root)\n#mainloop\nroot.mainloop()\nBelow is the error -\nC:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36>python setup.py build\nUsing TensorFlow backend.\nrunning build\nrunning build_exe\nTraceback (most recent call last):\nFile \"setup.py\", line 38, in \nexecutables = executables)\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\nes\\cx_Freeze\\dist.py\", line 349, in setup\ndistutils.core.setup(**attrs)\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\c\nore.py\", line 148, in setup\ndist.run_commands()\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\d\nist.py\", line 955, in run_commands\nself.run_command(cmd)\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\d\nist.py\", line 974, in run_command\ncmd_obj.run()\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\c\nommand\\build.py\", line 135, in run\nself.run_command(cmd_name)\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\c\nmd.py\", line 313, in run_command\nself.distribution.run_command(command)\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\d\nist.py\", line 974, in run_command\ncmd_obj.run()\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\nes\\cx_Freeze\\dist.py\", line 219, in run\nfreezer.Freeze()\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\nes\\cx_Freeze\\freezer.py\", line 616, in Freeze\nself.finder = self._GetModuleFinder()\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\nes\\cx_Freeze\\freezer.py\", line 342, in _GetModuleFinder\nfinder.IncludePackage(name)\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\nes\\cx_Freeze\\finder.py\", line 661, in IncludePackage\nself._ImportAllSubModules(module, deferredImports)\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\nes\\cx_Freeze\\finder.py\", line 288, in _ImportAllSubModules\nrecursive)\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\nes\\cx_Freeze\\finder.py\", line 288, in _ImportAllSubModules\nrecursive)\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\nes\\cx_Freeze\\finder.py\", line 288, in _ImportAllSubModules\nrecursive)\nFile \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\nes\\cx_Freeze\\finder.py\", line 283, in _ImportAllSubModules\nraise ImportError(\"No module named %r\" % subModuleName)\nImportError: No module named 'tensorflow.contrib.ios_examples.benchmark.benchmar\nk.xcodeproj'\nI have tried doing same steps for python 3.5, but with no luck.", "body": "I am trying to create exe file for python application built on tkinter(8.6), python(3.6), keras(0.14), tensorflow(1.5),  cx_Freeze(5.1). All the package installs  were done through pip.\r\nWindows 7-64 bit\r\nI'm using command:- python setup.py build\r\nBelow is my setup.py file:-\r\n\r\n import cx_Freeze\r\n import sys\r\n import matplotlib\r\n import os\r\n import pandas\r\n import tkinter.filedialog\r\n import keras\r\n import sklearn\r\n import numpy\r\n import tensorflow\r\n import openpyxl\r\n import datetime\r\n base = None\r\n \r\n os.environ['TCL_LIBRARY'] = r'C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\tcl\\tcl8.6'\r\n os.environ['TK_LIBRARY'] = r'C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\tcl\\tk8.6'\r\n \r\n if sys.platform == 'win32':\r\n     base = \"Win32GUI\"\r\n from glob import glob\r\n #data_files = [(\"Microsoft.VC120.CRT\", glob(r'C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\redist\\x64\\Microsoft.VC120.CRT\\*.*'))]    \r\n executables = [cx_Freeze.Executable(\"app-3.py\",base=base)]\r\n \r\n cx_Freeze.setup(\r\n         name = \"foreacast\",\r\n         #options = {\"build_exe\": {\"packages\":[\"tkinter\",\"matplotlib\"],\"include_files\":[\"numpy\"]}}\r\n         options = { \"build_exe\": {\"packages\":[\"cx_Freeze\",\"datetime\",\"openpyxl\",\"tkinter\",\"numpy\",\"matplotlib\",\"pandas\",\"tkinter.filedialog\",\"keras\",\"sklearn\",\"tensorflow\"] }},\r\n         version = \"0.1\",\r\n         description = \"test\",\r\n         #data_files=data_files,\r\n         executables = executables)\r\nBelow is input file- app-3.py\r\n#from tkinter import Tk, Label, Button, Frame\r\nimport tkinter as tk\r\nfrom tkinter.filedialog import askopenfilename\r\nimport os\r\nimport tkinter.messagebox\r\nimport numpy as np\r\nimport xlrd\r\nimport datetime\r\nimport matplotlib.pyplot as plt\r\nimport pandas as pd\r\nimport keras\r\nfrom keras.models import Sequential\r\nfrom keras.layers import LSTM\r\nfrom keras.layers import Dense\r\nfrom keras.layers import Dropout\r\nfrom keras import optimizers\r\nfrom sklearn.preprocessing import MinMaxScaler\r\nfrom numpy.random import seed\r\nimport tensorflow as tf\r\nfrom tensorflow import set_random_seed \r\nfrom openpyxl import load_workbook\r\n# Here, we are creating our class, Window, and inheriting from the Frame\r\n# class. Frame is a class from the tkinter module. (see Lib/tkinter/__init__)\r\nclass Window(tk.Frame):\r\n\r\n    # Define settings upon initialization. Here you can specify\r\n    def __init__(self, master=None):\r\n        \r\n        # parameters that you want to send through the Frame class. \r\n        tk.Frame.__init__(self, master,background=\"#66b3ff\")   \r\n\r\n        #reference to the master widget, which is the tk window                 \r\n        self.master = master\r\n\r\n        #with that, we want to then run init_window, which doesn't yet exist\r\n        self.init_window()\r\n    \r\n        self.master.minsize(width=1400, height=900)\r\n        self.master.maxsize(width=1400, height=900)\r\n        self.master.configure(background=\"#8cb3d9\")\r\n    #Creation of init_window\r\n    def close_window():\r\n        root.destroy()\r\n        \r\n    def init_window(self):\r\n\r\n        # changing the title of our master widget      \r\n        self.master.title(\"Call Volume Forecasting\")\r\n\r\n        tk.Label(root, text=\"Call Volume Forecasting\",font = \"Helvetica 28 bold italic\",bg = \"#3333ff\",fg = \"white\",width=20).grid(row=0,column=0,columnspan=4,padx=400, pady=20,sticky=tk.W)\r\n        \r\n        self.CheckAdvisor=tk.IntVar()\r\n        self.CheckShareholder=tk.IntVar()\r\n        self.CheckRetirement=tk.IntVar()\r\n        self.CheckFast=tk.IntVar()\r\n        self.CheckVIP=tk.IntVar()\r\n        self.CheckCGF=tk.IntVar()\r\n        self.CheckWT=tk.IntVar()\r\n        self.CheckIOBRP=tk.IntVar()\r\n        self.CheckFT=tk.IntVar()\r\n        self.CheckNJBEST=tk.IntVar()\r\n        self.CheckSelectAll=tk.IntVar()\r\n        self.CheckType = tk.IntVar()\r\n        self.input_file = \"\"\r\n        \r\n        tk.Button(root,text=\"Choose Input File\",command=self.choose_input_file,font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=15,height=1).grid(row=1, column = 0,columnspan=2, padx=200,pady=30,sticky=tk.W)\r\n                  \r\n        self.input_file = tk.Text(root,width=80,height=2)\r\n        self.input_file.grid(row=1, column=1,columnspan=3,padx=50,pady=20, sticky=tk.W)\r\n        \r\n        self.advisorstate = tk.Checkbutton(root, text=\"Advisor\",  variable= self.CheckAdvisor,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\r\n        self.advisorstate.grid(row=2, column = 0, padx=100, pady=30,sticky=tk.W)\r\n        \r\n        self.shareholderstate = tk.Checkbutton(root, text=\"Shareholder\",variable= self.CheckShareholder, font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\r\n        self.shareholderstate.grid(row=3, column = 0, padx=100, pady=30,sticky=tk.W)\r\n        \r\n        self.retirementstate= tk.Checkbutton(root, text=\"Retirement\",variable= self.CheckRetirement,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\r\n        self.retirementstate.grid(row=4, column = 0, padx=100, pady=30,sticky=tk.W)\r\n        \r\n        self.faststate = tk.Checkbutton(root, text=\"Fast\",variable=self.CheckFast,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\r\n        self.faststate.grid(row=5, column = 0, padx=100, pady=30,sticky=tk.W)\r\n        \r\n        self.vipstate = tk.Checkbutton(root, text=\"VIP\",variable=self.CheckVIP,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\r\n        self.vipstate.grid(row=6, column = 0, padx=100, pady=30,sticky=tk.W)\r\n        \r\n        self.cgf = tk.Checkbutton(root, text=\"CGF\",variable=self.CheckCGF,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\r\n        self.cgf.grid(row=2, column = 1, padx=10, pady=30,sticky=tk.W)\r\n        \r\n        self.wt = tk.Checkbutton(root, text=\"WT\",variable=self.CheckWT,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\r\n        self.wt.grid(row=3, column = 1, padx=10, pady=30,sticky=tk.W)\r\n        \r\n        self.iobrp = tk.Checkbutton(root, text=\"IOBRP\",variable=self.CheckIOBRP,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\r\n        self.iobrp.grid(row=4, column = 1, padx=10, pady=30,sticky=tk.W)\r\n        \r\n        self.ft = tk.Checkbutton(root, text=\"FT 529\",variable=self.CheckFT,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\r\n        self.ft.grid(row=5, column = 1, padx=10, pady=30,sticky=tk.W)\r\n        \r\n        self.njbest = tk.Checkbutton(root, text=\"NJBEST\",variable=self.CheckNJBEST,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\",width=10,anchor=tk.W)\r\n        self.njbest.grid(row=6, column = 1, padx=10, pady=30,sticky=tk.W)\r\n        \r\n        self.selectall = tk.Checkbutton(root, text=\"Select all skills\",variable=self.CheckSelectAll,command=self.cb_check,font = \"Helvetica 18 bold italic\",bg = \"light grey\",fg = \"black\")\r\n        self.selectall.grid(row=4, column = 2,padx=10,pady=30,sticky=tk.W)\r\n        \r\n        self.daily = tk.Radiobutton(root, text=\"Daily\",variable=self.CheckType,value=1,font = \"Helvetica 18 bold italic\",width=10,bg=\"light grey\",anchor=tk.W)\r\n        self.daily.grid(row=3, column = 3, pady=30,sticky=tk.W)\r\n        \r\n        self.monthly = tk.Radiobutton(root, text=\"Monthly\",variable=self.CheckType,value=2,font = \"Helvetica 18 bold italic\",width=10,bg=\"light grey\",anchor=tk.W)\r\n        self.monthly.grid(row=4, column = 3, pady=30,sticky=tk.W)\r\n        \r\n        self.both = tk.Radiobutton(root, text=\"Both\",variable=self.CheckType,value=3,font = \"Helvetica 18 bold italic\",width=10,bg=\"light grey\",anchor=tk.W)\r\n        self.both.grid(row=5, column = 3, pady=30,sticky=tk.W)\r\n        \r\n        tk.Button(root, text=\"Build\",font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=10,height=1,command=self.build_models).grid(row=7, column = 0, padx=100,pady=30,sticky=tk.W)\r\n        tk.Button(root, text=\"Forecast\",font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=10,height=1,command=self.forecast_models).grid(row=7, column = 1, padx=50,pady=30,sticky=tk.W)\r\n        tk.Button(root, text=\"Clear\",font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=10,height=1,command = self.clear).grid(row=7, column = 2, padx=50,pady=30,sticky=tk.W)\r\n        tk.Button(root, text=\"Exit\",font = \"Helvetica 18 bold italic\",bg = \"#3333ff\",fg = \"white\",width=10,height=1,command = self.close).grid(row=7, column = 3, padx=50,pady=30,sticky=tk.W)         \r\n\r\n    def cb_check(self):\r\n        if self.CheckSelectAll.get():\r\n            self.advisorstate.config(state=tk.DISABLED)\r\n            self.CheckAdvisor.set(0)\r\n            self.shareholderstate.config(state=tk.DISABLED)\r\n            self.CheckShareholder.set(0)\r\n            self.retirementstate.config(state=tk.DISABLED)\r\n            self.CheckRetirement.set(0)\r\n            self.faststate.config(state=tk.DISABLED)\r\n            self.CheckFast.set(0)\r\n            self.vipstate.config(state=tk.DISABLED)\r\n            self.CheckVIP.set(0)\r\n            self.cgf.config(state=tk.DISABLED)\r\n            self.CheckCGF.set(0)\r\n            self.wt.config(state=tk.DISABLED)\r\n            self.CheckWT.set(0)\r\n            self.iobrp.config(state=tk.DISABLED)\r\n            self.CheckIOBRP.set(0)\r\n            self.ft.config(state=tk.DISABLED)\r\n            self.CheckFT.set(0)\r\n            self.njbest.config(state=tk.DISABLED)\r\n            self.CheckNJBEST.set(0)\r\n        else:\r\n            self.advisorstate.config(state=tk.NORMAL)\r\n            self.shareholderstate.config(state=tk.NORMAL)\r\n            self.retirementstate.config(state=tk.NORMAL)\r\n            self.faststate.config(state=tk.NORMAL)\r\n            self.vipstate.config(state=tk.NORMAL)\r\n            self.cgf.config(state=tk.NORMAL)\r\n            self.wt.config(state=tk.NORMAL)\r\n            self.iobrp.config(state=tk.NORMAL)\r\n            self.ft.config(state=tk.NORMAL)\r\n            self.njbest.config(state=tk.NORMAL)\r\n    \r\n    def close(self):\r\n        root.destroy()\r\n        \r\n    def clear(self):\r\n        #print(\"in claer\")\r\n        self.CheckAdvisor.set(0)\r\n        self.CheckShareholder.set(0)\r\n        self.CheckRetirement.set(0)\r\n        self.CheckFast.set(0)\r\n        self.CheckVIP.set(0)\r\n        self.CheckCGF.set(0)\r\n        self.CheckWT.set(0)\r\n        self.CheckIOBRP.set(0)\r\n        self.CheckFT.set(0)\r\n        self.CheckNJBEST.set(0)\r\n        self.CheckSelectAll.set(0)\r\n        self.CheckType.set(0)\r\n        self.input_file.delete('1.0', tk.END)\r\n        self.advisorstate.config(state=tk.NORMAL)\r\n        self.shareholderstate.config(state=tk.NORMAL)\r\n        self.retirementstate.config(state=tk.NORMAL)\r\n        self.faststate.config(state=tk.NORMAL)\r\n        self.vipstate.config(state=tk.NORMAL)\r\n        self.cgf.config(state=tk.NORMAL)\r\n        self.wt.config(state=tk.NORMAL)\r\n        self.iobrp.config(state=tk.NORMAL)\r\n        self.ft.config(state=tk.NORMAL)\r\n        self.njbest.config(state=tk.NORMAL)\r\n        self.input_file.config(state=tk.NORMAL)\r\n\r\n    def choose_input_file(self):\r\n        self.filename = askopenfilename()\r\n        if os.path.isfile(self.filename):\r\n            self.input_file.configure(state=tk.NORMAL)\r\n            self.input_file.insert(tk.INSERT,self.filename)\r\n            self.input_file.configure(state=tk.DISABLED)\r\n            fname = self.input_file.get(\"1.0\", \"end-1c\")\r\n            workbook = xlrd.open_workbook(fname,\"w\")\r\n            \r\n            #print(self.input_file)\r\n        else: \r\n            print(\"No file chosen\")\r\n            tkinter.messagebox.showinfo(title=\"\", message=\"Please select input file\")\r\n     \r\n    def validation(self):\r\n        if len(self.input_file.get(\"1.0\", \"end-1c\")) == 0:\r\n            tkinter.messagebox.showinfo(title=\"\", message=\"Please select input file\")\r\n        else:\r\n            print(\"file selected\")\r\n            self.validate_chbox()\r\n            \r\n            \r\n    def validate_chbox(self):\r\n        if self.CheckAdvisor.get() == 0 and self.CheckShareholder.get() == 0 and self.CheckRetirement.get() == 0 and self.CheckFast.get() == 0 and self.CheckVIP.get() == 0 and self.CheckCGF.get() == 0 and self.CheckWT.get() == 0 and self.CheckIOBRP.get() == 0 and self.CheckFT.get() == 0 and self.CheckNJBEST.get() == 0 and self.CheckSelectAll.get() == 0:\r\n            tkinter.messagebox.showinfo(title=\"\", message=\"Please select the skill\")\r\n        else:\r\n            self.validate_radiobtn()\r\n            \r\n    def validate_radiobtn(self):\r\n        if self.CheckType.get() == 0:\r\n            tkinter.messagebox.showinfo(title=\"\", message=\"Please select the forecast type\")\r\n    \r\n    def build_models(self):\r\n        self.validation()\r\n        self.build()\r\n    \r\n    def build(self):\r\n        if self.CheckSelectAll.get() == 1:\r\n            self.buildAllModels()\r\n        else:\r\n            self.build_advisor_selected()\r\n    \r\n    def buildAllModels(self):\r\n        print(\"in buildAllModels\")\r\n    \r\n    def forecast_models(self):\r\n        self.validation()\r\n        self.forecast()\r\n        \r\n    def forecast(self):\r\n        if self.CheckSelectAll.get() == 1:\r\n            self.forecastAllModels()\r\n        else:\r\n            self.forecast_advisor_selected() \r\n            \r\n    def build_advisor_selected(self):\r\n        if self.CheckAdvisor.get() == 1:\r\n            if self.CheckType.get() == 1:\r\n                print(\"daily\")\r\n                self.build_advisor_daily()\r\n            elif self.CheckType.get() == 2:\r\n                print(\"monthly\")\r\n                self.advisor_monthly()\r\n            else:\r\n                print(\"both\")\r\n                self.advisor_both()\r\n    \r\n    def forecast_advisor_selected(self):\r\n        if self.CheckAdvisor.get() == 1:\r\n            if self.CheckType.get() == 1:\r\n                print(\"daily\")\r\n                self.forecast_advisor_daily()\r\n            elif self.CheckType.get() == 2:\r\n                print(\"monthly\")\r\n                self.forecast_advisor_monthly()\r\n            else:\r\n                print(\"both\")\r\n                self.forecast_advisor_both()\r\n   \r\n    def build_advisor_daily(self):\r\n        required_data = self.read_advisor_daily()\r\n        print(required_data)\r\n        #global advisor_build \r\n        #if global advisor_build ==0:\r\n        self.build_advisor_daily_model(required_data)\r\n        #else:\r\n            #print(\"advisor model already built.Please forecast\")\r\n            \r\n    def read_advisor_daily(self):\r\n        fname = self.input_file.get(\"1.0\", \"end-1c\")\r\n        workbook = xlrd.open_workbook(fname,\"w\")\r\n        #sheets = workbook.sheet_names()\r\n        date_col = []\r\n        required_data = []\r\n        sh = workbook.sheet_by_name(\"Daily_Data\")\r\n        for rownum in range(1,sh.nrows):\r\n            row_valaues = sh.row_values(rownum)\r\n            date_col.append(datetime.datetime(*xlrd.xldate_as_tuple(row_valaues[0],workbook.datemode)))\r\n            required_data.append(row_valaues[1])\r\n    \r\n        required_data = pd.DataFrame(required_data)\r\n        required_data.replace('', np.nan, inplace=True)\r\n        required_data.dropna(inplace=True)\r\n        return required_data\r\n    \r\n    \r\n    def build_advisor_daily_model(self,required_data):\r\n        print(\"in build_advisor_daily_model\")\r\n        self.destroy()\r\n        print(required_data)\r\n        np.random.seed(12345) \r\n        tf.set_random_seed(12345)\r\n        tkinter.messagebox.showinfo(title=\"\", message=\"Advisor model building started\")\r\n        print(type(required_data))\r\n        data_set = required_data\r\n        tkinter.messagebox.showinfo(title=\"\", message=\"data set read\")\r\n        model_data_set = data_set.iloc[:,:]\r\n        model_data_set = model_data_set[model_data_set[0]>0]\r\n        print(len(model_data_set))\r\n        a1=len(model_data_set)\r\n        print(type(model_data_set))\r\n        tkinter.messagebox.showinfo(title=\"\", message=a1)\r\n        modified_data = model_data_set\r\n        modified_data = modified_data.values.reshape(-1,1)\r\n        print(modified_data.shape)\r\n        print(modified_data)\r\n         \r\n        global sc \r\n        sc = MinMaxScaler(feature_range=(0,1))\r\n        train = sc.fit_transform(modified_data)\r\n        print(train[0:5,:])\r\n        print(train.shape)\r\n        print(train.shape[0])\r\n        print(train.shape[1])\r\n        \r\n        global y_train\r\n        X_train = []\r\n        y_train = []\r\n        l = len(modified_data)\r\n        print(l)\r\n        for i in range(60,l):\r\n            X_train.append(train[i-60:i,:])\r\n            y_train.append(train[i,:])\r\n        print(len(X_train))\r\n        print(len(y_train))\r\n        X_train = np.array(X_train)\r\n        y_train = np.array(y_train)\r\n        print(X_train.shape)\r\n        #print(X_train)\r\n        print(y_train.shape)\r\n        #X_train = X_train.reshape(X_train.shape[1],1)\r\n        print(X_train.shape[0])\r\n        tkinter.messagebox.showinfo(title=\"\", message=\"train data built\")\r\n        #total 60 columns, lag=20\r\n        global regressor\r\n        regressor = Sequential()\r\n        regressor.add(LSTM(units=60,return_sequences=True,input_shape=(X_train.shape[1],1)))\r\n        regressor.add(Dropout(0.2))\r\n        regressor.add(LSTM(units=60,return_sequences=True))\r\n        regressor.add(Dropout(0.2))\r\n        regressor.add(LSTM(units=60,return_sequences=True))\r\n        regressor.add(Dropout(0.2))\r\n        #regressor.add(LSTM(units=60,return_sequences=True))\r\n        #regressor.add(Dropout(0.2))\r\n        #regressor.add(LSTM(units=50,return_sequences=True))\r\n        #regressor.add(Dropout(0.2))\r\n        regressor.add(LSTM(units=60))\r\n        regressor.add(Dropout(0.2))\r\n        regressor.add(Dense(units=1))\r\n        #rmsprop = keras.optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=0.001, decay=0.001)\r\n        tkinter.messagebox.showinfo(title=\"\", message=\"compiling model\")\r\n        regressor.compile(optimizer='adam',loss='mean_squared_error',metrics=['accuracy'])\r\n        tkinter.messagebox.showinfo(title=\"\", message=\"model compilation complete\")\r\n        regressor.fit(X_train,y_train,epochs=300,batch_size=32,shuffle=False)\r\n        global advisor_build\r\n        advisor_build = 1\r\n        print(y_train)\r\n        tkinter.messagebox.showinfo(title=\"\", message=\"Advisor model building completed\")\r\n        #return (self.regressor,advisor_build,y_train)\r\n    \r\n    def forecast_advisor_daily(self):\r\n        print(\"in forecast\")\r\n        global advisor_build\r\n        print(advisor_build)\r\n        global y_train\r\n        global sc\r\n        global regressor\r\n        #advisor_build = 1\r\n        if advisor_build == 1:\r\n            y_test = y_train\r\n            print(y_test)\r\n            print(len(y_test))\r\n            X_test_1 = []\r\n            prediciton_list = []\r\n            y_test = y_test.reshape(-1,1)\r\n            print(y_test.shape)\r\n\r\n            y_test = sc.transform(y_test)\r\n\r\n            X_test_1.append(y_test[-60:])\r\n            print(X_test_1)\r\n            X_test_1 = np.array(X_test_1)\r\n            print(X_test_1[0:5])\r\n            print(X_test_1.shape)\r\n            for x in range(20):\r\n\r\n                y_pred_1 = regressor.predict(X_test_1)\r\n\r\n                a = sc.inverse_transform(y_pred_1)\r\n                b = a[0][0]\r\n                X_test_1 = np.delete(X_test_1,0,axis=1)\r\n\r\n                a = y_pred_1[0][0]\r\n\r\n                X_test_1 = np.concatenate((X_test_1,np.zeros((1,1,1))),axis=1)\r\n                X_test_1 = np.insert(X_test_1,59,a,axis=1)\r\n                X_test_1 = np.delete(X_test_1,60,axis=1) \r\n\r\n                prediciton_list.append(b)\r\n\r\n            print(prediciton_list)\r\n            fname = self.input_file.get(\"1.0\", \"end-1c\")\r\n            workbook = xlrd.open_workbook(fname,\"w\")\r\n            date_col = []\r\n            required_data = []\r\n            sh = workbook.sheet_by_name(\"Daily_Data\")\r\n            for rownum in range(1,sh.nrows):\r\n                row_valaues = sh.row_values(rownum)\r\n                date_col.append(datetime.datetime(*xlrd.xldate_as_tuple(row_valaues[0],workbook.datemode)))\r\n                required_data.append(row_valaues[1])\r\n            required_data = pd.DataFrame(required_data)\r\n            print(required_data)\r\n            len1 = len(required_data)\r\n            required_data.replace('', np.nan, inplace=True)\r\n            z = required_data.last_valid_index()\r\n            print(z)\r\n            print(type(z))\r\n            ind = z\r\n            ind = ind + 1\r\n            y = required_data.loc[required_data.last_valid_index()]\r\n            print(y)\r\n            required_data.dropna(inplace=True)\r\n            print(required_data)\r\n            date_col = pd.DataFrame(date_col)\r\n            print(date_col)\r\n            end_date = date_col.iloc[z][0]\r\n            \r\n            z =  z + 2\r\n            y = z\r\n            print(z)\r\n            start_date = date_col.iloc[z][0]\r\n \r\n            print(start_date.date())\r\n \r\n \r\n            df2 = pd.DataFrame(prediciton_list)\r\n            print(df2)\r\n            df3 = []\r\n            for i in range(ind,ind+20):\r\n                df3.append(date_col.iloc[i][0])\r\n\r\n            df3 = pd.DataFrame(df3,columns = [\"Date\"])\r\n            print(df3)\r\n      \r\n \r\n            k = df3.loc[df3['Date'].isin(['2018-01-01','2018-01-15','2018-02-19','2018-03-30','2018-05-28','2018-07-04','2018-09-03','2018-11-23','2018-12-25'])]\r\n            print(k)\r\n            print(type(k))\r\n            print(len(k))\r\n            index_list = []\r\n         \r\n            if len(k) >= 1:\r\n                for z in range(len(k)):\r\n                    index_list.append(k.index[z])\r\n                    print(index_list)\r\n         \r\n                for l in range(len(index_list)):\r\n                    m = index_list[l]\r\n                    df2.xs(m)[0] = 0\r\n            else:\r\n                print(\"no holidays\")\r\n            print(df2)\r\n            book = load_workbook(fname)\r\n            writer = pd.ExcelWriter(fname, engine='openpyxl') \r\n            writer.book = book\r\n            writer.sheets = dict((ws.title, ws) for ws in book.worksheets)\r\n            print(y)\r\n            df2.to_excel(writer, \"Daily_Output\", startcol=1,startrow=y,header=None,index=False)\r\n            \r\n            writer.save()\r\n            tkinter.messagebox.showinfo(title=\"\", message=\"Advisor forecasting completed\")\r\n            \r\n        else:\r\n            tkinter.messagebox.showinfo(title=\"\", message=\"please build  first and then forecast\")\r\n    def destroy(self):\r\n        global advisor_build\r\n        global regressor\r\n        regressor = None\r\n        global y_train\r\n        y_train = None\r\n        global sc\r\n        sc = None\r\n        advisor_build = 0\r\n\r\n    \r\n       \r\n# =============================================================================\r\n#     def mean_absolute_percentage_error(y_true, y_pred): \r\n#         perc = [0 if x ==0 else np.abs((x-y)/x) for x,y in zip(y_true,y_pred)]\r\n#         return np.mean(perc[1]) * 100\r\n# =============================================================================\r\n\r\nroot = tk.Tk()\r\n#creation of an instance\r\n#holiday_list = ['2018-01-01','2018-01-15','2018-02-19','2018-03-30','2018-05-28','2018-07-04','2018-09-03','2018-11-23','2018-12-25']\r\nglobal advisor_build\r\nglobal regressor\r\nglobal y_train\r\nglobal sc\r\napp = Window(root)\r\n#mainloop \r\nroot.mainloop()        \r\n\r\nBelow is the error -\r\nC:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36>python setup.py build\r\nUsing TensorFlow backend.\r\nrunning build\r\nrunning build_exe\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 38, in <module>\r\n    executables = executables)\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\r\nes\\cx_Freeze\\dist.py\", line 349, in setup\r\n    distutils.core.setup(**attrs)\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\c\r\nore.py\", line 148, in setup\r\n    dist.run_commands()\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\d\r\nist.py\", line 955, in run_commands\r\n    self.run_command(cmd)\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\d\r\nist.py\", line 974, in run_command\r\n    cmd_obj.run()\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\c\r\nommand\\build.py\", line 135, in run\r\n    self.run_command(cmd_name)\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\c\r\nmd.py\", line 313, in run_command\r\n    self.distribution.run_command(command)\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\distutils\\d\r\nist.py\", line 974, in run_command\r\n    cmd_obj.run()\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\r\nes\\cx_Freeze\\dist.py\", line 219, in run\r\n    freezer.Freeze()\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\r\nes\\cx_Freeze\\freezer.py\", line 616, in Freeze\r\n    self.finder = self._GetModuleFinder()\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\r\nes\\cx_Freeze\\freezer.py\", line 342, in _GetModuleFinder\r\n    finder.IncludePackage(name)\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\r\nes\\cx_Freeze\\finder.py\", line 661, in IncludePackage\r\n    self._ImportAllSubModules(module, deferredImports)\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\r\nes\\cx_Freeze\\finder.py\", line 288, in _ImportAllSubModules\r\n    recursive)\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\r\nes\\cx_Freeze\\finder.py\", line 288, in _ImportAllSubModules\r\n    recursive)\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\r\nes\\cx_Freeze\\finder.py\", line 288, in _ImportAllSubModules\r\n    recursive)\r\n  File \"C:\\Users\\bpachkor\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packag\r\nes\\cx_Freeze\\finder.py\", line 283, in _ImportAllSubModules\r\n    raise ImportError(\"No module named %r\" % subModuleName)\r\nImportError: No module named 'tensorflow.contrib.ios_examples.benchmark.benchmar\r\nk.xcodeproj'\r\n\r\nI have tried doing same steps for python 3.5, but with no luck.\r\n"}