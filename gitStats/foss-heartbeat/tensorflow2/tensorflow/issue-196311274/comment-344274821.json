{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/344274821", "html_url": "https://github.com/tensorflow/tensorflow/issues/6391#issuecomment-344274821", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6391", "id": 344274821, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDI3NDgyMQ==", "user": {"login": "ahoereth", "id": 3015996, "node_id": "MDQ6VXNlcjMwMTU5OTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3015996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahoereth", "html_url": "https://github.com/ahoereth", "followers_url": "https://api.github.com/users/ahoereth/followers", "following_url": "https://api.github.com/users/ahoereth/following{/other_user}", "gists_url": "https://api.github.com/users/ahoereth/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahoereth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahoereth/subscriptions", "organizations_url": "https://api.github.com/users/ahoereth/orgs", "repos_url": "https://api.github.com/users/ahoereth/repos", "events_url": "https://api.github.com/users/ahoereth/events{/privacy}", "received_events_url": "https://api.github.com/users/ahoereth/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-14T14:26:28Z", "updated_at": "2017-11-14T14:26:28Z", "author_association": "NONE", "body_html": "<p>The example provided above still does return None -- added <code>sparse_tensor_dense_matmul</code> and <code>sparse_to_dense</code> to the mix because in my use case I can (with some overhead) use each of those functions.</p>\n<h2>Executed:</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-ii\">$</span> docker run <span class=\"pl-k\">-</span>it tensorflow<span class=\"pl-k\">/</span>tensorflow:<span class=\"pl-c1\">1.4</span>.0<span class=\"pl-k\">-</span>py3 python3\nPython <span class=\"pl-c1\">3.5</span>.2 (default, Sep <span class=\"pl-c1\">14</span> <span class=\"pl-c1\">2017</span>, <span class=\"pl-c1\">22</span>:<span class=\"pl-c1\">51</span>:<span class=\"pl-c1\">0<span class=\"pl-ii\">6</span></span>) \n[<span class=\"pl-c1\">GCC</span> <span class=\"pl-c1\">5.4</span>.0 <span class=\"pl-c1\">20160609</span>] on linux\nType <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>help<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>copyright<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>credits<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">or</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>license<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">for</span> more information.\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> indices <span class=\"pl-k\">=</span> tf.placeholder(tf.int64, (<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">2</span>))\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> values <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, (<span class=\"pl-c1\">None</span>,))\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> sparse_tensor <span class=\"pl-k\">=</span> tf.SparseTensor(indices, values, (<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">7</span>))\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> dense_tensor1 <span class=\"pl-k\">=</span> tf.sparse_tensor_to_dense(sparse_tensor)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> dense_tensor2 <span class=\"pl-k\">=</span> tf.sparse_to_dense(indices, (<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">7</span>), values)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> dense_tensor3 <span class=\"pl-k\">=</span> tf.sparse_add(tf.zeros((<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">7</span>)), sparse_tensor)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> dense_tensor4 <span class=\"pl-k\">=</span> tf.sparse_tensor_dense_matmul(sparse_tensor, tf.zeros((<span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">5</span>)))\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> sum1 <span class=\"pl-k\">=</span> tf.reduce_sum(dense_tensor1)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> sum2 <span class=\"pl-k\">=</span> tf.reduce_sum(dense_tensor2)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> sum3 <span class=\"pl-k\">=</span> tf.reduce_sum(dense_tensor3)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> sum4 <span class=\"pl-k\">=</span> tf.reduce_sum(dense_tensor4)\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">print</span>(tf.gradients(sum1, values))\n[<span class=\"pl-c1\">None</span>]\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">print</span>(tf.gradients(sum2, values))\n[<span class=\"pl-c1\">None</span>]\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">print</span>(tf.gradients(sum3, values))\n[<span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>gradients_2/SparseTensorDenseAdd_grad/GatherNd:0<span class=\"pl-pds\">'</span></span> shape=(<span class=\"pl-ii\">?</span>,) dtype=float32<span class=\"pl-k\">&gt;</span>]\n<span class=\"pl-k\">&gt;&gt;</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">print</span>(tf.gradients(sum4, values))\n[<span class=\"pl-k\">&lt;</span>tf.Tensor <span class=\"pl-s\"><span class=\"pl-pds\">'</span>gradients_3/SparseTensorDenseMatMul/SparseTensorDenseMatMul_grad/Sum:0<span class=\"pl-pds\">'</span></span> shape=(<span class=\"pl-ii\">?</span>,) dtype=float32<span class=\"pl-k\">&gt;</span>]</pre></div>\n<h2>Ready to copy &amp; run:</h2>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nindices <span class=\"pl-k\">=</span> tf.placeholder(tf.int64, (<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">2</span>))\nvalues <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, (<span class=\"pl-c1\">None</span>,))\nsparse_tensor <span class=\"pl-k\">=</span> tf.SparseTensor(indices, values, (<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">7</span>))\ndense_tensor1 <span class=\"pl-k\">=</span> tf.sparse_tensor_to_dense(sparse_tensor)\ndense_tensor2 <span class=\"pl-k\">=</span> tf.sparse_to_dense(indices, (<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">7</span>), values)\ndense_tensor3 <span class=\"pl-k\">=</span> tf.sparse_add(tf.zeros((<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">7</span>)), sparse_tensor)\ndense_tensor4 <span class=\"pl-k\">=</span> tf.sparse_tensor_dense_matmul(sparse_tensor, tf.zeros((<span class=\"pl-c1\">7</span>, <span class=\"pl-c1\">5</span>)))\nsum1 <span class=\"pl-k\">=</span> tf.reduce_sum(dense_tensor1)\nsum2 <span class=\"pl-k\">=</span> tf.reduce_sum(dense_tensor2)\nsum3 <span class=\"pl-k\">=</span> tf.reduce_sum(dense_tensor3)\nsum4 <span class=\"pl-k\">=</span> tf.reduce_sum(dense_tensor4)\n<span class=\"pl-c1\">print</span>(tf.gradients(sum1, values))\n<span class=\"pl-c1\">print</span>(tf.gradients(sum2, values))\n<span class=\"pl-c1\">print</span>(tf.gradients(sum3, values))\n<span class=\"pl-c1\">print</span>(tf.gradients(sum4, values))</pre></div>", "body_text": "The example provided above still does return None -- added sparse_tensor_dense_matmul and sparse_to_dense to the mix because in my use case I can (with some overhead) use each of those functions.\nExecuted:\n$ docker run -it tensorflow/tensorflow:1.4.0-py3 python3\nPython 3.5.2 (default, Sep 14 2017, 22:51:06) \n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import tensorflow as tf\n>>> indices = tf.placeholder(tf.int64, (None, 2))\n>>> values = tf.placeholder(tf.float32, (None,))\n>>> sparse_tensor = tf.SparseTensor(indices, values, (5, 7))\n>>> dense_tensor1 = tf.sparse_tensor_to_dense(sparse_tensor)\n>>> dense_tensor2 = tf.sparse_to_dense(indices, (5, 7), values)\n>>> dense_tensor3 = tf.sparse_add(tf.zeros((5, 7)), sparse_tensor)\n>>> dense_tensor4 = tf.sparse_tensor_dense_matmul(sparse_tensor, tf.zeros((7, 5)))\n>>> sum1 = tf.reduce_sum(dense_tensor1)\n>>> sum2 = tf.reduce_sum(dense_tensor2)\n>>> sum3 = tf.reduce_sum(dense_tensor3)\n>>> sum4 = tf.reduce_sum(dense_tensor4)\n>>> print(tf.gradients(sum1, values))\n[None]\n>>> print(tf.gradients(sum2, values))\n[None]\n>>> print(tf.gradients(sum3, values))\n[<tf.Tensor 'gradients_2/SparseTensorDenseAdd_grad/GatherNd:0' shape=(?,) dtype=float32>]\n>>> print(tf.gradients(sum4, values))\n[<tf.Tensor 'gradients_3/SparseTensorDenseMatMul/SparseTensorDenseMatMul_grad/Sum:0' shape=(?,) dtype=float32>]\nReady to copy & run:\nimport tensorflow as tf\nindices = tf.placeholder(tf.int64, (None, 2))\nvalues = tf.placeholder(tf.float32, (None,))\nsparse_tensor = tf.SparseTensor(indices, values, (5, 7))\ndense_tensor1 = tf.sparse_tensor_to_dense(sparse_tensor)\ndense_tensor2 = tf.sparse_to_dense(indices, (5, 7), values)\ndense_tensor3 = tf.sparse_add(tf.zeros((5, 7)), sparse_tensor)\ndense_tensor4 = tf.sparse_tensor_dense_matmul(sparse_tensor, tf.zeros((7, 5)))\nsum1 = tf.reduce_sum(dense_tensor1)\nsum2 = tf.reduce_sum(dense_tensor2)\nsum3 = tf.reduce_sum(dense_tensor3)\nsum4 = tf.reduce_sum(dense_tensor4)\nprint(tf.gradients(sum1, values))\nprint(tf.gradients(sum2, values))\nprint(tf.gradients(sum3, values))\nprint(tf.gradients(sum4, values))", "body": "The example provided above still does return None -- added `sparse_tensor_dense_matmul` and `sparse_to_dense` to the mix because in my use case I can (with some overhead) use each of those functions.\r\n\r\n## Executed:\r\n\r\n```Python\r\n$ docker run -it tensorflow/tensorflow:1.4.0-py3 python3\r\nPython 3.5.2 (default, Sep 14 2017, 22:51:06) \r\n[GCC 5.4.0 20160609] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import tensorflow as tf\r\n>>> indices = tf.placeholder(tf.int64, (None, 2))\r\n>>> values = tf.placeholder(tf.float32, (None,))\r\n>>> sparse_tensor = tf.SparseTensor(indices, values, (5, 7))\r\n>>> dense_tensor1 = tf.sparse_tensor_to_dense(sparse_tensor)\r\n>>> dense_tensor2 = tf.sparse_to_dense(indices, (5, 7), values)\r\n>>> dense_tensor3 = tf.sparse_add(tf.zeros((5, 7)), sparse_tensor)\r\n>>> dense_tensor4 = tf.sparse_tensor_dense_matmul(sparse_tensor, tf.zeros((7, 5)))\r\n>>> sum1 = tf.reduce_sum(dense_tensor1)\r\n>>> sum2 = tf.reduce_sum(dense_tensor2)\r\n>>> sum3 = tf.reduce_sum(dense_tensor3)\r\n>>> sum4 = tf.reduce_sum(dense_tensor4)\r\n>>> print(tf.gradients(sum1, values))\r\n[None]\r\n>>> print(tf.gradients(sum2, values))\r\n[None]\r\n>>> print(tf.gradients(sum3, values))\r\n[<tf.Tensor 'gradients_2/SparseTensorDenseAdd_grad/GatherNd:0' shape=(?,) dtype=float32>]\r\n>>> print(tf.gradients(sum4, values))\r\n[<tf.Tensor 'gradients_3/SparseTensorDenseMatMul/SparseTensorDenseMatMul_grad/Sum:0' shape=(?,) dtype=float32>]\r\n```\r\n\r\n## Ready to copy & run:\r\n\r\n```Python\r\nimport tensorflow as tf\r\nindices = tf.placeholder(tf.int64, (None, 2))\r\nvalues = tf.placeholder(tf.float32, (None,))\r\nsparse_tensor = tf.SparseTensor(indices, values, (5, 7))\r\ndense_tensor1 = tf.sparse_tensor_to_dense(sparse_tensor)\r\ndense_tensor2 = tf.sparse_to_dense(indices, (5, 7), values)\r\ndense_tensor3 = tf.sparse_add(tf.zeros((5, 7)), sparse_tensor)\r\ndense_tensor4 = tf.sparse_tensor_dense_matmul(sparse_tensor, tf.zeros((7, 5)))\r\nsum1 = tf.reduce_sum(dense_tensor1)\r\nsum2 = tf.reduce_sum(dense_tensor2)\r\nsum3 = tf.reduce_sum(dense_tensor3)\r\nsum4 = tf.reduce_sum(dense_tensor4)\r\nprint(tf.gradients(sum1, values))\r\nprint(tf.gradients(sum2, values))\r\nprint(tf.gradients(sum3, values))\r\nprint(tf.gradients(sum4, values))\r\n```"}