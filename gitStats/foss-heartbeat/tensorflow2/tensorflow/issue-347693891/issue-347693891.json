{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21389", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21389/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21389/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21389/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/21389", "id": 347693891, "node_id": "MDU6SXNzdWUzNDc2OTM4OTE=", "number": 21389, "title": "DistributionStrategy in tf.keras doesn't support multi input models", "user": {"login": "lgeiger", "id": 13285808, "node_id": "MDQ6VXNlcjEzMjg1ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/13285808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lgeiger", "html_url": "https://github.com/lgeiger", "followers_url": "https://api.github.com/users/lgeiger/followers", "following_url": "https://api.github.com/users/lgeiger/following{/other_user}", "gists_url": "https://api.github.com/users/lgeiger/gists{/gist_id}", "starred_url": "https://api.github.com/users/lgeiger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lgeiger/subscriptions", "organizations_url": "https://api.github.com/users/lgeiger/orgs", "repos_url": "https://api.github.com/users/lgeiger/repos", "events_url": "https://api.github.com/users/lgeiger/events{/privacy}", "received_events_url": "https://api.github.com/users/lgeiger/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 996845227, "node_id": "MDU6TGFiZWw5OTY4NDUyMjc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:dist-strat", "name": "comp:dist-strat", "color": "0052cc", "default": false}], "state": "open", "locked": false, "assignee": {"login": "anj-s", "id": 32556631, "node_id": "MDQ6VXNlcjMyNTU2NjMx", "avatar_url": "https://avatars1.githubusercontent.com/u/32556631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anj-s", "html_url": "https://github.com/anj-s", "followers_url": "https://api.github.com/users/anj-s/followers", "following_url": "https://api.github.com/users/anj-s/following{/other_user}", "gists_url": "https://api.github.com/users/anj-s/gists{/gist_id}", "starred_url": "https://api.github.com/users/anj-s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anj-s/subscriptions", "organizations_url": "https://api.github.com/users/anj-s/orgs", "repos_url": "https://api.github.com/users/anj-s/repos", "events_url": "https://api.github.com/users/anj-s/events{/privacy}", "received_events_url": "https://api.github.com/users/anj-s/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "anj-s", "id": 32556631, "node_id": "MDQ6VXNlcjMyNTU2NjMx", "avatar_url": "https://avatars1.githubusercontent.com/u/32556631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anj-s", "html_url": "https://github.com/anj-s", "followers_url": "https://api.github.com/users/anj-s/followers", "following_url": "https://api.github.com/users/anj-s/following{/other_user}", "gists_url": "https://api.github.com/users/anj-s/gists{/gist_id}", "starred_url": "https://api.github.com/users/anj-s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anj-s/subscriptions", "organizations_url": "https://api.github.com/users/anj-s/orgs", "repos_url": "https://api.github.com/users/anj-s/repos", "events_url": "https://api.github.com/users/anj-s/events{/privacy}", "received_events_url": "https://api.github.com/users/anj-s/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2018-08-05T12:25:57Z", "updated_at": "2018-11-15T19:03:23Z", "closed_at": null, "author_association": "CONTRIBUTOR", "body_html": "<p>Please go to Stack Overflow for help and support:</p>\n<p><a href=\"https://stackoverflow.com/questions/tagged/tensorflow\" rel=\"nofollow\">https://stackoverflow.com/questions/tagged/tensorflow</a></p>\n<p>If you open a GitHub issue, here is our policy:</p>\n<ol>\n<li>It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).</li>\n<li>The form below must be filled out.</li>\n<li>It shouldn't be a TensorBoard issue. Those go <a href=\"https://github.com/tensorflow/tensorboard/issues\">here</a>.</li>\n</ol>\n<p><strong>Here's why we have that policy</strong>: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.</p>\n<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: no</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Debian and macOS 10.13.6</li>\n<li><strong>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device</strong>:</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: binary</li>\n<li><strong>TensorFlow version (use command below)</strong>: 1.11.0.dev20180805</li>\n<li><strong>Python version</strong>: 3.6 and 3.5</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>:</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>: See below</li>\n</ul>\n<p>You can collect some of this information using our environment capture script:</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh</a></p>\n<p>You can obtain the TensorFlow version with</p>\n<p>python -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"</p>\n<h3>Describe the problem</h3>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=32556631\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/anj-s\">@anj-s</a> Huge thanks for adding support for distribution strategies to keras in <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/92279f8bfa6ce2124439aabfa6db84d722dc2b66/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/92279f8bfa6ce2124439aabfa6db84d722dc2b66\"><tt>92279f8</tt></a> <g-emoji class=\"g-emoji\" alias=\"tada\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png\">\ud83c\udf89</g-emoji></p>\n<p>While using it together with single input models works great, it fails with an uncaught exception when using it with multiple inputs:</p>\n<h3>Source code / logs</h3>\n<p>Consider the following unit tests:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-k\">from</span> tensorflow.contrib.distribute.python <span class=\"pl-k\">import</span> mirrored_strategy\n<span class=\"pl-k\">from</span> tensorflow.python <span class=\"pl-k\">import</span> keras\n<span class=\"pl-k\">from</span> tensorflow.python.data.ops <span class=\"pl-k\">import</span> dataset_ops\n<span class=\"pl-k\">from</span> tensorflow.python.platform <span class=\"pl-k\">import</span> test\n<span class=\"pl-k\">from</span> tensorflow.python.training <span class=\"pl-k\">import</span> gradient_descent\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">TrainingTest</span>(<span class=\"pl-e\">test</span>.<span class=\"pl-e\">TestCase</span>):\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">test_dataset_input_tuples</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">self</span>.test_session():\n      a <span class=\"pl-k\">=</span> keras.layers.Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">3</span>,), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>input_a<span class=\"pl-pds\">'</span></span>)\n      b <span class=\"pl-k\">=</span> keras.layers.Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">4</span>,), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>input_b<span class=\"pl-pds\">'</span></span>)\n      x <span class=\"pl-k\">=</span> keras.layers.concatenate([a, b])\n      y <span class=\"pl-k\">=</span> keras.layers.Dense(<span class=\"pl-c1\">5</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>dense<span class=\"pl-pds\">'</span></span>)(x)\n\n      model <span class=\"pl-k\">=</span> keras.Model(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>[a, b], <span class=\"pl-v\">outputs</span><span class=\"pl-k\">=</span>[y])\n      model.compile(<span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>mse<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">metrics</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>mae<span class=\"pl-pds\">'</span></span>], <span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>rmsprop<span class=\"pl-pds\">'</span></span>)\n\n      inputs_a <span class=\"pl-k\">=</span> np.zeros((<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">3</span>))\n      inputs_b <span class=\"pl-k\">=</span> np.zeros((<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">4</span>))\n      targets <span class=\"pl-k\">=</span> np.zeros((<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">5</span>))\n      dataset <span class=\"pl-k\">=</span> dataset_ops.Dataset.from_tensor_slices(((inputs_a,\n                                                         inputs_b),\n                                                        targets))\n      dataset <span class=\"pl-k\">=</span> dataset.repeat(<span class=\"pl-c1\">100</span>)\n      dataset <span class=\"pl-k\">=</span> dataset.batch(<span class=\"pl-c1\">10</span>)\n\n      model.fit(dataset, <span class=\"pl-v\">epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">steps_per_epoch</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-v\">verbose</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">test_distributed_dataset_input_tuples</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>):\n    <span class=\"pl-k\">with</span> <span class=\"pl-c1\">self</span>.test_session():\n      a <span class=\"pl-k\">=</span> keras.layers.Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">3</span>,), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>input_a<span class=\"pl-pds\">'</span></span>)\n      b <span class=\"pl-k\">=</span> keras.layers.Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">4</span>,), <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>input_b<span class=\"pl-pds\">'</span></span>)\n      x <span class=\"pl-k\">=</span> keras.layers.concatenate([a, b])\n      y <span class=\"pl-k\">=</span> keras.layers.Dense(<span class=\"pl-c1\">5</span>, <span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>dense<span class=\"pl-pds\">'</span></span>)(x)\n      model <span class=\"pl-k\">=</span> keras.Model(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>[a, b], <span class=\"pl-v\">outputs</span><span class=\"pl-k\">=</span>[y])\n\n      optimizer <span class=\"pl-k\">=</span> gradient_descent.GradientDescentOptimizer(<span class=\"pl-c1\">0.001</span>)\n      strategy <span class=\"pl-k\">=</span> mirrored_strategy.MirroredStrategy([<span class=\"pl-s\"><span class=\"pl-pds\">'</span>/device:GPU:1<span class=\"pl-pds\">'</span></span>,\n                                                     <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/device:CPU:0<span class=\"pl-pds\">'</span></span>])\n\n      model.compile(<span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>mse<span class=\"pl-pds\">'</span></span>,\n                    <span class=\"pl-v\">metrics</span><span class=\"pl-k\">=</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>mae<span class=\"pl-pds\">'</span></span>],\n                    <span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span>optimizer,\n                    <span class=\"pl-v\">distribute</span><span class=\"pl-k\">=</span>strategy)\n\n      inputs_a <span class=\"pl-k\">=</span> np.zeros((<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">3</span>))\n      inputs_b <span class=\"pl-k\">=</span> np.zeros((<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">4</span>))\n      targets <span class=\"pl-k\">=</span> np.zeros((<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">5</span>))\n      dataset <span class=\"pl-k\">=</span> dataset_ops.Dataset.from_tensor_slices(((inputs_a,\n                                                         inputs_b),\n                                                        targets))\n      dataset <span class=\"pl-k\">=</span> dataset.repeat(<span class=\"pl-c1\">100</span>)\n      dataset <span class=\"pl-k\">=</span> dataset.batch(<span class=\"pl-c1\">10</span>)\n\n      model.fit(dataset, <span class=\"pl-v\">epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">steps_per_epoch</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-v\">verbose</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n  test.main()</pre></div>\n<p>While the first test works well, the second will fail with the following error:</p>\n<div class=\"highlight highlight-text-python-traceback\"><pre>Epoch 1/1\n2/2 [==============================] - 0s 55ms/step - loss: 0.0000e+00 - mean_absolute_error: 0.0000e+00\n.WARNING:tensorflow:You are accessing attribute optimizerof theDistributedCallbackModel that may not have been setcorrectly.\n/usr/local/lib/python3.6/site-packages/tensorflow/python/util/tf_inspect.py:75: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() or inspect.getfullargspec()\n  return _inspect.getargspec(target)\nE.\n======================================================================\n<span class=\"pl-en\">ERROR</span>: <span class=\"pl-s\">test_distributed_dataset_input_tuples (__main__.TrainingTest)</span>\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File <span class=\"pl-s\">\"tf_test.py\"</span>, line <span class=\"pl-c1\">57</span>, in <span class=\"pl-en\">test_distributed_dataset_input_tuples</span>\n    model.fit(dataset, <span class=\"pl-v\">epochs</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>, <span class=\"pl-v\">steps_per_epoch</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2</span>, <span class=\"pl-v\">verbose</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1</span>)\n  File <span class=\"pl-s\">\"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\"</span>, line <span class=\"pl-c1\">1366</span>, in <span class=\"pl-en\">fit</span>\n    validation_split<span class=\"pl-k\">=</span>validation_split)\n  File <span class=\"pl-s\">\"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\"</span>, line <span class=\"pl-c1\">794</span>, in <span class=\"pl-en\">_standardize_user_data</span>\n    validation_split<span class=\"pl-k\">=</span>validation_split)\n  File <span class=\"pl-s\">\"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\"</span>, line <span class=\"pl-c1\">713</span>, in <span class=\"pl-en\">_distribution_standardize_user_data</span>\n    validate_distributed_dataset_inputs(<span class=\"pl-c1\">self</span>._distribution_strategy, x, y)\n  File <span class=\"pl-s\">\"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/distributed_training_utils.py\"</span>, line <span class=\"pl-c1\">212</span>, in <span class=\"pl-en\">validate_distributed_dataset_inputs</span>\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span> are of type <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(<span class=\"pl-c1\">type</span>(x)))\n<span class=\"pl-en\">ValueError</span>: <span class=\"pl-s\">Dataset input to the model should be tensors instead they are of type &lt;class 'tuple'&gt;</span>\n\n----------------------------------------------------------------------\nRan 3 tests in 0.914s\n\nFAILED (errors=1)</pre></div>\n<p>The same is true when using a dictionary as an input.<br>\nSince I'm new to using distribution strategies, I'm unsure if this is just a problem with too strict input validation (as in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"340819928\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/20753\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tensorflow/tensorflow/pull/20753/hovercard\" href=\"https://github.com/tensorflow/tensorflow/pull/20753\">#20753</a>) or if this needs more work to support this use case.</p>\n<p>Thanks for the great work!</p>", "body_text": "Please go to Stack Overflow for help and support:\nhttps://stackoverflow.com/questions/tagged/tensorflow\nIf you open a GitHub issue, here is our policy:\n\nIt must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\nThe form below must be filled out.\nIt shouldn't be a TensorBoard issue. Those go here.\n\nHere's why we have that policy: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\n\nSystem information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): no\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Debian and macOS 10.13.6\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.11.0.dev20180805\nPython version: 3.6 and 3.5\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source):\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce: See below\n\nYou can collect some of this information using our environment capture script:\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\nYou can obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\nDescribe the problem\n@anj-s Huge thanks for adding support for distribution strategies to keras in 92279f8 \ud83c\udf89\nWhile using it together with single input models works great, it fails with an uncaught exception when using it with multiple inputs:\nSource code / logs\nConsider the following unit tests:\nimport numpy as np\n\nfrom tensorflow.contrib.distribute.python import mirrored_strategy\nfrom tensorflow.python import keras\nfrom tensorflow.python.data.ops import dataset_ops\nfrom tensorflow.python.platform import test\nfrom tensorflow.python.training import gradient_descent\n\nclass TrainingTest(test.TestCase):\n  def test_dataset_input_tuples(self):\n    with self.test_session():\n      a = keras.layers.Input(shape=(3,), name='input_a')\n      b = keras.layers.Input(shape=(4,), name='input_b')\n      x = keras.layers.concatenate([a, b])\n      y = keras.layers.Dense(5, name='dense')(x)\n\n      model = keras.Model(inputs=[a, b], outputs=[y])\n      model.compile(loss='mse', metrics=['mae'], optimizer='rmsprop')\n\n      inputs_a = np.zeros((10, 3))\n      inputs_b = np.zeros((10, 4))\n      targets = np.zeros((10, 5))\n      dataset = dataset_ops.Dataset.from_tensor_slices(((inputs_a,\n                                                         inputs_b),\n                                                        targets))\n      dataset = dataset.repeat(100)\n      dataset = dataset.batch(10)\n\n      model.fit(dataset, epochs=1, steps_per_epoch=2, verbose=1)\n\n  def test_distributed_dataset_input_tuples(self):\n    with self.test_session():\n      a = keras.layers.Input(shape=(3,), name='input_a')\n      b = keras.layers.Input(shape=(4,), name='input_b')\n      x = keras.layers.concatenate([a, b])\n      y = keras.layers.Dense(5, name='dense')(x)\n      model = keras.Model(inputs=[a, b], outputs=[y])\n\n      optimizer = gradient_descent.GradientDescentOptimizer(0.001)\n      strategy = mirrored_strategy.MirroredStrategy(['/device:GPU:1',\n                                                     '/device:CPU:0'])\n\n      model.compile(loss='mse',\n                    metrics=['mae'],\n                    optimizer=optimizer,\n                    distribute=strategy)\n\n      inputs_a = np.zeros((10, 3))\n      inputs_b = np.zeros((10, 4))\n      targets = np.zeros((10, 5))\n      dataset = dataset_ops.Dataset.from_tensor_slices(((inputs_a,\n                                                         inputs_b),\n                                                        targets))\n      dataset = dataset.repeat(100)\n      dataset = dataset.batch(10)\n\n      model.fit(dataset, epochs=1, steps_per_epoch=2, verbose=1)\n\nif __name__ == '__main__':\n  test.main()\nWhile the first test works well, the second will fail with the following error:\nEpoch 1/1\n2/2 [==============================] - 0s 55ms/step - loss: 0.0000e+00 - mean_absolute_error: 0.0000e+00\n.WARNING:tensorflow:You are accessing attribute optimizerof theDistributedCallbackModel that may not have been setcorrectly.\n/usr/local/lib/python3.6/site-packages/tensorflow/python/util/tf_inspect.py:75: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() or inspect.getfullargspec()\n  return _inspect.getargspec(target)\nE.\n======================================================================\nERROR: test_distributed_dataset_input_tuples (__main__.TrainingTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tf_test.py\", line 57, in test_distributed_dataset_input_tuples\n    model.fit(dataset, epochs=1, steps_per_epoch=2, verbose=1)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 1366, in fit\n    validation_split=validation_split)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 794, in _standardize_user_data\n    validation_split=validation_split)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 713, in _distribution_standardize_user_data\n    validate_distributed_dataset_inputs(self._distribution_strategy, x, y)\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/distributed_training_utils.py\", line 212, in validate_distributed_dataset_inputs\n    ' are of type {}'.format(type(x)))\nValueError: Dataset input to the model should be tensors instead they are of type <class 'tuple'>\n\n----------------------------------------------------------------------\nRan 3 tests in 0.914s\n\nFAILED (errors=1)\nThe same is true when using a dictionary as an input.\nSince I'm new to using distribution strategies, I'm unsure if this is just a problem with too strict input validation (as in #20753) or if this needs more work to support this use case.\nThanks for the great work!", "body": "Please go to Stack Overflow for help and support:\r\n\r\nhttps://stackoverflow.com/questions/tagged/tensorflow\r\n\r\nIf you open a GitHub issue, here is our policy:\r\n\r\n1. It must be a bug, a feature request, or a significant problem with documentation (for small docs fixes please send a PR instead).\r\n2. The form below must be filled out.\r\n3. It shouldn't be a TensorBoard issue. Those go [here](https://github.com/tensorflow/tensorboard/issues).\r\n\r\n**Here's why we have that policy**: TensorFlow developers respond to issues. We want to focus on work that benefits the whole community, e.g., fixing bugs and adding features. Support only helps individuals. GitHub also notifies thousands of people when issues are filed. We want them to see you communicating an interesting problem, rather than being redirected to Stack Overflow.\r\n\r\n------------------------\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: no\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Debian and macOS 10.13.6\r\n- **Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device**:\r\n- **TensorFlow installed from (source or binary)**: binary\r\n- **TensorFlow version (use command below)**: 1.11.0.dev20180805\r\n- **Python version**: 3.6 and 3.5\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**:\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**: See below\r\n\r\nYou can collect some of this information using our environment capture script:\r\n\r\nhttps://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\r\n\r\nYou can obtain the TensorFlow version with\r\n\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\n\r\n### Describe the problem\r\n@anj-s Huge thanks for adding support for distribution strategies to keras in 92279f8bfa6ce2124439aabfa6db84d722dc2b66 \ud83c\udf89 \r\n\r\nWhile using it together with single input models works great, it fails with an uncaught exception when using it with multiple inputs:\r\n\r\n### Source code / logs\r\nConsider the following unit tests:\r\n```python\r\nimport numpy as np\r\n\r\nfrom tensorflow.contrib.distribute.python import mirrored_strategy\r\nfrom tensorflow.python import keras\r\nfrom tensorflow.python.data.ops import dataset_ops\r\nfrom tensorflow.python.platform import test\r\nfrom tensorflow.python.training import gradient_descent\r\n\r\nclass TrainingTest(test.TestCase):\r\n  def test_dataset_input_tuples(self):\r\n    with self.test_session():\r\n      a = keras.layers.Input(shape=(3,), name='input_a')\r\n      b = keras.layers.Input(shape=(4,), name='input_b')\r\n      x = keras.layers.concatenate([a, b])\r\n      y = keras.layers.Dense(5, name='dense')(x)\r\n\r\n      model = keras.Model(inputs=[a, b], outputs=[y])\r\n      model.compile(loss='mse', metrics=['mae'], optimizer='rmsprop')\r\n\r\n      inputs_a = np.zeros((10, 3))\r\n      inputs_b = np.zeros((10, 4))\r\n      targets = np.zeros((10, 5))\r\n      dataset = dataset_ops.Dataset.from_tensor_slices(((inputs_a,\r\n                                                         inputs_b),\r\n                                                        targets))\r\n      dataset = dataset.repeat(100)\r\n      dataset = dataset.batch(10)\r\n\r\n      model.fit(dataset, epochs=1, steps_per_epoch=2, verbose=1)\r\n\r\n  def test_distributed_dataset_input_tuples(self):\r\n    with self.test_session():\r\n      a = keras.layers.Input(shape=(3,), name='input_a')\r\n      b = keras.layers.Input(shape=(4,), name='input_b')\r\n      x = keras.layers.concatenate([a, b])\r\n      y = keras.layers.Dense(5, name='dense')(x)\r\n      model = keras.Model(inputs=[a, b], outputs=[y])\r\n\r\n      optimizer = gradient_descent.GradientDescentOptimizer(0.001)\r\n      strategy = mirrored_strategy.MirroredStrategy(['/device:GPU:1',\r\n                                                     '/device:CPU:0'])\r\n\r\n      model.compile(loss='mse',\r\n                    metrics=['mae'],\r\n                    optimizer=optimizer,\r\n                    distribute=strategy)\r\n\r\n      inputs_a = np.zeros((10, 3))\r\n      inputs_b = np.zeros((10, 4))\r\n      targets = np.zeros((10, 5))\r\n      dataset = dataset_ops.Dataset.from_tensor_slices(((inputs_a,\r\n                                                         inputs_b),\r\n                                                        targets))\r\n      dataset = dataset.repeat(100)\r\n      dataset = dataset.batch(10)\r\n\r\n      model.fit(dataset, epochs=1, steps_per_epoch=2, verbose=1)\r\n\r\nif __name__ == '__main__':\r\n  test.main()\r\n```\r\n\r\nWhile the first test works well, the second will fail with the following error:\r\n```python-traceback\r\nEpoch 1/1\r\n2/2 [==============================] - 0s 55ms/step - loss: 0.0000e+00 - mean_absolute_error: 0.0000e+00\r\n.WARNING:tensorflow:You are accessing attribute optimizerof theDistributedCallbackModel that may not have been setcorrectly.\r\n/usr/local/lib/python3.6/site-packages/tensorflow/python/util/tf_inspect.py:75: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() or inspect.getfullargspec()\r\n  return _inspect.getargspec(target)\r\nE.\r\n======================================================================\r\nERROR: test_distributed_dataset_input_tuples (__main__.TrainingTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"tf_test.py\", line 57, in test_distributed_dataset_input_tuples\r\n    model.fit(dataset, epochs=1, steps_per_epoch=2, verbose=1)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 1366, in fit\r\n    validation_split=validation_split)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 794, in _standardize_user_data\r\n    validation_split=validation_split)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 713, in _distribution_standardize_user_data\r\n    validate_distributed_dataset_inputs(self._distribution_strategy, x, y)\r\n  File \"/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/engine/distributed_training_utils.py\", line 212, in validate_distributed_dataset_inputs\r\n    ' are of type {}'.format(type(x)))\r\nValueError: Dataset input to the model should be tensors instead they are of type <class 'tuple'>\r\n\r\n----------------------------------------------------------------------\r\nRan 3 tests in 0.914s\r\n\r\nFAILED (errors=1)\r\n```\r\n\r\nThe same is true when using a dictionary as an input.\r\nSince I'm new to using distribution strategies, I'm unsure if this is just a problem with too strict input validation (as in #20753) or if this needs more work to support this use case.\r\n\r\nThanks for the great work!"}