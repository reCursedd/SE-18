{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/310470901", "html_url": "https://github.com/tensorflow/tensorflow/issues/10767#issuecomment-310470901", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10767", "id": 310470901, "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDQ3MDkwMQ==", "user": {"login": "gfolego", "id": 8110317, "node_id": "MDQ6VXNlcjgxMTAzMTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8110317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfolego", "html_url": "https://github.com/gfolego", "followers_url": "https://api.github.com/users/gfolego/followers", "following_url": "https://api.github.com/users/gfolego/following{/other_user}", "gists_url": "https://api.github.com/users/gfolego/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfolego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfolego/subscriptions", "organizations_url": "https://api.github.com/users/gfolego/orgs", "repos_url": "https://api.github.com/users/gfolego/repos", "events_url": "https://api.github.com/users/gfolego/events{/privacy}", "received_events_url": "https://api.github.com/users/gfolego/received_events", "type": "User", "site_admin": false}, "created_at": "2017-06-22T18:56:26Z", "updated_at": "2017-10-16T00:12:35Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=577277\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/martinwicke\">@martinwicke</a> Thanks for sharing your thoughts. I agree there's no trivial way to enforce a fixed set size. I'm not familiar with the tensorflow code base, so I'm not exactly sure how functions tf.nn.in_top_k and tf.nn.top_k relate to each other, but it seems that they handle ties differently.</p>\n<p>Given that, would it be better to change them in order to behave similarly, or would it be better to keep current behaviors? If we were to keep tf.nn.top_k's current behavior, I believe we would need the respective parameter option, such as <code>index</code> or <code>order</code>. Here, I'm assuming your <code>sample</code> means random.</p>\n<p>Regarding the logic, here's one option (assuming zero index):</p>\n<pre><code>sort probabilities\nif prob[k-1] != prob[k]\n    // happy ending\nelse\n    if handle_ties == include\n        // return all positions greater than or equal to prob[k-1]\n    else if handle_ties == exclude\n        // return all positions greater than prob[k-1]\n    else if handle_ties == sample or index\n        // get all positions greater than prob[k-1] (which will be returned)\n        // get all positions equal to prob[k-1] (ties)\n        // fill remaining positions (according to sample or index)\n</code></pre>\n<p>I hope this helps somehow. But it's a great discussion anyway.<br>\nThanks and best regards!</p>", "body_text": "@martinwicke Thanks for sharing your thoughts. I agree there's no trivial way to enforce a fixed set size. I'm not familiar with the tensorflow code base, so I'm not exactly sure how functions tf.nn.in_top_k and tf.nn.top_k relate to each other, but it seems that they handle ties differently.\nGiven that, would it be better to change them in order to behave similarly, or would it be better to keep current behaviors? If we were to keep tf.nn.top_k's current behavior, I believe we would need the respective parameter option, such as index or order. Here, I'm assuming your sample means random.\nRegarding the logic, here's one option (assuming zero index):\nsort probabilities\nif prob[k-1] != prob[k]\n    // happy ending\nelse\n    if handle_ties == include\n        // return all positions greater than or equal to prob[k-1]\n    else if handle_ties == exclude\n        // return all positions greater than prob[k-1]\n    else if handle_ties == sample or index\n        // get all positions greater than prob[k-1] (which will be returned)\n        // get all positions equal to prob[k-1] (ties)\n        // fill remaining positions (according to sample or index)\n\nI hope this helps somehow. But it's a great discussion anyway.\nThanks and best regards!", "body": "@martinwicke Thanks for sharing your thoughts. I agree there's no trivial way to enforce a fixed set size. I'm not familiar with the tensorflow code base, so I'm not exactly sure how functions tf.nn.in_top_k and tf.nn.top_k relate to each other, but it seems that they handle ties differently.\r\n\r\nGiven that, would it be better to change them in order to behave similarly, or would it be better to keep current behaviors? If we were to keep tf.nn.top_k's current behavior, I believe we would need the respective parameter option, such as `index` or `order`. Here, I'm assuming your `sample` means random.\r\n\r\nRegarding the logic, here's one option (assuming zero index):\r\n\r\n```\r\nsort probabilities\r\nif prob[k-1] != prob[k]\r\n    // happy ending\r\nelse\r\n    if handle_ties == include\r\n        // return all positions greater than or equal to prob[k-1]\r\n    else if handle_ties == exclude\r\n        // return all positions greater than prob[k-1]\r\n    else if handle_ties == sample or index\r\n        // get all positions greater than prob[k-1] (which will be returned)\r\n        // get all positions equal to prob[k-1] (ties)\r\n        // fill remaining positions (according to sample or index)\r\n```\r\n\r\nI hope this helps somehow. But it's a great discussion anyway.\r\nThanks and best regards!"}