{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8389", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8389/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8389/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/8389/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/8389", "id": 214008742, "node_id": "MDU6SXNzdWUyMTQwMDg3NDI=", "number": 8389, "title": "ArgumentError: argument --train_dir: conflicting option string: --train_dir", "user": {"login": "dowhat1995", "id": 24549038, "node_id": "MDQ6VXNlcjI0NTQ5MDM4", "avatar_url": "https://avatars1.githubusercontent.com/u/24549038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dowhat1995", "html_url": "https://github.com/dowhat1995", "followers_url": "https://api.github.com/users/dowhat1995/followers", "following_url": "https://api.github.com/users/dowhat1995/following{/other_user}", "gists_url": "https://api.github.com/users/dowhat1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/dowhat1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dowhat1995/subscriptions", "organizations_url": "https://api.github.com/users/dowhat1995/orgs", "repos_url": "https://api.github.com/users/dowhat1995/repos", "events_url": "https://api.github.com/users/dowhat1995/events{/privacy}", "received_events_url": "https://api.github.com/users/dowhat1995/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-03-14T09:13:39Z", "updated_at": "2018-08-21T17:43:48Z", "closed_at": "2017-04-03T20:26:08Z", "author_association": "NONE", "body_html": "<p>I met this question,when I run \"cifar10_train.py\" in jupyter.</p>\n<hr>\n<p>ArgumentError                             Traceback (most recent call last)<br>\n/root/.jupyter/workspace/littlefish/cifar10/cifar10_train.py in ()<br>\n50<br>\n51 tf.app.flags.DEFINE_string('train_dir', '/tmp/cifar10_train',<br>\n---&gt; 52                            \"\"\"Directory where to write event logs \"\"\"<br>\n53                            \"\"\"and checkpoint.\"\"\")<br>\n54 tf.app.flags.DEFINE_integer('max_steps', 1000000,</p>\n<p>/root/anaconda3/lib/python3.5/site-packages/tensorflow/python/platform/flags.py in DEFINE_string(flag_name, default_value, docstring)<br>\n78     docstring: A helpful message explaining the use of the flag.<br>\n79   \"\"\"<br>\n---&gt; 80   _define_helper(flag_name, default_value, docstring, str)<br>\n81<br>\n82</p>\n<p>/root/anaconda3/lib/python3.5/site-packages/tensorflow/python/platform/flags.py in _define_helper(flag_name, default_value, docstring, flagtype)<br>\n63                               default=default_value,<br>\n64                               help=docstring,<br>\n---&gt; 65                               type=flagtype)<br>\n66<br>\n67</p>\n<p>/root/anaconda3/lib/python3.5/argparse.py in add_argument(self, *args, **kwargs)<br>\n1342                 raise ValueError(\"length of metavar tuple does not match nargs\")<br>\n1343<br>\n-&gt; 1344         return self._add_action(action)<br>\n1345<br>\n1346     def add_argument_group(self, *args, **kwargs):</p>\n<p>/root/anaconda3/lib/python3.5/argparse.py in _add_action(self, action)<br>\n1705     def _add_action(self, action):<br>\n1706         if action.option_strings:<br>\n-&gt; 1707             self._optionals._add_action(action)<br>\n1708         else:<br>\n1709             self._positionals._add_action(action)</p>\n<p>/root/anaconda3/lib/python3.5/argparse.py in _add_action(self, action)<br>\n1546<br>\n1547     def _add_action(self, action):<br>\n-&gt; 1548         action = super(_ArgumentGroup, self)._add_action(action)<br>\n1549         self._group_actions.append(action)<br>\n1550         return action</p>\n<p>/root/anaconda3/lib/python3.5/argparse.py in _add_action(self, action)<br>\n1356     def _add_action(self, action):<br>\n1357         # resolve any conflicts<br>\n-&gt; 1358         self._check_conflict(action)<br>\n1359<br>\n1360         # add to actions list</p>\n<p>/root/anaconda3/lib/python3.5/argparse.py in _check_conflict(self, action)<br>\n1495         if confl_optionals:<br>\n1496             conflict_handler = self._get_handler()<br>\n-&gt; 1497             conflict_handler(action, confl_optionals)<br>\n1498<br>\n1499     def _handle_conflict_error(self, action, conflicting_actions):</p>\n<p>/root/anaconda3/lib/python3.5/argparse.py in _handle_conflict_error(self, action, conflicting_actions)<br>\n1504                                      for option_string, action<br>\n1505                                      in conflicting_actions])<br>\n-&gt; 1506         raise ArgumentError(action, message % conflict_string)<br>\n1507<br>\n1508     def _handle_conflict_resolve(self, action, conflicting_actions):</p>\n<p>ArgumentError: argument --train_dir: conflicting option string: --train_dir</p>", "body_text": "I met this question,when I run \"cifar10_train.py\" in jupyter.\n\nArgumentError                             Traceback (most recent call last)\n/root/.jupyter/workspace/littlefish/cifar10/cifar10_train.py in ()\n50\n51 tf.app.flags.DEFINE_string('train_dir', '/tmp/cifar10_train',\n---> 52                            \"\"\"Directory where to write event logs \"\"\"\n53                            \"\"\"and checkpoint.\"\"\")\n54 tf.app.flags.DEFINE_integer('max_steps', 1000000,\n/root/anaconda3/lib/python3.5/site-packages/tensorflow/python/platform/flags.py in DEFINE_string(flag_name, default_value, docstring)\n78     docstring: A helpful message explaining the use of the flag.\n79   \"\"\"\n---> 80   _define_helper(flag_name, default_value, docstring, str)\n81\n82\n/root/anaconda3/lib/python3.5/site-packages/tensorflow/python/platform/flags.py in _define_helper(flag_name, default_value, docstring, flagtype)\n63                               default=default_value,\n64                               help=docstring,\n---> 65                               type=flagtype)\n66\n67\n/root/anaconda3/lib/python3.5/argparse.py in add_argument(self, *args, **kwargs)\n1342                 raise ValueError(\"length of metavar tuple does not match nargs\")\n1343\n-> 1344         return self._add_action(action)\n1345\n1346     def add_argument_group(self, *args, **kwargs):\n/root/anaconda3/lib/python3.5/argparse.py in _add_action(self, action)\n1705     def _add_action(self, action):\n1706         if action.option_strings:\n-> 1707             self._optionals._add_action(action)\n1708         else:\n1709             self._positionals._add_action(action)\n/root/anaconda3/lib/python3.5/argparse.py in _add_action(self, action)\n1546\n1547     def _add_action(self, action):\n-> 1548         action = super(_ArgumentGroup, self)._add_action(action)\n1549         self._group_actions.append(action)\n1550         return action\n/root/anaconda3/lib/python3.5/argparse.py in _add_action(self, action)\n1356     def _add_action(self, action):\n1357         # resolve any conflicts\n-> 1358         self._check_conflict(action)\n1359\n1360         # add to actions list\n/root/anaconda3/lib/python3.5/argparse.py in _check_conflict(self, action)\n1495         if confl_optionals:\n1496             conflict_handler = self._get_handler()\n-> 1497             conflict_handler(action, confl_optionals)\n1498\n1499     def _handle_conflict_error(self, action, conflicting_actions):\n/root/anaconda3/lib/python3.5/argparse.py in _handle_conflict_error(self, action, conflicting_actions)\n1504                                      for option_string, action\n1505                                      in conflicting_actions])\n-> 1506         raise ArgumentError(action, message % conflict_string)\n1507\n1508     def _handle_conflict_resolve(self, action, conflicting_actions):\nArgumentError: argument --train_dir: conflicting option string: --train_dir", "body": "I met this question,when I run \"cifar10_train.py\" in jupyter.\r\n\r\n---------------------------------------------------------------------------\r\nArgumentError                             Traceback (most recent call last)\r\n/root/.jupyter/workspace/littlefish/cifar10/cifar10_train.py in <module>()\r\n     50 \r\n     51 tf.app.flags.DEFINE_string('train_dir', '/tmp/cifar10_train',\r\n---> 52                            \"\"\"Directory where to write event logs \"\"\"\r\n     53                            \"\"\"and checkpoint.\"\"\")\r\n     54 tf.app.flags.DEFINE_integer('max_steps', 1000000,\r\n\r\n/root/anaconda3/lib/python3.5/site-packages/tensorflow/python/platform/flags.py in DEFINE_string(flag_name, default_value, docstring)\r\n     78     docstring: A helpful message explaining the use of the flag.\r\n     79   \"\"\"\r\n---> 80   _define_helper(flag_name, default_value, docstring, str)\r\n     81 \r\n     82 \r\n\r\n/root/anaconda3/lib/python3.5/site-packages/tensorflow/python/platform/flags.py in _define_helper(flag_name, default_value, docstring, flagtype)\r\n     63                               default=default_value,\r\n     64                               help=docstring,\r\n---> 65                               type=flagtype)\r\n     66 \r\n     67 \r\n\r\n/root/anaconda3/lib/python3.5/argparse.py in add_argument(self, *args, **kwargs)\r\n   1342                 raise ValueError(\"length of metavar tuple does not match nargs\")\r\n   1343 \r\n-> 1344         return self._add_action(action)\r\n   1345 \r\n   1346     def add_argument_group(self, *args, **kwargs):\r\n\r\n/root/anaconda3/lib/python3.5/argparse.py in _add_action(self, action)\r\n   1705     def _add_action(self, action):\r\n   1706         if action.option_strings:\r\n-> 1707             self._optionals._add_action(action)\r\n   1708         else:\r\n   1709             self._positionals._add_action(action)\r\n\r\n/root/anaconda3/lib/python3.5/argparse.py in _add_action(self, action)\r\n   1546 \r\n   1547     def _add_action(self, action):\r\n-> 1548         action = super(_ArgumentGroup, self)._add_action(action)\r\n   1549         self._group_actions.append(action)\r\n   1550         return action\r\n\r\n/root/anaconda3/lib/python3.5/argparse.py in _add_action(self, action)\r\n   1356     def _add_action(self, action):\r\n   1357         # resolve any conflicts\r\n-> 1358         self._check_conflict(action)\r\n   1359 \r\n   1360         # add to actions list\r\n\r\n/root/anaconda3/lib/python3.5/argparse.py in _check_conflict(self, action)\r\n   1495         if confl_optionals:\r\n   1496             conflict_handler = self._get_handler()\r\n-> 1497             conflict_handler(action, confl_optionals)\r\n   1498 \r\n   1499     def _handle_conflict_error(self, action, conflicting_actions):\r\n\r\n/root/anaconda3/lib/python3.5/argparse.py in _handle_conflict_error(self, action, conflicting_actions)\r\n   1504                                      for option_string, action\r\n   1505                                      in conflicting_actions])\r\n-> 1506         raise ArgumentError(action, message % conflict_string)\r\n   1507 \r\n   1508     def _handle_conflict_resolve(self, action, conflicting_actions):\r\n\r\nArgumentError: argument --train_dir: conflicting option string: --train_dir"}