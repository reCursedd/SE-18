{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20992", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20992/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20992/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/20992/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/20992", "id": 343067147, "node_id": "MDU6SXNzdWUzNDMwNjcxNDc=", "number": 20992, "title": "CheckpointSaverListener before_save", "user": {"login": "ghost", "id": 10137, "node_id": "MDQ6VXNlcjEwMTM3", "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghost", "html_url": "https://github.com/ghost", "followers_url": "https://api.github.com/users/ghost/followers", "following_url": "https://api.github.com/users/ghost/following{/other_user}", "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghost/subscriptions", "organizations_url": "https://api.github.com/users/ghost/orgs", "repos_url": "https://api.github.com/users/ghost/repos", "events_url": "https://api.github.com/users/ghost/events{/privacy}", "received_events_url": "https://api.github.com/users/ghost/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-07-20T11:06:46Z", "updated_at": "2018-07-23T17:45:45Z", "closed_at": "2018-07-23T17:45:45Z", "author_association": "NONE", "body_html": "<p>code:</p>\n<pre><code>---&gt;listener\n\n listeners = [\n            EvalListener(estimator,\n                         lambda: input.input_fn(mode=tf.estimator.ModeKeys.EVAL, params=params,\n                                                data_path=params.eval_dir))\n        ]\n\n---&gt;train \n        estimator.train(input_fn=train_input_fn, max_steps=FLAGS.max_steps, saving_listeners=listeners)\n\nclass EvalListener(CheckpointSaverListener):\n    def __init__(self, parent, input_fn, name='eval_data'):\n\n        self.parent = parent\n        self.input_fn = input_fn\n        self.name = name\n        self.history = {}\n---&gt; before save\n    def before_save(self, session, global_step_value):\n        accuracy_spec = self.parent.evaluate(input_fn=self.input_fn, name=self.name)\n        for k, v in sorted(six.iteritems(accuracy_spec)):\n            if k == ACCU_HEAD:\n                if v &gt;= self.history[k][1]:\n                    #   TODO\n                    #   if this time is better than last time, the model will be save\n                    print()\n</code></pre>\n<p>i'd wonder whether i can save the model when the accuracy score is better than last, if not the model will not be saved!</p>", "body_text": "code:\n--->listener\n\n listeners = [\n            EvalListener(estimator,\n                         lambda: input.input_fn(mode=tf.estimator.ModeKeys.EVAL, params=params,\n                                                data_path=params.eval_dir))\n        ]\n\n--->train \n        estimator.train(input_fn=train_input_fn, max_steps=FLAGS.max_steps, saving_listeners=listeners)\n\nclass EvalListener(CheckpointSaverListener):\n    def __init__(self, parent, input_fn, name='eval_data'):\n\n        self.parent = parent\n        self.input_fn = input_fn\n        self.name = name\n        self.history = {}\n---> before save\n    def before_save(self, session, global_step_value):\n        accuracy_spec = self.parent.evaluate(input_fn=self.input_fn, name=self.name)\n        for k, v in sorted(six.iteritems(accuracy_spec)):\n            if k == ACCU_HEAD:\n                if v >= self.history[k][1]:\n                    #   TODO\n                    #   if this time is better than last time, the model will be save\n                    print()\n\ni'd wonder whether i can save the model when the accuracy score is better than last, if not the model will not be saved!", "body": "code:\r\n```\r\n--->listener\r\n\r\n listeners = [\r\n            EvalListener(estimator,\r\n                         lambda: input.input_fn(mode=tf.estimator.ModeKeys.EVAL, params=params,\r\n                                                data_path=params.eval_dir))\r\n        ]\r\n\r\n--->train \r\n        estimator.train(input_fn=train_input_fn, max_steps=FLAGS.max_steps, saving_listeners=listeners)\r\n\r\nclass EvalListener(CheckpointSaverListener):\r\n    def __init__(self, parent, input_fn, name='eval_data'):\r\n\r\n        self.parent = parent\r\n        self.input_fn = input_fn\r\n        self.name = name\r\n        self.history = {}\r\n---> before save\r\n    def before_save(self, session, global_step_value):\r\n        accuracy_spec = self.parent.evaluate(input_fn=self.input_fn, name=self.name)\r\n        for k, v in sorted(six.iteritems(accuracy_spec)):\r\n            if k == ACCU_HEAD:\r\n                if v >= self.history[k][1]:\r\n                    #   TODO\r\n                    #   if this time is better than last time, the model will be save\r\n                    print()\r\n```\r\ni'd wonder whether i can save the model when the accuracy score is better than last, if not the model will not be saved!"}