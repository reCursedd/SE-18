{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/113582761", "pull_request_review_id": 34984251, "id": 113582761, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzU4Mjc2MQ==", "diff_hunk": "@@ -914,93 +919,9 @@ def atrous_conv2d(value, filters, rate, padding, name=None):\n     ValueError: If input/output depth does not match `filters`' shape, or if\n       padding is other than `'VALID'` or `'SAME'`.\n   \"\"\"\n-  with ops.name_scope(name, \"atrous_conv2d\", [value, filters]) as name:\n-    value = ops.convert_to_tensor(value, name=\"value\")\n-    filters = ops.convert_to_tensor(filters, name=\"filters\")\n-    if not value.get_shape()[3].is_compatible_with(filters.get_shape()[2]):\n-      raise ValueError(\n-          \"value's input channels does not match filters' input channels, \"\n-          \"{} != {}\".format(value.get_shape()[3], filters.get_shape()[2]))\n-    if rate < 1:\n-      raise ValueError(\"rate {} cannot be less than one\".format(rate))\n-\n-    if rate == 1:\n-      value = gen_nn_ops.conv2d(input=value,\n-                                filter=filters,\n-                                strides=[1, 1, 1, 1],\n-                                padding=padding)\n-      return value\n-\n-    # We have two padding contributions. The first is used for converting \"SAME\"\n-    # to \"VALID\". The second is required so that the height and width of the\n-    # zero-padded value tensor are multiples of rate.\n-\n-    # Padding required to reduce to \"VALID\" convolution\n-    if padding == \"SAME\":\n-      # Handle filters whose shape is unknown during graph creation.\n-      if filters.get_shape().is_fully_defined():\n-        filter_shape = filters.get_shape().as_list()\n-      else:\n-        filter_shape = array_ops.shape(filters)\n-      filter_height, filter_width = filter_shape[0], filter_shape[1]\n-\n-      # Spatial dimensions of the filters and the upsampled filters in which we\n-      # introduce (rate - 1) zeros between consecutive filter values.\n-      filter_height_up = filter_height + (filter_height - 1) * (rate - 1)\n-      filter_width_up = filter_width + (filter_width - 1) * (rate - 1)\n-\n-      pad_height = filter_height_up - 1\n-      pad_width = filter_width_up - 1\n-\n-      # When pad_height (pad_width) is odd, we pad more to bottom (right),\n-      # following the same convention as conv2d().\n-      pad_top = pad_height // 2\n-      pad_bottom = pad_height - pad_top\n-      pad_left = pad_width // 2\n-      pad_right = pad_width - pad_left\n-    elif padding == \"VALID\":\n-      pad_top = 0\n-      pad_bottom = 0\n-      pad_left = 0\n-      pad_right = 0\n-    else:\n-      raise ValueError(\"Invalid padding\")\n-\n-    # Handle input whose shape is unknown during graph creation.\n-    if value.get_shape().is_fully_defined():\n-      value_shape = value.get_shape().as_list()\n-    else:\n-      value_shape = array_ops.shape(value)\n-\n-    in_height = value_shape[1] + pad_top + pad_bottom\n-    in_width = value_shape[2] + pad_left + pad_right\n-\n-    # More padding so that rate divides the height and width of the input.\n-    pad_bottom_extra = (rate - in_height % rate) % rate\n-    pad_right_extra = (rate - in_width % rate) % rate\n-\n-    # The paddings argument to space_to_batch includes both padding components.\n-    space_to_batch_pad = [[pad_top, pad_bottom + pad_bottom_extra],\n-                          [pad_left, pad_right + pad_right_extra]]\n-\n-    value = array_ops.space_to_batch(input=value,\n-                                     paddings=space_to_batch_pad,\n-                                     block_size=rate)\n-\n-    value = gen_nn_ops.conv2d(input=value,\n-                              filter=filters,\n-                              strides=[1, 1, 1, 1],\n-                              padding=\"VALID\",\n-                              name=name)\n-\n-    # The crops argument to batch_to_space is just the extra padding component.\n-    batch_to_space_crop = [[0, pad_bottom_extra], [0, pad_right_extra]]\n-\n-    value = array_ops.batch_to_space(input=value,\n-                                     crops=batch_to_space_crop,\n-                                     block_size=rate)\n-\n-    return value\n+  return convolution(input=value, filter=filters, padding=padding,\n+                     dilation_rate=np.broadcast_to(rate, (2, )),\n+                     strides=strides, name=name)", "path": "tensorflow/python/ops/nn_ops.py", "position": null, "original_position": 105, "commit_id": "2cd78a9ec313b933876678d8cf1f43596e350544", "original_commit_id": "443ae29335c81caaed57bcd05e7e34a0bd8d503b", "user": {"login": "jbms", "id": 4211946, "node_id": "MDQ6VXNlcjQyMTE5NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4211946?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbms", "html_url": "https://github.com/jbms", "followers_url": "https://api.github.com/users/jbms/followers", "following_url": "https://api.github.com/users/jbms/following{/other_user}", "gists_url": "https://api.github.com/users/jbms/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbms/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbms/subscriptions", "organizations_url": "https://api.github.com/users/jbms/orgs", "repos_url": "https://api.github.com/users/jbms/repos", "events_url": "https://api.github.com/users/jbms/events{/privacy}", "received_events_url": "https://api.github.com/users/jbms/received_events", "type": "User", "site_admin": false}, "body": "Test failure is caused by reference to undefined variable strides.", "created_at": "2017-04-26T23:02:53Z", "updated_at": "2017-05-01T18:12:41Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/7545#discussion_r113582761", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7545", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/113582761"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/7545#discussion_r113582761"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7545"}}, "body_html": "<p>Test failure is caused by reference to undefined variable strides.</p>", "body_text": "Test failure is caused by reference to undefined variable strides."}