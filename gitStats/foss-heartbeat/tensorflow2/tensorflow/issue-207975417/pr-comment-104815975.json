{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/104815975", "pull_request_review_id": 25669371, "id": 104815975, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwNDgxNTk3NQ==", "diff_hunk": "@@ -914,94 +959,53 @@ def atrous_conv2d(value, filters, rate, padding, name=None):\n     ValueError: If input/output depth does not match `filters`' shape, or if\n       padding is other than `'VALID'` or `'SAME'`.\n   \"\"\"\n-  with ops.name_scope(name, \"atrous_conv2d\", [value, filters]) as name:\n-    value = ops.convert_to_tensor(value, name=\"value\")\n-    filters = ops.convert_to_tensor(filters, name=\"filters\")\n-    if not value.get_shape()[3].is_compatible_with(filters.get_shape()[2]):\n-      raise ValueError(\n-          \"value's input channels does not match filters' input channels, \"\n-          \"{} != {}\".format(value.get_shape()[3], filters.get_shape()[2]))\n-    if rate < 1:\n-      raise ValueError(\"rate {} cannot be less than one\".format(rate))\n-\n-    if rate == 1:\n-      value = gen_nn_ops.conv2d(input=value,\n-                                filter=filters,\n-                                strides=[1, 1, 1, 1],\n-                                padding=padding)\n-      return value\n-\n-    # We have two padding contributions. The first is used for converting \"SAME\"\n-    # to \"VALID\". The second is required so that the height and width of the\n-    # zero-padded value tensor are multiples of rate.\n-\n-    # Padding required to reduce to \"VALID\" convolution\n-    if padding == \"SAME\":\n-      # Handle filters whose shape is unknown during graph creation.\n-      if filters.get_shape().is_fully_defined():\n-        filter_shape = filters.get_shape().as_list()\n-      else:\n-        filter_shape = array_ops.shape(filters)\n-      filter_height, filter_width = filter_shape[0], filter_shape[1]\n-\n-      # Spatial dimensions of the filters and the upsampled filters in which we\n-      # introduce (rate - 1) zeros between consecutive filter values.\n-      filter_height_up = filter_height + (filter_height - 1) * (rate - 1)\n-      filter_width_up = filter_width + (filter_width - 1) * (rate - 1)\n-\n-      pad_height = filter_height_up - 1\n-      pad_width = filter_width_up - 1\n-\n-      # When pad_height (pad_width) is odd, we pad more to bottom (right),\n-      # following the same convention as conv2d().\n-      pad_top = pad_height // 2\n-      pad_bottom = pad_height - pad_top\n-      pad_left = pad_width // 2\n-      pad_right = pad_width - pad_left\n-    elif padding == \"VALID\":\n-      pad_top = 0\n-      pad_bottom = 0\n-      pad_left = 0\n-      pad_right = 0\n-    else:\n-      raise ValueError(\"Invalid padding\")\n-\n-    # Handle input whose shape is unknown during graph creation.\n-    if value.get_shape().is_fully_defined():\n-      value_shape = value.get_shape().as_list()\n-    else:\n-      value_shape = array_ops.shape(value)\n-\n-    in_height = value_shape[1] + pad_top + pad_bottom\n-    in_width = value_shape[2] + pad_left + pad_right\n-\n-    # More padding so that rate divides the height and width of the input.\n-    pad_bottom_extra = (rate - in_height % rate) % rate\n-    pad_right_extra = (rate - in_width % rate) % rate\n+  return convolution(input=value, filter=filters, padding=padding, dilation_rate=np.broadcast_to(rate, (2, )), strides=strides, name=name)\n \n-    # The paddings argument to space_to_batch includes both padding components.\n-    space_to_batch_pad = [[pad_top, pad_bottom + pad_bottom_extra],\n-                          [pad_left, pad_right + pad_right_extra]]\n+def atrous_conv3d(input, filter, rate, padding, strides=None, name=None):\n+  \"\"\"Atrous convolution (a.k.a. convolution with holes or dilated convolution).\n \n-    value = array_ops.space_to_batch(input=value,\n-                                     paddings=space_to_batch_pad,\n-                                     block_size=rate)\n+  Computes a 3-D atrous convolution, also known as convolution with holes or\n+  dilated convolution, given 5-D `input` and `filter` tensors. If the `rate`\n+  parameter is equal to one, it performs regular 3-D convolution. If the `rate`\n+  parameter is greater than one, it performs convolution with holes, sampling\n+  the input values every `rate` points.\n+  This is equivalent to convolving the input with a set of upsampled filters,\n+  produced by inserting `rate - 1` zeros between two consecutive values of the\n+  filters along the `height`, `width` and `depth` dimensions, hence the name atrous convolution or convolution with holes (the French word trous means holes in\n+  English).\n \n-    value = gen_nn_ops.conv2d(input=value,\n-                              filter=filters,\n-                              strides=[1, 1, 1, 1],\n-                              padding=\"VALID\",\n-                              name=name)\n+  See @{tf.nn.atrous_conv2d}\n \n-    # The crops argument to batch_to_space is just the extra padding component.\n-    batch_to_space_crop = [[0, pad_bottom_extra], [0, pad_right_extra]]\n+  Args:\n+    input: A 5-D `Tensor` of type `float`. It needs to be in the default \"NHWC\"\n+      format. Its shape is `[batch, in_height, in_width, in_depth, in_channels]`.\n+    filter: A 5-D `Tensor` with the same type as `input` and shape\n+      `[filter_height, filter_width, filter_depth, in_channels, out_channels]`. `filter`'\n+      `in_channels` dimension must match that of `input`. Atrous convolution is\n+      equivalent to standard convolution with upsampled filters with effective\n+      height `filter_height + (filter_height - 1) * (rate - 1)`, produced by\n+      inserting `rate - 1` zeros along consecutive elements across the\n+      `filter`' spatial dimensions.\n+    rate: A positive int32. The stride with which we sample input values across\n+      the `height` and `width` dimensions. Equivalently, the rate by which we\n+      upsample the filter values by inserting zeros across the `height` and\n+      `width` dimensions. In the literature, the same parameter is sometimes\n+      called `input stride` or `dilation`. Altrenatively it could be 3 element sequence denoting dilation rate in each dimension.\n+    padding: A string, either `'VALID'` or `'SAME'`. The padding algorithm.\n+    strides: Optional.  Sequence of 3 ints >= 1.  Specifies the output stride.\n+      Defaults to [1]*3.  If any value of strides is > 1, then all values of\n+      dilation_rate must be 1.\n+    name: Optional name for the returned tensor.\n \n-    value = array_ops.batch_to_space(input=value,\n-                                     crops=batch_to_space_crop,\n-                                     block_size=rate)\n+  Returns:\n+    A `Tensor` with the same type as `value`.\n \n-    return value\n+  Raises:\n+    ValueError: If input/output depth does not match `filters`' shape, or if\n+      padding is other than `'VALID'` or `'SAME'`.\n \n+  \"\"\"\n+  return convolution(input=input, filter=filter, padding=padding, dilation_rate=np.broadcast_to(rate, (3, )), strides=strides, name=name)", "path": "tensorflow/python/ops/nn_ops.py", "position": null, "original_position": 194, "commit_id": "2cd78a9ec313b933876678d8cf1f43596e350544", "original_commit_id": "6e11066713fce8eb1c89f2060a125c72324cb52f", "user": {"login": "gpapan", "id": 6232317, "node_id": "MDQ6VXNlcjYyMzIzMTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6232317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gpapan", "html_url": "https://github.com/gpapan", "followers_url": "https://api.github.com/users/gpapan/followers", "following_url": "https://api.github.com/users/gpapan/following{/other_user}", "gists_url": "https://api.github.com/users/gpapan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gpapan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gpapan/subscriptions", "organizations_url": "https://api.github.com/users/gpapan/orgs", "repos_url": "https://api.github.com/users/gpapan/repos", "events_url": "https://api.github.com/users/gpapan/events{/privacy}", "received_events_url": "https://api.github.com/users/gpapan/received_events", "type": "User", "site_admin": false}, "body": "Line >80 chars long", "created_at": "2017-03-08T00:22:46Z", "updated_at": "2017-05-01T18:12:41Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/7545#discussion_r104815975", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7545", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/104815975"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/7545#discussion_r104815975"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7545"}}, "body_html": "<p>Line &gt;80 chars long</p>", "body_text": "Line >80 chars long"}