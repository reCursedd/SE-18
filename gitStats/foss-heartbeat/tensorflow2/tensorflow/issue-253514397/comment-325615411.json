{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/325615411", "html_url": "https://github.com/tensorflow/tensorflow/pull/12668#issuecomment-325615411", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12668", "id": 325615411, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTYxNTQxMQ==", "user": {"login": "resec", "id": 4277636, "node_id": "MDQ6VXNlcjQyNzc2MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4277636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/resec", "html_url": "https://github.com/resec", "followers_url": "https://api.github.com/users/resec/followers", "following_url": "https://api.github.com/users/resec/following{/other_user}", "gists_url": "https://api.github.com/users/resec/gists{/gist_id}", "starred_url": "https://api.github.com/users/resec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/resec/subscriptions", "organizations_url": "https://api.github.com/users/resec/orgs", "repos_url": "https://api.github.com/users/resec/repos", "events_url": "https://api.github.com/users/resec/events{/privacy}", "received_events_url": "https://api.github.com/users/resec/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-29T09:55:47Z", "updated_at": "2017-08-29T10:22:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16018\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/asimshankar\">@asimshankar</a> First of all thanks for your quick response.</p>\n<p>I am not sure how this change would opens the door to security holes, but I am not a expert in this and actually, the reason I want this change is for security and performance in my case.</p>\n<p>I want to deploy my model to mobile device. and the final model size is around 100MB, and have the model zipped and encrypted and splitted into multiple files as assert before putting into the final APK. So I need to merge and decrypt and unzip the model in C/C++ first.</p>\n<p>As you can see, moving/copying 100MB across C/C++ and Java runtime for multiple times is not a good choice which leaves much memory footprint.</p>\n<p>Note: in iOS case, I really got things done much more smoothly.......</p>\n<p>Besides, I really not like the way that have the plain serialized graph existed in JVM, which is kind of easy for someone to just copy it. I understand that C/C++ is not perfect safe, but we all want more security especially the case that it would even bring better performance?</p>\n<p>I have been struggling in this for few days, and this is the simplest change I came up to achieve what I want, by opening a kind of low-level API.</p>\n<p>Just to share the situation I am facing, any advice towards a better design/solution will be really very appreciated.</p>\n<p>Besides, I believe its user's responsibility to choice what API to use and take the consequence? in the case anyone wants to be evil, a public or not descritor can hardly stop it. So maybe add some more warning doc for this constructor?</p>\n<p>In short, for better performance and more flexibility on loading graph, while leaving everything else in Java world, this is the right constructor I would like to have.</p>\n<p>Waiting for your feedback, great thanks.</p>", "body_text": "@asimshankar First of all thanks for your quick response.\nI am not sure how this change would opens the door to security holes, but I am not a expert in this and actually, the reason I want this change is for security and performance in my case.\nI want to deploy my model to mobile device. and the final model size is around 100MB, and have the model zipped and encrypted and splitted into multiple files as assert before putting into the final APK. So I need to merge and decrypt and unzip the model in C/C++ first.\nAs you can see, moving/copying 100MB across C/C++ and Java runtime for multiple times is not a good choice which leaves much memory footprint.\nNote: in iOS case, I really got things done much more smoothly.......\nBesides, I really not like the way that have the plain serialized graph existed in JVM, which is kind of easy for someone to just copy it. I understand that C/C++ is not perfect safe, but we all want more security especially the case that it would even bring better performance?\nI have been struggling in this for few days, and this is the simplest change I came up to achieve what I want, by opening a kind of low-level API.\nJust to share the situation I am facing, any advice towards a better design/solution will be really very appreciated.\nBesides, I believe its user's responsibility to choice what API to use and take the consequence? in the case anyone wants to be evil, a public or not descritor can hardly stop it. So maybe add some more warning doc for this constructor?\nIn short, for better performance and more flexibility on loading graph, while leaving everything else in Java world, this is the right constructor I would like to have.\nWaiting for your feedback, great thanks.", "body": "@asimshankar First of all thanks for your quick response.\r\n\r\nI am not sure how this change would opens the door to security holes, but I am not a expert in this and actually, the reason I want this change is for security and performance in my case. \r\n\r\nI want to deploy my model to mobile device. and the final model size is around 100MB, and have the model zipped and encrypted and splitted into multiple files as assert before putting into the final APK. So I need to merge and decrypt and unzip the model in C/C++ first. \r\n\r\nAs you can see, moving/copying 100MB across C/C++ and Java runtime for multiple times is not a good choice which leaves much memory footprint.\r\n\r\nNote: in iOS case, I really got things done much more smoothly.......\r\n\r\nBesides, I really not like the way that have the plain serialized graph existed in JVM, which is kind of easy for someone to just copy it. I understand that C/C++ is not perfect safe, but we all want more security especially the case that it would even bring better performance?\r\n\r\nI have been struggling in this for few days, and this is the simplest change I came up to achieve what I want, by opening a kind of low-level API.\r\n\r\nJust to share the situation I am facing, any advice towards a better design/solution will be really very appreciated.\r\n\r\nBesides, I believe its user's responsibility to choice what API to use and take the consequence? in the case anyone wants to be evil, a public or not descritor can hardly stop it. So maybe add some more warning doc for this constructor?\r\n\r\n In short, for better performance and more flexibility on loading graph, while leaving everything else in Java world, this is the right constructor I would like to have.\r\n\r\nWaiting for your feedback, great thanks."}