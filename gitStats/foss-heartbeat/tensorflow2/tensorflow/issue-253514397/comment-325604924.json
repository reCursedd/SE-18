{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/325604924", "html_url": "https://github.com/tensorflow/tensorflow/pull/12668#issuecomment-325604924", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12668", "id": 325604924, "node_id": "MDEyOklzc3VlQ29tbWVudDMyNTYwNDkyNA==", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "created_at": "2017-08-29T09:14:54Z", "updated_at": "2017-08-29T09:14:54Z", "author_association": "MEMBER", "body_html": "<p>Thanks for the PR, but  I am a little weary of this change. It makes a very unsafe call part of the public API which makes it very easy to incorrectly use or misuse. For example, something like <code>new Graph(1)</code> is going to crash with a segmentation fault bringing the JVM down. This also opens the door to security holes.</p>\n<p>The use case you've described above does seem a bit esoteric. Can't you create the graph in Java? Or create the graph in native code but provide a serialized form to Java? There must be a better alternative to exposing unsafe calls, particularly those that can fail in mysterious ways to a Java programmer (for example, an invalid value will not raise a Java exception, just crash the JVM).</p>", "body_text": "Thanks for the PR, but  I am a little weary of this change. It makes a very unsafe call part of the public API which makes it very easy to incorrectly use or misuse. For example, something like new Graph(1) is going to crash with a segmentation fault bringing the JVM down. This also opens the door to security holes.\nThe use case you've described above does seem a bit esoteric. Can't you create the graph in Java? Or create the graph in native code but provide a serialized form to Java? There must be a better alternative to exposing unsafe calls, particularly those that can fail in mysterious ways to a Java programmer (for example, an invalid value will not raise a Java exception, just crash the JVM).", "body": "Thanks for the PR, but  I am a little weary of this change. It makes a very unsafe call part of the public API which makes it very easy to incorrectly use or misuse. For example, something like `new Graph(1)` is going to crash with a segmentation fault bringing the JVM down. This also opens the door to security holes.\r\n\r\nThe use case you've described above does seem a bit esoteric. Can't you create the graph in Java? Or create the graph in native code but provide a serialized form to Java? There must be a better alternative to exposing unsafe calls, particularly those that can fail in mysterious ways to a Java programmer (for example, an invalid value will not raise a Java exception, just crash the JVM)."}