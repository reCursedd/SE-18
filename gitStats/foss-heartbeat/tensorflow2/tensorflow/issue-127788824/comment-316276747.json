{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/316276747", "html_url": "https://github.com/tensorflow/tensorflow/issues/823#issuecomment-316276747", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/823", "id": 316276747, "node_id": "MDEyOklzc3VlQ29tbWVudDMxNjI3Njc0Nw==", "user": {"login": "saminkhan", "id": 5326148, "node_id": "MDQ6VXNlcjUzMjYxNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5326148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saminkhan", "html_url": "https://github.com/saminkhan", "followers_url": "https://api.github.com/users/saminkhan/followers", "following_url": "https://api.github.com/users/saminkhan/following{/other_user}", "gists_url": "https://api.github.com/users/saminkhan/gists{/gist_id}", "starred_url": "https://api.github.com/users/saminkhan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saminkhan/subscriptions", "organizations_url": "https://api.github.com/users/saminkhan/orgs", "repos_url": "https://api.github.com/users/saminkhan/repos", "events_url": "https://api.github.com/users/saminkhan/events{/privacy}", "received_events_url": "https://api.github.com/users/saminkhan/received_events", "type": "User", "site_admin": false}, "created_at": "2017-07-19T05:27:40Z", "updated_at": "2017-07-19T15:39:46Z", "author_association": "NONE", "body_html": "<p>Is there any best practice yet to retrieve shadow variable mappings for inference time?</p>\n<p>Here's a custom function I'm using to get shadow variable mappings instead of regular ones (returns regular variable mapping if shadow variable doesn't exist)....</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">get_shadow_variables</span>(<span class=\"pl-smi\">decay_r</span>):\n    names_set, shadow_vars <span class=\"pl-k\">=</span> <span class=\"pl-c1\">set</span>(), {}\n\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> assumption: shadow variable names appear after</span>\n    <span class=\"pl-c\"><span class=\"pl-c\">#</span> regular variable names in alphabetical list</span>\n    sorted_items <span class=\"pl-k\">=</span> <span class=\"pl-c1\">sorted</span>(tf.train.ExponentialMovingAverage(\n        decay_r).variables_to_restore().items(), <span class=\"pl-v\">reverse</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\n\n    <span class=\"pl-k\">for</span> key, val <span class=\"pl-k\">in</span> sorted_items:\n        <span class=\"pl-k\">if</span> val.name <span class=\"pl-k\">not</span> <span class=\"pl-k\">in</span> names_set:\n            names_set.add(val.name)\n            shadow_vars[key] <span class=\"pl-k\">=</span> val\n\n    <span class=\"pl-k\">return</span> shadow_vars</pre></div>", "body_text": "Is there any best practice yet to retrieve shadow variable mappings for inference time?\nHere's a custom function I'm using to get shadow variable mappings instead of regular ones (returns regular variable mapping if shadow variable doesn't exist)....\ndef get_shadow_variables(decay_r):\n    names_set, shadow_vars = set(), {}\n\n    # assumption: shadow variable names appear after\n    # regular variable names in alphabetical list\n    sorted_items = sorted(tf.train.ExponentialMovingAverage(\n        decay_r).variables_to_restore().items(), reverse=True)\n\n    for key, val in sorted_items:\n        if val.name not in names_set:\n            names_set.add(val.name)\n            shadow_vars[key] = val\n\n    return shadow_vars", "body": "Is there any best practice yet to retrieve shadow variable mappings for inference time?\r\n\r\nHere's a custom function I'm using to get shadow variable mappings instead of regular ones (returns regular variable mapping if shadow variable doesn't exist)....\r\n\r\n```python \r\ndef get_shadow_variables(decay_r):\r\n    names_set, shadow_vars = set(), {}\r\n\r\n    # assumption: shadow variable names appear after\r\n    # regular variable names in alphabetical list\r\n    sorted_items = sorted(tf.train.ExponentialMovingAverage(\r\n        decay_r).variables_to_restore().items(), reverse=True)\r\n\r\n    for key, val in sorted_items:\r\n        if val.name not in names_set:\r\n            names_set.add(val.name)\r\n            shadow_vars[key] = val\r\n\r\n    return shadow_vars\r\n```"}