{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/133317050", "pull_request_review_id": 56478281, "id": 133317050, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMzMxNzA1MA==", "diff_hunk": "@@ -0,0 +1,578 @@\n+/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+#include \"tensorflow/contrib/s3/s3_file_system.h\"\n+#include \"tensorflow/contrib/s3/s3_crypto.h\"\n+#include \"tensorflow/core/lib/io/path.h\"\n+\n+#include <aws/core/Aws.h>\n+#include <aws/core/utils/FileSystemUtils.h>\n+#include <aws/s3/S3Client.h>\n+#include <aws/s3/S3Errors.h>\n+#include <aws/s3/model/CopyObjectRequest.h>\n+#include <aws/s3/model/DeleteObjectRequest.h>\n+#include <aws/s3/model/GetObjectRequest.h>\n+#include <aws/s3/model/HeadBucketRequest.h>\n+#include <aws/s3/model/HeadObjectRequest.h>\n+#include <aws/s3/model/ListObjectsRequest.h>\n+#include <aws/s3/model/PutObjectRequest.h>\n+\n+#include <cstdlib>\n+#include <mutex>\n+\n+namespace tensorflow {\n+\n+static const char* S3FileSystemAllocationTag = \"S3FileSystemAllocation\";\n+static const size_t S3ReadAppendableFileBufferSize = 1024 * 1024;\n+static const int S3GetChildrenMaxKeys = 100;\n+\n+Aws::Client::ClientConfiguration& GetDefaultClientConfig() {\n+  static std::mutex cfg_lock;\n+  static bool init(false);\n+  static Aws::Client::ClientConfiguration cfg;\n+\n+  std::lock_guard<std::mutex> lock(cfg_lock);\n+\n+  if (!init) {\n+    const char* endpoint = getenv(\"TFS3_ENDPOINT\");\n+    if (endpoint) {\n+      cfg.endpointOverride = Aws::String(endpoint);\n+    }\n+    const char* region = getenv(\"TFS3_REGION\");\n+    if (region) {\n+      cfg.region = Aws::String(region);\n+    }\n+    const char* use_https = getenv(\"TFS3_USE_HTTPS\");\n+    if (use_https) {\n+      if (use_https[0] == '0') {\n+        cfg.scheme = Aws::Http::Scheme::HTTP;\n+      } else {\n+        cfg.scheme = Aws::Http::Scheme::HTTPS;\n+      }\n+    }\n+    const char* verify_ssl = getenv(\"TFS3_VERIFY_SSL\");\n+    if (verify_ssl) {\n+      if (verify_ssl[0] == '0') {\n+        cfg.verifySSL = false;\n+      } else {\n+        cfg.verifySSL = true;\n+      }\n+    }\n+\n+    init = true;\n+  }\n+\n+  return cfg;\n+};\n+\n+Status ParseS3Path(const string& fname, bool empty_object_ok, string* bucket,\n+                   string* object) {\n+  if (!bucket || !object) {\n+    return errors::Internal(\"bucket and object cannot be null.\");\n+  }\n+  StringPiece scheme, bucketp, objectp;\n+  io::ParseURI(fname, &scheme, &bucketp, &objectp);\n+  if (scheme != \"s3\") {\n+    return errors::InvalidArgument(\"S3 path doesn't start with 's3://': \",\n+                                   fname);\n+  }\n+  *bucket = bucketp.ToString();\n+  if (bucket->empty() || *bucket == \".\") {\n+    return errors::InvalidArgument(\"S3 path doesn't contain a bucket name: \",\n+                                   fname);\n+  }\n+  objectp.Consume(\"/\");\n+  *object = objectp.ToString();\n+  if (!empty_object_ok && object->empty()) {\n+    return errors::InvalidArgument(\"S3 path doesn't contain an object name: \",\n+                                   fname);\n+  }\n+  return Status::OK();\n+}\n+\n+class S3RandomAccessFile : public RandomAccessFile {\n+ public:\n+  S3RandomAccessFile(const string& bucket, const string& object)\n+      : bucket_(bucket), object_(object) {}\n+\n+  Status Read(uint64 offset, size_t n, StringPiece* result,\n+              char* scratch) const override {\n+    Aws::S3::S3Client s3Client(GetDefaultClientConfig());\n+    Aws::S3::Model::GetObjectRequest getObjectRequest;\n+    getObjectRequest.WithBucket(bucket_.c_str()).WithKey(object_.c_str());\n+    char buffer[50];", "path": "tensorflow/contrib/s3/s3_file_system.cc", "position": null, "original_position": 114, "commit_id": "2babd181e9899907f5dd018cc1ca84662c650c26", "original_commit_id": "bb65ec0023eb2264f8c24338d667820f47cd3749", "user": {"login": "jhseu", "id": 170179, "node_id": "MDQ6VXNlcjE3MDE3OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/170179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhseu", "html_url": "https://github.com/jhseu", "followers_url": "https://api.github.com/users/jhseu/followers", "following_url": "https://api.github.com/users/jhseu/following{/other_user}", "gists_url": "https://api.github.com/users/jhseu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhseu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhseu/subscriptions", "organizations_url": "https://api.github.com/users/jhseu/orgs", "repos_url": "https://api.github.com/users/jhseu/repos", "events_url": "https://api.github.com/users/jhseu/events{/privacy}", "received_events_url": "https://api.github.com/users/jhseu/received_events", "type": "User", "site_admin": false}, "body": "Use a string instead, and convert to Aws::String below? Many implementations will inline small strings on the stack.", "created_at": "2017-08-15T22:10:44Z", "updated_at": "2017-09-15T01:53:03Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11089#discussion_r133317050", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11089", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/133317050"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11089#discussion_r133317050"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11089"}}, "body_html": "<p>Use a string instead, and convert to Aws::String below? Many implementations will inline small strings on the stack.</p>", "body_text": "Use a string instead, and convert to Aws::String below? Many implementations will inline small strings on the stack."}