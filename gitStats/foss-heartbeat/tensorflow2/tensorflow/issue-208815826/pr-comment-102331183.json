{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/102331183", "pull_request_review_id": 23078457, "id": 102331183, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjMzMTE4Mw==", "diff_hunk": "@@ -0,0 +1,101 @@\n+/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+#include <limits>\n+#include <memory>\n+\n+#include \"tensorflow/c/c_api.h\"\n+#include \"tensorflow/java/src/main/native/exception_jni.h\"\n+#include \"tensorflow/java/src/main/native/saved_model_bundle_jni.h\"\n+\n+namespace {\n+\n+}  // namespace\n+JNIEXPORT jobject JNICALL Java_org_tensorflow_SavedModelBundle_load(JNIEnv * env,\n+                                                                    jclass clazz,\n+                                                                    jstring export_dir,\n+                                                                    jobjectArray tags) {\n+\n+  TF_Status* status = TF_NewStatus();\n+  jobject bundle = nullptr;\n+\n+  // allocate parameters for TF_LoadSessionFromSavedModel\n+  TF_SessionOptions* opts = TF_NewSessionOptions();\n+  const TF_Buffer* crun_options = nullptr;\n+  const char* cexport_dir = env->GetStringUTFChars(export_dir, nullptr);\n+  std::unique_ptr<const char* []> tags_ptrs;\n+  size_t tags_len = env->GetArrayLength(tags);\n+  tags_ptrs.reset(new const char*[tags_len]);\n+  for (size_t i = 0; i < tags_len; ++i) {\n+    jstring tag = static_cast<jstring>(env->GetObjectArrayElement(tags, i));\n+    tags_ptrs[i] = env->GetStringUTFChars(tag, nullptr);\n+    env->DeleteLocalRef(tag);\n+  }\n+\n+  // load the session\n+  TF_Graph* graph = TF_NewGraph();\n+  TF_Buffer* metagraph_def = TF_NewBuffer();\n+  TF_Session* session = TF_LoadSessionFromSavedModel(opts, crun_options, cexport_dir,\n+                                                     tags_ptrs.get(), tags_len, graph,\n+                                                     metagraph_def, status);\n+\n+  // release the parameters\n+  TF_DeleteSessionOptions(opts);\n+  env->ReleaseStringUTFChars(export_dir, cexport_dir);\n+  for (size_t i = 0; i < tags_len; ++i) {\n+    jstring tag = static_cast<jstring>(env->GetObjectArrayElement(tags, i));\n+    env->ReleaseStringUTFChars(tag, tags_ptrs[i]);\n+    env->DeleteLocalRef(tag);\n+  }\n+\n+  // handle the result\n+  if (throwExceptionIfNotOK(env, status)) {\n+    // sizeof(jsize) is less than sizeof(size_t) on some platforms.\n+    if (metagraph_def->length > std::numeric_limits<jint>::max()) {\n+      throwException(env, kIndexOutOfBoundsException,\n+                     \"GraphDef is too large to serialize into a byte[] array\");\n+    }\n+    else {\n+        static_assert(sizeof(jbyte) == 1, \"unexpected size of the jbyte type\");\n+        jint jmetagraph_len = static_cast<jint>(metagraph_def->length);", "path": "tensorflow/java/src/main/native/saved_model_bundle_jni.cc", "position": null, "original_position": 72, "commit_id": "06faf0e01d6f70874ce2efc58110c505cb04129f", "original_commit_id": "93c11ab6ac8a0da2aa22cd401e77fa11cca6c10f", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "jsize instead of jint?", "created_at": "2017-02-21T22:08:49Z", "updated_at": "2017-02-24T07:30:06Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/7688#discussion_r102331183", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7688", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/102331183"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/7688#discussion_r102331183"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/7688"}}, "body_html": "<p>jsize instead of jint?</p>", "body_text": "jsize instead of jint?"}