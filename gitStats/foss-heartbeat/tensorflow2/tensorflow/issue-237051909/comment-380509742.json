{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/380509742", "html_url": "https://github.com/tensorflow/tensorflow/issues/10837#issuecomment-380509742", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/10837", "id": 380509742, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDUwOTc0Mg==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-11T16:14:00Z", "updated_at": "2018-04-11T16:14:00Z", "author_association": "CONTRIBUTOR", "body_html": "<p>It looks like the initial Python changes landed as part of <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/9db93a8db8fafee8092b30ae33a26248867e9b26/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/9db93a8db8fafee8092b30ae33a26248867e9b26\"><tt>9db93a8</tt></a>, and the final C++ change landed in <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/49c6489368ea98feb3259d54a10c6fdfd01caf44/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/49c6489368ea98feb3259d54a10c6fdfd01caf44\"><tt>49c6489</tt></a>. You can play with the private <code>Session._make_callable_from_options()</code> API, but be warned that it's still private so it might change. Example code here:</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/f9c5e71104cb30583127fdc918591cc7604f17ca/tensorflow/python/client/session_test.py#L1374-L1384\">tensorflow/tensorflow/python/client/session_test.py</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n        Lines 1374 to 1384\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/f9c5e71104cb30583127fdc918591cc7604f17ca\">f9c5e71</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L1374\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1374\"></td>\n          <td id=\"LC1374\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> <span class=\"pl-k\">def</span> <span class=\"pl-en\">testOptimizedMakeCallable</span>(<span class=\"pl-smi\"><span class=\"pl-smi\">self</span></span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1375\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1375\"></td>\n          <td id=\"LC1375\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">   <span class=\"pl-k\">with</span> session.Session() <span class=\"pl-k\">as</span> sess: </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1376\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1376\"></td>\n          <td id=\"LC1376\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     ph <span class=\"pl-k\">=</span> array_ops.placeholder(dtypes.float32) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1377\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1377\"></td>\n          <td id=\"LC1377\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     a <span class=\"pl-k\">=</span> math_ops.add(ph, <span class=\"pl-c1\">1.0</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1378\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1378\"></td>\n          <td id=\"LC1378\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     callable_opts <span class=\"pl-k\">=</span> config_pb2.CallableOptions() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1379\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1379\"></td>\n          <td id=\"LC1379\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     callable_opts.feed.append(ph.name) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1380\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1380\"></td>\n          <td id=\"LC1380\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     callable_opts.fetch.append(a.name) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1381\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1381\"></td>\n          <td id=\"LC1381\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">     <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">3</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1382\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1382\"></td>\n          <td id=\"LC1382\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       callable_fn <span class=\"pl-k\">=</span> sess._make_callable_from_options(callable_opts) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1383\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1383\"></td>\n          <td id=\"LC1383\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">       <span class=\"pl-k\">for</span> _ <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">5</span>): </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L1384\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"1384\"></td>\n          <td id=\"LC1384\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\">         <span class=\"pl-c1\">self</span>.assertEqual([<span class=\"pl-c1\">2.0</span>], callable_fn(np.array(<span class=\"pl-c1\">1.0</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32))) </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>The eventual plan is to replace the implementation of <code>Session.make_callable()</code> with this new mechanism and expose tensor connections as an option in that API.</p>", "body_text": "It looks like the initial Python changes landed as part of 9db93a8, and the final C++ change landed in 49c6489. You can play with the private Session._make_callable_from_options() API, but be warned that it's still private so it might change. Example code here:\n\n  \n    \n      tensorflow/tensorflow/python/client/session_test.py\n    \n    \n        Lines 1374 to 1384\n      in\n      f9c5e71\n    \n    \n    \n    \n\n        \n          \n           def testOptimizedMakeCallable(self): \n        \n\n        \n          \n             with session.Session() as sess: \n        \n\n        \n          \n               ph = array_ops.placeholder(dtypes.float32) \n        \n\n        \n          \n               a = math_ops.add(ph, 1.0) \n        \n\n        \n          \n               callable_opts = config_pb2.CallableOptions() \n        \n\n        \n          \n               callable_opts.feed.append(ph.name) \n        \n\n        \n          \n               callable_opts.fetch.append(a.name) \n        \n\n        \n          \n               for _ in range(3): \n        \n\n        \n          \n                 callable_fn = sess._make_callable_from_options(callable_opts) \n        \n\n        \n          \n                 for _ in range(5): \n        \n\n        \n          \n                   self.assertEqual([2.0], callable_fn(np.array(1.0, dtype=np.float32))) \n        \n    \n  \n\n\nThe eventual plan is to replace the implementation of Session.make_callable() with this new mechanism and expose tensor connections as an option in that API.", "body": "It looks like the initial Python changes landed as part of 9db93a8db8fafee8092b30ae33a26248867e9b26, and the final C++ change landed in 49c6489368ea98feb3259d54a10c6fdfd01caf44. You can play with the private `Session._make_callable_from_options()` API, but be warned that it's still private so it might change. Example code here:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/f9c5e71104cb30583127fdc918591cc7604f17ca/tensorflow/python/client/session_test.py#L1374-L1384\r\n\r\nThe eventual plan is to replace the implementation of `Session.make_callable()` with this new mechanism and expose tensor connections as an option in that API."}