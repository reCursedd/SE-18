{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13137", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13137/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13137/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13137/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13137", "id": 258654610, "node_id": "MDU6SXNzdWUyNTg2NTQ2MTA=", "number": 13137, "title": "RNN cells parameter naming inconsistency", "user": {"login": "w4nderlust", "id": 349256, "node_id": "MDQ6VXNlcjM0OTI1Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/349256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/w4nderlust", "html_url": "https://github.com/w4nderlust", "followers_url": "https://api.github.com/users/w4nderlust/followers", "following_url": "https://api.github.com/users/w4nderlust/following{/other_user}", "gists_url": "https://api.github.com/users/w4nderlust/gists{/gist_id}", "starred_url": "https://api.github.com/users/w4nderlust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/w4nderlust/subscriptions", "organizations_url": "https://api.github.com/users/w4nderlust/orgs", "repos_url": "https://api.github.com/users/w4nderlust/repos", "events_url": "https://api.github.com/users/w4nderlust/events{/privacy}", "received_events_url": "https://api.github.com/users/w4nderlust/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-18T23:49:57Z", "updated_at": "2017-09-23T03:30:08Z", "closed_at": "2017-09-23T03:30:08Z", "author_association": "NONE", "body_html": "<p>In most RNN cells the size is spified by the <code>num_units</code> parameter.<br>\nThis is true for LSTMCell, LSTMBlockCell and GRUCell.<br>\nFor GRUBlockCell the same parameter is called <code>cell_size</code>.<br>\nThis discrepancy could be problematic in some cases like this code I'm using to create a RNN cell depending on a string parameter passed by the user:</p>\n<pre><code>def get_cell_fn(cell_type):\n    if cell_type == 'rnn':\n        cell_fn = tf.nn.rnn_cell.BasicRNNCell\n    elif cell_type == 'lstm_basic':\n        cell_fn = tf.nn.rnn_cell.BasicLSTMCell\n    elif cell_type == 'lstm_basic_ln':\n        cell_fn = tf.contrib.rnn.LayerNormBasicLSTMCell\n    elif cell_type == 'lstm_block':\n        cell_fn = tf.contrib.rnn.LSTMBlockCell\n    elif cell_type == 'lstm':\n        cell_fn = tf.nn.rnn_cell.LSTMCell\n    elif cell_type == 'gru':\n        cell_fn = tf.nn.rnn_cell.GRUCell\n    elif cell_type == 'gru_block':\n        # Faster version of GRU (25% faster in my tests)\n        cell_fn = tf.contrib.rnn.GRUBlockCell\n    else:\n        cell_fn = tf.nn.rnn_cell.BasicRNNCell\n    return cell_fn\n\ncell = get_cell_fn(cell_type)(num_units=256)\n</code></pre>\n<p>As this will return an error in case of GRUBlockCell.</p>\n<p>The solution is just renaming that parameter and possibly add **kwargs to all cell constructors,as right now only RNNCell has **kwargs.</p>", "body_text": "In most RNN cells the size is spified by the num_units parameter.\nThis is true for LSTMCell, LSTMBlockCell and GRUCell.\nFor GRUBlockCell the same parameter is called cell_size.\nThis discrepancy could be problematic in some cases like this code I'm using to create a RNN cell depending on a string parameter passed by the user:\ndef get_cell_fn(cell_type):\n    if cell_type == 'rnn':\n        cell_fn = tf.nn.rnn_cell.BasicRNNCell\n    elif cell_type == 'lstm_basic':\n        cell_fn = tf.nn.rnn_cell.BasicLSTMCell\n    elif cell_type == 'lstm_basic_ln':\n        cell_fn = tf.contrib.rnn.LayerNormBasicLSTMCell\n    elif cell_type == 'lstm_block':\n        cell_fn = tf.contrib.rnn.LSTMBlockCell\n    elif cell_type == 'lstm':\n        cell_fn = tf.nn.rnn_cell.LSTMCell\n    elif cell_type == 'gru':\n        cell_fn = tf.nn.rnn_cell.GRUCell\n    elif cell_type == 'gru_block':\n        # Faster version of GRU (25% faster in my tests)\n        cell_fn = tf.contrib.rnn.GRUBlockCell\n    else:\n        cell_fn = tf.nn.rnn_cell.BasicRNNCell\n    return cell_fn\n\ncell = get_cell_fn(cell_type)(num_units=256)\n\nAs this will return an error in case of GRUBlockCell.\nThe solution is just renaming that parameter and possibly add **kwargs to all cell constructors,as right now only RNNCell has **kwargs.", "body": "In most RNN cells the size is spified by the `num_units` parameter.\r\nThis is true for LSTMCell, LSTMBlockCell and GRUCell.\r\nFor GRUBlockCell the same parameter is called `cell_size`.\r\nThis discrepancy could be problematic in some cases like this code I'm using to create a RNN cell depending on a string parameter passed by the user:\r\n\r\n```\r\ndef get_cell_fn(cell_type):\r\n    if cell_type == 'rnn':\r\n        cell_fn = tf.nn.rnn_cell.BasicRNNCell\r\n    elif cell_type == 'lstm_basic':\r\n        cell_fn = tf.nn.rnn_cell.BasicLSTMCell\r\n    elif cell_type == 'lstm_basic_ln':\r\n        cell_fn = tf.contrib.rnn.LayerNormBasicLSTMCell\r\n    elif cell_type == 'lstm_block':\r\n        cell_fn = tf.contrib.rnn.LSTMBlockCell\r\n    elif cell_type == 'lstm':\r\n        cell_fn = tf.nn.rnn_cell.LSTMCell\r\n    elif cell_type == 'gru':\r\n        cell_fn = tf.nn.rnn_cell.GRUCell\r\n    elif cell_type == 'gru_block':\r\n        # Faster version of GRU (25% faster in my tests)\r\n        cell_fn = tf.contrib.rnn.GRUBlockCell\r\n    else:\r\n        cell_fn = tf.nn.rnn_cell.BasicRNNCell\r\n    return cell_fn\r\n\r\ncell = get_cell_fn(cell_type)(num_units=256)\r\n```\r\n\r\nAs this will return an error in case of GRUBlockCell.\r\n\r\nThe solution is just renaming that parameter and possibly add **kwargs to all cell constructors,as right now only RNNCell has **kwargs."}