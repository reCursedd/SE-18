{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/159845133", "html_url": "https://github.com/tensorflow/tensorflow/issues/342#issuecomment-159845133", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/342", "id": 159845133, "node_id": "MDEyOklzc3VlQ29tbWVudDE1OTg0NTEzMw==", "user": {"login": "chenghuige", "id": 6323467, "node_id": "MDQ6VXNlcjYzMjM0Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6323467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenghuige", "html_url": "https://github.com/chenghuige", "followers_url": "https://api.github.com/users/chenghuige/followers", "following_url": "https://api.github.com/users/chenghuige/following{/other_user}", "gists_url": "https://api.github.com/users/chenghuige/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenghuige/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenghuige/subscriptions", "organizations_url": "https://api.github.com/users/chenghuige/orgs", "repos_url": "https://api.github.com/users/chenghuige/repos", "events_url": "https://api.github.com/users/chenghuige/events{/privacy}", "received_events_url": "https://api.github.com/users/chenghuige/received_events", "type": "User", "site_admin": false}, "created_at": "2015-11-26T08:22:00Z", "updated_at": "2015-11-26T08:22:00Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=15904123\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/georgedahl\">@georgedahl</a><br>\nX is sparse,w_h, w_o is dense</p>\n<p>X = tf.placeholder(\"float\", [None, num_features]) # create symbolic variables</p>\n<p>Y = tf.placeholder(\"float\", [None, 1])</p>\n<p>w_h = init_weights([num_features, hidden_size]) # create symbolic variables</p>\n<p>w_o = init_weights([hidden_size, 1])</p>\n<p>def model(X, w_h, w_o):</p>\n<p>h = tf.nn.sigmoid(tf.matmul(X, w_h)) # this is a basic mlp, think 2 stacked logistic regressions</p>\n<p>return tf.matmul(h, w_o) # note that we dont take the softmax at the end because our cost fn does that for us</p>", "body_text": "@georgedahl\nX is sparse,w_h, w_o is dense\nX = tf.placeholder(\"float\", [None, num_features]) # create symbolic variables\nY = tf.placeholder(\"float\", [None, 1])\nw_h = init_weights([num_features, hidden_size]) # create symbolic variables\nw_o = init_weights([hidden_size, 1])\ndef model(X, w_h, w_o):\nh = tf.nn.sigmoid(tf.matmul(X, w_h)) # this is a basic mlp, think 2 stacked logistic regressions\nreturn tf.matmul(h, w_o) # note that we dont take the softmax at the end because our cost fn does that for us", "body": "@georgedahl \nX is sparse,w_h, w_o is dense\n\nX = tf.placeholder(\"float\", [None, num_features]) # create symbolic variables\n\nY = tf.placeholder(\"float\", [None, 1])\n\nw_h = init_weights([num_features, hidden_size]) # create symbolic variables\n\nw_o = init_weights([hidden_size, 1])\n\ndef model(X, w_h, w_o):\n\nh = tf.nn.sigmoid(tf.matmul(X, w_h)) # this is a basic mlp, think 2 stacked logistic regressions\n\nreturn tf.matmul(h, w_o) # note that we dont take the softmax at the end because our cost fn does that for us\n"}