{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17426", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17426/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17426/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17426/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/17426", "id": 302177834, "node_id": "MDU6SXNzdWUzMDIxNzc4MzQ=", "number": 17426, "title": "tf-slim resnet-50 pretrained model get wrong results when inference", "user": {"login": "auroua", "id": 2869412, "node_id": "MDQ6VXNlcjI4Njk0MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2869412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/auroua", "html_url": "https://github.com/auroua", "followers_url": "https://api.github.com/users/auroua/followers", "following_url": "https://api.github.com/users/auroua/following{/other_user}", "gists_url": "https://api.github.com/users/auroua/gists{/gist_id}", "starred_url": "https://api.github.com/users/auroua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/auroua/subscriptions", "organizations_url": "https://api.github.com/users/auroua/orgs", "repos_url": "https://api.github.com/users/auroua/repos", "events_url": "https://api.github.com/users/auroua/events{/privacy}", "received_events_url": "https://api.github.com/users/auroua/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 473184161, "node_id": "MDU6TGFiZWw0NzMxODQxNjE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:support", "name": "type:support", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatianashp", "id": 986732, "node_id": "MDQ6VXNlcjk4NjczMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/986732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatianashp", "html_url": "https://github.com/tatianashp", "followers_url": "https://api.github.com/users/tatianashp/followers", "following_url": "https://api.github.com/users/tatianashp/following{/other_user}", "gists_url": "https://api.github.com/users/tatianashp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatianashp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatianashp/subscriptions", "organizations_url": "https://api.github.com/users/tatianashp/orgs", "repos_url": "https://api.github.com/users/tatianashp/repos", "events_url": "https://api.github.com/users/tatianashp/events{/privacy}", "received_events_url": "https://api.github.com/users/tatianashp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2018-03-05T05:38:44Z", "updated_at": "2018-04-05T15:12:30Z", "closed_at": "2018-04-05T00:39:36Z", "author_association": "NONE", "body_html": "<p>I have asked this question on stackoverflow, but no one answer. Does any can help me.<br>\nThe question link to stackoverflow is <a href=\"https://stackoverflow.com/questions/49094123/tf-slim-resnet-pretrained-model-cant-get-correct-results\" rel=\"nofollow\">here</a>.<br>\nThe following is the code I used to do inference.The image preprocess method following this issue <a href=\"https://github.com/tensorflow/models/issues/2217\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/models/issues/2217/hovercard\">ResNet pre-processing: VGG or Inception?</a></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow.contrib.slim.nets <span class=\"pl-k\">as</span> nets\n<span class=\"pl-k\">import</span> imagenet\n<span class=\"pl-k\">import</span> urllib.request\n<span class=\"pl-k\">from</span> preprocessing <span class=\"pl-k\">import</span> inception_preprocessing\n<span class=\"pl-k\">import</span> matplotlib.pyplot <span class=\"pl-k\">as</span> plt\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\nslim <span class=\"pl-k\">=</span> tf.contrib.slim\nresnet <span class=\"pl-k\">=</span> nets.resnet_v1\n\n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">__name__</span> <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>__main__<span class=\"pl-pds\">'</span></span>:\n    ckpt_file_path <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>../model_weights/resnet_v1_50.ckpt<span class=\"pl-pds\">'</span></span>\n    url <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://upload.wikimedia.org/wikipedia/commons/7/70/EnglishCockerSpaniel_simon.jpg<span class=\"pl-pds\">'</span></span>\n    image_string <span class=\"pl-k\">=</span> urllib.request.urlopen(url).read()\n    image <span class=\"pl-k\">=</span> tf.image.decode_jpeg(image_string, <span class=\"pl-v\">channels</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>)\n    processed_image <span class=\"pl-k\">=</span> inception_preprocessing.preprocess_image(image, <span class=\"pl-c1\">224</span>, <span class=\"pl-c1\">224</span>, <span class=\"pl-v\">is_training</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n    processed_images <span class=\"pl-k\">=</span> tf.expand_dims(processed_image, <span class=\"pl-c1\">0</span>)\n    <span class=\"pl-k\">with</span> slim.arg_scope(nets.resnet_utils.resnet_arg_scope()):\n        resnet_50, end_points <span class=\"pl-k\">=</span> resnet.resnet_v1_50(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>processed_images, <span class=\"pl-v\">num_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1000</span>, <span class=\"pl-v\">scope</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>resnet_v1_50<span class=\"pl-pds\">'</span></span>)\n        prob <span class=\"pl-k\">=</span> tf.squeeze(resnet_50, <span class=\"pl-v\">axis</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>])\n    probabilities <span class=\"pl-k\">=</span> tf.nn.softmax(prob, <span class=\"pl-v\">dim</span><span class=\"pl-k\">=</span><span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>)\n    sess <span class=\"pl-k\">=</span> tf.Session()\n    saver <span class=\"pl-k\">=</span> tf.train.Saver()\n    saver.restore(sess, ckpt_file_path)\n    np_image, results <span class=\"pl-k\">=</span> sess.run([image, probabilities])\n    results <span class=\"pl-k\">=</span> results[<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>:]\n\n    plt.figure()\n    plt.imshow(np_image.astype(np.uint8))\n    plt.axis(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>off<span class=\"pl-pds\">'</span></span>)\n    plt.show()\n\n    sorted_inds <span class=\"pl-k\">=</span> [i[<span class=\"pl-c1\">0</span>] <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">sorted</span>(<span class=\"pl-c1\">enumerate</span>(<span class=\"pl-k\">-</span>results), <span class=\"pl-v\">key</span><span class=\"pl-k\">=</span><span class=\"pl-k\">lambda</span> <span class=\"pl-smi\">x</span>: x[<span class=\"pl-c1\">1</span>])]\n    names <span class=\"pl-k\">=</span> imagenet.create_readable_names_for_imagenet_labels()\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">5</span>):\n        index <span class=\"pl-k\">=</span> sorted_inds[i]\n        <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Probability <span class=\"pl-c1\">%0.2f%%</span> =&gt; [<span class=\"pl-c1\">%s</span>]<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> (results[index] <span class=\"pl-k\">*</span> <span class=\"pl-c1\">100</span>, names[index]))</pre></div>\n<p>The following is result:</p>\n<pre><code>Probability 1.00% =&gt; [moving van]\nProbability 0.69% =&gt; [television, television system]\nProbability 0.63% =&gt; [English foxhound]\nProbability 0.63% =&gt; [beagle]\nProbability 0.61% =&gt; [German short-haired pointer]\n</code></pre>", "body_text": "I have asked this question on stackoverflow, but no one answer. Does any can help me.\nThe question link to stackoverflow is here.\nThe following is the code I used to do inference.The image preprocess method following this issue ResNet pre-processing: VGG or Inception?\nimport tensorflow as tf\nimport tensorflow.contrib.slim.nets as nets\nimport imagenet\nimport urllib.request\nfrom preprocessing import inception_preprocessing\nimport matplotlib.pyplot as plt\nimport numpy as np\nslim = tf.contrib.slim\nresnet = nets.resnet_v1\n\nif __name__ == '__main__':\n    ckpt_file_path = '../model_weights/resnet_v1_50.ckpt'\n    url = 'https://upload.wikimedia.org/wikipedia/commons/7/70/EnglishCockerSpaniel_simon.jpg'\n    image_string = urllib.request.urlopen(url).read()\n    image = tf.image.decode_jpeg(image_string, channels=3)\n    processed_image = inception_preprocessing.preprocess_image(image, 224, 224, is_training=False)\n    processed_images = tf.expand_dims(processed_image, 0)\n    with slim.arg_scope(nets.resnet_utils.resnet_arg_scope()):\n        resnet_50, end_points = resnet.resnet_v1_50(inputs=processed_images, num_classes=1000, scope='resnet_v1_50')\n        prob = tf.squeeze(resnet_50, axis=[1, 2])\n    probabilities = tf.nn.softmax(prob, dim=-1)\n    sess = tf.Session()\n    saver = tf.train.Saver()\n    saver.restore(sess, ckpt_file_path)\n    np_image, results = sess.run([image, probabilities])\n    results = results[0, 0:]\n\n    plt.figure()\n    plt.imshow(np_image.astype(np.uint8))\n    plt.axis('off')\n    plt.show()\n\n    sorted_inds = [i[0] for i in sorted(enumerate(-results), key=lambda x: x[1])]\n    names = imagenet.create_readable_names_for_imagenet_labels()\n    for i in range(5):\n        index = sorted_inds[i]\n        print('Probability %0.2f%% => [%s]' % (results[index] * 100, names[index]))\nThe following is result:\nProbability 1.00% => [moving van]\nProbability 0.69% => [television, television system]\nProbability 0.63% => [English foxhound]\nProbability 0.63% => [beagle]\nProbability 0.61% => [German short-haired pointer]", "body": "I have asked this question on stackoverflow, but no one answer. Does any can help me.\r\nThe question link to stackoverflow is [here](https://stackoverflow.com/questions/49094123/tf-slim-resnet-pretrained-model-cant-get-correct-results).\r\nThe following is the code I used to do inference.The image preprocess method following this issue [ResNet pre-processing: VGG or Inception?](https://github.com/tensorflow/models/issues/2217)\r\n```Python\r\nimport tensorflow as tf\r\nimport tensorflow.contrib.slim.nets as nets\r\nimport imagenet\r\nimport urllib.request\r\nfrom preprocessing import inception_preprocessing\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nslim = tf.contrib.slim\r\nresnet = nets.resnet_v1\r\n\r\nif __name__ == '__main__':\r\n    ckpt_file_path = '../model_weights/resnet_v1_50.ckpt'\r\n    url = 'https://upload.wikimedia.org/wikipedia/commons/7/70/EnglishCockerSpaniel_simon.jpg'\r\n    image_string = urllib.request.urlopen(url).read()\r\n    image = tf.image.decode_jpeg(image_string, channels=3)\r\n    processed_image = inception_preprocessing.preprocess_image(image, 224, 224, is_training=False)\r\n    processed_images = tf.expand_dims(processed_image, 0)\r\n    with slim.arg_scope(nets.resnet_utils.resnet_arg_scope()):\r\n        resnet_50, end_points = resnet.resnet_v1_50(inputs=processed_images, num_classes=1000, scope='resnet_v1_50')\r\n        prob = tf.squeeze(resnet_50, axis=[1, 2])\r\n    probabilities = tf.nn.softmax(prob, dim=-1)\r\n    sess = tf.Session()\r\n    saver = tf.train.Saver()\r\n    saver.restore(sess, ckpt_file_path)\r\n    np_image, results = sess.run([image, probabilities])\r\n    results = results[0, 0:]\r\n\r\n    plt.figure()\r\n    plt.imshow(np_image.astype(np.uint8))\r\n    plt.axis('off')\r\n    plt.show()\r\n\r\n    sorted_inds = [i[0] for i in sorted(enumerate(-results), key=lambda x: x[1])]\r\n    names = imagenet.create_readable_names_for_imagenet_labels()\r\n    for i in range(5):\r\n        index = sorted_inds[i]\r\n        print('Probability %0.2f%% => [%s]' % (results[index] * 100, names[index]))\r\n```\r\nThe following is result:\r\n```\r\nProbability 1.00% => [moving van]\r\nProbability 0.69% => [television, television system]\r\nProbability 0.63% => [English foxhound]\r\nProbability 0.63% => [beagle]\r\nProbability 0.61% => [German short-haired pointer]\r\n```\r\n"}