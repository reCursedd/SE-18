{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/435757912", "html_url": "https://github.com/tensorflow/tensorflow/issues/23182#issuecomment-435757912", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23182", "id": 435757912, "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTc1NzkxMg==", "user": {"login": "ZisIsNotZis", "id": 6444018, "node_id": "MDQ6VXNlcjY0NDQwMTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6444018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZisIsNotZis", "html_url": "https://github.com/ZisIsNotZis", "followers_url": "https://api.github.com/users/ZisIsNotZis/followers", "following_url": "https://api.github.com/users/ZisIsNotZis/following{/other_user}", "gists_url": "https://api.github.com/users/ZisIsNotZis/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZisIsNotZis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZisIsNotZis/subscriptions", "organizations_url": "https://api.github.com/users/ZisIsNotZis/orgs", "repos_url": "https://api.github.com/users/ZisIsNotZis/repos", "events_url": "https://api.github.com/users/ZisIsNotZis/events{/privacy}", "received_events_url": "https://api.github.com/users/ZisIsNotZis/received_events", "type": "User", "site_admin": false}, "created_at": "2018-11-05T05:17:23Z", "updated_at": "2018-11-05T05:17:23Z", "author_association": "NONE", "body_html": "<p>That's wired. I just updated everything to latest (i.e. <code>conda update --all</code>), including ubuntu drivers (i.e. <code>apt update</code> and <code>ubuntu-drivers autoinstall</code>) and the result is still inconsistent. For first code, it gives the result:</p>\n<pre><code>[[23.03 22.25 20.97 ... 22.72 25.58 20.19]\n [23.03 22.25 20.97 ... 22.72 25.58 20.19]\n [23.03 22.25 20.97 ... 22.72 25.58 20.19]\n ...\n [23.03 22.25 20.97 ... 22.72 25.58 20.19]\n [23.03 22.25 20.97 ... 22.72 25.58 20.19]\n [23.03 22.25 20.97 ... 22.72 25.58 20.19]] [[24.03 23.25 21.97 ... 23.72 26.58 21.19]\n [24.03 23.25 21.97 ... 23.72 26.58 21.19]\n [24.03 23.25 21.97 ... 23.72 26.58 21.19]\n ...\n [24.03 23.25 21.97 ... 23.72 26.58 21.19]\n [24.03 23.25 21.97 ... 23.72 26.58 21.19]\n [24.03 23.25 21.97 ... 23.72 26.58 21.19]]\n</code></pre>\n<p>where <code>v2.eval()</code> is apparently off <code>v1.eval()</code> by 1. The second code gives:</p>\n<pre><code>[1906641.6 1906641.6 1906641.6 1906641.6 1906641.6 1906641.6 1906641.6\n 1906641.6 1906641.6 1906641.6] [45033.324 45033.324 45033.324 45033.324 45033.324 45033.324 45033.324\n 45033.324 45033.324]\n</code></pre>\n<p>which is also inconsistent. I'm wondering if that is a anaconda-specific problem since I didn't do the standard <code>pip install tensorflow-gpu</code>. It might also be a gpu-memory-size problem since you might have an even better GPU.</p>\n<p>For optimizing part, I thought I would get higher efficiency if put larger batch (i.e. larger matrix multiplication) on GPU instead of smaller batch multiple times. Is that correct? Do I have to split matrix multiplication manually or there are some function in Tensorflow that can help me with that?</p>\n<p>Thank you!</p>", "body_text": "That's wired. I just updated everything to latest (i.e. conda update --all), including ubuntu drivers (i.e. apt update and ubuntu-drivers autoinstall) and the result is still inconsistent. For first code, it gives the result:\n[[23.03 22.25 20.97 ... 22.72 25.58 20.19]\n [23.03 22.25 20.97 ... 22.72 25.58 20.19]\n [23.03 22.25 20.97 ... 22.72 25.58 20.19]\n ...\n [23.03 22.25 20.97 ... 22.72 25.58 20.19]\n [23.03 22.25 20.97 ... 22.72 25.58 20.19]\n [23.03 22.25 20.97 ... 22.72 25.58 20.19]] [[24.03 23.25 21.97 ... 23.72 26.58 21.19]\n [24.03 23.25 21.97 ... 23.72 26.58 21.19]\n [24.03 23.25 21.97 ... 23.72 26.58 21.19]\n ...\n [24.03 23.25 21.97 ... 23.72 26.58 21.19]\n [24.03 23.25 21.97 ... 23.72 26.58 21.19]\n [24.03 23.25 21.97 ... 23.72 26.58 21.19]]\n\nwhere v2.eval() is apparently off v1.eval() by 1. The second code gives:\n[1906641.6 1906641.6 1906641.6 1906641.6 1906641.6 1906641.6 1906641.6\n 1906641.6 1906641.6 1906641.6] [45033.324 45033.324 45033.324 45033.324 45033.324 45033.324 45033.324\n 45033.324 45033.324]\n\nwhich is also inconsistent. I'm wondering if that is a anaconda-specific problem since I didn't do the standard pip install tensorflow-gpu. It might also be a gpu-memory-size problem since you might have an even better GPU.\nFor optimizing part, I thought I would get higher efficiency if put larger batch (i.e. larger matrix multiplication) on GPU instead of smaller batch multiple times. Is that correct? Do I have to split matrix multiplication manually or there are some function in Tensorflow that can help me with that?\nThank you!", "body": "That's wired. I just updated everything to latest (i.e. `conda update --all`), including ubuntu drivers (i.e. `apt update` and `ubuntu-drivers autoinstall`) and the result is still inconsistent. For first code, it gives the result:\r\n\r\n    [[23.03 22.25 20.97 ... 22.72 25.58 20.19]\r\n     [23.03 22.25 20.97 ... 22.72 25.58 20.19]\r\n     [23.03 22.25 20.97 ... 22.72 25.58 20.19]\r\n     ...\r\n     [23.03 22.25 20.97 ... 22.72 25.58 20.19]\r\n     [23.03 22.25 20.97 ... 22.72 25.58 20.19]\r\n     [23.03 22.25 20.97 ... 22.72 25.58 20.19]] [[24.03 23.25 21.97 ... 23.72 26.58 21.19]\r\n     [24.03 23.25 21.97 ... 23.72 26.58 21.19]\r\n     [24.03 23.25 21.97 ... 23.72 26.58 21.19]\r\n     ...\r\n     [24.03 23.25 21.97 ... 23.72 26.58 21.19]\r\n     [24.03 23.25 21.97 ... 23.72 26.58 21.19]\r\n     [24.03 23.25 21.97 ... 23.72 26.58 21.19]]\r\n\r\nwhere `v2.eval()` is apparently off `v1.eval()` by 1. The second code gives:\r\n\r\n    [1906641.6 1906641.6 1906641.6 1906641.6 1906641.6 1906641.6 1906641.6\r\n     1906641.6 1906641.6 1906641.6] [45033.324 45033.324 45033.324 45033.324 45033.324 45033.324 45033.324\r\n     45033.324 45033.324]\r\n\r\nwhich is also inconsistent. I'm wondering if that is a anaconda-specific problem since I didn't do the standard `pip install tensorflow-gpu`. It might also be a gpu-memory-size problem since you might have an even better GPU.\r\n\r\nFor optimizing part, I thought I would get higher efficiency if put larger batch (i.e. larger matrix multiplication) on GPU instead of smaller batch multiple times. Is that correct? Do I have to split matrix multiplication manually or there are some function in Tensorflow that can help me with that?\r\n\r\nThank you!\r\n"}