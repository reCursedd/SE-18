{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15209", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15209/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15209/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15209/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/15209", "id": 280470505, "node_id": "MDU6SXNzdWUyODA0NzA1MDU=", "number": 15209, "title": "CMake: If/else statement in CMAKE_CACHE_ARGS breaks CMake build on Ubuntu 17.10", "user": {"login": "kaspermarstal", "id": 478833, "node_id": "MDQ6VXNlcjQ3ODgzMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/478833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaspermarstal", "html_url": "https://github.com/kaspermarstal", "followers_url": "https://api.github.com/users/kaspermarstal/followers", "following_url": "https://api.github.com/users/kaspermarstal/following{/other_user}", "gists_url": "https://api.github.com/users/kaspermarstal/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaspermarstal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaspermarstal/subscriptions", "organizations_url": "https://api.github.com/users/kaspermarstal/orgs", "repos_url": "https://api.github.com/users/kaspermarstal/repos", "events_url": "https://api.github.com/users/kaspermarstal/events{/privacy}", "received_events_url": "https://api.github.com/users/kaspermarstal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}, {"id": 473173351, "node_id": "MDU6TGFiZWw0NzMxNzMzNTE=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:build/install", "name": "type:build/install", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-08T12:13:31Z", "updated_at": "2018-07-03T16:11:39Z", "closed_at": "2018-07-03T16:11:24Z", "author_association": "CONTRIBUTOR", "body_html": "<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: No.</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>: Ubuntu 17.10.</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>: Source (CMake)</li>\n<li><strong>TensorFlow version (use command below)</strong>: <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/2cfb088cf72b52c74a742d780cc5c4f93a74640e/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/2cfb088cf72b52c74a742d780cc5c4f93a74640e\"><tt>2cfb088</tt></a> (tip of master at time of writing)</li>\n<li><strong>Python version</strong>: 2.7</li>\n<li><strong>Bazel version (if compiling from source)</strong>:</li>\n<li><strong>GCC/Compiler version (if compiling from source)</strong>: 7.2.0</li>\n<li><strong>CUDA/cuDNN version</strong>:</li>\n<li><strong>GPU model and memory</strong>:</li>\n<li><strong>Exact command to reproduce</strong>: cmake ../../tensorflow/contrib/cmake &amp;&amp; make</li>\n</ul>\n<h3>Source code / logs</h3>\n<pre><code>[  1%] Performing build step for 'zlib'\n[ 40%] Built target zlibstatic\n[ 42%] Linking C shared library libz.so\n/usr/bin/ld: CMakeFiles/zlib.dir/deflate.o: relocation R_X86_64_PC32 against symbol `deflate' can not be used when making a shared object; recompile with -fPIC\n/usr/bin/ld: final link failed: Bad value\ncollect2: error: ld returned 1 exit status\n</code></pre>\n<h3>Cause</h3>\n<p>In v1.4.0, you will find the argument <code>-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON</code> given to  CMAKE_CACHE_ARGS for several external projects (png, zlip, sqlite etc). In master, this has been changed to</p>\n<pre><code>CMAKE_CACHE_ARGS\n\tif(tensorflow_ENABLE_POSITION_INDEPENDENT_CODE)\n\t\t-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON\n\telse()\n\t\t-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=OFF\n\tendif()\n</code></pre>\n<p>which yields the following init cache entries on my machine:</p>\n<pre><code>set(CMAKE_POSITION_INDEPENDENT_CODE \"ON;if;(;tensorflow_ENABLE_POSITION_INDEPENDENT_CODE;);else;(;)\" CACHE BOOL \"Initial cache\" FORCE)\nset(CMAKE_POSITION_INDEPENDENT_CODE \"OFF;endif;(;)\" CACHE BOOL \"Initial cache\" FORCE)\n</code></pre>\n<p>and the build fails because <code>CMAKE_POSITION_INDEPENDENT_CODE</code> ends up not being set to <code>ON</code>. I could imagine this breaks a lot of builds. Perhaps CMake behaves differently on Windows and therefore this has not been caught? Is there a reason for this change I am not aware of?</p>\n<h3>Solution</h3>\n<p>A possible solution is to not inline the if/else statement and instead use the argument</p>\n<pre><code>-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=${tensorflow_ENABLE_POSITION_INDEPENDENT_CODE}\n</code></pre>\n<p>Are you interested in a PR?</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No.\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 17.10.\nTensorFlow installed from (source or binary): Source (CMake)\nTensorFlow version (use command below): 2cfb088 (tip of master at time of writing)\nPython version: 2.7\nBazel version (if compiling from source):\nGCC/Compiler version (if compiling from source): 7.2.0\nCUDA/cuDNN version:\nGPU model and memory:\nExact command to reproduce: cmake ../../tensorflow/contrib/cmake && make\n\nSource code / logs\n[  1%] Performing build step for 'zlib'\n[ 40%] Built target zlibstatic\n[ 42%] Linking C shared library libz.so\n/usr/bin/ld: CMakeFiles/zlib.dir/deflate.o: relocation R_X86_64_PC32 against symbol `deflate' can not be used when making a shared object; recompile with -fPIC\n/usr/bin/ld: final link failed: Bad value\ncollect2: error: ld returned 1 exit status\n\nCause\nIn v1.4.0, you will find the argument -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON given to  CMAKE_CACHE_ARGS for several external projects (png, zlip, sqlite etc). In master, this has been changed to\nCMAKE_CACHE_ARGS\n\tif(tensorflow_ENABLE_POSITION_INDEPENDENT_CODE)\n\t\t-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON\n\telse()\n\t\t-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=OFF\n\tendif()\n\nwhich yields the following init cache entries on my machine:\nset(CMAKE_POSITION_INDEPENDENT_CODE \"ON;if;(;tensorflow_ENABLE_POSITION_INDEPENDENT_CODE;);else;(;)\" CACHE BOOL \"Initial cache\" FORCE)\nset(CMAKE_POSITION_INDEPENDENT_CODE \"OFF;endif;(;)\" CACHE BOOL \"Initial cache\" FORCE)\n\nand the build fails because CMAKE_POSITION_INDEPENDENT_CODE ends up not being set to ON. I could imagine this breaks a lot of builds. Perhaps CMake behaves differently on Windows and therefore this has not been caught? Is there a reason for this change I am not aware of?\nSolution\nA possible solution is to not inline the if/else statement and instead use the argument\n-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=${tensorflow_ENABLE_POSITION_INDEPENDENT_CODE}\n\nAre you interested in a PR?", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: No.\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Ubuntu 17.10.\r\n- **TensorFlow installed from (source or binary)**: Source (CMake)\r\n- **TensorFlow version (use command below)**: 2cfb088cf72b52c74a742d780cc5c4f93a74640e (tip of master at time of writing)\r\n- **Python version**: 2.7\r\n- **Bazel version (if compiling from source)**:\r\n- **GCC/Compiler version (if compiling from source)**: 7.2.0\r\n- **CUDA/cuDNN version**:\r\n- **GPU model and memory**:\r\n- **Exact command to reproduce**: cmake ../../tensorflow/contrib/cmake && make\r\n\r\n### Source code / logs\r\n    [  1%] Performing build step for 'zlib'\r\n    [ 40%] Built target zlibstatic\r\n    [ 42%] Linking C shared library libz.so\r\n    /usr/bin/ld: CMakeFiles/zlib.dir/deflate.o: relocation R_X86_64_PC32 against symbol `deflate' can not be used when making a shared object; recompile with -fPIC\r\n    /usr/bin/ld: final link failed: Bad value\r\n    collect2: error: ld returned 1 exit status\r\n\r\n### Cause\r\nIn v1.4.0, you will find the argument `-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON` given to  CMAKE_CACHE_ARGS for several external projects (png, zlip, sqlite etc). In master, this has been changed to \r\n\r\n\tCMAKE_CACHE_ARGS\r\n\t\tif(tensorflow_ENABLE_POSITION_INDEPENDENT_CODE)\r\n\t\t\t-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON\r\n\t\telse()\r\n\t\t\t-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=OFF\r\n\t\tendif()\r\n\r\nwhich yields the following init cache entries on my machine: \r\n\r\n\tset(CMAKE_POSITION_INDEPENDENT_CODE \"ON;if;(;tensorflow_ENABLE_POSITION_INDEPENDENT_CODE;);else;(;)\" CACHE BOOL \"Initial cache\" FORCE)\r\n\tset(CMAKE_POSITION_INDEPENDENT_CODE \"OFF;endif;(;)\" CACHE BOOL \"Initial cache\" FORCE)\r\n\r\nand the build fails because `CMAKE_POSITION_INDEPENDENT_CODE` ends up not being set to `ON`. I could imagine this breaks a lot of builds. Perhaps CMake behaves differently on Windows and therefore this has not been caught? Is there a reason for this change I am not aware of? \r\n\r\n### Solution\r\nA possible solution is to not inline the if/else statement and instead use the argument\r\n\r\n    -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=${tensorflow_ENABLE_POSITION_INDEPENDENT_CODE}\r\n\r\nAre you interested in a PR?\r\n"}