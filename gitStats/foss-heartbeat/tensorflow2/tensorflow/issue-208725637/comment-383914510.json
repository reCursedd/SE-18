{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/383914510", "html_url": "https://github.com/tensorflow/tensorflow/issues/7669#issuecomment-383914510", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7669", "id": 383914510, "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzkxNDUxMA==", "user": {"login": "selcouthlyBlue", "id": 13268675, "node_id": "MDQ6VXNlcjEzMjY4Njc1", "avatar_url": "https://avatars2.githubusercontent.com/u/13268675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/selcouthlyBlue", "html_url": "https://github.com/selcouthlyBlue", "followers_url": "https://api.github.com/users/selcouthlyBlue/followers", "following_url": "https://api.github.com/users/selcouthlyBlue/following{/other_user}", "gists_url": "https://api.github.com/users/selcouthlyBlue/gists{/gist_id}", "starred_url": "https://api.github.com/users/selcouthlyBlue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/selcouthlyBlue/subscriptions", "organizations_url": "https://api.github.com/users/selcouthlyBlue/orgs", "repos_url": "https://api.github.com/users/selcouthlyBlue/repos", "events_url": "https://api.github.com/users/selcouthlyBlue/events{/privacy}", "received_events_url": "https://api.github.com/users/selcouthlyBlue/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-24T12:37:07Z", "updated_at": "2018-04-24T12:52:04Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I've created a <code>ValidationHook</code> based on the existing <code>LoggingTensorHook</code>.</p>\n<pre><code>import tensorflow as tf\n\n\nclass ValidationHook(tf.train.SessionRunHook):\n    def __init__(self, model_fn, params, input_fn, checkpoint_dir,\n                 every_n_secs=None, every_n_steps=None):\n        self._iter_count = 0\n        self._estimator = tf.estimator.Estimator(\n            model_fn=model_fn,\n            params=params,\n            model_dir=checkpoint_dir\n        )\n        self._input_fn = input_fn\n        self._timer = tf.train.SecondOrStepTimer(every_n_secs, every_n_steps)\n        self._should_trigger = False\n\n    def begin(self):\n        self._timer.reset()\n        self._iter_count = 0\n\n    def before_run(self, run_context):\n        self._should_trigger = self._timer.should_trigger_for_step(self._iter_count)\n\n    def after_run(self, run_context, run_values):\n        if self._should_trigger:\n            self._estimator.evaluate(\n                self._input_fn\n            )\n            self._timer.update_last_triggered_step(self._iter_count)\n        self._iter_count += 1\n</code></pre>\n<p>You can attach it as a hook whenever you run <code>Estimator.train()</code>.</p>", "body_text": "I've created a ValidationHook based on the existing LoggingTensorHook.\nimport tensorflow as tf\n\n\nclass ValidationHook(tf.train.SessionRunHook):\n    def __init__(self, model_fn, params, input_fn, checkpoint_dir,\n                 every_n_secs=None, every_n_steps=None):\n        self._iter_count = 0\n        self._estimator = tf.estimator.Estimator(\n            model_fn=model_fn,\n            params=params,\n            model_dir=checkpoint_dir\n        )\n        self._input_fn = input_fn\n        self._timer = tf.train.SecondOrStepTimer(every_n_secs, every_n_steps)\n        self._should_trigger = False\n\n    def begin(self):\n        self._timer.reset()\n        self._iter_count = 0\n\n    def before_run(self, run_context):\n        self._should_trigger = self._timer.should_trigger_for_step(self._iter_count)\n\n    def after_run(self, run_context, run_values):\n        if self._should_trigger:\n            self._estimator.evaluate(\n                self._input_fn\n            )\n            self._timer.update_last_triggered_step(self._iter_count)\n        self._iter_count += 1\n\nYou can attach it as a hook whenever you run Estimator.train().", "body": "I've created a `ValidationHook` based on the existing `LoggingTensorHook`.\r\n\r\n```\r\nimport tensorflow as tf\r\n\r\n\r\nclass ValidationHook(tf.train.SessionRunHook):\r\n    def __init__(self, model_fn, params, input_fn, checkpoint_dir,\r\n                 every_n_secs=None, every_n_steps=None):\r\n        self._iter_count = 0\r\n        self._estimator = tf.estimator.Estimator(\r\n            model_fn=model_fn,\r\n            params=params,\r\n            model_dir=checkpoint_dir\r\n        )\r\n        self._input_fn = input_fn\r\n        self._timer = tf.train.SecondOrStepTimer(every_n_secs, every_n_steps)\r\n        self._should_trigger = False\r\n\r\n    def begin(self):\r\n        self._timer.reset()\r\n        self._iter_count = 0\r\n\r\n    def before_run(self, run_context):\r\n        self._should_trigger = self._timer.should_trigger_for_step(self._iter_count)\r\n\r\n    def after_run(self, run_context, run_values):\r\n        if self._should_trigger:\r\n            self._estimator.evaluate(\r\n                self._input_fn\r\n            )\r\n            self._timer.update_last_triggered_step(self._iter_count)\r\n        self._iter_count += 1\r\n```\r\n\r\nYou can attach it as a hook whenever you run `Estimator.train()`."}