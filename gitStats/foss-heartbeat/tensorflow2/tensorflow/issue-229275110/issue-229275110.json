{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9960", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9960/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9960/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9960/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9960", "id": 229275110, "node_id": "MDU6SXNzdWUyMjkyNzUxMTA=", "number": 9960, "title": "Placeholder modification behavior", "user": {"login": "zaccharieramzi", "id": 6387497, "node_id": "MDQ6VXNlcjYzODc0OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6387497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zaccharieramzi", "html_url": "https://github.com/zaccharieramzi", "followers_url": "https://api.github.com/users/zaccharieramzi/followers", "following_url": "https://api.github.com/users/zaccharieramzi/following{/other_user}", "gists_url": "https://api.github.com/users/zaccharieramzi/gists{/gist_id}", "starred_url": "https://api.github.com/users/zaccharieramzi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zaccharieramzi/subscriptions", "organizations_url": "https://api.github.com/users/zaccharieramzi/orgs", "repos_url": "https://api.github.com/users/zaccharieramzi/repos", "events_url": "https://api.github.com/users/zaccharieramzi/events{/privacy}", "received_events_url": "https://api.github.com/users/zaccharieramzi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-17T08:30:23Z", "updated_at": "2017-05-22T18:28:57Z", "closed_at": "2017-05-19T19:03:14Z", "author_association": "NONE", "body_html": "<p>I am using Tensorflow 1.0.1, on Mac OS Sierra 10.12.4, with CPU in a jupyter notebook (but the behavior I am describing appeared in a regular python script too).</p>\n<p>The problem I am having is with placeholders. I have been using tensorflow for only 1 month so I was not really comfortable with using them and I made a mistake that took me a very long time to debug.<br>\nHere is the type of code I wrote:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nx_ <span class=\"pl-k\">=</span> tf.placeholder(tf.float64, [<span class=\"pl-c1\">5</span>])\nx_ <span class=\"pl-k\">=</span> tf.where(tf.is_nan(x_), tf.zeros_like(x_), x_)\na <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">1</span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">5</span>])\na <span class=\"pl-k\">=</span> tf.cast(a, tf.float64)\nc <span class=\"pl-k\">=</span> a <span class=\"pl-k\">+</span> x_\ninit_op <span class=\"pl-k\">=</span> tf.group(\n    tf.global_variables_initializer(),\n    tf.local_variables_initializer())\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run(init_op)\nx <span class=\"pl-k\">=</span> np.arange(<span class=\"pl-c1\">5</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">float</span>)\nx[<span class=\"pl-c1\">3</span>] <span class=\"pl-k\">=</span> np.nan\nsess.run(c, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x_: x})</pre></div>\n<p>To this, the output was: <code>array([  1.,   2.,   3.,  nan,   5.])</code>, which is not what I expected since I had replaced all the <code>nan</code> with the <code>tf.where</code>. I understood only later that it was because tensorflow was feeding the placeholder in the latest position it appeared (maybe not exactly how it's implemented, but empirically, that is what happens).<br>\nTherefore a good (in the sense of what I intended to do) code is:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\nx_ <span class=\"pl-k\">=</span> tf.placeholder(tf.float64, [<span class=\"pl-c1\">5</span>])\nr <span class=\"pl-k\">=</span> x_\nr <span class=\"pl-k\">=</span> tf.where(tf.is_nan(r), tf.zeros_like(r), r)\na <span class=\"pl-k\">=</span> tf.constant(<span class=\"pl-c1\">1</span>, <span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">5</span>])\na <span class=\"pl-k\">=</span> tf.cast(a, tf.float64)\nc <span class=\"pl-k\">=</span> a <span class=\"pl-k\">+</span> r\ninit_op <span class=\"pl-k\">=</span> tf.group(\n    tf.global_variables_initializer(),\n    tf.local_variables_initializer())\nsess <span class=\"pl-k\">=</span> tf.Session()\nsess.run(init_op)\nx <span class=\"pl-k\">=</span> np.arange(<span class=\"pl-c1\">5</span>, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">float</span>)\nx[<span class=\"pl-c1\">3</span>] <span class=\"pl-k\">=</span> np.nan\nsess.run(c, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x_: x})</pre></div>\n<p>This indeed outputs <code>array([ 1.,  2.,  3.,  1.,  5.])</code>. However, to me it's a bit weird that you would need to throw in an extra variable to achieve this purpose and even weirder that I didn't receive any error when modifying my placeholder.<br>\nMy suggestions are:</p>\n<ul>\n<li>Throw an error or a warning when reallocating a placeholder.</li>\n<li>State clearly that placeholders are not meant to be modified (I looked for it in the docs and didn't find it, maybe I didn't look well enough).</li>\n<li>Allow placeholders to be modified (might be offputting for someone who understands it well).</li>\n</ul>", "body_text": "I am using Tensorflow 1.0.1, on Mac OS Sierra 10.12.4, with CPU in a jupyter notebook (but the behavior I am describing appeared in a regular python script too).\nThe problem I am having is with placeholders. I have been using tensorflow for only 1 month so I was not really comfortable with using them and I made a mistake that took me a very long time to debug.\nHere is the type of code I wrote:\nimport numpy as np\nimport tensorflow as tf\nx_ = tf.placeholder(tf.float64, [5])\nx_ = tf.where(tf.is_nan(x_), tf.zeros_like(x_), x_)\na = tf.constant(1, shape=[5])\na = tf.cast(a, tf.float64)\nc = a + x_\ninit_op = tf.group(\n    tf.global_variables_initializer(),\n    tf.local_variables_initializer())\nsess = tf.Session()\nsess.run(init_op)\nx = np.arange(5, dtype=float)\nx[3] = np.nan\nsess.run(c, feed_dict={x_: x})\nTo this, the output was: array([  1.,   2.,   3.,  nan,   5.]), which is not what I expected since I had replaced all the nan with the tf.where. I understood only later that it was because tensorflow was feeding the placeholder in the latest position it appeared (maybe not exactly how it's implemented, but empirically, that is what happens).\nTherefore a good (in the sense of what I intended to do) code is:\nimport numpy as np\nimport tensorflow as tf\nx_ = tf.placeholder(tf.float64, [5])\nr = x_\nr = tf.where(tf.is_nan(r), tf.zeros_like(r), r)\na = tf.constant(1, shape=[5])\na = tf.cast(a, tf.float64)\nc = a + r\ninit_op = tf.group(\n    tf.global_variables_initializer(),\n    tf.local_variables_initializer())\nsess = tf.Session()\nsess.run(init_op)\nx = np.arange(5, dtype=float)\nx[3] = np.nan\nsess.run(c, feed_dict={x_: x})\nThis indeed outputs array([ 1.,  2.,  3.,  1.,  5.]). However, to me it's a bit weird that you would need to throw in an extra variable to achieve this purpose and even weirder that I didn't receive any error when modifying my placeholder.\nMy suggestions are:\n\nThrow an error or a warning when reallocating a placeholder.\nState clearly that placeholders are not meant to be modified (I looked for it in the docs and didn't find it, maybe I didn't look well enough).\nAllow placeholders to be modified (might be offputting for someone who understands it well).", "body": "I am using Tensorflow 1.0.1, on Mac OS Sierra 10.12.4, with CPU in a jupyter notebook (but the behavior I am describing appeared in a regular python script too).\r\n\r\nThe problem I am having is with placeholders. I have been using tensorflow for only 1 month so I was not really comfortable with using them and I made a mistake that took me a very long time to debug.\r\nHere is the type of code I wrote:\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\nx_ = tf.placeholder(tf.float64, [5])\r\nx_ = tf.where(tf.is_nan(x_), tf.zeros_like(x_), x_)\r\na = tf.constant(1, shape=[5])\r\na = tf.cast(a, tf.float64)\r\nc = a + x_\r\ninit_op = tf.group(\r\n    tf.global_variables_initializer(),\r\n    tf.local_variables_initializer())\r\nsess = tf.Session()\r\nsess.run(init_op)\r\nx = np.arange(5, dtype=float)\r\nx[3] = np.nan\r\nsess.run(c, feed_dict={x_: x})\r\n```\r\nTo this, the output was: `array([  1.,   2.,   3.,  nan,   5.])`, which is not what I expected since I had replaced all the `nan` with the `tf.where`. I understood only later that it was because tensorflow was feeding the placeholder in the latest position it appeared (maybe not exactly how it's implemented, but empirically, that is what happens).\r\nTherefore a good (in the sense of what I intended to do) code is:\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\nx_ = tf.placeholder(tf.float64, [5])\r\nr = x_\r\nr = tf.where(tf.is_nan(r), tf.zeros_like(r), r)\r\na = tf.constant(1, shape=[5])\r\na = tf.cast(a, tf.float64)\r\nc = a + r\r\ninit_op = tf.group(\r\n    tf.global_variables_initializer(),\r\n    tf.local_variables_initializer())\r\nsess = tf.Session()\r\nsess.run(init_op)\r\nx = np.arange(5, dtype=float)\r\nx[3] = np.nan\r\nsess.run(c, feed_dict={x_: x})\r\n```\r\nThis indeed outputs `array([ 1.,  2.,  3.,  1.,  5.])`. However, to me it's a bit weird that you would need to throw in an extra variable to achieve this purpose and even weirder that I didn't receive any error when modifying my placeholder.\r\nMy suggestions are:\r\n- Throw an error or a warning when reallocating a placeholder.\r\n- State clearly that placeholders are not meant to be modified (I looked for it in the docs and didn't find it, maybe I didn't look well enough).\r\n- Allow placeholders to be modified (might be offputting for someone who understands it well).\r\n"}