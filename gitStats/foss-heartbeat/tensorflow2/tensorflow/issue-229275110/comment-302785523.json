{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/302785523", "html_url": "https://github.com/tensorflow/tensorflow/issues/9960#issuecomment-302785523", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9960", "id": 302785523, "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjc4NTUyMw==", "user": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "created_at": "2017-05-19T19:03:14Z", "updated_at": "2017-05-19T19:03:14Z", "author_association": "MEMBER", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6387497\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zaccharieramzi\">@zaccharieramzi</a>, I would argue this is just how Python works. In your code, you're not actually reallocating or modifying your original placeholder, but reassigning the x_ variable, and then feeding the new x_ value (which is the where op):</p>\n<div class=\"highlight highlight-source-python\"><pre>x_ <span class=\"pl-k\">=</span> tf.placeholder(tf.float64, [<span class=\"pl-c1\">5</span>])\nx_ <span class=\"pl-k\">=</span> tf.where(tf.is_nan(x_), tf.zeros_like(x_), x_)\n<span class=\"pl-c1\">...</span>\nsess.run(c, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>x_: x)</pre></div>\n<p>This is analogous to doing something like:</p>\n<div class=\"highlight highlight-source-python\"><pre>x_ <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>\nx_ <span class=\"pl-k\">=</span> x_ <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>\n<span class=\"pl-c1\">print</span>(x_) <span class=\"pl-c\"><span class=\"pl-c\">#</span> prints 2</span></pre></div>\n<p>In general, I think it's not a bad idea to use a new variable for each TensorFlow op to avoid bugs like these. Note you can write it in the same number of lines:</p>\n<div class=\"highlight highlight-source-python\"><pre>x_ <span class=\"pl-k\">=</span> tf.placeholder(tf.float64, [<span class=\"pl-c1\">5</span>])\nr <span class=\"pl-k\">=</span> tf.where(tf.is_nan(x_), tf.zeros_like(x_), x_)</pre></div>\n<p>I'm gonna close this for now as I don't think it's a TensorFlow bug, but feel free to comment further.</p>", "body_text": "Hi @zaccharieramzi, I would argue this is just how Python works. In your code, you're not actually reallocating or modifying your original placeholder, but reassigning the x_ variable, and then feeding the new x_ value (which is the where op):\nx_ = tf.placeholder(tf.float64, [5])\nx_ = tf.where(tf.is_nan(x_), tf.zeros_like(x_), x_)\n...\nsess.run(c, feed_dict=x_: x)\nThis is analogous to doing something like:\nx_ = 1\nx_ = x_ * 2\nprint(x_) # prints 2\nIn general, I think it's not a bad idea to use a new variable for each TensorFlow op to avoid bugs like these. Note you can write it in the same number of lines:\nx_ = tf.placeholder(tf.float64, [5])\nr = tf.where(tf.is_nan(x_), tf.zeros_like(x_), x_)\nI'm gonna close this for now as I don't think it's a TensorFlow bug, but feel free to comment further.", "body": "Hi @zaccharieramzi, I would argue this is just how Python works. In your code, you're not actually reallocating or modifying your original placeholder, but reassigning the x_ variable, and then feeding the new x_ value (which is the where op):\r\n```python\r\nx_ = tf.placeholder(tf.float64, [5])\r\nx_ = tf.where(tf.is_nan(x_), tf.zeros_like(x_), x_)\r\n...\r\nsess.run(c, feed_dict=x_: x)\r\n```\r\n\r\nThis is analogous to doing something like:\r\n```python\r\nx_ = 1\r\nx_ = x_ * 2\r\nprint(x_) # prints 2\r\n```\r\nIn general, I think it's not a bad idea to use a new variable for each TensorFlow op to avoid bugs like these. Note you can write it in the same number of lines:\r\n```python\r\nx_ = tf.placeholder(tf.float64, [5])\r\nr = tf.where(tf.is_nan(x_), tf.zeros_like(x_), x_)\r\n```\r\nI'm gonna close this for now as I don't think it's a TensorFlow bug, but feel free to comment further."}