{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/413047710", "html_url": "https://github.com/tensorflow/tensorflow/issues/9180#issuecomment-413047710", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9180", "id": 413047710, "node_id": "MDEyOklzc3VlQ29tbWVudDQxMzA0NzcxMA==", "user": {"login": "TimZaman", "id": 7721540, "node_id": "MDQ6VXNlcjc3MjE1NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7721540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimZaman", "html_url": "https://github.com/TimZaman", "followers_url": "https://api.github.com/users/TimZaman/followers", "following_url": "https://api.github.com/users/TimZaman/following{/other_user}", "gists_url": "https://api.github.com/users/TimZaman/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimZaman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimZaman/subscriptions", "organizations_url": "https://api.github.com/users/TimZaman/orgs", "repos_url": "https://api.github.com/users/TimZaman/repos", "events_url": "https://api.github.com/users/TimZaman/events{/privacy}", "received_events_url": "https://api.github.com/users/TimZaman/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-14T23:28:00Z", "updated_at": "2018-08-14T23:28:12Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Here's a workaround so pyfunc accepts nested structures, feel free to make an MR so it ends up in the codebase:</p>\n<pre><code>def py_func_v2(func, inputs, Tout):\n    \"\"\"Wrapper around py_func to accept nested structured like dicts and tuples.\"\"\"\n    def _wrapper(*flat_inputs):\n        inputs_d = tf.contrib.framework.nest.pack_sequence_as(inputs, flat_inputs)\n        return func(inputs_d)\n    flat_inputs = tf.contrib.framework.nest.flatten(inputs)\n    return tf.py_func(func=_wrapper, inp=flat_inputs, Tout=Tout)\n</code></pre>", "body_text": "Here's a workaround so pyfunc accepts nested structures, feel free to make an MR so it ends up in the codebase:\ndef py_func_v2(func, inputs, Tout):\n    \"\"\"Wrapper around py_func to accept nested structured like dicts and tuples.\"\"\"\n    def _wrapper(*flat_inputs):\n        inputs_d = tf.contrib.framework.nest.pack_sequence_as(inputs, flat_inputs)\n        return func(inputs_d)\n    flat_inputs = tf.contrib.framework.nest.flatten(inputs)\n    return tf.py_func(func=_wrapper, inp=flat_inputs, Tout=Tout)", "body": "Here's a workaround so pyfunc accepts nested structures, feel free to make an MR so it ends up in the codebase:\r\n\r\n```\r\ndef py_func_v2(func, inputs, Tout):\r\n    \"\"\"Wrapper around py_func to accept nested structured like dicts and tuples.\"\"\"\r\n    def _wrapper(*flat_inputs):\r\n        inputs_d = tf.contrib.framework.nest.pack_sequence_as(inputs, flat_inputs)\r\n        return func(inputs_d)\r\n    flat_inputs = tf.contrib.framework.nest.flatten(inputs)\r\n    return tf.py_func(func=_wrapper, inp=flat_inputs, Tout=Tout)\r\n```"}