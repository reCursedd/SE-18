{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/119231855", "pull_request_review_id": 41086481, "id": 119231855, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExOTIzMTg1NQ==", "diff_hunk": "@@ -262,53 +298,68 @@ struct SparseTensorDenseMatMulFunctor<CPUDevice, T, Tindices, ADJ_A, ADJ_B> {\n \n     if (rhs_right < kNumVectorize) {\n       // Disable vectorization if the RHS of output is too small\n-      auto maybe_adjoint_b = MaybeAdjoint<decltype(b), ADJ_B>(b);\n+      auto maybe_adjoint_b = MaybeAdjoint<decltype(b), ADJ_B, NDIM>(b);\n \n       for (std::size_t i = 0; i < nnz; ++i) {\n         const Tindices m = internal::SubtleMustCopy(a_indices(i, lhs_index_a));\n         const Tindices k = internal::SubtleMustCopy(a_indices(i, rhs_index_a));\n         if (!FastBoundsCheck(k, lhs_right)) {\n           return KOutOfBoundsError(k, i, rhs_index_a, lhs_right);\n         }\n-        if (!FastBoundsCheck(m, out.dimension(0))) {\n-          return MOutOfBoundsError(m, i, lhs_index_a, out.dimension(0));\n+        if (!FastBoundsCheck(m, out.dimension(NDIM - 2))) {\n+          return MOutOfBoundsError(m, i, lhs_index_a, out.dimension(NDIM - 2));\n         }\n         const T a_value = ADJ_A ? MaybeConj(a_values(i)) : a_values(i);\n+        Eigen::array<Eigen::Index, NDIM> indices;\n+        for (int j = 0; j < NDIM - 2; ++j) {\n+          indices[j] = a_indices(i, j);\n+        }\n         for (std::size_t n = 0; n < rhs_right; ++n) {\n-          const T b_value = maybe_adjoint_b(k, n);\n-          out(m, n) += a_value * b_value;\n+          indices[NDIM - 2] = k;\n+          indices[NDIM - 1] = n;\n+          const T b_value = maybe_adjoint_b(indices);\n+          indices[NDIM - 2] = m;\n+          out(indices) += a_value * b_value;\n         }\n       }\n     } else {\n       // Vectorization via Eigen.\n-      const int b_chip_index = ADJ_B ? 1 : 0;\n-\n-#define LOOP_NNZ(b_passed)                                                  \\\n-  for (std::size_t i = 0; i < nnz; ++i) {                                   \\\n-    const Tindices m = internal::SubtleMustCopy(a_indices(i, lhs_index_a)); \\\n-    const Tindices k = internal::SubtleMustCopy(a_indices(i, rhs_index_a)); \\\n-    const T a_value = (ADJ_A) ? MaybeConj(a_values(i)) : a_values(i);       \\\n-    if (!FastBoundsCheck(k, lhs_right)) {                                   \\\n-      return KOutOfBoundsError(k, i, rhs_index_a, lhs_right);               \\\n-    }                                                                       \\\n-    if (!FastBoundsCheck(m, out.dimension(0))) {                            \\\n-      return MOutOfBoundsError(m, i, lhs_index_a, out.dimension(0));        \\\n-    }                                                                       \\\n-    out.template chip<0>(m) +=                                              \\\n-        b_passed.template chip<b_chip_index>(k) * a_value;                  \\\n-  }\n-\n-      if (ADJ_B) {\n-        // Perform transpose and conjugation on B once, since we chip out B's\n-        // columns in the nnz loop.\n-        Eigen::array<int, 2> shuffle(1, 0);  // preserve dimension order\n-        Eigen::Tensor<T, 2, Eigen::ColMajor> col_major_conj_b =\n-            b.swap_layout().shuffle(shuffle).conjugate();\n-        LOOP_NNZ(col_major_conj_b);\n-      } else {\n-        LOOP_NNZ(b);\n+      for (std::size_t i = 0; i < nnz; ++i) {\n+        const Tindices m = internal::SubtleMustCopy(a_indices(i, lhs_index_a));\n+        const Tindices k = internal::SubtleMustCopy(a_indices(i, rhs_index_a));\n+        const T a_value = (ADJ_A) ? MaybeConj(a_values(i)) : a_values(i);\n+        if (!FastBoundsCheck(k, lhs_right)) {\n+          return KOutOfBoundsError(k, i, rhs_index_a, lhs_right);\n+        }\n+        if (!FastBoundsCheck(m, out.dimension(NDIM - 2))) {\n+          return MOutOfBoundsError(m, i, lhs_index_a, out.dimension(NDIM - 2));\n+        }\n+        Eigen::array<Eigen::Index, NDIM> out_offsets;\n+        Eigen::array<Eigen::Index, NDIM> out_extends;\n+        Eigen::array<Eigen::Index, NDIM> b_offsets;\n+        Eigen::array<Eigen::Index, NDIM> b_extends;\n+        for (int j = 0; j < NDIM - 2; ++j) {\n+          out_offsets[j] = a_indices(i, j);", "path": "tensorflow/core/kernels/sparse_tensor_dense_matmul_op.cc", "position": null, "original_position": 277, "commit_id": "b365ec3d21be7959f5c237f11a0d334b1d6f597e", "original_commit_id": "9bdda292f53108021a7fb7c26a0f94dc5b1195d4", "user": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "body": "As above, since you have to use SubtleMustCopy for security reasons, perhaps it is easier to copy all the indices at the top of the i-loop?", "created_at": "2017-05-30T22:31:35Z", "updated_at": "2017-07-23T22:46:49Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/9373#discussion_r119231855", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9373", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/119231855"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/9373#discussion_r119231855"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/9373"}}, "body_html": "<p>As above, since you have to use SubtleMustCopy for security reasons, perhaps it is easier to copy all the indices at the top of the i-loop?</p>", "body_text": "As above, since you have to use SubtleMustCopy for security reasons, perhaps it is easier to copy all the indices at the top of the i-loop?"}