{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23722", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23722/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23722/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23722/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23722", "id": 380369848, "node_id": "MDU6SXNzdWUzODAzNjk4NDg=", "number": 23722, "title": "tf.keras - Saving model ignores layers that aren't fed into other layers", "user": {"login": "harrismirza", "id": 6362456, "node_id": "MDQ6VXNlcjYzNjI0NTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6362456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harrismirza", "html_url": "https://github.com/harrismirza", "followers_url": "https://api.github.com/users/harrismirza/followers", "following_url": "https://api.github.com/users/harrismirza/following{/other_user}", "gists_url": "https://api.github.com/users/harrismirza/gists{/gist_id}", "starred_url": "https://api.github.com/users/harrismirza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harrismirza/subscriptions", "organizations_url": "https://api.github.com/users/harrismirza/orgs", "repos_url": "https://api.github.com/users/harrismirza/repos", "events_url": "https://api.github.com/users/harrismirza/events{/privacy}", "received_events_url": "https://api.github.com/users/harrismirza/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1097546578, "node_id": "MDU6TGFiZWwxMDk3NTQ2NTc4", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:keras", "name": "comp:keras", "color": "0052cc", "default": false}], "state": "open", "locked": false, "assignee": {"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ymodak", "id": 42785357, "node_id": "MDQ6VXNlcjQyNzg1MzU3", "avatar_url": "https://avatars1.githubusercontent.com/u/42785357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymodak", "html_url": "https://github.com/ymodak", "followers_url": "https://api.github.com/users/ymodak/followers", "following_url": "https://api.github.com/users/ymodak/following{/other_user}", "gists_url": "https://api.github.com/users/ymodak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymodak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymodak/subscriptions", "organizations_url": "https://api.github.com/users/ymodak/orgs", "repos_url": "https://api.github.com/users/ymodak/repos", "events_url": "https://api.github.com/users/ymodak/events{/privacy}", "received_events_url": "https://api.github.com/users/ymodak/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-11-13T18:45:30Z", "updated_at": "2018-11-13T23:55:51Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): <strong>Yes</strong></li>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): <strong>Windows 10</strong></li>\n<li>Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: <strong>N/A</strong></li>\n<li>TensorFlow installed from (source or binary): <strong>Binary</strong></li>\n<li>TensorFlow version (use command below): <strong>b'v1.11.0-rc2-4-gc19e29306c' 1.11.0</strong></li>\n<li>Python version: <strong>3.6.7</strong></li>\n<li>Bazel version (if compiling from source): <strong>N/A</strong></li>\n<li>GCC/Compiler version (if compiling from source): <strong>N/A</strong></li>\n<li>CUDA/cuDNN version: <strong>N/A</strong></li>\n<li>GPU model and memory: <strong>N/A</strong></li>\n</ul>\n<p><strong>Describe the current behavior</strong><br>\nWhen I save and reload a model that has multiple inputs, but some aren't fed into any layers (they are used in a custom loss function), not all inputs are created in the new model.</p>\n<p>Opening the HDF File of the saved model shows that the input layers aren't saved in the model configuration.</p>\n<p><strong>Describe the expected behavior</strong><br>\nAll layers should be correctly created</p>\n<p><strong>Code to reproduce the issue</strong></p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow.keras <span class=\"pl-k\">as</span> keras\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">custom_loss</span>(<span class=\"pl-smi\">loss_input</span>):\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">loss</span>(<span class=\"pl-smi\">y_true</span>, <span class=\"pl-smi\">y_pred</span>):\n        <span class=\"pl-k\">return</span> y_true <span class=\"pl-k\">*</span> y_pred <span class=\"pl-k\">*</span> loss_input\n    <span class=\"pl-k\">return</span> loss\n\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Create simple model</span>\ninput_layer <span class=\"pl-k\">=</span> keras.Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>,))\nloss_input_layer <span class=\"pl-k\">=</span> keras.Input(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>,))\n\noutput <span class=\"pl-k\">=</span> keras.layers.Dense(<span class=\"pl-c1\">1</span>)(input_layer)\n\nmodel <span class=\"pl-k\">=</span> keras.Model(<span class=\"pl-v\">inputs</span><span class=\"pl-k\">=</span>[input_layer, loss_input_layer], <span class=\"pl-v\">outputs</span><span class=\"pl-k\">=</span>[output])\n\nmodel.compile(<span class=\"pl-v\">optimizer</span><span class=\"pl-k\">=</span>keras.optimizers.Adam(<span class=\"pl-v\">lr</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">1e4</span>), <span class=\"pl-v\">loss</span><span class=\"pl-k\">=</span>[custom_loss(loss_input_layer)])\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Train the model with some example data</span>\ninput_data <span class=\"pl-k\">=</span> np.random.random_sample(<span class=\"pl-c1\">512</span>)\nloss_data <span class=\"pl-k\">=</span> np.random.random_sample(<span class=\"pl-c1\">512</span>)\noutput_data <span class=\"pl-k\">=</span> input_data <span class=\"pl-k\">*</span> <span class=\"pl-k\">-</span><span class=\"pl-c1\">1</span>\n\nmodel.train_on_batch(<span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>[input_data, loss_data], <span class=\"pl-v\">y</span><span class=\"pl-k\">=</span>[output_data])\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Save and load model</span>\nmodel.save(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test.h5<span class=\"pl-pds\">\"</span></span>)\nmodel <span class=\"pl-k\">=</span> keras.models.load_model(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test.h5<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">custom_objects</span><span class=\"pl-k\">=</span>{<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>loss<span class=\"pl-pds\">\"</span></span>: custom_loss(loss_input_layer)})\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Test model</span>\nmodel.predict(<span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>[[np.random.random_sample(<span class=\"pl-c1\">1</span>)], [np.random.random_sample(<span class=\"pl-c1\">1</span>)]])</pre></div>\n<p><strong>Other info / logs</strong></p>\n<pre><code>Traceback (most recent call last):\n  File \"C:/Users/user/test/testTensorboard.py\", line 31, in &lt;module&gt;\n    model.predict(x=[[np.random.random_sample(1)], [np.random.random_sample(1)]])\n  File \"C:\\ProgramData\\Miniconda3\\envs\\SolitairePPO\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 1752, in predict\n    x, check_steps=True, steps_name='steps', steps=steps)\n  File \"C:\\ProgramData\\Miniconda3\\envs\\SolitairePPO\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 993, in _standardize_user_data\n    class_weight, batch_size)\n  File \"C:\\ProgramData\\Miniconda3\\envs\\SolitairePPO\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 1112, in _standardize_weights\n    exception_prefix='input')\n  File \"C:\\ProgramData\\Miniconda3\\envs\\SolitairePPO\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training_utils.py\", line 286, in standardize_input_data\n    str(len(data)) + ' arrays: ' + str(data)[:200] + '...')\nValueError: Error when checking model input: the list of Numpy arrays that you are passing to your model is not the size the model expected. Expected to see 1 array(s), but instead got the following list of 2 arrays: [array([[0.08552315]]), array([[0.11069975]])]...\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Windows 10\nMobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: N/A\nTensorFlow installed from (source or binary): Binary\nTensorFlow version (use command below): b'v1.11.0-rc2-4-gc19e29306c' 1.11.0\nPython version: 3.6.7\nBazel version (if compiling from source): N/A\nGCC/Compiler version (if compiling from source): N/A\nCUDA/cuDNN version: N/A\nGPU model and memory: N/A\n\nDescribe the current behavior\nWhen I save and reload a model that has multiple inputs, but some aren't fed into any layers (they are used in a custom loss function), not all inputs are created in the new model.\nOpening the HDF File of the saved model shows that the input layers aren't saved in the model configuration.\nDescribe the expected behavior\nAll layers should be correctly created\nCode to reproduce the issue\nimport tensorflow.keras as keras\nimport numpy as np\n\n\ndef custom_loss(loss_input):\n    def loss(y_true, y_pred):\n        return y_true * y_pred * loss_input\n    return loss\n\n\n# Create simple model\ninput_layer = keras.Input(shape=(1,))\nloss_input_layer = keras.Input(shape=(1,))\n\noutput = keras.layers.Dense(1)(input_layer)\n\nmodel = keras.Model(inputs=[input_layer, loss_input_layer], outputs=[output])\n\nmodel.compile(optimizer=keras.optimizers.Adam(lr=1e4), loss=[custom_loss(loss_input_layer)])\n\n# Train the model with some example data\ninput_data = np.random.random_sample(512)\nloss_data = np.random.random_sample(512)\noutput_data = input_data * -1\n\nmodel.train_on_batch(x=[input_data, loss_data], y=[output_data])\n\n# Save and load model\nmodel.save(\"test.h5\")\nmodel = keras.models.load_model(\"test.h5\", custom_objects={\"loss\": custom_loss(loss_input_layer)})\n\n# Test model\nmodel.predict(x=[[np.random.random_sample(1)], [np.random.random_sample(1)]])\nOther info / logs\nTraceback (most recent call last):\n  File \"C:/Users/user/test/testTensorboard.py\", line 31, in <module>\n    model.predict(x=[[np.random.random_sample(1)], [np.random.random_sample(1)]])\n  File \"C:\\ProgramData\\Miniconda3\\envs\\SolitairePPO\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 1752, in predict\n    x, check_steps=True, steps_name='steps', steps=steps)\n  File \"C:\\ProgramData\\Miniconda3\\envs\\SolitairePPO\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 993, in _standardize_user_data\n    class_weight, batch_size)\n  File \"C:\\ProgramData\\Miniconda3\\envs\\SolitairePPO\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 1112, in _standardize_weights\n    exception_prefix='input')\n  File \"C:\\ProgramData\\Miniconda3\\envs\\SolitairePPO\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training_utils.py\", line 286, in standardize_input_data\n    str(len(data)) + ' arrays: ' + str(data)[:200] + '...')\nValueError: Error when checking model input: the list of Numpy arrays that you are passing to your model is not the size the model expected. Expected to see 1 array(s), but instead got the following list of 2 arrays: [array([[0.08552315]]), array([[0.11069975]])]...", "body": "**System information**\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): **Yes**\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): **Windows 10**\r\n- Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: **N/A**\r\n- TensorFlow installed from (source or binary): **Binary**\r\n- TensorFlow version (use command below): **b'v1.11.0-rc2-4-gc19e29306c' 1.11.0**\r\n- Python version: **3.6.7**\r\n- Bazel version (if compiling from source): **N/A**\r\n- GCC/Compiler version (if compiling from source): **N/A**\r\n- CUDA/cuDNN version: **N/A**\r\n- GPU model and memory: **N/A**\r\n\r\n**Describe the current behavior**\r\nWhen I save and reload a model that has multiple inputs, but some aren't fed into any layers (they are used in a custom loss function), not all inputs are created in the new model.\r\n\r\nOpening the HDF File of the saved model shows that the input layers aren't saved in the model configuration.\r\n\r\n**Describe the expected behavior**\r\nAll layers should be correctly created\r\n\r\n**Code to reproduce the issue**\r\n```python\r\nimport tensorflow.keras as keras\r\nimport numpy as np\r\n\r\n\r\ndef custom_loss(loss_input):\r\n    def loss(y_true, y_pred):\r\n        return y_true * y_pred * loss_input\r\n    return loss\r\n\r\n\r\n# Create simple model\r\ninput_layer = keras.Input(shape=(1,))\r\nloss_input_layer = keras.Input(shape=(1,))\r\n\r\noutput = keras.layers.Dense(1)(input_layer)\r\n\r\nmodel = keras.Model(inputs=[input_layer, loss_input_layer], outputs=[output])\r\n\r\nmodel.compile(optimizer=keras.optimizers.Adam(lr=1e4), loss=[custom_loss(loss_input_layer)])\r\n\r\n# Train the model with some example data\r\ninput_data = np.random.random_sample(512)\r\nloss_data = np.random.random_sample(512)\r\noutput_data = input_data * -1\r\n\r\nmodel.train_on_batch(x=[input_data, loss_data], y=[output_data])\r\n\r\n# Save and load model\r\nmodel.save(\"test.h5\")\r\nmodel = keras.models.load_model(\"test.h5\", custom_objects={\"loss\": custom_loss(loss_input_layer)})\r\n\r\n# Test model\r\nmodel.predict(x=[[np.random.random_sample(1)], [np.random.random_sample(1)]])\r\n```\r\n\r\n**Other info / logs**\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:/Users/user/test/testTensorboard.py\", line 31, in <module>\r\n    model.predict(x=[[np.random.random_sample(1)], [np.random.random_sample(1)]])\r\n  File \"C:\\ProgramData\\Miniconda3\\envs\\SolitairePPO\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 1752, in predict\r\n    x, check_steps=True, steps_name='steps', steps=steps)\r\n  File \"C:\\ProgramData\\Miniconda3\\envs\\SolitairePPO\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 993, in _standardize_user_data\r\n    class_weight, batch_size)\r\n  File \"C:\\ProgramData\\Miniconda3\\envs\\SolitairePPO\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py\", line 1112, in _standardize_weights\r\n    exception_prefix='input')\r\n  File \"C:\\ProgramData\\Miniconda3\\envs\\SolitairePPO\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training_utils.py\", line 286, in standardize_input_data\r\n    str(len(data)) + ' arrays: ' + str(data)[:200] + '...')\r\nValueError: Error when checking model input: the list of Numpy arrays that you are passing to your model is not the size the model expected. Expected to see 1 array(s), but instead got the following list of 2 arrays: [array([[0.08552315]]), array([[0.11069975]])]...\r\n```\r\n"}