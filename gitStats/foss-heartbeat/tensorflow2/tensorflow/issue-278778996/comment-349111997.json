{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/349111997", "html_url": "https://github.com/tensorflow/tensorflow/issues/15077#issuecomment-349111997", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/15077", "id": 349111997, "node_id": "MDEyOklzc3VlQ29tbWVudDM0OTExMTk5Nw==", "user": {"login": "alextp", "id": 5061, "node_id": "MDQ6VXNlcjUwNjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextp", "html_url": "https://github.com/alextp", "followers_url": "https://api.github.com/users/alextp/followers", "following_url": "https://api.github.com/users/alextp/following{/other_user}", "gists_url": "https://api.github.com/users/alextp/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextp/subscriptions", "organizations_url": "https://api.github.com/users/alextp/orgs", "repos_url": "https://api.github.com/users/alextp/repos", "events_url": "https://api.github.com/users/alextp/events{/privacy}", "received_events_url": "https://api.github.com/users/alextp/received_events", "type": "User", "site_admin": false}, "created_at": "2017-12-04T21:29:38Z", "updated_at": "2017-12-04T21:29:38Z", "author_association": "MEMBER", "body_html": "<p>The only guarantee tensorflow makes about order of execution is that all dependencies (either data or control) of an op are executed before that op gets executed.</p>\n<p>The memory-aliasing behavior of tf.Variable is very hard to understand (which is why I recommend using tfe.Variable instead which has a well-defined memory model). So just switch your code to that and then the behavior of variables will make more sense.</p>\n<p>What is happening here is a complicated interaction between variables and devices and executors and such.</p>\n<p>Because you have two devices here, a GPU and a CPU, the generated graph looks something like the following:</p>\n<pre><code>with tf.device(\"gpu:0\"):\n  x = tf.placeholder(tf.float32, [])\n  y = tf.Variable(2.)\n  __y = tf._send(y, \"__y\")\n  __y2 = tf._send(y, \"__y2\")\n  op = tf.assign(y, x)\n  with tf.control_dependencies([op]):\n    tf._send(_no_op, \"_op\")\n\nwith tf.device(\"cpu:0\"):\n  op = tf._receive(\"_op\")\n  op = tf.Print(op, ['op'])\n  y = tf._receive(\"__y\")\n  with tf.control_dependencies([op]):\n      q = tf.Print(y, [y])\n\n\nwith tf.Session() as sess:\n    tf.global_variables_initializer().run()\n    print(sess.run([q], feed_dict={x: -1.0}))\n</code></pre>\n<p>And then a valid execution order runs the sends for the variable value before it runs the assign op.</p>", "body_text": "The only guarantee tensorflow makes about order of execution is that all dependencies (either data or control) of an op are executed before that op gets executed.\nThe memory-aliasing behavior of tf.Variable is very hard to understand (which is why I recommend using tfe.Variable instead which has a well-defined memory model). So just switch your code to that and then the behavior of variables will make more sense.\nWhat is happening here is a complicated interaction between variables and devices and executors and such.\nBecause you have two devices here, a GPU and a CPU, the generated graph looks something like the following:\nwith tf.device(\"gpu:0\"):\n  x = tf.placeholder(tf.float32, [])\n  y = tf.Variable(2.)\n  __y = tf._send(y, \"__y\")\n  __y2 = tf._send(y, \"__y2\")\n  op = tf.assign(y, x)\n  with tf.control_dependencies([op]):\n    tf._send(_no_op, \"_op\")\n\nwith tf.device(\"cpu:0\"):\n  op = tf._receive(\"_op\")\n  op = tf.Print(op, ['op'])\n  y = tf._receive(\"__y\")\n  with tf.control_dependencies([op]):\n      q = tf.Print(y, [y])\n\n\nwith tf.Session() as sess:\n    tf.global_variables_initializer().run()\n    print(sess.run([q], feed_dict={x: -1.0}))\n\nAnd then a valid execution order runs the sends for the variable value before it runs the assign op.", "body": "The only guarantee tensorflow makes about order of execution is that all dependencies (either data or control) of an op are executed before that op gets executed.\r\n\r\nThe memory-aliasing behavior of tf.Variable is very hard to understand (which is why I recommend using tfe.Variable instead which has a well-defined memory model). So just switch your code to that and then the behavior of variables will make more sense.\r\n\r\nWhat is happening here is a complicated interaction between variables and devices and executors and such. \r\n\r\nBecause you have two devices here, a GPU and a CPU, the generated graph looks something like the following:\r\n\r\n```\r\nwith tf.device(\"gpu:0\"):\r\n  x = tf.placeholder(tf.float32, [])\r\n  y = tf.Variable(2.)\r\n  __y = tf._send(y, \"__y\")\r\n  __y2 = tf._send(y, \"__y2\")\r\n  op = tf.assign(y, x)\r\n  with tf.control_dependencies([op]):\r\n    tf._send(_no_op, \"_op\")\r\n\r\nwith tf.device(\"cpu:0\"):\r\n  op = tf._receive(\"_op\")\r\n  op = tf.Print(op, ['op'])\r\n  y = tf._receive(\"__y\")\r\n  with tf.control_dependencies([op]):\r\n      q = tf.Print(y, [y])\r\n\r\n\r\nwith tf.Session() as sess:\r\n    tf.global_variables_initializer().run()\r\n    print(sess.run([q], feed_dict={x: -1.0}))\r\n```\r\n\r\nAnd then a valid execution order runs the sends for the variable value before it runs the assign op."}