{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7708", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7708/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7708/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7708/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7708", "id": 208964854, "node_id": "MDU6SXNzdWUyMDg5NjQ4NTQ=", "number": 7708, "title": "Visualize experiment arguments in Tensorboard", "user": {"login": "mmuneebs", "id": 16750872, "node_id": "MDQ6VXNlcjE2NzUwODcy", "avatar_url": "https://avatars1.githubusercontent.com/u/16750872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmuneebs", "html_url": "https://github.com/mmuneebs", "followers_url": "https://api.github.com/users/mmuneebs/followers", "following_url": "https://api.github.com/users/mmuneebs/following{/other_user}", "gists_url": "https://api.github.com/users/mmuneebs/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmuneebs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmuneebs/subscriptions", "organizations_url": "https://api.github.com/users/mmuneebs/orgs", "repos_url": "https://api.github.com/users/mmuneebs/repos", "events_url": "https://api.github.com/users/mmuneebs/events{/privacy}", "received_events_url": "https://api.github.com/users/mmuneebs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 284285184, "node_id": "MDU6TGFiZWwyODQyODUxODQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:tensorboard", "name": "comp:tensorboard", "color": "0052cc", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "decentralion", "id": 1400023, "node_id": "MDQ6VXNlcjE0MDAwMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1400023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decentralion", "html_url": "https://github.com/decentralion", "followers_url": "https://api.github.com/users/decentralion/followers", "following_url": "https://api.github.com/users/decentralion/following{/other_user}", "gists_url": "https://api.github.com/users/decentralion/gists{/gist_id}", "starred_url": "https://api.github.com/users/decentralion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decentralion/subscriptions", "organizations_url": "https://api.github.com/users/decentralion/orgs", "repos_url": "https://api.github.com/users/decentralion/repos", "events_url": "https://api.github.com/users/decentralion/events{/privacy}", "received_events_url": "https://api.github.com/users/decentralion/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "decentralion", "id": 1400023, "node_id": "MDQ6VXNlcjE0MDAwMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1400023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decentralion", "html_url": "https://github.com/decentralion", "followers_url": "https://api.github.com/users/decentralion/followers", "following_url": "https://api.github.com/users/decentralion/following{/other_user}", "gists_url": "https://api.github.com/users/decentralion/gists{/gist_id}", "starred_url": "https://api.github.com/users/decentralion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decentralion/subscriptions", "organizations_url": "https://api.github.com/users/decentralion/orgs", "repos_url": "https://api.github.com/users/decentralion/repos", "events_url": "https://api.github.com/users/decentralion/events{/privacy}", "received_events_url": "https://api.github.com/users/decentralion/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2017-02-20T19:29:09Z", "updated_at": "2017-06-16T19:03:52Z", "closed_at": "2017-06-16T19:03:52Z", "author_association": "NONE", "body_html": "<p><strong>Feature request</strong></p>\n<p>I am wondering if it's possible to store the arguments that we pass to the training script to be stored as part of other summaries, and have a way to see those arguments/parameters as notes in a separate tab in Tensorboard.<br>\nReason: It's often hard to track individual training runs and relate them to the training/network config if you change training and network parameters frequently which always happens during hyperparameter search. We can do it manually too but if included in Tensorboard, it would make it one go-to visualizer and comparison tool for everything.<br>\nOne method of doing this that comes to mind is using the <code>tf.app.flags.FLAGS</code> arguments. This would keep everything standardized. Or we could also support <code>argparse</code> directly.<br>\nIs this something in line with Tensorboard's philosophy or is it too straightforward to be a special feature?</p>", "body_text": "Feature request\nI am wondering if it's possible to store the arguments that we pass to the training script to be stored as part of other summaries, and have a way to see those arguments/parameters as notes in a separate tab in Tensorboard.\nReason: It's often hard to track individual training runs and relate them to the training/network config if you change training and network parameters frequently which always happens during hyperparameter search. We can do it manually too but if included in Tensorboard, it would make it one go-to visualizer and comparison tool for everything.\nOne method of doing this that comes to mind is using the tf.app.flags.FLAGS arguments. This would keep everything standardized. Or we could also support argparse directly.\nIs this something in line with Tensorboard's philosophy or is it too straightforward to be a special feature?", "body": "**Feature request**\r\n\r\nI am wondering if it's possible to store the arguments that we pass to the training script to be stored as part of other summaries, and have a way to see those arguments/parameters as notes in a separate tab in Tensorboard.\r\nReason: It's often hard to track individual training runs and relate them to the training/network config if you change training and network parameters frequently which always happens during hyperparameter search. We can do it manually too but if included in Tensorboard, it would make it one go-to visualizer and comparison tool for everything.\r\nOne method of doing this that comes to mind is using the `tf.app.flags.FLAGS` arguments. This would keep everything standardized. Or we could also support `argparse` directly.\r\nIs this something in line with Tensorboard's philosophy or is it too straightforward to be a special feature?"}