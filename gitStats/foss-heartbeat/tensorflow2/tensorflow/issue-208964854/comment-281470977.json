{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/281470977", "html_url": "https://github.com/tensorflow/tensorflow/issues/7708#issuecomment-281470977", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7708", "id": 281470977, "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTQ3MDk3Nw==", "user": {"login": "decentralion", "id": 1400023, "node_id": "MDQ6VXNlcjE0MDAwMjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1400023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decentralion", "html_url": "https://github.com/decentralion", "followers_url": "https://api.github.com/users/decentralion/followers", "following_url": "https://api.github.com/users/decentralion/following{/other_user}", "gists_url": "https://api.github.com/users/decentralion/gists{/gist_id}", "starred_url": "https://api.github.com/users/decentralion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decentralion/subscriptions", "organizations_url": "https://api.github.com/users/decentralion/orgs", "repos_url": "https://api.github.com/users/decentralion/repos", "events_url": "https://api.github.com/users/decentralion/events{/privacy}", "received_events_url": "https://api.github.com/users/decentralion/received_events", "type": "User", "site_admin": false}, "created_at": "2017-02-21T20:31:56Z", "updated_at": "2017-02-21T20:31:56Z", "author_association": "CONTRIBUTOR", "body_html": "<p>One thing I've intended to add for a while is explicit hyperparameter support to TensorBoard.<br>\nThe way I imagine this working is, when you create a summary.FileWriter, you would add a configuration protobuf for the \"run\" which has a universally unique ID, as well as a bunch of configurable metadata for keeping hyperparameter settings.</p>\n<p>Then, this data would be encoded with the run and we could build hyperparameter awareness into TensorBoard.</p>\n<p>The proto would look like this:</p>\n<pre><code>message Run {\n  string uuid = 1;\n  string name = 2;\n  string description = 3;\n  string dataset = 4; // optional param with common dataset name\n  repeated HParam hparams = 5;\n  int64 start_time = 6;\n  // End is 0 until run is complete or if failed.\n  int64 end_time = 7;\n}\n\nmessage HParam {\n// Protocol buffer holding hyperparameters.\n// Examples of hyperparameters:\n//   learning_rate = 0.1,\n//   num_hidden_units = 100,\n//   activations = ['relu', 'tanh']\nmessage HParam {\n  // Required: unique name for this hyperparameter.\n  // Names can be nested into groups using '/' as a delimiter.\n  string name = 1;\n\n  // Required: tensor representing the value of the hyperparameter.\n  TensorProto value = 2;\n\n  // Optional: A human-readable, short, display name for display in a tool UI. If unset, name will be used\n  string display_name = 3;\n\n  // Optional: A long-form description of this hyperparameter tool UI.\n  string description = 4;\n}\n</code></pre>\n<p>This wouldn't be a direct integration with flags; the user code would be responsible for encoding the hyperparameters.</p>\n<p>What do you think of this design?</p>", "body_text": "One thing I've intended to add for a while is explicit hyperparameter support to TensorBoard.\nThe way I imagine this working is, when you create a summary.FileWriter, you would add a configuration protobuf for the \"run\" which has a universally unique ID, as well as a bunch of configurable metadata for keeping hyperparameter settings.\nThen, this data would be encoded with the run and we could build hyperparameter awareness into TensorBoard.\nThe proto would look like this:\nmessage Run {\n  string uuid = 1;\n  string name = 2;\n  string description = 3;\n  string dataset = 4; // optional param with common dataset name\n  repeated HParam hparams = 5;\n  int64 start_time = 6;\n  // End is 0 until run is complete or if failed.\n  int64 end_time = 7;\n}\n\nmessage HParam {\n// Protocol buffer holding hyperparameters.\n// Examples of hyperparameters:\n//   learning_rate = 0.1,\n//   num_hidden_units = 100,\n//   activations = ['relu', 'tanh']\nmessage HParam {\n  // Required: unique name for this hyperparameter.\n  // Names can be nested into groups using '/' as a delimiter.\n  string name = 1;\n\n  // Required: tensor representing the value of the hyperparameter.\n  TensorProto value = 2;\n\n  // Optional: A human-readable, short, display name for display in a tool UI. If unset, name will be used\n  string display_name = 3;\n\n  // Optional: A long-form description of this hyperparameter tool UI.\n  string description = 4;\n}\n\nThis wouldn't be a direct integration with flags; the user code would be responsible for encoding the hyperparameters.\nWhat do you think of this design?", "body": "One thing I've intended to add for a while is explicit hyperparameter support to TensorBoard.\r\nThe way I imagine this working is, when you create a summary.FileWriter, you would add a configuration protobuf for the \"run\" which has a universally unique ID, as well as a bunch of configurable metadata for keeping hyperparameter settings. \r\n\r\nThen, this data would be encoded with the run and we could build hyperparameter awareness into TensorBoard.\r\n\r\nThe proto would look like this: \r\n```\r\nmessage Run {\r\n  string uuid = 1;\r\n  string name = 2;\r\n  string description = 3;\r\n  string dataset = 4; // optional param with common dataset name\r\n  repeated HParam hparams = 5;\r\n  int64 start_time = 6;\r\n  // End is 0 until run is complete or if failed.\r\n  int64 end_time = 7;\r\n}\r\n\r\nmessage HParam {\r\n// Protocol buffer holding hyperparameters.\r\n// Examples of hyperparameters:\r\n//   learning_rate = 0.1,\r\n//   num_hidden_units = 100,\r\n//   activations = ['relu', 'tanh']\r\nmessage HParam {\r\n  // Required: unique name for this hyperparameter.\r\n  // Names can be nested into groups using '/' as a delimiter.\r\n  string name = 1;\r\n\r\n  // Required: tensor representing the value of the hyperparameter.\r\n  TensorProto value = 2;\r\n\r\n  // Optional: A human-readable, short, display name for display in a tool UI. If unset, name will be used\r\n  string display_name = 3;\r\n\r\n  // Optional: A long-form description of this hyperparameter tool UI.\r\n  string description = 4;\r\n}\r\n```\r\n\r\nThis wouldn't be a direct integration with flags; the user code would be responsible for encoding the hyperparameters. \r\n\r\nWhat do you think of this design?"}