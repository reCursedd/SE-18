{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/185047445", "pull_request_review_id": 116361303, "id": 185047445, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTA0NzQ0NQ==", "diff_hunk": "@@ -181,9 +181,14 @@ if (tensorflow_WIN_CPU_SIMD_OPTIONS)\n       add_definitions(-DINTEL_MKL_ML)\n     endif()\n   endif()\n-  CHECK_CXX_COMPILER_FLAG(\"-fopenmp\" COMPILER_OPT_OPENMP_SUPPORT)\n-  if (COMPILER_OPT_OPENMP_SUPPORT)\n+  CHECK_CXX_COMPILER_FLAG(\"-fopenmp\" COMPILER_OPT_OPENMP_SUPPORT1)", "path": "tensorflow/contrib/cmake/CMakeLists.txt", "position": null, "original_position": 6, "commit_id": "b2f8fead8a08eea4075aeec4b57c766c4210b25a", "original_commit_id": "5a429971c112488c35e5ef4d13f9b05c75083336", "user": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "body": "Instead of 1/2 let's use something more explicit.\r\nLet's do GCC_OPENMP_SUPPORT and MSVC_OPENMP_SUPPORT.\r\n\r\nAnd I would simplify the logic like:\r\n```\r\nCHECK_CXX_COMPILER_FLAG(\"-fopenmp\" GCC_OPENMP_SUPPORT)\r\nif (GCC_OPENMP_SUPPORT)\r\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fopenmp\")\r\nendif()\r\n\r\nCHECK_CXX_COMPILER_FLAG(\"/openmp\" MSVC_OPENMP_SUPPORT)\r\nif (MSVC_OPENMP_SUPPORT)\r\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /openmp\")\r\nendif()\r\n```", "created_at": "2018-04-30T17:06:03Z", "updated_at": "2018-04-30T19:59:21Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/18973#discussion_r185047445", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18973", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/185047445"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/18973#discussion_r185047445"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/18973"}}, "body_html": "<p>Instead of 1/2 let's use something more explicit.<br>\nLet's do GCC_OPENMP_SUPPORT and MSVC_OPENMP_SUPPORT.</p>\n<p>And I would simplify the logic like:</p>\n<pre><code>CHECK_CXX_COMPILER_FLAG(\"-fopenmp\" GCC_OPENMP_SUPPORT)\nif (GCC_OPENMP_SUPPORT)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fopenmp\")\nendif()\n\nCHECK_CXX_COMPILER_FLAG(\"/openmp\" MSVC_OPENMP_SUPPORT)\nif (MSVC_OPENMP_SUPPORT)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /openmp\")\nendif()\n</code></pre>", "body_text": "Instead of 1/2 let's use something more explicit.\nLet's do GCC_OPENMP_SUPPORT and MSVC_OPENMP_SUPPORT.\nAnd I would simplify the logic like:\nCHECK_CXX_COMPILER_FLAG(\"-fopenmp\" GCC_OPENMP_SUPPORT)\nif (GCC_OPENMP_SUPPORT)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fopenmp\")\nendif()\n\nCHECK_CXX_COMPILER_FLAG(\"/openmp\" MSVC_OPENMP_SUPPORT)\nif (MSVC_OPENMP_SUPPORT)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /openmp\")\nendif()"}