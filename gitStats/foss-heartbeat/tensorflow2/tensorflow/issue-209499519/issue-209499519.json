{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7781", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7781/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7781/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7781/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7781", "id": 209499519, "node_id": "MDU6SXNzdWUyMDk0OTk1MTk=", "number": 7781, "title": "Distribution of sum of several discrete variables", "user": {"login": "akuz", "id": 2409854, "node_id": "MDQ6VXNlcjI0MDk4NTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2409854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akuz", "html_url": "https://github.com/akuz", "followers_url": "https://api.github.com/users/akuz/followers", "following_url": "https://api.github.com/users/akuz/following{/other_user}", "gists_url": "https://api.github.com/users/akuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/akuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akuz/subscriptions", "organizations_url": "https://api.github.com/users/akuz/orgs", "repos_url": "https://api.github.com/users/akuz/repos", "events_url": "https://api.github.com/users/akuz/events{/privacy}", "received_events_url": "https://api.github.com/users/akuz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}, {"id": 473173272, "node_id": "MDU6TGFiZWw0NzMxNzMyNzI=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/type:feature", "name": "type:feature", "color": "159b2e", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "vincentvanhoucke", "id": 15737127, "node_id": "MDQ6VXNlcjE1NzM3MTI3", "avatar_url": "https://avatars3.githubusercontent.com/u/15737127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincentvanhoucke", "html_url": "https://github.com/vincentvanhoucke", "followers_url": "https://api.github.com/users/vincentvanhoucke/followers", "following_url": "https://api.github.com/users/vincentvanhoucke/following{/other_user}", "gists_url": "https://api.github.com/users/vincentvanhoucke/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincentvanhoucke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincentvanhoucke/subscriptions", "organizations_url": "https://api.github.com/users/vincentvanhoucke/orgs", "repos_url": "https://api.github.com/users/vincentvanhoucke/repos", "events_url": "https://api.github.com/users/vincentvanhoucke/events{/privacy}", "received_events_url": "https://api.github.com/users/vincentvanhoucke/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "vincentvanhoucke", "id": 15737127, "node_id": "MDQ6VXNlcjE1NzM3MTI3", "avatar_url": "https://avatars3.githubusercontent.com/u/15737127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincentvanhoucke", "html_url": "https://github.com/vincentvanhoucke", "followers_url": "https://api.github.com/users/vincentvanhoucke/followers", "following_url": "https://api.github.com/users/vincentvanhoucke/following{/other_user}", "gists_url": "https://api.github.com/users/vincentvanhoucke/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincentvanhoucke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincentvanhoucke/subscriptions", "organizations_url": "https://api.github.com/users/vincentvanhoucke/orgs", "repos_url": "https://api.github.com/users/vincentvanhoucke/repos", "events_url": "https://api.github.com/users/vincentvanhoucke/events{/privacy}", "received_events_url": "https://api.github.com/users/vincentvanhoucke/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-02-22T16:06:26Z", "updated_at": "2017-02-23T22:31:29Z", "closed_at": "2017-02-23T22:31:29Z", "author_association": "NONE", "body_html": "<p>I've looked for this feature, and I don't think it exists, but it would be really useful for modelling the latent variable models which result in the observation being a <strong>sum</strong> of several discrete variables. This would be especially useful in signal processing, where different signals add up. Additionally, the idea I am presenting below involves clipping, which is also a feature of the signal recording equipment.</p>\n<p>Let's say I have a discrete set of signal values that I am tracking, like so:</p>\n<pre><code>x = tf.constant(\n    [-2.0, -1.0, 0.0, 1.0, 2.0],\n    name='x')\n</code></pre>\n<p>It is important for the below that the values in x are sequential and equally spaced. In fact, I am only interested in integer values centered around zero.</p>\n<p>Let's say that some latent variable model produces the probabilities of 3 signals taking on these specific values like so (I am writing as a constant, but it will be in fact a variable):</p>\n<pre><code>p = tf.constant(\n    [[0.1, 0.1, 0.2, 0.4,  0.2],\n     [0.5, 0.3, 0.1, 0.05, 0.05],\n     [0.1, 0.2, 0.4, 0.2,  0.1]],\n    name='p')\n</code></pre>\n<p>Assuming these three variables are independent, I would now like a function res = f(x, p) that would compute res[i] = p(sum(signal1 + signal2 + signal3) = x[i]) for 0 &lt; i &lt; len(x) -1.</p>\n<p>Moreover, for at the edges if should produce the output like so (clipping): res[0] = p(sum(signal1 + signal2 + signal3) &lt;= x[0]) and res[-1] = p(sum(signal1 + signal2 + signal3) &gt;= x[-1])</p>\n<p>The output of this operation would be of the same shape as x. The result of the operation would be equivalent to a series of convolutions with clipping: conv(p[-1,:], conv(... conv(p[0, :], p[1, :]))). Here we assume the normal convolution function (not cross-correlation).</p>\n<p>It might be useful to return the results in the log-space (and be able to accept the inputs as logits too).</p>", "body_text": "I've looked for this feature, and I don't think it exists, but it would be really useful for modelling the latent variable models which result in the observation being a sum of several discrete variables. This would be especially useful in signal processing, where different signals add up. Additionally, the idea I am presenting below involves clipping, which is also a feature of the signal recording equipment.\nLet's say I have a discrete set of signal values that I am tracking, like so:\nx = tf.constant(\n    [-2.0, -1.0, 0.0, 1.0, 2.0],\n    name='x')\n\nIt is important for the below that the values in x are sequential and equally spaced. In fact, I am only interested in integer values centered around zero.\nLet's say that some latent variable model produces the probabilities of 3 signals taking on these specific values like so (I am writing as a constant, but it will be in fact a variable):\np = tf.constant(\n    [[0.1, 0.1, 0.2, 0.4,  0.2],\n     [0.5, 0.3, 0.1, 0.05, 0.05],\n     [0.1, 0.2, 0.4, 0.2,  0.1]],\n    name='p')\n\nAssuming these three variables are independent, I would now like a function res = f(x, p) that would compute res[i] = p(sum(signal1 + signal2 + signal3) = x[i]) for 0 < i < len(x) -1.\nMoreover, for at the edges if should produce the output like so (clipping): res[0] = p(sum(signal1 + signal2 + signal3) <= x[0]) and res[-1] = p(sum(signal1 + signal2 + signal3) >= x[-1])\nThe output of this operation would be of the same shape as x. The result of the operation would be equivalent to a series of convolutions with clipping: conv(p[-1,:], conv(... conv(p[0, :], p[1, :]))). Here we assume the normal convolution function (not cross-correlation).\nIt might be useful to return the results in the log-space (and be able to accept the inputs as logits too).", "body": "I've looked for this feature, and I don't think it exists, but it would be really useful for modelling the latent variable models which result in the observation being a **sum** of several discrete variables. This would be especially useful in signal processing, where different signals add up. Additionally, the idea I am presenting below involves clipping, which is also a feature of the signal recording equipment.\r\n\r\nLet's say I have a discrete set of signal values that I am tracking, like so:\r\n```\r\nx = tf.constant(\r\n    [-2.0, -1.0, 0.0, 1.0, 2.0],\r\n    name='x')\r\n```\r\nIt is important for the below that the values in x are sequential and equally spaced. In fact, I am only interested in integer values centered around zero.\r\n\r\nLet's say that some latent variable model produces the probabilities of 3 signals taking on these specific values like so (I am writing as a constant, but it will be in fact a variable):\r\n```\r\np = tf.constant(\r\n    [[0.1, 0.1, 0.2, 0.4,  0.2],\r\n     [0.5, 0.3, 0.1, 0.05, 0.05],\r\n     [0.1, 0.2, 0.4, 0.2,  0.1]],\r\n    name='p')\r\n```\r\nAssuming these three variables are independent, I would now like a function res = f(x, p) that would compute res[i] = p(sum(signal1 + signal2 + signal3) = x[i]) for 0 < i < len(x) -1. \r\n\r\nMoreover, for at the edges if should produce the output like so (clipping): res[0] = p(sum(signal1 + signal2 + signal3) <= x[0]) and res[-1] = p(sum(signal1 + signal2 + signal3) >= x[-1])\r\n\r\nThe output of this operation would be of the same shape as x. The result of the operation would be equivalent to a series of convolutions with clipping: conv(p[-1,:], conv(... conv(p[0, :], p[1, :]))). Here we assume the normal convolution function (not cross-correlation).\r\n\r\nIt might be useful to return the results in the log-space (and be able to accept the inputs as logits too).\r\n"}