{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/229824203", "html_url": "https://github.com/tensorflow/tensorflow/issues/3126#issuecomment-229824203", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3126", "id": 229824203, "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTgyNDIwMw==", "user": {"login": "dzhyeon", "id": 6189571, "node_id": "MDQ6VXNlcjYxODk1NzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6189571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzhyeon", "html_url": "https://github.com/dzhyeon", "followers_url": "https://api.github.com/users/dzhyeon/followers", "following_url": "https://api.github.com/users/dzhyeon/following{/other_user}", "gists_url": "https://api.github.com/users/dzhyeon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzhyeon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzhyeon/subscriptions", "organizations_url": "https://api.github.com/users/dzhyeon/orgs", "repos_url": "https://api.github.com/users/dzhyeon/repos", "events_url": "https://api.github.com/users/dzhyeon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzhyeon/received_events", "type": "User", "site_admin": false}, "created_at": "2016-07-01T00:21:44Z", "updated_at": "2016-07-01T00:23:00Z", "author_association": "NONE", "body_html": "<p>Here is the code. when printing out std::cout &lt;&lt;  node-&gt;device() &lt;&lt; std::endl, /gpu:0 was printed out. But no GPU was running.</p>\n<p>#include &lt;opencv2/core/core.hpp&gt;<br>\n#include &lt;opencv2/highgui/highgui.hpp&gt;<br>\n#include </p>\n<p>#include \"tensorflow/core/public/session.h\"<br>\n#include \"tensorflow/core/platform/env.h\"<br>\n#include \"tensorflow/core/graph/default_device.h\"<br>\n#include \"tensorflow/core/graph/graph_def_builder.h\"</p>\n<p>using namespace tensorflow;</p>\n<p>int main(int argc, char* argv[]) {</p>\n<p>int width=100;<br>\nint height=100;<br>\ncv::Mat image = cv::imread(\"/home/myname/test1.jpg\");<br>\nimage.convertTo(image, CV_32FC1);</p>\n<p>// Initialize a tensorflow session<br>\nSession* session;<br>\nStatus status = NewSession(SessionOptions(), &amp;session);<br>\nif (!status.ok()) {<br>\nstd::cout &lt;&lt; status.ToString() &lt;&lt; \"\\n\";<br>\nreturn 1;<br>\n}</p>\n<p>// Read in the protobuf graph we exported<br>\n// (The path seems to be relative to the cwd. Keep this in mind<br>\n// when using <code>bazel run</code> since the cwd isn't where you call<br>\n// <code>bazel run</code> but from inside a temp folder.)'/home/daejin/test_model2', 'train.pb'<br>\nGraphDef graph_def;</p>\n<p>status = ReadBinaryProto(Env::Default(), \"/home/daejin/test_model2/train.pb\", &amp;graph_def);<br>\nif (!status.ok()) {<br>\nstd::cout &lt;&lt; status.ToString() &lt;&lt; \"\\n\";<br>\nreturn 1;<br>\n}</p>\n<p>// Add the graph to the session<br>\nstatus = session-&gt;Create(graph_def);<br>\nconst std::string device = \"/gpu:0\";<br>\nstd::vector vNames;<br>\nint node_count = graph_def.node_size();<br>\nfor (int i = 0; i &lt; node_count; i++) {<br>\nauto n = graph_def.node(i);<br>\nif (n.name().find(\"nWeights\") != std::string::npos) {<br>\nvNames.push_back(n.name());<br>\n}<br>\nauto node = graph_def.mutable_node(i);<br>\nnode-&gt;set_device(device);<br>\nstd::cout &lt;&lt;  node-&gt;device() &lt;&lt; std::endl;<br>\n}</p>\n<p>std::vectortensorflow::Tensor out1;<br>\nsession-&gt;Run({}, vNames, {}, &amp;out1);<br>\nTensor input(tensorflow::DT_FLOAT, {1, height, width,3});<br>\nTensor learning_phase(tensorflow::DT_UINT8, TensorShape());<br>\nlearning_phase.scalar()()=0;<br>\nstd::copy_n(image.begin(), width*height,<br>\ninput.flat().data());</p>\n<p>graph::SetDefaultDevice(\"/gpu:0\", &amp;graph_def);</p>\n<p>// The session will initialize the outputs<br>\nstd::vectortensorflow::Tensor outputs;</p>\n<p>const TensorShape expected_shape({1, height, width,1});<br>\ncv::Mat outMat = cv::Mat::zeros(height, width, CV_32FC1);</p>\n<p>status = session-&gt;Run(<br>\n{{\"input1:0\", input}},<br>\n{\"output1:0\"}, {}, &amp;outputs);<br>\nif (!status.ok()) {<br>\nstd::cout &lt;&lt; status.ToString() &lt;&lt; \"\\n\";<br>\nreturn 1;<br>\n}<br>\n}</p>", "body_text": "Here is the code. when printing out std::cout <<  node->device() << std::endl, /gpu:0 was printed out. But no GPU was running.\n#include <opencv2/core/core.hpp>\n#include <opencv2/highgui/highgui.hpp>\n#include \n#include \"tensorflow/core/public/session.h\"\n#include \"tensorflow/core/platform/env.h\"\n#include \"tensorflow/core/graph/default_device.h\"\n#include \"tensorflow/core/graph/graph_def_builder.h\"\nusing namespace tensorflow;\nint main(int argc, char* argv[]) {\nint width=100;\nint height=100;\ncv::Mat image = cv::imread(\"/home/myname/test1.jpg\");\nimage.convertTo(image, CV_32FC1);\n// Initialize a tensorflow session\nSession* session;\nStatus status = NewSession(SessionOptions(), &session);\nif (!status.ok()) {\nstd::cout << status.ToString() << \"\\n\";\nreturn 1;\n}\n// Read in the protobuf graph we exported\n// (The path seems to be relative to the cwd. Keep this in mind\n// when using bazel run since the cwd isn't where you call\n// bazel run but from inside a temp folder.)'/home/daejin/test_model2', 'train.pb'\nGraphDef graph_def;\nstatus = ReadBinaryProto(Env::Default(), \"/home/daejin/test_model2/train.pb\", &graph_def);\nif (!status.ok()) {\nstd::cout << status.ToString() << \"\\n\";\nreturn 1;\n}\n// Add the graph to the session\nstatus = session->Create(graph_def);\nconst std::string device = \"/gpu:0\";\nstd::vector vNames;\nint node_count = graph_def.node_size();\nfor (int i = 0; i < node_count; i++) {\nauto n = graph_def.node(i);\nif (n.name().find(\"nWeights\") != std::string::npos) {\nvNames.push_back(n.name());\n}\nauto node = graph_def.mutable_node(i);\nnode->set_device(device);\nstd::cout <<  node->device() << std::endl;\n}\nstd::vectortensorflow::Tensor out1;\nsession->Run({}, vNames, {}, &out1);\nTensor input(tensorflow::DT_FLOAT, {1, height, width,3});\nTensor learning_phase(tensorflow::DT_UINT8, TensorShape());\nlearning_phase.scalar()()=0;\nstd::copy_n(image.begin(), width*height,\ninput.flat().data());\ngraph::SetDefaultDevice(\"/gpu:0\", &graph_def);\n// The session will initialize the outputs\nstd::vectortensorflow::Tensor outputs;\nconst TensorShape expected_shape({1, height, width,1});\ncv::Mat outMat = cv::Mat::zeros(height, width, CV_32FC1);\nstatus = session->Run(\n{{\"input1:0\", input}},\n{\"output1:0\"}, {}, &outputs);\nif (!status.ok()) {\nstd::cout << status.ToString() << \"\\n\";\nreturn 1;\n}\n}", "body": "Here is the code. when printing out std::cout <<  node->device() << std::endl, /gpu:0 was printed out. But no GPU was running. \n\n#include <opencv2/core/core.hpp>\n#include <opencv2/highgui/highgui.hpp>\n#include <iostream>\n\n#include \"tensorflow/core/public/session.h\"\n#include \"tensorflow/core/platform/env.h\"\n#include \"tensorflow/core/graph/default_device.h\"\n#include \"tensorflow/core/graph/graph_def_builder.h\"\n\nusing namespace tensorflow;\n\nint main(int argc, char\\* argv[]) {\n\n  int width=100;\n  int height=100;\n  cv::Mat image = cv::imread(\"/home/myname/test1.jpg\");\n  image.convertTo(image, CV_32FC1);\n\n  // Initialize a tensorflow session\n  Session\\* session;\n  Status status = NewSession(SessionOptions(), &session);\n  if (!status.ok()) {\n    std::cout << status.ToString() << \"\\n\";\n    return 1;\n  }\n\n  // Read in the protobuf graph we exported\n  // (The path seems to be relative to the cwd. Keep this in mind\n  // when using `bazel run` since the cwd isn't where you call\n  // `bazel run` but from inside a temp folder.)'/home/daejin/test_model2', 'train.pb'\n  GraphDef graph_def;\n\n  status = ReadBinaryProto(Env::Default(), \"/home/daejin/test_model2/train.pb\", &graph_def);\n  if (!status.ok()) {\n    std::cout << status.ToString() << \"\\n\";\n    return 1;\n  }\n\n  // Add the graph to the session\n  status = session->Create(graph_def);\n  const std::string device = \"/gpu:0\";\n  std::vector<string> vNames;\n  int node_count = graph_def.node_size();\n  for (int i = 0; i < node_count; i++) {\n      auto n = graph_def.node(i);\n       if (n.name().find(\"nWeights\") != std::string::npos) {\n          vNames.push_back(n.name());\n      }\n      auto node = graph_def.mutable_node(i);\n      node->set_device(device);\n      std::cout <<  node->device() << std::endl;\n  }\n\n  std::vectortensorflow::Tensor out1;\n  session->Run({}, vNames, {}, &out1);\n  Tensor input(tensorflow::DT_FLOAT, {1, height, width,3});\n  Tensor learning_phase(tensorflow::DT_UINT8, TensorShape());\n  learning_phase.scalar<uchar>()()=0;\n  std::copy_n(image.begin<float>(), width*height,\n              input.flat<float>().data());\n\n  graph::SetDefaultDevice(\"/gpu:0\", &graph_def);\n\n  // The session will initialize the outputs\n  std::vectortensorflow::Tensor outputs;\n\n  const TensorShape expected_shape({1, height, width,1});\n  cv::Mat outMat = cv::Mat::zeros(height, width, CV_32FC1);\n\n  status = session->Run(\n        {{\"input1:0\", input}},\n        {\"output1:0\"}, {}, &outputs);\n  if (!status.ok()) {\n    std::cout << status.ToString() << \"\\n\";\n    return 1;\n  }\n}\n"}