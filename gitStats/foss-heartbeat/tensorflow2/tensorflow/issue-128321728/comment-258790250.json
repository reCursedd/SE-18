{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/258790250", "html_url": "https://github.com/tensorflow/tensorflow/issues/851#issuecomment-258790250", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/851", "id": 258790250, "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODc5MDI1MA==", "user": {"login": "elirex", "id": 2871834, "node_id": "MDQ6VXNlcjI4NzE4MzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2871834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elirex", "html_url": "https://github.com/elirex", "followers_url": "https://api.github.com/users/elirex/followers", "following_url": "https://api.github.com/users/elirex/following{/other_user}", "gists_url": "https://api.github.com/users/elirex/gists{/gist_id}", "starred_url": "https://api.github.com/users/elirex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elirex/subscriptions", "organizations_url": "https://api.github.com/users/elirex/orgs", "repos_url": "https://api.github.com/users/elirex/repos", "events_url": "https://api.github.com/users/elirex/events{/privacy}", "received_events_url": "https://api.github.com/users/elirex/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-07T09:47:16Z", "updated_at": "2016-11-09T08:26:12Z", "author_association": "CONTRIBUTOR", "body_html": "<h1>Build tensorflow r0.11 on Nvidia TX1 failed</h1>\n<h2>Error message:</h2>\n<div class=\"highlight highlight-source-shell\"><pre>ERROR: .../tensorflow/core/kernels/BUILD:1096:1: C++ compilation of rule <span class=\"pl-s\"><span class=\"pl-pds\">'</span>//tensorflow/core/kernels:svd_op<span class=\"pl-pds\">'</span></span> failed: crosstool_wrapper_driver_is_not_gcc failed: error executing <span class=\"pl-c1\">command</span>\n ...\ncom.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 4.\ngcc: internal compiler error: Killed (program cc1plus)\nPlease submit a full bug report,\nwith preprocessed <span class=\"pl-c1\">source</span> <span class=\"pl-k\">if</span> appropriate.\nSee <span class=\"pl-k\">&lt;</span>file:///usr/share/doc/gcc-5.4/README.Bugs<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">for</span> instructions.\nTarget //tensorflow/cc:tutorials_example_trainer failed to build</pre></div>\n<p>My build steps and environment:</p>\n<h3>Environment</h3>\n<ul>\n<li>Hardware: Nvidia TX1</li>\n<li>OS: JetPack 2.3 (Ubuntu 16.04)</li>\n<li>cuDNN:5.1</li>\n<li>CUDA: 8</li>\n</ul>\n<h3>Install Java</h3>\n<div class=\"highlight highlight-source-shell\"><pre>$ sudo add-apt-repository ppa:webupd8team/java\n$ sudo apt-get update\n$ sudo apt-get install oracle-java8-installer</pre></div>\n<h3>Install some deps</h3>\n<div class=\"highlight highlight-source-shell\"><pre>$ sudo apt-get install git zip unzip autoconf automake libtool curl zlib1g-dev maven\n$ sudo apt-get install python-numpy swig python-dev python-wheel</pre></div>\n<h3>Build protobuf</h3>\n<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> For grpc-java build</span>\n$ git clone https://github.com/google/protobuf.git\n$ <span class=\"pl-c1\">cd</span> protobuf\n$ git checkout master\n$ ./autogen.sh\n$ git checkout v3.0.0-beta-3\n$ ./autogen.sh\n$ LDFLAGS=-static ./configure --prefix=<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>pwd<span class=\"pl-pds\">)</span></span>/../\n$ sed -i -e <span class=\"pl-s\"><span class=\"pl-pds\">'</span>s/LDFLAGS = -static/LDFLAGS = -all-static/<span class=\"pl-pds\">'</span></span> ./src/Makefile\n$ make -j 4\n$ make install\n\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> For bazel build</span>\n$ git checkout v3.0.0-beta-2\n$./autogen.sh\n$ LDFLAGS=-static ./configure --prefix=<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>pwd<span class=\"pl-pds\">)</span></span>/../\n$ sed -i -e <span class=\"pl-s\"><span class=\"pl-pds\">'</span>s/LDFLAGS = -static/LDFLAGS = -all-static/<span class=\"pl-pds\">'</span></span> ./src/Makefile\n$ make -j 4\n$ <span class=\"pl-c1\">cd</span> ..</pre></div>\n<h3>Build grpc-java compiler</h3>\n<div class=\"highlight highlight-source-shell\"><pre>$ git clone https://github.com/neo-titans/odroid.git\n$ git clone https://github.com/grpc/grpc-java-git\n$ <span class=\"pl-c1\">cd</span> grpc-java/\n$ git checkout v0.15.0\n$ patch -p0 <span class=\"pl-k\">&lt;</span> ../odroid/build_tensorflow/grpc-java.v0.15.0.patch\n$ CXXFLAGS=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-I<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>pwd<span class=\"pl-pds\">)</span></span>/../include<span class=\"pl-pds\">\"</span></span> LDFLAGS=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-L<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>pwd<span class=\"pl-pds\">)</span></span>/../lib<span class=\"pl-pds\">\"</span></span> ./gradlew java_pluginExecutable -Pprotoc=<span class=\"pl-s\"><span class=\"pl-pds\">$(</span>pwd<span class=\"pl-pds\">)</span></span>/../bin/protoc\n$ <span class=\"pl-c1\">cd</span> ..</pre></div>\n<h3>Build bazel</h3>\n<div class=\"highlight highlight-source-shell\"><pre>$ git clone https://github.com/bazelbuild/bazel.git\n$ <span class=\"pl-c1\">cd</span> bazel\n$ git checkout 0.3.2\n$ cp ../protobuf/src/protoc third_party/protobuf/protoc-linux-arm32.exe\n$ cp ../grpc-java/compiler/build/exe/java_plugin/protoc-gen-grpc-java third_party/grpc/protoc-gen-grpc-java-0.15.0-linux-arm32.exe</pre></div>\n<p>Modify some files for build on aarch64</p>\n<pre lang=\"code\"><code>diff --git a/compile.sh b/compile.sh\nindex 53fc412..11035d9 100755\n--- a/compile.sh\n+++ b/compile.sh\n@@ -27,7 +27,7 @@ cd \"$(dirname \"$0\")\"\n # Set the default verbose mode in buildenv.sh so that we do not display command\n # output unless there is a failure.  We do this conditionally to offer the user\n # a chance of overriding this in case they want to do so.\n-: ${VERBOSE:=no}\n+: ${VERBOSE:=yes}\n\n source scripts/bootstrap/buildenv.sh\n\ndiff --git a/scripts/bootstrap/compile.sh b/scripts/bootstrap/compile.sh\nindex 77372f0..657b254 100755\n--- a/scripts/bootstrap/compile.sh\n+++ b/scripts/bootstrap/compile.sh\n@@ -48,6 +48,7 @@ linux)\n   else\n     if [ \"${MACHINE_IS_ARM}\" = 'yes' ]; then\n       PROTOC=${PROTOC:-third_party/protobuf/protoc-linux-arm32.exe}\n+      GRPC_JAVA_PLUGIN=${GRPC_JAVA_PLUGIN:-third_party/grpc/protoc-gen-grpc-java-0.15.0-linux-arm32.exe}\n     else\n       PROTOC=${PROTOC:-third_party/protobuf/protoc-linux-x86_32.exe}\n       GRPC_JAVA_PLUGIN=${GRPC_JAVA_PLUGIN:-third_party/grpc/protoc-gen-grpc-java-0.15.0-linux-x86_32.exe}\n@@ -150,7 +151,7 @@ function java_compilation() {\n\n   run \"${JAVAC}\" -classpath \"${classpath}\" -sourcepath \"${sourcepath}\" \\\n       -d \"${output}/classes\" -source \"$JAVA_VERSION\" -target \"$JAVA_VERSION\" \\\n-      -encoding UTF-8 \"@${paramfile}\"\n+      -encoding UTF-8 \"@${paramfile}\" -J-Xmx500M\n\n   log \"Extracting helper classes for $name...\"\n   for f in ${library_jars} ; do\ndiff --git a/src/main/java/com/google/devtools/build/lib/util/CPU.java b/src/main/java/com/google/devtools/build/lib/util/CPU.java\nindex 41af4b1..4d80610 100644\n--- a/src/main/java/com/google/devtools/build/lib/util/CPU.java\n+++ b/src/main/java/com/google/devtools/build/lib/util/CPU.java\n@@ -26,7 +26,7 @@ public enum CPU {\n   X86_32(\"x86_32\", ImmutableSet.of(\"i386\", \"i486\", \"i586\", \"i686\", \"i786\", \"x86\")),\n   X86_64(\"x86_64\", ImmutableSet.of(\"amd64\", \"x86_64\", \"x64\")),\n   PPC(\"ppc\", ImmutableSet.of(\"ppc\", \"ppc64\", \"ppc64le\")),\n-  ARM(\"arm\", ImmutableSet.of(\"arm\", \"armv7l\")),\n+  ARM(\"arm\", ImmutableSet.of(\"arm\", \"armv7l\", \"aarch64\")),\n   UNKNOWN(\"unknown\", ImmutableSet.&lt;String&gt;of());\n\n   private final String canonicalName;\ndiff --git a/third_party/grpc/BUILD b/third_party/grpc/BUILD\nindex 2ba07e3..c7925ff 100644\n--- a/third_party/grpc/BUILD\n+++ b/third_party/grpc/BUILD\n@@ -29,7 +29,7 @@ filegroup(\n         \"//third_party:darwin\": [\"protoc-gen-grpc-java-0.15.0-osx-x86_64.exe\"],\n         \"//third_party:k8\": [\"protoc-gen-grpc-java-0.15.0-linux-x86_64.exe\"],\n         \"//third_party:piii\": [\"protoc-gen-grpc-java-0.15.0-linux-x86_32.exe\"],\n-        \"//third_party:arm\": [\"protoc-gen-grpc-java-0.15.0-linux-x86_32.exe\"],\n+        \"//third_party:arm\": [\"protoc-gen-grpc-java-0.15.0-linux-arm32.exe\"],\n         \"//third_party:freebsd\": [\"protoc-gen-grpc-java-0.15.0-linux-x86_32.exe\"],\n     }),\n )\ndiff --git a/third_party/protobuf/BUILD b/third_party/protobuf/BUILD\nindex 203fe51..4c2a316 100644\n--- a/third_party/protobuf/BUILD\n+++ b/third_party/protobuf/BUILD\n@@ -28,6 +28,7 @@ filegroup(\n         \"//third_party:darwin\": [\"protoc-osx-x86_32.exe\"],\n         \"//third_party:k8\": [\"protoc-linux-x86_64.exe\"],\n         \"//third_party:piii\": [\"protoc-linux-x86_32.exe\"],\n+        \"//third_party:arm\": [\"protoc-linux-arm32.exe\"],\n         \"//third_party:freebsd\": [\"protoc-linux-x86_32.exe\"],\n     }),\n )\ndiff --git a/tools/cpp/cc_configure.bzl b/tools/cpp/cc_configure.bzl\nindex aeb0715..688835d 100644\n--- a/tools/cpp/cc_configure.bzl\n+++ b/tools/cpp/cc_configure.bzl\n@@ -150,7 +150,12 @@ def _get_cpu_value(repository_ctx):\n     return \"x64_windows\"\n   # Use uname to figure out whether we are on x86_32 or x86_64\n   result = repository_ctx.execute([\"uname\", \"-m\"])\n-  return \"k8\" if result.stdout.strip() in [\"amd64\", \"x86_64\", \"x64\"] else \"piii\"\n+  machine = result.stdout.strip()\n+  if machine in [\"arm\", \"armv7l\", \"aarch64\"]:\n+   return \"arm\"\n+  elif machine in [\"amd64\", \"x86_64\", \"x64\"]:\n+   return \"k8\"\n+  return \"piii\"\n\n\n _INC_DIR_MARKER_BEGIN = \"#include &lt;...&gt;\"\n</code></pre>\n<p>compile</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ ./compile.sh \n$ cd..</pre></div>\n<h3>Build Tensorflow</h3>\n<div class=\"highlight highlight-source-shell\"><pre>$ git clone https://github.com/tensorflow/tensorflow.git\n$ git checkout v0.11.0.rc2</pre></div>\n<p>According to StackOverflow's <a href=\"http://stackoverflow.com/questions/39783919/tensorflow-on-nvidia-tx1/\" rel=\"nofollow\">tensorflow-on-nvidia-tx1</a> to modify</p>\n<pre lang=\"code\"><code>diff --git a/tensorflow/core/kernels/BUILD b/tensorflow/core/kernels/BUILD\nindex 2e04827..9d81923 100644\n--- a/tensorflow/core/kernels/BUILD\n+++ b/tensorflow/core/kernels/BUILD\n@@ -1184,7 +1184,7 @@ tf_kernel_libraries(\n         \"segment_reduction_ops\",\n         \"scan_ops\",\n         \"sequence_ops\",\n-        \"sparse_matmul_op\",\n+        #DC \"sparse_matmul_op\",\n     ],\n     deps = [\n         \":bounds_check\",\ndiff --git a/tensorflow/core/kernels/cwise_op_gpu_select.cu.cc b/tensorflow/core/kernels/cwise_op_gpu_select.cu.cc\nindex 02058a8..880a0c3 100644\n--- a/tensorflow/core/kernels/cwise_op_gpu_select.cu.cc\n+++ b/tensorflow/core/kernels/cwise_op_gpu_select.cu.cc\n@@ -43,8 +43,14 @@ struct BatchSelectFunctor&lt;GPUDevice, T&gt; {\n     const int all_but_batch = then_flat_outer_dims.dimension(1);\n\n #if !defined(EIGEN_HAS_INDEX_LIST)\n-    Eigen::array&lt;int, 2&gt; broadcast_dims{{ 1, all_but_batch }};\n-    Eigen::Tensor&lt;int, 2&gt;::Dimensions reshape_dims{{ batch, 1 }};\n+    // Eigen::array&lt;int, 2&gt; broadcast_dims{{ 1, all_but_batch }};\n+    Eigen::array&lt;int, 2&gt; broadcast_dims;\n+   broadcast_dims[0] = 1;\n+    broadcast_dims[1] = all_but_batch;\n+    // Eigen::Tensor&lt;int, 2&gt;::Dimensions reshape_dims{{ batch, 1 }};\n+    Eigen::Tensor&lt;int, 2&gt;::Dimensions reshape_dims;\n+   reshape_dims[0] = batch;\n+   reshape_dims[1] = 1;\n #else\n     Eigen::IndexList&lt;Eigen::type2index&lt;1&gt;, int&gt; broadcast_dims;\n     broadcast_dims.set(1, all_but_batch);\ndiff --git a/tensorflow/core/kernels/sparse_tensor_dense_matmul_op_gpu.cu.cc b/tensorflow/core/kernels/sparse_tensor_dense_matmul_op_gpu.cu.cc\nindex a177696..28d2f59 100644\n--- a/tensorflow/core/kernels/sparse_tensor_dense_matmul_op_gpu.cu.cc\n+++ b/tensorflow/core/kernels/sparse_tensor_dense_matmul_op_gpu.cu.cc\n@@ -104,9 +104,17 @@ struct SparseTensorDenseMatMulFunctor&lt;GPUDevice, T, ADJ_A, ADJ_B&gt; {\n     int n = (ADJ_B) ? b.dimension(0) : b.dimension(1);\n\n #if !defined(EIGEN_HAS_INDEX_LIST)\n-    Eigen::Tensor&lt;int, 2&gt;::Dimensions matrix_1_by_nnz{{ 1, nnz }};\n-    Eigen::array&lt;int, 2&gt; n_by_1{{ n, 1 }};\n-    Eigen::array&lt;int, 1&gt; reduce_on_rows{{ 0 }};\n+    // Eigen::Tensor&lt;int, 2&gt;::Dimensions matrix_1_by_nnz{{ 1, nnz }};\n+    Eigen::Tensor&lt;int, 2&gt;::Dimensions matrix_1_by_nnz;\n+   matrix_1_by_nnz[0] = 1;\n+   matrix_1_by_nnz[1] = nnz;\n+    // Eigen::array&lt;int, 2&gt; n_by_1{{ n, 1 }};\n+    Eigen::array&lt;int, 2&gt; n_by_1;\n+   n_by_1[0] = n;\n+   n_by_1[1] = 1;\n+    // Eigen::array&lt;int, 1&gt; reduce_on_rows{{ 0 }};\n+    Eigen::array&lt;int, 1&gt; reduce_on_rows;\n+   reduce_on_rows[0]= 0;\n #else\n     Eigen::IndexList&lt;Eigen::type2index&lt;1&gt;, int&gt; matrix_1_by_nnz;\n     matrix_1_by_nnz.set(1, nnz);\ndiff --git a/tensorflow/stream_executor/cuda/cuda_gpu_executor.cc b/tensorflow/stream_executor/cuda/cuda_gpu_executor.cc\nindex 52256a7..1d027b9 100644\n--- a/tensorflow/stream_executor/cuda/cuda_gpu_executor.cc\n+++ b/tensorflow/stream_executor/cuda/cuda_gpu_executor.cc\n@@ -888,6 +888,9 @@ CudaContext* CUDAExecutor::cuda_context() { return context_; }\n // For anything more complicated/prod-focused than this, you'll likely want to\n // turn to gsys' topology modeling.\n static int TryToReadNumaNode(const string &amp;pci_bus_id, int device_ordinal) {\n+// DC - make this clever later. ARM has no NUMA node, just return 0\n+LOG(INFO) &lt;&lt; \"ARM has no NUMA node, hardcoding to return zero\";\n+return 0;\n #if defined(__APPLE__)\n   LOG(INFO) &lt;&lt; \"OS X does not support NUMA - returning NUMA node zero\";\n   return 0;\n\n</code></pre>\n<p>build</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ ./configure\n$ bazel build -c opt --jobs 2 --local_resources 1024,4.0,1.0 --config=cuda //tensorflow/tools/pip_package:build_pip_package</pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/39783919/tensorflow-on-nvidia-tx1/\" rel=\"nofollow\">http://stackoverflow.com/questions/39783919/tensorflow-on-nvidia-tx1/</a></li>\n<li><a href=\"https://www.neotitans.net/install-tensorflow-on-odroid-c2.html\" rel=\"nofollow\">https://www.neotitans.net/install-tensorflow-on-odroid-c2.html</a></li>\n</ul>", "body_text": "Build tensorflow r0.11 on Nvidia TX1 failed\nError message:\nERROR: .../tensorflow/core/kernels/BUILD:1096:1: C++ compilation of rule '//tensorflow/core/kernels:svd_op' failed: crosstool_wrapper_driver_is_not_gcc failed: error executing command\n ...\ncom.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 4.\ngcc: internal compiler error: Killed (program cc1plus)\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nSee <file:///usr/share/doc/gcc-5.4/README.Bugs> for instructions.\nTarget //tensorflow/cc:tutorials_example_trainer failed to build\nMy build steps and environment:\nEnvironment\n\nHardware: Nvidia TX1\nOS: JetPack 2.3 (Ubuntu 16.04)\ncuDNN:5.1\nCUDA: 8\n\nInstall Java\n$ sudo add-apt-repository ppa:webupd8team/java\n$ sudo apt-get update\n$ sudo apt-get install oracle-java8-installer\nInstall some deps\n$ sudo apt-get install git zip unzip autoconf automake libtool curl zlib1g-dev maven\n$ sudo apt-get install python-numpy swig python-dev python-wheel\nBuild protobuf\n# For grpc-java build\n$ git clone https://github.com/google/protobuf.git\n$ cd protobuf\n$ git checkout master\n$ ./autogen.sh\n$ git checkout v3.0.0-beta-3\n$ ./autogen.sh\n$ LDFLAGS=-static ./configure --prefix=$(pwd)/../\n$ sed -i -e 's/LDFLAGS = -static/LDFLAGS = -all-static/' ./src/Makefile\n$ make -j 4\n$ make install\n\n\n# For bazel build\n$ git checkout v3.0.0-beta-2\n$./autogen.sh\n$ LDFLAGS=-static ./configure --prefix=$(pwd)/../\n$ sed -i -e 's/LDFLAGS = -static/LDFLAGS = -all-static/' ./src/Makefile\n$ make -j 4\n$ cd ..\nBuild grpc-java compiler\n$ git clone https://github.com/neo-titans/odroid.git\n$ git clone https://github.com/grpc/grpc-java-git\n$ cd grpc-java/\n$ git checkout v0.15.0\n$ patch -p0 < ../odroid/build_tensorflow/grpc-java.v0.15.0.patch\n$ CXXFLAGS=\"-I$(pwd)/../include\" LDFLAGS=\"-L$(pwd)/../lib\" ./gradlew java_pluginExecutable -Pprotoc=$(pwd)/../bin/protoc\n$ cd ..\nBuild bazel\n$ git clone https://github.com/bazelbuild/bazel.git\n$ cd bazel\n$ git checkout 0.3.2\n$ cp ../protobuf/src/protoc third_party/protobuf/protoc-linux-arm32.exe\n$ cp ../grpc-java/compiler/build/exe/java_plugin/protoc-gen-grpc-java third_party/grpc/protoc-gen-grpc-java-0.15.0-linux-arm32.exe\nModify some files for build on aarch64\ndiff --git a/compile.sh b/compile.sh\nindex 53fc412..11035d9 100755\n--- a/compile.sh\n+++ b/compile.sh\n@@ -27,7 +27,7 @@ cd \"$(dirname \"$0\")\"\n # Set the default verbose mode in buildenv.sh so that we do not display command\n # output unless there is a failure.  We do this conditionally to offer the user\n # a chance of overriding this in case they want to do so.\n-: ${VERBOSE:=no}\n+: ${VERBOSE:=yes}\n\n source scripts/bootstrap/buildenv.sh\n\ndiff --git a/scripts/bootstrap/compile.sh b/scripts/bootstrap/compile.sh\nindex 77372f0..657b254 100755\n--- a/scripts/bootstrap/compile.sh\n+++ b/scripts/bootstrap/compile.sh\n@@ -48,6 +48,7 @@ linux)\n   else\n     if [ \"${MACHINE_IS_ARM}\" = 'yes' ]; then\n       PROTOC=${PROTOC:-third_party/protobuf/protoc-linux-arm32.exe}\n+      GRPC_JAVA_PLUGIN=${GRPC_JAVA_PLUGIN:-third_party/grpc/protoc-gen-grpc-java-0.15.0-linux-arm32.exe}\n     else\n       PROTOC=${PROTOC:-third_party/protobuf/protoc-linux-x86_32.exe}\n       GRPC_JAVA_PLUGIN=${GRPC_JAVA_PLUGIN:-third_party/grpc/protoc-gen-grpc-java-0.15.0-linux-x86_32.exe}\n@@ -150,7 +151,7 @@ function java_compilation() {\n\n   run \"${JAVAC}\" -classpath \"${classpath}\" -sourcepath \"${sourcepath}\" \\\n       -d \"${output}/classes\" -source \"$JAVA_VERSION\" -target \"$JAVA_VERSION\" \\\n-      -encoding UTF-8 \"@${paramfile}\"\n+      -encoding UTF-8 \"@${paramfile}\" -J-Xmx500M\n\n   log \"Extracting helper classes for $name...\"\n   for f in ${library_jars} ; do\ndiff --git a/src/main/java/com/google/devtools/build/lib/util/CPU.java b/src/main/java/com/google/devtools/build/lib/util/CPU.java\nindex 41af4b1..4d80610 100644\n--- a/src/main/java/com/google/devtools/build/lib/util/CPU.java\n+++ b/src/main/java/com/google/devtools/build/lib/util/CPU.java\n@@ -26,7 +26,7 @@ public enum CPU {\n   X86_32(\"x86_32\", ImmutableSet.of(\"i386\", \"i486\", \"i586\", \"i686\", \"i786\", \"x86\")),\n   X86_64(\"x86_64\", ImmutableSet.of(\"amd64\", \"x86_64\", \"x64\")),\n   PPC(\"ppc\", ImmutableSet.of(\"ppc\", \"ppc64\", \"ppc64le\")),\n-  ARM(\"arm\", ImmutableSet.of(\"arm\", \"armv7l\")),\n+  ARM(\"arm\", ImmutableSet.of(\"arm\", \"armv7l\", \"aarch64\")),\n   UNKNOWN(\"unknown\", ImmutableSet.<String>of());\n\n   private final String canonicalName;\ndiff --git a/third_party/grpc/BUILD b/third_party/grpc/BUILD\nindex 2ba07e3..c7925ff 100644\n--- a/third_party/grpc/BUILD\n+++ b/third_party/grpc/BUILD\n@@ -29,7 +29,7 @@ filegroup(\n         \"//third_party:darwin\": [\"protoc-gen-grpc-java-0.15.0-osx-x86_64.exe\"],\n         \"//third_party:k8\": [\"protoc-gen-grpc-java-0.15.0-linux-x86_64.exe\"],\n         \"//third_party:piii\": [\"protoc-gen-grpc-java-0.15.0-linux-x86_32.exe\"],\n-        \"//third_party:arm\": [\"protoc-gen-grpc-java-0.15.0-linux-x86_32.exe\"],\n+        \"//third_party:arm\": [\"protoc-gen-grpc-java-0.15.0-linux-arm32.exe\"],\n         \"//third_party:freebsd\": [\"protoc-gen-grpc-java-0.15.0-linux-x86_32.exe\"],\n     }),\n )\ndiff --git a/third_party/protobuf/BUILD b/third_party/protobuf/BUILD\nindex 203fe51..4c2a316 100644\n--- a/third_party/protobuf/BUILD\n+++ b/third_party/protobuf/BUILD\n@@ -28,6 +28,7 @@ filegroup(\n         \"//third_party:darwin\": [\"protoc-osx-x86_32.exe\"],\n         \"//third_party:k8\": [\"protoc-linux-x86_64.exe\"],\n         \"//third_party:piii\": [\"protoc-linux-x86_32.exe\"],\n+        \"//third_party:arm\": [\"protoc-linux-arm32.exe\"],\n         \"//third_party:freebsd\": [\"protoc-linux-x86_32.exe\"],\n     }),\n )\ndiff --git a/tools/cpp/cc_configure.bzl b/tools/cpp/cc_configure.bzl\nindex aeb0715..688835d 100644\n--- a/tools/cpp/cc_configure.bzl\n+++ b/tools/cpp/cc_configure.bzl\n@@ -150,7 +150,12 @@ def _get_cpu_value(repository_ctx):\n     return \"x64_windows\"\n   # Use uname to figure out whether we are on x86_32 or x86_64\n   result = repository_ctx.execute([\"uname\", \"-m\"])\n-  return \"k8\" if result.stdout.strip() in [\"amd64\", \"x86_64\", \"x64\"] else \"piii\"\n+  machine = result.stdout.strip()\n+  if machine in [\"arm\", \"armv7l\", \"aarch64\"]:\n+   return \"arm\"\n+  elif machine in [\"amd64\", \"x86_64\", \"x64\"]:\n+   return \"k8\"\n+  return \"piii\"\n\n\n _INC_DIR_MARKER_BEGIN = \"#include <...>\"\n\ncompile\n$ ./compile.sh \n$ cd..\nBuild Tensorflow\n$ git clone https://github.com/tensorflow/tensorflow.git\n$ git checkout v0.11.0.rc2\nAccording to StackOverflow's tensorflow-on-nvidia-tx1 to modify\ndiff --git a/tensorflow/core/kernels/BUILD b/tensorflow/core/kernels/BUILD\nindex 2e04827..9d81923 100644\n--- a/tensorflow/core/kernels/BUILD\n+++ b/tensorflow/core/kernels/BUILD\n@@ -1184,7 +1184,7 @@ tf_kernel_libraries(\n         \"segment_reduction_ops\",\n         \"scan_ops\",\n         \"sequence_ops\",\n-        \"sparse_matmul_op\",\n+        #DC \"sparse_matmul_op\",\n     ],\n     deps = [\n         \":bounds_check\",\ndiff --git a/tensorflow/core/kernels/cwise_op_gpu_select.cu.cc b/tensorflow/core/kernels/cwise_op_gpu_select.cu.cc\nindex 02058a8..880a0c3 100644\n--- a/tensorflow/core/kernels/cwise_op_gpu_select.cu.cc\n+++ b/tensorflow/core/kernels/cwise_op_gpu_select.cu.cc\n@@ -43,8 +43,14 @@ struct BatchSelectFunctor<GPUDevice, T> {\n     const int all_but_batch = then_flat_outer_dims.dimension(1);\n\n #if !defined(EIGEN_HAS_INDEX_LIST)\n-    Eigen::array<int, 2> broadcast_dims{{ 1, all_but_batch }};\n-    Eigen::Tensor<int, 2>::Dimensions reshape_dims{{ batch, 1 }};\n+    // Eigen::array<int, 2> broadcast_dims{{ 1, all_but_batch }};\n+    Eigen::array<int, 2> broadcast_dims;\n+   broadcast_dims[0] = 1;\n+    broadcast_dims[1] = all_but_batch;\n+    // Eigen::Tensor<int, 2>::Dimensions reshape_dims{{ batch, 1 }};\n+    Eigen::Tensor<int, 2>::Dimensions reshape_dims;\n+   reshape_dims[0] = batch;\n+   reshape_dims[1] = 1;\n #else\n     Eigen::IndexList<Eigen::type2index<1>, int> broadcast_dims;\n     broadcast_dims.set(1, all_but_batch);\ndiff --git a/tensorflow/core/kernels/sparse_tensor_dense_matmul_op_gpu.cu.cc b/tensorflow/core/kernels/sparse_tensor_dense_matmul_op_gpu.cu.cc\nindex a177696..28d2f59 100644\n--- a/tensorflow/core/kernels/sparse_tensor_dense_matmul_op_gpu.cu.cc\n+++ b/tensorflow/core/kernels/sparse_tensor_dense_matmul_op_gpu.cu.cc\n@@ -104,9 +104,17 @@ struct SparseTensorDenseMatMulFunctor<GPUDevice, T, ADJ_A, ADJ_B> {\n     int n = (ADJ_B) ? b.dimension(0) : b.dimension(1);\n\n #if !defined(EIGEN_HAS_INDEX_LIST)\n-    Eigen::Tensor<int, 2>::Dimensions matrix_1_by_nnz{{ 1, nnz }};\n-    Eigen::array<int, 2> n_by_1{{ n, 1 }};\n-    Eigen::array<int, 1> reduce_on_rows{{ 0 }};\n+    // Eigen::Tensor<int, 2>::Dimensions matrix_1_by_nnz{{ 1, nnz }};\n+    Eigen::Tensor<int, 2>::Dimensions matrix_1_by_nnz;\n+   matrix_1_by_nnz[0] = 1;\n+   matrix_1_by_nnz[1] = nnz;\n+    // Eigen::array<int, 2> n_by_1{{ n, 1 }};\n+    Eigen::array<int, 2> n_by_1;\n+   n_by_1[0] = n;\n+   n_by_1[1] = 1;\n+    // Eigen::array<int, 1> reduce_on_rows{{ 0 }};\n+    Eigen::array<int, 1> reduce_on_rows;\n+   reduce_on_rows[0]= 0;\n #else\n     Eigen::IndexList<Eigen::type2index<1>, int> matrix_1_by_nnz;\n     matrix_1_by_nnz.set(1, nnz);\ndiff --git a/tensorflow/stream_executor/cuda/cuda_gpu_executor.cc b/tensorflow/stream_executor/cuda/cuda_gpu_executor.cc\nindex 52256a7..1d027b9 100644\n--- a/tensorflow/stream_executor/cuda/cuda_gpu_executor.cc\n+++ b/tensorflow/stream_executor/cuda/cuda_gpu_executor.cc\n@@ -888,6 +888,9 @@ CudaContext* CUDAExecutor::cuda_context() { return context_; }\n // For anything more complicated/prod-focused than this, you'll likely want to\n // turn to gsys' topology modeling.\n static int TryToReadNumaNode(const string &pci_bus_id, int device_ordinal) {\n+// DC - make this clever later. ARM has no NUMA node, just return 0\n+LOG(INFO) << \"ARM has no NUMA node, hardcoding to return zero\";\n+return 0;\n #if defined(__APPLE__)\n   LOG(INFO) << \"OS X does not support NUMA - returning NUMA node zero\";\n   return 0;\n\n\nbuild\n$ ./configure\n$ bazel build -c opt --jobs 2 --local_resources 1024,4.0,1.0 --config=cuda //tensorflow/tools/pip_package:build_pip_package\nReferences\n\nhttp://stackoverflow.com/questions/39783919/tensorflow-on-nvidia-tx1/\nhttps://www.neotitans.net/install-tensorflow-on-odroid-c2.html", "body": "# Build tensorflow r0.11 on Nvidia TX1 failed\n\n## Error message:\n\n``` bash\nERROR: .../tensorflow/core/kernels/BUILD:1096:1: C++ compilation of rule '//tensorflow/core/kernels:svd_op' failed: crosstool_wrapper_driver_is_not_gcc failed: error executing command\n ...\ncom.google.devtools.build.lib.shell.BadExitStatusException: Process exited with status 4.\ngcc: internal compiler error: Killed (program cc1plus)\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nSee <file:///usr/share/doc/gcc-5.4/README.Bugs> for instructions.\nTarget //tensorflow/cc:tutorials_example_trainer failed to build\n```\n\nMy build steps and environment:\n\n### Environment\n- Hardware: Nvidia TX1\n- OS: JetPack 2.3 (Ubuntu 16.04)\n- cuDNN:5.1\n- CUDA: 8\n\n### Install Java\n\n``` bash\n$ sudo add-apt-repository ppa:webupd8team/java\n$ sudo apt-get update\n$ sudo apt-get install oracle-java8-installer\n```\n\n### Install some deps\n\n``` bash\n$ sudo apt-get install git zip unzip autoconf automake libtool curl zlib1g-dev maven\n$ sudo apt-get install python-numpy swig python-dev python-wheel\n```\n\n### Build protobuf\n\n``` bash\n# For grpc-java build\n$ git clone https://github.com/google/protobuf.git\n$ cd protobuf\n$ git checkout master\n$ ./autogen.sh\n$ git checkout v3.0.0-beta-3\n$ ./autogen.sh\n$ LDFLAGS=-static ./configure --prefix=$(pwd)/../\n$ sed -i -e 's/LDFLAGS = -static/LDFLAGS = -all-static/' ./src/Makefile\n$ make -j 4\n$ make install\n\n\n# For bazel build\n$ git checkout v3.0.0-beta-2\n$./autogen.sh\n$ LDFLAGS=-static ./configure --prefix=$(pwd)/../\n$ sed -i -e 's/LDFLAGS = -static/LDFLAGS = -all-static/' ./src/Makefile\n$ make -j 4\n$ cd ..\n```\n\n### Build grpc-java compiler\n\n``` bash\n$ git clone https://github.com/neo-titans/odroid.git\n$ git clone https://github.com/grpc/grpc-java-git\n$ cd grpc-java/\n$ git checkout v0.15.0\n$ patch -p0 < ../odroid/build_tensorflow/grpc-java.v0.15.0.patch\n$ CXXFLAGS=\"-I$(pwd)/../include\" LDFLAGS=\"-L$(pwd)/../lib\" ./gradlew java_pluginExecutable -Pprotoc=$(pwd)/../bin/protoc\n$ cd ..\n```\n\n### Build bazel\n\n``` bash\n$ git clone https://github.com/bazelbuild/bazel.git\n$ cd bazel\n$ git checkout 0.3.2\n$ cp ../protobuf/src/protoc third_party/protobuf/protoc-linux-arm32.exe\n$ cp ../grpc-java/compiler/build/exe/java_plugin/protoc-gen-grpc-java third_party/grpc/protoc-gen-grpc-java-0.15.0-linux-arm32.exe\n```\n\nModify some files for build on aarch64  \n\n``` code\ndiff --git a/compile.sh b/compile.sh\nindex 53fc412..11035d9 100755\n--- a/compile.sh\n+++ b/compile.sh\n@@ -27,7 +27,7 @@ cd \"$(dirname \"$0\")\"\n # Set the default verbose mode in buildenv.sh so that we do not display command\n # output unless there is a failure.  We do this conditionally to offer the user\n # a chance of overriding this in case they want to do so.\n-: ${VERBOSE:=no}\n+: ${VERBOSE:=yes}\n\n source scripts/bootstrap/buildenv.sh\n\ndiff --git a/scripts/bootstrap/compile.sh b/scripts/bootstrap/compile.sh\nindex 77372f0..657b254 100755\n--- a/scripts/bootstrap/compile.sh\n+++ b/scripts/bootstrap/compile.sh\n@@ -48,6 +48,7 @@ linux)\n   else\n     if [ \"${MACHINE_IS_ARM}\" = 'yes' ]; then\n       PROTOC=${PROTOC:-third_party/protobuf/protoc-linux-arm32.exe}\n+      GRPC_JAVA_PLUGIN=${GRPC_JAVA_PLUGIN:-third_party/grpc/protoc-gen-grpc-java-0.15.0-linux-arm32.exe}\n     else\n       PROTOC=${PROTOC:-third_party/protobuf/protoc-linux-x86_32.exe}\n       GRPC_JAVA_PLUGIN=${GRPC_JAVA_PLUGIN:-third_party/grpc/protoc-gen-grpc-java-0.15.0-linux-x86_32.exe}\n@@ -150,7 +151,7 @@ function java_compilation() {\n\n   run \"${JAVAC}\" -classpath \"${classpath}\" -sourcepath \"${sourcepath}\" \\\n       -d \"${output}/classes\" -source \"$JAVA_VERSION\" -target \"$JAVA_VERSION\" \\\n-      -encoding UTF-8 \"@${paramfile}\"\n+      -encoding UTF-8 \"@${paramfile}\" -J-Xmx500M\n\n   log \"Extracting helper classes for $name...\"\n   for f in ${library_jars} ; do\ndiff --git a/src/main/java/com/google/devtools/build/lib/util/CPU.java b/src/main/java/com/google/devtools/build/lib/util/CPU.java\nindex 41af4b1..4d80610 100644\n--- a/src/main/java/com/google/devtools/build/lib/util/CPU.java\n+++ b/src/main/java/com/google/devtools/build/lib/util/CPU.java\n@@ -26,7 +26,7 @@ public enum CPU {\n   X86_32(\"x86_32\", ImmutableSet.of(\"i386\", \"i486\", \"i586\", \"i686\", \"i786\", \"x86\")),\n   X86_64(\"x86_64\", ImmutableSet.of(\"amd64\", \"x86_64\", \"x64\")),\n   PPC(\"ppc\", ImmutableSet.of(\"ppc\", \"ppc64\", \"ppc64le\")),\n-  ARM(\"arm\", ImmutableSet.of(\"arm\", \"armv7l\")),\n+  ARM(\"arm\", ImmutableSet.of(\"arm\", \"armv7l\", \"aarch64\")),\n   UNKNOWN(\"unknown\", ImmutableSet.<String>of());\n\n   private final String canonicalName;\ndiff --git a/third_party/grpc/BUILD b/third_party/grpc/BUILD\nindex 2ba07e3..c7925ff 100644\n--- a/third_party/grpc/BUILD\n+++ b/third_party/grpc/BUILD\n@@ -29,7 +29,7 @@ filegroup(\n         \"//third_party:darwin\": [\"protoc-gen-grpc-java-0.15.0-osx-x86_64.exe\"],\n         \"//third_party:k8\": [\"protoc-gen-grpc-java-0.15.0-linux-x86_64.exe\"],\n         \"//third_party:piii\": [\"protoc-gen-grpc-java-0.15.0-linux-x86_32.exe\"],\n-        \"//third_party:arm\": [\"protoc-gen-grpc-java-0.15.0-linux-x86_32.exe\"],\n+        \"//third_party:arm\": [\"protoc-gen-grpc-java-0.15.0-linux-arm32.exe\"],\n         \"//third_party:freebsd\": [\"protoc-gen-grpc-java-0.15.0-linux-x86_32.exe\"],\n     }),\n )\ndiff --git a/third_party/protobuf/BUILD b/third_party/protobuf/BUILD\nindex 203fe51..4c2a316 100644\n--- a/third_party/protobuf/BUILD\n+++ b/third_party/protobuf/BUILD\n@@ -28,6 +28,7 @@ filegroup(\n         \"//third_party:darwin\": [\"protoc-osx-x86_32.exe\"],\n         \"//third_party:k8\": [\"protoc-linux-x86_64.exe\"],\n         \"//third_party:piii\": [\"protoc-linux-x86_32.exe\"],\n+        \"//third_party:arm\": [\"protoc-linux-arm32.exe\"],\n         \"//third_party:freebsd\": [\"protoc-linux-x86_32.exe\"],\n     }),\n )\ndiff --git a/tools/cpp/cc_configure.bzl b/tools/cpp/cc_configure.bzl\nindex aeb0715..688835d 100644\n--- a/tools/cpp/cc_configure.bzl\n+++ b/tools/cpp/cc_configure.bzl\n@@ -150,7 +150,12 @@ def _get_cpu_value(repository_ctx):\n     return \"x64_windows\"\n   # Use uname to figure out whether we are on x86_32 or x86_64\n   result = repository_ctx.execute([\"uname\", \"-m\"])\n-  return \"k8\" if result.stdout.strip() in [\"amd64\", \"x86_64\", \"x64\"] else \"piii\"\n+  machine = result.stdout.strip()\n+  if machine in [\"arm\", \"armv7l\", \"aarch64\"]:\n+   return \"arm\"\n+  elif machine in [\"amd64\", \"x86_64\", \"x64\"]:\n+   return \"k8\"\n+  return \"piii\"\n\n\n _INC_DIR_MARKER_BEGIN = \"#include <...>\"\n```\n\ncompile\n\n``` bash\n$ ./compile.sh \n$ cd..\n```\n\n### Build Tensorflow\n\n``` bash\n$ git clone https://github.com/tensorflow/tensorflow.git\n$ git checkout v0.11.0.rc2\n```\n\nAccording to StackOverflow's [tensorflow-on-nvidia-tx1](http://stackoverflow.com/questions/39783919/tensorflow-on-nvidia-tx1/) to modify\n\n``` code\ndiff --git a/tensorflow/core/kernels/BUILD b/tensorflow/core/kernels/BUILD\nindex 2e04827..9d81923 100644\n--- a/tensorflow/core/kernels/BUILD\n+++ b/tensorflow/core/kernels/BUILD\n@@ -1184,7 +1184,7 @@ tf_kernel_libraries(\n         \"segment_reduction_ops\",\n         \"scan_ops\",\n         \"sequence_ops\",\n-        \"sparse_matmul_op\",\n+        #DC \"sparse_matmul_op\",\n     ],\n     deps = [\n         \":bounds_check\",\ndiff --git a/tensorflow/core/kernels/cwise_op_gpu_select.cu.cc b/tensorflow/core/kernels/cwise_op_gpu_select.cu.cc\nindex 02058a8..880a0c3 100644\n--- a/tensorflow/core/kernels/cwise_op_gpu_select.cu.cc\n+++ b/tensorflow/core/kernels/cwise_op_gpu_select.cu.cc\n@@ -43,8 +43,14 @@ struct BatchSelectFunctor<GPUDevice, T> {\n     const int all_but_batch = then_flat_outer_dims.dimension(1);\n\n #if !defined(EIGEN_HAS_INDEX_LIST)\n-    Eigen::array<int, 2> broadcast_dims{{ 1, all_but_batch }};\n-    Eigen::Tensor<int, 2>::Dimensions reshape_dims{{ batch, 1 }};\n+    // Eigen::array<int, 2> broadcast_dims{{ 1, all_but_batch }};\n+    Eigen::array<int, 2> broadcast_dims;\n+   broadcast_dims[0] = 1;\n+    broadcast_dims[1] = all_but_batch;\n+    // Eigen::Tensor<int, 2>::Dimensions reshape_dims{{ batch, 1 }};\n+    Eigen::Tensor<int, 2>::Dimensions reshape_dims;\n+   reshape_dims[0] = batch;\n+   reshape_dims[1] = 1;\n #else\n     Eigen::IndexList<Eigen::type2index<1>, int> broadcast_dims;\n     broadcast_dims.set(1, all_but_batch);\ndiff --git a/tensorflow/core/kernels/sparse_tensor_dense_matmul_op_gpu.cu.cc b/tensorflow/core/kernels/sparse_tensor_dense_matmul_op_gpu.cu.cc\nindex a177696..28d2f59 100644\n--- a/tensorflow/core/kernels/sparse_tensor_dense_matmul_op_gpu.cu.cc\n+++ b/tensorflow/core/kernels/sparse_tensor_dense_matmul_op_gpu.cu.cc\n@@ -104,9 +104,17 @@ struct SparseTensorDenseMatMulFunctor<GPUDevice, T, ADJ_A, ADJ_B> {\n     int n = (ADJ_B) ? b.dimension(0) : b.dimension(1);\n\n #if !defined(EIGEN_HAS_INDEX_LIST)\n-    Eigen::Tensor<int, 2>::Dimensions matrix_1_by_nnz{{ 1, nnz }};\n-    Eigen::array<int, 2> n_by_1{{ n, 1 }};\n-    Eigen::array<int, 1> reduce_on_rows{{ 0 }};\n+    // Eigen::Tensor<int, 2>::Dimensions matrix_1_by_nnz{{ 1, nnz }};\n+    Eigen::Tensor<int, 2>::Dimensions matrix_1_by_nnz;\n+   matrix_1_by_nnz[0] = 1;\n+   matrix_1_by_nnz[1] = nnz;\n+    // Eigen::array<int, 2> n_by_1{{ n, 1 }};\n+    Eigen::array<int, 2> n_by_1;\n+   n_by_1[0] = n;\n+   n_by_1[1] = 1;\n+    // Eigen::array<int, 1> reduce_on_rows{{ 0 }};\n+    Eigen::array<int, 1> reduce_on_rows;\n+   reduce_on_rows[0]= 0;\n #else\n     Eigen::IndexList<Eigen::type2index<1>, int> matrix_1_by_nnz;\n     matrix_1_by_nnz.set(1, nnz);\ndiff --git a/tensorflow/stream_executor/cuda/cuda_gpu_executor.cc b/tensorflow/stream_executor/cuda/cuda_gpu_executor.cc\nindex 52256a7..1d027b9 100644\n--- a/tensorflow/stream_executor/cuda/cuda_gpu_executor.cc\n+++ b/tensorflow/stream_executor/cuda/cuda_gpu_executor.cc\n@@ -888,6 +888,9 @@ CudaContext* CUDAExecutor::cuda_context() { return context_; }\n // For anything more complicated/prod-focused than this, you'll likely want to\n // turn to gsys' topology modeling.\n static int TryToReadNumaNode(const string &pci_bus_id, int device_ordinal) {\n+// DC - make this clever later. ARM has no NUMA node, just return 0\n+LOG(INFO) << \"ARM has no NUMA node, hardcoding to return zero\";\n+return 0;\n #if defined(__APPLE__)\n   LOG(INFO) << \"OS X does not support NUMA - returning NUMA node zero\";\n   return 0;\n\n```\n\nbuild\n\n``` bash\n$ ./configure\n$ bazel build -c opt --jobs 2 --local_resources 1024,4.0,1.0 --config=cuda //tensorflow/tools/pip_package:build_pip_package\n```\n\n### References\n- http://stackoverflow.com/questions/39783919/tensorflow-on-nvidia-tx1/\n- https://www.neotitans.net/install-tensorflow-on-odroid-c2.html\n"}