{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/851", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/851/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/851/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/851/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/851", "id": 128321728, "node_id": "MDU6SXNzdWUxMjgzMjE3Mjg=", "number": 851, "title": "tensorflow for Nvidia TX1", "user": {"login": "jmtatsch", "id": 3080674, "node_id": "MDQ6VXNlcjMwODA2NzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3080674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmtatsch", "html_url": "https://github.com/jmtatsch", "followers_url": "https://api.github.com/users/jmtatsch/followers", "following_url": "https://api.github.com/users/jmtatsch/following{/other_user}", "gists_url": "https://api.github.com/users/jmtatsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmtatsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmtatsch/subscriptions", "organizations_url": "https://api.github.com/users/jmtatsch/orgs", "repos_url": "https://api.github.com/users/jmtatsch/repos", "events_url": "https://api.github.com/users/jmtatsch/events{/privacy}", "received_events_url": "https://api.github.com/users/jmtatsch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "benoitsteiner", "id": 6969686, "node_id": "MDQ6VXNlcjY5Njk2ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6969686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benoitsteiner", "html_url": "https://github.com/benoitsteiner", "followers_url": "https://api.github.com/users/benoitsteiner/followers", "following_url": "https://api.github.com/users/benoitsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/benoitsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/benoitsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benoitsteiner/subscriptions", "organizations_url": "https://api.github.com/users/benoitsteiner/orgs", "repos_url": "https://api.github.com/users/benoitsteiner/repos", "events_url": "https://api.github.com/users/benoitsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/benoitsteiner/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "benoitsteiner", "id": 6969686, "node_id": "MDQ6VXNlcjY5Njk2ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6969686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benoitsteiner", "html_url": "https://github.com/benoitsteiner", "followers_url": "https://api.github.com/users/benoitsteiner/followers", "following_url": "https://api.github.com/users/benoitsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/benoitsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/benoitsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benoitsteiner/subscriptions", "organizations_url": "https://api.github.com/users/benoitsteiner/orgs", "repos_url": "https://api.github.com/users/benoitsteiner/repos", "events_url": "https://api.github.com/users/benoitsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/benoitsteiner/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 85, "created_at": "2016-01-23T11:21:23Z", "updated_at": "2018-01-27T06:34:27Z", "closed_at": "2017-01-24T02:01:03Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hello,</p>\n<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=6011254\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/maxcuda\">@maxcuda</a> has recently got tensorflow running on the tk1 as documented in blogpost <a href=\"http://cudamusing.blogspot.de/2015/11/building-tensorflow-for-jetson-tk1.html\" rel=\"nofollow\">http://cudamusing.blogspot.de/2015/11/building-tensorflow-for-jetson-tk1.html</a> but since then been unable to repeatedly build it. I am now trying to get tensorflow running on a tx1 tegra platform and need some support.</p>\n<p>Much trouble seems to come from Eigen variadic templates and using C++11 initializer lists, both of wich could work according to <a href=\"http://devblogs.nvidia.com/parallelforall/cplusplus-11-in-cuda-variadic-templates/\" rel=\"nofollow\">http://devblogs.nvidia.com/parallelforall/cplusplus-11-in-cuda-variadic-templates/</a>.<br>\nIn theory std=c++11 should be set according to crosstool. Nevertheless, nvcc crashes happily on all of them. This smells as if the  \"-std=c++11\"  flag is not properly set.<br>\nHow can I verify/enforce this?</p>\n<p>Also in tensorflow.bzl, variadic templates in Eigen are said to be disabled<br>\n<code>We have to disable variadic templates in Eigen for NVCC even though std=c++11 are enabled</code><br>\nis that still necessary?</p>\n<p>Here is my build workflow:</p>\n<pre><code>git clone \u2014recurse-submodules git@github.com:jmtatsch/tensorflow.git\ncd tensorflow\ngrep -Rl \"lib64\"| xargs sed -i 's/lib64/lib/g' # no lib64 for tx1 yet \n./configure\nbazel build -c opt --local_resources 2048,0.5,1.0 --verbose_failures --config=cuda //tensorflow/cc:tutorials_example_trainer\n</code></pre>", "body_text": "Hello,\n@maxcuda has recently got tensorflow running on the tk1 as documented in blogpost http://cudamusing.blogspot.de/2015/11/building-tensorflow-for-jetson-tk1.html but since then been unable to repeatedly build it. I am now trying to get tensorflow running on a tx1 tegra platform and need some support.\nMuch trouble seems to come from Eigen variadic templates and using C++11 initializer lists, both of wich could work according to http://devblogs.nvidia.com/parallelforall/cplusplus-11-in-cuda-variadic-templates/.\nIn theory std=c++11 should be set according to crosstool. Nevertheless, nvcc crashes happily on all of them. This smells as if the  \"-std=c++11\"  flag is not properly set.\nHow can I verify/enforce this?\nAlso in tensorflow.bzl, variadic templates in Eigen are said to be disabled\nWe have to disable variadic templates in Eigen for NVCC even though std=c++11 are enabled\nis that still necessary?\nHere is my build workflow:\ngit clone \u2014recurse-submodules git@github.com:jmtatsch/tensorflow.git\ncd tensorflow\ngrep -Rl \"lib64\"| xargs sed -i 's/lib64/lib/g' # no lib64 for tx1 yet \n./configure\nbazel build -c opt --local_resources 2048,0.5,1.0 --verbose_failures --config=cuda //tensorflow/cc:tutorials_example_trainer", "body": "Hello,\n\n@maxcuda has recently got tensorflow running on the tk1 as documented in blogpost http://cudamusing.blogspot.de/2015/11/building-tensorflow-for-jetson-tk1.html but since then been unable to repeatedly build it. I am now trying to get tensorflow running on a tx1 tegra platform and need some support.\n\nMuch trouble seems to come from Eigen variadic templates and using C++11 initializer lists, both of wich could work according to http://devblogs.nvidia.com/parallelforall/cplusplus-11-in-cuda-variadic-templates/.\nIn theory std=c++11 should be set according to crosstool. Nevertheless, nvcc crashes happily on all of them. This smells as if the  \"-std=c++11\"  flag is not properly set. \nHow can I verify/enforce this?\n\nAlso in tensorflow.bzl, variadic templates in Eigen are said to be disabled\n`We have to disable variadic templates in Eigen for NVCC even though std=c++11 are enabled`\nis that still necessary?\n\nHere is my build workflow:\n\n```\ngit clone \u2014recurse-submodules git@github.com:jmtatsch/tensorflow.git\ncd tensorflow\ngrep -Rl \"lib64\"| xargs sed -i 's/lib64/lib/g' # no lib64 for tx1 yet \n./configure\nbazel build -c opt --local_resources 2048,0.5,1.0 --verbose_failures --config=cuda //tensorflow/cc:tutorials_example_trainer\n```\n"}