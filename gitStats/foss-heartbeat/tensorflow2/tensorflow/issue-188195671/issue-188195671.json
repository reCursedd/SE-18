{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5492", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5492/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5492/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5492/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/5492", "id": 188195671, "node_id": "MDU6SXNzdWUxODgxOTU2NzE=", "number": 5492, "title": "tf.assign does not update variable shape if tf.Variable(..., validate_shape=True) initially", "user": {"login": "sjperkins", "id": 3530212, "node_id": "MDQ6VXNlcjM1MzAyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3530212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjperkins", "html_url": "https://github.com/sjperkins", "followers_url": "https://api.github.com/users/sjperkins/followers", "following_url": "https://api.github.com/users/sjperkins/following{/other_user}", "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions", "organizations_url": "https://api.github.com/users/sjperkins/orgs", "repos_url": "https://api.github.com/users/sjperkins/repos", "events_url": "https://api.github.com/users/sjperkins/events{/privacy}", "received_events_url": "https://api.github.com/users/sjperkins/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2016-11-09T09:02:05Z", "updated_at": "2018-09-27T18:54:48Z", "closed_at": "2018-09-27T18:54:48Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Unless the variable is initially created with tf.Variable(..., validate_shape=False), updating a variable using <code>tf.assign(..., validate_shape=False)</code> does not update the variable shape.</p>\n<h3>What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?</h3>\n<p>None</p>\n<h3>Environment info</h3>\n<p>Operating System: Ubuntu 16.04</p>\n<p>Installed version of CUDA and cuDNN: CUDA 8.0 and cuDNN 5.1<br>\n(please attach the output of <code>ls -l /path/to/cuda/lib/libcud*</code>):</p>\n<div class=\"highlight highlight-source-shell\"><pre>$ ls -l /usr/local/cuda-8.0/lib64/libcud<span class=\"pl-k\">*</span>\n-rw-r--r-- 1 root root 558720 Sep 15 01:02 /usr/local/cuda-8.0/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root     16 Sep 15 01:05 /usr/local/cuda-8.0/lib64/libcudart.so -<span class=\"pl-k\">&gt;</span> libcudart.so.8.0\nlrwxrwxrwx 1 root root     19 Sep 15 01:05 /usr/local/cuda-8.0/lib64/libcudart.so.8.0 -<span class=\"pl-k\">&gt;</span> libcudart.so.8.0.44\n-rw-r--r-- 1 root root 415432 Sep 15 01:02 /usr/local/cuda-8.0/lib64/libcudart.so.8.0.44\n-rw-r--r-- 1 root root 775162 Sep 15 01:02 /usr/local/cuda-8.0/lib64/libcudart_static.a\n$ ls -l /usr/local/cudnn-5.1-cuda-8.0/lib64/\ntotal 145608\nlrwxrwxrwx 1 root root       13 Oct 28 10:07 libcudnn.so -<span class=\"pl-k\">&gt;</span> libcudnn.so.5\nlrwxrwxrwx 1 root root       17 Oct 28 10:07 libcudnn.so.5 -<span class=\"pl-k\">&gt;</span> libcudnn.so.5.1.5\n-rwxr-xr-x 1 root root 79337624 Oct 28 10:07 libcudnn.so.5.1.5\n-rw-r--r-- 1 root root 69756172 Oct 28 10:07 libcudnn_static.a</pre></div>\n<p>If installed from binary pip package, provide:</p>\n<ol>\n<li>A link to the pip package you installed:</li>\n</ol>\n<p><a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#pip-installation\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#pip-installation</a></p>\n<ol start=\"2\">\n<li>The output from <code>python -c \"import tensorflow; print(tensorflow.__version__)\"</code>.</li>\n</ol>\n<div class=\"highlight highlight-source-shell\"><pre>$ python -c <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>import tensorflow; print(tensorflow.__version__)<span class=\"pl-pds\">\"</span></span>\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcurand.so locally\n0.11.0rc2</pre></div>\n<p>If installed from source, provide</p>\n<ol>\n<li>The commit hash (<code>git rev-parse HEAD</code>)</li>\n<li>The output of <code>bazel version</code></li>\n</ol>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<p>In the following script, if var is created with <code>validate_shape=True</code>, subsequent <code>tf.assign</code> operations don't update the shape (they remain as [1]), <em>but they do update the data</em>.</p>\n<p>However, if the var is created with <code>validate_shape=False</code>, subsequent <code>tf.assign</code> operations do update both data and the shape,  setting the shape to [1], [10], and [20] respectively.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\ndtype <span class=\"pl-k\">=</span> np.float64\nshape <span class=\"pl-k\">=</span> (<span class=\"pl-c1\">10</span>, )\n\nph <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype)\nvar <span class=\"pl-k\">=</span> tf.Variable(tf.ones(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">1</span>,), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype), <span class=\"pl-v\">validate_shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nop <span class=\"pl-k\">=</span> tf.assign(var, ph, <span class=\"pl-v\">validate_shape</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">False</span>)\n\ninit_op <span class=\"pl-k\">=</span> tf.initialize_all_variables()\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> S:\n    S.run(init_op)\n    <span class=\"pl-c1\">print</span> S.run(tf.shape(var)) <span class=\"pl-c\"><span class=\"pl-c\">#</span> [1]</span>\n    <span class=\"pl-c1\">print</span> S.run(var)           <span class=\"pl-c\"><span class=\"pl-c\">#</span> [1.]</span>\n    S.run(op, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{ph: np.ones(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">10</span>,), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype)})\n    <span class=\"pl-c1\">print</span> S.run(tf.shape(var)) <span class=\"pl-c\"><span class=\"pl-c\">#</span> [1], should be [10]</span>\n    <span class=\"pl-c1\">print</span> S.run(var)           <span class=\"pl-c\"><span class=\"pl-c\">#</span> [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]</span>\n\n    S.run(op, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{ph: np.ones(<span class=\"pl-v\">shape</span><span class=\"pl-k\">=</span>(<span class=\"pl-c1\">20</span>,), <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>dtype)})\n    <span class=\"pl-c1\">print</span> S.run(tf.shape(var)) <span class=\"pl-c\"><span class=\"pl-c\">#</span> [1], should be [20]</span>\n    <span class=\"pl-c1\">print</span> S.run(var)           <span class=\"pl-c\"><span class=\"pl-c\">#</span> [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.</span>\n  <span class=\"pl-c1\">1</span>.  1.]</pre></div>\n<h3>What other attempted solutions have you tried?</h3>\n<h3>Logs or other output that would be helpful</h3>\n<p>(If logs are large, please upload as attachment or provide link).</p>", "body_text": "Unless the variable is initially created with tf.Variable(..., validate_shape=False), updating a variable using tf.assign(..., validate_shape=False) does not update the variable shape.\nWhat related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\nNone\nEnvironment info\nOperating System: Ubuntu 16.04\nInstalled version of CUDA and cuDNN: CUDA 8.0 and cuDNN 5.1\n(please attach the output of ls -l /path/to/cuda/lib/libcud*):\n$ ls -l /usr/local/cuda-8.0/lib64/libcud*\n-rw-r--r-- 1 root root 558720 Sep 15 01:02 /usr/local/cuda-8.0/lib64/libcudadevrt.a\nlrwxrwxrwx 1 root root     16 Sep 15 01:05 /usr/local/cuda-8.0/lib64/libcudart.so -> libcudart.so.8.0\nlrwxrwxrwx 1 root root     19 Sep 15 01:05 /usr/local/cuda-8.0/lib64/libcudart.so.8.0 -> libcudart.so.8.0.44\n-rw-r--r-- 1 root root 415432 Sep 15 01:02 /usr/local/cuda-8.0/lib64/libcudart.so.8.0.44\n-rw-r--r-- 1 root root 775162 Sep 15 01:02 /usr/local/cuda-8.0/lib64/libcudart_static.a\n$ ls -l /usr/local/cudnn-5.1-cuda-8.0/lib64/\ntotal 145608\nlrwxrwxrwx 1 root root       13 Oct 28 10:07 libcudnn.so -> libcudnn.so.5\nlrwxrwxrwx 1 root root       17 Oct 28 10:07 libcudnn.so.5 -> libcudnn.so.5.1.5\n-rwxr-xr-x 1 root root 79337624 Oct 28 10:07 libcudnn.so.5.1.5\n-rw-r--r-- 1 root root 69756172 Oct 28 10:07 libcudnn_static.a\nIf installed from binary pip package, provide:\n\nA link to the pip package you installed:\n\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#pip-installation\n\nThe output from python -c \"import tensorflow; print(tensorflow.__version__)\".\n\n$ python -c \"import tensorflow; print(tensorflow.__version__)\"\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcublas.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcudnn.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcufft.so locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcuda.so.1 locally\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcurand.so locally\n0.11.0rc2\nIf installed from source, provide\n\nThe commit hash (git rev-parse HEAD)\nThe output of bazel version\n\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nIn the following script, if var is created with validate_shape=True, subsequent tf.assign operations don't update the shape (they remain as [1]), but they do update the data.\nHowever, if the var is created with validate_shape=False, subsequent tf.assign operations do update both data and the shape,  setting the shape to [1], [10], and [20] respectively.\nimport numpy as np\nimport tensorflow as tf\n\ndtype = np.float64\nshape = (10, )\n\nph = tf.placeholder(dtype=dtype)\nvar = tf.Variable(tf.ones(shape=(1,), dtype=dtype), validate_shape=True)\nop = tf.assign(var, ph, validate_shape=False)\n\ninit_op = tf.initialize_all_variables()\n\nwith tf.Session() as S:\n    S.run(init_op)\n    print S.run(tf.shape(var)) # [1]\n    print S.run(var)           # [1.]\n    S.run(op, feed_dict={ph: np.ones(shape=(10,), dtype=dtype)})\n    print S.run(tf.shape(var)) # [1], should be [10]\n    print S.run(var)           # [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n\n    S.run(op, feed_dict={ph: np.ones(shape=(20,), dtype=dtype)})\n    print S.run(tf.shape(var)) # [1], should be [20]\n    print S.run(var)           # [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.\n  1.  1.]\nWhat other attempted solutions have you tried?\nLogs or other output that would be helpful\n(If logs are large, please upload as attachment or provide link).", "body": "Unless the variable is initially created with tf.Variable(..., validate_shape=False), updating a variable using `tf.assign(..., validate_shape=False)` does not update the variable shape. \r\n\r\n### What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\r\n\r\nNone\r\n\r\n### Environment info\r\nOperating System: Ubuntu 16.04\r\n\r\nInstalled version of CUDA and cuDNN: CUDA 8.0 and cuDNN 5.1\r\n(please attach the output of `ls -l /path/to/cuda/lib/libcud*`):\r\n\r\n``` bash\r\n$ ls -l /usr/local/cuda-8.0/lib64/libcud*\r\n-rw-r--r-- 1 root root 558720 Sep 15 01:02 /usr/local/cuda-8.0/lib64/libcudadevrt.a\r\nlrwxrwxrwx 1 root root     16 Sep 15 01:05 /usr/local/cuda-8.0/lib64/libcudart.so -> libcudart.so.8.0\r\nlrwxrwxrwx 1 root root     19 Sep 15 01:05 /usr/local/cuda-8.0/lib64/libcudart.so.8.0 -> libcudart.so.8.0.44\r\n-rw-r--r-- 1 root root 415432 Sep 15 01:02 /usr/local/cuda-8.0/lib64/libcudart.so.8.0.44\r\n-rw-r--r-- 1 root root 775162 Sep 15 01:02 /usr/local/cuda-8.0/lib64/libcudart_static.a\r\n$ ls -l /usr/local/cudnn-5.1-cuda-8.0/lib64/\r\ntotal 145608\r\nlrwxrwxrwx 1 root root       13 Oct 28 10:07 libcudnn.so -> libcudnn.so.5\r\nlrwxrwxrwx 1 root root       17 Oct 28 10:07 libcudnn.so.5 -> libcudnn.so.5.1.5\r\n-rwxr-xr-x 1 root root 79337624 Oct 28 10:07 libcudnn.so.5.1.5\r\n-rw-r--r-- 1 root root 69756172 Oct 28 10:07 libcudnn_static.a\r\n```\r\n\r\nIf installed from binary pip package, provide:\r\n\r\n1. A link to the pip package you installed:\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#pip-installation\r\n\r\n2. The output from `python -c \"import tensorflow; print(tensorflow.__version__)\"`.\r\n\r\n```bash\r\n$ python -c \"import tensorflow; print(tensorflow.__version__)\"\r\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcublas.so locally\r\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcudnn.so locally\r\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcufft.so locally\r\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcuda.so.1 locally\r\nI tensorflow/stream_executor/dso_loader.cc:111] successfully opened CUDA library libcurand.so locally\r\n0.11.0rc2\r\n```\r\n\r\nIf installed from source, provide \r\n\r\n1. The commit hash (`git rev-parse HEAD`)\r\n2. The output of `bazel version`\r\n\r\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\r\n\r\nIn the following script, if var is created with `validate_shape=True`, subsequent `tf.assign` operations don't update the shape (they remain as [1]), *but they do update the data*.\r\n\r\nHowever, if the var is created with `validate_shape=False`, subsequent `tf.assign` operations do update both data and the shape,  setting the shape to [1], [10], and [20] respectively.\r\n\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\ndtype = np.float64\r\nshape = (10, )\r\n\r\nph = tf.placeholder(dtype=dtype)\r\nvar = tf.Variable(tf.ones(shape=(1,), dtype=dtype), validate_shape=True)\r\nop = tf.assign(var, ph, validate_shape=False)\r\n\r\ninit_op = tf.initialize_all_variables()\r\n\r\nwith tf.Session() as S:\r\n    S.run(init_op)\r\n    print S.run(tf.shape(var)) # [1]\r\n    print S.run(var)           # [1.]\r\n    S.run(op, feed_dict={ph: np.ones(shape=(10,), dtype=dtype)})\r\n    print S.run(tf.shape(var)) # [1], should be [10]\r\n    print S.run(var)           # [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\r\n\r\n    S.run(op, feed_dict={ph: np.ones(shape=(20,), dtype=dtype)})\r\n    print S.run(tf.shape(var)) # [1], should be [20]\r\n    print S.run(var)           # [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.\r\n  1.  1.]\r\n```\r\n\r\n### What other attempted solutions have you tried?\r\n\r\n\r\n\r\n### Logs or other output that would be helpful\r\n(If logs are large, please upload as attachment or provide link).\r\n"}