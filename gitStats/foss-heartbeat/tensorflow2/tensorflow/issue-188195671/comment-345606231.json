{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/345606231", "html_url": "https://github.com/tensorflow/tensorflow/issues/5492#issuecomment-345606231", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5492", "id": 345606231, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTYwNjIzMQ==", "user": {"login": "zuowang", "id": 10447352, "node_id": "MDQ6VXNlcjEwNDQ3MzUy", "avatar_url": "https://avatars2.githubusercontent.com/u/10447352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zuowang", "html_url": "https://github.com/zuowang", "followers_url": "https://api.github.com/users/zuowang/followers", "following_url": "https://api.github.com/users/zuowang/following{/other_user}", "gists_url": "https://api.github.com/users/zuowang/gists{/gist_id}", "starred_url": "https://api.github.com/users/zuowang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zuowang/subscriptions", "organizations_url": "https://api.github.com/users/zuowang/orgs", "repos_url": "https://api.github.com/users/zuowang/repos", "events_url": "https://api.github.com/users/zuowang/events{/privacy}", "received_events_url": "https://api.github.com/users/zuowang/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-20T06:49:41Z", "updated_at": "2017-11-20T06:49:41Z", "author_association": "NONE", "body_html": "<p>Set <code>validate_shape</code> to False when loading meta graph by adding code</p>\n<pre><code>if graph.node[-1].attr.get(\"validate_shape\"):\n    graph.node[-1].attr[\"validate_shape\"].b = False\n</code></pre>\n<p>to tensorflow/python/framework/ops.py#2318</p>\n<pre><code>with self._lock:\n  graph = graph_pb2.GraphDef()\n  graph.versions.CopyFrom(self._graph_def_versions)\n  bytesize = 0\n  for op_id in sorted(self._nodes_by_id):\n    op = self._nodes_by_id[op_id]\n    if from_version is None or op_id &gt; from_version:\n      graph.node.extend([op.node_def])\n      if graph.node[-1].attr.get(\"validate_shape\"):\n        graph.node[-1].attr[\"validate_shape\"].b = False\n      if op.outputs and add_shapes:\n        assert \"_output_shapes\" not in graph.node[-1].attr\n        graph.node[-1].attr[\"_output_shapes\"].list.shape.extend([\n            output.get_shape().as_proto() for output in op.outputs])\n      bytesize += op.node_def.ByteSize()\n      if bytesize &gt;= (1 &lt;&lt; 31) or bytesize &lt; 0:\n        raise ValueError(\"GraphDef cannot be larger than 2GB.\")\n</code></pre>", "body_text": "Set validate_shape to False when loading meta graph by adding code\nif graph.node[-1].attr.get(\"validate_shape\"):\n    graph.node[-1].attr[\"validate_shape\"].b = False\n\nto tensorflow/python/framework/ops.py#2318\nwith self._lock:\n  graph = graph_pb2.GraphDef()\n  graph.versions.CopyFrom(self._graph_def_versions)\n  bytesize = 0\n  for op_id in sorted(self._nodes_by_id):\n    op = self._nodes_by_id[op_id]\n    if from_version is None or op_id > from_version:\n      graph.node.extend([op.node_def])\n      if graph.node[-1].attr.get(\"validate_shape\"):\n        graph.node[-1].attr[\"validate_shape\"].b = False\n      if op.outputs and add_shapes:\n        assert \"_output_shapes\" not in graph.node[-1].attr\n        graph.node[-1].attr[\"_output_shapes\"].list.shape.extend([\n            output.get_shape().as_proto() for output in op.outputs])\n      bytesize += op.node_def.ByteSize()\n      if bytesize >= (1 << 31) or bytesize < 0:\n        raise ValueError(\"GraphDef cannot be larger than 2GB.\")", "body": "Set `validate_shape` to False when loading meta graph by adding code\r\n\r\n    if graph.node[-1].attr.get(\"validate_shape\"):\r\n        graph.node[-1].attr[\"validate_shape\"].b = False\r\n\r\nto tensorflow/python/framework/ops.py#2318\r\n\r\n    with self._lock:\r\n      graph = graph_pb2.GraphDef()\r\n      graph.versions.CopyFrom(self._graph_def_versions)\r\n      bytesize = 0\r\n      for op_id in sorted(self._nodes_by_id):\r\n        op = self._nodes_by_id[op_id]\r\n        if from_version is None or op_id > from_version:\r\n          graph.node.extend([op.node_def])\r\n          if graph.node[-1].attr.get(\"validate_shape\"):\r\n            graph.node[-1].attr[\"validate_shape\"].b = False\r\n          if op.outputs and add_shapes:\r\n            assert \"_output_shapes\" not in graph.node[-1].attr\r\n            graph.node[-1].attr[\"_output_shapes\"].list.shape.extend([\r\n                output.get_shape().as_proto() for output in op.outputs])\r\n          bytesize += op.node_def.ByteSize()\r\n          if bytesize >= (1 << 31) or bytesize < 0:\r\n            raise ValueError(\"GraphDef cannot be larger than 2GB.\")"}