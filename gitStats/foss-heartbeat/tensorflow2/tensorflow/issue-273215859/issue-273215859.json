{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14492", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14492/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14492/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14492/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/14492", "id": 273215859, "node_id": "MDExOlB1bGxSZXF1ZXN0MTUyMDk2MjY5", "number": 14492, "title": "Add a mutex in cuda_solvers GetrfImpl.", "user": {"login": "codrut3", "id": 10788581, "node_id": "MDQ6VXNlcjEwNzg4NTgx", "avatar_url": "https://avatars1.githubusercontent.com/u/10788581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codrut3", "html_url": "https://github.com/codrut3", "followers_url": "https://api.github.com/users/codrut3/followers", "following_url": "https://api.github.com/users/codrut3/following{/other_user}", "gists_url": "https://api.github.com/users/codrut3/gists{/gist_id}", "starred_url": "https://api.github.com/users/codrut3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codrut3/subscriptions", "organizations_url": "https://api.github.com/users/codrut3/orgs", "repos_url": "https://api.github.com/users/codrut3/repos", "events_url": "https://api.github.com/users/codrut3/events{/privacy}", "received_events_url": "https://api.github.com/users/codrut3/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 419840263, "node_id": "MDU6TGFiZWw0MTk4NDAyNjM=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20testing%20(then%20merge)", "name": "awaiting testing (then merge)", "color": "c2e0c6", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "jhseu", "id": 170179, "node_id": "MDQ6VXNlcjE3MDE3OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/170179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhseu", "html_url": "https://github.com/jhseu", "followers_url": "https://api.github.com/users/jhseu/followers", "following_url": "https://api.github.com/users/jhseu/following{/other_user}", "gists_url": "https://api.github.com/users/jhseu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhseu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhseu/subscriptions", "organizations_url": "https://api.github.com/users/jhseu/orgs", "repos_url": "https://api.github.com/users/jhseu/repos", "events_url": "https://api.github.com/users/jhseu/events{/privacy}", "received_events_url": "https://api.github.com/users/jhseu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jhseu", "id": 170179, "node_id": "MDQ6VXNlcjE3MDE3OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/170179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhseu", "html_url": "https://github.com/jhseu", "followers_url": "https://api.github.com/users/jhseu/followers", "following_url": "https://api.github.com/users/jhseu/following{/other_user}", "gists_url": "https://api.github.com/users/jhseu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhseu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhseu/subscriptions", "organizations_url": "https://api.github.com/users/jhseu/orgs", "repos_url": "https://api.github.com/users/jhseu/repos", "events_url": "https://api.github.com/users/jhseu/events{/privacy}", "received_events_url": "https://api.github.com/users/jhseu/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2017-11-12T09:35:16Z", "updated_at": "2017-12-29T01:38:28Z", "closed_at": "2017-12-29T01:38:28Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14492", "html_url": "https://github.com/tensorflow/tensorflow/pull/14492", "diff_url": "https://github.com/tensorflow/tensorflow/pull/14492.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/14492.patch"}, "body_html": "<p>This should solve issue <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"263680176\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/13558\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/13558/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/13558\">#13558</a>. Because NVIDIA does not publish the code, it is not possible to prove<br>\nthe bug is in the cuSolver function. However, I have removed / commented code from<br>\nmatrix_inverse_op.cpp until essentially only the call to solver-&gt;Getrf remained, and from <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a>'<br>\nproject mostly everything except the regularized_inverse calls, and the segmentation fault still<br>\noccurred. It did not appear when there was a single thread calling regularized_inverse. The segmentation fault always occurs without my change, and never after introducing the<br>\nlock (although that in itself does not mean the bug is solved).</p>\n<p>Note that GetrsImpl is already protected with a lock, so apparently this issue was known.</p>\n<p>Finally, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=23068\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaroslavvb\">@yaroslavvb</a> has a second stacktrace which does not involve the Getrf function.<br>\nI could not reproduce this error, but it may be a different bug.</p>", "body_text": "This should solve issue #13558. Because NVIDIA does not publish the code, it is not possible to prove\nthe bug is in the cuSolver function. However, I have removed / commented code from\nmatrix_inverse_op.cpp until essentially only the call to solver->Getrf remained, and from @yaroslavvb'\nproject mostly everything except the regularized_inverse calls, and the segmentation fault still\noccurred. It did not appear when there was a single thread calling regularized_inverse. The segmentation fault always occurs without my change, and never after introducing the\nlock (although that in itself does not mean the bug is solved).\nNote that GetrsImpl is already protected with a lock, so apparently this issue was known.\nFinally, @yaroslavvb has a second stacktrace which does not involve the Getrf function.\nI could not reproduce this error, but it may be a different bug.", "body": "This should solve issue #13558. Because NVIDIA does not publish the code, it is not possible to prove\r\nthe bug is in the cuSolver function. However, I have removed / commented code from\r\nmatrix_inverse_op.cpp until essentially only the call to solver->Getrf remained, and from @yaroslavvb' \r\nproject mostly everything except the regularized_inverse calls, and the segmentation fault still\r\noccurred. It did not appear when there was a single thread calling regularized_inverse. The segmentation fault always occurs without my change, and never after introducing the\r\nlock (although that in itself does not mean the bug is solved).\r\n\r\nNote that GetrsImpl is already protected with a lock, so apparently this issue was known.\r\n\r\nFinally, @yaroslavvb has a second stacktrace which does not involve the Getrf function.\r\nI could not reproduce this error, but it may be a different bug."}