{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7967", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7967/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7967/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7967/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/7967", "id": 211035977, "node_id": "MDU6SXNzdWUyMTEwMzU5Nzc=", "number": 7967, "title": "\"data_format == FORMAT_NHWC\" error discrepancy", "user": {"login": "TimZaman", "id": 7721540, "node_id": "MDQ6VXNlcjc3MjE1NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7721540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimZaman", "html_url": "https://github.com/TimZaman", "followers_url": "https://api.github.com/users/TimZaman/followers", "following_url": "https://api.github.com/users/TimZaman/following{/other_user}", "gists_url": "https://api.github.com/users/TimZaman/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimZaman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimZaman/subscriptions", "organizations_url": "https://api.github.com/users/TimZaman/orgs", "repos_url": "https://api.github.com/users/TimZaman/repos", "events_url": "https://api.github.com/users/TimZaman/events{/privacy}", "received_events_url": "https://api.github.com/users/TimZaman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 386191887, "node_id": "MDU6TGFiZWwzODYxOTE4ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20response", "name": "stat:awaiting response", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-01T10:16:05Z", "updated_at": "2017-03-09T21:13:39Z", "closed_at": "2017-03-09T21:13:39Z", "author_association": "CONTRIBUTOR", "body_html": "<p><code>tf.nn.conv2d()</code>'s behaviour on throwing the \"data_format == FORMAT_NHWC\" assertion seems odd. I cooked up a minimal example:</p>\n<div class=\"highlight highlight-source-python\"><pre>input_np <span class=\"pl-k\">=</span> np.zeros([<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\nx <span class=\"pl-k\">=</span> tf.constant(input_np, <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\n<span class=\"pl-c1\">filter</span> <span class=\"pl-k\">=</span> tf.ones([<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\nout <span class=\"pl-k\">=</span> tf.nn.conv2d(x, <span class=\"pl-c1\">filter</span>, [<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>], <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>SAME<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">data_format</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>NCHW<span class=\"pl-pds\">'</span></span>)\nsess<span class=\"pl-k\">=</span> tf.Session()\nsess.run(tf.global_variables_initializer())\nsess.run(out)</pre></div>\n<p>Throws:</p>\n<pre><code>F tensorflow/core/kernels/conv_ops.cc:62] Check failed: data_format == FORMAT_NHWC\nGeneric conv implementation only supports NHWC tensor format for now.\nAborted (core dumped)\n</code></pre>\n<p>While this works fine, and it uses exactly the same variables, but now I am feeding a placeholder.</p>\n<div class=\"highlight highlight-source-python\"><pre>input_np <span class=\"pl-k\">=</span> np.zeros([<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>np.float32)\nx <span class=\"pl-k\">=</span> tf.placeholder(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>float<span class=\"pl-pds\">\"</span></span>, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">4</span>,<span class=\"pl-c1\">4</span>])\n<span class=\"pl-c1\">filter</span> <span class=\"pl-k\">=</span> tf.ones([<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span>tf.float32)\nout <span class=\"pl-k\">=</span> tf.nn.conv2d(x, <span class=\"pl-c1\">filter</span>, [<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>], <span class=\"pl-v\">padding</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>SAME<span class=\"pl-pds\">'</span></span>, <span class=\"pl-v\">data_format</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>NCHW<span class=\"pl-pds\">'</span></span>)\nsess<span class=\"pl-k\">=</span> tf.Session()\nsess.run(tf.global_variables_initializer())\nsess.run(out, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x:input_np})</pre></div>\n<p>Using 0.12.1, error is consistent across: OS-X as Ubuntu 14.04, regardless of CPU or GPU device placement.</p>", "body_text": "tf.nn.conv2d()'s behaviour on throwing the \"data_format == FORMAT_NHWC\" assertion seems odd. I cooked up a minimal example:\ninput_np = np.zeros([1,1,4,4], dtype=np.float32)\nx = tf.constant(input_np, dtype=tf.float32)\nfilter = tf.ones([1,1,1,1], dtype=tf.float32)\nout = tf.nn.conv2d(x, filter, [1,1,1,1], padding='SAME', data_format='NCHW')\nsess= tf.Session()\nsess.run(tf.global_variables_initializer())\nsess.run(out)\nThrows:\nF tensorflow/core/kernels/conv_ops.cc:62] Check failed: data_format == FORMAT_NHWC\nGeneric conv implementation only supports NHWC tensor format for now.\nAborted (core dumped)\n\nWhile this works fine, and it uses exactly the same variables, but now I am feeding a placeholder.\ninput_np = np.zeros([1,1,4,4], dtype=np.float32)\nx = tf.placeholder(\"float\", [None, 1,4,4])\nfilter = tf.ones([1,1,1,1], dtype=tf.float32)\nout = tf.nn.conv2d(x, filter, [1,1,1,1], padding='SAME', data_format='NCHW')\nsess= tf.Session()\nsess.run(tf.global_variables_initializer())\nsess.run(out, feed_dict={x:input_np})\nUsing 0.12.1, error is consistent across: OS-X as Ubuntu 14.04, regardless of CPU or GPU device placement.", "body": "`tf.nn.conv2d()`'s behaviour on throwing the \"data_format == FORMAT_NHWC\" assertion seems odd. I cooked up a minimal example:\r\n\r\n```py\r\ninput_np = np.zeros([1,1,4,4], dtype=np.float32)\r\nx = tf.constant(input_np, dtype=tf.float32)\r\nfilter = tf.ones([1,1,1,1], dtype=tf.float32)\r\nout = tf.nn.conv2d(x, filter, [1,1,1,1], padding='SAME', data_format='NCHW')\r\nsess= tf.Session()\r\nsess.run(tf.global_variables_initializer())\r\nsess.run(out)\r\n```\r\nThrows:\r\n```\r\nF tensorflow/core/kernels/conv_ops.cc:62] Check failed: data_format == FORMAT_NHWC\r\nGeneric conv implementation only supports NHWC tensor format for now.\r\nAborted (core dumped)\r\n```\r\n\r\nWhile this works fine, and it uses exactly the same variables, but now I am feeding a placeholder.\r\n```py\r\ninput_np = np.zeros([1,1,4,4], dtype=np.float32)\r\nx = tf.placeholder(\"float\", [None, 1,4,4])\r\nfilter = tf.ones([1,1,1,1], dtype=tf.float32)\r\nout = tf.nn.conv2d(x, filter, [1,1,1,1], padding='SAME', data_format='NCHW')\r\nsess= tf.Session()\r\nsess.run(tf.global_variables_initializer())\r\nsess.run(out, feed_dict={x:input_np})\r\n```\r\n\r\nUsing 0.12.1, error is consistent across: OS-X as Ubuntu 14.04, regardless of CPU or GPU device placement."}