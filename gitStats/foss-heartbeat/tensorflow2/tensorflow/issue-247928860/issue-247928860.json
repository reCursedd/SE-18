{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12029", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12029/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12029/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/12029/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/12029", "id": 247928860, "node_id": "MDExOlB1bGxSZXF1ZXN0MTM0MTA5MjQx", "number": 12029, "title": "Add int64_t typemap for swig", "user": {"login": "naurril", "id": 7512334, "node_id": "MDQ6VXNlcjc1MTIzMzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/7512334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naurril", "html_url": "https://github.com/naurril", "followers_url": "https://api.github.com/users/naurril/followers", "following_url": "https://api.github.com/users/naurril/following{/other_user}", "gists_url": "https://api.github.com/users/naurril/gists{/gist_id}", "starred_url": "https://api.github.com/users/naurril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naurril/subscriptions", "organizations_url": "https://api.github.com/users/naurril/orgs", "repos_url": "https://api.github.com/users/naurril/repos", "events_url": "https://api.github.com/users/naurril/events{/privacy}", "received_events_url": "https://api.github.com/users/naurril/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 419840263, "node_id": "MDU6TGFiZWw0MTk4NDAyNjM=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20testing%20(then%20merge)", "name": "awaiting testing (then merge)", "color": "c2e0c6", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2017-08-04T07:47:53Z", "updated_at": "2017-09-19T00:43:59Z", "closed_at": "2017-09-19T00:43:59Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/12029", "html_url": "https://github.com/tensorflow/tensorflow/pull/12029", "diff_url": "https://github.com/tensorflow/tensorflow/pull/12029.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/12029.patch"}, "body_html": "<p><code>Session.list_devices()</code>  gives  wrong memory bytes, and after the call, swig complains a memory leak:</p>\n<pre><code># on Win7, 1.3.0RC1\n&gt;&gt;&gt; s.list_devices()\n[_DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 69731600)]\n&gt;&gt;&gt; 1\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\n1\n\n# on Linux, 1.3.0RC2\n&gt;&gt;&gt; s.list_devices()\n[_DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 94080344021520), _DeviceAttributes(/job:localhost/replica:0/task:0/device:GPU:0, GPU, 94080320350144)]\n&gt;&gt;&gt; 1\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\n1\n\n</code></pre>\n<p>The reason is the CAPI <code>TF_DeviceListMemoryBytes</code> returns value of type 'int64_t', for which swig can not generate a correct wrapper:</p>\n<pre><code>TF_CAPI_EXPORT extern int64_t TF_DeviceListMemoryBytes(\n    const TF_DeviceList* list, int index, TF_Status*);\n</code></pre>\n<pre><code>SWIGINTERN PyObject *_wrap_TF_DeviceListMemoryBytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {\n  //...\n  result = TF_DeviceListMemoryBytes((TF_DeviceList const *)arg1,arg2,arg3);\n  // problem  here\n  resultobj = SWIG_NewPointerObj((new int64_t(static_cast&lt; const int64_t&amp; &gt;(result))), }\n\n //...\n}\n</code></pre>\n<p>This wrapper causes the python side code read the address rather than the value of the int64_t variable (which is why memory bytes is wrong). And since there is no destructor for int64_t, swig complains about it.</p>\n<p>There is another CAPI <code>TF_Dim</code> that has the same problem.</p>\n<p>The problem is solved by adding a <code>int64_t</code>  typemap for swig, then the wrapper will be like this:</p>\n<pre><code>    result = TF_DeviceListMemoryBytes((TF_DeviceList const *)arg1,arg2,arg3);\n    //...\n    resultobj = PyLong_FromLongLong(result); \n</code></pre>", "body_text": "Session.list_devices()  gives  wrong memory bytes, and after the call, swig complains a memory leak:\n# on Win7, 1.3.0RC1\n>>> s.list_devices()\n[_DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 69731600)]\n>>> 1\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\n1\n\n# on Linux, 1.3.0RC2\n>>> s.list_devices()\n[_DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 94080344021520), _DeviceAttributes(/job:localhost/replica:0/task:0/device:GPU:0, GPU, 94080320350144)]\n>>> 1\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\n1\n\n\nThe reason is the CAPI TF_DeviceListMemoryBytes returns value of type 'int64_t', for which swig can not generate a correct wrapper:\nTF_CAPI_EXPORT extern int64_t TF_DeviceListMemoryBytes(\n    const TF_DeviceList* list, int index, TF_Status*);\n\nSWIGINTERN PyObject *_wrap_TF_DeviceListMemoryBytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {\n  //...\n  result = TF_DeviceListMemoryBytes((TF_DeviceList const *)arg1,arg2,arg3);\n  // problem  here\n  resultobj = SWIG_NewPointerObj((new int64_t(static_cast< const int64_t& >(result))), }\n\n //...\n}\n\nThis wrapper causes the python side code read the address rather than the value of the int64_t variable (which is why memory bytes is wrong). And since there is no destructor for int64_t, swig complains about it.\nThere is another CAPI TF_Dim that has the same problem.\nThe problem is solved by adding a int64_t  typemap for swig, then the wrapper will be like this:\n    result = TF_DeviceListMemoryBytes((TF_DeviceList const *)arg1,arg2,arg3);\n    //...\n    resultobj = PyLong_FromLongLong(result);", "body": "```Session.list_devices()```  gives  wrong memory bytes, and after the call, swig complains a memory leak: \r\n```\r\n# on Win7, 1.3.0RC1\r\n>>> s.list_devices()\r\n[_DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 69731600)]\r\n>>> 1\r\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\r\n1\r\n\r\n# on Linux, 1.3.0RC2\r\n>>> s.list_devices()\r\n[_DeviceAttributes(/job:localhost/replica:0/task:0/device:CPU:0, CPU, 94080344021520), _DeviceAttributes(/job:localhost/replica:0/task:0/device:GPU:0, GPU, 94080320350144)]\r\n>>> 1\r\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\r\nswig/python detected a memory leak of type 'int64_t *', no destructor found.\r\n1\r\n\r\n```\r\nThe reason is the CAPI ```TF_DeviceListMemoryBytes``` returns value of type 'int64_t', for which swig can not generate a correct wrapper:\r\n```\r\nTF_CAPI_EXPORT extern int64_t TF_DeviceListMemoryBytes(\r\n    const TF_DeviceList* list, int index, TF_Status*);\r\n```\r\n```\r\nSWIGINTERN PyObject *_wrap_TF_DeviceListMemoryBytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {\r\n  //...\r\n  result = TF_DeviceListMemoryBytes((TF_DeviceList const *)arg1,arg2,arg3);\r\n  // problem  here\r\n  resultobj = SWIG_NewPointerObj((new int64_t(static_cast< const int64_t& >(result))), }\r\n\r\n //...\r\n}\r\n```\r\nThis wrapper causes the python side code read the address rather than the value of the int64_t variable (which is why memory bytes is wrong). And since there is no destructor for int64_t, swig complains about it.\r\n\r\nThere is another CAPI ```TF_Dim``` that has the same problem.\r\n\r\nThe problem is solved by adding a ```int64_t```  typemap for swig, then the wrapper will be like this:\r\n```\r\n    result = TF_DeviceListMemoryBytes((TF_DeviceList const *)arg1,arg2,arg3);\r\n    //...\r\n    resultobj = PyLong_FromLongLong(result); \r\n```"}