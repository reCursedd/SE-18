{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/223709651", "html_url": "https://github.com/tensorflow/tensorflow/issues/2586#issuecomment-223709651", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2586", "id": 223709651, "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzcwOTY1MQ==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-03T22:27:35Z", "updated_at": "2016-06-03T22:27:35Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I found one work-around for this case -- explicitly specify device <code>/cpu:0</code> when creating <code>get_session_tensor</code> op and modify <code>session_ops.py</code> to propagate that info as follows:</p>\n<p>replace</p>\n<pre><code>  with ops.device(None):\n    # Commit the device when it is used the first time.\n    holder = array_ops.placeholder(dtypes.string)\n    _register_handle_feeder(holder.graph, holder, dtype)\n    tensor = gen_data_flow_ops._get_session_tensor(holder, dtype, name=name)\n  return (holder, tensor)\n</code></pre>\n<p>with</p>\n<pre><code>  with ops.device(None):\n    # Commit the device when it is used the first time.\n    holder = array_ops.placeholder(dtypes.string)\n    _register_handle_feeder(holder.graph, holder, dtype)\n  tensor = gen_data_flow_ops._get_session_tensor(holder, dtype, name=name)\n  return (holder, tensor)\n</code></pre>", "body_text": "I found one work-around for this case -- explicitly specify device /cpu:0 when creating get_session_tensor op and modify session_ops.py to propagate that info as follows:\nreplace\n  with ops.device(None):\n    # Commit the device when it is used the first time.\n    holder = array_ops.placeholder(dtypes.string)\n    _register_handle_feeder(holder.graph, holder, dtype)\n    tensor = gen_data_flow_ops._get_session_tensor(holder, dtype, name=name)\n  return (holder, tensor)\n\nwith\n  with ops.device(None):\n    # Commit the device when it is used the first time.\n    holder = array_ops.placeholder(dtypes.string)\n    _register_handle_feeder(holder.graph, holder, dtype)\n  tensor = gen_data_flow_ops._get_session_tensor(holder, dtype, name=name)\n  return (holder, tensor)", "body": "I found one work-around for this case -- explicitly specify device `/cpu:0` when creating `get_session_tensor` op and modify `session_ops.py` to propagate that info as follows:\n\nreplace\n\n```\n  with ops.device(None):\n    # Commit the device when it is used the first time.\n    holder = array_ops.placeholder(dtypes.string)\n    _register_handle_feeder(holder.graph, holder, dtype)\n    tensor = gen_data_flow_ops._get_session_tensor(holder, dtype, name=name)\n  return (holder, tensor)\n```\n\nwith\n\n```\n  with ops.device(None):\n    # Commit the device when it is used the first time.\n    holder = array_ops.placeholder(dtypes.string)\n    _register_handle_feeder(holder.graph, holder, dtype)\n  tensor = gen_data_flow_ops._get_session_tensor(holder, dtype, name=name)\n  return (holder, tensor)\n```\n"}