{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2586", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2586/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2586/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2586/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2586", "id": 157553493, "node_id": "MDU6SXNzdWUxNTc1NTM0OTM=", "number": 2586, "title": "Persistent tensors get placed onto GPU unexpectedly", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "yuanbyu", "id": 2342391, "node_id": "MDQ6VXNlcjIzNDIzOTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2342391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuanbyu", "html_url": "https://github.com/yuanbyu", "followers_url": "https://api.github.com/users/yuanbyu/followers", "following_url": "https://api.github.com/users/yuanbyu/following{/other_user}", "gists_url": "https://api.github.com/users/yuanbyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuanbyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuanbyu/subscriptions", "organizations_url": "https://api.github.com/users/yuanbyu/orgs", "repos_url": "https://api.github.com/users/yuanbyu/repos", "events_url": "https://api.github.com/users/yuanbyu/events{/privacy}", "received_events_url": "https://api.github.com/users/yuanbyu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "yuanbyu", "id": 2342391, "node_id": "MDQ6VXNlcjIzNDIzOTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2342391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuanbyu", "html_url": "https://github.com/yuanbyu", "followers_url": "https://api.github.com/users/yuanbyu/followers", "following_url": "https://api.github.com/users/yuanbyu/following{/other_user}", "gists_url": "https://api.github.com/users/yuanbyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuanbyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuanbyu/subscriptions", "organizations_url": "https://api.github.com/users/yuanbyu/orgs", "repos_url": "https://api.github.com/users/yuanbyu/repos", "events_url": "https://api.github.com/users/yuanbyu/events{/privacy}", "received_events_url": "https://api.github.com/users/yuanbyu/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2016-05-30T20:31:04Z", "updated_at": "2016-06-10T18:07:54Z", "closed_at": "2016-06-10T18:07:54Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Running <code>get_session_handle</code> ops seems to affect where subsequent <code>get_session_tensor</code> is placed.<br>\nThe following fails when built with <code>config=cuda</code> with</p>\n<pre><code>E tensorflow/stream_executor/cuda/cuda_driver.cc:1239] failed to enqueue async memcpy from device to host: CUDA_ERROR_INVALID_VALUE; host dst: 0x208a00000; GPU src: 0x1b1a4a0; size: 4=0x4\nF tensorflow/core/common_runtime/gpu/gpu_util.cc:296] GPU-&gt;CPU Memcpy failed\n\n</code></pre>\n<p>Looking at device placement, it seems that <code>GetSessionTensor</code> ops are placed on GPU. Changing <code>failure_case</code> to <code>False</code> makes the test below pass as everything is placed on CPU as expected.</p>\n<pre><code>import tensorflow as tf                                                         \n\nclass HandleTest(tf.test.TestCase):                                             \n\n  def testHandle(self):                                                         \n    with self.test_session() as sess:                                           \n      a = tf.constant(1.0)                                                      \n      a_handle_op = tf.get_session_handle(a)                                    \n      b = tf.constant(2.0)                                                      \n      b_handle_op = tf.get_session_handle(b)                                    \n\n      failure_case = True                                                       \n      if failure_case:                                                          \n        a_p, a_t = tf.get_session_tensor(tf.float32)                            \n        b_p, b_t = tf.get_session_tensor(tf.float32)                            \n        a_handle = sess.run(a_handle_op)                                        \n        b_handle = sess.run(b_handle_op)                                        \n      else:                                                                     \n        a_handle = sess.run(a_handle_op)                                        \n        b_handle = sess.run(b_handle_op)                                        \n        a_p, a_t = tf.get_session_tensor(tf.float32)                            \n        b_p, b_t = tf.get_session_tensor(tf.float32)                            \n\n      c = tf.add(a_t, b_t)                                                      \n      c_handle = sess.run(                                                      \n        tf.get_session_handle(c),                                               \n        feed_dict={a_p: a_handle.handle,                                        \n                   b_p: b_handle.handle})                                       \n      self.assertEqual(3.0, c_handle.eval())                                    \n\n\nif __name__ == \"__main__\":                                                      \n  tf.test.main()                                                                \n\n</code></pre>", "body_text": "Running get_session_handle ops seems to affect where subsequent get_session_tensor is placed.\nThe following fails when built with config=cuda with\nE tensorflow/stream_executor/cuda/cuda_driver.cc:1239] failed to enqueue async memcpy from device to host: CUDA_ERROR_INVALID_VALUE; host dst: 0x208a00000; GPU src: 0x1b1a4a0; size: 4=0x4\nF tensorflow/core/common_runtime/gpu/gpu_util.cc:296] GPU->CPU Memcpy failed\n\n\nLooking at device placement, it seems that GetSessionTensor ops are placed on GPU. Changing failure_case to False makes the test below pass as everything is placed on CPU as expected.\nimport tensorflow as tf                                                         \n\nclass HandleTest(tf.test.TestCase):                                             \n\n  def testHandle(self):                                                         \n    with self.test_session() as sess:                                           \n      a = tf.constant(1.0)                                                      \n      a_handle_op = tf.get_session_handle(a)                                    \n      b = tf.constant(2.0)                                                      \n      b_handle_op = tf.get_session_handle(b)                                    \n\n      failure_case = True                                                       \n      if failure_case:                                                          \n        a_p, a_t = tf.get_session_tensor(tf.float32)                            \n        b_p, b_t = tf.get_session_tensor(tf.float32)                            \n        a_handle = sess.run(a_handle_op)                                        \n        b_handle = sess.run(b_handle_op)                                        \n      else:                                                                     \n        a_handle = sess.run(a_handle_op)                                        \n        b_handle = sess.run(b_handle_op)                                        \n        a_p, a_t = tf.get_session_tensor(tf.float32)                            \n        b_p, b_t = tf.get_session_tensor(tf.float32)                            \n\n      c = tf.add(a_t, b_t)                                                      \n      c_handle = sess.run(                                                      \n        tf.get_session_handle(c),                                               \n        feed_dict={a_p: a_handle.handle,                                        \n                   b_p: b_handle.handle})                                       \n      self.assertEqual(3.0, c_handle.eval())                                    \n\n\nif __name__ == \"__main__\":                                                      \n  tf.test.main()", "body": "Running `get_session_handle` ops seems to affect where subsequent `get_session_tensor` is placed.\nThe following fails when built with `config=cuda` with\n\n```\nE tensorflow/stream_executor/cuda/cuda_driver.cc:1239] failed to enqueue async memcpy from device to host: CUDA_ERROR_INVALID_VALUE; host dst: 0x208a00000; GPU src: 0x1b1a4a0; size: 4=0x4\nF tensorflow/core/common_runtime/gpu/gpu_util.cc:296] GPU->CPU Memcpy failed\n\n```\n\nLooking at device placement, it seems that `GetSessionTensor` ops are placed on GPU. Changing `failure_case` to `False` makes the test below pass as everything is placed on CPU as expected.\n\n```\nimport tensorflow as tf                                                         \n\nclass HandleTest(tf.test.TestCase):                                             \n\n  def testHandle(self):                                                         \n    with self.test_session() as sess:                                           \n      a = tf.constant(1.0)                                                      \n      a_handle_op = tf.get_session_handle(a)                                    \n      b = tf.constant(2.0)                                                      \n      b_handle_op = tf.get_session_handle(b)                                    \n\n      failure_case = True                                                       \n      if failure_case:                                                          \n        a_p, a_t = tf.get_session_tensor(tf.float32)                            \n        b_p, b_t = tf.get_session_tensor(tf.float32)                            \n        a_handle = sess.run(a_handle_op)                                        \n        b_handle = sess.run(b_handle_op)                                        \n      else:                                                                     \n        a_handle = sess.run(a_handle_op)                                        \n        b_handle = sess.run(b_handle_op)                                        \n        a_p, a_t = tf.get_session_tensor(tf.float32)                            \n        b_p, b_t = tf.get_session_tensor(tf.float32)                            \n\n      c = tf.add(a_t, b_t)                                                      \n      c_handle = sess.run(                                                      \n        tf.get_session_handle(c),                                               \n        feed_dict={a_p: a_handle.handle,                                        \n                   b_p: b_handle.handle})                                       \n      self.assertEqual(3.0, c_handle.eval())                                    \n\n\nif __name__ == \"__main__\":                                                      \n  tf.test.main()                                                                \n\n```\n"}