{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3042", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3042/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3042/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3042/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/3042", "id": 162281886, "node_id": "MDU6SXNzdWUxNjIyODE4ODY=", "number": 3042, "title": "Inconsistent naming of the getter functions in the C API", "user": {"login": "IvanUkhov", "id": 57440, "node_id": "MDQ6VXNlcjU3NDQw", "avatar_url": "https://avatars1.githubusercontent.com/u/57440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IvanUkhov", "html_url": "https://github.com/IvanUkhov", "followers_url": "https://api.github.com/users/IvanUkhov/followers", "following_url": "https://api.github.com/users/IvanUkhov/following{/other_user}", "gists_url": "https://api.github.com/users/IvanUkhov/gists{/gist_id}", "starred_url": "https://api.github.com/users/IvanUkhov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IvanUkhov/subscriptions", "organizations_url": "https://api.github.com/users/IvanUkhov/orgs", "repos_url": "https://api.github.com/users/IvanUkhov/repos", "events_url": "https://api.github.com/users/IvanUkhov/events{/privacy}", "received_events_url": "https://api.github.com/users/IvanUkhov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-25T13:46:51Z", "updated_at": "2016-06-25T16:26:47Z", "closed_at": "2016-06-25T16:26:47Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The naming scheme of the getter functions in the <a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/public/tensor_c_api.h\">C API</a> seems to be a bit inconsistent. For instance, there are the following declarations:</p>\n<div class=\"highlight highlight-source-c\"><pre><span class=\"pl-c\"><span class=\"pl-c\">//</span> With \u201cGet\u201d and without the type name.</span>\n<span class=\"pl-k\">extern</span> TF_Code <span class=\"pl-en\">TF_GetCode</span>(<span class=\"pl-k\">const</span> TF_Status*);\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Without \u201cGet\u201d and without the type name.</span>\n<span class=\"pl-k\">extern</span> <span class=\"pl-k\">const</span> <span class=\"pl-k\">char</span>* <span class=\"pl-en\">TF_Message</span>(<span class=\"pl-k\">const</span> TF_Status*);\n\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> Without \u201cGet\u201d and with the type name (\u201cTensor\u201d).</span>\n<span class=\"pl-k\">extern</span> TF_DataType <span class=\"pl-en\">TF_TensorType</span>(<span class=\"pl-k\">const</span> TF_Tensor*);</pre></div>\n<p>The first two are even concerned with the same type, <code>TF_Status</code>. I\u2019m curious if there\u2019s any particular reason behind this naming. Thanks!</p>\n<p>Regards,<br>\nIvan</p>", "body_text": "The naming scheme of the getter functions in the C API seems to be a bit inconsistent. For instance, there are the following declarations:\n// With \u201cGet\u201d and without the type name.\nextern TF_Code TF_GetCode(const TF_Status*);\n\n// Without \u201cGet\u201d and without the type name.\nextern const char* TF_Message(const TF_Status*);\n\n// Without \u201cGet\u201d and with the type name (\u201cTensor\u201d).\nextern TF_DataType TF_TensorType(const TF_Tensor*);\nThe first two are even concerned with the same type, TF_Status. I\u2019m curious if there\u2019s any particular reason behind this naming. Thanks!\nRegards,\nIvan", "body": "The naming scheme of the getter functions in the [C API](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/public/tensor_c_api.h) seems to be a bit inconsistent. For instance, there are the following declarations:\n\n``` c\n// With \u201cGet\u201d and without the type name.\nextern TF_Code TF_GetCode(const TF_Status*);\n\n// Without \u201cGet\u201d and without the type name.\nextern const char* TF_Message(const TF_Status*);\n\n// Without \u201cGet\u201d and with the type name (\u201cTensor\u201d).\nextern TF_DataType TF_TensorType(const TF_Tensor*);\n```\n\nThe first two are even concerned with the same type, `TF_Status`. I\u2019m curious if there\u2019s any particular reason behind this naming. Thanks!\n\nRegards,\nIvan\n"}