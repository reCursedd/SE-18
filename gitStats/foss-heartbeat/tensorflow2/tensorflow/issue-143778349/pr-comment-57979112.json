{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/57979112", "pull_request_review_id": null, "id": 57979112, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTc5MTEy", "diff_hunk": "@@ -0,0 +1,324 @@\n+# Copyright 2015 Google Inc. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\n+\"\"\"Tests for GridRNN cells.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+import numpy as np\n+import tensorflow as tf\n+\n+\n+class GridRNNCellTest(tf.test.TestCase):\n+\n+  def testGrid2BasicLSTMCell(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope('root', initializer=tf.constant_initializer(0.2)) as root_scope:\n+        x = tf.zeros([1, 3])\n+        m = tf.zeros([1, 8])\n+        cell = tf.contrib.grid_rnn.Grid2BasicLSTMCell(2, input_size=3)\n+        self.assertEqual(cell.output_size, 2)\n+        self.assertEqual(cell.input_size, 3)\n+        self.assertEqual(cell.state_size, 8)\n+        g, s = cell(x, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g, s], {x.name: np.array([[1., 1., 1.]]),\n+                             m.name: np.array([[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]])})\n+        self.assertEqual(res[0].shape, (1, 2))\n+        self.assertEqual(res[1].shape, (1, 8))\n+        self.assertAllClose(res[0], [[ 0.36617181, 0.36617181]])\n+        self.assertAllClose(res[1], [[ 0.71053141, 0.71053141, 0.36617181, 0.36617181,\n+                                       0.72320831, 0.80555487, 0.39102408, 0.42150158]])\n+\n+        # emulate a training loop, where we call cell() multiple times\n+        root_scope.reuse_variables()\n+        g2, s2 = cell(x, m)\n+        res = sess.run([g2, s2], {x.name: np.array([[2., 2., 2.]]), m.name: res[1]})\n+        self.assertEqual(res[0].shape, (1, 2))\n+        self.assertEqual(res[1].shape, (1, 8))\n+        self.assertAllClose(res[0], [[0.58847463, 0.58847463]])\n+        self.assertAllClose(res[1], [[1.40469193, 1.40469193, 0.58847463, 0.58847463,\n+                                      0.97726452, 1.04626071, 0.4927212, 0.51137757]])\n+\n+  def testGrid2BasicLSTMCellTied(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope('root', initializer=tf.constant_initializer(0.2)):\n+        x = tf.zeros([1, 3])\n+        m = tf.zeros([1, 8])\n+        cell = tf.contrib.grid_rnn.Grid2BasicLSTMCell(2, input_size=3, tied=True)\n+        self.assertEqual(cell.output_size, 2)\n+        self.assertEqual(cell.input_size, 3)\n+        self.assertEqual(cell.state_size, 8)\n+        g, s = cell(x, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g, s], {x.name: np.array([[1., 1., 1.]]),\n+                             m.name: np.array([[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]])})\n+        self.assertEqual(res[0].shape, (1, 2))\n+        self.assertEqual(res[1].shape, (1, 8))\n+        self.assertAllClose(res[0], [[ 0.36617181, 0.36617181]])\n+        self.assertAllClose(res[1], [[ 0.71053141, 0.71053141, 0.36617181, 0.36617181,\n+                                       0.72320831, 0.80555487, 0.39102408, 0.42150158]])\n+\n+        res = sess.run([g, s], {x.name: np.array([[1., 1., 1.]]), m.name: res[1]})\n+        self.assertEqual(res[0].shape, (1, 2))\n+        self.assertEqual(res[1].shape, (1, 8))\n+        self.assertAllClose(res[0], [[0.36703536, 0.36703536]])\n+        self.assertAllClose(res[1], [[0.71200621, 0.71200621, 0.36703536, 0.36703536,\n+                                      0.80941606, 0.87550586, 0.40108523, 0.42199609]])\n+\n+  def testGrid2BasicLSTMCellWithRelu(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope('root', initializer=tf.constant_initializer(0.2)):\n+        x = tf.zeros([1, 3])\n+        m = tf.zeros([1, 4])\n+        cell = tf.contrib.grid_rnn.Grid2BasicLSTMCell(2, input_size=3, tied=False, non_recurrent_fn=tf.nn.relu)\n+        self.assertEqual(cell.output_size, 2)\n+        self.assertEqual(cell.input_size, 3)\n+        self.assertEqual(cell.state_size, 4)\n+        g, s = cell(x, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g, s], {x.name: np.array([[1., 1., 1.]]),\n+                             m.name: np.array([[0.1, 0.2, 0.3, 0.4]])})\n+        self.assertEqual(res[0].shape, (1, 2))\n+        self.assertEqual(res[1].shape, (1, 4))\n+        self.assertAllClose(res[0], [[ 0.31667367, 0.31667367]])\n+        self.assertAllClose(res[1], [[ 0.29530135, 0.37520045, 0.17044567, 0.21292259]])\n+\n+  \"\"\"\n+  LSTMCell\n+  \"\"\"\n+\n+  def testGrid2LSTMCell(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope('root', initializer=tf.constant_initializer(0.5)):\n+        x = tf.zeros([1, 3])\n+        m = tf.zeros([1, 8])\n+        cell = tf.contrib.grid_rnn.Grid2LSTMCell(2, input_size=3, use_peepholes=True)\n+        self.assertEqual(cell.output_size, 2)\n+        self.assertEqual(cell.input_size, 3)\n+        self.assertEqual(cell.state_size, 8)\n+        g, s = cell(x, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g, s], {x.name: np.array([[1., 1., 1.]]),\n+                                m.name: np.array([[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]])})\n+        self.assertEqual(res[0].shape, (1, 2))\n+        self.assertEqual(res[1].shape, (1, 8))\n+        self.assertAllClose(res[0], [[ 0.95686918, 0.95686918]])\n+        self.assertAllClose(res[1], [[ 2.41515064, 2.41515064, 0.95686918, 0.95686918,\n+                                       1.38917875, 1.49043763, 0.83884692, 0.86036491]])\n+\n+  def testGrid2LSTMCellTied(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope('root', initializer=tf.constant_initializer(0.5)):\n+        x = tf.zeros([1, 3])\n+        m = tf.zeros([1, 8])\n+        cell = tf.contrib.grid_rnn.Grid2LSTMCell(2, input_size=3, tied=True, use_peepholes=True)\n+        self.assertEqual(cell.output_size, 2)\n+        self.assertEqual(cell.input_size, 3)\n+        self.assertEqual(cell.state_size, 8)\n+        g, s = cell(x, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g, s], {x.name: np.array([[1., 1., 1.]]),\n+                                m.name: np.array([[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]])})\n+        self.assertEqual(res[0].shape, (1, 2))\n+        self.assertEqual(res[1].shape, (1, 8))\n+        self.assertAllClose(res[0], [[ 0.95686918, 0.95686918]])\n+        self.assertAllClose(res[1], [[ 2.41515064, 2.41515064, 0.95686918, 0.95686918,\n+                                       1.38917875, 1.49043763, 0.83884692, 0.86036491]])\n+\n+  def testGrid2LSTMCellWithRelu(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope('root', initializer=tf.constant_initializer(0.5)):\n+        x = tf.zeros([1, 3])\n+        m = tf.zeros([1, 4])\n+        cell = tf.contrib.grid_rnn.Grid2LSTMCell(2, input_size=3, use_peepholes=True, non_recurrent_fn=tf.nn.relu)\n+        self.assertEqual(cell.output_size, 2)\n+        self.assertEqual(cell.input_size, 3)\n+        self.assertEqual(cell.state_size, 4)\n+        g, s = cell(x, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g, s], {x.name: np.array([[1., 1., 1.]]),\n+                                m.name: np.array([[0.1, 0.2, 0.3, 0.4]])})\n+        self.assertEqual(res[0].shape, (1, 2))\n+        self.assertEqual(res[1].shape, (1, 4))\n+        self.assertAllClose(res[0], [[ 2.1831727, 2.1831727]])\n+        self.assertAllClose(res[1], [[ 0.92270052, 1.02325559, 0.66159075, 0.70475441]])\n+\n+  \"\"\"\n+  RNNCell\n+  \"\"\"\n+\n+  def testGrid2BasicRNNCell(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope('root', initializer=tf.constant_initializer(0.5)):\n+        x = tf.zeros([2, 2])\n+        m = tf.zeros([2, 4])\n+        cell = tf.contrib.grid_rnn.Grid2BasicRNNCell(2)\n+        self.assertEqual(cell.output_size, 2)\n+        self.assertEqual(cell.input_size, 2)\n+        self.assertEqual(cell.state_size, 4)\n+        g, s = cell(x, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g, s], {x.name: np.array([[1., 1.], [2., 2.]]),\n+                                m.name: np.array([[0.1, 0.1, 0.1, 0.1], [0.2, 0.2, 0.2, 0.2]])})\n+        self.assertEqual(res[0].shape, (2, 2))\n+        self.assertEqual(res[1].shape, (2, 4))\n+        self.assertAllClose(res[0], [[0.94685763, 0.94685763],\n+                                     [0.99480951, 0.99480951]])\n+        self.assertAllClose(res[1], [[0.94685763, 0.94685763, 0.80049908, 0.80049908],\n+                                     [0.99480951, 0.99480951, 0.97574311, 0.97574311]])\n+\n+  def testGrid2BasicRNNCellTied(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope('root', initializer=tf.constant_initializer(0.5)):\n+        x = tf.zeros([2, 2])\n+        m = tf.zeros([2, 4])\n+        cell = tf.contrib.grid_rnn.Grid2BasicRNNCell(2, tied=True)\n+        self.assertEqual(cell.output_size, 2)\n+        self.assertEqual(cell.input_size, 2)\n+        self.assertEqual(cell.state_size, 4)\n+        g, s = cell(x, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g, s], {x.name: np.array([[1., 1.], [2., 2.]]),\n+                                m.name: np.array([[0.1, 0.1, 0.1, 0.1], [0.2, 0.2, 0.2, 0.2]])})\n+        self.assertEqual(res[0].shape, (2, 2))\n+        self.assertEqual(res[1].shape, (2, 4))\n+        self.assertAllClose(res[0], [[0.94685763, 0.94685763],\n+                                     [0.99480951, 0.99480951]])\n+        self.assertAllClose(res[1], [[0.94685763, 0.94685763, 0.80049908, 0.80049908],\n+                                     [0.99480951, 0.99480951, 0.97574311, 0.97574311]])\n+\n+  def testGrid2BasicRNNCellWithRelu(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope('root', initializer=tf.constant_initializer(0.5)):\n+        x = tf.zeros([1, 2])\n+        m = tf.zeros([1, 2])\n+        cell = tf.contrib.grid_rnn.Grid2BasicRNNCell(2, non_recurrent_fn=tf.nn.relu)\n+        self.assertEqual(cell.output_size, 2)\n+        self.assertEqual(cell.input_size, 2)\n+        self.assertEqual(cell.state_size, 2)\n+        g, s = cell(x, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g, s], {x.name: np.array([[1., 1.]]), m.name: np.array([[0.1, 0.1]])})\n+        self.assertEqual(res[0].shape, (1, 2))\n+        self.assertEqual(res[1].shape, (1, 2))\n+        self.assertAllClose(res[0], [[1.80049896, 1.80049896]])\n+        self.assertAllClose(res[1], [[0.80049896, 0.80049896]])\n+\n+  \"\"\"\n+  1-LSTM\n+  \"\"\"\n+\n+  def testGrid1LSTMCell(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope('root', initializer=tf.constant_initializer(0.5)) as root_scope:\n+        x = tf.zeros([1, 3])\n+        m = tf.zeros([1, 4])\n+        cell = tf.contrib.grid_rnn.Grid1LSTMCell(2, input_size=3, use_peepholes=True)\n+        self.assertEqual(cell.output_size, 2)\n+        self.assertEqual(cell.input_size, 3)\n+        self.assertEqual(cell.state_size, 4)\n+        g, s = cell(x, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g, s], {x.name: np.array([[1., 1., 1.]]),\n+                                m.name: np.array([[0.1, 0.2, 0.3, 0.4]])})\n+        self.assertEqual(res[0].shape, (1, 2))\n+        self.assertEqual(res[1].shape, (1, 4))\n+        self.assertAllClose(res[0], [[0.91287315, 0.91287315]])\n+        self.assertAllClose(res[1], [[2.26285243, 2.26285243, 0.91287315, 0.91287315]])\n+\n+        root_scope.reuse_variables()\n+\n+        # for 1LSTM, next iterations we will set input is None\n+        g2, s2 = cell(None, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g2, s2], {m.name: res[1]})\n+        self.assertEqual(res[0].shape, (1, 2))\n+        self.assertEqual(res[1].shape, (1, 4))\n+        self.assertAllClose(res[0], [[0.9032144, 0.9032144]])\n+        self.assertAllClose(res[1], [[2.79966092, 2.79966092, 0.9032144, 0.9032144]])\n+\n+        g3, s3 = cell(None, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g3, s3], {m.name: res[1]})\n+        self.assertEqual(res[0].shape, (1, 2))\n+        self.assertEqual(res[1].shape, (1, 4))\n+        self.assertAllClose(res[0], [[0.92727238, 0.92727238]])\n+        self.assertAllClose(res[1], [[3.3529923, 3.3529923, 0.92727238, 0.92727238]])\n+\n+  \"\"\"\n+  3-LSTM\n+  \"\"\"\n+  def testGrid3LSTMCell(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope('root', initializer=tf.constant_initializer(0.5)):\n+        x = tf.zeros([1, 3])\n+        m = tf.zeros([1, 12])\n+        cell = tf.contrib.grid_rnn.Grid3LSTMCell(2, input_size=3, use_peepholes=True)\n+        self.assertEqual(cell.output_size, 2)\n+        self.assertEqual(cell.input_size, 3)\n+        self.assertEqual(cell.state_size, 12)\n+\n+        g, s = cell(x, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g, s], {x.name: np.array([[1., 1., 1.]]),\n+                                m.name: np.array([[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, -0.1, -0.2, -0.3, -0.4]])})\n+        self.assertEqual(res[0].shape, (1, 2))\n+        self.assertEqual(res[1].shape, (1, 12))\n+\n+        self.assertAllClose(res[0], [[0.96892911, 0.96892911]])\n+        self.assertAllClose(res[1], [[2.45227885, 2.45227885, 0.96892911, 0.96892911,\n+                                      1.33592629, 1.4373529, 0.80867189, 0.83247656,\n+                                      0.7317788, 0.63205892, 0.56548983, 0.50446129]])\n+\n+  \"\"\"\n+  Edge cases\n+  \"\"\"\n+  def testGridRNNEdgeCasesLikeRelu(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope('root', initializer=tf.constant_initializer(0.5)):\n+        x = tf.zeros([3, 2])\n+        m = tf.zeros([0, 0])\n+\n+        # this is equivalent to relu\n+        cell = tf.contrib.grid_rnn.GridRNNCell(num_units=2, num_dims=1, input_dims=0, output_dims=0,\n+                                               non_recurrent_dims=0, non_recurrent_fn=tf.nn.relu)\n+        g, s = cell(x, m)\n+        sess.run([tf.initialize_all_variables()])\n+        res = sess.run([g, s], {x.name: np.array([[1., -1.], [-2, 1], [2, -1]])})\n+        self.assertEqual(res[0].shape, (3, 2))\n+        self.assertEqual(res[1].shape, (0, 0))\n+        self.assertAllClose(res[0], [[0, 0], [0, 0], [0.5, 0.5]])\n+\n+  def testGridRNNEdgeCasesNoOutput(self):\n+    with self.test_session() as sess:\n+      with tf.variable_scope('root', initializer=tf.constant_initializer(0.5)):\n+        x =  tf.zeros([1, 2])\n+        m = tf.zeros([1, 4])\n+\n+        # This cell produces no output\n+        cell = tf.contrib.grid_rnn.GridRNNCell(num_units=2, num_dims=2, input_dims=0, output_dims=None,\n+                                               non_recurrent_dims=0, non_recurrent_fn=tf.nn.relu)", "path": "tensorflow/contrib/grid_rnn/python/kernel_tests/grid_rnn_test.py", "position": 348, "original_position": 315, "commit_id": "c80a374fca39e117ce87932f2cf7b8cf20574b1f", "original_commit_id": "5bf8826dbe57e942d7e4966c28c01d2d4429b97b", "user": {"login": "ebrevdo", "id": 1794715, "node_id": "MDQ6VXNlcjE3OTQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1794715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebrevdo", "html_url": "https://github.com/ebrevdo", "followers_url": "https://api.github.com/users/ebrevdo/followers", "following_url": "https://api.github.com/users/ebrevdo/following{/other_user}", "gists_url": "https://api.github.com/users/ebrevdo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebrevdo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebrevdo/subscriptions", "organizations_url": "https://api.github.com/users/ebrevdo/orgs", "repos_url": "https://api.github.com/users/ebrevdo/repos", "events_url": "https://api.github.com/users/ebrevdo/events{/privacy}", "received_events_url": "https://api.github.com/users/ebrevdo/received_events", "type": "User", "site_admin": false}, "body": "as elsewhere, remove input_dims and output_dims\n", "created_at": "2016-03-30T23:09:57Z", "updated_at": "2016-04-06T18:32:22Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/1665#discussion_r57979112", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1665", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/57979112"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/1665#discussion_r57979112"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/1665"}}, "body_html": "<p>as elsewhere, remove input_dims and output_dims</p>", "body_text": "as elsewhere, remove input_dims and output_dims"}