{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/417489350", "html_url": "https://github.com/tensorflow/tensorflow/issues/21629#issuecomment-417489350", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21629", "id": 417489350, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQ4OTM1MA==", "user": {"login": "mattkindy-praetorian", "id": 35696388, "node_id": "MDQ6VXNlcjM1Njk2Mzg4", "avatar_url": "https://avatars0.githubusercontent.com/u/35696388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkindy-praetorian", "html_url": "https://github.com/mattkindy-praetorian", "followers_url": "https://api.github.com/users/mattkindy-praetorian/followers", "following_url": "https://api.github.com/users/mattkindy-praetorian/following{/other_user}", "gists_url": "https://api.github.com/users/mattkindy-praetorian/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkindy-praetorian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkindy-praetorian/subscriptions", "organizations_url": "https://api.github.com/users/mattkindy-praetorian/orgs", "repos_url": "https://api.github.com/users/mattkindy-praetorian/repos", "events_url": "https://api.github.com/users/mattkindy-praetorian/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkindy-praetorian/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-30T22:35:33Z", "updated_at": "2018-08-30T22:35:33Z", "author_association": "NONE", "body_html": "<p>I've run into the same issue. As suggested by <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=192142\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/mrry\">@mrry</a> , I was able to resolve this by using device filters.</p>\n<p>For example,</p>\n<pre><code>def _get_session_config_from_env_var():\n  \"\"\"Returns a tf.ConfigProto instance that has appropriate device_filters set.\n  \"\"\"\n\n  tf_config = json.loads(os.environ.get('TF_CONFIG', '{}'))\n\n  if (tf_config and 'task' in tf_config and 'type' in tf_config['task'] and\n      'index' in tf_config['task']):\n    # Master should only communicate with itself and ps\n    if tf_config['task']['type'] == 'master':\n      return tf.ConfigProto(device_filters=['/job:ps', '/job:master'])\n    # Worker should only communicate with itself and ps\n    elif tf_config['task']['type'] == 'worker':\n      return tf.ConfigProto(device_filters=[\n          '/job:ps',\n          '/job:worker/task:%d' % tf_config['task']['index']\n      ])\n  return None\n</code></pre>\n<p>(originally from <a href=\"https://github.com/GoogleCloudPlatform/cloudml-samples/blob/master/census/estimator/trainer/task.py\">https://github.com/GoogleCloudPlatform/cloudml-samples/blob/master/census/estimator/trainer/task.py</a>)</p>\n<p>Outside of an estimator, you can use a <code>MonitoredTrainingSession</code>:</p>\n<pre><code>session = tf.train.MonitoredTrainingSession(config=_get_session_config_from_env_var(), ...)\n</code></pre>\n<p>With an estimator, instead, this just involves using</p>\n<pre><code>config = tf.estimator.RunConfig(session_config=_get_session_config_from_env_var())\n</code></pre>", "body_text": "I've run into the same issue. As suggested by @mrry , I was able to resolve this by using device filters.\nFor example,\ndef _get_session_config_from_env_var():\n  \"\"\"Returns a tf.ConfigProto instance that has appropriate device_filters set.\n  \"\"\"\n\n  tf_config = json.loads(os.environ.get('TF_CONFIG', '{}'))\n\n  if (tf_config and 'task' in tf_config and 'type' in tf_config['task'] and\n      'index' in tf_config['task']):\n    # Master should only communicate with itself and ps\n    if tf_config['task']['type'] == 'master':\n      return tf.ConfigProto(device_filters=['/job:ps', '/job:master'])\n    # Worker should only communicate with itself and ps\n    elif tf_config['task']['type'] == 'worker':\n      return tf.ConfigProto(device_filters=[\n          '/job:ps',\n          '/job:worker/task:%d' % tf_config['task']['index']\n      ])\n  return None\n\n(originally from https://github.com/GoogleCloudPlatform/cloudml-samples/blob/master/census/estimator/trainer/task.py)\nOutside of an estimator, you can use a MonitoredTrainingSession:\nsession = tf.train.MonitoredTrainingSession(config=_get_session_config_from_env_var(), ...)\n\nWith an estimator, instead, this just involves using\nconfig = tf.estimator.RunConfig(session_config=_get_session_config_from_env_var())", "body": "I've run into the same issue. As suggested by @mrry , I was able to resolve this by using device filters.\r\n\r\nFor example,\r\n```\r\ndef _get_session_config_from_env_var():\r\n  \"\"\"Returns a tf.ConfigProto instance that has appropriate device_filters set.\r\n  \"\"\"\r\n\r\n  tf_config = json.loads(os.environ.get('TF_CONFIG', '{}'))\r\n\r\n  if (tf_config and 'task' in tf_config and 'type' in tf_config['task'] and\r\n      'index' in tf_config['task']):\r\n    # Master should only communicate with itself and ps\r\n    if tf_config['task']['type'] == 'master':\r\n      return tf.ConfigProto(device_filters=['/job:ps', '/job:master'])\r\n    # Worker should only communicate with itself and ps\r\n    elif tf_config['task']['type'] == 'worker':\r\n      return tf.ConfigProto(device_filters=[\r\n          '/job:ps',\r\n          '/job:worker/task:%d' % tf_config['task']['index']\r\n      ])\r\n  return None\r\n```\r\n(originally from https://github.com/GoogleCloudPlatform/cloudml-samples/blob/master/census/estimator/trainer/task.py)\r\n\r\nOutside of an estimator, you can use a `MonitoredTrainingSession`:\r\n```\r\nsession = tf.train.MonitoredTrainingSession(config=_get_session_config_from_env_var(), ...)\r\n``` \r\n\r\nWith an estimator, instead, this just involves using\r\n```\r\nconfig = tf.estimator.RunConfig(session_config=_get_session_config_from_env_var())\r\n```"}