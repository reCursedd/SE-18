{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/414456110", "html_url": "https://github.com/tensorflow/tensorflow/issues/21629#issuecomment-414456110", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21629", "id": 414456110, "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDQ1NjExMA==", "user": {"login": "mrry", "id": 192142, "node_id": "MDQ6VXNlcjE5MjE0Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/192142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrry", "html_url": "https://github.com/mrry", "followers_url": "https://api.github.com/users/mrry/followers", "following_url": "https://api.github.com/users/mrry/following{/other_user}", "gists_url": "https://api.github.com/users/mrry/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrry/subscriptions", "organizations_url": "https://api.github.com/users/mrry/orgs", "repos_url": "https://api.github.com/users/mrry/repos", "events_url": "https://api.github.com/users/mrry/events{/privacy}", "received_events_url": "https://api.github.com/users/mrry/received_events", "type": "User", "site_admin": false}, "created_at": "2018-08-20T20:42:11Z", "updated_at": "2018-08-20T20:42:11Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I can see two possibilities here:</p>\n<ul>\n<li>If one task depends on another then you need some mechanism to ensure that all tasks eventually come up at the same time, and retry in the event of failure. A cluster manager like Kubernetes or Slurm would be helpful here.</li>\n<li>If a task can run independently, then try setting <code>ConfigProto.device_filters</code> to contain only the device name prefixes for the devices it needs (e.g. the filters for the master task could be <code>[\"/job:master\", \"/job:ps\"]</code> if the master task does not need to use the worker tasks).</li>\n</ul>", "body_text": "I can see two possibilities here:\n\nIf one task depends on another then you need some mechanism to ensure that all tasks eventually come up at the same time, and retry in the event of failure. A cluster manager like Kubernetes or Slurm would be helpful here.\nIf a task can run independently, then try setting ConfigProto.device_filters to contain only the device name prefixes for the devices it needs (e.g. the filters for the master task could be [\"/job:master\", \"/job:ps\"] if the master task does not need to use the worker tasks).", "body": "I can see two possibilities here:\r\n* If one task depends on another then you need some mechanism to ensure that all tasks eventually come up at the same time, and retry in the event of failure. A cluster manager like Kubernetes or Slurm would be helpful here.\r\n* If a task can run independently, then try setting `ConfigProto.device_filters` to contain only the device name prefixes for the devices it needs (e.g. the filters for the master task could be `[\"/job:master\", \"/job:ps\"]` if the master task does not need to use the worker tasks)."}