{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/259295822", "html_url": "https://github.com/tensorflow/tensorflow/issues/5284#issuecomment-259295822", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5284", "id": 259295822, "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTI5NTgyMg==", "user": {"login": "finbarrtimbers", "id": 3202885, "node_id": "MDQ6VXNlcjMyMDI4ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3202885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finbarrtimbers", "html_url": "https://github.com/finbarrtimbers", "followers_url": "https://api.github.com/users/finbarrtimbers/followers", "following_url": "https://api.github.com/users/finbarrtimbers/following{/other_user}", "gists_url": "https://api.github.com/users/finbarrtimbers/gists{/gist_id}", "starred_url": "https://api.github.com/users/finbarrtimbers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finbarrtimbers/subscriptions", "organizations_url": "https://api.github.com/users/finbarrtimbers/orgs", "repos_url": "https://api.github.com/users/finbarrtimbers/repos", "events_url": "https://api.github.com/users/finbarrtimbers/events{/privacy}", "received_events_url": "https://api.github.com/users/finbarrtimbers/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-08T23:46:51Z", "updated_at": "2016-11-08T23:46:51Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Has this been fixed? I tried to replicate and was not able to.</p>\n<p>Specifically, I created a script with the following code, and it ran without any errors.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> absolute_import\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> division\n<span class=\"pl-k\">from</span> <span class=\"pl-c1\">__future__</span> <span class=\"pl-k\">import</span> print_function\n\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Data sets</span>\n<span class=\"pl-c1\">IRIS_TRAINING</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>iris_training.csv<span class=\"pl-pds\">\"</span></span>\n<span class=\"pl-c1\">IRIS_TEST</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>iris_test.csv<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Load datasets.</span>\ntraining_set <span class=\"pl-k\">=</span> tf.contrib.learn.datasets.base.load_csv_with_header(<span class=\"pl-v\">filename</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">IRIS_TRAINING</span>,\n                                                       <span class=\"pl-v\">target_dtype</span><span class=\"pl-k\">=</span>np.int, <span class=\"pl-v\">features_dtype</span><span class=\"pl-k\">=</span>np.float)\ntest_set <span class=\"pl-k\">=</span> tf.contrib.learn.datasets.base.load_csv_with_header(<span class=\"pl-v\">filename</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">IRIS_TEST</span>,\n                                                   <span class=\"pl-v\">target_dtype</span><span class=\"pl-k\">=</span>np.int, <span class=\"pl-v\">features_dtype</span><span class=\"pl-k\">=</span>np.float)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Specify that all features have real-value data</span>\nfeature_columns <span class=\"pl-k\">=</span> [tf.contrib.layers.real_valued_column(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">dimension</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">4</span>)]\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Build 3 layer DNN with 10, 20, 10 units respectively.</span>\nclassifier <span class=\"pl-k\">=</span> tf.contrib.learn.DNNClassifier(<span class=\"pl-v\">feature_columns</span><span class=\"pl-k\">=</span>feature_columns,\n                                            <span class=\"pl-v\">hidden_units</span><span class=\"pl-k\">=</span>[<span class=\"pl-c1\">10</span>, <span class=\"pl-c1\">20</span>, <span class=\"pl-c1\">10</span>],\n                                            <span class=\"pl-v\">n_classes</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">3</span>,\n                                            <span class=\"pl-v\">model_dir</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/tmp/iris_model<span class=\"pl-pds\">\"</span></span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Fit model.</span>\nclassifier.fit(<span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>training_set.data,\n               <span class=\"pl-v\">y</span><span class=\"pl-k\">=</span>training_set.target,\n               <span class=\"pl-v\">steps</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">2000</span>)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Evaluate accuracy.</span>\naccuracy_score <span class=\"pl-k\">=</span> classifier.evaluate(<span class=\"pl-v\">x</span><span class=\"pl-k\">=</span>test_set.data,\n                                     <span class=\"pl-v\">y</span><span class=\"pl-k\">=</span>test_set.target)[<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>accuracy<span class=\"pl-pds\">\"</span></span>]\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Accuracy: <span class=\"pl-c1\">{0<span class=\"pl-k\">:f</span>}</span><span class=\"pl-pds\">'</span></span>.format(accuracy_score))\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Classify two new flower samples.</span>\nnew_samples <span class=\"pl-k\">=</span> np.array(\n    [[<span class=\"pl-c1\">6.4</span>, <span class=\"pl-c1\">3.2</span>, <span class=\"pl-c1\">4.5</span>, <span class=\"pl-c1\">1.5</span>], [<span class=\"pl-c1\">5.8</span>, <span class=\"pl-c1\">3.1</span>, <span class=\"pl-c1\">5.0</span>, <span class=\"pl-c1\">1.7</span>]], <span class=\"pl-v\">dtype</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">float</span>)\ny <span class=\"pl-k\">=</span> classifier.predict(new_samples)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Predictions: <span class=\"pl-c1\">{}</span><span class=\"pl-pds\">'</span></span>.format(<span class=\"pl-c1\">str</span>(y)))</pre></div>", "body_text": "Has this been fixed? I tried to replicate and was not able to.\nSpecifically, I created a script with the following code, and it ran without any errors.\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\nimport numpy as np\n\n# Data sets\nIRIS_TRAINING = \"iris_training.csv\"\nIRIS_TEST = \"iris_test.csv\"\n\n# Load datasets.\ntraining_set = tf.contrib.learn.datasets.base.load_csv_with_header(filename=IRIS_TRAINING,\n                                                       target_dtype=np.int, features_dtype=np.float)\ntest_set = tf.contrib.learn.datasets.base.load_csv_with_header(filename=IRIS_TEST,\n                                                   target_dtype=np.int, features_dtype=np.float)\n\n# Specify that all features have real-value data\nfeature_columns = [tf.contrib.layers.real_valued_column(\"\", dimension=4)]\n\n# Build 3 layer DNN with 10, 20, 10 units respectively.\nclassifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10, 20, 10],\n                                            n_classes=3,\n                                            model_dir=\"/tmp/iris_model\")\n\n# Fit model.\nclassifier.fit(x=training_set.data,\n               y=training_set.target,\n               steps=2000)\n\n# Evaluate accuracy.\naccuracy_score = classifier.evaluate(x=test_set.data,\n                                     y=test_set.target)[\"accuracy\"]\nprint('Accuracy: {0:f}'.format(accuracy_score))\n\n# Classify two new flower samples.\nnew_samples = np.array(\n    [[6.4, 3.2, 4.5, 1.5], [5.8, 3.1, 5.0, 1.7]], dtype=float)\ny = classifier.predict(new_samples)\nprint('Predictions: {}'.format(str(y)))", "body": "Has this been fixed? I tried to replicate and was not able to. \n\nSpecifically, I created a script with the following code, and it ran without any errors.\n\n``` python\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\nimport numpy as np\n\n# Data sets\nIRIS_TRAINING = \"iris_training.csv\"\nIRIS_TEST = \"iris_test.csv\"\n\n# Load datasets.\ntraining_set = tf.contrib.learn.datasets.base.load_csv_with_header(filename=IRIS_TRAINING,\n                                                       target_dtype=np.int, features_dtype=np.float)\ntest_set = tf.contrib.learn.datasets.base.load_csv_with_header(filename=IRIS_TEST,\n                                                   target_dtype=np.int, features_dtype=np.float)\n\n# Specify that all features have real-value data\nfeature_columns = [tf.contrib.layers.real_valued_column(\"\", dimension=4)]\n\n# Build 3 layer DNN with 10, 20, 10 units respectively.\nclassifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\n                                            hidden_units=[10, 20, 10],\n                                            n_classes=3,\n                                            model_dir=\"/tmp/iris_model\")\n\n# Fit model.\nclassifier.fit(x=training_set.data,\n               y=training_set.target,\n               steps=2000)\n\n# Evaluate accuracy.\naccuracy_score = classifier.evaluate(x=test_set.data,\n                                     y=test_set.target)[\"accuracy\"]\nprint('Accuracy: {0:f}'.format(accuracy_score))\n\n# Classify two new flower samples.\nnew_samples = np.array(\n    [[6.4, 3.2, 4.5, 1.5], [5.8, 3.1, 5.0, 1.7]], dtype=float)\ny = classifier.predict(new_samples)\nprint('Predictions: {}'.format(str(y)))\n```\n"}