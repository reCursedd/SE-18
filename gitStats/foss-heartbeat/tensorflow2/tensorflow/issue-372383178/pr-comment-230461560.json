{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/230461560", "pull_request_review_id": 170498126, "id": 230461560, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMDQ2MTU2MA==", "diff_hunk": "@@ -2391,6 +2638,161 @@ MklLayoutRewritePass::CheckForNodeRewrite(const Node* n) const {\n   return nullptr;\n }\n \n+//////////////////////////////////////////////////////////////////////////\n+//           Helper functions for node fusion\n+//////////////////////////////////////////////////////////////////////////\n+Status MklLayoutRewritePass::FuseTransposeMklOpTranspose(\n+    std::unique_ptr<Graph>* g, std::vector<Node*>& nodes,\n+    std::function<void(const Node*, NodeBuilder* nb, bool)> copy_attrs,\n+    string data_format) {\n+  Node* transpose_to_nhwc = nodes[0];\n+  Node* mklop = nodes[1];\n+  Node* transpose_to_nchw = nodes[2];\n+\n+  const int transpose_nhwc_num_inputs = transpose_to_nhwc->num_inputs();\n+  gtl::InlinedVector<Node*, 4> transpose_nhwc_control_edges;\n+  gtl::InlinedVector<std::pair<Node*, int>, 4> transpose_nhwc_in(\n+      transpose_nhwc_num_inputs);\n+  FillInputs(transpose_to_nhwc, &transpose_nhwc_control_edges,\n+             &transpose_nhwc_in);\n+\n+  const int mklop_num_inputs = mklop->num_inputs();\n+  gtl::InlinedVector<Node*, 4> mklop_control_edges;\n+  gtl::InlinedVector<std::pair<Node*, int>, 4> mklop_in(mklop_num_inputs);\n+  FillInputs(mklop, &mklop_control_edges, &mklop_in);\n+\n+  const int transpose_nchw_num_inputs = transpose_to_nchw->num_inputs();\n+  gtl::InlinedVector<Node*, 4> transpose_nchw_control_edges;\n+  gtl::InlinedVector<std::pair<Node*, int>, 4> transpose_nchw_in(\n+      transpose_nchw_num_inputs);\n+  FillInputs(transpose_to_nchw, &transpose_nchw_control_edges,\n+             &transpose_nchw_in);\n+\n+  // We use same name as original node, but change the op\n+  // name.\n+  NodeBuilder nb(mklop->name(), mklop->type_string());\n+\n+  for (int i = 0; i < mklop_num_inputs; i++) {\n+    if (mklop_in[i].first == transpose_to_nhwc) {\n+      // Fill \"x\":\n+      nb.Input(transpose_nhwc_in[0].first, transpose_nhwc_in[0].second);\n+    } else {\n+      // Fill inputs other than \"x\":\n+      nb.Input(mklop_in[i].first, mklop_in[i].second);\n+    }\n+  }\n+\n+  copy_attrs(const_cast<const Node*>(mklop), &nb, true);\n+  nb.Attr(\"data_format\", data_format);\n+\n+  // Copy the device assigned to old node to new node.\n+  nb.Device(mklop->def().device());\n+\n+  // Create node.\n+  Node* new_node;\n+  TF_CHECK_OK(nb.Finalize(&**g, &new_node));\n+  CHECK_NOTNULL(new_node);\n+\n+  // Fill outputs.\n+  for (const Edge* e : transpose_to_nchw->out_edges()) {\n+    if (!e->IsControlEdge()) {\n+      const int kTransposeWithMklOpOutputSlot = 0;\n+      CHECK_NOTNULL((*g)->AddEdge(new_node, kTransposeWithMklOpOutputSlot, e->dst(),\n+                                  e->dst_input()));\n+    }\n+  }\n+\n+  // Copy device assigned to old node to new node.\n+  new_node->set_assigned_device_name(mklop->assigned_device_name());\n+\n+  // Copy requested_device and assigned_device_name_index\n+  new_node->set_requested_device(mklop->requested_device());\n+  new_node->set_assigned_device_name_index(mklop->assigned_device_name_index());\n+\n+  (*g)->RemoveNode(transpose_to_nhwc);\n+  (*g)->RemoveNode(mklop);\n+  (*g)->RemoveNode(transpose_to_nchw);\n+\n+  return Status::OK();\n+}\n+\n+Status MklLayoutRewritePass::FuseNode(\n+    std::unique_ptr<Graph>* g, std::vector<Node*>& nodes,\n+    const MklLayoutRewritePass::FusionInfo fi) {\n+  return fi.fuse_func(g, nodes, fi.copy_attrs);\n+}\n+\n+std::tuple<bool, std::vector<Node*>, const MklLayoutRewritePass::FusionInfo>\n+MklLayoutRewritePass::CheckForNodeFusion(Node* a) const {\n+  const FusionInfo* fi_ptr = nullptr;\n+\n+  for (auto fi = finfo_.begin(); fi != finfo_.end(); ++fi) {\n+    fi_ptr = &*fi;\n+    //\n+    // Make sure node \"a\" and its succeding nodes (b, c ...), match the pattern\n+    // defined in fusion info (ops[0], ops[1], ...),\n+    // aka. \"a->b->c\" matches \"op1->op2->op3\"\n+    //\n+\n+    std::stack<Node *, std::vector<Node *>> work_stack;\n+    std::unordered_set<Node *> visited_nodes;", "path": "tensorflow/core/graph/mkl_layout_pass.cc", "position": null, "original_position": 612, "commit_id": "88b2369fe7c4451c63ff0599f7477897dabff2e0", "original_commit_id": "13ed0286c40c81f23a73a9cd773da4d1dd27197a", "user": {"login": "penpornk", "id": 38085909, "node_id": "MDQ6VXNlcjM4MDg1OTA5", "avatar_url": "https://avatars3.githubusercontent.com/u/38085909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/penpornk", "html_url": "https://github.com/penpornk", "followers_url": "https://api.github.com/users/penpornk/followers", "following_url": "https://api.github.com/users/penpornk/following{/other_user}", "gists_url": "https://api.github.com/users/penpornk/gists{/gist_id}", "starred_url": "https://api.github.com/users/penpornk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/penpornk/subscriptions", "organizations_url": "https://api.github.com/users/penpornk/orgs", "repos_url": "https://api.github.com/users/penpornk/repos", "events_url": "https://api.github.com/users/penpornk/events{/privacy}", "received_events_url": "https://api.github.com/users/penpornk/received_events", "type": "User", "site_admin": false}, "body": "Using a global `visited_nodes` set is not enough. We can use the same graph as last time for example: fusion pattern `A->B->C` with graph `A->C`, `A->B`, and `B->C`. `C` is visited first and marked as a `visited` node, so by the time we reach `B`, we won't go to `C` anymore. (This case seems relevant enough. Please also add a test case for this.)\r\n\r\nI also don't like that we have to iterate pass the already processed `current_node->out_edges()` every time (even though all we do with them is a quick check). Instead of a `visited_nodes` set, you can just save the current out edge for each checker index, `0 <= index < node_checkers.size()`. The next time you revisit this checker index level you can just go to the next edge. You can also get rid of the `work_stack` and store the results directly in `nodes` to avoid having to copy it at the end. For example:\r\n```c++\r\nstd::vector</*EdgeSet iterator type*/> current_neighbor(fi->node_checkers.size());\r\n// To get the candidate node inside the loop\r\ncandidate_node = current_neighbor[index];\r\n// To have the next candidate ready\r\n++current_neighbor[index];\r\n// To store the candidate node.\r\nnodes[index] = candidate_node;\r\n// To check if you're out of neighbor\r\nif (current_neighbor[index] == nodes[index-1]->out_edges().end())\r\n```\r\n", "created_at": "2018-11-02T18:07:19Z", "updated_at": "2018-11-14T06:34:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23152#discussion_r230461560", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23152", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/230461560"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23152#discussion_r230461560"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23152"}}, "body_html": "<p>Using a global <code>visited_nodes</code> set is not enough. We can use the same graph as last time for example: fusion pattern <code>A-&gt;B-&gt;C</code> with graph <code>A-&gt;C</code>, <code>A-&gt;B</code>, and <code>B-&gt;C</code>. <code>C</code> is visited first and marked as a <code>visited</code> node, so by the time we reach <code>B</code>, we won't go to <code>C</code> anymore. (This case seems relevant enough. Please also add a test case for this.)</p>\n<p>I also don't like that we have to iterate pass the already processed <code>current_node-&gt;out_edges()</code> every time (even though all we do with them is a quick check). Instead of a <code>visited_nodes</code> set, you can just save the current out edge for each checker index, <code>0 &lt;= index &lt; node_checkers.size()</code>. The next time you revisit this checker index level you can just go to the next edge. You can also get rid of the <code>work_stack</code> and store the results directly in <code>nodes</code> to avoid having to copy it at the end. For example:</p>\n<div class=\"highlight highlight-source-c++\"><pre>std::vector&lt;<span class=\"pl-c\"><span class=\"pl-c\">/*</span>EdgeSet iterator type<span class=\"pl-c\">*/</span></span>&gt; <span class=\"pl-en\">current_neighbor</span>(fi-&gt;node_checkers.size());\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> To get the candidate node inside the loop</span>\ncandidate_node = current_neighbor[index];\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> To have the next candidate ready</span>\n++current_neighbor[index];\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> To store the candidate node.</span>\nnodes[index] = candidate_node;\n<span class=\"pl-c\"><span class=\"pl-c\">//</span> To check if you're out of neighbor</span>\n<span class=\"pl-k\">if</span> (current_neighbor[index] == nodes[index-<span class=\"pl-c1\">1</span>]-&gt;<span class=\"pl-en\">out_edges</span>().end())</pre></div>", "body_text": "Using a global visited_nodes set is not enough. We can use the same graph as last time for example: fusion pattern A->B->C with graph A->C, A->B, and B->C. C is visited first and marked as a visited node, so by the time we reach B, we won't go to C anymore. (This case seems relevant enough. Please also add a test case for this.)\nI also don't like that we have to iterate pass the already processed current_node->out_edges() every time (even though all we do with them is a quick check). Instead of a visited_nodes set, you can just save the current out edge for each checker index, 0 <= index < node_checkers.size(). The next time you revisit this checker index level you can just go to the next edge. You can also get rid of the work_stack and store the results directly in nodes to avoid having to copy it at the end. For example:\nstd::vector</*EdgeSet iterator type*/> current_neighbor(fi->node_checkers.size());\n// To get the candidate node inside the loop\ncandidate_node = current_neighbor[index];\n// To have the next candidate ready\n++current_neighbor[index];\n// To store the candidate node.\nnodes[index] = candidate_node;\n// To check if you're out of neighbor\nif (current_neighbor[index] == nodes[index-1]->out_edges().end())"}