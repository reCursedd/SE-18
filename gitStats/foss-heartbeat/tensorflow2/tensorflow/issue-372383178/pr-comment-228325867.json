{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/228325867", "pull_request_review_id": 167665863, "id": 228325867, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODMyNTg2Nw==", "diff_hunk": "@@ -815,6 +885,121 @@ class MklLayoutRewritePass : public GraphOptimizationPass {\n     return n;\n   }\n \n+  // Return a node that can be fused with input node 'n'\n+  //\n+  // @return tuple. If we can find such nodes, the first\n+  // element of the tuple is a true. Otherwise, it's false.\n+  std::tuple<bool, std::vector<Node *>, const MklLayoutRewritePass::FusionInfo>\n+      CheckForNodeFusion(Node *n) const;\n+\n+  // Fuse nodes in the vector \"nodes\"\n+  Status FuseNode(std::unique_ptr<Graph> *g, std::vector<Node *> &nodes,\n+                  const MklLayoutRewritePass::FusionInfo fi);\n+\n+  static Status FuseTransposeMklOpTranspose(\n+      std::unique_ptr<Graph> *g, std::vector<Node *> &nodes,\n+      std::function<void(const Node *, NodeBuilder *nb, bool)> copy_attrs,\n+      string data_format);\n+\n+  static bool CheckForTranspose(const Node *node, std::vector<int> perm) {\n+    //\n+    // Check node node, to see if it's \"Transpose\"\n+    //\n+    if (node->type_string() != \"Transpose\")\n+      return false;\n+\n+    //\n+    // Check if has out control edge. If true, this is a training graph.\n+    // Currently we focus on inference and do no fusion in training.\n+    //\n+    for (const Edge *e : node->out_edges()) {\n+      if (e->IsControlEdge()) {\n+        return false;\n+      }\n+    }\n+\n+    //\n+    // If \"Transpose\" has input control edges, don't fuse on it.\n+    //\n+    for (const Edge *e : node->in_edges()) {\n+      if (e->IsControlEdge()) {\n+        return false;\n+      }\n+    }\n+\n+    //\n+    // If \"Transpose\" has multiple output data edges, also don't fuse it.\n+    //\n+    if (node->num_outputs() > 1 || node->out_edges().size() > 1)\n+      return false;\n+\n+    // Check \"perm\" attribute, make sure it's what we want.", "path": "tensorflow/core/graph/mkl_layout_pass.cc", "position": null, "original_position": 173, "commit_id": "88b2369fe7c4451c63ff0599f7477897dabff2e0", "original_commit_id": "4f9d57337b71fe0ab3f25696db456e6a446ef54a", "user": {"login": "penpornk", "id": 38085909, "node_id": "MDQ6VXNlcjM4MDg1OTA5", "avatar_url": "https://avatars3.githubusercontent.com/u/38085909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/penpornk", "html_url": "https://github.com/penpornk", "followers_url": "https://api.github.com/users/penpornk/followers", "following_url": "https://api.github.com/users/penpornk/following{/other_user}", "gists_url": "https://api.github.com/users/penpornk/gists{/gist_id}", "starred_url": "https://api.github.com/users/penpornk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/penpornk/subscriptions", "organizations_url": "https://api.github.com/users/penpornk/orgs", "repos_url": "https://api.github.com/users/penpornk/repos", "events_url": "https://api.github.com/users/penpornk/events{/privacy}", "received_events_url": "https://api.github.com/users/penpornk/received_events", "type": "User", "site_admin": false}, "body": "Please explain the high level idea that we look for the tensor containing the permutation order (`perm_node`) and compare with our desired order (`perm`). ", "created_at": "2018-10-25T20:37:26Z", "updated_at": "2018-11-14T06:34:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23152#discussion_r228325867", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23152", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/228325867"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23152#discussion_r228325867"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23152"}}, "body_html": "<p>Please explain the high level idea that we look for the tensor containing the permutation order (<code>perm_node</code>) and compare with our desired order (<code>perm</code>).</p>", "body_text": "Please explain the high level idea that we look for the tensor containing the permutation order (perm_node) and compare with our desired order (perm)."}