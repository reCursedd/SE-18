{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/228587977", "pull_request_review_id": 168900834, "id": 228587977, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODU4Nzk3Nw==", "diff_hunk": "@@ -2391,6 +2646,150 @@ MklLayoutRewritePass::CheckForNodeRewrite(const Node* n) const {\n   return nullptr;\n }\n \n+//////////////////////////////////////////////////////////////////////////\n+//           Helper functions for node fusion\n+//////////////////////////////////////////////////////////////////////////\n+Status MklLayoutRewritePass::FuseTransposeMklOpTranspose(\n+    std::unique_ptr<Graph>* g, std::vector<Node*>& nodes,\n+    std::function<void(const Node*, NodeBuilder* nb, bool)> copy_attrs,\n+    string data_format) {\n+  Node* transpose_to_nhwc = nodes[0];\n+  Node* mklop = nodes[1];\n+  Node* transpose_to_nchw = nodes[2];\n+\n+  const int transpose_nhwc_num_inputs = transpose_to_nhwc->num_inputs();\n+  gtl::InlinedVector<Node*, 4> transpose_nhwc_control_edges;\n+  gtl::InlinedVector<std::pair<Node*, int>, 4> transpose_nhwc_in(\n+      transpose_nhwc_num_inputs);\n+  FillInputs(transpose_to_nhwc, &transpose_nhwc_control_edges,\n+             &transpose_nhwc_in);\n+\n+  const int mklop_num_inputs = mklop->num_inputs();\n+  gtl::InlinedVector<Node*, 4> mklop_control_edges;\n+  gtl::InlinedVector<std::pair<Node*, int>, 4> mklop_in(mklop_num_inputs);\n+  FillInputs(mklop, &mklop_control_edges, &mklop_in);\n+\n+  const int transpose_nchw_num_inputs = transpose_to_nchw->num_inputs();\n+  gtl::InlinedVector<Node*, 4> transpose_nchw_control_edges;\n+  gtl::InlinedVector<std::pair<Node*, int>, 4> transpose_nchw_in(\n+      transpose_nchw_num_inputs);\n+  FillInputs(transpose_to_nhwc, &transpose_nchw_control_edges,\n+             &transpose_nchw_in);\n+\n+  // We will use the node name of Conv2d as the name of new node\n+  // Build new node. We use same name as original node, but change the op\n+  // name.\n+  NodeBuilder nb(mklop->name(), mklop->type_string());\n+\n+  for (int i = 0; i < mklop_num_inputs; i++) {\n+    if (mklop_in[i].first == transpose_to_nhwc) {\n+      // Fill \"x\":\n+      nb.Input(transpose_nhwc_in[0].first, transpose_nhwc_in[0].second);\n+    } else {\n+      // Fill inputs other than \"x\":\n+      nb.Input(mklop_in[i].first, mklop_in[i].second);\n+    }\n+  }\n+\n+  copy_attrs(const_cast<const Node*>(mklop), &nb, true);\n+  nb.Attr(\"data_format\", data_format);\n+\n+  // Copy the device assigned to old node to new node.\n+  nb.Device(mklop->def().device());\n+\n+  // Create node.\n+  Node* new_node;\n+  TF_CHECK_OK(nb.Finalize(&**g, &new_node));\n+  CHECK_NOTNULL(new_node);\n+\n+  // Fill outputs.\n+  for (const Edge* e : transpose_to_nchw->out_edges()) {\n+    if (!e->IsControlEdge()) {\n+      const int kConv2DWithBiasOutputSlot = 0;\n+      CHECK_NOTNULL((*g)->AddEdge(new_node, kConv2DWithBiasOutputSlot, e->dst(),\n+                                  e->dst_input()));\n+    }\n+  }\n+\n+  // Copy device assigned to old node to new node.\n+  new_node->set_assigned_device_name(mklop->assigned_device_name());\n+\n+  (*g)->RemoveNode(transpose_to_nhwc);\n+  (*g)->RemoveNode(mklop);\n+  (*g)->RemoveNode(transpose_to_nchw);\n+\n+  return Status::OK();\n+}\n+\n+Status MklLayoutRewritePass::FuseNode(\n+    std::unique_ptr<Graph>* g, std::vector<Node*>& nodes,\n+    const MklLayoutRewritePass::FusionInfo fi) {\n+  return fi.fuse_func(g, nodes, fi.copy_attrs);\n+}\n+\n+std::tuple<bool, std::vector<Node*>, const MklLayoutRewritePass::FusionInfo>\n+MklLayoutRewritePass::CheckForNodeFusion(Node* a) const {\n+  bool found_pattern = false;\n+  std::vector<Node*> nodes;\n+  const FusionInfo* fi_ptr = nullptr;\n+\n+  for (auto fi = finfo_.begin(); fi != finfo_.end(); ++fi) {\n+    assert(fi->ops.size() == fi->node_checkers.size());\n+    nodes.clear();\n+    fi_ptr = &*fi;\n+    //\n+    // Make sure node \"a\" and its succeding nodes (b, c ...), match the pattern\n+    // defined in fusion info (ops[0], ops[1], ...),\n+    // aka. \"a->b->c\" matches \"op1->op2->op3\"\n+    //\n+\n+    // Initialize \"current_node\" as node \"a\".\n+    Node* current_node = a;\n+    for (auto node_index = 0; node_index < fi->node_checkers.size();\n+         ++node_index) {\n+      // Make sure current node meet the requirement of corresponding node\n+      // checker.\n+      auto check_node = fi->node_checkers[node_index];\n+      if (current_node == nullptr ||\n+          (check_node && check_node(current_node) == false)) {\n+        found_pattern = false;\n+        nodes.clear();\n+        break;\n+      }\n+\n+      // Add current_node to \"fusion_nodes\":\n+      nodes.push_back(current_node);\n+\n+      // If current node is not the last node we want to check, check next node.\n+      if (node_index != fi->node_checkers.size() - 1) {\n+        // Find current node's direct descendant, which will be used in next\n+        // iteration.\n+        auto check_next_node = fi->node_checkers[node_index + 1];\n+        for (const Edge* e : current_node->out_edges()) {\n+          if (!e->IsControlEdge()) {\n+            Node* candidate_node = e->dst();\n+\n+            if (check_next_node(candidate_node) == false) {\n+              current_node = nullptr;\n+            } else {\n+              current_node = candidate_node;", "path": "tensorflow/core/graph/mkl_layout_pass.cc", "position": null, "original_position": 649, "commit_id": "88b2369fe7c4451c63ff0599f7477897dabff2e0", "original_commit_id": "8d068a857dfbeb5cd417eb342a6ba7c330e0a270", "user": {"login": "wenxizhu", "id": 33611326, "node_id": "MDQ6VXNlcjMzNjExMzI2", "avatar_url": "https://avatars1.githubusercontent.com/u/33611326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wenxizhu", "html_url": "https://github.com/wenxizhu", "followers_url": "https://api.github.com/users/wenxizhu/followers", "following_url": "https://api.github.com/users/wenxizhu/following{/other_user}", "gists_url": "https://api.github.com/users/wenxizhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/wenxizhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wenxizhu/subscriptions", "organizations_url": "https://api.github.com/users/wenxizhu/orgs", "repos_url": "https://api.github.com/users/wenxizhu/repos", "events_url": "https://api.github.com/users/wenxizhu/events{/privacy}", "received_events_url": "https://api.github.com/users/wenxizhu/received_events", "type": "User", "site_admin": false}, "body": "@penpornk correct. This is a quick implementation which can full-fill the requirements for this transpose pattern. And I agree we should generalize the algorithm to handle all situations.\r\n\r\nI just commit a stack-based algorithm to replace this greedy matching one, which is expected to perfectly handle the problem. Please have a look if you have time.", "created_at": "2018-10-26T16:23:06Z", "updated_at": "2018-11-14T06:34:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23152#discussion_r228587977", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23152", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/228587977"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23152#discussion_r228587977"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23152"}}, "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=38085909\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/penpornk\">@penpornk</a> correct. This is a quick implementation which can full-fill the requirements for this transpose pattern. And I agree we should generalize the algorithm to handle all situations.</p>\n<p>I just commit a stack-based algorithm to replace this greedy matching one, which is expected to perfectly handle the problem. Please have a look if you have time.</p>", "body_text": "@penpornk correct. This is a quick implementation which can full-fill the requirements for this transpose pattern. And I agree we should generalize the algorithm to handle all situations.\nI just commit a stack-based algorithm to replace this greedy matching one, which is expected to perfectly handle the problem. Please have a look if you have time.", "in_reply_to_id": 228393963}