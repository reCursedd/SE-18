{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/228395139", "pull_request_review_id": 167665863, "id": 228395139, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODM5NTEzOQ==", "diff_hunk": "@@ -2391,6 +2646,150 @@ MklLayoutRewritePass::CheckForNodeRewrite(const Node* n) const {\n   return nullptr;\n }\n \n+//////////////////////////////////////////////////////////////////////////\n+//           Helper functions for node fusion\n+//////////////////////////////////////////////////////////////////////////\n+Status MklLayoutRewritePass::FuseTransposeMklOpTranspose(\n+    std::unique_ptr<Graph>* g, std::vector<Node*>& nodes,\n+    std::function<void(const Node*, NodeBuilder* nb, bool)> copy_attrs,\n+    string data_format) {\n+  Node* transpose_to_nhwc = nodes[0];\n+  Node* mklop = nodes[1];\n+  Node* transpose_to_nchw = nodes[2];\n+\n+  const int transpose_nhwc_num_inputs = transpose_to_nhwc->num_inputs();\n+  gtl::InlinedVector<Node*, 4> transpose_nhwc_control_edges;\n+  gtl::InlinedVector<std::pair<Node*, int>, 4> transpose_nhwc_in(\n+      transpose_nhwc_num_inputs);\n+  FillInputs(transpose_to_nhwc, &transpose_nhwc_control_edges,\n+             &transpose_nhwc_in);\n+\n+  const int mklop_num_inputs = mklop->num_inputs();\n+  gtl::InlinedVector<Node*, 4> mklop_control_edges;\n+  gtl::InlinedVector<std::pair<Node*, int>, 4> mklop_in(mklop_num_inputs);\n+  FillInputs(mklop, &mklop_control_edges, &mklop_in);\n+\n+  const int transpose_nchw_num_inputs = transpose_to_nchw->num_inputs();\n+  gtl::InlinedVector<Node*, 4> transpose_nchw_control_edges;\n+  gtl::InlinedVector<std::pair<Node*, int>, 4> transpose_nchw_in(\n+      transpose_nchw_num_inputs);\n+  FillInputs(transpose_to_nhwc, &transpose_nchw_control_edges,\n+             &transpose_nchw_in);\n+\n+  // We will use the node name of Conv2d as the name of new node\n+  // Build new node. We use same name as original node, but change the op\n+  // name.\n+  NodeBuilder nb(mklop->name(), mklop->type_string());\n+\n+  for (int i = 0; i < mklop_num_inputs; i++) {\n+    if (mklop_in[i].first == transpose_to_nhwc) {\n+      // Fill \"x\":\n+      nb.Input(transpose_nhwc_in[0].first, transpose_nhwc_in[0].second);\n+    } else {\n+      // Fill inputs other than \"x\":\n+      nb.Input(mklop_in[i].first, mklop_in[i].second);\n+    }\n+  }\n+\n+  copy_attrs(const_cast<const Node*>(mklop), &nb, true);\n+  nb.Attr(\"data_format\", data_format);\n+\n+  // Copy the device assigned to old node to new node.\n+  nb.Device(mklop->def().device());\n+\n+  // Create node.\n+  Node* new_node;\n+  TF_CHECK_OK(nb.Finalize(&**g, &new_node));\n+  CHECK_NOTNULL(new_node);\n+\n+  // Fill outputs.\n+  for (const Edge* e : transpose_to_nchw->out_edges()) {\n+    if (!e->IsControlEdge()) {\n+      const int kConv2DWithBiasOutputSlot = 0;\n+      CHECK_NOTNULL((*g)->AddEdge(new_node, kConv2DWithBiasOutputSlot, e->dst(),\n+                                  e->dst_input()));\n+    }\n+  }\n+\n+  // Copy device assigned to old node to new node.\n+  new_node->set_assigned_device_name(mklop->assigned_device_name());\n+\n+  (*g)->RemoveNode(transpose_to_nhwc);\n+  (*g)->RemoveNode(mklop);\n+  (*g)->RemoveNode(transpose_to_nchw);\n+\n+  return Status::OK();\n+}\n+\n+Status MklLayoutRewritePass::FuseNode(\n+    std::unique_ptr<Graph>* g, std::vector<Node*>& nodes,\n+    const MklLayoutRewritePass::FusionInfo fi) {\n+  return fi.fuse_func(g, nodes, fi.copy_attrs);\n+}\n+\n+std::tuple<bool, std::vector<Node*>, const MklLayoutRewritePass::FusionInfo>\n+MklLayoutRewritePass::CheckForNodeFusion(Node* a) const {\n+  bool found_pattern = false;\n+  std::vector<Node*> nodes;\n+  const FusionInfo* fi_ptr = nullptr;\n+\n+  for (auto fi = finfo_.begin(); fi != finfo_.end(); ++fi) {", "path": "tensorflow/core/graph/mkl_layout_pass.cc", "position": 607, "original_position": 610, "commit_id": "88b2369fe7c4451c63ff0599f7477897dabff2e0", "original_commit_id": "8d068a857dfbeb5cd417eb342a6ba7c330e0a270", "user": {"login": "penpornk", "id": 38085909, "node_id": "MDQ6VXNlcjM4MDg1OTA5", "avatar_url": "https://avatars3.githubusercontent.com/u/38085909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/penpornk", "html_url": "https://github.com/penpornk", "followers_url": "https://api.github.com/users/penpornk/followers", "following_url": "https://api.github.com/users/penpornk/following{/other_user}", "gists_url": "https://api.github.com/users/penpornk/gists{/gist_id}", "starred_url": "https://api.github.com/users/penpornk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/penpornk/subscriptions", "organizations_url": "https://api.github.com/users/penpornk/orgs", "repos_url": "https://api.github.com/users/penpornk/repos", "events_url": "https://api.github.com/users/penpornk/events{/privacy}", "received_events_url": "https://api.github.com/users/penpornk/received_events", "type": "User", "site_admin": false}, "body": "`fi` that shows up first will get applied first. This could result in a suboptimal fusion. For example, for a graph A->B->C->D and fusion rules {A->B->C to ABC, A->B->C->D to ABCD}, since the first rule gets applied first, the final graph will be ABC->D.", "created_at": "2018-10-26T03:14:53Z", "updated_at": "2018-11-14T06:34:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/23152#discussion_r228395139", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23152", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/228395139"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/23152#discussion_r228395139"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/23152"}}, "body_html": "<p><code>fi</code> that shows up first will get applied first. This could result in a suboptimal fusion. For example, for a graph A-&gt;B-&gt;C-&gt;D and fusion rules {A-&gt;B-&gt;C to ABC, A-&gt;B-&gt;C-&gt;D to ABCD}, since the first rule gets applied first, the final graph will be ABC-&gt;D.</p>", "body_text": "fi that shows up first will get applied first. This could result in a suboptimal fusion. For example, for a graph A->B->C->D and fusion rules {A->B->C to ABC, A->B->C->D to ABCD}, since the first rule gets applied first, the final graph will be ABC->D."}