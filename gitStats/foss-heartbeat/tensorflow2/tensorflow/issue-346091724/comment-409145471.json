{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/409145471", "html_url": "https://github.com/tensorflow/tensorflow/issues/21265#issuecomment-409145471", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/21265", "id": 409145471, "node_id": "MDEyOklzc3VlQ29tbWVudDQwOTE0NTQ3MQ==", "user": {"login": "markdryan", "id": 984073, "node_id": "MDQ6VXNlcjk4NDA3Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/984073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markdryan", "html_url": "https://github.com/markdryan", "followers_url": "https://api.github.com/users/markdryan/followers", "following_url": "https://api.github.com/users/markdryan/following{/other_user}", "gists_url": "https://api.github.com/users/markdryan/gists{/gist_id}", "starred_url": "https://api.github.com/users/markdryan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markdryan/subscriptions", "organizations_url": "https://api.github.com/users/markdryan/orgs", "repos_url": "https://api.github.com/users/markdryan/repos", "events_url": "https://api.github.com/users/markdryan/events{/privacy}", "received_events_url": "https://api.github.com/users/markdryan/received_events", "type": "User", "site_admin": false}, "created_at": "2018-07-31T08:49:13Z", "updated_at": "2018-07-31T08:49:13Z", "author_association": "CONTRIBUTOR", "body_html": "<p>The basic problem seems to be that the gemm_pack_rhs&lt;...&gt;::operator()<br>\n(<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/eigen_spatial_convolutions.h#L657\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/eigen_spatial_convolutions.h#L657</a>)<br>\ndoesn't always produce the correct output if the depth is not a multiple of the<br>\npacket_size.  Looking at the code there seem to be a number of issues, each of which are caught by<br>\nassertions.</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/eigen_spatial_convolutions.h#L718\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/eigen_spatial_convolutions.h#L718</a><br>\n<a href=\"https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/eigen_spatial_convolutions.h#L371\">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/eigen_spatial_convolutions.h#L371</a></p>\n<p>I've created a <a href=\"https://bitbucket.org/eigen/eigen/pull-requests/443/fix-tensor-contraction-for-avx512-machines/diff\" rel=\"nofollow\">patch</a> for Eigen that fixes the issue by modifying TensorContractionBlocking to ensure the depth passed to gemm_pack_rhs&lt;...&gt;::operator() is always a multiple of the packet_size for packet_sizes &gt; 8.  I appreciate Eigen might not be the best place to fix this issue as the issue is not reproducible with the Eigen Tensor class.  However, the multiple assertions in with gemm_pack_rhs&lt;...&gt;::operator() in Tensorflow led me to believe that this code was not intended to work when depth is not a multiple of the packet_size and so I opted to make the change in Eigen.  The change is localised to tensor contraction and is the simplest fix that I could come up with. If a fix in Tensorflow or elsewhere would be preferable, please let me know and I'll rework my patch.</p>", "body_text": "The basic problem seems to be that the gemm_pack_rhs<...>::operator()\n(https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/eigen_spatial_convolutions.h#L657)\ndoesn't always produce the correct output if the depth is not a multiple of the\npacket_size.  Looking at the code there seem to be a number of issues, each of which are caught by\nassertions.\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/eigen_spatial_convolutions.h#L718\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/eigen_spatial_convolutions.h#L371\nI've created a patch for Eigen that fixes the issue by modifying TensorContractionBlocking to ensure the depth passed to gemm_pack_rhs<...>::operator() is always a multiple of the packet_size for packet_sizes > 8.  I appreciate Eigen might not be the best place to fix this issue as the issue is not reproducible with the Eigen Tensor class.  However, the multiple assertions in with gemm_pack_rhs<...>::operator() in Tensorflow led me to believe that this code was not intended to work when depth is not a multiple of the packet_size and so I opted to make the change in Eigen.  The change is localised to tensor contraction and is the simplest fix that I could come up with. If a fix in Tensorflow or elsewhere would be preferable, please let me know and I'll rework my patch.", "body": "The basic problem seems to be that the gemm_pack_rhs<...>::operator()\r\n(https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/eigen_spatial_convolutions.h#L657)\r\ndoesn't always produce the correct output if the depth is not a multiple of the\r\npacket_size.  Looking at the code there seem to be a number of issues, each of which are caught by\r\nassertions.\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/eigen_spatial_convolutions.h#L718\r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/eigen_spatial_convolutions.h#L371\r\n\r\nI've created a [patch](https://bitbucket.org/eigen/eigen/pull-requests/443/fix-tensor-contraction-for-avx512-machines/diff) for Eigen that fixes the issue by modifying TensorContractionBlocking to ensure the depth passed to gemm_pack_rhs<...>::operator() is always a multiple of the packet_size for packet_sizes > 8.  I appreciate Eigen might not be the best place to fix this issue as the issue is not reproducible with the Eigen Tensor class.  However, the multiple assertions in with gemm_pack_rhs<...>::operator() in Tensorflow led me to believe that this code was not intended to work when depth is not a multiple of the packet_size and so I opted to make the change in Eigen.  The change is localised to tensor contraction and is the simplest fix that I could come up with. If a fix in Tensorflow or elsewhere would be preferable, please let me know and I'll rework my patch.\r\n"}