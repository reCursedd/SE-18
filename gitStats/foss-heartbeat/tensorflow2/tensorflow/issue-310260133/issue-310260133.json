{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18149", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18149/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18149/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18149/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/18149", "id": 310260133, "node_id": "MDU6SXNzdWUzMTAyNjAxMzM=", "number": 18149, "title": "C++ Const and Assign to initialize variable causes a segfault depending on the Const constructor used", "user": {"login": "rajha-korithrien", "id": 8145476, "node_id": "MDQ6VXNlcjgxNDU0NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/8145476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rajha-korithrien", "html_url": "https://github.com/rajha-korithrien", "followers_url": "https://api.github.com/users/rajha-korithrien/followers", "following_url": "https://api.github.com/users/rajha-korithrien/following{/other_user}", "gists_url": "https://api.github.com/users/rajha-korithrien/gists{/gist_id}", "starred_url": "https://api.github.com/users/rajha-korithrien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rajha-korithrien/subscriptions", "organizations_url": "https://api.github.com/users/rajha-korithrien/orgs", "repos_url": "https://api.github.com/users/rajha-korithrien/repos", "events_url": "https://api.github.com/users/rajha-korithrien/events{/privacy}", "received_events_url": "https://api.github.com/users/rajha-korithrien/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-03-31T18:09:53Z", "updated_at": "2018-11-20T13:26:52Z", "closed_at": null, "author_association": "NONE", "body_html": "<h3>System information</h3>\n<ul>\n<li>\n<p><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>:<br>\nYes see a very short example below.</p>\n</li>\n<li>\n<p><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nmacOS 10.13.3 clang 900.0.39.2 and CentOS Linux 7 gcc-4.8.5</p>\n</li>\n<li>\n<p><strong>TensorFlow installed from (source or binary)</strong>:<br>\nSource from the 1.7.0 release tag</p>\n</li>\n<li>\n<p><strong>TensorFlow version (use command below)</strong>:<br>\nI have not actually installed the python pip package, but the source tree came from:<br>\n<a href=\"https://github.com/tensorflow/tensorflow/archive/v1.7.0.tar.gz\">https://github.com/tensorflow/tensorflow/archive/v1.7.0.tar.gz</a></p>\n</li>\n<li>\n<p><strong>Python version</strong>:<br>\nN/A using the C++ API</p>\n</li>\n<li>\n<p><strong>Bazel version (if compiling from source)</strong>:<br>\nmacOS Build label: 0.11.1-homebrew and Centos Linux 7 Build label: 0.11.1- (@non-git)</p>\n</li>\n<li>\n<p><strong>GCC/Compiler version (if compiling from source)</strong>:<br>\nmacOS clang 900.0.39.2 and CentOS Linux 7 gcc-4.8.5</p>\n</li>\n<li>\n<p><strong>CUDA/cuDNN version</strong>:<br>\nN/A</p>\n</li>\n<li>\n<p><strong>GPU model and memory</strong>:<br>\nN/A</p>\n</li>\n<li>\n<p><strong>Exact command to reproduce</strong>:<br>\nextract the sources/configure<br>\n<code>tar -xzvf v1.7.0.tar.gz</code><br>\n<code>cd tensorflow-1.7.0</code><br>\n<code>./configure</code></p>\n</li>\n</ul>\n<p>Then add the following directory to hold the work:<br>\n<code>mkdir tensorflow/basic-example</code></p>\n<p>Put into basic-example the following BUILD file:</p>\n<pre><code>load(\"//tensorflow:tensorflow.bzl\", \"tf_cc_binary\")\n\ntf_cc_binary(\n    name = \"basic-example\",\n    srcs = [\n        \"basic-example.cc\",\n    ],\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:tensorflow\"\n    ]\n)\n</code></pre>\n<p>Put into basic-example the following C++ source file:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/cc/client/client_session.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/cc/ops/standard_ops.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/tensor.h<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-k\">using</span> <span class=\"pl-k\">namespace</span> <span class=\"pl-en\">tensorflow</span><span class=\"pl-k\">;</span>\n<span class=\"pl-k\">using</span> <span class=\"pl-k\">namespace</span> <span class=\"pl-en\">tensorflow</span>::ops<span class=\"pl-k\">;</span>\n<span class=\"pl-k\">using</span> <span class=\"pl-k\">namespace</span> <span class=\"pl-en\">std</span><span class=\"pl-k\">;</span>\n\n<span class=\"pl-k\">int</span> <span class=\"pl-en\">main</span>() {\n\n  Scope scope = <span class=\"pl-c1\">Scope::NewRootScope</span>();\n \n  <span class=\"pl-k\">auto</span> c = <span class=\"pl-c1\">Const</span>(scope.<span class=\"pl-c1\">WithOpName</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>const_c<span class=\"pl-pds\">\"</span></span>), {<span class=\"pl-c1\">1.0</span>, <span class=\"pl-c1\">2.0</span>, <span class=\"pl-c1\">3.0</span>, <span class=\"pl-c1\">4.0</span>, <span class=\"pl-c1\">5.0</span>, <span class=\"pl-c1\">6.0</span>, <span class=\"pl-c1\">7.0</span>, <span class=\"pl-c1\">8.0</span>, <span class=\"pl-c1\">9.0</span>}, {<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>});\n\n  <span class=\"pl-k\">auto</span> v = <span class=\"pl-c1\">Variable</span>(scope.<span class=\"pl-c1\">WithOpName</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>var1<span class=\"pl-pds\">\"</span></span>), {<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>}, DT_FLOAT);\n  <span class=\"pl-k\">auto</span> init_v = <span class=\"pl-c1\">Assign</span>(scope.<span class=\"pl-c1\">WithOpName</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>init_v<span class=\"pl-pds\">\"</span></span>), v, c);\n\n  std::vector&lt;Tensor&gt; outputs;\n  ClientSession <span class=\"pl-smi\">session</span>(scope);\n\n  <span class=\"pl-c1\">TF_CHECK_OK</span>(session.<span class=\"pl-c1\">Run</span>({init_v}, &amp;outputs));\n}</pre></div>\n<p>Now compile and run the resulting program:<br>\n<code>bazel build -c dbg //tensorflow/basic-example</code><br>\n<code>./bazel-bin/tensorflow/basic-example/basic-example</code></p>\n<p>Observe the following behavior:</p>\n<pre><code>./bazel-bin/tensorflow/basic-example/basic-example\n2018-03-31 11:47:57.135532: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.2 AVX\nSegmentation fault: 11\n</code></pre>\n<h3>Describe the problem</h3>\n<p>The code given above causes a segfault when the session runner tries to get the name of a node because the node is nullptr. I have included a stacktrace using lldb below (a trace showing the same information can be created using gdb on Linux).</p>\n<p>However the following slightly modified C++ program works fine:</p>\n<div class=\"highlight highlight-source-c++\"><pre>#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/cc/client/client_session.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/cc/ops/standard_ops.h<span class=\"pl-pds\">\"</span></span>\n#<span class=\"pl-k\">include</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tensorflow/core/framework/tensor.h<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-k\">using</span> <span class=\"pl-k\">namespace</span> <span class=\"pl-en\">tensorflow</span><span class=\"pl-k\">;</span>\n<span class=\"pl-k\">using</span> <span class=\"pl-k\">namespace</span> <span class=\"pl-en\">tensorflow</span>::ops<span class=\"pl-k\">;</span>\n<span class=\"pl-k\">using</span> <span class=\"pl-k\">namespace</span> <span class=\"pl-en\">std</span><span class=\"pl-k\">;</span>\n\n<span class=\"pl-k\">int</span> <span class=\"pl-en\">main</span>() {\n\n  std::vector&lt;<span class=\"pl-k\">float</span>&gt; initConstData = {<span class=\"pl-c1\">1.0</span>, <span class=\"pl-c1\">2.0</span>, <span class=\"pl-c1\">3.0</span>, <span class=\"pl-c1\">4.0</span>, <span class=\"pl-c1\">5.0</span>, <span class=\"pl-c1\">6.0</span>, <span class=\"pl-c1\">7.0</span>, <span class=\"pl-c1\">8.0</span>, <span class=\"pl-c1\">9.0</span>};\n\n  Scope scope = <span class=\"pl-c1\">Scope::NewRootScope</span>();\n\n  Tensor <span class=\"pl-smi\">initConstT</span>(DT_FLOAT, <span class=\"pl-c1\">TensorShape</span>({<span class=\"pl-c1\">3</span>,<span class=\"pl-c1\">3</span>}));\n  <span class=\"pl-c1\">std::copy_n</span>(initConstData.<span class=\"pl-c1\">begin</span>(), initConstData.<span class=\"pl-c1\">size</span>(), initConstT.<span class=\"pl-smi\">flat</span>&lt;<span class=\"pl-k\">float</span>&gt;().<span class=\"pl-c1\">data</span>());\n\n  <span class=\"pl-k\">auto</span> c = <span class=\"pl-c1\">Const</span>(scope.<span class=\"pl-c1\">WithOpName</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>const_c<span class=\"pl-pds\">\"</span></span>), initConstT);\n\n  <span class=\"pl-k\">auto</span> v = <span class=\"pl-c1\">Variable</span>(scope.<span class=\"pl-c1\">WithOpName</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>var1<span class=\"pl-pds\">\"</span></span>), {<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">3</span>}, DT_FLOAT);\n  <span class=\"pl-k\">auto</span> init_v = <span class=\"pl-c1\">Assign</span>(scope.<span class=\"pl-c1\">WithOpName</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>init_v<span class=\"pl-pds\">\"</span></span>), v, c);\n\n  std::vector&lt;Tensor&gt; outputs;\n  ClientSession <span class=\"pl-smi\">session</span>(scope);\n\n  <span class=\"pl-c1\">TF_CHECK_OK</span>(session.<span class=\"pl-c1\">Run</span>({init_v}, &amp;outputs));\n}</pre></div>\n<p>The difference between the code that works and the code that doesn't:<br>\na) the explicit creation of a tensor initConstT<br>\nb) calling Const with a Tensor rather than an Input::Initializer</p>\n<p>The behavior is identical if I omit the use of scope.WithOpName and just pass scope.<br>\nI have been able to test this back as far as Tensorflow 1.4 I can not build Tensorflow 1.3.1 with my installed version of bazel.</p>\n<p>If I have done something wrong, please point it out. Otherwise I feel that because there is no semantic difference between the two programs and the API allows the former program to compile then they should both work.</p>\n<h3>Source code / logs</h3>\n<p>Stacktrace of the problem:</p>\n<pre><code>(lldb) bt\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x60)\n  * frame #0: 0x0000000126e677bc libtensorflow_framework.so`tensorflow::Node::name() const [inlined] std::__1::shared_ptr&lt;tensorflow::NodeProperties&gt;::operator-&gt;(this=0x0000000000000060) const at memory:4071\n    frame #1: 0x0000000126e677bc libtensorflow_framework.so`tensorflow::Node::name(this=0x0000000000000000) const at graph.cc:140\n    frame #2: 0x000000010018592f basic-example`tensorflow::Output::name(this=0x000000012bc020f0) const at ops.h:76\n    frame #3: 0x0000000100184e7a basic-example`tensorflow::ClientSession::Run(this=0x00007ffeefbff4a8, run_options=0x00007ffeefbfefd0, inputs=size=0, fetch_outputs=size=1, run_outputs=size=1, outputs=0x00007ffeefbff4b0 size=1, run_metadata=0x0000000000000000) const at client_session.cc:118\n    frame #4: 0x0000000100184145 basic-example`tensorflow::ClientSession::Run(this=0x00007ffeefbff4a8, inputs=size=0, fetch_outputs=size=1, run_outputs=size=1, outputs=0x00007ffeefbff4b0 size=1) const at client_session.cc:89\n    frame #5: 0x000000010018408a basic-example`tensorflow::ClientSession::Run(this=0x00007ffeefbff4a8, fetch_outputs=size=1, outputs=0x00007ffeefbff4b0 size=1) const at client_session.cc:76\n    frame #6: 0x0000000100002bfc basic-example`main at basic-example.cc:22\n    frame #7: 0x00007fff76249115 libdyld.dylib`start + 1\n    frame #8: 0x00007fff76249115 libdyld.dylib`start + 1\n(lldb)\n</code></pre>", "body_text": "System information\n\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow):\nYes see a very short example below.\n\n\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nmacOS 10.13.3 clang 900.0.39.2 and CentOS Linux 7 gcc-4.8.5\n\n\nTensorFlow installed from (source or binary):\nSource from the 1.7.0 release tag\n\n\nTensorFlow version (use command below):\nI have not actually installed the python pip package, but the source tree came from:\nhttps://github.com/tensorflow/tensorflow/archive/v1.7.0.tar.gz\n\n\nPython version:\nN/A using the C++ API\n\n\nBazel version (if compiling from source):\nmacOS Build label: 0.11.1-homebrew and Centos Linux 7 Build label: 0.11.1- (@non-git)\n\n\nGCC/Compiler version (if compiling from source):\nmacOS clang 900.0.39.2 and CentOS Linux 7 gcc-4.8.5\n\n\nCUDA/cuDNN version:\nN/A\n\n\nGPU model and memory:\nN/A\n\n\nExact command to reproduce:\nextract the sources/configure\ntar -xzvf v1.7.0.tar.gz\ncd tensorflow-1.7.0\n./configure\n\n\nThen add the following directory to hold the work:\nmkdir tensorflow/basic-example\nPut into basic-example the following BUILD file:\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cc_binary\")\n\ntf_cc_binary(\n    name = \"basic-example\",\n    srcs = [\n        \"basic-example.cc\",\n    ],\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:tensorflow\"\n    ]\n)\n\nPut into basic-example the following C++ source file:\n#include \"tensorflow/cc/client/client_session.h\"\n#include \"tensorflow/cc/ops/standard_ops.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n\nusing namespace tensorflow;\nusing namespace tensorflow::ops;\nusing namespace std;\n\nint main() {\n\n  Scope scope = Scope::NewRootScope();\n \n  auto c = Const(scope.WithOpName(\"const_c\"), {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0}, {3,3});\n\n  auto v = Variable(scope.WithOpName(\"var1\"), {3, 3}, DT_FLOAT);\n  auto init_v = Assign(scope.WithOpName(\"init_v\"), v, c);\n\n  std::vector<Tensor> outputs;\n  ClientSession session(scope);\n\n  TF_CHECK_OK(session.Run({init_v}, &outputs));\n}\nNow compile and run the resulting program:\nbazel build -c dbg //tensorflow/basic-example\n./bazel-bin/tensorflow/basic-example/basic-example\nObserve the following behavior:\n./bazel-bin/tensorflow/basic-example/basic-example\n2018-03-31 11:47:57.135532: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.2 AVX\nSegmentation fault: 11\n\nDescribe the problem\nThe code given above causes a segfault when the session runner tries to get the name of a node because the node is nullptr. I have included a stacktrace using lldb below (a trace showing the same information can be created using gdb on Linux).\nHowever the following slightly modified C++ program works fine:\n#include \"tensorflow/cc/client/client_session.h\"\n#include \"tensorflow/cc/ops/standard_ops.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n\nusing namespace tensorflow;\nusing namespace tensorflow::ops;\nusing namespace std;\n\nint main() {\n\n  std::vector<float> initConstData = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0};\n\n  Scope scope = Scope::NewRootScope();\n\n  Tensor initConstT(DT_FLOAT, TensorShape({3,3}));\n  std::copy_n(initConstData.begin(), initConstData.size(), initConstT.flat<float>().data());\n\n  auto c = Const(scope.WithOpName(\"const_c\"), initConstT);\n\n  auto v = Variable(scope.WithOpName(\"var1\"), {3, 3}, DT_FLOAT);\n  auto init_v = Assign(scope.WithOpName(\"init_v\"), v, c);\n\n  std::vector<Tensor> outputs;\n  ClientSession session(scope);\n\n  TF_CHECK_OK(session.Run({init_v}, &outputs));\n}\nThe difference between the code that works and the code that doesn't:\na) the explicit creation of a tensor initConstT\nb) calling Const with a Tensor rather than an Input::Initializer\nThe behavior is identical if I omit the use of scope.WithOpName and just pass scope.\nI have been able to test this back as far as Tensorflow 1.4 I can not build Tensorflow 1.3.1 with my installed version of bazel.\nIf I have done something wrong, please point it out. Otherwise I feel that because there is no semantic difference between the two programs and the API allows the former program to compile then they should both work.\nSource code / logs\nStacktrace of the problem:\n(lldb) bt\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x60)\n  * frame #0: 0x0000000126e677bc libtensorflow_framework.so`tensorflow::Node::name() const [inlined] std::__1::shared_ptr<tensorflow::NodeProperties>::operator->(this=0x0000000000000060) const at memory:4071\n    frame #1: 0x0000000126e677bc libtensorflow_framework.so`tensorflow::Node::name(this=0x0000000000000000) const at graph.cc:140\n    frame #2: 0x000000010018592f basic-example`tensorflow::Output::name(this=0x000000012bc020f0) const at ops.h:76\n    frame #3: 0x0000000100184e7a basic-example`tensorflow::ClientSession::Run(this=0x00007ffeefbff4a8, run_options=0x00007ffeefbfefd0, inputs=size=0, fetch_outputs=size=1, run_outputs=size=1, outputs=0x00007ffeefbff4b0 size=1, run_metadata=0x0000000000000000) const at client_session.cc:118\n    frame #4: 0x0000000100184145 basic-example`tensorflow::ClientSession::Run(this=0x00007ffeefbff4a8, inputs=size=0, fetch_outputs=size=1, run_outputs=size=1, outputs=0x00007ffeefbff4b0 size=1) const at client_session.cc:89\n    frame #5: 0x000000010018408a basic-example`tensorflow::ClientSession::Run(this=0x00007ffeefbff4a8, fetch_outputs=size=1, outputs=0x00007ffeefbff4b0 size=1) const at client_session.cc:76\n    frame #6: 0x0000000100002bfc basic-example`main at basic-example.cc:22\n    frame #7: 0x00007fff76249115 libdyld.dylib`start + 1\n    frame #8: 0x00007fff76249115 libdyld.dylib`start + 1\n(lldb)", "body": "### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**:\r\nYes see a very short example below.\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nmacOS 10.13.3 clang 900.0.39.2 and CentOS Linux 7 gcc-4.8.5\r\n- **TensorFlow installed from (source or binary)**:\r\nSource from the 1.7.0 release tag\r\n- **TensorFlow version (use command below)**:\r\nI have not actually installed the python pip package, but the source tree came from:\r\nhttps://github.com/tensorflow/tensorflow/archive/v1.7.0.tar.gz\r\n\r\n- **Python version**: \r\nN/A using the C++ API\r\n- **Bazel version (if compiling from source)**:\r\nmacOS Build label: 0.11.1-homebrew and Centos Linux 7 Build label: 0.11.1- (@non-git)\r\n- **GCC/Compiler version (if compiling from source)**:\r\nmacOS clang 900.0.39.2 and CentOS Linux 7 gcc-4.8.5\r\n- **CUDA/cuDNN version**:\r\nN/A\r\n- **GPU model and memory**:\r\nN/A\r\n- **Exact command to reproduce**:\r\nextract the sources/configure\r\n`tar -xzvf v1.7.0.tar.gz`\r\n`cd tensorflow-1.7.0`\r\n`./configure`\r\n\r\nThen add the following directory to hold the work:\r\n`mkdir tensorflow/basic-example`\r\n\r\nPut into basic-example the following BUILD file:\r\n```\r\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cc_binary\")\r\n\r\ntf_cc_binary(\r\n    name = \"basic-example\",\r\n    srcs = [\r\n        \"basic-example.cc\",\r\n    ],\r\n    deps = [\r\n        \"//tensorflow/cc:cc_ops\",\r\n        \"//tensorflow/cc:client_session\",\r\n        \"//tensorflow/core:tensorflow\"\r\n    ]\r\n)\r\n```\r\nPut into basic-example the following C++ source file:\r\n```c++\r\n#include \"tensorflow/cc/client/client_session.h\"\r\n#include \"tensorflow/cc/ops/standard_ops.h\"\r\n#include \"tensorflow/core/framework/tensor.h\"\r\n\r\nusing namespace tensorflow;\r\nusing namespace tensorflow::ops;\r\nusing namespace std;\r\n\r\nint main() {\r\n\r\n  Scope scope = Scope::NewRootScope();\r\n \r\n  auto c = Const(scope.WithOpName(\"const_c\"), {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0}, {3,3});\r\n\r\n  auto v = Variable(scope.WithOpName(\"var1\"), {3, 3}, DT_FLOAT);\r\n  auto init_v = Assign(scope.WithOpName(\"init_v\"), v, c);\r\n\r\n  std::vector<Tensor> outputs;\r\n  ClientSession session(scope);\r\n\r\n  TF_CHECK_OK(session.Run({init_v}, &outputs));\r\n}\r\n```\r\nNow compile and run the resulting program:\r\n`bazel build -c dbg //tensorflow/basic-example`\r\n`./bazel-bin/tensorflow/basic-example/basic-example`\r\n\r\nObserve the following behavior:\r\n```\r\n./bazel-bin/tensorflow/basic-example/basic-example\r\n2018-03-31 11:47:57.135532: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.2 AVX\r\nSegmentation fault: 11\r\n```\r\n### Describe the problem\r\nThe code given above causes a segfault when the session runner tries to get the name of a node because the node is nullptr. I have included a stacktrace using lldb below (a trace showing the same information can be created using gdb on Linux).\r\n\r\nHowever the following slightly modified C++ program works fine:\r\n```c++\r\n#include \"tensorflow/cc/client/client_session.h\"\r\n#include \"tensorflow/cc/ops/standard_ops.h\"\r\n#include \"tensorflow/core/framework/tensor.h\"\r\n\r\nusing namespace tensorflow;\r\nusing namespace tensorflow::ops;\r\nusing namespace std;\r\n\r\nint main() {\r\n\r\n  std::vector<float> initConstData = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0};\r\n\r\n  Scope scope = Scope::NewRootScope();\r\n\r\n  Tensor initConstT(DT_FLOAT, TensorShape({3,3}));\r\n  std::copy_n(initConstData.begin(), initConstData.size(), initConstT.flat<float>().data());\r\n\r\n  auto c = Const(scope.WithOpName(\"const_c\"), initConstT);\r\n\r\n  auto v = Variable(scope.WithOpName(\"var1\"), {3, 3}, DT_FLOAT);\r\n  auto init_v = Assign(scope.WithOpName(\"init_v\"), v, c);\r\n\r\n  std::vector<Tensor> outputs;\r\n  ClientSession session(scope);\r\n\r\n  TF_CHECK_OK(session.Run({init_v}, &outputs));\r\n}\r\n```\r\nThe difference between the code that works and the code that doesn't:\r\na) the explicit creation of a tensor initConstT\r\nb) calling Const with a Tensor rather than an Input::Initializer\r\n\r\nThe behavior is identical if I omit the use of scope.WithOpName and just pass scope.\r\nI have been able to test this back as far as Tensorflow 1.4 I can not build Tensorflow 1.3.1 with my installed version of bazel.\r\n\r\nIf I have done something wrong, please point it out. Otherwise I feel that because there is no semantic difference between the two programs and the API allows the former program to compile then they should both work.\r\n\r\n### Source code / logs\r\nStacktrace of the problem:\r\n```\r\n(lldb) bt\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x60)\r\n  * frame #0: 0x0000000126e677bc libtensorflow_framework.so`tensorflow::Node::name() const [inlined] std::__1::shared_ptr<tensorflow::NodeProperties>::operator->(this=0x0000000000000060) const at memory:4071\r\n    frame #1: 0x0000000126e677bc libtensorflow_framework.so`tensorflow::Node::name(this=0x0000000000000000) const at graph.cc:140\r\n    frame #2: 0x000000010018592f basic-example`tensorflow::Output::name(this=0x000000012bc020f0) const at ops.h:76\r\n    frame #3: 0x0000000100184e7a basic-example`tensorflow::ClientSession::Run(this=0x00007ffeefbff4a8, run_options=0x00007ffeefbfefd0, inputs=size=0, fetch_outputs=size=1, run_outputs=size=1, outputs=0x00007ffeefbff4b0 size=1, run_metadata=0x0000000000000000) const at client_session.cc:118\r\n    frame #4: 0x0000000100184145 basic-example`tensorflow::ClientSession::Run(this=0x00007ffeefbff4a8, inputs=size=0, fetch_outputs=size=1, run_outputs=size=1, outputs=0x00007ffeefbff4b0 size=1) const at client_session.cc:89\r\n    frame #5: 0x000000010018408a basic-example`tensorflow::ClientSession::Run(this=0x00007ffeefbff4a8, fetch_outputs=size=1, outputs=0x00007ffeefbff4b0 size=1) const at client_session.cc:76\r\n    frame #6: 0x0000000100002bfc basic-example`main at basic-example.cc:22\r\n    frame #7: 0x00007fff76249115 libdyld.dylib`start + 1\r\n    frame #8: 0x00007fff76249115 libdyld.dylib`start + 1\r\n(lldb)\r\n```\r\n"}