{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/340606596", "html_url": "https://github.com/tensorflow/tensorflow/issues/13865#issuecomment-340606596", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13865", "id": 340606596, "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDYwNjU5Ng==", "user": {"login": "nikonikolov", "id": 11044035, "node_id": "MDQ6VXNlcjExMDQ0MDM1", "avatar_url": "https://avatars3.githubusercontent.com/u/11044035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikonikolov", "html_url": "https://github.com/nikonikolov", "followers_url": "https://api.github.com/users/nikonikolov/followers", "following_url": "https://api.github.com/users/nikonikolov/following{/other_user}", "gists_url": "https://api.github.com/users/nikonikolov/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikonikolov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikonikolov/subscriptions", "organizations_url": "https://api.github.com/users/nikonikolov/orgs", "repos_url": "https://api.github.com/users/nikonikolov/repos", "events_url": "https://api.github.com/users/nikonikolov/events{/privacy}", "received_events_url": "https://api.github.com/users/nikonikolov/received_events", "type": "User", "site_admin": false}, "created_at": "2017-10-30T22:41:50Z", "updated_at": "2017-10-30T22:41:50Z", "author_association": "NONE", "body_html": "<p>In that case, seems like <code>Dataset.from_tensors(0).repeat(len(X_test_data))</code> can often do the job.</p>\n<p>As far as the feature request goes, maybe something like this will be more clear</p>\n<pre><code>y_test = tf.contrib.data.Dataset.empty(output_types, output_shapes)\n# or\ny_test = tf.contrib.data.Dataset.empty(y_train_data)\n</code></pre>\n<p>The idea is that just some empty Dataset is created, which can be compatible with <code>y_train</code> provided that the same <code>output_types</code> and <code>output_shapes</code> are supplied (or alternatively an example tensor for <code>output_types</code> and <code>output_shapes</code> is given). Not sure if this provides any sensible benefits other than maybe code clarity. Potentially it can be useful in some strange cases when the labels are vectors or something more than a single number (e.g. when learning some distributions for which not all the density is concentrated in a single bin).</p>\n<p>Up to you to close the issue if you think there will be no real benefit.</p>", "body_text": "In that case, seems like Dataset.from_tensors(0).repeat(len(X_test_data)) can often do the job.\nAs far as the feature request goes, maybe something like this will be more clear\ny_test = tf.contrib.data.Dataset.empty(output_types, output_shapes)\n# or\ny_test = tf.contrib.data.Dataset.empty(y_train_data)\n\nThe idea is that just some empty Dataset is created, which can be compatible with y_train provided that the same output_types and output_shapes are supplied (or alternatively an example tensor for output_types and output_shapes is given). Not sure if this provides any sensible benefits other than maybe code clarity. Potentially it can be useful in some strange cases when the labels are vectors or something more than a single number (e.g. when learning some distributions for which not all the density is concentrated in a single bin).\nUp to you to close the issue if you think there will be no real benefit.", "body": "In that case, seems like `Dataset.from_tensors(0).repeat(len(X_test_data))` can often do the job.\r\n\r\nAs far as the feature request goes, maybe something like this will be more clear\r\n```\r\ny_test = tf.contrib.data.Dataset.empty(output_types, output_shapes)\r\n# or\r\ny_test = tf.contrib.data.Dataset.empty(y_train_data)\r\n```\r\nThe idea is that just some empty Dataset is created, which can be compatible with `y_train` provided that the same `output_types` and `output_shapes` are supplied (or alternatively an example tensor for `output_types` and `output_shapes` is given). Not sure if this provides any sensible benefits other than maybe code clarity. Potentially it can be useful in some strange cases when the labels are vectors or something more than a single number (e.g. when learning some distributions for which not all the density is concentrated in a single bin). \r\n\r\nUp to you to close the issue if you think there will be no real benefit."}