{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/345566011", "html_url": "https://github.com/tensorflow/tensorflow/issues/13784#issuecomment-345566011", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13784", "id": 345566011, "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTU2NjAxMQ==", "user": {"login": "rodhammond", "id": 20401559, "node_id": "MDQ6VXNlcjIwNDAxNTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/20401559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodhammond", "html_url": "https://github.com/rodhammond", "followers_url": "https://api.github.com/users/rodhammond/followers", "following_url": "https://api.github.com/users/rodhammond/following{/other_user}", "gists_url": "https://api.github.com/users/rodhammond/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodhammond/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodhammond/subscriptions", "organizations_url": "https://api.github.com/users/rodhammond/orgs", "repos_url": "https://api.github.com/users/rodhammond/repos", "events_url": "https://api.github.com/users/rodhammond/events{/privacy}", "received_events_url": "https://api.github.com/users/rodhammond/received_events", "type": "User", "site_admin": false}, "created_at": "2017-11-20T00:59:24Z", "updated_at": "2017-11-20T03:20:30Z", "author_association": "NONE", "body_html": "<p>Sorry if I've misunderstood your issue, but think this will solve your problems. I'm using Ubuntu 14.04 and the tensorflow/tensorflow docker image. The NV_GPU option allows GPU access of my two 980 cards to the docker container. I think the overall problem is caused by an unset ENV $USER variable.</p>\n<ol>\n<li>Launch the container using directory mapping to avoid docker-in-docker ulimit and process pid/socket issues:</li>\n</ol>\n<p>NV_GPU=0,1 nvidia-docker run --rm -it --ulimit nproc=1024:2048 -v /var/lib/docker:/var/lib/docker/ -v /var/run/docker.sock:/var/run/docker.sock -v /var/run/docker.pid:/var/run/docker-ssd.pid -v /var/run/docker.pid:/var/run/docker.pid --name jupyter_tensorflow -p 8888:8888 gcr.io/tensorflow/tensorflow:latest-devel-gpu /bin/bash</p>\n<ol start=\"2\">\n<li>Once at the bash prompt, install the following:</li>\n</ol>\n<p>apt-get update &amp;&amp;<br>\napt-get install -y apt-transport-https ca-certificates curl software-properties-common &amp;&amp;<br>\ncurl -fsSL <a href=\"https://download.docker.com/linux/ubuntu/gpg\" rel=\"nofollow\">https://download.docker.com/linux/ubuntu/gpg</a> | apt-key add - &amp;&amp;<br>\nadd-apt-repository \"deb [arch=amd64] <a href=\"https://download.docker.com/linux/ubuntu\" rel=\"nofollow\">https://download.docker.com/linux/ubuntu</a> $(lsb_release -cs) stable\" &amp;&amp;<br>\napt-get install -y iputils-ping &amp;&amp;<br>\napt-get install -y nano &amp;&amp;<br>\napt-get update &amp;&amp;<br>\napt-get install -y docker-ce &amp;&amp;<br>\nwhich docker</p>\n<ol start=\"3\">\n<li>Set ENV variables:</li>\n</ol>\n<p>rm -rf /tmp/tmp*<br>\ncd /tensorflow/tensorflow/tools/docker</p>\n<p>export USER=tensorflow</p>\n<p>export TF_DOCKER_BUILD_IS_DEVEL=NO<br>\nexport TF_DOCKER_BUILD_TYPE=CPU<br>\nexport TF_DOCKER_BUILD_PYTHON_VERSION=PYTHON2<br>\nexport NIGHTLY_VERSION=\"1.head\"<br>\nexport TF_DOCKER_BUILD_IMAGE_NAME=tensorflow<br>\nexport TF_DOCKER_BUILD_VERSION=latest</p>\n<p>export TF_DOCKER_BUILD_CENTRAL_PIP=$(echo ${TF_DOCKER_BUILD_PYTHON_VERSION} | sed s^PYTHON2^<a href=\"http://ci.tensorflow.org/view/Nightly/job/nightly-matrix-cpu/TF_BUILD_IS_OPT=OPT,TF_BUILD_IS_PIP=PIP,TF_BUILD_PYTHON_VERSION=$%7BTF_DOCKER_BUILD_PYTHON_VERSION%7D,label=cpu-slave/lastSuccessfulBuild/artifact/pip_test/whl/tensorflow-$%7BNIGHTLY_VERSION%7D-cp27-cp27mu-manylinux1_x86_64.whl%5E\" rel=\"nofollow\">http://ci.tensorflow.org/view/Nightly/job/nightly-matrix-cpu/TF_BUILD_IS_OPT=OPT,TF_BUILD_IS_PIP=PIP,TF_BUILD_PYTHON_VERSION=${TF_DOCKER_BUILD_PYTHON_VERSION},label=cpu-slave/lastSuccessfulBuild/artifact/pip_test/whl/tensorflow-${NIGHTLY_VERSION}-cp27-cp27mu-manylinux1_x86_64.whl^</a> | sed s^PYTHON3^<a href=\"http://ci.tensorflow.org/view/Nightly/job/nightly-python35-linux-cpu/lastSuccessfulBuild/artifact/pip_test/whl/tensorflow-$%7BNIGHTLY_VERSION%7D-cp35-cp35m-manylinux1_x86_64.whl%5E\" rel=\"nofollow\">http://ci.tensorflow.org/view/Nightly/job/nightly-python35-linux-cpu/lastSuccessfulBuild/artifact/pip_test/whl/tensorflow-${NIGHTLY_VERSION}-cp35-cp35m-manylinux1_x86_64.whl^</a>)</p>\n<ol start=\"4\">\n<li>Execute the parameterized_docker_build script to build a local image with the  above settings:</li>\n</ol>\n<p>chmod +x /tensorflow/tensorflow/tools/docker/parameterized_docker_build.sh<br>\n/tensorflow/tensorflow/tools/docker/parameterized_docker_build.sh</p>\n<p>Hope this helps.</p>", "body_text": "Sorry if I've misunderstood your issue, but think this will solve your problems. I'm using Ubuntu 14.04 and the tensorflow/tensorflow docker image. The NV_GPU option allows GPU access of my two 980 cards to the docker container. I think the overall problem is caused by an unset ENV $USER variable.\n\nLaunch the container using directory mapping to avoid docker-in-docker ulimit and process pid/socket issues:\n\nNV_GPU=0,1 nvidia-docker run --rm -it --ulimit nproc=1024:2048 -v /var/lib/docker:/var/lib/docker/ -v /var/run/docker.sock:/var/run/docker.sock -v /var/run/docker.pid:/var/run/docker-ssd.pid -v /var/run/docker.pid:/var/run/docker.pid --name jupyter_tensorflow -p 8888:8888 gcr.io/tensorflow/tensorflow:latest-devel-gpu /bin/bash\n\nOnce at the bash prompt, install the following:\n\napt-get update &&\napt-get install -y apt-transport-https ca-certificates curl software-properties-common &&\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - &&\nadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" &&\napt-get install -y iputils-ping &&\napt-get install -y nano &&\napt-get update &&\napt-get install -y docker-ce &&\nwhich docker\n\nSet ENV variables:\n\nrm -rf /tmp/tmp*\ncd /tensorflow/tensorflow/tools/docker\nexport USER=tensorflow\nexport TF_DOCKER_BUILD_IS_DEVEL=NO\nexport TF_DOCKER_BUILD_TYPE=CPU\nexport TF_DOCKER_BUILD_PYTHON_VERSION=PYTHON2\nexport NIGHTLY_VERSION=\"1.head\"\nexport TF_DOCKER_BUILD_IMAGE_NAME=tensorflow\nexport TF_DOCKER_BUILD_VERSION=latest\nexport TF_DOCKER_BUILD_CENTRAL_PIP=$(echo ${TF_DOCKER_BUILD_PYTHON_VERSION} | sed s^PYTHON2^http://ci.tensorflow.org/view/Nightly/job/nightly-matrix-cpu/TF_BUILD_IS_OPT=OPT,TF_BUILD_IS_PIP=PIP,TF_BUILD_PYTHON_VERSION=${TF_DOCKER_BUILD_PYTHON_VERSION},label=cpu-slave/lastSuccessfulBuild/artifact/pip_test/whl/tensorflow-${NIGHTLY_VERSION}-cp27-cp27mu-manylinux1_x86_64.whl^ | sed s^PYTHON3^http://ci.tensorflow.org/view/Nightly/job/nightly-python35-linux-cpu/lastSuccessfulBuild/artifact/pip_test/whl/tensorflow-${NIGHTLY_VERSION}-cp35-cp35m-manylinux1_x86_64.whl^)\n\nExecute the parameterized_docker_build script to build a local image with the  above settings:\n\nchmod +x /tensorflow/tensorflow/tools/docker/parameterized_docker_build.sh\n/tensorflow/tensorflow/tools/docker/parameterized_docker_build.sh\nHope this helps.", "body": "Sorry if I've misunderstood your issue, but think this will solve your problems. I'm using Ubuntu 14.04 and the tensorflow/tensorflow docker image. The NV_GPU option allows GPU access of my two 980 cards to the docker container. I think the overall problem is caused by an unset ENV $USER variable.\r\n\r\n1. Launch the container using directory mapping to avoid docker-in-docker ulimit and process pid/socket issues:\r\n\r\nNV_GPU=0,1 nvidia-docker run --rm -it --ulimit nproc=1024:2048 -v /var/lib/docker:/var/lib/docker/ -v /var/run/docker.sock:/var/run/docker.sock -v /var/run/docker.pid:/var/run/docker-ssd.pid -v /var/run/docker.pid:/var/run/docker.pid --name jupyter_tensorflow -p 8888:8888 gcr.io/tensorflow/tensorflow:latest-devel-gpu /bin/bash\r\n\r\n2. Once at the bash prompt, install the following:\r\n\r\napt-get update &&\r\napt-get install -y apt-transport-https ca-certificates curl software-properties-common &&\r\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - &&\r\nadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" &&\r\napt-get install -y iputils-ping &&\r\napt-get install -y nano &&\r\napt-get update &&\r\napt-get install -y docker-ce &&\r\nwhich docker\r\n\r\n3. Set ENV variables:\r\n\r\nrm -rf /tmp/tmp*\r\ncd /tensorflow/tensorflow/tools/docker\r\n\r\nexport USER=tensorflow\r\n\r\nexport TF_DOCKER_BUILD_IS_DEVEL=NO\r\nexport TF_DOCKER_BUILD_TYPE=CPU\r\nexport TF_DOCKER_BUILD_PYTHON_VERSION=PYTHON2\r\nexport NIGHTLY_VERSION=\"1.head\"\r\nexport TF_DOCKER_BUILD_IMAGE_NAME=tensorflow\r\nexport TF_DOCKER_BUILD_VERSION=latest\r\n\r\nexport TF_DOCKER_BUILD_CENTRAL_PIP=$(echo ${TF_DOCKER_BUILD_PYTHON_VERSION} | sed s^PYTHON2^http://ci.tensorflow.org/view/Nightly/job/nightly-matrix-cpu/TF_BUILD_IS_OPT=OPT,TF_BUILD_IS_PIP=PIP,TF_BUILD_PYTHON_VERSION=${TF_DOCKER_BUILD_PYTHON_VERSION},label=cpu-slave/lastSuccessfulBuild/artifact/pip_test/whl/tensorflow-${NIGHTLY_VERSION}-cp27-cp27mu-manylinux1_x86_64.whl^ | sed s^PYTHON3^http://ci.tensorflow.org/view/Nightly/job/nightly-python35-linux-cpu/lastSuccessfulBuild/artifact/pip_test/whl/tensorflow-${NIGHTLY_VERSION}-cp35-cp35m-manylinux1_x86_64.whl^)\r\n\r\n4. Execute the parameterized_docker_build script to build a local image with the  above settings:\r\n\r\nchmod +x /tensorflow/tensorflow/tools/docker/parameterized_docker_build.sh\r\n/tensorflow/tensorflow/tools/docker/parameterized_docker_build.sh\r\n\r\nHope this helps.\r\n\r\n  \r\n "}