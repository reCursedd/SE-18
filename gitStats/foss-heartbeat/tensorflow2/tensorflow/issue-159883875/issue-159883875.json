{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2826", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2826/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2826/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2826/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/2826", "id": 159883875, "node_id": "MDU6SXNzdWUxNTk4ODM4NzU=", "number": 2826, "title": "A 1D and 2D Gaussian implementation in TensorFlow", "user": {"login": "RobRomijnders", "id": 16174021, "node_id": "MDQ6VXNlcjE2MTc0MDIx", "avatar_url": "https://avatars2.githubusercontent.com/u/16174021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RobRomijnders", "html_url": "https://github.com/RobRomijnders", "followers_url": "https://api.github.com/users/RobRomijnders/followers", "following_url": "https://api.github.com/users/RobRomijnders/following{/other_user}", "gists_url": "https://api.github.com/users/RobRomijnders/gists{/gist_id}", "starred_url": "https://api.github.com/users/RobRomijnders/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RobRomijnders/subscriptions", "organizations_url": "https://api.github.com/users/RobRomijnders/orgs", "repos_url": "https://api.github.com/users/RobRomijnders/repos", "events_url": "https://api.github.com/users/RobRomijnders/events{/privacy}", "received_events_url": "https://api.github.com/users/RobRomijnders/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 299643928, "node_id": "MDU6TGFiZWwyOTk2NDM5Mjg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:contributions%20welcome", "name": "stat:contributions welcome", "color": "f4b400", "default": false}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-13T06:54:16Z", "updated_at": "2016-07-14T00:54:22Z", "closed_at": "2016-07-14T00:54:22Z", "author_association": "NONE", "body_html": "<p>Feature request:</p>\n<p>Mixture Density networks, attention models and variational inference getting more popular, we are defining more and more Gaussians in our model. My feature request would be to have a native Gaussian implementation in TensorFlow.</p>\n<p>Up to now, I re-use <a href=\"https://github.com/hardmaru/write-rnn-tensorflow/blob/master/model.py\">this</a> code:</p>\n<pre><code>def tf_2d_normal(x1, x2, mu1, mu2, s1, s2, rho):\n  # eq # 24 and 25 of http://arxiv.org/abs/1308.0850\n  norm1 = tf.sub(x1, mu1)\n  norm2 = tf.sub(x2, mu2)\n  s1s2 = tf.mul(s1, s2)\n  z = tf.square(tf.div(norm1, s1))+tf.square(tf.div(norm2, s2))-2*tf.div(tf.mul(rho, tf.mul(norm1, norm2)), s1s2)\n  negRho = 1-tf.square(rho)\n  result = tf.exp(tf.div(-z,2*negRho))\n  denom = 2*np.pi*tf.mul(s1s2, tf.sqrt(negRho))\n  result = tf.div(result, denom)\n  return result\n</code></pre>\n<p>However, it might be nice for Tensorflow to implement it in the library. They might be able to apply it more computationally efficient? Also, they might go for N-dimensional Gaussians, not only two.</p>\n<p>What do you think? Is this feasible?</p>", "body_text": "Feature request:\nMixture Density networks, attention models and variational inference getting more popular, we are defining more and more Gaussians in our model. My feature request would be to have a native Gaussian implementation in TensorFlow.\nUp to now, I re-use this code:\ndef tf_2d_normal(x1, x2, mu1, mu2, s1, s2, rho):\n  # eq # 24 and 25 of http://arxiv.org/abs/1308.0850\n  norm1 = tf.sub(x1, mu1)\n  norm2 = tf.sub(x2, mu2)\n  s1s2 = tf.mul(s1, s2)\n  z = tf.square(tf.div(norm1, s1))+tf.square(tf.div(norm2, s2))-2*tf.div(tf.mul(rho, tf.mul(norm1, norm2)), s1s2)\n  negRho = 1-tf.square(rho)\n  result = tf.exp(tf.div(-z,2*negRho))\n  denom = 2*np.pi*tf.mul(s1s2, tf.sqrt(negRho))\n  result = tf.div(result, denom)\n  return result\n\nHowever, it might be nice for Tensorflow to implement it in the library. They might be able to apply it more computationally efficient? Also, they might go for N-dimensional Gaussians, not only two.\nWhat do you think? Is this feasible?", "body": "Feature request:\n\nMixture Density networks, attention models and variational inference getting more popular, we are defining more and more Gaussians in our model. My feature request would be to have a native Gaussian implementation in TensorFlow.\n\nUp to now, I re-use [this](https://github.com/hardmaru/write-rnn-tensorflow/blob/master/model.py) code:\n\n```\ndef tf_2d_normal(x1, x2, mu1, mu2, s1, s2, rho):\n  # eq # 24 and 25 of http://arxiv.org/abs/1308.0850\n  norm1 = tf.sub(x1, mu1)\n  norm2 = tf.sub(x2, mu2)\n  s1s2 = tf.mul(s1, s2)\n  z = tf.square(tf.div(norm1, s1))+tf.square(tf.div(norm2, s2))-2*tf.div(tf.mul(rho, tf.mul(norm1, norm2)), s1s2)\n  negRho = 1-tf.square(rho)\n  result = tf.exp(tf.div(-z,2*negRho))\n  denom = 2*np.pi*tf.mul(s1s2, tf.sqrt(negRho))\n  result = tf.div(result, denom)\n  return result\n```\n\nHowever, it might be nice for Tensorflow to implement it in the library. They might be able to apply it more computationally efficient? Also, they might go for N-dimensional Gaussians, not only two.\n\nWhat do you think? Is this feasible?\n"}