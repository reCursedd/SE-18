{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6711", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6711/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6711/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6711/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/6711", "id": 199344785, "node_id": "MDU6SXNzdWUxOTkzNDQ3ODU=", "number": 6711, "title": "Android demo accuracy", "user": {"login": "milinddeore", "id": 1849168, "node_id": "MDQ6VXNlcjE4NDkxNjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1849168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milinddeore", "html_url": "https://github.com/milinddeore", "followers_url": "https://api.github.com/users/milinddeore/followers", "following_url": "https://api.github.com/users/milinddeore/following{/other_user}", "gists_url": "https://api.github.com/users/milinddeore/gists{/gist_id}", "starred_url": "https://api.github.com/users/milinddeore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milinddeore/subscriptions", "organizations_url": "https://api.github.com/users/milinddeore/orgs", "repos_url": "https://api.github.com/users/milinddeore/repos", "events_url": "https://api.github.com/users/milinddeore/events{/privacy}", "received_events_url": "https://api.github.com/users/milinddeore/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-07T06:13:10Z", "updated_at": "2017-01-09T16:53:14Z", "closed_at": "2017-01-07T19:15:54Z", "author_association": "NONE", "body_html": "<h3>What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?</h3>\n<p>I searched <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"135957980\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1269\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1269/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/1269\">#1269</a> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"121957609\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/504\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/504/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/504\">#504</a></p>\n<h3>Environment info</h3>\n<p>Mac OS for build and Android version 5 to run .apk demo.</p>\n<h3>If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)</h3>\n<p>I followed the steps mentioned in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"135957980\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1269\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1269/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/1269\">#1269</a> and could able to run the example successfully, but the accuracy of the result is very low and often wrong. I have trained my systems on 25 different daily used products like soap, soup, noodles, etc.<br>\nWhere as when i run the same example using following script it give me very high accuracy (approx. 90-95%)</p>\n<pre><code>import sys\nimport tensorflow as tf\n// change this as you see fit\nimage_path = sys.argv[1]\n\n// Read in the image_data\nimage_data = tf.gfile.FastGFile(image_path, 'rb').read()\n\n// Loads label file, strips off carriage return\nlabel_lines = [line.rstrip() for line \n                   in tf.gfile.GFile(\"/tf_files/retrained_labels.txt\")]\n\n// Unpersists graph from file\nwith tf.gfile.FastGFile(\"/tf_files/retrained_graph.pb\", 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    _ = tf.import_graph_def(graph_def, name='')\n\nwith tf.Session() as sess:\n    // Feed the image_data as input to the graph and get first prediction\n    softmax_tensor = sess.graph.get_tensor_by_name('final_result:0')\n    \n    predictions = sess.run(softmax_tensor, \\\n             {'DecodeJpeg/contents:0': image_data})\n    \n    // Sort to show labels of first prediction in order of confidence\n    top_k = predictions[0].argsort()[-len(predictions[0]):][::-1]\n    \n    for node_id in top_k:\n        human_string = label_lines[node_id]\n        score = predictions[0][node_id]\n        print('%s (score = %.5f)' % (human_string, score))\n</code></pre>\n<p>The only difference i see here is that the model file used in the android demo is stripped because it does not support DecodeJpeg, whereas in the above code its the actually generated unstripped model. Is there any specific reason or somewhere i am wrong here?</p>\n<h3>What other attempted solutions have you tried?</h3>\n<p>Yes, i the above script and it gives me quite high accuracy result.</p>", "body_text": "What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\nI searched #1269 #504\nEnvironment info\nMac OS for build and Android version 5 to run .apk demo.\nIf possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\nI followed the steps mentioned in #1269 and could able to run the example successfully, but the accuracy of the result is very low and often wrong. I have trained my systems on 25 different daily used products like soap, soup, noodles, etc.\nWhere as when i run the same example using following script it give me very high accuracy (approx. 90-95%)\nimport sys\nimport tensorflow as tf\n// change this as you see fit\nimage_path = sys.argv[1]\n\n// Read in the image_data\nimage_data = tf.gfile.FastGFile(image_path, 'rb').read()\n\n// Loads label file, strips off carriage return\nlabel_lines = [line.rstrip() for line \n                   in tf.gfile.GFile(\"/tf_files/retrained_labels.txt\")]\n\n// Unpersists graph from file\nwith tf.gfile.FastGFile(\"/tf_files/retrained_graph.pb\", 'rb') as f:\n    graph_def = tf.GraphDef()\n    graph_def.ParseFromString(f.read())\n    _ = tf.import_graph_def(graph_def, name='')\n\nwith tf.Session() as sess:\n    // Feed the image_data as input to the graph and get first prediction\n    softmax_tensor = sess.graph.get_tensor_by_name('final_result:0')\n    \n    predictions = sess.run(softmax_tensor, \\\n             {'DecodeJpeg/contents:0': image_data})\n    \n    // Sort to show labels of first prediction in order of confidence\n    top_k = predictions[0].argsort()[-len(predictions[0]):][::-1]\n    \n    for node_id in top_k:\n        human_string = label_lines[node_id]\n        score = predictions[0][node_id]\n        print('%s (score = %.5f)' % (human_string, score))\n\nThe only difference i see here is that the model file used in the android demo is stripped because it does not support DecodeJpeg, whereas in the above code its the actually generated unstripped model. Is there any specific reason or somewhere i am wrong here?\nWhat other attempted solutions have you tried?\nYes, i the above script and it gives me quite high accuracy result.", "body": "### What related GitHub issues or StackOverflow threads have you found by searching the web for your problem?\r\nI searched #1269 #504 \r\n\r\n### Environment info\r\nMac OS for build and Android version 5 to run .apk demo.   \r\n\r\n### If possible, provide a minimal reproducible example (We usually don't have time to read hundreds of lines of your code)\r\n\r\nI followed the steps mentioned in #1269 and could able to run the example successfully, but the accuracy of the result is very low and often wrong. I have trained my systems on 25 different daily used products like soap, soup, noodles, etc. \r\nWhere as when i run the same example using following script it give me very high accuracy (approx. 90-95%)\r\n\r\n```\r\nimport sys\r\nimport tensorflow as tf\r\n// change this as you see fit\r\nimage_path = sys.argv[1]\r\n\r\n// Read in the image_data\r\nimage_data = tf.gfile.FastGFile(image_path, 'rb').read()\r\n\r\n// Loads label file, strips off carriage return\r\nlabel_lines = [line.rstrip() for line \r\n                   in tf.gfile.GFile(\"/tf_files/retrained_labels.txt\")]\r\n\r\n// Unpersists graph from file\r\nwith tf.gfile.FastGFile(\"/tf_files/retrained_graph.pb\", 'rb') as f:\r\n    graph_def = tf.GraphDef()\r\n    graph_def.ParseFromString(f.read())\r\n    _ = tf.import_graph_def(graph_def, name='')\r\n\r\nwith tf.Session() as sess:\r\n    // Feed the image_data as input to the graph and get first prediction\r\n    softmax_tensor = sess.graph.get_tensor_by_name('final_result:0')\r\n    \r\n    predictions = sess.run(softmax_tensor, \\\r\n             {'DecodeJpeg/contents:0': image_data})\r\n    \r\n    // Sort to show labels of first prediction in order of confidence\r\n    top_k = predictions[0].argsort()[-len(predictions[0]):][::-1]\r\n    \r\n    for node_id in top_k:\r\n        human_string = label_lines[node_id]\r\n        score = predictions[0][node_id]\r\n        print('%s (score = %.5f)' % (human_string, score))\r\n```\r\n\r\nThe only difference i see here is that the model file used in the android demo is stripped because it does not support DecodeJpeg, whereas in the above code its the actually generated unstripped model. Is there any specific reason or somewhere i am wrong here? \r\n\r\n### What other attempted solutions have you tried?\r\nYes, i the above script and it gives me quite high accuracy result. \r\n"}