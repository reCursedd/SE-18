{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23615", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23615/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23615/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23615/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/23615", "id": 379029274, "node_id": "MDU6SXNzdWUzNzkwMjkyNzQ=", "number": 23615, "title": "XLA does not know associative law", "user": {"login": "hzhangxyz", "id": 11623447, "node_id": "MDQ6VXNlcjExNjIzNDQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/11623447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hzhangxyz", "html_url": "https://github.com/hzhangxyz", "followers_url": "https://api.github.com/users/hzhangxyz/followers", "following_url": "https://api.github.com/users/hzhangxyz/following{/other_user}", "gists_url": "https://api.github.com/users/hzhangxyz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hzhangxyz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hzhangxyz/subscriptions", "organizations_url": "https://api.github.com/users/hzhangxyz/orgs", "repos_url": "https://api.github.com/users/hzhangxyz/repos", "events_url": "https://api.github.com/users/hzhangxyz/events{/privacy}", "received_events_url": "https://api.github.com/users/hzhangxyz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1133285679, "node_id": "MDU6TGFiZWwxMTMzMjg1Njc5", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/comp:xla", "name": "comp:xla", "color": "0052cc", "default": false}, {"id": 404586594, "node_id": "MDU6TGFiZWw0MDQ1ODY1OTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/stat:awaiting%20tensorflower", "name": "stat:awaiting tensorflower", "color": "f4b400", "default": false}], "state": "open", "locked": false, "assignee": {"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "tatatodd", "id": 5453737, "node_id": "MDQ6VXNlcjU0NTM3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tatatodd", "html_url": "https://github.com/tatatodd", "followers_url": "https://api.github.com/users/tatatodd/followers", "following_url": "https://api.github.com/users/tatatodd/following{/other_user}", "gists_url": "https://api.github.com/users/tatatodd/gists{/gist_id}", "starred_url": "https://api.github.com/users/tatatodd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tatatodd/subscriptions", "organizations_url": "https://api.github.com/users/tatatodd/orgs", "repos_url": "https://api.github.com/users/tatatodd/repos", "events_url": "https://api.github.com/users/tatatodd/events{/privacy}", "received_events_url": "https://api.github.com/users/tatatodd/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-11-09T05:34:10Z", "updated_at": "2018-11-19T19:44:01Z", "closed_at": null, "author_association": "NONE", "body_html": "<p><strong>System information</strong></p>\n<ul>\n<li>Have I written custom code (as opposed to using a stock example script provided in TensorFlow): <strong>No</strong></li>\n<li>OS Platform and Distribution (e.g., Linux Ubuntu 16.04): <strong>Arch Linux</strong></li>\n<li>TensorFlow installed from (source or binary): <strong>binary</strong></li>\n<li>TensorFlow version (use command below): <strong>1.11.0</strong></li>\n<li>Python version: <strong>3.7.1</strong></li>\n</ul>\n<p>You can collect some of this information using our environment capture <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh\">script</a><br>\noutput:</p>\n<pre><code>\n== cat /etc/issue ===============================================\nLinux ZHANGHAO 4.18.16-arch1-1-ARCH #1 SMP PREEMPT Sat Oct 20 22:06:45 UTC 2018 x86_64 GNU/Linux\n\n== are we in docker =============================================\nNo\n\n== compiler =====================================================\nc++ (GCC) 8.2.1 20180831\nCopyright \u00a9 2018 Free Software Foundation, Inc.\n\u672c\u7a0b\u5e8f\u662f\u81ea\u7531\u8f6f\u4ef6\uff1b\u8bf7\u53c2\u770b\u6e90\u4ee3\u7801\u7684\u7248\u6743\u58f0\u660e\u3002\u672c\u8f6f\u4ef6\u6ca1\u6709\u4efb\u4f55\u62c5\u4fdd\uff1b\n\u5305\u62ec\u6ca1\u6709\u9002\u9500\u6027\u548c\u67d0\u4e00\u4e13\u7528\u76ee\u7684\u4e0b\u7684\u9002\u7528\u6027\u62c5\u4fdd\u3002\n\n== uname -a =====================================================\nLinux ZHANGHAO 4.18.16-arch1-1-ARCH #1 SMP PREEMPT Sat Oct 20 22:06:45 UTC 2018 x86_64 GNU/Linux\n\n== check pips ===================================================\n\n== check for virtualenv =========================================\nFalse\n\n== tensorflow import ============================================\ntf.VERSION = 1.11.0\ntf.GIT_VERSION = b'unknown'\ntf.COMPILER_VERSION = b'unknown'\nSanity check: array([1], dtype=int32)\n\n== env ==========================================================\nLD_LIBRARY_PATH is unset\nDYLD_LIBRARY_PATH is unset\n\n== nvidia-smi ===================================================\n./tf_env_collect.sh:\u884c105: nvidia-smi: \u672a\u627e\u5230\u547d\u4ee4\n\n== cuda libs  ===================================================\n</code></pre>\n<p>You can also obtain the TensorFlow version with<br>\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"<br>\noutput: <code>b'unknown' 1.11.0</code></p>\n<p><strong>Describe the current behavior</strong><br>\nsource code:<br>\nmain.py</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> sys\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nN <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10000</span>\nn <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>\n\na <span class=\"pl-k\">=</span> tf.random_normal([N,n])\nb <span class=\"pl-k\">=</span> tf.random_normal([N,n])\nc <span class=\"pl-k\">=</span> tf.random_normal([N,n])\nd <span class=\"pl-k\">=</span> tf.random_normal([N,n])\n\nX1 <span class=\"pl-k\">=</span> tf.tensordot(a,b,[[<span class=\"pl-c1\">1</span>],[<span class=\"pl-c1\">1</span>]],<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>X1<span class=\"pl-pds\">'</span></span>)\nY1 <span class=\"pl-k\">=</span> tf.tensordot(c,d,[[<span class=\"pl-c1\">1</span>],[<span class=\"pl-c1\">1</span>]],<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Y1<span class=\"pl-pds\">'</span></span>)\nZ1 <span class=\"pl-k\">=</span> tf.tensordot(X1,Y1,[[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>],[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>]],<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Z1<span class=\"pl-pds\">'</span></span>)\n\nX2 <span class=\"pl-k\">=</span> tf.tensordot(a,c,[[<span class=\"pl-c1\">0</span>],[<span class=\"pl-c1\">0</span>]],<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>X2<span class=\"pl-pds\">'</span></span>)\nY2 <span class=\"pl-k\">=</span> tf.tensordot(b,d,[[<span class=\"pl-c1\">0</span>],[<span class=\"pl-c1\">0</span>]],<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Y2<span class=\"pl-pds\">'</span></span>)\nZ2 <span class=\"pl-k\">=</span> tf.tensordot(X2,Y2,[[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>],[<span class=\"pl-c1\">0</span>,<span class=\"pl-c1\">1</span>]],<span class=\"pl-v\">name</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>Z2<span class=\"pl-pds\">'</span></span>)\n\nconfig <span class=\"pl-k\">=</span> tf.ConfigProto()\nconfig.graph_options.optimizer_options.global_jit_level <span class=\"pl-k\">=</span> tf.OptimizerOptions.<span class=\"pl-c1\">ON_1</span>\n\nsess <span class=\"pl-k\">=</span> tf.Session(<span class=\"pl-v\">config</span><span class=\"pl-k\">=</span>config)\n\n<span class=\"pl-k\">if</span> sys.argv[<span class=\"pl-c1\">1</span>] <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>1<span class=\"pl-pds\">'</span></span>:\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>):\n        <span class=\"pl-c1\">print</span>(sess.run(Z1))\n\n<span class=\"pl-k\">if</span> sys.argv[<span class=\"pl-c1\">1</span>] <span class=\"pl-k\">==</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>2<span class=\"pl-pds\">'</span></span>:\n    <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>):\n        <span class=\"pl-c1\">print</span>(sess.run(Z2))</pre></div>\n<p>when run <code>time python main.py 1</code> and  <code>time python main.py 2</code>, get 4.6s and 1.2s</p>\n<p><strong>Describe the expected behavior</strong><br>\nIn fact Z1 and Z2 should be the same, hope there is some method to optimize Z1, since in my program, there are many similar situation. consider order of tensor contract is too complicated</p>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): No\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux\nTensorFlow installed from (source or binary): binary\nTensorFlow version (use command below): 1.11.0\nPython version: 3.7.1\n\nYou can collect some of this information using our environment capture script\noutput:\n\n== cat /etc/issue ===============================================\nLinux ZHANGHAO 4.18.16-arch1-1-ARCH #1 SMP PREEMPT Sat Oct 20 22:06:45 UTC 2018 x86_64 GNU/Linux\n\n== are we in docker =============================================\nNo\n\n== compiler =====================================================\nc++ (GCC) 8.2.1 20180831\nCopyright \u00a9 2018 Free Software Foundation, Inc.\n\u672c\u7a0b\u5e8f\u662f\u81ea\u7531\u8f6f\u4ef6\uff1b\u8bf7\u53c2\u770b\u6e90\u4ee3\u7801\u7684\u7248\u6743\u58f0\u660e\u3002\u672c\u8f6f\u4ef6\u6ca1\u6709\u4efb\u4f55\u62c5\u4fdd\uff1b\n\u5305\u62ec\u6ca1\u6709\u9002\u9500\u6027\u548c\u67d0\u4e00\u4e13\u7528\u76ee\u7684\u4e0b\u7684\u9002\u7528\u6027\u62c5\u4fdd\u3002\n\n== uname -a =====================================================\nLinux ZHANGHAO 4.18.16-arch1-1-ARCH #1 SMP PREEMPT Sat Oct 20 22:06:45 UTC 2018 x86_64 GNU/Linux\n\n== check pips ===================================================\n\n== check for virtualenv =========================================\nFalse\n\n== tensorflow import ============================================\ntf.VERSION = 1.11.0\ntf.GIT_VERSION = b'unknown'\ntf.COMPILER_VERSION = b'unknown'\nSanity check: array([1], dtype=int32)\n\n== env ==========================================================\nLD_LIBRARY_PATH is unset\nDYLD_LIBRARY_PATH is unset\n\n== nvidia-smi ===================================================\n./tf_env_collect.sh:\u884c105: nvidia-smi: \u672a\u627e\u5230\u547d\u4ee4\n\n== cuda libs  ===================================================\n\nYou can also obtain the TensorFlow version with\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\noutput: b'unknown' 1.11.0\nDescribe the current behavior\nsource code:\nmain.py\nimport sys\nimport tensorflow as tf\n\nN = 10000\nn = 10\n\na = tf.random_normal([N,n])\nb = tf.random_normal([N,n])\nc = tf.random_normal([N,n])\nd = tf.random_normal([N,n])\n\nX1 = tf.tensordot(a,b,[[1],[1]],name='X1')\nY1 = tf.tensordot(c,d,[[1],[1]],name='Y1')\nZ1 = tf.tensordot(X1,Y1,[[0,1],[0,1]],name='Z1')\n\nX2 = tf.tensordot(a,c,[[0],[0]],name='X2')\nY2 = tf.tensordot(b,d,[[0],[0]],name='Y2')\nZ2 = tf.tensordot(X2,Y2,[[0,1],[0,1]],name='Z2')\n\nconfig = tf.ConfigProto()\nconfig.graph_options.optimizer_options.global_jit_level = tf.OptimizerOptions.ON_1\n\nsess = tf.Session(config=config)\n\nif sys.argv[1] == '1':\n    for i in range(10):\n        print(sess.run(Z1))\n\nif sys.argv[1] == '2':\n    for i in range(10):\n        print(sess.run(Z2))\nwhen run time python main.py 1 and  time python main.py 2, get 4.6s and 1.2s\nDescribe the expected behavior\nIn fact Z1 and Z2 should be the same, hope there is some method to optimize Z1, since in my program, there are many similar situation. consider order of tensor contract is too complicated", "body": "**System information**\r\n- Have I written custom code (as opposed to using a stock example script provided in TensorFlow): **No**\r\n- OS Platform and Distribution (e.g., Linux Ubuntu 16.04): **Arch Linux**\r\n- TensorFlow installed from (source or binary): **binary**\r\n- TensorFlow version (use command below): **1.11.0**\r\n- Python version: **3.7.1**\r\n\r\nYou can collect some of this information using our environment capture [script](https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh)\r\noutput: \r\n```\r\n\r\n== cat /etc/issue ===============================================\r\nLinux ZHANGHAO 4.18.16-arch1-1-ARCH #1 SMP PREEMPT Sat Oct 20 22:06:45 UTC 2018 x86_64 GNU/Linux\r\n\r\n== are we in docker =============================================\r\nNo\r\n\r\n== compiler =====================================================\r\nc++ (GCC) 8.2.1 20180831\r\nCopyright \u00a9 2018 Free Software Foundation, Inc.\r\n\u672c\u7a0b\u5e8f\u662f\u81ea\u7531\u8f6f\u4ef6\uff1b\u8bf7\u53c2\u770b\u6e90\u4ee3\u7801\u7684\u7248\u6743\u58f0\u660e\u3002\u672c\u8f6f\u4ef6\u6ca1\u6709\u4efb\u4f55\u62c5\u4fdd\uff1b\r\n\u5305\u62ec\u6ca1\u6709\u9002\u9500\u6027\u548c\u67d0\u4e00\u4e13\u7528\u76ee\u7684\u4e0b\u7684\u9002\u7528\u6027\u62c5\u4fdd\u3002\r\n\r\n== uname -a =====================================================\r\nLinux ZHANGHAO 4.18.16-arch1-1-ARCH #1 SMP PREEMPT Sat Oct 20 22:06:45 UTC 2018 x86_64 GNU/Linux\r\n\r\n== check pips ===================================================\r\n\r\n== check for virtualenv =========================================\r\nFalse\r\n\r\n== tensorflow import ============================================\r\ntf.VERSION = 1.11.0\r\ntf.GIT_VERSION = b'unknown'\r\ntf.COMPILER_VERSION = b'unknown'\r\nSanity check: array([1], dtype=int32)\r\n\r\n== env ==========================================================\r\nLD_LIBRARY_PATH is unset\r\nDYLD_LIBRARY_PATH is unset\r\n\r\n== nvidia-smi ===================================================\r\n./tf_env_collect.sh:\u884c105: nvidia-smi: \u672a\u627e\u5230\u547d\u4ee4\r\n\r\n== cuda libs  ===================================================\r\n```\r\n\r\nYou can also obtain the TensorFlow version with\r\npython -c \"import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)\"\r\noutput: `b'unknown' 1.11.0`\r\n\r\n**Describe the current behavior**\r\nsource code:\r\nmain.py\r\n```python\r\nimport sys\r\nimport tensorflow as tf\r\n\r\nN = 10000\r\nn = 10\r\n\r\na = tf.random_normal([N,n])\r\nb = tf.random_normal([N,n])\r\nc = tf.random_normal([N,n])\r\nd = tf.random_normal([N,n])\r\n\r\nX1 = tf.tensordot(a,b,[[1],[1]],name='X1')\r\nY1 = tf.tensordot(c,d,[[1],[1]],name='Y1')\r\nZ1 = tf.tensordot(X1,Y1,[[0,1],[0,1]],name='Z1')\r\n\r\nX2 = tf.tensordot(a,c,[[0],[0]],name='X2')\r\nY2 = tf.tensordot(b,d,[[0],[0]],name='Y2')\r\nZ2 = tf.tensordot(X2,Y2,[[0,1],[0,1]],name='Z2')\r\n\r\nconfig = tf.ConfigProto()\r\nconfig.graph_options.optimizer_options.global_jit_level = tf.OptimizerOptions.ON_1\r\n\r\nsess = tf.Session(config=config)\r\n\r\nif sys.argv[1] == '1':\r\n    for i in range(10):\r\n        print(sess.run(Z1))\r\n\r\nif sys.argv[1] == '2':\r\n    for i in range(10):\r\n        print(sess.run(Z2))\r\n```\r\nwhen run `time python main.py 1` and  `time python main.py 2`, get 4.6s and 1.2s\r\n\r\n**Describe the expected behavior**\r\nIn fact Z1 and Z2 should be the same, hope there is some method to optimize Z1, since in my program, there are many similar situation. consider order of tensor contract is too complicated"}