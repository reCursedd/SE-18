{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/379908599", "html_url": "https://github.com/tensorflow/tensorflow/issues/18247#issuecomment-379908599", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18247", "id": 379908599, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTkwODU5OQ==", "user": {"login": "zmjjmz", "id": 1694612, "node_id": "MDQ6VXNlcjE2OTQ2MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1694612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmjjmz", "html_url": "https://github.com/zmjjmz", "followers_url": "https://api.github.com/users/zmjjmz/followers", "following_url": "https://api.github.com/users/zmjjmz/following{/other_user}", "gists_url": "https://api.github.com/users/zmjjmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmjjmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmjjmz/subscriptions", "organizations_url": "https://api.github.com/users/zmjjmz/orgs", "repos_url": "https://api.github.com/users/zmjjmz/repos", "events_url": "https://api.github.com/users/zmjjmz/events{/privacy}", "received_events_url": "https://api.github.com/users/zmjjmz/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-09T22:06:01Z", "updated_at": "2018-04-09T22:12:44Z", "author_association": "NONE", "body_html": "<p>Actually this is largely due to trying to use keras with Amazon SageMaker. As far as I can tell, I don't have access to the actual train call when using the SageMaker API (afaict), and as such am putting hooks in the <code>EstimatorSpec</code> initializer.</p>\n<p>My current (broken) keras model function as such looks a bit like this:</p>\n<pre><code>def create_basic_keras_model_fn(model_class):                                                                                                       \n    def model_fn(features, labels, mode, params):                                                          \n        inp_placeholder = features[inp_name]                                                           \n        model_artifacts = serialization_utils.load_cPkl(artifacts_location)                                \n        model_builder = model_class(model_artifacts, **model_parameters)                                   \n        model_builder.build_model(inp_placeholder)                                                         \n        tensors = model_builder.give_outputs()                                                             \n        model = keras.models.Model(inputs=[inp_placeholder], outputs=tensors.values())                     \n                                                                                                                                                                                            \n        model.compile(**compile_spec)                                                                      \n                                                                                                           \n        # call _create_keras_model_fn                                                                      \n        # we'll pass our features labels mode etc. thru to the resulting model_fn to get our EstimatorSpec \n        # this hurts my head but makes sense                                                               \n        keras_model_fn = _create_keras_model_fn(model, custom_objects=ml_utils.KERAS_CUSTOM_LAYERS)        \n        return keras_model_fn(features, labels, mode)                                                      \n</code></pre>\n<p>As such I don't really have direct access to the EstimatorSpec, so I can't call that <code>_replace</code> method there.</p>\n<blockquote>\n<p>Since that behavior does not need a hook or Scaffold</p>\n</blockquote>\n<p>Can I add hooks and such to the keras model itself prior to the conversion? That would definitely solve my issue, however I don't know if it's possible. I know I can add Callbacks, but I don't think those are easily converted to hooks (but I really wish they were).</p>\n<p>Also I'm not sure what you mean by <code>head = pick_a_reasonable_head_from_tf.contrib.estimator</code> -- is that this? <a href=\"https://www.tensorflow.org/api_docs/python/tf/contrib/learn/Head\" rel=\"nofollow\">https://www.tensorflow.org/api_docs/python/tf/contrib/learn/Head</a></p>\n<p>EDIT: Actually, yeah, I think I see what you're saying here -- that workaround would work (even if it uses <code>EstimatorSpec._replace</code> which is a bit sketch) however I'm still not sure what you mean by the head.</p>", "body_text": "Actually this is largely due to trying to use keras with Amazon SageMaker. As far as I can tell, I don't have access to the actual train call when using the SageMaker API (afaict), and as such am putting hooks in the EstimatorSpec initializer.\nMy current (broken) keras model function as such looks a bit like this:\ndef create_basic_keras_model_fn(model_class):                                                                                                       \n    def model_fn(features, labels, mode, params):                                                          \n        inp_placeholder = features[inp_name]                                                           \n        model_artifacts = serialization_utils.load_cPkl(artifacts_location)                                \n        model_builder = model_class(model_artifacts, **model_parameters)                                   \n        model_builder.build_model(inp_placeholder)                                                         \n        tensors = model_builder.give_outputs()                                                             \n        model = keras.models.Model(inputs=[inp_placeholder], outputs=tensors.values())                     \n                                                                                                                                                                                            \n        model.compile(**compile_spec)                                                                      \n                                                                                                           \n        # call _create_keras_model_fn                                                                      \n        # we'll pass our features labels mode etc. thru to the resulting model_fn to get our EstimatorSpec \n        # this hurts my head but makes sense                                                               \n        keras_model_fn = _create_keras_model_fn(model, custom_objects=ml_utils.KERAS_CUSTOM_LAYERS)        \n        return keras_model_fn(features, labels, mode)                                                      \n\nAs such I don't really have direct access to the EstimatorSpec, so I can't call that _replace method there.\n\nSince that behavior does not need a hook or Scaffold\n\nCan I add hooks and such to the keras model itself prior to the conversion? That would definitely solve my issue, however I don't know if it's possible. I know I can add Callbacks, but I don't think those are easily converted to hooks (but I really wish they were).\nAlso I'm not sure what you mean by head = pick_a_reasonable_head_from_tf.contrib.estimator -- is that this? https://www.tensorflow.org/api_docs/python/tf/contrib/learn/Head\nEDIT: Actually, yeah, I think I see what you're saying here -- that workaround would work (even if it uses EstimatorSpec._replace which is a bit sketch) however I'm still not sure what you mean by the head.", "body": "Actually this is largely due to trying to use keras with Amazon SageMaker. As far as I can tell, I don't have access to the actual train call when using the SageMaker API (afaict), and as such am putting hooks in the `EstimatorSpec` initializer. \r\n\r\nMy current (broken) keras model function as such looks a bit like this:\r\n\r\n```\r\ndef create_basic_keras_model_fn(model_class):                                                                                                       \r\n    def model_fn(features, labels, mode, params):                                                          \r\n        inp_placeholder = features[inp_name]                                                           \r\n        model_artifacts = serialization_utils.load_cPkl(artifacts_location)                                \r\n        model_builder = model_class(model_artifacts, **model_parameters)                                   \r\n        model_builder.build_model(inp_placeholder)                                                         \r\n        tensors = model_builder.give_outputs()                                                             \r\n        model = keras.models.Model(inputs=[inp_placeholder], outputs=tensors.values())                     \r\n                                                                                                                                                                                            \r\n        model.compile(**compile_spec)                                                                      \r\n                                                                                                           \r\n        # call _create_keras_model_fn                                                                      \r\n        # we'll pass our features labels mode etc. thru to the resulting model_fn to get our EstimatorSpec \r\n        # this hurts my head but makes sense                                                               \r\n        keras_model_fn = _create_keras_model_fn(model, custom_objects=ml_utils.KERAS_CUSTOM_LAYERS)        \r\n        return keras_model_fn(features, labels, mode)                                                      \r\n```\r\n\r\nAs such I don't really have direct access to the EstimatorSpec, so I can't call that `_replace` method there.\r\n\r\n> Since that behavior does not need a hook or Scaffold\r\n\r\nCan I add hooks and such to the keras model itself prior to the conversion? That would definitely solve my issue, however I don't know if it's possible. I know I can add Callbacks, but I don't think those are easily converted to hooks (but I really wish they were).\r\n\r\nAlso I'm not sure what you mean by `head = pick_a_reasonable_head_from_tf.contrib.estimator` -- is that this? https://www.tensorflow.org/api_docs/python/tf/contrib/learn/Head\r\n\r\nEDIT: Actually, yeah, I think I see what you're saying here -- that workaround would work (even if it uses `EstimatorSpec._replace` which is a bit sketch) however I'm still not sure what you mean by the head."}