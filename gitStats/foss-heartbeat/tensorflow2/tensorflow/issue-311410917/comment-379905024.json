{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/379905024", "html_url": "https://github.com/tensorflow/tensorflow/issues/18247#issuecomment-379905024", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/18247", "id": 379905024, "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTkwNTAyNA==", "user": {"login": "ispirmustafa", "id": 19293677, "node_id": "MDQ6VXNlcjE5MjkzNjc3", "avatar_url": "https://avatars1.githubusercontent.com/u/19293677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ispirmustafa", "html_url": "https://github.com/ispirmustafa", "followers_url": "https://api.github.com/users/ispirmustafa/followers", "following_url": "https://api.github.com/users/ispirmustafa/following{/other_user}", "gists_url": "https://api.github.com/users/ispirmustafa/gists{/gist_id}", "starred_url": "https://api.github.com/users/ispirmustafa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ispirmustafa/subscriptions", "organizations_url": "https://api.github.com/users/ispirmustafa/orgs", "repos_url": "https://api.github.com/users/ispirmustafa/repos", "events_url": "https://api.github.com/users/ispirmustafa/events{/privacy}", "received_events_url": "https://api.github.com/users/ispirmustafa/received_events", "type": "User", "site_admin": false}, "created_at": "2018-04-09T21:50:06Z", "updated_at": "2018-04-09T21:50:06Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=1694612\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/zmjjmz\">@zmjjmz</a><br>\nCould you please elaborate on use cases?</p>\n<p>My current thinking is as follows, it may change based on your use case:</p>\n<p>model_to_estimator recreates the same model within an estimator. Since that behavior does not need a hook or Scaffold, we should not add such an argument to model_to_estimator.</p>\n<p>you can add hooks when you call the estimator.train(..., hooks=) or evaluate</p>\n<p>If you need to play with hooks, scaffold and other estimator spec parameter I would recommend writing your model_fn which should not be that complicated. Here is the pseudo code:<br>\ndef model_fn(features, labels, mode):<br>\nmodel = create_your_keras_model<br>\nlogits = model(features)<br>\nhead = pick_a_reasonable_head_from_tf.contrib.estimator<br>\nspec = head.create_estimator_spec(...)<br>\nreturn spec._replace(scaffold=..., training_hooks=...)</p>", "body_text": "Hi @zmjjmz\nCould you please elaborate on use cases?\nMy current thinking is as follows, it may change based on your use case:\nmodel_to_estimator recreates the same model within an estimator. Since that behavior does not need a hook or Scaffold, we should not add such an argument to model_to_estimator.\nyou can add hooks when you call the estimator.train(..., hooks=) or evaluate\nIf you need to play with hooks, scaffold and other estimator spec parameter I would recommend writing your model_fn which should not be that complicated. Here is the pseudo code:\ndef model_fn(features, labels, mode):\nmodel = create_your_keras_model\nlogits = model(features)\nhead = pick_a_reasonable_head_from_tf.contrib.estimator\nspec = head.create_estimator_spec(...)\nreturn spec._replace(scaffold=..., training_hooks=...)", "body": "Hi @zmjjmz \r\nCould you please elaborate on use cases?\r\n\r\nMy current thinking is as follows, it may change based on your use case:\r\n\r\nmodel_to_estimator recreates the same model within an estimator. Since that behavior does not need a hook or Scaffold, we should not add such an argument to model_to_estimator.\r\n\r\nyou can add hooks when you call the estimator.train(..., hooks=) or evaluate\r\n\r\nIf you need to play with hooks, scaffold and other estimator spec parameter I would recommend writing your model_fn which should not be that complicated. Here is the pseudo code:\r\ndef model_fn(features, labels, mode):\r\n  model = create_your_keras_model\r\n  logits = model(features)\r\n  head = pick_a_reasonable_head_from_tf.contrib.estimator\r\n  spec = head.create_estimator_spec(...)\r\n  return spec._replace(scaffold=..., training_hooks=...)"}