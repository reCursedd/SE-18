{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13636", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13636/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13636/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13636/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/13636", "id": 264627447, "node_id": "MDU6SXNzdWUyNjQ2Mjc0NDc=", "number": 13636, "title": "get_shape() does not work for output of tf.image.resize_nearest_neighbor()", "user": {"login": "DEKHTIARJonathan", "id": 10923599, "node_id": "MDQ6VXNlcjEwOTIzNTk5", "avatar_url": "https://avatars2.githubusercontent.com/u/10923599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DEKHTIARJonathan", "html_url": "https://github.com/DEKHTIARJonathan", "followers_url": "https://api.github.com/users/DEKHTIARJonathan/followers", "following_url": "https://api.github.com/users/DEKHTIARJonathan/following{/other_user}", "gists_url": "https://api.github.com/users/DEKHTIARJonathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/DEKHTIARJonathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DEKHTIARJonathan/subscriptions", "organizations_url": "https://api.github.com/users/DEKHTIARJonathan/orgs", "repos_url": "https://api.github.com/users/DEKHTIARJonathan/repos", "events_url": "https://api.github.com/users/DEKHTIARJonathan/events{/privacy}", "received_events_url": "https://api.github.com/users/DEKHTIARJonathan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-11T15:15:17Z", "updated_at": "2017-10-12T01:51:17Z", "closed_at": "2017-10-12T01:51:17Z", "author_association": "CONTRIBUTOR", "body_html": "<p>Hello everyone,</p>\n<p>Following the issue  <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"210604405\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/7932\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/7932/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/7932\">#7932</a>, I have also noticed that get_shape() does not work when using<br>\ntf.image.resize_nearest_neighbor().</p>\n<p>I use linux 16.06 and TF in [1.3.0, 1.3.1, 1.4.0-dev20171008] and I have the same error.</p>\n<p>The error is quite easy to understand. The fact that tf.image.resize_nearest_neighbor is unable to compute correctly <strong>get_shape</strong> leads to some problematic behavior.</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> numpy <span class=\"pl-k\">as</span> np\n<span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n\nx <span class=\"pl-k\">=</span> tf.placeholder(tf.float32, [<span class=\"pl-c1\">None</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">1</span>])\n\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>x_shape:<span class=\"pl-pds\">\"</span></span>, x.get_shape()) <span class=\"pl-c\"><span class=\"pl-c\">#</span> x_shape: (?, 32, 32, 1)</span>\n\ninput_shape <span class=\"pl-k\">=</span> tf.shape(x)[<span class=\"pl-c1\">1</span>:<span class=\"pl-c1\">3</span>]\nnewsize     <span class=\"pl-k\">=</span> tf.multiply(input_shape, (<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">2</span>)) <span class=\"pl-c\"><span class=\"pl-c\">#</span> gives (64, 64)</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>###################</span>\n\nresized_data <span class=\"pl-k\">=</span> tf.image.resize_nearest_neighbor(\n    <span class=\"pl-v\">images</span>        <span class=\"pl-k\">=</span> x,\n    <span class=\"pl-v\">size</span>          <span class=\"pl-k\">=</span> newsize,\n    <span class=\"pl-v\">align_corners</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span>,\n    <span class=\"pl-v\">name</span>          <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span>\n)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>resized_data:<span class=\"pl-pds\">\"</span></span>, resized_data.get_shape()) <span class=\"pl-c\"><span class=\"pl-c\">#</span> resized_data: (?, ?, ?, 1)</span>\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>################### NOW THE PROBLEMATIC #################</span>\n\nflatten_tensor <span class=\"pl-k\">=</span> tf.contrib.layers.flatten(<span class=\"pl-v\">inputs</span> <span class=\"pl-k\">=</span> resized_data)\n<span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>flatten_tensor:<span class=\"pl-pds\">\"</span></span>, flatten_tensor.get_shape()) <span class=\"pl-c\"><span class=\"pl-c\">#</span> resized_data: (?, ?)</span>\n\nfailing_layer <span class=\"pl-k\">=</span> tf.contrib.layers.fully_connected(\n    <span class=\"pl-v\">inputs</span>        <span class=\"pl-k\">=</span> flatten_tensor,\n    <span class=\"pl-v\">num_outputs</span>   <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>,\n    <span class=\"pl-v\">activation_fn</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">None</span>\n)\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>#############################################</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>############ LAUNCH THE SESSION #############</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>#############################################</span>\n\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n    rslt <span class=\"pl-k\">=</span> sess.run(resized_data, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x: np.ones((<span class=\"pl-c1\">666</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">32</span>,<span class=\"pl-c1\">1</span>))})\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Rslt Shape:<span class=\"pl-pds\">\"</span></span>, rslt.shape)\n    \n    failing_layer <span class=\"pl-k\">=</span> sess.run(failing_layer, <span class=\"pl-v\">feed_dict</span><span class=\"pl-k\">=</span>{x: np.ones((<span class=\"pl-c1\">666</span>, <span class=\"pl-c1\">32</span>, <span class=\"pl-c1\">32</span>,<span class=\"pl-c1\">1</span>))})\n    <span class=\"pl-c1\">print</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>failing_layer Shape:<span class=\"pl-pds\">\"</span></span>, failing_layer.shape)</pre></div>\n<p>For information, it is absolutely to launch the session with the FC layer in the script, it completely fails.</p>", "body_text": "Hello everyone,\nFollowing the issue  #7932, I have also noticed that get_shape() does not work when using\ntf.image.resize_nearest_neighbor().\nI use linux 16.06 and TF in [1.3.0, 1.3.1, 1.4.0-dev20171008] and I have the same error.\nThe error is quite easy to understand. The fact that tf.image.resize_nearest_neighbor is unable to compute correctly get_shape leads to some problematic behavior.\nimport numpy as np\nimport tensorflow as tf\n\nx = tf.placeholder(tf.float32, [None, 32, 32, 1])\n\nprint(\"x_shape:\", x.get_shape()) # x_shape: (?, 32, 32, 1)\n\ninput_shape = tf.shape(x)[1:3]\nnewsize     = tf.multiply(input_shape, (2, 2)) # gives (64, 64)\n\n####################\n\nresized_data = tf.image.resize_nearest_neighbor(\n    images        = x,\n    size          = newsize,\n    align_corners = None,\n    name          = None\n)\nprint(\"resized_data:\", resized_data.get_shape()) # resized_data: (?, ?, ?, 1)\n\n#################### NOW THE PROBLEMATIC #################\n\nflatten_tensor = tf.contrib.layers.flatten(inputs = resized_data)\nprint(\"flatten_tensor:\", flatten_tensor.get_shape()) # resized_data: (?, ?)\n\nfailing_layer = tf.contrib.layers.fully_connected(\n    inputs        = flatten_tensor,\n    num_outputs   = 1,\n    activation_fn = None\n)\n\n##############################################\n############# LAUNCH THE SESSION #############\n##############################################\n\nwith tf.Session() as sess:\n    rslt = sess.run(resized_data, feed_dict={x: np.ones((666, 32, 32,1))})\n    print(\"Rslt Shape:\", rslt.shape)\n    \n    failing_layer = sess.run(failing_layer, feed_dict={x: np.ones((666, 32, 32,1))})\n    print(\"failing_layer Shape:\", failing_layer.shape)\nFor information, it is absolutely to launch the session with the FC layer in the script, it completely fails.", "body": "Hello everyone,\r\n\r\nFollowing the issue  #7932, I have also noticed that get_shape() does not work when using\r\ntf.image.resize_nearest_neighbor().\r\n\r\nI use linux 16.06 and TF in [1.3.0, 1.3.1, 1.4.0-dev20171008] and I have the same error.\r\n\r\nThe error is quite easy to understand. The fact that tf.image.resize_nearest_neighbor is unable to compute correctly **get_shape** leads to some problematic behavior.\r\n\r\n```python\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nx = tf.placeholder(tf.float32, [None, 32, 32, 1])\r\n\r\nprint(\"x_shape:\", x.get_shape()) # x_shape: (?, 32, 32, 1)\r\n\r\ninput_shape = tf.shape(x)[1:3]\r\nnewsize     = tf.multiply(input_shape, (2, 2)) # gives (64, 64)\r\n\r\n####################\r\n\r\nresized_data = tf.image.resize_nearest_neighbor(\r\n    images        = x,\r\n    size          = newsize,\r\n    align_corners = None,\r\n    name          = None\r\n)\r\nprint(\"resized_data:\", resized_data.get_shape()) # resized_data: (?, ?, ?, 1)\r\n\r\n#################### NOW THE PROBLEMATIC #################\r\n\r\nflatten_tensor = tf.contrib.layers.flatten(inputs = resized_data)\r\nprint(\"flatten_tensor:\", flatten_tensor.get_shape()) # resized_data: (?, ?)\r\n\r\nfailing_layer = tf.contrib.layers.fully_connected(\r\n    inputs        = flatten_tensor,\r\n    num_outputs   = 1,\r\n    activation_fn = None\r\n)\r\n\r\n##############################################\r\n############# LAUNCH THE SESSION #############\r\n##############################################\r\n\r\nwith tf.Session() as sess:\r\n    rslt = sess.run(resized_data, feed_dict={x: np.ones((666, 32, 32,1))})\r\n    print(\"Rslt Shape:\", rslt.shape)\r\n    \r\n    failing_layer = sess.run(failing_layer, feed_dict={x: np.ones((666, 32, 32,1))})\r\n    print(\"failing_layer Shape:\", failing_layer.shape)\r\n```\r\n\r\nFor information, it is absolutely to launch the session with the FC layer in the script, it completely fails."}