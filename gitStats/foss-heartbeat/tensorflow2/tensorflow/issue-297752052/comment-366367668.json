{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/366367668", "html_url": "https://github.com/tensorflow/tensorflow/issues/17064#issuecomment-366367668", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/17064", "id": 366367668, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjM2NzY2OA==", "user": {"login": "MiguelMonteiro", "id": 29569659, "node_id": "MDQ6VXNlcjI5NTY5NjU5", "avatar_url": "https://avatars3.githubusercontent.com/u/29569659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MiguelMonteiro", "html_url": "https://github.com/MiguelMonteiro", "followers_url": "https://api.github.com/users/MiguelMonteiro/followers", "following_url": "https://api.github.com/users/MiguelMonteiro/following{/other_user}", "gists_url": "https://api.github.com/users/MiguelMonteiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/MiguelMonteiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MiguelMonteiro/subscriptions", "organizations_url": "https://api.github.com/users/MiguelMonteiro/orgs", "repos_url": "https://api.github.com/users/MiguelMonteiro/repos", "events_url": "https://api.github.com/users/MiguelMonteiro/events{/privacy}", "received_events_url": "https://api.github.com/users/MiguelMonteiro/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-16T21:47:39Z", "updated_at": "2018-02-16T21:47:39Z", "author_association": "NONE", "body_html": "<blockquote>\n<p>I do know that there is an allocator member of the context but it doesn't look like it is exposed.</p>\n</blockquote>\n<p>I think it is exposed, but my doubt about it was if it gave back a pointer to pre-allocated memory or if it tried to allocate more GPU memory (which would already be running low if this is the case). Perhaps the people you mentioned can shed some light on this issue.</p>\n<blockquote>\n<p>Perhaps rewriting as Struct of Arrays instead of Array of Structs would be both more aligned with our APIs and faster?</p>\n</blockquote>\n<p>It definitely would be more aligned with the current APIs, don't know about faster, and there are probably many others ways to achieve the same result. I more coming from the side of from a human programmer perspective there is a difference between an array of structs and a struct of arrays (even if the compiler and subsequent machine code don't care).</p>", "body_text": "I do know that there is an allocator member of the context but it doesn't look like it is exposed.\n\nI think it is exposed, but my doubt about it was if it gave back a pointer to pre-allocated memory or if it tried to allocate more GPU memory (which would already be running low if this is the case). Perhaps the people you mentioned can shed some light on this issue.\n\nPerhaps rewriting as Struct of Arrays instead of Array of Structs would be both more aligned with our APIs and faster?\n\nIt definitely would be more aligned with the current APIs, don't know about faster, and there are probably many others ways to achieve the same result. I more coming from the side of from a human programmer perspective there is a difference between an array of structs and a struct of arrays (even if the compiler and subsequent machine code don't care).", "body": ">  I do know that there is an allocator member of the context but it doesn't look like it is exposed. \r\n\r\nI think it is exposed, but my doubt about it was if it gave back a pointer to pre-allocated memory or if it tried to allocate more GPU memory (which would already be running low if this is the case). Perhaps the people you mentioned can shed some light on this issue.\r\n\r\n> Perhaps rewriting as Struct of Arrays instead of Array of Structs would be both more aligned with our APIs and faster?\r\n\r\nIt definitely would be more aligned with the current APIs, don't know about faster, and there are probably many others ways to achieve the same result. I more coming from the side of from a human programmer perspective there is a difference between an array of structs and a struct of arrays (even if the compiler and subsequent machine code don't care)."}