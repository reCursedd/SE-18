{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/222840793", "pull_request_review_id": 161827205, "id": 222840793, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjg0MDc5Mw==", "diff_hunk": "@@ -272,7 +272,7 @@ Status MetaOptimizer::OptimizeGraph(Cluster* cluster, const GrapplerItem& item,\n   }\n \n   std::vector<std::unique_ptr<GraphOptimizer>> optimizers;\n-  if (cfg_.optimizers().empty()) {\n+  if (cfg_.optimizers().empty() && cfg_.custom_optimizers().empty()) {", "path": "tensorflow/core/grappler/optimizers/meta_optimizer.cc", "position": 5, "original_position": 5, "commit_id": "7e20bec6ff779d5d6142668aa2d897b98a2bd844", "original_commit_id": "7e20bec6ff779d5d6142668aa2d897b98a2bd844", "user": {"login": "samikama", "id": 10539540, "node_id": "MDQ6VXNlcjEwNTM5NTQw", "avatar_url": "https://avatars0.githubusercontent.com/u/10539540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samikama", "html_url": "https://github.com/samikama", "followers_url": "https://api.github.com/users/samikama/followers", "following_url": "https://api.github.com/users/samikama/following{/other_user}", "gists_url": "https://api.github.com/users/samikama/gists{/gist_id}", "starred_url": "https://api.github.com/users/samikama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samikama/subscriptions", "organizations_url": "https://api.github.com/users/samikama/orgs", "repos_url": "https://api.github.com/users/samikama/repos", "events_url": "https://api.github.com/users/samikama/events{/privacy}", "received_events_url": "https://api.github.com/users/samikama/received_events", "type": "User", "site_admin": false}, "body": "Perhaps that may clear use case a little bit. \r\nAssume that A-F are current optimizers implemented in TF and have individual flags in rewrite_options protobuf. So when I run tensorflow without any special configuration A,B,C,D,E,F applied to the graph once or twice, depending on optimizer.\r\n\r\nNow I implemented an optimizer X that requires some configuration parameters. I want to run X in a special place and possibly multiple times. For example I want to run it in the order A, B, X_1, C, X_2 where X_1 and X_2 are X with two different parameter set. In order to do that I need to disable all default settings in rewrite_options. As you can see this is a tedious process and I write a python function \"enable_optimizer\" out of this. Then at a later time TF adds new optimizers G and H. Then all the code I have using \"enable_optimizer\"  starts running  G, H, A, B, X_1, C, X_2 instead of running expected A, B, X_1, C, X_2 and I wonder what changed in my code to lead to this behavior.\r\n\r\nWith this PR, All I need to do is set the sequence in custom_optimizers list and it will be backwards compatible as long as A, B and C is still there. Currently this is only true if X is the last optimizer and I add A,B and C to optimizers list. @rmlarsen does this make my case clearer?\r\n\r\nThanks,\r\nSami\r\n\r\n", "created_at": "2018-10-04T21:59:55Z", "updated_at": "2018-10-04T21:59:55Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22720#discussion_r222840793", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22720", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/222840793"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22720#discussion_r222840793"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22720"}}, "body_html": "<p>Perhaps that may clear use case a little bit.<br>\nAssume that A-F are current optimizers implemented in TF and have individual flags in rewrite_options protobuf. So when I run tensorflow without any special configuration A,B,C,D,E,F applied to the graph once or twice, depending on optimizer.</p>\n<p>Now I implemented an optimizer X that requires some configuration parameters. I want to run X in a special place and possibly multiple times. For example I want to run it in the order A, B, X_1, C, X_2 where X_1 and X_2 are X with two different parameter set. In order to do that I need to disable all default settings in rewrite_options. As you can see this is a tedious process and I write a python function \"enable_optimizer\" out of this. Then at a later time TF adds new optimizers G and H. Then all the code I have using \"enable_optimizer\"  starts running  G, H, A, B, X_1, C, X_2 instead of running expected A, B, X_1, C, X_2 and I wonder what changed in my code to lead to this behavior.</p>\n<p>With this PR, All I need to do is set the sequence in custom_optimizers list and it will be backwards compatible as long as A, B and C is still there. Currently this is only true if X is the last optimizer and I add A,B and C to optimizers list. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=16907534\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rmlarsen\">@rmlarsen</a> does this make my case clearer?</p>\n<p>Thanks,<br>\nSami</p>", "body_text": "Perhaps that may clear use case a little bit.\nAssume that A-F are current optimizers implemented in TF and have individual flags in rewrite_options protobuf. So when I run tensorflow without any special configuration A,B,C,D,E,F applied to the graph once or twice, depending on optimizer.\nNow I implemented an optimizer X that requires some configuration parameters. I want to run X in a special place and possibly multiple times. For example I want to run it in the order A, B, X_1, C, X_2 where X_1 and X_2 are X with two different parameter set. In order to do that I need to disable all default settings in rewrite_options. As you can see this is a tedious process and I write a python function \"enable_optimizer\" out of this. Then at a later time TF adds new optimizers G and H. Then all the code I have using \"enable_optimizer\"  starts running  G, H, A, B, X_1, C, X_2 instead of running expected A, B, X_1, C, X_2 and I wonder what changed in my code to lead to this behavior.\nWith this PR, All I need to do is set the sequence in custom_optimizers list and it will be backwards compatible as long as A, B and C is still there. Currently this is only true if X is the last optimizer and I add A,B and C to optimizers list. @rmlarsen does this make my case clearer?\nThanks,\nSami", "in_reply_to_id": 222733214}