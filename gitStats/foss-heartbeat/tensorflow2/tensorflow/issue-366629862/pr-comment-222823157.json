{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/222823157", "pull_request_review_id": 161805323, "id": 222823157, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMjgyMzE1Nw==", "diff_hunk": "@@ -272,7 +272,7 @@ Status MetaOptimizer::OptimizeGraph(Cluster* cluster, const GrapplerItem& item,\n   }\n \n   std::vector<std::unique_ptr<GraphOptimizer>> optimizers;\n-  if (cfg_.optimizers().empty()) {\n+  if (cfg_.optimizers().empty() && cfg_.custom_optimizers().empty()) {", "path": "tensorflow/core/grappler/optimizers/meta_optimizer.cc", "position": 5, "original_position": 5, "commit_id": "7e20bec6ff779d5d6142668aa2d897b98a2bd844", "original_commit_id": "7e20bec6ff779d5d6142668aa2d897b98a2bd844", "user": {"login": "samikama", "id": 10539540, "node_id": "MDQ6VXNlcjEwNTM5NTQw", "avatar_url": "https://avatars0.githubusercontent.com/u/10539540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samikama", "html_url": "https://github.com/samikama", "followers_url": "https://api.github.com/users/samikama/followers", "following_url": "https://api.github.com/users/samikama/following{/other_user}", "gists_url": "https://api.github.com/users/samikama/gists{/gist_id}", "starred_url": "https://api.github.com/users/samikama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samikama/subscriptions", "organizations_url": "https://api.github.com/users/samikama/orgs", "repos_url": "https://api.github.com/users/samikama/repos", "events_url": "https://api.github.com/users/samikama/events{/privacy}", "received_events_url": "https://api.github.com/users/samikama/received_events", "type": "User", "site_admin": false}, "body": "This is one of the use cases but if I want to control the order of optimizations, I need to use custom_optimizers list. In which case I need to disable all defaults manually. However behavior for optimizers list is inverted, i.e. it disables all default optimizers. This is a non-uniform behavior and add complications of maintainability since it requires embedding of rewrite_options schema, i.e. if new optimizers added to the default list, they will be silently applied before custom optimizer list is consumed. \r\nAlso the current logic, if optimizer is in optimizers list, it overrides defaults else if it is in custom_optimizers list, it is appended to whatever the defaults are and configurable optimizers can only be in custom_optimizers list.\r\n\r\nIf you insist on logic optimizers override and custom_optimizers append, removing line 199 could be a solution except that it blocks a possibility of multi-pass optimizer, that is same optimizer applied multiple times with different parameters.", "created_at": "2018-10-04T20:52:27Z", "updated_at": "2018-10-04T20:52:27Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/22720#discussion_r222823157", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22720", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/222823157"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/22720#discussion_r222823157"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/22720"}}, "body_html": "<p>This is one of the use cases but if I want to control the order of optimizations, I need to use custom_optimizers list. In which case I need to disable all defaults manually. However behavior for optimizers list is inverted, i.e. it disables all default optimizers. This is a non-uniform behavior and add complications of maintainability since it requires embedding of rewrite_options schema, i.e. if new optimizers added to the default list, they will be silently applied before custom optimizer list is consumed.<br>\nAlso the current logic, if optimizer is in optimizers list, it overrides defaults else if it is in custom_optimizers list, it is appended to whatever the defaults are and configurable optimizers can only be in custom_optimizers list.</p>\n<p>If you insist on logic optimizers override and custom_optimizers append, removing line 199 could be a solution except that it blocks a possibility of multi-pass optimizer, that is same optimizer applied multiple times with different parameters.</p>", "body_text": "This is one of the use cases but if I want to control the order of optimizations, I need to use custom_optimizers list. In which case I need to disable all defaults manually. However behavior for optimizers list is inverted, i.e. it disables all default optimizers. This is a non-uniform behavior and add complications of maintainability since it requires embedding of rewrite_options schema, i.e. if new optimizers added to the default list, they will be silently applied before custom optimizer list is consumed.\nAlso the current logic, if optimizer is in optimizers list, it overrides defaults else if it is in custom_optimizers list, it is appended to whatever the defaults are and configurable optimizers can only be in custom_optimizers list.\nIf you insist on logic optimizers override and custom_optimizers append, removing line 199 could be a solution except that it blocks a possibility of multi-pass optimizer, that is same optimizer applied multiple times with different parameters.", "in_reply_to_id": 222733214}