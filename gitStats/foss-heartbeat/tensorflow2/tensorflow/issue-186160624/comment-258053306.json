{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/258053306", "html_url": "https://github.com/tensorflow/tensorflow/issues/5289#issuecomment-258053306", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/5289", "id": 258053306, "node_id": "MDEyOklzc3VlQ29tbWVudDI1ODA1MzMwNg==", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "created_at": "2016-11-03T02:38:26Z", "updated_at": "2016-11-03T02:38:45Z", "author_association": "CONTRIBUTOR", "body_html": "<p>\"PyThread_acquire_lock\" is how Python GIL is acquired. If GIL is the issue,<br>\nthere must be another Python thread holding the lock. However, session.run<br>\nis supposed to be releasing the lock because of line below in tf_session.i,<br>\nso running saver ops shouldn't block evaluation.</p>\n<p>// Release the Python GIL for the duration of most methods.<br>\n%exception {<br>\nPy_BEGIN_ALLOW_THREADS;<br>\n$action<br>\nPy_END_ALLOW_THREADS;<br>\n}</p>\n<p><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom bg-gray-light\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/tensorflow/tensorflow/blob/47dd089db3cd16d76595791b2e8483e2fd0b0a25/tensorflow/python/client/tf_session.i#L45\">tensorflow/tensorflow/python/client/tf_session.i</a>\n    </p>\n    <p class=\"mb-0 text-gray-light\">\n         Line 45\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/tensorflow/tensorflow/commit/47dd089db3cd16d76595791b2e8483e2fd0b0a25\">47dd089</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L45\" class=\"blob-num border-0 px-3 py-0 bg-white js-line-number\" data-line-number=\"45\"></td>\n          <td id=\"LC45\" class=\"blob-code border-0 px-3 py-0 bg-white blob-code-inner js-file-line\"> Py_BEGIN_ALLOW_THREADS; </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p>You could look at existing Python threads to see which other thread is<br>\nhanging onto the GIL</p>\n<p>def stacktraces(self):<br>\ncode = []<br>\nfor threadId, stack in sys._current_frames().items():<br>\ncode.append(\"\\n thread: %s\" % threadId)<br>\nfor filename, lineno, name, line in<br>\ntraceback.extract_stack(stack):<br>\ncode.append('\\n***  File: \"%s\", line %d, in %s' % (filename,<br>\nlineno,<br>\nname))<br>\nif line:<br>\ncode.append(\"  %s\" % (line.strip()))</p>\n<pre><code>    for line in code:\n        sys.stderr.write(line)\n    sys.stderr.write(\"\\n\")\n</code></pre>\n<p>On Wed, Nov 2, 2016 at 6:40 PM, nroth1 <a href=\"mailto:notifications@github.com\">notifications@github.com</a> wrote:</p>\n<blockquote>\n<p>So, I have been able to isolate the issue to roughly when I call save on a<br>\nsession at the same time that I evaluate an op on the session. When I do<br>\nso, I get the following backtrace:</p>\n<p>2592 <em>wrap_TF_Run(<em>object</em>, <em>object</em>) (in <em>pywrap_tensorflow.so) + 1301<br>\n[0x106599365]<br>\n2592 tensorflow::TF_Run_wrapper(TF_Session</em>, TF_Buffer const</em>, <em>object</em>,<br>\ntensorflow::gtl::InlinedVector&lt;char const_, 8&gt; const&amp;, tensorflow::gtl::InlinedVector&lt;char<br>\nconst*, 8&gt; const&amp;, TF_Status_, tensorflow::gtl::InlinedVector&lt;<em>object</em>,<br>\n8&gt;<em>, TF_Buffer</em>) (in <em>pywrap_tensorflow.so) + 55 [0x1065b25e7]<br>\n2592 tensorflow::TF_Run_wrapper_helper(TF_Session</em>, char const_,<br>\nTF_Buffer const_, <em>object</em>, tensorflow::gtl::InlinedVector&lt;char const*,<br>\n8&gt; const&amp;, tensorflow::gtl::InlinedVector&lt;char const*, 8&gt; const&amp;,<br>\nTF_Status_, tensorflow::gtl::InlinedVector&lt;<em>object</em>, 8&gt;<em>, TF_Buffer</em>) (in<br>\n_pywrap_tensorflow.so) + 4930 [0x1065b1492]<br>\n2592 PyEval_RestoreThread (in Python) + 62 [0x10577defa]<br>\n2592 PyThread_acquire_lock (in Python) + 101 [0x1057ad790]<br>\n2592 _pthread_cond_wait (in libsystem_pthread.dylib) + 712 [0x7fffaed7c97a]<br>\n2592 __psynch_cvwait (in libsystem_kernel.dylib) + 10 [0x7fffaec93c8a]</p>\n<p>It looks like the session run call is trying to acquire a lock? Is that<br>\nexpected?</p>\n<p>Is it not safe to a save a session at the same time it is being evaluated?<br>\nI can't find this discussed explicitly in the docs. Thanks again so much<br>\nfor the help!</p>\n<p>\u2014<br>\nYou are receiving this because you commented.<br>\nReply to this email directly, view it on GitHub<br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"186160624\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/5289\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/5289/hovercard?comment_id=258048119&amp;comment_type=issue_comment\" href=\"https://github.com/tensorflow/tensorflow/issues/5289#issuecomment-258048119\">#5289 (comment)</a>,<br>\nor mute the thread<br>\n<a href=\"https://github.com/notifications/unsubscribe-auth/AABaHFYzkqwrsl4YRsFOKP16sAAIUWIcks5q6TuEgaJpZM4KkfA-\">https://github.com/notifications/unsubscribe-auth/AABaHFYzkqwrsl4YRsFOKP16sAAIUWIcks5q6TuEgaJpZM4KkfA-</a><br>\n.</p>\n</blockquote>", "body_text": "\"PyThread_acquire_lock\" is how Python GIL is acquired. If GIL is the issue,\nthere must be another Python thread holding the lock. However, session.run\nis supposed to be releasing the lock because of line below in tf_session.i,\nso running saver ops shouldn't block evaluation.\n// Release the Python GIL for the duration of most methods.\n%exception {\nPy_BEGIN_ALLOW_THREADS;\n$action\nPy_END_ALLOW_THREADS;\n}\n\n  \n    \n      tensorflow/tensorflow/python/client/tf_session.i\n    \n    \n         Line 45\n      in\n      47dd089\n    \n    \n    \n    \n\n        \n          \n           Py_BEGIN_ALLOW_THREADS; \n        \n    \n  \n\n\nYou could look at existing Python threads to see which other thread is\nhanging onto the GIL\ndef stacktraces(self):\ncode = []\nfor threadId, stack in sys._current_frames().items():\ncode.append(\"\\n thread: %s\" % threadId)\nfor filename, lineno, name, line in\ntraceback.extract_stack(stack):\ncode.append('\\n***  File: \"%s\", line %d, in %s' % (filename,\nlineno,\nname))\nif line:\ncode.append(\"  %s\" % (line.strip()))\n    for line in code:\n        sys.stderr.write(line)\n    sys.stderr.write(\"\\n\")\n\nOn Wed, Nov 2, 2016 at 6:40 PM, nroth1 notifications@github.com wrote:\n\nSo, I have been able to isolate the issue to roughly when I call save on a\nsession at the same time that I evaluate an op on the session. When I do\nso, I get the following backtrace:\n2592 wrap_TF_Run(object, object) (in pywrap_tensorflow.so) + 1301\n[0x106599365]\n2592 tensorflow::TF_Run_wrapper(TF_Session, TF_Buffer const, object,\ntensorflow::gtl::InlinedVector<char const_, 8> const&, tensorflow::gtl::InlinedVector<char\nconst*, 8> const&, TF_Status_, tensorflow::gtl::InlinedVector<object,\n8>, TF_Buffer) (in pywrap_tensorflow.so) + 55 [0x1065b25e7]\n2592 tensorflow::TF_Run_wrapper_helper(TF_Session, char const_,\nTF_Buffer const_, object, tensorflow::gtl::InlinedVector<char const*,\n8> const&, tensorflow::gtl::InlinedVector<char const*, 8> const&,\nTF_Status_, tensorflow::gtl::InlinedVector<object, 8>, TF_Buffer) (in\n_pywrap_tensorflow.so) + 4930 [0x1065b1492]\n2592 PyEval_RestoreThread (in Python) + 62 [0x10577defa]\n2592 PyThread_acquire_lock (in Python) + 101 [0x1057ad790]\n2592 _pthread_cond_wait (in libsystem_pthread.dylib) + 712 [0x7fffaed7c97a]\n2592 __psynch_cvwait (in libsystem_kernel.dylib) + 10 [0x7fffaec93c8a]\nIt looks like the session run call is trying to acquire a lock? Is that\nexpected?\nIs it not safe to a save a session at the same time it is being evaluated?\nI can't find this discussed explicitly in the docs. Thanks again so much\nfor the help!\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\n#5289 (comment),\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABaHFYzkqwrsl4YRsFOKP16sAAIUWIcks5q6TuEgaJpZM4KkfA-\n.", "body": "\"PyThread_acquire_lock\" is how Python GIL is acquired. If GIL is the issue,\nthere must be another Python thread holding the lock. However, session.run\nis supposed to be releasing the lock because of line below in tf_session.i,\nso running saver ops shouldn't block evaluation.\n\n// Release the Python GIL for the duration of most methods.\n%exception {\n  Py_BEGIN_ALLOW_THREADS;\n  $action\n  Py_END_ALLOW_THREADS;\n}\n\nhttps://github.com/tensorflow/tensorflow/blob/47dd089db3cd16d76595791b2e8483e2fd0b0a25/tensorflow/python/client/tf_session.i#L45\n\nYou could look at existing Python threads to see which other thread is\nhanging onto the GIL\n\n def stacktraces(self):\n        code = []\n        for threadId, stack in sys._current_frames().items():\n            code.append(\"\\n thread: %s\" % threadId)\n            for filename, lineno, name, line in\ntraceback.extract_stack(stack):\n                code.append('\\n**\\*  File: \"%s\", line %d, in %s' % (filename,\n                                                                lineno,\nname))\n                if line:\n                    code.append(\"  %s\" % (line.strip()))\n\n```\n    for line in code:\n        sys.stderr.write(line)\n    sys.stderr.write(\"\\n\")\n```\n\nOn Wed, Nov 2, 2016 at 6:40 PM, nroth1 notifications@github.com wrote:\n\n> So, I have been able to isolate the issue to roughly when I call save on a\n> session at the same time that I evaluate an op on the session. When I do\n> so, I get the following backtrace:\n> \n> 2592 _wrap_TF_Run(_object_, _object_) (in _pywrap_tensorflow.so) + 1301\n> [0x106599365]\n> 2592 tensorflow::TF_Run_wrapper(TF_Session_, TF_Buffer const_, _object_,\n> tensorflow::gtl::InlinedVector<char const_, 8> const&, tensorflow::gtl::InlinedVector<char\n> const*, 8> const&, TF_Status_, tensorflow::gtl::InlinedVector<_object_,\n> 8>_, TF_Buffer_) (in _pywrap_tensorflow.so) + 55 [0x1065b25e7]\n> 2592 tensorflow::TF_Run_wrapper_helper(TF_Session_, char const_,\n> TF_Buffer const_, _object_, tensorflow::gtl::InlinedVector<char const*,\n> 8> const&, tensorflow::gtl::InlinedVector<char const*, 8> const&,\n> TF_Status_, tensorflow::gtl::InlinedVector<_object_, 8>_, TF_Buffer_) (in\n> _pywrap_tensorflow.so) + 4930 [0x1065b1492]\n> 2592 PyEval_RestoreThread (in Python) + 62 [0x10577defa]\n> 2592 PyThread_acquire_lock (in Python) + 101 [0x1057ad790]\n> 2592 _pthread_cond_wait (in libsystem_pthread.dylib) + 712 [0x7fffaed7c97a]\n> 2592 __psynch_cvwait (in libsystem_kernel.dylib) + 10 [0x7fffaec93c8a]\n> \n> It looks like the session run call is trying to acquire a lock? Is that\n> expected?\n> \n> Is it not safe to a save a session at the same time it is being evaluated?\n> I can't find this discussed explicitly in the docs. Thanks again so much\n> for the help!\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> https://github.com/tensorflow/tensorflow/issues/5289#issuecomment-258048119,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AABaHFYzkqwrsl4YRsFOKP16sAAIUWIcks5q6TuEgaJpZM4KkfA-\n> .\n"}