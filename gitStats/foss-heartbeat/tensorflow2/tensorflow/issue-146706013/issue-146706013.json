{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1814", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1814/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1814/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/1814/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/1814", "id": 146706013, "node_id": "MDU6SXNzdWUxNDY3MDYwMTM=", "number": 1814, "title": "Implementing a Siamese Network", "user": {"login": "johnrowlay", "id": 17486673, "node_id": "MDQ6VXNlcjE3NDg2Njcz", "avatar_url": "https://avatars3.githubusercontent.com/u/17486673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnrowlay", "html_url": "https://github.com/johnrowlay", "followers_url": "https://api.github.com/users/johnrowlay/followers", "following_url": "https://api.github.com/users/johnrowlay/following{/other_user}", "gists_url": "https://api.github.com/users/johnrowlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnrowlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnrowlay/subscriptions", "organizations_url": "https://api.github.com/users/johnrowlay/orgs", "repos_url": "https://api.github.com/users/johnrowlay/repos", "events_url": "https://api.github.com/users/johnrowlay/events{/privacy}", "received_events_url": "https://api.github.com/users/johnrowlay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-07T18:24:42Z", "updated_at": "2016-04-07T20:40:55Z", "closed_at": "2016-04-07T20:40:55Z", "author_association": "NONE", "body_html": "<p>I want to implement a Siamese Convolutional Neural Network, where two images share weights in the convolutional layers, and are then concatenated before being passed through the fully-connected layers. I have tried an implementation, but it seems rather a \"hacked\" solution. In particular, I have defined an operation on tensors as simply a Python function, and I'm not sure whether this is allowed.</p>\n<p>Here is the code I have tried:</p>\n<pre><code>images = tf.placeholder(tf.float32, shape=[None, 64 * 64])\n# Convolutional layers\n# ...\n# ...\n# Results in pool3_flat, which is the flattened output of the third convolutional layer\npool3_flat = tf.reshape(pool3, [-1, 8 * 8 * 128])\n\n# Now, merge the image pairs, where each pair is composed of adjacent images in the batch, with a stride of 2\ndef merge_pairs():\n  # Create a tensor to store the merged image pairs\n  # The batch size is 128, therefore there will be 64 pairs (64 in the first dimension of this tensor)\n  merged_pairs = tf.Variable(tf.zeros([64, 8 * 8 * 128]))\n  # Split the images into 64 pairs\n  pairs = tf.split(0, 64, pool3_flat)\n  # For each pair, concatenate the two images across dimension 1, and set this tensor in the appropriate row of merged_pairs\n  for pair_num, pair in enumerate(pairs):\n    merged_pair = tf.concat(1, pair)\n    merged_pairs[pair_num] = merged_pair\n\n# Proceed with operations on the merged_pair tensor, as if the batch size is 64\nfc4 = tf.matmul(merge_pairs, weights4)\n# ...\n# ...\n</code></pre>\n<p>When running this, I get the following error message:</p>\n<p><code>TypeError: Expected binary or unicode string, got &lt;function merge_pairs at 0x7f006edbed70&gt;</code></p>\n<p>So it seems that I cannot simple replace a TensorFlow operation with a Python function. Is there a way to implement a Siamese network using built-in operations in TensorFlow?</p>", "body_text": "I want to implement a Siamese Convolutional Neural Network, where two images share weights in the convolutional layers, and are then concatenated before being passed through the fully-connected layers. I have tried an implementation, but it seems rather a \"hacked\" solution. In particular, I have defined an operation on tensors as simply a Python function, and I'm not sure whether this is allowed.\nHere is the code I have tried:\nimages = tf.placeholder(tf.float32, shape=[None, 64 * 64])\n# Convolutional layers\n# ...\n# ...\n# Results in pool3_flat, which is the flattened output of the third convolutional layer\npool3_flat = tf.reshape(pool3, [-1, 8 * 8 * 128])\n\n# Now, merge the image pairs, where each pair is composed of adjacent images in the batch, with a stride of 2\ndef merge_pairs():\n  # Create a tensor to store the merged image pairs\n  # The batch size is 128, therefore there will be 64 pairs (64 in the first dimension of this tensor)\n  merged_pairs = tf.Variable(tf.zeros([64, 8 * 8 * 128]))\n  # Split the images into 64 pairs\n  pairs = tf.split(0, 64, pool3_flat)\n  # For each pair, concatenate the two images across dimension 1, and set this tensor in the appropriate row of merged_pairs\n  for pair_num, pair in enumerate(pairs):\n    merged_pair = tf.concat(1, pair)\n    merged_pairs[pair_num] = merged_pair\n\n# Proceed with operations on the merged_pair tensor, as if the batch size is 64\nfc4 = tf.matmul(merge_pairs, weights4)\n# ...\n# ...\n\nWhen running this, I get the following error message:\nTypeError: Expected binary or unicode string, got <function merge_pairs at 0x7f006edbed70>\nSo it seems that I cannot simple replace a TensorFlow operation with a Python function. Is there a way to implement a Siamese network using built-in operations in TensorFlow?", "body": "I want to implement a Siamese Convolutional Neural Network, where two images share weights in the convolutional layers, and are then concatenated before being passed through the fully-connected layers. I have tried an implementation, but it seems rather a \"hacked\" solution. In particular, I have defined an operation on tensors as simply a Python function, and I'm not sure whether this is allowed.\n\nHere is the code I have tried:\n\n```\nimages = tf.placeholder(tf.float32, shape=[None, 64 * 64])\n# Convolutional layers\n# ...\n# ...\n# Results in pool3_flat, which is the flattened output of the third convolutional layer\npool3_flat = tf.reshape(pool3, [-1, 8 * 8 * 128])\n\n# Now, merge the image pairs, where each pair is composed of adjacent images in the batch, with a stride of 2\ndef merge_pairs():\n  # Create a tensor to store the merged image pairs\n  # The batch size is 128, therefore there will be 64 pairs (64 in the first dimension of this tensor)\n  merged_pairs = tf.Variable(tf.zeros([64, 8 * 8 * 128]))\n  # Split the images into 64 pairs\n  pairs = tf.split(0, 64, pool3_flat)\n  # For each pair, concatenate the two images across dimension 1, and set this tensor in the appropriate row of merged_pairs\n  for pair_num, pair in enumerate(pairs):\n    merged_pair = tf.concat(1, pair)\n    merged_pairs[pair_num] = merged_pair\n\n# Proceed with operations on the merged_pair tensor, as if the batch size is 64\nfc4 = tf.matmul(merge_pairs, weights4)\n# ...\n# ...\n```\n\nWhen running this, I get the following error message:\n\n`TypeError: Expected binary or unicode string, got <function merge_pairs at 0x7f006edbed70>`\n\nSo it seems that I cannot simple replace a TensorFlow operation with a Python function. Is there a way to implement a Siamese network using built-in operations in TensorFlow?\n"}