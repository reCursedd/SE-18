{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/364068226", "html_url": "https://github.com/tensorflow/tensorflow/issues/7656#issuecomment-364068226", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/7656", "id": 364068226, "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDA2ODIyNg==", "user": {"login": "tpet", "id": 3949136, "node_id": "MDQ6VXNlcjM5NDkxMzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3949136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tpet", "html_url": "https://github.com/tpet", "followers_url": "https://api.github.com/users/tpet/followers", "following_url": "https://api.github.com/users/tpet/following{/other_user}", "gists_url": "https://api.github.com/users/tpet/gists{/gist_id}", "starred_url": "https://api.github.com/users/tpet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tpet/subscriptions", "organizations_url": "https://api.github.com/users/tpet/orgs", "repos_url": "https://api.github.com/users/tpet/repos", "events_url": "https://api.github.com/users/tpet/events{/privacy}", "received_events_url": "https://api.github.com/users/tpet/received_events", "type": "User", "site_admin": false}, "created_at": "2018-02-08T10:25:06Z", "updated_at": "2018-02-08T10:25:06Z", "author_association": "NONE", "body_html": "<p>I'm also interested in the answer. It seems to me that it would be good to allow specifying full shape, especially if partial shapes are allowed. I'm adding a small demonstration below (using version 1.5.0).</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\n\nm = 1000000\nn = 1000000\n\nx = tf.placeholder(tf.float32, shape=(n, 1))\nx_val = np.arange(n)[:, None]\nW = tf.sparse_placeholder(tf.float32, shape=(m, n))        # Fails\n# W = tf.sparse_placeholder(tf.float32, shape=(m, None))     # Runs\n# W = tf.sparse_placeholder(tf.float32, shape=(None, n))     # Runs\n# W = tf.sparse_placeholder(tf.float32, shape=(None, None))  # Runs\n# W = tf.sparse_placeholder(tf.float32)                      # Runs\ny = tf.sparse_tensor_dense_matmul(W, x)\n\nindices = np.array([[0, 0], [1, 1], [1, 2]], dtype=np.int64)\nvalues = np.array([1.0, 1.0, 1.0], dtype=np.float32)\nshape = np.array([m, n], dtype=np.int64)\n\nwith tf.Session() as sess:\n    print(sess.run(y, feed_dict={x: x_val, W: (indices, values, shape)}))\n</code></pre>", "body_text": "I'm also interested in the answer. It seems to me that it would be good to allow specifying full shape, especially if partial shapes are allowed. I'm adding a small demonstration below (using version 1.5.0).\nimport numpy as np\nimport tensorflow as tf\n\nm = 1000000\nn = 1000000\n\nx = tf.placeholder(tf.float32, shape=(n, 1))\nx_val = np.arange(n)[:, None]\nW = tf.sparse_placeholder(tf.float32, shape=(m, n))        # Fails\n# W = tf.sparse_placeholder(tf.float32, shape=(m, None))     # Runs\n# W = tf.sparse_placeholder(tf.float32, shape=(None, n))     # Runs\n# W = tf.sparse_placeholder(tf.float32, shape=(None, None))  # Runs\n# W = tf.sparse_placeholder(tf.float32)                      # Runs\ny = tf.sparse_tensor_dense_matmul(W, x)\n\nindices = np.array([[0, 0], [1, 1], [1, 2]], dtype=np.int64)\nvalues = np.array([1.0, 1.0, 1.0], dtype=np.float32)\nshape = np.array([m, n], dtype=np.int64)\n\nwith tf.Session() as sess:\n    print(sess.run(y, feed_dict={x: x_val, W: (indices, values, shape)}))", "body": "I'm also interested in the answer. It seems to me that it would be good to allow specifying full shape, especially if partial shapes are allowed. I'm adding a small demonstration below (using version 1.5.0).\r\n\r\n```\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\nm = 1000000\r\nn = 1000000\r\n\r\nx = tf.placeholder(tf.float32, shape=(n, 1))\r\nx_val = np.arange(n)[:, None]\r\nW = tf.sparse_placeholder(tf.float32, shape=(m, n))        # Fails\r\n# W = tf.sparse_placeholder(tf.float32, shape=(m, None))     # Runs\r\n# W = tf.sparse_placeholder(tf.float32, shape=(None, n))     # Runs\r\n# W = tf.sparse_placeholder(tf.float32, shape=(None, None))  # Runs\r\n# W = tf.sparse_placeholder(tf.float32)                      # Runs\r\ny = tf.sparse_tensor_dense_matmul(W, x)\r\n\r\nindices = np.array([[0, 0], [1, 1], [1, 2]], dtype=np.int64)\r\nvalues = np.array([1.0, 1.0, 1.0], dtype=np.float32)\r\nshape = np.array([m, n], dtype=np.int64)\r\n\r\nwith tf.Session() as sess:\r\n    print(sess.run(y, feed_dict={x: x_val, W: (indices, values, shape)}))\r\n```"}