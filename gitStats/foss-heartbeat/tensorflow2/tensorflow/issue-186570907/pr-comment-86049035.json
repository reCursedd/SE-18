{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/86049035", "pull_request_review_id": 6727575, "id": 86049035, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg2MDQ5MDM1", "diff_hunk": "@@ -829,3 +829,64 @@ def _hessian_vector_product(ys, xs, v):\n \n   # Second backprop\n   return gradients(elemwise_products, xs)\n+\n+\n+def hessians(ys, xs, name=\"hessians\", colocate_gradients_with_ops=False, \n+            gate_gradients=False, aggregation_method=None):\n+  \"\"\"Constructs the Hessian of sum of `ys` with respect to `x` in `xs`.\n+\n+  `hessians()` adds ops to the graph to output the Hessian matrix of `ys` \n+  with respect to `xs`.  It returns a list of `Tensor` of length `len(xs)` \n+  where each tensor is the Hessian of `sum(ys)`. This function currently\n+  only supports evaluating the Hessian with respect to (a list of) one-\n+  dimensional tensors.\n+\n+  The Hessian is a matrix of second-order partial derivatives of a scalar\n+  tensor (see https://en.wikipedia.org/wiki/Hessian_matrix for more details).\n+\n+  Args:\n+    ys: A `Tensor` or list of tensors to be differentiated.\n+    xs: A `Tensor` or list of tensors to be used for differentiation.\n+    name: Optional name to use for grouping all the gradient ops together.\n+      defaults to 'hessians'.\n+    colocate_gradients_with_ops: See `gradients()` documentation for details.\n+    gate_gradients: See `gradients()` documentation for details.\n+    aggregation_method: See `gradients()` documentation for details.\n+\n+  Returns:\n+    A list of Hessian matrices of `sum(y)` for each `x` in `xs`.\n+\n+  Raises:\n+    LookupError: if one of the operations between `xs` and `ys` does not\n+      have a registered gradient function.\n+    ValueError: if the arguments are invalid or not supported. Currently,\n+      this function only supports one-dimensional `x` in `xs`.\n+  \"\"\"\n+  xs = _AsList(xs)\n+  kwargs = {\n+      'colocate_gradients_with_ops': colocate_gradients_with_ops,\n+      'gate_gradients': gate_gradients,\n+      'aggregation_method': aggregation_method\n+    }\n+  # Compute a hessian matrix for each x in xs\n+  hessians = []\n+  for x in xs:\n+    # Check dimensions\n+    ndims = x.get_shape().ndims\n+    if ndims is None:\n+      raise ValueError('cannot compute Hessian because the dimensionality of ' \\\n+                       '`x` cannot be determined')\n+    elif ndims != 1:\n+      raise ValueError('computing hessians is currently only supported for ' \\\n+                       'one-dimensional tensors')\n+    # Compute the partial derivatives of the input with respect to all \n+    # elements of `x`\n+    _gradients = gradients(ys, x, **kwargs)[0]", "path": "tensorflow/python/ops/gradients.py", "position": null, "original_position": 65, "commit_id": "dd4fe4e3da2def7fa04ae4e8e503ee86de014be8", "original_commit_id": "0d338daf3b1023404e31e25a2c26849c29de3a64", "user": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "body": "Consider wrapping these calls in ops.name_scope to give them better scoping in TensorBoard.  Something like:\n\n```\nwith ops.name_scope(name + \"_first_derivative\"):\n  _gradients = gradients(ys, x, **kwargs)[0]\n\n...\n\nwith ops.name_scope(name + \"_second_derivative\"):\n  ...\n  hessians.append(...)\n```\n\nThat way you'll get better grouping, and the name collisions will hopefully be less chaotic?\n", "created_at": "2016-11-01T23:44:37Z", "updated_at": "2016-11-02T17:10:25Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/5329#discussion_r86049035", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5329", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/86049035"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/5329#discussion_r86049035"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5329"}}, "body_html": "<p>Consider wrapping these calls in ops.name_scope to give them better scoping in TensorBoard.  Something like:</p>\n<pre><code>with ops.name_scope(name + \"_first_derivative\"):\n  _gradients = gradients(ys, x, **kwargs)[0]\n\n...\n\nwith ops.name_scope(name + \"_second_derivative\"):\n  ...\n  hessians.append(...)\n</code></pre>\n<p>That way you'll get better grouping, and the name collisions will hopefully be less chaotic?</p>", "body_text": "Consider wrapping these calls in ops.name_scope to give them better scoping in TensorBoard.  Something like:\nwith ops.name_scope(name + \"_first_derivative\"):\n  _gradients = gradients(ys, x, **kwargs)[0]\n\n...\n\nwith ops.name_scope(name + \"_second_derivative\"):\n  ...\n  hessians.append(...)\n\nThat way you'll get better grouping, and the name collisions will hopefully be less chaotic?"}