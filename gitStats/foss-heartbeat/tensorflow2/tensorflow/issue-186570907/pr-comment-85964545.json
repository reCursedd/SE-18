{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/85964545", "pull_request_review_id": 6647621, "id": 85964545, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1OTY0NTQ1", "diff_hunk": "@@ -829,3 +829,45 @@ def _hessian_vector_product(ys, xs, v):\n \n   # Second backprop\n   return gradients(elemwise_products, xs)\n+\n+\n+def hessian(ys, x, name=\"hessian\", colocate_gradients_with_ops=False, \n+            gate_gradients=False, aggregation_method=None):\n+  \"\"\"Constructs the Hessian of sum of `ys` with respect to `x`.\n+\n+  `hessian()` adds ops to the graph to output the Hessian of `ys` with \n+  respect to `x` and returns a `Tensor`.\n+\n+  Args:\n+    ys: A `Tensor` or list of tensors to be differentiated.\n+    x: A `Tensor` to be used for differentiation.\n+    name: Optional name to use for grouping all the gradient ops together.\n+      defaults to 'gradients'.\n+    colocate_gradients_with_ops: If True, try colocating gradients with\n+      the corresponding op.\n+    gate_gradients: If True, add a tuple around the gradients returned\n+      for an operation.  This avoids some race conditions.\n+    aggregation_method: Specifies the method used to combine gradient terms.\n+      Accepted values are constants defined in the class `AggregationMethod`.\n+\n+  Returns:\n+    The hessian of `sum(ys)` with respect to `x`.\n+\n+  Raises:\n+    LookupError: if one of the operations between `x` and `ys` does not\n+      have a registered gradient function.\n+    ValueError: if the arguments are invalid\n+  \"\"\"\n+  ndims = x.get_shape().ndims\n+  if ndims is not None and ndims != 1:\n+    raise ValueError(\"Hessians can only be computed with respect to one-dimensional tensors\")", "path": "tensorflow/python/ops/gradients.py", "position": null, "original_position": 44, "commit_id": "dd4fe4e3da2def7fa04ae4e8e503ee86de014be8", "original_commit_id": "9c2c83f39b50b6e8d82dad07d41f2999ed11ee20", "user": {"login": "goodfeli", "id": 387866, "node_id": "MDQ6VXNlcjM4Nzg2Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/387866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goodfeli", "html_url": "https://github.com/goodfeli", "followers_url": "https://api.github.com/users/goodfeli/followers", "following_url": "https://api.github.com/users/goodfeli/following{/other_user}", "gists_url": "https://api.github.com/users/goodfeli/gists{/gist_id}", "starred_url": "https://api.github.com/users/goodfeli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goodfeli/subscriptions", "organizations_url": "https://api.github.com/users/goodfeli/orgs", "repos_url": "https://api.github.com/users/goodfeli/repos", "events_url": "https://api.github.com/users/goodfeli/events{/privacy}", "received_events_url": "https://api.github.com/users/goodfeli/received_events", "type": "User", "site_admin": false}, "body": "OK, I get what's going on here.\n\nUsually the Hessian is defined in terms of a function that takes a tensor of shape [n] as input and returns a tensor of shape [] as output. The Hessian has shape [n, n]. Part of the definition of the Hessian is that it is a matrix.\n\nOne could imagine generalizing the concept of a Hessian matrix to be more tensorflow-ish by returning a Hessian tensor of shape `input_shape + input_shape`, so a function that takes a matrix of shape [m, n] as input would have a Hessian tensor of shape [m, n, m, n]. But I think such a feature would be very rarely used and there's not much point in implementing it unless someone actually requests it.\n", "created_at": "2016-11-01T16:24:26Z", "updated_at": "2016-11-02T17:10:25Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/5329#discussion_r85964545", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5329", "author_association": "NONE", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/85964545"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/5329#discussion_r85964545"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/5329"}}, "body_html": "<p>OK, I get what's going on here.</p>\n<p>Usually the Hessian is defined in terms of a function that takes a tensor of shape [n] as input and returns a tensor of shape [] as output. The Hessian has shape [n, n]. Part of the definition of the Hessian is that it is a matrix.</p>\n<p>One could imagine generalizing the concept of a Hessian matrix to be more tensorflow-ish by returning a Hessian tensor of shape <code>input_shape + input_shape</code>, so a function that takes a matrix of shape [m, n] as input would have a Hessian tensor of shape [m, n, m, n]. But I think such a feature would be very rarely used and there's not much point in implementing it unless someone actually requests it.</p>", "body_text": "OK, I get what's going on here.\nUsually the Hessian is defined in terms of a function that takes a tensor of shape [n] as input and returns a tensor of shape [] as output. The Hessian has shape [n, n]. Part of the definition of the Hessian is that it is a matrix.\nOne could imagine generalizing the concept of a Hessian matrix to be more tensorflow-ish by returning a Hessian tensor of shape input_shape + input_shape, so a function that takes a matrix of shape [m, n] as input would have a Hessian tensor of shape [m, n, m, n]. But I think such a feature would be very rarely used and there's not much point in implementing it unless someone actually requests it."}