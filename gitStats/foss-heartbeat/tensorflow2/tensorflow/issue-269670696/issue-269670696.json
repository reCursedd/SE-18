{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14098", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14098/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14098/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/14098/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/14098", "id": 269670696, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ5NTc1MzI4", "number": 14098, "title": "Add KafkaReader for processing streaming data with Apache Kafka", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 390482148, "node_id": "MDU6TGFiZWwzOTA0ODIxNDg=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/awaiting%20review", "name": "awaiting review", "color": "fef2c0", "default": false}, {"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "jhseu", "id": 170179, "node_id": "MDQ6VXNlcjE3MDE3OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/170179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhseu", "html_url": "https://github.com/jhseu", "followers_url": "https://api.github.com/users/jhseu/followers", "following_url": "https://api.github.com/users/jhseu/following{/other_user}", "gists_url": "https://api.github.com/users/jhseu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhseu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhseu/subscriptions", "organizations_url": "https://api.github.com/users/jhseu/orgs", "repos_url": "https://api.github.com/users/jhseu/repos", "events_url": "https://api.github.com/users/jhseu/events{/privacy}", "received_events_url": "https://api.github.com/users/jhseu/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jhseu", "id": 170179, "node_id": "MDQ6VXNlcjE3MDE3OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/170179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhseu", "html_url": "https://github.com/jhseu", "followers_url": "https://api.github.com/users/jhseu/followers", "following_url": "https://api.github.com/users/jhseu/following{/other_user}", "gists_url": "https://api.github.com/users/jhseu/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhseu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhseu/subscriptions", "organizations_url": "https://api.github.com/users/jhseu/orgs", "repos_url": "https://api.github.com/users/jhseu/repos", "events_url": "https://api.github.com/users/jhseu/events{/privacy}", "received_events_url": "https://api.github.com/users/jhseu/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 19, "created_at": "2017-10-30T16:42:57Z", "updated_at": "2018-01-26T21:00:40Z", "closed_at": "2018-01-26T20:45:36Z", "author_association": "MEMBER", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/14098", "html_url": "https://github.com/tensorflow/tensorflow/pull/14098", "diff_url": "https://github.com/tensorflow/tensorflow/pull/14098.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/14098.patch"}, "body_html": "<p>This is a proposal to add KafkaReader so that it is possible to read data from Kafka like TextLineReader and TFRecordReader.</p>\n<p>Apache Kafka is a widely used distributed streaming platform in open source community. The goal of this fix is to create a contrib Reader ops (inherits ReaderBase and is similiar to TextLineReader / TFRecordReader) so that it is possible to reader Kafka streaming data from TensorFlow in a similiar fashion.</p>\n<p>This fix uses a C/C++ Apache Kafka client library librdkafka which is released under the 2-clause BSD license, and is widely used in a number of Kafka bindings such as Go, Python, C#/.Net, etc.</p>\n<p>Below is a sample usage:</p>\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">import</span> tensorflow <span class=\"pl-k\">as</span> tf\n<span class=\"pl-k\">import</span> tensorflow.contrib.kafka <span class=\"pl-k\">as</span> kafka\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> The name of test:0:0:10</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> test: topic</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 0: partition</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 0: offset</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 10: length (or -1 for unlimited)</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span></span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> The parameters for KafkaReader</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> servers: bootstrap.servers</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> group: group.id</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> eof: If True then read will block until the length of the data</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span>      has been read and ignore EOF error from Kafka</span>\n\nfilename_queue <span class=\"pl-k\">=</span> tf.train.string_input_producer([<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test:0:0:10<span class=\"pl-pds\">\"</span></span>])\n\nreader <span class=\"pl-k\">=</span> kafka.KafkaReader(<span class=\"pl-v\">servers</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>localhost<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">group</span><span class=\"pl-k\">=</span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-v\">eof</span><span class=\"pl-k\">=</span><span class=\"pl-c1\">True</span>)\nkey, value <span class=\"pl-k\">=</span> reader.read(filename_queue)\n<span class=\"pl-k\">with</span> tf.Session() <span class=\"pl-k\">as</span> sess:\n  coord <span class=\"pl-k\">=</span> tf.train.Coordinator()\n  threads <span class=\"pl-k\">=</span> tf.train.start_queue_runners(<span class=\"pl-v\">coord</span><span class=\"pl-k\">=</span>coord)\n  <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">range</span>(<span class=\"pl-c1\">10</span>):\n    <span class=\"pl-c1\">print</span>(sess.run([key, value]))\n  coord.request_stop()\n  coord.join(threads)</pre></div>\n<p>NOTE: Because of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"138951694\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/tensorflow/tensorflow/issues/1419\" data-hovercard-type=\"issue\" data-hovercard-url=\"/tensorflow/tensorflow/issues/1419/hovercard\" href=\"https://github.com/tensorflow/tensorflow/issues/1419\">#1419</a>, the clean_deps of <code>tensorflow/core:framework</code> and <code>tensorflow/core:lib</code> has been commented out temporarily so that it is possible to build with ReaderBase. Any suggestions to address this issue is welcomed.</p>\n<p>Signed-off-by: Yong Tang <a href=\"mailto:yong.tang.github@outlook.com\">yong.tang.github@outlook.com</a></p>", "body_text": "This is a proposal to add KafkaReader so that it is possible to read data from Kafka like TextLineReader and TFRecordReader.\nApache Kafka is a widely used distributed streaming platform in open source community. The goal of this fix is to create a contrib Reader ops (inherits ReaderBase and is similiar to TextLineReader / TFRecordReader) so that it is possible to reader Kafka streaming data from TensorFlow in a similiar fashion.\nThis fix uses a C/C++ Apache Kafka client library librdkafka which is released under the 2-clause BSD license, and is widely used in a number of Kafka bindings such as Go, Python, C#/.Net, etc.\nBelow is a sample usage:\nimport tensorflow as tf\nimport tensorflow.contrib.kafka as kafka\n\n# The name of test:0:0:10\n# test: topic\n# 0: partition\n# 0: offset\n# 10: length (or -1 for unlimited)\n#\n# The parameters for KafkaReader\n# servers: bootstrap.servers\n# group: group.id\n# eof: If True then read will block until the length of the data\n#      has been read and ignore EOF error from Kafka\n\nfilename_queue = tf.train.string_input_producer([\"test:0:0:10\"])\n\nreader = kafka.KafkaReader(servers=\"localhost\", group=\"test\", eof=True)\nkey, value = reader.read(filename_queue)\nwith tf.Session() as sess:\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(coord=coord)\n  for i in range(10):\n    print(sess.run([key, value]))\n  coord.request_stop()\n  coord.join(threads)\nNOTE: Because of #1419, the clean_deps of tensorflow/core:framework and tensorflow/core:lib has been commented out temporarily so that it is possible to build with ReaderBase. Any suggestions to address this issue is welcomed.\nSigned-off-by: Yong Tang yong.tang.github@outlook.com", "body": "This is a proposal to add KafkaReader so that it is possible to read data from Kafka like TextLineReader and TFRecordReader.\r\n\r\nApache Kafka is a widely used distributed streaming platform in open source community. The goal of this fix is to create a contrib Reader ops (inherits ReaderBase and is similiar to TextLineReader / TFRecordReader) so that it is possible to reader Kafka streaming data from TensorFlow in a similiar fashion.\r\n\r\nThis fix uses a C/C++ Apache Kafka client library librdkafka which is released under the 2-clause BSD license, and is widely used in a number of Kafka bindings such as Go, Python, C#/.Net, etc.\r\n\r\nBelow is a sample usage:\r\n```python\r\nimport tensorflow as tf\r\nimport tensorflow.contrib.kafka as kafka\r\n\r\n# The name of test:0:0:10\r\n# test: topic\r\n# 0: partition\r\n# 0: offset\r\n# 10: length (or -1 for unlimited)\r\n#\r\n# The parameters for KafkaReader\r\n# servers: bootstrap.servers\r\n# group: group.id\r\n# eof: If True then read will block until the length of the data\r\n#      has been read and ignore EOF error from Kafka\r\n\r\nfilename_queue = tf.train.string_input_producer([\"test:0:0:10\"])\r\n\r\nreader = kafka.KafkaReader(servers=\"localhost\", group=\"test\", eof=True)\r\nkey, value = reader.read(filename_queue)\r\nwith tf.Session() as sess:\r\n  coord = tf.train.Coordinator()\r\n  threads = tf.train.start_queue_runners(coord=coord)\r\n  for i in range(10):\r\n    print(sess.run([key, value]))\r\n  coord.request_stop()\r\n  coord.join(threads)\r\n```\r\n\r\nNOTE: Because of #1419, the clean_deps of `tensorflow/core:framework` and `tensorflow/core:lib` has been commented out temporarily so that it is possible to build with ReaderBase. Any suggestions to address this issue is welcomed.\r\n\r\nSigned-off-by: Yong Tang <yong.tang.github@outlook.com>"}