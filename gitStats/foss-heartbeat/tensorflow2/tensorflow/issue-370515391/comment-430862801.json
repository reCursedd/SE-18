{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/430862801", "html_url": "https://github.com/tensorflow/tensorflow/issues/23013#issuecomment-430862801", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/23013", "id": 430862801, "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDg2MjgwMQ==", "user": {"login": "yongtang", "id": 6932348, "node_id": "MDQ6VXNlcjY5MzIzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6932348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yongtang", "html_url": "https://github.com/yongtang", "followers_url": "https://api.github.com/users/yongtang/followers", "following_url": "https://api.github.com/users/yongtang/following{/other_user}", "gists_url": "https://api.github.com/users/yongtang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yongtang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yongtang/subscriptions", "organizations_url": "https://api.github.com/users/yongtang/orgs", "repos_url": "https://api.github.com/users/yongtang/repos", "events_url": "https://api.github.com/users/yongtang/events{/privacy}", "received_events_url": "https://api.github.com/users/yongtang/received_events", "type": "User", "site_admin": false}, "created_at": "2018-10-18T03:25:29Z", "updated_at": "2018-10-18T03:25:29Z", "author_association": "MEMBER", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=18571501\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ptiwald\">@ptiwald</a> I tried with tf-nightly and it looks to be fine. Can you give it a try and see if the issue still exists?</p>\n<pre><code>root@ubuntu:/v# python3 -c 'import tensorflow as tf; print(tf.VERSION)'\n1.13.0-dev20181017\nroot@ubuntu:/v# python3 23013.py \n2018-10-18 03:23:24.961961: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n\nlstm:\n[array([[-0.4377299 ,  0.422243  ,  0.6181992 , -0.37643573,  0.15646869,\n         0.5818784 , -0.22846544, -0.42004013],\n       [ 0.1357246 ,  0.5908847 , -0.34941968, -0.34077594,  0.32373846,\n         0.03020209, -0.28660843,  0.5177108 ],\n       [ 0.07117409,  0.49272335, -0.04296476, -0.5014585 , -0.14278275,\n         0.5817479 ,  0.21550333,  0.63276565],\n       [ 0.22573894, -0.614386  , -0.33345684,  0.31065148,  0.23170364,\n        -0.44417936,  0.4421481 , -0.43041533],\n       [ 0.14171016, -0.02059168, -0.3175577 , -0.5303349 ,  0.1774472 ,\n        -0.3553942 , -0.40374607, -0.675953  ]], dtype=float32), array([[ 0.19912148, -0.44535518, -0.19622174, -0.321691  , -0.25978547,\n         0.30768728,  0.35949802, -0.5732561 ],\n       [-0.34544852,  0.13254327,  0.19136222,  0.56944406,  0.03732488,\n         0.631071  , -0.04842368, -0.3165805 ]], dtype=float32), array([0., 0., 1., 1., 0., 0., 0., 0.], dtype=float32)]\n\ndense:\n[array([[-0.35512227,  0.13987267],\n       [-0.42357975, -0.46372974]], dtype=float32), array([0., 0.], dtype=float32)]\n\nlstm:\n[array([[-0.4377299 ,  0.422243  ,  0.6181992 , -0.37643573,  0.15646869,\n         0.5818784 , -0.22846544, -0.42004013],\n       [ 0.1357246 ,  0.5908847 , -0.34941968, -0.34077594,  0.32373846,\n         0.03020209, -0.28660843,  0.5177108 ],\n       [ 0.07117409,  0.49272335, -0.04296476, -0.5014585 , -0.14278275,\n         0.5817479 ,  0.21550333,  0.63276565],\n       [ 0.22573894, -0.614386  , -0.33345684,  0.31065148,  0.23170364,\n        -0.44417936,  0.4421481 , -0.43041533],\n       [ 0.14171016, -0.02059168, -0.3175577 , -0.5303349 ,  0.1774472 ,\n        -0.3553942 , -0.40374607, -0.675953  ]], dtype=float32), array([[ 0.19912148, -0.44535518, -0.19622174, -0.321691  , -0.25978547,\n         0.30768728,  0.35949802, -0.5732561 ],\n       [-0.34544852,  0.13254327,  0.19136222,  0.56944406,  0.03732488,\n         0.631071  , -0.04842368, -0.3165805 ]], dtype=float32), array([0., 0., 1., 1., 0., 0., 0., 0.], dtype=float32)]\n\ndense:\n[array([[-0.35512227,  0.13987267],\n       [-0.42357975, -0.46372974]], dtype=float32), array([0., 0.], dtype=float32)]\nroot@ubuntu:/v# cat 23013.py \nimport tensorflow as tf\n\ninput_layer = tf.keras.layers.Input(shape=(None, 5))\nlstm_layer = tf.keras.layers.LSTM(units=2)(input_layer)\noutput_layer = tf.keras.layers.Dense(units=2, activation='softmax')(lstm_layer)\n\nmy_model = tf.keras.Model(input_layer, output_layer)\n\nmy_model.save_weights(\"weights_test/my_weights\")\n\nprint('\\nlstm:')\nprint(my_model.layers[1].get_weights())\nprint('\\ndense:')\nprint(my_model.layers[2].get_weights())\n\nnew_input_layer = tf.keras.layers.Input(shape=(None, 5))\nnew_lstm_layer = tf.keras.layers.LSTM(units=2)(new_input_layer)\nnew_output_layer = tf.keras.layers.Dense(units=2, activation='softmax')(new_lstm_layer)\n\nmy_new_model = tf.keras.Model(new_input_layer, new_output_layer)\nmy_new_model.load_weights(\"weights_test/my_weights\")\n\nprint('\\nlstm:')\nprint(my_new_model.layers[1].get_weights())\nprint('\\ndense:')\nprint(my_new_model.layers[2].get_weights())\nroot@ubuntu:/v# \n</code></pre>", "body_text": "@ptiwald I tried with tf-nightly and it looks to be fine. Can you give it a try and see if the issue still exists?\nroot@ubuntu:/v# python3 -c 'import tensorflow as tf; print(tf.VERSION)'\n1.13.0-dev20181017\nroot@ubuntu:/v# python3 23013.py \n2018-10-18 03:23:24.961961: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\n\nlstm:\n[array([[-0.4377299 ,  0.422243  ,  0.6181992 , -0.37643573,  0.15646869,\n         0.5818784 , -0.22846544, -0.42004013],\n       [ 0.1357246 ,  0.5908847 , -0.34941968, -0.34077594,  0.32373846,\n         0.03020209, -0.28660843,  0.5177108 ],\n       [ 0.07117409,  0.49272335, -0.04296476, -0.5014585 , -0.14278275,\n         0.5817479 ,  0.21550333,  0.63276565],\n       [ 0.22573894, -0.614386  , -0.33345684,  0.31065148,  0.23170364,\n        -0.44417936,  0.4421481 , -0.43041533],\n       [ 0.14171016, -0.02059168, -0.3175577 , -0.5303349 ,  0.1774472 ,\n        -0.3553942 , -0.40374607, -0.675953  ]], dtype=float32), array([[ 0.19912148, -0.44535518, -0.19622174, -0.321691  , -0.25978547,\n         0.30768728,  0.35949802, -0.5732561 ],\n       [-0.34544852,  0.13254327,  0.19136222,  0.56944406,  0.03732488,\n         0.631071  , -0.04842368, -0.3165805 ]], dtype=float32), array([0., 0., 1., 1., 0., 0., 0., 0.], dtype=float32)]\n\ndense:\n[array([[-0.35512227,  0.13987267],\n       [-0.42357975, -0.46372974]], dtype=float32), array([0., 0.], dtype=float32)]\n\nlstm:\n[array([[-0.4377299 ,  0.422243  ,  0.6181992 , -0.37643573,  0.15646869,\n         0.5818784 , -0.22846544, -0.42004013],\n       [ 0.1357246 ,  0.5908847 , -0.34941968, -0.34077594,  0.32373846,\n         0.03020209, -0.28660843,  0.5177108 ],\n       [ 0.07117409,  0.49272335, -0.04296476, -0.5014585 , -0.14278275,\n         0.5817479 ,  0.21550333,  0.63276565],\n       [ 0.22573894, -0.614386  , -0.33345684,  0.31065148,  0.23170364,\n        -0.44417936,  0.4421481 , -0.43041533],\n       [ 0.14171016, -0.02059168, -0.3175577 , -0.5303349 ,  0.1774472 ,\n        -0.3553942 , -0.40374607, -0.675953  ]], dtype=float32), array([[ 0.19912148, -0.44535518, -0.19622174, -0.321691  , -0.25978547,\n         0.30768728,  0.35949802, -0.5732561 ],\n       [-0.34544852,  0.13254327,  0.19136222,  0.56944406,  0.03732488,\n         0.631071  , -0.04842368, -0.3165805 ]], dtype=float32), array([0., 0., 1., 1., 0., 0., 0., 0.], dtype=float32)]\n\ndense:\n[array([[-0.35512227,  0.13987267],\n       [-0.42357975, -0.46372974]], dtype=float32), array([0., 0.], dtype=float32)]\nroot@ubuntu:/v# cat 23013.py \nimport tensorflow as tf\n\ninput_layer = tf.keras.layers.Input(shape=(None, 5))\nlstm_layer = tf.keras.layers.LSTM(units=2)(input_layer)\noutput_layer = tf.keras.layers.Dense(units=2, activation='softmax')(lstm_layer)\n\nmy_model = tf.keras.Model(input_layer, output_layer)\n\nmy_model.save_weights(\"weights_test/my_weights\")\n\nprint('\\nlstm:')\nprint(my_model.layers[1].get_weights())\nprint('\\ndense:')\nprint(my_model.layers[2].get_weights())\n\nnew_input_layer = tf.keras.layers.Input(shape=(None, 5))\nnew_lstm_layer = tf.keras.layers.LSTM(units=2)(new_input_layer)\nnew_output_layer = tf.keras.layers.Dense(units=2, activation='softmax')(new_lstm_layer)\n\nmy_new_model = tf.keras.Model(new_input_layer, new_output_layer)\nmy_new_model.load_weights(\"weights_test/my_weights\")\n\nprint('\\nlstm:')\nprint(my_new_model.layers[1].get_weights())\nprint('\\ndense:')\nprint(my_new_model.layers[2].get_weights())\nroot@ubuntu:/v#", "body": "@ptiwald I tried with tf-nightly and it looks to be fine. Can you give it a try and see if the issue still exists?\r\n```\r\nroot@ubuntu:/v# python3 -c 'import tensorflow as tf; print(tf.VERSION)'\r\n1.13.0-dev20181017\r\nroot@ubuntu:/v# python3 23013.py \r\n2018-10-18 03:23:24.961961: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA\r\n\r\nlstm:\r\n[array([[-0.4377299 ,  0.422243  ,  0.6181992 , -0.37643573,  0.15646869,\r\n         0.5818784 , -0.22846544, -0.42004013],\r\n       [ 0.1357246 ,  0.5908847 , -0.34941968, -0.34077594,  0.32373846,\r\n         0.03020209, -0.28660843,  0.5177108 ],\r\n       [ 0.07117409,  0.49272335, -0.04296476, -0.5014585 , -0.14278275,\r\n         0.5817479 ,  0.21550333,  0.63276565],\r\n       [ 0.22573894, -0.614386  , -0.33345684,  0.31065148,  0.23170364,\r\n        -0.44417936,  0.4421481 , -0.43041533],\r\n       [ 0.14171016, -0.02059168, -0.3175577 , -0.5303349 ,  0.1774472 ,\r\n        -0.3553942 , -0.40374607, -0.675953  ]], dtype=float32), array([[ 0.19912148, -0.44535518, -0.19622174, -0.321691  , -0.25978547,\r\n         0.30768728,  0.35949802, -0.5732561 ],\r\n       [-0.34544852,  0.13254327,  0.19136222,  0.56944406,  0.03732488,\r\n         0.631071  , -0.04842368, -0.3165805 ]], dtype=float32), array([0., 0., 1., 1., 0., 0., 0., 0.], dtype=float32)]\r\n\r\ndense:\r\n[array([[-0.35512227,  0.13987267],\r\n       [-0.42357975, -0.46372974]], dtype=float32), array([0., 0.], dtype=float32)]\r\n\r\nlstm:\r\n[array([[-0.4377299 ,  0.422243  ,  0.6181992 , -0.37643573,  0.15646869,\r\n         0.5818784 , -0.22846544, -0.42004013],\r\n       [ 0.1357246 ,  0.5908847 , -0.34941968, -0.34077594,  0.32373846,\r\n         0.03020209, -0.28660843,  0.5177108 ],\r\n       [ 0.07117409,  0.49272335, -0.04296476, -0.5014585 , -0.14278275,\r\n         0.5817479 ,  0.21550333,  0.63276565],\r\n       [ 0.22573894, -0.614386  , -0.33345684,  0.31065148,  0.23170364,\r\n        -0.44417936,  0.4421481 , -0.43041533],\r\n       [ 0.14171016, -0.02059168, -0.3175577 , -0.5303349 ,  0.1774472 ,\r\n        -0.3553942 , -0.40374607, -0.675953  ]], dtype=float32), array([[ 0.19912148, -0.44535518, -0.19622174, -0.321691  , -0.25978547,\r\n         0.30768728,  0.35949802, -0.5732561 ],\r\n       [-0.34544852,  0.13254327,  0.19136222,  0.56944406,  0.03732488,\r\n         0.631071  , -0.04842368, -0.3165805 ]], dtype=float32), array([0., 0., 1., 1., 0., 0., 0., 0.], dtype=float32)]\r\n\r\ndense:\r\n[array([[-0.35512227,  0.13987267],\r\n       [-0.42357975, -0.46372974]], dtype=float32), array([0., 0.], dtype=float32)]\r\nroot@ubuntu:/v# cat 23013.py \r\nimport tensorflow as tf\r\n\r\ninput_layer = tf.keras.layers.Input(shape=(None, 5))\r\nlstm_layer = tf.keras.layers.LSTM(units=2)(input_layer)\r\noutput_layer = tf.keras.layers.Dense(units=2, activation='softmax')(lstm_layer)\r\n\r\nmy_model = tf.keras.Model(input_layer, output_layer)\r\n\r\nmy_model.save_weights(\"weights_test/my_weights\")\r\n\r\nprint('\\nlstm:')\r\nprint(my_model.layers[1].get_weights())\r\nprint('\\ndense:')\r\nprint(my_model.layers[2].get_weights())\r\n\r\nnew_input_layer = tf.keras.layers.Input(shape=(None, 5))\r\nnew_lstm_layer = tf.keras.layers.LSTM(units=2)(new_input_layer)\r\nnew_output_layer = tf.keras.layers.Dense(units=2, activation='softmax')(new_lstm_layer)\r\n\r\nmy_new_model = tf.keras.Model(new_input_layer, new_output_layer)\r\nmy_new_model.load_weights(\"weights_test/my_weights\")\r\n\r\nprint('\\nlstm:')\r\nprint(my_new_model.layers[1].get_weights())\r\nprint('\\ndense:')\r\nprint(my_new_model.layers[2].get_weights())\r\nroot@ubuntu:/v# \r\n```"}