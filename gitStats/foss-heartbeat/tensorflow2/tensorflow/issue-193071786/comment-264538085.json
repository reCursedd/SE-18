{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/264538085", "html_url": "https://github.com/tensorflow/tensorflow/issues/6039#issuecomment-264538085", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/6039", "id": 264538085, "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDUzODA4NQ==", "user": {"login": "ekelsen", "id": 2533174, "node_id": "MDQ6VXNlcjI1MzMxNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2533174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ekelsen", "html_url": "https://github.com/ekelsen", "followers_url": "https://api.github.com/users/ekelsen/followers", "following_url": "https://api.github.com/users/ekelsen/following{/other_user}", "gists_url": "https://api.github.com/users/ekelsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ekelsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ekelsen/subscriptions", "organizations_url": "https://api.github.com/users/ekelsen/orgs", "repos_url": "https://api.github.com/users/ekelsen/repos", "events_url": "https://api.github.com/users/ekelsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ekelsen/received_events", "type": "User", "site_admin": false}, "created_at": "2016-12-02T19:17:21Z", "updated_at": "2016-12-02T19:22:08Z", "author_association": "CONTRIBUTOR", "body_html": "<p>I believe numpy implements a better (as in more numerically accurate) algorithm for sum as per this: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load issue title\" data-id=\"18995658\" data-permission-text=\"Issue title is private\" data-url=\"https://github.com/numpy/numpy/issues/3685\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/numpy/numpy/pull/3685/hovercard\" href=\"https://github.com/numpy/numpy/pull/3685\">numpy/numpy#3685</a></p>\n<p>I would prefer not to say that numpy's result is <em>exact</em> however.  Exactness when dealing with floating point is very hard :)</p>\n<p>The gpu version of tensorflow sum should be just as numerically stable.  The CPU version unfortunately is implemented in the naive way with a single accumulator.  I'll let Benoit comment on the likelihood of this improving.  A quick hack might be to use a 64-bit accumulator even if the input is 32-bit.</p>", "body_text": "I believe numpy implements a better (as in more numerically accurate) algorithm for sum as per this: numpy/numpy#3685\nI would prefer not to say that numpy's result is exact however.  Exactness when dealing with floating point is very hard :)\nThe gpu version of tensorflow sum should be just as numerically stable.  The CPU version unfortunately is implemented in the naive way with a single accumulator.  I'll let Benoit comment on the likelihood of this improving.  A quick hack might be to use a 64-bit accumulator even if the input is 32-bit.", "body": "I believe numpy implements a better (as in more numerically accurate) algorithm for sum as per this: https://github.com/numpy/numpy/pull/3685\r\n\r\nI would prefer not to say that numpy's result is _exact_ however.  Exactness when dealing with floating point is very hard :)\r\n\r\nThe gpu version of tensorflow sum should be just as numerically stable.  The CPU version unfortunately is implemented in the naive way with a single accumulator.  I'll let Benoit comment on the likelihood of this improving.  A quick hack might be to use a 64-bit accumulator even if the input is 32-bit.\r\n\r\n"}