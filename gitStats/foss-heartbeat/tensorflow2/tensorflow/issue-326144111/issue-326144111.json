{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19531", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19531/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19531/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/19531/events", "html_url": "https://github.com/tensorflow/tensorflow/pull/19531", "id": 326144111, "node_id": "MDExOlB1bGxSZXF1ZXN0MTkwMzA3MDA3", "number": 19531, "title": "Added 64 bit toolchain flag to CMake build instructions", "user": {"login": "smistad", "id": 176325, "node_id": "MDQ6VXNlcjE3NjMyNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/176325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smistad", "html_url": "https://github.com/smistad", "followers_url": "https://api.github.com/users/smistad/followers", "following_url": "https://api.github.com/users/smistad/following{/other_user}", "gists_url": "https://api.github.com/users/smistad/gists{/gist_id}", "starred_url": "https://api.github.com/users/smistad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smistad/subscriptions", "organizations_url": "https://api.github.com/users/smistad/orgs", "repos_url": "https://api.github.com/users/smistad/repos", "events_url": "https://api.github.com/users/smistad/events{/privacy}", "received_events_url": "https://api.github.com/users/smistad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 300136587, "node_id": "MDU6TGFiZWwzMDAxMzY1ODc=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/cla:%20yes", "name": "cla: yes", "color": "009800", "default": false}, {"id": 987666414, "node_id": "MDU6TGFiZWw5ODc2NjY0MTQ=", "url": "https://api.github.com/repos/tensorflow/tensorflow/labels/ready%20to%20pull", "name": "ready to pull", "color": "2cd643", "default": false}], "state": "closed", "locked": false, "assignee": {"login": "case540", "id": 1299636, "node_id": "MDQ6VXNlcjEyOTk2MzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1299636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/case540", "html_url": "https://github.com/case540", "followers_url": "https://api.github.com/users/case540/followers", "following_url": "https://api.github.com/users/case540/following{/other_user}", "gists_url": "https://api.github.com/users/case540/gists{/gist_id}", "starred_url": "https://api.github.com/users/case540/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/case540/subscriptions", "organizations_url": "https://api.github.com/users/case540/orgs", "repos_url": "https://api.github.com/users/case540/repos", "events_url": "https://api.github.com/users/case540/events{/privacy}", "received_events_url": "https://api.github.com/users/case540/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "case540", "id": 1299636, "node_id": "MDQ6VXNlcjEyOTk2MzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1299636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/case540", "html_url": "https://github.com/case540", "followers_url": "https://api.github.com/users/case540/followers", "following_url": "https://api.github.com/users/case540/following{/other_user}", "gists_url": "https://api.github.com/users/case540/gists{/gist_id}", "starred_url": "https://api.github.com/users/case540/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/case540/subscriptions", "organizations_url": "https://api.github.com/users/case540/orgs", "repos_url": "https://api.github.com/users/case540/repos", "events_url": "https://api.github.com/users/case540/events{/privacy}", "received_events_url": "https://api.github.com/users/case540/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 13, "created_at": "2018-05-24T14:19:38Z", "updated_at": "2018-10-08T14:59:48Z", "closed_at": "2018-10-08T14:59:48Z", "author_association": "CONTRIBUTOR", "pull_request": {"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/19531", "html_url": "https://github.com/tensorflow/tensorflow/pull/19531", "diff_url": "https://github.com/tensorflow/tensorflow/pull/19531.diff", "patch_url": "https://github.com/tensorflow/tensorflow/pull/19531.patch"}, "body_html": "<p>When building tensorflow on windows with CMake, using the 64 bit toolchain (compiler (cl.exe) and linker (link.exe)) is needed. Using the 32 bit toolchain often result in errors such as C1060 \"compiler out of heap space\" and C1002: \"compiler is out of heap space in pass 2\". There are several issues reported on this: <a href=\"https://github.com/tensorflow/tensorflow/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+compiler+is+out+of+heap+space\">https://github.com/tensorflow/tensorflow/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+compiler+is+out+of+heap+space</a></p>\n<p>The current README for CMake in tensorflow states that you can fix this by setting up a bunch of environment variables using the visual studio bat script: \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\amd64\\vcvarsall.bat\".</p>\n<p>However, I have discovered that this has no effect. If you look in task manager while you are compiling when using this bat script, you can see the task: \"Microsoft Compiler Driver <strong>(32 bit)</strong>\" running.<br>\nThe reason why this has no effect, is that CMake select which compiler and linker is used. It will output this to the console the first time you run configure with cmake. You will then see that CMAKE_CXX_COMPILER is set to \"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/<strong>x86</strong>_amd64/cl.exe\". The x86 part I assume means the 32 bit compiler is used, while the amd64 part means you are building an 64 bit application, two very different things. The fact that some people report that using the bat script actually helps, is most likely due to chance. I have observed several times that sometimes this error occurs, while other times it doesn't. I think this is due to multi-threading during compilation.</p>\n<p>Newer versions of CMake (&gt;= 3.8) allow you to specify the toolset host architecture to 64 bit using the flag:<br>\n<code>-Thost=x64</code>. This is documented here: <a href=\"https://cmake.org/cmake/help/v3.8/generator/Visual%20Studio%2014%202015.html\" rel=\"nofollow\">https://cmake.org/cmake/help/v3.8/generator/Visual%20Studio%2014%202015.html</a></p>\n<p>By adding this flag, I observe that CMAKE_CXX_COMPILER is set to \"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/<strong>amd64</strong>/cl.exe\" instead. Also, while compiling, the task manager now shows the task \"Microsoft Compiler Driver\", which is the 64 bit version of cl.exe, instead of \"Microsoft Compiler Driver <strong>(32 bit)</strong>\".</p>\n<p>Using this flag, I have not experienced \"compiler out of heap space\" issues anymore on neither Visual studio 2015 and 2017 on windows 10. I hope others can test this and, hopefully, verify this solution.</p>\n<p>I also updated the minimum cmake version required for windows to 3.8, which supports this host toolset flag.</p>", "body_text": "When building tensorflow on windows with CMake, using the 64 bit toolchain (compiler (cl.exe) and linker (link.exe)) is needed. Using the 32 bit toolchain often result in errors such as C1060 \"compiler out of heap space\" and C1002: \"compiler is out of heap space in pass 2\". There are several issues reported on this: https://github.com/tensorflow/tensorflow/issues?utf8=%E2%9C%93&q=is%3Aissue+compiler+is+out+of+heap+space\nThe current README for CMake in tensorflow states that you can fix this by setting up a bunch of environment variables using the visual studio bat script: \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\amd64\\vcvarsall.bat\".\nHowever, I have discovered that this has no effect. If you look in task manager while you are compiling when using this bat script, you can see the task: \"Microsoft Compiler Driver (32 bit)\" running.\nThe reason why this has no effect, is that CMake select which compiler and linker is used. It will output this to the console the first time you run configure with cmake. You will then see that CMAKE_CXX_COMPILER is set to \"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/x86_amd64/cl.exe\". The x86 part I assume means the 32 bit compiler is used, while the amd64 part means you are building an 64 bit application, two very different things. The fact that some people report that using the bat script actually helps, is most likely due to chance. I have observed several times that sometimes this error occurs, while other times it doesn't. I think this is due to multi-threading during compilation.\nNewer versions of CMake (>= 3.8) allow you to specify the toolset host architecture to 64 bit using the flag:\n-Thost=x64. This is documented here: https://cmake.org/cmake/help/v3.8/generator/Visual%20Studio%2014%202015.html\nBy adding this flag, I observe that CMAKE_CXX_COMPILER is set to \"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/amd64/cl.exe\" instead. Also, while compiling, the task manager now shows the task \"Microsoft Compiler Driver\", which is the 64 bit version of cl.exe, instead of \"Microsoft Compiler Driver (32 bit)\".\nUsing this flag, I have not experienced \"compiler out of heap space\" issues anymore on neither Visual studio 2015 and 2017 on windows 10. I hope others can test this and, hopefully, verify this solution.\nI also updated the minimum cmake version required for windows to 3.8, which supports this host toolset flag.", "body": "When building tensorflow on windows with CMake, using the 64 bit toolchain (compiler (cl.exe) and linker (link.exe)) is needed. Using the 32 bit toolchain often result in errors such as C1060 \"compiler out of heap space\" and C1002: \"compiler is out of heap space in pass 2\". There are several issues reported on this: https://github.com/tensorflow/tensorflow/issues?utf8=%E2%9C%93&q=is%3Aissue+compiler+is+out+of+heap+space\r\n\r\nThe current README for CMake in tensorflow states that you can fix this by setting up a bunch of environment variables using the visual studio bat script: \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\amd64\\vcvarsall.bat\".\r\n\r\nHowever, I have discovered that this has no effect. If you look in task manager while you are compiling when using this bat script, you can see the task: \"Microsoft Compiler Driver **(32 bit)**\" running. \r\nThe reason why this has no effect, is that CMake select which compiler and linker is used. It will output this to the console the first time you run configure with cmake. You will then see that CMAKE_CXX_COMPILER is set to \"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/**x86**_amd64/cl.exe\". The x86 part I assume means the 32 bit compiler is used, while the amd64 part means you are building an 64 bit application, two very different things. The fact that some people report that using the bat script actually helps, is most likely due to chance. I have observed several times that sometimes this error occurs, while other times it doesn't. I think this is due to multi-threading during compilation.\r\n\r\nNewer versions of CMake (>= 3.8) allow you to specify the toolset host architecture to 64 bit using the flag:\r\n`-Thost=x64`. This is documented here: https://cmake.org/cmake/help/v3.8/generator/Visual%20Studio%2014%202015.html\r\n\r\nBy adding this flag, I observe that CMAKE_CXX_COMPILER is set to \"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/**amd64**/cl.exe\" instead. Also, while compiling, the task manager now shows the task \"Microsoft Compiler Driver\", which is the 64 bit version of cl.exe, instead of \"Microsoft Compiler Driver **(32 bit)**\".\r\n\r\nUsing this flag, I have not experienced \"compiler out of heap space\" issues anymore on neither Visual studio 2015 and 2017 on windows 10. I hope others can test this and, hopefully, verify this solution.\r\n\r\nI also updated the minimum cmake version required for windows to 3.8, which supports this host toolset flag."}