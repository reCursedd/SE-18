{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/228827403", "html_url": "https://github.com/tensorflow/tensorflow/pull/3053#issuecomment-228827403", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/3053", "id": 228827403, "node_id": "MDEyOklzc3VlQ29tbWVudDIyODgyNzQwMw==", "user": {"login": "rmlarsen", "id": 16907534, "node_id": "MDQ6VXNlcjE2OTA3NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/16907534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmlarsen", "html_url": "https://github.com/rmlarsen", "followers_url": "https://api.github.com/users/rmlarsen/followers", "following_url": "https://api.github.com/users/rmlarsen/following{/other_user}", "gists_url": "https://api.github.com/users/rmlarsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmlarsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmlarsen/subscriptions", "organizations_url": "https://api.github.com/users/rmlarsen/orgs", "repos_url": "https://api.github.com/users/rmlarsen/repos", "events_url": "https://api.github.com/users/rmlarsen/events{/privacy}", "received_events_url": "https://api.github.com/users/rmlarsen/received_events", "type": "User", "site_admin": false}, "created_at": "2016-06-27T18:09:28Z", "updated_at": "2016-06-27T18:09:28Z", "author_association": "MEMBER", "body_html": "<p>You should be able to run the specific test with</p>\n<p>bazel test ${my_tf_dir}/tensorflow/core/kernels:colorspace_op_test</p>\n<p>In term of adding test coverage for all types in colorspace_op_test.cc, I would probably</p>\n<ol>\n<li>templatize class RGBToHSVOpTest on the data type</li>\n<li>replace the constructor with a MakeOp method (see scatter_op_test.cc for example)</li>\n<li>make the test code members of class RGBToHSVOpTest</li>\n</ol>\n<p>e.g. something along the lines of</p>\n<pre><code>template &lt;typename T&gt;\nclass RGBToHSVOpTest : public OpsTestBase {\n protected:\n  void MakeOp(DataType datatype) {\n    TF_EXPECT_OK(NodeDefBuilder(\"rgb_to_hsv_op\", \"RGBToHSV\")\n                     .Input(FakeInput(datatype))\n                     .Finalize(node_def()));\n    TF_EXPECT_OK(InitOp());\n  }\n\n  void CheckBlack(DataType datatype) {\n      // Black pixel should map to hsv = [0,0,0]\n    AddInputFromArray&lt;float&gt;(TensorShape({3}), {T(0), T(0), T(0)});\n    TF_ASSERT_OK(RunOpKernel());\n\n  Tensor expected(allocator(), datatype, TensorShape({3}));\n  test::FillValues&lt;T&gt;(&amp;expected, {T(0.0), T(0.0), T(0.0)});\n  test::ExpectTensorEqual&lt;T&gt;(expected, *GetOutput(0));\n  }\n\n  void  CheckGray(DataType datatype) {\n    ...\n  }\n};\n\ntypedef RGBToHSVOpTest&lt;float&gt; RGBToHSVOpTest_float;\n\nTEST_F(RGBToHSVOpTest_float, CheckBlack_float) {\n  MakeOp(DT_FLOAT);\n  CheckBlack(DT_FLOAT);\n}\n\n...\n\n// You can use macros to get rid of the duplication here...\ntypedef RGBToHSVOpTest&lt;double&gt; RGBToHSVOpTest_double;\n\nTEST_F(RGBToHSVOpTest_double, CheckBlack_double) {\n  MakeOp(DT_DOUBLE);\n  CheckBlack(DT_DOUBLE);\n}\n\n</code></pre>", "body_text": "You should be able to run the specific test with\nbazel test ${my_tf_dir}/tensorflow/core/kernels:colorspace_op_test\nIn term of adding test coverage for all types in colorspace_op_test.cc, I would probably\n\ntemplatize class RGBToHSVOpTest on the data type\nreplace the constructor with a MakeOp method (see scatter_op_test.cc for example)\nmake the test code members of class RGBToHSVOpTest\n\ne.g. something along the lines of\ntemplate <typename T>\nclass RGBToHSVOpTest : public OpsTestBase {\n protected:\n  void MakeOp(DataType datatype) {\n    TF_EXPECT_OK(NodeDefBuilder(\"rgb_to_hsv_op\", \"RGBToHSV\")\n                     .Input(FakeInput(datatype))\n                     .Finalize(node_def()));\n    TF_EXPECT_OK(InitOp());\n  }\n\n  void CheckBlack(DataType datatype) {\n      // Black pixel should map to hsv = [0,0,0]\n    AddInputFromArray<float>(TensorShape({3}), {T(0), T(0), T(0)});\n    TF_ASSERT_OK(RunOpKernel());\n\n  Tensor expected(allocator(), datatype, TensorShape({3}));\n  test::FillValues<T>(&expected, {T(0.0), T(0.0), T(0.0)});\n  test::ExpectTensorEqual<T>(expected, *GetOutput(0));\n  }\n\n  void  CheckGray(DataType datatype) {\n    ...\n  }\n};\n\ntypedef RGBToHSVOpTest<float> RGBToHSVOpTest_float;\n\nTEST_F(RGBToHSVOpTest_float, CheckBlack_float) {\n  MakeOp(DT_FLOAT);\n  CheckBlack(DT_FLOAT);\n}\n\n...\n\n// You can use macros to get rid of the duplication here...\ntypedef RGBToHSVOpTest<double> RGBToHSVOpTest_double;\n\nTEST_F(RGBToHSVOpTest_double, CheckBlack_double) {\n  MakeOp(DT_DOUBLE);\n  CheckBlack(DT_DOUBLE);\n}", "body": "You should be able to run the specific test with\n\nbazel test ${my_tf_dir}/tensorflow/core/kernels:colorspace_op_test\n\nIn term of adding test coverage for all types in colorspace_op_test.cc, I would probably \n1. templatize class RGBToHSVOpTest on the data type \n2. replace the constructor with a MakeOp method (see scatter_op_test.cc for example)\n3. make the test code members of class RGBToHSVOpTest \n\ne.g. something along the lines of\n\n```\ntemplate <typename T>\nclass RGBToHSVOpTest : public OpsTestBase {\n protected:\n  void MakeOp(DataType datatype) {\n    TF_EXPECT_OK(NodeDefBuilder(\"rgb_to_hsv_op\", \"RGBToHSV\")\n                     .Input(FakeInput(datatype))\n                     .Finalize(node_def()));\n    TF_EXPECT_OK(InitOp());\n  }\n\n  void CheckBlack(DataType datatype) {\n      // Black pixel should map to hsv = [0,0,0]\n    AddInputFromArray<float>(TensorShape({3}), {T(0), T(0), T(0)});\n    TF_ASSERT_OK(RunOpKernel());\n\n  Tensor expected(allocator(), datatype, TensorShape({3}));\n  test::FillValues<T>(&expected, {T(0.0), T(0.0), T(0.0)});\n  test::ExpectTensorEqual<T>(expected, *GetOutput(0));\n  }\n\n  void  CheckGray(DataType datatype) {\n    ...\n  }\n};\n\ntypedef RGBToHSVOpTest<float> RGBToHSVOpTest_float;\n\nTEST_F(RGBToHSVOpTest_float, CheckBlack_float) {\n  MakeOp(DT_FLOAT);\n  CheckBlack(DT_FLOAT);\n}\n\n...\n\n// You can use macros to get rid of the duplication here...\ntypedef RGBToHSVOpTest<double> RGBToHSVOpTest_double;\n\nTEST_F(RGBToHSVOpTest_double, CheckBlack_double) {\n  MakeOp(DT_DOUBLE);\n  CheckBlack(DT_DOUBLE);\n}\n\n```\n"}