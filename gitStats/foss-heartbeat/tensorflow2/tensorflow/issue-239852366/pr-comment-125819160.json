{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/125819160", "pull_request_review_id": 48243277, "id": 125819160, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTgxOTE2MA==", "diff_hunk": "@@ -0,0 +1,147 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow.op;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.tensorflow.Operation;\n+import org.tensorflow.OperationBuilder;\n+import org.tensorflow.Output;\n+\n+/**\n+ * A helper for wrapping a new operation.\n+ *\n+ * <p>It provides utilities for wrappers to build a single operation and collect its output(s)\n+ * afterward.\n+ *\n+ * <pre>{@code\n+ * public final class Unique extends AbstractSingleOp {\n+ *    ...\n+ *    public static Unique create(Scope s, Input x) {\n+ *        OperationHelper unique = OperationHelper.create(s, \"Unique\");", "path": "tensorflow/java/src/main/java/org/tensorflow/op/OperationHelper.java", "position": null, "original_position": 36, "commit_id": "aba6ba38de751f1cf140932d8b5b1dafa80898fb", "original_commit_id": "2913e5310826918d070066b035de2dec22cc226c", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "The vast majority of operations will be simpler ones (i.e, not involve lists). Furthermore, even for the operations that produce lists of tensors as named outputs, it appears the contents of `nextOutputList()` is simple enough that unrolling it will make the custom `Op`s code easier to follow too.\r\n\r\nI understand that this is judgement on aesthetics and thus there is no right or wrong, just differing opinions.  I'm of the opinion that optimizing for readability of the code for the common case is worth the few extra lines for list-producing operation wrappers. Furthermore, if a helper is really needed, perhaps it is better placed as a method on the `Operation` class (e.g., `Operation.outputListStart(String name)` or something, that returns the first output index at which the named output's elements begin), instead of having this helper class that is essentially wrapping an `Operation` object and a counter.\r\n\r\nAlso, the fact that we'll have a public class with a name `OperationHelper` makes me a bit uneasy. Something about the name isn't descriptive enough, which makes me feel that it shouldn't be a public API class.", "created_at": "2017-07-06T06:21:09Z", "updated_at": "2017-07-12T16:35:33Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11188#discussion_r125819160", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11188", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/125819160"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11188#discussion_r125819160"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11188"}}, "body_html": "<p>The vast majority of operations will be simpler ones (i.e, not involve lists). Furthermore, even for the operations that produce lists of tensors as named outputs, it appears the contents of <code>nextOutputList()</code> is simple enough that unrolling it will make the custom <code>Op</code>s code easier to follow too.</p>\n<p>I understand that this is judgement on aesthetics and thus there is no right or wrong, just differing opinions.  I'm of the opinion that optimizing for readability of the code for the common case is worth the few extra lines for list-producing operation wrappers. Furthermore, if a helper is really needed, perhaps it is better placed as a method on the <code>Operation</code> class (e.g., <code>Operation.outputListStart(String name)</code> or something, that returns the first output index at which the named output's elements begin), instead of having this helper class that is essentially wrapping an <code>Operation</code> object and a counter.</p>\n<p>Also, the fact that we'll have a public class with a name <code>OperationHelper</code> makes me a bit uneasy. Something about the name isn't descriptive enough, which makes me feel that it shouldn't be a public API class.</p>", "body_text": "The vast majority of operations will be simpler ones (i.e, not involve lists). Furthermore, even for the operations that produce lists of tensors as named outputs, it appears the contents of nextOutputList() is simple enough that unrolling it will make the custom Ops code easier to follow too.\nI understand that this is judgement on aesthetics and thus there is no right or wrong, just differing opinions.  I'm of the opinion that optimizing for readability of the code for the common case is worth the few extra lines for list-producing operation wrappers. Furthermore, if a helper is really needed, perhaps it is better placed as a method on the Operation class (e.g., Operation.outputListStart(String name) or something, that returns the first output index at which the named output's elements begin), instead of having this helper class that is essentially wrapping an Operation object and a counter.\nAlso, the fact that we'll have a public class with a name OperationHelper makes me a bit uneasy. Something about the name isn't descriptive enough, which makes me feel that it shouldn't be a public API class.", "in_reply_to_id": 125695596}