{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/125737593", "pull_request_review_id": 48156543, "id": 125737593, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTczNzU5Mw==", "diff_hunk": "@@ -0,0 +1,147 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow.op;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.tensorflow.Operation;\n+import org.tensorflow.OperationBuilder;\n+import org.tensorflow.Output;\n+\n+/**\n+ * A helper for wrapping a new operation.\n+ *\n+ * <p>It provides utilities for wrappers to build a single operation and collect its output(s)\n+ * afterward.\n+ *\n+ * <pre>{@code\n+ * public final class Unique extends AbstractSingleOp {\n+ *    ...\n+ *    public static Unique create(Scope s, Input x) {\n+ *        OperationHelper unique = OperationHelper.create(s, \"Unique\");", "path": "tensorflow/java/src/main/java/org/tensorflow/op/OperationHelper.java", "position": null, "original_position": 36, "commit_id": "aba6ba38de751f1cf140932d8b5b1dafa80898fb", "original_commit_id": "2913e5310826918d070066b035de2dec22cc226c", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "body": "The reason of this helper is that it simplifies the code required to retrieve multiple outputs from some operation. The trivial case is having multiple single outputs, where like you suggested below, this simple code will do the job:\r\n```\r\ny = unique.operation().output(0);\r\nidx = unique.operation().output(1);\r\n```\r\nBut it gets complicated when output list are involved, where the length of the list is unknown at compile time. For example, collecting outputs from the `ops.parsing().ParseExample` operation ends up with code way more complex than the previous example.\r\n\r\nNow, since the code will be generated, writing complex code might not been an issue. But the intention here is to allow users writing custom ops to benefit from those helper classes, so they can avoid this hassle. \r\n", "created_at": "2017-07-05T19:37:13Z", "updated_at": "2017-07-12T16:35:33Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11188#discussion_r125737593", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11188", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/125737593"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11188#discussion_r125737593"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11188"}}, "body_html": "<p>The reason of this helper is that it simplifies the code required to retrieve multiple outputs from some operation. The trivial case is having multiple single outputs, where like you suggested below, this simple code will do the job:</p>\n<pre><code>y = unique.operation().output(0);\nidx = unique.operation().output(1);\n</code></pre>\n<p>But it gets complicated when output list are involved, where the length of the list is unknown at compile time. For example, collecting outputs from the <code>ops.parsing().ParseExample</code> operation ends up with code way more complex than the previous example.</p>\n<p>Now, since the code will be generated, writing complex code might not been an issue. But the intention here is to allow users writing custom ops to benefit from those helper classes, so they can avoid this hassle.</p>", "body_text": "The reason of this helper is that it simplifies the code required to retrieve multiple outputs from some operation. The trivial case is having multiple single outputs, where like you suggested below, this simple code will do the job:\ny = unique.operation().output(0);\nidx = unique.operation().output(1);\n\nBut it gets complicated when output list are involved, where the length of the list is unknown at compile time. For example, collecting outputs from the ops.parsing().ParseExample operation ends up with code way more complex than the previous example.\nNow, since the code will be generated, writing complex code might not been an issue. But the intention here is to allow users writing custom ops to benefit from those helper classes, so they can avoid this hassle.", "in_reply_to_id": 125695596}