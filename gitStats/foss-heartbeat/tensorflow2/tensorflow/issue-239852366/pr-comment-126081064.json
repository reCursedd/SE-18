{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/126081064", "pull_request_review_id": 48526029, "id": 126081064, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjA4MTA2NA==", "diff_hunk": "@@ -0,0 +1,177 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow.op;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.Test;\n+import org.tensorflow.Graph;\n+import org.tensorflow.Operand;\n+import org.tensorflow.Operation;\n+import org.tensorflow.Output;\n+import org.tensorflow.TestUtil;\n+\n+public class PrimitiveOpTest {\n+\n+  @Test\n+  public void createOp() {\n+    try (Graph g = new Graph()) {\n+      Scope s = new Scope(g);\n+      Output array = TestUtil.constant(g, \"array\", new int[2][2]);\n+\n+      TestOp test = TestOp.create(s, array);\n+      assertNotNull(test.operation);\n+\n+      Output result = test.output();\n+      assertNotNull(result);\n+      assertSame(test.operation, result.op());\n+      assertEquals(2, result.shape().size(0)); // 2 dims\n+    }\n+  }\n+\n+  @Test\n+  public void createListOp() {\n+    try (Graph g = new Graph()) {\n+      Scope s = new Scope(g);\n+      Output matrix = TestUtil.constant(g, \"matrix\", new int[2][2]);\n+      Output array = TestUtil.constant(g, \"array\", new int[2]);\n+\n+      TestListOp test = TestListOp.create(s, Arrays.asList(matrix, array));\n+      assertNotNull(test.operation);\n+\n+      List<Output> result = test.output();\n+      assertNotNull(test.output());\n+      assertEquals(2, result.size());\n+      assertEquals(2, result.get(0).asOutput().shape().size(0)); // 2 dims\n+      assertEquals(1, result.get(1).asOutput().shape().size(0)); // 1 dim\n+    }\n+  }\n+\n+  @Test\n+  public void overrideOpName() {\n+    try (Graph g = new Graph()) {\n+      Scope s = new Scope(g);\n+      Output array = TestUtil.constant(g, \"array\", new int[2]);\n+\n+      TestOp test1 = TestOp.create(s, array);\n+      assertEquals(\"shape\", test1.operation.name());\n+\n+      TestOp test2 = TestOp.create(s.withName(\"Test\"), array);\n+      assertEquals(\"Test\", test2.operation.name());\n+    }\n+  }\n+\n+  @Test\n+  public void equalsHashcode() {\n+    try (Graph g = new Graph()) {\n+      Scope s = new Scope(g);\n+      Output array = TestUtil.constant(g, \"array\", new int[2]);\n+\n+      TestOp test1 = TestOp.create(s, array);", "path": "tensorflow/java/src/test/java/org/tensorflow/op/PrimitiveOpTest.java", "position": null, "original_position": 94, "commit_id": "aba6ba38de751f1cf140932d8b5b1dafa80898fb", "original_commit_id": "02a6b9d99ab9480dd3f28392a2315f44cabbf2c3", "user": {"login": "asimshankar", "id": 16018, "node_id": "MDQ6VXNlcjE2MDE4", "avatar_url": "https://avatars2.githubusercontent.com/u/16018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asimshankar", "html_url": "https://github.com/asimshankar", "followers_url": "https://api.github.com/users/asimshankar/followers", "following_url": "https://api.github.com/users/asimshankar/following{/other_user}", "gists_url": "https://api.github.com/users/asimshankar/gists{/gist_id}", "starred_url": "https://api.github.com/users/asimshankar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asimshankar/subscriptions", "organizations_url": "https://api.github.com/users/asimshankar/orgs", "repos_url": "https://api.github.com/users/asimshankar/repos", "events_url": "https://api.github.com/users/asimshankar/events{/privacy}", "received_events_url": "https://api.github.com/users/asimshankar/received_events", "type": "User", "site_admin": false}, "body": "Instead of `TestOp`, I'd suggest we use the type `PrimitiveOp` for the variables. Since this is a test harness for the `PrimitiveOp` class, let's test its interface methods.", "created_at": "2017-07-07T06:59:39Z", "updated_at": "2017-07-12T16:35:33Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11188#discussion_r126081064", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11188", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/126081064"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11188#discussion_r126081064"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11188"}}, "body_html": "<p>Instead of <code>TestOp</code>, I'd suggest we use the type <code>PrimitiveOp</code> for the variables. Since this is a test harness for the <code>PrimitiveOp</code> class, let's test its interface methods.</p>", "body_text": "Instead of TestOp, I'd suggest we use the type PrimitiveOp for the variables. Since this is a test harness for the PrimitiveOp class, let's test its interface methods."}