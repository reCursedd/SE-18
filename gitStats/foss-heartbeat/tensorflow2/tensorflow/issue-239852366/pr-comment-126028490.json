{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/126028490", "pull_request_review_id": 48476913, "id": 126028490, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjAyODQ5MA==", "diff_hunk": "@@ -0,0 +1,147 @@\n+/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+==============================================================================*/\n+\n+package org.tensorflow.op;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.tensorflow.Operation;\n+import org.tensorflow.OperationBuilder;\n+import org.tensorflow.Output;\n+\n+/**\n+ * A helper for wrapping a new operation.\n+ *\n+ * <p>It provides utilities for wrappers to build a single operation and collect its output(s)\n+ * afterward.\n+ *\n+ * <pre>{@code\n+ * public final class Unique extends AbstractSingleOp {\n+ *    ...\n+ *    public static Unique create(Scope s, Input x) {\n+ *        OperationHelper unique = OperationHelper.create(s, \"Unique\");", "path": "tensorflow/java/src/main/java/org/tensorflow/op/OperationHelper.java", "position": null, "original_position": 36, "commit_id": "aba6ba38de751f1cf140932d8b5b1dafa80898fb", "original_commit_id": "2913e5310826918d070066b035de2dec22cc226c", "user": {"login": "karllessard", "id": 10109534, "node_id": "MDQ6VXNlcjEwMTA5NTM0", "avatar_url": "https://avatars3.githubusercontent.com/u/10109534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karllessard", "html_url": "https://github.com/karllessard", "followers_url": "https://api.github.com/users/karllessard/followers", "following_url": "https://api.github.com/users/karllessard/following{/other_user}", "gists_url": "https://api.github.com/users/karllessard/gists{/gist_id}", "starred_url": "https://api.github.com/users/karllessard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karllessard/subscriptions", "organizations_url": "https://api.github.com/users/karllessard/orgs", "repos_url": "https://api.github.com/users/karllessard/repos", "events_url": "https://api.github.com/users/karllessard/events{/privacy}", "received_events_url": "https://api.github.com/users/karllessard/received_events", "type": "User", "site_admin": false}, "body": "Not a big fan of `OperationHelper` neither... it is kind of a \"enhanced operation\" that does different things around one operation. Or an \"output collector\" if we stick to the nextOutput* part.\r\n\r\nBut I'm not opposed to drop it for now and maybe reintroduce something when custom/default ops will be written. \r\n\r\nMay I change your suggestion of `Operation.outputListStart(String name)` to something like `Operation.outputs(int start, int length)` returning a `Output[]`? I think it leaves the `Operation` namespace clean and avoid at least the need to iterate at many places.", "created_at": "2017-07-06T22:07:49Z", "updated_at": "2017-07-12T16:35:33Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/11188#discussion_r126028490", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11188", "author_association": "CONTRIBUTOR", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/126028490"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/11188#discussion_r126028490"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/11188"}}, "body_html": "<p>Not a big fan of <code>OperationHelper</code> neither... it is kind of a \"enhanced operation\" that does different things around one operation. Or an \"output collector\" if we stick to the nextOutput* part.</p>\n<p>But I'm not opposed to drop it for now and maybe reintroduce something when custom/default ops will be written.</p>\n<p>May I change your suggestion of <code>Operation.outputListStart(String name)</code> to something like <code>Operation.outputs(int start, int length)</code> returning a <code>Output[]</code>? I think it leaves the <code>Operation</code> namespace clean and avoid at least the need to iterate at many places.</p>", "body_text": "Not a big fan of OperationHelper neither... it is kind of a \"enhanced operation\" that does different things around one operation. Or an \"output collector\" if we stick to the nextOutput* part.\nBut I'm not opposed to drop it for now and maybe reintroduce something when custom/default ops will be written.\nMay I change your suggestion of Operation.outputListStart(String name) to something like Operation.outputs(int start, int length) returning a Output[]? I think it leaves the Operation namespace clean and avoid at least the need to iterate at many places.", "in_reply_to_id": 125695596}