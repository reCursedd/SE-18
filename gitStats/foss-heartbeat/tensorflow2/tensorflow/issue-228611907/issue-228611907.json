{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9906", "repository_url": "https://api.github.com/repos/tensorflow/tensorflow", "labels_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9906/labels{/name}", "comments_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9906/comments", "events_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/9906/events", "html_url": "https://github.com/tensorflow/tensorflow/issues/9906", "id": 228611907, "node_id": "MDU6SXNzdWUyMjg2MTE5MDc=", "number": 9906, "title": "tf.import_graph_def() restricts the order of nodes in graph proto.", "user": {"login": "sj6077", "id": 2465713, "node_id": "MDQ6VXNlcjI0NjU3MTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/2465713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sj6077", "html_url": "https://github.com/sj6077", "followers_url": "https://api.github.com/users/sj6077/followers", "following_url": "https://api.github.com/users/sj6077/following{/other_user}", "gists_url": "https://api.github.com/users/sj6077/gists{/gist_id}", "starred_url": "https://api.github.com/users/sj6077/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sj6077/subscriptions", "organizations_url": "https://api.github.com/users/sj6077/orgs", "repos_url": "https://api.github.com/users/sj6077/repos", "events_url": "https://api.github.com/users/sj6077/events{/privacy}", "received_events_url": "https://api.github.com/users/sj6077/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "zhangyaobit", "id": 1034716, "node_id": "MDQ6VXNlcjEwMzQ3MTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1034716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhangyaobit", "html_url": "https://github.com/zhangyaobit", "followers_url": "https://api.github.com/users/zhangyaobit/followers", "following_url": "https://api.github.com/users/zhangyaobit/following{/other_user}", "gists_url": "https://api.github.com/users/zhangyaobit/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhangyaobit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhangyaobit/subscriptions", "organizations_url": "https://api.github.com/users/zhangyaobit/orgs", "repos_url": "https://api.github.com/users/zhangyaobit/repos", "events_url": "https://api.github.com/users/zhangyaobit/events{/privacy}", "received_events_url": "https://api.github.com/users/zhangyaobit/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "zhangyaobit", "id": 1034716, "node_id": "MDQ6VXNlcjEwMzQ3MTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1034716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhangyaobit", "html_url": "https://github.com/zhangyaobit", "followers_url": "https://api.github.com/users/zhangyaobit/followers", "following_url": "https://api.github.com/users/zhangyaobit/following{/other_user}", "gists_url": "https://api.github.com/users/zhangyaobit/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhangyaobit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhangyaobit/subscriptions", "organizations_url": "https://api.github.com/users/zhangyaobit/orgs", "repos_url": "https://api.github.com/users/zhangyaobit/repos", "events_url": "https://api.github.com/users/zhangyaobit/events{/privacy}", "received_events_url": "https://api.github.com/users/zhangyaobit/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 19, "created_at": "2017-05-15T05:49:17Z", "updated_at": "2018-01-09T14:13:56Z", "closed_at": "2017-09-19T02:57:08Z", "author_association": "CONTRIBUTOR", "body_html": "<hr>\n<h3>System information</h3>\n<ul>\n<li><strong>Have I written custom code (as opposed to using a stock example script provided in TensorFlow)</strong>: Yes</li>\n<li><strong>OS Platform and Distribution (e.g., Linux Ubuntu 16.04)</strong>:<br>\nLinux Ubuntu 14.04</li>\n<li><strong>TensorFlow installed from (source or binary)</strong>:<br>\nsource</li>\n<li><strong>TensorFlow version (use command below)</strong>:<br>\ncommit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/tensorflow/tensorflow/commit/3bee923c93f9624ce3abf8d55173be66a7755545/hovercard\" href=\"https://github.com/tensorflow/tensorflow/commit/3bee923c93f9624ce3abf8d55173be66a7755545\"><tt>3bee923</tt></a></li>\n<li><strong>Bazel version (if compiling from source)</strong>:<br>\n0.4.5</li>\n<li><strong>CUDA/cuDNN version</strong>:<br>\ncuda 8.0/cudnn 5.1.5</li>\n<li><strong>GPU model and memory</strong>:<br>\nTesla P40</li>\n<li><strong>Exact command to reproduce</strong>:</li>\n</ul>\n<h3>Describe the problem</h3>\n<p>I used auto parallel optimizer in grappler for cifar10 example, but grappler changes the order of nodes in graph proto. It causes the failure of import_graph_def, because ops.set_shapes_for_outputs(op), which is line 407 of tensorflow/tensorflow/python/framework/importer.py is failed. This is because all of the input nodes must be defined before to define a node. importer restricts the order of nodes for graph definition proto, but I think importer shoud be flexible to the order of nodes.</p>\n<h3>Source code / logs</h3>\n<pre><code>with tf.Graph().as_default() as graph:\n  #global_step = tf.contrib.framework.get_or_create_global_step()\n  global_step = tf.get_variable(\n      'global_step', [], dtype=tf.int32,\n      initializer=tf.constant_initializer(0), trainable=False)\n\n  # Get images and labels for CIFAR-10.\n  images, labels = cifar10.distorted_inputs()\n\n  # Build a Graph that computes the logits predictions from the\n  # inference model.\n  logits = cifar10.inference(images)\n\n  # Calculate loss.\n  loss = cifar10.loss(logits, labels)\n\n  # Build a Graph that trains the model with one batch of examples and\n  # updates the model parameters.\n  train_op = cifar10.train(loss, global_step)\n\n  init_op = tf.global_variables_initializer()\n\n  queue_runners = []\n  for qr in ops.get_collection(ops.GraphKeys.QUEUE_RUNNERS):\n    queue_runners.append(qr.to_proto())\n\n  mg = meta_graph.create_meta_graph_def(graph=graph)\n\n#Auto-parallel\nrewriter_config = rewriter_config_pb2.RewriterConfig()\nrewriter_config.optimizers.append('autoparallel')\nrewriter_config.auto_parallel.num_replicas = FLAGS.num_gpus\n\ngraph_def = tf_optimizer.OptimizeGraph(rewriter_config, mg)\n\nwith tf.Graph().as_default() as g:\n  tf.import_graph_def(graph_def=graph_def, name='')\n</code></pre>\n<p>This is the log</p>\n<pre><code> File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/platform/app.py\", line 48, in run\n    _sys.exit(main(_sys.argv[:1] + flags_passthrough))\n  File \"tensorflow_rdag/examples/distributed/cifar10/cifar10_in_graph_auto_parallel.py\", line 157, in main\n    train()\n  File \"tensorflow_rdag/examples/distributed/cifar10/cifar10_in_graph_auto_parallel.py\", line 105, in train\n    tf.import_graph_def(graph_def=graph_def, name='')\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/importer.py\", line 404, in import_graph_def\n    ops.set_shapes_for_outputs(op)\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1723, in set_shapes_for_outputs\n    shapes = shape_func(op)\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1673, in call_with_requiring\n    return call_cpp_shape_fn(op, require_shape_fn=True)\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/common_shapes.py\", line 610, in call_cpp_shape_fn\n    debug_python_shape_fn, require_shape_fn)\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/common_shapes.py\", line 653, in _call_cpp_shape_fn_impl\n    v = tensor_util.constant_value(op.inputs[idx])\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/tensor_util.py\", line 710, in constant_value\n    ret = _ConstantValue(tensor)\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/tensor_util.py\", line 676, in _ConstantValue\n    fill_value = constant_value(tensor.op.inputs[1])\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1443, in __getitem__\n    return self._op._inputs[i]\nIndexError: list index out of range\n\n</code></pre>", "body_text": "System information\n\nHave I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes\nOS Platform and Distribution (e.g., Linux Ubuntu 16.04):\nLinux Ubuntu 14.04\nTensorFlow installed from (source or binary):\nsource\nTensorFlow version (use command below):\ncommit 3bee923\nBazel version (if compiling from source):\n0.4.5\nCUDA/cuDNN version:\ncuda 8.0/cudnn 5.1.5\nGPU model and memory:\nTesla P40\nExact command to reproduce:\n\nDescribe the problem\nI used auto parallel optimizer in grappler for cifar10 example, but grappler changes the order of nodes in graph proto. It causes the failure of import_graph_def, because ops.set_shapes_for_outputs(op), which is line 407 of tensorflow/tensorflow/python/framework/importer.py is failed. This is because all of the input nodes must be defined before to define a node. importer restricts the order of nodes for graph definition proto, but I think importer shoud be flexible to the order of nodes.\nSource code / logs\nwith tf.Graph().as_default() as graph:\n  #global_step = tf.contrib.framework.get_or_create_global_step()\n  global_step = tf.get_variable(\n      'global_step', [], dtype=tf.int32,\n      initializer=tf.constant_initializer(0), trainable=False)\n\n  # Get images and labels for CIFAR-10.\n  images, labels = cifar10.distorted_inputs()\n\n  # Build a Graph that computes the logits predictions from the\n  # inference model.\n  logits = cifar10.inference(images)\n\n  # Calculate loss.\n  loss = cifar10.loss(logits, labels)\n\n  # Build a Graph that trains the model with one batch of examples and\n  # updates the model parameters.\n  train_op = cifar10.train(loss, global_step)\n\n  init_op = tf.global_variables_initializer()\n\n  queue_runners = []\n  for qr in ops.get_collection(ops.GraphKeys.QUEUE_RUNNERS):\n    queue_runners.append(qr.to_proto())\n\n  mg = meta_graph.create_meta_graph_def(graph=graph)\n\n#Auto-parallel\nrewriter_config = rewriter_config_pb2.RewriterConfig()\nrewriter_config.optimizers.append('autoparallel')\nrewriter_config.auto_parallel.num_replicas = FLAGS.num_gpus\n\ngraph_def = tf_optimizer.OptimizeGraph(rewriter_config, mg)\n\nwith tf.Graph().as_default() as g:\n  tf.import_graph_def(graph_def=graph_def, name='')\n\nThis is the log\n File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/platform/app.py\", line 48, in run\n    _sys.exit(main(_sys.argv[:1] + flags_passthrough))\n  File \"tensorflow_rdag/examples/distributed/cifar10/cifar10_in_graph_auto_parallel.py\", line 157, in main\n    train()\n  File \"tensorflow_rdag/examples/distributed/cifar10/cifar10_in_graph_auto_parallel.py\", line 105, in train\n    tf.import_graph_def(graph_def=graph_def, name='')\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/importer.py\", line 404, in import_graph_def\n    ops.set_shapes_for_outputs(op)\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1723, in set_shapes_for_outputs\n    shapes = shape_func(op)\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1673, in call_with_requiring\n    return call_cpp_shape_fn(op, require_shape_fn=True)\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/common_shapes.py\", line 610, in call_cpp_shape_fn\n    debug_python_shape_fn, require_shape_fn)\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/common_shapes.py\", line 653, in _call_cpp_shape_fn_impl\n    v = tensor_util.constant_value(op.inputs[idx])\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/tensor_util.py\", line 710, in constant_value\n    ret = _ConstantValue(tensor)\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/tensor_util.py\", line 676, in _ConstantValue\n    fill_value = constant_value(tensor.op.inputs[1])\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1443, in __getitem__\n    return self._op._inputs[i]\nIndexError: list index out of range", "body": "-----------------------\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in TensorFlow)**: Yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nLinux Ubuntu 14.04\r\n- **TensorFlow installed from (source or binary)**:\r\nsource\r\n- **TensorFlow version (use command below)**:\r\ncommit 3bee923c9\r\n- **Bazel version (if compiling from source)**:\r\n0.4.5\r\n- **CUDA/cuDNN version**:\r\ncuda 8.0/cudnn 5.1.5\r\n- **GPU model and memory**:\r\nTesla P40 \r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\nI used auto parallel optimizer in grappler for cifar10 example, but grappler changes the order of nodes in graph proto. It causes the failure of import_graph_def, because ops.set_shapes_for_outputs(op), which is line 407 of tensorflow/tensorflow/python/framework/importer.py is failed. This is because all of the input nodes must be defined before to define a node. importer restricts the order of nodes for graph definition proto, but I think importer shoud be flexible to the order of nodes. \r\n\r\n### Source code / logs\r\n  ```\r\nwith tf.Graph().as_default() as graph:\r\n    #global_step = tf.contrib.framework.get_or_create_global_step()\r\n    global_step = tf.get_variable(\r\n        'global_step', [], dtype=tf.int32,\r\n        initializer=tf.constant_initializer(0), trainable=False)\r\n\r\n    # Get images and labels for CIFAR-10.\r\n    images, labels = cifar10.distorted_inputs()\r\n\r\n    # Build a Graph that computes the logits predictions from the\r\n    # inference model.\r\n    logits = cifar10.inference(images)\r\n\r\n    # Calculate loss.\r\n    loss = cifar10.loss(logits, labels)\r\n\r\n    # Build a Graph that trains the model with one batch of examples and\r\n    # updates the model parameters.\r\n    train_op = cifar10.train(loss, global_step)\r\n\r\n    init_op = tf.global_variables_initializer()\r\n\r\n    queue_runners = []\r\n    for qr in ops.get_collection(ops.GraphKeys.QUEUE_RUNNERS):\r\n      queue_runners.append(qr.to_proto())\r\n\r\n    mg = meta_graph.create_meta_graph_def(graph=graph)\r\n\r\n  #Auto-parallel\r\n  rewriter_config = rewriter_config_pb2.RewriterConfig()\r\n  rewriter_config.optimizers.append('autoparallel')\r\n  rewriter_config.auto_parallel.num_replicas = FLAGS.num_gpus\r\n\r\n  graph_def = tf_optimizer.OptimizeGraph(rewriter_config, mg)\r\n\r\n  with tf.Graph().as_default() as g:\r\n    tf.import_graph_def(graph_def=graph_def, name='')\r\n```\r\n\r\nThis is the log\r\n```\r\n File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/platform/app.py\", line 48, in run\r\n    _sys.exit(main(_sys.argv[:1] + flags_passthrough))\r\n  File \"tensorflow_rdag/examples/distributed/cifar10/cifar10_in_graph_auto_parallel.py\", line 157, in main\r\n    train()\r\n  File \"tensorflow_rdag/examples/distributed/cifar10/cifar10_in_graph_auto_parallel.py\", line 105, in train\r\n    tf.import_graph_def(graph_def=graph_def, name='')\r\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/importer.py\", line 404, in import_graph_def\r\n    ops.set_shapes_for_outputs(op)\r\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1723, in set_shapes_for_outputs\r\n    shapes = shape_func(op)\r\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1673, in call_with_requiring\r\n    return call_cpp_shape_fn(op, require_shape_fn=True)\r\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/common_shapes.py\", line 610, in call_cpp_shape_fn\r\n    debug_python_shape_fn, require_shape_fn)\r\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/common_shapes.py\", line 653, in _call_cpp_shape_fn_impl\r\n    v = tensor_util.constant_value(op.inputs[idx])\r\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/tensor_util.py\", line 710, in constant_value\r\n    ret = _ConstantValue(tensor)\r\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/tensor_util.py\", line 676, in _ConstantValue\r\n    fill_value = constant_value(tensor.op.inputs[1])\r\n  File \"/cmsdata/ssd0/soojeong/tensorflow_venv/local/lib/python2.7/site-packages/tensorflow/python/framework/ops.py\", line 1443, in __getitem__\r\n    return self._op._inputs[i]\r\nIndexError: list index out of range\r\n\r\n```"}