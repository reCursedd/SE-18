{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/360005635", "html_url": "https://github.com/tensorflow/tensorflow/issues/13577#issuecomment-360005635", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/13577", "id": 360005635, "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDAwNTYzNQ==", "user": {"login": "wenruij", "id": 5120224, "node_id": "MDQ6VXNlcjUxMjAyMjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5120224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wenruij", "html_url": "https://github.com/wenruij", "followers_url": "https://api.github.com/users/wenruij/followers", "following_url": "https://api.github.com/users/wenruij/following{/other_user}", "gists_url": "https://api.github.com/users/wenruij/gists{/gist_id}", "starred_url": "https://api.github.com/users/wenruij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wenruij/subscriptions", "organizations_url": "https://api.github.com/users/wenruij/orgs", "repos_url": "https://api.github.com/users/wenruij/repos", "events_url": "https://api.github.com/users/wenruij/events{/privacy}", "received_events_url": "https://api.github.com/users/wenruij/received_events", "type": "User", "site_admin": false}, "created_at": "2018-01-24T03:01:00Z", "updated_at": "2018-01-24T03:01:00Z", "author_association": "NONE", "body_html": "<p>Its a good way to serialize a libsvm into tf.Example protos in this way:</p>\n<pre><code>def libsvm2proto(data_source, target_dir, delimiter='\\t'):\n    \"\"\"\n    a single file should not contain lines more than 1000,000\n    :param data_source: libsvm file path\n    :param target_dir: dir to storage the serialize proto file\n    :param delimiter: delimiter for csv reader\n    :return:\n    \"\"\"\n    if not os.path.isfile(data_source):\n        raise ValueError('data file passed do not exist or not a file')\n\n    file_name = os.path.join(target_dir, os.path.splitext(\n        os.path.basename(data_source))[0] + '.tfrecords')\n    writer = tf.python_io.TFRecordWriter(file_name)\n    start = datetime.now()\n    with open(data_source, 'rb') as rf:\n        f_reader = csv.reader(rf, delimiter=delimiter, quotechar='|')\n        for row in f_reader:\n            feature = dict()\n            indexes = []\n            values = []\n            feature.update({'label': _float_feature([float(row[0])])})\n            for e in row[1:]:\n                index, value = e.split(':')\n                indexes.append(int(index))\n                values.append(float(value))\n                feature.update({'index': _int64_feature(indexes)})\n                feature.update({'value': _float_feature(values)})\n\n            example = tf.train.Example(features=tf.train.Features(feature=feature))\n            writer.write(example.SerializeToString())\n\n        writer.close()\n        end = datetime.now()\n\n        print(\"- consumed time: %ds for %s\" % ((end-start).seconds, data_source))\n</code></pre>\n<p>The size of TFRecord after converted is just half of the source libsvm <g-emoji class=\"g-emoji\" alias=\"+1\" fallback-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png\">\ud83d\udc4d</g-emoji> .  That's what we really expect.</p>", "body_text": "Its a good way to serialize a libsvm into tf.Example protos in this way:\ndef libsvm2proto(data_source, target_dir, delimiter='\\t'):\n    \"\"\"\n    a single file should not contain lines more than 1000,000\n    :param data_source: libsvm file path\n    :param target_dir: dir to storage the serialize proto file\n    :param delimiter: delimiter for csv reader\n    :return:\n    \"\"\"\n    if not os.path.isfile(data_source):\n        raise ValueError('data file passed do not exist or not a file')\n\n    file_name = os.path.join(target_dir, os.path.splitext(\n        os.path.basename(data_source))[0] + '.tfrecords')\n    writer = tf.python_io.TFRecordWriter(file_name)\n    start = datetime.now()\n    with open(data_source, 'rb') as rf:\n        f_reader = csv.reader(rf, delimiter=delimiter, quotechar='|')\n        for row in f_reader:\n            feature = dict()\n            indexes = []\n            values = []\n            feature.update({'label': _float_feature([float(row[0])])})\n            for e in row[1:]:\n                index, value = e.split(':')\n                indexes.append(int(index))\n                values.append(float(value))\n                feature.update({'index': _int64_feature(indexes)})\n                feature.update({'value': _float_feature(values)})\n\n            example = tf.train.Example(features=tf.train.Features(feature=feature))\n            writer.write(example.SerializeToString())\n\n        writer.close()\n        end = datetime.now()\n\n        print(\"- consumed time: %ds for %s\" % ((end-start).seconds, data_source))\n\nThe size of TFRecord after converted is just half of the source libsvm \ud83d\udc4d .  That's what we really expect.", "body": "Its a good way to serialize a libsvm into tf.Example protos in this way:\r\n```\r\ndef libsvm2proto(data_source, target_dir, delimiter='\\t'):\r\n    \"\"\"\r\n    a single file should not contain lines more than 1000,000\r\n    :param data_source: libsvm file path\r\n    :param target_dir: dir to storage the serialize proto file\r\n    :param delimiter: delimiter for csv reader\r\n    :return:\r\n    \"\"\"\r\n    if not os.path.isfile(data_source):\r\n        raise ValueError('data file passed do not exist or not a file')\r\n\r\n    file_name = os.path.join(target_dir, os.path.splitext(\r\n        os.path.basename(data_source))[0] + '.tfrecords')\r\n    writer = tf.python_io.TFRecordWriter(file_name)\r\n    start = datetime.now()\r\n    with open(data_source, 'rb') as rf:\r\n        f_reader = csv.reader(rf, delimiter=delimiter, quotechar='|')\r\n        for row in f_reader:\r\n            feature = dict()\r\n            indexes = []\r\n            values = []\r\n            feature.update({'label': _float_feature([float(row[0])])})\r\n            for e in row[1:]:\r\n                index, value = e.split(':')\r\n                indexes.append(int(index))\r\n                values.append(float(value))\r\n                feature.update({'index': _int64_feature(indexes)})\r\n                feature.update({'value': _float_feature(values)})\r\n\r\n            example = tf.train.Example(features=tf.train.Features(feature=feature))\r\n            writer.write(example.SerializeToString())\r\n\r\n        writer.close()\r\n        end = datetime.now()\r\n\r\n        print(\"- consumed time: %ds for %s\" % ((end-start).seconds, data_source))\r\n```\r\nThe size of TFRecord after converted is just half of the source libsvm \ud83d\udc4d .  That's what we really expect.\r\n"}