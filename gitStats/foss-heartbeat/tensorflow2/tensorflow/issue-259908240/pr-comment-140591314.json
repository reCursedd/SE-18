{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/140591314", "pull_request_review_id": 64690886, "id": 140591314, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDU5MTMxNA==", "diff_hunk": "@@ -198,8 +217,76 @@ string BuildWavFile(int32 samples_per_second, int32 channel_count,\n   return data;\n }\n \n+Status ReadInfoFile(const string& filename, uint32* width, uint32* height,\n+                    uint32* frames) {\n+  string data;\n+  ReadFileToString(Env::Default(), filename, &data);\n+  bool in_output = false;\n+  bool in_mapping = false;\n+  uint32 frames_value = 0;\n+  uint32 height_value = 0;\n+  uint32 width_value = 0;\n+  for (const string& line : str_util::Split(data, '\\n')) {\n+    if (!in_output && line.find(\"Output #\") == 0) {\n+      in_output = true;\n+      in_mapping = false;\n+    }\n+    if (!in_mapping && line.find(\"Stream mapping:\") == 0) {\n+      in_output = false;\n+      in_mapping = true;\n+    }\n+    if (in_mapping) {\n+      if (line.find(\"frame=  \") == 0) {\n+        string number = line.substr(8, line.find(\" \", 8));\n+        number = number.substr(0, number.find(\" \"));\n+        if (strings::safe_strtou32(number, &frames_value)) {\n+          in_mapping = false;\n+        }\n+      }\n+    }\n+    if (in_output) {\n+      if (line.find(\"    Stream #\") == 0) {\n+        size_t p = line.find(\", rgb24, \", 24);\n+        if (p != std::string::npos) {\n+          string rgb24 = line.substr(p + 9, line.find(\" \", p + 9));\n+          rgb24 = rgb24.substr(0, rgb24.find(\",\"));\n+          string rgb24_width = rgb24.substr(0, rgb24.find(\"x\"));\n+          string rgb24_height = rgb24.substr(rgb24_width.length() + 1);\n+          if (strings::safe_strtou32(rgb24_width, &width_value) &&\n+              strings::safe_strtou32(rgb24_height, &height_value)) {\n+            in_output = false;\n+          }\n+        }\n+      }\n+    }\n+  }\n+  if (frames_value == 0 || height_value == 0 || width_value == 0) {\n+    return errors::Unknown(\"Not enough video info returned by FFmpeg [\",\n+                           frames_value, \", \", height_value, \", \", width_value,\n+                           \", 3]\");\n+  }\n+  *width = width_value;\n+  *height = height_value;\n+  *frames = frames_value;\n+  return Status::OK();\n+}\n+\n }  // namespace\n \n+FileDeleter::~FileDeleter() {\n+  Env& env = *Env::Default();\n+  env.DeleteFile(filename_).IgnoreError();\n+}\n+\n+Status WriteFile(const string& filename, StringPiece contents) {\n+  Env& env = *Env::Default();\n+  std::unique_ptr<WritableFile> file;\n+  TF_RETURN_IF_ERROR(env.NewWritableFile(filename, &file));\n+  TF_RETURN_IF_ERROR(file->Append(contents));\n+  TF_RETURN_IF_ERROR(file->Close());\n+  return Status::OK();\n+}\n+\n string GetTempFilename(const string& extension) {", "path": "tensorflow/contrib/ffmpeg/default/ffmpeg_lib.cc", "position": null, "original_position": 158, "commit_id": "dc4567a057f67af7a1c04a3b127e62389252f21a", "original_commit_id": "46919a8454a5502bf7aafe5ce0a13c8a2959efc2", "user": {"login": "drpngx", "id": 20959853, "node_id": "MDQ6VXNlcjIwOTU5ODUz", "avatar_url": "https://avatars1.githubusercontent.com/u/20959853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drpngx", "html_url": "https://github.com/drpngx", "followers_url": "https://api.github.com/users/drpngx/followers", "following_url": "https://api.github.com/users/drpngx/following{/other_user}", "gists_url": "https://api.github.com/users/drpngx/gists{/gist_id}", "starred_url": "https://api.github.com/users/drpngx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drpngx/subscriptions", "organizations_url": "https://api.github.com/users/drpngx/orgs", "repos_url": "https://api.github.com/users/drpngx/repos", "events_url": "https://api.github.com/users/drpngx/events{/privacy}", "received_events_url": "https://api.github.com/users/drpngx/received_events", "type": "User", "site_admin": false}, "body": "Ultimately, this should be good to have in core tensorflow.", "created_at": "2017-09-22T20:37:22Z", "updated_at": "2017-11-11T21:27:54Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/13242#discussion_r140591314", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13242", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/140591314"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/13242#discussion_r140591314"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/13242"}}, "body_html": "<p>Ultimately, this should be good to have in core tensorflow.</p>", "body_text": "Ultimately, this should be good to have in core tensorflow."}