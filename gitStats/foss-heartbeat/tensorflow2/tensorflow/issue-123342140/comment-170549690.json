{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/170549690", "html_url": "https://github.com/tensorflow/tensorflow/issues/583#issuecomment-170549690", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/583", "id": 170549690, "node_id": "MDEyOklzc3VlQ29tbWVudDE3MDU0OTY5MA==", "user": {"login": "jeremybarnes", "id": 112556, "node_id": "MDQ6VXNlcjExMjU1Ng==", "avatar_url": "https://avatars3.githubusercontent.com/u/112556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremybarnes", "html_url": "https://github.com/jeremybarnes", "followers_url": "https://api.github.com/users/jeremybarnes/followers", "following_url": "https://api.github.com/users/jeremybarnes/following{/other_user}", "gists_url": "https://api.github.com/users/jeremybarnes/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremybarnes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremybarnes/subscriptions", "organizations_url": "https://api.github.com/users/jeremybarnes/orgs", "repos_url": "https://api.github.com/users/jeremybarnes/repos", "events_url": "https://api.github.com/users/jeremybarnes/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremybarnes/received_events", "type": "User", "site_admin": false}, "created_at": "2016-01-11T13:32:17Z", "updated_at": "2016-01-11T13:32:17Z", "author_association": "NONE", "body_html": "<p>This is very likely the case.  With 8 vCPUs, the mutex locking is nearly undetectable.  With 16, it is about 10% of the runtime.  With 32, it dominates.  I can only imagine that with 64 it's completely unusable.</p>\n<p>If you replace the mutex in the thread pool with a spinlock (I copied the source from the one here: <a href=\"https://github.com/mldbai/mldb/blob/master/arch/spinlock.h\">https://github.com/mldbai/mldb/blob/master/arch/spinlock.h</a>), does it change the shape of the graph?</p>\n<p>I have started work on a lockless threadpool implementation; it's complicated by the fact that thread pools are created and destroyed dynamically, so it needs to be able to deal with threads coming and going.</p>", "body_text": "This is very likely the case.  With 8 vCPUs, the mutex locking is nearly undetectable.  With 16, it is about 10% of the runtime.  With 32, it dominates.  I can only imagine that with 64 it's completely unusable.\nIf you replace the mutex in the thread pool with a spinlock (I copied the source from the one here: https://github.com/mldbai/mldb/blob/master/arch/spinlock.h), does it change the shape of the graph?\nI have started work on a lockless threadpool implementation; it's complicated by the fact that thread pools are created and destroyed dynamically, so it needs to be able to deal with threads coming and going.", "body": "This is very likely the case.  With 8 vCPUs, the mutex locking is nearly undetectable.  With 16, it is about 10% of the runtime.  With 32, it dominates.  I can only imagine that with 64 it's completely unusable.\n\nIf you replace the mutex in the thread pool with a spinlock (I copied the source from the one here: https://github.com/mldbai/mldb/blob/master/arch/spinlock.h), does it change the shape of the graph?\n\nI have started work on a lockless threadpool implementation; it's complicated by the fact that thread pools are created and destroyed dynamically, so it needs to be able to deal with threads coming and going.\n"}