{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/184631385", "html_url": "https://github.com/tensorflow/tensorflow/issues/583#issuecomment-184631385", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/583", "id": 184631385, "node_id": "MDEyOklzc3VlQ29tbWVudDE4NDYzMTM4NQ==", "user": {"login": "dvyukov", "id": 1095328, "node_id": "MDQ6VXNlcjEwOTUzMjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1095328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvyukov", "html_url": "https://github.com/dvyukov", "followers_url": "https://api.github.com/users/dvyukov/followers", "following_url": "https://api.github.com/users/dvyukov/following{/other_user}", "gists_url": "https://api.github.com/users/dvyukov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvyukov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvyukov/subscriptions", "organizations_url": "https://api.github.com/users/dvyukov/orgs", "repos_url": "https://api.github.com/users/dvyukov/repos", "events_url": "https://api.github.com/users/dvyukov/events{/privacy}", "received_events_url": "https://api.github.com/users/dvyukov/received_events", "type": "User", "site_admin": false}, "created_at": "2016-02-16T11:05:20Z", "updated_at": "2016-02-16T11:05:20Z", "author_association": "NONE", "body_html": "<p><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/hovercards?user_id=112556\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jeremybarnes\">@jeremybarnes</a> thanks for mnist pointer. FTR the command line is:</p>\n<pre><code>$ bazel build --dynamic_mode=off -c opt tensorflow/models/image/mnist:convolutional\n$ bazel-bin/tensorflow/models/image/mnist/convolutional\n</code></pre>\n<p>Ha, that also deadlocks for me.<br>\nI think the reason why you do not see deadlocks is that your pool implementation actually provides FIFO for <em>externally</em> submitted tasks accidentally (or maybe not!) <em>and</em> that tasks that require FIFO ordering are exactly externally submitted. And it is also important that these tasks are submitted from a single external thread. If anything of the above becomes false, then I think you will also see deadlocks.</p>\n<p>I can kind-a work around deadlocks by creating 8x more threads than requested. But that results in 800 threads created (there are 2 thread pools in process (why?)). And I guess it's not guaranteed to work anyway.</p>", "body_text": "@jeremybarnes thanks for mnist pointer. FTR the command line is:\n$ bazel build --dynamic_mode=off -c opt tensorflow/models/image/mnist:convolutional\n$ bazel-bin/tensorflow/models/image/mnist/convolutional\n\nHa, that also deadlocks for me.\nI think the reason why you do not see deadlocks is that your pool implementation actually provides FIFO for externally submitted tasks accidentally (or maybe not!) and that tasks that require FIFO ordering are exactly externally submitted. And it is also important that these tasks are submitted from a single external thread. If anything of the above becomes false, then I think you will also see deadlocks.\nI can kind-a work around deadlocks by creating 8x more threads than requested. But that results in 800 threads created (there are 2 thread pools in process (why?)). And I guess it's not guaranteed to work anyway.", "body": "@jeremybarnes thanks for mnist pointer. FTR the command line is:\n\n```\n$ bazel build --dynamic_mode=off -c opt tensorflow/models/image/mnist:convolutional\n$ bazel-bin/tensorflow/models/image/mnist/convolutional\n```\n\nHa, that also deadlocks for me.\nI think the reason why you do not see deadlocks is that your pool implementation actually provides FIFO for _externally_ submitted tasks accidentally (or maybe not!) _and_ that tasks that require FIFO ordering are exactly externally submitted. And it is also important that these tasks are submitted from a single external thread. If anything of the above becomes false, then I think you will also see deadlocks.\n\nI can kind-a work around deadlocks by creating 8x more threads than requested. But that results in 800 threads created (there are 2 thread pools in process (why?)). And I guess it's not guaranteed to work anyway.\n"}