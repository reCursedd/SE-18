{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/203363296", "pull_request_review_id": 138235517, "id": 203363296, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMzM2MzI5Ng==", "diff_hunk": "@@ -24,7 +24,13 @@ class Platform;\n \n namespace tensorflow {\n \n-// Initializes the CUDA platform and returns OK if the CUDA\n+#if GOOGLE_CUDA\n+#define GPU_PLATFORM_NAME \"CUDA\"", "path": "tensorflow/core/common_runtime/gpu/gpu_init.h", "position": null, "original_position": 6, "commit_id": "c8ae8965ea75a28f30d80ed7657fd9f31b18b48d", "original_commit_id": "9af995ecf3ba1815a0a9cf6e0b4ca372f1ff0b9f", "user": {"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}, "body": "I am unclear on how you plan to structure the TF devices. It looks to me like you are planning to extend TensorFlow's \"GPU\" device to support non-NVidia hardware. However, I am wondering whether this is the right approach.\r\n\r\nIn principle I might have a machine with GPUs from two different manufacturers, and I might want to use both from the same TensorFlow program at run time. This design encodes an either/or choice between the two at compile time, which feels a bit limiting. I suggest we find another way to do this.\r\n\r\nIn particular, did you consider the option of making the new GPU device a new kind of device (e.g., \"AMDGPU\" instead of \"GPU\")? The two care share most of the code, I expect, but this would allow the two to coexist. (I am not particularly attached to the name, the point is: give them different names.)\r\n", "created_at": "2018-07-18T12:44:53Z", "updated_at": "2018-08-29T21:18:39Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/20845#discussion_r203363296", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20845", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/203363296"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/20845#discussion_r203363296"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/20845"}}, "body_html": "<p>I am unclear on how you plan to structure the TF devices. It looks to me like you are planning to extend TensorFlow's \"GPU\" device to support non-NVidia hardware. However, I am wondering whether this is the right approach.</p>\n<p>In principle I might have a machine with GPUs from two different manufacturers, and I might want to use both from the same TensorFlow program at run time. This design encodes an either/or choice between the two at compile time, which feels a bit limiting. I suggest we find another way to do this.</p>\n<p>In particular, did you consider the option of making the new GPU device a new kind of device (e.g., \"AMDGPU\" instead of \"GPU\")? The two care share most of the code, I expect, but this would allow the two to coexist. (I am not particularly attached to the name, the point is: give them different names.)</p>", "body_text": "I am unclear on how you plan to structure the TF devices. It looks to me like you are planning to extend TensorFlow's \"GPU\" device to support non-NVidia hardware. However, I am wondering whether this is the right approach.\nIn principle I might have a machine with GPUs from two different manufacturers, and I might want to use both from the same TensorFlow program at run time. This design encodes an either/or choice between the two at compile time, which feels a bit limiting. I suggest we find another way to do this.\nIn particular, did you consider the option of making the new GPU device a new kind of device (e.g., \"AMDGPU\" instead of \"GPU\")? The two care share most of the code, I expect, but this would allow the two to coexist. (I am not particularly attached to the name, the point is: give them different names.)"}