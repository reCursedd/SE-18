{"url": "https://api.github.com/repos/tensorflow/tensorflow/issues/comments/214971536", "html_url": "https://github.com/tensorflow/tensorflow/issues/2123#issuecomment-214971536", "issue_url": "https://api.github.com/repos/tensorflow/tensorflow/issues/2123", "id": 214971536, "node_id": "MDEyOklzc3VlQ29tbWVudDIxNDk3MTUzNg==", "user": {"login": "harpribot", "id": 7632939, "node_id": "MDQ6VXNlcjc2MzI5Mzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7632939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harpribot", "html_url": "https://github.com/harpribot", "followers_url": "https://api.github.com/users/harpribot/followers", "following_url": "https://api.github.com/users/harpribot/following{/other_user}", "gists_url": "https://api.github.com/users/harpribot/gists{/gist_id}", "starred_url": "https://api.github.com/users/harpribot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harpribot/subscriptions", "organizations_url": "https://api.github.com/users/harpribot/orgs", "repos_url": "https://api.github.com/users/harpribot/repos", "events_url": "https://api.github.com/users/harpribot/events{/privacy}", "received_events_url": "https://api.github.com/users/harpribot/received_events", "type": "User", "site_admin": false}, "created_at": "2016-04-27T05:12:17Z", "updated_at": "2016-04-27T05:12:17Z", "author_association": "NONE", "body_html": "<p>Okay so the solution was this:</p>\n<pre><code># choose RNN/GRU/LSTM cell\n        with tf.variable_scope(\"train_test\", reuse=True):\n            self.cell = rnn_cell.LSTMCell(self.memory_dim)\n\n        # embedding model\n        if not self.attention:\n            with tf.variable_scope(\"train_test\"):\n                self.dec_outputs, self.dec_memory = seq2seq.embedding_rnn_seq2seq(\\\n                                self.enc_inp, self.dec_inp, self.cell, \\\n                                self.vocab_size, self.vocab_size, self.seq_length)\n            with tf.variable_scope(\"train_test\", reuse = True):\n                self.dec_outputs_tst, _ = seq2seq.embedding_rnn_seq2seq(\\\n                                self.enc_inp, self.dec_inp, self.cell, \\\n                                self.vocab_size, self.vocab_size, self.seq_length, feed_previous=True)\n</code></pre>", "body_text": "Okay so the solution was this:\n# choose RNN/GRU/LSTM cell\n        with tf.variable_scope(\"train_test\", reuse=True):\n            self.cell = rnn_cell.LSTMCell(self.memory_dim)\n\n        # embedding model\n        if not self.attention:\n            with tf.variable_scope(\"train_test\"):\n                self.dec_outputs, self.dec_memory = seq2seq.embedding_rnn_seq2seq(\\\n                                self.enc_inp, self.dec_inp, self.cell, \\\n                                self.vocab_size, self.vocab_size, self.seq_length)\n            with tf.variable_scope(\"train_test\", reuse = True):\n                self.dec_outputs_tst, _ = seq2seq.embedding_rnn_seq2seq(\\\n                                self.enc_inp, self.dec_inp, self.cell, \\\n                                self.vocab_size, self.vocab_size, self.seq_length, feed_previous=True)", "body": "Okay so the solution was this:\n\n```\n# choose RNN/GRU/LSTM cell\n        with tf.variable_scope(\"train_test\", reuse=True):\n            self.cell = rnn_cell.LSTMCell(self.memory_dim)\n\n        # embedding model\n        if not self.attention:\n            with tf.variable_scope(\"train_test\"):\n                self.dec_outputs, self.dec_memory = seq2seq.embedding_rnn_seq2seq(\\\n                                self.enc_inp, self.dec_inp, self.cell, \\\n                                self.vocab_size, self.vocab_size, self.seq_length)\n            with tf.variable_scope(\"train_test\", reuse = True):\n                self.dec_outputs_tst, _ = seq2seq.embedding_rnn_seq2seq(\\\n                                self.enc_inp, self.dec_inp, self.cell, \\\n                                self.vocab_size, self.vocab_size, self.seq_length, feed_previous=True)\n```\n"}