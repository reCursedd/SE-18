{"url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154408836", "pull_request_review_id": 80573795, "id": 154408836, "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQwODgzNg==", "diff_hunk": "@@ -0,0 +1,98 @@\n+# Copyright 2017 The TensorFlow Authors. All rights reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"Utilities for defining TensorFlow Bazel dependencies.\"\"\"\n+\n+_SINGLE_URL_WHITELIST = depset([\n+    \"arm_compiler\",\n+    \"ortools_archive\",\n+])\n+\n+def _is_windows(ctx):\n+  return ctx.os.name.lower().find(\"windows\") != -1\n+\n+def _get_env_var(ctx, name):\n+  if name in ctx.os.environ:\n+    return ctx.os.environ[name]\n+  else:\n+    return None\n+\n+# Executes specified command with arguments and calls 'fail' if it exited with\n+# non-zero code\n+def _execute_and_check_ret_code(repo_ctx, cmd_and_args):\n+  result = repo_ctx.execute(cmd_and_args, timeout=10)\n+  if result.return_code != 0:\n+    fail((\"Non-zero return code({1}) when executing '{0}':\\n\" + \"Stdout: {2}\\n\"\n+          + \"Stderr: {3}\").format(\" \".join(cmd_and_args), result.return_code,\n+                                  result.stdout, result.stderr))\n+\n+# Apply a patch_file to the repository root directory\n+# Runs 'patch -p1'\n+def _apply_patch(ctx, patch_file):\n+  # Don't check patch on Windows, because patch is only available under bash.\n+  if not _is_windows(ctx) and not ctx.which(\"patch\"):\n+    fail(\"patch command is not found, please install it\")\n+  cmd = [\"patch\", \"-p1\", \"-d\", ctx.path(\".\"), \"-i\", ctx.path(patch_file)]\n+  if _is_windows(ctx):\n+    bazel_sh = _get_env_var(ctx, \"BAZEL_SH\")\n+    if not bazel_sh:\n+      fail(\"BAZEL_SH environment variable is not set\")\n+    cmd = [bazel_sh, \"-c\", \" \".join(cmd)]\n+  _execute_and_check_ret_code(ctx, cmd)\n+\n+def _apply_delete(ctx, paths):\n+  for path in paths:\n+    if path.startswith(\"/\"):\n+      fail(\"refusing to rm -rf path starting with '/': \" + path)\n+    if \"..\" in path:\n+      fail(\"refusing to rm -rf path containing '..': \" + path)\n+  _execute_and_check_ret_code(\n+      ctx, [\"rm\", \"-rf\"] + [ctx.path(path) for path in paths])\n+\n+def _tf_http_archive(ctx):\n+  if (\"mirror.bazel.build\" not in ctx.attr.urls[0] or\n+      (len(ctx.attr.urls) < 2 and\n+       ctx.attr.name not in _SINGLE_URL_WHITELIST)):\n+    fail(\"tf_http_archive(urls) must have redundant URLs. The Bazel Mirror \" +\n+         \"URL must come first. Please note mirroring happens after merge\")\n+  ctx.download_and_extract(\n+      ctx.attr.urls,\n+      \"\",\n+      ctx.attr.sha256,\n+      ctx.attr.type,\n+      ctx.attr.strip_prefix)\n+  if ctx.attr.delete:\n+    _apply_delete(ctx, ctx.attr.delete)\n+  if ctx.attr.patch_file != None:\n+    _apply_patch(ctx, ctx.attr.patch_file)\n+  if ctx.attr.build_file != None:\n+    ctx.symlink(ctx.attr.build_file, \"BUILD\")\n+\n+tf_http_archive = repository_rule(\n+    implementation=_tf_http_archive,\n+    attrs={\n+        \"sha256\": attr.string(mandatory=True),\n+        \"urls\": attr.string_list(mandatory=True, allow_empty=False),\n+        \"strip_prefix\": attr.string(),\n+        \"type\": attr.string(),\n+        \"delete\": attr.string_list(),\n+        \"patch_file\": attr.label(),\n+        \"build_file\": attr.label(),", "path": "third_party/repo.bzl", "position": 96, "original_position": 91, "commit_id": "0dae3a65f5ebbb18e96cb00103e7ba8ccf55d3fd", "original_commit_id": "31435ce75b937eee7803d13da98bee4fead9a239", "user": {"login": "jart", "id": 49262, "node_id": "MDQ6VXNlcjQ5MjYy", "avatar_url": "https://avatars1.githubusercontent.com/u/49262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jart", "html_url": "https://github.com/jart", "followers_url": "https://api.github.com/users/jart/followers", "following_url": "https://api.github.com/users/jart/following{/other_user}", "gists_url": "https://api.github.com/users/jart/gists{/gist_id}", "starred_url": "https://api.github.com/users/jart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jart/subscriptions", "organizations_url": "https://api.github.com/users/jart/orgs", "repos_url": "https://api.github.com/users/jart/repos", "events_url": "https://api.github.com/users/jart/events{/privacy}", "received_events_url": "https://api.github.com/users/jart/received_events", "type": "User", "site_admin": false}, "body": "I documented the bind() statements instead, since we can't create them from a Skylark rule.", "created_at": "2017-12-01T18:03:32Z", "updated_at": "2017-12-01T21:19:37Z", "html_url": "https://github.com/tensorflow/tensorflow/pull/15018#discussion_r154408836", "pull_request_url": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15018", "author_association": "MEMBER", "_links": {"self": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/comments/154408836"}, "html": {"href": "https://github.com/tensorflow/tensorflow/pull/15018#discussion_r154408836"}, "pull_request": {"href": "https://api.github.com/repos/tensorflow/tensorflow/pulls/15018"}}, "body_html": "<p>I documented the bind() statements instead, since we can't create them from a Skylark rule.</p>", "body_text": "I documented the bind() statements instead, since we can't create them from a Skylark rule.", "in_reply_to_id": 154239398}